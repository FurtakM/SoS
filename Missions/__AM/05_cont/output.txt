// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 83 0 0
// InitRestrictions ;
  19: CALL 211 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 292 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 599 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 599 0 2
// PrepareAmericans ;
  74: CALL 1198 0 0
// Action ;
  78: CALL 2134 0 0
// end ;
  82: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter ; function Init ; begin
  83: LD_INT 0
  85: PPUSH
// debug := false ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// mission_prefix := 05_ ;
  94: LD_ADDR_EXP 2
  98: PUSH
  99: LD_STRING 05_
 101: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 102: LD_ADDR_EXP 3
 106: PUSH
 107: LD_STRING 05a_
 109: ST_TO_ADDR
// deltaBuilded := false ;
 110: LD_ADDR_EXP 4
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// denisArrives := false ;
 118: LD_ADDR_EXP 5
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// radar_allowed := false ;
 126: LD_ADDR_EXP 7
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// first_apeman_tamed := false ;
 134: LD_ADDR_EXP 8
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// arab_spotted := false ;
 142: LD_ADDR_EXP 13
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// end_mission := false ;
 150: LD_ADDR_EXP 14
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// apeman_army := false ;
 158: LD_ADDR_EXP 9
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// radar_researched := false ;
 166: LD_ADDR_EXP 10
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// radar_builded := false ;
 174: LD_ADDR_EXP 11
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// apeman_counter := 0 ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// Delta := 0 ;
 190: LD_ADDR_EXP 6
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// apeKillCounter := 0 ;
 198: LD_ADDR_EXP 15
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// end ;
 206: LD_VAR 0 1
 210: RET
// function InitRestrictions ; begin
 211: LD_INT 0
 213: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 214: LD_INT 7
 216: PPUSH
 217: LD_INT 1
 219: PPUSH
 220: LD_INT 1
 222: PPUSH
 223: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 227: LD_INT 8
 229: PPUSH
 230: LD_INT 1
 232: PPUSH
 233: LD_INT 1
 235: PPUSH
 236: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 240: LD_INT 10
 242: PPUSH
 243: LD_INT 1
 245: PPUSH
 246: LD_INT 1
 248: PPUSH
 249: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 253: LD_INT 69
 255: PPUSH
 256: LD_INT 1
 258: PPUSH
 259: LD_STRING GatlingInGamma
 261: PPUSH
 262: LD_INT 1
 264: PPUSH
 265: CALL_OW 30
 269: PPUSH
 270: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 274: LD_INT 51
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: LD_INT 1
 282: PPUSH
 283: CALL_OW 322
// end ;
 287: LD_VAR 0 1
 291: RET
// function DebugMode ; begin
 292: LD_INT 0
 294: PPUSH
// FogOff ( 1 ) ;
 295: LD_INT 1
 297: PPUSH
 298: CALL_OW 344
// Difficulty := 2 ;
 302: LD_ADDR_OWVAR 67
 306: PUSH
 307: LD_INT 2
 309: ST_TO_ADDR
// end ;
 310: LD_VAR 0 1
 314: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 315: LD_INT 22
 317: PUSH
 318: LD_INT 1
 320: PUSH
 321: EMPTY
 322: LIST
 323: LIST
 324: PUSH
 325: LD_INT 23
 327: PUSH
 328: LD_INT 0
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: LD_INT 7
 346: GREATEREQUAL
 347: IFFALSE 359
 349: GO 351
 351: DISABLE
// SetAchievement ( ACH_TAME ) ;
 352: LD_STRING ACH_TAME
 354: PPUSH
 355: CALL_OW 543
 359: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 360: LD_INT 22
 362: PUSH
 363: LD_INT 1
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PUSH
 370: LD_INT 35
 372: PUSH
 373: LD_INT 11
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PPUSH
 384: CALL_OW 69
 388: PUSH
 389: LD_INT 22
 391: PUSH
 392: LD_INT 1
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 34
 401: PUSH
 402: LD_INT 11
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PPUSH
 413: CALL_OW 69
 417: AND
 418: IFFALSE 430
 420: GO 422
 422: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 423: LD_STRING ACH_RADAR
 425: PPUSH
 426: CALL_OW 543
 430: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 431: LD_INT 0
 433: PPUSH
// uc_side := side ;
 434: LD_ADDR_OWVAR 20
 438: PUSH
 439: LD_VAR 0 1
 443: ST_TO_ADDR
// uc_nation := nation ;
 444: LD_ADDR_OWVAR 21
 448: PUSH
 449: LD_VAR 0 2
 453: ST_TO_ADDR
// vc_chassis := chassis ;
 454: LD_ADDR_OWVAR 37
 458: PUSH
 459: LD_VAR 0 3
 463: ST_TO_ADDR
// vc_engine := engine ;
 464: LD_ADDR_OWVAR 39
 468: PUSH
 469: LD_VAR 0 4
 473: ST_TO_ADDR
// vc_control := control ;
 474: LD_ADDR_OWVAR 38
 478: PUSH
 479: LD_VAR 0 5
 483: ST_TO_ADDR
// vc_weapon := weapon ;
 484: LD_ADDR_OWVAR 40
 488: PUSH
 489: LD_VAR 0 6
 493: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 494: LD_ADDR_OWVAR 41
 498: PUSH
 499: LD_VAR 0 7
 503: ST_TO_ADDR
// result := CreateVehicle ;
 504: LD_ADDR_VAR 0 8
 508: PUSH
 509: CALL_OW 45
 513: ST_TO_ADDR
// end ;
 514: LD_VAR 0 8
 518: RET
// export function SayX ( units , ident ) ; var i ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
// result := false ;
 523: LD_ADDR_VAR 0 3
 527: PUSH
 528: LD_INT 0
 530: ST_TO_ADDR
// if not units then
 531: LD_VAR 0 1
 535: NOT
 536: IFFALSE 540
// exit ;
 538: GO 594
// for i in units do
 540: LD_ADDR_VAR 0 4
 544: PUSH
 545: LD_VAR 0 1
 549: PUSH
 550: FOR_IN
 551: IFFALSE 592
// if IsOk ( i ) then
 553: LD_VAR 0 4
 557: PPUSH
 558: CALL_OW 302
 562: IFFALSE 590
// begin Say ( i , ident ) ;
 564: LD_VAR 0 4
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 88
// result := i ;
 578: LD_ADDR_VAR 0 3
 582: PUSH
 583: LD_VAR 0 4
 587: ST_TO_ADDR
// break ;
 588: GO 592
// end ;
 590: GO 550
 592: POP
 593: POP
// end ;
 594: LD_VAR 0 3
 598: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 599: LD_INT 0
 601: PPUSH
 602: PPUSH
// InitUc ;
 603: CALL_OW 18
// InitHc ;
 607: CALL_OW 19
// uc_side := 0 ;
 611: LD_ADDR_OWVAR 20
 615: PUSH
 616: LD_INT 0
 618: ST_TO_ADDR
// uc_nation := 0 ;
 619: LD_ADDR_OWVAR 21
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// for i = 1 to amount do
 627: LD_ADDR_VAR 0 4
 631: PUSH
 632: DOUBLE
 633: LD_INT 1
 635: DEC
 636: ST_TO_ADDR
 637: LD_VAR 0 2
 641: PUSH
 642: FOR_TO
 643: IFFALSE 725
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 645: LD_ADDR_OWVAR 29
 649: PUSH
 650: LD_INT 9
 652: PPUSH
 653: LD_INT 12
 655: PPUSH
 656: CALL_OW 12
 660: PUSH
 661: LD_INT 9
 663: PPUSH
 664: LD_INT 12
 666: PPUSH
 667: CALL_OW 12
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 676: LD_ADDR_OWVAR 35
 680: PUSH
 681: LD_INT 5
 683: NEG
 684: PPUSH
 685: LD_INT 5
 687: PPUSH
 688: CALL_OW 12
 692: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 693: LD_INT 0
 695: PPUSH
 696: LD_INT 12
 698: PPUSH
 699: LD_INT 1
 701: PPUSH
 702: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 706: CALL_OW 44
 710: PPUSH
 711: LD_VAR 0 1
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
// end ;
 723: GO 642
 725: POP
 726: POP
// InitHc ;
 727: CALL_OW 19
// end ;
 731: LD_VAR 0 3
 735: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 736: LD_INT 0
 738: PPUSH
 739: PPUSH
 740: PPUSH
// if not unit then
 741: LD_VAR 0 1
 745: NOT
 746: IFFALSE 750
// exit ;
 748: GO 1193
// if IsInUnit ( unit ) then
 750: LD_VAR 0 1
 754: PPUSH
 755: CALL_OW 310
 759: IFFALSE 776
// unit := IsDrivenBy ( unit ) ;
 761: LD_ADDR_VAR 0 1
 765: PUSH
 766: LD_VAR 0 1
 770: PPUSH
 771: CALL_OW 311
 775: ST_TO_ADDR
// targets_list := [ ] ;
 776: LD_ADDR_VAR 0 5
 780: PUSH
 781: EMPTY
 782: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 783: LD_ADDR_VAR 0 4
 787: PUSH
 788: LD_VAR 0 2
 792: PPUSH
 793: LD_INT 24
 795: PUSH
 796: LD_INT 250
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PUSH
 803: LD_INT 3
 805: PUSH
 806: LD_INT 34
 808: PUSH
 809: LD_INT 12
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 21
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 58
 832: PUSH
 833: EMPTY
 834: LIST
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PPUSH
 842: CALL_OW 72
 846: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
 847: LD_VAR 0 4
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 74
 861: PPUSH
 862: LD_VAR 0 1
 866: PPUSH
 867: CALL_OW 296
 871: PUSH
 872: LD_INT 11
 874: LESS
 875: PUSH
 876: LD_VAR 0 1
 880: PPUSH
 881: CALL_OW 310
 885: NOT
 886: AND
 887: IFFALSE 915
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
 889: LD_VAR 0 1
 893: PPUSH
 894: LD_VAR 0 4
 898: PPUSH
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 74
 908: PPUSH
 909: CALL_OW 120
// exit ;
 913: GO 1193
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
 915: LD_ADDR_VAR 0 5
 919: PUSH
 920: LD_VAR 0 2
 924: PPUSH
 925: LD_INT 21
 927: PUSH
 928: LD_INT 1
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: PUSH
 935: LD_INT 3
 937: PUSH
 938: LD_INT 54
 940: PUSH
 941: EMPTY
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PPUSH
 952: CALL_OW 72
 956: PUSH
 957: LD_VAR 0 2
 961: PPUSH
 962: LD_INT 21
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PPUSH
 972: CALL_OW 72
 976: PUSH
 977: LD_VAR 0 2
 981: PPUSH
 982: LD_INT 21
 984: PUSH
 985: LD_INT 3
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 3
 994: PUSH
 995: LD_INT 58
 997: PUSH
 998: EMPTY
 999: LIST
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PPUSH
1009: CALL_OW 72
1013: PUSH
1014: LD_VAR 0 2
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: ST_TO_ADDR
// for target in targets_list do
1025: LD_ADDR_VAR 0 4
1029: PUSH
1030: LD_VAR 0 5
1034: PUSH
1035: FOR_IN
1036: IFFALSE 1191
// begin if target then
1038: LD_VAR 0 4
1042: IFFALSE 1189
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1044: LD_VAR 0 1
1048: PPUSH
1049: CALL_OW 110
1053: PUSH
1054: LD_INT 11
1056: EQUAL
1057: PUSH
1058: LD_VAR 0 4
1062: PPUSH
1063: LD_VAR 0 1
1067: PPUSH
1068: CALL_OW 74
1072: PPUSH
1073: CALL_OW 247
1077: PUSH
1078: LD_INT 3
1080: EQUAL
1081: PUSH
1082: LD_VAR 0 4
1086: PPUSH
1087: LD_VAR 0 1
1091: PPUSH
1092: CALL_OW 74
1096: PPUSH
1097: CALL_OW 264
1101: PUSH
1102: LD_INT 12
1104: EQUAL
1105: OR
1106: AND
1107: IFFALSE 1153
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1109: LD_VAR 0 1
1113: PPUSH
1114: LD_INT 0
1116: PPUSH
1117: LD_INT 0
1119: PPUSH
1120: LD_VAR 0 4
1124: PPUSH
1125: LD_VAR 0 1
1129: PPUSH
1130: CALL_OW 74
1134: PPUSH
1135: CALL_OW 132
// SetTag ( unit , 0 ) ;
1139: LD_VAR 0 1
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: CALL_OW 109
// end else
1151: GO 1189
// if not HasTask ( unit ) then
1153: LD_VAR 0 1
1157: PPUSH
1158: CALL_OW 314
1162: NOT
1163: IFFALSE 1189
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1165: LD_VAR 0 1
1169: PPUSH
1170: LD_VAR 0 4
1174: PPUSH
1175: LD_VAR 0 1
1179: PPUSH
1180: CALL_OW 74
1184: PPUSH
1185: CALL_OW 115
// end ;
1189: GO 1035
1191: POP
1192: POP
// end ; end_of_file
1193: LD_VAR 0 3
1197: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1198: LD_INT 0
1200: PPUSH
1201: PPUSH
1202: PPUSH
1203: PPUSH
1204: PPUSH
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// uc_side := 4 ;
1213: LD_ADDR_OWVAR 20
1217: PUSH
1218: LD_INT 4
1220: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1221: LD_ADDR_EXP 19
1225: PUSH
1226: LD_STRING Denis
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: LD_STRING 
1234: PPUSH
1235: CALL 27016 0 3
1239: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1240: LD_ADDR_EXP 18
1244: PUSH
1245: LD_STRING Harisson
1247: PPUSH
1248: LD_INT 0
1250: PPUSH
1251: LD_STRING 
1253: PPUSH
1254: CALL 27016 0 3
1258: ST_TO_ADDR
// uc_side := 1 ;
1259: LD_ADDR_OWVAR 20
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1267: LD_ADDR_EXP 16
1271: PUSH
1272: LD_STRING JMM
1274: PPUSH
1275: LD_EXP 1
1279: NOT
1280: PPUSH
1281: LD_EXP 3
1285: PPUSH
1286: CALL 27016 0 3
1290: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1291: LD_ADDR_EXP 17
1295: PUSH
1296: LD_STRING Gladstone
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: LD_EXP 3
1306: PPUSH
1307: CALL 27016 0 3
1311: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1312: LD_STRING BrownInDelta
1314: PPUSH
1315: LD_EXP 1
1319: PPUSH
1320: CALL_OW 30
1324: IFFALSE 1366
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1326: LD_ADDR_EXP 20
1330: PUSH
1331: LD_STRING Brown
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 3
1344: PPUSH
1345: CALL 27016 0 3
1349: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1350: LD_ADDR_VAR 0 5
1354: PUSH
1355: LD_VAR 0 5
1359: PUSH
1360: LD_EXP 20
1364: ADD
1365: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1366: LD_STRING DonaldsonInDelta
1368: PPUSH
1369: LD_EXP 1
1373: PPUSH
1374: CALL_OW 30
1378: IFFALSE 1420
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1380: LD_ADDR_EXP 21
1384: PUSH
1385: LD_STRING Donaldson
1387: PPUSH
1388: LD_EXP 1
1392: NOT
1393: PPUSH
1394: LD_EXP 3
1398: PPUSH
1399: CALL 27016 0 3
1403: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1404: LD_ADDR_VAR 0 5
1408: PUSH
1409: LD_VAR 0 5
1413: PUSH
1414: LD_EXP 21
1418: ADD
1419: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1420: LD_STRING LisaInDelta
1422: PPUSH
1423: LD_EXP 1
1427: PPUSH
1428: CALL_OW 30
1432: IFFALSE 1474
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1434: LD_ADDR_EXP 22
1438: PUSH
1439: LD_STRING Lisa
1441: PPUSH
1442: LD_EXP 1
1446: NOT
1447: PPUSH
1448: LD_EXP 3
1452: PPUSH
1453: CALL 27016 0 3
1457: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1458: LD_ADDR_VAR 0 5
1462: PUSH
1463: LD_VAR 0 5
1467: PUSH
1468: LD_EXP 22
1472: ADD
1473: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1474: LD_STRING FrankInDelta
1476: PPUSH
1477: LD_EXP 1
1481: PPUSH
1482: CALL_OW 30
1486: IFFALSE 1528
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1488: LD_ADDR_EXP 23
1492: PUSH
1493: LD_STRING Frank
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 3
1506: PPUSH
1507: CALL 27016 0 3
1511: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1512: LD_ADDR_VAR 0 5
1516: PUSH
1517: LD_VAR 0 5
1521: PUSH
1522: LD_EXP 23
1526: ADD
1527: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1528: LD_STRING BobbyInDelta
1530: PPUSH
1531: LD_INT 0
1533: PPUSH
1534: CALL_OW 30
1538: IFFALSE 1580
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1540: LD_ADDR_EXP 24
1544: PUSH
1545: LD_STRING Bobby
1547: PPUSH
1548: LD_EXP 1
1552: NOT
1553: PPUSH
1554: LD_EXP 3
1558: PPUSH
1559: CALL 27016 0 3
1563: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1564: LD_ADDR_VAR 0 5
1568: PUSH
1569: LD_VAR 0 5
1573: PUSH
1574: LD_EXP 24
1578: ADD
1579: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1580: LD_STRING CyrusInDelta
1582: PPUSH
1583: LD_INT 0
1585: PPUSH
1586: CALL_OW 30
1590: IFFALSE 1632
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1592: LD_ADDR_EXP 25
1596: PUSH
1597: LD_STRING Cyrus
1599: PPUSH
1600: LD_EXP 1
1604: NOT
1605: PPUSH
1606: LD_EXP 3
1610: PPUSH
1611: CALL 27016 0 3
1615: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1616: LD_ADDR_VAR 0 5
1620: PUSH
1621: LD_VAR 0 5
1625: PUSH
1626: LD_EXP 25
1630: ADD
1631: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1632: LD_ADDR_EXP 26
1636: PUSH
1637: LD_STRING othersDelta
1639: PPUSH
1640: CALL_OW 31
1644: ST_TO_ADDR
// if not others and debug then
1645: LD_EXP 26
1649: NOT
1650: PUSH
1651: LD_EXP 1
1655: AND
1656: IFFALSE 1721
// begin InitHc ;
1658: CALL_OW 19
// for i = 1 to 2 do
1662: LD_ADDR_VAR 0 2
1666: PUSH
1667: DOUBLE
1668: LD_INT 1
1670: DEC
1671: ST_TO_ADDR
1672: LD_INT 2
1674: PUSH
1675: FOR_TO
1676: IFFALSE 1719
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1678: LD_INT 0
1680: PPUSH
1681: LD_VAR 0 2
1685: PUSH
1686: LD_INT 4
1688: MOD
1689: PUSH
1690: LD_INT 1
1692: PLUS
1693: PPUSH
1694: LD_INT 3
1696: PPUSH
1697: CALL_OW 380
// others := others ^ CreateHuman ;
1701: LD_ADDR_EXP 26
1705: PUSH
1706: LD_EXP 26
1710: PUSH
1711: CALL_OW 44
1715: ADD
1716: ST_TO_ADDR
// end ;
1717: GO 1675
1719: POP
1720: POP
// end ; if others then
1721: LD_EXP 26
1725: IFFALSE 1743
// tmp := tmp ^ others ;
1727: LD_ADDR_VAR 0 5
1731: PUSH
1732: LD_VAR 0 5
1736: PUSH
1737: LD_EXP 26
1741: ADD
1742: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1743: LD_ADDR_VAR 0 3
1747: PUSH
1748: LD_INT 28
1750: PUSH
1751: LD_INT 49
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 33
1760: PUSH
1761: LD_INT 54
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 38
1770: PUSH
1771: LD_INT 56
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: LIST
1782: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_INT 1
1790: PPUSH
1791: LD_INT 1
1793: PPUSH
1794: LD_INT 2
1796: PPUSH
1797: LD_INT 2
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: LD_INT 12
1805: PPUSH
1806: LD_INT 80
1808: PPUSH
1809: CALL 431 0 7
1813: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1814: LD_VAR 0 4
1818: PPUSH
1819: LD_INT 1
1821: PPUSH
1822: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
1826: LD_VAR 0 4
1830: PPUSH
1831: LD_VAR 0 3
1835: PUSH
1836: LD_INT 1
1838: ARRAY
1839: PUSH
1840: LD_INT 1
1842: ARRAY
1843: PPUSH
1844: LD_VAR 0 3
1848: PUSH
1849: LD_INT 1
1851: ARRAY
1852: PUSH
1853: LD_INT 2
1855: ARRAY
1856: PPUSH
1857: LD_INT 0
1859: PPUSH
1860: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
1864: LD_VAR 0 4
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 100
1874: PPUSH
1875: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
1879: LD_EXP 26
1883: PUSH
1884: LD_INT 1
1886: ARRAY
1887: PPUSH
1888: LD_VAR 0 4
1892: PPUSH
1893: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
1897: LD_ADDR_VAR 0 4
1901: PUSH
1902: LD_INT 1
1904: PPUSH
1905: LD_INT 1
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: LD_INT 2
1913: PPUSH
1914: LD_INT 1
1916: PPUSH
1917: LD_INT 2
1919: PPUSH
1920: LD_INT 80
1922: PPUSH
1923: CALL 431 0 7
1927: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1928: LD_VAR 0 4
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
1940: LD_VAR 0 4
1944: PPUSH
1945: LD_VAR 0 3
1949: PUSH
1950: LD_INT 2
1952: ARRAY
1953: PUSH
1954: LD_INT 1
1956: ARRAY
1957: PPUSH
1958: LD_VAR 0 3
1962: PUSH
1963: LD_INT 2
1965: ARRAY
1966: PUSH
1967: LD_INT 2
1969: ARRAY
1970: PPUSH
1971: LD_INT 0
1973: PPUSH
1974: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
1978: LD_EXP 17
1982: PPUSH
1983: LD_VAR 0 4
1987: PPUSH
1988: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
1992: LD_ADDR_VAR 0 4
1996: PUSH
1997: LD_INT 1
1999: PPUSH
2000: LD_INT 1
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: LD_INT 2
2008: PPUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: LD_INT 80
2017: PPUSH
2018: CALL 431 0 7
2022: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2023: LD_VAR 0 4
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2035: LD_VAR 0 4
2039: PPUSH
2040: LD_VAR 0 3
2044: PUSH
2045: LD_INT 3
2047: ARRAY
2048: PUSH
2049: LD_INT 1
2051: ARRAY
2052: PPUSH
2053: LD_VAR 0 3
2057: PUSH
2058: LD_INT 3
2060: ARRAY
2061: PUSH
2062: LD_INT 2
2064: ARRAY
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2073: LD_EXP 16
2077: PPUSH
2078: LD_VAR 0 4
2082: PPUSH
2083: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2087: LD_ADDR_VAR 0 2
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_EXP 26
2101: PUSH
2102: LD_INT 1
2104: ARRAY
2105: DIFF
2106: PUSH
2107: FOR_IN
2108: IFFALSE 2127
// PlaceUnitArea ( i , startArea , false ) ;
2110: LD_VAR 0 2
2114: PPUSH
2115: LD_INT 5
2117: PPUSH
2118: LD_INT 0
2120: PPUSH
2121: CALL_OW 49
2125: GO 2107
2127: POP
2128: POP
// end ; end_of_file
2129: LD_VAR 0 1
2133: RET
// export function Action ; var m ; begin
2134: LD_INT 0
2136: PPUSH
2137: PPUSH
// InGameOn ;
2138: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2142: LD_INT 28
2144: PPUSH
2145: LD_INT 51
2147: PPUSH
2148: CALL_OW 86
// Wait ( 3 ) ;
2152: LD_INT 3
2154: PPUSH
2155: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2159: LD_EXP 16
2163: PPUSH
2164: LD_STRING D1d-JMM-1a
2166: PPUSH
2167: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2171: LD_EXP 18
2175: PPUSH
2176: LD_STRING D1d-Har-1
2178: PPUSH
2179: CALL_OW 94
// InGameOff ;
2183: CALL_OW 9
// SaveForQuickRestart ;
2187: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2191: LD_STRING M1
2193: PPUSH
2194: CALL_OW 337
// Wait ( 0 0$2 ) ;
2198: LD_INT 70
2200: PPUSH
2201: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2205: LD_EXP 16
2209: PPUSH
2210: LD_STRING D2-JMM-1
2212: PPUSH
2213: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2217: LD_EXP 17
2221: PPUSH
2222: LD_STRING D2-Glad-1
2224: PPUSH
2225: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2229: LD_EXP 16
2233: PPUSH
2234: LD_STRING D2-JMM-2
2236: PPUSH
2237: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2241: LD_EXP 17
2245: PPUSH
2246: LD_STRING D2-Glad-2
2248: PPUSH
2249: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2253: LD_EXP 16
2257: PPUSH
2258: LD_STRING D2-JMM-3
2260: PPUSH
2261: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2265: LD_INT 1050
2267: PPUSH
2268: LD_INT 2100
2270: PPUSH
2271: CALL_OW 12
2275: PPUSH
2276: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2280: LD_INT 1
2282: PPUSH
2283: LD_INT 570
2285: PPUSH
2286: LD_INT 350
2288: PPUSH
2289: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2293: LD_INT 6300
2295: PPUSH
2296: LD_INT 10500
2298: PPUSH
2299: CALL_OW 12
2303: PPUSH
2304: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2308: LD_INT 0
2310: PPUSH
2311: LD_INT 570
2313: PPUSH
2314: LD_INT 350
2316: PPUSH
2317: CALL_OW 550
// end ;
2321: LD_VAR 0 1
2325: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2326: LD_INT 22
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PUSH
2336: LD_INT 3
2338: PUSH
2339: LD_INT 57
2341: PUSH
2342: EMPTY
2343: LIST
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 30
2351: PUSH
2352: LD_INT 0
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: PUSH
2364: EMPTY
2365: LIST
2366: PPUSH
2367: CALL_OW 69
2371: PUSH
2372: LD_EXP 4
2376: NOT
2377: AND
2378: IFFALSE 2391
2380: GO 2382
2382: DISABLE
// begin deltaBuilded := true ;
2383: LD_ADDR_EXP 4
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// end ;
2391: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2392: LD_EXP 6
2396: NOT
2397: PUSH
2398: LD_EXP 4
2402: AND
2403: PUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 1
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 3
2416: PUSH
2417: LD_INT 57
2419: PUSH
2420: EMPTY
2421: LIST
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 30
2429: PUSH
2430: LD_INT 0
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: LIST
2441: PUSH
2442: EMPTY
2443: LIST
2444: PPUSH
2445: CALL_OW 69
2449: AND
2450: IFFALSE 2536
2452: GO 2454
2454: DISABLE
// begin enable ;
2455: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2456: LD_INT 0
2458: PPUSH
2459: LD_INT 1
2461: PPUSH
2462: LD_INT 0
2464: PPUSH
2465: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2469: LD_ADDR_EXP 6
2473: PUSH
2474: LD_INT 22
2476: PUSH
2477: LD_INT 1
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: LD_INT 3
2486: PUSH
2487: LD_INT 57
2489: PUSH
2490: EMPTY
2491: LIST
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PUSH
2497: LD_INT 30
2499: PUSH
2500: LD_INT 0
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: LIST
2511: PUSH
2512: EMPTY
2513: LIST
2514: PPUSH
2515: CALL_OW 69
2519: PUSH
2520: LD_INT 1
2522: ARRAY
2523: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2524: LD_EXP 6
2528: PPUSH
2529: LD_STRING Delta
2531: PPUSH
2532: CALL_OW 500
// end ;
2536: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2537: LD_INT 1
2539: PPUSH
2540: LD_INT 1
2542: PPUSH
2543: CALL_OW 321
2547: PUSH
2548: LD_INT 2
2550: EQUAL
2551: PUSH
2552: LD_EXP 17
2556: PPUSH
2557: CALL_OW 302
2561: AND
2562: IFFALSE 2623
2564: GO 2566
2566: DISABLE
// begin DialogueOn ;
2567: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2571: LD_EXP 17
2575: PPUSH
2576: LD_STRING D3-Glad-1
2578: PPUSH
2579: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2583: LD_EXP 16
2587: PPUSH
2588: LD_STRING D3-JMM-1
2590: PPUSH
2591: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2595: LD_EXP 17
2599: PPUSH
2600: LD_STRING D3-Glad-2
2602: PPUSH
2603: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2607: LD_EXP 16
2611: PPUSH
2612: LD_STRING D3-JMM-2
2614: PPUSH
2615: CALL_OW 88
// DialogueOff ;
2619: CALL_OW 7
// end ;
2623: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched do var sol ;
2624: LD_INT 2
2626: PPUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 321
2634: PUSH
2635: LD_INT 2
2637: EQUAL
2638: IFFALSE 2815
2640: GO 2642
2642: DISABLE
2643: LD_INT 0
2645: PPUSH
// begin DialogueOn ;
2646: CALL_OW 6
// if Frank then
2650: LD_EXP 23
2654: IFFALSE 2668
// Say ( Frank , D8a-Frank-1 ) ;
2656: LD_EXP 23
2660: PPUSH
2661: LD_STRING D8a-Frank-1
2663: PPUSH
2664: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2668: LD_ADDR_VAR 0 1
2672: PUSH
2673: LD_EXP 26
2677: PPUSH
2678: LD_INT 26
2680: PUSH
2681: LD_INT 1
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 72
2692: PPUSH
2693: LD_STRING D8a-Sol1-1
2695: PPUSH
2696: CALL 519 0 2
2700: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2701: LD_EXP 19
2705: PUSH
2706: LD_EXP 19
2710: PPUSH
2711: CALL_OW 255
2715: PUSH
2716: LD_INT 1
2718: EQUAL
2719: AND
2720: IFFALSE 2734
// Say ( Denis , D8a-Den-1 ) ;
2722: LD_EXP 19
2726: PPUSH
2727: LD_STRING D8a-Den-1
2729: PPUSH
2730: CALL_OW 88
// if sol or Denis or Frank then
2734: LD_VAR 0 1
2738: PUSH
2739: LD_EXP 19
2743: OR
2744: PUSH
2745: LD_EXP 23
2749: OR
2750: IFFALSE 2811
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
2752: LD_EXP 26
2756: PPUSH
2757: LD_INT 25
2759: PUSH
2760: LD_INT 4
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 26
2769: PUSH
2770: LD_INT 1
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 72
2785: PUSH
2786: LD_VAR 0 1
2790: DIFF
2791: PPUSH
2792: LD_STRING D8a-Sci1-1
2794: PPUSH
2795: CALL 519 0 2
// Say ( JMM , D8a-JMM-1 ) ;
2799: LD_EXP 16
2803: PPUSH
2804: LD_STRING D8a-JMM-1
2806: PPUSH
2807: CALL_OW 88
// end ; DialogueOff ;
2811: CALL_OW 7
// end ;
2815: PPOPN 1
2817: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
2818: LD_INT 22
2820: PUSH
2821: LD_INT 1
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PUSH
2828: LD_INT 25
2830: PUSH
2831: LD_INT 16
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PPUSH
2842: CALL_OW 69
2846: IFFALSE 2905
2848: GO 2850
2850: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
2851: LD_STRING M1a
2853: PPUSH
2854: CALL_OW 337
// case Query ( Q2 ) of 1 :
2858: LD_STRING Q2
2860: PPUSH
2861: CALL_OW 97
2865: PUSH
2866: LD_INT 1
2868: DOUBLE
2869: EQUAL
2870: IFTRUE 2874
2872: GO 2885
2874: POP
// end_mission := true ; 2 :
2875: LD_ADDR_EXP 14
2879: PUSH
2880: LD_INT 1
2882: ST_TO_ADDR
2883: GO 2905
2885: LD_INT 2
2887: DOUBLE
2888: EQUAL
2889: IFTRUE 2893
2891: GO 2904
2893: POP
// end_the_mission_allowed := true ; end ;
2894: LD_ADDR_OWVAR 57
2898: PUSH
2899: LD_INT 1
2901: ST_TO_ADDR
2902: GO 2905
2904: POP
// end ;
2905: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
2906: LD_INT 22
2908: PUSH
2909: LD_INT 1
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: LD_INT 30
2921: PUSH
2922: LD_INT 6
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PUSH
2929: LD_INT 30
2931: PUSH
2932: LD_INT 7
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: LIST
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PPUSH
2948: CALL_OW 69
2952: PUSH
2953: LD_INT 22
2955: PUSH
2956: LD_INT 1
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 2
2965: PUSH
2966: LD_INT 30
2968: PUSH
2969: LD_INT 2
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: LD_INT 30
2978: PUSH
2979: LD_INT 3
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: LIST
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: PPUSH
2995: CALL_OW 69
2999: AND
3000: PUSH
3001: LD_EXP 6
3005: AND
3006: IFFALSE 3521
3008: GO 3010
3010: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3011: LD_INT 1050
3013: PPUSH
3014: LD_INT 1750
3016: PPUSH
3017: CALL_OW 12
3021: PPUSH
3022: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3026: LD_EXP 19
3030: PPUSH
3031: LD_INT 6
3033: PUSH
3034: LD_INT 9
3036: PUSH
3037: LD_INT 10
3039: PUSH
3040: LD_INT 16
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: PUSH
3049: LD_OWVAR 67
3053: ARRAY
3054: PPUSH
3055: LD_INT 0
3057: PPUSH
3058: CALL_OW 49
// ComHold ( Denis ) ;
3062: LD_EXP 19
3066: PPUSH
3067: CALL_OW 140
// InGameOn ;
3071: CALL_OW 8
// DialogueOn ;
3075: CALL_OW 6
// if Delta then
3079: LD_EXP 6
3083: IFFALSE 3096
// CenterNowOnUnits ( Delta ) else
3085: LD_EXP 6
3089: PPUSH
3090: CALL_OW 87
3094: GO 3105
// CenterNowOnUnits ( JMM ) ;
3096: LD_EXP 16
3100: PPUSH
3101: CALL_OW 87
// SayRadio ( Denis , DD-Den-1 ) ;
3105: LD_EXP 19
3109: PPUSH
3110: LD_STRING DD-Den-1
3112: PPUSH
3113: CALL_OW 94
// Say ( JMM , DD-JMM-1 ) ;
3117: LD_EXP 16
3121: PPUSH
3122: LD_STRING DD-JMM-1
3124: PPUSH
3125: CALL_OW 88
// SayRadio ( Denis , DD-Den-2 ) ;
3129: LD_EXP 19
3133: PPUSH
3134: LD_STRING DD-Den-2
3136: PPUSH
3137: CALL_OW 94
// Wait ( 3 ) ;
3141: LD_INT 3
3143: PPUSH
3144: CALL_OW 67
// DialogueOff ;
3148: CALL_OW 7
// InGameOff ;
3152: CALL_OW 9
// if Difficulty = 1 then
3156: LD_OWVAR 67
3160: PUSH
3161: LD_INT 1
3163: EQUAL
3164: IFFALSE 3240
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3166: LD_EXP 19
3170: PPUSH
3171: CALL_OW 250
3175: PPUSH
3176: LD_EXP 19
3180: PPUSH
3181: CALL_OW 251
3185: PPUSH
3186: LD_INT 1
3188: PPUSH
3189: LD_INT 12
3191: NEG
3192: PPUSH
3193: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3197: LD_EXP 19
3201: PPUSH
3202: CALL_OW 87
// wait ( 0 0$5 ) ;
3206: LD_INT 175
3208: PPUSH
3209: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3213: LD_EXP 19
3217: PPUSH
3218: CALL_OW 250
3222: PPUSH
3223: LD_EXP 19
3227: PPUSH
3228: CALL_OW 251
3232: PPUSH
3233: LD_INT 1
3235: PPUSH
3236: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3247: LD_INT 1
3249: PPUSH
3250: LD_EXP 19
3254: PPUSH
3255: CALL_OW 292
3259: PUSH
3260: LD_EXP 19
3264: PPUSH
3265: CALL_OW 301
3269: OR
3270: IFFALSE 3240
// if IsDead ( Denis ) then
3272: LD_EXP 19
3276: PPUSH
3277: CALL_OW 301
3281: IFFALSE 3285
// exit ;
3283: GO 3521
// SetSide ( Denis , 1 ) ;
3285: LD_EXP 19
3289: PPUSH
3290: LD_INT 1
3292: PPUSH
3293: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3297: LD_EXP 19
3301: PPUSH
3302: LD_STRING DD-Den-2a
3304: PPUSH
3305: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3309: LD_INT 35
3311: PPUSH
3312: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3316: LD_EXP 19
3320: PPUSH
3321: CALL_OW 310
3325: PPUSH
3326: CALL_OW 266
3330: PUSH
3331: LD_INT 6
3333: PUSH
3334: LD_INT 7
3336: PUSH
3337: LD_INT 8
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: LIST
3344: IN
3345: PUSH
3346: LD_EXP 19
3350: PPUSH
3351: CALL_OW 301
3355: OR
3356: IFFALSE 3309
// if IsDead ( Denis ) then
3358: LD_EXP 19
3362: PPUSH
3363: CALL_OW 301
3367: IFFALSE 3371
// exit ;
3369: GO 3521
// Say ( Denis , DD-Den-2b ) ;
3371: LD_EXP 19
3375: PPUSH
3376: LD_STRING DD-Den-2b
3378: PPUSH
3379: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
3383: LD_EXP 19
3387: PPUSH
3388: LD_INT 4
3390: PPUSH
3391: CALL_OW 123
// Wait ( 0 0$02 ) ;
3395: LD_INT 70
3397: PPUSH
3398: CALL_OW 67
// DialogueOn ;
3402: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
3406: LD_EXP 19
3410: PPUSH
3411: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
3415: LD_EXP 16
3419: PPUSH
3420: LD_STRING D4-JMM-1
3422: PPUSH
3423: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
3427: LD_EXP 19
3431: PPUSH
3432: LD_STRING D4-Den-1
3434: PPUSH
3435: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
3439: LD_EXP 16
3443: PPUSH
3444: LD_STRING D4-JMM-2
3446: PPUSH
3447: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
3451: LD_EXP 19
3455: PPUSH
3456: LD_STRING D4-Den-2
3458: PPUSH
3459: CALL_OW 88
// DialogueOff ;
3463: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3467: LD_STRING M2
3469: PPUSH
3470: CALL_OW 337
// radar_allowed := true ;
3474: LD_ADDR_EXP 7
3478: PUSH
3479: LD_INT 1
3481: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
3482: LD_INT 6
3484: PPUSH
3485: LD_INT 1
3487: PPUSH
3488: LD_INT 1
3490: PPUSH
3491: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
3495: LD_INT 15
3497: PPUSH
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
3508: LD_INT 20
3510: PPUSH
3511: LD_INT 1
3513: PPUSH
3514: LD_INT 1
3516: PPUSH
3517: CALL_OW 324
// end ;
3521: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
3522: LD_EXP 13
3526: IFFALSE 4149
3528: GO 3530
3530: DISABLE
3531: LD_INT 0
3533: PPUSH
3534: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
3535: LD_ADDR_VAR 0 1
3539: PUSH
3540: LD_EXP 26
3544: PPUSH
3545: LD_INT 26
3547: PUSH
3548: LD_INT 1
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PPUSH
3555: CALL_OW 72
3559: PPUSH
3560: LD_STRING D5-Sol1-1
3562: PPUSH
3563: CALL 519 0 2
3567: ST_TO_ADDR
// if not sol then
3568: LD_VAR 0 1
3572: NOT
3573: IFFALSE 3577
// exit ;
3575: GO 4149
// repeat wait ( 0 0$01 ) ;
3577: LD_INT 35
3579: PPUSH
3580: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
3584: LD_INT 22
3586: PUSH
3587: LD_INT 2
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: PUSH
3594: LD_INT 21
3596: PUSH
3597: LD_INT 1
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PPUSH
3608: CALL_OW 69
3612: PUSH
3613: LD_INT 0
3615: EQUAL
3616: IFFALSE 3577
// if IsOk ( sol ) then
3618: LD_VAR 0 1
3622: PPUSH
3623: CALL_OW 302
3627: IFFALSE 3647
// begin sol2 := others diff sol ;
3629: LD_ADDR_VAR 0 2
3633: PUSH
3634: LD_EXP 26
3638: PUSH
3639: LD_VAR 0 1
3643: DIFF
3644: ST_TO_ADDR
// end else
3645: GO 3649
// exit ;
3647: GO 4149
// if not Lisa and not sol2 then
3649: LD_EXP 22
3653: NOT
3654: PUSH
3655: LD_VAR 0 2
3659: NOT
3660: AND
3661: IFFALSE 3665
// exit ;
3663: GO 4149
// DialogueOn ;
3665: CALL_OW 6
// if Lisa then
3669: LD_EXP 22
3673: IFFALSE 3689
// Say ( Lisa , D5a-Lisa-1 ) else
3675: LD_EXP 22
3679: PPUSH
3680: LD_STRING D5a-Lisa-1
3682: PPUSH
3683: CALL_OW 88
3687: GO 3764
// if sol2 then
3689: LD_VAR 0 2
3693: IFFALSE 3764
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3695: LD_VAR 0 2
3699: PUSH
3700: LD_INT 1
3702: ARRAY
3703: PPUSH
3704: CALL_OW 258
3708: PUSH
3709: LD_INT 1
3711: DOUBLE
3712: EQUAL
3713: IFTRUE 3717
3715: GO 3736
3717: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
3718: LD_VAR 0 2
3722: PUSH
3723: LD_INT 1
3725: ARRAY
3726: PPUSH
3727: LD_STRING D5-Sol2-1
3729: PPUSH
3730: CALL_OW 88
3734: GO 3764
3736: LD_INT 2
3738: DOUBLE
3739: EQUAL
3740: IFTRUE 3744
3742: GO 3763
3744: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
3745: LD_VAR 0 2
3749: PUSH
3750: LD_INT 1
3752: ARRAY
3753: PPUSH
3754: LD_STRING D5-FSol2-1
3756: PPUSH
3757: CALL_OW 88
3761: GO 3764
3763: POP
// Say ( sol , D5-Sol1-2 ) ;
3764: LD_VAR 0 1
3768: PPUSH
3769: LD_STRING D5-Sol1-2
3771: PPUSH
3772: CALL_OW 88
// if Lisa then
3776: LD_EXP 22
3780: IFFALSE 3796
// Say ( Lisa , D5a-Lisa-2 ) else
3782: LD_EXP 22
3786: PPUSH
3787: LD_STRING D5a-Lisa-2
3789: PPUSH
3790: CALL_OW 88
3794: GO 3871
// if sol2 then
3796: LD_VAR 0 2
3800: IFFALSE 3871
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3802: LD_VAR 0 2
3806: PUSH
3807: LD_INT 1
3809: ARRAY
3810: PPUSH
3811: CALL_OW 258
3815: PUSH
3816: LD_INT 1
3818: DOUBLE
3819: EQUAL
3820: IFTRUE 3824
3822: GO 3843
3824: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
3825: LD_VAR 0 2
3829: PUSH
3830: LD_INT 1
3832: ARRAY
3833: PPUSH
3834: LD_STRING D5-Sol2-2
3836: PPUSH
3837: CALL_OW 88
3841: GO 3871
3843: LD_INT 2
3845: DOUBLE
3846: EQUAL
3847: IFTRUE 3851
3849: GO 3870
3851: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
3852: LD_VAR 0 2
3856: PUSH
3857: LD_INT 1
3859: ARRAY
3860: PPUSH
3861: LD_STRING D5-FSol2-2
3863: PPUSH
3864: CALL_OW 88
3868: GO 3871
3870: POP
// Say ( sol , D5a-Sol1-3 ) ;
3871: LD_VAR 0 1
3875: PPUSH
3876: LD_STRING D5a-Sol1-3
3878: PPUSH
3879: CALL_OW 88
// if Lisa then
3883: LD_EXP 22
3887: IFFALSE 3901
// Say ( Lisa , D5a-Lisa-3 ) ;
3889: LD_EXP 22
3893: PPUSH
3894: LD_STRING D5a-Lisa-3
3896: PPUSH
3897: CALL_OW 88
// if not sol2 then
3901: LD_VAR 0 2
3905: NOT
3906: IFFALSE 3914
// begin DialogueOff ;
3908: CALL_OW 7
// exit ;
3912: GO 4149
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
3914: LD_VAR 0 2
3918: PUSH
3919: LD_INT 1
3921: ARRAY
3922: PPUSH
3923: CALL_OW 258
3927: PUSH
3928: LD_INT 1
3930: DOUBLE
3931: EQUAL
3932: IFTRUE 3936
3934: GO 3955
3936: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
3937: LD_VAR 0 2
3941: PUSH
3942: LD_INT 1
3944: ARRAY
3945: PPUSH
3946: LD_STRING D5-Sol2-3
3948: PPUSH
3949: CALL_OW 88
3953: GO 3983
3955: LD_INT 2
3957: DOUBLE
3958: EQUAL
3959: IFTRUE 3963
3961: GO 3982
3963: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
3964: LD_VAR 0 2
3968: PUSH
3969: LD_INT 1
3971: ARRAY
3972: PPUSH
3973: LD_STRING D5-FSol2-3
3975: PPUSH
3976: CALL_OW 88
3980: GO 3983
3982: POP
// Say ( sol , D5-Sol1-4 ) ;
3983: LD_VAR 0 1
3987: PPUSH
3988: LD_STRING D5-Sol1-4
3990: PPUSH
3991: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3995: LD_VAR 0 2
3999: PUSH
4000: LD_INT 1
4002: ARRAY
4003: PPUSH
4004: CALL_OW 258
4008: PUSH
4009: LD_INT 1
4011: DOUBLE
4012: EQUAL
4013: IFTRUE 4017
4015: GO 4036
4017: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4018: LD_VAR 0 2
4022: PUSH
4023: LD_INT 1
4025: ARRAY
4026: PPUSH
4027: LD_STRING D5-Sol2-4
4029: PPUSH
4030: CALL_OW 88
4034: GO 4064
4036: LD_INT 2
4038: DOUBLE
4039: EQUAL
4040: IFTRUE 4044
4042: GO 4063
4044: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4045: LD_VAR 0 2
4049: PUSH
4050: LD_INT 1
4052: ARRAY
4053: PPUSH
4054: LD_STRING D5-FSol2-4
4056: PPUSH
4057: CALL_OW 88
4061: GO 4064
4063: POP
// Say ( sol , D5-Sol1-5 ) ;
4064: LD_VAR 0 1
4068: PPUSH
4069: LD_STRING D5-Sol1-5
4071: PPUSH
4072: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4076: LD_VAR 0 2
4080: PUSH
4081: LD_INT 1
4083: ARRAY
4084: PPUSH
4085: CALL_OW 258
4089: PUSH
4090: LD_INT 1
4092: DOUBLE
4093: EQUAL
4094: IFTRUE 4098
4096: GO 4117
4098: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4099: LD_VAR 0 2
4103: PUSH
4104: LD_INT 1
4106: ARRAY
4107: PPUSH
4108: LD_STRING D5-Sol2-5
4110: PPUSH
4111: CALL_OW 88
4115: GO 4145
4117: LD_INT 2
4119: DOUBLE
4120: EQUAL
4121: IFTRUE 4125
4123: GO 4144
4125: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4126: LD_VAR 0 2
4130: PUSH
4131: LD_INT 1
4133: ARRAY
4134: PPUSH
4135: LD_STRING D5-FSol2-5
4137: PPUSH
4138: CALL_OW 88
4142: GO 4145
4144: POP
// DialogueOff ;
4145: CALL_OW 7
// end ;
4149: PPOPN 2
4151: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4152: LD_INT 22
4154: PUSH
4155: LD_INT 1
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 25
4164: PUSH
4165: LD_INT 16
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PPUSH
4176: CALL_OW 69
4180: PUSH
4181: LD_INT 5
4183: GREATEREQUAL
4184: IFFALSE 4204
4186: GO 4188
4188: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4189: LD_STRING M1b
4191: PPUSH
4192: CALL_OW 337
// apeman_army := true ;
4196: LD_ADDR_EXP 9
4200: PUSH
4201: LD_INT 1
4203: ST_TO_ADDR
// end ;
4204: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4205: LD_INT 22
4207: PUSH
4208: LD_INT 1
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PUSH
4215: LD_INT 30
4217: PUSH
4218: LD_INT 3
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: PUSH
4225: LD_INT 57
4227: PUSH
4228: EMPTY
4229: LIST
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: LIST
4235: PPUSH
4236: CALL_OW 69
4240: IFFALSE 4252
4242: GO 4244
4244: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4245: LD_STRING M1c
4247: PPUSH
4248: CALL_OW 337
4252: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4253: LD_INT 6
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: CALL_OW 321
4263: PUSH
4264: LD_INT 2
4266: EQUAL
4267: IFFALSE 4287
4269: GO 4271
4271: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4272: LD_STRING M2a
4274: PPUSH
4275: CALL_OW 337
// radar_researched := true ;
4279: LD_ADDR_EXP 10
4283: PUSH
4284: LD_INT 1
4286: ST_TO_ADDR
// end ;
4287: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4288: LD_INT 22
4290: PUSH
4291: LD_INT 1
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 2
4300: PUSH
4301: LD_INT 34
4303: PUSH
4304: LD_INT 11
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 35
4313: PUSH
4314: LD_INT 11
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: LIST
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 69
4334: IFFALSE 4354
4336: GO 4338
4338: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4339: LD_STRING M2b
4341: PPUSH
4342: CALL_OW 337
// radar_builded := true ;
4346: LD_ADDR_EXP 11
4350: PUSH
4351: LD_INT 1
4353: ST_TO_ADDR
// end ;
4354: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4355: LD_INT 22
4357: PUSH
4358: LD_INT 0
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: LD_INT 25
4367: PUSH
4368: LD_INT 12
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PUSH
4375: EMPTY
4376: LIST
4377: LIST
4378: PPUSH
4379: CALL_OW 69
4383: PUSH
4384: LD_INT 0
4386: EQUAL
4387: PUSH
4388: LD_EXP 8
4392: NOT
4393: AND
4394: IFFALSE 4406
4396: GO 4398
4398: DISABLE
// YouLost ( Apeman ) ;
4399: LD_STRING Apeman
4401: PPUSH
4402: CALL_OW 104
4406: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
4407: LD_INT 22
4409: PUSH
4410: LD_INT 1
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: LD_INT 25
4419: PUSH
4420: LD_INT 16
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PUSH
4436: LD_INT 7
4438: GREATEREQUAL
4439: IFFALSE 4537
4441: GO 4443
4443: DISABLE
4444: LD_INT 0
4446: PPUSH
4447: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
4448: LD_ADDR_VAR 0 2
4452: PUSH
4453: LD_INT 22
4455: PUSH
4456: LD_INT 1
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 21
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 4
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 69
4492: PUSH
4493: LD_EXP 16
4497: ADD
4498: ST_TO_ADDR
// if filter then
4499: LD_VAR 0 2
4503: IFFALSE 4537
// for i in filter do
4505: LD_ADDR_VAR 0 1
4509: PUSH
4510: LD_VAR 0 2
4514: PUSH
4515: FOR_IN
4516: IFFALSE 4535
// AddExperience ( i , 4 , 3500 ) ;
4518: LD_VAR 0 1
4522: PPUSH
4523: LD_INT 4
4525: PPUSH
4526: LD_INT 3500
4528: PPUSH
4529: CALL_OW 492
4533: GO 4515
4535: POP
4536: POP
// end ;
4537: PPOPN 2
4539: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
4540: LD_EXP 14
4544: IFFALSE 5678
4546: GO 4548
4548: DISABLE
4549: LD_INT 0
4551: PPUSH
4552: PPUSH
4553: PPUSH
4554: PPUSH
4555: PPUSH
// begin if apeKillCounter = 0 then
4556: LD_EXP 15
4560: PUSH
4561: LD_INT 0
4563: EQUAL
4564: IFFALSE 4573
// SetAchievement ( ACH_APEKILLER ) ;
4566: LD_STRING ACH_APEKILLER
4568: PPUSH
4569: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
4573: LD_INT 22
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 69
4587: IFFALSE 4625
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
4589: LD_ADDR_VAR 0 1
4593: PUSH
4594: LD_INT 22
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: CALL_OW 69
4608: PUSH
4609: FOR_IN
4610: IFFALSE 4623
// RemoveUnit ( i ) ;
4612: LD_VAR 0 1
4616: PPUSH
4617: CALL_OW 64
4621: GO 4609
4623: POP
4624: POP
// m1 := false ;
4625: LD_ADDR_VAR 0 3
4629: PUSH
4630: LD_INT 0
4632: ST_TO_ADDR
// m2 := false ;
4633: LD_ADDR_VAR 0 4
4637: PUSH
4638: LD_INT 0
4640: ST_TO_ADDR
// m3 := false ;
4641: LD_ADDR_VAR 0 5
4645: PUSH
4646: LD_INT 0
4648: ST_TO_ADDR
// if apeman_army then
4649: LD_EXP 9
4653: IFFALSE 4675
// begin AddMedal ( Tame , 1 ) ;
4655: LD_STRING Tame
4657: PPUSH
4658: LD_INT 1
4660: PPUSH
4661: CALL_OW 101
// m1 := true ;
4665: LD_ADDR_VAR 0 3
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// end else
4673: GO 4686
// AddMedal ( Tame , - 1 ) ;
4675: LD_STRING Tame
4677: PPUSH
4678: LD_INT 1
4680: NEG
4681: PPUSH
4682: CALL_OW 101
// if radar_researched then
4686: LD_EXP 10
4690: IFFALSE 4722
// begin SaveVariable ( true , radarResInDelta ) ;
4692: LD_INT 1
4694: PPUSH
4695: LD_STRING radarResInDelta
4697: PPUSH
4698: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
4702: LD_STRING Radar
4704: PPUSH
4705: LD_INT 1
4707: PPUSH
4708: CALL_OW 101
// m2 := true ;
4712: LD_ADDR_VAR 0 4
4716: PUSH
4717: LD_INT 1
4719: ST_TO_ADDR
// end else
4720: GO 4752
// if radar_allowed then
4722: LD_EXP 7
4726: IFFALSE 4741
// AddMedal ( Radar , - 2 ) else
4728: LD_STRING Radar
4730: PPUSH
4731: LD_INT 2
4733: NEG
4734: PPUSH
4735: CALL_OW 101
4739: GO 4752
// AddMedal ( Radar , - 1 ) ;
4741: LD_STRING Radar
4743: PPUSH
4744: LD_INT 1
4746: NEG
4747: PPUSH
4748: CALL_OW 101
// if radar_builded then
4752: LD_EXP 11
4756: IFFALSE 4778
// begin AddMedal ( BuildRadar , 1 ) ;
4758: LD_STRING BuildRadar
4760: PPUSH
4761: LD_INT 1
4763: PPUSH
4764: CALL_OW 101
// m3 := true ;
4768: LD_ADDR_VAR 0 5
4772: PUSH
4773: LD_INT 1
4775: ST_TO_ADDR
// end else
4776: GO 4789
// AddMedal ( BuildRadar , - 1 ) ;
4778: LD_STRING BuildRadar
4780: PPUSH
4781: LD_INT 1
4783: NEG
4784: PPUSH
4785: CALL_OW 101
// if tick <= 7 7$00 then
4789: LD_OWVAR 1
4793: PUSH
4794: LD_INT 14700
4796: LESSEQUAL
4797: IFFALSE 4806
// SetAchievement ( ACH_ASPEED_5 ) ;
4799: LD_STRING ACH_ASPEED_5
4801: PPUSH
4802: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
4806: LD_VAR 0 3
4810: PUSH
4811: LD_VAR 0 4
4815: AND
4816: PUSH
4817: LD_VAR 0 5
4821: AND
4822: PUSH
4823: LD_OWVAR 67
4827: PUSH
4828: LD_INT 3
4830: GREATEREQUAL
4831: AND
4832: IFFALSE 4844
// SetAchievementEX ( ACH_AMER , 5 ) ;
4834: LD_STRING ACH_AMER
4836: PPUSH
4837: LD_INT 5
4839: PPUSH
4840: CALL_OW 564
// GiveMedals ( MAIN ) ;
4844: LD_STRING MAIN
4846: PPUSH
4847: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
4851: LD_ADDR_VAR 0 2
4855: PUSH
4856: LD_INT 22
4858: PUSH
4859: LD_INT 1
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: LD_INT 21
4868: PUSH
4869: LD_INT 1
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: LD_INT 2
4878: PUSH
4879: LD_INT 25
4881: PUSH
4882: LD_INT 1
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: LD_INT 25
4891: PUSH
4892: LD_INT 2
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: LD_INT 25
4901: PUSH
4902: LD_INT 3
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 25
4911: PUSH
4912: LD_INT 4
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: LIST
4930: PPUSH
4931: CALL_OW 69
4935: ST_TO_ADDR
// RewardPeople ( tmp ) ;
4936: LD_VAR 0 2
4940: PPUSH
4941: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_EXP 2
4954: PUSH
4955: LD_STRING JMM
4957: STR
4958: PPUSH
4959: CALL_OW 38
// if IsOk ( Gladstone ) then
4963: LD_EXP 17
4967: PPUSH
4968: CALL_OW 302
4972: IFFALSE 4992
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4974: LD_EXP 17
4978: PPUSH
4979: LD_EXP 2
4983: PUSH
4984: LD_STRING Gladstone
4986: STR
4987: PPUSH
4988: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
4992: LD_EXP 19
4996: PPUSH
4997: CALL_OW 302
5001: PUSH
5002: LD_EXP 19
5006: PPUSH
5007: CALL_OW 255
5011: PUSH
5012: LD_INT 1
5014: EQUAL
5015: AND
5016: IFFALSE 5046
// begin SaveCharacters ( Denis , mission_prefix & Denis ) ;
5018: LD_EXP 19
5022: PPUSH
5023: LD_EXP 2
5027: PUSH
5028: LD_STRING Denis
5030: STR
5031: PPUSH
5032: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5036: LD_INT 1
5038: PPUSH
5039: LD_STRING DenisInDelta
5041: PPUSH
5042: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5046: LD_EXP 22
5050: PPUSH
5051: CALL_OW 302
5055: IFFALSE 5075
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5057: LD_EXP 22
5061: PPUSH
5062: LD_EXP 2
5066: PUSH
5067: LD_STRING Lisa
5069: STR
5070: PPUSH
5071: CALL_OW 38
// end ; if IsOk ( Frank ) then
5075: LD_EXP 23
5079: PPUSH
5080: CALL_OW 302
5084: IFFALSE 5104
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5086: LD_EXP 23
5090: PPUSH
5091: LD_EXP 2
5095: PUSH
5096: LD_STRING Frank
5098: STR
5099: PPUSH
5100: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5104: LD_EXP 24
5108: PPUSH
5109: CALL_OW 302
5113: IFFALSE 5133
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5115: LD_EXP 24
5119: PPUSH
5120: LD_EXP 2
5124: PUSH
5125: LD_STRING Bobby
5127: STR
5128: PPUSH
5129: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5133: LD_EXP 25
5137: PPUSH
5138: CALL_OW 302
5142: IFFALSE 5162
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5144: LD_EXP 25
5148: PPUSH
5149: LD_EXP 2
5153: PUSH
5154: LD_STRING Cyrus
5156: STR
5157: PPUSH
5158: CALL_OW 38
// end ; if IsOk ( Brown ) then
5162: LD_EXP 20
5166: PPUSH
5167: CALL_OW 302
5171: IFFALSE 5191
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5173: LD_EXP 20
5177: PPUSH
5178: LD_EXP 2
5182: PUSH
5183: LD_STRING Brown
5185: STR
5186: PPUSH
5187: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5191: LD_EXP 21
5195: PPUSH
5196: CALL_OW 302
5200: IFFALSE 5220
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5202: LD_EXP 21
5206: PPUSH
5207: LD_EXP 2
5211: PUSH
5212: LD_STRING Donaldson
5214: STR
5215: PPUSH
5216: CALL_OW 38
// end ; if others then
5220: LD_EXP 26
5224: IFFALSE 5238
// SaveCharacters ( others , othersInDelta ) ;
5226: LD_EXP 26
5230: PPUSH
5231: LD_STRING othersInDelta
5233: PPUSH
5234: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5238: LD_INT 22
5240: PUSH
5241: LD_INT 1
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PUSH
5248: LD_INT 25
5250: PUSH
5251: LD_INT 16
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PPUSH
5262: CALL_OW 69
5266: IFFALSE 5304
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) , apeInDelta ) ;
5268: LD_INT 22
5270: PUSH
5271: LD_INT 1
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: PUSH
5278: LD_INT 25
5280: PUSH
5281: LD_INT 16
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: PPUSH
5292: CALL_OW 69
5296: PPUSH
5297: LD_STRING apeInDelta
5299: PPUSH
5300: CALL_OW 38
// tmp := [ ] ;
5304: LD_ADDR_VAR 0 2
5308: PUSH
5309: EMPTY
5310: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5311: LD_INT 22
5313: PUSH
5314: LD_INT 1
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PUSH
5321: LD_INT 21
5323: PUSH
5324: LD_INT 2
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PPUSH
5335: CALL_OW 69
5339: IFFALSE 5450
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
5341: LD_ADDR_VAR 0 1
5345: PUSH
5346: LD_INT 22
5348: PUSH
5349: LD_INT 1
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: PUSH
5356: LD_INT 21
5358: PUSH
5359: LD_INT 2
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PPUSH
5370: CALL_OW 69
5374: PUSH
5375: FOR_IN
5376: IFFALSE 5448
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
5378: LD_ADDR_VAR 0 2
5382: PUSH
5383: LD_VAR 0 2
5387: PUSH
5388: LD_VAR 0 1
5392: PPUSH
5393: CALL_OW 248
5397: PUSH
5398: LD_VAR 0 1
5402: PPUSH
5403: CALL_OW 265
5407: PUSH
5408: LD_VAR 0 1
5412: PPUSH
5413: CALL_OW 262
5417: PUSH
5418: LD_VAR 0 1
5422: PPUSH
5423: CALL_OW 263
5427: PUSH
5428: LD_VAR 0 1
5432: PPUSH
5433: CALL_OW 264
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: ADD
5445: ST_TO_ADDR
5446: GO 5375
5448: POP
5449: POP
// if tmp then
5450: LD_VAR 0 2
5454: IFFALSE 5468
// SaveVariable ( tmp , vehiclesInDelta ) ;
5456: LD_VAR 0 2
5460: PPUSH
5461: LD_STRING vehiclesInDelta
5463: PPUSH
5464: CALL_OW 39
// tmp := [ ] ;
5468: LD_ADDR_VAR 0 2
5472: PUSH
5473: EMPTY
5474: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
5475: LD_INT 22
5477: PUSH
5478: LD_INT 1
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PUSH
5485: LD_INT 21
5487: PUSH
5488: LD_INT 3
5490: PUSH
5491: EMPTY
5492: LIST
5493: LIST
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PPUSH
5499: CALL_OW 69
5503: IFFALSE 5656
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
5505: LD_ADDR_VAR 0 1
5509: PUSH
5510: LD_INT 22
5512: PUSH
5513: LD_INT 1
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: LD_INT 21
5522: PUSH
5523: LD_INT 3
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PPUSH
5534: CALL_OW 69
5538: PUSH
5539: FOR_IN
5540: IFFALSE 5654
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
5542: LD_ADDR_VAR 0 2
5546: PUSH
5547: LD_VAR 0 2
5551: PUSH
5552: LD_VAR 0 1
5556: PPUSH
5557: CALL_OW 266
5561: PUSH
5562: LD_VAR 0 1
5566: PPUSH
5567: CALL_OW 267
5571: PUSH
5572: LD_VAR 0 1
5576: PPUSH
5577: CALL_OW 250
5581: PUSH
5582: LD_VAR 0 1
5586: PPUSH
5587: CALL_OW 251
5591: PUSH
5592: LD_VAR 0 1
5596: PPUSH
5597: CALL_OW 254
5601: PUSH
5602: LD_VAR 0 1
5606: PPUSH
5607: LD_INT 1
5609: PPUSH
5610: CALL_OW 268
5614: PUSH
5615: LD_VAR 0 1
5619: PPUSH
5620: LD_INT 2
5622: PPUSH
5623: CALL_OW 268
5627: PUSH
5628: LD_VAR 0 1
5632: PPUSH
5633: CALL_OW 269
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: PUSH
5648: EMPTY
5649: LIST
5650: ADD
5651: ST_TO_ADDR
5652: GO 5539
5654: POP
5655: POP
// if tmp then
5656: LD_VAR 0 2
5660: IFFALSE 5674
// SaveVariable ( tmp , buildingsInDelta ) ;
5662: LD_VAR 0 2
5666: PPUSH
5667: LD_STRING buildingsInDelta
5669: PPUSH
5670: CALL_OW 39
// YouWin ;
5674: CALL_OW 103
// end ; end_of_file
5678: PPOPN 5
5680: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
5681: LD_INT 0
5683: PPUSH
5684: PPUSH
5685: PPUSH
5686: PPUSH
// InitHc ;
5687: CALL_OW 19
// InitUc ;
5691: CALL_OW 18
// uc_side := 2 ;
5695: LD_ADDR_OWVAR 20
5699: PUSH
5700: LD_INT 2
5702: ST_TO_ADDR
// uc_nation := 2 ;
5703: LD_ADDR_OWVAR 21
5707: PUSH
5708: LD_INT 2
5710: ST_TO_ADDR
// if not amount then
5711: LD_VAR 0 1
5715: NOT
5716: IFFALSE 5720
// exit ;
5718: GO 5843
// for i = 1 to amount do
5720: LD_ADDR_VAR 0 5
5724: PUSH
5725: DOUBLE
5726: LD_INT 1
5728: DEC
5729: ST_TO_ADDR
5730: LD_VAR 0 1
5734: PUSH
5735: FOR_TO
5736: IFFALSE 5831
// begin PrepareHuman ( false , 1 , skill ) ;
5738: LD_INT 0
5740: PPUSH
5741: LD_INT 1
5743: PPUSH
5744: LD_VAR 0 2
5748: PPUSH
5749: CALL_OW 380
// un := CreateHuman ;
5753: LD_ADDR_VAR 0 6
5757: PUSH
5758: CALL_OW 44
5762: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
5763: LD_ADDR_VAR 0 7
5767: PUSH
5768: LD_VAR 0 7
5772: PPUSH
5773: LD_INT 1
5775: PPUSH
5776: LD_VAR 0 6
5780: PPUSH
5781: CALL_OW 2
5785: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5786: LD_VAR 0 6
5790: PPUSH
5791: LD_VAR 0 3
5795: PPUSH
5796: LD_INT 0
5798: PPUSH
5799: CALL_OW 49
// if i mod 2 = 0 then
5803: LD_VAR 0 5
5807: PUSH
5808: LD_INT 2
5810: MOD
5811: PUSH
5812: LD_INT 0
5814: EQUAL
5815: IFFALSE 5829
// SetTag ( un , 11 ) ;
5817: LD_VAR 0 6
5821: PPUSH
5822: LD_INT 11
5824: PPUSH
5825: CALL_OW 109
// end ;
5829: GO 5735
5831: POP
5832: POP
// result := tmp ;
5833: LD_ADDR_VAR 0 4
5837: PUSH
5838: LD_VAR 0 7
5842: ST_TO_ADDR
// end ;
5843: LD_VAR 0 4
5847: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
5848: LD_EXP 6
5852: IFFALSE 6755
5854: GO 5856
5856: DISABLE
5857: LD_INT 0
5859: PPUSH
5860: PPUSH
5861: PPUSH
5862: PPUSH
5863: PPUSH
5864: PPUSH
5865: PPUSH
5866: PPUSH
// begin more_troops := false ;
5867: LD_ADDR_VAR 0 3
5871: PUSH
5872: LD_INT 0
5874: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
5875: LD_ADDR_VAR 0 4
5879: PUSH
5880: LD_INT 3
5882: PUSH
5883: LD_INT 4
5885: PUSH
5886: LD_INT 5
5888: PUSH
5889: LD_INT 5
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: PUSH
5898: LD_OWVAR 67
5902: ARRAY
5903: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
5904: LD_ADDR_VAR 0 2
5908: PUSH
5909: LD_INT 10500
5911: PUSH
5912: LD_INT 8400
5914: PUSH
5915: LD_INT 6300
5917: PUSH
5918: LD_INT 5250
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: PUSH
5927: LD_OWVAR 67
5931: ARRAY
5932: ST_TO_ADDR
// force := [ ] ;
5933: LD_ADDR_VAR 0 8
5937: PUSH
5938: EMPTY
5939: ST_TO_ADDR
// ar_forces := [ ] ;
5940: LD_ADDR_EXP 27
5944: PUSH
5945: EMPTY
5946: ST_TO_ADDR
// ap_killers := [ ] ;
5947: LD_ADDR_EXP 28
5951: PUSH
5952: EMPTY
5953: ST_TO_ADDR
// Wait ( timer ) ;
5954: LD_VAR 0 2
5958: PPUSH
5959: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
5963: LD_EXP 19
5967: PUSH
5968: LD_EXP 19
5972: PPUSH
5973: CALL_OW 255
5977: PUSH
5978: LD_INT 4
5980: EQUAL
5981: AND
5982: IFFALSE 5991
// Wait ( 0 0$45 ) ;
5984: LD_INT 1575
5986: PPUSH
5987: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
5991: LD_INT 22
5993: PUSH
5994: LD_INT 1
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 30
6003: PUSH
6004: LD_INT 4
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: PPUSH
6015: CALL_OW 69
6019: IFFALSE 6036
// begin Wait ( 1 1$25 ) ;
6021: LD_INT 2975
6023: PPUSH
6024: CALL_OW 67
// more_troops := true ;
6028: LD_ADDR_VAR 0 3
6032: PUSH
6033: LD_INT 1
6035: ST_TO_ADDR
// end ; if more_troops then
6036: LD_VAR 0 3
6040: IFFALSE 6236
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6042: LD_ADDR_VAR 0 8
6046: PUSH
6047: LD_INT 4
6049: PUSH
6050: LD_INT 5
6052: PUSH
6053: LD_INT 6
6055: PUSH
6056: LD_INT 7
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: PUSH
6065: LD_OWVAR 67
6069: ARRAY
6070: PPUSH
6071: LD_VAR 0 4
6075: PPUSH
6076: LD_INT 14
6078: PPUSH
6079: CALL 5681 0 3
6083: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6084: LD_ADDR_VAR 0 7
6088: PUSH
6089: LD_INT 2
6091: PPUSH
6092: LD_INT 3
6094: PPUSH
6095: LD_INT 22
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: LD_INT 1
6103: PPUSH
6104: LD_INT 42
6106: PUSH
6107: LD_INT 42
6109: PUSH
6110: LD_INT 43
6112: PUSH
6113: LD_INT 44
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: PUSH
6122: LD_OWVAR 67
6126: ARRAY
6127: PPUSH
6128: LD_INT 90
6130: PPUSH
6131: CALL 431 0 7
6135: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6136: LD_VAR 0 7
6140: PPUSH
6141: LD_INT 4
6143: PPUSH
6144: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6148: LD_VAR 0 7
6152: PPUSH
6153: LD_INT 13
6155: PPUSH
6156: LD_INT 0
6158: PPUSH
6159: CALL_OW 49
// uc_side := 2 ;
6163: LD_ADDR_OWVAR 20
6167: PUSH
6168: LD_INT 2
6170: ST_TO_ADDR
// uc_nation := 2 ;
6171: LD_ADDR_OWVAR 21
6175: PUSH
6176: LD_INT 2
6178: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6179: LD_INT 0
6181: PPUSH
6182: LD_INT 1
6184: PPUSH
6185: LD_VAR 0 4
6189: PPUSH
6190: CALL_OW 380
// un := CreateHuman ;
6194: LD_ADDR_VAR 0 6
6198: PUSH
6199: CALL_OW 44
6203: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6204: LD_VAR 0 6
6208: PPUSH
6209: LD_VAR 0 7
6213: PPUSH
6214: CALL_OW 52
// force := force ^ un ;
6218: LD_ADDR_VAR 0 8
6222: PUSH
6223: LD_VAR 0 8
6227: PUSH
6228: LD_VAR 0 6
6232: ADD
6233: ST_TO_ADDR
// end else
6234: GO 6278
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6236: LD_ADDR_VAR 0 8
6240: PUSH
6241: LD_INT 3
6243: PUSH
6244: LD_INT 4
6246: PUSH
6247: LD_INT 5
6249: PUSH
6250: LD_INT 6
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: PUSH
6259: LD_OWVAR 67
6263: ARRAY
6264: PPUSH
6265: LD_VAR 0 4
6269: PPUSH
6270: LD_INT 14
6272: PPUSH
6273: CALL 5681 0 3
6277: ST_TO_ADDR
// end ; if force then
6278: LD_VAR 0 8
6282: IFFALSE 6294
// ar_forces := force ;
6284: LD_ADDR_EXP 27
6288: PUSH
6289: LD_VAR 0 8
6293: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6294: LD_INT 35
6296: PPUSH
6297: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6301: LD_INT 22
6303: PUSH
6304: LD_INT 2
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 21
6313: PUSH
6314: LD_INT 1
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PPUSH
6325: CALL_OW 69
6329: PUSH
6330: LD_INT 0
6332: EQUAL
6333: IFFALSE 6294
// Wait ( timer ) ;
6335: LD_VAR 0 2
6339: PPUSH
6340: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
6344: LD_ADDR_VAR 0 8
6348: PUSH
6349: LD_INT 4
6351: PUSH
6352: LD_INT 5
6354: PUSH
6355: LD_INT 6
6357: PUSH
6358: LD_INT 7
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: PUSH
6367: LD_OWVAR 67
6371: ARRAY
6372: PPUSH
6373: LD_VAR 0 4
6377: PPUSH
6378: LD_INT 13
6380: PUSH
6381: LD_INT 14
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: PUSH
6388: LD_INT 1
6390: PPUSH
6391: LD_INT 2
6393: PPUSH
6394: CALL_OW 12
6398: ARRAY
6399: PPUSH
6400: CALL 5681 0 3
6404: ST_TO_ADDR
// if Difficulty > 1 and Delta then
6405: LD_OWVAR 67
6409: PUSH
6410: LD_INT 1
6412: GREATER
6413: PUSH
6414: LD_EXP 6
6418: AND
6419: IFFALSE 6498
// begin uc_side := 2 ;
6421: LD_ADDR_OWVAR 20
6425: PUSH
6426: LD_INT 2
6428: ST_TO_ADDR
// uc_nation := 2 ;
6429: LD_ADDR_OWVAR 21
6433: PUSH
6434: LD_INT 2
6436: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
6437: LD_INT 0
6439: PPUSH
6440: LD_INT 2
6442: PPUSH
6443: LD_VAR 0 4
6447: PPUSH
6448: CALL_OW 380
// eng := CreateHuman ;
6452: LD_ADDR_VAR 0 5
6456: PUSH
6457: CALL_OW 44
6461: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
6462: LD_VAR 0 5
6466: PPUSH
6467: LD_INT 13
6469: PPUSH
6470: LD_INT 0
6472: PPUSH
6473: CALL_OW 49
// Wait ( 3 ) ;
6477: LD_INT 3
6479: PPUSH
6480: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
6484: LD_VAR 0 5
6488: PPUSH
6489: LD_EXP 6
6493: PPUSH
6494: CALL_OW 180
// end ; if force then
6498: LD_VAR 0 8
6502: IFFALSE 6514
// ar_forces := force ;
6504: LD_ADDR_EXP 27
6508: PUSH
6509: LD_VAR 0 8
6513: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6514: LD_INT 35
6516: PPUSH
6517: CALL_OW 67
// if eng then
6521: LD_VAR 0 5
6525: IFFALSE 6579
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
6527: LD_EXP 6
6531: PPUSH
6532: CALL_OW 255
6536: PUSH
6537: LD_INT 2
6539: EQUAL
6540: PUSH
6541: LD_VAR 0 5
6545: PPUSH
6546: CALL_OW 302
6550: AND
6551: PUSH
6552: LD_VAR 0 5
6556: PPUSH
6557: CALL_OW 310
6561: NOT
6562: AND
6563: IFFALSE 6579
// ComEnterUnit ( eng , Delta ) ;
6565: LD_VAR 0 5
6569: PPUSH
6570: LD_EXP 6
6574: PPUSH
6575: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6579: LD_INT 22
6581: PUSH
6582: LD_INT 2
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 1
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PPUSH
6603: CALL_OW 69
6607: PUSH
6608: LD_INT 0
6610: EQUAL
6611: IFFALSE 6514
// Wait ( 2 2$00 ) ;
6613: LD_INT 4200
6615: PPUSH
6616: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
6620: LD_ADDR_EXP 28
6624: PUSH
6625: LD_INT 1
6627: PUSH
6628: LD_INT 2
6630: PUSH
6631: LD_INT 2
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: PUSH
6643: LD_OWVAR 67
6647: ARRAY
6648: PPUSH
6649: LD_VAR 0 4
6653: PPUSH
6654: LD_INT 13
6656: PPUSH
6657: CALL 5681 0 3
6661: ST_TO_ADDR
// Wait ( timer * 2 ) ;
6662: LD_VAR 0 2
6666: PUSH
6667: LD_INT 2
6669: MUL
6670: PPUSH
6671: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
6675: LD_ADDR_EXP 27
6679: PUSH
6680: LD_INT 5
6682: PUSH
6683: LD_INT 6
6685: PUSH
6686: LD_INT 7
6688: PUSH
6689: LD_INT 8
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: PUSH
6698: LD_OWVAR 67
6702: ARRAY
6703: PPUSH
6704: LD_VAR 0 4
6708: PPUSH
6709: LD_INT 13
6711: PPUSH
6712: CALL 5681 0 3
6716: PUSH
6717: LD_INT 3
6719: PUSH
6720: LD_INT 4
6722: PUSH
6723: LD_INT 4
6725: PUSH
6726: LD_INT 4
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: PUSH
6735: LD_OWVAR 67
6739: ARRAY
6740: PPUSH
6741: LD_VAR 0 4
6745: PPUSH
6746: LD_INT 14
6748: PPUSH
6749: CALL 5681 0 3
6753: ADD
6754: ST_TO_ADDR
// end ;
6755: PPOPN 8
6757: END
// every 0 0$03 trigger ar_forces do var i , target ;
6758: LD_EXP 27
6762: IFFALSE 6960
6764: GO 6766
6766: DISABLE
6767: LD_INT 0
6769: PPUSH
6770: PPUSH
// begin enable ;
6771: ENABLE
// if not ar_forces then
6772: LD_EXP 27
6776: NOT
6777: IFFALSE 6781
// exit ;
6779: GO 6960
// if Delta then
6781: LD_EXP 6
6785: IFFALSE 6799
// target := Delta else
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_EXP 6
6796: ST_TO_ADDR
6797: GO 6809
// target := JMM ;
6799: LD_ADDR_VAR 0 2
6803: PUSH
6804: LD_EXP 16
6808: ST_TO_ADDR
// for i in ar_forces do
6809: LD_ADDR_VAR 0 1
6813: PUSH
6814: LD_EXP 27
6818: PUSH
6819: FOR_IN
6820: IFFALSE 6958
// begin if i in FilterAllUnits ( [ f_driving ] ) then
6822: LD_VAR 0 1
6826: PUSH
6827: LD_INT 55
6829: PUSH
6830: EMPTY
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: IN
6838: IFFALSE 6881
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
6840: LD_VAR 0 1
6844: PPUSH
6845: LD_INT 22
6847: PUSH
6848: LD_INT 1
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PPUSH
6855: CALL_OW 69
6859: PPUSH
6860: LD_VAR 0 1
6864: PPUSH
6865: CALL_OW 310
6869: PPUSH
6870: CALL_OW 74
6874: PPUSH
6875: CALL_OW 115
6879: GO 6956
// if GetDistUnits ( i , target ) > 30 then
6881: LD_VAR 0 1
6885: PPUSH
6886: LD_VAR 0 2
6890: PPUSH
6891: CALL_OW 296
6895: PUSH
6896: LD_INT 30
6898: GREATER
6899: IFFALSE 6932
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
6901: LD_VAR 0 1
6905: PPUSH
6906: LD_VAR 0 2
6910: PPUSH
6911: CALL_OW 250
6915: PPUSH
6916: LD_VAR 0 2
6920: PPUSH
6921: CALL_OW 251
6925: PPUSH
6926: CALL_OW 114
6930: GO 6956
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
6932: LD_VAR 0 1
6936: PPUSH
6937: LD_INT 81
6939: PUSH
6940: LD_INT 2
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PPUSH
6947: CALL_OW 69
6951: PPUSH
6952: CALL 736 0 2
// end ;
6956: GO 6819
6958: POP
6959: POP
// end ;
6960: PPOPN 2
6962: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
6963: LD_EXP 28
6967: IFFALSE 7127
6969: GO 6971
6971: DISABLE
6972: LD_INT 0
6974: PPUSH
6975: PPUSH
6976: PPUSH
// begin enable ;
6977: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
6978: LD_ADDR_VAR 0 1
6982: PUSH
6983: LD_INT 22
6985: PUSH
6986: LD_INT 0
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 25
6995: PUSH
6996: LD_INT 12
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PPUSH
7007: CALL_OW 69
7011: ST_TO_ADDR
// if not filter then
7012: LD_VAR 0 1
7016: NOT
7017: IFFALSE 7044
// begin ar_forces := ar_forces ^ ap_killers ;
7019: LD_ADDR_EXP 27
7023: PUSH
7024: LD_EXP 27
7028: PUSH
7029: LD_EXP 28
7033: ADD
7034: ST_TO_ADDR
// ap_killers := [ ] ;
7035: LD_ADDR_EXP 28
7039: PUSH
7040: EMPTY
7041: ST_TO_ADDR
// exit ;
7042: GO 7127
// end ; for i in ap_killers do
7044: LD_ADDR_VAR 0 2
7048: PUSH
7049: LD_EXP 28
7053: PUSH
7054: FOR_IN
7055: IFFALSE 7125
// begin if not IsOk ( i ) then
7057: LD_VAR 0 2
7061: PPUSH
7062: CALL_OW 302
7066: NOT
7067: IFFALSE 7071
// continue ;
7069: GO 7054
// if not HasTask ( i ) then
7071: LD_VAR 0 2
7075: PPUSH
7076: CALL_OW 314
7080: NOT
7081: IFFALSE 7103
// target := NearestUnitToUnit ( filter , i ) ;
7083: LD_ADDR_VAR 0 3
7087: PUSH
7088: LD_VAR 0 1
7092: PPUSH
7093: LD_VAR 0 2
7097: PPUSH
7098: CALL_OW 74
7102: ST_TO_ADDR
// if target then
7103: LD_VAR 0 3
7107: IFFALSE 7123
// ComAttackUnit ( i , target ) ;
7109: LD_VAR 0 2
7113: PPUSH
7114: LD_VAR 0 3
7118: PPUSH
7119: CALL_OW 115
// end ;
7123: GO 7054
7125: POP
7126: POP
// end ; end_of_file
7127: PPOPN 3
7129: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7130: LD_EXP 6
7134: IFFALSE 7270
7136: GO 7138
7138: DISABLE
7139: LD_INT 0
7141: PPUSH
7142: PPUSH
7143: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
7144: LD_ADDR_VAR 0 2
7148: PUSH
7149: LD_INT 300
7151: PUSH
7152: LD_INT 250
7154: PUSH
7155: LD_INT 220
7157: PUSH
7158: LD_INT 210
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: PUSH
7167: LD_OWVAR 67
7171: ARRAY
7172: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
7173: LD_INT 1
7175: PPUSH
7176: LD_INT 3
7178: PPUSH
7179: CALL_OW 12
7183: PPUSH
7184: LD_INT 7
7186: PPUSH
7187: LD_INT 1
7189: PPUSH
7190: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
7194: LD_INT 3150
7196: PPUSH
7197: LD_INT 4900
7199: PPUSH
7200: CALL_OW 12
7204: PPUSH
7205: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
7209: LD_ADDR_VAR 0 3
7213: PUSH
7214: LD_INT 1
7216: PPUSH
7217: LD_INT 5
7219: PPUSH
7220: CALL_OW 12
7224: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
7225: LD_VAR 0 3
7229: PPUSH
7230: LD_INT 7
7232: PPUSH
7233: LD_INT 1
7235: PPUSH
7236: CALL_OW 55
// counter := counter - cr * 10 ;
7240: LD_ADDR_VAR 0 2
7244: PUSH
7245: LD_VAR 0 2
7249: PUSH
7250: LD_VAR 0 3
7254: PUSH
7255: LD_INT 10
7257: MUL
7258: MINUS
7259: ST_TO_ADDR
// until counter <= 0 ;
7260: LD_VAR 0 2
7264: PUSH
7265: LD_INT 0
7267: LESSEQUAL
7268: IFFALSE 7194
// end ;
7270: PPOPN 3
7272: END
// every 0 0$03 trigger not Delta do var i ;
7273: LD_EXP 6
7277: NOT
7278: IFFALSE 7348
7280: GO 7282
7282: DISABLE
7283: LD_INT 0
7285: PPUSH
// begin for i = 1 to 5 - Difficulty do
7286: LD_ADDR_VAR 0 1
7290: PUSH
7291: DOUBLE
7292: LD_INT 1
7294: DEC
7295: ST_TO_ADDR
7296: LD_INT 5
7298: PUSH
7299: LD_OWVAR 67
7303: MINUS
7304: PUSH
7305: FOR_TO
7306: IFFALSE 7346
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
7308: LD_INT 2
7310: PPUSH
7311: LD_INT 5
7313: PPUSH
7314: CALL_OW 12
7318: PPUSH
7319: LD_INT 8
7321: PPUSH
7322: LD_INT 1
7324: PPUSH
7325: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
7329: LD_INT 560
7331: PPUSH
7332: LD_INT 1365
7334: PPUSH
7335: CALL_OW 12
7339: PPUSH
7340: CALL_OW 67
// end ;
7344: GO 7305
7346: POP
7347: POP
// end ;
7348: PPOPN 1
7350: END
// every 3 3$00 trigger tick < 15 15$00 do
7351: LD_OWVAR 1
7355: PUSH
7356: LD_INT 31500
7358: LESS
7359: IFFALSE 7419
7361: GO 7363
7363: DISABLE
// begin enable ;
7364: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
7365: LD_INT 1
7367: PPUSH
7368: LD_INT 3
7370: PPUSH
7371: CALL_OW 12
7375: PPUSH
7376: LD_INT 1
7378: PPUSH
7379: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
7383: LD_INT 1330
7385: PPUSH
7386: LD_INT 2065
7388: PPUSH
7389: CALL_OW 12
7393: PPUSH
7394: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
7398: LD_INT 1
7400: PPUSH
7401: LD_INT 4
7403: PPUSH
7404: CALL_OW 12
7408: PPUSH
7409: LD_INT 15
7411: PPUSH
7412: LD_INT 1
7414: PPUSH
7415: CALL_OW 55
// end ; end_of_file
7419: END
// on UnitDestroyed ( un ) do begin if un = JMM then
7420: LD_VAR 0 1
7424: PUSH
7425: LD_EXP 16
7429: EQUAL
7430: IFFALSE 7439
// YouLost ( JMM ) ;
7432: LD_STRING JMM
7434: PPUSH
7435: CALL_OW 104
// if un = Delta then
7439: LD_VAR 0 1
7443: PUSH
7444: LD_EXP 6
7448: EQUAL
7449: IFFALSE 7472
// begin Delta := 0 ;
7451: LD_ADDR_EXP 6
7455: PUSH
7456: LD_INT 0
7458: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
7459: LD_INT 0
7461: PPUSH
7462: LD_INT 1
7464: PPUSH
7465: LD_INT 1
7467: PPUSH
7468: CALL_OW 324
// end ; if un in ar_forces then
7472: LD_VAR 0 1
7476: PUSH
7477: LD_EXP 27
7481: IN
7482: IFFALSE 7500
// ar_forces := ar_forces diff un ;
7484: LD_ADDR_EXP 27
7488: PUSH
7489: LD_EXP 27
7493: PUSH
7494: LD_VAR 0 1
7498: DIFF
7499: ST_TO_ADDR
// if un in ap_killers then
7500: LD_VAR 0 1
7504: PUSH
7505: LD_EXP 28
7509: IN
7510: IFFALSE 7528
// ap_killers := ap_killers diff un ;
7512: LD_ADDR_EXP 28
7516: PUSH
7517: LD_EXP 28
7521: PUSH
7522: LD_VAR 0 1
7526: DIFF
7527: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
7528: LD_VAR 0 1
7532: PUSH
7533: LD_INT 2
7535: PUSH
7536: LD_INT 25
7538: PUSH
7539: LD_INT 12
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 25
7548: PUSH
7549: LD_INT 16
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: EMPTY
7557: LIST
7558: LIST
7559: LIST
7560: PPUSH
7561: CALL_OW 69
7565: IN
7566: IFFALSE 7582
// apeKillCounter := apeKillCounter + 1 ;
7568: LD_ADDR_EXP 15
7572: PUSH
7573: LD_EXP 15
7577: PUSH
7578: LD_INT 1
7580: PLUS
7581: ST_TO_ADDR
// end ;
7582: PPOPN 1
7584: END
// on Contact ( s1 , s2 ) do if s1 = 1 and s2 = 2 and not arab_spotted then
7585: LD_VAR 0 1
7589: PUSH
7590: LD_INT 1
7592: EQUAL
7593: PUSH
7594: LD_VAR 0 2
7598: PUSH
7599: LD_INT 2
7601: EQUAL
7602: AND
7603: PUSH
7604: LD_EXP 13
7608: NOT
7609: AND
7610: IFFALSE 7620
// arab_spotted := true ;
7612: LD_ADDR_EXP 13
7616: PUSH
7617: LD_INT 1
7619: ST_TO_ADDR
7620: PPOPN 2
7622: END
// on EndTheMissionRaised ( p ) do begin end_the_mission_allowed := false ;
7623: LD_ADDR_OWVAR 57
7627: PUSH
7628: LD_INT 0
7630: ST_TO_ADDR
// end_mission := true ;
7631: LD_ADDR_EXP 14
7635: PUSH
7636: LD_INT 1
7638: ST_TO_ADDR
// end ;
7639: PPOPN 1
7641: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
7642: LD_VAR 0 2
7646: PPUSH
7647: CALL_OW 255
7651: PUSH
7652: LD_INT 1
7654: EQUAL
7655: IFFALSE 7671
// apeman_counter := apeman_counter + 1 ;
7657: LD_ADDR_EXP 12
7661: PUSH
7662: LD_EXP 12
7666: PUSH
7667: LD_INT 1
7669: PLUS
7670: ST_TO_ADDR
// if not first_apeman_tamed then
7671: LD_EXP 8
7675: NOT
7676: IFFALSE 7876
// begin first_apeman_tamed := true ;
7678: LD_ADDR_EXP 8
7682: PUSH
7683: LD_INT 1
7685: ST_TO_ADDR
// if sci = Gladstone then
7686: LD_VAR 0 2
7690: PUSH
7691: LD_EXP 17
7695: EQUAL
7696: IFFALSE 7710
// Say ( Gladstone , D7b-Glad-1 ) ;
7698: LD_EXP 17
7702: PPUSH
7703: LD_STRING D7b-Glad-1
7705: PPUSH
7706: CALL_OW 88
// if sci = Denis then
7710: LD_VAR 0 2
7714: PUSH
7715: LD_EXP 19
7719: EQUAL
7720: IFFALSE 7734
// Say ( Denis , D7a-Den-1 ) ;
7722: LD_EXP 19
7726: PPUSH
7727: LD_STRING D7a-Den-1
7729: PPUSH
7730: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
7734: LD_VAR 0 2
7738: PUSH
7739: LD_EXP 16
7743: PUSH
7744: LD_EXP 17
7748: PUSH
7749: LD_EXP 19
7753: PUSH
7754: LD_EXP 22
7758: PUSH
7759: LD_EXP 23
7763: PUSH
7764: LD_EXP 24
7768: PUSH
7769: LD_EXP 25
7773: PUSH
7774: LD_EXP 21
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: IN
7789: NOT
7790: IFFALSE 7833
// begin if GetSex ( sci ) = sex_male then
7792: LD_VAR 0 2
7796: PPUSH
7797: CALL_OW 258
7801: PUSH
7802: LD_INT 1
7804: EQUAL
7805: IFFALSE 7821
// Say ( sci , D7c-Sci1-1 ) else
7807: LD_VAR 0 2
7811: PPUSH
7812: LD_STRING D7c-Sci1-1
7814: PPUSH
7815: CALL_OW 88
7819: GO 7833
// Say ( sci , D7c-FSci1-1 ) ;
7821: LD_VAR 0 2
7825: PPUSH
7826: LD_STRING D7c-FSci1-1
7828: PPUSH
7829: CALL_OW 88
// end ; if not sci = Gladstone then
7833: LD_VAR 0 2
7837: PUSH
7838: LD_EXP 17
7842: EQUAL
7843: NOT
7844: IFFALSE 7858
// Say ( Gladstone , D7c-Glad-1 ) ;
7846: LD_EXP 17
7850: PPUSH
7851: LD_STRING D7c-Glad-1
7853: PPUSH
7854: CALL_OW 88
// if Lisa then
7858: LD_EXP 22
7862: IFFALSE 7876
// Say ( Lisa , D8-Lisa-1 ) ;
7864: LD_EXP 22
7868: PPUSH
7869: LD_STRING D8-Lisa-1
7871: PPUSH
7872: CALL_OW 88
// end ; end ; end_of_file
7876: PPOPN 2
7878: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
7879: LD_INT 0
7881: PPUSH
// ar_miner := 81 ;
7882: LD_ADDR_EXP 36
7886: PUSH
7887: LD_INT 81
7889: ST_TO_ADDR
// ar_crane := 88 ;
7890: LD_ADDR_EXP 35
7894: PUSH
7895: LD_INT 88
7897: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7898: LD_ADDR_EXP 30
7902: PUSH
7903: LD_INT 89
7905: ST_TO_ADDR
// us_hack := 99 ;
7906: LD_ADDR_EXP 31
7910: PUSH
7911: LD_INT 99
7913: ST_TO_ADDR
// us_artillery := 97 ;
7914: LD_ADDR_EXP 32
7918: PUSH
7919: LD_INT 97
7921: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7922: LD_ADDR_EXP 33
7926: PUSH
7927: LD_INT 91
7929: ST_TO_ADDR
// ar_mortar := 92 ;
7930: LD_ADDR_EXP 34
7934: PUSH
7935: LD_INT 92
7937: ST_TO_ADDR
// ru_radar := 98 ;
7938: LD_ADDR_EXP 29
7942: PUSH
7943: LD_INT 98
7945: ST_TO_ADDR
// tech_Artillery := 80 ;
7946: LD_ADDR_EXP 37
7950: PUSH
7951: LD_INT 80
7953: ST_TO_ADDR
// tech_RadMat := 81 ;
7954: LD_ADDR_EXP 38
7958: PUSH
7959: LD_INT 81
7961: ST_TO_ADDR
// tech_BasicTools := 82 ;
7962: LD_ADDR_EXP 39
7966: PUSH
7967: LD_INT 82
7969: ST_TO_ADDR
// tech_Cargo := 83 ;
7970: LD_ADDR_EXP 40
7974: PUSH
7975: LD_INT 83
7977: ST_TO_ADDR
// tech_Track := 84 ;
7978: LD_ADDR_EXP 41
7982: PUSH
7983: LD_INT 84
7985: ST_TO_ADDR
// tech_Crane := 85 ;
7986: LD_ADDR_EXP 42
7990: PUSH
7991: LD_INT 85
7993: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7994: LD_ADDR_EXP 43
7998: PUSH
7999: LD_INT 86
8001: ST_TO_ADDR
// tech_Hovercraft := 87 ;
8002: LD_ADDR_EXP 44
8006: PUSH
8007: LD_INT 87
8009: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
8010: LD_ADDR_EXP 45
8014: PUSH
8015: LD_INT 88
8017: ST_TO_ADDR
// class_mastodont := 31 ;
8018: LD_ADDR_EXP 46
8022: PUSH
8023: LD_INT 31
8025: ST_TO_ADDR
// class_horse := 21 ;
8026: LD_ADDR_EXP 47
8030: PUSH
8031: LD_INT 21
8033: ST_TO_ADDR
// end ;
8034: LD_VAR 0 1
8038: RET
// every 1 do
8039: GO 8041
8041: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
8042: CALL 7879 0 0
8046: END
// every 0 0$1 do
8047: GO 8049
8049: DISABLE
// begin enable ;
8050: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8051: LD_STRING updateTimer(
8053: PUSH
8054: LD_OWVAR 1
8058: STR
8059: PUSH
8060: LD_STRING );
8062: STR
8063: PPUSH
8064: CALL_OW 559
// end ;
8068: END
// on MapStart ( p ) do begin if streamModeActive then
8069: LD_EXP 48
8073: IFFALSE 8082
// DefineStreamItems ( true ) ;
8075: LD_INT 1
8077: PPUSH
8078: CALL 9730 0 1
// UpdateFactoryWaypoints ( ) ;
8082: CALL 23314 0 0
// end ;
8086: PPOPN 1
8088: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8089: LD_INT 0
8091: PPUSH
// if p2 = 100 then
8092: LD_VAR 0 2
8096: PUSH
8097: LD_INT 100
8099: EQUAL
8100: IFFALSE 9103
// begin if not StreamModeActive then
8102: LD_EXP 48
8106: NOT
8107: IFFALSE 8117
// StreamModeActive := true ;
8109: LD_ADDR_EXP 48
8113: PUSH
8114: LD_INT 1
8116: ST_TO_ADDR
// if p3 = 0 then
8117: LD_VAR 0 3
8121: PUSH
8122: LD_INT 0
8124: EQUAL
8125: IFFALSE 8131
// InitStreamMode ;
8127: CALL 9266 0 0
// if p3 = 1 then
8131: LD_VAR 0 3
8135: PUSH
8136: LD_INT 1
8138: EQUAL
8139: IFFALSE 8149
// sRocket := true ;
8141: LD_ADDR_EXP 53
8145: PUSH
8146: LD_INT 1
8148: ST_TO_ADDR
// if p3 = 2 then
8149: LD_VAR 0 3
8153: PUSH
8154: LD_INT 2
8156: EQUAL
8157: IFFALSE 8167
// sSpeed := true ;
8159: LD_ADDR_EXP 52
8163: PUSH
8164: LD_INT 1
8166: ST_TO_ADDR
// if p3 = 3 then
8167: LD_VAR 0 3
8171: PUSH
8172: LD_INT 3
8174: EQUAL
8175: IFFALSE 8185
// sEngine := true ;
8177: LD_ADDR_EXP 54
8181: PUSH
8182: LD_INT 1
8184: ST_TO_ADDR
// if p3 = 4 then
8185: LD_VAR 0 3
8189: PUSH
8190: LD_INT 4
8192: EQUAL
8193: IFFALSE 8203
// sSpec := true ;
8195: LD_ADDR_EXP 51
8199: PUSH
8200: LD_INT 1
8202: ST_TO_ADDR
// if p3 = 5 then
8203: LD_VAR 0 3
8207: PUSH
8208: LD_INT 5
8210: EQUAL
8211: IFFALSE 8221
// sLevel := true ;
8213: LD_ADDR_EXP 55
8217: PUSH
8218: LD_INT 1
8220: ST_TO_ADDR
// if p3 = 6 then
8221: LD_VAR 0 3
8225: PUSH
8226: LD_INT 6
8228: EQUAL
8229: IFFALSE 8239
// sArmoury := true ;
8231: LD_ADDR_EXP 56
8235: PUSH
8236: LD_INT 1
8238: ST_TO_ADDR
// if p3 = 7 then
8239: LD_VAR 0 3
8243: PUSH
8244: LD_INT 7
8246: EQUAL
8247: IFFALSE 8257
// sRadar := true ;
8249: LD_ADDR_EXP 57
8253: PUSH
8254: LD_INT 1
8256: ST_TO_ADDR
// if p3 = 8 then
8257: LD_VAR 0 3
8261: PUSH
8262: LD_INT 8
8264: EQUAL
8265: IFFALSE 8275
// sBunker := true ;
8267: LD_ADDR_EXP 58
8271: PUSH
8272: LD_INT 1
8274: ST_TO_ADDR
// if p3 = 9 then
8275: LD_VAR 0 3
8279: PUSH
8280: LD_INT 9
8282: EQUAL
8283: IFFALSE 8293
// sHack := true ;
8285: LD_ADDR_EXP 59
8289: PUSH
8290: LD_INT 1
8292: ST_TO_ADDR
// if p3 = 10 then
8293: LD_VAR 0 3
8297: PUSH
8298: LD_INT 10
8300: EQUAL
8301: IFFALSE 8311
// sFire := true ;
8303: LD_ADDR_EXP 60
8307: PUSH
8308: LD_INT 1
8310: ST_TO_ADDR
// if p3 = 11 then
8311: LD_VAR 0 3
8315: PUSH
8316: LD_INT 11
8318: EQUAL
8319: IFFALSE 8329
// sRefresh := true ;
8321: LD_ADDR_EXP 61
8325: PUSH
8326: LD_INT 1
8328: ST_TO_ADDR
// if p3 = 12 then
8329: LD_VAR 0 3
8333: PUSH
8334: LD_INT 12
8336: EQUAL
8337: IFFALSE 8347
// sExp := true ;
8339: LD_ADDR_EXP 62
8343: PUSH
8344: LD_INT 1
8346: ST_TO_ADDR
// if p3 = 13 then
8347: LD_VAR 0 3
8351: PUSH
8352: LD_INT 13
8354: EQUAL
8355: IFFALSE 8365
// sDepot := true ;
8357: LD_ADDR_EXP 63
8361: PUSH
8362: LD_INT 1
8364: ST_TO_ADDR
// if p3 = 14 then
8365: LD_VAR 0 3
8369: PUSH
8370: LD_INT 14
8372: EQUAL
8373: IFFALSE 8383
// sFlag := true ;
8375: LD_ADDR_EXP 64
8379: PUSH
8380: LD_INT 1
8382: ST_TO_ADDR
// if p3 = 15 then
8383: LD_VAR 0 3
8387: PUSH
8388: LD_INT 15
8390: EQUAL
8391: IFFALSE 8401
// sKamikadze := true ;
8393: LD_ADDR_EXP 72
8397: PUSH
8398: LD_INT 1
8400: ST_TO_ADDR
// if p3 = 16 then
8401: LD_VAR 0 3
8405: PUSH
8406: LD_INT 16
8408: EQUAL
8409: IFFALSE 8419
// sTroll := true ;
8411: LD_ADDR_EXP 73
8415: PUSH
8416: LD_INT 1
8418: ST_TO_ADDR
// if p3 = 17 then
8419: LD_VAR 0 3
8423: PUSH
8424: LD_INT 17
8426: EQUAL
8427: IFFALSE 8437
// sSlow := true ;
8429: LD_ADDR_EXP 74
8433: PUSH
8434: LD_INT 1
8436: ST_TO_ADDR
// if p3 = 18 then
8437: LD_VAR 0 3
8441: PUSH
8442: LD_INT 18
8444: EQUAL
8445: IFFALSE 8455
// sLack := true ;
8447: LD_ADDR_EXP 75
8451: PUSH
8452: LD_INT 1
8454: ST_TO_ADDR
// if p3 = 19 then
8455: LD_VAR 0 3
8459: PUSH
8460: LD_INT 19
8462: EQUAL
8463: IFFALSE 8473
// sTank := true ;
8465: LD_ADDR_EXP 77
8469: PUSH
8470: LD_INT 1
8472: ST_TO_ADDR
// if p3 = 20 then
8473: LD_VAR 0 3
8477: PUSH
8478: LD_INT 20
8480: EQUAL
8481: IFFALSE 8491
// sRemote := true ;
8483: LD_ADDR_EXP 78
8487: PUSH
8488: LD_INT 1
8490: ST_TO_ADDR
// if p3 = 21 then
8491: LD_VAR 0 3
8495: PUSH
8496: LD_INT 21
8498: EQUAL
8499: IFFALSE 8509
// sPowell := true ;
8501: LD_ADDR_EXP 79
8505: PUSH
8506: LD_INT 1
8508: ST_TO_ADDR
// if p3 = 22 then
8509: LD_VAR 0 3
8513: PUSH
8514: LD_INT 22
8516: EQUAL
8517: IFFALSE 8527
// sTeleport := true ;
8519: LD_ADDR_EXP 82
8523: PUSH
8524: LD_INT 1
8526: ST_TO_ADDR
// if p3 = 23 then
8527: LD_VAR 0 3
8531: PUSH
8532: LD_INT 23
8534: EQUAL
8535: IFFALSE 8545
// sOilTower := true ;
8537: LD_ADDR_EXP 84
8541: PUSH
8542: LD_INT 1
8544: ST_TO_ADDR
// if p3 = 24 then
8545: LD_VAR 0 3
8549: PUSH
8550: LD_INT 24
8552: EQUAL
8553: IFFALSE 8563
// sShovel := true ;
8555: LD_ADDR_EXP 85
8559: PUSH
8560: LD_INT 1
8562: ST_TO_ADDR
// if p3 = 25 then
8563: LD_VAR 0 3
8567: PUSH
8568: LD_INT 25
8570: EQUAL
8571: IFFALSE 8581
// sSheik := true ;
8573: LD_ADDR_EXP 86
8577: PUSH
8578: LD_INT 1
8580: ST_TO_ADDR
// if p3 = 26 then
8581: LD_VAR 0 3
8585: PUSH
8586: LD_INT 26
8588: EQUAL
8589: IFFALSE 8599
// sEarthquake := true ;
8591: LD_ADDR_EXP 88
8595: PUSH
8596: LD_INT 1
8598: ST_TO_ADDR
// if p3 = 27 then
8599: LD_VAR 0 3
8603: PUSH
8604: LD_INT 27
8606: EQUAL
8607: IFFALSE 8617
// sAI := true ;
8609: LD_ADDR_EXP 89
8613: PUSH
8614: LD_INT 1
8616: ST_TO_ADDR
// if p3 = 28 then
8617: LD_VAR 0 3
8621: PUSH
8622: LD_INT 28
8624: EQUAL
8625: IFFALSE 8635
// sCargo := true ;
8627: LD_ADDR_EXP 92
8631: PUSH
8632: LD_INT 1
8634: ST_TO_ADDR
// if p3 = 29 then
8635: LD_VAR 0 3
8639: PUSH
8640: LD_INT 29
8642: EQUAL
8643: IFFALSE 8653
// sDLaser := true ;
8645: LD_ADDR_EXP 93
8649: PUSH
8650: LD_INT 1
8652: ST_TO_ADDR
// if p3 = 30 then
8653: LD_VAR 0 3
8657: PUSH
8658: LD_INT 30
8660: EQUAL
8661: IFFALSE 8671
// sExchange := true ;
8663: LD_ADDR_EXP 94
8667: PUSH
8668: LD_INT 1
8670: ST_TO_ADDR
// if p3 = 31 then
8671: LD_VAR 0 3
8675: PUSH
8676: LD_INT 31
8678: EQUAL
8679: IFFALSE 8689
// sFac := true ;
8681: LD_ADDR_EXP 95
8685: PUSH
8686: LD_INT 1
8688: ST_TO_ADDR
// if p3 = 32 then
8689: LD_VAR 0 3
8693: PUSH
8694: LD_INT 32
8696: EQUAL
8697: IFFALSE 8707
// sPower := true ;
8699: LD_ADDR_EXP 96
8703: PUSH
8704: LD_INT 1
8706: ST_TO_ADDR
// if p3 = 33 then
8707: LD_VAR 0 3
8711: PUSH
8712: LD_INT 33
8714: EQUAL
8715: IFFALSE 8725
// sRandom := true ;
8717: LD_ADDR_EXP 97
8721: PUSH
8722: LD_INT 1
8724: ST_TO_ADDR
// if p3 = 34 then
8725: LD_VAR 0 3
8729: PUSH
8730: LD_INT 34
8732: EQUAL
8733: IFFALSE 8743
// sShield := true ;
8735: LD_ADDR_EXP 98
8739: PUSH
8740: LD_INT 1
8742: ST_TO_ADDR
// if p3 = 35 then
8743: LD_VAR 0 3
8747: PUSH
8748: LD_INT 35
8750: EQUAL
8751: IFFALSE 8761
// sTime := true ;
8753: LD_ADDR_EXP 99
8757: PUSH
8758: LD_INT 1
8760: ST_TO_ADDR
// if p3 = 36 then
8761: LD_VAR 0 3
8765: PUSH
8766: LD_INT 36
8768: EQUAL
8769: IFFALSE 8779
// sTools := true ;
8771: LD_ADDR_EXP 100
8775: PUSH
8776: LD_INT 1
8778: ST_TO_ADDR
// if p3 = 101 then
8779: LD_VAR 0 3
8783: PUSH
8784: LD_INT 101
8786: EQUAL
8787: IFFALSE 8797
// sSold := true ;
8789: LD_ADDR_EXP 65
8793: PUSH
8794: LD_INT 1
8796: ST_TO_ADDR
// if p3 = 102 then
8797: LD_VAR 0 3
8801: PUSH
8802: LD_INT 102
8804: EQUAL
8805: IFFALSE 8815
// sDiff := true ;
8807: LD_ADDR_EXP 66
8811: PUSH
8812: LD_INT 1
8814: ST_TO_ADDR
// if p3 = 103 then
8815: LD_VAR 0 3
8819: PUSH
8820: LD_INT 103
8822: EQUAL
8823: IFFALSE 8833
// sFog := true ;
8825: LD_ADDR_EXP 69
8829: PUSH
8830: LD_INT 1
8832: ST_TO_ADDR
// if p3 = 104 then
8833: LD_VAR 0 3
8837: PUSH
8838: LD_INT 104
8840: EQUAL
8841: IFFALSE 8851
// sReset := true ;
8843: LD_ADDR_EXP 70
8847: PUSH
8848: LD_INT 1
8850: ST_TO_ADDR
// if p3 = 105 then
8851: LD_VAR 0 3
8855: PUSH
8856: LD_INT 105
8858: EQUAL
8859: IFFALSE 8869
// sSun := true ;
8861: LD_ADDR_EXP 71
8865: PUSH
8866: LD_INT 1
8868: ST_TO_ADDR
// if p3 = 106 then
8869: LD_VAR 0 3
8873: PUSH
8874: LD_INT 106
8876: EQUAL
8877: IFFALSE 8887
// sTiger := true ;
8879: LD_ADDR_EXP 67
8883: PUSH
8884: LD_INT 1
8886: ST_TO_ADDR
// if p3 = 107 then
8887: LD_VAR 0 3
8891: PUSH
8892: LD_INT 107
8894: EQUAL
8895: IFFALSE 8905
// sBomb := true ;
8897: LD_ADDR_EXP 68
8901: PUSH
8902: LD_INT 1
8904: ST_TO_ADDR
// if p3 = 108 then
8905: LD_VAR 0 3
8909: PUSH
8910: LD_INT 108
8912: EQUAL
8913: IFFALSE 8923
// sWound := true ;
8915: LD_ADDR_EXP 76
8919: PUSH
8920: LD_INT 1
8922: ST_TO_ADDR
// if p3 = 109 then
8923: LD_VAR 0 3
8927: PUSH
8928: LD_INT 109
8930: EQUAL
8931: IFFALSE 8941
// sBetray := true ;
8933: LD_ADDR_EXP 80
8937: PUSH
8938: LD_INT 1
8940: ST_TO_ADDR
// if p3 = 110 then
8941: LD_VAR 0 3
8945: PUSH
8946: LD_INT 110
8948: EQUAL
8949: IFFALSE 8959
// sContamin := true ;
8951: LD_ADDR_EXP 81
8955: PUSH
8956: LD_INT 1
8958: ST_TO_ADDR
// if p3 = 111 then
8959: LD_VAR 0 3
8963: PUSH
8964: LD_INT 111
8966: EQUAL
8967: IFFALSE 8977
// sOil := true ;
8969: LD_ADDR_EXP 83
8973: PUSH
8974: LD_INT 1
8976: ST_TO_ADDR
// if p3 = 112 then
8977: LD_VAR 0 3
8981: PUSH
8982: LD_INT 112
8984: EQUAL
8985: IFFALSE 8995
// sStu := true ;
8987: LD_ADDR_EXP 87
8991: PUSH
8992: LD_INT 1
8994: ST_TO_ADDR
// if p3 = 113 then
8995: LD_VAR 0 3
8999: PUSH
9000: LD_INT 113
9002: EQUAL
9003: IFFALSE 9013
// sBazooka := true ;
9005: LD_ADDR_EXP 90
9009: PUSH
9010: LD_INT 1
9012: ST_TO_ADDR
// if p3 = 114 then
9013: LD_VAR 0 3
9017: PUSH
9018: LD_INT 114
9020: EQUAL
9021: IFFALSE 9031
// sMortar := true ;
9023: LD_ADDR_EXP 91
9027: PUSH
9028: LD_INT 1
9030: ST_TO_ADDR
// if p3 = 115 then
9031: LD_VAR 0 3
9035: PUSH
9036: LD_INT 115
9038: EQUAL
9039: IFFALSE 9049
// sRanger := true ;
9041: LD_ADDR_EXP 101
9045: PUSH
9046: LD_INT 1
9048: ST_TO_ADDR
// if p3 = 116 then
9049: LD_VAR 0 3
9053: PUSH
9054: LD_INT 116
9056: EQUAL
9057: IFFALSE 9067
// sComputer := true ;
9059: LD_ADDR_EXP 102
9063: PUSH
9064: LD_INT 1
9066: ST_TO_ADDR
// if p3 = 117 then
9067: LD_VAR 0 3
9071: PUSH
9072: LD_INT 117
9074: EQUAL
9075: IFFALSE 9085
// s30 := true ;
9077: LD_ADDR_EXP 103
9081: PUSH
9082: LD_INT 1
9084: ST_TO_ADDR
// if p3 = 118 then
9085: LD_VAR 0 3
9089: PUSH
9090: LD_INT 118
9092: EQUAL
9093: IFFALSE 9103
// s60 := true ;
9095: LD_ADDR_EXP 104
9099: PUSH
9100: LD_INT 1
9102: ST_TO_ADDR
// end ; if p2 = 101 then
9103: LD_VAR 0 2
9107: PUSH
9108: LD_INT 101
9110: EQUAL
9111: IFFALSE 9239
// begin case p3 of 1 :
9113: LD_VAR 0 3
9117: PUSH
9118: LD_INT 1
9120: DOUBLE
9121: EQUAL
9122: IFTRUE 9126
9124: GO 9133
9126: POP
// hHackUnlimitedResources ; 2 :
9127: CALL 21337 0 0
9131: GO 9239
9133: LD_INT 2
9135: DOUBLE
9136: EQUAL
9137: IFTRUE 9141
9139: GO 9148
9141: POP
// hHackSetLevel10 ; 3 :
9142: CALL 21470 0 0
9146: GO 9239
9148: LD_INT 3
9150: DOUBLE
9151: EQUAL
9152: IFTRUE 9156
9154: GO 9163
9156: POP
// hHackSetLevel10YourUnits ; 4 :
9157: CALL 21555 0 0
9161: GO 9239
9163: LD_INT 4
9165: DOUBLE
9166: EQUAL
9167: IFTRUE 9171
9169: GO 9178
9171: POP
// hHackInvincible ; 5 :
9172: CALL 22003 0 0
9176: GO 9239
9178: LD_INT 5
9180: DOUBLE
9181: EQUAL
9182: IFTRUE 9186
9184: GO 9193
9186: POP
// hHackInvisible ; 6 :
9187: CALL 22114 0 0
9191: GO 9239
9193: LD_INT 6
9195: DOUBLE
9196: EQUAL
9197: IFTRUE 9201
9199: GO 9208
9201: POP
// hHackChangeYourSide ; 7 :
9202: CALL 22171 0 0
9206: GO 9239
9208: LD_INT 7
9210: DOUBLE
9211: EQUAL
9212: IFTRUE 9216
9214: GO 9223
9216: POP
// hHackChangeUnitSide ; 8 :
9217: CALL 22213 0 0
9221: GO 9239
9223: LD_INT 8
9225: DOUBLE
9226: EQUAL
9227: IFTRUE 9231
9229: GO 9238
9231: POP
// hHackFog ; end ;
9232: CALL 22314 0 0
9236: GO 9239
9238: POP
// end ; end ;
9239: LD_VAR 0 7
9243: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
9244: GO 9246
9246: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9247: LD_STRING initStreamRollete();
9249: PPUSH
9250: CALL_OW 559
// InitStreamMode ;
9254: CALL 9266 0 0
// DefineStreamItems ( false ) ;
9258: LD_INT 0
9260: PPUSH
9261: CALL 9730 0 1
// end ;
9265: END
// function InitStreamMode ; begin
9266: LD_INT 0
9268: PPUSH
// streamModeActive := false ;
9269: LD_ADDR_EXP 48
9273: PUSH
9274: LD_INT 0
9276: ST_TO_ADDR
// normalCounter := 36 ;
9277: LD_ADDR_EXP 49
9281: PUSH
9282: LD_INT 36
9284: ST_TO_ADDR
// hardcoreCounter := 18 ;
9285: LD_ADDR_EXP 50
9289: PUSH
9290: LD_INT 18
9292: ST_TO_ADDR
// sRocket := false ;
9293: LD_ADDR_EXP 53
9297: PUSH
9298: LD_INT 0
9300: ST_TO_ADDR
// sSpeed := false ;
9301: LD_ADDR_EXP 52
9305: PUSH
9306: LD_INT 0
9308: ST_TO_ADDR
// sEngine := false ;
9309: LD_ADDR_EXP 54
9313: PUSH
9314: LD_INT 0
9316: ST_TO_ADDR
// sSpec := false ;
9317: LD_ADDR_EXP 51
9321: PUSH
9322: LD_INT 0
9324: ST_TO_ADDR
// sLevel := false ;
9325: LD_ADDR_EXP 55
9329: PUSH
9330: LD_INT 0
9332: ST_TO_ADDR
// sArmoury := false ;
9333: LD_ADDR_EXP 56
9337: PUSH
9338: LD_INT 0
9340: ST_TO_ADDR
// sRadar := false ;
9341: LD_ADDR_EXP 57
9345: PUSH
9346: LD_INT 0
9348: ST_TO_ADDR
// sBunker := false ;
9349: LD_ADDR_EXP 58
9353: PUSH
9354: LD_INT 0
9356: ST_TO_ADDR
// sHack := false ;
9357: LD_ADDR_EXP 59
9361: PUSH
9362: LD_INT 0
9364: ST_TO_ADDR
// sFire := false ;
9365: LD_ADDR_EXP 60
9369: PUSH
9370: LD_INT 0
9372: ST_TO_ADDR
// sRefresh := false ;
9373: LD_ADDR_EXP 61
9377: PUSH
9378: LD_INT 0
9380: ST_TO_ADDR
// sExp := false ;
9381: LD_ADDR_EXP 62
9385: PUSH
9386: LD_INT 0
9388: ST_TO_ADDR
// sDepot := false ;
9389: LD_ADDR_EXP 63
9393: PUSH
9394: LD_INT 0
9396: ST_TO_ADDR
// sFlag := false ;
9397: LD_ADDR_EXP 64
9401: PUSH
9402: LD_INT 0
9404: ST_TO_ADDR
// sKamikadze := false ;
9405: LD_ADDR_EXP 72
9409: PUSH
9410: LD_INT 0
9412: ST_TO_ADDR
// sTroll := false ;
9413: LD_ADDR_EXP 73
9417: PUSH
9418: LD_INT 0
9420: ST_TO_ADDR
// sSlow := false ;
9421: LD_ADDR_EXP 74
9425: PUSH
9426: LD_INT 0
9428: ST_TO_ADDR
// sLack := false ;
9429: LD_ADDR_EXP 75
9433: PUSH
9434: LD_INT 0
9436: ST_TO_ADDR
// sTank := false ;
9437: LD_ADDR_EXP 77
9441: PUSH
9442: LD_INT 0
9444: ST_TO_ADDR
// sRemote := false ;
9445: LD_ADDR_EXP 78
9449: PUSH
9450: LD_INT 0
9452: ST_TO_ADDR
// sPowell := false ;
9453: LD_ADDR_EXP 79
9457: PUSH
9458: LD_INT 0
9460: ST_TO_ADDR
// sTeleport := false ;
9461: LD_ADDR_EXP 82
9465: PUSH
9466: LD_INT 0
9468: ST_TO_ADDR
// sOilTower := false ;
9469: LD_ADDR_EXP 84
9473: PUSH
9474: LD_INT 0
9476: ST_TO_ADDR
// sShovel := false ;
9477: LD_ADDR_EXP 85
9481: PUSH
9482: LD_INT 0
9484: ST_TO_ADDR
// sSheik := false ;
9485: LD_ADDR_EXP 86
9489: PUSH
9490: LD_INT 0
9492: ST_TO_ADDR
// sEarthquake := false ;
9493: LD_ADDR_EXP 88
9497: PUSH
9498: LD_INT 0
9500: ST_TO_ADDR
// sAI := false ;
9501: LD_ADDR_EXP 89
9505: PUSH
9506: LD_INT 0
9508: ST_TO_ADDR
// sCargo := false ;
9509: LD_ADDR_EXP 92
9513: PUSH
9514: LD_INT 0
9516: ST_TO_ADDR
// sDLaser := false ;
9517: LD_ADDR_EXP 93
9521: PUSH
9522: LD_INT 0
9524: ST_TO_ADDR
// sExchange := false ;
9525: LD_ADDR_EXP 94
9529: PUSH
9530: LD_INT 0
9532: ST_TO_ADDR
// sFac := false ;
9533: LD_ADDR_EXP 95
9537: PUSH
9538: LD_INT 0
9540: ST_TO_ADDR
// sPower := false ;
9541: LD_ADDR_EXP 96
9545: PUSH
9546: LD_INT 0
9548: ST_TO_ADDR
// sRandom := false ;
9549: LD_ADDR_EXP 97
9553: PUSH
9554: LD_INT 0
9556: ST_TO_ADDR
// sShield := false ;
9557: LD_ADDR_EXP 98
9561: PUSH
9562: LD_INT 0
9564: ST_TO_ADDR
// sTime := false ;
9565: LD_ADDR_EXP 99
9569: PUSH
9570: LD_INT 0
9572: ST_TO_ADDR
// sTools := false ;
9573: LD_ADDR_EXP 100
9577: PUSH
9578: LD_INT 0
9580: ST_TO_ADDR
// sSold := false ;
9581: LD_ADDR_EXP 65
9585: PUSH
9586: LD_INT 0
9588: ST_TO_ADDR
// sDiff := false ;
9589: LD_ADDR_EXP 66
9593: PUSH
9594: LD_INT 0
9596: ST_TO_ADDR
// sFog := false ;
9597: LD_ADDR_EXP 69
9601: PUSH
9602: LD_INT 0
9604: ST_TO_ADDR
// sReset := false ;
9605: LD_ADDR_EXP 70
9609: PUSH
9610: LD_INT 0
9612: ST_TO_ADDR
// sSun := false ;
9613: LD_ADDR_EXP 71
9617: PUSH
9618: LD_INT 0
9620: ST_TO_ADDR
// sTiger := false ;
9621: LD_ADDR_EXP 67
9625: PUSH
9626: LD_INT 0
9628: ST_TO_ADDR
// sBomb := false ;
9629: LD_ADDR_EXP 68
9633: PUSH
9634: LD_INT 0
9636: ST_TO_ADDR
// sWound := false ;
9637: LD_ADDR_EXP 76
9641: PUSH
9642: LD_INT 0
9644: ST_TO_ADDR
// sBetray := false ;
9645: LD_ADDR_EXP 80
9649: PUSH
9650: LD_INT 0
9652: ST_TO_ADDR
// sContamin := false ;
9653: LD_ADDR_EXP 81
9657: PUSH
9658: LD_INT 0
9660: ST_TO_ADDR
// sOil := false ;
9661: LD_ADDR_EXP 83
9665: PUSH
9666: LD_INT 0
9668: ST_TO_ADDR
// sStu := false ;
9669: LD_ADDR_EXP 87
9673: PUSH
9674: LD_INT 0
9676: ST_TO_ADDR
// sBazooka := false ;
9677: LD_ADDR_EXP 90
9681: PUSH
9682: LD_INT 0
9684: ST_TO_ADDR
// sMortar := false ;
9685: LD_ADDR_EXP 91
9689: PUSH
9690: LD_INT 0
9692: ST_TO_ADDR
// sRanger := false ;
9693: LD_ADDR_EXP 101
9697: PUSH
9698: LD_INT 0
9700: ST_TO_ADDR
// sComputer := false ;
9701: LD_ADDR_EXP 102
9705: PUSH
9706: LD_INT 0
9708: ST_TO_ADDR
// s30 := false ;
9709: LD_ADDR_EXP 103
9713: PUSH
9714: LD_INT 0
9716: ST_TO_ADDR
// s60 := false ;
9717: LD_ADDR_EXP 104
9721: PUSH
9722: LD_INT 0
9724: ST_TO_ADDR
// end ;
9725: LD_VAR 0 1
9729: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9730: LD_INT 0
9732: PPUSH
9733: PPUSH
9734: PPUSH
9735: PPUSH
9736: PPUSH
9737: PPUSH
9738: PPUSH
// result := [ ] ;
9739: LD_ADDR_VAR 0 2
9743: PUSH
9744: EMPTY
9745: ST_TO_ADDR
// if campaign_id = 1 then
9746: LD_OWVAR 69
9750: PUSH
9751: LD_INT 1
9753: EQUAL
9754: IFFALSE 12920
// begin case mission_number of 1 :
9756: LD_OWVAR 70
9760: PUSH
9761: LD_INT 1
9763: DOUBLE
9764: EQUAL
9765: IFTRUE 9769
9767: GO 9845
9769: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9770: LD_ADDR_VAR 0 2
9774: PUSH
9775: LD_INT 2
9777: PUSH
9778: LD_INT 4
9780: PUSH
9781: LD_INT 11
9783: PUSH
9784: LD_INT 12
9786: PUSH
9787: LD_INT 15
9789: PUSH
9790: LD_INT 16
9792: PUSH
9793: LD_INT 22
9795: PUSH
9796: LD_INT 23
9798: PUSH
9799: LD_INT 26
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: PUSH
9813: LD_INT 101
9815: PUSH
9816: LD_INT 102
9818: PUSH
9819: LD_INT 106
9821: PUSH
9822: LD_INT 116
9824: PUSH
9825: LD_INT 117
9827: PUSH
9828: LD_INT 118
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: ST_TO_ADDR
9843: GO 12918
9845: LD_INT 2
9847: DOUBLE
9848: EQUAL
9849: IFTRUE 9853
9851: GO 9937
9853: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9854: LD_ADDR_VAR 0 2
9858: PUSH
9859: LD_INT 2
9861: PUSH
9862: LD_INT 4
9864: PUSH
9865: LD_INT 11
9867: PUSH
9868: LD_INT 12
9870: PUSH
9871: LD_INT 15
9873: PUSH
9874: LD_INT 16
9876: PUSH
9877: LD_INT 22
9879: PUSH
9880: LD_INT 23
9882: PUSH
9883: LD_INT 26
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: PUSH
9897: LD_INT 101
9899: PUSH
9900: LD_INT 102
9902: PUSH
9903: LD_INT 105
9905: PUSH
9906: LD_INT 106
9908: PUSH
9909: LD_INT 108
9911: PUSH
9912: LD_INT 116
9914: PUSH
9915: LD_INT 117
9917: PUSH
9918: LD_INT 118
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: ST_TO_ADDR
9935: GO 12918
9937: LD_INT 3
9939: DOUBLE
9940: EQUAL
9941: IFTRUE 9945
9943: GO 10033
9945: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9946: LD_ADDR_VAR 0 2
9950: PUSH
9951: LD_INT 2
9953: PUSH
9954: LD_INT 4
9956: PUSH
9957: LD_INT 5
9959: PUSH
9960: LD_INT 11
9962: PUSH
9963: LD_INT 12
9965: PUSH
9966: LD_INT 15
9968: PUSH
9969: LD_INT 16
9971: PUSH
9972: LD_INT 22
9974: PUSH
9975: LD_INT 26
9977: PUSH
9978: LD_INT 36
9980: PUSH
9981: EMPTY
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: PUSH
9993: LD_INT 101
9995: PUSH
9996: LD_INT 102
9998: PUSH
9999: LD_INT 105
10001: PUSH
10002: LD_INT 106
10004: PUSH
10005: LD_INT 108
10007: PUSH
10008: LD_INT 116
10010: PUSH
10011: LD_INT 117
10013: PUSH
10014: LD_INT 118
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: ST_TO_ADDR
10031: GO 12918
10033: LD_INT 4
10035: DOUBLE
10036: EQUAL
10037: IFTRUE 10041
10039: GO 10137
10041: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10042: LD_ADDR_VAR 0 2
10046: PUSH
10047: LD_INT 2
10049: PUSH
10050: LD_INT 4
10052: PUSH
10053: LD_INT 5
10055: PUSH
10056: LD_INT 8
10058: PUSH
10059: LD_INT 11
10061: PUSH
10062: LD_INT 12
10064: PUSH
10065: LD_INT 15
10067: PUSH
10068: LD_INT 16
10070: PUSH
10071: LD_INT 22
10073: PUSH
10074: LD_INT 23
10076: PUSH
10077: LD_INT 26
10079: PUSH
10080: LD_INT 36
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: PUSH
10097: LD_INT 101
10099: PUSH
10100: LD_INT 102
10102: PUSH
10103: LD_INT 105
10105: PUSH
10106: LD_INT 106
10108: PUSH
10109: LD_INT 108
10111: PUSH
10112: LD_INT 116
10114: PUSH
10115: LD_INT 117
10117: PUSH
10118: LD_INT 118
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: PUSH
10131: EMPTY
10132: LIST
10133: LIST
10134: ST_TO_ADDR
10135: GO 12918
10137: LD_INT 5
10139: DOUBLE
10140: EQUAL
10141: IFTRUE 10145
10143: GO 10257
10145: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10146: LD_ADDR_VAR 0 2
10150: PUSH
10151: LD_INT 2
10153: PUSH
10154: LD_INT 4
10156: PUSH
10157: LD_INT 5
10159: PUSH
10160: LD_INT 6
10162: PUSH
10163: LD_INT 8
10165: PUSH
10166: LD_INT 11
10168: PUSH
10169: LD_INT 12
10171: PUSH
10172: LD_INT 15
10174: PUSH
10175: LD_INT 16
10177: PUSH
10178: LD_INT 22
10180: PUSH
10181: LD_INT 23
10183: PUSH
10184: LD_INT 25
10186: PUSH
10187: LD_INT 26
10189: PUSH
10190: LD_INT 36
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: PUSH
10209: LD_INT 101
10211: PUSH
10212: LD_INT 102
10214: PUSH
10215: LD_INT 105
10217: PUSH
10218: LD_INT 106
10220: PUSH
10221: LD_INT 108
10223: PUSH
10224: LD_INT 109
10226: PUSH
10227: LD_INT 112
10229: PUSH
10230: LD_INT 116
10232: PUSH
10233: LD_INT 117
10235: PUSH
10236: LD_INT 118
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: ST_TO_ADDR
10255: GO 12918
10257: LD_INT 6
10259: DOUBLE
10260: EQUAL
10261: IFTRUE 10265
10263: GO 10397
10265: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10266: LD_ADDR_VAR 0 2
10270: PUSH
10271: LD_INT 2
10273: PUSH
10274: LD_INT 4
10276: PUSH
10277: LD_INT 5
10279: PUSH
10280: LD_INT 6
10282: PUSH
10283: LD_INT 8
10285: PUSH
10286: LD_INT 11
10288: PUSH
10289: LD_INT 12
10291: PUSH
10292: LD_INT 15
10294: PUSH
10295: LD_INT 16
10297: PUSH
10298: LD_INT 20
10300: PUSH
10301: LD_INT 21
10303: PUSH
10304: LD_INT 22
10306: PUSH
10307: LD_INT 23
10309: PUSH
10310: LD_INT 25
10312: PUSH
10313: LD_INT 26
10315: PUSH
10316: LD_INT 30
10318: PUSH
10319: LD_INT 31
10321: PUSH
10322: LD_INT 32
10324: PUSH
10325: LD_INT 36
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: PUSH
10349: LD_INT 101
10351: PUSH
10352: LD_INT 102
10354: PUSH
10355: LD_INT 105
10357: PUSH
10358: LD_INT 106
10360: PUSH
10361: LD_INT 108
10363: PUSH
10364: LD_INT 109
10366: PUSH
10367: LD_INT 112
10369: PUSH
10370: LD_INT 116
10372: PUSH
10373: LD_INT 117
10375: PUSH
10376: LD_INT 118
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: ST_TO_ADDR
10395: GO 12918
10397: LD_INT 7
10399: DOUBLE
10400: EQUAL
10401: IFTRUE 10405
10403: GO 10517
10405: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10406: LD_ADDR_VAR 0 2
10410: PUSH
10411: LD_INT 2
10413: PUSH
10414: LD_INT 4
10416: PUSH
10417: LD_INT 5
10419: PUSH
10420: LD_INT 7
10422: PUSH
10423: LD_INT 11
10425: PUSH
10426: LD_INT 12
10428: PUSH
10429: LD_INT 15
10431: PUSH
10432: LD_INT 16
10434: PUSH
10435: LD_INT 20
10437: PUSH
10438: LD_INT 21
10440: PUSH
10441: LD_INT 22
10443: PUSH
10444: LD_INT 23
10446: PUSH
10447: LD_INT 25
10449: PUSH
10450: LD_INT 26
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: PUSH
10469: LD_INT 101
10471: PUSH
10472: LD_INT 102
10474: PUSH
10475: LD_INT 103
10477: PUSH
10478: LD_INT 105
10480: PUSH
10481: LD_INT 106
10483: PUSH
10484: LD_INT 108
10486: PUSH
10487: LD_INT 112
10489: PUSH
10490: LD_INT 116
10492: PUSH
10493: LD_INT 117
10495: PUSH
10496: LD_INT 118
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: ST_TO_ADDR
10515: GO 12918
10517: LD_INT 8
10519: DOUBLE
10520: EQUAL
10521: IFTRUE 10525
10523: GO 10665
10525: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10526: LD_ADDR_VAR 0 2
10530: PUSH
10531: LD_INT 2
10533: PUSH
10534: LD_INT 4
10536: PUSH
10537: LD_INT 5
10539: PUSH
10540: LD_INT 6
10542: PUSH
10543: LD_INT 7
10545: PUSH
10546: LD_INT 8
10548: PUSH
10549: LD_INT 11
10551: PUSH
10552: LD_INT 12
10554: PUSH
10555: LD_INT 15
10557: PUSH
10558: LD_INT 16
10560: PUSH
10561: LD_INT 20
10563: PUSH
10564: LD_INT 21
10566: PUSH
10567: LD_INT 22
10569: PUSH
10570: LD_INT 23
10572: PUSH
10573: LD_INT 25
10575: PUSH
10576: LD_INT 26
10578: PUSH
10579: LD_INT 30
10581: PUSH
10582: LD_INT 31
10584: PUSH
10585: LD_INT 32
10587: PUSH
10588: LD_INT 36
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: PUSH
10613: LD_INT 101
10615: PUSH
10616: LD_INT 102
10618: PUSH
10619: LD_INT 103
10621: PUSH
10622: LD_INT 105
10624: PUSH
10625: LD_INT 106
10627: PUSH
10628: LD_INT 108
10630: PUSH
10631: LD_INT 109
10633: PUSH
10634: LD_INT 112
10636: PUSH
10637: LD_INT 116
10639: PUSH
10640: LD_INT 117
10642: PUSH
10643: LD_INT 118
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: ST_TO_ADDR
10663: GO 12918
10665: LD_INT 9
10667: DOUBLE
10668: EQUAL
10669: IFTRUE 10673
10671: GO 10821
10673: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10674: LD_ADDR_VAR 0 2
10678: PUSH
10679: LD_INT 2
10681: PUSH
10682: LD_INT 4
10684: PUSH
10685: LD_INT 5
10687: PUSH
10688: LD_INT 6
10690: PUSH
10691: LD_INT 7
10693: PUSH
10694: LD_INT 8
10696: PUSH
10697: LD_INT 11
10699: PUSH
10700: LD_INT 12
10702: PUSH
10703: LD_INT 15
10705: PUSH
10706: LD_INT 16
10708: PUSH
10709: LD_INT 20
10711: PUSH
10712: LD_INT 21
10714: PUSH
10715: LD_INT 22
10717: PUSH
10718: LD_INT 23
10720: PUSH
10721: LD_INT 25
10723: PUSH
10724: LD_INT 26
10726: PUSH
10727: LD_INT 28
10729: PUSH
10730: LD_INT 30
10732: PUSH
10733: LD_INT 31
10735: PUSH
10736: LD_INT 32
10738: PUSH
10739: LD_INT 36
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: PUSH
10765: LD_INT 101
10767: PUSH
10768: LD_INT 102
10770: PUSH
10771: LD_INT 103
10773: PUSH
10774: LD_INT 105
10776: PUSH
10777: LD_INT 106
10779: PUSH
10780: LD_INT 108
10782: PUSH
10783: LD_INT 109
10785: PUSH
10786: LD_INT 112
10788: PUSH
10789: LD_INT 114
10791: PUSH
10792: LD_INT 116
10794: PUSH
10795: LD_INT 117
10797: PUSH
10798: LD_INT 118
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: PUSH
10815: EMPTY
10816: LIST
10817: LIST
10818: ST_TO_ADDR
10819: GO 12918
10821: LD_INT 10
10823: DOUBLE
10824: EQUAL
10825: IFTRUE 10829
10827: GO 11025
10829: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10830: LD_ADDR_VAR 0 2
10834: PUSH
10835: LD_INT 2
10837: PUSH
10838: LD_INT 4
10840: PUSH
10841: LD_INT 5
10843: PUSH
10844: LD_INT 6
10846: PUSH
10847: LD_INT 7
10849: PUSH
10850: LD_INT 8
10852: PUSH
10853: LD_INT 9
10855: PUSH
10856: LD_INT 10
10858: PUSH
10859: LD_INT 11
10861: PUSH
10862: LD_INT 12
10864: PUSH
10865: LD_INT 13
10867: PUSH
10868: LD_INT 14
10870: PUSH
10871: LD_INT 15
10873: PUSH
10874: LD_INT 16
10876: PUSH
10877: LD_INT 17
10879: PUSH
10880: LD_INT 18
10882: PUSH
10883: LD_INT 19
10885: PUSH
10886: LD_INT 20
10888: PUSH
10889: LD_INT 21
10891: PUSH
10892: LD_INT 22
10894: PUSH
10895: LD_INT 23
10897: PUSH
10898: LD_INT 24
10900: PUSH
10901: LD_INT 25
10903: PUSH
10904: LD_INT 26
10906: PUSH
10907: LD_INT 28
10909: PUSH
10910: LD_INT 30
10912: PUSH
10913: LD_INT 31
10915: PUSH
10916: LD_INT 32
10918: PUSH
10919: LD_INT 36
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 101
10955: PUSH
10956: LD_INT 102
10958: PUSH
10959: LD_INT 103
10961: PUSH
10962: LD_INT 104
10964: PUSH
10965: LD_INT 105
10967: PUSH
10968: LD_INT 106
10970: PUSH
10971: LD_INT 107
10973: PUSH
10974: LD_INT 108
10976: PUSH
10977: LD_INT 109
10979: PUSH
10980: LD_INT 110
10982: PUSH
10983: LD_INT 111
10985: PUSH
10986: LD_INT 112
10988: PUSH
10989: LD_INT 114
10991: PUSH
10992: LD_INT 116
10994: PUSH
10995: LD_INT 117
10997: PUSH
10998: LD_INT 118
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: ST_TO_ADDR
11023: GO 12918
11025: LD_INT 11
11027: DOUBLE
11028: EQUAL
11029: IFTRUE 11033
11031: GO 11237
11033: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11034: LD_ADDR_VAR 0 2
11038: PUSH
11039: LD_INT 2
11041: PUSH
11042: LD_INT 3
11044: PUSH
11045: LD_INT 4
11047: PUSH
11048: LD_INT 5
11050: PUSH
11051: LD_INT 6
11053: PUSH
11054: LD_INT 7
11056: PUSH
11057: LD_INT 8
11059: PUSH
11060: LD_INT 9
11062: PUSH
11063: LD_INT 10
11065: PUSH
11066: LD_INT 11
11068: PUSH
11069: LD_INT 12
11071: PUSH
11072: LD_INT 13
11074: PUSH
11075: LD_INT 14
11077: PUSH
11078: LD_INT 15
11080: PUSH
11081: LD_INT 16
11083: PUSH
11084: LD_INT 17
11086: PUSH
11087: LD_INT 18
11089: PUSH
11090: LD_INT 19
11092: PUSH
11093: LD_INT 20
11095: PUSH
11096: LD_INT 21
11098: PUSH
11099: LD_INT 22
11101: PUSH
11102: LD_INT 23
11104: PUSH
11105: LD_INT 24
11107: PUSH
11108: LD_INT 25
11110: PUSH
11111: LD_INT 26
11113: PUSH
11114: LD_INT 28
11116: PUSH
11117: LD_INT 30
11119: PUSH
11120: LD_INT 31
11122: PUSH
11123: LD_INT 32
11125: PUSH
11126: LD_INT 34
11128: PUSH
11129: LD_INT 36
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: PUSH
11165: LD_INT 101
11167: PUSH
11168: LD_INT 102
11170: PUSH
11171: LD_INT 103
11173: PUSH
11174: LD_INT 104
11176: PUSH
11177: LD_INT 105
11179: PUSH
11180: LD_INT 106
11182: PUSH
11183: LD_INT 107
11185: PUSH
11186: LD_INT 108
11188: PUSH
11189: LD_INT 109
11191: PUSH
11192: LD_INT 110
11194: PUSH
11195: LD_INT 111
11197: PUSH
11198: LD_INT 112
11200: PUSH
11201: LD_INT 114
11203: PUSH
11204: LD_INT 116
11206: PUSH
11207: LD_INT 117
11209: PUSH
11210: LD_INT 118
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: ST_TO_ADDR
11235: GO 12918
11237: LD_INT 12
11239: DOUBLE
11240: EQUAL
11241: IFTRUE 11245
11243: GO 11465
11245: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11246: LD_ADDR_VAR 0 2
11250: PUSH
11251: LD_INT 1
11253: PUSH
11254: LD_INT 2
11256: PUSH
11257: LD_INT 3
11259: PUSH
11260: LD_INT 4
11262: PUSH
11263: LD_INT 5
11265: PUSH
11266: LD_INT 6
11268: PUSH
11269: LD_INT 7
11271: PUSH
11272: LD_INT 8
11274: PUSH
11275: LD_INT 9
11277: PUSH
11278: LD_INT 10
11280: PUSH
11281: LD_INT 11
11283: PUSH
11284: LD_INT 12
11286: PUSH
11287: LD_INT 13
11289: PUSH
11290: LD_INT 14
11292: PUSH
11293: LD_INT 15
11295: PUSH
11296: LD_INT 16
11298: PUSH
11299: LD_INT 17
11301: PUSH
11302: LD_INT 18
11304: PUSH
11305: LD_INT 19
11307: PUSH
11308: LD_INT 20
11310: PUSH
11311: LD_INT 21
11313: PUSH
11314: LD_INT 22
11316: PUSH
11317: LD_INT 23
11319: PUSH
11320: LD_INT 24
11322: PUSH
11323: LD_INT 25
11325: PUSH
11326: LD_INT 26
11328: PUSH
11329: LD_INT 27
11331: PUSH
11332: LD_INT 28
11334: PUSH
11335: LD_INT 30
11337: PUSH
11338: LD_INT 31
11340: PUSH
11341: LD_INT 32
11343: PUSH
11344: LD_INT 33
11346: PUSH
11347: LD_INT 34
11349: PUSH
11350: LD_INT 36
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 101
11391: PUSH
11392: LD_INT 102
11394: PUSH
11395: LD_INT 103
11397: PUSH
11398: LD_INT 104
11400: PUSH
11401: LD_INT 105
11403: PUSH
11404: LD_INT 106
11406: PUSH
11407: LD_INT 107
11409: PUSH
11410: LD_INT 108
11412: PUSH
11413: LD_INT 109
11415: PUSH
11416: LD_INT 110
11418: PUSH
11419: LD_INT 111
11421: PUSH
11422: LD_INT 112
11424: PUSH
11425: LD_INT 113
11427: PUSH
11428: LD_INT 114
11430: PUSH
11431: LD_INT 116
11433: PUSH
11434: LD_INT 117
11436: PUSH
11437: LD_INT 118
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: ST_TO_ADDR
11463: GO 12918
11465: LD_INT 13
11467: DOUBLE
11468: EQUAL
11469: IFTRUE 11473
11471: GO 11681
11473: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11474: LD_ADDR_VAR 0 2
11478: PUSH
11479: LD_INT 1
11481: PUSH
11482: LD_INT 2
11484: PUSH
11485: LD_INT 3
11487: PUSH
11488: LD_INT 4
11490: PUSH
11491: LD_INT 5
11493: PUSH
11494: LD_INT 8
11496: PUSH
11497: LD_INT 9
11499: PUSH
11500: LD_INT 10
11502: PUSH
11503: LD_INT 11
11505: PUSH
11506: LD_INT 12
11508: PUSH
11509: LD_INT 14
11511: PUSH
11512: LD_INT 15
11514: PUSH
11515: LD_INT 16
11517: PUSH
11518: LD_INT 17
11520: PUSH
11521: LD_INT 18
11523: PUSH
11524: LD_INT 19
11526: PUSH
11527: LD_INT 20
11529: PUSH
11530: LD_INT 21
11532: PUSH
11533: LD_INT 22
11535: PUSH
11536: LD_INT 23
11538: PUSH
11539: LD_INT 24
11541: PUSH
11542: LD_INT 25
11544: PUSH
11545: LD_INT 26
11547: PUSH
11548: LD_INT 27
11550: PUSH
11551: LD_INT 28
11553: PUSH
11554: LD_INT 30
11556: PUSH
11557: LD_INT 31
11559: PUSH
11560: LD_INT 32
11562: PUSH
11563: LD_INT 33
11565: PUSH
11566: LD_INT 34
11568: PUSH
11569: LD_INT 36
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: PUSH
11605: LD_INT 101
11607: PUSH
11608: LD_INT 102
11610: PUSH
11611: LD_INT 103
11613: PUSH
11614: LD_INT 104
11616: PUSH
11617: LD_INT 105
11619: PUSH
11620: LD_INT 106
11622: PUSH
11623: LD_INT 107
11625: PUSH
11626: LD_INT 108
11628: PUSH
11629: LD_INT 109
11631: PUSH
11632: LD_INT 110
11634: PUSH
11635: LD_INT 111
11637: PUSH
11638: LD_INT 112
11640: PUSH
11641: LD_INT 113
11643: PUSH
11644: LD_INT 114
11646: PUSH
11647: LD_INT 116
11649: PUSH
11650: LD_INT 117
11652: PUSH
11653: LD_INT 118
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: ST_TO_ADDR
11679: GO 12918
11681: LD_INT 14
11683: DOUBLE
11684: EQUAL
11685: IFTRUE 11689
11687: GO 11913
11689: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11690: LD_ADDR_VAR 0 2
11694: PUSH
11695: LD_INT 1
11697: PUSH
11698: LD_INT 2
11700: PUSH
11701: LD_INT 3
11703: PUSH
11704: LD_INT 4
11706: PUSH
11707: LD_INT 5
11709: PUSH
11710: LD_INT 6
11712: PUSH
11713: LD_INT 7
11715: PUSH
11716: LD_INT 8
11718: PUSH
11719: LD_INT 9
11721: PUSH
11722: LD_INT 10
11724: PUSH
11725: LD_INT 11
11727: PUSH
11728: LD_INT 12
11730: PUSH
11731: LD_INT 13
11733: PUSH
11734: LD_INT 14
11736: PUSH
11737: LD_INT 15
11739: PUSH
11740: LD_INT 16
11742: PUSH
11743: LD_INT 17
11745: PUSH
11746: LD_INT 18
11748: PUSH
11749: LD_INT 19
11751: PUSH
11752: LD_INT 20
11754: PUSH
11755: LD_INT 21
11757: PUSH
11758: LD_INT 22
11760: PUSH
11761: LD_INT 23
11763: PUSH
11764: LD_INT 24
11766: PUSH
11767: LD_INT 25
11769: PUSH
11770: LD_INT 26
11772: PUSH
11773: LD_INT 27
11775: PUSH
11776: LD_INT 28
11778: PUSH
11779: LD_INT 29
11781: PUSH
11782: LD_INT 30
11784: PUSH
11785: LD_INT 31
11787: PUSH
11788: LD_INT 32
11790: PUSH
11791: LD_INT 33
11793: PUSH
11794: LD_INT 34
11796: PUSH
11797: LD_INT 36
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: PUSH
11837: LD_INT 101
11839: PUSH
11840: LD_INT 102
11842: PUSH
11843: LD_INT 103
11845: PUSH
11846: LD_INT 104
11848: PUSH
11849: LD_INT 105
11851: PUSH
11852: LD_INT 106
11854: PUSH
11855: LD_INT 107
11857: PUSH
11858: LD_INT 108
11860: PUSH
11861: LD_INT 109
11863: PUSH
11864: LD_INT 110
11866: PUSH
11867: LD_INT 111
11869: PUSH
11870: LD_INT 112
11872: PUSH
11873: LD_INT 113
11875: PUSH
11876: LD_INT 114
11878: PUSH
11879: LD_INT 116
11881: PUSH
11882: LD_INT 117
11884: PUSH
11885: LD_INT 118
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: ST_TO_ADDR
11911: GO 12918
11913: LD_INT 15
11915: DOUBLE
11916: EQUAL
11917: IFTRUE 11921
11919: GO 12145
11921: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11922: LD_ADDR_VAR 0 2
11926: PUSH
11927: LD_INT 1
11929: PUSH
11930: LD_INT 2
11932: PUSH
11933: LD_INT 3
11935: PUSH
11936: LD_INT 4
11938: PUSH
11939: LD_INT 5
11941: PUSH
11942: LD_INT 6
11944: PUSH
11945: LD_INT 7
11947: PUSH
11948: LD_INT 8
11950: PUSH
11951: LD_INT 9
11953: PUSH
11954: LD_INT 10
11956: PUSH
11957: LD_INT 11
11959: PUSH
11960: LD_INT 12
11962: PUSH
11963: LD_INT 13
11965: PUSH
11966: LD_INT 14
11968: PUSH
11969: LD_INT 15
11971: PUSH
11972: LD_INT 16
11974: PUSH
11975: LD_INT 17
11977: PUSH
11978: LD_INT 18
11980: PUSH
11981: LD_INT 19
11983: PUSH
11984: LD_INT 20
11986: PUSH
11987: LD_INT 21
11989: PUSH
11990: LD_INT 22
11992: PUSH
11993: LD_INT 23
11995: PUSH
11996: LD_INT 24
11998: PUSH
11999: LD_INT 25
12001: PUSH
12002: LD_INT 26
12004: PUSH
12005: LD_INT 27
12007: PUSH
12008: LD_INT 28
12010: PUSH
12011: LD_INT 29
12013: PUSH
12014: LD_INT 30
12016: PUSH
12017: LD_INT 31
12019: PUSH
12020: LD_INT 32
12022: PUSH
12023: LD_INT 33
12025: PUSH
12026: LD_INT 34
12028: PUSH
12029: LD_INT 36
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: PUSH
12069: LD_INT 101
12071: PUSH
12072: LD_INT 102
12074: PUSH
12075: LD_INT 103
12077: PUSH
12078: LD_INT 104
12080: PUSH
12081: LD_INT 105
12083: PUSH
12084: LD_INT 106
12086: PUSH
12087: LD_INT 107
12089: PUSH
12090: LD_INT 108
12092: PUSH
12093: LD_INT 109
12095: PUSH
12096: LD_INT 110
12098: PUSH
12099: LD_INT 111
12101: PUSH
12102: LD_INT 112
12104: PUSH
12105: LD_INT 113
12107: PUSH
12108: LD_INT 114
12110: PUSH
12111: LD_INT 116
12113: PUSH
12114: LD_INT 117
12116: PUSH
12117: LD_INT 118
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: ST_TO_ADDR
12143: GO 12918
12145: LD_INT 16
12147: DOUBLE
12148: EQUAL
12149: IFTRUE 12153
12151: GO 12289
12153: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12154: LD_ADDR_VAR 0 2
12158: PUSH
12159: LD_INT 2
12161: PUSH
12162: LD_INT 4
12164: PUSH
12165: LD_INT 5
12167: PUSH
12168: LD_INT 7
12170: PUSH
12171: LD_INT 11
12173: PUSH
12174: LD_INT 12
12176: PUSH
12177: LD_INT 15
12179: PUSH
12180: LD_INT 16
12182: PUSH
12183: LD_INT 20
12185: PUSH
12186: LD_INT 21
12188: PUSH
12189: LD_INT 22
12191: PUSH
12192: LD_INT 23
12194: PUSH
12195: LD_INT 25
12197: PUSH
12198: LD_INT 26
12200: PUSH
12201: LD_INT 30
12203: PUSH
12204: LD_INT 31
12206: PUSH
12207: LD_INT 32
12209: PUSH
12210: LD_INT 33
12212: PUSH
12213: LD_INT 34
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: PUSH
12237: LD_INT 101
12239: PUSH
12240: LD_INT 102
12242: PUSH
12243: LD_INT 103
12245: PUSH
12246: LD_INT 106
12248: PUSH
12249: LD_INT 108
12251: PUSH
12252: LD_INT 112
12254: PUSH
12255: LD_INT 113
12257: PUSH
12258: LD_INT 114
12260: PUSH
12261: LD_INT 116
12263: PUSH
12264: LD_INT 117
12266: PUSH
12267: LD_INT 118
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: ST_TO_ADDR
12287: GO 12918
12289: LD_INT 17
12291: DOUBLE
12292: EQUAL
12293: IFTRUE 12297
12295: GO 12521
12297: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12298: LD_ADDR_VAR 0 2
12302: PUSH
12303: LD_INT 1
12305: PUSH
12306: LD_INT 2
12308: PUSH
12309: LD_INT 3
12311: PUSH
12312: LD_INT 4
12314: PUSH
12315: LD_INT 5
12317: PUSH
12318: LD_INT 6
12320: PUSH
12321: LD_INT 7
12323: PUSH
12324: LD_INT 8
12326: PUSH
12327: LD_INT 9
12329: PUSH
12330: LD_INT 10
12332: PUSH
12333: LD_INT 11
12335: PUSH
12336: LD_INT 12
12338: PUSH
12339: LD_INT 13
12341: PUSH
12342: LD_INT 14
12344: PUSH
12345: LD_INT 15
12347: PUSH
12348: LD_INT 16
12350: PUSH
12351: LD_INT 17
12353: PUSH
12354: LD_INT 18
12356: PUSH
12357: LD_INT 19
12359: PUSH
12360: LD_INT 20
12362: PUSH
12363: LD_INT 21
12365: PUSH
12366: LD_INT 22
12368: PUSH
12369: LD_INT 23
12371: PUSH
12372: LD_INT 24
12374: PUSH
12375: LD_INT 25
12377: PUSH
12378: LD_INT 26
12380: PUSH
12381: LD_INT 27
12383: PUSH
12384: LD_INT 28
12386: PUSH
12387: LD_INT 29
12389: PUSH
12390: LD_INT 30
12392: PUSH
12393: LD_INT 31
12395: PUSH
12396: LD_INT 32
12398: PUSH
12399: LD_INT 33
12401: PUSH
12402: LD_INT 34
12404: PUSH
12405: LD_INT 36
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: PUSH
12445: LD_INT 101
12447: PUSH
12448: LD_INT 102
12450: PUSH
12451: LD_INT 103
12453: PUSH
12454: LD_INT 104
12456: PUSH
12457: LD_INT 105
12459: PUSH
12460: LD_INT 106
12462: PUSH
12463: LD_INT 107
12465: PUSH
12466: LD_INT 108
12468: PUSH
12469: LD_INT 109
12471: PUSH
12472: LD_INT 110
12474: PUSH
12475: LD_INT 111
12477: PUSH
12478: LD_INT 112
12480: PUSH
12481: LD_INT 113
12483: PUSH
12484: LD_INT 114
12486: PUSH
12487: LD_INT 116
12489: PUSH
12490: LD_INT 117
12492: PUSH
12493: LD_INT 118
12495: PUSH
12496: EMPTY
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: ST_TO_ADDR
12519: GO 12918
12521: LD_INT 18
12523: DOUBLE
12524: EQUAL
12525: IFTRUE 12529
12527: GO 12677
12529: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12530: LD_ADDR_VAR 0 2
12534: PUSH
12535: LD_INT 2
12537: PUSH
12538: LD_INT 4
12540: PUSH
12541: LD_INT 5
12543: PUSH
12544: LD_INT 7
12546: PUSH
12547: LD_INT 11
12549: PUSH
12550: LD_INT 12
12552: PUSH
12553: LD_INT 15
12555: PUSH
12556: LD_INT 16
12558: PUSH
12559: LD_INT 20
12561: PUSH
12562: LD_INT 21
12564: PUSH
12565: LD_INT 22
12567: PUSH
12568: LD_INT 23
12570: PUSH
12571: LD_INT 25
12573: PUSH
12574: LD_INT 26
12576: PUSH
12577: LD_INT 30
12579: PUSH
12580: LD_INT 31
12582: PUSH
12583: LD_INT 32
12585: PUSH
12586: LD_INT 33
12588: PUSH
12589: LD_INT 34
12591: PUSH
12592: LD_INT 35
12594: PUSH
12595: LD_INT 36
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: PUSH
12621: LD_INT 101
12623: PUSH
12624: LD_INT 102
12626: PUSH
12627: LD_INT 103
12629: PUSH
12630: LD_INT 106
12632: PUSH
12633: LD_INT 108
12635: PUSH
12636: LD_INT 112
12638: PUSH
12639: LD_INT 113
12641: PUSH
12642: LD_INT 114
12644: PUSH
12645: LD_INT 115
12647: PUSH
12648: LD_INT 116
12650: PUSH
12651: LD_INT 117
12653: PUSH
12654: LD_INT 118
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: ST_TO_ADDR
12675: GO 12918
12677: LD_INT 19
12679: DOUBLE
12680: EQUAL
12681: IFTRUE 12685
12683: GO 12917
12685: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12686: LD_ADDR_VAR 0 2
12690: PUSH
12691: LD_INT 1
12693: PUSH
12694: LD_INT 2
12696: PUSH
12697: LD_INT 3
12699: PUSH
12700: LD_INT 4
12702: PUSH
12703: LD_INT 5
12705: PUSH
12706: LD_INT 6
12708: PUSH
12709: LD_INT 7
12711: PUSH
12712: LD_INT 8
12714: PUSH
12715: LD_INT 9
12717: PUSH
12718: LD_INT 10
12720: PUSH
12721: LD_INT 11
12723: PUSH
12724: LD_INT 12
12726: PUSH
12727: LD_INT 13
12729: PUSH
12730: LD_INT 14
12732: PUSH
12733: LD_INT 15
12735: PUSH
12736: LD_INT 16
12738: PUSH
12739: LD_INT 17
12741: PUSH
12742: LD_INT 18
12744: PUSH
12745: LD_INT 19
12747: PUSH
12748: LD_INT 20
12750: PUSH
12751: LD_INT 21
12753: PUSH
12754: LD_INT 22
12756: PUSH
12757: LD_INT 23
12759: PUSH
12760: LD_INT 24
12762: PUSH
12763: LD_INT 25
12765: PUSH
12766: LD_INT 26
12768: PUSH
12769: LD_INT 27
12771: PUSH
12772: LD_INT 28
12774: PUSH
12775: LD_INT 29
12777: PUSH
12778: LD_INT 30
12780: PUSH
12781: LD_INT 31
12783: PUSH
12784: LD_INT 32
12786: PUSH
12787: LD_INT 33
12789: PUSH
12790: LD_INT 34
12792: PUSH
12793: LD_INT 35
12795: PUSH
12796: LD_INT 36
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: PUSH
12837: LD_INT 101
12839: PUSH
12840: LD_INT 102
12842: PUSH
12843: LD_INT 103
12845: PUSH
12846: LD_INT 104
12848: PUSH
12849: LD_INT 105
12851: PUSH
12852: LD_INT 106
12854: PUSH
12855: LD_INT 107
12857: PUSH
12858: LD_INT 108
12860: PUSH
12861: LD_INT 109
12863: PUSH
12864: LD_INT 110
12866: PUSH
12867: LD_INT 111
12869: PUSH
12870: LD_INT 112
12872: PUSH
12873: LD_INT 113
12875: PUSH
12876: LD_INT 114
12878: PUSH
12879: LD_INT 115
12881: PUSH
12882: LD_INT 116
12884: PUSH
12885: LD_INT 117
12887: PUSH
12888: LD_INT 118
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: ST_TO_ADDR
12915: GO 12918
12917: POP
// end else
12918: GO 13149
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12920: LD_ADDR_VAR 0 2
12924: PUSH
12925: LD_INT 1
12927: PUSH
12928: LD_INT 2
12930: PUSH
12931: LD_INT 3
12933: PUSH
12934: LD_INT 4
12936: PUSH
12937: LD_INT 5
12939: PUSH
12940: LD_INT 6
12942: PUSH
12943: LD_INT 7
12945: PUSH
12946: LD_INT 8
12948: PUSH
12949: LD_INT 9
12951: PUSH
12952: LD_INT 10
12954: PUSH
12955: LD_INT 11
12957: PUSH
12958: LD_INT 12
12960: PUSH
12961: LD_INT 13
12963: PUSH
12964: LD_INT 14
12966: PUSH
12967: LD_INT 15
12969: PUSH
12970: LD_INT 16
12972: PUSH
12973: LD_INT 17
12975: PUSH
12976: LD_INT 18
12978: PUSH
12979: LD_INT 19
12981: PUSH
12982: LD_INT 20
12984: PUSH
12985: LD_INT 21
12987: PUSH
12988: LD_INT 22
12990: PUSH
12991: LD_INT 23
12993: PUSH
12994: LD_INT 24
12996: PUSH
12997: LD_INT 25
12999: PUSH
13000: LD_INT 26
13002: PUSH
13003: LD_INT 27
13005: PUSH
13006: LD_INT 28
13008: PUSH
13009: LD_INT 29
13011: PUSH
13012: LD_INT 30
13014: PUSH
13015: LD_INT 31
13017: PUSH
13018: LD_INT 32
13020: PUSH
13021: LD_INT 33
13023: PUSH
13024: LD_INT 34
13026: PUSH
13027: LD_INT 35
13029: PUSH
13030: LD_INT 36
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: PUSH
13071: LD_INT 101
13073: PUSH
13074: LD_INT 102
13076: PUSH
13077: LD_INT 103
13079: PUSH
13080: LD_INT 104
13082: PUSH
13083: LD_INT 105
13085: PUSH
13086: LD_INT 106
13088: PUSH
13089: LD_INT 107
13091: PUSH
13092: LD_INT 108
13094: PUSH
13095: LD_INT 109
13097: PUSH
13098: LD_INT 110
13100: PUSH
13101: LD_INT 111
13103: PUSH
13104: LD_INT 112
13106: PUSH
13107: LD_INT 113
13109: PUSH
13110: LD_INT 114
13112: PUSH
13113: LD_INT 115
13115: PUSH
13116: LD_INT 116
13118: PUSH
13119: LD_INT 117
13121: PUSH
13122: LD_INT 118
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: ST_TO_ADDR
// if result then
13149: LD_VAR 0 2
13153: IFFALSE 13939
// begin normal :=  ;
13155: LD_ADDR_VAR 0 5
13159: PUSH
13160: LD_STRING 
13162: ST_TO_ADDR
// hardcore :=  ;
13163: LD_ADDR_VAR 0 6
13167: PUSH
13168: LD_STRING 
13170: ST_TO_ADDR
// active :=  ;
13171: LD_ADDR_VAR 0 7
13175: PUSH
13176: LD_STRING 
13178: ST_TO_ADDR
// for i = 1 to normalCounter do
13179: LD_ADDR_VAR 0 8
13183: PUSH
13184: DOUBLE
13185: LD_INT 1
13187: DEC
13188: ST_TO_ADDR
13189: LD_EXP 49
13193: PUSH
13194: FOR_TO
13195: IFFALSE 13296
// begin tmp := 0 ;
13197: LD_ADDR_VAR 0 3
13201: PUSH
13202: LD_STRING 0
13204: ST_TO_ADDR
// if result [ 1 ] then
13205: LD_VAR 0 2
13209: PUSH
13210: LD_INT 1
13212: ARRAY
13213: IFFALSE 13278
// if result [ 1 ] [ 1 ] = i then
13215: LD_VAR 0 2
13219: PUSH
13220: LD_INT 1
13222: ARRAY
13223: PUSH
13224: LD_INT 1
13226: ARRAY
13227: PUSH
13228: LD_VAR 0 8
13232: EQUAL
13233: IFFALSE 13278
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13235: LD_ADDR_VAR 0 2
13239: PUSH
13240: LD_VAR 0 2
13244: PPUSH
13245: LD_INT 1
13247: PPUSH
13248: LD_VAR 0 2
13252: PUSH
13253: LD_INT 1
13255: ARRAY
13256: PPUSH
13257: LD_INT 1
13259: PPUSH
13260: CALL_OW 3
13264: PPUSH
13265: CALL_OW 1
13269: ST_TO_ADDR
// tmp := 1 ;
13270: LD_ADDR_VAR 0 3
13274: PUSH
13275: LD_STRING 1
13277: ST_TO_ADDR
// end ; normal := normal & tmp ;
13278: LD_ADDR_VAR 0 5
13282: PUSH
13283: LD_VAR 0 5
13287: PUSH
13288: LD_VAR 0 3
13292: STR
13293: ST_TO_ADDR
// end ;
13294: GO 13194
13296: POP
13297: POP
// for i = 1 to hardcoreCounter do
13298: LD_ADDR_VAR 0 8
13302: PUSH
13303: DOUBLE
13304: LD_INT 1
13306: DEC
13307: ST_TO_ADDR
13308: LD_EXP 50
13312: PUSH
13313: FOR_TO
13314: IFFALSE 13419
// begin tmp := 0 ;
13316: LD_ADDR_VAR 0 3
13320: PUSH
13321: LD_STRING 0
13323: ST_TO_ADDR
// if result [ 2 ] then
13324: LD_VAR 0 2
13328: PUSH
13329: LD_INT 2
13331: ARRAY
13332: IFFALSE 13401
// if result [ 2 ] [ 1 ] = 100 + i then
13334: LD_VAR 0 2
13338: PUSH
13339: LD_INT 2
13341: ARRAY
13342: PUSH
13343: LD_INT 1
13345: ARRAY
13346: PUSH
13347: LD_INT 100
13349: PUSH
13350: LD_VAR 0 8
13354: PLUS
13355: EQUAL
13356: IFFALSE 13401
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13358: LD_ADDR_VAR 0 2
13362: PUSH
13363: LD_VAR 0 2
13367: PPUSH
13368: LD_INT 2
13370: PPUSH
13371: LD_VAR 0 2
13375: PUSH
13376: LD_INT 2
13378: ARRAY
13379: PPUSH
13380: LD_INT 1
13382: PPUSH
13383: CALL_OW 3
13387: PPUSH
13388: CALL_OW 1
13392: ST_TO_ADDR
// tmp := 1 ;
13393: LD_ADDR_VAR 0 3
13397: PUSH
13398: LD_STRING 1
13400: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13401: LD_ADDR_VAR 0 6
13405: PUSH
13406: LD_VAR 0 6
13410: PUSH
13411: LD_VAR 0 3
13415: STR
13416: ST_TO_ADDR
// end ;
13417: GO 13313
13419: POP
13420: POP
// if isGameLoad then
13421: LD_VAR 0 1
13425: IFFALSE 13900
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13427: LD_ADDR_VAR 0 4
13431: PUSH
13432: LD_EXP 53
13436: PUSH
13437: LD_EXP 52
13441: PUSH
13442: LD_EXP 54
13446: PUSH
13447: LD_EXP 51
13451: PUSH
13452: LD_EXP 55
13456: PUSH
13457: LD_EXP 56
13461: PUSH
13462: LD_EXP 57
13466: PUSH
13467: LD_EXP 58
13471: PUSH
13472: LD_EXP 59
13476: PUSH
13477: LD_EXP 60
13481: PUSH
13482: LD_EXP 61
13486: PUSH
13487: LD_EXP 62
13491: PUSH
13492: LD_EXP 63
13496: PUSH
13497: LD_EXP 64
13501: PUSH
13502: LD_EXP 72
13506: PUSH
13507: LD_EXP 73
13511: PUSH
13512: LD_EXP 74
13516: PUSH
13517: LD_EXP 75
13521: PUSH
13522: LD_EXP 77
13526: PUSH
13527: LD_EXP 78
13531: PUSH
13532: LD_EXP 79
13536: PUSH
13537: LD_EXP 82
13541: PUSH
13542: LD_EXP 84
13546: PUSH
13547: LD_EXP 85
13551: PUSH
13552: LD_EXP 86
13556: PUSH
13557: LD_EXP 88
13561: PUSH
13562: LD_EXP 89
13566: PUSH
13567: LD_EXP 92
13571: PUSH
13572: LD_EXP 93
13576: PUSH
13577: LD_EXP 94
13581: PUSH
13582: LD_EXP 95
13586: PUSH
13587: LD_EXP 96
13591: PUSH
13592: LD_EXP 97
13596: PUSH
13597: LD_EXP 98
13601: PUSH
13602: LD_EXP 99
13606: PUSH
13607: LD_EXP 100
13611: PUSH
13612: LD_EXP 65
13616: PUSH
13617: LD_EXP 66
13621: PUSH
13622: LD_EXP 69
13626: PUSH
13627: LD_EXP 70
13631: PUSH
13632: LD_EXP 71
13636: PUSH
13637: LD_EXP 67
13641: PUSH
13642: LD_EXP 68
13646: PUSH
13647: LD_EXP 76
13651: PUSH
13652: LD_EXP 80
13656: PUSH
13657: LD_EXP 81
13661: PUSH
13662: LD_EXP 83
13666: PUSH
13667: LD_EXP 87
13671: PUSH
13672: LD_EXP 90
13676: PUSH
13677: LD_EXP 91
13681: PUSH
13682: LD_EXP 101
13686: PUSH
13687: LD_EXP 102
13691: PUSH
13692: LD_EXP 103
13696: PUSH
13697: LD_EXP 104
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: ST_TO_ADDR
// tmp :=  ;
13758: LD_ADDR_VAR 0 3
13762: PUSH
13763: LD_STRING 
13765: ST_TO_ADDR
// for i = 1 to normalCounter do
13766: LD_ADDR_VAR 0 8
13770: PUSH
13771: DOUBLE
13772: LD_INT 1
13774: DEC
13775: ST_TO_ADDR
13776: LD_EXP 49
13780: PUSH
13781: FOR_TO
13782: IFFALSE 13818
// begin if flags [ i ] then
13784: LD_VAR 0 4
13788: PUSH
13789: LD_VAR 0 8
13793: ARRAY
13794: IFFALSE 13816
// tmp := tmp & i & ; ;
13796: LD_ADDR_VAR 0 3
13800: PUSH
13801: LD_VAR 0 3
13805: PUSH
13806: LD_VAR 0 8
13810: STR
13811: PUSH
13812: LD_STRING ;
13814: STR
13815: ST_TO_ADDR
// end ;
13816: GO 13781
13818: POP
13819: POP
// for i = 1 to hardcoreCounter do
13820: LD_ADDR_VAR 0 8
13824: PUSH
13825: DOUBLE
13826: LD_INT 1
13828: DEC
13829: ST_TO_ADDR
13830: LD_EXP 50
13834: PUSH
13835: FOR_TO
13836: IFFALSE 13882
// begin if flags [ normalCounter + i ] then
13838: LD_VAR 0 4
13842: PUSH
13843: LD_EXP 49
13847: PUSH
13848: LD_VAR 0 8
13852: PLUS
13853: ARRAY
13854: IFFALSE 13880
// tmp := tmp & ( 100 + i ) & ; ;
13856: LD_ADDR_VAR 0 3
13860: PUSH
13861: LD_VAR 0 3
13865: PUSH
13866: LD_INT 100
13868: PUSH
13869: LD_VAR 0 8
13873: PLUS
13874: STR
13875: PUSH
13876: LD_STRING ;
13878: STR
13879: ST_TO_ADDR
// end ;
13880: GO 13835
13882: POP
13883: POP
// if tmp then
13884: LD_VAR 0 3
13888: IFFALSE 13900
// active := tmp ;
13890: LD_ADDR_VAR 0 7
13894: PUSH
13895: LD_VAR 0 3
13899: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13900: LD_STRING getStreamItemsFromMission("
13902: PUSH
13903: LD_VAR 0 5
13907: STR
13908: PUSH
13909: LD_STRING ","
13911: STR
13912: PUSH
13913: LD_VAR 0 6
13917: STR
13918: PUSH
13919: LD_STRING ","
13921: STR
13922: PUSH
13923: LD_VAR 0 7
13927: STR
13928: PUSH
13929: LD_STRING ")
13931: STR
13932: PPUSH
13933: CALL_OW 559
// end else
13937: GO 13946
// ToLua ( getStreamItemsFromMission("","","") ) ;
13939: LD_STRING getStreamItemsFromMission("","","")
13941: PPUSH
13942: CALL_OW 559
// end ;
13946: LD_VAR 0 2
13950: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13951: LD_EXP 48
13955: PUSH
13956: LD_EXP 53
13960: AND
13961: IFFALSE 14085
13963: GO 13965
13965: DISABLE
13966: LD_INT 0
13968: PPUSH
13969: PPUSH
// begin enable ;
13970: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13971: LD_ADDR_VAR 0 2
13975: PUSH
13976: LD_INT 22
13978: PUSH
13979: LD_OWVAR 2
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 2
13990: PUSH
13991: LD_INT 34
13993: PUSH
13994: LD_INT 7
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PUSH
14001: LD_INT 34
14003: PUSH
14004: LD_INT 45
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PUSH
14011: LD_INT 34
14013: PUSH
14014: LD_INT 28
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PUSH
14021: LD_INT 34
14023: PUSH
14024: LD_INT 47
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: PUSH
14038: EMPTY
14039: LIST
14040: LIST
14041: PPUSH
14042: CALL_OW 69
14046: ST_TO_ADDR
// if not tmp then
14047: LD_VAR 0 2
14051: NOT
14052: IFFALSE 14056
// exit ;
14054: GO 14085
// for i in tmp do
14056: LD_ADDR_VAR 0 1
14060: PUSH
14061: LD_VAR 0 2
14065: PUSH
14066: FOR_IN
14067: IFFALSE 14083
// begin SetLives ( i , 0 ) ;
14069: LD_VAR 0 1
14073: PPUSH
14074: LD_INT 0
14076: PPUSH
14077: CALL_OW 234
// end ;
14081: GO 14066
14083: POP
14084: POP
// end ;
14085: PPOPN 2
14087: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14088: LD_EXP 48
14092: PUSH
14093: LD_EXP 54
14097: AND
14098: IFFALSE 14182
14100: GO 14102
14102: DISABLE
14103: LD_INT 0
14105: PPUSH
14106: PPUSH
// begin enable ;
14107: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14108: LD_ADDR_VAR 0 2
14112: PUSH
14113: LD_INT 22
14115: PUSH
14116: LD_OWVAR 2
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PUSH
14125: LD_INT 32
14127: PUSH
14128: LD_INT 3
14130: PUSH
14131: EMPTY
14132: LIST
14133: LIST
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PPUSH
14139: CALL_OW 69
14143: ST_TO_ADDR
// if not tmp then
14144: LD_VAR 0 2
14148: NOT
14149: IFFALSE 14153
// exit ;
14151: GO 14182
// for i in tmp do
14153: LD_ADDR_VAR 0 1
14157: PUSH
14158: LD_VAR 0 2
14162: PUSH
14163: FOR_IN
14164: IFFALSE 14180
// begin SetLives ( i , 0 ) ;
14166: LD_VAR 0 1
14170: PPUSH
14171: LD_INT 0
14173: PPUSH
14174: CALL_OW 234
// end ;
14178: GO 14163
14180: POP
14181: POP
// end ;
14182: PPOPN 2
14184: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14185: LD_EXP 48
14189: PUSH
14190: LD_EXP 51
14194: AND
14195: IFFALSE 14288
14197: GO 14199
14199: DISABLE
14200: LD_INT 0
14202: PPUSH
// begin enable ;
14203: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14204: LD_ADDR_VAR 0 1
14208: PUSH
14209: LD_INT 22
14211: PUSH
14212: LD_OWVAR 2
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: LD_INT 2
14223: PUSH
14224: LD_INT 25
14226: PUSH
14227: LD_INT 5
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PUSH
14234: LD_INT 25
14236: PUSH
14237: LD_INT 9
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 25
14246: PUSH
14247: LD_INT 8
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PPUSH
14264: CALL_OW 69
14268: PUSH
14269: FOR_IN
14270: IFFALSE 14286
// begin SetClass ( i , 1 ) ;
14272: LD_VAR 0 1
14276: PPUSH
14277: LD_INT 1
14279: PPUSH
14280: CALL_OW 336
// end ;
14284: GO 14269
14286: POP
14287: POP
// end ;
14288: PPOPN 1
14290: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14291: LD_EXP 48
14295: PUSH
14296: LD_EXP 52
14300: AND
14301: PUSH
14302: LD_OWVAR 65
14306: PUSH
14307: LD_INT 7
14309: LESS
14310: AND
14311: IFFALSE 14325
14313: GO 14315
14315: DISABLE
// begin enable ;
14316: ENABLE
// game_speed := 7 ;
14317: LD_ADDR_OWVAR 65
14321: PUSH
14322: LD_INT 7
14324: ST_TO_ADDR
// end ;
14325: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14326: LD_EXP 48
14330: PUSH
14331: LD_EXP 55
14335: AND
14336: IFFALSE 14538
14338: GO 14340
14340: DISABLE
14341: LD_INT 0
14343: PPUSH
14344: PPUSH
14345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14346: LD_ADDR_VAR 0 3
14350: PUSH
14351: LD_INT 81
14353: PUSH
14354: LD_OWVAR 2
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: LD_INT 21
14365: PUSH
14366: LD_INT 1
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PPUSH
14377: CALL_OW 69
14381: ST_TO_ADDR
// if not tmp then
14382: LD_VAR 0 3
14386: NOT
14387: IFFALSE 14391
// exit ;
14389: GO 14538
// if tmp > 5 then
14391: LD_VAR 0 3
14395: PUSH
14396: LD_INT 5
14398: GREATER
14399: IFFALSE 14411
// k := 5 else
14401: LD_ADDR_VAR 0 2
14405: PUSH
14406: LD_INT 5
14408: ST_TO_ADDR
14409: GO 14421
// k := tmp ;
14411: LD_ADDR_VAR 0 2
14415: PUSH
14416: LD_VAR 0 3
14420: ST_TO_ADDR
// for i := 1 to k do
14421: LD_ADDR_VAR 0 1
14425: PUSH
14426: DOUBLE
14427: LD_INT 1
14429: DEC
14430: ST_TO_ADDR
14431: LD_VAR 0 2
14435: PUSH
14436: FOR_TO
14437: IFFALSE 14536
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14439: LD_VAR 0 3
14443: PUSH
14444: LD_VAR 0 1
14448: ARRAY
14449: PPUSH
14450: LD_VAR 0 1
14454: PUSH
14455: LD_INT 4
14457: MOD
14458: PUSH
14459: LD_INT 1
14461: PLUS
14462: PPUSH
14463: CALL_OW 259
14467: PUSH
14468: LD_INT 10
14470: LESS
14471: IFFALSE 14534
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14473: LD_VAR 0 3
14477: PUSH
14478: LD_VAR 0 1
14482: ARRAY
14483: PPUSH
14484: LD_VAR 0 1
14488: PUSH
14489: LD_INT 4
14491: MOD
14492: PUSH
14493: LD_INT 1
14495: PLUS
14496: PPUSH
14497: LD_VAR 0 3
14501: PUSH
14502: LD_VAR 0 1
14506: ARRAY
14507: PPUSH
14508: LD_VAR 0 1
14512: PUSH
14513: LD_INT 4
14515: MOD
14516: PUSH
14517: LD_INT 1
14519: PLUS
14520: PPUSH
14521: CALL_OW 259
14525: PUSH
14526: LD_INT 1
14528: PLUS
14529: PPUSH
14530: CALL_OW 237
14534: GO 14436
14536: POP
14537: POP
// end ;
14538: PPOPN 3
14540: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14541: LD_EXP 48
14545: PUSH
14546: LD_EXP 56
14550: AND
14551: IFFALSE 14571
14553: GO 14555
14555: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14556: LD_INT 4
14558: PPUSH
14559: LD_OWVAR 2
14563: PPUSH
14564: LD_INT 0
14566: PPUSH
14567: CALL_OW 324
14571: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14572: LD_EXP 48
14576: PUSH
14577: LD_EXP 85
14581: AND
14582: IFFALSE 14602
14584: GO 14586
14586: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14587: LD_INT 19
14589: PPUSH
14590: LD_OWVAR 2
14594: PPUSH
14595: LD_INT 0
14597: PPUSH
14598: CALL_OW 324
14602: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14603: LD_EXP 48
14607: PUSH
14608: LD_EXP 57
14612: AND
14613: IFFALSE 14715
14615: GO 14617
14617: DISABLE
14618: LD_INT 0
14620: PPUSH
14621: PPUSH
// begin enable ;
14622: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14623: LD_ADDR_VAR 0 2
14627: PUSH
14628: LD_INT 22
14630: PUSH
14631: LD_OWVAR 2
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: LD_INT 2
14642: PUSH
14643: LD_INT 34
14645: PUSH
14646: LD_INT 11
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PUSH
14653: LD_INT 34
14655: PUSH
14656: LD_INT 30
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: LIST
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PPUSH
14672: CALL_OW 69
14676: ST_TO_ADDR
// if not tmp then
14677: LD_VAR 0 2
14681: NOT
14682: IFFALSE 14686
// exit ;
14684: GO 14715
// for i in tmp do
14686: LD_ADDR_VAR 0 1
14690: PUSH
14691: LD_VAR 0 2
14695: PUSH
14696: FOR_IN
14697: IFFALSE 14713
// begin SetLives ( i , 0 ) ;
14699: LD_VAR 0 1
14703: PPUSH
14704: LD_INT 0
14706: PPUSH
14707: CALL_OW 234
// end ;
14711: GO 14696
14713: POP
14714: POP
// end ;
14715: PPOPN 2
14717: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14718: LD_EXP 48
14722: PUSH
14723: LD_EXP 58
14727: AND
14728: IFFALSE 14748
14730: GO 14732
14732: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14733: LD_INT 32
14735: PPUSH
14736: LD_OWVAR 2
14740: PPUSH
14741: LD_INT 0
14743: PPUSH
14744: CALL_OW 324
14748: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14749: LD_EXP 48
14753: PUSH
14754: LD_EXP 59
14758: AND
14759: IFFALSE 14940
14761: GO 14763
14763: DISABLE
14764: LD_INT 0
14766: PPUSH
14767: PPUSH
14768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14769: LD_ADDR_VAR 0 2
14773: PUSH
14774: LD_INT 22
14776: PUSH
14777: LD_OWVAR 2
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PUSH
14786: LD_INT 33
14788: PUSH
14789: LD_INT 3
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PPUSH
14800: CALL_OW 69
14804: ST_TO_ADDR
// if not tmp then
14805: LD_VAR 0 2
14809: NOT
14810: IFFALSE 14814
// exit ;
14812: GO 14940
// side := 0 ;
14814: LD_ADDR_VAR 0 3
14818: PUSH
14819: LD_INT 0
14821: ST_TO_ADDR
// for i := 1 to 8 do
14822: LD_ADDR_VAR 0 1
14826: PUSH
14827: DOUBLE
14828: LD_INT 1
14830: DEC
14831: ST_TO_ADDR
14832: LD_INT 8
14834: PUSH
14835: FOR_TO
14836: IFFALSE 14884
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14838: LD_OWVAR 2
14842: PUSH
14843: LD_VAR 0 1
14847: NONEQUAL
14848: PUSH
14849: LD_OWVAR 2
14853: PPUSH
14854: LD_VAR 0 1
14858: PPUSH
14859: CALL_OW 81
14863: PUSH
14864: LD_INT 2
14866: EQUAL
14867: AND
14868: IFFALSE 14882
// begin side := i ;
14870: LD_ADDR_VAR 0 3
14874: PUSH
14875: LD_VAR 0 1
14879: ST_TO_ADDR
// break ;
14880: GO 14884
// end ;
14882: GO 14835
14884: POP
14885: POP
// if not side then
14886: LD_VAR 0 3
14890: NOT
14891: IFFALSE 14895
// exit ;
14893: GO 14940
// for i := 1 to tmp do
14895: LD_ADDR_VAR 0 1
14899: PUSH
14900: DOUBLE
14901: LD_INT 1
14903: DEC
14904: ST_TO_ADDR
14905: LD_VAR 0 2
14909: PUSH
14910: FOR_TO
14911: IFFALSE 14938
// if Prob ( 60 ) then
14913: LD_INT 60
14915: PPUSH
14916: CALL_OW 13
14920: IFFALSE 14936
// SetSide ( i , side ) ;
14922: LD_VAR 0 1
14926: PPUSH
14927: LD_VAR 0 3
14931: PPUSH
14932: CALL_OW 235
14936: GO 14910
14938: POP
14939: POP
// end ;
14940: PPOPN 3
14942: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14943: LD_EXP 48
14947: PUSH
14948: LD_EXP 61
14952: AND
14953: IFFALSE 15072
14955: GO 14957
14957: DISABLE
14958: LD_INT 0
14960: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14961: LD_ADDR_VAR 0 1
14965: PUSH
14966: LD_INT 22
14968: PUSH
14969: LD_OWVAR 2
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 21
14980: PUSH
14981: LD_INT 1
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 3
14990: PUSH
14991: LD_INT 23
14993: PUSH
14994: LD_INT 0
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: LIST
15009: PPUSH
15010: CALL_OW 69
15014: PUSH
15015: FOR_IN
15016: IFFALSE 15070
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15018: LD_VAR 0 1
15022: PPUSH
15023: CALL_OW 257
15027: PUSH
15028: LD_INT 1
15030: PUSH
15031: LD_INT 2
15033: PUSH
15034: LD_INT 3
15036: PUSH
15037: LD_INT 4
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: IN
15046: IFFALSE 15068
// SetClass ( un , rand ( 1 , 4 ) ) ;
15048: LD_VAR 0 1
15052: PPUSH
15053: LD_INT 1
15055: PPUSH
15056: LD_INT 4
15058: PPUSH
15059: CALL_OW 12
15063: PPUSH
15064: CALL_OW 336
15068: GO 15015
15070: POP
15071: POP
// end ;
15072: PPOPN 1
15074: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15075: LD_EXP 48
15079: PUSH
15080: LD_EXP 60
15084: AND
15085: IFFALSE 15164
15087: GO 15089
15089: DISABLE
15090: LD_INT 0
15092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15093: LD_ADDR_VAR 0 1
15097: PUSH
15098: LD_INT 22
15100: PUSH
15101: LD_OWVAR 2
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: LD_INT 21
15112: PUSH
15113: LD_INT 3
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PPUSH
15124: CALL_OW 69
15128: ST_TO_ADDR
// if not tmp then
15129: LD_VAR 0 1
15133: NOT
15134: IFFALSE 15138
// exit ;
15136: GO 15164
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15138: LD_VAR 0 1
15142: PUSH
15143: LD_INT 1
15145: PPUSH
15146: LD_VAR 0 1
15150: PPUSH
15151: CALL_OW 12
15155: ARRAY
15156: PPUSH
15157: LD_INT 100
15159: PPUSH
15160: CALL_OW 234
// end ;
15164: PPOPN 1
15166: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15167: LD_EXP 48
15171: PUSH
15172: LD_EXP 62
15176: AND
15177: IFFALSE 15275
15179: GO 15181
15181: DISABLE
15182: LD_INT 0
15184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15185: LD_ADDR_VAR 0 1
15189: PUSH
15190: LD_INT 22
15192: PUSH
15193: LD_OWVAR 2
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: PUSH
15202: LD_INT 21
15204: PUSH
15205: LD_INT 1
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PPUSH
15216: CALL_OW 69
15220: ST_TO_ADDR
// if not tmp then
15221: LD_VAR 0 1
15225: NOT
15226: IFFALSE 15230
// exit ;
15228: GO 15275
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15230: LD_VAR 0 1
15234: PUSH
15235: LD_INT 1
15237: PPUSH
15238: LD_VAR 0 1
15242: PPUSH
15243: CALL_OW 12
15247: ARRAY
15248: PPUSH
15249: LD_INT 1
15251: PPUSH
15252: LD_INT 4
15254: PPUSH
15255: CALL_OW 12
15259: PPUSH
15260: LD_INT 3000
15262: PPUSH
15263: LD_INT 9000
15265: PPUSH
15266: CALL_OW 12
15270: PPUSH
15271: CALL_OW 492
// end ;
15275: PPOPN 1
15277: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15278: LD_EXP 48
15282: PUSH
15283: LD_EXP 63
15287: AND
15288: IFFALSE 15308
15290: GO 15292
15292: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15293: LD_INT 1
15295: PPUSH
15296: LD_OWVAR 2
15300: PPUSH
15301: LD_INT 0
15303: PPUSH
15304: CALL_OW 324
15308: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15309: LD_EXP 48
15313: PUSH
15314: LD_EXP 64
15318: AND
15319: IFFALSE 15402
15321: GO 15323
15323: DISABLE
15324: LD_INT 0
15326: PPUSH
15327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15328: LD_ADDR_VAR 0 2
15332: PUSH
15333: LD_INT 22
15335: PUSH
15336: LD_OWVAR 2
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: PUSH
15345: LD_INT 21
15347: PUSH
15348: LD_INT 3
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: PPUSH
15359: CALL_OW 69
15363: ST_TO_ADDR
// if not tmp then
15364: LD_VAR 0 2
15368: NOT
15369: IFFALSE 15373
// exit ;
15371: GO 15402
// for i in tmp do
15373: LD_ADDR_VAR 0 1
15377: PUSH
15378: LD_VAR 0 2
15382: PUSH
15383: FOR_IN
15384: IFFALSE 15400
// SetBLevel ( i , 10 ) ;
15386: LD_VAR 0 1
15390: PPUSH
15391: LD_INT 10
15393: PPUSH
15394: CALL_OW 241
15398: GO 15383
15400: POP
15401: POP
// end ;
15402: PPOPN 2
15404: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15405: LD_EXP 48
15409: PUSH
15410: LD_EXP 65
15414: AND
15415: IFFALSE 15526
15417: GO 15419
15419: DISABLE
15420: LD_INT 0
15422: PPUSH
15423: PPUSH
15424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15425: LD_ADDR_VAR 0 3
15429: PUSH
15430: LD_INT 22
15432: PUSH
15433: LD_OWVAR 2
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PUSH
15442: LD_INT 25
15444: PUSH
15445: LD_INT 1
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PPUSH
15456: CALL_OW 69
15460: ST_TO_ADDR
// if not tmp then
15461: LD_VAR 0 3
15465: NOT
15466: IFFALSE 15470
// exit ;
15468: GO 15526
// un := tmp [ rand ( 1 , tmp ) ] ;
15470: LD_ADDR_VAR 0 2
15474: PUSH
15475: LD_VAR 0 3
15479: PUSH
15480: LD_INT 1
15482: PPUSH
15483: LD_VAR 0 3
15487: PPUSH
15488: CALL_OW 12
15492: ARRAY
15493: ST_TO_ADDR
// if Crawls ( un ) then
15494: LD_VAR 0 2
15498: PPUSH
15499: CALL_OW 318
15503: IFFALSE 15514
// ComWalk ( un ) ;
15505: LD_VAR 0 2
15509: PPUSH
15510: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15514: LD_VAR 0 2
15518: PPUSH
15519: LD_INT 5
15521: PPUSH
15522: CALL_OW 336
// end ;
15526: PPOPN 3
15528: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15529: LD_EXP 48
15533: PUSH
15534: LD_EXP 66
15538: AND
15539: PUSH
15540: LD_OWVAR 67
15544: PUSH
15545: LD_INT 4
15547: LESS
15548: AND
15549: IFFALSE 15568
15551: GO 15553
15553: DISABLE
// begin Difficulty := Difficulty + 1 ;
15554: LD_ADDR_OWVAR 67
15558: PUSH
15559: LD_OWVAR 67
15563: PUSH
15564: LD_INT 1
15566: PLUS
15567: ST_TO_ADDR
// end ;
15568: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15569: LD_EXP 48
15573: PUSH
15574: LD_EXP 67
15578: AND
15579: IFFALSE 15682
15581: GO 15583
15583: DISABLE
15584: LD_INT 0
15586: PPUSH
// begin for i := 1 to 5 do
15587: LD_ADDR_VAR 0 1
15591: PUSH
15592: DOUBLE
15593: LD_INT 1
15595: DEC
15596: ST_TO_ADDR
15597: LD_INT 5
15599: PUSH
15600: FOR_TO
15601: IFFALSE 15680
// begin uc_nation := nation_nature ;
15603: LD_ADDR_OWVAR 21
15607: PUSH
15608: LD_INT 0
15610: ST_TO_ADDR
// uc_side := 0 ;
15611: LD_ADDR_OWVAR 20
15615: PUSH
15616: LD_INT 0
15618: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15619: LD_ADDR_OWVAR 29
15623: PUSH
15624: LD_INT 12
15626: PUSH
15627: LD_INT 12
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: ST_TO_ADDR
// hc_agressivity := 20 ;
15634: LD_ADDR_OWVAR 35
15638: PUSH
15639: LD_INT 20
15641: ST_TO_ADDR
// hc_class := class_tiger ;
15642: LD_ADDR_OWVAR 28
15646: PUSH
15647: LD_INT 14
15649: ST_TO_ADDR
// hc_gallery :=  ;
15650: LD_ADDR_OWVAR 33
15654: PUSH
15655: LD_STRING 
15657: ST_TO_ADDR
// hc_name :=  ;
15658: LD_ADDR_OWVAR 26
15662: PUSH
15663: LD_STRING 
15665: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15666: CALL_OW 44
15670: PPUSH
15671: LD_INT 0
15673: PPUSH
15674: CALL_OW 51
// end ;
15678: GO 15600
15680: POP
15681: POP
// end ;
15682: PPOPN 1
15684: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15685: LD_EXP 48
15689: PUSH
15690: LD_EXP 68
15694: AND
15695: IFFALSE 15704
15697: GO 15699
15699: DISABLE
// StreamSibBomb ;
15700: CALL 15705 0 0
15704: END
// export function StreamSibBomb ; var i , x , y ; begin
15705: LD_INT 0
15707: PPUSH
15708: PPUSH
15709: PPUSH
15710: PPUSH
// result := false ;
15711: LD_ADDR_VAR 0 1
15715: PUSH
15716: LD_INT 0
15718: ST_TO_ADDR
// for i := 1 to 16 do
15719: LD_ADDR_VAR 0 2
15723: PUSH
15724: DOUBLE
15725: LD_INT 1
15727: DEC
15728: ST_TO_ADDR
15729: LD_INT 16
15731: PUSH
15732: FOR_TO
15733: IFFALSE 15932
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15735: LD_ADDR_VAR 0 3
15739: PUSH
15740: LD_INT 10
15742: PUSH
15743: LD_INT 20
15745: PUSH
15746: LD_INT 30
15748: PUSH
15749: LD_INT 40
15751: PUSH
15752: LD_INT 50
15754: PUSH
15755: LD_INT 60
15757: PUSH
15758: LD_INT 70
15760: PUSH
15761: LD_INT 80
15763: PUSH
15764: LD_INT 90
15766: PUSH
15767: LD_INT 100
15769: PUSH
15770: LD_INT 110
15772: PUSH
15773: LD_INT 120
15775: PUSH
15776: LD_INT 130
15778: PUSH
15779: LD_INT 140
15781: PUSH
15782: LD_INT 150
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: PUSH
15802: LD_INT 1
15804: PPUSH
15805: LD_INT 15
15807: PPUSH
15808: CALL_OW 12
15812: ARRAY
15813: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15814: LD_ADDR_VAR 0 4
15818: PUSH
15819: LD_INT 10
15821: PUSH
15822: LD_INT 20
15824: PUSH
15825: LD_INT 30
15827: PUSH
15828: LD_INT 40
15830: PUSH
15831: LD_INT 50
15833: PUSH
15834: LD_INT 60
15836: PUSH
15837: LD_INT 70
15839: PUSH
15840: LD_INT 80
15842: PUSH
15843: LD_INT 90
15845: PUSH
15846: LD_INT 100
15848: PUSH
15849: LD_INT 110
15851: PUSH
15852: LD_INT 120
15854: PUSH
15855: LD_INT 130
15857: PUSH
15858: LD_INT 140
15860: PUSH
15861: LD_INT 150
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: PUSH
15881: LD_INT 1
15883: PPUSH
15884: LD_INT 15
15886: PPUSH
15887: CALL_OW 12
15891: ARRAY
15892: ST_TO_ADDR
// if ValidHex ( x , y ) then
15893: LD_VAR 0 3
15897: PPUSH
15898: LD_VAR 0 4
15902: PPUSH
15903: CALL_OW 488
15907: IFFALSE 15930
// begin result := [ x , y ] ;
15909: LD_ADDR_VAR 0 1
15913: PUSH
15914: LD_VAR 0 3
15918: PUSH
15919: LD_VAR 0 4
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: ST_TO_ADDR
// break ;
15928: GO 15932
// end ; end ;
15930: GO 15732
15932: POP
15933: POP
// if result then
15934: LD_VAR 0 1
15938: IFFALSE 15998
// begin ToLua ( playSibBomb() ) ;
15940: LD_STRING playSibBomb()
15942: PPUSH
15943: CALL_OW 559
// wait ( 0 0$14 ) ;
15947: LD_INT 490
15949: PPUSH
15950: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15954: LD_VAR 0 1
15958: PUSH
15959: LD_INT 1
15961: ARRAY
15962: PPUSH
15963: LD_VAR 0 1
15967: PUSH
15968: LD_INT 2
15970: ARRAY
15971: PPUSH
15972: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15976: LD_VAR 0 1
15980: PUSH
15981: LD_INT 1
15983: ARRAY
15984: PPUSH
15985: LD_VAR 0 1
15989: PUSH
15990: LD_INT 2
15992: ARRAY
15993: PPUSH
15994: CALL_OW 429
// end ; end ;
15998: LD_VAR 0 1
16002: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16003: LD_EXP 48
16007: PUSH
16008: LD_EXP 70
16012: AND
16013: IFFALSE 16025
16015: GO 16017
16017: DISABLE
// YouLost (  ) ;
16018: LD_STRING 
16020: PPUSH
16021: CALL_OW 104
16025: END
// every 0 0$1 trigger StreamModeActive and sFog do
16026: LD_EXP 48
16030: PUSH
16031: LD_EXP 69
16035: AND
16036: IFFALSE 16050
16038: GO 16040
16040: DISABLE
// FogOff ( your_side ) ;
16041: LD_OWVAR 2
16045: PPUSH
16046: CALL_OW 344
16050: END
// every 0 0$1 trigger StreamModeActive and sSun do
16051: LD_EXP 48
16055: PUSH
16056: LD_EXP 71
16060: AND
16061: IFFALSE 16089
16063: GO 16065
16065: DISABLE
// begin solar_recharge_percent := 0 ;
16066: LD_ADDR_OWVAR 79
16070: PUSH
16071: LD_INT 0
16073: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16074: LD_INT 10500
16076: PPUSH
16077: CALL_OW 67
// solar_recharge_percent := 100 ;
16081: LD_ADDR_OWVAR 79
16085: PUSH
16086: LD_INT 100
16088: ST_TO_ADDR
// end ;
16089: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16090: LD_EXP 48
16094: PUSH
16095: LD_EXP 72
16099: AND
16100: IFFALSE 16339
16102: GO 16104
16104: DISABLE
16105: LD_INT 0
16107: PPUSH
16108: PPUSH
16109: PPUSH
// begin tmp := [ ] ;
16110: LD_ADDR_VAR 0 3
16114: PUSH
16115: EMPTY
16116: ST_TO_ADDR
// for i := 1 to 6 do
16117: LD_ADDR_VAR 0 1
16121: PUSH
16122: DOUBLE
16123: LD_INT 1
16125: DEC
16126: ST_TO_ADDR
16127: LD_INT 6
16129: PUSH
16130: FOR_TO
16131: IFFALSE 16236
// begin uc_nation := nation_nature ;
16133: LD_ADDR_OWVAR 21
16137: PUSH
16138: LD_INT 0
16140: ST_TO_ADDR
// uc_side := 0 ;
16141: LD_ADDR_OWVAR 20
16145: PUSH
16146: LD_INT 0
16148: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16149: LD_ADDR_OWVAR 29
16153: PUSH
16154: LD_INT 12
16156: PUSH
16157: LD_INT 12
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: ST_TO_ADDR
// hc_agressivity := 20 ;
16164: LD_ADDR_OWVAR 35
16168: PUSH
16169: LD_INT 20
16171: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16172: LD_ADDR_OWVAR 28
16176: PUSH
16177: LD_INT 17
16179: ST_TO_ADDR
// hc_gallery :=  ;
16180: LD_ADDR_OWVAR 33
16184: PUSH
16185: LD_STRING 
16187: ST_TO_ADDR
// hc_name :=  ;
16188: LD_ADDR_OWVAR 26
16192: PUSH
16193: LD_STRING 
16195: ST_TO_ADDR
// un := CreateHuman ;
16196: LD_ADDR_VAR 0 2
16200: PUSH
16201: CALL_OW 44
16205: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16206: LD_VAR 0 2
16210: PPUSH
16211: LD_INT 1
16213: PPUSH
16214: CALL_OW 51
// tmp := tmp ^ un ;
16218: LD_ADDR_VAR 0 3
16222: PUSH
16223: LD_VAR 0 3
16227: PUSH
16228: LD_VAR 0 2
16232: ADD
16233: ST_TO_ADDR
// end ;
16234: GO 16130
16236: POP
16237: POP
// repeat wait ( 0 0$1 ) ;
16238: LD_INT 35
16240: PPUSH
16241: CALL_OW 67
// for un in tmp do
16245: LD_ADDR_VAR 0 2
16249: PUSH
16250: LD_VAR 0 3
16254: PUSH
16255: FOR_IN
16256: IFFALSE 16330
// begin if IsDead ( un ) then
16258: LD_VAR 0 2
16262: PPUSH
16263: CALL_OW 301
16267: IFFALSE 16287
// begin tmp := tmp diff un ;
16269: LD_ADDR_VAR 0 3
16273: PUSH
16274: LD_VAR 0 3
16278: PUSH
16279: LD_VAR 0 2
16283: DIFF
16284: ST_TO_ADDR
// continue ;
16285: GO 16255
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16287: LD_VAR 0 2
16291: PPUSH
16292: LD_INT 3
16294: PUSH
16295: LD_INT 22
16297: PUSH
16298: LD_INT 0
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PPUSH
16309: CALL_OW 69
16313: PPUSH
16314: LD_VAR 0 2
16318: PPUSH
16319: CALL_OW 74
16323: PPUSH
16324: CALL_OW 115
// end ;
16328: GO 16255
16330: POP
16331: POP
// until not tmp ;
16332: LD_VAR 0 3
16336: NOT
16337: IFFALSE 16238
// end ;
16339: PPOPN 3
16341: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16342: LD_EXP 48
16346: PUSH
16347: LD_EXP 73
16351: AND
16352: IFFALSE 16406
16354: GO 16356
16356: DISABLE
// begin ToLua ( displayTroll(); ) ;
16357: LD_STRING displayTroll();
16359: PPUSH
16360: CALL_OW 559
// wait ( 3 3$00 ) ;
16364: LD_INT 6300
16366: PPUSH
16367: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16371: LD_STRING hideTroll();
16373: PPUSH
16374: CALL_OW 559
// wait ( 1 1$00 ) ;
16378: LD_INT 2100
16380: PPUSH
16381: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16385: LD_STRING displayTroll();
16387: PPUSH
16388: CALL_OW 559
// wait ( 1 1$00 ) ;
16392: LD_INT 2100
16394: PPUSH
16395: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16399: LD_STRING hideTroll();
16401: PPUSH
16402: CALL_OW 559
// end ;
16406: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16407: LD_EXP 48
16411: PUSH
16412: LD_EXP 74
16416: AND
16417: IFFALSE 16480
16419: GO 16421
16421: DISABLE
16422: LD_INT 0
16424: PPUSH
// begin p := 0 ;
16425: LD_ADDR_VAR 0 1
16429: PUSH
16430: LD_INT 0
16432: ST_TO_ADDR
// repeat game_speed := 1 ;
16433: LD_ADDR_OWVAR 65
16437: PUSH
16438: LD_INT 1
16440: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16441: LD_INT 35
16443: PPUSH
16444: CALL_OW 67
// p := p + 1 ;
16448: LD_ADDR_VAR 0 1
16452: PUSH
16453: LD_VAR 0 1
16457: PUSH
16458: LD_INT 1
16460: PLUS
16461: ST_TO_ADDR
// until p >= 60 ;
16462: LD_VAR 0 1
16466: PUSH
16467: LD_INT 60
16469: GREATEREQUAL
16470: IFFALSE 16433
// game_speed := 4 ;
16472: LD_ADDR_OWVAR 65
16476: PUSH
16477: LD_INT 4
16479: ST_TO_ADDR
// end ;
16480: PPOPN 1
16482: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16483: LD_EXP 48
16487: PUSH
16488: LD_EXP 75
16492: AND
16493: IFFALSE 16639
16495: GO 16497
16497: DISABLE
16498: LD_INT 0
16500: PPUSH
16501: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16502: LD_ADDR_VAR 0 1
16506: PUSH
16507: LD_INT 22
16509: PUSH
16510: LD_OWVAR 2
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: PUSH
16519: LD_INT 2
16521: PUSH
16522: LD_INT 30
16524: PUSH
16525: LD_INT 0
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 30
16534: PUSH
16535: LD_INT 1
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: LIST
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PPUSH
16551: CALL_OW 69
16555: ST_TO_ADDR
// if not depot then
16556: LD_VAR 0 1
16560: NOT
16561: IFFALSE 16565
// exit ;
16563: GO 16639
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16565: LD_ADDR_VAR 0 2
16569: PUSH
16570: LD_VAR 0 1
16574: PUSH
16575: LD_INT 1
16577: PPUSH
16578: LD_VAR 0 1
16582: PPUSH
16583: CALL_OW 12
16587: ARRAY
16588: PPUSH
16589: CALL_OW 274
16593: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16594: LD_VAR 0 2
16598: PPUSH
16599: LD_INT 1
16601: PPUSH
16602: LD_INT 0
16604: PPUSH
16605: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16609: LD_VAR 0 2
16613: PPUSH
16614: LD_INT 2
16616: PPUSH
16617: LD_INT 0
16619: PPUSH
16620: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16624: LD_VAR 0 2
16628: PPUSH
16629: LD_INT 3
16631: PPUSH
16632: LD_INT 0
16634: PPUSH
16635: CALL_OW 277
// end ;
16639: PPOPN 2
16641: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16642: LD_EXP 48
16646: PUSH
16647: LD_EXP 76
16651: AND
16652: IFFALSE 16749
16654: GO 16656
16656: DISABLE
16657: LD_INT 0
16659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16660: LD_ADDR_VAR 0 1
16664: PUSH
16665: LD_INT 22
16667: PUSH
16668: LD_OWVAR 2
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 21
16679: PUSH
16680: LD_INT 1
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: LD_INT 3
16689: PUSH
16690: LD_INT 23
16692: PUSH
16693: LD_INT 0
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: LIST
16708: PPUSH
16709: CALL_OW 69
16713: ST_TO_ADDR
// if not tmp then
16714: LD_VAR 0 1
16718: NOT
16719: IFFALSE 16723
// exit ;
16721: GO 16749
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16723: LD_VAR 0 1
16727: PUSH
16728: LD_INT 1
16730: PPUSH
16731: LD_VAR 0 1
16735: PPUSH
16736: CALL_OW 12
16740: ARRAY
16741: PPUSH
16742: LD_INT 200
16744: PPUSH
16745: CALL_OW 234
// end ;
16749: PPOPN 1
16751: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16752: LD_EXP 48
16756: PUSH
16757: LD_EXP 77
16761: AND
16762: IFFALSE 16841
16764: GO 16766
16766: DISABLE
16767: LD_INT 0
16769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16770: LD_ADDR_VAR 0 1
16774: PUSH
16775: LD_INT 22
16777: PUSH
16778: LD_OWVAR 2
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: PUSH
16787: LD_INT 21
16789: PUSH
16790: LD_INT 2
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PPUSH
16801: CALL_OW 69
16805: ST_TO_ADDR
// if not tmp then
16806: LD_VAR 0 1
16810: NOT
16811: IFFALSE 16815
// exit ;
16813: GO 16841
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16815: LD_VAR 0 1
16819: PUSH
16820: LD_INT 1
16822: PPUSH
16823: LD_VAR 0 1
16827: PPUSH
16828: CALL_OW 12
16832: ARRAY
16833: PPUSH
16834: LD_INT 60
16836: PPUSH
16837: CALL_OW 234
// end ;
16841: PPOPN 1
16843: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16844: LD_EXP 48
16848: PUSH
16849: LD_EXP 78
16853: AND
16854: IFFALSE 16953
16856: GO 16858
16858: DISABLE
16859: LD_INT 0
16861: PPUSH
16862: PPUSH
// begin enable ;
16863: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16864: LD_ADDR_VAR 0 1
16868: PUSH
16869: LD_INT 22
16871: PUSH
16872: LD_OWVAR 2
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 61
16883: PUSH
16884: EMPTY
16885: LIST
16886: PUSH
16887: LD_INT 33
16889: PUSH
16890: LD_INT 2
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: LIST
16901: PPUSH
16902: CALL_OW 69
16906: ST_TO_ADDR
// if not tmp then
16907: LD_VAR 0 1
16911: NOT
16912: IFFALSE 16916
// exit ;
16914: GO 16953
// for i in tmp do
16916: LD_ADDR_VAR 0 2
16920: PUSH
16921: LD_VAR 0 1
16925: PUSH
16926: FOR_IN
16927: IFFALSE 16951
// if IsControledBy ( i ) then
16929: LD_VAR 0 2
16933: PPUSH
16934: CALL_OW 312
16938: IFFALSE 16949
// ComUnlink ( i ) ;
16940: LD_VAR 0 2
16944: PPUSH
16945: CALL_OW 136
16949: GO 16926
16951: POP
16952: POP
// end ;
16953: PPOPN 2
16955: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16956: LD_EXP 48
16960: PUSH
16961: LD_EXP 79
16965: AND
16966: IFFALSE 17106
16968: GO 16970
16970: DISABLE
16971: LD_INT 0
16973: PPUSH
16974: PPUSH
// begin ToLua ( displayPowell(); ) ;
16975: LD_STRING displayPowell();
16977: PPUSH
16978: CALL_OW 559
// uc_side := 0 ;
16982: LD_ADDR_OWVAR 20
16986: PUSH
16987: LD_INT 0
16989: ST_TO_ADDR
// uc_nation := 2 ;
16990: LD_ADDR_OWVAR 21
16994: PUSH
16995: LD_INT 2
16997: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16998: LD_ADDR_OWVAR 37
17002: PUSH
17003: LD_INT 14
17005: ST_TO_ADDR
// vc_engine := engine_siberite ;
17006: LD_ADDR_OWVAR 39
17010: PUSH
17011: LD_INT 3
17013: ST_TO_ADDR
// vc_control := control_apeman ;
17014: LD_ADDR_OWVAR 38
17018: PUSH
17019: LD_INT 5
17021: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17022: LD_ADDR_OWVAR 40
17026: PUSH
17027: LD_INT 29
17029: ST_TO_ADDR
// un := CreateVehicle ;
17030: LD_ADDR_VAR 0 2
17034: PUSH
17035: CALL_OW 45
17039: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17040: LD_VAR 0 2
17044: PPUSH
17045: LD_INT 1
17047: PPUSH
17048: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17052: LD_INT 35
17054: PPUSH
17055: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17059: LD_VAR 0 2
17063: PPUSH
17064: LD_INT 22
17066: PUSH
17067: LD_OWVAR 2
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PPUSH
17076: CALL_OW 69
17080: PPUSH
17081: LD_VAR 0 2
17085: PPUSH
17086: CALL_OW 74
17090: PPUSH
17091: CALL_OW 115
// until IsDead ( un ) ;
17095: LD_VAR 0 2
17099: PPUSH
17100: CALL_OW 301
17104: IFFALSE 17052
// end ;
17106: PPOPN 2
17108: END
// every 0 0$1 trigger StreamModeActive and sStu do
17109: LD_EXP 48
17113: PUSH
17114: LD_EXP 87
17118: AND
17119: IFFALSE 17135
17121: GO 17123
17123: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17124: LD_STRING displayStucuk();
17126: PPUSH
17127: CALL_OW 559
// ResetFog ;
17131: CALL_OW 335
// end ;
17135: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17136: LD_EXP 48
17140: PUSH
17141: LD_EXP 80
17145: AND
17146: IFFALSE 17287
17148: GO 17150
17150: DISABLE
17151: LD_INT 0
17153: PPUSH
17154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17155: LD_ADDR_VAR 0 2
17159: PUSH
17160: LD_INT 22
17162: PUSH
17163: LD_OWVAR 2
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: PUSH
17172: LD_INT 21
17174: PUSH
17175: LD_INT 1
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: PPUSH
17186: CALL_OW 69
17190: ST_TO_ADDR
// if not tmp then
17191: LD_VAR 0 2
17195: NOT
17196: IFFALSE 17200
// exit ;
17198: GO 17287
// un := tmp [ rand ( 1 , tmp ) ] ;
17200: LD_ADDR_VAR 0 1
17204: PUSH
17205: LD_VAR 0 2
17209: PUSH
17210: LD_INT 1
17212: PPUSH
17213: LD_VAR 0 2
17217: PPUSH
17218: CALL_OW 12
17222: ARRAY
17223: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17224: LD_VAR 0 1
17228: PPUSH
17229: LD_INT 0
17231: PPUSH
17232: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17236: LD_VAR 0 1
17240: PPUSH
17241: LD_OWVAR 3
17245: PUSH
17246: LD_VAR 0 1
17250: DIFF
17251: PPUSH
17252: LD_VAR 0 1
17256: PPUSH
17257: CALL_OW 74
17261: PPUSH
17262: CALL_OW 115
// wait ( 0 0$20 ) ;
17266: LD_INT 700
17268: PPUSH
17269: CALL_OW 67
// SetSide ( un , your_side ) ;
17273: LD_VAR 0 1
17277: PPUSH
17278: LD_OWVAR 2
17282: PPUSH
17283: CALL_OW 235
// end ;
17287: PPOPN 2
17289: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17290: LD_EXP 48
17294: PUSH
17295: LD_EXP 81
17299: AND
17300: IFFALSE 17406
17302: GO 17304
17304: DISABLE
17305: LD_INT 0
17307: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17308: LD_ADDR_VAR 0 1
17312: PUSH
17313: LD_INT 22
17315: PUSH
17316: LD_OWVAR 2
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: LD_INT 2
17327: PUSH
17328: LD_INT 30
17330: PUSH
17331: LD_INT 0
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: PUSH
17338: LD_INT 30
17340: PUSH
17341: LD_INT 1
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: LIST
17352: PUSH
17353: EMPTY
17354: LIST
17355: LIST
17356: PPUSH
17357: CALL_OW 69
17361: ST_TO_ADDR
// if not depot then
17362: LD_VAR 0 1
17366: NOT
17367: IFFALSE 17371
// exit ;
17369: GO 17406
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17371: LD_VAR 0 1
17375: PUSH
17376: LD_INT 1
17378: ARRAY
17379: PPUSH
17380: CALL_OW 250
17384: PPUSH
17385: LD_VAR 0 1
17389: PUSH
17390: LD_INT 1
17392: ARRAY
17393: PPUSH
17394: CALL_OW 251
17398: PPUSH
17399: LD_INT 70
17401: PPUSH
17402: CALL_OW 495
// end ;
17406: PPOPN 1
17408: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17409: LD_EXP 48
17413: PUSH
17414: LD_EXP 82
17418: AND
17419: IFFALSE 17630
17421: GO 17423
17423: DISABLE
17424: LD_INT 0
17426: PPUSH
17427: PPUSH
17428: PPUSH
17429: PPUSH
17430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17431: LD_ADDR_VAR 0 5
17435: PUSH
17436: LD_INT 22
17438: PUSH
17439: LD_OWVAR 2
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: PUSH
17448: LD_INT 21
17450: PUSH
17451: LD_INT 1
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: PPUSH
17462: CALL_OW 69
17466: ST_TO_ADDR
// if not tmp then
17467: LD_VAR 0 5
17471: NOT
17472: IFFALSE 17476
// exit ;
17474: GO 17630
// for i in tmp do
17476: LD_ADDR_VAR 0 1
17480: PUSH
17481: LD_VAR 0 5
17485: PUSH
17486: FOR_IN
17487: IFFALSE 17628
// begin d := rand ( 0 , 5 ) ;
17489: LD_ADDR_VAR 0 4
17493: PUSH
17494: LD_INT 0
17496: PPUSH
17497: LD_INT 5
17499: PPUSH
17500: CALL_OW 12
17504: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17505: LD_ADDR_VAR 0 2
17509: PUSH
17510: LD_VAR 0 1
17514: PPUSH
17515: CALL_OW 250
17519: PPUSH
17520: LD_VAR 0 4
17524: PPUSH
17525: LD_INT 3
17527: PPUSH
17528: LD_INT 12
17530: PPUSH
17531: CALL_OW 12
17535: PPUSH
17536: CALL_OW 272
17540: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17541: LD_ADDR_VAR 0 3
17545: PUSH
17546: LD_VAR 0 1
17550: PPUSH
17551: CALL_OW 251
17555: PPUSH
17556: LD_VAR 0 4
17560: PPUSH
17561: LD_INT 3
17563: PPUSH
17564: LD_INT 12
17566: PPUSH
17567: CALL_OW 12
17571: PPUSH
17572: CALL_OW 273
17576: ST_TO_ADDR
// if ValidHex ( x , y ) then
17577: LD_VAR 0 2
17581: PPUSH
17582: LD_VAR 0 3
17586: PPUSH
17587: CALL_OW 488
17591: IFFALSE 17626
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17593: LD_VAR 0 1
17597: PPUSH
17598: LD_VAR 0 2
17602: PPUSH
17603: LD_VAR 0 3
17607: PPUSH
17608: LD_INT 3
17610: PPUSH
17611: LD_INT 6
17613: PPUSH
17614: CALL_OW 12
17618: PPUSH
17619: LD_INT 1
17621: PPUSH
17622: CALL_OW 483
// end ;
17626: GO 17486
17628: POP
17629: POP
// end ;
17630: PPOPN 5
17632: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17633: LD_EXP 48
17637: PUSH
17638: LD_EXP 83
17642: AND
17643: IFFALSE 17737
17645: GO 17647
17647: DISABLE
17648: LD_INT 0
17650: PPUSH
17651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17652: LD_ADDR_VAR 0 2
17656: PUSH
17657: LD_INT 22
17659: PUSH
17660: LD_OWVAR 2
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 32
17671: PUSH
17672: LD_INT 1
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 21
17681: PUSH
17682: LD_INT 2
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: LIST
17693: PPUSH
17694: CALL_OW 69
17698: ST_TO_ADDR
// if not tmp then
17699: LD_VAR 0 2
17703: NOT
17704: IFFALSE 17708
// exit ;
17706: GO 17737
// for i in tmp do
17708: LD_ADDR_VAR 0 1
17712: PUSH
17713: LD_VAR 0 2
17717: PUSH
17718: FOR_IN
17719: IFFALSE 17735
// SetFuel ( i , 0 ) ;
17721: LD_VAR 0 1
17725: PPUSH
17726: LD_INT 0
17728: PPUSH
17729: CALL_OW 240
17733: GO 17718
17735: POP
17736: POP
// end ;
17737: PPOPN 2
17739: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17740: LD_EXP 48
17744: PUSH
17745: LD_EXP 84
17749: AND
17750: IFFALSE 17816
17752: GO 17754
17754: DISABLE
17755: LD_INT 0
17757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17758: LD_ADDR_VAR 0 1
17762: PUSH
17763: LD_INT 22
17765: PUSH
17766: LD_OWVAR 2
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 30
17777: PUSH
17778: LD_INT 29
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PPUSH
17789: CALL_OW 69
17793: ST_TO_ADDR
// if not tmp then
17794: LD_VAR 0 1
17798: NOT
17799: IFFALSE 17803
// exit ;
17801: GO 17816
// DestroyUnit ( tmp [ 1 ] ) ;
17803: LD_VAR 0 1
17807: PUSH
17808: LD_INT 1
17810: ARRAY
17811: PPUSH
17812: CALL_OW 65
// end ;
17816: PPOPN 1
17818: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17819: LD_EXP 48
17823: PUSH
17824: LD_EXP 86
17828: AND
17829: IFFALSE 17958
17831: GO 17833
17833: DISABLE
17834: LD_INT 0
17836: PPUSH
// begin uc_side := 0 ;
17837: LD_ADDR_OWVAR 20
17841: PUSH
17842: LD_INT 0
17844: ST_TO_ADDR
// uc_nation := nation_arabian ;
17845: LD_ADDR_OWVAR 21
17849: PUSH
17850: LD_INT 2
17852: ST_TO_ADDR
// hc_gallery :=  ;
17853: LD_ADDR_OWVAR 33
17857: PUSH
17858: LD_STRING 
17860: ST_TO_ADDR
// hc_name :=  ;
17861: LD_ADDR_OWVAR 26
17865: PUSH
17866: LD_STRING 
17868: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17869: LD_INT 1
17871: PPUSH
17872: LD_INT 11
17874: PPUSH
17875: LD_INT 10
17877: PPUSH
17878: CALL_OW 380
// un := CreateHuman ;
17882: LD_ADDR_VAR 0 1
17886: PUSH
17887: CALL_OW 44
17891: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17892: LD_VAR 0 1
17896: PPUSH
17897: LD_INT 1
17899: PPUSH
17900: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17904: LD_INT 35
17906: PPUSH
17907: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17911: LD_VAR 0 1
17915: PPUSH
17916: LD_INT 22
17918: PUSH
17919: LD_OWVAR 2
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PPUSH
17928: CALL_OW 69
17932: PPUSH
17933: LD_VAR 0 1
17937: PPUSH
17938: CALL_OW 74
17942: PPUSH
17943: CALL_OW 115
// until IsDead ( un ) ;
17947: LD_VAR 0 1
17951: PPUSH
17952: CALL_OW 301
17956: IFFALSE 17904
// end ;
17958: PPOPN 1
17960: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17961: LD_EXP 48
17965: PUSH
17966: LD_EXP 88
17970: AND
17971: IFFALSE 17983
17973: GO 17975
17975: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17976: LD_STRING earthquake(getX(game), 0, 32)
17978: PPUSH
17979: CALL_OW 559
17983: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17984: LD_EXP 48
17988: PUSH
17989: LD_EXP 89
17993: AND
17994: IFFALSE 18085
17996: GO 17998
17998: DISABLE
17999: LD_INT 0
18001: PPUSH
// begin enable ;
18002: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18003: LD_ADDR_VAR 0 1
18007: PUSH
18008: LD_INT 22
18010: PUSH
18011: LD_OWVAR 2
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 21
18022: PUSH
18023: LD_INT 2
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 33
18032: PUSH
18033: LD_INT 3
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: LIST
18044: PPUSH
18045: CALL_OW 69
18049: ST_TO_ADDR
// if not tmp then
18050: LD_VAR 0 1
18054: NOT
18055: IFFALSE 18059
// exit ;
18057: GO 18085
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18059: LD_VAR 0 1
18063: PUSH
18064: LD_INT 1
18066: PPUSH
18067: LD_VAR 0 1
18071: PPUSH
18072: CALL_OW 12
18076: ARRAY
18077: PPUSH
18078: LD_INT 1
18080: PPUSH
18081: CALL_OW 234
// end ;
18085: PPOPN 1
18087: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18088: LD_EXP 48
18092: PUSH
18093: LD_EXP 90
18097: AND
18098: IFFALSE 18239
18100: GO 18102
18102: DISABLE
18103: LD_INT 0
18105: PPUSH
18106: PPUSH
18107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18108: LD_ADDR_VAR 0 3
18112: PUSH
18113: LD_INT 22
18115: PUSH
18116: LD_OWVAR 2
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PUSH
18125: LD_INT 25
18127: PUSH
18128: LD_INT 1
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PPUSH
18139: CALL_OW 69
18143: ST_TO_ADDR
// if not tmp then
18144: LD_VAR 0 3
18148: NOT
18149: IFFALSE 18153
// exit ;
18151: GO 18239
// un := tmp [ rand ( 1 , tmp ) ] ;
18153: LD_ADDR_VAR 0 2
18157: PUSH
18158: LD_VAR 0 3
18162: PUSH
18163: LD_INT 1
18165: PPUSH
18166: LD_VAR 0 3
18170: PPUSH
18171: CALL_OW 12
18175: ARRAY
18176: ST_TO_ADDR
// if Crawls ( un ) then
18177: LD_VAR 0 2
18181: PPUSH
18182: CALL_OW 318
18186: IFFALSE 18197
// ComWalk ( un ) ;
18188: LD_VAR 0 2
18192: PPUSH
18193: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18197: LD_VAR 0 2
18201: PPUSH
18202: LD_INT 9
18204: PPUSH
18205: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18209: LD_INT 28
18211: PPUSH
18212: LD_OWVAR 2
18216: PPUSH
18217: LD_INT 2
18219: PPUSH
18220: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18224: LD_INT 29
18226: PPUSH
18227: LD_OWVAR 2
18231: PPUSH
18232: LD_INT 2
18234: PPUSH
18235: CALL_OW 322
// end ;
18239: PPOPN 3
18241: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18242: LD_EXP 48
18246: PUSH
18247: LD_EXP 91
18251: AND
18252: IFFALSE 18363
18254: GO 18256
18256: DISABLE
18257: LD_INT 0
18259: PPUSH
18260: PPUSH
18261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18262: LD_ADDR_VAR 0 3
18266: PUSH
18267: LD_INT 22
18269: PUSH
18270: LD_OWVAR 2
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 25
18281: PUSH
18282: LD_INT 1
18284: PUSH
18285: EMPTY
18286: LIST
18287: LIST
18288: PUSH
18289: EMPTY
18290: LIST
18291: LIST
18292: PPUSH
18293: CALL_OW 69
18297: ST_TO_ADDR
// if not tmp then
18298: LD_VAR 0 3
18302: NOT
18303: IFFALSE 18307
// exit ;
18305: GO 18363
// un := tmp [ rand ( 1 , tmp ) ] ;
18307: LD_ADDR_VAR 0 2
18311: PUSH
18312: LD_VAR 0 3
18316: PUSH
18317: LD_INT 1
18319: PPUSH
18320: LD_VAR 0 3
18324: PPUSH
18325: CALL_OW 12
18329: ARRAY
18330: ST_TO_ADDR
// if Crawls ( un ) then
18331: LD_VAR 0 2
18335: PPUSH
18336: CALL_OW 318
18340: IFFALSE 18351
// ComWalk ( un ) ;
18342: LD_VAR 0 2
18346: PPUSH
18347: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18351: LD_VAR 0 2
18355: PPUSH
18356: LD_INT 8
18358: PPUSH
18359: CALL_OW 336
// end ;
18363: PPOPN 3
18365: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18366: LD_EXP 48
18370: PUSH
18371: LD_EXP 92
18375: AND
18376: IFFALSE 18520
18378: GO 18380
18380: DISABLE
18381: LD_INT 0
18383: PPUSH
18384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18385: LD_ADDR_VAR 0 2
18389: PUSH
18390: LD_INT 22
18392: PUSH
18393: LD_OWVAR 2
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 21
18404: PUSH
18405: LD_INT 2
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: LD_INT 2
18414: PUSH
18415: LD_INT 34
18417: PUSH
18418: LD_INT 12
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 34
18427: PUSH
18428: LD_INT 51
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: PUSH
18435: LD_INT 34
18437: PUSH
18438: LD_INT 32
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: LIST
18455: PPUSH
18456: CALL_OW 69
18460: ST_TO_ADDR
// if not tmp then
18461: LD_VAR 0 2
18465: NOT
18466: IFFALSE 18470
// exit ;
18468: GO 18520
// for i in tmp do
18470: LD_ADDR_VAR 0 1
18474: PUSH
18475: LD_VAR 0 2
18479: PUSH
18480: FOR_IN
18481: IFFALSE 18518
// if GetCargo ( i , mat_artifact ) = 0 then
18483: LD_VAR 0 1
18487: PPUSH
18488: LD_INT 4
18490: PPUSH
18491: CALL_OW 289
18495: PUSH
18496: LD_INT 0
18498: EQUAL
18499: IFFALSE 18516
// SetCargo ( i , mat_siberit , 100 ) ;
18501: LD_VAR 0 1
18505: PPUSH
18506: LD_INT 3
18508: PPUSH
18509: LD_INT 100
18511: PPUSH
18512: CALL_OW 290
18516: GO 18480
18518: POP
18519: POP
// end ;
18520: PPOPN 2
18522: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18523: LD_EXP 48
18527: PUSH
18528: LD_EXP 93
18532: AND
18533: IFFALSE 18716
18535: GO 18537
18537: DISABLE
18538: LD_INT 0
18540: PPUSH
18541: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18542: LD_ADDR_VAR 0 2
18546: PUSH
18547: LD_INT 22
18549: PUSH
18550: LD_OWVAR 2
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PPUSH
18559: CALL_OW 69
18563: ST_TO_ADDR
// if not tmp then
18564: LD_VAR 0 2
18568: NOT
18569: IFFALSE 18573
// exit ;
18571: GO 18716
// for i := 1 to 2 do
18573: LD_ADDR_VAR 0 1
18577: PUSH
18578: DOUBLE
18579: LD_INT 1
18581: DEC
18582: ST_TO_ADDR
18583: LD_INT 2
18585: PUSH
18586: FOR_TO
18587: IFFALSE 18714
// begin uc_side := your_side ;
18589: LD_ADDR_OWVAR 20
18593: PUSH
18594: LD_OWVAR 2
18598: ST_TO_ADDR
// uc_nation := nation_american ;
18599: LD_ADDR_OWVAR 21
18603: PUSH
18604: LD_INT 1
18606: ST_TO_ADDR
// vc_chassis := us_morphling ;
18607: LD_ADDR_OWVAR 37
18611: PUSH
18612: LD_INT 5
18614: ST_TO_ADDR
// vc_engine := engine_siberite ;
18615: LD_ADDR_OWVAR 39
18619: PUSH
18620: LD_INT 3
18622: ST_TO_ADDR
// vc_control := control_computer ;
18623: LD_ADDR_OWVAR 38
18627: PUSH
18628: LD_INT 3
18630: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18631: LD_ADDR_OWVAR 40
18635: PUSH
18636: LD_INT 10
18638: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18639: LD_VAR 0 2
18643: PUSH
18644: LD_INT 1
18646: ARRAY
18647: PPUSH
18648: CALL_OW 310
18652: NOT
18653: IFFALSE 18700
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18655: CALL_OW 45
18659: PPUSH
18660: LD_VAR 0 2
18664: PUSH
18665: LD_INT 1
18667: ARRAY
18668: PPUSH
18669: CALL_OW 250
18673: PPUSH
18674: LD_VAR 0 2
18678: PUSH
18679: LD_INT 1
18681: ARRAY
18682: PPUSH
18683: CALL_OW 251
18687: PPUSH
18688: LD_INT 12
18690: PPUSH
18691: LD_INT 1
18693: PPUSH
18694: CALL_OW 50
18698: GO 18712
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18700: CALL_OW 45
18704: PPUSH
18705: LD_INT 1
18707: PPUSH
18708: CALL_OW 51
// end ;
18712: GO 18586
18714: POP
18715: POP
// end ;
18716: PPOPN 2
18718: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18719: LD_EXP 48
18723: PUSH
18724: LD_EXP 94
18728: AND
18729: IFFALSE 18951
18731: GO 18733
18733: DISABLE
18734: LD_INT 0
18736: PPUSH
18737: PPUSH
18738: PPUSH
18739: PPUSH
18740: PPUSH
18741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18742: LD_ADDR_VAR 0 6
18746: PUSH
18747: LD_INT 22
18749: PUSH
18750: LD_OWVAR 2
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 21
18761: PUSH
18762: LD_INT 1
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 3
18771: PUSH
18772: LD_INT 23
18774: PUSH
18775: LD_INT 0
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: EMPTY
18787: LIST
18788: LIST
18789: LIST
18790: PPUSH
18791: CALL_OW 69
18795: ST_TO_ADDR
// if not tmp then
18796: LD_VAR 0 6
18800: NOT
18801: IFFALSE 18805
// exit ;
18803: GO 18951
// s1 := rand ( 1 , 4 ) ;
18805: LD_ADDR_VAR 0 2
18809: PUSH
18810: LD_INT 1
18812: PPUSH
18813: LD_INT 4
18815: PPUSH
18816: CALL_OW 12
18820: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18821: LD_ADDR_VAR 0 4
18825: PUSH
18826: LD_VAR 0 6
18830: PUSH
18831: LD_INT 1
18833: ARRAY
18834: PPUSH
18835: LD_VAR 0 2
18839: PPUSH
18840: CALL_OW 259
18844: ST_TO_ADDR
// if s1 = 1 then
18845: LD_VAR 0 2
18849: PUSH
18850: LD_INT 1
18852: EQUAL
18853: IFFALSE 18873
// s2 := rand ( 2 , 4 ) else
18855: LD_ADDR_VAR 0 3
18859: PUSH
18860: LD_INT 2
18862: PPUSH
18863: LD_INT 4
18865: PPUSH
18866: CALL_OW 12
18870: ST_TO_ADDR
18871: GO 18881
// s2 := 1 ;
18873: LD_ADDR_VAR 0 3
18877: PUSH
18878: LD_INT 1
18880: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18881: LD_ADDR_VAR 0 5
18885: PUSH
18886: LD_VAR 0 6
18890: PUSH
18891: LD_INT 1
18893: ARRAY
18894: PPUSH
18895: LD_VAR 0 3
18899: PPUSH
18900: CALL_OW 259
18904: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18905: LD_VAR 0 6
18909: PUSH
18910: LD_INT 1
18912: ARRAY
18913: PPUSH
18914: LD_VAR 0 2
18918: PPUSH
18919: LD_VAR 0 5
18923: PPUSH
18924: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18928: LD_VAR 0 6
18932: PUSH
18933: LD_INT 1
18935: ARRAY
18936: PPUSH
18937: LD_VAR 0 3
18941: PPUSH
18942: LD_VAR 0 4
18946: PPUSH
18947: CALL_OW 237
// end ;
18951: PPOPN 6
18953: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18954: LD_EXP 48
18958: PUSH
18959: LD_EXP 95
18963: AND
18964: IFFALSE 19043
18966: GO 18968
18968: DISABLE
18969: LD_INT 0
18971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18972: LD_ADDR_VAR 0 1
18976: PUSH
18977: LD_INT 22
18979: PUSH
18980: LD_OWVAR 2
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 30
18991: PUSH
18992: LD_INT 3
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PPUSH
19003: CALL_OW 69
19007: ST_TO_ADDR
// if not tmp then
19008: LD_VAR 0 1
19012: NOT
19013: IFFALSE 19017
// exit ;
19015: GO 19043
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19017: LD_VAR 0 1
19021: PUSH
19022: LD_INT 1
19024: PPUSH
19025: LD_VAR 0 1
19029: PPUSH
19030: CALL_OW 12
19034: ARRAY
19035: PPUSH
19036: LD_INT 1
19038: PPUSH
19039: CALL_OW 234
// end ;
19043: PPOPN 1
19045: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19046: LD_EXP 48
19050: PUSH
19051: LD_EXP 96
19055: AND
19056: IFFALSE 19168
19058: GO 19060
19060: DISABLE
19061: LD_INT 0
19063: PPUSH
19064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19065: LD_ADDR_VAR 0 2
19069: PUSH
19070: LD_INT 22
19072: PUSH
19073: LD_OWVAR 2
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 2
19084: PUSH
19085: LD_INT 30
19087: PUSH
19088: LD_INT 27
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 30
19097: PUSH
19098: LD_INT 26
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: PUSH
19105: LD_INT 30
19107: PUSH
19108: LD_INT 28
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PPUSH
19125: CALL_OW 69
19129: ST_TO_ADDR
// if not tmp then
19130: LD_VAR 0 2
19134: NOT
19135: IFFALSE 19139
// exit ;
19137: GO 19168
// for i in tmp do
19139: LD_ADDR_VAR 0 1
19143: PUSH
19144: LD_VAR 0 2
19148: PUSH
19149: FOR_IN
19150: IFFALSE 19166
// SetLives ( i , 1 ) ;
19152: LD_VAR 0 1
19156: PPUSH
19157: LD_INT 1
19159: PPUSH
19160: CALL_OW 234
19164: GO 19149
19166: POP
19167: POP
// end ;
19168: PPOPN 2
19170: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19171: LD_EXP 48
19175: PUSH
19176: LD_EXP 97
19180: AND
19181: IFFALSE 19468
19183: GO 19185
19185: DISABLE
19186: LD_INT 0
19188: PPUSH
19189: PPUSH
19190: PPUSH
// begin i := rand ( 1 , 7 ) ;
19191: LD_ADDR_VAR 0 1
19195: PUSH
19196: LD_INT 1
19198: PPUSH
19199: LD_INT 7
19201: PPUSH
19202: CALL_OW 12
19206: ST_TO_ADDR
// case i of 1 :
19207: LD_VAR 0 1
19211: PUSH
19212: LD_INT 1
19214: DOUBLE
19215: EQUAL
19216: IFTRUE 19220
19218: GO 19230
19220: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19221: LD_STRING earthquake(getX(game), 0, 32)
19223: PPUSH
19224: CALL_OW 559
19228: GO 19468
19230: LD_INT 2
19232: DOUBLE
19233: EQUAL
19234: IFTRUE 19238
19236: GO 19252
19238: POP
// begin ToLua ( displayStucuk(); ) ;
19239: LD_STRING displayStucuk();
19241: PPUSH
19242: CALL_OW 559
// ResetFog ;
19246: CALL_OW 335
// end ; 3 :
19250: GO 19468
19252: LD_INT 3
19254: DOUBLE
19255: EQUAL
19256: IFTRUE 19260
19258: GO 19364
19260: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19261: LD_ADDR_VAR 0 2
19265: PUSH
19266: LD_INT 22
19268: PUSH
19269: LD_OWVAR 2
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 25
19280: PUSH
19281: LD_INT 1
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PPUSH
19292: CALL_OW 69
19296: ST_TO_ADDR
// if not tmp then
19297: LD_VAR 0 2
19301: NOT
19302: IFFALSE 19306
// exit ;
19304: GO 19468
// un := tmp [ rand ( 1 , tmp ) ] ;
19306: LD_ADDR_VAR 0 3
19310: PUSH
19311: LD_VAR 0 2
19315: PUSH
19316: LD_INT 1
19318: PPUSH
19319: LD_VAR 0 2
19323: PPUSH
19324: CALL_OW 12
19328: ARRAY
19329: ST_TO_ADDR
// if Crawls ( un ) then
19330: LD_VAR 0 3
19334: PPUSH
19335: CALL_OW 318
19339: IFFALSE 19350
// ComWalk ( un ) ;
19341: LD_VAR 0 3
19345: PPUSH
19346: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19350: LD_VAR 0 3
19354: PPUSH
19355: LD_INT 8
19357: PPUSH
19358: CALL_OW 336
// end ; 4 :
19362: GO 19468
19364: LD_INT 4
19366: DOUBLE
19367: EQUAL
19368: IFTRUE 19372
19370: GO 19446
19372: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19373: LD_ADDR_VAR 0 2
19377: PUSH
19378: LD_INT 22
19380: PUSH
19381: LD_OWVAR 2
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 30
19392: PUSH
19393: LD_INT 29
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PPUSH
19404: CALL_OW 69
19408: ST_TO_ADDR
// if not tmp then
19409: LD_VAR 0 2
19413: NOT
19414: IFFALSE 19418
// exit ;
19416: GO 19468
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19418: LD_VAR 0 2
19422: PUSH
19423: LD_INT 1
19425: ARRAY
19426: PPUSH
19427: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19431: LD_VAR 0 2
19435: PUSH
19436: LD_INT 1
19438: ARRAY
19439: PPUSH
19440: CALL_OW 65
// end ; 5 .. 7 :
19444: GO 19468
19446: LD_INT 5
19448: DOUBLE
19449: GREATEREQUAL
19450: IFFALSE 19458
19452: LD_INT 7
19454: DOUBLE
19455: LESSEQUAL
19456: IFTRUE 19460
19458: GO 19467
19460: POP
// StreamSibBomb ; end ;
19461: CALL 15705 0 0
19465: GO 19468
19467: POP
// end ;
19468: PPOPN 3
19470: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19471: LD_EXP 48
19475: PUSH
19476: LD_EXP 98
19480: AND
19481: IFFALSE 19637
19483: GO 19485
19485: DISABLE
19486: LD_INT 0
19488: PPUSH
19489: PPUSH
19490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19491: LD_ADDR_VAR 0 2
19495: PUSH
19496: LD_INT 81
19498: PUSH
19499: LD_OWVAR 2
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 2
19510: PUSH
19511: LD_INT 21
19513: PUSH
19514: LD_INT 1
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 21
19523: PUSH
19524: LD_INT 2
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: LIST
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PPUSH
19540: CALL_OW 69
19544: ST_TO_ADDR
// if not tmp then
19545: LD_VAR 0 2
19549: NOT
19550: IFFALSE 19554
// exit ;
19552: GO 19637
// p := 0 ;
19554: LD_ADDR_VAR 0 3
19558: PUSH
19559: LD_INT 0
19561: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19562: LD_INT 35
19564: PPUSH
19565: CALL_OW 67
// p := p + 1 ;
19569: LD_ADDR_VAR 0 3
19573: PUSH
19574: LD_VAR 0 3
19578: PUSH
19579: LD_INT 1
19581: PLUS
19582: ST_TO_ADDR
// for i in tmp do
19583: LD_ADDR_VAR 0 1
19587: PUSH
19588: LD_VAR 0 2
19592: PUSH
19593: FOR_IN
19594: IFFALSE 19625
// if GetLives ( i ) < 1000 then
19596: LD_VAR 0 1
19600: PPUSH
19601: CALL_OW 256
19605: PUSH
19606: LD_INT 1000
19608: LESS
19609: IFFALSE 19623
// SetLives ( i , 1000 ) ;
19611: LD_VAR 0 1
19615: PPUSH
19616: LD_INT 1000
19618: PPUSH
19619: CALL_OW 234
19623: GO 19593
19625: POP
19626: POP
// until p > 20 ;
19627: LD_VAR 0 3
19631: PUSH
19632: LD_INT 20
19634: GREATER
19635: IFFALSE 19562
// end ;
19637: PPOPN 3
19639: END
// every 0 0$1 trigger StreamModeActive and sTime do
19640: LD_EXP 48
19644: PUSH
19645: LD_EXP 99
19649: AND
19650: IFFALSE 19685
19652: GO 19654
19654: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19655: LD_INT 28
19657: PPUSH
19658: LD_OWVAR 2
19662: PPUSH
19663: LD_INT 2
19665: PPUSH
19666: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19670: LD_INT 30
19672: PPUSH
19673: LD_OWVAR 2
19677: PPUSH
19678: LD_INT 2
19680: PPUSH
19681: CALL_OW 322
// end ;
19685: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19686: LD_EXP 48
19690: PUSH
19691: LD_EXP 100
19695: AND
19696: IFFALSE 19817
19698: GO 19700
19700: DISABLE
19701: LD_INT 0
19703: PPUSH
19704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19705: LD_ADDR_VAR 0 2
19709: PUSH
19710: LD_INT 22
19712: PUSH
19713: LD_OWVAR 2
19717: PUSH
19718: EMPTY
19719: LIST
19720: LIST
19721: PUSH
19722: LD_INT 21
19724: PUSH
19725: LD_INT 1
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: PUSH
19732: LD_INT 3
19734: PUSH
19735: LD_INT 23
19737: PUSH
19738: LD_INT 0
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: LIST
19753: PPUSH
19754: CALL_OW 69
19758: ST_TO_ADDR
// if not tmp then
19759: LD_VAR 0 2
19763: NOT
19764: IFFALSE 19768
// exit ;
19766: GO 19817
// for i in tmp do
19768: LD_ADDR_VAR 0 1
19772: PUSH
19773: LD_VAR 0 2
19777: PUSH
19778: FOR_IN
19779: IFFALSE 19815
// begin if Crawls ( i ) then
19781: LD_VAR 0 1
19785: PPUSH
19786: CALL_OW 318
19790: IFFALSE 19801
// ComWalk ( i ) ;
19792: LD_VAR 0 1
19796: PPUSH
19797: CALL_OW 138
// SetClass ( i , 2 ) ;
19801: LD_VAR 0 1
19805: PPUSH
19806: LD_INT 2
19808: PPUSH
19809: CALL_OW 336
// end ;
19813: GO 19778
19815: POP
19816: POP
// end ;
19817: PPOPN 2
19819: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19820: LD_EXP 48
19824: PUSH
19825: LD_EXP 101
19829: AND
19830: IFFALSE 20118
19832: GO 19834
19834: DISABLE
19835: LD_INT 0
19837: PPUSH
19838: PPUSH
19839: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19840: LD_OWVAR 2
19844: PPUSH
19845: LD_INT 9
19847: PPUSH
19848: LD_INT 1
19850: PPUSH
19851: LD_INT 1
19853: PPUSH
19854: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19858: LD_INT 9
19860: PPUSH
19861: LD_OWVAR 2
19865: PPUSH
19866: CALL_OW 343
// uc_side := 9 ;
19870: LD_ADDR_OWVAR 20
19874: PUSH
19875: LD_INT 9
19877: ST_TO_ADDR
// uc_nation := 2 ;
19878: LD_ADDR_OWVAR 21
19882: PUSH
19883: LD_INT 2
19885: ST_TO_ADDR
// hc_name := Dark Warrior ;
19886: LD_ADDR_OWVAR 26
19890: PUSH
19891: LD_STRING Dark Warrior
19893: ST_TO_ADDR
// hc_gallery :=  ;
19894: LD_ADDR_OWVAR 33
19898: PUSH
19899: LD_STRING 
19901: ST_TO_ADDR
// hc_noskilllimit := true ;
19902: LD_ADDR_OWVAR 76
19906: PUSH
19907: LD_INT 1
19909: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19910: LD_ADDR_OWVAR 31
19914: PUSH
19915: LD_INT 30
19917: PUSH
19918: LD_INT 30
19920: PUSH
19921: LD_INT 30
19923: PUSH
19924: LD_INT 30
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: ST_TO_ADDR
// un := CreateHuman ;
19933: LD_ADDR_VAR 0 3
19937: PUSH
19938: CALL_OW 44
19942: ST_TO_ADDR
// hc_noskilllimit := false ;
19943: LD_ADDR_OWVAR 76
19947: PUSH
19948: LD_INT 0
19950: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19951: LD_VAR 0 3
19955: PPUSH
19956: LD_INT 1
19958: PPUSH
19959: CALL_OW 51
// ToLua ( playRanger() ) ;
19963: LD_STRING playRanger()
19965: PPUSH
19966: CALL_OW 559
// p := 0 ;
19970: LD_ADDR_VAR 0 2
19974: PUSH
19975: LD_INT 0
19977: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19978: LD_INT 35
19980: PPUSH
19981: CALL_OW 67
// p := p + 1 ;
19985: LD_ADDR_VAR 0 2
19989: PUSH
19990: LD_VAR 0 2
19994: PUSH
19995: LD_INT 1
19997: PLUS
19998: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19999: LD_VAR 0 3
20003: PPUSH
20004: CALL_OW 256
20008: PUSH
20009: LD_INT 1000
20011: LESS
20012: IFFALSE 20026
// SetLives ( un , 1000 ) ;
20014: LD_VAR 0 3
20018: PPUSH
20019: LD_INT 1000
20021: PPUSH
20022: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20026: LD_VAR 0 3
20030: PPUSH
20031: LD_INT 81
20033: PUSH
20034: LD_OWVAR 2
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 91
20045: PUSH
20046: LD_VAR 0 3
20050: PUSH
20051: LD_INT 30
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: LIST
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PPUSH
20063: CALL_OW 69
20067: PPUSH
20068: LD_VAR 0 3
20072: PPUSH
20073: CALL_OW 74
20077: PPUSH
20078: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20082: LD_VAR 0 2
20086: PUSH
20087: LD_INT 80
20089: GREATER
20090: PUSH
20091: LD_VAR 0 3
20095: PPUSH
20096: CALL_OW 301
20100: OR
20101: IFFALSE 19978
// if un then
20103: LD_VAR 0 3
20107: IFFALSE 20118
// RemoveUnit ( un ) ;
20109: LD_VAR 0 3
20113: PPUSH
20114: CALL_OW 64
// end ;
20118: PPOPN 3
20120: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20121: LD_EXP 102
20125: IFFALSE 20241
20127: GO 20129
20129: DISABLE
20130: LD_INT 0
20132: PPUSH
20133: PPUSH
20134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20135: LD_ADDR_VAR 0 2
20139: PUSH
20140: LD_INT 81
20142: PUSH
20143: LD_OWVAR 2
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 21
20154: PUSH
20155: LD_INT 1
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PPUSH
20166: CALL_OW 69
20170: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20171: LD_STRING playComputer()
20173: PPUSH
20174: CALL_OW 559
// if not tmp then
20178: LD_VAR 0 2
20182: NOT
20183: IFFALSE 20187
// exit ;
20185: GO 20241
// for i in tmp do
20187: LD_ADDR_VAR 0 1
20191: PUSH
20192: LD_VAR 0 2
20196: PUSH
20197: FOR_IN
20198: IFFALSE 20239
// for j := 1 to 4 do
20200: LD_ADDR_VAR 0 3
20204: PUSH
20205: DOUBLE
20206: LD_INT 1
20208: DEC
20209: ST_TO_ADDR
20210: LD_INT 4
20212: PUSH
20213: FOR_TO
20214: IFFALSE 20235
// SetSkill ( i , j , 10 ) ;
20216: LD_VAR 0 1
20220: PPUSH
20221: LD_VAR 0 3
20225: PPUSH
20226: LD_INT 10
20228: PPUSH
20229: CALL_OW 237
20233: GO 20213
20235: POP
20236: POP
20237: GO 20197
20239: POP
20240: POP
// end ;
20241: PPOPN 3
20243: END
// every 0 0$1 trigger s30 do var i , tmp ;
20244: LD_EXP 103
20248: IFFALSE 20317
20250: GO 20252
20252: DISABLE
20253: LD_INT 0
20255: PPUSH
20256: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20257: LD_ADDR_VAR 0 2
20261: PUSH
20262: LD_INT 22
20264: PUSH
20265: LD_OWVAR 2
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PPUSH
20274: CALL_OW 69
20278: ST_TO_ADDR
// if not tmp then
20279: LD_VAR 0 2
20283: NOT
20284: IFFALSE 20288
// exit ;
20286: GO 20317
// for i in tmp do
20288: LD_ADDR_VAR 0 1
20292: PUSH
20293: LD_VAR 0 2
20297: PUSH
20298: FOR_IN
20299: IFFALSE 20315
// SetLives ( i , 300 ) ;
20301: LD_VAR 0 1
20305: PPUSH
20306: LD_INT 300
20308: PPUSH
20309: CALL_OW 234
20313: GO 20298
20315: POP
20316: POP
// end ;
20317: PPOPN 2
20319: END
// every 0 0$1 trigger s60 do var i , tmp ;
20320: LD_EXP 104
20324: IFFALSE 20393
20326: GO 20328
20328: DISABLE
20329: LD_INT 0
20331: PPUSH
20332: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20333: LD_ADDR_VAR 0 2
20337: PUSH
20338: LD_INT 22
20340: PUSH
20341: LD_OWVAR 2
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PPUSH
20350: CALL_OW 69
20354: ST_TO_ADDR
// if not tmp then
20355: LD_VAR 0 2
20359: NOT
20360: IFFALSE 20364
// exit ;
20362: GO 20393
// for i in tmp do
20364: LD_ADDR_VAR 0 1
20368: PUSH
20369: LD_VAR 0 2
20373: PUSH
20374: FOR_IN
20375: IFFALSE 20391
// SetLives ( i , 600 ) ;
20377: LD_VAR 0 1
20381: PPUSH
20382: LD_INT 600
20384: PPUSH
20385: CALL_OW 234
20389: GO 20374
20391: POP
20392: POP
// end ;
20393: PPOPN 2
20395: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20396: LD_INT 0
20398: PPUSH
// case cmd of 301 :
20399: LD_VAR 0 1
20403: PUSH
20404: LD_INT 301
20406: DOUBLE
20407: EQUAL
20408: IFTRUE 20412
20410: GO 20444
20412: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20413: LD_VAR 0 6
20417: PPUSH
20418: LD_VAR 0 7
20422: PPUSH
20423: LD_VAR 0 8
20427: PPUSH
20428: LD_VAR 0 4
20432: PPUSH
20433: LD_VAR 0 5
20437: PPUSH
20438: CALL 21645 0 5
20442: GO 20565
20444: LD_INT 302
20446: DOUBLE
20447: EQUAL
20448: IFTRUE 20452
20450: GO 20489
20452: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20453: LD_VAR 0 6
20457: PPUSH
20458: LD_VAR 0 7
20462: PPUSH
20463: LD_VAR 0 8
20467: PPUSH
20468: LD_VAR 0 9
20472: PPUSH
20473: LD_VAR 0 4
20477: PPUSH
20478: LD_VAR 0 5
20482: PPUSH
20483: CALL 21736 0 6
20487: GO 20565
20489: LD_INT 303
20491: DOUBLE
20492: EQUAL
20493: IFTRUE 20497
20495: GO 20534
20497: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20498: LD_VAR 0 6
20502: PPUSH
20503: LD_VAR 0 7
20507: PPUSH
20508: LD_VAR 0 8
20512: PPUSH
20513: LD_VAR 0 9
20517: PPUSH
20518: LD_VAR 0 4
20522: PPUSH
20523: LD_VAR 0 5
20527: PPUSH
20528: CALL 20570 0 6
20532: GO 20565
20534: LD_INT 304
20536: DOUBLE
20537: EQUAL
20538: IFTRUE 20542
20540: GO 20564
20542: POP
// hHackTeleport ( unit , x , y ) ; end ;
20543: LD_VAR 0 2
20547: PPUSH
20548: LD_VAR 0 4
20552: PPUSH
20553: LD_VAR 0 5
20557: PPUSH
20558: CALL 22329 0 3
20562: GO 20565
20564: POP
// end ;
20565: LD_VAR 0 12
20569: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20570: LD_INT 0
20572: PPUSH
20573: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20574: LD_VAR 0 1
20578: PUSH
20579: LD_INT 1
20581: LESS
20582: PUSH
20583: LD_VAR 0 1
20587: PUSH
20588: LD_INT 3
20590: GREATER
20591: OR
20592: PUSH
20593: LD_VAR 0 5
20597: PPUSH
20598: LD_VAR 0 6
20602: PPUSH
20603: CALL_OW 428
20607: OR
20608: IFFALSE 20612
// exit ;
20610: GO 21332
// uc_side := your_side ;
20612: LD_ADDR_OWVAR 20
20616: PUSH
20617: LD_OWVAR 2
20621: ST_TO_ADDR
// uc_nation := nation ;
20622: LD_ADDR_OWVAR 21
20626: PUSH
20627: LD_VAR 0 1
20631: ST_TO_ADDR
// bc_level = 1 ;
20632: LD_ADDR_OWVAR 43
20636: PUSH
20637: LD_INT 1
20639: ST_TO_ADDR
// case btype of 1 :
20640: LD_VAR 0 2
20644: PUSH
20645: LD_INT 1
20647: DOUBLE
20648: EQUAL
20649: IFTRUE 20653
20651: GO 20664
20653: POP
// bc_type := b_depot ; 2 :
20654: LD_ADDR_OWVAR 42
20658: PUSH
20659: LD_INT 0
20661: ST_TO_ADDR
20662: GO 21276
20664: LD_INT 2
20666: DOUBLE
20667: EQUAL
20668: IFTRUE 20672
20670: GO 20683
20672: POP
// bc_type := b_warehouse ; 3 :
20673: LD_ADDR_OWVAR 42
20677: PUSH
20678: LD_INT 1
20680: ST_TO_ADDR
20681: GO 21276
20683: LD_INT 3
20685: DOUBLE
20686: EQUAL
20687: IFTRUE 20691
20689: GO 20702
20691: POP
// bc_type := b_lab ; 4 .. 9 :
20692: LD_ADDR_OWVAR 42
20696: PUSH
20697: LD_INT 6
20699: ST_TO_ADDR
20700: GO 21276
20702: LD_INT 4
20704: DOUBLE
20705: GREATEREQUAL
20706: IFFALSE 20714
20708: LD_INT 9
20710: DOUBLE
20711: LESSEQUAL
20712: IFTRUE 20716
20714: GO 20768
20716: POP
// begin bc_type := b_lab_half ;
20717: LD_ADDR_OWVAR 42
20721: PUSH
20722: LD_INT 7
20724: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20725: LD_ADDR_OWVAR 44
20729: PUSH
20730: LD_INT 10
20732: PUSH
20733: LD_INT 11
20735: PUSH
20736: LD_INT 12
20738: PUSH
20739: LD_INT 15
20741: PUSH
20742: LD_INT 14
20744: PUSH
20745: LD_INT 13
20747: PUSH
20748: EMPTY
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: PUSH
20756: LD_VAR 0 2
20760: PUSH
20761: LD_INT 3
20763: MINUS
20764: ARRAY
20765: ST_TO_ADDR
// end ; 10 .. 13 :
20766: GO 21276
20768: LD_INT 10
20770: DOUBLE
20771: GREATEREQUAL
20772: IFFALSE 20780
20774: LD_INT 13
20776: DOUBLE
20777: LESSEQUAL
20778: IFTRUE 20782
20780: GO 20859
20782: POP
// begin bc_type := b_lab_full ;
20783: LD_ADDR_OWVAR 42
20787: PUSH
20788: LD_INT 8
20790: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20791: LD_ADDR_OWVAR 44
20795: PUSH
20796: LD_INT 10
20798: PUSH
20799: LD_INT 12
20801: PUSH
20802: LD_INT 14
20804: PUSH
20805: LD_INT 13
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: PUSH
20814: LD_VAR 0 2
20818: PUSH
20819: LD_INT 9
20821: MINUS
20822: ARRAY
20823: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20824: LD_ADDR_OWVAR 45
20828: PUSH
20829: LD_INT 11
20831: PUSH
20832: LD_INT 15
20834: PUSH
20835: LD_INT 12
20837: PUSH
20838: LD_INT 15
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: LIST
20845: LIST
20846: PUSH
20847: LD_VAR 0 2
20851: PUSH
20852: LD_INT 9
20854: MINUS
20855: ARRAY
20856: ST_TO_ADDR
// end ; 14 :
20857: GO 21276
20859: LD_INT 14
20861: DOUBLE
20862: EQUAL
20863: IFTRUE 20867
20865: GO 20878
20867: POP
// bc_type := b_workshop ; 15 :
20868: LD_ADDR_OWVAR 42
20872: PUSH
20873: LD_INT 2
20875: ST_TO_ADDR
20876: GO 21276
20878: LD_INT 15
20880: DOUBLE
20881: EQUAL
20882: IFTRUE 20886
20884: GO 20897
20886: POP
// bc_type := b_factory ; 16 :
20887: LD_ADDR_OWVAR 42
20891: PUSH
20892: LD_INT 3
20894: ST_TO_ADDR
20895: GO 21276
20897: LD_INT 16
20899: DOUBLE
20900: EQUAL
20901: IFTRUE 20905
20903: GO 20916
20905: POP
// bc_type := b_ext_gun ; 17 :
20906: LD_ADDR_OWVAR 42
20910: PUSH
20911: LD_INT 17
20913: ST_TO_ADDR
20914: GO 21276
20916: LD_INT 17
20918: DOUBLE
20919: EQUAL
20920: IFTRUE 20924
20922: GO 20952
20924: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20925: LD_ADDR_OWVAR 42
20929: PUSH
20930: LD_INT 19
20932: PUSH
20933: LD_INT 23
20935: PUSH
20936: LD_INT 19
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: LIST
20943: PUSH
20944: LD_VAR 0 1
20948: ARRAY
20949: ST_TO_ADDR
20950: GO 21276
20952: LD_INT 18
20954: DOUBLE
20955: EQUAL
20956: IFTRUE 20960
20958: GO 20971
20960: POP
// bc_type := b_ext_radar ; 19 :
20961: LD_ADDR_OWVAR 42
20965: PUSH
20966: LD_INT 20
20968: ST_TO_ADDR
20969: GO 21276
20971: LD_INT 19
20973: DOUBLE
20974: EQUAL
20975: IFTRUE 20979
20977: GO 20990
20979: POP
// bc_type := b_ext_radio ; 20 :
20980: LD_ADDR_OWVAR 42
20984: PUSH
20985: LD_INT 22
20987: ST_TO_ADDR
20988: GO 21276
20990: LD_INT 20
20992: DOUBLE
20993: EQUAL
20994: IFTRUE 20998
20996: GO 21009
20998: POP
// bc_type := b_ext_siberium ; 21 :
20999: LD_ADDR_OWVAR 42
21003: PUSH
21004: LD_INT 21
21006: ST_TO_ADDR
21007: GO 21276
21009: LD_INT 21
21011: DOUBLE
21012: EQUAL
21013: IFTRUE 21017
21015: GO 21028
21017: POP
// bc_type := b_ext_computer ; 22 :
21018: LD_ADDR_OWVAR 42
21022: PUSH
21023: LD_INT 24
21025: ST_TO_ADDR
21026: GO 21276
21028: LD_INT 22
21030: DOUBLE
21031: EQUAL
21032: IFTRUE 21036
21034: GO 21047
21036: POP
// bc_type := b_ext_track ; 23 :
21037: LD_ADDR_OWVAR 42
21041: PUSH
21042: LD_INT 16
21044: ST_TO_ADDR
21045: GO 21276
21047: LD_INT 23
21049: DOUBLE
21050: EQUAL
21051: IFTRUE 21055
21053: GO 21066
21055: POP
// bc_type := b_ext_laser ; 24 :
21056: LD_ADDR_OWVAR 42
21060: PUSH
21061: LD_INT 25
21063: ST_TO_ADDR
21064: GO 21276
21066: LD_INT 24
21068: DOUBLE
21069: EQUAL
21070: IFTRUE 21074
21072: GO 21085
21074: POP
// bc_type := b_control_tower ; 25 :
21075: LD_ADDR_OWVAR 42
21079: PUSH
21080: LD_INT 36
21082: ST_TO_ADDR
21083: GO 21276
21085: LD_INT 25
21087: DOUBLE
21088: EQUAL
21089: IFTRUE 21093
21091: GO 21104
21093: POP
// bc_type := b_breastwork ; 26 :
21094: LD_ADDR_OWVAR 42
21098: PUSH
21099: LD_INT 31
21101: ST_TO_ADDR
21102: GO 21276
21104: LD_INT 26
21106: DOUBLE
21107: EQUAL
21108: IFTRUE 21112
21110: GO 21123
21112: POP
// bc_type := b_bunker ; 27 :
21113: LD_ADDR_OWVAR 42
21117: PUSH
21118: LD_INT 32
21120: ST_TO_ADDR
21121: GO 21276
21123: LD_INT 27
21125: DOUBLE
21126: EQUAL
21127: IFTRUE 21131
21129: GO 21142
21131: POP
// bc_type := b_turret ; 28 :
21132: LD_ADDR_OWVAR 42
21136: PUSH
21137: LD_INT 33
21139: ST_TO_ADDR
21140: GO 21276
21142: LD_INT 28
21144: DOUBLE
21145: EQUAL
21146: IFTRUE 21150
21148: GO 21161
21150: POP
// bc_type := b_armoury ; 29 :
21151: LD_ADDR_OWVAR 42
21155: PUSH
21156: LD_INT 4
21158: ST_TO_ADDR
21159: GO 21276
21161: LD_INT 29
21163: DOUBLE
21164: EQUAL
21165: IFTRUE 21169
21167: GO 21180
21169: POP
// bc_type := b_barracks ; 30 :
21170: LD_ADDR_OWVAR 42
21174: PUSH
21175: LD_INT 5
21177: ST_TO_ADDR
21178: GO 21276
21180: LD_INT 30
21182: DOUBLE
21183: EQUAL
21184: IFTRUE 21188
21186: GO 21199
21188: POP
// bc_type := b_solar_power ; 31 :
21189: LD_ADDR_OWVAR 42
21193: PUSH
21194: LD_INT 27
21196: ST_TO_ADDR
21197: GO 21276
21199: LD_INT 31
21201: DOUBLE
21202: EQUAL
21203: IFTRUE 21207
21205: GO 21218
21207: POP
// bc_type := b_oil_power ; 32 :
21208: LD_ADDR_OWVAR 42
21212: PUSH
21213: LD_INT 26
21215: ST_TO_ADDR
21216: GO 21276
21218: LD_INT 32
21220: DOUBLE
21221: EQUAL
21222: IFTRUE 21226
21224: GO 21237
21226: POP
// bc_type := b_siberite_power ; 33 :
21227: LD_ADDR_OWVAR 42
21231: PUSH
21232: LD_INT 28
21234: ST_TO_ADDR
21235: GO 21276
21237: LD_INT 33
21239: DOUBLE
21240: EQUAL
21241: IFTRUE 21245
21243: GO 21256
21245: POP
// bc_type := b_oil_mine ; 34 :
21246: LD_ADDR_OWVAR 42
21250: PUSH
21251: LD_INT 29
21253: ST_TO_ADDR
21254: GO 21276
21256: LD_INT 34
21258: DOUBLE
21259: EQUAL
21260: IFTRUE 21264
21262: GO 21275
21264: POP
// bc_type := b_siberite_mine ; end ;
21265: LD_ADDR_OWVAR 42
21269: PUSH
21270: LD_INT 30
21272: ST_TO_ADDR
21273: GO 21276
21275: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21276: LD_ADDR_VAR 0 8
21280: PUSH
21281: LD_VAR 0 5
21285: PPUSH
21286: LD_VAR 0 6
21290: PPUSH
21291: LD_VAR 0 3
21295: PPUSH
21296: CALL_OW 47
21300: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21301: LD_OWVAR 42
21305: PUSH
21306: LD_INT 32
21308: PUSH
21309: LD_INT 33
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: IN
21316: IFFALSE 21332
// PlaceWeaponTurret ( b , weapon ) ;
21318: LD_VAR 0 8
21322: PPUSH
21323: LD_VAR 0 4
21327: PPUSH
21328: CALL_OW 431
// end ;
21332: LD_VAR 0 7
21336: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21337: LD_INT 0
21339: PPUSH
21340: PPUSH
21341: PPUSH
21342: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21343: LD_ADDR_VAR 0 4
21347: PUSH
21348: LD_INT 22
21350: PUSH
21351: LD_OWVAR 2
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: LD_INT 2
21362: PUSH
21363: LD_INT 30
21365: PUSH
21366: LD_INT 0
21368: PUSH
21369: EMPTY
21370: LIST
21371: LIST
21372: PUSH
21373: LD_INT 30
21375: PUSH
21376: LD_INT 1
21378: PUSH
21379: EMPTY
21380: LIST
21381: LIST
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: LIST
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PPUSH
21392: CALL_OW 69
21396: ST_TO_ADDR
// if not tmp then
21397: LD_VAR 0 4
21401: NOT
21402: IFFALSE 21406
// exit ;
21404: GO 21465
// for i in tmp do
21406: LD_ADDR_VAR 0 2
21410: PUSH
21411: LD_VAR 0 4
21415: PUSH
21416: FOR_IN
21417: IFFALSE 21463
// for j = 1 to 3 do
21419: LD_ADDR_VAR 0 3
21423: PUSH
21424: DOUBLE
21425: LD_INT 1
21427: DEC
21428: ST_TO_ADDR
21429: LD_INT 3
21431: PUSH
21432: FOR_TO
21433: IFFALSE 21459
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21435: LD_VAR 0 2
21439: PPUSH
21440: CALL_OW 274
21444: PPUSH
21445: LD_VAR 0 3
21449: PPUSH
21450: LD_INT 99999
21452: PPUSH
21453: CALL_OW 277
21457: GO 21432
21459: POP
21460: POP
21461: GO 21416
21463: POP
21464: POP
// end ;
21465: LD_VAR 0 1
21469: RET
// export function hHackSetLevel10 ; var i , j ; begin
21470: LD_INT 0
21472: PPUSH
21473: PPUSH
21474: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21475: LD_ADDR_VAR 0 2
21479: PUSH
21480: LD_INT 21
21482: PUSH
21483: LD_INT 1
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: PPUSH
21490: CALL_OW 69
21494: PUSH
21495: FOR_IN
21496: IFFALSE 21548
// if IsSelected ( i ) then
21498: LD_VAR 0 2
21502: PPUSH
21503: CALL_OW 306
21507: IFFALSE 21546
// begin for j := 1 to 4 do
21509: LD_ADDR_VAR 0 3
21513: PUSH
21514: DOUBLE
21515: LD_INT 1
21517: DEC
21518: ST_TO_ADDR
21519: LD_INT 4
21521: PUSH
21522: FOR_TO
21523: IFFALSE 21544
// SetSkill ( i , j , 10 ) ;
21525: LD_VAR 0 2
21529: PPUSH
21530: LD_VAR 0 3
21534: PPUSH
21535: LD_INT 10
21537: PPUSH
21538: CALL_OW 237
21542: GO 21522
21544: POP
21545: POP
// end ;
21546: GO 21495
21548: POP
21549: POP
// end ;
21550: LD_VAR 0 1
21554: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21555: LD_INT 0
21557: PPUSH
21558: PPUSH
21559: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21560: LD_ADDR_VAR 0 2
21564: PUSH
21565: LD_INT 22
21567: PUSH
21568: LD_OWVAR 2
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 21
21579: PUSH
21580: LD_INT 1
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PPUSH
21591: CALL_OW 69
21595: PUSH
21596: FOR_IN
21597: IFFALSE 21638
// begin for j := 1 to 4 do
21599: LD_ADDR_VAR 0 3
21603: PUSH
21604: DOUBLE
21605: LD_INT 1
21607: DEC
21608: ST_TO_ADDR
21609: LD_INT 4
21611: PUSH
21612: FOR_TO
21613: IFFALSE 21634
// SetSkill ( i , j , 10 ) ;
21615: LD_VAR 0 2
21619: PPUSH
21620: LD_VAR 0 3
21624: PPUSH
21625: LD_INT 10
21627: PPUSH
21628: CALL_OW 237
21632: GO 21612
21634: POP
21635: POP
// end ;
21636: GO 21596
21638: POP
21639: POP
// end ;
21640: LD_VAR 0 1
21644: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21645: LD_INT 0
21647: PPUSH
// uc_side := your_side ;
21648: LD_ADDR_OWVAR 20
21652: PUSH
21653: LD_OWVAR 2
21657: ST_TO_ADDR
// uc_nation := nation ;
21658: LD_ADDR_OWVAR 21
21662: PUSH
21663: LD_VAR 0 1
21667: ST_TO_ADDR
// InitHc ;
21668: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21672: LD_INT 0
21674: PPUSH
21675: LD_VAR 0 2
21679: PPUSH
21680: LD_VAR 0 3
21684: PPUSH
21685: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21689: LD_VAR 0 4
21693: PPUSH
21694: LD_VAR 0 5
21698: PPUSH
21699: CALL_OW 428
21703: PUSH
21704: LD_INT 0
21706: EQUAL
21707: IFFALSE 21731
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21709: CALL_OW 44
21713: PPUSH
21714: LD_VAR 0 4
21718: PPUSH
21719: LD_VAR 0 5
21723: PPUSH
21724: LD_INT 1
21726: PPUSH
21727: CALL_OW 48
// end ;
21731: LD_VAR 0 6
21735: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21736: LD_INT 0
21738: PPUSH
21739: PPUSH
// uc_side := your_side ;
21740: LD_ADDR_OWVAR 20
21744: PUSH
21745: LD_OWVAR 2
21749: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21750: LD_VAR 0 1
21754: PUSH
21755: LD_INT 1
21757: PUSH
21758: LD_INT 2
21760: PUSH
21761: LD_INT 3
21763: PUSH
21764: LD_INT 4
21766: PUSH
21767: LD_INT 5
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: IN
21777: IFFALSE 21789
// uc_nation := nation_american else
21779: LD_ADDR_OWVAR 21
21783: PUSH
21784: LD_INT 1
21786: ST_TO_ADDR
21787: GO 21832
// if chassis in [ 11 , 12 , 13 , 14 ] then
21789: LD_VAR 0 1
21793: PUSH
21794: LD_INT 11
21796: PUSH
21797: LD_INT 12
21799: PUSH
21800: LD_INT 13
21802: PUSH
21803: LD_INT 14
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: IN
21812: IFFALSE 21824
// uc_nation := nation_arabian else
21814: LD_ADDR_OWVAR 21
21818: PUSH
21819: LD_INT 2
21821: ST_TO_ADDR
21822: GO 21832
// uc_nation := nation_russian ;
21824: LD_ADDR_OWVAR 21
21828: PUSH
21829: LD_INT 3
21831: ST_TO_ADDR
// vc_chassis := chassis ;
21832: LD_ADDR_OWVAR 37
21836: PUSH
21837: LD_VAR 0 1
21841: ST_TO_ADDR
// vc_engine := engine ;
21842: LD_ADDR_OWVAR 39
21846: PUSH
21847: LD_VAR 0 2
21851: ST_TO_ADDR
// vc_control := control ;
21852: LD_ADDR_OWVAR 38
21856: PUSH
21857: LD_VAR 0 3
21861: ST_TO_ADDR
// vc_weapon := weapon ;
21862: LD_ADDR_OWVAR 40
21866: PUSH
21867: LD_VAR 0 4
21871: ST_TO_ADDR
// un := CreateVehicle ;
21872: LD_ADDR_VAR 0 8
21876: PUSH
21877: CALL_OW 45
21881: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21882: LD_VAR 0 8
21886: PPUSH
21887: LD_INT 0
21889: PPUSH
21890: LD_INT 5
21892: PPUSH
21893: CALL_OW 12
21897: PPUSH
21898: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21902: LD_VAR 0 8
21906: PPUSH
21907: LD_VAR 0 5
21911: PPUSH
21912: LD_VAR 0 6
21916: PPUSH
21917: LD_INT 1
21919: PPUSH
21920: CALL_OW 48
// end ;
21924: LD_VAR 0 7
21928: RET
// export hInvincible ; every 1 do
21929: GO 21931
21931: DISABLE
// hInvincible := [ ] ;
21932: LD_ADDR_EXP 105
21936: PUSH
21937: EMPTY
21938: ST_TO_ADDR
21939: END
// every 10 do var i ;
21940: GO 21942
21942: DISABLE
21943: LD_INT 0
21945: PPUSH
// begin enable ;
21946: ENABLE
// if not hInvincible then
21947: LD_EXP 105
21951: NOT
21952: IFFALSE 21956
// exit ;
21954: GO 22000
// for i in hInvincible do
21956: LD_ADDR_VAR 0 1
21960: PUSH
21961: LD_EXP 105
21965: PUSH
21966: FOR_IN
21967: IFFALSE 21998
// if GetLives ( i ) < 1000 then
21969: LD_VAR 0 1
21973: PPUSH
21974: CALL_OW 256
21978: PUSH
21979: LD_INT 1000
21981: LESS
21982: IFFALSE 21996
// SetLives ( i , 1000 ) ;
21984: LD_VAR 0 1
21988: PPUSH
21989: LD_INT 1000
21991: PPUSH
21992: CALL_OW 234
21996: GO 21966
21998: POP
21999: POP
// end ;
22000: PPOPN 1
22002: END
// export function hHackInvincible ; var i ; begin
22003: LD_INT 0
22005: PPUSH
22006: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22007: LD_ADDR_VAR 0 2
22011: PUSH
22012: LD_INT 2
22014: PUSH
22015: LD_INT 21
22017: PUSH
22018: LD_INT 1
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 21
22027: PUSH
22028: LD_INT 2
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: LIST
22039: PPUSH
22040: CALL_OW 69
22044: PUSH
22045: FOR_IN
22046: IFFALSE 22107
// if IsSelected ( i ) then
22048: LD_VAR 0 2
22052: PPUSH
22053: CALL_OW 306
22057: IFFALSE 22105
// begin if i in hInvincible then
22059: LD_VAR 0 2
22063: PUSH
22064: LD_EXP 105
22068: IN
22069: IFFALSE 22089
// hInvincible := hInvincible diff i else
22071: LD_ADDR_EXP 105
22075: PUSH
22076: LD_EXP 105
22080: PUSH
22081: LD_VAR 0 2
22085: DIFF
22086: ST_TO_ADDR
22087: GO 22105
// hInvincible := hInvincible union i ;
22089: LD_ADDR_EXP 105
22093: PUSH
22094: LD_EXP 105
22098: PUSH
22099: LD_VAR 0 2
22103: UNION
22104: ST_TO_ADDR
// end ;
22105: GO 22045
22107: POP
22108: POP
// end ;
22109: LD_VAR 0 1
22113: RET
// export function hHackInvisible ; var i , j ; begin
22114: LD_INT 0
22116: PPUSH
22117: PPUSH
22118: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22119: LD_ADDR_VAR 0 2
22123: PUSH
22124: LD_INT 21
22126: PUSH
22127: LD_INT 1
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PPUSH
22134: CALL_OW 69
22138: PUSH
22139: FOR_IN
22140: IFFALSE 22164
// if IsSelected ( i ) then
22142: LD_VAR 0 2
22146: PPUSH
22147: CALL_OW 306
22151: IFFALSE 22162
// ComForceInvisible ( i ) ;
22153: LD_VAR 0 2
22157: PPUSH
22158: CALL_OW 496
22162: GO 22139
22164: POP
22165: POP
// end ;
22166: LD_VAR 0 1
22170: RET
// export function hHackChangeYourSide ; begin
22171: LD_INT 0
22173: PPUSH
// if your_side = 8 then
22174: LD_OWVAR 2
22178: PUSH
22179: LD_INT 8
22181: EQUAL
22182: IFFALSE 22194
// your_side := 0 else
22184: LD_ADDR_OWVAR 2
22188: PUSH
22189: LD_INT 0
22191: ST_TO_ADDR
22192: GO 22208
// your_side := your_side + 1 ;
22194: LD_ADDR_OWVAR 2
22198: PUSH
22199: LD_OWVAR 2
22203: PUSH
22204: LD_INT 1
22206: PLUS
22207: ST_TO_ADDR
// end ;
22208: LD_VAR 0 1
22212: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22213: LD_INT 0
22215: PPUSH
22216: PPUSH
22217: PPUSH
// for i in all_units do
22218: LD_ADDR_VAR 0 2
22222: PUSH
22223: LD_OWVAR 3
22227: PUSH
22228: FOR_IN
22229: IFFALSE 22307
// if IsSelected ( i ) then
22231: LD_VAR 0 2
22235: PPUSH
22236: CALL_OW 306
22240: IFFALSE 22305
// begin j := GetSide ( i ) ;
22242: LD_ADDR_VAR 0 3
22246: PUSH
22247: LD_VAR 0 2
22251: PPUSH
22252: CALL_OW 255
22256: ST_TO_ADDR
// if j = 8 then
22257: LD_VAR 0 3
22261: PUSH
22262: LD_INT 8
22264: EQUAL
22265: IFFALSE 22277
// j := 0 else
22267: LD_ADDR_VAR 0 3
22271: PUSH
22272: LD_INT 0
22274: ST_TO_ADDR
22275: GO 22291
// j := j + 1 ;
22277: LD_ADDR_VAR 0 3
22281: PUSH
22282: LD_VAR 0 3
22286: PUSH
22287: LD_INT 1
22289: PLUS
22290: ST_TO_ADDR
// SetSide ( i , j ) ;
22291: LD_VAR 0 2
22295: PPUSH
22296: LD_VAR 0 3
22300: PPUSH
22301: CALL_OW 235
// end ;
22305: GO 22228
22307: POP
22308: POP
// end ;
22309: LD_VAR 0 1
22313: RET
// export function hHackFog ; begin
22314: LD_INT 0
22316: PPUSH
// FogOff ( true ) ;
22317: LD_INT 1
22319: PPUSH
22320: CALL_OW 344
// end ;
22324: LD_VAR 0 1
22328: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22329: LD_INT 0
22331: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22332: LD_VAR 0 1
22336: PPUSH
22337: LD_VAR 0 2
22341: PPUSH
22342: LD_VAR 0 3
22346: PPUSH
22347: LD_INT 1
22349: PPUSH
22350: LD_INT 1
22352: PPUSH
22353: CALL_OW 483
// CenterOnXY ( x , y ) ;
22357: LD_VAR 0 2
22361: PPUSH
22362: LD_VAR 0 3
22366: PPUSH
22367: CALL_OW 84
// end ; end_of_file
22371: LD_VAR 0 4
22375: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
22376: LD_INT 0
22378: PPUSH
22379: PPUSH
22380: PPUSH
22381: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
22382: LD_VAR 0 1
22386: PPUSH
22387: CALL_OW 264
22391: PUSH
22392: LD_EXP 33
22396: EQUAL
22397: IFFALSE 22469
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
22399: LD_INT 68
22401: PPUSH
22402: LD_VAR 0 1
22406: PPUSH
22407: CALL_OW 255
22411: PPUSH
22412: CALL_OW 321
22416: PUSH
22417: LD_INT 2
22419: EQUAL
22420: IFFALSE 22432
// eff := 70 else
22422: LD_ADDR_VAR 0 4
22426: PUSH
22427: LD_INT 70
22429: ST_TO_ADDR
22430: GO 22440
// eff := 30 ;
22432: LD_ADDR_VAR 0 4
22436: PUSH
22437: LD_INT 30
22439: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
22440: LD_VAR 0 1
22444: PPUSH
22445: CALL_OW 250
22449: PPUSH
22450: LD_VAR 0 1
22454: PPUSH
22455: CALL_OW 251
22459: PPUSH
22460: LD_VAR 0 4
22464: PPUSH
22465: CALL_OW 495
// end ; end ;
22469: LD_VAR 0 2
22473: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
22474: LD_INT 0
22476: PPUSH
// end ;
22477: LD_VAR 0 4
22481: RET
// export function SOS_Command ( cmd ) ; begin
22482: LD_INT 0
22484: PPUSH
// end ;
22485: LD_VAR 0 2
22489: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
22490: LD_INT 0
22492: PPUSH
// end ;
22493: LD_VAR 0 6
22497: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
22498: LD_INT 0
22500: PPUSH
22501: PPUSH
// if not vehicle or not factory then
22502: LD_VAR 0 1
22506: NOT
22507: PUSH
22508: LD_VAR 0 2
22512: NOT
22513: OR
22514: IFFALSE 22518
// exit ;
22516: GO 22749
// if factoryWaypoints >= factory then
22518: LD_EXP 106
22522: PUSH
22523: LD_VAR 0 2
22527: GREATEREQUAL
22528: IFFALSE 22749
// if factoryWaypoints [ factory ] then
22530: LD_EXP 106
22534: PUSH
22535: LD_VAR 0 2
22539: ARRAY
22540: IFFALSE 22749
// begin if GetControl ( vehicle ) = control_manual then
22542: LD_VAR 0 1
22546: PPUSH
22547: CALL_OW 263
22551: PUSH
22552: LD_INT 1
22554: EQUAL
22555: IFFALSE 22636
// begin driver := IsDrivenBy ( vehicle ) ;
22557: LD_ADDR_VAR 0 4
22561: PUSH
22562: LD_VAR 0 1
22566: PPUSH
22567: CALL_OW 311
22571: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
22572: LD_VAR 0 4
22576: PPUSH
22577: LD_EXP 106
22581: PUSH
22582: LD_VAR 0 2
22586: ARRAY
22587: PUSH
22588: LD_INT 1
22590: ARRAY
22591: PPUSH
22592: LD_EXP 106
22596: PUSH
22597: LD_VAR 0 2
22601: ARRAY
22602: PUSH
22603: LD_INT 2
22605: ARRAY
22606: PPUSH
22607: CALL_OW 171
// AddComExitVehicle ( driver ) ;
22611: LD_VAR 0 4
22615: PPUSH
22616: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
22620: LD_VAR 0 4
22624: PPUSH
22625: LD_VAR 0 2
22629: PPUSH
22630: CALL_OW 180
// end else
22634: GO 22749
// if GetControl ( vehicle ) = control_remote then
22636: LD_VAR 0 1
22640: PPUSH
22641: CALL_OW 263
22645: PUSH
22646: LD_INT 2
22648: EQUAL
22649: IFFALSE 22710
// begin wait ( 0 0$2 ) ;
22651: LD_INT 70
22653: PPUSH
22654: CALL_OW 67
// if Connect ( vehicle ) then
22658: LD_VAR 0 1
22662: PPUSH
22663: CALL 34973 0 1
22667: IFFALSE 22708
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
22669: LD_VAR 0 1
22673: PPUSH
22674: LD_EXP 106
22678: PUSH
22679: LD_VAR 0 2
22683: ARRAY
22684: PUSH
22685: LD_INT 1
22687: ARRAY
22688: PPUSH
22689: LD_EXP 106
22693: PUSH
22694: LD_VAR 0 2
22698: ARRAY
22699: PUSH
22700: LD_INT 2
22702: ARRAY
22703: PPUSH
22704: CALL_OW 171
// end else
22708: GO 22749
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
22710: LD_VAR 0 1
22714: PPUSH
22715: LD_EXP 106
22719: PUSH
22720: LD_VAR 0 2
22724: ARRAY
22725: PUSH
22726: LD_INT 1
22728: ARRAY
22729: PPUSH
22730: LD_EXP 106
22734: PUSH
22735: LD_VAR 0 2
22739: ARRAY
22740: PUSH
22741: LD_INT 2
22743: ARRAY
22744: PPUSH
22745: CALL_OW 171
// end ; end ;
22749: LD_VAR 0 3
22753: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22754: LD_INT 0
22756: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22757: LD_VAR 0 1
22761: PUSH
22762: LD_INT 250
22764: EQUAL
22765: PUSH
22766: LD_VAR 0 2
22770: PPUSH
22771: CALL_OW 264
22775: PUSH
22776: LD_EXP 36
22780: EQUAL
22781: AND
22782: IFFALSE 22803
// MinerPlaceMine ( unit , x , y ) ;
22784: LD_VAR 0 2
22788: PPUSH
22789: LD_VAR 0 4
22793: PPUSH
22794: LD_VAR 0 5
22798: PPUSH
22799: CALL 25531 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22803: LD_VAR 0 1
22807: PUSH
22808: LD_INT 251
22810: EQUAL
22811: PUSH
22812: LD_VAR 0 2
22816: PPUSH
22817: CALL_OW 264
22821: PUSH
22822: LD_EXP 36
22826: EQUAL
22827: AND
22828: IFFALSE 22849
// MinerDetonateMine ( unit , x , y ) ;
22830: LD_VAR 0 2
22834: PPUSH
22835: LD_VAR 0 4
22839: PPUSH
22840: LD_VAR 0 5
22844: PPUSH
22845: CALL 25808 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22849: LD_VAR 0 1
22853: PUSH
22854: LD_INT 252
22856: EQUAL
22857: PUSH
22858: LD_VAR 0 2
22862: PPUSH
22863: CALL_OW 264
22867: PUSH
22868: LD_EXP 36
22872: EQUAL
22873: AND
22874: IFFALSE 22895
// MinerCreateMinefield ( unit , x , y ) ;
22876: LD_VAR 0 2
22880: PPUSH
22881: LD_VAR 0 4
22885: PPUSH
22886: LD_VAR 0 5
22890: PPUSH
22891: CALL 26225 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22895: LD_VAR 0 1
22899: PUSH
22900: LD_INT 253
22902: EQUAL
22903: PUSH
22904: LD_VAR 0 2
22908: PPUSH
22909: CALL_OW 257
22913: PUSH
22914: LD_INT 5
22916: EQUAL
22917: AND
22918: IFFALSE 22939
// ComBinocular ( unit , x , y ) ;
22920: LD_VAR 0 2
22924: PPUSH
22925: LD_VAR 0 4
22929: PPUSH
22930: LD_VAR 0 5
22934: PPUSH
22935: CALL 26596 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22939: LD_VAR 0 1
22943: PUSH
22944: LD_INT 254
22946: EQUAL
22947: PUSH
22948: LD_VAR 0 2
22952: PPUSH
22953: CALL_OW 264
22957: PUSH
22958: LD_EXP 31
22962: EQUAL
22963: AND
22964: PUSH
22965: LD_VAR 0 3
22969: PPUSH
22970: CALL_OW 263
22974: PUSH
22975: LD_INT 3
22977: EQUAL
22978: AND
22979: IFFALSE 22995
// HackDestroyVehicle ( unit , selectedUnit ) ;
22981: LD_VAR 0 2
22985: PPUSH
22986: LD_VAR 0 3
22990: PPUSH
22991: CALL 24891 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22995: LD_VAR 0 1
22999: PUSH
23000: LD_INT 255
23002: EQUAL
23003: PUSH
23004: LD_VAR 0 2
23008: PPUSH
23009: CALL_OW 264
23013: PUSH
23014: LD_INT 14
23016: PUSH
23017: LD_INT 53
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: IN
23024: AND
23025: PUSH
23026: LD_VAR 0 4
23030: PPUSH
23031: LD_VAR 0 5
23035: PPUSH
23036: CALL_OW 488
23040: AND
23041: IFFALSE 23065
// CutTreeXYR ( unit , x , y , 12 ) ;
23043: LD_VAR 0 2
23047: PPUSH
23048: LD_VAR 0 4
23052: PPUSH
23053: LD_VAR 0 5
23057: PPUSH
23058: LD_INT 12
23060: PPUSH
23061: CALL 23457 0 4
// if cmd = 256 then
23065: LD_VAR 0 1
23069: PUSH
23070: LD_INT 256
23072: EQUAL
23073: IFFALSE 23094
// SetFactoryWaypoint ( unit , x , y ) ;
23075: LD_VAR 0 2
23079: PPUSH
23080: LD_VAR 0 4
23084: PPUSH
23085: LD_VAR 0 5
23089: PPUSH
23090: CALL 23099 0 3
// end ;
23094: LD_VAR 0 6
23098: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23099: LD_INT 0
23101: PPUSH
23102: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23103: LD_VAR 0 1
23107: NOT
23108: PUSH
23109: LD_VAR 0 2
23113: PPUSH
23114: LD_VAR 0 3
23118: PPUSH
23119: CALL_OW 488
23123: NOT
23124: OR
23125: PUSH
23126: LD_VAR 0 1
23130: PPUSH
23131: CALL_OW 266
23135: PUSH
23136: LD_INT 3
23138: NONEQUAL
23139: PUSH
23140: LD_VAR 0 1
23144: PPUSH
23145: CALL_OW 247
23149: PUSH
23150: LD_INT 1
23152: EQUAL
23153: NOT
23154: AND
23155: OR
23156: IFFALSE 23160
// exit ;
23158: GO 23309
// if GetType ( factory ) = unit_human then
23160: LD_VAR 0 1
23164: PPUSH
23165: CALL_OW 247
23169: PUSH
23170: LD_INT 1
23172: EQUAL
23173: IFFALSE 23190
// factory := IsInUnit ( factory ) ;
23175: LD_ADDR_VAR 0 1
23179: PUSH
23180: LD_VAR 0 1
23184: PPUSH
23185: CALL_OW 310
23189: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23190: LD_VAR 0 1
23194: PPUSH
23195: CALL_OW 266
23199: PUSH
23200: LD_INT 3
23202: NONEQUAL
23203: IFFALSE 23207
// exit ;
23205: GO 23309
// if HexInfo ( x , y ) = factory then
23207: LD_VAR 0 2
23211: PPUSH
23212: LD_VAR 0 3
23216: PPUSH
23217: CALL_OW 428
23221: PUSH
23222: LD_VAR 0 1
23226: EQUAL
23227: IFFALSE 23254
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
23229: LD_ADDR_EXP 106
23233: PUSH
23234: LD_EXP 106
23238: PPUSH
23239: LD_VAR 0 1
23243: PPUSH
23244: LD_INT 0
23246: PPUSH
23247: CALL_OW 1
23251: ST_TO_ADDR
23252: GO 23305
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
23254: LD_ADDR_EXP 106
23258: PUSH
23259: LD_EXP 106
23263: PPUSH
23264: LD_VAR 0 1
23268: PPUSH
23269: LD_VAR 0 1
23273: PPUSH
23274: CALL_OW 255
23278: PUSH
23279: LD_VAR 0 1
23283: PUSH
23284: LD_VAR 0 2
23288: PUSH
23289: LD_VAR 0 3
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: PPUSH
23300: CALL_OW 1
23304: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23305: CALL 23314 0 0
// end ;
23309: LD_VAR 0 4
23313: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
23314: LD_INT 0
23316: PPUSH
23317: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
23318: LD_STRING resetFactoryWaypoint();
23320: PPUSH
23321: CALL_OW 559
// if factoryWaypoints then
23325: LD_EXP 106
23329: IFFALSE 23452
// begin for i := 1 to factoryWaypoints do
23331: LD_ADDR_VAR 0 2
23335: PUSH
23336: DOUBLE
23337: LD_INT 1
23339: DEC
23340: ST_TO_ADDR
23341: LD_EXP 106
23345: PUSH
23346: FOR_TO
23347: IFFALSE 23450
// if factoryWaypoints [ i ] then
23349: LD_EXP 106
23353: PUSH
23354: LD_VAR 0 2
23358: ARRAY
23359: IFFALSE 23448
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
23361: LD_STRING setFactoryWaypointXY(
23363: PUSH
23364: LD_EXP 106
23368: PUSH
23369: LD_VAR 0 2
23373: ARRAY
23374: PUSH
23375: LD_INT 1
23377: ARRAY
23378: STR
23379: PUSH
23380: LD_STRING ,
23382: STR
23383: PUSH
23384: LD_EXP 106
23388: PUSH
23389: LD_VAR 0 2
23393: ARRAY
23394: PUSH
23395: LD_INT 2
23397: ARRAY
23398: STR
23399: PUSH
23400: LD_STRING ,
23402: STR
23403: PUSH
23404: LD_EXP 106
23408: PUSH
23409: LD_VAR 0 2
23413: ARRAY
23414: PUSH
23415: LD_INT 3
23417: ARRAY
23418: STR
23419: PUSH
23420: LD_STRING ,
23422: STR
23423: PUSH
23424: LD_EXP 106
23428: PUSH
23429: LD_VAR 0 2
23433: ARRAY
23434: PUSH
23435: LD_INT 4
23437: ARRAY
23438: STR
23439: PUSH
23440: LD_STRING )
23442: STR
23443: PPUSH
23444: CALL_OW 559
23448: GO 23346
23450: POP
23451: POP
// end ; end ;
23452: LD_VAR 0 1
23456: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23457: LD_INT 0
23459: PPUSH
23460: PPUSH
23461: PPUSH
23462: PPUSH
23463: PPUSH
23464: PPUSH
23465: PPUSH
23466: PPUSH
23467: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23468: LD_VAR 0 1
23472: NOT
23473: PUSH
23474: LD_VAR 0 2
23478: PPUSH
23479: LD_VAR 0 3
23483: PPUSH
23484: CALL_OW 488
23488: NOT
23489: OR
23490: PUSH
23491: LD_VAR 0 4
23495: NOT
23496: OR
23497: IFFALSE 23501
// exit ;
23499: GO 23841
// list := [ ] ;
23501: LD_ADDR_VAR 0 13
23505: PUSH
23506: EMPTY
23507: ST_TO_ADDR
// if x - r < 0 then
23508: LD_VAR 0 2
23512: PUSH
23513: LD_VAR 0 4
23517: MINUS
23518: PUSH
23519: LD_INT 0
23521: LESS
23522: IFFALSE 23534
// min_x := 0 else
23524: LD_ADDR_VAR 0 7
23528: PUSH
23529: LD_INT 0
23531: ST_TO_ADDR
23532: GO 23550
// min_x := x - r ;
23534: LD_ADDR_VAR 0 7
23538: PUSH
23539: LD_VAR 0 2
23543: PUSH
23544: LD_VAR 0 4
23548: MINUS
23549: ST_TO_ADDR
// if y - r < 0 then
23550: LD_VAR 0 3
23554: PUSH
23555: LD_VAR 0 4
23559: MINUS
23560: PUSH
23561: LD_INT 0
23563: LESS
23564: IFFALSE 23576
// min_y := 0 else
23566: LD_ADDR_VAR 0 8
23570: PUSH
23571: LD_INT 0
23573: ST_TO_ADDR
23574: GO 23592
// min_y := y - r ;
23576: LD_ADDR_VAR 0 8
23580: PUSH
23581: LD_VAR 0 3
23585: PUSH
23586: LD_VAR 0 4
23590: MINUS
23591: ST_TO_ADDR
// max_x := x + r ;
23592: LD_ADDR_VAR 0 9
23596: PUSH
23597: LD_VAR 0 2
23601: PUSH
23602: LD_VAR 0 4
23606: PLUS
23607: ST_TO_ADDR
// max_y := y + r ;
23608: LD_ADDR_VAR 0 10
23612: PUSH
23613: LD_VAR 0 3
23617: PUSH
23618: LD_VAR 0 4
23622: PLUS
23623: ST_TO_ADDR
// for _x = min_x to max_x do
23624: LD_ADDR_VAR 0 11
23628: PUSH
23629: DOUBLE
23630: LD_VAR 0 7
23634: DEC
23635: ST_TO_ADDR
23636: LD_VAR 0 9
23640: PUSH
23641: FOR_TO
23642: IFFALSE 23759
// for _y = min_y to max_y do
23644: LD_ADDR_VAR 0 12
23648: PUSH
23649: DOUBLE
23650: LD_VAR 0 8
23654: DEC
23655: ST_TO_ADDR
23656: LD_VAR 0 10
23660: PUSH
23661: FOR_TO
23662: IFFALSE 23755
// begin if not ValidHex ( _x , _y ) then
23664: LD_VAR 0 11
23668: PPUSH
23669: LD_VAR 0 12
23673: PPUSH
23674: CALL_OW 488
23678: NOT
23679: IFFALSE 23683
// continue ;
23681: GO 23661
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23683: LD_VAR 0 11
23687: PPUSH
23688: LD_VAR 0 12
23692: PPUSH
23693: CALL_OW 351
23697: PUSH
23698: LD_VAR 0 11
23702: PPUSH
23703: LD_VAR 0 12
23707: PPUSH
23708: CALL_OW 554
23712: AND
23713: IFFALSE 23753
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23715: LD_ADDR_VAR 0 13
23719: PUSH
23720: LD_VAR 0 13
23724: PPUSH
23725: LD_VAR 0 13
23729: PUSH
23730: LD_INT 1
23732: PLUS
23733: PPUSH
23734: LD_VAR 0 11
23738: PUSH
23739: LD_VAR 0 12
23743: PUSH
23744: EMPTY
23745: LIST
23746: LIST
23747: PPUSH
23748: CALL_OW 2
23752: ST_TO_ADDR
// end ;
23753: GO 23661
23755: POP
23756: POP
23757: GO 23641
23759: POP
23760: POP
// if not list then
23761: LD_VAR 0 13
23765: NOT
23766: IFFALSE 23770
// exit ;
23768: GO 23841
// for i in list do
23770: LD_ADDR_VAR 0 6
23774: PUSH
23775: LD_VAR 0 13
23779: PUSH
23780: FOR_IN
23781: IFFALSE 23839
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23783: LD_VAR 0 1
23787: PPUSH
23788: LD_STRING M
23790: PUSH
23791: LD_VAR 0 6
23795: PUSH
23796: LD_INT 1
23798: ARRAY
23799: PUSH
23800: LD_VAR 0 6
23804: PUSH
23805: LD_INT 2
23807: ARRAY
23808: PUSH
23809: LD_INT 0
23811: PUSH
23812: LD_INT 0
23814: PUSH
23815: LD_INT 0
23817: PUSH
23818: LD_INT 0
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: PUSH
23830: EMPTY
23831: LIST
23832: PPUSH
23833: CALL_OW 447
23837: GO 23780
23839: POP
23840: POP
// end ;
23841: LD_VAR 0 5
23845: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23846: LD_EXP 107
23850: NOT
23851: IFFALSE 23901
23853: GO 23855
23855: DISABLE
// begin initHack := true ;
23856: LD_ADDR_EXP 107
23860: PUSH
23861: LD_INT 1
23863: ST_TO_ADDR
// hackTanks := [ ] ;
23864: LD_ADDR_EXP 108
23868: PUSH
23869: EMPTY
23870: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23871: LD_ADDR_EXP 109
23875: PUSH
23876: EMPTY
23877: ST_TO_ADDR
// hackLimit := 3 ;
23878: LD_ADDR_EXP 110
23882: PUSH
23883: LD_INT 3
23885: ST_TO_ADDR
// hackDist := 12 ;
23886: LD_ADDR_EXP 111
23890: PUSH
23891: LD_INT 12
23893: ST_TO_ADDR
// hackCounter := [ ] ;
23894: LD_ADDR_EXP 112
23898: PUSH
23899: EMPTY
23900: ST_TO_ADDR
// end ;
23901: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23902: LD_EXP 107
23906: PUSH
23907: LD_INT 34
23909: PUSH
23910: LD_EXP 31
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PPUSH
23919: CALL_OW 69
23923: AND
23924: IFFALSE 24179
23926: GO 23928
23928: DISABLE
23929: LD_INT 0
23931: PPUSH
23932: PPUSH
// begin enable ;
23933: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23934: LD_ADDR_VAR 0 1
23938: PUSH
23939: LD_INT 34
23941: PUSH
23942: LD_EXP 31
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PPUSH
23951: CALL_OW 69
23955: PUSH
23956: FOR_IN
23957: IFFALSE 24177
// begin if not i in hackTanks then
23959: LD_VAR 0 1
23963: PUSH
23964: LD_EXP 108
23968: IN
23969: NOT
23970: IFFALSE 24053
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23972: LD_ADDR_EXP 108
23976: PUSH
23977: LD_EXP 108
23981: PPUSH
23982: LD_EXP 108
23986: PUSH
23987: LD_INT 1
23989: PLUS
23990: PPUSH
23991: LD_VAR 0 1
23995: PPUSH
23996: CALL_OW 1
24000: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24001: LD_ADDR_EXP 109
24005: PUSH
24006: LD_EXP 109
24010: PPUSH
24011: LD_EXP 109
24015: PUSH
24016: LD_INT 1
24018: PLUS
24019: PPUSH
24020: EMPTY
24021: PPUSH
24022: CALL_OW 1
24026: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24027: LD_ADDR_EXP 112
24031: PUSH
24032: LD_EXP 112
24036: PPUSH
24037: LD_EXP 112
24041: PUSH
24042: LD_INT 1
24044: PLUS
24045: PPUSH
24046: EMPTY
24047: PPUSH
24048: CALL_OW 1
24052: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24053: LD_VAR 0 1
24057: PPUSH
24058: CALL_OW 302
24062: NOT
24063: IFFALSE 24076
// begin HackUnlinkAll ( i ) ;
24065: LD_VAR 0 1
24069: PPUSH
24070: CALL 24182 0 1
// continue ;
24074: GO 23956
// end ; HackCheckCapturedStatus ( i ) ;
24076: LD_VAR 0 1
24080: PPUSH
24081: CALL 24625 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24085: LD_ADDR_VAR 0 2
24089: PUSH
24090: LD_INT 81
24092: PUSH
24093: LD_VAR 0 1
24097: PPUSH
24098: CALL_OW 255
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 33
24109: PUSH
24110: LD_INT 3
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 91
24119: PUSH
24120: LD_VAR 0 1
24124: PUSH
24125: LD_EXP 111
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 50
24137: PUSH
24138: EMPTY
24139: LIST
24140: PUSH
24141: EMPTY
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: PPUSH
24147: CALL_OW 69
24151: ST_TO_ADDR
// if not tmp then
24152: LD_VAR 0 2
24156: NOT
24157: IFFALSE 24161
// continue ;
24159: GO 23956
// HackLink ( i , tmp ) ;
24161: LD_VAR 0 1
24165: PPUSH
24166: LD_VAR 0 2
24170: PPUSH
24171: CALL 24318 0 2
// end ;
24175: GO 23956
24177: POP
24178: POP
// end ;
24179: PPOPN 2
24181: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24182: LD_INT 0
24184: PPUSH
24185: PPUSH
24186: PPUSH
// if not hack in hackTanks then
24187: LD_VAR 0 1
24191: PUSH
24192: LD_EXP 108
24196: IN
24197: NOT
24198: IFFALSE 24202
// exit ;
24200: GO 24313
// index := GetElementIndex ( hackTanks , hack ) ;
24202: LD_ADDR_VAR 0 4
24206: PUSH
24207: LD_EXP 108
24211: PPUSH
24212: LD_VAR 0 1
24216: PPUSH
24217: CALL 31787 0 2
24221: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24222: LD_EXP 109
24226: PUSH
24227: LD_VAR 0 4
24231: ARRAY
24232: IFFALSE 24313
// begin for i in hackTanksCaptured [ index ] do
24234: LD_ADDR_VAR 0 3
24238: PUSH
24239: LD_EXP 109
24243: PUSH
24244: LD_VAR 0 4
24248: ARRAY
24249: PUSH
24250: FOR_IN
24251: IFFALSE 24277
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24253: LD_VAR 0 3
24257: PUSH
24258: LD_INT 1
24260: ARRAY
24261: PPUSH
24262: LD_VAR 0 3
24266: PUSH
24267: LD_INT 2
24269: ARRAY
24270: PPUSH
24271: CALL_OW 235
24275: GO 24250
24277: POP
24278: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24279: LD_ADDR_EXP 109
24283: PUSH
24284: LD_EXP 109
24288: PPUSH
24289: LD_VAR 0 4
24293: PPUSH
24294: EMPTY
24295: PPUSH
24296: CALL_OW 1
24300: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24301: LD_VAR 0 1
24305: PPUSH
24306: LD_INT 0
24308: PPUSH
24309: CALL_OW 505
// end ; end ;
24313: LD_VAR 0 2
24317: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24318: LD_INT 0
24320: PPUSH
24321: PPUSH
24322: PPUSH
// if not hack in hackTanks or not vehicles then
24323: LD_VAR 0 1
24327: PUSH
24328: LD_EXP 108
24332: IN
24333: NOT
24334: PUSH
24335: LD_VAR 0 2
24339: NOT
24340: OR
24341: IFFALSE 24345
// exit ;
24343: GO 24620
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24345: LD_ADDR_VAR 0 2
24349: PUSH
24350: LD_VAR 0 1
24354: PPUSH
24355: LD_VAR 0 2
24359: PPUSH
24360: LD_INT 1
24362: PPUSH
24363: LD_INT 1
24365: PPUSH
24366: CALL 32437 0 4
24370: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24371: LD_ADDR_VAR 0 5
24375: PUSH
24376: LD_EXP 108
24380: PPUSH
24381: LD_VAR 0 1
24385: PPUSH
24386: CALL 31787 0 2
24390: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24391: LD_EXP 109
24395: PUSH
24396: LD_VAR 0 5
24400: ARRAY
24401: PUSH
24402: LD_EXP 110
24406: LESS
24407: IFFALSE 24596
// begin for i := 1 to vehicles do
24409: LD_ADDR_VAR 0 4
24413: PUSH
24414: DOUBLE
24415: LD_INT 1
24417: DEC
24418: ST_TO_ADDR
24419: LD_VAR 0 2
24423: PUSH
24424: FOR_TO
24425: IFFALSE 24594
// begin if hackTanksCaptured [ index ] = hackLimit then
24427: LD_EXP 109
24431: PUSH
24432: LD_VAR 0 5
24436: ARRAY
24437: PUSH
24438: LD_EXP 110
24442: EQUAL
24443: IFFALSE 24447
// break ;
24445: GO 24594
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24447: LD_ADDR_EXP 112
24451: PUSH
24452: LD_EXP 112
24456: PPUSH
24457: LD_VAR 0 5
24461: PPUSH
24462: LD_EXP 112
24466: PUSH
24467: LD_VAR 0 5
24471: ARRAY
24472: PUSH
24473: LD_INT 1
24475: PLUS
24476: PPUSH
24477: CALL_OW 1
24481: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24482: LD_ADDR_EXP 109
24486: PUSH
24487: LD_EXP 109
24491: PPUSH
24492: LD_VAR 0 5
24496: PUSH
24497: LD_EXP 109
24501: PUSH
24502: LD_VAR 0 5
24506: ARRAY
24507: PUSH
24508: LD_INT 1
24510: PLUS
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PPUSH
24516: LD_VAR 0 2
24520: PUSH
24521: LD_VAR 0 4
24525: ARRAY
24526: PUSH
24527: LD_VAR 0 2
24531: PUSH
24532: LD_VAR 0 4
24536: ARRAY
24537: PPUSH
24538: CALL_OW 255
24542: PUSH
24543: EMPTY
24544: LIST
24545: LIST
24546: PPUSH
24547: CALL 32002 0 3
24551: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24552: LD_VAR 0 2
24556: PUSH
24557: LD_VAR 0 4
24561: ARRAY
24562: PPUSH
24563: LD_VAR 0 1
24567: PPUSH
24568: CALL_OW 255
24572: PPUSH
24573: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24577: LD_VAR 0 2
24581: PUSH
24582: LD_VAR 0 4
24586: ARRAY
24587: PPUSH
24588: CALL_OW 141
// end ;
24592: GO 24424
24594: POP
24595: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24596: LD_VAR 0 1
24600: PPUSH
24601: LD_EXP 109
24605: PUSH
24606: LD_VAR 0 5
24610: ARRAY
24611: PUSH
24612: LD_INT 0
24614: PLUS
24615: PPUSH
24616: CALL_OW 505
// end ;
24620: LD_VAR 0 3
24624: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24625: LD_INT 0
24627: PPUSH
24628: PPUSH
24629: PPUSH
24630: PPUSH
// if not hack in hackTanks then
24631: LD_VAR 0 1
24635: PUSH
24636: LD_EXP 108
24640: IN
24641: NOT
24642: IFFALSE 24646
// exit ;
24644: GO 24886
// index := GetElementIndex ( hackTanks , hack ) ;
24646: LD_ADDR_VAR 0 4
24650: PUSH
24651: LD_EXP 108
24655: PPUSH
24656: LD_VAR 0 1
24660: PPUSH
24661: CALL 31787 0 2
24665: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24666: LD_ADDR_VAR 0 3
24670: PUSH
24671: DOUBLE
24672: LD_EXP 109
24676: PUSH
24677: LD_VAR 0 4
24681: ARRAY
24682: INC
24683: ST_TO_ADDR
24684: LD_INT 1
24686: PUSH
24687: FOR_DOWNTO
24688: IFFALSE 24860
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24690: LD_ADDR_VAR 0 5
24694: PUSH
24695: LD_EXP 109
24699: PUSH
24700: LD_VAR 0 4
24704: ARRAY
24705: PUSH
24706: LD_VAR 0 3
24710: ARRAY
24711: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24712: LD_VAR 0 5
24716: PUSH
24717: LD_INT 1
24719: ARRAY
24720: PPUSH
24721: CALL_OW 302
24725: NOT
24726: PUSH
24727: LD_VAR 0 5
24731: PUSH
24732: LD_INT 1
24734: ARRAY
24735: PPUSH
24736: CALL_OW 255
24740: PUSH
24741: LD_VAR 0 1
24745: PPUSH
24746: CALL_OW 255
24750: NONEQUAL
24751: OR
24752: IFFALSE 24858
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24754: LD_VAR 0 5
24758: PUSH
24759: LD_INT 1
24761: ARRAY
24762: PPUSH
24763: CALL_OW 305
24767: PUSH
24768: LD_VAR 0 5
24772: PUSH
24773: LD_INT 1
24775: ARRAY
24776: PPUSH
24777: CALL_OW 255
24781: PUSH
24782: LD_VAR 0 1
24786: PPUSH
24787: CALL_OW 255
24791: EQUAL
24792: AND
24793: IFFALSE 24817
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24795: LD_VAR 0 5
24799: PUSH
24800: LD_INT 1
24802: ARRAY
24803: PPUSH
24804: LD_VAR 0 5
24808: PUSH
24809: LD_INT 2
24811: ARRAY
24812: PPUSH
24813: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24817: LD_ADDR_EXP 109
24821: PUSH
24822: LD_EXP 109
24826: PPUSH
24827: LD_VAR 0 4
24831: PPUSH
24832: LD_EXP 109
24836: PUSH
24837: LD_VAR 0 4
24841: ARRAY
24842: PPUSH
24843: LD_VAR 0 3
24847: PPUSH
24848: CALL_OW 3
24852: PPUSH
24853: CALL_OW 1
24857: ST_TO_ADDR
// end ; end ;
24858: GO 24687
24860: POP
24861: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24862: LD_VAR 0 1
24866: PPUSH
24867: LD_EXP 109
24871: PUSH
24872: LD_VAR 0 4
24876: ARRAY
24877: PUSH
24878: LD_INT 0
24880: PLUS
24881: PPUSH
24882: CALL_OW 505
// end ;
24886: LD_VAR 0 2
24890: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24891: LD_INT 0
24893: PPUSH
24894: PPUSH
24895: PPUSH
24896: PPUSH
// if not hack in hackTanks then
24897: LD_VAR 0 1
24901: PUSH
24902: LD_EXP 108
24906: IN
24907: NOT
24908: IFFALSE 24912
// exit ;
24910: GO 24997
// index := GetElementIndex ( hackTanks , hack ) ;
24912: LD_ADDR_VAR 0 5
24916: PUSH
24917: LD_EXP 108
24921: PPUSH
24922: LD_VAR 0 1
24926: PPUSH
24927: CALL 31787 0 2
24931: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24932: LD_ADDR_VAR 0 4
24936: PUSH
24937: DOUBLE
24938: LD_INT 1
24940: DEC
24941: ST_TO_ADDR
24942: LD_EXP 109
24946: PUSH
24947: LD_VAR 0 5
24951: ARRAY
24952: PUSH
24953: FOR_TO
24954: IFFALSE 24995
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24956: LD_EXP 109
24960: PUSH
24961: LD_VAR 0 5
24965: ARRAY
24966: PUSH
24967: LD_VAR 0 4
24971: ARRAY
24972: PUSH
24973: LD_INT 1
24975: ARRAY
24976: PUSH
24977: LD_VAR 0 2
24981: EQUAL
24982: IFFALSE 24993
// KillUnit ( vehicle ) ;
24984: LD_VAR 0 2
24988: PPUSH
24989: CALL_OW 66
24993: GO 24953
24995: POP
24996: POP
// end ;
24997: LD_VAR 0 3
25001: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25002: LD_EXP 113
25006: NOT
25007: IFFALSE 25042
25009: GO 25011
25011: DISABLE
// begin initMiner := true ;
25012: LD_ADDR_EXP 113
25016: PUSH
25017: LD_INT 1
25019: ST_TO_ADDR
// minersList := [ ] ;
25020: LD_ADDR_EXP 114
25024: PUSH
25025: EMPTY
25026: ST_TO_ADDR
// minerMinesList := [ ] ;
25027: LD_ADDR_EXP 115
25031: PUSH
25032: EMPTY
25033: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25034: LD_ADDR_EXP 116
25038: PUSH
25039: LD_INT 5
25041: ST_TO_ADDR
// end ;
25042: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25043: LD_EXP 113
25047: PUSH
25048: LD_INT 34
25050: PUSH
25051: LD_EXP 36
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PPUSH
25060: CALL_OW 69
25064: AND
25065: IFFALSE 25528
25067: GO 25069
25069: DISABLE
25070: LD_INT 0
25072: PPUSH
25073: PPUSH
25074: PPUSH
25075: PPUSH
// begin enable ;
25076: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25077: LD_ADDR_VAR 0 1
25081: PUSH
25082: LD_INT 34
25084: PUSH
25085: LD_EXP 36
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PPUSH
25094: CALL_OW 69
25098: PUSH
25099: FOR_IN
25100: IFFALSE 25172
// begin if not i in minersList then
25102: LD_VAR 0 1
25106: PUSH
25107: LD_EXP 114
25111: IN
25112: NOT
25113: IFFALSE 25170
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25115: LD_ADDR_EXP 114
25119: PUSH
25120: LD_EXP 114
25124: PPUSH
25125: LD_EXP 114
25129: PUSH
25130: LD_INT 1
25132: PLUS
25133: PPUSH
25134: LD_VAR 0 1
25138: PPUSH
25139: CALL_OW 1
25143: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25144: LD_ADDR_EXP 115
25148: PUSH
25149: LD_EXP 115
25153: PPUSH
25154: LD_EXP 115
25158: PUSH
25159: LD_INT 1
25161: PLUS
25162: PPUSH
25163: EMPTY
25164: PPUSH
25165: CALL_OW 1
25169: ST_TO_ADDR
// end end ;
25170: GO 25099
25172: POP
25173: POP
// for i := minerMinesList downto 1 do
25174: LD_ADDR_VAR 0 1
25178: PUSH
25179: DOUBLE
25180: LD_EXP 115
25184: INC
25185: ST_TO_ADDR
25186: LD_INT 1
25188: PUSH
25189: FOR_DOWNTO
25190: IFFALSE 25526
// begin if IsLive ( minersList [ i ] ) then
25192: LD_EXP 114
25196: PUSH
25197: LD_VAR 0 1
25201: ARRAY
25202: PPUSH
25203: CALL_OW 300
25207: IFFALSE 25235
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25209: LD_EXP 114
25213: PUSH
25214: LD_VAR 0 1
25218: ARRAY
25219: PPUSH
25220: LD_EXP 115
25224: PUSH
25225: LD_VAR 0 1
25229: ARRAY
25230: PPUSH
25231: CALL_OW 505
// if not minerMinesList [ i ] then
25235: LD_EXP 115
25239: PUSH
25240: LD_VAR 0 1
25244: ARRAY
25245: NOT
25246: IFFALSE 25250
// continue ;
25248: GO 25189
// for j := minerMinesList [ i ] downto 1 do
25250: LD_ADDR_VAR 0 2
25254: PUSH
25255: DOUBLE
25256: LD_EXP 115
25260: PUSH
25261: LD_VAR 0 1
25265: ARRAY
25266: INC
25267: ST_TO_ADDR
25268: LD_INT 1
25270: PUSH
25271: FOR_DOWNTO
25272: IFFALSE 25522
// begin side := GetSide ( minersList [ i ] ) ;
25274: LD_ADDR_VAR 0 3
25278: PUSH
25279: LD_EXP 114
25283: PUSH
25284: LD_VAR 0 1
25288: ARRAY
25289: PPUSH
25290: CALL_OW 255
25294: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25295: LD_ADDR_VAR 0 4
25299: PUSH
25300: LD_EXP 115
25304: PUSH
25305: LD_VAR 0 1
25309: ARRAY
25310: PUSH
25311: LD_VAR 0 2
25315: ARRAY
25316: PUSH
25317: LD_INT 1
25319: ARRAY
25320: PPUSH
25321: LD_EXP 115
25325: PUSH
25326: LD_VAR 0 1
25330: ARRAY
25331: PUSH
25332: LD_VAR 0 2
25336: ARRAY
25337: PUSH
25338: LD_INT 2
25340: ARRAY
25341: PPUSH
25342: CALL_OW 428
25346: ST_TO_ADDR
// if not tmp then
25347: LD_VAR 0 4
25351: NOT
25352: IFFALSE 25356
// continue ;
25354: GO 25271
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25356: LD_VAR 0 4
25360: PUSH
25361: LD_INT 81
25363: PUSH
25364: LD_VAR 0 3
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PPUSH
25373: CALL_OW 69
25377: IN
25378: PUSH
25379: LD_EXP 115
25383: PUSH
25384: LD_VAR 0 1
25388: ARRAY
25389: PUSH
25390: LD_VAR 0 2
25394: ARRAY
25395: PUSH
25396: LD_INT 1
25398: ARRAY
25399: PPUSH
25400: LD_EXP 115
25404: PUSH
25405: LD_VAR 0 1
25409: ARRAY
25410: PUSH
25411: LD_VAR 0 2
25415: ARRAY
25416: PUSH
25417: LD_INT 2
25419: ARRAY
25420: PPUSH
25421: CALL_OW 458
25425: AND
25426: IFFALSE 25520
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25428: LD_EXP 115
25432: PUSH
25433: LD_VAR 0 1
25437: ARRAY
25438: PUSH
25439: LD_VAR 0 2
25443: ARRAY
25444: PUSH
25445: LD_INT 1
25447: ARRAY
25448: PPUSH
25449: LD_EXP 115
25453: PUSH
25454: LD_VAR 0 1
25458: ARRAY
25459: PUSH
25460: LD_VAR 0 2
25464: ARRAY
25465: PUSH
25466: LD_INT 2
25468: ARRAY
25469: PPUSH
25470: LD_VAR 0 3
25474: PPUSH
25475: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25479: LD_ADDR_EXP 115
25483: PUSH
25484: LD_EXP 115
25488: PPUSH
25489: LD_VAR 0 1
25493: PPUSH
25494: LD_EXP 115
25498: PUSH
25499: LD_VAR 0 1
25503: ARRAY
25504: PPUSH
25505: LD_VAR 0 2
25509: PPUSH
25510: CALL_OW 3
25514: PPUSH
25515: CALL_OW 1
25519: ST_TO_ADDR
// end ; end ;
25520: GO 25271
25522: POP
25523: POP
// end ;
25524: GO 25189
25526: POP
25527: POP
// end ;
25528: PPOPN 4
25530: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25531: LD_INT 0
25533: PPUSH
25534: PPUSH
// result := false ;
25535: LD_ADDR_VAR 0 4
25539: PUSH
25540: LD_INT 0
25542: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25543: LD_VAR 0 1
25547: PPUSH
25548: CALL_OW 264
25552: PUSH
25553: LD_EXP 36
25557: EQUAL
25558: NOT
25559: IFFALSE 25563
// exit ;
25561: GO 25803
// index := GetElementIndex ( minersList , unit ) ;
25563: LD_ADDR_VAR 0 5
25567: PUSH
25568: LD_EXP 114
25572: PPUSH
25573: LD_VAR 0 1
25577: PPUSH
25578: CALL 31787 0 2
25582: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25583: LD_EXP 115
25587: PUSH
25588: LD_VAR 0 5
25592: ARRAY
25593: PUSH
25594: LD_EXP 116
25598: GREATEREQUAL
25599: IFFALSE 25603
// exit ;
25601: GO 25803
// ComMoveXY ( unit , x , y ) ;
25603: LD_VAR 0 1
25607: PPUSH
25608: LD_VAR 0 2
25612: PPUSH
25613: LD_VAR 0 3
25617: PPUSH
25618: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25622: LD_INT 35
25624: PPUSH
25625: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25629: LD_VAR 0 1
25633: PPUSH
25634: LD_VAR 0 2
25638: PPUSH
25639: LD_VAR 0 3
25643: PPUSH
25644: CALL 62559 0 3
25648: NOT
25649: PUSH
25650: LD_VAR 0 1
25654: PPUSH
25655: CALL_OW 314
25659: AND
25660: IFFALSE 25664
// exit ;
25662: GO 25803
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25664: LD_VAR 0 2
25668: PPUSH
25669: LD_VAR 0 3
25673: PPUSH
25674: CALL_OW 428
25678: PUSH
25679: LD_VAR 0 1
25683: EQUAL
25684: PUSH
25685: LD_VAR 0 1
25689: PPUSH
25690: CALL_OW 314
25694: NOT
25695: AND
25696: IFFALSE 25622
// PlaySoundXY ( x , y , PlantMine ) ;
25698: LD_VAR 0 2
25702: PPUSH
25703: LD_VAR 0 3
25707: PPUSH
25708: LD_STRING PlantMine
25710: PPUSH
25711: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25715: LD_VAR 0 2
25719: PPUSH
25720: LD_VAR 0 3
25724: PPUSH
25725: LD_VAR 0 1
25729: PPUSH
25730: CALL_OW 255
25734: PPUSH
25735: LD_INT 0
25737: PPUSH
25738: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25742: LD_ADDR_EXP 115
25746: PUSH
25747: LD_EXP 115
25751: PPUSH
25752: LD_VAR 0 5
25756: PUSH
25757: LD_EXP 115
25761: PUSH
25762: LD_VAR 0 5
25766: ARRAY
25767: PUSH
25768: LD_INT 1
25770: PLUS
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PPUSH
25776: LD_VAR 0 2
25780: PUSH
25781: LD_VAR 0 3
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PPUSH
25790: CALL 32002 0 3
25794: ST_TO_ADDR
// result := true ;
25795: LD_ADDR_VAR 0 4
25799: PUSH
25800: LD_INT 1
25802: ST_TO_ADDR
// end ;
25803: LD_VAR 0 4
25807: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25808: LD_INT 0
25810: PPUSH
25811: PPUSH
25812: PPUSH
// if not unit in minersList then
25813: LD_VAR 0 1
25817: PUSH
25818: LD_EXP 114
25822: IN
25823: NOT
25824: IFFALSE 25828
// exit ;
25826: GO 26220
// index := GetElementIndex ( minersList , unit ) ;
25828: LD_ADDR_VAR 0 6
25832: PUSH
25833: LD_EXP 114
25837: PPUSH
25838: LD_VAR 0 1
25842: PPUSH
25843: CALL 31787 0 2
25847: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25848: LD_ADDR_VAR 0 5
25852: PUSH
25853: DOUBLE
25854: LD_EXP 115
25858: PUSH
25859: LD_VAR 0 6
25863: ARRAY
25864: INC
25865: ST_TO_ADDR
25866: LD_INT 1
25868: PUSH
25869: FOR_DOWNTO
25870: IFFALSE 26031
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25872: LD_EXP 115
25876: PUSH
25877: LD_VAR 0 6
25881: ARRAY
25882: PUSH
25883: LD_VAR 0 5
25887: ARRAY
25888: PUSH
25889: LD_INT 1
25891: ARRAY
25892: PUSH
25893: LD_VAR 0 2
25897: EQUAL
25898: PUSH
25899: LD_EXP 115
25903: PUSH
25904: LD_VAR 0 6
25908: ARRAY
25909: PUSH
25910: LD_VAR 0 5
25914: ARRAY
25915: PUSH
25916: LD_INT 2
25918: ARRAY
25919: PUSH
25920: LD_VAR 0 3
25924: EQUAL
25925: AND
25926: IFFALSE 26029
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25928: LD_EXP 115
25932: PUSH
25933: LD_VAR 0 6
25937: ARRAY
25938: PUSH
25939: LD_VAR 0 5
25943: ARRAY
25944: PUSH
25945: LD_INT 1
25947: ARRAY
25948: PPUSH
25949: LD_EXP 115
25953: PUSH
25954: LD_VAR 0 6
25958: ARRAY
25959: PUSH
25960: LD_VAR 0 5
25964: ARRAY
25965: PUSH
25966: LD_INT 2
25968: ARRAY
25969: PPUSH
25970: LD_VAR 0 1
25974: PPUSH
25975: CALL_OW 255
25979: PPUSH
25980: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25984: LD_ADDR_EXP 115
25988: PUSH
25989: LD_EXP 115
25993: PPUSH
25994: LD_VAR 0 6
25998: PPUSH
25999: LD_EXP 115
26003: PUSH
26004: LD_VAR 0 6
26008: ARRAY
26009: PPUSH
26010: LD_VAR 0 5
26014: PPUSH
26015: CALL_OW 3
26019: PPUSH
26020: CALL_OW 1
26024: ST_TO_ADDR
// exit ;
26025: POP
26026: POP
26027: GO 26220
// end ; end ;
26029: GO 25869
26031: POP
26032: POP
// for i := minerMinesList [ index ] downto 1 do
26033: LD_ADDR_VAR 0 5
26037: PUSH
26038: DOUBLE
26039: LD_EXP 115
26043: PUSH
26044: LD_VAR 0 6
26048: ARRAY
26049: INC
26050: ST_TO_ADDR
26051: LD_INT 1
26053: PUSH
26054: FOR_DOWNTO
26055: IFFALSE 26218
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26057: LD_EXP 115
26061: PUSH
26062: LD_VAR 0 6
26066: ARRAY
26067: PUSH
26068: LD_VAR 0 5
26072: ARRAY
26073: PUSH
26074: LD_INT 1
26076: ARRAY
26077: PPUSH
26078: LD_EXP 115
26082: PUSH
26083: LD_VAR 0 6
26087: ARRAY
26088: PUSH
26089: LD_VAR 0 5
26093: ARRAY
26094: PUSH
26095: LD_INT 2
26097: ARRAY
26098: PPUSH
26099: LD_VAR 0 2
26103: PPUSH
26104: LD_VAR 0 3
26108: PPUSH
26109: CALL_OW 298
26113: PUSH
26114: LD_INT 6
26116: LESS
26117: IFFALSE 26216
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26119: LD_EXP 115
26123: PUSH
26124: LD_VAR 0 6
26128: ARRAY
26129: PUSH
26130: LD_VAR 0 5
26134: ARRAY
26135: PUSH
26136: LD_INT 1
26138: ARRAY
26139: PPUSH
26140: LD_EXP 115
26144: PUSH
26145: LD_VAR 0 6
26149: ARRAY
26150: PUSH
26151: LD_VAR 0 5
26155: ARRAY
26156: PUSH
26157: LD_INT 2
26159: ARRAY
26160: PPUSH
26161: LD_VAR 0 1
26165: PPUSH
26166: CALL_OW 255
26170: PPUSH
26171: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26175: LD_ADDR_EXP 115
26179: PUSH
26180: LD_EXP 115
26184: PPUSH
26185: LD_VAR 0 6
26189: PPUSH
26190: LD_EXP 115
26194: PUSH
26195: LD_VAR 0 6
26199: ARRAY
26200: PPUSH
26201: LD_VAR 0 5
26205: PPUSH
26206: CALL_OW 3
26210: PPUSH
26211: CALL_OW 1
26215: ST_TO_ADDR
// end ; end ;
26216: GO 26054
26218: POP
26219: POP
// end ;
26220: LD_VAR 0 4
26224: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26225: LD_INT 0
26227: PPUSH
26228: PPUSH
26229: PPUSH
26230: PPUSH
26231: PPUSH
26232: PPUSH
26233: PPUSH
26234: PPUSH
26235: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26236: LD_VAR 0 1
26240: PPUSH
26241: CALL_OW 264
26245: PUSH
26246: LD_EXP 36
26250: EQUAL
26251: NOT
26252: PUSH
26253: LD_VAR 0 1
26257: PUSH
26258: LD_EXP 114
26262: IN
26263: NOT
26264: OR
26265: IFFALSE 26269
// exit ;
26267: GO 26591
// index := GetElementIndex ( minersList , unit ) ;
26269: LD_ADDR_VAR 0 6
26273: PUSH
26274: LD_EXP 114
26278: PPUSH
26279: LD_VAR 0 1
26283: PPUSH
26284: CALL 31787 0 2
26288: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26289: LD_ADDR_VAR 0 8
26293: PUSH
26294: LD_EXP 116
26298: PUSH
26299: LD_EXP 115
26303: PUSH
26304: LD_VAR 0 6
26308: ARRAY
26309: MINUS
26310: ST_TO_ADDR
// if not minesFreeAmount then
26311: LD_VAR 0 8
26315: NOT
26316: IFFALSE 26320
// exit ;
26318: GO 26591
// tmp := [ ] ;
26320: LD_ADDR_VAR 0 7
26324: PUSH
26325: EMPTY
26326: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26327: LD_ADDR_VAR 0 5
26331: PUSH
26332: DOUBLE
26333: LD_INT 1
26335: DEC
26336: ST_TO_ADDR
26337: LD_VAR 0 8
26341: PUSH
26342: FOR_TO
26343: IFFALSE 26538
// begin _d := rand ( 0 , 5 ) ;
26345: LD_ADDR_VAR 0 11
26349: PUSH
26350: LD_INT 0
26352: PPUSH
26353: LD_INT 5
26355: PPUSH
26356: CALL_OW 12
26360: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26361: LD_ADDR_VAR 0 12
26365: PUSH
26366: LD_INT 2
26368: PPUSH
26369: LD_INT 6
26371: PPUSH
26372: CALL_OW 12
26376: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26377: LD_ADDR_VAR 0 9
26381: PUSH
26382: LD_VAR 0 2
26386: PPUSH
26387: LD_VAR 0 11
26391: PPUSH
26392: LD_VAR 0 12
26396: PPUSH
26397: CALL_OW 272
26401: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26402: LD_ADDR_VAR 0 10
26406: PUSH
26407: LD_VAR 0 3
26411: PPUSH
26412: LD_VAR 0 11
26416: PPUSH
26417: LD_VAR 0 12
26421: PPUSH
26422: CALL_OW 273
26426: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26427: LD_VAR 0 9
26431: PPUSH
26432: LD_VAR 0 10
26436: PPUSH
26437: CALL_OW 488
26441: PUSH
26442: LD_VAR 0 9
26446: PUSH
26447: LD_VAR 0 10
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_VAR 0 7
26460: IN
26461: NOT
26462: AND
26463: PUSH
26464: LD_VAR 0 9
26468: PPUSH
26469: LD_VAR 0 10
26473: PPUSH
26474: CALL_OW 458
26478: NOT
26479: AND
26480: IFFALSE 26522
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26482: LD_ADDR_VAR 0 7
26486: PUSH
26487: LD_VAR 0 7
26491: PPUSH
26492: LD_VAR 0 7
26496: PUSH
26497: LD_INT 1
26499: PLUS
26500: PPUSH
26501: LD_VAR 0 9
26505: PUSH
26506: LD_VAR 0 10
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: PPUSH
26515: CALL_OW 1
26519: ST_TO_ADDR
26520: GO 26536
// i := i - 1 ;
26522: LD_ADDR_VAR 0 5
26526: PUSH
26527: LD_VAR 0 5
26531: PUSH
26532: LD_INT 1
26534: MINUS
26535: ST_TO_ADDR
// end ;
26536: GO 26342
26538: POP
26539: POP
// for i in tmp do
26540: LD_ADDR_VAR 0 5
26544: PUSH
26545: LD_VAR 0 7
26549: PUSH
26550: FOR_IN
26551: IFFALSE 26589
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26553: LD_VAR 0 1
26557: PPUSH
26558: LD_VAR 0 5
26562: PUSH
26563: LD_INT 1
26565: ARRAY
26566: PPUSH
26567: LD_VAR 0 5
26571: PUSH
26572: LD_INT 2
26574: ARRAY
26575: PPUSH
26576: CALL 25531 0 3
26580: NOT
26581: IFFALSE 26587
// exit ;
26583: POP
26584: POP
26585: GO 26591
26587: GO 26550
26589: POP
26590: POP
// end ;
26591: LD_VAR 0 4
26595: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26596: LD_INT 0
26598: PPUSH
26599: PPUSH
26600: PPUSH
26601: PPUSH
26602: PPUSH
26603: PPUSH
26604: PPUSH
// if not GetClass ( unit ) = class_sniper then
26605: LD_VAR 0 1
26609: PPUSH
26610: CALL_OW 257
26614: PUSH
26615: LD_INT 5
26617: EQUAL
26618: NOT
26619: IFFALSE 26623
// exit ;
26621: GO 27011
// dist := 8 ;
26623: LD_ADDR_VAR 0 5
26627: PUSH
26628: LD_INT 8
26630: ST_TO_ADDR
// viewRange := 12 ;
26631: LD_ADDR_VAR 0 7
26635: PUSH
26636: LD_INT 12
26638: ST_TO_ADDR
// side := GetSide ( unit ) ;
26639: LD_ADDR_VAR 0 6
26643: PUSH
26644: LD_VAR 0 1
26648: PPUSH
26649: CALL_OW 255
26653: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26654: LD_INT 61
26656: PPUSH
26657: LD_VAR 0 6
26661: PPUSH
26662: CALL_OW 321
26666: PUSH
26667: LD_INT 2
26669: EQUAL
26670: IFFALSE 26680
// viewRange := 16 ;
26672: LD_ADDR_VAR 0 7
26676: PUSH
26677: LD_INT 16
26679: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26680: LD_VAR 0 1
26684: PPUSH
26685: LD_VAR 0 2
26689: PPUSH
26690: LD_VAR 0 3
26694: PPUSH
26695: CALL_OW 297
26699: PUSH
26700: LD_VAR 0 5
26704: GREATER
26705: IFFALSE 26784
// begin ComMoveXY ( unit , x , y ) ;
26707: LD_VAR 0 1
26711: PPUSH
26712: LD_VAR 0 2
26716: PPUSH
26717: LD_VAR 0 3
26721: PPUSH
26722: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26726: LD_INT 35
26728: PPUSH
26729: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26733: LD_VAR 0 1
26737: PPUSH
26738: LD_VAR 0 2
26742: PPUSH
26743: LD_VAR 0 3
26747: PPUSH
26748: CALL 62559 0 3
26752: NOT
26753: IFFALSE 26757
// exit ;
26755: GO 27011
// until GetDistUnitXY ( unit , x , y ) < dist ;
26757: LD_VAR 0 1
26761: PPUSH
26762: LD_VAR 0 2
26766: PPUSH
26767: LD_VAR 0 3
26771: PPUSH
26772: CALL_OW 297
26776: PUSH
26777: LD_VAR 0 5
26781: LESS
26782: IFFALSE 26726
// end ; ComTurnXY ( unit , x , y ) ;
26784: LD_VAR 0 1
26788: PPUSH
26789: LD_VAR 0 2
26793: PPUSH
26794: LD_VAR 0 3
26798: PPUSH
26799: CALL_OW 118
// wait ( 5 ) ;
26803: LD_INT 5
26805: PPUSH
26806: CALL_OW 67
// _d := GetDir ( unit ) ;
26810: LD_ADDR_VAR 0 10
26814: PUSH
26815: LD_VAR 0 1
26819: PPUSH
26820: CALL_OW 254
26824: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26825: LD_ADDR_VAR 0 8
26829: PUSH
26830: LD_VAR 0 1
26834: PPUSH
26835: CALL_OW 250
26839: PPUSH
26840: LD_VAR 0 10
26844: PPUSH
26845: LD_VAR 0 5
26849: PPUSH
26850: CALL_OW 272
26854: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26855: LD_ADDR_VAR 0 9
26859: PUSH
26860: LD_VAR 0 1
26864: PPUSH
26865: CALL_OW 251
26869: PPUSH
26870: LD_VAR 0 10
26874: PPUSH
26875: LD_VAR 0 5
26879: PPUSH
26880: CALL_OW 273
26884: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26885: LD_VAR 0 8
26889: PPUSH
26890: LD_VAR 0 9
26894: PPUSH
26895: CALL_OW 488
26899: NOT
26900: IFFALSE 26904
// exit ;
26902: GO 27011
// ComAnimCustom ( unit , 1 ) ;
26904: LD_VAR 0 1
26908: PPUSH
26909: LD_INT 1
26911: PPUSH
26912: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26916: LD_VAR 0 8
26920: PPUSH
26921: LD_VAR 0 9
26925: PPUSH
26926: LD_VAR 0 6
26930: PPUSH
26931: LD_VAR 0 7
26935: PPUSH
26936: CALL_OW 330
// repeat wait ( 1 ) ;
26940: LD_INT 1
26942: PPUSH
26943: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26947: LD_VAR 0 1
26951: PPUSH
26952: CALL_OW 316
26956: PUSH
26957: LD_VAR 0 1
26961: PPUSH
26962: CALL_OW 314
26966: OR
26967: PUSH
26968: LD_VAR 0 1
26972: PPUSH
26973: CALL_OW 302
26977: NOT
26978: OR
26979: PUSH
26980: LD_VAR 0 1
26984: PPUSH
26985: CALL_OW 301
26989: OR
26990: IFFALSE 26940
// RemoveSeeing ( _x , _y , side ) ;
26992: LD_VAR 0 8
26996: PPUSH
26997: LD_VAR 0 9
27001: PPUSH
27002: LD_VAR 0 6
27006: PPUSH
27007: CALL_OW 331
// end ; end_of_file
27011: LD_VAR 0 4
27015: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27016: LD_INT 0
27018: PPUSH
27019: PPUSH
// if exist_mode then
27020: LD_VAR 0 2
27024: IFFALSE 27049
// unit := CreateCharacter ( prefix & ident ) else
27026: LD_ADDR_VAR 0 5
27030: PUSH
27031: LD_VAR 0 3
27035: PUSH
27036: LD_VAR 0 1
27040: STR
27041: PPUSH
27042: CALL_OW 34
27046: ST_TO_ADDR
27047: GO 27064
// unit := NewCharacter ( ident ) ;
27049: LD_ADDR_VAR 0 5
27053: PUSH
27054: LD_VAR 0 1
27058: PPUSH
27059: CALL_OW 25
27063: ST_TO_ADDR
// result := unit ;
27064: LD_ADDR_VAR 0 4
27068: PUSH
27069: LD_VAR 0 5
27073: ST_TO_ADDR
// end ;
27074: LD_VAR 0 4
27078: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27079: LD_INT 0
27081: PPUSH
27082: PPUSH
// if not side or not nation then
27083: LD_VAR 0 1
27087: NOT
27088: PUSH
27089: LD_VAR 0 2
27093: NOT
27094: OR
27095: IFFALSE 27099
// exit ;
27097: GO 27867
// case nation of nation_american :
27099: LD_VAR 0 2
27103: PUSH
27104: LD_INT 1
27106: DOUBLE
27107: EQUAL
27108: IFTRUE 27112
27110: GO 27326
27112: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27113: LD_ADDR_VAR 0 4
27117: PUSH
27118: LD_INT 35
27120: PUSH
27121: LD_INT 45
27123: PUSH
27124: LD_INT 46
27126: PUSH
27127: LD_INT 47
27129: PUSH
27130: LD_INT 82
27132: PUSH
27133: LD_INT 83
27135: PUSH
27136: LD_INT 84
27138: PUSH
27139: LD_INT 85
27141: PUSH
27142: LD_INT 86
27144: PUSH
27145: LD_INT 1
27147: PUSH
27148: LD_INT 2
27150: PUSH
27151: LD_INT 6
27153: PUSH
27154: LD_INT 15
27156: PUSH
27157: LD_INT 16
27159: PUSH
27160: LD_INT 7
27162: PUSH
27163: LD_INT 12
27165: PUSH
27166: LD_INT 13
27168: PUSH
27169: LD_INT 10
27171: PUSH
27172: LD_INT 14
27174: PUSH
27175: LD_INT 20
27177: PUSH
27178: LD_INT 21
27180: PUSH
27181: LD_INT 22
27183: PUSH
27184: LD_INT 25
27186: PUSH
27187: LD_INT 32
27189: PUSH
27190: LD_INT 27
27192: PUSH
27193: LD_INT 36
27195: PUSH
27196: LD_INT 69
27198: PUSH
27199: LD_INT 39
27201: PUSH
27202: LD_INT 34
27204: PUSH
27205: LD_INT 40
27207: PUSH
27208: LD_INT 48
27210: PUSH
27211: LD_INT 49
27213: PUSH
27214: LD_INT 50
27216: PUSH
27217: LD_INT 51
27219: PUSH
27220: LD_INT 52
27222: PUSH
27223: LD_INT 53
27225: PUSH
27226: LD_INT 54
27228: PUSH
27229: LD_INT 55
27231: PUSH
27232: LD_INT 56
27234: PUSH
27235: LD_INT 57
27237: PUSH
27238: LD_INT 58
27240: PUSH
27241: LD_INT 59
27243: PUSH
27244: LD_INT 60
27246: PUSH
27247: LD_INT 61
27249: PUSH
27250: LD_INT 62
27252: PUSH
27253: LD_INT 80
27255: PUSH
27256: LD_INT 82
27258: PUSH
27259: LD_INT 83
27261: PUSH
27262: LD_INT 84
27264: PUSH
27265: LD_INT 85
27267: PUSH
27268: LD_INT 86
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: LIST
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: LIST
27288: LIST
27289: LIST
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: ST_TO_ADDR
27324: GO 27791
27326: LD_INT 2
27328: DOUBLE
27329: EQUAL
27330: IFTRUE 27334
27332: GO 27560
27334: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27335: LD_ADDR_VAR 0 4
27339: PUSH
27340: LD_INT 35
27342: PUSH
27343: LD_INT 45
27345: PUSH
27346: LD_INT 46
27348: PUSH
27349: LD_INT 47
27351: PUSH
27352: LD_INT 82
27354: PUSH
27355: LD_INT 83
27357: PUSH
27358: LD_INT 84
27360: PUSH
27361: LD_INT 85
27363: PUSH
27364: LD_INT 87
27366: PUSH
27367: LD_INT 70
27369: PUSH
27370: LD_INT 1
27372: PUSH
27373: LD_INT 11
27375: PUSH
27376: LD_INT 3
27378: PUSH
27379: LD_INT 4
27381: PUSH
27382: LD_INT 5
27384: PUSH
27385: LD_INT 6
27387: PUSH
27388: LD_INT 15
27390: PUSH
27391: LD_INT 18
27393: PUSH
27394: LD_INT 7
27396: PUSH
27397: LD_INT 17
27399: PUSH
27400: LD_INT 8
27402: PUSH
27403: LD_INT 20
27405: PUSH
27406: LD_INT 21
27408: PUSH
27409: LD_INT 22
27411: PUSH
27412: LD_INT 72
27414: PUSH
27415: LD_INT 26
27417: PUSH
27418: LD_INT 69
27420: PUSH
27421: LD_INT 39
27423: PUSH
27424: LD_INT 40
27426: PUSH
27427: LD_INT 41
27429: PUSH
27430: LD_INT 42
27432: PUSH
27433: LD_INT 43
27435: PUSH
27436: LD_INT 48
27438: PUSH
27439: LD_INT 49
27441: PUSH
27442: LD_INT 50
27444: PUSH
27445: LD_INT 51
27447: PUSH
27448: LD_INT 52
27450: PUSH
27451: LD_INT 53
27453: PUSH
27454: LD_INT 54
27456: PUSH
27457: LD_INT 55
27459: PUSH
27460: LD_INT 56
27462: PUSH
27463: LD_INT 60
27465: PUSH
27466: LD_INT 61
27468: PUSH
27469: LD_INT 62
27471: PUSH
27472: LD_INT 66
27474: PUSH
27475: LD_INT 67
27477: PUSH
27478: LD_INT 68
27480: PUSH
27481: LD_INT 81
27483: PUSH
27484: LD_INT 82
27486: PUSH
27487: LD_INT 83
27489: PUSH
27490: LD_INT 84
27492: PUSH
27493: LD_INT 85
27495: PUSH
27496: LD_INT 87
27498: PUSH
27499: LD_INT 88
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: LIST
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: ST_TO_ADDR
27558: GO 27791
27560: LD_INT 3
27562: DOUBLE
27563: EQUAL
27564: IFTRUE 27568
27566: GO 27790
27568: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27569: LD_ADDR_VAR 0 4
27573: PUSH
27574: LD_INT 46
27576: PUSH
27577: LD_INT 47
27579: PUSH
27580: LD_INT 1
27582: PUSH
27583: LD_INT 2
27585: PUSH
27586: LD_INT 82
27588: PUSH
27589: LD_INT 83
27591: PUSH
27592: LD_INT 84
27594: PUSH
27595: LD_INT 85
27597: PUSH
27598: LD_INT 86
27600: PUSH
27601: LD_INT 11
27603: PUSH
27604: LD_INT 9
27606: PUSH
27607: LD_INT 20
27609: PUSH
27610: LD_INT 19
27612: PUSH
27613: LD_INT 21
27615: PUSH
27616: LD_INT 24
27618: PUSH
27619: LD_INT 22
27621: PUSH
27622: LD_INT 25
27624: PUSH
27625: LD_INT 28
27627: PUSH
27628: LD_INT 29
27630: PUSH
27631: LD_INT 30
27633: PUSH
27634: LD_INT 31
27636: PUSH
27637: LD_INT 37
27639: PUSH
27640: LD_INT 38
27642: PUSH
27643: LD_INT 32
27645: PUSH
27646: LD_INT 27
27648: PUSH
27649: LD_INT 33
27651: PUSH
27652: LD_INT 69
27654: PUSH
27655: LD_INT 39
27657: PUSH
27658: LD_INT 34
27660: PUSH
27661: LD_INT 40
27663: PUSH
27664: LD_INT 71
27666: PUSH
27667: LD_INT 23
27669: PUSH
27670: LD_INT 44
27672: PUSH
27673: LD_INT 48
27675: PUSH
27676: LD_INT 49
27678: PUSH
27679: LD_INT 50
27681: PUSH
27682: LD_INT 51
27684: PUSH
27685: LD_INT 52
27687: PUSH
27688: LD_INT 53
27690: PUSH
27691: LD_INT 54
27693: PUSH
27694: LD_INT 55
27696: PUSH
27697: LD_INT 56
27699: PUSH
27700: LD_INT 57
27702: PUSH
27703: LD_INT 58
27705: PUSH
27706: LD_INT 59
27708: PUSH
27709: LD_INT 63
27711: PUSH
27712: LD_INT 64
27714: PUSH
27715: LD_INT 65
27717: PUSH
27718: LD_INT 82
27720: PUSH
27721: LD_INT 83
27723: PUSH
27724: LD_INT 84
27726: PUSH
27727: LD_INT 85
27729: PUSH
27730: LD_INT 86
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: LIST
27745: LIST
27746: LIST
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: ST_TO_ADDR
27788: GO 27791
27790: POP
// if state > - 1 and state < 3 then
27791: LD_VAR 0 3
27795: PUSH
27796: LD_INT 1
27798: NEG
27799: GREATER
27800: PUSH
27801: LD_VAR 0 3
27805: PUSH
27806: LD_INT 3
27808: LESS
27809: AND
27810: IFFALSE 27867
// for i in result do
27812: LD_ADDR_VAR 0 5
27816: PUSH
27817: LD_VAR 0 4
27821: PUSH
27822: FOR_IN
27823: IFFALSE 27865
// if GetTech ( i , side ) <> state then
27825: LD_VAR 0 5
27829: PPUSH
27830: LD_VAR 0 1
27834: PPUSH
27835: CALL_OW 321
27839: PUSH
27840: LD_VAR 0 3
27844: NONEQUAL
27845: IFFALSE 27863
// result := result diff i ;
27847: LD_ADDR_VAR 0 4
27851: PUSH
27852: LD_VAR 0 4
27856: PUSH
27857: LD_VAR 0 5
27861: DIFF
27862: ST_TO_ADDR
27863: GO 27822
27865: POP
27866: POP
// end ;
27867: LD_VAR 0 4
27871: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27872: LD_INT 0
27874: PPUSH
27875: PPUSH
27876: PPUSH
// result := true ;
27877: LD_ADDR_VAR 0 3
27881: PUSH
27882: LD_INT 1
27884: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27885: LD_ADDR_VAR 0 5
27889: PUSH
27890: LD_VAR 0 2
27894: PPUSH
27895: CALL_OW 480
27899: ST_TO_ADDR
// if not tmp then
27900: LD_VAR 0 5
27904: NOT
27905: IFFALSE 27909
// exit ;
27907: GO 27958
// for i in tmp do
27909: LD_ADDR_VAR 0 4
27913: PUSH
27914: LD_VAR 0 5
27918: PUSH
27919: FOR_IN
27920: IFFALSE 27956
// if GetTech ( i , side ) <> state_researched then
27922: LD_VAR 0 4
27926: PPUSH
27927: LD_VAR 0 1
27931: PPUSH
27932: CALL_OW 321
27936: PUSH
27937: LD_INT 2
27939: NONEQUAL
27940: IFFALSE 27954
// begin result := false ;
27942: LD_ADDR_VAR 0 3
27946: PUSH
27947: LD_INT 0
27949: ST_TO_ADDR
// exit ;
27950: POP
27951: POP
27952: GO 27958
// end ;
27954: GO 27919
27956: POP
27957: POP
// end ;
27958: LD_VAR 0 3
27962: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27963: LD_INT 0
27965: PPUSH
27966: PPUSH
27967: PPUSH
27968: PPUSH
27969: PPUSH
27970: PPUSH
27971: PPUSH
27972: PPUSH
27973: PPUSH
27974: PPUSH
27975: PPUSH
27976: PPUSH
27977: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27978: LD_VAR 0 1
27982: NOT
27983: PUSH
27984: LD_VAR 0 1
27988: PPUSH
27989: CALL_OW 257
27993: PUSH
27994: LD_INT 9
27996: NONEQUAL
27997: OR
27998: IFFALSE 28002
// exit ;
28000: GO 28575
// side := GetSide ( unit ) ;
28002: LD_ADDR_VAR 0 9
28006: PUSH
28007: LD_VAR 0 1
28011: PPUSH
28012: CALL_OW 255
28016: ST_TO_ADDR
// tech_space := tech_spacanom ;
28017: LD_ADDR_VAR 0 12
28021: PUSH
28022: LD_INT 29
28024: ST_TO_ADDR
// tech_time := tech_taurad ;
28025: LD_ADDR_VAR 0 13
28029: PUSH
28030: LD_INT 28
28032: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28033: LD_ADDR_VAR 0 11
28037: PUSH
28038: LD_VAR 0 1
28042: PPUSH
28043: CALL_OW 310
28047: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28048: LD_VAR 0 11
28052: PPUSH
28053: CALL_OW 247
28057: PUSH
28058: LD_INT 2
28060: EQUAL
28061: IFFALSE 28065
// exit ;
28063: GO 28575
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28065: LD_ADDR_VAR 0 8
28069: PUSH
28070: LD_INT 81
28072: PUSH
28073: LD_VAR 0 9
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 3
28084: PUSH
28085: LD_INT 21
28087: PUSH
28088: LD_INT 3
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PPUSH
28103: CALL_OW 69
28107: ST_TO_ADDR
// if not tmp then
28108: LD_VAR 0 8
28112: NOT
28113: IFFALSE 28117
// exit ;
28115: GO 28575
// if in_unit then
28117: LD_VAR 0 11
28121: IFFALSE 28145
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28123: LD_ADDR_VAR 0 10
28127: PUSH
28128: LD_VAR 0 8
28132: PPUSH
28133: LD_VAR 0 11
28137: PPUSH
28138: CALL_OW 74
28142: ST_TO_ADDR
28143: GO 28165
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28145: LD_ADDR_VAR 0 10
28149: PUSH
28150: LD_VAR 0 8
28154: PPUSH
28155: LD_VAR 0 1
28159: PPUSH
28160: CALL_OW 74
28164: ST_TO_ADDR
// if not enemy then
28165: LD_VAR 0 10
28169: NOT
28170: IFFALSE 28174
// exit ;
28172: GO 28575
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28174: LD_VAR 0 11
28178: PUSH
28179: LD_VAR 0 11
28183: PPUSH
28184: LD_VAR 0 10
28188: PPUSH
28189: CALL_OW 296
28193: PUSH
28194: LD_INT 13
28196: GREATER
28197: AND
28198: PUSH
28199: LD_VAR 0 1
28203: PPUSH
28204: LD_VAR 0 10
28208: PPUSH
28209: CALL_OW 296
28213: PUSH
28214: LD_INT 12
28216: GREATER
28217: OR
28218: IFFALSE 28222
// exit ;
28220: GO 28575
// missile := [ 1 ] ;
28222: LD_ADDR_VAR 0 14
28226: PUSH
28227: LD_INT 1
28229: PUSH
28230: EMPTY
28231: LIST
28232: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28233: LD_VAR 0 9
28237: PPUSH
28238: LD_VAR 0 12
28242: PPUSH
28243: CALL_OW 325
28247: IFFALSE 28276
// missile := Insert ( missile , missile + 1 , 2 ) ;
28249: LD_ADDR_VAR 0 14
28253: PUSH
28254: LD_VAR 0 14
28258: PPUSH
28259: LD_VAR 0 14
28263: PUSH
28264: LD_INT 1
28266: PLUS
28267: PPUSH
28268: LD_INT 2
28270: PPUSH
28271: CALL_OW 2
28275: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28276: LD_VAR 0 9
28280: PPUSH
28281: LD_VAR 0 13
28285: PPUSH
28286: CALL_OW 325
28290: PUSH
28291: LD_VAR 0 10
28295: PPUSH
28296: CALL_OW 255
28300: PPUSH
28301: LD_VAR 0 13
28305: PPUSH
28306: CALL_OW 325
28310: NOT
28311: AND
28312: IFFALSE 28341
// missile := Insert ( missile , missile + 1 , 3 ) ;
28314: LD_ADDR_VAR 0 14
28318: PUSH
28319: LD_VAR 0 14
28323: PPUSH
28324: LD_VAR 0 14
28328: PUSH
28329: LD_INT 1
28331: PLUS
28332: PPUSH
28333: LD_INT 3
28335: PPUSH
28336: CALL_OW 2
28340: ST_TO_ADDR
// if missile < 2 then
28341: LD_VAR 0 14
28345: PUSH
28346: LD_INT 2
28348: LESS
28349: IFFALSE 28353
// exit ;
28351: GO 28575
// x := GetX ( enemy ) ;
28353: LD_ADDR_VAR 0 4
28357: PUSH
28358: LD_VAR 0 10
28362: PPUSH
28363: CALL_OW 250
28367: ST_TO_ADDR
// y := GetY ( enemy ) ;
28368: LD_ADDR_VAR 0 5
28372: PUSH
28373: LD_VAR 0 10
28377: PPUSH
28378: CALL_OW 251
28382: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28383: LD_ADDR_VAR 0 6
28387: PUSH
28388: LD_VAR 0 4
28392: PUSH
28393: LD_INT 1
28395: NEG
28396: PPUSH
28397: LD_INT 1
28399: PPUSH
28400: CALL_OW 12
28404: PLUS
28405: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28406: LD_ADDR_VAR 0 7
28410: PUSH
28411: LD_VAR 0 5
28415: PUSH
28416: LD_INT 1
28418: NEG
28419: PPUSH
28420: LD_INT 1
28422: PPUSH
28423: CALL_OW 12
28427: PLUS
28428: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28429: LD_VAR 0 6
28433: PPUSH
28434: LD_VAR 0 7
28438: PPUSH
28439: CALL_OW 488
28443: NOT
28444: IFFALSE 28466
// begin _x := x ;
28446: LD_ADDR_VAR 0 6
28450: PUSH
28451: LD_VAR 0 4
28455: ST_TO_ADDR
// _y := y ;
28456: LD_ADDR_VAR 0 7
28460: PUSH
28461: LD_VAR 0 5
28465: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28466: LD_ADDR_VAR 0 3
28470: PUSH
28471: LD_INT 1
28473: PPUSH
28474: LD_VAR 0 14
28478: PPUSH
28479: CALL_OW 12
28483: ST_TO_ADDR
// case i of 1 :
28484: LD_VAR 0 3
28488: PUSH
28489: LD_INT 1
28491: DOUBLE
28492: EQUAL
28493: IFTRUE 28497
28495: GO 28514
28497: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28498: LD_VAR 0 1
28502: PPUSH
28503: LD_VAR 0 10
28507: PPUSH
28508: CALL_OW 115
28512: GO 28575
28514: LD_INT 2
28516: DOUBLE
28517: EQUAL
28518: IFTRUE 28522
28520: GO 28544
28522: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28523: LD_VAR 0 1
28527: PPUSH
28528: LD_VAR 0 6
28532: PPUSH
28533: LD_VAR 0 7
28537: PPUSH
28538: CALL_OW 153
28542: GO 28575
28544: LD_INT 3
28546: DOUBLE
28547: EQUAL
28548: IFTRUE 28552
28550: GO 28574
28552: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28553: LD_VAR 0 1
28557: PPUSH
28558: LD_VAR 0 6
28562: PPUSH
28563: LD_VAR 0 7
28567: PPUSH
28568: CALL_OW 154
28572: GO 28575
28574: POP
// end ;
28575: LD_VAR 0 2
28579: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28580: LD_INT 0
28582: PPUSH
28583: PPUSH
28584: PPUSH
28585: PPUSH
28586: PPUSH
28587: PPUSH
// if not unit or not building then
28588: LD_VAR 0 1
28592: NOT
28593: PUSH
28594: LD_VAR 0 2
28598: NOT
28599: OR
28600: IFFALSE 28604
// exit ;
28602: GO 28762
// x := GetX ( building ) ;
28604: LD_ADDR_VAR 0 5
28608: PUSH
28609: LD_VAR 0 2
28613: PPUSH
28614: CALL_OW 250
28618: ST_TO_ADDR
// y := GetY ( building ) ;
28619: LD_ADDR_VAR 0 6
28623: PUSH
28624: LD_VAR 0 2
28628: PPUSH
28629: CALL_OW 251
28633: ST_TO_ADDR
// for i = 0 to 5 do
28634: LD_ADDR_VAR 0 4
28638: PUSH
28639: DOUBLE
28640: LD_INT 0
28642: DEC
28643: ST_TO_ADDR
28644: LD_INT 5
28646: PUSH
28647: FOR_TO
28648: IFFALSE 28760
// begin _x := ShiftX ( x , i , 3 ) ;
28650: LD_ADDR_VAR 0 7
28654: PUSH
28655: LD_VAR 0 5
28659: PPUSH
28660: LD_VAR 0 4
28664: PPUSH
28665: LD_INT 3
28667: PPUSH
28668: CALL_OW 272
28672: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28673: LD_ADDR_VAR 0 8
28677: PUSH
28678: LD_VAR 0 6
28682: PPUSH
28683: LD_VAR 0 4
28687: PPUSH
28688: LD_INT 3
28690: PPUSH
28691: CALL_OW 273
28695: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28696: LD_VAR 0 7
28700: PPUSH
28701: LD_VAR 0 8
28705: PPUSH
28706: CALL_OW 488
28710: NOT
28711: IFFALSE 28715
// continue ;
28713: GO 28647
// if HexInfo ( _x , _y ) = 0 then
28715: LD_VAR 0 7
28719: PPUSH
28720: LD_VAR 0 8
28724: PPUSH
28725: CALL_OW 428
28729: PUSH
28730: LD_INT 0
28732: EQUAL
28733: IFFALSE 28758
// begin ComMoveXY ( unit , _x , _y ) ;
28735: LD_VAR 0 1
28739: PPUSH
28740: LD_VAR 0 7
28744: PPUSH
28745: LD_VAR 0 8
28749: PPUSH
28750: CALL_OW 111
// exit ;
28754: POP
28755: POP
28756: GO 28762
// end ; end ;
28758: GO 28647
28760: POP
28761: POP
// end ;
28762: LD_VAR 0 3
28766: RET
// export function ScanBase ( side , base_area ) ; begin
28767: LD_INT 0
28769: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28770: LD_ADDR_VAR 0 3
28774: PUSH
28775: LD_VAR 0 2
28779: PPUSH
28780: LD_INT 81
28782: PUSH
28783: LD_VAR 0 1
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PPUSH
28792: CALL_OW 70
28796: ST_TO_ADDR
// end ;
28797: LD_VAR 0 3
28801: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28802: LD_INT 0
28804: PPUSH
28805: PPUSH
28806: PPUSH
28807: PPUSH
// result := false ;
28808: LD_ADDR_VAR 0 2
28812: PUSH
28813: LD_INT 0
28815: ST_TO_ADDR
// side := GetSide ( unit ) ;
28816: LD_ADDR_VAR 0 3
28820: PUSH
28821: LD_VAR 0 1
28825: PPUSH
28826: CALL_OW 255
28830: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28831: LD_ADDR_VAR 0 4
28835: PUSH
28836: LD_VAR 0 1
28840: PPUSH
28841: CALL_OW 248
28845: ST_TO_ADDR
// case nat of 1 :
28846: LD_VAR 0 4
28850: PUSH
28851: LD_INT 1
28853: DOUBLE
28854: EQUAL
28855: IFTRUE 28859
28857: GO 28870
28859: POP
// tech := tech_lassight ; 2 :
28860: LD_ADDR_VAR 0 5
28864: PUSH
28865: LD_INT 12
28867: ST_TO_ADDR
28868: GO 28909
28870: LD_INT 2
28872: DOUBLE
28873: EQUAL
28874: IFTRUE 28878
28876: GO 28889
28878: POP
// tech := tech_mortar ; 3 :
28879: LD_ADDR_VAR 0 5
28883: PUSH
28884: LD_INT 41
28886: ST_TO_ADDR
28887: GO 28909
28889: LD_INT 3
28891: DOUBLE
28892: EQUAL
28893: IFTRUE 28897
28895: GO 28908
28897: POP
// tech := tech_bazooka ; end ;
28898: LD_ADDR_VAR 0 5
28902: PUSH
28903: LD_INT 44
28905: ST_TO_ADDR
28906: GO 28909
28908: POP
// if Researched ( side , tech ) then
28909: LD_VAR 0 3
28913: PPUSH
28914: LD_VAR 0 5
28918: PPUSH
28919: CALL_OW 325
28923: IFFALSE 28950
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28925: LD_ADDR_VAR 0 2
28929: PUSH
28930: LD_INT 5
28932: PUSH
28933: LD_INT 8
28935: PUSH
28936: LD_INT 9
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: LIST
28943: PUSH
28944: LD_VAR 0 4
28948: ARRAY
28949: ST_TO_ADDR
// end ;
28950: LD_VAR 0 2
28954: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28955: LD_INT 0
28957: PPUSH
28958: PPUSH
28959: PPUSH
// if not mines then
28960: LD_VAR 0 2
28964: NOT
28965: IFFALSE 28969
// exit ;
28967: GO 29113
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28969: LD_ADDR_VAR 0 5
28973: PUSH
28974: LD_INT 81
28976: PUSH
28977: LD_VAR 0 1
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 3
28988: PUSH
28989: LD_INT 21
28991: PUSH
28992: LD_INT 3
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PPUSH
29007: CALL_OW 69
29011: ST_TO_ADDR
// for i in mines do
29012: LD_ADDR_VAR 0 4
29016: PUSH
29017: LD_VAR 0 2
29021: PUSH
29022: FOR_IN
29023: IFFALSE 29111
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29025: LD_VAR 0 4
29029: PUSH
29030: LD_INT 1
29032: ARRAY
29033: PPUSH
29034: LD_VAR 0 4
29038: PUSH
29039: LD_INT 2
29041: ARRAY
29042: PPUSH
29043: CALL_OW 458
29047: NOT
29048: IFFALSE 29052
// continue ;
29050: GO 29022
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29052: LD_VAR 0 4
29056: PUSH
29057: LD_INT 1
29059: ARRAY
29060: PPUSH
29061: LD_VAR 0 4
29065: PUSH
29066: LD_INT 2
29068: ARRAY
29069: PPUSH
29070: CALL_OW 428
29074: PUSH
29075: LD_VAR 0 5
29079: IN
29080: IFFALSE 29109
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29082: LD_VAR 0 4
29086: PUSH
29087: LD_INT 1
29089: ARRAY
29090: PPUSH
29091: LD_VAR 0 4
29095: PUSH
29096: LD_INT 2
29098: ARRAY
29099: PPUSH
29100: LD_VAR 0 1
29104: PPUSH
29105: CALL_OW 456
// end ;
29109: GO 29022
29111: POP
29112: POP
// end ;
29113: LD_VAR 0 3
29117: RET
// export function Count ( array ) ; var i ; begin
29118: LD_INT 0
29120: PPUSH
29121: PPUSH
// result := 0 ;
29122: LD_ADDR_VAR 0 2
29126: PUSH
29127: LD_INT 0
29129: ST_TO_ADDR
// for i in array do
29130: LD_ADDR_VAR 0 3
29134: PUSH
29135: LD_VAR 0 1
29139: PUSH
29140: FOR_IN
29141: IFFALSE 29165
// if i then
29143: LD_VAR 0 3
29147: IFFALSE 29163
// result := result + 1 ;
29149: LD_ADDR_VAR 0 2
29153: PUSH
29154: LD_VAR 0 2
29158: PUSH
29159: LD_INT 1
29161: PLUS
29162: ST_TO_ADDR
29163: GO 29140
29165: POP
29166: POP
// end ;
29167: LD_VAR 0 2
29171: RET
// export function IsEmpty ( building ) ; begin
29172: LD_INT 0
29174: PPUSH
// if not building then
29175: LD_VAR 0 1
29179: NOT
29180: IFFALSE 29184
// exit ;
29182: GO 29227
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29184: LD_ADDR_VAR 0 2
29188: PUSH
29189: LD_VAR 0 1
29193: PUSH
29194: LD_INT 22
29196: PUSH
29197: LD_VAR 0 1
29201: PPUSH
29202: CALL_OW 255
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: PUSH
29211: LD_INT 58
29213: PUSH
29214: EMPTY
29215: LIST
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PPUSH
29221: CALL_OW 69
29225: IN
29226: ST_TO_ADDR
// end ;
29227: LD_VAR 0 2
29231: RET
// export function IsNotFull ( building ) ; begin
29232: LD_INT 0
29234: PPUSH
// if not building then
29235: LD_VAR 0 1
29239: NOT
29240: IFFALSE 29244
// exit ;
29242: GO 29263
// result := UnitsInside ( building ) < 6 ;
29244: LD_ADDR_VAR 0 2
29248: PUSH
29249: LD_VAR 0 1
29253: PPUSH
29254: CALL_OW 313
29258: PUSH
29259: LD_INT 6
29261: LESS
29262: ST_TO_ADDR
// end ;
29263: LD_VAR 0 2
29267: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29268: LD_INT 0
29270: PPUSH
29271: PPUSH
29272: PPUSH
29273: PPUSH
// tmp := [ ] ;
29274: LD_ADDR_VAR 0 3
29278: PUSH
29279: EMPTY
29280: ST_TO_ADDR
// list := [ ] ;
29281: LD_ADDR_VAR 0 5
29285: PUSH
29286: EMPTY
29287: ST_TO_ADDR
// for i = 16 to 25 do
29288: LD_ADDR_VAR 0 4
29292: PUSH
29293: DOUBLE
29294: LD_INT 16
29296: DEC
29297: ST_TO_ADDR
29298: LD_INT 25
29300: PUSH
29301: FOR_TO
29302: IFFALSE 29375
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29304: LD_ADDR_VAR 0 3
29308: PUSH
29309: LD_VAR 0 3
29313: PUSH
29314: LD_INT 22
29316: PUSH
29317: LD_VAR 0 1
29321: PPUSH
29322: CALL_OW 255
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 91
29333: PUSH
29334: LD_VAR 0 1
29338: PUSH
29339: LD_INT 6
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: LIST
29346: PUSH
29347: LD_INT 30
29349: PUSH
29350: LD_VAR 0 4
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: LIST
29363: PUSH
29364: EMPTY
29365: LIST
29366: PPUSH
29367: CALL_OW 69
29371: ADD
29372: ST_TO_ADDR
29373: GO 29301
29375: POP
29376: POP
// for i = 1 to tmp do
29377: LD_ADDR_VAR 0 4
29381: PUSH
29382: DOUBLE
29383: LD_INT 1
29385: DEC
29386: ST_TO_ADDR
29387: LD_VAR 0 3
29391: PUSH
29392: FOR_TO
29393: IFFALSE 29481
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29395: LD_ADDR_VAR 0 5
29399: PUSH
29400: LD_VAR 0 5
29404: PUSH
29405: LD_VAR 0 3
29409: PUSH
29410: LD_VAR 0 4
29414: ARRAY
29415: PPUSH
29416: CALL_OW 266
29420: PUSH
29421: LD_VAR 0 3
29425: PUSH
29426: LD_VAR 0 4
29430: ARRAY
29431: PPUSH
29432: CALL_OW 250
29436: PUSH
29437: LD_VAR 0 3
29441: PUSH
29442: LD_VAR 0 4
29446: ARRAY
29447: PPUSH
29448: CALL_OW 251
29452: PUSH
29453: LD_VAR 0 3
29457: PUSH
29458: LD_VAR 0 4
29462: ARRAY
29463: PPUSH
29464: CALL_OW 254
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: PUSH
29475: EMPTY
29476: LIST
29477: ADD
29478: ST_TO_ADDR
29479: GO 29392
29481: POP
29482: POP
// result := list ;
29483: LD_ADDR_VAR 0 2
29487: PUSH
29488: LD_VAR 0 5
29492: ST_TO_ADDR
// end ;
29493: LD_VAR 0 2
29497: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29498: LD_INT 0
29500: PPUSH
29501: PPUSH
29502: PPUSH
29503: PPUSH
29504: PPUSH
29505: PPUSH
29506: PPUSH
// if not factory then
29507: LD_VAR 0 1
29511: NOT
29512: IFFALSE 29516
// exit ;
29514: GO 30109
// if control = control_apeman then
29516: LD_VAR 0 4
29520: PUSH
29521: LD_INT 5
29523: EQUAL
29524: IFFALSE 29633
// begin tmp := UnitsInside ( factory ) ;
29526: LD_ADDR_VAR 0 8
29530: PUSH
29531: LD_VAR 0 1
29535: PPUSH
29536: CALL_OW 313
29540: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29541: LD_VAR 0 8
29545: PPUSH
29546: LD_INT 25
29548: PUSH
29549: LD_INT 12
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PPUSH
29556: CALL_OW 72
29560: NOT
29561: IFFALSE 29571
// control := control_manual ;
29563: LD_ADDR_VAR 0 4
29567: PUSH
29568: LD_INT 1
29570: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29571: LD_ADDR_VAR 0 8
29575: PUSH
29576: LD_VAR 0 1
29580: PPUSH
29581: CALL 29268 0 1
29585: ST_TO_ADDR
// if tmp then
29586: LD_VAR 0 8
29590: IFFALSE 29633
// begin for i in tmp do
29592: LD_ADDR_VAR 0 7
29596: PUSH
29597: LD_VAR 0 8
29601: PUSH
29602: FOR_IN
29603: IFFALSE 29631
// if i [ 1 ] = b_ext_radio then
29605: LD_VAR 0 7
29609: PUSH
29610: LD_INT 1
29612: ARRAY
29613: PUSH
29614: LD_INT 22
29616: EQUAL
29617: IFFALSE 29629
// begin control := control_remote ;
29619: LD_ADDR_VAR 0 4
29623: PUSH
29624: LD_INT 2
29626: ST_TO_ADDR
// break ;
29627: GO 29631
// end ;
29629: GO 29602
29631: POP
29632: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29633: LD_VAR 0 1
29637: PPUSH
29638: LD_VAR 0 2
29642: PPUSH
29643: LD_VAR 0 3
29647: PPUSH
29648: LD_VAR 0 4
29652: PPUSH
29653: LD_VAR 0 5
29657: PPUSH
29658: CALL_OW 448
29662: IFFALSE 29697
// begin result := [ chassis , engine , control , weapon ] ;
29664: LD_ADDR_VAR 0 6
29668: PUSH
29669: LD_VAR 0 2
29673: PUSH
29674: LD_VAR 0 3
29678: PUSH
29679: LD_VAR 0 4
29683: PUSH
29684: LD_VAR 0 5
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: ST_TO_ADDR
// exit ;
29695: GO 30109
// end ; _chassis := AvailableChassisList ( factory ) ;
29697: LD_ADDR_VAR 0 9
29701: PUSH
29702: LD_VAR 0 1
29706: PPUSH
29707: CALL_OW 475
29711: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29712: LD_ADDR_VAR 0 11
29716: PUSH
29717: LD_VAR 0 1
29721: PPUSH
29722: CALL_OW 476
29726: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29727: LD_ADDR_VAR 0 12
29731: PUSH
29732: LD_VAR 0 1
29736: PPUSH
29737: CALL_OW 477
29741: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29742: LD_ADDR_VAR 0 10
29746: PUSH
29747: LD_VAR 0 1
29751: PPUSH
29752: CALL_OW 478
29756: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29757: LD_VAR 0 9
29761: NOT
29762: PUSH
29763: LD_VAR 0 11
29767: NOT
29768: OR
29769: PUSH
29770: LD_VAR 0 12
29774: NOT
29775: OR
29776: PUSH
29777: LD_VAR 0 10
29781: NOT
29782: OR
29783: IFFALSE 29818
// begin result := [ chassis , engine , control , weapon ] ;
29785: LD_ADDR_VAR 0 6
29789: PUSH
29790: LD_VAR 0 2
29794: PUSH
29795: LD_VAR 0 3
29799: PUSH
29800: LD_VAR 0 4
29804: PUSH
29805: LD_VAR 0 5
29809: PUSH
29810: EMPTY
29811: LIST
29812: LIST
29813: LIST
29814: LIST
29815: ST_TO_ADDR
// exit ;
29816: GO 30109
// end ; if not chassis in _chassis then
29818: LD_VAR 0 2
29822: PUSH
29823: LD_VAR 0 9
29827: IN
29828: NOT
29829: IFFALSE 29855
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29831: LD_ADDR_VAR 0 2
29835: PUSH
29836: LD_VAR 0 9
29840: PUSH
29841: LD_INT 1
29843: PPUSH
29844: LD_VAR 0 9
29848: PPUSH
29849: CALL_OW 12
29853: ARRAY
29854: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29855: LD_VAR 0 2
29859: PPUSH
29860: LD_VAR 0 3
29864: PPUSH
29865: CALL 30114 0 2
29869: NOT
29870: IFFALSE 29929
// repeat engine := _engine [ 1 ] ;
29872: LD_ADDR_VAR 0 3
29876: PUSH
29877: LD_VAR 0 11
29881: PUSH
29882: LD_INT 1
29884: ARRAY
29885: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29886: LD_ADDR_VAR 0 11
29890: PUSH
29891: LD_VAR 0 11
29895: PPUSH
29896: LD_INT 1
29898: PPUSH
29899: CALL_OW 3
29903: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29904: LD_VAR 0 2
29908: PPUSH
29909: LD_VAR 0 3
29913: PPUSH
29914: CALL 30114 0 2
29918: PUSH
29919: LD_VAR 0 11
29923: PUSH
29924: EMPTY
29925: EQUAL
29926: OR
29927: IFFALSE 29872
// if not control in _control then
29929: LD_VAR 0 4
29933: PUSH
29934: LD_VAR 0 12
29938: IN
29939: NOT
29940: IFFALSE 29966
// control := _control [ rand ( 1 , _control ) ] ;
29942: LD_ADDR_VAR 0 4
29946: PUSH
29947: LD_VAR 0 12
29951: PUSH
29952: LD_INT 1
29954: PPUSH
29955: LD_VAR 0 12
29959: PPUSH
29960: CALL_OW 12
29964: ARRAY
29965: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29966: LD_VAR 0 2
29970: PPUSH
29971: LD_VAR 0 5
29975: PPUSH
29976: CALL 30334 0 2
29980: NOT
29981: IFFALSE 30040
// repeat weapon := _weapon [ 1 ] ;
29983: LD_ADDR_VAR 0 5
29987: PUSH
29988: LD_VAR 0 10
29992: PUSH
29993: LD_INT 1
29995: ARRAY
29996: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29997: LD_ADDR_VAR 0 10
30001: PUSH
30002: LD_VAR 0 10
30006: PPUSH
30007: LD_INT 1
30009: PPUSH
30010: CALL_OW 3
30014: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30015: LD_VAR 0 2
30019: PPUSH
30020: LD_VAR 0 5
30024: PPUSH
30025: CALL 30334 0 2
30029: PUSH
30030: LD_VAR 0 10
30034: PUSH
30035: EMPTY
30036: EQUAL
30037: OR
30038: IFFALSE 29983
// result := [ ] ;
30040: LD_ADDR_VAR 0 6
30044: PUSH
30045: EMPTY
30046: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30047: LD_VAR 0 1
30051: PPUSH
30052: LD_VAR 0 2
30056: PPUSH
30057: LD_VAR 0 3
30061: PPUSH
30062: LD_VAR 0 4
30066: PPUSH
30067: LD_VAR 0 5
30071: PPUSH
30072: CALL_OW 448
30076: IFFALSE 30109
// result := [ chassis , engine , control , weapon ] ;
30078: LD_ADDR_VAR 0 6
30082: PUSH
30083: LD_VAR 0 2
30087: PUSH
30088: LD_VAR 0 3
30092: PUSH
30093: LD_VAR 0 4
30097: PUSH
30098: LD_VAR 0 5
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: ST_TO_ADDR
// end ;
30109: LD_VAR 0 6
30113: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30114: LD_INT 0
30116: PPUSH
// if not chassis or not engine then
30117: LD_VAR 0 1
30121: NOT
30122: PUSH
30123: LD_VAR 0 2
30127: NOT
30128: OR
30129: IFFALSE 30133
// exit ;
30131: GO 30329
// case engine of engine_solar :
30133: LD_VAR 0 2
30137: PUSH
30138: LD_INT 2
30140: DOUBLE
30141: EQUAL
30142: IFTRUE 30146
30144: GO 30184
30146: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30147: LD_ADDR_VAR 0 3
30151: PUSH
30152: LD_INT 11
30154: PUSH
30155: LD_INT 12
30157: PUSH
30158: LD_INT 13
30160: PUSH
30161: LD_INT 14
30163: PUSH
30164: LD_INT 1
30166: PUSH
30167: LD_INT 2
30169: PUSH
30170: LD_INT 3
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: LIST
30177: LIST
30178: LIST
30179: LIST
30180: LIST
30181: ST_TO_ADDR
30182: GO 30313
30184: LD_INT 1
30186: DOUBLE
30187: EQUAL
30188: IFTRUE 30192
30190: GO 30254
30192: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30193: LD_ADDR_VAR 0 3
30197: PUSH
30198: LD_INT 11
30200: PUSH
30201: LD_INT 12
30203: PUSH
30204: LD_INT 13
30206: PUSH
30207: LD_INT 14
30209: PUSH
30210: LD_INT 1
30212: PUSH
30213: LD_INT 2
30215: PUSH
30216: LD_INT 3
30218: PUSH
30219: LD_INT 4
30221: PUSH
30222: LD_INT 5
30224: PUSH
30225: LD_INT 21
30227: PUSH
30228: LD_INT 23
30230: PUSH
30231: LD_INT 22
30233: PUSH
30234: LD_INT 24
30236: PUSH
30237: EMPTY
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: LIST
30243: LIST
30244: LIST
30245: LIST
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: ST_TO_ADDR
30252: GO 30313
30254: LD_INT 3
30256: DOUBLE
30257: EQUAL
30258: IFTRUE 30262
30260: GO 30312
30262: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30263: LD_ADDR_VAR 0 3
30267: PUSH
30268: LD_INT 13
30270: PUSH
30271: LD_INT 14
30273: PUSH
30274: LD_INT 2
30276: PUSH
30277: LD_INT 3
30279: PUSH
30280: LD_INT 4
30282: PUSH
30283: LD_INT 5
30285: PUSH
30286: LD_INT 21
30288: PUSH
30289: LD_INT 22
30291: PUSH
30292: LD_INT 23
30294: PUSH
30295: LD_INT 24
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: LIST
30305: LIST
30306: LIST
30307: LIST
30308: LIST
30309: ST_TO_ADDR
30310: GO 30313
30312: POP
// result := ( chassis in result ) ;
30313: LD_ADDR_VAR 0 3
30317: PUSH
30318: LD_VAR 0 1
30322: PUSH
30323: LD_VAR 0 3
30327: IN
30328: ST_TO_ADDR
// end ;
30329: LD_VAR 0 3
30333: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30334: LD_INT 0
30336: PPUSH
// if not chassis or not weapon then
30337: LD_VAR 0 1
30341: NOT
30342: PUSH
30343: LD_VAR 0 2
30347: NOT
30348: OR
30349: IFFALSE 30353
// exit ;
30351: GO 31415
// case weapon of us_machine_gun :
30353: LD_VAR 0 2
30357: PUSH
30358: LD_INT 2
30360: DOUBLE
30361: EQUAL
30362: IFTRUE 30366
30364: GO 30396
30366: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30367: LD_ADDR_VAR 0 3
30371: PUSH
30372: LD_INT 1
30374: PUSH
30375: LD_INT 2
30377: PUSH
30378: LD_INT 3
30380: PUSH
30381: LD_INT 4
30383: PUSH
30384: LD_INT 5
30386: PUSH
30387: EMPTY
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: ST_TO_ADDR
30394: GO 31399
30396: LD_INT 3
30398: DOUBLE
30399: EQUAL
30400: IFTRUE 30404
30402: GO 30434
30404: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30405: LD_ADDR_VAR 0 3
30409: PUSH
30410: LD_INT 1
30412: PUSH
30413: LD_INT 2
30415: PUSH
30416: LD_INT 3
30418: PUSH
30419: LD_INT 4
30421: PUSH
30422: LD_INT 5
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: ST_TO_ADDR
30432: GO 31399
30434: LD_INT 11
30436: DOUBLE
30437: EQUAL
30438: IFTRUE 30442
30440: GO 30472
30442: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30443: LD_ADDR_VAR 0 3
30447: PUSH
30448: LD_INT 1
30450: PUSH
30451: LD_INT 2
30453: PUSH
30454: LD_INT 3
30456: PUSH
30457: LD_INT 4
30459: PUSH
30460: LD_INT 5
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: ST_TO_ADDR
30470: GO 31399
30472: LD_INT 4
30474: DOUBLE
30475: EQUAL
30476: IFTRUE 30480
30478: GO 30506
30480: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30481: LD_ADDR_VAR 0 3
30485: PUSH
30486: LD_INT 2
30488: PUSH
30489: LD_INT 3
30491: PUSH
30492: LD_INT 4
30494: PUSH
30495: LD_INT 5
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: LIST
30502: LIST
30503: ST_TO_ADDR
30504: GO 31399
30506: LD_INT 5
30508: DOUBLE
30509: EQUAL
30510: IFTRUE 30514
30512: GO 30540
30514: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30515: LD_ADDR_VAR 0 3
30519: PUSH
30520: LD_INT 2
30522: PUSH
30523: LD_INT 3
30525: PUSH
30526: LD_INT 4
30528: PUSH
30529: LD_INT 5
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: ST_TO_ADDR
30538: GO 31399
30540: LD_INT 9
30542: DOUBLE
30543: EQUAL
30544: IFTRUE 30548
30546: GO 30574
30548: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30549: LD_ADDR_VAR 0 3
30553: PUSH
30554: LD_INT 2
30556: PUSH
30557: LD_INT 3
30559: PUSH
30560: LD_INT 4
30562: PUSH
30563: LD_INT 5
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: ST_TO_ADDR
30572: GO 31399
30574: LD_INT 7
30576: DOUBLE
30577: EQUAL
30578: IFTRUE 30582
30580: GO 30608
30582: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30583: LD_ADDR_VAR 0 3
30587: PUSH
30588: LD_INT 2
30590: PUSH
30591: LD_INT 3
30593: PUSH
30594: LD_INT 4
30596: PUSH
30597: LD_INT 5
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: LIST
30604: LIST
30605: ST_TO_ADDR
30606: GO 31399
30608: LD_INT 12
30610: DOUBLE
30611: EQUAL
30612: IFTRUE 30616
30614: GO 30642
30616: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30617: LD_ADDR_VAR 0 3
30621: PUSH
30622: LD_INT 2
30624: PUSH
30625: LD_INT 3
30627: PUSH
30628: LD_INT 4
30630: PUSH
30631: LD_INT 5
30633: PUSH
30634: EMPTY
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: ST_TO_ADDR
30640: GO 31399
30642: LD_INT 13
30644: DOUBLE
30645: EQUAL
30646: IFTRUE 30650
30648: GO 30676
30650: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30651: LD_ADDR_VAR 0 3
30655: PUSH
30656: LD_INT 2
30658: PUSH
30659: LD_INT 3
30661: PUSH
30662: LD_INT 4
30664: PUSH
30665: LD_INT 5
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: ST_TO_ADDR
30674: GO 31399
30676: LD_INT 14
30678: DOUBLE
30679: EQUAL
30680: IFTRUE 30684
30682: GO 30702
30684: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30685: LD_ADDR_VAR 0 3
30689: PUSH
30690: LD_INT 4
30692: PUSH
30693: LD_INT 5
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: ST_TO_ADDR
30700: GO 31399
30702: LD_INT 6
30704: DOUBLE
30705: EQUAL
30706: IFTRUE 30710
30708: GO 30728
30710: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30711: LD_ADDR_VAR 0 3
30715: PUSH
30716: LD_INT 4
30718: PUSH
30719: LD_INT 5
30721: PUSH
30722: EMPTY
30723: LIST
30724: LIST
30725: ST_TO_ADDR
30726: GO 31399
30728: LD_INT 10
30730: DOUBLE
30731: EQUAL
30732: IFTRUE 30736
30734: GO 30754
30736: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30737: LD_ADDR_VAR 0 3
30741: PUSH
30742: LD_INT 4
30744: PUSH
30745: LD_INT 5
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: ST_TO_ADDR
30752: GO 31399
30754: LD_INT 22
30756: DOUBLE
30757: EQUAL
30758: IFTRUE 30762
30760: GO 30788
30762: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30763: LD_ADDR_VAR 0 3
30767: PUSH
30768: LD_INT 11
30770: PUSH
30771: LD_INT 12
30773: PUSH
30774: LD_INT 13
30776: PUSH
30777: LD_INT 14
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: ST_TO_ADDR
30786: GO 31399
30788: LD_INT 23
30790: DOUBLE
30791: EQUAL
30792: IFTRUE 30796
30794: GO 30822
30796: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30797: LD_ADDR_VAR 0 3
30801: PUSH
30802: LD_INT 11
30804: PUSH
30805: LD_INT 12
30807: PUSH
30808: LD_INT 13
30810: PUSH
30811: LD_INT 14
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: ST_TO_ADDR
30820: GO 31399
30822: LD_INT 24
30824: DOUBLE
30825: EQUAL
30826: IFTRUE 30830
30828: GO 30856
30830: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30831: LD_ADDR_VAR 0 3
30835: PUSH
30836: LD_INT 11
30838: PUSH
30839: LD_INT 12
30841: PUSH
30842: LD_INT 13
30844: PUSH
30845: LD_INT 14
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: ST_TO_ADDR
30854: GO 31399
30856: LD_INT 30
30858: DOUBLE
30859: EQUAL
30860: IFTRUE 30864
30862: GO 30890
30864: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30865: LD_ADDR_VAR 0 3
30869: PUSH
30870: LD_INT 11
30872: PUSH
30873: LD_INT 12
30875: PUSH
30876: LD_INT 13
30878: PUSH
30879: LD_INT 14
30881: PUSH
30882: EMPTY
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: ST_TO_ADDR
30888: GO 31399
30890: LD_INT 25
30892: DOUBLE
30893: EQUAL
30894: IFTRUE 30898
30896: GO 30916
30898: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30899: LD_ADDR_VAR 0 3
30903: PUSH
30904: LD_INT 13
30906: PUSH
30907: LD_INT 14
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: ST_TO_ADDR
30914: GO 31399
30916: LD_INT 27
30918: DOUBLE
30919: EQUAL
30920: IFTRUE 30924
30922: GO 30942
30924: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30925: LD_ADDR_VAR 0 3
30929: PUSH
30930: LD_INT 13
30932: PUSH
30933: LD_INT 14
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: ST_TO_ADDR
30940: GO 31399
30942: LD_EXP 34
30946: DOUBLE
30947: EQUAL
30948: IFTRUE 30952
30950: GO 30978
30952: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30953: LD_ADDR_VAR 0 3
30957: PUSH
30958: LD_INT 11
30960: PUSH
30961: LD_INT 12
30963: PUSH
30964: LD_INT 13
30966: PUSH
30967: LD_INT 14
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: ST_TO_ADDR
30976: GO 31399
30978: LD_INT 28
30980: DOUBLE
30981: EQUAL
30982: IFTRUE 30986
30984: GO 31004
30986: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30987: LD_ADDR_VAR 0 3
30991: PUSH
30992: LD_INT 13
30994: PUSH
30995: LD_INT 14
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: ST_TO_ADDR
31002: GO 31399
31004: LD_INT 29
31006: DOUBLE
31007: EQUAL
31008: IFTRUE 31012
31010: GO 31030
31012: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31013: LD_ADDR_VAR 0 3
31017: PUSH
31018: LD_INT 13
31020: PUSH
31021: LD_INT 14
31023: PUSH
31024: EMPTY
31025: LIST
31026: LIST
31027: ST_TO_ADDR
31028: GO 31399
31030: LD_INT 31
31032: DOUBLE
31033: EQUAL
31034: IFTRUE 31038
31036: GO 31056
31038: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31039: LD_ADDR_VAR 0 3
31043: PUSH
31044: LD_INT 13
31046: PUSH
31047: LD_INT 14
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: ST_TO_ADDR
31054: GO 31399
31056: LD_INT 26
31058: DOUBLE
31059: EQUAL
31060: IFTRUE 31064
31062: GO 31082
31064: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31065: LD_ADDR_VAR 0 3
31069: PUSH
31070: LD_INT 13
31072: PUSH
31073: LD_INT 14
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: ST_TO_ADDR
31080: GO 31399
31082: LD_INT 42
31084: DOUBLE
31085: EQUAL
31086: IFTRUE 31090
31088: GO 31116
31090: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31091: LD_ADDR_VAR 0 3
31095: PUSH
31096: LD_INT 21
31098: PUSH
31099: LD_INT 22
31101: PUSH
31102: LD_INT 23
31104: PUSH
31105: LD_INT 24
31107: PUSH
31108: EMPTY
31109: LIST
31110: LIST
31111: LIST
31112: LIST
31113: ST_TO_ADDR
31114: GO 31399
31116: LD_INT 43
31118: DOUBLE
31119: EQUAL
31120: IFTRUE 31124
31122: GO 31150
31124: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31125: LD_ADDR_VAR 0 3
31129: PUSH
31130: LD_INT 21
31132: PUSH
31133: LD_INT 22
31135: PUSH
31136: LD_INT 23
31138: PUSH
31139: LD_INT 24
31141: PUSH
31142: EMPTY
31143: LIST
31144: LIST
31145: LIST
31146: LIST
31147: ST_TO_ADDR
31148: GO 31399
31150: LD_INT 44
31152: DOUBLE
31153: EQUAL
31154: IFTRUE 31158
31156: GO 31184
31158: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31159: LD_ADDR_VAR 0 3
31163: PUSH
31164: LD_INT 21
31166: PUSH
31167: LD_INT 22
31169: PUSH
31170: LD_INT 23
31172: PUSH
31173: LD_INT 24
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: ST_TO_ADDR
31182: GO 31399
31184: LD_INT 45
31186: DOUBLE
31187: EQUAL
31188: IFTRUE 31192
31190: GO 31218
31192: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31193: LD_ADDR_VAR 0 3
31197: PUSH
31198: LD_INT 21
31200: PUSH
31201: LD_INT 22
31203: PUSH
31204: LD_INT 23
31206: PUSH
31207: LD_INT 24
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: ST_TO_ADDR
31216: GO 31399
31218: LD_INT 49
31220: DOUBLE
31221: EQUAL
31222: IFTRUE 31226
31224: GO 31252
31226: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31227: LD_ADDR_VAR 0 3
31231: PUSH
31232: LD_INT 21
31234: PUSH
31235: LD_INT 22
31237: PUSH
31238: LD_INT 23
31240: PUSH
31241: LD_INT 24
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: ST_TO_ADDR
31250: GO 31399
31252: LD_INT 51
31254: DOUBLE
31255: EQUAL
31256: IFTRUE 31260
31258: GO 31286
31260: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31261: LD_ADDR_VAR 0 3
31265: PUSH
31266: LD_INT 21
31268: PUSH
31269: LD_INT 22
31271: PUSH
31272: LD_INT 23
31274: PUSH
31275: LD_INT 24
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: LIST
31282: LIST
31283: ST_TO_ADDR
31284: GO 31399
31286: LD_INT 52
31288: DOUBLE
31289: EQUAL
31290: IFTRUE 31294
31292: GO 31320
31294: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31295: LD_ADDR_VAR 0 3
31299: PUSH
31300: LD_INT 21
31302: PUSH
31303: LD_INT 22
31305: PUSH
31306: LD_INT 23
31308: PUSH
31309: LD_INT 24
31311: PUSH
31312: EMPTY
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: ST_TO_ADDR
31318: GO 31399
31320: LD_INT 53
31322: DOUBLE
31323: EQUAL
31324: IFTRUE 31328
31326: GO 31346
31328: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31329: LD_ADDR_VAR 0 3
31333: PUSH
31334: LD_INT 23
31336: PUSH
31337: LD_INT 24
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: ST_TO_ADDR
31344: GO 31399
31346: LD_INT 46
31348: DOUBLE
31349: EQUAL
31350: IFTRUE 31354
31352: GO 31372
31354: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31355: LD_ADDR_VAR 0 3
31359: PUSH
31360: LD_INT 23
31362: PUSH
31363: LD_INT 24
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: ST_TO_ADDR
31370: GO 31399
31372: LD_INT 47
31374: DOUBLE
31375: EQUAL
31376: IFTRUE 31380
31378: GO 31398
31380: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31381: LD_ADDR_VAR 0 3
31385: PUSH
31386: LD_INT 23
31388: PUSH
31389: LD_INT 24
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: ST_TO_ADDR
31396: GO 31399
31398: POP
// result := ( chassis in result ) ;
31399: LD_ADDR_VAR 0 3
31403: PUSH
31404: LD_VAR 0 1
31408: PUSH
31409: LD_VAR 0 3
31413: IN
31414: ST_TO_ADDR
// end ;
31415: LD_VAR 0 3
31419: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31420: LD_INT 0
31422: PPUSH
31423: PPUSH
31424: PPUSH
31425: PPUSH
31426: PPUSH
31427: PPUSH
31428: PPUSH
// result := array ;
31429: LD_ADDR_VAR 0 5
31433: PUSH
31434: LD_VAR 0 1
31438: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31439: LD_VAR 0 1
31443: NOT
31444: PUSH
31445: LD_VAR 0 2
31449: NOT
31450: OR
31451: PUSH
31452: LD_VAR 0 3
31456: NOT
31457: OR
31458: PUSH
31459: LD_VAR 0 2
31463: PUSH
31464: LD_VAR 0 1
31468: GREATER
31469: OR
31470: PUSH
31471: LD_VAR 0 3
31475: PUSH
31476: LD_VAR 0 1
31480: GREATER
31481: OR
31482: IFFALSE 31486
// exit ;
31484: GO 31782
// if direction then
31486: LD_VAR 0 4
31490: IFFALSE 31554
// begin d := 1 ;
31492: LD_ADDR_VAR 0 9
31496: PUSH
31497: LD_INT 1
31499: ST_TO_ADDR
// if i_from > i_to then
31500: LD_VAR 0 2
31504: PUSH
31505: LD_VAR 0 3
31509: GREATER
31510: IFFALSE 31536
// length := ( array - i_from ) + i_to else
31512: LD_ADDR_VAR 0 11
31516: PUSH
31517: LD_VAR 0 1
31521: PUSH
31522: LD_VAR 0 2
31526: MINUS
31527: PUSH
31528: LD_VAR 0 3
31532: PLUS
31533: ST_TO_ADDR
31534: GO 31552
// length := i_to - i_from ;
31536: LD_ADDR_VAR 0 11
31540: PUSH
31541: LD_VAR 0 3
31545: PUSH
31546: LD_VAR 0 2
31550: MINUS
31551: ST_TO_ADDR
// end else
31552: GO 31615
// begin d := - 1 ;
31554: LD_ADDR_VAR 0 9
31558: PUSH
31559: LD_INT 1
31561: NEG
31562: ST_TO_ADDR
// if i_from > i_to then
31563: LD_VAR 0 2
31567: PUSH
31568: LD_VAR 0 3
31572: GREATER
31573: IFFALSE 31593
// length := i_from - i_to else
31575: LD_ADDR_VAR 0 11
31579: PUSH
31580: LD_VAR 0 2
31584: PUSH
31585: LD_VAR 0 3
31589: MINUS
31590: ST_TO_ADDR
31591: GO 31615
// length := ( array - i_to ) + i_from ;
31593: LD_ADDR_VAR 0 11
31597: PUSH
31598: LD_VAR 0 1
31602: PUSH
31603: LD_VAR 0 3
31607: MINUS
31608: PUSH
31609: LD_VAR 0 2
31613: PLUS
31614: ST_TO_ADDR
// end ; if not length then
31615: LD_VAR 0 11
31619: NOT
31620: IFFALSE 31624
// exit ;
31622: GO 31782
// tmp := array ;
31624: LD_ADDR_VAR 0 10
31628: PUSH
31629: LD_VAR 0 1
31633: ST_TO_ADDR
// for i = 1 to length do
31634: LD_ADDR_VAR 0 6
31638: PUSH
31639: DOUBLE
31640: LD_INT 1
31642: DEC
31643: ST_TO_ADDR
31644: LD_VAR 0 11
31648: PUSH
31649: FOR_TO
31650: IFFALSE 31770
// begin for j = 1 to array do
31652: LD_ADDR_VAR 0 7
31656: PUSH
31657: DOUBLE
31658: LD_INT 1
31660: DEC
31661: ST_TO_ADDR
31662: LD_VAR 0 1
31666: PUSH
31667: FOR_TO
31668: IFFALSE 31756
// begin k := j + d ;
31670: LD_ADDR_VAR 0 8
31674: PUSH
31675: LD_VAR 0 7
31679: PUSH
31680: LD_VAR 0 9
31684: PLUS
31685: ST_TO_ADDR
// if k > array then
31686: LD_VAR 0 8
31690: PUSH
31691: LD_VAR 0 1
31695: GREATER
31696: IFFALSE 31706
// k := 1 ;
31698: LD_ADDR_VAR 0 8
31702: PUSH
31703: LD_INT 1
31705: ST_TO_ADDR
// if not k then
31706: LD_VAR 0 8
31710: NOT
31711: IFFALSE 31723
// k := array ;
31713: LD_ADDR_VAR 0 8
31717: PUSH
31718: LD_VAR 0 1
31722: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31723: LD_ADDR_VAR 0 10
31727: PUSH
31728: LD_VAR 0 10
31732: PPUSH
31733: LD_VAR 0 8
31737: PPUSH
31738: LD_VAR 0 1
31742: PUSH
31743: LD_VAR 0 7
31747: ARRAY
31748: PPUSH
31749: CALL_OW 1
31753: ST_TO_ADDR
// end ;
31754: GO 31667
31756: POP
31757: POP
// array := tmp ;
31758: LD_ADDR_VAR 0 1
31762: PUSH
31763: LD_VAR 0 10
31767: ST_TO_ADDR
// end ;
31768: GO 31649
31770: POP
31771: POP
// result := array ;
31772: LD_ADDR_VAR 0 5
31776: PUSH
31777: LD_VAR 0 1
31781: ST_TO_ADDR
// end ;
31782: LD_VAR 0 5
31786: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31787: LD_INT 0
31789: PPUSH
31790: PPUSH
// result := 0 ;
31791: LD_ADDR_VAR 0 3
31795: PUSH
31796: LD_INT 0
31798: ST_TO_ADDR
// if not array or not value in array then
31799: LD_VAR 0 1
31803: NOT
31804: PUSH
31805: LD_VAR 0 2
31809: PUSH
31810: LD_VAR 0 1
31814: IN
31815: NOT
31816: OR
31817: IFFALSE 31821
// exit ;
31819: GO 31875
// for i = 1 to array do
31821: LD_ADDR_VAR 0 4
31825: PUSH
31826: DOUBLE
31827: LD_INT 1
31829: DEC
31830: ST_TO_ADDR
31831: LD_VAR 0 1
31835: PUSH
31836: FOR_TO
31837: IFFALSE 31873
// if value = array [ i ] then
31839: LD_VAR 0 2
31843: PUSH
31844: LD_VAR 0 1
31848: PUSH
31849: LD_VAR 0 4
31853: ARRAY
31854: EQUAL
31855: IFFALSE 31871
// begin result := i ;
31857: LD_ADDR_VAR 0 3
31861: PUSH
31862: LD_VAR 0 4
31866: ST_TO_ADDR
// exit ;
31867: POP
31868: POP
31869: GO 31875
// end ;
31871: GO 31836
31873: POP
31874: POP
// end ;
31875: LD_VAR 0 3
31879: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31880: LD_INT 0
31882: PPUSH
// vc_chassis := chassis ;
31883: LD_ADDR_OWVAR 37
31887: PUSH
31888: LD_VAR 0 1
31892: ST_TO_ADDR
// vc_engine := engine ;
31893: LD_ADDR_OWVAR 39
31897: PUSH
31898: LD_VAR 0 2
31902: ST_TO_ADDR
// vc_control := control ;
31903: LD_ADDR_OWVAR 38
31907: PUSH
31908: LD_VAR 0 3
31912: ST_TO_ADDR
// vc_weapon := weapon ;
31913: LD_ADDR_OWVAR 40
31917: PUSH
31918: LD_VAR 0 4
31922: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31923: LD_ADDR_OWVAR 41
31927: PUSH
31928: LD_VAR 0 5
31932: ST_TO_ADDR
// end ;
31933: LD_VAR 0 6
31937: RET
// export function WantPlant ( unit ) ; var task ; begin
31938: LD_INT 0
31940: PPUSH
31941: PPUSH
// result := false ;
31942: LD_ADDR_VAR 0 2
31946: PUSH
31947: LD_INT 0
31949: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31950: LD_ADDR_VAR 0 3
31954: PUSH
31955: LD_VAR 0 1
31959: PPUSH
31960: CALL_OW 437
31964: ST_TO_ADDR
// if task then
31965: LD_VAR 0 3
31969: IFFALSE 31997
// if task [ 1 ] [ 1 ] = p then
31971: LD_VAR 0 3
31975: PUSH
31976: LD_INT 1
31978: ARRAY
31979: PUSH
31980: LD_INT 1
31982: ARRAY
31983: PUSH
31984: LD_STRING p
31986: EQUAL
31987: IFFALSE 31997
// result := true ;
31989: LD_ADDR_VAR 0 2
31993: PUSH
31994: LD_INT 1
31996: ST_TO_ADDR
// end ;
31997: LD_VAR 0 2
32001: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32002: LD_INT 0
32004: PPUSH
32005: PPUSH
32006: PPUSH
32007: PPUSH
// if pos < 1 then
32008: LD_VAR 0 2
32012: PUSH
32013: LD_INT 1
32015: LESS
32016: IFFALSE 32020
// exit ;
32018: GO 32323
// if pos = 1 then
32020: LD_VAR 0 2
32024: PUSH
32025: LD_INT 1
32027: EQUAL
32028: IFFALSE 32061
// result := Replace ( arr , pos [ 1 ] , value ) else
32030: LD_ADDR_VAR 0 4
32034: PUSH
32035: LD_VAR 0 1
32039: PPUSH
32040: LD_VAR 0 2
32044: PUSH
32045: LD_INT 1
32047: ARRAY
32048: PPUSH
32049: LD_VAR 0 3
32053: PPUSH
32054: CALL_OW 1
32058: ST_TO_ADDR
32059: GO 32323
// begin tmp := arr ;
32061: LD_ADDR_VAR 0 6
32065: PUSH
32066: LD_VAR 0 1
32070: ST_TO_ADDR
// s_arr := [ tmp ] ;
32071: LD_ADDR_VAR 0 7
32075: PUSH
32076: LD_VAR 0 6
32080: PUSH
32081: EMPTY
32082: LIST
32083: ST_TO_ADDR
// for i = 1 to pos - 1 do
32084: LD_ADDR_VAR 0 5
32088: PUSH
32089: DOUBLE
32090: LD_INT 1
32092: DEC
32093: ST_TO_ADDR
32094: LD_VAR 0 2
32098: PUSH
32099: LD_INT 1
32101: MINUS
32102: PUSH
32103: FOR_TO
32104: IFFALSE 32149
// begin tmp := tmp [ pos [ i ] ] ;
32106: LD_ADDR_VAR 0 6
32110: PUSH
32111: LD_VAR 0 6
32115: PUSH
32116: LD_VAR 0 2
32120: PUSH
32121: LD_VAR 0 5
32125: ARRAY
32126: ARRAY
32127: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32128: LD_ADDR_VAR 0 7
32132: PUSH
32133: LD_VAR 0 7
32137: PUSH
32138: LD_VAR 0 6
32142: PUSH
32143: EMPTY
32144: LIST
32145: ADD
32146: ST_TO_ADDR
// end ;
32147: GO 32103
32149: POP
32150: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32151: LD_ADDR_VAR 0 6
32155: PUSH
32156: LD_VAR 0 6
32160: PPUSH
32161: LD_VAR 0 2
32165: PUSH
32166: LD_VAR 0 2
32170: ARRAY
32171: PPUSH
32172: LD_VAR 0 3
32176: PPUSH
32177: CALL_OW 1
32181: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32182: LD_ADDR_VAR 0 7
32186: PUSH
32187: LD_VAR 0 7
32191: PPUSH
32192: LD_VAR 0 7
32196: PPUSH
32197: LD_VAR 0 6
32201: PPUSH
32202: CALL_OW 1
32206: ST_TO_ADDR
// for i = s_arr downto 2 do
32207: LD_ADDR_VAR 0 5
32211: PUSH
32212: DOUBLE
32213: LD_VAR 0 7
32217: INC
32218: ST_TO_ADDR
32219: LD_INT 2
32221: PUSH
32222: FOR_DOWNTO
32223: IFFALSE 32307
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32225: LD_ADDR_VAR 0 6
32229: PUSH
32230: LD_VAR 0 7
32234: PUSH
32235: LD_VAR 0 5
32239: PUSH
32240: LD_INT 1
32242: MINUS
32243: ARRAY
32244: PPUSH
32245: LD_VAR 0 2
32249: PUSH
32250: LD_VAR 0 5
32254: PUSH
32255: LD_INT 1
32257: MINUS
32258: ARRAY
32259: PPUSH
32260: LD_VAR 0 7
32264: PUSH
32265: LD_VAR 0 5
32269: ARRAY
32270: PPUSH
32271: CALL_OW 1
32275: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32276: LD_ADDR_VAR 0 7
32280: PUSH
32281: LD_VAR 0 7
32285: PPUSH
32286: LD_VAR 0 5
32290: PUSH
32291: LD_INT 1
32293: MINUS
32294: PPUSH
32295: LD_VAR 0 6
32299: PPUSH
32300: CALL_OW 1
32304: ST_TO_ADDR
// end ;
32305: GO 32222
32307: POP
32308: POP
// result := s_arr [ 1 ] ;
32309: LD_ADDR_VAR 0 4
32313: PUSH
32314: LD_VAR 0 7
32318: PUSH
32319: LD_INT 1
32321: ARRAY
32322: ST_TO_ADDR
// end ; end ;
32323: LD_VAR 0 4
32327: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32328: LD_INT 0
32330: PPUSH
32331: PPUSH
// if not list then
32332: LD_VAR 0 1
32336: NOT
32337: IFFALSE 32341
// exit ;
32339: GO 32432
// i := list [ pos1 ] ;
32341: LD_ADDR_VAR 0 5
32345: PUSH
32346: LD_VAR 0 1
32350: PUSH
32351: LD_VAR 0 2
32355: ARRAY
32356: ST_TO_ADDR
// if not i then
32357: LD_VAR 0 5
32361: NOT
32362: IFFALSE 32366
// exit ;
32364: GO 32432
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32366: LD_ADDR_VAR 0 1
32370: PUSH
32371: LD_VAR 0 1
32375: PPUSH
32376: LD_VAR 0 2
32380: PPUSH
32381: LD_VAR 0 1
32385: PUSH
32386: LD_VAR 0 3
32390: ARRAY
32391: PPUSH
32392: CALL_OW 1
32396: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32397: LD_ADDR_VAR 0 1
32401: PUSH
32402: LD_VAR 0 1
32406: PPUSH
32407: LD_VAR 0 3
32411: PPUSH
32412: LD_VAR 0 5
32416: PPUSH
32417: CALL_OW 1
32421: ST_TO_ADDR
// result := list ;
32422: LD_ADDR_VAR 0 4
32426: PUSH
32427: LD_VAR 0 1
32431: ST_TO_ADDR
// end ;
32432: LD_VAR 0 4
32436: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32437: LD_INT 0
32439: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32440: LD_ADDR_VAR 0 5
32444: PUSH
32445: LD_VAR 0 1
32449: PPUSH
32450: CALL_OW 250
32454: PPUSH
32455: LD_VAR 0 1
32459: PPUSH
32460: CALL_OW 251
32464: PPUSH
32465: LD_VAR 0 2
32469: PPUSH
32470: LD_VAR 0 3
32474: PPUSH
32475: LD_VAR 0 4
32479: PPUSH
32480: CALL 32490 0 5
32484: ST_TO_ADDR
// end ;
32485: LD_VAR 0 5
32489: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32490: LD_INT 0
32492: PPUSH
32493: PPUSH
32494: PPUSH
32495: PPUSH
// if not list then
32496: LD_VAR 0 3
32500: NOT
32501: IFFALSE 32505
// exit ;
32503: GO 32893
// result := [ ] ;
32505: LD_ADDR_VAR 0 6
32509: PUSH
32510: EMPTY
32511: ST_TO_ADDR
// for i in list do
32512: LD_ADDR_VAR 0 7
32516: PUSH
32517: LD_VAR 0 3
32521: PUSH
32522: FOR_IN
32523: IFFALSE 32725
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32525: LD_ADDR_VAR 0 9
32529: PUSH
32530: LD_VAR 0 7
32534: PPUSH
32535: LD_VAR 0 1
32539: PPUSH
32540: LD_VAR 0 2
32544: PPUSH
32545: CALL_OW 297
32549: ST_TO_ADDR
// if not result then
32550: LD_VAR 0 6
32554: NOT
32555: IFFALSE 32581
// result := [ [ i , tmp ] ] else
32557: LD_ADDR_VAR 0 6
32561: PUSH
32562: LD_VAR 0 7
32566: PUSH
32567: LD_VAR 0 9
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: EMPTY
32577: LIST
32578: ST_TO_ADDR
32579: GO 32723
// begin if result [ result ] [ 2 ] < tmp then
32581: LD_VAR 0 6
32585: PUSH
32586: LD_VAR 0 6
32590: ARRAY
32591: PUSH
32592: LD_INT 2
32594: ARRAY
32595: PUSH
32596: LD_VAR 0 9
32600: LESS
32601: IFFALSE 32643
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32603: LD_ADDR_VAR 0 6
32607: PUSH
32608: LD_VAR 0 6
32612: PPUSH
32613: LD_VAR 0 6
32617: PUSH
32618: LD_INT 1
32620: PLUS
32621: PPUSH
32622: LD_VAR 0 7
32626: PUSH
32627: LD_VAR 0 9
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PPUSH
32636: CALL_OW 2
32640: ST_TO_ADDR
32641: GO 32723
// for j = 1 to result do
32643: LD_ADDR_VAR 0 8
32647: PUSH
32648: DOUBLE
32649: LD_INT 1
32651: DEC
32652: ST_TO_ADDR
32653: LD_VAR 0 6
32657: PUSH
32658: FOR_TO
32659: IFFALSE 32721
// begin if tmp < result [ j ] [ 2 ] then
32661: LD_VAR 0 9
32665: PUSH
32666: LD_VAR 0 6
32670: PUSH
32671: LD_VAR 0 8
32675: ARRAY
32676: PUSH
32677: LD_INT 2
32679: ARRAY
32680: LESS
32681: IFFALSE 32719
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32683: LD_ADDR_VAR 0 6
32687: PUSH
32688: LD_VAR 0 6
32692: PPUSH
32693: LD_VAR 0 8
32697: PPUSH
32698: LD_VAR 0 7
32702: PUSH
32703: LD_VAR 0 9
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PPUSH
32712: CALL_OW 2
32716: ST_TO_ADDR
// break ;
32717: GO 32721
// end ; end ;
32719: GO 32658
32721: POP
32722: POP
// end ; end ;
32723: GO 32522
32725: POP
32726: POP
// if result and not asc then
32727: LD_VAR 0 6
32731: PUSH
32732: LD_VAR 0 4
32736: NOT
32737: AND
32738: IFFALSE 32813
// begin tmp := result ;
32740: LD_ADDR_VAR 0 9
32744: PUSH
32745: LD_VAR 0 6
32749: ST_TO_ADDR
// for i = tmp downto 1 do
32750: LD_ADDR_VAR 0 7
32754: PUSH
32755: DOUBLE
32756: LD_VAR 0 9
32760: INC
32761: ST_TO_ADDR
32762: LD_INT 1
32764: PUSH
32765: FOR_DOWNTO
32766: IFFALSE 32811
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32768: LD_ADDR_VAR 0 6
32772: PUSH
32773: LD_VAR 0 6
32777: PPUSH
32778: LD_VAR 0 9
32782: PUSH
32783: LD_VAR 0 7
32787: MINUS
32788: PUSH
32789: LD_INT 1
32791: PLUS
32792: PPUSH
32793: LD_VAR 0 9
32797: PUSH
32798: LD_VAR 0 7
32802: ARRAY
32803: PPUSH
32804: CALL_OW 1
32808: ST_TO_ADDR
32809: GO 32765
32811: POP
32812: POP
// end ; tmp := [ ] ;
32813: LD_ADDR_VAR 0 9
32817: PUSH
32818: EMPTY
32819: ST_TO_ADDR
// if mode then
32820: LD_VAR 0 5
32824: IFFALSE 32893
// begin for i = 1 to result do
32826: LD_ADDR_VAR 0 7
32830: PUSH
32831: DOUBLE
32832: LD_INT 1
32834: DEC
32835: ST_TO_ADDR
32836: LD_VAR 0 6
32840: PUSH
32841: FOR_TO
32842: IFFALSE 32881
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32844: LD_ADDR_VAR 0 9
32848: PUSH
32849: LD_VAR 0 9
32853: PPUSH
32854: LD_VAR 0 7
32858: PPUSH
32859: LD_VAR 0 6
32863: PUSH
32864: LD_VAR 0 7
32868: ARRAY
32869: PUSH
32870: LD_INT 1
32872: ARRAY
32873: PPUSH
32874: CALL_OW 1
32878: ST_TO_ADDR
32879: GO 32841
32881: POP
32882: POP
// result := tmp ;
32883: LD_ADDR_VAR 0 6
32887: PUSH
32888: LD_VAR 0 9
32892: ST_TO_ADDR
// end ; end ;
32893: LD_VAR 0 6
32897: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32898: LD_INT 0
32900: PPUSH
32901: PPUSH
32902: PPUSH
32903: PPUSH
32904: PPUSH
32905: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32906: LD_ADDR_VAR 0 5
32910: PUSH
32911: LD_INT 0
32913: PUSH
32914: LD_INT 0
32916: PUSH
32917: LD_INT 0
32919: PUSH
32920: EMPTY
32921: PUSH
32922: EMPTY
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: ST_TO_ADDR
// if not x or not y then
32928: LD_VAR 0 2
32932: NOT
32933: PUSH
32934: LD_VAR 0 3
32938: NOT
32939: OR
32940: IFFALSE 32944
// exit ;
32942: GO 34596
// if not range then
32944: LD_VAR 0 4
32948: NOT
32949: IFFALSE 32959
// range := 10 ;
32951: LD_ADDR_VAR 0 4
32955: PUSH
32956: LD_INT 10
32958: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32959: LD_ADDR_VAR 0 8
32963: PUSH
32964: LD_INT 81
32966: PUSH
32967: LD_VAR 0 1
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: PUSH
32976: LD_INT 92
32978: PUSH
32979: LD_VAR 0 2
32983: PUSH
32984: LD_VAR 0 3
32988: PUSH
32989: LD_VAR 0 4
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 3
33002: PUSH
33003: LD_INT 21
33005: PUSH
33006: LD_INT 3
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: LIST
33021: PPUSH
33022: CALL_OW 69
33026: ST_TO_ADDR
// if not tmp then
33027: LD_VAR 0 8
33031: NOT
33032: IFFALSE 33036
// exit ;
33034: GO 34596
// for i in tmp do
33036: LD_ADDR_VAR 0 6
33040: PUSH
33041: LD_VAR 0 8
33045: PUSH
33046: FOR_IN
33047: IFFALSE 34571
// begin points := [ 0 , 0 , 0 ] ;
33049: LD_ADDR_VAR 0 9
33053: PUSH
33054: LD_INT 0
33056: PUSH
33057: LD_INT 0
33059: PUSH
33060: LD_INT 0
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: LIST
33067: ST_TO_ADDR
// bpoints := 1 ;
33068: LD_ADDR_VAR 0 10
33072: PUSH
33073: LD_INT 1
33075: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33076: LD_VAR 0 6
33080: PPUSH
33081: CALL_OW 247
33085: PUSH
33086: LD_INT 1
33088: DOUBLE
33089: EQUAL
33090: IFTRUE 33094
33092: GO 33672
33094: POP
// begin if GetClass ( i ) = 1 then
33095: LD_VAR 0 6
33099: PPUSH
33100: CALL_OW 257
33104: PUSH
33105: LD_INT 1
33107: EQUAL
33108: IFFALSE 33129
// points := [ 10 , 5 , 3 ] ;
33110: LD_ADDR_VAR 0 9
33114: PUSH
33115: LD_INT 10
33117: PUSH
33118: LD_INT 5
33120: PUSH
33121: LD_INT 3
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: LIST
33128: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33129: LD_VAR 0 6
33133: PPUSH
33134: CALL_OW 257
33138: PUSH
33139: LD_INT 2
33141: PUSH
33142: LD_INT 3
33144: PUSH
33145: LD_INT 4
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: LIST
33152: IN
33153: IFFALSE 33174
// points := [ 3 , 2 , 1 ] ;
33155: LD_ADDR_VAR 0 9
33159: PUSH
33160: LD_INT 3
33162: PUSH
33163: LD_INT 2
33165: PUSH
33166: LD_INT 1
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: LIST
33173: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33174: LD_VAR 0 6
33178: PPUSH
33179: CALL_OW 257
33183: PUSH
33184: LD_INT 5
33186: EQUAL
33187: IFFALSE 33208
// points := [ 130 , 5 , 2 ] ;
33189: LD_ADDR_VAR 0 9
33193: PUSH
33194: LD_INT 130
33196: PUSH
33197: LD_INT 5
33199: PUSH
33200: LD_INT 2
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: LIST
33207: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33208: LD_VAR 0 6
33212: PPUSH
33213: CALL_OW 257
33217: PUSH
33218: LD_INT 8
33220: EQUAL
33221: IFFALSE 33242
// points := [ 35 , 35 , 30 ] ;
33223: LD_ADDR_VAR 0 9
33227: PUSH
33228: LD_INT 35
33230: PUSH
33231: LD_INT 35
33233: PUSH
33234: LD_INT 30
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: LIST
33241: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33242: LD_VAR 0 6
33246: PPUSH
33247: CALL_OW 257
33251: PUSH
33252: LD_INT 9
33254: EQUAL
33255: IFFALSE 33276
// points := [ 20 , 55 , 40 ] ;
33257: LD_ADDR_VAR 0 9
33261: PUSH
33262: LD_INT 20
33264: PUSH
33265: LD_INT 55
33267: PUSH
33268: LD_INT 40
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: LIST
33275: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33276: LD_VAR 0 6
33280: PPUSH
33281: CALL_OW 257
33285: PUSH
33286: LD_INT 12
33288: PUSH
33289: LD_INT 16
33291: PUSH
33292: EMPTY
33293: LIST
33294: LIST
33295: IN
33296: IFFALSE 33317
// points := [ 5 , 3 , 2 ] ;
33298: LD_ADDR_VAR 0 9
33302: PUSH
33303: LD_INT 5
33305: PUSH
33306: LD_INT 3
33308: PUSH
33309: LD_INT 2
33311: PUSH
33312: EMPTY
33313: LIST
33314: LIST
33315: LIST
33316: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33317: LD_VAR 0 6
33321: PPUSH
33322: CALL_OW 257
33326: PUSH
33327: LD_INT 17
33329: EQUAL
33330: IFFALSE 33351
// points := [ 100 , 50 , 75 ] ;
33332: LD_ADDR_VAR 0 9
33336: PUSH
33337: LD_INT 100
33339: PUSH
33340: LD_INT 50
33342: PUSH
33343: LD_INT 75
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: LIST
33350: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33351: LD_VAR 0 6
33355: PPUSH
33356: CALL_OW 257
33360: PUSH
33361: LD_INT 15
33363: EQUAL
33364: IFFALSE 33385
// points := [ 10 , 5 , 3 ] ;
33366: LD_ADDR_VAR 0 9
33370: PUSH
33371: LD_INT 10
33373: PUSH
33374: LD_INT 5
33376: PUSH
33377: LD_INT 3
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: LIST
33384: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33385: LD_VAR 0 6
33389: PPUSH
33390: CALL_OW 257
33394: PUSH
33395: LD_INT 14
33397: EQUAL
33398: IFFALSE 33419
// points := [ 10 , 0 , 0 ] ;
33400: LD_ADDR_VAR 0 9
33404: PUSH
33405: LD_INT 10
33407: PUSH
33408: LD_INT 0
33410: PUSH
33411: LD_INT 0
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: LIST
33418: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33419: LD_VAR 0 6
33423: PPUSH
33424: CALL_OW 257
33428: PUSH
33429: LD_INT 11
33431: EQUAL
33432: IFFALSE 33453
// points := [ 30 , 10 , 5 ] ;
33434: LD_ADDR_VAR 0 9
33438: PUSH
33439: LD_INT 30
33441: PUSH
33442: LD_INT 10
33444: PUSH
33445: LD_INT 5
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: LIST
33452: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33453: LD_VAR 0 1
33457: PPUSH
33458: LD_INT 5
33460: PPUSH
33461: CALL_OW 321
33465: PUSH
33466: LD_INT 2
33468: EQUAL
33469: IFFALSE 33486
// bpoints := bpoints * 1.8 ;
33471: LD_ADDR_VAR 0 10
33475: PUSH
33476: LD_VAR 0 10
33480: PUSH
33481: LD_REAL  1.80000000000000E+0000
33484: MUL
33485: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33486: LD_VAR 0 6
33490: PPUSH
33491: CALL_OW 257
33495: PUSH
33496: LD_INT 1
33498: PUSH
33499: LD_INT 2
33501: PUSH
33502: LD_INT 3
33504: PUSH
33505: LD_INT 4
33507: PUSH
33508: EMPTY
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: IN
33514: PUSH
33515: LD_VAR 0 1
33519: PPUSH
33520: LD_INT 51
33522: PPUSH
33523: CALL_OW 321
33527: PUSH
33528: LD_INT 2
33530: EQUAL
33531: AND
33532: IFFALSE 33549
// bpoints := bpoints * 1.2 ;
33534: LD_ADDR_VAR 0 10
33538: PUSH
33539: LD_VAR 0 10
33543: PUSH
33544: LD_REAL  1.20000000000000E+0000
33547: MUL
33548: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33549: LD_VAR 0 6
33553: PPUSH
33554: CALL_OW 257
33558: PUSH
33559: LD_INT 5
33561: PUSH
33562: LD_INT 7
33564: PUSH
33565: LD_INT 9
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: LIST
33572: IN
33573: PUSH
33574: LD_VAR 0 1
33578: PPUSH
33579: LD_INT 52
33581: PPUSH
33582: CALL_OW 321
33586: PUSH
33587: LD_INT 2
33589: EQUAL
33590: AND
33591: IFFALSE 33608
// bpoints := bpoints * 1.5 ;
33593: LD_ADDR_VAR 0 10
33597: PUSH
33598: LD_VAR 0 10
33602: PUSH
33603: LD_REAL  1.50000000000000E+0000
33606: MUL
33607: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33608: LD_VAR 0 1
33612: PPUSH
33613: LD_INT 66
33615: PPUSH
33616: CALL_OW 321
33620: PUSH
33621: LD_INT 2
33623: EQUAL
33624: IFFALSE 33641
// bpoints := bpoints * 1.1 ;
33626: LD_ADDR_VAR 0 10
33630: PUSH
33631: LD_VAR 0 10
33635: PUSH
33636: LD_REAL  1.10000000000000E+0000
33639: MUL
33640: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33641: LD_ADDR_VAR 0 10
33645: PUSH
33646: LD_VAR 0 10
33650: PUSH
33651: LD_VAR 0 6
33655: PPUSH
33656: LD_INT 1
33658: PPUSH
33659: CALL_OW 259
33663: PUSH
33664: LD_REAL  1.15000000000000E+0000
33667: MUL
33668: MUL
33669: ST_TO_ADDR
// end ; unit_vehicle :
33670: GO 34500
33672: LD_INT 2
33674: DOUBLE
33675: EQUAL
33676: IFTRUE 33680
33678: GO 34488
33680: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33681: LD_VAR 0 6
33685: PPUSH
33686: CALL_OW 264
33690: PUSH
33691: LD_INT 2
33693: PUSH
33694: LD_INT 42
33696: PUSH
33697: LD_INT 24
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: LIST
33704: IN
33705: IFFALSE 33726
// points := [ 25 , 5 , 3 ] ;
33707: LD_ADDR_VAR 0 9
33711: PUSH
33712: LD_INT 25
33714: PUSH
33715: LD_INT 5
33717: PUSH
33718: LD_INT 3
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: LIST
33725: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33726: LD_VAR 0 6
33730: PPUSH
33731: CALL_OW 264
33735: PUSH
33736: LD_INT 4
33738: PUSH
33739: LD_INT 43
33741: PUSH
33742: LD_INT 25
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: LIST
33749: IN
33750: IFFALSE 33771
// points := [ 40 , 15 , 5 ] ;
33752: LD_ADDR_VAR 0 9
33756: PUSH
33757: LD_INT 40
33759: PUSH
33760: LD_INT 15
33762: PUSH
33763: LD_INT 5
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: LIST
33770: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33771: LD_VAR 0 6
33775: PPUSH
33776: CALL_OW 264
33780: PUSH
33781: LD_INT 3
33783: PUSH
33784: LD_INT 23
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: IN
33791: IFFALSE 33812
// points := [ 7 , 25 , 8 ] ;
33793: LD_ADDR_VAR 0 9
33797: PUSH
33798: LD_INT 7
33800: PUSH
33801: LD_INT 25
33803: PUSH
33804: LD_INT 8
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: LIST
33811: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33812: LD_VAR 0 6
33816: PPUSH
33817: CALL_OW 264
33821: PUSH
33822: LD_INT 5
33824: PUSH
33825: LD_INT 27
33827: PUSH
33828: LD_INT 44
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: LIST
33835: IN
33836: IFFALSE 33857
// points := [ 14 , 50 , 16 ] ;
33838: LD_ADDR_VAR 0 9
33842: PUSH
33843: LD_INT 14
33845: PUSH
33846: LD_INT 50
33848: PUSH
33849: LD_INT 16
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: LIST
33856: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33857: LD_VAR 0 6
33861: PPUSH
33862: CALL_OW 264
33866: PUSH
33867: LD_INT 6
33869: PUSH
33870: LD_INT 46
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: IN
33877: IFFALSE 33898
// points := [ 32 , 120 , 70 ] ;
33879: LD_ADDR_VAR 0 9
33883: PUSH
33884: LD_INT 32
33886: PUSH
33887: LD_INT 120
33889: PUSH
33890: LD_INT 70
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: LIST
33897: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33898: LD_VAR 0 6
33902: PPUSH
33903: CALL_OW 264
33907: PUSH
33908: LD_INT 7
33910: PUSH
33911: LD_INT 28
33913: PUSH
33914: LD_INT 45
33916: PUSH
33917: LD_EXP 34
33921: PUSH
33922: EMPTY
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: IN
33928: IFFALSE 33949
// points := [ 35 , 20 , 45 ] ;
33930: LD_ADDR_VAR 0 9
33934: PUSH
33935: LD_INT 35
33937: PUSH
33938: LD_INT 20
33940: PUSH
33941: LD_INT 45
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: LIST
33948: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33949: LD_VAR 0 6
33953: PPUSH
33954: CALL_OW 264
33958: PUSH
33959: LD_INT 47
33961: PUSH
33962: EMPTY
33963: LIST
33964: IN
33965: IFFALSE 33986
// points := [ 67 , 45 , 75 ] ;
33967: LD_ADDR_VAR 0 9
33971: PUSH
33972: LD_INT 67
33974: PUSH
33975: LD_INT 45
33977: PUSH
33978: LD_INT 75
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: LIST
33985: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33986: LD_VAR 0 6
33990: PPUSH
33991: CALL_OW 264
33995: PUSH
33996: LD_INT 26
33998: PUSH
33999: EMPTY
34000: LIST
34001: IN
34002: IFFALSE 34023
// points := [ 120 , 30 , 80 ] ;
34004: LD_ADDR_VAR 0 9
34008: PUSH
34009: LD_INT 120
34011: PUSH
34012: LD_INT 30
34014: PUSH
34015: LD_INT 80
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: LIST
34022: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34023: LD_VAR 0 6
34027: PPUSH
34028: CALL_OW 264
34032: PUSH
34033: LD_INT 22
34035: PUSH
34036: EMPTY
34037: LIST
34038: IN
34039: IFFALSE 34060
// points := [ 40 , 1 , 1 ] ;
34041: LD_ADDR_VAR 0 9
34045: PUSH
34046: LD_INT 40
34048: PUSH
34049: LD_INT 1
34051: PUSH
34052: LD_INT 1
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: LIST
34059: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34060: LD_VAR 0 6
34064: PPUSH
34065: CALL_OW 264
34069: PUSH
34070: LD_INT 29
34072: PUSH
34073: EMPTY
34074: LIST
34075: IN
34076: IFFALSE 34097
// points := [ 70 , 200 , 400 ] ;
34078: LD_ADDR_VAR 0 9
34082: PUSH
34083: LD_INT 70
34085: PUSH
34086: LD_INT 200
34088: PUSH
34089: LD_INT 400
34091: PUSH
34092: EMPTY
34093: LIST
34094: LIST
34095: LIST
34096: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34097: LD_VAR 0 6
34101: PPUSH
34102: CALL_OW 264
34106: PUSH
34107: LD_INT 14
34109: PUSH
34110: LD_INT 53
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: IN
34117: IFFALSE 34138
// points := [ 40 , 10 , 20 ] ;
34119: LD_ADDR_VAR 0 9
34123: PUSH
34124: LD_INT 40
34126: PUSH
34127: LD_INT 10
34129: PUSH
34130: LD_INT 20
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: LIST
34137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34138: LD_VAR 0 6
34142: PPUSH
34143: CALL_OW 264
34147: PUSH
34148: LD_INT 9
34150: PUSH
34151: EMPTY
34152: LIST
34153: IN
34154: IFFALSE 34175
// points := [ 5 , 70 , 20 ] ;
34156: LD_ADDR_VAR 0 9
34160: PUSH
34161: LD_INT 5
34163: PUSH
34164: LD_INT 70
34166: PUSH
34167: LD_INT 20
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: LIST
34174: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34175: LD_VAR 0 6
34179: PPUSH
34180: CALL_OW 264
34184: PUSH
34185: LD_INT 10
34187: PUSH
34188: EMPTY
34189: LIST
34190: IN
34191: IFFALSE 34212
// points := [ 35 , 110 , 70 ] ;
34193: LD_ADDR_VAR 0 9
34197: PUSH
34198: LD_INT 35
34200: PUSH
34201: LD_INT 110
34203: PUSH
34204: LD_INT 70
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: LIST
34211: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34212: LD_VAR 0 6
34216: PPUSH
34217: CALL_OW 265
34221: PUSH
34222: LD_INT 25
34224: EQUAL
34225: IFFALSE 34246
// points := [ 80 , 65 , 100 ] ;
34227: LD_ADDR_VAR 0 9
34231: PUSH
34232: LD_INT 80
34234: PUSH
34235: LD_INT 65
34237: PUSH
34238: LD_INT 100
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: LIST
34245: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34246: LD_VAR 0 6
34250: PPUSH
34251: CALL_OW 263
34255: PUSH
34256: LD_INT 1
34258: EQUAL
34259: IFFALSE 34294
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34261: LD_ADDR_VAR 0 10
34265: PUSH
34266: LD_VAR 0 10
34270: PUSH
34271: LD_VAR 0 6
34275: PPUSH
34276: CALL_OW 311
34280: PPUSH
34281: LD_INT 3
34283: PPUSH
34284: CALL_OW 259
34288: PUSH
34289: LD_INT 4
34291: MUL
34292: MUL
34293: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34294: LD_VAR 0 6
34298: PPUSH
34299: CALL_OW 263
34303: PUSH
34304: LD_INT 2
34306: EQUAL
34307: IFFALSE 34358
// begin j := IsControledBy ( i ) ;
34309: LD_ADDR_VAR 0 7
34313: PUSH
34314: LD_VAR 0 6
34318: PPUSH
34319: CALL_OW 312
34323: ST_TO_ADDR
// if j then
34324: LD_VAR 0 7
34328: IFFALSE 34358
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34330: LD_ADDR_VAR 0 10
34334: PUSH
34335: LD_VAR 0 10
34339: PUSH
34340: LD_VAR 0 7
34344: PPUSH
34345: LD_INT 3
34347: PPUSH
34348: CALL_OW 259
34352: PUSH
34353: LD_INT 3
34355: MUL
34356: MUL
34357: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34358: LD_VAR 0 6
34362: PPUSH
34363: CALL_OW 264
34367: PUSH
34368: LD_INT 5
34370: PUSH
34371: LD_INT 6
34373: PUSH
34374: LD_INT 46
34376: PUSH
34377: LD_INT 44
34379: PUSH
34380: LD_INT 47
34382: PUSH
34383: LD_INT 45
34385: PUSH
34386: LD_INT 28
34388: PUSH
34389: LD_INT 7
34391: PUSH
34392: LD_INT 27
34394: PUSH
34395: LD_INT 29
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: IN
34410: PUSH
34411: LD_VAR 0 1
34415: PPUSH
34416: LD_INT 52
34418: PPUSH
34419: CALL_OW 321
34423: PUSH
34424: LD_INT 2
34426: EQUAL
34427: AND
34428: IFFALSE 34445
// bpoints := bpoints * 1.2 ;
34430: LD_ADDR_VAR 0 10
34434: PUSH
34435: LD_VAR 0 10
34439: PUSH
34440: LD_REAL  1.20000000000000E+0000
34443: MUL
34444: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34445: LD_VAR 0 6
34449: PPUSH
34450: CALL_OW 264
34454: PUSH
34455: LD_INT 6
34457: PUSH
34458: LD_INT 46
34460: PUSH
34461: LD_INT 47
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: LIST
34468: IN
34469: IFFALSE 34486
// bpoints := bpoints * 1.2 ;
34471: LD_ADDR_VAR 0 10
34475: PUSH
34476: LD_VAR 0 10
34480: PUSH
34481: LD_REAL  1.20000000000000E+0000
34484: MUL
34485: ST_TO_ADDR
// end ; unit_building :
34486: GO 34500
34488: LD_INT 3
34490: DOUBLE
34491: EQUAL
34492: IFTRUE 34496
34494: GO 34499
34496: POP
// ; end ;
34497: GO 34500
34499: POP
// for j = 1 to 3 do
34500: LD_ADDR_VAR 0 7
34504: PUSH
34505: DOUBLE
34506: LD_INT 1
34508: DEC
34509: ST_TO_ADDR
34510: LD_INT 3
34512: PUSH
34513: FOR_TO
34514: IFFALSE 34567
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34516: LD_ADDR_VAR 0 5
34520: PUSH
34521: LD_VAR 0 5
34525: PPUSH
34526: LD_VAR 0 7
34530: PPUSH
34531: LD_VAR 0 5
34535: PUSH
34536: LD_VAR 0 7
34540: ARRAY
34541: PUSH
34542: LD_VAR 0 9
34546: PUSH
34547: LD_VAR 0 7
34551: ARRAY
34552: PUSH
34553: LD_VAR 0 10
34557: MUL
34558: PLUS
34559: PPUSH
34560: CALL_OW 1
34564: ST_TO_ADDR
34565: GO 34513
34567: POP
34568: POP
// end ;
34569: GO 33046
34571: POP
34572: POP
// result := Replace ( result , 4 , tmp ) ;
34573: LD_ADDR_VAR 0 5
34577: PUSH
34578: LD_VAR 0 5
34582: PPUSH
34583: LD_INT 4
34585: PPUSH
34586: LD_VAR 0 8
34590: PPUSH
34591: CALL_OW 1
34595: ST_TO_ADDR
// end ;
34596: LD_VAR 0 5
34600: RET
// export function DangerAtRange ( unit , range ) ; begin
34601: LD_INT 0
34603: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34604: LD_ADDR_VAR 0 3
34608: PUSH
34609: LD_VAR 0 1
34613: PPUSH
34614: CALL_OW 255
34618: PPUSH
34619: LD_VAR 0 1
34623: PPUSH
34624: CALL_OW 250
34628: PPUSH
34629: LD_VAR 0 1
34633: PPUSH
34634: CALL_OW 251
34638: PPUSH
34639: LD_VAR 0 2
34643: PPUSH
34644: CALL 32898 0 4
34648: ST_TO_ADDR
// end ;
34649: LD_VAR 0 3
34653: RET
// export function DangerInArea ( side , area ) ; begin
34654: LD_INT 0
34656: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34657: LD_ADDR_VAR 0 3
34661: PUSH
34662: LD_VAR 0 2
34666: PPUSH
34667: LD_INT 81
34669: PUSH
34670: LD_VAR 0 1
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PPUSH
34679: CALL_OW 70
34683: ST_TO_ADDR
// end ;
34684: LD_VAR 0 3
34688: RET
// export function IsExtension ( b ) ; begin
34689: LD_INT 0
34691: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34692: LD_ADDR_VAR 0 2
34696: PUSH
34697: LD_VAR 0 1
34701: PUSH
34702: LD_INT 23
34704: PUSH
34705: LD_INT 20
34707: PUSH
34708: LD_INT 22
34710: PUSH
34711: LD_INT 17
34713: PUSH
34714: LD_INT 24
34716: PUSH
34717: LD_INT 21
34719: PUSH
34720: LD_INT 19
34722: PUSH
34723: LD_INT 16
34725: PUSH
34726: LD_INT 25
34728: PUSH
34729: LD_INT 18
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: IN
34744: ST_TO_ADDR
// end ;
34745: LD_VAR 0 2
34749: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34750: LD_INT 0
34752: PPUSH
34753: PPUSH
34754: PPUSH
// result := [ ] ;
34755: LD_ADDR_VAR 0 4
34759: PUSH
34760: EMPTY
34761: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34762: LD_ADDR_VAR 0 5
34766: PUSH
34767: LD_VAR 0 2
34771: PPUSH
34772: LD_INT 21
34774: PUSH
34775: LD_INT 3
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PPUSH
34782: CALL_OW 70
34786: ST_TO_ADDR
// if not tmp then
34787: LD_VAR 0 5
34791: NOT
34792: IFFALSE 34796
// exit ;
34794: GO 34860
// if checkLink then
34796: LD_VAR 0 3
34800: IFFALSE 34850
// begin for i in tmp do
34802: LD_ADDR_VAR 0 6
34806: PUSH
34807: LD_VAR 0 5
34811: PUSH
34812: FOR_IN
34813: IFFALSE 34848
// if GetBase ( i ) <> base then
34815: LD_VAR 0 6
34819: PPUSH
34820: CALL_OW 274
34824: PUSH
34825: LD_VAR 0 1
34829: NONEQUAL
34830: IFFALSE 34846
// ComLinkToBase ( base , i ) ;
34832: LD_VAR 0 1
34836: PPUSH
34837: LD_VAR 0 6
34841: PPUSH
34842: CALL_OW 169
34846: GO 34812
34848: POP
34849: POP
// end ; result := tmp ;
34850: LD_ADDR_VAR 0 4
34854: PUSH
34855: LD_VAR 0 5
34859: ST_TO_ADDR
// end ;
34860: LD_VAR 0 4
34864: RET
// export function ComComplete ( units , b ) ; var i ; begin
34865: LD_INT 0
34867: PPUSH
34868: PPUSH
// if not units then
34869: LD_VAR 0 1
34873: NOT
34874: IFFALSE 34878
// exit ;
34876: GO 34968
// for i in units do
34878: LD_ADDR_VAR 0 4
34882: PUSH
34883: LD_VAR 0 1
34887: PUSH
34888: FOR_IN
34889: IFFALSE 34966
// if BuildingStatus ( b ) = bs_build then
34891: LD_VAR 0 2
34895: PPUSH
34896: CALL_OW 461
34900: PUSH
34901: LD_INT 1
34903: EQUAL
34904: IFFALSE 34964
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34906: LD_VAR 0 4
34910: PPUSH
34911: LD_STRING h
34913: PUSH
34914: LD_VAR 0 2
34918: PPUSH
34919: CALL_OW 250
34923: PUSH
34924: LD_VAR 0 2
34928: PPUSH
34929: CALL_OW 251
34933: PUSH
34934: LD_VAR 0 2
34938: PUSH
34939: LD_INT 0
34941: PUSH
34942: LD_INT 0
34944: PUSH
34945: LD_INT 0
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: PUSH
34957: EMPTY
34958: LIST
34959: PPUSH
34960: CALL_OW 446
34964: GO 34888
34966: POP
34967: POP
// end ;
34968: LD_VAR 0 3
34972: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34973: LD_INT 0
34975: PPUSH
34976: PPUSH
34977: PPUSH
34978: PPUSH
34979: PPUSH
34980: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34981: LD_VAR 0 1
34985: NOT
34986: PUSH
34987: LD_VAR 0 1
34991: PPUSH
34992: CALL_OW 263
34996: PUSH
34997: LD_INT 2
34999: NONEQUAL
35000: OR
35001: IFFALSE 35005
// exit ;
35003: GO 35321
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35005: LD_ADDR_VAR 0 6
35009: PUSH
35010: LD_INT 22
35012: PUSH
35013: LD_VAR 0 1
35017: PPUSH
35018: CALL_OW 255
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: LD_INT 2
35029: PUSH
35030: LD_INT 30
35032: PUSH
35033: LD_INT 36
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 34
35042: PUSH
35043: LD_INT 31
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: LIST
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PPUSH
35059: CALL_OW 69
35063: ST_TO_ADDR
// if not tmp then
35064: LD_VAR 0 6
35068: NOT
35069: IFFALSE 35073
// exit ;
35071: GO 35321
// result := [ ] ;
35073: LD_ADDR_VAR 0 2
35077: PUSH
35078: EMPTY
35079: ST_TO_ADDR
// for i in tmp do
35080: LD_ADDR_VAR 0 3
35084: PUSH
35085: LD_VAR 0 6
35089: PUSH
35090: FOR_IN
35091: IFFALSE 35162
// begin t := UnitsInside ( i ) ;
35093: LD_ADDR_VAR 0 4
35097: PUSH
35098: LD_VAR 0 3
35102: PPUSH
35103: CALL_OW 313
35107: ST_TO_ADDR
// if t then
35108: LD_VAR 0 4
35112: IFFALSE 35160
// for j in t do
35114: LD_ADDR_VAR 0 7
35118: PUSH
35119: LD_VAR 0 4
35123: PUSH
35124: FOR_IN
35125: IFFALSE 35158
// result := Replace ( result , result + 1 , j ) ;
35127: LD_ADDR_VAR 0 2
35131: PUSH
35132: LD_VAR 0 2
35136: PPUSH
35137: LD_VAR 0 2
35141: PUSH
35142: LD_INT 1
35144: PLUS
35145: PPUSH
35146: LD_VAR 0 7
35150: PPUSH
35151: CALL_OW 1
35155: ST_TO_ADDR
35156: GO 35124
35158: POP
35159: POP
// end ;
35160: GO 35090
35162: POP
35163: POP
// if not result then
35164: LD_VAR 0 2
35168: NOT
35169: IFFALSE 35173
// exit ;
35171: GO 35321
// mech := result [ 1 ] ;
35173: LD_ADDR_VAR 0 5
35177: PUSH
35178: LD_VAR 0 2
35182: PUSH
35183: LD_INT 1
35185: ARRAY
35186: ST_TO_ADDR
// if result > 1 then
35187: LD_VAR 0 2
35191: PUSH
35192: LD_INT 1
35194: GREATER
35195: IFFALSE 35307
// begin for i = 2 to result do
35197: LD_ADDR_VAR 0 3
35201: PUSH
35202: DOUBLE
35203: LD_INT 2
35205: DEC
35206: ST_TO_ADDR
35207: LD_VAR 0 2
35211: PUSH
35212: FOR_TO
35213: IFFALSE 35305
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35215: LD_ADDR_VAR 0 4
35219: PUSH
35220: LD_VAR 0 2
35224: PUSH
35225: LD_VAR 0 3
35229: ARRAY
35230: PPUSH
35231: LD_INT 3
35233: PPUSH
35234: CALL_OW 259
35238: PUSH
35239: LD_VAR 0 2
35243: PUSH
35244: LD_VAR 0 3
35248: ARRAY
35249: PPUSH
35250: CALL_OW 432
35254: MINUS
35255: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35256: LD_VAR 0 4
35260: PUSH
35261: LD_VAR 0 5
35265: PPUSH
35266: LD_INT 3
35268: PPUSH
35269: CALL_OW 259
35273: PUSH
35274: LD_VAR 0 5
35278: PPUSH
35279: CALL_OW 432
35283: MINUS
35284: GREATEREQUAL
35285: IFFALSE 35303
// mech := result [ i ] ;
35287: LD_ADDR_VAR 0 5
35291: PUSH
35292: LD_VAR 0 2
35296: PUSH
35297: LD_VAR 0 3
35301: ARRAY
35302: ST_TO_ADDR
// end ;
35303: GO 35212
35305: POP
35306: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35307: LD_VAR 0 1
35311: PPUSH
35312: LD_VAR 0 5
35316: PPUSH
35317: CALL_OW 135
// end ;
35321: LD_VAR 0 2
35325: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35326: LD_INT 0
35328: PPUSH
35329: PPUSH
35330: PPUSH
35331: PPUSH
35332: PPUSH
35333: PPUSH
35334: PPUSH
35335: PPUSH
35336: PPUSH
35337: PPUSH
35338: PPUSH
35339: PPUSH
35340: PPUSH
// result := [ ] ;
35341: LD_ADDR_VAR 0 7
35345: PUSH
35346: EMPTY
35347: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35348: LD_VAR 0 1
35352: PPUSH
35353: CALL_OW 266
35357: PUSH
35358: LD_INT 0
35360: PUSH
35361: LD_INT 1
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: IN
35368: NOT
35369: IFFALSE 35373
// exit ;
35371: GO 37007
// if name then
35373: LD_VAR 0 3
35377: IFFALSE 35393
// SetBName ( base_dep , name ) ;
35379: LD_VAR 0 1
35383: PPUSH
35384: LD_VAR 0 3
35388: PPUSH
35389: CALL_OW 500
// base := GetBase ( base_dep ) ;
35393: LD_ADDR_VAR 0 15
35397: PUSH
35398: LD_VAR 0 1
35402: PPUSH
35403: CALL_OW 274
35407: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35408: LD_ADDR_VAR 0 16
35412: PUSH
35413: LD_VAR 0 1
35417: PPUSH
35418: CALL_OW 255
35422: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35423: LD_ADDR_VAR 0 17
35427: PUSH
35428: LD_VAR 0 1
35432: PPUSH
35433: CALL_OW 248
35437: ST_TO_ADDR
// if sources then
35438: LD_VAR 0 5
35442: IFFALSE 35489
// for i = 1 to 3 do
35444: LD_ADDR_VAR 0 8
35448: PUSH
35449: DOUBLE
35450: LD_INT 1
35452: DEC
35453: ST_TO_ADDR
35454: LD_INT 3
35456: PUSH
35457: FOR_TO
35458: IFFALSE 35487
// AddResourceType ( base , i , sources [ i ] ) ;
35460: LD_VAR 0 15
35464: PPUSH
35465: LD_VAR 0 8
35469: PPUSH
35470: LD_VAR 0 5
35474: PUSH
35475: LD_VAR 0 8
35479: ARRAY
35480: PPUSH
35481: CALL_OW 276
35485: GO 35457
35487: POP
35488: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35489: LD_ADDR_VAR 0 18
35493: PUSH
35494: LD_VAR 0 15
35498: PPUSH
35499: LD_VAR 0 2
35503: PPUSH
35504: LD_INT 1
35506: PPUSH
35507: CALL 34750 0 3
35511: ST_TO_ADDR
// InitHc ;
35512: CALL_OW 19
// InitUc ;
35516: CALL_OW 18
// uc_side := side ;
35520: LD_ADDR_OWVAR 20
35524: PUSH
35525: LD_VAR 0 16
35529: ST_TO_ADDR
// uc_nation := nation ;
35530: LD_ADDR_OWVAR 21
35534: PUSH
35535: LD_VAR 0 17
35539: ST_TO_ADDR
// if buildings then
35540: LD_VAR 0 18
35544: IFFALSE 36866
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35546: LD_ADDR_VAR 0 19
35550: PUSH
35551: LD_VAR 0 18
35555: PPUSH
35556: LD_INT 2
35558: PUSH
35559: LD_INT 30
35561: PUSH
35562: LD_INT 29
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 30
35571: PUSH
35572: LD_INT 30
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: LIST
35583: PPUSH
35584: CALL_OW 72
35588: ST_TO_ADDR
// if tmp then
35589: LD_VAR 0 19
35593: IFFALSE 35641
// for i in tmp do
35595: LD_ADDR_VAR 0 8
35599: PUSH
35600: LD_VAR 0 19
35604: PUSH
35605: FOR_IN
35606: IFFALSE 35639
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35608: LD_VAR 0 8
35612: PPUSH
35613: CALL_OW 250
35617: PPUSH
35618: LD_VAR 0 8
35622: PPUSH
35623: CALL_OW 251
35627: PPUSH
35628: LD_VAR 0 16
35632: PPUSH
35633: CALL_OW 441
35637: GO 35605
35639: POP
35640: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35641: LD_VAR 0 18
35645: PPUSH
35646: LD_INT 2
35648: PUSH
35649: LD_INT 30
35651: PUSH
35652: LD_INT 32
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 30
35661: PUSH
35662: LD_INT 33
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: LIST
35673: PPUSH
35674: CALL_OW 72
35678: IFFALSE 35766
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35680: LD_ADDR_VAR 0 8
35684: PUSH
35685: LD_VAR 0 18
35689: PPUSH
35690: LD_INT 2
35692: PUSH
35693: LD_INT 30
35695: PUSH
35696: LD_INT 32
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 30
35705: PUSH
35706: LD_INT 33
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: LIST
35717: PPUSH
35718: CALL_OW 72
35722: PUSH
35723: FOR_IN
35724: IFFALSE 35764
// begin if not GetBWeapon ( i ) then
35726: LD_VAR 0 8
35730: PPUSH
35731: CALL_OW 269
35735: NOT
35736: IFFALSE 35762
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35738: LD_VAR 0 8
35742: PPUSH
35743: LD_VAR 0 8
35747: PPUSH
35748: LD_VAR 0 2
35752: PPUSH
35753: CALL 37012 0 2
35757: PPUSH
35758: CALL_OW 431
// end ;
35762: GO 35723
35764: POP
35765: POP
// end ; for i = 1 to personel do
35766: LD_ADDR_VAR 0 8
35770: PUSH
35771: DOUBLE
35772: LD_INT 1
35774: DEC
35775: ST_TO_ADDR
35776: LD_VAR 0 6
35780: PUSH
35781: FOR_TO
35782: IFFALSE 36846
// begin if i > 4 then
35784: LD_VAR 0 8
35788: PUSH
35789: LD_INT 4
35791: GREATER
35792: IFFALSE 35796
// break ;
35794: GO 36846
// case i of 1 :
35796: LD_VAR 0 8
35800: PUSH
35801: LD_INT 1
35803: DOUBLE
35804: EQUAL
35805: IFTRUE 35809
35807: GO 35889
35809: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35810: LD_ADDR_VAR 0 12
35814: PUSH
35815: LD_VAR 0 18
35819: PPUSH
35820: LD_INT 22
35822: PUSH
35823: LD_VAR 0 16
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 58
35834: PUSH
35835: EMPTY
35836: LIST
35837: PUSH
35838: LD_INT 2
35840: PUSH
35841: LD_INT 30
35843: PUSH
35844: LD_INT 32
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 30
35853: PUSH
35854: LD_INT 4
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 30
35863: PUSH
35864: LD_INT 5
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: PUSH
35877: EMPTY
35878: LIST
35879: LIST
35880: LIST
35881: PPUSH
35882: CALL_OW 72
35886: ST_TO_ADDR
35887: GO 36111
35889: LD_INT 2
35891: DOUBLE
35892: EQUAL
35893: IFTRUE 35897
35895: GO 35959
35897: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35898: LD_ADDR_VAR 0 12
35902: PUSH
35903: LD_VAR 0 18
35907: PPUSH
35908: LD_INT 22
35910: PUSH
35911: LD_VAR 0 16
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 2
35922: PUSH
35923: LD_INT 30
35925: PUSH
35926: LD_INT 0
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 30
35935: PUSH
35936: LD_INT 1
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: LIST
35947: PUSH
35948: EMPTY
35949: LIST
35950: LIST
35951: PPUSH
35952: CALL_OW 72
35956: ST_TO_ADDR
35957: GO 36111
35959: LD_INT 3
35961: DOUBLE
35962: EQUAL
35963: IFTRUE 35967
35965: GO 36029
35967: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35968: LD_ADDR_VAR 0 12
35972: PUSH
35973: LD_VAR 0 18
35977: PPUSH
35978: LD_INT 22
35980: PUSH
35981: LD_VAR 0 16
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 2
35992: PUSH
35993: LD_INT 30
35995: PUSH
35996: LD_INT 2
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 30
36005: PUSH
36006: LD_INT 3
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: LIST
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PPUSH
36022: CALL_OW 72
36026: ST_TO_ADDR
36027: GO 36111
36029: LD_INT 4
36031: DOUBLE
36032: EQUAL
36033: IFTRUE 36037
36035: GO 36110
36037: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36038: LD_ADDR_VAR 0 12
36042: PUSH
36043: LD_VAR 0 18
36047: PPUSH
36048: LD_INT 22
36050: PUSH
36051: LD_VAR 0 16
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 2
36062: PUSH
36063: LD_INT 30
36065: PUSH
36066: LD_INT 6
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 30
36075: PUSH
36076: LD_INT 7
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 30
36085: PUSH
36086: LD_INT 8
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PPUSH
36103: CALL_OW 72
36107: ST_TO_ADDR
36108: GO 36111
36110: POP
// if i = 1 then
36111: LD_VAR 0 8
36115: PUSH
36116: LD_INT 1
36118: EQUAL
36119: IFFALSE 36230
// begin tmp := [ ] ;
36121: LD_ADDR_VAR 0 19
36125: PUSH
36126: EMPTY
36127: ST_TO_ADDR
// for j in f do
36128: LD_ADDR_VAR 0 9
36132: PUSH
36133: LD_VAR 0 12
36137: PUSH
36138: FOR_IN
36139: IFFALSE 36212
// if GetBType ( j ) = b_bunker then
36141: LD_VAR 0 9
36145: PPUSH
36146: CALL_OW 266
36150: PUSH
36151: LD_INT 32
36153: EQUAL
36154: IFFALSE 36181
// tmp := Insert ( tmp , 1 , j ) else
36156: LD_ADDR_VAR 0 19
36160: PUSH
36161: LD_VAR 0 19
36165: PPUSH
36166: LD_INT 1
36168: PPUSH
36169: LD_VAR 0 9
36173: PPUSH
36174: CALL_OW 2
36178: ST_TO_ADDR
36179: GO 36210
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36181: LD_ADDR_VAR 0 19
36185: PUSH
36186: LD_VAR 0 19
36190: PPUSH
36191: LD_VAR 0 19
36195: PUSH
36196: LD_INT 1
36198: PLUS
36199: PPUSH
36200: LD_VAR 0 9
36204: PPUSH
36205: CALL_OW 2
36209: ST_TO_ADDR
36210: GO 36138
36212: POP
36213: POP
// if tmp then
36214: LD_VAR 0 19
36218: IFFALSE 36230
// f := tmp ;
36220: LD_ADDR_VAR 0 12
36224: PUSH
36225: LD_VAR 0 19
36229: ST_TO_ADDR
// end ; x := personel [ i ] ;
36230: LD_ADDR_VAR 0 13
36234: PUSH
36235: LD_VAR 0 6
36239: PUSH
36240: LD_VAR 0 8
36244: ARRAY
36245: ST_TO_ADDR
// if x = - 1 then
36246: LD_VAR 0 13
36250: PUSH
36251: LD_INT 1
36253: NEG
36254: EQUAL
36255: IFFALSE 36464
// begin for j in f do
36257: LD_ADDR_VAR 0 9
36261: PUSH
36262: LD_VAR 0 12
36266: PUSH
36267: FOR_IN
36268: IFFALSE 36460
// repeat InitHc ;
36270: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36274: LD_VAR 0 9
36278: PPUSH
36279: CALL_OW 266
36283: PUSH
36284: LD_INT 5
36286: EQUAL
36287: IFFALSE 36357
// begin if UnitsInside ( j ) < 3 then
36289: LD_VAR 0 9
36293: PPUSH
36294: CALL_OW 313
36298: PUSH
36299: LD_INT 3
36301: LESS
36302: IFFALSE 36338
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36304: LD_INT 0
36306: PPUSH
36307: LD_INT 5
36309: PUSH
36310: LD_INT 8
36312: PUSH
36313: LD_INT 9
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: LIST
36320: PUSH
36321: LD_VAR 0 17
36325: ARRAY
36326: PPUSH
36327: LD_VAR 0 4
36331: PPUSH
36332: CALL_OW 380
36336: GO 36355
// PrepareHuman ( false , i , skill ) ;
36338: LD_INT 0
36340: PPUSH
36341: LD_VAR 0 8
36345: PPUSH
36346: LD_VAR 0 4
36350: PPUSH
36351: CALL_OW 380
// end else
36355: GO 36374
// PrepareHuman ( false , i , skill ) ;
36357: LD_INT 0
36359: PPUSH
36360: LD_VAR 0 8
36364: PPUSH
36365: LD_VAR 0 4
36369: PPUSH
36370: CALL_OW 380
// un := CreateHuman ;
36374: LD_ADDR_VAR 0 14
36378: PUSH
36379: CALL_OW 44
36383: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36384: LD_ADDR_VAR 0 7
36388: PUSH
36389: LD_VAR 0 7
36393: PPUSH
36394: LD_INT 1
36396: PPUSH
36397: LD_VAR 0 14
36401: PPUSH
36402: CALL_OW 2
36406: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36407: LD_VAR 0 14
36411: PPUSH
36412: LD_VAR 0 9
36416: PPUSH
36417: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36421: LD_VAR 0 9
36425: PPUSH
36426: CALL_OW 313
36430: PUSH
36431: LD_INT 6
36433: EQUAL
36434: PUSH
36435: LD_VAR 0 9
36439: PPUSH
36440: CALL_OW 266
36444: PUSH
36445: LD_INT 32
36447: PUSH
36448: LD_INT 31
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: IN
36455: OR
36456: IFFALSE 36270
36458: GO 36267
36460: POP
36461: POP
// end else
36462: GO 36844
// for j = 1 to x do
36464: LD_ADDR_VAR 0 9
36468: PUSH
36469: DOUBLE
36470: LD_INT 1
36472: DEC
36473: ST_TO_ADDR
36474: LD_VAR 0 13
36478: PUSH
36479: FOR_TO
36480: IFFALSE 36842
// begin InitHc ;
36482: CALL_OW 19
// if not f then
36486: LD_VAR 0 12
36490: NOT
36491: IFFALSE 36580
// begin PrepareHuman ( false , i , skill ) ;
36493: LD_INT 0
36495: PPUSH
36496: LD_VAR 0 8
36500: PPUSH
36501: LD_VAR 0 4
36505: PPUSH
36506: CALL_OW 380
// un := CreateHuman ;
36510: LD_ADDR_VAR 0 14
36514: PUSH
36515: CALL_OW 44
36519: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36520: LD_ADDR_VAR 0 7
36524: PUSH
36525: LD_VAR 0 7
36529: PPUSH
36530: LD_INT 1
36532: PPUSH
36533: LD_VAR 0 14
36537: PPUSH
36538: CALL_OW 2
36542: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36543: LD_VAR 0 14
36547: PPUSH
36548: LD_VAR 0 1
36552: PPUSH
36553: CALL_OW 250
36557: PPUSH
36558: LD_VAR 0 1
36562: PPUSH
36563: CALL_OW 251
36567: PPUSH
36568: LD_INT 10
36570: PPUSH
36571: LD_INT 0
36573: PPUSH
36574: CALL_OW 50
// continue ;
36578: GO 36479
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36580: LD_VAR 0 12
36584: PUSH
36585: LD_INT 1
36587: ARRAY
36588: PPUSH
36589: CALL_OW 313
36593: PUSH
36594: LD_VAR 0 12
36598: PUSH
36599: LD_INT 1
36601: ARRAY
36602: PPUSH
36603: CALL_OW 266
36607: PUSH
36608: LD_INT 32
36610: PUSH
36611: LD_INT 31
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: IN
36618: AND
36619: PUSH
36620: LD_VAR 0 12
36624: PUSH
36625: LD_INT 1
36627: ARRAY
36628: PPUSH
36629: CALL_OW 313
36633: PUSH
36634: LD_INT 6
36636: EQUAL
36637: OR
36638: IFFALSE 36658
// f := Delete ( f , 1 ) ;
36640: LD_ADDR_VAR 0 12
36644: PUSH
36645: LD_VAR 0 12
36649: PPUSH
36650: LD_INT 1
36652: PPUSH
36653: CALL_OW 3
36657: ST_TO_ADDR
// if not f then
36658: LD_VAR 0 12
36662: NOT
36663: IFFALSE 36681
// begin x := x + 2 ;
36665: LD_ADDR_VAR 0 13
36669: PUSH
36670: LD_VAR 0 13
36674: PUSH
36675: LD_INT 2
36677: PLUS
36678: ST_TO_ADDR
// continue ;
36679: GO 36479
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36681: LD_VAR 0 12
36685: PUSH
36686: LD_INT 1
36688: ARRAY
36689: PPUSH
36690: CALL_OW 266
36694: PUSH
36695: LD_INT 5
36697: EQUAL
36698: IFFALSE 36772
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36700: LD_VAR 0 12
36704: PUSH
36705: LD_INT 1
36707: ARRAY
36708: PPUSH
36709: CALL_OW 313
36713: PUSH
36714: LD_INT 3
36716: LESS
36717: IFFALSE 36753
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36719: LD_INT 0
36721: PPUSH
36722: LD_INT 5
36724: PUSH
36725: LD_INT 8
36727: PUSH
36728: LD_INT 9
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: LIST
36735: PUSH
36736: LD_VAR 0 17
36740: ARRAY
36741: PPUSH
36742: LD_VAR 0 4
36746: PPUSH
36747: CALL_OW 380
36751: GO 36770
// PrepareHuman ( false , i , skill ) ;
36753: LD_INT 0
36755: PPUSH
36756: LD_VAR 0 8
36760: PPUSH
36761: LD_VAR 0 4
36765: PPUSH
36766: CALL_OW 380
// end else
36770: GO 36789
// PrepareHuman ( false , i , skill ) ;
36772: LD_INT 0
36774: PPUSH
36775: LD_VAR 0 8
36779: PPUSH
36780: LD_VAR 0 4
36784: PPUSH
36785: CALL_OW 380
// un := CreateHuman ;
36789: LD_ADDR_VAR 0 14
36793: PUSH
36794: CALL_OW 44
36798: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36799: LD_ADDR_VAR 0 7
36803: PUSH
36804: LD_VAR 0 7
36808: PPUSH
36809: LD_INT 1
36811: PPUSH
36812: LD_VAR 0 14
36816: PPUSH
36817: CALL_OW 2
36821: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36822: LD_VAR 0 14
36826: PPUSH
36827: LD_VAR 0 12
36831: PUSH
36832: LD_INT 1
36834: ARRAY
36835: PPUSH
36836: CALL_OW 52
// end ;
36840: GO 36479
36842: POP
36843: POP
// end ;
36844: GO 35781
36846: POP
36847: POP
// result := result ^ buildings ;
36848: LD_ADDR_VAR 0 7
36852: PUSH
36853: LD_VAR 0 7
36857: PUSH
36858: LD_VAR 0 18
36862: ADD
36863: ST_TO_ADDR
// end else
36864: GO 37007
// begin for i = 1 to personel do
36866: LD_ADDR_VAR 0 8
36870: PUSH
36871: DOUBLE
36872: LD_INT 1
36874: DEC
36875: ST_TO_ADDR
36876: LD_VAR 0 6
36880: PUSH
36881: FOR_TO
36882: IFFALSE 37005
// begin if i > 4 then
36884: LD_VAR 0 8
36888: PUSH
36889: LD_INT 4
36891: GREATER
36892: IFFALSE 36896
// break ;
36894: GO 37005
// x := personel [ i ] ;
36896: LD_ADDR_VAR 0 13
36900: PUSH
36901: LD_VAR 0 6
36905: PUSH
36906: LD_VAR 0 8
36910: ARRAY
36911: ST_TO_ADDR
// if x = - 1 then
36912: LD_VAR 0 13
36916: PUSH
36917: LD_INT 1
36919: NEG
36920: EQUAL
36921: IFFALSE 36925
// continue ;
36923: GO 36881
// PrepareHuman ( false , i , skill ) ;
36925: LD_INT 0
36927: PPUSH
36928: LD_VAR 0 8
36932: PPUSH
36933: LD_VAR 0 4
36937: PPUSH
36938: CALL_OW 380
// un := CreateHuman ;
36942: LD_ADDR_VAR 0 14
36946: PUSH
36947: CALL_OW 44
36951: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36952: LD_VAR 0 14
36956: PPUSH
36957: LD_VAR 0 1
36961: PPUSH
36962: CALL_OW 250
36966: PPUSH
36967: LD_VAR 0 1
36971: PPUSH
36972: CALL_OW 251
36976: PPUSH
36977: LD_INT 10
36979: PPUSH
36980: LD_INT 0
36982: PPUSH
36983: CALL_OW 50
// result := result ^ un ;
36987: LD_ADDR_VAR 0 7
36991: PUSH
36992: LD_VAR 0 7
36996: PUSH
36997: LD_VAR 0 14
37001: ADD
37002: ST_TO_ADDR
// end ;
37003: GO 36881
37005: POP
37006: POP
// end ; end ;
37007: LD_VAR 0 7
37011: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37012: LD_INT 0
37014: PPUSH
37015: PPUSH
37016: PPUSH
37017: PPUSH
37018: PPUSH
37019: PPUSH
37020: PPUSH
37021: PPUSH
37022: PPUSH
37023: PPUSH
37024: PPUSH
37025: PPUSH
37026: PPUSH
37027: PPUSH
37028: PPUSH
37029: PPUSH
// result := false ;
37030: LD_ADDR_VAR 0 3
37034: PUSH
37035: LD_INT 0
37037: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37038: LD_VAR 0 1
37042: NOT
37043: PUSH
37044: LD_VAR 0 1
37048: PPUSH
37049: CALL_OW 266
37053: PUSH
37054: LD_INT 32
37056: PUSH
37057: LD_INT 33
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: IN
37064: NOT
37065: OR
37066: IFFALSE 37070
// exit ;
37068: GO 38179
// nat := GetNation ( tower ) ;
37070: LD_ADDR_VAR 0 12
37074: PUSH
37075: LD_VAR 0 1
37079: PPUSH
37080: CALL_OW 248
37084: ST_TO_ADDR
// side := GetSide ( tower ) ;
37085: LD_ADDR_VAR 0 16
37089: PUSH
37090: LD_VAR 0 1
37094: PPUSH
37095: CALL_OW 255
37099: ST_TO_ADDR
// x := GetX ( tower ) ;
37100: LD_ADDR_VAR 0 10
37104: PUSH
37105: LD_VAR 0 1
37109: PPUSH
37110: CALL_OW 250
37114: ST_TO_ADDR
// y := GetY ( tower ) ;
37115: LD_ADDR_VAR 0 11
37119: PUSH
37120: LD_VAR 0 1
37124: PPUSH
37125: CALL_OW 251
37129: ST_TO_ADDR
// if not x or not y then
37130: LD_VAR 0 10
37134: NOT
37135: PUSH
37136: LD_VAR 0 11
37140: NOT
37141: OR
37142: IFFALSE 37146
// exit ;
37144: GO 38179
// weapon := 0 ;
37146: LD_ADDR_VAR 0 18
37150: PUSH
37151: LD_INT 0
37153: ST_TO_ADDR
// fac_list := [ ] ;
37154: LD_ADDR_VAR 0 17
37158: PUSH
37159: EMPTY
37160: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37161: LD_ADDR_VAR 0 6
37165: PUSH
37166: LD_VAR 0 1
37170: PPUSH
37171: CALL_OW 274
37175: PPUSH
37176: LD_VAR 0 2
37180: PPUSH
37181: LD_INT 0
37183: PPUSH
37184: CALL 34750 0 3
37188: PPUSH
37189: LD_INT 30
37191: PUSH
37192: LD_INT 3
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PPUSH
37199: CALL_OW 72
37203: ST_TO_ADDR
// if not factories then
37204: LD_VAR 0 6
37208: NOT
37209: IFFALSE 37213
// exit ;
37211: GO 38179
// for i in factories do
37213: LD_ADDR_VAR 0 8
37217: PUSH
37218: LD_VAR 0 6
37222: PUSH
37223: FOR_IN
37224: IFFALSE 37249
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37226: LD_ADDR_VAR 0 17
37230: PUSH
37231: LD_VAR 0 17
37235: PUSH
37236: LD_VAR 0 8
37240: PPUSH
37241: CALL_OW 478
37245: UNION
37246: ST_TO_ADDR
37247: GO 37223
37249: POP
37250: POP
// if not fac_list then
37251: LD_VAR 0 17
37255: NOT
37256: IFFALSE 37260
// exit ;
37258: GO 38179
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37260: LD_ADDR_VAR 0 5
37264: PUSH
37265: LD_INT 4
37267: PUSH
37268: LD_INT 5
37270: PUSH
37271: LD_INT 9
37273: PUSH
37274: LD_INT 10
37276: PUSH
37277: LD_INT 6
37279: PUSH
37280: LD_INT 7
37282: PUSH
37283: LD_INT 11
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 27
37297: PUSH
37298: LD_INT 28
37300: PUSH
37301: LD_INT 26
37303: PUSH
37304: LD_INT 30
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: PUSH
37313: LD_INT 43
37315: PUSH
37316: LD_INT 44
37318: PUSH
37319: LD_INT 46
37321: PUSH
37322: LD_INT 45
37324: PUSH
37325: LD_INT 47
37327: PUSH
37328: LD_INT 49
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: LIST
37343: PUSH
37344: LD_VAR 0 12
37348: ARRAY
37349: ST_TO_ADDR
// list := list isect fac_list ;
37350: LD_ADDR_VAR 0 5
37354: PUSH
37355: LD_VAR 0 5
37359: PUSH
37360: LD_VAR 0 17
37364: ISECT
37365: ST_TO_ADDR
// if not list then
37366: LD_VAR 0 5
37370: NOT
37371: IFFALSE 37375
// exit ;
37373: GO 38179
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37375: LD_VAR 0 12
37379: PUSH
37380: LD_INT 3
37382: EQUAL
37383: PUSH
37384: LD_INT 49
37386: PUSH
37387: LD_VAR 0 5
37391: IN
37392: AND
37393: PUSH
37394: LD_INT 31
37396: PPUSH
37397: LD_VAR 0 16
37401: PPUSH
37402: CALL_OW 321
37406: PUSH
37407: LD_INT 2
37409: EQUAL
37410: AND
37411: IFFALSE 37471
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37413: LD_INT 22
37415: PUSH
37416: LD_VAR 0 16
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 35
37427: PUSH
37428: LD_INT 49
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 91
37437: PUSH
37438: LD_VAR 0 1
37442: PUSH
37443: LD_INT 10
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: LIST
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: LIST
37455: PPUSH
37456: CALL_OW 69
37460: NOT
37461: IFFALSE 37471
// weapon := ru_time_lapser ;
37463: LD_ADDR_VAR 0 18
37467: PUSH
37468: LD_INT 49
37470: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37471: LD_VAR 0 12
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: LD_INT 2
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: IN
37486: PUSH
37487: LD_INT 11
37489: PUSH
37490: LD_VAR 0 5
37494: IN
37495: PUSH
37496: LD_INT 30
37498: PUSH
37499: LD_VAR 0 5
37503: IN
37504: OR
37505: AND
37506: PUSH
37507: LD_INT 6
37509: PPUSH
37510: LD_VAR 0 16
37514: PPUSH
37515: CALL_OW 321
37519: PUSH
37520: LD_INT 2
37522: EQUAL
37523: AND
37524: IFFALSE 37689
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37526: LD_INT 22
37528: PUSH
37529: LD_VAR 0 16
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 2
37540: PUSH
37541: LD_INT 35
37543: PUSH
37544: LD_INT 11
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 35
37553: PUSH
37554: LD_INT 30
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 91
37568: PUSH
37569: LD_VAR 0 1
37573: PUSH
37574: LD_INT 18
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: LIST
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: LIST
37586: PPUSH
37587: CALL_OW 69
37591: NOT
37592: PUSH
37593: LD_INT 22
37595: PUSH
37596: LD_VAR 0 16
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: LD_INT 2
37607: PUSH
37608: LD_INT 30
37610: PUSH
37611: LD_INT 32
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 30
37620: PUSH
37621: LD_INT 33
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: EMPTY
37629: LIST
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 91
37635: PUSH
37636: LD_VAR 0 1
37640: PUSH
37641: LD_INT 12
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: LIST
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: LIST
37653: PUSH
37654: EMPTY
37655: LIST
37656: PPUSH
37657: CALL_OW 69
37661: PUSH
37662: LD_INT 2
37664: GREATER
37665: AND
37666: IFFALSE 37689
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37668: LD_ADDR_VAR 0 18
37672: PUSH
37673: LD_INT 11
37675: PUSH
37676: LD_INT 30
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_VAR 0 12
37687: ARRAY
37688: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37689: LD_VAR 0 18
37693: NOT
37694: PUSH
37695: LD_INT 40
37697: PPUSH
37698: LD_VAR 0 16
37702: PPUSH
37703: CALL_OW 321
37707: PUSH
37708: LD_INT 2
37710: EQUAL
37711: AND
37712: PUSH
37713: LD_INT 7
37715: PUSH
37716: LD_VAR 0 5
37720: IN
37721: PUSH
37722: LD_INT 28
37724: PUSH
37725: LD_VAR 0 5
37729: IN
37730: OR
37731: PUSH
37732: LD_INT 45
37734: PUSH
37735: LD_VAR 0 5
37739: IN
37740: OR
37741: AND
37742: IFFALSE 37996
// begin hex := GetHexInfo ( x , y ) ;
37744: LD_ADDR_VAR 0 4
37748: PUSH
37749: LD_VAR 0 10
37753: PPUSH
37754: LD_VAR 0 11
37758: PPUSH
37759: CALL_OW 546
37763: ST_TO_ADDR
// if hex [ 1 ] then
37764: LD_VAR 0 4
37768: PUSH
37769: LD_INT 1
37771: ARRAY
37772: IFFALSE 37776
// exit ;
37774: GO 38179
// height := hex [ 2 ] ;
37776: LD_ADDR_VAR 0 15
37780: PUSH
37781: LD_VAR 0 4
37785: PUSH
37786: LD_INT 2
37788: ARRAY
37789: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37790: LD_ADDR_VAR 0 14
37794: PUSH
37795: LD_INT 0
37797: PUSH
37798: LD_INT 2
37800: PUSH
37801: LD_INT 3
37803: PUSH
37804: LD_INT 5
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: ST_TO_ADDR
// for i in tmp do
37813: LD_ADDR_VAR 0 8
37817: PUSH
37818: LD_VAR 0 14
37822: PUSH
37823: FOR_IN
37824: IFFALSE 37994
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37826: LD_ADDR_VAR 0 9
37830: PUSH
37831: LD_VAR 0 10
37835: PPUSH
37836: LD_VAR 0 8
37840: PPUSH
37841: LD_INT 5
37843: PPUSH
37844: CALL_OW 272
37848: PUSH
37849: LD_VAR 0 11
37853: PPUSH
37854: LD_VAR 0 8
37858: PPUSH
37859: LD_INT 5
37861: PPUSH
37862: CALL_OW 273
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37871: LD_VAR 0 9
37875: PUSH
37876: LD_INT 1
37878: ARRAY
37879: PPUSH
37880: LD_VAR 0 9
37884: PUSH
37885: LD_INT 2
37887: ARRAY
37888: PPUSH
37889: CALL_OW 488
37893: IFFALSE 37992
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37895: LD_ADDR_VAR 0 4
37899: PUSH
37900: LD_VAR 0 9
37904: PUSH
37905: LD_INT 1
37907: ARRAY
37908: PPUSH
37909: LD_VAR 0 9
37913: PUSH
37914: LD_INT 2
37916: ARRAY
37917: PPUSH
37918: CALL_OW 546
37922: ST_TO_ADDR
// if hex [ 1 ] then
37923: LD_VAR 0 4
37927: PUSH
37928: LD_INT 1
37930: ARRAY
37931: IFFALSE 37935
// continue ;
37933: GO 37823
// h := hex [ 2 ] ;
37935: LD_ADDR_VAR 0 13
37939: PUSH
37940: LD_VAR 0 4
37944: PUSH
37945: LD_INT 2
37947: ARRAY
37948: ST_TO_ADDR
// if h + 7 < height then
37949: LD_VAR 0 13
37953: PUSH
37954: LD_INT 7
37956: PLUS
37957: PUSH
37958: LD_VAR 0 15
37962: LESS
37963: IFFALSE 37992
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37965: LD_ADDR_VAR 0 18
37969: PUSH
37970: LD_INT 7
37972: PUSH
37973: LD_INT 28
37975: PUSH
37976: LD_INT 45
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: LIST
37983: PUSH
37984: LD_VAR 0 12
37988: ARRAY
37989: ST_TO_ADDR
// break ;
37990: GO 37994
// end ; end ; end ;
37992: GO 37823
37994: POP
37995: POP
// end ; if not weapon then
37996: LD_VAR 0 18
38000: NOT
38001: IFFALSE 38061
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38003: LD_ADDR_VAR 0 5
38007: PUSH
38008: LD_VAR 0 5
38012: PUSH
38013: LD_INT 11
38015: PUSH
38016: LD_INT 30
38018: PUSH
38019: LD_INT 49
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: LIST
38026: DIFF
38027: ST_TO_ADDR
// if not list then
38028: LD_VAR 0 5
38032: NOT
38033: IFFALSE 38037
// exit ;
38035: GO 38179
// weapon := list [ rand ( 1 , list ) ] ;
38037: LD_ADDR_VAR 0 18
38041: PUSH
38042: LD_VAR 0 5
38046: PUSH
38047: LD_INT 1
38049: PPUSH
38050: LD_VAR 0 5
38054: PPUSH
38055: CALL_OW 12
38059: ARRAY
38060: ST_TO_ADDR
// end ; if weapon then
38061: LD_VAR 0 18
38065: IFFALSE 38179
// begin tmp := CostOfWeapon ( weapon ) ;
38067: LD_ADDR_VAR 0 14
38071: PUSH
38072: LD_VAR 0 18
38076: PPUSH
38077: CALL_OW 451
38081: ST_TO_ADDR
// j := GetBase ( tower ) ;
38082: LD_ADDR_VAR 0 9
38086: PUSH
38087: LD_VAR 0 1
38091: PPUSH
38092: CALL_OW 274
38096: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38097: LD_VAR 0 9
38101: PPUSH
38102: LD_INT 1
38104: PPUSH
38105: CALL_OW 275
38109: PUSH
38110: LD_VAR 0 14
38114: PUSH
38115: LD_INT 1
38117: ARRAY
38118: GREATEREQUAL
38119: PUSH
38120: LD_VAR 0 9
38124: PPUSH
38125: LD_INT 2
38127: PPUSH
38128: CALL_OW 275
38132: PUSH
38133: LD_VAR 0 14
38137: PUSH
38138: LD_INT 2
38140: ARRAY
38141: GREATEREQUAL
38142: AND
38143: PUSH
38144: LD_VAR 0 9
38148: PPUSH
38149: LD_INT 3
38151: PPUSH
38152: CALL_OW 275
38156: PUSH
38157: LD_VAR 0 14
38161: PUSH
38162: LD_INT 3
38164: ARRAY
38165: GREATEREQUAL
38166: AND
38167: IFFALSE 38179
// result := weapon ;
38169: LD_ADDR_VAR 0 3
38173: PUSH
38174: LD_VAR 0 18
38178: ST_TO_ADDR
// end ; end ;
38179: LD_VAR 0 3
38183: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38184: LD_INT 0
38186: PPUSH
38187: PPUSH
// result := true ;
38188: LD_ADDR_VAR 0 3
38192: PUSH
38193: LD_INT 1
38195: ST_TO_ADDR
// if array1 = array2 then
38196: LD_VAR 0 1
38200: PUSH
38201: LD_VAR 0 2
38205: EQUAL
38206: IFFALSE 38266
// begin for i = 1 to array1 do
38208: LD_ADDR_VAR 0 4
38212: PUSH
38213: DOUBLE
38214: LD_INT 1
38216: DEC
38217: ST_TO_ADDR
38218: LD_VAR 0 1
38222: PUSH
38223: FOR_TO
38224: IFFALSE 38262
// if array1 [ i ] <> array2 [ i ] then
38226: LD_VAR 0 1
38230: PUSH
38231: LD_VAR 0 4
38235: ARRAY
38236: PUSH
38237: LD_VAR 0 2
38241: PUSH
38242: LD_VAR 0 4
38246: ARRAY
38247: NONEQUAL
38248: IFFALSE 38260
// begin result := false ;
38250: LD_ADDR_VAR 0 3
38254: PUSH
38255: LD_INT 0
38257: ST_TO_ADDR
// break ;
38258: GO 38262
// end ;
38260: GO 38223
38262: POP
38263: POP
// end else
38264: GO 38274
// result := false ;
38266: LD_ADDR_VAR 0 3
38270: PUSH
38271: LD_INT 0
38273: ST_TO_ADDR
// end ;
38274: LD_VAR 0 3
38278: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38279: LD_INT 0
38281: PPUSH
38282: PPUSH
// if not array1 or not array2 then
38283: LD_VAR 0 1
38287: NOT
38288: PUSH
38289: LD_VAR 0 2
38293: NOT
38294: OR
38295: IFFALSE 38299
// exit ;
38297: GO 38363
// result := true ;
38299: LD_ADDR_VAR 0 3
38303: PUSH
38304: LD_INT 1
38306: ST_TO_ADDR
// for i = 1 to array1 do
38307: LD_ADDR_VAR 0 4
38311: PUSH
38312: DOUBLE
38313: LD_INT 1
38315: DEC
38316: ST_TO_ADDR
38317: LD_VAR 0 1
38321: PUSH
38322: FOR_TO
38323: IFFALSE 38361
// if array1 [ i ] <> array2 [ i ] then
38325: LD_VAR 0 1
38329: PUSH
38330: LD_VAR 0 4
38334: ARRAY
38335: PUSH
38336: LD_VAR 0 2
38340: PUSH
38341: LD_VAR 0 4
38345: ARRAY
38346: NONEQUAL
38347: IFFALSE 38359
// begin result := false ;
38349: LD_ADDR_VAR 0 3
38353: PUSH
38354: LD_INT 0
38356: ST_TO_ADDR
// break ;
38357: GO 38361
// end ;
38359: GO 38322
38361: POP
38362: POP
// end ;
38363: LD_VAR 0 3
38367: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38368: LD_INT 0
38370: PPUSH
38371: PPUSH
38372: PPUSH
// pom := GetBase ( fac ) ;
38373: LD_ADDR_VAR 0 5
38377: PUSH
38378: LD_VAR 0 1
38382: PPUSH
38383: CALL_OW 274
38387: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38388: LD_ADDR_VAR 0 4
38392: PUSH
38393: LD_VAR 0 2
38397: PUSH
38398: LD_INT 1
38400: ARRAY
38401: PPUSH
38402: LD_VAR 0 2
38406: PUSH
38407: LD_INT 2
38409: ARRAY
38410: PPUSH
38411: LD_VAR 0 2
38415: PUSH
38416: LD_INT 3
38418: ARRAY
38419: PPUSH
38420: LD_VAR 0 2
38424: PUSH
38425: LD_INT 4
38427: ARRAY
38428: PPUSH
38429: CALL_OW 449
38433: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38434: LD_ADDR_VAR 0 3
38438: PUSH
38439: LD_VAR 0 5
38443: PPUSH
38444: LD_INT 1
38446: PPUSH
38447: CALL_OW 275
38451: PUSH
38452: LD_VAR 0 4
38456: PUSH
38457: LD_INT 1
38459: ARRAY
38460: GREATEREQUAL
38461: PUSH
38462: LD_VAR 0 5
38466: PPUSH
38467: LD_INT 2
38469: PPUSH
38470: CALL_OW 275
38474: PUSH
38475: LD_VAR 0 4
38479: PUSH
38480: LD_INT 2
38482: ARRAY
38483: GREATEREQUAL
38484: AND
38485: PUSH
38486: LD_VAR 0 5
38490: PPUSH
38491: LD_INT 3
38493: PPUSH
38494: CALL_OW 275
38498: PUSH
38499: LD_VAR 0 4
38503: PUSH
38504: LD_INT 3
38506: ARRAY
38507: GREATEREQUAL
38508: AND
38509: ST_TO_ADDR
// end ;
38510: LD_VAR 0 3
38514: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38515: LD_INT 0
38517: PPUSH
38518: PPUSH
38519: PPUSH
38520: PPUSH
// pom := GetBase ( building ) ;
38521: LD_ADDR_VAR 0 3
38525: PUSH
38526: LD_VAR 0 1
38530: PPUSH
38531: CALL_OW 274
38535: ST_TO_ADDR
// if not pom then
38536: LD_VAR 0 3
38540: NOT
38541: IFFALSE 38545
// exit ;
38543: GO 38715
// btype := GetBType ( building ) ;
38545: LD_ADDR_VAR 0 5
38549: PUSH
38550: LD_VAR 0 1
38554: PPUSH
38555: CALL_OW 266
38559: ST_TO_ADDR
// if btype = b_armoury then
38560: LD_VAR 0 5
38564: PUSH
38565: LD_INT 4
38567: EQUAL
38568: IFFALSE 38578
// btype := b_barracks ;
38570: LD_ADDR_VAR 0 5
38574: PUSH
38575: LD_INT 5
38577: ST_TO_ADDR
// if btype = b_depot then
38578: LD_VAR 0 5
38582: PUSH
38583: LD_INT 0
38585: EQUAL
38586: IFFALSE 38596
// btype := b_warehouse ;
38588: LD_ADDR_VAR 0 5
38592: PUSH
38593: LD_INT 1
38595: ST_TO_ADDR
// if btype = b_workshop then
38596: LD_VAR 0 5
38600: PUSH
38601: LD_INT 2
38603: EQUAL
38604: IFFALSE 38614
// btype := b_factory ;
38606: LD_ADDR_VAR 0 5
38610: PUSH
38611: LD_INT 3
38613: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38614: LD_ADDR_VAR 0 4
38618: PUSH
38619: LD_VAR 0 5
38623: PPUSH
38624: LD_VAR 0 1
38628: PPUSH
38629: CALL_OW 248
38633: PPUSH
38634: CALL_OW 450
38638: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38639: LD_ADDR_VAR 0 2
38643: PUSH
38644: LD_VAR 0 3
38648: PPUSH
38649: LD_INT 1
38651: PPUSH
38652: CALL_OW 275
38656: PUSH
38657: LD_VAR 0 4
38661: PUSH
38662: LD_INT 1
38664: ARRAY
38665: GREATEREQUAL
38666: PUSH
38667: LD_VAR 0 3
38671: PPUSH
38672: LD_INT 2
38674: PPUSH
38675: CALL_OW 275
38679: PUSH
38680: LD_VAR 0 4
38684: PUSH
38685: LD_INT 2
38687: ARRAY
38688: GREATEREQUAL
38689: AND
38690: PUSH
38691: LD_VAR 0 3
38695: PPUSH
38696: LD_INT 3
38698: PPUSH
38699: CALL_OW 275
38703: PUSH
38704: LD_VAR 0 4
38708: PUSH
38709: LD_INT 3
38711: ARRAY
38712: GREATEREQUAL
38713: AND
38714: ST_TO_ADDR
// end ;
38715: LD_VAR 0 2
38719: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38720: LD_INT 0
38722: PPUSH
38723: PPUSH
38724: PPUSH
// pom := GetBase ( building ) ;
38725: LD_ADDR_VAR 0 4
38729: PUSH
38730: LD_VAR 0 1
38734: PPUSH
38735: CALL_OW 274
38739: ST_TO_ADDR
// if not pom then
38740: LD_VAR 0 4
38744: NOT
38745: IFFALSE 38749
// exit ;
38747: GO 38850
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38749: LD_ADDR_VAR 0 5
38753: PUSH
38754: LD_VAR 0 2
38758: PPUSH
38759: LD_VAR 0 1
38763: PPUSH
38764: CALL_OW 248
38768: PPUSH
38769: CALL_OW 450
38773: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38774: LD_ADDR_VAR 0 3
38778: PUSH
38779: LD_VAR 0 4
38783: PPUSH
38784: LD_INT 1
38786: PPUSH
38787: CALL_OW 275
38791: PUSH
38792: LD_VAR 0 5
38796: PUSH
38797: LD_INT 1
38799: ARRAY
38800: GREATEREQUAL
38801: PUSH
38802: LD_VAR 0 4
38806: PPUSH
38807: LD_INT 2
38809: PPUSH
38810: CALL_OW 275
38814: PUSH
38815: LD_VAR 0 5
38819: PUSH
38820: LD_INT 2
38822: ARRAY
38823: GREATEREQUAL
38824: AND
38825: PUSH
38826: LD_VAR 0 4
38830: PPUSH
38831: LD_INT 3
38833: PPUSH
38834: CALL_OW 275
38838: PUSH
38839: LD_VAR 0 5
38843: PUSH
38844: LD_INT 3
38846: ARRAY
38847: GREATEREQUAL
38848: AND
38849: ST_TO_ADDR
// end ;
38850: LD_VAR 0 3
38854: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38855: LD_INT 0
38857: PPUSH
38858: PPUSH
38859: PPUSH
38860: PPUSH
38861: PPUSH
38862: PPUSH
38863: PPUSH
38864: PPUSH
38865: PPUSH
38866: PPUSH
38867: PPUSH
// result := false ;
38868: LD_ADDR_VAR 0 8
38872: PUSH
38873: LD_INT 0
38875: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38876: LD_VAR 0 5
38880: NOT
38881: PUSH
38882: LD_VAR 0 1
38886: NOT
38887: OR
38888: PUSH
38889: LD_VAR 0 2
38893: NOT
38894: OR
38895: PUSH
38896: LD_VAR 0 3
38900: NOT
38901: OR
38902: IFFALSE 38906
// exit ;
38904: GO 39720
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38906: LD_ADDR_VAR 0 14
38910: PUSH
38911: LD_VAR 0 1
38915: PPUSH
38916: LD_VAR 0 2
38920: PPUSH
38921: LD_VAR 0 3
38925: PPUSH
38926: LD_VAR 0 4
38930: PPUSH
38931: LD_VAR 0 5
38935: PUSH
38936: LD_INT 1
38938: ARRAY
38939: PPUSH
38940: CALL_OW 248
38944: PPUSH
38945: LD_INT 0
38947: PPUSH
38948: CALL 40957 0 6
38952: ST_TO_ADDR
// if not hexes then
38953: LD_VAR 0 14
38957: NOT
38958: IFFALSE 38962
// exit ;
38960: GO 39720
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38962: LD_ADDR_VAR 0 17
38966: PUSH
38967: LD_VAR 0 5
38971: PPUSH
38972: LD_INT 22
38974: PUSH
38975: LD_VAR 0 13
38979: PPUSH
38980: CALL_OW 255
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 2
38991: PUSH
38992: LD_INT 30
38994: PUSH
38995: LD_INT 0
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 30
39004: PUSH
39005: LD_INT 1
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: LIST
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PPUSH
39021: CALL_OW 72
39025: ST_TO_ADDR
// for i = 1 to hexes do
39026: LD_ADDR_VAR 0 9
39030: PUSH
39031: DOUBLE
39032: LD_INT 1
39034: DEC
39035: ST_TO_ADDR
39036: LD_VAR 0 14
39040: PUSH
39041: FOR_TO
39042: IFFALSE 39718
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39044: LD_ADDR_VAR 0 13
39048: PUSH
39049: LD_VAR 0 14
39053: PUSH
39054: LD_VAR 0 9
39058: ARRAY
39059: PUSH
39060: LD_INT 1
39062: ARRAY
39063: PPUSH
39064: LD_VAR 0 14
39068: PUSH
39069: LD_VAR 0 9
39073: ARRAY
39074: PUSH
39075: LD_INT 2
39077: ARRAY
39078: PPUSH
39079: CALL_OW 428
39083: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39084: LD_VAR 0 14
39088: PUSH
39089: LD_VAR 0 9
39093: ARRAY
39094: PUSH
39095: LD_INT 1
39097: ARRAY
39098: PPUSH
39099: LD_VAR 0 14
39103: PUSH
39104: LD_VAR 0 9
39108: ARRAY
39109: PUSH
39110: LD_INT 2
39112: ARRAY
39113: PPUSH
39114: CALL_OW 351
39118: PUSH
39119: LD_VAR 0 14
39123: PUSH
39124: LD_VAR 0 9
39128: ARRAY
39129: PUSH
39130: LD_INT 1
39132: ARRAY
39133: PPUSH
39134: LD_VAR 0 14
39138: PUSH
39139: LD_VAR 0 9
39143: ARRAY
39144: PUSH
39145: LD_INT 2
39147: ARRAY
39148: PPUSH
39149: CALL_OW 488
39153: NOT
39154: OR
39155: PUSH
39156: LD_VAR 0 13
39160: PPUSH
39161: CALL_OW 247
39165: PUSH
39166: LD_INT 3
39168: EQUAL
39169: OR
39170: IFFALSE 39176
// exit ;
39172: POP
39173: POP
39174: GO 39720
// if not tmp then
39176: LD_VAR 0 13
39180: NOT
39181: IFFALSE 39185
// continue ;
39183: GO 39041
// result := true ;
39185: LD_ADDR_VAR 0 8
39189: PUSH
39190: LD_INT 1
39192: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39193: LD_VAR 0 6
39197: PUSH
39198: LD_VAR 0 13
39202: PPUSH
39203: CALL_OW 247
39207: PUSH
39208: LD_INT 2
39210: EQUAL
39211: AND
39212: PUSH
39213: LD_VAR 0 13
39217: PPUSH
39218: CALL_OW 263
39222: PUSH
39223: LD_INT 1
39225: EQUAL
39226: AND
39227: IFFALSE 39391
// begin if IsDrivenBy ( tmp ) then
39229: LD_VAR 0 13
39233: PPUSH
39234: CALL_OW 311
39238: IFFALSE 39242
// continue ;
39240: GO 39041
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39242: LD_VAR 0 6
39246: PPUSH
39247: LD_INT 3
39249: PUSH
39250: LD_INT 60
39252: PUSH
39253: EMPTY
39254: LIST
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 3
39262: PUSH
39263: LD_INT 55
39265: PUSH
39266: EMPTY
39267: LIST
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: PPUSH
39277: CALL_OW 72
39281: IFFALSE 39389
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39283: LD_ADDR_VAR 0 18
39287: PUSH
39288: LD_VAR 0 6
39292: PPUSH
39293: LD_INT 3
39295: PUSH
39296: LD_INT 60
39298: PUSH
39299: EMPTY
39300: LIST
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 3
39308: PUSH
39309: LD_INT 55
39311: PUSH
39312: EMPTY
39313: LIST
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PPUSH
39323: CALL_OW 72
39327: PUSH
39328: LD_INT 1
39330: ARRAY
39331: ST_TO_ADDR
// if IsInUnit ( driver ) then
39332: LD_VAR 0 18
39336: PPUSH
39337: CALL_OW 310
39341: IFFALSE 39352
// ComExit ( driver ) ;
39343: LD_VAR 0 18
39347: PPUSH
39348: CALL 64141 0 1
// AddComEnterUnit ( driver , tmp ) ;
39352: LD_VAR 0 18
39356: PPUSH
39357: LD_VAR 0 13
39361: PPUSH
39362: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39366: LD_VAR 0 18
39370: PPUSH
39371: LD_VAR 0 7
39375: PPUSH
39376: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39380: LD_VAR 0 18
39384: PPUSH
39385: CALL_OW 181
// end ; continue ;
39389: GO 39041
// end ; if not cleaners or not tmp in cleaners then
39391: LD_VAR 0 6
39395: NOT
39396: PUSH
39397: LD_VAR 0 13
39401: PUSH
39402: LD_VAR 0 6
39406: IN
39407: NOT
39408: OR
39409: IFFALSE 39716
// begin if dep then
39411: LD_VAR 0 17
39415: IFFALSE 39551
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39417: LD_ADDR_VAR 0 16
39421: PUSH
39422: LD_VAR 0 17
39426: PUSH
39427: LD_INT 1
39429: ARRAY
39430: PPUSH
39431: CALL_OW 250
39435: PPUSH
39436: LD_VAR 0 17
39440: PUSH
39441: LD_INT 1
39443: ARRAY
39444: PPUSH
39445: CALL_OW 254
39449: PPUSH
39450: LD_INT 5
39452: PPUSH
39453: CALL_OW 272
39457: PUSH
39458: LD_VAR 0 17
39462: PUSH
39463: LD_INT 1
39465: ARRAY
39466: PPUSH
39467: CALL_OW 251
39471: PPUSH
39472: LD_VAR 0 17
39476: PUSH
39477: LD_INT 1
39479: ARRAY
39480: PPUSH
39481: CALL_OW 254
39485: PPUSH
39486: LD_INT 5
39488: PPUSH
39489: CALL_OW 273
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39498: LD_VAR 0 16
39502: PUSH
39503: LD_INT 1
39505: ARRAY
39506: PPUSH
39507: LD_VAR 0 16
39511: PUSH
39512: LD_INT 2
39514: ARRAY
39515: PPUSH
39516: CALL_OW 488
39520: IFFALSE 39551
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39522: LD_VAR 0 13
39526: PPUSH
39527: LD_VAR 0 16
39531: PUSH
39532: LD_INT 1
39534: ARRAY
39535: PPUSH
39536: LD_VAR 0 16
39540: PUSH
39541: LD_INT 2
39543: ARRAY
39544: PPUSH
39545: CALL_OW 111
// continue ;
39549: GO 39041
// end ; end ; r := GetDir ( tmp ) ;
39551: LD_ADDR_VAR 0 15
39555: PUSH
39556: LD_VAR 0 13
39560: PPUSH
39561: CALL_OW 254
39565: ST_TO_ADDR
// if r = 5 then
39566: LD_VAR 0 15
39570: PUSH
39571: LD_INT 5
39573: EQUAL
39574: IFFALSE 39584
// r := 0 ;
39576: LD_ADDR_VAR 0 15
39580: PUSH
39581: LD_INT 0
39583: ST_TO_ADDR
// for j = r to 5 do
39584: LD_ADDR_VAR 0 10
39588: PUSH
39589: DOUBLE
39590: LD_VAR 0 15
39594: DEC
39595: ST_TO_ADDR
39596: LD_INT 5
39598: PUSH
39599: FOR_TO
39600: IFFALSE 39714
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39602: LD_ADDR_VAR 0 11
39606: PUSH
39607: LD_VAR 0 13
39611: PPUSH
39612: CALL_OW 250
39616: PPUSH
39617: LD_VAR 0 10
39621: PPUSH
39622: LD_INT 2
39624: PPUSH
39625: CALL_OW 272
39629: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39630: LD_ADDR_VAR 0 12
39634: PUSH
39635: LD_VAR 0 13
39639: PPUSH
39640: CALL_OW 251
39644: PPUSH
39645: LD_VAR 0 10
39649: PPUSH
39650: LD_INT 2
39652: PPUSH
39653: CALL_OW 273
39657: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39658: LD_VAR 0 11
39662: PPUSH
39663: LD_VAR 0 12
39667: PPUSH
39668: CALL_OW 488
39672: PUSH
39673: LD_VAR 0 11
39677: PPUSH
39678: LD_VAR 0 12
39682: PPUSH
39683: CALL_OW 428
39687: NOT
39688: AND
39689: IFFALSE 39712
// begin ComMoveXY ( tmp , _x , _y ) ;
39691: LD_VAR 0 13
39695: PPUSH
39696: LD_VAR 0 11
39700: PPUSH
39701: LD_VAR 0 12
39705: PPUSH
39706: CALL_OW 111
// break ;
39710: GO 39714
// end ; end ;
39712: GO 39599
39714: POP
39715: POP
// end ; end ;
39716: GO 39041
39718: POP
39719: POP
// end ;
39720: LD_VAR 0 8
39724: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39725: LD_INT 0
39727: PPUSH
// result := true ;
39728: LD_ADDR_VAR 0 3
39732: PUSH
39733: LD_INT 1
39735: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39736: LD_VAR 0 2
39740: PUSH
39741: LD_INT 24
39743: DOUBLE
39744: EQUAL
39745: IFTRUE 39755
39747: LD_INT 33
39749: DOUBLE
39750: EQUAL
39751: IFTRUE 39755
39753: GO 39780
39755: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39756: LD_ADDR_VAR 0 3
39760: PUSH
39761: LD_INT 32
39763: PPUSH
39764: LD_VAR 0 1
39768: PPUSH
39769: CALL_OW 321
39773: PUSH
39774: LD_INT 2
39776: EQUAL
39777: ST_TO_ADDR
39778: GO 40100
39780: LD_INT 20
39782: DOUBLE
39783: EQUAL
39784: IFTRUE 39788
39786: GO 39813
39788: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39789: LD_ADDR_VAR 0 3
39793: PUSH
39794: LD_INT 6
39796: PPUSH
39797: LD_VAR 0 1
39801: PPUSH
39802: CALL_OW 321
39806: PUSH
39807: LD_INT 2
39809: EQUAL
39810: ST_TO_ADDR
39811: GO 40100
39813: LD_INT 22
39815: DOUBLE
39816: EQUAL
39817: IFTRUE 39827
39819: LD_INT 36
39821: DOUBLE
39822: EQUAL
39823: IFTRUE 39827
39825: GO 39852
39827: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39828: LD_ADDR_VAR 0 3
39832: PUSH
39833: LD_INT 15
39835: PPUSH
39836: LD_VAR 0 1
39840: PPUSH
39841: CALL_OW 321
39845: PUSH
39846: LD_INT 2
39848: EQUAL
39849: ST_TO_ADDR
39850: GO 40100
39852: LD_INT 30
39854: DOUBLE
39855: EQUAL
39856: IFTRUE 39860
39858: GO 39885
39860: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39861: LD_ADDR_VAR 0 3
39865: PUSH
39866: LD_INT 20
39868: PPUSH
39869: LD_VAR 0 1
39873: PPUSH
39874: CALL_OW 321
39878: PUSH
39879: LD_INT 2
39881: EQUAL
39882: ST_TO_ADDR
39883: GO 40100
39885: LD_INT 28
39887: DOUBLE
39888: EQUAL
39889: IFTRUE 39899
39891: LD_INT 21
39893: DOUBLE
39894: EQUAL
39895: IFTRUE 39899
39897: GO 39924
39899: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39900: LD_ADDR_VAR 0 3
39904: PUSH
39905: LD_INT 21
39907: PPUSH
39908: LD_VAR 0 1
39912: PPUSH
39913: CALL_OW 321
39917: PUSH
39918: LD_INT 2
39920: EQUAL
39921: ST_TO_ADDR
39922: GO 40100
39924: LD_INT 16
39926: DOUBLE
39927: EQUAL
39928: IFTRUE 39932
39930: GO 39959
39932: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39933: LD_ADDR_VAR 0 3
39937: PUSH
39938: LD_EXP 41
39942: PPUSH
39943: LD_VAR 0 1
39947: PPUSH
39948: CALL_OW 321
39952: PUSH
39953: LD_INT 2
39955: EQUAL
39956: ST_TO_ADDR
39957: GO 40100
39959: LD_INT 19
39961: DOUBLE
39962: EQUAL
39963: IFTRUE 39973
39965: LD_INT 23
39967: DOUBLE
39968: EQUAL
39969: IFTRUE 39973
39971: GO 40000
39973: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39974: LD_ADDR_VAR 0 3
39978: PUSH
39979: LD_EXP 40
39983: PPUSH
39984: LD_VAR 0 1
39988: PPUSH
39989: CALL_OW 321
39993: PUSH
39994: LD_INT 2
39996: EQUAL
39997: ST_TO_ADDR
39998: GO 40100
40000: LD_INT 17
40002: DOUBLE
40003: EQUAL
40004: IFTRUE 40008
40006: GO 40033
40008: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40009: LD_ADDR_VAR 0 3
40013: PUSH
40014: LD_INT 39
40016: PPUSH
40017: LD_VAR 0 1
40021: PPUSH
40022: CALL_OW 321
40026: PUSH
40027: LD_INT 2
40029: EQUAL
40030: ST_TO_ADDR
40031: GO 40100
40033: LD_INT 18
40035: DOUBLE
40036: EQUAL
40037: IFTRUE 40041
40039: GO 40066
40041: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40042: LD_ADDR_VAR 0 3
40046: PUSH
40047: LD_INT 40
40049: PPUSH
40050: LD_VAR 0 1
40054: PPUSH
40055: CALL_OW 321
40059: PUSH
40060: LD_INT 2
40062: EQUAL
40063: ST_TO_ADDR
40064: GO 40100
40066: LD_INT 27
40068: DOUBLE
40069: EQUAL
40070: IFTRUE 40074
40072: GO 40099
40074: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40075: LD_ADDR_VAR 0 3
40079: PUSH
40080: LD_INT 35
40082: PPUSH
40083: LD_VAR 0 1
40087: PPUSH
40088: CALL_OW 321
40092: PUSH
40093: LD_INT 2
40095: EQUAL
40096: ST_TO_ADDR
40097: GO 40100
40099: POP
// end ;
40100: LD_VAR 0 3
40104: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40105: LD_INT 0
40107: PPUSH
40108: PPUSH
40109: PPUSH
40110: PPUSH
40111: PPUSH
40112: PPUSH
40113: PPUSH
40114: PPUSH
40115: PPUSH
40116: PPUSH
40117: PPUSH
// result := false ;
40118: LD_ADDR_VAR 0 6
40122: PUSH
40123: LD_INT 0
40125: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40126: LD_VAR 0 1
40130: NOT
40131: PUSH
40132: LD_VAR 0 1
40136: PPUSH
40137: CALL_OW 266
40141: PUSH
40142: LD_INT 0
40144: PUSH
40145: LD_INT 1
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: IN
40152: NOT
40153: OR
40154: PUSH
40155: LD_VAR 0 2
40159: NOT
40160: OR
40161: PUSH
40162: LD_VAR 0 5
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: LD_INT 1
40172: PUSH
40173: LD_INT 2
40175: PUSH
40176: LD_INT 3
40178: PUSH
40179: LD_INT 4
40181: PUSH
40182: LD_INT 5
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: IN
40193: NOT
40194: OR
40195: PUSH
40196: LD_VAR 0 3
40200: PPUSH
40201: LD_VAR 0 4
40205: PPUSH
40206: CALL_OW 488
40210: NOT
40211: OR
40212: IFFALSE 40216
// exit ;
40214: GO 40952
// side := GetSide ( depot ) ;
40216: LD_ADDR_VAR 0 9
40220: PUSH
40221: LD_VAR 0 1
40225: PPUSH
40226: CALL_OW 255
40230: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40231: LD_VAR 0 9
40235: PPUSH
40236: LD_VAR 0 2
40240: PPUSH
40241: CALL 39725 0 2
40245: NOT
40246: IFFALSE 40250
// exit ;
40248: GO 40952
// pom := GetBase ( depot ) ;
40250: LD_ADDR_VAR 0 10
40254: PUSH
40255: LD_VAR 0 1
40259: PPUSH
40260: CALL_OW 274
40264: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40265: LD_ADDR_VAR 0 11
40269: PUSH
40270: LD_VAR 0 2
40274: PPUSH
40275: LD_VAR 0 1
40279: PPUSH
40280: CALL_OW 248
40284: PPUSH
40285: CALL_OW 450
40289: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40290: LD_VAR 0 10
40294: PPUSH
40295: LD_INT 1
40297: PPUSH
40298: CALL_OW 275
40302: PUSH
40303: LD_VAR 0 11
40307: PUSH
40308: LD_INT 1
40310: ARRAY
40311: GREATEREQUAL
40312: PUSH
40313: LD_VAR 0 10
40317: PPUSH
40318: LD_INT 2
40320: PPUSH
40321: CALL_OW 275
40325: PUSH
40326: LD_VAR 0 11
40330: PUSH
40331: LD_INT 2
40333: ARRAY
40334: GREATEREQUAL
40335: AND
40336: PUSH
40337: LD_VAR 0 10
40341: PPUSH
40342: LD_INT 3
40344: PPUSH
40345: CALL_OW 275
40349: PUSH
40350: LD_VAR 0 11
40354: PUSH
40355: LD_INT 3
40357: ARRAY
40358: GREATEREQUAL
40359: AND
40360: NOT
40361: IFFALSE 40365
// exit ;
40363: GO 40952
// if GetBType ( depot ) = b_depot then
40365: LD_VAR 0 1
40369: PPUSH
40370: CALL_OW 266
40374: PUSH
40375: LD_INT 0
40377: EQUAL
40378: IFFALSE 40390
// dist := 28 else
40380: LD_ADDR_VAR 0 14
40384: PUSH
40385: LD_INT 28
40387: ST_TO_ADDR
40388: GO 40398
// dist := 36 ;
40390: LD_ADDR_VAR 0 14
40394: PUSH
40395: LD_INT 36
40397: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40398: LD_VAR 0 1
40402: PPUSH
40403: LD_VAR 0 3
40407: PPUSH
40408: LD_VAR 0 4
40412: PPUSH
40413: CALL_OW 297
40417: PUSH
40418: LD_VAR 0 14
40422: GREATER
40423: IFFALSE 40427
// exit ;
40425: GO 40952
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40427: LD_ADDR_VAR 0 12
40431: PUSH
40432: LD_VAR 0 2
40436: PPUSH
40437: LD_VAR 0 3
40441: PPUSH
40442: LD_VAR 0 4
40446: PPUSH
40447: LD_VAR 0 5
40451: PPUSH
40452: LD_VAR 0 1
40456: PPUSH
40457: CALL_OW 248
40461: PPUSH
40462: LD_INT 0
40464: PPUSH
40465: CALL 40957 0 6
40469: ST_TO_ADDR
// if not hexes then
40470: LD_VAR 0 12
40474: NOT
40475: IFFALSE 40479
// exit ;
40477: GO 40952
// hex := GetHexInfo ( x , y ) ;
40479: LD_ADDR_VAR 0 15
40483: PUSH
40484: LD_VAR 0 3
40488: PPUSH
40489: LD_VAR 0 4
40493: PPUSH
40494: CALL_OW 546
40498: ST_TO_ADDR
// if hex [ 1 ] then
40499: LD_VAR 0 15
40503: PUSH
40504: LD_INT 1
40506: ARRAY
40507: IFFALSE 40511
// exit ;
40509: GO 40952
// height := hex [ 2 ] ;
40511: LD_ADDR_VAR 0 13
40515: PUSH
40516: LD_VAR 0 15
40520: PUSH
40521: LD_INT 2
40523: ARRAY
40524: ST_TO_ADDR
// for i = 1 to hexes do
40525: LD_ADDR_VAR 0 7
40529: PUSH
40530: DOUBLE
40531: LD_INT 1
40533: DEC
40534: ST_TO_ADDR
40535: LD_VAR 0 12
40539: PUSH
40540: FOR_TO
40541: IFFALSE 40871
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40543: LD_VAR 0 12
40547: PUSH
40548: LD_VAR 0 7
40552: ARRAY
40553: PUSH
40554: LD_INT 1
40556: ARRAY
40557: PPUSH
40558: LD_VAR 0 12
40562: PUSH
40563: LD_VAR 0 7
40567: ARRAY
40568: PUSH
40569: LD_INT 2
40571: ARRAY
40572: PPUSH
40573: CALL_OW 488
40577: NOT
40578: PUSH
40579: LD_VAR 0 12
40583: PUSH
40584: LD_VAR 0 7
40588: ARRAY
40589: PUSH
40590: LD_INT 1
40592: ARRAY
40593: PPUSH
40594: LD_VAR 0 12
40598: PUSH
40599: LD_VAR 0 7
40603: ARRAY
40604: PUSH
40605: LD_INT 2
40607: ARRAY
40608: PPUSH
40609: CALL_OW 428
40613: PUSH
40614: LD_INT 0
40616: GREATER
40617: OR
40618: PUSH
40619: LD_VAR 0 12
40623: PUSH
40624: LD_VAR 0 7
40628: ARRAY
40629: PUSH
40630: LD_INT 1
40632: ARRAY
40633: PPUSH
40634: LD_VAR 0 12
40638: PUSH
40639: LD_VAR 0 7
40643: ARRAY
40644: PUSH
40645: LD_INT 2
40647: ARRAY
40648: PPUSH
40649: CALL_OW 351
40653: OR
40654: IFFALSE 40660
// exit ;
40656: POP
40657: POP
40658: GO 40952
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40660: LD_ADDR_VAR 0 8
40664: PUSH
40665: LD_VAR 0 12
40669: PUSH
40670: LD_VAR 0 7
40674: ARRAY
40675: PUSH
40676: LD_INT 1
40678: ARRAY
40679: PPUSH
40680: LD_VAR 0 12
40684: PUSH
40685: LD_VAR 0 7
40689: ARRAY
40690: PUSH
40691: LD_INT 2
40693: ARRAY
40694: PPUSH
40695: CALL_OW 546
40699: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40700: LD_VAR 0 8
40704: PUSH
40705: LD_INT 1
40707: ARRAY
40708: PUSH
40709: LD_VAR 0 8
40713: PUSH
40714: LD_INT 2
40716: ARRAY
40717: PUSH
40718: LD_VAR 0 13
40722: PUSH
40723: LD_INT 2
40725: PLUS
40726: GREATER
40727: OR
40728: PUSH
40729: LD_VAR 0 8
40733: PUSH
40734: LD_INT 2
40736: ARRAY
40737: PUSH
40738: LD_VAR 0 13
40742: PUSH
40743: LD_INT 2
40745: MINUS
40746: LESS
40747: OR
40748: PUSH
40749: LD_VAR 0 8
40753: PUSH
40754: LD_INT 3
40756: ARRAY
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: LD_INT 8
40763: PUSH
40764: LD_INT 9
40766: PUSH
40767: LD_INT 10
40769: PUSH
40770: LD_INT 11
40772: PUSH
40773: LD_INT 12
40775: PUSH
40776: LD_INT 13
40778: PUSH
40779: LD_INT 16
40781: PUSH
40782: LD_INT 17
40784: PUSH
40785: LD_INT 18
40787: PUSH
40788: LD_INT 19
40790: PUSH
40791: LD_INT 20
40793: PUSH
40794: LD_INT 21
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: IN
40812: NOT
40813: OR
40814: PUSH
40815: LD_VAR 0 8
40819: PUSH
40820: LD_INT 5
40822: ARRAY
40823: NOT
40824: OR
40825: PUSH
40826: LD_VAR 0 8
40830: PUSH
40831: LD_INT 6
40833: ARRAY
40834: PUSH
40835: LD_INT 1
40837: PUSH
40838: LD_INT 2
40840: PUSH
40841: LD_INT 7
40843: PUSH
40844: LD_INT 9
40846: PUSH
40847: LD_INT 10
40849: PUSH
40850: LD_INT 11
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: IN
40861: NOT
40862: OR
40863: IFFALSE 40869
// exit ;
40865: POP
40866: POP
40867: GO 40952
// end ;
40869: GO 40540
40871: POP
40872: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40873: LD_VAR 0 9
40877: PPUSH
40878: LD_VAR 0 3
40882: PPUSH
40883: LD_VAR 0 4
40887: PPUSH
40888: LD_INT 20
40890: PPUSH
40891: CALL 32898 0 4
40895: PUSH
40896: LD_INT 4
40898: ARRAY
40899: IFFALSE 40903
// exit ;
40901: GO 40952
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40903: LD_VAR 0 2
40907: PUSH
40908: LD_INT 29
40910: PUSH
40911: LD_INT 30
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: IN
40918: PUSH
40919: LD_VAR 0 3
40923: PPUSH
40924: LD_VAR 0 4
40928: PPUSH
40929: LD_VAR 0 9
40933: PPUSH
40934: CALL_OW 440
40938: NOT
40939: AND
40940: IFFALSE 40944
// exit ;
40942: GO 40952
// result := true ;
40944: LD_ADDR_VAR 0 6
40948: PUSH
40949: LD_INT 1
40951: ST_TO_ADDR
// end ;
40952: LD_VAR 0 6
40956: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40957: LD_INT 0
40959: PPUSH
40960: PPUSH
40961: PPUSH
40962: PPUSH
40963: PPUSH
40964: PPUSH
40965: PPUSH
40966: PPUSH
40967: PPUSH
40968: PPUSH
40969: PPUSH
40970: PPUSH
40971: PPUSH
40972: PPUSH
40973: PPUSH
40974: PPUSH
40975: PPUSH
40976: PPUSH
40977: PPUSH
40978: PPUSH
40979: PPUSH
40980: PPUSH
40981: PPUSH
40982: PPUSH
40983: PPUSH
40984: PPUSH
40985: PPUSH
40986: PPUSH
40987: PPUSH
40988: PPUSH
40989: PPUSH
40990: PPUSH
40991: PPUSH
40992: PPUSH
40993: PPUSH
40994: PPUSH
40995: PPUSH
40996: PPUSH
40997: PPUSH
40998: PPUSH
40999: PPUSH
41000: PPUSH
41001: PPUSH
41002: PPUSH
41003: PPUSH
41004: PPUSH
41005: PPUSH
41006: PPUSH
41007: PPUSH
41008: PPUSH
41009: PPUSH
41010: PPUSH
41011: PPUSH
41012: PPUSH
41013: PPUSH
41014: PPUSH
41015: PPUSH
41016: PPUSH
// result = [ ] ;
41017: LD_ADDR_VAR 0 7
41021: PUSH
41022: EMPTY
41023: ST_TO_ADDR
// temp_list = [ ] ;
41024: LD_ADDR_VAR 0 9
41028: PUSH
41029: EMPTY
41030: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41031: LD_VAR 0 4
41035: PUSH
41036: LD_INT 0
41038: PUSH
41039: LD_INT 1
41041: PUSH
41042: LD_INT 2
41044: PUSH
41045: LD_INT 3
41047: PUSH
41048: LD_INT 4
41050: PUSH
41051: LD_INT 5
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: IN
41062: NOT
41063: PUSH
41064: LD_VAR 0 1
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: IN
41079: PUSH
41080: LD_VAR 0 5
41084: PUSH
41085: LD_INT 1
41087: PUSH
41088: LD_INT 2
41090: PUSH
41091: LD_INT 3
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: LIST
41098: IN
41099: NOT
41100: AND
41101: OR
41102: IFFALSE 41106
// exit ;
41104: GO 59497
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41106: LD_VAR 0 1
41110: PUSH
41111: LD_INT 6
41113: PUSH
41114: LD_INT 7
41116: PUSH
41117: LD_INT 8
41119: PUSH
41120: LD_INT 13
41122: PUSH
41123: LD_INT 12
41125: PUSH
41126: LD_INT 15
41128: PUSH
41129: LD_INT 11
41131: PUSH
41132: LD_INT 14
41134: PUSH
41135: LD_INT 10
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: IN
41149: IFFALSE 41159
// btype = b_lab ;
41151: LD_ADDR_VAR 0 1
41155: PUSH
41156: LD_INT 6
41158: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41159: LD_VAR 0 6
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: LD_INT 2
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: LIST
41177: IN
41178: NOT
41179: PUSH
41180: LD_VAR 0 1
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: LD_INT 1
41190: PUSH
41191: LD_INT 2
41193: PUSH
41194: LD_INT 3
41196: PUSH
41197: LD_INT 6
41199: PUSH
41200: LD_INT 36
41202: PUSH
41203: LD_INT 4
41205: PUSH
41206: LD_INT 5
41208: PUSH
41209: LD_INT 31
41211: PUSH
41212: LD_INT 32
41214: PUSH
41215: LD_INT 33
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: IN
41231: NOT
41232: PUSH
41233: LD_VAR 0 6
41237: PUSH
41238: LD_INT 1
41240: EQUAL
41241: AND
41242: OR
41243: PUSH
41244: LD_VAR 0 1
41248: PUSH
41249: LD_INT 2
41251: PUSH
41252: LD_INT 3
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: IN
41259: NOT
41260: PUSH
41261: LD_VAR 0 6
41265: PUSH
41266: LD_INT 2
41268: EQUAL
41269: AND
41270: OR
41271: IFFALSE 41281
// mode = 0 ;
41273: LD_ADDR_VAR 0 6
41277: PUSH
41278: LD_INT 0
41280: ST_TO_ADDR
// case mode of 0 :
41281: LD_VAR 0 6
41285: PUSH
41286: LD_INT 0
41288: DOUBLE
41289: EQUAL
41290: IFTRUE 41294
41292: GO 52747
41294: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41295: LD_ADDR_VAR 0 11
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 0
41312: PUSH
41313: LD_INT 1
41315: NEG
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: LD_INT 0
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 1
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 1
41353: NEG
41354: PUSH
41355: LD_INT 0
41357: PUSH
41358: EMPTY
41359: LIST
41360: LIST
41361: PUSH
41362: LD_INT 1
41364: NEG
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 1
41376: NEG
41377: PUSH
41378: LD_INT 2
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: LD_INT 2
41391: NEG
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 1
41399: PUSH
41400: LD_INT 1
41402: NEG
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 1
41410: PUSH
41411: LD_INT 2
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 0
41420: PUSH
41421: LD_INT 2
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: NEG
41431: PUSH
41432: LD_INT 1
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 1
41441: PUSH
41442: LD_INT 3
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 0
41451: PUSH
41452: LD_INT 3
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: LD_INT 2
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: LIST
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41488: LD_ADDR_VAR 0 12
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: LD_INT 1
41508: NEG
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 1
41516: PUSH
41517: LD_INT 0
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: LD_INT 1
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 1
41546: NEG
41547: PUSH
41548: LD_INT 0
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 1
41557: NEG
41558: PUSH
41559: LD_INT 1
41561: NEG
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 1
41569: PUSH
41570: LD_INT 1
41572: NEG
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 2
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 2
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: LD_INT 1
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 2
41611: NEG
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 2
41622: NEG
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 2
41634: NEG
41635: PUSH
41636: LD_INT 1
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 3
41645: NEG
41646: PUSH
41647: LD_INT 0
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 3
41656: NEG
41657: PUSH
41658: LD_INT 1
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41684: LD_ADDR_VAR 0 13
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: LD_INT 0
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 0
41701: PUSH
41702: LD_INT 1
41704: NEG
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 1
41712: PUSH
41713: LD_INT 0
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 1
41722: PUSH
41723: LD_INT 1
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 0
41732: PUSH
41733: LD_INT 1
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 1
41742: NEG
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 1
41753: NEG
41754: PUSH
41755: LD_INT 1
41757: NEG
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 1
41765: NEG
41766: PUSH
41767: LD_INT 2
41769: NEG
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 2
41777: PUSH
41778: LD_INT 1
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 2
41787: PUSH
41788: LD_INT 2
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 1
41797: PUSH
41798: LD_INT 2
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 2
41807: NEG
41808: PUSH
41809: LD_INT 1
41811: NEG
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 2
41819: NEG
41820: PUSH
41821: LD_INT 2
41823: NEG
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 2
41831: NEG
41832: PUSH
41833: LD_INT 3
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 3
41843: NEG
41844: PUSH
41845: LD_INT 2
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 3
41855: NEG
41856: PUSH
41857: LD_INT 3
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41883: LD_ADDR_VAR 0 14
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 0
41900: PUSH
41901: LD_INT 1
41903: NEG
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: LD_INT 1
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 1
41921: PUSH
41922: LD_INT 1
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: LD_INT 0
41931: PUSH
41932: LD_INT 1
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 1
41941: NEG
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 1
41952: NEG
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 1
41964: NEG
41965: PUSH
41966: LD_INT 2
41968: NEG
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 0
41976: PUSH
41977: LD_INT 2
41979: NEG
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: PUSH
41988: LD_INT 1
41990: NEG
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: LD_INT 2
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: LD_INT 3
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: LD_INT 3
42044: NEG
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: PUSH
42053: LD_INT 2
42055: NEG
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: LIST
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42079: LD_ADDR_VAR 0 15
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: LD_INT 0
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 0
42096: PUSH
42097: LD_INT 1
42099: NEG
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 1
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 1
42137: NEG
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: PUSH
42146: LD_INT 1
42148: NEG
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 1
42160: PUSH
42161: LD_INT 1
42163: NEG
42164: PUSH
42165: EMPTY
42166: LIST
42167: LIST
42168: PUSH
42169: LD_INT 2
42171: PUSH
42172: LD_INT 0
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 2
42181: PUSH
42182: LD_INT 1
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 1
42191: NEG
42192: PUSH
42193: LD_INT 1
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 2
42202: NEG
42203: PUSH
42204: LD_INT 0
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 2
42213: NEG
42214: PUSH
42215: LD_INT 1
42217: NEG
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 2
42225: PUSH
42226: LD_INT 1
42228: NEG
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 3
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 3
42246: PUSH
42247: LD_INT 1
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42272: LD_ADDR_VAR 0 16
42276: PUSH
42277: LD_INT 0
42279: PUSH
42280: LD_INT 0
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: LD_INT 1
42292: NEG
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 1
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: LD_INT 1
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: LD_INT 1
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 1
42330: NEG
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 1
42341: NEG
42342: PUSH
42343: LD_INT 1
42345: NEG
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: LD_INT 2
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 2
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 2
42375: PUSH
42376: LD_INT 2
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: LD_INT 2
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 2
42395: NEG
42396: PUSH
42397: LD_INT 1
42399: NEG
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 2
42407: NEG
42408: PUSH
42409: LD_INT 2
42411: NEG
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 3
42419: PUSH
42420: LD_INT 2
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 3
42429: PUSH
42430: LD_INT 3
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 2
42439: PUSH
42440: LD_INT 3
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42465: LD_ADDR_VAR 0 17
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: LD_INT 0
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: LD_INT 1
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: NEG
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: NEG
42547: PUSH
42548: LD_INT 2
42550: NEG
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: LD_INT 2
42561: NEG
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 1
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 2
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: LD_INT 1
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: LD_INT 2
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: LD_INT 2
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 0
42620: PUSH
42621: LD_INT 2
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 1
42630: NEG
42631: PUSH
42632: LD_INT 1
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 2
42641: NEG
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 2
42652: NEG
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 2
42664: NEG
42665: PUSH
42666: LD_INT 2
42668: NEG
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42695: LD_ADDR_VAR 0 18
42699: PUSH
42700: LD_INT 0
42702: PUSH
42703: LD_INT 0
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: LD_INT 1
42715: NEG
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 1
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: LD_INT 1
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 0
42743: PUSH
42744: LD_INT 1
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: PUSH
42755: LD_INT 0
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 1
42764: NEG
42765: PUSH
42766: LD_INT 1
42768: NEG
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: PUSH
42774: LD_INT 1
42776: NEG
42777: PUSH
42778: LD_INT 2
42780: NEG
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: LD_INT 2
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 2
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: LD_INT 2
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: LD_INT 2
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 1
42860: NEG
42861: PUSH
42862: LD_INT 1
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 2
42871: NEG
42872: PUSH
42873: LD_INT 0
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 2
42882: NEG
42883: PUSH
42884: LD_INT 1
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 2
42894: NEG
42895: PUSH
42896: LD_INT 2
42898: NEG
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42925: LD_ADDR_VAR 0 19
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: LD_INT 0
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: LD_INT 1
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: LD_INT 1
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: LD_INT 1
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 1
42983: NEG
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 1
42994: NEG
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: NEG
43007: PUSH
43008: LD_INT 2
43010: NEG
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 0
43018: PUSH
43019: LD_INT 2
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: PUSH
43030: LD_INT 1
43032: NEG
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 2
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 2
43050: PUSH
43051: LD_INT 1
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: LD_INT 2
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 1
43070: PUSH
43071: LD_INT 2
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 0
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 1
43090: NEG
43091: PUSH
43092: LD_INT 1
43094: PUSH
43095: EMPTY
43096: LIST
43097: LIST
43098: PUSH
43099: LD_INT 2
43101: NEG
43102: PUSH
43103: LD_INT 0
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 2
43112: NEG
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 2
43124: NEG
43125: PUSH
43126: LD_INT 2
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43155: LD_ADDR_VAR 0 20
43159: PUSH
43160: LD_INT 0
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: LD_INT 1
43175: NEG
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 1
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: PUSH
43194: LD_INT 1
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: PUSH
43201: LD_INT 0
43203: PUSH
43204: LD_INT 1
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 1
43213: NEG
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 1
43224: NEG
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 1
43236: NEG
43237: PUSH
43238: LD_INT 2
43240: NEG
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: LD_INT 2
43251: NEG
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: LD_INT 1
43262: NEG
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 2
43270: PUSH
43271: LD_INT 0
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 2
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 2
43290: PUSH
43291: LD_INT 2
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: PUSH
43301: LD_INT 2
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 0
43310: PUSH
43311: LD_INT 2
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PUSH
43318: LD_INT 1
43320: NEG
43321: PUSH
43322: LD_INT 1
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 2
43331: NEG
43332: PUSH
43333: LD_INT 0
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 2
43342: NEG
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 2
43354: NEG
43355: PUSH
43356: LD_INT 2
43358: NEG
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43385: LD_ADDR_VAR 0 21
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: LD_INT 0
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: LD_INT 1
43405: NEG
43406: PUSH
43407: EMPTY
43408: LIST
43409: LIST
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 0
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 1
43443: NEG
43444: PUSH
43445: LD_INT 0
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: LD_INT 1
43458: NEG
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: LD_INT 2
43470: NEG
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 0
43478: PUSH
43479: LD_INT 2
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 2
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 2
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 2
43520: PUSH
43521: LD_INT 2
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: LD_INT 2
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 0
43540: PUSH
43541: LD_INT 2
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 1
43550: NEG
43551: PUSH
43552: LD_INT 1
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 2
43561: NEG
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 2
43572: NEG
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 2
43584: NEG
43585: PUSH
43586: LD_INT 2
43588: NEG
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43615: LD_ADDR_VAR 0 22
43619: PUSH
43620: LD_INT 0
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 1
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: EMPTY
43648: LIST
43649: LIST
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: LD_INT 1
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: LD_INT 1
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: NEG
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: NEG
43685: PUSH
43686: LD_INT 1
43688: NEG
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 1
43696: NEG
43697: PUSH
43698: LD_INT 2
43700: NEG
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: LD_INT 2
43711: NEG
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: LD_INT 1
43722: NEG
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 2
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 2
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 2
43750: PUSH
43751: LD_INT 2
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: LD_INT 2
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: LD_INT 2
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: LD_INT 1
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 2
43791: NEG
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 2
43802: NEG
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 2
43814: NEG
43815: PUSH
43816: LD_INT 2
43818: NEG
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43845: LD_ADDR_VAR 0 23
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 1
43914: NEG
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: LD_INT 2
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: LD_INT 1
43952: NEG
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 2
43960: PUSH
43961: LD_INT 0
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 2
43970: PUSH
43971: LD_INT 1
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 2
43980: PUSH
43981: LD_INT 2
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: LD_INT 2
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: LD_INT 2
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: LD_INT 1
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 2
44021: NEG
44022: PUSH
44023: LD_INT 0
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 2
44032: NEG
44033: PUSH
44034: LD_INT 1
44036: NEG
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 2
44044: NEG
44045: PUSH
44046: LD_INT 2
44048: NEG
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 2
44056: NEG
44057: PUSH
44058: LD_INT 3
44060: NEG
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: LD_INT 3
44072: NEG
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: LD_INT 2
44083: NEG
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 2
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: LIST
44113: LIST
44114: LIST
44115: LIST
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: LIST
44121: LIST
44122: LIST
44123: LIST
44124: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44125: LD_ADDR_VAR 0 24
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: LD_INT 0
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 0
44142: PUSH
44143: LD_INT 1
44145: NEG
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 1
44153: PUSH
44154: LD_INT 0
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: LD_INT 1
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 0
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: LD_INT 1
44198: NEG
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: LD_INT 2
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 0
44218: PUSH
44219: LD_INT 2
44221: NEG
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 2
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 2
44260: PUSH
44261: LD_INT 2
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: LD_INT 2
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: LD_INT 2
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 1
44290: NEG
44291: PUSH
44292: LD_INT 1
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: PUSH
44299: LD_INT 2
44301: NEG
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: NEG
44313: PUSH
44314: LD_INT 1
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 2
44324: NEG
44325: PUSH
44326: LD_INT 2
44328: NEG
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: LD_INT 2
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 2
44347: PUSH
44348: LD_INT 1
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 3
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 3
44368: PUSH
44369: LD_INT 2
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44401: LD_ADDR_VAR 0 25
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: LD_INT 1
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: LD_INT 0
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 1
44459: NEG
44460: PUSH
44461: LD_INT 0
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: LD_INT 1
44474: NEG
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: LD_INT 1
44482: NEG
44483: PUSH
44484: LD_INT 2
44486: NEG
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 0
44494: PUSH
44495: LD_INT 2
44497: NEG
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 1
44505: PUSH
44506: LD_INT 1
44508: NEG
44509: PUSH
44510: EMPTY
44511: LIST
44512: LIST
44513: PUSH
44514: LD_INT 2
44516: PUSH
44517: LD_INT 0
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 2
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: LD_INT 2
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: LD_INT 2
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: LD_INT 2
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 2
44577: NEG
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 2
44588: NEG
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: LD_INT 2
44604: NEG
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 3
44612: PUSH
44613: LD_INT 1
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: LD_INT 3
44622: PUSH
44623: LD_INT 2
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 2
44632: PUSH
44633: LD_INT 3
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 1
44642: PUSH
44643: LD_INT 3
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44675: LD_ADDR_VAR 0 26
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 0
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 0
44723: PUSH
44724: LD_INT 1
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: NEG
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: NEG
44757: PUSH
44758: LD_INT 2
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: LD_INT 2
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 1
44779: PUSH
44780: LD_INT 1
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 2
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 2
44810: PUSH
44811: LD_INT 2
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: LD_INT 2
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 2
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: NEG
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 2
44851: NEG
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 2
44862: NEG
44863: PUSH
44864: LD_INT 1
44866: NEG
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 2
44874: NEG
44875: PUSH
44876: LD_INT 2
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 2
44886: PUSH
44887: LD_INT 3
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: LD_INT 3
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: NEG
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 2
44917: NEG
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: LIST
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44951: LD_ADDR_VAR 0 27
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: LD_INT 0
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 1
44979: PUSH
44980: LD_INT 0
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 1
44989: PUSH
44990: LD_INT 1
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: LD_INT 0
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: LD_INT 1
45024: NEG
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: LD_INT 2
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: LD_INT 2
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 2
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: PUSH
45074: LD_INT 2
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 2
45086: PUSH
45087: LD_INT 2
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: LD_INT 2
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: LD_INT 2
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: LD_INT 1
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 2
45127: NEG
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 2
45138: NEG
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 2
45150: NEG
45151: PUSH
45152: LD_INT 2
45154: NEG
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: LD_INT 2
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 2
45173: NEG
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 3
45184: NEG
45185: PUSH
45186: LD_INT 1
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 3
45196: NEG
45197: PUSH
45198: LD_INT 2
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45231: LD_ADDR_VAR 0 28
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: LD_INT 1
45251: NEG
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: LD_INT 1
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: LD_INT 1
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: LD_INT 2
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: LD_INT 2
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: LD_INT 1
45338: NEG
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 2
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: LD_INT 2
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: LD_INT 2
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: LD_INT 2
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: LD_INT 1
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 2
45407: NEG
45408: PUSH
45409: LD_INT 0
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 2
45418: NEG
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 2
45430: NEG
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: NEG
45443: PUSH
45444: LD_INT 3
45446: NEG
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: LD_INT 3
45458: NEG
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 3
45466: NEG
45467: PUSH
45468: LD_INT 1
45470: NEG
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 3
45478: NEG
45479: PUSH
45480: LD_INT 2
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45513: LD_ADDR_VAR 0 29
45517: PUSH
45518: LD_INT 0
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: LD_INT 1
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 1
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: NEG
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: LD_INT 2
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: PUSH
45649: LD_INT 2
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: LD_INT 2
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: NEG
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 2
45679: NEG
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 2
45691: NEG
45692: PUSH
45693: LD_INT 2
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 2
45703: NEG
45704: PUSH
45705: LD_INT 3
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 2
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 3
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: LD_INT 3
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 1
45746: NEG
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 3
45757: NEG
45758: PUSH
45759: LD_INT 2
45761: NEG
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45792: LD_ADDR_VAR 0 30
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: LD_INT 0
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 1
45861: NEG
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: LD_INT 2
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: LD_INT 2
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 2
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 2
45927: PUSH
45928: LD_INT 2
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: LD_INT 2
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: NEG
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 2
45958: NEG
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 2
45969: NEG
45970: PUSH
45971: LD_INT 1
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: NEG
45982: PUSH
45983: LD_INT 3
45985: NEG
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 1
45993: PUSH
45994: LD_INT 2
45996: NEG
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 3
46004: PUSH
46005: LD_INT 2
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: LD_INT 2
46014: PUSH
46015: LD_INT 3
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 2
46024: NEG
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 3
46035: NEG
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46070: LD_ADDR_VAR 0 31
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: LD_INT 1
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: LD_INT 1
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 1
46151: NEG
46152: PUSH
46153: LD_INT 2
46155: NEG
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: PUSH
46164: LD_INT 1
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 2
46184: PUSH
46185: LD_INT 1
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 2
46194: PUSH
46195: LD_INT 2
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 0
46214: PUSH
46215: LD_INT 2
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 2
46235: NEG
46236: PUSH
46237: LD_INT 1
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 2
46247: NEG
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 2
46259: NEG
46260: PUSH
46261: LD_INT 3
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 2
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 3
46282: PUSH
46283: LD_INT 1
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: LD_INT 3
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 1
46302: NEG
46303: PUSH
46304: LD_INT 2
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 3
46313: NEG
46314: PUSH
46315: LD_INT 2
46317: NEG
46318: PUSH
46319: EMPTY
46320: LIST
46321: LIST
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46348: LD_ADDR_VAR 0 32
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: LD_INT 1
46368: NEG
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: LD_INT 1
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: LD_INT 1
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: LD_INT 0
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: NEG
46430: PUSH
46431: LD_INT 2
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 0
46441: PUSH
46442: LD_INT 2
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 2
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 0
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 2
46514: NEG
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 2
46525: NEG
46526: PUSH
46527: LD_INT 1
46529: NEG
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 1
46537: NEG
46538: PUSH
46539: LD_INT 3
46541: NEG
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: LD_INT 2
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 3
46560: PUSH
46561: LD_INT 2
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 2
46570: PUSH
46571: LD_INT 3
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 2
46580: NEG
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 3
46591: NEG
46592: PUSH
46593: LD_INT 1
46595: NEG
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46626: LD_ADDR_VAR 0 33
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: LD_INT 1
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: LD_INT 2
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 1
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 2
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 2
46740: PUSH
46741: LD_INT 1
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: LD_INT 2
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: LD_INT 2
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 2
46781: NEG
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 2
46792: NEG
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 2
46804: NEG
46805: PUSH
46806: LD_INT 2
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 2
46816: NEG
46817: PUSH
46818: LD_INT 3
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 2
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 3
46839: PUSH
46840: LD_INT 1
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 3
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: NEG
46860: PUSH
46861: LD_INT 2
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 3
46870: NEG
46871: PUSH
46872: LD_INT 2
46874: NEG
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46905: LD_ADDR_VAR 0 34
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: LD_INT 1
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 1
46963: NEG
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 1
46974: NEG
46975: PUSH
46976: LD_INT 1
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 1
46986: NEG
46987: PUSH
46988: LD_INT 2
46990: NEG
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 2
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 2
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: PUSH
47031: LD_INT 2
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: LD_INT 2
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: LD_INT 1
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 2
47061: NEG
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: NEG
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 2
47084: NEG
47085: PUSH
47086: LD_INT 2
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: LD_INT 3
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: LD_INT 2
47111: NEG
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 3
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 2
47129: PUSH
47130: LD_INT 3
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: LD_INT 1
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 3
47150: NEG
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47185: LD_ADDR_VAR 0 35
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: LD_INT 0
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: LD_INT 1
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 2
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 2
47276: NEG
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47297: LD_ADDR_VAR 0 36
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: LD_INT 2
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47409: LD_ADDR_VAR 0 37
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: LD_INT 1
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 1
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47521: LD_ADDR_VAR 0 38
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: LD_INT 1
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 2
47602: PUSH
47603: LD_INT 1
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 2
47612: NEG
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47633: LD_ADDR_VAR 0 39
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 1
47702: NEG
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: LD_INT 2
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47745: LD_ADDR_VAR 0 40
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47857: LD_ADDR_VAR 0 41
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 1
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 2
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 2
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 2
47981: PUSH
47982: LD_INT 2
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: LD_INT 2
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: LD_INT 1
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 2
48012: NEG
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 2
48023: NEG
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 2
48035: NEG
48036: PUSH
48037: LD_INT 2
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 2
48047: NEG
48048: PUSH
48049: LD_INT 3
48051: NEG
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 2
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 3
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 3
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 3
48090: PUSH
48091: LD_INT 2
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 3
48100: PUSH
48101: LD_INT 3
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 2
48110: PUSH
48111: LD_INT 3
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 2
48120: NEG
48121: PUSH
48122: LD_INT 1
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 3
48131: NEG
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 3
48142: NEG
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 3
48154: NEG
48155: PUSH
48156: LD_INT 2
48158: NEG
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 3
48166: NEG
48167: PUSH
48168: LD_INT 3
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48207: LD_ADDR_VAR 0 42
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 1
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: NEG
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 1
48288: NEG
48289: PUSH
48290: LD_INT 2
48292: NEG
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: LD_INT 2
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 2
48322: PUSH
48323: LD_INT 1
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: LD_INT 2
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 0
48352: PUSH
48353: LD_INT 2
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: LD_INT 1
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 2
48373: NEG
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: NEG
48386: PUSH
48387: LD_INT 2
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: LD_INT 3
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 1
48409: NEG
48410: PUSH
48411: LD_INT 3
48413: NEG
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: LD_INT 3
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: LD_INT 2
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 3
48443: PUSH
48444: LD_INT 2
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 3
48453: PUSH
48454: LD_INT 3
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 2
48463: PUSH
48464: LD_INT 3
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: LD_INT 3
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: LD_INT 3
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 1
48493: NEG
48494: PUSH
48495: LD_INT 2
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 3
48504: NEG
48505: PUSH
48506: LD_INT 2
48508: NEG
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 3
48516: NEG
48517: PUSH
48518: LD_INT 3
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48557: LD_ADDR_VAR 0 43
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: LD_INT 1
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: LD_INT 0
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: NEG
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: LD_INT 2
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 2
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: LD_INT 1
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: LD_INT 2
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 2
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 2
48723: NEG
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 2
48734: NEG
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: LD_INT 3
48750: NEG
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: LD_INT 3
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: LD_INT 2
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 2
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 3
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 3
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: LD_INT 3
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: LD_INT 3
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: LD_INT 2
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 2
48842: NEG
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 3
48853: NEG
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 3
48864: NEG
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48905: LD_ADDR_VAR 0 44
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 1
48943: PUSH
48944: LD_INT 1
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: LD_INT 1
48956: PUSH
48957: EMPTY
48958: LIST
48959: LIST
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: LD_INT 0
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: LD_INT 1
48978: NEG
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 1
48986: NEG
48987: PUSH
48988: LD_INT 2
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 2
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 2
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 2
49029: PUSH
49030: LD_INT 2
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: PUSH
49040: LD_INT 2
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 2
49060: NEG
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 2
49071: NEG
49072: PUSH
49073: LD_INT 1
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 2
49083: NEG
49084: PUSH
49085: LD_INT 2
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 2
49095: NEG
49096: PUSH
49097: LD_INT 3
49099: NEG
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 2
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 3
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 3
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 3
49138: PUSH
49139: LD_INT 2
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 3
49148: PUSH
49149: LD_INT 3
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: LD_INT 3
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 2
49168: NEG
49169: PUSH
49170: LD_INT 1
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 3
49179: NEG
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 3
49190: NEG
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 3
49202: NEG
49203: PUSH
49204: LD_INT 2
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 3
49214: NEG
49215: PUSH
49216: LD_INT 3
49218: NEG
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49255: LD_ADDR_VAR 0 45
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: LD_INT 1
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 0
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 1
49313: NEG
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 2
49370: PUSH
49371: LD_INT 1
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: LD_INT 2
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: LD_INT 1
49390: PUSH
49391: LD_INT 2
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 0
49400: PUSH
49401: LD_INT 2
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: NEG
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 2
49421: NEG
49422: PUSH
49423: LD_INT 1
49425: NEG
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 2
49433: NEG
49434: PUSH
49435: LD_INT 2
49437: NEG
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: LD_INT 3
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 1
49457: NEG
49458: PUSH
49459: LD_INT 3
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: LD_INT 3
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: LD_INT 2
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 3
49491: PUSH
49492: LD_INT 2
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 3
49501: PUSH
49502: LD_INT 3
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: LD_INT 3
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: LD_INT 3
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 3
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: LD_INT 2
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 3
49552: NEG
49553: PUSH
49554: LD_INT 2
49556: NEG
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 3
49564: NEG
49565: PUSH
49566: LD_INT 3
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49605: LD_ADDR_VAR 0 46
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 0
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: LD_INT 0
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: NEG
49687: PUSH
49688: LD_INT 2
49690: NEG
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 0
49698: PUSH
49699: LD_INT 2
49701: NEG
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 2
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: LD_INT 2
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: LD_INT 2
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 1
49760: NEG
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 2
49771: NEG
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 2
49782: NEG
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: LD_INT 3
49798: NEG
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 0
49806: PUSH
49807: LD_INT 3
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: LD_INT 2
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 3
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 3
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: LD_INT 3
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: LD_INT 3
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 1
49879: NEG
49880: PUSH
49881: LD_INT 2
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 2
49890: NEG
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 3
49901: NEG
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 3
49912: NEG
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49953: LD_ADDR_VAR 0 47
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: LD_INT 0
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: LD_INT 1
49973: NEG
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 1
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: LD_INT 1
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 2
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: LD_INT 2
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 2
50068: NEG
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 2
50080: NEG
50081: PUSH
50082: LD_INT 2
50084: NEG
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50104: LD_ADDR_VAR 0 48
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: LD_INT 0
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: LD_INT 1
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: LD_INT 1
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: NEG
50186: PUSH
50187: LD_INT 2
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: LD_INT 2
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 2
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 2
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50251: LD_ADDR_VAR 0 49
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 0
50268: PUSH
50269: LD_INT 1
50271: NEG
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 0
50299: PUSH
50300: LD_INT 1
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 1
50320: NEG
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 2
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 2
50363: PUSH
50364: LD_INT 2
50366: PUSH
50367: EMPTY
50368: LIST
50369: LIST
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: LD_INT 2
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50395: LD_ADDR_VAR 0 50
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: LD_INT 1
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 0
50443: PUSH
50444: LD_INT 1
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: NEG
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 2
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 2
50486: PUSH
50487: LD_INT 2
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: LD_INT 2
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: LD_INT 2
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50539: LD_ADDR_VAR 0 51
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: LD_INT 1
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: LD_INT 2
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 0
50630: PUSH
50631: LD_INT 2
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 2
50651: NEG
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 2
50662: NEG
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50686: LD_ADDR_VAR 0 52
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: NEG
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: LD_INT 2
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: LD_INT 1
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: LD_INT 0
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 2
50801: NEG
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 2
50813: NEG
50814: PUSH
50815: LD_INT 2
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50837: LD_ADDR_VAR 0 53
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: LD_INT 0
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 0
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: PUSH
50897: LD_INT 0
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: LD_INT 2
50922: NEG
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 2
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 2
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 2
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: PUSH
50983: LD_INT 2
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: LD_INT 2
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: NEG
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 2
51013: NEG
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 2
51024: NEG
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 2
51036: NEG
51037: PUSH
51038: LD_INT 2
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51067: LD_ADDR_VAR 0 54
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: LD_INT 1
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 1
51125: NEG
51126: PUSH
51127: LD_INT 0
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 1
51136: NEG
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: LD_INT 2
51152: NEG
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 0
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 2
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 2
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 2
51202: PUSH
51203: LD_INT 2
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 1
51212: PUSH
51213: LD_INT 2
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 0
51222: PUSH
51223: LD_INT 2
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 2
51243: NEG
51244: PUSH
51245: LD_INT 0
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 2
51254: NEG
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 2
51266: NEG
51267: PUSH
51268: LD_INT 2
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51297: LD_ADDR_VAR 0 55
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: LD_INT 0
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: LD_INT 2
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 0
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 2
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 2
51422: PUSH
51423: LD_INT 1
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 2
51432: PUSH
51433: LD_INT 2
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: LD_INT 2
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: LD_INT 2
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 2
51473: NEG
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 2
51484: NEG
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 2
51496: NEG
51497: PUSH
51498: LD_INT 2
51500: NEG
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51527: LD_ADDR_VAR 0 56
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: LD_INT 0
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: LD_INT 2
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 0
51620: PUSH
51621: LD_INT 2
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 2
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 2
51652: PUSH
51653: LD_INT 1
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: LD_INT 2
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 1
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 0
51682: PUSH
51683: LD_INT 2
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 1
51692: NEG
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 2
51703: NEG
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 2
51726: NEG
51727: PUSH
51728: LD_INT 2
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51757: LD_ADDR_VAR 0 57
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: NEG
51839: PUSH
51840: LD_INT 2
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: LD_INT 1
51864: NEG
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 2
51872: PUSH
51873: LD_INT 0
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 2
51882: PUSH
51883: LD_INT 1
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 2
51892: PUSH
51893: LD_INT 2
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: LD_INT 2
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: LD_INT 2
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 2
51933: NEG
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 2
51944: NEG
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: PUSH
51954: LD_INT 2
51956: NEG
51957: PUSH
51958: LD_INT 2
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51987: LD_ADDR_VAR 0 58
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: LD_INT 0
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 1
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: LD_INT 1
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: LD_INT 2
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: LD_INT 2
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 2
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 2
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 2
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 0
52142: PUSH
52143: LD_INT 2
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 2
52163: NEG
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 2
52174: NEG
52175: PUSH
52176: LD_INT 1
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 2
52186: NEG
52187: PUSH
52188: LD_INT 2
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52217: LD_ADDR_VAR 0 59
52221: PUSH
52222: LD_INT 0
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 1
52275: NEG
52276: PUSH
52277: LD_INT 0
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52305: LD_ADDR_VAR 0 60
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: LD_INT 1
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52393: LD_ADDR_VAR 0 61
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: NEG
52452: PUSH
52453: LD_INT 0
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: LD_INT 1
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52481: LD_ADDR_VAR 0 62
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: PUSH
52510: LD_INT 0
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 0
52529: PUSH
52530: LD_INT 1
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52569: LD_ADDR_VAR 0 63
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52657: LD_ADDR_VAR 0 64
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: LD_INT 1
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: LD_INT 0
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: LD_INT 1
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: NEG
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: ST_TO_ADDR
// end ; 1 :
52745: GO 58642
52747: LD_INT 1
52749: DOUBLE
52750: EQUAL
52751: IFTRUE 52755
52753: GO 55378
52755: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52756: LD_ADDR_VAR 0 11
52760: PUSH
52761: LD_INT 1
52763: NEG
52764: PUSH
52765: LD_INT 3
52767: NEG
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: LD_INT 3
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: LD_INT 2
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: LIST
52799: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52800: LD_ADDR_VAR 0 12
52804: PUSH
52805: LD_INT 2
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 3
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 3
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: LIST
52840: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52841: LD_ADDR_VAR 0 13
52845: PUSH
52846: LD_INT 3
52848: PUSH
52849: LD_INT 2
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 3
52858: PUSH
52859: LD_INT 3
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 2
52868: PUSH
52869: LD_INT 3
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: LIST
52880: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52881: LD_ADDR_VAR 0 14
52885: PUSH
52886: LD_INT 1
52888: PUSH
52889: LD_INT 3
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: LD_INT 3
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 1
52908: NEG
52909: PUSH
52910: LD_INT 2
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: LIST
52921: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52922: LD_ADDR_VAR 0 15
52926: PUSH
52927: LD_INT 2
52929: NEG
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 3
52940: NEG
52941: PUSH
52942: LD_INT 0
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 3
52951: NEG
52952: PUSH
52953: LD_INT 1
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: LIST
52965: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52966: LD_ADDR_VAR 0 16
52970: PUSH
52971: LD_INT 2
52973: NEG
52974: PUSH
52975: LD_INT 3
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 3
52985: NEG
52986: PUSH
52987: LD_INT 2
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 3
52997: NEG
52998: PUSH
52999: LD_INT 3
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: LIST
53011: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53012: LD_ADDR_VAR 0 17
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: LD_INT 3
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: LD_INT 3
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: LD_INT 2
53045: NEG
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: LIST
53055: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53056: LD_ADDR_VAR 0 18
53060: PUSH
53061: LD_INT 2
53063: PUSH
53064: LD_INT 1
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 3
53074: PUSH
53075: LD_INT 0
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 3
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: LIST
53096: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53097: LD_ADDR_VAR 0 19
53101: PUSH
53102: LD_INT 3
53104: PUSH
53105: LD_INT 2
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 3
53114: PUSH
53115: LD_INT 3
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: PUSH
53122: LD_INT 2
53124: PUSH
53125: LD_INT 3
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: LIST
53136: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53137: LD_ADDR_VAR 0 20
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: LD_INT 3
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: LD_INT 3
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 1
53164: NEG
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: LIST
53177: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53178: LD_ADDR_VAR 0 21
53182: PUSH
53183: LD_INT 2
53185: NEG
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 3
53196: NEG
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 3
53207: NEG
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: LIST
53221: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53222: LD_ADDR_VAR 0 22
53226: PUSH
53227: LD_INT 2
53229: NEG
53230: PUSH
53231: LD_INT 3
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 3
53241: NEG
53242: PUSH
53243: LD_INT 2
53245: NEG
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 3
53253: NEG
53254: PUSH
53255: LD_INT 3
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: LIST
53267: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53268: LD_ADDR_VAR 0 23
53272: PUSH
53273: LD_INT 0
53275: PUSH
53276: LD_INT 3
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: NEG
53287: PUSH
53288: LD_INT 4
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: LD_INT 3
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: LIST
53311: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53312: LD_ADDR_VAR 0 24
53316: PUSH
53317: LD_INT 3
53319: PUSH
53320: LD_INT 0
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 3
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 4
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: LIST
53352: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53353: LD_ADDR_VAR 0 25
53357: PUSH
53358: LD_INT 3
53360: PUSH
53361: LD_INT 3
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 4
53370: PUSH
53371: LD_INT 3
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 3
53380: PUSH
53381: LD_INT 4
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: LIST
53392: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53393: LD_ADDR_VAR 0 26
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: LD_INT 3
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: LD_INT 4
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: LD_INT 3
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: LIST
53433: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53434: LD_ADDR_VAR 0 27
53438: PUSH
53439: LD_INT 3
53441: NEG
53442: PUSH
53443: LD_INT 0
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 3
53452: NEG
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 4
53463: NEG
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: EMPTY
53474: LIST
53475: LIST
53476: LIST
53477: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53478: LD_ADDR_VAR 0 28
53482: PUSH
53483: LD_INT 3
53485: NEG
53486: PUSH
53487: LD_INT 3
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 3
53497: NEG
53498: PUSH
53499: LD_INT 4
53501: NEG
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 4
53509: NEG
53510: PUSH
53511: LD_INT 3
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: LIST
53523: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53524: LD_ADDR_VAR 0 29
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: LD_INT 3
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: LD_INT 3
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: PUSH
53555: LD_INT 2
53557: NEG
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 1
53565: NEG
53566: PUSH
53567: LD_INT 4
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: LD_INT 4
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: LD_INT 3
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 1
53599: NEG
53600: PUSH
53601: LD_INT 5
53603: NEG
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: LD_INT 5
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: LD_INT 4
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: NEG
53634: PUSH
53635: LD_INT 6
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: LD_INT 6
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: LD_INT 5
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53679: LD_ADDR_VAR 0 30
53683: PUSH
53684: LD_INT 2
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 3
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 3
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 3
53717: PUSH
53718: LD_INT 1
53720: NEG
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 4
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 4
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 4
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 5
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 5
53769: PUSH
53770: LD_INT 1
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 5
53779: PUSH
53780: LD_INT 1
53782: NEG
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 6
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 6
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53822: LD_ADDR_VAR 0 31
53826: PUSH
53827: LD_INT 3
53829: PUSH
53830: LD_INT 2
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 3
53839: PUSH
53840: LD_INT 3
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 2
53849: PUSH
53850: LD_INT 3
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 4
53859: PUSH
53860: LD_INT 3
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 4
53869: PUSH
53870: LD_INT 4
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 3
53879: PUSH
53880: LD_INT 4
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 5
53889: PUSH
53890: LD_INT 4
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 5
53899: PUSH
53900: LD_INT 5
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 4
53909: PUSH
53910: LD_INT 5
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 6
53919: PUSH
53920: LD_INT 5
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 6
53929: PUSH
53930: LD_INT 6
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 5
53939: PUSH
53940: LD_INT 6
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53961: LD_ADDR_VAR 0 32
53965: PUSH
53966: LD_INT 1
53968: PUSH
53969: LD_INT 3
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 0
53978: PUSH
53979: LD_INT 3
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: LD_INT 4
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: LD_INT 4
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: LD_INT 3
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: LD_INT 5
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: LD_INT 5
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: LD_INT 4
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: PUSH
54062: LD_INT 6
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: LD_INT 6
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: LD_INT 5
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54104: LD_ADDR_VAR 0 33
54108: PUSH
54109: LD_INT 2
54111: NEG
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 3
54122: NEG
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 3
54133: NEG
54134: PUSH
54135: LD_INT 1
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 3
54145: NEG
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 4
54156: NEG
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 4
54167: NEG
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 4
54179: NEG
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 5
54190: NEG
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 5
54201: NEG
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 5
54213: NEG
54214: PUSH
54215: LD_INT 1
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 6
54224: NEG
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 6
54235: NEG
54236: PUSH
54237: LD_INT 1
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54259: LD_ADDR_VAR 0 34
54263: PUSH
54264: LD_INT 2
54266: NEG
54267: PUSH
54268: LD_INT 3
54270: NEG
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 3
54278: NEG
54279: PUSH
54280: LD_INT 2
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 3
54290: NEG
54291: PUSH
54292: LD_INT 3
54294: NEG
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 3
54302: NEG
54303: PUSH
54304: LD_INT 4
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 4
54314: NEG
54315: PUSH
54316: LD_INT 3
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 4
54326: NEG
54327: PUSH
54328: LD_INT 4
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 4
54338: NEG
54339: PUSH
54340: LD_INT 5
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 5
54350: NEG
54351: PUSH
54352: LD_INT 4
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 5
54362: NEG
54363: PUSH
54364: LD_INT 5
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 5
54374: NEG
54375: PUSH
54376: LD_INT 6
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 6
54386: NEG
54387: PUSH
54388: LD_INT 5
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 6
54398: NEG
54399: PUSH
54400: LD_INT 6
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54422: LD_ADDR_VAR 0 41
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: LD_INT 2
54432: NEG
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: NEG
54441: PUSH
54442: LD_INT 3
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 1
54452: PUSH
54453: LD_INT 2
54455: NEG
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: LIST
54465: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54466: LD_ADDR_VAR 0 42
54470: PUSH
54471: LD_INT 2
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 2
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 3
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: LIST
54506: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54507: LD_ADDR_VAR 0 43
54511: PUSH
54512: LD_INT 2
54514: PUSH
54515: LD_INT 2
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 3
54524: PUSH
54525: LD_INT 2
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: LD_INT 3
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: LIST
54546: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54547: LD_ADDR_VAR 0 44
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: LD_INT 2
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: LD_INT 3
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: NEG
54575: PUSH
54576: LD_INT 2
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: LIST
54587: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54588: LD_ADDR_VAR 0 45
54592: PUSH
54593: LD_INT 2
54595: NEG
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 2
54606: NEG
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 3
54617: NEG
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: LIST
54631: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54632: LD_ADDR_VAR 0 46
54636: PUSH
54637: LD_INT 2
54639: NEG
54640: PUSH
54641: LD_INT 2
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 2
54651: NEG
54652: PUSH
54653: LD_INT 3
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 3
54663: NEG
54664: PUSH
54665: LD_INT 2
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: LIST
54677: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54678: LD_ADDR_VAR 0 47
54682: PUSH
54683: LD_INT 2
54685: NEG
54686: PUSH
54687: LD_INT 3
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 1
54697: NEG
54698: PUSH
54699: LD_INT 3
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54711: LD_ADDR_VAR 0 48
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 2
54729: PUSH
54730: LD_INT 1
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54742: LD_ADDR_VAR 0 49
54746: PUSH
54747: LD_INT 3
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 3
54759: PUSH
54760: LD_INT 2
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54771: LD_ADDR_VAR 0 50
54775: PUSH
54776: LD_INT 2
54778: PUSH
54779: LD_INT 3
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: LD_INT 3
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54800: LD_ADDR_VAR 0 51
54804: PUSH
54805: LD_INT 1
54807: NEG
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 2
54818: NEG
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54831: LD_ADDR_VAR 0 52
54835: PUSH
54836: LD_INT 3
54838: NEG
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 3
54850: NEG
54851: PUSH
54852: LD_INT 2
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54864: LD_ADDR_VAR 0 53
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: LD_INT 3
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: LD_INT 3
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: LD_INT 2
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: LIST
54907: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54908: LD_ADDR_VAR 0 54
54912: PUSH
54913: LD_INT 2
54915: PUSH
54916: LD_INT 1
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 3
54926: PUSH
54927: LD_INT 0
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 3
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: LIST
54948: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54949: LD_ADDR_VAR 0 55
54953: PUSH
54954: LD_INT 3
54956: PUSH
54957: LD_INT 2
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 3
54966: PUSH
54967: LD_INT 3
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 2
54976: PUSH
54977: LD_INT 3
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: LIST
54988: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54989: LD_ADDR_VAR 0 56
54993: PUSH
54994: LD_INT 1
54996: PUSH
54997: LD_INT 3
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: LD_INT 3
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: NEG
55017: PUSH
55018: LD_INT 2
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: LIST
55029: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55030: LD_ADDR_VAR 0 57
55034: PUSH
55035: LD_INT 2
55037: NEG
55038: PUSH
55039: LD_INT 1
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 3
55048: NEG
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 3
55059: NEG
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: LIST
55073: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55074: LD_ADDR_VAR 0 58
55078: PUSH
55079: LD_INT 2
55081: NEG
55082: PUSH
55083: LD_INT 3
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 3
55093: NEG
55094: PUSH
55095: LD_INT 2
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 3
55105: NEG
55106: PUSH
55107: LD_INT 3
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: LIST
55119: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55120: LD_ADDR_VAR 0 59
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: LD_INT 2
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: LD_INT 2
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: LD_INT 1
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: LIST
55163: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55164: LD_ADDR_VAR 0 60
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: LD_INT 1
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: LD_INT 0
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 2
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: LIST
55204: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55205: LD_ADDR_VAR 0 61
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: LD_INT 1
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: LD_INT 2
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: LIST
55244: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55245: LD_ADDR_VAR 0 62
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: LD_INT 2
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: LD_INT 2
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: LIST
55285: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55286: LD_ADDR_VAR 0 63
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: LD_INT 1
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 2
55304: NEG
55305: PUSH
55306: LD_INT 0
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 2
55315: NEG
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: LIST
55329: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55330: LD_ADDR_VAR 0 64
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: LD_INT 2
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 2
55349: NEG
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 2
55361: NEG
55362: PUSH
55363: LD_INT 2
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: LIST
55375: ST_TO_ADDR
// end ; 2 :
55376: GO 58642
55378: LD_INT 2
55380: DOUBLE
55381: EQUAL
55382: IFTRUE 55386
55384: GO 58641
55386: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55387: LD_ADDR_VAR 0 29
55391: PUSH
55392: LD_INT 4
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 4
55404: PUSH
55405: LD_INT 1
55407: NEG
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 5
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 5
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 4
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 3
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 3
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 3
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 5
55477: PUSH
55478: LD_INT 2
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 3
55487: PUSH
55488: LD_INT 3
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 3
55497: PUSH
55498: LD_INT 2
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 4
55507: PUSH
55508: LD_INT 3
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 4
55517: PUSH
55518: LD_INT 4
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 3
55527: PUSH
55528: LD_INT 4
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: LD_INT 3
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: PUSH
55548: LD_INT 2
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 4
55557: PUSH
55558: LD_INT 2
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 2
55567: PUSH
55568: LD_INT 4
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: LD_INT 4
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: LD_INT 3
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: LD_INT 4
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: LD_INT 5
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: LD_INT 5
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: LD_INT 4
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: LD_INT 3
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 2
55649: PUSH
55650: LD_INT 5
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 2
55659: NEG
55660: PUSH
55661: LD_INT 3
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 3
55670: NEG
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 3
55681: NEG
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 2
55693: NEG
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 2
55704: NEG
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 3
55715: NEG
55716: PUSH
55717: LD_INT 1
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 4
55726: NEG
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 4
55737: NEG
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 4
55749: NEG
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 2
55761: NEG
55762: PUSH
55763: LD_INT 2
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 4
55772: NEG
55773: PUSH
55774: LD_INT 4
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 4
55784: NEG
55785: PUSH
55786: LD_INT 5
55788: NEG
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 3
55796: NEG
55797: PUSH
55798: LD_INT 4
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 3
55808: NEG
55809: PUSH
55810: LD_INT 3
55812: NEG
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 4
55820: NEG
55821: PUSH
55822: LD_INT 3
55824: NEG
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 5
55832: NEG
55833: PUSH
55834: LD_INT 4
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 5
55844: NEG
55845: PUSH
55846: LD_INT 5
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 3
55856: NEG
55857: PUSH
55858: LD_INT 5
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 5
55868: NEG
55869: PUSH
55870: LD_INT 3
55872: NEG
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55925: LD_ADDR_VAR 0 30
55929: PUSH
55930: LD_INT 4
55932: PUSH
55933: LD_INT 4
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 4
55942: PUSH
55943: LD_INT 3
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 5
55952: PUSH
55953: LD_INT 4
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 5
55962: PUSH
55963: LD_INT 5
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 4
55972: PUSH
55973: LD_INT 5
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 3
55982: PUSH
55983: LD_INT 4
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 3
55992: PUSH
55993: LD_INT 3
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 5
56002: PUSH
56003: LD_INT 3
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 3
56012: PUSH
56013: LD_INT 5
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: LD_INT 3
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: LD_INT 2
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: LD_INT 3
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 4
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: LD_INT 4
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: LD_INT 3
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: LD_INT 2
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 2
56094: PUSH
56095: LD_INT 4
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 2
56104: NEG
56105: PUSH
56106: LD_INT 2
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 4
56115: NEG
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 4
56126: NEG
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 3
56138: NEG
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 3
56149: NEG
56150: PUSH
56151: LD_INT 1
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 4
56160: NEG
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 5
56171: NEG
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 5
56182: NEG
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 5
56194: NEG
56195: PUSH
56196: LD_INT 2
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 3
56206: NEG
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 3
56217: NEG
56218: PUSH
56219: LD_INT 3
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 3
56229: NEG
56230: PUSH
56231: LD_INT 4
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 2
56241: NEG
56242: PUSH
56243: LD_INT 3
56245: NEG
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 2
56253: NEG
56254: PUSH
56255: LD_INT 2
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 3
56265: NEG
56266: PUSH
56267: LD_INT 2
56269: NEG
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 4
56277: NEG
56278: PUSH
56279: LD_INT 3
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 4
56289: NEG
56290: PUSH
56291: LD_INT 4
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 2
56301: NEG
56302: PUSH
56303: LD_INT 4
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 4
56313: NEG
56314: PUSH
56315: LD_INT 2
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 4
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: LD_INT 5
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: LD_INT 4
56350: NEG
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: LD_INT 3
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: LD_INT 3
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: LD_INT 4
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 1
56392: NEG
56393: PUSH
56394: LD_INT 5
56396: NEG
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: LD_INT 3
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 2
56415: NEG
56416: PUSH
56417: LD_INT 5
56419: NEG
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56472: LD_ADDR_VAR 0 31
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: LD_INT 4
56482: PUSH
56483: EMPTY
56484: LIST
56485: LIST
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: LD_INT 3
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: LD_INT 4
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: LD_INT 5
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: LD_INT 5
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: NEG
56530: PUSH
56531: LD_INT 4
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: LD_INT 3
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 2
56551: PUSH
56552: LD_INT 5
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 2
56561: NEG
56562: PUSH
56563: LD_INT 3
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 3
56572: NEG
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: PUSH
56581: LD_INT 3
56583: NEG
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 2
56595: NEG
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 2
56606: NEG
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 3
56617: NEG
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 4
56628: NEG
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 4
56639: NEG
56640: PUSH
56641: LD_INT 1
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 4
56651: NEG
56652: PUSH
56653: LD_INT 2
56655: NEG
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 2
56663: NEG
56664: PUSH
56665: LD_INT 2
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 4
56674: NEG
56675: PUSH
56676: LD_INT 4
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 4
56686: NEG
56687: PUSH
56688: LD_INT 5
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 3
56698: NEG
56699: PUSH
56700: LD_INT 4
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 3
56710: NEG
56711: PUSH
56712: LD_INT 3
56714: NEG
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 4
56722: NEG
56723: PUSH
56724: LD_INT 3
56726: NEG
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 5
56734: NEG
56735: PUSH
56736: LD_INT 4
56738: NEG
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 5
56746: NEG
56747: PUSH
56748: LD_INT 5
56750: NEG
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 3
56758: NEG
56759: PUSH
56760: LD_INT 5
56762: NEG
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 5
56770: NEG
56771: PUSH
56772: LD_INT 3
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: LD_INT 3
56785: NEG
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 0
56793: PUSH
56794: LD_INT 4
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 1
56804: PUSH
56805: LD_INT 3
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: LD_INT 2
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: LD_INT 3
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: LD_INT 4
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 2
56861: PUSH
56862: LD_INT 2
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 2
56872: NEG
56873: PUSH
56874: LD_INT 4
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 4
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 4
56894: PUSH
56895: LD_INT 1
56897: NEG
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 5
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 5
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 4
56925: PUSH
56926: LD_INT 1
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 3
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 3
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 3
56956: PUSH
56957: LD_INT 2
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 5
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57022: LD_ADDR_VAR 0 32
57026: PUSH
57027: LD_INT 4
57029: NEG
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 4
57040: NEG
57041: PUSH
57042: LD_INT 1
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 3
57052: NEG
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 3
57063: NEG
57064: PUSH
57065: LD_INT 1
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 4
57074: NEG
57075: PUSH
57076: LD_INT 1
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 5
57085: NEG
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 5
57096: NEG
57097: PUSH
57098: LD_INT 1
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 5
57108: NEG
57109: PUSH
57110: LD_INT 2
57112: NEG
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 3
57120: NEG
57121: PUSH
57122: LD_INT 2
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 3
57131: NEG
57132: PUSH
57133: LD_INT 3
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 3
57143: NEG
57144: PUSH
57145: LD_INT 4
57147: NEG
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 2
57155: NEG
57156: PUSH
57157: LD_INT 3
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 2
57167: NEG
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 3
57179: NEG
57180: PUSH
57181: LD_INT 2
57183: NEG
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 4
57191: NEG
57192: PUSH
57193: LD_INT 3
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 4
57203: NEG
57204: PUSH
57205: LD_INT 4
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 2
57215: NEG
57216: PUSH
57217: LD_INT 4
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 4
57227: NEG
57228: PUSH
57229: LD_INT 2
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 0
57239: PUSH
57240: LD_INT 4
57242: NEG
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: LD_INT 5
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: LD_INT 4
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: LD_INT 3
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: LD_INT 3
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: LD_INT 4
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: NEG
57307: PUSH
57308: LD_INT 5
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 2
57318: PUSH
57319: LD_INT 3
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: LD_INT 2
57329: NEG
57330: PUSH
57331: LD_INT 5
57333: NEG
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 3
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 3
57351: PUSH
57352: LD_INT 1
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 4
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 4
57372: PUSH
57373: LD_INT 1
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 3
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 2
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 2
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: LD_INT 2
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 4
57424: PUSH
57425: LD_INT 2
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 4
57434: PUSH
57435: LD_INT 4
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 4
57444: PUSH
57445: LD_INT 3
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 5
57454: PUSH
57455: LD_INT 4
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 5
57464: PUSH
57465: LD_INT 5
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 4
57474: PUSH
57475: LD_INT 5
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 3
57484: PUSH
57485: LD_INT 4
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 3
57494: PUSH
57495: LD_INT 3
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 5
57504: PUSH
57505: LD_INT 3
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 3
57514: PUSH
57515: LD_INT 5
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57569: LD_ADDR_VAR 0 33
57573: PUSH
57574: LD_INT 4
57576: NEG
57577: PUSH
57578: LD_INT 4
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 4
57588: NEG
57589: PUSH
57590: LD_INT 5
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 3
57600: NEG
57601: PUSH
57602: LD_INT 4
57604: NEG
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 3
57612: NEG
57613: PUSH
57614: LD_INT 3
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 4
57624: NEG
57625: PUSH
57626: LD_INT 3
57628: NEG
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 5
57636: NEG
57637: PUSH
57638: LD_INT 4
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 5
57648: NEG
57649: PUSH
57650: LD_INT 5
57652: NEG
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 3
57660: NEG
57661: PUSH
57662: LD_INT 5
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 5
57672: NEG
57673: PUSH
57674: LD_INT 3
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: LD_INT 3
57687: NEG
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: LD_INT 4
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: PUSH
57707: LD_INT 3
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 1
57717: PUSH
57718: LD_INT 2
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: LD_INT 2
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 1
57739: NEG
57740: PUSH
57741: LD_INT 3
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: LD_INT 4
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 2
57763: PUSH
57764: LD_INT 2
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 2
57774: NEG
57775: PUSH
57776: LD_INT 4
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 4
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 4
57796: PUSH
57797: LD_INT 1
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 5
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 5
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 4
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 3
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 3
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 3
57858: PUSH
57859: LD_INT 2
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 5
57869: PUSH
57870: LD_INT 2
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 3
57879: PUSH
57880: LD_INT 3
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 3
57889: PUSH
57890: LD_INT 2
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 4
57899: PUSH
57900: LD_INT 3
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 4
57909: PUSH
57910: LD_INT 4
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 3
57919: PUSH
57920: LD_INT 4
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 2
57929: PUSH
57930: LD_INT 3
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 2
57939: PUSH
57940: LD_INT 2
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 4
57949: PUSH
57950: LD_INT 2
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 2
57959: PUSH
57960: LD_INT 4
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 0
57969: PUSH
57970: LD_INT 4
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: LD_INT 3
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: LD_INT 4
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: LD_INT 5
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: LD_INT 5
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 1
58019: NEG
58020: PUSH
58021: LD_INT 4
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 1
58030: NEG
58031: PUSH
58032: LD_INT 3
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 2
58041: PUSH
58042: LD_INT 5
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 2
58051: NEG
58052: PUSH
58053: LD_INT 3
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58107: LD_ADDR_VAR 0 34
58111: PUSH
58112: LD_INT 0
58114: PUSH
58115: LD_INT 4
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: LD_INT 5
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: LD_INT 4
58139: NEG
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 1
58147: PUSH
58148: LD_INT 3
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: LD_INT 3
58161: NEG
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 1
58169: NEG
58170: PUSH
58171: LD_INT 4
58173: NEG
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: LD_INT 5
58185: NEG
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 2
58193: PUSH
58194: LD_INT 3
58196: NEG
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 2
58204: NEG
58205: PUSH
58206: LD_INT 5
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 3
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 3
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 4
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 4
58247: PUSH
58248: LD_INT 1
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 3
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 2
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 2
58277: PUSH
58278: LD_INT 1
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 2
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 4
58299: PUSH
58300: LD_INT 2
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 4
58309: PUSH
58310: LD_INT 4
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 4
58319: PUSH
58320: LD_INT 3
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 5
58329: PUSH
58330: LD_INT 4
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 5
58339: PUSH
58340: LD_INT 5
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 4
58349: PUSH
58350: LD_INT 5
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 3
58359: PUSH
58360: LD_INT 4
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 3
58369: PUSH
58370: LD_INT 3
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 5
58379: PUSH
58380: LD_INT 3
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 3
58389: PUSH
58390: LD_INT 5
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: LD_INT 3
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: LD_INT 2
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: PUSH
58420: LD_INT 3
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 1
58429: PUSH
58430: LD_INT 4
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: LD_INT 4
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: NEG
58450: PUSH
58451: LD_INT 3
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: NEG
58461: PUSH
58462: LD_INT 2
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 2
58471: PUSH
58472: LD_INT 4
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 2
58481: NEG
58482: PUSH
58483: LD_INT 2
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 4
58492: NEG
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 4
58503: NEG
58504: PUSH
58505: LD_INT 1
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 3
58515: NEG
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 3
58526: NEG
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 4
58537: NEG
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 5
58548: NEG
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: PUSH
58557: LD_INT 5
58559: NEG
58560: PUSH
58561: LD_INT 1
58563: NEG
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 5
58571: NEG
58572: PUSH
58573: LD_INT 2
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 3
58583: NEG
58584: PUSH
58585: LD_INT 2
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: ST_TO_ADDR
// end ; end ;
58639: GO 58642
58641: POP
// case btype of b_depot , b_warehouse :
58642: LD_VAR 0 1
58646: PUSH
58647: LD_INT 0
58649: DOUBLE
58650: EQUAL
58651: IFTRUE 58661
58653: LD_INT 1
58655: DOUBLE
58656: EQUAL
58657: IFTRUE 58661
58659: GO 58862
58661: POP
// case nation of nation_american :
58662: LD_VAR 0 5
58666: PUSH
58667: LD_INT 1
58669: DOUBLE
58670: EQUAL
58671: IFTRUE 58675
58673: GO 58731
58675: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58676: LD_ADDR_VAR 0 9
58680: PUSH
58681: LD_VAR 0 11
58685: PUSH
58686: LD_VAR 0 12
58690: PUSH
58691: LD_VAR 0 13
58695: PUSH
58696: LD_VAR 0 14
58700: PUSH
58701: LD_VAR 0 15
58705: PUSH
58706: LD_VAR 0 16
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: PUSH
58719: LD_VAR 0 4
58723: PUSH
58724: LD_INT 1
58726: PLUS
58727: ARRAY
58728: ST_TO_ADDR
58729: GO 58860
58731: LD_INT 2
58733: DOUBLE
58734: EQUAL
58735: IFTRUE 58739
58737: GO 58795
58739: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58740: LD_ADDR_VAR 0 9
58744: PUSH
58745: LD_VAR 0 17
58749: PUSH
58750: LD_VAR 0 18
58754: PUSH
58755: LD_VAR 0 19
58759: PUSH
58760: LD_VAR 0 20
58764: PUSH
58765: LD_VAR 0 21
58769: PUSH
58770: LD_VAR 0 22
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: PUSH
58783: LD_VAR 0 4
58787: PUSH
58788: LD_INT 1
58790: PLUS
58791: ARRAY
58792: ST_TO_ADDR
58793: GO 58860
58795: LD_INT 3
58797: DOUBLE
58798: EQUAL
58799: IFTRUE 58803
58801: GO 58859
58803: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58804: LD_ADDR_VAR 0 9
58808: PUSH
58809: LD_VAR 0 23
58813: PUSH
58814: LD_VAR 0 24
58818: PUSH
58819: LD_VAR 0 25
58823: PUSH
58824: LD_VAR 0 26
58828: PUSH
58829: LD_VAR 0 27
58833: PUSH
58834: LD_VAR 0 28
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: PUSH
58847: LD_VAR 0 4
58851: PUSH
58852: LD_INT 1
58854: PLUS
58855: ARRAY
58856: ST_TO_ADDR
58857: GO 58860
58859: POP
58860: GO 59415
58862: LD_INT 2
58864: DOUBLE
58865: EQUAL
58866: IFTRUE 58876
58868: LD_INT 3
58870: DOUBLE
58871: EQUAL
58872: IFTRUE 58876
58874: GO 58932
58876: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58877: LD_ADDR_VAR 0 9
58881: PUSH
58882: LD_VAR 0 29
58886: PUSH
58887: LD_VAR 0 30
58891: PUSH
58892: LD_VAR 0 31
58896: PUSH
58897: LD_VAR 0 32
58901: PUSH
58902: LD_VAR 0 33
58906: PUSH
58907: LD_VAR 0 34
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: PUSH
58920: LD_VAR 0 4
58924: PUSH
58925: LD_INT 1
58927: PLUS
58928: ARRAY
58929: ST_TO_ADDR
58930: GO 59415
58932: LD_INT 16
58934: DOUBLE
58935: EQUAL
58936: IFTRUE 58994
58938: LD_INT 17
58940: DOUBLE
58941: EQUAL
58942: IFTRUE 58994
58944: LD_INT 18
58946: DOUBLE
58947: EQUAL
58948: IFTRUE 58994
58950: LD_INT 19
58952: DOUBLE
58953: EQUAL
58954: IFTRUE 58994
58956: LD_INT 22
58958: DOUBLE
58959: EQUAL
58960: IFTRUE 58994
58962: LD_INT 20
58964: DOUBLE
58965: EQUAL
58966: IFTRUE 58994
58968: LD_INT 21
58970: DOUBLE
58971: EQUAL
58972: IFTRUE 58994
58974: LD_INT 23
58976: DOUBLE
58977: EQUAL
58978: IFTRUE 58994
58980: LD_INT 24
58982: DOUBLE
58983: EQUAL
58984: IFTRUE 58994
58986: LD_INT 25
58988: DOUBLE
58989: EQUAL
58990: IFTRUE 58994
58992: GO 59050
58994: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58995: LD_ADDR_VAR 0 9
58999: PUSH
59000: LD_VAR 0 35
59004: PUSH
59005: LD_VAR 0 36
59009: PUSH
59010: LD_VAR 0 37
59014: PUSH
59015: LD_VAR 0 38
59019: PUSH
59020: LD_VAR 0 39
59024: PUSH
59025: LD_VAR 0 40
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: PUSH
59038: LD_VAR 0 4
59042: PUSH
59043: LD_INT 1
59045: PLUS
59046: ARRAY
59047: ST_TO_ADDR
59048: GO 59415
59050: LD_INT 6
59052: DOUBLE
59053: EQUAL
59054: IFTRUE 59106
59056: LD_INT 7
59058: DOUBLE
59059: EQUAL
59060: IFTRUE 59106
59062: LD_INT 8
59064: DOUBLE
59065: EQUAL
59066: IFTRUE 59106
59068: LD_INT 13
59070: DOUBLE
59071: EQUAL
59072: IFTRUE 59106
59074: LD_INT 12
59076: DOUBLE
59077: EQUAL
59078: IFTRUE 59106
59080: LD_INT 15
59082: DOUBLE
59083: EQUAL
59084: IFTRUE 59106
59086: LD_INT 11
59088: DOUBLE
59089: EQUAL
59090: IFTRUE 59106
59092: LD_INT 14
59094: DOUBLE
59095: EQUAL
59096: IFTRUE 59106
59098: LD_INT 10
59100: DOUBLE
59101: EQUAL
59102: IFTRUE 59106
59104: GO 59162
59106: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59107: LD_ADDR_VAR 0 9
59111: PUSH
59112: LD_VAR 0 41
59116: PUSH
59117: LD_VAR 0 42
59121: PUSH
59122: LD_VAR 0 43
59126: PUSH
59127: LD_VAR 0 44
59131: PUSH
59132: LD_VAR 0 45
59136: PUSH
59137: LD_VAR 0 46
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: PUSH
59150: LD_VAR 0 4
59154: PUSH
59155: LD_INT 1
59157: PLUS
59158: ARRAY
59159: ST_TO_ADDR
59160: GO 59415
59162: LD_INT 36
59164: DOUBLE
59165: EQUAL
59166: IFTRUE 59170
59168: GO 59226
59170: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59171: LD_ADDR_VAR 0 9
59175: PUSH
59176: LD_VAR 0 47
59180: PUSH
59181: LD_VAR 0 48
59185: PUSH
59186: LD_VAR 0 49
59190: PUSH
59191: LD_VAR 0 50
59195: PUSH
59196: LD_VAR 0 51
59200: PUSH
59201: LD_VAR 0 52
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: PUSH
59214: LD_VAR 0 4
59218: PUSH
59219: LD_INT 1
59221: PLUS
59222: ARRAY
59223: ST_TO_ADDR
59224: GO 59415
59226: LD_INT 4
59228: DOUBLE
59229: EQUAL
59230: IFTRUE 59252
59232: LD_INT 5
59234: DOUBLE
59235: EQUAL
59236: IFTRUE 59252
59238: LD_INT 34
59240: DOUBLE
59241: EQUAL
59242: IFTRUE 59252
59244: LD_INT 37
59246: DOUBLE
59247: EQUAL
59248: IFTRUE 59252
59250: GO 59308
59252: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59253: LD_ADDR_VAR 0 9
59257: PUSH
59258: LD_VAR 0 53
59262: PUSH
59263: LD_VAR 0 54
59267: PUSH
59268: LD_VAR 0 55
59272: PUSH
59273: LD_VAR 0 56
59277: PUSH
59278: LD_VAR 0 57
59282: PUSH
59283: LD_VAR 0 58
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: PUSH
59296: LD_VAR 0 4
59300: PUSH
59301: LD_INT 1
59303: PLUS
59304: ARRAY
59305: ST_TO_ADDR
59306: GO 59415
59308: LD_INT 31
59310: DOUBLE
59311: EQUAL
59312: IFTRUE 59358
59314: LD_INT 32
59316: DOUBLE
59317: EQUAL
59318: IFTRUE 59358
59320: LD_INT 33
59322: DOUBLE
59323: EQUAL
59324: IFTRUE 59358
59326: LD_INT 27
59328: DOUBLE
59329: EQUAL
59330: IFTRUE 59358
59332: LD_INT 26
59334: DOUBLE
59335: EQUAL
59336: IFTRUE 59358
59338: LD_INT 28
59340: DOUBLE
59341: EQUAL
59342: IFTRUE 59358
59344: LD_INT 29
59346: DOUBLE
59347: EQUAL
59348: IFTRUE 59358
59350: LD_INT 30
59352: DOUBLE
59353: EQUAL
59354: IFTRUE 59358
59356: GO 59414
59358: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59359: LD_ADDR_VAR 0 9
59363: PUSH
59364: LD_VAR 0 59
59368: PUSH
59369: LD_VAR 0 60
59373: PUSH
59374: LD_VAR 0 61
59378: PUSH
59379: LD_VAR 0 62
59383: PUSH
59384: LD_VAR 0 63
59388: PUSH
59389: LD_VAR 0 64
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: PUSH
59402: LD_VAR 0 4
59406: PUSH
59407: LD_INT 1
59409: PLUS
59410: ARRAY
59411: ST_TO_ADDR
59412: GO 59415
59414: POP
// temp_list2 = [ ] ;
59415: LD_ADDR_VAR 0 10
59419: PUSH
59420: EMPTY
59421: ST_TO_ADDR
// for i in temp_list do
59422: LD_ADDR_VAR 0 8
59426: PUSH
59427: LD_VAR 0 9
59431: PUSH
59432: FOR_IN
59433: IFFALSE 59485
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59435: LD_ADDR_VAR 0 10
59439: PUSH
59440: LD_VAR 0 10
59444: PUSH
59445: LD_VAR 0 8
59449: PUSH
59450: LD_INT 1
59452: ARRAY
59453: PUSH
59454: LD_VAR 0 2
59458: PLUS
59459: PUSH
59460: LD_VAR 0 8
59464: PUSH
59465: LD_INT 2
59467: ARRAY
59468: PUSH
59469: LD_VAR 0 3
59473: PLUS
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: EMPTY
59480: LIST
59481: ADD
59482: ST_TO_ADDR
59483: GO 59432
59485: POP
59486: POP
// result = temp_list2 ;
59487: LD_ADDR_VAR 0 7
59491: PUSH
59492: LD_VAR 0 10
59496: ST_TO_ADDR
// end ;
59497: LD_VAR 0 7
59501: RET
// export function EnemyInRange ( unit , dist ) ; begin
59502: LD_INT 0
59504: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59505: LD_ADDR_VAR 0 3
59509: PUSH
59510: LD_VAR 0 1
59514: PPUSH
59515: CALL_OW 255
59519: PPUSH
59520: LD_VAR 0 1
59524: PPUSH
59525: CALL_OW 250
59529: PPUSH
59530: LD_VAR 0 1
59534: PPUSH
59535: CALL_OW 251
59539: PPUSH
59540: LD_VAR 0 2
59544: PPUSH
59545: CALL 32898 0 4
59549: PUSH
59550: LD_INT 4
59552: ARRAY
59553: ST_TO_ADDR
// end ;
59554: LD_VAR 0 3
59558: RET
// export function PlayerSeeMe ( unit ) ; begin
59559: LD_INT 0
59561: PPUSH
// result := See ( your_side , unit ) ;
59562: LD_ADDR_VAR 0 2
59566: PUSH
59567: LD_OWVAR 2
59571: PPUSH
59572: LD_VAR 0 1
59576: PPUSH
59577: CALL_OW 292
59581: ST_TO_ADDR
// end ;
59582: LD_VAR 0 2
59586: RET
// export function ReverseDir ( unit ) ; begin
59587: LD_INT 0
59589: PPUSH
// if not unit then
59590: LD_VAR 0 1
59594: NOT
59595: IFFALSE 59599
// exit ;
59597: GO 59622
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59599: LD_ADDR_VAR 0 2
59603: PUSH
59604: LD_VAR 0 1
59608: PPUSH
59609: CALL_OW 254
59613: PUSH
59614: LD_INT 3
59616: PLUS
59617: PUSH
59618: LD_INT 6
59620: MOD
59621: ST_TO_ADDR
// end ;
59622: LD_VAR 0 2
59626: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
59627: LD_INT 0
59629: PPUSH
59630: PPUSH
59631: PPUSH
59632: PPUSH
59633: PPUSH
// if not hexes then
59634: LD_VAR 0 2
59638: NOT
59639: IFFALSE 59643
// exit ;
59641: GO 59791
// dist := 9999 ;
59643: LD_ADDR_VAR 0 5
59647: PUSH
59648: LD_INT 9999
59650: ST_TO_ADDR
// for i = 1 to hexes do
59651: LD_ADDR_VAR 0 4
59655: PUSH
59656: DOUBLE
59657: LD_INT 1
59659: DEC
59660: ST_TO_ADDR
59661: LD_VAR 0 2
59665: PUSH
59666: FOR_TO
59667: IFFALSE 59779
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59669: LD_VAR 0 1
59673: PPUSH
59674: LD_VAR 0 2
59678: PUSH
59679: LD_VAR 0 4
59683: ARRAY
59684: PUSH
59685: LD_INT 1
59687: ARRAY
59688: PPUSH
59689: LD_VAR 0 2
59693: PUSH
59694: LD_VAR 0 4
59698: ARRAY
59699: PUSH
59700: LD_INT 2
59702: ARRAY
59703: PPUSH
59704: CALL_OW 297
59708: PUSH
59709: LD_VAR 0 5
59713: LESS
59714: IFFALSE 59777
// begin hex := hexes [ i ] ;
59716: LD_ADDR_VAR 0 7
59720: PUSH
59721: LD_VAR 0 2
59725: PUSH
59726: LD_VAR 0 4
59730: ARRAY
59731: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59732: LD_ADDR_VAR 0 5
59736: PUSH
59737: LD_VAR 0 1
59741: PPUSH
59742: LD_VAR 0 2
59746: PUSH
59747: LD_VAR 0 4
59751: ARRAY
59752: PUSH
59753: LD_INT 1
59755: ARRAY
59756: PPUSH
59757: LD_VAR 0 2
59761: PUSH
59762: LD_VAR 0 4
59766: ARRAY
59767: PUSH
59768: LD_INT 2
59770: ARRAY
59771: PPUSH
59772: CALL_OW 297
59776: ST_TO_ADDR
// end ; end ;
59777: GO 59666
59779: POP
59780: POP
// result := hex ;
59781: LD_ADDR_VAR 0 3
59785: PUSH
59786: LD_VAR 0 7
59790: ST_TO_ADDR
// end ;
59791: LD_VAR 0 3
59795: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59796: LD_INT 0
59798: PPUSH
59799: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59800: LD_VAR 0 1
59804: NOT
59805: PUSH
59806: LD_VAR 0 1
59810: PUSH
59811: LD_INT 21
59813: PUSH
59814: LD_INT 2
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 23
59823: PUSH
59824: LD_INT 2
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PPUSH
59835: CALL_OW 69
59839: IN
59840: NOT
59841: OR
59842: IFFALSE 59846
// exit ;
59844: GO 59893
// for i = 1 to 3 do
59846: LD_ADDR_VAR 0 3
59850: PUSH
59851: DOUBLE
59852: LD_INT 1
59854: DEC
59855: ST_TO_ADDR
59856: LD_INT 3
59858: PUSH
59859: FOR_TO
59860: IFFALSE 59891
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59862: LD_VAR 0 1
59866: PPUSH
59867: CALL_OW 250
59871: PPUSH
59872: LD_VAR 0 1
59876: PPUSH
59877: CALL_OW 251
59881: PPUSH
59882: LD_INT 1
59884: PPUSH
59885: CALL_OW 453
59889: GO 59859
59891: POP
59892: POP
// end ;
59893: LD_VAR 0 2
59897: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59898: LD_INT 0
59900: PPUSH
59901: PPUSH
59902: PPUSH
59903: PPUSH
59904: PPUSH
59905: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59906: LD_VAR 0 1
59910: NOT
59911: PUSH
59912: LD_VAR 0 2
59916: NOT
59917: OR
59918: PUSH
59919: LD_VAR 0 1
59923: PPUSH
59924: CALL_OW 314
59928: OR
59929: IFFALSE 59933
// exit ;
59931: GO 60374
// x := GetX ( enemy_unit ) ;
59933: LD_ADDR_VAR 0 7
59937: PUSH
59938: LD_VAR 0 2
59942: PPUSH
59943: CALL_OW 250
59947: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59948: LD_ADDR_VAR 0 8
59952: PUSH
59953: LD_VAR 0 2
59957: PPUSH
59958: CALL_OW 251
59962: ST_TO_ADDR
// if not x or not y then
59963: LD_VAR 0 7
59967: NOT
59968: PUSH
59969: LD_VAR 0 8
59973: NOT
59974: OR
59975: IFFALSE 59979
// exit ;
59977: GO 60374
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59979: LD_ADDR_VAR 0 6
59983: PUSH
59984: LD_VAR 0 7
59988: PPUSH
59989: LD_INT 0
59991: PPUSH
59992: LD_INT 4
59994: PPUSH
59995: CALL_OW 272
59999: PUSH
60000: LD_VAR 0 8
60004: PPUSH
60005: LD_INT 0
60007: PPUSH
60008: LD_INT 4
60010: PPUSH
60011: CALL_OW 273
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_VAR 0 7
60024: PPUSH
60025: LD_INT 1
60027: PPUSH
60028: LD_INT 4
60030: PPUSH
60031: CALL_OW 272
60035: PUSH
60036: LD_VAR 0 8
60040: PPUSH
60041: LD_INT 1
60043: PPUSH
60044: LD_INT 4
60046: PPUSH
60047: CALL_OW 273
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_VAR 0 7
60060: PPUSH
60061: LD_INT 2
60063: PPUSH
60064: LD_INT 4
60066: PPUSH
60067: CALL_OW 272
60071: PUSH
60072: LD_VAR 0 8
60076: PPUSH
60077: LD_INT 2
60079: PPUSH
60080: LD_INT 4
60082: PPUSH
60083: CALL_OW 273
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: PUSH
60092: LD_VAR 0 7
60096: PPUSH
60097: LD_INT 3
60099: PPUSH
60100: LD_INT 4
60102: PPUSH
60103: CALL_OW 272
60107: PUSH
60108: LD_VAR 0 8
60112: PPUSH
60113: LD_INT 3
60115: PPUSH
60116: LD_INT 4
60118: PPUSH
60119: CALL_OW 273
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_VAR 0 7
60132: PPUSH
60133: LD_INT 4
60135: PPUSH
60136: LD_INT 4
60138: PPUSH
60139: CALL_OW 272
60143: PUSH
60144: LD_VAR 0 8
60148: PPUSH
60149: LD_INT 4
60151: PPUSH
60152: LD_INT 4
60154: PPUSH
60155: CALL_OW 273
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_VAR 0 7
60168: PPUSH
60169: LD_INT 5
60171: PPUSH
60172: LD_INT 4
60174: PPUSH
60175: CALL_OW 272
60179: PUSH
60180: LD_VAR 0 8
60184: PPUSH
60185: LD_INT 5
60187: PPUSH
60188: LD_INT 4
60190: PPUSH
60191: CALL_OW 273
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: ST_TO_ADDR
// for i = tmp downto 1 do
60208: LD_ADDR_VAR 0 4
60212: PUSH
60213: DOUBLE
60214: LD_VAR 0 6
60218: INC
60219: ST_TO_ADDR
60220: LD_INT 1
60222: PUSH
60223: FOR_DOWNTO
60224: IFFALSE 60325
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60226: LD_VAR 0 6
60230: PUSH
60231: LD_VAR 0 4
60235: ARRAY
60236: PUSH
60237: LD_INT 1
60239: ARRAY
60240: PPUSH
60241: LD_VAR 0 6
60245: PUSH
60246: LD_VAR 0 4
60250: ARRAY
60251: PUSH
60252: LD_INT 2
60254: ARRAY
60255: PPUSH
60256: CALL_OW 488
60260: NOT
60261: PUSH
60262: LD_VAR 0 6
60266: PUSH
60267: LD_VAR 0 4
60271: ARRAY
60272: PUSH
60273: LD_INT 1
60275: ARRAY
60276: PPUSH
60277: LD_VAR 0 6
60281: PUSH
60282: LD_VAR 0 4
60286: ARRAY
60287: PUSH
60288: LD_INT 2
60290: ARRAY
60291: PPUSH
60292: CALL_OW 428
60296: PUSH
60297: LD_INT 0
60299: NONEQUAL
60300: OR
60301: IFFALSE 60323
// tmp := Delete ( tmp , i ) ;
60303: LD_ADDR_VAR 0 6
60307: PUSH
60308: LD_VAR 0 6
60312: PPUSH
60313: LD_VAR 0 4
60317: PPUSH
60318: CALL_OW 3
60322: ST_TO_ADDR
60323: GO 60223
60325: POP
60326: POP
// j := GetClosestHex ( unit , tmp ) ;
60327: LD_ADDR_VAR 0 5
60331: PUSH
60332: LD_VAR 0 1
60336: PPUSH
60337: LD_VAR 0 6
60341: PPUSH
60342: CALL 59627 0 2
60346: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60347: LD_VAR 0 1
60351: PPUSH
60352: LD_VAR 0 5
60356: PUSH
60357: LD_INT 1
60359: ARRAY
60360: PPUSH
60361: LD_VAR 0 5
60365: PUSH
60366: LD_INT 2
60368: ARRAY
60369: PPUSH
60370: CALL_OW 111
// end ;
60374: LD_VAR 0 3
60378: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
60379: LD_INT 0
60381: PPUSH
60382: PPUSH
60383: PPUSH
// uc_side = 0 ;
60384: LD_ADDR_OWVAR 20
60388: PUSH
60389: LD_INT 0
60391: ST_TO_ADDR
// uc_nation = 0 ;
60392: LD_ADDR_OWVAR 21
60396: PUSH
60397: LD_INT 0
60399: ST_TO_ADDR
// InitHc_All ( ) ;
60400: CALL_OW 584
// InitVc ;
60404: CALL_OW 20
// if mastodonts then
60408: LD_VAR 0 6
60412: IFFALSE 60479
// for i = 1 to mastodonts do
60414: LD_ADDR_VAR 0 11
60418: PUSH
60419: DOUBLE
60420: LD_INT 1
60422: DEC
60423: ST_TO_ADDR
60424: LD_VAR 0 6
60428: PUSH
60429: FOR_TO
60430: IFFALSE 60477
// begin vc_chassis := 31 ;
60432: LD_ADDR_OWVAR 37
60436: PUSH
60437: LD_INT 31
60439: ST_TO_ADDR
// vc_control := control_rider ;
60440: LD_ADDR_OWVAR 38
60444: PUSH
60445: LD_INT 4
60447: ST_TO_ADDR
// animal := CreateVehicle ;
60448: LD_ADDR_VAR 0 12
60452: PUSH
60453: CALL_OW 45
60457: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60458: LD_VAR 0 12
60462: PPUSH
60463: LD_VAR 0 8
60467: PPUSH
60468: LD_INT 0
60470: PPUSH
60471: CALL 62667 0 3
// end ;
60475: GO 60429
60477: POP
60478: POP
// if horses then
60479: LD_VAR 0 5
60483: IFFALSE 60550
// for i = 1 to horses do
60485: LD_ADDR_VAR 0 11
60489: PUSH
60490: DOUBLE
60491: LD_INT 1
60493: DEC
60494: ST_TO_ADDR
60495: LD_VAR 0 5
60499: PUSH
60500: FOR_TO
60501: IFFALSE 60548
// begin hc_class := 21 ;
60503: LD_ADDR_OWVAR 28
60507: PUSH
60508: LD_INT 21
60510: ST_TO_ADDR
// hc_gallery :=  ;
60511: LD_ADDR_OWVAR 33
60515: PUSH
60516: LD_STRING 
60518: ST_TO_ADDR
// animal := CreateHuman ;
60519: LD_ADDR_VAR 0 12
60523: PUSH
60524: CALL_OW 44
60528: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60529: LD_VAR 0 12
60533: PPUSH
60534: LD_VAR 0 8
60538: PPUSH
60539: LD_INT 0
60541: PPUSH
60542: CALL 62667 0 3
// end ;
60546: GO 60500
60548: POP
60549: POP
// if birds then
60550: LD_VAR 0 1
60554: IFFALSE 60621
// for i = 1 to birds do
60556: LD_ADDR_VAR 0 11
60560: PUSH
60561: DOUBLE
60562: LD_INT 1
60564: DEC
60565: ST_TO_ADDR
60566: LD_VAR 0 1
60570: PUSH
60571: FOR_TO
60572: IFFALSE 60619
// begin hc_class = 18 ;
60574: LD_ADDR_OWVAR 28
60578: PUSH
60579: LD_INT 18
60581: ST_TO_ADDR
// hc_gallery =  ;
60582: LD_ADDR_OWVAR 33
60586: PUSH
60587: LD_STRING 
60589: ST_TO_ADDR
// animal := CreateHuman ;
60590: LD_ADDR_VAR 0 12
60594: PUSH
60595: CALL_OW 44
60599: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60600: LD_VAR 0 12
60604: PPUSH
60605: LD_VAR 0 8
60609: PPUSH
60610: LD_INT 0
60612: PPUSH
60613: CALL 62667 0 3
// end ;
60617: GO 60571
60619: POP
60620: POP
// if tigers then
60621: LD_VAR 0 2
60625: IFFALSE 60709
// for i = 1 to tigers do
60627: LD_ADDR_VAR 0 11
60631: PUSH
60632: DOUBLE
60633: LD_INT 1
60635: DEC
60636: ST_TO_ADDR
60637: LD_VAR 0 2
60641: PUSH
60642: FOR_TO
60643: IFFALSE 60707
// begin hc_class = class_tiger ;
60645: LD_ADDR_OWVAR 28
60649: PUSH
60650: LD_INT 14
60652: ST_TO_ADDR
// hc_gallery =  ;
60653: LD_ADDR_OWVAR 33
60657: PUSH
60658: LD_STRING 
60660: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60661: LD_ADDR_OWVAR 35
60665: PUSH
60666: LD_INT 7
60668: NEG
60669: PPUSH
60670: LD_INT 7
60672: PPUSH
60673: CALL_OW 12
60677: ST_TO_ADDR
// animal := CreateHuman ;
60678: LD_ADDR_VAR 0 12
60682: PUSH
60683: CALL_OW 44
60687: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60688: LD_VAR 0 12
60692: PPUSH
60693: LD_VAR 0 8
60697: PPUSH
60698: LD_INT 0
60700: PPUSH
60701: CALL 62667 0 3
// end ;
60705: GO 60642
60707: POP
60708: POP
// if apemans then
60709: LD_VAR 0 3
60713: IFFALSE 60836
// for i = 1 to apemans do
60715: LD_ADDR_VAR 0 11
60719: PUSH
60720: DOUBLE
60721: LD_INT 1
60723: DEC
60724: ST_TO_ADDR
60725: LD_VAR 0 3
60729: PUSH
60730: FOR_TO
60731: IFFALSE 60834
// begin hc_class = class_apeman ;
60733: LD_ADDR_OWVAR 28
60737: PUSH
60738: LD_INT 12
60740: ST_TO_ADDR
// hc_gallery =  ;
60741: LD_ADDR_OWVAR 33
60745: PUSH
60746: LD_STRING 
60748: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60749: LD_ADDR_OWVAR 35
60753: PUSH
60754: LD_INT 2
60756: NEG
60757: PPUSH
60758: LD_INT 2
60760: PPUSH
60761: CALL_OW 12
60765: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60766: LD_ADDR_OWVAR 31
60770: PUSH
60771: LD_INT 1
60773: PPUSH
60774: LD_INT 3
60776: PPUSH
60777: CALL_OW 12
60781: PUSH
60782: LD_INT 1
60784: PPUSH
60785: LD_INT 3
60787: PPUSH
60788: CALL_OW 12
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: LD_INT 0
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: ST_TO_ADDR
// animal := CreateHuman ;
60805: LD_ADDR_VAR 0 12
60809: PUSH
60810: CALL_OW 44
60814: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60815: LD_VAR 0 12
60819: PPUSH
60820: LD_VAR 0 8
60824: PPUSH
60825: LD_INT 0
60827: PPUSH
60828: CALL 62667 0 3
// end ;
60832: GO 60730
60834: POP
60835: POP
// if enchidnas then
60836: LD_VAR 0 4
60840: IFFALSE 60907
// for i = 1 to enchidnas do
60842: LD_ADDR_VAR 0 11
60846: PUSH
60847: DOUBLE
60848: LD_INT 1
60850: DEC
60851: ST_TO_ADDR
60852: LD_VAR 0 4
60856: PUSH
60857: FOR_TO
60858: IFFALSE 60905
// begin hc_class = 13 ;
60860: LD_ADDR_OWVAR 28
60864: PUSH
60865: LD_INT 13
60867: ST_TO_ADDR
// hc_gallery =  ;
60868: LD_ADDR_OWVAR 33
60872: PUSH
60873: LD_STRING 
60875: ST_TO_ADDR
// animal := CreateHuman ;
60876: LD_ADDR_VAR 0 12
60880: PUSH
60881: CALL_OW 44
60885: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60886: LD_VAR 0 12
60890: PPUSH
60891: LD_VAR 0 8
60895: PPUSH
60896: LD_INT 0
60898: PPUSH
60899: CALL 62667 0 3
// end ;
60903: GO 60857
60905: POP
60906: POP
// if fishes then
60907: LD_VAR 0 7
60911: IFFALSE 60978
// for i = 1 to fishes do
60913: LD_ADDR_VAR 0 11
60917: PUSH
60918: DOUBLE
60919: LD_INT 1
60921: DEC
60922: ST_TO_ADDR
60923: LD_VAR 0 7
60927: PUSH
60928: FOR_TO
60929: IFFALSE 60976
// begin hc_class = 20 ;
60931: LD_ADDR_OWVAR 28
60935: PUSH
60936: LD_INT 20
60938: ST_TO_ADDR
// hc_gallery =  ;
60939: LD_ADDR_OWVAR 33
60943: PUSH
60944: LD_STRING 
60946: ST_TO_ADDR
// animal := CreateHuman ;
60947: LD_ADDR_VAR 0 12
60951: PUSH
60952: CALL_OW 44
60956: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60957: LD_VAR 0 12
60961: PPUSH
60962: LD_VAR 0 9
60966: PPUSH
60967: LD_INT 0
60969: PPUSH
60970: CALL 62667 0 3
// end ;
60974: GO 60928
60976: POP
60977: POP
// end ;
60978: LD_VAR 0 10
60982: RET
// export function WantHeal ( sci , unit ) ; begin
60983: LD_INT 0
60985: PPUSH
// if GetTaskList ( sci ) > 0 then
60986: LD_VAR 0 1
60990: PPUSH
60991: CALL_OW 437
60995: PUSH
60996: LD_INT 0
60998: GREATER
60999: IFFALSE 61069
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
61001: LD_VAR 0 1
61005: PPUSH
61006: CALL_OW 437
61010: PUSH
61011: LD_INT 1
61013: ARRAY
61014: PUSH
61015: LD_INT 1
61017: ARRAY
61018: PUSH
61019: LD_STRING l
61021: EQUAL
61022: PUSH
61023: LD_VAR 0 1
61027: PPUSH
61028: CALL_OW 437
61032: PUSH
61033: LD_INT 1
61035: ARRAY
61036: PUSH
61037: LD_INT 4
61039: ARRAY
61040: PUSH
61041: LD_VAR 0 2
61045: EQUAL
61046: AND
61047: IFFALSE 61059
// result := true else
61049: LD_ADDR_VAR 0 3
61053: PUSH
61054: LD_INT 1
61056: ST_TO_ADDR
61057: GO 61067
// result := false ;
61059: LD_ADDR_VAR 0 3
61063: PUSH
61064: LD_INT 0
61066: ST_TO_ADDR
// end else
61067: GO 61077
// result := false ;
61069: LD_ADDR_VAR 0 3
61073: PUSH
61074: LD_INT 0
61076: ST_TO_ADDR
// end ;
61077: LD_VAR 0 3
61081: RET
// export function HealTarget ( sci ) ; begin
61082: LD_INT 0
61084: PPUSH
// if not sci then
61085: LD_VAR 0 1
61089: NOT
61090: IFFALSE 61094
// exit ;
61092: GO 61159
// result := 0 ;
61094: LD_ADDR_VAR 0 2
61098: PUSH
61099: LD_INT 0
61101: ST_TO_ADDR
// if GetTaskList ( sci ) then
61102: LD_VAR 0 1
61106: PPUSH
61107: CALL_OW 437
61111: IFFALSE 61159
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
61113: LD_VAR 0 1
61117: PPUSH
61118: CALL_OW 437
61122: PUSH
61123: LD_INT 1
61125: ARRAY
61126: PUSH
61127: LD_INT 1
61129: ARRAY
61130: PUSH
61131: LD_STRING l
61133: EQUAL
61134: IFFALSE 61159
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
61136: LD_ADDR_VAR 0 2
61140: PUSH
61141: LD_VAR 0 1
61145: PPUSH
61146: CALL_OW 437
61150: PUSH
61151: LD_INT 1
61153: ARRAY
61154: PUSH
61155: LD_INT 4
61157: ARRAY
61158: ST_TO_ADDR
// end ;
61159: LD_VAR 0 2
61163: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
61164: LD_INT 0
61166: PPUSH
61167: PPUSH
61168: PPUSH
61169: PPUSH
// if not base_units then
61170: LD_VAR 0 1
61174: NOT
61175: IFFALSE 61179
// exit ;
61177: GO 61266
// result := false ;
61179: LD_ADDR_VAR 0 2
61183: PUSH
61184: LD_INT 0
61186: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
61187: LD_ADDR_VAR 0 5
61191: PUSH
61192: LD_VAR 0 1
61196: PPUSH
61197: LD_INT 21
61199: PUSH
61200: LD_INT 3
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PPUSH
61207: CALL_OW 72
61211: ST_TO_ADDR
// if not tmp then
61212: LD_VAR 0 5
61216: NOT
61217: IFFALSE 61221
// exit ;
61219: GO 61266
// for i in tmp do
61221: LD_ADDR_VAR 0 3
61225: PUSH
61226: LD_VAR 0 5
61230: PUSH
61231: FOR_IN
61232: IFFALSE 61264
// begin result := EnemyInRange ( i , 22 ) ;
61234: LD_ADDR_VAR 0 2
61238: PUSH
61239: LD_VAR 0 3
61243: PPUSH
61244: LD_INT 22
61246: PPUSH
61247: CALL 59502 0 2
61251: ST_TO_ADDR
// if result then
61252: LD_VAR 0 2
61256: IFFALSE 61262
// exit ;
61258: POP
61259: POP
61260: GO 61266
// end ;
61262: GO 61231
61264: POP
61265: POP
// end ;
61266: LD_VAR 0 2
61270: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
61271: LD_INT 0
61273: PPUSH
61274: PPUSH
// if not units then
61275: LD_VAR 0 1
61279: NOT
61280: IFFALSE 61284
// exit ;
61282: GO 61354
// result := [ ] ;
61284: LD_ADDR_VAR 0 3
61288: PUSH
61289: EMPTY
61290: ST_TO_ADDR
// for i in units do
61291: LD_ADDR_VAR 0 4
61295: PUSH
61296: LD_VAR 0 1
61300: PUSH
61301: FOR_IN
61302: IFFALSE 61352
// if GetTag ( i ) = tag then
61304: LD_VAR 0 4
61308: PPUSH
61309: CALL_OW 110
61313: PUSH
61314: LD_VAR 0 2
61318: EQUAL
61319: IFFALSE 61350
// result := Replace ( result , result + 1 , i ) ;
61321: LD_ADDR_VAR 0 3
61325: PUSH
61326: LD_VAR 0 3
61330: PPUSH
61331: LD_VAR 0 3
61335: PUSH
61336: LD_INT 1
61338: PLUS
61339: PPUSH
61340: LD_VAR 0 4
61344: PPUSH
61345: CALL_OW 1
61349: ST_TO_ADDR
61350: GO 61301
61352: POP
61353: POP
// end ;
61354: LD_VAR 0 3
61358: RET
// export function IsDriver ( un ) ; begin
61359: LD_INT 0
61361: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
61362: LD_ADDR_VAR 0 2
61366: PUSH
61367: LD_VAR 0 1
61371: PUSH
61372: LD_INT 55
61374: PUSH
61375: EMPTY
61376: LIST
61377: PPUSH
61378: CALL_OW 69
61382: IN
61383: ST_TO_ADDR
// end ;
61384: LD_VAR 0 2
61388: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
61389: LD_INT 0
61391: PPUSH
61392: PPUSH
// list := [ ] ;
61393: LD_ADDR_VAR 0 5
61397: PUSH
61398: EMPTY
61399: ST_TO_ADDR
// case d of 0 :
61400: LD_VAR 0 3
61404: PUSH
61405: LD_INT 0
61407: DOUBLE
61408: EQUAL
61409: IFTRUE 61413
61411: GO 61546
61413: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
61414: LD_ADDR_VAR 0 5
61418: PUSH
61419: LD_VAR 0 1
61423: PUSH
61424: LD_INT 4
61426: MINUS
61427: PUSH
61428: LD_VAR 0 2
61432: PUSH
61433: LD_INT 4
61435: MINUS
61436: PUSH
61437: LD_INT 2
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: LIST
61444: PUSH
61445: LD_VAR 0 1
61449: PUSH
61450: LD_INT 3
61452: MINUS
61453: PUSH
61454: LD_VAR 0 2
61458: PUSH
61459: LD_INT 1
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: LIST
61466: PUSH
61467: LD_VAR 0 1
61471: PUSH
61472: LD_INT 4
61474: PLUS
61475: PUSH
61476: LD_VAR 0 2
61480: PUSH
61481: LD_INT 4
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: LIST
61488: PUSH
61489: LD_VAR 0 1
61493: PUSH
61494: LD_INT 3
61496: PLUS
61497: PUSH
61498: LD_VAR 0 2
61502: PUSH
61503: LD_INT 3
61505: PLUS
61506: PUSH
61507: LD_INT 5
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: LIST
61514: PUSH
61515: LD_VAR 0 1
61519: PUSH
61520: LD_VAR 0 2
61524: PUSH
61525: LD_INT 4
61527: PLUS
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: LIST
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: ST_TO_ADDR
// end ; 1 :
61544: GO 62244
61546: LD_INT 1
61548: DOUBLE
61549: EQUAL
61550: IFTRUE 61554
61552: GO 61687
61554: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
61555: LD_ADDR_VAR 0 5
61559: PUSH
61560: LD_VAR 0 1
61564: PUSH
61565: LD_VAR 0 2
61569: PUSH
61570: LD_INT 4
61572: MINUS
61573: PUSH
61574: LD_INT 3
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: LIST
61581: PUSH
61582: LD_VAR 0 1
61586: PUSH
61587: LD_INT 3
61589: MINUS
61590: PUSH
61591: LD_VAR 0 2
61595: PUSH
61596: LD_INT 3
61598: MINUS
61599: PUSH
61600: LD_INT 2
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: LIST
61607: PUSH
61608: LD_VAR 0 1
61612: PUSH
61613: LD_INT 4
61615: MINUS
61616: PUSH
61617: LD_VAR 0 2
61621: PUSH
61622: LD_INT 1
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: LIST
61629: PUSH
61630: LD_VAR 0 1
61634: PUSH
61635: LD_VAR 0 2
61639: PUSH
61640: LD_INT 3
61642: PLUS
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: LIST
61651: PUSH
61652: LD_VAR 0 1
61656: PUSH
61657: LD_INT 4
61659: PLUS
61660: PUSH
61661: LD_VAR 0 2
61665: PUSH
61666: LD_INT 4
61668: PLUS
61669: PUSH
61670: LD_INT 5
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: LIST
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: ST_TO_ADDR
// end ; 2 :
61685: GO 62244
61687: LD_INT 2
61689: DOUBLE
61690: EQUAL
61691: IFTRUE 61695
61693: GO 61824
61695: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61696: LD_ADDR_VAR 0 5
61700: PUSH
61701: LD_VAR 0 1
61705: PUSH
61706: LD_VAR 0 2
61710: PUSH
61711: LD_INT 3
61713: MINUS
61714: PUSH
61715: LD_INT 3
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: LIST
61722: PUSH
61723: LD_VAR 0 1
61727: PUSH
61728: LD_INT 4
61730: PLUS
61731: PUSH
61732: LD_VAR 0 2
61736: PUSH
61737: LD_INT 4
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: LIST
61744: PUSH
61745: LD_VAR 0 1
61749: PUSH
61750: LD_VAR 0 2
61754: PUSH
61755: LD_INT 4
61757: PLUS
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: LIST
61766: PUSH
61767: LD_VAR 0 1
61771: PUSH
61772: LD_INT 3
61774: MINUS
61775: PUSH
61776: LD_VAR 0 2
61780: PUSH
61781: LD_INT 1
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: LIST
61788: PUSH
61789: LD_VAR 0 1
61793: PUSH
61794: LD_INT 4
61796: MINUS
61797: PUSH
61798: LD_VAR 0 2
61802: PUSH
61803: LD_INT 4
61805: MINUS
61806: PUSH
61807: LD_INT 2
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: LIST
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: ST_TO_ADDR
// end ; 3 :
61822: GO 62244
61824: LD_INT 3
61826: DOUBLE
61827: EQUAL
61828: IFTRUE 61832
61830: GO 61965
61832: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61833: LD_ADDR_VAR 0 5
61837: PUSH
61838: LD_VAR 0 1
61842: PUSH
61843: LD_INT 3
61845: PLUS
61846: PUSH
61847: LD_VAR 0 2
61851: PUSH
61852: LD_INT 4
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: LIST
61859: PUSH
61860: LD_VAR 0 1
61864: PUSH
61865: LD_INT 4
61867: PLUS
61868: PUSH
61869: LD_VAR 0 2
61873: PUSH
61874: LD_INT 4
61876: PLUS
61877: PUSH
61878: LD_INT 5
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: LIST
61885: PUSH
61886: LD_VAR 0 1
61890: PUSH
61891: LD_INT 4
61893: MINUS
61894: PUSH
61895: LD_VAR 0 2
61899: PUSH
61900: LD_INT 1
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: LIST
61907: PUSH
61908: LD_VAR 0 1
61912: PUSH
61913: LD_VAR 0 2
61917: PUSH
61918: LD_INT 4
61920: MINUS
61921: PUSH
61922: LD_INT 3
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: LIST
61929: PUSH
61930: LD_VAR 0 1
61934: PUSH
61935: LD_INT 3
61937: MINUS
61938: PUSH
61939: LD_VAR 0 2
61943: PUSH
61944: LD_INT 3
61946: MINUS
61947: PUSH
61948: LD_INT 2
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: LIST
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: ST_TO_ADDR
// end ; 4 :
61963: GO 62244
61965: LD_INT 4
61967: DOUBLE
61968: EQUAL
61969: IFTRUE 61973
61971: GO 62106
61973: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61974: LD_ADDR_VAR 0 5
61978: PUSH
61979: LD_VAR 0 1
61983: PUSH
61984: LD_VAR 0 2
61988: PUSH
61989: LD_INT 4
61991: PLUS
61992: PUSH
61993: LD_INT 0
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: LIST
62000: PUSH
62001: LD_VAR 0 1
62005: PUSH
62006: LD_INT 3
62008: PLUS
62009: PUSH
62010: LD_VAR 0 2
62014: PUSH
62015: LD_INT 3
62017: PLUS
62018: PUSH
62019: LD_INT 5
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: LIST
62026: PUSH
62027: LD_VAR 0 1
62031: PUSH
62032: LD_INT 4
62034: PLUS
62035: PUSH
62036: LD_VAR 0 2
62040: PUSH
62041: LD_INT 4
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: LIST
62048: PUSH
62049: LD_VAR 0 1
62053: PUSH
62054: LD_VAR 0 2
62058: PUSH
62059: LD_INT 3
62061: MINUS
62062: PUSH
62063: LD_INT 3
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: LIST
62070: PUSH
62071: LD_VAR 0 1
62075: PUSH
62076: LD_INT 4
62078: MINUS
62079: PUSH
62080: LD_VAR 0 2
62084: PUSH
62085: LD_INT 4
62087: MINUS
62088: PUSH
62089: LD_INT 2
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: LIST
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: ST_TO_ADDR
// end ; 5 :
62104: GO 62244
62106: LD_INT 5
62108: DOUBLE
62109: EQUAL
62110: IFTRUE 62114
62112: GO 62243
62114: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
62115: LD_ADDR_VAR 0 5
62119: PUSH
62120: LD_VAR 0 1
62124: PUSH
62125: LD_INT 4
62127: MINUS
62128: PUSH
62129: LD_VAR 0 2
62133: PUSH
62134: LD_INT 1
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: LIST
62141: PUSH
62142: LD_VAR 0 1
62146: PUSH
62147: LD_VAR 0 2
62151: PUSH
62152: LD_INT 4
62154: MINUS
62155: PUSH
62156: LD_INT 3
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: LIST
62163: PUSH
62164: LD_VAR 0 1
62168: PUSH
62169: LD_INT 4
62171: PLUS
62172: PUSH
62173: LD_VAR 0 2
62177: PUSH
62178: LD_INT 4
62180: PLUS
62181: PUSH
62182: LD_INT 5
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: LIST
62189: PUSH
62190: LD_VAR 0 1
62194: PUSH
62195: LD_INT 3
62197: PLUS
62198: PUSH
62199: LD_VAR 0 2
62203: PUSH
62204: LD_INT 4
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: LIST
62211: PUSH
62212: LD_VAR 0 1
62216: PUSH
62217: LD_VAR 0 2
62221: PUSH
62222: LD_INT 3
62224: PLUS
62225: PUSH
62226: LD_INT 0
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: LIST
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: ST_TO_ADDR
// end ; end ;
62241: GO 62244
62243: POP
// result := list ;
62244: LD_ADDR_VAR 0 4
62248: PUSH
62249: LD_VAR 0 5
62253: ST_TO_ADDR
// end ;
62254: LD_VAR 0 4
62258: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
62259: LD_INT 0
62261: PPUSH
62262: PPUSH
62263: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
62264: LD_VAR 0 1
62268: NOT
62269: PUSH
62270: LD_VAR 0 2
62274: PUSH
62275: LD_INT 1
62277: PUSH
62278: LD_INT 2
62280: PUSH
62281: LD_INT 3
62283: PUSH
62284: LD_INT 4
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: IN
62293: NOT
62294: OR
62295: IFFALSE 62299
// exit ;
62297: GO 62391
// tmp := [ ] ;
62299: LD_ADDR_VAR 0 5
62303: PUSH
62304: EMPTY
62305: ST_TO_ADDR
// for i in units do
62306: LD_ADDR_VAR 0 4
62310: PUSH
62311: LD_VAR 0 1
62315: PUSH
62316: FOR_IN
62317: IFFALSE 62360
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
62319: LD_ADDR_VAR 0 5
62323: PUSH
62324: LD_VAR 0 5
62328: PPUSH
62329: LD_VAR 0 5
62333: PUSH
62334: LD_INT 1
62336: PLUS
62337: PPUSH
62338: LD_VAR 0 4
62342: PPUSH
62343: LD_VAR 0 2
62347: PPUSH
62348: CALL_OW 259
62352: PPUSH
62353: CALL_OW 2
62357: ST_TO_ADDR
62358: GO 62316
62360: POP
62361: POP
// if not tmp then
62362: LD_VAR 0 5
62366: NOT
62367: IFFALSE 62371
// exit ;
62369: GO 62391
// result := SortListByListDesc ( units , tmp ) ;
62371: LD_ADDR_VAR 0 3
62375: PUSH
62376: LD_VAR 0 1
62380: PPUSH
62381: LD_VAR 0 5
62385: PPUSH
62386: CALL_OW 77
62390: ST_TO_ADDR
// end ;
62391: LD_VAR 0 3
62395: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
62396: LD_INT 0
62398: PPUSH
62399: PPUSH
62400: PPUSH
// result := false ;
62401: LD_ADDR_VAR 0 3
62405: PUSH
62406: LD_INT 0
62408: ST_TO_ADDR
// x := GetX ( building ) ;
62409: LD_ADDR_VAR 0 4
62413: PUSH
62414: LD_VAR 0 2
62418: PPUSH
62419: CALL_OW 250
62423: ST_TO_ADDR
// y := GetY ( building ) ;
62424: LD_ADDR_VAR 0 5
62428: PUSH
62429: LD_VAR 0 2
62433: PPUSH
62434: CALL_OW 251
62438: ST_TO_ADDR
// if not building or not x or not y then
62439: LD_VAR 0 2
62443: NOT
62444: PUSH
62445: LD_VAR 0 4
62449: NOT
62450: OR
62451: PUSH
62452: LD_VAR 0 5
62456: NOT
62457: OR
62458: IFFALSE 62462
// exit ;
62460: GO 62554
// if GetTaskList ( unit ) then
62462: LD_VAR 0 1
62466: PPUSH
62467: CALL_OW 437
62471: IFFALSE 62554
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62473: LD_STRING e
62475: PUSH
62476: LD_VAR 0 1
62480: PPUSH
62481: CALL_OW 437
62485: PUSH
62486: LD_INT 1
62488: ARRAY
62489: PUSH
62490: LD_INT 1
62492: ARRAY
62493: EQUAL
62494: PUSH
62495: LD_VAR 0 4
62499: PUSH
62500: LD_VAR 0 1
62504: PPUSH
62505: CALL_OW 437
62509: PUSH
62510: LD_INT 1
62512: ARRAY
62513: PUSH
62514: LD_INT 2
62516: ARRAY
62517: EQUAL
62518: AND
62519: PUSH
62520: LD_VAR 0 5
62524: PUSH
62525: LD_VAR 0 1
62529: PPUSH
62530: CALL_OW 437
62534: PUSH
62535: LD_INT 1
62537: ARRAY
62538: PUSH
62539: LD_INT 3
62541: ARRAY
62542: EQUAL
62543: AND
62544: IFFALSE 62554
// result := true end ;
62546: LD_ADDR_VAR 0 3
62550: PUSH
62551: LD_INT 1
62553: ST_TO_ADDR
// end ;
62554: LD_VAR 0 3
62558: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
62559: LD_INT 0
62561: PPUSH
// result := false ;
62562: LD_ADDR_VAR 0 4
62566: PUSH
62567: LD_INT 0
62569: ST_TO_ADDR
// if GetTaskList ( unit ) then
62570: LD_VAR 0 1
62574: PPUSH
62575: CALL_OW 437
62579: IFFALSE 62662
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
62581: LD_STRING M
62583: PUSH
62584: LD_VAR 0 1
62588: PPUSH
62589: CALL_OW 437
62593: PUSH
62594: LD_INT 1
62596: ARRAY
62597: PUSH
62598: LD_INT 1
62600: ARRAY
62601: EQUAL
62602: PUSH
62603: LD_VAR 0 2
62607: PUSH
62608: LD_VAR 0 1
62612: PPUSH
62613: CALL_OW 437
62617: PUSH
62618: LD_INT 1
62620: ARRAY
62621: PUSH
62622: LD_INT 2
62624: ARRAY
62625: EQUAL
62626: AND
62627: PUSH
62628: LD_VAR 0 3
62632: PUSH
62633: LD_VAR 0 1
62637: PPUSH
62638: CALL_OW 437
62642: PUSH
62643: LD_INT 1
62645: ARRAY
62646: PUSH
62647: LD_INT 3
62649: ARRAY
62650: EQUAL
62651: AND
62652: IFFALSE 62662
// result := true ;
62654: LD_ADDR_VAR 0 4
62658: PUSH
62659: LD_INT 1
62661: ST_TO_ADDR
// end ; end ;
62662: LD_VAR 0 4
62666: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62667: LD_INT 0
62669: PPUSH
62670: PPUSH
62671: PPUSH
62672: PPUSH
// if not unit or not area then
62673: LD_VAR 0 1
62677: NOT
62678: PUSH
62679: LD_VAR 0 2
62683: NOT
62684: OR
62685: IFFALSE 62689
// exit ;
62687: GO 62853
// tmp := AreaToList ( area , i ) ;
62689: LD_ADDR_VAR 0 6
62693: PUSH
62694: LD_VAR 0 2
62698: PPUSH
62699: LD_VAR 0 5
62703: PPUSH
62704: CALL_OW 517
62708: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62709: LD_ADDR_VAR 0 5
62713: PUSH
62714: DOUBLE
62715: LD_INT 1
62717: DEC
62718: ST_TO_ADDR
62719: LD_VAR 0 6
62723: PUSH
62724: LD_INT 1
62726: ARRAY
62727: PUSH
62728: FOR_TO
62729: IFFALSE 62851
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62731: LD_ADDR_VAR 0 7
62735: PUSH
62736: LD_VAR 0 6
62740: PUSH
62741: LD_INT 1
62743: ARRAY
62744: PUSH
62745: LD_VAR 0 5
62749: ARRAY
62750: PUSH
62751: LD_VAR 0 6
62755: PUSH
62756: LD_INT 2
62758: ARRAY
62759: PUSH
62760: LD_VAR 0 5
62764: ARRAY
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62770: LD_VAR 0 7
62774: PUSH
62775: LD_INT 1
62777: ARRAY
62778: PPUSH
62779: LD_VAR 0 7
62783: PUSH
62784: LD_INT 2
62786: ARRAY
62787: PPUSH
62788: CALL_OW 428
62792: PUSH
62793: LD_INT 0
62795: EQUAL
62796: IFFALSE 62849
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62798: LD_VAR 0 1
62802: PPUSH
62803: LD_VAR 0 7
62807: PUSH
62808: LD_INT 1
62810: ARRAY
62811: PPUSH
62812: LD_VAR 0 7
62816: PUSH
62817: LD_INT 2
62819: ARRAY
62820: PPUSH
62821: LD_VAR 0 3
62825: PPUSH
62826: CALL_OW 48
// result := IsPlaced ( unit ) ;
62830: LD_ADDR_VAR 0 4
62834: PUSH
62835: LD_VAR 0 1
62839: PPUSH
62840: CALL_OW 305
62844: ST_TO_ADDR
// exit ;
62845: POP
62846: POP
62847: GO 62853
// end ; end ;
62849: GO 62728
62851: POP
62852: POP
// end ;
62853: LD_VAR 0 4
62857: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62858: LD_INT 0
62860: PPUSH
62861: PPUSH
62862: PPUSH
// if not side or side > 8 then
62863: LD_VAR 0 1
62867: NOT
62868: PUSH
62869: LD_VAR 0 1
62873: PUSH
62874: LD_INT 8
62876: GREATER
62877: OR
62878: IFFALSE 62882
// exit ;
62880: GO 63069
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62882: LD_ADDR_VAR 0 4
62886: PUSH
62887: LD_INT 22
62889: PUSH
62890: LD_VAR 0 1
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 21
62901: PUSH
62902: LD_INT 3
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PPUSH
62913: CALL_OW 69
62917: ST_TO_ADDR
// if not tmp then
62918: LD_VAR 0 4
62922: NOT
62923: IFFALSE 62927
// exit ;
62925: GO 63069
// enable_addtolog := true ;
62927: LD_ADDR_OWVAR 81
62931: PUSH
62932: LD_INT 1
62934: ST_TO_ADDR
// AddToLog ( [ ) ;
62935: LD_STRING [
62937: PPUSH
62938: CALL_OW 561
// for i in tmp do
62942: LD_ADDR_VAR 0 3
62946: PUSH
62947: LD_VAR 0 4
62951: PUSH
62952: FOR_IN
62953: IFFALSE 63060
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62955: LD_STRING [
62957: PUSH
62958: LD_VAR 0 3
62962: PPUSH
62963: CALL_OW 266
62967: STR
62968: PUSH
62969: LD_STRING , 
62971: STR
62972: PUSH
62973: LD_VAR 0 3
62977: PPUSH
62978: CALL_OW 250
62982: STR
62983: PUSH
62984: LD_STRING , 
62986: STR
62987: PUSH
62988: LD_VAR 0 3
62992: PPUSH
62993: CALL_OW 251
62997: STR
62998: PUSH
62999: LD_STRING , 
63001: STR
63002: PUSH
63003: LD_VAR 0 3
63007: PPUSH
63008: CALL_OW 254
63012: STR
63013: PUSH
63014: LD_STRING , 
63016: STR
63017: PUSH
63018: LD_VAR 0 3
63022: PPUSH
63023: LD_INT 1
63025: PPUSH
63026: CALL_OW 268
63030: STR
63031: PUSH
63032: LD_STRING , 
63034: STR
63035: PUSH
63036: LD_VAR 0 3
63040: PPUSH
63041: LD_INT 2
63043: PPUSH
63044: CALL_OW 268
63048: STR
63049: PUSH
63050: LD_STRING ],
63052: STR
63053: PPUSH
63054: CALL_OW 561
// end ;
63058: GO 62952
63060: POP
63061: POP
// AddToLog ( ]; ) ;
63062: LD_STRING ];
63064: PPUSH
63065: CALL_OW 561
// end ;
63069: LD_VAR 0 2
63073: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
63074: LD_INT 0
63076: PPUSH
63077: PPUSH
63078: PPUSH
63079: PPUSH
63080: PPUSH
// if not area or not rate or not max then
63081: LD_VAR 0 1
63085: NOT
63086: PUSH
63087: LD_VAR 0 2
63091: NOT
63092: OR
63093: PUSH
63094: LD_VAR 0 4
63098: NOT
63099: OR
63100: IFFALSE 63104
// exit ;
63102: GO 63296
// while 1 do
63104: LD_INT 1
63106: IFFALSE 63296
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
63108: LD_ADDR_VAR 0 9
63112: PUSH
63113: LD_VAR 0 1
63117: PPUSH
63118: LD_INT 1
63120: PPUSH
63121: CALL_OW 287
63125: PUSH
63126: LD_INT 10
63128: MUL
63129: ST_TO_ADDR
// r := rate / 10 ;
63130: LD_ADDR_VAR 0 7
63134: PUSH
63135: LD_VAR 0 2
63139: PUSH
63140: LD_INT 10
63142: DIVREAL
63143: ST_TO_ADDR
// time := 1 1$00 ;
63144: LD_ADDR_VAR 0 8
63148: PUSH
63149: LD_INT 2100
63151: ST_TO_ADDR
// if amount < min then
63152: LD_VAR 0 9
63156: PUSH
63157: LD_VAR 0 3
63161: LESS
63162: IFFALSE 63180
// r := r * 2 else
63164: LD_ADDR_VAR 0 7
63168: PUSH
63169: LD_VAR 0 7
63173: PUSH
63174: LD_INT 2
63176: MUL
63177: ST_TO_ADDR
63178: GO 63206
// if amount > max then
63180: LD_VAR 0 9
63184: PUSH
63185: LD_VAR 0 4
63189: GREATER
63190: IFFALSE 63206
// r := r / 2 ;
63192: LD_ADDR_VAR 0 7
63196: PUSH
63197: LD_VAR 0 7
63201: PUSH
63202: LD_INT 2
63204: DIVREAL
63205: ST_TO_ADDR
// time := time / r ;
63206: LD_ADDR_VAR 0 8
63210: PUSH
63211: LD_VAR 0 8
63215: PUSH
63216: LD_VAR 0 7
63220: DIVREAL
63221: ST_TO_ADDR
// if time < 0 then
63222: LD_VAR 0 8
63226: PUSH
63227: LD_INT 0
63229: LESS
63230: IFFALSE 63247
// time := time * - 1 ;
63232: LD_ADDR_VAR 0 8
63236: PUSH
63237: LD_VAR 0 8
63241: PUSH
63242: LD_INT 1
63244: NEG
63245: MUL
63246: ST_TO_ADDR
// wait ( time ) ;
63247: LD_VAR 0 8
63251: PPUSH
63252: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
63256: LD_INT 35
63258: PPUSH
63259: LD_INT 875
63261: PPUSH
63262: CALL_OW 12
63266: PPUSH
63267: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
63271: LD_INT 1
63273: PPUSH
63274: LD_INT 5
63276: PPUSH
63277: CALL_OW 12
63281: PPUSH
63282: LD_VAR 0 1
63286: PPUSH
63287: LD_INT 1
63289: PPUSH
63290: CALL_OW 55
// end ;
63294: GO 63104
// end ;
63296: LD_VAR 0 5
63300: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
63301: LD_INT 0
63303: PPUSH
63304: PPUSH
63305: PPUSH
63306: PPUSH
63307: PPUSH
63308: PPUSH
63309: PPUSH
63310: PPUSH
// if not turrets or not factories then
63311: LD_VAR 0 1
63315: NOT
63316: PUSH
63317: LD_VAR 0 2
63321: NOT
63322: OR
63323: IFFALSE 63327
// exit ;
63325: GO 63634
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
63327: LD_ADDR_VAR 0 10
63331: PUSH
63332: LD_INT 5
63334: PUSH
63335: LD_INT 6
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 2
63344: PUSH
63345: LD_INT 4
63347: PUSH
63348: EMPTY
63349: LIST
63350: LIST
63351: PUSH
63352: LD_INT 3
63354: PUSH
63355: LD_INT 5
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 24
63369: PUSH
63370: LD_INT 25
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 23
63379: PUSH
63380: LD_INT 27
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: PUSH
63387: EMPTY
63388: LIST
63389: LIST
63390: PUSH
63391: LD_INT 42
63393: PUSH
63394: LD_INT 43
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 44
63403: PUSH
63404: LD_INT 46
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 45
63413: PUSH
63414: LD_INT 47
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: LIST
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: LIST
63430: ST_TO_ADDR
// result := [ ] ;
63431: LD_ADDR_VAR 0 3
63435: PUSH
63436: EMPTY
63437: ST_TO_ADDR
// for i in turrets do
63438: LD_ADDR_VAR 0 4
63442: PUSH
63443: LD_VAR 0 1
63447: PUSH
63448: FOR_IN
63449: IFFALSE 63632
// begin nat := GetNation ( i ) ;
63451: LD_ADDR_VAR 0 7
63455: PUSH
63456: LD_VAR 0 4
63460: PPUSH
63461: CALL_OW 248
63465: ST_TO_ADDR
// weapon := 0 ;
63466: LD_ADDR_VAR 0 8
63470: PUSH
63471: LD_INT 0
63473: ST_TO_ADDR
// if not nat then
63474: LD_VAR 0 7
63478: NOT
63479: IFFALSE 63483
// continue ;
63481: GO 63448
// for j in list [ nat ] do
63483: LD_ADDR_VAR 0 5
63487: PUSH
63488: LD_VAR 0 10
63492: PUSH
63493: LD_VAR 0 7
63497: ARRAY
63498: PUSH
63499: FOR_IN
63500: IFFALSE 63541
// if GetBWeapon ( i ) = j [ 1 ] then
63502: LD_VAR 0 4
63506: PPUSH
63507: CALL_OW 269
63511: PUSH
63512: LD_VAR 0 5
63516: PUSH
63517: LD_INT 1
63519: ARRAY
63520: EQUAL
63521: IFFALSE 63539
// begin weapon := j [ 2 ] ;
63523: LD_ADDR_VAR 0 8
63527: PUSH
63528: LD_VAR 0 5
63532: PUSH
63533: LD_INT 2
63535: ARRAY
63536: ST_TO_ADDR
// break ;
63537: GO 63541
// end ;
63539: GO 63499
63541: POP
63542: POP
// if not weapon then
63543: LD_VAR 0 8
63547: NOT
63548: IFFALSE 63552
// continue ;
63550: GO 63448
// for k in factories do
63552: LD_ADDR_VAR 0 6
63556: PUSH
63557: LD_VAR 0 2
63561: PUSH
63562: FOR_IN
63563: IFFALSE 63628
// begin weapons := AvailableWeaponList ( k ) ;
63565: LD_ADDR_VAR 0 9
63569: PUSH
63570: LD_VAR 0 6
63574: PPUSH
63575: CALL_OW 478
63579: ST_TO_ADDR
// if not weapons then
63580: LD_VAR 0 9
63584: NOT
63585: IFFALSE 63589
// continue ;
63587: GO 63562
// if weapon in weapons then
63589: LD_VAR 0 8
63593: PUSH
63594: LD_VAR 0 9
63598: IN
63599: IFFALSE 63626
// begin result := [ i , weapon ] ;
63601: LD_ADDR_VAR 0 3
63605: PUSH
63606: LD_VAR 0 4
63610: PUSH
63611: LD_VAR 0 8
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: ST_TO_ADDR
// exit ;
63620: POP
63621: POP
63622: POP
63623: POP
63624: GO 63634
// end ; end ;
63626: GO 63562
63628: POP
63629: POP
// end ;
63630: GO 63448
63632: POP
63633: POP
// end ;
63634: LD_VAR 0 3
63638: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
63639: LD_INT 0
63641: PPUSH
// if not side or side > 8 then
63642: LD_VAR 0 3
63646: NOT
63647: PUSH
63648: LD_VAR 0 3
63652: PUSH
63653: LD_INT 8
63655: GREATER
63656: OR
63657: IFFALSE 63661
// exit ;
63659: GO 63720
// if not range then
63661: LD_VAR 0 4
63665: NOT
63666: IFFALSE 63677
// range := - 12 ;
63668: LD_ADDR_VAR 0 4
63672: PUSH
63673: LD_INT 12
63675: NEG
63676: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63677: LD_VAR 0 1
63681: PPUSH
63682: LD_VAR 0 2
63686: PPUSH
63687: LD_VAR 0 3
63691: PPUSH
63692: LD_VAR 0 4
63696: PPUSH
63697: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63701: LD_VAR 0 1
63705: PPUSH
63706: LD_VAR 0 2
63710: PPUSH
63711: LD_VAR 0 3
63715: PPUSH
63716: CALL_OW 331
// end ;
63720: LD_VAR 0 5
63724: RET
// export function Video ( mode ) ; begin
63725: LD_INT 0
63727: PPUSH
// ingame_video = mode ;
63728: LD_ADDR_OWVAR 52
63732: PUSH
63733: LD_VAR 0 1
63737: ST_TO_ADDR
// interface_hidden = mode ;
63738: LD_ADDR_OWVAR 54
63742: PUSH
63743: LD_VAR 0 1
63747: ST_TO_ADDR
// end ;
63748: LD_VAR 0 2
63752: RET
// export function Join ( array , element ) ; begin
63753: LD_INT 0
63755: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63756: LD_ADDR_VAR 0 3
63760: PUSH
63761: LD_VAR 0 1
63765: PPUSH
63766: LD_VAR 0 1
63770: PUSH
63771: LD_INT 1
63773: PLUS
63774: PPUSH
63775: LD_VAR 0 2
63779: PPUSH
63780: CALL_OW 1
63784: ST_TO_ADDR
// end ;
63785: LD_VAR 0 3
63789: RET
// export function JoinUnion ( array , element ) ; begin
63790: LD_INT 0
63792: PPUSH
// result := array union element ;
63793: LD_ADDR_VAR 0 3
63797: PUSH
63798: LD_VAR 0 1
63802: PUSH
63803: LD_VAR 0 2
63807: UNION
63808: ST_TO_ADDR
// end ;
63809: LD_VAR 0 3
63813: RET
// export function GetBehemoths ( side ) ; begin
63814: LD_INT 0
63816: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
63817: LD_ADDR_VAR 0 2
63821: PUSH
63822: LD_INT 22
63824: PUSH
63825: LD_VAR 0 1
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 31
63836: PUSH
63837: LD_INT 25
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PPUSH
63848: CALL_OW 69
63852: ST_TO_ADDR
// end ;
63853: LD_VAR 0 2
63857: RET
// export function Shuffle ( array ) ; var i , index ; begin
63858: LD_INT 0
63860: PPUSH
63861: PPUSH
63862: PPUSH
// result := [ ] ;
63863: LD_ADDR_VAR 0 2
63867: PUSH
63868: EMPTY
63869: ST_TO_ADDR
// if not array then
63870: LD_VAR 0 1
63874: NOT
63875: IFFALSE 63879
// exit ;
63877: GO 63978
// Randomize ;
63879: CALL_OW 10
// for i = array downto 1 do
63883: LD_ADDR_VAR 0 3
63887: PUSH
63888: DOUBLE
63889: LD_VAR 0 1
63893: INC
63894: ST_TO_ADDR
63895: LD_INT 1
63897: PUSH
63898: FOR_DOWNTO
63899: IFFALSE 63976
// begin index := rand ( 1 , array ) ;
63901: LD_ADDR_VAR 0 4
63905: PUSH
63906: LD_INT 1
63908: PPUSH
63909: LD_VAR 0 1
63913: PPUSH
63914: CALL_OW 12
63918: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63919: LD_ADDR_VAR 0 2
63923: PUSH
63924: LD_VAR 0 2
63928: PPUSH
63929: LD_VAR 0 2
63933: PUSH
63934: LD_INT 1
63936: PLUS
63937: PPUSH
63938: LD_VAR 0 1
63942: PUSH
63943: LD_VAR 0 4
63947: ARRAY
63948: PPUSH
63949: CALL_OW 2
63953: ST_TO_ADDR
// array := Delete ( array , index ) ;
63954: LD_ADDR_VAR 0 1
63958: PUSH
63959: LD_VAR 0 1
63963: PPUSH
63964: LD_VAR 0 4
63968: PPUSH
63969: CALL_OW 3
63973: ST_TO_ADDR
// end ;
63974: GO 63898
63976: POP
63977: POP
// end ;
63978: LD_VAR 0 2
63982: RET
// export function GetBaseMaterials ( base ) ; begin
63983: LD_INT 0
63985: PPUSH
// result := [ 0 , 0 , 0 ] ;
63986: LD_ADDR_VAR 0 2
63990: PUSH
63991: LD_INT 0
63993: PUSH
63994: LD_INT 0
63996: PUSH
63997: LD_INT 0
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: LIST
64004: ST_TO_ADDR
// if not base then
64005: LD_VAR 0 1
64009: NOT
64010: IFFALSE 64014
// exit ;
64012: GO 64063
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64014: LD_ADDR_VAR 0 2
64018: PUSH
64019: LD_VAR 0 1
64023: PPUSH
64024: LD_INT 1
64026: PPUSH
64027: CALL_OW 275
64031: PUSH
64032: LD_VAR 0 1
64036: PPUSH
64037: LD_INT 2
64039: PPUSH
64040: CALL_OW 275
64044: PUSH
64045: LD_VAR 0 1
64049: PPUSH
64050: LD_INT 3
64052: PPUSH
64053: CALL_OW 275
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: LIST
64062: ST_TO_ADDR
// end ;
64063: LD_VAR 0 2
64067: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
64068: LD_INT 0
64070: PPUSH
64071: PPUSH
// result := array ;
64072: LD_ADDR_VAR 0 3
64076: PUSH
64077: LD_VAR 0 1
64081: ST_TO_ADDR
// if size > 0 then
64082: LD_VAR 0 2
64086: PUSH
64087: LD_INT 0
64089: GREATER
64090: IFFALSE 64136
// for i := array downto size do
64092: LD_ADDR_VAR 0 4
64096: PUSH
64097: DOUBLE
64098: LD_VAR 0 1
64102: INC
64103: ST_TO_ADDR
64104: LD_VAR 0 2
64108: PUSH
64109: FOR_DOWNTO
64110: IFFALSE 64134
// result := Delete ( result , result ) ;
64112: LD_ADDR_VAR 0 3
64116: PUSH
64117: LD_VAR 0 3
64121: PPUSH
64122: LD_VAR 0 3
64126: PPUSH
64127: CALL_OW 3
64131: ST_TO_ADDR
64132: GO 64109
64134: POP
64135: POP
// end ;
64136: LD_VAR 0 3
64140: RET
// export function ComExit ( unit ) ; var tmp ; begin
64141: LD_INT 0
64143: PPUSH
64144: PPUSH
// if not IsInUnit ( unit ) then
64145: LD_VAR 0 1
64149: PPUSH
64150: CALL_OW 310
64154: NOT
64155: IFFALSE 64159
// exit ;
64157: GO 64219
// tmp := IsInUnit ( unit ) ;
64159: LD_ADDR_VAR 0 3
64163: PUSH
64164: LD_VAR 0 1
64168: PPUSH
64169: CALL_OW 310
64173: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
64174: LD_VAR 0 3
64178: PPUSH
64179: CALL_OW 247
64183: PUSH
64184: LD_INT 2
64186: EQUAL
64187: IFFALSE 64200
// ComExitVehicle ( unit ) else
64189: LD_VAR 0 1
64193: PPUSH
64194: CALL_OW 121
64198: GO 64209
// ComExitBuilding ( unit ) ;
64200: LD_VAR 0 1
64204: PPUSH
64205: CALL_OW 122
// result := tmp ;
64209: LD_ADDR_VAR 0 2
64213: PUSH
64214: LD_VAR 0 3
64218: ST_TO_ADDR
// end ;
64219: LD_VAR 0 2
64223: RET
// export function ComExitAll ( units ) ; var i ; begin
64224: LD_INT 0
64226: PPUSH
64227: PPUSH
// if not units then
64228: LD_VAR 0 1
64232: NOT
64233: IFFALSE 64237
// exit ;
64235: GO 64263
// for i in units do
64237: LD_ADDR_VAR 0 3
64241: PUSH
64242: LD_VAR 0 1
64246: PUSH
64247: FOR_IN
64248: IFFALSE 64261
// ComExit ( i ) ;
64250: LD_VAR 0 3
64254: PPUSH
64255: CALL 64141 0 1
64259: GO 64247
64261: POP
64262: POP
// end ;
64263: LD_VAR 0 2
64267: RET
// export function ResetHc ; begin
64268: LD_INT 0
64270: PPUSH
// InitHc ;
64271: CALL_OW 19
// hc_importance := 0 ;
64275: LD_ADDR_OWVAR 32
64279: PUSH
64280: LD_INT 0
64282: ST_TO_ADDR
// end ;
64283: LD_VAR 0 1
64287: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
64288: LD_INT 0
64290: PPUSH
64291: PPUSH
64292: PPUSH
// _x := ( x1 + x2 ) div 2 ;
64293: LD_ADDR_VAR 0 6
64297: PUSH
64298: LD_VAR 0 1
64302: PUSH
64303: LD_VAR 0 3
64307: PLUS
64308: PUSH
64309: LD_INT 2
64311: DIV
64312: ST_TO_ADDR
// if _x < 0 then
64313: LD_VAR 0 6
64317: PUSH
64318: LD_INT 0
64320: LESS
64321: IFFALSE 64338
// _x := _x * - 1 ;
64323: LD_ADDR_VAR 0 6
64327: PUSH
64328: LD_VAR 0 6
64332: PUSH
64333: LD_INT 1
64335: NEG
64336: MUL
64337: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
64338: LD_ADDR_VAR 0 7
64342: PUSH
64343: LD_VAR 0 2
64347: PUSH
64348: LD_VAR 0 4
64352: PLUS
64353: PUSH
64354: LD_INT 2
64356: DIV
64357: ST_TO_ADDR
// if _y < 0 then
64358: LD_VAR 0 7
64362: PUSH
64363: LD_INT 0
64365: LESS
64366: IFFALSE 64383
// _y := _y * - 1 ;
64368: LD_ADDR_VAR 0 7
64372: PUSH
64373: LD_VAR 0 7
64377: PUSH
64378: LD_INT 1
64380: NEG
64381: MUL
64382: ST_TO_ADDR
// result := [ _x , _y ] ;
64383: LD_ADDR_VAR 0 5
64387: PUSH
64388: LD_VAR 0 6
64392: PUSH
64393: LD_VAR 0 7
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: ST_TO_ADDR
// end ;
64402: LD_VAR 0 5
64406: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
64407: LD_INT 0
64409: PPUSH
64410: PPUSH
64411: PPUSH
64412: PPUSH
// task := GetTaskList ( unit ) ;
64413: LD_ADDR_VAR 0 7
64417: PUSH
64418: LD_VAR 0 1
64422: PPUSH
64423: CALL_OW 437
64427: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
64428: LD_VAR 0 7
64432: NOT
64433: PUSH
64434: LD_VAR 0 1
64438: PPUSH
64439: LD_VAR 0 2
64443: PPUSH
64444: CALL_OW 308
64448: NOT
64449: AND
64450: IFFALSE 64454
// exit ;
64452: GO 64572
// if IsInArea ( unit , area ) then
64454: LD_VAR 0 1
64458: PPUSH
64459: LD_VAR 0 2
64463: PPUSH
64464: CALL_OW 308
64468: IFFALSE 64486
// begin ComMoveToArea ( unit , goAway ) ;
64470: LD_VAR 0 1
64474: PPUSH
64475: LD_VAR 0 3
64479: PPUSH
64480: CALL_OW 113
// exit ;
64484: GO 64572
// end ; if task [ 1 ] [ 1 ] <> M then
64486: LD_VAR 0 7
64490: PUSH
64491: LD_INT 1
64493: ARRAY
64494: PUSH
64495: LD_INT 1
64497: ARRAY
64498: PUSH
64499: LD_STRING M
64501: NONEQUAL
64502: IFFALSE 64506
// exit ;
64504: GO 64572
// x := task [ 1 ] [ 2 ] ;
64506: LD_ADDR_VAR 0 5
64510: PUSH
64511: LD_VAR 0 7
64515: PUSH
64516: LD_INT 1
64518: ARRAY
64519: PUSH
64520: LD_INT 2
64522: ARRAY
64523: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
64524: LD_ADDR_VAR 0 6
64528: PUSH
64529: LD_VAR 0 7
64533: PUSH
64534: LD_INT 1
64536: ARRAY
64537: PUSH
64538: LD_INT 3
64540: ARRAY
64541: ST_TO_ADDR
// if InArea ( x , y , area ) then
64542: LD_VAR 0 5
64546: PPUSH
64547: LD_VAR 0 6
64551: PPUSH
64552: LD_VAR 0 2
64556: PPUSH
64557: CALL_OW 309
64561: IFFALSE 64572
// ComStop ( unit ) ;
64563: LD_VAR 0 1
64567: PPUSH
64568: CALL_OW 141
// end ;
64572: LD_VAR 0 4
64576: RET
// export function Abs ( value ) ; begin
64577: LD_INT 0
64579: PPUSH
// result := value ;
64580: LD_ADDR_VAR 0 2
64584: PUSH
64585: LD_VAR 0 1
64589: ST_TO_ADDR
// if value < 0 then
64590: LD_VAR 0 1
64594: PUSH
64595: LD_INT 0
64597: LESS
64598: IFFALSE 64615
// result := value * - 1 ;
64600: LD_ADDR_VAR 0 2
64604: PUSH
64605: LD_VAR 0 1
64609: PUSH
64610: LD_INT 1
64612: NEG
64613: MUL
64614: ST_TO_ADDR
// end ;
64615: LD_VAR 0 2
64619: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
64620: LD_INT 0
64622: PPUSH
64623: PPUSH
64624: PPUSH
64625: PPUSH
64626: PPUSH
64627: PPUSH
64628: PPUSH
64629: PPUSH
// if not unit or not building then
64630: LD_VAR 0 1
64634: NOT
64635: PUSH
64636: LD_VAR 0 2
64640: NOT
64641: OR
64642: IFFALSE 64646
// exit ;
64644: GO 64872
// x := GetX ( building ) ;
64646: LD_ADDR_VAR 0 4
64650: PUSH
64651: LD_VAR 0 2
64655: PPUSH
64656: CALL_OW 250
64660: ST_TO_ADDR
// y := GetY ( building ) ;
64661: LD_ADDR_VAR 0 6
64665: PUSH
64666: LD_VAR 0 2
64670: PPUSH
64671: CALL_OW 251
64675: ST_TO_ADDR
// d := GetDir ( building ) ;
64676: LD_ADDR_VAR 0 8
64680: PUSH
64681: LD_VAR 0 2
64685: PPUSH
64686: CALL_OW 254
64690: ST_TO_ADDR
// r := 4 ;
64691: LD_ADDR_VAR 0 9
64695: PUSH
64696: LD_INT 4
64698: ST_TO_ADDR
// for i := 1 to 5 do
64699: LD_ADDR_VAR 0 10
64703: PUSH
64704: DOUBLE
64705: LD_INT 1
64707: DEC
64708: ST_TO_ADDR
64709: LD_INT 5
64711: PUSH
64712: FOR_TO
64713: IFFALSE 64870
// begin _x := ShiftX ( x , d , r + i ) ;
64715: LD_ADDR_VAR 0 5
64719: PUSH
64720: LD_VAR 0 4
64724: PPUSH
64725: LD_VAR 0 8
64729: PPUSH
64730: LD_VAR 0 9
64734: PUSH
64735: LD_VAR 0 10
64739: PLUS
64740: PPUSH
64741: CALL_OW 272
64745: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64746: LD_ADDR_VAR 0 7
64750: PUSH
64751: LD_VAR 0 6
64755: PPUSH
64756: LD_VAR 0 8
64760: PPUSH
64761: LD_VAR 0 9
64765: PUSH
64766: LD_VAR 0 10
64770: PLUS
64771: PPUSH
64772: CALL_OW 273
64776: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64777: LD_VAR 0 5
64781: PPUSH
64782: LD_VAR 0 7
64786: PPUSH
64787: CALL_OW 488
64791: PUSH
64792: LD_VAR 0 5
64796: PPUSH
64797: LD_VAR 0 7
64801: PPUSH
64802: CALL_OW 428
64806: PPUSH
64807: CALL_OW 247
64811: PUSH
64812: LD_INT 3
64814: PUSH
64815: LD_INT 2
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: IN
64822: NOT
64823: AND
64824: IFFALSE 64868
// begin ComMoveXY ( unit , _x , _y ) ;
64826: LD_VAR 0 1
64830: PPUSH
64831: LD_VAR 0 5
64835: PPUSH
64836: LD_VAR 0 7
64840: PPUSH
64841: CALL_OW 111
// result := [ _x , _y ] ;
64845: LD_ADDR_VAR 0 3
64849: PUSH
64850: LD_VAR 0 5
64854: PUSH
64855: LD_VAR 0 7
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: ST_TO_ADDR
// exit ;
64864: POP
64865: POP
64866: GO 64872
// end ; end ;
64868: GO 64712
64870: POP
64871: POP
// end ;
64872: LD_VAR 0 3
64876: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64877: LD_INT 0
64879: PPUSH
64880: PPUSH
64881: PPUSH
// result := 0 ;
64882: LD_ADDR_VAR 0 3
64886: PUSH
64887: LD_INT 0
64889: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64890: LD_VAR 0 1
64894: PUSH
64895: LD_INT 0
64897: LESS
64898: PUSH
64899: LD_VAR 0 1
64903: PUSH
64904: LD_INT 8
64906: GREATER
64907: OR
64908: PUSH
64909: LD_VAR 0 2
64913: PUSH
64914: LD_INT 0
64916: LESS
64917: OR
64918: PUSH
64919: LD_VAR 0 2
64923: PUSH
64924: LD_INT 8
64926: GREATER
64927: OR
64928: IFFALSE 64932
// exit ;
64930: GO 65007
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64932: LD_ADDR_VAR 0 4
64936: PUSH
64937: LD_INT 22
64939: PUSH
64940: LD_VAR 0 2
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PPUSH
64949: CALL_OW 69
64953: PUSH
64954: FOR_IN
64955: IFFALSE 65005
// begin un := UnitShoot ( i ) ;
64957: LD_ADDR_VAR 0 5
64961: PUSH
64962: LD_VAR 0 4
64966: PPUSH
64967: CALL_OW 504
64971: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64972: LD_VAR 0 5
64976: PPUSH
64977: CALL_OW 255
64981: PUSH
64982: LD_VAR 0 1
64986: EQUAL
64987: IFFALSE 65003
// begin result := un ;
64989: LD_ADDR_VAR 0 3
64993: PUSH
64994: LD_VAR 0 5
64998: ST_TO_ADDR
// exit ;
64999: POP
65000: POP
65001: GO 65007
// end ; end ;
65003: GO 64954
65005: POP
65006: POP
// end ;
65007: LD_VAR 0 3
65011: RET
// export function GetCargoBay ( units ) ; begin
65012: LD_INT 0
65014: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65015: LD_ADDR_VAR 0 2
65019: PUSH
65020: LD_VAR 0 1
65024: PPUSH
65025: LD_INT 2
65027: PUSH
65028: LD_INT 34
65030: PUSH
65031: LD_INT 12
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PUSH
65038: LD_INT 34
65040: PUSH
65041: LD_INT 51
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: PUSH
65048: LD_INT 34
65050: PUSH
65051: LD_INT 32
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 34
65060: PUSH
65061: LD_EXP 30
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: PPUSH
65077: CALL_OW 72
65081: ST_TO_ADDR
// end ;
65082: LD_VAR 0 2
65086: RET
// export function Negate ( value ) ; begin
65087: LD_INT 0
65089: PPUSH
// result := not value ;
65090: LD_ADDR_VAR 0 2
65094: PUSH
65095: LD_VAR 0 1
65099: NOT
65100: ST_TO_ADDR
// end ;
65101: LD_VAR 0 2
65105: RET
// export function Inc ( value ) ; begin
65106: LD_INT 0
65108: PPUSH
// result := value + 1 ;
65109: LD_ADDR_VAR 0 2
65113: PUSH
65114: LD_VAR 0 1
65118: PUSH
65119: LD_INT 1
65121: PLUS
65122: ST_TO_ADDR
// end ;
65123: LD_VAR 0 2
65127: RET
// export function Dec ( value ) ; begin
65128: LD_INT 0
65130: PPUSH
// result := value - 1 ;
65131: LD_ADDR_VAR 0 2
65135: PUSH
65136: LD_VAR 0 1
65140: PUSH
65141: LD_INT 1
65143: MINUS
65144: ST_TO_ADDR
// end ;
65145: LD_VAR 0 2
65149: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
65150: LD_INT 0
65152: PPUSH
65153: PPUSH
65154: PPUSH
65155: PPUSH
65156: PPUSH
65157: PPUSH
65158: PPUSH
65159: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
65160: LD_VAR 0 1
65164: PPUSH
65165: LD_VAR 0 2
65169: PPUSH
65170: CALL_OW 488
65174: NOT
65175: PUSH
65176: LD_VAR 0 3
65180: PPUSH
65181: LD_VAR 0 4
65185: PPUSH
65186: CALL_OW 488
65190: NOT
65191: OR
65192: IFFALSE 65205
// begin result := - 1 ;
65194: LD_ADDR_VAR 0 5
65198: PUSH
65199: LD_INT 1
65201: NEG
65202: ST_TO_ADDR
// exit ;
65203: GO 65440
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
65205: LD_ADDR_VAR 0 12
65209: PUSH
65210: LD_VAR 0 1
65214: PPUSH
65215: LD_VAR 0 2
65219: PPUSH
65220: LD_VAR 0 3
65224: PPUSH
65225: LD_VAR 0 4
65229: PPUSH
65230: CALL 64288 0 4
65234: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
65235: LD_ADDR_VAR 0 11
65239: PUSH
65240: LD_VAR 0 1
65244: PPUSH
65245: LD_VAR 0 2
65249: PPUSH
65250: LD_VAR 0 12
65254: PUSH
65255: LD_INT 1
65257: ARRAY
65258: PPUSH
65259: LD_VAR 0 12
65263: PUSH
65264: LD_INT 2
65266: ARRAY
65267: PPUSH
65268: CALL_OW 298
65272: ST_TO_ADDR
// distance := 9999 ;
65273: LD_ADDR_VAR 0 10
65277: PUSH
65278: LD_INT 9999
65280: ST_TO_ADDR
// for i := 0 to 5 do
65281: LD_ADDR_VAR 0 6
65285: PUSH
65286: DOUBLE
65287: LD_INT 0
65289: DEC
65290: ST_TO_ADDR
65291: LD_INT 5
65293: PUSH
65294: FOR_TO
65295: IFFALSE 65438
// begin _x := ShiftX ( x1 , i , centerDist ) ;
65297: LD_ADDR_VAR 0 7
65301: PUSH
65302: LD_VAR 0 1
65306: PPUSH
65307: LD_VAR 0 6
65311: PPUSH
65312: LD_VAR 0 11
65316: PPUSH
65317: CALL_OW 272
65321: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
65322: LD_ADDR_VAR 0 8
65326: PUSH
65327: LD_VAR 0 2
65331: PPUSH
65332: LD_VAR 0 6
65336: PPUSH
65337: LD_VAR 0 11
65341: PPUSH
65342: CALL_OW 273
65346: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
65347: LD_VAR 0 7
65351: PPUSH
65352: LD_VAR 0 8
65356: PPUSH
65357: CALL_OW 488
65361: NOT
65362: IFFALSE 65366
// continue ;
65364: GO 65294
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
65366: LD_ADDR_VAR 0 9
65370: PUSH
65371: LD_VAR 0 12
65375: PUSH
65376: LD_INT 1
65378: ARRAY
65379: PPUSH
65380: LD_VAR 0 12
65384: PUSH
65385: LD_INT 2
65387: ARRAY
65388: PPUSH
65389: LD_VAR 0 7
65393: PPUSH
65394: LD_VAR 0 8
65398: PPUSH
65399: CALL_OW 298
65403: ST_TO_ADDR
// if tmp < distance then
65404: LD_VAR 0 9
65408: PUSH
65409: LD_VAR 0 10
65413: LESS
65414: IFFALSE 65436
// begin result := i ;
65416: LD_ADDR_VAR 0 5
65420: PUSH
65421: LD_VAR 0 6
65425: ST_TO_ADDR
// distance := tmp ;
65426: LD_ADDR_VAR 0 10
65430: PUSH
65431: LD_VAR 0 9
65435: ST_TO_ADDR
// end ; end ;
65436: GO 65294
65438: POP
65439: POP
// end ;
65440: LD_VAR 0 5
65444: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65445: LD_INT 0
65447: PPUSH
65448: PPUSH
// if not driver or not IsInUnit ( driver ) then
65449: LD_VAR 0 1
65453: NOT
65454: PUSH
65455: LD_VAR 0 1
65459: PPUSH
65460: CALL_OW 310
65464: NOT
65465: OR
65466: IFFALSE 65470
// exit ;
65468: GO 65560
// vehicle := IsInUnit ( driver ) ;
65470: LD_ADDR_VAR 0 3
65474: PUSH
65475: LD_VAR 0 1
65479: PPUSH
65480: CALL_OW 310
65484: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65485: LD_VAR 0 1
65489: PPUSH
65490: LD_STRING \
65492: PUSH
65493: LD_INT 0
65495: PUSH
65496: LD_INT 0
65498: PUSH
65499: LD_INT 0
65501: PUSH
65502: LD_INT 0
65504: PUSH
65505: LD_INT 0
65507: PUSH
65508: LD_INT 0
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: PUSH
65520: LD_STRING E
65522: PUSH
65523: LD_INT 0
65525: PUSH
65526: LD_INT 0
65528: PUSH
65529: LD_VAR 0 3
65533: PUSH
65534: LD_INT 0
65536: PUSH
65537: LD_INT 0
65539: PUSH
65540: LD_INT 0
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PPUSH
65556: CALL_OW 446
// end ;
65560: LD_VAR 0 2
65564: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
65565: LD_INT 0
65567: PPUSH
65568: PPUSH
// if not driver or not IsInUnit ( driver ) then
65569: LD_VAR 0 1
65573: NOT
65574: PUSH
65575: LD_VAR 0 1
65579: PPUSH
65580: CALL_OW 310
65584: NOT
65585: OR
65586: IFFALSE 65590
// exit ;
65588: GO 65680
// vehicle := IsInUnit ( driver ) ;
65590: LD_ADDR_VAR 0 3
65594: PUSH
65595: LD_VAR 0 1
65599: PPUSH
65600: CALL_OW 310
65604: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
65605: LD_VAR 0 1
65609: PPUSH
65610: LD_STRING \
65612: PUSH
65613: LD_INT 0
65615: PUSH
65616: LD_INT 0
65618: PUSH
65619: LD_INT 0
65621: PUSH
65622: LD_INT 0
65624: PUSH
65625: LD_INT 0
65627: PUSH
65628: LD_INT 0
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: PUSH
65640: LD_STRING E
65642: PUSH
65643: LD_INT 0
65645: PUSH
65646: LD_INT 0
65648: PUSH
65649: LD_VAR 0 3
65653: PUSH
65654: LD_INT 0
65656: PUSH
65657: LD_INT 0
65659: PUSH
65660: LD_INT 0
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PPUSH
65676: CALL_OW 447
// end ;
65680: LD_VAR 0 2
65684: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65685: LD_INT 0
65687: PPUSH
65688: PPUSH
65689: PPUSH
// tmp := [ ] ;
65690: LD_ADDR_VAR 0 5
65694: PUSH
65695: EMPTY
65696: ST_TO_ADDR
// for i in units do
65697: LD_ADDR_VAR 0 4
65701: PUSH
65702: LD_VAR 0 1
65706: PUSH
65707: FOR_IN
65708: IFFALSE 65746
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65710: LD_ADDR_VAR 0 5
65714: PUSH
65715: LD_VAR 0 5
65719: PPUSH
65720: LD_VAR 0 5
65724: PUSH
65725: LD_INT 1
65727: PLUS
65728: PPUSH
65729: LD_VAR 0 4
65733: PPUSH
65734: CALL_OW 256
65738: PPUSH
65739: CALL_OW 2
65743: ST_TO_ADDR
65744: GO 65707
65746: POP
65747: POP
// if not tmp then
65748: LD_VAR 0 5
65752: NOT
65753: IFFALSE 65757
// exit ;
65755: GO 65805
// if asc then
65757: LD_VAR 0 2
65761: IFFALSE 65785
// result := SortListByListAsc ( units , tmp ) else
65763: LD_ADDR_VAR 0 3
65767: PUSH
65768: LD_VAR 0 1
65772: PPUSH
65773: LD_VAR 0 5
65777: PPUSH
65778: CALL_OW 76
65782: ST_TO_ADDR
65783: GO 65805
// result := SortListByListDesc ( units , tmp ) ;
65785: LD_ADDR_VAR 0 3
65789: PUSH
65790: LD_VAR 0 1
65794: PPUSH
65795: LD_VAR 0 5
65799: PPUSH
65800: CALL_OW 77
65804: ST_TO_ADDR
// end ;
65805: LD_VAR 0 3
65809: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65810: LD_INT 0
65812: PPUSH
65813: PPUSH
// task := GetTaskList ( mech ) ;
65814: LD_ADDR_VAR 0 4
65818: PUSH
65819: LD_VAR 0 1
65823: PPUSH
65824: CALL_OW 437
65828: ST_TO_ADDR
// if not task then
65829: LD_VAR 0 4
65833: NOT
65834: IFFALSE 65838
// exit ;
65836: GO 65880
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65838: LD_ADDR_VAR 0 3
65842: PUSH
65843: LD_VAR 0 4
65847: PUSH
65848: LD_INT 1
65850: ARRAY
65851: PUSH
65852: LD_INT 1
65854: ARRAY
65855: PUSH
65856: LD_STRING r
65858: EQUAL
65859: PUSH
65860: LD_VAR 0 4
65864: PUSH
65865: LD_INT 1
65867: ARRAY
65868: PUSH
65869: LD_INT 4
65871: ARRAY
65872: PUSH
65873: LD_VAR 0 2
65877: EQUAL
65878: AND
65879: ST_TO_ADDR
// end ;
65880: LD_VAR 0 3
65884: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65885: LD_INT 0
65887: PPUSH
// SetDir ( unit , d ) ;
65888: LD_VAR 0 1
65892: PPUSH
65893: LD_VAR 0 4
65897: PPUSH
65898: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65902: LD_VAR 0 1
65906: PPUSH
65907: LD_VAR 0 2
65911: PPUSH
65912: LD_VAR 0 3
65916: PPUSH
65917: LD_VAR 0 5
65921: PPUSH
65922: CALL_OW 48
// end ;
65926: LD_VAR 0 6
65930: RET
// export function ToNaturalNumber ( number ) ; begin
65931: LD_INT 0
65933: PPUSH
// result := number div 1 ;
65934: LD_ADDR_VAR 0 2
65938: PUSH
65939: LD_VAR 0 1
65943: PUSH
65944: LD_INT 1
65946: DIV
65947: ST_TO_ADDR
// if number < 0 then
65948: LD_VAR 0 1
65952: PUSH
65953: LD_INT 0
65955: LESS
65956: IFFALSE 65966
// result := 0 ;
65958: LD_ADDR_VAR 0 2
65962: PUSH
65963: LD_INT 0
65965: ST_TO_ADDR
// end ;
65966: LD_VAR 0 2
65970: RET
// export function SortByClass ( units , class ) ; var un ; begin
65971: LD_INT 0
65973: PPUSH
65974: PPUSH
// if not units or not class then
65975: LD_VAR 0 1
65979: NOT
65980: PUSH
65981: LD_VAR 0 2
65985: NOT
65986: OR
65987: IFFALSE 65991
// exit ;
65989: GO 66086
// result := [ ] ;
65991: LD_ADDR_VAR 0 3
65995: PUSH
65996: EMPTY
65997: ST_TO_ADDR
// for un in units do
65998: LD_ADDR_VAR 0 4
66002: PUSH
66003: LD_VAR 0 1
66007: PUSH
66008: FOR_IN
66009: IFFALSE 66084
// if GetClass ( un ) = class then
66011: LD_VAR 0 4
66015: PPUSH
66016: CALL_OW 257
66020: PUSH
66021: LD_VAR 0 2
66025: EQUAL
66026: IFFALSE 66053
// result := Insert ( result , 1 , un ) else
66028: LD_ADDR_VAR 0 3
66032: PUSH
66033: LD_VAR 0 3
66037: PPUSH
66038: LD_INT 1
66040: PPUSH
66041: LD_VAR 0 4
66045: PPUSH
66046: CALL_OW 2
66050: ST_TO_ADDR
66051: GO 66082
// result := Replace ( result , result + 1 , un ) ;
66053: LD_ADDR_VAR 0 3
66057: PUSH
66058: LD_VAR 0 3
66062: PPUSH
66063: LD_VAR 0 3
66067: PUSH
66068: LD_INT 1
66070: PLUS
66071: PPUSH
66072: LD_VAR 0 4
66076: PPUSH
66077: CALL_OW 1
66081: ST_TO_ADDR
66082: GO 66008
66084: POP
66085: POP
// end ;
66086: LD_VAR 0 3
66090: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
66091: LD_INT 0
66093: PPUSH
66094: PPUSH
66095: PPUSH
66096: PPUSH
66097: PPUSH
66098: PPUSH
66099: PPUSH
// result := [ ] ;
66100: LD_ADDR_VAR 0 4
66104: PUSH
66105: EMPTY
66106: ST_TO_ADDR
// if x - r < 0 then
66107: LD_VAR 0 1
66111: PUSH
66112: LD_VAR 0 3
66116: MINUS
66117: PUSH
66118: LD_INT 0
66120: LESS
66121: IFFALSE 66133
// min_x := 0 else
66123: LD_ADDR_VAR 0 8
66127: PUSH
66128: LD_INT 0
66130: ST_TO_ADDR
66131: GO 66149
// min_x := x - r ;
66133: LD_ADDR_VAR 0 8
66137: PUSH
66138: LD_VAR 0 1
66142: PUSH
66143: LD_VAR 0 3
66147: MINUS
66148: ST_TO_ADDR
// if y - r < 0 then
66149: LD_VAR 0 2
66153: PUSH
66154: LD_VAR 0 3
66158: MINUS
66159: PUSH
66160: LD_INT 0
66162: LESS
66163: IFFALSE 66175
// min_y := 0 else
66165: LD_ADDR_VAR 0 7
66169: PUSH
66170: LD_INT 0
66172: ST_TO_ADDR
66173: GO 66191
// min_y := y - r ;
66175: LD_ADDR_VAR 0 7
66179: PUSH
66180: LD_VAR 0 2
66184: PUSH
66185: LD_VAR 0 3
66189: MINUS
66190: ST_TO_ADDR
// max_x := x + r ;
66191: LD_ADDR_VAR 0 9
66195: PUSH
66196: LD_VAR 0 1
66200: PUSH
66201: LD_VAR 0 3
66205: PLUS
66206: ST_TO_ADDR
// max_y := y + r ;
66207: LD_ADDR_VAR 0 10
66211: PUSH
66212: LD_VAR 0 2
66216: PUSH
66217: LD_VAR 0 3
66221: PLUS
66222: ST_TO_ADDR
// for _x = min_x to max_x do
66223: LD_ADDR_VAR 0 5
66227: PUSH
66228: DOUBLE
66229: LD_VAR 0 8
66233: DEC
66234: ST_TO_ADDR
66235: LD_VAR 0 9
66239: PUSH
66240: FOR_TO
66241: IFFALSE 66342
// for _y = min_y to max_y do
66243: LD_ADDR_VAR 0 6
66247: PUSH
66248: DOUBLE
66249: LD_VAR 0 7
66253: DEC
66254: ST_TO_ADDR
66255: LD_VAR 0 10
66259: PUSH
66260: FOR_TO
66261: IFFALSE 66338
// begin if not ValidHex ( _x , _y ) then
66263: LD_VAR 0 5
66267: PPUSH
66268: LD_VAR 0 6
66272: PPUSH
66273: CALL_OW 488
66277: NOT
66278: IFFALSE 66282
// continue ;
66280: GO 66260
// if GetResourceTypeXY ( _x , _y ) then
66282: LD_VAR 0 5
66286: PPUSH
66287: LD_VAR 0 6
66291: PPUSH
66292: CALL_OW 283
66296: IFFALSE 66336
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
66298: LD_ADDR_VAR 0 4
66302: PUSH
66303: LD_VAR 0 4
66307: PPUSH
66308: LD_VAR 0 4
66312: PUSH
66313: LD_INT 1
66315: PLUS
66316: PPUSH
66317: LD_VAR 0 5
66321: PUSH
66322: LD_VAR 0 6
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PPUSH
66331: CALL_OW 1
66335: ST_TO_ADDR
// end ;
66336: GO 66260
66338: POP
66339: POP
66340: GO 66240
66342: POP
66343: POP
// end ;
66344: LD_VAR 0 4
66348: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
66349: LD_INT 0
66351: PPUSH
66352: PPUSH
66353: PPUSH
66354: PPUSH
66355: PPUSH
66356: PPUSH
66357: PPUSH
66358: PPUSH
// if not units then
66359: LD_VAR 0 1
66363: NOT
66364: IFFALSE 66368
// exit ;
66366: GO 66793
// result := UnitFilter ( units , [ f_ok ] ) ;
66368: LD_ADDR_VAR 0 3
66372: PUSH
66373: LD_VAR 0 1
66377: PPUSH
66378: LD_INT 50
66380: PUSH
66381: EMPTY
66382: LIST
66383: PPUSH
66384: CALL_OW 72
66388: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
66389: LD_ADDR_VAR 0 8
66393: PUSH
66394: LD_VAR 0 1
66398: PUSH
66399: LD_INT 1
66401: ARRAY
66402: PPUSH
66403: CALL_OW 255
66407: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
66408: LD_ADDR_VAR 0 10
66412: PUSH
66413: LD_INT 29
66415: PUSH
66416: LD_EXP 33
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: ST_TO_ADDR
// if not result then
66425: LD_VAR 0 3
66429: NOT
66430: IFFALSE 66434
// exit ;
66432: GO 66793
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
66434: LD_ADDR_VAR 0 5
66438: PUSH
66439: LD_INT 81
66441: PUSH
66442: LD_VAR 0 8
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PPUSH
66451: CALL_OW 69
66455: ST_TO_ADDR
// for i in result do
66456: LD_ADDR_VAR 0 4
66460: PUSH
66461: LD_VAR 0 3
66465: PUSH
66466: FOR_IN
66467: IFFALSE 66791
// begin tag := GetTag ( i ) + 1 ;
66469: LD_ADDR_VAR 0 9
66473: PUSH
66474: LD_VAR 0 4
66478: PPUSH
66479: CALL_OW 110
66483: PUSH
66484: LD_INT 1
66486: PLUS
66487: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
66488: LD_ADDR_VAR 0 7
66492: PUSH
66493: LD_VAR 0 4
66497: PPUSH
66498: CALL_OW 250
66502: PPUSH
66503: LD_VAR 0 4
66507: PPUSH
66508: CALL_OW 251
66512: PPUSH
66513: LD_INT 6
66515: PPUSH
66516: CALL 66091 0 3
66520: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
66521: LD_VAR 0 7
66525: PUSH
66526: LD_VAR 0 4
66530: PPUSH
66531: CALL_OW 264
66535: PUSH
66536: LD_VAR 0 10
66540: IN
66541: NOT
66542: AND
66543: IFFALSE 66582
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
66545: LD_VAR 0 4
66549: PPUSH
66550: LD_VAR 0 7
66554: PUSH
66555: LD_INT 1
66557: ARRAY
66558: PUSH
66559: LD_INT 1
66561: ARRAY
66562: PPUSH
66563: LD_VAR 0 7
66567: PUSH
66568: LD_INT 1
66570: ARRAY
66571: PUSH
66572: LD_INT 2
66574: ARRAY
66575: PPUSH
66576: CALL_OW 116
66580: GO 66789
// if path > tag then
66582: LD_VAR 0 2
66586: PUSH
66587: LD_VAR 0 9
66591: GREATER
66592: IFFALSE 66759
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
66594: LD_ADDR_VAR 0 6
66598: PUSH
66599: LD_VAR 0 5
66603: PPUSH
66604: LD_INT 91
66606: PUSH
66607: LD_VAR 0 4
66611: PUSH
66612: LD_INT 12
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: LIST
66619: PPUSH
66620: CALL_OW 72
66624: ST_TO_ADDR
// if nearEnemy then
66625: LD_VAR 0 6
66629: IFFALSE 66657
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
66631: LD_VAR 0 4
66635: PPUSH
66636: LD_VAR 0 6
66640: PPUSH
66641: LD_VAR 0 4
66645: PPUSH
66646: CALL_OW 74
66650: PPUSH
66651: CALL_OW 115
66655: GO 66757
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
66657: LD_VAR 0 4
66661: PPUSH
66662: LD_VAR 0 2
66666: PUSH
66667: LD_VAR 0 9
66671: ARRAY
66672: PUSH
66673: LD_INT 1
66675: ARRAY
66676: PPUSH
66677: LD_VAR 0 2
66681: PUSH
66682: LD_VAR 0 9
66686: ARRAY
66687: PUSH
66688: LD_INT 2
66690: ARRAY
66691: PPUSH
66692: CALL_OW 297
66696: PUSH
66697: LD_INT 6
66699: GREATER
66700: IFFALSE 66743
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66702: LD_VAR 0 4
66706: PPUSH
66707: LD_VAR 0 2
66711: PUSH
66712: LD_VAR 0 9
66716: ARRAY
66717: PUSH
66718: LD_INT 1
66720: ARRAY
66721: PPUSH
66722: LD_VAR 0 2
66726: PUSH
66727: LD_VAR 0 9
66731: ARRAY
66732: PUSH
66733: LD_INT 2
66735: ARRAY
66736: PPUSH
66737: CALL_OW 114
66741: GO 66757
// SetTag ( i , tag ) ;
66743: LD_VAR 0 4
66747: PPUSH
66748: LD_VAR 0 9
66752: PPUSH
66753: CALL_OW 109
// end else
66757: GO 66789
// if enemy then
66759: LD_VAR 0 5
66763: IFFALSE 66789
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66765: LD_VAR 0 4
66769: PPUSH
66770: LD_VAR 0 5
66774: PPUSH
66775: LD_VAR 0 4
66779: PPUSH
66780: CALL_OW 74
66784: PPUSH
66785: CALL_OW 115
// end ;
66789: GO 66466
66791: POP
66792: POP
// end ;
66793: LD_VAR 0 3
66797: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66798: LD_INT 0
66800: PPUSH
66801: PPUSH
66802: PPUSH
// if not unit or IsInUnit ( unit ) then
66803: LD_VAR 0 1
66807: NOT
66808: PUSH
66809: LD_VAR 0 1
66813: PPUSH
66814: CALL_OW 310
66818: OR
66819: IFFALSE 66823
// exit ;
66821: GO 66914
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66823: LD_ADDR_VAR 0 4
66827: PUSH
66828: LD_VAR 0 1
66832: PPUSH
66833: CALL_OW 250
66837: PPUSH
66838: LD_VAR 0 2
66842: PPUSH
66843: LD_INT 1
66845: PPUSH
66846: CALL_OW 272
66850: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66851: LD_ADDR_VAR 0 5
66855: PUSH
66856: LD_VAR 0 1
66860: PPUSH
66861: CALL_OW 251
66865: PPUSH
66866: LD_VAR 0 2
66870: PPUSH
66871: LD_INT 1
66873: PPUSH
66874: CALL_OW 273
66878: ST_TO_ADDR
// if ValidHex ( x , y ) then
66879: LD_VAR 0 4
66883: PPUSH
66884: LD_VAR 0 5
66888: PPUSH
66889: CALL_OW 488
66893: IFFALSE 66914
// ComTurnXY ( unit , x , y ) ;
66895: LD_VAR 0 1
66899: PPUSH
66900: LD_VAR 0 4
66904: PPUSH
66905: LD_VAR 0 5
66909: PPUSH
66910: CALL_OW 118
// end ;
66914: LD_VAR 0 3
66918: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66919: LD_INT 0
66921: PPUSH
66922: PPUSH
// result := false ;
66923: LD_ADDR_VAR 0 3
66927: PUSH
66928: LD_INT 0
66930: ST_TO_ADDR
// if not units then
66931: LD_VAR 0 2
66935: NOT
66936: IFFALSE 66940
// exit ;
66938: GO 66985
// for i in units do
66940: LD_ADDR_VAR 0 4
66944: PUSH
66945: LD_VAR 0 2
66949: PUSH
66950: FOR_IN
66951: IFFALSE 66983
// if See ( side , i ) then
66953: LD_VAR 0 1
66957: PPUSH
66958: LD_VAR 0 4
66962: PPUSH
66963: CALL_OW 292
66967: IFFALSE 66981
// begin result := true ;
66969: LD_ADDR_VAR 0 3
66973: PUSH
66974: LD_INT 1
66976: ST_TO_ADDR
// exit ;
66977: POP
66978: POP
66979: GO 66985
// end ;
66981: GO 66950
66983: POP
66984: POP
// end ;
66985: LD_VAR 0 3
66989: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66990: LD_INT 0
66992: PPUSH
66993: PPUSH
66994: PPUSH
66995: PPUSH
// if not unit or not points then
66996: LD_VAR 0 1
67000: NOT
67001: PUSH
67002: LD_VAR 0 2
67006: NOT
67007: OR
67008: IFFALSE 67012
// exit ;
67010: GO 67102
// dist := 99999 ;
67012: LD_ADDR_VAR 0 5
67016: PUSH
67017: LD_INT 99999
67019: ST_TO_ADDR
// for i in points do
67020: LD_ADDR_VAR 0 4
67024: PUSH
67025: LD_VAR 0 2
67029: PUSH
67030: FOR_IN
67031: IFFALSE 67100
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
67033: LD_ADDR_VAR 0 6
67037: PUSH
67038: LD_VAR 0 1
67042: PPUSH
67043: LD_VAR 0 4
67047: PUSH
67048: LD_INT 1
67050: ARRAY
67051: PPUSH
67052: LD_VAR 0 4
67056: PUSH
67057: LD_INT 2
67059: ARRAY
67060: PPUSH
67061: CALL_OW 297
67065: ST_TO_ADDR
// if tmpDist < dist then
67066: LD_VAR 0 6
67070: PUSH
67071: LD_VAR 0 5
67075: LESS
67076: IFFALSE 67098
// begin result := i ;
67078: LD_ADDR_VAR 0 3
67082: PUSH
67083: LD_VAR 0 4
67087: ST_TO_ADDR
// dist := tmpDist ;
67088: LD_ADDR_VAR 0 5
67092: PUSH
67093: LD_VAR 0 6
67097: ST_TO_ADDR
// end ; end ;
67098: GO 67030
67100: POP
67101: POP
// end ; end_of_file
67102: LD_VAR 0 3
67106: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
67107: LD_VAR 0 1
67111: PUSH
67112: LD_INT 200
67114: DOUBLE
67115: GREATEREQUAL
67116: IFFALSE 67124
67118: LD_INT 299
67120: DOUBLE
67121: LESSEQUAL
67122: IFTRUE 67126
67124: GO 67158
67126: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
67127: LD_VAR 0 1
67131: PPUSH
67132: LD_VAR 0 2
67136: PPUSH
67137: LD_VAR 0 3
67141: PPUSH
67142: LD_VAR 0 4
67146: PPUSH
67147: LD_VAR 0 5
67151: PPUSH
67152: CALL 22754 0 5
67156: GO 67235
67158: LD_INT 300
67160: DOUBLE
67161: GREATEREQUAL
67162: IFFALSE 67170
67164: LD_INT 399
67166: DOUBLE
67167: LESSEQUAL
67168: IFTRUE 67172
67170: GO 67234
67172: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
67173: LD_VAR 0 1
67177: PPUSH
67178: LD_VAR 0 2
67182: PPUSH
67183: LD_VAR 0 3
67187: PPUSH
67188: LD_VAR 0 4
67192: PPUSH
67193: LD_VAR 0 5
67197: PPUSH
67198: LD_VAR 0 6
67202: PPUSH
67203: LD_VAR 0 7
67207: PPUSH
67208: LD_VAR 0 8
67212: PPUSH
67213: LD_VAR 0 9
67217: PPUSH
67218: LD_VAR 0 10
67222: PPUSH
67223: LD_VAR 0 11
67227: PPUSH
67228: CALL 20396 0 11
67232: GO 67235
67234: POP
// end ;
67235: PPOPN 11
67237: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
67238: LD_VAR 0 1
67242: PPUSH
67243: LD_VAR 0 2
67247: PPUSH
67248: LD_VAR 0 3
67252: PPUSH
67253: LD_VAR 0 4
67257: PPUSH
67258: LD_VAR 0 5
67262: PPUSH
67263: CALL 22490 0 5
// end ; end_of_file
67267: PPOPN 5
67269: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
67270: LD_VAR 0 1
67274: PPUSH
67275: LD_VAR 0 2
67279: PPUSH
67280: LD_VAR 0 3
67284: PPUSH
67285: LD_VAR 0 4
67289: PPUSH
67290: LD_VAR 0 5
67294: PPUSH
67295: LD_VAR 0 6
67299: PPUSH
67300: CALL 8089 0 6
// end ;
67304: PPOPN 6
67306: END
