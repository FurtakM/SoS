// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 83 0 0
// InitRestrictions ;
  19: CALL 211 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 292 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 599 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 599 0 2
// PrepareAmericans ;
  74: CALL 1198 0 0
// Action ;
  78: CALL 2134 0 0
// end ;
  82: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter ; function Init ; begin
  83: LD_INT 0
  85: PPUSH
// debug := false ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// mission_prefix := 05_ ;
  94: LD_ADDR_EXP 2
  98: PUSH
  99: LD_STRING 05_
 101: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 102: LD_ADDR_EXP 3
 106: PUSH
 107: LD_STRING 05a_
 109: ST_TO_ADDR
// deltaBuilded := false ;
 110: LD_ADDR_EXP 4
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// denisArrives := false ;
 118: LD_ADDR_EXP 5
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// radar_allowed := false ;
 126: LD_ADDR_EXP 7
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// first_apeman_tamed := false ;
 134: LD_ADDR_EXP 8
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// arab_spotted := false ;
 142: LD_ADDR_EXP 13
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// end_mission := false ;
 150: LD_ADDR_EXP 14
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// apeman_army := false ;
 158: LD_ADDR_EXP 9
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// radar_researched := false ;
 166: LD_ADDR_EXP 10
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// radar_builded := false ;
 174: LD_ADDR_EXP 11
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// apeman_counter := 0 ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// Delta := 0 ;
 190: LD_ADDR_EXP 6
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// apeKillCounter := 0 ;
 198: LD_ADDR_EXP 15
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// end ;
 206: LD_VAR 0 1
 210: RET
// function InitRestrictions ; begin
 211: LD_INT 0
 213: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 214: LD_INT 7
 216: PPUSH
 217: LD_INT 1
 219: PPUSH
 220: LD_INT 1
 222: PPUSH
 223: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 227: LD_INT 8
 229: PPUSH
 230: LD_INT 1
 232: PPUSH
 233: LD_INT 1
 235: PPUSH
 236: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 240: LD_INT 10
 242: PPUSH
 243: LD_INT 1
 245: PPUSH
 246: LD_INT 1
 248: PPUSH
 249: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 253: LD_INT 69
 255: PPUSH
 256: LD_INT 1
 258: PPUSH
 259: LD_STRING GatlingInGamma
 261: PPUSH
 262: LD_INT 1
 264: PPUSH
 265: CALL_OW 30
 269: PPUSH
 270: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 274: LD_INT 51
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: LD_INT 1
 282: PPUSH
 283: CALL_OW 322
// end ;
 287: LD_VAR 0 1
 291: RET
// function DebugMode ; begin
 292: LD_INT 0
 294: PPUSH
// FogOff ( 1 ) ;
 295: LD_INT 1
 297: PPUSH
 298: CALL_OW 344
// Difficulty := 2 ;
 302: LD_ADDR_OWVAR 67
 306: PUSH
 307: LD_INT 2
 309: ST_TO_ADDR
// end ;
 310: LD_VAR 0 1
 314: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 315: LD_INT 22
 317: PUSH
 318: LD_INT 1
 320: PUSH
 321: EMPTY
 322: LIST
 323: LIST
 324: PUSH
 325: LD_INT 23
 327: PUSH
 328: LD_INT 0
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: LD_INT 7
 346: GREATEREQUAL
 347: IFFALSE 359
 349: GO 351
 351: DISABLE
// SetAchievement ( ACH_TAME ) ;
 352: LD_STRING ACH_TAME
 354: PPUSH
 355: CALL_OW 543
 359: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 360: LD_INT 22
 362: PUSH
 363: LD_INT 1
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PUSH
 370: LD_INT 35
 372: PUSH
 373: LD_INT 11
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PPUSH
 384: CALL_OW 69
 388: PUSH
 389: LD_INT 22
 391: PUSH
 392: LD_INT 1
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 34
 401: PUSH
 402: LD_INT 11
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PPUSH
 413: CALL_OW 69
 417: AND
 418: IFFALSE 430
 420: GO 422
 422: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 423: LD_STRING ACH_RADAR
 425: PPUSH
 426: CALL_OW 543
 430: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 431: LD_INT 0
 433: PPUSH
// uc_side := side ;
 434: LD_ADDR_OWVAR 20
 438: PUSH
 439: LD_VAR 0 1
 443: ST_TO_ADDR
// uc_nation := nation ;
 444: LD_ADDR_OWVAR 21
 448: PUSH
 449: LD_VAR 0 2
 453: ST_TO_ADDR
// vc_chassis := chassis ;
 454: LD_ADDR_OWVAR 37
 458: PUSH
 459: LD_VAR 0 3
 463: ST_TO_ADDR
// vc_engine := engine ;
 464: LD_ADDR_OWVAR 39
 468: PUSH
 469: LD_VAR 0 4
 473: ST_TO_ADDR
// vc_control := control ;
 474: LD_ADDR_OWVAR 38
 478: PUSH
 479: LD_VAR 0 5
 483: ST_TO_ADDR
// vc_weapon := weapon ;
 484: LD_ADDR_OWVAR 40
 488: PUSH
 489: LD_VAR 0 6
 493: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 494: LD_ADDR_OWVAR 41
 498: PUSH
 499: LD_VAR 0 7
 503: ST_TO_ADDR
// result := CreateVehicle ;
 504: LD_ADDR_VAR 0 8
 508: PUSH
 509: CALL_OW 45
 513: ST_TO_ADDR
// end ;
 514: LD_VAR 0 8
 518: RET
// export function SayX ( units , ident ) ; var i ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
// result := false ;
 523: LD_ADDR_VAR 0 3
 527: PUSH
 528: LD_INT 0
 530: ST_TO_ADDR
// if not units then
 531: LD_VAR 0 1
 535: NOT
 536: IFFALSE 540
// exit ;
 538: GO 594
// for i in units do
 540: LD_ADDR_VAR 0 4
 544: PUSH
 545: LD_VAR 0 1
 549: PUSH
 550: FOR_IN
 551: IFFALSE 592
// if IsOk ( i ) then
 553: LD_VAR 0 4
 557: PPUSH
 558: CALL_OW 302
 562: IFFALSE 590
// begin Say ( i , ident ) ;
 564: LD_VAR 0 4
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 88
// result := i ;
 578: LD_ADDR_VAR 0 3
 582: PUSH
 583: LD_VAR 0 4
 587: ST_TO_ADDR
// break ;
 588: GO 592
// end ;
 590: GO 550
 592: POP
 593: POP
// end ;
 594: LD_VAR 0 3
 598: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 599: LD_INT 0
 601: PPUSH
 602: PPUSH
// InitUc ;
 603: CALL_OW 18
// InitHc ;
 607: CALL_OW 19
// uc_side := 0 ;
 611: LD_ADDR_OWVAR 20
 615: PUSH
 616: LD_INT 0
 618: ST_TO_ADDR
// uc_nation := 0 ;
 619: LD_ADDR_OWVAR 21
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// for i = 1 to amount do
 627: LD_ADDR_VAR 0 4
 631: PUSH
 632: DOUBLE
 633: LD_INT 1
 635: DEC
 636: ST_TO_ADDR
 637: LD_VAR 0 2
 641: PUSH
 642: FOR_TO
 643: IFFALSE 725
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 645: LD_ADDR_OWVAR 29
 649: PUSH
 650: LD_INT 9
 652: PPUSH
 653: LD_INT 12
 655: PPUSH
 656: CALL_OW 12
 660: PUSH
 661: LD_INT 9
 663: PPUSH
 664: LD_INT 12
 666: PPUSH
 667: CALL_OW 12
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 676: LD_ADDR_OWVAR 35
 680: PUSH
 681: LD_INT 5
 683: NEG
 684: PPUSH
 685: LD_INT 5
 687: PPUSH
 688: CALL_OW 12
 692: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 693: LD_INT 0
 695: PPUSH
 696: LD_INT 12
 698: PPUSH
 699: LD_INT 1
 701: PPUSH
 702: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 706: CALL_OW 44
 710: PPUSH
 711: LD_VAR 0 1
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
// end ;
 723: GO 642
 725: POP
 726: POP
// InitHc ;
 727: CALL_OW 19
// end ;
 731: LD_VAR 0 3
 735: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 736: LD_INT 0
 738: PPUSH
 739: PPUSH
 740: PPUSH
// if not unit then
 741: LD_VAR 0 1
 745: NOT
 746: IFFALSE 750
// exit ;
 748: GO 1193
// if IsInUnit ( unit ) then
 750: LD_VAR 0 1
 754: PPUSH
 755: CALL_OW 310
 759: IFFALSE 776
// unit := IsDrivenBy ( unit ) ;
 761: LD_ADDR_VAR 0 1
 765: PUSH
 766: LD_VAR 0 1
 770: PPUSH
 771: CALL_OW 311
 775: ST_TO_ADDR
// targets_list := [ ] ;
 776: LD_ADDR_VAR 0 5
 780: PUSH
 781: EMPTY
 782: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 783: LD_ADDR_VAR 0 4
 787: PUSH
 788: LD_VAR 0 2
 792: PPUSH
 793: LD_INT 24
 795: PUSH
 796: LD_INT 250
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PUSH
 803: LD_INT 3
 805: PUSH
 806: LD_INT 34
 808: PUSH
 809: LD_INT 12
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 21
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 58
 832: PUSH
 833: EMPTY
 834: LIST
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PPUSH
 842: CALL_OW 72
 846: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
 847: LD_VAR 0 4
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 74
 861: PPUSH
 862: LD_VAR 0 1
 866: PPUSH
 867: CALL_OW 296
 871: PUSH
 872: LD_INT 11
 874: LESS
 875: PUSH
 876: LD_VAR 0 1
 880: PPUSH
 881: CALL_OW 310
 885: NOT
 886: AND
 887: IFFALSE 915
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
 889: LD_VAR 0 1
 893: PPUSH
 894: LD_VAR 0 4
 898: PPUSH
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 74
 908: PPUSH
 909: CALL_OW 120
// exit ;
 913: GO 1193
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
 915: LD_ADDR_VAR 0 5
 919: PUSH
 920: LD_VAR 0 2
 924: PPUSH
 925: LD_INT 21
 927: PUSH
 928: LD_INT 1
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: PUSH
 935: LD_INT 3
 937: PUSH
 938: LD_INT 54
 940: PUSH
 941: EMPTY
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PPUSH
 952: CALL_OW 72
 956: PUSH
 957: LD_VAR 0 2
 961: PPUSH
 962: LD_INT 21
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PPUSH
 972: CALL_OW 72
 976: PUSH
 977: LD_VAR 0 2
 981: PPUSH
 982: LD_INT 21
 984: PUSH
 985: LD_INT 3
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 3
 994: PUSH
 995: LD_INT 58
 997: PUSH
 998: EMPTY
 999: LIST
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PPUSH
1009: CALL_OW 72
1013: PUSH
1014: LD_VAR 0 2
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: ST_TO_ADDR
// for target in targets_list do
1025: LD_ADDR_VAR 0 4
1029: PUSH
1030: LD_VAR 0 5
1034: PUSH
1035: FOR_IN
1036: IFFALSE 1191
// begin if target then
1038: LD_VAR 0 4
1042: IFFALSE 1189
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1044: LD_VAR 0 1
1048: PPUSH
1049: CALL_OW 110
1053: PUSH
1054: LD_INT 11
1056: EQUAL
1057: PUSH
1058: LD_VAR 0 4
1062: PPUSH
1063: LD_VAR 0 1
1067: PPUSH
1068: CALL_OW 74
1072: PPUSH
1073: CALL_OW 247
1077: PUSH
1078: LD_INT 3
1080: EQUAL
1081: PUSH
1082: LD_VAR 0 4
1086: PPUSH
1087: LD_VAR 0 1
1091: PPUSH
1092: CALL_OW 74
1096: PPUSH
1097: CALL_OW 264
1101: PUSH
1102: LD_INT 12
1104: EQUAL
1105: OR
1106: AND
1107: IFFALSE 1153
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1109: LD_VAR 0 1
1113: PPUSH
1114: LD_INT 0
1116: PPUSH
1117: LD_INT 0
1119: PPUSH
1120: LD_VAR 0 4
1124: PPUSH
1125: LD_VAR 0 1
1129: PPUSH
1130: CALL_OW 74
1134: PPUSH
1135: CALL_OW 132
// SetTag ( unit , 0 ) ;
1139: LD_VAR 0 1
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: CALL_OW 109
// end else
1151: GO 1189
// if not HasTask ( unit ) then
1153: LD_VAR 0 1
1157: PPUSH
1158: CALL_OW 314
1162: NOT
1163: IFFALSE 1189
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1165: LD_VAR 0 1
1169: PPUSH
1170: LD_VAR 0 4
1174: PPUSH
1175: LD_VAR 0 1
1179: PPUSH
1180: CALL_OW 74
1184: PPUSH
1185: CALL_OW 115
// end ;
1189: GO 1035
1191: POP
1192: POP
// end ; end_of_file
1193: LD_VAR 0 3
1197: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1198: LD_INT 0
1200: PPUSH
1201: PPUSH
1202: PPUSH
1203: PPUSH
1204: PPUSH
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// uc_side := 4 ;
1213: LD_ADDR_OWVAR 20
1217: PUSH
1218: LD_INT 4
1220: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1221: LD_ADDR_EXP 19
1225: PUSH
1226: LD_STRING Denis
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: LD_STRING 
1234: PPUSH
1235: CALL 28027 0 3
1239: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1240: LD_ADDR_EXP 18
1244: PUSH
1245: LD_STRING Harisson
1247: PPUSH
1248: LD_INT 0
1250: PPUSH
1251: LD_STRING 
1253: PPUSH
1254: CALL 28027 0 3
1258: ST_TO_ADDR
// uc_side := 1 ;
1259: LD_ADDR_OWVAR 20
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1267: LD_ADDR_EXP 16
1271: PUSH
1272: LD_STRING JMM
1274: PPUSH
1275: LD_EXP 1
1279: NOT
1280: PPUSH
1281: LD_EXP 3
1285: PPUSH
1286: CALL 28027 0 3
1290: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1291: LD_ADDR_EXP 17
1295: PUSH
1296: LD_STRING Gladstone
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: LD_EXP 3
1306: PPUSH
1307: CALL 28027 0 3
1311: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1312: LD_STRING BrownInDelta
1314: PPUSH
1315: LD_EXP 1
1319: PPUSH
1320: CALL_OW 30
1324: IFFALSE 1366
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1326: LD_ADDR_EXP 20
1330: PUSH
1331: LD_STRING Brown
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 3
1344: PPUSH
1345: CALL 28027 0 3
1349: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1350: LD_ADDR_VAR 0 5
1354: PUSH
1355: LD_VAR 0 5
1359: PUSH
1360: LD_EXP 20
1364: ADD
1365: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1366: LD_STRING DonaldsonInDelta
1368: PPUSH
1369: LD_EXP 1
1373: PPUSH
1374: CALL_OW 30
1378: IFFALSE 1420
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1380: LD_ADDR_EXP 21
1384: PUSH
1385: LD_STRING Donaldson
1387: PPUSH
1388: LD_EXP 1
1392: NOT
1393: PPUSH
1394: LD_EXP 3
1398: PPUSH
1399: CALL 28027 0 3
1403: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1404: LD_ADDR_VAR 0 5
1408: PUSH
1409: LD_VAR 0 5
1413: PUSH
1414: LD_EXP 21
1418: ADD
1419: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1420: LD_STRING LisaInDelta
1422: PPUSH
1423: LD_EXP 1
1427: PPUSH
1428: CALL_OW 30
1432: IFFALSE 1474
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1434: LD_ADDR_EXP 22
1438: PUSH
1439: LD_STRING Lisa
1441: PPUSH
1442: LD_EXP 1
1446: NOT
1447: PPUSH
1448: LD_EXP 3
1452: PPUSH
1453: CALL 28027 0 3
1457: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1458: LD_ADDR_VAR 0 5
1462: PUSH
1463: LD_VAR 0 5
1467: PUSH
1468: LD_EXP 22
1472: ADD
1473: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1474: LD_STRING FrankInDelta
1476: PPUSH
1477: LD_EXP 1
1481: PPUSH
1482: CALL_OW 30
1486: IFFALSE 1528
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1488: LD_ADDR_EXP 23
1492: PUSH
1493: LD_STRING Frank
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 3
1506: PPUSH
1507: CALL 28027 0 3
1511: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1512: LD_ADDR_VAR 0 5
1516: PUSH
1517: LD_VAR 0 5
1521: PUSH
1522: LD_EXP 23
1526: ADD
1527: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1528: LD_STRING BobbyInDelta
1530: PPUSH
1531: LD_INT 0
1533: PPUSH
1534: CALL_OW 30
1538: IFFALSE 1580
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1540: LD_ADDR_EXP 24
1544: PUSH
1545: LD_STRING Bobby
1547: PPUSH
1548: LD_EXP 1
1552: NOT
1553: PPUSH
1554: LD_EXP 3
1558: PPUSH
1559: CALL 28027 0 3
1563: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1564: LD_ADDR_VAR 0 5
1568: PUSH
1569: LD_VAR 0 5
1573: PUSH
1574: LD_EXP 24
1578: ADD
1579: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1580: LD_STRING CyrusInDelta
1582: PPUSH
1583: LD_INT 0
1585: PPUSH
1586: CALL_OW 30
1590: IFFALSE 1632
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1592: LD_ADDR_EXP 25
1596: PUSH
1597: LD_STRING Cyrus
1599: PPUSH
1600: LD_EXP 1
1604: NOT
1605: PPUSH
1606: LD_EXP 3
1610: PPUSH
1611: CALL 28027 0 3
1615: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1616: LD_ADDR_VAR 0 5
1620: PUSH
1621: LD_VAR 0 5
1625: PUSH
1626: LD_EXP 25
1630: ADD
1631: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1632: LD_ADDR_EXP 26
1636: PUSH
1637: LD_STRING othersDelta
1639: PPUSH
1640: CALL_OW 31
1644: ST_TO_ADDR
// if not others and debug then
1645: LD_EXP 26
1649: NOT
1650: PUSH
1651: LD_EXP 1
1655: AND
1656: IFFALSE 1721
// begin InitHc ;
1658: CALL_OW 19
// for i = 1 to 2 do
1662: LD_ADDR_VAR 0 2
1666: PUSH
1667: DOUBLE
1668: LD_INT 1
1670: DEC
1671: ST_TO_ADDR
1672: LD_INT 2
1674: PUSH
1675: FOR_TO
1676: IFFALSE 1719
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1678: LD_INT 0
1680: PPUSH
1681: LD_VAR 0 2
1685: PUSH
1686: LD_INT 4
1688: MOD
1689: PUSH
1690: LD_INT 1
1692: PLUS
1693: PPUSH
1694: LD_INT 3
1696: PPUSH
1697: CALL_OW 380
// others := others ^ CreateHuman ;
1701: LD_ADDR_EXP 26
1705: PUSH
1706: LD_EXP 26
1710: PUSH
1711: CALL_OW 44
1715: ADD
1716: ST_TO_ADDR
// end ;
1717: GO 1675
1719: POP
1720: POP
// end ; if others then
1721: LD_EXP 26
1725: IFFALSE 1743
// tmp := tmp ^ others ;
1727: LD_ADDR_VAR 0 5
1731: PUSH
1732: LD_VAR 0 5
1736: PUSH
1737: LD_EXP 26
1741: ADD
1742: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1743: LD_ADDR_VAR 0 3
1747: PUSH
1748: LD_INT 28
1750: PUSH
1751: LD_INT 49
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 33
1760: PUSH
1761: LD_INT 54
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 38
1770: PUSH
1771: LD_INT 56
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: LIST
1782: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_INT 1
1790: PPUSH
1791: LD_INT 1
1793: PPUSH
1794: LD_INT 2
1796: PPUSH
1797: LD_INT 2
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: LD_INT 12
1805: PPUSH
1806: LD_INT 80
1808: PPUSH
1809: CALL 431 0 7
1813: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1814: LD_VAR 0 4
1818: PPUSH
1819: LD_INT 1
1821: PPUSH
1822: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
1826: LD_VAR 0 4
1830: PPUSH
1831: LD_VAR 0 3
1835: PUSH
1836: LD_INT 1
1838: ARRAY
1839: PUSH
1840: LD_INT 1
1842: ARRAY
1843: PPUSH
1844: LD_VAR 0 3
1848: PUSH
1849: LD_INT 1
1851: ARRAY
1852: PUSH
1853: LD_INT 2
1855: ARRAY
1856: PPUSH
1857: LD_INT 0
1859: PPUSH
1860: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
1864: LD_VAR 0 4
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 100
1874: PPUSH
1875: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
1879: LD_EXP 26
1883: PUSH
1884: LD_INT 1
1886: ARRAY
1887: PPUSH
1888: LD_VAR 0 4
1892: PPUSH
1893: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
1897: LD_ADDR_VAR 0 4
1901: PUSH
1902: LD_INT 1
1904: PPUSH
1905: LD_INT 1
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: LD_INT 2
1913: PPUSH
1914: LD_INT 1
1916: PPUSH
1917: LD_INT 2
1919: PPUSH
1920: LD_INT 80
1922: PPUSH
1923: CALL 431 0 7
1927: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1928: LD_VAR 0 4
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
1940: LD_VAR 0 4
1944: PPUSH
1945: LD_VAR 0 3
1949: PUSH
1950: LD_INT 2
1952: ARRAY
1953: PUSH
1954: LD_INT 1
1956: ARRAY
1957: PPUSH
1958: LD_VAR 0 3
1962: PUSH
1963: LD_INT 2
1965: ARRAY
1966: PUSH
1967: LD_INT 2
1969: ARRAY
1970: PPUSH
1971: LD_INT 0
1973: PPUSH
1974: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
1978: LD_EXP 17
1982: PPUSH
1983: LD_VAR 0 4
1987: PPUSH
1988: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
1992: LD_ADDR_VAR 0 4
1996: PUSH
1997: LD_INT 1
1999: PPUSH
2000: LD_INT 1
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: LD_INT 2
2008: PPUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: LD_INT 80
2017: PPUSH
2018: CALL 431 0 7
2022: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2023: LD_VAR 0 4
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2035: LD_VAR 0 4
2039: PPUSH
2040: LD_VAR 0 3
2044: PUSH
2045: LD_INT 3
2047: ARRAY
2048: PUSH
2049: LD_INT 1
2051: ARRAY
2052: PPUSH
2053: LD_VAR 0 3
2057: PUSH
2058: LD_INT 3
2060: ARRAY
2061: PUSH
2062: LD_INT 2
2064: ARRAY
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2073: LD_EXP 16
2077: PPUSH
2078: LD_VAR 0 4
2082: PPUSH
2083: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2087: LD_ADDR_VAR 0 2
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_EXP 26
2101: PUSH
2102: LD_INT 1
2104: ARRAY
2105: DIFF
2106: PUSH
2107: FOR_IN
2108: IFFALSE 2127
// PlaceUnitArea ( i , startArea , false ) ;
2110: LD_VAR 0 2
2114: PPUSH
2115: LD_INT 5
2117: PPUSH
2118: LD_INT 0
2120: PPUSH
2121: CALL_OW 49
2125: GO 2107
2127: POP
2128: POP
// end ; end_of_file
2129: LD_VAR 0 1
2133: RET
// export function Action ; var m ; begin
2134: LD_INT 0
2136: PPUSH
2137: PPUSH
// InGameOn ;
2138: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2142: LD_INT 28
2144: PPUSH
2145: LD_INT 51
2147: PPUSH
2148: CALL_OW 86
// Wait ( 3 ) ;
2152: LD_INT 3
2154: PPUSH
2155: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2159: LD_EXP 16
2163: PPUSH
2164: LD_STRING D1d-JMM-1a
2166: PPUSH
2167: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2171: LD_EXP 18
2175: PPUSH
2176: LD_STRING D1d-Har-1
2178: PPUSH
2179: CALL_OW 94
// InGameOff ;
2183: CALL_OW 9
// SaveForQuickRestart ;
2187: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2191: LD_STRING M1
2193: PPUSH
2194: CALL_OW 337
// Wait ( 0 0$2 ) ;
2198: LD_INT 70
2200: PPUSH
2201: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2205: LD_EXP 16
2209: PPUSH
2210: LD_STRING D2-JMM-1
2212: PPUSH
2213: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2217: LD_EXP 17
2221: PPUSH
2222: LD_STRING D2-Glad-1
2224: PPUSH
2225: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2229: LD_EXP 16
2233: PPUSH
2234: LD_STRING D2-JMM-2
2236: PPUSH
2237: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2241: LD_EXP 17
2245: PPUSH
2246: LD_STRING D2-Glad-2
2248: PPUSH
2249: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2253: LD_EXP 16
2257: PPUSH
2258: LD_STRING D2-JMM-3
2260: PPUSH
2261: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2265: LD_INT 1050
2267: PPUSH
2268: LD_INT 2100
2270: PPUSH
2271: CALL_OW 12
2275: PPUSH
2276: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2280: LD_INT 1
2282: PPUSH
2283: LD_INT 570
2285: PPUSH
2286: LD_INT 350
2288: PPUSH
2289: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2293: LD_INT 6300
2295: PPUSH
2296: LD_INT 10500
2298: PPUSH
2299: CALL_OW 12
2303: PPUSH
2304: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2308: LD_INT 0
2310: PPUSH
2311: LD_INT 570
2313: PPUSH
2314: LD_INT 350
2316: PPUSH
2317: CALL_OW 550
// end ;
2321: LD_VAR 0 1
2325: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2326: LD_INT 22
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PUSH
2336: LD_INT 3
2338: PUSH
2339: LD_INT 57
2341: PUSH
2342: EMPTY
2343: LIST
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 30
2351: PUSH
2352: LD_INT 0
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: PUSH
2364: EMPTY
2365: LIST
2366: PPUSH
2367: CALL_OW 69
2371: PUSH
2372: LD_EXP 4
2376: NOT
2377: AND
2378: IFFALSE 2391
2380: GO 2382
2382: DISABLE
// begin deltaBuilded := true ;
2383: LD_ADDR_EXP 4
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// end ;
2391: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2392: LD_EXP 6
2396: NOT
2397: PUSH
2398: LD_EXP 4
2402: AND
2403: PUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 1
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 3
2416: PUSH
2417: LD_INT 57
2419: PUSH
2420: EMPTY
2421: LIST
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 30
2429: PUSH
2430: LD_INT 0
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: LIST
2441: PUSH
2442: EMPTY
2443: LIST
2444: PPUSH
2445: CALL_OW 69
2449: AND
2450: IFFALSE 2536
2452: GO 2454
2454: DISABLE
// begin enable ;
2455: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2456: LD_INT 0
2458: PPUSH
2459: LD_INT 1
2461: PPUSH
2462: LD_INT 0
2464: PPUSH
2465: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2469: LD_ADDR_EXP 6
2473: PUSH
2474: LD_INT 22
2476: PUSH
2477: LD_INT 1
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: LD_INT 3
2486: PUSH
2487: LD_INT 57
2489: PUSH
2490: EMPTY
2491: LIST
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PUSH
2497: LD_INT 30
2499: PUSH
2500: LD_INT 0
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: LIST
2511: PUSH
2512: EMPTY
2513: LIST
2514: PPUSH
2515: CALL_OW 69
2519: PUSH
2520: LD_INT 1
2522: ARRAY
2523: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2524: LD_EXP 6
2528: PPUSH
2529: LD_STRING Delta
2531: PPUSH
2532: CALL_OW 500
// end ;
2536: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2537: LD_INT 1
2539: PPUSH
2540: LD_INT 1
2542: PPUSH
2543: CALL_OW 321
2547: PUSH
2548: LD_INT 2
2550: EQUAL
2551: PUSH
2552: LD_EXP 17
2556: PPUSH
2557: CALL_OW 302
2561: AND
2562: IFFALSE 2623
2564: GO 2566
2566: DISABLE
// begin DialogueOn ;
2567: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2571: LD_EXP 17
2575: PPUSH
2576: LD_STRING D3-Glad-1
2578: PPUSH
2579: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2583: LD_EXP 16
2587: PPUSH
2588: LD_STRING D3-JMM-1
2590: PPUSH
2591: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2595: LD_EXP 17
2599: PPUSH
2600: LD_STRING D3-Glad-2
2602: PPUSH
2603: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2607: LD_EXP 16
2611: PPUSH
2612: LD_STRING D3-JMM-2
2614: PPUSH
2615: CALL_OW 88
// DialogueOff ;
2619: CALL_OW 7
// end ;
2623: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched do var sol ;
2624: LD_INT 2
2626: PPUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 321
2634: PUSH
2635: LD_INT 2
2637: EQUAL
2638: IFFALSE 2815
2640: GO 2642
2642: DISABLE
2643: LD_INT 0
2645: PPUSH
// begin DialogueOn ;
2646: CALL_OW 6
// if Frank then
2650: LD_EXP 23
2654: IFFALSE 2668
// Say ( Frank , D8a-Frank-1 ) ;
2656: LD_EXP 23
2660: PPUSH
2661: LD_STRING D8a-Frank-1
2663: PPUSH
2664: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2668: LD_ADDR_VAR 0 1
2672: PUSH
2673: LD_EXP 26
2677: PPUSH
2678: LD_INT 26
2680: PUSH
2681: LD_INT 1
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 72
2692: PPUSH
2693: LD_STRING D8a-Sol1-1
2695: PPUSH
2696: CALL 519 0 2
2700: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2701: LD_EXP 19
2705: PUSH
2706: LD_EXP 19
2710: PPUSH
2711: CALL_OW 255
2715: PUSH
2716: LD_INT 1
2718: EQUAL
2719: AND
2720: IFFALSE 2734
// Say ( Denis , D8a-Den-1 ) ;
2722: LD_EXP 19
2726: PPUSH
2727: LD_STRING D8a-Den-1
2729: PPUSH
2730: CALL_OW 88
// if sol or Denis or Frank then
2734: LD_VAR 0 1
2738: PUSH
2739: LD_EXP 19
2743: OR
2744: PUSH
2745: LD_EXP 23
2749: OR
2750: IFFALSE 2811
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
2752: LD_EXP 26
2756: PPUSH
2757: LD_INT 25
2759: PUSH
2760: LD_INT 4
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 26
2769: PUSH
2770: LD_INT 1
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 72
2785: PUSH
2786: LD_VAR 0 1
2790: DIFF
2791: PPUSH
2792: LD_STRING D8a-Sci1-1
2794: PPUSH
2795: CALL 519 0 2
// Say ( JMM , D8a-JMM-1 ) ;
2799: LD_EXP 16
2803: PPUSH
2804: LD_STRING D8a-JMM-1
2806: PPUSH
2807: CALL_OW 88
// end ; DialogueOff ;
2811: CALL_OW 7
// end ;
2815: PPOPN 1
2817: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
2818: LD_INT 22
2820: PUSH
2821: LD_INT 1
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PUSH
2828: LD_INT 25
2830: PUSH
2831: LD_INT 16
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PUSH
2838: EMPTY
2839: LIST
2840: LIST
2841: PPUSH
2842: CALL_OW 69
2846: IFFALSE 2905
2848: GO 2850
2850: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
2851: LD_STRING M1a
2853: PPUSH
2854: CALL_OW 337
// case Query ( Q2 ) of 1 :
2858: LD_STRING Q2
2860: PPUSH
2861: CALL_OW 97
2865: PUSH
2866: LD_INT 1
2868: DOUBLE
2869: EQUAL
2870: IFTRUE 2874
2872: GO 2885
2874: POP
// end_mission := true ; 2 :
2875: LD_ADDR_EXP 14
2879: PUSH
2880: LD_INT 1
2882: ST_TO_ADDR
2883: GO 2905
2885: LD_INT 2
2887: DOUBLE
2888: EQUAL
2889: IFTRUE 2893
2891: GO 2904
2893: POP
// end_the_mission_allowed := true ; end ;
2894: LD_ADDR_OWVAR 57
2898: PUSH
2899: LD_INT 1
2901: ST_TO_ADDR
2902: GO 2905
2904: POP
// end ;
2905: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
2906: LD_INT 22
2908: PUSH
2909: LD_INT 1
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: LD_INT 30
2921: PUSH
2922: LD_INT 6
2924: PUSH
2925: EMPTY
2926: LIST
2927: LIST
2928: PUSH
2929: LD_INT 30
2931: PUSH
2932: LD_INT 7
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: LIST
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PPUSH
2948: CALL_OW 69
2952: PUSH
2953: LD_INT 22
2955: PUSH
2956: LD_INT 1
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: LD_INT 2
2965: PUSH
2966: LD_INT 30
2968: PUSH
2969: LD_INT 2
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: LD_INT 30
2978: PUSH
2979: LD_INT 3
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: LIST
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: PPUSH
2995: CALL_OW 69
2999: AND
3000: PUSH
3001: LD_EXP 6
3005: AND
3006: IFFALSE 3521
3008: GO 3010
3010: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3011: LD_INT 1050
3013: PPUSH
3014: LD_INT 1750
3016: PPUSH
3017: CALL_OW 12
3021: PPUSH
3022: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3026: LD_EXP 19
3030: PPUSH
3031: LD_INT 6
3033: PUSH
3034: LD_INT 9
3036: PUSH
3037: LD_INT 10
3039: PUSH
3040: LD_INT 16
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: PUSH
3049: LD_OWVAR 67
3053: ARRAY
3054: PPUSH
3055: LD_INT 0
3057: PPUSH
3058: CALL_OW 49
// ComHold ( Denis ) ;
3062: LD_EXP 19
3066: PPUSH
3067: CALL_OW 140
// InGameOn ;
3071: CALL_OW 8
// DialogueOn ;
3075: CALL_OW 6
// if Delta then
3079: LD_EXP 6
3083: IFFALSE 3096
// CenterNowOnUnits ( Delta ) else
3085: LD_EXP 6
3089: PPUSH
3090: CALL_OW 87
3094: GO 3105
// CenterNowOnUnits ( JMM ) ;
3096: LD_EXP 16
3100: PPUSH
3101: CALL_OW 87
// SayRadio ( Denis , DD-Den-1 ) ;
3105: LD_EXP 19
3109: PPUSH
3110: LD_STRING DD-Den-1
3112: PPUSH
3113: CALL_OW 94
// Say ( JMM , DD-JMM-1 ) ;
3117: LD_EXP 16
3121: PPUSH
3122: LD_STRING DD-JMM-1
3124: PPUSH
3125: CALL_OW 88
// SayRadio ( Denis , DD-Den-2 ) ;
3129: LD_EXP 19
3133: PPUSH
3134: LD_STRING DD-Den-2
3136: PPUSH
3137: CALL_OW 94
// Wait ( 3 ) ;
3141: LD_INT 3
3143: PPUSH
3144: CALL_OW 67
// DialogueOff ;
3148: CALL_OW 7
// InGameOff ;
3152: CALL_OW 9
// if Difficulty = 1 then
3156: LD_OWVAR 67
3160: PUSH
3161: LD_INT 1
3163: EQUAL
3164: IFFALSE 3240
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3166: LD_EXP 19
3170: PPUSH
3171: CALL_OW 250
3175: PPUSH
3176: LD_EXP 19
3180: PPUSH
3181: CALL_OW 251
3185: PPUSH
3186: LD_INT 1
3188: PPUSH
3189: LD_INT 12
3191: NEG
3192: PPUSH
3193: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3197: LD_EXP 19
3201: PPUSH
3202: CALL_OW 87
// wait ( 0 0$5 ) ;
3206: LD_INT 175
3208: PPUSH
3209: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3213: LD_EXP 19
3217: PPUSH
3218: CALL_OW 250
3222: PPUSH
3223: LD_EXP 19
3227: PPUSH
3228: CALL_OW 251
3232: PPUSH
3233: LD_INT 1
3235: PPUSH
3236: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3240: LD_INT 35
3242: PPUSH
3243: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3247: LD_INT 1
3249: PPUSH
3250: LD_EXP 19
3254: PPUSH
3255: CALL_OW 292
3259: PUSH
3260: LD_EXP 19
3264: PPUSH
3265: CALL_OW 301
3269: OR
3270: IFFALSE 3240
// if IsDead ( Denis ) then
3272: LD_EXP 19
3276: PPUSH
3277: CALL_OW 301
3281: IFFALSE 3285
// exit ;
3283: GO 3521
// SetSide ( Denis , 1 ) ;
3285: LD_EXP 19
3289: PPUSH
3290: LD_INT 1
3292: PPUSH
3293: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3297: LD_EXP 19
3301: PPUSH
3302: LD_STRING DD-Den-2a
3304: PPUSH
3305: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3309: LD_INT 35
3311: PPUSH
3312: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3316: LD_EXP 19
3320: PPUSH
3321: CALL_OW 310
3325: PPUSH
3326: CALL_OW 266
3330: PUSH
3331: LD_INT 6
3333: PUSH
3334: LD_INT 7
3336: PUSH
3337: LD_INT 8
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: LIST
3344: IN
3345: PUSH
3346: LD_EXP 19
3350: PPUSH
3351: CALL_OW 301
3355: OR
3356: IFFALSE 3309
// if IsDead ( Denis ) then
3358: LD_EXP 19
3362: PPUSH
3363: CALL_OW 301
3367: IFFALSE 3371
// exit ;
3369: GO 3521
// Say ( Denis , DD-Den-2b ) ;
3371: LD_EXP 19
3375: PPUSH
3376: LD_STRING DD-Den-2b
3378: PPUSH
3379: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
3383: LD_EXP 19
3387: PPUSH
3388: LD_INT 4
3390: PPUSH
3391: CALL_OW 123
// Wait ( 0 0$02 ) ;
3395: LD_INT 70
3397: PPUSH
3398: CALL_OW 67
// DialogueOn ;
3402: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
3406: LD_EXP 19
3410: PPUSH
3411: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
3415: LD_EXP 16
3419: PPUSH
3420: LD_STRING D4-JMM-1
3422: PPUSH
3423: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
3427: LD_EXP 19
3431: PPUSH
3432: LD_STRING D4-Den-1
3434: PPUSH
3435: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
3439: LD_EXP 16
3443: PPUSH
3444: LD_STRING D4-JMM-2
3446: PPUSH
3447: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
3451: LD_EXP 19
3455: PPUSH
3456: LD_STRING D4-Den-2
3458: PPUSH
3459: CALL_OW 88
// DialogueOff ;
3463: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3467: LD_STRING M2
3469: PPUSH
3470: CALL_OW 337
// radar_allowed := true ;
3474: LD_ADDR_EXP 7
3478: PUSH
3479: LD_INT 1
3481: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
3482: LD_INT 6
3484: PPUSH
3485: LD_INT 1
3487: PPUSH
3488: LD_INT 1
3490: PPUSH
3491: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
3495: LD_INT 15
3497: PPUSH
3498: LD_INT 1
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
3508: LD_INT 20
3510: PPUSH
3511: LD_INT 1
3513: PPUSH
3514: LD_INT 1
3516: PPUSH
3517: CALL_OW 324
// end ;
3521: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
3522: LD_EXP 13
3526: IFFALSE 4149
3528: GO 3530
3530: DISABLE
3531: LD_INT 0
3533: PPUSH
3534: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
3535: LD_ADDR_VAR 0 1
3539: PUSH
3540: LD_EXP 26
3544: PPUSH
3545: LD_INT 26
3547: PUSH
3548: LD_INT 1
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PPUSH
3555: CALL_OW 72
3559: PPUSH
3560: LD_STRING D5-Sol1-1
3562: PPUSH
3563: CALL 519 0 2
3567: ST_TO_ADDR
// if not sol then
3568: LD_VAR 0 1
3572: NOT
3573: IFFALSE 3577
// exit ;
3575: GO 4149
// repeat wait ( 0 0$01 ) ;
3577: LD_INT 35
3579: PPUSH
3580: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
3584: LD_INT 22
3586: PUSH
3587: LD_INT 2
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: PUSH
3594: LD_INT 21
3596: PUSH
3597: LD_INT 1
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PPUSH
3608: CALL_OW 69
3612: PUSH
3613: LD_INT 0
3615: EQUAL
3616: IFFALSE 3577
// if IsOk ( sol ) then
3618: LD_VAR 0 1
3622: PPUSH
3623: CALL_OW 302
3627: IFFALSE 3647
// begin sol2 := others diff sol ;
3629: LD_ADDR_VAR 0 2
3633: PUSH
3634: LD_EXP 26
3638: PUSH
3639: LD_VAR 0 1
3643: DIFF
3644: ST_TO_ADDR
// end else
3645: GO 3649
// exit ;
3647: GO 4149
// if not Lisa and not sol2 then
3649: LD_EXP 22
3653: NOT
3654: PUSH
3655: LD_VAR 0 2
3659: NOT
3660: AND
3661: IFFALSE 3665
// exit ;
3663: GO 4149
// DialogueOn ;
3665: CALL_OW 6
// if Lisa then
3669: LD_EXP 22
3673: IFFALSE 3689
// Say ( Lisa , D5a-Lisa-1 ) else
3675: LD_EXP 22
3679: PPUSH
3680: LD_STRING D5a-Lisa-1
3682: PPUSH
3683: CALL_OW 88
3687: GO 3764
// if sol2 then
3689: LD_VAR 0 2
3693: IFFALSE 3764
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3695: LD_VAR 0 2
3699: PUSH
3700: LD_INT 1
3702: ARRAY
3703: PPUSH
3704: CALL_OW 258
3708: PUSH
3709: LD_INT 1
3711: DOUBLE
3712: EQUAL
3713: IFTRUE 3717
3715: GO 3736
3717: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
3718: LD_VAR 0 2
3722: PUSH
3723: LD_INT 1
3725: ARRAY
3726: PPUSH
3727: LD_STRING D5-Sol2-1
3729: PPUSH
3730: CALL_OW 88
3734: GO 3764
3736: LD_INT 2
3738: DOUBLE
3739: EQUAL
3740: IFTRUE 3744
3742: GO 3763
3744: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
3745: LD_VAR 0 2
3749: PUSH
3750: LD_INT 1
3752: ARRAY
3753: PPUSH
3754: LD_STRING D5-FSol2-1
3756: PPUSH
3757: CALL_OW 88
3761: GO 3764
3763: POP
// Say ( sol , D5-Sol1-2 ) ;
3764: LD_VAR 0 1
3768: PPUSH
3769: LD_STRING D5-Sol1-2
3771: PPUSH
3772: CALL_OW 88
// if Lisa then
3776: LD_EXP 22
3780: IFFALSE 3796
// Say ( Lisa , D5a-Lisa-2 ) else
3782: LD_EXP 22
3786: PPUSH
3787: LD_STRING D5a-Lisa-2
3789: PPUSH
3790: CALL_OW 88
3794: GO 3871
// if sol2 then
3796: LD_VAR 0 2
3800: IFFALSE 3871
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3802: LD_VAR 0 2
3806: PUSH
3807: LD_INT 1
3809: ARRAY
3810: PPUSH
3811: CALL_OW 258
3815: PUSH
3816: LD_INT 1
3818: DOUBLE
3819: EQUAL
3820: IFTRUE 3824
3822: GO 3843
3824: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
3825: LD_VAR 0 2
3829: PUSH
3830: LD_INT 1
3832: ARRAY
3833: PPUSH
3834: LD_STRING D5-Sol2-2
3836: PPUSH
3837: CALL_OW 88
3841: GO 3871
3843: LD_INT 2
3845: DOUBLE
3846: EQUAL
3847: IFTRUE 3851
3849: GO 3870
3851: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
3852: LD_VAR 0 2
3856: PUSH
3857: LD_INT 1
3859: ARRAY
3860: PPUSH
3861: LD_STRING D5-FSol2-2
3863: PPUSH
3864: CALL_OW 88
3868: GO 3871
3870: POP
// Say ( sol , D5a-Sol1-3 ) ;
3871: LD_VAR 0 1
3875: PPUSH
3876: LD_STRING D5a-Sol1-3
3878: PPUSH
3879: CALL_OW 88
// if Lisa then
3883: LD_EXP 22
3887: IFFALSE 3901
// Say ( Lisa , D5a-Lisa-3 ) ;
3889: LD_EXP 22
3893: PPUSH
3894: LD_STRING D5a-Lisa-3
3896: PPUSH
3897: CALL_OW 88
// if not sol2 then
3901: LD_VAR 0 2
3905: NOT
3906: IFFALSE 3914
// begin DialogueOff ;
3908: CALL_OW 7
// exit ;
3912: GO 4149
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
3914: LD_VAR 0 2
3918: PUSH
3919: LD_INT 1
3921: ARRAY
3922: PPUSH
3923: CALL_OW 258
3927: PUSH
3928: LD_INT 1
3930: DOUBLE
3931: EQUAL
3932: IFTRUE 3936
3934: GO 3955
3936: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
3937: LD_VAR 0 2
3941: PUSH
3942: LD_INT 1
3944: ARRAY
3945: PPUSH
3946: LD_STRING D5-Sol2-3
3948: PPUSH
3949: CALL_OW 88
3953: GO 3983
3955: LD_INT 2
3957: DOUBLE
3958: EQUAL
3959: IFTRUE 3963
3961: GO 3982
3963: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
3964: LD_VAR 0 2
3968: PUSH
3969: LD_INT 1
3971: ARRAY
3972: PPUSH
3973: LD_STRING D5-FSol2-3
3975: PPUSH
3976: CALL_OW 88
3980: GO 3983
3982: POP
// Say ( sol , D5-Sol1-4 ) ;
3983: LD_VAR 0 1
3987: PPUSH
3988: LD_STRING D5-Sol1-4
3990: PPUSH
3991: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3995: LD_VAR 0 2
3999: PUSH
4000: LD_INT 1
4002: ARRAY
4003: PPUSH
4004: CALL_OW 258
4008: PUSH
4009: LD_INT 1
4011: DOUBLE
4012: EQUAL
4013: IFTRUE 4017
4015: GO 4036
4017: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4018: LD_VAR 0 2
4022: PUSH
4023: LD_INT 1
4025: ARRAY
4026: PPUSH
4027: LD_STRING D5-Sol2-4
4029: PPUSH
4030: CALL_OW 88
4034: GO 4064
4036: LD_INT 2
4038: DOUBLE
4039: EQUAL
4040: IFTRUE 4044
4042: GO 4063
4044: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4045: LD_VAR 0 2
4049: PUSH
4050: LD_INT 1
4052: ARRAY
4053: PPUSH
4054: LD_STRING D5-FSol2-4
4056: PPUSH
4057: CALL_OW 88
4061: GO 4064
4063: POP
// Say ( sol , D5-Sol1-5 ) ;
4064: LD_VAR 0 1
4068: PPUSH
4069: LD_STRING D5-Sol1-5
4071: PPUSH
4072: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4076: LD_VAR 0 2
4080: PUSH
4081: LD_INT 1
4083: ARRAY
4084: PPUSH
4085: CALL_OW 258
4089: PUSH
4090: LD_INT 1
4092: DOUBLE
4093: EQUAL
4094: IFTRUE 4098
4096: GO 4117
4098: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4099: LD_VAR 0 2
4103: PUSH
4104: LD_INT 1
4106: ARRAY
4107: PPUSH
4108: LD_STRING D5-Sol2-5
4110: PPUSH
4111: CALL_OW 88
4115: GO 4145
4117: LD_INT 2
4119: DOUBLE
4120: EQUAL
4121: IFTRUE 4125
4123: GO 4144
4125: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4126: LD_VAR 0 2
4130: PUSH
4131: LD_INT 1
4133: ARRAY
4134: PPUSH
4135: LD_STRING D5-FSol2-5
4137: PPUSH
4138: CALL_OW 88
4142: GO 4145
4144: POP
// DialogueOff ;
4145: CALL_OW 7
// end ;
4149: PPOPN 2
4151: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4152: LD_INT 22
4154: PUSH
4155: LD_INT 1
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 25
4164: PUSH
4165: LD_INT 16
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PPUSH
4176: CALL_OW 69
4180: PUSH
4181: LD_INT 5
4183: GREATEREQUAL
4184: IFFALSE 4204
4186: GO 4188
4188: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4189: LD_STRING M1b
4191: PPUSH
4192: CALL_OW 337
// apeman_army := true ;
4196: LD_ADDR_EXP 9
4200: PUSH
4201: LD_INT 1
4203: ST_TO_ADDR
// end ;
4204: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4205: LD_INT 22
4207: PUSH
4208: LD_INT 1
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PUSH
4215: LD_INT 30
4217: PUSH
4218: LD_INT 3
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: PUSH
4225: LD_INT 57
4227: PUSH
4228: EMPTY
4229: LIST
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: LIST
4235: PPUSH
4236: CALL_OW 69
4240: IFFALSE 4252
4242: GO 4244
4244: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4245: LD_STRING M1c
4247: PPUSH
4248: CALL_OW 337
4252: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4253: LD_INT 6
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: CALL_OW 321
4263: PUSH
4264: LD_INT 2
4266: EQUAL
4267: IFFALSE 4287
4269: GO 4271
4271: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4272: LD_STRING M2a
4274: PPUSH
4275: CALL_OW 337
// radar_researched := true ;
4279: LD_ADDR_EXP 10
4283: PUSH
4284: LD_INT 1
4286: ST_TO_ADDR
// end ;
4287: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4288: LD_INT 22
4290: PUSH
4291: LD_INT 1
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 2
4300: PUSH
4301: LD_INT 34
4303: PUSH
4304: LD_INT 11
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 35
4313: PUSH
4314: LD_INT 11
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: LIST
4325: PUSH
4326: EMPTY
4327: LIST
4328: LIST
4329: PPUSH
4330: CALL_OW 69
4334: IFFALSE 4354
4336: GO 4338
4338: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4339: LD_STRING M2b
4341: PPUSH
4342: CALL_OW 337
// radar_builded := true ;
4346: LD_ADDR_EXP 11
4350: PUSH
4351: LD_INT 1
4353: ST_TO_ADDR
// end ;
4354: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4355: LD_INT 22
4357: PUSH
4358: LD_INT 0
4360: PUSH
4361: EMPTY
4362: LIST
4363: LIST
4364: PUSH
4365: LD_INT 25
4367: PUSH
4368: LD_INT 12
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PUSH
4375: EMPTY
4376: LIST
4377: LIST
4378: PPUSH
4379: CALL_OW 69
4383: PUSH
4384: LD_INT 0
4386: EQUAL
4387: PUSH
4388: LD_EXP 8
4392: NOT
4393: AND
4394: IFFALSE 4406
4396: GO 4398
4398: DISABLE
// YouLost ( Apeman ) ;
4399: LD_STRING Apeman
4401: PPUSH
4402: CALL_OW 104
4406: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
4407: LD_INT 22
4409: PUSH
4410: LD_INT 1
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: LD_INT 25
4419: PUSH
4420: LD_INT 16
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PUSH
4436: LD_INT 7
4438: GREATEREQUAL
4439: IFFALSE 4537
4441: GO 4443
4443: DISABLE
4444: LD_INT 0
4446: PPUSH
4447: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
4448: LD_ADDR_VAR 0 2
4452: PUSH
4453: LD_INT 22
4455: PUSH
4456: LD_INT 1
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: PUSH
4463: LD_INT 21
4465: PUSH
4466: LD_INT 1
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: PUSH
4473: LD_INT 25
4475: PUSH
4476: LD_INT 4
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: EMPTY
4484: LIST
4485: LIST
4486: LIST
4487: PPUSH
4488: CALL_OW 69
4492: PUSH
4493: LD_EXP 16
4497: ADD
4498: ST_TO_ADDR
// if filter then
4499: LD_VAR 0 2
4503: IFFALSE 4537
// for i in filter do
4505: LD_ADDR_VAR 0 1
4509: PUSH
4510: LD_VAR 0 2
4514: PUSH
4515: FOR_IN
4516: IFFALSE 4535
// AddExperience ( i , 4 , 3500 ) ;
4518: LD_VAR 0 1
4522: PPUSH
4523: LD_INT 4
4525: PPUSH
4526: LD_INT 3500
4528: PPUSH
4529: CALL_OW 492
4533: GO 4515
4535: POP
4536: POP
// end ;
4537: PPOPN 2
4539: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
4540: LD_EXP 14
4544: IFFALSE 5678
4546: GO 4548
4548: DISABLE
4549: LD_INT 0
4551: PPUSH
4552: PPUSH
4553: PPUSH
4554: PPUSH
4555: PPUSH
// begin if apeKillCounter = 0 then
4556: LD_EXP 15
4560: PUSH
4561: LD_INT 0
4563: EQUAL
4564: IFFALSE 4573
// SetAchievement ( ACH_APEKILLER ) ;
4566: LD_STRING ACH_APEKILLER
4568: PPUSH
4569: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
4573: LD_INT 22
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PPUSH
4583: CALL_OW 69
4587: IFFALSE 4625
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
4589: LD_ADDR_VAR 0 1
4593: PUSH
4594: LD_INT 22
4596: PUSH
4597: LD_INT 2
4599: PUSH
4600: EMPTY
4601: LIST
4602: LIST
4603: PPUSH
4604: CALL_OW 69
4608: PUSH
4609: FOR_IN
4610: IFFALSE 4623
// RemoveUnit ( i ) ;
4612: LD_VAR 0 1
4616: PPUSH
4617: CALL_OW 64
4621: GO 4609
4623: POP
4624: POP
// m1 := false ;
4625: LD_ADDR_VAR 0 3
4629: PUSH
4630: LD_INT 0
4632: ST_TO_ADDR
// m2 := false ;
4633: LD_ADDR_VAR 0 4
4637: PUSH
4638: LD_INT 0
4640: ST_TO_ADDR
// m3 := false ;
4641: LD_ADDR_VAR 0 5
4645: PUSH
4646: LD_INT 0
4648: ST_TO_ADDR
// if apeman_army then
4649: LD_EXP 9
4653: IFFALSE 4675
// begin AddMedal ( Tame , 1 ) ;
4655: LD_STRING Tame
4657: PPUSH
4658: LD_INT 1
4660: PPUSH
4661: CALL_OW 101
// m1 := true ;
4665: LD_ADDR_VAR 0 3
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// end else
4673: GO 4686
// AddMedal ( Tame , - 1 ) ;
4675: LD_STRING Tame
4677: PPUSH
4678: LD_INT 1
4680: NEG
4681: PPUSH
4682: CALL_OW 101
// if radar_researched then
4686: LD_EXP 10
4690: IFFALSE 4722
// begin SaveVariable ( true , radarResInDelta ) ;
4692: LD_INT 1
4694: PPUSH
4695: LD_STRING radarResInDelta
4697: PPUSH
4698: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
4702: LD_STRING Radar
4704: PPUSH
4705: LD_INT 1
4707: PPUSH
4708: CALL_OW 101
// m2 := true ;
4712: LD_ADDR_VAR 0 4
4716: PUSH
4717: LD_INT 1
4719: ST_TO_ADDR
// end else
4720: GO 4752
// if radar_allowed then
4722: LD_EXP 7
4726: IFFALSE 4741
// AddMedal ( Radar , - 2 ) else
4728: LD_STRING Radar
4730: PPUSH
4731: LD_INT 2
4733: NEG
4734: PPUSH
4735: CALL_OW 101
4739: GO 4752
// AddMedal ( Radar , - 1 ) ;
4741: LD_STRING Radar
4743: PPUSH
4744: LD_INT 1
4746: NEG
4747: PPUSH
4748: CALL_OW 101
// if radar_builded then
4752: LD_EXP 11
4756: IFFALSE 4778
// begin AddMedal ( BuildRadar , 1 ) ;
4758: LD_STRING BuildRadar
4760: PPUSH
4761: LD_INT 1
4763: PPUSH
4764: CALL_OW 101
// m3 := true ;
4768: LD_ADDR_VAR 0 5
4772: PUSH
4773: LD_INT 1
4775: ST_TO_ADDR
// end else
4776: GO 4789
// AddMedal ( BuildRadar , - 1 ) ;
4778: LD_STRING BuildRadar
4780: PPUSH
4781: LD_INT 1
4783: NEG
4784: PPUSH
4785: CALL_OW 101
// if tick <= 7 7$00 then
4789: LD_OWVAR 1
4793: PUSH
4794: LD_INT 14700
4796: LESSEQUAL
4797: IFFALSE 4806
// SetAchievement ( ACH_ASPEED_5 ) ;
4799: LD_STRING ACH_ASPEED_5
4801: PPUSH
4802: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
4806: LD_VAR 0 3
4810: PUSH
4811: LD_VAR 0 4
4815: AND
4816: PUSH
4817: LD_VAR 0 5
4821: AND
4822: PUSH
4823: LD_OWVAR 67
4827: PUSH
4828: LD_INT 3
4830: GREATEREQUAL
4831: AND
4832: IFFALSE 4844
// SetAchievementEX ( ACH_AMER , 5 ) ;
4834: LD_STRING ACH_AMER
4836: PPUSH
4837: LD_INT 5
4839: PPUSH
4840: CALL_OW 564
// GiveMedals ( MAIN ) ;
4844: LD_STRING MAIN
4846: PPUSH
4847: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
4851: LD_ADDR_VAR 0 2
4855: PUSH
4856: LD_INT 22
4858: PUSH
4859: LD_INT 1
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: LD_INT 21
4868: PUSH
4869: LD_INT 1
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: LD_INT 2
4878: PUSH
4879: LD_INT 25
4881: PUSH
4882: LD_INT 1
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: LD_INT 25
4891: PUSH
4892: LD_INT 2
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: LD_INT 25
4901: PUSH
4902: LD_INT 3
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 25
4911: PUSH
4912: LD_INT 4
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: EMPTY
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: PUSH
4926: EMPTY
4927: LIST
4928: LIST
4929: LIST
4930: PPUSH
4931: CALL_OW 69
4935: ST_TO_ADDR
// RewardPeople ( tmp ) ;
4936: LD_VAR 0 2
4940: PPUSH
4941: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4945: LD_EXP 16
4949: PPUSH
4950: LD_EXP 2
4954: PUSH
4955: LD_STRING JMM
4957: STR
4958: PPUSH
4959: CALL_OW 38
// if IsOk ( Gladstone ) then
4963: LD_EXP 17
4967: PPUSH
4968: CALL_OW 302
4972: IFFALSE 4992
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4974: LD_EXP 17
4978: PPUSH
4979: LD_EXP 2
4983: PUSH
4984: LD_STRING Gladstone
4986: STR
4987: PPUSH
4988: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
4992: LD_EXP 19
4996: PPUSH
4997: CALL_OW 302
5001: PUSH
5002: LD_EXP 19
5006: PPUSH
5007: CALL_OW 255
5011: PUSH
5012: LD_INT 1
5014: EQUAL
5015: AND
5016: IFFALSE 5046
// begin SaveCharacters ( Denis , mission_prefix & Denis ) ;
5018: LD_EXP 19
5022: PPUSH
5023: LD_EXP 2
5027: PUSH
5028: LD_STRING Denis
5030: STR
5031: PPUSH
5032: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5036: LD_INT 1
5038: PPUSH
5039: LD_STRING DenisInDelta
5041: PPUSH
5042: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5046: LD_EXP 22
5050: PPUSH
5051: CALL_OW 302
5055: IFFALSE 5075
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5057: LD_EXP 22
5061: PPUSH
5062: LD_EXP 2
5066: PUSH
5067: LD_STRING Lisa
5069: STR
5070: PPUSH
5071: CALL_OW 38
// end ; if IsOk ( Frank ) then
5075: LD_EXP 23
5079: PPUSH
5080: CALL_OW 302
5084: IFFALSE 5104
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5086: LD_EXP 23
5090: PPUSH
5091: LD_EXP 2
5095: PUSH
5096: LD_STRING Frank
5098: STR
5099: PPUSH
5100: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5104: LD_EXP 24
5108: PPUSH
5109: CALL_OW 302
5113: IFFALSE 5133
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5115: LD_EXP 24
5119: PPUSH
5120: LD_EXP 2
5124: PUSH
5125: LD_STRING Bobby
5127: STR
5128: PPUSH
5129: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5133: LD_EXP 25
5137: PPUSH
5138: CALL_OW 302
5142: IFFALSE 5162
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5144: LD_EXP 25
5148: PPUSH
5149: LD_EXP 2
5153: PUSH
5154: LD_STRING Cyrus
5156: STR
5157: PPUSH
5158: CALL_OW 38
// end ; if IsOk ( Brown ) then
5162: LD_EXP 20
5166: PPUSH
5167: CALL_OW 302
5171: IFFALSE 5191
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5173: LD_EXP 20
5177: PPUSH
5178: LD_EXP 2
5182: PUSH
5183: LD_STRING Brown
5185: STR
5186: PPUSH
5187: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5191: LD_EXP 21
5195: PPUSH
5196: CALL_OW 302
5200: IFFALSE 5220
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5202: LD_EXP 21
5206: PPUSH
5207: LD_EXP 2
5211: PUSH
5212: LD_STRING Donaldson
5214: STR
5215: PPUSH
5216: CALL_OW 38
// end ; if others then
5220: LD_EXP 26
5224: IFFALSE 5238
// SaveCharacters ( others , othersInDelta ) ;
5226: LD_EXP 26
5230: PPUSH
5231: LD_STRING othersInDelta
5233: PPUSH
5234: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5238: LD_INT 22
5240: PUSH
5241: LD_INT 1
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PUSH
5248: LD_INT 25
5250: PUSH
5251: LD_INT 16
5253: PUSH
5254: EMPTY
5255: LIST
5256: LIST
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PPUSH
5262: CALL_OW 69
5266: IFFALSE 5304
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) , apeInDelta ) ;
5268: LD_INT 22
5270: PUSH
5271: LD_INT 1
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: PUSH
5278: LD_INT 25
5280: PUSH
5281: LD_INT 16
5283: PUSH
5284: EMPTY
5285: LIST
5286: LIST
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: PPUSH
5292: CALL_OW 69
5296: PPUSH
5297: LD_STRING apeInDelta
5299: PPUSH
5300: CALL_OW 38
// tmp := [ ] ;
5304: LD_ADDR_VAR 0 2
5308: PUSH
5309: EMPTY
5310: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5311: LD_INT 22
5313: PUSH
5314: LD_INT 1
5316: PUSH
5317: EMPTY
5318: LIST
5319: LIST
5320: PUSH
5321: LD_INT 21
5323: PUSH
5324: LD_INT 2
5326: PUSH
5327: EMPTY
5328: LIST
5329: LIST
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PPUSH
5335: CALL_OW 69
5339: IFFALSE 5450
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
5341: LD_ADDR_VAR 0 1
5345: PUSH
5346: LD_INT 22
5348: PUSH
5349: LD_INT 1
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: PUSH
5356: LD_INT 21
5358: PUSH
5359: LD_INT 2
5361: PUSH
5362: EMPTY
5363: LIST
5364: LIST
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PPUSH
5370: CALL_OW 69
5374: PUSH
5375: FOR_IN
5376: IFFALSE 5448
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
5378: LD_ADDR_VAR 0 2
5382: PUSH
5383: LD_VAR 0 2
5387: PUSH
5388: LD_VAR 0 1
5392: PPUSH
5393: CALL_OW 248
5397: PUSH
5398: LD_VAR 0 1
5402: PPUSH
5403: CALL_OW 265
5407: PUSH
5408: LD_VAR 0 1
5412: PPUSH
5413: CALL_OW 262
5417: PUSH
5418: LD_VAR 0 1
5422: PPUSH
5423: CALL_OW 263
5427: PUSH
5428: LD_VAR 0 1
5432: PPUSH
5433: CALL_OW 264
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: LIST
5442: LIST
5443: LIST
5444: ADD
5445: ST_TO_ADDR
5446: GO 5375
5448: POP
5449: POP
// if tmp then
5450: LD_VAR 0 2
5454: IFFALSE 5468
// SaveVariable ( tmp , vehiclesInDelta ) ;
5456: LD_VAR 0 2
5460: PPUSH
5461: LD_STRING vehiclesInDelta
5463: PPUSH
5464: CALL_OW 39
// tmp := [ ] ;
5468: LD_ADDR_VAR 0 2
5472: PUSH
5473: EMPTY
5474: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
5475: LD_INT 22
5477: PUSH
5478: LD_INT 1
5480: PUSH
5481: EMPTY
5482: LIST
5483: LIST
5484: PUSH
5485: LD_INT 21
5487: PUSH
5488: LD_INT 3
5490: PUSH
5491: EMPTY
5492: LIST
5493: LIST
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PPUSH
5499: CALL_OW 69
5503: IFFALSE 5656
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
5505: LD_ADDR_VAR 0 1
5509: PUSH
5510: LD_INT 22
5512: PUSH
5513: LD_INT 1
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: LD_INT 21
5522: PUSH
5523: LD_INT 3
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: PUSH
5530: EMPTY
5531: LIST
5532: LIST
5533: PPUSH
5534: CALL_OW 69
5538: PUSH
5539: FOR_IN
5540: IFFALSE 5654
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
5542: LD_ADDR_VAR 0 2
5546: PUSH
5547: LD_VAR 0 2
5551: PUSH
5552: LD_VAR 0 1
5556: PPUSH
5557: CALL_OW 266
5561: PUSH
5562: LD_VAR 0 1
5566: PPUSH
5567: CALL_OW 267
5571: PUSH
5572: LD_VAR 0 1
5576: PPUSH
5577: CALL_OW 250
5581: PUSH
5582: LD_VAR 0 1
5586: PPUSH
5587: CALL_OW 251
5591: PUSH
5592: LD_VAR 0 1
5596: PPUSH
5597: CALL_OW 254
5601: PUSH
5602: LD_VAR 0 1
5606: PPUSH
5607: LD_INT 1
5609: PPUSH
5610: CALL_OW 268
5614: PUSH
5615: LD_VAR 0 1
5619: PPUSH
5620: LD_INT 2
5622: PPUSH
5623: CALL_OW 268
5627: PUSH
5628: LD_VAR 0 1
5632: PPUSH
5633: CALL_OW 269
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: PUSH
5648: EMPTY
5649: LIST
5650: ADD
5651: ST_TO_ADDR
5652: GO 5539
5654: POP
5655: POP
// if tmp then
5656: LD_VAR 0 2
5660: IFFALSE 5674
// SaveVariable ( tmp , buildingsInDelta ) ;
5662: LD_VAR 0 2
5666: PPUSH
5667: LD_STRING buildingsInDelta
5669: PPUSH
5670: CALL_OW 39
// YouWin ;
5674: CALL_OW 103
// end ; end_of_file
5678: PPOPN 5
5680: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
5681: LD_INT 0
5683: PPUSH
5684: PPUSH
5685: PPUSH
5686: PPUSH
// InitHc ;
5687: CALL_OW 19
// InitUc ;
5691: CALL_OW 18
// uc_side := 2 ;
5695: LD_ADDR_OWVAR 20
5699: PUSH
5700: LD_INT 2
5702: ST_TO_ADDR
// uc_nation := 2 ;
5703: LD_ADDR_OWVAR 21
5707: PUSH
5708: LD_INT 2
5710: ST_TO_ADDR
// if not amount then
5711: LD_VAR 0 1
5715: NOT
5716: IFFALSE 5720
// exit ;
5718: GO 5843
// for i = 1 to amount do
5720: LD_ADDR_VAR 0 5
5724: PUSH
5725: DOUBLE
5726: LD_INT 1
5728: DEC
5729: ST_TO_ADDR
5730: LD_VAR 0 1
5734: PUSH
5735: FOR_TO
5736: IFFALSE 5831
// begin PrepareHuman ( false , 1 , skill ) ;
5738: LD_INT 0
5740: PPUSH
5741: LD_INT 1
5743: PPUSH
5744: LD_VAR 0 2
5748: PPUSH
5749: CALL_OW 380
// un := CreateHuman ;
5753: LD_ADDR_VAR 0 6
5757: PUSH
5758: CALL_OW 44
5762: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
5763: LD_ADDR_VAR 0 7
5767: PUSH
5768: LD_VAR 0 7
5772: PPUSH
5773: LD_INT 1
5775: PPUSH
5776: LD_VAR 0 6
5780: PPUSH
5781: CALL_OW 2
5785: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5786: LD_VAR 0 6
5790: PPUSH
5791: LD_VAR 0 3
5795: PPUSH
5796: LD_INT 0
5798: PPUSH
5799: CALL_OW 49
// if i mod 2 = 0 then
5803: LD_VAR 0 5
5807: PUSH
5808: LD_INT 2
5810: MOD
5811: PUSH
5812: LD_INT 0
5814: EQUAL
5815: IFFALSE 5829
// SetTag ( un , 11 ) ;
5817: LD_VAR 0 6
5821: PPUSH
5822: LD_INT 11
5824: PPUSH
5825: CALL_OW 109
// end ;
5829: GO 5735
5831: POP
5832: POP
// result := tmp ;
5833: LD_ADDR_VAR 0 4
5837: PUSH
5838: LD_VAR 0 7
5842: ST_TO_ADDR
// end ;
5843: LD_VAR 0 4
5847: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
5848: LD_EXP 6
5852: IFFALSE 6755
5854: GO 5856
5856: DISABLE
5857: LD_INT 0
5859: PPUSH
5860: PPUSH
5861: PPUSH
5862: PPUSH
5863: PPUSH
5864: PPUSH
5865: PPUSH
5866: PPUSH
// begin more_troops := false ;
5867: LD_ADDR_VAR 0 3
5871: PUSH
5872: LD_INT 0
5874: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
5875: LD_ADDR_VAR 0 4
5879: PUSH
5880: LD_INT 3
5882: PUSH
5883: LD_INT 4
5885: PUSH
5886: LD_INT 5
5888: PUSH
5889: LD_INT 5
5891: PUSH
5892: EMPTY
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: PUSH
5898: LD_OWVAR 67
5902: ARRAY
5903: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
5904: LD_ADDR_VAR 0 2
5908: PUSH
5909: LD_INT 10500
5911: PUSH
5912: LD_INT 8400
5914: PUSH
5915: LD_INT 6300
5917: PUSH
5918: LD_INT 5250
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: PUSH
5927: LD_OWVAR 67
5931: ARRAY
5932: ST_TO_ADDR
// force := [ ] ;
5933: LD_ADDR_VAR 0 8
5937: PUSH
5938: EMPTY
5939: ST_TO_ADDR
// ar_forces := [ ] ;
5940: LD_ADDR_EXP 27
5944: PUSH
5945: EMPTY
5946: ST_TO_ADDR
// ap_killers := [ ] ;
5947: LD_ADDR_EXP 28
5951: PUSH
5952: EMPTY
5953: ST_TO_ADDR
// Wait ( timer ) ;
5954: LD_VAR 0 2
5958: PPUSH
5959: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
5963: LD_EXP 19
5967: PUSH
5968: LD_EXP 19
5972: PPUSH
5973: CALL_OW 255
5977: PUSH
5978: LD_INT 4
5980: EQUAL
5981: AND
5982: IFFALSE 5991
// Wait ( 0 0$45 ) ;
5984: LD_INT 1575
5986: PPUSH
5987: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
5991: LD_INT 22
5993: PUSH
5994: LD_INT 1
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 30
6003: PUSH
6004: LD_INT 4
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: PPUSH
6015: CALL_OW 69
6019: IFFALSE 6036
// begin Wait ( 1 1$25 ) ;
6021: LD_INT 2975
6023: PPUSH
6024: CALL_OW 67
// more_troops := true ;
6028: LD_ADDR_VAR 0 3
6032: PUSH
6033: LD_INT 1
6035: ST_TO_ADDR
// end ; if more_troops then
6036: LD_VAR 0 3
6040: IFFALSE 6236
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6042: LD_ADDR_VAR 0 8
6046: PUSH
6047: LD_INT 4
6049: PUSH
6050: LD_INT 5
6052: PUSH
6053: LD_INT 6
6055: PUSH
6056: LD_INT 7
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: PUSH
6065: LD_OWVAR 67
6069: ARRAY
6070: PPUSH
6071: LD_VAR 0 4
6075: PPUSH
6076: LD_INT 14
6078: PPUSH
6079: CALL 5681 0 3
6083: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6084: LD_ADDR_VAR 0 7
6088: PUSH
6089: LD_INT 2
6091: PPUSH
6092: LD_INT 3
6094: PPUSH
6095: LD_INT 22
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: LD_INT 1
6103: PPUSH
6104: LD_INT 42
6106: PUSH
6107: LD_INT 42
6109: PUSH
6110: LD_INT 43
6112: PUSH
6113: LD_INT 44
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: PUSH
6122: LD_OWVAR 67
6126: ARRAY
6127: PPUSH
6128: LD_INT 90
6130: PPUSH
6131: CALL 431 0 7
6135: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6136: LD_VAR 0 7
6140: PPUSH
6141: LD_INT 4
6143: PPUSH
6144: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6148: LD_VAR 0 7
6152: PPUSH
6153: LD_INT 13
6155: PPUSH
6156: LD_INT 0
6158: PPUSH
6159: CALL_OW 49
// uc_side := 2 ;
6163: LD_ADDR_OWVAR 20
6167: PUSH
6168: LD_INT 2
6170: ST_TO_ADDR
// uc_nation := 2 ;
6171: LD_ADDR_OWVAR 21
6175: PUSH
6176: LD_INT 2
6178: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6179: LD_INT 0
6181: PPUSH
6182: LD_INT 1
6184: PPUSH
6185: LD_VAR 0 4
6189: PPUSH
6190: CALL_OW 380
// un := CreateHuman ;
6194: LD_ADDR_VAR 0 6
6198: PUSH
6199: CALL_OW 44
6203: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6204: LD_VAR 0 6
6208: PPUSH
6209: LD_VAR 0 7
6213: PPUSH
6214: CALL_OW 52
// force := force ^ un ;
6218: LD_ADDR_VAR 0 8
6222: PUSH
6223: LD_VAR 0 8
6227: PUSH
6228: LD_VAR 0 6
6232: ADD
6233: ST_TO_ADDR
// end else
6234: GO 6278
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6236: LD_ADDR_VAR 0 8
6240: PUSH
6241: LD_INT 3
6243: PUSH
6244: LD_INT 4
6246: PUSH
6247: LD_INT 5
6249: PUSH
6250: LD_INT 6
6252: PUSH
6253: EMPTY
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: PUSH
6259: LD_OWVAR 67
6263: ARRAY
6264: PPUSH
6265: LD_VAR 0 4
6269: PPUSH
6270: LD_INT 14
6272: PPUSH
6273: CALL 5681 0 3
6277: ST_TO_ADDR
// end ; if force then
6278: LD_VAR 0 8
6282: IFFALSE 6294
// ar_forces := force ;
6284: LD_ADDR_EXP 27
6288: PUSH
6289: LD_VAR 0 8
6293: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6294: LD_INT 35
6296: PPUSH
6297: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6301: LD_INT 22
6303: PUSH
6304: LD_INT 2
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 21
6313: PUSH
6314: LD_INT 1
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PPUSH
6325: CALL_OW 69
6329: PUSH
6330: LD_INT 0
6332: EQUAL
6333: IFFALSE 6294
// Wait ( timer ) ;
6335: LD_VAR 0 2
6339: PPUSH
6340: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
6344: LD_ADDR_VAR 0 8
6348: PUSH
6349: LD_INT 4
6351: PUSH
6352: LD_INT 5
6354: PUSH
6355: LD_INT 6
6357: PUSH
6358: LD_INT 7
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: PUSH
6367: LD_OWVAR 67
6371: ARRAY
6372: PPUSH
6373: LD_VAR 0 4
6377: PPUSH
6378: LD_INT 13
6380: PUSH
6381: LD_INT 14
6383: PUSH
6384: EMPTY
6385: LIST
6386: LIST
6387: PUSH
6388: LD_INT 1
6390: PPUSH
6391: LD_INT 2
6393: PPUSH
6394: CALL_OW 12
6398: ARRAY
6399: PPUSH
6400: CALL 5681 0 3
6404: ST_TO_ADDR
// if Difficulty > 1 and Delta then
6405: LD_OWVAR 67
6409: PUSH
6410: LD_INT 1
6412: GREATER
6413: PUSH
6414: LD_EXP 6
6418: AND
6419: IFFALSE 6498
// begin uc_side := 2 ;
6421: LD_ADDR_OWVAR 20
6425: PUSH
6426: LD_INT 2
6428: ST_TO_ADDR
// uc_nation := 2 ;
6429: LD_ADDR_OWVAR 21
6433: PUSH
6434: LD_INT 2
6436: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
6437: LD_INT 0
6439: PPUSH
6440: LD_INT 2
6442: PPUSH
6443: LD_VAR 0 4
6447: PPUSH
6448: CALL_OW 380
// eng := CreateHuman ;
6452: LD_ADDR_VAR 0 5
6456: PUSH
6457: CALL_OW 44
6461: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
6462: LD_VAR 0 5
6466: PPUSH
6467: LD_INT 13
6469: PPUSH
6470: LD_INT 0
6472: PPUSH
6473: CALL_OW 49
// Wait ( 3 ) ;
6477: LD_INT 3
6479: PPUSH
6480: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
6484: LD_VAR 0 5
6488: PPUSH
6489: LD_EXP 6
6493: PPUSH
6494: CALL_OW 180
// end ; if force then
6498: LD_VAR 0 8
6502: IFFALSE 6514
// ar_forces := force ;
6504: LD_ADDR_EXP 27
6508: PUSH
6509: LD_VAR 0 8
6513: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6514: LD_INT 35
6516: PPUSH
6517: CALL_OW 67
// if eng then
6521: LD_VAR 0 5
6525: IFFALSE 6579
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
6527: LD_EXP 6
6531: PPUSH
6532: CALL_OW 255
6536: PUSH
6537: LD_INT 2
6539: EQUAL
6540: PUSH
6541: LD_VAR 0 5
6545: PPUSH
6546: CALL_OW 302
6550: AND
6551: PUSH
6552: LD_VAR 0 5
6556: PPUSH
6557: CALL_OW 310
6561: NOT
6562: AND
6563: IFFALSE 6579
// ComEnterUnit ( eng , Delta ) ;
6565: LD_VAR 0 5
6569: PPUSH
6570: LD_EXP 6
6574: PPUSH
6575: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6579: LD_INT 22
6581: PUSH
6582: LD_INT 2
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 21
6591: PUSH
6592: LD_INT 1
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: PPUSH
6603: CALL_OW 69
6607: PUSH
6608: LD_INT 0
6610: EQUAL
6611: IFFALSE 6514
// Wait ( 2 2$00 ) ;
6613: LD_INT 4200
6615: PPUSH
6616: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
6620: LD_ADDR_EXP 28
6624: PUSH
6625: LD_INT 1
6627: PUSH
6628: LD_INT 2
6630: PUSH
6631: LD_INT 2
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: PUSH
6643: LD_OWVAR 67
6647: ARRAY
6648: PPUSH
6649: LD_VAR 0 4
6653: PPUSH
6654: LD_INT 13
6656: PPUSH
6657: CALL 5681 0 3
6661: ST_TO_ADDR
// Wait ( timer * 2 ) ;
6662: LD_VAR 0 2
6666: PUSH
6667: LD_INT 2
6669: MUL
6670: PPUSH
6671: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
6675: LD_ADDR_EXP 27
6679: PUSH
6680: LD_INT 5
6682: PUSH
6683: LD_INT 6
6685: PUSH
6686: LD_INT 7
6688: PUSH
6689: LD_INT 8
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: PUSH
6698: LD_OWVAR 67
6702: ARRAY
6703: PPUSH
6704: LD_VAR 0 4
6708: PPUSH
6709: LD_INT 13
6711: PPUSH
6712: CALL 5681 0 3
6716: PUSH
6717: LD_INT 3
6719: PUSH
6720: LD_INT 4
6722: PUSH
6723: LD_INT 4
6725: PUSH
6726: LD_INT 4
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: PUSH
6735: LD_OWVAR 67
6739: ARRAY
6740: PPUSH
6741: LD_VAR 0 4
6745: PPUSH
6746: LD_INT 14
6748: PPUSH
6749: CALL 5681 0 3
6753: ADD
6754: ST_TO_ADDR
// end ;
6755: PPOPN 8
6757: END
// every 0 0$03 trigger ar_forces do var i , target ;
6758: LD_EXP 27
6762: IFFALSE 6960
6764: GO 6766
6766: DISABLE
6767: LD_INT 0
6769: PPUSH
6770: PPUSH
// begin enable ;
6771: ENABLE
// if not ar_forces then
6772: LD_EXP 27
6776: NOT
6777: IFFALSE 6781
// exit ;
6779: GO 6960
// if Delta then
6781: LD_EXP 6
6785: IFFALSE 6799
// target := Delta else
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_EXP 6
6796: ST_TO_ADDR
6797: GO 6809
// target := JMM ;
6799: LD_ADDR_VAR 0 2
6803: PUSH
6804: LD_EXP 16
6808: ST_TO_ADDR
// for i in ar_forces do
6809: LD_ADDR_VAR 0 1
6813: PUSH
6814: LD_EXP 27
6818: PUSH
6819: FOR_IN
6820: IFFALSE 6958
// begin if i in FilterAllUnits ( [ f_driving ] ) then
6822: LD_VAR 0 1
6826: PUSH
6827: LD_INT 55
6829: PUSH
6830: EMPTY
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: IN
6838: IFFALSE 6881
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
6840: LD_VAR 0 1
6844: PPUSH
6845: LD_INT 22
6847: PUSH
6848: LD_INT 1
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PPUSH
6855: CALL_OW 69
6859: PPUSH
6860: LD_VAR 0 1
6864: PPUSH
6865: CALL_OW 310
6869: PPUSH
6870: CALL_OW 74
6874: PPUSH
6875: CALL_OW 115
6879: GO 6956
// if GetDistUnits ( i , target ) > 30 then
6881: LD_VAR 0 1
6885: PPUSH
6886: LD_VAR 0 2
6890: PPUSH
6891: CALL_OW 296
6895: PUSH
6896: LD_INT 30
6898: GREATER
6899: IFFALSE 6932
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
6901: LD_VAR 0 1
6905: PPUSH
6906: LD_VAR 0 2
6910: PPUSH
6911: CALL_OW 250
6915: PPUSH
6916: LD_VAR 0 2
6920: PPUSH
6921: CALL_OW 251
6925: PPUSH
6926: CALL_OW 114
6930: GO 6956
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
6932: LD_VAR 0 1
6936: PPUSH
6937: LD_INT 81
6939: PUSH
6940: LD_INT 2
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PPUSH
6947: CALL_OW 69
6951: PPUSH
6952: CALL 736 0 2
// end ;
6956: GO 6819
6958: POP
6959: POP
// end ;
6960: PPOPN 2
6962: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
6963: LD_EXP 28
6967: IFFALSE 7127
6969: GO 6971
6971: DISABLE
6972: LD_INT 0
6974: PPUSH
6975: PPUSH
6976: PPUSH
// begin enable ;
6977: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
6978: LD_ADDR_VAR 0 1
6982: PUSH
6983: LD_INT 22
6985: PUSH
6986: LD_INT 0
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 25
6995: PUSH
6996: LD_INT 12
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PPUSH
7007: CALL_OW 69
7011: ST_TO_ADDR
// if not filter then
7012: LD_VAR 0 1
7016: NOT
7017: IFFALSE 7044
// begin ar_forces := ar_forces ^ ap_killers ;
7019: LD_ADDR_EXP 27
7023: PUSH
7024: LD_EXP 27
7028: PUSH
7029: LD_EXP 28
7033: ADD
7034: ST_TO_ADDR
// ap_killers := [ ] ;
7035: LD_ADDR_EXP 28
7039: PUSH
7040: EMPTY
7041: ST_TO_ADDR
// exit ;
7042: GO 7127
// end ; for i in ap_killers do
7044: LD_ADDR_VAR 0 2
7048: PUSH
7049: LD_EXP 28
7053: PUSH
7054: FOR_IN
7055: IFFALSE 7125
// begin if not IsOk ( i ) then
7057: LD_VAR 0 2
7061: PPUSH
7062: CALL_OW 302
7066: NOT
7067: IFFALSE 7071
// continue ;
7069: GO 7054
// if not HasTask ( i ) then
7071: LD_VAR 0 2
7075: PPUSH
7076: CALL_OW 314
7080: NOT
7081: IFFALSE 7103
// target := NearestUnitToUnit ( filter , i ) ;
7083: LD_ADDR_VAR 0 3
7087: PUSH
7088: LD_VAR 0 1
7092: PPUSH
7093: LD_VAR 0 2
7097: PPUSH
7098: CALL_OW 74
7102: ST_TO_ADDR
// if target then
7103: LD_VAR 0 3
7107: IFFALSE 7123
// ComAttackUnit ( i , target ) ;
7109: LD_VAR 0 2
7113: PPUSH
7114: LD_VAR 0 3
7118: PPUSH
7119: CALL_OW 115
// end ;
7123: GO 7054
7125: POP
7126: POP
// end ; end_of_file
7127: PPOPN 3
7129: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7130: LD_EXP 6
7134: IFFALSE 7270
7136: GO 7138
7138: DISABLE
7139: LD_INT 0
7141: PPUSH
7142: PPUSH
7143: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
7144: LD_ADDR_VAR 0 2
7148: PUSH
7149: LD_INT 300
7151: PUSH
7152: LD_INT 250
7154: PUSH
7155: LD_INT 220
7157: PUSH
7158: LD_INT 210
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: PUSH
7167: LD_OWVAR 67
7171: ARRAY
7172: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
7173: LD_INT 1
7175: PPUSH
7176: LD_INT 3
7178: PPUSH
7179: CALL_OW 12
7183: PPUSH
7184: LD_INT 7
7186: PPUSH
7187: LD_INT 1
7189: PPUSH
7190: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
7194: LD_INT 3150
7196: PPUSH
7197: LD_INT 4900
7199: PPUSH
7200: CALL_OW 12
7204: PPUSH
7205: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
7209: LD_ADDR_VAR 0 3
7213: PUSH
7214: LD_INT 1
7216: PPUSH
7217: LD_INT 5
7219: PPUSH
7220: CALL_OW 12
7224: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
7225: LD_VAR 0 3
7229: PPUSH
7230: LD_INT 7
7232: PPUSH
7233: LD_INT 1
7235: PPUSH
7236: CALL_OW 55
// counter := counter - cr * 10 ;
7240: LD_ADDR_VAR 0 2
7244: PUSH
7245: LD_VAR 0 2
7249: PUSH
7250: LD_VAR 0 3
7254: PUSH
7255: LD_INT 10
7257: MUL
7258: MINUS
7259: ST_TO_ADDR
// until counter <= 0 ;
7260: LD_VAR 0 2
7264: PUSH
7265: LD_INT 0
7267: LESSEQUAL
7268: IFFALSE 7194
// end ;
7270: PPOPN 3
7272: END
// every 0 0$03 trigger not Delta do var i ;
7273: LD_EXP 6
7277: NOT
7278: IFFALSE 7348
7280: GO 7282
7282: DISABLE
7283: LD_INT 0
7285: PPUSH
// begin for i = 1 to 5 - Difficulty do
7286: LD_ADDR_VAR 0 1
7290: PUSH
7291: DOUBLE
7292: LD_INT 1
7294: DEC
7295: ST_TO_ADDR
7296: LD_INT 5
7298: PUSH
7299: LD_OWVAR 67
7303: MINUS
7304: PUSH
7305: FOR_TO
7306: IFFALSE 7346
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
7308: LD_INT 2
7310: PPUSH
7311: LD_INT 5
7313: PPUSH
7314: CALL_OW 12
7318: PPUSH
7319: LD_INT 8
7321: PPUSH
7322: LD_INT 1
7324: PPUSH
7325: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
7329: LD_INT 560
7331: PPUSH
7332: LD_INT 1365
7334: PPUSH
7335: CALL_OW 12
7339: PPUSH
7340: CALL_OW 67
// end ;
7344: GO 7305
7346: POP
7347: POP
// end ;
7348: PPOPN 1
7350: END
// every 3 3$00 trigger tick < 15 15$00 do
7351: LD_OWVAR 1
7355: PUSH
7356: LD_INT 31500
7358: LESS
7359: IFFALSE 7419
7361: GO 7363
7363: DISABLE
// begin enable ;
7364: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
7365: LD_INT 1
7367: PPUSH
7368: LD_INT 3
7370: PPUSH
7371: CALL_OW 12
7375: PPUSH
7376: LD_INT 1
7378: PPUSH
7379: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
7383: LD_INT 1330
7385: PPUSH
7386: LD_INT 2065
7388: PPUSH
7389: CALL_OW 12
7393: PPUSH
7394: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
7398: LD_INT 1
7400: PPUSH
7401: LD_INT 4
7403: PPUSH
7404: CALL_OW 12
7408: PPUSH
7409: LD_INT 15
7411: PPUSH
7412: LD_INT 1
7414: PPUSH
7415: CALL_OW 55
// end ; end_of_file
7419: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7420: LD_VAR 0 1
7424: PPUSH
7425: CALL 23716 0 1
// if un = JMM then
7429: LD_VAR 0 1
7433: PUSH
7434: LD_EXP 16
7438: EQUAL
7439: IFFALSE 7448
// YouLost ( JMM ) ;
7441: LD_STRING JMM
7443: PPUSH
7444: CALL_OW 104
// if un = Delta then
7448: LD_VAR 0 1
7452: PUSH
7453: LD_EXP 6
7457: EQUAL
7458: IFFALSE 7481
// begin Delta := 0 ;
7460: LD_ADDR_EXP 6
7464: PUSH
7465: LD_INT 0
7467: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
7468: LD_INT 0
7470: PPUSH
7471: LD_INT 1
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: CALL_OW 324
// end ; if un in ar_forces then
7481: LD_VAR 0 1
7485: PUSH
7486: LD_EXP 27
7490: IN
7491: IFFALSE 7509
// ar_forces := ar_forces diff un ;
7493: LD_ADDR_EXP 27
7497: PUSH
7498: LD_EXP 27
7502: PUSH
7503: LD_VAR 0 1
7507: DIFF
7508: ST_TO_ADDR
// if un in ap_killers then
7509: LD_VAR 0 1
7513: PUSH
7514: LD_EXP 28
7518: IN
7519: IFFALSE 7537
// ap_killers := ap_killers diff un ;
7521: LD_ADDR_EXP 28
7525: PUSH
7526: LD_EXP 28
7530: PUSH
7531: LD_VAR 0 1
7535: DIFF
7536: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
7537: LD_VAR 0 1
7541: PUSH
7542: LD_INT 2
7544: PUSH
7545: LD_INT 25
7547: PUSH
7548: LD_INT 12
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PUSH
7555: LD_INT 25
7557: PUSH
7558: LD_INT 16
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: LIST
7569: PPUSH
7570: CALL_OW 69
7574: IN
7575: IFFALSE 7591
// apeKillCounter := apeKillCounter + 1 ;
7577: LD_ADDR_EXP 15
7581: PUSH
7582: LD_EXP 15
7586: PUSH
7587: LD_INT 1
7589: PLUS
7590: ST_TO_ADDR
// end ;
7591: PPOPN 1
7593: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
7594: LD_VAR 0 1
7598: PPUSH
7599: LD_VAR 0 2
7603: PPUSH
7604: CALL 23838 0 2
// end ;
7608: PPOPN 2
7610: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 2 and not arab_spotted then
7611: LD_VAR 0 1
7615: PUSH
7616: LD_INT 1
7618: EQUAL
7619: PUSH
7620: LD_VAR 0 2
7624: PUSH
7625: LD_INT 2
7627: EQUAL
7628: AND
7629: PUSH
7630: LD_EXP 13
7634: NOT
7635: AND
7636: IFFALSE 7646
// arab_spotted := true ;
7638: LD_ADDR_EXP 13
7642: PUSH
7643: LD_INT 1
7645: ST_TO_ADDR
// end ;
7646: PPOPN 2
7648: END
// on EndTheMissionRaised ( p ) do begin end_the_mission_allowed := false ;
7649: LD_ADDR_OWVAR 57
7653: PUSH
7654: LD_INT 0
7656: ST_TO_ADDR
// end_mission := true ;
7657: LD_ADDR_EXP 14
7661: PUSH
7662: LD_INT 1
7664: ST_TO_ADDR
// end ;
7665: PPOPN 1
7667: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
7668: LD_VAR 0 2
7672: PPUSH
7673: CALL_OW 255
7677: PUSH
7678: LD_INT 1
7680: EQUAL
7681: IFFALSE 7697
// apeman_counter := apeman_counter + 1 ;
7683: LD_ADDR_EXP 12
7687: PUSH
7688: LD_EXP 12
7692: PUSH
7693: LD_INT 1
7695: PLUS
7696: ST_TO_ADDR
// if not first_apeman_tamed then
7697: LD_EXP 8
7701: NOT
7702: IFFALSE 7902
// begin first_apeman_tamed := true ;
7704: LD_ADDR_EXP 8
7708: PUSH
7709: LD_INT 1
7711: ST_TO_ADDR
// if sci = Gladstone then
7712: LD_VAR 0 2
7716: PUSH
7717: LD_EXP 17
7721: EQUAL
7722: IFFALSE 7736
// Say ( Gladstone , D7b-Glad-1 ) ;
7724: LD_EXP 17
7728: PPUSH
7729: LD_STRING D7b-Glad-1
7731: PPUSH
7732: CALL_OW 88
// if sci = Denis then
7736: LD_VAR 0 2
7740: PUSH
7741: LD_EXP 19
7745: EQUAL
7746: IFFALSE 7760
// Say ( Denis , D7a-Den-1 ) ;
7748: LD_EXP 19
7752: PPUSH
7753: LD_STRING D7a-Den-1
7755: PPUSH
7756: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
7760: LD_VAR 0 2
7764: PUSH
7765: LD_EXP 16
7769: PUSH
7770: LD_EXP 17
7774: PUSH
7775: LD_EXP 19
7779: PUSH
7780: LD_EXP 22
7784: PUSH
7785: LD_EXP 23
7789: PUSH
7790: LD_EXP 24
7794: PUSH
7795: LD_EXP 25
7799: PUSH
7800: LD_EXP 21
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: IN
7815: NOT
7816: IFFALSE 7859
// begin if GetSex ( sci ) = sex_male then
7818: LD_VAR 0 2
7822: PPUSH
7823: CALL_OW 258
7827: PUSH
7828: LD_INT 1
7830: EQUAL
7831: IFFALSE 7847
// Say ( sci , D7c-Sci1-1 ) else
7833: LD_VAR 0 2
7837: PPUSH
7838: LD_STRING D7c-Sci1-1
7840: PPUSH
7841: CALL_OW 88
7845: GO 7859
// Say ( sci , D7c-FSci1-1 ) ;
7847: LD_VAR 0 2
7851: PPUSH
7852: LD_STRING D7c-FSci1-1
7854: PPUSH
7855: CALL_OW 88
// end ; if not sci = Gladstone then
7859: LD_VAR 0 2
7863: PUSH
7864: LD_EXP 17
7868: EQUAL
7869: NOT
7870: IFFALSE 7884
// Say ( Gladstone , D7c-Glad-1 ) ;
7872: LD_EXP 17
7876: PPUSH
7877: LD_STRING D7c-Glad-1
7879: PPUSH
7880: CALL_OW 88
// if Lisa then
7884: LD_EXP 22
7888: IFFALSE 7902
// Say ( Lisa , D8-Lisa-1 ) ;
7890: LD_EXP 22
7894: PPUSH
7895: LD_STRING D8-Lisa-1
7897: PPUSH
7898: CALL_OW 88
// end ; end ; end_of_file
7902: PPOPN 2
7904: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
7905: LD_INT 0
7907: PPUSH
// ar_miner := 81 ;
7908: LD_ADDR_EXP 36
7912: PUSH
7913: LD_INT 81
7915: ST_TO_ADDR
// ar_crane := 88 ;
7916: LD_ADDR_EXP 35
7920: PUSH
7921: LD_INT 88
7923: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7924: LD_ADDR_EXP 30
7928: PUSH
7929: LD_INT 89
7931: ST_TO_ADDR
// us_hack := 99 ;
7932: LD_ADDR_EXP 31
7936: PUSH
7937: LD_INT 99
7939: ST_TO_ADDR
// us_artillery := 97 ;
7940: LD_ADDR_EXP 32
7944: PUSH
7945: LD_INT 97
7947: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7948: LD_ADDR_EXP 33
7952: PUSH
7953: LD_INT 91
7955: ST_TO_ADDR
// ar_mortar := 92 ;
7956: LD_ADDR_EXP 34
7960: PUSH
7961: LD_INT 92
7963: ST_TO_ADDR
// ru_flamethrower := 93 ;
7964: LD_ADDR_EXP 37
7968: PUSH
7969: LD_INT 93
7971: ST_TO_ADDR
// ru_radar := 98 ;
7972: LD_ADDR_EXP 29
7976: PUSH
7977: LD_INT 98
7979: ST_TO_ADDR
// tech_Artillery := 80 ;
7980: LD_ADDR_EXP 38
7984: PUSH
7985: LD_INT 80
7987: ST_TO_ADDR
// tech_RadMat := 81 ;
7988: LD_ADDR_EXP 39
7992: PUSH
7993: LD_INT 81
7995: ST_TO_ADDR
// tech_BasicTools := 82 ;
7996: LD_ADDR_EXP 40
8000: PUSH
8001: LD_INT 82
8003: ST_TO_ADDR
// tech_Cargo := 83 ;
8004: LD_ADDR_EXP 41
8008: PUSH
8009: LD_INT 83
8011: ST_TO_ADDR
// tech_Track := 84 ;
8012: LD_ADDR_EXP 42
8016: PUSH
8017: LD_INT 84
8019: ST_TO_ADDR
// tech_Crane := 85 ;
8020: LD_ADDR_EXP 43
8024: PUSH
8025: LD_INT 85
8027: ST_TO_ADDR
// tech_Bulldozer := 86 ;
8028: LD_ADDR_EXP 44
8032: PUSH
8033: LD_INT 86
8035: ST_TO_ADDR
// tech_Hovercraft := 87 ;
8036: LD_ADDR_EXP 45
8040: PUSH
8041: LD_INT 87
8043: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
8044: LD_ADDR_EXP 46
8048: PUSH
8049: LD_INT 88
8051: ST_TO_ADDR
// end ;
8052: LD_VAR 0 1
8056: RET
// every 1 do
8057: GO 8059
8059: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
8060: CALL 7905 0 0
8064: END
// every 0 0$1 do
8065: GO 8067
8067: DISABLE
// begin enable ;
8068: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8069: LD_STRING updateTimer(
8071: PUSH
8072: LD_OWVAR 1
8076: STR
8077: PUSH
8078: LD_STRING );
8080: STR
8081: PPUSH
8082: CALL_OW 559
// end ;
8086: END
// export function SOS_MapStart ( ) ; begin
8087: LD_INT 0
8089: PPUSH
// if streamModeActive then
8090: LD_EXP 47
8094: IFFALSE 8103
// DefineStreamItems ( true ) ;
8096: LD_INT 1
8098: PPUSH
8099: CALL 9757 0 1
// UpdateFactoryWaypoints ( ) ;
8103: CALL 22618 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8107: CALL 22875 0 0
// end ;
8111: LD_VAR 0 1
8115: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8116: LD_INT 0
8118: PPUSH
// if p2 = 100 then
8119: LD_VAR 0 2
8123: PUSH
8124: LD_INT 100
8126: EQUAL
8127: IFFALSE 9130
// begin if not StreamModeActive then
8129: LD_EXP 47
8133: NOT
8134: IFFALSE 8144
// StreamModeActive := true ;
8136: LD_ADDR_EXP 47
8140: PUSH
8141: LD_INT 1
8143: ST_TO_ADDR
// if p3 = 0 then
8144: LD_VAR 0 3
8148: PUSH
8149: LD_INT 0
8151: EQUAL
8152: IFFALSE 8158
// InitStreamMode ;
8154: CALL 9293 0 0
// if p3 = 1 then
8158: LD_VAR 0 3
8162: PUSH
8163: LD_INT 1
8165: EQUAL
8166: IFFALSE 8176
// sRocket := true ;
8168: LD_ADDR_EXP 52
8172: PUSH
8173: LD_INT 1
8175: ST_TO_ADDR
// if p3 = 2 then
8176: LD_VAR 0 3
8180: PUSH
8181: LD_INT 2
8183: EQUAL
8184: IFFALSE 8194
// sSpeed := true ;
8186: LD_ADDR_EXP 51
8190: PUSH
8191: LD_INT 1
8193: ST_TO_ADDR
// if p3 = 3 then
8194: LD_VAR 0 3
8198: PUSH
8199: LD_INT 3
8201: EQUAL
8202: IFFALSE 8212
// sEngine := true ;
8204: LD_ADDR_EXP 53
8208: PUSH
8209: LD_INT 1
8211: ST_TO_ADDR
// if p3 = 4 then
8212: LD_VAR 0 3
8216: PUSH
8217: LD_INT 4
8219: EQUAL
8220: IFFALSE 8230
// sSpec := true ;
8222: LD_ADDR_EXP 50
8226: PUSH
8227: LD_INT 1
8229: ST_TO_ADDR
// if p3 = 5 then
8230: LD_VAR 0 3
8234: PUSH
8235: LD_INT 5
8237: EQUAL
8238: IFFALSE 8248
// sLevel := true ;
8240: LD_ADDR_EXP 54
8244: PUSH
8245: LD_INT 1
8247: ST_TO_ADDR
// if p3 = 6 then
8248: LD_VAR 0 3
8252: PUSH
8253: LD_INT 6
8255: EQUAL
8256: IFFALSE 8266
// sArmoury := true ;
8258: LD_ADDR_EXP 55
8262: PUSH
8263: LD_INT 1
8265: ST_TO_ADDR
// if p3 = 7 then
8266: LD_VAR 0 3
8270: PUSH
8271: LD_INT 7
8273: EQUAL
8274: IFFALSE 8284
// sRadar := true ;
8276: LD_ADDR_EXP 56
8280: PUSH
8281: LD_INT 1
8283: ST_TO_ADDR
// if p3 = 8 then
8284: LD_VAR 0 3
8288: PUSH
8289: LD_INT 8
8291: EQUAL
8292: IFFALSE 8302
// sBunker := true ;
8294: LD_ADDR_EXP 57
8298: PUSH
8299: LD_INT 1
8301: ST_TO_ADDR
// if p3 = 9 then
8302: LD_VAR 0 3
8306: PUSH
8307: LD_INT 9
8309: EQUAL
8310: IFFALSE 8320
// sHack := true ;
8312: LD_ADDR_EXP 58
8316: PUSH
8317: LD_INT 1
8319: ST_TO_ADDR
// if p3 = 10 then
8320: LD_VAR 0 3
8324: PUSH
8325: LD_INT 10
8327: EQUAL
8328: IFFALSE 8338
// sFire := true ;
8330: LD_ADDR_EXP 59
8334: PUSH
8335: LD_INT 1
8337: ST_TO_ADDR
// if p3 = 11 then
8338: LD_VAR 0 3
8342: PUSH
8343: LD_INT 11
8345: EQUAL
8346: IFFALSE 8356
// sRefresh := true ;
8348: LD_ADDR_EXP 60
8352: PUSH
8353: LD_INT 1
8355: ST_TO_ADDR
// if p3 = 12 then
8356: LD_VAR 0 3
8360: PUSH
8361: LD_INT 12
8363: EQUAL
8364: IFFALSE 8374
// sExp := true ;
8366: LD_ADDR_EXP 61
8370: PUSH
8371: LD_INT 1
8373: ST_TO_ADDR
// if p3 = 13 then
8374: LD_VAR 0 3
8378: PUSH
8379: LD_INT 13
8381: EQUAL
8382: IFFALSE 8392
// sDepot := true ;
8384: LD_ADDR_EXP 62
8388: PUSH
8389: LD_INT 1
8391: ST_TO_ADDR
// if p3 = 14 then
8392: LD_VAR 0 3
8396: PUSH
8397: LD_INT 14
8399: EQUAL
8400: IFFALSE 8410
// sFlag := true ;
8402: LD_ADDR_EXP 63
8406: PUSH
8407: LD_INT 1
8409: ST_TO_ADDR
// if p3 = 15 then
8410: LD_VAR 0 3
8414: PUSH
8415: LD_INT 15
8417: EQUAL
8418: IFFALSE 8428
// sKamikadze := true ;
8420: LD_ADDR_EXP 71
8424: PUSH
8425: LD_INT 1
8427: ST_TO_ADDR
// if p3 = 16 then
8428: LD_VAR 0 3
8432: PUSH
8433: LD_INT 16
8435: EQUAL
8436: IFFALSE 8446
// sTroll := true ;
8438: LD_ADDR_EXP 72
8442: PUSH
8443: LD_INT 1
8445: ST_TO_ADDR
// if p3 = 17 then
8446: LD_VAR 0 3
8450: PUSH
8451: LD_INT 17
8453: EQUAL
8454: IFFALSE 8464
// sSlow := true ;
8456: LD_ADDR_EXP 73
8460: PUSH
8461: LD_INT 1
8463: ST_TO_ADDR
// if p3 = 18 then
8464: LD_VAR 0 3
8468: PUSH
8469: LD_INT 18
8471: EQUAL
8472: IFFALSE 8482
// sLack := true ;
8474: LD_ADDR_EXP 74
8478: PUSH
8479: LD_INT 1
8481: ST_TO_ADDR
// if p3 = 19 then
8482: LD_VAR 0 3
8486: PUSH
8487: LD_INT 19
8489: EQUAL
8490: IFFALSE 8500
// sTank := true ;
8492: LD_ADDR_EXP 76
8496: PUSH
8497: LD_INT 1
8499: ST_TO_ADDR
// if p3 = 20 then
8500: LD_VAR 0 3
8504: PUSH
8505: LD_INT 20
8507: EQUAL
8508: IFFALSE 8518
// sRemote := true ;
8510: LD_ADDR_EXP 77
8514: PUSH
8515: LD_INT 1
8517: ST_TO_ADDR
// if p3 = 21 then
8518: LD_VAR 0 3
8522: PUSH
8523: LD_INT 21
8525: EQUAL
8526: IFFALSE 8536
// sPowell := true ;
8528: LD_ADDR_EXP 78
8532: PUSH
8533: LD_INT 1
8535: ST_TO_ADDR
// if p3 = 22 then
8536: LD_VAR 0 3
8540: PUSH
8541: LD_INT 22
8543: EQUAL
8544: IFFALSE 8554
// sTeleport := true ;
8546: LD_ADDR_EXP 81
8550: PUSH
8551: LD_INT 1
8553: ST_TO_ADDR
// if p3 = 23 then
8554: LD_VAR 0 3
8558: PUSH
8559: LD_INT 23
8561: EQUAL
8562: IFFALSE 8572
// sOilTower := true ;
8564: LD_ADDR_EXP 83
8568: PUSH
8569: LD_INT 1
8571: ST_TO_ADDR
// if p3 = 24 then
8572: LD_VAR 0 3
8576: PUSH
8577: LD_INT 24
8579: EQUAL
8580: IFFALSE 8590
// sShovel := true ;
8582: LD_ADDR_EXP 84
8586: PUSH
8587: LD_INT 1
8589: ST_TO_ADDR
// if p3 = 25 then
8590: LD_VAR 0 3
8594: PUSH
8595: LD_INT 25
8597: EQUAL
8598: IFFALSE 8608
// sSheik := true ;
8600: LD_ADDR_EXP 85
8604: PUSH
8605: LD_INT 1
8607: ST_TO_ADDR
// if p3 = 26 then
8608: LD_VAR 0 3
8612: PUSH
8613: LD_INT 26
8615: EQUAL
8616: IFFALSE 8626
// sEarthquake := true ;
8618: LD_ADDR_EXP 87
8622: PUSH
8623: LD_INT 1
8625: ST_TO_ADDR
// if p3 = 27 then
8626: LD_VAR 0 3
8630: PUSH
8631: LD_INT 27
8633: EQUAL
8634: IFFALSE 8644
// sAI := true ;
8636: LD_ADDR_EXP 88
8640: PUSH
8641: LD_INT 1
8643: ST_TO_ADDR
// if p3 = 28 then
8644: LD_VAR 0 3
8648: PUSH
8649: LD_INT 28
8651: EQUAL
8652: IFFALSE 8662
// sCargo := true ;
8654: LD_ADDR_EXP 91
8658: PUSH
8659: LD_INT 1
8661: ST_TO_ADDR
// if p3 = 29 then
8662: LD_VAR 0 3
8666: PUSH
8667: LD_INT 29
8669: EQUAL
8670: IFFALSE 8680
// sDLaser := true ;
8672: LD_ADDR_EXP 92
8676: PUSH
8677: LD_INT 1
8679: ST_TO_ADDR
// if p3 = 30 then
8680: LD_VAR 0 3
8684: PUSH
8685: LD_INT 30
8687: EQUAL
8688: IFFALSE 8698
// sExchange := true ;
8690: LD_ADDR_EXP 93
8694: PUSH
8695: LD_INT 1
8697: ST_TO_ADDR
// if p3 = 31 then
8698: LD_VAR 0 3
8702: PUSH
8703: LD_INT 31
8705: EQUAL
8706: IFFALSE 8716
// sFac := true ;
8708: LD_ADDR_EXP 94
8712: PUSH
8713: LD_INT 1
8715: ST_TO_ADDR
// if p3 = 32 then
8716: LD_VAR 0 3
8720: PUSH
8721: LD_INT 32
8723: EQUAL
8724: IFFALSE 8734
// sPower := true ;
8726: LD_ADDR_EXP 95
8730: PUSH
8731: LD_INT 1
8733: ST_TO_ADDR
// if p3 = 33 then
8734: LD_VAR 0 3
8738: PUSH
8739: LD_INT 33
8741: EQUAL
8742: IFFALSE 8752
// sRandom := true ;
8744: LD_ADDR_EXP 96
8748: PUSH
8749: LD_INT 1
8751: ST_TO_ADDR
// if p3 = 34 then
8752: LD_VAR 0 3
8756: PUSH
8757: LD_INT 34
8759: EQUAL
8760: IFFALSE 8770
// sShield := true ;
8762: LD_ADDR_EXP 97
8766: PUSH
8767: LD_INT 1
8769: ST_TO_ADDR
// if p3 = 35 then
8770: LD_VAR 0 3
8774: PUSH
8775: LD_INT 35
8777: EQUAL
8778: IFFALSE 8788
// sTime := true ;
8780: LD_ADDR_EXP 98
8784: PUSH
8785: LD_INT 1
8787: ST_TO_ADDR
// if p3 = 36 then
8788: LD_VAR 0 3
8792: PUSH
8793: LD_INT 36
8795: EQUAL
8796: IFFALSE 8806
// sTools := true ;
8798: LD_ADDR_EXP 99
8802: PUSH
8803: LD_INT 1
8805: ST_TO_ADDR
// if p3 = 101 then
8806: LD_VAR 0 3
8810: PUSH
8811: LD_INT 101
8813: EQUAL
8814: IFFALSE 8824
// sSold := true ;
8816: LD_ADDR_EXP 64
8820: PUSH
8821: LD_INT 1
8823: ST_TO_ADDR
// if p3 = 102 then
8824: LD_VAR 0 3
8828: PUSH
8829: LD_INT 102
8831: EQUAL
8832: IFFALSE 8842
// sDiff := true ;
8834: LD_ADDR_EXP 65
8838: PUSH
8839: LD_INT 1
8841: ST_TO_ADDR
// if p3 = 103 then
8842: LD_VAR 0 3
8846: PUSH
8847: LD_INT 103
8849: EQUAL
8850: IFFALSE 8860
// sFog := true ;
8852: LD_ADDR_EXP 68
8856: PUSH
8857: LD_INT 1
8859: ST_TO_ADDR
// if p3 = 104 then
8860: LD_VAR 0 3
8864: PUSH
8865: LD_INT 104
8867: EQUAL
8868: IFFALSE 8878
// sReset := true ;
8870: LD_ADDR_EXP 69
8874: PUSH
8875: LD_INT 1
8877: ST_TO_ADDR
// if p3 = 105 then
8878: LD_VAR 0 3
8882: PUSH
8883: LD_INT 105
8885: EQUAL
8886: IFFALSE 8896
// sSun := true ;
8888: LD_ADDR_EXP 70
8892: PUSH
8893: LD_INT 1
8895: ST_TO_ADDR
// if p3 = 106 then
8896: LD_VAR 0 3
8900: PUSH
8901: LD_INT 106
8903: EQUAL
8904: IFFALSE 8914
// sTiger := true ;
8906: LD_ADDR_EXP 66
8910: PUSH
8911: LD_INT 1
8913: ST_TO_ADDR
// if p3 = 107 then
8914: LD_VAR 0 3
8918: PUSH
8919: LD_INT 107
8921: EQUAL
8922: IFFALSE 8932
// sBomb := true ;
8924: LD_ADDR_EXP 67
8928: PUSH
8929: LD_INT 1
8931: ST_TO_ADDR
// if p3 = 108 then
8932: LD_VAR 0 3
8936: PUSH
8937: LD_INT 108
8939: EQUAL
8940: IFFALSE 8950
// sWound := true ;
8942: LD_ADDR_EXP 75
8946: PUSH
8947: LD_INT 1
8949: ST_TO_ADDR
// if p3 = 109 then
8950: LD_VAR 0 3
8954: PUSH
8955: LD_INT 109
8957: EQUAL
8958: IFFALSE 8968
// sBetray := true ;
8960: LD_ADDR_EXP 79
8964: PUSH
8965: LD_INT 1
8967: ST_TO_ADDR
// if p3 = 110 then
8968: LD_VAR 0 3
8972: PUSH
8973: LD_INT 110
8975: EQUAL
8976: IFFALSE 8986
// sContamin := true ;
8978: LD_ADDR_EXP 80
8982: PUSH
8983: LD_INT 1
8985: ST_TO_ADDR
// if p3 = 111 then
8986: LD_VAR 0 3
8990: PUSH
8991: LD_INT 111
8993: EQUAL
8994: IFFALSE 9004
// sOil := true ;
8996: LD_ADDR_EXP 82
9000: PUSH
9001: LD_INT 1
9003: ST_TO_ADDR
// if p3 = 112 then
9004: LD_VAR 0 3
9008: PUSH
9009: LD_INT 112
9011: EQUAL
9012: IFFALSE 9022
// sStu := true ;
9014: LD_ADDR_EXP 86
9018: PUSH
9019: LD_INT 1
9021: ST_TO_ADDR
// if p3 = 113 then
9022: LD_VAR 0 3
9026: PUSH
9027: LD_INT 113
9029: EQUAL
9030: IFFALSE 9040
// sBazooka := true ;
9032: LD_ADDR_EXP 89
9036: PUSH
9037: LD_INT 1
9039: ST_TO_ADDR
// if p3 = 114 then
9040: LD_VAR 0 3
9044: PUSH
9045: LD_INT 114
9047: EQUAL
9048: IFFALSE 9058
// sMortar := true ;
9050: LD_ADDR_EXP 90
9054: PUSH
9055: LD_INT 1
9057: ST_TO_ADDR
// if p3 = 115 then
9058: LD_VAR 0 3
9062: PUSH
9063: LD_INT 115
9065: EQUAL
9066: IFFALSE 9076
// sRanger := true ;
9068: LD_ADDR_EXP 100
9072: PUSH
9073: LD_INT 1
9075: ST_TO_ADDR
// if p3 = 116 then
9076: LD_VAR 0 3
9080: PUSH
9081: LD_INT 116
9083: EQUAL
9084: IFFALSE 9094
// sComputer := true ;
9086: LD_ADDR_EXP 101
9090: PUSH
9091: LD_INT 1
9093: ST_TO_ADDR
// if p3 = 117 then
9094: LD_VAR 0 3
9098: PUSH
9099: LD_INT 117
9101: EQUAL
9102: IFFALSE 9112
// s30 := true ;
9104: LD_ADDR_EXP 102
9108: PUSH
9109: LD_INT 1
9111: ST_TO_ADDR
// if p3 = 118 then
9112: LD_VAR 0 3
9116: PUSH
9117: LD_INT 118
9119: EQUAL
9120: IFFALSE 9130
// s60 := true ;
9122: LD_ADDR_EXP 103
9126: PUSH
9127: LD_INT 1
9129: ST_TO_ADDR
// end ; if p2 = 101 then
9130: LD_VAR 0 2
9134: PUSH
9135: LD_INT 101
9137: EQUAL
9138: IFFALSE 9266
// begin case p3 of 1 :
9140: LD_VAR 0 3
9144: PUSH
9145: LD_INT 1
9147: DOUBLE
9148: EQUAL
9149: IFTRUE 9153
9151: GO 9160
9153: POP
// hHackUnlimitedResources ; 2 :
9154: CALL 21364 0 0
9158: GO 9266
9160: LD_INT 2
9162: DOUBLE
9163: EQUAL
9164: IFTRUE 9168
9166: GO 9175
9168: POP
// hHackSetLevel10 ; 3 :
9169: CALL 21497 0 0
9173: GO 9266
9175: LD_INT 3
9177: DOUBLE
9178: EQUAL
9179: IFTRUE 9183
9181: GO 9190
9183: POP
// hHackSetLevel10YourUnits ; 4 :
9184: CALL 21582 0 0
9188: GO 9266
9190: LD_INT 4
9192: DOUBLE
9193: EQUAL
9194: IFTRUE 9198
9196: GO 9205
9198: POP
// hHackInvincible ; 5 :
9199: CALL 22030 0 0
9203: GO 9266
9205: LD_INT 5
9207: DOUBLE
9208: EQUAL
9209: IFTRUE 9213
9211: GO 9220
9213: POP
// hHackInvisible ; 6 :
9214: CALL 22141 0 0
9218: GO 9266
9220: LD_INT 6
9222: DOUBLE
9223: EQUAL
9224: IFTRUE 9228
9226: GO 9235
9228: POP
// hHackChangeYourSide ; 7 :
9229: CALL 22198 0 0
9233: GO 9266
9235: LD_INT 7
9237: DOUBLE
9238: EQUAL
9239: IFTRUE 9243
9241: GO 9250
9243: POP
// hHackChangeUnitSide ; 8 :
9244: CALL 22240 0 0
9248: GO 9266
9250: LD_INT 8
9252: DOUBLE
9253: EQUAL
9254: IFTRUE 9258
9256: GO 9265
9258: POP
// hHackFog ; end ;
9259: CALL 22341 0 0
9263: GO 9266
9265: POP
// end ; end ;
9266: LD_VAR 0 7
9270: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
9271: GO 9273
9273: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9274: LD_STRING initStreamRollete();
9276: PPUSH
9277: CALL_OW 559
// InitStreamMode ;
9281: CALL 9293 0 0
// DefineStreamItems ( false ) ;
9285: LD_INT 0
9287: PPUSH
9288: CALL 9757 0 1
// end ;
9292: END
// function InitStreamMode ; begin
9293: LD_INT 0
9295: PPUSH
// streamModeActive := false ;
9296: LD_ADDR_EXP 47
9300: PUSH
9301: LD_INT 0
9303: ST_TO_ADDR
// normalCounter := 36 ;
9304: LD_ADDR_EXP 48
9308: PUSH
9309: LD_INT 36
9311: ST_TO_ADDR
// hardcoreCounter := 18 ;
9312: LD_ADDR_EXP 49
9316: PUSH
9317: LD_INT 18
9319: ST_TO_ADDR
// sRocket := false ;
9320: LD_ADDR_EXP 52
9324: PUSH
9325: LD_INT 0
9327: ST_TO_ADDR
// sSpeed := false ;
9328: LD_ADDR_EXP 51
9332: PUSH
9333: LD_INT 0
9335: ST_TO_ADDR
// sEngine := false ;
9336: LD_ADDR_EXP 53
9340: PUSH
9341: LD_INT 0
9343: ST_TO_ADDR
// sSpec := false ;
9344: LD_ADDR_EXP 50
9348: PUSH
9349: LD_INT 0
9351: ST_TO_ADDR
// sLevel := false ;
9352: LD_ADDR_EXP 54
9356: PUSH
9357: LD_INT 0
9359: ST_TO_ADDR
// sArmoury := false ;
9360: LD_ADDR_EXP 55
9364: PUSH
9365: LD_INT 0
9367: ST_TO_ADDR
// sRadar := false ;
9368: LD_ADDR_EXP 56
9372: PUSH
9373: LD_INT 0
9375: ST_TO_ADDR
// sBunker := false ;
9376: LD_ADDR_EXP 57
9380: PUSH
9381: LD_INT 0
9383: ST_TO_ADDR
// sHack := false ;
9384: LD_ADDR_EXP 58
9388: PUSH
9389: LD_INT 0
9391: ST_TO_ADDR
// sFire := false ;
9392: LD_ADDR_EXP 59
9396: PUSH
9397: LD_INT 0
9399: ST_TO_ADDR
// sRefresh := false ;
9400: LD_ADDR_EXP 60
9404: PUSH
9405: LD_INT 0
9407: ST_TO_ADDR
// sExp := false ;
9408: LD_ADDR_EXP 61
9412: PUSH
9413: LD_INT 0
9415: ST_TO_ADDR
// sDepot := false ;
9416: LD_ADDR_EXP 62
9420: PUSH
9421: LD_INT 0
9423: ST_TO_ADDR
// sFlag := false ;
9424: LD_ADDR_EXP 63
9428: PUSH
9429: LD_INT 0
9431: ST_TO_ADDR
// sKamikadze := false ;
9432: LD_ADDR_EXP 71
9436: PUSH
9437: LD_INT 0
9439: ST_TO_ADDR
// sTroll := false ;
9440: LD_ADDR_EXP 72
9444: PUSH
9445: LD_INT 0
9447: ST_TO_ADDR
// sSlow := false ;
9448: LD_ADDR_EXP 73
9452: PUSH
9453: LD_INT 0
9455: ST_TO_ADDR
// sLack := false ;
9456: LD_ADDR_EXP 74
9460: PUSH
9461: LD_INT 0
9463: ST_TO_ADDR
// sTank := false ;
9464: LD_ADDR_EXP 76
9468: PUSH
9469: LD_INT 0
9471: ST_TO_ADDR
// sRemote := false ;
9472: LD_ADDR_EXP 77
9476: PUSH
9477: LD_INT 0
9479: ST_TO_ADDR
// sPowell := false ;
9480: LD_ADDR_EXP 78
9484: PUSH
9485: LD_INT 0
9487: ST_TO_ADDR
// sTeleport := false ;
9488: LD_ADDR_EXP 81
9492: PUSH
9493: LD_INT 0
9495: ST_TO_ADDR
// sOilTower := false ;
9496: LD_ADDR_EXP 83
9500: PUSH
9501: LD_INT 0
9503: ST_TO_ADDR
// sShovel := false ;
9504: LD_ADDR_EXP 84
9508: PUSH
9509: LD_INT 0
9511: ST_TO_ADDR
// sSheik := false ;
9512: LD_ADDR_EXP 85
9516: PUSH
9517: LD_INT 0
9519: ST_TO_ADDR
// sEarthquake := false ;
9520: LD_ADDR_EXP 87
9524: PUSH
9525: LD_INT 0
9527: ST_TO_ADDR
// sAI := false ;
9528: LD_ADDR_EXP 88
9532: PUSH
9533: LD_INT 0
9535: ST_TO_ADDR
// sCargo := false ;
9536: LD_ADDR_EXP 91
9540: PUSH
9541: LD_INT 0
9543: ST_TO_ADDR
// sDLaser := false ;
9544: LD_ADDR_EXP 92
9548: PUSH
9549: LD_INT 0
9551: ST_TO_ADDR
// sExchange := false ;
9552: LD_ADDR_EXP 93
9556: PUSH
9557: LD_INT 0
9559: ST_TO_ADDR
// sFac := false ;
9560: LD_ADDR_EXP 94
9564: PUSH
9565: LD_INT 0
9567: ST_TO_ADDR
// sPower := false ;
9568: LD_ADDR_EXP 95
9572: PUSH
9573: LD_INT 0
9575: ST_TO_ADDR
// sRandom := false ;
9576: LD_ADDR_EXP 96
9580: PUSH
9581: LD_INT 0
9583: ST_TO_ADDR
// sShield := false ;
9584: LD_ADDR_EXP 97
9588: PUSH
9589: LD_INT 0
9591: ST_TO_ADDR
// sTime := false ;
9592: LD_ADDR_EXP 98
9596: PUSH
9597: LD_INT 0
9599: ST_TO_ADDR
// sTools := false ;
9600: LD_ADDR_EXP 99
9604: PUSH
9605: LD_INT 0
9607: ST_TO_ADDR
// sSold := false ;
9608: LD_ADDR_EXP 64
9612: PUSH
9613: LD_INT 0
9615: ST_TO_ADDR
// sDiff := false ;
9616: LD_ADDR_EXP 65
9620: PUSH
9621: LD_INT 0
9623: ST_TO_ADDR
// sFog := false ;
9624: LD_ADDR_EXP 68
9628: PUSH
9629: LD_INT 0
9631: ST_TO_ADDR
// sReset := false ;
9632: LD_ADDR_EXP 69
9636: PUSH
9637: LD_INT 0
9639: ST_TO_ADDR
// sSun := false ;
9640: LD_ADDR_EXP 70
9644: PUSH
9645: LD_INT 0
9647: ST_TO_ADDR
// sTiger := false ;
9648: LD_ADDR_EXP 66
9652: PUSH
9653: LD_INT 0
9655: ST_TO_ADDR
// sBomb := false ;
9656: LD_ADDR_EXP 67
9660: PUSH
9661: LD_INT 0
9663: ST_TO_ADDR
// sWound := false ;
9664: LD_ADDR_EXP 75
9668: PUSH
9669: LD_INT 0
9671: ST_TO_ADDR
// sBetray := false ;
9672: LD_ADDR_EXP 79
9676: PUSH
9677: LD_INT 0
9679: ST_TO_ADDR
// sContamin := false ;
9680: LD_ADDR_EXP 80
9684: PUSH
9685: LD_INT 0
9687: ST_TO_ADDR
// sOil := false ;
9688: LD_ADDR_EXP 82
9692: PUSH
9693: LD_INT 0
9695: ST_TO_ADDR
// sStu := false ;
9696: LD_ADDR_EXP 86
9700: PUSH
9701: LD_INT 0
9703: ST_TO_ADDR
// sBazooka := false ;
9704: LD_ADDR_EXP 89
9708: PUSH
9709: LD_INT 0
9711: ST_TO_ADDR
// sMortar := false ;
9712: LD_ADDR_EXP 90
9716: PUSH
9717: LD_INT 0
9719: ST_TO_ADDR
// sRanger := false ;
9720: LD_ADDR_EXP 100
9724: PUSH
9725: LD_INT 0
9727: ST_TO_ADDR
// sComputer := false ;
9728: LD_ADDR_EXP 101
9732: PUSH
9733: LD_INT 0
9735: ST_TO_ADDR
// s30 := false ;
9736: LD_ADDR_EXP 102
9740: PUSH
9741: LD_INT 0
9743: ST_TO_ADDR
// s60 := false ;
9744: LD_ADDR_EXP 103
9748: PUSH
9749: LD_INT 0
9751: ST_TO_ADDR
// end ;
9752: LD_VAR 0 1
9756: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9757: LD_INT 0
9759: PPUSH
9760: PPUSH
9761: PPUSH
9762: PPUSH
9763: PPUSH
9764: PPUSH
9765: PPUSH
// result := [ ] ;
9766: LD_ADDR_VAR 0 2
9770: PUSH
9771: EMPTY
9772: ST_TO_ADDR
// if campaign_id = 1 then
9773: LD_OWVAR 69
9777: PUSH
9778: LD_INT 1
9780: EQUAL
9781: IFFALSE 12947
// begin case mission_number of 1 :
9783: LD_OWVAR 70
9787: PUSH
9788: LD_INT 1
9790: DOUBLE
9791: EQUAL
9792: IFTRUE 9796
9794: GO 9872
9796: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9797: LD_ADDR_VAR 0 2
9801: PUSH
9802: LD_INT 2
9804: PUSH
9805: LD_INT 4
9807: PUSH
9808: LD_INT 11
9810: PUSH
9811: LD_INT 12
9813: PUSH
9814: LD_INT 15
9816: PUSH
9817: LD_INT 16
9819: PUSH
9820: LD_INT 22
9822: PUSH
9823: LD_INT 23
9825: PUSH
9826: LD_INT 26
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: PUSH
9840: LD_INT 101
9842: PUSH
9843: LD_INT 102
9845: PUSH
9846: LD_INT 106
9848: PUSH
9849: LD_INT 116
9851: PUSH
9852: LD_INT 117
9854: PUSH
9855: LD_INT 118
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: ST_TO_ADDR
9870: GO 12945
9872: LD_INT 2
9874: DOUBLE
9875: EQUAL
9876: IFTRUE 9880
9878: GO 9964
9880: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9881: LD_ADDR_VAR 0 2
9885: PUSH
9886: LD_INT 2
9888: PUSH
9889: LD_INT 4
9891: PUSH
9892: LD_INT 11
9894: PUSH
9895: LD_INT 12
9897: PUSH
9898: LD_INT 15
9900: PUSH
9901: LD_INT 16
9903: PUSH
9904: LD_INT 22
9906: PUSH
9907: LD_INT 23
9909: PUSH
9910: LD_INT 26
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 101
9926: PUSH
9927: LD_INT 102
9929: PUSH
9930: LD_INT 105
9932: PUSH
9933: LD_INT 106
9935: PUSH
9936: LD_INT 108
9938: PUSH
9939: LD_INT 116
9941: PUSH
9942: LD_INT 117
9944: PUSH
9945: LD_INT 118
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: ST_TO_ADDR
9962: GO 12945
9964: LD_INT 3
9966: DOUBLE
9967: EQUAL
9968: IFTRUE 9972
9970: GO 10060
9972: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9973: LD_ADDR_VAR 0 2
9977: PUSH
9978: LD_INT 2
9980: PUSH
9981: LD_INT 4
9983: PUSH
9984: LD_INT 5
9986: PUSH
9987: LD_INT 11
9989: PUSH
9990: LD_INT 12
9992: PUSH
9993: LD_INT 15
9995: PUSH
9996: LD_INT 16
9998: PUSH
9999: LD_INT 22
10001: PUSH
10002: LD_INT 26
10004: PUSH
10005: LD_INT 36
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: PUSH
10020: LD_INT 101
10022: PUSH
10023: LD_INT 102
10025: PUSH
10026: LD_INT 105
10028: PUSH
10029: LD_INT 106
10031: PUSH
10032: LD_INT 108
10034: PUSH
10035: LD_INT 116
10037: PUSH
10038: LD_INT 117
10040: PUSH
10041: LD_INT 118
10043: PUSH
10044: EMPTY
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: ST_TO_ADDR
10058: GO 12945
10060: LD_INT 4
10062: DOUBLE
10063: EQUAL
10064: IFTRUE 10068
10066: GO 10164
10068: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10069: LD_ADDR_VAR 0 2
10073: PUSH
10074: LD_INT 2
10076: PUSH
10077: LD_INT 4
10079: PUSH
10080: LD_INT 5
10082: PUSH
10083: LD_INT 8
10085: PUSH
10086: LD_INT 11
10088: PUSH
10089: LD_INT 12
10091: PUSH
10092: LD_INT 15
10094: PUSH
10095: LD_INT 16
10097: PUSH
10098: LD_INT 22
10100: PUSH
10101: LD_INT 23
10103: PUSH
10104: LD_INT 26
10106: PUSH
10107: LD_INT 36
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: PUSH
10124: LD_INT 101
10126: PUSH
10127: LD_INT 102
10129: PUSH
10130: LD_INT 105
10132: PUSH
10133: LD_INT 106
10135: PUSH
10136: LD_INT 108
10138: PUSH
10139: LD_INT 116
10141: PUSH
10142: LD_INT 117
10144: PUSH
10145: LD_INT 118
10147: PUSH
10148: EMPTY
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: ST_TO_ADDR
10162: GO 12945
10164: LD_INT 5
10166: DOUBLE
10167: EQUAL
10168: IFTRUE 10172
10170: GO 10284
10172: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10173: LD_ADDR_VAR 0 2
10177: PUSH
10178: LD_INT 2
10180: PUSH
10181: LD_INT 4
10183: PUSH
10184: LD_INT 5
10186: PUSH
10187: LD_INT 6
10189: PUSH
10190: LD_INT 8
10192: PUSH
10193: LD_INT 11
10195: PUSH
10196: LD_INT 12
10198: PUSH
10199: LD_INT 15
10201: PUSH
10202: LD_INT 16
10204: PUSH
10205: LD_INT 22
10207: PUSH
10208: LD_INT 23
10210: PUSH
10211: LD_INT 25
10213: PUSH
10214: LD_INT 26
10216: PUSH
10217: LD_INT 36
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: PUSH
10236: LD_INT 101
10238: PUSH
10239: LD_INT 102
10241: PUSH
10242: LD_INT 105
10244: PUSH
10245: LD_INT 106
10247: PUSH
10248: LD_INT 108
10250: PUSH
10251: LD_INT 109
10253: PUSH
10254: LD_INT 112
10256: PUSH
10257: LD_INT 116
10259: PUSH
10260: LD_INT 117
10262: PUSH
10263: LD_INT 118
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: ST_TO_ADDR
10282: GO 12945
10284: LD_INT 6
10286: DOUBLE
10287: EQUAL
10288: IFTRUE 10292
10290: GO 10424
10292: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10293: LD_ADDR_VAR 0 2
10297: PUSH
10298: LD_INT 2
10300: PUSH
10301: LD_INT 4
10303: PUSH
10304: LD_INT 5
10306: PUSH
10307: LD_INT 6
10309: PUSH
10310: LD_INT 8
10312: PUSH
10313: LD_INT 11
10315: PUSH
10316: LD_INT 12
10318: PUSH
10319: LD_INT 15
10321: PUSH
10322: LD_INT 16
10324: PUSH
10325: LD_INT 20
10327: PUSH
10328: LD_INT 21
10330: PUSH
10331: LD_INT 22
10333: PUSH
10334: LD_INT 23
10336: PUSH
10337: LD_INT 25
10339: PUSH
10340: LD_INT 26
10342: PUSH
10343: LD_INT 30
10345: PUSH
10346: LD_INT 31
10348: PUSH
10349: LD_INT 32
10351: PUSH
10352: LD_INT 36
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 101
10378: PUSH
10379: LD_INT 102
10381: PUSH
10382: LD_INT 105
10384: PUSH
10385: LD_INT 106
10387: PUSH
10388: LD_INT 108
10390: PUSH
10391: LD_INT 109
10393: PUSH
10394: LD_INT 112
10396: PUSH
10397: LD_INT 116
10399: PUSH
10400: LD_INT 117
10402: PUSH
10403: LD_INT 118
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: ST_TO_ADDR
10422: GO 12945
10424: LD_INT 7
10426: DOUBLE
10427: EQUAL
10428: IFTRUE 10432
10430: GO 10544
10432: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10433: LD_ADDR_VAR 0 2
10437: PUSH
10438: LD_INT 2
10440: PUSH
10441: LD_INT 4
10443: PUSH
10444: LD_INT 5
10446: PUSH
10447: LD_INT 7
10449: PUSH
10450: LD_INT 11
10452: PUSH
10453: LD_INT 12
10455: PUSH
10456: LD_INT 15
10458: PUSH
10459: LD_INT 16
10461: PUSH
10462: LD_INT 20
10464: PUSH
10465: LD_INT 21
10467: PUSH
10468: LD_INT 22
10470: PUSH
10471: LD_INT 23
10473: PUSH
10474: LD_INT 25
10476: PUSH
10477: LD_INT 26
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: PUSH
10496: LD_INT 101
10498: PUSH
10499: LD_INT 102
10501: PUSH
10502: LD_INT 103
10504: PUSH
10505: LD_INT 105
10507: PUSH
10508: LD_INT 106
10510: PUSH
10511: LD_INT 108
10513: PUSH
10514: LD_INT 112
10516: PUSH
10517: LD_INT 116
10519: PUSH
10520: LD_INT 117
10522: PUSH
10523: LD_INT 118
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: ST_TO_ADDR
10542: GO 12945
10544: LD_INT 8
10546: DOUBLE
10547: EQUAL
10548: IFTRUE 10552
10550: GO 10692
10552: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10553: LD_ADDR_VAR 0 2
10557: PUSH
10558: LD_INT 2
10560: PUSH
10561: LD_INT 4
10563: PUSH
10564: LD_INT 5
10566: PUSH
10567: LD_INT 6
10569: PUSH
10570: LD_INT 7
10572: PUSH
10573: LD_INT 8
10575: PUSH
10576: LD_INT 11
10578: PUSH
10579: LD_INT 12
10581: PUSH
10582: LD_INT 15
10584: PUSH
10585: LD_INT 16
10587: PUSH
10588: LD_INT 20
10590: PUSH
10591: LD_INT 21
10593: PUSH
10594: LD_INT 22
10596: PUSH
10597: LD_INT 23
10599: PUSH
10600: LD_INT 25
10602: PUSH
10603: LD_INT 26
10605: PUSH
10606: LD_INT 30
10608: PUSH
10609: LD_INT 31
10611: PUSH
10612: LD_INT 32
10614: PUSH
10615: LD_INT 36
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: PUSH
10640: LD_INT 101
10642: PUSH
10643: LD_INT 102
10645: PUSH
10646: LD_INT 103
10648: PUSH
10649: LD_INT 105
10651: PUSH
10652: LD_INT 106
10654: PUSH
10655: LD_INT 108
10657: PUSH
10658: LD_INT 109
10660: PUSH
10661: LD_INT 112
10663: PUSH
10664: LD_INT 116
10666: PUSH
10667: LD_INT 117
10669: PUSH
10670: LD_INT 118
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: ST_TO_ADDR
10690: GO 12945
10692: LD_INT 9
10694: DOUBLE
10695: EQUAL
10696: IFTRUE 10700
10698: GO 10848
10700: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10701: LD_ADDR_VAR 0 2
10705: PUSH
10706: LD_INT 2
10708: PUSH
10709: LD_INT 4
10711: PUSH
10712: LD_INT 5
10714: PUSH
10715: LD_INT 6
10717: PUSH
10718: LD_INT 7
10720: PUSH
10721: LD_INT 8
10723: PUSH
10724: LD_INT 11
10726: PUSH
10727: LD_INT 12
10729: PUSH
10730: LD_INT 15
10732: PUSH
10733: LD_INT 16
10735: PUSH
10736: LD_INT 20
10738: PUSH
10739: LD_INT 21
10741: PUSH
10742: LD_INT 22
10744: PUSH
10745: LD_INT 23
10747: PUSH
10748: LD_INT 25
10750: PUSH
10751: LD_INT 26
10753: PUSH
10754: LD_INT 28
10756: PUSH
10757: LD_INT 30
10759: PUSH
10760: LD_INT 31
10762: PUSH
10763: LD_INT 32
10765: PUSH
10766: LD_INT 36
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 101
10794: PUSH
10795: LD_INT 102
10797: PUSH
10798: LD_INT 103
10800: PUSH
10801: LD_INT 105
10803: PUSH
10804: LD_INT 106
10806: PUSH
10807: LD_INT 108
10809: PUSH
10810: LD_INT 109
10812: PUSH
10813: LD_INT 112
10815: PUSH
10816: LD_INT 114
10818: PUSH
10819: LD_INT 116
10821: PUSH
10822: LD_INT 117
10824: PUSH
10825: LD_INT 118
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: ST_TO_ADDR
10846: GO 12945
10848: LD_INT 10
10850: DOUBLE
10851: EQUAL
10852: IFTRUE 10856
10854: GO 11052
10856: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10857: LD_ADDR_VAR 0 2
10861: PUSH
10862: LD_INT 2
10864: PUSH
10865: LD_INT 4
10867: PUSH
10868: LD_INT 5
10870: PUSH
10871: LD_INT 6
10873: PUSH
10874: LD_INT 7
10876: PUSH
10877: LD_INT 8
10879: PUSH
10880: LD_INT 9
10882: PUSH
10883: LD_INT 10
10885: PUSH
10886: LD_INT 11
10888: PUSH
10889: LD_INT 12
10891: PUSH
10892: LD_INT 13
10894: PUSH
10895: LD_INT 14
10897: PUSH
10898: LD_INT 15
10900: PUSH
10901: LD_INT 16
10903: PUSH
10904: LD_INT 17
10906: PUSH
10907: LD_INT 18
10909: PUSH
10910: LD_INT 19
10912: PUSH
10913: LD_INT 20
10915: PUSH
10916: LD_INT 21
10918: PUSH
10919: LD_INT 22
10921: PUSH
10922: LD_INT 23
10924: PUSH
10925: LD_INT 24
10927: PUSH
10928: LD_INT 25
10930: PUSH
10931: LD_INT 26
10933: PUSH
10934: LD_INT 28
10936: PUSH
10937: LD_INT 30
10939: PUSH
10940: LD_INT 31
10942: PUSH
10943: LD_INT 32
10945: PUSH
10946: LD_INT 36
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: PUSH
10980: LD_INT 101
10982: PUSH
10983: LD_INT 102
10985: PUSH
10986: LD_INT 103
10988: PUSH
10989: LD_INT 104
10991: PUSH
10992: LD_INT 105
10994: PUSH
10995: LD_INT 106
10997: PUSH
10998: LD_INT 107
11000: PUSH
11001: LD_INT 108
11003: PUSH
11004: LD_INT 109
11006: PUSH
11007: LD_INT 110
11009: PUSH
11010: LD_INT 111
11012: PUSH
11013: LD_INT 112
11015: PUSH
11016: LD_INT 114
11018: PUSH
11019: LD_INT 116
11021: PUSH
11022: LD_INT 117
11024: PUSH
11025: LD_INT 118
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: ST_TO_ADDR
11050: GO 12945
11052: LD_INT 11
11054: DOUBLE
11055: EQUAL
11056: IFTRUE 11060
11058: GO 11264
11060: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11061: LD_ADDR_VAR 0 2
11065: PUSH
11066: LD_INT 2
11068: PUSH
11069: LD_INT 3
11071: PUSH
11072: LD_INT 4
11074: PUSH
11075: LD_INT 5
11077: PUSH
11078: LD_INT 6
11080: PUSH
11081: LD_INT 7
11083: PUSH
11084: LD_INT 8
11086: PUSH
11087: LD_INT 9
11089: PUSH
11090: LD_INT 10
11092: PUSH
11093: LD_INT 11
11095: PUSH
11096: LD_INT 12
11098: PUSH
11099: LD_INT 13
11101: PUSH
11102: LD_INT 14
11104: PUSH
11105: LD_INT 15
11107: PUSH
11108: LD_INT 16
11110: PUSH
11111: LD_INT 17
11113: PUSH
11114: LD_INT 18
11116: PUSH
11117: LD_INT 19
11119: PUSH
11120: LD_INT 20
11122: PUSH
11123: LD_INT 21
11125: PUSH
11126: LD_INT 22
11128: PUSH
11129: LD_INT 23
11131: PUSH
11132: LD_INT 24
11134: PUSH
11135: LD_INT 25
11137: PUSH
11138: LD_INT 26
11140: PUSH
11141: LD_INT 28
11143: PUSH
11144: LD_INT 30
11146: PUSH
11147: LD_INT 31
11149: PUSH
11150: LD_INT 32
11152: PUSH
11153: LD_INT 34
11155: PUSH
11156: LD_INT 36
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 101
11194: PUSH
11195: LD_INT 102
11197: PUSH
11198: LD_INT 103
11200: PUSH
11201: LD_INT 104
11203: PUSH
11204: LD_INT 105
11206: PUSH
11207: LD_INT 106
11209: PUSH
11210: LD_INT 107
11212: PUSH
11213: LD_INT 108
11215: PUSH
11216: LD_INT 109
11218: PUSH
11219: LD_INT 110
11221: PUSH
11222: LD_INT 111
11224: PUSH
11225: LD_INT 112
11227: PUSH
11228: LD_INT 114
11230: PUSH
11231: LD_INT 116
11233: PUSH
11234: LD_INT 117
11236: PUSH
11237: LD_INT 118
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: ST_TO_ADDR
11262: GO 12945
11264: LD_INT 12
11266: DOUBLE
11267: EQUAL
11268: IFTRUE 11272
11270: GO 11492
11272: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11273: LD_ADDR_VAR 0 2
11277: PUSH
11278: LD_INT 1
11280: PUSH
11281: LD_INT 2
11283: PUSH
11284: LD_INT 3
11286: PUSH
11287: LD_INT 4
11289: PUSH
11290: LD_INT 5
11292: PUSH
11293: LD_INT 6
11295: PUSH
11296: LD_INT 7
11298: PUSH
11299: LD_INT 8
11301: PUSH
11302: LD_INT 9
11304: PUSH
11305: LD_INT 10
11307: PUSH
11308: LD_INT 11
11310: PUSH
11311: LD_INT 12
11313: PUSH
11314: LD_INT 13
11316: PUSH
11317: LD_INT 14
11319: PUSH
11320: LD_INT 15
11322: PUSH
11323: LD_INT 16
11325: PUSH
11326: LD_INT 17
11328: PUSH
11329: LD_INT 18
11331: PUSH
11332: LD_INT 19
11334: PUSH
11335: LD_INT 20
11337: PUSH
11338: LD_INT 21
11340: PUSH
11341: LD_INT 22
11343: PUSH
11344: LD_INT 23
11346: PUSH
11347: LD_INT 24
11349: PUSH
11350: LD_INT 25
11352: PUSH
11353: LD_INT 26
11355: PUSH
11356: LD_INT 27
11358: PUSH
11359: LD_INT 28
11361: PUSH
11362: LD_INT 30
11364: PUSH
11365: LD_INT 31
11367: PUSH
11368: LD_INT 32
11370: PUSH
11371: LD_INT 33
11373: PUSH
11374: LD_INT 34
11376: PUSH
11377: LD_INT 36
11379: PUSH
11380: EMPTY
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 101
11418: PUSH
11419: LD_INT 102
11421: PUSH
11422: LD_INT 103
11424: PUSH
11425: LD_INT 104
11427: PUSH
11428: LD_INT 105
11430: PUSH
11431: LD_INT 106
11433: PUSH
11434: LD_INT 107
11436: PUSH
11437: LD_INT 108
11439: PUSH
11440: LD_INT 109
11442: PUSH
11443: LD_INT 110
11445: PUSH
11446: LD_INT 111
11448: PUSH
11449: LD_INT 112
11451: PUSH
11452: LD_INT 113
11454: PUSH
11455: LD_INT 114
11457: PUSH
11458: LD_INT 116
11460: PUSH
11461: LD_INT 117
11463: PUSH
11464: LD_INT 118
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: ST_TO_ADDR
11490: GO 12945
11492: LD_INT 13
11494: DOUBLE
11495: EQUAL
11496: IFTRUE 11500
11498: GO 11708
11500: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11501: LD_ADDR_VAR 0 2
11505: PUSH
11506: LD_INT 1
11508: PUSH
11509: LD_INT 2
11511: PUSH
11512: LD_INT 3
11514: PUSH
11515: LD_INT 4
11517: PUSH
11518: LD_INT 5
11520: PUSH
11521: LD_INT 8
11523: PUSH
11524: LD_INT 9
11526: PUSH
11527: LD_INT 10
11529: PUSH
11530: LD_INT 11
11532: PUSH
11533: LD_INT 12
11535: PUSH
11536: LD_INT 14
11538: PUSH
11539: LD_INT 15
11541: PUSH
11542: LD_INT 16
11544: PUSH
11545: LD_INT 17
11547: PUSH
11548: LD_INT 18
11550: PUSH
11551: LD_INT 19
11553: PUSH
11554: LD_INT 20
11556: PUSH
11557: LD_INT 21
11559: PUSH
11560: LD_INT 22
11562: PUSH
11563: LD_INT 23
11565: PUSH
11566: LD_INT 24
11568: PUSH
11569: LD_INT 25
11571: PUSH
11572: LD_INT 26
11574: PUSH
11575: LD_INT 27
11577: PUSH
11578: LD_INT 28
11580: PUSH
11581: LD_INT 30
11583: PUSH
11584: LD_INT 31
11586: PUSH
11587: LD_INT 32
11589: PUSH
11590: LD_INT 33
11592: PUSH
11593: LD_INT 34
11595: PUSH
11596: LD_INT 36
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: PUSH
11632: LD_INT 101
11634: PUSH
11635: LD_INT 102
11637: PUSH
11638: LD_INT 103
11640: PUSH
11641: LD_INT 104
11643: PUSH
11644: LD_INT 105
11646: PUSH
11647: LD_INT 106
11649: PUSH
11650: LD_INT 107
11652: PUSH
11653: LD_INT 108
11655: PUSH
11656: LD_INT 109
11658: PUSH
11659: LD_INT 110
11661: PUSH
11662: LD_INT 111
11664: PUSH
11665: LD_INT 112
11667: PUSH
11668: LD_INT 113
11670: PUSH
11671: LD_INT 114
11673: PUSH
11674: LD_INT 116
11676: PUSH
11677: LD_INT 117
11679: PUSH
11680: LD_INT 118
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: ST_TO_ADDR
11706: GO 12945
11708: LD_INT 14
11710: DOUBLE
11711: EQUAL
11712: IFTRUE 11716
11714: GO 11940
11716: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11717: LD_ADDR_VAR 0 2
11721: PUSH
11722: LD_INT 1
11724: PUSH
11725: LD_INT 2
11727: PUSH
11728: LD_INT 3
11730: PUSH
11731: LD_INT 4
11733: PUSH
11734: LD_INT 5
11736: PUSH
11737: LD_INT 6
11739: PUSH
11740: LD_INT 7
11742: PUSH
11743: LD_INT 8
11745: PUSH
11746: LD_INT 9
11748: PUSH
11749: LD_INT 10
11751: PUSH
11752: LD_INT 11
11754: PUSH
11755: LD_INT 12
11757: PUSH
11758: LD_INT 13
11760: PUSH
11761: LD_INT 14
11763: PUSH
11764: LD_INT 15
11766: PUSH
11767: LD_INT 16
11769: PUSH
11770: LD_INT 17
11772: PUSH
11773: LD_INT 18
11775: PUSH
11776: LD_INT 19
11778: PUSH
11779: LD_INT 20
11781: PUSH
11782: LD_INT 21
11784: PUSH
11785: LD_INT 22
11787: PUSH
11788: LD_INT 23
11790: PUSH
11791: LD_INT 24
11793: PUSH
11794: LD_INT 25
11796: PUSH
11797: LD_INT 26
11799: PUSH
11800: LD_INT 27
11802: PUSH
11803: LD_INT 28
11805: PUSH
11806: LD_INT 29
11808: PUSH
11809: LD_INT 30
11811: PUSH
11812: LD_INT 31
11814: PUSH
11815: LD_INT 32
11817: PUSH
11818: LD_INT 33
11820: PUSH
11821: LD_INT 34
11823: PUSH
11824: LD_INT 36
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: PUSH
11864: LD_INT 101
11866: PUSH
11867: LD_INT 102
11869: PUSH
11870: LD_INT 103
11872: PUSH
11873: LD_INT 104
11875: PUSH
11876: LD_INT 105
11878: PUSH
11879: LD_INT 106
11881: PUSH
11882: LD_INT 107
11884: PUSH
11885: LD_INT 108
11887: PUSH
11888: LD_INT 109
11890: PUSH
11891: LD_INT 110
11893: PUSH
11894: LD_INT 111
11896: PUSH
11897: LD_INT 112
11899: PUSH
11900: LD_INT 113
11902: PUSH
11903: LD_INT 114
11905: PUSH
11906: LD_INT 116
11908: PUSH
11909: LD_INT 117
11911: PUSH
11912: LD_INT 118
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: ST_TO_ADDR
11938: GO 12945
11940: LD_INT 15
11942: DOUBLE
11943: EQUAL
11944: IFTRUE 11948
11946: GO 12172
11948: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11949: LD_ADDR_VAR 0 2
11953: PUSH
11954: LD_INT 1
11956: PUSH
11957: LD_INT 2
11959: PUSH
11960: LD_INT 3
11962: PUSH
11963: LD_INT 4
11965: PUSH
11966: LD_INT 5
11968: PUSH
11969: LD_INT 6
11971: PUSH
11972: LD_INT 7
11974: PUSH
11975: LD_INT 8
11977: PUSH
11978: LD_INT 9
11980: PUSH
11981: LD_INT 10
11983: PUSH
11984: LD_INT 11
11986: PUSH
11987: LD_INT 12
11989: PUSH
11990: LD_INT 13
11992: PUSH
11993: LD_INT 14
11995: PUSH
11996: LD_INT 15
11998: PUSH
11999: LD_INT 16
12001: PUSH
12002: LD_INT 17
12004: PUSH
12005: LD_INT 18
12007: PUSH
12008: LD_INT 19
12010: PUSH
12011: LD_INT 20
12013: PUSH
12014: LD_INT 21
12016: PUSH
12017: LD_INT 22
12019: PUSH
12020: LD_INT 23
12022: PUSH
12023: LD_INT 24
12025: PUSH
12026: LD_INT 25
12028: PUSH
12029: LD_INT 26
12031: PUSH
12032: LD_INT 27
12034: PUSH
12035: LD_INT 28
12037: PUSH
12038: LD_INT 29
12040: PUSH
12041: LD_INT 30
12043: PUSH
12044: LD_INT 31
12046: PUSH
12047: LD_INT 32
12049: PUSH
12050: LD_INT 33
12052: PUSH
12053: LD_INT 34
12055: PUSH
12056: LD_INT 36
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: PUSH
12096: LD_INT 101
12098: PUSH
12099: LD_INT 102
12101: PUSH
12102: LD_INT 103
12104: PUSH
12105: LD_INT 104
12107: PUSH
12108: LD_INT 105
12110: PUSH
12111: LD_INT 106
12113: PUSH
12114: LD_INT 107
12116: PUSH
12117: LD_INT 108
12119: PUSH
12120: LD_INT 109
12122: PUSH
12123: LD_INT 110
12125: PUSH
12126: LD_INT 111
12128: PUSH
12129: LD_INT 112
12131: PUSH
12132: LD_INT 113
12134: PUSH
12135: LD_INT 114
12137: PUSH
12138: LD_INT 116
12140: PUSH
12141: LD_INT 117
12143: PUSH
12144: LD_INT 118
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: ST_TO_ADDR
12170: GO 12945
12172: LD_INT 16
12174: DOUBLE
12175: EQUAL
12176: IFTRUE 12180
12178: GO 12316
12180: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12181: LD_ADDR_VAR 0 2
12185: PUSH
12186: LD_INT 2
12188: PUSH
12189: LD_INT 4
12191: PUSH
12192: LD_INT 5
12194: PUSH
12195: LD_INT 7
12197: PUSH
12198: LD_INT 11
12200: PUSH
12201: LD_INT 12
12203: PUSH
12204: LD_INT 15
12206: PUSH
12207: LD_INT 16
12209: PUSH
12210: LD_INT 20
12212: PUSH
12213: LD_INT 21
12215: PUSH
12216: LD_INT 22
12218: PUSH
12219: LD_INT 23
12221: PUSH
12222: LD_INT 25
12224: PUSH
12225: LD_INT 26
12227: PUSH
12228: LD_INT 30
12230: PUSH
12231: LD_INT 31
12233: PUSH
12234: LD_INT 32
12236: PUSH
12237: LD_INT 33
12239: PUSH
12240: LD_INT 34
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: PUSH
12264: LD_INT 101
12266: PUSH
12267: LD_INT 102
12269: PUSH
12270: LD_INT 103
12272: PUSH
12273: LD_INT 106
12275: PUSH
12276: LD_INT 108
12278: PUSH
12279: LD_INT 112
12281: PUSH
12282: LD_INT 113
12284: PUSH
12285: LD_INT 114
12287: PUSH
12288: LD_INT 116
12290: PUSH
12291: LD_INT 117
12293: PUSH
12294: LD_INT 118
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: ST_TO_ADDR
12314: GO 12945
12316: LD_INT 17
12318: DOUBLE
12319: EQUAL
12320: IFTRUE 12324
12322: GO 12548
12324: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12325: LD_ADDR_VAR 0 2
12329: PUSH
12330: LD_INT 1
12332: PUSH
12333: LD_INT 2
12335: PUSH
12336: LD_INT 3
12338: PUSH
12339: LD_INT 4
12341: PUSH
12342: LD_INT 5
12344: PUSH
12345: LD_INT 6
12347: PUSH
12348: LD_INT 7
12350: PUSH
12351: LD_INT 8
12353: PUSH
12354: LD_INT 9
12356: PUSH
12357: LD_INT 10
12359: PUSH
12360: LD_INT 11
12362: PUSH
12363: LD_INT 12
12365: PUSH
12366: LD_INT 13
12368: PUSH
12369: LD_INT 14
12371: PUSH
12372: LD_INT 15
12374: PUSH
12375: LD_INT 16
12377: PUSH
12378: LD_INT 17
12380: PUSH
12381: LD_INT 18
12383: PUSH
12384: LD_INT 19
12386: PUSH
12387: LD_INT 20
12389: PUSH
12390: LD_INT 21
12392: PUSH
12393: LD_INT 22
12395: PUSH
12396: LD_INT 23
12398: PUSH
12399: LD_INT 24
12401: PUSH
12402: LD_INT 25
12404: PUSH
12405: LD_INT 26
12407: PUSH
12408: LD_INT 27
12410: PUSH
12411: LD_INT 28
12413: PUSH
12414: LD_INT 29
12416: PUSH
12417: LD_INT 30
12419: PUSH
12420: LD_INT 31
12422: PUSH
12423: LD_INT 32
12425: PUSH
12426: LD_INT 33
12428: PUSH
12429: LD_INT 34
12431: PUSH
12432: LD_INT 36
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 101
12474: PUSH
12475: LD_INT 102
12477: PUSH
12478: LD_INT 103
12480: PUSH
12481: LD_INT 104
12483: PUSH
12484: LD_INT 105
12486: PUSH
12487: LD_INT 106
12489: PUSH
12490: LD_INT 107
12492: PUSH
12493: LD_INT 108
12495: PUSH
12496: LD_INT 109
12498: PUSH
12499: LD_INT 110
12501: PUSH
12502: LD_INT 111
12504: PUSH
12505: LD_INT 112
12507: PUSH
12508: LD_INT 113
12510: PUSH
12511: LD_INT 114
12513: PUSH
12514: LD_INT 116
12516: PUSH
12517: LD_INT 117
12519: PUSH
12520: LD_INT 118
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: ST_TO_ADDR
12546: GO 12945
12548: LD_INT 18
12550: DOUBLE
12551: EQUAL
12552: IFTRUE 12556
12554: GO 12704
12556: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12557: LD_ADDR_VAR 0 2
12561: PUSH
12562: LD_INT 2
12564: PUSH
12565: LD_INT 4
12567: PUSH
12568: LD_INT 5
12570: PUSH
12571: LD_INT 7
12573: PUSH
12574: LD_INT 11
12576: PUSH
12577: LD_INT 12
12579: PUSH
12580: LD_INT 15
12582: PUSH
12583: LD_INT 16
12585: PUSH
12586: LD_INT 20
12588: PUSH
12589: LD_INT 21
12591: PUSH
12592: LD_INT 22
12594: PUSH
12595: LD_INT 23
12597: PUSH
12598: LD_INT 25
12600: PUSH
12601: LD_INT 26
12603: PUSH
12604: LD_INT 30
12606: PUSH
12607: LD_INT 31
12609: PUSH
12610: LD_INT 32
12612: PUSH
12613: LD_INT 33
12615: PUSH
12616: LD_INT 34
12618: PUSH
12619: LD_INT 35
12621: PUSH
12622: LD_INT 36
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: PUSH
12648: LD_INT 101
12650: PUSH
12651: LD_INT 102
12653: PUSH
12654: LD_INT 103
12656: PUSH
12657: LD_INT 106
12659: PUSH
12660: LD_INT 108
12662: PUSH
12663: LD_INT 112
12665: PUSH
12666: LD_INT 113
12668: PUSH
12669: LD_INT 114
12671: PUSH
12672: LD_INT 115
12674: PUSH
12675: LD_INT 116
12677: PUSH
12678: LD_INT 117
12680: PUSH
12681: LD_INT 118
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: ST_TO_ADDR
12702: GO 12945
12704: LD_INT 19
12706: DOUBLE
12707: EQUAL
12708: IFTRUE 12712
12710: GO 12944
12712: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12713: LD_ADDR_VAR 0 2
12717: PUSH
12718: LD_INT 1
12720: PUSH
12721: LD_INT 2
12723: PUSH
12724: LD_INT 3
12726: PUSH
12727: LD_INT 4
12729: PUSH
12730: LD_INT 5
12732: PUSH
12733: LD_INT 6
12735: PUSH
12736: LD_INT 7
12738: PUSH
12739: LD_INT 8
12741: PUSH
12742: LD_INT 9
12744: PUSH
12745: LD_INT 10
12747: PUSH
12748: LD_INT 11
12750: PUSH
12751: LD_INT 12
12753: PUSH
12754: LD_INT 13
12756: PUSH
12757: LD_INT 14
12759: PUSH
12760: LD_INT 15
12762: PUSH
12763: LD_INT 16
12765: PUSH
12766: LD_INT 17
12768: PUSH
12769: LD_INT 18
12771: PUSH
12772: LD_INT 19
12774: PUSH
12775: LD_INT 20
12777: PUSH
12778: LD_INT 21
12780: PUSH
12781: LD_INT 22
12783: PUSH
12784: LD_INT 23
12786: PUSH
12787: LD_INT 24
12789: PUSH
12790: LD_INT 25
12792: PUSH
12793: LD_INT 26
12795: PUSH
12796: LD_INT 27
12798: PUSH
12799: LD_INT 28
12801: PUSH
12802: LD_INT 29
12804: PUSH
12805: LD_INT 30
12807: PUSH
12808: LD_INT 31
12810: PUSH
12811: LD_INT 32
12813: PUSH
12814: LD_INT 33
12816: PUSH
12817: LD_INT 34
12819: PUSH
12820: LD_INT 35
12822: PUSH
12823: LD_INT 36
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: PUSH
12864: LD_INT 101
12866: PUSH
12867: LD_INT 102
12869: PUSH
12870: LD_INT 103
12872: PUSH
12873: LD_INT 104
12875: PUSH
12876: LD_INT 105
12878: PUSH
12879: LD_INT 106
12881: PUSH
12882: LD_INT 107
12884: PUSH
12885: LD_INT 108
12887: PUSH
12888: LD_INT 109
12890: PUSH
12891: LD_INT 110
12893: PUSH
12894: LD_INT 111
12896: PUSH
12897: LD_INT 112
12899: PUSH
12900: LD_INT 113
12902: PUSH
12903: LD_INT 114
12905: PUSH
12906: LD_INT 115
12908: PUSH
12909: LD_INT 116
12911: PUSH
12912: LD_INT 117
12914: PUSH
12915: LD_INT 118
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: ST_TO_ADDR
12942: GO 12945
12944: POP
// end else
12945: GO 13176
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12947: LD_ADDR_VAR 0 2
12951: PUSH
12952: LD_INT 1
12954: PUSH
12955: LD_INT 2
12957: PUSH
12958: LD_INT 3
12960: PUSH
12961: LD_INT 4
12963: PUSH
12964: LD_INT 5
12966: PUSH
12967: LD_INT 6
12969: PUSH
12970: LD_INT 7
12972: PUSH
12973: LD_INT 8
12975: PUSH
12976: LD_INT 9
12978: PUSH
12979: LD_INT 10
12981: PUSH
12982: LD_INT 11
12984: PUSH
12985: LD_INT 12
12987: PUSH
12988: LD_INT 13
12990: PUSH
12991: LD_INT 14
12993: PUSH
12994: LD_INT 15
12996: PUSH
12997: LD_INT 16
12999: PUSH
13000: LD_INT 17
13002: PUSH
13003: LD_INT 18
13005: PUSH
13006: LD_INT 19
13008: PUSH
13009: LD_INT 20
13011: PUSH
13012: LD_INT 21
13014: PUSH
13015: LD_INT 22
13017: PUSH
13018: LD_INT 23
13020: PUSH
13021: LD_INT 24
13023: PUSH
13024: LD_INT 25
13026: PUSH
13027: LD_INT 26
13029: PUSH
13030: LD_INT 27
13032: PUSH
13033: LD_INT 28
13035: PUSH
13036: LD_INT 29
13038: PUSH
13039: LD_INT 30
13041: PUSH
13042: LD_INT 31
13044: PUSH
13045: LD_INT 32
13047: PUSH
13048: LD_INT 33
13050: PUSH
13051: LD_INT 34
13053: PUSH
13054: LD_INT 35
13056: PUSH
13057: LD_INT 36
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: PUSH
13098: LD_INT 101
13100: PUSH
13101: LD_INT 102
13103: PUSH
13104: LD_INT 103
13106: PUSH
13107: LD_INT 104
13109: PUSH
13110: LD_INT 105
13112: PUSH
13113: LD_INT 106
13115: PUSH
13116: LD_INT 107
13118: PUSH
13119: LD_INT 108
13121: PUSH
13122: LD_INT 109
13124: PUSH
13125: LD_INT 110
13127: PUSH
13128: LD_INT 111
13130: PUSH
13131: LD_INT 112
13133: PUSH
13134: LD_INT 113
13136: PUSH
13137: LD_INT 114
13139: PUSH
13140: LD_INT 115
13142: PUSH
13143: LD_INT 116
13145: PUSH
13146: LD_INT 117
13148: PUSH
13149: LD_INT 118
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: ST_TO_ADDR
// if result then
13176: LD_VAR 0 2
13180: IFFALSE 13966
// begin normal :=  ;
13182: LD_ADDR_VAR 0 5
13186: PUSH
13187: LD_STRING 
13189: ST_TO_ADDR
// hardcore :=  ;
13190: LD_ADDR_VAR 0 6
13194: PUSH
13195: LD_STRING 
13197: ST_TO_ADDR
// active :=  ;
13198: LD_ADDR_VAR 0 7
13202: PUSH
13203: LD_STRING 
13205: ST_TO_ADDR
// for i = 1 to normalCounter do
13206: LD_ADDR_VAR 0 8
13210: PUSH
13211: DOUBLE
13212: LD_INT 1
13214: DEC
13215: ST_TO_ADDR
13216: LD_EXP 48
13220: PUSH
13221: FOR_TO
13222: IFFALSE 13323
// begin tmp := 0 ;
13224: LD_ADDR_VAR 0 3
13228: PUSH
13229: LD_STRING 0
13231: ST_TO_ADDR
// if result [ 1 ] then
13232: LD_VAR 0 2
13236: PUSH
13237: LD_INT 1
13239: ARRAY
13240: IFFALSE 13305
// if result [ 1 ] [ 1 ] = i then
13242: LD_VAR 0 2
13246: PUSH
13247: LD_INT 1
13249: ARRAY
13250: PUSH
13251: LD_INT 1
13253: ARRAY
13254: PUSH
13255: LD_VAR 0 8
13259: EQUAL
13260: IFFALSE 13305
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13262: LD_ADDR_VAR 0 2
13266: PUSH
13267: LD_VAR 0 2
13271: PPUSH
13272: LD_INT 1
13274: PPUSH
13275: LD_VAR 0 2
13279: PUSH
13280: LD_INT 1
13282: ARRAY
13283: PPUSH
13284: LD_INT 1
13286: PPUSH
13287: CALL_OW 3
13291: PPUSH
13292: CALL_OW 1
13296: ST_TO_ADDR
// tmp := 1 ;
13297: LD_ADDR_VAR 0 3
13301: PUSH
13302: LD_STRING 1
13304: ST_TO_ADDR
// end ; normal := normal & tmp ;
13305: LD_ADDR_VAR 0 5
13309: PUSH
13310: LD_VAR 0 5
13314: PUSH
13315: LD_VAR 0 3
13319: STR
13320: ST_TO_ADDR
// end ;
13321: GO 13221
13323: POP
13324: POP
// for i = 1 to hardcoreCounter do
13325: LD_ADDR_VAR 0 8
13329: PUSH
13330: DOUBLE
13331: LD_INT 1
13333: DEC
13334: ST_TO_ADDR
13335: LD_EXP 49
13339: PUSH
13340: FOR_TO
13341: IFFALSE 13446
// begin tmp := 0 ;
13343: LD_ADDR_VAR 0 3
13347: PUSH
13348: LD_STRING 0
13350: ST_TO_ADDR
// if result [ 2 ] then
13351: LD_VAR 0 2
13355: PUSH
13356: LD_INT 2
13358: ARRAY
13359: IFFALSE 13428
// if result [ 2 ] [ 1 ] = 100 + i then
13361: LD_VAR 0 2
13365: PUSH
13366: LD_INT 2
13368: ARRAY
13369: PUSH
13370: LD_INT 1
13372: ARRAY
13373: PUSH
13374: LD_INT 100
13376: PUSH
13377: LD_VAR 0 8
13381: PLUS
13382: EQUAL
13383: IFFALSE 13428
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13385: LD_ADDR_VAR 0 2
13389: PUSH
13390: LD_VAR 0 2
13394: PPUSH
13395: LD_INT 2
13397: PPUSH
13398: LD_VAR 0 2
13402: PUSH
13403: LD_INT 2
13405: ARRAY
13406: PPUSH
13407: LD_INT 1
13409: PPUSH
13410: CALL_OW 3
13414: PPUSH
13415: CALL_OW 1
13419: ST_TO_ADDR
// tmp := 1 ;
13420: LD_ADDR_VAR 0 3
13424: PUSH
13425: LD_STRING 1
13427: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13428: LD_ADDR_VAR 0 6
13432: PUSH
13433: LD_VAR 0 6
13437: PUSH
13438: LD_VAR 0 3
13442: STR
13443: ST_TO_ADDR
// end ;
13444: GO 13340
13446: POP
13447: POP
// if isGameLoad then
13448: LD_VAR 0 1
13452: IFFALSE 13927
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13454: LD_ADDR_VAR 0 4
13458: PUSH
13459: LD_EXP 52
13463: PUSH
13464: LD_EXP 51
13468: PUSH
13469: LD_EXP 53
13473: PUSH
13474: LD_EXP 50
13478: PUSH
13479: LD_EXP 54
13483: PUSH
13484: LD_EXP 55
13488: PUSH
13489: LD_EXP 56
13493: PUSH
13494: LD_EXP 57
13498: PUSH
13499: LD_EXP 58
13503: PUSH
13504: LD_EXP 59
13508: PUSH
13509: LD_EXP 60
13513: PUSH
13514: LD_EXP 61
13518: PUSH
13519: LD_EXP 62
13523: PUSH
13524: LD_EXP 63
13528: PUSH
13529: LD_EXP 71
13533: PUSH
13534: LD_EXP 72
13538: PUSH
13539: LD_EXP 73
13543: PUSH
13544: LD_EXP 74
13548: PUSH
13549: LD_EXP 76
13553: PUSH
13554: LD_EXP 77
13558: PUSH
13559: LD_EXP 78
13563: PUSH
13564: LD_EXP 81
13568: PUSH
13569: LD_EXP 83
13573: PUSH
13574: LD_EXP 84
13578: PUSH
13579: LD_EXP 85
13583: PUSH
13584: LD_EXP 87
13588: PUSH
13589: LD_EXP 88
13593: PUSH
13594: LD_EXP 91
13598: PUSH
13599: LD_EXP 92
13603: PUSH
13604: LD_EXP 93
13608: PUSH
13609: LD_EXP 94
13613: PUSH
13614: LD_EXP 95
13618: PUSH
13619: LD_EXP 96
13623: PUSH
13624: LD_EXP 97
13628: PUSH
13629: LD_EXP 98
13633: PUSH
13634: LD_EXP 99
13638: PUSH
13639: LD_EXP 64
13643: PUSH
13644: LD_EXP 65
13648: PUSH
13649: LD_EXP 68
13653: PUSH
13654: LD_EXP 69
13658: PUSH
13659: LD_EXP 70
13663: PUSH
13664: LD_EXP 66
13668: PUSH
13669: LD_EXP 67
13673: PUSH
13674: LD_EXP 75
13678: PUSH
13679: LD_EXP 79
13683: PUSH
13684: LD_EXP 80
13688: PUSH
13689: LD_EXP 82
13693: PUSH
13694: LD_EXP 86
13698: PUSH
13699: LD_EXP 89
13703: PUSH
13704: LD_EXP 90
13708: PUSH
13709: LD_EXP 100
13713: PUSH
13714: LD_EXP 101
13718: PUSH
13719: LD_EXP 102
13723: PUSH
13724: LD_EXP 103
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: ST_TO_ADDR
// tmp :=  ;
13785: LD_ADDR_VAR 0 3
13789: PUSH
13790: LD_STRING 
13792: ST_TO_ADDR
// for i = 1 to normalCounter do
13793: LD_ADDR_VAR 0 8
13797: PUSH
13798: DOUBLE
13799: LD_INT 1
13801: DEC
13802: ST_TO_ADDR
13803: LD_EXP 48
13807: PUSH
13808: FOR_TO
13809: IFFALSE 13845
// begin if flags [ i ] then
13811: LD_VAR 0 4
13815: PUSH
13816: LD_VAR 0 8
13820: ARRAY
13821: IFFALSE 13843
// tmp := tmp & i & ; ;
13823: LD_ADDR_VAR 0 3
13827: PUSH
13828: LD_VAR 0 3
13832: PUSH
13833: LD_VAR 0 8
13837: STR
13838: PUSH
13839: LD_STRING ;
13841: STR
13842: ST_TO_ADDR
// end ;
13843: GO 13808
13845: POP
13846: POP
// for i = 1 to hardcoreCounter do
13847: LD_ADDR_VAR 0 8
13851: PUSH
13852: DOUBLE
13853: LD_INT 1
13855: DEC
13856: ST_TO_ADDR
13857: LD_EXP 49
13861: PUSH
13862: FOR_TO
13863: IFFALSE 13909
// begin if flags [ normalCounter + i ] then
13865: LD_VAR 0 4
13869: PUSH
13870: LD_EXP 48
13874: PUSH
13875: LD_VAR 0 8
13879: PLUS
13880: ARRAY
13881: IFFALSE 13907
// tmp := tmp & ( 100 + i ) & ; ;
13883: LD_ADDR_VAR 0 3
13887: PUSH
13888: LD_VAR 0 3
13892: PUSH
13893: LD_INT 100
13895: PUSH
13896: LD_VAR 0 8
13900: PLUS
13901: STR
13902: PUSH
13903: LD_STRING ;
13905: STR
13906: ST_TO_ADDR
// end ;
13907: GO 13862
13909: POP
13910: POP
// if tmp then
13911: LD_VAR 0 3
13915: IFFALSE 13927
// active := tmp ;
13917: LD_ADDR_VAR 0 7
13921: PUSH
13922: LD_VAR 0 3
13926: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13927: LD_STRING getStreamItemsFromMission("
13929: PUSH
13930: LD_VAR 0 5
13934: STR
13935: PUSH
13936: LD_STRING ","
13938: STR
13939: PUSH
13940: LD_VAR 0 6
13944: STR
13945: PUSH
13946: LD_STRING ","
13948: STR
13949: PUSH
13950: LD_VAR 0 7
13954: STR
13955: PUSH
13956: LD_STRING ")
13958: STR
13959: PPUSH
13960: CALL_OW 559
// end else
13964: GO 13973
// ToLua ( getStreamItemsFromMission("","","") ) ;
13966: LD_STRING getStreamItemsFromMission("","","")
13968: PPUSH
13969: CALL_OW 559
// end ;
13973: LD_VAR 0 2
13977: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13978: LD_EXP 47
13982: PUSH
13983: LD_EXP 52
13987: AND
13988: IFFALSE 14112
13990: GO 13992
13992: DISABLE
13993: LD_INT 0
13995: PPUSH
13996: PPUSH
// begin enable ;
13997: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13998: LD_ADDR_VAR 0 2
14002: PUSH
14003: LD_INT 22
14005: PUSH
14006: LD_OWVAR 2
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PUSH
14015: LD_INT 2
14017: PUSH
14018: LD_INT 34
14020: PUSH
14021: LD_INT 7
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: PUSH
14028: LD_INT 34
14030: PUSH
14031: LD_INT 45
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: PUSH
14038: LD_INT 34
14040: PUSH
14041: LD_INT 28
14043: PUSH
14044: EMPTY
14045: LIST
14046: LIST
14047: PUSH
14048: LD_INT 34
14050: PUSH
14051: LD_INT 47
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PPUSH
14069: CALL_OW 69
14073: ST_TO_ADDR
// if not tmp then
14074: LD_VAR 0 2
14078: NOT
14079: IFFALSE 14083
// exit ;
14081: GO 14112
// for i in tmp do
14083: LD_ADDR_VAR 0 1
14087: PUSH
14088: LD_VAR 0 2
14092: PUSH
14093: FOR_IN
14094: IFFALSE 14110
// begin SetLives ( i , 0 ) ;
14096: LD_VAR 0 1
14100: PPUSH
14101: LD_INT 0
14103: PPUSH
14104: CALL_OW 234
// end ;
14108: GO 14093
14110: POP
14111: POP
// end ;
14112: PPOPN 2
14114: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14115: LD_EXP 47
14119: PUSH
14120: LD_EXP 53
14124: AND
14125: IFFALSE 14209
14127: GO 14129
14129: DISABLE
14130: LD_INT 0
14132: PPUSH
14133: PPUSH
// begin enable ;
14134: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14135: LD_ADDR_VAR 0 2
14139: PUSH
14140: LD_INT 22
14142: PUSH
14143: LD_OWVAR 2
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: LD_INT 32
14154: PUSH
14155: LD_INT 3
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PPUSH
14166: CALL_OW 69
14170: ST_TO_ADDR
// if not tmp then
14171: LD_VAR 0 2
14175: NOT
14176: IFFALSE 14180
// exit ;
14178: GO 14209
// for i in tmp do
14180: LD_ADDR_VAR 0 1
14184: PUSH
14185: LD_VAR 0 2
14189: PUSH
14190: FOR_IN
14191: IFFALSE 14207
// begin SetLives ( i , 0 ) ;
14193: LD_VAR 0 1
14197: PPUSH
14198: LD_INT 0
14200: PPUSH
14201: CALL_OW 234
// end ;
14205: GO 14190
14207: POP
14208: POP
// end ;
14209: PPOPN 2
14211: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14212: LD_EXP 47
14216: PUSH
14217: LD_EXP 50
14221: AND
14222: IFFALSE 14315
14224: GO 14226
14226: DISABLE
14227: LD_INT 0
14229: PPUSH
// begin enable ;
14230: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14231: LD_ADDR_VAR 0 1
14235: PUSH
14236: LD_INT 22
14238: PUSH
14239: LD_OWVAR 2
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: LD_INT 2
14250: PUSH
14251: LD_INT 25
14253: PUSH
14254: LD_INT 5
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: PUSH
14261: LD_INT 25
14263: PUSH
14264: LD_INT 9
14266: PUSH
14267: EMPTY
14268: LIST
14269: LIST
14270: PUSH
14271: LD_INT 25
14273: PUSH
14274: LD_INT 8
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PPUSH
14291: CALL_OW 69
14295: PUSH
14296: FOR_IN
14297: IFFALSE 14313
// begin SetClass ( i , 1 ) ;
14299: LD_VAR 0 1
14303: PPUSH
14304: LD_INT 1
14306: PPUSH
14307: CALL_OW 336
// end ;
14311: GO 14296
14313: POP
14314: POP
// end ;
14315: PPOPN 1
14317: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14318: LD_EXP 47
14322: PUSH
14323: LD_EXP 51
14327: AND
14328: PUSH
14329: LD_OWVAR 65
14333: PUSH
14334: LD_INT 7
14336: LESS
14337: AND
14338: IFFALSE 14352
14340: GO 14342
14342: DISABLE
// begin enable ;
14343: ENABLE
// game_speed := 7 ;
14344: LD_ADDR_OWVAR 65
14348: PUSH
14349: LD_INT 7
14351: ST_TO_ADDR
// end ;
14352: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14353: LD_EXP 47
14357: PUSH
14358: LD_EXP 54
14362: AND
14363: IFFALSE 14565
14365: GO 14367
14367: DISABLE
14368: LD_INT 0
14370: PPUSH
14371: PPUSH
14372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14373: LD_ADDR_VAR 0 3
14377: PUSH
14378: LD_INT 81
14380: PUSH
14381: LD_OWVAR 2
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: LD_INT 21
14392: PUSH
14393: LD_INT 1
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: PPUSH
14404: CALL_OW 69
14408: ST_TO_ADDR
// if not tmp then
14409: LD_VAR 0 3
14413: NOT
14414: IFFALSE 14418
// exit ;
14416: GO 14565
// if tmp > 5 then
14418: LD_VAR 0 3
14422: PUSH
14423: LD_INT 5
14425: GREATER
14426: IFFALSE 14438
// k := 5 else
14428: LD_ADDR_VAR 0 2
14432: PUSH
14433: LD_INT 5
14435: ST_TO_ADDR
14436: GO 14448
// k := tmp ;
14438: LD_ADDR_VAR 0 2
14442: PUSH
14443: LD_VAR 0 3
14447: ST_TO_ADDR
// for i := 1 to k do
14448: LD_ADDR_VAR 0 1
14452: PUSH
14453: DOUBLE
14454: LD_INT 1
14456: DEC
14457: ST_TO_ADDR
14458: LD_VAR 0 2
14462: PUSH
14463: FOR_TO
14464: IFFALSE 14563
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14466: LD_VAR 0 3
14470: PUSH
14471: LD_VAR 0 1
14475: ARRAY
14476: PPUSH
14477: LD_VAR 0 1
14481: PUSH
14482: LD_INT 4
14484: MOD
14485: PUSH
14486: LD_INT 1
14488: PLUS
14489: PPUSH
14490: CALL_OW 259
14494: PUSH
14495: LD_INT 10
14497: LESS
14498: IFFALSE 14561
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14500: LD_VAR 0 3
14504: PUSH
14505: LD_VAR 0 1
14509: ARRAY
14510: PPUSH
14511: LD_VAR 0 1
14515: PUSH
14516: LD_INT 4
14518: MOD
14519: PUSH
14520: LD_INT 1
14522: PLUS
14523: PPUSH
14524: LD_VAR 0 3
14528: PUSH
14529: LD_VAR 0 1
14533: ARRAY
14534: PPUSH
14535: LD_VAR 0 1
14539: PUSH
14540: LD_INT 4
14542: MOD
14543: PUSH
14544: LD_INT 1
14546: PLUS
14547: PPUSH
14548: CALL_OW 259
14552: PUSH
14553: LD_INT 1
14555: PLUS
14556: PPUSH
14557: CALL_OW 237
14561: GO 14463
14563: POP
14564: POP
// end ;
14565: PPOPN 3
14567: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14568: LD_EXP 47
14572: PUSH
14573: LD_EXP 55
14577: AND
14578: IFFALSE 14598
14580: GO 14582
14582: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14583: LD_INT 4
14585: PPUSH
14586: LD_OWVAR 2
14590: PPUSH
14591: LD_INT 0
14593: PPUSH
14594: CALL_OW 324
14598: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14599: LD_EXP 47
14603: PUSH
14604: LD_EXP 84
14608: AND
14609: IFFALSE 14629
14611: GO 14613
14613: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14614: LD_INT 19
14616: PPUSH
14617: LD_OWVAR 2
14621: PPUSH
14622: LD_INT 0
14624: PPUSH
14625: CALL_OW 324
14629: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14630: LD_EXP 47
14634: PUSH
14635: LD_EXP 56
14639: AND
14640: IFFALSE 14742
14642: GO 14644
14644: DISABLE
14645: LD_INT 0
14647: PPUSH
14648: PPUSH
// begin enable ;
14649: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14650: LD_ADDR_VAR 0 2
14654: PUSH
14655: LD_INT 22
14657: PUSH
14658: LD_OWVAR 2
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: LD_INT 2
14669: PUSH
14670: LD_INT 34
14672: PUSH
14673: LD_INT 11
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 34
14682: PUSH
14683: LD_INT 30
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: LIST
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PPUSH
14699: CALL_OW 69
14703: ST_TO_ADDR
// if not tmp then
14704: LD_VAR 0 2
14708: NOT
14709: IFFALSE 14713
// exit ;
14711: GO 14742
// for i in tmp do
14713: LD_ADDR_VAR 0 1
14717: PUSH
14718: LD_VAR 0 2
14722: PUSH
14723: FOR_IN
14724: IFFALSE 14740
// begin SetLives ( i , 0 ) ;
14726: LD_VAR 0 1
14730: PPUSH
14731: LD_INT 0
14733: PPUSH
14734: CALL_OW 234
// end ;
14738: GO 14723
14740: POP
14741: POP
// end ;
14742: PPOPN 2
14744: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14745: LD_EXP 47
14749: PUSH
14750: LD_EXP 57
14754: AND
14755: IFFALSE 14775
14757: GO 14759
14759: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14760: LD_INT 32
14762: PPUSH
14763: LD_OWVAR 2
14767: PPUSH
14768: LD_INT 0
14770: PPUSH
14771: CALL_OW 324
14775: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14776: LD_EXP 47
14780: PUSH
14781: LD_EXP 58
14785: AND
14786: IFFALSE 14967
14788: GO 14790
14790: DISABLE
14791: LD_INT 0
14793: PPUSH
14794: PPUSH
14795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14796: LD_ADDR_VAR 0 2
14800: PUSH
14801: LD_INT 22
14803: PUSH
14804: LD_OWVAR 2
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PUSH
14813: LD_INT 33
14815: PUSH
14816: LD_INT 3
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PPUSH
14827: CALL_OW 69
14831: ST_TO_ADDR
// if not tmp then
14832: LD_VAR 0 2
14836: NOT
14837: IFFALSE 14841
// exit ;
14839: GO 14967
// side := 0 ;
14841: LD_ADDR_VAR 0 3
14845: PUSH
14846: LD_INT 0
14848: ST_TO_ADDR
// for i := 1 to 8 do
14849: LD_ADDR_VAR 0 1
14853: PUSH
14854: DOUBLE
14855: LD_INT 1
14857: DEC
14858: ST_TO_ADDR
14859: LD_INT 8
14861: PUSH
14862: FOR_TO
14863: IFFALSE 14911
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14865: LD_OWVAR 2
14869: PUSH
14870: LD_VAR 0 1
14874: NONEQUAL
14875: PUSH
14876: LD_OWVAR 2
14880: PPUSH
14881: LD_VAR 0 1
14885: PPUSH
14886: CALL_OW 81
14890: PUSH
14891: LD_INT 2
14893: EQUAL
14894: AND
14895: IFFALSE 14909
// begin side := i ;
14897: LD_ADDR_VAR 0 3
14901: PUSH
14902: LD_VAR 0 1
14906: ST_TO_ADDR
// break ;
14907: GO 14911
// end ;
14909: GO 14862
14911: POP
14912: POP
// if not side then
14913: LD_VAR 0 3
14917: NOT
14918: IFFALSE 14922
// exit ;
14920: GO 14967
// for i := 1 to tmp do
14922: LD_ADDR_VAR 0 1
14926: PUSH
14927: DOUBLE
14928: LD_INT 1
14930: DEC
14931: ST_TO_ADDR
14932: LD_VAR 0 2
14936: PUSH
14937: FOR_TO
14938: IFFALSE 14965
// if Prob ( 60 ) then
14940: LD_INT 60
14942: PPUSH
14943: CALL_OW 13
14947: IFFALSE 14963
// SetSide ( i , side ) ;
14949: LD_VAR 0 1
14953: PPUSH
14954: LD_VAR 0 3
14958: PPUSH
14959: CALL_OW 235
14963: GO 14937
14965: POP
14966: POP
// end ;
14967: PPOPN 3
14969: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14970: LD_EXP 47
14974: PUSH
14975: LD_EXP 60
14979: AND
14980: IFFALSE 15099
14982: GO 14984
14984: DISABLE
14985: LD_INT 0
14987: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14988: LD_ADDR_VAR 0 1
14992: PUSH
14993: LD_INT 22
14995: PUSH
14996: LD_OWVAR 2
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: LD_INT 21
15007: PUSH
15008: LD_INT 1
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 3
15017: PUSH
15018: LD_INT 23
15020: PUSH
15021: LD_INT 0
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: LIST
15036: PPUSH
15037: CALL_OW 69
15041: PUSH
15042: FOR_IN
15043: IFFALSE 15097
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15045: LD_VAR 0 1
15049: PPUSH
15050: CALL_OW 257
15054: PUSH
15055: LD_INT 1
15057: PUSH
15058: LD_INT 2
15060: PUSH
15061: LD_INT 3
15063: PUSH
15064: LD_INT 4
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: IN
15073: IFFALSE 15095
// SetClass ( un , rand ( 1 , 4 ) ) ;
15075: LD_VAR 0 1
15079: PPUSH
15080: LD_INT 1
15082: PPUSH
15083: LD_INT 4
15085: PPUSH
15086: CALL_OW 12
15090: PPUSH
15091: CALL_OW 336
15095: GO 15042
15097: POP
15098: POP
// end ;
15099: PPOPN 1
15101: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15102: LD_EXP 47
15106: PUSH
15107: LD_EXP 59
15111: AND
15112: IFFALSE 15191
15114: GO 15116
15116: DISABLE
15117: LD_INT 0
15119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15120: LD_ADDR_VAR 0 1
15124: PUSH
15125: LD_INT 22
15127: PUSH
15128: LD_OWVAR 2
15132: PUSH
15133: EMPTY
15134: LIST
15135: LIST
15136: PUSH
15137: LD_INT 21
15139: PUSH
15140: LD_INT 3
15142: PUSH
15143: EMPTY
15144: LIST
15145: LIST
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: PPUSH
15151: CALL_OW 69
15155: ST_TO_ADDR
// if not tmp then
15156: LD_VAR 0 1
15160: NOT
15161: IFFALSE 15165
// exit ;
15163: GO 15191
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15165: LD_VAR 0 1
15169: PUSH
15170: LD_INT 1
15172: PPUSH
15173: LD_VAR 0 1
15177: PPUSH
15178: CALL_OW 12
15182: ARRAY
15183: PPUSH
15184: LD_INT 100
15186: PPUSH
15187: CALL_OW 234
// end ;
15191: PPOPN 1
15193: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15194: LD_EXP 47
15198: PUSH
15199: LD_EXP 61
15203: AND
15204: IFFALSE 15302
15206: GO 15208
15208: DISABLE
15209: LD_INT 0
15211: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15212: LD_ADDR_VAR 0 1
15216: PUSH
15217: LD_INT 22
15219: PUSH
15220: LD_OWVAR 2
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: LD_INT 21
15231: PUSH
15232: LD_INT 1
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: PPUSH
15243: CALL_OW 69
15247: ST_TO_ADDR
// if not tmp then
15248: LD_VAR 0 1
15252: NOT
15253: IFFALSE 15257
// exit ;
15255: GO 15302
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15257: LD_VAR 0 1
15261: PUSH
15262: LD_INT 1
15264: PPUSH
15265: LD_VAR 0 1
15269: PPUSH
15270: CALL_OW 12
15274: ARRAY
15275: PPUSH
15276: LD_INT 1
15278: PPUSH
15279: LD_INT 4
15281: PPUSH
15282: CALL_OW 12
15286: PPUSH
15287: LD_INT 3000
15289: PPUSH
15290: LD_INT 9000
15292: PPUSH
15293: CALL_OW 12
15297: PPUSH
15298: CALL_OW 492
// end ;
15302: PPOPN 1
15304: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15305: LD_EXP 47
15309: PUSH
15310: LD_EXP 62
15314: AND
15315: IFFALSE 15335
15317: GO 15319
15319: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15320: LD_INT 1
15322: PPUSH
15323: LD_OWVAR 2
15327: PPUSH
15328: LD_INT 0
15330: PPUSH
15331: CALL_OW 324
15335: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15336: LD_EXP 47
15340: PUSH
15341: LD_EXP 63
15345: AND
15346: IFFALSE 15429
15348: GO 15350
15350: DISABLE
15351: LD_INT 0
15353: PPUSH
15354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15355: LD_ADDR_VAR 0 2
15359: PUSH
15360: LD_INT 22
15362: PUSH
15363: LD_OWVAR 2
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: LD_INT 21
15374: PUSH
15375: LD_INT 3
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: PPUSH
15386: CALL_OW 69
15390: ST_TO_ADDR
// if not tmp then
15391: LD_VAR 0 2
15395: NOT
15396: IFFALSE 15400
// exit ;
15398: GO 15429
// for i in tmp do
15400: LD_ADDR_VAR 0 1
15404: PUSH
15405: LD_VAR 0 2
15409: PUSH
15410: FOR_IN
15411: IFFALSE 15427
// SetBLevel ( i , 10 ) ;
15413: LD_VAR 0 1
15417: PPUSH
15418: LD_INT 10
15420: PPUSH
15421: CALL_OW 241
15425: GO 15410
15427: POP
15428: POP
// end ;
15429: PPOPN 2
15431: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15432: LD_EXP 47
15436: PUSH
15437: LD_EXP 64
15441: AND
15442: IFFALSE 15553
15444: GO 15446
15446: DISABLE
15447: LD_INT 0
15449: PPUSH
15450: PPUSH
15451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15452: LD_ADDR_VAR 0 3
15456: PUSH
15457: LD_INT 22
15459: PUSH
15460: LD_OWVAR 2
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PUSH
15469: LD_INT 25
15471: PUSH
15472: LD_INT 1
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: PPUSH
15483: CALL_OW 69
15487: ST_TO_ADDR
// if not tmp then
15488: LD_VAR 0 3
15492: NOT
15493: IFFALSE 15497
// exit ;
15495: GO 15553
// un := tmp [ rand ( 1 , tmp ) ] ;
15497: LD_ADDR_VAR 0 2
15501: PUSH
15502: LD_VAR 0 3
15506: PUSH
15507: LD_INT 1
15509: PPUSH
15510: LD_VAR 0 3
15514: PPUSH
15515: CALL_OW 12
15519: ARRAY
15520: ST_TO_ADDR
// if Crawls ( un ) then
15521: LD_VAR 0 2
15525: PPUSH
15526: CALL_OW 318
15530: IFFALSE 15541
// ComWalk ( un ) ;
15532: LD_VAR 0 2
15536: PPUSH
15537: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15541: LD_VAR 0 2
15545: PPUSH
15546: LD_INT 5
15548: PPUSH
15549: CALL_OW 336
// end ;
15553: PPOPN 3
15555: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15556: LD_EXP 47
15560: PUSH
15561: LD_EXP 65
15565: AND
15566: PUSH
15567: LD_OWVAR 67
15571: PUSH
15572: LD_INT 4
15574: LESS
15575: AND
15576: IFFALSE 15595
15578: GO 15580
15580: DISABLE
// begin Difficulty := Difficulty + 1 ;
15581: LD_ADDR_OWVAR 67
15585: PUSH
15586: LD_OWVAR 67
15590: PUSH
15591: LD_INT 1
15593: PLUS
15594: ST_TO_ADDR
// end ;
15595: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15596: LD_EXP 47
15600: PUSH
15601: LD_EXP 66
15605: AND
15606: IFFALSE 15709
15608: GO 15610
15610: DISABLE
15611: LD_INT 0
15613: PPUSH
// begin for i := 1 to 5 do
15614: LD_ADDR_VAR 0 1
15618: PUSH
15619: DOUBLE
15620: LD_INT 1
15622: DEC
15623: ST_TO_ADDR
15624: LD_INT 5
15626: PUSH
15627: FOR_TO
15628: IFFALSE 15707
// begin uc_nation := nation_nature ;
15630: LD_ADDR_OWVAR 21
15634: PUSH
15635: LD_INT 0
15637: ST_TO_ADDR
// uc_side := 0 ;
15638: LD_ADDR_OWVAR 20
15642: PUSH
15643: LD_INT 0
15645: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15646: LD_ADDR_OWVAR 29
15650: PUSH
15651: LD_INT 12
15653: PUSH
15654: LD_INT 12
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: ST_TO_ADDR
// hc_agressivity := 20 ;
15661: LD_ADDR_OWVAR 35
15665: PUSH
15666: LD_INT 20
15668: ST_TO_ADDR
// hc_class := class_tiger ;
15669: LD_ADDR_OWVAR 28
15673: PUSH
15674: LD_INT 14
15676: ST_TO_ADDR
// hc_gallery :=  ;
15677: LD_ADDR_OWVAR 33
15681: PUSH
15682: LD_STRING 
15684: ST_TO_ADDR
// hc_name :=  ;
15685: LD_ADDR_OWVAR 26
15689: PUSH
15690: LD_STRING 
15692: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15693: CALL_OW 44
15697: PPUSH
15698: LD_INT 0
15700: PPUSH
15701: CALL_OW 51
// end ;
15705: GO 15627
15707: POP
15708: POP
// end ;
15709: PPOPN 1
15711: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15712: LD_EXP 47
15716: PUSH
15717: LD_EXP 67
15721: AND
15722: IFFALSE 15731
15724: GO 15726
15726: DISABLE
// StreamSibBomb ;
15727: CALL 15732 0 0
15731: END
// export function StreamSibBomb ; var i , x , y ; begin
15732: LD_INT 0
15734: PPUSH
15735: PPUSH
15736: PPUSH
15737: PPUSH
// result := false ;
15738: LD_ADDR_VAR 0 1
15742: PUSH
15743: LD_INT 0
15745: ST_TO_ADDR
// for i := 1 to 16 do
15746: LD_ADDR_VAR 0 2
15750: PUSH
15751: DOUBLE
15752: LD_INT 1
15754: DEC
15755: ST_TO_ADDR
15756: LD_INT 16
15758: PUSH
15759: FOR_TO
15760: IFFALSE 15959
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15762: LD_ADDR_VAR 0 3
15766: PUSH
15767: LD_INT 10
15769: PUSH
15770: LD_INT 20
15772: PUSH
15773: LD_INT 30
15775: PUSH
15776: LD_INT 40
15778: PUSH
15779: LD_INT 50
15781: PUSH
15782: LD_INT 60
15784: PUSH
15785: LD_INT 70
15787: PUSH
15788: LD_INT 80
15790: PUSH
15791: LD_INT 90
15793: PUSH
15794: LD_INT 100
15796: PUSH
15797: LD_INT 110
15799: PUSH
15800: LD_INT 120
15802: PUSH
15803: LD_INT 130
15805: PUSH
15806: LD_INT 140
15808: PUSH
15809: LD_INT 150
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: PUSH
15829: LD_INT 1
15831: PPUSH
15832: LD_INT 15
15834: PPUSH
15835: CALL_OW 12
15839: ARRAY
15840: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15841: LD_ADDR_VAR 0 4
15845: PUSH
15846: LD_INT 10
15848: PUSH
15849: LD_INT 20
15851: PUSH
15852: LD_INT 30
15854: PUSH
15855: LD_INT 40
15857: PUSH
15858: LD_INT 50
15860: PUSH
15861: LD_INT 60
15863: PUSH
15864: LD_INT 70
15866: PUSH
15867: LD_INT 80
15869: PUSH
15870: LD_INT 90
15872: PUSH
15873: LD_INT 100
15875: PUSH
15876: LD_INT 110
15878: PUSH
15879: LD_INT 120
15881: PUSH
15882: LD_INT 130
15884: PUSH
15885: LD_INT 140
15887: PUSH
15888: LD_INT 150
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: LIST
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 1
15910: PPUSH
15911: LD_INT 15
15913: PPUSH
15914: CALL_OW 12
15918: ARRAY
15919: ST_TO_ADDR
// if ValidHex ( x , y ) then
15920: LD_VAR 0 3
15924: PPUSH
15925: LD_VAR 0 4
15929: PPUSH
15930: CALL_OW 488
15934: IFFALSE 15957
// begin result := [ x , y ] ;
15936: LD_ADDR_VAR 0 1
15940: PUSH
15941: LD_VAR 0 3
15945: PUSH
15946: LD_VAR 0 4
15950: PUSH
15951: EMPTY
15952: LIST
15953: LIST
15954: ST_TO_ADDR
// break ;
15955: GO 15959
// end ; end ;
15957: GO 15759
15959: POP
15960: POP
// if result then
15961: LD_VAR 0 1
15965: IFFALSE 16025
// begin ToLua ( playSibBomb() ) ;
15967: LD_STRING playSibBomb()
15969: PPUSH
15970: CALL_OW 559
// wait ( 0 0$14 ) ;
15974: LD_INT 490
15976: PPUSH
15977: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15981: LD_VAR 0 1
15985: PUSH
15986: LD_INT 1
15988: ARRAY
15989: PPUSH
15990: LD_VAR 0 1
15994: PUSH
15995: LD_INT 2
15997: ARRAY
15998: PPUSH
15999: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16003: LD_VAR 0 1
16007: PUSH
16008: LD_INT 1
16010: ARRAY
16011: PPUSH
16012: LD_VAR 0 1
16016: PUSH
16017: LD_INT 2
16019: ARRAY
16020: PPUSH
16021: CALL_OW 429
// end ; end ;
16025: LD_VAR 0 1
16029: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16030: LD_EXP 47
16034: PUSH
16035: LD_EXP 69
16039: AND
16040: IFFALSE 16052
16042: GO 16044
16044: DISABLE
// YouLost (  ) ;
16045: LD_STRING 
16047: PPUSH
16048: CALL_OW 104
16052: END
// every 0 0$1 trigger StreamModeActive and sFog do
16053: LD_EXP 47
16057: PUSH
16058: LD_EXP 68
16062: AND
16063: IFFALSE 16077
16065: GO 16067
16067: DISABLE
// FogOff ( your_side ) ;
16068: LD_OWVAR 2
16072: PPUSH
16073: CALL_OW 344
16077: END
// every 0 0$1 trigger StreamModeActive and sSun do
16078: LD_EXP 47
16082: PUSH
16083: LD_EXP 70
16087: AND
16088: IFFALSE 16116
16090: GO 16092
16092: DISABLE
// begin solar_recharge_percent := 0 ;
16093: LD_ADDR_OWVAR 79
16097: PUSH
16098: LD_INT 0
16100: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16101: LD_INT 10500
16103: PPUSH
16104: CALL_OW 67
// solar_recharge_percent := 100 ;
16108: LD_ADDR_OWVAR 79
16112: PUSH
16113: LD_INT 100
16115: ST_TO_ADDR
// end ;
16116: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16117: LD_EXP 47
16121: PUSH
16122: LD_EXP 71
16126: AND
16127: IFFALSE 16366
16129: GO 16131
16131: DISABLE
16132: LD_INT 0
16134: PPUSH
16135: PPUSH
16136: PPUSH
// begin tmp := [ ] ;
16137: LD_ADDR_VAR 0 3
16141: PUSH
16142: EMPTY
16143: ST_TO_ADDR
// for i := 1 to 6 do
16144: LD_ADDR_VAR 0 1
16148: PUSH
16149: DOUBLE
16150: LD_INT 1
16152: DEC
16153: ST_TO_ADDR
16154: LD_INT 6
16156: PUSH
16157: FOR_TO
16158: IFFALSE 16263
// begin uc_nation := nation_nature ;
16160: LD_ADDR_OWVAR 21
16164: PUSH
16165: LD_INT 0
16167: ST_TO_ADDR
// uc_side := 0 ;
16168: LD_ADDR_OWVAR 20
16172: PUSH
16173: LD_INT 0
16175: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16176: LD_ADDR_OWVAR 29
16180: PUSH
16181: LD_INT 12
16183: PUSH
16184: LD_INT 12
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: ST_TO_ADDR
// hc_agressivity := 20 ;
16191: LD_ADDR_OWVAR 35
16195: PUSH
16196: LD_INT 20
16198: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16199: LD_ADDR_OWVAR 28
16203: PUSH
16204: LD_INT 17
16206: ST_TO_ADDR
// hc_gallery :=  ;
16207: LD_ADDR_OWVAR 33
16211: PUSH
16212: LD_STRING 
16214: ST_TO_ADDR
// hc_name :=  ;
16215: LD_ADDR_OWVAR 26
16219: PUSH
16220: LD_STRING 
16222: ST_TO_ADDR
// un := CreateHuman ;
16223: LD_ADDR_VAR 0 2
16227: PUSH
16228: CALL_OW 44
16232: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16233: LD_VAR 0 2
16237: PPUSH
16238: LD_INT 1
16240: PPUSH
16241: CALL_OW 51
// tmp := tmp ^ un ;
16245: LD_ADDR_VAR 0 3
16249: PUSH
16250: LD_VAR 0 3
16254: PUSH
16255: LD_VAR 0 2
16259: ADD
16260: ST_TO_ADDR
// end ;
16261: GO 16157
16263: POP
16264: POP
// repeat wait ( 0 0$1 ) ;
16265: LD_INT 35
16267: PPUSH
16268: CALL_OW 67
// for un in tmp do
16272: LD_ADDR_VAR 0 2
16276: PUSH
16277: LD_VAR 0 3
16281: PUSH
16282: FOR_IN
16283: IFFALSE 16357
// begin if IsDead ( un ) then
16285: LD_VAR 0 2
16289: PPUSH
16290: CALL_OW 301
16294: IFFALSE 16314
// begin tmp := tmp diff un ;
16296: LD_ADDR_VAR 0 3
16300: PUSH
16301: LD_VAR 0 3
16305: PUSH
16306: LD_VAR 0 2
16310: DIFF
16311: ST_TO_ADDR
// continue ;
16312: GO 16282
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16314: LD_VAR 0 2
16318: PPUSH
16319: LD_INT 3
16321: PUSH
16322: LD_INT 22
16324: PUSH
16325: LD_INT 0
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: PPUSH
16336: CALL_OW 69
16340: PPUSH
16341: LD_VAR 0 2
16345: PPUSH
16346: CALL_OW 74
16350: PPUSH
16351: CALL_OW 115
// end ;
16355: GO 16282
16357: POP
16358: POP
// until not tmp ;
16359: LD_VAR 0 3
16363: NOT
16364: IFFALSE 16265
// end ;
16366: PPOPN 3
16368: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16369: LD_EXP 47
16373: PUSH
16374: LD_EXP 72
16378: AND
16379: IFFALSE 16433
16381: GO 16383
16383: DISABLE
// begin ToLua ( displayTroll(); ) ;
16384: LD_STRING displayTroll();
16386: PPUSH
16387: CALL_OW 559
// wait ( 3 3$00 ) ;
16391: LD_INT 6300
16393: PPUSH
16394: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16398: LD_STRING hideTroll();
16400: PPUSH
16401: CALL_OW 559
// wait ( 1 1$00 ) ;
16405: LD_INT 2100
16407: PPUSH
16408: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16412: LD_STRING displayTroll();
16414: PPUSH
16415: CALL_OW 559
// wait ( 1 1$00 ) ;
16419: LD_INT 2100
16421: PPUSH
16422: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16426: LD_STRING hideTroll();
16428: PPUSH
16429: CALL_OW 559
// end ;
16433: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16434: LD_EXP 47
16438: PUSH
16439: LD_EXP 73
16443: AND
16444: IFFALSE 16507
16446: GO 16448
16448: DISABLE
16449: LD_INT 0
16451: PPUSH
// begin p := 0 ;
16452: LD_ADDR_VAR 0 1
16456: PUSH
16457: LD_INT 0
16459: ST_TO_ADDR
// repeat game_speed := 1 ;
16460: LD_ADDR_OWVAR 65
16464: PUSH
16465: LD_INT 1
16467: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16468: LD_INT 35
16470: PPUSH
16471: CALL_OW 67
// p := p + 1 ;
16475: LD_ADDR_VAR 0 1
16479: PUSH
16480: LD_VAR 0 1
16484: PUSH
16485: LD_INT 1
16487: PLUS
16488: ST_TO_ADDR
// until p >= 60 ;
16489: LD_VAR 0 1
16493: PUSH
16494: LD_INT 60
16496: GREATEREQUAL
16497: IFFALSE 16460
// game_speed := 4 ;
16499: LD_ADDR_OWVAR 65
16503: PUSH
16504: LD_INT 4
16506: ST_TO_ADDR
// end ;
16507: PPOPN 1
16509: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16510: LD_EXP 47
16514: PUSH
16515: LD_EXP 74
16519: AND
16520: IFFALSE 16666
16522: GO 16524
16524: DISABLE
16525: LD_INT 0
16527: PPUSH
16528: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16529: LD_ADDR_VAR 0 1
16533: PUSH
16534: LD_INT 22
16536: PUSH
16537: LD_OWVAR 2
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PUSH
16546: LD_INT 2
16548: PUSH
16549: LD_INT 30
16551: PUSH
16552: LD_INT 0
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: PUSH
16559: LD_INT 30
16561: PUSH
16562: LD_INT 1
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: LIST
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PPUSH
16578: CALL_OW 69
16582: ST_TO_ADDR
// if not depot then
16583: LD_VAR 0 1
16587: NOT
16588: IFFALSE 16592
// exit ;
16590: GO 16666
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16592: LD_ADDR_VAR 0 2
16596: PUSH
16597: LD_VAR 0 1
16601: PUSH
16602: LD_INT 1
16604: PPUSH
16605: LD_VAR 0 1
16609: PPUSH
16610: CALL_OW 12
16614: ARRAY
16615: PPUSH
16616: CALL_OW 274
16620: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16621: LD_VAR 0 2
16625: PPUSH
16626: LD_INT 1
16628: PPUSH
16629: LD_INT 0
16631: PPUSH
16632: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16636: LD_VAR 0 2
16640: PPUSH
16641: LD_INT 2
16643: PPUSH
16644: LD_INT 0
16646: PPUSH
16647: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16651: LD_VAR 0 2
16655: PPUSH
16656: LD_INT 3
16658: PPUSH
16659: LD_INT 0
16661: PPUSH
16662: CALL_OW 277
// end ;
16666: PPOPN 2
16668: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16669: LD_EXP 47
16673: PUSH
16674: LD_EXP 75
16678: AND
16679: IFFALSE 16776
16681: GO 16683
16683: DISABLE
16684: LD_INT 0
16686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16687: LD_ADDR_VAR 0 1
16691: PUSH
16692: LD_INT 22
16694: PUSH
16695: LD_OWVAR 2
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 21
16706: PUSH
16707: LD_INT 1
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 3
16716: PUSH
16717: LD_INT 23
16719: PUSH
16720: LD_INT 0
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: LIST
16735: PPUSH
16736: CALL_OW 69
16740: ST_TO_ADDR
// if not tmp then
16741: LD_VAR 0 1
16745: NOT
16746: IFFALSE 16750
// exit ;
16748: GO 16776
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16750: LD_VAR 0 1
16754: PUSH
16755: LD_INT 1
16757: PPUSH
16758: LD_VAR 0 1
16762: PPUSH
16763: CALL_OW 12
16767: ARRAY
16768: PPUSH
16769: LD_INT 200
16771: PPUSH
16772: CALL_OW 234
// end ;
16776: PPOPN 1
16778: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16779: LD_EXP 47
16783: PUSH
16784: LD_EXP 76
16788: AND
16789: IFFALSE 16868
16791: GO 16793
16793: DISABLE
16794: LD_INT 0
16796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16797: LD_ADDR_VAR 0 1
16801: PUSH
16802: LD_INT 22
16804: PUSH
16805: LD_OWVAR 2
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 21
16816: PUSH
16817: LD_INT 2
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PPUSH
16828: CALL_OW 69
16832: ST_TO_ADDR
// if not tmp then
16833: LD_VAR 0 1
16837: NOT
16838: IFFALSE 16842
// exit ;
16840: GO 16868
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16842: LD_VAR 0 1
16846: PUSH
16847: LD_INT 1
16849: PPUSH
16850: LD_VAR 0 1
16854: PPUSH
16855: CALL_OW 12
16859: ARRAY
16860: PPUSH
16861: LD_INT 60
16863: PPUSH
16864: CALL_OW 234
// end ;
16868: PPOPN 1
16870: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16871: LD_EXP 47
16875: PUSH
16876: LD_EXP 77
16880: AND
16881: IFFALSE 16980
16883: GO 16885
16885: DISABLE
16886: LD_INT 0
16888: PPUSH
16889: PPUSH
// begin enable ;
16890: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16891: LD_ADDR_VAR 0 1
16895: PUSH
16896: LD_INT 22
16898: PUSH
16899: LD_OWVAR 2
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 61
16910: PUSH
16911: EMPTY
16912: LIST
16913: PUSH
16914: LD_INT 33
16916: PUSH
16917: LD_INT 2
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: LIST
16928: PPUSH
16929: CALL_OW 69
16933: ST_TO_ADDR
// if not tmp then
16934: LD_VAR 0 1
16938: NOT
16939: IFFALSE 16943
// exit ;
16941: GO 16980
// for i in tmp do
16943: LD_ADDR_VAR 0 2
16947: PUSH
16948: LD_VAR 0 1
16952: PUSH
16953: FOR_IN
16954: IFFALSE 16978
// if IsControledBy ( i ) then
16956: LD_VAR 0 2
16960: PPUSH
16961: CALL_OW 312
16965: IFFALSE 16976
// ComUnlink ( i ) ;
16967: LD_VAR 0 2
16971: PPUSH
16972: CALL_OW 136
16976: GO 16953
16978: POP
16979: POP
// end ;
16980: PPOPN 2
16982: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16983: LD_EXP 47
16987: PUSH
16988: LD_EXP 78
16992: AND
16993: IFFALSE 17133
16995: GO 16997
16997: DISABLE
16998: LD_INT 0
17000: PPUSH
17001: PPUSH
// begin ToLua ( displayPowell(); ) ;
17002: LD_STRING displayPowell();
17004: PPUSH
17005: CALL_OW 559
// uc_side := 0 ;
17009: LD_ADDR_OWVAR 20
17013: PUSH
17014: LD_INT 0
17016: ST_TO_ADDR
// uc_nation := 2 ;
17017: LD_ADDR_OWVAR 21
17021: PUSH
17022: LD_INT 2
17024: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17025: LD_ADDR_OWVAR 37
17029: PUSH
17030: LD_INT 14
17032: ST_TO_ADDR
// vc_engine := engine_siberite ;
17033: LD_ADDR_OWVAR 39
17037: PUSH
17038: LD_INT 3
17040: ST_TO_ADDR
// vc_control := control_apeman ;
17041: LD_ADDR_OWVAR 38
17045: PUSH
17046: LD_INT 5
17048: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17049: LD_ADDR_OWVAR 40
17053: PUSH
17054: LD_INT 29
17056: ST_TO_ADDR
// un := CreateVehicle ;
17057: LD_ADDR_VAR 0 2
17061: PUSH
17062: CALL_OW 45
17066: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17067: LD_VAR 0 2
17071: PPUSH
17072: LD_INT 1
17074: PPUSH
17075: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17079: LD_INT 35
17081: PPUSH
17082: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17086: LD_VAR 0 2
17090: PPUSH
17091: LD_INT 22
17093: PUSH
17094: LD_OWVAR 2
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PPUSH
17103: CALL_OW 69
17107: PPUSH
17108: LD_VAR 0 2
17112: PPUSH
17113: CALL_OW 74
17117: PPUSH
17118: CALL_OW 115
// until IsDead ( un ) ;
17122: LD_VAR 0 2
17126: PPUSH
17127: CALL_OW 301
17131: IFFALSE 17079
// end ;
17133: PPOPN 2
17135: END
// every 0 0$1 trigger StreamModeActive and sStu do
17136: LD_EXP 47
17140: PUSH
17141: LD_EXP 86
17145: AND
17146: IFFALSE 17162
17148: GO 17150
17150: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17151: LD_STRING displayStucuk();
17153: PPUSH
17154: CALL_OW 559
// ResetFog ;
17158: CALL_OW 335
// end ;
17162: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17163: LD_EXP 47
17167: PUSH
17168: LD_EXP 79
17172: AND
17173: IFFALSE 17314
17175: GO 17177
17177: DISABLE
17178: LD_INT 0
17180: PPUSH
17181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17182: LD_ADDR_VAR 0 2
17186: PUSH
17187: LD_INT 22
17189: PUSH
17190: LD_OWVAR 2
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 21
17201: PUSH
17202: LD_INT 1
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PPUSH
17213: CALL_OW 69
17217: ST_TO_ADDR
// if not tmp then
17218: LD_VAR 0 2
17222: NOT
17223: IFFALSE 17227
// exit ;
17225: GO 17314
// un := tmp [ rand ( 1 , tmp ) ] ;
17227: LD_ADDR_VAR 0 1
17231: PUSH
17232: LD_VAR 0 2
17236: PUSH
17237: LD_INT 1
17239: PPUSH
17240: LD_VAR 0 2
17244: PPUSH
17245: CALL_OW 12
17249: ARRAY
17250: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17251: LD_VAR 0 1
17255: PPUSH
17256: LD_INT 0
17258: PPUSH
17259: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17263: LD_VAR 0 1
17267: PPUSH
17268: LD_OWVAR 3
17272: PUSH
17273: LD_VAR 0 1
17277: DIFF
17278: PPUSH
17279: LD_VAR 0 1
17283: PPUSH
17284: CALL_OW 74
17288: PPUSH
17289: CALL_OW 115
// wait ( 0 0$20 ) ;
17293: LD_INT 700
17295: PPUSH
17296: CALL_OW 67
// SetSide ( un , your_side ) ;
17300: LD_VAR 0 1
17304: PPUSH
17305: LD_OWVAR 2
17309: PPUSH
17310: CALL_OW 235
// end ;
17314: PPOPN 2
17316: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17317: LD_EXP 47
17321: PUSH
17322: LD_EXP 80
17326: AND
17327: IFFALSE 17433
17329: GO 17331
17331: DISABLE
17332: LD_INT 0
17334: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17335: LD_ADDR_VAR 0 1
17339: PUSH
17340: LD_INT 22
17342: PUSH
17343: LD_OWVAR 2
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 2
17354: PUSH
17355: LD_INT 30
17357: PUSH
17358: LD_INT 0
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: PUSH
17365: LD_INT 30
17367: PUSH
17368: LD_INT 1
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: LIST
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PPUSH
17384: CALL_OW 69
17388: ST_TO_ADDR
// if not depot then
17389: LD_VAR 0 1
17393: NOT
17394: IFFALSE 17398
// exit ;
17396: GO 17433
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17398: LD_VAR 0 1
17402: PUSH
17403: LD_INT 1
17405: ARRAY
17406: PPUSH
17407: CALL_OW 250
17411: PPUSH
17412: LD_VAR 0 1
17416: PUSH
17417: LD_INT 1
17419: ARRAY
17420: PPUSH
17421: CALL_OW 251
17425: PPUSH
17426: LD_INT 70
17428: PPUSH
17429: CALL_OW 495
// end ;
17433: PPOPN 1
17435: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17436: LD_EXP 47
17440: PUSH
17441: LD_EXP 81
17445: AND
17446: IFFALSE 17657
17448: GO 17450
17450: DISABLE
17451: LD_INT 0
17453: PPUSH
17454: PPUSH
17455: PPUSH
17456: PPUSH
17457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17458: LD_ADDR_VAR 0 5
17462: PUSH
17463: LD_INT 22
17465: PUSH
17466: LD_OWVAR 2
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: LD_INT 21
17477: PUSH
17478: LD_INT 1
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PPUSH
17489: CALL_OW 69
17493: ST_TO_ADDR
// if not tmp then
17494: LD_VAR 0 5
17498: NOT
17499: IFFALSE 17503
// exit ;
17501: GO 17657
// for i in tmp do
17503: LD_ADDR_VAR 0 1
17507: PUSH
17508: LD_VAR 0 5
17512: PUSH
17513: FOR_IN
17514: IFFALSE 17655
// begin d := rand ( 0 , 5 ) ;
17516: LD_ADDR_VAR 0 4
17520: PUSH
17521: LD_INT 0
17523: PPUSH
17524: LD_INT 5
17526: PPUSH
17527: CALL_OW 12
17531: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17532: LD_ADDR_VAR 0 2
17536: PUSH
17537: LD_VAR 0 1
17541: PPUSH
17542: CALL_OW 250
17546: PPUSH
17547: LD_VAR 0 4
17551: PPUSH
17552: LD_INT 3
17554: PPUSH
17555: LD_INT 12
17557: PPUSH
17558: CALL_OW 12
17562: PPUSH
17563: CALL_OW 272
17567: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17568: LD_ADDR_VAR 0 3
17572: PUSH
17573: LD_VAR 0 1
17577: PPUSH
17578: CALL_OW 251
17582: PPUSH
17583: LD_VAR 0 4
17587: PPUSH
17588: LD_INT 3
17590: PPUSH
17591: LD_INT 12
17593: PPUSH
17594: CALL_OW 12
17598: PPUSH
17599: CALL_OW 273
17603: ST_TO_ADDR
// if ValidHex ( x , y ) then
17604: LD_VAR 0 2
17608: PPUSH
17609: LD_VAR 0 3
17613: PPUSH
17614: CALL_OW 488
17618: IFFALSE 17653
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17620: LD_VAR 0 1
17624: PPUSH
17625: LD_VAR 0 2
17629: PPUSH
17630: LD_VAR 0 3
17634: PPUSH
17635: LD_INT 3
17637: PPUSH
17638: LD_INT 6
17640: PPUSH
17641: CALL_OW 12
17645: PPUSH
17646: LD_INT 1
17648: PPUSH
17649: CALL_OW 483
// end ;
17653: GO 17513
17655: POP
17656: POP
// end ;
17657: PPOPN 5
17659: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17660: LD_EXP 47
17664: PUSH
17665: LD_EXP 82
17669: AND
17670: IFFALSE 17764
17672: GO 17674
17674: DISABLE
17675: LD_INT 0
17677: PPUSH
17678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17679: LD_ADDR_VAR 0 2
17683: PUSH
17684: LD_INT 22
17686: PUSH
17687: LD_OWVAR 2
17691: PUSH
17692: EMPTY
17693: LIST
17694: LIST
17695: PUSH
17696: LD_INT 32
17698: PUSH
17699: LD_INT 1
17701: PUSH
17702: EMPTY
17703: LIST
17704: LIST
17705: PUSH
17706: LD_INT 21
17708: PUSH
17709: LD_INT 2
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: LIST
17720: PPUSH
17721: CALL_OW 69
17725: ST_TO_ADDR
// if not tmp then
17726: LD_VAR 0 2
17730: NOT
17731: IFFALSE 17735
// exit ;
17733: GO 17764
// for i in tmp do
17735: LD_ADDR_VAR 0 1
17739: PUSH
17740: LD_VAR 0 2
17744: PUSH
17745: FOR_IN
17746: IFFALSE 17762
// SetFuel ( i , 0 ) ;
17748: LD_VAR 0 1
17752: PPUSH
17753: LD_INT 0
17755: PPUSH
17756: CALL_OW 240
17760: GO 17745
17762: POP
17763: POP
// end ;
17764: PPOPN 2
17766: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17767: LD_EXP 47
17771: PUSH
17772: LD_EXP 83
17776: AND
17777: IFFALSE 17843
17779: GO 17781
17781: DISABLE
17782: LD_INT 0
17784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17785: LD_ADDR_VAR 0 1
17789: PUSH
17790: LD_INT 22
17792: PUSH
17793: LD_OWVAR 2
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: LD_INT 30
17804: PUSH
17805: LD_INT 29
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: PPUSH
17816: CALL_OW 69
17820: ST_TO_ADDR
// if not tmp then
17821: LD_VAR 0 1
17825: NOT
17826: IFFALSE 17830
// exit ;
17828: GO 17843
// DestroyUnit ( tmp [ 1 ] ) ;
17830: LD_VAR 0 1
17834: PUSH
17835: LD_INT 1
17837: ARRAY
17838: PPUSH
17839: CALL_OW 65
// end ;
17843: PPOPN 1
17845: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17846: LD_EXP 47
17850: PUSH
17851: LD_EXP 85
17855: AND
17856: IFFALSE 17985
17858: GO 17860
17860: DISABLE
17861: LD_INT 0
17863: PPUSH
// begin uc_side := 0 ;
17864: LD_ADDR_OWVAR 20
17868: PUSH
17869: LD_INT 0
17871: ST_TO_ADDR
// uc_nation := nation_arabian ;
17872: LD_ADDR_OWVAR 21
17876: PUSH
17877: LD_INT 2
17879: ST_TO_ADDR
// hc_gallery :=  ;
17880: LD_ADDR_OWVAR 33
17884: PUSH
17885: LD_STRING 
17887: ST_TO_ADDR
// hc_name :=  ;
17888: LD_ADDR_OWVAR 26
17892: PUSH
17893: LD_STRING 
17895: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17896: LD_INT 1
17898: PPUSH
17899: LD_INT 11
17901: PPUSH
17902: LD_INT 10
17904: PPUSH
17905: CALL_OW 380
// un := CreateHuman ;
17909: LD_ADDR_VAR 0 1
17913: PUSH
17914: CALL_OW 44
17918: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17919: LD_VAR 0 1
17923: PPUSH
17924: LD_INT 1
17926: PPUSH
17927: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17931: LD_INT 35
17933: PPUSH
17934: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17938: LD_VAR 0 1
17942: PPUSH
17943: LD_INT 22
17945: PUSH
17946: LD_OWVAR 2
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PPUSH
17955: CALL_OW 69
17959: PPUSH
17960: LD_VAR 0 1
17964: PPUSH
17965: CALL_OW 74
17969: PPUSH
17970: CALL_OW 115
// until IsDead ( un ) ;
17974: LD_VAR 0 1
17978: PPUSH
17979: CALL_OW 301
17983: IFFALSE 17931
// end ;
17985: PPOPN 1
17987: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17988: LD_EXP 47
17992: PUSH
17993: LD_EXP 87
17997: AND
17998: IFFALSE 18010
18000: GO 18002
18002: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18003: LD_STRING earthquake(getX(game), 0, 32)
18005: PPUSH
18006: CALL_OW 559
18010: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18011: LD_EXP 47
18015: PUSH
18016: LD_EXP 88
18020: AND
18021: IFFALSE 18112
18023: GO 18025
18025: DISABLE
18026: LD_INT 0
18028: PPUSH
// begin enable ;
18029: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18030: LD_ADDR_VAR 0 1
18034: PUSH
18035: LD_INT 22
18037: PUSH
18038: LD_OWVAR 2
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 21
18049: PUSH
18050: LD_INT 2
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: LD_INT 33
18059: PUSH
18060: LD_INT 3
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: LIST
18071: PPUSH
18072: CALL_OW 69
18076: ST_TO_ADDR
// if not tmp then
18077: LD_VAR 0 1
18081: NOT
18082: IFFALSE 18086
// exit ;
18084: GO 18112
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18086: LD_VAR 0 1
18090: PUSH
18091: LD_INT 1
18093: PPUSH
18094: LD_VAR 0 1
18098: PPUSH
18099: CALL_OW 12
18103: ARRAY
18104: PPUSH
18105: LD_INT 1
18107: PPUSH
18108: CALL_OW 234
// end ;
18112: PPOPN 1
18114: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18115: LD_EXP 47
18119: PUSH
18120: LD_EXP 89
18124: AND
18125: IFFALSE 18266
18127: GO 18129
18129: DISABLE
18130: LD_INT 0
18132: PPUSH
18133: PPUSH
18134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18135: LD_ADDR_VAR 0 3
18139: PUSH
18140: LD_INT 22
18142: PUSH
18143: LD_OWVAR 2
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 25
18154: PUSH
18155: LD_INT 1
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PPUSH
18166: CALL_OW 69
18170: ST_TO_ADDR
// if not tmp then
18171: LD_VAR 0 3
18175: NOT
18176: IFFALSE 18180
// exit ;
18178: GO 18266
// un := tmp [ rand ( 1 , tmp ) ] ;
18180: LD_ADDR_VAR 0 2
18184: PUSH
18185: LD_VAR 0 3
18189: PUSH
18190: LD_INT 1
18192: PPUSH
18193: LD_VAR 0 3
18197: PPUSH
18198: CALL_OW 12
18202: ARRAY
18203: ST_TO_ADDR
// if Crawls ( un ) then
18204: LD_VAR 0 2
18208: PPUSH
18209: CALL_OW 318
18213: IFFALSE 18224
// ComWalk ( un ) ;
18215: LD_VAR 0 2
18219: PPUSH
18220: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18224: LD_VAR 0 2
18228: PPUSH
18229: LD_INT 9
18231: PPUSH
18232: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18236: LD_INT 28
18238: PPUSH
18239: LD_OWVAR 2
18243: PPUSH
18244: LD_INT 2
18246: PPUSH
18247: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18251: LD_INT 29
18253: PPUSH
18254: LD_OWVAR 2
18258: PPUSH
18259: LD_INT 2
18261: PPUSH
18262: CALL_OW 322
// end ;
18266: PPOPN 3
18268: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18269: LD_EXP 47
18273: PUSH
18274: LD_EXP 90
18278: AND
18279: IFFALSE 18390
18281: GO 18283
18283: DISABLE
18284: LD_INT 0
18286: PPUSH
18287: PPUSH
18288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18289: LD_ADDR_VAR 0 3
18293: PUSH
18294: LD_INT 22
18296: PUSH
18297: LD_OWVAR 2
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 25
18308: PUSH
18309: LD_INT 1
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PPUSH
18320: CALL_OW 69
18324: ST_TO_ADDR
// if not tmp then
18325: LD_VAR 0 3
18329: NOT
18330: IFFALSE 18334
// exit ;
18332: GO 18390
// un := tmp [ rand ( 1 , tmp ) ] ;
18334: LD_ADDR_VAR 0 2
18338: PUSH
18339: LD_VAR 0 3
18343: PUSH
18344: LD_INT 1
18346: PPUSH
18347: LD_VAR 0 3
18351: PPUSH
18352: CALL_OW 12
18356: ARRAY
18357: ST_TO_ADDR
// if Crawls ( un ) then
18358: LD_VAR 0 2
18362: PPUSH
18363: CALL_OW 318
18367: IFFALSE 18378
// ComWalk ( un ) ;
18369: LD_VAR 0 2
18373: PPUSH
18374: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18378: LD_VAR 0 2
18382: PPUSH
18383: LD_INT 8
18385: PPUSH
18386: CALL_OW 336
// end ;
18390: PPOPN 3
18392: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18393: LD_EXP 47
18397: PUSH
18398: LD_EXP 91
18402: AND
18403: IFFALSE 18547
18405: GO 18407
18407: DISABLE
18408: LD_INT 0
18410: PPUSH
18411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18412: LD_ADDR_VAR 0 2
18416: PUSH
18417: LD_INT 22
18419: PUSH
18420: LD_OWVAR 2
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 21
18431: PUSH
18432: LD_INT 2
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 2
18441: PUSH
18442: LD_INT 34
18444: PUSH
18445: LD_INT 12
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: LD_INT 34
18454: PUSH
18455: LD_INT 51
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 34
18464: PUSH
18465: LD_INT 32
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: EMPTY
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: PUSH
18478: EMPTY
18479: LIST
18480: LIST
18481: LIST
18482: PPUSH
18483: CALL_OW 69
18487: ST_TO_ADDR
// if not tmp then
18488: LD_VAR 0 2
18492: NOT
18493: IFFALSE 18497
// exit ;
18495: GO 18547
// for i in tmp do
18497: LD_ADDR_VAR 0 1
18501: PUSH
18502: LD_VAR 0 2
18506: PUSH
18507: FOR_IN
18508: IFFALSE 18545
// if GetCargo ( i , mat_artifact ) = 0 then
18510: LD_VAR 0 1
18514: PPUSH
18515: LD_INT 4
18517: PPUSH
18518: CALL_OW 289
18522: PUSH
18523: LD_INT 0
18525: EQUAL
18526: IFFALSE 18543
// SetCargo ( i , mat_siberit , 100 ) ;
18528: LD_VAR 0 1
18532: PPUSH
18533: LD_INT 3
18535: PPUSH
18536: LD_INT 100
18538: PPUSH
18539: CALL_OW 290
18543: GO 18507
18545: POP
18546: POP
// end ;
18547: PPOPN 2
18549: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18550: LD_EXP 47
18554: PUSH
18555: LD_EXP 92
18559: AND
18560: IFFALSE 18743
18562: GO 18564
18564: DISABLE
18565: LD_INT 0
18567: PPUSH
18568: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18569: LD_ADDR_VAR 0 2
18573: PUSH
18574: LD_INT 22
18576: PUSH
18577: LD_OWVAR 2
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PPUSH
18586: CALL_OW 69
18590: ST_TO_ADDR
// if not tmp then
18591: LD_VAR 0 2
18595: NOT
18596: IFFALSE 18600
// exit ;
18598: GO 18743
// for i := 1 to 2 do
18600: LD_ADDR_VAR 0 1
18604: PUSH
18605: DOUBLE
18606: LD_INT 1
18608: DEC
18609: ST_TO_ADDR
18610: LD_INT 2
18612: PUSH
18613: FOR_TO
18614: IFFALSE 18741
// begin uc_side := your_side ;
18616: LD_ADDR_OWVAR 20
18620: PUSH
18621: LD_OWVAR 2
18625: ST_TO_ADDR
// uc_nation := nation_american ;
18626: LD_ADDR_OWVAR 21
18630: PUSH
18631: LD_INT 1
18633: ST_TO_ADDR
// vc_chassis := us_morphling ;
18634: LD_ADDR_OWVAR 37
18638: PUSH
18639: LD_INT 5
18641: ST_TO_ADDR
// vc_engine := engine_siberite ;
18642: LD_ADDR_OWVAR 39
18646: PUSH
18647: LD_INT 3
18649: ST_TO_ADDR
// vc_control := control_computer ;
18650: LD_ADDR_OWVAR 38
18654: PUSH
18655: LD_INT 3
18657: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18658: LD_ADDR_OWVAR 40
18662: PUSH
18663: LD_INT 10
18665: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18666: LD_VAR 0 2
18670: PUSH
18671: LD_INT 1
18673: ARRAY
18674: PPUSH
18675: CALL_OW 310
18679: NOT
18680: IFFALSE 18727
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18682: CALL_OW 45
18686: PPUSH
18687: LD_VAR 0 2
18691: PUSH
18692: LD_INT 1
18694: ARRAY
18695: PPUSH
18696: CALL_OW 250
18700: PPUSH
18701: LD_VAR 0 2
18705: PUSH
18706: LD_INT 1
18708: ARRAY
18709: PPUSH
18710: CALL_OW 251
18714: PPUSH
18715: LD_INT 12
18717: PPUSH
18718: LD_INT 1
18720: PPUSH
18721: CALL_OW 50
18725: GO 18739
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18727: CALL_OW 45
18731: PPUSH
18732: LD_INT 1
18734: PPUSH
18735: CALL_OW 51
// end ;
18739: GO 18613
18741: POP
18742: POP
// end ;
18743: PPOPN 2
18745: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18746: LD_EXP 47
18750: PUSH
18751: LD_EXP 93
18755: AND
18756: IFFALSE 18978
18758: GO 18760
18760: DISABLE
18761: LD_INT 0
18763: PPUSH
18764: PPUSH
18765: PPUSH
18766: PPUSH
18767: PPUSH
18768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18769: LD_ADDR_VAR 0 6
18773: PUSH
18774: LD_INT 22
18776: PUSH
18777: LD_OWVAR 2
18781: PUSH
18782: EMPTY
18783: LIST
18784: LIST
18785: PUSH
18786: LD_INT 21
18788: PUSH
18789: LD_INT 1
18791: PUSH
18792: EMPTY
18793: LIST
18794: LIST
18795: PUSH
18796: LD_INT 3
18798: PUSH
18799: LD_INT 23
18801: PUSH
18802: LD_INT 0
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: LIST
18817: PPUSH
18818: CALL_OW 69
18822: ST_TO_ADDR
// if not tmp then
18823: LD_VAR 0 6
18827: NOT
18828: IFFALSE 18832
// exit ;
18830: GO 18978
// s1 := rand ( 1 , 4 ) ;
18832: LD_ADDR_VAR 0 2
18836: PUSH
18837: LD_INT 1
18839: PPUSH
18840: LD_INT 4
18842: PPUSH
18843: CALL_OW 12
18847: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18848: LD_ADDR_VAR 0 4
18852: PUSH
18853: LD_VAR 0 6
18857: PUSH
18858: LD_INT 1
18860: ARRAY
18861: PPUSH
18862: LD_VAR 0 2
18866: PPUSH
18867: CALL_OW 259
18871: ST_TO_ADDR
// if s1 = 1 then
18872: LD_VAR 0 2
18876: PUSH
18877: LD_INT 1
18879: EQUAL
18880: IFFALSE 18900
// s2 := rand ( 2 , 4 ) else
18882: LD_ADDR_VAR 0 3
18886: PUSH
18887: LD_INT 2
18889: PPUSH
18890: LD_INT 4
18892: PPUSH
18893: CALL_OW 12
18897: ST_TO_ADDR
18898: GO 18908
// s2 := 1 ;
18900: LD_ADDR_VAR 0 3
18904: PUSH
18905: LD_INT 1
18907: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18908: LD_ADDR_VAR 0 5
18912: PUSH
18913: LD_VAR 0 6
18917: PUSH
18918: LD_INT 1
18920: ARRAY
18921: PPUSH
18922: LD_VAR 0 3
18926: PPUSH
18927: CALL_OW 259
18931: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18932: LD_VAR 0 6
18936: PUSH
18937: LD_INT 1
18939: ARRAY
18940: PPUSH
18941: LD_VAR 0 2
18945: PPUSH
18946: LD_VAR 0 5
18950: PPUSH
18951: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18955: LD_VAR 0 6
18959: PUSH
18960: LD_INT 1
18962: ARRAY
18963: PPUSH
18964: LD_VAR 0 3
18968: PPUSH
18969: LD_VAR 0 4
18973: PPUSH
18974: CALL_OW 237
// end ;
18978: PPOPN 6
18980: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18981: LD_EXP 47
18985: PUSH
18986: LD_EXP 94
18990: AND
18991: IFFALSE 19070
18993: GO 18995
18995: DISABLE
18996: LD_INT 0
18998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18999: LD_ADDR_VAR 0 1
19003: PUSH
19004: LD_INT 22
19006: PUSH
19007: LD_OWVAR 2
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 30
19018: PUSH
19019: LD_INT 3
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PPUSH
19030: CALL_OW 69
19034: ST_TO_ADDR
// if not tmp then
19035: LD_VAR 0 1
19039: NOT
19040: IFFALSE 19044
// exit ;
19042: GO 19070
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19044: LD_VAR 0 1
19048: PUSH
19049: LD_INT 1
19051: PPUSH
19052: LD_VAR 0 1
19056: PPUSH
19057: CALL_OW 12
19061: ARRAY
19062: PPUSH
19063: LD_INT 1
19065: PPUSH
19066: CALL_OW 234
// end ;
19070: PPOPN 1
19072: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19073: LD_EXP 47
19077: PUSH
19078: LD_EXP 95
19082: AND
19083: IFFALSE 19195
19085: GO 19087
19087: DISABLE
19088: LD_INT 0
19090: PPUSH
19091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19092: LD_ADDR_VAR 0 2
19096: PUSH
19097: LD_INT 22
19099: PUSH
19100: LD_OWVAR 2
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: LD_INT 2
19111: PUSH
19112: LD_INT 30
19114: PUSH
19115: LD_INT 27
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 30
19124: PUSH
19125: LD_INT 26
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: LD_INT 30
19134: PUSH
19135: LD_INT 28
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PPUSH
19152: CALL_OW 69
19156: ST_TO_ADDR
// if not tmp then
19157: LD_VAR 0 2
19161: NOT
19162: IFFALSE 19166
// exit ;
19164: GO 19195
// for i in tmp do
19166: LD_ADDR_VAR 0 1
19170: PUSH
19171: LD_VAR 0 2
19175: PUSH
19176: FOR_IN
19177: IFFALSE 19193
// SetLives ( i , 1 ) ;
19179: LD_VAR 0 1
19183: PPUSH
19184: LD_INT 1
19186: PPUSH
19187: CALL_OW 234
19191: GO 19176
19193: POP
19194: POP
// end ;
19195: PPOPN 2
19197: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19198: LD_EXP 47
19202: PUSH
19203: LD_EXP 96
19207: AND
19208: IFFALSE 19495
19210: GO 19212
19212: DISABLE
19213: LD_INT 0
19215: PPUSH
19216: PPUSH
19217: PPUSH
// begin i := rand ( 1 , 7 ) ;
19218: LD_ADDR_VAR 0 1
19222: PUSH
19223: LD_INT 1
19225: PPUSH
19226: LD_INT 7
19228: PPUSH
19229: CALL_OW 12
19233: ST_TO_ADDR
// case i of 1 :
19234: LD_VAR 0 1
19238: PUSH
19239: LD_INT 1
19241: DOUBLE
19242: EQUAL
19243: IFTRUE 19247
19245: GO 19257
19247: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19248: LD_STRING earthquake(getX(game), 0, 32)
19250: PPUSH
19251: CALL_OW 559
19255: GO 19495
19257: LD_INT 2
19259: DOUBLE
19260: EQUAL
19261: IFTRUE 19265
19263: GO 19279
19265: POP
// begin ToLua ( displayStucuk(); ) ;
19266: LD_STRING displayStucuk();
19268: PPUSH
19269: CALL_OW 559
// ResetFog ;
19273: CALL_OW 335
// end ; 3 :
19277: GO 19495
19279: LD_INT 3
19281: DOUBLE
19282: EQUAL
19283: IFTRUE 19287
19285: GO 19391
19287: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19288: LD_ADDR_VAR 0 2
19292: PUSH
19293: LD_INT 22
19295: PUSH
19296: LD_OWVAR 2
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: PUSH
19305: LD_INT 25
19307: PUSH
19308: LD_INT 1
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: EMPTY
19316: LIST
19317: LIST
19318: PPUSH
19319: CALL_OW 69
19323: ST_TO_ADDR
// if not tmp then
19324: LD_VAR 0 2
19328: NOT
19329: IFFALSE 19333
// exit ;
19331: GO 19495
// un := tmp [ rand ( 1 , tmp ) ] ;
19333: LD_ADDR_VAR 0 3
19337: PUSH
19338: LD_VAR 0 2
19342: PUSH
19343: LD_INT 1
19345: PPUSH
19346: LD_VAR 0 2
19350: PPUSH
19351: CALL_OW 12
19355: ARRAY
19356: ST_TO_ADDR
// if Crawls ( un ) then
19357: LD_VAR 0 3
19361: PPUSH
19362: CALL_OW 318
19366: IFFALSE 19377
// ComWalk ( un ) ;
19368: LD_VAR 0 3
19372: PPUSH
19373: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19377: LD_VAR 0 3
19381: PPUSH
19382: LD_INT 8
19384: PPUSH
19385: CALL_OW 336
// end ; 4 :
19389: GO 19495
19391: LD_INT 4
19393: DOUBLE
19394: EQUAL
19395: IFTRUE 19399
19397: GO 19473
19399: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19400: LD_ADDR_VAR 0 2
19404: PUSH
19405: LD_INT 22
19407: PUSH
19408: LD_OWVAR 2
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 30
19419: PUSH
19420: LD_INT 29
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PPUSH
19431: CALL_OW 69
19435: ST_TO_ADDR
// if not tmp then
19436: LD_VAR 0 2
19440: NOT
19441: IFFALSE 19445
// exit ;
19443: GO 19495
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19445: LD_VAR 0 2
19449: PUSH
19450: LD_INT 1
19452: ARRAY
19453: PPUSH
19454: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19458: LD_VAR 0 2
19462: PUSH
19463: LD_INT 1
19465: ARRAY
19466: PPUSH
19467: CALL_OW 65
// end ; 5 .. 7 :
19471: GO 19495
19473: LD_INT 5
19475: DOUBLE
19476: GREATEREQUAL
19477: IFFALSE 19485
19479: LD_INT 7
19481: DOUBLE
19482: LESSEQUAL
19483: IFTRUE 19487
19485: GO 19494
19487: POP
// StreamSibBomb ; end ;
19488: CALL 15732 0 0
19492: GO 19495
19494: POP
// end ;
19495: PPOPN 3
19497: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19498: LD_EXP 47
19502: PUSH
19503: LD_EXP 97
19507: AND
19508: IFFALSE 19664
19510: GO 19512
19512: DISABLE
19513: LD_INT 0
19515: PPUSH
19516: PPUSH
19517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19518: LD_ADDR_VAR 0 2
19522: PUSH
19523: LD_INT 81
19525: PUSH
19526: LD_OWVAR 2
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 2
19537: PUSH
19538: LD_INT 21
19540: PUSH
19541: LD_INT 1
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 21
19550: PUSH
19551: LD_INT 2
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: LIST
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: PPUSH
19567: CALL_OW 69
19571: ST_TO_ADDR
// if not tmp then
19572: LD_VAR 0 2
19576: NOT
19577: IFFALSE 19581
// exit ;
19579: GO 19664
// p := 0 ;
19581: LD_ADDR_VAR 0 3
19585: PUSH
19586: LD_INT 0
19588: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19589: LD_INT 35
19591: PPUSH
19592: CALL_OW 67
// p := p + 1 ;
19596: LD_ADDR_VAR 0 3
19600: PUSH
19601: LD_VAR 0 3
19605: PUSH
19606: LD_INT 1
19608: PLUS
19609: ST_TO_ADDR
// for i in tmp do
19610: LD_ADDR_VAR 0 1
19614: PUSH
19615: LD_VAR 0 2
19619: PUSH
19620: FOR_IN
19621: IFFALSE 19652
// if GetLives ( i ) < 1000 then
19623: LD_VAR 0 1
19627: PPUSH
19628: CALL_OW 256
19632: PUSH
19633: LD_INT 1000
19635: LESS
19636: IFFALSE 19650
// SetLives ( i , 1000 ) ;
19638: LD_VAR 0 1
19642: PPUSH
19643: LD_INT 1000
19645: PPUSH
19646: CALL_OW 234
19650: GO 19620
19652: POP
19653: POP
// until p > 20 ;
19654: LD_VAR 0 3
19658: PUSH
19659: LD_INT 20
19661: GREATER
19662: IFFALSE 19589
// end ;
19664: PPOPN 3
19666: END
// every 0 0$1 trigger StreamModeActive and sTime do
19667: LD_EXP 47
19671: PUSH
19672: LD_EXP 98
19676: AND
19677: IFFALSE 19712
19679: GO 19681
19681: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19682: LD_INT 28
19684: PPUSH
19685: LD_OWVAR 2
19689: PPUSH
19690: LD_INT 2
19692: PPUSH
19693: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19697: LD_INT 30
19699: PPUSH
19700: LD_OWVAR 2
19704: PPUSH
19705: LD_INT 2
19707: PPUSH
19708: CALL_OW 322
// end ;
19712: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19713: LD_EXP 47
19717: PUSH
19718: LD_EXP 99
19722: AND
19723: IFFALSE 19844
19725: GO 19727
19727: DISABLE
19728: LD_INT 0
19730: PPUSH
19731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19732: LD_ADDR_VAR 0 2
19736: PUSH
19737: LD_INT 22
19739: PUSH
19740: LD_OWVAR 2
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 21
19751: PUSH
19752: LD_INT 1
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 3
19761: PUSH
19762: LD_INT 23
19764: PUSH
19765: LD_INT 0
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: LIST
19780: PPUSH
19781: CALL_OW 69
19785: ST_TO_ADDR
// if not tmp then
19786: LD_VAR 0 2
19790: NOT
19791: IFFALSE 19795
// exit ;
19793: GO 19844
// for i in tmp do
19795: LD_ADDR_VAR 0 1
19799: PUSH
19800: LD_VAR 0 2
19804: PUSH
19805: FOR_IN
19806: IFFALSE 19842
// begin if Crawls ( i ) then
19808: LD_VAR 0 1
19812: PPUSH
19813: CALL_OW 318
19817: IFFALSE 19828
// ComWalk ( i ) ;
19819: LD_VAR 0 1
19823: PPUSH
19824: CALL_OW 138
// SetClass ( i , 2 ) ;
19828: LD_VAR 0 1
19832: PPUSH
19833: LD_INT 2
19835: PPUSH
19836: CALL_OW 336
// end ;
19840: GO 19805
19842: POP
19843: POP
// end ;
19844: PPOPN 2
19846: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19847: LD_EXP 47
19851: PUSH
19852: LD_EXP 100
19856: AND
19857: IFFALSE 20145
19859: GO 19861
19861: DISABLE
19862: LD_INT 0
19864: PPUSH
19865: PPUSH
19866: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19867: LD_OWVAR 2
19871: PPUSH
19872: LD_INT 9
19874: PPUSH
19875: LD_INT 1
19877: PPUSH
19878: LD_INT 1
19880: PPUSH
19881: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19885: LD_INT 9
19887: PPUSH
19888: LD_OWVAR 2
19892: PPUSH
19893: CALL_OW 343
// uc_side := 9 ;
19897: LD_ADDR_OWVAR 20
19901: PUSH
19902: LD_INT 9
19904: ST_TO_ADDR
// uc_nation := 2 ;
19905: LD_ADDR_OWVAR 21
19909: PUSH
19910: LD_INT 2
19912: ST_TO_ADDR
// hc_name := Dark Warrior ;
19913: LD_ADDR_OWVAR 26
19917: PUSH
19918: LD_STRING Dark Warrior
19920: ST_TO_ADDR
// hc_gallery :=  ;
19921: LD_ADDR_OWVAR 33
19925: PUSH
19926: LD_STRING 
19928: ST_TO_ADDR
// hc_noskilllimit := true ;
19929: LD_ADDR_OWVAR 76
19933: PUSH
19934: LD_INT 1
19936: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19937: LD_ADDR_OWVAR 31
19941: PUSH
19942: LD_INT 30
19944: PUSH
19945: LD_INT 30
19947: PUSH
19948: LD_INT 30
19950: PUSH
19951: LD_INT 30
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: ST_TO_ADDR
// un := CreateHuman ;
19960: LD_ADDR_VAR 0 3
19964: PUSH
19965: CALL_OW 44
19969: ST_TO_ADDR
// hc_noskilllimit := false ;
19970: LD_ADDR_OWVAR 76
19974: PUSH
19975: LD_INT 0
19977: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19978: LD_VAR 0 3
19982: PPUSH
19983: LD_INT 1
19985: PPUSH
19986: CALL_OW 51
// ToLua ( playRanger() ) ;
19990: LD_STRING playRanger()
19992: PPUSH
19993: CALL_OW 559
// p := 0 ;
19997: LD_ADDR_VAR 0 2
20001: PUSH
20002: LD_INT 0
20004: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20005: LD_INT 35
20007: PPUSH
20008: CALL_OW 67
// p := p + 1 ;
20012: LD_ADDR_VAR 0 2
20016: PUSH
20017: LD_VAR 0 2
20021: PUSH
20022: LD_INT 1
20024: PLUS
20025: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20026: LD_VAR 0 3
20030: PPUSH
20031: CALL_OW 256
20035: PUSH
20036: LD_INT 1000
20038: LESS
20039: IFFALSE 20053
// SetLives ( un , 1000 ) ;
20041: LD_VAR 0 3
20045: PPUSH
20046: LD_INT 1000
20048: PPUSH
20049: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20053: LD_VAR 0 3
20057: PPUSH
20058: LD_INT 81
20060: PUSH
20061: LD_OWVAR 2
20065: PUSH
20066: EMPTY
20067: LIST
20068: LIST
20069: PUSH
20070: LD_INT 91
20072: PUSH
20073: LD_VAR 0 3
20077: PUSH
20078: LD_INT 30
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: LIST
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PPUSH
20090: CALL_OW 69
20094: PPUSH
20095: LD_VAR 0 3
20099: PPUSH
20100: CALL_OW 74
20104: PPUSH
20105: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20109: LD_VAR 0 2
20113: PUSH
20114: LD_INT 80
20116: GREATER
20117: PUSH
20118: LD_VAR 0 3
20122: PPUSH
20123: CALL_OW 301
20127: OR
20128: IFFALSE 20005
// if un then
20130: LD_VAR 0 3
20134: IFFALSE 20145
// RemoveUnit ( un ) ;
20136: LD_VAR 0 3
20140: PPUSH
20141: CALL_OW 64
// end ;
20145: PPOPN 3
20147: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20148: LD_EXP 101
20152: IFFALSE 20268
20154: GO 20156
20156: DISABLE
20157: LD_INT 0
20159: PPUSH
20160: PPUSH
20161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20162: LD_ADDR_VAR 0 2
20166: PUSH
20167: LD_INT 81
20169: PUSH
20170: LD_OWVAR 2
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 21
20181: PUSH
20182: LD_INT 1
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PPUSH
20193: CALL_OW 69
20197: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20198: LD_STRING playComputer()
20200: PPUSH
20201: CALL_OW 559
// if not tmp then
20205: LD_VAR 0 2
20209: NOT
20210: IFFALSE 20214
// exit ;
20212: GO 20268
// for i in tmp do
20214: LD_ADDR_VAR 0 1
20218: PUSH
20219: LD_VAR 0 2
20223: PUSH
20224: FOR_IN
20225: IFFALSE 20266
// for j := 1 to 4 do
20227: LD_ADDR_VAR 0 3
20231: PUSH
20232: DOUBLE
20233: LD_INT 1
20235: DEC
20236: ST_TO_ADDR
20237: LD_INT 4
20239: PUSH
20240: FOR_TO
20241: IFFALSE 20262
// SetSkill ( i , j , 10 ) ;
20243: LD_VAR 0 1
20247: PPUSH
20248: LD_VAR 0 3
20252: PPUSH
20253: LD_INT 10
20255: PPUSH
20256: CALL_OW 237
20260: GO 20240
20262: POP
20263: POP
20264: GO 20224
20266: POP
20267: POP
// end ;
20268: PPOPN 3
20270: END
// every 0 0$1 trigger s30 do var i , tmp ;
20271: LD_EXP 102
20275: IFFALSE 20344
20277: GO 20279
20279: DISABLE
20280: LD_INT 0
20282: PPUSH
20283: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20284: LD_ADDR_VAR 0 2
20288: PUSH
20289: LD_INT 22
20291: PUSH
20292: LD_OWVAR 2
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PPUSH
20301: CALL_OW 69
20305: ST_TO_ADDR
// if not tmp then
20306: LD_VAR 0 2
20310: NOT
20311: IFFALSE 20315
// exit ;
20313: GO 20344
// for i in tmp do
20315: LD_ADDR_VAR 0 1
20319: PUSH
20320: LD_VAR 0 2
20324: PUSH
20325: FOR_IN
20326: IFFALSE 20342
// SetLives ( i , 300 ) ;
20328: LD_VAR 0 1
20332: PPUSH
20333: LD_INT 300
20335: PPUSH
20336: CALL_OW 234
20340: GO 20325
20342: POP
20343: POP
// end ;
20344: PPOPN 2
20346: END
// every 0 0$1 trigger s60 do var i , tmp ;
20347: LD_EXP 103
20351: IFFALSE 20420
20353: GO 20355
20355: DISABLE
20356: LD_INT 0
20358: PPUSH
20359: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20360: LD_ADDR_VAR 0 2
20364: PUSH
20365: LD_INT 22
20367: PUSH
20368: LD_OWVAR 2
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PPUSH
20377: CALL_OW 69
20381: ST_TO_ADDR
// if not tmp then
20382: LD_VAR 0 2
20386: NOT
20387: IFFALSE 20391
// exit ;
20389: GO 20420
// for i in tmp do
20391: LD_ADDR_VAR 0 1
20395: PUSH
20396: LD_VAR 0 2
20400: PUSH
20401: FOR_IN
20402: IFFALSE 20418
// SetLives ( i , 600 ) ;
20404: LD_VAR 0 1
20408: PPUSH
20409: LD_INT 600
20411: PPUSH
20412: CALL_OW 234
20416: GO 20401
20418: POP
20419: POP
// end ;
20420: PPOPN 2
20422: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20423: LD_INT 0
20425: PPUSH
// case cmd of 301 :
20426: LD_VAR 0 1
20430: PUSH
20431: LD_INT 301
20433: DOUBLE
20434: EQUAL
20435: IFTRUE 20439
20437: GO 20471
20439: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20440: LD_VAR 0 6
20444: PPUSH
20445: LD_VAR 0 7
20449: PPUSH
20450: LD_VAR 0 8
20454: PPUSH
20455: LD_VAR 0 4
20459: PPUSH
20460: LD_VAR 0 5
20464: PPUSH
20465: CALL 21672 0 5
20469: GO 20592
20471: LD_INT 302
20473: DOUBLE
20474: EQUAL
20475: IFTRUE 20479
20477: GO 20516
20479: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20480: LD_VAR 0 6
20484: PPUSH
20485: LD_VAR 0 7
20489: PPUSH
20490: LD_VAR 0 8
20494: PPUSH
20495: LD_VAR 0 9
20499: PPUSH
20500: LD_VAR 0 4
20504: PPUSH
20505: LD_VAR 0 5
20509: PPUSH
20510: CALL 21763 0 6
20514: GO 20592
20516: LD_INT 303
20518: DOUBLE
20519: EQUAL
20520: IFTRUE 20524
20522: GO 20561
20524: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20525: LD_VAR 0 6
20529: PPUSH
20530: LD_VAR 0 7
20534: PPUSH
20535: LD_VAR 0 8
20539: PPUSH
20540: LD_VAR 0 9
20544: PPUSH
20545: LD_VAR 0 4
20549: PPUSH
20550: LD_VAR 0 5
20554: PPUSH
20555: CALL 20597 0 6
20559: GO 20592
20561: LD_INT 304
20563: DOUBLE
20564: EQUAL
20565: IFTRUE 20569
20567: GO 20591
20569: POP
// hHackTeleport ( unit , x , y ) ; end ;
20570: LD_VAR 0 2
20574: PPUSH
20575: LD_VAR 0 4
20579: PPUSH
20580: LD_VAR 0 5
20584: PPUSH
20585: CALL 22356 0 3
20589: GO 20592
20591: POP
// end ;
20592: LD_VAR 0 12
20596: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20597: LD_INT 0
20599: PPUSH
20600: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20601: LD_VAR 0 1
20605: PUSH
20606: LD_INT 1
20608: LESS
20609: PUSH
20610: LD_VAR 0 1
20614: PUSH
20615: LD_INT 3
20617: GREATER
20618: OR
20619: PUSH
20620: LD_VAR 0 5
20624: PPUSH
20625: LD_VAR 0 6
20629: PPUSH
20630: CALL_OW 428
20634: OR
20635: IFFALSE 20639
// exit ;
20637: GO 21359
// uc_side := your_side ;
20639: LD_ADDR_OWVAR 20
20643: PUSH
20644: LD_OWVAR 2
20648: ST_TO_ADDR
// uc_nation := nation ;
20649: LD_ADDR_OWVAR 21
20653: PUSH
20654: LD_VAR 0 1
20658: ST_TO_ADDR
// bc_level = 1 ;
20659: LD_ADDR_OWVAR 43
20663: PUSH
20664: LD_INT 1
20666: ST_TO_ADDR
// case btype of 1 :
20667: LD_VAR 0 2
20671: PUSH
20672: LD_INT 1
20674: DOUBLE
20675: EQUAL
20676: IFTRUE 20680
20678: GO 20691
20680: POP
// bc_type := b_depot ; 2 :
20681: LD_ADDR_OWVAR 42
20685: PUSH
20686: LD_INT 0
20688: ST_TO_ADDR
20689: GO 21303
20691: LD_INT 2
20693: DOUBLE
20694: EQUAL
20695: IFTRUE 20699
20697: GO 20710
20699: POP
// bc_type := b_warehouse ; 3 :
20700: LD_ADDR_OWVAR 42
20704: PUSH
20705: LD_INT 1
20707: ST_TO_ADDR
20708: GO 21303
20710: LD_INT 3
20712: DOUBLE
20713: EQUAL
20714: IFTRUE 20718
20716: GO 20729
20718: POP
// bc_type := b_lab ; 4 .. 9 :
20719: LD_ADDR_OWVAR 42
20723: PUSH
20724: LD_INT 6
20726: ST_TO_ADDR
20727: GO 21303
20729: LD_INT 4
20731: DOUBLE
20732: GREATEREQUAL
20733: IFFALSE 20741
20735: LD_INT 9
20737: DOUBLE
20738: LESSEQUAL
20739: IFTRUE 20743
20741: GO 20795
20743: POP
// begin bc_type := b_lab_half ;
20744: LD_ADDR_OWVAR 42
20748: PUSH
20749: LD_INT 7
20751: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20752: LD_ADDR_OWVAR 44
20756: PUSH
20757: LD_INT 10
20759: PUSH
20760: LD_INT 11
20762: PUSH
20763: LD_INT 12
20765: PUSH
20766: LD_INT 15
20768: PUSH
20769: LD_INT 14
20771: PUSH
20772: LD_INT 13
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: PUSH
20783: LD_VAR 0 2
20787: PUSH
20788: LD_INT 3
20790: MINUS
20791: ARRAY
20792: ST_TO_ADDR
// end ; 10 .. 13 :
20793: GO 21303
20795: LD_INT 10
20797: DOUBLE
20798: GREATEREQUAL
20799: IFFALSE 20807
20801: LD_INT 13
20803: DOUBLE
20804: LESSEQUAL
20805: IFTRUE 20809
20807: GO 20886
20809: POP
// begin bc_type := b_lab_full ;
20810: LD_ADDR_OWVAR 42
20814: PUSH
20815: LD_INT 8
20817: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20818: LD_ADDR_OWVAR 44
20822: PUSH
20823: LD_INT 10
20825: PUSH
20826: LD_INT 12
20828: PUSH
20829: LD_INT 14
20831: PUSH
20832: LD_INT 13
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: LIST
20839: LIST
20840: PUSH
20841: LD_VAR 0 2
20845: PUSH
20846: LD_INT 9
20848: MINUS
20849: ARRAY
20850: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20851: LD_ADDR_OWVAR 45
20855: PUSH
20856: LD_INT 11
20858: PUSH
20859: LD_INT 15
20861: PUSH
20862: LD_INT 12
20864: PUSH
20865: LD_INT 15
20867: PUSH
20868: EMPTY
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: PUSH
20874: LD_VAR 0 2
20878: PUSH
20879: LD_INT 9
20881: MINUS
20882: ARRAY
20883: ST_TO_ADDR
// end ; 14 :
20884: GO 21303
20886: LD_INT 14
20888: DOUBLE
20889: EQUAL
20890: IFTRUE 20894
20892: GO 20905
20894: POP
// bc_type := b_workshop ; 15 :
20895: LD_ADDR_OWVAR 42
20899: PUSH
20900: LD_INT 2
20902: ST_TO_ADDR
20903: GO 21303
20905: LD_INT 15
20907: DOUBLE
20908: EQUAL
20909: IFTRUE 20913
20911: GO 20924
20913: POP
// bc_type := b_factory ; 16 :
20914: LD_ADDR_OWVAR 42
20918: PUSH
20919: LD_INT 3
20921: ST_TO_ADDR
20922: GO 21303
20924: LD_INT 16
20926: DOUBLE
20927: EQUAL
20928: IFTRUE 20932
20930: GO 20943
20932: POP
// bc_type := b_ext_gun ; 17 :
20933: LD_ADDR_OWVAR 42
20937: PUSH
20938: LD_INT 17
20940: ST_TO_ADDR
20941: GO 21303
20943: LD_INT 17
20945: DOUBLE
20946: EQUAL
20947: IFTRUE 20951
20949: GO 20979
20951: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20952: LD_ADDR_OWVAR 42
20956: PUSH
20957: LD_INT 19
20959: PUSH
20960: LD_INT 23
20962: PUSH
20963: LD_INT 19
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: LIST
20970: PUSH
20971: LD_VAR 0 1
20975: ARRAY
20976: ST_TO_ADDR
20977: GO 21303
20979: LD_INT 18
20981: DOUBLE
20982: EQUAL
20983: IFTRUE 20987
20985: GO 20998
20987: POP
// bc_type := b_ext_radar ; 19 :
20988: LD_ADDR_OWVAR 42
20992: PUSH
20993: LD_INT 20
20995: ST_TO_ADDR
20996: GO 21303
20998: LD_INT 19
21000: DOUBLE
21001: EQUAL
21002: IFTRUE 21006
21004: GO 21017
21006: POP
// bc_type := b_ext_radio ; 20 :
21007: LD_ADDR_OWVAR 42
21011: PUSH
21012: LD_INT 22
21014: ST_TO_ADDR
21015: GO 21303
21017: LD_INT 20
21019: DOUBLE
21020: EQUAL
21021: IFTRUE 21025
21023: GO 21036
21025: POP
// bc_type := b_ext_siberium ; 21 :
21026: LD_ADDR_OWVAR 42
21030: PUSH
21031: LD_INT 21
21033: ST_TO_ADDR
21034: GO 21303
21036: LD_INT 21
21038: DOUBLE
21039: EQUAL
21040: IFTRUE 21044
21042: GO 21055
21044: POP
// bc_type := b_ext_computer ; 22 :
21045: LD_ADDR_OWVAR 42
21049: PUSH
21050: LD_INT 24
21052: ST_TO_ADDR
21053: GO 21303
21055: LD_INT 22
21057: DOUBLE
21058: EQUAL
21059: IFTRUE 21063
21061: GO 21074
21063: POP
// bc_type := b_ext_track ; 23 :
21064: LD_ADDR_OWVAR 42
21068: PUSH
21069: LD_INT 16
21071: ST_TO_ADDR
21072: GO 21303
21074: LD_INT 23
21076: DOUBLE
21077: EQUAL
21078: IFTRUE 21082
21080: GO 21093
21082: POP
// bc_type := b_ext_laser ; 24 :
21083: LD_ADDR_OWVAR 42
21087: PUSH
21088: LD_INT 25
21090: ST_TO_ADDR
21091: GO 21303
21093: LD_INT 24
21095: DOUBLE
21096: EQUAL
21097: IFTRUE 21101
21099: GO 21112
21101: POP
// bc_type := b_control_tower ; 25 :
21102: LD_ADDR_OWVAR 42
21106: PUSH
21107: LD_INT 36
21109: ST_TO_ADDR
21110: GO 21303
21112: LD_INT 25
21114: DOUBLE
21115: EQUAL
21116: IFTRUE 21120
21118: GO 21131
21120: POP
// bc_type := b_breastwork ; 26 :
21121: LD_ADDR_OWVAR 42
21125: PUSH
21126: LD_INT 31
21128: ST_TO_ADDR
21129: GO 21303
21131: LD_INT 26
21133: DOUBLE
21134: EQUAL
21135: IFTRUE 21139
21137: GO 21150
21139: POP
// bc_type := b_bunker ; 27 :
21140: LD_ADDR_OWVAR 42
21144: PUSH
21145: LD_INT 32
21147: ST_TO_ADDR
21148: GO 21303
21150: LD_INT 27
21152: DOUBLE
21153: EQUAL
21154: IFTRUE 21158
21156: GO 21169
21158: POP
// bc_type := b_turret ; 28 :
21159: LD_ADDR_OWVAR 42
21163: PUSH
21164: LD_INT 33
21166: ST_TO_ADDR
21167: GO 21303
21169: LD_INT 28
21171: DOUBLE
21172: EQUAL
21173: IFTRUE 21177
21175: GO 21188
21177: POP
// bc_type := b_armoury ; 29 :
21178: LD_ADDR_OWVAR 42
21182: PUSH
21183: LD_INT 4
21185: ST_TO_ADDR
21186: GO 21303
21188: LD_INT 29
21190: DOUBLE
21191: EQUAL
21192: IFTRUE 21196
21194: GO 21207
21196: POP
// bc_type := b_barracks ; 30 :
21197: LD_ADDR_OWVAR 42
21201: PUSH
21202: LD_INT 5
21204: ST_TO_ADDR
21205: GO 21303
21207: LD_INT 30
21209: DOUBLE
21210: EQUAL
21211: IFTRUE 21215
21213: GO 21226
21215: POP
// bc_type := b_solar_power ; 31 :
21216: LD_ADDR_OWVAR 42
21220: PUSH
21221: LD_INT 27
21223: ST_TO_ADDR
21224: GO 21303
21226: LD_INT 31
21228: DOUBLE
21229: EQUAL
21230: IFTRUE 21234
21232: GO 21245
21234: POP
// bc_type := b_oil_power ; 32 :
21235: LD_ADDR_OWVAR 42
21239: PUSH
21240: LD_INT 26
21242: ST_TO_ADDR
21243: GO 21303
21245: LD_INT 32
21247: DOUBLE
21248: EQUAL
21249: IFTRUE 21253
21251: GO 21264
21253: POP
// bc_type := b_siberite_power ; 33 :
21254: LD_ADDR_OWVAR 42
21258: PUSH
21259: LD_INT 28
21261: ST_TO_ADDR
21262: GO 21303
21264: LD_INT 33
21266: DOUBLE
21267: EQUAL
21268: IFTRUE 21272
21270: GO 21283
21272: POP
// bc_type := b_oil_mine ; 34 :
21273: LD_ADDR_OWVAR 42
21277: PUSH
21278: LD_INT 29
21280: ST_TO_ADDR
21281: GO 21303
21283: LD_INT 34
21285: DOUBLE
21286: EQUAL
21287: IFTRUE 21291
21289: GO 21302
21291: POP
// bc_type := b_siberite_mine ; end ;
21292: LD_ADDR_OWVAR 42
21296: PUSH
21297: LD_INT 30
21299: ST_TO_ADDR
21300: GO 21303
21302: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21303: LD_ADDR_VAR 0 8
21307: PUSH
21308: LD_VAR 0 5
21312: PPUSH
21313: LD_VAR 0 6
21317: PPUSH
21318: LD_VAR 0 3
21322: PPUSH
21323: CALL_OW 47
21327: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21328: LD_OWVAR 42
21332: PUSH
21333: LD_INT 32
21335: PUSH
21336: LD_INT 33
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: IN
21343: IFFALSE 21359
// PlaceWeaponTurret ( b , weapon ) ;
21345: LD_VAR 0 8
21349: PPUSH
21350: LD_VAR 0 4
21354: PPUSH
21355: CALL_OW 431
// end ;
21359: LD_VAR 0 7
21363: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21364: LD_INT 0
21366: PPUSH
21367: PPUSH
21368: PPUSH
21369: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21370: LD_ADDR_VAR 0 4
21374: PUSH
21375: LD_INT 22
21377: PUSH
21378: LD_OWVAR 2
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 2
21389: PUSH
21390: LD_INT 30
21392: PUSH
21393: LD_INT 0
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: PUSH
21400: LD_INT 30
21402: PUSH
21403: LD_INT 1
21405: PUSH
21406: EMPTY
21407: LIST
21408: LIST
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: LIST
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: PPUSH
21419: CALL_OW 69
21423: ST_TO_ADDR
// if not tmp then
21424: LD_VAR 0 4
21428: NOT
21429: IFFALSE 21433
// exit ;
21431: GO 21492
// for i in tmp do
21433: LD_ADDR_VAR 0 2
21437: PUSH
21438: LD_VAR 0 4
21442: PUSH
21443: FOR_IN
21444: IFFALSE 21490
// for j = 1 to 3 do
21446: LD_ADDR_VAR 0 3
21450: PUSH
21451: DOUBLE
21452: LD_INT 1
21454: DEC
21455: ST_TO_ADDR
21456: LD_INT 3
21458: PUSH
21459: FOR_TO
21460: IFFALSE 21486
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21462: LD_VAR 0 2
21466: PPUSH
21467: CALL_OW 274
21471: PPUSH
21472: LD_VAR 0 3
21476: PPUSH
21477: LD_INT 99999
21479: PPUSH
21480: CALL_OW 277
21484: GO 21459
21486: POP
21487: POP
21488: GO 21443
21490: POP
21491: POP
// end ;
21492: LD_VAR 0 1
21496: RET
// export function hHackSetLevel10 ; var i , j ; begin
21497: LD_INT 0
21499: PPUSH
21500: PPUSH
21501: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21502: LD_ADDR_VAR 0 2
21506: PUSH
21507: LD_INT 21
21509: PUSH
21510: LD_INT 1
21512: PUSH
21513: EMPTY
21514: LIST
21515: LIST
21516: PPUSH
21517: CALL_OW 69
21521: PUSH
21522: FOR_IN
21523: IFFALSE 21575
// if IsSelected ( i ) then
21525: LD_VAR 0 2
21529: PPUSH
21530: CALL_OW 306
21534: IFFALSE 21573
// begin for j := 1 to 4 do
21536: LD_ADDR_VAR 0 3
21540: PUSH
21541: DOUBLE
21542: LD_INT 1
21544: DEC
21545: ST_TO_ADDR
21546: LD_INT 4
21548: PUSH
21549: FOR_TO
21550: IFFALSE 21571
// SetSkill ( i , j , 10 ) ;
21552: LD_VAR 0 2
21556: PPUSH
21557: LD_VAR 0 3
21561: PPUSH
21562: LD_INT 10
21564: PPUSH
21565: CALL_OW 237
21569: GO 21549
21571: POP
21572: POP
// end ;
21573: GO 21522
21575: POP
21576: POP
// end ;
21577: LD_VAR 0 1
21581: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21582: LD_INT 0
21584: PPUSH
21585: PPUSH
21586: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21587: LD_ADDR_VAR 0 2
21591: PUSH
21592: LD_INT 22
21594: PUSH
21595: LD_OWVAR 2
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 21
21606: PUSH
21607: LD_INT 1
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PPUSH
21618: CALL_OW 69
21622: PUSH
21623: FOR_IN
21624: IFFALSE 21665
// begin for j := 1 to 4 do
21626: LD_ADDR_VAR 0 3
21630: PUSH
21631: DOUBLE
21632: LD_INT 1
21634: DEC
21635: ST_TO_ADDR
21636: LD_INT 4
21638: PUSH
21639: FOR_TO
21640: IFFALSE 21661
// SetSkill ( i , j , 10 ) ;
21642: LD_VAR 0 2
21646: PPUSH
21647: LD_VAR 0 3
21651: PPUSH
21652: LD_INT 10
21654: PPUSH
21655: CALL_OW 237
21659: GO 21639
21661: POP
21662: POP
// end ;
21663: GO 21623
21665: POP
21666: POP
// end ;
21667: LD_VAR 0 1
21671: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21672: LD_INT 0
21674: PPUSH
// uc_side := your_side ;
21675: LD_ADDR_OWVAR 20
21679: PUSH
21680: LD_OWVAR 2
21684: ST_TO_ADDR
// uc_nation := nation ;
21685: LD_ADDR_OWVAR 21
21689: PUSH
21690: LD_VAR 0 1
21694: ST_TO_ADDR
// InitHc ;
21695: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21699: LD_INT 0
21701: PPUSH
21702: LD_VAR 0 2
21706: PPUSH
21707: LD_VAR 0 3
21711: PPUSH
21712: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21716: LD_VAR 0 4
21720: PPUSH
21721: LD_VAR 0 5
21725: PPUSH
21726: CALL_OW 428
21730: PUSH
21731: LD_INT 0
21733: EQUAL
21734: IFFALSE 21758
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21736: CALL_OW 44
21740: PPUSH
21741: LD_VAR 0 4
21745: PPUSH
21746: LD_VAR 0 5
21750: PPUSH
21751: LD_INT 1
21753: PPUSH
21754: CALL_OW 48
// end ;
21758: LD_VAR 0 6
21762: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21763: LD_INT 0
21765: PPUSH
21766: PPUSH
// uc_side := your_side ;
21767: LD_ADDR_OWVAR 20
21771: PUSH
21772: LD_OWVAR 2
21776: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21777: LD_VAR 0 1
21781: PUSH
21782: LD_INT 1
21784: PUSH
21785: LD_INT 2
21787: PUSH
21788: LD_INT 3
21790: PUSH
21791: LD_INT 4
21793: PUSH
21794: LD_INT 5
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: IN
21804: IFFALSE 21816
// uc_nation := nation_american else
21806: LD_ADDR_OWVAR 21
21810: PUSH
21811: LD_INT 1
21813: ST_TO_ADDR
21814: GO 21859
// if chassis in [ 11 , 12 , 13 , 14 ] then
21816: LD_VAR 0 1
21820: PUSH
21821: LD_INT 11
21823: PUSH
21824: LD_INT 12
21826: PUSH
21827: LD_INT 13
21829: PUSH
21830: LD_INT 14
21832: PUSH
21833: EMPTY
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: IN
21839: IFFALSE 21851
// uc_nation := nation_arabian else
21841: LD_ADDR_OWVAR 21
21845: PUSH
21846: LD_INT 2
21848: ST_TO_ADDR
21849: GO 21859
// uc_nation := nation_russian ;
21851: LD_ADDR_OWVAR 21
21855: PUSH
21856: LD_INT 3
21858: ST_TO_ADDR
// vc_chassis := chassis ;
21859: LD_ADDR_OWVAR 37
21863: PUSH
21864: LD_VAR 0 1
21868: ST_TO_ADDR
// vc_engine := engine ;
21869: LD_ADDR_OWVAR 39
21873: PUSH
21874: LD_VAR 0 2
21878: ST_TO_ADDR
// vc_control := control ;
21879: LD_ADDR_OWVAR 38
21883: PUSH
21884: LD_VAR 0 3
21888: ST_TO_ADDR
// vc_weapon := weapon ;
21889: LD_ADDR_OWVAR 40
21893: PUSH
21894: LD_VAR 0 4
21898: ST_TO_ADDR
// un := CreateVehicle ;
21899: LD_ADDR_VAR 0 8
21903: PUSH
21904: CALL_OW 45
21908: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21909: LD_VAR 0 8
21913: PPUSH
21914: LD_INT 0
21916: PPUSH
21917: LD_INT 5
21919: PPUSH
21920: CALL_OW 12
21924: PPUSH
21925: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21929: LD_VAR 0 8
21933: PPUSH
21934: LD_VAR 0 5
21938: PPUSH
21939: LD_VAR 0 6
21943: PPUSH
21944: LD_INT 1
21946: PPUSH
21947: CALL_OW 48
// end ;
21951: LD_VAR 0 7
21955: RET
// export hInvincible ; every 1 do
21956: GO 21958
21958: DISABLE
// hInvincible := [ ] ;
21959: LD_ADDR_EXP 104
21963: PUSH
21964: EMPTY
21965: ST_TO_ADDR
21966: END
// every 10 do var i ;
21967: GO 21969
21969: DISABLE
21970: LD_INT 0
21972: PPUSH
// begin enable ;
21973: ENABLE
// if not hInvincible then
21974: LD_EXP 104
21978: NOT
21979: IFFALSE 21983
// exit ;
21981: GO 22027
// for i in hInvincible do
21983: LD_ADDR_VAR 0 1
21987: PUSH
21988: LD_EXP 104
21992: PUSH
21993: FOR_IN
21994: IFFALSE 22025
// if GetLives ( i ) < 1000 then
21996: LD_VAR 0 1
22000: PPUSH
22001: CALL_OW 256
22005: PUSH
22006: LD_INT 1000
22008: LESS
22009: IFFALSE 22023
// SetLives ( i , 1000 ) ;
22011: LD_VAR 0 1
22015: PPUSH
22016: LD_INT 1000
22018: PPUSH
22019: CALL_OW 234
22023: GO 21993
22025: POP
22026: POP
// end ;
22027: PPOPN 1
22029: END
// export function hHackInvincible ; var i ; begin
22030: LD_INT 0
22032: PPUSH
22033: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22034: LD_ADDR_VAR 0 2
22038: PUSH
22039: LD_INT 2
22041: PUSH
22042: LD_INT 21
22044: PUSH
22045: LD_INT 1
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: PUSH
22052: LD_INT 21
22054: PUSH
22055: LD_INT 2
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PUSH
22062: EMPTY
22063: LIST
22064: LIST
22065: LIST
22066: PPUSH
22067: CALL_OW 69
22071: PUSH
22072: FOR_IN
22073: IFFALSE 22134
// if IsSelected ( i ) then
22075: LD_VAR 0 2
22079: PPUSH
22080: CALL_OW 306
22084: IFFALSE 22132
// begin if i in hInvincible then
22086: LD_VAR 0 2
22090: PUSH
22091: LD_EXP 104
22095: IN
22096: IFFALSE 22116
// hInvincible := hInvincible diff i else
22098: LD_ADDR_EXP 104
22102: PUSH
22103: LD_EXP 104
22107: PUSH
22108: LD_VAR 0 2
22112: DIFF
22113: ST_TO_ADDR
22114: GO 22132
// hInvincible := hInvincible union i ;
22116: LD_ADDR_EXP 104
22120: PUSH
22121: LD_EXP 104
22125: PUSH
22126: LD_VAR 0 2
22130: UNION
22131: ST_TO_ADDR
// end ;
22132: GO 22072
22134: POP
22135: POP
// end ;
22136: LD_VAR 0 1
22140: RET
// export function hHackInvisible ; var i , j ; begin
22141: LD_INT 0
22143: PPUSH
22144: PPUSH
22145: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22146: LD_ADDR_VAR 0 2
22150: PUSH
22151: LD_INT 21
22153: PUSH
22154: LD_INT 1
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PPUSH
22161: CALL_OW 69
22165: PUSH
22166: FOR_IN
22167: IFFALSE 22191
// if IsSelected ( i ) then
22169: LD_VAR 0 2
22173: PPUSH
22174: CALL_OW 306
22178: IFFALSE 22189
// ComForceInvisible ( i ) ;
22180: LD_VAR 0 2
22184: PPUSH
22185: CALL_OW 496
22189: GO 22166
22191: POP
22192: POP
// end ;
22193: LD_VAR 0 1
22197: RET
// export function hHackChangeYourSide ; begin
22198: LD_INT 0
22200: PPUSH
// if your_side = 8 then
22201: LD_OWVAR 2
22205: PUSH
22206: LD_INT 8
22208: EQUAL
22209: IFFALSE 22221
// your_side := 0 else
22211: LD_ADDR_OWVAR 2
22215: PUSH
22216: LD_INT 0
22218: ST_TO_ADDR
22219: GO 22235
// your_side := your_side + 1 ;
22221: LD_ADDR_OWVAR 2
22225: PUSH
22226: LD_OWVAR 2
22230: PUSH
22231: LD_INT 1
22233: PLUS
22234: ST_TO_ADDR
// end ;
22235: LD_VAR 0 1
22239: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22240: LD_INT 0
22242: PPUSH
22243: PPUSH
22244: PPUSH
// for i in all_units do
22245: LD_ADDR_VAR 0 2
22249: PUSH
22250: LD_OWVAR 3
22254: PUSH
22255: FOR_IN
22256: IFFALSE 22334
// if IsSelected ( i ) then
22258: LD_VAR 0 2
22262: PPUSH
22263: CALL_OW 306
22267: IFFALSE 22332
// begin j := GetSide ( i ) ;
22269: LD_ADDR_VAR 0 3
22273: PUSH
22274: LD_VAR 0 2
22278: PPUSH
22279: CALL_OW 255
22283: ST_TO_ADDR
// if j = 8 then
22284: LD_VAR 0 3
22288: PUSH
22289: LD_INT 8
22291: EQUAL
22292: IFFALSE 22304
// j := 0 else
22294: LD_ADDR_VAR 0 3
22298: PUSH
22299: LD_INT 0
22301: ST_TO_ADDR
22302: GO 22318
// j := j + 1 ;
22304: LD_ADDR_VAR 0 3
22308: PUSH
22309: LD_VAR 0 3
22313: PUSH
22314: LD_INT 1
22316: PLUS
22317: ST_TO_ADDR
// SetSide ( i , j ) ;
22318: LD_VAR 0 2
22322: PPUSH
22323: LD_VAR 0 3
22327: PPUSH
22328: CALL_OW 235
// end ;
22332: GO 22255
22334: POP
22335: POP
// end ;
22336: LD_VAR 0 1
22340: RET
// export function hHackFog ; begin
22341: LD_INT 0
22343: PPUSH
// FogOff ( true ) ;
22344: LD_INT 1
22346: PPUSH
22347: CALL_OW 344
// end ;
22351: LD_VAR 0 1
22355: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22356: LD_INT 0
22358: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22359: LD_VAR 0 1
22363: PPUSH
22364: LD_VAR 0 2
22368: PPUSH
22369: LD_VAR 0 3
22373: PPUSH
22374: LD_INT 1
22376: PPUSH
22377: LD_INT 1
22379: PPUSH
22380: CALL_OW 483
// CenterOnXY ( x , y ) ;
22384: LD_VAR 0 2
22388: PPUSH
22389: LD_VAR 0 3
22393: PPUSH
22394: CALL_OW 84
// end ;
22398: LD_VAR 0 4
22402: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22403: LD_INT 0
22405: PPUSH
22406: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22407: LD_VAR 0 1
22411: NOT
22412: PUSH
22413: LD_VAR 0 2
22417: PPUSH
22418: LD_VAR 0 3
22422: PPUSH
22423: CALL_OW 488
22427: NOT
22428: OR
22429: PUSH
22430: LD_VAR 0 1
22434: PPUSH
22435: CALL_OW 266
22439: PUSH
22440: LD_INT 3
22442: NONEQUAL
22443: PUSH
22444: LD_VAR 0 1
22448: PPUSH
22449: CALL_OW 247
22453: PUSH
22454: LD_INT 1
22456: EQUAL
22457: NOT
22458: AND
22459: OR
22460: IFFALSE 22464
// exit ;
22462: GO 22613
// if GetType ( factory ) = unit_human then
22464: LD_VAR 0 1
22468: PPUSH
22469: CALL_OW 247
22473: PUSH
22474: LD_INT 1
22476: EQUAL
22477: IFFALSE 22494
// factory := IsInUnit ( factory ) ;
22479: LD_ADDR_VAR 0 1
22483: PUSH
22484: LD_VAR 0 1
22488: PPUSH
22489: CALL_OW 310
22493: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22494: LD_VAR 0 1
22498: PPUSH
22499: CALL_OW 266
22503: PUSH
22504: LD_INT 3
22506: NONEQUAL
22507: IFFALSE 22511
// exit ;
22509: GO 22613
// if HexInfo ( x , y ) = factory then
22511: LD_VAR 0 2
22515: PPUSH
22516: LD_VAR 0 3
22520: PPUSH
22521: CALL_OW 428
22525: PUSH
22526: LD_VAR 0 1
22530: EQUAL
22531: IFFALSE 22558
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22533: LD_ADDR_EXP 105
22537: PUSH
22538: LD_EXP 105
22542: PPUSH
22543: LD_VAR 0 1
22547: PPUSH
22548: LD_INT 0
22550: PPUSH
22551: CALL_OW 1
22555: ST_TO_ADDR
22556: GO 22609
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22558: LD_ADDR_EXP 105
22562: PUSH
22563: LD_EXP 105
22567: PPUSH
22568: LD_VAR 0 1
22572: PPUSH
22573: LD_VAR 0 1
22577: PPUSH
22578: CALL_OW 255
22582: PUSH
22583: LD_VAR 0 1
22587: PUSH
22588: LD_VAR 0 2
22592: PUSH
22593: LD_VAR 0 3
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: PPUSH
22604: CALL_OW 1
22608: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22609: CALL 22618 0 0
// end ;
22613: LD_VAR 0 4
22617: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22618: LD_INT 0
22620: PPUSH
22621: PPUSH
22622: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22623: LD_STRING resetFactoryWaypoint();
22625: PPUSH
22626: CALL_OW 559
// if factoryWaypoints then
22630: LD_EXP 105
22634: IFFALSE 22760
// begin list := PrepareArray ( factoryWaypoints ) ;
22636: LD_ADDR_VAR 0 3
22640: PUSH
22641: LD_EXP 105
22645: PPUSH
22646: CALL 69192 0 1
22650: ST_TO_ADDR
// for i := 1 to list do
22651: LD_ADDR_VAR 0 2
22655: PUSH
22656: DOUBLE
22657: LD_INT 1
22659: DEC
22660: ST_TO_ADDR
22661: LD_VAR 0 3
22665: PUSH
22666: FOR_TO
22667: IFFALSE 22758
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22669: LD_STRING setFactoryWaypointXY(
22671: PUSH
22672: LD_VAR 0 3
22676: PUSH
22677: LD_VAR 0 2
22681: ARRAY
22682: PUSH
22683: LD_INT 1
22685: ARRAY
22686: STR
22687: PUSH
22688: LD_STRING ,
22690: STR
22691: PUSH
22692: LD_VAR 0 3
22696: PUSH
22697: LD_VAR 0 2
22701: ARRAY
22702: PUSH
22703: LD_INT 2
22705: ARRAY
22706: STR
22707: PUSH
22708: LD_STRING ,
22710: STR
22711: PUSH
22712: LD_VAR 0 3
22716: PUSH
22717: LD_VAR 0 2
22721: ARRAY
22722: PUSH
22723: LD_INT 3
22725: ARRAY
22726: STR
22727: PUSH
22728: LD_STRING ,
22730: STR
22731: PUSH
22732: LD_VAR 0 3
22736: PUSH
22737: LD_VAR 0 2
22741: ARRAY
22742: PUSH
22743: LD_INT 4
22745: ARRAY
22746: STR
22747: PUSH
22748: LD_STRING )
22750: STR
22751: PPUSH
22752: CALL_OW 559
22756: GO 22666
22758: POP
22759: POP
// end ; end ;
22760: LD_VAR 0 1
22764: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22765: LD_INT 0
22767: PPUSH
// if HexInfo ( x , y ) = warehouse then
22768: LD_VAR 0 2
22772: PPUSH
22773: LD_VAR 0 3
22777: PPUSH
22778: CALL_OW 428
22782: PUSH
22783: LD_VAR 0 1
22787: EQUAL
22788: IFFALSE 22815
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22790: LD_ADDR_EXP 106
22794: PUSH
22795: LD_EXP 106
22799: PPUSH
22800: LD_VAR 0 1
22804: PPUSH
22805: LD_INT 0
22807: PPUSH
22808: CALL_OW 1
22812: ST_TO_ADDR
22813: GO 22866
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22815: LD_ADDR_EXP 106
22819: PUSH
22820: LD_EXP 106
22824: PPUSH
22825: LD_VAR 0 1
22829: PPUSH
22830: LD_VAR 0 1
22834: PPUSH
22835: CALL_OW 255
22839: PUSH
22840: LD_VAR 0 1
22844: PUSH
22845: LD_VAR 0 2
22849: PUSH
22850: LD_VAR 0 3
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: PPUSH
22861: CALL_OW 1
22865: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22866: CALL 22875 0 0
// end ;
22870: LD_VAR 0 4
22874: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22875: LD_INT 0
22877: PPUSH
22878: PPUSH
22879: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22880: LD_STRING resetWarehouseGatheringPoints();
22882: PPUSH
22883: CALL_OW 559
// if warehouseGatheringPoints then
22887: LD_EXP 106
22891: IFFALSE 23017
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22893: LD_ADDR_VAR 0 3
22897: PUSH
22898: LD_EXP 106
22902: PPUSH
22903: CALL 69192 0 1
22907: ST_TO_ADDR
// for i := 1 to list do
22908: LD_ADDR_VAR 0 2
22912: PUSH
22913: DOUBLE
22914: LD_INT 1
22916: DEC
22917: ST_TO_ADDR
22918: LD_VAR 0 3
22922: PUSH
22923: FOR_TO
22924: IFFALSE 23015
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22926: LD_STRING setWarehouseGatheringPointXY(
22928: PUSH
22929: LD_VAR 0 3
22933: PUSH
22934: LD_VAR 0 2
22938: ARRAY
22939: PUSH
22940: LD_INT 1
22942: ARRAY
22943: STR
22944: PUSH
22945: LD_STRING ,
22947: STR
22948: PUSH
22949: LD_VAR 0 3
22953: PUSH
22954: LD_VAR 0 2
22958: ARRAY
22959: PUSH
22960: LD_INT 2
22962: ARRAY
22963: STR
22964: PUSH
22965: LD_STRING ,
22967: STR
22968: PUSH
22969: LD_VAR 0 3
22973: PUSH
22974: LD_VAR 0 2
22978: ARRAY
22979: PUSH
22980: LD_INT 3
22982: ARRAY
22983: STR
22984: PUSH
22985: LD_STRING ,
22987: STR
22988: PUSH
22989: LD_VAR 0 3
22993: PUSH
22994: LD_VAR 0 2
22998: ARRAY
22999: PUSH
23000: LD_INT 4
23002: ARRAY
23003: STR
23004: PUSH
23005: LD_STRING )
23007: STR
23008: PPUSH
23009: CALL_OW 559
23013: GO 22923
23015: POP
23016: POP
// end ; end ;
23017: LD_VAR 0 1
23021: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23022: LD_EXP 106
23026: IFFALSE 23713
23028: GO 23030
23030: DISABLE
23031: LD_INT 0
23033: PPUSH
23034: PPUSH
23035: PPUSH
23036: PPUSH
23037: PPUSH
23038: PPUSH
23039: PPUSH
23040: PPUSH
23041: PPUSH
// begin enable ;
23042: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23043: LD_ADDR_VAR 0 3
23047: PUSH
23048: LD_EXP 106
23052: PPUSH
23053: CALL 69192 0 1
23057: ST_TO_ADDR
// if not list then
23058: LD_VAR 0 3
23062: NOT
23063: IFFALSE 23067
// exit ;
23065: GO 23713
// for i := 1 to list do
23067: LD_ADDR_VAR 0 1
23071: PUSH
23072: DOUBLE
23073: LD_INT 1
23075: DEC
23076: ST_TO_ADDR
23077: LD_VAR 0 3
23081: PUSH
23082: FOR_TO
23083: IFFALSE 23711
// begin depot := list [ i ] [ 2 ] ;
23085: LD_ADDR_VAR 0 8
23089: PUSH
23090: LD_VAR 0 3
23094: PUSH
23095: LD_VAR 0 1
23099: ARRAY
23100: PUSH
23101: LD_INT 2
23103: ARRAY
23104: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23105: LD_ADDR_VAR 0 5
23109: PUSH
23110: LD_VAR 0 3
23114: PUSH
23115: LD_VAR 0 1
23119: ARRAY
23120: PUSH
23121: LD_INT 1
23123: ARRAY
23124: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23125: LD_VAR 0 8
23129: PPUSH
23130: CALL_OW 301
23134: PUSH
23135: LD_VAR 0 5
23139: PUSH
23140: LD_VAR 0 8
23144: PPUSH
23145: CALL_OW 255
23149: NONEQUAL
23150: OR
23151: IFFALSE 23180
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23153: LD_ADDR_EXP 106
23157: PUSH
23158: LD_EXP 106
23162: PPUSH
23163: LD_VAR 0 8
23167: PPUSH
23168: LD_INT 0
23170: PPUSH
23171: CALL_OW 1
23175: ST_TO_ADDR
// exit ;
23176: POP
23177: POP
23178: GO 23713
// end ; x := list [ i ] [ 3 ] ;
23180: LD_ADDR_VAR 0 6
23184: PUSH
23185: LD_VAR 0 3
23189: PUSH
23190: LD_VAR 0 1
23194: ARRAY
23195: PUSH
23196: LD_INT 3
23198: ARRAY
23199: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23200: LD_ADDR_VAR 0 7
23204: PUSH
23205: LD_VAR 0 3
23209: PUSH
23210: LD_VAR 0 1
23214: ARRAY
23215: PUSH
23216: LD_INT 4
23218: ARRAY
23219: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23220: LD_ADDR_VAR 0 9
23224: PUSH
23225: LD_VAR 0 6
23229: PPUSH
23230: LD_VAR 0 7
23234: PPUSH
23235: LD_INT 16
23237: PPUSH
23238: CALL 67776 0 3
23242: ST_TO_ADDR
// if not cratesNearbyPoint then
23243: LD_VAR 0 9
23247: NOT
23248: IFFALSE 23254
// exit ;
23250: POP
23251: POP
23252: GO 23713
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23254: LD_ADDR_VAR 0 4
23258: PUSH
23259: LD_INT 22
23261: PUSH
23262: LD_VAR 0 5
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: LD_INT 3
23273: PUSH
23274: LD_INT 60
23276: PUSH
23277: EMPTY
23278: LIST
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: LD_INT 91
23286: PUSH
23287: LD_VAR 0 8
23291: PUSH
23292: LD_INT 6
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 2
23302: PUSH
23303: LD_INT 25
23305: PUSH
23306: LD_INT 2
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PUSH
23313: LD_INT 25
23315: PUSH
23316: LD_INT 16
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PUSH
23323: EMPTY
23324: LIST
23325: LIST
23326: LIST
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: PPUSH
23334: CALL_OW 69
23338: PUSH
23339: LD_VAR 0 8
23343: PPUSH
23344: CALL_OW 313
23348: PPUSH
23349: LD_INT 3
23351: PUSH
23352: LD_INT 60
23354: PUSH
23355: EMPTY
23356: LIST
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: PUSH
23362: LD_INT 2
23364: PUSH
23365: LD_INT 25
23367: PUSH
23368: LD_INT 2
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 25
23377: PUSH
23378: LD_INT 16
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: LIST
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: PPUSH
23394: CALL_OW 72
23398: UNION
23399: ST_TO_ADDR
// if tmp then
23400: LD_VAR 0 4
23404: IFFALSE 23484
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23406: LD_ADDR_VAR 0 4
23410: PUSH
23411: LD_VAR 0 4
23415: PPUSH
23416: LD_INT 3
23418: PPUSH
23419: CALL 65743 0 2
23423: ST_TO_ADDR
// for j in tmp do
23424: LD_ADDR_VAR 0 2
23428: PUSH
23429: LD_VAR 0 4
23433: PUSH
23434: FOR_IN
23435: IFFALSE 23478
// begin if IsInUnit ( j ) then
23437: LD_VAR 0 2
23441: PPUSH
23442: CALL_OW 310
23446: IFFALSE 23457
// ComExit ( j ) ;
23448: LD_VAR 0 2
23452: PPUSH
23453: CALL 65826 0 1
// AddComCollect ( j , x , y ) ;
23457: LD_VAR 0 2
23461: PPUSH
23462: LD_VAR 0 6
23466: PPUSH
23467: LD_VAR 0 7
23471: PPUSH
23472: CALL_OW 177
// end ;
23476: GO 23434
23478: POP
23479: POP
// exit ;
23480: POP
23481: POP
23482: GO 23713
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23484: LD_ADDR_VAR 0 4
23488: PUSH
23489: LD_INT 22
23491: PUSH
23492: LD_VAR 0 5
23496: PUSH
23497: EMPTY
23498: LIST
23499: LIST
23500: PUSH
23501: LD_INT 91
23503: PUSH
23504: LD_VAR 0 8
23508: PUSH
23509: LD_INT 8
23511: PUSH
23512: EMPTY
23513: LIST
23514: LIST
23515: LIST
23516: PUSH
23517: LD_INT 2
23519: PUSH
23520: LD_INT 34
23522: PUSH
23523: LD_INT 12
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 34
23532: PUSH
23533: LD_INT 51
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: LD_INT 34
23542: PUSH
23543: LD_INT 32
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PUSH
23550: LD_INT 34
23552: PUSH
23553: LD_EXP 30
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: LIST
23573: PPUSH
23574: CALL_OW 69
23578: ST_TO_ADDR
// if tmp then
23579: LD_VAR 0 4
23583: IFFALSE 23709
// begin for j in tmp do
23585: LD_ADDR_VAR 0 2
23589: PUSH
23590: LD_VAR 0 4
23594: PUSH
23595: FOR_IN
23596: IFFALSE 23707
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23598: LD_VAR 0 2
23602: PPUSH
23603: CALL_OW 262
23607: PUSH
23608: LD_INT 3
23610: EQUAL
23611: PUSH
23612: LD_VAR 0 2
23616: PPUSH
23617: CALL_OW 261
23621: PUSH
23622: LD_INT 20
23624: GREATER
23625: OR
23626: PUSH
23627: LD_VAR 0 2
23631: PPUSH
23632: CALL_OW 314
23636: NOT
23637: AND
23638: PUSH
23639: LD_VAR 0 2
23643: PPUSH
23644: CALL_OW 263
23648: PUSH
23649: LD_INT 1
23651: NONEQUAL
23652: PUSH
23653: LD_VAR 0 2
23657: PPUSH
23658: CALL_OW 311
23662: OR
23663: AND
23664: IFFALSE 23705
// begin ComCollect ( j , x , y ) ;
23666: LD_VAR 0 2
23670: PPUSH
23671: LD_VAR 0 6
23675: PPUSH
23676: LD_VAR 0 7
23680: PPUSH
23681: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23685: LD_VAR 0 2
23689: PPUSH
23690: LD_VAR 0 8
23694: PPUSH
23695: CALL_OW 172
// exit ;
23699: POP
23700: POP
23701: POP
23702: POP
23703: GO 23713
// end ;
23705: GO 23595
23707: POP
23708: POP
// end ; end ;
23709: GO 23082
23711: POP
23712: POP
// end ; end_of_file
23713: PPOPN 9
23715: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23716: LD_INT 0
23718: PPUSH
23719: PPUSH
23720: PPUSH
23721: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23722: LD_VAR 0 1
23726: PPUSH
23727: CALL_OW 264
23731: PUSH
23732: LD_EXP 33
23736: EQUAL
23737: IFFALSE 23809
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23739: LD_INT 68
23741: PPUSH
23742: LD_VAR 0 1
23746: PPUSH
23747: CALL_OW 255
23751: PPUSH
23752: CALL_OW 321
23756: PUSH
23757: LD_INT 2
23759: EQUAL
23760: IFFALSE 23772
// eff := 70 else
23762: LD_ADDR_VAR 0 4
23766: PUSH
23767: LD_INT 70
23769: ST_TO_ADDR
23770: GO 23780
// eff := 30 ;
23772: LD_ADDR_VAR 0 4
23776: PUSH
23777: LD_INT 30
23779: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23780: LD_VAR 0 1
23784: PPUSH
23785: CALL_OW 250
23789: PPUSH
23790: LD_VAR 0 1
23794: PPUSH
23795: CALL_OW 251
23799: PPUSH
23800: LD_VAR 0 4
23804: PPUSH
23805: CALL_OW 495
// end ; end ;
23809: LD_VAR 0 2
23813: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23814: LD_INT 0
23816: PPUSH
// end ;
23817: LD_VAR 0 4
23821: RET
// export function SOS_Command ( cmd ) ; begin
23822: LD_INT 0
23824: PPUSH
// end ;
23825: LD_VAR 0 2
23829: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23830: LD_INT 0
23832: PPUSH
// end ;
23833: LD_VAR 0 6
23837: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
23838: LD_INT 0
23840: PPUSH
23841: PPUSH
// if not vehicle or not factory then
23842: LD_VAR 0 1
23846: NOT
23847: PUSH
23848: LD_VAR 0 2
23852: NOT
23853: OR
23854: IFFALSE 23858
// exit ;
23856: GO 24089
// if factoryWaypoints >= factory then
23858: LD_EXP 105
23862: PUSH
23863: LD_VAR 0 2
23867: GREATEREQUAL
23868: IFFALSE 24089
// if factoryWaypoints [ factory ] then
23870: LD_EXP 105
23874: PUSH
23875: LD_VAR 0 2
23879: ARRAY
23880: IFFALSE 24089
// begin if GetControl ( vehicle ) = control_manual then
23882: LD_VAR 0 1
23886: PPUSH
23887: CALL_OW 263
23891: PUSH
23892: LD_INT 1
23894: EQUAL
23895: IFFALSE 23976
// begin driver := IsDrivenBy ( vehicle ) ;
23897: LD_ADDR_VAR 0 4
23901: PUSH
23902: LD_VAR 0 1
23906: PPUSH
23907: CALL_OW 311
23911: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23912: LD_VAR 0 4
23916: PPUSH
23917: LD_EXP 105
23921: PUSH
23922: LD_VAR 0 2
23926: ARRAY
23927: PUSH
23928: LD_INT 3
23930: ARRAY
23931: PPUSH
23932: LD_EXP 105
23936: PUSH
23937: LD_VAR 0 2
23941: ARRAY
23942: PUSH
23943: LD_INT 4
23945: ARRAY
23946: PPUSH
23947: CALL_OW 171
// AddComExitVehicle ( driver ) ;
23951: LD_VAR 0 4
23955: PPUSH
23956: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23960: LD_VAR 0 4
23964: PPUSH
23965: LD_VAR 0 2
23969: PPUSH
23970: CALL_OW 180
// end else
23974: GO 24089
// if GetControl ( vehicle ) = control_remote then
23976: LD_VAR 0 1
23980: PPUSH
23981: CALL_OW 263
23985: PUSH
23986: LD_INT 2
23988: EQUAL
23989: IFFALSE 24050
// begin wait ( 0 0$2 ) ;
23991: LD_INT 70
23993: PPUSH
23994: CALL_OW 67
// if Connect ( vehicle ) then
23998: LD_VAR 0 1
24002: PPUSH
24003: CALL 36137 0 1
24007: IFFALSE 24048
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24009: LD_VAR 0 1
24013: PPUSH
24014: LD_EXP 105
24018: PUSH
24019: LD_VAR 0 2
24023: ARRAY
24024: PUSH
24025: LD_INT 3
24027: ARRAY
24028: PPUSH
24029: LD_EXP 105
24033: PUSH
24034: LD_VAR 0 2
24038: ARRAY
24039: PUSH
24040: LD_INT 4
24042: ARRAY
24043: PPUSH
24044: CALL_OW 171
// end else
24048: GO 24089
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24050: LD_VAR 0 1
24054: PPUSH
24055: LD_EXP 105
24059: PUSH
24060: LD_VAR 0 2
24064: ARRAY
24065: PUSH
24066: LD_INT 3
24068: ARRAY
24069: PPUSH
24070: LD_EXP 105
24074: PUSH
24075: LD_VAR 0 2
24079: ARRAY
24080: PUSH
24081: LD_INT 4
24083: ARRAY
24084: PPUSH
24085: CALL_OW 171
// end ; end ;
24089: LD_VAR 0 3
24093: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24094: LD_INT 0
24096: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24097: LD_VAR 0 1
24101: PUSH
24102: LD_INT 250
24104: EQUAL
24105: PUSH
24106: LD_VAR 0 2
24110: PPUSH
24111: CALL_OW 264
24115: PUSH
24116: LD_EXP 36
24120: EQUAL
24121: AND
24122: IFFALSE 24143
// MinerPlaceMine ( unit , x , y ) ;
24124: LD_VAR 0 2
24128: PPUSH
24129: LD_VAR 0 4
24133: PPUSH
24134: LD_VAR 0 5
24138: PPUSH
24139: CALL 26542 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24143: LD_VAR 0 1
24147: PUSH
24148: LD_INT 251
24150: EQUAL
24151: PUSH
24152: LD_VAR 0 2
24156: PPUSH
24157: CALL_OW 264
24161: PUSH
24162: LD_EXP 36
24166: EQUAL
24167: AND
24168: IFFALSE 24189
// MinerDetonateMine ( unit , x , y ) ;
24170: LD_VAR 0 2
24174: PPUSH
24175: LD_VAR 0 4
24179: PPUSH
24180: LD_VAR 0 5
24184: PPUSH
24185: CALL 26819 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24189: LD_VAR 0 1
24193: PUSH
24194: LD_INT 252
24196: EQUAL
24197: PUSH
24198: LD_VAR 0 2
24202: PPUSH
24203: CALL_OW 264
24207: PUSH
24208: LD_EXP 36
24212: EQUAL
24213: AND
24214: IFFALSE 24235
// MinerCreateMinefield ( unit , x , y ) ;
24216: LD_VAR 0 2
24220: PPUSH
24221: LD_VAR 0 4
24225: PPUSH
24226: LD_VAR 0 5
24230: PPUSH
24231: CALL 27236 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24235: LD_VAR 0 1
24239: PUSH
24240: LD_INT 253
24242: EQUAL
24243: PUSH
24244: LD_VAR 0 2
24248: PPUSH
24249: CALL_OW 257
24253: PUSH
24254: LD_INT 5
24256: EQUAL
24257: AND
24258: IFFALSE 24279
// ComBinocular ( unit , x , y ) ;
24260: LD_VAR 0 2
24264: PPUSH
24265: LD_VAR 0 4
24269: PPUSH
24270: LD_VAR 0 5
24274: PPUSH
24275: CALL 27607 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24279: LD_VAR 0 1
24283: PUSH
24284: LD_INT 254
24286: EQUAL
24287: PUSH
24288: LD_VAR 0 2
24292: PPUSH
24293: CALL_OW 264
24297: PUSH
24298: LD_EXP 31
24302: EQUAL
24303: AND
24304: PUSH
24305: LD_VAR 0 3
24309: PPUSH
24310: CALL_OW 263
24314: PUSH
24315: LD_INT 3
24317: EQUAL
24318: AND
24319: IFFALSE 24335
// HackDestroyVehicle ( unit , selectedUnit ) ;
24321: LD_VAR 0 2
24325: PPUSH
24326: LD_VAR 0 3
24330: PPUSH
24331: CALL 25902 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24335: LD_VAR 0 1
24339: PUSH
24340: LD_INT 255
24342: EQUAL
24343: PUSH
24344: LD_VAR 0 2
24348: PPUSH
24349: CALL_OW 264
24353: PUSH
24354: LD_INT 14
24356: PUSH
24357: LD_INT 53
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: IN
24364: AND
24365: PUSH
24366: LD_VAR 0 4
24370: PPUSH
24371: LD_VAR 0 5
24375: PPUSH
24376: CALL_OW 488
24380: AND
24381: IFFALSE 24405
// CutTreeXYR ( unit , x , y , 12 ) ;
24383: LD_VAR 0 2
24387: PPUSH
24388: LD_VAR 0 4
24392: PPUSH
24393: LD_VAR 0 5
24397: PPUSH
24398: LD_INT 12
24400: PPUSH
24401: CALL 24468 0 4
// if cmd = 256 then
24405: LD_VAR 0 1
24409: PUSH
24410: LD_INT 256
24412: EQUAL
24413: IFFALSE 24434
// SetFactoryWaypoint ( unit , x , y ) ;
24415: LD_VAR 0 2
24419: PPUSH
24420: LD_VAR 0 4
24424: PPUSH
24425: LD_VAR 0 5
24429: PPUSH
24430: CALL 22403 0 3
// if cmd = 257 then
24434: LD_VAR 0 1
24438: PUSH
24439: LD_INT 257
24441: EQUAL
24442: IFFALSE 24463
// SetWarehouseGatheringPoint ( unit , x , y ) ;
24444: LD_VAR 0 2
24448: PPUSH
24449: LD_VAR 0 4
24453: PPUSH
24454: LD_VAR 0 5
24458: PPUSH
24459: CALL 22765 0 3
// end ;
24463: LD_VAR 0 6
24467: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24468: LD_INT 0
24470: PPUSH
24471: PPUSH
24472: PPUSH
24473: PPUSH
24474: PPUSH
24475: PPUSH
24476: PPUSH
24477: PPUSH
24478: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24479: LD_VAR 0 1
24483: NOT
24484: PUSH
24485: LD_VAR 0 2
24489: PPUSH
24490: LD_VAR 0 3
24494: PPUSH
24495: CALL_OW 488
24499: NOT
24500: OR
24501: PUSH
24502: LD_VAR 0 4
24506: NOT
24507: OR
24508: IFFALSE 24512
// exit ;
24510: GO 24852
// list := [ ] ;
24512: LD_ADDR_VAR 0 13
24516: PUSH
24517: EMPTY
24518: ST_TO_ADDR
// if x - r < 0 then
24519: LD_VAR 0 2
24523: PUSH
24524: LD_VAR 0 4
24528: MINUS
24529: PUSH
24530: LD_INT 0
24532: LESS
24533: IFFALSE 24545
// min_x := 0 else
24535: LD_ADDR_VAR 0 7
24539: PUSH
24540: LD_INT 0
24542: ST_TO_ADDR
24543: GO 24561
// min_x := x - r ;
24545: LD_ADDR_VAR 0 7
24549: PUSH
24550: LD_VAR 0 2
24554: PUSH
24555: LD_VAR 0 4
24559: MINUS
24560: ST_TO_ADDR
// if y - r < 0 then
24561: LD_VAR 0 3
24565: PUSH
24566: LD_VAR 0 4
24570: MINUS
24571: PUSH
24572: LD_INT 0
24574: LESS
24575: IFFALSE 24587
// min_y := 0 else
24577: LD_ADDR_VAR 0 8
24581: PUSH
24582: LD_INT 0
24584: ST_TO_ADDR
24585: GO 24603
// min_y := y - r ;
24587: LD_ADDR_VAR 0 8
24591: PUSH
24592: LD_VAR 0 3
24596: PUSH
24597: LD_VAR 0 4
24601: MINUS
24602: ST_TO_ADDR
// max_x := x + r ;
24603: LD_ADDR_VAR 0 9
24607: PUSH
24608: LD_VAR 0 2
24612: PUSH
24613: LD_VAR 0 4
24617: PLUS
24618: ST_TO_ADDR
// max_y := y + r ;
24619: LD_ADDR_VAR 0 10
24623: PUSH
24624: LD_VAR 0 3
24628: PUSH
24629: LD_VAR 0 4
24633: PLUS
24634: ST_TO_ADDR
// for _x = min_x to max_x do
24635: LD_ADDR_VAR 0 11
24639: PUSH
24640: DOUBLE
24641: LD_VAR 0 7
24645: DEC
24646: ST_TO_ADDR
24647: LD_VAR 0 9
24651: PUSH
24652: FOR_TO
24653: IFFALSE 24770
// for _y = min_y to max_y do
24655: LD_ADDR_VAR 0 12
24659: PUSH
24660: DOUBLE
24661: LD_VAR 0 8
24665: DEC
24666: ST_TO_ADDR
24667: LD_VAR 0 10
24671: PUSH
24672: FOR_TO
24673: IFFALSE 24766
// begin if not ValidHex ( _x , _y ) then
24675: LD_VAR 0 11
24679: PPUSH
24680: LD_VAR 0 12
24684: PPUSH
24685: CALL_OW 488
24689: NOT
24690: IFFALSE 24694
// continue ;
24692: GO 24672
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24694: LD_VAR 0 11
24698: PPUSH
24699: LD_VAR 0 12
24703: PPUSH
24704: CALL_OW 351
24708: PUSH
24709: LD_VAR 0 11
24713: PPUSH
24714: LD_VAR 0 12
24718: PPUSH
24719: CALL_OW 554
24723: AND
24724: IFFALSE 24764
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24726: LD_ADDR_VAR 0 13
24730: PUSH
24731: LD_VAR 0 13
24735: PPUSH
24736: LD_VAR 0 13
24740: PUSH
24741: LD_INT 1
24743: PLUS
24744: PPUSH
24745: LD_VAR 0 11
24749: PUSH
24750: LD_VAR 0 12
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PPUSH
24759: CALL_OW 2
24763: ST_TO_ADDR
// end ;
24764: GO 24672
24766: POP
24767: POP
24768: GO 24652
24770: POP
24771: POP
// if not list then
24772: LD_VAR 0 13
24776: NOT
24777: IFFALSE 24781
// exit ;
24779: GO 24852
// for i in list do
24781: LD_ADDR_VAR 0 6
24785: PUSH
24786: LD_VAR 0 13
24790: PUSH
24791: FOR_IN
24792: IFFALSE 24850
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24794: LD_VAR 0 1
24798: PPUSH
24799: LD_STRING M
24801: PUSH
24802: LD_VAR 0 6
24806: PUSH
24807: LD_INT 1
24809: ARRAY
24810: PUSH
24811: LD_VAR 0 6
24815: PUSH
24816: LD_INT 2
24818: ARRAY
24819: PUSH
24820: LD_INT 0
24822: PUSH
24823: LD_INT 0
24825: PUSH
24826: LD_INT 0
24828: PUSH
24829: LD_INT 0
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: PUSH
24841: EMPTY
24842: LIST
24843: PPUSH
24844: CALL_OW 447
24848: GO 24791
24850: POP
24851: POP
// end ;
24852: LD_VAR 0 5
24856: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24857: LD_EXP 108
24861: NOT
24862: IFFALSE 24912
24864: GO 24866
24866: DISABLE
// begin initHack := true ;
24867: LD_ADDR_EXP 108
24871: PUSH
24872: LD_INT 1
24874: ST_TO_ADDR
// hackTanks := [ ] ;
24875: LD_ADDR_EXP 109
24879: PUSH
24880: EMPTY
24881: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24882: LD_ADDR_EXP 110
24886: PUSH
24887: EMPTY
24888: ST_TO_ADDR
// hackLimit := 3 ;
24889: LD_ADDR_EXP 111
24893: PUSH
24894: LD_INT 3
24896: ST_TO_ADDR
// hackDist := 12 ;
24897: LD_ADDR_EXP 112
24901: PUSH
24902: LD_INT 12
24904: ST_TO_ADDR
// hackCounter := [ ] ;
24905: LD_ADDR_EXP 113
24909: PUSH
24910: EMPTY
24911: ST_TO_ADDR
// end ;
24912: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24913: LD_EXP 108
24917: PUSH
24918: LD_INT 34
24920: PUSH
24921: LD_EXP 31
24925: PUSH
24926: EMPTY
24927: LIST
24928: LIST
24929: PPUSH
24930: CALL_OW 69
24934: AND
24935: IFFALSE 25190
24937: GO 24939
24939: DISABLE
24940: LD_INT 0
24942: PPUSH
24943: PPUSH
// begin enable ;
24944: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24945: LD_ADDR_VAR 0 1
24949: PUSH
24950: LD_INT 34
24952: PUSH
24953: LD_EXP 31
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: PPUSH
24962: CALL_OW 69
24966: PUSH
24967: FOR_IN
24968: IFFALSE 25188
// begin if not i in hackTanks then
24970: LD_VAR 0 1
24974: PUSH
24975: LD_EXP 109
24979: IN
24980: NOT
24981: IFFALSE 25064
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24983: LD_ADDR_EXP 109
24987: PUSH
24988: LD_EXP 109
24992: PPUSH
24993: LD_EXP 109
24997: PUSH
24998: LD_INT 1
25000: PLUS
25001: PPUSH
25002: LD_VAR 0 1
25006: PPUSH
25007: CALL_OW 1
25011: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25012: LD_ADDR_EXP 110
25016: PUSH
25017: LD_EXP 110
25021: PPUSH
25022: LD_EXP 110
25026: PUSH
25027: LD_INT 1
25029: PLUS
25030: PPUSH
25031: EMPTY
25032: PPUSH
25033: CALL_OW 1
25037: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25038: LD_ADDR_EXP 113
25042: PUSH
25043: LD_EXP 113
25047: PPUSH
25048: LD_EXP 113
25052: PUSH
25053: LD_INT 1
25055: PLUS
25056: PPUSH
25057: EMPTY
25058: PPUSH
25059: CALL_OW 1
25063: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25064: LD_VAR 0 1
25068: PPUSH
25069: CALL_OW 302
25073: NOT
25074: IFFALSE 25087
// begin HackUnlinkAll ( i ) ;
25076: LD_VAR 0 1
25080: PPUSH
25081: CALL 25193 0 1
// continue ;
25085: GO 24967
// end ; HackCheckCapturedStatus ( i ) ;
25087: LD_VAR 0 1
25091: PPUSH
25092: CALL 25636 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25096: LD_ADDR_VAR 0 2
25100: PUSH
25101: LD_INT 81
25103: PUSH
25104: LD_VAR 0 1
25108: PPUSH
25109: CALL_OW 255
25113: PUSH
25114: EMPTY
25115: LIST
25116: LIST
25117: PUSH
25118: LD_INT 33
25120: PUSH
25121: LD_INT 3
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 91
25130: PUSH
25131: LD_VAR 0 1
25135: PUSH
25136: LD_EXP 112
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 50
25148: PUSH
25149: EMPTY
25150: LIST
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: PPUSH
25158: CALL_OW 69
25162: ST_TO_ADDR
// if not tmp then
25163: LD_VAR 0 2
25167: NOT
25168: IFFALSE 25172
// continue ;
25170: GO 24967
// HackLink ( i , tmp ) ;
25172: LD_VAR 0 1
25176: PPUSH
25177: LD_VAR 0 2
25181: PPUSH
25182: CALL 25329 0 2
// end ;
25186: GO 24967
25188: POP
25189: POP
// end ;
25190: PPOPN 2
25192: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25193: LD_INT 0
25195: PPUSH
25196: PPUSH
25197: PPUSH
// if not hack in hackTanks then
25198: LD_VAR 0 1
25202: PUSH
25203: LD_EXP 109
25207: IN
25208: NOT
25209: IFFALSE 25213
// exit ;
25211: GO 25324
// index := GetElementIndex ( hackTanks , hack ) ;
25213: LD_ADDR_VAR 0 4
25217: PUSH
25218: LD_EXP 109
25222: PPUSH
25223: LD_VAR 0 1
25227: PPUSH
25228: CALL 32951 0 2
25232: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25233: LD_EXP 110
25237: PUSH
25238: LD_VAR 0 4
25242: ARRAY
25243: IFFALSE 25324
// begin for i in hackTanksCaptured [ index ] do
25245: LD_ADDR_VAR 0 3
25249: PUSH
25250: LD_EXP 110
25254: PUSH
25255: LD_VAR 0 4
25259: ARRAY
25260: PUSH
25261: FOR_IN
25262: IFFALSE 25288
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25264: LD_VAR 0 3
25268: PUSH
25269: LD_INT 1
25271: ARRAY
25272: PPUSH
25273: LD_VAR 0 3
25277: PUSH
25278: LD_INT 2
25280: ARRAY
25281: PPUSH
25282: CALL_OW 235
25286: GO 25261
25288: POP
25289: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25290: LD_ADDR_EXP 110
25294: PUSH
25295: LD_EXP 110
25299: PPUSH
25300: LD_VAR 0 4
25304: PPUSH
25305: EMPTY
25306: PPUSH
25307: CALL_OW 1
25311: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25312: LD_VAR 0 1
25316: PPUSH
25317: LD_INT 0
25319: PPUSH
25320: CALL_OW 505
// end ; end ;
25324: LD_VAR 0 2
25328: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25329: LD_INT 0
25331: PPUSH
25332: PPUSH
25333: PPUSH
// if not hack in hackTanks or not vehicles then
25334: LD_VAR 0 1
25338: PUSH
25339: LD_EXP 109
25343: IN
25344: NOT
25345: PUSH
25346: LD_VAR 0 2
25350: NOT
25351: OR
25352: IFFALSE 25356
// exit ;
25354: GO 25631
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25356: LD_ADDR_VAR 0 2
25360: PUSH
25361: LD_VAR 0 1
25365: PPUSH
25366: LD_VAR 0 2
25370: PPUSH
25371: LD_INT 1
25373: PPUSH
25374: LD_INT 1
25376: PPUSH
25377: CALL 33601 0 4
25381: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25382: LD_ADDR_VAR 0 5
25386: PUSH
25387: LD_EXP 109
25391: PPUSH
25392: LD_VAR 0 1
25396: PPUSH
25397: CALL 32951 0 2
25401: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25402: LD_EXP 110
25406: PUSH
25407: LD_VAR 0 5
25411: ARRAY
25412: PUSH
25413: LD_EXP 111
25417: LESS
25418: IFFALSE 25607
// begin for i := 1 to vehicles do
25420: LD_ADDR_VAR 0 4
25424: PUSH
25425: DOUBLE
25426: LD_INT 1
25428: DEC
25429: ST_TO_ADDR
25430: LD_VAR 0 2
25434: PUSH
25435: FOR_TO
25436: IFFALSE 25605
// begin if hackTanksCaptured [ index ] = hackLimit then
25438: LD_EXP 110
25442: PUSH
25443: LD_VAR 0 5
25447: ARRAY
25448: PUSH
25449: LD_EXP 111
25453: EQUAL
25454: IFFALSE 25458
// break ;
25456: GO 25605
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25458: LD_ADDR_EXP 113
25462: PUSH
25463: LD_EXP 113
25467: PPUSH
25468: LD_VAR 0 5
25472: PPUSH
25473: LD_EXP 113
25477: PUSH
25478: LD_VAR 0 5
25482: ARRAY
25483: PUSH
25484: LD_INT 1
25486: PLUS
25487: PPUSH
25488: CALL_OW 1
25492: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25493: LD_ADDR_EXP 110
25497: PUSH
25498: LD_EXP 110
25502: PPUSH
25503: LD_VAR 0 5
25507: PUSH
25508: LD_EXP 110
25512: PUSH
25513: LD_VAR 0 5
25517: ARRAY
25518: PUSH
25519: LD_INT 1
25521: PLUS
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PPUSH
25527: LD_VAR 0 2
25531: PUSH
25532: LD_VAR 0 4
25536: ARRAY
25537: PUSH
25538: LD_VAR 0 2
25542: PUSH
25543: LD_VAR 0 4
25547: ARRAY
25548: PPUSH
25549: CALL_OW 255
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PPUSH
25558: CALL 33166 0 3
25562: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25563: LD_VAR 0 2
25567: PUSH
25568: LD_VAR 0 4
25572: ARRAY
25573: PPUSH
25574: LD_VAR 0 1
25578: PPUSH
25579: CALL_OW 255
25583: PPUSH
25584: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25588: LD_VAR 0 2
25592: PUSH
25593: LD_VAR 0 4
25597: ARRAY
25598: PPUSH
25599: CALL_OW 141
// end ;
25603: GO 25435
25605: POP
25606: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25607: LD_VAR 0 1
25611: PPUSH
25612: LD_EXP 110
25616: PUSH
25617: LD_VAR 0 5
25621: ARRAY
25622: PUSH
25623: LD_INT 0
25625: PLUS
25626: PPUSH
25627: CALL_OW 505
// end ;
25631: LD_VAR 0 3
25635: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25636: LD_INT 0
25638: PPUSH
25639: PPUSH
25640: PPUSH
25641: PPUSH
// if not hack in hackTanks then
25642: LD_VAR 0 1
25646: PUSH
25647: LD_EXP 109
25651: IN
25652: NOT
25653: IFFALSE 25657
// exit ;
25655: GO 25897
// index := GetElementIndex ( hackTanks , hack ) ;
25657: LD_ADDR_VAR 0 4
25661: PUSH
25662: LD_EXP 109
25666: PPUSH
25667: LD_VAR 0 1
25671: PPUSH
25672: CALL 32951 0 2
25676: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25677: LD_ADDR_VAR 0 3
25681: PUSH
25682: DOUBLE
25683: LD_EXP 110
25687: PUSH
25688: LD_VAR 0 4
25692: ARRAY
25693: INC
25694: ST_TO_ADDR
25695: LD_INT 1
25697: PUSH
25698: FOR_DOWNTO
25699: IFFALSE 25871
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25701: LD_ADDR_VAR 0 5
25705: PUSH
25706: LD_EXP 110
25710: PUSH
25711: LD_VAR 0 4
25715: ARRAY
25716: PUSH
25717: LD_VAR 0 3
25721: ARRAY
25722: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25723: LD_VAR 0 5
25727: PUSH
25728: LD_INT 1
25730: ARRAY
25731: PPUSH
25732: CALL_OW 302
25736: NOT
25737: PUSH
25738: LD_VAR 0 5
25742: PUSH
25743: LD_INT 1
25745: ARRAY
25746: PPUSH
25747: CALL_OW 255
25751: PUSH
25752: LD_VAR 0 1
25756: PPUSH
25757: CALL_OW 255
25761: NONEQUAL
25762: OR
25763: IFFALSE 25869
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25765: LD_VAR 0 5
25769: PUSH
25770: LD_INT 1
25772: ARRAY
25773: PPUSH
25774: CALL_OW 305
25778: PUSH
25779: LD_VAR 0 5
25783: PUSH
25784: LD_INT 1
25786: ARRAY
25787: PPUSH
25788: CALL_OW 255
25792: PUSH
25793: LD_VAR 0 1
25797: PPUSH
25798: CALL_OW 255
25802: EQUAL
25803: AND
25804: IFFALSE 25828
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25806: LD_VAR 0 5
25810: PUSH
25811: LD_INT 1
25813: ARRAY
25814: PPUSH
25815: LD_VAR 0 5
25819: PUSH
25820: LD_INT 2
25822: ARRAY
25823: PPUSH
25824: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25828: LD_ADDR_EXP 110
25832: PUSH
25833: LD_EXP 110
25837: PPUSH
25838: LD_VAR 0 4
25842: PPUSH
25843: LD_EXP 110
25847: PUSH
25848: LD_VAR 0 4
25852: ARRAY
25853: PPUSH
25854: LD_VAR 0 3
25858: PPUSH
25859: CALL_OW 3
25863: PPUSH
25864: CALL_OW 1
25868: ST_TO_ADDR
// end ; end ;
25869: GO 25698
25871: POP
25872: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25873: LD_VAR 0 1
25877: PPUSH
25878: LD_EXP 110
25882: PUSH
25883: LD_VAR 0 4
25887: ARRAY
25888: PUSH
25889: LD_INT 0
25891: PLUS
25892: PPUSH
25893: CALL_OW 505
// end ;
25897: LD_VAR 0 2
25901: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25902: LD_INT 0
25904: PPUSH
25905: PPUSH
25906: PPUSH
25907: PPUSH
// if not hack in hackTanks then
25908: LD_VAR 0 1
25912: PUSH
25913: LD_EXP 109
25917: IN
25918: NOT
25919: IFFALSE 25923
// exit ;
25921: GO 26008
// index := GetElementIndex ( hackTanks , hack ) ;
25923: LD_ADDR_VAR 0 5
25927: PUSH
25928: LD_EXP 109
25932: PPUSH
25933: LD_VAR 0 1
25937: PPUSH
25938: CALL 32951 0 2
25942: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25943: LD_ADDR_VAR 0 4
25947: PUSH
25948: DOUBLE
25949: LD_INT 1
25951: DEC
25952: ST_TO_ADDR
25953: LD_EXP 110
25957: PUSH
25958: LD_VAR 0 5
25962: ARRAY
25963: PUSH
25964: FOR_TO
25965: IFFALSE 26006
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25967: LD_EXP 110
25971: PUSH
25972: LD_VAR 0 5
25976: ARRAY
25977: PUSH
25978: LD_VAR 0 4
25982: ARRAY
25983: PUSH
25984: LD_INT 1
25986: ARRAY
25987: PUSH
25988: LD_VAR 0 2
25992: EQUAL
25993: IFFALSE 26004
// KillUnit ( vehicle ) ;
25995: LD_VAR 0 2
25999: PPUSH
26000: CALL_OW 66
26004: GO 25964
26006: POP
26007: POP
// end ;
26008: LD_VAR 0 3
26012: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26013: LD_EXP 114
26017: NOT
26018: IFFALSE 26053
26020: GO 26022
26022: DISABLE
// begin initMiner := true ;
26023: LD_ADDR_EXP 114
26027: PUSH
26028: LD_INT 1
26030: ST_TO_ADDR
// minersList := [ ] ;
26031: LD_ADDR_EXP 115
26035: PUSH
26036: EMPTY
26037: ST_TO_ADDR
// minerMinesList := [ ] ;
26038: LD_ADDR_EXP 116
26042: PUSH
26043: EMPTY
26044: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26045: LD_ADDR_EXP 117
26049: PUSH
26050: LD_INT 5
26052: ST_TO_ADDR
// end ;
26053: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26054: LD_EXP 114
26058: PUSH
26059: LD_INT 34
26061: PUSH
26062: LD_EXP 36
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PPUSH
26071: CALL_OW 69
26075: AND
26076: IFFALSE 26539
26078: GO 26080
26080: DISABLE
26081: LD_INT 0
26083: PPUSH
26084: PPUSH
26085: PPUSH
26086: PPUSH
// begin enable ;
26087: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26088: LD_ADDR_VAR 0 1
26092: PUSH
26093: LD_INT 34
26095: PUSH
26096: LD_EXP 36
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PPUSH
26105: CALL_OW 69
26109: PUSH
26110: FOR_IN
26111: IFFALSE 26183
// begin if not i in minersList then
26113: LD_VAR 0 1
26117: PUSH
26118: LD_EXP 115
26122: IN
26123: NOT
26124: IFFALSE 26181
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26126: LD_ADDR_EXP 115
26130: PUSH
26131: LD_EXP 115
26135: PPUSH
26136: LD_EXP 115
26140: PUSH
26141: LD_INT 1
26143: PLUS
26144: PPUSH
26145: LD_VAR 0 1
26149: PPUSH
26150: CALL_OW 1
26154: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26155: LD_ADDR_EXP 116
26159: PUSH
26160: LD_EXP 116
26164: PPUSH
26165: LD_EXP 116
26169: PUSH
26170: LD_INT 1
26172: PLUS
26173: PPUSH
26174: EMPTY
26175: PPUSH
26176: CALL_OW 1
26180: ST_TO_ADDR
// end end ;
26181: GO 26110
26183: POP
26184: POP
// for i := minerMinesList downto 1 do
26185: LD_ADDR_VAR 0 1
26189: PUSH
26190: DOUBLE
26191: LD_EXP 116
26195: INC
26196: ST_TO_ADDR
26197: LD_INT 1
26199: PUSH
26200: FOR_DOWNTO
26201: IFFALSE 26537
// begin if IsLive ( minersList [ i ] ) then
26203: LD_EXP 115
26207: PUSH
26208: LD_VAR 0 1
26212: ARRAY
26213: PPUSH
26214: CALL_OW 300
26218: IFFALSE 26246
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26220: LD_EXP 115
26224: PUSH
26225: LD_VAR 0 1
26229: ARRAY
26230: PPUSH
26231: LD_EXP 116
26235: PUSH
26236: LD_VAR 0 1
26240: ARRAY
26241: PPUSH
26242: CALL_OW 505
// if not minerMinesList [ i ] then
26246: LD_EXP 116
26250: PUSH
26251: LD_VAR 0 1
26255: ARRAY
26256: NOT
26257: IFFALSE 26261
// continue ;
26259: GO 26200
// for j := minerMinesList [ i ] downto 1 do
26261: LD_ADDR_VAR 0 2
26265: PUSH
26266: DOUBLE
26267: LD_EXP 116
26271: PUSH
26272: LD_VAR 0 1
26276: ARRAY
26277: INC
26278: ST_TO_ADDR
26279: LD_INT 1
26281: PUSH
26282: FOR_DOWNTO
26283: IFFALSE 26533
// begin side := GetSide ( minersList [ i ] ) ;
26285: LD_ADDR_VAR 0 3
26289: PUSH
26290: LD_EXP 115
26294: PUSH
26295: LD_VAR 0 1
26299: ARRAY
26300: PPUSH
26301: CALL_OW 255
26305: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26306: LD_ADDR_VAR 0 4
26310: PUSH
26311: LD_EXP 116
26315: PUSH
26316: LD_VAR 0 1
26320: ARRAY
26321: PUSH
26322: LD_VAR 0 2
26326: ARRAY
26327: PUSH
26328: LD_INT 1
26330: ARRAY
26331: PPUSH
26332: LD_EXP 116
26336: PUSH
26337: LD_VAR 0 1
26341: ARRAY
26342: PUSH
26343: LD_VAR 0 2
26347: ARRAY
26348: PUSH
26349: LD_INT 2
26351: ARRAY
26352: PPUSH
26353: CALL_OW 428
26357: ST_TO_ADDR
// if not tmp then
26358: LD_VAR 0 4
26362: NOT
26363: IFFALSE 26367
// continue ;
26365: GO 26282
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26367: LD_VAR 0 4
26371: PUSH
26372: LD_INT 81
26374: PUSH
26375: LD_VAR 0 3
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PPUSH
26384: CALL_OW 69
26388: IN
26389: PUSH
26390: LD_EXP 116
26394: PUSH
26395: LD_VAR 0 1
26399: ARRAY
26400: PUSH
26401: LD_VAR 0 2
26405: ARRAY
26406: PUSH
26407: LD_INT 1
26409: ARRAY
26410: PPUSH
26411: LD_EXP 116
26415: PUSH
26416: LD_VAR 0 1
26420: ARRAY
26421: PUSH
26422: LD_VAR 0 2
26426: ARRAY
26427: PUSH
26428: LD_INT 2
26430: ARRAY
26431: PPUSH
26432: CALL_OW 458
26436: AND
26437: IFFALSE 26531
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26439: LD_EXP 116
26443: PUSH
26444: LD_VAR 0 1
26448: ARRAY
26449: PUSH
26450: LD_VAR 0 2
26454: ARRAY
26455: PUSH
26456: LD_INT 1
26458: ARRAY
26459: PPUSH
26460: LD_EXP 116
26464: PUSH
26465: LD_VAR 0 1
26469: ARRAY
26470: PUSH
26471: LD_VAR 0 2
26475: ARRAY
26476: PUSH
26477: LD_INT 2
26479: ARRAY
26480: PPUSH
26481: LD_VAR 0 3
26485: PPUSH
26486: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26490: LD_ADDR_EXP 116
26494: PUSH
26495: LD_EXP 116
26499: PPUSH
26500: LD_VAR 0 1
26504: PPUSH
26505: LD_EXP 116
26509: PUSH
26510: LD_VAR 0 1
26514: ARRAY
26515: PPUSH
26516: LD_VAR 0 2
26520: PPUSH
26521: CALL_OW 3
26525: PPUSH
26526: CALL_OW 1
26530: ST_TO_ADDR
// end ; end ;
26531: GO 26282
26533: POP
26534: POP
// end ;
26535: GO 26200
26537: POP
26538: POP
// end ;
26539: PPOPN 4
26541: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26542: LD_INT 0
26544: PPUSH
26545: PPUSH
// result := false ;
26546: LD_ADDR_VAR 0 4
26550: PUSH
26551: LD_INT 0
26553: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26554: LD_VAR 0 1
26558: PPUSH
26559: CALL_OW 264
26563: PUSH
26564: LD_EXP 36
26568: EQUAL
26569: NOT
26570: IFFALSE 26574
// exit ;
26572: GO 26814
// index := GetElementIndex ( minersList , unit ) ;
26574: LD_ADDR_VAR 0 5
26578: PUSH
26579: LD_EXP 115
26583: PPUSH
26584: LD_VAR 0 1
26588: PPUSH
26589: CALL 32951 0 2
26593: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26594: LD_EXP 116
26598: PUSH
26599: LD_VAR 0 5
26603: ARRAY
26604: PUSH
26605: LD_EXP 117
26609: GREATEREQUAL
26610: IFFALSE 26614
// exit ;
26612: GO 26814
// ComMoveXY ( unit , x , y ) ;
26614: LD_VAR 0 1
26618: PPUSH
26619: LD_VAR 0 2
26623: PPUSH
26624: LD_VAR 0 3
26628: PPUSH
26629: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26633: LD_INT 35
26635: PPUSH
26636: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26640: LD_VAR 0 1
26644: PPUSH
26645: LD_VAR 0 2
26649: PPUSH
26650: LD_VAR 0 3
26654: PPUSH
26655: CALL 64237 0 3
26659: NOT
26660: PUSH
26661: LD_VAR 0 1
26665: PPUSH
26666: CALL_OW 314
26670: AND
26671: IFFALSE 26675
// exit ;
26673: GO 26814
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26675: LD_VAR 0 2
26679: PPUSH
26680: LD_VAR 0 3
26684: PPUSH
26685: CALL_OW 428
26689: PUSH
26690: LD_VAR 0 1
26694: EQUAL
26695: PUSH
26696: LD_VAR 0 1
26700: PPUSH
26701: CALL_OW 314
26705: NOT
26706: AND
26707: IFFALSE 26633
// PlaySoundXY ( x , y , PlantMine ) ;
26709: LD_VAR 0 2
26713: PPUSH
26714: LD_VAR 0 3
26718: PPUSH
26719: LD_STRING PlantMine
26721: PPUSH
26722: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26726: LD_VAR 0 2
26730: PPUSH
26731: LD_VAR 0 3
26735: PPUSH
26736: LD_VAR 0 1
26740: PPUSH
26741: CALL_OW 255
26745: PPUSH
26746: LD_INT 0
26748: PPUSH
26749: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26753: LD_ADDR_EXP 116
26757: PUSH
26758: LD_EXP 116
26762: PPUSH
26763: LD_VAR 0 5
26767: PUSH
26768: LD_EXP 116
26772: PUSH
26773: LD_VAR 0 5
26777: ARRAY
26778: PUSH
26779: LD_INT 1
26781: PLUS
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PPUSH
26787: LD_VAR 0 2
26791: PUSH
26792: LD_VAR 0 3
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PPUSH
26801: CALL 33166 0 3
26805: ST_TO_ADDR
// result := true ;
26806: LD_ADDR_VAR 0 4
26810: PUSH
26811: LD_INT 1
26813: ST_TO_ADDR
// end ;
26814: LD_VAR 0 4
26818: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26819: LD_INT 0
26821: PPUSH
26822: PPUSH
26823: PPUSH
// if not unit in minersList then
26824: LD_VAR 0 1
26828: PUSH
26829: LD_EXP 115
26833: IN
26834: NOT
26835: IFFALSE 26839
// exit ;
26837: GO 27231
// index := GetElementIndex ( minersList , unit ) ;
26839: LD_ADDR_VAR 0 6
26843: PUSH
26844: LD_EXP 115
26848: PPUSH
26849: LD_VAR 0 1
26853: PPUSH
26854: CALL 32951 0 2
26858: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26859: LD_ADDR_VAR 0 5
26863: PUSH
26864: DOUBLE
26865: LD_EXP 116
26869: PUSH
26870: LD_VAR 0 6
26874: ARRAY
26875: INC
26876: ST_TO_ADDR
26877: LD_INT 1
26879: PUSH
26880: FOR_DOWNTO
26881: IFFALSE 27042
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26883: LD_EXP 116
26887: PUSH
26888: LD_VAR 0 6
26892: ARRAY
26893: PUSH
26894: LD_VAR 0 5
26898: ARRAY
26899: PUSH
26900: LD_INT 1
26902: ARRAY
26903: PUSH
26904: LD_VAR 0 2
26908: EQUAL
26909: PUSH
26910: LD_EXP 116
26914: PUSH
26915: LD_VAR 0 6
26919: ARRAY
26920: PUSH
26921: LD_VAR 0 5
26925: ARRAY
26926: PUSH
26927: LD_INT 2
26929: ARRAY
26930: PUSH
26931: LD_VAR 0 3
26935: EQUAL
26936: AND
26937: IFFALSE 27040
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26939: LD_EXP 116
26943: PUSH
26944: LD_VAR 0 6
26948: ARRAY
26949: PUSH
26950: LD_VAR 0 5
26954: ARRAY
26955: PUSH
26956: LD_INT 1
26958: ARRAY
26959: PPUSH
26960: LD_EXP 116
26964: PUSH
26965: LD_VAR 0 6
26969: ARRAY
26970: PUSH
26971: LD_VAR 0 5
26975: ARRAY
26976: PUSH
26977: LD_INT 2
26979: ARRAY
26980: PPUSH
26981: LD_VAR 0 1
26985: PPUSH
26986: CALL_OW 255
26990: PPUSH
26991: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26995: LD_ADDR_EXP 116
26999: PUSH
27000: LD_EXP 116
27004: PPUSH
27005: LD_VAR 0 6
27009: PPUSH
27010: LD_EXP 116
27014: PUSH
27015: LD_VAR 0 6
27019: ARRAY
27020: PPUSH
27021: LD_VAR 0 5
27025: PPUSH
27026: CALL_OW 3
27030: PPUSH
27031: CALL_OW 1
27035: ST_TO_ADDR
// exit ;
27036: POP
27037: POP
27038: GO 27231
// end ; end ;
27040: GO 26880
27042: POP
27043: POP
// for i := minerMinesList [ index ] downto 1 do
27044: LD_ADDR_VAR 0 5
27048: PUSH
27049: DOUBLE
27050: LD_EXP 116
27054: PUSH
27055: LD_VAR 0 6
27059: ARRAY
27060: INC
27061: ST_TO_ADDR
27062: LD_INT 1
27064: PUSH
27065: FOR_DOWNTO
27066: IFFALSE 27229
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27068: LD_EXP 116
27072: PUSH
27073: LD_VAR 0 6
27077: ARRAY
27078: PUSH
27079: LD_VAR 0 5
27083: ARRAY
27084: PUSH
27085: LD_INT 1
27087: ARRAY
27088: PPUSH
27089: LD_EXP 116
27093: PUSH
27094: LD_VAR 0 6
27098: ARRAY
27099: PUSH
27100: LD_VAR 0 5
27104: ARRAY
27105: PUSH
27106: LD_INT 2
27108: ARRAY
27109: PPUSH
27110: LD_VAR 0 2
27114: PPUSH
27115: LD_VAR 0 3
27119: PPUSH
27120: CALL_OW 298
27124: PUSH
27125: LD_INT 6
27127: LESS
27128: IFFALSE 27227
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27130: LD_EXP 116
27134: PUSH
27135: LD_VAR 0 6
27139: ARRAY
27140: PUSH
27141: LD_VAR 0 5
27145: ARRAY
27146: PUSH
27147: LD_INT 1
27149: ARRAY
27150: PPUSH
27151: LD_EXP 116
27155: PUSH
27156: LD_VAR 0 6
27160: ARRAY
27161: PUSH
27162: LD_VAR 0 5
27166: ARRAY
27167: PUSH
27168: LD_INT 2
27170: ARRAY
27171: PPUSH
27172: LD_VAR 0 1
27176: PPUSH
27177: CALL_OW 255
27181: PPUSH
27182: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27186: LD_ADDR_EXP 116
27190: PUSH
27191: LD_EXP 116
27195: PPUSH
27196: LD_VAR 0 6
27200: PPUSH
27201: LD_EXP 116
27205: PUSH
27206: LD_VAR 0 6
27210: ARRAY
27211: PPUSH
27212: LD_VAR 0 5
27216: PPUSH
27217: CALL_OW 3
27221: PPUSH
27222: CALL_OW 1
27226: ST_TO_ADDR
// end ; end ;
27227: GO 27065
27229: POP
27230: POP
// end ;
27231: LD_VAR 0 4
27235: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27236: LD_INT 0
27238: PPUSH
27239: PPUSH
27240: PPUSH
27241: PPUSH
27242: PPUSH
27243: PPUSH
27244: PPUSH
27245: PPUSH
27246: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27247: LD_VAR 0 1
27251: PPUSH
27252: CALL_OW 264
27256: PUSH
27257: LD_EXP 36
27261: EQUAL
27262: NOT
27263: PUSH
27264: LD_VAR 0 1
27268: PUSH
27269: LD_EXP 115
27273: IN
27274: NOT
27275: OR
27276: IFFALSE 27280
// exit ;
27278: GO 27602
// index := GetElementIndex ( minersList , unit ) ;
27280: LD_ADDR_VAR 0 6
27284: PUSH
27285: LD_EXP 115
27289: PPUSH
27290: LD_VAR 0 1
27294: PPUSH
27295: CALL 32951 0 2
27299: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27300: LD_ADDR_VAR 0 8
27304: PUSH
27305: LD_EXP 117
27309: PUSH
27310: LD_EXP 116
27314: PUSH
27315: LD_VAR 0 6
27319: ARRAY
27320: MINUS
27321: ST_TO_ADDR
// if not minesFreeAmount then
27322: LD_VAR 0 8
27326: NOT
27327: IFFALSE 27331
// exit ;
27329: GO 27602
// tmp := [ ] ;
27331: LD_ADDR_VAR 0 7
27335: PUSH
27336: EMPTY
27337: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27338: LD_ADDR_VAR 0 5
27342: PUSH
27343: DOUBLE
27344: LD_INT 1
27346: DEC
27347: ST_TO_ADDR
27348: LD_VAR 0 8
27352: PUSH
27353: FOR_TO
27354: IFFALSE 27549
// begin _d := rand ( 0 , 5 ) ;
27356: LD_ADDR_VAR 0 11
27360: PUSH
27361: LD_INT 0
27363: PPUSH
27364: LD_INT 5
27366: PPUSH
27367: CALL_OW 12
27371: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27372: LD_ADDR_VAR 0 12
27376: PUSH
27377: LD_INT 2
27379: PPUSH
27380: LD_INT 6
27382: PPUSH
27383: CALL_OW 12
27387: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27388: LD_ADDR_VAR 0 9
27392: PUSH
27393: LD_VAR 0 2
27397: PPUSH
27398: LD_VAR 0 11
27402: PPUSH
27403: LD_VAR 0 12
27407: PPUSH
27408: CALL_OW 272
27412: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27413: LD_ADDR_VAR 0 10
27417: PUSH
27418: LD_VAR 0 3
27422: PPUSH
27423: LD_VAR 0 11
27427: PPUSH
27428: LD_VAR 0 12
27432: PPUSH
27433: CALL_OW 273
27437: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27438: LD_VAR 0 9
27442: PPUSH
27443: LD_VAR 0 10
27447: PPUSH
27448: CALL_OW 488
27452: PUSH
27453: LD_VAR 0 9
27457: PUSH
27458: LD_VAR 0 10
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PUSH
27467: LD_VAR 0 7
27471: IN
27472: NOT
27473: AND
27474: PUSH
27475: LD_VAR 0 9
27479: PPUSH
27480: LD_VAR 0 10
27484: PPUSH
27485: CALL_OW 458
27489: NOT
27490: AND
27491: IFFALSE 27533
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27493: LD_ADDR_VAR 0 7
27497: PUSH
27498: LD_VAR 0 7
27502: PPUSH
27503: LD_VAR 0 7
27507: PUSH
27508: LD_INT 1
27510: PLUS
27511: PPUSH
27512: LD_VAR 0 9
27516: PUSH
27517: LD_VAR 0 10
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PPUSH
27526: CALL_OW 1
27530: ST_TO_ADDR
27531: GO 27547
// i := i - 1 ;
27533: LD_ADDR_VAR 0 5
27537: PUSH
27538: LD_VAR 0 5
27542: PUSH
27543: LD_INT 1
27545: MINUS
27546: ST_TO_ADDR
// end ;
27547: GO 27353
27549: POP
27550: POP
// for i in tmp do
27551: LD_ADDR_VAR 0 5
27555: PUSH
27556: LD_VAR 0 7
27560: PUSH
27561: FOR_IN
27562: IFFALSE 27600
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27564: LD_VAR 0 1
27568: PPUSH
27569: LD_VAR 0 5
27573: PUSH
27574: LD_INT 1
27576: ARRAY
27577: PPUSH
27578: LD_VAR 0 5
27582: PUSH
27583: LD_INT 2
27585: ARRAY
27586: PPUSH
27587: CALL 26542 0 3
27591: NOT
27592: IFFALSE 27598
// exit ;
27594: POP
27595: POP
27596: GO 27602
27598: GO 27561
27600: POP
27601: POP
// end ;
27602: LD_VAR 0 4
27606: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27607: LD_INT 0
27609: PPUSH
27610: PPUSH
27611: PPUSH
27612: PPUSH
27613: PPUSH
27614: PPUSH
27615: PPUSH
// if not GetClass ( unit ) = class_sniper then
27616: LD_VAR 0 1
27620: PPUSH
27621: CALL_OW 257
27625: PUSH
27626: LD_INT 5
27628: EQUAL
27629: NOT
27630: IFFALSE 27634
// exit ;
27632: GO 28022
// dist := 8 ;
27634: LD_ADDR_VAR 0 5
27638: PUSH
27639: LD_INT 8
27641: ST_TO_ADDR
// viewRange := 12 ;
27642: LD_ADDR_VAR 0 7
27646: PUSH
27647: LD_INT 12
27649: ST_TO_ADDR
// side := GetSide ( unit ) ;
27650: LD_ADDR_VAR 0 6
27654: PUSH
27655: LD_VAR 0 1
27659: PPUSH
27660: CALL_OW 255
27664: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27665: LD_INT 61
27667: PPUSH
27668: LD_VAR 0 6
27672: PPUSH
27673: CALL_OW 321
27677: PUSH
27678: LD_INT 2
27680: EQUAL
27681: IFFALSE 27691
// viewRange := 16 ;
27683: LD_ADDR_VAR 0 7
27687: PUSH
27688: LD_INT 16
27690: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27691: LD_VAR 0 1
27695: PPUSH
27696: LD_VAR 0 2
27700: PPUSH
27701: LD_VAR 0 3
27705: PPUSH
27706: CALL_OW 297
27710: PUSH
27711: LD_VAR 0 5
27715: GREATER
27716: IFFALSE 27795
// begin ComMoveXY ( unit , x , y ) ;
27718: LD_VAR 0 1
27722: PPUSH
27723: LD_VAR 0 2
27727: PPUSH
27728: LD_VAR 0 3
27732: PPUSH
27733: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27737: LD_INT 35
27739: PPUSH
27740: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27744: LD_VAR 0 1
27748: PPUSH
27749: LD_VAR 0 2
27753: PPUSH
27754: LD_VAR 0 3
27758: PPUSH
27759: CALL 64237 0 3
27763: NOT
27764: IFFALSE 27768
// exit ;
27766: GO 28022
// until GetDistUnitXY ( unit , x , y ) < dist ;
27768: LD_VAR 0 1
27772: PPUSH
27773: LD_VAR 0 2
27777: PPUSH
27778: LD_VAR 0 3
27782: PPUSH
27783: CALL_OW 297
27787: PUSH
27788: LD_VAR 0 5
27792: LESS
27793: IFFALSE 27737
// end ; ComTurnXY ( unit , x , y ) ;
27795: LD_VAR 0 1
27799: PPUSH
27800: LD_VAR 0 2
27804: PPUSH
27805: LD_VAR 0 3
27809: PPUSH
27810: CALL_OW 118
// wait ( 5 ) ;
27814: LD_INT 5
27816: PPUSH
27817: CALL_OW 67
// _d := GetDir ( unit ) ;
27821: LD_ADDR_VAR 0 10
27825: PUSH
27826: LD_VAR 0 1
27830: PPUSH
27831: CALL_OW 254
27835: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27836: LD_ADDR_VAR 0 8
27840: PUSH
27841: LD_VAR 0 1
27845: PPUSH
27846: CALL_OW 250
27850: PPUSH
27851: LD_VAR 0 10
27855: PPUSH
27856: LD_VAR 0 5
27860: PPUSH
27861: CALL_OW 272
27865: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27866: LD_ADDR_VAR 0 9
27870: PUSH
27871: LD_VAR 0 1
27875: PPUSH
27876: CALL_OW 251
27880: PPUSH
27881: LD_VAR 0 10
27885: PPUSH
27886: LD_VAR 0 5
27890: PPUSH
27891: CALL_OW 273
27895: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27896: LD_VAR 0 8
27900: PPUSH
27901: LD_VAR 0 9
27905: PPUSH
27906: CALL_OW 488
27910: NOT
27911: IFFALSE 27915
// exit ;
27913: GO 28022
// ComAnimCustom ( unit , 1 ) ;
27915: LD_VAR 0 1
27919: PPUSH
27920: LD_INT 1
27922: PPUSH
27923: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27927: LD_VAR 0 8
27931: PPUSH
27932: LD_VAR 0 9
27936: PPUSH
27937: LD_VAR 0 6
27941: PPUSH
27942: LD_VAR 0 7
27946: PPUSH
27947: CALL_OW 330
// repeat wait ( 1 ) ;
27951: LD_INT 1
27953: PPUSH
27954: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27958: LD_VAR 0 1
27962: PPUSH
27963: CALL_OW 316
27967: PUSH
27968: LD_VAR 0 1
27972: PPUSH
27973: CALL_OW 314
27977: OR
27978: PUSH
27979: LD_VAR 0 1
27983: PPUSH
27984: CALL_OW 302
27988: NOT
27989: OR
27990: PUSH
27991: LD_VAR 0 1
27995: PPUSH
27996: CALL_OW 301
28000: OR
28001: IFFALSE 27951
// RemoveSeeing ( _x , _y , side ) ;
28003: LD_VAR 0 8
28007: PPUSH
28008: LD_VAR 0 9
28012: PPUSH
28013: LD_VAR 0 6
28017: PPUSH
28018: CALL_OW 331
// end ; end_of_file
28022: LD_VAR 0 4
28026: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28027: LD_INT 0
28029: PPUSH
28030: PPUSH
// if exist_mode then
28031: LD_VAR 0 2
28035: IFFALSE 28060
// unit := CreateCharacter ( prefix & ident ) else
28037: LD_ADDR_VAR 0 5
28041: PUSH
28042: LD_VAR 0 3
28046: PUSH
28047: LD_VAR 0 1
28051: STR
28052: PPUSH
28053: CALL_OW 34
28057: ST_TO_ADDR
28058: GO 28075
// unit := NewCharacter ( ident ) ;
28060: LD_ADDR_VAR 0 5
28064: PUSH
28065: LD_VAR 0 1
28069: PPUSH
28070: CALL_OW 25
28074: ST_TO_ADDR
// result := unit ;
28075: LD_ADDR_VAR 0 4
28079: PUSH
28080: LD_VAR 0 5
28084: ST_TO_ADDR
// end ;
28085: LD_VAR 0 4
28089: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28090: LD_INT 0
28092: PPUSH
28093: PPUSH
// if not side or not nation then
28094: LD_VAR 0 1
28098: NOT
28099: PUSH
28100: LD_VAR 0 2
28104: NOT
28105: OR
28106: IFFALSE 28110
// exit ;
28108: GO 28878
// case nation of nation_american :
28110: LD_VAR 0 2
28114: PUSH
28115: LD_INT 1
28117: DOUBLE
28118: EQUAL
28119: IFTRUE 28123
28121: GO 28337
28123: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28124: LD_ADDR_VAR 0 4
28128: PUSH
28129: LD_INT 35
28131: PUSH
28132: LD_INT 45
28134: PUSH
28135: LD_INT 46
28137: PUSH
28138: LD_INT 47
28140: PUSH
28141: LD_INT 82
28143: PUSH
28144: LD_INT 83
28146: PUSH
28147: LD_INT 84
28149: PUSH
28150: LD_INT 85
28152: PUSH
28153: LD_INT 86
28155: PUSH
28156: LD_INT 1
28158: PUSH
28159: LD_INT 2
28161: PUSH
28162: LD_INT 6
28164: PUSH
28165: LD_INT 15
28167: PUSH
28168: LD_INT 16
28170: PUSH
28171: LD_INT 7
28173: PUSH
28174: LD_INT 12
28176: PUSH
28177: LD_INT 13
28179: PUSH
28180: LD_INT 10
28182: PUSH
28183: LD_INT 14
28185: PUSH
28186: LD_INT 20
28188: PUSH
28189: LD_INT 21
28191: PUSH
28192: LD_INT 22
28194: PUSH
28195: LD_INT 25
28197: PUSH
28198: LD_INT 32
28200: PUSH
28201: LD_INT 27
28203: PUSH
28204: LD_INT 36
28206: PUSH
28207: LD_INT 69
28209: PUSH
28210: LD_INT 39
28212: PUSH
28213: LD_INT 34
28215: PUSH
28216: LD_INT 40
28218: PUSH
28219: LD_INT 48
28221: PUSH
28222: LD_INT 49
28224: PUSH
28225: LD_INT 50
28227: PUSH
28228: LD_INT 51
28230: PUSH
28231: LD_INT 52
28233: PUSH
28234: LD_INT 53
28236: PUSH
28237: LD_INT 54
28239: PUSH
28240: LD_INT 55
28242: PUSH
28243: LD_INT 56
28245: PUSH
28246: LD_INT 57
28248: PUSH
28249: LD_INT 58
28251: PUSH
28252: LD_INT 59
28254: PUSH
28255: LD_INT 60
28257: PUSH
28258: LD_INT 61
28260: PUSH
28261: LD_INT 62
28263: PUSH
28264: LD_INT 80
28266: PUSH
28267: LD_INT 82
28269: PUSH
28270: LD_INT 83
28272: PUSH
28273: LD_INT 84
28275: PUSH
28276: LD_INT 85
28278: PUSH
28279: LD_INT 86
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: LIST
28294: LIST
28295: LIST
28296: LIST
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: LIST
28302: LIST
28303: LIST
28304: LIST
28305: LIST
28306: LIST
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: LIST
28316: LIST
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: LIST
28322: LIST
28323: LIST
28324: LIST
28325: LIST
28326: LIST
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: ST_TO_ADDR
28335: GO 28802
28337: LD_INT 2
28339: DOUBLE
28340: EQUAL
28341: IFTRUE 28345
28343: GO 28571
28345: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28346: LD_ADDR_VAR 0 4
28350: PUSH
28351: LD_INT 35
28353: PUSH
28354: LD_INT 45
28356: PUSH
28357: LD_INT 46
28359: PUSH
28360: LD_INT 47
28362: PUSH
28363: LD_INT 82
28365: PUSH
28366: LD_INT 83
28368: PUSH
28369: LD_INT 84
28371: PUSH
28372: LD_INT 85
28374: PUSH
28375: LD_INT 87
28377: PUSH
28378: LD_INT 70
28380: PUSH
28381: LD_INT 1
28383: PUSH
28384: LD_INT 11
28386: PUSH
28387: LD_INT 3
28389: PUSH
28390: LD_INT 4
28392: PUSH
28393: LD_INT 5
28395: PUSH
28396: LD_INT 6
28398: PUSH
28399: LD_INT 15
28401: PUSH
28402: LD_INT 18
28404: PUSH
28405: LD_INT 7
28407: PUSH
28408: LD_INT 17
28410: PUSH
28411: LD_INT 8
28413: PUSH
28414: LD_INT 20
28416: PUSH
28417: LD_INT 21
28419: PUSH
28420: LD_INT 22
28422: PUSH
28423: LD_INT 72
28425: PUSH
28426: LD_INT 26
28428: PUSH
28429: LD_INT 69
28431: PUSH
28432: LD_INT 39
28434: PUSH
28435: LD_INT 40
28437: PUSH
28438: LD_INT 41
28440: PUSH
28441: LD_INT 42
28443: PUSH
28444: LD_INT 43
28446: PUSH
28447: LD_INT 48
28449: PUSH
28450: LD_INT 49
28452: PUSH
28453: LD_INT 50
28455: PUSH
28456: LD_INT 51
28458: PUSH
28459: LD_INT 52
28461: PUSH
28462: LD_INT 53
28464: PUSH
28465: LD_INT 54
28467: PUSH
28468: LD_INT 55
28470: PUSH
28471: LD_INT 56
28473: PUSH
28474: LD_INT 60
28476: PUSH
28477: LD_INT 61
28479: PUSH
28480: LD_INT 62
28482: PUSH
28483: LD_INT 66
28485: PUSH
28486: LD_INT 67
28488: PUSH
28489: LD_INT 68
28491: PUSH
28492: LD_INT 81
28494: PUSH
28495: LD_INT 82
28497: PUSH
28498: LD_INT 83
28500: PUSH
28501: LD_INT 84
28503: PUSH
28504: LD_INT 85
28506: PUSH
28507: LD_INT 87
28509: PUSH
28510: LD_INT 88
28512: PUSH
28513: EMPTY
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: ST_TO_ADDR
28569: GO 28802
28571: LD_INT 3
28573: DOUBLE
28574: EQUAL
28575: IFTRUE 28579
28577: GO 28801
28579: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28580: LD_ADDR_VAR 0 4
28584: PUSH
28585: LD_INT 46
28587: PUSH
28588: LD_INT 47
28590: PUSH
28591: LD_INT 1
28593: PUSH
28594: LD_INT 2
28596: PUSH
28597: LD_INT 82
28599: PUSH
28600: LD_INT 83
28602: PUSH
28603: LD_INT 84
28605: PUSH
28606: LD_INT 85
28608: PUSH
28609: LD_INT 86
28611: PUSH
28612: LD_INT 11
28614: PUSH
28615: LD_INT 9
28617: PUSH
28618: LD_INT 20
28620: PUSH
28621: LD_INT 19
28623: PUSH
28624: LD_INT 21
28626: PUSH
28627: LD_INT 24
28629: PUSH
28630: LD_INT 22
28632: PUSH
28633: LD_INT 25
28635: PUSH
28636: LD_INT 28
28638: PUSH
28639: LD_INT 29
28641: PUSH
28642: LD_INT 30
28644: PUSH
28645: LD_INT 31
28647: PUSH
28648: LD_INT 37
28650: PUSH
28651: LD_INT 38
28653: PUSH
28654: LD_INT 32
28656: PUSH
28657: LD_INT 27
28659: PUSH
28660: LD_INT 33
28662: PUSH
28663: LD_INT 69
28665: PUSH
28666: LD_INT 39
28668: PUSH
28669: LD_INT 34
28671: PUSH
28672: LD_INT 40
28674: PUSH
28675: LD_INT 71
28677: PUSH
28678: LD_INT 23
28680: PUSH
28681: LD_INT 44
28683: PUSH
28684: LD_INT 48
28686: PUSH
28687: LD_INT 49
28689: PUSH
28690: LD_INT 50
28692: PUSH
28693: LD_INT 51
28695: PUSH
28696: LD_INT 52
28698: PUSH
28699: LD_INT 53
28701: PUSH
28702: LD_INT 54
28704: PUSH
28705: LD_INT 55
28707: PUSH
28708: LD_INT 56
28710: PUSH
28711: LD_INT 57
28713: PUSH
28714: LD_INT 58
28716: PUSH
28717: LD_INT 59
28719: PUSH
28720: LD_INT 63
28722: PUSH
28723: LD_INT 64
28725: PUSH
28726: LD_INT 65
28728: PUSH
28729: LD_INT 82
28731: PUSH
28732: LD_INT 83
28734: PUSH
28735: LD_INT 84
28737: PUSH
28738: LD_INT 85
28740: PUSH
28741: LD_INT 86
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: ST_TO_ADDR
28799: GO 28802
28801: POP
// if state > - 1 and state < 3 then
28802: LD_VAR 0 3
28806: PUSH
28807: LD_INT 1
28809: NEG
28810: GREATER
28811: PUSH
28812: LD_VAR 0 3
28816: PUSH
28817: LD_INT 3
28819: LESS
28820: AND
28821: IFFALSE 28878
// for i in result do
28823: LD_ADDR_VAR 0 5
28827: PUSH
28828: LD_VAR 0 4
28832: PUSH
28833: FOR_IN
28834: IFFALSE 28876
// if GetTech ( i , side ) <> state then
28836: LD_VAR 0 5
28840: PPUSH
28841: LD_VAR 0 1
28845: PPUSH
28846: CALL_OW 321
28850: PUSH
28851: LD_VAR 0 3
28855: NONEQUAL
28856: IFFALSE 28874
// result := result diff i ;
28858: LD_ADDR_VAR 0 4
28862: PUSH
28863: LD_VAR 0 4
28867: PUSH
28868: LD_VAR 0 5
28872: DIFF
28873: ST_TO_ADDR
28874: GO 28833
28876: POP
28877: POP
// end ;
28878: LD_VAR 0 4
28882: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28883: LD_INT 0
28885: PPUSH
28886: PPUSH
28887: PPUSH
// result := true ;
28888: LD_ADDR_VAR 0 3
28892: PUSH
28893: LD_INT 1
28895: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28896: LD_ADDR_VAR 0 5
28900: PUSH
28901: LD_VAR 0 2
28905: PPUSH
28906: CALL_OW 480
28910: ST_TO_ADDR
// if not tmp then
28911: LD_VAR 0 5
28915: NOT
28916: IFFALSE 28920
// exit ;
28918: GO 28969
// for i in tmp do
28920: LD_ADDR_VAR 0 4
28924: PUSH
28925: LD_VAR 0 5
28929: PUSH
28930: FOR_IN
28931: IFFALSE 28967
// if GetTech ( i , side ) <> state_researched then
28933: LD_VAR 0 4
28937: PPUSH
28938: LD_VAR 0 1
28942: PPUSH
28943: CALL_OW 321
28947: PUSH
28948: LD_INT 2
28950: NONEQUAL
28951: IFFALSE 28965
// begin result := false ;
28953: LD_ADDR_VAR 0 3
28957: PUSH
28958: LD_INT 0
28960: ST_TO_ADDR
// exit ;
28961: POP
28962: POP
28963: GO 28969
// end ;
28965: GO 28930
28967: POP
28968: POP
// end ;
28969: LD_VAR 0 3
28973: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28974: LD_INT 0
28976: PPUSH
28977: PPUSH
28978: PPUSH
28979: PPUSH
28980: PPUSH
28981: PPUSH
28982: PPUSH
28983: PPUSH
28984: PPUSH
28985: PPUSH
28986: PPUSH
28987: PPUSH
28988: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28989: LD_VAR 0 1
28993: NOT
28994: PUSH
28995: LD_VAR 0 1
28999: PPUSH
29000: CALL_OW 257
29004: PUSH
29005: LD_INT 9
29007: NONEQUAL
29008: OR
29009: IFFALSE 29013
// exit ;
29011: GO 29586
// side := GetSide ( unit ) ;
29013: LD_ADDR_VAR 0 9
29017: PUSH
29018: LD_VAR 0 1
29022: PPUSH
29023: CALL_OW 255
29027: ST_TO_ADDR
// tech_space := tech_spacanom ;
29028: LD_ADDR_VAR 0 12
29032: PUSH
29033: LD_INT 29
29035: ST_TO_ADDR
// tech_time := tech_taurad ;
29036: LD_ADDR_VAR 0 13
29040: PUSH
29041: LD_INT 28
29043: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29044: LD_ADDR_VAR 0 11
29048: PUSH
29049: LD_VAR 0 1
29053: PPUSH
29054: CALL_OW 310
29058: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29059: LD_VAR 0 11
29063: PPUSH
29064: CALL_OW 247
29068: PUSH
29069: LD_INT 2
29071: EQUAL
29072: IFFALSE 29076
// exit ;
29074: GO 29586
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29076: LD_ADDR_VAR 0 8
29080: PUSH
29081: LD_INT 81
29083: PUSH
29084: LD_VAR 0 9
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 3
29095: PUSH
29096: LD_INT 21
29098: PUSH
29099: LD_INT 3
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PPUSH
29114: CALL_OW 69
29118: ST_TO_ADDR
// if not tmp then
29119: LD_VAR 0 8
29123: NOT
29124: IFFALSE 29128
// exit ;
29126: GO 29586
// if in_unit then
29128: LD_VAR 0 11
29132: IFFALSE 29156
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29134: LD_ADDR_VAR 0 10
29138: PUSH
29139: LD_VAR 0 8
29143: PPUSH
29144: LD_VAR 0 11
29148: PPUSH
29149: CALL_OW 74
29153: ST_TO_ADDR
29154: GO 29176
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29156: LD_ADDR_VAR 0 10
29160: PUSH
29161: LD_VAR 0 8
29165: PPUSH
29166: LD_VAR 0 1
29170: PPUSH
29171: CALL_OW 74
29175: ST_TO_ADDR
// if not enemy then
29176: LD_VAR 0 10
29180: NOT
29181: IFFALSE 29185
// exit ;
29183: GO 29586
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29185: LD_VAR 0 11
29189: PUSH
29190: LD_VAR 0 11
29194: PPUSH
29195: LD_VAR 0 10
29199: PPUSH
29200: CALL_OW 296
29204: PUSH
29205: LD_INT 13
29207: GREATER
29208: AND
29209: PUSH
29210: LD_VAR 0 1
29214: PPUSH
29215: LD_VAR 0 10
29219: PPUSH
29220: CALL_OW 296
29224: PUSH
29225: LD_INT 12
29227: GREATER
29228: OR
29229: IFFALSE 29233
// exit ;
29231: GO 29586
// missile := [ 1 ] ;
29233: LD_ADDR_VAR 0 14
29237: PUSH
29238: LD_INT 1
29240: PUSH
29241: EMPTY
29242: LIST
29243: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29244: LD_VAR 0 9
29248: PPUSH
29249: LD_VAR 0 12
29253: PPUSH
29254: CALL_OW 325
29258: IFFALSE 29287
// missile := Replace ( missile , missile + 1 , 2 ) ;
29260: LD_ADDR_VAR 0 14
29264: PUSH
29265: LD_VAR 0 14
29269: PPUSH
29270: LD_VAR 0 14
29274: PUSH
29275: LD_INT 1
29277: PLUS
29278: PPUSH
29279: LD_INT 2
29281: PPUSH
29282: CALL_OW 1
29286: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29287: LD_VAR 0 9
29291: PPUSH
29292: LD_VAR 0 13
29296: PPUSH
29297: CALL_OW 325
29301: PUSH
29302: LD_VAR 0 10
29306: PPUSH
29307: CALL_OW 255
29311: PPUSH
29312: LD_VAR 0 13
29316: PPUSH
29317: CALL_OW 325
29321: NOT
29322: AND
29323: IFFALSE 29352
// missile := Replace ( missile , missile + 1 , 3 ) ;
29325: LD_ADDR_VAR 0 14
29329: PUSH
29330: LD_VAR 0 14
29334: PPUSH
29335: LD_VAR 0 14
29339: PUSH
29340: LD_INT 1
29342: PLUS
29343: PPUSH
29344: LD_INT 3
29346: PPUSH
29347: CALL_OW 1
29351: ST_TO_ADDR
// if missile < 2 then
29352: LD_VAR 0 14
29356: PUSH
29357: LD_INT 2
29359: LESS
29360: IFFALSE 29364
// exit ;
29362: GO 29586
// x := GetX ( enemy ) ;
29364: LD_ADDR_VAR 0 4
29368: PUSH
29369: LD_VAR 0 10
29373: PPUSH
29374: CALL_OW 250
29378: ST_TO_ADDR
// y := GetY ( enemy ) ;
29379: LD_ADDR_VAR 0 5
29383: PUSH
29384: LD_VAR 0 10
29388: PPUSH
29389: CALL_OW 251
29393: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29394: LD_ADDR_VAR 0 6
29398: PUSH
29399: LD_VAR 0 4
29403: PUSH
29404: LD_INT 1
29406: NEG
29407: PPUSH
29408: LD_INT 1
29410: PPUSH
29411: CALL_OW 12
29415: PLUS
29416: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29417: LD_ADDR_VAR 0 7
29421: PUSH
29422: LD_VAR 0 5
29426: PUSH
29427: LD_INT 1
29429: NEG
29430: PPUSH
29431: LD_INT 1
29433: PPUSH
29434: CALL_OW 12
29438: PLUS
29439: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29440: LD_VAR 0 6
29444: PPUSH
29445: LD_VAR 0 7
29449: PPUSH
29450: CALL_OW 488
29454: NOT
29455: IFFALSE 29477
// begin _x := x ;
29457: LD_ADDR_VAR 0 6
29461: PUSH
29462: LD_VAR 0 4
29466: ST_TO_ADDR
// _y := y ;
29467: LD_ADDR_VAR 0 7
29471: PUSH
29472: LD_VAR 0 5
29476: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29477: LD_ADDR_VAR 0 3
29481: PUSH
29482: LD_INT 1
29484: PPUSH
29485: LD_VAR 0 14
29489: PPUSH
29490: CALL_OW 12
29494: ST_TO_ADDR
// case i of 1 :
29495: LD_VAR 0 3
29499: PUSH
29500: LD_INT 1
29502: DOUBLE
29503: EQUAL
29504: IFTRUE 29508
29506: GO 29525
29508: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29509: LD_VAR 0 1
29513: PPUSH
29514: LD_VAR 0 10
29518: PPUSH
29519: CALL_OW 115
29523: GO 29586
29525: LD_INT 2
29527: DOUBLE
29528: EQUAL
29529: IFTRUE 29533
29531: GO 29555
29533: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29534: LD_VAR 0 1
29538: PPUSH
29539: LD_VAR 0 6
29543: PPUSH
29544: LD_VAR 0 7
29548: PPUSH
29549: CALL_OW 153
29553: GO 29586
29555: LD_INT 3
29557: DOUBLE
29558: EQUAL
29559: IFTRUE 29563
29561: GO 29585
29563: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29564: LD_VAR 0 1
29568: PPUSH
29569: LD_VAR 0 6
29573: PPUSH
29574: LD_VAR 0 7
29578: PPUSH
29579: CALL_OW 154
29583: GO 29586
29585: POP
// end ;
29586: LD_VAR 0 2
29590: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29591: LD_INT 0
29593: PPUSH
29594: PPUSH
29595: PPUSH
29596: PPUSH
29597: PPUSH
29598: PPUSH
// if not unit or not building then
29599: LD_VAR 0 1
29603: NOT
29604: PUSH
29605: LD_VAR 0 2
29609: NOT
29610: OR
29611: IFFALSE 29615
// exit ;
29613: GO 29773
// x := GetX ( building ) ;
29615: LD_ADDR_VAR 0 5
29619: PUSH
29620: LD_VAR 0 2
29624: PPUSH
29625: CALL_OW 250
29629: ST_TO_ADDR
// y := GetY ( building ) ;
29630: LD_ADDR_VAR 0 6
29634: PUSH
29635: LD_VAR 0 2
29639: PPUSH
29640: CALL_OW 251
29644: ST_TO_ADDR
// for i = 0 to 5 do
29645: LD_ADDR_VAR 0 4
29649: PUSH
29650: DOUBLE
29651: LD_INT 0
29653: DEC
29654: ST_TO_ADDR
29655: LD_INT 5
29657: PUSH
29658: FOR_TO
29659: IFFALSE 29771
// begin _x := ShiftX ( x , i , 3 ) ;
29661: LD_ADDR_VAR 0 7
29665: PUSH
29666: LD_VAR 0 5
29670: PPUSH
29671: LD_VAR 0 4
29675: PPUSH
29676: LD_INT 3
29678: PPUSH
29679: CALL_OW 272
29683: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29684: LD_ADDR_VAR 0 8
29688: PUSH
29689: LD_VAR 0 6
29693: PPUSH
29694: LD_VAR 0 4
29698: PPUSH
29699: LD_INT 3
29701: PPUSH
29702: CALL_OW 273
29706: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29707: LD_VAR 0 7
29711: PPUSH
29712: LD_VAR 0 8
29716: PPUSH
29717: CALL_OW 488
29721: NOT
29722: IFFALSE 29726
// continue ;
29724: GO 29658
// if HexInfo ( _x , _y ) = 0 then
29726: LD_VAR 0 7
29730: PPUSH
29731: LD_VAR 0 8
29735: PPUSH
29736: CALL_OW 428
29740: PUSH
29741: LD_INT 0
29743: EQUAL
29744: IFFALSE 29769
// begin ComMoveXY ( unit , _x , _y ) ;
29746: LD_VAR 0 1
29750: PPUSH
29751: LD_VAR 0 7
29755: PPUSH
29756: LD_VAR 0 8
29760: PPUSH
29761: CALL_OW 111
// exit ;
29765: POP
29766: POP
29767: GO 29773
// end ; end ;
29769: GO 29658
29771: POP
29772: POP
// end ;
29773: LD_VAR 0 3
29777: RET
// export function ScanBase ( side , base_area ) ; begin
29778: LD_INT 0
29780: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29781: LD_ADDR_VAR 0 3
29785: PUSH
29786: LD_VAR 0 2
29790: PPUSH
29791: LD_INT 81
29793: PUSH
29794: LD_VAR 0 1
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: PPUSH
29803: CALL_OW 70
29807: ST_TO_ADDR
// end ;
29808: LD_VAR 0 3
29812: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29813: LD_INT 0
29815: PPUSH
29816: PPUSH
29817: PPUSH
29818: PPUSH
// result := false ;
29819: LD_ADDR_VAR 0 2
29823: PUSH
29824: LD_INT 0
29826: ST_TO_ADDR
// side := GetSide ( unit ) ;
29827: LD_ADDR_VAR 0 3
29831: PUSH
29832: LD_VAR 0 1
29836: PPUSH
29837: CALL_OW 255
29841: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29842: LD_ADDR_VAR 0 4
29846: PUSH
29847: LD_VAR 0 1
29851: PPUSH
29852: CALL_OW 248
29856: ST_TO_ADDR
// case nat of 1 :
29857: LD_VAR 0 4
29861: PUSH
29862: LD_INT 1
29864: DOUBLE
29865: EQUAL
29866: IFTRUE 29870
29868: GO 29881
29870: POP
// tech := tech_lassight ; 2 :
29871: LD_ADDR_VAR 0 5
29875: PUSH
29876: LD_INT 12
29878: ST_TO_ADDR
29879: GO 29920
29881: LD_INT 2
29883: DOUBLE
29884: EQUAL
29885: IFTRUE 29889
29887: GO 29900
29889: POP
// tech := tech_mortar ; 3 :
29890: LD_ADDR_VAR 0 5
29894: PUSH
29895: LD_INT 41
29897: ST_TO_ADDR
29898: GO 29920
29900: LD_INT 3
29902: DOUBLE
29903: EQUAL
29904: IFTRUE 29908
29906: GO 29919
29908: POP
// tech := tech_bazooka ; end ;
29909: LD_ADDR_VAR 0 5
29913: PUSH
29914: LD_INT 44
29916: ST_TO_ADDR
29917: GO 29920
29919: POP
// if Researched ( side , tech ) then
29920: LD_VAR 0 3
29924: PPUSH
29925: LD_VAR 0 5
29929: PPUSH
29930: CALL_OW 325
29934: IFFALSE 29961
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29936: LD_ADDR_VAR 0 2
29940: PUSH
29941: LD_INT 5
29943: PUSH
29944: LD_INT 8
29946: PUSH
29947: LD_INT 9
29949: PUSH
29950: EMPTY
29951: LIST
29952: LIST
29953: LIST
29954: PUSH
29955: LD_VAR 0 4
29959: ARRAY
29960: ST_TO_ADDR
// end ;
29961: LD_VAR 0 2
29965: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29966: LD_INT 0
29968: PPUSH
29969: PPUSH
29970: PPUSH
// if not mines then
29971: LD_VAR 0 2
29975: NOT
29976: IFFALSE 29980
// exit ;
29978: GO 30124
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29980: LD_ADDR_VAR 0 5
29984: PUSH
29985: LD_INT 81
29987: PUSH
29988: LD_VAR 0 1
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 3
29999: PUSH
30000: LD_INT 21
30002: PUSH
30003: LD_INT 3
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: EMPTY
30015: LIST
30016: LIST
30017: PPUSH
30018: CALL_OW 69
30022: ST_TO_ADDR
// for i in mines do
30023: LD_ADDR_VAR 0 4
30027: PUSH
30028: LD_VAR 0 2
30032: PUSH
30033: FOR_IN
30034: IFFALSE 30122
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30036: LD_VAR 0 4
30040: PUSH
30041: LD_INT 1
30043: ARRAY
30044: PPUSH
30045: LD_VAR 0 4
30049: PUSH
30050: LD_INT 2
30052: ARRAY
30053: PPUSH
30054: CALL_OW 458
30058: NOT
30059: IFFALSE 30063
// continue ;
30061: GO 30033
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30063: LD_VAR 0 4
30067: PUSH
30068: LD_INT 1
30070: ARRAY
30071: PPUSH
30072: LD_VAR 0 4
30076: PUSH
30077: LD_INT 2
30079: ARRAY
30080: PPUSH
30081: CALL_OW 428
30085: PUSH
30086: LD_VAR 0 5
30090: IN
30091: IFFALSE 30120
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30093: LD_VAR 0 4
30097: PUSH
30098: LD_INT 1
30100: ARRAY
30101: PPUSH
30102: LD_VAR 0 4
30106: PUSH
30107: LD_INT 2
30109: ARRAY
30110: PPUSH
30111: LD_VAR 0 1
30115: PPUSH
30116: CALL_OW 456
// end ;
30120: GO 30033
30122: POP
30123: POP
// end ;
30124: LD_VAR 0 3
30128: RET
// export function Count ( array ) ; var i ; begin
30129: LD_INT 0
30131: PPUSH
30132: PPUSH
// result := 0 ;
30133: LD_ADDR_VAR 0 2
30137: PUSH
30138: LD_INT 0
30140: ST_TO_ADDR
// for i in array do
30141: LD_ADDR_VAR 0 3
30145: PUSH
30146: LD_VAR 0 1
30150: PUSH
30151: FOR_IN
30152: IFFALSE 30176
// if i then
30154: LD_VAR 0 3
30158: IFFALSE 30174
// result := result + 1 ;
30160: LD_ADDR_VAR 0 2
30164: PUSH
30165: LD_VAR 0 2
30169: PUSH
30170: LD_INT 1
30172: PLUS
30173: ST_TO_ADDR
30174: GO 30151
30176: POP
30177: POP
// end ;
30178: LD_VAR 0 2
30182: RET
// export function IsEmpty ( building ) ; begin
30183: LD_INT 0
30185: PPUSH
// if not building then
30186: LD_VAR 0 1
30190: NOT
30191: IFFALSE 30195
// exit ;
30193: GO 30238
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30195: LD_ADDR_VAR 0 2
30199: PUSH
30200: LD_VAR 0 1
30204: PUSH
30205: LD_INT 22
30207: PUSH
30208: LD_VAR 0 1
30212: PPUSH
30213: CALL_OW 255
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 58
30224: PUSH
30225: EMPTY
30226: LIST
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PPUSH
30232: CALL_OW 69
30236: IN
30237: ST_TO_ADDR
// end ;
30238: LD_VAR 0 2
30242: RET
// export function IsNotFull ( building ) ; var places ; begin
30243: LD_INT 0
30245: PPUSH
30246: PPUSH
// if not building then
30247: LD_VAR 0 1
30251: NOT
30252: IFFALSE 30256
// exit ;
30254: GO 30427
// result := false ;
30256: LD_ADDR_VAR 0 2
30260: PUSH
30261: LD_INT 0
30263: ST_TO_ADDR
// places := 0 ;
30264: LD_ADDR_VAR 0 3
30268: PUSH
30269: LD_INT 0
30271: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
30272: LD_VAR 0 1
30276: PPUSH
30277: CALL_OW 266
30281: PUSH
30282: LD_INT 0
30284: DOUBLE
30285: EQUAL
30286: IFTRUE 30344
30288: LD_INT 1
30290: DOUBLE
30291: EQUAL
30292: IFTRUE 30344
30294: LD_INT 6
30296: DOUBLE
30297: EQUAL
30298: IFTRUE 30344
30300: LD_INT 7
30302: DOUBLE
30303: EQUAL
30304: IFTRUE 30344
30306: LD_INT 8
30308: DOUBLE
30309: EQUAL
30310: IFTRUE 30344
30312: LD_INT 4
30314: DOUBLE
30315: EQUAL
30316: IFTRUE 30344
30318: LD_INT 5
30320: DOUBLE
30321: EQUAL
30322: IFTRUE 30344
30324: LD_INT 2
30326: DOUBLE
30327: EQUAL
30328: IFTRUE 30344
30330: LD_INT 3
30332: DOUBLE
30333: EQUAL
30334: IFTRUE 30344
30336: LD_INT 35
30338: DOUBLE
30339: EQUAL
30340: IFTRUE 30344
30342: GO 30355
30344: POP
// places := 6 ; b_bunker , b_breastwork :
30345: LD_ADDR_VAR 0 3
30349: PUSH
30350: LD_INT 6
30352: ST_TO_ADDR
30353: GO 30400
30355: LD_INT 32
30357: DOUBLE
30358: EQUAL
30359: IFTRUE 30369
30361: LD_INT 31
30363: DOUBLE
30364: EQUAL
30365: IFTRUE 30369
30367: GO 30380
30369: POP
// places := 1 ; b_control_tower :
30370: LD_ADDR_VAR 0 3
30374: PUSH
30375: LD_INT 1
30377: ST_TO_ADDR
30378: GO 30400
30380: LD_INT 36
30382: DOUBLE
30383: EQUAL
30384: IFTRUE 30388
30386: GO 30399
30388: POP
// places := 3 ; end ;
30389: LD_ADDR_VAR 0 3
30393: PUSH
30394: LD_INT 3
30396: ST_TO_ADDR
30397: GO 30400
30399: POP
// if places then
30400: LD_VAR 0 3
30404: IFFALSE 30427
// result := UnitsInside ( building ) < places ;
30406: LD_ADDR_VAR 0 2
30410: PUSH
30411: LD_VAR 0 1
30415: PPUSH
30416: CALL_OW 313
30420: PUSH
30421: LD_VAR 0 3
30425: LESS
30426: ST_TO_ADDR
// end ;
30427: LD_VAR 0 2
30431: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30432: LD_INT 0
30434: PPUSH
30435: PPUSH
30436: PPUSH
30437: PPUSH
// tmp := [ ] ;
30438: LD_ADDR_VAR 0 3
30442: PUSH
30443: EMPTY
30444: ST_TO_ADDR
// list := [ ] ;
30445: LD_ADDR_VAR 0 5
30449: PUSH
30450: EMPTY
30451: ST_TO_ADDR
// for i = 16 to 25 do
30452: LD_ADDR_VAR 0 4
30456: PUSH
30457: DOUBLE
30458: LD_INT 16
30460: DEC
30461: ST_TO_ADDR
30462: LD_INT 25
30464: PUSH
30465: FOR_TO
30466: IFFALSE 30539
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30468: LD_ADDR_VAR 0 3
30472: PUSH
30473: LD_VAR 0 3
30477: PUSH
30478: LD_INT 22
30480: PUSH
30481: LD_VAR 0 1
30485: PPUSH
30486: CALL_OW 255
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 91
30497: PUSH
30498: LD_VAR 0 1
30502: PUSH
30503: LD_INT 6
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 30
30513: PUSH
30514: LD_VAR 0 4
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: LIST
30527: PUSH
30528: EMPTY
30529: LIST
30530: PPUSH
30531: CALL_OW 69
30535: ADD
30536: ST_TO_ADDR
30537: GO 30465
30539: POP
30540: POP
// for i = 1 to tmp do
30541: LD_ADDR_VAR 0 4
30545: PUSH
30546: DOUBLE
30547: LD_INT 1
30549: DEC
30550: ST_TO_ADDR
30551: LD_VAR 0 3
30555: PUSH
30556: FOR_TO
30557: IFFALSE 30645
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30559: LD_ADDR_VAR 0 5
30563: PUSH
30564: LD_VAR 0 5
30568: PUSH
30569: LD_VAR 0 3
30573: PUSH
30574: LD_VAR 0 4
30578: ARRAY
30579: PPUSH
30580: CALL_OW 266
30584: PUSH
30585: LD_VAR 0 3
30589: PUSH
30590: LD_VAR 0 4
30594: ARRAY
30595: PPUSH
30596: CALL_OW 250
30600: PUSH
30601: LD_VAR 0 3
30605: PUSH
30606: LD_VAR 0 4
30610: ARRAY
30611: PPUSH
30612: CALL_OW 251
30616: PUSH
30617: LD_VAR 0 3
30621: PUSH
30622: LD_VAR 0 4
30626: ARRAY
30627: PPUSH
30628: CALL_OW 254
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: PUSH
30639: EMPTY
30640: LIST
30641: ADD
30642: ST_TO_ADDR
30643: GO 30556
30645: POP
30646: POP
// result := list ;
30647: LD_ADDR_VAR 0 2
30651: PUSH
30652: LD_VAR 0 5
30656: ST_TO_ADDR
// end ;
30657: LD_VAR 0 2
30661: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30662: LD_INT 0
30664: PPUSH
30665: PPUSH
30666: PPUSH
30667: PPUSH
30668: PPUSH
30669: PPUSH
30670: PPUSH
// if not factory then
30671: LD_VAR 0 1
30675: NOT
30676: IFFALSE 30680
// exit ;
30678: GO 31273
// if control = control_apeman then
30680: LD_VAR 0 4
30684: PUSH
30685: LD_INT 5
30687: EQUAL
30688: IFFALSE 30797
// begin tmp := UnitsInside ( factory ) ;
30690: LD_ADDR_VAR 0 8
30694: PUSH
30695: LD_VAR 0 1
30699: PPUSH
30700: CALL_OW 313
30704: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30705: LD_VAR 0 8
30709: PPUSH
30710: LD_INT 25
30712: PUSH
30713: LD_INT 12
30715: PUSH
30716: EMPTY
30717: LIST
30718: LIST
30719: PPUSH
30720: CALL_OW 72
30724: NOT
30725: IFFALSE 30735
// control := control_manual ;
30727: LD_ADDR_VAR 0 4
30731: PUSH
30732: LD_INT 1
30734: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30735: LD_ADDR_VAR 0 8
30739: PUSH
30740: LD_VAR 0 1
30744: PPUSH
30745: CALL 30432 0 1
30749: ST_TO_ADDR
// if tmp then
30750: LD_VAR 0 8
30754: IFFALSE 30797
// begin for i in tmp do
30756: LD_ADDR_VAR 0 7
30760: PUSH
30761: LD_VAR 0 8
30765: PUSH
30766: FOR_IN
30767: IFFALSE 30795
// if i [ 1 ] = b_ext_radio then
30769: LD_VAR 0 7
30773: PUSH
30774: LD_INT 1
30776: ARRAY
30777: PUSH
30778: LD_INT 22
30780: EQUAL
30781: IFFALSE 30793
// begin control := control_remote ;
30783: LD_ADDR_VAR 0 4
30787: PUSH
30788: LD_INT 2
30790: ST_TO_ADDR
// break ;
30791: GO 30795
// end ;
30793: GO 30766
30795: POP
30796: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30797: LD_VAR 0 1
30801: PPUSH
30802: LD_VAR 0 2
30806: PPUSH
30807: LD_VAR 0 3
30811: PPUSH
30812: LD_VAR 0 4
30816: PPUSH
30817: LD_VAR 0 5
30821: PPUSH
30822: CALL_OW 448
30826: IFFALSE 30861
// begin result := [ chassis , engine , control , weapon ] ;
30828: LD_ADDR_VAR 0 6
30832: PUSH
30833: LD_VAR 0 2
30837: PUSH
30838: LD_VAR 0 3
30842: PUSH
30843: LD_VAR 0 4
30847: PUSH
30848: LD_VAR 0 5
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: ST_TO_ADDR
// exit ;
30859: GO 31273
// end ; _chassis := AvailableChassisList ( factory ) ;
30861: LD_ADDR_VAR 0 9
30865: PUSH
30866: LD_VAR 0 1
30870: PPUSH
30871: CALL_OW 475
30875: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30876: LD_ADDR_VAR 0 11
30880: PUSH
30881: LD_VAR 0 1
30885: PPUSH
30886: CALL_OW 476
30890: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30891: LD_ADDR_VAR 0 12
30895: PUSH
30896: LD_VAR 0 1
30900: PPUSH
30901: CALL_OW 477
30905: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30906: LD_ADDR_VAR 0 10
30910: PUSH
30911: LD_VAR 0 1
30915: PPUSH
30916: CALL_OW 478
30920: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30921: LD_VAR 0 9
30925: NOT
30926: PUSH
30927: LD_VAR 0 11
30931: NOT
30932: OR
30933: PUSH
30934: LD_VAR 0 12
30938: NOT
30939: OR
30940: PUSH
30941: LD_VAR 0 10
30945: NOT
30946: OR
30947: IFFALSE 30982
// begin result := [ chassis , engine , control , weapon ] ;
30949: LD_ADDR_VAR 0 6
30953: PUSH
30954: LD_VAR 0 2
30958: PUSH
30959: LD_VAR 0 3
30963: PUSH
30964: LD_VAR 0 4
30968: PUSH
30969: LD_VAR 0 5
30973: PUSH
30974: EMPTY
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: ST_TO_ADDR
// exit ;
30980: GO 31273
// end ; if not chassis in _chassis then
30982: LD_VAR 0 2
30986: PUSH
30987: LD_VAR 0 9
30991: IN
30992: NOT
30993: IFFALSE 31019
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30995: LD_ADDR_VAR 0 2
30999: PUSH
31000: LD_VAR 0 9
31004: PUSH
31005: LD_INT 1
31007: PPUSH
31008: LD_VAR 0 9
31012: PPUSH
31013: CALL_OW 12
31017: ARRAY
31018: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31019: LD_VAR 0 2
31023: PPUSH
31024: LD_VAR 0 3
31028: PPUSH
31029: CALL 31278 0 2
31033: NOT
31034: IFFALSE 31093
// repeat engine := _engine [ 1 ] ;
31036: LD_ADDR_VAR 0 3
31040: PUSH
31041: LD_VAR 0 11
31045: PUSH
31046: LD_INT 1
31048: ARRAY
31049: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31050: LD_ADDR_VAR 0 11
31054: PUSH
31055: LD_VAR 0 11
31059: PPUSH
31060: LD_INT 1
31062: PPUSH
31063: CALL_OW 3
31067: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31068: LD_VAR 0 2
31072: PPUSH
31073: LD_VAR 0 3
31077: PPUSH
31078: CALL 31278 0 2
31082: PUSH
31083: LD_VAR 0 11
31087: PUSH
31088: EMPTY
31089: EQUAL
31090: OR
31091: IFFALSE 31036
// if not control in _control then
31093: LD_VAR 0 4
31097: PUSH
31098: LD_VAR 0 12
31102: IN
31103: NOT
31104: IFFALSE 31130
// control := _control [ rand ( 1 , _control ) ] ;
31106: LD_ADDR_VAR 0 4
31110: PUSH
31111: LD_VAR 0 12
31115: PUSH
31116: LD_INT 1
31118: PPUSH
31119: LD_VAR 0 12
31123: PPUSH
31124: CALL_OW 12
31128: ARRAY
31129: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31130: LD_VAR 0 2
31134: PPUSH
31135: LD_VAR 0 5
31139: PPUSH
31140: CALL 31498 0 2
31144: NOT
31145: IFFALSE 31204
// repeat weapon := _weapon [ 1 ] ;
31147: LD_ADDR_VAR 0 5
31151: PUSH
31152: LD_VAR 0 10
31156: PUSH
31157: LD_INT 1
31159: ARRAY
31160: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31161: LD_ADDR_VAR 0 10
31165: PUSH
31166: LD_VAR 0 10
31170: PPUSH
31171: LD_INT 1
31173: PPUSH
31174: CALL_OW 3
31178: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31179: LD_VAR 0 2
31183: PPUSH
31184: LD_VAR 0 5
31188: PPUSH
31189: CALL 31498 0 2
31193: PUSH
31194: LD_VAR 0 10
31198: PUSH
31199: EMPTY
31200: EQUAL
31201: OR
31202: IFFALSE 31147
// result := [ ] ;
31204: LD_ADDR_VAR 0 6
31208: PUSH
31209: EMPTY
31210: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31211: LD_VAR 0 1
31215: PPUSH
31216: LD_VAR 0 2
31220: PPUSH
31221: LD_VAR 0 3
31225: PPUSH
31226: LD_VAR 0 4
31230: PPUSH
31231: LD_VAR 0 5
31235: PPUSH
31236: CALL_OW 448
31240: IFFALSE 31273
// result := [ chassis , engine , control , weapon ] ;
31242: LD_ADDR_VAR 0 6
31246: PUSH
31247: LD_VAR 0 2
31251: PUSH
31252: LD_VAR 0 3
31256: PUSH
31257: LD_VAR 0 4
31261: PUSH
31262: LD_VAR 0 5
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: ST_TO_ADDR
// end ;
31273: LD_VAR 0 6
31277: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31278: LD_INT 0
31280: PPUSH
// if not chassis or not engine then
31281: LD_VAR 0 1
31285: NOT
31286: PUSH
31287: LD_VAR 0 2
31291: NOT
31292: OR
31293: IFFALSE 31297
// exit ;
31295: GO 31493
// case engine of engine_solar :
31297: LD_VAR 0 2
31301: PUSH
31302: LD_INT 2
31304: DOUBLE
31305: EQUAL
31306: IFTRUE 31310
31308: GO 31348
31310: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31311: LD_ADDR_VAR 0 3
31315: PUSH
31316: LD_INT 11
31318: PUSH
31319: LD_INT 12
31321: PUSH
31322: LD_INT 13
31324: PUSH
31325: LD_INT 14
31327: PUSH
31328: LD_INT 1
31330: PUSH
31331: LD_INT 2
31333: PUSH
31334: LD_INT 3
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: ST_TO_ADDR
31346: GO 31477
31348: LD_INT 1
31350: DOUBLE
31351: EQUAL
31352: IFTRUE 31356
31354: GO 31418
31356: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31357: LD_ADDR_VAR 0 3
31361: PUSH
31362: LD_INT 11
31364: PUSH
31365: LD_INT 12
31367: PUSH
31368: LD_INT 13
31370: PUSH
31371: LD_INT 14
31373: PUSH
31374: LD_INT 1
31376: PUSH
31377: LD_INT 2
31379: PUSH
31380: LD_INT 3
31382: PUSH
31383: LD_INT 4
31385: PUSH
31386: LD_INT 5
31388: PUSH
31389: LD_INT 21
31391: PUSH
31392: LD_INT 23
31394: PUSH
31395: LD_INT 22
31397: PUSH
31398: LD_INT 24
31400: PUSH
31401: EMPTY
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: ST_TO_ADDR
31416: GO 31477
31418: LD_INT 3
31420: DOUBLE
31421: EQUAL
31422: IFTRUE 31426
31424: GO 31476
31426: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31427: LD_ADDR_VAR 0 3
31431: PUSH
31432: LD_INT 13
31434: PUSH
31435: LD_INT 14
31437: PUSH
31438: LD_INT 2
31440: PUSH
31441: LD_INT 3
31443: PUSH
31444: LD_INT 4
31446: PUSH
31447: LD_INT 5
31449: PUSH
31450: LD_INT 21
31452: PUSH
31453: LD_INT 22
31455: PUSH
31456: LD_INT 23
31458: PUSH
31459: LD_INT 24
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: ST_TO_ADDR
31474: GO 31477
31476: POP
// result := ( chassis in result ) ;
31477: LD_ADDR_VAR 0 3
31481: PUSH
31482: LD_VAR 0 1
31486: PUSH
31487: LD_VAR 0 3
31491: IN
31492: ST_TO_ADDR
// end ;
31493: LD_VAR 0 3
31497: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31498: LD_INT 0
31500: PPUSH
// if not chassis or not weapon then
31501: LD_VAR 0 1
31505: NOT
31506: PUSH
31507: LD_VAR 0 2
31511: NOT
31512: OR
31513: IFFALSE 31517
// exit ;
31515: GO 32579
// case weapon of us_machine_gun :
31517: LD_VAR 0 2
31521: PUSH
31522: LD_INT 2
31524: DOUBLE
31525: EQUAL
31526: IFTRUE 31530
31528: GO 31560
31530: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31531: LD_ADDR_VAR 0 3
31535: PUSH
31536: LD_INT 1
31538: PUSH
31539: LD_INT 2
31541: PUSH
31542: LD_INT 3
31544: PUSH
31545: LD_INT 4
31547: PUSH
31548: LD_INT 5
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: ST_TO_ADDR
31558: GO 32563
31560: LD_INT 3
31562: DOUBLE
31563: EQUAL
31564: IFTRUE 31568
31566: GO 31598
31568: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31569: LD_ADDR_VAR 0 3
31573: PUSH
31574: LD_INT 1
31576: PUSH
31577: LD_INT 2
31579: PUSH
31580: LD_INT 3
31582: PUSH
31583: LD_INT 4
31585: PUSH
31586: LD_INT 5
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: LIST
31595: ST_TO_ADDR
31596: GO 32563
31598: LD_INT 11
31600: DOUBLE
31601: EQUAL
31602: IFTRUE 31606
31604: GO 31636
31606: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31607: LD_ADDR_VAR 0 3
31611: PUSH
31612: LD_INT 1
31614: PUSH
31615: LD_INT 2
31617: PUSH
31618: LD_INT 3
31620: PUSH
31621: LD_INT 4
31623: PUSH
31624: LD_INT 5
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: ST_TO_ADDR
31634: GO 32563
31636: LD_INT 4
31638: DOUBLE
31639: EQUAL
31640: IFTRUE 31644
31642: GO 31670
31644: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31645: LD_ADDR_VAR 0 3
31649: PUSH
31650: LD_INT 2
31652: PUSH
31653: LD_INT 3
31655: PUSH
31656: LD_INT 4
31658: PUSH
31659: LD_INT 5
31661: PUSH
31662: EMPTY
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: ST_TO_ADDR
31668: GO 32563
31670: LD_INT 5
31672: DOUBLE
31673: EQUAL
31674: IFTRUE 31678
31676: GO 31704
31678: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31679: LD_ADDR_VAR 0 3
31683: PUSH
31684: LD_INT 2
31686: PUSH
31687: LD_INT 3
31689: PUSH
31690: LD_INT 4
31692: PUSH
31693: LD_INT 5
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: ST_TO_ADDR
31702: GO 32563
31704: LD_INT 9
31706: DOUBLE
31707: EQUAL
31708: IFTRUE 31712
31710: GO 31738
31712: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31713: LD_ADDR_VAR 0 3
31717: PUSH
31718: LD_INT 2
31720: PUSH
31721: LD_INT 3
31723: PUSH
31724: LD_INT 4
31726: PUSH
31727: LD_INT 5
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: LIST
31734: LIST
31735: ST_TO_ADDR
31736: GO 32563
31738: LD_INT 7
31740: DOUBLE
31741: EQUAL
31742: IFTRUE 31746
31744: GO 31772
31746: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31747: LD_ADDR_VAR 0 3
31751: PUSH
31752: LD_INT 2
31754: PUSH
31755: LD_INT 3
31757: PUSH
31758: LD_INT 4
31760: PUSH
31761: LD_INT 5
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: ST_TO_ADDR
31770: GO 32563
31772: LD_INT 12
31774: DOUBLE
31775: EQUAL
31776: IFTRUE 31780
31778: GO 31806
31780: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31781: LD_ADDR_VAR 0 3
31785: PUSH
31786: LD_INT 2
31788: PUSH
31789: LD_INT 3
31791: PUSH
31792: LD_INT 4
31794: PUSH
31795: LD_INT 5
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: ST_TO_ADDR
31804: GO 32563
31806: LD_INT 13
31808: DOUBLE
31809: EQUAL
31810: IFTRUE 31814
31812: GO 31840
31814: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31815: LD_ADDR_VAR 0 3
31819: PUSH
31820: LD_INT 2
31822: PUSH
31823: LD_INT 3
31825: PUSH
31826: LD_INT 4
31828: PUSH
31829: LD_INT 5
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: ST_TO_ADDR
31838: GO 32563
31840: LD_INT 14
31842: DOUBLE
31843: EQUAL
31844: IFTRUE 31848
31846: GO 31866
31848: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31849: LD_ADDR_VAR 0 3
31853: PUSH
31854: LD_INT 4
31856: PUSH
31857: LD_INT 5
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: ST_TO_ADDR
31864: GO 32563
31866: LD_INT 6
31868: DOUBLE
31869: EQUAL
31870: IFTRUE 31874
31872: GO 31892
31874: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31875: LD_ADDR_VAR 0 3
31879: PUSH
31880: LD_INT 4
31882: PUSH
31883: LD_INT 5
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: ST_TO_ADDR
31890: GO 32563
31892: LD_INT 10
31894: DOUBLE
31895: EQUAL
31896: IFTRUE 31900
31898: GO 31918
31900: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31901: LD_ADDR_VAR 0 3
31905: PUSH
31906: LD_INT 4
31908: PUSH
31909: LD_INT 5
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: ST_TO_ADDR
31916: GO 32563
31918: LD_INT 22
31920: DOUBLE
31921: EQUAL
31922: IFTRUE 31926
31924: GO 31952
31926: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31927: LD_ADDR_VAR 0 3
31931: PUSH
31932: LD_INT 11
31934: PUSH
31935: LD_INT 12
31937: PUSH
31938: LD_INT 13
31940: PUSH
31941: LD_INT 14
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: ST_TO_ADDR
31950: GO 32563
31952: LD_INT 23
31954: DOUBLE
31955: EQUAL
31956: IFTRUE 31960
31958: GO 31986
31960: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31961: LD_ADDR_VAR 0 3
31965: PUSH
31966: LD_INT 11
31968: PUSH
31969: LD_INT 12
31971: PUSH
31972: LD_INT 13
31974: PUSH
31975: LD_INT 14
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: ST_TO_ADDR
31984: GO 32563
31986: LD_INT 24
31988: DOUBLE
31989: EQUAL
31990: IFTRUE 31994
31992: GO 32020
31994: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31995: LD_ADDR_VAR 0 3
31999: PUSH
32000: LD_INT 11
32002: PUSH
32003: LD_INT 12
32005: PUSH
32006: LD_INT 13
32008: PUSH
32009: LD_INT 14
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: ST_TO_ADDR
32018: GO 32563
32020: LD_INT 30
32022: DOUBLE
32023: EQUAL
32024: IFTRUE 32028
32026: GO 32054
32028: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32029: LD_ADDR_VAR 0 3
32033: PUSH
32034: LD_INT 11
32036: PUSH
32037: LD_INT 12
32039: PUSH
32040: LD_INT 13
32042: PUSH
32043: LD_INT 14
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: ST_TO_ADDR
32052: GO 32563
32054: LD_INT 25
32056: DOUBLE
32057: EQUAL
32058: IFTRUE 32062
32060: GO 32080
32062: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32063: LD_ADDR_VAR 0 3
32067: PUSH
32068: LD_INT 13
32070: PUSH
32071: LD_INT 14
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: ST_TO_ADDR
32078: GO 32563
32080: LD_INT 27
32082: DOUBLE
32083: EQUAL
32084: IFTRUE 32088
32086: GO 32106
32088: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32089: LD_ADDR_VAR 0 3
32093: PUSH
32094: LD_INT 13
32096: PUSH
32097: LD_INT 14
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: ST_TO_ADDR
32104: GO 32563
32106: LD_EXP 34
32110: DOUBLE
32111: EQUAL
32112: IFTRUE 32116
32114: GO 32142
32116: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32117: LD_ADDR_VAR 0 3
32121: PUSH
32122: LD_INT 11
32124: PUSH
32125: LD_INT 12
32127: PUSH
32128: LD_INT 13
32130: PUSH
32131: LD_INT 14
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: ST_TO_ADDR
32140: GO 32563
32142: LD_INT 28
32144: DOUBLE
32145: EQUAL
32146: IFTRUE 32150
32148: GO 32168
32150: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32151: LD_ADDR_VAR 0 3
32155: PUSH
32156: LD_INT 13
32158: PUSH
32159: LD_INT 14
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: ST_TO_ADDR
32166: GO 32563
32168: LD_INT 29
32170: DOUBLE
32171: EQUAL
32172: IFTRUE 32176
32174: GO 32194
32176: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32177: LD_ADDR_VAR 0 3
32181: PUSH
32182: LD_INT 13
32184: PUSH
32185: LD_INT 14
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: ST_TO_ADDR
32192: GO 32563
32194: LD_INT 31
32196: DOUBLE
32197: EQUAL
32198: IFTRUE 32202
32200: GO 32220
32202: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32203: LD_ADDR_VAR 0 3
32207: PUSH
32208: LD_INT 13
32210: PUSH
32211: LD_INT 14
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: ST_TO_ADDR
32218: GO 32563
32220: LD_INT 26
32222: DOUBLE
32223: EQUAL
32224: IFTRUE 32228
32226: GO 32246
32228: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32229: LD_ADDR_VAR 0 3
32233: PUSH
32234: LD_INT 13
32236: PUSH
32237: LD_INT 14
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: ST_TO_ADDR
32244: GO 32563
32246: LD_INT 42
32248: DOUBLE
32249: EQUAL
32250: IFTRUE 32254
32252: GO 32280
32254: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32255: LD_ADDR_VAR 0 3
32259: PUSH
32260: LD_INT 21
32262: PUSH
32263: LD_INT 22
32265: PUSH
32266: LD_INT 23
32268: PUSH
32269: LD_INT 24
32271: PUSH
32272: EMPTY
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: ST_TO_ADDR
32278: GO 32563
32280: LD_INT 43
32282: DOUBLE
32283: EQUAL
32284: IFTRUE 32288
32286: GO 32314
32288: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32289: LD_ADDR_VAR 0 3
32293: PUSH
32294: LD_INT 21
32296: PUSH
32297: LD_INT 22
32299: PUSH
32300: LD_INT 23
32302: PUSH
32303: LD_INT 24
32305: PUSH
32306: EMPTY
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: ST_TO_ADDR
32312: GO 32563
32314: LD_INT 44
32316: DOUBLE
32317: EQUAL
32318: IFTRUE 32322
32320: GO 32348
32322: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32323: LD_ADDR_VAR 0 3
32327: PUSH
32328: LD_INT 21
32330: PUSH
32331: LD_INT 22
32333: PUSH
32334: LD_INT 23
32336: PUSH
32337: LD_INT 24
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: ST_TO_ADDR
32346: GO 32563
32348: LD_INT 45
32350: DOUBLE
32351: EQUAL
32352: IFTRUE 32356
32354: GO 32382
32356: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32357: LD_ADDR_VAR 0 3
32361: PUSH
32362: LD_INT 21
32364: PUSH
32365: LD_INT 22
32367: PUSH
32368: LD_INT 23
32370: PUSH
32371: LD_INT 24
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: ST_TO_ADDR
32380: GO 32563
32382: LD_INT 49
32384: DOUBLE
32385: EQUAL
32386: IFTRUE 32390
32388: GO 32416
32390: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32391: LD_ADDR_VAR 0 3
32395: PUSH
32396: LD_INT 21
32398: PUSH
32399: LD_INT 22
32401: PUSH
32402: LD_INT 23
32404: PUSH
32405: LD_INT 24
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: ST_TO_ADDR
32414: GO 32563
32416: LD_INT 51
32418: DOUBLE
32419: EQUAL
32420: IFTRUE 32424
32422: GO 32450
32424: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32425: LD_ADDR_VAR 0 3
32429: PUSH
32430: LD_INT 21
32432: PUSH
32433: LD_INT 22
32435: PUSH
32436: LD_INT 23
32438: PUSH
32439: LD_INT 24
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: ST_TO_ADDR
32448: GO 32563
32450: LD_INT 52
32452: DOUBLE
32453: EQUAL
32454: IFTRUE 32458
32456: GO 32484
32458: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32459: LD_ADDR_VAR 0 3
32463: PUSH
32464: LD_INT 21
32466: PUSH
32467: LD_INT 22
32469: PUSH
32470: LD_INT 23
32472: PUSH
32473: LD_INT 24
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: ST_TO_ADDR
32482: GO 32563
32484: LD_INT 53
32486: DOUBLE
32487: EQUAL
32488: IFTRUE 32492
32490: GO 32510
32492: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32493: LD_ADDR_VAR 0 3
32497: PUSH
32498: LD_INT 23
32500: PUSH
32501: LD_INT 24
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: ST_TO_ADDR
32508: GO 32563
32510: LD_INT 46
32512: DOUBLE
32513: EQUAL
32514: IFTRUE 32518
32516: GO 32536
32518: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32519: LD_ADDR_VAR 0 3
32523: PUSH
32524: LD_INT 23
32526: PUSH
32527: LD_INT 24
32529: PUSH
32530: EMPTY
32531: LIST
32532: LIST
32533: ST_TO_ADDR
32534: GO 32563
32536: LD_INT 47
32538: DOUBLE
32539: EQUAL
32540: IFTRUE 32544
32542: GO 32562
32544: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32545: LD_ADDR_VAR 0 3
32549: PUSH
32550: LD_INT 23
32552: PUSH
32553: LD_INT 24
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: ST_TO_ADDR
32560: GO 32563
32562: POP
// result := ( chassis in result ) ;
32563: LD_ADDR_VAR 0 3
32567: PUSH
32568: LD_VAR 0 1
32572: PUSH
32573: LD_VAR 0 3
32577: IN
32578: ST_TO_ADDR
// end ;
32579: LD_VAR 0 3
32583: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32584: LD_INT 0
32586: PPUSH
32587: PPUSH
32588: PPUSH
32589: PPUSH
32590: PPUSH
32591: PPUSH
32592: PPUSH
// result := array ;
32593: LD_ADDR_VAR 0 5
32597: PUSH
32598: LD_VAR 0 1
32602: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32603: LD_VAR 0 1
32607: NOT
32608: PUSH
32609: LD_VAR 0 2
32613: NOT
32614: OR
32615: PUSH
32616: LD_VAR 0 3
32620: NOT
32621: OR
32622: PUSH
32623: LD_VAR 0 2
32627: PUSH
32628: LD_VAR 0 1
32632: GREATER
32633: OR
32634: PUSH
32635: LD_VAR 0 3
32639: PUSH
32640: LD_VAR 0 1
32644: GREATER
32645: OR
32646: IFFALSE 32650
// exit ;
32648: GO 32946
// if direction then
32650: LD_VAR 0 4
32654: IFFALSE 32718
// begin d := 1 ;
32656: LD_ADDR_VAR 0 9
32660: PUSH
32661: LD_INT 1
32663: ST_TO_ADDR
// if i_from > i_to then
32664: LD_VAR 0 2
32668: PUSH
32669: LD_VAR 0 3
32673: GREATER
32674: IFFALSE 32700
// length := ( array - i_from ) + i_to else
32676: LD_ADDR_VAR 0 11
32680: PUSH
32681: LD_VAR 0 1
32685: PUSH
32686: LD_VAR 0 2
32690: MINUS
32691: PUSH
32692: LD_VAR 0 3
32696: PLUS
32697: ST_TO_ADDR
32698: GO 32716
// length := i_to - i_from ;
32700: LD_ADDR_VAR 0 11
32704: PUSH
32705: LD_VAR 0 3
32709: PUSH
32710: LD_VAR 0 2
32714: MINUS
32715: ST_TO_ADDR
// end else
32716: GO 32779
// begin d := - 1 ;
32718: LD_ADDR_VAR 0 9
32722: PUSH
32723: LD_INT 1
32725: NEG
32726: ST_TO_ADDR
// if i_from > i_to then
32727: LD_VAR 0 2
32731: PUSH
32732: LD_VAR 0 3
32736: GREATER
32737: IFFALSE 32757
// length := i_from - i_to else
32739: LD_ADDR_VAR 0 11
32743: PUSH
32744: LD_VAR 0 2
32748: PUSH
32749: LD_VAR 0 3
32753: MINUS
32754: ST_TO_ADDR
32755: GO 32779
// length := ( array - i_to ) + i_from ;
32757: LD_ADDR_VAR 0 11
32761: PUSH
32762: LD_VAR 0 1
32766: PUSH
32767: LD_VAR 0 3
32771: MINUS
32772: PUSH
32773: LD_VAR 0 2
32777: PLUS
32778: ST_TO_ADDR
// end ; if not length then
32779: LD_VAR 0 11
32783: NOT
32784: IFFALSE 32788
// exit ;
32786: GO 32946
// tmp := array ;
32788: LD_ADDR_VAR 0 10
32792: PUSH
32793: LD_VAR 0 1
32797: ST_TO_ADDR
// for i = 1 to length do
32798: LD_ADDR_VAR 0 6
32802: PUSH
32803: DOUBLE
32804: LD_INT 1
32806: DEC
32807: ST_TO_ADDR
32808: LD_VAR 0 11
32812: PUSH
32813: FOR_TO
32814: IFFALSE 32934
// begin for j = 1 to array do
32816: LD_ADDR_VAR 0 7
32820: PUSH
32821: DOUBLE
32822: LD_INT 1
32824: DEC
32825: ST_TO_ADDR
32826: LD_VAR 0 1
32830: PUSH
32831: FOR_TO
32832: IFFALSE 32920
// begin k := j + d ;
32834: LD_ADDR_VAR 0 8
32838: PUSH
32839: LD_VAR 0 7
32843: PUSH
32844: LD_VAR 0 9
32848: PLUS
32849: ST_TO_ADDR
// if k > array then
32850: LD_VAR 0 8
32854: PUSH
32855: LD_VAR 0 1
32859: GREATER
32860: IFFALSE 32870
// k := 1 ;
32862: LD_ADDR_VAR 0 8
32866: PUSH
32867: LD_INT 1
32869: ST_TO_ADDR
// if not k then
32870: LD_VAR 0 8
32874: NOT
32875: IFFALSE 32887
// k := array ;
32877: LD_ADDR_VAR 0 8
32881: PUSH
32882: LD_VAR 0 1
32886: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32887: LD_ADDR_VAR 0 10
32891: PUSH
32892: LD_VAR 0 10
32896: PPUSH
32897: LD_VAR 0 8
32901: PPUSH
32902: LD_VAR 0 1
32906: PUSH
32907: LD_VAR 0 7
32911: ARRAY
32912: PPUSH
32913: CALL_OW 1
32917: ST_TO_ADDR
// end ;
32918: GO 32831
32920: POP
32921: POP
// array := tmp ;
32922: LD_ADDR_VAR 0 1
32926: PUSH
32927: LD_VAR 0 10
32931: ST_TO_ADDR
// end ;
32932: GO 32813
32934: POP
32935: POP
// result := array ;
32936: LD_ADDR_VAR 0 5
32940: PUSH
32941: LD_VAR 0 1
32945: ST_TO_ADDR
// end ;
32946: LD_VAR 0 5
32950: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32951: LD_INT 0
32953: PPUSH
32954: PPUSH
// result := 0 ;
32955: LD_ADDR_VAR 0 3
32959: PUSH
32960: LD_INT 0
32962: ST_TO_ADDR
// if not array or not value in array then
32963: LD_VAR 0 1
32967: NOT
32968: PUSH
32969: LD_VAR 0 2
32973: PUSH
32974: LD_VAR 0 1
32978: IN
32979: NOT
32980: OR
32981: IFFALSE 32985
// exit ;
32983: GO 33039
// for i = 1 to array do
32985: LD_ADDR_VAR 0 4
32989: PUSH
32990: DOUBLE
32991: LD_INT 1
32993: DEC
32994: ST_TO_ADDR
32995: LD_VAR 0 1
32999: PUSH
33000: FOR_TO
33001: IFFALSE 33037
// if value = array [ i ] then
33003: LD_VAR 0 2
33007: PUSH
33008: LD_VAR 0 1
33012: PUSH
33013: LD_VAR 0 4
33017: ARRAY
33018: EQUAL
33019: IFFALSE 33035
// begin result := i ;
33021: LD_ADDR_VAR 0 3
33025: PUSH
33026: LD_VAR 0 4
33030: ST_TO_ADDR
// exit ;
33031: POP
33032: POP
33033: GO 33039
// end ;
33035: GO 33000
33037: POP
33038: POP
// end ;
33039: LD_VAR 0 3
33043: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33044: LD_INT 0
33046: PPUSH
// vc_chassis := chassis ;
33047: LD_ADDR_OWVAR 37
33051: PUSH
33052: LD_VAR 0 1
33056: ST_TO_ADDR
// vc_engine := engine ;
33057: LD_ADDR_OWVAR 39
33061: PUSH
33062: LD_VAR 0 2
33066: ST_TO_ADDR
// vc_control := control ;
33067: LD_ADDR_OWVAR 38
33071: PUSH
33072: LD_VAR 0 3
33076: ST_TO_ADDR
// vc_weapon := weapon ;
33077: LD_ADDR_OWVAR 40
33081: PUSH
33082: LD_VAR 0 4
33086: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33087: LD_ADDR_OWVAR 41
33091: PUSH
33092: LD_VAR 0 5
33096: ST_TO_ADDR
// end ;
33097: LD_VAR 0 6
33101: RET
// export function WantPlant ( unit ) ; var task ; begin
33102: LD_INT 0
33104: PPUSH
33105: PPUSH
// result := false ;
33106: LD_ADDR_VAR 0 2
33110: PUSH
33111: LD_INT 0
33113: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33114: LD_ADDR_VAR 0 3
33118: PUSH
33119: LD_VAR 0 1
33123: PPUSH
33124: CALL_OW 437
33128: ST_TO_ADDR
// if task then
33129: LD_VAR 0 3
33133: IFFALSE 33161
// if task [ 1 ] [ 1 ] = p then
33135: LD_VAR 0 3
33139: PUSH
33140: LD_INT 1
33142: ARRAY
33143: PUSH
33144: LD_INT 1
33146: ARRAY
33147: PUSH
33148: LD_STRING p
33150: EQUAL
33151: IFFALSE 33161
// result := true ;
33153: LD_ADDR_VAR 0 2
33157: PUSH
33158: LD_INT 1
33160: ST_TO_ADDR
// end ;
33161: LD_VAR 0 2
33165: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33166: LD_INT 0
33168: PPUSH
33169: PPUSH
33170: PPUSH
33171: PPUSH
// if pos < 1 then
33172: LD_VAR 0 2
33176: PUSH
33177: LD_INT 1
33179: LESS
33180: IFFALSE 33184
// exit ;
33182: GO 33487
// if pos = 1 then
33184: LD_VAR 0 2
33188: PUSH
33189: LD_INT 1
33191: EQUAL
33192: IFFALSE 33225
// result := Replace ( arr , pos [ 1 ] , value ) else
33194: LD_ADDR_VAR 0 4
33198: PUSH
33199: LD_VAR 0 1
33203: PPUSH
33204: LD_VAR 0 2
33208: PUSH
33209: LD_INT 1
33211: ARRAY
33212: PPUSH
33213: LD_VAR 0 3
33217: PPUSH
33218: CALL_OW 1
33222: ST_TO_ADDR
33223: GO 33487
// begin tmp := arr ;
33225: LD_ADDR_VAR 0 6
33229: PUSH
33230: LD_VAR 0 1
33234: ST_TO_ADDR
// s_arr := [ tmp ] ;
33235: LD_ADDR_VAR 0 7
33239: PUSH
33240: LD_VAR 0 6
33244: PUSH
33245: EMPTY
33246: LIST
33247: ST_TO_ADDR
// for i = 1 to pos - 1 do
33248: LD_ADDR_VAR 0 5
33252: PUSH
33253: DOUBLE
33254: LD_INT 1
33256: DEC
33257: ST_TO_ADDR
33258: LD_VAR 0 2
33262: PUSH
33263: LD_INT 1
33265: MINUS
33266: PUSH
33267: FOR_TO
33268: IFFALSE 33313
// begin tmp := tmp [ pos [ i ] ] ;
33270: LD_ADDR_VAR 0 6
33274: PUSH
33275: LD_VAR 0 6
33279: PUSH
33280: LD_VAR 0 2
33284: PUSH
33285: LD_VAR 0 5
33289: ARRAY
33290: ARRAY
33291: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33292: LD_ADDR_VAR 0 7
33296: PUSH
33297: LD_VAR 0 7
33301: PUSH
33302: LD_VAR 0 6
33306: PUSH
33307: EMPTY
33308: LIST
33309: ADD
33310: ST_TO_ADDR
// end ;
33311: GO 33267
33313: POP
33314: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33315: LD_ADDR_VAR 0 6
33319: PUSH
33320: LD_VAR 0 6
33324: PPUSH
33325: LD_VAR 0 2
33329: PUSH
33330: LD_VAR 0 2
33334: ARRAY
33335: PPUSH
33336: LD_VAR 0 3
33340: PPUSH
33341: CALL_OW 1
33345: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33346: LD_ADDR_VAR 0 7
33350: PUSH
33351: LD_VAR 0 7
33355: PPUSH
33356: LD_VAR 0 7
33360: PPUSH
33361: LD_VAR 0 6
33365: PPUSH
33366: CALL_OW 1
33370: ST_TO_ADDR
// for i = s_arr downto 2 do
33371: LD_ADDR_VAR 0 5
33375: PUSH
33376: DOUBLE
33377: LD_VAR 0 7
33381: INC
33382: ST_TO_ADDR
33383: LD_INT 2
33385: PUSH
33386: FOR_DOWNTO
33387: IFFALSE 33471
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33389: LD_ADDR_VAR 0 6
33393: PUSH
33394: LD_VAR 0 7
33398: PUSH
33399: LD_VAR 0 5
33403: PUSH
33404: LD_INT 1
33406: MINUS
33407: ARRAY
33408: PPUSH
33409: LD_VAR 0 2
33413: PUSH
33414: LD_VAR 0 5
33418: PUSH
33419: LD_INT 1
33421: MINUS
33422: ARRAY
33423: PPUSH
33424: LD_VAR 0 7
33428: PUSH
33429: LD_VAR 0 5
33433: ARRAY
33434: PPUSH
33435: CALL_OW 1
33439: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33440: LD_ADDR_VAR 0 7
33444: PUSH
33445: LD_VAR 0 7
33449: PPUSH
33450: LD_VAR 0 5
33454: PUSH
33455: LD_INT 1
33457: MINUS
33458: PPUSH
33459: LD_VAR 0 6
33463: PPUSH
33464: CALL_OW 1
33468: ST_TO_ADDR
// end ;
33469: GO 33386
33471: POP
33472: POP
// result := s_arr [ 1 ] ;
33473: LD_ADDR_VAR 0 4
33477: PUSH
33478: LD_VAR 0 7
33482: PUSH
33483: LD_INT 1
33485: ARRAY
33486: ST_TO_ADDR
// end ; end ;
33487: LD_VAR 0 4
33491: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33492: LD_INT 0
33494: PPUSH
33495: PPUSH
// if not list then
33496: LD_VAR 0 1
33500: NOT
33501: IFFALSE 33505
// exit ;
33503: GO 33596
// i := list [ pos1 ] ;
33505: LD_ADDR_VAR 0 5
33509: PUSH
33510: LD_VAR 0 1
33514: PUSH
33515: LD_VAR 0 2
33519: ARRAY
33520: ST_TO_ADDR
// if not i then
33521: LD_VAR 0 5
33525: NOT
33526: IFFALSE 33530
// exit ;
33528: GO 33596
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33530: LD_ADDR_VAR 0 1
33534: PUSH
33535: LD_VAR 0 1
33539: PPUSH
33540: LD_VAR 0 2
33544: PPUSH
33545: LD_VAR 0 1
33549: PUSH
33550: LD_VAR 0 3
33554: ARRAY
33555: PPUSH
33556: CALL_OW 1
33560: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33561: LD_ADDR_VAR 0 1
33565: PUSH
33566: LD_VAR 0 1
33570: PPUSH
33571: LD_VAR 0 3
33575: PPUSH
33576: LD_VAR 0 5
33580: PPUSH
33581: CALL_OW 1
33585: ST_TO_ADDR
// result := list ;
33586: LD_ADDR_VAR 0 4
33590: PUSH
33591: LD_VAR 0 1
33595: ST_TO_ADDR
// end ;
33596: LD_VAR 0 4
33600: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33601: LD_INT 0
33603: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33604: LD_ADDR_VAR 0 5
33608: PUSH
33609: LD_VAR 0 1
33613: PPUSH
33614: CALL_OW 250
33618: PPUSH
33619: LD_VAR 0 1
33623: PPUSH
33624: CALL_OW 251
33628: PPUSH
33629: LD_VAR 0 2
33633: PPUSH
33634: LD_VAR 0 3
33638: PPUSH
33639: LD_VAR 0 4
33643: PPUSH
33644: CALL 33654 0 5
33648: ST_TO_ADDR
// end ;
33649: LD_VAR 0 5
33653: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33654: LD_INT 0
33656: PPUSH
33657: PPUSH
33658: PPUSH
33659: PPUSH
// if not list then
33660: LD_VAR 0 3
33664: NOT
33665: IFFALSE 33669
// exit ;
33667: GO 34057
// result := [ ] ;
33669: LD_ADDR_VAR 0 6
33673: PUSH
33674: EMPTY
33675: ST_TO_ADDR
// for i in list do
33676: LD_ADDR_VAR 0 7
33680: PUSH
33681: LD_VAR 0 3
33685: PUSH
33686: FOR_IN
33687: IFFALSE 33889
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33689: LD_ADDR_VAR 0 9
33693: PUSH
33694: LD_VAR 0 7
33698: PPUSH
33699: LD_VAR 0 1
33703: PPUSH
33704: LD_VAR 0 2
33708: PPUSH
33709: CALL_OW 297
33713: ST_TO_ADDR
// if not result then
33714: LD_VAR 0 6
33718: NOT
33719: IFFALSE 33745
// result := [ [ i , tmp ] ] else
33721: LD_ADDR_VAR 0 6
33725: PUSH
33726: LD_VAR 0 7
33730: PUSH
33731: LD_VAR 0 9
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: PUSH
33740: EMPTY
33741: LIST
33742: ST_TO_ADDR
33743: GO 33887
// begin if result [ result ] [ 2 ] < tmp then
33745: LD_VAR 0 6
33749: PUSH
33750: LD_VAR 0 6
33754: ARRAY
33755: PUSH
33756: LD_INT 2
33758: ARRAY
33759: PUSH
33760: LD_VAR 0 9
33764: LESS
33765: IFFALSE 33807
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33767: LD_ADDR_VAR 0 6
33771: PUSH
33772: LD_VAR 0 6
33776: PPUSH
33777: LD_VAR 0 6
33781: PUSH
33782: LD_INT 1
33784: PLUS
33785: PPUSH
33786: LD_VAR 0 7
33790: PUSH
33791: LD_VAR 0 9
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PPUSH
33800: CALL_OW 2
33804: ST_TO_ADDR
33805: GO 33887
// for j = 1 to result do
33807: LD_ADDR_VAR 0 8
33811: PUSH
33812: DOUBLE
33813: LD_INT 1
33815: DEC
33816: ST_TO_ADDR
33817: LD_VAR 0 6
33821: PUSH
33822: FOR_TO
33823: IFFALSE 33885
// begin if tmp < result [ j ] [ 2 ] then
33825: LD_VAR 0 9
33829: PUSH
33830: LD_VAR 0 6
33834: PUSH
33835: LD_VAR 0 8
33839: ARRAY
33840: PUSH
33841: LD_INT 2
33843: ARRAY
33844: LESS
33845: IFFALSE 33883
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33847: LD_ADDR_VAR 0 6
33851: PUSH
33852: LD_VAR 0 6
33856: PPUSH
33857: LD_VAR 0 8
33861: PPUSH
33862: LD_VAR 0 7
33866: PUSH
33867: LD_VAR 0 9
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PPUSH
33876: CALL_OW 2
33880: ST_TO_ADDR
// break ;
33881: GO 33885
// end ; end ;
33883: GO 33822
33885: POP
33886: POP
// end ; end ;
33887: GO 33686
33889: POP
33890: POP
// if result and not asc then
33891: LD_VAR 0 6
33895: PUSH
33896: LD_VAR 0 4
33900: NOT
33901: AND
33902: IFFALSE 33977
// begin tmp := result ;
33904: LD_ADDR_VAR 0 9
33908: PUSH
33909: LD_VAR 0 6
33913: ST_TO_ADDR
// for i = tmp downto 1 do
33914: LD_ADDR_VAR 0 7
33918: PUSH
33919: DOUBLE
33920: LD_VAR 0 9
33924: INC
33925: ST_TO_ADDR
33926: LD_INT 1
33928: PUSH
33929: FOR_DOWNTO
33930: IFFALSE 33975
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33932: LD_ADDR_VAR 0 6
33936: PUSH
33937: LD_VAR 0 6
33941: PPUSH
33942: LD_VAR 0 9
33946: PUSH
33947: LD_VAR 0 7
33951: MINUS
33952: PUSH
33953: LD_INT 1
33955: PLUS
33956: PPUSH
33957: LD_VAR 0 9
33961: PUSH
33962: LD_VAR 0 7
33966: ARRAY
33967: PPUSH
33968: CALL_OW 1
33972: ST_TO_ADDR
33973: GO 33929
33975: POP
33976: POP
// end ; tmp := [ ] ;
33977: LD_ADDR_VAR 0 9
33981: PUSH
33982: EMPTY
33983: ST_TO_ADDR
// if mode then
33984: LD_VAR 0 5
33988: IFFALSE 34057
// begin for i = 1 to result do
33990: LD_ADDR_VAR 0 7
33994: PUSH
33995: DOUBLE
33996: LD_INT 1
33998: DEC
33999: ST_TO_ADDR
34000: LD_VAR 0 6
34004: PUSH
34005: FOR_TO
34006: IFFALSE 34045
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34008: LD_ADDR_VAR 0 9
34012: PUSH
34013: LD_VAR 0 9
34017: PPUSH
34018: LD_VAR 0 7
34022: PPUSH
34023: LD_VAR 0 6
34027: PUSH
34028: LD_VAR 0 7
34032: ARRAY
34033: PUSH
34034: LD_INT 1
34036: ARRAY
34037: PPUSH
34038: CALL_OW 1
34042: ST_TO_ADDR
34043: GO 34005
34045: POP
34046: POP
// result := tmp ;
34047: LD_ADDR_VAR 0 6
34051: PUSH
34052: LD_VAR 0 9
34056: ST_TO_ADDR
// end ; end ;
34057: LD_VAR 0 6
34061: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34062: LD_INT 0
34064: PPUSH
34065: PPUSH
34066: PPUSH
34067: PPUSH
34068: PPUSH
34069: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34070: LD_ADDR_VAR 0 5
34074: PUSH
34075: LD_INT 0
34077: PUSH
34078: LD_INT 0
34080: PUSH
34081: LD_INT 0
34083: PUSH
34084: EMPTY
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: ST_TO_ADDR
// if not x or not y then
34092: LD_VAR 0 2
34096: NOT
34097: PUSH
34098: LD_VAR 0 3
34102: NOT
34103: OR
34104: IFFALSE 34108
// exit ;
34106: GO 35760
// if not range then
34108: LD_VAR 0 4
34112: NOT
34113: IFFALSE 34123
// range := 10 ;
34115: LD_ADDR_VAR 0 4
34119: PUSH
34120: LD_INT 10
34122: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34123: LD_ADDR_VAR 0 8
34127: PUSH
34128: LD_INT 81
34130: PUSH
34131: LD_VAR 0 1
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 92
34142: PUSH
34143: LD_VAR 0 2
34147: PUSH
34148: LD_VAR 0 3
34152: PUSH
34153: LD_VAR 0 4
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 3
34166: PUSH
34167: LD_INT 21
34169: PUSH
34170: LD_INT 3
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: EMPTY
34182: LIST
34183: LIST
34184: LIST
34185: PPUSH
34186: CALL_OW 69
34190: ST_TO_ADDR
// if not tmp then
34191: LD_VAR 0 8
34195: NOT
34196: IFFALSE 34200
// exit ;
34198: GO 35760
// for i in tmp do
34200: LD_ADDR_VAR 0 6
34204: PUSH
34205: LD_VAR 0 8
34209: PUSH
34210: FOR_IN
34211: IFFALSE 35735
// begin points := [ 0 , 0 , 0 ] ;
34213: LD_ADDR_VAR 0 9
34217: PUSH
34218: LD_INT 0
34220: PUSH
34221: LD_INT 0
34223: PUSH
34224: LD_INT 0
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: LIST
34231: ST_TO_ADDR
// bpoints := 1 ;
34232: LD_ADDR_VAR 0 10
34236: PUSH
34237: LD_INT 1
34239: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34240: LD_VAR 0 6
34244: PPUSH
34245: CALL_OW 247
34249: PUSH
34250: LD_INT 1
34252: DOUBLE
34253: EQUAL
34254: IFTRUE 34258
34256: GO 34836
34258: POP
// begin if GetClass ( i ) = 1 then
34259: LD_VAR 0 6
34263: PPUSH
34264: CALL_OW 257
34268: PUSH
34269: LD_INT 1
34271: EQUAL
34272: IFFALSE 34293
// points := [ 10 , 5 , 3 ] ;
34274: LD_ADDR_VAR 0 9
34278: PUSH
34279: LD_INT 10
34281: PUSH
34282: LD_INT 5
34284: PUSH
34285: LD_INT 3
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: LIST
34292: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34293: LD_VAR 0 6
34297: PPUSH
34298: CALL_OW 257
34302: PUSH
34303: LD_INT 2
34305: PUSH
34306: LD_INT 3
34308: PUSH
34309: LD_INT 4
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: LIST
34316: IN
34317: IFFALSE 34338
// points := [ 3 , 2 , 1 ] ;
34319: LD_ADDR_VAR 0 9
34323: PUSH
34324: LD_INT 3
34326: PUSH
34327: LD_INT 2
34329: PUSH
34330: LD_INT 1
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: LIST
34337: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34338: LD_VAR 0 6
34342: PPUSH
34343: CALL_OW 257
34347: PUSH
34348: LD_INT 5
34350: EQUAL
34351: IFFALSE 34372
// points := [ 130 , 5 , 2 ] ;
34353: LD_ADDR_VAR 0 9
34357: PUSH
34358: LD_INT 130
34360: PUSH
34361: LD_INT 5
34363: PUSH
34364: LD_INT 2
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: LIST
34371: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34372: LD_VAR 0 6
34376: PPUSH
34377: CALL_OW 257
34381: PUSH
34382: LD_INT 8
34384: EQUAL
34385: IFFALSE 34406
// points := [ 35 , 35 , 30 ] ;
34387: LD_ADDR_VAR 0 9
34391: PUSH
34392: LD_INT 35
34394: PUSH
34395: LD_INT 35
34397: PUSH
34398: LD_INT 30
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: LIST
34405: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34406: LD_VAR 0 6
34410: PPUSH
34411: CALL_OW 257
34415: PUSH
34416: LD_INT 9
34418: EQUAL
34419: IFFALSE 34440
// points := [ 20 , 55 , 40 ] ;
34421: LD_ADDR_VAR 0 9
34425: PUSH
34426: LD_INT 20
34428: PUSH
34429: LD_INT 55
34431: PUSH
34432: LD_INT 40
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: LIST
34439: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34440: LD_VAR 0 6
34444: PPUSH
34445: CALL_OW 257
34449: PUSH
34450: LD_INT 12
34452: PUSH
34453: LD_INT 16
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: IN
34460: IFFALSE 34481
// points := [ 5 , 3 , 2 ] ;
34462: LD_ADDR_VAR 0 9
34466: PUSH
34467: LD_INT 5
34469: PUSH
34470: LD_INT 3
34472: PUSH
34473: LD_INT 2
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: LIST
34480: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34481: LD_VAR 0 6
34485: PPUSH
34486: CALL_OW 257
34490: PUSH
34491: LD_INT 17
34493: EQUAL
34494: IFFALSE 34515
// points := [ 100 , 50 , 75 ] ;
34496: LD_ADDR_VAR 0 9
34500: PUSH
34501: LD_INT 100
34503: PUSH
34504: LD_INT 50
34506: PUSH
34507: LD_INT 75
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: LIST
34514: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34515: LD_VAR 0 6
34519: PPUSH
34520: CALL_OW 257
34524: PUSH
34525: LD_INT 15
34527: EQUAL
34528: IFFALSE 34549
// points := [ 10 , 5 , 3 ] ;
34530: LD_ADDR_VAR 0 9
34534: PUSH
34535: LD_INT 10
34537: PUSH
34538: LD_INT 5
34540: PUSH
34541: LD_INT 3
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: LIST
34548: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34549: LD_VAR 0 6
34553: PPUSH
34554: CALL_OW 257
34558: PUSH
34559: LD_INT 14
34561: EQUAL
34562: IFFALSE 34583
// points := [ 10 , 0 , 0 ] ;
34564: LD_ADDR_VAR 0 9
34568: PUSH
34569: LD_INT 10
34571: PUSH
34572: LD_INT 0
34574: PUSH
34575: LD_INT 0
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: LIST
34582: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34583: LD_VAR 0 6
34587: PPUSH
34588: CALL_OW 257
34592: PUSH
34593: LD_INT 11
34595: EQUAL
34596: IFFALSE 34617
// points := [ 30 , 10 , 5 ] ;
34598: LD_ADDR_VAR 0 9
34602: PUSH
34603: LD_INT 30
34605: PUSH
34606: LD_INT 10
34608: PUSH
34609: LD_INT 5
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: LIST
34616: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34617: LD_VAR 0 1
34621: PPUSH
34622: LD_INT 5
34624: PPUSH
34625: CALL_OW 321
34629: PUSH
34630: LD_INT 2
34632: EQUAL
34633: IFFALSE 34650
// bpoints := bpoints * 1.8 ;
34635: LD_ADDR_VAR 0 10
34639: PUSH
34640: LD_VAR 0 10
34644: PUSH
34645: LD_REAL  1.80000000000000E+0000
34648: MUL
34649: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34650: LD_VAR 0 6
34654: PPUSH
34655: CALL_OW 257
34659: PUSH
34660: LD_INT 1
34662: PUSH
34663: LD_INT 2
34665: PUSH
34666: LD_INT 3
34668: PUSH
34669: LD_INT 4
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: IN
34678: PUSH
34679: LD_VAR 0 1
34683: PPUSH
34684: LD_INT 51
34686: PPUSH
34687: CALL_OW 321
34691: PUSH
34692: LD_INT 2
34694: EQUAL
34695: AND
34696: IFFALSE 34713
// bpoints := bpoints * 1.2 ;
34698: LD_ADDR_VAR 0 10
34702: PUSH
34703: LD_VAR 0 10
34707: PUSH
34708: LD_REAL  1.20000000000000E+0000
34711: MUL
34712: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34713: LD_VAR 0 6
34717: PPUSH
34718: CALL_OW 257
34722: PUSH
34723: LD_INT 5
34725: PUSH
34726: LD_INT 7
34728: PUSH
34729: LD_INT 9
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: LIST
34736: IN
34737: PUSH
34738: LD_VAR 0 1
34742: PPUSH
34743: LD_INT 52
34745: PPUSH
34746: CALL_OW 321
34750: PUSH
34751: LD_INT 2
34753: EQUAL
34754: AND
34755: IFFALSE 34772
// bpoints := bpoints * 1.5 ;
34757: LD_ADDR_VAR 0 10
34761: PUSH
34762: LD_VAR 0 10
34766: PUSH
34767: LD_REAL  1.50000000000000E+0000
34770: MUL
34771: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34772: LD_VAR 0 1
34776: PPUSH
34777: LD_INT 66
34779: PPUSH
34780: CALL_OW 321
34784: PUSH
34785: LD_INT 2
34787: EQUAL
34788: IFFALSE 34805
// bpoints := bpoints * 1.1 ;
34790: LD_ADDR_VAR 0 10
34794: PUSH
34795: LD_VAR 0 10
34799: PUSH
34800: LD_REAL  1.10000000000000E+0000
34803: MUL
34804: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34805: LD_ADDR_VAR 0 10
34809: PUSH
34810: LD_VAR 0 10
34814: PUSH
34815: LD_VAR 0 6
34819: PPUSH
34820: LD_INT 1
34822: PPUSH
34823: CALL_OW 259
34827: PUSH
34828: LD_REAL  1.15000000000000E+0000
34831: MUL
34832: MUL
34833: ST_TO_ADDR
// end ; unit_vehicle :
34834: GO 35664
34836: LD_INT 2
34838: DOUBLE
34839: EQUAL
34840: IFTRUE 34844
34842: GO 35652
34844: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34845: LD_VAR 0 6
34849: PPUSH
34850: CALL_OW 264
34854: PUSH
34855: LD_INT 2
34857: PUSH
34858: LD_INT 42
34860: PUSH
34861: LD_INT 24
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: LIST
34868: IN
34869: IFFALSE 34890
// points := [ 25 , 5 , 3 ] ;
34871: LD_ADDR_VAR 0 9
34875: PUSH
34876: LD_INT 25
34878: PUSH
34879: LD_INT 5
34881: PUSH
34882: LD_INT 3
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: LIST
34889: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34890: LD_VAR 0 6
34894: PPUSH
34895: CALL_OW 264
34899: PUSH
34900: LD_INT 4
34902: PUSH
34903: LD_INT 43
34905: PUSH
34906: LD_INT 25
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: LIST
34913: IN
34914: IFFALSE 34935
// points := [ 40 , 15 , 5 ] ;
34916: LD_ADDR_VAR 0 9
34920: PUSH
34921: LD_INT 40
34923: PUSH
34924: LD_INT 15
34926: PUSH
34927: LD_INT 5
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: LIST
34934: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34935: LD_VAR 0 6
34939: PPUSH
34940: CALL_OW 264
34944: PUSH
34945: LD_INT 3
34947: PUSH
34948: LD_INT 23
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: IN
34955: IFFALSE 34976
// points := [ 7 , 25 , 8 ] ;
34957: LD_ADDR_VAR 0 9
34961: PUSH
34962: LD_INT 7
34964: PUSH
34965: LD_INT 25
34967: PUSH
34968: LD_INT 8
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: LIST
34975: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34976: LD_VAR 0 6
34980: PPUSH
34981: CALL_OW 264
34985: PUSH
34986: LD_INT 5
34988: PUSH
34989: LD_INT 27
34991: PUSH
34992: LD_INT 44
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: LIST
34999: IN
35000: IFFALSE 35021
// points := [ 14 , 50 , 16 ] ;
35002: LD_ADDR_VAR 0 9
35006: PUSH
35007: LD_INT 14
35009: PUSH
35010: LD_INT 50
35012: PUSH
35013: LD_INT 16
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: LIST
35020: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35021: LD_VAR 0 6
35025: PPUSH
35026: CALL_OW 264
35030: PUSH
35031: LD_INT 6
35033: PUSH
35034: LD_INT 46
35036: PUSH
35037: EMPTY
35038: LIST
35039: LIST
35040: IN
35041: IFFALSE 35062
// points := [ 32 , 120 , 70 ] ;
35043: LD_ADDR_VAR 0 9
35047: PUSH
35048: LD_INT 32
35050: PUSH
35051: LD_INT 120
35053: PUSH
35054: LD_INT 70
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: LIST
35061: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35062: LD_VAR 0 6
35066: PPUSH
35067: CALL_OW 264
35071: PUSH
35072: LD_INT 7
35074: PUSH
35075: LD_INT 28
35077: PUSH
35078: LD_INT 45
35080: PUSH
35081: LD_EXP 34
35085: PUSH
35086: EMPTY
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: IN
35092: IFFALSE 35113
// points := [ 35 , 20 , 45 ] ;
35094: LD_ADDR_VAR 0 9
35098: PUSH
35099: LD_INT 35
35101: PUSH
35102: LD_INT 20
35104: PUSH
35105: LD_INT 45
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: LIST
35112: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35113: LD_VAR 0 6
35117: PPUSH
35118: CALL_OW 264
35122: PUSH
35123: LD_INT 47
35125: PUSH
35126: EMPTY
35127: LIST
35128: IN
35129: IFFALSE 35150
// points := [ 67 , 45 , 75 ] ;
35131: LD_ADDR_VAR 0 9
35135: PUSH
35136: LD_INT 67
35138: PUSH
35139: LD_INT 45
35141: PUSH
35142: LD_INT 75
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: LIST
35149: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35150: LD_VAR 0 6
35154: PPUSH
35155: CALL_OW 264
35159: PUSH
35160: LD_INT 26
35162: PUSH
35163: EMPTY
35164: LIST
35165: IN
35166: IFFALSE 35187
// points := [ 120 , 30 , 80 ] ;
35168: LD_ADDR_VAR 0 9
35172: PUSH
35173: LD_INT 120
35175: PUSH
35176: LD_INT 30
35178: PUSH
35179: LD_INT 80
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: LIST
35186: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35187: LD_VAR 0 6
35191: PPUSH
35192: CALL_OW 264
35196: PUSH
35197: LD_INT 22
35199: PUSH
35200: EMPTY
35201: LIST
35202: IN
35203: IFFALSE 35224
// points := [ 40 , 1 , 1 ] ;
35205: LD_ADDR_VAR 0 9
35209: PUSH
35210: LD_INT 40
35212: PUSH
35213: LD_INT 1
35215: PUSH
35216: LD_INT 1
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: LIST
35223: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35224: LD_VAR 0 6
35228: PPUSH
35229: CALL_OW 264
35233: PUSH
35234: LD_INT 29
35236: PUSH
35237: EMPTY
35238: LIST
35239: IN
35240: IFFALSE 35261
// points := [ 70 , 200 , 400 ] ;
35242: LD_ADDR_VAR 0 9
35246: PUSH
35247: LD_INT 70
35249: PUSH
35250: LD_INT 200
35252: PUSH
35253: LD_INT 400
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: LIST
35260: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35261: LD_VAR 0 6
35265: PPUSH
35266: CALL_OW 264
35270: PUSH
35271: LD_INT 14
35273: PUSH
35274: LD_INT 53
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: IN
35281: IFFALSE 35302
// points := [ 40 , 10 , 20 ] ;
35283: LD_ADDR_VAR 0 9
35287: PUSH
35288: LD_INT 40
35290: PUSH
35291: LD_INT 10
35293: PUSH
35294: LD_INT 20
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: LIST
35301: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35302: LD_VAR 0 6
35306: PPUSH
35307: CALL_OW 264
35311: PUSH
35312: LD_INT 9
35314: PUSH
35315: EMPTY
35316: LIST
35317: IN
35318: IFFALSE 35339
// points := [ 5 , 70 , 20 ] ;
35320: LD_ADDR_VAR 0 9
35324: PUSH
35325: LD_INT 5
35327: PUSH
35328: LD_INT 70
35330: PUSH
35331: LD_INT 20
35333: PUSH
35334: EMPTY
35335: LIST
35336: LIST
35337: LIST
35338: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35339: LD_VAR 0 6
35343: PPUSH
35344: CALL_OW 264
35348: PUSH
35349: LD_INT 10
35351: PUSH
35352: EMPTY
35353: LIST
35354: IN
35355: IFFALSE 35376
// points := [ 35 , 110 , 70 ] ;
35357: LD_ADDR_VAR 0 9
35361: PUSH
35362: LD_INT 35
35364: PUSH
35365: LD_INT 110
35367: PUSH
35368: LD_INT 70
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: LIST
35375: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35376: LD_VAR 0 6
35380: PPUSH
35381: CALL_OW 265
35385: PUSH
35386: LD_INT 25
35388: EQUAL
35389: IFFALSE 35410
// points := [ 80 , 65 , 100 ] ;
35391: LD_ADDR_VAR 0 9
35395: PUSH
35396: LD_INT 80
35398: PUSH
35399: LD_INT 65
35401: PUSH
35402: LD_INT 100
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: LIST
35409: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35410: LD_VAR 0 6
35414: PPUSH
35415: CALL_OW 263
35419: PUSH
35420: LD_INT 1
35422: EQUAL
35423: IFFALSE 35458
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35425: LD_ADDR_VAR 0 10
35429: PUSH
35430: LD_VAR 0 10
35434: PUSH
35435: LD_VAR 0 6
35439: PPUSH
35440: CALL_OW 311
35444: PPUSH
35445: LD_INT 3
35447: PPUSH
35448: CALL_OW 259
35452: PUSH
35453: LD_INT 4
35455: MUL
35456: MUL
35457: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35458: LD_VAR 0 6
35462: PPUSH
35463: CALL_OW 263
35467: PUSH
35468: LD_INT 2
35470: EQUAL
35471: IFFALSE 35522
// begin j := IsControledBy ( i ) ;
35473: LD_ADDR_VAR 0 7
35477: PUSH
35478: LD_VAR 0 6
35482: PPUSH
35483: CALL_OW 312
35487: ST_TO_ADDR
// if j then
35488: LD_VAR 0 7
35492: IFFALSE 35522
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35494: LD_ADDR_VAR 0 10
35498: PUSH
35499: LD_VAR 0 10
35503: PUSH
35504: LD_VAR 0 7
35508: PPUSH
35509: LD_INT 3
35511: PPUSH
35512: CALL_OW 259
35516: PUSH
35517: LD_INT 3
35519: MUL
35520: MUL
35521: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35522: LD_VAR 0 6
35526: PPUSH
35527: CALL_OW 264
35531: PUSH
35532: LD_INT 5
35534: PUSH
35535: LD_INT 6
35537: PUSH
35538: LD_INT 46
35540: PUSH
35541: LD_INT 44
35543: PUSH
35544: LD_INT 47
35546: PUSH
35547: LD_INT 45
35549: PUSH
35550: LD_INT 28
35552: PUSH
35553: LD_INT 7
35555: PUSH
35556: LD_INT 27
35558: PUSH
35559: LD_INT 29
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: IN
35574: PUSH
35575: LD_VAR 0 1
35579: PPUSH
35580: LD_INT 52
35582: PPUSH
35583: CALL_OW 321
35587: PUSH
35588: LD_INT 2
35590: EQUAL
35591: AND
35592: IFFALSE 35609
// bpoints := bpoints * 1.2 ;
35594: LD_ADDR_VAR 0 10
35598: PUSH
35599: LD_VAR 0 10
35603: PUSH
35604: LD_REAL  1.20000000000000E+0000
35607: MUL
35608: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35609: LD_VAR 0 6
35613: PPUSH
35614: CALL_OW 264
35618: PUSH
35619: LD_INT 6
35621: PUSH
35622: LD_INT 46
35624: PUSH
35625: LD_INT 47
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: LIST
35632: IN
35633: IFFALSE 35650
// bpoints := bpoints * 1.2 ;
35635: LD_ADDR_VAR 0 10
35639: PUSH
35640: LD_VAR 0 10
35644: PUSH
35645: LD_REAL  1.20000000000000E+0000
35648: MUL
35649: ST_TO_ADDR
// end ; unit_building :
35650: GO 35664
35652: LD_INT 3
35654: DOUBLE
35655: EQUAL
35656: IFTRUE 35660
35658: GO 35663
35660: POP
// ; end ;
35661: GO 35664
35663: POP
// for j = 1 to 3 do
35664: LD_ADDR_VAR 0 7
35668: PUSH
35669: DOUBLE
35670: LD_INT 1
35672: DEC
35673: ST_TO_ADDR
35674: LD_INT 3
35676: PUSH
35677: FOR_TO
35678: IFFALSE 35731
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35680: LD_ADDR_VAR 0 5
35684: PUSH
35685: LD_VAR 0 5
35689: PPUSH
35690: LD_VAR 0 7
35694: PPUSH
35695: LD_VAR 0 5
35699: PUSH
35700: LD_VAR 0 7
35704: ARRAY
35705: PUSH
35706: LD_VAR 0 9
35710: PUSH
35711: LD_VAR 0 7
35715: ARRAY
35716: PUSH
35717: LD_VAR 0 10
35721: MUL
35722: PLUS
35723: PPUSH
35724: CALL_OW 1
35728: ST_TO_ADDR
35729: GO 35677
35731: POP
35732: POP
// end ;
35733: GO 34210
35735: POP
35736: POP
// result := Replace ( result , 4 , tmp ) ;
35737: LD_ADDR_VAR 0 5
35741: PUSH
35742: LD_VAR 0 5
35746: PPUSH
35747: LD_INT 4
35749: PPUSH
35750: LD_VAR 0 8
35754: PPUSH
35755: CALL_OW 1
35759: ST_TO_ADDR
// end ;
35760: LD_VAR 0 5
35764: RET
// export function DangerAtRange ( unit , range ) ; begin
35765: LD_INT 0
35767: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35768: LD_ADDR_VAR 0 3
35772: PUSH
35773: LD_VAR 0 1
35777: PPUSH
35778: CALL_OW 255
35782: PPUSH
35783: LD_VAR 0 1
35787: PPUSH
35788: CALL_OW 250
35792: PPUSH
35793: LD_VAR 0 1
35797: PPUSH
35798: CALL_OW 251
35802: PPUSH
35803: LD_VAR 0 2
35807: PPUSH
35808: CALL 34062 0 4
35812: ST_TO_ADDR
// end ;
35813: LD_VAR 0 3
35817: RET
// export function DangerInArea ( side , area ) ; begin
35818: LD_INT 0
35820: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35821: LD_ADDR_VAR 0 3
35825: PUSH
35826: LD_VAR 0 2
35830: PPUSH
35831: LD_INT 81
35833: PUSH
35834: LD_VAR 0 1
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PPUSH
35843: CALL_OW 70
35847: ST_TO_ADDR
// end ;
35848: LD_VAR 0 3
35852: RET
// export function IsExtension ( b ) ; begin
35853: LD_INT 0
35855: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35856: LD_ADDR_VAR 0 2
35860: PUSH
35861: LD_VAR 0 1
35865: PUSH
35866: LD_INT 23
35868: PUSH
35869: LD_INT 20
35871: PUSH
35872: LD_INT 22
35874: PUSH
35875: LD_INT 17
35877: PUSH
35878: LD_INT 24
35880: PUSH
35881: LD_INT 21
35883: PUSH
35884: LD_INT 19
35886: PUSH
35887: LD_INT 16
35889: PUSH
35890: LD_INT 25
35892: PUSH
35893: LD_INT 18
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: IN
35908: ST_TO_ADDR
// end ;
35909: LD_VAR 0 2
35913: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35914: LD_INT 0
35916: PPUSH
35917: PPUSH
35918: PPUSH
// result := [ ] ;
35919: LD_ADDR_VAR 0 4
35923: PUSH
35924: EMPTY
35925: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35926: LD_ADDR_VAR 0 5
35930: PUSH
35931: LD_VAR 0 2
35935: PPUSH
35936: LD_INT 21
35938: PUSH
35939: LD_INT 3
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PPUSH
35946: CALL_OW 70
35950: ST_TO_ADDR
// if not tmp then
35951: LD_VAR 0 5
35955: NOT
35956: IFFALSE 35960
// exit ;
35958: GO 36024
// if checkLink then
35960: LD_VAR 0 3
35964: IFFALSE 36014
// begin for i in tmp do
35966: LD_ADDR_VAR 0 6
35970: PUSH
35971: LD_VAR 0 5
35975: PUSH
35976: FOR_IN
35977: IFFALSE 36012
// if GetBase ( i ) <> base then
35979: LD_VAR 0 6
35983: PPUSH
35984: CALL_OW 274
35988: PUSH
35989: LD_VAR 0 1
35993: NONEQUAL
35994: IFFALSE 36010
// ComLinkToBase ( base , i ) ;
35996: LD_VAR 0 1
36000: PPUSH
36001: LD_VAR 0 6
36005: PPUSH
36006: CALL_OW 169
36010: GO 35976
36012: POP
36013: POP
// end ; result := tmp ;
36014: LD_ADDR_VAR 0 4
36018: PUSH
36019: LD_VAR 0 5
36023: ST_TO_ADDR
// end ;
36024: LD_VAR 0 4
36028: RET
// export function ComComplete ( units , b ) ; var i ; begin
36029: LD_INT 0
36031: PPUSH
36032: PPUSH
// if not units then
36033: LD_VAR 0 1
36037: NOT
36038: IFFALSE 36042
// exit ;
36040: GO 36132
// for i in units do
36042: LD_ADDR_VAR 0 4
36046: PUSH
36047: LD_VAR 0 1
36051: PUSH
36052: FOR_IN
36053: IFFALSE 36130
// if BuildingStatus ( b ) = bs_build then
36055: LD_VAR 0 2
36059: PPUSH
36060: CALL_OW 461
36064: PUSH
36065: LD_INT 1
36067: EQUAL
36068: IFFALSE 36128
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36070: LD_VAR 0 4
36074: PPUSH
36075: LD_STRING h
36077: PUSH
36078: LD_VAR 0 2
36082: PPUSH
36083: CALL_OW 250
36087: PUSH
36088: LD_VAR 0 2
36092: PPUSH
36093: CALL_OW 251
36097: PUSH
36098: LD_VAR 0 2
36102: PUSH
36103: LD_INT 0
36105: PUSH
36106: LD_INT 0
36108: PUSH
36109: LD_INT 0
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: PUSH
36121: EMPTY
36122: LIST
36123: PPUSH
36124: CALL_OW 446
36128: GO 36052
36130: POP
36131: POP
// end ;
36132: LD_VAR 0 3
36136: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36137: LD_INT 0
36139: PPUSH
36140: PPUSH
36141: PPUSH
36142: PPUSH
36143: PPUSH
36144: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36145: LD_VAR 0 1
36149: NOT
36150: PUSH
36151: LD_VAR 0 1
36155: PPUSH
36156: CALL_OW 263
36160: PUSH
36161: LD_INT 2
36163: NONEQUAL
36164: OR
36165: IFFALSE 36169
// exit ;
36167: GO 36485
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36169: LD_ADDR_VAR 0 6
36173: PUSH
36174: LD_INT 22
36176: PUSH
36177: LD_VAR 0 1
36181: PPUSH
36182: CALL_OW 255
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 2
36193: PUSH
36194: LD_INT 30
36196: PUSH
36197: LD_INT 36
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 34
36206: PUSH
36207: LD_INT 31
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: LIST
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: PPUSH
36223: CALL_OW 69
36227: ST_TO_ADDR
// if not tmp then
36228: LD_VAR 0 6
36232: NOT
36233: IFFALSE 36237
// exit ;
36235: GO 36485
// result := [ ] ;
36237: LD_ADDR_VAR 0 2
36241: PUSH
36242: EMPTY
36243: ST_TO_ADDR
// for i in tmp do
36244: LD_ADDR_VAR 0 3
36248: PUSH
36249: LD_VAR 0 6
36253: PUSH
36254: FOR_IN
36255: IFFALSE 36326
// begin t := UnitsInside ( i ) ;
36257: LD_ADDR_VAR 0 4
36261: PUSH
36262: LD_VAR 0 3
36266: PPUSH
36267: CALL_OW 313
36271: ST_TO_ADDR
// if t then
36272: LD_VAR 0 4
36276: IFFALSE 36324
// for j in t do
36278: LD_ADDR_VAR 0 7
36282: PUSH
36283: LD_VAR 0 4
36287: PUSH
36288: FOR_IN
36289: IFFALSE 36322
// result := Replace ( result , result + 1 , j ) ;
36291: LD_ADDR_VAR 0 2
36295: PUSH
36296: LD_VAR 0 2
36300: PPUSH
36301: LD_VAR 0 2
36305: PUSH
36306: LD_INT 1
36308: PLUS
36309: PPUSH
36310: LD_VAR 0 7
36314: PPUSH
36315: CALL_OW 1
36319: ST_TO_ADDR
36320: GO 36288
36322: POP
36323: POP
// end ;
36324: GO 36254
36326: POP
36327: POP
// if not result then
36328: LD_VAR 0 2
36332: NOT
36333: IFFALSE 36337
// exit ;
36335: GO 36485
// mech := result [ 1 ] ;
36337: LD_ADDR_VAR 0 5
36341: PUSH
36342: LD_VAR 0 2
36346: PUSH
36347: LD_INT 1
36349: ARRAY
36350: ST_TO_ADDR
// if result > 1 then
36351: LD_VAR 0 2
36355: PUSH
36356: LD_INT 1
36358: GREATER
36359: IFFALSE 36471
// begin for i = 2 to result do
36361: LD_ADDR_VAR 0 3
36365: PUSH
36366: DOUBLE
36367: LD_INT 2
36369: DEC
36370: ST_TO_ADDR
36371: LD_VAR 0 2
36375: PUSH
36376: FOR_TO
36377: IFFALSE 36469
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36379: LD_ADDR_VAR 0 4
36383: PUSH
36384: LD_VAR 0 2
36388: PUSH
36389: LD_VAR 0 3
36393: ARRAY
36394: PPUSH
36395: LD_INT 3
36397: PPUSH
36398: CALL_OW 259
36402: PUSH
36403: LD_VAR 0 2
36407: PUSH
36408: LD_VAR 0 3
36412: ARRAY
36413: PPUSH
36414: CALL_OW 432
36418: MINUS
36419: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36420: LD_VAR 0 4
36424: PUSH
36425: LD_VAR 0 5
36429: PPUSH
36430: LD_INT 3
36432: PPUSH
36433: CALL_OW 259
36437: PUSH
36438: LD_VAR 0 5
36442: PPUSH
36443: CALL_OW 432
36447: MINUS
36448: GREATEREQUAL
36449: IFFALSE 36467
// mech := result [ i ] ;
36451: LD_ADDR_VAR 0 5
36455: PUSH
36456: LD_VAR 0 2
36460: PUSH
36461: LD_VAR 0 3
36465: ARRAY
36466: ST_TO_ADDR
// end ;
36467: GO 36376
36469: POP
36470: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36471: LD_VAR 0 1
36475: PPUSH
36476: LD_VAR 0 5
36480: PPUSH
36481: CALL_OW 135
// end ;
36485: LD_VAR 0 2
36489: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36490: LD_INT 0
36492: PPUSH
36493: PPUSH
36494: PPUSH
36495: PPUSH
36496: PPUSH
36497: PPUSH
36498: PPUSH
36499: PPUSH
36500: PPUSH
36501: PPUSH
36502: PPUSH
36503: PPUSH
36504: PPUSH
// result := [ ] ;
36505: LD_ADDR_VAR 0 7
36509: PUSH
36510: EMPTY
36511: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36512: LD_VAR 0 1
36516: PPUSH
36517: CALL_OW 266
36521: PUSH
36522: LD_INT 0
36524: PUSH
36525: LD_INT 1
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: IN
36532: NOT
36533: IFFALSE 36537
// exit ;
36535: GO 38171
// if name then
36537: LD_VAR 0 3
36541: IFFALSE 36557
// SetBName ( base_dep , name ) ;
36543: LD_VAR 0 1
36547: PPUSH
36548: LD_VAR 0 3
36552: PPUSH
36553: CALL_OW 500
// base := GetBase ( base_dep ) ;
36557: LD_ADDR_VAR 0 15
36561: PUSH
36562: LD_VAR 0 1
36566: PPUSH
36567: CALL_OW 274
36571: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36572: LD_ADDR_VAR 0 16
36576: PUSH
36577: LD_VAR 0 1
36581: PPUSH
36582: CALL_OW 255
36586: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36587: LD_ADDR_VAR 0 17
36591: PUSH
36592: LD_VAR 0 1
36596: PPUSH
36597: CALL_OW 248
36601: ST_TO_ADDR
// if sources then
36602: LD_VAR 0 5
36606: IFFALSE 36653
// for i = 1 to 3 do
36608: LD_ADDR_VAR 0 8
36612: PUSH
36613: DOUBLE
36614: LD_INT 1
36616: DEC
36617: ST_TO_ADDR
36618: LD_INT 3
36620: PUSH
36621: FOR_TO
36622: IFFALSE 36651
// AddResourceType ( base , i , sources [ i ] ) ;
36624: LD_VAR 0 15
36628: PPUSH
36629: LD_VAR 0 8
36633: PPUSH
36634: LD_VAR 0 5
36638: PUSH
36639: LD_VAR 0 8
36643: ARRAY
36644: PPUSH
36645: CALL_OW 276
36649: GO 36621
36651: POP
36652: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36653: LD_ADDR_VAR 0 18
36657: PUSH
36658: LD_VAR 0 15
36662: PPUSH
36663: LD_VAR 0 2
36667: PPUSH
36668: LD_INT 1
36670: PPUSH
36671: CALL 35914 0 3
36675: ST_TO_ADDR
// InitHc ;
36676: CALL_OW 19
// InitUc ;
36680: CALL_OW 18
// uc_side := side ;
36684: LD_ADDR_OWVAR 20
36688: PUSH
36689: LD_VAR 0 16
36693: ST_TO_ADDR
// uc_nation := nation ;
36694: LD_ADDR_OWVAR 21
36698: PUSH
36699: LD_VAR 0 17
36703: ST_TO_ADDR
// if buildings then
36704: LD_VAR 0 18
36708: IFFALSE 38030
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36710: LD_ADDR_VAR 0 19
36714: PUSH
36715: LD_VAR 0 18
36719: PPUSH
36720: LD_INT 2
36722: PUSH
36723: LD_INT 30
36725: PUSH
36726: LD_INT 29
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 30
36735: PUSH
36736: LD_INT 30
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: LIST
36747: PPUSH
36748: CALL_OW 72
36752: ST_TO_ADDR
// if tmp then
36753: LD_VAR 0 19
36757: IFFALSE 36805
// for i in tmp do
36759: LD_ADDR_VAR 0 8
36763: PUSH
36764: LD_VAR 0 19
36768: PUSH
36769: FOR_IN
36770: IFFALSE 36803
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36772: LD_VAR 0 8
36776: PPUSH
36777: CALL_OW 250
36781: PPUSH
36782: LD_VAR 0 8
36786: PPUSH
36787: CALL_OW 251
36791: PPUSH
36792: LD_VAR 0 16
36796: PPUSH
36797: CALL_OW 441
36801: GO 36769
36803: POP
36804: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36805: LD_VAR 0 18
36809: PPUSH
36810: LD_INT 2
36812: PUSH
36813: LD_INT 30
36815: PUSH
36816: LD_INT 32
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 30
36825: PUSH
36826: LD_INT 33
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: LIST
36837: PPUSH
36838: CALL_OW 72
36842: IFFALSE 36930
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36844: LD_ADDR_VAR 0 8
36848: PUSH
36849: LD_VAR 0 18
36853: PPUSH
36854: LD_INT 2
36856: PUSH
36857: LD_INT 30
36859: PUSH
36860: LD_INT 32
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: PUSH
36867: LD_INT 30
36869: PUSH
36870: LD_INT 33
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: LIST
36881: PPUSH
36882: CALL_OW 72
36886: PUSH
36887: FOR_IN
36888: IFFALSE 36928
// begin if not GetBWeapon ( i ) then
36890: LD_VAR 0 8
36894: PPUSH
36895: CALL_OW 269
36899: NOT
36900: IFFALSE 36926
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36902: LD_VAR 0 8
36906: PPUSH
36907: LD_VAR 0 8
36911: PPUSH
36912: LD_VAR 0 2
36916: PPUSH
36917: CALL 38176 0 2
36921: PPUSH
36922: CALL_OW 431
// end ;
36926: GO 36887
36928: POP
36929: POP
// end ; for i = 1 to personel do
36930: LD_ADDR_VAR 0 8
36934: PUSH
36935: DOUBLE
36936: LD_INT 1
36938: DEC
36939: ST_TO_ADDR
36940: LD_VAR 0 6
36944: PUSH
36945: FOR_TO
36946: IFFALSE 38010
// begin if i > 4 then
36948: LD_VAR 0 8
36952: PUSH
36953: LD_INT 4
36955: GREATER
36956: IFFALSE 36960
// break ;
36958: GO 38010
// case i of 1 :
36960: LD_VAR 0 8
36964: PUSH
36965: LD_INT 1
36967: DOUBLE
36968: EQUAL
36969: IFTRUE 36973
36971: GO 37053
36973: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36974: LD_ADDR_VAR 0 12
36978: PUSH
36979: LD_VAR 0 18
36983: PPUSH
36984: LD_INT 22
36986: PUSH
36987: LD_VAR 0 16
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 58
36998: PUSH
36999: EMPTY
37000: LIST
37001: PUSH
37002: LD_INT 2
37004: PUSH
37005: LD_INT 30
37007: PUSH
37008: LD_INT 32
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 30
37017: PUSH
37018: LD_INT 4
37020: PUSH
37021: EMPTY
37022: LIST
37023: LIST
37024: PUSH
37025: LD_INT 30
37027: PUSH
37028: LD_INT 5
37030: PUSH
37031: EMPTY
37032: LIST
37033: LIST
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: LIST
37045: PPUSH
37046: CALL_OW 72
37050: ST_TO_ADDR
37051: GO 37275
37053: LD_INT 2
37055: DOUBLE
37056: EQUAL
37057: IFTRUE 37061
37059: GO 37123
37061: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37062: LD_ADDR_VAR 0 12
37066: PUSH
37067: LD_VAR 0 18
37071: PPUSH
37072: LD_INT 22
37074: PUSH
37075: LD_VAR 0 16
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 2
37086: PUSH
37087: LD_INT 30
37089: PUSH
37090: LD_INT 0
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 30
37099: PUSH
37100: LD_INT 1
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: LIST
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PPUSH
37116: CALL_OW 72
37120: ST_TO_ADDR
37121: GO 37275
37123: LD_INT 3
37125: DOUBLE
37126: EQUAL
37127: IFTRUE 37131
37129: GO 37193
37131: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37132: LD_ADDR_VAR 0 12
37136: PUSH
37137: LD_VAR 0 18
37141: PPUSH
37142: LD_INT 22
37144: PUSH
37145: LD_VAR 0 16
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 2
37156: PUSH
37157: LD_INT 30
37159: PUSH
37160: LD_INT 2
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 30
37169: PUSH
37170: LD_INT 3
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: LIST
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PPUSH
37186: CALL_OW 72
37190: ST_TO_ADDR
37191: GO 37275
37193: LD_INT 4
37195: DOUBLE
37196: EQUAL
37197: IFTRUE 37201
37199: GO 37274
37201: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37202: LD_ADDR_VAR 0 12
37206: PUSH
37207: LD_VAR 0 18
37211: PPUSH
37212: LD_INT 22
37214: PUSH
37215: LD_VAR 0 16
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: PUSH
37224: LD_INT 2
37226: PUSH
37227: LD_INT 30
37229: PUSH
37230: LD_INT 6
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 30
37239: PUSH
37240: LD_INT 7
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 30
37249: PUSH
37250: LD_INT 8
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PPUSH
37267: CALL_OW 72
37271: ST_TO_ADDR
37272: GO 37275
37274: POP
// if i = 1 then
37275: LD_VAR 0 8
37279: PUSH
37280: LD_INT 1
37282: EQUAL
37283: IFFALSE 37394
// begin tmp := [ ] ;
37285: LD_ADDR_VAR 0 19
37289: PUSH
37290: EMPTY
37291: ST_TO_ADDR
// for j in f do
37292: LD_ADDR_VAR 0 9
37296: PUSH
37297: LD_VAR 0 12
37301: PUSH
37302: FOR_IN
37303: IFFALSE 37376
// if GetBType ( j ) = b_bunker then
37305: LD_VAR 0 9
37309: PPUSH
37310: CALL_OW 266
37314: PUSH
37315: LD_INT 32
37317: EQUAL
37318: IFFALSE 37345
// tmp := Insert ( tmp , 1 , j ) else
37320: LD_ADDR_VAR 0 19
37324: PUSH
37325: LD_VAR 0 19
37329: PPUSH
37330: LD_INT 1
37332: PPUSH
37333: LD_VAR 0 9
37337: PPUSH
37338: CALL_OW 2
37342: ST_TO_ADDR
37343: GO 37374
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37345: LD_ADDR_VAR 0 19
37349: PUSH
37350: LD_VAR 0 19
37354: PPUSH
37355: LD_VAR 0 19
37359: PUSH
37360: LD_INT 1
37362: PLUS
37363: PPUSH
37364: LD_VAR 0 9
37368: PPUSH
37369: CALL_OW 2
37373: ST_TO_ADDR
37374: GO 37302
37376: POP
37377: POP
// if tmp then
37378: LD_VAR 0 19
37382: IFFALSE 37394
// f := tmp ;
37384: LD_ADDR_VAR 0 12
37388: PUSH
37389: LD_VAR 0 19
37393: ST_TO_ADDR
// end ; x := personel [ i ] ;
37394: LD_ADDR_VAR 0 13
37398: PUSH
37399: LD_VAR 0 6
37403: PUSH
37404: LD_VAR 0 8
37408: ARRAY
37409: ST_TO_ADDR
// if x = - 1 then
37410: LD_VAR 0 13
37414: PUSH
37415: LD_INT 1
37417: NEG
37418: EQUAL
37419: IFFALSE 37628
// begin for j in f do
37421: LD_ADDR_VAR 0 9
37425: PUSH
37426: LD_VAR 0 12
37430: PUSH
37431: FOR_IN
37432: IFFALSE 37624
// repeat InitHc ;
37434: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37438: LD_VAR 0 9
37442: PPUSH
37443: CALL_OW 266
37447: PUSH
37448: LD_INT 5
37450: EQUAL
37451: IFFALSE 37521
// begin if UnitsInside ( j ) < 3 then
37453: LD_VAR 0 9
37457: PPUSH
37458: CALL_OW 313
37462: PUSH
37463: LD_INT 3
37465: LESS
37466: IFFALSE 37502
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37468: LD_INT 0
37470: PPUSH
37471: LD_INT 5
37473: PUSH
37474: LD_INT 8
37476: PUSH
37477: LD_INT 9
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: LIST
37484: PUSH
37485: LD_VAR 0 17
37489: ARRAY
37490: PPUSH
37491: LD_VAR 0 4
37495: PPUSH
37496: CALL_OW 380
37500: GO 37519
// PrepareHuman ( false , i , skill ) ;
37502: LD_INT 0
37504: PPUSH
37505: LD_VAR 0 8
37509: PPUSH
37510: LD_VAR 0 4
37514: PPUSH
37515: CALL_OW 380
// end else
37519: GO 37538
// PrepareHuman ( false , i , skill ) ;
37521: LD_INT 0
37523: PPUSH
37524: LD_VAR 0 8
37528: PPUSH
37529: LD_VAR 0 4
37533: PPUSH
37534: CALL_OW 380
// un := CreateHuman ;
37538: LD_ADDR_VAR 0 14
37542: PUSH
37543: CALL_OW 44
37547: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37548: LD_ADDR_VAR 0 7
37552: PUSH
37553: LD_VAR 0 7
37557: PPUSH
37558: LD_INT 1
37560: PPUSH
37561: LD_VAR 0 14
37565: PPUSH
37566: CALL_OW 2
37570: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37571: LD_VAR 0 14
37575: PPUSH
37576: LD_VAR 0 9
37580: PPUSH
37581: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37585: LD_VAR 0 9
37589: PPUSH
37590: CALL_OW 313
37594: PUSH
37595: LD_INT 6
37597: EQUAL
37598: PUSH
37599: LD_VAR 0 9
37603: PPUSH
37604: CALL_OW 266
37608: PUSH
37609: LD_INT 32
37611: PUSH
37612: LD_INT 31
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: IN
37619: OR
37620: IFFALSE 37434
37622: GO 37431
37624: POP
37625: POP
// end else
37626: GO 38008
// for j = 1 to x do
37628: LD_ADDR_VAR 0 9
37632: PUSH
37633: DOUBLE
37634: LD_INT 1
37636: DEC
37637: ST_TO_ADDR
37638: LD_VAR 0 13
37642: PUSH
37643: FOR_TO
37644: IFFALSE 38006
// begin InitHc ;
37646: CALL_OW 19
// if not f then
37650: LD_VAR 0 12
37654: NOT
37655: IFFALSE 37744
// begin PrepareHuman ( false , i , skill ) ;
37657: LD_INT 0
37659: PPUSH
37660: LD_VAR 0 8
37664: PPUSH
37665: LD_VAR 0 4
37669: PPUSH
37670: CALL_OW 380
// un := CreateHuman ;
37674: LD_ADDR_VAR 0 14
37678: PUSH
37679: CALL_OW 44
37683: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37684: LD_ADDR_VAR 0 7
37688: PUSH
37689: LD_VAR 0 7
37693: PPUSH
37694: LD_INT 1
37696: PPUSH
37697: LD_VAR 0 14
37701: PPUSH
37702: CALL_OW 2
37706: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37707: LD_VAR 0 14
37711: PPUSH
37712: LD_VAR 0 1
37716: PPUSH
37717: CALL_OW 250
37721: PPUSH
37722: LD_VAR 0 1
37726: PPUSH
37727: CALL_OW 251
37731: PPUSH
37732: LD_INT 10
37734: PPUSH
37735: LD_INT 0
37737: PPUSH
37738: CALL_OW 50
// continue ;
37742: GO 37643
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37744: LD_VAR 0 12
37748: PUSH
37749: LD_INT 1
37751: ARRAY
37752: PPUSH
37753: CALL_OW 313
37757: PUSH
37758: LD_VAR 0 12
37762: PUSH
37763: LD_INT 1
37765: ARRAY
37766: PPUSH
37767: CALL_OW 266
37771: PUSH
37772: LD_INT 32
37774: PUSH
37775: LD_INT 31
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: IN
37782: AND
37783: PUSH
37784: LD_VAR 0 12
37788: PUSH
37789: LD_INT 1
37791: ARRAY
37792: PPUSH
37793: CALL_OW 313
37797: PUSH
37798: LD_INT 6
37800: EQUAL
37801: OR
37802: IFFALSE 37822
// f := Delete ( f , 1 ) ;
37804: LD_ADDR_VAR 0 12
37808: PUSH
37809: LD_VAR 0 12
37813: PPUSH
37814: LD_INT 1
37816: PPUSH
37817: CALL_OW 3
37821: ST_TO_ADDR
// if not f then
37822: LD_VAR 0 12
37826: NOT
37827: IFFALSE 37845
// begin x := x + 2 ;
37829: LD_ADDR_VAR 0 13
37833: PUSH
37834: LD_VAR 0 13
37838: PUSH
37839: LD_INT 2
37841: PLUS
37842: ST_TO_ADDR
// continue ;
37843: GO 37643
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37845: LD_VAR 0 12
37849: PUSH
37850: LD_INT 1
37852: ARRAY
37853: PPUSH
37854: CALL_OW 266
37858: PUSH
37859: LD_INT 5
37861: EQUAL
37862: IFFALSE 37936
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37864: LD_VAR 0 12
37868: PUSH
37869: LD_INT 1
37871: ARRAY
37872: PPUSH
37873: CALL_OW 313
37877: PUSH
37878: LD_INT 3
37880: LESS
37881: IFFALSE 37917
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37883: LD_INT 0
37885: PPUSH
37886: LD_INT 5
37888: PUSH
37889: LD_INT 8
37891: PUSH
37892: LD_INT 9
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: LIST
37899: PUSH
37900: LD_VAR 0 17
37904: ARRAY
37905: PPUSH
37906: LD_VAR 0 4
37910: PPUSH
37911: CALL_OW 380
37915: GO 37934
// PrepareHuman ( false , i , skill ) ;
37917: LD_INT 0
37919: PPUSH
37920: LD_VAR 0 8
37924: PPUSH
37925: LD_VAR 0 4
37929: PPUSH
37930: CALL_OW 380
// end else
37934: GO 37953
// PrepareHuman ( false , i , skill ) ;
37936: LD_INT 0
37938: PPUSH
37939: LD_VAR 0 8
37943: PPUSH
37944: LD_VAR 0 4
37948: PPUSH
37949: CALL_OW 380
// un := CreateHuman ;
37953: LD_ADDR_VAR 0 14
37957: PUSH
37958: CALL_OW 44
37962: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37963: LD_ADDR_VAR 0 7
37967: PUSH
37968: LD_VAR 0 7
37972: PPUSH
37973: LD_INT 1
37975: PPUSH
37976: LD_VAR 0 14
37980: PPUSH
37981: CALL_OW 2
37985: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37986: LD_VAR 0 14
37990: PPUSH
37991: LD_VAR 0 12
37995: PUSH
37996: LD_INT 1
37998: ARRAY
37999: PPUSH
38000: CALL_OW 52
// end ;
38004: GO 37643
38006: POP
38007: POP
// end ;
38008: GO 36945
38010: POP
38011: POP
// result := result ^ buildings ;
38012: LD_ADDR_VAR 0 7
38016: PUSH
38017: LD_VAR 0 7
38021: PUSH
38022: LD_VAR 0 18
38026: ADD
38027: ST_TO_ADDR
// end else
38028: GO 38171
// begin for i = 1 to personel do
38030: LD_ADDR_VAR 0 8
38034: PUSH
38035: DOUBLE
38036: LD_INT 1
38038: DEC
38039: ST_TO_ADDR
38040: LD_VAR 0 6
38044: PUSH
38045: FOR_TO
38046: IFFALSE 38169
// begin if i > 4 then
38048: LD_VAR 0 8
38052: PUSH
38053: LD_INT 4
38055: GREATER
38056: IFFALSE 38060
// break ;
38058: GO 38169
// x := personel [ i ] ;
38060: LD_ADDR_VAR 0 13
38064: PUSH
38065: LD_VAR 0 6
38069: PUSH
38070: LD_VAR 0 8
38074: ARRAY
38075: ST_TO_ADDR
// if x = - 1 then
38076: LD_VAR 0 13
38080: PUSH
38081: LD_INT 1
38083: NEG
38084: EQUAL
38085: IFFALSE 38089
// continue ;
38087: GO 38045
// PrepareHuman ( false , i , skill ) ;
38089: LD_INT 0
38091: PPUSH
38092: LD_VAR 0 8
38096: PPUSH
38097: LD_VAR 0 4
38101: PPUSH
38102: CALL_OW 380
// un := CreateHuman ;
38106: LD_ADDR_VAR 0 14
38110: PUSH
38111: CALL_OW 44
38115: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38116: LD_VAR 0 14
38120: PPUSH
38121: LD_VAR 0 1
38125: PPUSH
38126: CALL_OW 250
38130: PPUSH
38131: LD_VAR 0 1
38135: PPUSH
38136: CALL_OW 251
38140: PPUSH
38141: LD_INT 10
38143: PPUSH
38144: LD_INT 0
38146: PPUSH
38147: CALL_OW 50
// result := result ^ un ;
38151: LD_ADDR_VAR 0 7
38155: PUSH
38156: LD_VAR 0 7
38160: PUSH
38161: LD_VAR 0 14
38165: ADD
38166: ST_TO_ADDR
// end ;
38167: GO 38045
38169: POP
38170: POP
// end ; end ;
38171: LD_VAR 0 7
38175: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38176: LD_INT 0
38178: PPUSH
38179: PPUSH
38180: PPUSH
38181: PPUSH
38182: PPUSH
38183: PPUSH
38184: PPUSH
38185: PPUSH
38186: PPUSH
38187: PPUSH
38188: PPUSH
38189: PPUSH
38190: PPUSH
38191: PPUSH
38192: PPUSH
38193: PPUSH
// result := false ;
38194: LD_ADDR_VAR 0 3
38198: PUSH
38199: LD_INT 0
38201: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38202: LD_VAR 0 1
38206: NOT
38207: PUSH
38208: LD_VAR 0 1
38212: PPUSH
38213: CALL_OW 266
38217: PUSH
38218: LD_INT 32
38220: PUSH
38221: LD_INT 33
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: IN
38228: NOT
38229: OR
38230: IFFALSE 38234
// exit ;
38232: GO 39343
// nat := GetNation ( tower ) ;
38234: LD_ADDR_VAR 0 12
38238: PUSH
38239: LD_VAR 0 1
38243: PPUSH
38244: CALL_OW 248
38248: ST_TO_ADDR
// side := GetSide ( tower ) ;
38249: LD_ADDR_VAR 0 16
38253: PUSH
38254: LD_VAR 0 1
38258: PPUSH
38259: CALL_OW 255
38263: ST_TO_ADDR
// x := GetX ( tower ) ;
38264: LD_ADDR_VAR 0 10
38268: PUSH
38269: LD_VAR 0 1
38273: PPUSH
38274: CALL_OW 250
38278: ST_TO_ADDR
// y := GetY ( tower ) ;
38279: LD_ADDR_VAR 0 11
38283: PUSH
38284: LD_VAR 0 1
38288: PPUSH
38289: CALL_OW 251
38293: ST_TO_ADDR
// if not x or not y then
38294: LD_VAR 0 10
38298: NOT
38299: PUSH
38300: LD_VAR 0 11
38304: NOT
38305: OR
38306: IFFALSE 38310
// exit ;
38308: GO 39343
// weapon := 0 ;
38310: LD_ADDR_VAR 0 18
38314: PUSH
38315: LD_INT 0
38317: ST_TO_ADDR
// fac_list := [ ] ;
38318: LD_ADDR_VAR 0 17
38322: PUSH
38323: EMPTY
38324: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38325: LD_ADDR_VAR 0 6
38329: PUSH
38330: LD_VAR 0 1
38334: PPUSH
38335: CALL_OW 274
38339: PPUSH
38340: LD_VAR 0 2
38344: PPUSH
38345: LD_INT 0
38347: PPUSH
38348: CALL 35914 0 3
38352: PPUSH
38353: LD_INT 30
38355: PUSH
38356: LD_INT 3
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PPUSH
38363: CALL_OW 72
38367: ST_TO_ADDR
// if not factories then
38368: LD_VAR 0 6
38372: NOT
38373: IFFALSE 38377
// exit ;
38375: GO 39343
// for i in factories do
38377: LD_ADDR_VAR 0 8
38381: PUSH
38382: LD_VAR 0 6
38386: PUSH
38387: FOR_IN
38388: IFFALSE 38413
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38390: LD_ADDR_VAR 0 17
38394: PUSH
38395: LD_VAR 0 17
38399: PUSH
38400: LD_VAR 0 8
38404: PPUSH
38405: CALL_OW 478
38409: UNION
38410: ST_TO_ADDR
38411: GO 38387
38413: POP
38414: POP
// if not fac_list then
38415: LD_VAR 0 17
38419: NOT
38420: IFFALSE 38424
// exit ;
38422: GO 39343
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38424: LD_ADDR_VAR 0 5
38428: PUSH
38429: LD_INT 4
38431: PUSH
38432: LD_INT 5
38434: PUSH
38435: LD_INT 9
38437: PUSH
38438: LD_INT 10
38440: PUSH
38441: LD_INT 6
38443: PUSH
38444: LD_INT 7
38446: PUSH
38447: LD_INT 11
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: PUSH
38459: LD_INT 27
38461: PUSH
38462: LD_INT 28
38464: PUSH
38465: LD_INT 26
38467: PUSH
38468: LD_INT 30
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 43
38479: PUSH
38480: LD_INT 44
38482: PUSH
38483: LD_INT 46
38485: PUSH
38486: LD_INT 45
38488: PUSH
38489: LD_INT 47
38491: PUSH
38492: LD_INT 49
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: LIST
38507: PUSH
38508: LD_VAR 0 12
38512: ARRAY
38513: ST_TO_ADDR
// list := list isect fac_list ;
38514: LD_ADDR_VAR 0 5
38518: PUSH
38519: LD_VAR 0 5
38523: PUSH
38524: LD_VAR 0 17
38528: ISECT
38529: ST_TO_ADDR
// if not list then
38530: LD_VAR 0 5
38534: NOT
38535: IFFALSE 38539
// exit ;
38537: GO 39343
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38539: LD_VAR 0 12
38543: PUSH
38544: LD_INT 3
38546: EQUAL
38547: PUSH
38548: LD_INT 49
38550: PUSH
38551: LD_VAR 0 5
38555: IN
38556: AND
38557: PUSH
38558: LD_INT 31
38560: PPUSH
38561: LD_VAR 0 16
38565: PPUSH
38566: CALL_OW 321
38570: PUSH
38571: LD_INT 2
38573: EQUAL
38574: AND
38575: IFFALSE 38635
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38577: LD_INT 22
38579: PUSH
38580: LD_VAR 0 16
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 35
38591: PUSH
38592: LD_INT 49
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 91
38601: PUSH
38602: LD_VAR 0 1
38606: PUSH
38607: LD_INT 10
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: LIST
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: LIST
38619: PPUSH
38620: CALL_OW 69
38624: NOT
38625: IFFALSE 38635
// weapon := ru_time_lapser ;
38627: LD_ADDR_VAR 0 18
38631: PUSH
38632: LD_INT 49
38634: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38635: LD_VAR 0 12
38639: PUSH
38640: LD_INT 1
38642: PUSH
38643: LD_INT 2
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: IN
38650: PUSH
38651: LD_INT 11
38653: PUSH
38654: LD_VAR 0 5
38658: IN
38659: PUSH
38660: LD_INT 30
38662: PUSH
38663: LD_VAR 0 5
38667: IN
38668: OR
38669: AND
38670: PUSH
38671: LD_INT 6
38673: PPUSH
38674: LD_VAR 0 16
38678: PPUSH
38679: CALL_OW 321
38683: PUSH
38684: LD_INT 2
38686: EQUAL
38687: AND
38688: IFFALSE 38853
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38690: LD_INT 22
38692: PUSH
38693: LD_VAR 0 16
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 2
38704: PUSH
38705: LD_INT 35
38707: PUSH
38708: LD_INT 11
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 35
38717: PUSH
38718: LD_INT 30
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 91
38732: PUSH
38733: LD_VAR 0 1
38737: PUSH
38738: LD_INT 18
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: LIST
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: LIST
38750: PPUSH
38751: CALL_OW 69
38755: NOT
38756: PUSH
38757: LD_INT 22
38759: PUSH
38760: LD_VAR 0 16
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 2
38771: PUSH
38772: LD_INT 30
38774: PUSH
38775: LD_INT 32
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 30
38784: PUSH
38785: LD_INT 33
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 91
38799: PUSH
38800: LD_VAR 0 1
38804: PUSH
38805: LD_INT 12
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: LIST
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: LIST
38817: PUSH
38818: EMPTY
38819: LIST
38820: PPUSH
38821: CALL_OW 69
38825: PUSH
38826: LD_INT 2
38828: GREATER
38829: AND
38830: IFFALSE 38853
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38832: LD_ADDR_VAR 0 18
38836: PUSH
38837: LD_INT 11
38839: PUSH
38840: LD_INT 30
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_VAR 0 12
38851: ARRAY
38852: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38853: LD_VAR 0 18
38857: NOT
38858: PUSH
38859: LD_INT 40
38861: PPUSH
38862: LD_VAR 0 16
38866: PPUSH
38867: CALL_OW 321
38871: PUSH
38872: LD_INT 2
38874: EQUAL
38875: AND
38876: PUSH
38877: LD_INT 7
38879: PUSH
38880: LD_VAR 0 5
38884: IN
38885: PUSH
38886: LD_INT 28
38888: PUSH
38889: LD_VAR 0 5
38893: IN
38894: OR
38895: PUSH
38896: LD_INT 45
38898: PUSH
38899: LD_VAR 0 5
38903: IN
38904: OR
38905: AND
38906: IFFALSE 39160
// begin hex := GetHexInfo ( x , y ) ;
38908: LD_ADDR_VAR 0 4
38912: PUSH
38913: LD_VAR 0 10
38917: PPUSH
38918: LD_VAR 0 11
38922: PPUSH
38923: CALL_OW 546
38927: ST_TO_ADDR
// if hex [ 1 ] then
38928: LD_VAR 0 4
38932: PUSH
38933: LD_INT 1
38935: ARRAY
38936: IFFALSE 38940
// exit ;
38938: GO 39343
// height := hex [ 2 ] ;
38940: LD_ADDR_VAR 0 15
38944: PUSH
38945: LD_VAR 0 4
38949: PUSH
38950: LD_INT 2
38952: ARRAY
38953: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38954: LD_ADDR_VAR 0 14
38958: PUSH
38959: LD_INT 0
38961: PUSH
38962: LD_INT 2
38964: PUSH
38965: LD_INT 3
38967: PUSH
38968: LD_INT 5
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: ST_TO_ADDR
// for i in tmp do
38977: LD_ADDR_VAR 0 8
38981: PUSH
38982: LD_VAR 0 14
38986: PUSH
38987: FOR_IN
38988: IFFALSE 39158
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38990: LD_ADDR_VAR 0 9
38994: PUSH
38995: LD_VAR 0 10
38999: PPUSH
39000: LD_VAR 0 8
39004: PPUSH
39005: LD_INT 5
39007: PPUSH
39008: CALL_OW 272
39012: PUSH
39013: LD_VAR 0 11
39017: PPUSH
39018: LD_VAR 0 8
39022: PPUSH
39023: LD_INT 5
39025: PPUSH
39026: CALL_OW 273
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39035: LD_VAR 0 9
39039: PUSH
39040: LD_INT 1
39042: ARRAY
39043: PPUSH
39044: LD_VAR 0 9
39048: PUSH
39049: LD_INT 2
39051: ARRAY
39052: PPUSH
39053: CALL_OW 488
39057: IFFALSE 39156
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39059: LD_ADDR_VAR 0 4
39063: PUSH
39064: LD_VAR 0 9
39068: PUSH
39069: LD_INT 1
39071: ARRAY
39072: PPUSH
39073: LD_VAR 0 9
39077: PUSH
39078: LD_INT 2
39080: ARRAY
39081: PPUSH
39082: CALL_OW 546
39086: ST_TO_ADDR
// if hex [ 1 ] then
39087: LD_VAR 0 4
39091: PUSH
39092: LD_INT 1
39094: ARRAY
39095: IFFALSE 39099
// continue ;
39097: GO 38987
// h := hex [ 2 ] ;
39099: LD_ADDR_VAR 0 13
39103: PUSH
39104: LD_VAR 0 4
39108: PUSH
39109: LD_INT 2
39111: ARRAY
39112: ST_TO_ADDR
// if h + 7 < height then
39113: LD_VAR 0 13
39117: PUSH
39118: LD_INT 7
39120: PLUS
39121: PUSH
39122: LD_VAR 0 15
39126: LESS
39127: IFFALSE 39156
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39129: LD_ADDR_VAR 0 18
39133: PUSH
39134: LD_INT 7
39136: PUSH
39137: LD_INT 28
39139: PUSH
39140: LD_INT 45
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: LIST
39147: PUSH
39148: LD_VAR 0 12
39152: ARRAY
39153: ST_TO_ADDR
// break ;
39154: GO 39158
// end ; end ; end ;
39156: GO 38987
39158: POP
39159: POP
// end ; if not weapon then
39160: LD_VAR 0 18
39164: NOT
39165: IFFALSE 39225
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39167: LD_ADDR_VAR 0 5
39171: PUSH
39172: LD_VAR 0 5
39176: PUSH
39177: LD_INT 11
39179: PUSH
39180: LD_INT 30
39182: PUSH
39183: LD_INT 49
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: LIST
39190: DIFF
39191: ST_TO_ADDR
// if not list then
39192: LD_VAR 0 5
39196: NOT
39197: IFFALSE 39201
// exit ;
39199: GO 39343
// weapon := list [ rand ( 1 , list ) ] ;
39201: LD_ADDR_VAR 0 18
39205: PUSH
39206: LD_VAR 0 5
39210: PUSH
39211: LD_INT 1
39213: PPUSH
39214: LD_VAR 0 5
39218: PPUSH
39219: CALL_OW 12
39223: ARRAY
39224: ST_TO_ADDR
// end ; if weapon then
39225: LD_VAR 0 18
39229: IFFALSE 39343
// begin tmp := CostOfWeapon ( weapon ) ;
39231: LD_ADDR_VAR 0 14
39235: PUSH
39236: LD_VAR 0 18
39240: PPUSH
39241: CALL_OW 451
39245: ST_TO_ADDR
// j := GetBase ( tower ) ;
39246: LD_ADDR_VAR 0 9
39250: PUSH
39251: LD_VAR 0 1
39255: PPUSH
39256: CALL_OW 274
39260: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39261: LD_VAR 0 9
39265: PPUSH
39266: LD_INT 1
39268: PPUSH
39269: CALL_OW 275
39273: PUSH
39274: LD_VAR 0 14
39278: PUSH
39279: LD_INT 1
39281: ARRAY
39282: GREATEREQUAL
39283: PUSH
39284: LD_VAR 0 9
39288: PPUSH
39289: LD_INT 2
39291: PPUSH
39292: CALL_OW 275
39296: PUSH
39297: LD_VAR 0 14
39301: PUSH
39302: LD_INT 2
39304: ARRAY
39305: GREATEREQUAL
39306: AND
39307: PUSH
39308: LD_VAR 0 9
39312: PPUSH
39313: LD_INT 3
39315: PPUSH
39316: CALL_OW 275
39320: PUSH
39321: LD_VAR 0 14
39325: PUSH
39326: LD_INT 3
39328: ARRAY
39329: GREATEREQUAL
39330: AND
39331: IFFALSE 39343
// result := weapon ;
39333: LD_ADDR_VAR 0 3
39337: PUSH
39338: LD_VAR 0 18
39342: ST_TO_ADDR
// end ; end ;
39343: LD_VAR 0 3
39347: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39348: LD_INT 0
39350: PPUSH
39351: PPUSH
// result := true ;
39352: LD_ADDR_VAR 0 3
39356: PUSH
39357: LD_INT 1
39359: ST_TO_ADDR
// if array1 = array2 then
39360: LD_VAR 0 1
39364: PUSH
39365: LD_VAR 0 2
39369: EQUAL
39370: IFFALSE 39430
// begin for i = 1 to array1 do
39372: LD_ADDR_VAR 0 4
39376: PUSH
39377: DOUBLE
39378: LD_INT 1
39380: DEC
39381: ST_TO_ADDR
39382: LD_VAR 0 1
39386: PUSH
39387: FOR_TO
39388: IFFALSE 39426
// if array1 [ i ] <> array2 [ i ] then
39390: LD_VAR 0 1
39394: PUSH
39395: LD_VAR 0 4
39399: ARRAY
39400: PUSH
39401: LD_VAR 0 2
39405: PUSH
39406: LD_VAR 0 4
39410: ARRAY
39411: NONEQUAL
39412: IFFALSE 39424
// begin result := false ;
39414: LD_ADDR_VAR 0 3
39418: PUSH
39419: LD_INT 0
39421: ST_TO_ADDR
// break ;
39422: GO 39426
// end ;
39424: GO 39387
39426: POP
39427: POP
// end else
39428: GO 39438
// result := false ;
39430: LD_ADDR_VAR 0 3
39434: PUSH
39435: LD_INT 0
39437: ST_TO_ADDR
// end ;
39438: LD_VAR 0 3
39442: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39443: LD_INT 0
39445: PPUSH
39446: PPUSH
// if not array1 or not array2 then
39447: LD_VAR 0 1
39451: NOT
39452: PUSH
39453: LD_VAR 0 2
39457: NOT
39458: OR
39459: IFFALSE 39463
// exit ;
39461: GO 39527
// result := true ;
39463: LD_ADDR_VAR 0 3
39467: PUSH
39468: LD_INT 1
39470: ST_TO_ADDR
// for i = 1 to array1 do
39471: LD_ADDR_VAR 0 4
39475: PUSH
39476: DOUBLE
39477: LD_INT 1
39479: DEC
39480: ST_TO_ADDR
39481: LD_VAR 0 1
39485: PUSH
39486: FOR_TO
39487: IFFALSE 39525
// if array1 [ i ] <> array2 [ i ] then
39489: LD_VAR 0 1
39493: PUSH
39494: LD_VAR 0 4
39498: ARRAY
39499: PUSH
39500: LD_VAR 0 2
39504: PUSH
39505: LD_VAR 0 4
39509: ARRAY
39510: NONEQUAL
39511: IFFALSE 39523
// begin result := false ;
39513: LD_ADDR_VAR 0 3
39517: PUSH
39518: LD_INT 0
39520: ST_TO_ADDR
// break ;
39521: GO 39525
// end ;
39523: GO 39486
39525: POP
39526: POP
// end ;
39527: LD_VAR 0 3
39531: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39532: LD_INT 0
39534: PPUSH
39535: PPUSH
39536: PPUSH
// pom := GetBase ( fac ) ;
39537: LD_ADDR_VAR 0 5
39541: PUSH
39542: LD_VAR 0 1
39546: PPUSH
39547: CALL_OW 274
39551: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39552: LD_ADDR_VAR 0 4
39556: PUSH
39557: LD_VAR 0 2
39561: PUSH
39562: LD_INT 1
39564: ARRAY
39565: PPUSH
39566: LD_VAR 0 2
39570: PUSH
39571: LD_INT 2
39573: ARRAY
39574: PPUSH
39575: LD_VAR 0 2
39579: PUSH
39580: LD_INT 3
39582: ARRAY
39583: PPUSH
39584: LD_VAR 0 2
39588: PUSH
39589: LD_INT 4
39591: ARRAY
39592: PPUSH
39593: CALL_OW 449
39597: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39598: LD_ADDR_VAR 0 3
39602: PUSH
39603: LD_VAR 0 5
39607: PPUSH
39608: LD_INT 1
39610: PPUSH
39611: CALL_OW 275
39615: PUSH
39616: LD_VAR 0 4
39620: PUSH
39621: LD_INT 1
39623: ARRAY
39624: GREATEREQUAL
39625: PUSH
39626: LD_VAR 0 5
39630: PPUSH
39631: LD_INT 2
39633: PPUSH
39634: CALL_OW 275
39638: PUSH
39639: LD_VAR 0 4
39643: PUSH
39644: LD_INT 2
39646: ARRAY
39647: GREATEREQUAL
39648: AND
39649: PUSH
39650: LD_VAR 0 5
39654: PPUSH
39655: LD_INT 3
39657: PPUSH
39658: CALL_OW 275
39662: PUSH
39663: LD_VAR 0 4
39667: PUSH
39668: LD_INT 3
39670: ARRAY
39671: GREATEREQUAL
39672: AND
39673: ST_TO_ADDR
// end ;
39674: LD_VAR 0 3
39678: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39679: LD_INT 0
39681: PPUSH
39682: PPUSH
39683: PPUSH
39684: PPUSH
// pom := GetBase ( building ) ;
39685: LD_ADDR_VAR 0 3
39689: PUSH
39690: LD_VAR 0 1
39694: PPUSH
39695: CALL_OW 274
39699: ST_TO_ADDR
// if not pom then
39700: LD_VAR 0 3
39704: NOT
39705: IFFALSE 39709
// exit ;
39707: GO 39879
// btype := GetBType ( building ) ;
39709: LD_ADDR_VAR 0 5
39713: PUSH
39714: LD_VAR 0 1
39718: PPUSH
39719: CALL_OW 266
39723: ST_TO_ADDR
// if btype = b_armoury then
39724: LD_VAR 0 5
39728: PUSH
39729: LD_INT 4
39731: EQUAL
39732: IFFALSE 39742
// btype := b_barracks ;
39734: LD_ADDR_VAR 0 5
39738: PUSH
39739: LD_INT 5
39741: ST_TO_ADDR
// if btype = b_depot then
39742: LD_VAR 0 5
39746: PUSH
39747: LD_INT 0
39749: EQUAL
39750: IFFALSE 39760
// btype := b_warehouse ;
39752: LD_ADDR_VAR 0 5
39756: PUSH
39757: LD_INT 1
39759: ST_TO_ADDR
// if btype = b_workshop then
39760: LD_VAR 0 5
39764: PUSH
39765: LD_INT 2
39767: EQUAL
39768: IFFALSE 39778
// btype := b_factory ;
39770: LD_ADDR_VAR 0 5
39774: PUSH
39775: LD_INT 3
39777: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39778: LD_ADDR_VAR 0 4
39782: PUSH
39783: LD_VAR 0 5
39787: PPUSH
39788: LD_VAR 0 1
39792: PPUSH
39793: CALL_OW 248
39797: PPUSH
39798: CALL_OW 450
39802: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39803: LD_ADDR_VAR 0 2
39807: PUSH
39808: LD_VAR 0 3
39812: PPUSH
39813: LD_INT 1
39815: PPUSH
39816: CALL_OW 275
39820: PUSH
39821: LD_VAR 0 4
39825: PUSH
39826: LD_INT 1
39828: ARRAY
39829: GREATEREQUAL
39830: PUSH
39831: LD_VAR 0 3
39835: PPUSH
39836: LD_INT 2
39838: PPUSH
39839: CALL_OW 275
39843: PUSH
39844: LD_VAR 0 4
39848: PUSH
39849: LD_INT 2
39851: ARRAY
39852: GREATEREQUAL
39853: AND
39854: PUSH
39855: LD_VAR 0 3
39859: PPUSH
39860: LD_INT 3
39862: PPUSH
39863: CALL_OW 275
39867: PUSH
39868: LD_VAR 0 4
39872: PUSH
39873: LD_INT 3
39875: ARRAY
39876: GREATEREQUAL
39877: AND
39878: ST_TO_ADDR
// end ;
39879: LD_VAR 0 2
39883: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39884: LD_INT 0
39886: PPUSH
39887: PPUSH
39888: PPUSH
// pom := GetBase ( building ) ;
39889: LD_ADDR_VAR 0 4
39893: PUSH
39894: LD_VAR 0 1
39898: PPUSH
39899: CALL_OW 274
39903: ST_TO_ADDR
// if not pom then
39904: LD_VAR 0 4
39908: NOT
39909: IFFALSE 39913
// exit ;
39911: GO 40014
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39913: LD_ADDR_VAR 0 5
39917: PUSH
39918: LD_VAR 0 2
39922: PPUSH
39923: LD_VAR 0 1
39927: PPUSH
39928: CALL_OW 248
39932: PPUSH
39933: CALL_OW 450
39937: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39938: LD_ADDR_VAR 0 3
39942: PUSH
39943: LD_VAR 0 4
39947: PPUSH
39948: LD_INT 1
39950: PPUSH
39951: CALL_OW 275
39955: PUSH
39956: LD_VAR 0 5
39960: PUSH
39961: LD_INT 1
39963: ARRAY
39964: GREATEREQUAL
39965: PUSH
39966: LD_VAR 0 4
39970: PPUSH
39971: LD_INT 2
39973: PPUSH
39974: CALL_OW 275
39978: PUSH
39979: LD_VAR 0 5
39983: PUSH
39984: LD_INT 2
39986: ARRAY
39987: GREATEREQUAL
39988: AND
39989: PUSH
39990: LD_VAR 0 4
39994: PPUSH
39995: LD_INT 3
39997: PPUSH
39998: CALL_OW 275
40002: PUSH
40003: LD_VAR 0 5
40007: PUSH
40008: LD_INT 3
40010: ARRAY
40011: GREATEREQUAL
40012: AND
40013: ST_TO_ADDR
// end ;
40014: LD_VAR 0 3
40018: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40019: LD_INT 0
40021: PPUSH
40022: PPUSH
40023: PPUSH
40024: PPUSH
40025: PPUSH
40026: PPUSH
40027: PPUSH
40028: PPUSH
40029: PPUSH
40030: PPUSH
40031: PPUSH
// result := false ;
40032: LD_ADDR_VAR 0 8
40036: PUSH
40037: LD_INT 0
40039: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40040: LD_VAR 0 5
40044: NOT
40045: PUSH
40046: LD_VAR 0 1
40050: NOT
40051: OR
40052: PUSH
40053: LD_VAR 0 2
40057: NOT
40058: OR
40059: PUSH
40060: LD_VAR 0 3
40064: NOT
40065: OR
40066: IFFALSE 40070
// exit ;
40068: GO 40884
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40070: LD_ADDR_VAR 0 14
40074: PUSH
40075: LD_VAR 0 1
40079: PPUSH
40080: LD_VAR 0 2
40084: PPUSH
40085: LD_VAR 0 3
40089: PPUSH
40090: LD_VAR 0 4
40094: PPUSH
40095: LD_VAR 0 5
40099: PUSH
40100: LD_INT 1
40102: ARRAY
40103: PPUSH
40104: CALL_OW 248
40108: PPUSH
40109: LD_INT 0
40111: PPUSH
40112: CALL 42121 0 6
40116: ST_TO_ADDR
// if not hexes then
40117: LD_VAR 0 14
40121: NOT
40122: IFFALSE 40126
// exit ;
40124: GO 40884
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40126: LD_ADDR_VAR 0 17
40130: PUSH
40131: LD_VAR 0 5
40135: PPUSH
40136: LD_INT 22
40138: PUSH
40139: LD_VAR 0 13
40143: PPUSH
40144: CALL_OW 255
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 2
40155: PUSH
40156: LD_INT 30
40158: PUSH
40159: LD_INT 0
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 30
40168: PUSH
40169: LD_INT 1
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: LIST
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PPUSH
40185: CALL_OW 72
40189: ST_TO_ADDR
// for i = 1 to hexes do
40190: LD_ADDR_VAR 0 9
40194: PUSH
40195: DOUBLE
40196: LD_INT 1
40198: DEC
40199: ST_TO_ADDR
40200: LD_VAR 0 14
40204: PUSH
40205: FOR_TO
40206: IFFALSE 40882
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40208: LD_ADDR_VAR 0 13
40212: PUSH
40213: LD_VAR 0 14
40217: PUSH
40218: LD_VAR 0 9
40222: ARRAY
40223: PUSH
40224: LD_INT 1
40226: ARRAY
40227: PPUSH
40228: LD_VAR 0 14
40232: PUSH
40233: LD_VAR 0 9
40237: ARRAY
40238: PUSH
40239: LD_INT 2
40241: ARRAY
40242: PPUSH
40243: CALL_OW 428
40247: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40248: LD_VAR 0 14
40252: PUSH
40253: LD_VAR 0 9
40257: ARRAY
40258: PUSH
40259: LD_INT 1
40261: ARRAY
40262: PPUSH
40263: LD_VAR 0 14
40267: PUSH
40268: LD_VAR 0 9
40272: ARRAY
40273: PUSH
40274: LD_INT 2
40276: ARRAY
40277: PPUSH
40278: CALL_OW 351
40282: PUSH
40283: LD_VAR 0 14
40287: PUSH
40288: LD_VAR 0 9
40292: ARRAY
40293: PUSH
40294: LD_INT 1
40296: ARRAY
40297: PPUSH
40298: LD_VAR 0 14
40302: PUSH
40303: LD_VAR 0 9
40307: ARRAY
40308: PUSH
40309: LD_INT 2
40311: ARRAY
40312: PPUSH
40313: CALL_OW 488
40317: NOT
40318: OR
40319: PUSH
40320: LD_VAR 0 13
40324: PPUSH
40325: CALL_OW 247
40329: PUSH
40330: LD_INT 3
40332: EQUAL
40333: OR
40334: IFFALSE 40340
// exit ;
40336: POP
40337: POP
40338: GO 40884
// if not tmp then
40340: LD_VAR 0 13
40344: NOT
40345: IFFALSE 40349
// continue ;
40347: GO 40205
// result := true ;
40349: LD_ADDR_VAR 0 8
40353: PUSH
40354: LD_INT 1
40356: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40357: LD_VAR 0 6
40361: PUSH
40362: LD_VAR 0 13
40366: PPUSH
40367: CALL_OW 247
40371: PUSH
40372: LD_INT 2
40374: EQUAL
40375: AND
40376: PUSH
40377: LD_VAR 0 13
40381: PPUSH
40382: CALL_OW 263
40386: PUSH
40387: LD_INT 1
40389: EQUAL
40390: AND
40391: IFFALSE 40555
// begin if IsDrivenBy ( tmp ) then
40393: LD_VAR 0 13
40397: PPUSH
40398: CALL_OW 311
40402: IFFALSE 40406
// continue ;
40404: GO 40205
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40406: LD_VAR 0 6
40410: PPUSH
40411: LD_INT 3
40413: PUSH
40414: LD_INT 60
40416: PUSH
40417: EMPTY
40418: LIST
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 3
40426: PUSH
40427: LD_INT 55
40429: PUSH
40430: EMPTY
40431: LIST
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PPUSH
40441: CALL_OW 72
40445: IFFALSE 40553
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40447: LD_ADDR_VAR 0 18
40451: PUSH
40452: LD_VAR 0 6
40456: PPUSH
40457: LD_INT 3
40459: PUSH
40460: LD_INT 60
40462: PUSH
40463: EMPTY
40464: LIST
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 3
40472: PUSH
40473: LD_INT 55
40475: PUSH
40476: EMPTY
40477: LIST
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PPUSH
40487: CALL_OW 72
40491: PUSH
40492: LD_INT 1
40494: ARRAY
40495: ST_TO_ADDR
// if IsInUnit ( driver ) then
40496: LD_VAR 0 18
40500: PPUSH
40501: CALL_OW 310
40505: IFFALSE 40516
// ComExit ( driver ) ;
40507: LD_VAR 0 18
40511: PPUSH
40512: CALL 65826 0 1
// AddComEnterUnit ( driver , tmp ) ;
40516: LD_VAR 0 18
40520: PPUSH
40521: LD_VAR 0 13
40525: PPUSH
40526: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40530: LD_VAR 0 18
40534: PPUSH
40535: LD_VAR 0 7
40539: PPUSH
40540: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40544: LD_VAR 0 18
40548: PPUSH
40549: CALL_OW 181
// end ; continue ;
40553: GO 40205
// end ; if not cleaners or not tmp in cleaners then
40555: LD_VAR 0 6
40559: NOT
40560: PUSH
40561: LD_VAR 0 13
40565: PUSH
40566: LD_VAR 0 6
40570: IN
40571: NOT
40572: OR
40573: IFFALSE 40880
// begin if dep then
40575: LD_VAR 0 17
40579: IFFALSE 40715
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40581: LD_ADDR_VAR 0 16
40585: PUSH
40586: LD_VAR 0 17
40590: PUSH
40591: LD_INT 1
40593: ARRAY
40594: PPUSH
40595: CALL_OW 250
40599: PPUSH
40600: LD_VAR 0 17
40604: PUSH
40605: LD_INT 1
40607: ARRAY
40608: PPUSH
40609: CALL_OW 254
40613: PPUSH
40614: LD_INT 5
40616: PPUSH
40617: CALL_OW 272
40621: PUSH
40622: LD_VAR 0 17
40626: PUSH
40627: LD_INT 1
40629: ARRAY
40630: PPUSH
40631: CALL_OW 251
40635: PPUSH
40636: LD_VAR 0 17
40640: PUSH
40641: LD_INT 1
40643: ARRAY
40644: PPUSH
40645: CALL_OW 254
40649: PPUSH
40650: LD_INT 5
40652: PPUSH
40653: CALL_OW 273
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40662: LD_VAR 0 16
40666: PUSH
40667: LD_INT 1
40669: ARRAY
40670: PPUSH
40671: LD_VAR 0 16
40675: PUSH
40676: LD_INT 2
40678: ARRAY
40679: PPUSH
40680: CALL_OW 488
40684: IFFALSE 40715
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40686: LD_VAR 0 13
40690: PPUSH
40691: LD_VAR 0 16
40695: PUSH
40696: LD_INT 1
40698: ARRAY
40699: PPUSH
40700: LD_VAR 0 16
40704: PUSH
40705: LD_INT 2
40707: ARRAY
40708: PPUSH
40709: CALL_OW 111
// continue ;
40713: GO 40205
// end ; end ; r := GetDir ( tmp ) ;
40715: LD_ADDR_VAR 0 15
40719: PUSH
40720: LD_VAR 0 13
40724: PPUSH
40725: CALL_OW 254
40729: ST_TO_ADDR
// if r = 5 then
40730: LD_VAR 0 15
40734: PUSH
40735: LD_INT 5
40737: EQUAL
40738: IFFALSE 40748
// r := 0 ;
40740: LD_ADDR_VAR 0 15
40744: PUSH
40745: LD_INT 0
40747: ST_TO_ADDR
// for j = r to 5 do
40748: LD_ADDR_VAR 0 10
40752: PUSH
40753: DOUBLE
40754: LD_VAR 0 15
40758: DEC
40759: ST_TO_ADDR
40760: LD_INT 5
40762: PUSH
40763: FOR_TO
40764: IFFALSE 40878
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40766: LD_ADDR_VAR 0 11
40770: PUSH
40771: LD_VAR 0 13
40775: PPUSH
40776: CALL_OW 250
40780: PPUSH
40781: LD_VAR 0 10
40785: PPUSH
40786: LD_INT 2
40788: PPUSH
40789: CALL_OW 272
40793: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40794: LD_ADDR_VAR 0 12
40798: PUSH
40799: LD_VAR 0 13
40803: PPUSH
40804: CALL_OW 251
40808: PPUSH
40809: LD_VAR 0 10
40813: PPUSH
40814: LD_INT 2
40816: PPUSH
40817: CALL_OW 273
40821: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40822: LD_VAR 0 11
40826: PPUSH
40827: LD_VAR 0 12
40831: PPUSH
40832: CALL_OW 488
40836: PUSH
40837: LD_VAR 0 11
40841: PPUSH
40842: LD_VAR 0 12
40846: PPUSH
40847: CALL_OW 428
40851: NOT
40852: AND
40853: IFFALSE 40876
// begin ComMoveXY ( tmp , _x , _y ) ;
40855: LD_VAR 0 13
40859: PPUSH
40860: LD_VAR 0 11
40864: PPUSH
40865: LD_VAR 0 12
40869: PPUSH
40870: CALL_OW 111
// break ;
40874: GO 40878
// end ; end ;
40876: GO 40763
40878: POP
40879: POP
// end ; end ;
40880: GO 40205
40882: POP
40883: POP
// end ;
40884: LD_VAR 0 8
40888: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40889: LD_INT 0
40891: PPUSH
// result := true ;
40892: LD_ADDR_VAR 0 3
40896: PUSH
40897: LD_INT 1
40899: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40900: LD_VAR 0 2
40904: PUSH
40905: LD_INT 24
40907: DOUBLE
40908: EQUAL
40909: IFTRUE 40919
40911: LD_INT 33
40913: DOUBLE
40914: EQUAL
40915: IFTRUE 40919
40917: GO 40944
40919: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40920: LD_ADDR_VAR 0 3
40924: PUSH
40925: LD_INT 32
40927: PPUSH
40928: LD_VAR 0 1
40932: PPUSH
40933: CALL_OW 321
40937: PUSH
40938: LD_INT 2
40940: EQUAL
40941: ST_TO_ADDR
40942: GO 41264
40944: LD_INT 20
40946: DOUBLE
40947: EQUAL
40948: IFTRUE 40952
40950: GO 40977
40952: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40953: LD_ADDR_VAR 0 3
40957: PUSH
40958: LD_INT 6
40960: PPUSH
40961: LD_VAR 0 1
40965: PPUSH
40966: CALL_OW 321
40970: PUSH
40971: LD_INT 2
40973: EQUAL
40974: ST_TO_ADDR
40975: GO 41264
40977: LD_INT 22
40979: DOUBLE
40980: EQUAL
40981: IFTRUE 40991
40983: LD_INT 36
40985: DOUBLE
40986: EQUAL
40987: IFTRUE 40991
40989: GO 41016
40991: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40992: LD_ADDR_VAR 0 3
40996: PUSH
40997: LD_INT 15
40999: PPUSH
41000: LD_VAR 0 1
41004: PPUSH
41005: CALL_OW 321
41009: PUSH
41010: LD_INT 2
41012: EQUAL
41013: ST_TO_ADDR
41014: GO 41264
41016: LD_INT 30
41018: DOUBLE
41019: EQUAL
41020: IFTRUE 41024
41022: GO 41049
41024: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41025: LD_ADDR_VAR 0 3
41029: PUSH
41030: LD_INT 20
41032: PPUSH
41033: LD_VAR 0 1
41037: PPUSH
41038: CALL_OW 321
41042: PUSH
41043: LD_INT 2
41045: EQUAL
41046: ST_TO_ADDR
41047: GO 41264
41049: LD_INT 28
41051: DOUBLE
41052: EQUAL
41053: IFTRUE 41063
41055: LD_INT 21
41057: DOUBLE
41058: EQUAL
41059: IFTRUE 41063
41061: GO 41088
41063: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41064: LD_ADDR_VAR 0 3
41068: PUSH
41069: LD_INT 21
41071: PPUSH
41072: LD_VAR 0 1
41076: PPUSH
41077: CALL_OW 321
41081: PUSH
41082: LD_INT 2
41084: EQUAL
41085: ST_TO_ADDR
41086: GO 41264
41088: LD_INT 16
41090: DOUBLE
41091: EQUAL
41092: IFTRUE 41096
41094: GO 41123
41096: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41097: LD_ADDR_VAR 0 3
41101: PUSH
41102: LD_EXP 42
41106: PPUSH
41107: LD_VAR 0 1
41111: PPUSH
41112: CALL_OW 321
41116: PUSH
41117: LD_INT 2
41119: EQUAL
41120: ST_TO_ADDR
41121: GO 41264
41123: LD_INT 19
41125: DOUBLE
41126: EQUAL
41127: IFTRUE 41137
41129: LD_INT 23
41131: DOUBLE
41132: EQUAL
41133: IFTRUE 41137
41135: GO 41164
41137: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41138: LD_ADDR_VAR 0 3
41142: PUSH
41143: LD_EXP 41
41147: PPUSH
41148: LD_VAR 0 1
41152: PPUSH
41153: CALL_OW 321
41157: PUSH
41158: LD_INT 2
41160: EQUAL
41161: ST_TO_ADDR
41162: GO 41264
41164: LD_INT 17
41166: DOUBLE
41167: EQUAL
41168: IFTRUE 41172
41170: GO 41197
41172: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41173: LD_ADDR_VAR 0 3
41177: PUSH
41178: LD_INT 39
41180: PPUSH
41181: LD_VAR 0 1
41185: PPUSH
41186: CALL_OW 321
41190: PUSH
41191: LD_INT 2
41193: EQUAL
41194: ST_TO_ADDR
41195: GO 41264
41197: LD_INT 18
41199: DOUBLE
41200: EQUAL
41201: IFTRUE 41205
41203: GO 41230
41205: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41206: LD_ADDR_VAR 0 3
41210: PUSH
41211: LD_INT 40
41213: PPUSH
41214: LD_VAR 0 1
41218: PPUSH
41219: CALL_OW 321
41223: PUSH
41224: LD_INT 2
41226: EQUAL
41227: ST_TO_ADDR
41228: GO 41264
41230: LD_INT 27
41232: DOUBLE
41233: EQUAL
41234: IFTRUE 41238
41236: GO 41263
41238: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41239: LD_ADDR_VAR 0 3
41243: PUSH
41244: LD_INT 35
41246: PPUSH
41247: LD_VAR 0 1
41251: PPUSH
41252: CALL_OW 321
41256: PUSH
41257: LD_INT 2
41259: EQUAL
41260: ST_TO_ADDR
41261: GO 41264
41263: POP
// end ;
41264: LD_VAR 0 3
41268: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41269: LD_INT 0
41271: PPUSH
41272: PPUSH
41273: PPUSH
41274: PPUSH
41275: PPUSH
41276: PPUSH
41277: PPUSH
41278: PPUSH
41279: PPUSH
41280: PPUSH
41281: PPUSH
// result := false ;
41282: LD_ADDR_VAR 0 6
41286: PUSH
41287: LD_INT 0
41289: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41290: LD_VAR 0 1
41294: NOT
41295: PUSH
41296: LD_VAR 0 1
41300: PPUSH
41301: CALL_OW 266
41305: PUSH
41306: LD_INT 0
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: EMPTY
41313: LIST
41314: LIST
41315: IN
41316: NOT
41317: OR
41318: PUSH
41319: LD_VAR 0 2
41323: NOT
41324: OR
41325: PUSH
41326: LD_VAR 0 5
41330: PUSH
41331: LD_INT 0
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: LD_INT 2
41339: PUSH
41340: LD_INT 3
41342: PUSH
41343: LD_INT 4
41345: PUSH
41346: LD_INT 5
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: IN
41357: NOT
41358: OR
41359: PUSH
41360: LD_VAR 0 3
41364: PPUSH
41365: LD_VAR 0 4
41369: PPUSH
41370: CALL_OW 488
41374: NOT
41375: OR
41376: IFFALSE 41380
// exit ;
41378: GO 42116
// side := GetSide ( depot ) ;
41380: LD_ADDR_VAR 0 9
41384: PUSH
41385: LD_VAR 0 1
41389: PPUSH
41390: CALL_OW 255
41394: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41395: LD_VAR 0 9
41399: PPUSH
41400: LD_VAR 0 2
41404: PPUSH
41405: CALL 40889 0 2
41409: NOT
41410: IFFALSE 41414
// exit ;
41412: GO 42116
// pom := GetBase ( depot ) ;
41414: LD_ADDR_VAR 0 10
41418: PUSH
41419: LD_VAR 0 1
41423: PPUSH
41424: CALL_OW 274
41428: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41429: LD_ADDR_VAR 0 11
41433: PUSH
41434: LD_VAR 0 2
41438: PPUSH
41439: LD_VAR 0 1
41443: PPUSH
41444: CALL_OW 248
41448: PPUSH
41449: CALL_OW 450
41453: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41454: LD_VAR 0 10
41458: PPUSH
41459: LD_INT 1
41461: PPUSH
41462: CALL_OW 275
41466: PUSH
41467: LD_VAR 0 11
41471: PUSH
41472: LD_INT 1
41474: ARRAY
41475: GREATEREQUAL
41476: PUSH
41477: LD_VAR 0 10
41481: PPUSH
41482: LD_INT 2
41484: PPUSH
41485: CALL_OW 275
41489: PUSH
41490: LD_VAR 0 11
41494: PUSH
41495: LD_INT 2
41497: ARRAY
41498: GREATEREQUAL
41499: AND
41500: PUSH
41501: LD_VAR 0 10
41505: PPUSH
41506: LD_INT 3
41508: PPUSH
41509: CALL_OW 275
41513: PUSH
41514: LD_VAR 0 11
41518: PUSH
41519: LD_INT 3
41521: ARRAY
41522: GREATEREQUAL
41523: AND
41524: NOT
41525: IFFALSE 41529
// exit ;
41527: GO 42116
// if GetBType ( depot ) = b_depot then
41529: LD_VAR 0 1
41533: PPUSH
41534: CALL_OW 266
41538: PUSH
41539: LD_INT 0
41541: EQUAL
41542: IFFALSE 41554
// dist := 28 else
41544: LD_ADDR_VAR 0 14
41548: PUSH
41549: LD_INT 28
41551: ST_TO_ADDR
41552: GO 41562
// dist := 36 ;
41554: LD_ADDR_VAR 0 14
41558: PUSH
41559: LD_INT 36
41561: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41562: LD_VAR 0 1
41566: PPUSH
41567: LD_VAR 0 3
41571: PPUSH
41572: LD_VAR 0 4
41576: PPUSH
41577: CALL_OW 297
41581: PUSH
41582: LD_VAR 0 14
41586: GREATER
41587: IFFALSE 41591
// exit ;
41589: GO 42116
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41591: LD_ADDR_VAR 0 12
41595: PUSH
41596: LD_VAR 0 2
41600: PPUSH
41601: LD_VAR 0 3
41605: PPUSH
41606: LD_VAR 0 4
41610: PPUSH
41611: LD_VAR 0 5
41615: PPUSH
41616: LD_VAR 0 1
41620: PPUSH
41621: CALL_OW 248
41625: PPUSH
41626: LD_INT 0
41628: PPUSH
41629: CALL 42121 0 6
41633: ST_TO_ADDR
// if not hexes then
41634: LD_VAR 0 12
41638: NOT
41639: IFFALSE 41643
// exit ;
41641: GO 42116
// hex := GetHexInfo ( x , y ) ;
41643: LD_ADDR_VAR 0 15
41647: PUSH
41648: LD_VAR 0 3
41652: PPUSH
41653: LD_VAR 0 4
41657: PPUSH
41658: CALL_OW 546
41662: ST_TO_ADDR
// if hex [ 1 ] then
41663: LD_VAR 0 15
41667: PUSH
41668: LD_INT 1
41670: ARRAY
41671: IFFALSE 41675
// exit ;
41673: GO 42116
// height := hex [ 2 ] ;
41675: LD_ADDR_VAR 0 13
41679: PUSH
41680: LD_VAR 0 15
41684: PUSH
41685: LD_INT 2
41687: ARRAY
41688: ST_TO_ADDR
// for i = 1 to hexes do
41689: LD_ADDR_VAR 0 7
41693: PUSH
41694: DOUBLE
41695: LD_INT 1
41697: DEC
41698: ST_TO_ADDR
41699: LD_VAR 0 12
41703: PUSH
41704: FOR_TO
41705: IFFALSE 42035
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41707: LD_VAR 0 12
41711: PUSH
41712: LD_VAR 0 7
41716: ARRAY
41717: PUSH
41718: LD_INT 1
41720: ARRAY
41721: PPUSH
41722: LD_VAR 0 12
41726: PUSH
41727: LD_VAR 0 7
41731: ARRAY
41732: PUSH
41733: LD_INT 2
41735: ARRAY
41736: PPUSH
41737: CALL_OW 488
41741: NOT
41742: PUSH
41743: LD_VAR 0 12
41747: PUSH
41748: LD_VAR 0 7
41752: ARRAY
41753: PUSH
41754: LD_INT 1
41756: ARRAY
41757: PPUSH
41758: LD_VAR 0 12
41762: PUSH
41763: LD_VAR 0 7
41767: ARRAY
41768: PUSH
41769: LD_INT 2
41771: ARRAY
41772: PPUSH
41773: CALL_OW 428
41777: PUSH
41778: LD_INT 0
41780: GREATER
41781: OR
41782: PUSH
41783: LD_VAR 0 12
41787: PUSH
41788: LD_VAR 0 7
41792: ARRAY
41793: PUSH
41794: LD_INT 1
41796: ARRAY
41797: PPUSH
41798: LD_VAR 0 12
41802: PUSH
41803: LD_VAR 0 7
41807: ARRAY
41808: PUSH
41809: LD_INT 2
41811: ARRAY
41812: PPUSH
41813: CALL_OW 351
41817: OR
41818: IFFALSE 41824
// exit ;
41820: POP
41821: POP
41822: GO 42116
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41824: LD_ADDR_VAR 0 8
41828: PUSH
41829: LD_VAR 0 12
41833: PUSH
41834: LD_VAR 0 7
41838: ARRAY
41839: PUSH
41840: LD_INT 1
41842: ARRAY
41843: PPUSH
41844: LD_VAR 0 12
41848: PUSH
41849: LD_VAR 0 7
41853: ARRAY
41854: PUSH
41855: LD_INT 2
41857: ARRAY
41858: PPUSH
41859: CALL_OW 546
41863: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41864: LD_VAR 0 8
41868: PUSH
41869: LD_INT 1
41871: ARRAY
41872: PUSH
41873: LD_VAR 0 8
41877: PUSH
41878: LD_INT 2
41880: ARRAY
41881: PUSH
41882: LD_VAR 0 13
41886: PUSH
41887: LD_INT 2
41889: PLUS
41890: GREATER
41891: OR
41892: PUSH
41893: LD_VAR 0 8
41897: PUSH
41898: LD_INT 2
41900: ARRAY
41901: PUSH
41902: LD_VAR 0 13
41906: PUSH
41907: LD_INT 2
41909: MINUS
41910: LESS
41911: OR
41912: PUSH
41913: LD_VAR 0 8
41917: PUSH
41918: LD_INT 3
41920: ARRAY
41921: PUSH
41922: LD_INT 0
41924: PUSH
41925: LD_INT 8
41927: PUSH
41928: LD_INT 9
41930: PUSH
41931: LD_INT 10
41933: PUSH
41934: LD_INT 11
41936: PUSH
41937: LD_INT 12
41939: PUSH
41940: LD_INT 13
41942: PUSH
41943: LD_INT 16
41945: PUSH
41946: LD_INT 17
41948: PUSH
41949: LD_INT 18
41951: PUSH
41952: LD_INT 19
41954: PUSH
41955: LD_INT 20
41957: PUSH
41958: LD_INT 21
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: IN
41976: NOT
41977: OR
41978: PUSH
41979: LD_VAR 0 8
41983: PUSH
41984: LD_INT 5
41986: ARRAY
41987: NOT
41988: OR
41989: PUSH
41990: LD_VAR 0 8
41994: PUSH
41995: LD_INT 6
41997: ARRAY
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: LD_INT 2
42004: PUSH
42005: LD_INT 7
42007: PUSH
42008: LD_INT 9
42010: PUSH
42011: LD_INT 10
42013: PUSH
42014: LD_INT 11
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: IN
42025: NOT
42026: OR
42027: IFFALSE 42033
// exit ;
42029: POP
42030: POP
42031: GO 42116
// end ;
42033: GO 41704
42035: POP
42036: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42037: LD_VAR 0 9
42041: PPUSH
42042: LD_VAR 0 3
42046: PPUSH
42047: LD_VAR 0 4
42051: PPUSH
42052: LD_INT 20
42054: PPUSH
42055: CALL 34062 0 4
42059: PUSH
42060: LD_INT 4
42062: ARRAY
42063: IFFALSE 42067
// exit ;
42065: GO 42116
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42067: LD_VAR 0 2
42071: PUSH
42072: LD_INT 29
42074: PUSH
42075: LD_INT 30
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: IN
42082: PUSH
42083: LD_VAR 0 3
42087: PPUSH
42088: LD_VAR 0 4
42092: PPUSH
42093: LD_VAR 0 9
42097: PPUSH
42098: CALL_OW 440
42102: NOT
42103: AND
42104: IFFALSE 42108
// exit ;
42106: GO 42116
// result := true ;
42108: LD_ADDR_VAR 0 6
42112: PUSH
42113: LD_INT 1
42115: ST_TO_ADDR
// end ;
42116: LD_VAR 0 6
42120: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42121: LD_INT 0
42123: PPUSH
42124: PPUSH
42125: PPUSH
42126: PPUSH
42127: PPUSH
42128: PPUSH
42129: PPUSH
42130: PPUSH
42131: PPUSH
42132: PPUSH
42133: PPUSH
42134: PPUSH
42135: PPUSH
42136: PPUSH
42137: PPUSH
42138: PPUSH
42139: PPUSH
42140: PPUSH
42141: PPUSH
42142: PPUSH
42143: PPUSH
42144: PPUSH
42145: PPUSH
42146: PPUSH
42147: PPUSH
42148: PPUSH
42149: PPUSH
42150: PPUSH
42151: PPUSH
42152: PPUSH
42153: PPUSH
42154: PPUSH
42155: PPUSH
42156: PPUSH
42157: PPUSH
42158: PPUSH
42159: PPUSH
42160: PPUSH
42161: PPUSH
42162: PPUSH
42163: PPUSH
42164: PPUSH
42165: PPUSH
42166: PPUSH
42167: PPUSH
42168: PPUSH
42169: PPUSH
42170: PPUSH
42171: PPUSH
42172: PPUSH
42173: PPUSH
42174: PPUSH
42175: PPUSH
42176: PPUSH
42177: PPUSH
42178: PPUSH
42179: PPUSH
42180: PPUSH
// result = [ ] ;
42181: LD_ADDR_VAR 0 7
42185: PUSH
42186: EMPTY
42187: ST_TO_ADDR
// temp_list = [ ] ;
42188: LD_ADDR_VAR 0 9
42192: PUSH
42193: EMPTY
42194: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42195: LD_VAR 0 4
42199: PUSH
42200: LD_INT 0
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: LD_INT 2
42208: PUSH
42209: LD_INT 3
42211: PUSH
42212: LD_INT 4
42214: PUSH
42215: LD_INT 5
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: IN
42226: NOT
42227: PUSH
42228: LD_VAR 0 1
42232: PUSH
42233: LD_INT 0
42235: PUSH
42236: LD_INT 1
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: IN
42243: PUSH
42244: LD_VAR 0 5
42248: PUSH
42249: LD_INT 1
42251: PUSH
42252: LD_INT 2
42254: PUSH
42255: LD_INT 3
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: LIST
42262: IN
42263: NOT
42264: AND
42265: OR
42266: IFFALSE 42270
// exit ;
42268: GO 60661
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42270: LD_VAR 0 1
42274: PUSH
42275: LD_INT 6
42277: PUSH
42278: LD_INT 7
42280: PUSH
42281: LD_INT 8
42283: PUSH
42284: LD_INT 13
42286: PUSH
42287: LD_INT 12
42289: PUSH
42290: LD_INT 15
42292: PUSH
42293: LD_INT 11
42295: PUSH
42296: LD_INT 14
42298: PUSH
42299: LD_INT 10
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: IN
42313: IFFALSE 42323
// btype = b_lab ;
42315: LD_ADDR_VAR 0 1
42319: PUSH
42320: LD_INT 6
42322: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42323: LD_VAR 0 6
42327: PUSH
42328: LD_INT 0
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: LD_INT 2
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: LIST
42341: IN
42342: NOT
42343: PUSH
42344: LD_VAR 0 1
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: LD_INT 1
42354: PUSH
42355: LD_INT 2
42357: PUSH
42358: LD_INT 3
42360: PUSH
42361: LD_INT 6
42363: PUSH
42364: LD_INT 36
42366: PUSH
42367: LD_INT 4
42369: PUSH
42370: LD_INT 5
42372: PUSH
42373: LD_INT 31
42375: PUSH
42376: LD_INT 32
42378: PUSH
42379: LD_INT 33
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: IN
42395: NOT
42396: PUSH
42397: LD_VAR 0 6
42401: PUSH
42402: LD_INT 1
42404: EQUAL
42405: AND
42406: OR
42407: PUSH
42408: LD_VAR 0 1
42412: PUSH
42413: LD_INT 2
42415: PUSH
42416: LD_INT 3
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: IN
42423: NOT
42424: PUSH
42425: LD_VAR 0 6
42429: PUSH
42430: LD_INT 2
42432: EQUAL
42433: AND
42434: OR
42435: IFFALSE 42445
// mode = 0 ;
42437: LD_ADDR_VAR 0 6
42441: PUSH
42442: LD_INT 0
42444: ST_TO_ADDR
// case mode of 0 :
42445: LD_VAR 0 6
42449: PUSH
42450: LD_INT 0
42452: DOUBLE
42453: EQUAL
42454: IFTRUE 42458
42456: GO 53911
42458: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42459: LD_ADDR_VAR 0 11
42463: PUSH
42464: LD_INT 0
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: LD_INT 1
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: PUSH
42498: LD_INT 1
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 1
42517: NEG
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 1
42540: NEG
42541: PUSH
42542: LD_INT 2
42544: NEG
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: LD_INT 2
42555: NEG
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 1
42563: PUSH
42564: LD_INT 1
42566: NEG
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: LD_INT 2
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: LD_INT 2
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: PUSH
42592: LD_INT 1
42594: NEG
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: LD_INT 3
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 3
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: LD_INT 2
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42652: LD_ADDR_VAR 0 12
42656: PUSH
42657: LD_INT 0
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 0
42669: PUSH
42670: LD_INT 1
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 1
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 1
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 0
42700: PUSH
42701: LD_INT 1
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 1
42721: NEG
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: LD_INT 1
42736: NEG
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 2
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 2
42754: PUSH
42755: LD_INT 1
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: PUSH
42762: LD_INT 1
42764: NEG
42765: PUSH
42766: LD_INT 1
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 2
42775: NEG
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: LD_INT 2
42786: NEG
42787: PUSH
42788: LD_INT 1
42790: NEG
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 2
42798: NEG
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 3
42809: NEG
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 3
42820: NEG
42821: PUSH
42822: LD_INT 1
42824: NEG
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42848: LD_ADDR_VAR 0 13
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 0
42865: PUSH
42866: LD_INT 1
42868: NEG
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 1
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: LD_INT 1
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 1
42906: NEG
42907: PUSH
42908: LD_INT 0
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 1
42917: NEG
42918: PUSH
42919: LD_INT 1
42921: NEG
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: NEG
42930: PUSH
42931: LD_INT 2
42933: NEG
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 2
42941: PUSH
42942: LD_INT 1
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 2
42951: PUSH
42952: LD_INT 2
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 1
42961: PUSH
42962: LD_INT 2
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 2
42971: NEG
42972: PUSH
42973: LD_INT 1
42975: NEG
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 2
42983: NEG
42984: PUSH
42985: LD_INT 2
42987: NEG
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 2
42995: NEG
42996: PUSH
42997: LD_INT 3
42999: NEG
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 3
43007: NEG
43008: PUSH
43009: LD_INT 2
43011: NEG
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 3
43019: NEG
43020: PUSH
43021: LD_INT 3
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43047: LD_ADDR_VAR 0 14
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 1
43105: NEG
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: PUSH
43118: LD_INT 1
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: PUSH
43130: LD_INT 2
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: LD_INT 2
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 1
43151: PUSH
43152: LD_INT 1
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 1
43162: PUSH
43163: LD_INT 2
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: LD_INT 2
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 1
43182: NEG
43183: PUSH
43184: LD_INT 1
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: NEG
43194: PUSH
43195: LD_INT 3
43197: NEG
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 0
43205: PUSH
43206: LD_INT 3
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: LD_INT 1
43216: PUSH
43217: LD_INT 2
43219: NEG
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43243: LD_ADDR_VAR 0 15
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: LD_INT 1
43263: NEG
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: PUSH
43325: LD_INT 1
43327: NEG
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: LD_INT 0
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: LD_INT 1
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: NEG
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 2
43366: NEG
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 2
43377: NEG
43378: PUSH
43379: LD_INT 1
43381: NEG
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 2
43389: PUSH
43390: LD_INT 1
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 3
43400: PUSH
43401: LD_INT 0
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 3
43410: PUSH
43411: LD_INT 1
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43436: LD_ADDR_VAR 0 16
43440: PUSH
43441: LD_INT 0
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 0
43453: PUSH
43454: LD_INT 1
43456: NEG
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 1
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: LD_INT 1
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 0
43484: PUSH
43485: LD_INT 1
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: LD_INT 2
43521: NEG
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 2
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 2
43539: PUSH
43540: LD_INT 2
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: LD_INT 2
43552: PUSH
43553: EMPTY
43554: LIST
43555: LIST
43556: PUSH
43557: LD_INT 2
43559: NEG
43560: PUSH
43561: LD_INT 1
43563: NEG
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 2
43571: NEG
43572: PUSH
43573: LD_INT 2
43575: NEG
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 3
43583: PUSH
43584: LD_INT 2
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 3
43593: PUSH
43594: LD_INT 3
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: PUSH
43604: LD_INT 3
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43629: LD_ADDR_VAR 0 17
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: LD_INT 0
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 0
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: LD_INT 1
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: LD_INT 0
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 1
43698: NEG
43699: PUSH
43700: LD_INT 1
43702: NEG
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 1
43710: NEG
43711: PUSH
43712: LD_INT 2
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: LD_INT 2
43725: NEG
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 1
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 2
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 2
43754: PUSH
43755: LD_INT 1
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 2
43764: PUSH
43765: LD_INT 2
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: PUSH
43775: LD_INT 2
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 0
43784: PUSH
43785: LD_INT 2
43787: PUSH
43788: EMPTY
43789: LIST
43790: LIST
43791: PUSH
43792: LD_INT 1
43794: NEG
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 2
43805: NEG
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 2
43816: NEG
43817: PUSH
43818: LD_INT 1
43820: NEG
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 2
43828: NEG
43829: PUSH
43830: LD_INT 2
43832: NEG
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43859: LD_ADDR_VAR 0 18
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 0
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 1
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 0
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: LD_INT 0
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: LD_INT 1
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: NEG
43941: PUSH
43942: LD_INT 2
43944: NEG
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: LD_INT 2
43955: NEG
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: PUSH
43961: LD_INT 1
43963: PUSH
43964: LD_INT 1
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 2
43974: PUSH
43975: LD_INT 0
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 2
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 2
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 1
44004: PUSH
44005: LD_INT 2
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 0
44014: PUSH
44015: LD_INT 2
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 2
44035: NEG
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 2
44046: NEG
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 2
44058: NEG
44059: PUSH
44060: LD_INT 2
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44089: LD_ADDR_VAR 0 19
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: LD_INT 0
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: LD_INT 1
44109: NEG
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 1
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: LD_INT 0
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: NEG
44171: PUSH
44172: LD_INT 2
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 0
44182: PUSH
44183: LD_INT 2
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 2
44214: PUSH
44215: LD_INT 1
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 2
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: LD_INT 2
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: LD_INT 2
44247: PUSH
44248: EMPTY
44249: LIST
44250: LIST
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 2
44265: NEG
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 2
44276: NEG
44277: PUSH
44278: LD_INT 1
44280: NEG
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 2
44288: NEG
44289: PUSH
44290: LD_INT 2
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44319: LD_ADDR_VAR 0 20
44323: PUSH
44324: LD_INT 0
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: LD_INT 1
44339: NEG
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: LD_INT 1
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 0
44367: PUSH
44368: LD_INT 1
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: PUSH
44375: LD_INT 1
44377: NEG
44378: PUSH
44379: LD_INT 0
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: LD_INT 1
44392: NEG
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: LD_INT 2
44404: NEG
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: LD_INT 2
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: PUSH
44424: LD_INT 1
44426: NEG
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: LD_INT 2
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: PUSH
44442: LD_INT 2
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 2
44454: PUSH
44455: LD_INT 2
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: LD_INT 2
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: LD_INT 2
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: LD_INT 1
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 2
44495: NEG
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 2
44506: NEG
44507: PUSH
44508: LD_INT 1
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: NEG
44519: PUSH
44520: LD_INT 2
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44549: LD_ADDR_VAR 0 21
44553: PUSH
44554: LD_INT 0
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: LD_INT 1
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: LD_INT 1
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 1
44607: NEG
44608: PUSH
44609: LD_INT 0
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: NEG
44619: PUSH
44620: LD_INT 1
44622: NEG
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: LD_INT 2
44634: NEG
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: LD_INT 2
44645: NEG
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: LD_INT 1
44656: NEG
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 2
44664: PUSH
44665: LD_INT 0
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 2
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 2
44684: PUSH
44685: LD_INT 2
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: PUSH
44695: LD_INT 2
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 0
44704: PUSH
44705: LD_INT 2
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: LD_INT 1
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 2
44725: NEG
44726: PUSH
44727: LD_INT 0
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 2
44736: NEG
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 2
44748: NEG
44749: PUSH
44750: LD_INT 2
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44779: LD_ADDR_VAR 0 22
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: LD_INT 0
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: LD_INT 1
44799: NEG
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 1
44837: NEG
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: LD_INT 1
44852: NEG
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 1
44860: NEG
44861: PUSH
44862: LD_INT 2
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: LD_INT 2
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 2
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: LD_INT 1
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 2
44914: PUSH
44915: LD_INT 2
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: LD_INT 2
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: LD_INT 2
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: LD_INT 1
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 2
44955: NEG
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: EMPTY
44961: LIST
44962: LIST
44963: PUSH
44964: LD_INT 2
44966: NEG
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 2
44978: NEG
44979: PUSH
44980: LD_INT 2
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45009: LD_ADDR_VAR 0 23
45013: PUSH
45014: LD_INT 0
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: LD_INT 1
45029: NEG
45030: PUSH
45031: EMPTY
45032: LIST
45033: LIST
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: LD_INT 0
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 1
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: LD_INT 1
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: LD_INT 0
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: PUSH
45076: LD_INT 1
45078: NEG
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 1
45090: NEG
45091: PUSH
45092: LD_INT 2
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 0
45102: PUSH
45103: LD_INT 2
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: LD_INT 1
45116: NEG
45117: PUSH
45118: EMPTY
45119: LIST
45120: LIST
45121: PUSH
45122: LD_INT 2
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 2
45134: PUSH
45135: LD_INT 1
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 2
45144: PUSH
45145: LD_INT 2
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: LD_INT 2
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 0
45164: PUSH
45165: LD_INT 2
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 2
45185: NEG
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 2
45196: NEG
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 2
45208: NEG
45209: PUSH
45210: LD_INT 2
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 2
45220: NEG
45221: PUSH
45222: LD_INT 3
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: NEG
45233: PUSH
45234: LD_INT 3
45236: NEG
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: LD_INT 2
45247: NEG
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 2
45255: PUSH
45256: LD_INT 1
45258: NEG
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: EMPTY
45265: LIST
45266: LIST
45267: LIST
45268: LIST
45269: LIST
45270: LIST
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45289: LD_ADDR_VAR 0 24
45293: PUSH
45294: LD_INT 0
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 1
45347: NEG
45348: PUSH
45349: LD_INT 0
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: LD_INT 2
45374: NEG
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: LD_INT 2
45385: NEG
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: LD_INT 1
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: LD_INT 2
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: LD_INT 2
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: LD_INT 2
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: LD_INT 1
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 2
45465: NEG
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 2
45476: NEG
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 2
45488: NEG
45489: PUSH
45490: LD_INT 2
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: LD_INT 2
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 3
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 3
45532: PUSH
45533: LD_INT 2
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45565: LD_ADDR_VAR 0 25
45569: PUSH
45570: LD_INT 0
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: LD_INT 1
45585: NEG
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 1
45623: NEG
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 1
45646: NEG
45647: PUSH
45648: LD_INT 2
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: LD_INT 2
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 1
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 2
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 2
45690: PUSH
45691: LD_INT 1
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 2
45700: PUSH
45701: LD_INT 2
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 1
45710: PUSH
45711: LD_INT 2
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: LD_INT 2
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 1
45730: NEG
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 2
45741: NEG
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 2
45752: NEG
45753: PUSH
45754: LD_INT 1
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 2
45764: NEG
45765: PUSH
45766: LD_INT 2
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 3
45776: PUSH
45777: LD_INT 1
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 3
45786: PUSH
45787: LD_INT 2
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 2
45796: PUSH
45797: LD_INT 3
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: LD_INT 3
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45839: LD_ADDR_VAR 0 26
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: LD_INT 0
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: LD_INT 1
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: NEG
45921: PUSH
45922: LD_INT 2
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: LD_INT 2
45935: NEG
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: LD_INT 1
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 2
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 2
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 2
45974: PUSH
45975: LD_INT 2
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: LD_INT 2
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: LD_INT 2
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: LD_INT 1
46004: NEG
46005: PUSH
46006: LD_INT 1
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 2
46015: NEG
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 2
46026: NEG
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: LD_INT 2
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 2
46050: PUSH
46051: LD_INT 3
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: LD_INT 3
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 1
46070: NEG
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46115: LD_ADDR_VAR 0 27
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 0
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: LD_INT 1
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 0
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 1
46196: NEG
46197: PUSH
46198: LD_INT 2
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: LD_INT 2
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: LD_INT 1
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 2
46230: PUSH
46231: LD_INT 0
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 2
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 2
46250: PUSH
46251: LD_INT 2
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: LD_INT 2
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: LD_INT 2
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: LD_INT 1
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 2
46291: NEG
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 2
46302: NEG
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: LD_INT 2
46314: NEG
46315: PUSH
46316: LD_INT 2
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: LD_INT 2
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 3
46348: NEG
46349: PUSH
46350: LD_INT 1
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 3
46360: NEG
46361: PUSH
46362: LD_INT 2
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46395: LD_ADDR_VAR 0 28
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: LD_INT 0
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 1
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 1
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: LD_INT 1
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: NEG
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: LD_INT 2
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: LD_INT 2
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 2
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 2
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 2
46530: PUSH
46531: LD_INT 2
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: PUSH
46541: LD_INT 2
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: LD_INT 1
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 2
46571: NEG
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 2
46582: NEG
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 2
46594: NEG
46595: PUSH
46596: LD_INT 2
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 2
46606: NEG
46607: PUSH
46608: LD_INT 3
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: LD_INT 3
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 3
46630: NEG
46631: PUSH
46632: LD_INT 1
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 3
46642: NEG
46643: PUSH
46644: LD_INT 2
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: LIST
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: LIST
46666: LIST
46667: LIST
46668: LIST
46669: LIST
46670: LIST
46671: LIST
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46677: LD_ADDR_VAR 0 29
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 0
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: PUSH
46706: LD_INT 0
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 0
46725: PUSH
46726: LD_INT 1
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: NEG
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 1
46746: NEG
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: LD_INT 2
46762: NEG
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: LD_INT 2
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 2
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 2
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 0
46822: PUSH
46823: LD_INT 2
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: NEG
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PUSH
46841: LD_INT 2
46843: NEG
46844: PUSH
46845: LD_INT 1
46847: NEG
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 2
46855: NEG
46856: PUSH
46857: LD_INT 2
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 2
46867: NEG
46868: PUSH
46869: LD_INT 3
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 2
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 3
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: LD_INT 3
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: LD_INT 2
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 3
46921: NEG
46922: PUSH
46923: LD_INT 2
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: LIST
46955: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46956: LD_ADDR_VAR 0 30
46960: PUSH
46961: LD_INT 0
46963: PUSH
46964: LD_INT 0
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: NEG
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: LD_INT 1
47029: NEG
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: NEG
47038: PUSH
47039: LD_INT 2
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: LD_INT 2
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: LD_INT 1
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 2
47091: PUSH
47092: LD_INT 2
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: PUSH
47102: LD_INT 2
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 1
47111: NEG
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 2
47133: NEG
47134: PUSH
47135: LD_INT 1
47137: NEG
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: LD_INT 3
47149: NEG
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: LD_INT 2
47160: NEG
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 3
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 2
47178: PUSH
47179: LD_INT 3
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 2
47188: NEG
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 3
47199: NEG
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47234: LD_ADDR_VAR 0 31
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 0
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: LD_INT 0
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: LD_INT 1
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: NEG
47316: PUSH
47317: LD_INT 2
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 2
47338: PUSH
47339: LD_INT 0
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 2
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 2
47358: PUSH
47359: LD_INT 2
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: LD_INT 2
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: LD_INT 2
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: LD_INT 1
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 2
47399: NEG
47400: PUSH
47401: LD_INT 1
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 2
47411: NEG
47412: PUSH
47413: LD_INT 2
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 2
47423: NEG
47424: PUSH
47425: LD_INT 3
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: LD_INT 1
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 3
47446: PUSH
47447: LD_INT 1
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: LD_INT 3
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 3
47477: NEG
47478: PUSH
47479: LD_INT 2
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47512: LD_ADDR_VAR 0 32
47516: PUSH
47517: LD_INT 0
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: LD_INT 1
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: LD_INT 0
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: LD_INT 1
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: EMPTY
47565: LIST
47566: LIST
47567: PUSH
47568: LD_INT 1
47570: NEG
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: LD_INT 1
47585: NEG
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: LD_INT 2
47597: NEG
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: LD_INT 2
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 1
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 2
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 2
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: LD_INT 2
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 2
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 2
47678: NEG
47679: PUSH
47680: LD_INT 0
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 2
47689: NEG
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: LD_INT 3
47705: NEG
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: LD_INT 2
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 3
47724: PUSH
47725: LD_INT 2
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 2
47734: PUSH
47735: LD_INT 3
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 2
47744: NEG
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 3
47755: NEG
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47790: LD_ADDR_VAR 0 33
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 1
47859: NEG
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 1
47871: NEG
47872: PUSH
47873: LD_INT 2
47875: NEG
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: LD_INT 1
47886: NEG
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 2
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: LD_INT 1
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: LD_INT 2
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 2
47945: NEG
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 2
47956: NEG
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: LD_INT 2
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: LD_INT 3
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 3
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: LD_INT 3
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: LD_INT 2
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 3
48034: NEG
48035: PUSH
48036: LD_INT 2
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: LIST
48053: LIST
48054: LIST
48055: LIST
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: LIST
48064: LIST
48065: LIST
48066: LIST
48067: LIST
48068: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48069: LD_ADDR_VAR 0 34
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: NEG
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: LD_INT 2
48154: NEG
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: LD_INT 2
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 2
48184: PUSH
48185: LD_INT 1
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 2
48194: PUSH
48195: LD_INT 2
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 1
48204: PUSH
48205: LD_INT 2
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: LD_INT 1
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 2
48225: NEG
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 2
48236: NEG
48237: PUSH
48238: LD_INT 1
48240: NEG
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 2
48248: NEG
48249: PUSH
48250: LD_INT 2
48252: NEG
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: LD_INT 3
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: LD_INT 2
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 3
48283: PUSH
48284: LD_INT 2
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: LD_INT 3
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 2
48303: NEG
48304: PUSH
48305: LD_INT 1
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 3
48314: NEG
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48349: LD_ADDR_VAR 0 35
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 2
48430: PUSH
48431: LD_INT 1
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48461: LD_ADDR_VAR 0 36
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: NEG
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 2
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48573: LD_ADDR_VAR 0 37
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: LD_INT 1
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48685: LD_ADDR_VAR 0 38
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 1
48705: NEG
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 2
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 2
48776: NEG
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48797: LD_ADDR_VAR 0 39
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: LD_INT 0
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: LD_INT 1
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: LD_INT 2
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48909: LD_ADDR_VAR 0 40
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: LD_INT 0
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: LD_INT 1
48929: NEG
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 1
48978: NEG
48979: PUSH
48980: LD_INT 1
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: PUSH
48991: LD_INT 1
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49021: LD_ADDR_VAR 0 41
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: LD_INT 1
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: LD_INT 1
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: LD_INT 1
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: LD_INT 1
49094: NEG
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: LD_INT 2
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 2
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 2
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 2
49145: PUSH
49146: LD_INT 2
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: PUSH
49156: LD_INT 2
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: LD_INT 1
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: PUSH
49174: LD_INT 2
49176: NEG
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 2
49187: NEG
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 2
49199: NEG
49200: PUSH
49201: LD_INT 2
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 2
49211: NEG
49212: PUSH
49213: LD_INT 3
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 3
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 3
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 3
49254: PUSH
49255: LD_INT 2
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 3
49264: PUSH
49265: LD_INT 3
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: LD_INT 3
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 2
49284: NEG
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 3
49295: NEG
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 3
49306: NEG
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 3
49318: NEG
49319: PUSH
49320: LD_INT 2
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 3
49330: NEG
49331: PUSH
49332: LD_INT 3
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49371: LD_ADDR_VAR 0 42
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: LD_INT 1
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 1
49452: NEG
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: LD_INT 2
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: LD_INT 2
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: LD_INT 2
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 2
49537: NEG
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 2
49549: NEG
49550: PUSH
49551: LD_INT 2
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 2
49561: NEG
49562: PUSH
49563: LD_INT 3
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: NEG
49574: PUSH
49575: LD_INT 3
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: LD_INT 3
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: LD_INT 2
49599: NEG
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 3
49607: PUSH
49608: LD_INT 2
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 3
49617: PUSH
49618: LD_INT 3
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 2
49627: PUSH
49628: LD_INT 3
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: LD_INT 3
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 0
49647: PUSH
49648: LD_INT 3
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: LD_INT 2
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 3
49668: NEG
49669: PUSH
49670: LD_INT 2
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 3
49680: NEG
49681: PUSH
49682: LD_INT 3
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49721: LD_ADDR_VAR 0 43
49725: PUSH
49726: LD_INT 0
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: PUSH
49750: LD_INT 0
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: LD_INT 2
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 1
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 2
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 2
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: LD_INT 2
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 2
49887: NEG
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 2
49898: NEG
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: LD_INT 3
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: LD_INT 3
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: LD_INT 2
49936: NEG
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: LD_INT 1
49947: NEG
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 3
49955: PUSH
49956: LD_INT 0
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 3
49965: PUSH
49966: LD_INT 1
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: LD_INT 3
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: LD_INT 3
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: LD_INT 2
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 2
50006: NEG
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 3
50017: NEG
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 3
50028: NEG
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50069: LD_ADDR_VAR 0 44
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: LD_INT 0
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 1
50127: NEG
50128: PUSH
50129: LD_INT 0
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: NEG
50139: PUSH
50140: LD_INT 1
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: LD_INT 2
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: LD_INT 1
50165: NEG
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 2
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 2
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 2
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 1
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: NEG
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: NEG
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: LD_INT 2
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: NEG
50260: PUSH
50261: LD_INT 3
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 2
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 3
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 3
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 3
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 3
50312: PUSH
50313: LD_INT 3
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: LD_INT 3
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 2
50332: NEG
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 3
50343: NEG
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 3
50354: NEG
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 3
50366: NEG
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 3
50378: NEG
50379: PUSH
50380: LD_INT 3
50382: NEG
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50419: LD_ADDR_VAR 0 45
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 1
50457: PUSH
50458: LD_INT 1
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: LD_INT 1
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 1
50488: NEG
50489: PUSH
50490: LD_INT 1
50492: NEG
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: LD_INT 2
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: LD_INT 2
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: LD_INT 1
50526: NEG
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PUSH
50532: LD_INT 2
50534: PUSH
50535: LD_INT 1
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 2
50544: PUSH
50545: LD_INT 2
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: LD_INT 2
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: LD_INT 2
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: NEG
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: LD_INT 2
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 2
50609: NEG
50610: PUSH
50611: LD_INT 3
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: LD_INT 3
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 0
50633: PUSH
50634: LD_INT 3
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: LD_INT 2
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 3
50655: PUSH
50656: LD_INT 2
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 3
50665: PUSH
50666: LD_INT 3
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 2
50675: PUSH
50676: LD_INT 3
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: LD_INT 3
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: LD_INT 3
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: NEG
50706: PUSH
50707: LD_INT 2
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 3
50716: NEG
50717: PUSH
50718: LD_INT 2
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 3
50728: NEG
50729: PUSH
50730: LD_INT 3
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50769: LD_ADDR_VAR 0 46
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: LD_INT 1
50789: NEG
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: LD_INT 1
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: NEG
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 1
50850: NEG
50851: PUSH
50852: LD_INT 2
50854: NEG
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: LD_INT 2
50865: NEG
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: PUSH
50874: LD_INT 1
50876: NEG
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 2
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: LD_INT 2
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: LD_INT 2
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 1
50924: NEG
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 2
50935: NEG
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 2
50946: NEG
50947: PUSH
50948: LD_INT 1
50950: NEG
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: NEG
50959: PUSH
50960: LD_INT 3
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: LD_INT 3
50973: NEG
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: LD_INT 2
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 2
50992: PUSH
50993: LD_INT 1
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 3
51003: PUSH
51004: LD_INT 0
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 3
51013: PUSH
51014: LD_INT 1
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: LD_INT 3
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: LD_INT 3
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: NEG
51044: PUSH
51045: LD_INT 2
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 2
51054: NEG
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 3
51065: NEG
51066: PUSH
51067: LD_INT 0
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 3
51076: NEG
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51117: LD_ADDR_VAR 0 47
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: NEG
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 1
51186: NEG
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: LD_INT 2
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: LD_INT 2
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: LD_INT 1
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 2
51232: NEG
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 2
51244: NEG
51245: PUSH
51246: LD_INT 2
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51268: LD_ADDR_VAR 0 48
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 1
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: NEG
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 1
51349: NEG
51350: PUSH
51351: LD_INT 2
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: LD_INT 2
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 1
51372: PUSH
51373: LD_INT 1
51375: NEG
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 2
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 2
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51415: LD_ADDR_VAR 0 49
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: LD_INT 0
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 0
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: LD_INT 0
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 2
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 2
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 2
51527: PUSH
51528: LD_INT 2
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: LD_INT 2
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51559: LD_ADDR_VAR 0 50
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: LD_INT 1
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 1
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 2
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 2
51650: PUSH
51651: LD_INT 2
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: LD_INT 2
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: LD_INT 2
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: LD_INT 1
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51703: LD_ADDR_VAR 0 51
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 0
51720: PUSH
51721: LD_INT 1
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 1
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: LD_INT 1
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: LD_INT 2
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 2
51815: NEG
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 2
51826: NEG
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51850: LD_ADDR_VAR 0 52
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 0
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 1
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: LD_INT 1
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 1
51919: NEG
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: LD_INT 1
51931: NEG
51932: PUSH
51933: LD_INT 2
51935: NEG
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: LD_INT 1
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 2
51954: NEG
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 2
51965: NEG
51966: PUSH
51967: LD_INT 1
51969: NEG
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 2
51977: NEG
51978: PUSH
51979: LD_INT 2
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52001: LD_ADDR_VAR 0 53
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: LD_INT 1
52021: NEG
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 1
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 0
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: LD_INT 0
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: LD_INT 1
52070: NEG
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: LD_INT 2
52086: NEG
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: LD_INT 2
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 2
52116: PUSH
52117: LD_INT 0
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 2
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 2
52136: PUSH
52137: LD_INT 2
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: LD_INT 2
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: NEG
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 2
52177: NEG
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 2
52188: NEG
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: LD_INT 2
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52231: LD_ADDR_VAR 0 54
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: LD_INT 0
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 0
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 0
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 1
52289: NEG
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: LD_INT 1
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: LD_INT 2
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: LD_INT 2
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: PUSH
52336: LD_INT 1
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 2
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: LD_INT 1
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 2
52366: PUSH
52367: LD_INT 2
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 0
52386: PUSH
52387: LD_INT 2
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 1
52396: NEG
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 2
52407: NEG
52408: PUSH
52409: LD_INT 0
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 2
52418: NEG
52419: PUSH
52420: LD_INT 1
52422: NEG
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: LD_INT 2
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52461: LD_ADDR_VAR 0 55
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: LD_INT 1
52481: NEG
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: LD_INT 0
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 1
52542: NEG
52543: PUSH
52544: LD_INT 2
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 0
52554: PUSH
52555: LD_INT 2
52557: NEG
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: LD_INT 1
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 2
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 2
52586: PUSH
52587: LD_INT 1
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 2
52596: PUSH
52597: LD_INT 2
52599: PUSH
52600: EMPTY
52601: LIST
52602: LIST
52603: PUSH
52604: LD_INT 1
52606: PUSH
52607: LD_INT 2
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: LD_INT 2
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 2
52637: NEG
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 2
52648: NEG
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 2
52660: NEG
52661: PUSH
52662: LD_INT 2
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52691: LD_ADDR_VAR 0 56
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: LD_INT 0
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: LD_INT 1
52711: NEG
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 1
52749: NEG
52750: PUSH
52751: LD_INT 0
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: LD_INT 1
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: LD_INT 2
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: LD_INT 2
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 2
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 2
52816: PUSH
52817: LD_INT 1
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 2
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 1
52836: PUSH
52837: LD_INT 2
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: LD_INT 2
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 2
52867: NEG
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 2
52878: NEG
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: LD_INT 2
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52921: LD_ADDR_VAR 0 57
52925: PUSH
52926: LD_INT 0
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 1
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: LD_INT 0
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 1
53002: NEG
53003: PUSH
53004: LD_INT 2
53006: NEG
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: LD_INT 2
53017: NEG
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 2
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: LD_INT 1
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: PUSH
53054: LD_INT 2
53056: PUSH
53057: LD_INT 2
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: LD_INT 2
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: LD_INT 2
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 2
53097: NEG
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 2
53108: NEG
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 2
53120: NEG
53121: PUSH
53122: LD_INT 2
53124: NEG
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53151: LD_ADDR_VAR 0 58
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 1
53171: NEG
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: NEG
53233: PUSH
53234: LD_INT 2
53236: NEG
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: LD_INT 2
53247: NEG
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 2
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 2
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: LD_INT 2
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: LD_INT 2
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: LD_INT 2
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: LD_INT 1
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 2
53327: NEG
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 2
53338: NEG
53339: PUSH
53340: LD_INT 1
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 2
53350: NEG
53351: PUSH
53352: LD_INT 2
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53381: LD_ADDR_VAR 0 59
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53469: LD_ADDR_VAR 0 60
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53557: LD_ADDR_VAR 0 61
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: LD_INT 1
53577: NEG
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: LD_INT 0
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: LD_INT 1
53598: PUSH
53599: EMPTY
53600: LIST
53601: LIST
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53645: LD_ADDR_VAR 0 62
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 1
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: LD_INT 1
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: NEG
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53733: LD_ADDR_VAR 0 63
53737: PUSH
53738: LD_INT 0
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 0
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: LD_INT 0
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: NEG
53792: PUSH
53793: LD_INT 0
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: LD_INT 1
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53821: LD_ADDR_VAR 0 64
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: LD_INT 1
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 1
53879: NEG
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: LD_INT 1
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: ST_TO_ADDR
// end ; 1 :
53909: GO 59806
53911: LD_INT 1
53913: DOUBLE
53914: EQUAL
53915: IFTRUE 53919
53917: GO 56542
53919: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53920: LD_ADDR_VAR 0 11
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: LD_INT 3
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: LD_INT 3
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: LD_INT 2
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: LIST
53963: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53964: LD_ADDR_VAR 0 12
53968: PUSH
53969: LD_INT 2
53971: PUSH
53972: LD_INT 1
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 3
53982: PUSH
53983: LD_INT 0
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 3
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: LIST
54004: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54005: LD_ADDR_VAR 0 13
54009: PUSH
54010: LD_INT 3
54012: PUSH
54013: LD_INT 2
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 3
54022: PUSH
54023: LD_INT 3
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 2
54032: PUSH
54033: LD_INT 3
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: LIST
54044: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54045: LD_ADDR_VAR 0 14
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: LD_INT 3
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: LD_INT 3
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: LIST
54085: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54086: LD_ADDR_VAR 0 15
54090: PUSH
54091: LD_INT 2
54093: NEG
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 3
54104: NEG
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 3
54115: NEG
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: LIST
54129: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54130: LD_ADDR_VAR 0 16
54134: PUSH
54135: LD_INT 2
54137: NEG
54138: PUSH
54139: LD_INT 3
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 3
54149: NEG
54150: PUSH
54151: LD_INT 2
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 3
54161: NEG
54162: PUSH
54163: LD_INT 3
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: LIST
54175: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54176: LD_ADDR_VAR 0 17
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: LD_INT 3
54187: NEG
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: LD_INT 3
54198: NEG
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: LD_INT 2
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: LIST
54219: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54220: LD_ADDR_VAR 0 18
54224: PUSH
54225: LD_INT 2
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 3
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 3
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: LIST
54260: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54261: LD_ADDR_VAR 0 19
54265: PUSH
54266: LD_INT 3
54268: PUSH
54269: LD_INT 2
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 3
54278: PUSH
54279: LD_INT 3
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: LD_INT 3
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: LIST
54300: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54301: LD_ADDR_VAR 0 20
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: LD_INT 3
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: LD_INT 3
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: LD_INT 2
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: LIST
54341: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54342: LD_ADDR_VAR 0 21
54346: PUSH
54347: LD_INT 2
54349: NEG
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 3
54360: NEG
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 3
54371: NEG
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: LIST
54385: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54386: LD_ADDR_VAR 0 22
54390: PUSH
54391: LD_INT 2
54393: NEG
54394: PUSH
54395: LD_INT 3
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 3
54405: NEG
54406: PUSH
54407: LD_INT 2
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 3
54417: NEG
54418: PUSH
54419: LD_INT 3
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: LIST
54431: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54432: LD_ADDR_VAR 0 23
54436: PUSH
54437: LD_INT 0
54439: PUSH
54440: LD_INT 3
54442: NEG
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: LD_INT 4
54454: NEG
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: LD_INT 3
54465: NEG
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: LIST
54475: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54476: LD_ADDR_VAR 0 24
54480: PUSH
54481: LD_INT 3
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 3
54493: PUSH
54494: LD_INT 1
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 4
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: LIST
54516: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54517: LD_ADDR_VAR 0 25
54521: PUSH
54522: LD_INT 3
54524: PUSH
54525: LD_INT 3
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 4
54534: PUSH
54535: LD_INT 3
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 3
54544: PUSH
54545: LD_INT 4
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: LIST
54556: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54557: LD_ADDR_VAR 0 26
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: LD_INT 3
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: LD_INT 4
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: LD_INT 3
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: LIST
54597: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54598: LD_ADDR_VAR 0 27
54602: PUSH
54603: LD_INT 3
54605: NEG
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 3
54616: NEG
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 4
54627: NEG
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: LIST
54641: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54642: LD_ADDR_VAR 0 28
54646: PUSH
54647: LD_INT 3
54649: NEG
54650: PUSH
54651: LD_INT 3
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 3
54661: NEG
54662: PUSH
54663: LD_INT 4
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 4
54673: NEG
54674: PUSH
54675: LD_INT 3
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: LIST
54687: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54688: LD_ADDR_VAR 0 29
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: LD_INT 3
54699: NEG
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: LD_INT 3
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 1
54729: NEG
54730: PUSH
54731: LD_INT 4
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 0
54741: PUSH
54742: LD_INT 4
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: LD_INT 3
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: LD_INT 5
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: LD_INT 5
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: LD_INT 4
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: LD_INT 6
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: LD_INT 6
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 1
54820: PUSH
54821: LD_INT 5
54823: NEG
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54843: LD_ADDR_VAR 0 30
54847: PUSH
54848: LD_INT 2
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 3
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 3
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 3
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 4
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 4
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 4
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 5
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 5
54933: PUSH
54934: LD_INT 1
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 5
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 6
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 6
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54986: LD_ADDR_VAR 0 31
54990: PUSH
54991: LD_INT 3
54993: PUSH
54994: LD_INT 2
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 3
55003: PUSH
55004: LD_INT 3
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 2
55013: PUSH
55014: LD_INT 3
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 4
55023: PUSH
55024: LD_INT 3
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 4
55033: PUSH
55034: LD_INT 4
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 3
55043: PUSH
55044: LD_INT 4
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 5
55053: PUSH
55054: LD_INT 4
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 5
55063: PUSH
55064: LD_INT 5
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 4
55073: PUSH
55074: LD_INT 5
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 6
55083: PUSH
55084: LD_INT 5
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 6
55093: PUSH
55094: LD_INT 6
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 5
55103: PUSH
55104: LD_INT 6
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55125: LD_ADDR_VAR 0 32
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: LD_INT 3
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 0
55142: PUSH
55143: LD_INT 3
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: LD_INT 2
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: LD_INT 4
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: LD_INT 4
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 1
55183: NEG
55184: PUSH
55185: LD_INT 3
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: LD_INT 5
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: LD_INT 5
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: LD_INT 4
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: LD_INT 6
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: LD_INT 6
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: LD_INT 5
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55268: LD_ADDR_VAR 0 33
55272: PUSH
55273: LD_INT 2
55275: NEG
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 3
55286: NEG
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 3
55297: NEG
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 3
55309: NEG
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 4
55320: NEG
55321: PUSH
55322: LD_INT 0
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 4
55331: NEG
55332: PUSH
55333: LD_INT 1
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 4
55343: NEG
55344: PUSH
55345: LD_INT 1
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 5
55354: NEG
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 5
55365: NEG
55366: PUSH
55367: LD_INT 1
55369: NEG
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 5
55377: NEG
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 6
55388: NEG
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 6
55399: NEG
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55423: LD_ADDR_VAR 0 34
55427: PUSH
55428: LD_INT 2
55430: NEG
55431: PUSH
55432: LD_INT 3
55434: NEG
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 3
55442: NEG
55443: PUSH
55444: LD_INT 2
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 3
55454: NEG
55455: PUSH
55456: LD_INT 3
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 3
55466: NEG
55467: PUSH
55468: LD_INT 4
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 4
55478: NEG
55479: PUSH
55480: LD_INT 3
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 4
55490: NEG
55491: PUSH
55492: LD_INT 4
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 4
55502: NEG
55503: PUSH
55504: LD_INT 5
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 5
55514: NEG
55515: PUSH
55516: LD_INT 4
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 5
55526: NEG
55527: PUSH
55528: LD_INT 5
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 5
55538: NEG
55539: PUSH
55540: LD_INT 6
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 6
55550: NEG
55551: PUSH
55552: LD_INT 5
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 6
55562: NEG
55563: PUSH
55564: LD_INT 6
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55586: LD_ADDR_VAR 0 41
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 2
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: LD_INT 3
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: PUSH
55617: LD_INT 2
55619: NEG
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: LIST
55629: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55630: LD_ADDR_VAR 0 42
55634: PUSH
55635: LD_INT 2
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 2
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 3
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: LIST
55670: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55671: LD_ADDR_VAR 0 43
55675: PUSH
55676: LD_INT 2
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 3
55688: PUSH
55689: LD_INT 2
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 2
55698: PUSH
55699: LD_INT 3
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: LIST
55710: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55711: LD_ADDR_VAR 0 44
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: LD_INT 2
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: LD_INT 3
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: LD_INT 2
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: LIST
55751: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55752: LD_ADDR_VAR 0 45
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 2
55770: NEG
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 3
55781: NEG
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: LIST
55795: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55796: LD_ADDR_VAR 0 46
55800: PUSH
55801: LD_INT 2
55803: NEG
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 2
55815: NEG
55816: PUSH
55817: LD_INT 3
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 3
55827: NEG
55828: PUSH
55829: LD_INT 2
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: LIST
55841: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55842: LD_ADDR_VAR 0 47
55846: PUSH
55847: LD_INT 2
55849: NEG
55850: PUSH
55851: LD_INT 3
55853: NEG
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: LD_INT 3
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55875: LD_ADDR_VAR 0 48
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: LD_INT 2
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 2
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55906: LD_ADDR_VAR 0 49
55910: PUSH
55911: LD_INT 3
55913: PUSH
55914: LD_INT 1
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 3
55923: PUSH
55924: LD_INT 2
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55935: LD_ADDR_VAR 0 50
55939: PUSH
55940: LD_INT 2
55942: PUSH
55943: LD_INT 3
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: LD_INT 3
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55964: LD_ADDR_VAR 0 51
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: LD_INT 2
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 2
55982: NEG
55983: PUSH
55984: LD_INT 1
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55995: LD_ADDR_VAR 0 52
55999: PUSH
56000: LD_INT 3
56002: NEG
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 3
56014: NEG
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56028: LD_ADDR_VAR 0 53
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: LD_INT 3
56039: NEG
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: LD_INT 3
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: LD_INT 2
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: LIST
56071: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56072: LD_ADDR_VAR 0 54
56076: PUSH
56077: LD_INT 2
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 3
56090: PUSH
56091: LD_INT 0
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 3
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: LIST
56112: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56113: LD_ADDR_VAR 0 55
56117: PUSH
56118: LD_INT 3
56120: PUSH
56121: LD_INT 2
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 3
56130: PUSH
56131: LD_INT 3
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 2
56140: PUSH
56141: LD_INT 3
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: LIST
56152: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56153: LD_ADDR_VAR 0 56
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: LD_INT 3
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: LD_INT 3
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 1
56180: NEG
56181: PUSH
56182: LD_INT 2
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: LIST
56193: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56194: LD_ADDR_VAR 0 57
56198: PUSH
56199: LD_INT 2
56201: NEG
56202: PUSH
56203: LD_INT 1
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 3
56212: NEG
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 3
56223: NEG
56224: PUSH
56225: LD_INT 1
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: LIST
56237: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56238: LD_ADDR_VAR 0 58
56242: PUSH
56243: LD_INT 2
56245: NEG
56246: PUSH
56247: LD_INT 3
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 3
56257: NEG
56258: PUSH
56259: LD_INT 2
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 3
56269: NEG
56270: PUSH
56271: LD_INT 3
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: LIST
56283: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56284: LD_ADDR_VAR 0 59
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: LD_INT 2
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 2
56306: NEG
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: LIST
56327: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56328: LD_ADDR_VAR 0 60
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 2
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 2
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: LIST
56368: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56369: LD_ADDR_VAR 0 61
56373: PUSH
56374: LD_INT 2
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 2
56386: PUSH
56387: LD_INT 2
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: LD_INT 2
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: LIST
56408: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56409: LD_ADDR_VAR 0 62
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: LD_INT 2
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: LIST
56449: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56450: LD_ADDR_VAR 0 63
56454: PUSH
56455: LD_INT 1
56457: NEG
56458: PUSH
56459: LD_INT 1
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 2
56468: NEG
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 2
56479: NEG
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: LIST
56493: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56494: LD_ADDR_VAR 0 64
56498: PUSH
56499: LD_INT 1
56501: NEG
56502: PUSH
56503: LD_INT 2
56505: NEG
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 2
56513: NEG
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 2
56525: NEG
56526: PUSH
56527: LD_INT 2
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: LIST
56539: ST_TO_ADDR
// end ; 2 :
56540: GO 59806
56542: LD_INT 2
56544: DOUBLE
56545: EQUAL
56546: IFTRUE 56550
56548: GO 59805
56550: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56551: LD_ADDR_VAR 0 29
56555: PUSH
56556: LD_INT 4
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 4
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 5
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 5
56589: PUSH
56590: LD_INT 1
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 4
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 3
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 3
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 3
56630: PUSH
56631: LD_INT 2
56633: NEG
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 5
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 3
56651: PUSH
56652: LD_INT 3
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 3
56661: PUSH
56662: LD_INT 2
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 4
56671: PUSH
56672: LD_INT 3
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 4
56681: PUSH
56682: LD_INT 4
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 3
56691: PUSH
56692: LD_INT 4
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 2
56701: PUSH
56702: LD_INT 3
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: LD_INT 2
56711: PUSH
56712: LD_INT 2
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 4
56721: PUSH
56722: LD_INT 2
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 2
56731: PUSH
56732: LD_INT 4
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 0
56741: PUSH
56742: LD_INT 4
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: LD_INT 3
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: LD_INT 4
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: LD_INT 5
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 0
56781: PUSH
56782: LD_INT 5
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 1
56791: NEG
56792: PUSH
56793: LD_INT 4
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: LD_INT 3
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 2
56813: PUSH
56814: LD_INT 5
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 2
56823: NEG
56824: PUSH
56825: LD_INT 3
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 3
56834: NEG
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 3
56845: NEG
56846: PUSH
56847: LD_INT 1
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 2
56857: NEG
56858: PUSH
56859: LD_INT 0
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 2
56868: NEG
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 3
56879: NEG
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 4
56890: NEG
56891: PUSH
56892: LD_INT 0
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 4
56901: NEG
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 4
56913: NEG
56914: PUSH
56915: LD_INT 2
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: LD_INT 2
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 4
56936: NEG
56937: PUSH
56938: LD_INT 4
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 4
56948: NEG
56949: PUSH
56950: LD_INT 5
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 3
56960: NEG
56961: PUSH
56962: LD_INT 4
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 3
56972: NEG
56973: PUSH
56974: LD_INT 3
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 4
56984: NEG
56985: PUSH
56986: LD_INT 3
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 5
56996: NEG
56997: PUSH
56998: LD_INT 4
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 5
57008: NEG
57009: PUSH
57010: LD_INT 5
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 3
57020: NEG
57021: PUSH
57022: LD_INT 5
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 5
57032: NEG
57033: PUSH
57034: LD_INT 3
57036: NEG
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57089: LD_ADDR_VAR 0 30
57093: PUSH
57094: LD_INT 4
57096: PUSH
57097: LD_INT 4
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 4
57106: PUSH
57107: LD_INT 3
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 5
57116: PUSH
57117: LD_INT 4
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 5
57126: PUSH
57127: LD_INT 5
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 4
57136: PUSH
57137: LD_INT 5
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 3
57146: PUSH
57147: LD_INT 4
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 3
57156: PUSH
57157: LD_INT 3
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 5
57166: PUSH
57167: LD_INT 3
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 3
57176: PUSH
57177: LD_INT 5
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: LD_INT 3
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 0
57196: PUSH
57197: LD_INT 2
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 1
57206: PUSH
57207: LD_INT 3
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: LD_INT 4
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: LD_INT 4
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: LD_INT 3
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: LD_INT 2
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 2
57258: PUSH
57259: LD_INT 4
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 2
57268: NEG
57269: PUSH
57270: LD_INT 2
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 4
57279: NEG
57280: PUSH
57281: LD_INT 0
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 4
57290: NEG
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 3
57302: NEG
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 3
57313: NEG
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 4
57324: NEG
57325: PUSH
57326: LD_INT 1
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 5
57335: NEG
57336: PUSH
57337: LD_INT 0
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 5
57346: NEG
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 5
57358: NEG
57359: PUSH
57360: LD_INT 2
57362: NEG
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 3
57370: NEG
57371: PUSH
57372: LD_INT 2
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 3
57381: NEG
57382: PUSH
57383: LD_INT 3
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 3
57393: NEG
57394: PUSH
57395: LD_INT 4
57397: NEG
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 2
57405: NEG
57406: PUSH
57407: LD_INT 3
57409: NEG
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 2
57417: NEG
57418: PUSH
57419: LD_INT 2
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 3
57429: NEG
57430: PUSH
57431: LD_INT 2
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 4
57441: NEG
57442: PUSH
57443: LD_INT 3
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 4
57453: NEG
57454: PUSH
57455: LD_INT 4
57457: NEG
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 2
57465: NEG
57466: PUSH
57467: LD_INT 4
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 4
57477: NEG
57478: PUSH
57479: LD_INT 2
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: LD_INT 4
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: LD_INT 5
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: LD_INT 4
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: LD_INT 3
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 0
57533: PUSH
57534: LD_INT 3
57536: NEG
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 1
57544: NEG
57545: PUSH
57546: LD_INT 4
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 1
57556: NEG
57557: PUSH
57558: LD_INT 5
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 2
57568: PUSH
57569: LD_INT 3
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 2
57579: NEG
57580: PUSH
57581: LD_INT 5
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57636: LD_ADDR_VAR 0 31
57640: PUSH
57641: LD_INT 0
57643: PUSH
57644: LD_INT 4
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 0
57653: PUSH
57654: LD_INT 3
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: LD_INT 4
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: LD_INT 5
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: LD_INT 5
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 1
57693: NEG
57694: PUSH
57695: LD_INT 4
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: LD_INT 3
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 2
57715: PUSH
57716: LD_INT 5
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 2
57725: NEG
57726: PUSH
57727: LD_INT 3
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 3
57736: NEG
57737: PUSH
57738: LD_INT 0
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 3
57747: NEG
57748: PUSH
57749: LD_INT 1
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 2
57759: NEG
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 2
57770: NEG
57771: PUSH
57772: LD_INT 1
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 3
57781: NEG
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 4
57792: NEG
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 4
57803: NEG
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 4
57815: NEG
57816: PUSH
57817: LD_INT 2
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 2
57827: NEG
57828: PUSH
57829: LD_INT 2
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 4
57838: NEG
57839: PUSH
57840: LD_INT 4
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 4
57850: NEG
57851: PUSH
57852: LD_INT 5
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 3
57862: NEG
57863: PUSH
57864: LD_INT 4
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 3
57874: NEG
57875: PUSH
57876: LD_INT 3
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 4
57886: NEG
57887: PUSH
57888: LD_INT 3
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 5
57898: NEG
57899: PUSH
57900: LD_INT 4
57902: NEG
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 5
57910: NEG
57911: PUSH
57912: LD_INT 5
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 3
57922: NEG
57923: PUSH
57924: LD_INT 5
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 5
57934: NEG
57935: PUSH
57936: LD_INT 3
57938: NEG
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 0
57946: PUSH
57947: LD_INT 3
57949: NEG
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: LD_INT 4
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: LD_INT 3
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: LD_INT 2
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: LD_INT 2
57993: NEG
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 1
58001: NEG
58002: PUSH
58003: LD_INT 3
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: LD_INT 4
58017: NEG
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 2
58025: PUSH
58026: LD_INT 2
58028: NEG
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 2
58036: NEG
58037: PUSH
58038: LD_INT 4
58040: NEG
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: LD_INT 4
58048: PUSH
58049: LD_INT 0
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 4
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 5
58069: PUSH
58070: LD_INT 0
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 5
58079: PUSH
58080: LD_INT 1
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 4
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 3
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 3
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 3
58120: PUSH
58121: LD_INT 2
58123: NEG
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 5
58131: PUSH
58132: LD_INT 2
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58186: LD_ADDR_VAR 0 32
58190: PUSH
58191: LD_INT 4
58193: NEG
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 4
58204: NEG
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 3
58216: NEG
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 3
58227: NEG
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 4
58238: NEG
58239: PUSH
58240: LD_INT 1
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 5
58249: NEG
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 5
58260: NEG
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 5
58272: NEG
58273: PUSH
58274: LD_INT 2
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 3
58284: NEG
58285: PUSH
58286: LD_INT 2
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 3
58295: NEG
58296: PUSH
58297: LD_INT 3
58299: NEG
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 3
58307: NEG
58308: PUSH
58309: LD_INT 4
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 2
58319: NEG
58320: PUSH
58321: LD_INT 3
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 2
58331: NEG
58332: PUSH
58333: LD_INT 2
58335: NEG
58336: PUSH
58337: EMPTY
58338: LIST
58339: LIST
58340: PUSH
58341: LD_INT 3
58343: NEG
58344: PUSH
58345: LD_INT 2
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 4
58355: NEG
58356: PUSH
58357: LD_INT 3
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 4
58367: NEG
58368: PUSH
58369: LD_INT 4
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 2
58379: NEG
58380: PUSH
58381: LD_INT 4
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 4
58391: NEG
58392: PUSH
58393: LD_INT 2
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 0
58403: PUSH
58404: LD_INT 4
58406: NEG
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: LD_INT 5
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: LD_INT 4
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 1
58436: PUSH
58437: LD_INT 3
58439: NEG
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: LD_INT 3
58450: NEG
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 1
58458: NEG
58459: PUSH
58460: LD_INT 4
58462: NEG
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: LD_INT 5
58474: NEG
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 2
58482: PUSH
58483: LD_INT 3
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 2
58493: NEG
58494: PUSH
58495: LD_INT 5
58497: NEG
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 3
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 3
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 4
58526: PUSH
58527: LD_INT 0
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 4
58536: PUSH
58537: LD_INT 1
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 3
58546: PUSH
58547: LD_INT 1
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 2
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 2
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 2
58577: PUSH
58578: LD_INT 2
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 4
58588: PUSH
58589: LD_INT 2
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 4
58598: PUSH
58599: LD_INT 4
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 4
58608: PUSH
58609: LD_INT 3
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 5
58618: PUSH
58619: LD_INT 4
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 5
58628: PUSH
58629: LD_INT 5
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: PUSH
58636: LD_INT 4
58638: PUSH
58639: LD_INT 5
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 3
58648: PUSH
58649: LD_INT 4
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 3
58658: PUSH
58659: LD_INT 3
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 5
58668: PUSH
58669: LD_INT 3
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 3
58678: PUSH
58679: LD_INT 5
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58733: LD_ADDR_VAR 0 33
58737: PUSH
58738: LD_INT 4
58740: NEG
58741: PUSH
58742: LD_INT 4
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 4
58752: NEG
58753: PUSH
58754: LD_INT 5
58756: NEG
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 3
58764: NEG
58765: PUSH
58766: LD_INT 4
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 3
58776: NEG
58777: PUSH
58778: LD_INT 3
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 4
58788: NEG
58789: PUSH
58790: LD_INT 3
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 5
58800: NEG
58801: PUSH
58802: LD_INT 4
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 5
58812: NEG
58813: PUSH
58814: LD_INT 5
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 3
58824: NEG
58825: PUSH
58826: LD_INT 5
58828: NEG
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 5
58836: NEG
58837: PUSH
58838: LD_INT 3
58840: NEG
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 0
58848: PUSH
58849: LD_INT 3
58851: NEG
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: LD_INT 4
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: LD_INT 3
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: LD_INT 2
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 0
58892: PUSH
58893: LD_INT 2
58895: NEG
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: LD_INT 3
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: LD_INT 4
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 2
58927: PUSH
58928: LD_INT 2
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 2
58938: NEG
58939: PUSH
58940: LD_INT 4
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 4
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 4
58960: PUSH
58961: LD_INT 1
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 5
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 5
58981: PUSH
58982: LD_INT 1
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 4
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 3
59001: PUSH
59002: LD_INT 0
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: LD_INT 3
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 3
59022: PUSH
59023: LD_INT 2
59025: NEG
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 5
59033: PUSH
59034: LD_INT 2
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 3
59043: PUSH
59044: LD_INT 3
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 3
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: EMPTY
59058: LIST
59059: LIST
59060: PUSH
59061: LD_INT 4
59063: PUSH
59064: LD_INT 3
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 4
59073: PUSH
59074: LD_INT 4
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 3
59083: PUSH
59084: LD_INT 4
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 2
59093: PUSH
59094: LD_INT 3
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 2
59103: PUSH
59104: LD_INT 2
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 4
59113: PUSH
59114: LD_INT 2
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 2
59123: PUSH
59124: LD_INT 4
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: LD_INT 4
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 0
59143: PUSH
59144: LD_INT 3
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 1
59153: PUSH
59154: LD_INT 4
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 1
59163: PUSH
59164: LD_INT 5
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 0
59173: PUSH
59174: LD_INT 5
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: LD_INT 4
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: PUSH
59196: LD_INT 3
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 2
59205: PUSH
59206: LD_INT 5
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: LD_INT 2
59215: NEG
59216: PUSH
59217: LD_INT 3
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: LIST
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59271: LD_ADDR_VAR 0 34
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: LD_INT 4
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: LD_INT 5
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 1
59300: PUSH
59301: LD_INT 4
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 1
59311: PUSH
59312: LD_INT 3
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 0
59322: PUSH
59323: LD_INT 3
59325: NEG
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 1
59333: NEG
59334: PUSH
59335: LD_INT 4
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: NEG
59346: PUSH
59347: LD_INT 5
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 2
59357: PUSH
59358: LD_INT 3
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 2
59368: NEG
59369: PUSH
59370: LD_INT 5
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 3
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 3
59390: PUSH
59391: LD_INT 1
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 4
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 4
59411: PUSH
59412: LD_INT 1
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 3
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 2
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 2
59441: PUSH
59442: LD_INT 1
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 2
59452: PUSH
59453: LD_INT 2
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 4
59463: PUSH
59464: LD_INT 2
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 4
59473: PUSH
59474: LD_INT 4
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 4
59483: PUSH
59484: LD_INT 3
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 5
59493: PUSH
59494: LD_INT 4
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 5
59503: PUSH
59504: LD_INT 5
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 4
59513: PUSH
59514: LD_INT 5
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 3
59523: PUSH
59524: LD_INT 4
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 3
59533: PUSH
59534: LD_INT 3
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 5
59543: PUSH
59544: LD_INT 3
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 3
59553: PUSH
59554: LD_INT 5
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: LD_INT 3
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 0
59573: PUSH
59574: LD_INT 2
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: LD_INT 3
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 1
59593: PUSH
59594: LD_INT 4
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 0
59603: PUSH
59604: LD_INT 4
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: LD_INT 3
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 1
59624: NEG
59625: PUSH
59626: LD_INT 2
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 2
59635: PUSH
59636: LD_INT 4
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 2
59645: NEG
59646: PUSH
59647: LD_INT 2
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 4
59656: NEG
59657: PUSH
59658: LD_INT 0
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 4
59667: NEG
59668: PUSH
59669: LD_INT 1
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 3
59679: NEG
59680: PUSH
59681: LD_INT 0
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 3
59690: NEG
59691: PUSH
59692: LD_INT 1
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 4
59701: NEG
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 5
59712: NEG
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 5
59723: NEG
59724: PUSH
59725: LD_INT 1
59727: NEG
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 5
59735: NEG
59736: PUSH
59737: LD_INT 2
59739: NEG
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 3
59747: NEG
59748: PUSH
59749: LD_INT 2
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: ST_TO_ADDR
// end ; end ;
59803: GO 59806
59805: POP
// case btype of b_depot , b_warehouse :
59806: LD_VAR 0 1
59810: PUSH
59811: LD_INT 0
59813: DOUBLE
59814: EQUAL
59815: IFTRUE 59825
59817: LD_INT 1
59819: DOUBLE
59820: EQUAL
59821: IFTRUE 59825
59823: GO 60026
59825: POP
// case nation of nation_american :
59826: LD_VAR 0 5
59830: PUSH
59831: LD_INT 1
59833: DOUBLE
59834: EQUAL
59835: IFTRUE 59839
59837: GO 59895
59839: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59840: LD_ADDR_VAR 0 9
59844: PUSH
59845: LD_VAR 0 11
59849: PUSH
59850: LD_VAR 0 12
59854: PUSH
59855: LD_VAR 0 13
59859: PUSH
59860: LD_VAR 0 14
59864: PUSH
59865: LD_VAR 0 15
59869: PUSH
59870: LD_VAR 0 16
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: PUSH
59883: LD_VAR 0 4
59887: PUSH
59888: LD_INT 1
59890: PLUS
59891: ARRAY
59892: ST_TO_ADDR
59893: GO 60024
59895: LD_INT 2
59897: DOUBLE
59898: EQUAL
59899: IFTRUE 59903
59901: GO 59959
59903: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59904: LD_ADDR_VAR 0 9
59908: PUSH
59909: LD_VAR 0 17
59913: PUSH
59914: LD_VAR 0 18
59918: PUSH
59919: LD_VAR 0 19
59923: PUSH
59924: LD_VAR 0 20
59928: PUSH
59929: LD_VAR 0 21
59933: PUSH
59934: LD_VAR 0 22
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: PUSH
59947: LD_VAR 0 4
59951: PUSH
59952: LD_INT 1
59954: PLUS
59955: ARRAY
59956: ST_TO_ADDR
59957: GO 60024
59959: LD_INT 3
59961: DOUBLE
59962: EQUAL
59963: IFTRUE 59967
59965: GO 60023
59967: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59968: LD_ADDR_VAR 0 9
59972: PUSH
59973: LD_VAR 0 23
59977: PUSH
59978: LD_VAR 0 24
59982: PUSH
59983: LD_VAR 0 25
59987: PUSH
59988: LD_VAR 0 26
59992: PUSH
59993: LD_VAR 0 27
59997: PUSH
59998: LD_VAR 0 28
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: PUSH
60011: LD_VAR 0 4
60015: PUSH
60016: LD_INT 1
60018: PLUS
60019: ARRAY
60020: ST_TO_ADDR
60021: GO 60024
60023: POP
60024: GO 60579
60026: LD_INT 2
60028: DOUBLE
60029: EQUAL
60030: IFTRUE 60040
60032: LD_INT 3
60034: DOUBLE
60035: EQUAL
60036: IFTRUE 60040
60038: GO 60096
60040: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60041: LD_ADDR_VAR 0 9
60045: PUSH
60046: LD_VAR 0 29
60050: PUSH
60051: LD_VAR 0 30
60055: PUSH
60056: LD_VAR 0 31
60060: PUSH
60061: LD_VAR 0 32
60065: PUSH
60066: LD_VAR 0 33
60070: PUSH
60071: LD_VAR 0 34
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: PUSH
60084: LD_VAR 0 4
60088: PUSH
60089: LD_INT 1
60091: PLUS
60092: ARRAY
60093: ST_TO_ADDR
60094: GO 60579
60096: LD_INT 16
60098: DOUBLE
60099: EQUAL
60100: IFTRUE 60158
60102: LD_INT 17
60104: DOUBLE
60105: EQUAL
60106: IFTRUE 60158
60108: LD_INT 18
60110: DOUBLE
60111: EQUAL
60112: IFTRUE 60158
60114: LD_INT 19
60116: DOUBLE
60117: EQUAL
60118: IFTRUE 60158
60120: LD_INT 22
60122: DOUBLE
60123: EQUAL
60124: IFTRUE 60158
60126: LD_INT 20
60128: DOUBLE
60129: EQUAL
60130: IFTRUE 60158
60132: LD_INT 21
60134: DOUBLE
60135: EQUAL
60136: IFTRUE 60158
60138: LD_INT 23
60140: DOUBLE
60141: EQUAL
60142: IFTRUE 60158
60144: LD_INT 24
60146: DOUBLE
60147: EQUAL
60148: IFTRUE 60158
60150: LD_INT 25
60152: DOUBLE
60153: EQUAL
60154: IFTRUE 60158
60156: GO 60214
60158: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60159: LD_ADDR_VAR 0 9
60163: PUSH
60164: LD_VAR 0 35
60168: PUSH
60169: LD_VAR 0 36
60173: PUSH
60174: LD_VAR 0 37
60178: PUSH
60179: LD_VAR 0 38
60183: PUSH
60184: LD_VAR 0 39
60188: PUSH
60189: LD_VAR 0 40
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: PUSH
60202: LD_VAR 0 4
60206: PUSH
60207: LD_INT 1
60209: PLUS
60210: ARRAY
60211: ST_TO_ADDR
60212: GO 60579
60214: LD_INT 6
60216: DOUBLE
60217: EQUAL
60218: IFTRUE 60270
60220: LD_INT 7
60222: DOUBLE
60223: EQUAL
60224: IFTRUE 60270
60226: LD_INT 8
60228: DOUBLE
60229: EQUAL
60230: IFTRUE 60270
60232: LD_INT 13
60234: DOUBLE
60235: EQUAL
60236: IFTRUE 60270
60238: LD_INT 12
60240: DOUBLE
60241: EQUAL
60242: IFTRUE 60270
60244: LD_INT 15
60246: DOUBLE
60247: EQUAL
60248: IFTRUE 60270
60250: LD_INT 11
60252: DOUBLE
60253: EQUAL
60254: IFTRUE 60270
60256: LD_INT 14
60258: DOUBLE
60259: EQUAL
60260: IFTRUE 60270
60262: LD_INT 10
60264: DOUBLE
60265: EQUAL
60266: IFTRUE 60270
60268: GO 60326
60270: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60271: LD_ADDR_VAR 0 9
60275: PUSH
60276: LD_VAR 0 41
60280: PUSH
60281: LD_VAR 0 42
60285: PUSH
60286: LD_VAR 0 43
60290: PUSH
60291: LD_VAR 0 44
60295: PUSH
60296: LD_VAR 0 45
60300: PUSH
60301: LD_VAR 0 46
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: PUSH
60314: LD_VAR 0 4
60318: PUSH
60319: LD_INT 1
60321: PLUS
60322: ARRAY
60323: ST_TO_ADDR
60324: GO 60579
60326: LD_INT 36
60328: DOUBLE
60329: EQUAL
60330: IFTRUE 60334
60332: GO 60390
60334: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60335: LD_ADDR_VAR 0 9
60339: PUSH
60340: LD_VAR 0 47
60344: PUSH
60345: LD_VAR 0 48
60349: PUSH
60350: LD_VAR 0 49
60354: PUSH
60355: LD_VAR 0 50
60359: PUSH
60360: LD_VAR 0 51
60364: PUSH
60365: LD_VAR 0 52
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: PUSH
60378: LD_VAR 0 4
60382: PUSH
60383: LD_INT 1
60385: PLUS
60386: ARRAY
60387: ST_TO_ADDR
60388: GO 60579
60390: LD_INT 4
60392: DOUBLE
60393: EQUAL
60394: IFTRUE 60416
60396: LD_INT 5
60398: DOUBLE
60399: EQUAL
60400: IFTRUE 60416
60402: LD_INT 34
60404: DOUBLE
60405: EQUAL
60406: IFTRUE 60416
60408: LD_INT 37
60410: DOUBLE
60411: EQUAL
60412: IFTRUE 60416
60414: GO 60472
60416: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60417: LD_ADDR_VAR 0 9
60421: PUSH
60422: LD_VAR 0 53
60426: PUSH
60427: LD_VAR 0 54
60431: PUSH
60432: LD_VAR 0 55
60436: PUSH
60437: LD_VAR 0 56
60441: PUSH
60442: LD_VAR 0 57
60446: PUSH
60447: LD_VAR 0 58
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: PUSH
60460: LD_VAR 0 4
60464: PUSH
60465: LD_INT 1
60467: PLUS
60468: ARRAY
60469: ST_TO_ADDR
60470: GO 60579
60472: LD_INT 31
60474: DOUBLE
60475: EQUAL
60476: IFTRUE 60522
60478: LD_INT 32
60480: DOUBLE
60481: EQUAL
60482: IFTRUE 60522
60484: LD_INT 33
60486: DOUBLE
60487: EQUAL
60488: IFTRUE 60522
60490: LD_INT 27
60492: DOUBLE
60493: EQUAL
60494: IFTRUE 60522
60496: LD_INT 26
60498: DOUBLE
60499: EQUAL
60500: IFTRUE 60522
60502: LD_INT 28
60504: DOUBLE
60505: EQUAL
60506: IFTRUE 60522
60508: LD_INT 29
60510: DOUBLE
60511: EQUAL
60512: IFTRUE 60522
60514: LD_INT 30
60516: DOUBLE
60517: EQUAL
60518: IFTRUE 60522
60520: GO 60578
60522: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60523: LD_ADDR_VAR 0 9
60527: PUSH
60528: LD_VAR 0 59
60532: PUSH
60533: LD_VAR 0 60
60537: PUSH
60538: LD_VAR 0 61
60542: PUSH
60543: LD_VAR 0 62
60547: PUSH
60548: LD_VAR 0 63
60552: PUSH
60553: LD_VAR 0 64
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: PUSH
60566: LD_VAR 0 4
60570: PUSH
60571: LD_INT 1
60573: PLUS
60574: ARRAY
60575: ST_TO_ADDR
60576: GO 60579
60578: POP
// temp_list2 = [ ] ;
60579: LD_ADDR_VAR 0 10
60583: PUSH
60584: EMPTY
60585: ST_TO_ADDR
// for i in temp_list do
60586: LD_ADDR_VAR 0 8
60590: PUSH
60591: LD_VAR 0 9
60595: PUSH
60596: FOR_IN
60597: IFFALSE 60649
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60599: LD_ADDR_VAR 0 10
60603: PUSH
60604: LD_VAR 0 10
60608: PUSH
60609: LD_VAR 0 8
60613: PUSH
60614: LD_INT 1
60616: ARRAY
60617: PUSH
60618: LD_VAR 0 2
60622: PLUS
60623: PUSH
60624: LD_VAR 0 8
60628: PUSH
60629: LD_INT 2
60631: ARRAY
60632: PUSH
60633: LD_VAR 0 3
60637: PLUS
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: EMPTY
60644: LIST
60645: ADD
60646: ST_TO_ADDR
60647: GO 60596
60649: POP
60650: POP
// result = temp_list2 ;
60651: LD_ADDR_VAR 0 7
60655: PUSH
60656: LD_VAR 0 10
60660: ST_TO_ADDR
// end ;
60661: LD_VAR 0 7
60665: RET
// export function EnemyInRange ( unit , dist ) ; begin
60666: LD_INT 0
60668: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60669: LD_ADDR_VAR 0 3
60673: PUSH
60674: LD_VAR 0 1
60678: PPUSH
60679: CALL_OW 255
60683: PPUSH
60684: LD_VAR 0 1
60688: PPUSH
60689: CALL_OW 250
60693: PPUSH
60694: LD_VAR 0 1
60698: PPUSH
60699: CALL_OW 251
60703: PPUSH
60704: LD_VAR 0 2
60708: PPUSH
60709: CALL 34062 0 4
60713: PUSH
60714: LD_INT 4
60716: ARRAY
60717: ST_TO_ADDR
// end ;
60718: LD_VAR 0 3
60722: RET
// export function PlayerSeeMe ( unit ) ; begin
60723: LD_INT 0
60725: PPUSH
// result := See ( your_side , unit ) ;
60726: LD_ADDR_VAR 0 2
60730: PUSH
60731: LD_OWVAR 2
60735: PPUSH
60736: LD_VAR 0 1
60740: PPUSH
60741: CALL_OW 292
60745: ST_TO_ADDR
// end ;
60746: LD_VAR 0 2
60750: RET
// export function ReverseDir ( unit ) ; begin
60751: LD_INT 0
60753: PPUSH
// if not unit then
60754: LD_VAR 0 1
60758: NOT
60759: IFFALSE 60763
// exit ;
60761: GO 60786
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60763: LD_ADDR_VAR 0 2
60767: PUSH
60768: LD_VAR 0 1
60772: PPUSH
60773: CALL_OW 254
60777: PUSH
60778: LD_INT 3
60780: PLUS
60781: PUSH
60782: LD_INT 6
60784: MOD
60785: ST_TO_ADDR
// end ;
60786: LD_VAR 0 2
60790: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
60791: LD_INT 0
60793: PPUSH
60794: PPUSH
60795: PPUSH
60796: PPUSH
60797: PPUSH
// if not hexes then
60798: LD_VAR 0 2
60802: NOT
60803: IFFALSE 60807
// exit ;
60805: GO 60955
// dist := 9999 ;
60807: LD_ADDR_VAR 0 5
60811: PUSH
60812: LD_INT 9999
60814: ST_TO_ADDR
// for i = 1 to hexes do
60815: LD_ADDR_VAR 0 4
60819: PUSH
60820: DOUBLE
60821: LD_INT 1
60823: DEC
60824: ST_TO_ADDR
60825: LD_VAR 0 2
60829: PUSH
60830: FOR_TO
60831: IFFALSE 60943
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
60833: LD_VAR 0 1
60837: PPUSH
60838: LD_VAR 0 2
60842: PUSH
60843: LD_VAR 0 4
60847: ARRAY
60848: PUSH
60849: LD_INT 1
60851: ARRAY
60852: PPUSH
60853: LD_VAR 0 2
60857: PUSH
60858: LD_VAR 0 4
60862: ARRAY
60863: PUSH
60864: LD_INT 2
60866: ARRAY
60867: PPUSH
60868: CALL_OW 297
60872: PUSH
60873: LD_VAR 0 5
60877: LESS
60878: IFFALSE 60941
// begin hex := hexes [ i ] ;
60880: LD_ADDR_VAR 0 7
60884: PUSH
60885: LD_VAR 0 2
60889: PUSH
60890: LD_VAR 0 4
60894: ARRAY
60895: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60896: LD_ADDR_VAR 0 5
60900: PUSH
60901: LD_VAR 0 1
60905: PPUSH
60906: LD_VAR 0 2
60910: PUSH
60911: LD_VAR 0 4
60915: ARRAY
60916: PUSH
60917: LD_INT 1
60919: ARRAY
60920: PPUSH
60921: LD_VAR 0 2
60925: PUSH
60926: LD_VAR 0 4
60930: ARRAY
60931: PUSH
60932: LD_INT 2
60934: ARRAY
60935: PPUSH
60936: CALL_OW 297
60940: ST_TO_ADDR
// end ; end ;
60941: GO 60830
60943: POP
60944: POP
// result := hex ;
60945: LD_ADDR_VAR 0 3
60949: PUSH
60950: LD_VAR 0 7
60954: ST_TO_ADDR
// end ;
60955: LD_VAR 0 3
60959: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60960: LD_INT 0
60962: PPUSH
60963: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60964: LD_VAR 0 1
60968: NOT
60969: PUSH
60970: LD_VAR 0 1
60974: PUSH
60975: LD_INT 21
60977: PUSH
60978: LD_INT 2
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 23
60987: PUSH
60988: LD_INT 2
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PPUSH
60999: CALL_OW 69
61003: IN
61004: NOT
61005: OR
61006: IFFALSE 61010
// exit ;
61008: GO 61057
// for i = 1 to 3 do
61010: LD_ADDR_VAR 0 3
61014: PUSH
61015: DOUBLE
61016: LD_INT 1
61018: DEC
61019: ST_TO_ADDR
61020: LD_INT 3
61022: PUSH
61023: FOR_TO
61024: IFFALSE 61055
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61026: LD_VAR 0 1
61030: PPUSH
61031: CALL_OW 250
61035: PPUSH
61036: LD_VAR 0 1
61040: PPUSH
61041: CALL_OW 251
61045: PPUSH
61046: LD_INT 1
61048: PPUSH
61049: CALL_OW 453
61053: GO 61023
61055: POP
61056: POP
// end ;
61057: LD_VAR 0 2
61061: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61062: LD_INT 0
61064: PPUSH
61065: PPUSH
61066: PPUSH
61067: PPUSH
61068: PPUSH
61069: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61070: LD_VAR 0 1
61074: NOT
61075: PUSH
61076: LD_VAR 0 2
61080: NOT
61081: OR
61082: PUSH
61083: LD_VAR 0 1
61087: PPUSH
61088: CALL_OW 314
61092: OR
61093: IFFALSE 61097
// exit ;
61095: GO 61538
// x := GetX ( enemy_unit ) ;
61097: LD_ADDR_VAR 0 7
61101: PUSH
61102: LD_VAR 0 2
61106: PPUSH
61107: CALL_OW 250
61111: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61112: LD_ADDR_VAR 0 8
61116: PUSH
61117: LD_VAR 0 2
61121: PPUSH
61122: CALL_OW 251
61126: ST_TO_ADDR
// if not x or not y then
61127: LD_VAR 0 7
61131: NOT
61132: PUSH
61133: LD_VAR 0 8
61137: NOT
61138: OR
61139: IFFALSE 61143
// exit ;
61141: GO 61538
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61143: LD_ADDR_VAR 0 6
61147: PUSH
61148: LD_VAR 0 7
61152: PPUSH
61153: LD_INT 0
61155: PPUSH
61156: LD_INT 4
61158: PPUSH
61159: CALL_OW 272
61163: PUSH
61164: LD_VAR 0 8
61168: PPUSH
61169: LD_INT 0
61171: PPUSH
61172: LD_INT 4
61174: PPUSH
61175: CALL_OW 273
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_VAR 0 7
61188: PPUSH
61189: LD_INT 1
61191: PPUSH
61192: LD_INT 4
61194: PPUSH
61195: CALL_OW 272
61199: PUSH
61200: LD_VAR 0 8
61204: PPUSH
61205: LD_INT 1
61207: PPUSH
61208: LD_INT 4
61210: PPUSH
61211: CALL_OW 273
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_VAR 0 7
61224: PPUSH
61225: LD_INT 2
61227: PPUSH
61228: LD_INT 4
61230: PPUSH
61231: CALL_OW 272
61235: PUSH
61236: LD_VAR 0 8
61240: PPUSH
61241: LD_INT 2
61243: PPUSH
61244: LD_INT 4
61246: PPUSH
61247: CALL_OW 273
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_VAR 0 7
61260: PPUSH
61261: LD_INT 3
61263: PPUSH
61264: LD_INT 4
61266: PPUSH
61267: CALL_OW 272
61271: PUSH
61272: LD_VAR 0 8
61276: PPUSH
61277: LD_INT 3
61279: PPUSH
61280: LD_INT 4
61282: PPUSH
61283: CALL_OW 273
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_VAR 0 7
61296: PPUSH
61297: LD_INT 4
61299: PPUSH
61300: LD_INT 4
61302: PPUSH
61303: CALL_OW 272
61307: PUSH
61308: LD_VAR 0 8
61312: PPUSH
61313: LD_INT 4
61315: PPUSH
61316: LD_INT 4
61318: PPUSH
61319: CALL_OW 273
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_VAR 0 7
61332: PPUSH
61333: LD_INT 5
61335: PPUSH
61336: LD_INT 4
61338: PPUSH
61339: CALL_OW 272
61343: PUSH
61344: LD_VAR 0 8
61348: PPUSH
61349: LD_INT 5
61351: PPUSH
61352: LD_INT 4
61354: PPUSH
61355: CALL_OW 273
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: ST_TO_ADDR
// for i = tmp downto 1 do
61372: LD_ADDR_VAR 0 4
61376: PUSH
61377: DOUBLE
61378: LD_VAR 0 6
61382: INC
61383: ST_TO_ADDR
61384: LD_INT 1
61386: PUSH
61387: FOR_DOWNTO
61388: IFFALSE 61489
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61390: LD_VAR 0 6
61394: PUSH
61395: LD_VAR 0 4
61399: ARRAY
61400: PUSH
61401: LD_INT 1
61403: ARRAY
61404: PPUSH
61405: LD_VAR 0 6
61409: PUSH
61410: LD_VAR 0 4
61414: ARRAY
61415: PUSH
61416: LD_INT 2
61418: ARRAY
61419: PPUSH
61420: CALL_OW 488
61424: NOT
61425: PUSH
61426: LD_VAR 0 6
61430: PUSH
61431: LD_VAR 0 4
61435: ARRAY
61436: PUSH
61437: LD_INT 1
61439: ARRAY
61440: PPUSH
61441: LD_VAR 0 6
61445: PUSH
61446: LD_VAR 0 4
61450: ARRAY
61451: PUSH
61452: LD_INT 2
61454: ARRAY
61455: PPUSH
61456: CALL_OW 428
61460: PUSH
61461: LD_INT 0
61463: NONEQUAL
61464: OR
61465: IFFALSE 61487
// tmp := Delete ( tmp , i ) ;
61467: LD_ADDR_VAR 0 6
61471: PUSH
61472: LD_VAR 0 6
61476: PPUSH
61477: LD_VAR 0 4
61481: PPUSH
61482: CALL_OW 3
61486: ST_TO_ADDR
61487: GO 61387
61489: POP
61490: POP
// j := GetClosestHex ( unit , tmp ) ;
61491: LD_ADDR_VAR 0 5
61495: PUSH
61496: LD_VAR 0 1
61500: PPUSH
61501: LD_VAR 0 6
61505: PPUSH
61506: CALL 60791 0 2
61510: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61511: LD_VAR 0 1
61515: PPUSH
61516: LD_VAR 0 5
61520: PUSH
61521: LD_INT 1
61523: ARRAY
61524: PPUSH
61525: LD_VAR 0 5
61529: PUSH
61530: LD_INT 2
61532: ARRAY
61533: PPUSH
61534: CALL_OW 111
// end ;
61538: LD_VAR 0 3
61542: RET
// export function PrepareApemanSoldier ( ) ; begin
61543: LD_INT 0
61545: PPUSH
// uc_nation := 0 ;
61546: LD_ADDR_OWVAR 21
61550: PUSH
61551: LD_INT 0
61553: ST_TO_ADDR
// hc_sex := sex_male ;
61554: LD_ADDR_OWVAR 27
61558: PUSH
61559: LD_INT 1
61561: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61562: LD_ADDR_OWVAR 28
61566: PUSH
61567: LD_INT 15
61569: ST_TO_ADDR
// hc_gallery :=  ;
61570: LD_ADDR_OWVAR 33
61574: PUSH
61575: LD_STRING 
61577: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61578: LD_ADDR_OWVAR 31
61582: PUSH
61583: LD_INT 0
61585: PPUSH
61586: LD_INT 3
61588: PPUSH
61589: CALL_OW 12
61593: PUSH
61594: LD_INT 0
61596: PPUSH
61597: LD_INT 3
61599: PPUSH
61600: CALL_OW 12
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: LD_INT 0
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: LIST
61615: LIST
61616: ST_TO_ADDR
// end ;
61617: LD_VAR 0 1
61621: RET
// export function PrepareApemanEngineer ( ) ; begin
61622: LD_INT 0
61624: PPUSH
// uc_nation := 0 ;
61625: LD_ADDR_OWVAR 21
61629: PUSH
61630: LD_INT 0
61632: ST_TO_ADDR
// hc_sex := sex_male ;
61633: LD_ADDR_OWVAR 27
61637: PUSH
61638: LD_INT 1
61640: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61641: LD_ADDR_OWVAR 28
61645: PUSH
61646: LD_INT 16
61648: ST_TO_ADDR
// hc_gallery :=  ;
61649: LD_ADDR_OWVAR 33
61653: PUSH
61654: LD_STRING 
61656: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61657: LD_ADDR_OWVAR 31
61661: PUSH
61662: LD_INT 0
61664: PPUSH
61665: LD_INT 3
61667: PPUSH
61668: CALL_OW 12
61672: PUSH
61673: LD_INT 0
61675: PPUSH
61676: LD_INT 3
61678: PPUSH
61679: CALL_OW 12
61683: PUSH
61684: LD_INT 0
61686: PUSH
61687: LD_INT 0
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: ST_TO_ADDR
// end ;
61696: LD_VAR 0 1
61700: RET
// export function PrepareApeman ( agressivity ) ; begin
61701: LD_INT 0
61703: PPUSH
// uc_side := 0 ;
61704: LD_ADDR_OWVAR 20
61708: PUSH
61709: LD_INT 0
61711: ST_TO_ADDR
// uc_nation := 0 ;
61712: LD_ADDR_OWVAR 21
61716: PUSH
61717: LD_INT 0
61719: ST_TO_ADDR
// hc_sex := sex_male ;
61720: LD_ADDR_OWVAR 27
61724: PUSH
61725: LD_INT 1
61727: ST_TO_ADDR
// hc_class := class_apeman ;
61728: LD_ADDR_OWVAR 28
61732: PUSH
61733: LD_INT 12
61735: ST_TO_ADDR
// hc_gallery :=  ;
61736: LD_ADDR_OWVAR 33
61740: PUSH
61741: LD_STRING 
61743: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61744: LD_ADDR_OWVAR 35
61748: PUSH
61749: LD_VAR 0 1
61753: NEG
61754: PPUSH
61755: LD_VAR 0 1
61759: PPUSH
61760: CALL_OW 12
61764: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61765: LD_ADDR_OWVAR 31
61769: PUSH
61770: LD_INT 0
61772: PPUSH
61773: LD_INT 3
61775: PPUSH
61776: CALL_OW 12
61780: PUSH
61781: LD_INT 0
61783: PPUSH
61784: LD_INT 3
61786: PPUSH
61787: CALL_OW 12
61791: PUSH
61792: LD_INT 0
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: ST_TO_ADDR
// end ;
61804: LD_VAR 0 2
61808: RET
// export function PrepareTiger ( agressivity ) ; begin
61809: LD_INT 0
61811: PPUSH
// uc_side := 0 ;
61812: LD_ADDR_OWVAR 20
61816: PUSH
61817: LD_INT 0
61819: ST_TO_ADDR
// uc_nation := 0 ;
61820: LD_ADDR_OWVAR 21
61824: PUSH
61825: LD_INT 0
61827: ST_TO_ADDR
// hc_class := class_tiger ;
61828: LD_ADDR_OWVAR 28
61832: PUSH
61833: LD_INT 14
61835: ST_TO_ADDR
// hc_gallery :=  ;
61836: LD_ADDR_OWVAR 33
61840: PUSH
61841: LD_STRING 
61843: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61844: LD_ADDR_OWVAR 35
61848: PUSH
61849: LD_VAR 0 1
61853: NEG
61854: PPUSH
61855: LD_VAR 0 1
61859: PPUSH
61860: CALL_OW 12
61864: ST_TO_ADDR
// end ;
61865: LD_VAR 0 2
61869: RET
// export function PrepareEnchidna ( ) ; begin
61870: LD_INT 0
61872: PPUSH
// uc_side := 0 ;
61873: LD_ADDR_OWVAR 20
61877: PUSH
61878: LD_INT 0
61880: ST_TO_ADDR
// uc_nation := 0 ;
61881: LD_ADDR_OWVAR 21
61885: PUSH
61886: LD_INT 0
61888: ST_TO_ADDR
// hc_class := class_baggie ;
61889: LD_ADDR_OWVAR 28
61893: PUSH
61894: LD_INT 13
61896: ST_TO_ADDR
// hc_gallery :=  ;
61897: LD_ADDR_OWVAR 33
61901: PUSH
61902: LD_STRING 
61904: ST_TO_ADDR
// end ;
61905: LD_VAR 0 1
61909: RET
// export function PrepareFrog ( ) ; begin
61910: LD_INT 0
61912: PPUSH
// uc_side := 0 ;
61913: LD_ADDR_OWVAR 20
61917: PUSH
61918: LD_INT 0
61920: ST_TO_ADDR
// uc_nation := 0 ;
61921: LD_ADDR_OWVAR 21
61925: PUSH
61926: LD_INT 0
61928: ST_TO_ADDR
// hc_class := class_frog ;
61929: LD_ADDR_OWVAR 28
61933: PUSH
61934: LD_INT 19
61936: ST_TO_ADDR
// hc_gallery :=  ;
61937: LD_ADDR_OWVAR 33
61941: PUSH
61942: LD_STRING 
61944: ST_TO_ADDR
// end ;
61945: LD_VAR 0 1
61949: RET
// export function PrepareFish ( ) ; begin
61950: LD_INT 0
61952: PPUSH
// uc_side := 0 ;
61953: LD_ADDR_OWVAR 20
61957: PUSH
61958: LD_INT 0
61960: ST_TO_ADDR
// uc_nation := 0 ;
61961: LD_ADDR_OWVAR 21
61965: PUSH
61966: LD_INT 0
61968: ST_TO_ADDR
// hc_class := class_fish ;
61969: LD_ADDR_OWVAR 28
61973: PUSH
61974: LD_INT 20
61976: ST_TO_ADDR
// hc_gallery :=  ;
61977: LD_ADDR_OWVAR 33
61981: PUSH
61982: LD_STRING 
61984: ST_TO_ADDR
// end ;
61985: LD_VAR 0 1
61989: RET
// export function PrepareBird ( ) ; begin
61990: LD_INT 0
61992: PPUSH
// uc_side := 0 ;
61993: LD_ADDR_OWVAR 20
61997: PUSH
61998: LD_INT 0
62000: ST_TO_ADDR
// uc_nation := 0 ;
62001: LD_ADDR_OWVAR 21
62005: PUSH
62006: LD_INT 0
62008: ST_TO_ADDR
// hc_class := class_phororhacos ;
62009: LD_ADDR_OWVAR 28
62013: PUSH
62014: LD_INT 18
62016: ST_TO_ADDR
// hc_gallery :=  ;
62017: LD_ADDR_OWVAR 33
62021: PUSH
62022: LD_STRING 
62024: ST_TO_ADDR
// end ;
62025: LD_VAR 0 1
62029: RET
// export function PrepareHorse ( ) ; begin
62030: LD_INT 0
62032: PPUSH
// uc_side := 0 ;
62033: LD_ADDR_OWVAR 20
62037: PUSH
62038: LD_INT 0
62040: ST_TO_ADDR
// uc_nation := 0 ;
62041: LD_ADDR_OWVAR 21
62045: PUSH
62046: LD_INT 0
62048: ST_TO_ADDR
// hc_class := class_horse ;
62049: LD_ADDR_OWVAR 28
62053: PUSH
62054: LD_INT 21
62056: ST_TO_ADDR
// hc_gallery :=  ;
62057: LD_ADDR_OWVAR 33
62061: PUSH
62062: LD_STRING 
62064: ST_TO_ADDR
// end ;
62065: LD_VAR 0 1
62069: RET
// export function PrepareMastodont ( ) ; begin
62070: LD_INT 0
62072: PPUSH
// uc_side := 0 ;
62073: LD_ADDR_OWVAR 20
62077: PUSH
62078: LD_INT 0
62080: ST_TO_ADDR
// uc_nation := 0 ;
62081: LD_ADDR_OWVAR 21
62085: PUSH
62086: LD_INT 0
62088: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62089: LD_ADDR_OWVAR 37
62093: PUSH
62094: LD_INT 31
62096: ST_TO_ADDR
// vc_control := control_rider ;
62097: LD_ADDR_OWVAR 38
62101: PUSH
62102: LD_INT 4
62104: ST_TO_ADDR
// end ;
62105: LD_VAR 0 1
62109: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62110: LD_INT 0
62112: PPUSH
62113: PPUSH
62114: PPUSH
// uc_side = 0 ;
62115: LD_ADDR_OWVAR 20
62119: PUSH
62120: LD_INT 0
62122: ST_TO_ADDR
// uc_nation = 0 ;
62123: LD_ADDR_OWVAR 21
62127: PUSH
62128: LD_INT 0
62130: ST_TO_ADDR
// InitHc_All ( ) ;
62131: CALL_OW 584
// InitVc ;
62135: CALL_OW 20
// if mastodonts then
62139: LD_VAR 0 6
62143: IFFALSE 62210
// for i = 1 to mastodonts do
62145: LD_ADDR_VAR 0 11
62149: PUSH
62150: DOUBLE
62151: LD_INT 1
62153: DEC
62154: ST_TO_ADDR
62155: LD_VAR 0 6
62159: PUSH
62160: FOR_TO
62161: IFFALSE 62208
// begin vc_chassis := 31 ;
62163: LD_ADDR_OWVAR 37
62167: PUSH
62168: LD_INT 31
62170: ST_TO_ADDR
// vc_control := control_rider ;
62171: LD_ADDR_OWVAR 38
62175: PUSH
62176: LD_INT 4
62178: ST_TO_ADDR
// animal := CreateVehicle ;
62179: LD_ADDR_VAR 0 12
62183: PUSH
62184: CALL_OW 45
62188: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62189: LD_VAR 0 12
62193: PPUSH
62194: LD_VAR 0 8
62198: PPUSH
62199: LD_INT 0
62201: PPUSH
62202: CALL 64345 0 3
// end ;
62206: GO 62160
62208: POP
62209: POP
// if horses then
62210: LD_VAR 0 5
62214: IFFALSE 62281
// for i = 1 to horses do
62216: LD_ADDR_VAR 0 11
62220: PUSH
62221: DOUBLE
62222: LD_INT 1
62224: DEC
62225: ST_TO_ADDR
62226: LD_VAR 0 5
62230: PUSH
62231: FOR_TO
62232: IFFALSE 62279
// begin hc_class := 21 ;
62234: LD_ADDR_OWVAR 28
62238: PUSH
62239: LD_INT 21
62241: ST_TO_ADDR
// hc_gallery :=  ;
62242: LD_ADDR_OWVAR 33
62246: PUSH
62247: LD_STRING 
62249: ST_TO_ADDR
// animal := CreateHuman ;
62250: LD_ADDR_VAR 0 12
62254: PUSH
62255: CALL_OW 44
62259: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62260: LD_VAR 0 12
62264: PPUSH
62265: LD_VAR 0 8
62269: PPUSH
62270: LD_INT 0
62272: PPUSH
62273: CALL 64345 0 3
// end ;
62277: GO 62231
62279: POP
62280: POP
// if birds then
62281: LD_VAR 0 1
62285: IFFALSE 62352
// for i = 1 to birds do
62287: LD_ADDR_VAR 0 11
62291: PUSH
62292: DOUBLE
62293: LD_INT 1
62295: DEC
62296: ST_TO_ADDR
62297: LD_VAR 0 1
62301: PUSH
62302: FOR_TO
62303: IFFALSE 62350
// begin hc_class = 18 ;
62305: LD_ADDR_OWVAR 28
62309: PUSH
62310: LD_INT 18
62312: ST_TO_ADDR
// hc_gallery =  ;
62313: LD_ADDR_OWVAR 33
62317: PUSH
62318: LD_STRING 
62320: ST_TO_ADDR
// animal := CreateHuman ;
62321: LD_ADDR_VAR 0 12
62325: PUSH
62326: CALL_OW 44
62330: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62331: LD_VAR 0 12
62335: PPUSH
62336: LD_VAR 0 8
62340: PPUSH
62341: LD_INT 0
62343: PPUSH
62344: CALL 64345 0 3
// end ;
62348: GO 62302
62350: POP
62351: POP
// if tigers then
62352: LD_VAR 0 2
62356: IFFALSE 62440
// for i = 1 to tigers do
62358: LD_ADDR_VAR 0 11
62362: PUSH
62363: DOUBLE
62364: LD_INT 1
62366: DEC
62367: ST_TO_ADDR
62368: LD_VAR 0 2
62372: PUSH
62373: FOR_TO
62374: IFFALSE 62438
// begin hc_class = class_tiger ;
62376: LD_ADDR_OWVAR 28
62380: PUSH
62381: LD_INT 14
62383: ST_TO_ADDR
// hc_gallery =  ;
62384: LD_ADDR_OWVAR 33
62388: PUSH
62389: LD_STRING 
62391: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62392: LD_ADDR_OWVAR 35
62396: PUSH
62397: LD_INT 7
62399: NEG
62400: PPUSH
62401: LD_INT 7
62403: PPUSH
62404: CALL_OW 12
62408: ST_TO_ADDR
// animal := CreateHuman ;
62409: LD_ADDR_VAR 0 12
62413: PUSH
62414: CALL_OW 44
62418: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62419: LD_VAR 0 12
62423: PPUSH
62424: LD_VAR 0 8
62428: PPUSH
62429: LD_INT 0
62431: PPUSH
62432: CALL 64345 0 3
// end ;
62436: GO 62373
62438: POP
62439: POP
// if apemans then
62440: LD_VAR 0 3
62444: IFFALSE 62567
// for i = 1 to apemans do
62446: LD_ADDR_VAR 0 11
62450: PUSH
62451: DOUBLE
62452: LD_INT 1
62454: DEC
62455: ST_TO_ADDR
62456: LD_VAR 0 3
62460: PUSH
62461: FOR_TO
62462: IFFALSE 62565
// begin hc_class = class_apeman ;
62464: LD_ADDR_OWVAR 28
62468: PUSH
62469: LD_INT 12
62471: ST_TO_ADDR
// hc_gallery =  ;
62472: LD_ADDR_OWVAR 33
62476: PUSH
62477: LD_STRING 
62479: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62480: LD_ADDR_OWVAR 35
62484: PUSH
62485: LD_INT 2
62487: NEG
62488: PPUSH
62489: LD_INT 2
62491: PPUSH
62492: CALL_OW 12
62496: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62497: LD_ADDR_OWVAR 31
62501: PUSH
62502: LD_INT 1
62504: PPUSH
62505: LD_INT 3
62507: PPUSH
62508: CALL_OW 12
62512: PUSH
62513: LD_INT 1
62515: PPUSH
62516: LD_INT 3
62518: PPUSH
62519: CALL_OW 12
62523: PUSH
62524: LD_INT 0
62526: PUSH
62527: LD_INT 0
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: ST_TO_ADDR
// animal := CreateHuman ;
62536: LD_ADDR_VAR 0 12
62540: PUSH
62541: CALL_OW 44
62545: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62546: LD_VAR 0 12
62550: PPUSH
62551: LD_VAR 0 8
62555: PPUSH
62556: LD_INT 0
62558: PPUSH
62559: CALL 64345 0 3
// end ;
62563: GO 62461
62565: POP
62566: POP
// if enchidnas then
62567: LD_VAR 0 4
62571: IFFALSE 62638
// for i = 1 to enchidnas do
62573: LD_ADDR_VAR 0 11
62577: PUSH
62578: DOUBLE
62579: LD_INT 1
62581: DEC
62582: ST_TO_ADDR
62583: LD_VAR 0 4
62587: PUSH
62588: FOR_TO
62589: IFFALSE 62636
// begin hc_class = 13 ;
62591: LD_ADDR_OWVAR 28
62595: PUSH
62596: LD_INT 13
62598: ST_TO_ADDR
// hc_gallery =  ;
62599: LD_ADDR_OWVAR 33
62603: PUSH
62604: LD_STRING 
62606: ST_TO_ADDR
// animal := CreateHuman ;
62607: LD_ADDR_VAR 0 12
62611: PUSH
62612: CALL_OW 44
62616: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62617: LD_VAR 0 12
62621: PPUSH
62622: LD_VAR 0 8
62626: PPUSH
62627: LD_INT 0
62629: PPUSH
62630: CALL 64345 0 3
// end ;
62634: GO 62588
62636: POP
62637: POP
// if fishes then
62638: LD_VAR 0 7
62642: IFFALSE 62709
// for i = 1 to fishes do
62644: LD_ADDR_VAR 0 11
62648: PUSH
62649: DOUBLE
62650: LD_INT 1
62652: DEC
62653: ST_TO_ADDR
62654: LD_VAR 0 7
62658: PUSH
62659: FOR_TO
62660: IFFALSE 62707
// begin hc_class = 20 ;
62662: LD_ADDR_OWVAR 28
62666: PUSH
62667: LD_INT 20
62669: ST_TO_ADDR
// hc_gallery =  ;
62670: LD_ADDR_OWVAR 33
62674: PUSH
62675: LD_STRING 
62677: ST_TO_ADDR
// animal := CreateHuman ;
62678: LD_ADDR_VAR 0 12
62682: PUSH
62683: CALL_OW 44
62687: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62688: LD_VAR 0 12
62692: PPUSH
62693: LD_VAR 0 9
62697: PPUSH
62698: LD_INT 0
62700: PPUSH
62701: CALL 64345 0 3
// end ;
62705: GO 62659
62707: POP
62708: POP
// end ;
62709: LD_VAR 0 10
62713: RET
// export function WantHeal ( sci , unit ) ; begin
62714: LD_INT 0
62716: PPUSH
// if GetTaskList ( sci ) > 0 then
62717: LD_VAR 0 1
62721: PPUSH
62722: CALL_OW 437
62726: PUSH
62727: LD_INT 0
62729: GREATER
62730: IFFALSE 62800
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62732: LD_VAR 0 1
62736: PPUSH
62737: CALL_OW 437
62741: PUSH
62742: LD_INT 1
62744: ARRAY
62745: PUSH
62746: LD_INT 1
62748: ARRAY
62749: PUSH
62750: LD_STRING l
62752: EQUAL
62753: PUSH
62754: LD_VAR 0 1
62758: PPUSH
62759: CALL_OW 437
62763: PUSH
62764: LD_INT 1
62766: ARRAY
62767: PUSH
62768: LD_INT 4
62770: ARRAY
62771: PUSH
62772: LD_VAR 0 2
62776: EQUAL
62777: AND
62778: IFFALSE 62790
// result := true else
62780: LD_ADDR_VAR 0 3
62784: PUSH
62785: LD_INT 1
62787: ST_TO_ADDR
62788: GO 62798
// result := false ;
62790: LD_ADDR_VAR 0 3
62794: PUSH
62795: LD_INT 0
62797: ST_TO_ADDR
// end else
62798: GO 62808
// result := false ;
62800: LD_ADDR_VAR 0 3
62804: PUSH
62805: LD_INT 0
62807: ST_TO_ADDR
// end ;
62808: LD_VAR 0 3
62812: RET
// export function HealTarget ( sci ) ; begin
62813: LD_INT 0
62815: PPUSH
// if not sci then
62816: LD_VAR 0 1
62820: NOT
62821: IFFALSE 62825
// exit ;
62823: GO 62890
// result := 0 ;
62825: LD_ADDR_VAR 0 2
62829: PUSH
62830: LD_INT 0
62832: ST_TO_ADDR
// if GetTaskList ( sci ) then
62833: LD_VAR 0 1
62837: PPUSH
62838: CALL_OW 437
62842: IFFALSE 62890
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62844: LD_VAR 0 1
62848: PPUSH
62849: CALL_OW 437
62853: PUSH
62854: LD_INT 1
62856: ARRAY
62857: PUSH
62858: LD_INT 1
62860: ARRAY
62861: PUSH
62862: LD_STRING l
62864: EQUAL
62865: IFFALSE 62890
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62867: LD_ADDR_VAR 0 2
62871: PUSH
62872: LD_VAR 0 1
62876: PPUSH
62877: CALL_OW 437
62881: PUSH
62882: LD_INT 1
62884: ARRAY
62885: PUSH
62886: LD_INT 4
62888: ARRAY
62889: ST_TO_ADDR
// end ;
62890: LD_VAR 0 2
62894: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62895: LD_INT 0
62897: PPUSH
62898: PPUSH
62899: PPUSH
62900: PPUSH
// if not base_units then
62901: LD_VAR 0 1
62905: NOT
62906: IFFALSE 62910
// exit ;
62908: GO 62997
// result := false ;
62910: LD_ADDR_VAR 0 2
62914: PUSH
62915: LD_INT 0
62917: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62918: LD_ADDR_VAR 0 5
62922: PUSH
62923: LD_VAR 0 1
62927: PPUSH
62928: LD_INT 21
62930: PUSH
62931: LD_INT 3
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PPUSH
62938: CALL_OW 72
62942: ST_TO_ADDR
// if not tmp then
62943: LD_VAR 0 5
62947: NOT
62948: IFFALSE 62952
// exit ;
62950: GO 62997
// for i in tmp do
62952: LD_ADDR_VAR 0 3
62956: PUSH
62957: LD_VAR 0 5
62961: PUSH
62962: FOR_IN
62963: IFFALSE 62995
// begin result := EnemyInRange ( i , 22 ) ;
62965: LD_ADDR_VAR 0 2
62969: PUSH
62970: LD_VAR 0 3
62974: PPUSH
62975: LD_INT 22
62977: PPUSH
62978: CALL 60666 0 2
62982: ST_TO_ADDR
// if result then
62983: LD_VAR 0 2
62987: IFFALSE 62993
// exit ;
62989: POP
62990: POP
62991: GO 62997
// end ;
62993: GO 62962
62995: POP
62996: POP
// end ;
62997: LD_VAR 0 2
63001: RET
// export function FilterByTag ( units , tag ) ; begin
63002: LD_INT 0
63004: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63005: LD_ADDR_VAR 0 3
63009: PUSH
63010: LD_VAR 0 1
63014: PPUSH
63015: LD_INT 120
63017: PUSH
63018: LD_VAR 0 2
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PPUSH
63027: CALL_OW 72
63031: ST_TO_ADDR
// end ;
63032: LD_VAR 0 3
63036: RET
// export function IsDriver ( un ) ; begin
63037: LD_INT 0
63039: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63040: LD_ADDR_VAR 0 2
63044: PUSH
63045: LD_VAR 0 1
63049: PUSH
63050: LD_INT 55
63052: PUSH
63053: EMPTY
63054: LIST
63055: PPUSH
63056: CALL_OW 69
63060: IN
63061: ST_TO_ADDR
// end ;
63062: LD_VAR 0 2
63066: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63067: LD_INT 0
63069: PPUSH
63070: PPUSH
// list := [ ] ;
63071: LD_ADDR_VAR 0 5
63075: PUSH
63076: EMPTY
63077: ST_TO_ADDR
// case d of 0 :
63078: LD_VAR 0 3
63082: PUSH
63083: LD_INT 0
63085: DOUBLE
63086: EQUAL
63087: IFTRUE 63091
63089: GO 63224
63091: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63092: LD_ADDR_VAR 0 5
63096: PUSH
63097: LD_VAR 0 1
63101: PUSH
63102: LD_INT 4
63104: MINUS
63105: PUSH
63106: LD_VAR 0 2
63110: PUSH
63111: LD_INT 4
63113: MINUS
63114: PUSH
63115: LD_INT 2
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: LIST
63122: PUSH
63123: LD_VAR 0 1
63127: PUSH
63128: LD_INT 3
63130: MINUS
63131: PUSH
63132: LD_VAR 0 2
63136: PUSH
63137: LD_INT 1
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: LIST
63144: PUSH
63145: LD_VAR 0 1
63149: PUSH
63150: LD_INT 4
63152: PLUS
63153: PUSH
63154: LD_VAR 0 2
63158: PUSH
63159: LD_INT 4
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: LIST
63166: PUSH
63167: LD_VAR 0 1
63171: PUSH
63172: LD_INT 3
63174: PLUS
63175: PUSH
63176: LD_VAR 0 2
63180: PUSH
63181: LD_INT 3
63183: PLUS
63184: PUSH
63185: LD_INT 5
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: LIST
63192: PUSH
63193: LD_VAR 0 1
63197: PUSH
63198: LD_VAR 0 2
63202: PUSH
63203: LD_INT 4
63205: PLUS
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: LIST
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: LIST
63221: ST_TO_ADDR
// end ; 1 :
63222: GO 63922
63224: LD_INT 1
63226: DOUBLE
63227: EQUAL
63228: IFTRUE 63232
63230: GO 63365
63232: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63233: LD_ADDR_VAR 0 5
63237: PUSH
63238: LD_VAR 0 1
63242: PUSH
63243: LD_VAR 0 2
63247: PUSH
63248: LD_INT 4
63250: MINUS
63251: PUSH
63252: LD_INT 3
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: LIST
63259: PUSH
63260: LD_VAR 0 1
63264: PUSH
63265: LD_INT 3
63267: MINUS
63268: PUSH
63269: LD_VAR 0 2
63273: PUSH
63274: LD_INT 3
63276: MINUS
63277: PUSH
63278: LD_INT 2
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: LIST
63285: PUSH
63286: LD_VAR 0 1
63290: PUSH
63291: LD_INT 4
63293: MINUS
63294: PUSH
63295: LD_VAR 0 2
63299: PUSH
63300: LD_INT 1
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: LIST
63307: PUSH
63308: LD_VAR 0 1
63312: PUSH
63313: LD_VAR 0 2
63317: PUSH
63318: LD_INT 3
63320: PLUS
63321: PUSH
63322: LD_INT 0
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: LIST
63329: PUSH
63330: LD_VAR 0 1
63334: PUSH
63335: LD_INT 4
63337: PLUS
63338: PUSH
63339: LD_VAR 0 2
63343: PUSH
63344: LD_INT 4
63346: PLUS
63347: PUSH
63348: LD_INT 5
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: LIST
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: ST_TO_ADDR
// end ; 2 :
63363: GO 63922
63365: LD_INT 2
63367: DOUBLE
63368: EQUAL
63369: IFTRUE 63373
63371: GO 63502
63373: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63374: LD_ADDR_VAR 0 5
63378: PUSH
63379: LD_VAR 0 1
63383: PUSH
63384: LD_VAR 0 2
63388: PUSH
63389: LD_INT 3
63391: MINUS
63392: PUSH
63393: LD_INT 3
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: LIST
63400: PUSH
63401: LD_VAR 0 1
63405: PUSH
63406: LD_INT 4
63408: PLUS
63409: PUSH
63410: LD_VAR 0 2
63414: PUSH
63415: LD_INT 4
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: LIST
63422: PUSH
63423: LD_VAR 0 1
63427: PUSH
63428: LD_VAR 0 2
63432: PUSH
63433: LD_INT 4
63435: PLUS
63436: PUSH
63437: LD_INT 0
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: LIST
63444: PUSH
63445: LD_VAR 0 1
63449: PUSH
63450: LD_INT 3
63452: MINUS
63453: PUSH
63454: LD_VAR 0 2
63458: PUSH
63459: LD_INT 1
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: LIST
63466: PUSH
63467: LD_VAR 0 1
63471: PUSH
63472: LD_INT 4
63474: MINUS
63475: PUSH
63476: LD_VAR 0 2
63480: PUSH
63481: LD_INT 4
63483: MINUS
63484: PUSH
63485: LD_INT 2
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: LIST
63492: PUSH
63493: EMPTY
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: ST_TO_ADDR
// end ; 3 :
63500: GO 63922
63502: LD_INT 3
63504: DOUBLE
63505: EQUAL
63506: IFTRUE 63510
63508: GO 63643
63510: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63511: LD_ADDR_VAR 0 5
63515: PUSH
63516: LD_VAR 0 1
63520: PUSH
63521: LD_INT 3
63523: PLUS
63524: PUSH
63525: LD_VAR 0 2
63529: PUSH
63530: LD_INT 4
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: LIST
63537: PUSH
63538: LD_VAR 0 1
63542: PUSH
63543: LD_INT 4
63545: PLUS
63546: PUSH
63547: LD_VAR 0 2
63551: PUSH
63552: LD_INT 4
63554: PLUS
63555: PUSH
63556: LD_INT 5
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: LIST
63563: PUSH
63564: LD_VAR 0 1
63568: PUSH
63569: LD_INT 4
63571: MINUS
63572: PUSH
63573: LD_VAR 0 2
63577: PUSH
63578: LD_INT 1
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: LIST
63585: PUSH
63586: LD_VAR 0 1
63590: PUSH
63591: LD_VAR 0 2
63595: PUSH
63596: LD_INT 4
63598: MINUS
63599: PUSH
63600: LD_INT 3
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: LIST
63607: PUSH
63608: LD_VAR 0 1
63612: PUSH
63613: LD_INT 3
63615: MINUS
63616: PUSH
63617: LD_VAR 0 2
63621: PUSH
63622: LD_INT 3
63624: MINUS
63625: PUSH
63626: LD_INT 2
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: LIST
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: ST_TO_ADDR
// end ; 4 :
63641: GO 63922
63643: LD_INT 4
63645: DOUBLE
63646: EQUAL
63647: IFTRUE 63651
63649: GO 63784
63651: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63652: LD_ADDR_VAR 0 5
63656: PUSH
63657: LD_VAR 0 1
63661: PUSH
63662: LD_VAR 0 2
63666: PUSH
63667: LD_INT 4
63669: PLUS
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: LIST
63678: PUSH
63679: LD_VAR 0 1
63683: PUSH
63684: LD_INT 3
63686: PLUS
63687: PUSH
63688: LD_VAR 0 2
63692: PUSH
63693: LD_INT 3
63695: PLUS
63696: PUSH
63697: LD_INT 5
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: LIST
63704: PUSH
63705: LD_VAR 0 1
63709: PUSH
63710: LD_INT 4
63712: PLUS
63713: PUSH
63714: LD_VAR 0 2
63718: PUSH
63719: LD_INT 4
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: LIST
63726: PUSH
63727: LD_VAR 0 1
63731: PUSH
63732: LD_VAR 0 2
63736: PUSH
63737: LD_INT 3
63739: MINUS
63740: PUSH
63741: LD_INT 3
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: LIST
63748: PUSH
63749: LD_VAR 0 1
63753: PUSH
63754: LD_INT 4
63756: MINUS
63757: PUSH
63758: LD_VAR 0 2
63762: PUSH
63763: LD_INT 4
63765: MINUS
63766: PUSH
63767: LD_INT 2
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: LIST
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: ST_TO_ADDR
// end ; 5 :
63782: GO 63922
63784: LD_INT 5
63786: DOUBLE
63787: EQUAL
63788: IFTRUE 63792
63790: GO 63921
63792: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63793: LD_ADDR_VAR 0 5
63797: PUSH
63798: LD_VAR 0 1
63802: PUSH
63803: LD_INT 4
63805: MINUS
63806: PUSH
63807: LD_VAR 0 2
63811: PUSH
63812: LD_INT 1
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: LIST
63819: PUSH
63820: LD_VAR 0 1
63824: PUSH
63825: LD_VAR 0 2
63829: PUSH
63830: LD_INT 4
63832: MINUS
63833: PUSH
63834: LD_INT 3
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: LIST
63841: PUSH
63842: LD_VAR 0 1
63846: PUSH
63847: LD_INT 4
63849: PLUS
63850: PUSH
63851: LD_VAR 0 2
63855: PUSH
63856: LD_INT 4
63858: PLUS
63859: PUSH
63860: LD_INT 5
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: LIST
63867: PUSH
63868: LD_VAR 0 1
63872: PUSH
63873: LD_INT 3
63875: PLUS
63876: PUSH
63877: LD_VAR 0 2
63881: PUSH
63882: LD_INT 4
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: LIST
63889: PUSH
63890: LD_VAR 0 1
63894: PUSH
63895: LD_VAR 0 2
63899: PUSH
63900: LD_INT 3
63902: PLUS
63903: PUSH
63904: LD_INT 0
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: LIST
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: ST_TO_ADDR
// end ; end ;
63919: GO 63922
63921: POP
// result := list ;
63922: LD_ADDR_VAR 0 4
63926: PUSH
63927: LD_VAR 0 5
63931: ST_TO_ADDR
// end ;
63932: LD_VAR 0 4
63936: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63937: LD_INT 0
63939: PPUSH
63940: PPUSH
63941: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63942: LD_VAR 0 1
63946: NOT
63947: PUSH
63948: LD_VAR 0 2
63952: PUSH
63953: LD_INT 1
63955: PUSH
63956: LD_INT 2
63958: PUSH
63959: LD_INT 3
63961: PUSH
63962: LD_INT 4
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: IN
63971: NOT
63972: OR
63973: IFFALSE 63977
// exit ;
63975: GO 64069
// tmp := [ ] ;
63977: LD_ADDR_VAR 0 5
63981: PUSH
63982: EMPTY
63983: ST_TO_ADDR
// for i in units do
63984: LD_ADDR_VAR 0 4
63988: PUSH
63989: LD_VAR 0 1
63993: PUSH
63994: FOR_IN
63995: IFFALSE 64038
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
63997: LD_ADDR_VAR 0 5
64001: PUSH
64002: LD_VAR 0 5
64006: PPUSH
64007: LD_VAR 0 5
64011: PUSH
64012: LD_INT 1
64014: PLUS
64015: PPUSH
64016: LD_VAR 0 4
64020: PPUSH
64021: LD_VAR 0 2
64025: PPUSH
64026: CALL_OW 259
64030: PPUSH
64031: CALL_OW 2
64035: ST_TO_ADDR
64036: GO 63994
64038: POP
64039: POP
// if not tmp then
64040: LD_VAR 0 5
64044: NOT
64045: IFFALSE 64049
// exit ;
64047: GO 64069
// result := SortListByListDesc ( units , tmp ) ;
64049: LD_ADDR_VAR 0 3
64053: PUSH
64054: LD_VAR 0 1
64058: PPUSH
64059: LD_VAR 0 5
64063: PPUSH
64064: CALL_OW 77
64068: ST_TO_ADDR
// end ;
64069: LD_VAR 0 3
64073: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64074: LD_INT 0
64076: PPUSH
64077: PPUSH
64078: PPUSH
// result := false ;
64079: LD_ADDR_VAR 0 3
64083: PUSH
64084: LD_INT 0
64086: ST_TO_ADDR
// x := GetX ( building ) ;
64087: LD_ADDR_VAR 0 4
64091: PUSH
64092: LD_VAR 0 2
64096: PPUSH
64097: CALL_OW 250
64101: ST_TO_ADDR
// y := GetY ( building ) ;
64102: LD_ADDR_VAR 0 5
64106: PUSH
64107: LD_VAR 0 2
64111: PPUSH
64112: CALL_OW 251
64116: ST_TO_ADDR
// if not building or not x or not y then
64117: LD_VAR 0 2
64121: NOT
64122: PUSH
64123: LD_VAR 0 4
64127: NOT
64128: OR
64129: PUSH
64130: LD_VAR 0 5
64134: NOT
64135: OR
64136: IFFALSE 64140
// exit ;
64138: GO 64232
// if GetTaskList ( unit ) then
64140: LD_VAR 0 1
64144: PPUSH
64145: CALL_OW 437
64149: IFFALSE 64232
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64151: LD_STRING e
64153: PUSH
64154: LD_VAR 0 1
64158: PPUSH
64159: CALL_OW 437
64163: PUSH
64164: LD_INT 1
64166: ARRAY
64167: PUSH
64168: LD_INT 1
64170: ARRAY
64171: EQUAL
64172: PUSH
64173: LD_VAR 0 4
64177: PUSH
64178: LD_VAR 0 1
64182: PPUSH
64183: CALL_OW 437
64187: PUSH
64188: LD_INT 1
64190: ARRAY
64191: PUSH
64192: LD_INT 2
64194: ARRAY
64195: EQUAL
64196: AND
64197: PUSH
64198: LD_VAR 0 5
64202: PUSH
64203: LD_VAR 0 1
64207: PPUSH
64208: CALL_OW 437
64212: PUSH
64213: LD_INT 1
64215: ARRAY
64216: PUSH
64217: LD_INT 3
64219: ARRAY
64220: EQUAL
64221: AND
64222: IFFALSE 64232
// result := true end ;
64224: LD_ADDR_VAR 0 3
64228: PUSH
64229: LD_INT 1
64231: ST_TO_ADDR
// end ;
64232: LD_VAR 0 3
64236: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64237: LD_INT 0
64239: PPUSH
// result := false ;
64240: LD_ADDR_VAR 0 4
64244: PUSH
64245: LD_INT 0
64247: ST_TO_ADDR
// if GetTaskList ( unit ) then
64248: LD_VAR 0 1
64252: PPUSH
64253: CALL_OW 437
64257: IFFALSE 64340
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64259: LD_STRING M
64261: PUSH
64262: LD_VAR 0 1
64266: PPUSH
64267: CALL_OW 437
64271: PUSH
64272: LD_INT 1
64274: ARRAY
64275: PUSH
64276: LD_INT 1
64278: ARRAY
64279: EQUAL
64280: PUSH
64281: LD_VAR 0 2
64285: PUSH
64286: LD_VAR 0 1
64290: PPUSH
64291: CALL_OW 437
64295: PUSH
64296: LD_INT 1
64298: ARRAY
64299: PUSH
64300: LD_INT 2
64302: ARRAY
64303: EQUAL
64304: AND
64305: PUSH
64306: LD_VAR 0 3
64310: PUSH
64311: LD_VAR 0 1
64315: PPUSH
64316: CALL_OW 437
64320: PUSH
64321: LD_INT 1
64323: ARRAY
64324: PUSH
64325: LD_INT 3
64327: ARRAY
64328: EQUAL
64329: AND
64330: IFFALSE 64340
// result := true ;
64332: LD_ADDR_VAR 0 4
64336: PUSH
64337: LD_INT 1
64339: ST_TO_ADDR
// end ; end ;
64340: LD_VAR 0 4
64344: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64345: LD_INT 0
64347: PPUSH
64348: PPUSH
64349: PPUSH
64350: PPUSH
// if not unit or not area then
64351: LD_VAR 0 1
64355: NOT
64356: PUSH
64357: LD_VAR 0 2
64361: NOT
64362: OR
64363: IFFALSE 64367
// exit ;
64365: GO 64531
// tmp := AreaToList ( area , i ) ;
64367: LD_ADDR_VAR 0 6
64371: PUSH
64372: LD_VAR 0 2
64376: PPUSH
64377: LD_VAR 0 5
64381: PPUSH
64382: CALL_OW 517
64386: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64387: LD_ADDR_VAR 0 5
64391: PUSH
64392: DOUBLE
64393: LD_INT 1
64395: DEC
64396: ST_TO_ADDR
64397: LD_VAR 0 6
64401: PUSH
64402: LD_INT 1
64404: ARRAY
64405: PUSH
64406: FOR_TO
64407: IFFALSE 64529
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64409: LD_ADDR_VAR 0 7
64413: PUSH
64414: LD_VAR 0 6
64418: PUSH
64419: LD_INT 1
64421: ARRAY
64422: PUSH
64423: LD_VAR 0 5
64427: ARRAY
64428: PUSH
64429: LD_VAR 0 6
64433: PUSH
64434: LD_INT 2
64436: ARRAY
64437: PUSH
64438: LD_VAR 0 5
64442: ARRAY
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64448: LD_VAR 0 7
64452: PUSH
64453: LD_INT 1
64455: ARRAY
64456: PPUSH
64457: LD_VAR 0 7
64461: PUSH
64462: LD_INT 2
64464: ARRAY
64465: PPUSH
64466: CALL_OW 428
64470: PUSH
64471: LD_INT 0
64473: EQUAL
64474: IFFALSE 64527
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64476: LD_VAR 0 1
64480: PPUSH
64481: LD_VAR 0 7
64485: PUSH
64486: LD_INT 1
64488: ARRAY
64489: PPUSH
64490: LD_VAR 0 7
64494: PUSH
64495: LD_INT 2
64497: ARRAY
64498: PPUSH
64499: LD_VAR 0 3
64503: PPUSH
64504: CALL_OW 48
// result := IsPlaced ( unit ) ;
64508: LD_ADDR_VAR 0 4
64512: PUSH
64513: LD_VAR 0 1
64517: PPUSH
64518: CALL_OW 305
64522: ST_TO_ADDR
// exit ;
64523: POP
64524: POP
64525: GO 64531
// end ; end ;
64527: GO 64406
64529: POP
64530: POP
// end ;
64531: LD_VAR 0 4
64535: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64536: LD_INT 0
64538: PPUSH
64539: PPUSH
64540: PPUSH
// if not side or side > 8 then
64541: LD_VAR 0 1
64545: NOT
64546: PUSH
64547: LD_VAR 0 1
64551: PUSH
64552: LD_INT 8
64554: GREATER
64555: OR
64556: IFFALSE 64560
// exit ;
64558: GO 64747
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64560: LD_ADDR_VAR 0 4
64564: PUSH
64565: LD_INT 22
64567: PUSH
64568: LD_VAR 0 1
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 21
64579: PUSH
64580: LD_INT 3
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PPUSH
64591: CALL_OW 69
64595: ST_TO_ADDR
// if not tmp then
64596: LD_VAR 0 4
64600: NOT
64601: IFFALSE 64605
// exit ;
64603: GO 64747
// enable_addtolog := true ;
64605: LD_ADDR_OWVAR 81
64609: PUSH
64610: LD_INT 1
64612: ST_TO_ADDR
// AddToLog ( [ ) ;
64613: LD_STRING [
64615: PPUSH
64616: CALL_OW 561
// for i in tmp do
64620: LD_ADDR_VAR 0 3
64624: PUSH
64625: LD_VAR 0 4
64629: PUSH
64630: FOR_IN
64631: IFFALSE 64738
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64633: LD_STRING [
64635: PUSH
64636: LD_VAR 0 3
64640: PPUSH
64641: CALL_OW 266
64645: STR
64646: PUSH
64647: LD_STRING , 
64649: STR
64650: PUSH
64651: LD_VAR 0 3
64655: PPUSH
64656: CALL_OW 250
64660: STR
64661: PUSH
64662: LD_STRING , 
64664: STR
64665: PUSH
64666: LD_VAR 0 3
64670: PPUSH
64671: CALL_OW 251
64675: STR
64676: PUSH
64677: LD_STRING , 
64679: STR
64680: PUSH
64681: LD_VAR 0 3
64685: PPUSH
64686: CALL_OW 254
64690: STR
64691: PUSH
64692: LD_STRING , 
64694: STR
64695: PUSH
64696: LD_VAR 0 3
64700: PPUSH
64701: LD_INT 1
64703: PPUSH
64704: CALL_OW 268
64708: STR
64709: PUSH
64710: LD_STRING , 
64712: STR
64713: PUSH
64714: LD_VAR 0 3
64718: PPUSH
64719: LD_INT 2
64721: PPUSH
64722: CALL_OW 268
64726: STR
64727: PUSH
64728: LD_STRING ],
64730: STR
64731: PPUSH
64732: CALL_OW 561
// end ;
64736: GO 64630
64738: POP
64739: POP
// AddToLog ( ]; ) ;
64740: LD_STRING ];
64742: PPUSH
64743: CALL_OW 561
// end ;
64747: LD_VAR 0 2
64751: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64752: LD_INT 0
64754: PPUSH
64755: PPUSH
64756: PPUSH
64757: PPUSH
64758: PPUSH
// if not area or not rate or not max then
64759: LD_VAR 0 1
64763: NOT
64764: PUSH
64765: LD_VAR 0 2
64769: NOT
64770: OR
64771: PUSH
64772: LD_VAR 0 4
64776: NOT
64777: OR
64778: IFFALSE 64782
// exit ;
64780: GO 64971
// while 1 do
64782: LD_INT 1
64784: IFFALSE 64971
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64786: LD_ADDR_VAR 0 9
64790: PUSH
64791: LD_VAR 0 1
64795: PPUSH
64796: LD_INT 1
64798: PPUSH
64799: CALL_OW 287
64803: PUSH
64804: LD_INT 10
64806: MUL
64807: ST_TO_ADDR
// r := rate / 10 ;
64808: LD_ADDR_VAR 0 7
64812: PUSH
64813: LD_VAR 0 2
64817: PUSH
64818: LD_INT 10
64820: DIVREAL
64821: ST_TO_ADDR
// time := 1 1$00 ;
64822: LD_ADDR_VAR 0 8
64826: PUSH
64827: LD_INT 2100
64829: ST_TO_ADDR
// if amount < min then
64830: LD_VAR 0 9
64834: PUSH
64835: LD_VAR 0 3
64839: LESS
64840: IFFALSE 64858
// r := r * 2 else
64842: LD_ADDR_VAR 0 7
64846: PUSH
64847: LD_VAR 0 7
64851: PUSH
64852: LD_INT 2
64854: MUL
64855: ST_TO_ADDR
64856: GO 64884
// if amount > max then
64858: LD_VAR 0 9
64862: PUSH
64863: LD_VAR 0 4
64867: GREATER
64868: IFFALSE 64884
// r := r / 2 ;
64870: LD_ADDR_VAR 0 7
64874: PUSH
64875: LD_VAR 0 7
64879: PUSH
64880: LD_INT 2
64882: DIVREAL
64883: ST_TO_ADDR
// time := time / r ;
64884: LD_ADDR_VAR 0 8
64888: PUSH
64889: LD_VAR 0 8
64893: PUSH
64894: LD_VAR 0 7
64898: DIVREAL
64899: ST_TO_ADDR
// if time < 0 then
64900: LD_VAR 0 8
64904: PUSH
64905: LD_INT 0
64907: LESS
64908: IFFALSE 64925
// time := time * - 1 ;
64910: LD_ADDR_VAR 0 8
64914: PUSH
64915: LD_VAR 0 8
64919: PUSH
64920: LD_INT 1
64922: NEG
64923: MUL
64924: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64925: LD_VAR 0 8
64929: PUSH
64930: LD_INT 35
64932: PPUSH
64933: LD_INT 875
64935: PPUSH
64936: CALL_OW 12
64940: PLUS
64941: PPUSH
64942: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64946: LD_INT 1
64948: PPUSH
64949: LD_INT 5
64951: PPUSH
64952: CALL_OW 12
64956: PPUSH
64957: LD_VAR 0 1
64961: PPUSH
64962: LD_INT 1
64964: PPUSH
64965: CALL_OW 55
// end ;
64969: GO 64782
// end ;
64971: LD_VAR 0 5
64975: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64976: LD_INT 0
64978: PPUSH
64979: PPUSH
64980: PPUSH
64981: PPUSH
64982: PPUSH
64983: PPUSH
64984: PPUSH
64985: PPUSH
// if not turrets or not factories then
64986: LD_VAR 0 1
64990: NOT
64991: PUSH
64992: LD_VAR 0 2
64996: NOT
64997: OR
64998: IFFALSE 65002
// exit ;
65000: GO 65309
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65002: LD_ADDR_VAR 0 10
65006: PUSH
65007: LD_INT 5
65009: PUSH
65010: LD_INT 6
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 2
65019: PUSH
65020: LD_INT 4
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 3
65029: PUSH
65030: LD_INT 5
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 24
65044: PUSH
65045: LD_INT 25
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 23
65054: PUSH
65055: LD_INT 27
65057: PUSH
65058: EMPTY
65059: LIST
65060: LIST
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 42
65068: PUSH
65069: LD_INT 43
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 44
65078: PUSH
65079: LD_INT 46
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 45
65088: PUSH
65089: LD_INT 47
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: LIST
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: LIST
65105: ST_TO_ADDR
// result := [ ] ;
65106: LD_ADDR_VAR 0 3
65110: PUSH
65111: EMPTY
65112: ST_TO_ADDR
// for i in turrets do
65113: LD_ADDR_VAR 0 4
65117: PUSH
65118: LD_VAR 0 1
65122: PUSH
65123: FOR_IN
65124: IFFALSE 65307
// begin nat := GetNation ( i ) ;
65126: LD_ADDR_VAR 0 7
65130: PUSH
65131: LD_VAR 0 4
65135: PPUSH
65136: CALL_OW 248
65140: ST_TO_ADDR
// weapon := 0 ;
65141: LD_ADDR_VAR 0 8
65145: PUSH
65146: LD_INT 0
65148: ST_TO_ADDR
// if not nat then
65149: LD_VAR 0 7
65153: NOT
65154: IFFALSE 65158
// continue ;
65156: GO 65123
// for j in list [ nat ] do
65158: LD_ADDR_VAR 0 5
65162: PUSH
65163: LD_VAR 0 10
65167: PUSH
65168: LD_VAR 0 7
65172: ARRAY
65173: PUSH
65174: FOR_IN
65175: IFFALSE 65216
// if GetBWeapon ( i ) = j [ 1 ] then
65177: LD_VAR 0 4
65181: PPUSH
65182: CALL_OW 269
65186: PUSH
65187: LD_VAR 0 5
65191: PUSH
65192: LD_INT 1
65194: ARRAY
65195: EQUAL
65196: IFFALSE 65214
// begin weapon := j [ 2 ] ;
65198: LD_ADDR_VAR 0 8
65202: PUSH
65203: LD_VAR 0 5
65207: PUSH
65208: LD_INT 2
65210: ARRAY
65211: ST_TO_ADDR
// break ;
65212: GO 65216
// end ;
65214: GO 65174
65216: POP
65217: POP
// if not weapon then
65218: LD_VAR 0 8
65222: NOT
65223: IFFALSE 65227
// continue ;
65225: GO 65123
// for k in factories do
65227: LD_ADDR_VAR 0 6
65231: PUSH
65232: LD_VAR 0 2
65236: PUSH
65237: FOR_IN
65238: IFFALSE 65303
// begin weapons := AvailableWeaponList ( k ) ;
65240: LD_ADDR_VAR 0 9
65244: PUSH
65245: LD_VAR 0 6
65249: PPUSH
65250: CALL_OW 478
65254: ST_TO_ADDR
// if not weapons then
65255: LD_VAR 0 9
65259: NOT
65260: IFFALSE 65264
// continue ;
65262: GO 65237
// if weapon in weapons then
65264: LD_VAR 0 8
65268: PUSH
65269: LD_VAR 0 9
65273: IN
65274: IFFALSE 65301
// begin result := [ i , weapon ] ;
65276: LD_ADDR_VAR 0 3
65280: PUSH
65281: LD_VAR 0 4
65285: PUSH
65286: LD_VAR 0 8
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: ST_TO_ADDR
// exit ;
65295: POP
65296: POP
65297: POP
65298: POP
65299: GO 65309
// end ; end ;
65301: GO 65237
65303: POP
65304: POP
// end ;
65305: GO 65123
65307: POP
65308: POP
// end ;
65309: LD_VAR 0 3
65313: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65314: LD_INT 0
65316: PPUSH
// if not side or side > 8 then
65317: LD_VAR 0 3
65321: NOT
65322: PUSH
65323: LD_VAR 0 3
65327: PUSH
65328: LD_INT 8
65330: GREATER
65331: OR
65332: IFFALSE 65336
// exit ;
65334: GO 65395
// if not range then
65336: LD_VAR 0 4
65340: NOT
65341: IFFALSE 65352
// range := - 12 ;
65343: LD_ADDR_VAR 0 4
65347: PUSH
65348: LD_INT 12
65350: NEG
65351: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65352: LD_VAR 0 1
65356: PPUSH
65357: LD_VAR 0 2
65361: PPUSH
65362: LD_VAR 0 3
65366: PPUSH
65367: LD_VAR 0 4
65371: PPUSH
65372: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65376: LD_VAR 0 1
65380: PPUSH
65381: LD_VAR 0 2
65385: PPUSH
65386: LD_VAR 0 3
65390: PPUSH
65391: CALL_OW 331
// end ;
65395: LD_VAR 0 5
65399: RET
// export function Video ( mode ) ; begin
65400: LD_INT 0
65402: PPUSH
// ingame_video = mode ;
65403: LD_ADDR_OWVAR 52
65407: PUSH
65408: LD_VAR 0 1
65412: ST_TO_ADDR
// interface_hidden = mode ;
65413: LD_ADDR_OWVAR 54
65417: PUSH
65418: LD_VAR 0 1
65422: ST_TO_ADDR
// end ;
65423: LD_VAR 0 2
65427: RET
// export function Join ( array , element ) ; begin
65428: LD_INT 0
65430: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65431: LD_ADDR_VAR 0 3
65435: PUSH
65436: LD_VAR 0 1
65440: PPUSH
65441: LD_VAR 0 1
65445: PUSH
65446: LD_INT 1
65448: PLUS
65449: PPUSH
65450: LD_VAR 0 2
65454: PPUSH
65455: CALL_OW 1
65459: ST_TO_ADDR
// end ;
65460: LD_VAR 0 3
65464: RET
// export function JoinUnion ( array , element ) ; begin
65465: LD_INT 0
65467: PPUSH
// result := array union element ;
65468: LD_ADDR_VAR 0 3
65472: PUSH
65473: LD_VAR 0 1
65477: PUSH
65478: LD_VAR 0 2
65482: UNION
65483: ST_TO_ADDR
// end ;
65484: LD_VAR 0 3
65488: RET
// export function GetBehemoths ( side ) ; begin
65489: LD_INT 0
65491: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65492: LD_ADDR_VAR 0 2
65496: PUSH
65497: LD_INT 22
65499: PUSH
65500: LD_VAR 0 1
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 31
65511: PUSH
65512: LD_INT 25
65514: PUSH
65515: EMPTY
65516: LIST
65517: LIST
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PPUSH
65523: CALL_OW 69
65527: ST_TO_ADDR
// end ;
65528: LD_VAR 0 2
65532: RET
// export function Shuffle ( array ) ; var i , index ; begin
65533: LD_INT 0
65535: PPUSH
65536: PPUSH
65537: PPUSH
// result := [ ] ;
65538: LD_ADDR_VAR 0 2
65542: PUSH
65543: EMPTY
65544: ST_TO_ADDR
// if not array then
65545: LD_VAR 0 1
65549: NOT
65550: IFFALSE 65554
// exit ;
65552: GO 65653
// Randomize ;
65554: CALL_OW 10
// for i = array downto 1 do
65558: LD_ADDR_VAR 0 3
65562: PUSH
65563: DOUBLE
65564: LD_VAR 0 1
65568: INC
65569: ST_TO_ADDR
65570: LD_INT 1
65572: PUSH
65573: FOR_DOWNTO
65574: IFFALSE 65651
// begin index := rand ( 1 , array ) ;
65576: LD_ADDR_VAR 0 4
65580: PUSH
65581: LD_INT 1
65583: PPUSH
65584: LD_VAR 0 1
65588: PPUSH
65589: CALL_OW 12
65593: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65594: LD_ADDR_VAR 0 2
65598: PUSH
65599: LD_VAR 0 2
65603: PPUSH
65604: LD_VAR 0 2
65608: PUSH
65609: LD_INT 1
65611: PLUS
65612: PPUSH
65613: LD_VAR 0 1
65617: PUSH
65618: LD_VAR 0 4
65622: ARRAY
65623: PPUSH
65624: CALL_OW 2
65628: ST_TO_ADDR
// array := Delete ( array , index ) ;
65629: LD_ADDR_VAR 0 1
65633: PUSH
65634: LD_VAR 0 1
65638: PPUSH
65639: LD_VAR 0 4
65643: PPUSH
65644: CALL_OW 3
65648: ST_TO_ADDR
// end ;
65649: GO 65573
65651: POP
65652: POP
// end ;
65653: LD_VAR 0 2
65657: RET
// export function GetBaseMaterials ( base ) ; begin
65658: LD_INT 0
65660: PPUSH
// result := [ 0 , 0 , 0 ] ;
65661: LD_ADDR_VAR 0 2
65665: PUSH
65666: LD_INT 0
65668: PUSH
65669: LD_INT 0
65671: PUSH
65672: LD_INT 0
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: LIST
65679: ST_TO_ADDR
// if not base then
65680: LD_VAR 0 1
65684: NOT
65685: IFFALSE 65689
// exit ;
65687: GO 65738
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65689: LD_ADDR_VAR 0 2
65693: PUSH
65694: LD_VAR 0 1
65698: PPUSH
65699: LD_INT 1
65701: PPUSH
65702: CALL_OW 275
65706: PUSH
65707: LD_VAR 0 1
65711: PPUSH
65712: LD_INT 2
65714: PPUSH
65715: CALL_OW 275
65719: PUSH
65720: LD_VAR 0 1
65724: PPUSH
65725: LD_INT 3
65727: PPUSH
65728: CALL_OW 275
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: LIST
65737: ST_TO_ADDR
// end ;
65738: LD_VAR 0 2
65742: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65743: LD_INT 0
65745: PPUSH
65746: PPUSH
// result := array ;
65747: LD_ADDR_VAR 0 3
65751: PUSH
65752: LD_VAR 0 1
65756: ST_TO_ADDR
// if size >= result then
65757: LD_VAR 0 2
65761: PUSH
65762: LD_VAR 0 3
65766: GREATEREQUAL
65767: IFFALSE 65771
// exit ;
65769: GO 65821
// if size then
65771: LD_VAR 0 2
65775: IFFALSE 65821
// for i := array downto size do
65777: LD_ADDR_VAR 0 4
65781: PUSH
65782: DOUBLE
65783: LD_VAR 0 1
65787: INC
65788: ST_TO_ADDR
65789: LD_VAR 0 2
65793: PUSH
65794: FOR_DOWNTO
65795: IFFALSE 65819
// result := Delete ( result , result ) ;
65797: LD_ADDR_VAR 0 3
65801: PUSH
65802: LD_VAR 0 3
65806: PPUSH
65807: LD_VAR 0 3
65811: PPUSH
65812: CALL_OW 3
65816: ST_TO_ADDR
65817: GO 65794
65819: POP
65820: POP
// end ;
65821: LD_VAR 0 3
65825: RET
// export function ComExit ( unit ) ; var tmp ; begin
65826: LD_INT 0
65828: PPUSH
65829: PPUSH
// if not IsInUnit ( unit ) then
65830: LD_VAR 0 1
65834: PPUSH
65835: CALL_OW 310
65839: NOT
65840: IFFALSE 65844
// exit ;
65842: GO 65904
// tmp := IsInUnit ( unit ) ;
65844: LD_ADDR_VAR 0 3
65848: PUSH
65849: LD_VAR 0 1
65853: PPUSH
65854: CALL_OW 310
65858: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65859: LD_VAR 0 3
65863: PPUSH
65864: CALL_OW 247
65868: PUSH
65869: LD_INT 2
65871: EQUAL
65872: IFFALSE 65885
// ComExitVehicle ( unit ) else
65874: LD_VAR 0 1
65878: PPUSH
65879: CALL_OW 121
65883: GO 65894
// ComExitBuilding ( unit ) ;
65885: LD_VAR 0 1
65889: PPUSH
65890: CALL_OW 122
// result := tmp ;
65894: LD_ADDR_VAR 0 2
65898: PUSH
65899: LD_VAR 0 3
65903: ST_TO_ADDR
// end ;
65904: LD_VAR 0 2
65908: RET
// export function ComExitAll ( units ) ; var i ; begin
65909: LD_INT 0
65911: PPUSH
65912: PPUSH
// if not units then
65913: LD_VAR 0 1
65917: NOT
65918: IFFALSE 65922
// exit ;
65920: GO 65948
// for i in units do
65922: LD_ADDR_VAR 0 3
65926: PUSH
65927: LD_VAR 0 1
65931: PUSH
65932: FOR_IN
65933: IFFALSE 65946
// ComExit ( i ) ;
65935: LD_VAR 0 3
65939: PPUSH
65940: CALL 65826 0 1
65944: GO 65932
65946: POP
65947: POP
// end ;
65948: LD_VAR 0 2
65952: RET
// export function ResetHc ; begin
65953: LD_INT 0
65955: PPUSH
// InitHc ;
65956: CALL_OW 19
// hc_importance := 0 ;
65960: LD_ADDR_OWVAR 32
65964: PUSH
65965: LD_INT 0
65967: ST_TO_ADDR
// end ;
65968: LD_VAR 0 1
65972: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65973: LD_INT 0
65975: PPUSH
65976: PPUSH
65977: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65978: LD_ADDR_VAR 0 6
65982: PUSH
65983: LD_VAR 0 1
65987: PUSH
65988: LD_VAR 0 3
65992: PLUS
65993: PUSH
65994: LD_INT 2
65996: DIV
65997: ST_TO_ADDR
// if _x < 0 then
65998: LD_VAR 0 6
66002: PUSH
66003: LD_INT 0
66005: LESS
66006: IFFALSE 66023
// _x := _x * - 1 ;
66008: LD_ADDR_VAR 0 6
66012: PUSH
66013: LD_VAR 0 6
66017: PUSH
66018: LD_INT 1
66020: NEG
66021: MUL
66022: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66023: LD_ADDR_VAR 0 7
66027: PUSH
66028: LD_VAR 0 2
66032: PUSH
66033: LD_VAR 0 4
66037: PLUS
66038: PUSH
66039: LD_INT 2
66041: DIV
66042: ST_TO_ADDR
// if _y < 0 then
66043: LD_VAR 0 7
66047: PUSH
66048: LD_INT 0
66050: LESS
66051: IFFALSE 66068
// _y := _y * - 1 ;
66053: LD_ADDR_VAR 0 7
66057: PUSH
66058: LD_VAR 0 7
66062: PUSH
66063: LD_INT 1
66065: NEG
66066: MUL
66067: ST_TO_ADDR
// result := [ _x , _y ] ;
66068: LD_ADDR_VAR 0 5
66072: PUSH
66073: LD_VAR 0 6
66077: PUSH
66078: LD_VAR 0 7
66082: PUSH
66083: EMPTY
66084: LIST
66085: LIST
66086: ST_TO_ADDR
// end ;
66087: LD_VAR 0 5
66091: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66092: LD_INT 0
66094: PPUSH
66095: PPUSH
66096: PPUSH
66097: PPUSH
// task := GetTaskList ( unit ) ;
66098: LD_ADDR_VAR 0 7
66102: PUSH
66103: LD_VAR 0 1
66107: PPUSH
66108: CALL_OW 437
66112: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66113: LD_VAR 0 7
66117: NOT
66118: PUSH
66119: LD_VAR 0 1
66123: PPUSH
66124: LD_VAR 0 2
66128: PPUSH
66129: CALL_OW 308
66133: NOT
66134: AND
66135: IFFALSE 66139
// exit ;
66137: GO 66257
// if IsInArea ( unit , area ) then
66139: LD_VAR 0 1
66143: PPUSH
66144: LD_VAR 0 2
66148: PPUSH
66149: CALL_OW 308
66153: IFFALSE 66171
// begin ComMoveToArea ( unit , goAway ) ;
66155: LD_VAR 0 1
66159: PPUSH
66160: LD_VAR 0 3
66164: PPUSH
66165: CALL_OW 113
// exit ;
66169: GO 66257
// end ; if task [ 1 ] [ 1 ] <> M then
66171: LD_VAR 0 7
66175: PUSH
66176: LD_INT 1
66178: ARRAY
66179: PUSH
66180: LD_INT 1
66182: ARRAY
66183: PUSH
66184: LD_STRING M
66186: NONEQUAL
66187: IFFALSE 66191
// exit ;
66189: GO 66257
// x := task [ 1 ] [ 2 ] ;
66191: LD_ADDR_VAR 0 5
66195: PUSH
66196: LD_VAR 0 7
66200: PUSH
66201: LD_INT 1
66203: ARRAY
66204: PUSH
66205: LD_INT 2
66207: ARRAY
66208: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66209: LD_ADDR_VAR 0 6
66213: PUSH
66214: LD_VAR 0 7
66218: PUSH
66219: LD_INT 1
66221: ARRAY
66222: PUSH
66223: LD_INT 3
66225: ARRAY
66226: ST_TO_ADDR
// if InArea ( x , y , area ) then
66227: LD_VAR 0 5
66231: PPUSH
66232: LD_VAR 0 6
66236: PPUSH
66237: LD_VAR 0 2
66241: PPUSH
66242: CALL_OW 309
66246: IFFALSE 66257
// ComStop ( unit ) ;
66248: LD_VAR 0 1
66252: PPUSH
66253: CALL_OW 141
// end ;
66257: LD_VAR 0 4
66261: RET
// export function Abs ( value ) ; begin
66262: LD_INT 0
66264: PPUSH
// result := value ;
66265: LD_ADDR_VAR 0 2
66269: PUSH
66270: LD_VAR 0 1
66274: ST_TO_ADDR
// if value < 0 then
66275: LD_VAR 0 1
66279: PUSH
66280: LD_INT 0
66282: LESS
66283: IFFALSE 66300
// result := value * - 1 ;
66285: LD_ADDR_VAR 0 2
66289: PUSH
66290: LD_VAR 0 1
66294: PUSH
66295: LD_INT 1
66297: NEG
66298: MUL
66299: ST_TO_ADDR
// end ;
66300: LD_VAR 0 2
66304: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66305: LD_INT 0
66307: PPUSH
66308: PPUSH
66309: PPUSH
66310: PPUSH
66311: PPUSH
66312: PPUSH
66313: PPUSH
66314: PPUSH
// if not unit or not building then
66315: LD_VAR 0 1
66319: NOT
66320: PUSH
66321: LD_VAR 0 2
66325: NOT
66326: OR
66327: IFFALSE 66331
// exit ;
66329: GO 66557
// x := GetX ( building ) ;
66331: LD_ADDR_VAR 0 4
66335: PUSH
66336: LD_VAR 0 2
66340: PPUSH
66341: CALL_OW 250
66345: ST_TO_ADDR
// y := GetY ( building ) ;
66346: LD_ADDR_VAR 0 6
66350: PUSH
66351: LD_VAR 0 2
66355: PPUSH
66356: CALL_OW 251
66360: ST_TO_ADDR
// d := GetDir ( building ) ;
66361: LD_ADDR_VAR 0 8
66365: PUSH
66366: LD_VAR 0 2
66370: PPUSH
66371: CALL_OW 254
66375: ST_TO_ADDR
// r := 4 ;
66376: LD_ADDR_VAR 0 9
66380: PUSH
66381: LD_INT 4
66383: ST_TO_ADDR
// for i := 1 to 5 do
66384: LD_ADDR_VAR 0 10
66388: PUSH
66389: DOUBLE
66390: LD_INT 1
66392: DEC
66393: ST_TO_ADDR
66394: LD_INT 5
66396: PUSH
66397: FOR_TO
66398: IFFALSE 66555
// begin _x := ShiftX ( x , d , r + i ) ;
66400: LD_ADDR_VAR 0 5
66404: PUSH
66405: LD_VAR 0 4
66409: PPUSH
66410: LD_VAR 0 8
66414: PPUSH
66415: LD_VAR 0 9
66419: PUSH
66420: LD_VAR 0 10
66424: PLUS
66425: PPUSH
66426: CALL_OW 272
66430: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66431: LD_ADDR_VAR 0 7
66435: PUSH
66436: LD_VAR 0 6
66440: PPUSH
66441: LD_VAR 0 8
66445: PPUSH
66446: LD_VAR 0 9
66450: PUSH
66451: LD_VAR 0 10
66455: PLUS
66456: PPUSH
66457: CALL_OW 273
66461: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66462: LD_VAR 0 5
66466: PPUSH
66467: LD_VAR 0 7
66471: PPUSH
66472: CALL_OW 488
66476: PUSH
66477: LD_VAR 0 5
66481: PPUSH
66482: LD_VAR 0 7
66486: PPUSH
66487: CALL_OW 428
66491: PPUSH
66492: CALL_OW 247
66496: PUSH
66497: LD_INT 3
66499: PUSH
66500: LD_INT 2
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: IN
66507: NOT
66508: AND
66509: IFFALSE 66553
// begin ComMoveXY ( unit , _x , _y ) ;
66511: LD_VAR 0 1
66515: PPUSH
66516: LD_VAR 0 5
66520: PPUSH
66521: LD_VAR 0 7
66525: PPUSH
66526: CALL_OW 111
// result := [ _x , _y ] ;
66530: LD_ADDR_VAR 0 3
66534: PUSH
66535: LD_VAR 0 5
66539: PUSH
66540: LD_VAR 0 7
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: ST_TO_ADDR
// exit ;
66549: POP
66550: POP
66551: GO 66557
// end ; end ;
66553: GO 66397
66555: POP
66556: POP
// end ;
66557: LD_VAR 0 3
66561: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66562: LD_INT 0
66564: PPUSH
66565: PPUSH
66566: PPUSH
// result := 0 ;
66567: LD_ADDR_VAR 0 3
66571: PUSH
66572: LD_INT 0
66574: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66575: LD_VAR 0 1
66579: PUSH
66580: LD_INT 0
66582: LESS
66583: PUSH
66584: LD_VAR 0 1
66588: PUSH
66589: LD_INT 8
66591: GREATER
66592: OR
66593: PUSH
66594: LD_VAR 0 2
66598: PUSH
66599: LD_INT 0
66601: LESS
66602: OR
66603: PUSH
66604: LD_VAR 0 2
66608: PUSH
66609: LD_INT 8
66611: GREATER
66612: OR
66613: IFFALSE 66617
// exit ;
66615: GO 66692
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66617: LD_ADDR_VAR 0 4
66621: PUSH
66622: LD_INT 22
66624: PUSH
66625: LD_VAR 0 2
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PPUSH
66634: CALL_OW 69
66638: PUSH
66639: FOR_IN
66640: IFFALSE 66690
// begin un := UnitShoot ( i ) ;
66642: LD_ADDR_VAR 0 5
66646: PUSH
66647: LD_VAR 0 4
66651: PPUSH
66652: CALL_OW 504
66656: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66657: LD_VAR 0 5
66661: PPUSH
66662: CALL_OW 255
66666: PUSH
66667: LD_VAR 0 1
66671: EQUAL
66672: IFFALSE 66688
// begin result := un ;
66674: LD_ADDR_VAR 0 3
66678: PUSH
66679: LD_VAR 0 5
66683: ST_TO_ADDR
// exit ;
66684: POP
66685: POP
66686: GO 66692
// end ; end ;
66688: GO 66639
66690: POP
66691: POP
// end ;
66692: LD_VAR 0 3
66696: RET
// export function GetCargoBay ( units ) ; begin
66697: LD_INT 0
66699: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66700: LD_ADDR_VAR 0 2
66704: PUSH
66705: LD_VAR 0 1
66709: PPUSH
66710: LD_INT 2
66712: PUSH
66713: LD_INT 34
66715: PUSH
66716: LD_INT 12
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 34
66725: PUSH
66726: LD_INT 51
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 34
66735: PUSH
66736: LD_INT 32
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 34
66745: PUSH
66746: LD_EXP 30
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: EMPTY
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: PPUSH
66762: CALL_OW 72
66766: ST_TO_ADDR
// end ;
66767: LD_VAR 0 2
66771: RET
// export function Negate ( value ) ; begin
66772: LD_INT 0
66774: PPUSH
// result := not value ;
66775: LD_ADDR_VAR 0 2
66779: PUSH
66780: LD_VAR 0 1
66784: NOT
66785: ST_TO_ADDR
// end ;
66786: LD_VAR 0 2
66790: RET
// export function Inc ( value ) ; begin
66791: LD_INT 0
66793: PPUSH
// result := value + 1 ;
66794: LD_ADDR_VAR 0 2
66798: PUSH
66799: LD_VAR 0 1
66803: PUSH
66804: LD_INT 1
66806: PLUS
66807: ST_TO_ADDR
// end ;
66808: LD_VAR 0 2
66812: RET
// export function Dec ( value ) ; begin
66813: LD_INT 0
66815: PPUSH
// result := value - 1 ;
66816: LD_ADDR_VAR 0 2
66820: PUSH
66821: LD_VAR 0 1
66825: PUSH
66826: LD_INT 1
66828: MINUS
66829: ST_TO_ADDR
// end ;
66830: LD_VAR 0 2
66834: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66835: LD_INT 0
66837: PPUSH
66838: PPUSH
66839: PPUSH
66840: PPUSH
66841: PPUSH
66842: PPUSH
66843: PPUSH
66844: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66845: LD_VAR 0 1
66849: PPUSH
66850: LD_VAR 0 2
66854: PPUSH
66855: CALL_OW 488
66859: NOT
66860: PUSH
66861: LD_VAR 0 3
66865: PPUSH
66866: LD_VAR 0 4
66870: PPUSH
66871: CALL_OW 488
66875: NOT
66876: OR
66877: IFFALSE 66890
// begin result := - 1 ;
66879: LD_ADDR_VAR 0 5
66883: PUSH
66884: LD_INT 1
66886: NEG
66887: ST_TO_ADDR
// exit ;
66888: GO 67125
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66890: LD_ADDR_VAR 0 12
66894: PUSH
66895: LD_VAR 0 1
66899: PPUSH
66900: LD_VAR 0 2
66904: PPUSH
66905: LD_VAR 0 3
66909: PPUSH
66910: LD_VAR 0 4
66914: PPUSH
66915: CALL 65973 0 4
66919: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66920: LD_ADDR_VAR 0 11
66924: PUSH
66925: LD_VAR 0 1
66929: PPUSH
66930: LD_VAR 0 2
66934: PPUSH
66935: LD_VAR 0 12
66939: PUSH
66940: LD_INT 1
66942: ARRAY
66943: PPUSH
66944: LD_VAR 0 12
66948: PUSH
66949: LD_INT 2
66951: ARRAY
66952: PPUSH
66953: CALL_OW 298
66957: ST_TO_ADDR
// distance := 9999 ;
66958: LD_ADDR_VAR 0 10
66962: PUSH
66963: LD_INT 9999
66965: ST_TO_ADDR
// for i := 0 to 5 do
66966: LD_ADDR_VAR 0 6
66970: PUSH
66971: DOUBLE
66972: LD_INT 0
66974: DEC
66975: ST_TO_ADDR
66976: LD_INT 5
66978: PUSH
66979: FOR_TO
66980: IFFALSE 67123
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66982: LD_ADDR_VAR 0 7
66986: PUSH
66987: LD_VAR 0 1
66991: PPUSH
66992: LD_VAR 0 6
66996: PPUSH
66997: LD_VAR 0 11
67001: PPUSH
67002: CALL_OW 272
67006: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67007: LD_ADDR_VAR 0 8
67011: PUSH
67012: LD_VAR 0 2
67016: PPUSH
67017: LD_VAR 0 6
67021: PPUSH
67022: LD_VAR 0 11
67026: PPUSH
67027: CALL_OW 273
67031: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67032: LD_VAR 0 7
67036: PPUSH
67037: LD_VAR 0 8
67041: PPUSH
67042: CALL_OW 488
67046: NOT
67047: IFFALSE 67051
// continue ;
67049: GO 66979
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67051: LD_ADDR_VAR 0 9
67055: PUSH
67056: LD_VAR 0 12
67060: PUSH
67061: LD_INT 1
67063: ARRAY
67064: PPUSH
67065: LD_VAR 0 12
67069: PUSH
67070: LD_INT 2
67072: ARRAY
67073: PPUSH
67074: LD_VAR 0 7
67078: PPUSH
67079: LD_VAR 0 8
67083: PPUSH
67084: CALL_OW 298
67088: ST_TO_ADDR
// if tmp < distance then
67089: LD_VAR 0 9
67093: PUSH
67094: LD_VAR 0 10
67098: LESS
67099: IFFALSE 67121
// begin result := i ;
67101: LD_ADDR_VAR 0 5
67105: PUSH
67106: LD_VAR 0 6
67110: ST_TO_ADDR
// distance := tmp ;
67111: LD_ADDR_VAR 0 10
67115: PUSH
67116: LD_VAR 0 9
67120: ST_TO_ADDR
// end ; end ;
67121: GO 66979
67123: POP
67124: POP
// end ;
67125: LD_VAR 0 5
67129: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67130: LD_INT 0
67132: PPUSH
67133: PPUSH
// if not driver or not IsInUnit ( driver ) then
67134: LD_VAR 0 1
67138: NOT
67139: PUSH
67140: LD_VAR 0 1
67144: PPUSH
67145: CALL_OW 310
67149: NOT
67150: OR
67151: IFFALSE 67155
// exit ;
67153: GO 67245
// vehicle := IsInUnit ( driver ) ;
67155: LD_ADDR_VAR 0 3
67159: PUSH
67160: LD_VAR 0 1
67164: PPUSH
67165: CALL_OW 310
67169: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67170: LD_VAR 0 1
67174: PPUSH
67175: LD_STRING \
67177: PUSH
67178: LD_INT 0
67180: PUSH
67181: LD_INT 0
67183: PUSH
67184: LD_INT 0
67186: PUSH
67187: LD_INT 0
67189: PUSH
67190: LD_INT 0
67192: PUSH
67193: LD_INT 0
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: PUSH
67205: LD_STRING E
67207: PUSH
67208: LD_INT 0
67210: PUSH
67211: LD_INT 0
67213: PUSH
67214: LD_VAR 0 3
67218: PUSH
67219: LD_INT 0
67221: PUSH
67222: LD_INT 0
67224: PUSH
67225: LD_INT 0
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PPUSH
67241: CALL_OW 446
// end ;
67245: LD_VAR 0 2
67249: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67250: LD_INT 0
67252: PPUSH
67253: PPUSH
// if not driver or not IsInUnit ( driver ) then
67254: LD_VAR 0 1
67258: NOT
67259: PUSH
67260: LD_VAR 0 1
67264: PPUSH
67265: CALL_OW 310
67269: NOT
67270: OR
67271: IFFALSE 67275
// exit ;
67273: GO 67365
// vehicle := IsInUnit ( driver ) ;
67275: LD_ADDR_VAR 0 3
67279: PUSH
67280: LD_VAR 0 1
67284: PPUSH
67285: CALL_OW 310
67289: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67290: LD_VAR 0 1
67294: PPUSH
67295: LD_STRING \
67297: PUSH
67298: LD_INT 0
67300: PUSH
67301: LD_INT 0
67303: PUSH
67304: LD_INT 0
67306: PUSH
67307: LD_INT 0
67309: PUSH
67310: LD_INT 0
67312: PUSH
67313: LD_INT 0
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: LIST
67320: LIST
67321: LIST
67322: LIST
67323: LIST
67324: PUSH
67325: LD_STRING E
67327: PUSH
67328: LD_INT 0
67330: PUSH
67331: LD_INT 0
67333: PUSH
67334: LD_VAR 0 3
67338: PUSH
67339: LD_INT 0
67341: PUSH
67342: LD_INT 0
67344: PUSH
67345: LD_INT 0
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PPUSH
67361: CALL_OW 447
// end ;
67365: LD_VAR 0 2
67369: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67370: LD_INT 0
67372: PPUSH
67373: PPUSH
67374: PPUSH
// tmp := [ ] ;
67375: LD_ADDR_VAR 0 5
67379: PUSH
67380: EMPTY
67381: ST_TO_ADDR
// for i in units do
67382: LD_ADDR_VAR 0 4
67386: PUSH
67387: LD_VAR 0 1
67391: PUSH
67392: FOR_IN
67393: IFFALSE 67431
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67395: LD_ADDR_VAR 0 5
67399: PUSH
67400: LD_VAR 0 5
67404: PPUSH
67405: LD_VAR 0 5
67409: PUSH
67410: LD_INT 1
67412: PLUS
67413: PPUSH
67414: LD_VAR 0 4
67418: PPUSH
67419: CALL_OW 256
67423: PPUSH
67424: CALL_OW 2
67428: ST_TO_ADDR
67429: GO 67392
67431: POP
67432: POP
// if not tmp then
67433: LD_VAR 0 5
67437: NOT
67438: IFFALSE 67442
// exit ;
67440: GO 67490
// if asc then
67442: LD_VAR 0 2
67446: IFFALSE 67470
// result := SortListByListAsc ( units , tmp ) else
67448: LD_ADDR_VAR 0 3
67452: PUSH
67453: LD_VAR 0 1
67457: PPUSH
67458: LD_VAR 0 5
67462: PPUSH
67463: CALL_OW 76
67467: ST_TO_ADDR
67468: GO 67490
// result := SortListByListDesc ( units , tmp ) ;
67470: LD_ADDR_VAR 0 3
67474: PUSH
67475: LD_VAR 0 1
67479: PPUSH
67480: LD_VAR 0 5
67484: PPUSH
67485: CALL_OW 77
67489: ST_TO_ADDR
// end ;
67490: LD_VAR 0 3
67494: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67495: LD_INT 0
67497: PPUSH
67498: PPUSH
// task := GetTaskList ( mech ) ;
67499: LD_ADDR_VAR 0 4
67503: PUSH
67504: LD_VAR 0 1
67508: PPUSH
67509: CALL_OW 437
67513: ST_TO_ADDR
// if not task then
67514: LD_VAR 0 4
67518: NOT
67519: IFFALSE 67523
// exit ;
67521: GO 67565
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67523: LD_ADDR_VAR 0 3
67527: PUSH
67528: LD_VAR 0 4
67532: PUSH
67533: LD_INT 1
67535: ARRAY
67536: PUSH
67537: LD_INT 1
67539: ARRAY
67540: PUSH
67541: LD_STRING r
67543: EQUAL
67544: PUSH
67545: LD_VAR 0 4
67549: PUSH
67550: LD_INT 1
67552: ARRAY
67553: PUSH
67554: LD_INT 4
67556: ARRAY
67557: PUSH
67558: LD_VAR 0 2
67562: EQUAL
67563: AND
67564: ST_TO_ADDR
// end ;
67565: LD_VAR 0 3
67569: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67570: LD_INT 0
67572: PPUSH
// SetDir ( unit , d ) ;
67573: LD_VAR 0 1
67577: PPUSH
67578: LD_VAR 0 4
67582: PPUSH
67583: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67587: LD_VAR 0 1
67591: PPUSH
67592: LD_VAR 0 2
67596: PPUSH
67597: LD_VAR 0 3
67601: PPUSH
67602: LD_VAR 0 5
67606: PPUSH
67607: CALL_OW 48
// end ;
67611: LD_VAR 0 6
67615: RET
// export function ToNaturalNumber ( number ) ; begin
67616: LD_INT 0
67618: PPUSH
// result := number div 1 ;
67619: LD_ADDR_VAR 0 2
67623: PUSH
67624: LD_VAR 0 1
67628: PUSH
67629: LD_INT 1
67631: DIV
67632: ST_TO_ADDR
// if number < 0 then
67633: LD_VAR 0 1
67637: PUSH
67638: LD_INT 0
67640: LESS
67641: IFFALSE 67651
// result := 0 ;
67643: LD_ADDR_VAR 0 2
67647: PUSH
67648: LD_INT 0
67650: ST_TO_ADDR
// end ;
67651: LD_VAR 0 2
67655: RET
// export function SortByClass ( units , class ) ; var un ; begin
67656: LD_INT 0
67658: PPUSH
67659: PPUSH
// if not units or not class then
67660: LD_VAR 0 1
67664: NOT
67665: PUSH
67666: LD_VAR 0 2
67670: NOT
67671: OR
67672: IFFALSE 67676
// exit ;
67674: GO 67771
// result := [ ] ;
67676: LD_ADDR_VAR 0 3
67680: PUSH
67681: EMPTY
67682: ST_TO_ADDR
// for un in units do
67683: LD_ADDR_VAR 0 4
67687: PUSH
67688: LD_VAR 0 1
67692: PUSH
67693: FOR_IN
67694: IFFALSE 67769
// if GetClass ( un ) = class then
67696: LD_VAR 0 4
67700: PPUSH
67701: CALL_OW 257
67705: PUSH
67706: LD_VAR 0 2
67710: EQUAL
67711: IFFALSE 67738
// result := Insert ( result , 1 , un ) else
67713: LD_ADDR_VAR 0 3
67717: PUSH
67718: LD_VAR 0 3
67722: PPUSH
67723: LD_INT 1
67725: PPUSH
67726: LD_VAR 0 4
67730: PPUSH
67731: CALL_OW 2
67735: ST_TO_ADDR
67736: GO 67767
// result := Replace ( result , result + 1 , un ) ;
67738: LD_ADDR_VAR 0 3
67742: PUSH
67743: LD_VAR 0 3
67747: PPUSH
67748: LD_VAR 0 3
67752: PUSH
67753: LD_INT 1
67755: PLUS
67756: PPUSH
67757: LD_VAR 0 4
67761: PPUSH
67762: CALL_OW 1
67766: ST_TO_ADDR
67767: GO 67693
67769: POP
67770: POP
// end ;
67771: LD_VAR 0 3
67775: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67776: LD_INT 0
67778: PPUSH
67779: PPUSH
67780: PPUSH
67781: PPUSH
67782: PPUSH
67783: PPUSH
67784: PPUSH
// result := [ ] ;
67785: LD_ADDR_VAR 0 4
67789: PUSH
67790: EMPTY
67791: ST_TO_ADDR
// if x - r < 0 then
67792: LD_VAR 0 1
67796: PUSH
67797: LD_VAR 0 3
67801: MINUS
67802: PUSH
67803: LD_INT 0
67805: LESS
67806: IFFALSE 67818
// min_x := 0 else
67808: LD_ADDR_VAR 0 8
67812: PUSH
67813: LD_INT 0
67815: ST_TO_ADDR
67816: GO 67834
// min_x := x - r ;
67818: LD_ADDR_VAR 0 8
67822: PUSH
67823: LD_VAR 0 1
67827: PUSH
67828: LD_VAR 0 3
67832: MINUS
67833: ST_TO_ADDR
// if y - r < 0 then
67834: LD_VAR 0 2
67838: PUSH
67839: LD_VAR 0 3
67843: MINUS
67844: PUSH
67845: LD_INT 0
67847: LESS
67848: IFFALSE 67860
// min_y := 0 else
67850: LD_ADDR_VAR 0 7
67854: PUSH
67855: LD_INT 0
67857: ST_TO_ADDR
67858: GO 67876
// min_y := y - r ;
67860: LD_ADDR_VAR 0 7
67864: PUSH
67865: LD_VAR 0 2
67869: PUSH
67870: LD_VAR 0 3
67874: MINUS
67875: ST_TO_ADDR
// max_x := x + r ;
67876: LD_ADDR_VAR 0 9
67880: PUSH
67881: LD_VAR 0 1
67885: PUSH
67886: LD_VAR 0 3
67890: PLUS
67891: ST_TO_ADDR
// max_y := y + r ;
67892: LD_ADDR_VAR 0 10
67896: PUSH
67897: LD_VAR 0 2
67901: PUSH
67902: LD_VAR 0 3
67906: PLUS
67907: ST_TO_ADDR
// for _x = min_x to max_x do
67908: LD_ADDR_VAR 0 5
67912: PUSH
67913: DOUBLE
67914: LD_VAR 0 8
67918: DEC
67919: ST_TO_ADDR
67920: LD_VAR 0 9
67924: PUSH
67925: FOR_TO
67926: IFFALSE 68027
// for _y = min_y to max_y do
67928: LD_ADDR_VAR 0 6
67932: PUSH
67933: DOUBLE
67934: LD_VAR 0 7
67938: DEC
67939: ST_TO_ADDR
67940: LD_VAR 0 10
67944: PUSH
67945: FOR_TO
67946: IFFALSE 68023
// begin if not ValidHex ( _x , _y ) then
67948: LD_VAR 0 5
67952: PPUSH
67953: LD_VAR 0 6
67957: PPUSH
67958: CALL_OW 488
67962: NOT
67963: IFFALSE 67967
// continue ;
67965: GO 67945
// if GetResourceTypeXY ( _x , _y ) then
67967: LD_VAR 0 5
67971: PPUSH
67972: LD_VAR 0 6
67976: PPUSH
67977: CALL_OW 283
67981: IFFALSE 68021
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67983: LD_ADDR_VAR 0 4
67987: PUSH
67988: LD_VAR 0 4
67992: PPUSH
67993: LD_VAR 0 4
67997: PUSH
67998: LD_INT 1
68000: PLUS
68001: PPUSH
68002: LD_VAR 0 5
68006: PUSH
68007: LD_VAR 0 6
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PPUSH
68016: CALL_OW 1
68020: ST_TO_ADDR
// end ;
68021: GO 67945
68023: POP
68024: POP
68025: GO 67925
68027: POP
68028: POP
// end ;
68029: LD_VAR 0 4
68033: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68034: LD_INT 0
68036: PPUSH
68037: PPUSH
68038: PPUSH
68039: PPUSH
68040: PPUSH
68041: PPUSH
68042: PPUSH
68043: PPUSH
// if not units then
68044: LD_VAR 0 1
68048: NOT
68049: IFFALSE 68053
// exit ;
68051: GO 68579
// result := UnitFilter ( units , [ f_ok ] ) ;
68053: LD_ADDR_VAR 0 3
68057: PUSH
68058: LD_VAR 0 1
68062: PPUSH
68063: LD_INT 50
68065: PUSH
68066: EMPTY
68067: LIST
68068: PPUSH
68069: CALL_OW 72
68073: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68074: LD_ADDR_VAR 0 8
68078: PUSH
68079: LD_VAR 0 1
68083: PUSH
68084: LD_INT 1
68086: ARRAY
68087: PPUSH
68088: CALL_OW 255
68092: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68093: LD_ADDR_VAR 0 10
68097: PUSH
68098: LD_INT 29
68100: PUSH
68101: LD_EXP 33
68105: PUSH
68106: LD_INT 49
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: LIST
68113: ST_TO_ADDR
// if not result then
68114: LD_VAR 0 3
68118: NOT
68119: IFFALSE 68123
// exit ;
68121: GO 68579
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68123: LD_ADDR_VAR 0 5
68127: PUSH
68128: LD_INT 81
68130: PUSH
68131: LD_VAR 0 8
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PPUSH
68140: CALL_OW 69
68144: ST_TO_ADDR
// for i in result do
68145: LD_ADDR_VAR 0 4
68149: PUSH
68150: LD_VAR 0 3
68154: PUSH
68155: FOR_IN
68156: IFFALSE 68577
// begin tag := GetTag ( i ) + 1 ;
68158: LD_ADDR_VAR 0 9
68162: PUSH
68163: LD_VAR 0 4
68167: PPUSH
68168: CALL_OW 110
68172: PUSH
68173: LD_INT 1
68175: PLUS
68176: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68177: LD_ADDR_VAR 0 7
68181: PUSH
68182: LD_VAR 0 4
68186: PPUSH
68187: CALL_OW 250
68191: PPUSH
68192: LD_VAR 0 4
68196: PPUSH
68197: CALL_OW 251
68201: PPUSH
68202: LD_INT 6
68204: PPUSH
68205: CALL 67776 0 3
68209: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68210: LD_VAR 0 4
68214: PPUSH
68215: CALL_OW 247
68219: PUSH
68220: LD_INT 2
68222: EQUAL
68223: PUSH
68224: LD_VAR 0 7
68228: AND
68229: PUSH
68230: LD_VAR 0 4
68234: PPUSH
68235: CALL_OW 264
68239: PUSH
68240: LD_VAR 0 10
68244: IN
68245: NOT
68246: AND
68247: IFFALSE 68286
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68249: LD_VAR 0 4
68253: PPUSH
68254: LD_VAR 0 7
68258: PUSH
68259: LD_INT 1
68261: ARRAY
68262: PUSH
68263: LD_INT 1
68265: ARRAY
68266: PPUSH
68267: LD_VAR 0 7
68271: PUSH
68272: LD_INT 1
68274: ARRAY
68275: PUSH
68276: LD_INT 2
68278: ARRAY
68279: PPUSH
68280: CALL_OW 116
68284: GO 68575
// if path > tag then
68286: LD_VAR 0 2
68290: PUSH
68291: LD_VAR 0 9
68295: GREATER
68296: IFFALSE 68504
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68298: LD_ADDR_VAR 0 6
68302: PUSH
68303: LD_VAR 0 5
68307: PPUSH
68308: LD_INT 91
68310: PUSH
68311: LD_VAR 0 4
68315: PUSH
68316: LD_INT 8
68318: PUSH
68319: EMPTY
68320: LIST
68321: LIST
68322: LIST
68323: PPUSH
68324: CALL_OW 72
68328: ST_TO_ADDR
// if nearEnemy then
68329: LD_VAR 0 6
68333: IFFALSE 68402
// begin if GetWeapon ( i ) = ru_time_lapser then
68335: LD_VAR 0 4
68339: PPUSH
68340: CALL_OW 264
68344: PUSH
68345: LD_INT 49
68347: EQUAL
68348: IFFALSE 68376
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68350: LD_VAR 0 4
68354: PPUSH
68355: LD_VAR 0 6
68359: PPUSH
68360: LD_VAR 0 4
68364: PPUSH
68365: CALL_OW 74
68369: PPUSH
68370: CALL_OW 112
68374: GO 68400
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68376: LD_VAR 0 4
68380: PPUSH
68381: LD_VAR 0 6
68385: PPUSH
68386: LD_VAR 0 4
68390: PPUSH
68391: CALL_OW 74
68395: PPUSH
68396: CALL_OW 115
// end else
68400: GO 68502
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68402: LD_VAR 0 4
68406: PPUSH
68407: LD_VAR 0 2
68411: PUSH
68412: LD_VAR 0 9
68416: ARRAY
68417: PUSH
68418: LD_INT 1
68420: ARRAY
68421: PPUSH
68422: LD_VAR 0 2
68426: PUSH
68427: LD_VAR 0 9
68431: ARRAY
68432: PUSH
68433: LD_INT 2
68435: ARRAY
68436: PPUSH
68437: CALL_OW 297
68441: PUSH
68442: LD_INT 6
68444: GREATER
68445: IFFALSE 68488
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68447: LD_VAR 0 4
68451: PPUSH
68452: LD_VAR 0 2
68456: PUSH
68457: LD_VAR 0 9
68461: ARRAY
68462: PUSH
68463: LD_INT 1
68465: ARRAY
68466: PPUSH
68467: LD_VAR 0 2
68471: PUSH
68472: LD_VAR 0 9
68476: ARRAY
68477: PUSH
68478: LD_INT 2
68480: ARRAY
68481: PPUSH
68482: CALL_OW 114
68486: GO 68502
// SetTag ( i , tag ) ;
68488: LD_VAR 0 4
68492: PPUSH
68493: LD_VAR 0 9
68497: PPUSH
68498: CALL_OW 109
// end else
68502: GO 68575
// if enemy then
68504: LD_VAR 0 5
68508: IFFALSE 68575
// begin if GetWeapon ( i ) = ru_time_lapser then
68510: LD_VAR 0 4
68514: PPUSH
68515: CALL_OW 264
68519: PUSH
68520: LD_INT 49
68522: EQUAL
68523: IFFALSE 68551
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68525: LD_VAR 0 4
68529: PPUSH
68530: LD_VAR 0 5
68534: PPUSH
68535: LD_VAR 0 4
68539: PPUSH
68540: CALL_OW 74
68544: PPUSH
68545: CALL_OW 112
68549: GO 68575
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68551: LD_VAR 0 4
68555: PPUSH
68556: LD_VAR 0 5
68560: PPUSH
68561: LD_VAR 0 4
68565: PPUSH
68566: CALL_OW 74
68570: PPUSH
68571: CALL_OW 115
// end ; end ;
68575: GO 68155
68577: POP
68578: POP
// end ;
68579: LD_VAR 0 3
68583: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68584: LD_INT 0
68586: PPUSH
68587: PPUSH
68588: PPUSH
// if not unit or IsInUnit ( unit ) then
68589: LD_VAR 0 1
68593: NOT
68594: PUSH
68595: LD_VAR 0 1
68599: PPUSH
68600: CALL_OW 310
68604: OR
68605: IFFALSE 68609
// exit ;
68607: GO 68700
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68609: LD_ADDR_VAR 0 4
68613: PUSH
68614: LD_VAR 0 1
68618: PPUSH
68619: CALL_OW 250
68623: PPUSH
68624: LD_VAR 0 2
68628: PPUSH
68629: LD_INT 1
68631: PPUSH
68632: CALL_OW 272
68636: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68637: LD_ADDR_VAR 0 5
68641: PUSH
68642: LD_VAR 0 1
68646: PPUSH
68647: CALL_OW 251
68651: PPUSH
68652: LD_VAR 0 2
68656: PPUSH
68657: LD_INT 1
68659: PPUSH
68660: CALL_OW 273
68664: ST_TO_ADDR
// if ValidHex ( x , y ) then
68665: LD_VAR 0 4
68669: PPUSH
68670: LD_VAR 0 5
68674: PPUSH
68675: CALL_OW 488
68679: IFFALSE 68700
// ComTurnXY ( unit , x , y ) ;
68681: LD_VAR 0 1
68685: PPUSH
68686: LD_VAR 0 4
68690: PPUSH
68691: LD_VAR 0 5
68695: PPUSH
68696: CALL_OW 118
// end ;
68700: LD_VAR 0 3
68704: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68705: LD_INT 0
68707: PPUSH
68708: PPUSH
// result := false ;
68709: LD_ADDR_VAR 0 3
68713: PUSH
68714: LD_INT 0
68716: ST_TO_ADDR
// if not units then
68717: LD_VAR 0 2
68721: NOT
68722: IFFALSE 68726
// exit ;
68724: GO 68771
// for i in units do
68726: LD_ADDR_VAR 0 4
68730: PUSH
68731: LD_VAR 0 2
68735: PUSH
68736: FOR_IN
68737: IFFALSE 68769
// if See ( side , i ) then
68739: LD_VAR 0 1
68743: PPUSH
68744: LD_VAR 0 4
68748: PPUSH
68749: CALL_OW 292
68753: IFFALSE 68767
// begin result := true ;
68755: LD_ADDR_VAR 0 3
68759: PUSH
68760: LD_INT 1
68762: ST_TO_ADDR
// exit ;
68763: POP
68764: POP
68765: GO 68771
// end ;
68767: GO 68736
68769: POP
68770: POP
// end ;
68771: LD_VAR 0 3
68775: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68776: LD_INT 0
68778: PPUSH
68779: PPUSH
68780: PPUSH
68781: PPUSH
// if not unit or not points then
68782: LD_VAR 0 1
68786: NOT
68787: PUSH
68788: LD_VAR 0 2
68792: NOT
68793: OR
68794: IFFALSE 68798
// exit ;
68796: GO 68888
// dist := 99999 ;
68798: LD_ADDR_VAR 0 5
68802: PUSH
68803: LD_INT 99999
68805: ST_TO_ADDR
// for i in points do
68806: LD_ADDR_VAR 0 4
68810: PUSH
68811: LD_VAR 0 2
68815: PUSH
68816: FOR_IN
68817: IFFALSE 68886
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68819: LD_ADDR_VAR 0 6
68823: PUSH
68824: LD_VAR 0 1
68828: PPUSH
68829: LD_VAR 0 4
68833: PUSH
68834: LD_INT 1
68836: ARRAY
68837: PPUSH
68838: LD_VAR 0 4
68842: PUSH
68843: LD_INT 2
68845: ARRAY
68846: PPUSH
68847: CALL_OW 297
68851: ST_TO_ADDR
// if tmpDist < dist then
68852: LD_VAR 0 6
68856: PUSH
68857: LD_VAR 0 5
68861: LESS
68862: IFFALSE 68884
// begin result := i ;
68864: LD_ADDR_VAR 0 3
68868: PUSH
68869: LD_VAR 0 4
68873: ST_TO_ADDR
// dist := tmpDist ;
68874: LD_ADDR_VAR 0 5
68878: PUSH
68879: LD_VAR 0 6
68883: ST_TO_ADDR
// end ; end ;
68884: GO 68816
68886: POP
68887: POP
// end ;
68888: LD_VAR 0 3
68892: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68893: LD_INT 0
68895: PPUSH
// uc_side := side ;
68896: LD_ADDR_OWVAR 20
68900: PUSH
68901: LD_VAR 0 1
68905: ST_TO_ADDR
// uc_nation := 3 ;
68906: LD_ADDR_OWVAR 21
68910: PUSH
68911: LD_INT 3
68913: ST_TO_ADDR
// vc_chassis := 25 ;
68914: LD_ADDR_OWVAR 37
68918: PUSH
68919: LD_INT 25
68921: ST_TO_ADDR
// vc_engine := engine_siberite ;
68922: LD_ADDR_OWVAR 39
68926: PUSH
68927: LD_INT 3
68929: ST_TO_ADDR
// vc_control := control_computer ;
68930: LD_ADDR_OWVAR 38
68934: PUSH
68935: LD_INT 3
68937: ST_TO_ADDR
// vc_weapon := 59 ;
68938: LD_ADDR_OWVAR 40
68942: PUSH
68943: LD_INT 59
68945: ST_TO_ADDR
// result := CreateVehicle ;
68946: LD_ADDR_VAR 0 5
68950: PUSH
68951: CALL_OW 45
68955: ST_TO_ADDR
// SetDir ( result , d ) ;
68956: LD_VAR 0 5
68960: PPUSH
68961: LD_VAR 0 4
68965: PPUSH
68966: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68970: LD_VAR 0 5
68974: PPUSH
68975: LD_VAR 0 2
68979: PPUSH
68980: LD_VAR 0 3
68984: PPUSH
68985: LD_INT 0
68987: PPUSH
68988: CALL_OW 48
// end ;
68992: LD_VAR 0 5
68996: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68997: LD_INT 0
68999: PPUSH
69000: PPUSH
69001: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69002: LD_ADDR_VAR 0 2
69006: PUSH
69007: LD_INT 0
69009: PUSH
69010: LD_INT 0
69012: PUSH
69013: LD_INT 0
69015: PUSH
69016: LD_INT 0
69018: PUSH
69019: EMPTY
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69025: LD_VAR 0 1
69029: NOT
69030: PUSH
69031: LD_VAR 0 1
69035: PPUSH
69036: CALL_OW 264
69040: PUSH
69041: LD_INT 12
69043: PUSH
69044: LD_INT 51
69046: PUSH
69047: LD_INT 32
69049: PUSH
69050: LD_EXP 30
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: LIST
69059: LIST
69060: IN
69061: NOT
69062: OR
69063: IFFALSE 69067
// exit ;
69065: GO 69165
// for i := 1 to 3 do
69067: LD_ADDR_VAR 0 3
69071: PUSH
69072: DOUBLE
69073: LD_INT 1
69075: DEC
69076: ST_TO_ADDR
69077: LD_INT 3
69079: PUSH
69080: FOR_TO
69081: IFFALSE 69163
// begin tmp := GetCargo ( cargo , i ) ;
69083: LD_ADDR_VAR 0 4
69087: PUSH
69088: LD_VAR 0 1
69092: PPUSH
69093: LD_VAR 0 3
69097: PPUSH
69098: CALL_OW 289
69102: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69103: LD_ADDR_VAR 0 2
69107: PUSH
69108: LD_VAR 0 2
69112: PPUSH
69113: LD_VAR 0 3
69117: PPUSH
69118: LD_VAR 0 4
69122: PPUSH
69123: CALL_OW 1
69127: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69128: LD_ADDR_VAR 0 2
69132: PUSH
69133: LD_VAR 0 2
69137: PPUSH
69138: LD_INT 4
69140: PPUSH
69141: LD_VAR 0 2
69145: PUSH
69146: LD_INT 4
69148: ARRAY
69149: PUSH
69150: LD_VAR 0 4
69154: PLUS
69155: PPUSH
69156: CALL_OW 1
69160: ST_TO_ADDR
// end ;
69161: GO 69080
69163: POP
69164: POP
// end ;
69165: LD_VAR 0 2
69169: RET
// export function Length ( array ) ; begin
69170: LD_INT 0
69172: PPUSH
// result := array + 0 ;
69173: LD_ADDR_VAR 0 2
69177: PUSH
69178: LD_VAR 0 1
69182: PUSH
69183: LD_INT 0
69185: PLUS
69186: ST_TO_ADDR
// end ;
69187: LD_VAR 0 2
69191: RET
// export function PrepareArray ( array ) ; begin
69192: LD_INT 0
69194: PPUSH
// result := array diff 0 ;
69195: LD_ADDR_VAR 0 2
69199: PUSH
69200: LD_VAR 0 1
69204: PUSH
69205: LD_INT 0
69207: DIFF
69208: ST_TO_ADDR
// if not result [ 1 ] then
69209: LD_VAR 0 2
69213: PUSH
69214: LD_INT 1
69216: ARRAY
69217: NOT
69218: IFFALSE 69238
// result := Delete ( result , 1 ) ;
69220: LD_ADDR_VAR 0 2
69224: PUSH
69225: LD_VAR 0 2
69229: PPUSH
69230: LD_INT 1
69232: PPUSH
69233: CALL_OW 3
69237: ST_TO_ADDR
// end ; end_of_file
69238: LD_VAR 0 2
69242: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69243: LD_VAR 0 1
69247: PUSH
69248: LD_INT 200
69250: DOUBLE
69251: GREATEREQUAL
69252: IFFALSE 69260
69254: LD_INT 299
69256: DOUBLE
69257: LESSEQUAL
69258: IFTRUE 69262
69260: GO 69294
69262: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69263: LD_VAR 0 1
69267: PPUSH
69268: LD_VAR 0 2
69272: PPUSH
69273: LD_VAR 0 3
69277: PPUSH
69278: LD_VAR 0 4
69282: PPUSH
69283: LD_VAR 0 5
69287: PPUSH
69288: CALL 24094 0 5
69292: GO 69371
69294: LD_INT 300
69296: DOUBLE
69297: GREATEREQUAL
69298: IFFALSE 69306
69300: LD_INT 399
69302: DOUBLE
69303: LESSEQUAL
69304: IFTRUE 69308
69306: GO 69370
69308: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69309: LD_VAR 0 1
69313: PPUSH
69314: LD_VAR 0 2
69318: PPUSH
69319: LD_VAR 0 3
69323: PPUSH
69324: LD_VAR 0 4
69328: PPUSH
69329: LD_VAR 0 5
69333: PPUSH
69334: LD_VAR 0 6
69338: PPUSH
69339: LD_VAR 0 7
69343: PPUSH
69344: LD_VAR 0 8
69348: PPUSH
69349: LD_VAR 0 9
69353: PPUSH
69354: LD_VAR 0 10
69358: PPUSH
69359: LD_VAR 0 11
69363: PPUSH
69364: CALL 20423 0 11
69368: GO 69371
69370: POP
// end ;
69371: PPOPN 11
69373: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69374: LD_VAR 0 1
69378: PPUSH
69379: LD_VAR 0 2
69383: PPUSH
69384: LD_VAR 0 3
69388: PPUSH
69389: LD_VAR 0 4
69393: PPUSH
69394: LD_VAR 0 5
69398: PPUSH
69399: CALL 23830 0 5
// end ; end_of_file
69403: PPOPN 5
69405: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69406: LD_VAR 0 1
69410: PPUSH
69411: LD_VAR 0 2
69415: PPUSH
69416: LD_VAR 0 3
69420: PPUSH
69421: LD_VAR 0 4
69425: PPUSH
69426: LD_VAR 0 5
69430: PPUSH
69431: LD_VAR 0 6
69435: PPUSH
69436: CALL 8116 0 6
// end ;
69440: PPOPN 6
69442: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69443: LD_INT 0
69445: PPUSH
// begin if not units then
69446: LD_VAR 0 1
69450: NOT
69451: IFFALSE 69455
// exit ;
69453: GO 69455
// end ;
69455: PPOPN 7
69457: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69458: CALL 8087 0 0
// end ;
69462: PPOPN 1
69464: END
