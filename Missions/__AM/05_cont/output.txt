// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 83 0 0
// InitRestrictions ;
  19: CALL 211 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 292 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 599 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 599 0 2
// PrepareAmericans ;
  74: CALL 1198 0 0
// Action ;
  78: CALL 2134 0 0
// end ;
  82: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter ; function Init ; begin
  83: LD_INT 0
  85: PPUSH
// debug := false ;
  86: LD_ADDR_EXP 1
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// mission_prefix := 05_ ;
  94: LD_ADDR_EXP 2
  98: PUSH
  99: LD_STRING 05_
 101: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 102: LD_ADDR_EXP 3
 106: PUSH
 107: LD_STRING 05a_
 109: ST_TO_ADDR
// deltaBuilded := false ;
 110: LD_ADDR_EXP 4
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// denisArrives := false ;
 118: LD_ADDR_EXP 5
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// radar_allowed := false ;
 126: LD_ADDR_EXP 7
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// first_apeman_tamed := false ;
 134: LD_ADDR_EXP 8
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// arab_spotted := false ;
 142: LD_ADDR_EXP 13
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// end_mission := false ;
 150: LD_ADDR_EXP 14
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// apeman_army := false ;
 158: LD_ADDR_EXP 9
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// radar_researched := false ;
 166: LD_ADDR_EXP 10
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// radar_builded := false ;
 174: LD_ADDR_EXP 11
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// apeman_counter := 0 ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// Delta := 0 ;
 190: LD_ADDR_EXP 6
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// apeKillCounter := 0 ;
 198: LD_ADDR_EXP 15
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// end ;
 206: LD_VAR 0 1
 210: RET
// function InitRestrictions ; begin
 211: LD_INT 0
 213: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 214: LD_INT 7
 216: PPUSH
 217: LD_INT 1
 219: PPUSH
 220: LD_INT 1
 222: PPUSH
 223: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 227: LD_INT 8
 229: PPUSH
 230: LD_INT 1
 232: PPUSH
 233: LD_INT 1
 235: PPUSH
 236: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 240: LD_INT 10
 242: PPUSH
 243: LD_INT 1
 245: PPUSH
 246: LD_INT 1
 248: PPUSH
 249: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 253: LD_INT 69
 255: PPUSH
 256: LD_INT 1
 258: PPUSH
 259: LD_STRING GatlingInGamma
 261: PPUSH
 262: LD_INT 1
 264: PPUSH
 265: CALL_OW 30
 269: PPUSH
 270: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 274: LD_INT 51
 276: PPUSH
 277: LD_INT 1
 279: PPUSH
 280: LD_INT 1
 282: PPUSH
 283: CALL_OW 322
// end ;
 287: LD_VAR 0 1
 291: RET
// function DebugMode ; begin
 292: LD_INT 0
 294: PPUSH
// FogOff ( 1 ) ;
 295: LD_INT 1
 297: PPUSH
 298: CALL_OW 344
// Difficulty := 2 ;
 302: LD_ADDR_OWVAR 67
 306: PUSH
 307: LD_INT 2
 309: ST_TO_ADDR
// end ;
 310: LD_VAR 0 1
 314: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 315: LD_INT 22
 317: PUSH
 318: LD_INT 1
 320: PUSH
 321: EMPTY
 322: LIST
 323: LIST
 324: PUSH
 325: LD_INT 23
 327: PUSH
 328: LD_INT 0
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PPUSH
 339: CALL_OW 69
 343: PUSH
 344: LD_INT 7
 346: GREATEREQUAL
 347: IFFALSE 359
 349: GO 351
 351: DISABLE
// SetAchievement ( ACH_TAME ) ;
 352: LD_STRING ACH_TAME
 354: PPUSH
 355: CALL_OW 543
 359: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 360: LD_INT 22
 362: PUSH
 363: LD_INT 1
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PUSH
 370: LD_INT 35
 372: PUSH
 373: LD_INT 11
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PPUSH
 384: CALL_OW 69
 388: PUSH
 389: LD_INT 22
 391: PUSH
 392: LD_INT 1
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PUSH
 399: LD_INT 34
 401: PUSH
 402: LD_INT 11
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PPUSH
 413: CALL_OW 69
 417: AND
 418: IFFALSE 430
 420: GO 422
 422: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 423: LD_STRING ACH_RADAR
 425: PPUSH
 426: CALL_OW 543
 430: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 431: LD_INT 0
 433: PPUSH
// uc_side := side ;
 434: LD_ADDR_OWVAR 20
 438: PUSH
 439: LD_VAR 0 1
 443: ST_TO_ADDR
// uc_nation := nation ;
 444: LD_ADDR_OWVAR 21
 448: PUSH
 449: LD_VAR 0 2
 453: ST_TO_ADDR
// vc_chassis := chassis ;
 454: LD_ADDR_OWVAR 37
 458: PUSH
 459: LD_VAR 0 3
 463: ST_TO_ADDR
// vc_engine := engine ;
 464: LD_ADDR_OWVAR 39
 468: PUSH
 469: LD_VAR 0 4
 473: ST_TO_ADDR
// vc_control := control ;
 474: LD_ADDR_OWVAR 38
 478: PUSH
 479: LD_VAR 0 5
 483: ST_TO_ADDR
// vc_weapon := weapon ;
 484: LD_ADDR_OWVAR 40
 488: PUSH
 489: LD_VAR 0 6
 493: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 494: LD_ADDR_OWVAR 41
 498: PUSH
 499: LD_VAR 0 7
 503: ST_TO_ADDR
// result := CreateVehicle ;
 504: LD_ADDR_VAR 0 8
 508: PUSH
 509: CALL_OW 45
 513: ST_TO_ADDR
// end ;
 514: LD_VAR 0 8
 518: RET
// export function SayX ( units , ident ) ; var i ; begin
 519: LD_INT 0
 521: PPUSH
 522: PPUSH
// result := false ;
 523: LD_ADDR_VAR 0 3
 527: PUSH
 528: LD_INT 0
 530: ST_TO_ADDR
// if not units then
 531: LD_VAR 0 1
 535: NOT
 536: IFFALSE 540
// exit ;
 538: GO 594
// for i in units do
 540: LD_ADDR_VAR 0 4
 544: PUSH
 545: LD_VAR 0 1
 549: PUSH
 550: FOR_IN
 551: IFFALSE 592
// if IsOk ( i ) then
 553: LD_VAR 0 4
 557: PPUSH
 558: CALL_OW 302
 562: IFFALSE 590
// begin Say ( i , ident ) ;
 564: LD_VAR 0 4
 568: PPUSH
 569: LD_VAR 0 2
 573: PPUSH
 574: CALL_OW 88
// result := i ;
 578: LD_ADDR_VAR 0 3
 582: PUSH
 583: LD_VAR 0 4
 587: ST_TO_ADDR
// break ;
 588: GO 592
// end ;
 590: GO 550
 592: POP
 593: POP
// end ;
 594: LD_VAR 0 3
 598: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 599: LD_INT 0
 601: PPUSH
 602: PPUSH
// InitUc ;
 603: CALL_OW 18
// InitHc ;
 607: CALL_OW 19
// uc_side := 0 ;
 611: LD_ADDR_OWVAR 20
 615: PUSH
 616: LD_INT 0
 618: ST_TO_ADDR
// uc_nation := 0 ;
 619: LD_ADDR_OWVAR 21
 623: PUSH
 624: LD_INT 0
 626: ST_TO_ADDR
// for i = 1 to amount do
 627: LD_ADDR_VAR 0 4
 631: PUSH
 632: DOUBLE
 633: LD_INT 1
 635: DEC
 636: ST_TO_ADDR
 637: LD_VAR 0 2
 641: PUSH
 642: FOR_TO
 643: IFFALSE 725
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 645: LD_ADDR_OWVAR 29
 649: PUSH
 650: LD_INT 9
 652: PPUSH
 653: LD_INT 12
 655: PPUSH
 656: CALL_OW 12
 660: PUSH
 661: LD_INT 9
 663: PPUSH
 664: LD_INT 12
 666: PPUSH
 667: CALL_OW 12
 671: PUSH
 672: EMPTY
 673: LIST
 674: LIST
 675: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 676: LD_ADDR_OWVAR 35
 680: PUSH
 681: LD_INT 5
 683: NEG
 684: PPUSH
 685: LD_INT 5
 687: PPUSH
 688: CALL_OW 12
 692: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 693: LD_INT 0
 695: PPUSH
 696: LD_INT 12
 698: PPUSH
 699: LD_INT 1
 701: PPUSH
 702: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 706: CALL_OW 44
 710: PPUSH
 711: LD_VAR 0 1
 715: PPUSH
 716: LD_INT 0
 718: PPUSH
 719: CALL_OW 49
// end ;
 723: GO 642
 725: POP
 726: POP
// InitHc ;
 727: CALL_OW 19
// end ;
 731: LD_VAR 0 3
 735: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 736: LD_INT 0
 738: PPUSH
 739: PPUSH
 740: PPUSH
// if not unit then
 741: LD_VAR 0 1
 745: NOT
 746: IFFALSE 750
// exit ;
 748: GO 1193
// if IsInUnit ( unit ) then
 750: LD_VAR 0 1
 754: PPUSH
 755: CALL_OW 310
 759: IFFALSE 776
// unit := IsDrivenBy ( unit ) ;
 761: LD_ADDR_VAR 0 1
 765: PUSH
 766: LD_VAR 0 1
 770: PPUSH
 771: CALL_OW 311
 775: ST_TO_ADDR
// targets_list := [ ] ;
 776: LD_ADDR_VAR 0 5
 780: PUSH
 781: EMPTY
 782: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 783: LD_ADDR_VAR 0 4
 787: PUSH
 788: LD_VAR 0 2
 792: PPUSH
 793: LD_INT 24
 795: PUSH
 796: LD_INT 250
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PUSH
 803: LD_INT 3
 805: PUSH
 806: LD_INT 34
 808: PUSH
 809: LD_INT 12
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: PUSH
 820: LD_INT 21
 822: PUSH
 823: LD_INT 2
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 58
 832: PUSH
 833: EMPTY
 834: LIST
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: PPUSH
 842: CALL_OW 72
 846: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
 847: LD_VAR 0 4
 851: PPUSH
 852: LD_VAR 0 1
 856: PPUSH
 857: CALL_OW 74
 861: PPUSH
 862: LD_VAR 0 1
 866: PPUSH
 867: CALL_OW 296
 871: PUSH
 872: LD_INT 11
 874: LESS
 875: PUSH
 876: LD_VAR 0 1
 880: PPUSH
 881: CALL_OW 310
 885: NOT
 886: AND
 887: IFFALSE 915
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
 889: LD_VAR 0 1
 893: PPUSH
 894: LD_VAR 0 4
 898: PPUSH
 899: LD_VAR 0 1
 903: PPUSH
 904: CALL_OW 74
 908: PPUSH
 909: CALL_OW 120
// exit ;
 913: GO 1193
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
 915: LD_ADDR_VAR 0 5
 919: PUSH
 920: LD_VAR 0 2
 924: PPUSH
 925: LD_INT 21
 927: PUSH
 928: LD_INT 1
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: PUSH
 935: LD_INT 3
 937: PUSH
 938: LD_INT 54
 940: PUSH
 941: EMPTY
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PUSH
 948: EMPTY
 949: LIST
 950: LIST
 951: PPUSH
 952: CALL_OW 72
 956: PUSH
 957: LD_VAR 0 2
 961: PPUSH
 962: LD_INT 21
 964: PUSH
 965: LD_INT 2
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PPUSH
 972: CALL_OW 72
 976: PUSH
 977: LD_VAR 0 2
 981: PPUSH
 982: LD_INT 21
 984: PUSH
 985: LD_INT 3
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 3
 994: PUSH
 995: LD_INT 58
 997: PUSH
 998: EMPTY
 999: LIST
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: PPUSH
1009: CALL_OW 72
1013: PUSH
1014: LD_VAR 0 2
1018: PUSH
1019: EMPTY
1020: LIST
1021: LIST
1022: LIST
1023: LIST
1024: ST_TO_ADDR
// for target in targets_list do
1025: LD_ADDR_VAR 0 4
1029: PUSH
1030: LD_VAR 0 5
1034: PUSH
1035: FOR_IN
1036: IFFALSE 1191
// begin if target then
1038: LD_VAR 0 4
1042: IFFALSE 1189
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1044: LD_VAR 0 1
1048: PPUSH
1049: CALL_OW 110
1053: PUSH
1054: LD_INT 11
1056: EQUAL
1057: PUSH
1058: LD_VAR 0 4
1062: PPUSH
1063: LD_VAR 0 1
1067: PPUSH
1068: CALL_OW 74
1072: PPUSH
1073: CALL_OW 247
1077: PUSH
1078: LD_INT 3
1080: EQUAL
1081: PUSH
1082: LD_VAR 0 4
1086: PPUSH
1087: LD_VAR 0 1
1091: PPUSH
1092: CALL_OW 74
1096: PPUSH
1097: CALL_OW 264
1101: PUSH
1102: LD_INT 12
1104: EQUAL
1105: OR
1106: AND
1107: IFFALSE 1153
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1109: LD_VAR 0 1
1113: PPUSH
1114: LD_INT 0
1116: PPUSH
1117: LD_INT 0
1119: PPUSH
1120: LD_VAR 0 4
1124: PPUSH
1125: LD_VAR 0 1
1129: PPUSH
1130: CALL_OW 74
1134: PPUSH
1135: CALL_OW 132
// SetTag ( unit , 0 ) ;
1139: LD_VAR 0 1
1143: PPUSH
1144: LD_INT 0
1146: PPUSH
1147: CALL_OW 109
// end else
1151: GO 1189
// if not HasTask ( unit ) then
1153: LD_VAR 0 1
1157: PPUSH
1158: CALL_OW 314
1162: NOT
1163: IFFALSE 1189
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1165: LD_VAR 0 1
1169: PPUSH
1170: LD_VAR 0 4
1174: PPUSH
1175: LD_VAR 0 1
1179: PPUSH
1180: CALL_OW 74
1184: PPUSH
1185: CALL_OW 115
// end ;
1189: GO 1035
1191: POP
1192: POP
// end ; end_of_file
1193: LD_VAR 0 3
1197: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus , Mike ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1198: LD_INT 0
1200: PPUSH
1201: PPUSH
1202: PPUSH
1203: PPUSH
1204: PPUSH
// uc_nation := 1 ;
1205: LD_ADDR_OWVAR 21
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// uc_side := 4 ;
1213: LD_ADDR_OWVAR 20
1217: PUSH
1218: LD_INT 4
1220: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1221: LD_ADDR_EXP 19
1225: PUSH
1226: LD_STRING Denis
1228: PPUSH
1229: LD_INT 0
1231: PPUSH
1232: LD_STRING 
1234: PPUSH
1235: CALL 28261 0 3
1239: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1240: LD_ADDR_EXP 18
1244: PUSH
1245: LD_STRING Harisson
1247: PPUSH
1248: LD_INT 0
1250: PPUSH
1251: LD_STRING 
1253: PPUSH
1254: CALL 28261 0 3
1258: ST_TO_ADDR
// uc_side := 1 ;
1259: LD_ADDR_OWVAR 20
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1267: LD_ADDR_EXP 16
1271: PUSH
1272: LD_STRING JMM
1274: PPUSH
1275: LD_EXP 1
1279: NOT
1280: PPUSH
1281: LD_EXP 3
1285: PPUSH
1286: CALL 28261 0 3
1290: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1291: LD_ADDR_EXP 17
1295: PUSH
1296: LD_STRING Gladstone
1298: PPUSH
1299: LD_INT 0
1301: PPUSH
1302: LD_EXP 3
1306: PPUSH
1307: CALL 28261 0 3
1311: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1312: LD_STRING BrownInDelta
1314: PPUSH
1315: LD_EXP 1
1319: PPUSH
1320: CALL_OW 30
1324: IFFALSE 1366
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1326: LD_ADDR_EXP 20
1330: PUSH
1331: LD_STRING Brown
1333: PPUSH
1334: LD_EXP 1
1338: NOT
1339: PPUSH
1340: LD_EXP 3
1344: PPUSH
1345: CALL 28261 0 3
1349: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1350: LD_ADDR_VAR 0 5
1354: PUSH
1355: LD_VAR 0 5
1359: PUSH
1360: LD_EXP 20
1364: ADD
1365: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1366: LD_STRING DonaldsonInDelta
1368: PPUSH
1369: LD_EXP 1
1373: PPUSH
1374: CALL_OW 30
1378: IFFALSE 1420
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1380: LD_ADDR_EXP 21
1384: PUSH
1385: LD_STRING Donaldson
1387: PPUSH
1388: LD_EXP 1
1392: NOT
1393: PPUSH
1394: LD_EXP 3
1398: PPUSH
1399: CALL 28261 0 3
1403: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1404: LD_ADDR_VAR 0 5
1408: PUSH
1409: LD_VAR 0 5
1413: PUSH
1414: LD_EXP 21
1418: ADD
1419: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1420: LD_STRING LisaInDelta
1422: PPUSH
1423: LD_EXP 1
1427: PPUSH
1428: CALL_OW 30
1432: IFFALSE 1474
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1434: LD_ADDR_EXP 22
1438: PUSH
1439: LD_STRING Lisa
1441: PPUSH
1442: LD_EXP 1
1446: NOT
1447: PPUSH
1448: LD_EXP 3
1452: PPUSH
1453: CALL 28261 0 3
1457: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1458: LD_ADDR_VAR 0 5
1462: PUSH
1463: LD_VAR 0 5
1467: PUSH
1468: LD_EXP 22
1472: ADD
1473: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1474: LD_STRING FrankInDelta
1476: PPUSH
1477: LD_EXP 1
1481: PPUSH
1482: CALL_OW 30
1486: IFFALSE 1528
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1488: LD_ADDR_EXP 23
1492: PUSH
1493: LD_STRING Frank
1495: PPUSH
1496: LD_EXP 1
1500: NOT
1501: PPUSH
1502: LD_EXP 3
1506: PPUSH
1507: CALL 28261 0 3
1511: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1512: LD_ADDR_VAR 0 5
1516: PUSH
1517: LD_VAR 0 5
1521: PUSH
1522: LD_EXP 23
1526: ADD
1527: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1528: LD_STRING BobbyInDelta
1530: PPUSH
1531: LD_INT 0
1533: PPUSH
1534: CALL_OW 30
1538: IFFALSE 1580
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1540: LD_ADDR_EXP 24
1544: PUSH
1545: LD_STRING Bobby
1547: PPUSH
1548: LD_EXP 1
1552: NOT
1553: PPUSH
1554: LD_EXP 3
1558: PPUSH
1559: CALL 28261 0 3
1563: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1564: LD_ADDR_VAR 0 5
1568: PUSH
1569: LD_VAR 0 5
1573: PUSH
1574: LD_EXP 24
1578: ADD
1579: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1580: LD_STRING CyrusInDelta
1582: PPUSH
1583: LD_INT 0
1585: PPUSH
1586: CALL_OW 30
1590: IFFALSE 1632
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1592: LD_ADDR_EXP 25
1596: PUSH
1597: LD_STRING Cyrus
1599: PPUSH
1600: LD_EXP 1
1604: NOT
1605: PPUSH
1606: LD_EXP 3
1610: PPUSH
1611: CALL 28261 0 3
1615: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1616: LD_ADDR_VAR 0 5
1620: PUSH
1621: LD_VAR 0 5
1625: PUSH
1626: LD_EXP 25
1630: ADD
1631: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1632: LD_ADDR_EXP 27
1636: PUSH
1637: LD_STRING othersDelta
1639: PPUSH
1640: CALL_OW 31
1644: ST_TO_ADDR
// if not others and debug then
1645: LD_EXP 27
1649: NOT
1650: PUSH
1651: LD_EXP 1
1655: AND
1656: IFFALSE 1721
// begin InitHc ;
1658: CALL_OW 19
// for i = 1 to 2 do
1662: LD_ADDR_VAR 0 2
1666: PUSH
1667: DOUBLE
1668: LD_INT 1
1670: DEC
1671: ST_TO_ADDR
1672: LD_INT 2
1674: PUSH
1675: FOR_TO
1676: IFFALSE 1719
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1678: LD_INT 0
1680: PPUSH
1681: LD_VAR 0 2
1685: PUSH
1686: LD_INT 4
1688: MOD
1689: PUSH
1690: LD_INT 1
1692: PLUS
1693: PPUSH
1694: LD_INT 3
1696: PPUSH
1697: CALL_OW 380
// others := others ^ CreateHuman ;
1701: LD_ADDR_EXP 27
1705: PUSH
1706: LD_EXP 27
1710: PUSH
1711: CALL_OW 44
1715: ADD
1716: ST_TO_ADDR
// end ;
1717: GO 1675
1719: POP
1720: POP
// end ; if others then
1721: LD_EXP 27
1725: IFFALSE 1743
// tmp := tmp ^ others ;
1727: LD_ADDR_VAR 0 5
1731: PUSH
1732: LD_VAR 0 5
1736: PUSH
1737: LD_EXP 27
1741: ADD
1742: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1743: LD_ADDR_VAR 0 3
1747: PUSH
1748: LD_INT 28
1750: PUSH
1751: LD_INT 49
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PUSH
1758: LD_INT 33
1760: PUSH
1761: LD_INT 54
1763: PUSH
1764: EMPTY
1765: LIST
1766: LIST
1767: PUSH
1768: LD_INT 38
1770: PUSH
1771: LD_INT 56
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: PUSH
1778: EMPTY
1779: LIST
1780: LIST
1781: LIST
1782: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1783: LD_ADDR_VAR 0 4
1787: PUSH
1788: LD_INT 1
1790: PPUSH
1791: LD_INT 1
1793: PPUSH
1794: LD_INT 2
1796: PPUSH
1797: LD_INT 2
1799: PPUSH
1800: LD_INT 1
1802: PPUSH
1803: LD_INT 12
1805: PPUSH
1806: LD_INT 80
1808: PPUSH
1809: CALL 431 0 7
1813: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1814: LD_VAR 0 4
1818: PPUSH
1819: LD_INT 1
1821: PPUSH
1822: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
1826: LD_VAR 0 4
1830: PPUSH
1831: LD_VAR 0 3
1835: PUSH
1836: LD_INT 1
1838: ARRAY
1839: PUSH
1840: LD_INT 1
1842: ARRAY
1843: PPUSH
1844: LD_VAR 0 3
1848: PUSH
1849: LD_INT 1
1851: ARRAY
1852: PUSH
1853: LD_INT 2
1855: ARRAY
1856: PPUSH
1857: LD_INT 0
1859: PPUSH
1860: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
1864: LD_VAR 0 4
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: LD_INT 100
1874: PPUSH
1875: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
1879: LD_EXP 27
1883: PUSH
1884: LD_INT 1
1886: ARRAY
1887: PPUSH
1888: LD_VAR 0 4
1892: PPUSH
1893: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
1897: LD_ADDR_VAR 0 4
1901: PUSH
1902: LD_INT 1
1904: PPUSH
1905: LD_INT 1
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: LD_INT 2
1913: PPUSH
1914: LD_INT 1
1916: PPUSH
1917: LD_INT 2
1919: PPUSH
1920: LD_INT 80
1922: PPUSH
1923: CALL 431 0 7
1927: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1928: LD_VAR 0 4
1932: PPUSH
1933: LD_INT 1
1935: PPUSH
1936: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
1940: LD_VAR 0 4
1944: PPUSH
1945: LD_VAR 0 3
1949: PUSH
1950: LD_INT 2
1952: ARRAY
1953: PUSH
1954: LD_INT 1
1956: ARRAY
1957: PPUSH
1958: LD_VAR 0 3
1962: PUSH
1963: LD_INT 2
1965: ARRAY
1966: PUSH
1967: LD_INT 2
1969: ARRAY
1970: PPUSH
1971: LD_INT 0
1973: PPUSH
1974: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
1978: LD_EXP 17
1982: PPUSH
1983: LD_VAR 0 4
1987: PPUSH
1988: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
1992: LD_ADDR_VAR 0 4
1996: PUSH
1997: LD_INT 1
1999: PPUSH
2000: LD_INT 1
2002: PPUSH
2003: LD_INT 1
2005: PPUSH
2006: LD_INT 2
2008: PPUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_INT 3
2014: PPUSH
2015: LD_INT 80
2017: PPUSH
2018: CALL 431 0 7
2022: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2023: LD_VAR 0 4
2027: PPUSH
2028: LD_INT 1
2030: PPUSH
2031: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2035: LD_VAR 0 4
2039: PPUSH
2040: LD_VAR 0 3
2044: PUSH
2045: LD_INT 3
2047: ARRAY
2048: PUSH
2049: LD_INT 1
2051: ARRAY
2052: PPUSH
2053: LD_VAR 0 3
2057: PUSH
2058: LD_INT 3
2060: ARRAY
2061: PUSH
2062: LD_INT 2
2064: ARRAY
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2073: LD_EXP 16
2077: PPUSH
2078: LD_VAR 0 4
2082: PPUSH
2083: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2087: LD_ADDR_VAR 0 2
2091: PUSH
2092: LD_VAR 0 5
2096: PUSH
2097: LD_EXP 27
2101: PUSH
2102: LD_INT 1
2104: ARRAY
2105: DIFF
2106: PUSH
2107: FOR_IN
2108: IFFALSE 2127
// PlaceUnitArea ( i , startArea , false ) ;
2110: LD_VAR 0 2
2114: PPUSH
2115: LD_INT 5
2117: PPUSH
2118: LD_INT 0
2120: PPUSH
2121: CALL_OW 49
2125: GO 2107
2127: POP
2128: POP
// end ; end_of_file
2129: LD_VAR 0 1
2133: RET
// export function Action ; var m ; begin
2134: LD_INT 0
2136: PPUSH
2137: PPUSH
// InGameOn ;
2138: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2142: LD_INT 28
2144: PPUSH
2145: LD_INT 51
2147: PPUSH
2148: CALL_OW 86
// Wait ( 3 ) ;
2152: LD_INT 3
2154: PPUSH
2155: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2159: LD_EXP 16
2163: PPUSH
2164: LD_STRING D1d-JMM-1a
2166: PPUSH
2167: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2171: LD_EXP 18
2175: PPUSH
2176: LD_STRING D1d-Har-1
2178: PPUSH
2179: CALL_OW 94
// InGameOff ;
2183: CALL_OW 9
// SaveForQuickRestart ;
2187: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2191: LD_STRING M1
2193: PPUSH
2194: CALL_OW 337
// Wait ( 0 0$2 ) ;
2198: LD_INT 70
2200: PPUSH
2201: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2205: LD_EXP 16
2209: PPUSH
2210: LD_STRING D2-JMM-1
2212: PPUSH
2213: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2217: LD_EXP 17
2221: PPUSH
2222: LD_STRING D2-Glad-1
2224: PPUSH
2225: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2229: LD_EXP 16
2233: PPUSH
2234: LD_STRING D2-JMM-2
2236: PPUSH
2237: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2241: LD_EXP 17
2245: PPUSH
2246: LD_STRING D2-Glad-2
2248: PPUSH
2249: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2253: LD_EXP 16
2257: PPUSH
2258: LD_STRING D2-JMM-3
2260: PPUSH
2261: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2265: LD_INT 1050
2267: PPUSH
2268: LD_INT 2100
2270: PPUSH
2271: CALL_OW 12
2275: PPUSH
2276: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2280: LD_INT 1
2282: PPUSH
2283: LD_INT 570
2285: PPUSH
2286: LD_INT 350
2288: PPUSH
2289: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2293: LD_INT 6300
2295: PPUSH
2296: LD_INT 10500
2298: PPUSH
2299: CALL_OW 12
2303: PPUSH
2304: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2308: LD_INT 0
2310: PPUSH
2311: LD_INT 570
2313: PPUSH
2314: LD_INT 350
2316: PPUSH
2317: CALL_OW 550
// end ;
2321: LD_VAR 0 1
2325: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2326: LD_INT 22
2328: PUSH
2329: LD_INT 1
2331: PUSH
2332: EMPTY
2333: LIST
2334: LIST
2335: PUSH
2336: LD_INT 3
2338: PUSH
2339: LD_INT 57
2341: PUSH
2342: EMPTY
2343: LIST
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 30
2351: PUSH
2352: LD_INT 0
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: PUSH
2364: EMPTY
2365: LIST
2366: PPUSH
2367: CALL_OW 69
2371: PUSH
2372: LD_EXP 4
2376: NOT
2377: AND
2378: IFFALSE 2391
2380: GO 2382
2382: DISABLE
// begin deltaBuilded := true ;
2383: LD_ADDR_EXP 4
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// end ;
2391: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2392: LD_EXP 6
2396: NOT
2397: PUSH
2398: LD_EXP 4
2402: AND
2403: PUSH
2404: LD_INT 22
2406: PUSH
2407: LD_INT 1
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 3
2416: PUSH
2417: LD_INT 57
2419: PUSH
2420: EMPTY
2421: LIST
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 30
2429: PUSH
2430: LD_INT 0
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: LIST
2441: PUSH
2442: EMPTY
2443: LIST
2444: PPUSH
2445: CALL_OW 69
2449: AND
2450: IFFALSE 2536
2452: GO 2454
2454: DISABLE
// begin enable ;
2455: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2456: LD_INT 0
2458: PPUSH
2459: LD_INT 1
2461: PPUSH
2462: LD_INT 0
2464: PPUSH
2465: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2469: LD_ADDR_EXP 6
2473: PUSH
2474: LD_INT 22
2476: PUSH
2477: LD_INT 1
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: PUSH
2484: LD_INT 3
2486: PUSH
2487: LD_INT 57
2489: PUSH
2490: EMPTY
2491: LIST
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PUSH
2497: LD_INT 30
2499: PUSH
2500: LD_INT 0
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: LIST
2511: PUSH
2512: EMPTY
2513: LIST
2514: PPUSH
2515: CALL_OW 69
2519: PUSH
2520: LD_INT 1
2522: ARRAY
2523: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2524: LD_EXP 6
2528: PPUSH
2529: LD_STRING Delta
2531: PPUSH
2532: CALL_OW 500
// end ;
2536: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2537: LD_INT 1
2539: PPUSH
2540: LD_INT 1
2542: PPUSH
2543: CALL_OW 321
2547: PUSH
2548: LD_INT 2
2550: EQUAL
2551: PUSH
2552: LD_EXP 17
2556: PPUSH
2557: CALL_OW 302
2561: AND
2562: IFFALSE 2623
2564: GO 2566
2566: DISABLE
// begin DialogueOn ;
2567: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2571: LD_EXP 17
2575: PPUSH
2576: LD_STRING D3-Glad-1
2578: PPUSH
2579: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2583: LD_EXP 16
2587: PPUSH
2588: LD_STRING D3-JMM-1
2590: PPUSH
2591: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2595: LD_EXP 17
2599: PPUSH
2600: LD_STRING D3-Glad-2
2602: PPUSH
2603: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2607: LD_EXP 16
2611: PPUSH
2612: LD_STRING D3-JMM-2
2614: PPUSH
2615: CALL_OW 88
// DialogueOff ;
2619: CALL_OW 7
// end ;
2623: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched and ( IsOk ( Frank ) or ( IsOk ( Denis ) and GetSide ( Denis ) = 1 ) or UnitFilter ( others , [ f_sex , sex_male ] ) ) do var sol , ape , b ;
2624: LD_INT 2
2626: PPUSH
2627: LD_INT 1
2629: PPUSH
2630: CALL_OW 321
2634: PUSH
2635: LD_INT 2
2637: EQUAL
2638: PUSH
2639: LD_EXP 23
2643: PPUSH
2644: CALL_OW 302
2648: PUSH
2649: LD_EXP 19
2653: PPUSH
2654: CALL_OW 302
2658: PUSH
2659: LD_EXP 19
2663: PPUSH
2664: CALL_OW 255
2668: PUSH
2669: LD_INT 1
2671: EQUAL
2672: AND
2673: OR
2674: PUSH
2675: LD_EXP 27
2679: PPUSH
2680: LD_INT 26
2682: PUSH
2683: LD_INT 1
2685: PUSH
2686: EMPTY
2687: LIST
2688: LIST
2689: PPUSH
2690: CALL_OW 72
2694: OR
2695: AND
2696: IFFALSE 3199
2698: GO 2700
2700: DISABLE
2701: LD_INT 0
2703: PPUSH
2704: PPUSH
2705: PPUSH
// begin InGameOn ;
2706: CALL_OW 8
// DialogueOn ;
2710: CALL_OW 6
// if Frank then
2714: LD_EXP 23
2718: IFFALSE 2732
// Say ( Frank , D8a-Frank-1 ) ;
2720: LD_EXP 23
2724: PPUSH
2725: LD_STRING D8a-Frank-1
2727: PPUSH
2728: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2732: LD_ADDR_VAR 0 1
2736: PUSH
2737: LD_EXP 27
2741: PPUSH
2742: LD_INT 26
2744: PUSH
2745: LD_INT 1
2747: PUSH
2748: EMPTY
2749: LIST
2750: LIST
2751: PPUSH
2752: CALL_OW 72
2756: PPUSH
2757: LD_STRING D8a-Sol1-1
2759: PPUSH
2760: CALL 519 0 2
2764: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2765: LD_EXP 19
2769: PUSH
2770: LD_EXP 19
2774: PPUSH
2775: CALL_OW 255
2779: PUSH
2780: LD_INT 1
2782: EQUAL
2783: AND
2784: IFFALSE 2798
// Say ( Denis , D8a-Den-1 ) ;
2786: LD_EXP 19
2790: PPUSH
2791: LD_STRING D8a-Den-1
2793: PPUSH
2794: CALL_OW 88
// if sol or Denis or Frank then
2798: LD_VAR 0 1
2802: PUSH
2803: LD_EXP 19
2807: OR
2808: PUSH
2809: LD_EXP 23
2813: OR
2814: IFFALSE 2875
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
2816: LD_EXP 27
2820: PPUSH
2821: LD_INT 25
2823: PUSH
2824: LD_INT 4
2826: PUSH
2827: EMPTY
2828: LIST
2829: LIST
2830: PUSH
2831: LD_INT 26
2833: PUSH
2834: LD_INT 1
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: PPUSH
2845: CALL_OW 72
2849: PUSH
2850: LD_VAR 0 1
2854: DIFF
2855: PPUSH
2856: LD_STRING D8a-Sci1-1
2858: PPUSH
2859: CALL 519 0 2
// Say ( JMM , D8a-JMM-1 ) ;
2863: LD_EXP 16
2867: PPUSH
2868: LD_STRING D8a-JMM-1
2870: PPUSH
2871: CALL_OW 88
// end ; ape := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] , [ f_inside ] ] ) [ 1 ] ;
2875: LD_ADDR_VAR 0 2
2879: PUSH
2880: LD_INT 22
2882: PUSH
2883: LD_INT 1
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: PUSH
2890: LD_INT 25
2892: PUSH
2893: LD_INT 12
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: PUSH
2900: LD_INT 54
2902: PUSH
2903: EMPTY
2904: LIST
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: LIST
2910: PPUSH
2911: CALL_OW 69
2915: PUSH
2916: LD_INT 1
2918: ARRAY
2919: ST_TO_ADDR
// b := IsInUnit ( ape ) ;
2920: LD_ADDR_VAR 0 3
2924: PUSH
2925: LD_VAR 0 2
2929: PPUSH
2930: CALL_OW 310
2934: ST_TO_ADDR
// if not b then
2935: LD_VAR 0 3
2939: NOT
2940: IFFALSE 3009
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
2942: LD_ADDR_VAR 0 3
2946: PUSH
2947: LD_INT 22
2949: PUSH
2950: LD_INT 1
2952: PUSH
2953: EMPTY
2954: LIST
2955: LIST
2956: PUSH
2957: LD_INT 2
2959: PUSH
2960: LD_INT 30
2962: PUSH
2963: LD_INT 6
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: LD_INT 30
2972: PUSH
2973: LD_INT 7
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: PUSH
2980: LD_INT 30
2982: PUSH
2983: LD_INT 8
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: PUSH
2990: EMPTY
2991: LIST
2992: LIST
2993: LIST
2994: LIST
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: PPUSH
3000: CALL_OW 69
3004: PUSH
3005: LD_INT 1
3007: ARRAY
3008: ST_TO_ADDR
// RemoveUnit ( ape ) ;
3009: LD_VAR 0 2
3013: PPUSH
3014: CALL_OW 64
// PrepareApeman ( 0 ) ;
3018: LD_INT 0
3020: PPUSH
3021: CALL 61983 0 1
// uc_side := 1 ;
3025: LD_ADDR_OWVAR 20
3029: PUSH
3030: LD_INT 1
3032: ST_TO_ADDR
// hc_name := Mike  ;
3033: LD_ADDR_OWVAR 26
3037: PUSH
3038: LD_STRING Mike 
3040: ST_TO_ADDR
// hc_gallery := us ;
3041: LD_ADDR_OWVAR 33
3045: PUSH
3046: LD_STRING us
3048: ST_TO_ADDR
// hc_face_number := 30 ;
3049: LD_ADDR_OWVAR 34
3053: PUSH
3054: LD_INT 30
3056: ST_TO_ADDR
// hc_attr := [ GetAttr ( ape , attr_stamina ) , GetAttr ( ape , attr_speed ) ] ;
3057: LD_ADDR_OWVAR 29
3061: PUSH
3062: LD_VAR 0 2
3066: PPUSH
3067: LD_INT 1
3069: PPUSH
3070: CALL_OW 260
3074: PUSH
3075: LD_VAR 0 2
3079: PPUSH
3080: LD_INT 2
3082: PPUSH
3083: CALL_OW 260
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: ST_TO_ADDR
// hc_skills := [ GetSkill ( ape , 1 ) , GetSkill ( ape , 2 ) , GetSkill ( ape , 3 ) , GetSkill ( ape , 4 ) ] ;
3092: LD_ADDR_OWVAR 31
3096: PUSH
3097: LD_VAR 0 2
3101: PPUSH
3102: LD_INT 1
3104: PPUSH
3105: CALL_OW 259
3109: PUSH
3110: LD_VAR 0 2
3114: PPUSH
3115: LD_INT 2
3117: PPUSH
3118: CALL_OW 259
3122: PUSH
3123: LD_VAR 0 2
3127: PPUSH
3128: LD_INT 3
3130: PPUSH
3131: CALL_OW 259
3135: PUSH
3136: LD_VAR 0 2
3140: PPUSH
3141: LD_INT 4
3143: PPUSH
3144: CALL_OW 259
3148: PUSH
3149: EMPTY
3150: LIST
3151: LIST
3152: LIST
3153: LIST
3154: ST_TO_ADDR
// hc_sex := sex_male ;
3155: LD_ADDR_OWVAR 27
3159: PUSH
3160: LD_INT 1
3162: ST_TO_ADDR
// Mike := CreateHuman ;
3163: LD_ADDR_EXP 26
3167: PUSH
3168: CALL_OW 44
3172: ST_TO_ADDR
// PlaceHumanInUnit ( Mike , b ) ;
3173: LD_EXP 26
3177: PPUSH
3178: LD_VAR 0 3
3182: PPUSH
3183: CALL_OW 52
// InitHc_All ( ) ;
3187: CALL_OW 584
// DialogueOff ;
3191: CALL_OW 7
// InGameOff ;
3195: CALL_OW 9
// end ;
3199: PPOPN 3
3201: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
3202: LD_INT 22
3204: PUSH
3205: LD_INT 1
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: LD_INT 25
3214: PUSH
3215: LD_INT 16
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PPUSH
3226: CALL_OW 69
3230: IFFALSE 3289
3232: GO 3234
3234: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
3235: LD_STRING M1a
3237: PPUSH
3238: CALL_OW 337
// case Query ( Q2 ) of 1 :
3242: LD_STRING Q2
3244: PPUSH
3245: CALL_OW 97
3249: PUSH
3250: LD_INT 1
3252: DOUBLE
3253: EQUAL
3254: IFTRUE 3258
3256: GO 3269
3258: POP
// end_mission := true ; 2 :
3259: LD_ADDR_EXP 14
3263: PUSH
3264: LD_INT 1
3266: ST_TO_ADDR
3267: GO 3289
3269: LD_INT 2
3271: DOUBLE
3272: EQUAL
3273: IFTRUE 3277
3275: GO 3288
3277: POP
// end_the_mission_allowed := true ; end ;
3278: LD_ADDR_OWVAR 57
3282: PUSH
3283: LD_INT 1
3285: ST_TO_ADDR
3286: GO 3289
3288: POP
// end ;
3289: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
3290: LD_INT 22
3292: PUSH
3293: LD_INT 1
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PUSH
3300: LD_INT 2
3302: PUSH
3303: LD_INT 30
3305: PUSH
3306: LD_INT 6
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: LD_INT 30
3315: PUSH
3316: LD_INT 7
3318: PUSH
3319: EMPTY
3320: LIST
3321: LIST
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: LIST
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: PPUSH
3332: CALL_OW 69
3336: PUSH
3337: LD_INT 22
3339: PUSH
3340: LD_INT 1
3342: PUSH
3343: EMPTY
3344: LIST
3345: LIST
3346: PUSH
3347: LD_INT 2
3349: PUSH
3350: LD_INT 30
3352: PUSH
3353: LD_INT 2
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PUSH
3360: LD_INT 30
3362: PUSH
3363: LD_INT 3
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: LIST
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PPUSH
3379: CALL_OW 69
3383: AND
3384: PUSH
3385: LD_EXP 6
3389: AND
3390: IFFALSE 3905
3392: GO 3394
3394: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3395: LD_INT 1050
3397: PPUSH
3398: LD_INT 1750
3400: PPUSH
3401: CALL_OW 12
3405: PPUSH
3406: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3410: LD_EXP 19
3414: PPUSH
3415: LD_INT 6
3417: PUSH
3418: LD_INT 9
3420: PUSH
3421: LD_INT 10
3423: PUSH
3424: LD_INT 16
3426: PUSH
3427: EMPTY
3428: LIST
3429: LIST
3430: LIST
3431: LIST
3432: PUSH
3433: LD_OWVAR 67
3437: ARRAY
3438: PPUSH
3439: LD_INT 0
3441: PPUSH
3442: CALL_OW 49
// ComHold ( Denis ) ;
3446: LD_EXP 19
3450: PPUSH
3451: CALL_OW 140
// InGameOn ;
3455: CALL_OW 8
// DialogueOn ;
3459: CALL_OW 6
// if Delta then
3463: LD_EXP 6
3467: IFFALSE 3480
// CenterNowOnUnits ( Delta ) else
3469: LD_EXP 6
3473: PPUSH
3474: CALL_OW 87
3478: GO 3489
// CenterNowOnUnits ( JMM ) ;
3480: LD_EXP 16
3484: PPUSH
3485: CALL_OW 87
// SayRadio ( Denis , DD-Den-1 ) ;
3489: LD_EXP 19
3493: PPUSH
3494: LD_STRING DD-Den-1
3496: PPUSH
3497: CALL_OW 94
// Say ( JMM , DD-JMM-1 ) ;
3501: LD_EXP 16
3505: PPUSH
3506: LD_STRING DD-JMM-1
3508: PPUSH
3509: CALL_OW 88
// SayRadio ( Denis , DD-Den-2 ) ;
3513: LD_EXP 19
3517: PPUSH
3518: LD_STRING DD-Den-2
3520: PPUSH
3521: CALL_OW 94
// Wait ( 3 ) ;
3525: LD_INT 3
3527: PPUSH
3528: CALL_OW 67
// DialogueOff ;
3532: CALL_OW 7
// InGameOff ;
3536: CALL_OW 9
// if Difficulty = 1 then
3540: LD_OWVAR 67
3544: PUSH
3545: LD_INT 1
3547: EQUAL
3548: IFFALSE 3624
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3550: LD_EXP 19
3554: PPUSH
3555: CALL_OW 250
3559: PPUSH
3560: LD_EXP 19
3564: PPUSH
3565: CALL_OW 251
3569: PPUSH
3570: LD_INT 1
3572: PPUSH
3573: LD_INT 12
3575: NEG
3576: PPUSH
3577: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3581: LD_EXP 19
3585: PPUSH
3586: CALL_OW 87
// wait ( 0 0$5 ) ;
3590: LD_INT 175
3592: PPUSH
3593: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3597: LD_EXP 19
3601: PPUSH
3602: CALL_OW 250
3606: PPUSH
3607: LD_EXP 19
3611: PPUSH
3612: CALL_OW 251
3616: PPUSH
3617: LD_INT 1
3619: PPUSH
3620: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3624: LD_INT 35
3626: PPUSH
3627: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3631: LD_INT 1
3633: PPUSH
3634: LD_EXP 19
3638: PPUSH
3639: CALL_OW 292
3643: PUSH
3644: LD_EXP 19
3648: PPUSH
3649: CALL_OW 301
3653: OR
3654: IFFALSE 3624
// if IsDead ( Denis ) then
3656: LD_EXP 19
3660: PPUSH
3661: CALL_OW 301
3665: IFFALSE 3669
// exit ;
3667: GO 3905
// SetSide ( Denis , 1 ) ;
3669: LD_EXP 19
3673: PPUSH
3674: LD_INT 1
3676: PPUSH
3677: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3681: LD_EXP 19
3685: PPUSH
3686: LD_STRING DD-Den-2a
3688: PPUSH
3689: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3693: LD_INT 35
3695: PPUSH
3696: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3700: LD_EXP 19
3704: PPUSH
3705: CALL_OW 310
3709: PPUSH
3710: CALL_OW 266
3714: PUSH
3715: LD_INT 6
3717: PUSH
3718: LD_INT 7
3720: PUSH
3721: LD_INT 8
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: LIST
3728: IN
3729: PUSH
3730: LD_EXP 19
3734: PPUSH
3735: CALL_OW 301
3739: OR
3740: IFFALSE 3693
// if IsDead ( Denis ) then
3742: LD_EXP 19
3746: PPUSH
3747: CALL_OW 301
3751: IFFALSE 3755
// exit ;
3753: GO 3905
// Say ( Denis , DD-Den-2b ) ;
3755: LD_EXP 19
3759: PPUSH
3760: LD_STRING DD-Den-2b
3762: PPUSH
3763: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
3767: LD_EXP 19
3771: PPUSH
3772: LD_INT 4
3774: PPUSH
3775: CALL_OW 123
// Wait ( 0 0$02 ) ;
3779: LD_INT 70
3781: PPUSH
3782: CALL_OW 67
// DialogueOn ;
3786: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
3790: LD_EXP 19
3794: PPUSH
3795: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
3799: LD_EXP 16
3803: PPUSH
3804: LD_STRING D4-JMM-1
3806: PPUSH
3807: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
3811: LD_EXP 19
3815: PPUSH
3816: LD_STRING D4-Den-1
3818: PPUSH
3819: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
3823: LD_EXP 16
3827: PPUSH
3828: LD_STRING D4-JMM-2
3830: PPUSH
3831: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
3835: LD_EXP 19
3839: PPUSH
3840: LD_STRING D4-Den-2
3842: PPUSH
3843: CALL_OW 88
// DialogueOff ;
3847: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3851: LD_STRING M2
3853: PPUSH
3854: CALL_OW 337
// radar_allowed := true ;
3858: LD_ADDR_EXP 7
3862: PUSH
3863: LD_INT 1
3865: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
3866: LD_INT 6
3868: PPUSH
3869: LD_INT 1
3871: PPUSH
3872: LD_INT 1
3874: PPUSH
3875: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
3879: LD_INT 15
3881: PPUSH
3882: LD_INT 1
3884: PPUSH
3885: LD_INT 1
3887: PPUSH
3888: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
3892: LD_INT 20
3894: PPUSH
3895: LD_INT 1
3897: PPUSH
3898: LD_INT 1
3900: PPUSH
3901: CALL_OW 324
// end ;
3905: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
3906: LD_EXP 13
3910: IFFALSE 4533
3912: GO 3914
3914: DISABLE
3915: LD_INT 0
3917: PPUSH
3918: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
3919: LD_ADDR_VAR 0 1
3923: PUSH
3924: LD_EXP 27
3928: PPUSH
3929: LD_INT 26
3931: PUSH
3932: LD_INT 1
3934: PUSH
3935: EMPTY
3936: LIST
3937: LIST
3938: PPUSH
3939: CALL_OW 72
3943: PPUSH
3944: LD_STRING D5-Sol1-1
3946: PPUSH
3947: CALL 519 0 2
3951: ST_TO_ADDR
// if not sol then
3952: LD_VAR 0 1
3956: NOT
3957: IFFALSE 3961
// exit ;
3959: GO 4533
// repeat wait ( 0 0$01 ) ;
3961: LD_INT 35
3963: PPUSH
3964: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
3968: LD_INT 22
3970: PUSH
3971: LD_INT 2
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: LD_INT 21
3980: PUSH
3981: LD_INT 1
3983: PUSH
3984: EMPTY
3985: LIST
3986: LIST
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: PPUSH
3992: CALL_OW 69
3996: PUSH
3997: LD_INT 0
3999: EQUAL
4000: IFFALSE 3961
// if IsOk ( sol ) then
4002: LD_VAR 0 1
4006: PPUSH
4007: CALL_OW 302
4011: IFFALSE 4031
// begin sol2 := others diff sol ;
4013: LD_ADDR_VAR 0 2
4017: PUSH
4018: LD_EXP 27
4022: PUSH
4023: LD_VAR 0 1
4027: DIFF
4028: ST_TO_ADDR
// end else
4029: GO 4033
// exit ;
4031: GO 4533
// if not Lisa and not sol2 then
4033: LD_EXP 22
4037: NOT
4038: PUSH
4039: LD_VAR 0 2
4043: NOT
4044: AND
4045: IFFALSE 4049
// exit ;
4047: GO 4533
// DialogueOn ;
4049: CALL_OW 6
// if Lisa then
4053: LD_EXP 22
4057: IFFALSE 4073
// Say ( Lisa , D5a-Lisa-1 ) else
4059: LD_EXP 22
4063: PPUSH
4064: LD_STRING D5a-Lisa-1
4066: PPUSH
4067: CALL_OW 88
4071: GO 4148
// if sol2 then
4073: LD_VAR 0 2
4077: IFFALSE 4148
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4079: LD_VAR 0 2
4083: PUSH
4084: LD_INT 1
4086: ARRAY
4087: PPUSH
4088: CALL_OW 258
4092: PUSH
4093: LD_INT 1
4095: DOUBLE
4096: EQUAL
4097: IFTRUE 4101
4099: GO 4120
4101: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
4102: LD_VAR 0 2
4106: PUSH
4107: LD_INT 1
4109: ARRAY
4110: PPUSH
4111: LD_STRING D5-Sol2-1
4113: PPUSH
4114: CALL_OW 88
4118: GO 4148
4120: LD_INT 2
4122: DOUBLE
4123: EQUAL
4124: IFTRUE 4128
4126: GO 4147
4128: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
4129: LD_VAR 0 2
4133: PUSH
4134: LD_INT 1
4136: ARRAY
4137: PPUSH
4138: LD_STRING D5-FSol2-1
4140: PPUSH
4141: CALL_OW 88
4145: GO 4148
4147: POP
// Say ( sol , D5-Sol1-2 ) ;
4148: LD_VAR 0 1
4152: PPUSH
4153: LD_STRING D5-Sol1-2
4155: PPUSH
4156: CALL_OW 88
// if Lisa then
4160: LD_EXP 22
4164: IFFALSE 4180
// Say ( Lisa , D5a-Lisa-2 ) else
4166: LD_EXP 22
4170: PPUSH
4171: LD_STRING D5a-Lisa-2
4173: PPUSH
4174: CALL_OW 88
4178: GO 4255
// if sol2 then
4180: LD_VAR 0 2
4184: IFFALSE 4255
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4186: LD_VAR 0 2
4190: PUSH
4191: LD_INT 1
4193: ARRAY
4194: PPUSH
4195: CALL_OW 258
4199: PUSH
4200: LD_INT 1
4202: DOUBLE
4203: EQUAL
4204: IFTRUE 4208
4206: GO 4227
4208: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
4209: LD_VAR 0 2
4213: PUSH
4214: LD_INT 1
4216: ARRAY
4217: PPUSH
4218: LD_STRING D5-Sol2-2
4220: PPUSH
4221: CALL_OW 88
4225: GO 4255
4227: LD_INT 2
4229: DOUBLE
4230: EQUAL
4231: IFTRUE 4235
4233: GO 4254
4235: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
4236: LD_VAR 0 2
4240: PUSH
4241: LD_INT 1
4243: ARRAY
4244: PPUSH
4245: LD_STRING D5-FSol2-2
4247: PPUSH
4248: CALL_OW 88
4252: GO 4255
4254: POP
// Say ( sol , D5a-Sol1-3 ) ;
4255: LD_VAR 0 1
4259: PPUSH
4260: LD_STRING D5a-Sol1-3
4262: PPUSH
4263: CALL_OW 88
// if Lisa then
4267: LD_EXP 22
4271: IFFALSE 4285
// Say ( Lisa , D5a-Lisa-3 ) ;
4273: LD_EXP 22
4277: PPUSH
4278: LD_STRING D5a-Lisa-3
4280: PPUSH
4281: CALL_OW 88
// if not sol2 then
4285: LD_VAR 0 2
4289: NOT
4290: IFFALSE 4298
// begin DialogueOff ;
4292: CALL_OW 7
// exit ;
4296: GO 4533
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
4298: LD_VAR 0 2
4302: PUSH
4303: LD_INT 1
4305: ARRAY
4306: PPUSH
4307: CALL_OW 258
4311: PUSH
4312: LD_INT 1
4314: DOUBLE
4315: EQUAL
4316: IFTRUE 4320
4318: GO 4339
4320: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
4321: LD_VAR 0 2
4325: PUSH
4326: LD_INT 1
4328: ARRAY
4329: PPUSH
4330: LD_STRING D5-Sol2-3
4332: PPUSH
4333: CALL_OW 88
4337: GO 4367
4339: LD_INT 2
4341: DOUBLE
4342: EQUAL
4343: IFTRUE 4347
4345: GO 4366
4347: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
4348: LD_VAR 0 2
4352: PUSH
4353: LD_INT 1
4355: ARRAY
4356: PPUSH
4357: LD_STRING D5-FSol2-3
4359: PPUSH
4360: CALL_OW 88
4364: GO 4367
4366: POP
// Say ( sol , D5-Sol1-4 ) ;
4367: LD_VAR 0 1
4371: PPUSH
4372: LD_STRING D5-Sol1-4
4374: PPUSH
4375: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4379: LD_VAR 0 2
4383: PUSH
4384: LD_INT 1
4386: ARRAY
4387: PPUSH
4388: CALL_OW 258
4392: PUSH
4393: LD_INT 1
4395: DOUBLE
4396: EQUAL
4397: IFTRUE 4401
4399: GO 4420
4401: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4402: LD_VAR 0 2
4406: PUSH
4407: LD_INT 1
4409: ARRAY
4410: PPUSH
4411: LD_STRING D5-Sol2-4
4413: PPUSH
4414: CALL_OW 88
4418: GO 4448
4420: LD_INT 2
4422: DOUBLE
4423: EQUAL
4424: IFTRUE 4428
4426: GO 4447
4428: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4429: LD_VAR 0 2
4433: PUSH
4434: LD_INT 1
4436: ARRAY
4437: PPUSH
4438: LD_STRING D5-FSol2-4
4440: PPUSH
4441: CALL_OW 88
4445: GO 4448
4447: POP
// Say ( sol , D5-Sol1-5 ) ;
4448: LD_VAR 0 1
4452: PPUSH
4453: LD_STRING D5-Sol1-5
4455: PPUSH
4456: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4460: LD_VAR 0 2
4464: PUSH
4465: LD_INT 1
4467: ARRAY
4468: PPUSH
4469: CALL_OW 258
4473: PUSH
4474: LD_INT 1
4476: DOUBLE
4477: EQUAL
4478: IFTRUE 4482
4480: GO 4501
4482: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4483: LD_VAR 0 2
4487: PUSH
4488: LD_INT 1
4490: ARRAY
4491: PPUSH
4492: LD_STRING D5-Sol2-5
4494: PPUSH
4495: CALL_OW 88
4499: GO 4529
4501: LD_INT 2
4503: DOUBLE
4504: EQUAL
4505: IFTRUE 4509
4507: GO 4528
4509: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4510: LD_VAR 0 2
4514: PUSH
4515: LD_INT 1
4517: ARRAY
4518: PPUSH
4519: LD_STRING D5-FSol2-5
4521: PPUSH
4522: CALL_OW 88
4526: GO 4529
4528: POP
// DialogueOff ;
4529: CALL_OW 7
// end ;
4533: PPOPN 2
4535: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4536: LD_INT 22
4538: PUSH
4539: LD_INT 1
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: PUSH
4546: LD_INT 25
4548: PUSH
4549: LD_INT 16
4551: PUSH
4552: EMPTY
4553: LIST
4554: LIST
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: PPUSH
4560: CALL_OW 69
4564: PUSH
4565: LD_INT 5
4567: GREATEREQUAL
4568: IFFALSE 4588
4570: GO 4572
4572: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4573: LD_STRING M1b
4575: PPUSH
4576: CALL_OW 337
// apeman_army := true ;
4580: LD_ADDR_EXP 9
4584: PUSH
4585: LD_INT 1
4587: ST_TO_ADDR
// end ;
4588: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4589: LD_INT 22
4591: PUSH
4592: LD_INT 1
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: PUSH
4599: LD_INT 30
4601: PUSH
4602: LD_INT 3
4604: PUSH
4605: EMPTY
4606: LIST
4607: LIST
4608: PUSH
4609: LD_INT 57
4611: PUSH
4612: EMPTY
4613: LIST
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: PPUSH
4620: CALL_OW 69
4624: IFFALSE 4636
4626: GO 4628
4628: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4629: LD_STRING M1c
4631: PPUSH
4632: CALL_OW 337
4636: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4637: LD_INT 6
4639: PPUSH
4640: LD_INT 1
4642: PPUSH
4643: CALL_OW 321
4647: PUSH
4648: LD_INT 2
4650: EQUAL
4651: IFFALSE 4671
4653: GO 4655
4655: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4656: LD_STRING M2a
4658: PPUSH
4659: CALL_OW 337
// radar_researched := true ;
4663: LD_ADDR_EXP 10
4667: PUSH
4668: LD_INT 1
4670: ST_TO_ADDR
// end ;
4671: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4672: LD_INT 22
4674: PUSH
4675: LD_INT 1
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PUSH
4682: LD_INT 2
4684: PUSH
4685: LD_INT 34
4687: PUSH
4688: LD_INT 11
4690: PUSH
4691: EMPTY
4692: LIST
4693: LIST
4694: PUSH
4695: LD_INT 35
4697: PUSH
4698: LD_INT 11
4700: PUSH
4701: EMPTY
4702: LIST
4703: LIST
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: LIST
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PPUSH
4714: CALL_OW 69
4718: IFFALSE 4738
4720: GO 4722
4722: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4723: LD_STRING M2b
4725: PPUSH
4726: CALL_OW 337
// radar_builded := true ;
4730: LD_ADDR_EXP 11
4734: PUSH
4735: LD_INT 1
4737: ST_TO_ADDR
// end ;
4738: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4739: LD_INT 22
4741: PUSH
4742: LD_INT 0
4744: PUSH
4745: EMPTY
4746: LIST
4747: LIST
4748: PUSH
4749: LD_INT 25
4751: PUSH
4752: LD_INT 12
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: PUSH
4759: EMPTY
4760: LIST
4761: LIST
4762: PPUSH
4763: CALL_OW 69
4767: PUSH
4768: LD_INT 0
4770: EQUAL
4771: PUSH
4772: LD_EXP 8
4776: NOT
4777: AND
4778: IFFALSE 4790
4780: GO 4782
4782: DISABLE
// YouLost ( Apeman ) ;
4783: LD_STRING Apeman
4785: PPUSH
4786: CALL_OW 104
4790: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
4791: LD_INT 22
4793: PUSH
4794: LD_INT 1
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PUSH
4801: LD_INT 25
4803: PUSH
4804: LD_INT 16
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: PUSH
4811: EMPTY
4812: LIST
4813: LIST
4814: PPUSH
4815: CALL_OW 69
4819: PUSH
4820: LD_INT 7
4822: GREATEREQUAL
4823: IFFALSE 4921
4825: GO 4827
4827: DISABLE
4828: LD_INT 0
4830: PPUSH
4831: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
4832: LD_ADDR_VAR 0 2
4836: PUSH
4837: LD_INT 22
4839: PUSH
4840: LD_INT 1
4842: PUSH
4843: EMPTY
4844: LIST
4845: LIST
4846: PUSH
4847: LD_INT 21
4849: PUSH
4850: LD_INT 1
4852: PUSH
4853: EMPTY
4854: LIST
4855: LIST
4856: PUSH
4857: LD_INT 25
4859: PUSH
4860: LD_INT 4
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PUSH
4867: EMPTY
4868: LIST
4869: LIST
4870: LIST
4871: PPUSH
4872: CALL_OW 69
4876: PUSH
4877: LD_EXP 16
4881: ADD
4882: ST_TO_ADDR
// if filter then
4883: LD_VAR 0 2
4887: IFFALSE 4921
// for i in filter do
4889: LD_ADDR_VAR 0 1
4893: PUSH
4894: LD_VAR 0 2
4898: PUSH
4899: FOR_IN
4900: IFFALSE 4919
// AddExperience ( i , 4 , 3500 ) ;
4902: LD_VAR 0 1
4906: PPUSH
4907: LD_INT 4
4909: PPUSH
4910: LD_INT 3500
4912: PPUSH
4913: CALL_OW 492
4917: GO 4899
4919: POP
4920: POP
// end ;
4921: PPOPN 2
4923: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
4924: LD_EXP 14
4928: IFFALSE 6097
4930: GO 4932
4932: DISABLE
4933: LD_INT 0
4935: PPUSH
4936: PPUSH
4937: PPUSH
4938: PPUSH
4939: PPUSH
// begin if apeKillCounter = 0 then
4940: LD_EXP 15
4944: PUSH
4945: LD_INT 0
4947: EQUAL
4948: IFFALSE 4957
// SetAchievement ( ACH_APEKILLER ) ;
4950: LD_STRING ACH_APEKILLER
4952: PPUSH
4953: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
4957: LD_INT 22
4959: PUSH
4960: LD_INT 2
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PPUSH
4967: CALL_OW 69
4971: IFFALSE 5009
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
4973: LD_ADDR_VAR 0 1
4977: PUSH
4978: LD_INT 22
4980: PUSH
4981: LD_INT 2
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PPUSH
4988: CALL_OW 69
4992: PUSH
4993: FOR_IN
4994: IFFALSE 5007
// RemoveUnit ( i ) ;
4996: LD_VAR 0 1
5000: PPUSH
5001: CALL_OW 64
5005: GO 4993
5007: POP
5008: POP
// m1 := false ;
5009: LD_ADDR_VAR 0 3
5013: PUSH
5014: LD_INT 0
5016: ST_TO_ADDR
// m2 := false ;
5017: LD_ADDR_VAR 0 4
5021: PUSH
5022: LD_INT 0
5024: ST_TO_ADDR
// m3 := false ;
5025: LD_ADDR_VAR 0 5
5029: PUSH
5030: LD_INT 0
5032: ST_TO_ADDR
// if apeman_army then
5033: LD_EXP 9
5037: IFFALSE 5059
// begin AddMedal ( Tame , 1 ) ;
5039: LD_STRING Tame
5041: PPUSH
5042: LD_INT 1
5044: PPUSH
5045: CALL_OW 101
// m1 := true ;
5049: LD_ADDR_VAR 0 3
5053: PUSH
5054: LD_INT 1
5056: ST_TO_ADDR
// end else
5057: GO 5070
// AddMedal ( Tame , - 1 ) ;
5059: LD_STRING Tame
5061: PPUSH
5062: LD_INT 1
5064: NEG
5065: PPUSH
5066: CALL_OW 101
// if radar_researched then
5070: LD_EXP 10
5074: IFFALSE 5106
// begin SaveVariable ( true , radarResInDelta ) ;
5076: LD_INT 1
5078: PPUSH
5079: LD_STRING radarResInDelta
5081: PPUSH
5082: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
5086: LD_STRING Radar
5088: PPUSH
5089: LD_INT 1
5091: PPUSH
5092: CALL_OW 101
// m2 := true ;
5096: LD_ADDR_VAR 0 4
5100: PUSH
5101: LD_INT 1
5103: ST_TO_ADDR
// end else
5104: GO 5136
// if radar_allowed then
5106: LD_EXP 7
5110: IFFALSE 5125
// AddMedal ( Radar , - 2 ) else
5112: LD_STRING Radar
5114: PPUSH
5115: LD_INT 2
5117: NEG
5118: PPUSH
5119: CALL_OW 101
5123: GO 5136
// AddMedal ( Radar , - 1 ) ;
5125: LD_STRING Radar
5127: PPUSH
5128: LD_INT 1
5130: NEG
5131: PPUSH
5132: CALL_OW 101
// if radar_builded then
5136: LD_EXP 11
5140: IFFALSE 5162
// begin AddMedal ( BuildRadar , 1 ) ;
5142: LD_STRING BuildRadar
5144: PPUSH
5145: LD_INT 1
5147: PPUSH
5148: CALL_OW 101
// m3 := true ;
5152: LD_ADDR_VAR 0 5
5156: PUSH
5157: LD_INT 1
5159: ST_TO_ADDR
// end else
5160: GO 5173
// AddMedal ( BuildRadar , - 1 ) ;
5162: LD_STRING BuildRadar
5164: PPUSH
5165: LD_INT 1
5167: NEG
5168: PPUSH
5169: CALL_OW 101
// if tick <= 7 7$00 then
5173: LD_OWVAR 1
5177: PUSH
5178: LD_INT 14700
5180: LESSEQUAL
5181: IFFALSE 5190
// SetAchievement ( ACH_ASPEED_5 ) ;
5183: LD_STRING ACH_ASPEED_5
5185: PPUSH
5186: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
5190: LD_VAR 0 3
5194: PUSH
5195: LD_VAR 0 4
5199: AND
5200: PUSH
5201: LD_VAR 0 5
5205: AND
5206: PUSH
5207: LD_OWVAR 67
5211: PUSH
5212: LD_INT 3
5214: GREATEREQUAL
5215: AND
5216: IFFALSE 5228
// SetAchievementEX ( ACH_AMER , 5 ) ;
5218: LD_STRING ACH_AMER
5220: PPUSH
5221: LD_INT 5
5223: PPUSH
5224: CALL_OW 564
// GiveMedals ( MAIN ) ;
5228: LD_STRING MAIN
5230: PPUSH
5231: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
5235: LD_ADDR_VAR 0 2
5239: PUSH
5240: LD_INT 22
5242: PUSH
5243: LD_INT 1
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PUSH
5250: LD_INT 21
5252: PUSH
5253: LD_INT 1
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: PUSH
5260: LD_INT 2
5262: PUSH
5263: LD_INT 25
5265: PUSH
5266: LD_INT 1
5268: PUSH
5269: EMPTY
5270: LIST
5271: LIST
5272: PUSH
5273: LD_INT 25
5275: PUSH
5276: LD_INT 2
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: PUSH
5283: LD_INT 25
5285: PUSH
5286: LD_INT 3
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: PUSH
5293: LD_INT 25
5295: PUSH
5296: LD_INT 4
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: PPUSH
5315: CALL_OW 69
5319: ST_TO_ADDR
// RewardPeople ( tmp ) ;
5320: LD_VAR 0 2
5324: PPUSH
5325: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
5329: LD_EXP 16
5333: PPUSH
5334: LD_EXP 2
5338: PUSH
5339: LD_STRING JMM
5341: STR
5342: PPUSH
5343: CALL_OW 38
// if IsOk ( Gladstone ) then
5347: LD_EXP 17
5351: PPUSH
5352: CALL_OW 302
5356: IFFALSE 5376
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5358: LD_EXP 17
5362: PPUSH
5363: LD_EXP 2
5367: PUSH
5368: LD_STRING Gladstone
5370: STR
5371: PPUSH
5372: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
5376: LD_EXP 19
5380: PPUSH
5381: CALL_OW 302
5385: PUSH
5386: LD_EXP 19
5390: PPUSH
5391: CALL_OW 255
5395: PUSH
5396: LD_INT 1
5398: EQUAL
5399: AND
5400: IFFALSE 5430
// begin SaveCharacters ( Denis , mission_prefix & Denis ) ;
5402: LD_EXP 19
5406: PPUSH
5407: LD_EXP 2
5411: PUSH
5412: LD_STRING Denis
5414: STR
5415: PPUSH
5416: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5420: LD_INT 1
5422: PPUSH
5423: LD_STRING DenisInDelta
5425: PPUSH
5426: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5430: LD_EXP 22
5434: PPUSH
5435: CALL_OW 302
5439: IFFALSE 5459
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5441: LD_EXP 22
5445: PPUSH
5446: LD_EXP 2
5450: PUSH
5451: LD_STRING Lisa
5453: STR
5454: PPUSH
5455: CALL_OW 38
// end ; if IsOk ( Frank ) then
5459: LD_EXP 23
5463: PPUSH
5464: CALL_OW 302
5468: IFFALSE 5488
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5470: LD_EXP 23
5474: PPUSH
5475: LD_EXP 2
5479: PUSH
5480: LD_STRING Frank
5482: STR
5483: PPUSH
5484: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5488: LD_EXP 24
5492: PPUSH
5493: CALL_OW 302
5497: IFFALSE 5517
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5499: LD_EXP 24
5503: PPUSH
5504: LD_EXP 2
5508: PUSH
5509: LD_STRING Bobby
5511: STR
5512: PPUSH
5513: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5517: LD_EXP 25
5521: PPUSH
5522: CALL_OW 302
5526: IFFALSE 5546
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5528: LD_EXP 25
5532: PPUSH
5533: LD_EXP 2
5537: PUSH
5538: LD_STRING Cyrus
5540: STR
5541: PPUSH
5542: CALL_OW 38
// end ; if IsOk ( Brown ) then
5546: LD_EXP 20
5550: PPUSH
5551: CALL_OW 302
5555: IFFALSE 5575
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5557: LD_EXP 20
5561: PPUSH
5562: LD_EXP 2
5566: PUSH
5567: LD_STRING Brown
5569: STR
5570: PPUSH
5571: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5575: LD_EXP 21
5579: PPUSH
5580: CALL_OW 302
5584: IFFALSE 5604
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5586: LD_EXP 21
5590: PPUSH
5591: LD_EXP 2
5595: PUSH
5596: LD_STRING Donaldson
5598: STR
5599: PPUSH
5600: CALL_OW 38
// end ; if IsOk ( Mike ) then
5604: LD_EXP 26
5608: PPUSH
5609: CALL_OW 302
5613: IFFALSE 5633
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5615: LD_EXP 26
5619: PPUSH
5620: LD_EXP 2
5624: PUSH
5625: LD_STRING Mike
5627: STR
5628: PPUSH
5629: CALL_OW 38
// if others then
5633: LD_EXP 27
5637: IFFALSE 5651
// SaveCharacters ( others , othersInDelta ) ;
5639: LD_EXP 27
5643: PPUSH
5644: LD_STRING othersInDelta
5646: PPUSH
5647: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5651: LD_INT 22
5653: PUSH
5654: LD_INT 1
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: LD_INT 25
5663: PUSH
5664: LD_INT 16
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: PPUSH
5675: CALL_OW 69
5679: IFFALSE 5723
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) diff Mike , apeInDelta ) ;
5681: LD_INT 22
5683: PUSH
5684: LD_INT 1
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: PUSH
5691: LD_INT 25
5693: PUSH
5694: LD_INT 16
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PPUSH
5705: CALL_OW 69
5709: PUSH
5710: LD_EXP 26
5714: DIFF
5715: PPUSH
5716: LD_STRING apeInDelta
5718: PPUSH
5719: CALL_OW 38
// tmp := [ ] ;
5723: LD_ADDR_VAR 0 2
5727: PUSH
5728: EMPTY
5729: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5730: LD_INT 22
5732: PUSH
5733: LD_INT 1
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: PUSH
5740: LD_INT 21
5742: PUSH
5743: LD_INT 2
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: PPUSH
5754: CALL_OW 69
5758: IFFALSE 5869
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
5760: LD_ADDR_VAR 0 1
5764: PUSH
5765: LD_INT 22
5767: PUSH
5768: LD_INT 1
5770: PUSH
5771: EMPTY
5772: LIST
5773: LIST
5774: PUSH
5775: LD_INT 21
5777: PUSH
5778: LD_INT 2
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PPUSH
5789: CALL_OW 69
5793: PUSH
5794: FOR_IN
5795: IFFALSE 5867
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
5797: LD_ADDR_VAR 0 2
5801: PUSH
5802: LD_VAR 0 2
5806: PUSH
5807: LD_VAR 0 1
5811: PPUSH
5812: CALL_OW 248
5816: PUSH
5817: LD_VAR 0 1
5821: PPUSH
5822: CALL_OW 265
5826: PUSH
5827: LD_VAR 0 1
5831: PPUSH
5832: CALL_OW 262
5836: PUSH
5837: LD_VAR 0 1
5841: PPUSH
5842: CALL_OW 263
5846: PUSH
5847: LD_VAR 0 1
5851: PPUSH
5852: CALL_OW 264
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: ADD
5864: ST_TO_ADDR
5865: GO 5794
5867: POP
5868: POP
// if tmp then
5869: LD_VAR 0 2
5873: IFFALSE 5887
// SaveVariable ( tmp , vehiclesInDelta ) ;
5875: LD_VAR 0 2
5879: PPUSH
5880: LD_STRING vehiclesInDelta
5882: PPUSH
5883: CALL_OW 39
// tmp := [ ] ;
5887: LD_ADDR_VAR 0 2
5891: PUSH
5892: EMPTY
5893: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
5894: LD_INT 22
5896: PUSH
5897: LD_INT 1
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PUSH
5904: LD_INT 21
5906: PUSH
5907: LD_INT 3
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: PPUSH
5918: CALL_OW 69
5922: IFFALSE 6075
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
5924: LD_ADDR_VAR 0 1
5928: PUSH
5929: LD_INT 22
5931: PUSH
5932: LD_INT 1
5934: PUSH
5935: EMPTY
5936: LIST
5937: LIST
5938: PUSH
5939: LD_INT 21
5941: PUSH
5942: LD_INT 3
5944: PUSH
5945: EMPTY
5946: LIST
5947: LIST
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: PPUSH
5953: CALL_OW 69
5957: PUSH
5958: FOR_IN
5959: IFFALSE 6073
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
5961: LD_ADDR_VAR 0 2
5965: PUSH
5966: LD_VAR 0 2
5970: PUSH
5971: LD_VAR 0 1
5975: PPUSH
5976: CALL_OW 266
5980: PUSH
5981: LD_VAR 0 1
5985: PPUSH
5986: CALL_OW 267
5990: PUSH
5991: LD_VAR 0 1
5995: PPUSH
5996: CALL_OW 250
6000: PUSH
6001: LD_VAR 0 1
6005: PPUSH
6006: CALL_OW 251
6010: PUSH
6011: LD_VAR 0 1
6015: PPUSH
6016: CALL_OW 254
6020: PUSH
6021: LD_VAR 0 1
6025: PPUSH
6026: LD_INT 1
6028: PPUSH
6029: CALL_OW 268
6033: PUSH
6034: LD_VAR 0 1
6038: PPUSH
6039: LD_INT 2
6041: PPUSH
6042: CALL_OW 268
6046: PUSH
6047: LD_VAR 0 1
6051: PPUSH
6052: CALL_OW 269
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: PUSH
6067: EMPTY
6068: LIST
6069: ADD
6070: ST_TO_ADDR
6071: GO 5958
6073: POP
6074: POP
// if tmp then
6075: LD_VAR 0 2
6079: IFFALSE 6093
// SaveVariable ( tmp , buildingsInDelta ) ;
6081: LD_VAR 0 2
6085: PPUSH
6086: LD_STRING buildingsInDelta
6088: PPUSH
6089: CALL_OW 39
// YouWin ;
6093: CALL_OW 103
// end ; end_of_file
6097: PPOPN 5
6099: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
6100: LD_INT 0
6102: PPUSH
6103: PPUSH
6104: PPUSH
6105: PPUSH
// InitHc ;
6106: CALL_OW 19
// InitUc ;
6110: CALL_OW 18
// uc_side := 2 ;
6114: LD_ADDR_OWVAR 20
6118: PUSH
6119: LD_INT 2
6121: ST_TO_ADDR
// uc_nation := 2 ;
6122: LD_ADDR_OWVAR 21
6126: PUSH
6127: LD_INT 2
6129: ST_TO_ADDR
// if not amount then
6130: LD_VAR 0 1
6134: NOT
6135: IFFALSE 6139
// exit ;
6137: GO 6262
// for i = 1 to amount do
6139: LD_ADDR_VAR 0 5
6143: PUSH
6144: DOUBLE
6145: LD_INT 1
6147: DEC
6148: ST_TO_ADDR
6149: LD_VAR 0 1
6153: PUSH
6154: FOR_TO
6155: IFFALSE 6250
// begin PrepareHuman ( false , 1 , skill ) ;
6157: LD_INT 0
6159: PPUSH
6160: LD_INT 1
6162: PPUSH
6163: LD_VAR 0 2
6167: PPUSH
6168: CALL_OW 380
// un := CreateHuman ;
6172: LD_ADDR_VAR 0 6
6176: PUSH
6177: CALL_OW 44
6181: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
6182: LD_ADDR_VAR 0 7
6186: PUSH
6187: LD_VAR 0 7
6191: PPUSH
6192: LD_INT 1
6194: PPUSH
6195: LD_VAR 0 6
6199: PPUSH
6200: CALL_OW 2
6204: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6205: LD_VAR 0 6
6209: PPUSH
6210: LD_VAR 0 3
6214: PPUSH
6215: LD_INT 0
6217: PPUSH
6218: CALL_OW 49
// if i mod 2 = 0 then
6222: LD_VAR 0 5
6226: PUSH
6227: LD_INT 2
6229: MOD
6230: PUSH
6231: LD_INT 0
6233: EQUAL
6234: IFFALSE 6248
// SetTag ( un , 11 ) ;
6236: LD_VAR 0 6
6240: PPUSH
6241: LD_INT 11
6243: PPUSH
6244: CALL_OW 109
// end ;
6248: GO 6154
6250: POP
6251: POP
// result := tmp ;
6252: LD_ADDR_VAR 0 4
6256: PUSH
6257: LD_VAR 0 7
6261: ST_TO_ADDR
// end ;
6262: LD_VAR 0 4
6266: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
6267: LD_EXP 6
6271: IFFALSE 7174
6273: GO 6275
6275: DISABLE
6276: LD_INT 0
6278: PPUSH
6279: PPUSH
6280: PPUSH
6281: PPUSH
6282: PPUSH
6283: PPUSH
6284: PPUSH
6285: PPUSH
// begin more_troops := false ;
6286: LD_ADDR_VAR 0 3
6290: PUSH
6291: LD_INT 0
6293: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
6294: LD_ADDR_VAR 0 4
6298: PUSH
6299: LD_INT 3
6301: PUSH
6302: LD_INT 4
6304: PUSH
6305: LD_INT 5
6307: PUSH
6308: LD_INT 5
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: PUSH
6317: LD_OWVAR 67
6321: ARRAY
6322: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
6323: LD_ADDR_VAR 0 2
6327: PUSH
6328: LD_INT 10500
6330: PUSH
6331: LD_INT 8400
6333: PUSH
6334: LD_INT 6300
6336: PUSH
6337: LD_INT 5250
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: PUSH
6346: LD_OWVAR 67
6350: ARRAY
6351: ST_TO_ADDR
// force := [ ] ;
6352: LD_ADDR_VAR 0 8
6356: PUSH
6357: EMPTY
6358: ST_TO_ADDR
// ar_forces := [ ] ;
6359: LD_ADDR_EXP 28
6363: PUSH
6364: EMPTY
6365: ST_TO_ADDR
// ap_killers := [ ] ;
6366: LD_ADDR_EXP 29
6370: PUSH
6371: EMPTY
6372: ST_TO_ADDR
// Wait ( timer ) ;
6373: LD_VAR 0 2
6377: PPUSH
6378: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
6382: LD_EXP 19
6386: PUSH
6387: LD_EXP 19
6391: PPUSH
6392: CALL_OW 255
6396: PUSH
6397: LD_INT 4
6399: EQUAL
6400: AND
6401: IFFALSE 6410
// Wait ( 0 0$45 ) ;
6403: LD_INT 1575
6405: PPUSH
6406: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
6410: LD_INT 22
6412: PUSH
6413: LD_INT 1
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: PUSH
6420: LD_INT 30
6422: PUSH
6423: LD_INT 4
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PPUSH
6434: CALL_OW 69
6438: IFFALSE 6455
// begin Wait ( 1 1$25 ) ;
6440: LD_INT 2975
6442: PPUSH
6443: CALL_OW 67
// more_troops := true ;
6447: LD_ADDR_VAR 0 3
6451: PUSH
6452: LD_INT 1
6454: ST_TO_ADDR
// end ; if more_troops then
6455: LD_VAR 0 3
6459: IFFALSE 6655
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6461: LD_ADDR_VAR 0 8
6465: PUSH
6466: LD_INT 4
6468: PUSH
6469: LD_INT 5
6471: PUSH
6472: LD_INT 6
6474: PUSH
6475: LD_INT 7
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: LIST
6482: LIST
6483: PUSH
6484: LD_OWVAR 67
6488: ARRAY
6489: PPUSH
6490: LD_VAR 0 4
6494: PPUSH
6495: LD_INT 14
6497: PPUSH
6498: CALL 6100 0 3
6502: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6503: LD_ADDR_VAR 0 7
6507: PUSH
6508: LD_INT 2
6510: PPUSH
6511: LD_INT 3
6513: PPUSH
6514: LD_INT 22
6516: PPUSH
6517: LD_INT 1
6519: PPUSH
6520: LD_INT 1
6522: PPUSH
6523: LD_INT 42
6525: PUSH
6526: LD_INT 42
6528: PUSH
6529: LD_INT 43
6531: PUSH
6532: LD_INT 44
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: PUSH
6541: LD_OWVAR 67
6545: ARRAY
6546: PPUSH
6547: LD_INT 90
6549: PPUSH
6550: CALL 431 0 7
6554: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6555: LD_VAR 0 7
6559: PPUSH
6560: LD_INT 4
6562: PPUSH
6563: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6567: LD_VAR 0 7
6571: PPUSH
6572: LD_INT 13
6574: PPUSH
6575: LD_INT 0
6577: PPUSH
6578: CALL_OW 49
// uc_side := 2 ;
6582: LD_ADDR_OWVAR 20
6586: PUSH
6587: LD_INT 2
6589: ST_TO_ADDR
// uc_nation := 2 ;
6590: LD_ADDR_OWVAR 21
6594: PUSH
6595: LD_INT 2
6597: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6598: LD_INT 0
6600: PPUSH
6601: LD_INT 1
6603: PPUSH
6604: LD_VAR 0 4
6608: PPUSH
6609: CALL_OW 380
// un := CreateHuman ;
6613: LD_ADDR_VAR 0 6
6617: PUSH
6618: CALL_OW 44
6622: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6623: LD_VAR 0 6
6627: PPUSH
6628: LD_VAR 0 7
6632: PPUSH
6633: CALL_OW 52
// force := force ^ un ;
6637: LD_ADDR_VAR 0 8
6641: PUSH
6642: LD_VAR 0 8
6646: PUSH
6647: LD_VAR 0 6
6651: ADD
6652: ST_TO_ADDR
// end else
6653: GO 6697
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6655: LD_ADDR_VAR 0 8
6659: PUSH
6660: LD_INT 3
6662: PUSH
6663: LD_INT 4
6665: PUSH
6666: LD_INT 5
6668: PUSH
6669: LD_INT 6
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: PUSH
6678: LD_OWVAR 67
6682: ARRAY
6683: PPUSH
6684: LD_VAR 0 4
6688: PPUSH
6689: LD_INT 14
6691: PPUSH
6692: CALL 6100 0 3
6696: ST_TO_ADDR
// end ; if force then
6697: LD_VAR 0 8
6701: IFFALSE 6713
// ar_forces := force ;
6703: LD_ADDR_EXP 28
6707: PUSH
6708: LD_VAR 0 8
6712: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6713: LD_INT 35
6715: PPUSH
6716: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6720: LD_INT 22
6722: PUSH
6723: LD_INT 2
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PUSH
6730: LD_INT 21
6732: PUSH
6733: LD_INT 1
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: PPUSH
6744: CALL_OW 69
6748: PUSH
6749: LD_INT 0
6751: EQUAL
6752: IFFALSE 6713
// Wait ( timer ) ;
6754: LD_VAR 0 2
6758: PPUSH
6759: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
6763: LD_ADDR_VAR 0 8
6767: PUSH
6768: LD_INT 4
6770: PUSH
6771: LD_INT 5
6773: PUSH
6774: LD_INT 6
6776: PUSH
6777: LD_INT 7
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: PUSH
6786: LD_OWVAR 67
6790: ARRAY
6791: PPUSH
6792: LD_VAR 0 4
6796: PPUSH
6797: LD_INT 13
6799: PUSH
6800: LD_INT 14
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: LD_INT 1
6809: PPUSH
6810: LD_INT 2
6812: PPUSH
6813: CALL_OW 12
6817: ARRAY
6818: PPUSH
6819: CALL 6100 0 3
6823: ST_TO_ADDR
// if Difficulty > 1 and Delta then
6824: LD_OWVAR 67
6828: PUSH
6829: LD_INT 1
6831: GREATER
6832: PUSH
6833: LD_EXP 6
6837: AND
6838: IFFALSE 6917
// begin uc_side := 2 ;
6840: LD_ADDR_OWVAR 20
6844: PUSH
6845: LD_INT 2
6847: ST_TO_ADDR
// uc_nation := 2 ;
6848: LD_ADDR_OWVAR 21
6852: PUSH
6853: LD_INT 2
6855: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
6856: LD_INT 0
6858: PPUSH
6859: LD_INT 2
6861: PPUSH
6862: LD_VAR 0 4
6866: PPUSH
6867: CALL_OW 380
// eng := CreateHuman ;
6871: LD_ADDR_VAR 0 5
6875: PUSH
6876: CALL_OW 44
6880: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
6881: LD_VAR 0 5
6885: PPUSH
6886: LD_INT 13
6888: PPUSH
6889: LD_INT 0
6891: PPUSH
6892: CALL_OW 49
// Wait ( 3 ) ;
6896: LD_INT 3
6898: PPUSH
6899: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
6903: LD_VAR 0 5
6907: PPUSH
6908: LD_EXP 6
6912: PPUSH
6913: CALL_OW 180
// end ; if force then
6917: LD_VAR 0 8
6921: IFFALSE 6933
// ar_forces := force ;
6923: LD_ADDR_EXP 28
6927: PUSH
6928: LD_VAR 0 8
6932: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6933: LD_INT 35
6935: PPUSH
6936: CALL_OW 67
// if eng then
6940: LD_VAR 0 5
6944: IFFALSE 6998
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
6946: LD_EXP 6
6950: PPUSH
6951: CALL_OW 255
6955: PUSH
6956: LD_INT 2
6958: EQUAL
6959: PUSH
6960: LD_VAR 0 5
6964: PPUSH
6965: CALL_OW 302
6969: AND
6970: PUSH
6971: LD_VAR 0 5
6975: PPUSH
6976: CALL_OW 310
6980: NOT
6981: AND
6982: IFFALSE 6998
// ComEnterUnit ( eng , Delta ) ;
6984: LD_VAR 0 5
6988: PPUSH
6989: LD_EXP 6
6993: PPUSH
6994: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6998: LD_INT 22
7000: PUSH
7001: LD_INT 2
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 21
7010: PUSH
7011: LD_INT 1
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PPUSH
7022: CALL_OW 69
7026: PUSH
7027: LD_INT 0
7029: EQUAL
7030: IFFALSE 6933
// Wait ( 2 2$00 ) ;
7032: LD_INT 4200
7034: PPUSH
7035: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
7039: LD_ADDR_EXP 29
7043: PUSH
7044: LD_INT 1
7046: PUSH
7047: LD_INT 2
7049: PUSH
7050: LD_INT 2
7052: PUSH
7053: LD_INT 2
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: PUSH
7062: LD_OWVAR 67
7066: ARRAY
7067: PPUSH
7068: LD_VAR 0 4
7072: PPUSH
7073: LD_INT 13
7075: PPUSH
7076: CALL 6100 0 3
7080: ST_TO_ADDR
// Wait ( timer * 2 ) ;
7081: LD_VAR 0 2
7085: PUSH
7086: LD_INT 2
7088: MUL
7089: PPUSH
7090: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
7094: LD_ADDR_EXP 28
7098: PUSH
7099: LD_INT 5
7101: PUSH
7102: LD_INT 6
7104: PUSH
7105: LD_INT 7
7107: PUSH
7108: LD_INT 8
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: PUSH
7117: LD_OWVAR 67
7121: ARRAY
7122: PPUSH
7123: LD_VAR 0 4
7127: PPUSH
7128: LD_INT 13
7130: PPUSH
7131: CALL 6100 0 3
7135: PUSH
7136: LD_INT 3
7138: PUSH
7139: LD_INT 4
7141: PUSH
7142: LD_INT 4
7144: PUSH
7145: LD_INT 4
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: PUSH
7154: LD_OWVAR 67
7158: ARRAY
7159: PPUSH
7160: LD_VAR 0 4
7164: PPUSH
7165: LD_INT 14
7167: PPUSH
7168: CALL 6100 0 3
7172: ADD
7173: ST_TO_ADDR
// end ;
7174: PPOPN 8
7176: END
// every 0 0$03 trigger ar_forces do var i , target ;
7177: LD_EXP 28
7181: IFFALSE 7379
7183: GO 7185
7185: DISABLE
7186: LD_INT 0
7188: PPUSH
7189: PPUSH
// begin enable ;
7190: ENABLE
// if not ar_forces then
7191: LD_EXP 28
7195: NOT
7196: IFFALSE 7200
// exit ;
7198: GO 7379
// if Delta then
7200: LD_EXP 6
7204: IFFALSE 7218
// target := Delta else
7206: LD_ADDR_VAR 0 2
7210: PUSH
7211: LD_EXP 6
7215: ST_TO_ADDR
7216: GO 7228
// target := JMM ;
7218: LD_ADDR_VAR 0 2
7222: PUSH
7223: LD_EXP 16
7227: ST_TO_ADDR
// for i in ar_forces do
7228: LD_ADDR_VAR 0 1
7232: PUSH
7233: LD_EXP 28
7237: PUSH
7238: FOR_IN
7239: IFFALSE 7377
// begin if i in FilterAllUnits ( [ f_driving ] ) then
7241: LD_VAR 0 1
7245: PUSH
7246: LD_INT 55
7248: PUSH
7249: EMPTY
7250: LIST
7251: PPUSH
7252: CALL_OW 69
7256: IN
7257: IFFALSE 7300
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
7259: LD_VAR 0 1
7263: PPUSH
7264: LD_INT 22
7266: PUSH
7267: LD_INT 1
7269: PUSH
7270: EMPTY
7271: LIST
7272: LIST
7273: PPUSH
7274: CALL_OW 69
7278: PPUSH
7279: LD_VAR 0 1
7283: PPUSH
7284: CALL_OW 310
7288: PPUSH
7289: CALL_OW 74
7293: PPUSH
7294: CALL_OW 115
7298: GO 7375
// if GetDistUnits ( i , target ) > 30 then
7300: LD_VAR 0 1
7304: PPUSH
7305: LD_VAR 0 2
7309: PPUSH
7310: CALL_OW 296
7314: PUSH
7315: LD_INT 30
7317: GREATER
7318: IFFALSE 7351
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
7320: LD_VAR 0 1
7324: PPUSH
7325: LD_VAR 0 2
7329: PPUSH
7330: CALL_OW 250
7334: PPUSH
7335: LD_VAR 0 2
7339: PPUSH
7340: CALL_OW 251
7344: PPUSH
7345: CALL_OW 114
7349: GO 7375
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
7351: LD_VAR 0 1
7355: PPUSH
7356: LD_INT 81
7358: PUSH
7359: LD_INT 2
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: PPUSH
7366: CALL_OW 69
7370: PPUSH
7371: CALL 736 0 2
// end ;
7375: GO 7238
7377: POP
7378: POP
// end ;
7379: PPOPN 2
7381: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
7382: LD_EXP 29
7386: IFFALSE 7546
7388: GO 7390
7390: DISABLE
7391: LD_INT 0
7393: PPUSH
7394: PPUSH
7395: PPUSH
// begin enable ;
7396: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
7397: LD_ADDR_VAR 0 1
7401: PUSH
7402: LD_INT 22
7404: PUSH
7405: LD_INT 0
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: LD_INT 25
7414: PUSH
7415: LD_INT 12
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PPUSH
7426: CALL_OW 69
7430: ST_TO_ADDR
// if not filter then
7431: LD_VAR 0 1
7435: NOT
7436: IFFALSE 7463
// begin ar_forces := ar_forces ^ ap_killers ;
7438: LD_ADDR_EXP 28
7442: PUSH
7443: LD_EXP 28
7447: PUSH
7448: LD_EXP 29
7452: ADD
7453: ST_TO_ADDR
// ap_killers := [ ] ;
7454: LD_ADDR_EXP 29
7458: PUSH
7459: EMPTY
7460: ST_TO_ADDR
// exit ;
7461: GO 7546
// end ; for i in ap_killers do
7463: LD_ADDR_VAR 0 2
7467: PUSH
7468: LD_EXP 29
7472: PUSH
7473: FOR_IN
7474: IFFALSE 7544
// begin if not IsOk ( i ) then
7476: LD_VAR 0 2
7480: PPUSH
7481: CALL_OW 302
7485: NOT
7486: IFFALSE 7490
// continue ;
7488: GO 7473
// if not HasTask ( i ) then
7490: LD_VAR 0 2
7494: PPUSH
7495: CALL_OW 314
7499: NOT
7500: IFFALSE 7522
// target := NearestUnitToUnit ( filter , i ) ;
7502: LD_ADDR_VAR 0 3
7506: PUSH
7507: LD_VAR 0 1
7511: PPUSH
7512: LD_VAR 0 2
7516: PPUSH
7517: CALL_OW 74
7521: ST_TO_ADDR
// if target then
7522: LD_VAR 0 3
7526: IFFALSE 7542
// ComAttackUnit ( i , target ) ;
7528: LD_VAR 0 2
7532: PPUSH
7533: LD_VAR 0 3
7537: PPUSH
7538: CALL_OW 115
// end ;
7542: GO 7473
7544: POP
7545: POP
// end ; end_of_file
7546: PPOPN 3
7548: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7549: LD_EXP 6
7553: IFFALSE 7689
7555: GO 7557
7557: DISABLE
7558: LD_INT 0
7560: PPUSH
7561: PPUSH
7562: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
7563: LD_ADDR_VAR 0 2
7567: PUSH
7568: LD_INT 300
7570: PUSH
7571: LD_INT 250
7573: PUSH
7574: LD_INT 220
7576: PUSH
7577: LD_INT 210
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: PUSH
7586: LD_OWVAR 67
7590: ARRAY
7591: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
7592: LD_INT 1
7594: PPUSH
7595: LD_INT 3
7597: PPUSH
7598: CALL_OW 12
7602: PPUSH
7603: LD_INT 7
7605: PPUSH
7606: LD_INT 1
7608: PPUSH
7609: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
7613: LD_INT 3150
7615: PPUSH
7616: LD_INT 4900
7618: PPUSH
7619: CALL_OW 12
7623: PPUSH
7624: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
7628: LD_ADDR_VAR 0 3
7632: PUSH
7633: LD_INT 1
7635: PPUSH
7636: LD_INT 5
7638: PPUSH
7639: CALL_OW 12
7643: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
7644: LD_VAR 0 3
7648: PPUSH
7649: LD_INT 7
7651: PPUSH
7652: LD_INT 1
7654: PPUSH
7655: CALL_OW 55
// counter := counter - cr * 10 ;
7659: LD_ADDR_VAR 0 2
7663: PUSH
7664: LD_VAR 0 2
7668: PUSH
7669: LD_VAR 0 3
7673: PUSH
7674: LD_INT 10
7676: MUL
7677: MINUS
7678: ST_TO_ADDR
// until counter <= 0 ;
7679: LD_VAR 0 2
7683: PUSH
7684: LD_INT 0
7686: LESSEQUAL
7687: IFFALSE 7613
// end ;
7689: PPOPN 3
7691: END
// every 0 0$03 trigger not Delta do var i ;
7692: LD_EXP 6
7696: NOT
7697: IFFALSE 7767
7699: GO 7701
7701: DISABLE
7702: LD_INT 0
7704: PPUSH
// begin for i = 1 to 5 - Difficulty do
7705: LD_ADDR_VAR 0 1
7709: PUSH
7710: DOUBLE
7711: LD_INT 1
7713: DEC
7714: ST_TO_ADDR
7715: LD_INT 5
7717: PUSH
7718: LD_OWVAR 67
7722: MINUS
7723: PUSH
7724: FOR_TO
7725: IFFALSE 7765
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
7727: LD_INT 2
7729: PPUSH
7730: LD_INT 5
7732: PPUSH
7733: CALL_OW 12
7737: PPUSH
7738: LD_INT 8
7740: PPUSH
7741: LD_INT 1
7743: PPUSH
7744: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
7748: LD_INT 560
7750: PPUSH
7751: LD_INT 1365
7753: PPUSH
7754: CALL_OW 12
7758: PPUSH
7759: CALL_OW 67
// end ;
7763: GO 7724
7765: POP
7766: POP
// end ;
7767: PPOPN 1
7769: END
// every 3 3$00 trigger tick < 15 15$00 do
7770: LD_OWVAR 1
7774: PUSH
7775: LD_INT 31500
7777: LESS
7778: IFFALSE 7838
7780: GO 7782
7782: DISABLE
// begin enable ;
7783: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
7784: LD_INT 1
7786: PPUSH
7787: LD_INT 3
7789: PPUSH
7790: CALL_OW 12
7794: PPUSH
7795: LD_INT 1
7797: PPUSH
7798: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
7802: LD_INT 1330
7804: PPUSH
7805: LD_INT 2065
7807: PPUSH
7808: CALL_OW 12
7812: PPUSH
7813: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
7817: LD_INT 1
7819: PPUSH
7820: LD_INT 4
7822: PPUSH
7823: CALL_OW 12
7827: PPUSH
7828: LD_INT 15
7830: PPUSH
7831: LD_INT 1
7833: PPUSH
7834: CALL_OW 55
// end ; end_of_file
7838: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7839: LD_VAR 0 1
7843: PPUSH
7844: CALL 23972 0 1
// if un = JMM then
7848: LD_VAR 0 1
7852: PUSH
7853: LD_EXP 16
7857: EQUAL
7858: IFFALSE 7867
// YouLost ( JMM ) ;
7860: LD_STRING JMM
7862: PPUSH
7863: CALL_OW 104
// if un = Delta then
7867: LD_VAR 0 1
7871: PUSH
7872: LD_EXP 6
7876: EQUAL
7877: IFFALSE 7900
// begin Delta := 0 ;
7879: LD_ADDR_EXP 6
7883: PUSH
7884: LD_INT 0
7886: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
7887: LD_INT 0
7889: PPUSH
7890: LD_INT 1
7892: PPUSH
7893: LD_INT 1
7895: PPUSH
7896: CALL_OW 324
// end ; if un in ar_forces then
7900: LD_VAR 0 1
7904: PUSH
7905: LD_EXP 28
7909: IN
7910: IFFALSE 7928
// ar_forces := ar_forces diff un ;
7912: LD_ADDR_EXP 28
7916: PUSH
7917: LD_EXP 28
7921: PUSH
7922: LD_VAR 0 1
7926: DIFF
7927: ST_TO_ADDR
// if un in ap_killers then
7928: LD_VAR 0 1
7932: PUSH
7933: LD_EXP 29
7937: IN
7938: IFFALSE 7956
// ap_killers := ap_killers diff un ;
7940: LD_ADDR_EXP 29
7944: PUSH
7945: LD_EXP 29
7949: PUSH
7950: LD_VAR 0 1
7954: DIFF
7955: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
7956: LD_VAR 0 1
7960: PUSH
7961: LD_INT 2
7963: PUSH
7964: LD_INT 25
7966: PUSH
7967: LD_INT 12
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PUSH
7974: LD_INT 25
7976: PUSH
7977: LD_INT 16
7979: PUSH
7980: EMPTY
7981: LIST
7982: LIST
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: LIST
7988: PPUSH
7989: CALL_OW 69
7993: IN
7994: IFFALSE 8010
// apeKillCounter := apeKillCounter + 1 ;
7996: LD_ADDR_EXP 15
8000: PUSH
8001: LD_EXP 15
8005: PUSH
8006: LD_INT 1
8008: PLUS
8009: ST_TO_ADDR
// end ;
8010: PPOPN 1
8012: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8013: LD_VAR 0 1
8017: PPUSH
8018: LD_VAR 0 2
8022: PPUSH
8023: CALL 24092 0 2
// end ;
8027: PPOPN 2
8029: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 2 and not arab_spotted then
8030: LD_VAR 0 1
8034: PUSH
8035: LD_INT 1
8037: EQUAL
8038: PUSH
8039: LD_VAR 0 2
8043: PUSH
8044: LD_INT 2
8046: EQUAL
8047: AND
8048: PUSH
8049: LD_EXP 13
8053: NOT
8054: AND
8055: IFFALSE 8065
// arab_spotted := true ;
8057: LD_ADDR_EXP 13
8061: PUSH
8062: LD_INT 1
8064: ST_TO_ADDR
// end ;
8065: PPOPN 2
8067: END
// on EndTheMissionRaised ( p ) do begin end_the_mission_allowed := false ;
8068: LD_ADDR_OWVAR 57
8072: PUSH
8073: LD_INT 0
8075: ST_TO_ADDR
// end_mission := true ;
8076: LD_ADDR_EXP 14
8080: PUSH
8081: LD_INT 1
8083: ST_TO_ADDR
// end ;
8084: PPOPN 1
8086: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
8087: LD_VAR 0 2
8091: PPUSH
8092: CALL_OW 255
8096: PUSH
8097: LD_INT 1
8099: EQUAL
8100: IFFALSE 8116
// apeman_counter := apeman_counter + 1 ;
8102: LD_ADDR_EXP 12
8106: PUSH
8107: LD_EXP 12
8111: PUSH
8112: LD_INT 1
8114: PLUS
8115: ST_TO_ADDR
// if not first_apeman_tamed then
8116: LD_EXP 8
8120: NOT
8121: IFFALSE 8320
// begin first_apeman_tamed := true ;
8123: LD_ADDR_EXP 8
8127: PUSH
8128: LD_INT 1
8130: ST_TO_ADDR
// if sci = Gladstone then
8131: LD_VAR 0 2
8135: PUSH
8136: LD_EXP 17
8140: EQUAL
8141: IFFALSE 8155
// Say ( Gladstone , D7b-Glad-1 ) ;
8143: LD_EXP 17
8147: PPUSH
8148: LD_STRING D7b-Glad-1
8150: PPUSH
8151: CALL_OW 88
// if sci = Denis then
8155: LD_VAR 0 2
8159: PUSH
8160: LD_EXP 19
8164: EQUAL
8165: IFFALSE 8179
// Say ( Denis , D7a-Den-1 ) ;
8167: LD_EXP 19
8171: PPUSH
8172: LD_STRING D7a-Den-1
8174: PPUSH
8175: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
8179: LD_VAR 0 2
8183: PUSH
8184: LD_EXP 16
8188: PUSH
8189: LD_EXP 17
8193: PUSH
8194: LD_EXP 19
8198: PUSH
8199: LD_EXP 22
8203: PUSH
8204: LD_EXP 23
8208: PUSH
8209: LD_EXP 24
8213: PUSH
8214: LD_EXP 25
8218: PUSH
8219: LD_EXP 21
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: IN
8234: NOT
8235: IFFALSE 8278
// begin if GetSex ( sci ) = sex_male then
8237: LD_VAR 0 2
8241: PPUSH
8242: CALL_OW 258
8246: PUSH
8247: LD_INT 1
8249: EQUAL
8250: IFFALSE 8266
// Say ( sci , D7c-Sci1-1 ) else
8252: LD_VAR 0 2
8256: PPUSH
8257: LD_STRING D7c-Sci1-1
8259: PPUSH
8260: CALL_OW 88
8264: GO 8278
// Say ( sci , D7c-FSci1-1 ) ;
8266: LD_VAR 0 2
8270: PPUSH
8271: LD_STRING D7c-FSci1-1
8273: PPUSH
8274: CALL_OW 88
// end ; if sci <> Gladstone then
8278: LD_VAR 0 2
8282: PUSH
8283: LD_EXP 17
8287: NONEQUAL
8288: IFFALSE 8302
// Say ( Gladstone , D7c-Glad-1 ) ;
8290: LD_EXP 17
8294: PPUSH
8295: LD_STRING D7c-Glad-1
8297: PPUSH
8298: CALL_OW 88
// if Lisa then
8302: LD_EXP 22
8306: IFFALSE 8320
// Say ( Lisa , D8-Lisa-1 ) ;
8308: LD_EXP 22
8312: PPUSH
8313: LD_STRING D8-Lisa-1
8315: PPUSH
8316: CALL_OW 88
// end ; end ; end_of_file end_of_file
8320: PPOPN 2
8322: END
// every 0 0$1 do
8323: GO 8325
8325: DISABLE
// begin enable ;
8326: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8327: LD_STRING updateTimer(
8329: PUSH
8330: LD_OWVAR 1
8334: STR
8335: PUSH
8336: LD_STRING );
8338: STR
8339: PPUSH
8340: CALL_OW 559
// end ;
8344: END
// export function SOS_MapStart ( ) ; begin
8345: LD_INT 0
8347: PPUSH
// if streamModeActive then
8348: LD_EXP 30
8352: IFFALSE 8361
// DefineStreamItems ( true ) ;
8354: LD_INT 1
8356: PPUSH
8357: CALL 10015 0 1
// UpdateFactoryWaypoints ( ) ;
8361: CALL 22876 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8365: CALL 23133 0 0
// end ;
8369: LD_VAR 0 1
8373: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8374: LD_INT 0
8376: PPUSH
// if p2 = hack_mode then
8377: LD_VAR 0 2
8381: PUSH
8382: LD_INT 100
8384: EQUAL
8385: IFFALSE 9388
// begin if not StreamModeActive then
8387: LD_EXP 30
8391: NOT
8392: IFFALSE 8402
// StreamModeActive := true ;
8394: LD_ADDR_EXP 30
8398: PUSH
8399: LD_INT 1
8401: ST_TO_ADDR
// if p3 = 0 then
8402: LD_VAR 0 3
8406: PUSH
8407: LD_INT 0
8409: EQUAL
8410: IFFALSE 8416
// InitStreamMode ;
8412: CALL 9551 0 0
// if p3 = 1 then
8416: LD_VAR 0 3
8420: PUSH
8421: LD_INT 1
8423: EQUAL
8424: IFFALSE 8434
// sRocket := true ;
8426: LD_ADDR_EXP 35
8430: PUSH
8431: LD_INT 1
8433: ST_TO_ADDR
// if p3 = 2 then
8434: LD_VAR 0 3
8438: PUSH
8439: LD_INT 2
8441: EQUAL
8442: IFFALSE 8452
// sSpeed := true ;
8444: LD_ADDR_EXP 34
8448: PUSH
8449: LD_INT 1
8451: ST_TO_ADDR
// if p3 = 3 then
8452: LD_VAR 0 3
8456: PUSH
8457: LD_INT 3
8459: EQUAL
8460: IFFALSE 8470
// sEngine := true ;
8462: LD_ADDR_EXP 36
8466: PUSH
8467: LD_INT 1
8469: ST_TO_ADDR
// if p3 = 4 then
8470: LD_VAR 0 3
8474: PUSH
8475: LD_INT 4
8477: EQUAL
8478: IFFALSE 8488
// sSpec := true ;
8480: LD_ADDR_EXP 33
8484: PUSH
8485: LD_INT 1
8487: ST_TO_ADDR
// if p3 = 5 then
8488: LD_VAR 0 3
8492: PUSH
8493: LD_INT 5
8495: EQUAL
8496: IFFALSE 8506
// sLevel := true ;
8498: LD_ADDR_EXP 37
8502: PUSH
8503: LD_INT 1
8505: ST_TO_ADDR
// if p3 = 6 then
8506: LD_VAR 0 3
8510: PUSH
8511: LD_INT 6
8513: EQUAL
8514: IFFALSE 8524
// sArmoury := true ;
8516: LD_ADDR_EXP 38
8520: PUSH
8521: LD_INT 1
8523: ST_TO_ADDR
// if p3 = 7 then
8524: LD_VAR 0 3
8528: PUSH
8529: LD_INT 7
8531: EQUAL
8532: IFFALSE 8542
// sRadar := true ;
8534: LD_ADDR_EXP 39
8538: PUSH
8539: LD_INT 1
8541: ST_TO_ADDR
// if p3 = 8 then
8542: LD_VAR 0 3
8546: PUSH
8547: LD_INT 8
8549: EQUAL
8550: IFFALSE 8560
// sBunker := true ;
8552: LD_ADDR_EXP 40
8556: PUSH
8557: LD_INT 1
8559: ST_TO_ADDR
// if p3 = 9 then
8560: LD_VAR 0 3
8564: PUSH
8565: LD_INT 9
8567: EQUAL
8568: IFFALSE 8578
// sHack := true ;
8570: LD_ADDR_EXP 41
8574: PUSH
8575: LD_INT 1
8577: ST_TO_ADDR
// if p3 = 10 then
8578: LD_VAR 0 3
8582: PUSH
8583: LD_INT 10
8585: EQUAL
8586: IFFALSE 8596
// sFire := true ;
8588: LD_ADDR_EXP 42
8592: PUSH
8593: LD_INT 1
8595: ST_TO_ADDR
// if p3 = 11 then
8596: LD_VAR 0 3
8600: PUSH
8601: LD_INT 11
8603: EQUAL
8604: IFFALSE 8614
// sRefresh := true ;
8606: LD_ADDR_EXP 43
8610: PUSH
8611: LD_INT 1
8613: ST_TO_ADDR
// if p3 = 12 then
8614: LD_VAR 0 3
8618: PUSH
8619: LD_INT 12
8621: EQUAL
8622: IFFALSE 8632
// sExp := true ;
8624: LD_ADDR_EXP 44
8628: PUSH
8629: LD_INT 1
8631: ST_TO_ADDR
// if p3 = 13 then
8632: LD_VAR 0 3
8636: PUSH
8637: LD_INT 13
8639: EQUAL
8640: IFFALSE 8650
// sDepot := true ;
8642: LD_ADDR_EXP 45
8646: PUSH
8647: LD_INT 1
8649: ST_TO_ADDR
// if p3 = 14 then
8650: LD_VAR 0 3
8654: PUSH
8655: LD_INT 14
8657: EQUAL
8658: IFFALSE 8668
// sFlag := true ;
8660: LD_ADDR_EXP 46
8664: PUSH
8665: LD_INT 1
8667: ST_TO_ADDR
// if p3 = 15 then
8668: LD_VAR 0 3
8672: PUSH
8673: LD_INT 15
8675: EQUAL
8676: IFFALSE 8686
// sKamikadze := true ;
8678: LD_ADDR_EXP 54
8682: PUSH
8683: LD_INT 1
8685: ST_TO_ADDR
// if p3 = 16 then
8686: LD_VAR 0 3
8690: PUSH
8691: LD_INT 16
8693: EQUAL
8694: IFFALSE 8704
// sTroll := true ;
8696: LD_ADDR_EXP 55
8700: PUSH
8701: LD_INT 1
8703: ST_TO_ADDR
// if p3 = 17 then
8704: LD_VAR 0 3
8708: PUSH
8709: LD_INT 17
8711: EQUAL
8712: IFFALSE 8722
// sSlow := true ;
8714: LD_ADDR_EXP 56
8718: PUSH
8719: LD_INT 1
8721: ST_TO_ADDR
// if p3 = 18 then
8722: LD_VAR 0 3
8726: PUSH
8727: LD_INT 18
8729: EQUAL
8730: IFFALSE 8740
// sLack := true ;
8732: LD_ADDR_EXP 57
8736: PUSH
8737: LD_INT 1
8739: ST_TO_ADDR
// if p3 = 19 then
8740: LD_VAR 0 3
8744: PUSH
8745: LD_INT 19
8747: EQUAL
8748: IFFALSE 8758
// sTank := true ;
8750: LD_ADDR_EXP 59
8754: PUSH
8755: LD_INT 1
8757: ST_TO_ADDR
// if p3 = 20 then
8758: LD_VAR 0 3
8762: PUSH
8763: LD_INT 20
8765: EQUAL
8766: IFFALSE 8776
// sRemote := true ;
8768: LD_ADDR_EXP 60
8772: PUSH
8773: LD_INT 1
8775: ST_TO_ADDR
// if p3 = 21 then
8776: LD_VAR 0 3
8780: PUSH
8781: LD_INT 21
8783: EQUAL
8784: IFFALSE 8794
// sPowell := true ;
8786: LD_ADDR_EXP 61
8790: PUSH
8791: LD_INT 1
8793: ST_TO_ADDR
// if p3 = 22 then
8794: LD_VAR 0 3
8798: PUSH
8799: LD_INT 22
8801: EQUAL
8802: IFFALSE 8812
// sTeleport := true ;
8804: LD_ADDR_EXP 64
8808: PUSH
8809: LD_INT 1
8811: ST_TO_ADDR
// if p3 = 23 then
8812: LD_VAR 0 3
8816: PUSH
8817: LD_INT 23
8819: EQUAL
8820: IFFALSE 8830
// sOilTower := true ;
8822: LD_ADDR_EXP 66
8826: PUSH
8827: LD_INT 1
8829: ST_TO_ADDR
// if p3 = 24 then
8830: LD_VAR 0 3
8834: PUSH
8835: LD_INT 24
8837: EQUAL
8838: IFFALSE 8848
// sShovel := true ;
8840: LD_ADDR_EXP 67
8844: PUSH
8845: LD_INT 1
8847: ST_TO_ADDR
// if p3 = 25 then
8848: LD_VAR 0 3
8852: PUSH
8853: LD_INT 25
8855: EQUAL
8856: IFFALSE 8866
// sSheik := true ;
8858: LD_ADDR_EXP 68
8862: PUSH
8863: LD_INT 1
8865: ST_TO_ADDR
// if p3 = 26 then
8866: LD_VAR 0 3
8870: PUSH
8871: LD_INT 26
8873: EQUAL
8874: IFFALSE 8884
// sEarthquake := true ;
8876: LD_ADDR_EXP 70
8880: PUSH
8881: LD_INT 1
8883: ST_TO_ADDR
// if p3 = 27 then
8884: LD_VAR 0 3
8888: PUSH
8889: LD_INT 27
8891: EQUAL
8892: IFFALSE 8902
// sAI := true ;
8894: LD_ADDR_EXP 71
8898: PUSH
8899: LD_INT 1
8901: ST_TO_ADDR
// if p3 = 28 then
8902: LD_VAR 0 3
8906: PUSH
8907: LD_INT 28
8909: EQUAL
8910: IFFALSE 8920
// sCargo := true ;
8912: LD_ADDR_EXP 74
8916: PUSH
8917: LD_INT 1
8919: ST_TO_ADDR
// if p3 = 29 then
8920: LD_VAR 0 3
8924: PUSH
8925: LD_INT 29
8927: EQUAL
8928: IFFALSE 8938
// sDLaser := true ;
8930: LD_ADDR_EXP 75
8934: PUSH
8935: LD_INT 1
8937: ST_TO_ADDR
// if p3 = 30 then
8938: LD_VAR 0 3
8942: PUSH
8943: LD_INT 30
8945: EQUAL
8946: IFFALSE 8956
// sExchange := true ;
8948: LD_ADDR_EXP 76
8952: PUSH
8953: LD_INT 1
8955: ST_TO_ADDR
// if p3 = 31 then
8956: LD_VAR 0 3
8960: PUSH
8961: LD_INT 31
8963: EQUAL
8964: IFFALSE 8974
// sFac := true ;
8966: LD_ADDR_EXP 77
8970: PUSH
8971: LD_INT 1
8973: ST_TO_ADDR
// if p3 = 32 then
8974: LD_VAR 0 3
8978: PUSH
8979: LD_INT 32
8981: EQUAL
8982: IFFALSE 8992
// sPower := true ;
8984: LD_ADDR_EXP 78
8988: PUSH
8989: LD_INT 1
8991: ST_TO_ADDR
// if p3 = 33 then
8992: LD_VAR 0 3
8996: PUSH
8997: LD_INT 33
8999: EQUAL
9000: IFFALSE 9010
// sRandom := true ;
9002: LD_ADDR_EXP 79
9006: PUSH
9007: LD_INT 1
9009: ST_TO_ADDR
// if p3 = 34 then
9010: LD_VAR 0 3
9014: PUSH
9015: LD_INT 34
9017: EQUAL
9018: IFFALSE 9028
// sShield := true ;
9020: LD_ADDR_EXP 80
9024: PUSH
9025: LD_INT 1
9027: ST_TO_ADDR
// if p3 = 35 then
9028: LD_VAR 0 3
9032: PUSH
9033: LD_INT 35
9035: EQUAL
9036: IFFALSE 9046
// sTime := true ;
9038: LD_ADDR_EXP 81
9042: PUSH
9043: LD_INT 1
9045: ST_TO_ADDR
// if p3 = 36 then
9046: LD_VAR 0 3
9050: PUSH
9051: LD_INT 36
9053: EQUAL
9054: IFFALSE 9064
// sTools := true ;
9056: LD_ADDR_EXP 82
9060: PUSH
9061: LD_INT 1
9063: ST_TO_ADDR
// if p3 = 101 then
9064: LD_VAR 0 3
9068: PUSH
9069: LD_INT 101
9071: EQUAL
9072: IFFALSE 9082
// sSold := true ;
9074: LD_ADDR_EXP 47
9078: PUSH
9079: LD_INT 1
9081: ST_TO_ADDR
// if p3 = 102 then
9082: LD_VAR 0 3
9086: PUSH
9087: LD_INT 102
9089: EQUAL
9090: IFFALSE 9100
// sDiff := true ;
9092: LD_ADDR_EXP 48
9096: PUSH
9097: LD_INT 1
9099: ST_TO_ADDR
// if p3 = 103 then
9100: LD_VAR 0 3
9104: PUSH
9105: LD_INT 103
9107: EQUAL
9108: IFFALSE 9118
// sFog := true ;
9110: LD_ADDR_EXP 51
9114: PUSH
9115: LD_INT 1
9117: ST_TO_ADDR
// if p3 = 104 then
9118: LD_VAR 0 3
9122: PUSH
9123: LD_INT 104
9125: EQUAL
9126: IFFALSE 9136
// sReset := true ;
9128: LD_ADDR_EXP 52
9132: PUSH
9133: LD_INT 1
9135: ST_TO_ADDR
// if p3 = 105 then
9136: LD_VAR 0 3
9140: PUSH
9141: LD_INT 105
9143: EQUAL
9144: IFFALSE 9154
// sSun := true ;
9146: LD_ADDR_EXP 53
9150: PUSH
9151: LD_INT 1
9153: ST_TO_ADDR
// if p3 = 106 then
9154: LD_VAR 0 3
9158: PUSH
9159: LD_INT 106
9161: EQUAL
9162: IFFALSE 9172
// sTiger := true ;
9164: LD_ADDR_EXP 49
9168: PUSH
9169: LD_INT 1
9171: ST_TO_ADDR
// if p3 = 107 then
9172: LD_VAR 0 3
9176: PUSH
9177: LD_INT 107
9179: EQUAL
9180: IFFALSE 9190
// sBomb := true ;
9182: LD_ADDR_EXP 50
9186: PUSH
9187: LD_INT 1
9189: ST_TO_ADDR
// if p3 = 108 then
9190: LD_VAR 0 3
9194: PUSH
9195: LD_INT 108
9197: EQUAL
9198: IFFALSE 9208
// sWound := true ;
9200: LD_ADDR_EXP 58
9204: PUSH
9205: LD_INT 1
9207: ST_TO_ADDR
// if p3 = 109 then
9208: LD_VAR 0 3
9212: PUSH
9213: LD_INT 109
9215: EQUAL
9216: IFFALSE 9226
// sBetray := true ;
9218: LD_ADDR_EXP 62
9222: PUSH
9223: LD_INT 1
9225: ST_TO_ADDR
// if p3 = 110 then
9226: LD_VAR 0 3
9230: PUSH
9231: LD_INT 110
9233: EQUAL
9234: IFFALSE 9244
// sContamin := true ;
9236: LD_ADDR_EXP 63
9240: PUSH
9241: LD_INT 1
9243: ST_TO_ADDR
// if p3 = 111 then
9244: LD_VAR 0 3
9248: PUSH
9249: LD_INT 111
9251: EQUAL
9252: IFFALSE 9262
// sOil := true ;
9254: LD_ADDR_EXP 65
9258: PUSH
9259: LD_INT 1
9261: ST_TO_ADDR
// if p3 = 112 then
9262: LD_VAR 0 3
9266: PUSH
9267: LD_INT 112
9269: EQUAL
9270: IFFALSE 9280
// sStu := true ;
9272: LD_ADDR_EXP 69
9276: PUSH
9277: LD_INT 1
9279: ST_TO_ADDR
// if p3 = 113 then
9280: LD_VAR 0 3
9284: PUSH
9285: LD_INT 113
9287: EQUAL
9288: IFFALSE 9298
// sBazooka := true ;
9290: LD_ADDR_EXP 72
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// if p3 = 114 then
9298: LD_VAR 0 3
9302: PUSH
9303: LD_INT 114
9305: EQUAL
9306: IFFALSE 9316
// sMortar := true ;
9308: LD_ADDR_EXP 73
9312: PUSH
9313: LD_INT 1
9315: ST_TO_ADDR
// if p3 = 115 then
9316: LD_VAR 0 3
9320: PUSH
9321: LD_INT 115
9323: EQUAL
9324: IFFALSE 9334
// sRanger := true ;
9326: LD_ADDR_EXP 83
9330: PUSH
9331: LD_INT 1
9333: ST_TO_ADDR
// if p3 = 116 then
9334: LD_VAR 0 3
9338: PUSH
9339: LD_INT 116
9341: EQUAL
9342: IFFALSE 9352
// sComputer := true ;
9344: LD_ADDR_EXP 84
9348: PUSH
9349: LD_INT 1
9351: ST_TO_ADDR
// if p3 = 117 then
9352: LD_VAR 0 3
9356: PUSH
9357: LD_INT 117
9359: EQUAL
9360: IFFALSE 9370
// s30 := true ;
9362: LD_ADDR_EXP 85
9366: PUSH
9367: LD_INT 1
9369: ST_TO_ADDR
// if p3 = 118 then
9370: LD_VAR 0 3
9374: PUSH
9375: LD_INT 118
9377: EQUAL
9378: IFFALSE 9388
// s60 := true ;
9380: LD_ADDR_EXP 86
9384: PUSH
9385: LD_INT 1
9387: ST_TO_ADDR
// end ; if p2 = stream_mode then
9388: LD_VAR 0 2
9392: PUSH
9393: LD_INT 101
9395: EQUAL
9396: IFFALSE 9524
// begin case p3 of 1 :
9398: LD_VAR 0 3
9402: PUSH
9403: LD_INT 1
9405: DOUBLE
9406: EQUAL
9407: IFTRUE 9411
9409: GO 9418
9411: POP
// hHackUnlimitedResources ; 2 :
9412: CALL 21622 0 0
9416: GO 9524
9418: LD_INT 2
9420: DOUBLE
9421: EQUAL
9422: IFTRUE 9426
9424: GO 9433
9426: POP
// hHackSetLevel10 ; 3 :
9427: CALL 21755 0 0
9431: GO 9524
9433: LD_INT 3
9435: DOUBLE
9436: EQUAL
9437: IFTRUE 9441
9439: GO 9448
9441: POP
// hHackSetLevel10YourUnits ; 4 :
9442: CALL 21840 0 0
9446: GO 9524
9448: LD_INT 4
9450: DOUBLE
9451: EQUAL
9452: IFTRUE 9456
9454: GO 9463
9456: POP
// hHackInvincible ; 5 :
9457: CALL 22288 0 0
9461: GO 9524
9463: LD_INT 5
9465: DOUBLE
9466: EQUAL
9467: IFTRUE 9471
9469: GO 9478
9471: POP
// hHackInvisible ; 6 :
9472: CALL 22399 0 0
9476: GO 9524
9478: LD_INT 6
9480: DOUBLE
9481: EQUAL
9482: IFTRUE 9486
9484: GO 9493
9486: POP
// hHackChangeYourSide ; 7 :
9487: CALL 22456 0 0
9491: GO 9524
9493: LD_INT 7
9495: DOUBLE
9496: EQUAL
9497: IFTRUE 9501
9499: GO 9508
9501: POP
// hHackChangeUnitSide ; 8 :
9502: CALL 22498 0 0
9506: GO 9524
9508: LD_INT 8
9510: DOUBLE
9511: EQUAL
9512: IFTRUE 9516
9514: GO 9523
9516: POP
// hHackFog ; end ;
9517: CALL 22599 0 0
9521: GO 9524
9523: POP
// end ; end ;
9524: LD_VAR 0 7
9528: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
9529: GO 9531
9531: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9532: LD_STRING initStreamRollete();
9534: PPUSH
9535: CALL_OW 559
// InitStreamMode ;
9539: CALL 9551 0 0
// DefineStreamItems ( false ) ;
9543: LD_INT 0
9545: PPUSH
9546: CALL 10015 0 1
// end ;
9550: END
// function InitStreamMode ; begin
9551: LD_INT 0
9553: PPUSH
// streamModeActive := false ;
9554: LD_ADDR_EXP 30
9558: PUSH
9559: LD_INT 0
9561: ST_TO_ADDR
// normalCounter := 36 ;
9562: LD_ADDR_EXP 31
9566: PUSH
9567: LD_INT 36
9569: ST_TO_ADDR
// hardcoreCounter := 18 ;
9570: LD_ADDR_EXP 32
9574: PUSH
9575: LD_INT 18
9577: ST_TO_ADDR
// sRocket := false ;
9578: LD_ADDR_EXP 35
9582: PUSH
9583: LD_INT 0
9585: ST_TO_ADDR
// sSpeed := false ;
9586: LD_ADDR_EXP 34
9590: PUSH
9591: LD_INT 0
9593: ST_TO_ADDR
// sEngine := false ;
9594: LD_ADDR_EXP 36
9598: PUSH
9599: LD_INT 0
9601: ST_TO_ADDR
// sSpec := false ;
9602: LD_ADDR_EXP 33
9606: PUSH
9607: LD_INT 0
9609: ST_TO_ADDR
// sLevel := false ;
9610: LD_ADDR_EXP 37
9614: PUSH
9615: LD_INT 0
9617: ST_TO_ADDR
// sArmoury := false ;
9618: LD_ADDR_EXP 38
9622: PUSH
9623: LD_INT 0
9625: ST_TO_ADDR
// sRadar := false ;
9626: LD_ADDR_EXP 39
9630: PUSH
9631: LD_INT 0
9633: ST_TO_ADDR
// sBunker := false ;
9634: LD_ADDR_EXP 40
9638: PUSH
9639: LD_INT 0
9641: ST_TO_ADDR
// sHack := false ;
9642: LD_ADDR_EXP 41
9646: PUSH
9647: LD_INT 0
9649: ST_TO_ADDR
// sFire := false ;
9650: LD_ADDR_EXP 42
9654: PUSH
9655: LD_INT 0
9657: ST_TO_ADDR
// sRefresh := false ;
9658: LD_ADDR_EXP 43
9662: PUSH
9663: LD_INT 0
9665: ST_TO_ADDR
// sExp := false ;
9666: LD_ADDR_EXP 44
9670: PUSH
9671: LD_INT 0
9673: ST_TO_ADDR
// sDepot := false ;
9674: LD_ADDR_EXP 45
9678: PUSH
9679: LD_INT 0
9681: ST_TO_ADDR
// sFlag := false ;
9682: LD_ADDR_EXP 46
9686: PUSH
9687: LD_INT 0
9689: ST_TO_ADDR
// sKamikadze := false ;
9690: LD_ADDR_EXP 54
9694: PUSH
9695: LD_INT 0
9697: ST_TO_ADDR
// sTroll := false ;
9698: LD_ADDR_EXP 55
9702: PUSH
9703: LD_INT 0
9705: ST_TO_ADDR
// sSlow := false ;
9706: LD_ADDR_EXP 56
9710: PUSH
9711: LD_INT 0
9713: ST_TO_ADDR
// sLack := false ;
9714: LD_ADDR_EXP 57
9718: PUSH
9719: LD_INT 0
9721: ST_TO_ADDR
// sTank := false ;
9722: LD_ADDR_EXP 59
9726: PUSH
9727: LD_INT 0
9729: ST_TO_ADDR
// sRemote := false ;
9730: LD_ADDR_EXP 60
9734: PUSH
9735: LD_INT 0
9737: ST_TO_ADDR
// sPowell := false ;
9738: LD_ADDR_EXP 61
9742: PUSH
9743: LD_INT 0
9745: ST_TO_ADDR
// sTeleport := false ;
9746: LD_ADDR_EXP 64
9750: PUSH
9751: LD_INT 0
9753: ST_TO_ADDR
// sOilTower := false ;
9754: LD_ADDR_EXP 66
9758: PUSH
9759: LD_INT 0
9761: ST_TO_ADDR
// sShovel := false ;
9762: LD_ADDR_EXP 67
9766: PUSH
9767: LD_INT 0
9769: ST_TO_ADDR
// sSheik := false ;
9770: LD_ADDR_EXP 68
9774: PUSH
9775: LD_INT 0
9777: ST_TO_ADDR
// sEarthquake := false ;
9778: LD_ADDR_EXP 70
9782: PUSH
9783: LD_INT 0
9785: ST_TO_ADDR
// sAI := false ;
9786: LD_ADDR_EXP 71
9790: PUSH
9791: LD_INT 0
9793: ST_TO_ADDR
// sCargo := false ;
9794: LD_ADDR_EXP 74
9798: PUSH
9799: LD_INT 0
9801: ST_TO_ADDR
// sDLaser := false ;
9802: LD_ADDR_EXP 75
9806: PUSH
9807: LD_INT 0
9809: ST_TO_ADDR
// sExchange := false ;
9810: LD_ADDR_EXP 76
9814: PUSH
9815: LD_INT 0
9817: ST_TO_ADDR
// sFac := false ;
9818: LD_ADDR_EXP 77
9822: PUSH
9823: LD_INT 0
9825: ST_TO_ADDR
// sPower := false ;
9826: LD_ADDR_EXP 78
9830: PUSH
9831: LD_INT 0
9833: ST_TO_ADDR
// sRandom := false ;
9834: LD_ADDR_EXP 79
9838: PUSH
9839: LD_INT 0
9841: ST_TO_ADDR
// sShield := false ;
9842: LD_ADDR_EXP 80
9846: PUSH
9847: LD_INT 0
9849: ST_TO_ADDR
// sTime := false ;
9850: LD_ADDR_EXP 81
9854: PUSH
9855: LD_INT 0
9857: ST_TO_ADDR
// sTools := false ;
9858: LD_ADDR_EXP 82
9862: PUSH
9863: LD_INT 0
9865: ST_TO_ADDR
// sSold := false ;
9866: LD_ADDR_EXP 47
9870: PUSH
9871: LD_INT 0
9873: ST_TO_ADDR
// sDiff := false ;
9874: LD_ADDR_EXP 48
9878: PUSH
9879: LD_INT 0
9881: ST_TO_ADDR
// sFog := false ;
9882: LD_ADDR_EXP 51
9886: PUSH
9887: LD_INT 0
9889: ST_TO_ADDR
// sReset := false ;
9890: LD_ADDR_EXP 52
9894: PUSH
9895: LD_INT 0
9897: ST_TO_ADDR
// sSun := false ;
9898: LD_ADDR_EXP 53
9902: PUSH
9903: LD_INT 0
9905: ST_TO_ADDR
// sTiger := false ;
9906: LD_ADDR_EXP 49
9910: PUSH
9911: LD_INT 0
9913: ST_TO_ADDR
// sBomb := false ;
9914: LD_ADDR_EXP 50
9918: PUSH
9919: LD_INT 0
9921: ST_TO_ADDR
// sWound := false ;
9922: LD_ADDR_EXP 58
9926: PUSH
9927: LD_INT 0
9929: ST_TO_ADDR
// sBetray := false ;
9930: LD_ADDR_EXP 62
9934: PUSH
9935: LD_INT 0
9937: ST_TO_ADDR
// sContamin := false ;
9938: LD_ADDR_EXP 63
9942: PUSH
9943: LD_INT 0
9945: ST_TO_ADDR
// sOil := false ;
9946: LD_ADDR_EXP 65
9950: PUSH
9951: LD_INT 0
9953: ST_TO_ADDR
// sStu := false ;
9954: LD_ADDR_EXP 69
9958: PUSH
9959: LD_INT 0
9961: ST_TO_ADDR
// sBazooka := false ;
9962: LD_ADDR_EXP 72
9966: PUSH
9967: LD_INT 0
9969: ST_TO_ADDR
// sMortar := false ;
9970: LD_ADDR_EXP 73
9974: PUSH
9975: LD_INT 0
9977: ST_TO_ADDR
// sRanger := false ;
9978: LD_ADDR_EXP 83
9982: PUSH
9983: LD_INT 0
9985: ST_TO_ADDR
// sComputer := false ;
9986: LD_ADDR_EXP 84
9990: PUSH
9991: LD_INT 0
9993: ST_TO_ADDR
// s30 := false ;
9994: LD_ADDR_EXP 85
9998: PUSH
9999: LD_INT 0
10001: ST_TO_ADDR
// s60 := false ;
10002: LD_ADDR_EXP 86
10006: PUSH
10007: LD_INT 0
10009: ST_TO_ADDR
// end ;
10010: LD_VAR 0 1
10014: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10015: LD_INT 0
10017: PPUSH
10018: PPUSH
10019: PPUSH
10020: PPUSH
10021: PPUSH
10022: PPUSH
10023: PPUSH
// result := [ ] ;
10024: LD_ADDR_VAR 0 2
10028: PUSH
10029: EMPTY
10030: ST_TO_ADDR
// if campaign_id = 1 then
10031: LD_OWVAR 69
10035: PUSH
10036: LD_INT 1
10038: EQUAL
10039: IFFALSE 13205
// begin case mission_number of 1 :
10041: LD_OWVAR 70
10045: PUSH
10046: LD_INT 1
10048: DOUBLE
10049: EQUAL
10050: IFTRUE 10054
10052: GO 10130
10054: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10055: LD_ADDR_VAR 0 2
10059: PUSH
10060: LD_INT 2
10062: PUSH
10063: LD_INT 4
10065: PUSH
10066: LD_INT 11
10068: PUSH
10069: LD_INT 12
10071: PUSH
10072: LD_INT 15
10074: PUSH
10075: LD_INT 16
10077: PUSH
10078: LD_INT 22
10080: PUSH
10081: LD_INT 23
10083: PUSH
10084: LD_INT 26
10086: PUSH
10087: EMPTY
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: PUSH
10098: LD_INT 101
10100: PUSH
10101: LD_INT 102
10103: PUSH
10104: LD_INT 106
10106: PUSH
10107: LD_INT 116
10109: PUSH
10110: LD_INT 117
10112: PUSH
10113: LD_INT 118
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: ST_TO_ADDR
10128: GO 13203
10130: LD_INT 2
10132: DOUBLE
10133: EQUAL
10134: IFTRUE 10138
10136: GO 10222
10138: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10139: LD_ADDR_VAR 0 2
10143: PUSH
10144: LD_INT 2
10146: PUSH
10147: LD_INT 4
10149: PUSH
10150: LD_INT 11
10152: PUSH
10153: LD_INT 12
10155: PUSH
10156: LD_INT 15
10158: PUSH
10159: LD_INT 16
10161: PUSH
10162: LD_INT 22
10164: PUSH
10165: LD_INT 23
10167: PUSH
10168: LD_INT 26
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: PUSH
10182: LD_INT 101
10184: PUSH
10185: LD_INT 102
10187: PUSH
10188: LD_INT 105
10190: PUSH
10191: LD_INT 106
10193: PUSH
10194: LD_INT 108
10196: PUSH
10197: LD_INT 116
10199: PUSH
10200: LD_INT 117
10202: PUSH
10203: LD_INT 118
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: ST_TO_ADDR
10220: GO 13203
10222: LD_INT 3
10224: DOUBLE
10225: EQUAL
10226: IFTRUE 10230
10228: GO 10318
10230: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10231: LD_ADDR_VAR 0 2
10235: PUSH
10236: LD_INT 2
10238: PUSH
10239: LD_INT 4
10241: PUSH
10242: LD_INT 5
10244: PUSH
10245: LD_INT 11
10247: PUSH
10248: LD_INT 12
10250: PUSH
10251: LD_INT 15
10253: PUSH
10254: LD_INT 16
10256: PUSH
10257: LD_INT 22
10259: PUSH
10260: LD_INT 26
10262: PUSH
10263: LD_INT 36
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: PUSH
10278: LD_INT 101
10280: PUSH
10281: LD_INT 102
10283: PUSH
10284: LD_INT 105
10286: PUSH
10287: LD_INT 106
10289: PUSH
10290: LD_INT 108
10292: PUSH
10293: LD_INT 116
10295: PUSH
10296: LD_INT 117
10298: PUSH
10299: LD_INT 118
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: ST_TO_ADDR
10316: GO 13203
10318: LD_INT 4
10320: DOUBLE
10321: EQUAL
10322: IFTRUE 10326
10324: GO 10422
10326: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10327: LD_ADDR_VAR 0 2
10331: PUSH
10332: LD_INT 2
10334: PUSH
10335: LD_INT 4
10337: PUSH
10338: LD_INT 5
10340: PUSH
10341: LD_INT 8
10343: PUSH
10344: LD_INT 11
10346: PUSH
10347: LD_INT 12
10349: PUSH
10350: LD_INT 15
10352: PUSH
10353: LD_INT 16
10355: PUSH
10356: LD_INT 22
10358: PUSH
10359: LD_INT 23
10361: PUSH
10362: LD_INT 26
10364: PUSH
10365: LD_INT 36
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: PUSH
10382: LD_INT 101
10384: PUSH
10385: LD_INT 102
10387: PUSH
10388: LD_INT 105
10390: PUSH
10391: LD_INT 106
10393: PUSH
10394: LD_INT 108
10396: PUSH
10397: LD_INT 116
10399: PUSH
10400: LD_INT 117
10402: PUSH
10403: LD_INT 118
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: ST_TO_ADDR
10420: GO 13203
10422: LD_INT 5
10424: DOUBLE
10425: EQUAL
10426: IFTRUE 10430
10428: GO 10542
10430: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10431: LD_ADDR_VAR 0 2
10435: PUSH
10436: LD_INT 2
10438: PUSH
10439: LD_INT 4
10441: PUSH
10442: LD_INT 5
10444: PUSH
10445: LD_INT 6
10447: PUSH
10448: LD_INT 8
10450: PUSH
10451: LD_INT 11
10453: PUSH
10454: LD_INT 12
10456: PUSH
10457: LD_INT 15
10459: PUSH
10460: LD_INT 16
10462: PUSH
10463: LD_INT 22
10465: PUSH
10466: LD_INT 23
10468: PUSH
10469: LD_INT 25
10471: PUSH
10472: LD_INT 26
10474: PUSH
10475: LD_INT 36
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 101
10496: PUSH
10497: LD_INT 102
10499: PUSH
10500: LD_INT 105
10502: PUSH
10503: LD_INT 106
10505: PUSH
10506: LD_INT 108
10508: PUSH
10509: LD_INT 109
10511: PUSH
10512: LD_INT 112
10514: PUSH
10515: LD_INT 116
10517: PUSH
10518: LD_INT 117
10520: PUSH
10521: LD_INT 118
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: ST_TO_ADDR
10540: GO 13203
10542: LD_INT 6
10544: DOUBLE
10545: EQUAL
10546: IFTRUE 10550
10548: GO 10682
10550: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10551: LD_ADDR_VAR 0 2
10555: PUSH
10556: LD_INT 2
10558: PUSH
10559: LD_INT 4
10561: PUSH
10562: LD_INT 5
10564: PUSH
10565: LD_INT 6
10567: PUSH
10568: LD_INT 8
10570: PUSH
10571: LD_INT 11
10573: PUSH
10574: LD_INT 12
10576: PUSH
10577: LD_INT 15
10579: PUSH
10580: LD_INT 16
10582: PUSH
10583: LD_INT 20
10585: PUSH
10586: LD_INT 21
10588: PUSH
10589: LD_INT 22
10591: PUSH
10592: LD_INT 23
10594: PUSH
10595: LD_INT 25
10597: PUSH
10598: LD_INT 26
10600: PUSH
10601: LD_INT 30
10603: PUSH
10604: LD_INT 31
10606: PUSH
10607: LD_INT 32
10609: PUSH
10610: LD_INT 36
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 101
10636: PUSH
10637: LD_INT 102
10639: PUSH
10640: LD_INT 105
10642: PUSH
10643: LD_INT 106
10645: PUSH
10646: LD_INT 108
10648: PUSH
10649: LD_INT 109
10651: PUSH
10652: LD_INT 112
10654: PUSH
10655: LD_INT 116
10657: PUSH
10658: LD_INT 117
10660: PUSH
10661: LD_INT 118
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: ST_TO_ADDR
10680: GO 13203
10682: LD_INT 7
10684: DOUBLE
10685: EQUAL
10686: IFTRUE 10690
10688: GO 10802
10690: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10691: LD_ADDR_VAR 0 2
10695: PUSH
10696: LD_INT 2
10698: PUSH
10699: LD_INT 4
10701: PUSH
10702: LD_INT 5
10704: PUSH
10705: LD_INT 7
10707: PUSH
10708: LD_INT 11
10710: PUSH
10711: LD_INT 12
10713: PUSH
10714: LD_INT 15
10716: PUSH
10717: LD_INT 16
10719: PUSH
10720: LD_INT 20
10722: PUSH
10723: LD_INT 21
10725: PUSH
10726: LD_INT 22
10728: PUSH
10729: LD_INT 23
10731: PUSH
10732: LD_INT 25
10734: PUSH
10735: LD_INT 26
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: PUSH
10754: LD_INT 101
10756: PUSH
10757: LD_INT 102
10759: PUSH
10760: LD_INT 103
10762: PUSH
10763: LD_INT 105
10765: PUSH
10766: LD_INT 106
10768: PUSH
10769: LD_INT 108
10771: PUSH
10772: LD_INT 112
10774: PUSH
10775: LD_INT 116
10777: PUSH
10778: LD_INT 117
10780: PUSH
10781: LD_INT 118
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: ST_TO_ADDR
10800: GO 13203
10802: LD_INT 8
10804: DOUBLE
10805: EQUAL
10806: IFTRUE 10810
10808: GO 10950
10810: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10811: LD_ADDR_VAR 0 2
10815: PUSH
10816: LD_INT 2
10818: PUSH
10819: LD_INT 4
10821: PUSH
10822: LD_INT 5
10824: PUSH
10825: LD_INT 6
10827: PUSH
10828: LD_INT 7
10830: PUSH
10831: LD_INT 8
10833: PUSH
10834: LD_INT 11
10836: PUSH
10837: LD_INT 12
10839: PUSH
10840: LD_INT 15
10842: PUSH
10843: LD_INT 16
10845: PUSH
10846: LD_INT 20
10848: PUSH
10849: LD_INT 21
10851: PUSH
10852: LD_INT 22
10854: PUSH
10855: LD_INT 23
10857: PUSH
10858: LD_INT 25
10860: PUSH
10861: LD_INT 26
10863: PUSH
10864: LD_INT 30
10866: PUSH
10867: LD_INT 31
10869: PUSH
10870: LD_INT 32
10872: PUSH
10873: LD_INT 36
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: PUSH
10898: LD_INT 101
10900: PUSH
10901: LD_INT 102
10903: PUSH
10904: LD_INT 103
10906: PUSH
10907: LD_INT 105
10909: PUSH
10910: LD_INT 106
10912: PUSH
10913: LD_INT 108
10915: PUSH
10916: LD_INT 109
10918: PUSH
10919: LD_INT 112
10921: PUSH
10922: LD_INT 116
10924: PUSH
10925: LD_INT 117
10927: PUSH
10928: LD_INT 118
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: PUSH
10944: EMPTY
10945: LIST
10946: LIST
10947: ST_TO_ADDR
10948: GO 13203
10950: LD_INT 9
10952: DOUBLE
10953: EQUAL
10954: IFTRUE 10958
10956: GO 11106
10958: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10959: LD_ADDR_VAR 0 2
10963: PUSH
10964: LD_INT 2
10966: PUSH
10967: LD_INT 4
10969: PUSH
10970: LD_INT 5
10972: PUSH
10973: LD_INT 6
10975: PUSH
10976: LD_INT 7
10978: PUSH
10979: LD_INT 8
10981: PUSH
10982: LD_INT 11
10984: PUSH
10985: LD_INT 12
10987: PUSH
10988: LD_INT 15
10990: PUSH
10991: LD_INT 16
10993: PUSH
10994: LD_INT 20
10996: PUSH
10997: LD_INT 21
10999: PUSH
11000: LD_INT 22
11002: PUSH
11003: LD_INT 23
11005: PUSH
11006: LD_INT 25
11008: PUSH
11009: LD_INT 26
11011: PUSH
11012: LD_INT 28
11014: PUSH
11015: LD_INT 30
11017: PUSH
11018: LD_INT 31
11020: PUSH
11021: LD_INT 32
11023: PUSH
11024: LD_INT 36
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: PUSH
11050: LD_INT 101
11052: PUSH
11053: LD_INT 102
11055: PUSH
11056: LD_INT 103
11058: PUSH
11059: LD_INT 105
11061: PUSH
11062: LD_INT 106
11064: PUSH
11065: LD_INT 108
11067: PUSH
11068: LD_INT 109
11070: PUSH
11071: LD_INT 112
11073: PUSH
11074: LD_INT 114
11076: PUSH
11077: LD_INT 116
11079: PUSH
11080: LD_INT 117
11082: PUSH
11083: LD_INT 118
11085: PUSH
11086: EMPTY
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: ST_TO_ADDR
11104: GO 13203
11106: LD_INT 10
11108: DOUBLE
11109: EQUAL
11110: IFTRUE 11114
11112: GO 11310
11114: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11115: LD_ADDR_VAR 0 2
11119: PUSH
11120: LD_INT 2
11122: PUSH
11123: LD_INT 4
11125: PUSH
11126: LD_INT 5
11128: PUSH
11129: LD_INT 6
11131: PUSH
11132: LD_INT 7
11134: PUSH
11135: LD_INT 8
11137: PUSH
11138: LD_INT 9
11140: PUSH
11141: LD_INT 10
11143: PUSH
11144: LD_INT 11
11146: PUSH
11147: LD_INT 12
11149: PUSH
11150: LD_INT 13
11152: PUSH
11153: LD_INT 14
11155: PUSH
11156: LD_INT 15
11158: PUSH
11159: LD_INT 16
11161: PUSH
11162: LD_INT 17
11164: PUSH
11165: LD_INT 18
11167: PUSH
11168: LD_INT 19
11170: PUSH
11171: LD_INT 20
11173: PUSH
11174: LD_INT 21
11176: PUSH
11177: LD_INT 22
11179: PUSH
11180: LD_INT 23
11182: PUSH
11183: LD_INT 24
11185: PUSH
11186: LD_INT 25
11188: PUSH
11189: LD_INT 26
11191: PUSH
11192: LD_INT 28
11194: PUSH
11195: LD_INT 30
11197: PUSH
11198: LD_INT 31
11200: PUSH
11201: LD_INT 32
11203: PUSH
11204: LD_INT 36
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: PUSH
11238: LD_INT 101
11240: PUSH
11241: LD_INT 102
11243: PUSH
11244: LD_INT 103
11246: PUSH
11247: LD_INT 104
11249: PUSH
11250: LD_INT 105
11252: PUSH
11253: LD_INT 106
11255: PUSH
11256: LD_INT 107
11258: PUSH
11259: LD_INT 108
11261: PUSH
11262: LD_INT 109
11264: PUSH
11265: LD_INT 110
11267: PUSH
11268: LD_INT 111
11270: PUSH
11271: LD_INT 112
11273: PUSH
11274: LD_INT 114
11276: PUSH
11277: LD_INT 116
11279: PUSH
11280: LD_INT 117
11282: PUSH
11283: LD_INT 118
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: ST_TO_ADDR
11308: GO 13203
11310: LD_INT 11
11312: DOUBLE
11313: EQUAL
11314: IFTRUE 11318
11316: GO 11522
11318: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11319: LD_ADDR_VAR 0 2
11323: PUSH
11324: LD_INT 2
11326: PUSH
11327: LD_INT 3
11329: PUSH
11330: LD_INT 4
11332: PUSH
11333: LD_INT 5
11335: PUSH
11336: LD_INT 6
11338: PUSH
11339: LD_INT 7
11341: PUSH
11342: LD_INT 8
11344: PUSH
11345: LD_INT 9
11347: PUSH
11348: LD_INT 10
11350: PUSH
11351: LD_INT 11
11353: PUSH
11354: LD_INT 12
11356: PUSH
11357: LD_INT 13
11359: PUSH
11360: LD_INT 14
11362: PUSH
11363: LD_INT 15
11365: PUSH
11366: LD_INT 16
11368: PUSH
11369: LD_INT 17
11371: PUSH
11372: LD_INT 18
11374: PUSH
11375: LD_INT 19
11377: PUSH
11378: LD_INT 20
11380: PUSH
11381: LD_INT 21
11383: PUSH
11384: LD_INT 22
11386: PUSH
11387: LD_INT 23
11389: PUSH
11390: LD_INT 24
11392: PUSH
11393: LD_INT 25
11395: PUSH
11396: LD_INT 26
11398: PUSH
11399: LD_INT 28
11401: PUSH
11402: LD_INT 30
11404: PUSH
11405: LD_INT 31
11407: PUSH
11408: LD_INT 32
11410: PUSH
11411: LD_INT 34
11413: PUSH
11414: LD_INT 36
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: PUSH
11450: LD_INT 101
11452: PUSH
11453: LD_INT 102
11455: PUSH
11456: LD_INT 103
11458: PUSH
11459: LD_INT 104
11461: PUSH
11462: LD_INT 105
11464: PUSH
11465: LD_INT 106
11467: PUSH
11468: LD_INT 107
11470: PUSH
11471: LD_INT 108
11473: PUSH
11474: LD_INT 109
11476: PUSH
11477: LD_INT 110
11479: PUSH
11480: LD_INT 111
11482: PUSH
11483: LD_INT 112
11485: PUSH
11486: LD_INT 114
11488: PUSH
11489: LD_INT 116
11491: PUSH
11492: LD_INT 117
11494: PUSH
11495: LD_INT 118
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: ST_TO_ADDR
11520: GO 13203
11522: LD_INT 12
11524: DOUBLE
11525: EQUAL
11526: IFTRUE 11530
11528: GO 11750
11530: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11531: LD_ADDR_VAR 0 2
11535: PUSH
11536: LD_INT 1
11538: PUSH
11539: LD_INT 2
11541: PUSH
11542: LD_INT 3
11544: PUSH
11545: LD_INT 4
11547: PUSH
11548: LD_INT 5
11550: PUSH
11551: LD_INT 6
11553: PUSH
11554: LD_INT 7
11556: PUSH
11557: LD_INT 8
11559: PUSH
11560: LD_INT 9
11562: PUSH
11563: LD_INT 10
11565: PUSH
11566: LD_INT 11
11568: PUSH
11569: LD_INT 12
11571: PUSH
11572: LD_INT 13
11574: PUSH
11575: LD_INT 14
11577: PUSH
11578: LD_INT 15
11580: PUSH
11581: LD_INT 16
11583: PUSH
11584: LD_INT 17
11586: PUSH
11587: LD_INT 18
11589: PUSH
11590: LD_INT 19
11592: PUSH
11593: LD_INT 20
11595: PUSH
11596: LD_INT 21
11598: PUSH
11599: LD_INT 22
11601: PUSH
11602: LD_INT 23
11604: PUSH
11605: LD_INT 24
11607: PUSH
11608: LD_INT 25
11610: PUSH
11611: LD_INT 26
11613: PUSH
11614: LD_INT 27
11616: PUSH
11617: LD_INT 28
11619: PUSH
11620: LD_INT 30
11622: PUSH
11623: LD_INT 31
11625: PUSH
11626: LD_INT 32
11628: PUSH
11629: LD_INT 33
11631: PUSH
11632: LD_INT 34
11634: PUSH
11635: LD_INT 36
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: PUSH
11674: LD_INT 101
11676: PUSH
11677: LD_INT 102
11679: PUSH
11680: LD_INT 103
11682: PUSH
11683: LD_INT 104
11685: PUSH
11686: LD_INT 105
11688: PUSH
11689: LD_INT 106
11691: PUSH
11692: LD_INT 107
11694: PUSH
11695: LD_INT 108
11697: PUSH
11698: LD_INT 109
11700: PUSH
11701: LD_INT 110
11703: PUSH
11704: LD_INT 111
11706: PUSH
11707: LD_INT 112
11709: PUSH
11710: LD_INT 113
11712: PUSH
11713: LD_INT 114
11715: PUSH
11716: LD_INT 116
11718: PUSH
11719: LD_INT 117
11721: PUSH
11722: LD_INT 118
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: ST_TO_ADDR
11748: GO 13203
11750: LD_INT 13
11752: DOUBLE
11753: EQUAL
11754: IFTRUE 11758
11756: GO 11966
11758: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11759: LD_ADDR_VAR 0 2
11763: PUSH
11764: LD_INT 1
11766: PUSH
11767: LD_INT 2
11769: PUSH
11770: LD_INT 3
11772: PUSH
11773: LD_INT 4
11775: PUSH
11776: LD_INT 5
11778: PUSH
11779: LD_INT 8
11781: PUSH
11782: LD_INT 9
11784: PUSH
11785: LD_INT 10
11787: PUSH
11788: LD_INT 11
11790: PUSH
11791: LD_INT 12
11793: PUSH
11794: LD_INT 14
11796: PUSH
11797: LD_INT 15
11799: PUSH
11800: LD_INT 16
11802: PUSH
11803: LD_INT 17
11805: PUSH
11806: LD_INT 18
11808: PUSH
11809: LD_INT 19
11811: PUSH
11812: LD_INT 20
11814: PUSH
11815: LD_INT 21
11817: PUSH
11818: LD_INT 22
11820: PUSH
11821: LD_INT 23
11823: PUSH
11824: LD_INT 24
11826: PUSH
11827: LD_INT 25
11829: PUSH
11830: LD_INT 26
11832: PUSH
11833: LD_INT 27
11835: PUSH
11836: LD_INT 28
11838: PUSH
11839: LD_INT 30
11841: PUSH
11842: LD_INT 31
11844: PUSH
11845: LD_INT 32
11847: PUSH
11848: LD_INT 33
11850: PUSH
11851: LD_INT 34
11853: PUSH
11854: LD_INT 36
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: PUSH
11890: LD_INT 101
11892: PUSH
11893: LD_INT 102
11895: PUSH
11896: LD_INT 103
11898: PUSH
11899: LD_INT 104
11901: PUSH
11902: LD_INT 105
11904: PUSH
11905: LD_INT 106
11907: PUSH
11908: LD_INT 107
11910: PUSH
11911: LD_INT 108
11913: PUSH
11914: LD_INT 109
11916: PUSH
11917: LD_INT 110
11919: PUSH
11920: LD_INT 111
11922: PUSH
11923: LD_INT 112
11925: PUSH
11926: LD_INT 113
11928: PUSH
11929: LD_INT 114
11931: PUSH
11932: LD_INT 116
11934: PUSH
11935: LD_INT 117
11937: PUSH
11938: LD_INT 118
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: ST_TO_ADDR
11964: GO 13203
11966: LD_INT 14
11968: DOUBLE
11969: EQUAL
11970: IFTRUE 11974
11972: GO 12198
11974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11975: LD_ADDR_VAR 0 2
11979: PUSH
11980: LD_INT 1
11982: PUSH
11983: LD_INT 2
11985: PUSH
11986: LD_INT 3
11988: PUSH
11989: LD_INT 4
11991: PUSH
11992: LD_INT 5
11994: PUSH
11995: LD_INT 6
11997: PUSH
11998: LD_INT 7
12000: PUSH
12001: LD_INT 8
12003: PUSH
12004: LD_INT 9
12006: PUSH
12007: LD_INT 10
12009: PUSH
12010: LD_INT 11
12012: PUSH
12013: LD_INT 12
12015: PUSH
12016: LD_INT 13
12018: PUSH
12019: LD_INT 14
12021: PUSH
12022: LD_INT 15
12024: PUSH
12025: LD_INT 16
12027: PUSH
12028: LD_INT 17
12030: PUSH
12031: LD_INT 18
12033: PUSH
12034: LD_INT 19
12036: PUSH
12037: LD_INT 20
12039: PUSH
12040: LD_INT 21
12042: PUSH
12043: LD_INT 22
12045: PUSH
12046: LD_INT 23
12048: PUSH
12049: LD_INT 24
12051: PUSH
12052: LD_INT 25
12054: PUSH
12055: LD_INT 26
12057: PUSH
12058: LD_INT 27
12060: PUSH
12061: LD_INT 28
12063: PUSH
12064: LD_INT 29
12066: PUSH
12067: LD_INT 30
12069: PUSH
12070: LD_INT 31
12072: PUSH
12073: LD_INT 32
12075: PUSH
12076: LD_INT 33
12078: PUSH
12079: LD_INT 34
12081: PUSH
12082: LD_INT 36
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 101
12124: PUSH
12125: LD_INT 102
12127: PUSH
12128: LD_INT 103
12130: PUSH
12131: LD_INT 104
12133: PUSH
12134: LD_INT 105
12136: PUSH
12137: LD_INT 106
12139: PUSH
12140: LD_INT 107
12142: PUSH
12143: LD_INT 108
12145: PUSH
12146: LD_INT 109
12148: PUSH
12149: LD_INT 110
12151: PUSH
12152: LD_INT 111
12154: PUSH
12155: LD_INT 112
12157: PUSH
12158: LD_INT 113
12160: PUSH
12161: LD_INT 114
12163: PUSH
12164: LD_INT 116
12166: PUSH
12167: LD_INT 117
12169: PUSH
12170: LD_INT 118
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: ST_TO_ADDR
12196: GO 13203
12198: LD_INT 15
12200: DOUBLE
12201: EQUAL
12202: IFTRUE 12206
12204: GO 12430
12206: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12207: LD_ADDR_VAR 0 2
12211: PUSH
12212: LD_INT 1
12214: PUSH
12215: LD_INT 2
12217: PUSH
12218: LD_INT 3
12220: PUSH
12221: LD_INT 4
12223: PUSH
12224: LD_INT 5
12226: PUSH
12227: LD_INT 6
12229: PUSH
12230: LD_INT 7
12232: PUSH
12233: LD_INT 8
12235: PUSH
12236: LD_INT 9
12238: PUSH
12239: LD_INT 10
12241: PUSH
12242: LD_INT 11
12244: PUSH
12245: LD_INT 12
12247: PUSH
12248: LD_INT 13
12250: PUSH
12251: LD_INT 14
12253: PUSH
12254: LD_INT 15
12256: PUSH
12257: LD_INT 16
12259: PUSH
12260: LD_INT 17
12262: PUSH
12263: LD_INT 18
12265: PUSH
12266: LD_INT 19
12268: PUSH
12269: LD_INT 20
12271: PUSH
12272: LD_INT 21
12274: PUSH
12275: LD_INT 22
12277: PUSH
12278: LD_INT 23
12280: PUSH
12281: LD_INT 24
12283: PUSH
12284: LD_INT 25
12286: PUSH
12287: LD_INT 26
12289: PUSH
12290: LD_INT 27
12292: PUSH
12293: LD_INT 28
12295: PUSH
12296: LD_INT 29
12298: PUSH
12299: LD_INT 30
12301: PUSH
12302: LD_INT 31
12304: PUSH
12305: LD_INT 32
12307: PUSH
12308: LD_INT 33
12310: PUSH
12311: LD_INT 34
12313: PUSH
12314: LD_INT 36
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: PUSH
12354: LD_INT 101
12356: PUSH
12357: LD_INT 102
12359: PUSH
12360: LD_INT 103
12362: PUSH
12363: LD_INT 104
12365: PUSH
12366: LD_INT 105
12368: PUSH
12369: LD_INT 106
12371: PUSH
12372: LD_INT 107
12374: PUSH
12375: LD_INT 108
12377: PUSH
12378: LD_INT 109
12380: PUSH
12381: LD_INT 110
12383: PUSH
12384: LD_INT 111
12386: PUSH
12387: LD_INT 112
12389: PUSH
12390: LD_INT 113
12392: PUSH
12393: LD_INT 114
12395: PUSH
12396: LD_INT 116
12398: PUSH
12399: LD_INT 117
12401: PUSH
12402: LD_INT 118
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: ST_TO_ADDR
12428: GO 13203
12430: LD_INT 16
12432: DOUBLE
12433: EQUAL
12434: IFTRUE 12438
12436: GO 12574
12438: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12439: LD_ADDR_VAR 0 2
12443: PUSH
12444: LD_INT 2
12446: PUSH
12447: LD_INT 4
12449: PUSH
12450: LD_INT 5
12452: PUSH
12453: LD_INT 7
12455: PUSH
12456: LD_INT 11
12458: PUSH
12459: LD_INT 12
12461: PUSH
12462: LD_INT 15
12464: PUSH
12465: LD_INT 16
12467: PUSH
12468: LD_INT 20
12470: PUSH
12471: LD_INT 21
12473: PUSH
12474: LD_INT 22
12476: PUSH
12477: LD_INT 23
12479: PUSH
12480: LD_INT 25
12482: PUSH
12483: LD_INT 26
12485: PUSH
12486: LD_INT 30
12488: PUSH
12489: LD_INT 31
12491: PUSH
12492: LD_INT 32
12494: PUSH
12495: LD_INT 33
12497: PUSH
12498: LD_INT 34
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: PUSH
12522: LD_INT 101
12524: PUSH
12525: LD_INT 102
12527: PUSH
12528: LD_INT 103
12530: PUSH
12531: LD_INT 106
12533: PUSH
12534: LD_INT 108
12536: PUSH
12537: LD_INT 112
12539: PUSH
12540: LD_INT 113
12542: PUSH
12543: LD_INT 114
12545: PUSH
12546: LD_INT 116
12548: PUSH
12549: LD_INT 117
12551: PUSH
12552: LD_INT 118
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: ST_TO_ADDR
12572: GO 13203
12574: LD_INT 17
12576: DOUBLE
12577: EQUAL
12578: IFTRUE 12582
12580: GO 12806
12582: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12583: LD_ADDR_VAR 0 2
12587: PUSH
12588: LD_INT 1
12590: PUSH
12591: LD_INT 2
12593: PUSH
12594: LD_INT 3
12596: PUSH
12597: LD_INT 4
12599: PUSH
12600: LD_INT 5
12602: PUSH
12603: LD_INT 6
12605: PUSH
12606: LD_INT 7
12608: PUSH
12609: LD_INT 8
12611: PUSH
12612: LD_INT 9
12614: PUSH
12615: LD_INT 10
12617: PUSH
12618: LD_INT 11
12620: PUSH
12621: LD_INT 12
12623: PUSH
12624: LD_INT 13
12626: PUSH
12627: LD_INT 14
12629: PUSH
12630: LD_INT 15
12632: PUSH
12633: LD_INT 16
12635: PUSH
12636: LD_INT 17
12638: PUSH
12639: LD_INT 18
12641: PUSH
12642: LD_INT 19
12644: PUSH
12645: LD_INT 20
12647: PUSH
12648: LD_INT 21
12650: PUSH
12651: LD_INT 22
12653: PUSH
12654: LD_INT 23
12656: PUSH
12657: LD_INT 24
12659: PUSH
12660: LD_INT 25
12662: PUSH
12663: LD_INT 26
12665: PUSH
12666: LD_INT 27
12668: PUSH
12669: LD_INT 28
12671: PUSH
12672: LD_INT 29
12674: PUSH
12675: LD_INT 30
12677: PUSH
12678: LD_INT 31
12680: PUSH
12681: LD_INT 32
12683: PUSH
12684: LD_INT 33
12686: PUSH
12687: LD_INT 34
12689: PUSH
12690: LD_INT 36
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: PUSH
12730: LD_INT 101
12732: PUSH
12733: LD_INT 102
12735: PUSH
12736: LD_INT 103
12738: PUSH
12739: LD_INT 104
12741: PUSH
12742: LD_INT 105
12744: PUSH
12745: LD_INT 106
12747: PUSH
12748: LD_INT 107
12750: PUSH
12751: LD_INT 108
12753: PUSH
12754: LD_INT 109
12756: PUSH
12757: LD_INT 110
12759: PUSH
12760: LD_INT 111
12762: PUSH
12763: LD_INT 112
12765: PUSH
12766: LD_INT 113
12768: PUSH
12769: LD_INT 114
12771: PUSH
12772: LD_INT 116
12774: PUSH
12775: LD_INT 117
12777: PUSH
12778: LD_INT 118
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: ST_TO_ADDR
12804: GO 13203
12806: LD_INT 18
12808: DOUBLE
12809: EQUAL
12810: IFTRUE 12814
12812: GO 12962
12814: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12815: LD_ADDR_VAR 0 2
12819: PUSH
12820: LD_INT 2
12822: PUSH
12823: LD_INT 4
12825: PUSH
12826: LD_INT 5
12828: PUSH
12829: LD_INT 7
12831: PUSH
12832: LD_INT 11
12834: PUSH
12835: LD_INT 12
12837: PUSH
12838: LD_INT 15
12840: PUSH
12841: LD_INT 16
12843: PUSH
12844: LD_INT 20
12846: PUSH
12847: LD_INT 21
12849: PUSH
12850: LD_INT 22
12852: PUSH
12853: LD_INT 23
12855: PUSH
12856: LD_INT 25
12858: PUSH
12859: LD_INT 26
12861: PUSH
12862: LD_INT 30
12864: PUSH
12865: LD_INT 31
12867: PUSH
12868: LD_INT 32
12870: PUSH
12871: LD_INT 33
12873: PUSH
12874: LD_INT 34
12876: PUSH
12877: LD_INT 35
12879: PUSH
12880: LD_INT 36
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: PUSH
12906: LD_INT 101
12908: PUSH
12909: LD_INT 102
12911: PUSH
12912: LD_INT 103
12914: PUSH
12915: LD_INT 106
12917: PUSH
12918: LD_INT 108
12920: PUSH
12921: LD_INT 112
12923: PUSH
12924: LD_INT 113
12926: PUSH
12927: LD_INT 114
12929: PUSH
12930: LD_INT 115
12932: PUSH
12933: LD_INT 116
12935: PUSH
12936: LD_INT 117
12938: PUSH
12939: LD_INT 118
12941: PUSH
12942: EMPTY
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: ST_TO_ADDR
12960: GO 13203
12962: LD_INT 19
12964: DOUBLE
12965: EQUAL
12966: IFTRUE 12970
12968: GO 13202
12970: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12971: LD_ADDR_VAR 0 2
12975: PUSH
12976: LD_INT 1
12978: PUSH
12979: LD_INT 2
12981: PUSH
12982: LD_INT 3
12984: PUSH
12985: LD_INT 4
12987: PUSH
12988: LD_INT 5
12990: PUSH
12991: LD_INT 6
12993: PUSH
12994: LD_INT 7
12996: PUSH
12997: LD_INT 8
12999: PUSH
13000: LD_INT 9
13002: PUSH
13003: LD_INT 10
13005: PUSH
13006: LD_INT 11
13008: PUSH
13009: LD_INT 12
13011: PUSH
13012: LD_INT 13
13014: PUSH
13015: LD_INT 14
13017: PUSH
13018: LD_INT 15
13020: PUSH
13021: LD_INT 16
13023: PUSH
13024: LD_INT 17
13026: PUSH
13027: LD_INT 18
13029: PUSH
13030: LD_INT 19
13032: PUSH
13033: LD_INT 20
13035: PUSH
13036: LD_INT 21
13038: PUSH
13039: LD_INT 22
13041: PUSH
13042: LD_INT 23
13044: PUSH
13045: LD_INT 24
13047: PUSH
13048: LD_INT 25
13050: PUSH
13051: LD_INT 26
13053: PUSH
13054: LD_INT 27
13056: PUSH
13057: LD_INT 28
13059: PUSH
13060: LD_INT 29
13062: PUSH
13063: LD_INT 30
13065: PUSH
13066: LD_INT 31
13068: PUSH
13069: LD_INT 32
13071: PUSH
13072: LD_INT 33
13074: PUSH
13075: LD_INT 34
13077: PUSH
13078: LD_INT 35
13080: PUSH
13081: LD_INT 36
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 101
13124: PUSH
13125: LD_INT 102
13127: PUSH
13128: LD_INT 103
13130: PUSH
13131: LD_INT 104
13133: PUSH
13134: LD_INT 105
13136: PUSH
13137: LD_INT 106
13139: PUSH
13140: LD_INT 107
13142: PUSH
13143: LD_INT 108
13145: PUSH
13146: LD_INT 109
13148: PUSH
13149: LD_INT 110
13151: PUSH
13152: LD_INT 111
13154: PUSH
13155: LD_INT 112
13157: PUSH
13158: LD_INT 113
13160: PUSH
13161: LD_INT 114
13163: PUSH
13164: LD_INT 115
13166: PUSH
13167: LD_INT 116
13169: PUSH
13170: LD_INT 117
13172: PUSH
13173: LD_INT 118
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: LIST
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: ST_TO_ADDR
13200: GO 13203
13202: POP
// end else
13203: GO 13434
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13205: LD_ADDR_VAR 0 2
13209: PUSH
13210: LD_INT 1
13212: PUSH
13213: LD_INT 2
13215: PUSH
13216: LD_INT 3
13218: PUSH
13219: LD_INT 4
13221: PUSH
13222: LD_INT 5
13224: PUSH
13225: LD_INT 6
13227: PUSH
13228: LD_INT 7
13230: PUSH
13231: LD_INT 8
13233: PUSH
13234: LD_INT 9
13236: PUSH
13237: LD_INT 10
13239: PUSH
13240: LD_INT 11
13242: PUSH
13243: LD_INT 12
13245: PUSH
13246: LD_INT 13
13248: PUSH
13249: LD_INT 14
13251: PUSH
13252: LD_INT 15
13254: PUSH
13255: LD_INT 16
13257: PUSH
13258: LD_INT 17
13260: PUSH
13261: LD_INT 18
13263: PUSH
13264: LD_INT 19
13266: PUSH
13267: LD_INT 20
13269: PUSH
13270: LD_INT 21
13272: PUSH
13273: LD_INT 22
13275: PUSH
13276: LD_INT 23
13278: PUSH
13279: LD_INT 24
13281: PUSH
13282: LD_INT 25
13284: PUSH
13285: LD_INT 26
13287: PUSH
13288: LD_INT 27
13290: PUSH
13291: LD_INT 28
13293: PUSH
13294: LD_INT 29
13296: PUSH
13297: LD_INT 30
13299: PUSH
13300: LD_INT 31
13302: PUSH
13303: LD_INT 32
13305: PUSH
13306: LD_INT 33
13308: PUSH
13309: LD_INT 34
13311: PUSH
13312: LD_INT 35
13314: PUSH
13315: LD_INT 36
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: PUSH
13356: LD_INT 101
13358: PUSH
13359: LD_INT 102
13361: PUSH
13362: LD_INT 103
13364: PUSH
13365: LD_INT 104
13367: PUSH
13368: LD_INT 105
13370: PUSH
13371: LD_INT 106
13373: PUSH
13374: LD_INT 107
13376: PUSH
13377: LD_INT 108
13379: PUSH
13380: LD_INT 109
13382: PUSH
13383: LD_INT 110
13385: PUSH
13386: LD_INT 111
13388: PUSH
13389: LD_INT 112
13391: PUSH
13392: LD_INT 113
13394: PUSH
13395: LD_INT 114
13397: PUSH
13398: LD_INT 115
13400: PUSH
13401: LD_INT 116
13403: PUSH
13404: LD_INT 117
13406: PUSH
13407: LD_INT 118
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: ST_TO_ADDR
// if result then
13434: LD_VAR 0 2
13438: IFFALSE 14224
// begin normal :=  ;
13440: LD_ADDR_VAR 0 5
13444: PUSH
13445: LD_STRING 
13447: ST_TO_ADDR
// hardcore :=  ;
13448: LD_ADDR_VAR 0 6
13452: PUSH
13453: LD_STRING 
13455: ST_TO_ADDR
// active :=  ;
13456: LD_ADDR_VAR 0 7
13460: PUSH
13461: LD_STRING 
13463: ST_TO_ADDR
// for i = 1 to normalCounter do
13464: LD_ADDR_VAR 0 8
13468: PUSH
13469: DOUBLE
13470: LD_INT 1
13472: DEC
13473: ST_TO_ADDR
13474: LD_EXP 31
13478: PUSH
13479: FOR_TO
13480: IFFALSE 13581
// begin tmp := 0 ;
13482: LD_ADDR_VAR 0 3
13486: PUSH
13487: LD_STRING 0
13489: ST_TO_ADDR
// if result [ 1 ] then
13490: LD_VAR 0 2
13494: PUSH
13495: LD_INT 1
13497: ARRAY
13498: IFFALSE 13563
// if result [ 1 ] [ 1 ] = i then
13500: LD_VAR 0 2
13504: PUSH
13505: LD_INT 1
13507: ARRAY
13508: PUSH
13509: LD_INT 1
13511: ARRAY
13512: PUSH
13513: LD_VAR 0 8
13517: EQUAL
13518: IFFALSE 13563
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13520: LD_ADDR_VAR 0 2
13524: PUSH
13525: LD_VAR 0 2
13529: PPUSH
13530: LD_INT 1
13532: PPUSH
13533: LD_VAR 0 2
13537: PUSH
13538: LD_INT 1
13540: ARRAY
13541: PPUSH
13542: LD_INT 1
13544: PPUSH
13545: CALL_OW 3
13549: PPUSH
13550: CALL_OW 1
13554: ST_TO_ADDR
// tmp := 1 ;
13555: LD_ADDR_VAR 0 3
13559: PUSH
13560: LD_STRING 1
13562: ST_TO_ADDR
// end ; normal := normal & tmp ;
13563: LD_ADDR_VAR 0 5
13567: PUSH
13568: LD_VAR 0 5
13572: PUSH
13573: LD_VAR 0 3
13577: STR
13578: ST_TO_ADDR
// end ;
13579: GO 13479
13581: POP
13582: POP
// for i = 1 to hardcoreCounter do
13583: LD_ADDR_VAR 0 8
13587: PUSH
13588: DOUBLE
13589: LD_INT 1
13591: DEC
13592: ST_TO_ADDR
13593: LD_EXP 32
13597: PUSH
13598: FOR_TO
13599: IFFALSE 13704
// begin tmp := 0 ;
13601: LD_ADDR_VAR 0 3
13605: PUSH
13606: LD_STRING 0
13608: ST_TO_ADDR
// if result [ 2 ] then
13609: LD_VAR 0 2
13613: PUSH
13614: LD_INT 2
13616: ARRAY
13617: IFFALSE 13686
// if result [ 2 ] [ 1 ] = 100 + i then
13619: LD_VAR 0 2
13623: PUSH
13624: LD_INT 2
13626: ARRAY
13627: PUSH
13628: LD_INT 1
13630: ARRAY
13631: PUSH
13632: LD_INT 100
13634: PUSH
13635: LD_VAR 0 8
13639: PLUS
13640: EQUAL
13641: IFFALSE 13686
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13643: LD_ADDR_VAR 0 2
13647: PUSH
13648: LD_VAR 0 2
13652: PPUSH
13653: LD_INT 2
13655: PPUSH
13656: LD_VAR 0 2
13660: PUSH
13661: LD_INT 2
13663: ARRAY
13664: PPUSH
13665: LD_INT 1
13667: PPUSH
13668: CALL_OW 3
13672: PPUSH
13673: CALL_OW 1
13677: ST_TO_ADDR
// tmp := 1 ;
13678: LD_ADDR_VAR 0 3
13682: PUSH
13683: LD_STRING 1
13685: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13686: LD_ADDR_VAR 0 6
13690: PUSH
13691: LD_VAR 0 6
13695: PUSH
13696: LD_VAR 0 3
13700: STR
13701: ST_TO_ADDR
// end ;
13702: GO 13598
13704: POP
13705: POP
// if isGameLoad then
13706: LD_VAR 0 1
13710: IFFALSE 14185
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13712: LD_ADDR_VAR 0 4
13716: PUSH
13717: LD_EXP 35
13721: PUSH
13722: LD_EXP 34
13726: PUSH
13727: LD_EXP 36
13731: PUSH
13732: LD_EXP 33
13736: PUSH
13737: LD_EXP 37
13741: PUSH
13742: LD_EXP 38
13746: PUSH
13747: LD_EXP 39
13751: PUSH
13752: LD_EXP 40
13756: PUSH
13757: LD_EXP 41
13761: PUSH
13762: LD_EXP 42
13766: PUSH
13767: LD_EXP 43
13771: PUSH
13772: LD_EXP 44
13776: PUSH
13777: LD_EXP 45
13781: PUSH
13782: LD_EXP 46
13786: PUSH
13787: LD_EXP 54
13791: PUSH
13792: LD_EXP 55
13796: PUSH
13797: LD_EXP 56
13801: PUSH
13802: LD_EXP 57
13806: PUSH
13807: LD_EXP 59
13811: PUSH
13812: LD_EXP 60
13816: PUSH
13817: LD_EXP 61
13821: PUSH
13822: LD_EXP 64
13826: PUSH
13827: LD_EXP 66
13831: PUSH
13832: LD_EXP 67
13836: PUSH
13837: LD_EXP 68
13841: PUSH
13842: LD_EXP 70
13846: PUSH
13847: LD_EXP 71
13851: PUSH
13852: LD_EXP 74
13856: PUSH
13857: LD_EXP 75
13861: PUSH
13862: LD_EXP 76
13866: PUSH
13867: LD_EXP 77
13871: PUSH
13872: LD_EXP 78
13876: PUSH
13877: LD_EXP 79
13881: PUSH
13882: LD_EXP 80
13886: PUSH
13887: LD_EXP 81
13891: PUSH
13892: LD_EXP 82
13896: PUSH
13897: LD_EXP 47
13901: PUSH
13902: LD_EXP 48
13906: PUSH
13907: LD_EXP 51
13911: PUSH
13912: LD_EXP 52
13916: PUSH
13917: LD_EXP 53
13921: PUSH
13922: LD_EXP 49
13926: PUSH
13927: LD_EXP 50
13931: PUSH
13932: LD_EXP 58
13936: PUSH
13937: LD_EXP 62
13941: PUSH
13942: LD_EXP 63
13946: PUSH
13947: LD_EXP 65
13951: PUSH
13952: LD_EXP 69
13956: PUSH
13957: LD_EXP 72
13961: PUSH
13962: LD_EXP 73
13966: PUSH
13967: LD_EXP 83
13971: PUSH
13972: LD_EXP 84
13976: PUSH
13977: LD_EXP 85
13981: PUSH
13982: LD_EXP 86
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: ST_TO_ADDR
// tmp :=  ;
14043: LD_ADDR_VAR 0 3
14047: PUSH
14048: LD_STRING 
14050: ST_TO_ADDR
// for i = 1 to normalCounter do
14051: LD_ADDR_VAR 0 8
14055: PUSH
14056: DOUBLE
14057: LD_INT 1
14059: DEC
14060: ST_TO_ADDR
14061: LD_EXP 31
14065: PUSH
14066: FOR_TO
14067: IFFALSE 14103
// begin if flags [ i ] then
14069: LD_VAR 0 4
14073: PUSH
14074: LD_VAR 0 8
14078: ARRAY
14079: IFFALSE 14101
// tmp := tmp & i & ; ;
14081: LD_ADDR_VAR 0 3
14085: PUSH
14086: LD_VAR 0 3
14090: PUSH
14091: LD_VAR 0 8
14095: STR
14096: PUSH
14097: LD_STRING ;
14099: STR
14100: ST_TO_ADDR
// end ;
14101: GO 14066
14103: POP
14104: POP
// for i = 1 to hardcoreCounter do
14105: LD_ADDR_VAR 0 8
14109: PUSH
14110: DOUBLE
14111: LD_INT 1
14113: DEC
14114: ST_TO_ADDR
14115: LD_EXP 32
14119: PUSH
14120: FOR_TO
14121: IFFALSE 14167
// begin if flags [ normalCounter + i ] then
14123: LD_VAR 0 4
14127: PUSH
14128: LD_EXP 31
14132: PUSH
14133: LD_VAR 0 8
14137: PLUS
14138: ARRAY
14139: IFFALSE 14165
// tmp := tmp & ( 100 + i ) & ; ;
14141: LD_ADDR_VAR 0 3
14145: PUSH
14146: LD_VAR 0 3
14150: PUSH
14151: LD_INT 100
14153: PUSH
14154: LD_VAR 0 8
14158: PLUS
14159: STR
14160: PUSH
14161: LD_STRING ;
14163: STR
14164: ST_TO_ADDR
// end ;
14165: GO 14120
14167: POP
14168: POP
// if tmp then
14169: LD_VAR 0 3
14173: IFFALSE 14185
// active := tmp ;
14175: LD_ADDR_VAR 0 7
14179: PUSH
14180: LD_VAR 0 3
14184: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14185: LD_STRING getStreamItemsFromMission("
14187: PUSH
14188: LD_VAR 0 5
14192: STR
14193: PUSH
14194: LD_STRING ","
14196: STR
14197: PUSH
14198: LD_VAR 0 6
14202: STR
14203: PUSH
14204: LD_STRING ","
14206: STR
14207: PUSH
14208: LD_VAR 0 7
14212: STR
14213: PUSH
14214: LD_STRING ")
14216: STR
14217: PPUSH
14218: CALL_OW 559
// end else
14222: GO 14231
// ToLua ( getStreamItemsFromMission("","","") ) ;
14224: LD_STRING getStreamItemsFromMission("","","")
14226: PPUSH
14227: CALL_OW 559
// end ;
14231: LD_VAR 0 2
14235: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14236: LD_EXP 30
14240: PUSH
14241: LD_EXP 35
14245: AND
14246: IFFALSE 14370
14248: GO 14250
14250: DISABLE
14251: LD_INT 0
14253: PPUSH
14254: PPUSH
// begin enable ;
14255: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14256: LD_ADDR_VAR 0 2
14260: PUSH
14261: LD_INT 22
14263: PUSH
14264: LD_OWVAR 2
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: LD_INT 2
14275: PUSH
14276: LD_INT 34
14278: PUSH
14279: LD_INT 7
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 34
14288: PUSH
14289: LD_INT 45
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 34
14298: PUSH
14299: LD_INT 28
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: LD_INT 34
14308: PUSH
14309: LD_INT 47
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PPUSH
14327: CALL_OW 69
14331: ST_TO_ADDR
// if not tmp then
14332: LD_VAR 0 2
14336: NOT
14337: IFFALSE 14341
// exit ;
14339: GO 14370
// for i in tmp do
14341: LD_ADDR_VAR 0 1
14345: PUSH
14346: LD_VAR 0 2
14350: PUSH
14351: FOR_IN
14352: IFFALSE 14368
// begin SetLives ( i , 0 ) ;
14354: LD_VAR 0 1
14358: PPUSH
14359: LD_INT 0
14361: PPUSH
14362: CALL_OW 234
// end ;
14366: GO 14351
14368: POP
14369: POP
// end ;
14370: PPOPN 2
14372: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14373: LD_EXP 30
14377: PUSH
14378: LD_EXP 36
14382: AND
14383: IFFALSE 14467
14385: GO 14387
14387: DISABLE
14388: LD_INT 0
14390: PPUSH
14391: PPUSH
// begin enable ;
14392: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14393: LD_ADDR_VAR 0 2
14397: PUSH
14398: LD_INT 22
14400: PUSH
14401: LD_OWVAR 2
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: LD_INT 32
14412: PUSH
14413: LD_INT 3
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PUSH
14420: EMPTY
14421: LIST
14422: LIST
14423: PPUSH
14424: CALL_OW 69
14428: ST_TO_ADDR
// if not tmp then
14429: LD_VAR 0 2
14433: NOT
14434: IFFALSE 14438
// exit ;
14436: GO 14467
// for i in tmp do
14438: LD_ADDR_VAR 0 1
14442: PUSH
14443: LD_VAR 0 2
14447: PUSH
14448: FOR_IN
14449: IFFALSE 14465
// begin SetLives ( i , 0 ) ;
14451: LD_VAR 0 1
14455: PPUSH
14456: LD_INT 0
14458: PPUSH
14459: CALL_OW 234
// end ;
14463: GO 14448
14465: POP
14466: POP
// end ;
14467: PPOPN 2
14469: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14470: LD_EXP 30
14474: PUSH
14475: LD_EXP 33
14479: AND
14480: IFFALSE 14573
14482: GO 14484
14484: DISABLE
14485: LD_INT 0
14487: PPUSH
// begin enable ;
14488: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14489: LD_ADDR_VAR 0 1
14493: PUSH
14494: LD_INT 22
14496: PUSH
14497: LD_OWVAR 2
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 2
14508: PUSH
14509: LD_INT 25
14511: PUSH
14512: LD_INT 5
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: PUSH
14519: LD_INT 25
14521: PUSH
14522: LD_INT 9
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PUSH
14529: LD_INT 25
14531: PUSH
14532: LD_INT 8
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PPUSH
14549: CALL_OW 69
14553: PUSH
14554: FOR_IN
14555: IFFALSE 14571
// begin SetClass ( i , 1 ) ;
14557: LD_VAR 0 1
14561: PPUSH
14562: LD_INT 1
14564: PPUSH
14565: CALL_OW 336
// end ;
14569: GO 14554
14571: POP
14572: POP
// end ;
14573: PPOPN 1
14575: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14576: LD_EXP 30
14580: PUSH
14581: LD_EXP 34
14585: AND
14586: PUSH
14587: LD_OWVAR 65
14591: PUSH
14592: LD_INT 7
14594: LESS
14595: AND
14596: IFFALSE 14610
14598: GO 14600
14600: DISABLE
// begin enable ;
14601: ENABLE
// game_speed := 7 ;
14602: LD_ADDR_OWVAR 65
14606: PUSH
14607: LD_INT 7
14609: ST_TO_ADDR
// end ;
14610: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14611: LD_EXP 30
14615: PUSH
14616: LD_EXP 37
14620: AND
14621: IFFALSE 14823
14623: GO 14625
14625: DISABLE
14626: LD_INT 0
14628: PPUSH
14629: PPUSH
14630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14631: LD_ADDR_VAR 0 3
14635: PUSH
14636: LD_INT 81
14638: PUSH
14639: LD_OWVAR 2
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: PUSH
14648: LD_INT 21
14650: PUSH
14651: LD_INT 1
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: PPUSH
14662: CALL_OW 69
14666: ST_TO_ADDR
// if not tmp then
14667: LD_VAR 0 3
14671: NOT
14672: IFFALSE 14676
// exit ;
14674: GO 14823
// if tmp > 5 then
14676: LD_VAR 0 3
14680: PUSH
14681: LD_INT 5
14683: GREATER
14684: IFFALSE 14696
// k := 5 else
14686: LD_ADDR_VAR 0 2
14690: PUSH
14691: LD_INT 5
14693: ST_TO_ADDR
14694: GO 14706
// k := tmp ;
14696: LD_ADDR_VAR 0 2
14700: PUSH
14701: LD_VAR 0 3
14705: ST_TO_ADDR
// for i := 1 to k do
14706: LD_ADDR_VAR 0 1
14710: PUSH
14711: DOUBLE
14712: LD_INT 1
14714: DEC
14715: ST_TO_ADDR
14716: LD_VAR 0 2
14720: PUSH
14721: FOR_TO
14722: IFFALSE 14821
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14724: LD_VAR 0 3
14728: PUSH
14729: LD_VAR 0 1
14733: ARRAY
14734: PPUSH
14735: LD_VAR 0 1
14739: PUSH
14740: LD_INT 4
14742: MOD
14743: PUSH
14744: LD_INT 1
14746: PLUS
14747: PPUSH
14748: CALL_OW 259
14752: PUSH
14753: LD_INT 10
14755: LESS
14756: IFFALSE 14819
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14758: LD_VAR 0 3
14762: PUSH
14763: LD_VAR 0 1
14767: ARRAY
14768: PPUSH
14769: LD_VAR 0 1
14773: PUSH
14774: LD_INT 4
14776: MOD
14777: PUSH
14778: LD_INT 1
14780: PLUS
14781: PPUSH
14782: LD_VAR 0 3
14786: PUSH
14787: LD_VAR 0 1
14791: ARRAY
14792: PPUSH
14793: LD_VAR 0 1
14797: PUSH
14798: LD_INT 4
14800: MOD
14801: PUSH
14802: LD_INT 1
14804: PLUS
14805: PPUSH
14806: CALL_OW 259
14810: PUSH
14811: LD_INT 1
14813: PLUS
14814: PPUSH
14815: CALL_OW 237
14819: GO 14721
14821: POP
14822: POP
// end ;
14823: PPOPN 3
14825: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14826: LD_EXP 30
14830: PUSH
14831: LD_EXP 38
14835: AND
14836: IFFALSE 14856
14838: GO 14840
14840: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14841: LD_INT 4
14843: PPUSH
14844: LD_OWVAR 2
14848: PPUSH
14849: LD_INT 0
14851: PPUSH
14852: CALL_OW 324
14856: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14857: LD_EXP 30
14861: PUSH
14862: LD_EXP 67
14866: AND
14867: IFFALSE 14887
14869: GO 14871
14871: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14872: LD_INT 19
14874: PPUSH
14875: LD_OWVAR 2
14879: PPUSH
14880: LD_INT 0
14882: PPUSH
14883: CALL_OW 324
14887: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14888: LD_EXP 30
14892: PUSH
14893: LD_EXP 39
14897: AND
14898: IFFALSE 15000
14900: GO 14902
14902: DISABLE
14903: LD_INT 0
14905: PPUSH
14906: PPUSH
// begin enable ;
14907: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14908: LD_ADDR_VAR 0 2
14912: PUSH
14913: LD_INT 22
14915: PUSH
14916: LD_OWVAR 2
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PUSH
14925: LD_INT 2
14927: PUSH
14928: LD_INT 34
14930: PUSH
14931: LD_INT 11
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: LD_INT 34
14940: PUSH
14941: LD_INT 30
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: LIST
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PPUSH
14957: CALL_OW 69
14961: ST_TO_ADDR
// if not tmp then
14962: LD_VAR 0 2
14966: NOT
14967: IFFALSE 14971
// exit ;
14969: GO 15000
// for i in tmp do
14971: LD_ADDR_VAR 0 1
14975: PUSH
14976: LD_VAR 0 2
14980: PUSH
14981: FOR_IN
14982: IFFALSE 14998
// begin SetLives ( i , 0 ) ;
14984: LD_VAR 0 1
14988: PPUSH
14989: LD_INT 0
14991: PPUSH
14992: CALL_OW 234
// end ;
14996: GO 14981
14998: POP
14999: POP
// end ;
15000: PPOPN 2
15002: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15003: LD_EXP 30
15007: PUSH
15008: LD_EXP 40
15012: AND
15013: IFFALSE 15033
15015: GO 15017
15017: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15018: LD_INT 32
15020: PPUSH
15021: LD_OWVAR 2
15025: PPUSH
15026: LD_INT 0
15028: PPUSH
15029: CALL_OW 324
15033: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15034: LD_EXP 30
15038: PUSH
15039: LD_EXP 41
15043: AND
15044: IFFALSE 15225
15046: GO 15048
15048: DISABLE
15049: LD_INT 0
15051: PPUSH
15052: PPUSH
15053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15054: LD_ADDR_VAR 0 2
15058: PUSH
15059: LD_INT 22
15061: PUSH
15062: LD_OWVAR 2
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PUSH
15071: LD_INT 33
15073: PUSH
15074: LD_INT 3
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: PPUSH
15085: CALL_OW 69
15089: ST_TO_ADDR
// if not tmp then
15090: LD_VAR 0 2
15094: NOT
15095: IFFALSE 15099
// exit ;
15097: GO 15225
// side := 0 ;
15099: LD_ADDR_VAR 0 3
15103: PUSH
15104: LD_INT 0
15106: ST_TO_ADDR
// for i := 1 to 8 do
15107: LD_ADDR_VAR 0 1
15111: PUSH
15112: DOUBLE
15113: LD_INT 1
15115: DEC
15116: ST_TO_ADDR
15117: LD_INT 8
15119: PUSH
15120: FOR_TO
15121: IFFALSE 15169
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15123: LD_OWVAR 2
15127: PUSH
15128: LD_VAR 0 1
15132: NONEQUAL
15133: PUSH
15134: LD_OWVAR 2
15138: PPUSH
15139: LD_VAR 0 1
15143: PPUSH
15144: CALL_OW 81
15148: PUSH
15149: LD_INT 2
15151: EQUAL
15152: AND
15153: IFFALSE 15167
// begin side := i ;
15155: LD_ADDR_VAR 0 3
15159: PUSH
15160: LD_VAR 0 1
15164: ST_TO_ADDR
// break ;
15165: GO 15169
// end ;
15167: GO 15120
15169: POP
15170: POP
// if not side then
15171: LD_VAR 0 3
15175: NOT
15176: IFFALSE 15180
// exit ;
15178: GO 15225
// for i := 1 to tmp do
15180: LD_ADDR_VAR 0 1
15184: PUSH
15185: DOUBLE
15186: LD_INT 1
15188: DEC
15189: ST_TO_ADDR
15190: LD_VAR 0 2
15194: PUSH
15195: FOR_TO
15196: IFFALSE 15223
// if Prob ( 60 ) then
15198: LD_INT 60
15200: PPUSH
15201: CALL_OW 13
15205: IFFALSE 15221
// SetSide ( i , side ) ;
15207: LD_VAR 0 1
15211: PPUSH
15212: LD_VAR 0 3
15216: PPUSH
15217: CALL_OW 235
15221: GO 15195
15223: POP
15224: POP
// end ;
15225: PPOPN 3
15227: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15228: LD_EXP 30
15232: PUSH
15233: LD_EXP 43
15237: AND
15238: IFFALSE 15357
15240: GO 15242
15242: DISABLE
15243: LD_INT 0
15245: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15246: LD_ADDR_VAR 0 1
15250: PUSH
15251: LD_INT 22
15253: PUSH
15254: LD_OWVAR 2
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: PUSH
15263: LD_INT 21
15265: PUSH
15266: LD_INT 1
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: LD_INT 3
15275: PUSH
15276: LD_INT 23
15278: PUSH
15279: LD_INT 0
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: LIST
15294: PPUSH
15295: CALL_OW 69
15299: PUSH
15300: FOR_IN
15301: IFFALSE 15355
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15303: LD_VAR 0 1
15307: PPUSH
15308: CALL_OW 257
15312: PUSH
15313: LD_INT 1
15315: PUSH
15316: LD_INT 2
15318: PUSH
15319: LD_INT 3
15321: PUSH
15322: LD_INT 4
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: IN
15331: IFFALSE 15353
// SetClass ( un , rand ( 1 , 4 ) ) ;
15333: LD_VAR 0 1
15337: PPUSH
15338: LD_INT 1
15340: PPUSH
15341: LD_INT 4
15343: PPUSH
15344: CALL_OW 12
15348: PPUSH
15349: CALL_OW 336
15353: GO 15300
15355: POP
15356: POP
// end ;
15357: PPOPN 1
15359: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15360: LD_EXP 30
15364: PUSH
15365: LD_EXP 42
15369: AND
15370: IFFALSE 15449
15372: GO 15374
15374: DISABLE
15375: LD_INT 0
15377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15378: LD_ADDR_VAR 0 1
15382: PUSH
15383: LD_INT 22
15385: PUSH
15386: LD_OWVAR 2
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 21
15397: PUSH
15398: LD_INT 3
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: PPUSH
15409: CALL_OW 69
15413: ST_TO_ADDR
// if not tmp then
15414: LD_VAR 0 1
15418: NOT
15419: IFFALSE 15423
// exit ;
15421: GO 15449
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15423: LD_VAR 0 1
15427: PUSH
15428: LD_INT 1
15430: PPUSH
15431: LD_VAR 0 1
15435: PPUSH
15436: CALL_OW 12
15440: ARRAY
15441: PPUSH
15442: LD_INT 100
15444: PPUSH
15445: CALL_OW 234
// end ;
15449: PPOPN 1
15451: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15452: LD_EXP 30
15456: PUSH
15457: LD_EXP 44
15461: AND
15462: IFFALSE 15560
15464: GO 15466
15466: DISABLE
15467: LD_INT 0
15469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15470: LD_ADDR_VAR 0 1
15474: PUSH
15475: LD_INT 22
15477: PUSH
15478: LD_OWVAR 2
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 21
15489: PUSH
15490: LD_INT 1
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PPUSH
15501: CALL_OW 69
15505: ST_TO_ADDR
// if not tmp then
15506: LD_VAR 0 1
15510: NOT
15511: IFFALSE 15515
// exit ;
15513: GO 15560
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15515: LD_VAR 0 1
15519: PUSH
15520: LD_INT 1
15522: PPUSH
15523: LD_VAR 0 1
15527: PPUSH
15528: CALL_OW 12
15532: ARRAY
15533: PPUSH
15534: LD_INT 1
15536: PPUSH
15537: LD_INT 4
15539: PPUSH
15540: CALL_OW 12
15544: PPUSH
15545: LD_INT 3000
15547: PPUSH
15548: LD_INT 9000
15550: PPUSH
15551: CALL_OW 12
15555: PPUSH
15556: CALL_OW 492
// end ;
15560: PPOPN 1
15562: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15563: LD_EXP 30
15567: PUSH
15568: LD_EXP 45
15572: AND
15573: IFFALSE 15593
15575: GO 15577
15577: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15578: LD_INT 1
15580: PPUSH
15581: LD_OWVAR 2
15585: PPUSH
15586: LD_INT 0
15588: PPUSH
15589: CALL_OW 324
15593: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15594: LD_EXP 30
15598: PUSH
15599: LD_EXP 46
15603: AND
15604: IFFALSE 15687
15606: GO 15608
15608: DISABLE
15609: LD_INT 0
15611: PPUSH
15612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15613: LD_ADDR_VAR 0 2
15617: PUSH
15618: LD_INT 22
15620: PUSH
15621: LD_OWVAR 2
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: PUSH
15630: LD_INT 21
15632: PUSH
15633: LD_INT 3
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PPUSH
15644: CALL_OW 69
15648: ST_TO_ADDR
// if not tmp then
15649: LD_VAR 0 2
15653: NOT
15654: IFFALSE 15658
// exit ;
15656: GO 15687
// for i in tmp do
15658: LD_ADDR_VAR 0 1
15662: PUSH
15663: LD_VAR 0 2
15667: PUSH
15668: FOR_IN
15669: IFFALSE 15685
// SetBLevel ( i , 10 ) ;
15671: LD_VAR 0 1
15675: PPUSH
15676: LD_INT 10
15678: PPUSH
15679: CALL_OW 241
15683: GO 15668
15685: POP
15686: POP
// end ;
15687: PPOPN 2
15689: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15690: LD_EXP 30
15694: PUSH
15695: LD_EXP 47
15699: AND
15700: IFFALSE 15811
15702: GO 15704
15704: DISABLE
15705: LD_INT 0
15707: PPUSH
15708: PPUSH
15709: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15710: LD_ADDR_VAR 0 3
15714: PUSH
15715: LD_INT 22
15717: PUSH
15718: LD_OWVAR 2
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: PUSH
15727: LD_INT 25
15729: PUSH
15730: LD_INT 1
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PPUSH
15741: CALL_OW 69
15745: ST_TO_ADDR
// if not tmp then
15746: LD_VAR 0 3
15750: NOT
15751: IFFALSE 15755
// exit ;
15753: GO 15811
// un := tmp [ rand ( 1 , tmp ) ] ;
15755: LD_ADDR_VAR 0 2
15759: PUSH
15760: LD_VAR 0 3
15764: PUSH
15765: LD_INT 1
15767: PPUSH
15768: LD_VAR 0 3
15772: PPUSH
15773: CALL_OW 12
15777: ARRAY
15778: ST_TO_ADDR
// if Crawls ( un ) then
15779: LD_VAR 0 2
15783: PPUSH
15784: CALL_OW 318
15788: IFFALSE 15799
// ComWalk ( un ) ;
15790: LD_VAR 0 2
15794: PPUSH
15795: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15799: LD_VAR 0 2
15803: PPUSH
15804: LD_INT 5
15806: PPUSH
15807: CALL_OW 336
// end ;
15811: PPOPN 3
15813: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15814: LD_EXP 30
15818: PUSH
15819: LD_EXP 48
15823: AND
15824: PUSH
15825: LD_OWVAR 67
15829: PUSH
15830: LD_INT 4
15832: LESS
15833: AND
15834: IFFALSE 15853
15836: GO 15838
15838: DISABLE
// begin Difficulty := Difficulty + 1 ;
15839: LD_ADDR_OWVAR 67
15843: PUSH
15844: LD_OWVAR 67
15848: PUSH
15849: LD_INT 1
15851: PLUS
15852: ST_TO_ADDR
// end ;
15853: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15854: LD_EXP 30
15858: PUSH
15859: LD_EXP 49
15863: AND
15864: IFFALSE 15967
15866: GO 15868
15868: DISABLE
15869: LD_INT 0
15871: PPUSH
// begin for i := 1 to 5 do
15872: LD_ADDR_VAR 0 1
15876: PUSH
15877: DOUBLE
15878: LD_INT 1
15880: DEC
15881: ST_TO_ADDR
15882: LD_INT 5
15884: PUSH
15885: FOR_TO
15886: IFFALSE 15965
// begin uc_nation := nation_nature ;
15888: LD_ADDR_OWVAR 21
15892: PUSH
15893: LD_INT 0
15895: ST_TO_ADDR
// uc_side := 0 ;
15896: LD_ADDR_OWVAR 20
15900: PUSH
15901: LD_INT 0
15903: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15904: LD_ADDR_OWVAR 29
15908: PUSH
15909: LD_INT 12
15911: PUSH
15912: LD_INT 12
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: ST_TO_ADDR
// hc_agressivity := 20 ;
15919: LD_ADDR_OWVAR 35
15923: PUSH
15924: LD_INT 20
15926: ST_TO_ADDR
// hc_class := class_tiger ;
15927: LD_ADDR_OWVAR 28
15931: PUSH
15932: LD_INT 14
15934: ST_TO_ADDR
// hc_gallery :=  ;
15935: LD_ADDR_OWVAR 33
15939: PUSH
15940: LD_STRING 
15942: ST_TO_ADDR
// hc_name :=  ;
15943: LD_ADDR_OWVAR 26
15947: PUSH
15948: LD_STRING 
15950: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15951: CALL_OW 44
15955: PPUSH
15956: LD_INT 0
15958: PPUSH
15959: CALL_OW 51
// end ;
15963: GO 15885
15965: POP
15966: POP
// end ;
15967: PPOPN 1
15969: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15970: LD_EXP 30
15974: PUSH
15975: LD_EXP 50
15979: AND
15980: IFFALSE 15989
15982: GO 15984
15984: DISABLE
// StreamSibBomb ;
15985: CALL 15990 0 0
15989: END
// export function StreamSibBomb ; var i , x , y ; begin
15990: LD_INT 0
15992: PPUSH
15993: PPUSH
15994: PPUSH
15995: PPUSH
// result := false ;
15996: LD_ADDR_VAR 0 1
16000: PUSH
16001: LD_INT 0
16003: ST_TO_ADDR
// for i := 1 to 16 do
16004: LD_ADDR_VAR 0 2
16008: PUSH
16009: DOUBLE
16010: LD_INT 1
16012: DEC
16013: ST_TO_ADDR
16014: LD_INT 16
16016: PUSH
16017: FOR_TO
16018: IFFALSE 16217
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16020: LD_ADDR_VAR 0 3
16024: PUSH
16025: LD_INT 10
16027: PUSH
16028: LD_INT 20
16030: PUSH
16031: LD_INT 30
16033: PUSH
16034: LD_INT 40
16036: PUSH
16037: LD_INT 50
16039: PUSH
16040: LD_INT 60
16042: PUSH
16043: LD_INT 70
16045: PUSH
16046: LD_INT 80
16048: PUSH
16049: LD_INT 90
16051: PUSH
16052: LD_INT 100
16054: PUSH
16055: LD_INT 110
16057: PUSH
16058: LD_INT 120
16060: PUSH
16061: LD_INT 130
16063: PUSH
16064: LD_INT 140
16066: PUSH
16067: LD_INT 150
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 1
16089: PPUSH
16090: LD_INT 15
16092: PPUSH
16093: CALL_OW 12
16097: ARRAY
16098: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16099: LD_ADDR_VAR 0 4
16103: PUSH
16104: LD_INT 10
16106: PUSH
16107: LD_INT 20
16109: PUSH
16110: LD_INT 30
16112: PUSH
16113: LD_INT 40
16115: PUSH
16116: LD_INT 50
16118: PUSH
16119: LD_INT 60
16121: PUSH
16122: LD_INT 70
16124: PUSH
16125: LD_INT 80
16127: PUSH
16128: LD_INT 90
16130: PUSH
16131: LD_INT 100
16133: PUSH
16134: LD_INT 110
16136: PUSH
16137: LD_INT 120
16139: PUSH
16140: LD_INT 130
16142: PUSH
16143: LD_INT 140
16145: PUSH
16146: LD_INT 150
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: PUSH
16166: LD_INT 1
16168: PPUSH
16169: LD_INT 15
16171: PPUSH
16172: CALL_OW 12
16176: ARRAY
16177: ST_TO_ADDR
// if ValidHex ( x , y ) then
16178: LD_VAR 0 3
16182: PPUSH
16183: LD_VAR 0 4
16187: PPUSH
16188: CALL_OW 488
16192: IFFALSE 16215
// begin result := [ x , y ] ;
16194: LD_ADDR_VAR 0 1
16198: PUSH
16199: LD_VAR 0 3
16203: PUSH
16204: LD_VAR 0 4
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: ST_TO_ADDR
// break ;
16213: GO 16217
// end ; end ;
16215: GO 16017
16217: POP
16218: POP
// if result then
16219: LD_VAR 0 1
16223: IFFALSE 16283
// begin ToLua ( playSibBomb() ) ;
16225: LD_STRING playSibBomb()
16227: PPUSH
16228: CALL_OW 559
// wait ( 0 0$14 ) ;
16232: LD_INT 490
16234: PPUSH
16235: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16239: LD_VAR 0 1
16243: PUSH
16244: LD_INT 1
16246: ARRAY
16247: PPUSH
16248: LD_VAR 0 1
16252: PUSH
16253: LD_INT 2
16255: ARRAY
16256: PPUSH
16257: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16261: LD_VAR 0 1
16265: PUSH
16266: LD_INT 1
16268: ARRAY
16269: PPUSH
16270: LD_VAR 0 1
16274: PUSH
16275: LD_INT 2
16277: ARRAY
16278: PPUSH
16279: CALL_OW 429
// end ; end ;
16283: LD_VAR 0 1
16287: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16288: LD_EXP 30
16292: PUSH
16293: LD_EXP 52
16297: AND
16298: IFFALSE 16310
16300: GO 16302
16302: DISABLE
// YouLost (  ) ;
16303: LD_STRING 
16305: PPUSH
16306: CALL_OW 104
16310: END
// every 0 0$1 trigger StreamModeActive and sFog do
16311: LD_EXP 30
16315: PUSH
16316: LD_EXP 51
16320: AND
16321: IFFALSE 16335
16323: GO 16325
16325: DISABLE
// FogOff ( your_side ) ;
16326: LD_OWVAR 2
16330: PPUSH
16331: CALL_OW 344
16335: END
// every 0 0$1 trigger StreamModeActive and sSun do
16336: LD_EXP 30
16340: PUSH
16341: LD_EXP 53
16345: AND
16346: IFFALSE 16374
16348: GO 16350
16350: DISABLE
// begin solar_recharge_percent := 0 ;
16351: LD_ADDR_OWVAR 79
16355: PUSH
16356: LD_INT 0
16358: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16359: LD_INT 10500
16361: PPUSH
16362: CALL_OW 67
// solar_recharge_percent := 100 ;
16366: LD_ADDR_OWVAR 79
16370: PUSH
16371: LD_INT 100
16373: ST_TO_ADDR
// end ;
16374: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16375: LD_EXP 30
16379: PUSH
16380: LD_EXP 54
16384: AND
16385: IFFALSE 16624
16387: GO 16389
16389: DISABLE
16390: LD_INT 0
16392: PPUSH
16393: PPUSH
16394: PPUSH
// begin tmp := [ ] ;
16395: LD_ADDR_VAR 0 3
16399: PUSH
16400: EMPTY
16401: ST_TO_ADDR
// for i := 1 to 6 do
16402: LD_ADDR_VAR 0 1
16406: PUSH
16407: DOUBLE
16408: LD_INT 1
16410: DEC
16411: ST_TO_ADDR
16412: LD_INT 6
16414: PUSH
16415: FOR_TO
16416: IFFALSE 16521
// begin uc_nation := nation_nature ;
16418: LD_ADDR_OWVAR 21
16422: PUSH
16423: LD_INT 0
16425: ST_TO_ADDR
// uc_side := 0 ;
16426: LD_ADDR_OWVAR 20
16430: PUSH
16431: LD_INT 0
16433: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16434: LD_ADDR_OWVAR 29
16438: PUSH
16439: LD_INT 12
16441: PUSH
16442: LD_INT 12
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: ST_TO_ADDR
// hc_agressivity := 20 ;
16449: LD_ADDR_OWVAR 35
16453: PUSH
16454: LD_INT 20
16456: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16457: LD_ADDR_OWVAR 28
16461: PUSH
16462: LD_INT 17
16464: ST_TO_ADDR
// hc_gallery :=  ;
16465: LD_ADDR_OWVAR 33
16469: PUSH
16470: LD_STRING 
16472: ST_TO_ADDR
// hc_name :=  ;
16473: LD_ADDR_OWVAR 26
16477: PUSH
16478: LD_STRING 
16480: ST_TO_ADDR
// un := CreateHuman ;
16481: LD_ADDR_VAR 0 2
16485: PUSH
16486: CALL_OW 44
16490: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16491: LD_VAR 0 2
16495: PPUSH
16496: LD_INT 1
16498: PPUSH
16499: CALL_OW 51
// tmp := tmp ^ un ;
16503: LD_ADDR_VAR 0 3
16507: PUSH
16508: LD_VAR 0 3
16512: PUSH
16513: LD_VAR 0 2
16517: ADD
16518: ST_TO_ADDR
// end ;
16519: GO 16415
16521: POP
16522: POP
// repeat wait ( 0 0$1 ) ;
16523: LD_INT 35
16525: PPUSH
16526: CALL_OW 67
// for un in tmp do
16530: LD_ADDR_VAR 0 2
16534: PUSH
16535: LD_VAR 0 3
16539: PUSH
16540: FOR_IN
16541: IFFALSE 16615
// begin if IsDead ( un ) then
16543: LD_VAR 0 2
16547: PPUSH
16548: CALL_OW 301
16552: IFFALSE 16572
// begin tmp := tmp diff un ;
16554: LD_ADDR_VAR 0 3
16558: PUSH
16559: LD_VAR 0 3
16563: PUSH
16564: LD_VAR 0 2
16568: DIFF
16569: ST_TO_ADDR
// continue ;
16570: GO 16540
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16572: LD_VAR 0 2
16576: PPUSH
16577: LD_INT 3
16579: PUSH
16580: LD_INT 22
16582: PUSH
16583: LD_INT 0
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PPUSH
16594: CALL_OW 69
16598: PPUSH
16599: LD_VAR 0 2
16603: PPUSH
16604: CALL_OW 74
16608: PPUSH
16609: CALL_OW 115
// end ;
16613: GO 16540
16615: POP
16616: POP
// until not tmp ;
16617: LD_VAR 0 3
16621: NOT
16622: IFFALSE 16523
// end ;
16624: PPOPN 3
16626: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16627: LD_EXP 30
16631: PUSH
16632: LD_EXP 55
16636: AND
16637: IFFALSE 16691
16639: GO 16641
16641: DISABLE
// begin ToLua ( displayTroll(); ) ;
16642: LD_STRING displayTroll();
16644: PPUSH
16645: CALL_OW 559
// wait ( 3 3$00 ) ;
16649: LD_INT 6300
16651: PPUSH
16652: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16656: LD_STRING hideTroll();
16658: PPUSH
16659: CALL_OW 559
// wait ( 1 1$00 ) ;
16663: LD_INT 2100
16665: PPUSH
16666: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16670: LD_STRING displayTroll();
16672: PPUSH
16673: CALL_OW 559
// wait ( 1 1$00 ) ;
16677: LD_INT 2100
16679: PPUSH
16680: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16684: LD_STRING hideTroll();
16686: PPUSH
16687: CALL_OW 559
// end ;
16691: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16692: LD_EXP 30
16696: PUSH
16697: LD_EXP 56
16701: AND
16702: IFFALSE 16765
16704: GO 16706
16706: DISABLE
16707: LD_INT 0
16709: PPUSH
// begin p := 0 ;
16710: LD_ADDR_VAR 0 1
16714: PUSH
16715: LD_INT 0
16717: ST_TO_ADDR
// repeat game_speed := 1 ;
16718: LD_ADDR_OWVAR 65
16722: PUSH
16723: LD_INT 1
16725: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16726: LD_INT 35
16728: PPUSH
16729: CALL_OW 67
// p := p + 1 ;
16733: LD_ADDR_VAR 0 1
16737: PUSH
16738: LD_VAR 0 1
16742: PUSH
16743: LD_INT 1
16745: PLUS
16746: ST_TO_ADDR
// until p >= 60 ;
16747: LD_VAR 0 1
16751: PUSH
16752: LD_INT 60
16754: GREATEREQUAL
16755: IFFALSE 16718
// game_speed := 4 ;
16757: LD_ADDR_OWVAR 65
16761: PUSH
16762: LD_INT 4
16764: ST_TO_ADDR
// end ;
16765: PPOPN 1
16767: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16768: LD_EXP 30
16772: PUSH
16773: LD_EXP 57
16777: AND
16778: IFFALSE 16924
16780: GO 16782
16782: DISABLE
16783: LD_INT 0
16785: PPUSH
16786: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16787: LD_ADDR_VAR 0 1
16791: PUSH
16792: LD_INT 22
16794: PUSH
16795: LD_OWVAR 2
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: LD_INT 2
16806: PUSH
16807: LD_INT 30
16809: PUSH
16810: LD_INT 0
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: PUSH
16817: LD_INT 30
16819: PUSH
16820: LD_INT 1
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: LIST
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PPUSH
16836: CALL_OW 69
16840: ST_TO_ADDR
// if not depot then
16841: LD_VAR 0 1
16845: NOT
16846: IFFALSE 16850
// exit ;
16848: GO 16924
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16850: LD_ADDR_VAR 0 2
16854: PUSH
16855: LD_VAR 0 1
16859: PUSH
16860: LD_INT 1
16862: PPUSH
16863: LD_VAR 0 1
16867: PPUSH
16868: CALL_OW 12
16872: ARRAY
16873: PPUSH
16874: CALL_OW 274
16878: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16879: LD_VAR 0 2
16883: PPUSH
16884: LD_INT 1
16886: PPUSH
16887: LD_INT 0
16889: PPUSH
16890: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16894: LD_VAR 0 2
16898: PPUSH
16899: LD_INT 2
16901: PPUSH
16902: LD_INT 0
16904: PPUSH
16905: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16909: LD_VAR 0 2
16913: PPUSH
16914: LD_INT 3
16916: PPUSH
16917: LD_INT 0
16919: PPUSH
16920: CALL_OW 277
// end ;
16924: PPOPN 2
16926: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16927: LD_EXP 30
16931: PUSH
16932: LD_EXP 58
16936: AND
16937: IFFALSE 17034
16939: GO 16941
16941: DISABLE
16942: LD_INT 0
16944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16945: LD_ADDR_VAR 0 1
16949: PUSH
16950: LD_INT 22
16952: PUSH
16953: LD_OWVAR 2
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: PUSH
16962: LD_INT 21
16964: PUSH
16965: LD_INT 1
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: PUSH
16972: LD_INT 3
16974: PUSH
16975: LD_INT 23
16977: PUSH
16978: LD_INT 0
16980: PUSH
16981: EMPTY
16982: LIST
16983: LIST
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: PPUSH
16994: CALL_OW 69
16998: ST_TO_ADDR
// if not tmp then
16999: LD_VAR 0 1
17003: NOT
17004: IFFALSE 17008
// exit ;
17006: GO 17034
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17008: LD_VAR 0 1
17012: PUSH
17013: LD_INT 1
17015: PPUSH
17016: LD_VAR 0 1
17020: PPUSH
17021: CALL_OW 12
17025: ARRAY
17026: PPUSH
17027: LD_INT 200
17029: PPUSH
17030: CALL_OW 234
// end ;
17034: PPOPN 1
17036: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17037: LD_EXP 30
17041: PUSH
17042: LD_EXP 59
17046: AND
17047: IFFALSE 17126
17049: GO 17051
17051: DISABLE
17052: LD_INT 0
17054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17055: LD_ADDR_VAR 0 1
17059: PUSH
17060: LD_INT 22
17062: PUSH
17063: LD_OWVAR 2
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 21
17074: PUSH
17075: LD_INT 2
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: PPUSH
17086: CALL_OW 69
17090: ST_TO_ADDR
// if not tmp then
17091: LD_VAR 0 1
17095: NOT
17096: IFFALSE 17100
// exit ;
17098: GO 17126
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17100: LD_VAR 0 1
17104: PUSH
17105: LD_INT 1
17107: PPUSH
17108: LD_VAR 0 1
17112: PPUSH
17113: CALL_OW 12
17117: ARRAY
17118: PPUSH
17119: LD_INT 60
17121: PPUSH
17122: CALL_OW 234
// end ;
17126: PPOPN 1
17128: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17129: LD_EXP 30
17133: PUSH
17134: LD_EXP 60
17138: AND
17139: IFFALSE 17238
17141: GO 17143
17143: DISABLE
17144: LD_INT 0
17146: PPUSH
17147: PPUSH
// begin enable ;
17148: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17149: LD_ADDR_VAR 0 1
17153: PUSH
17154: LD_INT 22
17156: PUSH
17157: LD_OWVAR 2
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: PUSH
17166: LD_INT 61
17168: PUSH
17169: EMPTY
17170: LIST
17171: PUSH
17172: LD_INT 33
17174: PUSH
17175: LD_INT 2
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: LIST
17186: PPUSH
17187: CALL_OW 69
17191: ST_TO_ADDR
// if not tmp then
17192: LD_VAR 0 1
17196: NOT
17197: IFFALSE 17201
// exit ;
17199: GO 17238
// for i in tmp do
17201: LD_ADDR_VAR 0 2
17205: PUSH
17206: LD_VAR 0 1
17210: PUSH
17211: FOR_IN
17212: IFFALSE 17236
// if IsControledBy ( i ) then
17214: LD_VAR 0 2
17218: PPUSH
17219: CALL_OW 312
17223: IFFALSE 17234
// ComUnlink ( i ) ;
17225: LD_VAR 0 2
17229: PPUSH
17230: CALL_OW 136
17234: GO 17211
17236: POP
17237: POP
// end ;
17238: PPOPN 2
17240: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17241: LD_EXP 30
17245: PUSH
17246: LD_EXP 61
17250: AND
17251: IFFALSE 17391
17253: GO 17255
17255: DISABLE
17256: LD_INT 0
17258: PPUSH
17259: PPUSH
// begin ToLua ( displayPowell(); ) ;
17260: LD_STRING displayPowell();
17262: PPUSH
17263: CALL_OW 559
// uc_side := 0 ;
17267: LD_ADDR_OWVAR 20
17271: PUSH
17272: LD_INT 0
17274: ST_TO_ADDR
// uc_nation := 2 ;
17275: LD_ADDR_OWVAR 21
17279: PUSH
17280: LD_INT 2
17282: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17283: LD_ADDR_OWVAR 37
17287: PUSH
17288: LD_INT 14
17290: ST_TO_ADDR
// vc_engine := engine_siberite ;
17291: LD_ADDR_OWVAR 39
17295: PUSH
17296: LD_INT 3
17298: ST_TO_ADDR
// vc_control := control_apeman ;
17299: LD_ADDR_OWVAR 38
17303: PUSH
17304: LD_INT 5
17306: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17307: LD_ADDR_OWVAR 40
17311: PUSH
17312: LD_INT 29
17314: ST_TO_ADDR
// un := CreateVehicle ;
17315: LD_ADDR_VAR 0 2
17319: PUSH
17320: CALL_OW 45
17324: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17325: LD_VAR 0 2
17329: PPUSH
17330: LD_INT 1
17332: PPUSH
17333: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17337: LD_INT 35
17339: PPUSH
17340: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17344: LD_VAR 0 2
17348: PPUSH
17349: LD_INT 22
17351: PUSH
17352: LD_OWVAR 2
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PPUSH
17361: CALL_OW 69
17365: PPUSH
17366: LD_VAR 0 2
17370: PPUSH
17371: CALL_OW 74
17375: PPUSH
17376: CALL_OW 115
// until IsDead ( un ) ;
17380: LD_VAR 0 2
17384: PPUSH
17385: CALL_OW 301
17389: IFFALSE 17337
// end ;
17391: PPOPN 2
17393: END
// every 0 0$1 trigger StreamModeActive and sStu do
17394: LD_EXP 30
17398: PUSH
17399: LD_EXP 69
17403: AND
17404: IFFALSE 17420
17406: GO 17408
17408: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17409: LD_STRING displayStucuk();
17411: PPUSH
17412: CALL_OW 559
// ResetFog ;
17416: CALL_OW 335
// end ;
17420: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17421: LD_EXP 30
17425: PUSH
17426: LD_EXP 62
17430: AND
17431: IFFALSE 17572
17433: GO 17435
17435: DISABLE
17436: LD_INT 0
17438: PPUSH
17439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17440: LD_ADDR_VAR 0 2
17444: PUSH
17445: LD_INT 22
17447: PUSH
17448: LD_OWVAR 2
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PUSH
17457: LD_INT 21
17459: PUSH
17460: LD_INT 1
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PPUSH
17471: CALL_OW 69
17475: ST_TO_ADDR
// if not tmp then
17476: LD_VAR 0 2
17480: NOT
17481: IFFALSE 17485
// exit ;
17483: GO 17572
// un := tmp [ rand ( 1 , tmp ) ] ;
17485: LD_ADDR_VAR 0 1
17489: PUSH
17490: LD_VAR 0 2
17494: PUSH
17495: LD_INT 1
17497: PPUSH
17498: LD_VAR 0 2
17502: PPUSH
17503: CALL_OW 12
17507: ARRAY
17508: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17509: LD_VAR 0 1
17513: PPUSH
17514: LD_INT 0
17516: PPUSH
17517: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17521: LD_VAR 0 1
17525: PPUSH
17526: LD_OWVAR 3
17530: PUSH
17531: LD_VAR 0 1
17535: DIFF
17536: PPUSH
17537: LD_VAR 0 1
17541: PPUSH
17542: CALL_OW 74
17546: PPUSH
17547: CALL_OW 115
// wait ( 0 0$20 ) ;
17551: LD_INT 700
17553: PPUSH
17554: CALL_OW 67
// SetSide ( un , your_side ) ;
17558: LD_VAR 0 1
17562: PPUSH
17563: LD_OWVAR 2
17567: PPUSH
17568: CALL_OW 235
// end ;
17572: PPOPN 2
17574: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17575: LD_EXP 30
17579: PUSH
17580: LD_EXP 63
17584: AND
17585: IFFALSE 17691
17587: GO 17589
17589: DISABLE
17590: LD_INT 0
17592: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_INT 22
17600: PUSH
17601: LD_OWVAR 2
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: LD_INT 2
17612: PUSH
17613: LD_INT 30
17615: PUSH
17616: LD_INT 0
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PUSH
17623: LD_INT 30
17625: PUSH
17626: LD_INT 1
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: PUSH
17633: EMPTY
17634: LIST
17635: LIST
17636: LIST
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PPUSH
17642: CALL_OW 69
17646: ST_TO_ADDR
// if not depot then
17647: LD_VAR 0 1
17651: NOT
17652: IFFALSE 17656
// exit ;
17654: GO 17691
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17656: LD_VAR 0 1
17660: PUSH
17661: LD_INT 1
17663: ARRAY
17664: PPUSH
17665: CALL_OW 250
17669: PPUSH
17670: LD_VAR 0 1
17674: PUSH
17675: LD_INT 1
17677: ARRAY
17678: PPUSH
17679: CALL_OW 251
17683: PPUSH
17684: LD_INT 70
17686: PPUSH
17687: CALL_OW 495
// end ;
17691: PPOPN 1
17693: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17694: LD_EXP 30
17698: PUSH
17699: LD_EXP 64
17703: AND
17704: IFFALSE 17915
17706: GO 17708
17708: DISABLE
17709: LD_INT 0
17711: PPUSH
17712: PPUSH
17713: PPUSH
17714: PPUSH
17715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17716: LD_ADDR_VAR 0 5
17720: PUSH
17721: LD_INT 22
17723: PUSH
17724: LD_OWVAR 2
17728: PUSH
17729: EMPTY
17730: LIST
17731: LIST
17732: PUSH
17733: LD_INT 21
17735: PUSH
17736: LD_INT 1
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PPUSH
17747: CALL_OW 69
17751: ST_TO_ADDR
// if not tmp then
17752: LD_VAR 0 5
17756: NOT
17757: IFFALSE 17761
// exit ;
17759: GO 17915
// for i in tmp do
17761: LD_ADDR_VAR 0 1
17765: PUSH
17766: LD_VAR 0 5
17770: PUSH
17771: FOR_IN
17772: IFFALSE 17913
// begin d := rand ( 0 , 5 ) ;
17774: LD_ADDR_VAR 0 4
17778: PUSH
17779: LD_INT 0
17781: PPUSH
17782: LD_INT 5
17784: PPUSH
17785: CALL_OW 12
17789: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17790: LD_ADDR_VAR 0 2
17794: PUSH
17795: LD_VAR 0 1
17799: PPUSH
17800: CALL_OW 250
17804: PPUSH
17805: LD_VAR 0 4
17809: PPUSH
17810: LD_INT 3
17812: PPUSH
17813: LD_INT 12
17815: PPUSH
17816: CALL_OW 12
17820: PPUSH
17821: CALL_OW 272
17825: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17826: LD_ADDR_VAR 0 3
17830: PUSH
17831: LD_VAR 0 1
17835: PPUSH
17836: CALL_OW 251
17840: PPUSH
17841: LD_VAR 0 4
17845: PPUSH
17846: LD_INT 3
17848: PPUSH
17849: LD_INT 12
17851: PPUSH
17852: CALL_OW 12
17856: PPUSH
17857: CALL_OW 273
17861: ST_TO_ADDR
// if ValidHex ( x , y ) then
17862: LD_VAR 0 2
17866: PPUSH
17867: LD_VAR 0 3
17871: PPUSH
17872: CALL_OW 488
17876: IFFALSE 17911
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17878: LD_VAR 0 1
17882: PPUSH
17883: LD_VAR 0 2
17887: PPUSH
17888: LD_VAR 0 3
17892: PPUSH
17893: LD_INT 3
17895: PPUSH
17896: LD_INT 6
17898: PPUSH
17899: CALL_OW 12
17903: PPUSH
17904: LD_INT 1
17906: PPUSH
17907: CALL_OW 483
// end ;
17911: GO 17771
17913: POP
17914: POP
// end ;
17915: PPOPN 5
17917: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17918: LD_EXP 30
17922: PUSH
17923: LD_EXP 65
17927: AND
17928: IFFALSE 18022
17930: GO 17932
17932: DISABLE
17933: LD_INT 0
17935: PPUSH
17936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17937: LD_ADDR_VAR 0 2
17941: PUSH
17942: LD_INT 22
17944: PUSH
17945: LD_OWVAR 2
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 32
17956: PUSH
17957: LD_INT 1
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 21
17966: PUSH
17967: LD_INT 2
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: LIST
17978: PPUSH
17979: CALL_OW 69
17983: ST_TO_ADDR
// if not tmp then
17984: LD_VAR 0 2
17988: NOT
17989: IFFALSE 17993
// exit ;
17991: GO 18022
// for i in tmp do
17993: LD_ADDR_VAR 0 1
17997: PUSH
17998: LD_VAR 0 2
18002: PUSH
18003: FOR_IN
18004: IFFALSE 18020
// SetFuel ( i , 0 ) ;
18006: LD_VAR 0 1
18010: PPUSH
18011: LD_INT 0
18013: PPUSH
18014: CALL_OW 240
18018: GO 18003
18020: POP
18021: POP
// end ;
18022: PPOPN 2
18024: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18025: LD_EXP 30
18029: PUSH
18030: LD_EXP 66
18034: AND
18035: IFFALSE 18101
18037: GO 18039
18039: DISABLE
18040: LD_INT 0
18042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18043: LD_ADDR_VAR 0 1
18047: PUSH
18048: LD_INT 22
18050: PUSH
18051: LD_OWVAR 2
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 30
18062: PUSH
18063: LD_INT 29
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: PPUSH
18074: CALL_OW 69
18078: ST_TO_ADDR
// if not tmp then
18079: LD_VAR 0 1
18083: NOT
18084: IFFALSE 18088
// exit ;
18086: GO 18101
// DestroyUnit ( tmp [ 1 ] ) ;
18088: LD_VAR 0 1
18092: PUSH
18093: LD_INT 1
18095: ARRAY
18096: PPUSH
18097: CALL_OW 65
// end ;
18101: PPOPN 1
18103: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18104: LD_EXP 30
18108: PUSH
18109: LD_EXP 68
18113: AND
18114: IFFALSE 18243
18116: GO 18118
18118: DISABLE
18119: LD_INT 0
18121: PPUSH
// begin uc_side := 0 ;
18122: LD_ADDR_OWVAR 20
18126: PUSH
18127: LD_INT 0
18129: ST_TO_ADDR
// uc_nation := nation_arabian ;
18130: LD_ADDR_OWVAR 21
18134: PUSH
18135: LD_INT 2
18137: ST_TO_ADDR
// hc_gallery :=  ;
18138: LD_ADDR_OWVAR 33
18142: PUSH
18143: LD_STRING 
18145: ST_TO_ADDR
// hc_name :=  ;
18146: LD_ADDR_OWVAR 26
18150: PUSH
18151: LD_STRING 
18153: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18154: LD_INT 1
18156: PPUSH
18157: LD_INT 11
18159: PPUSH
18160: LD_INT 10
18162: PPUSH
18163: CALL_OW 380
// un := CreateHuman ;
18167: LD_ADDR_VAR 0 1
18171: PUSH
18172: CALL_OW 44
18176: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18177: LD_VAR 0 1
18181: PPUSH
18182: LD_INT 1
18184: PPUSH
18185: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18189: LD_INT 35
18191: PPUSH
18192: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18196: LD_VAR 0 1
18200: PPUSH
18201: LD_INT 22
18203: PUSH
18204: LD_OWVAR 2
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PPUSH
18213: CALL_OW 69
18217: PPUSH
18218: LD_VAR 0 1
18222: PPUSH
18223: CALL_OW 74
18227: PPUSH
18228: CALL_OW 115
// until IsDead ( un ) ;
18232: LD_VAR 0 1
18236: PPUSH
18237: CALL_OW 301
18241: IFFALSE 18189
// end ;
18243: PPOPN 1
18245: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18246: LD_EXP 30
18250: PUSH
18251: LD_EXP 70
18255: AND
18256: IFFALSE 18268
18258: GO 18260
18260: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18261: LD_STRING earthquake(getX(game), 0, 32)
18263: PPUSH
18264: CALL_OW 559
18268: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18269: LD_EXP 30
18273: PUSH
18274: LD_EXP 71
18278: AND
18279: IFFALSE 18370
18281: GO 18283
18283: DISABLE
18284: LD_INT 0
18286: PPUSH
// begin enable ;
18287: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18288: LD_ADDR_VAR 0 1
18292: PUSH
18293: LD_INT 22
18295: PUSH
18296: LD_OWVAR 2
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 21
18307: PUSH
18308: LD_INT 2
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 33
18317: PUSH
18318: LD_INT 3
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: LIST
18329: PPUSH
18330: CALL_OW 69
18334: ST_TO_ADDR
// if not tmp then
18335: LD_VAR 0 1
18339: NOT
18340: IFFALSE 18344
// exit ;
18342: GO 18370
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18344: LD_VAR 0 1
18348: PUSH
18349: LD_INT 1
18351: PPUSH
18352: LD_VAR 0 1
18356: PPUSH
18357: CALL_OW 12
18361: ARRAY
18362: PPUSH
18363: LD_INT 1
18365: PPUSH
18366: CALL_OW 234
// end ;
18370: PPOPN 1
18372: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18373: LD_EXP 30
18377: PUSH
18378: LD_EXP 72
18382: AND
18383: IFFALSE 18524
18385: GO 18387
18387: DISABLE
18388: LD_INT 0
18390: PPUSH
18391: PPUSH
18392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18393: LD_ADDR_VAR 0 3
18397: PUSH
18398: LD_INT 22
18400: PUSH
18401: LD_OWVAR 2
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 25
18412: PUSH
18413: LD_INT 1
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PPUSH
18424: CALL_OW 69
18428: ST_TO_ADDR
// if not tmp then
18429: LD_VAR 0 3
18433: NOT
18434: IFFALSE 18438
// exit ;
18436: GO 18524
// un := tmp [ rand ( 1 , tmp ) ] ;
18438: LD_ADDR_VAR 0 2
18442: PUSH
18443: LD_VAR 0 3
18447: PUSH
18448: LD_INT 1
18450: PPUSH
18451: LD_VAR 0 3
18455: PPUSH
18456: CALL_OW 12
18460: ARRAY
18461: ST_TO_ADDR
// if Crawls ( un ) then
18462: LD_VAR 0 2
18466: PPUSH
18467: CALL_OW 318
18471: IFFALSE 18482
// ComWalk ( un ) ;
18473: LD_VAR 0 2
18477: PPUSH
18478: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18482: LD_VAR 0 2
18486: PPUSH
18487: LD_INT 9
18489: PPUSH
18490: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18494: LD_INT 28
18496: PPUSH
18497: LD_OWVAR 2
18501: PPUSH
18502: LD_INT 2
18504: PPUSH
18505: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18509: LD_INT 29
18511: PPUSH
18512: LD_OWVAR 2
18516: PPUSH
18517: LD_INT 2
18519: PPUSH
18520: CALL_OW 322
// end ;
18524: PPOPN 3
18526: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18527: LD_EXP 30
18531: PUSH
18532: LD_EXP 73
18536: AND
18537: IFFALSE 18648
18539: GO 18541
18541: DISABLE
18542: LD_INT 0
18544: PPUSH
18545: PPUSH
18546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18547: LD_ADDR_VAR 0 3
18551: PUSH
18552: LD_INT 22
18554: PUSH
18555: LD_OWVAR 2
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PUSH
18564: LD_INT 25
18566: PUSH
18567: LD_INT 1
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PPUSH
18578: CALL_OW 69
18582: ST_TO_ADDR
// if not tmp then
18583: LD_VAR 0 3
18587: NOT
18588: IFFALSE 18592
// exit ;
18590: GO 18648
// un := tmp [ rand ( 1 , tmp ) ] ;
18592: LD_ADDR_VAR 0 2
18596: PUSH
18597: LD_VAR 0 3
18601: PUSH
18602: LD_INT 1
18604: PPUSH
18605: LD_VAR 0 3
18609: PPUSH
18610: CALL_OW 12
18614: ARRAY
18615: ST_TO_ADDR
// if Crawls ( un ) then
18616: LD_VAR 0 2
18620: PPUSH
18621: CALL_OW 318
18625: IFFALSE 18636
// ComWalk ( un ) ;
18627: LD_VAR 0 2
18631: PPUSH
18632: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18636: LD_VAR 0 2
18640: PPUSH
18641: LD_INT 8
18643: PPUSH
18644: CALL_OW 336
// end ;
18648: PPOPN 3
18650: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18651: LD_EXP 30
18655: PUSH
18656: LD_EXP 74
18660: AND
18661: IFFALSE 18805
18663: GO 18665
18665: DISABLE
18666: LD_INT 0
18668: PPUSH
18669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18670: LD_ADDR_VAR 0 2
18674: PUSH
18675: LD_INT 22
18677: PUSH
18678: LD_OWVAR 2
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PUSH
18687: LD_INT 21
18689: PUSH
18690: LD_INT 2
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: PUSH
18697: LD_INT 2
18699: PUSH
18700: LD_INT 34
18702: PUSH
18703: LD_INT 12
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: LD_INT 34
18712: PUSH
18713: LD_INT 51
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 34
18722: PUSH
18723: LD_INT 32
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: LIST
18740: PPUSH
18741: CALL_OW 69
18745: ST_TO_ADDR
// if not tmp then
18746: LD_VAR 0 2
18750: NOT
18751: IFFALSE 18755
// exit ;
18753: GO 18805
// for i in tmp do
18755: LD_ADDR_VAR 0 1
18759: PUSH
18760: LD_VAR 0 2
18764: PUSH
18765: FOR_IN
18766: IFFALSE 18803
// if GetCargo ( i , mat_artifact ) = 0 then
18768: LD_VAR 0 1
18772: PPUSH
18773: LD_INT 4
18775: PPUSH
18776: CALL_OW 289
18780: PUSH
18781: LD_INT 0
18783: EQUAL
18784: IFFALSE 18801
// SetCargo ( i , mat_siberit , 100 ) ;
18786: LD_VAR 0 1
18790: PPUSH
18791: LD_INT 3
18793: PPUSH
18794: LD_INT 100
18796: PPUSH
18797: CALL_OW 290
18801: GO 18765
18803: POP
18804: POP
// end ;
18805: PPOPN 2
18807: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18808: LD_EXP 30
18812: PUSH
18813: LD_EXP 75
18817: AND
18818: IFFALSE 19001
18820: GO 18822
18822: DISABLE
18823: LD_INT 0
18825: PPUSH
18826: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18827: LD_ADDR_VAR 0 2
18831: PUSH
18832: LD_INT 22
18834: PUSH
18835: LD_OWVAR 2
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PPUSH
18844: CALL_OW 69
18848: ST_TO_ADDR
// if not tmp then
18849: LD_VAR 0 2
18853: NOT
18854: IFFALSE 18858
// exit ;
18856: GO 19001
// for i := 1 to 2 do
18858: LD_ADDR_VAR 0 1
18862: PUSH
18863: DOUBLE
18864: LD_INT 1
18866: DEC
18867: ST_TO_ADDR
18868: LD_INT 2
18870: PUSH
18871: FOR_TO
18872: IFFALSE 18999
// begin uc_side := your_side ;
18874: LD_ADDR_OWVAR 20
18878: PUSH
18879: LD_OWVAR 2
18883: ST_TO_ADDR
// uc_nation := nation_american ;
18884: LD_ADDR_OWVAR 21
18888: PUSH
18889: LD_INT 1
18891: ST_TO_ADDR
// vc_chassis := us_morphling ;
18892: LD_ADDR_OWVAR 37
18896: PUSH
18897: LD_INT 5
18899: ST_TO_ADDR
// vc_engine := engine_siberite ;
18900: LD_ADDR_OWVAR 39
18904: PUSH
18905: LD_INT 3
18907: ST_TO_ADDR
// vc_control := control_computer ;
18908: LD_ADDR_OWVAR 38
18912: PUSH
18913: LD_INT 3
18915: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18916: LD_ADDR_OWVAR 40
18920: PUSH
18921: LD_INT 10
18923: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18924: LD_VAR 0 2
18928: PUSH
18929: LD_INT 1
18931: ARRAY
18932: PPUSH
18933: CALL_OW 310
18937: NOT
18938: IFFALSE 18985
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18940: CALL_OW 45
18944: PPUSH
18945: LD_VAR 0 2
18949: PUSH
18950: LD_INT 1
18952: ARRAY
18953: PPUSH
18954: CALL_OW 250
18958: PPUSH
18959: LD_VAR 0 2
18963: PUSH
18964: LD_INT 1
18966: ARRAY
18967: PPUSH
18968: CALL_OW 251
18972: PPUSH
18973: LD_INT 12
18975: PPUSH
18976: LD_INT 1
18978: PPUSH
18979: CALL_OW 50
18983: GO 18997
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18985: CALL_OW 45
18989: PPUSH
18990: LD_INT 1
18992: PPUSH
18993: CALL_OW 51
// end ;
18997: GO 18871
18999: POP
19000: POP
// end ;
19001: PPOPN 2
19003: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19004: LD_EXP 30
19008: PUSH
19009: LD_EXP 76
19013: AND
19014: IFFALSE 19236
19016: GO 19018
19018: DISABLE
19019: LD_INT 0
19021: PPUSH
19022: PPUSH
19023: PPUSH
19024: PPUSH
19025: PPUSH
19026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19027: LD_ADDR_VAR 0 6
19031: PUSH
19032: LD_INT 22
19034: PUSH
19035: LD_OWVAR 2
19039: PUSH
19040: EMPTY
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 21
19046: PUSH
19047: LD_INT 1
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 3
19056: PUSH
19057: LD_INT 23
19059: PUSH
19060: LD_INT 0
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: LIST
19075: PPUSH
19076: CALL_OW 69
19080: ST_TO_ADDR
// if not tmp then
19081: LD_VAR 0 6
19085: NOT
19086: IFFALSE 19090
// exit ;
19088: GO 19236
// s1 := rand ( 1 , 4 ) ;
19090: LD_ADDR_VAR 0 2
19094: PUSH
19095: LD_INT 1
19097: PPUSH
19098: LD_INT 4
19100: PPUSH
19101: CALL_OW 12
19105: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19106: LD_ADDR_VAR 0 4
19110: PUSH
19111: LD_VAR 0 6
19115: PUSH
19116: LD_INT 1
19118: ARRAY
19119: PPUSH
19120: LD_VAR 0 2
19124: PPUSH
19125: CALL_OW 259
19129: ST_TO_ADDR
// if s1 = 1 then
19130: LD_VAR 0 2
19134: PUSH
19135: LD_INT 1
19137: EQUAL
19138: IFFALSE 19158
// s2 := rand ( 2 , 4 ) else
19140: LD_ADDR_VAR 0 3
19144: PUSH
19145: LD_INT 2
19147: PPUSH
19148: LD_INT 4
19150: PPUSH
19151: CALL_OW 12
19155: ST_TO_ADDR
19156: GO 19166
// s2 := 1 ;
19158: LD_ADDR_VAR 0 3
19162: PUSH
19163: LD_INT 1
19165: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19166: LD_ADDR_VAR 0 5
19170: PUSH
19171: LD_VAR 0 6
19175: PUSH
19176: LD_INT 1
19178: ARRAY
19179: PPUSH
19180: LD_VAR 0 3
19184: PPUSH
19185: CALL_OW 259
19189: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19190: LD_VAR 0 6
19194: PUSH
19195: LD_INT 1
19197: ARRAY
19198: PPUSH
19199: LD_VAR 0 2
19203: PPUSH
19204: LD_VAR 0 5
19208: PPUSH
19209: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19213: LD_VAR 0 6
19217: PUSH
19218: LD_INT 1
19220: ARRAY
19221: PPUSH
19222: LD_VAR 0 3
19226: PPUSH
19227: LD_VAR 0 4
19231: PPUSH
19232: CALL_OW 237
// end ;
19236: PPOPN 6
19238: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19239: LD_EXP 30
19243: PUSH
19244: LD_EXP 77
19248: AND
19249: IFFALSE 19328
19251: GO 19253
19253: DISABLE
19254: LD_INT 0
19256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19257: LD_ADDR_VAR 0 1
19261: PUSH
19262: LD_INT 22
19264: PUSH
19265: LD_OWVAR 2
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 30
19276: PUSH
19277: LD_INT 3
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PPUSH
19288: CALL_OW 69
19292: ST_TO_ADDR
// if not tmp then
19293: LD_VAR 0 1
19297: NOT
19298: IFFALSE 19302
// exit ;
19300: GO 19328
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19302: LD_VAR 0 1
19306: PUSH
19307: LD_INT 1
19309: PPUSH
19310: LD_VAR 0 1
19314: PPUSH
19315: CALL_OW 12
19319: ARRAY
19320: PPUSH
19321: LD_INT 1
19323: PPUSH
19324: CALL_OW 234
// end ;
19328: PPOPN 1
19330: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19331: LD_EXP 30
19335: PUSH
19336: LD_EXP 78
19340: AND
19341: IFFALSE 19453
19343: GO 19345
19345: DISABLE
19346: LD_INT 0
19348: PPUSH
19349: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19350: LD_ADDR_VAR 0 2
19354: PUSH
19355: LD_INT 22
19357: PUSH
19358: LD_OWVAR 2
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: LD_INT 2
19369: PUSH
19370: LD_INT 30
19372: PUSH
19373: LD_INT 27
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 30
19382: PUSH
19383: LD_INT 26
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: LD_INT 30
19392: PUSH
19393: LD_INT 28
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PPUSH
19410: CALL_OW 69
19414: ST_TO_ADDR
// if not tmp then
19415: LD_VAR 0 2
19419: NOT
19420: IFFALSE 19424
// exit ;
19422: GO 19453
// for i in tmp do
19424: LD_ADDR_VAR 0 1
19428: PUSH
19429: LD_VAR 0 2
19433: PUSH
19434: FOR_IN
19435: IFFALSE 19451
// SetLives ( i , 1 ) ;
19437: LD_VAR 0 1
19441: PPUSH
19442: LD_INT 1
19444: PPUSH
19445: CALL_OW 234
19449: GO 19434
19451: POP
19452: POP
// end ;
19453: PPOPN 2
19455: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19456: LD_EXP 30
19460: PUSH
19461: LD_EXP 79
19465: AND
19466: IFFALSE 19753
19468: GO 19470
19470: DISABLE
19471: LD_INT 0
19473: PPUSH
19474: PPUSH
19475: PPUSH
// begin i := rand ( 1 , 7 ) ;
19476: LD_ADDR_VAR 0 1
19480: PUSH
19481: LD_INT 1
19483: PPUSH
19484: LD_INT 7
19486: PPUSH
19487: CALL_OW 12
19491: ST_TO_ADDR
// case i of 1 :
19492: LD_VAR 0 1
19496: PUSH
19497: LD_INT 1
19499: DOUBLE
19500: EQUAL
19501: IFTRUE 19505
19503: GO 19515
19505: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19506: LD_STRING earthquake(getX(game), 0, 32)
19508: PPUSH
19509: CALL_OW 559
19513: GO 19753
19515: LD_INT 2
19517: DOUBLE
19518: EQUAL
19519: IFTRUE 19523
19521: GO 19537
19523: POP
// begin ToLua ( displayStucuk(); ) ;
19524: LD_STRING displayStucuk();
19526: PPUSH
19527: CALL_OW 559
// ResetFog ;
19531: CALL_OW 335
// end ; 3 :
19535: GO 19753
19537: LD_INT 3
19539: DOUBLE
19540: EQUAL
19541: IFTRUE 19545
19543: GO 19649
19545: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19546: LD_ADDR_VAR 0 2
19550: PUSH
19551: LD_INT 22
19553: PUSH
19554: LD_OWVAR 2
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 25
19565: PUSH
19566: LD_INT 1
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PPUSH
19577: CALL_OW 69
19581: ST_TO_ADDR
// if not tmp then
19582: LD_VAR 0 2
19586: NOT
19587: IFFALSE 19591
// exit ;
19589: GO 19753
// un := tmp [ rand ( 1 , tmp ) ] ;
19591: LD_ADDR_VAR 0 3
19595: PUSH
19596: LD_VAR 0 2
19600: PUSH
19601: LD_INT 1
19603: PPUSH
19604: LD_VAR 0 2
19608: PPUSH
19609: CALL_OW 12
19613: ARRAY
19614: ST_TO_ADDR
// if Crawls ( un ) then
19615: LD_VAR 0 3
19619: PPUSH
19620: CALL_OW 318
19624: IFFALSE 19635
// ComWalk ( un ) ;
19626: LD_VAR 0 3
19630: PPUSH
19631: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19635: LD_VAR 0 3
19639: PPUSH
19640: LD_INT 8
19642: PPUSH
19643: CALL_OW 336
// end ; 4 :
19647: GO 19753
19649: LD_INT 4
19651: DOUBLE
19652: EQUAL
19653: IFTRUE 19657
19655: GO 19731
19657: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19658: LD_ADDR_VAR 0 2
19662: PUSH
19663: LD_INT 22
19665: PUSH
19666: LD_OWVAR 2
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 30
19677: PUSH
19678: LD_INT 29
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PPUSH
19689: CALL_OW 69
19693: ST_TO_ADDR
// if not tmp then
19694: LD_VAR 0 2
19698: NOT
19699: IFFALSE 19703
// exit ;
19701: GO 19753
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19703: LD_VAR 0 2
19707: PUSH
19708: LD_INT 1
19710: ARRAY
19711: PPUSH
19712: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19716: LD_VAR 0 2
19720: PUSH
19721: LD_INT 1
19723: ARRAY
19724: PPUSH
19725: CALL_OW 65
// end ; 5 .. 7 :
19729: GO 19753
19731: LD_INT 5
19733: DOUBLE
19734: GREATEREQUAL
19735: IFFALSE 19743
19737: LD_INT 7
19739: DOUBLE
19740: LESSEQUAL
19741: IFTRUE 19745
19743: GO 19752
19745: POP
// StreamSibBomb ; end ;
19746: CALL 15990 0 0
19750: GO 19753
19752: POP
// end ;
19753: PPOPN 3
19755: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19756: LD_EXP 30
19760: PUSH
19761: LD_EXP 80
19765: AND
19766: IFFALSE 19922
19768: GO 19770
19770: DISABLE
19771: LD_INT 0
19773: PPUSH
19774: PPUSH
19775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19776: LD_ADDR_VAR 0 2
19780: PUSH
19781: LD_INT 81
19783: PUSH
19784: LD_OWVAR 2
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 2
19795: PUSH
19796: LD_INT 21
19798: PUSH
19799: LD_INT 1
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 21
19808: PUSH
19809: LD_INT 2
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: LIST
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PPUSH
19825: CALL_OW 69
19829: ST_TO_ADDR
// if not tmp then
19830: LD_VAR 0 2
19834: NOT
19835: IFFALSE 19839
// exit ;
19837: GO 19922
// p := 0 ;
19839: LD_ADDR_VAR 0 3
19843: PUSH
19844: LD_INT 0
19846: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19847: LD_INT 35
19849: PPUSH
19850: CALL_OW 67
// p := p + 1 ;
19854: LD_ADDR_VAR 0 3
19858: PUSH
19859: LD_VAR 0 3
19863: PUSH
19864: LD_INT 1
19866: PLUS
19867: ST_TO_ADDR
// for i in tmp do
19868: LD_ADDR_VAR 0 1
19872: PUSH
19873: LD_VAR 0 2
19877: PUSH
19878: FOR_IN
19879: IFFALSE 19910
// if GetLives ( i ) < 1000 then
19881: LD_VAR 0 1
19885: PPUSH
19886: CALL_OW 256
19890: PUSH
19891: LD_INT 1000
19893: LESS
19894: IFFALSE 19908
// SetLives ( i , 1000 ) ;
19896: LD_VAR 0 1
19900: PPUSH
19901: LD_INT 1000
19903: PPUSH
19904: CALL_OW 234
19908: GO 19878
19910: POP
19911: POP
// until p > 20 ;
19912: LD_VAR 0 3
19916: PUSH
19917: LD_INT 20
19919: GREATER
19920: IFFALSE 19847
// end ;
19922: PPOPN 3
19924: END
// every 0 0$1 trigger StreamModeActive and sTime do
19925: LD_EXP 30
19929: PUSH
19930: LD_EXP 81
19934: AND
19935: IFFALSE 19970
19937: GO 19939
19939: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19940: LD_INT 28
19942: PPUSH
19943: LD_OWVAR 2
19947: PPUSH
19948: LD_INT 2
19950: PPUSH
19951: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19955: LD_INT 30
19957: PPUSH
19958: LD_OWVAR 2
19962: PPUSH
19963: LD_INT 2
19965: PPUSH
19966: CALL_OW 322
// end ;
19970: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19971: LD_EXP 30
19975: PUSH
19976: LD_EXP 82
19980: AND
19981: IFFALSE 20102
19983: GO 19985
19985: DISABLE
19986: LD_INT 0
19988: PPUSH
19989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19990: LD_ADDR_VAR 0 2
19994: PUSH
19995: LD_INT 22
19997: PUSH
19998: LD_OWVAR 2
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: LD_INT 21
20009: PUSH
20010: LD_INT 1
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 3
20019: PUSH
20020: LD_INT 23
20022: PUSH
20023: LD_INT 0
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PUSH
20030: EMPTY
20031: LIST
20032: LIST
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: LIST
20038: PPUSH
20039: CALL_OW 69
20043: ST_TO_ADDR
// if not tmp then
20044: LD_VAR 0 2
20048: NOT
20049: IFFALSE 20053
// exit ;
20051: GO 20102
// for i in tmp do
20053: LD_ADDR_VAR 0 1
20057: PUSH
20058: LD_VAR 0 2
20062: PUSH
20063: FOR_IN
20064: IFFALSE 20100
// begin if Crawls ( i ) then
20066: LD_VAR 0 1
20070: PPUSH
20071: CALL_OW 318
20075: IFFALSE 20086
// ComWalk ( i ) ;
20077: LD_VAR 0 1
20081: PPUSH
20082: CALL_OW 138
// SetClass ( i , 2 ) ;
20086: LD_VAR 0 1
20090: PPUSH
20091: LD_INT 2
20093: PPUSH
20094: CALL_OW 336
// end ;
20098: GO 20063
20100: POP
20101: POP
// end ;
20102: PPOPN 2
20104: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20105: LD_EXP 30
20109: PUSH
20110: LD_EXP 83
20114: AND
20115: IFFALSE 20403
20117: GO 20119
20119: DISABLE
20120: LD_INT 0
20122: PPUSH
20123: PPUSH
20124: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20125: LD_OWVAR 2
20129: PPUSH
20130: LD_INT 9
20132: PPUSH
20133: LD_INT 1
20135: PPUSH
20136: LD_INT 1
20138: PPUSH
20139: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20143: LD_INT 9
20145: PPUSH
20146: LD_OWVAR 2
20150: PPUSH
20151: CALL_OW 343
// uc_side := 9 ;
20155: LD_ADDR_OWVAR 20
20159: PUSH
20160: LD_INT 9
20162: ST_TO_ADDR
// uc_nation := 2 ;
20163: LD_ADDR_OWVAR 21
20167: PUSH
20168: LD_INT 2
20170: ST_TO_ADDR
// hc_name := Dark Warrior ;
20171: LD_ADDR_OWVAR 26
20175: PUSH
20176: LD_STRING Dark Warrior
20178: ST_TO_ADDR
// hc_gallery :=  ;
20179: LD_ADDR_OWVAR 33
20183: PUSH
20184: LD_STRING 
20186: ST_TO_ADDR
// hc_noskilllimit := true ;
20187: LD_ADDR_OWVAR 76
20191: PUSH
20192: LD_INT 1
20194: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20195: LD_ADDR_OWVAR 31
20199: PUSH
20200: LD_INT 30
20202: PUSH
20203: LD_INT 30
20205: PUSH
20206: LD_INT 30
20208: PUSH
20209: LD_INT 30
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: ST_TO_ADDR
// un := CreateHuman ;
20218: LD_ADDR_VAR 0 3
20222: PUSH
20223: CALL_OW 44
20227: ST_TO_ADDR
// hc_noskilllimit := false ;
20228: LD_ADDR_OWVAR 76
20232: PUSH
20233: LD_INT 0
20235: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20236: LD_VAR 0 3
20240: PPUSH
20241: LD_INT 1
20243: PPUSH
20244: CALL_OW 51
// ToLua ( playRanger() ) ;
20248: LD_STRING playRanger()
20250: PPUSH
20251: CALL_OW 559
// p := 0 ;
20255: LD_ADDR_VAR 0 2
20259: PUSH
20260: LD_INT 0
20262: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20263: LD_INT 35
20265: PPUSH
20266: CALL_OW 67
// p := p + 1 ;
20270: LD_ADDR_VAR 0 2
20274: PUSH
20275: LD_VAR 0 2
20279: PUSH
20280: LD_INT 1
20282: PLUS
20283: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20284: LD_VAR 0 3
20288: PPUSH
20289: CALL_OW 256
20293: PUSH
20294: LD_INT 1000
20296: LESS
20297: IFFALSE 20311
// SetLives ( un , 1000 ) ;
20299: LD_VAR 0 3
20303: PPUSH
20304: LD_INT 1000
20306: PPUSH
20307: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20311: LD_VAR 0 3
20315: PPUSH
20316: LD_INT 81
20318: PUSH
20319: LD_OWVAR 2
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: PUSH
20328: LD_INT 91
20330: PUSH
20331: LD_VAR 0 3
20335: PUSH
20336: LD_INT 30
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: LIST
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PPUSH
20348: CALL_OW 69
20352: PPUSH
20353: LD_VAR 0 3
20357: PPUSH
20358: CALL_OW 74
20362: PPUSH
20363: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20367: LD_VAR 0 2
20371: PUSH
20372: LD_INT 80
20374: GREATER
20375: PUSH
20376: LD_VAR 0 3
20380: PPUSH
20381: CALL_OW 301
20385: OR
20386: IFFALSE 20263
// if un then
20388: LD_VAR 0 3
20392: IFFALSE 20403
// RemoveUnit ( un ) ;
20394: LD_VAR 0 3
20398: PPUSH
20399: CALL_OW 64
// end ;
20403: PPOPN 3
20405: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20406: LD_EXP 84
20410: IFFALSE 20526
20412: GO 20414
20414: DISABLE
20415: LD_INT 0
20417: PPUSH
20418: PPUSH
20419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20420: LD_ADDR_VAR 0 2
20424: PUSH
20425: LD_INT 81
20427: PUSH
20428: LD_OWVAR 2
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: LD_INT 21
20439: PUSH
20440: LD_INT 1
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PPUSH
20451: CALL_OW 69
20455: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20456: LD_STRING playComputer()
20458: PPUSH
20459: CALL_OW 559
// if not tmp then
20463: LD_VAR 0 2
20467: NOT
20468: IFFALSE 20472
// exit ;
20470: GO 20526
// for i in tmp do
20472: LD_ADDR_VAR 0 1
20476: PUSH
20477: LD_VAR 0 2
20481: PUSH
20482: FOR_IN
20483: IFFALSE 20524
// for j := 1 to 4 do
20485: LD_ADDR_VAR 0 3
20489: PUSH
20490: DOUBLE
20491: LD_INT 1
20493: DEC
20494: ST_TO_ADDR
20495: LD_INT 4
20497: PUSH
20498: FOR_TO
20499: IFFALSE 20520
// SetSkill ( i , j , 10 ) ;
20501: LD_VAR 0 1
20505: PPUSH
20506: LD_VAR 0 3
20510: PPUSH
20511: LD_INT 10
20513: PPUSH
20514: CALL_OW 237
20518: GO 20498
20520: POP
20521: POP
20522: GO 20482
20524: POP
20525: POP
// end ;
20526: PPOPN 3
20528: END
// every 0 0$1 trigger s30 do var i , tmp ;
20529: LD_EXP 85
20533: IFFALSE 20602
20535: GO 20537
20537: DISABLE
20538: LD_INT 0
20540: PPUSH
20541: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20542: LD_ADDR_VAR 0 2
20546: PUSH
20547: LD_INT 22
20549: PUSH
20550: LD_OWVAR 2
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PPUSH
20559: CALL_OW 69
20563: ST_TO_ADDR
// if not tmp then
20564: LD_VAR 0 2
20568: NOT
20569: IFFALSE 20573
// exit ;
20571: GO 20602
// for i in tmp do
20573: LD_ADDR_VAR 0 1
20577: PUSH
20578: LD_VAR 0 2
20582: PUSH
20583: FOR_IN
20584: IFFALSE 20600
// SetLives ( i , 300 ) ;
20586: LD_VAR 0 1
20590: PPUSH
20591: LD_INT 300
20593: PPUSH
20594: CALL_OW 234
20598: GO 20583
20600: POP
20601: POP
// end ;
20602: PPOPN 2
20604: END
// every 0 0$1 trigger s60 do var i , tmp ;
20605: LD_EXP 86
20609: IFFALSE 20678
20611: GO 20613
20613: DISABLE
20614: LD_INT 0
20616: PPUSH
20617: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20618: LD_ADDR_VAR 0 2
20622: PUSH
20623: LD_INT 22
20625: PUSH
20626: LD_OWVAR 2
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PPUSH
20635: CALL_OW 69
20639: ST_TO_ADDR
// if not tmp then
20640: LD_VAR 0 2
20644: NOT
20645: IFFALSE 20649
// exit ;
20647: GO 20678
// for i in tmp do
20649: LD_ADDR_VAR 0 1
20653: PUSH
20654: LD_VAR 0 2
20658: PUSH
20659: FOR_IN
20660: IFFALSE 20676
// SetLives ( i , 600 ) ;
20662: LD_VAR 0 1
20666: PPUSH
20667: LD_INT 600
20669: PPUSH
20670: CALL_OW 234
20674: GO 20659
20676: POP
20677: POP
// end ;
20678: PPOPN 2
20680: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20681: LD_INT 0
20683: PPUSH
// case cmd of 301 :
20684: LD_VAR 0 1
20688: PUSH
20689: LD_INT 301
20691: DOUBLE
20692: EQUAL
20693: IFTRUE 20697
20695: GO 20729
20697: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20698: LD_VAR 0 6
20702: PPUSH
20703: LD_VAR 0 7
20707: PPUSH
20708: LD_VAR 0 8
20712: PPUSH
20713: LD_VAR 0 4
20717: PPUSH
20718: LD_VAR 0 5
20722: PPUSH
20723: CALL 21930 0 5
20727: GO 20850
20729: LD_INT 302
20731: DOUBLE
20732: EQUAL
20733: IFTRUE 20737
20735: GO 20774
20737: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20738: LD_VAR 0 6
20742: PPUSH
20743: LD_VAR 0 7
20747: PPUSH
20748: LD_VAR 0 8
20752: PPUSH
20753: LD_VAR 0 9
20757: PPUSH
20758: LD_VAR 0 4
20762: PPUSH
20763: LD_VAR 0 5
20767: PPUSH
20768: CALL 22021 0 6
20772: GO 20850
20774: LD_INT 303
20776: DOUBLE
20777: EQUAL
20778: IFTRUE 20782
20780: GO 20819
20782: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20783: LD_VAR 0 6
20787: PPUSH
20788: LD_VAR 0 7
20792: PPUSH
20793: LD_VAR 0 8
20797: PPUSH
20798: LD_VAR 0 9
20802: PPUSH
20803: LD_VAR 0 4
20807: PPUSH
20808: LD_VAR 0 5
20812: PPUSH
20813: CALL 20855 0 6
20817: GO 20850
20819: LD_INT 304
20821: DOUBLE
20822: EQUAL
20823: IFTRUE 20827
20825: GO 20849
20827: POP
// hHackTeleport ( unit , x , y ) ; end ;
20828: LD_VAR 0 2
20832: PPUSH
20833: LD_VAR 0 4
20837: PPUSH
20838: LD_VAR 0 5
20842: PPUSH
20843: CALL 22614 0 3
20847: GO 20850
20849: POP
// end ;
20850: LD_VAR 0 12
20854: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20855: LD_INT 0
20857: PPUSH
20858: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20859: LD_VAR 0 1
20863: PUSH
20864: LD_INT 1
20866: LESS
20867: PUSH
20868: LD_VAR 0 1
20872: PUSH
20873: LD_INT 3
20875: GREATER
20876: OR
20877: PUSH
20878: LD_VAR 0 5
20882: PPUSH
20883: LD_VAR 0 6
20887: PPUSH
20888: CALL_OW 428
20892: OR
20893: IFFALSE 20897
// exit ;
20895: GO 21617
// uc_side := your_side ;
20897: LD_ADDR_OWVAR 20
20901: PUSH
20902: LD_OWVAR 2
20906: ST_TO_ADDR
// uc_nation := nation ;
20907: LD_ADDR_OWVAR 21
20911: PUSH
20912: LD_VAR 0 1
20916: ST_TO_ADDR
// bc_level = 1 ;
20917: LD_ADDR_OWVAR 43
20921: PUSH
20922: LD_INT 1
20924: ST_TO_ADDR
// case btype of 1 :
20925: LD_VAR 0 2
20929: PUSH
20930: LD_INT 1
20932: DOUBLE
20933: EQUAL
20934: IFTRUE 20938
20936: GO 20949
20938: POP
// bc_type := b_depot ; 2 :
20939: LD_ADDR_OWVAR 42
20943: PUSH
20944: LD_INT 0
20946: ST_TO_ADDR
20947: GO 21561
20949: LD_INT 2
20951: DOUBLE
20952: EQUAL
20953: IFTRUE 20957
20955: GO 20968
20957: POP
// bc_type := b_warehouse ; 3 :
20958: LD_ADDR_OWVAR 42
20962: PUSH
20963: LD_INT 1
20965: ST_TO_ADDR
20966: GO 21561
20968: LD_INT 3
20970: DOUBLE
20971: EQUAL
20972: IFTRUE 20976
20974: GO 20987
20976: POP
// bc_type := b_lab ; 4 .. 9 :
20977: LD_ADDR_OWVAR 42
20981: PUSH
20982: LD_INT 6
20984: ST_TO_ADDR
20985: GO 21561
20987: LD_INT 4
20989: DOUBLE
20990: GREATEREQUAL
20991: IFFALSE 20999
20993: LD_INT 9
20995: DOUBLE
20996: LESSEQUAL
20997: IFTRUE 21001
20999: GO 21053
21001: POP
// begin bc_type := b_lab_half ;
21002: LD_ADDR_OWVAR 42
21006: PUSH
21007: LD_INT 7
21009: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21010: LD_ADDR_OWVAR 44
21014: PUSH
21015: LD_INT 10
21017: PUSH
21018: LD_INT 11
21020: PUSH
21021: LD_INT 12
21023: PUSH
21024: LD_INT 15
21026: PUSH
21027: LD_INT 14
21029: PUSH
21030: LD_INT 13
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: PUSH
21041: LD_VAR 0 2
21045: PUSH
21046: LD_INT 3
21048: MINUS
21049: ARRAY
21050: ST_TO_ADDR
// end ; 10 .. 13 :
21051: GO 21561
21053: LD_INT 10
21055: DOUBLE
21056: GREATEREQUAL
21057: IFFALSE 21065
21059: LD_INT 13
21061: DOUBLE
21062: LESSEQUAL
21063: IFTRUE 21067
21065: GO 21144
21067: POP
// begin bc_type := b_lab_full ;
21068: LD_ADDR_OWVAR 42
21072: PUSH
21073: LD_INT 8
21075: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21076: LD_ADDR_OWVAR 44
21080: PUSH
21081: LD_INT 10
21083: PUSH
21084: LD_INT 12
21086: PUSH
21087: LD_INT 14
21089: PUSH
21090: LD_INT 13
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: PUSH
21099: LD_VAR 0 2
21103: PUSH
21104: LD_INT 9
21106: MINUS
21107: ARRAY
21108: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21109: LD_ADDR_OWVAR 45
21113: PUSH
21114: LD_INT 11
21116: PUSH
21117: LD_INT 15
21119: PUSH
21120: LD_INT 12
21122: PUSH
21123: LD_INT 15
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: PUSH
21132: LD_VAR 0 2
21136: PUSH
21137: LD_INT 9
21139: MINUS
21140: ARRAY
21141: ST_TO_ADDR
// end ; 14 :
21142: GO 21561
21144: LD_INT 14
21146: DOUBLE
21147: EQUAL
21148: IFTRUE 21152
21150: GO 21163
21152: POP
// bc_type := b_workshop ; 15 :
21153: LD_ADDR_OWVAR 42
21157: PUSH
21158: LD_INT 2
21160: ST_TO_ADDR
21161: GO 21561
21163: LD_INT 15
21165: DOUBLE
21166: EQUAL
21167: IFTRUE 21171
21169: GO 21182
21171: POP
// bc_type := b_factory ; 16 :
21172: LD_ADDR_OWVAR 42
21176: PUSH
21177: LD_INT 3
21179: ST_TO_ADDR
21180: GO 21561
21182: LD_INT 16
21184: DOUBLE
21185: EQUAL
21186: IFTRUE 21190
21188: GO 21201
21190: POP
// bc_type := b_ext_gun ; 17 :
21191: LD_ADDR_OWVAR 42
21195: PUSH
21196: LD_INT 17
21198: ST_TO_ADDR
21199: GO 21561
21201: LD_INT 17
21203: DOUBLE
21204: EQUAL
21205: IFTRUE 21209
21207: GO 21237
21209: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21210: LD_ADDR_OWVAR 42
21214: PUSH
21215: LD_INT 19
21217: PUSH
21218: LD_INT 23
21220: PUSH
21221: LD_INT 19
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: LIST
21228: PUSH
21229: LD_VAR 0 1
21233: ARRAY
21234: ST_TO_ADDR
21235: GO 21561
21237: LD_INT 18
21239: DOUBLE
21240: EQUAL
21241: IFTRUE 21245
21243: GO 21256
21245: POP
// bc_type := b_ext_radar ; 19 :
21246: LD_ADDR_OWVAR 42
21250: PUSH
21251: LD_INT 20
21253: ST_TO_ADDR
21254: GO 21561
21256: LD_INT 19
21258: DOUBLE
21259: EQUAL
21260: IFTRUE 21264
21262: GO 21275
21264: POP
// bc_type := b_ext_radio ; 20 :
21265: LD_ADDR_OWVAR 42
21269: PUSH
21270: LD_INT 22
21272: ST_TO_ADDR
21273: GO 21561
21275: LD_INT 20
21277: DOUBLE
21278: EQUAL
21279: IFTRUE 21283
21281: GO 21294
21283: POP
// bc_type := b_ext_siberium ; 21 :
21284: LD_ADDR_OWVAR 42
21288: PUSH
21289: LD_INT 21
21291: ST_TO_ADDR
21292: GO 21561
21294: LD_INT 21
21296: DOUBLE
21297: EQUAL
21298: IFTRUE 21302
21300: GO 21313
21302: POP
// bc_type := b_ext_computer ; 22 :
21303: LD_ADDR_OWVAR 42
21307: PUSH
21308: LD_INT 24
21310: ST_TO_ADDR
21311: GO 21561
21313: LD_INT 22
21315: DOUBLE
21316: EQUAL
21317: IFTRUE 21321
21319: GO 21332
21321: POP
// bc_type := b_ext_track ; 23 :
21322: LD_ADDR_OWVAR 42
21326: PUSH
21327: LD_INT 16
21329: ST_TO_ADDR
21330: GO 21561
21332: LD_INT 23
21334: DOUBLE
21335: EQUAL
21336: IFTRUE 21340
21338: GO 21351
21340: POP
// bc_type := b_ext_laser ; 24 :
21341: LD_ADDR_OWVAR 42
21345: PUSH
21346: LD_INT 25
21348: ST_TO_ADDR
21349: GO 21561
21351: LD_INT 24
21353: DOUBLE
21354: EQUAL
21355: IFTRUE 21359
21357: GO 21370
21359: POP
// bc_type := b_control_tower ; 25 :
21360: LD_ADDR_OWVAR 42
21364: PUSH
21365: LD_INT 36
21367: ST_TO_ADDR
21368: GO 21561
21370: LD_INT 25
21372: DOUBLE
21373: EQUAL
21374: IFTRUE 21378
21376: GO 21389
21378: POP
// bc_type := b_breastwork ; 26 :
21379: LD_ADDR_OWVAR 42
21383: PUSH
21384: LD_INT 31
21386: ST_TO_ADDR
21387: GO 21561
21389: LD_INT 26
21391: DOUBLE
21392: EQUAL
21393: IFTRUE 21397
21395: GO 21408
21397: POP
// bc_type := b_bunker ; 27 :
21398: LD_ADDR_OWVAR 42
21402: PUSH
21403: LD_INT 32
21405: ST_TO_ADDR
21406: GO 21561
21408: LD_INT 27
21410: DOUBLE
21411: EQUAL
21412: IFTRUE 21416
21414: GO 21427
21416: POP
// bc_type := b_turret ; 28 :
21417: LD_ADDR_OWVAR 42
21421: PUSH
21422: LD_INT 33
21424: ST_TO_ADDR
21425: GO 21561
21427: LD_INT 28
21429: DOUBLE
21430: EQUAL
21431: IFTRUE 21435
21433: GO 21446
21435: POP
// bc_type := b_armoury ; 29 :
21436: LD_ADDR_OWVAR 42
21440: PUSH
21441: LD_INT 4
21443: ST_TO_ADDR
21444: GO 21561
21446: LD_INT 29
21448: DOUBLE
21449: EQUAL
21450: IFTRUE 21454
21452: GO 21465
21454: POP
// bc_type := b_barracks ; 30 :
21455: LD_ADDR_OWVAR 42
21459: PUSH
21460: LD_INT 5
21462: ST_TO_ADDR
21463: GO 21561
21465: LD_INT 30
21467: DOUBLE
21468: EQUAL
21469: IFTRUE 21473
21471: GO 21484
21473: POP
// bc_type := b_solar_power ; 31 :
21474: LD_ADDR_OWVAR 42
21478: PUSH
21479: LD_INT 27
21481: ST_TO_ADDR
21482: GO 21561
21484: LD_INT 31
21486: DOUBLE
21487: EQUAL
21488: IFTRUE 21492
21490: GO 21503
21492: POP
// bc_type := b_oil_power ; 32 :
21493: LD_ADDR_OWVAR 42
21497: PUSH
21498: LD_INT 26
21500: ST_TO_ADDR
21501: GO 21561
21503: LD_INT 32
21505: DOUBLE
21506: EQUAL
21507: IFTRUE 21511
21509: GO 21522
21511: POP
// bc_type := b_siberite_power ; 33 :
21512: LD_ADDR_OWVAR 42
21516: PUSH
21517: LD_INT 28
21519: ST_TO_ADDR
21520: GO 21561
21522: LD_INT 33
21524: DOUBLE
21525: EQUAL
21526: IFTRUE 21530
21528: GO 21541
21530: POP
// bc_type := b_oil_mine ; 34 :
21531: LD_ADDR_OWVAR 42
21535: PUSH
21536: LD_INT 29
21538: ST_TO_ADDR
21539: GO 21561
21541: LD_INT 34
21543: DOUBLE
21544: EQUAL
21545: IFTRUE 21549
21547: GO 21560
21549: POP
// bc_type := b_siberite_mine ; end ;
21550: LD_ADDR_OWVAR 42
21554: PUSH
21555: LD_INT 30
21557: ST_TO_ADDR
21558: GO 21561
21560: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21561: LD_ADDR_VAR 0 8
21565: PUSH
21566: LD_VAR 0 5
21570: PPUSH
21571: LD_VAR 0 6
21575: PPUSH
21576: LD_VAR 0 3
21580: PPUSH
21581: CALL_OW 47
21585: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21586: LD_OWVAR 42
21590: PUSH
21591: LD_INT 32
21593: PUSH
21594: LD_INT 33
21596: PUSH
21597: EMPTY
21598: LIST
21599: LIST
21600: IN
21601: IFFALSE 21617
// PlaceWeaponTurret ( b , weapon ) ;
21603: LD_VAR 0 8
21607: PPUSH
21608: LD_VAR 0 4
21612: PPUSH
21613: CALL_OW 431
// end ;
21617: LD_VAR 0 7
21621: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21622: LD_INT 0
21624: PPUSH
21625: PPUSH
21626: PPUSH
21627: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21628: LD_ADDR_VAR 0 4
21632: PUSH
21633: LD_INT 22
21635: PUSH
21636: LD_OWVAR 2
21640: PUSH
21641: EMPTY
21642: LIST
21643: LIST
21644: PUSH
21645: LD_INT 2
21647: PUSH
21648: LD_INT 30
21650: PUSH
21651: LD_INT 0
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: PUSH
21658: LD_INT 30
21660: PUSH
21661: LD_INT 1
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: LIST
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: PPUSH
21677: CALL_OW 69
21681: ST_TO_ADDR
// if not tmp then
21682: LD_VAR 0 4
21686: NOT
21687: IFFALSE 21691
// exit ;
21689: GO 21750
// for i in tmp do
21691: LD_ADDR_VAR 0 2
21695: PUSH
21696: LD_VAR 0 4
21700: PUSH
21701: FOR_IN
21702: IFFALSE 21748
// for j = 1 to 3 do
21704: LD_ADDR_VAR 0 3
21708: PUSH
21709: DOUBLE
21710: LD_INT 1
21712: DEC
21713: ST_TO_ADDR
21714: LD_INT 3
21716: PUSH
21717: FOR_TO
21718: IFFALSE 21744
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21720: LD_VAR 0 2
21724: PPUSH
21725: CALL_OW 274
21729: PPUSH
21730: LD_VAR 0 3
21734: PPUSH
21735: LD_INT 99999
21737: PPUSH
21738: CALL_OW 277
21742: GO 21717
21744: POP
21745: POP
21746: GO 21701
21748: POP
21749: POP
// end ;
21750: LD_VAR 0 1
21754: RET
// export function hHackSetLevel10 ; var i , j ; begin
21755: LD_INT 0
21757: PPUSH
21758: PPUSH
21759: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21760: LD_ADDR_VAR 0 2
21764: PUSH
21765: LD_INT 21
21767: PUSH
21768: LD_INT 1
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PPUSH
21775: CALL_OW 69
21779: PUSH
21780: FOR_IN
21781: IFFALSE 21833
// if IsSelected ( i ) then
21783: LD_VAR 0 2
21787: PPUSH
21788: CALL_OW 306
21792: IFFALSE 21831
// begin for j := 1 to 4 do
21794: LD_ADDR_VAR 0 3
21798: PUSH
21799: DOUBLE
21800: LD_INT 1
21802: DEC
21803: ST_TO_ADDR
21804: LD_INT 4
21806: PUSH
21807: FOR_TO
21808: IFFALSE 21829
// SetSkill ( i , j , 10 ) ;
21810: LD_VAR 0 2
21814: PPUSH
21815: LD_VAR 0 3
21819: PPUSH
21820: LD_INT 10
21822: PPUSH
21823: CALL_OW 237
21827: GO 21807
21829: POP
21830: POP
// end ;
21831: GO 21780
21833: POP
21834: POP
// end ;
21835: LD_VAR 0 1
21839: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21840: LD_INT 0
21842: PPUSH
21843: PPUSH
21844: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21845: LD_ADDR_VAR 0 2
21849: PUSH
21850: LD_INT 22
21852: PUSH
21853: LD_OWVAR 2
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 21
21864: PUSH
21865: LD_INT 1
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PPUSH
21876: CALL_OW 69
21880: PUSH
21881: FOR_IN
21882: IFFALSE 21923
// begin for j := 1 to 4 do
21884: LD_ADDR_VAR 0 3
21888: PUSH
21889: DOUBLE
21890: LD_INT 1
21892: DEC
21893: ST_TO_ADDR
21894: LD_INT 4
21896: PUSH
21897: FOR_TO
21898: IFFALSE 21919
// SetSkill ( i , j , 10 ) ;
21900: LD_VAR 0 2
21904: PPUSH
21905: LD_VAR 0 3
21909: PPUSH
21910: LD_INT 10
21912: PPUSH
21913: CALL_OW 237
21917: GO 21897
21919: POP
21920: POP
// end ;
21921: GO 21881
21923: POP
21924: POP
// end ;
21925: LD_VAR 0 1
21929: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21930: LD_INT 0
21932: PPUSH
// uc_side := your_side ;
21933: LD_ADDR_OWVAR 20
21937: PUSH
21938: LD_OWVAR 2
21942: ST_TO_ADDR
// uc_nation := nation ;
21943: LD_ADDR_OWVAR 21
21947: PUSH
21948: LD_VAR 0 1
21952: ST_TO_ADDR
// InitHc ;
21953: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21957: LD_INT 0
21959: PPUSH
21960: LD_VAR 0 2
21964: PPUSH
21965: LD_VAR 0 3
21969: PPUSH
21970: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21974: LD_VAR 0 4
21978: PPUSH
21979: LD_VAR 0 5
21983: PPUSH
21984: CALL_OW 428
21988: PUSH
21989: LD_INT 0
21991: EQUAL
21992: IFFALSE 22016
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21994: CALL_OW 44
21998: PPUSH
21999: LD_VAR 0 4
22003: PPUSH
22004: LD_VAR 0 5
22008: PPUSH
22009: LD_INT 1
22011: PPUSH
22012: CALL_OW 48
// end ;
22016: LD_VAR 0 6
22020: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22021: LD_INT 0
22023: PPUSH
22024: PPUSH
// uc_side := your_side ;
22025: LD_ADDR_OWVAR 20
22029: PUSH
22030: LD_OWVAR 2
22034: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22035: LD_VAR 0 1
22039: PUSH
22040: LD_INT 1
22042: PUSH
22043: LD_INT 2
22045: PUSH
22046: LD_INT 3
22048: PUSH
22049: LD_INT 4
22051: PUSH
22052: LD_INT 5
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: IN
22062: IFFALSE 22074
// uc_nation := nation_american else
22064: LD_ADDR_OWVAR 21
22068: PUSH
22069: LD_INT 1
22071: ST_TO_ADDR
22072: GO 22117
// if chassis in [ 11 , 12 , 13 , 14 ] then
22074: LD_VAR 0 1
22078: PUSH
22079: LD_INT 11
22081: PUSH
22082: LD_INT 12
22084: PUSH
22085: LD_INT 13
22087: PUSH
22088: LD_INT 14
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: IN
22097: IFFALSE 22109
// uc_nation := nation_arabian else
22099: LD_ADDR_OWVAR 21
22103: PUSH
22104: LD_INT 2
22106: ST_TO_ADDR
22107: GO 22117
// uc_nation := nation_russian ;
22109: LD_ADDR_OWVAR 21
22113: PUSH
22114: LD_INT 3
22116: ST_TO_ADDR
// vc_chassis := chassis ;
22117: LD_ADDR_OWVAR 37
22121: PUSH
22122: LD_VAR 0 1
22126: ST_TO_ADDR
// vc_engine := engine ;
22127: LD_ADDR_OWVAR 39
22131: PUSH
22132: LD_VAR 0 2
22136: ST_TO_ADDR
// vc_control := control ;
22137: LD_ADDR_OWVAR 38
22141: PUSH
22142: LD_VAR 0 3
22146: ST_TO_ADDR
// vc_weapon := weapon ;
22147: LD_ADDR_OWVAR 40
22151: PUSH
22152: LD_VAR 0 4
22156: ST_TO_ADDR
// un := CreateVehicle ;
22157: LD_ADDR_VAR 0 8
22161: PUSH
22162: CALL_OW 45
22166: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22167: LD_VAR 0 8
22171: PPUSH
22172: LD_INT 0
22174: PPUSH
22175: LD_INT 5
22177: PPUSH
22178: CALL_OW 12
22182: PPUSH
22183: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22187: LD_VAR 0 8
22191: PPUSH
22192: LD_VAR 0 5
22196: PPUSH
22197: LD_VAR 0 6
22201: PPUSH
22202: LD_INT 1
22204: PPUSH
22205: CALL_OW 48
// end ;
22209: LD_VAR 0 7
22213: RET
// export hInvincible ; every 1 do
22214: GO 22216
22216: DISABLE
// hInvincible := [ ] ;
22217: LD_ADDR_EXP 87
22221: PUSH
22222: EMPTY
22223: ST_TO_ADDR
22224: END
// every 10 do var i ;
22225: GO 22227
22227: DISABLE
22228: LD_INT 0
22230: PPUSH
// begin enable ;
22231: ENABLE
// if not hInvincible then
22232: LD_EXP 87
22236: NOT
22237: IFFALSE 22241
// exit ;
22239: GO 22285
// for i in hInvincible do
22241: LD_ADDR_VAR 0 1
22245: PUSH
22246: LD_EXP 87
22250: PUSH
22251: FOR_IN
22252: IFFALSE 22283
// if GetLives ( i ) < 1000 then
22254: LD_VAR 0 1
22258: PPUSH
22259: CALL_OW 256
22263: PUSH
22264: LD_INT 1000
22266: LESS
22267: IFFALSE 22281
// SetLives ( i , 1000 ) ;
22269: LD_VAR 0 1
22273: PPUSH
22274: LD_INT 1000
22276: PPUSH
22277: CALL_OW 234
22281: GO 22251
22283: POP
22284: POP
// end ;
22285: PPOPN 1
22287: END
// export function hHackInvincible ; var i ; begin
22288: LD_INT 0
22290: PPUSH
22291: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22292: LD_ADDR_VAR 0 2
22296: PUSH
22297: LD_INT 2
22299: PUSH
22300: LD_INT 21
22302: PUSH
22303: LD_INT 1
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 21
22312: PUSH
22313: LD_INT 2
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: LIST
22324: PPUSH
22325: CALL_OW 69
22329: PUSH
22330: FOR_IN
22331: IFFALSE 22392
// if IsSelected ( i ) then
22333: LD_VAR 0 2
22337: PPUSH
22338: CALL_OW 306
22342: IFFALSE 22390
// begin if i in hInvincible then
22344: LD_VAR 0 2
22348: PUSH
22349: LD_EXP 87
22353: IN
22354: IFFALSE 22374
// hInvincible := hInvincible diff i else
22356: LD_ADDR_EXP 87
22360: PUSH
22361: LD_EXP 87
22365: PUSH
22366: LD_VAR 0 2
22370: DIFF
22371: ST_TO_ADDR
22372: GO 22390
// hInvincible := hInvincible union i ;
22374: LD_ADDR_EXP 87
22378: PUSH
22379: LD_EXP 87
22383: PUSH
22384: LD_VAR 0 2
22388: UNION
22389: ST_TO_ADDR
// end ;
22390: GO 22330
22392: POP
22393: POP
// end ;
22394: LD_VAR 0 1
22398: RET
// export function hHackInvisible ; var i , j ; begin
22399: LD_INT 0
22401: PPUSH
22402: PPUSH
22403: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22404: LD_ADDR_VAR 0 2
22408: PUSH
22409: LD_INT 21
22411: PUSH
22412: LD_INT 1
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PPUSH
22419: CALL_OW 69
22423: PUSH
22424: FOR_IN
22425: IFFALSE 22449
// if IsSelected ( i ) then
22427: LD_VAR 0 2
22431: PPUSH
22432: CALL_OW 306
22436: IFFALSE 22447
// ComForceInvisible ( i ) ;
22438: LD_VAR 0 2
22442: PPUSH
22443: CALL_OW 496
22447: GO 22424
22449: POP
22450: POP
// end ;
22451: LD_VAR 0 1
22455: RET
// export function hHackChangeYourSide ; begin
22456: LD_INT 0
22458: PPUSH
// if your_side = 8 then
22459: LD_OWVAR 2
22463: PUSH
22464: LD_INT 8
22466: EQUAL
22467: IFFALSE 22479
// your_side := 0 else
22469: LD_ADDR_OWVAR 2
22473: PUSH
22474: LD_INT 0
22476: ST_TO_ADDR
22477: GO 22493
// your_side := your_side + 1 ;
22479: LD_ADDR_OWVAR 2
22483: PUSH
22484: LD_OWVAR 2
22488: PUSH
22489: LD_INT 1
22491: PLUS
22492: ST_TO_ADDR
// end ;
22493: LD_VAR 0 1
22497: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22498: LD_INT 0
22500: PPUSH
22501: PPUSH
22502: PPUSH
// for i in all_units do
22503: LD_ADDR_VAR 0 2
22507: PUSH
22508: LD_OWVAR 3
22512: PUSH
22513: FOR_IN
22514: IFFALSE 22592
// if IsSelected ( i ) then
22516: LD_VAR 0 2
22520: PPUSH
22521: CALL_OW 306
22525: IFFALSE 22590
// begin j := GetSide ( i ) ;
22527: LD_ADDR_VAR 0 3
22531: PUSH
22532: LD_VAR 0 2
22536: PPUSH
22537: CALL_OW 255
22541: ST_TO_ADDR
// if j = 8 then
22542: LD_VAR 0 3
22546: PUSH
22547: LD_INT 8
22549: EQUAL
22550: IFFALSE 22562
// j := 0 else
22552: LD_ADDR_VAR 0 3
22556: PUSH
22557: LD_INT 0
22559: ST_TO_ADDR
22560: GO 22576
// j := j + 1 ;
22562: LD_ADDR_VAR 0 3
22566: PUSH
22567: LD_VAR 0 3
22571: PUSH
22572: LD_INT 1
22574: PLUS
22575: ST_TO_ADDR
// SetSide ( i , j ) ;
22576: LD_VAR 0 2
22580: PPUSH
22581: LD_VAR 0 3
22585: PPUSH
22586: CALL_OW 235
// end ;
22590: GO 22513
22592: POP
22593: POP
// end ;
22594: LD_VAR 0 1
22598: RET
// export function hHackFog ; begin
22599: LD_INT 0
22601: PPUSH
// FogOff ( true ) ;
22602: LD_INT 1
22604: PPUSH
22605: CALL_OW 344
// end ;
22609: LD_VAR 0 1
22613: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22614: LD_INT 0
22616: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22617: LD_VAR 0 1
22621: PPUSH
22622: LD_VAR 0 2
22626: PPUSH
22627: LD_VAR 0 3
22631: PPUSH
22632: LD_INT 1
22634: PPUSH
22635: LD_INT 1
22637: PPUSH
22638: CALL_OW 483
// CenterOnXY ( x , y ) ;
22642: LD_VAR 0 2
22646: PPUSH
22647: LD_VAR 0 3
22651: PPUSH
22652: CALL_OW 84
// end ;
22656: LD_VAR 0 4
22660: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22661: LD_INT 0
22663: PPUSH
22664: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22665: LD_VAR 0 1
22669: NOT
22670: PUSH
22671: LD_VAR 0 2
22675: PPUSH
22676: LD_VAR 0 3
22680: PPUSH
22681: CALL_OW 488
22685: NOT
22686: OR
22687: PUSH
22688: LD_VAR 0 1
22692: PPUSH
22693: CALL_OW 266
22697: PUSH
22698: LD_INT 3
22700: NONEQUAL
22701: PUSH
22702: LD_VAR 0 1
22706: PPUSH
22707: CALL_OW 247
22711: PUSH
22712: LD_INT 1
22714: EQUAL
22715: NOT
22716: AND
22717: OR
22718: IFFALSE 22722
// exit ;
22720: GO 22871
// if GetType ( factory ) = unit_human then
22722: LD_VAR 0 1
22726: PPUSH
22727: CALL_OW 247
22731: PUSH
22732: LD_INT 1
22734: EQUAL
22735: IFFALSE 22752
// factory := IsInUnit ( factory ) ;
22737: LD_ADDR_VAR 0 1
22741: PUSH
22742: LD_VAR 0 1
22746: PPUSH
22747: CALL_OW 310
22751: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22752: LD_VAR 0 1
22756: PPUSH
22757: CALL_OW 266
22761: PUSH
22762: LD_INT 3
22764: NONEQUAL
22765: IFFALSE 22769
// exit ;
22767: GO 22871
// if HexInfo ( x , y ) = factory then
22769: LD_VAR 0 2
22773: PPUSH
22774: LD_VAR 0 3
22778: PPUSH
22779: CALL_OW 428
22783: PUSH
22784: LD_VAR 0 1
22788: EQUAL
22789: IFFALSE 22816
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22791: LD_ADDR_EXP 88
22795: PUSH
22796: LD_EXP 88
22800: PPUSH
22801: LD_VAR 0 1
22805: PPUSH
22806: LD_INT 0
22808: PPUSH
22809: CALL_OW 1
22813: ST_TO_ADDR
22814: GO 22867
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22816: LD_ADDR_EXP 88
22820: PUSH
22821: LD_EXP 88
22825: PPUSH
22826: LD_VAR 0 1
22830: PPUSH
22831: LD_VAR 0 1
22835: PPUSH
22836: CALL_OW 255
22840: PUSH
22841: LD_VAR 0 1
22845: PUSH
22846: LD_VAR 0 2
22850: PUSH
22851: LD_VAR 0 3
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: PPUSH
22862: CALL_OW 1
22866: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22867: CALL 22876 0 0
// end ;
22871: LD_VAR 0 4
22875: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22876: LD_INT 0
22878: PPUSH
22879: PPUSH
22880: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22881: LD_STRING resetFactoryWaypoint();
22883: PPUSH
22884: CALL_OW 559
// if factoryWaypoints then
22888: LD_EXP 88
22892: IFFALSE 23018
// begin list := PrepareArray ( factoryWaypoints ) ;
22894: LD_ADDR_VAR 0 3
22898: PUSH
22899: LD_EXP 88
22903: PPUSH
22904: CALL 69468 0 1
22908: ST_TO_ADDR
// for i := 1 to list do
22909: LD_ADDR_VAR 0 2
22913: PUSH
22914: DOUBLE
22915: LD_INT 1
22917: DEC
22918: ST_TO_ADDR
22919: LD_VAR 0 3
22923: PUSH
22924: FOR_TO
22925: IFFALSE 23016
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22927: LD_STRING setFactoryWaypointXY(
22929: PUSH
22930: LD_VAR 0 3
22934: PUSH
22935: LD_VAR 0 2
22939: ARRAY
22940: PUSH
22941: LD_INT 1
22943: ARRAY
22944: STR
22945: PUSH
22946: LD_STRING ,
22948: STR
22949: PUSH
22950: LD_VAR 0 3
22954: PUSH
22955: LD_VAR 0 2
22959: ARRAY
22960: PUSH
22961: LD_INT 2
22963: ARRAY
22964: STR
22965: PUSH
22966: LD_STRING ,
22968: STR
22969: PUSH
22970: LD_VAR 0 3
22974: PUSH
22975: LD_VAR 0 2
22979: ARRAY
22980: PUSH
22981: LD_INT 3
22983: ARRAY
22984: STR
22985: PUSH
22986: LD_STRING ,
22988: STR
22989: PUSH
22990: LD_VAR 0 3
22994: PUSH
22995: LD_VAR 0 2
22999: ARRAY
23000: PUSH
23001: LD_INT 4
23003: ARRAY
23004: STR
23005: PUSH
23006: LD_STRING )
23008: STR
23009: PPUSH
23010: CALL_OW 559
23014: GO 22924
23016: POP
23017: POP
// end ; end ;
23018: LD_VAR 0 1
23022: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23023: LD_INT 0
23025: PPUSH
// if HexInfo ( x , y ) = warehouse then
23026: LD_VAR 0 2
23030: PPUSH
23031: LD_VAR 0 3
23035: PPUSH
23036: CALL_OW 428
23040: PUSH
23041: LD_VAR 0 1
23045: EQUAL
23046: IFFALSE 23073
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23048: LD_ADDR_EXP 89
23052: PUSH
23053: LD_EXP 89
23057: PPUSH
23058: LD_VAR 0 1
23062: PPUSH
23063: LD_INT 0
23065: PPUSH
23066: CALL_OW 1
23070: ST_TO_ADDR
23071: GO 23124
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23073: LD_ADDR_EXP 89
23077: PUSH
23078: LD_EXP 89
23082: PPUSH
23083: LD_VAR 0 1
23087: PPUSH
23088: LD_VAR 0 1
23092: PPUSH
23093: CALL_OW 255
23097: PUSH
23098: LD_VAR 0 1
23102: PUSH
23103: LD_VAR 0 2
23107: PUSH
23108: LD_VAR 0 3
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: PPUSH
23119: CALL_OW 1
23123: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23124: CALL 23133 0 0
// end ;
23128: LD_VAR 0 4
23132: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23133: LD_INT 0
23135: PPUSH
23136: PPUSH
23137: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23138: LD_STRING resetWarehouseGatheringPoints();
23140: PPUSH
23141: CALL_OW 559
// if warehouseGatheringPoints then
23145: LD_EXP 89
23149: IFFALSE 23275
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23151: LD_ADDR_VAR 0 3
23155: PUSH
23156: LD_EXP 89
23160: PPUSH
23161: CALL 69468 0 1
23165: ST_TO_ADDR
// for i := 1 to list do
23166: LD_ADDR_VAR 0 2
23170: PUSH
23171: DOUBLE
23172: LD_INT 1
23174: DEC
23175: ST_TO_ADDR
23176: LD_VAR 0 3
23180: PUSH
23181: FOR_TO
23182: IFFALSE 23273
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23184: LD_STRING setWarehouseGatheringPointXY(
23186: PUSH
23187: LD_VAR 0 3
23191: PUSH
23192: LD_VAR 0 2
23196: ARRAY
23197: PUSH
23198: LD_INT 1
23200: ARRAY
23201: STR
23202: PUSH
23203: LD_STRING ,
23205: STR
23206: PUSH
23207: LD_VAR 0 3
23211: PUSH
23212: LD_VAR 0 2
23216: ARRAY
23217: PUSH
23218: LD_INT 2
23220: ARRAY
23221: STR
23222: PUSH
23223: LD_STRING ,
23225: STR
23226: PUSH
23227: LD_VAR 0 3
23231: PUSH
23232: LD_VAR 0 2
23236: ARRAY
23237: PUSH
23238: LD_INT 3
23240: ARRAY
23241: STR
23242: PUSH
23243: LD_STRING ,
23245: STR
23246: PUSH
23247: LD_VAR 0 3
23251: PUSH
23252: LD_VAR 0 2
23256: ARRAY
23257: PUSH
23258: LD_INT 4
23260: ARRAY
23261: STR
23262: PUSH
23263: LD_STRING )
23265: STR
23266: PPUSH
23267: CALL_OW 559
23271: GO 23181
23273: POP
23274: POP
// end ; end ;
23275: LD_VAR 0 1
23279: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23280: LD_EXP 89
23284: IFFALSE 23969
23286: GO 23288
23288: DISABLE
23289: LD_INT 0
23291: PPUSH
23292: PPUSH
23293: PPUSH
23294: PPUSH
23295: PPUSH
23296: PPUSH
23297: PPUSH
23298: PPUSH
23299: PPUSH
// begin enable ;
23300: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23301: LD_ADDR_VAR 0 3
23305: PUSH
23306: LD_EXP 89
23310: PPUSH
23311: CALL 69468 0 1
23315: ST_TO_ADDR
// if not list then
23316: LD_VAR 0 3
23320: NOT
23321: IFFALSE 23325
// exit ;
23323: GO 23969
// for i := 1 to list do
23325: LD_ADDR_VAR 0 1
23329: PUSH
23330: DOUBLE
23331: LD_INT 1
23333: DEC
23334: ST_TO_ADDR
23335: LD_VAR 0 3
23339: PUSH
23340: FOR_TO
23341: IFFALSE 23967
// begin depot := list [ i ] [ 2 ] ;
23343: LD_ADDR_VAR 0 8
23347: PUSH
23348: LD_VAR 0 3
23352: PUSH
23353: LD_VAR 0 1
23357: ARRAY
23358: PUSH
23359: LD_INT 2
23361: ARRAY
23362: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23363: LD_ADDR_VAR 0 5
23367: PUSH
23368: LD_VAR 0 3
23372: PUSH
23373: LD_VAR 0 1
23377: ARRAY
23378: PUSH
23379: LD_INT 1
23381: ARRAY
23382: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23383: LD_VAR 0 8
23387: PPUSH
23388: CALL_OW 301
23392: PUSH
23393: LD_VAR 0 5
23397: PUSH
23398: LD_VAR 0 8
23402: PPUSH
23403: CALL_OW 255
23407: NONEQUAL
23408: OR
23409: IFFALSE 23438
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23411: LD_ADDR_EXP 89
23415: PUSH
23416: LD_EXP 89
23420: PPUSH
23421: LD_VAR 0 8
23425: PPUSH
23426: LD_INT 0
23428: PPUSH
23429: CALL_OW 1
23433: ST_TO_ADDR
// exit ;
23434: POP
23435: POP
23436: GO 23969
// end ; x := list [ i ] [ 3 ] ;
23438: LD_ADDR_VAR 0 6
23442: PUSH
23443: LD_VAR 0 3
23447: PUSH
23448: LD_VAR 0 1
23452: ARRAY
23453: PUSH
23454: LD_INT 3
23456: ARRAY
23457: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23458: LD_ADDR_VAR 0 7
23462: PUSH
23463: LD_VAR 0 3
23467: PUSH
23468: LD_VAR 0 1
23472: ARRAY
23473: PUSH
23474: LD_INT 4
23476: ARRAY
23477: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23478: LD_ADDR_VAR 0 9
23482: PUSH
23483: LD_VAR 0 6
23487: PPUSH
23488: LD_VAR 0 7
23492: PPUSH
23493: LD_INT 16
23495: PPUSH
23496: CALL 68056 0 3
23500: ST_TO_ADDR
// if not cratesNearbyPoint then
23501: LD_VAR 0 9
23505: NOT
23506: IFFALSE 23512
// exit ;
23508: POP
23509: POP
23510: GO 23969
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23512: LD_ADDR_VAR 0 4
23516: PUSH
23517: LD_INT 22
23519: PUSH
23520: LD_VAR 0 5
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 3
23531: PUSH
23532: LD_INT 60
23534: PUSH
23535: EMPTY
23536: LIST
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 91
23544: PUSH
23545: LD_VAR 0 8
23549: PUSH
23550: LD_INT 6
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: LIST
23557: PUSH
23558: LD_INT 2
23560: PUSH
23561: LD_INT 25
23563: PUSH
23564: LD_INT 2
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 25
23573: PUSH
23574: LD_INT 16
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: LIST
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: PPUSH
23592: CALL_OW 69
23596: PUSH
23597: LD_VAR 0 8
23601: PPUSH
23602: CALL_OW 313
23606: PPUSH
23607: LD_INT 3
23609: PUSH
23610: LD_INT 60
23612: PUSH
23613: EMPTY
23614: LIST
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: PUSH
23620: LD_INT 2
23622: PUSH
23623: LD_INT 25
23625: PUSH
23626: LD_INT 2
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 25
23635: PUSH
23636: LD_INT 16
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: LIST
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: PPUSH
23652: CALL_OW 72
23656: UNION
23657: ST_TO_ADDR
// if tmp then
23658: LD_VAR 0 4
23662: IFFALSE 23742
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23664: LD_ADDR_VAR 0 4
23668: PUSH
23669: LD_VAR 0 4
23673: PPUSH
23674: LD_INT 3
23676: PPUSH
23677: CALL 66025 0 2
23681: ST_TO_ADDR
// for j in tmp do
23682: LD_ADDR_VAR 0 2
23686: PUSH
23687: LD_VAR 0 4
23691: PUSH
23692: FOR_IN
23693: IFFALSE 23736
// begin if IsInUnit ( j ) then
23695: LD_VAR 0 2
23699: PPUSH
23700: CALL_OW 310
23704: IFFALSE 23715
// ComExit ( j ) ;
23706: LD_VAR 0 2
23710: PPUSH
23711: CALL 66108 0 1
// AddComCollect ( j , x , y ) ;
23715: LD_VAR 0 2
23719: PPUSH
23720: LD_VAR 0 6
23724: PPUSH
23725: LD_VAR 0 7
23729: PPUSH
23730: CALL_OW 177
// end ;
23734: GO 23692
23736: POP
23737: POP
// exit ;
23738: POP
23739: POP
23740: GO 23969
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23742: LD_ADDR_VAR 0 4
23746: PUSH
23747: LD_INT 22
23749: PUSH
23750: LD_VAR 0 5
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 91
23761: PUSH
23762: LD_VAR 0 8
23766: PUSH
23767: LD_INT 8
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: LIST
23774: PUSH
23775: LD_INT 2
23777: PUSH
23778: LD_INT 34
23780: PUSH
23781: LD_INT 12
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 34
23790: PUSH
23791: LD_INT 51
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 34
23800: PUSH
23801: LD_INT 32
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PUSH
23808: LD_INT 34
23810: PUSH
23811: LD_INT 89
23813: PUSH
23814: EMPTY
23815: LIST
23816: LIST
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: LIST
23829: PPUSH
23830: CALL_OW 69
23834: ST_TO_ADDR
// if tmp then
23835: LD_VAR 0 4
23839: IFFALSE 23965
// begin for j in tmp do
23841: LD_ADDR_VAR 0 2
23845: PUSH
23846: LD_VAR 0 4
23850: PUSH
23851: FOR_IN
23852: IFFALSE 23963
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23854: LD_VAR 0 2
23858: PPUSH
23859: CALL_OW 262
23863: PUSH
23864: LD_INT 3
23866: EQUAL
23867: PUSH
23868: LD_VAR 0 2
23872: PPUSH
23873: CALL_OW 261
23877: PUSH
23878: LD_INT 20
23880: GREATER
23881: OR
23882: PUSH
23883: LD_VAR 0 2
23887: PPUSH
23888: CALL_OW 314
23892: NOT
23893: AND
23894: PUSH
23895: LD_VAR 0 2
23899: PPUSH
23900: CALL_OW 263
23904: PUSH
23905: LD_INT 1
23907: NONEQUAL
23908: PUSH
23909: LD_VAR 0 2
23913: PPUSH
23914: CALL_OW 311
23918: OR
23919: AND
23920: IFFALSE 23961
// begin ComCollect ( j , x , y ) ;
23922: LD_VAR 0 2
23926: PPUSH
23927: LD_VAR 0 6
23931: PPUSH
23932: LD_VAR 0 7
23936: PPUSH
23937: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23941: LD_VAR 0 2
23945: PPUSH
23946: LD_VAR 0 8
23950: PPUSH
23951: CALL_OW 172
// exit ;
23955: POP
23956: POP
23957: POP
23958: POP
23959: GO 23969
// end ;
23961: GO 23851
23963: POP
23964: POP
// end ; end ;
23965: GO 23340
23967: POP
23968: POP
// end ; end_of_file
23969: PPOPN 9
23971: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23972: LD_INT 0
23974: PPUSH
23975: PPUSH
23976: PPUSH
23977: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23978: LD_VAR 0 1
23982: PPUSH
23983: CALL_OW 264
23987: PUSH
23988: LD_INT 91
23990: EQUAL
23991: IFFALSE 24063
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23993: LD_INT 68
23995: PPUSH
23996: LD_VAR 0 1
24000: PPUSH
24001: CALL_OW 255
24005: PPUSH
24006: CALL_OW 321
24010: PUSH
24011: LD_INT 2
24013: EQUAL
24014: IFFALSE 24026
// eff := 70 else
24016: LD_ADDR_VAR 0 4
24020: PUSH
24021: LD_INT 70
24023: ST_TO_ADDR
24024: GO 24034
// eff := 30 ;
24026: LD_ADDR_VAR 0 4
24030: PUSH
24031: LD_INT 30
24033: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24034: LD_VAR 0 1
24038: PPUSH
24039: CALL_OW 250
24043: PPUSH
24044: LD_VAR 0 1
24048: PPUSH
24049: CALL_OW 251
24053: PPUSH
24054: LD_VAR 0 4
24058: PPUSH
24059: CALL_OW 495
// end ; end ;
24063: LD_VAR 0 2
24067: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24068: LD_INT 0
24070: PPUSH
// end ;
24071: LD_VAR 0 4
24075: RET
// export function SOS_Command ( cmd ) ; begin
24076: LD_INT 0
24078: PPUSH
// end ;
24079: LD_VAR 0 2
24083: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24084: LD_INT 0
24086: PPUSH
// end ;
24087: LD_VAR 0 6
24091: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24092: LD_INT 0
24094: PPUSH
24095: PPUSH
// if not vehicle or not factory then
24096: LD_VAR 0 1
24100: NOT
24101: PUSH
24102: LD_VAR 0 2
24106: NOT
24107: OR
24108: IFFALSE 24112
// exit ;
24110: GO 24343
// if factoryWaypoints >= factory then
24112: LD_EXP 88
24116: PUSH
24117: LD_VAR 0 2
24121: GREATEREQUAL
24122: IFFALSE 24343
// if factoryWaypoints [ factory ] then
24124: LD_EXP 88
24128: PUSH
24129: LD_VAR 0 2
24133: ARRAY
24134: IFFALSE 24343
// begin if GetControl ( vehicle ) = control_manual then
24136: LD_VAR 0 1
24140: PPUSH
24141: CALL_OW 263
24145: PUSH
24146: LD_INT 1
24148: EQUAL
24149: IFFALSE 24230
// begin driver := IsDrivenBy ( vehicle ) ;
24151: LD_ADDR_VAR 0 4
24155: PUSH
24156: LD_VAR 0 1
24160: PPUSH
24161: CALL_OW 311
24165: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24166: LD_VAR 0 4
24170: PPUSH
24171: LD_EXP 88
24175: PUSH
24176: LD_VAR 0 2
24180: ARRAY
24181: PUSH
24182: LD_INT 3
24184: ARRAY
24185: PPUSH
24186: LD_EXP 88
24190: PUSH
24191: LD_VAR 0 2
24195: ARRAY
24196: PUSH
24197: LD_INT 4
24199: ARRAY
24200: PPUSH
24201: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24205: LD_VAR 0 4
24209: PPUSH
24210: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24214: LD_VAR 0 4
24218: PPUSH
24219: LD_VAR 0 2
24223: PPUSH
24224: CALL_OW 180
// end else
24228: GO 24343
// if GetControl ( vehicle ) = control_remote then
24230: LD_VAR 0 1
24234: PPUSH
24235: CALL_OW 263
24239: PUSH
24240: LD_INT 2
24242: EQUAL
24243: IFFALSE 24304
// begin wait ( 0 0$2 ) ;
24245: LD_INT 70
24247: PPUSH
24248: CALL_OW 67
// if Connect ( vehicle ) then
24252: LD_VAR 0 1
24256: PPUSH
24257: CALL 36367 0 1
24261: IFFALSE 24302
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24263: LD_VAR 0 1
24267: PPUSH
24268: LD_EXP 88
24272: PUSH
24273: LD_VAR 0 2
24277: ARRAY
24278: PUSH
24279: LD_INT 3
24281: ARRAY
24282: PPUSH
24283: LD_EXP 88
24287: PUSH
24288: LD_VAR 0 2
24292: ARRAY
24293: PUSH
24294: LD_INT 4
24296: ARRAY
24297: PPUSH
24298: CALL_OW 171
// end else
24302: GO 24343
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24304: LD_VAR 0 1
24308: PPUSH
24309: LD_EXP 88
24313: PUSH
24314: LD_VAR 0 2
24318: ARRAY
24319: PUSH
24320: LD_INT 3
24322: ARRAY
24323: PPUSH
24324: LD_EXP 88
24328: PUSH
24329: LD_VAR 0 2
24333: ARRAY
24334: PUSH
24335: LD_INT 4
24337: ARRAY
24338: PPUSH
24339: CALL_OW 171
// end ; end ;
24343: LD_VAR 0 3
24347: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24348: LD_INT 0
24350: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24351: LD_VAR 0 1
24355: PUSH
24356: LD_INT 250
24358: EQUAL
24359: PUSH
24360: LD_VAR 0 2
24364: PPUSH
24365: CALL_OW 264
24369: PUSH
24370: LD_INT 81
24372: EQUAL
24373: AND
24374: IFFALSE 24395
// MinerPlaceMine ( unit , x , y ) ;
24376: LD_VAR 0 2
24380: PPUSH
24381: LD_VAR 0 4
24385: PPUSH
24386: LD_VAR 0 5
24390: PPUSH
24391: CALL 26780 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24395: LD_VAR 0 1
24399: PUSH
24400: LD_INT 251
24402: EQUAL
24403: PUSH
24404: LD_VAR 0 2
24408: PPUSH
24409: CALL_OW 264
24413: PUSH
24414: LD_INT 81
24416: EQUAL
24417: AND
24418: IFFALSE 24439
// MinerDetonateMine ( unit , x , y ) ;
24420: LD_VAR 0 2
24424: PPUSH
24425: LD_VAR 0 4
24429: PPUSH
24430: LD_VAR 0 5
24434: PPUSH
24435: CALL 27055 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24439: LD_VAR 0 1
24443: PUSH
24444: LD_INT 252
24446: EQUAL
24447: PUSH
24448: LD_VAR 0 2
24452: PPUSH
24453: CALL_OW 264
24457: PUSH
24458: LD_INT 81
24460: EQUAL
24461: AND
24462: IFFALSE 24483
// MinerCreateMinefield ( unit , x , y ) ;
24464: LD_VAR 0 2
24468: PPUSH
24469: LD_VAR 0 4
24473: PPUSH
24474: LD_VAR 0 5
24478: PPUSH
24479: CALL 27472 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24483: LD_VAR 0 1
24487: PUSH
24488: LD_INT 253
24490: EQUAL
24491: PUSH
24492: LD_VAR 0 2
24496: PPUSH
24497: CALL_OW 257
24501: PUSH
24502: LD_INT 5
24504: EQUAL
24505: AND
24506: IFFALSE 24527
// ComBinocular ( unit , x , y ) ;
24508: LD_VAR 0 2
24512: PPUSH
24513: LD_VAR 0 4
24517: PPUSH
24518: LD_VAR 0 5
24522: PPUSH
24523: CALL 27841 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24527: LD_VAR 0 1
24531: PUSH
24532: LD_INT 254
24534: EQUAL
24535: PUSH
24536: LD_VAR 0 2
24540: PPUSH
24541: CALL_OW 264
24545: PUSH
24546: LD_INT 99
24548: EQUAL
24549: AND
24550: PUSH
24551: LD_VAR 0 3
24555: PPUSH
24556: CALL_OW 263
24560: PUSH
24561: LD_INT 3
24563: EQUAL
24564: AND
24565: IFFALSE 24581
// HackDestroyVehicle ( unit , selectedUnit ) ;
24567: LD_VAR 0 2
24571: PPUSH
24572: LD_VAR 0 3
24576: PPUSH
24577: CALL 26144 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24581: LD_VAR 0 1
24585: PUSH
24586: LD_INT 255
24588: EQUAL
24589: PUSH
24590: LD_VAR 0 2
24594: PPUSH
24595: CALL_OW 264
24599: PUSH
24600: LD_INT 14
24602: PUSH
24603: LD_INT 53
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: IN
24610: AND
24611: PUSH
24612: LD_VAR 0 4
24616: PPUSH
24617: LD_VAR 0 5
24621: PPUSH
24622: CALL_OW 488
24626: AND
24627: IFFALSE 24651
// CutTreeXYR ( unit , x , y , 12 ) ;
24629: LD_VAR 0 2
24633: PPUSH
24634: LD_VAR 0 4
24638: PPUSH
24639: LD_VAR 0 5
24643: PPUSH
24644: LD_INT 12
24646: PPUSH
24647: CALL 24714 0 4
// if cmd = 256 then
24651: LD_VAR 0 1
24655: PUSH
24656: LD_INT 256
24658: EQUAL
24659: IFFALSE 24680
// SetFactoryWaypoint ( unit , x , y ) ;
24661: LD_VAR 0 2
24665: PPUSH
24666: LD_VAR 0 4
24670: PPUSH
24671: LD_VAR 0 5
24675: PPUSH
24676: CALL 22661 0 3
// if cmd = 257 then
24680: LD_VAR 0 1
24684: PUSH
24685: LD_INT 257
24687: EQUAL
24688: IFFALSE 24709
// SetWarehouseGatheringPoint ( unit , x , y ) ;
24690: LD_VAR 0 2
24694: PPUSH
24695: LD_VAR 0 4
24699: PPUSH
24700: LD_VAR 0 5
24704: PPUSH
24705: CALL 23023 0 3
// end ;
24709: LD_VAR 0 6
24713: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24714: LD_INT 0
24716: PPUSH
24717: PPUSH
24718: PPUSH
24719: PPUSH
24720: PPUSH
24721: PPUSH
24722: PPUSH
24723: PPUSH
24724: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
24725: LD_VAR 0 1
24729: NOT
24730: PUSH
24731: LD_VAR 0 2
24735: PPUSH
24736: LD_VAR 0 3
24740: PPUSH
24741: CALL_OW 488
24745: NOT
24746: OR
24747: PUSH
24748: LD_VAR 0 4
24752: NOT
24753: OR
24754: IFFALSE 24758
// exit ;
24756: GO 25098
// list := [ ] ;
24758: LD_ADDR_VAR 0 13
24762: PUSH
24763: EMPTY
24764: ST_TO_ADDR
// if x - r < 0 then
24765: LD_VAR 0 2
24769: PUSH
24770: LD_VAR 0 4
24774: MINUS
24775: PUSH
24776: LD_INT 0
24778: LESS
24779: IFFALSE 24791
// min_x := 0 else
24781: LD_ADDR_VAR 0 7
24785: PUSH
24786: LD_INT 0
24788: ST_TO_ADDR
24789: GO 24807
// min_x := x - r ;
24791: LD_ADDR_VAR 0 7
24795: PUSH
24796: LD_VAR 0 2
24800: PUSH
24801: LD_VAR 0 4
24805: MINUS
24806: ST_TO_ADDR
// if y - r < 0 then
24807: LD_VAR 0 3
24811: PUSH
24812: LD_VAR 0 4
24816: MINUS
24817: PUSH
24818: LD_INT 0
24820: LESS
24821: IFFALSE 24833
// min_y := 0 else
24823: LD_ADDR_VAR 0 8
24827: PUSH
24828: LD_INT 0
24830: ST_TO_ADDR
24831: GO 24849
// min_y := y - r ;
24833: LD_ADDR_VAR 0 8
24837: PUSH
24838: LD_VAR 0 3
24842: PUSH
24843: LD_VAR 0 4
24847: MINUS
24848: ST_TO_ADDR
// max_x := x + r ;
24849: LD_ADDR_VAR 0 9
24853: PUSH
24854: LD_VAR 0 2
24858: PUSH
24859: LD_VAR 0 4
24863: PLUS
24864: ST_TO_ADDR
// max_y := y + r ;
24865: LD_ADDR_VAR 0 10
24869: PUSH
24870: LD_VAR 0 3
24874: PUSH
24875: LD_VAR 0 4
24879: PLUS
24880: ST_TO_ADDR
// for _x = min_x to max_x do
24881: LD_ADDR_VAR 0 11
24885: PUSH
24886: DOUBLE
24887: LD_VAR 0 7
24891: DEC
24892: ST_TO_ADDR
24893: LD_VAR 0 9
24897: PUSH
24898: FOR_TO
24899: IFFALSE 25016
// for _y = min_y to max_y do
24901: LD_ADDR_VAR 0 12
24905: PUSH
24906: DOUBLE
24907: LD_VAR 0 8
24911: DEC
24912: ST_TO_ADDR
24913: LD_VAR 0 10
24917: PUSH
24918: FOR_TO
24919: IFFALSE 25012
// begin if not ValidHex ( _x , _y ) then
24921: LD_VAR 0 11
24925: PPUSH
24926: LD_VAR 0 12
24930: PPUSH
24931: CALL_OW 488
24935: NOT
24936: IFFALSE 24940
// continue ;
24938: GO 24918
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24940: LD_VAR 0 11
24944: PPUSH
24945: LD_VAR 0 12
24949: PPUSH
24950: CALL_OW 351
24954: PUSH
24955: LD_VAR 0 11
24959: PPUSH
24960: LD_VAR 0 12
24964: PPUSH
24965: CALL_OW 554
24969: AND
24970: IFFALSE 25010
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24972: LD_ADDR_VAR 0 13
24976: PUSH
24977: LD_VAR 0 13
24981: PPUSH
24982: LD_VAR 0 13
24986: PUSH
24987: LD_INT 1
24989: PLUS
24990: PPUSH
24991: LD_VAR 0 11
24995: PUSH
24996: LD_VAR 0 12
25000: PUSH
25001: EMPTY
25002: LIST
25003: LIST
25004: PPUSH
25005: CALL_OW 2
25009: ST_TO_ADDR
// end ;
25010: GO 24918
25012: POP
25013: POP
25014: GO 24898
25016: POP
25017: POP
// if not list then
25018: LD_VAR 0 13
25022: NOT
25023: IFFALSE 25027
// exit ;
25025: GO 25098
// for i in list do
25027: LD_ADDR_VAR 0 6
25031: PUSH
25032: LD_VAR 0 13
25036: PUSH
25037: FOR_IN
25038: IFFALSE 25096
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25040: LD_VAR 0 1
25044: PPUSH
25045: LD_STRING M
25047: PUSH
25048: LD_VAR 0 6
25052: PUSH
25053: LD_INT 1
25055: ARRAY
25056: PUSH
25057: LD_VAR 0 6
25061: PUSH
25062: LD_INT 2
25064: ARRAY
25065: PUSH
25066: LD_INT 0
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: LD_INT 0
25074: PUSH
25075: LD_INT 0
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: PUSH
25087: EMPTY
25088: LIST
25089: PPUSH
25090: CALL_OW 447
25094: GO 25037
25096: POP
25097: POP
// end ;
25098: LD_VAR 0 5
25102: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25103: LD_EXP 91
25107: NOT
25108: IFFALSE 25158
25110: GO 25112
25112: DISABLE
// begin initHack := true ;
25113: LD_ADDR_EXP 91
25117: PUSH
25118: LD_INT 1
25120: ST_TO_ADDR
// hackTanks := [ ] ;
25121: LD_ADDR_EXP 92
25125: PUSH
25126: EMPTY
25127: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25128: LD_ADDR_EXP 93
25132: PUSH
25133: EMPTY
25134: ST_TO_ADDR
// hackLimit := 3 ;
25135: LD_ADDR_EXP 94
25139: PUSH
25140: LD_INT 3
25142: ST_TO_ADDR
// hackDist := 12 ;
25143: LD_ADDR_EXP 95
25147: PUSH
25148: LD_INT 12
25150: ST_TO_ADDR
// hackCounter := [ ] ;
25151: LD_ADDR_EXP 96
25155: PUSH
25156: EMPTY
25157: ST_TO_ADDR
// end ;
25158: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25159: LD_EXP 91
25163: PUSH
25164: LD_INT 34
25166: PUSH
25167: LD_INT 99
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PPUSH
25174: CALL_OW 69
25178: AND
25179: IFFALSE 25432
25181: GO 25183
25183: DISABLE
25184: LD_INT 0
25186: PPUSH
25187: PPUSH
// begin enable ;
25188: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25189: LD_ADDR_VAR 0 1
25193: PUSH
25194: LD_INT 34
25196: PUSH
25197: LD_INT 99
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PPUSH
25204: CALL_OW 69
25208: PUSH
25209: FOR_IN
25210: IFFALSE 25430
// begin if not i in hackTanks then
25212: LD_VAR 0 1
25216: PUSH
25217: LD_EXP 92
25221: IN
25222: NOT
25223: IFFALSE 25306
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25225: LD_ADDR_EXP 92
25229: PUSH
25230: LD_EXP 92
25234: PPUSH
25235: LD_EXP 92
25239: PUSH
25240: LD_INT 1
25242: PLUS
25243: PPUSH
25244: LD_VAR 0 1
25248: PPUSH
25249: CALL_OW 1
25253: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25254: LD_ADDR_EXP 93
25258: PUSH
25259: LD_EXP 93
25263: PPUSH
25264: LD_EXP 93
25268: PUSH
25269: LD_INT 1
25271: PLUS
25272: PPUSH
25273: EMPTY
25274: PPUSH
25275: CALL_OW 1
25279: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25280: LD_ADDR_EXP 96
25284: PUSH
25285: LD_EXP 96
25289: PPUSH
25290: LD_EXP 96
25294: PUSH
25295: LD_INT 1
25297: PLUS
25298: PPUSH
25299: EMPTY
25300: PPUSH
25301: CALL_OW 1
25305: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25306: LD_VAR 0 1
25310: PPUSH
25311: CALL_OW 302
25315: NOT
25316: IFFALSE 25329
// begin HackUnlinkAll ( i ) ;
25318: LD_VAR 0 1
25322: PPUSH
25323: CALL 25435 0 1
// continue ;
25327: GO 25209
// end ; HackCheckCapturedStatus ( i ) ;
25329: LD_VAR 0 1
25333: PPUSH
25334: CALL 25878 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25338: LD_ADDR_VAR 0 2
25342: PUSH
25343: LD_INT 81
25345: PUSH
25346: LD_VAR 0 1
25350: PPUSH
25351: CALL_OW 255
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 33
25362: PUSH
25363: LD_INT 3
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 91
25372: PUSH
25373: LD_VAR 0 1
25377: PUSH
25378: LD_EXP 95
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: LIST
25387: PUSH
25388: LD_INT 50
25390: PUSH
25391: EMPTY
25392: LIST
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: LIST
25398: LIST
25399: PPUSH
25400: CALL_OW 69
25404: ST_TO_ADDR
// if not tmp then
25405: LD_VAR 0 2
25409: NOT
25410: IFFALSE 25414
// continue ;
25412: GO 25209
// HackLink ( i , tmp ) ;
25414: LD_VAR 0 1
25418: PPUSH
25419: LD_VAR 0 2
25423: PPUSH
25424: CALL 25571 0 2
// end ;
25428: GO 25209
25430: POP
25431: POP
// end ;
25432: PPOPN 2
25434: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25435: LD_INT 0
25437: PPUSH
25438: PPUSH
25439: PPUSH
// if not hack in hackTanks then
25440: LD_VAR 0 1
25444: PUSH
25445: LD_EXP 92
25449: IN
25450: NOT
25451: IFFALSE 25455
// exit ;
25453: GO 25566
// index := GetElementIndex ( hackTanks , hack ) ;
25455: LD_ADDR_VAR 0 4
25459: PUSH
25460: LD_EXP 92
25464: PPUSH
25465: LD_VAR 0 1
25469: PPUSH
25470: CALL 33183 0 2
25474: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25475: LD_EXP 93
25479: PUSH
25480: LD_VAR 0 4
25484: ARRAY
25485: IFFALSE 25566
// begin for i in hackTanksCaptured [ index ] do
25487: LD_ADDR_VAR 0 3
25491: PUSH
25492: LD_EXP 93
25496: PUSH
25497: LD_VAR 0 4
25501: ARRAY
25502: PUSH
25503: FOR_IN
25504: IFFALSE 25530
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25506: LD_VAR 0 3
25510: PUSH
25511: LD_INT 1
25513: ARRAY
25514: PPUSH
25515: LD_VAR 0 3
25519: PUSH
25520: LD_INT 2
25522: ARRAY
25523: PPUSH
25524: CALL_OW 235
25528: GO 25503
25530: POP
25531: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25532: LD_ADDR_EXP 93
25536: PUSH
25537: LD_EXP 93
25541: PPUSH
25542: LD_VAR 0 4
25546: PPUSH
25547: EMPTY
25548: PPUSH
25549: CALL_OW 1
25553: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25554: LD_VAR 0 1
25558: PPUSH
25559: LD_INT 0
25561: PPUSH
25562: CALL_OW 505
// end ; end ;
25566: LD_VAR 0 2
25570: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25571: LD_INT 0
25573: PPUSH
25574: PPUSH
25575: PPUSH
// if not hack in hackTanks or not vehicles then
25576: LD_VAR 0 1
25580: PUSH
25581: LD_EXP 92
25585: IN
25586: NOT
25587: PUSH
25588: LD_VAR 0 2
25592: NOT
25593: OR
25594: IFFALSE 25598
// exit ;
25596: GO 25873
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25598: LD_ADDR_VAR 0 2
25602: PUSH
25603: LD_VAR 0 1
25607: PPUSH
25608: LD_VAR 0 2
25612: PPUSH
25613: LD_INT 1
25615: PPUSH
25616: LD_INT 1
25618: PPUSH
25619: CALL 33833 0 4
25623: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25624: LD_ADDR_VAR 0 5
25628: PUSH
25629: LD_EXP 92
25633: PPUSH
25634: LD_VAR 0 1
25638: PPUSH
25639: CALL 33183 0 2
25643: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25644: LD_EXP 93
25648: PUSH
25649: LD_VAR 0 5
25653: ARRAY
25654: PUSH
25655: LD_EXP 94
25659: LESS
25660: IFFALSE 25849
// begin for i := 1 to vehicles do
25662: LD_ADDR_VAR 0 4
25666: PUSH
25667: DOUBLE
25668: LD_INT 1
25670: DEC
25671: ST_TO_ADDR
25672: LD_VAR 0 2
25676: PUSH
25677: FOR_TO
25678: IFFALSE 25847
// begin if hackTanksCaptured [ index ] = hackLimit then
25680: LD_EXP 93
25684: PUSH
25685: LD_VAR 0 5
25689: ARRAY
25690: PUSH
25691: LD_EXP 94
25695: EQUAL
25696: IFFALSE 25700
// break ;
25698: GO 25847
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25700: LD_ADDR_EXP 96
25704: PUSH
25705: LD_EXP 96
25709: PPUSH
25710: LD_VAR 0 5
25714: PPUSH
25715: LD_EXP 96
25719: PUSH
25720: LD_VAR 0 5
25724: ARRAY
25725: PUSH
25726: LD_INT 1
25728: PLUS
25729: PPUSH
25730: CALL_OW 1
25734: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25735: LD_ADDR_EXP 93
25739: PUSH
25740: LD_EXP 93
25744: PPUSH
25745: LD_VAR 0 5
25749: PUSH
25750: LD_EXP 93
25754: PUSH
25755: LD_VAR 0 5
25759: ARRAY
25760: PUSH
25761: LD_INT 1
25763: PLUS
25764: PUSH
25765: EMPTY
25766: LIST
25767: LIST
25768: PPUSH
25769: LD_VAR 0 2
25773: PUSH
25774: LD_VAR 0 4
25778: ARRAY
25779: PUSH
25780: LD_VAR 0 2
25784: PUSH
25785: LD_VAR 0 4
25789: ARRAY
25790: PPUSH
25791: CALL_OW 255
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PPUSH
25800: CALL 33398 0 3
25804: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25805: LD_VAR 0 2
25809: PUSH
25810: LD_VAR 0 4
25814: ARRAY
25815: PPUSH
25816: LD_VAR 0 1
25820: PPUSH
25821: CALL_OW 255
25825: PPUSH
25826: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25830: LD_VAR 0 2
25834: PUSH
25835: LD_VAR 0 4
25839: ARRAY
25840: PPUSH
25841: CALL_OW 141
// end ;
25845: GO 25677
25847: POP
25848: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25849: LD_VAR 0 1
25853: PPUSH
25854: LD_EXP 93
25858: PUSH
25859: LD_VAR 0 5
25863: ARRAY
25864: PUSH
25865: LD_INT 0
25867: PLUS
25868: PPUSH
25869: CALL_OW 505
// end ;
25873: LD_VAR 0 3
25877: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25878: LD_INT 0
25880: PPUSH
25881: PPUSH
25882: PPUSH
25883: PPUSH
// if not hack in hackTanks then
25884: LD_VAR 0 1
25888: PUSH
25889: LD_EXP 92
25893: IN
25894: NOT
25895: IFFALSE 25899
// exit ;
25897: GO 26139
// index := GetElementIndex ( hackTanks , hack ) ;
25899: LD_ADDR_VAR 0 4
25903: PUSH
25904: LD_EXP 92
25908: PPUSH
25909: LD_VAR 0 1
25913: PPUSH
25914: CALL 33183 0 2
25918: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25919: LD_ADDR_VAR 0 3
25923: PUSH
25924: DOUBLE
25925: LD_EXP 93
25929: PUSH
25930: LD_VAR 0 4
25934: ARRAY
25935: INC
25936: ST_TO_ADDR
25937: LD_INT 1
25939: PUSH
25940: FOR_DOWNTO
25941: IFFALSE 26113
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25943: LD_ADDR_VAR 0 5
25947: PUSH
25948: LD_EXP 93
25952: PUSH
25953: LD_VAR 0 4
25957: ARRAY
25958: PUSH
25959: LD_VAR 0 3
25963: ARRAY
25964: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25965: LD_VAR 0 5
25969: PUSH
25970: LD_INT 1
25972: ARRAY
25973: PPUSH
25974: CALL_OW 302
25978: NOT
25979: PUSH
25980: LD_VAR 0 5
25984: PUSH
25985: LD_INT 1
25987: ARRAY
25988: PPUSH
25989: CALL_OW 255
25993: PUSH
25994: LD_VAR 0 1
25998: PPUSH
25999: CALL_OW 255
26003: NONEQUAL
26004: OR
26005: IFFALSE 26111
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26007: LD_VAR 0 5
26011: PUSH
26012: LD_INT 1
26014: ARRAY
26015: PPUSH
26016: CALL_OW 305
26020: PUSH
26021: LD_VAR 0 5
26025: PUSH
26026: LD_INT 1
26028: ARRAY
26029: PPUSH
26030: CALL_OW 255
26034: PUSH
26035: LD_VAR 0 1
26039: PPUSH
26040: CALL_OW 255
26044: EQUAL
26045: AND
26046: IFFALSE 26070
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26048: LD_VAR 0 5
26052: PUSH
26053: LD_INT 1
26055: ARRAY
26056: PPUSH
26057: LD_VAR 0 5
26061: PUSH
26062: LD_INT 2
26064: ARRAY
26065: PPUSH
26066: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26070: LD_ADDR_EXP 93
26074: PUSH
26075: LD_EXP 93
26079: PPUSH
26080: LD_VAR 0 4
26084: PPUSH
26085: LD_EXP 93
26089: PUSH
26090: LD_VAR 0 4
26094: ARRAY
26095: PPUSH
26096: LD_VAR 0 3
26100: PPUSH
26101: CALL_OW 3
26105: PPUSH
26106: CALL_OW 1
26110: ST_TO_ADDR
// end ; end ;
26111: GO 25940
26113: POP
26114: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26115: LD_VAR 0 1
26119: PPUSH
26120: LD_EXP 93
26124: PUSH
26125: LD_VAR 0 4
26129: ARRAY
26130: PUSH
26131: LD_INT 0
26133: PLUS
26134: PPUSH
26135: CALL_OW 505
// end ;
26139: LD_VAR 0 2
26143: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26144: LD_INT 0
26146: PPUSH
26147: PPUSH
26148: PPUSH
26149: PPUSH
// if not hack in hackTanks then
26150: LD_VAR 0 1
26154: PUSH
26155: LD_EXP 92
26159: IN
26160: NOT
26161: IFFALSE 26165
// exit ;
26163: GO 26250
// index := GetElementIndex ( hackTanks , hack ) ;
26165: LD_ADDR_VAR 0 5
26169: PUSH
26170: LD_EXP 92
26174: PPUSH
26175: LD_VAR 0 1
26179: PPUSH
26180: CALL 33183 0 2
26184: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26185: LD_ADDR_VAR 0 4
26189: PUSH
26190: DOUBLE
26191: LD_INT 1
26193: DEC
26194: ST_TO_ADDR
26195: LD_EXP 93
26199: PUSH
26200: LD_VAR 0 5
26204: ARRAY
26205: PUSH
26206: FOR_TO
26207: IFFALSE 26248
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26209: LD_EXP 93
26213: PUSH
26214: LD_VAR 0 5
26218: ARRAY
26219: PUSH
26220: LD_VAR 0 4
26224: ARRAY
26225: PUSH
26226: LD_INT 1
26228: ARRAY
26229: PUSH
26230: LD_VAR 0 2
26234: EQUAL
26235: IFFALSE 26246
// KillUnit ( vehicle ) ;
26237: LD_VAR 0 2
26241: PPUSH
26242: CALL_OW 66
26246: GO 26206
26248: POP
26249: POP
// end ;
26250: LD_VAR 0 3
26254: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26255: LD_EXP 97
26259: NOT
26260: IFFALSE 26295
26262: GO 26264
26264: DISABLE
// begin initMiner := true ;
26265: LD_ADDR_EXP 97
26269: PUSH
26270: LD_INT 1
26272: ST_TO_ADDR
// minersList := [ ] ;
26273: LD_ADDR_EXP 98
26277: PUSH
26278: EMPTY
26279: ST_TO_ADDR
// minerMinesList := [ ] ;
26280: LD_ADDR_EXP 99
26284: PUSH
26285: EMPTY
26286: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26287: LD_ADDR_EXP 100
26291: PUSH
26292: LD_INT 5
26294: ST_TO_ADDR
// end ;
26295: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26296: LD_EXP 97
26300: PUSH
26301: LD_INT 34
26303: PUSH
26304: LD_INT 81
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PPUSH
26311: CALL_OW 69
26315: AND
26316: IFFALSE 26777
26318: GO 26320
26320: DISABLE
26321: LD_INT 0
26323: PPUSH
26324: PPUSH
26325: PPUSH
26326: PPUSH
// begin enable ;
26327: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26328: LD_ADDR_VAR 0 1
26332: PUSH
26333: LD_INT 34
26335: PUSH
26336: LD_INT 81
26338: PUSH
26339: EMPTY
26340: LIST
26341: LIST
26342: PPUSH
26343: CALL_OW 69
26347: PUSH
26348: FOR_IN
26349: IFFALSE 26421
// begin if not i in minersList then
26351: LD_VAR 0 1
26355: PUSH
26356: LD_EXP 98
26360: IN
26361: NOT
26362: IFFALSE 26419
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26364: LD_ADDR_EXP 98
26368: PUSH
26369: LD_EXP 98
26373: PPUSH
26374: LD_EXP 98
26378: PUSH
26379: LD_INT 1
26381: PLUS
26382: PPUSH
26383: LD_VAR 0 1
26387: PPUSH
26388: CALL_OW 1
26392: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26393: LD_ADDR_EXP 99
26397: PUSH
26398: LD_EXP 99
26402: PPUSH
26403: LD_EXP 99
26407: PUSH
26408: LD_INT 1
26410: PLUS
26411: PPUSH
26412: EMPTY
26413: PPUSH
26414: CALL_OW 1
26418: ST_TO_ADDR
// end end ;
26419: GO 26348
26421: POP
26422: POP
// for i := minerMinesList downto 1 do
26423: LD_ADDR_VAR 0 1
26427: PUSH
26428: DOUBLE
26429: LD_EXP 99
26433: INC
26434: ST_TO_ADDR
26435: LD_INT 1
26437: PUSH
26438: FOR_DOWNTO
26439: IFFALSE 26775
// begin if IsLive ( minersList [ i ] ) then
26441: LD_EXP 98
26445: PUSH
26446: LD_VAR 0 1
26450: ARRAY
26451: PPUSH
26452: CALL_OW 300
26456: IFFALSE 26484
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26458: LD_EXP 98
26462: PUSH
26463: LD_VAR 0 1
26467: ARRAY
26468: PPUSH
26469: LD_EXP 99
26473: PUSH
26474: LD_VAR 0 1
26478: ARRAY
26479: PPUSH
26480: CALL_OW 505
// if not minerMinesList [ i ] then
26484: LD_EXP 99
26488: PUSH
26489: LD_VAR 0 1
26493: ARRAY
26494: NOT
26495: IFFALSE 26499
// continue ;
26497: GO 26438
// for j := minerMinesList [ i ] downto 1 do
26499: LD_ADDR_VAR 0 2
26503: PUSH
26504: DOUBLE
26505: LD_EXP 99
26509: PUSH
26510: LD_VAR 0 1
26514: ARRAY
26515: INC
26516: ST_TO_ADDR
26517: LD_INT 1
26519: PUSH
26520: FOR_DOWNTO
26521: IFFALSE 26771
// begin side := GetSide ( minersList [ i ] ) ;
26523: LD_ADDR_VAR 0 3
26527: PUSH
26528: LD_EXP 98
26532: PUSH
26533: LD_VAR 0 1
26537: ARRAY
26538: PPUSH
26539: CALL_OW 255
26543: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26544: LD_ADDR_VAR 0 4
26548: PUSH
26549: LD_EXP 99
26553: PUSH
26554: LD_VAR 0 1
26558: ARRAY
26559: PUSH
26560: LD_VAR 0 2
26564: ARRAY
26565: PUSH
26566: LD_INT 1
26568: ARRAY
26569: PPUSH
26570: LD_EXP 99
26574: PUSH
26575: LD_VAR 0 1
26579: ARRAY
26580: PUSH
26581: LD_VAR 0 2
26585: ARRAY
26586: PUSH
26587: LD_INT 2
26589: ARRAY
26590: PPUSH
26591: CALL_OW 428
26595: ST_TO_ADDR
// if not tmp then
26596: LD_VAR 0 4
26600: NOT
26601: IFFALSE 26605
// continue ;
26603: GO 26520
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26605: LD_VAR 0 4
26609: PUSH
26610: LD_INT 81
26612: PUSH
26613: LD_VAR 0 3
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PPUSH
26622: CALL_OW 69
26626: IN
26627: PUSH
26628: LD_EXP 99
26632: PUSH
26633: LD_VAR 0 1
26637: ARRAY
26638: PUSH
26639: LD_VAR 0 2
26643: ARRAY
26644: PUSH
26645: LD_INT 1
26647: ARRAY
26648: PPUSH
26649: LD_EXP 99
26653: PUSH
26654: LD_VAR 0 1
26658: ARRAY
26659: PUSH
26660: LD_VAR 0 2
26664: ARRAY
26665: PUSH
26666: LD_INT 2
26668: ARRAY
26669: PPUSH
26670: CALL_OW 458
26674: AND
26675: IFFALSE 26769
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26677: LD_EXP 99
26681: PUSH
26682: LD_VAR 0 1
26686: ARRAY
26687: PUSH
26688: LD_VAR 0 2
26692: ARRAY
26693: PUSH
26694: LD_INT 1
26696: ARRAY
26697: PPUSH
26698: LD_EXP 99
26702: PUSH
26703: LD_VAR 0 1
26707: ARRAY
26708: PUSH
26709: LD_VAR 0 2
26713: ARRAY
26714: PUSH
26715: LD_INT 2
26717: ARRAY
26718: PPUSH
26719: LD_VAR 0 3
26723: PPUSH
26724: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26728: LD_ADDR_EXP 99
26732: PUSH
26733: LD_EXP 99
26737: PPUSH
26738: LD_VAR 0 1
26742: PPUSH
26743: LD_EXP 99
26747: PUSH
26748: LD_VAR 0 1
26752: ARRAY
26753: PPUSH
26754: LD_VAR 0 2
26758: PPUSH
26759: CALL_OW 3
26763: PPUSH
26764: CALL_OW 1
26768: ST_TO_ADDR
// end ; end ;
26769: GO 26520
26771: POP
26772: POP
// end ;
26773: GO 26438
26775: POP
26776: POP
// end ;
26777: PPOPN 4
26779: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26780: LD_INT 0
26782: PPUSH
26783: PPUSH
// result := false ;
26784: LD_ADDR_VAR 0 4
26788: PUSH
26789: LD_INT 0
26791: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26792: LD_VAR 0 1
26796: PPUSH
26797: CALL_OW 264
26801: PUSH
26802: LD_INT 81
26804: EQUAL
26805: NOT
26806: IFFALSE 26810
// exit ;
26808: GO 27050
// index := GetElementIndex ( minersList , unit ) ;
26810: LD_ADDR_VAR 0 5
26814: PUSH
26815: LD_EXP 98
26819: PPUSH
26820: LD_VAR 0 1
26824: PPUSH
26825: CALL 33183 0 2
26829: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26830: LD_EXP 99
26834: PUSH
26835: LD_VAR 0 5
26839: ARRAY
26840: PUSH
26841: LD_EXP 100
26845: GREATEREQUAL
26846: IFFALSE 26850
// exit ;
26848: GO 27050
// ComMoveXY ( unit , x , y ) ;
26850: LD_VAR 0 1
26854: PPUSH
26855: LD_VAR 0 2
26859: PPUSH
26860: LD_VAR 0 3
26864: PPUSH
26865: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26869: LD_INT 35
26871: PPUSH
26872: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26876: LD_VAR 0 1
26880: PPUSH
26881: LD_VAR 0 2
26885: PPUSH
26886: LD_VAR 0 3
26890: PPUSH
26891: CALL 64519 0 3
26895: NOT
26896: PUSH
26897: LD_VAR 0 1
26901: PPUSH
26902: CALL_OW 314
26906: AND
26907: IFFALSE 26911
// exit ;
26909: GO 27050
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26911: LD_VAR 0 2
26915: PPUSH
26916: LD_VAR 0 3
26920: PPUSH
26921: CALL_OW 428
26925: PUSH
26926: LD_VAR 0 1
26930: EQUAL
26931: PUSH
26932: LD_VAR 0 1
26936: PPUSH
26937: CALL_OW 314
26941: NOT
26942: AND
26943: IFFALSE 26869
// PlaySoundXY ( x , y , PlantMine ) ;
26945: LD_VAR 0 2
26949: PPUSH
26950: LD_VAR 0 3
26954: PPUSH
26955: LD_STRING PlantMine
26957: PPUSH
26958: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26962: LD_VAR 0 2
26966: PPUSH
26967: LD_VAR 0 3
26971: PPUSH
26972: LD_VAR 0 1
26976: PPUSH
26977: CALL_OW 255
26981: PPUSH
26982: LD_INT 0
26984: PPUSH
26985: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26989: LD_ADDR_EXP 99
26993: PUSH
26994: LD_EXP 99
26998: PPUSH
26999: LD_VAR 0 5
27003: PUSH
27004: LD_EXP 99
27008: PUSH
27009: LD_VAR 0 5
27013: ARRAY
27014: PUSH
27015: LD_INT 1
27017: PLUS
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PPUSH
27023: LD_VAR 0 2
27027: PUSH
27028: LD_VAR 0 3
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PPUSH
27037: CALL 33398 0 3
27041: ST_TO_ADDR
// result := true ;
27042: LD_ADDR_VAR 0 4
27046: PUSH
27047: LD_INT 1
27049: ST_TO_ADDR
// end ;
27050: LD_VAR 0 4
27054: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27055: LD_INT 0
27057: PPUSH
27058: PPUSH
27059: PPUSH
// if not unit in minersList then
27060: LD_VAR 0 1
27064: PUSH
27065: LD_EXP 98
27069: IN
27070: NOT
27071: IFFALSE 27075
// exit ;
27073: GO 27467
// index := GetElementIndex ( minersList , unit ) ;
27075: LD_ADDR_VAR 0 6
27079: PUSH
27080: LD_EXP 98
27084: PPUSH
27085: LD_VAR 0 1
27089: PPUSH
27090: CALL 33183 0 2
27094: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27095: LD_ADDR_VAR 0 5
27099: PUSH
27100: DOUBLE
27101: LD_EXP 99
27105: PUSH
27106: LD_VAR 0 6
27110: ARRAY
27111: INC
27112: ST_TO_ADDR
27113: LD_INT 1
27115: PUSH
27116: FOR_DOWNTO
27117: IFFALSE 27278
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27119: LD_EXP 99
27123: PUSH
27124: LD_VAR 0 6
27128: ARRAY
27129: PUSH
27130: LD_VAR 0 5
27134: ARRAY
27135: PUSH
27136: LD_INT 1
27138: ARRAY
27139: PUSH
27140: LD_VAR 0 2
27144: EQUAL
27145: PUSH
27146: LD_EXP 99
27150: PUSH
27151: LD_VAR 0 6
27155: ARRAY
27156: PUSH
27157: LD_VAR 0 5
27161: ARRAY
27162: PUSH
27163: LD_INT 2
27165: ARRAY
27166: PUSH
27167: LD_VAR 0 3
27171: EQUAL
27172: AND
27173: IFFALSE 27276
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27175: LD_EXP 99
27179: PUSH
27180: LD_VAR 0 6
27184: ARRAY
27185: PUSH
27186: LD_VAR 0 5
27190: ARRAY
27191: PUSH
27192: LD_INT 1
27194: ARRAY
27195: PPUSH
27196: LD_EXP 99
27200: PUSH
27201: LD_VAR 0 6
27205: ARRAY
27206: PUSH
27207: LD_VAR 0 5
27211: ARRAY
27212: PUSH
27213: LD_INT 2
27215: ARRAY
27216: PPUSH
27217: LD_VAR 0 1
27221: PPUSH
27222: CALL_OW 255
27226: PPUSH
27227: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27231: LD_ADDR_EXP 99
27235: PUSH
27236: LD_EXP 99
27240: PPUSH
27241: LD_VAR 0 6
27245: PPUSH
27246: LD_EXP 99
27250: PUSH
27251: LD_VAR 0 6
27255: ARRAY
27256: PPUSH
27257: LD_VAR 0 5
27261: PPUSH
27262: CALL_OW 3
27266: PPUSH
27267: CALL_OW 1
27271: ST_TO_ADDR
// exit ;
27272: POP
27273: POP
27274: GO 27467
// end ; end ;
27276: GO 27116
27278: POP
27279: POP
// for i := minerMinesList [ index ] downto 1 do
27280: LD_ADDR_VAR 0 5
27284: PUSH
27285: DOUBLE
27286: LD_EXP 99
27290: PUSH
27291: LD_VAR 0 6
27295: ARRAY
27296: INC
27297: ST_TO_ADDR
27298: LD_INT 1
27300: PUSH
27301: FOR_DOWNTO
27302: IFFALSE 27465
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27304: LD_EXP 99
27308: PUSH
27309: LD_VAR 0 6
27313: ARRAY
27314: PUSH
27315: LD_VAR 0 5
27319: ARRAY
27320: PUSH
27321: LD_INT 1
27323: ARRAY
27324: PPUSH
27325: LD_EXP 99
27329: PUSH
27330: LD_VAR 0 6
27334: ARRAY
27335: PUSH
27336: LD_VAR 0 5
27340: ARRAY
27341: PUSH
27342: LD_INT 2
27344: ARRAY
27345: PPUSH
27346: LD_VAR 0 2
27350: PPUSH
27351: LD_VAR 0 3
27355: PPUSH
27356: CALL_OW 298
27360: PUSH
27361: LD_INT 6
27363: LESS
27364: IFFALSE 27463
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27366: LD_EXP 99
27370: PUSH
27371: LD_VAR 0 6
27375: ARRAY
27376: PUSH
27377: LD_VAR 0 5
27381: ARRAY
27382: PUSH
27383: LD_INT 1
27385: ARRAY
27386: PPUSH
27387: LD_EXP 99
27391: PUSH
27392: LD_VAR 0 6
27396: ARRAY
27397: PUSH
27398: LD_VAR 0 5
27402: ARRAY
27403: PUSH
27404: LD_INT 2
27406: ARRAY
27407: PPUSH
27408: LD_VAR 0 1
27412: PPUSH
27413: CALL_OW 255
27417: PPUSH
27418: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27422: LD_ADDR_EXP 99
27426: PUSH
27427: LD_EXP 99
27431: PPUSH
27432: LD_VAR 0 6
27436: PPUSH
27437: LD_EXP 99
27441: PUSH
27442: LD_VAR 0 6
27446: ARRAY
27447: PPUSH
27448: LD_VAR 0 5
27452: PPUSH
27453: CALL_OW 3
27457: PPUSH
27458: CALL_OW 1
27462: ST_TO_ADDR
// end ; end ;
27463: GO 27301
27465: POP
27466: POP
// end ;
27467: LD_VAR 0 4
27471: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27472: LD_INT 0
27474: PPUSH
27475: PPUSH
27476: PPUSH
27477: PPUSH
27478: PPUSH
27479: PPUSH
27480: PPUSH
27481: PPUSH
27482: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27483: LD_VAR 0 1
27487: PPUSH
27488: CALL_OW 264
27492: PUSH
27493: LD_INT 81
27495: EQUAL
27496: NOT
27497: PUSH
27498: LD_VAR 0 1
27502: PUSH
27503: LD_EXP 98
27507: IN
27508: NOT
27509: OR
27510: IFFALSE 27514
// exit ;
27512: GO 27836
// index := GetElementIndex ( minersList , unit ) ;
27514: LD_ADDR_VAR 0 6
27518: PUSH
27519: LD_EXP 98
27523: PPUSH
27524: LD_VAR 0 1
27528: PPUSH
27529: CALL 33183 0 2
27533: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27534: LD_ADDR_VAR 0 8
27538: PUSH
27539: LD_EXP 100
27543: PUSH
27544: LD_EXP 99
27548: PUSH
27549: LD_VAR 0 6
27553: ARRAY
27554: MINUS
27555: ST_TO_ADDR
// if not minesFreeAmount then
27556: LD_VAR 0 8
27560: NOT
27561: IFFALSE 27565
// exit ;
27563: GO 27836
// tmp := [ ] ;
27565: LD_ADDR_VAR 0 7
27569: PUSH
27570: EMPTY
27571: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27572: LD_ADDR_VAR 0 5
27576: PUSH
27577: DOUBLE
27578: LD_INT 1
27580: DEC
27581: ST_TO_ADDR
27582: LD_VAR 0 8
27586: PUSH
27587: FOR_TO
27588: IFFALSE 27783
// begin _d := rand ( 0 , 5 ) ;
27590: LD_ADDR_VAR 0 11
27594: PUSH
27595: LD_INT 0
27597: PPUSH
27598: LD_INT 5
27600: PPUSH
27601: CALL_OW 12
27605: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27606: LD_ADDR_VAR 0 12
27610: PUSH
27611: LD_INT 2
27613: PPUSH
27614: LD_INT 6
27616: PPUSH
27617: CALL_OW 12
27621: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27622: LD_ADDR_VAR 0 9
27626: PUSH
27627: LD_VAR 0 2
27631: PPUSH
27632: LD_VAR 0 11
27636: PPUSH
27637: LD_VAR 0 12
27641: PPUSH
27642: CALL_OW 272
27646: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27647: LD_ADDR_VAR 0 10
27651: PUSH
27652: LD_VAR 0 3
27656: PPUSH
27657: LD_VAR 0 11
27661: PPUSH
27662: LD_VAR 0 12
27666: PPUSH
27667: CALL_OW 273
27671: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27672: LD_VAR 0 9
27676: PPUSH
27677: LD_VAR 0 10
27681: PPUSH
27682: CALL_OW 488
27686: PUSH
27687: LD_VAR 0 9
27691: PUSH
27692: LD_VAR 0 10
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_VAR 0 7
27705: IN
27706: NOT
27707: AND
27708: PUSH
27709: LD_VAR 0 9
27713: PPUSH
27714: LD_VAR 0 10
27718: PPUSH
27719: CALL_OW 458
27723: NOT
27724: AND
27725: IFFALSE 27767
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27727: LD_ADDR_VAR 0 7
27731: PUSH
27732: LD_VAR 0 7
27736: PPUSH
27737: LD_VAR 0 7
27741: PUSH
27742: LD_INT 1
27744: PLUS
27745: PPUSH
27746: LD_VAR 0 9
27750: PUSH
27751: LD_VAR 0 10
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PPUSH
27760: CALL_OW 1
27764: ST_TO_ADDR
27765: GO 27781
// i := i - 1 ;
27767: LD_ADDR_VAR 0 5
27771: PUSH
27772: LD_VAR 0 5
27776: PUSH
27777: LD_INT 1
27779: MINUS
27780: ST_TO_ADDR
// end ;
27781: GO 27587
27783: POP
27784: POP
// for i in tmp do
27785: LD_ADDR_VAR 0 5
27789: PUSH
27790: LD_VAR 0 7
27794: PUSH
27795: FOR_IN
27796: IFFALSE 27834
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27798: LD_VAR 0 1
27802: PPUSH
27803: LD_VAR 0 5
27807: PUSH
27808: LD_INT 1
27810: ARRAY
27811: PPUSH
27812: LD_VAR 0 5
27816: PUSH
27817: LD_INT 2
27819: ARRAY
27820: PPUSH
27821: CALL 26780 0 3
27825: NOT
27826: IFFALSE 27832
// exit ;
27828: POP
27829: POP
27830: GO 27836
27832: GO 27795
27834: POP
27835: POP
// end ;
27836: LD_VAR 0 4
27840: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27841: LD_INT 0
27843: PPUSH
27844: PPUSH
27845: PPUSH
27846: PPUSH
27847: PPUSH
27848: PPUSH
27849: PPUSH
// if not GetClass ( unit ) = class_sniper then
27850: LD_VAR 0 1
27854: PPUSH
27855: CALL_OW 257
27859: PUSH
27860: LD_INT 5
27862: EQUAL
27863: NOT
27864: IFFALSE 27868
// exit ;
27866: GO 28256
// dist := 8 ;
27868: LD_ADDR_VAR 0 5
27872: PUSH
27873: LD_INT 8
27875: ST_TO_ADDR
// viewRange := 12 ;
27876: LD_ADDR_VAR 0 7
27880: PUSH
27881: LD_INT 12
27883: ST_TO_ADDR
// side := GetSide ( unit ) ;
27884: LD_ADDR_VAR 0 6
27888: PUSH
27889: LD_VAR 0 1
27893: PPUSH
27894: CALL_OW 255
27898: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27899: LD_INT 61
27901: PPUSH
27902: LD_VAR 0 6
27906: PPUSH
27907: CALL_OW 321
27911: PUSH
27912: LD_INT 2
27914: EQUAL
27915: IFFALSE 27925
// viewRange := 16 ;
27917: LD_ADDR_VAR 0 7
27921: PUSH
27922: LD_INT 16
27924: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27925: LD_VAR 0 1
27929: PPUSH
27930: LD_VAR 0 2
27934: PPUSH
27935: LD_VAR 0 3
27939: PPUSH
27940: CALL_OW 297
27944: PUSH
27945: LD_VAR 0 5
27949: GREATER
27950: IFFALSE 28029
// begin ComMoveXY ( unit , x , y ) ;
27952: LD_VAR 0 1
27956: PPUSH
27957: LD_VAR 0 2
27961: PPUSH
27962: LD_VAR 0 3
27966: PPUSH
27967: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27971: LD_INT 35
27973: PPUSH
27974: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27978: LD_VAR 0 1
27982: PPUSH
27983: LD_VAR 0 2
27987: PPUSH
27988: LD_VAR 0 3
27992: PPUSH
27993: CALL 64519 0 3
27997: NOT
27998: IFFALSE 28002
// exit ;
28000: GO 28256
// until GetDistUnitXY ( unit , x , y ) < dist ;
28002: LD_VAR 0 1
28006: PPUSH
28007: LD_VAR 0 2
28011: PPUSH
28012: LD_VAR 0 3
28016: PPUSH
28017: CALL_OW 297
28021: PUSH
28022: LD_VAR 0 5
28026: LESS
28027: IFFALSE 27971
// end ; ComTurnXY ( unit , x , y ) ;
28029: LD_VAR 0 1
28033: PPUSH
28034: LD_VAR 0 2
28038: PPUSH
28039: LD_VAR 0 3
28043: PPUSH
28044: CALL_OW 118
// wait ( 5 ) ;
28048: LD_INT 5
28050: PPUSH
28051: CALL_OW 67
// _d := GetDir ( unit ) ;
28055: LD_ADDR_VAR 0 10
28059: PUSH
28060: LD_VAR 0 1
28064: PPUSH
28065: CALL_OW 254
28069: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
28070: LD_ADDR_VAR 0 8
28074: PUSH
28075: LD_VAR 0 1
28079: PPUSH
28080: CALL_OW 250
28084: PPUSH
28085: LD_VAR 0 10
28089: PPUSH
28090: LD_VAR 0 5
28094: PPUSH
28095: CALL_OW 272
28099: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
28100: LD_ADDR_VAR 0 9
28104: PUSH
28105: LD_VAR 0 1
28109: PPUSH
28110: CALL_OW 251
28114: PPUSH
28115: LD_VAR 0 10
28119: PPUSH
28120: LD_VAR 0 5
28124: PPUSH
28125: CALL_OW 273
28129: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28130: LD_VAR 0 8
28134: PPUSH
28135: LD_VAR 0 9
28139: PPUSH
28140: CALL_OW 488
28144: NOT
28145: IFFALSE 28149
// exit ;
28147: GO 28256
// ComAnimCustom ( unit , 1 ) ;
28149: LD_VAR 0 1
28153: PPUSH
28154: LD_INT 1
28156: PPUSH
28157: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28161: LD_VAR 0 8
28165: PPUSH
28166: LD_VAR 0 9
28170: PPUSH
28171: LD_VAR 0 6
28175: PPUSH
28176: LD_VAR 0 7
28180: PPUSH
28181: CALL_OW 330
// repeat wait ( 1 ) ;
28185: LD_INT 1
28187: PPUSH
28188: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28192: LD_VAR 0 1
28196: PPUSH
28197: CALL_OW 316
28201: PUSH
28202: LD_VAR 0 1
28206: PPUSH
28207: CALL_OW 314
28211: OR
28212: PUSH
28213: LD_VAR 0 1
28217: PPUSH
28218: CALL_OW 302
28222: NOT
28223: OR
28224: PUSH
28225: LD_VAR 0 1
28229: PPUSH
28230: CALL_OW 301
28234: OR
28235: IFFALSE 28185
// RemoveSeeing ( _x , _y , side ) ;
28237: LD_VAR 0 8
28241: PPUSH
28242: LD_VAR 0 9
28246: PPUSH
28247: LD_VAR 0 6
28251: PPUSH
28252: CALL_OW 331
// end ; end_of_file
28256: LD_VAR 0 4
28260: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28261: LD_INT 0
28263: PPUSH
28264: PPUSH
// if exist_mode then
28265: LD_VAR 0 2
28269: IFFALSE 28294
// unit := CreateCharacter ( prefix & ident ) else
28271: LD_ADDR_VAR 0 5
28275: PUSH
28276: LD_VAR 0 3
28280: PUSH
28281: LD_VAR 0 1
28285: STR
28286: PPUSH
28287: CALL_OW 34
28291: ST_TO_ADDR
28292: GO 28309
// unit := NewCharacter ( ident ) ;
28294: LD_ADDR_VAR 0 5
28298: PUSH
28299: LD_VAR 0 1
28303: PPUSH
28304: CALL_OW 25
28308: ST_TO_ADDR
// result := unit ;
28309: LD_ADDR_VAR 0 4
28313: PUSH
28314: LD_VAR 0 5
28318: ST_TO_ADDR
// end ;
28319: LD_VAR 0 4
28323: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28324: LD_INT 0
28326: PPUSH
28327: PPUSH
// if not side or not nation then
28328: LD_VAR 0 1
28332: NOT
28333: PUSH
28334: LD_VAR 0 2
28338: NOT
28339: OR
28340: IFFALSE 28344
// exit ;
28342: GO 29112
// case nation of nation_american :
28344: LD_VAR 0 2
28348: PUSH
28349: LD_INT 1
28351: DOUBLE
28352: EQUAL
28353: IFTRUE 28357
28355: GO 28571
28357: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28358: LD_ADDR_VAR 0 4
28362: PUSH
28363: LD_INT 35
28365: PUSH
28366: LD_INT 45
28368: PUSH
28369: LD_INT 46
28371: PUSH
28372: LD_INT 47
28374: PUSH
28375: LD_INT 82
28377: PUSH
28378: LD_INT 83
28380: PUSH
28381: LD_INT 84
28383: PUSH
28384: LD_INT 85
28386: PUSH
28387: LD_INT 86
28389: PUSH
28390: LD_INT 1
28392: PUSH
28393: LD_INT 2
28395: PUSH
28396: LD_INT 6
28398: PUSH
28399: LD_INT 15
28401: PUSH
28402: LD_INT 16
28404: PUSH
28405: LD_INT 7
28407: PUSH
28408: LD_INT 12
28410: PUSH
28411: LD_INT 13
28413: PUSH
28414: LD_INT 10
28416: PUSH
28417: LD_INT 14
28419: PUSH
28420: LD_INT 20
28422: PUSH
28423: LD_INT 21
28425: PUSH
28426: LD_INT 22
28428: PUSH
28429: LD_INT 25
28431: PUSH
28432: LD_INT 32
28434: PUSH
28435: LD_INT 27
28437: PUSH
28438: LD_INT 36
28440: PUSH
28441: LD_INT 69
28443: PUSH
28444: LD_INT 39
28446: PUSH
28447: LD_INT 34
28449: PUSH
28450: LD_INT 40
28452: PUSH
28453: LD_INT 48
28455: PUSH
28456: LD_INT 49
28458: PUSH
28459: LD_INT 50
28461: PUSH
28462: LD_INT 51
28464: PUSH
28465: LD_INT 52
28467: PUSH
28468: LD_INT 53
28470: PUSH
28471: LD_INT 54
28473: PUSH
28474: LD_INT 55
28476: PUSH
28477: LD_INT 56
28479: PUSH
28480: LD_INT 57
28482: PUSH
28483: LD_INT 58
28485: PUSH
28486: LD_INT 59
28488: PUSH
28489: LD_INT 60
28491: PUSH
28492: LD_INT 61
28494: PUSH
28495: LD_INT 62
28497: PUSH
28498: LD_INT 80
28500: PUSH
28501: LD_INT 82
28503: PUSH
28504: LD_INT 83
28506: PUSH
28507: LD_INT 84
28509: PUSH
28510: LD_INT 85
28512: PUSH
28513: LD_INT 86
28515: PUSH
28516: EMPTY
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: LIST
28530: LIST
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: LIST
28537: LIST
28538: LIST
28539: LIST
28540: LIST
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: ST_TO_ADDR
28569: GO 29036
28571: LD_INT 2
28573: DOUBLE
28574: EQUAL
28575: IFTRUE 28579
28577: GO 28805
28579: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28580: LD_ADDR_VAR 0 4
28584: PUSH
28585: LD_INT 35
28587: PUSH
28588: LD_INT 45
28590: PUSH
28591: LD_INT 46
28593: PUSH
28594: LD_INT 47
28596: PUSH
28597: LD_INT 82
28599: PUSH
28600: LD_INT 83
28602: PUSH
28603: LD_INT 84
28605: PUSH
28606: LD_INT 85
28608: PUSH
28609: LD_INT 87
28611: PUSH
28612: LD_INT 70
28614: PUSH
28615: LD_INT 1
28617: PUSH
28618: LD_INT 11
28620: PUSH
28621: LD_INT 3
28623: PUSH
28624: LD_INT 4
28626: PUSH
28627: LD_INT 5
28629: PUSH
28630: LD_INT 6
28632: PUSH
28633: LD_INT 15
28635: PUSH
28636: LD_INT 18
28638: PUSH
28639: LD_INT 7
28641: PUSH
28642: LD_INT 17
28644: PUSH
28645: LD_INT 8
28647: PUSH
28648: LD_INT 20
28650: PUSH
28651: LD_INT 21
28653: PUSH
28654: LD_INT 22
28656: PUSH
28657: LD_INT 72
28659: PUSH
28660: LD_INT 26
28662: PUSH
28663: LD_INT 69
28665: PUSH
28666: LD_INT 39
28668: PUSH
28669: LD_INT 40
28671: PUSH
28672: LD_INT 41
28674: PUSH
28675: LD_INT 42
28677: PUSH
28678: LD_INT 43
28680: PUSH
28681: LD_INT 48
28683: PUSH
28684: LD_INT 49
28686: PUSH
28687: LD_INT 50
28689: PUSH
28690: LD_INT 51
28692: PUSH
28693: LD_INT 52
28695: PUSH
28696: LD_INT 53
28698: PUSH
28699: LD_INT 54
28701: PUSH
28702: LD_INT 55
28704: PUSH
28705: LD_INT 56
28707: PUSH
28708: LD_INT 60
28710: PUSH
28711: LD_INT 61
28713: PUSH
28714: LD_INT 62
28716: PUSH
28717: LD_INT 66
28719: PUSH
28720: LD_INT 67
28722: PUSH
28723: LD_INT 68
28725: PUSH
28726: LD_INT 81
28728: PUSH
28729: LD_INT 82
28731: PUSH
28732: LD_INT 83
28734: PUSH
28735: LD_INT 84
28737: PUSH
28738: LD_INT 85
28740: PUSH
28741: LD_INT 87
28743: PUSH
28744: LD_INT 88
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: LIST
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: LIST
28757: LIST
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: LIST
28770: LIST
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: ST_TO_ADDR
28803: GO 29036
28805: LD_INT 3
28807: DOUBLE
28808: EQUAL
28809: IFTRUE 28813
28811: GO 29035
28813: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28814: LD_ADDR_VAR 0 4
28818: PUSH
28819: LD_INT 46
28821: PUSH
28822: LD_INT 47
28824: PUSH
28825: LD_INT 1
28827: PUSH
28828: LD_INT 2
28830: PUSH
28831: LD_INT 82
28833: PUSH
28834: LD_INT 83
28836: PUSH
28837: LD_INT 84
28839: PUSH
28840: LD_INT 85
28842: PUSH
28843: LD_INT 86
28845: PUSH
28846: LD_INT 11
28848: PUSH
28849: LD_INT 9
28851: PUSH
28852: LD_INT 20
28854: PUSH
28855: LD_INT 19
28857: PUSH
28858: LD_INT 21
28860: PUSH
28861: LD_INT 24
28863: PUSH
28864: LD_INT 22
28866: PUSH
28867: LD_INT 25
28869: PUSH
28870: LD_INT 28
28872: PUSH
28873: LD_INT 29
28875: PUSH
28876: LD_INT 30
28878: PUSH
28879: LD_INT 31
28881: PUSH
28882: LD_INT 37
28884: PUSH
28885: LD_INT 38
28887: PUSH
28888: LD_INT 32
28890: PUSH
28891: LD_INT 27
28893: PUSH
28894: LD_INT 33
28896: PUSH
28897: LD_INT 69
28899: PUSH
28900: LD_INT 39
28902: PUSH
28903: LD_INT 34
28905: PUSH
28906: LD_INT 40
28908: PUSH
28909: LD_INT 71
28911: PUSH
28912: LD_INT 23
28914: PUSH
28915: LD_INT 44
28917: PUSH
28918: LD_INT 48
28920: PUSH
28921: LD_INT 49
28923: PUSH
28924: LD_INT 50
28926: PUSH
28927: LD_INT 51
28929: PUSH
28930: LD_INT 52
28932: PUSH
28933: LD_INT 53
28935: PUSH
28936: LD_INT 54
28938: PUSH
28939: LD_INT 55
28941: PUSH
28942: LD_INT 56
28944: PUSH
28945: LD_INT 57
28947: PUSH
28948: LD_INT 58
28950: PUSH
28951: LD_INT 59
28953: PUSH
28954: LD_INT 63
28956: PUSH
28957: LD_INT 64
28959: PUSH
28960: LD_INT 65
28962: PUSH
28963: LD_INT 82
28965: PUSH
28966: LD_INT 83
28968: PUSH
28969: LD_INT 84
28971: PUSH
28972: LD_INT 85
28974: PUSH
28975: LD_INT 86
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: LIST
29023: LIST
29024: LIST
29025: LIST
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: ST_TO_ADDR
29033: GO 29036
29035: POP
// if state > - 1 and state < 3 then
29036: LD_VAR 0 3
29040: PUSH
29041: LD_INT 1
29043: NEG
29044: GREATER
29045: PUSH
29046: LD_VAR 0 3
29050: PUSH
29051: LD_INT 3
29053: LESS
29054: AND
29055: IFFALSE 29112
// for i in result do
29057: LD_ADDR_VAR 0 5
29061: PUSH
29062: LD_VAR 0 4
29066: PUSH
29067: FOR_IN
29068: IFFALSE 29110
// if GetTech ( i , side ) <> state then
29070: LD_VAR 0 5
29074: PPUSH
29075: LD_VAR 0 1
29079: PPUSH
29080: CALL_OW 321
29084: PUSH
29085: LD_VAR 0 3
29089: NONEQUAL
29090: IFFALSE 29108
// result := result diff i ;
29092: LD_ADDR_VAR 0 4
29096: PUSH
29097: LD_VAR 0 4
29101: PUSH
29102: LD_VAR 0 5
29106: DIFF
29107: ST_TO_ADDR
29108: GO 29067
29110: POP
29111: POP
// end ;
29112: LD_VAR 0 4
29116: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29117: LD_INT 0
29119: PPUSH
29120: PPUSH
29121: PPUSH
// result := true ;
29122: LD_ADDR_VAR 0 3
29126: PUSH
29127: LD_INT 1
29129: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29130: LD_ADDR_VAR 0 5
29134: PUSH
29135: LD_VAR 0 2
29139: PPUSH
29140: CALL_OW 480
29144: ST_TO_ADDR
// if not tmp then
29145: LD_VAR 0 5
29149: NOT
29150: IFFALSE 29154
// exit ;
29152: GO 29203
// for i in tmp do
29154: LD_ADDR_VAR 0 4
29158: PUSH
29159: LD_VAR 0 5
29163: PUSH
29164: FOR_IN
29165: IFFALSE 29201
// if GetTech ( i , side ) <> state_researched then
29167: LD_VAR 0 4
29171: PPUSH
29172: LD_VAR 0 1
29176: PPUSH
29177: CALL_OW 321
29181: PUSH
29182: LD_INT 2
29184: NONEQUAL
29185: IFFALSE 29199
// begin result := false ;
29187: LD_ADDR_VAR 0 3
29191: PUSH
29192: LD_INT 0
29194: ST_TO_ADDR
// exit ;
29195: POP
29196: POP
29197: GO 29203
// end ;
29199: GO 29164
29201: POP
29202: POP
// end ;
29203: LD_VAR 0 3
29207: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29208: LD_INT 0
29210: PPUSH
29211: PPUSH
29212: PPUSH
29213: PPUSH
29214: PPUSH
29215: PPUSH
29216: PPUSH
29217: PPUSH
29218: PPUSH
29219: PPUSH
29220: PPUSH
29221: PPUSH
29222: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29223: LD_VAR 0 1
29227: NOT
29228: PUSH
29229: LD_VAR 0 1
29233: PPUSH
29234: CALL_OW 257
29238: PUSH
29239: LD_INT 9
29241: NONEQUAL
29242: OR
29243: IFFALSE 29247
// exit ;
29245: GO 29820
// side := GetSide ( unit ) ;
29247: LD_ADDR_VAR 0 9
29251: PUSH
29252: LD_VAR 0 1
29256: PPUSH
29257: CALL_OW 255
29261: ST_TO_ADDR
// tech_space := tech_spacanom ;
29262: LD_ADDR_VAR 0 12
29266: PUSH
29267: LD_INT 29
29269: ST_TO_ADDR
// tech_time := tech_taurad ;
29270: LD_ADDR_VAR 0 13
29274: PUSH
29275: LD_INT 28
29277: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29278: LD_ADDR_VAR 0 11
29282: PUSH
29283: LD_VAR 0 1
29287: PPUSH
29288: CALL_OW 310
29292: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29293: LD_VAR 0 11
29297: PPUSH
29298: CALL_OW 247
29302: PUSH
29303: LD_INT 2
29305: EQUAL
29306: IFFALSE 29310
// exit ;
29308: GO 29820
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29310: LD_ADDR_VAR 0 8
29314: PUSH
29315: LD_INT 81
29317: PUSH
29318: LD_VAR 0 9
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 3
29329: PUSH
29330: LD_INT 21
29332: PUSH
29333: LD_INT 3
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: EMPTY
29341: LIST
29342: LIST
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PPUSH
29348: CALL_OW 69
29352: ST_TO_ADDR
// if not tmp then
29353: LD_VAR 0 8
29357: NOT
29358: IFFALSE 29362
// exit ;
29360: GO 29820
// if in_unit then
29362: LD_VAR 0 11
29366: IFFALSE 29390
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29368: LD_ADDR_VAR 0 10
29372: PUSH
29373: LD_VAR 0 8
29377: PPUSH
29378: LD_VAR 0 11
29382: PPUSH
29383: CALL_OW 74
29387: ST_TO_ADDR
29388: GO 29410
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29390: LD_ADDR_VAR 0 10
29394: PUSH
29395: LD_VAR 0 8
29399: PPUSH
29400: LD_VAR 0 1
29404: PPUSH
29405: CALL_OW 74
29409: ST_TO_ADDR
// if not enemy then
29410: LD_VAR 0 10
29414: NOT
29415: IFFALSE 29419
// exit ;
29417: GO 29820
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29419: LD_VAR 0 11
29423: PUSH
29424: LD_VAR 0 11
29428: PPUSH
29429: LD_VAR 0 10
29433: PPUSH
29434: CALL_OW 296
29438: PUSH
29439: LD_INT 13
29441: GREATER
29442: AND
29443: PUSH
29444: LD_VAR 0 1
29448: PPUSH
29449: LD_VAR 0 10
29453: PPUSH
29454: CALL_OW 296
29458: PUSH
29459: LD_INT 12
29461: GREATER
29462: OR
29463: IFFALSE 29467
// exit ;
29465: GO 29820
// missile := [ 1 ] ;
29467: LD_ADDR_VAR 0 14
29471: PUSH
29472: LD_INT 1
29474: PUSH
29475: EMPTY
29476: LIST
29477: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29478: LD_VAR 0 9
29482: PPUSH
29483: LD_VAR 0 12
29487: PPUSH
29488: CALL_OW 325
29492: IFFALSE 29521
// missile := Replace ( missile , missile + 1 , 2 ) ;
29494: LD_ADDR_VAR 0 14
29498: PUSH
29499: LD_VAR 0 14
29503: PPUSH
29504: LD_VAR 0 14
29508: PUSH
29509: LD_INT 1
29511: PLUS
29512: PPUSH
29513: LD_INT 2
29515: PPUSH
29516: CALL_OW 1
29520: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29521: LD_VAR 0 9
29525: PPUSH
29526: LD_VAR 0 13
29530: PPUSH
29531: CALL_OW 325
29535: PUSH
29536: LD_VAR 0 10
29540: PPUSH
29541: CALL_OW 255
29545: PPUSH
29546: LD_VAR 0 13
29550: PPUSH
29551: CALL_OW 325
29555: NOT
29556: AND
29557: IFFALSE 29586
// missile := Replace ( missile , missile + 1 , 3 ) ;
29559: LD_ADDR_VAR 0 14
29563: PUSH
29564: LD_VAR 0 14
29568: PPUSH
29569: LD_VAR 0 14
29573: PUSH
29574: LD_INT 1
29576: PLUS
29577: PPUSH
29578: LD_INT 3
29580: PPUSH
29581: CALL_OW 1
29585: ST_TO_ADDR
// if missile < 2 then
29586: LD_VAR 0 14
29590: PUSH
29591: LD_INT 2
29593: LESS
29594: IFFALSE 29598
// exit ;
29596: GO 29820
// x := GetX ( enemy ) ;
29598: LD_ADDR_VAR 0 4
29602: PUSH
29603: LD_VAR 0 10
29607: PPUSH
29608: CALL_OW 250
29612: ST_TO_ADDR
// y := GetY ( enemy ) ;
29613: LD_ADDR_VAR 0 5
29617: PUSH
29618: LD_VAR 0 10
29622: PPUSH
29623: CALL_OW 251
29627: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29628: LD_ADDR_VAR 0 6
29632: PUSH
29633: LD_VAR 0 4
29637: PUSH
29638: LD_INT 1
29640: NEG
29641: PPUSH
29642: LD_INT 1
29644: PPUSH
29645: CALL_OW 12
29649: PLUS
29650: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29651: LD_ADDR_VAR 0 7
29655: PUSH
29656: LD_VAR 0 5
29660: PUSH
29661: LD_INT 1
29663: NEG
29664: PPUSH
29665: LD_INT 1
29667: PPUSH
29668: CALL_OW 12
29672: PLUS
29673: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29674: LD_VAR 0 6
29678: PPUSH
29679: LD_VAR 0 7
29683: PPUSH
29684: CALL_OW 488
29688: NOT
29689: IFFALSE 29711
// begin _x := x ;
29691: LD_ADDR_VAR 0 6
29695: PUSH
29696: LD_VAR 0 4
29700: ST_TO_ADDR
// _y := y ;
29701: LD_ADDR_VAR 0 7
29705: PUSH
29706: LD_VAR 0 5
29710: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29711: LD_ADDR_VAR 0 3
29715: PUSH
29716: LD_INT 1
29718: PPUSH
29719: LD_VAR 0 14
29723: PPUSH
29724: CALL_OW 12
29728: ST_TO_ADDR
// case i of 1 :
29729: LD_VAR 0 3
29733: PUSH
29734: LD_INT 1
29736: DOUBLE
29737: EQUAL
29738: IFTRUE 29742
29740: GO 29759
29742: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29743: LD_VAR 0 1
29747: PPUSH
29748: LD_VAR 0 10
29752: PPUSH
29753: CALL_OW 115
29757: GO 29820
29759: LD_INT 2
29761: DOUBLE
29762: EQUAL
29763: IFTRUE 29767
29765: GO 29789
29767: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29768: LD_VAR 0 1
29772: PPUSH
29773: LD_VAR 0 6
29777: PPUSH
29778: LD_VAR 0 7
29782: PPUSH
29783: CALL_OW 153
29787: GO 29820
29789: LD_INT 3
29791: DOUBLE
29792: EQUAL
29793: IFTRUE 29797
29795: GO 29819
29797: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29798: LD_VAR 0 1
29802: PPUSH
29803: LD_VAR 0 6
29807: PPUSH
29808: LD_VAR 0 7
29812: PPUSH
29813: CALL_OW 154
29817: GO 29820
29819: POP
// end ;
29820: LD_VAR 0 2
29824: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29825: LD_INT 0
29827: PPUSH
29828: PPUSH
29829: PPUSH
29830: PPUSH
29831: PPUSH
29832: PPUSH
// if not unit or not building then
29833: LD_VAR 0 1
29837: NOT
29838: PUSH
29839: LD_VAR 0 2
29843: NOT
29844: OR
29845: IFFALSE 29849
// exit ;
29847: GO 30007
// x := GetX ( building ) ;
29849: LD_ADDR_VAR 0 5
29853: PUSH
29854: LD_VAR 0 2
29858: PPUSH
29859: CALL_OW 250
29863: ST_TO_ADDR
// y := GetY ( building ) ;
29864: LD_ADDR_VAR 0 6
29868: PUSH
29869: LD_VAR 0 2
29873: PPUSH
29874: CALL_OW 251
29878: ST_TO_ADDR
// for i = 0 to 5 do
29879: LD_ADDR_VAR 0 4
29883: PUSH
29884: DOUBLE
29885: LD_INT 0
29887: DEC
29888: ST_TO_ADDR
29889: LD_INT 5
29891: PUSH
29892: FOR_TO
29893: IFFALSE 30005
// begin _x := ShiftX ( x , i , 3 ) ;
29895: LD_ADDR_VAR 0 7
29899: PUSH
29900: LD_VAR 0 5
29904: PPUSH
29905: LD_VAR 0 4
29909: PPUSH
29910: LD_INT 3
29912: PPUSH
29913: CALL_OW 272
29917: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29918: LD_ADDR_VAR 0 8
29922: PUSH
29923: LD_VAR 0 6
29927: PPUSH
29928: LD_VAR 0 4
29932: PPUSH
29933: LD_INT 3
29935: PPUSH
29936: CALL_OW 273
29940: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29941: LD_VAR 0 7
29945: PPUSH
29946: LD_VAR 0 8
29950: PPUSH
29951: CALL_OW 488
29955: NOT
29956: IFFALSE 29960
// continue ;
29958: GO 29892
// if HexInfo ( _x , _y ) = 0 then
29960: LD_VAR 0 7
29964: PPUSH
29965: LD_VAR 0 8
29969: PPUSH
29970: CALL_OW 428
29974: PUSH
29975: LD_INT 0
29977: EQUAL
29978: IFFALSE 30003
// begin ComMoveXY ( unit , _x , _y ) ;
29980: LD_VAR 0 1
29984: PPUSH
29985: LD_VAR 0 7
29989: PPUSH
29990: LD_VAR 0 8
29994: PPUSH
29995: CALL_OW 111
// exit ;
29999: POP
30000: POP
30001: GO 30007
// end ; end ;
30003: GO 29892
30005: POP
30006: POP
// end ;
30007: LD_VAR 0 3
30011: RET
// export function ScanBase ( side , base_area ) ; begin
30012: LD_INT 0
30014: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30015: LD_ADDR_VAR 0 3
30019: PUSH
30020: LD_VAR 0 2
30024: PPUSH
30025: LD_INT 81
30027: PUSH
30028: LD_VAR 0 1
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: PPUSH
30037: CALL_OW 70
30041: ST_TO_ADDR
// end ;
30042: LD_VAR 0 3
30046: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30047: LD_INT 0
30049: PPUSH
30050: PPUSH
30051: PPUSH
30052: PPUSH
// result := false ;
30053: LD_ADDR_VAR 0 2
30057: PUSH
30058: LD_INT 0
30060: ST_TO_ADDR
// side := GetSide ( unit ) ;
30061: LD_ADDR_VAR 0 3
30065: PUSH
30066: LD_VAR 0 1
30070: PPUSH
30071: CALL_OW 255
30075: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30076: LD_ADDR_VAR 0 4
30080: PUSH
30081: LD_VAR 0 1
30085: PPUSH
30086: CALL_OW 248
30090: ST_TO_ADDR
// case nat of 1 :
30091: LD_VAR 0 4
30095: PUSH
30096: LD_INT 1
30098: DOUBLE
30099: EQUAL
30100: IFTRUE 30104
30102: GO 30115
30104: POP
// tech := tech_lassight ; 2 :
30105: LD_ADDR_VAR 0 5
30109: PUSH
30110: LD_INT 12
30112: ST_TO_ADDR
30113: GO 30154
30115: LD_INT 2
30117: DOUBLE
30118: EQUAL
30119: IFTRUE 30123
30121: GO 30134
30123: POP
// tech := tech_mortar ; 3 :
30124: LD_ADDR_VAR 0 5
30128: PUSH
30129: LD_INT 41
30131: ST_TO_ADDR
30132: GO 30154
30134: LD_INT 3
30136: DOUBLE
30137: EQUAL
30138: IFTRUE 30142
30140: GO 30153
30142: POP
// tech := tech_bazooka ; end ;
30143: LD_ADDR_VAR 0 5
30147: PUSH
30148: LD_INT 44
30150: ST_TO_ADDR
30151: GO 30154
30153: POP
// if Researched ( side , tech ) then
30154: LD_VAR 0 3
30158: PPUSH
30159: LD_VAR 0 5
30163: PPUSH
30164: CALL_OW 325
30168: IFFALSE 30195
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30170: LD_ADDR_VAR 0 2
30174: PUSH
30175: LD_INT 5
30177: PUSH
30178: LD_INT 8
30180: PUSH
30181: LD_INT 9
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: LIST
30188: PUSH
30189: LD_VAR 0 4
30193: ARRAY
30194: ST_TO_ADDR
// end ;
30195: LD_VAR 0 2
30199: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30200: LD_INT 0
30202: PPUSH
30203: PPUSH
30204: PPUSH
// if not mines then
30205: LD_VAR 0 2
30209: NOT
30210: IFFALSE 30214
// exit ;
30212: GO 30358
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30214: LD_ADDR_VAR 0 5
30218: PUSH
30219: LD_INT 81
30221: PUSH
30222: LD_VAR 0 1
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: PUSH
30231: LD_INT 3
30233: PUSH
30234: LD_INT 21
30236: PUSH
30237: LD_INT 3
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PPUSH
30252: CALL_OW 69
30256: ST_TO_ADDR
// for i in mines do
30257: LD_ADDR_VAR 0 4
30261: PUSH
30262: LD_VAR 0 2
30266: PUSH
30267: FOR_IN
30268: IFFALSE 30356
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30270: LD_VAR 0 4
30274: PUSH
30275: LD_INT 1
30277: ARRAY
30278: PPUSH
30279: LD_VAR 0 4
30283: PUSH
30284: LD_INT 2
30286: ARRAY
30287: PPUSH
30288: CALL_OW 458
30292: NOT
30293: IFFALSE 30297
// continue ;
30295: GO 30267
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30297: LD_VAR 0 4
30301: PUSH
30302: LD_INT 1
30304: ARRAY
30305: PPUSH
30306: LD_VAR 0 4
30310: PUSH
30311: LD_INT 2
30313: ARRAY
30314: PPUSH
30315: CALL_OW 428
30319: PUSH
30320: LD_VAR 0 5
30324: IN
30325: IFFALSE 30354
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30327: LD_VAR 0 4
30331: PUSH
30332: LD_INT 1
30334: ARRAY
30335: PPUSH
30336: LD_VAR 0 4
30340: PUSH
30341: LD_INT 2
30343: ARRAY
30344: PPUSH
30345: LD_VAR 0 1
30349: PPUSH
30350: CALL_OW 456
// end ;
30354: GO 30267
30356: POP
30357: POP
// end ;
30358: LD_VAR 0 3
30362: RET
// export function Count ( array ) ; var i ; begin
30363: LD_INT 0
30365: PPUSH
30366: PPUSH
// result := 0 ;
30367: LD_ADDR_VAR 0 2
30371: PUSH
30372: LD_INT 0
30374: ST_TO_ADDR
// for i in array do
30375: LD_ADDR_VAR 0 3
30379: PUSH
30380: LD_VAR 0 1
30384: PUSH
30385: FOR_IN
30386: IFFALSE 30410
// if i then
30388: LD_VAR 0 3
30392: IFFALSE 30408
// result := result + 1 ;
30394: LD_ADDR_VAR 0 2
30398: PUSH
30399: LD_VAR 0 2
30403: PUSH
30404: LD_INT 1
30406: PLUS
30407: ST_TO_ADDR
30408: GO 30385
30410: POP
30411: POP
// end ;
30412: LD_VAR 0 2
30416: RET
// export function IsEmpty ( building ) ; begin
30417: LD_INT 0
30419: PPUSH
// if not building then
30420: LD_VAR 0 1
30424: NOT
30425: IFFALSE 30429
// exit ;
30427: GO 30472
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30429: LD_ADDR_VAR 0 2
30433: PUSH
30434: LD_VAR 0 1
30438: PUSH
30439: LD_INT 22
30441: PUSH
30442: LD_VAR 0 1
30446: PPUSH
30447: CALL_OW 255
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 58
30458: PUSH
30459: EMPTY
30460: LIST
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PPUSH
30466: CALL_OW 69
30470: IN
30471: ST_TO_ADDR
// end ;
30472: LD_VAR 0 2
30476: RET
// export function IsNotFull ( building ) ; var places ; begin
30477: LD_INT 0
30479: PPUSH
30480: PPUSH
// if not building then
30481: LD_VAR 0 1
30485: NOT
30486: IFFALSE 30490
// exit ;
30488: GO 30661
// result := false ;
30490: LD_ADDR_VAR 0 2
30494: PUSH
30495: LD_INT 0
30497: ST_TO_ADDR
// places := 0 ;
30498: LD_ADDR_VAR 0 3
30502: PUSH
30503: LD_INT 0
30505: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
30506: LD_VAR 0 1
30510: PPUSH
30511: CALL_OW 266
30515: PUSH
30516: LD_INT 0
30518: DOUBLE
30519: EQUAL
30520: IFTRUE 30578
30522: LD_INT 1
30524: DOUBLE
30525: EQUAL
30526: IFTRUE 30578
30528: LD_INT 6
30530: DOUBLE
30531: EQUAL
30532: IFTRUE 30578
30534: LD_INT 7
30536: DOUBLE
30537: EQUAL
30538: IFTRUE 30578
30540: LD_INT 8
30542: DOUBLE
30543: EQUAL
30544: IFTRUE 30578
30546: LD_INT 4
30548: DOUBLE
30549: EQUAL
30550: IFTRUE 30578
30552: LD_INT 5
30554: DOUBLE
30555: EQUAL
30556: IFTRUE 30578
30558: LD_INT 2
30560: DOUBLE
30561: EQUAL
30562: IFTRUE 30578
30564: LD_INT 3
30566: DOUBLE
30567: EQUAL
30568: IFTRUE 30578
30570: LD_INT 35
30572: DOUBLE
30573: EQUAL
30574: IFTRUE 30578
30576: GO 30589
30578: POP
// places := 6 ; b_bunker , b_breastwork :
30579: LD_ADDR_VAR 0 3
30583: PUSH
30584: LD_INT 6
30586: ST_TO_ADDR
30587: GO 30634
30589: LD_INT 32
30591: DOUBLE
30592: EQUAL
30593: IFTRUE 30603
30595: LD_INT 31
30597: DOUBLE
30598: EQUAL
30599: IFTRUE 30603
30601: GO 30614
30603: POP
// places := 1 ; b_control_tower :
30604: LD_ADDR_VAR 0 3
30608: PUSH
30609: LD_INT 1
30611: ST_TO_ADDR
30612: GO 30634
30614: LD_INT 36
30616: DOUBLE
30617: EQUAL
30618: IFTRUE 30622
30620: GO 30633
30622: POP
// places := 3 ; end ;
30623: LD_ADDR_VAR 0 3
30627: PUSH
30628: LD_INT 3
30630: ST_TO_ADDR
30631: GO 30634
30633: POP
// if places then
30634: LD_VAR 0 3
30638: IFFALSE 30661
// result := UnitsInside ( building ) < places ;
30640: LD_ADDR_VAR 0 2
30644: PUSH
30645: LD_VAR 0 1
30649: PPUSH
30650: CALL_OW 313
30654: PUSH
30655: LD_VAR 0 3
30659: LESS
30660: ST_TO_ADDR
// end ;
30661: LD_VAR 0 2
30665: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30666: LD_INT 0
30668: PPUSH
30669: PPUSH
30670: PPUSH
30671: PPUSH
// tmp := [ ] ;
30672: LD_ADDR_VAR 0 3
30676: PUSH
30677: EMPTY
30678: ST_TO_ADDR
// list := [ ] ;
30679: LD_ADDR_VAR 0 5
30683: PUSH
30684: EMPTY
30685: ST_TO_ADDR
// for i = 16 to 25 do
30686: LD_ADDR_VAR 0 4
30690: PUSH
30691: DOUBLE
30692: LD_INT 16
30694: DEC
30695: ST_TO_ADDR
30696: LD_INT 25
30698: PUSH
30699: FOR_TO
30700: IFFALSE 30773
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30702: LD_ADDR_VAR 0 3
30706: PUSH
30707: LD_VAR 0 3
30711: PUSH
30712: LD_INT 22
30714: PUSH
30715: LD_VAR 0 1
30719: PPUSH
30720: CALL_OW 255
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 91
30731: PUSH
30732: LD_VAR 0 1
30736: PUSH
30737: LD_INT 6
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 30
30747: PUSH
30748: LD_VAR 0 4
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: LIST
30761: PUSH
30762: EMPTY
30763: LIST
30764: PPUSH
30765: CALL_OW 69
30769: ADD
30770: ST_TO_ADDR
30771: GO 30699
30773: POP
30774: POP
// for i = 1 to tmp do
30775: LD_ADDR_VAR 0 4
30779: PUSH
30780: DOUBLE
30781: LD_INT 1
30783: DEC
30784: ST_TO_ADDR
30785: LD_VAR 0 3
30789: PUSH
30790: FOR_TO
30791: IFFALSE 30879
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30793: LD_ADDR_VAR 0 5
30797: PUSH
30798: LD_VAR 0 5
30802: PUSH
30803: LD_VAR 0 3
30807: PUSH
30808: LD_VAR 0 4
30812: ARRAY
30813: PPUSH
30814: CALL_OW 266
30818: PUSH
30819: LD_VAR 0 3
30823: PUSH
30824: LD_VAR 0 4
30828: ARRAY
30829: PPUSH
30830: CALL_OW 250
30834: PUSH
30835: LD_VAR 0 3
30839: PUSH
30840: LD_VAR 0 4
30844: ARRAY
30845: PPUSH
30846: CALL_OW 251
30850: PUSH
30851: LD_VAR 0 3
30855: PUSH
30856: LD_VAR 0 4
30860: ARRAY
30861: PPUSH
30862: CALL_OW 254
30866: PUSH
30867: EMPTY
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: PUSH
30873: EMPTY
30874: LIST
30875: ADD
30876: ST_TO_ADDR
30877: GO 30790
30879: POP
30880: POP
// result := list ;
30881: LD_ADDR_VAR 0 2
30885: PUSH
30886: LD_VAR 0 5
30890: ST_TO_ADDR
// end ;
30891: LD_VAR 0 2
30895: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30896: LD_INT 0
30898: PPUSH
30899: PPUSH
30900: PPUSH
30901: PPUSH
30902: PPUSH
30903: PPUSH
30904: PPUSH
// if not factory then
30905: LD_VAR 0 1
30909: NOT
30910: IFFALSE 30914
// exit ;
30912: GO 31507
// if control = control_apeman then
30914: LD_VAR 0 4
30918: PUSH
30919: LD_INT 5
30921: EQUAL
30922: IFFALSE 31031
// begin tmp := UnitsInside ( factory ) ;
30924: LD_ADDR_VAR 0 8
30928: PUSH
30929: LD_VAR 0 1
30933: PPUSH
30934: CALL_OW 313
30938: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30939: LD_VAR 0 8
30943: PPUSH
30944: LD_INT 25
30946: PUSH
30947: LD_INT 12
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PPUSH
30954: CALL_OW 72
30958: NOT
30959: IFFALSE 30969
// control := control_manual ;
30961: LD_ADDR_VAR 0 4
30965: PUSH
30966: LD_INT 1
30968: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30969: LD_ADDR_VAR 0 8
30973: PUSH
30974: LD_VAR 0 1
30978: PPUSH
30979: CALL 30666 0 1
30983: ST_TO_ADDR
// if tmp then
30984: LD_VAR 0 8
30988: IFFALSE 31031
// begin for i in tmp do
30990: LD_ADDR_VAR 0 7
30994: PUSH
30995: LD_VAR 0 8
30999: PUSH
31000: FOR_IN
31001: IFFALSE 31029
// if i [ 1 ] = b_ext_radio then
31003: LD_VAR 0 7
31007: PUSH
31008: LD_INT 1
31010: ARRAY
31011: PUSH
31012: LD_INT 22
31014: EQUAL
31015: IFFALSE 31027
// begin control := control_remote ;
31017: LD_ADDR_VAR 0 4
31021: PUSH
31022: LD_INT 2
31024: ST_TO_ADDR
// break ;
31025: GO 31029
// end ;
31027: GO 31000
31029: POP
31030: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31031: LD_VAR 0 1
31035: PPUSH
31036: LD_VAR 0 2
31040: PPUSH
31041: LD_VAR 0 3
31045: PPUSH
31046: LD_VAR 0 4
31050: PPUSH
31051: LD_VAR 0 5
31055: PPUSH
31056: CALL_OW 448
31060: IFFALSE 31095
// begin result := [ chassis , engine , control , weapon ] ;
31062: LD_ADDR_VAR 0 6
31066: PUSH
31067: LD_VAR 0 2
31071: PUSH
31072: LD_VAR 0 3
31076: PUSH
31077: LD_VAR 0 4
31081: PUSH
31082: LD_VAR 0 5
31086: PUSH
31087: EMPTY
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: ST_TO_ADDR
// exit ;
31093: GO 31507
// end ; _chassis := AvailableChassisList ( factory ) ;
31095: LD_ADDR_VAR 0 9
31099: PUSH
31100: LD_VAR 0 1
31104: PPUSH
31105: CALL_OW 475
31109: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31110: LD_ADDR_VAR 0 11
31114: PUSH
31115: LD_VAR 0 1
31119: PPUSH
31120: CALL_OW 476
31124: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31125: LD_ADDR_VAR 0 12
31129: PUSH
31130: LD_VAR 0 1
31134: PPUSH
31135: CALL_OW 477
31139: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31140: LD_ADDR_VAR 0 10
31144: PUSH
31145: LD_VAR 0 1
31149: PPUSH
31150: CALL_OW 478
31154: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31155: LD_VAR 0 9
31159: NOT
31160: PUSH
31161: LD_VAR 0 11
31165: NOT
31166: OR
31167: PUSH
31168: LD_VAR 0 12
31172: NOT
31173: OR
31174: PUSH
31175: LD_VAR 0 10
31179: NOT
31180: OR
31181: IFFALSE 31216
// begin result := [ chassis , engine , control , weapon ] ;
31183: LD_ADDR_VAR 0 6
31187: PUSH
31188: LD_VAR 0 2
31192: PUSH
31193: LD_VAR 0 3
31197: PUSH
31198: LD_VAR 0 4
31202: PUSH
31203: LD_VAR 0 5
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: LIST
31212: LIST
31213: ST_TO_ADDR
// exit ;
31214: GO 31507
// end ; if not chassis in _chassis then
31216: LD_VAR 0 2
31220: PUSH
31221: LD_VAR 0 9
31225: IN
31226: NOT
31227: IFFALSE 31253
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31229: LD_ADDR_VAR 0 2
31233: PUSH
31234: LD_VAR 0 9
31238: PUSH
31239: LD_INT 1
31241: PPUSH
31242: LD_VAR 0 9
31246: PPUSH
31247: CALL_OW 12
31251: ARRAY
31252: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31253: LD_VAR 0 2
31257: PPUSH
31258: LD_VAR 0 3
31262: PPUSH
31263: CALL 31512 0 2
31267: NOT
31268: IFFALSE 31327
// repeat engine := _engine [ 1 ] ;
31270: LD_ADDR_VAR 0 3
31274: PUSH
31275: LD_VAR 0 11
31279: PUSH
31280: LD_INT 1
31282: ARRAY
31283: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31284: LD_ADDR_VAR 0 11
31288: PUSH
31289: LD_VAR 0 11
31293: PPUSH
31294: LD_INT 1
31296: PPUSH
31297: CALL_OW 3
31301: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31302: LD_VAR 0 2
31306: PPUSH
31307: LD_VAR 0 3
31311: PPUSH
31312: CALL 31512 0 2
31316: PUSH
31317: LD_VAR 0 11
31321: PUSH
31322: EMPTY
31323: EQUAL
31324: OR
31325: IFFALSE 31270
// if not control in _control then
31327: LD_VAR 0 4
31331: PUSH
31332: LD_VAR 0 12
31336: IN
31337: NOT
31338: IFFALSE 31364
// control := _control [ rand ( 1 , _control ) ] ;
31340: LD_ADDR_VAR 0 4
31344: PUSH
31345: LD_VAR 0 12
31349: PUSH
31350: LD_INT 1
31352: PPUSH
31353: LD_VAR 0 12
31357: PPUSH
31358: CALL_OW 12
31362: ARRAY
31363: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31364: LD_VAR 0 2
31368: PPUSH
31369: LD_VAR 0 5
31373: PPUSH
31374: CALL 31732 0 2
31378: NOT
31379: IFFALSE 31438
// repeat weapon := _weapon [ 1 ] ;
31381: LD_ADDR_VAR 0 5
31385: PUSH
31386: LD_VAR 0 10
31390: PUSH
31391: LD_INT 1
31393: ARRAY
31394: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31395: LD_ADDR_VAR 0 10
31399: PUSH
31400: LD_VAR 0 10
31404: PPUSH
31405: LD_INT 1
31407: PPUSH
31408: CALL_OW 3
31412: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31413: LD_VAR 0 2
31417: PPUSH
31418: LD_VAR 0 5
31422: PPUSH
31423: CALL 31732 0 2
31427: PUSH
31428: LD_VAR 0 10
31432: PUSH
31433: EMPTY
31434: EQUAL
31435: OR
31436: IFFALSE 31381
// result := [ ] ;
31438: LD_ADDR_VAR 0 6
31442: PUSH
31443: EMPTY
31444: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31445: LD_VAR 0 1
31449: PPUSH
31450: LD_VAR 0 2
31454: PPUSH
31455: LD_VAR 0 3
31459: PPUSH
31460: LD_VAR 0 4
31464: PPUSH
31465: LD_VAR 0 5
31469: PPUSH
31470: CALL_OW 448
31474: IFFALSE 31507
// result := [ chassis , engine , control , weapon ] ;
31476: LD_ADDR_VAR 0 6
31480: PUSH
31481: LD_VAR 0 2
31485: PUSH
31486: LD_VAR 0 3
31490: PUSH
31491: LD_VAR 0 4
31495: PUSH
31496: LD_VAR 0 5
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: ST_TO_ADDR
// end ;
31507: LD_VAR 0 6
31511: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31512: LD_INT 0
31514: PPUSH
// if not chassis or not engine then
31515: LD_VAR 0 1
31519: NOT
31520: PUSH
31521: LD_VAR 0 2
31525: NOT
31526: OR
31527: IFFALSE 31531
// exit ;
31529: GO 31727
// case engine of engine_solar :
31531: LD_VAR 0 2
31535: PUSH
31536: LD_INT 2
31538: DOUBLE
31539: EQUAL
31540: IFTRUE 31544
31542: GO 31582
31544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31545: LD_ADDR_VAR 0 3
31549: PUSH
31550: LD_INT 11
31552: PUSH
31553: LD_INT 12
31555: PUSH
31556: LD_INT 13
31558: PUSH
31559: LD_INT 14
31561: PUSH
31562: LD_INT 1
31564: PUSH
31565: LD_INT 2
31567: PUSH
31568: LD_INT 3
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: ST_TO_ADDR
31580: GO 31711
31582: LD_INT 1
31584: DOUBLE
31585: EQUAL
31586: IFTRUE 31590
31588: GO 31652
31590: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31591: LD_ADDR_VAR 0 3
31595: PUSH
31596: LD_INT 11
31598: PUSH
31599: LD_INT 12
31601: PUSH
31602: LD_INT 13
31604: PUSH
31605: LD_INT 14
31607: PUSH
31608: LD_INT 1
31610: PUSH
31611: LD_INT 2
31613: PUSH
31614: LD_INT 3
31616: PUSH
31617: LD_INT 4
31619: PUSH
31620: LD_INT 5
31622: PUSH
31623: LD_INT 21
31625: PUSH
31626: LD_INT 23
31628: PUSH
31629: LD_INT 22
31631: PUSH
31632: LD_INT 24
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: ST_TO_ADDR
31650: GO 31711
31652: LD_INT 3
31654: DOUBLE
31655: EQUAL
31656: IFTRUE 31660
31658: GO 31710
31660: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31661: LD_ADDR_VAR 0 3
31665: PUSH
31666: LD_INT 13
31668: PUSH
31669: LD_INT 14
31671: PUSH
31672: LD_INT 2
31674: PUSH
31675: LD_INT 3
31677: PUSH
31678: LD_INT 4
31680: PUSH
31681: LD_INT 5
31683: PUSH
31684: LD_INT 21
31686: PUSH
31687: LD_INT 22
31689: PUSH
31690: LD_INT 23
31692: PUSH
31693: LD_INT 24
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: ST_TO_ADDR
31708: GO 31711
31710: POP
// result := ( chassis in result ) ;
31711: LD_ADDR_VAR 0 3
31715: PUSH
31716: LD_VAR 0 1
31720: PUSH
31721: LD_VAR 0 3
31725: IN
31726: ST_TO_ADDR
// end ;
31727: LD_VAR 0 3
31731: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31732: LD_INT 0
31734: PPUSH
// if not chassis or not weapon then
31735: LD_VAR 0 1
31739: NOT
31740: PUSH
31741: LD_VAR 0 2
31745: NOT
31746: OR
31747: IFFALSE 31751
// exit ;
31749: GO 32811
// case weapon of us_machine_gun :
31751: LD_VAR 0 2
31755: PUSH
31756: LD_INT 2
31758: DOUBLE
31759: EQUAL
31760: IFTRUE 31764
31762: GO 31794
31764: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31765: LD_ADDR_VAR 0 3
31769: PUSH
31770: LD_INT 1
31772: PUSH
31773: LD_INT 2
31775: PUSH
31776: LD_INT 3
31778: PUSH
31779: LD_INT 4
31781: PUSH
31782: LD_INT 5
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: ST_TO_ADDR
31792: GO 32795
31794: LD_INT 3
31796: DOUBLE
31797: EQUAL
31798: IFTRUE 31802
31800: GO 31832
31802: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31803: LD_ADDR_VAR 0 3
31807: PUSH
31808: LD_INT 1
31810: PUSH
31811: LD_INT 2
31813: PUSH
31814: LD_INT 3
31816: PUSH
31817: LD_INT 4
31819: PUSH
31820: LD_INT 5
31822: PUSH
31823: EMPTY
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: ST_TO_ADDR
31830: GO 32795
31832: LD_INT 11
31834: DOUBLE
31835: EQUAL
31836: IFTRUE 31840
31838: GO 31870
31840: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31841: LD_ADDR_VAR 0 3
31845: PUSH
31846: LD_INT 1
31848: PUSH
31849: LD_INT 2
31851: PUSH
31852: LD_INT 3
31854: PUSH
31855: LD_INT 4
31857: PUSH
31858: LD_INT 5
31860: PUSH
31861: EMPTY
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: ST_TO_ADDR
31868: GO 32795
31870: LD_INT 4
31872: DOUBLE
31873: EQUAL
31874: IFTRUE 31878
31876: GO 31904
31878: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31879: LD_ADDR_VAR 0 3
31883: PUSH
31884: LD_INT 2
31886: PUSH
31887: LD_INT 3
31889: PUSH
31890: LD_INT 4
31892: PUSH
31893: LD_INT 5
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: ST_TO_ADDR
31902: GO 32795
31904: LD_INT 5
31906: DOUBLE
31907: EQUAL
31908: IFTRUE 31912
31910: GO 31938
31912: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31913: LD_ADDR_VAR 0 3
31917: PUSH
31918: LD_INT 2
31920: PUSH
31921: LD_INT 3
31923: PUSH
31924: LD_INT 4
31926: PUSH
31927: LD_INT 5
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: ST_TO_ADDR
31936: GO 32795
31938: LD_INT 9
31940: DOUBLE
31941: EQUAL
31942: IFTRUE 31946
31944: GO 31972
31946: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31947: LD_ADDR_VAR 0 3
31951: PUSH
31952: LD_INT 2
31954: PUSH
31955: LD_INT 3
31957: PUSH
31958: LD_INT 4
31960: PUSH
31961: LD_INT 5
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: ST_TO_ADDR
31970: GO 32795
31972: LD_INT 7
31974: DOUBLE
31975: EQUAL
31976: IFTRUE 31980
31978: GO 32006
31980: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31981: LD_ADDR_VAR 0 3
31985: PUSH
31986: LD_INT 2
31988: PUSH
31989: LD_INT 3
31991: PUSH
31992: LD_INT 4
31994: PUSH
31995: LD_INT 5
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: ST_TO_ADDR
32004: GO 32795
32006: LD_INT 12
32008: DOUBLE
32009: EQUAL
32010: IFTRUE 32014
32012: GO 32040
32014: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32015: LD_ADDR_VAR 0 3
32019: PUSH
32020: LD_INT 2
32022: PUSH
32023: LD_INT 3
32025: PUSH
32026: LD_INT 4
32028: PUSH
32029: LD_INT 5
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: ST_TO_ADDR
32038: GO 32795
32040: LD_INT 13
32042: DOUBLE
32043: EQUAL
32044: IFTRUE 32048
32046: GO 32074
32048: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32049: LD_ADDR_VAR 0 3
32053: PUSH
32054: LD_INT 2
32056: PUSH
32057: LD_INT 3
32059: PUSH
32060: LD_INT 4
32062: PUSH
32063: LD_INT 5
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: ST_TO_ADDR
32072: GO 32795
32074: LD_INT 14
32076: DOUBLE
32077: EQUAL
32078: IFTRUE 32082
32080: GO 32100
32082: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32083: LD_ADDR_VAR 0 3
32087: PUSH
32088: LD_INT 4
32090: PUSH
32091: LD_INT 5
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: ST_TO_ADDR
32098: GO 32795
32100: LD_INT 6
32102: DOUBLE
32103: EQUAL
32104: IFTRUE 32108
32106: GO 32126
32108: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32109: LD_ADDR_VAR 0 3
32113: PUSH
32114: LD_INT 4
32116: PUSH
32117: LD_INT 5
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: ST_TO_ADDR
32124: GO 32795
32126: LD_INT 10
32128: DOUBLE
32129: EQUAL
32130: IFTRUE 32134
32132: GO 32152
32134: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32135: LD_ADDR_VAR 0 3
32139: PUSH
32140: LD_INT 4
32142: PUSH
32143: LD_INT 5
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: ST_TO_ADDR
32150: GO 32795
32152: LD_INT 22
32154: DOUBLE
32155: EQUAL
32156: IFTRUE 32160
32158: GO 32186
32160: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32161: LD_ADDR_VAR 0 3
32165: PUSH
32166: LD_INT 11
32168: PUSH
32169: LD_INT 12
32171: PUSH
32172: LD_INT 13
32174: PUSH
32175: LD_INT 14
32177: PUSH
32178: EMPTY
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: ST_TO_ADDR
32184: GO 32795
32186: LD_INT 23
32188: DOUBLE
32189: EQUAL
32190: IFTRUE 32194
32192: GO 32220
32194: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32195: LD_ADDR_VAR 0 3
32199: PUSH
32200: LD_INT 11
32202: PUSH
32203: LD_INT 12
32205: PUSH
32206: LD_INT 13
32208: PUSH
32209: LD_INT 14
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: ST_TO_ADDR
32218: GO 32795
32220: LD_INT 24
32222: DOUBLE
32223: EQUAL
32224: IFTRUE 32228
32226: GO 32254
32228: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32229: LD_ADDR_VAR 0 3
32233: PUSH
32234: LD_INT 11
32236: PUSH
32237: LD_INT 12
32239: PUSH
32240: LD_INT 13
32242: PUSH
32243: LD_INT 14
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: ST_TO_ADDR
32252: GO 32795
32254: LD_INT 30
32256: DOUBLE
32257: EQUAL
32258: IFTRUE 32262
32260: GO 32288
32262: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32263: LD_ADDR_VAR 0 3
32267: PUSH
32268: LD_INT 11
32270: PUSH
32271: LD_INT 12
32273: PUSH
32274: LD_INT 13
32276: PUSH
32277: LD_INT 14
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: ST_TO_ADDR
32286: GO 32795
32288: LD_INT 25
32290: DOUBLE
32291: EQUAL
32292: IFTRUE 32296
32294: GO 32314
32296: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32297: LD_ADDR_VAR 0 3
32301: PUSH
32302: LD_INT 13
32304: PUSH
32305: LD_INT 14
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: ST_TO_ADDR
32312: GO 32795
32314: LD_INT 27
32316: DOUBLE
32317: EQUAL
32318: IFTRUE 32322
32320: GO 32340
32322: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32323: LD_ADDR_VAR 0 3
32327: PUSH
32328: LD_INT 13
32330: PUSH
32331: LD_INT 14
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: ST_TO_ADDR
32338: GO 32795
32340: LD_INT 92
32342: DOUBLE
32343: EQUAL
32344: IFTRUE 32348
32346: GO 32374
32348: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32349: LD_ADDR_VAR 0 3
32353: PUSH
32354: LD_INT 11
32356: PUSH
32357: LD_INT 12
32359: PUSH
32360: LD_INT 13
32362: PUSH
32363: LD_INT 14
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: ST_TO_ADDR
32372: GO 32795
32374: LD_INT 28
32376: DOUBLE
32377: EQUAL
32378: IFTRUE 32382
32380: GO 32400
32382: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32383: LD_ADDR_VAR 0 3
32387: PUSH
32388: LD_INT 13
32390: PUSH
32391: LD_INT 14
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: ST_TO_ADDR
32398: GO 32795
32400: LD_INT 29
32402: DOUBLE
32403: EQUAL
32404: IFTRUE 32408
32406: GO 32426
32408: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32409: LD_ADDR_VAR 0 3
32413: PUSH
32414: LD_INT 13
32416: PUSH
32417: LD_INT 14
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: ST_TO_ADDR
32424: GO 32795
32426: LD_INT 31
32428: DOUBLE
32429: EQUAL
32430: IFTRUE 32434
32432: GO 32452
32434: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32435: LD_ADDR_VAR 0 3
32439: PUSH
32440: LD_INT 13
32442: PUSH
32443: LD_INT 14
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: ST_TO_ADDR
32450: GO 32795
32452: LD_INT 26
32454: DOUBLE
32455: EQUAL
32456: IFTRUE 32460
32458: GO 32478
32460: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32461: LD_ADDR_VAR 0 3
32465: PUSH
32466: LD_INT 13
32468: PUSH
32469: LD_INT 14
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: ST_TO_ADDR
32476: GO 32795
32478: LD_INT 42
32480: DOUBLE
32481: EQUAL
32482: IFTRUE 32486
32484: GO 32512
32486: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32487: LD_ADDR_VAR 0 3
32491: PUSH
32492: LD_INT 21
32494: PUSH
32495: LD_INT 22
32497: PUSH
32498: LD_INT 23
32500: PUSH
32501: LD_INT 24
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: ST_TO_ADDR
32510: GO 32795
32512: LD_INT 43
32514: DOUBLE
32515: EQUAL
32516: IFTRUE 32520
32518: GO 32546
32520: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32521: LD_ADDR_VAR 0 3
32525: PUSH
32526: LD_INT 21
32528: PUSH
32529: LD_INT 22
32531: PUSH
32532: LD_INT 23
32534: PUSH
32535: LD_INT 24
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: ST_TO_ADDR
32544: GO 32795
32546: LD_INT 44
32548: DOUBLE
32549: EQUAL
32550: IFTRUE 32554
32552: GO 32580
32554: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32555: LD_ADDR_VAR 0 3
32559: PUSH
32560: LD_INT 21
32562: PUSH
32563: LD_INT 22
32565: PUSH
32566: LD_INT 23
32568: PUSH
32569: LD_INT 24
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: ST_TO_ADDR
32578: GO 32795
32580: LD_INT 45
32582: DOUBLE
32583: EQUAL
32584: IFTRUE 32588
32586: GO 32614
32588: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32589: LD_ADDR_VAR 0 3
32593: PUSH
32594: LD_INT 21
32596: PUSH
32597: LD_INT 22
32599: PUSH
32600: LD_INT 23
32602: PUSH
32603: LD_INT 24
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: ST_TO_ADDR
32612: GO 32795
32614: LD_INT 49
32616: DOUBLE
32617: EQUAL
32618: IFTRUE 32622
32620: GO 32648
32622: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32623: LD_ADDR_VAR 0 3
32627: PUSH
32628: LD_INT 21
32630: PUSH
32631: LD_INT 22
32633: PUSH
32634: LD_INT 23
32636: PUSH
32637: LD_INT 24
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: ST_TO_ADDR
32646: GO 32795
32648: LD_INT 51
32650: DOUBLE
32651: EQUAL
32652: IFTRUE 32656
32654: GO 32682
32656: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32657: LD_ADDR_VAR 0 3
32661: PUSH
32662: LD_INT 21
32664: PUSH
32665: LD_INT 22
32667: PUSH
32668: LD_INT 23
32670: PUSH
32671: LD_INT 24
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: ST_TO_ADDR
32680: GO 32795
32682: LD_INT 52
32684: DOUBLE
32685: EQUAL
32686: IFTRUE 32690
32688: GO 32716
32690: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32691: LD_ADDR_VAR 0 3
32695: PUSH
32696: LD_INT 21
32698: PUSH
32699: LD_INT 22
32701: PUSH
32702: LD_INT 23
32704: PUSH
32705: LD_INT 24
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: ST_TO_ADDR
32714: GO 32795
32716: LD_INT 53
32718: DOUBLE
32719: EQUAL
32720: IFTRUE 32724
32722: GO 32742
32724: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32725: LD_ADDR_VAR 0 3
32729: PUSH
32730: LD_INT 23
32732: PUSH
32733: LD_INT 24
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: ST_TO_ADDR
32740: GO 32795
32742: LD_INT 46
32744: DOUBLE
32745: EQUAL
32746: IFTRUE 32750
32748: GO 32768
32750: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32751: LD_ADDR_VAR 0 3
32755: PUSH
32756: LD_INT 23
32758: PUSH
32759: LD_INT 24
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: ST_TO_ADDR
32766: GO 32795
32768: LD_INT 47
32770: DOUBLE
32771: EQUAL
32772: IFTRUE 32776
32774: GO 32794
32776: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32777: LD_ADDR_VAR 0 3
32781: PUSH
32782: LD_INT 23
32784: PUSH
32785: LD_INT 24
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: ST_TO_ADDR
32792: GO 32795
32794: POP
// result := ( chassis in result ) ;
32795: LD_ADDR_VAR 0 3
32799: PUSH
32800: LD_VAR 0 1
32804: PUSH
32805: LD_VAR 0 3
32809: IN
32810: ST_TO_ADDR
// end ;
32811: LD_VAR 0 3
32815: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32816: LD_INT 0
32818: PPUSH
32819: PPUSH
32820: PPUSH
32821: PPUSH
32822: PPUSH
32823: PPUSH
32824: PPUSH
// result := array ;
32825: LD_ADDR_VAR 0 5
32829: PUSH
32830: LD_VAR 0 1
32834: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32835: LD_VAR 0 1
32839: NOT
32840: PUSH
32841: LD_VAR 0 2
32845: NOT
32846: OR
32847: PUSH
32848: LD_VAR 0 3
32852: NOT
32853: OR
32854: PUSH
32855: LD_VAR 0 2
32859: PUSH
32860: LD_VAR 0 1
32864: GREATER
32865: OR
32866: PUSH
32867: LD_VAR 0 3
32871: PUSH
32872: LD_VAR 0 1
32876: GREATER
32877: OR
32878: IFFALSE 32882
// exit ;
32880: GO 33178
// if direction then
32882: LD_VAR 0 4
32886: IFFALSE 32950
// begin d := 1 ;
32888: LD_ADDR_VAR 0 9
32892: PUSH
32893: LD_INT 1
32895: ST_TO_ADDR
// if i_from > i_to then
32896: LD_VAR 0 2
32900: PUSH
32901: LD_VAR 0 3
32905: GREATER
32906: IFFALSE 32932
// length := ( array - i_from ) + i_to else
32908: LD_ADDR_VAR 0 11
32912: PUSH
32913: LD_VAR 0 1
32917: PUSH
32918: LD_VAR 0 2
32922: MINUS
32923: PUSH
32924: LD_VAR 0 3
32928: PLUS
32929: ST_TO_ADDR
32930: GO 32948
// length := i_to - i_from ;
32932: LD_ADDR_VAR 0 11
32936: PUSH
32937: LD_VAR 0 3
32941: PUSH
32942: LD_VAR 0 2
32946: MINUS
32947: ST_TO_ADDR
// end else
32948: GO 33011
// begin d := - 1 ;
32950: LD_ADDR_VAR 0 9
32954: PUSH
32955: LD_INT 1
32957: NEG
32958: ST_TO_ADDR
// if i_from > i_to then
32959: LD_VAR 0 2
32963: PUSH
32964: LD_VAR 0 3
32968: GREATER
32969: IFFALSE 32989
// length := i_from - i_to else
32971: LD_ADDR_VAR 0 11
32975: PUSH
32976: LD_VAR 0 2
32980: PUSH
32981: LD_VAR 0 3
32985: MINUS
32986: ST_TO_ADDR
32987: GO 33011
// length := ( array - i_to ) + i_from ;
32989: LD_ADDR_VAR 0 11
32993: PUSH
32994: LD_VAR 0 1
32998: PUSH
32999: LD_VAR 0 3
33003: MINUS
33004: PUSH
33005: LD_VAR 0 2
33009: PLUS
33010: ST_TO_ADDR
// end ; if not length then
33011: LD_VAR 0 11
33015: NOT
33016: IFFALSE 33020
// exit ;
33018: GO 33178
// tmp := array ;
33020: LD_ADDR_VAR 0 10
33024: PUSH
33025: LD_VAR 0 1
33029: ST_TO_ADDR
// for i = 1 to length do
33030: LD_ADDR_VAR 0 6
33034: PUSH
33035: DOUBLE
33036: LD_INT 1
33038: DEC
33039: ST_TO_ADDR
33040: LD_VAR 0 11
33044: PUSH
33045: FOR_TO
33046: IFFALSE 33166
// begin for j = 1 to array do
33048: LD_ADDR_VAR 0 7
33052: PUSH
33053: DOUBLE
33054: LD_INT 1
33056: DEC
33057: ST_TO_ADDR
33058: LD_VAR 0 1
33062: PUSH
33063: FOR_TO
33064: IFFALSE 33152
// begin k := j + d ;
33066: LD_ADDR_VAR 0 8
33070: PUSH
33071: LD_VAR 0 7
33075: PUSH
33076: LD_VAR 0 9
33080: PLUS
33081: ST_TO_ADDR
// if k > array then
33082: LD_VAR 0 8
33086: PUSH
33087: LD_VAR 0 1
33091: GREATER
33092: IFFALSE 33102
// k := 1 ;
33094: LD_ADDR_VAR 0 8
33098: PUSH
33099: LD_INT 1
33101: ST_TO_ADDR
// if not k then
33102: LD_VAR 0 8
33106: NOT
33107: IFFALSE 33119
// k := array ;
33109: LD_ADDR_VAR 0 8
33113: PUSH
33114: LD_VAR 0 1
33118: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33119: LD_ADDR_VAR 0 10
33123: PUSH
33124: LD_VAR 0 10
33128: PPUSH
33129: LD_VAR 0 8
33133: PPUSH
33134: LD_VAR 0 1
33138: PUSH
33139: LD_VAR 0 7
33143: ARRAY
33144: PPUSH
33145: CALL_OW 1
33149: ST_TO_ADDR
// end ;
33150: GO 33063
33152: POP
33153: POP
// array := tmp ;
33154: LD_ADDR_VAR 0 1
33158: PUSH
33159: LD_VAR 0 10
33163: ST_TO_ADDR
// end ;
33164: GO 33045
33166: POP
33167: POP
// result := array ;
33168: LD_ADDR_VAR 0 5
33172: PUSH
33173: LD_VAR 0 1
33177: ST_TO_ADDR
// end ;
33178: LD_VAR 0 5
33182: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33183: LD_INT 0
33185: PPUSH
33186: PPUSH
// result := 0 ;
33187: LD_ADDR_VAR 0 3
33191: PUSH
33192: LD_INT 0
33194: ST_TO_ADDR
// if not array or not value in array then
33195: LD_VAR 0 1
33199: NOT
33200: PUSH
33201: LD_VAR 0 2
33205: PUSH
33206: LD_VAR 0 1
33210: IN
33211: NOT
33212: OR
33213: IFFALSE 33217
// exit ;
33215: GO 33271
// for i = 1 to array do
33217: LD_ADDR_VAR 0 4
33221: PUSH
33222: DOUBLE
33223: LD_INT 1
33225: DEC
33226: ST_TO_ADDR
33227: LD_VAR 0 1
33231: PUSH
33232: FOR_TO
33233: IFFALSE 33269
// if value = array [ i ] then
33235: LD_VAR 0 2
33239: PUSH
33240: LD_VAR 0 1
33244: PUSH
33245: LD_VAR 0 4
33249: ARRAY
33250: EQUAL
33251: IFFALSE 33267
// begin result := i ;
33253: LD_ADDR_VAR 0 3
33257: PUSH
33258: LD_VAR 0 4
33262: ST_TO_ADDR
// exit ;
33263: POP
33264: POP
33265: GO 33271
// end ;
33267: GO 33232
33269: POP
33270: POP
// end ;
33271: LD_VAR 0 3
33275: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33276: LD_INT 0
33278: PPUSH
// vc_chassis := chassis ;
33279: LD_ADDR_OWVAR 37
33283: PUSH
33284: LD_VAR 0 1
33288: ST_TO_ADDR
// vc_engine := engine ;
33289: LD_ADDR_OWVAR 39
33293: PUSH
33294: LD_VAR 0 2
33298: ST_TO_ADDR
// vc_control := control ;
33299: LD_ADDR_OWVAR 38
33303: PUSH
33304: LD_VAR 0 3
33308: ST_TO_ADDR
// vc_weapon := weapon ;
33309: LD_ADDR_OWVAR 40
33313: PUSH
33314: LD_VAR 0 4
33318: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33319: LD_ADDR_OWVAR 41
33323: PUSH
33324: LD_VAR 0 5
33328: ST_TO_ADDR
// end ;
33329: LD_VAR 0 6
33333: RET
// export function WantPlant ( unit ) ; var task ; begin
33334: LD_INT 0
33336: PPUSH
33337: PPUSH
// result := false ;
33338: LD_ADDR_VAR 0 2
33342: PUSH
33343: LD_INT 0
33345: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33346: LD_ADDR_VAR 0 3
33350: PUSH
33351: LD_VAR 0 1
33355: PPUSH
33356: CALL_OW 437
33360: ST_TO_ADDR
// if task then
33361: LD_VAR 0 3
33365: IFFALSE 33393
// if task [ 1 ] [ 1 ] = p then
33367: LD_VAR 0 3
33371: PUSH
33372: LD_INT 1
33374: ARRAY
33375: PUSH
33376: LD_INT 1
33378: ARRAY
33379: PUSH
33380: LD_STRING p
33382: EQUAL
33383: IFFALSE 33393
// result := true ;
33385: LD_ADDR_VAR 0 2
33389: PUSH
33390: LD_INT 1
33392: ST_TO_ADDR
// end ;
33393: LD_VAR 0 2
33397: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33398: LD_INT 0
33400: PPUSH
33401: PPUSH
33402: PPUSH
33403: PPUSH
// if pos < 1 then
33404: LD_VAR 0 2
33408: PUSH
33409: LD_INT 1
33411: LESS
33412: IFFALSE 33416
// exit ;
33414: GO 33719
// if pos = 1 then
33416: LD_VAR 0 2
33420: PUSH
33421: LD_INT 1
33423: EQUAL
33424: IFFALSE 33457
// result := Replace ( arr , pos [ 1 ] , value ) else
33426: LD_ADDR_VAR 0 4
33430: PUSH
33431: LD_VAR 0 1
33435: PPUSH
33436: LD_VAR 0 2
33440: PUSH
33441: LD_INT 1
33443: ARRAY
33444: PPUSH
33445: LD_VAR 0 3
33449: PPUSH
33450: CALL_OW 1
33454: ST_TO_ADDR
33455: GO 33719
// begin tmp := arr ;
33457: LD_ADDR_VAR 0 6
33461: PUSH
33462: LD_VAR 0 1
33466: ST_TO_ADDR
// s_arr := [ tmp ] ;
33467: LD_ADDR_VAR 0 7
33471: PUSH
33472: LD_VAR 0 6
33476: PUSH
33477: EMPTY
33478: LIST
33479: ST_TO_ADDR
// for i = 1 to pos - 1 do
33480: LD_ADDR_VAR 0 5
33484: PUSH
33485: DOUBLE
33486: LD_INT 1
33488: DEC
33489: ST_TO_ADDR
33490: LD_VAR 0 2
33494: PUSH
33495: LD_INT 1
33497: MINUS
33498: PUSH
33499: FOR_TO
33500: IFFALSE 33545
// begin tmp := tmp [ pos [ i ] ] ;
33502: LD_ADDR_VAR 0 6
33506: PUSH
33507: LD_VAR 0 6
33511: PUSH
33512: LD_VAR 0 2
33516: PUSH
33517: LD_VAR 0 5
33521: ARRAY
33522: ARRAY
33523: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33524: LD_ADDR_VAR 0 7
33528: PUSH
33529: LD_VAR 0 7
33533: PUSH
33534: LD_VAR 0 6
33538: PUSH
33539: EMPTY
33540: LIST
33541: ADD
33542: ST_TO_ADDR
// end ;
33543: GO 33499
33545: POP
33546: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33547: LD_ADDR_VAR 0 6
33551: PUSH
33552: LD_VAR 0 6
33556: PPUSH
33557: LD_VAR 0 2
33561: PUSH
33562: LD_VAR 0 2
33566: ARRAY
33567: PPUSH
33568: LD_VAR 0 3
33572: PPUSH
33573: CALL_OW 1
33577: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33578: LD_ADDR_VAR 0 7
33582: PUSH
33583: LD_VAR 0 7
33587: PPUSH
33588: LD_VAR 0 7
33592: PPUSH
33593: LD_VAR 0 6
33597: PPUSH
33598: CALL_OW 1
33602: ST_TO_ADDR
// for i = s_arr downto 2 do
33603: LD_ADDR_VAR 0 5
33607: PUSH
33608: DOUBLE
33609: LD_VAR 0 7
33613: INC
33614: ST_TO_ADDR
33615: LD_INT 2
33617: PUSH
33618: FOR_DOWNTO
33619: IFFALSE 33703
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33621: LD_ADDR_VAR 0 6
33625: PUSH
33626: LD_VAR 0 7
33630: PUSH
33631: LD_VAR 0 5
33635: PUSH
33636: LD_INT 1
33638: MINUS
33639: ARRAY
33640: PPUSH
33641: LD_VAR 0 2
33645: PUSH
33646: LD_VAR 0 5
33650: PUSH
33651: LD_INT 1
33653: MINUS
33654: ARRAY
33655: PPUSH
33656: LD_VAR 0 7
33660: PUSH
33661: LD_VAR 0 5
33665: ARRAY
33666: PPUSH
33667: CALL_OW 1
33671: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33672: LD_ADDR_VAR 0 7
33676: PUSH
33677: LD_VAR 0 7
33681: PPUSH
33682: LD_VAR 0 5
33686: PUSH
33687: LD_INT 1
33689: MINUS
33690: PPUSH
33691: LD_VAR 0 6
33695: PPUSH
33696: CALL_OW 1
33700: ST_TO_ADDR
// end ;
33701: GO 33618
33703: POP
33704: POP
// result := s_arr [ 1 ] ;
33705: LD_ADDR_VAR 0 4
33709: PUSH
33710: LD_VAR 0 7
33714: PUSH
33715: LD_INT 1
33717: ARRAY
33718: ST_TO_ADDR
// end ; end ;
33719: LD_VAR 0 4
33723: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33724: LD_INT 0
33726: PPUSH
33727: PPUSH
// if not list then
33728: LD_VAR 0 1
33732: NOT
33733: IFFALSE 33737
// exit ;
33735: GO 33828
// i := list [ pos1 ] ;
33737: LD_ADDR_VAR 0 5
33741: PUSH
33742: LD_VAR 0 1
33746: PUSH
33747: LD_VAR 0 2
33751: ARRAY
33752: ST_TO_ADDR
// if not i then
33753: LD_VAR 0 5
33757: NOT
33758: IFFALSE 33762
// exit ;
33760: GO 33828
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33762: LD_ADDR_VAR 0 1
33766: PUSH
33767: LD_VAR 0 1
33771: PPUSH
33772: LD_VAR 0 2
33776: PPUSH
33777: LD_VAR 0 1
33781: PUSH
33782: LD_VAR 0 3
33786: ARRAY
33787: PPUSH
33788: CALL_OW 1
33792: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33793: LD_ADDR_VAR 0 1
33797: PUSH
33798: LD_VAR 0 1
33802: PPUSH
33803: LD_VAR 0 3
33807: PPUSH
33808: LD_VAR 0 5
33812: PPUSH
33813: CALL_OW 1
33817: ST_TO_ADDR
// result := list ;
33818: LD_ADDR_VAR 0 4
33822: PUSH
33823: LD_VAR 0 1
33827: ST_TO_ADDR
// end ;
33828: LD_VAR 0 4
33832: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33833: LD_INT 0
33835: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33836: LD_ADDR_VAR 0 5
33840: PUSH
33841: LD_VAR 0 1
33845: PPUSH
33846: CALL_OW 250
33850: PPUSH
33851: LD_VAR 0 1
33855: PPUSH
33856: CALL_OW 251
33860: PPUSH
33861: LD_VAR 0 2
33865: PPUSH
33866: LD_VAR 0 3
33870: PPUSH
33871: LD_VAR 0 4
33875: PPUSH
33876: CALL 33886 0 5
33880: ST_TO_ADDR
// end ;
33881: LD_VAR 0 5
33885: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33886: LD_INT 0
33888: PPUSH
33889: PPUSH
33890: PPUSH
33891: PPUSH
// if not list then
33892: LD_VAR 0 3
33896: NOT
33897: IFFALSE 33901
// exit ;
33899: GO 34289
// result := [ ] ;
33901: LD_ADDR_VAR 0 6
33905: PUSH
33906: EMPTY
33907: ST_TO_ADDR
// for i in list do
33908: LD_ADDR_VAR 0 7
33912: PUSH
33913: LD_VAR 0 3
33917: PUSH
33918: FOR_IN
33919: IFFALSE 34121
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33921: LD_ADDR_VAR 0 9
33925: PUSH
33926: LD_VAR 0 7
33930: PPUSH
33931: LD_VAR 0 1
33935: PPUSH
33936: LD_VAR 0 2
33940: PPUSH
33941: CALL_OW 297
33945: ST_TO_ADDR
// if not result then
33946: LD_VAR 0 6
33950: NOT
33951: IFFALSE 33977
// result := [ [ i , tmp ] ] else
33953: LD_ADDR_VAR 0 6
33957: PUSH
33958: LD_VAR 0 7
33962: PUSH
33963: LD_VAR 0 9
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: EMPTY
33973: LIST
33974: ST_TO_ADDR
33975: GO 34119
// begin if result [ result ] [ 2 ] < tmp then
33977: LD_VAR 0 6
33981: PUSH
33982: LD_VAR 0 6
33986: ARRAY
33987: PUSH
33988: LD_INT 2
33990: ARRAY
33991: PUSH
33992: LD_VAR 0 9
33996: LESS
33997: IFFALSE 34039
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33999: LD_ADDR_VAR 0 6
34003: PUSH
34004: LD_VAR 0 6
34008: PPUSH
34009: LD_VAR 0 6
34013: PUSH
34014: LD_INT 1
34016: PLUS
34017: PPUSH
34018: LD_VAR 0 7
34022: PUSH
34023: LD_VAR 0 9
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PPUSH
34032: CALL_OW 2
34036: ST_TO_ADDR
34037: GO 34119
// for j = 1 to result do
34039: LD_ADDR_VAR 0 8
34043: PUSH
34044: DOUBLE
34045: LD_INT 1
34047: DEC
34048: ST_TO_ADDR
34049: LD_VAR 0 6
34053: PUSH
34054: FOR_TO
34055: IFFALSE 34117
// begin if tmp < result [ j ] [ 2 ] then
34057: LD_VAR 0 9
34061: PUSH
34062: LD_VAR 0 6
34066: PUSH
34067: LD_VAR 0 8
34071: ARRAY
34072: PUSH
34073: LD_INT 2
34075: ARRAY
34076: LESS
34077: IFFALSE 34115
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34079: LD_ADDR_VAR 0 6
34083: PUSH
34084: LD_VAR 0 6
34088: PPUSH
34089: LD_VAR 0 8
34093: PPUSH
34094: LD_VAR 0 7
34098: PUSH
34099: LD_VAR 0 9
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PPUSH
34108: CALL_OW 2
34112: ST_TO_ADDR
// break ;
34113: GO 34117
// end ; end ;
34115: GO 34054
34117: POP
34118: POP
// end ; end ;
34119: GO 33918
34121: POP
34122: POP
// if result and not asc then
34123: LD_VAR 0 6
34127: PUSH
34128: LD_VAR 0 4
34132: NOT
34133: AND
34134: IFFALSE 34209
// begin tmp := result ;
34136: LD_ADDR_VAR 0 9
34140: PUSH
34141: LD_VAR 0 6
34145: ST_TO_ADDR
// for i = tmp downto 1 do
34146: LD_ADDR_VAR 0 7
34150: PUSH
34151: DOUBLE
34152: LD_VAR 0 9
34156: INC
34157: ST_TO_ADDR
34158: LD_INT 1
34160: PUSH
34161: FOR_DOWNTO
34162: IFFALSE 34207
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34164: LD_ADDR_VAR 0 6
34168: PUSH
34169: LD_VAR 0 6
34173: PPUSH
34174: LD_VAR 0 9
34178: PUSH
34179: LD_VAR 0 7
34183: MINUS
34184: PUSH
34185: LD_INT 1
34187: PLUS
34188: PPUSH
34189: LD_VAR 0 9
34193: PUSH
34194: LD_VAR 0 7
34198: ARRAY
34199: PPUSH
34200: CALL_OW 1
34204: ST_TO_ADDR
34205: GO 34161
34207: POP
34208: POP
// end ; tmp := [ ] ;
34209: LD_ADDR_VAR 0 9
34213: PUSH
34214: EMPTY
34215: ST_TO_ADDR
// if mode then
34216: LD_VAR 0 5
34220: IFFALSE 34289
// begin for i = 1 to result do
34222: LD_ADDR_VAR 0 7
34226: PUSH
34227: DOUBLE
34228: LD_INT 1
34230: DEC
34231: ST_TO_ADDR
34232: LD_VAR 0 6
34236: PUSH
34237: FOR_TO
34238: IFFALSE 34277
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34240: LD_ADDR_VAR 0 9
34244: PUSH
34245: LD_VAR 0 9
34249: PPUSH
34250: LD_VAR 0 7
34254: PPUSH
34255: LD_VAR 0 6
34259: PUSH
34260: LD_VAR 0 7
34264: ARRAY
34265: PUSH
34266: LD_INT 1
34268: ARRAY
34269: PPUSH
34270: CALL_OW 1
34274: ST_TO_ADDR
34275: GO 34237
34277: POP
34278: POP
// result := tmp ;
34279: LD_ADDR_VAR 0 6
34283: PUSH
34284: LD_VAR 0 9
34288: ST_TO_ADDR
// end ; end ;
34289: LD_VAR 0 6
34293: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34294: LD_INT 0
34296: PPUSH
34297: PPUSH
34298: PPUSH
34299: PPUSH
34300: PPUSH
34301: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34302: LD_ADDR_VAR 0 5
34306: PUSH
34307: LD_INT 0
34309: PUSH
34310: LD_INT 0
34312: PUSH
34313: LD_INT 0
34315: PUSH
34316: EMPTY
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: ST_TO_ADDR
// if not x or not y then
34324: LD_VAR 0 2
34328: NOT
34329: PUSH
34330: LD_VAR 0 3
34334: NOT
34335: OR
34336: IFFALSE 34340
// exit ;
34338: GO 35990
// if not range then
34340: LD_VAR 0 4
34344: NOT
34345: IFFALSE 34355
// range := 10 ;
34347: LD_ADDR_VAR 0 4
34351: PUSH
34352: LD_INT 10
34354: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34355: LD_ADDR_VAR 0 8
34359: PUSH
34360: LD_INT 81
34362: PUSH
34363: LD_VAR 0 1
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: PUSH
34372: LD_INT 92
34374: PUSH
34375: LD_VAR 0 2
34379: PUSH
34380: LD_VAR 0 3
34384: PUSH
34385: LD_VAR 0 4
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 3
34398: PUSH
34399: LD_INT 21
34401: PUSH
34402: LD_INT 3
34404: PUSH
34405: EMPTY
34406: LIST
34407: LIST
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: LIST
34417: PPUSH
34418: CALL_OW 69
34422: ST_TO_ADDR
// if not tmp then
34423: LD_VAR 0 8
34427: NOT
34428: IFFALSE 34432
// exit ;
34430: GO 35990
// for i in tmp do
34432: LD_ADDR_VAR 0 6
34436: PUSH
34437: LD_VAR 0 8
34441: PUSH
34442: FOR_IN
34443: IFFALSE 35965
// begin points := [ 0 , 0 , 0 ] ;
34445: LD_ADDR_VAR 0 9
34449: PUSH
34450: LD_INT 0
34452: PUSH
34453: LD_INT 0
34455: PUSH
34456: LD_INT 0
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: LIST
34463: ST_TO_ADDR
// bpoints := 1 ;
34464: LD_ADDR_VAR 0 10
34468: PUSH
34469: LD_INT 1
34471: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34472: LD_VAR 0 6
34476: PPUSH
34477: CALL_OW 247
34481: PUSH
34482: LD_INT 1
34484: DOUBLE
34485: EQUAL
34486: IFTRUE 34490
34488: GO 35068
34490: POP
// begin if GetClass ( i ) = 1 then
34491: LD_VAR 0 6
34495: PPUSH
34496: CALL_OW 257
34500: PUSH
34501: LD_INT 1
34503: EQUAL
34504: IFFALSE 34525
// points := [ 10 , 5 , 3 ] ;
34506: LD_ADDR_VAR 0 9
34510: PUSH
34511: LD_INT 10
34513: PUSH
34514: LD_INT 5
34516: PUSH
34517: LD_INT 3
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: LIST
34524: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34525: LD_VAR 0 6
34529: PPUSH
34530: CALL_OW 257
34534: PUSH
34535: LD_INT 2
34537: PUSH
34538: LD_INT 3
34540: PUSH
34541: LD_INT 4
34543: PUSH
34544: EMPTY
34545: LIST
34546: LIST
34547: LIST
34548: IN
34549: IFFALSE 34570
// points := [ 3 , 2 , 1 ] ;
34551: LD_ADDR_VAR 0 9
34555: PUSH
34556: LD_INT 3
34558: PUSH
34559: LD_INT 2
34561: PUSH
34562: LD_INT 1
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: LIST
34569: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34570: LD_VAR 0 6
34574: PPUSH
34575: CALL_OW 257
34579: PUSH
34580: LD_INT 5
34582: EQUAL
34583: IFFALSE 34604
// points := [ 130 , 5 , 2 ] ;
34585: LD_ADDR_VAR 0 9
34589: PUSH
34590: LD_INT 130
34592: PUSH
34593: LD_INT 5
34595: PUSH
34596: LD_INT 2
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: LIST
34603: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34604: LD_VAR 0 6
34608: PPUSH
34609: CALL_OW 257
34613: PUSH
34614: LD_INT 8
34616: EQUAL
34617: IFFALSE 34638
// points := [ 35 , 35 , 30 ] ;
34619: LD_ADDR_VAR 0 9
34623: PUSH
34624: LD_INT 35
34626: PUSH
34627: LD_INT 35
34629: PUSH
34630: LD_INT 30
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: LIST
34637: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34638: LD_VAR 0 6
34642: PPUSH
34643: CALL_OW 257
34647: PUSH
34648: LD_INT 9
34650: EQUAL
34651: IFFALSE 34672
// points := [ 20 , 55 , 40 ] ;
34653: LD_ADDR_VAR 0 9
34657: PUSH
34658: LD_INT 20
34660: PUSH
34661: LD_INT 55
34663: PUSH
34664: LD_INT 40
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: LIST
34671: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34672: LD_VAR 0 6
34676: PPUSH
34677: CALL_OW 257
34681: PUSH
34682: LD_INT 12
34684: PUSH
34685: LD_INT 16
34687: PUSH
34688: EMPTY
34689: LIST
34690: LIST
34691: IN
34692: IFFALSE 34713
// points := [ 5 , 3 , 2 ] ;
34694: LD_ADDR_VAR 0 9
34698: PUSH
34699: LD_INT 5
34701: PUSH
34702: LD_INT 3
34704: PUSH
34705: LD_INT 2
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: LIST
34712: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34713: LD_VAR 0 6
34717: PPUSH
34718: CALL_OW 257
34722: PUSH
34723: LD_INT 17
34725: EQUAL
34726: IFFALSE 34747
// points := [ 100 , 50 , 75 ] ;
34728: LD_ADDR_VAR 0 9
34732: PUSH
34733: LD_INT 100
34735: PUSH
34736: LD_INT 50
34738: PUSH
34739: LD_INT 75
34741: PUSH
34742: EMPTY
34743: LIST
34744: LIST
34745: LIST
34746: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34747: LD_VAR 0 6
34751: PPUSH
34752: CALL_OW 257
34756: PUSH
34757: LD_INT 15
34759: EQUAL
34760: IFFALSE 34781
// points := [ 10 , 5 , 3 ] ;
34762: LD_ADDR_VAR 0 9
34766: PUSH
34767: LD_INT 10
34769: PUSH
34770: LD_INT 5
34772: PUSH
34773: LD_INT 3
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: LIST
34780: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34781: LD_VAR 0 6
34785: PPUSH
34786: CALL_OW 257
34790: PUSH
34791: LD_INT 14
34793: EQUAL
34794: IFFALSE 34815
// points := [ 10 , 0 , 0 ] ;
34796: LD_ADDR_VAR 0 9
34800: PUSH
34801: LD_INT 10
34803: PUSH
34804: LD_INT 0
34806: PUSH
34807: LD_INT 0
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: LIST
34814: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34815: LD_VAR 0 6
34819: PPUSH
34820: CALL_OW 257
34824: PUSH
34825: LD_INT 11
34827: EQUAL
34828: IFFALSE 34849
// points := [ 30 , 10 , 5 ] ;
34830: LD_ADDR_VAR 0 9
34834: PUSH
34835: LD_INT 30
34837: PUSH
34838: LD_INT 10
34840: PUSH
34841: LD_INT 5
34843: PUSH
34844: EMPTY
34845: LIST
34846: LIST
34847: LIST
34848: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34849: LD_VAR 0 1
34853: PPUSH
34854: LD_INT 5
34856: PPUSH
34857: CALL_OW 321
34861: PUSH
34862: LD_INT 2
34864: EQUAL
34865: IFFALSE 34882
// bpoints := bpoints * 1.8 ;
34867: LD_ADDR_VAR 0 10
34871: PUSH
34872: LD_VAR 0 10
34876: PUSH
34877: LD_REAL  1.80000000000000E+0000
34880: MUL
34881: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34882: LD_VAR 0 6
34886: PPUSH
34887: CALL_OW 257
34891: PUSH
34892: LD_INT 1
34894: PUSH
34895: LD_INT 2
34897: PUSH
34898: LD_INT 3
34900: PUSH
34901: LD_INT 4
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: IN
34910: PUSH
34911: LD_VAR 0 1
34915: PPUSH
34916: LD_INT 51
34918: PPUSH
34919: CALL_OW 321
34923: PUSH
34924: LD_INT 2
34926: EQUAL
34927: AND
34928: IFFALSE 34945
// bpoints := bpoints * 1.2 ;
34930: LD_ADDR_VAR 0 10
34934: PUSH
34935: LD_VAR 0 10
34939: PUSH
34940: LD_REAL  1.20000000000000E+0000
34943: MUL
34944: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34945: LD_VAR 0 6
34949: PPUSH
34950: CALL_OW 257
34954: PUSH
34955: LD_INT 5
34957: PUSH
34958: LD_INT 7
34960: PUSH
34961: LD_INT 9
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: LIST
34968: IN
34969: PUSH
34970: LD_VAR 0 1
34974: PPUSH
34975: LD_INT 52
34977: PPUSH
34978: CALL_OW 321
34982: PUSH
34983: LD_INT 2
34985: EQUAL
34986: AND
34987: IFFALSE 35004
// bpoints := bpoints * 1.5 ;
34989: LD_ADDR_VAR 0 10
34993: PUSH
34994: LD_VAR 0 10
34998: PUSH
34999: LD_REAL  1.50000000000000E+0000
35002: MUL
35003: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35004: LD_VAR 0 1
35008: PPUSH
35009: LD_INT 66
35011: PPUSH
35012: CALL_OW 321
35016: PUSH
35017: LD_INT 2
35019: EQUAL
35020: IFFALSE 35037
// bpoints := bpoints * 1.1 ;
35022: LD_ADDR_VAR 0 10
35026: PUSH
35027: LD_VAR 0 10
35031: PUSH
35032: LD_REAL  1.10000000000000E+0000
35035: MUL
35036: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35037: LD_ADDR_VAR 0 10
35041: PUSH
35042: LD_VAR 0 10
35046: PUSH
35047: LD_VAR 0 6
35051: PPUSH
35052: LD_INT 1
35054: PPUSH
35055: CALL_OW 259
35059: PUSH
35060: LD_REAL  1.15000000000000E+0000
35063: MUL
35064: MUL
35065: ST_TO_ADDR
// end ; unit_vehicle :
35066: GO 35894
35068: LD_INT 2
35070: DOUBLE
35071: EQUAL
35072: IFTRUE 35076
35074: GO 35882
35076: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35077: LD_VAR 0 6
35081: PPUSH
35082: CALL_OW 264
35086: PUSH
35087: LD_INT 2
35089: PUSH
35090: LD_INT 42
35092: PUSH
35093: LD_INT 24
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: LIST
35100: IN
35101: IFFALSE 35122
// points := [ 25 , 5 , 3 ] ;
35103: LD_ADDR_VAR 0 9
35107: PUSH
35108: LD_INT 25
35110: PUSH
35111: LD_INT 5
35113: PUSH
35114: LD_INT 3
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: LIST
35121: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35122: LD_VAR 0 6
35126: PPUSH
35127: CALL_OW 264
35131: PUSH
35132: LD_INT 4
35134: PUSH
35135: LD_INT 43
35137: PUSH
35138: LD_INT 25
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: LIST
35145: IN
35146: IFFALSE 35167
// points := [ 40 , 15 , 5 ] ;
35148: LD_ADDR_VAR 0 9
35152: PUSH
35153: LD_INT 40
35155: PUSH
35156: LD_INT 15
35158: PUSH
35159: LD_INT 5
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: LIST
35166: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35167: LD_VAR 0 6
35171: PPUSH
35172: CALL_OW 264
35176: PUSH
35177: LD_INT 3
35179: PUSH
35180: LD_INT 23
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: IN
35187: IFFALSE 35208
// points := [ 7 , 25 , 8 ] ;
35189: LD_ADDR_VAR 0 9
35193: PUSH
35194: LD_INT 7
35196: PUSH
35197: LD_INT 25
35199: PUSH
35200: LD_INT 8
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: LIST
35207: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35208: LD_VAR 0 6
35212: PPUSH
35213: CALL_OW 264
35217: PUSH
35218: LD_INT 5
35220: PUSH
35221: LD_INT 27
35223: PUSH
35224: LD_INT 44
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: LIST
35231: IN
35232: IFFALSE 35253
// points := [ 14 , 50 , 16 ] ;
35234: LD_ADDR_VAR 0 9
35238: PUSH
35239: LD_INT 14
35241: PUSH
35242: LD_INT 50
35244: PUSH
35245: LD_INT 16
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: LIST
35252: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35253: LD_VAR 0 6
35257: PPUSH
35258: CALL_OW 264
35262: PUSH
35263: LD_INT 6
35265: PUSH
35266: LD_INT 46
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: IN
35273: IFFALSE 35294
// points := [ 32 , 120 , 70 ] ;
35275: LD_ADDR_VAR 0 9
35279: PUSH
35280: LD_INT 32
35282: PUSH
35283: LD_INT 120
35285: PUSH
35286: LD_INT 70
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: LIST
35293: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35294: LD_VAR 0 6
35298: PPUSH
35299: CALL_OW 264
35303: PUSH
35304: LD_INT 7
35306: PUSH
35307: LD_INT 28
35309: PUSH
35310: LD_INT 45
35312: PUSH
35313: LD_INT 92
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: LIST
35320: LIST
35321: IN
35322: IFFALSE 35343
// points := [ 35 , 20 , 45 ] ;
35324: LD_ADDR_VAR 0 9
35328: PUSH
35329: LD_INT 35
35331: PUSH
35332: LD_INT 20
35334: PUSH
35335: LD_INT 45
35337: PUSH
35338: EMPTY
35339: LIST
35340: LIST
35341: LIST
35342: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35343: LD_VAR 0 6
35347: PPUSH
35348: CALL_OW 264
35352: PUSH
35353: LD_INT 47
35355: PUSH
35356: EMPTY
35357: LIST
35358: IN
35359: IFFALSE 35380
// points := [ 67 , 45 , 75 ] ;
35361: LD_ADDR_VAR 0 9
35365: PUSH
35366: LD_INT 67
35368: PUSH
35369: LD_INT 45
35371: PUSH
35372: LD_INT 75
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: LIST
35379: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35380: LD_VAR 0 6
35384: PPUSH
35385: CALL_OW 264
35389: PUSH
35390: LD_INT 26
35392: PUSH
35393: EMPTY
35394: LIST
35395: IN
35396: IFFALSE 35417
// points := [ 120 , 30 , 80 ] ;
35398: LD_ADDR_VAR 0 9
35402: PUSH
35403: LD_INT 120
35405: PUSH
35406: LD_INT 30
35408: PUSH
35409: LD_INT 80
35411: PUSH
35412: EMPTY
35413: LIST
35414: LIST
35415: LIST
35416: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35417: LD_VAR 0 6
35421: PPUSH
35422: CALL_OW 264
35426: PUSH
35427: LD_INT 22
35429: PUSH
35430: EMPTY
35431: LIST
35432: IN
35433: IFFALSE 35454
// points := [ 40 , 1 , 1 ] ;
35435: LD_ADDR_VAR 0 9
35439: PUSH
35440: LD_INT 40
35442: PUSH
35443: LD_INT 1
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: LIST
35453: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35454: LD_VAR 0 6
35458: PPUSH
35459: CALL_OW 264
35463: PUSH
35464: LD_INT 29
35466: PUSH
35467: EMPTY
35468: LIST
35469: IN
35470: IFFALSE 35491
// points := [ 70 , 200 , 400 ] ;
35472: LD_ADDR_VAR 0 9
35476: PUSH
35477: LD_INT 70
35479: PUSH
35480: LD_INT 200
35482: PUSH
35483: LD_INT 400
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: LIST
35490: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35491: LD_VAR 0 6
35495: PPUSH
35496: CALL_OW 264
35500: PUSH
35501: LD_INT 14
35503: PUSH
35504: LD_INT 53
35506: PUSH
35507: EMPTY
35508: LIST
35509: LIST
35510: IN
35511: IFFALSE 35532
// points := [ 40 , 10 , 20 ] ;
35513: LD_ADDR_VAR 0 9
35517: PUSH
35518: LD_INT 40
35520: PUSH
35521: LD_INT 10
35523: PUSH
35524: LD_INT 20
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: LIST
35531: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35532: LD_VAR 0 6
35536: PPUSH
35537: CALL_OW 264
35541: PUSH
35542: LD_INT 9
35544: PUSH
35545: EMPTY
35546: LIST
35547: IN
35548: IFFALSE 35569
// points := [ 5 , 70 , 20 ] ;
35550: LD_ADDR_VAR 0 9
35554: PUSH
35555: LD_INT 5
35557: PUSH
35558: LD_INT 70
35560: PUSH
35561: LD_INT 20
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: LIST
35568: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35569: LD_VAR 0 6
35573: PPUSH
35574: CALL_OW 264
35578: PUSH
35579: LD_INT 10
35581: PUSH
35582: EMPTY
35583: LIST
35584: IN
35585: IFFALSE 35606
// points := [ 35 , 110 , 70 ] ;
35587: LD_ADDR_VAR 0 9
35591: PUSH
35592: LD_INT 35
35594: PUSH
35595: LD_INT 110
35597: PUSH
35598: LD_INT 70
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: LIST
35605: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35606: LD_VAR 0 6
35610: PPUSH
35611: CALL_OW 265
35615: PUSH
35616: LD_INT 25
35618: EQUAL
35619: IFFALSE 35640
// points := [ 80 , 65 , 100 ] ;
35621: LD_ADDR_VAR 0 9
35625: PUSH
35626: LD_INT 80
35628: PUSH
35629: LD_INT 65
35631: PUSH
35632: LD_INT 100
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: LIST
35639: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35640: LD_VAR 0 6
35644: PPUSH
35645: CALL_OW 263
35649: PUSH
35650: LD_INT 1
35652: EQUAL
35653: IFFALSE 35688
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35655: LD_ADDR_VAR 0 10
35659: PUSH
35660: LD_VAR 0 10
35664: PUSH
35665: LD_VAR 0 6
35669: PPUSH
35670: CALL_OW 311
35674: PPUSH
35675: LD_INT 3
35677: PPUSH
35678: CALL_OW 259
35682: PUSH
35683: LD_INT 4
35685: MUL
35686: MUL
35687: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35688: LD_VAR 0 6
35692: PPUSH
35693: CALL_OW 263
35697: PUSH
35698: LD_INT 2
35700: EQUAL
35701: IFFALSE 35752
// begin j := IsControledBy ( i ) ;
35703: LD_ADDR_VAR 0 7
35707: PUSH
35708: LD_VAR 0 6
35712: PPUSH
35713: CALL_OW 312
35717: ST_TO_ADDR
// if j then
35718: LD_VAR 0 7
35722: IFFALSE 35752
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35724: LD_ADDR_VAR 0 10
35728: PUSH
35729: LD_VAR 0 10
35733: PUSH
35734: LD_VAR 0 7
35738: PPUSH
35739: LD_INT 3
35741: PPUSH
35742: CALL_OW 259
35746: PUSH
35747: LD_INT 3
35749: MUL
35750: MUL
35751: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35752: LD_VAR 0 6
35756: PPUSH
35757: CALL_OW 264
35761: PUSH
35762: LD_INT 5
35764: PUSH
35765: LD_INT 6
35767: PUSH
35768: LD_INT 46
35770: PUSH
35771: LD_INT 44
35773: PUSH
35774: LD_INT 47
35776: PUSH
35777: LD_INT 45
35779: PUSH
35780: LD_INT 28
35782: PUSH
35783: LD_INT 7
35785: PUSH
35786: LD_INT 27
35788: PUSH
35789: LD_INT 29
35791: PUSH
35792: EMPTY
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: IN
35804: PUSH
35805: LD_VAR 0 1
35809: PPUSH
35810: LD_INT 52
35812: PPUSH
35813: CALL_OW 321
35817: PUSH
35818: LD_INT 2
35820: EQUAL
35821: AND
35822: IFFALSE 35839
// bpoints := bpoints * 1.2 ;
35824: LD_ADDR_VAR 0 10
35828: PUSH
35829: LD_VAR 0 10
35833: PUSH
35834: LD_REAL  1.20000000000000E+0000
35837: MUL
35838: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35839: LD_VAR 0 6
35843: PPUSH
35844: CALL_OW 264
35848: PUSH
35849: LD_INT 6
35851: PUSH
35852: LD_INT 46
35854: PUSH
35855: LD_INT 47
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: LIST
35862: IN
35863: IFFALSE 35880
// bpoints := bpoints * 1.2 ;
35865: LD_ADDR_VAR 0 10
35869: PUSH
35870: LD_VAR 0 10
35874: PUSH
35875: LD_REAL  1.20000000000000E+0000
35878: MUL
35879: ST_TO_ADDR
// end ; unit_building :
35880: GO 35894
35882: LD_INT 3
35884: DOUBLE
35885: EQUAL
35886: IFTRUE 35890
35888: GO 35893
35890: POP
// ; end ;
35891: GO 35894
35893: POP
// for j = 1 to 3 do
35894: LD_ADDR_VAR 0 7
35898: PUSH
35899: DOUBLE
35900: LD_INT 1
35902: DEC
35903: ST_TO_ADDR
35904: LD_INT 3
35906: PUSH
35907: FOR_TO
35908: IFFALSE 35961
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35910: LD_ADDR_VAR 0 5
35914: PUSH
35915: LD_VAR 0 5
35919: PPUSH
35920: LD_VAR 0 7
35924: PPUSH
35925: LD_VAR 0 5
35929: PUSH
35930: LD_VAR 0 7
35934: ARRAY
35935: PUSH
35936: LD_VAR 0 9
35940: PUSH
35941: LD_VAR 0 7
35945: ARRAY
35946: PUSH
35947: LD_VAR 0 10
35951: MUL
35952: PLUS
35953: PPUSH
35954: CALL_OW 1
35958: ST_TO_ADDR
35959: GO 35907
35961: POP
35962: POP
// end ;
35963: GO 34442
35965: POP
35966: POP
// result := Replace ( result , 4 , tmp ) ;
35967: LD_ADDR_VAR 0 5
35971: PUSH
35972: LD_VAR 0 5
35976: PPUSH
35977: LD_INT 4
35979: PPUSH
35980: LD_VAR 0 8
35984: PPUSH
35985: CALL_OW 1
35989: ST_TO_ADDR
// end ;
35990: LD_VAR 0 5
35994: RET
// export function DangerAtRange ( unit , range ) ; begin
35995: LD_INT 0
35997: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35998: LD_ADDR_VAR 0 3
36002: PUSH
36003: LD_VAR 0 1
36007: PPUSH
36008: CALL_OW 255
36012: PPUSH
36013: LD_VAR 0 1
36017: PPUSH
36018: CALL_OW 250
36022: PPUSH
36023: LD_VAR 0 1
36027: PPUSH
36028: CALL_OW 251
36032: PPUSH
36033: LD_VAR 0 2
36037: PPUSH
36038: CALL 34294 0 4
36042: ST_TO_ADDR
// end ;
36043: LD_VAR 0 3
36047: RET
// export function DangerInArea ( side , area ) ; begin
36048: LD_INT 0
36050: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36051: LD_ADDR_VAR 0 3
36055: PUSH
36056: LD_VAR 0 2
36060: PPUSH
36061: LD_INT 81
36063: PUSH
36064: LD_VAR 0 1
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PPUSH
36073: CALL_OW 70
36077: ST_TO_ADDR
// end ;
36078: LD_VAR 0 3
36082: RET
// export function IsExtension ( b ) ; begin
36083: LD_INT 0
36085: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36086: LD_ADDR_VAR 0 2
36090: PUSH
36091: LD_VAR 0 1
36095: PUSH
36096: LD_INT 23
36098: PUSH
36099: LD_INT 20
36101: PUSH
36102: LD_INT 22
36104: PUSH
36105: LD_INT 17
36107: PUSH
36108: LD_INT 24
36110: PUSH
36111: LD_INT 21
36113: PUSH
36114: LD_INT 19
36116: PUSH
36117: LD_INT 16
36119: PUSH
36120: LD_INT 25
36122: PUSH
36123: LD_INT 18
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: IN
36138: ST_TO_ADDR
// end ;
36139: LD_VAR 0 2
36143: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36144: LD_INT 0
36146: PPUSH
36147: PPUSH
36148: PPUSH
// result := [ ] ;
36149: LD_ADDR_VAR 0 4
36153: PUSH
36154: EMPTY
36155: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36156: LD_ADDR_VAR 0 5
36160: PUSH
36161: LD_VAR 0 2
36165: PPUSH
36166: LD_INT 21
36168: PUSH
36169: LD_INT 3
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PPUSH
36176: CALL_OW 70
36180: ST_TO_ADDR
// if not tmp then
36181: LD_VAR 0 5
36185: NOT
36186: IFFALSE 36190
// exit ;
36188: GO 36254
// if checkLink then
36190: LD_VAR 0 3
36194: IFFALSE 36244
// begin for i in tmp do
36196: LD_ADDR_VAR 0 6
36200: PUSH
36201: LD_VAR 0 5
36205: PUSH
36206: FOR_IN
36207: IFFALSE 36242
// if GetBase ( i ) <> base then
36209: LD_VAR 0 6
36213: PPUSH
36214: CALL_OW 274
36218: PUSH
36219: LD_VAR 0 1
36223: NONEQUAL
36224: IFFALSE 36240
// ComLinkToBase ( base , i ) ;
36226: LD_VAR 0 1
36230: PPUSH
36231: LD_VAR 0 6
36235: PPUSH
36236: CALL_OW 169
36240: GO 36206
36242: POP
36243: POP
// end ; result := tmp ;
36244: LD_ADDR_VAR 0 4
36248: PUSH
36249: LD_VAR 0 5
36253: ST_TO_ADDR
// end ;
36254: LD_VAR 0 4
36258: RET
// export function ComComplete ( units , b ) ; var i ; begin
36259: LD_INT 0
36261: PPUSH
36262: PPUSH
// if not units then
36263: LD_VAR 0 1
36267: NOT
36268: IFFALSE 36272
// exit ;
36270: GO 36362
// for i in units do
36272: LD_ADDR_VAR 0 4
36276: PUSH
36277: LD_VAR 0 1
36281: PUSH
36282: FOR_IN
36283: IFFALSE 36360
// if BuildingStatus ( b ) = bs_build then
36285: LD_VAR 0 2
36289: PPUSH
36290: CALL_OW 461
36294: PUSH
36295: LD_INT 1
36297: EQUAL
36298: IFFALSE 36358
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36300: LD_VAR 0 4
36304: PPUSH
36305: LD_STRING h
36307: PUSH
36308: LD_VAR 0 2
36312: PPUSH
36313: CALL_OW 250
36317: PUSH
36318: LD_VAR 0 2
36322: PPUSH
36323: CALL_OW 251
36327: PUSH
36328: LD_VAR 0 2
36332: PUSH
36333: LD_INT 0
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: LD_INT 0
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: PUSH
36351: EMPTY
36352: LIST
36353: PPUSH
36354: CALL_OW 446
36358: GO 36282
36360: POP
36361: POP
// end ;
36362: LD_VAR 0 3
36366: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36367: LD_INT 0
36369: PPUSH
36370: PPUSH
36371: PPUSH
36372: PPUSH
36373: PPUSH
36374: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36375: LD_VAR 0 1
36379: NOT
36380: PUSH
36381: LD_VAR 0 1
36385: PPUSH
36386: CALL_OW 263
36390: PUSH
36391: LD_INT 2
36393: NONEQUAL
36394: OR
36395: IFFALSE 36399
// exit ;
36397: GO 36715
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36399: LD_ADDR_VAR 0 6
36403: PUSH
36404: LD_INT 22
36406: PUSH
36407: LD_VAR 0 1
36411: PPUSH
36412: CALL_OW 255
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 2
36423: PUSH
36424: LD_INT 30
36426: PUSH
36427: LD_INT 36
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 34
36436: PUSH
36437: LD_INT 31
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: LIST
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PPUSH
36453: CALL_OW 69
36457: ST_TO_ADDR
// if not tmp then
36458: LD_VAR 0 6
36462: NOT
36463: IFFALSE 36467
// exit ;
36465: GO 36715
// result := [ ] ;
36467: LD_ADDR_VAR 0 2
36471: PUSH
36472: EMPTY
36473: ST_TO_ADDR
// for i in tmp do
36474: LD_ADDR_VAR 0 3
36478: PUSH
36479: LD_VAR 0 6
36483: PUSH
36484: FOR_IN
36485: IFFALSE 36556
// begin t := UnitsInside ( i ) ;
36487: LD_ADDR_VAR 0 4
36491: PUSH
36492: LD_VAR 0 3
36496: PPUSH
36497: CALL_OW 313
36501: ST_TO_ADDR
// if t then
36502: LD_VAR 0 4
36506: IFFALSE 36554
// for j in t do
36508: LD_ADDR_VAR 0 7
36512: PUSH
36513: LD_VAR 0 4
36517: PUSH
36518: FOR_IN
36519: IFFALSE 36552
// result := Replace ( result , result + 1 , j ) ;
36521: LD_ADDR_VAR 0 2
36525: PUSH
36526: LD_VAR 0 2
36530: PPUSH
36531: LD_VAR 0 2
36535: PUSH
36536: LD_INT 1
36538: PLUS
36539: PPUSH
36540: LD_VAR 0 7
36544: PPUSH
36545: CALL_OW 1
36549: ST_TO_ADDR
36550: GO 36518
36552: POP
36553: POP
// end ;
36554: GO 36484
36556: POP
36557: POP
// if not result then
36558: LD_VAR 0 2
36562: NOT
36563: IFFALSE 36567
// exit ;
36565: GO 36715
// mech := result [ 1 ] ;
36567: LD_ADDR_VAR 0 5
36571: PUSH
36572: LD_VAR 0 2
36576: PUSH
36577: LD_INT 1
36579: ARRAY
36580: ST_TO_ADDR
// if result > 1 then
36581: LD_VAR 0 2
36585: PUSH
36586: LD_INT 1
36588: GREATER
36589: IFFALSE 36701
// begin for i = 2 to result do
36591: LD_ADDR_VAR 0 3
36595: PUSH
36596: DOUBLE
36597: LD_INT 2
36599: DEC
36600: ST_TO_ADDR
36601: LD_VAR 0 2
36605: PUSH
36606: FOR_TO
36607: IFFALSE 36699
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36609: LD_ADDR_VAR 0 4
36613: PUSH
36614: LD_VAR 0 2
36618: PUSH
36619: LD_VAR 0 3
36623: ARRAY
36624: PPUSH
36625: LD_INT 3
36627: PPUSH
36628: CALL_OW 259
36632: PUSH
36633: LD_VAR 0 2
36637: PUSH
36638: LD_VAR 0 3
36642: ARRAY
36643: PPUSH
36644: CALL_OW 432
36648: MINUS
36649: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36650: LD_VAR 0 4
36654: PUSH
36655: LD_VAR 0 5
36659: PPUSH
36660: LD_INT 3
36662: PPUSH
36663: CALL_OW 259
36667: PUSH
36668: LD_VAR 0 5
36672: PPUSH
36673: CALL_OW 432
36677: MINUS
36678: GREATEREQUAL
36679: IFFALSE 36697
// mech := result [ i ] ;
36681: LD_ADDR_VAR 0 5
36685: PUSH
36686: LD_VAR 0 2
36690: PUSH
36691: LD_VAR 0 3
36695: ARRAY
36696: ST_TO_ADDR
// end ;
36697: GO 36606
36699: POP
36700: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36701: LD_VAR 0 1
36705: PPUSH
36706: LD_VAR 0 5
36710: PPUSH
36711: CALL_OW 135
// end ;
36715: LD_VAR 0 2
36719: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36720: LD_INT 0
36722: PPUSH
36723: PPUSH
36724: PPUSH
36725: PPUSH
36726: PPUSH
36727: PPUSH
36728: PPUSH
36729: PPUSH
36730: PPUSH
36731: PPUSH
36732: PPUSH
36733: PPUSH
36734: PPUSH
// result := [ ] ;
36735: LD_ADDR_VAR 0 7
36739: PUSH
36740: EMPTY
36741: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36742: LD_VAR 0 1
36746: PPUSH
36747: CALL_OW 266
36751: PUSH
36752: LD_INT 0
36754: PUSH
36755: LD_INT 1
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: IN
36762: NOT
36763: IFFALSE 36767
// exit ;
36765: GO 38401
// if name then
36767: LD_VAR 0 3
36771: IFFALSE 36787
// SetBName ( base_dep , name ) ;
36773: LD_VAR 0 1
36777: PPUSH
36778: LD_VAR 0 3
36782: PPUSH
36783: CALL_OW 500
// base := GetBase ( base_dep ) ;
36787: LD_ADDR_VAR 0 15
36791: PUSH
36792: LD_VAR 0 1
36796: PPUSH
36797: CALL_OW 274
36801: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36802: LD_ADDR_VAR 0 16
36806: PUSH
36807: LD_VAR 0 1
36811: PPUSH
36812: CALL_OW 255
36816: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36817: LD_ADDR_VAR 0 17
36821: PUSH
36822: LD_VAR 0 1
36826: PPUSH
36827: CALL_OW 248
36831: ST_TO_ADDR
// if sources then
36832: LD_VAR 0 5
36836: IFFALSE 36883
// for i = 1 to 3 do
36838: LD_ADDR_VAR 0 8
36842: PUSH
36843: DOUBLE
36844: LD_INT 1
36846: DEC
36847: ST_TO_ADDR
36848: LD_INT 3
36850: PUSH
36851: FOR_TO
36852: IFFALSE 36881
// AddResourceType ( base , i , sources [ i ] ) ;
36854: LD_VAR 0 15
36858: PPUSH
36859: LD_VAR 0 8
36863: PPUSH
36864: LD_VAR 0 5
36868: PUSH
36869: LD_VAR 0 8
36873: ARRAY
36874: PPUSH
36875: CALL_OW 276
36879: GO 36851
36881: POP
36882: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36883: LD_ADDR_VAR 0 18
36887: PUSH
36888: LD_VAR 0 15
36892: PPUSH
36893: LD_VAR 0 2
36897: PPUSH
36898: LD_INT 1
36900: PPUSH
36901: CALL 36144 0 3
36905: ST_TO_ADDR
// InitHc ;
36906: CALL_OW 19
// InitUc ;
36910: CALL_OW 18
// uc_side := side ;
36914: LD_ADDR_OWVAR 20
36918: PUSH
36919: LD_VAR 0 16
36923: ST_TO_ADDR
// uc_nation := nation ;
36924: LD_ADDR_OWVAR 21
36928: PUSH
36929: LD_VAR 0 17
36933: ST_TO_ADDR
// if buildings then
36934: LD_VAR 0 18
36938: IFFALSE 38260
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36940: LD_ADDR_VAR 0 19
36944: PUSH
36945: LD_VAR 0 18
36949: PPUSH
36950: LD_INT 2
36952: PUSH
36953: LD_INT 30
36955: PUSH
36956: LD_INT 29
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 30
36965: PUSH
36966: LD_INT 30
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: LIST
36977: PPUSH
36978: CALL_OW 72
36982: ST_TO_ADDR
// if tmp then
36983: LD_VAR 0 19
36987: IFFALSE 37035
// for i in tmp do
36989: LD_ADDR_VAR 0 8
36993: PUSH
36994: LD_VAR 0 19
36998: PUSH
36999: FOR_IN
37000: IFFALSE 37033
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37002: LD_VAR 0 8
37006: PPUSH
37007: CALL_OW 250
37011: PPUSH
37012: LD_VAR 0 8
37016: PPUSH
37017: CALL_OW 251
37021: PPUSH
37022: LD_VAR 0 16
37026: PPUSH
37027: CALL_OW 441
37031: GO 36999
37033: POP
37034: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37035: LD_VAR 0 18
37039: PPUSH
37040: LD_INT 2
37042: PUSH
37043: LD_INT 30
37045: PUSH
37046: LD_INT 32
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 30
37055: PUSH
37056: LD_INT 33
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: LIST
37067: PPUSH
37068: CALL_OW 72
37072: IFFALSE 37160
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37074: LD_ADDR_VAR 0 8
37078: PUSH
37079: LD_VAR 0 18
37083: PPUSH
37084: LD_INT 2
37086: PUSH
37087: LD_INT 30
37089: PUSH
37090: LD_INT 32
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 30
37099: PUSH
37100: LD_INT 33
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: LIST
37111: PPUSH
37112: CALL_OW 72
37116: PUSH
37117: FOR_IN
37118: IFFALSE 37158
// begin if not GetBWeapon ( i ) then
37120: LD_VAR 0 8
37124: PPUSH
37125: CALL_OW 269
37129: NOT
37130: IFFALSE 37156
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37132: LD_VAR 0 8
37136: PPUSH
37137: LD_VAR 0 8
37141: PPUSH
37142: LD_VAR 0 2
37146: PPUSH
37147: CALL 38406 0 2
37151: PPUSH
37152: CALL_OW 431
// end ;
37156: GO 37117
37158: POP
37159: POP
// end ; for i = 1 to personel do
37160: LD_ADDR_VAR 0 8
37164: PUSH
37165: DOUBLE
37166: LD_INT 1
37168: DEC
37169: ST_TO_ADDR
37170: LD_VAR 0 6
37174: PUSH
37175: FOR_TO
37176: IFFALSE 38240
// begin if i > 4 then
37178: LD_VAR 0 8
37182: PUSH
37183: LD_INT 4
37185: GREATER
37186: IFFALSE 37190
// break ;
37188: GO 38240
// case i of 1 :
37190: LD_VAR 0 8
37194: PUSH
37195: LD_INT 1
37197: DOUBLE
37198: EQUAL
37199: IFTRUE 37203
37201: GO 37283
37203: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37204: LD_ADDR_VAR 0 12
37208: PUSH
37209: LD_VAR 0 18
37213: PPUSH
37214: LD_INT 22
37216: PUSH
37217: LD_VAR 0 16
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 58
37228: PUSH
37229: EMPTY
37230: LIST
37231: PUSH
37232: LD_INT 2
37234: PUSH
37235: LD_INT 30
37237: PUSH
37238: LD_INT 32
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 30
37247: PUSH
37248: LD_INT 4
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 30
37257: PUSH
37258: LD_INT 5
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: LIST
37275: PPUSH
37276: CALL_OW 72
37280: ST_TO_ADDR
37281: GO 37505
37283: LD_INT 2
37285: DOUBLE
37286: EQUAL
37287: IFTRUE 37291
37289: GO 37353
37291: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37292: LD_ADDR_VAR 0 12
37296: PUSH
37297: LD_VAR 0 18
37301: PPUSH
37302: LD_INT 22
37304: PUSH
37305: LD_VAR 0 16
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 2
37316: PUSH
37317: LD_INT 30
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 30
37329: PUSH
37330: LD_INT 1
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: LIST
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PPUSH
37346: CALL_OW 72
37350: ST_TO_ADDR
37351: GO 37505
37353: LD_INT 3
37355: DOUBLE
37356: EQUAL
37357: IFTRUE 37361
37359: GO 37423
37361: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37362: LD_ADDR_VAR 0 12
37366: PUSH
37367: LD_VAR 0 18
37371: PPUSH
37372: LD_INT 22
37374: PUSH
37375: LD_VAR 0 16
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 2
37386: PUSH
37387: LD_INT 30
37389: PUSH
37390: LD_INT 2
37392: PUSH
37393: EMPTY
37394: LIST
37395: LIST
37396: PUSH
37397: LD_INT 30
37399: PUSH
37400: LD_INT 3
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: LIST
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PPUSH
37416: CALL_OW 72
37420: ST_TO_ADDR
37421: GO 37505
37423: LD_INT 4
37425: DOUBLE
37426: EQUAL
37427: IFTRUE 37431
37429: GO 37504
37431: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37432: LD_ADDR_VAR 0 12
37436: PUSH
37437: LD_VAR 0 18
37441: PPUSH
37442: LD_INT 22
37444: PUSH
37445: LD_VAR 0 16
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 2
37456: PUSH
37457: LD_INT 30
37459: PUSH
37460: LD_INT 6
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 30
37469: PUSH
37470: LD_INT 7
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 30
37479: PUSH
37480: LD_INT 8
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PPUSH
37497: CALL_OW 72
37501: ST_TO_ADDR
37502: GO 37505
37504: POP
// if i = 1 then
37505: LD_VAR 0 8
37509: PUSH
37510: LD_INT 1
37512: EQUAL
37513: IFFALSE 37624
// begin tmp := [ ] ;
37515: LD_ADDR_VAR 0 19
37519: PUSH
37520: EMPTY
37521: ST_TO_ADDR
// for j in f do
37522: LD_ADDR_VAR 0 9
37526: PUSH
37527: LD_VAR 0 12
37531: PUSH
37532: FOR_IN
37533: IFFALSE 37606
// if GetBType ( j ) = b_bunker then
37535: LD_VAR 0 9
37539: PPUSH
37540: CALL_OW 266
37544: PUSH
37545: LD_INT 32
37547: EQUAL
37548: IFFALSE 37575
// tmp := Insert ( tmp , 1 , j ) else
37550: LD_ADDR_VAR 0 19
37554: PUSH
37555: LD_VAR 0 19
37559: PPUSH
37560: LD_INT 1
37562: PPUSH
37563: LD_VAR 0 9
37567: PPUSH
37568: CALL_OW 2
37572: ST_TO_ADDR
37573: GO 37604
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37575: LD_ADDR_VAR 0 19
37579: PUSH
37580: LD_VAR 0 19
37584: PPUSH
37585: LD_VAR 0 19
37589: PUSH
37590: LD_INT 1
37592: PLUS
37593: PPUSH
37594: LD_VAR 0 9
37598: PPUSH
37599: CALL_OW 2
37603: ST_TO_ADDR
37604: GO 37532
37606: POP
37607: POP
// if tmp then
37608: LD_VAR 0 19
37612: IFFALSE 37624
// f := tmp ;
37614: LD_ADDR_VAR 0 12
37618: PUSH
37619: LD_VAR 0 19
37623: ST_TO_ADDR
// end ; x := personel [ i ] ;
37624: LD_ADDR_VAR 0 13
37628: PUSH
37629: LD_VAR 0 6
37633: PUSH
37634: LD_VAR 0 8
37638: ARRAY
37639: ST_TO_ADDR
// if x = - 1 then
37640: LD_VAR 0 13
37644: PUSH
37645: LD_INT 1
37647: NEG
37648: EQUAL
37649: IFFALSE 37858
// begin for j in f do
37651: LD_ADDR_VAR 0 9
37655: PUSH
37656: LD_VAR 0 12
37660: PUSH
37661: FOR_IN
37662: IFFALSE 37854
// repeat InitHc ;
37664: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37668: LD_VAR 0 9
37672: PPUSH
37673: CALL_OW 266
37677: PUSH
37678: LD_INT 5
37680: EQUAL
37681: IFFALSE 37751
// begin if UnitsInside ( j ) < 3 then
37683: LD_VAR 0 9
37687: PPUSH
37688: CALL_OW 313
37692: PUSH
37693: LD_INT 3
37695: LESS
37696: IFFALSE 37732
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37698: LD_INT 0
37700: PPUSH
37701: LD_INT 5
37703: PUSH
37704: LD_INT 8
37706: PUSH
37707: LD_INT 9
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: LIST
37714: PUSH
37715: LD_VAR 0 17
37719: ARRAY
37720: PPUSH
37721: LD_VAR 0 4
37725: PPUSH
37726: CALL_OW 380
37730: GO 37749
// PrepareHuman ( false , i , skill ) ;
37732: LD_INT 0
37734: PPUSH
37735: LD_VAR 0 8
37739: PPUSH
37740: LD_VAR 0 4
37744: PPUSH
37745: CALL_OW 380
// end else
37749: GO 37768
// PrepareHuman ( false , i , skill ) ;
37751: LD_INT 0
37753: PPUSH
37754: LD_VAR 0 8
37758: PPUSH
37759: LD_VAR 0 4
37763: PPUSH
37764: CALL_OW 380
// un := CreateHuman ;
37768: LD_ADDR_VAR 0 14
37772: PUSH
37773: CALL_OW 44
37777: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37778: LD_ADDR_VAR 0 7
37782: PUSH
37783: LD_VAR 0 7
37787: PPUSH
37788: LD_INT 1
37790: PPUSH
37791: LD_VAR 0 14
37795: PPUSH
37796: CALL_OW 2
37800: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37801: LD_VAR 0 14
37805: PPUSH
37806: LD_VAR 0 9
37810: PPUSH
37811: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37815: LD_VAR 0 9
37819: PPUSH
37820: CALL_OW 313
37824: PUSH
37825: LD_INT 6
37827: EQUAL
37828: PUSH
37829: LD_VAR 0 9
37833: PPUSH
37834: CALL_OW 266
37838: PUSH
37839: LD_INT 32
37841: PUSH
37842: LD_INT 31
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: IN
37849: OR
37850: IFFALSE 37664
37852: GO 37661
37854: POP
37855: POP
// end else
37856: GO 38238
// for j = 1 to x do
37858: LD_ADDR_VAR 0 9
37862: PUSH
37863: DOUBLE
37864: LD_INT 1
37866: DEC
37867: ST_TO_ADDR
37868: LD_VAR 0 13
37872: PUSH
37873: FOR_TO
37874: IFFALSE 38236
// begin InitHc ;
37876: CALL_OW 19
// if not f then
37880: LD_VAR 0 12
37884: NOT
37885: IFFALSE 37974
// begin PrepareHuman ( false , i , skill ) ;
37887: LD_INT 0
37889: PPUSH
37890: LD_VAR 0 8
37894: PPUSH
37895: LD_VAR 0 4
37899: PPUSH
37900: CALL_OW 380
// un := CreateHuman ;
37904: LD_ADDR_VAR 0 14
37908: PUSH
37909: CALL_OW 44
37913: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37914: LD_ADDR_VAR 0 7
37918: PUSH
37919: LD_VAR 0 7
37923: PPUSH
37924: LD_INT 1
37926: PPUSH
37927: LD_VAR 0 14
37931: PPUSH
37932: CALL_OW 2
37936: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37937: LD_VAR 0 14
37941: PPUSH
37942: LD_VAR 0 1
37946: PPUSH
37947: CALL_OW 250
37951: PPUSH
37952: LD_VAR 0 1
37956: PPUSH
37957: CALL_OW 251
37961: PPUSH
37962: LD_INT 10
37964: PPUSH
37965: LD_INT 0
37967: PPUSH
37968: CALL_OW 50
// continue ;
37972: GO 37873
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37974: LD_VAR 0 12
37978: PUSH
37979: LD_INT 1
37981: ARRAY
37982: PPUSH
37983: CALL_OW 313
37987: PUSH
37988: LD_VAR 0 12
37992: PUSH
37993: LD_INT 1
37995: ARRAY
37996: PPUSH
37997: CALL_OW 266
38001: PUSH
38002: LD_INT 32
38004: PUSH
38005: LD_INT 31
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: IN
38012: AND
38013: PUSH
38014: LD_VAR 0 12
38018: PUSH
38019: LD_INT 1
38021: ARRAY
38022: PPUSH
38023: CALL_OW 313
38027: PUSH
38028: LD_INT 6
38030: EQUAL
38031: OR
38032: IFFALSE 38052
// f := Delete ( f , 1 ) ;
38034: LD_ADDR_VAR 0 12
38038: PUSH
38039: LD_VAR 0 12
38043: PPUSH
38044: LD_INT 1
38046: PPUSH
38047: CALL_OW 3
38051: ST_TO_ADDR
// if not f then
38052: LD_VAR 0 12
38056: NOT
38057: IFFALSE 38075
// begin x := x + 2 ;
38059: LD_ADDR_VAR 0 13
38063: PUSH
38064: LD_VAR 0 13
38068: PUSH
38069: LD_INT 2
38071: PLUS
38072: ST_TO_ADDR
// continue ;
38073: GO 37873
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38075: LD_VAR 0 12
38079: PUSH
38080: LD_INT 1
38082: ARRAY
38083: PPUSH
38084: CALL_OW 266
38088: PUSH
38089: LD_INT 5
38091: EQUAL
38092: IFFALSE 38166
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38094: LD_VAR 0 12
38098: PUSH
38099: LD_INT 1
38101: ARRAY
38102: PPUSH
38103: CALL_OW 313
38107: PUSH
38108: LD_INT 3
38110: LESS
38111: IFFALSE 38147
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38113: LD_INT 0
38115: PPUSH
38116: LD_INT 5
38118: PUSH
38119: LD_INT 8
38121: PUSH
38122: LD_INT 9
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: LIST
38129: PUSH
38130: LD_VAR 0 17
38134: ARRAY
38135: PPUSH
38136: LD_VAR 0 4
38140: PPUSH
38141: CALL_OW 380
38145: GO 38164
// PrepareHuman ( false , i , skill ) ;
38147: LD_INT 0
38149: PPUSH
38150: LD_VAR 0 8
38154: PPUSH
38155: LD_VAR 0 4
38159: PPUSH
38160: CALL_OW 380
// end else
38164: GO 38183
// PrepareHuman ( false , i , skill ) ;
38166: LD_INT 0
38168: PPUSH
38169: LD_VAR 0 8
38173: PPUSH
38174: LD_VAR 0 4
38178: PPUSH
38179: CALL_OW 380
// un := CreateHuman ;
38183: LD_ADDR_VAR 0 14
38187: PUSH
38188: CALL_OW 44
38192: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38193: LD_ADDR_VAR 0 7
38197: PUSH
38198: LD_VAR 0 7
38202: PPUSH
38203: LD_INT 1
38205: PPUSH
38206: LD_VAR 0 14
38210: PPUSH
38211: CALL_OW 2
38215: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38216: LD_VAR 0 14
38220: PPUSH
38221: LD_VAR 0 12
38225: PUSH
38226: LD_INT 1
38228: ARRAY
38229: PPUSH
38230: CALL_OW 52
// end ;
38234: GO 37873
38236: POP
38237: POP
// end ;
38238: GO 37175
38240: POP
38241: POP
// result := result ^ buildings ;
38242: LD_ADDR_VAR 0 7
38246: PUSH
38247: LD_VAR 0 7
38251: PUSH
38252: LD_VAR 0 18
38256: ADD
38257: ST_TO_ADDR
// end else
38258: GO 38401
// begin for i = 1 to personel do
38260: LD_ADDR_VAR 0 8
38264: PUSH
38265: DOUBLE
38266: LD_INT 1
38268: DEC
38269: ST_TO_ADDR
38270: LD_VAR 0 6
38274: PUSH
38275: FOR_TO
38276: IFFALSE 38399
// begin if i > 4 then
38278: LD_VAR 0 8
38282: PUSH
38283: LD_INT 4
38285: GREATER
38286: IFFALSE 38290
// break ;
38288: GO 38399
// x := personel [ i ] ;
38290: LD_ADDR_VAR 0 13
38294: PUSH
38295: LD_VAR 0 6
38299: PUSH
38300: LD_VAR 0 8
38304: ARRAY
38305: ST_TO_ADDR
// if x = - 1 then
38306: LD_VAR 0 13
38310: PUSH
38311: LD_INT 1
38313: NEG
38314: EQUAL
38315: IFFALSE 38319
// continue ;
38317: GO 38275
// PrepareHuman ( false , i , skill ) ;
38319: LD_INT 0
38321: PPUSH
38322: LD_VAR 0 8
38326: PPUSH
38327: LD_VAR 0 4
38331: PPUSH
38332: CALL_OW 380
// un := CreateHuman ;
38336: LD_ADDR_VAR 0 14
38340: PUSH
38341: CALL_OW 44
38345: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38346: LD_VAR 0 14
38350: PPUSH
38351: LD_VAR 0 1
38355: PPUSH
38356: CALL_OW 250
38360: PPUSH
38361: LD_VAR 0 1
38365: PPUSH
38366: CALL_OW 251
38370: PPUSH
38371: LD_INT 10
38373: PPUSH
38374: LD_INT 0
38376: PPUSH
38377: CALL_OW 50
// result := result ^ un ;
38381: LD_ADDR_VAR 0 7
38385: PUSH
38386: LD_VAR 0 7
38390: PUSH
38391: LD_VAR 0 14
38395: ADD
38396: ST_TO_ADDR
// end ;
38397: GO 38275
38399: POP
38400: POP
// end ; end ;
38401: LD_VAR 0 7
38405: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38406: LD_INT 0
38408: PPUSH
38409: PPUSH
38410: PPUSH
38411: PPUSH
38412: PPUSH
38413: PPUSH
38414: PPUSH
38415: PPUSH
38416: PPUSH
38417: PPUSH
38418: PPUSH
38419: PPUSH
38420: PPUSH
38421: PPUSH
38422: PPUSH
38423: PPUSH
// result := false ;
38424: LD_ADDR_VAR 0 3
38428: PUSH
38429: LD_INT 0
38431: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38432: LD_VAR 0 1
38436: NOT
38437: PUSH
38438: LD_VAR 0 1
38442: PPUSH
38443: CALL_OW 266
38447: PUSH
38448: LD_INT 32
38450: PUSH
38451: LD_INT 33
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: IN
38458: NOT
38459: OR
38460: IFFALSE 38464
// exit ;
38462: GO 39573
// nat := GetNation ( tower ) ;
38464: LD_ADDR_VAR 0 12
38468: PUSH
38469: LD_VAR 0 1
38473: PPUSH
38474: CALL_OW 248
38478: ST_TO_ADDR
// side := GetSide ( tower ) ;
38479: LD_ADDR_VAR 0 16
38483: PUSH
38484: LD_VAR 0 1
38488: PPUSH
38489: CALL_OW 255
38493: ST_TO_ADDR
// x := GetX ( tower ) ;
38494: LD_ADDR_VAR 0 10
38498: PUSH
38499: LD_VAR 0 1
38503: PPUSH
38504: CALL_OW 250
38508: ST_TO_ADDR
// y := GetY ( tower ) ;
38509: LD_ADDR_VAR 0 11
38513: PUSH
38514: LD_VAR 0 1
38518: PPUSH
38519: CALL_OW 251
38523: ST_TO_ADDR
// if not x or not y then
38524: LD_VAR 0 10
38528: NOT
38529: PUSH
38530: LD_VAR 0 11
38534: NOT
38535: OR
38536: IFFALSE 38540
// exit ;
38538: GO 39573
// weapon := 0 ;
38540: LD_ADDR_VAR 0 18
38544: PUSH
38545: LD_INT 0
38547: ST_TO_ADDR
// fac_list := [ ] ;
38548: LD_ADDR_VAR 0 17
38552: PUSH
38553: EMPTY
38554: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38555: LD_ADDR_VAR 0 6
38559: PUSH
38560: LD_VAR 0 1
38564: PPUSH
38565: CALL_OW 274
38569: PPUSH
38570: LD_VAR 0 2
38574: PPUSH
38575: LD_INT 0
38577: PPUSH
38578: CALL 36144 0 3
38582: PPUSH
38583: LD_INT 30
38585: PUSH
38586: LD_INT 3
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PPUSH
38593: CALL_OW 72
38597: ST_TO_ADDR
// if not factories then
38598: LD_VAR 0 6
38602: NOT
38603: IFFALSE 38607
// exit ;
38605: GO 39573
// for i in factories do
38607: LD_ADDR_VAR 0 8
38611: PUSH
38612: LD_VAR 0 6
38616: PUSH
38617: FOR_IN
38618: IFFALSE 38643
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38620: LD_ADDR_VAR 0 17
38624: PUSH
38625: LD_VAR 0 17
38629: PUSH
38630: LD_VAR 0 8
38634: PPUSH
38635: CALL_OW 478
38639: UNION
38640: ST_TO_ADDR
38641: GO 38617
38643: POP
38644: POP
// if not fac_list then
38645: LD_VAR 0 17
38649: NOT
38650: IFFALSE 38654
// exit ;
38652: GO 39573
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38654: LD_ADDR_VAR 0 5
38658: PUSH
38659: LD_INT 4
38661: PUSH
38662: LD_INT 5
38664: PUSH
38665: LD_INT 9
38667: PUSH
38668: LD_INT 10
38670: PUSH
38671: LD_INT 6
38673: PUSH
38674: LD_INT 7
38676: PUSH
38677: LD_INT 11
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 27
38691: PUSH
38692: LD_INT 28
38694: PUSH
38695: LD_INT 26
38697: PUSH
38698: LD_INT 30
38700: PUSH
38701: EMPTY
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 43
38709: PUSH
38710: LD_INT 44
38712: PUSH
38713: LD_INT 46
38715: PUSH
38716: LD_INT 45
38718: PUSH
38719: LD_INT 47
38721: PUSH
38722: LD_INT 49
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: LIST
38737: PUSH
38738: LD_VAR 0 12
38742: ARRAY
38743: ST_TO_ADDR
// list := list isect fac_list ;
38744: LD_ADDR_VAR 0 5
38748: PUSH
38749: LD_VAR 0 5
38753: PUSH
38754: LD_VAR 0 17
38758: ISECT
38759: ST_TO_ADDR
// if not list then
38760: LD_VAR 0 5
38764: NOT
38765: IFFALSE 38769
// exit ;
38767: GO 39573
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38769: LD_VAR 0 12
38773: PUSH
38774: LD_INT 3
38776: EQUAL
38777: PUSH
38778: LD_INT 49
38780: PUSH
38781: LD_VAR 0 5
38785: IN
38786: AND
38787: PUSH
38788: LD_INT 31
38790: PPUSH
38791: LD_VAR 0 16
38795: PPUSH
38796: CALL_OW 321
38800: PUSH
38801: LD_INT 2
38803: EQUAL
38804: AND
38805: IFFALSE 38865
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38807: LD_INT 22
38809: PUSH
38810: LD_VAR 0 16
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 35
38821: PUSH
38822: LD_INT 49
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 91
38831: PUSH
38832: LD_VAR 0 1
38836: PUSH
38837: LD_INT 10
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: LIST
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: LIST
38849: PPUSH
38850: CALL_OW 69
38854: NOT
38855: IFFALSE 38865
// weapon := ru_time_lapser ;
38857: LD_ADDR_VAR 0 18
38861: PUSH
38862: LD_INT 49
38864: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38865: LD_VAR 0 12
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: LD_INT 2
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: IN
38880: PUSH
38881: LD_INT 11
38883: PUSH
38884: LD_VAR 0 5
38888: IN
38889: PUSH
38890: LD_INT 30
38892: PUSH
38893: LD_VAR 0 5
38897: IN
38898: OR
38899: AND
38900: PUSH
38901: LD_INT 6
38903: PPUSH
38904: LD_VAR 0 16
38908: PPUSH
38909: CALL_OW 321
38913: PUSH
38914: LD_INT 2
38916: EQUAL
38917: AND
38918: IFFALSE 39083
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38920: LD_INT 22
38922: PUSH
38923: LD_VAR 0 16
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 2
38934: PUSH
38935: LD_INT 35
38937: PUSH
38938: LD_INT 11
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 35
38947: PUSH
38948: LD_INT 30
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 91
38962: PUSH
38963: LD_VAR 0 1
38967: PUSH
38968: LD_INT 18
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: LIST
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: LIST
38980: PPUSH
38981: CALL_OW 69
38985: NOT
38986: PUSH
38987: LD_INT 22
38989: PUSH
38990: LD_VAR 0 16
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 2
39001: PUSH
39002: LD_INT 30
39004: PUSH
39005: LD_INT 32
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 30
39014: PUSH
39015: LD_INT 33
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 91
39029: PUSH
39030: LD_VAR 0 1
39034: PUSH
39035: LD_INT 12
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: LIST
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: LIST
39047: PUSH
39048: EMPTY
39049: LIST
39050: PPUSH
39051: CALL_OW 69
39055: PUSH
39056: LD_INT 2
39058: GREATER
39059: AND
39060: IFFALSE 39083
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39062: LD_ADDR_VAR 0 18
39066: PUSH
39067: LD_INT 11
39069: PUSH
39070: LD_INT 30
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_VAR 0 12
39081: ARRAY
39082: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39083: LD_VAR 0 18
39087: NOT
39088: PUSH
39089: LD_INT 40
39091: PPUSH
39092: LD_VAR 0 16
39096: PPUSH
39097: CALL_OW 321
39101: PUSH
39102: LD_INT 2
39104: EQUAL
39105: AND
39106: PUSH
39107: LD_INT 7
39109: PUSH
39110: LD_VAR 0 5
39114: IN
39115: PUSH
39116: LD_INT 28
39118: PUSH
39119: LD_VAR 0 5
39123: IN
39124: OR
39125: PUSH
39126: LD_INT 45
39128: PUSH
39129: LD_VAR 0 5
39133: IN
39134: OR
39135: AND
39136: IFFALSE 39390
// begin hex := GetHexInfo ( x , y ) ;
39138: LD_ADDR_VAR 0 4
39142: PUSH
39143: LD_VAR 0 10
39147: PPUSH
39148: LD_VAR 0 11
39152: PPUSH
39153: CALL_OW 546
39157: ST_TO_ADDR
// if hex [ 1 ] then
39158: LD_VAR 0 4
39162: PUSH
39163: LD_INT 1
39165: ARRAY
39166: IFFALSE 39170
// exit ;
39168: GO 39573
// height := hex [ 2 ] ;
39170: LD_ADDR_VAR 0 15
39174: PUSH
39175: LD_VAR 0 4
39179: PUSH
39180: LD_INT 2
39182: ARRAY
39183: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39184: LD_ADDR_VAR 0 14
39188: PUSH
39189: LD_INT 0
39191: PUSH
39192: LD_INT 2
39194: PUSH
39195: LD_INT 3
39197: PUSH
39198: LD_INT 5
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: ST_TO_ADDR
// for i in tmp do
39207: LD_ADDR_VAR 0 8
39211: PUSH
39212: LD_VAR 0 14
39216: PUSH
39217: FOR_IN
39218: IFFALSE 39388
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39220: LD_ADDR_VAR 0 9
39224: PUSH
39225: LD_VAR 0 10
39229: PPUSH
39230: LD_VAR 0 8
39234: PPUSH
39235: LD_INT 5
39237: PPUSH
39238: CALL_OW 272
39242: PUSH
39243: LD_VAR 0 11
39247: PPUSH
39248: LD_VAR 0 8
39252: PPUSH
39253: LD_INT 5
39255: PPUSH
39256: CALL_OW 273
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39265: LD_VAR 0 9
39269: PUSH
39270: LD_INT 1
39272: ARRAY
39273: PPUSH
39274: LD_VAR 0 9
39278: PUSH
39279: LD_INT 2
39281: ARRAY
39282: PPUSH
39283: CALL_OW 488
39287: IFFALSE 39386
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39289: LD_ADDR_VAR 0 4
39293: PUSH
39294: LD_VAR 0 9
39298: PUSH
39299: LD_INT 1
39301: ARRAY
39302: PPUSH
39303: LD_VAR 0 9
39307: PUSH
39308: LD_INT 2
39310: ARRAY
39311: PPUSH
39312: CALL_OW 546
39316: ST_TO_ADDR
// if hex [ 1 ] then
39317: LD_VAR 0 4
39321: PUSH
39322: LD_INT 1
39324: ARRAY
39325: IFFALSE 39329
// continue ;
39327: GO 39217
// h := hex [ 2 ] ;
39329: LD_ADDR_VAR 0 13
39333: PUSH
39334: LD_VAR 0 4
39338: PUSH
39339: LD_INT 2
39341: ARRAY
39342: ST_TO_ADDR
// if h + 7 < height then
39343: LD_VAR 0 13
39347: PUSH
39348: LD_INT 7
39350: PLUS
39351: PUSH
39352: LD_VAR 0 15
39356: LESS
39357: IFFALSE 39386
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39359: LD_ADDR_VAR 0 18
39363: PUSH
39364: LD_INT 7
39366: PUSH
39367: LD_INT 28
39369: PUSH
39370: LD_INT 45
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: LIST
39377: PUSH
39378: LD_VAR 0 12
39382: ARRAY
39383: ST_TO_ADDR
// break ;
39384: GO 39388
// end ; end ; end ;
39386: GO 39217
39388: POP
39389: POP
// end ; if not weapon then
39390: LD_VAR 0 18
39394: NOT
39395: IFFALSE 39455
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39397: LD_ADDR_VAR 0 5
39401: PUSH
39402: LD_VAR 0 5
39406: PUSH
39407: LD_INT 11
39409: PUSH
39410: LD_INT 30
39412: PUSH
39413: LD_INT 49
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: LIST
39420: DIFF
39421: ST_TO_ADDR
// if not list then
39422: LD_VAR 0 5
39426: NOT
39427: IFFALSE 39431
// exit ;
39429: GO 39573
// weapon := list [ rand ( 1 , list ) ] ;
39431: LD_ADDR_VAR 0 18
39435: PUSH
39436: LD_VAR 0 5
39440: PUSH
39441: LD_INT 1
39443: PPUSH
39444: LD_VAR 0 5
39448: PPUSH
39449: CALL_OW 12
39453: ARRAY
39454: ST_TO_ADDR
// end ; if weapon then
39455: LD_VAR 0 18
39459: IFFALSE 39573
// begin tmp := CostOfWeapon ( weapon ) ;
39461: LD_ADDR_VAR 0 14
39465: PUSH
39466: LD_VAR 0 18
39470: PPUSH
39471: CALL_OW 451
39475: ST_TO_ADDR
// j := GetBase ( tower ) ;
39476: LD_ADDR_VAR 0 9
39480: PUSH
39481: LD_VAR 0 1
39485: PPUSH
39486: CALL_OW 274
39490: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39491: LD_VAR 0 9
39495: PPUSH
39496: LD_INT 1
39498: PPUSH
39499: CALL_OW 275
39503: PUSH
39504: LD_VAR 0 14
39508: PUSH
39509: LD_INT 1
39511: ARRAY
39512: GREATEREQUAL
39513: PUSH
39514: LD_VAR 0 9
39518: PPUSH
39519: LD_INT 2
39521: PPUSH
39522: CALL_OW 275
39526: PUSH
39527: LD_VAR 0 14
39531: PUSH
39532: LD_INT 2
39534: ARRAY
39535: GREATEREQUAL
39536: AND
39537: PUSH
39538: LD_VAR 0 9
39542: PPUSH
39543: LD_INT 3
39545: PPUSH
39546: CALL_OW 275
39550: PUSH
39551: LD_VAR 0 14
39555: PUSH
39556: LD_INT 3
39558: ARRAY
39559: GREATEREQUAL
39560: AND
39561: IFFALSE 39573
// result := weapon ;
39563: LD_ADDR_VAR 0 3
39567: PUSH
39568: LD_VAR 0 18
39572: ST_TO_ADDR
// end ; end ;
39573: LD_VAR 0 3
39577: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39578: LD_INT 0
39580: PPUSH
39581: PPUSH
// result := true ;
39582: LD_ADDR_VAR 0 3
39586: PUSH
39587: LD_INT 1
39589: ST_TO_ADDR
// if array1 = array2 then
39590: LD_VAR 0 1
39594: PUSH
39595: LD_VAR 0 2
39599: EQUAL
39600: IFFALSE 39660
// begin for i = 1 to array1 do
39602: LD_ADDR_VAR 0 4
39606: PUSH
39607: DOUBLE
39608: LD_INT 1
39610: DEC
39611: ST_TO_ADDR
39612: LD_VAR 0 1
39616: PUSH
39617: FOR_TO
39618: IFFALSE 39656
// if array1 [ i ] <> array2 [ i ] then
39620: LD_VAR 0 1
39624: PUSH
39625: LD_VAR 0 4
39629: ARRAY
39630: PUSH
39631: LD_VAR 0 2
39635: PUSH
39636: LD_VAR 0 4
39640: ARRAY
39641: NONEQUAL
39642: IFFALSE 39654
// begin result := false ;
39644: LD_ADDR_VAR 0 3
39648: PUSH
39649: LD_INT 0
39651: ST_TO_ADDR
// break ;
39652: GO 39656
// end ;
39654: GO 39617
39656: POP
39657: POP
// end else
39658: GO 39668
// result := false ;
39660: LD_ADDR_VAR 0 3
39664: PUSH
39665: LD_INT 0
39667: ST_TO_ADDR
// end ;
39668: LD_VAR 0 3
39672: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39673: LD_INT 0
39675: PPUSH
39676: PPUSH
// if not array1 or not array2 then
39677: LD_VAR 0 1
39681: NOT
39682: PUSH
39683: LD_VAR 0 2
39687: NOT
39688: OR
39689: IFFALSE 39693
// exit ;
39691: GO 39757
// result := true ;
39693: LD_ADDR_VAR 0 3
39697: PUSH
39698: LD_INT 1
39700: ST_TO_ADDR
// for i = 1 to array1 do
39701: LD_ADDR_VAR 0 4
39705: PUSH
39706: DOUBLE
39707: LD_INT 1
39709: DEC
39710: ST_TO_ADDR
39711: LD_VAR 0 1
39715: PUSH
39716: FOR_TO
39717: IFFALSE 39755
// if array1 [ i ] <> array2 [ i ] then
39719: LD_VAR 0 1
39723: PUSH
39724: LD_VAR 0 4
39728: ARRAY
39729: PUSH
39730: LD_VAR 0 2
39734: PUSH
39735: LD_VAR 0 4
39739: ARRAY
39740: NONEQUAL
39741: IFFALSE 39753
// begin result := false ;
39743: LD_ADDR_VAR 0 3
39747: PUSH
39748: LD_INT 0
39750: ST_TO_ADDR
// break ;
39751: GO 39755
// end ;
39753: GO 39716
39755: POP
39756: POP
// end ;
39757: LD_VAR 0 3
39761: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39762: LD_INT 0
39764: PPUSH
39765: PPUSH
39766: PPUSH
// pom := GetBase ( fac ) ;
39767: LD_ADDR_VAR 0 5
39771: PUSH
39772: LD_VAR 0 1
39776: PPUSH
39777: CALL_OW 274
39781: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39782: LD_ADDR_VAR 0 4
39786: PUSH
39787: LD_VAR 0 2
39791: PUSH
39792: LD_INT 1
39794: ARRAY
39795: PPUSH
39796: LD_VAR 0 2
39800: PUSH
39801: LD_INT 2
39803: ARRAY
39804: PPUSH
39805: LD_VAR 0 2
39809: PUSH
39810: LD_INT 3
39812: ARRAY
39813: PPUSH
39814: LD_VAR 0 2
39818: PUSH
39819: LD_INT 4
39821: ARRAY
39822: PPUSH
39823: CALL_OW 449
39827: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39828: LD_ADDR_VAR 0 3
39832: PUSH
39833: LD_VAR 0 5
39837: PPUSH
39838: LD_INT 1
39840: PPUSH
39841: CALL_OW 275
39845: PUSH
39846: LD_VAR 0 4
39850: PUSH
39851: LD_INT 1
39853: ARRAY
39854: GREATEREQUAL
39855: PUSH
39856: LD_VAR 0 5
39860: PPUSH
39861: LD_INT 2
39863: PPUSH
39864: CALL_OW 275
39868: PUSH
39869: LD_VAR 0 4
39873: PUSH
39874: LD_INT 2
39876: ARRAY
39877: GREATEREQUAL
39878: AND
39879: PUSH
39880: LD_VAR 0 5
39884: PPUSH
39885: LD_INT 3
39887: PPUSH
39888: CALL_OW 275
39892: PUSH
39893: LD_VAR 0 4
39897: PUSH
39898: LD_INT 3
39900: ARRAY
39901: GREATEREQUAL
39902: AND
39903: ST_TO_ADDR
// end ;
39904: LD_VAR 0 3
39908: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39909: LD_INT 0
39911: PPUSH
39912: PPUSH
39913: PPUSH
39914: PPUSH
// pom := GetBase ( building ) ;
39915: LD_ADDR_VAR 0 3
39919: PUSH
39920: LD_VAR 0 1
39924: PPUSH
39925: CALL_OW 274
39929: ST_TO_ADDR
// if not pom then
39930: LD_VAR 0 3
39934: NOT
39935: IFFALSE 39939
// exit ;
39937: GO 40109
// btype := GetBType ( building ) ;
39939: LD_ADDR_VAR 0 5
39943: PUSH
39944: LD_VAR 0 1
39948: PPUSH
39949: CALL_OW 266
39953: ST_TO_ADDR
// if btype = b_armoury then
39954: LD_VAR 0 5
39958: PUSH
39959: LD_INT 4
39961: EQUAL
39962: IFFALSE 39972
// btype := b_barracks ;
39964: LD_ADDR_VAR 0 5
39968: PUSH
39969: LD_INT 5
39971: ST_TO_ADDR
// if btype = b_depot then
39972: LD_VAR 0 5
39976: PUSH
39977: LD_INT 0
39979: EQUAL
39980: IFFALSE 39990
// btype := b_warehouse ;
39982: LD_ADDR_VAR 0 5
39986: PUSH
39987: LD_INT 1
39989: ST_TO_ADDR
// if btype = b_workshop then
39990: LD_VAR 0 5
39994: PUSH
39995: LD_INT 2
39997: EQUAL
39998: IFFALSE 40008
// btype := b_factory ;
40000: LD_ADDR_VAR 0 5
40004: PUSH
40005: LD_INT 3
40007: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40008: LD_ADDR_VAR 0 4
40012: PUSH
40013: LD_VAR 0 5
40017: PPUSH
40018: LD_VAR 0 1
40022: PPUSH
40023: CALL_OW 248
40027: PPUSH
40028: CALL_OW 450
40032: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40033: LD_ADDR_VAR 0 2
40037: PUSH
40038: LD_VAR 0 3
40042: PPUSH
40043: LD_INT 1
40045: PPUSH
40046: CALL_OW 275
40050: PUSH
40051: LD_VAR 0 4
40055: PUSH
40056: LD_INT 1
40058: ARRAY
40059: GREATEREQUAL
40060: PUSH
40061: LD_VAR 0 3
40065: PPUSH
40066: LD_INT 2
40068: PPUSH
40069: CALL_OW 275
40073: PUSH
40074: LD_VAR 0 4
40078: PUSH
40079: LD_INT 2
40081: ARRAY
40082: GREATEREQUAL
40083: AND
40084: PUSH
40085: LD_VAR 0 3
40089: PPUSH
40090: LD_INT 3
40092: PPUSH
40093: CALL_OW 275
40097: PUSH
40098: LD_VAR 0 4
40102: PUSH
40103: LD_INT 3
40105: ARRAY
40106: GREATEREQUAL
40107: AND
40108: ST_TO_ADDR
// end ;
40109: LD_VAR 0 2
40113: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40114: LD_INT 0
40116: PPUSH
40117: PPUSH
40118: PPUSH
// pom := GetBase ( building ) ;
40119: LD_ADDR_VAR 0 4
40123: PUSH
40124: LD_VAR 0 1
40128: PPUSH
40129: CALL_OW 274
40133: ST_TO_ADDR
// if not pom then
40134: LD_VAR 0 4
40138: NOT
40139: IFFALSE 40143
// exit ;
40141: GO 40244
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40143: LD_ADDR_VAR 0 5
40147: PUSH
40148: LD_VAR 0 2
40152: PPUSH
40153: LD_VAR 0 1
40157: PPUSH
40158: CALL_OW 248
40162: PPUSH
40163: CALL_OW 450
40167: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40168: LD_ADDR_VAR 0 3
40172: PUSH
40173: LD_VAR 0 4
40177: PPUSH
40178: LD_INT 1
40180: PPUSH
40181: CALL_OW 275
40185: PUSH
40186: LD_VAR 0 5
40190: PUSH
40191: LD_INT 1
40193: ARRAY
40194: GREATEREQUAL
40195: PUSH
40196: LD_VAR 0 4
40200: PPUSH
40201: LD_INT 2
40203: PPUSH
40204: CALL_OW 275
40208: PUSH
40209: LD_VAR 0 5
40213: PUSH
40214: LD_INT 2
40216: ARRAY
40217: GREATEREQUAL
40218: AND
40219: PUSH
40220: LD_VAR 0 4
40224: PPUSH
40225: LD_INT 3
40227: PPUSH
40228: CALL_OW 275
40232: PUSH
40233: LD_VAR 0 5
40237: PUSH
40238: LD_INT 3
40240: ARRAY
40241: GREATEREQUAL
40242: AND
40243: ST_TO_ADDR
// end ;
40244: LD_VAR 0 3
40248: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40249: LD_INT 0
40251: PPUSH
40252: PPUSH
40253: PPUSH
40254: PPUSH
40255: PPUSH
40256: PPUSH
40257: PPUSH
40258: PPUSH
40259: PPUSH
40260: PPUSH
40261: PPUSH
// result := false ;
40262: LD_ADDR_VAR 0 8
40266: PUSH
40267: LD_INT 0
40269: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40270: LD_VAR 0 5
40274: NOT
40275: PUSH
40276: LD_VAR 0 1
40280: NOT
40281: OR
40282: PUSH
40283: LD_VAR 0 2
40287: NOT
40288: OR
40289: PUSH
40290: LD_VAR 0 3
40294: NOT
40295: OR
40296: IFFALSE 40300
// exit ;
40298: GO 41114
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40300: LD_ADDR_VAR 0 14
40304: PUSH
40305: LD_VAR 0 1
40309: PPUSH
40310: LD_VAR 0 2
40314: PPUSH
40315: LD_VAR 0 3
40319: PPUSH
40320: LD_VAR 0 4
40324: PPUSH
40325: LD_VAR 0 5
40329: PUSH
40330: LD_INT 1
40332: ARRAY
40333: PPUSH
40334: CALL_OW 248
40338: PPUSH
40339: LD_INT 0
40341: PPUSH
40342: CALL 42347 0 6
40346: ST_TO_ADDR
// if not hexes then
40347: LD_VAR 0 14
40351: NOT
40352: IFFALSE 40356
// exit ;
40354: GO 41114
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40356: LD_ADDR_VAR 0 17
40360: PUSH
40361: LD_VAR 0 5
40365: PPUSH
40366: LD_INT 22
40368: PUSH
40369: LD_VAR 0 13
40373: PPUSH
40374: CALL_OW 255
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 2
40385: PUSH
40386: LD_INT 30
40388: PUSH
40389: LD_INT 0
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 30
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: LIST
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PPUSH
40415: CALL_OW 72
40419: ST_TO_ADDR
// for i = 1 to hexes do
40420: LD_ADDR_VAR 0 9
40424: PUSH
40425: DOUBLE
40426: LD_INT 1
40428: DEC
40429: ST_TO_ADDR
40430: LD_VAR 0 14
40434: PUSH
40435: FOR_TO
40436: IFFALSE 41112
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40438: LD_ADDR_VAR 0 13
40442: PUSH
40443: LD_VAR 0 14
40447: PUSH
40448: LD_VAR 0 9
40452: ARRAY
40453: PUSH
40454: LD_INT 1
40456: ARRAY
40457: PPUSH
40458: LD_VAR 0 14
40462: PUSH
40463: LD_VAR 0 9
40467: ARRAY
40468: PUSH
40469: LD_INT 2
40471: ARRAY
40472: PPUSH
40473: CALL_OW 428
40477: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40478: LD_VAR 0 14
40482: PUSH
40483: LD_VAR 0 9
40487: ARRAY
40488: PUSH
40489: LD_INT 1
40491: ARRAY
40492: PPUSH
40493: LD_VAR 0 14
40497: PUSH
40498: LD_VAR 0 9
40502: ARRAY
40503: PUSH
40504: LD_INT 2
40506: ARRAY
40507: PPUSH
40508: CALL_OW 351
40512: PUSH
40513: LD_VAR 0 14
40517: PUSH
40518: LD_VAR 0 9
40522: ARRAY
40523: PUSH
40524: LD_INT 1
40526: ARRAY
40527: PPUSH
40528: LD_VAR 0 14
40532: PUSH
40533: LD_VAR 0 9
40537: ARRAY
40538: PUSH
40539: LD_INT 2
40541: ARRAY
40542: PPUSH
40543: CALL_OW 488
40547: NOT
40548: OR
40549: PUSH
40550: LD_VAR 0 13
40554: PPUSH
40555: CALL_OW 247
40559: PUSH
40560: LD_INT 3
40562: EQUAL
40563: OR
40564: IFFALSE 40570
// exit ;
40566: POP
40567: POP
40568: GO 41114
// if not tmp then
40570: LD_VAR 0 13
40574: NOT
40575: IFFALSE 40579
// continue ;
40577: GO 40435
// result := true ;
40579: LD_ADDR_VAR 0 8
40583: PUSH
40584: LD_INT 1
40586: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40587: LD_VAR 0 6
40591: PUSH
40592: LD_VAR 0 13
40596: PPUSH
40597: CALL_OW 247
40601: PUSH
40602: LD_INT 2
40604: EQUAL
40605: AND
40606: PUSH
40607: LD_VAR 0 13
40611: PPUSH
40612: CALL_OW 263
40616: PUSH
40617: LD_INT 1
40619: EQUAL
40620: AND
40621: IFFALSE 40785
// begin if IsDrivenBy ( tmp ) then
40623: LD_VAR 0 13
40627: PPUSH
40628: CALL_OW 311
40632: IFFALSE 40636
// continue ;
40634: GO 40435
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40636: LD_VAR 0 6
40640: PPUSH
40641: LD_INT 3
40643: PUSH
40644: LD_INT 60
40646: PUSH
40647: EMPTY
40648: LIST
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 3
40656: PUSH
40657: LD_INT 55
40659: PUSH
40660: EMPTY
40661: LIST
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PPUSH
40671: CALL_OW 72
40675: IFFALSE 40783
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40677: LD_ADDR_VAR 0 18
40681: PUSH
40682: LD_VAR 0 6
40686: PPUSH
40687: LD_INT 3
40689: PUSH
40690: LD_INT 60
40692: PUSH
40693: EMPTY
40694: LIST
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 3
40702: PUSH
40703: LD_INT 55
40705: PUSH
40706: EMPTY
40707: LIST
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PPUSH
40717: CALL_OW 72
40721: PUSH
40722: LD_INT 1
40724: ARRAY
40725: ST_TO_ADDR
// if IsInUnit ( driver ) then
40726: LD_VAR 0 18
40730: PPUSH
40731: CALL_OW 310
40735: IFFALSE 40746
// ComExit ( driver ) ;
40737: LD_VAR 0 18
40741: PPUSH
40742: CALL 66108 0 1
// AddComEnterUnit ( driver , tmp ) ;
40746: LD_VAR 0 18
40750: PPUSH
40751: LD_VAR 0 13
40755: PPUSH
40756: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40760: LD_VAR 0 18
40764: PPUSH
40765: LD_VAR 0 7
40769: PPUSH
40770: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40774: LD_VAR 0 18
40778: PPUSH
40779: CALL_OW 181
// end ; continue ;
40783: GO 40435
// end ; if not cleaners or not tmp in cleaners then
40785: LD_VAR 0 6
40789: NOT
40790: PUSH
40791: LD_VAR 0 13
40795: PUSH
40796: LD_VAR 0 6
40800: IN
40801: NOT
40802: OR
40803: IFFALSE 41110
// begin if dep then
40805: LD_VAR 0 17
40809: IFFALSE 40945
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40811: LD_ADDR_VAR 0 16
40815: PUSH
40816: LD_VAR 0 17
40820: PUSH
40821: LD_INT 1
40823: ARRAY
40824: PPUSH
40825: CALL_OW 250
40829: PPUSH
40830: LD_VAR 0 17
40834: PUSH
40835: LD_INT 1
40837: ARRAY
40838: PPUSH
40839: CALL_OW 254
40843: PPUSH
40844: LD_INT 5
40846: PPUSH
40847: CALL_OW 272
40851: PUSH
40852: LD_VAR 0 17
40856: PUSH
40857: LD_INT 1
40859: ARRAY
40860: PPUSH
40861: CALL_OW 251
40865: PPUSH
40866: LD_VAR 0 17
40870: PUSH
40871: LD_INT 1
40873: ARRAY
40874: PPUSH
40875: CALL_OW 254
40879: PPUSH
40880: LD_INT 5
40882: PPUSH
40883: CALL_OW 273
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40892: LD_VAR 0 16
40896: PUSH
40897: LD_INT 1
40899: ARRAY
40900: PPUSH
40901: LD_VAR 0 16
40905: PUSH
40906: LD_INT 2
40908: ARRAY
40909: PPUSH
40910: CALL_OW 488
40914: IFFALSE 40945
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40916: LD_VAR 0 13
40920: PPUSH
40921: LD_VAR 0 16
40925: PUSH
40926: LD_INT 1
40928: ARRAY
40929: PPUSH
40930: LD_VAR 0 16
40934: PUSH
40935: LD_INT 2
40937: ARRAY
40938: PPUSH
40939: CALL_OW 111
// continue ;
40943: GO 40435
// end ; end ; r := GetDir ( tmp ) ;
40945: LD_ADDR_VAR 0 15
40949: PUSH
40950: LD_VAR 0 13
40954: PPUSH
40955: CALL_OW 254
40959: ST_TO_ADDR
// if r = 5 then
40960: LD_VAR 0 15
40964: PUSH
40965: LD_INT 5
40967: EQUAL
40968: IFFALSE 40978
// r := 0 ;
40970: LD_ADDR_VAR 0 15
40974: PUSH
40975: LD_INT 0
40977: ST_TO_ADDR
// for j = r to 5 do
40978: LD_ADDR_VAR 0 10
40982: PUSH
40983: DOUBLE
40984: LD_VAR 0 15
40988: DEC
40989: ST_TO_ADDR
40990: LD_INT 5
40992: PUSH
40993: FOR_TO
40994: IFFALSE 41108
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40996: LD_ADDR_VAR 0 11
41000: PUSH
41001: LD_VAR 0 13
41005: PPUSH
41006: CALL_OW 250
41010: PPUSH
41011: LD_VAR 0 10
41015: PPUSH
41016: LD_INT 2
41018: PPUSH
41019: CALL_OW 272
41023: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41024: LD_ADDR_VAR 0 12
41028: PUSH
41029: LD_VAR 0 13
41033: PPUSH
41034: CALL_OW 251
41038: PPUSH
41039: LD_VAR 0 10
41043: PPUSH
41044: LD_INT 2
41046: PPUSH
41047: CALL_OW 273
41051: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41052: LD_VAR 0 11
41056: PPUSH
41057: LD_VAR 0 12
41061: PPUSH
41062: CALL_OW 488
41066: PUSH
41067: LD_VAR 0 11
41071: PPUSH
41072: LD_VAR 0 12
41076: PPUSH
41077: CALL_OW 428
41081: NOT
41082: AND
41083: IFFALSE 41106
// begin ComMoveXY ( tmp , _x , _y ) ;
41085: LD_VAR 0 13
41089: PPUSH
41090: LD_VAR 0 11
41094: PPUSH
41095: LD_VAR 0 12
41099: PPUSH
41100: CALL_OW 111
// break ;
41104: GO 41108
// end ; end ;
41106: GO 40993
41108: POP
41109: POP
// end ; end ;
41110: GO 40435
41112: POP
41113: POP
// end ;
41114: LD_VAR 0 8
41118: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41119: LD_INT 0
41121: PPUSH
// result := true ;
41122: LD_ADDR_VAR 0 3
41126: PUSH
41127: LD_INT 1
41129: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41130: LD_VAR 0 2
41134: PUSH
41135: LD_INT 24
41137: DOUBLE
41138: EQUAL
41139: IFTRUE 41149
41141: LD_INT 33
41143: DOUBLE
41144: EQUAL
41145: IFTRUE 41149
41147: GO 41174
41149: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41150: LD_ADDR_VAR 0 3
41154: PUSH
41155: LD_INT 32
41157: PPUSH
41158: LD_VAR 0 1
41162: PPUSH
41163: CALL_OW 321
41167: PUSH
41168: LD_INT 2
41170: EQUAL
41171: ST_TO_ADDR
41172: GO 41490
41174: LD_INT 20
41176: DOUBLE
41177: EQUAL
41178: IFTRUE 41182
41180: GO 41207
41182: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41183: LD_ADDR_VAR 0 3
41187: PUSH
41188: LD_INT 6
41190: PPUSH
41191: LD_VAR 0 1
41195: PPUSH
41196: CALL_OW 321
41200: PUSH
41201: LD_INT 2
41203: EQUAL
41204: ST_TO_ADDR
41205: GO 41490
41207: LD_INT 22
41209: DOUBLE
41210: EQUAL
41211: IFTRUE 41221
41213: LD_INT 36
41215: DOUBLE
41216: EQUAL
41217: IFTRUE 41221
41219: GO 41246
41221: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41222: LD_ADDR_VAR 0 3
41226: PUSH
41227: LD_INT 15
41229: PPUSH
41230: LD_VAR 0 1
41234: PPUSH
41235: CALL_OW 321
41239: PUSH
41240: LD_INT 2
41242: EQUAL
41243: ST_TO_ADDR
41244: GO 41490
41246: LD_INT 30
41248: DOUBLE
41249: EQUAL
41250: IFTRUE 41254
41252: GO 41279
41254: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41255: LD_ADDR_VAR 0 3
41259: PUSH
41260: LD_INT 20
41262: PPUSH
41263: LD_VAR 0 1
41267: PPUSH
41268: CALL_OW 321
41272: PUSH
41273: LD_INT 2
41275: EQUAL
41276: ST_TO_ADDR
41277: GO 41490
41279: LD_INT 28
41281: DOUBLE
41282: EQUAL
41283: IFTRUE 41293
41285: LD_INT 21
41287: DOUBLE
41288: EQUAL
41289: IFTRUE 41293
41291: GO 41318
41293: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41294: LD_ADDR_VAR 0 3
41298: PUSH
41299: LD_INT 21
41301: PPUSH
41302: LD_VAR 0 1
41306: PPUSH
41307: CALL_OW 321
41311: PUSH
41312: LD_INT 2
41314: EQUAL
41315: ST_TO_ADDR
41316: GO 41490
41318: LD_INT 16
41320: DOUBLE
41321: EQUAL
41322: IFTRUE 41326
41324: GO 41351
41326: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41327: LD_ADDR_VAR 0 3
41331: PUSH
41332: LD_INT 84
41334: PPUSH
41335: LD_VAR 0 1
41339: PPUSH
41340: CALL_OW 321
41344: PUSH
41345: LD_INT 2
41347: EQUAL
41348: ST_TO_ADDR
41349: GO 41490
41351: LD_INT 19
41353: DOUBLE
41354: EQUAL
41355: IFTRUE 41365
41357: LD_INT 23
41359: DOUBLE
41360: EQUAL
41361: IFTRUE 41365
41363: GO 41390
41365: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41366: LD_ADDR_VAR 0 3
41370: PUSH
41371: LD_INT 83
41373: PPUSH
41374: LD_VAR 0 1
41378: PPUSH
41379: CALL_OW 321
41383: PUSH
41384: LD_INT 2
41386: EQUAL
41387: ST_TO_ADDR
41388: GO 41490
41390: LD_INT 17
41392: DOUBLE
41393: EQUAL
41394: IFTRUE 41398
41396: GO 41423
41398: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41399: LD_ADDR_VAR 0 3
41403: PUSH
41404: LD_INT 39
41406: PPUSH
41407: LD_VAR 0 1
41411: PPUSH
41412: CALL_OW 321
41416: PUSH
41417: LD_INT 2
41419: EQUAL
41420: ST_TO_ADDR
41421: GO 41490
41423: LD_INT 18
41425: DOUBLE
41426: EQUAL
41427: IFTRUE 41431
41429: GO 41456
41431: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41432: LD_ADDR_VAR 0 3
41436: PUSH
41437: LD_INT 40
41439: PPUSH
41440: LD_VAR 0 1
41444: PPUSH
41445: CALL_OW 321
41449: PUSH
41450: LD_INT 2
41452: EQUAL
41453: ST_TO_ADDR
41454: GO 41490
41456: LD_INT 27
41458: DOUBLE
41459: EQUAL
41460: IFTRUE 41464
41462: GO 41489
41464: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41465: LD_ADDR_VAR 0 3
41469: PUSH
41470: LD_INT 35
41472: PPUSH
41473: LD_VAR 0 1
41477: PPUSH
41478: CALL_OW 321
41482: PUSH
41483: LD_INT 2
41485: EQUAL
41486: ST_TO_ADDR
41487: GO 41490
41489: POP
// end ;
41490: LD_VAR 0 3
41494: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41495: LD_INT 0
41497: PPUSH
41498: PPUSH
41499: PPUSH
41500: PPUSH
41501: PPUSH
41502: PPUSH
41503: PPUSH
41504: PPUSH
41505: PPUSH
41506: PPUSH
41507: PPUSH
// result := false ;
41508: LD_ADDR_VAR 0 6
41512: PUSH
41513: LD_INT 0
41515: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41516: LD_VAR 0 1
41520: NOT
41521: PUSH
41522: LD_VAR 0 1
41526: PPUSH
41527: CALL_OW 266
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: LD_INT 1
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: IN
41542: NOT
41543: OR
41544: PUSH
41545: LD_VAR 0 2
41549: NOT
41550: OR
41551: PUSH
41552: LD_VAR 0 5
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: LD_INT 2
41565: PUSH
41566: LD_INT 3
41568: PUSH
41569: LD_INT 4
41571: PUSH
41572: LD_INT 5
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: IN
41583: NOT
41584: OR
41585: PUSH
41586: LD_VAR 0 3
41590: PPUSH
41591: LD_VAR 0 4
41595: PPUSH
41596: CALL_OW 488
41600: NOT
41601: OR
41602: IFFALSE 41606
// exit ;
41604: GO 42342
// side := GetSide ( depot ) ;
41606: LD_ADDR_VAR 0 9
41610: PUSH
41611: LD_VAR 0 1
41615: PPUSH
41616: CALL_OW 255
41620: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41621: LD_VAR 0 9
41625: PPUSH
41626: LD_VAR 0 2
41630: PPUSH
41631: CALL 41119 0 2
41635: NOT
41636: IFFALSE 41640
// exit ;
41638: GO 42342
// pom := GetBase ( depot ) ;
41640: LD_ADDR_VAR 0 10
41644: PUSH
41645: LD_VAR 0 1
41649: PPUSH
41650: CALL_OW 274
41654: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41655: LD_ADDR_VAR 0 11
41659: PUSH
41660: LD_VAR 0 2
41664: PPUSH
41665: LD_VAR 0 1
41669: PPUSH
41670: CALL_OW 248
41674: PPUSH
41675: CALL_OW 450
41679: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41680: LD_VAR 0 10
41684: PPUSH
41685: LD_INT 1
41687: PPUSH
41688: CALL_OW 275
41692: PUSH
41693: LD_VAR 0 11
41697: PUSH
41698: LD_INT 1
41700: ARRAY
41701: GREATEREQUAL
41702: PUSH
41703: LD_VAR 0 10
41707: PPUSH
41708: LD_INT 2
41710: PPUSH
41711: CALL_OW 275
41715: PUSH
41716: LD_VAR 0 11
41720: PUSH
41721: LD_INT 2
41723: ARRAY
41724: GREATEREQUAL
41725: AND
41726: PUSH
41727: LD_VAR 0 10
41731: PPUSH
41732: LD_INT 3
41734: PPUSH
41735: CALL_OW 275
41739: PUSH
41740: LD_VAR 0 11
41744: PUSH
41745: LD_INT 3
41747: ARRAY
41748: GREATEREQUAL
41749: AND
41750: NOT
41751: IFFALSE 41755
// exit ;
41753: GO 42342
// if GetBType ( depot ) = b_depot then
41755: LD_VAR 0 1
41759: PPUSH
41760: CALL_OW 266
41764: PUSH
41765: LD_INT 0
41767: EQUAL
41768: IFFALSE 41780
// dist := 28 else
41770: LD_ADDR_VAR 0 14
41774: PUSH
41775: LD_INT 28
41777: ST_TO_ADDR
41778: GO 41788
// dist := 36 ;
41780: LD_ADDR_VAR 0 14
41784: PUSH
41785: LD_INT 36
41787: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41788: LD_VAR 0 1
41792: PPUSH
41793: LD_VAR 0 3
41797: PPUSH
41798: LD_VAR 0 4
41802: PPUSH
41803: CALL_OW 297
41807: PUSH
41808: LD_VAR 0 14
41812: GREATER
41813: IFFALSE 41817
// exit ;
41815: GO 42342
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41817: LD_ADDR_VAR 0 12
41821: PUSH
41822: LD_VAR 0 2
41826: PPUSH
41827: LD_VAR 0 3
41831: PPUSH
41832: LD_VAR 0 4
41836: PPUSH
41837: LD_VAR 0 5
41841: PPUSH
41842: LD_VAR 0 1
41846: PPUSH
41847: CALL_OW 248
41851: PPUSH
41852: LD_INT 0
41854: PPUSH
41855: CALL 42347 0 6
41859: ST_TO_ADDR
// if not hexes then
41860: LD_VAR 0 12
41864: NOT
41865: IFFALSE 41869
// exit ;
41867: GO 42342
// hex := GetHexInfo ( x , y ) ;
41869: LD_ADDR_VAR 0 15
41873: PUSH
41874: LD_VAR 0 3
41878: PPUSH
41879: LD_VAR 0 4
41883: PPUSH
41884: CALL_OW 546
41888: ST_TO_ADDR
// if hex [ 1 ] then
41889: LD_VAR 0 15
41893: PUSH
41894: LD_INT 1
41896: ARRAY
41897: IFFALSE 41901
// exit ;
41899: GO 42342
// height := hex [ 2 ] ;
41901: LD_ADDR_VAR 0 13
41905: PUSH
41906: LD_VAR 0 15
41910: PUSH
41911: LD_INT 2
41913: ARRAY
41914: ST_TO_ADDR
// for i = 1 to hexes do
41915: LD_ADDR_VAR 0 7
41919: PUSH
41920: DOUBLE
41921: LD_INT 1
41923: DEC
41924: ST_TO_ADDR
41925: LD_VAR 0 12
41929: PUSH
41930: FOR_TO
41931: IFFALSE 42261
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
41933: LD_VAR 0 12
41937: PUSH
41938: LD_VAR 0 7
41942: ARRAY
41943: PUSH
41944: LD_INT 1
41946: ARRAY
41947: PPUSH
41948: LD_VAR 0 12
41952: PUSH
41953: LD_VAR 0 7
41957: ARRAY
41958: PUSH
41959: LD_INT 2
41961: ARRAY
41962: PPUSH
41963: CALL_OW 488
41967: NOT
41968: PUSH
41969: LD_VAR 0 12
41973: PUSH
41974: LD_VAR 0 7
41978: ARRAY
41979: PUSH
41980: LD_INT 1
41982: ARRAY
41983: PPUSH
41984: LD_VAR 0 12
41988: PUSH
41989: LD_VAR 0 7
41993: ARRAY
41994: PUSH
41995: LD_INT 2
41997: ARRAY
41998: PPUSH
41999: CALL_OW 428
42003: PUSH
42004: LD_INT 0
42006: GREATER
42007: OR
42008: PUSH
42009: LD_VAR 0 12
42013: PUSH
42014: LD_VAR 0 7
42018: ARRAY
42019: PUSH
42020: LD_INT 1
42022: ARRAY
42023: PPUSH
42024: LD_VAR 0 12
42028: PUSH
42029: LD_VAR 0 7
42033: ARRAY
42034: PUSH
42035: LD_INT 2
42037: ARRAY
42038: PPUSH
42039: CALL_OW 351
42043: OR
42044: IFFALSE 42050
// exit ;
42046: POP
42047: POP
42048: GO 42342
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42050: LD_ADDR_VAR 0 8
42054: PUSH
42055: LD_VAR 0 12
42059: PUSH
42060: LD_VAR 0 7
42064: ARRAY
42065: PUSH
42066: LD_INT 1
42068: ARRAY
42069: PPUSH
42070: LD_VAR 0 12
42074: PUSH
42075: LD_VAR 0 7
42079: ARRAY
42080: PUSH
42081: LD_INT 2
42083: ARRAY
42084: PPUSH
42085: CALL_OW 546
42089: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42090: LD_VAR 0 8
42094: PUSH
42095: LD_INT 1
42097: ARRAY
42098: PUSH
42099: LD_VAR 0 8
42103: PUSH
42104: LD_INT 2
42106: ARRAY
42107: PUSH
42108: LD_VAR 0 13
42112: PUSH
42113: LD_INT 2
42115: PLUS
42116: GREATER
42117: OR
42118: PUSH
42119: LD_VAR 0 8
42123: PUSH
42124: LD_INT 2
42126: ARRAY
42127: PUSH
42128: LD_VAR 0 13
42132: PUSH
42133: LD_INT 2
42135: MINUS
42136: LESS
42137: OR
42138: PUSH
42139: LD_VAR 0 8
42143: PUSH
42144: LD_INT 3
42146: ARRAY
42147: PUSH
42148: LD_INT 0
42150: PUSH
42151: LD_INT 8
42153: PUSH
42154: LD_INT 9
42156: PUSH
42157: LD_INT 10
42159: PUSH
42160: LD_INT 11
42162: PUSH
42163: LD_INT 12
42165: PUSH
42166: LD_INT 13
42168: PUSH
42169: LD_INT 16
42171: PUSH
42172: LD_INT 17
42174: PUSH
42175: LD_INT 18
42177: PUSH
42178: LD_INT 19
42180: PUSH
42181: LD_INT 20
42183: PUSH
42184: LD_INT 21
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: IN
42202: NOT
42203: OR
42204: PUSH
42205: LD_VAR 0 8
42209: PUSH
42210: LD_INT 5
42212: ARRAY
42213: NOT
42214: OR
42215: PUSH
42216: LD_VAR 0 8
42220: PUSH
42221: LD_INT 6
42223: ARRAY
42224: PUSH
42225: LD_INT 1
42227: PUSH
42228: LD_INT 2
42230: PUSH
42231: LD_INT 7
42233: PUSH
42234: LD_INT 9
42236: PUSH
42237: LD_INT 10
42239: PUSH
42240: LD_INT 11
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: IN
42251: NOT
42252: OR
42253: IFFALSE 42259
// exit ;
42255: POP
42256: POP
42257: GO 42342
// end ;
42259: GO 41930
42261: POP
42262: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42263: LD_VAR 0 9
42267: PPUSH
42268: LD_VAR 0 3
42272: PPUSH
42273: LD_VAR 0 4
42277: PPUSH
42278: LD_INT 20
42280: PPUSH
42281: CALL 34294 0 4
42285: PUSH
42286: LD_INT 4
42288: ARRAY
42289: IFFALSE 42293
// exit ;
42291: GO 42342
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42293: LD_VAR 0 2
42297: PUSH
42298: LD_INT 29
42300: PUSH
42301: LD_INT 30
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: IN
42308: PUSH
42309: LD_VAR 0 3
42313: PPUSH
42314: LD_VAR 0 4
42318: PPUSH
42319: LD_VAR 0 9
42323: PPUSH
42324: CALL_OW 440
42328: NOT
42329: AND
42330: IFFALSE 42334
// exit ;
42332: GO 42342
// result := true ;
42334: LD_ADDR_VAR 0 6
42338: PUSH
42339: LD_INT 1
42341: ST_TO_ADDR
// end ;
42342: LD_VAR 0 6
42346: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42347: LD_INT 0
42349: PPUSH
42350: PPUSH
42351: PPUSH
42352: PPUSH
42353: PPUSH
42354: PPUSH
42355: PPUSH
42356: PPUSH
42357: PPUSH
42358: PPUSH
42359: PPUSH
42360: PPUSH
42361: PPUSH
42362: PPUSH
42363: PPUSH
42364: PPUSH
42365: PPUSH
42366: PPUSH
42367: PPUSH
42368: PPUSH
42369: PPUSH
42370: PPUSH
42371: PPUSH
42372: PPUSH
42373: PPUSH
42374: PPUSH
42375: PPUSH
42376: PPUSH
42377: PPUSH
42378: PPUSH
42379: PPUSH
42380: PPUSH
42381: PPUSH
42382: PPUSH
42383: PPUSH
42384: PPUSH
42385: PPUSH
42386: PPUSH
42387: PPUSH
42388: PPUSH
42389: PPUSH
42390: PPUSH
42391: PPUSH
42392: PPUSH
42393: PPUSH
42394: PPUSH
42395: PPUSH
42396: PPUSH
42397: PPUSH
42398: PPUSH
42399: PPUSH
42400: PPUSH
42401: PPUSH
42402: PPUSH
42403: PPUSH
42404: PPUSH
42405: PPUSH
42406: PPUSH
// result = [ ] ;
42407: LD_ADDR_VAR 0 7
42411: PUSH
42412: EMPTY
42413: ST_TO_ADDR
// temp_list = [ ] ;
42414: LD_ADDR_VAR 0 9
42418: PUSH
42419: EMPTY
42420: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42421: LD_VAR 0 4
42425: PUSH
42426: LD_INT 0
42428: PUSH
42429: LD_INT 1
42431: PUSH
42432: LD_INT 2
42434: PUSH
42435: LD_INT 3
42437: PUSH
42438: LD_INT 4
42440: PUSH
42441: LD_INT 5
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: IN
42452: NOT
42453: PUSH
42454: LD_VAR 0 1
42458: PUSH
42459: LD_INT 0
42461: PUSH
42462: LD_INT 1
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: IN
42469: PUSH
42470: LD_VAR 0 5
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: LD_INT 2
42480: PUSH
42481: LD_INT 3
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: LIST
42488: IN
42489: NOT
42490: AND
42491: OR
42492: IFFALSE 42496
// exit ;
42494: GO 60887
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42496: LD_VAR 0 1
42500: PUSH
42501: LD_INT 6
42503: PUSH
42504: LD_INT 7
42506: PUSH
42507: LD_INT 8
42509: PUSH
42510: LD_INT 13
42512: PUSH
42513: LD_INT 12
42515: PUSH
42516: LD_INT 15
42518: PUSH
42519: LD_INT 11
42521: PUSH
42522: LD_INT 14
42524: PUSH
42525: LD_INT 10
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: IN
42539: IFFALSE 42549
// btype = b_lab ;
42541: LD_ADDR_VAR 0 1
42545: PUSH
42546: LD_INT 6
42548: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42549: LD_VAR 0 6
42553: PUSH
42554: LD_INT 0
42556: PUSH
42557: LD_INT 1
42559: PUSH
42560: LD_INT 2
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: LIST
42567: IN
42568: NOT
42569: PUSH
42570: LD_VAR 0 1
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: LD_INT 2
42583: PUSH
42584: LD_INT 3
42586: PUSH
42587: LD_INT 6
42589: PUSH
42590: LD_INT 36
42592: PUSH
42593: LD_INT 4
42595: PUSH
42596: LD_INT 5
42598: PUSH
42599: LD_INT 31
42601: PUSH
42602: LD_INT 32
42604: PUSH
42605: LD_INT 33
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: IN
42621: NOT
42622: PUSH
42623: LD_VAR 0 6
42627: PUSH
42628: LD_INT 1
42630: EQUAL
42631: AND
42632: OR
42633: PUSH
42634: LD_VAR 0 1
42638: PUSH
42639: LD_INT 2
42641: PUSH
42642: LD_INT 3
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: IN
42649: NOT
42650: PUSH
42651: LD_VAR 0 6
42655: PUSH
42656: LD_INT 2
42658: EQUAL
42659: AND
42660: OR
42661: IFFALSE 42671
// mode = 0 ;
42663: LD_ADDR_VAR 0 6
42667: PUSH
42668: LD_INT 0
42670: ST_TO_ADDR
// case mode of 0 :
42671: LD_VAR 0 6
42675: PUSH
42676: LD_INT 0
42678: DOUBLE
42679: EQUAL
42680: IFTRUE 42684
42682: GO 54137
42684: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42685: LD_ADDR_VAR 0 11
42689: PUSH
42690: LD_INT 0
42692: PUSH
42693: LD_INT 0
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 0
42702: PUSH
42703: LD_INT 1
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 1
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 1
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 0
42733: PUSH
42734: LD_INT 1
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 1
42743: NEG
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: NEG
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 1
42766: NEG
42767: PUSH
42768: LD_INT 2
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 0
42778: PUSH
42779: LD_INT 2
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 1
42789: PUSH
42790: LD_INT 1
42792: NEG
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: LD_INT 2
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: LD_INT 2
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: NEG
42821: PUSH
42822: LD_INT 1
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 1
42831: PUSH
42832: LD_INT 3
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: LD_INT 3
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: LD_INT 2
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42878: LD_ADDR_VAR 0 12
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: LD_INT 1
42898: NEG
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 1
42906: PUSH
42907: LD_INT 0
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: LD_INT 1
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 1
42936: NEG
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: LD_INT 1
42951: NEG
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 2
42980: PUSH
42981: LD_INT 1
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: NEG
42991: PUSH
42992: LD_INT 1
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 2
43001: NEG
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 2
43012: NEG
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 2
43024: NEG
43025: PUSH
43026: LD_INT 1
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 3
43035: NEG
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: PUSH
43044: LD_INT 3
43046: NEG
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43074: LD_ADDR_VAR 0 13
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: LD_INT 0
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: LD_INT 1
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 1
43102: PUSH
43103: LD_INT 0
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: LD_INT 1
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 1
43132: NEG
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: NEG
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 1
43155: NEG
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 2
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 2
43177: PUSH
43178: LD_INT 2
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: PUSH
43188: LD_INT 2
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 2
43197: NEG
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 2
43209: NEG
43210: PUSH
43211: LD_INT 2
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 2
43221: NEG
43222: PUSH
43223: LD_INT 3
43225: NEG
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 3
43233: NEG
43234: PUSH
43235: LD_INT 2
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 3
43245: NEG
43246: PUSH
43247: LD_INT 3
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43273: LD_ADDR_VAR 0 14
43277: PUSH
43278: LD_INT 0
43280: PUSH
43281: LD_INT 0
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 0
43290: PUSH
43291: LD_INT 1
43293: NEG
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: PUSH
43302: LD_INT 0
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 1
43311: PUSH
43312: LD_INT 1
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 0
43321: PUSH
43322: LD_INT 1
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: LD_INT 0
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 1
43354: NEG
43355: PUSH
43356: LD_INT 2
43358: NEG
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 0
43366: PUSH
43367: LD_INT 2
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: LD_INT 1
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 1
43388: PUSH
43389: LD_INT 2
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: LD_INT 2
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 1
43408: NEG
43409: PUSH
43410: LD_INT 1
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 1
43419: NEG
43420: PUSH
43421: LD_INT 3
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: LD_INT 3
43434: NEG
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 1
43442: PUSH
43443: LD_INT 2
43445: NEG
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43469: LD_ADDR_VAR 0 15
43473: PUSH
43474: LD_INT 0
43476: PUSH
43477: LD_INT 0
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 0
43486: PUSH
43487: LD_INT 1
43489: NEG
43490: PUSH
43491: EMPTY
43492: LIST
43493: LIST
43494: PUSH
43495: LD_INT 1
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 1
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: LD_INT 0
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 1
43538: NEG
43539: PUSH
43540: LD_INT 1
43542: NEG
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PUSH
43548: LD_INT 1
43550: PUSH
43551: LD_INT 1
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: LD_INT 2
43561: PUSH
43562: LD_INT 0
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: PUSH
43569: LD_INT 2
43571: PUSH
43572: LD_INT 1
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: PUSH
43579: LD_INT 1
43581: NEG
43582: PUSH
43583: LD_INT 1
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: LD_INT 1
43607: NEG
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 2
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 3
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 3
43636: PUSH
43637: LD_INT 1
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43662: LD_ADDR_VAR 0 16
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: LD_INT 1
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 0
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 1
43731: NEG
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: LD_INT 2
43747: NEG
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 2
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 2
43765: PUSH
43766: LD_INT 2
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: LD_INT 2
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 2
43785: NEG
43786: PUSH
43787: LD_INT 1
43789: NEG
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 2
43797: NEG
43798: PUSH
43799: LD_INT 2
43801: NEG
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 3
43809: PUSH
43810: LD_INT 2
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 3
43819: PUSH
43820: LD_INT 3
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 2
43829: PUSH
43830: LD_INT 3
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43855: LD_ADDR_VAR 0 17
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: LD_INT 1
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 0
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 1
43924: NEG
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 1
43936: NEG
43937: PUSH
43938: LD_INT 2
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: LD_INT 2
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 2
43970: PUSH
43971: LD_INT 0
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 2
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 2
43990: PUSH
43991: LD_INT 2
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: PUSH
44001: LD_INT 2
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: LD_INT 2
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 2
44031: NEG
44032: PUSH
44033: LD_INT 0
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 2
44042: NEG
44043: PUSH
44044: LD_INT 1
44046: NEG
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 2
44054: NEG
44055: PUSH
44056: LD_INT 2
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44085: LD_ADDR_VAR 0 18
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: LD_INT 0
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 0
44102: PUSH
44103: LD_INT 1
44105: NEG
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: LD_INT 0
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 1
44123: PUSH
44124: LD_INT 1
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: LD_INT 1
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: LD_INT 0
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 1
44154: NEG
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 1
44166: NEG
44167: PUSH
44168: LD_INT 2
44170: NEG
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: PUSH
44176: LD_INT 0
44178: PUSH
44179: LD_INT 2
44181: NEG
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 1
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: PUSH
44198: LD_INT 2
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 2
44210: PUSH
44211: LD_INT 1
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 2
44220: PUSH
44221: LD_INT 2
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: PUSH
44228: LD_INT 1
44230: PUSH
44231: LD_INT 2
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: LD_INT 0
44240: PUSH
44241: LD_INT 2
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: NEG
44251: PUSH
44252: LD_INT 1
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 2
44261: NEG
44262: PUSH
44263: LD_INT 0
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 2
44272: NEG
44273: PUSH
44274: LD_INT 1
44276: NEG
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 2
44284: NEG
44285: PUSH
44286: LD_INT 2
44288: NEG
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44315: LD_ADDR_VAR 0 19
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: LD_INT 0
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 1
44353: PUSH
44354: LD_INT 1
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 1
44396: NEG
44397: PUSH
44398: LD_INT 2
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: LD_INT 2
44411: NEG
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 2
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 2
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 2
44450: PUSH
44451: LD_INT 2
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: PUSH
44461: LD_INT 2
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 0
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 2
44491: NEG
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 2
44502: NEG
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 2
44514: NEG
44515: PUSH
44516: LD_INT 2
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: LIST
44528: LIST
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: LIST
44535: LIST
44536: LIST
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44545: LD_ADDR_VAR 0 20
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: LD_INT 0
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 1
44583: PUSH
44584: LD_INT 1
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 0
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 1
44603: NEG
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 1
44614: NEG
44615: PUSH
44616: LD_INT 1
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 1
44626: NEG
44627: PUSH
44628: LD_INT 2
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 0
44638: PUSH
44639: LD_INT 2
44641: NEG
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: LD_INT 1
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 2
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 2
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 2
44680: PUSH
44681: LD_INT 2
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: LD_INT 2
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: LD_INT 2
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: LD_INT 1
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 2
44721: NEG
44722: PUSH
44723: LD_INT 0
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 2
44732: NEG
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 2
44744: NEG
44745: PUSH
44746: LD_INT 2
44748: NEG
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44775: LD_ADDR_VAR 0 21
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: LD_INT 0
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 0
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: LD_INT 0
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 0
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: LD_INT 0
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: LD_INT 1
44848: NEG
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: LD_INT 2
44860: NEG
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: LD_INT 2
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: LD_INT 1
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 2
44890: PUSH
44891: LD_INT 0
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 2
44900: PUSH
44901: LD_INT 1
44903: PUSH
44904: EMPTY
44905: LIST
44906: LIST
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: LD_INT 2
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 0
44930: PUSH
44931: LD_INT 2
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 1
44940: NEG
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 2
44951: NEG
44952: PUSH
44953: LD_INT 0
44955: PUSH
44956: EMPTY
44957: LIST
44958: LIST
44959: PUSH
44960: LD_INT 2
44962: NEG
44963: PUSH
44964: LD_INT 1
44966: NEG
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 2
44974: NEG
44975: PUSH
44976: LD_INT 2
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45005: LD_ADDR_VAR 0 22
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: LD_INT 0
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: LD_INT 1
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: LD_INT 1
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 1
45074: NEG
45075: PUSH
45076: LD_INT 1
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: NEG
45087: PUSH
45088: LD_INT 2
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: LD_INT 2
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 2
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 2
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 2
45140: PUSH
45141: LD_INT 2
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: PUSH
45151: LD_INT 2
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: LD_INT 2
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 2
45181: NEG
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 2
45192: NEG
45193: PUSH
45194: LD_INT 1
45196: NEG
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 2
45204: NEG
45205: PUSH
45206: LD_INT 2
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45235: LD_ADDR_VAR 0 23
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: LD_INT 1
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: LD_INT 1
45308: NEG
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: LD_INT 2
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: LD_INT 2
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 2
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 2
45360: PUSH
45361: LD_INT 1
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 2
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: LD_INT 2
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: NEG
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 2
45411: NEG
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 2
45422: NEG
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: LD_INT 2
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 2
45446: NEG
45447: PUSH
45448: LD_INT 3
45450: NEG
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 1
45458: NEG
45459: PUSH
45460: LD_INT 3
45462: NEG
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: LD_INT 2
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 2
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: LIST
45501: LIST
45502: LIST
45503: LIST
45504: LIST
45505: LIST
45506: LIST
45507: LIST
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45515: LD_ADDR_VAR 0 24
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 1
45543: PUSH
45544: LD_INT 0
45546: PUSH
45547: EMPTY
45548: LIST
45549: LIST
45550: PUSH
45551: LD_INT 1
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PUSH
45575: LD_INT 0
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: NEG
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: LD_INT 2
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: LD_INT 2
45611: NEG
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 2
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 2
45640: PUSH
45641: LD_INT 1
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 2
45650: PUSH
45651: LD_INT 2
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: LD_INT 0
45670: PUSH
45671: LD_INT 2
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 2
45691: NEG
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 2
45702: NEG
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 2
45714: NEG
45715: PUSH
45716: LD_INT 2
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: LD_INT 2
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 2
45737: PUSH
45738: LD_INT 1
45740: NEG
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 3
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 3
45758: PUSH
45759: LD_INT 2
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45791: LD_ADDR_VAR 0 25
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: LD_INT 0
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: LD_INT 1
45811: NEG
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 1
45829: PUSH
45830: LD_INT 1
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: LD_INT 1
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 1
45860: NEG
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: NEG
45873: PUSH
45874: LD_INT 2
45876: NEG
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 0
45884: PUSH
45885: LD_INT 2
45887: NEG
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 2
45906: PUSH
45907: LD_INT 0
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: LD_INT 1
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 2
45926: PUSH
45927: LD_INT 2
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: LD_INT 2
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: LD_INT 2
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 1
45956: NEG
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 2
45967: NEG
45968: PUSH
45969: LD_INT 0
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 2
45978: NEG
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 2
45990: NEG
45991: PUSH
45992: LD_INT 2
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 3
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 3
46012: PUSH
46013: LD_INT 2
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 2
46022: PUSH
46023: LD_INT 3
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: LD_INT 3
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46065: LD_ADDR_VAR 0 26
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: LD_INT 1
46085: NEG
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: NEG
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: LD_INT 2
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: LD_INT 2
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 2
46180: PUSH
46181: LD_INT 0
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 2
46190: PUSH
46191: LD_INT 1
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 2
46200: PUSH
46201: LD_INT 2
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 1
46210: PUSH
46211: LD_INT 2
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: LD_INT 2
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 2
46241: NEG
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 2
46252: NEG
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 2
46264: NEG
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: LD_INT 3
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 1
46286: PUSH
46287: LD_INT 3
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: LD_INT 2
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 2
46307: NEG
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: LIST
46332: LIST
46333: LIST
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46341: LD_ADDR_VAR 0 27
46345: PUSH
46346: LD_INT 0
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 0
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 1
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 0
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 1
46399: NEG
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: LD_INT 1
46414: NEG
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: LD_INT 2
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: LD_INT 2
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 2
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: LD_INT 2
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: LD_INT 2
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 2
46517: NEG
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 2
46528: NEG
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 2
46540: NEG
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: NEG
46553: PUSH
46554: LD_INT 2
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 2
46563: NEG
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 3
46574: NEG
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 3
46586: NEG
46587: PUSH
46588: LD_INT 2
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46621: LD_ADDR_VAR 0 28
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: LD_INT 2
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: LD_INT 2
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 2
46736: PUSH
46737: LD_INT 0
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 2
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 2
46756: PUSH
46757: LD_INT 2
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 1
46766: PUSH
46767: LD_INT 2
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: LD_INT 2
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: LD_INT 1
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 2
46797: NEG
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 2
46808: NEG
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 2
46820: NEG
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 2
46832: NEG
46833: PUSH
46834: LD_INT 3
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: LD_INT 3
46848: NEG
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 3
46856: NEG
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 3
46868: NEG
46869: PUSH
46870: LD_INT 2
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46903: LD_ADDR_VAR 0 29
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: LD_INT 0
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: LD_INT 2
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: LD_INT 2
46999: NEG
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 2
47028: PUSH
47029: LD_INT 1
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: LD_INT 2
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: LD_INT 2
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 2
47069: NEG
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 2
47081: NEG
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: NEG
47094: PUSH
47095: LD_INT 3
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 2
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 3
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: LD_INT 3
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 1
47136: NEG
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 3
47147: NEG
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47182: LD_ADDR_VAR 0 30
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: LD_INT 1
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: LD_INT 0
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: EMPTY
47225: LIST
47226: LIST
47227: PUSH
47228: LD_INT 0
47230: PUSH
47231: LD_INT 1
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: LD_INT 2
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 0
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 2
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 2
47348: NEG
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 2
47359: NEG
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: LD_INT 3
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: LD_INT 2
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 3
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 2
47404: PUSH
47405: LD_INT 3
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 2
47414: NEG
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 3
47425: NEG
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47460: LD_ADDR_VAR 0 31
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: LD_INT 0
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 1
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 0
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: LD_INT 1
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: LD_INT 2
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 2
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 2
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 2
47584: PUSH
47585: LD_INT 2
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: LD_INT 2
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: LD_INT 2
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 2
47625: NEG
47626: PUSH
47627: LD_INT 1
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 2
47637: NEG
47638: PUSH
47639: LD_INT 2
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 2
47649: NEG
47650: PUSH
47651: LD_INT 3
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 2
47661: PUSH
47662: LD_INT 1
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 3
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: PUSH
47683: LD_INT 3
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: LD_INT 2
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 3
47703: NEG
47704: PUSH
47705: LD_INT 2
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47738: LD_ADDR_VAR 0 32
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: LD_INT 2
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 2
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 2
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 1
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: LD_INT 2
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 1
47893: NEG
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 2
47904: NEG
47905: PUSH
47906: LD_INT 0
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 2
47915: NEG
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: NEG
47928: PUSH
47929: LD_INT 3
47931: NEG
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 1
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 3
47950: PUSH
47951: LD_INT 2
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 2
47960: PUSH
47961: LD_INT 3
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 2
47970: NEG
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 3
47981: NEG
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48016: LD_ADDR_VAR 0 33
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: LD_INT 1
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 0
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 1
48074: NEG
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: NEG
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: LD_INT 2
48101: NEG
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 1
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 2
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 2
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: LD_INT 2
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: LD_INT 2
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 2
48171: NEG
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 2
48182: NEG
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 2
48194: NEG
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 2
48206: NEG
48207: PUSH
48208: LD_INT 3
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 2
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 3
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: LD_INT 3
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 1
48249: NEG
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 3
48260: NEG
48261: PUSH
48262: LD_INT 2
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48295: LD_ADDR_VAR 0 34
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: LD_INT 1
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 1
48353: NEG
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: NEG
48377: PUSH
48378: LD_INT 2
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: LD_INT 2
48391: NEG
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 2
48410: PUSH
48411: LD_INT 1
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 2
48420: PUSH
48421: LD_INT 2
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: PUSH
48431: LD_INT 2
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 1
48440: NEG
48441: PUSH
48442: LD_INT 1
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 2
48451: NEG
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 2
48462: NEG
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 2
48474: NEG
48475: PUSH
48476: LD_INT 2
48478: NEG
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: LD_INT 3
48490: NEG
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 1
48498: PUSH
48499: LD_INT 2
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 3
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: LD_INT 3
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 2
48529: NEG
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 3
48540: NEG
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48575: LD_ADDR_VAR 0 35
48579: PUSH
48580: LD_INT 0
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: LD_INT 0
48606: PUSH
48607: EMPTY
48608: LIST
48609: LIST
48610: PUSH
48611: LD_INT 1
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 0
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: NEG
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 2
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 2
48666: NEG
48667: PUSH
48668: LD_INT 1
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48687: LD_ADDR_VAR 0 36
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: LD_INT 1
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: LD_INT 2
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: LD_INT 2
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48799: LD_ADDR_VAR 0 37
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 1
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: LD_INT 1
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: LD_INT 1
48872: NEG
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: LD_INT 1
48883: NEG
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 1
48891: NEG
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48911: LD_ADDR_VAR 0 38
48915: PUSH
48916: LD_INT 0
48918: PUSH
48919: LD_INT 0
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 1
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 1
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: LD_INT 1
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 0
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 2
49002: NEG
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: LIST
49016: LIST
49017: LIST
49018: LIST
49019: LIST
49020: LIST
49021: LIST
49022: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49023: LD_ADDR_VAR 0 39
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: LD_INT 0
49085: PUSH
49086: EMPTY
49087: LIST
49088: LIST
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: LD_INT 2
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: LD_INT 2
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49135: LD_ADDR_VAR 0 40
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: LD_INT 1
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: LD_INT 0
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 1
49204: NEG
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: LD_INT 1
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: LD_INT 1
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49247: LD_ADDR_VAR 0 41
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: LD_INT 1
49267: NEG
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 1
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: LD_INT 0
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: LD_INT 1
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: NEG
49329: PUSH
49330: LD_INT 2
49332: NEG
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: LD_INT 1
49343: NEG
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 2
49351: PUSH
49352: LD_INT 0
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 2
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 2
49371: PUSH
49372: LD_INT 2
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: LD_INT 2
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: NEG
49392: PUSH
49393: LD_INT 1
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 2
49402: NEG
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 2
49413: NEG
49414: PUSH
49415: LD_INT 1
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 2
49425: NEG
49426: PUSH
49427: LD_INT 2
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 2
49437: NEG
49438: PUSH
49439: LD_INT 3
49441: NEG
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 2
49449: PUSH
49450: LD_INT 1
49452: NEG
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 3
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 3
49470: PUSH
49471: LD_INT 1
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 3
49480: PUSH
49481: LD_INT 2
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 3
49490: PUSH
49491: LD_INT 3
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: LD_INT 3
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 2
49510: NEG
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 3
49521: NEG
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 3
49532: NEG
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 3
49544: NEG
49545: PUSH
49546: LD_INT 2
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 3
49556: NEG
49557: PUSH
49558: LD_INT 3
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49597: LD_ADDR_VAR 0 42
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 0
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: LD_INT 0
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: LD_INT 2
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: LD_INT 2
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 2
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 2
49722: PUSH
49723: LD_INT 2
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: LD_INT 2
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 0
49742: PUSH
49743: LD_INT 2
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 1
49752: NEG
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 2
49763: NEG
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 2
49775: NEG
49776: PUSH
49777: LD_INT 2
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 2
49787: NEG
49788: PUSH
49789: LD_INT 3
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: LD_INT 3
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: LD_INT 3
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: LD_INT 2
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 3
49833: PUSH
49834: LD_INT 2
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 3
49843: PUSH
49844: LD_INT 3
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 3
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: LD_INT 3
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: LD_INT 3
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: LD_INT 2
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 3
49894: NEG
49895: PUSH
49896: LD_INT 2
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 3
49906: NEG
49907: PUSH
49908: LD_INT 3
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49947: LD_ADDR_VAR 0 43
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: LD_INT 1
49967: NEG
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: LD_INT 2
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: LD_INT 2
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: LD_INT 2
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 2
50113: NEG
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 2
50124: NEG
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: LD_INT 3
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: LD_INT 3
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 3
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 3
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: LD_INT 3
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: LD_INT 3
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: LD_INT 2
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 2
50232: NEG
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 3
50243: NEG
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 3
50254: NEG
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50295: LD_ADDR_VAR 0 44
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 0
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 1
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: LD_INT 1
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 1
50353: NEG
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: NEG
50377: PUSH
50378: LD_INT 2
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: LD_INT 1
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 2
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 2
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 2
50419: PUSH
50420: LD_INT 2
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: LD_INT 2
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 1
50439: NEG
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 2
50450: NEG
50451: PUSH
50452: LD_INT 0
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 2
50461: NEG
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 2
50473: NEG
50474: PUSH
50475: LD_INT 2
50477: NEG
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 2
50485: NEG
50486: PUSH
50487: LD_INT 3
50489: NEG
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 2
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 3
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 3
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 3
50528: PUSH
50529: LD_INT 2
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 3
50538: PUSH
50539: LD_INT 3
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 2
50548: PUSH
50549: LD_INT 3
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 2
50558: NEG
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 3
50569: NEG
50570: PUSH
50571: LD_INT 0
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 3
50580: NEG
50581: PUSH
50582: LD_INT 1
50584: NEG
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 3
50592: NEG
50593: PUSH
50594: LD_INT 2
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 3
50604: NEG
50605: PUSH
50606: LD_INT 3
50608: NEG
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50645: LD_ADDR_VAR 0 45
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 1
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 0
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 1
50703: NEG
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: LD_INT 1
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 1
50726: NEG
50727: PUSH
50728: LD_INT 2
50730: NEG
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: LD_INT 2
50741: NEG
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 1
50749: PUSH
50750: LD_INT 1
50752: NEG
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 2
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 2
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: LD_INT 2
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: LD_INT 2
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 2
50811: NEG
50812: PUSH
50813: LD_INT 1
50815: NEG
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 2
50823: NEG
50824: PUSH
50825: LD_INT 2
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 2
50835: NEG
50836: PUSH
50837: LD_INT 3
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: LD_INT 3
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 3
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: LD_INT 2
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 3
50881: PUSH
50882: LD_INT 2
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 3
50891: PUSH
50892: LD_INT 3
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 2
50901: PUSH
50902: LD_INT 3
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: LD_INT 3
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: LD_INT 3
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: LD_INT 2
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 3
50942: NEG
50943: PUSH
50944: LD_INT 2
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 3
50954: NEG
50955: PUSH
50956: LD_INT 3
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50995: LD_ADDR_VAR 0 46
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: LD_INT 0
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: LD_INT 0
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 1
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 1
51053: NEG
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: LD_INT 2
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: LD_INT 2
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 2
51110: PUSH
51111: LD_INT 0
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 2
51120: PUSH
51121: LD_INT 1
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: LD_INT 2
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: LD_INT 2
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 2
51172: NEG
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: LD_INT 3
51188: NEG
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: LD_INT 3
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 3
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 3
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: LD_INT 3
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: LD_INT 3
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: LD_INT 2
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: NEG
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 3
51291: NEG
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 3
51302: NEG
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51343: LD_ADDR_VAR 0 47
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: LD_INT 0
51360: PUSH
51361: LD_INT 1
51363: NEG
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: LD_INT 2
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: LD_INT 2
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 2
51458: NEG
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 2
51470: NEG
51471: PUSH
51472: LD_INT 2
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51494: LD_ADDR_VAR 0 48
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 0
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: LD_INT 0
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: LD_INT 0
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 1
51575: NEG
51576: PUSH
51577: LD_INT 2
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: LD_INT 2
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 2
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 2
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51641: LD_ADDR_VAR 0 49
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: LD_INT 1
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: LD_INT 2
51753: PUSH
51754: LD_INT 2
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 1
51763: PUSH
51764: LD_INT 2
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51785: LD_ADDR_VAR 0 50
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: LD_INT 1
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 2
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: PUSH
51877: LD_INT 2
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: LD_INT 2
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: LD_INT 2
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51929: LD_ADDR_VAR 0 51
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 0
51946: PUSH
51947: LD_INT 1
51949: NEG
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: LD_INT 0
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: PUSH
51968: LD_INT 1
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: LD_INT 1
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: LD_INT 0
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: LD_INT 2
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: LD_INT 2
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 2
52041: NEG
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 2
52052: NEG
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52076: LD_ADDR_VAR 0 52
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: LD_INT 1
52096: NEG
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: LD_INT 1
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 1
52134: NEG
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: NEG
52146: PUSH
52147: LD_INT 1
52149: NEG
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: LD_INT 2
52161: NEG
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 1
52169: NEG
52170: PUSH
52171: LD_INT 1
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 2
52180: NEG
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 2
52191: NEG
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 2
52203: NEG
52204: PUSH
52205: LD_INT 2
52207: NEG
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52227: LD_ADDR_VAR 0 53
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 2
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: LD_INT 2
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: LD_INT 2
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 2
52403: NEG
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 2
52414: NEG
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 2
52426: NEG
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52457: LD_ADDR_VAR 0 54
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: LD_INT 2
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: LD_INT 2
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 2
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 2
52592: PUSH
52593: LD_INT 2
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: LD_INT 2
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: LD_INT 2
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 2
52633: NEG
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 2
52644: NEG
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 2
52656: NEG
52657: PUSH
52658: LD_INT 2
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52687: LD_ADDR_VAR 0 55
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: LD_INT 0
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 0
52704: PUSH
52705: LD_INT 1
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 1
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 1
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 0
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 1
52745: NEG
52746: PUSH
52747: LD_INT 0
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 1
52768: NEG
52769: PUSH
52770: LD_INT 2
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: LD_INT 2
52783: NEG
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 2
52802: PUSH
52803: LD_INT 0
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 2
52822: PUSH
52823: LD_INT 2
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: PUSH
52833: LD_INT 2
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: LD_INT 2
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 2
52863: NEG
52864: PUSH
52865: LD_INT 0
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 2
52874: NEG
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: NEG
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52917: LD_ADDR_VAR 0 56
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: LD_INT 2
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 2
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 2
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 2
53052: PUSH
53053: LD_INT 2
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: LD_INT 2
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: LD_INT 2
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: LD_INT 1
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 2
53093: NEG
53094: PUSH
53095: LD_INT 0
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: NEG
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 2
53116: NEG
53117: PUSH
53118: LD_INT 2
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53147: LD_ADDR_VAR 0 57
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: LD_INT 0
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 0
53164: PUSH
53165: LD_INT 1
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: PUSH
53186: LD_INT 1
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: LD_INT 1
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 1
53216: NEG
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: NEG
53229: PUSH
53230: LD_INT 2
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 0
53240: PUSH
53241: LD_INT 2
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 2
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 2
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 2
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: LD_INT 2
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 0
53302: PUSH
53303: LD_INT 2
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 1
53312: NEG
53313: PUSH
53314: LD_INT 1
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 2
53323: NEG
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 2
53334: NEG
53335: PUSH
53336: LD_INT 1
53338: NEG
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 2
53346: NEG
53347: PUSH
53348: LD_INT 2
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53377: LD_ADDR_VAR 0 58
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: LD_INT 0
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 0
53394: PUSH
53395: LD_INT 1
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: LD_INT 0
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: LD_INT 1
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 1
53446: NEG
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: LD_INT 2
53462: NEG
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 0
53470: PUSH
53471: LD_INT 2
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 1
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 2
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 2
53502: PUSH
53503: LD_INT 1
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 2
53512: PUSH
53513: LD_INT 2
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 1
53522: PUSH
53523: LD_INT 2
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: LD_INT 2
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 2
53553: NEG
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 2
53564: NEG
53565: PUSH
53566: LD_INT 1
53568: NEG
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: LD_INT 2
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53607: LD_ADDR_VAR 0 59
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: PUSH
53636: LD_INT 0
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: LD_INT 1
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 1
53665: NEG
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53695: LD_ADDR_VAR 0 60
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: LD_INT 1
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53783: LD_ADDR_VAR 0 61
53787: PUSH
53788: LD_INT 0
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 0
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 1
53852: NEG
53853: PUSH
53854: LD_INT 1
53856: NEG
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53871: LD_ADDR_VAR 0 62
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 0
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 0
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53959: LD_ADDR_VAR 0 63
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: NEG
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54047: LD_ADDR_VAR 0 64
54051: PUSH
54052: LD_INT 0
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: LD_INT 1
54067: NEG
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 1
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 0
54095: PUSH
54096: LD_INT 1
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: ST_TO_ADDR
// end ; 1 :
54135: GO 60032
54137: LD_INT 1
54139: DOUBLE
54140: EQUAL
54141: IFTRUE 54145
54143: GO 56768
54145: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54146: LD_ADDR_VAR 0 11
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: LD_INT 3
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: LD_INT 3
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 1
54176: PUSH
54177: LD_INT 2
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: LIST
54189: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54190: LD_ADDR_VAR 0 12
54194: PUSH
54195: LD_INT 2
54197: PUSH
54198: LD_INT 1
54200: NEG
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 3
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 3
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: LIST
54230: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54231: LD_ADDR_VAR 0 13
54235: PUSH
54236: LD_INT 3
54238: PUSH
54239: LD_INT 2
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 3
54248: PUSH
54249: LD_INT 3
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 2
54258: PUSH
54259: LD_INT 3
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: LIST
54270: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54271: LD_ADDR_VAR 0 14
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: LD_INT 3
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: LD_INT 3
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: LD_INT 2
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: LIST
54311: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54312: LD_ADDR_VAR 0 15
54316: PUSH
54317: LD_INT 2
54319: NEG
54320: PUSH
54321: LD_INT 1
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 3
54330: NEG
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 3
54341: NEG
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: LIST
54355: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54356: LD_ADDR_VAR 0 16
54360: PUSH
54361: LD_INT 2
54363: NEG
54364: PUSH
54365: LD_INT 3
54367: NEG
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 3
54375: NEG
54376: PUSH
54377: LD_INT 2
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 3
54387: NEG
54388: PUSH
54389: LD_INT 3
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: LIST
54401: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54402: LD_ADDR_VAR 0 17
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: LD_INT 3
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: LD_INT 3
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: LD_INT 2
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: LIST
54445: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54446: LD_ADDR_VAR 0 18
54450: PUSH
54451: LD_INT 2
54453: PUSH
54454: LD_INT 1
54456: NEG
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 3
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 3
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: LIST
54486: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54487: LD_ADDR_VAR 0 19
54491: PUSH
54492: LD_INT 3
54494: PUSH
54495: LD_INT 2
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 3
54504: PUSH
54505: LD_INT 3
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 2
54514: PUSH
54515: LD_INT 3
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: LIST
54526: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54527: LD_ADDR_VAR 0 20
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: LD_INT 3
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: LD_INT 3
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: LIST
54567: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54568: LD_ADDR_VAR 0 21
54572: PUSH
54573: LD_INT 2
54575: NEG
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 3
54586: NEG
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 3
54597: NEG
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: LIST
54611: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54612: LD_ADDR_VAR 0 22
54616: PUSH
54617: LD_INT 2
54619: NEG
54620: PUSH
54621: LD_INT 3
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 3
54631: NEG
54632: PUSH
54633: LD_INT 2
54635: NEG
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 3
54643: NEG
54644: PUSH
54645: LD_INT 3
54647: NEG
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: LIST
54657: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54658: LD_ADDR_VAR 0 23
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: LD_INT 3
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: LD_INT 4
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: LD_INT 3
54691: NEG
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: LIST
54701: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54702: LD_ADDR_VAR 0 24
54706: PUSH
54707: LD_INT 3
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 3
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 4
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: LIST
54742: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54743: LD_ADDR_VAR 0 25
54747: PUSH
54748: LD_INT 3
54750: PUSH
54751: LD_INT 3
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 4
54760: PUSH
54761: LD_INT 3
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 3
54770: PUSH
54771: LD_INT 4
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: LIST
54782: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54783: LD_ADDR_VAR 0 26
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: LD_INT 3
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: LD_INT 4
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: LD_INT 3
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: LIST
54823: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54824: LD_ADDR_VAR 0 27
54828: PUSH
54829: LD_INT 3
54831: NEG
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 3
54842: NEG
54843: PUSH
54844: LD_INT 1
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 4
54853: NEG
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: LIST
54867: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54868: LD_ADDR_VAR 0 28
54872: PUSH
54873: LD_INT 3
54875: NEG
54876: PUSH
54877: LD_INT 3
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 3
54887: NEG
54888: PUSH
54889: LD_INT 4
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 4
54899: NEG
54900: PUSH
54901: LD_INT 3
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: LIST
54913: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54914: LD_ADDR_VAR 0 29
54918: PUSH
54919: LD_INT 1
54921: NEG
54922: PUSH
54923: LD_INT 3
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: LD_INT 3
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: LD_INT 2
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: LD_INT 4
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 4
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: LD_INT 3
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: NEG
54990: PUSH
54991: LD_INT 5
54993: NEG
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: PUSH
54999: LD_INT 0
55001: PUSH
55002: LD_INT 5
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 1
55012: PUSH
55013: LD_INT 4
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: NEG
55024: PUSH
55025: LD_INT 6
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 0
55035: PUSH
55036: LD_INT 6
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: PUSH
55047: LD_INT 5
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55069: LD_ADDR_VAR 0 30
55073: PUSH
55074: LD_INT 2
55076: PUSH
55077: LD_INT 1
55079: NEG
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 3
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 3
55097: PUSH
55098: LD_INT 1
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 3
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 4
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 4
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: PUSH
55136: LD_INT 4
55138: PUSH
55139: LD_INT 1
55141: NEG
55142: PUSH
55143: EMPTY
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 5
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 5
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 5
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 6
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 6
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55212: LD_ADDR_VAR 0 31
55216: PUSH
55217: LD_INT 3
55219: PUSH
55220: LD_INT 2
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 3
55229: PUSH
55230: LD_INT 3
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 2
55239: PUSH
55240: LD_INT 3
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 4
55249: PUSH
55250: LD_INT 3
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 4
55259: PUSH
55260: LD_INT 4
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 3
55269: PUSH
55270: LD_INT 4
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 5
55279: PUSH
55280: LD_INT 4
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 5
55289: PUSH
55290: LD_INT 5
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 4
55299: PUSH
55300: LD_INT 5
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 6
55309: PUSH
55310: LD_INT 5
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 6
55319: PUSH
55320: LD_INT 6
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 5
55329: PUSH
55330: LD_INT 6
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55351: LD_ADDR_VAR 0 32
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: LD_INT 3
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: LD_INT 3
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: LD_INT 2
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 1
55389: PUSH
55390: LD_INT 4
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: LD_INT 4
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: NEG
55410: PUSH
55411: LD_INT 3
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 1
55420: PUSH
55421: LD_INT 5
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: LD_INT 5
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: LD_INT 4
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: LD_INT 6
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: LD_INT 6
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: LD_INT 5
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55494: LD_ADDR_VAR 0 33
55498: PUSH
55499: LD_INT 2
55501: NEG
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 3
55512: NEG
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 3
55523: NEG
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 3
55535: NEG
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 4
55546: NEG
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 4
55557: NEG
55558: PUSH
55559: LD_INT 1
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 4
55569: NEG
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 5
55580: NEG
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 5
55591: NEG
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 5
55603: NEG
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 6
55614: NEG
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 6
55625: NEG
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55649: LD_ADDR_VAR 0 34
55653: PUSH
55654: LD_INT 2
55656: NEG
55657: PUSH
55658: LD_INT 3
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 3
55668: NEG
55669: PUSH
55670: LD_INT 2
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 3
55680: NEG
55681: PUSH
55682: LD_INT 3
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 3
55692: NEG
55693: PUSH
55694: LD_INT 4
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 4
55704: NEG
55705: PUSH
55706: LD_INT 3
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 4
55716: NEG
55717: PUSH
55718: LD_INT 4
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 4
55728: NEG
55729: PUSH
55730: LD_INT 5
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 5
55740: NEG
55741: PUSH
55742: LD_INT 4
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 5
55752: NEG
55753: PUSH
55754: LD_INT 5
55756: NEG
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 5
55764: NEG
55765: PUSH
55766: LD_INT 6
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 6
55776: NEG
55777: PUSH
55778: LD_INT 5
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 6
55788: NEG
55789: PUSH
55790: LD_INT 6
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55812: LD_ADDR_VAR 0 41
55816: PUSH
55817: LD_INT 0
55819: PUSH
55820: LD_INT 2
55822: NEG
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: LD_INT 3
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: LD_INT 2
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: LIST
55855: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55856: LD_ADDR_VAR 0 42
55860: PUSH
55861: LD_INT 2
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 2
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 3
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: LIST
55896: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55897: LD_ADDR_VAR 0 43
55901: PUSH
55902: LD_INT 2
55904: PUSH
55905: LD_INT 2
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 3
55914: PUSH
55915: LD_INT 2
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 2
55924: PUSH
55925: LD_INT 3
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: LIST
55936: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55937: LD_ADDR_VAR 0 44
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: LD_INT 2
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: PUSH
55955: LD_INT 3
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 1
55964: NEG
55965: PUSH
55966: LD_INT 2
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: LIST
55977: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55978: LD_ADDR_VAR 0 45
55982: PUSH
55983: LD_INT 2
55985: NEG
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 2
55996: NEG
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 3
56007: NEG
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: LIST
56021: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56022: LD_ADDR_VAR 0 46
56026: PUSH
56027: LD_INT 2
56029: NEG
56030: PUSH
56031: LD_INT 2
56033: NEG
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: PUSH
56039: LD_INT 2
56041: NEG
56042: PUSH
56043: LD_INT 3
56045: NEG
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: LD_INT 3
56053: NEG
56054: PUSH
56055: LD_INT 2
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: LIST
56067: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56068: LD_ADDR_VAR 0 47
56072: PUSH
56073: LD_INT 2
56075: NEG
56076: PUSH
56077: LD_INT 3
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: LD_INT 3
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56101: LD_ADDR_VAR 0 48
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: LD_INT 2
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 2
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56132: LD_ADDR_VAR 0 49
56136: PUSH
56137: LD_INT 3
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 3
56149: PUSH
56150: LD_INT 2
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56161: LD_ADDR_VAR 0 50
56165: PUSH
56166: LD_INT 2
56168: PUSH
56169: LD_INT 3
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: LD_INT 3
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56190: LD_ADDR_VAR 0 51
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: LD_INT 2
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 2
56208: NEG
56209: PUSH
56210: LD_INT 1
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56221: LD_ADDR_VAR 0 52
56225: PUSH
56226: LD_INT 3
56228: NEG
56229: PUSH
56230: LD_INT 1
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 3
56240: NEG
56241: PUSH
56242: LD_INT 2
56244: NEG
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56254: LD_ADDR_VAR 0 53
56258: PUSH
56259: LD_INT 1
56261: NEG
56262: PUSH
56263: LD_INT 3
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: LD_INT 3
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: LIST
56297: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56298: LD_ADDR_VAR 0 54
56302: PUSH
56303: LD_INT 2
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 3
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 3
56326: PUSH
56327: LD_INT 1
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: LIST
56338: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56339: LD_ADDR_VAR 0 55
56343: PUSH
56344: LD_INT 3
56346: PUSH
56347: LD_INT 2
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 3
56356: PUSH
56357: LD_INT 3
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 2
56366: PUSH
56367: LD_INT 3
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: LIST
56378: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56379: LD_ADDR_VAR 0 56
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: LD_INT 3
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: LD_INT 3
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: LD_INT 2
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: LIST
56419: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56420: LD_ADDR_VAR 0 57
56424: PUSH
56425: LD_INT 2
56427: NEG
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 3
56438: NEG
56439: PUSH
56440: LD_INT 0
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 3
56449: NEG
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: LIST
56463: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56464: LD_ADDR_VAR 0 58
56468: PUSH
56469: LD_INT 2
56471: NEG
56472: PUSH
56473: LD_INT 3
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 3
56483: NEG
56484: PUSH
56485: LD_INT 2
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 3
56495: NEG
56496: PUSH
56497: LD_INT 3
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: LIST
56509: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56510: LD_ADDR_VAR 0 59
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: LD_INT 2
56521: NEG
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 0
56529: PUSH
56530: LD_INT 2
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: LD_INT 1
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: LIST
56553: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56554: LD_ADDR_VAR 0 60
56558: PUSH
56559: LD_INT 1
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 2
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: LIST
56594: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56595: LD_ADDR_VAR 0 61
56599: PUSH
56600: LD_INT 2
56602: PUSH
56603: LD_INT 1
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 2
56612: PUSH
56613: LD_INT 2
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: LD_INT 2
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: LIST
56634: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56635: LD_ADDR_VAR 0 62
56639: PUSH
56640: LD_INT 1
56642: PUSH
56643: LD_INT 2
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: LD_INT 2
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 1
56662: NEG
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: LIST
56675: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56676: LD_ADDR_VAR 0 63
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 2
56694: NEG
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 2
56705: NEG
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: LIST
56719: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56720: LD_ADDR_VAR 0 64
56724: PUSH
56725: LD_INT 1
56727: NEG
56728: PUSH
56729: LD_INT 2
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 2
56739: NEG
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 2
56751: NEG
56752: PUSH
56753: LD_INT 2
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: LIST
56765: ST_TO_ADDR
// end ; 2 :
56766: GO 60032
56768: LD_INT 2
56770: DOUBLE
56771: EQUAL
56772: IFTRUE 56776
56774: GO 60031
56776: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56777: LD_ADDR_VAR 0 29
56781: PUSH
56782: LD_INT 4
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 4
56794: PUSH
56795: LD_INT 1
56797: NEG
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: PUSH
56803: LD_INT 5
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 5
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 4
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 3
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 3
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 3
56856: PUSH
56857: LD_INT 2
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 5
56867: PUSH
56868: LD_INT 2
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 3
56877: PUSH
56878: LD_INT 3
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 3
56887: PUSH
56888: LD_INT 2
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 4
56897: PUSH
56898: LD_INT 3
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 4
56907: PUSH
56908: LD_INT 4
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 3
56917: PUSH
56918: LD_INT 4
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 2
56927: PUSH
56928: LD_INT 3
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 2
56937: PUSH
56938: LD_INT 2
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 4
56947: PUSH
56948: LD_INT 2
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 2
56957: PUSH
56958: LD_INT 4
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: LD_INT 4
56970: PUSH
56971: EMPTY
56972: LIST
56973: LIST
56974: PUSH
56975: LD_INT 0
56977: PUSH
56978: LD_INT 3
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: LD_INT 4
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 1
56997: PUSH
56998: LD_INT 5
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: PUSH
57005: LD_INT 0
57007: PUSH
57008: LD_INT 5
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: NEG
57018: PUSH
57019: LD_INT 4
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 1
57028: NEG
57029: PUSH
57030: LD_INT 3
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 2
57039: PUSH
57040: LD_INT 5
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 2
57049: NEG
57050: PUSH
57051: LD_INT 3
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 3
57060: NEG
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 3
57071: NEG
57072: PUSH
57073: LD_INT 1
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 2
57083: NEG
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 2
57094: NEG
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 3
57105: NEG
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 4
57116: NEG
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 4
57127: NEG
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 4
57139: NEG
57140: PUSH
57141: LD_INT 2
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 2
57151: NEG
57152: PUSH
57153: LD_INT 2
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 4
57162: NEG
57163: PUSH
57164: LD_INT 4
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 4
57174: NEG
57175: PUSH
57176: LD_INT 5
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 3
57186: NEG
57187: PUSH
57188: LD_INT 4
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 3
57198: NEG
57199: PUSH
57200: LD_INT 3
57202: NEG
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 4
57210: NEG
57211: PUSH
57212: LD_INT 3
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 5
57222: NEG
57223: PUSH
57224: LD_INT 4
57226: NEG
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 5
57234: NEG
57235: PUSH
57236: LD_INT 5
57238: NEG
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 3
57246: NEG
57247: PUSH
57248: LD_INT 5
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 5
57258: NEG
57259: PUSH
57260: LD_INT 3
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57315: LD_ADDR_VAR 0 30
57319: PUSH
57320: LD_INT 4
57322: PUSH
57323: LD_INT 4
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 4
57332: PUSH
57333: LD_INT 3
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 5
57342: PUSH
57343: LD_INT 4
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 5
57352: PUSH
57353: LD_INT 5
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 4
57362: PUSH
57363: LD_INT 5
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 3
57372: PUSH
57373: LD_INT 4
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 3
57382: PUSH
57383: LD_INT 3
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 5
57392: PUSH
57393: LD_INT 3
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 3
57402: PUSH
57403: LD_INT 5
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: LD_INT 3
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: LD_INT 2
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: LD_INT 3
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: PUSH
57443: LD_INT 4
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 0
57452: PUSH
57453: LD_INT 4
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 1
57462: NEG
57463: PUSH
57464: LD_INT 3
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: LD_INT 2
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 2
57484: PUSH
57485: LD_INT 4
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 2
57494: NEG
57495: PUSH
57496: LD_INT 2
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 4
57505: NEG
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 4
57516: NEG
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 3
57528: NEG
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 3
57539: NEG
57540: PUSH
57541: LD_INT 1
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 4
57550: NEG
57551: PUSH
57552: LD_INT 1
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 5
57561: NEG
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 5
57572: NEG
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 5
57584: NEG
57585: PUSH
57586: LD_INT 2
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 3
57596: NEG
57597: PUSH
57598: LD_INT 2
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 3
57607: NEG
57608: PUSH
57609: LD_INT 3
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 3
57619: NEG
57620: PUSH
57621: LD_INT 4
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 2
57631: NEG
57632: PUSH
57633: LD_INT 3
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 2
57643: NEG
57644: PUSH
57645: LD_INT 2
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 3
57655: NEG
57656: PUSH
57657: LD_INT 2
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 4
57667: NEG
57668: PUSH
57669: LD_INT 3
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 4
57679: NEG
57680: PUSH
57681: LD_INT 4
57683: NEG
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 2
57691: NEG
57692: PUSH
57693: LD_INT 4
57695: NEG
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 4
57703: NEG
57704: PUSH
57705: LD_INT 2
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: LD_INT 4
57718: NEG
57719: PUSH
57720: EMPTY
57721: LIST
57722: LIST
57723: PUSH
57724: LD_INT 0
57726: PUSH
57727: LD_INT 5
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 1
57737: PUSH
57738: LD_INT 4
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: LD_INT 3
57751: NEG
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 0
57759: PUSH
57760: LD_INT 3
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: LD_INT 4
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 1
57782: NEG
57783: PUSH
57784: LD_INT 5
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 2
57794: PUSH
57795: LD_INT 3
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 2
57805: NEG
57806: PUSH
57807: LD_INT 5
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57862: LD_ADDR_VAR 0 31
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: LD_INT 4
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 0
57879: PUSH
57880: LD_INT 3
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 1
57889: PUSH
57890: LD_INT 4
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 1
57899: PUSH
57900: LD_INT 5
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 0
57909: PUSH
57910: LD_INT 5
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 1
57919: NEG
57920: PUSH
57921: LD_INT 4
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: NEG
57931: PUSH
57932: LD_INT 3
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: LD_INT 5
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 2
57951: NEG
57952: PUSH
57953: LD_INT 3
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 3
57962: NEG
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 3
57973: NEG
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 2
57985: NEG
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 2
57996: NEG
57997: PUSH
57998: LD_INT 1
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 3
58007: NEG
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 4
58018: NEG
58019: PUSH
58020: LD_INT 0
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 4
58029: NEG
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 4
58041: NEG
58042: PUSH
58043: LD_INT 2
58045: NEG
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 2
58053: NEG
58054: PUSH
58055: LD_INT 2
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 4
58064: NEG
58065: PUSH
58066: LD_INT 4
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 4
58076: NEG
58077: PUSH
58078: LD_INT 5
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 3
58088: NEG
58089: PUSH
58090: LD_INT 4
58092: NEG
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 3
58100: NEG
58101: PUSH
58102: LD_INT 3
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 4
58112: NEG
58113: PUSH
58114: LD_INT 3
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 5
58124: NEG
58125: PUSH
58126: LD_INT 4
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 5
58136: NEG
58137: PUSH
58138: LD_INT 5
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 3
58148: NEG
58149: PUSH
58150: LD_INT 5
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 5
58160: NEG
58161: PUSH
58162: LD_INT 3
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: LD_INT 3
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: LD_INT 4
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: LD_INT 3
58197: NEG
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 1
58205: PUSH
58206: LD_INT 2
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: LD_INT 2
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 1
58227: NEG
58228: PUSH
58229: LD_INT 3
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 1
58239: NEG
58240: PUSH
58241: LD_INT 4
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 2
58251: PUSH
58252: LD_INT 2
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 2
58262: NEG
58263: PUSH
58264: LD_INT 4
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 4
58274: PUSH
58275: LD_INT 0
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 4
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 5
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 5
58305: PUSH
58306: LD_INT 1
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 4
58315: PUSH
58316: LD_INT 1
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 3
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 3
58335: PUSH
58336: LD_INT 1
58338: NEG
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 3
58346: PUSH
58347: LD_INT 2
58349: NEG
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 5
58357: PUSH
58358: LD_INT 2
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: LIST
58374: LIST
58375: LIST
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58412: LD_ADDR_VAR 0 32
58416: PUSH
58417: LD_INT 4
58419: NEG
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 4
58430: NEG
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 3
58442: NEG
58443: PUSH
58444: LD_INT 0
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 3
58453: NEG
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 4
58464: NEG
58465: PUSH
58466: LD_INT 1
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 5
58475: NEG
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 5
58486: NEG
58487: PUSH
58488: LD_INT 1
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 5
58498: NEG
58499: PUSH
58500: LD_INT 2
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 3
58510: NEG
58511: PUSH
58512: LD_INT 2
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 3
58521: NEG
58522: PUSH
58523: LD_INT 3
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 3
58533: NEG
58534: PUSH
58535: LD_INT 4
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 2
58545: NEG
58546: PUSH
58547: LD_INT 3
58549: NEG
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 2
58557: NEG
58558: PUSH
58559: LD_INT 2
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 3
58569: NEG
58570: PUSH
58571: LD_INT 2
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 4
58581: NEG
58582: PUSH
58583: LD_INT 3
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 4
58593: NEG
58594: PUSH
58595: LD_INT 4
58597: NEG
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 2
58605: NEG
58606: PUSH
58607: LD_INT 4
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 4
58617: NEG
58618: PUSH
58619: LD_INT 2
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: LD_INT 4
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 0
58640: PUSH
58641: LD_INT 5
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 1
58651: PUSH
58652: LD_INT 4
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: PUSH
58663: LD_INT 3
58665: NEG
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: LD_INT 3
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: LD_INT 4
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: LD_INT 5
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 2
58708: PUSH
58709: LD_INT 3
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 2
58719: NEG
58720: PUSH
58721: LD_INT 5
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 3
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 3
58741: PUSH
58742: LD_INT 1
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 4
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 4
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 3
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 2
58782: PUSH
58783: LD_INT 0
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 2
58803: PUSH
58804: LD_INT 2
58806: NEG
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 4
58814: PUSH
58815: LD_INT 2
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 4
58824: PUSH
58825: LD_INT 4
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 4
58834: PUSH
58835: LD_INT 3
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 5
58844: PUSH
58845: LD_INT 4
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 5
58854: PUSH
58855: LD_INT 5
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 4
58864: PUSH
58865: LD_INT 5
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 3
58874: PUSH
58875: LD_INT 4
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 3
58884: PUSH
58885: LD_INT 3
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 5
58894: PUSH
58895: LD_INT 3
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 3
58904: PUSH
58905: LD_INT 5
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: LIST
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58959: LD_ADDR_VAR 0 33
58963: PUSH
58964: LD_INT 4
58966: NEG
58967: PUSH
58968: LD_INT 4
58970: NEG
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 4
58978: NEG
58979: PUSH
58980: LD_INT 5
58982: NEG
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 3
58990: NEG
58991: PUSH
58992: LD_INT 4
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 3
59002: NEG
59003: PUSH
59004: LD_INT 3
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 4
59014: NEG
59015: PUSH
59016: LD_INT 3
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 5
59026: NEG
59027: PUSH
59028: LD_INT 4
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 5
59038: NEG
59039: PUSH
59040: LD_INT 5
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 3
59050: NEG
59051: PUSH
59052: LD_INT 5
59054: NEG
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 5
59062: NEG
59063: PUSH
59064: LD_INT 3
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 0
59074: PUSH
59075: LD_INT 3
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: LD_INT 4
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 1
59096: PUSH
59097: LD_INT 3
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: LD_INT 2
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 0
59118: PUSH
59119: LD_INT 2
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 1
59129: NEG
59130: PUSH
59131: LD_INT 3
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: LD_INT 4
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: LD_INT 2
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 2
59164: NEG
59165: PUSH
59166: LD_INT 4
59168: NEG
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 4
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 4
59186: PUSH
59187: LD_INT 1
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 5
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 5
59207: PUSH
59208: LD_INT 1
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 4
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 3
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 3
59237: PUSH
59238: LD_INT 1
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 3
59248: PUSH
59249: LD_INT 2
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 5
59259: PUSH
59260: LD_INT 2
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 3
59269: PUSH
59270: LD_INT 3
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 3
59279: PUSH
59280: LD_INT 2
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 4
59289: PUSH
59290: LD_INT 3
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 4
59299: PUSH
59300: LD_INT 4
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 3
59309: PUSH
59310: LD_INT 4
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 2
59319: PUSH
59320: LD_INT 3
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 2
59329: PUSH
59330: LD_INT 2
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 4
59339: PUSH
59340: LD_INT 2
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 2
59349: PUSH
59350: LD_INT 4
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: LD_INT 4
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: LD_INT 3
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 1
59379: PUSH
59380: LD_INT 4
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 1
59389: PUSH
59390: LD_INT 5
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 0
59399: PUSH
59400: LD_INT 5
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 1
59409: NEG
59410: PUSH
59411: LD_INT 4
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 1
59420: NEG
59421: PUSH
59422: LD_INT 3
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 2
59431: PUSH
59432: LD_INT 5
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 2
59441: NEG
59442: PUSH
59443: LD_INT 3
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: LIST
59454: LIST
59455: LIST
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: LIST
59461: LIST
59462: LIST
59463: LIST
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: LIST
59481: LIST
59482: LIST
59483: LIST
59484: LIST
59485: LIST
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: LIST
59495: LIST
59496: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59497: LD_ADDR_VAR 0 34
59501: PUSH
59502: LD_INT 0
59504: PUSH
59505: LD_INT 4
59507: NEG
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 0
59515: PUSH
59516: LD_INT 5
59518: NEG
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 1
59526: PUSH
59527: LD_INT 4
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 1
59537: PUSH
59538: LD_INT 3
59540: NEG
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 0
59548: PUSH
59549: LD_INT 3
59551: NEG
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 1
59559: NEG
59560: PUSH
59561: LD_INT 4
59563: NEG
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: LD_INT 5
59575: NEG
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 2
59583: PUSH
59584: LD_INT 3
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: LD_INT 5
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 3
59606: PUSH
59607: LD_INT 0
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 3
59616: PUSH
59617: LD_INT 1
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 4
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 4
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 3
59647: PUSH
59648: LD_INT 1
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 2
59657: PUSH
59658: LD_INT 0
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 2
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 2
59678: PUSH
59679: LD_INT 2
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 4
59689: PUSH
59690: LD_INT 2
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 4
59699: PUSH
59700: LD_INT 4
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 4
59709: PUSH
59710: LD_INT 3
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 5
59719: PUSH
59720: LD_INT 4
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 5
59729: PUSH
59730: LD_INT 5
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 4
59739: PUSH
59740: LD_INT 5
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 3
59749: PUSH
59750: LD_INT 4
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 3
59759: PUSH
59760: LD_INT 3
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 5
59769: PUSH
59770: LD_INT 3
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 3
59779: PUSH
59780: LD_INT 5
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 0
59789: PUSH
59790: LD_INT 3
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: PUSH
59797: LD_INT 0
59799: PUSH
59800: LD_INT 2
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 1
59809: PUSH
59810: LD_INT 3
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 1
59819: PUSH
59820: LD_INT 4
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: LD_INT 4
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: LD_INT 3
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: LD_INT 2
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 2
59861: PUSH
59862: LD_INT 4
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 2
59871: NEG
59872: PUSH
59873: LD_INT 2
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 4
59882: NEG
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 4
59893: NEG
59894: PUSH
59895: LD_INT 1
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 3
59905: NEG
59906: PUSH
59907: LD_INT 0
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 3
59916: NEG
59917: PUSH
59918: LD_INT 1
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 4
59927: NEG
59928: PUSH
59929: LD_INT 1
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 5
59938: NEG
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 5
59949: NEG
59950: PUSH
59951: LD_INT 1
59953: NEG
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 5
59961: NEG
59962: PUSH
59963: LD_INT 2
59965: NEG
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 3
59973: NEG
59974: PUSH
59975: LD_INT 2
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: ST_TO_ADDR
// end ; end ;
60029: GO 60032
60031: POP
// case btype of b_depot , b_warehouse :
60032: LD_VAR 0 1
60036: PUSH
60037: LD_INT 0
60039: DOUBLE
60040: EQUAL
60041: IFTRUE 60051
60043: LD_INT 1
60045: DOUBLE
60046: EQUAL
60047: IFTRUE 60051
60049: GO 60252
60051: POP
// case nation of nation_american :
60052: LD_VAR 0 5
60056: PUSH
60057: LD_INT 1
60059: DOUBLE
60060: EQUAL
60061: IFTRUE 60065
60063: GO 60121
60065: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60066: LD_ADDR_VAR 0 9
60070: PUSH
60071: LD_VAR 0 11
60075: PUSH
60076: LD_VAR 0 12
60080: PUSH
60081: LD_VAR 0 13
60085: PUSH
60086: LD_VAR 0 14
60090: PUSH
60091: LD_VAR 0 15
60095: PUSH
60096: LD_VAR 0 16
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: PUSH
60109: LD_VAR 0 4
60113: PUSH
60114: LD_INT 1
60116: PLUS
60117: ARRAY
60118: ST_TO_ADDR
60119: GO 60250
60121: LD_INT 2
60123: DOUBLE
60124: EQUAL
60125: IFTRUE 60129
60127: GO 60185
60129: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60130: LD_ADDR_VAR 0 9
60134: PUSH
60135: LD_VAR 0 17
60139: PUSH
60140: LD_VAR 0 18
60144: PUSH
60145: LD_VAR 0 19
60149: PUSH
60150: LD_VAR 0 20
60154: PUSH
60155: LD_VAR 0 21
60159: PUSH
60160: LD_VAR 0 22
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: PUSH
60173: LD_VAR 0 4
60177: PUSH
60178: LD_INT 1
60180: PLUS
60181: ARRAY
60182: ST_TO_ADDR
60183: GO 60250
60185: LD_INT 3
60187: DOUBLE
60188: EQUAL
60189: IFTRUE 60193
60191: GO 60249
60193: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60194: LD_ADDR_VAR 0 9
60198: PUSH
60199: LD_VAR 0 23
60203: PUSH
60204: LD_VAR 0 24
60208: PUSH
60209: LD_VAR 0 25
60213: PUSH
60214: LD_VAR 0 26
60218: PUSH
60219: LD_VAR 0 27
60223: PUSH
60224: LD_VAR 0 28
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: PUSH
60237: LD_VAR 0 4
60241: PUSH
60242: LD_INT 1
60244: PLUS
60245: ARRAY
60246: ST_TO_ADDR
60247: GO 60250
60249: POP
60250: GO 60805
60252: LD_INT 2
60254: DOUBLE
60255: EQUAL
60256: IFTRUE 60266
60258: LD_INT 3
60260: DOUBLE
60261: EQUAL
60262: IFTRUE 60266
60264: GO 60322
60266: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60267: LD_ADDR_VAR 0 9
60271: PUSH
60272: LD_VAR 0 29
60276: PUSH
60277: LD_VAR 0 30
60281: PUSH
60282: LD_VAR 0 31
60286: PUSH
60287: LD_VAR 0 32
60291: PUSH
60292: LD_VAR 0 33
60296: PUSH
60297: LD_VAR 0 34
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: PUSH
60310: LD_VAR 0 4
60314: PUSH
60315: LD_INT 1
60317: PLUS
60318: ARRAY
60319: ST_TO_ADDR
60320: GO 60805
60322: LD_INT 16
60324: DOUBLE
60325: EQUAL
60326: IFTRUE 60384
60328: LD_INT 17
60330: DOUBLE
60331: EQUAL
60332: IFTRUE 60384
60334: LD_INT 18
60336: DOUBLE
60337: EQUAL
60338: IFTRUE 60384
60340: LD_INT 19
60342: DOUBLE
60343: EQUAL
60344: IFTRUE 60384
60346: LD_INT 22
60348: DOUBLE
60349: EQUAL
60350: IFTRUE 60384
60352: LD_INT 20
60354: DOUBLE
60355: EQUAL
60356: IFTRUE 60384
60358: LD_INT 21
60360: DOUBLE
60361: EQUAL
60362: IFTRUE 60384
60364: LD_INT 23
60366: DOUBLE
60367: EQUAL
60368: IFTRUE 60384
60370: LD_INT 24
60372: DOUBLE
60373: EQUAL
60374: IFTRUE 60384
60376: LD_INT 25
60378: DOUBLE
60379: EQUAL
60380: IFTRUE 60384
60382: GO 60440
60384: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60385: LD_ADDR_VAR 0 9
60389: PUSH
60390: LD_VAR 0 35
60394: PUSH
60395: LD_VAR 0 36
60399: PUSH
60400: LD_VAR 0 37
60404: PUSH
60405: LD_VAR 0 38
60409: PUSH
60410: LD_VAR 0 39
60414: PUSH
60415: LD_VAR 0 40
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: PUSH
60428: LD_VAR 0 4
60432: PUSH
60433: LD_INT 1
60435: PLUS
60436: ARRAY
60437: ST_TO_ADDR
60438: GO 60805
60440: LD_INT 6
60442: DOUBLE
60443: EQUAL
60444: IFTRUE 60496
60446: LD_INT 7
60448: DOUBLE
60449: EQUAL
60450: IFTRUE 60496
60452: LD_INT 8
60454: DOUBLE
60455: EQUAL
60456: IFTRUE 60496
60458: LD_INT 13
60460: DOUBLE
60461: EQUAL
60462: IFTRUE 60496
60464: LD_INT 12
60466: DOUBLE
60467: EQUAL
60468: IFTRUE 60496
60470: LD_INT 15
60472: DOUBLE
60473: EQUAL
60474: IFTRUE 60496
60476: LD_INT 11
60478: DOUBLE
60479: EQUAL
60480: IFTRUE 60496
60482: LD_INT 14
60484: DOUBLE
60485: EQUAL
60486: IFTRUE 60496
60488: LD_INT 10
60490: DOUBLE
60491: EQUAL
60492: IFTRUE 60496
60494: GO 60552
60496: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60497: LD_ADDR_VAR 0 9
60501: PUSH
60502: LD_VAR 0 41
60506: PUSH
60507: LD_VAR 0 42
60511: PUSH
60512: LD_VAR 0 43
60516: PUSH
60517: LD_VAR 0 44
60521: PUSH
60522: LD_VAR 0 45
60526: PUSH
60527: LD_VAR 0 46
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: PUSH
60540: LD_VAR 0 4
60544: PUSH
60545: LD_INT 1
60547: PLUS
60548: ARRAY
60549: ST_TO_ADDR
60550: GO 60805
60552: LD_INT 36
60554: DOUBLE
60555: EQUAL
60556: IFTRUE 60560
60558: GO 60616
60560: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60561: LD_ADDR_VAR 0 9
60565: PUSH
60566: LD_VAR 0 47
60570: PUSH
60571: LD_VAR 0 48
60575: PUSH
60576: LD_VAR 0 49
60580: PUSH
60581: LD_VAR 0 50
60585: PUSH
60586: LD_VAR 0 51
60590: PUSH
60591: LD_VAR 0 52
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: PUSH
60604: LD_VAR 0 4
60608: PUSH
60609: LD_INT 1
60611: PLUS
60612: ARRAY
60613: ST_TO_ADDR
60614: GO 60805
60616: LD_INT 4
60618: DOUBLE
60619: EQUAL
60620: IFTRUE 60642
60622: LD_INT 5
60624: DOUBLE
60625: EQUAL
60626: IFTRUE 60642
60628: LD_INT 34
60630: DOUBLE
60631: EQUAL
60632: IFTRUE 60642
60634: LD_INT 37
60636: DOUBLE
60637: EQUAL
60638: IFTRUE 60642
60640: GO 60698
60642: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60643: LD_ADDR_VAR 0 9
60647: PUSH
60648: LD_VAR 0 53
60652: PUSH
60653: LD_VAR 0 54
60657: PUSH
60658: LD_VAR 0 55
60662: PUSH
60663: LD_VAR 0 56
60667: PUSH
60668: LD_VAR 0 57
60672: PUSH
60673: LD_VAR 0 58
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: PUSH
60686: LD_VAR 0 4
60690: PUSH
60691: LD_INT 1
60693: PLUS
60694: ARRAY
60695: ST_TO_ADDR
60696: GO 60805
60698: LD_INT 31
60700: DOUBLE
60701: EQUAL
60702: IFTRUE 60748
60704: LD_INT 32
60706: DOUBLE
60707: EQUAL
60708: IFTRUE 60748
60710: LD_INT 33
60712: DOUBLE
60713: EQUAL
60714: IFTRUE 60748
60716: LD_INT 27
60718: DOUBLE
60719: EQUAL
60720: IFTRUE 60748
60722: LD_INT 26
60724: DOUBLE
60725: EQUAL
60726: IFTRUE 60748
60728: LD_INT 28
60730: DOUBLE
60731: EQUAL
60732: IFTRUE 60748
60734: LD_INT 29
60736: DOUBLE
60737: EQUAL
60738: IFTRUE 60748
60740: LD_INT 30
60742: DOUBLE
60743: EQUAL
60744: IFTRUE 60748
60746: GO 60804
60748: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60749: LD_ADDR_VAR 0 9
60753: PUSH
60754: LD_VAR 0 59
60758: PUSH
60759: LD_VAR 0 60
60763: PUSH
60764: LD_VAR 0 61
60768: PUSH
60769: LD_VAR 0 62
60773: PUSH
60774: LD_VAR 0 63
60778: PUSH
60779: LD_VAR 0 64
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: PUSH
60792: LD_VAR 0 4
60796: PUSH
60797: LD_INT 1
60799: PLUS
60800: ARRAY
60801: ST_TO_ADDR
60802: GO 60805
60804: POP
// temp_list2 = [ ] ;
60805: LD_ADDR_VAR 0 10
60809: PUSH
60810: EMPTY
60811: ST_TO_ADDR
// for i in temp_list do
60812: LD_ADDR_VAR 0 8
60816: PUSH
60817: LD_VAR 0 9
60821: PUSH
60822: FOR_IN
60823: IFFALSE 60875
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60825: LD_ADDR_VAR 0 10
60829: PUSH
60830: LD_VAR 0 10
60834: PUSH
60835: LD_VAR 0 8
60839: PUSH
60840: LD_INT 1
60842: ARRAY
60843: PUSH
60844: LD_VAR 0 2
60848: PLUS
60849: PUSH
60850: LD_VAR 0 8
60854: PUSH
60855: LD_INT 2
60857: ARRAY
60858: PUSH
60859: LD_VAR 0 3
60863: PLUS
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: EMPTY
60870: LIST
60871: ADD
60872: ST_TO_ADDR
60873: GO 60822
60875: POP
60876: POP
// result = temp_list2 ;
60877: LD_ADDR_VAR 0 7
60881: PUSH
60882: LD_VAR 0 10
60886: ST_TO_ADDR
// end ;
60887: LD_VAR 0 7
60891: RET
// export function EnemyInRange ( unit , dist ) ; begin
60892: LD_INT 0
60894: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60895: LD_ADDR_VAR 0 3
60899: PUSH
60900: LD_VAR 0 1
60904: PPUSH
60905: CALL_OW 255
60909: PPUSH
60910: LD_VAR 0 1
60914: PPUSH
60915: CALL_OW 250
60919: PPUSH
60920: LD_VAR 0 1
60924: PPUSH
60925: CALL_OW 251
60929: PPUSH
60930: LD_VAR 0 2
60934: PPUSH
60935: CALL 34294 0 4
60939: PUSH
60940: LD_INT 4
60942: ARRAY
60943: ST_TO_ADDR
// end ;
60944: LD_VAR 0 3
60948: RET
// export function PlayerSeeMe ( unit ) ; begin
60949: LD_INT 0
60951: PPUSH
// result := See ( your_side , unit ) ;
60952: LD_ADDR_VAR 0 2
60956: PUSH
60957: LD_OWVAR 2
60961: PPUSH
60962: LD_VAR 0 1
60966: PPUSH
60967: CALL_OW 292
60971: ST_TO_ADDR
// end ;
60972: LD_VAR 0 2
60976: RET
// export function ReverseDir ( unit ) ; begin
60977: LD_INT 0
60979: PPUSH
// if not unit then
60980: LD_VAR 0 1
60984: NOT
60985: IFFALSE 60989
// exit ;
60987: GO 61012
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60989: LD_ADDR_VAR 0 2
60993: PUSH
60994: LD_VAR 0 1
60998: PPUSH
60999: CALL_OW 254
61003: PUSH
61004: LD_INT 3
61006: PLUS
61007: PUSH
61008: LD_INT 6
61010: MOD
61011: ST_TO_ADDR
// end ;
61012: LD_VAR 0 2
61016: RET
// export function ReverseArray ( array ) ; var i ; begin
61017: LD_INT 0
61019: PPUSH
61020: PPUSH
// if not array then
61021: LD_VAR 0 1
61025: NOT
61026: IFFALSE 61030
// exit ;
61028: GO 61085
// result := [ ] ;
61030: LD_ADDR_VAR 0 2
61034: PUSH
61035: EMPTY
61036: ST_TO_ADDR
// for i := array downto 1 do
61037: LD_ADDR_VAR 0 3
61041: PUSH
61042: DOUBLE
61043: LD_VAR 0 1
61047: INC
61048: ST_TO_ADDR
61049: LD_INT 1
61051: PUSH
61052: FOR_DOWNTO
61053: IFFALSE 61083
// result := Join ( result , array [ i ] ) ;
61055: LD_ADDR_VAR 0 2
61059: PUSH
61060: LD_VAR 0 2
61064: PPUSH
61065: LD_VAR 0 1
61069: PUSH
61070: LD_VAR 0 3
61074: ARRAY
61075: PPUSH
61076: CALL 65710 0 2
61080: ST_TO_ADDR
61081: GO 61052
61083: POP
61084: POP
// end ;
61085: LD_VAR 0 2
61089: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61090: LD_INT 0
61092: PPUSH
61093: PPUSH
61094: PPUSH
61095: PPUSH
61096: PPUSH
61097: PPUSH
// if not unit or not hexes then
61098: LD_VAR 0 1
61102: NOT
61103: PUSH
61104: LD_VAR 0 2
61108: NOT
61109: OR
61110: IFFALSE 61114
// exit ;
61112: GO 61237
// dist := 9999 ;
61114: LD_ADDR_VAR 0 5
61118: PUSH
61119: LD_INT 9999
61121: ST_TO_ADDR
// for i = 1 to hexes do
61122: LD_ADDR_VAR 0 4
61126: PUSH
61127: DOUBLE
61128: LD_INT 1
61130: DEC
61131: ST_TO_ADDR
61132: LD_VAR 0 2
61136: PUSH
61137: FOR_TO
61138: IFFALSE 61225
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61140: LD_ADDR_VAR 0 6
61144: PUSH
61145: LD_VAR 0 1
61149: PPUSH
61150: LD_VAR 0 2
61154: PUSH
61155: LD_VAR 0 4
61159: ARRAY
61160: PUSH
61161: LD_INT 1
61163: ARRAY
61164: PPUSH
61165: LD_VAR 0 2
61169: PUSH
61170: LD_VAR 0 4
61174: ARRAY
61175: PUSH
61176: LD_INT 2
61178: ARRAY
61179: PPUSH
61180: CALL_OW 297
61184: ST_TO_ADDR
// if tdist < dist then
61185: LD_VAR 0 6
61189: PUSH
61190: LD_VAR 0 5
61194: LESS
61195: IFFALSE 61223
// begin hex := hexes [ i ] ;
61197: LD_ADDR_VAR 0 8
61201: PUSH
61202: LD_VAR 0 2
61206: PUSH
61207: LD_VAR 0 4
61211: ARRAY
61212: ST_TO_ADDR
// dist := tdist ;
61213: LD_ADDR_VAR 0 5
61217: PUSH
61218: LD_VAR 0 6
61222: ST_TO_ADDR
// end ; end ;
61223: GO 61137
61225: POP
61226: POP
// result := hex ;
61227: LD_ADDR_VAR 0 3
61231: PUSH
61232: LD_VAR 0 8
61236: ST_TO_ADDR
// end ;
61237: LD_VAR 0 3
61241: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61242: LD_INT 0
61244: PPUSH
61245: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61246: LD_VAR 0 1
61250: NOT
61251: PUSH
61252: LD_VAR 0 1
61256: PUSH
61257: LD_INT 21
61259: PUSH
61260: LD_INT 2
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 23
61269: PUSH
61270: LD_INT 2
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PPUSH
61281: CALL_OW 69
61285: IN
61286: NOT
61287: OR
61288: IFFALSE 61292
// exit ;
61290: GO 61339
// for i = 1 to 3 do
61292: LD_ADDR_VAR 0 3
61296: PUSH
61297: DOUBLE
61298: LD_INT 1
61300: DEC
61301: ST_TO_ADDR
61302: LD_INT 3
61304: PUSH
61305: FOR_TO
61306: IFFALSE 61337
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61308: LD_VAR 0 1
61312: PPUSH
61313: CALL_OW 250
61317: PPUSH
61318: LD_VAR 0 1
61322: PPUSH
61323: CALL_OW 251
61327: PPUSH
61328: LD_INT 1
61330: PPUSH
61331: CALL_OW 453
61335: GO 61305
61337: POP
61338: POP
// end ;
61339: LD_VAR 0 2
61343: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61344: LD_INT 0
61346: PPUSH
61347: PPUSH
61348: PPUSH
61349: PPUSH
61350: PPUSH
61351: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61352: LD_VAR 0 1
61356: NOT
61357: PUSH
61358: LD_VAR 0 2
61362: NOT
61363: OR
61364: PUSH
61365: LD_VAR 0 1
61369: PPUSH
61370: CALL_OW 314
61374: OR
61375: IFFALSE 61379
// exit ;
61377: GO 61820
// x := GetX ( enemy_unit ) ;
61379: LD_ADDR_VAR 0 7
61383: PUSH
61384: LD_VAR 0 2
61388: PPUSH
61389: CALL_OW 250
61393: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61394: LD_ADDR_VAR 0 8
61398: PUSH
61399: LD_VAR 0 2
61403: PPUSH
61404: CALL_OW 251
61408: ST_TO_ADDR
// if not x or not y then
61409: LD_VAR 0 7
61413: NOT
61414: PUSH
61415: LD_VAR 0 8
61419: NOT
61420: OR
61421: IFFALSE 61425
// exit ;
61423: GO 61820
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61425: LD_ADDR_VAR 0 6
61429: PUSH
61430: LD_VAR 0 7
61434: PPUSH
61435: LD_INT 0
61437: PPUSH
61438: LD_INT 4
61440: PPUSH
61441: CALL_OW 272
61445: PUSH
61446: LD_VAR 0 8
61450: PPUSH
61451: LD_INT 0
61453: PPUSH
61454: LD_INT 4
61456: PPUSH
61457: CALL_OW 273
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_VAR 0 7
61470: PPUSH
61471: LD_INT 1
61473: PPUSH
61474: LD_INT 4
61476: PPUSH
61477: CALL_OW 272
61481: PUSH
61482: LD_VAR 0 8
61486: PPUSH
61487: LD_INT 1
61489: PPUSH
61490: LD_INT 4
61492: PPUSH
61493: CALL_OW 273
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_VAR 0 7
61506: PPUSH
61507: LD_INT 2
61509: PPUSH
61510: LD_INT 4
61512: PPUSH
61513: CALL_OW 272
61517: PUSH
61518: LD_VAR 0 8
61522: PPUSH
61523: LD_INT 2
61525: PPUSH
61526: LD_INT 4
61528: PPUSH
61529: CALL_OW 273
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_VAR 0 7
61542: PPUSH
61543: LD_INT 3
61545: PPUSH
61546: LD_INT 4
61548: PPUSH
61549: CALL_OW 272
61553: PUSH
61554: LD_VAR 0 8
61558: PPUSH
61559: LD_INT 3
61561: PPUSH
61562: LD_INT 4
61564: PPUSH
61565: CALL_OW 273
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_VAR 0 7
61578: PPUSH
61579: LD_INT 4
61581: PPUSH
61582: LD_INT 4
61584: PPUSH
61585: CALL_OW 272
61589: PUSH
61590: LD_VAR 0 8
61594: PPUSH
61595: LD_INT 4
61597: PPUSH
61598: LD_INT 4
61600: PPUSH
61601: CALL_OW 273
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_VAR 0 7
61614: PPUSH
61615: LD_INT 5
61617: PPUSH
61618: LD_INT 4
61620: PPUSH
61621: CALL_OW 272
61625: PUSH
61626: LD_VAR 0 8
61630: PPUSH
61631: LD_INT 5
61633: PPUSH
61634: LD_INT 4
61636: PPUSH
61637: CALL_OW 273
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: ST_TO_ADDR
// for i = tmp downto 1 do
61654: LD_ADDR_VAR 0 4
61658: PUSH
61659: DOUBLE
61660: LD_VAR 0 6
61664: INC
61665: ST_TO_ADDR
61666: LD_INT 1
61668: PUSH
61669: FOR_DOWNTO
61670: IFFALSE 61771
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61672: LD_VAR 0 6
61676: PUSH
61677: LD_VAR 0 4
61681: ARRAY
61682: PUSH
61683: LD_INT 1
61685: ARRAY
61686: PPUSH
61687: LD_VAR 0 6
61691: PUSH
61692: LD_VAR 0 4
61696: ARRAY
61697: PUSH
61698: LD_INT 2
61700: ARRAY
61701: PPUSH
61702: CALL_OW 488
61706: NOT
61707: PUSH
61708: LD_VAR 0 6
61712: PUSH
61713: LD_VAR 0 4
61717: ARRAY
61718: PUSH
61719: LD_INT 1
61721: ARRAY
61722: PPUSH
61723: LD_VAR 0 6
61727: PUSH
61728: LD_VAR 0 4
61732: ARRAY
61733: PUSH
61734: LD_INT 2
61736: ARRAY
61737: PPUSH
61738: CALL_OW 428
61742: PUSH
61743: LD_INT 0
61745: NONEQUAL
61746: OR
61747: IFFALSE 61769
// tmp := Delete ( tmp , i ) ;
61749: LD_ADDR_VAR 0 6
61753: PUSH
61754: LD_VAR 0 6
61758: PPUSH
61759: LD_VAR 0 4
61763: PPUSH
61764: CALL_OW 3
61768: ST_TO_ADDR
61769: GO 61669
61771: POP
61772: POP
// j := GetClosestHex ( unit , tmp ) ;
61773: LD_ADDR_VAR 0 5
61777: PUSH
61778: LD_VAR 0 1
61782: PPUSH
61783: LD_VAR 0 6
61787: PPUSH
61788: CALL 61090 0 2
61792: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61793: LD_VAR 0 1
61797: PPUSH
61798: LD_VAR 0 5
61802: PUSH
61803: LD_INT 1
61805: ARRAY
61806: PPUSH
61807: LD_VAR 0 5
61811: PUSH
61812: LD_INT 2
61814: ARRAY
61815: PPUSH
61816: CALL_OW 111
// end ;
61820: LD_VAR 0 3
61824: RET
// export function PrepareApemanSoldier ( ) ; begin
61825: LD_INT 0
61827: PPUSH
// uc_nation := 0 ;
61828: LD_ADDR_OWVAR 21
61832: PUSH
61833: LD_INT 0
61835: ST_TO_ADDR
// hc_sex := sex_male ;
61836: LD_ADDR_OWVAR 27
61840: PUSH
61841: LD_INT 1
61843: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61844: LD_ADDR_OWVAR 28
61848: PUSH
61849: LD_INT 15
61851: ST_TO_ADDR
// hc_gallery :=  ;
61852: LD_ADDR_OWVAR 33
61856: PUSH
61857: LD_STRING 
61859: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61860: LD_ADDR_OWVAR 31
61864: PUSH
61865: LD_INT 0
61867: PPUSH
61868: LD_INT 3
61870: PPUSH
61871: CALL_OW 12
61875: PUSH
61876: LD_INT 0
61878: PPUSH
61879: LD_INT 3
61881: PPUSH
61882: CALL_OW 12
61886: PUSH
61887: LD_INT 0
61889: PUSH
61890: LD_INT 0
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: ST_TO_ADDR
// end ;
61899: LD_VAR 0 1
61903: RET
// export function PrepareApemanEngineer ( ) ; begin
61904: LD_INT 0
61906: PPUSH
// uc_nation := 0 ;
61907: LD_ADDR_OWVAR 21
61911: PUSH
61912: LD_INT 0
61914: ST_TO_ADDR
// hc_sex := sex_male ;
61915: LD_ADDR_OWVAR 27
61919: PUSH
61920: LD_INT 1
61922: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61923: LD_ADDR_OWVAR 28
61927: PUSH
61928: LD_INT 16
61930: ST_TO_ADDR
// hc_gallery :=  ;
61931: LD_ADDR_OWVAR 33
61935: PUSH
61936: LD_STRING 
61938: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61939: LD_ADDR_OWVAR 31
61943: PUSH
61944: LD_INT 0
61946: PPUSH
61947: LD_INT 3
61949: PPUSH
61950: CALL_OW 12
61954: PUSH
61955: LD_INT 0
61957: PPUSH
61958: LD_INT 3
61960: PPUSH
61961: CALL_OW 12
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: ST_TO_ADDR
// end ;
61978: LD_VAR 0 1
61982: RET
// export function PrepareApeman ( agressivity ) ; begin
61983: LD_INT 0
61985: PPUSH
// uc_side := 0 ;
61986: LD_ADDR_OWVAR 20
61990: PUSH
61991: LD_INT 0
61993: ST_TO_ADDR
// uc_nation := 0 ;
61994: LD_ADDR_OWVAR 21
61998: PUSH
61999: LD_INT 0
62001: ST_TO_ADDR
// hc_sex := sex_male ;
62002: LD_ADDR_OWVAR 27
62006: PUSH
62007: LD_INT 1
62009: ST_TO_ADDR
// hc_class := class_apeman ;
62010: LD_ADDR_OWVAR 28
62014: PUSH
62015: LD_INT 12
62017: ST_TO_ADDR
// hc_gallery :=  ;
62018: LD_ADDR_OWVAR 33
62022: PUSH
62023: LD_STRING 
62025: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62026: LD_ADDR_OWVAR 35
62030: PUSH
62031: LD_VAR 0 1
62035: NEG
62036: PPUSH
62037: LD_VAR 0 1
62041: PPUSH
62042: CALL_OW 12
62046: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62047: LD_ADDR_OWVAR 31
62051: PUSH
62052: LD_INT 0
62054: PPUSH
62055: LD_INT 3
62057: PPUSH
62058: CALL_OW 12
62062: PUSH
62063: LD_INT 0
62065: PPUSH
62066: LD_INT 3
62068: PPUSH
62069: CALL_OW 12
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: ST_TO_ADDR
// end ;
62086: LD_VAR 0 2
62090: RET
// export function PrepareTiger ( agressivity ) ; begin
62091: LD_INT 0
62093: PPUSH
// uc_side := 0 ;
62094: LD_ADDR_OWVAR 20
62098: PUSH
62099: LD_INT 0
62101: ST_TO_ADDR
// uc_nation := 0 ;
62102: LD_ADDR_OWVAR 21
62106: PUSH
62107: LD_INT 0
62109: ST_TO_ADDR
// hc_class := class_tiger ;
62110: LD_ADDR_OWVAR 28
62114: PUSH
62115: LD_INT 14
62117: ST_TO_ADDR
// hc_gallery :=  ;
62118: LD_ADDR_OWVAR 33
62122: PUSH
62123: LD_STRING 
62125: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62126: LD_ADDR_OWVAR 35
62130: PUSH
62131: LD_VAR 0 1
62135: NEG
62136: PPUSH
62137: LD_VAR 0 1
62141: PPUSH
62142: CALL_OW 12
62146: ST_TO_ADDR
// end ;
62147: LD_VAR 0 2
62151: RET
// export function PrepareEnchidna ( ) ; begin
62152: LD_INT 0
62154: PPUSH
// uc_side := 0 ;
62155: LD_ADDR_OWVAR 20
62159: PUSH
62160: LD_INT 0
62162: ST_TO_ADDR
// uc_nation := 0 ;
62163: LD_ADDR_OWVAR 21
62167: PUSH
62168: LD_INT 0
62170: ST_TO_ADDR
// hc_class := class_baggie ;
62171: LD_ADDR_OWVAR 28
62175: PUSH
62176: LD_INT 13
62178: ST_TO_ADDR
// hc_gallery :=  ;
62179: LD_ADDR_OWVAR 33
62183: PUSH
62184: LD_STRING 
62186: ST_TO_ADDR
// end ;
62187: LD_VAR 0 1
62191: RET
// export function PrepareFrog ( ) ; begin
62192: LD_INT 0
62194: PPUSH
// uc_side := 0 ;
62195: LD_ADDR_OWVAR 20
62199: PUSH
62200: LD_INT 0
62202: ST_TO_ADDR
// uc_nation := 0 ;
62203: LD_ADDR_OWVAR 21
62207: PUSH
62208: LD_INT 0
62210: ST_TO_ADDR
// hc_class := class_frog ;
62211: LD_ADDR_OWVAR 28
62215: PUSH
62216: LD_INT 19
62218: ST_TO_ADDR
// hc_gallery :=  ;
62219: LD_ADDR_OWVAR 33
62223: PUSH
62224: LD_STRING 
62226: ST_TO_ADDR
// end ;
62227: LD_VAR 0 1
62231: RET
// export function PrepareFish ( ) ; begin
62232: LD_INT 0
62234: PPUSH
// uc_side := 0 ;
62235: LD_ADDR_OWVAR 20
62239: PUSH
62240: LD_INT 0
62242: ST_TO_ADDR
// uc_nation := 0 ;
62243: LD_ADDR_OWVAR 21
62247: PUSH
62248: LD_INT 0
62250: ST_TO_ADDR
// hc_class := class_fish ;
62251: LD_ADDR_OWVAR 28
62255: PUSH
62256: LD_INT 20
62258: ST_TO_ADDR
// hc_gallery :=  ;
62259: LD_ADDR_OWVAR 33
62263: PUSH
62264: LD_STRING 
62266: ST_TO_ADDR
// end ;
62267: LD_VAR 0 1
62271: RET
// export function PrepareBird ( ) ; begin
62272: LD_INT 0
62274: PPUSH
// uc_side := 0 ;
62275: LD_ADDR_OWVAR 20
62279: PUSH
62280: LD_INT 0
62282: ST_TO_ADDR
// uc_nation := 0 ;
62283: LD_ADDR_OWVAR 21
62287: PUSH
62288: LD_INT 0
62290: ST_TO_ADDR
// hc_class := class_phororhacos ;
62291: LD_ADDR_OWVAR 28
62295: PUSH
62296: LD_INT 18
62298: ST_TO_ADDR
// hc_gallery :=  ;
62299: LD_ADDR_OWVAR 33
62303: PUSH
62304: LD_STRING 
62306: ST_TO_ADDR
// end ;
62307: LD_VAR 0 1
62311: RET
// export function PrepareHorse ( ) ; begin
62312: LD_INT 0
62314: PPUSH
// uc_side := 0 ;
62315: LD_ADDR_OWVAR 20
62319: PUSH
62320: LD_INT 0
62322: ST_TO_ADDR
// uc_nation := 0 ;
62323: LD_ADDR_OWVAR 21
62327: PUSH
62328: LD_INT 0
62330: ST_TO_ADDR
// hc_class := class_horse ;
62331: LD_ADDR_OWVAR 28
62335: PUSH
62336: LD_INT 21
62338: ST_TO_ADDR
// hc_gallery :=  ;
62339: LD_ADDR_OWVAR 33
62343: PUSH
62344: LD_STRING 
62346: ST_TO_ADDR
// end ;
62347: LD_VAR 0 1
62351: RET
// export function PrepareMastodont ( ) ; begin
62352: LD_INT 0
62354: PPUSH
// uc_side := 0 ;
62355: LD_ADDR_OWVAR 20
62359: PUSH
62360: LD_INT 0
62362: ST_TO_ADDR
// uc_nation := 0 ;
62363: LD_ADDR_OWVAR 21
62367: PUSH
62368: LD_INT 0
62370: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62371: LD_ADDR_OWVAR 37
62375: PUSH
62376: LD_INT 31
62378: ST_TO_ADDR
// vc_control := control_rider ;
62379: LD_ADDR_OWVAR 38
62383: PUSH
62384: LD_INT 4
62386: ST_TO_ADDR
// end ;
62387: LD_VAR 0 1
62391: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62392: LD_INT 0
62394: PPUSH
62395: PPUSH
62396: PPUSH
// uc_side = 0 ;
62397: LD_ADDR_OWVAR 20
62401: PUSH
62402: LD_INT 0
62404: ST_TO_ADDR
// uc_nation = 0 ;
62405: LD_ADDR_OWVAR 21
62409: PUSH
62410: LD_INT 0
62412: ST_TO_ADDR
// InitHc_All ( ) ;
62413: CALL_OW 584
// InitVc ;
62417: CALL_OW 20
// if mastodonts then
62421: LD_VAR 0 6
62425: IFFALSE 62492
// for i = 1 to mastodonts do
62427: LD_ADDR_VAR 0 11
62431: PUSH
62432: DOUBLE
62433: LD_INT 1
62435: DEC
62436: ST_TO_ADDR
62437: LD_VAR 0 6
62441: PUSH
62442: FOR_TO
62443: IFFALSE 62490
// begin vc_chassis := 31 ;
62445: LD_ADDR_OWVAR 37
62449: PUSH
62450: LD_INT 31
62452: ST_TO_ADDR
// vc_control := control_rider ;
62453: LD_ADDR_OWVAR 38
62457: PUSH
62458: LD_INT 4
62460: ST_TO_ADDR
// animal := CreateVehicle ;
62461: LD_ADDR_VAR 0 12
62465: PUSH
62466: CALL_OW 45
62470: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62471: LD_VAR 0 12
62475: PPUSH
62476: LD_VAR 0 8
62480: PPUSH
62481: LD_INT 0
62483: PPUSH
62484: CALL 64627 0 3
// end ;
62488: GO 62442
62490: POP
62491: POP
// if horses then
62492: LD_VAR 0 5
62496: IFFALSE 62563
// for i = 1 to horses do
62498: LD_ADDR_VAR 0 11
62502: PUSH
62503: DOUBLE
62504: LD_INT 1
62506: DEC
62507: ST_TO_ADDR
62508: LD_VAR 0 5
62512: PUSH
62513: FOR_TO
62514: IFFALSE 62561
// begin hc_class := 21 ;
62516: LD_ADDR_OWVAR 28
62520: PUSH
62521: LD_INT 21
62523: ST_TO_ADDR
// hc_gallery :=  ;
62524: LD_ADDR_OWVAR 33
62528: PUSH
62529: LD_STRING 
62531: ST_TO_ADDR
// animal := CreateHuman ;
62532: LD_ADDR_VAR 0 12
62536: PUSH
62537: CALL_OW 44
62541: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62542: LD_VAR 0 12
62546: PPUSH
62547: LD_VAR 0 8
62551: PPUSH
62552: LD_INT 0
62554: PPUSH
62555: CALL 64627 0 3
// end ;
62559: GO 62513
62561: POP
62562: POP
// if birds then
62563: LD_VAR 0 1
62567: IFFALSE 62634
// for i = 1 to birds do
62569: LD_ADDR_VAR 0 11
62573: PUSH
62574: DOUBLE
62575: LD_INT 1
62577: DEC
62578: ST_TO_ADDR
62579: LD_VAR 0 1
62583: PUSH
62584: FOR_TO
62585: IFFALSE 62632
// begin hc_class = 18 ;
62587: LD_ADDR_OWVAR 28
62591: PUSH
62592: LD_INT 18
62594: ST_TO_ADDR
// hc_gallery =  ;
62595: LD_ADDR_OWVAR 33
62599: PUSH
62600: LD_STRING 
62602: ST_TO_ADDR
// animal := CreateHuman ;
62603: LD_ADDR_VAR 0 12
62607: PUSH
62608: CALL_OW 44
62612: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62613: LD_VAR 0 12
62617: PPUSH
62618: LD_VAR 0 8
62622: PPUSH
62623: LD_INT 0
62625: PPUSH
62626: CALL 64627 0 3
// end ;
62630: GO 62584
62632: POP
62633: POP
// if tigers then
62634: LD_VAR 0 2
62638: IFFALSE 62722
// for i = 1 to tigers do
62640: LD_ADDR_VAR 0 11
62644: PUSH
62645: DOUBLE
62646: LD_INT 1
62648: DEC
62649: ST_TO_ADDR
62650: LD_VAR 0 2
62654: PUSH
62655: FOR_TO
62656: IFFALSE 62720
// begin hc_class = class_tiger ;
62658: LD_ADDR_OWVAR 28
62662: PUSH
62663: LD_INT 14
62665: ST_TO_ADDR
// hc_gallery =  ;
62666: LD_ADDR_OWVAR 33
62670: PUSH
62671: LD_STRING 
62673: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62674: LD_ADDR_OWVAR 35
62678: PUSH
62679: LD_INT 7
62681: NEG
62682: PPUSH
62683: LD_INT 7
62685: PPUSH
62686: CALL_OW 12
62690: ST_TO_ADDR
// animal := CreateHuman ;
62691: LD_ADDR_VAR 0 12
62695: PUSH
62696: CALL_OW 44
62700: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62701: LD_VAR 0 12
62705: PPUSH
62706: LD_VAR 0 8
62710: PPUSH
62711: LD_INT 0
62713: PPUSH
62714: CALL 64627 0 3
// end ;
62718: GO 62655
62720: POP
62721: POP
// if apemans then
62722: LD_VAR 0 3
62726: IFFALSE 62849
// for i = 1 to apemans do
62728: LD_ADDR_VAR 0 11
62732: PUSH
62733: DOUBLE
62734: LD_INT 1
62736: DEC
62737: ST_TO_ADDR
62738: LD_VAR 0 3
62742: PUSH
62743: FOR_TO
62744: IFFALSE 62847
// begin hc_class = class_apeman ;
62746: LD_ADDR_OWVAR 28
62750: PUSH
62751: LD_INT 12
62753: ST_TO_ADDR
// hc_gallery =  ;
62754: LD_ADDR_OWVAR 33
62758: PUSH
62759: LD_STRING 
62761: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62762: LD_ADDR_OWVAR 35
62766: PUSH
62767: LD_INT 2
62769: NEG
62770: PPUSH
62771: LD_INT 2
62773: PPUSH
62774: CALL_OW 12
62778: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62779: LD_ADDR_OWVAR 31
62783: PUSH
62784: LD_INT 1
62786: PPUSH
62787: LD_INT 3
62789: PPUSH
62790: CALL_OW 12
62794: PUSH
62795: LD_INT 1
62797: PPUSH
62798: LD_INT 3
62800: PPUSH
62801: CALL_OW 12
62805: PUSH
62806: LD_INT 0
62808: PUSH
62809: LD_INT 0
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: ST_TO_ADDR
// animal := CreateHuman ;
62818: LD_ADDR_VAR 0 12
62822: PUSH
62823: CALL_OW 44
62827: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62828: LD_VAR 0 12
62832: PPUSH
62833: LD_VAR 0 8
62837: PPUSH
62838: LD_INT 0
62840: PPUSH
62841: CALL 64627 0 3
// end ;
62845: GO 62743
62847: POP
62848: POP
// if enchidnas then
62849: LD_VAR 0 4
62853: IFFALSE 62920
// for i = 1 to enchidnas do
62855: LD_ADDR_VAR 0 11
62859: PUSH
62860: DOUBLE
62861: LD_INT 1
62863: DEC
62864: ST_TO_ADDR
62865: LD_VAR 0 4
62869: PUSH
62870: FOR_TO
62871: IFFALSE 62918
// begin hc_class = 13 ;
62873: LD_ADDR_OWVAR 28
62877: PUSH
62878: LD_INT 13
62880: ST_TO_ADDR
// hc_gallery =  ;
62881: LD_ADDR_OWVAR 33
62885: PUSH
62886: LD_STRING 
62888: ST_TO_ADDR
// animal := CreateHuman ;
62889: LD_ADDR_VAR 0 12
62893: PUSH
62894: CALL_OW 44
62898: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62899: LD_VAR 0 12
62903: PPUSH
62904: LD_VAR 0 8
62908: PPUSH
62909: LD_INT 0
62911: PPUSH
62912: CALL 64627 0 3
// end ;
62916: GO 62870
62918: POP
62919: POP
// if fishes then
62920: LD_VAR 0 7
62924: IFFALSE 62991
// for i = 1 to fishes do
62926: LD_ADDR_VAR 0 11
62930: PUSH
62931: DOUBLE
62932: LD_INT 1
62934: DEC
62935: ST_TO_ADDR
62936: LD_VAR 0 7
62940: PUSH
62941: FOR_TO
62942: IFFALSE 62989
// begin hc_class = 20 ;
62944: LD_ADDR_OWVAR 28
62948: PUSH
62949: LD_INT 20
62951: ST_TO_ADDR
// hc_gallery =  ;
62952: LD_ADDR_OWVAR 33
62956: PUSH
62957: LD_STRING 
62959: ST_TO_ADDR
// animal := CreateHuman ;
62960: LD_ADDR_VAR 0 12
62964: PUSH
62965: CALL_OW 44
62969: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62970: LD_VAR 0 12
62974: PPUSH
62975: LD_VAR 0 9
62979: PPUSH
62980: LD_INT 0
62982: PPUSH
62983: CALL 64627 0 3
// end ;
62987: GO 62941
62989: POP
62990: POP
// end ;
62991: LD_VAR 0 10
62995: RET
// export function WantHeal ( sci , unit ) ; begin
62996: LD_INT 0
62998: PPUSH
// if GetTaskList ( sci ) > 0 then
62999: LD_VAR 0 1
63003: PPUSH
63004: CALL_OW 437
63008: PUSH
63009: LD_INT 0
63011: GREATER
63012: IFFALSE 63082
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63014: LD_VAR 0 1
63018: PPUSH
63019: CALL_OW 437
63023: PUSH
63024: LD_INT 1
63026: ARRAY
63027: PUSH
63028: LD_INT 1
63030: ARRAY
63031: PUSH
63032: LD_STRING l
63034: EQUAL
63035: PUSH
63036: LD_VAR 0 1
63040: PPUSH
63041: CALL_OW 437
63045: PUSH
63046: LD_INT 1
63048: ARRAY
63049: PUSH
63050: LD_INT 4
63052: ARRAY
63053: PUSH
63054: LD_VAR 0 2
63058: EQUAL
63059: AND
63060: IFFALSE 63072
// result := true else
63062: LD_ADDR_VAR 0 3
63066: PUSH
63067: LD_INT 1
63069: ST_TO_ADDR
63070: GO 63080
// result := false ;
63072: LD_ADDR_VAR 0 3
63076: PUSH
63077: LD_INT 0
63079: ST_TO_ADDR
// end else
63080: GO 63090
// result := false ;
63082: LD_ADDR_VAR 0 3
63086: PUSH
63087: LD_INT 0
63089: ST_TO_ADDR
// end ;
63090: LD_VAR 0 3
63094: RET
// export function HealTarget ( sci ) ; begin
63095: LD_INT 0
63097: PPUSH
// if not sci then
63098: LD_VAR 0 1
63102: NOT
63103: IFFALSE 63107
// exit ;
63105: GO 63172
// result := 0 ;
63107: LD_ADDR_VAR 0 2
63111: PUSH
63112: LD_INT 0
63114: ST_TO_ADDR
// if GetTaskList ( sci ) then
63115: LD_VAR 0 1
63119: PPUSH
63120: CALL_OW 437
63124: IFFALSE 63172
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63126: LD_VAR 0 1
63130: PPUSH
63131: CALL_OW 437
63135: PUSH
63136: LD_INT 1
63138: ARRAY
63139: PUSH
63140: LD_INT 1
63142: ARRAY
63143: PUSH
63144: LD_STRING l
63146: EQUAL
63147: IFFALSE 63172
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63149: LD_ADDR_VAR 0 2
63153: PUSH
63154: LD_VAR 0 1
63158: PPUSH
63159: CALL_OW 437
63163: PUSH
63164: LD_INT 1
63166: ARRAY
63167: PUSH
63168: LD_INT 4
63170: ARRAY
63171: ST_TO_ADDR
// end ;
63172: LD_VAR 0 2
63176: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63177: LD_INT 0
63179: PPUSH
63180: PPUSH
63181: PPUSH
63182: PPUSH
// if not base_units then
63183: LD_VAR 0 1
63187: NOT
63188: IFFALSE 63192
// exit ;
63190: GO 63279
// result := false ;
63192: LD_ADDR_VAR 0 2
63196: PUSH
63197: LD_INT 0
63199: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63200: LD_ADDR_VAR 0 5
63204: PUSH
63205: LD_VAR 0 1
63209: PPUSH
63210: LD_INT 21
63212: PUSH
63213: LD_INT 3
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PPUSH
63220: CALL_OW 72
63224: ST_TO_ADDR
// if not tmp then
63225: LD_VAR 0 5
63229: NOT
63230: IFFALSE 63234
// exit ;
63232: GO 63279
// for i in tmp do
63234: LD_ADDR_VAR 0 3
63238: PUSH
63239: LD_VAR 0 5
63243: PUSH
63244: FOR_IN
63245: IFFALSE 63277
// begin result := EnemyInRange ( i , 22 ) ;
63247: LD_ADDR_VAR 0 2
63251: PUSH
63252: LD_VAR 0 3
63256: PPUSH
63257: LD_INT 22
63259: PPUSH
63260: CALL 60892 0 2
63264: ST_TO_ADDR
// if result then
63265: LD_VAR 0 2
63269: IFFALSE 63275
// exit ;
63271: POP
63272: POP
63273: GO 63279
// end ;
63275: GO 63244
63277: POP
63278: POP
// end ;
63279: LD_VAR 0 2
63283: RET
// export function FilterByTag ( units , tag ) ; begin
63284: LD_INT 0
63286: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63287: LD_ADDR_VAR 0 3
63291: PUSH
63292: LD_VAR 0 1
63296: PPUSH
63297: LD_INT 120
63299: PUSH
63300: LD_VAR 0 2
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PPUSH
63309: CALL_OW 72
63313: ST_TO_ADDR
// end ;
63314: LD_VAR 0 3
63318: RET
// export function IsDriver ( un ) ; begin
63319: LD_INT 0
63321: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63322: LD_ADDR_VAR 0 2
63326: PUSH
63327: LD_VAR 0 1
63331: PUSH
63332: LD_INT 55
63334: PUSH
63335: EMPTY
63336: LIST
63337: PPUSH
63338: CALL_OW 69
63342: IN
63343: ST_TO_ADDR
// end ;
63344: LD_VAR 0 2
63348: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63349: LD_INT 0
63351: PPUSH
63352: PPUSH
// list := [ ] ;
63353: LD_ADDR_VAR 0 5
63357: PUSH
63358: EMPTY
63359: ST_TO_ADDR
// case d of 0 :
63360: LD_VAR 0 3
63364: PUSH
63365: LD_INT 0
63367: DOUBLE
63368: EQUAL
63369: IFTRUE 63373
63371: GO 63506
63373: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63374: LD_ADDR_VAR 0 5
63378: PUSH
63379: LD_VAR 0 1
63383: PUSH
63384: LD_INT 4
63386: MINUS
63387: PUSH
63388: LD_VAR 0 2
63392: PUSH
63393: LD_INT 4
63395: MINUS
63396: PUSH
63397: LD_INT 2
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: LIST
63404: PUSH
63405: LD_VAR 0 1
63409: PUSH
63410: LD_INT 3
63412: MINUS
63413: PUSH
63414: LD_VAR 0 2
63418: PUSH
63419: LD_INT 1
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: LIST
63426: PUSH
63427: LD_VAR 0 1
63431: PUSH
63432: LD_INT 4
63434: PLUS
63435: PUSH
63436: LD_VAR 0 2
63440: PUSH
63441: LD_INT 4
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: LIST
63448: PUSH
63449: LD_VAR 0 1
63453: PUSH
63454: LD_INT 3
63456: PLUS
63457: PUSH
63458: LD_VAR 0 2
63462: PUSH
63463: LD_INT 3
63465: PLUS
63466: PUSH
63467: LD_INT 5
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: LIST
63474: PUSH
63475: LD_VAR 0 1
63479: PUSH
63480: LD_VAR 0 2
63484: PUSH
63485: LD_INT 4
63487: PLUS
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: LIST
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: ST_TO_ADDR
// end ; 1 :
63504: GO 64204
63506: LD_INT 1
63508: DOUBLE
63509: EQUAL
63510: IFTRUE 63514
63512: GO 63647
63514: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63515: LD_ADDR_VAR 0 5
63519: PUSH
63520: LD_VAR 0 1
63524: PUSH
63525: LD_VAR 0 2
63529: PUSH
63530: LD_INT 4
63532: MINUS
63533: PUSH
63534: LD_INT 3
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: LIST
63541: PUSH
63542: LD_VAR 0 1
63546: PUSH
63547: LD_INT 3
63549: MINUS
63550: PUSH
63551: LD_VAR 0 2
63555: PUSH
63556: LD_INT 3
63558: MINUS
63559: PUSH
63560: LD_INT 2
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: LIST
63567: PUSH
63568: LD_VAR 0 1
63572: PUSH
63573: LD_INT 4
63575: MINUS
63576: PUSH
63577: LD_VAR 0 2
63581: PUSH
63582: LD_INT 1
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: LIST
63589: PUSH
63590: LD_VAR 0 1
63594: PUSH
63595: LD_VAR 0 2
63599: PUSH
63600: LD_INT 3
63602: PLUS
63603: PUSH
63604: LD_INT 0
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: LIST
63611: PUSH
63612: LD_VAR 0 1
63616: PUSH
63617: LD_INT 4
63619: PLUS
63620: PUSH
63621: LD_VAR 0 2
63625: PUSH
63626: LD_INT 4
63628: PLUS
63629: PUSH
63630: LD_INT 5
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: LIST
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: ST_TO_ADDR
// end ; 2 :
63645: GO 64204
63647: LD_INT 2
63649: DOUBLE
63650: EQUAL
63651: IFTRUE 63655
63653: GO 63784
63655: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63656: LD_ADDR_VAR 0 5
63660: PUSH
63661: LD_VAR 0 1
63665: PUSH
63666: LD_VAR 0 2
63670: PUSH
63671: LD_INT 3
63673: MINUS
63674: PUSH
63675: LD_INT 3
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: LIST
63682: PUSH
63683: LD_VAR 0 1
63687: PUSH
63688: LD_INT 4
63690: PLUS
63691: PUSH
63692: LD_VAR 0 2
63696: PUSH
63697: LD_INT 4
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: LIST
63704: PUSH
63705: LD_VAR 0 1
63709: PUSH
63710: LD_VAR 0 2
63714: PUSH
63715: LD_INT 4
63717: PLUS
63718: PUSH
63719: LD_INT 0
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: LIST
63726: PUSH
63727: LD_VAR 0 1
63731: PUSH
63732: LD_INT 3
63734: MINUS
63735: PUSH
63736: LD_VAR 0 2
63740: PUSH
63741: LD_INT 1
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: LIST
63748: PUSH
63749: LD_VAR 0 1
63753: PUSH
63754: LD_INT 4
63756: MINUS
63757: PUSH
63758: LD_VAR 0 2
63762: PUSH
63763: LD_INT 4
63765: MINUS
63766: PUSH
63767: LD_INT 2
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: LIST
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: ST_TO_ADDR
// end ; 3 :
63782: GO 64204
63784: LD_INT 3
63786: DOUBLE
63787: EQUAL
63788: IFTRUE 63792
63790: GO 63925
63792: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63793: LD_ADDR_VAR 0 5
63797: PUSH
63798: LD_VAR 0 1
63802: PUSH
63803: LD_INT 3
63805: PLUS
63806: PUSH
63807: LD_VAR 0 2
63811: PUSH
63812: LD_INT 4
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: LIST
63819: PUSH
63820: LD_VAR 0 1
63824: PUSH
63825: LD_INT 4
63827: PLUS
63828: PUSH
63829: LD_VAR 0 2
63833: PUSH
63834: LD_INT 4
63836: PLUS
63837: PUSH
63838: LD_INT 5
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: LIST
63845: PUSH
63846: LD_VAR 0 1
63850: PUSH
63851: LD_INT 4
63853: MINUS
63854: PUSH
63855: LD_VAR 0 2
63859: PUSH
63860: LD_INT 1
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: LIST
63867: PUSH
63868: LD_VAR 0 1
63872: PUSH
63873: LD_VAR 0 2
63877: PUSH
63878: LD_INT 4
63880: MINUS
63881: PUSH
63882: LD_INT 3
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: LIST
63889: PUSH
63890: LD_VAR 0 1
63894: PUSH
63895: LD_INT 3
63897: MINUS
63898: PUSH
63899: LD_VAR 0 2
63903: PUSH
63904: LD_INT 3
63906: MINUS
63907: PUSH
63908: LD_INT 2
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: LIST
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: ST_TO_ADDR
// end ; 4 :
63923: GO 64204
63925: LD_INT 4
63927: DOUBLE
63928: EQUAL
63929: IFTRUE 63933
63931: GO 64066
63933: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63934: LD_ADDR_VAR 0 5
63938: PUSH
63939: LD_VAR 0 1
63943: PUSH
63944: LD_VAR 0 2
63948: PUSH
63949: LD_INT 4
63951: PLUS
63952: PUSH
63953: LD_INT 0
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: LIST
63960: PUSH
63961: LD_VAR 0 1
63965: PUSH
63966: LD_INT 3
63968: PLUS
63969: PUSH
63970: LD_VAR 0 2
63974: PUSH
63975: LD_INT 3
63977: PLUS
63978: PUSH
63979: LD_INT 5
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: LIST
63986: PUSH
63987: LD_VAR 0 1
63991: PUSH
63992: LD_INT 4
63994: PLUS
63995: PUSH
63996: LD_VAR 0 2
64000: PUSH
64001: LD_INT 4
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: LIST
64008: PUSH
64009: LD_VAR 0 1
64013: PUSH
64014: LD_VAR 0 2
64018: PUSH
64019: LD_INT 3
64021: MINUS
64022: PUSH
64023: LD_INT 3
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: LIST
64030: PUSH
64031: LD_VAR 0 1
64035: PUSH
64036: LD_INT 4
64038: MINUS
64039: PUSH
64040: LD_VAR 0 2
64044: PUSH
64045: LD_INT 4
64047: MINUS
64048: PUSH
64049: LD_INT 2
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: LIST
64056: PUSH
64057: EMPTY
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: ST_TO_ADDR
// end ; 5 :
64064: GO 64204
64066: LD_INT 5
64068: DOUBLE
64069: EQUAL
64070: IFTRUE 64074
64072: GO 64203
64074: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64075: LD_ADDR_VAR 0 5
64079: PUSH
64080: LD_VAR 0 1
64084: PUSH
64085: LD_INT 4
64087: MINUS
64088: PUSH
64089: LD_VAR 0 2
64093: PUSH
64094: LD_INT 1
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: LIST
64101: PUSH
64102: LD_VAR 0 1
64106: PUSH
64107: LD_VAR 0 2
64111: PUSH
64112: LD_INT 4
64114: MINUS
64115: PUSH
64116: LD_INT 3
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: LIST
64123: PUSH
64124: LD_VAR 0 1
64128: PUSH
64129: LD_INT 4
64131: PLUS
64132: PUSH
64133: LD_VAR 0 2
64137: PUSH
64138: LD_INT 4
64140: PLUS
64141: PUSH
64142: LD_INT 5
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: LIST
64149: PUSH
64150: LD_VAR 0 1
64154: PUSH
64155: LD_INT 3
64157: PLUS
64158: PUSH
64159: LD_VAR 0 2
64163: PUSH
64164: LD_INT 4
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: LIST
64171: PUSH
64172: LD_VAR 0 1
64176: PUSH
64177: LD_VAR 0 2
64181: PUSH
64182: LD_INT 3
64184: PLUS
64185: PUSH
64186: LD_INT 0
64188: PUSH
64189: EMPTY
64190: LIST
64191: LIST
64192: LIST
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: ST_TO_ADDR
// end ; end ;
64201: GO 64204
64203: POP
// result := list ;
64204: LD_ADDR_VAR 0 4
64208: PUSH
64209: LD_VAR 0 5
64213: ST_TO_ADDR
// end ;
64214: LD_VAR 0 4
64218: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64219: LD_INT 0
64221: PPUSH
64222: PPUSH
64223: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64224: LD_VAR 0 1
64228: NOT
64229: PUSH
64230: LD_VAR 0 2
64234: PUSH
64235: LD_INT 1
64237: PUSH
64238: LD_INT 2
64240: PUSH
64241: LD_INT 3
64243: PUSH
64244: LD_INT 4
64246: PUSH
64247: EMPTY
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: IN
64253: NOT
64254: OR
64255: IFFALSE 64259
// exit ;
64257: GO 64351
// tmp := [ ] ;
64259: LD_ADDR_VAR 0 5
64263: PUSH
64264: EMPTY
64265: ST_TO_ADDR
// for i in units do
64266: LD_ADDR_VAR 0 4
64270: PUSH
64271: LD_VAR 0 1
64275: PUSH
64276: FOR_IN
64277: IFFALSE 64320
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
64279: LD_ADDR_VAR 0 5
64283: PUSH
64284: LD_VAR 0 5
64288: PPUSH
64289: LD_VAR 0 5
64293: PUSH
64294: LD_INT 1
64296: PLUS
64297: PPUSH
64298: LD_VAR 0 4
64302: PPUSH
64303: LD_VAR 0 2
64307: PPUSH
64308: CALL_OW 259
64312: PPUSH
64313: CALL_OW 2
64317: ST_TO_ADDR
64318: GO 64276
64320: POP
64321: POP
// if not tmp then
64322: LD_VAR 0 5
64326: NOT
64327: IFFALSE 64331
// exit ;
64329: GO 64351
// result := SortListByListDesc ( units , tmp ) ;
64331: LD_ADDR_VAR 0 3
64335: PUSH
64336: LD_VAR 0 1
64340: PPUSH
64341: LD_VAR 0 5
64345: PPUSH
64346: CALL_OW 77
64350: ST_TO_ADDR
// end ;
64351: LD_VAR 0 3
64355: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64356: LD_INT 0
64358: PPUSH
64359: PPUSH
64360: PPUSH
// result := false ;
64361: LD_ADDR_VAR 0 3
64365: PUSH
64366: LD_INT 0
64368: ST_TO_ADDR
// x := GetX ( building ) ;
64369: LD_ADDR_VAR 0 4
64373: PUSH
64374: LD_VAR 0 2
64378: PPUSH
64379: CALL_OW 250
64383: ST_TO_ADDR
// y := GetY ( building ) ;
64384: LD_ADDR_VAR 0 5
64388: PUSH
64389: LD_VAR 0 2
64393: PPUSH
64394: CALL_OW 251
64398: ST_TO_ADDR
// if not building or not x or not y then
64399: LD_VAR 0 2
64403: NOT
64404: PUSH
64405: LD_VAR 0 4
64409: NOT
64410: OR
64411: PUSH
64412: LD_VAR 0 5
64416: NOT
64417: OR
64418: IFFALSE 64422
// exit ;
64420: GO 64514
// if GetTaskList ( unit ) then
64422: LD_VAR 0 1
64426: PPUSH
64427: CALL_OW 437
64431: IFFALSE 64514
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64433: LD_STRING e
64435: PUSH
64436: LD_VAR 0 1
64440: PPUSH
64441: CALL_OW 437
64445: PUSH
64446: LD_INT 1
64448: ARRAY
64449: PUSH
64450: LD_INT 1
64452: ARRAY
64453: EQUAL
64454: PUSH
64455: LD_VAR 0 4
64459: PUSH
64460: LD_VAR 0 1
64464: PPUSH
64465: CALL_OW 437
64469: PUSH
64470: LD_INT 1
64472: ARRAY
64473: PUSH
64474: LD_INT 2
64476: ARRAY
64477: EQUAL
64478: AND
64479: PUSH
64480: LD_VAR 0 5
64484: PUSH
64485: LD_VAR 0 1
64489: PPUSH
64490: CALL_OW 437
64494: PUSH
64495: LD_INT 1
64497: ARRAY
64498: PUSH
64499: LD_INT 3
64501: ARRAY
64502: EQUAL
64503: AND
64504: IFFALSE 64514
// result := true end ;
64506: LD_ADDR_VAR 0 3
64510: PUSH
64511: LD_INT 1
64513: ST_TO_ADDR
// end ;
64514: LD_VAR 0 3
64518: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64519: LD_INT 0
64521: PPUSH
// result := false ;
64522: LD_ADDR_VAR 0 4
64526: PUSH
64527: LD_INT 0
64529: ST_TO_ADDR
// if GetTaskList ( unit ) then
64530: LD_VAR 0 1
64534: PPUSH
64535: CALL_OW 437
64539: IFFALSE 64622
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64541: LD_STRING M
64543: PUSH
64544: LD_VAR 0 1
64548: PPUSH
64549: CALL_OW 437
64553: PUSH
64554: LD_INT 1
64556: ARRAY
64557: PUSH
64558: LD_INT 1
64560: ARRAY
64561: EQUAL
64562: PUSH
64563: LD_VAR 0 2
64567: PUSH
64568: LD_VAR 0 1
64572: PPUSH
64573: CALL_OW 437
64577: PUSH
64578: LD_INT 1
64580: ARRAY
64581: PUSH
64582: LD_INT 2
64584: ARRAY
64585: EQUAL
64586: AND
64587: PUSH
64588: LD_VAR 0 3
64592: PUSH
64593: LD_VAR 0 1
64597: PPUSH
64598: CALL_OW 437
64602: PUSH
64603: LD_INT 1
64605: ARRAY
64606: PUSH
64607: LD_INT 3
64609: ARRAY
64610: EQUAL
64611: AND
64612: IFFALSE 64622
// result := true ;
64614: LD_ADDR_VAR 0 4
64618: PUSH
64619: LD_INT 1
64621: ST_TO_ADDR
// end ; end ;
64622: LD_VAR 0 4
64626: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64627: LD_INT 0
64629: PPUSH
64630: PPUSH
64631: PPUSH
64632: PPUSH
// if not unit or not area then
64633: LD_VAR 0 1
64637: NOT
64638: PUSH
64639: LD_VAR 0 2
64643: NOT
64644: OR
64645: IFFALSE 64649
// exit ;
64647: GO 64813
// tmp := AreaToList ( area , i ) ;
64649: LD_ADDR_VAR 0 6
64653: PUSH
64654: LD_VAR 0 2
64658: PPUSH
64659: LD_VAR 0 5
64663: PPUSH
64664: CALL_OW 517
64668: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64669: LD_ADDR_VAR 0 5
64673: PUSH
64674: DOUBLE
64675: LD_INT 1
64677: DEC
64678: ST_TO_ADDR
64679: LD_VAR 0 6
64683: PUSH
64684: LD_INT 1
64686: ARRAY
64687: PUSH
64688: FOR_TO
64689: IFFALSE 64811
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64691: LD_ADDR_VAR 0 7
64695: PUSH
64696: LD_VAR 0 6
64700: PUSH
64701: LD_INT 1
64703: ARRAY
64704: PUSH
64705: LD_VAR 0 5
64709: ARRAY
64710: PUSH
64711: LD_VAR 0 6
64715: PUSH
64716: LD_INT 2
64718: ARRAY
64719: PUSH
64720: LD_VAR 0 5
64724: ARRAY
64725: PUSH
64726: EMPTY
64727: LIST
64728: LIST
64729: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
64730: LD_VAR 0 7
64734: PUSH
64735: LD_INT 1
64737: ARRAY
64738: PPUSH
64739: LD_VAR 0 7
64743: PUSH
64744: LD_INT 2
64746: ARRAY
64747: PPUSH
64748: CALL_OW 428
64752: PUSH
64753: LD_INT 0
64755: EQUAL
64756: IFFALSE 64809
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64758: LD_VAR 0 1
64762: PPUSH
64763: LD_VAR 0 7
64767: PUSH
64768: LD_INT 1
64770: ARRAY
64771: PPUSH
64772: LD_VAR 0 7
64776: PUSH
64777: LD_INT 2
64779: ARRAY
64780: PPUSH
64781: LD_VAR 0 3
64785: PPUSH
64786: CALL_OW 48
// result := IsPlaced ( unit ) ;
64790: LD_ADDR_VAR 0 4
64794: PUSH
64795: LD_VAR 0 1
64799: PPUSH
64800: CALL_OW 305
64804: ST_TO_ADDR
// exit ;
64805: POP
64806: POP
64807: GO 64813
// end ; end ;
64809: GO 64688
64811: POP
64812: POP
// end ;
64813: LD_VAR 0 4
64817: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64818: LD_INT 0
64820: PPUSH
64821: PPUSH
64822: PPUSH
// if not side or side > 8 then
64823: LD_VAR 0 1
64827: NOT
64828: PUSH
64829: LD_VAR 0 1
64833: PUSH
64834: LD_INT 8
64836: GREATER
64837: OR
64838: IFFALSE 64842
// exit ;
64840: GO 65029
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64842: LD_ADDR_VAR 0 4
64846: PUSH
64847: LD_INT 22
64849: PUSH
64850: LD_VAR 0 1
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 21
64861: PUSH
64862: LD_INT 3
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PPUSH
64873: CALL_OW 69
64877: ST_TO_ADDR
// if not tmp then
64878: LD_VAR 0 4
64882: NOT
64883: IFFALSE 64887
// exit ;
64885: GO 65029
// enable_addtolog := true ;
64887: LD_ADDR_OWVAR 81
64891: PUSH
64892: LD_INT 1
64894: ST_TO_ADDR
// AddToLog ( [ ) ;
64895: LD_STRING [
64897: PPUSH
64898: CALL_OW 561
// for i in tmp do
64902: LD_ADDR_VAR 0 3
64906: PUSH
64907: LD_VAR 0 4
64911: PUSH
64912: FOR_IN
64913: IFFALSE 65020
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
64915: LD_STRING [
64917: PUSH
64918: LD_VAR 0 3
64922: PPUSH
64923: CALL_OW 266
64927: STR
64928: PUSH
64929: LD_STRING , 
64931: STR
64932: PUSH
64933: LD_VAR 0 3
64937: PPUSH
64938: CALL_OW 250
64942: STR
64943: PUSH
64944: LD_STRING , 
64946: STR
64947: PUSH
64948: LD_VAR 0 3
64952: PPUSH
64953: CALL_OW 251
64957: STR
64958: PUSH
64959: LD_STRING , 
64961: STR
64962: PUSH
64963: LD_VAR 0 3
64967: PPUSH
64968: CALL_OW 254
64972: STR
64973: PUSH
64974: LD_STRING , 
64976: STR
64977: PUSH
64978: LD_VAR 0 3
64982: PPUSH
64983: LD_INT 1
64985: PPUSH
64986: CALL_OW 268
64990: STR
64991: PUSH
64992: LD_STRING , 
64994: STR
64995: PUSH
64996: LD_VAR 0 3
65000: PPUSH
65001: LD_INT 2
65003: PPUSH
65004: CALL_OW 268
65008: STR
65009: PUSH
65010: LD_STRING ],
65012: STR
65013: PPUSH
65014: CALL_OW 561
// end ;
65018: GO 64912
65020: POP
65021: POP
// AddToLog ( ]; ) ;
65022: LD_STRING ];
65024: PPUSH
65025: CALL_OW 561
// end ;
65029: LD_VAR 0 2
65033: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65034: LD_INT 0
65036: PPUSH
65037: PPUSH
65038: PPUSH
65039: PPUSH
65040: PPUSH
// if not area or not rate or not max then
65041: LD_VAR 0 1
65045: NOT
65046: PUSH
65047: LD_VAR 0 2
65051: NOT
65052: OR
65053: PUSH
65054: LD_VAR 0 4
65058: NOT
65059: OR
65060: IFFALSE 65064
// exit ;
65062: GO 65253
// while 1 do
65064: LD_INT 1
65066: IFFALSE 65253
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65068: LD_ADDR_VAR 0 9
65072: PUSH
65073: LD_VAR 0 1
65077: PPUSH
65078: LD_INT 1
65080: PPUSH
65081: CALL_OW 287
65085: PUSH
65086: LD_INT 10
65088: MUL
65089: ST_TO_ADDR
// r := rate / 10 ;
65090: LD_ADDR_VAR 0 7
65094: PUSH
65095: LD_VAR 0 2
65099: PUSH
65100: LD_INT 10
65102: DIVREAL
65103: ST_TO_ADDR
// time := 1 1$00 ;
65104: LD_ADDR_VAR 0 8
65108: PUSH
65109: LD_INT 2100
65111: ST_TO_ADDR
// if amount < min then
65112: LD_VAR 0 9
65116: PUSH
65117: LD_VAR 0 3
65121: LESS
65122: IFFALSE 65140
// r := r * 2 else
65124: LD_ADDR_VAR 0 7
65128: PUSH
65129: LD_VAR 0 7
65133: PUSH
65134: LD_INT 2
65136: MUL
65137: ST_TO_ADDR
65138: GO 65166
// if amount > max then
65140: LD_VAR 0 9
65144: PUSH
65145: LD_VAR 0 4
65149: GREATER
65150: IFFALSE 65166
// r := r / 2 ;
65152: LD_ADDR_VAR 0 7
65156: PUSH
65157: LD_VAR 0 7
65161: PUSH
65162: LD_INT 2
65164: DIVREAL
65165: ST_TO_ADDR
// time := time / r ;
65166: LD_ADDR_VAR 0 8
65170: PUSH
65171: LD_VAR 0 8
65175: PUSH
65176: LD_VAR 0 7
65180: DIVREAL
65181: ST_TO_ADDR
// if time < 0 then
65182: LD_VAR 0 8
65186: PUSH
65187: LD_INT 0
65189: LESS
65190: IFFALSE 65207
// time := time * - 1 ;
65192: LD_ADDR_VAR 0 8
65196: PUSH
65197: LD_VAR 0 8
65201: PUSH
65202: LD_INT 1
65204: NEG
65205: MUL
65206: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65207: LD_VAR 0 8
65211: PUSH
65212: LD_INT 35
65214: PPUSH
65215: LD_INT 875
65217: PPUSH
65218: CALL_OW 12
65222: PLUS
65223: PPUSH
65224: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65228: LD_INT 1
65230: PPUSH
65231: LD_INT 5
65233: PPUSH
65234: CALL_OW 12
65238: PPUSH
65239: LD_VAR 0 1
65243: PPUSH
65244: LD_INT 1
65246: PPUSH
65247: CALL_OW 55
// end ;
65251: GO 65064
// end ;
65253: LD_VAR 0 5
65257: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65258: LD_INT 0
65260: PPUSH
65261: PPUSH
65262: PPUSH
65263: PPUSH
65264: PPUSH
65265: PPUSH
65266: PPUSH
65267: PPUSH
// if not turrets or not factories then
65268: LD_VAR 0 1
65272: NOT
65273: PUSH
65274: LD_VAR 0 2
65278: NOT
65279: OR
65280: IFFALSE 65284
// exit ;
65282: GO 65591
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65284: LD_ADDR_VAR 0 10
65288: PUSH
65289: LD_INT 5
65291: PUSH
65292: LD_INT 6
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 2
65301: PUSH
65302: LD_INT 4
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 3
65311: PUSH
65312: LD_INT 5
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 24
65326: PUSH
65327: LD_INT 25
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 23
65336: PUSH
65337: LD_INT 27
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 42
65350: PUSH
65351: LD_INT 43
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 44
65360: PUSH
65361: LD_INT 46
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 45
65370: PUSH
65371: LD_INT 47
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: LIST
65382: PUSH
65383: EMPTY
65384: LIST
65385: LIST
65386: LIST
65387: ST_TO_ADDR
// result := [ ] ;
65388: LD_ADDR_VAR 0 3
65392: PUSH
65393: EMPTY
65394: ST_TO_ADDR
// for i in turrets do
65395: LD_ADDR_VAR 0 4
65399: PUSH
65400: LD_VAR 0 1
65404: PUSH
65405: FOR_IN
65406: IFFALSE 65589
// begin nat := GetNation ( i ) ;
65408: LD_ADDR_VAR 0 7
65412: PUSH
65413: LD_VAR 0 4
65417: PPUSH
65418: CALL_OW 248
65422: ST_TO_ADDR
// weapon := 0 ;
65423: LD_ADDR_VAR 0 8
65427: PUSH
65428: LD_INT 0
65430: ST_TO_ADDR
// if not nat then
65431: LD_VAR 0 7
65435: NOT
65436: IFFALSE 65440
// continue ;
65438: GO 65405
// for j in list [ nat ] do
65440: LD_ADDR_VAR 0 5
65444: PUSH
65445: LD_VAR 0 10
65449: PUSH
65450: LD_VAR 0 7
65454: ARRAY
65455: PUSH
65456: FOR_IN
65457: IFFALSE 65498
// if GetBWeapon ( i ) = j [ 1 ] then
65459: LD_VAR 0 4
65463: PPUSH
65464: CALL_OW 269
65468: PUSH
65469: LD_VAR 0 5
65473: PUSH
65474: LD_INT 1
65476: ARRAY
65477: EQUAL
65478: IFFALSE 65496
// begin weapon := j [ 2 ] ;
65480: LD_ADDR_VAR 0 8
65484: PUSH
65485: LD_VAR 0 5
65489: PUSH
65490: LD_INT 2
65492: ARRAY
65493: ST_TO_ADDR
// break ;
65494: GO 65498
// end ;
65496: GO 65456
65498: POP
65499: POP
// if not weapon then
65500: LD_VAR 0 8
65504: NOT
65505: IFFALSE 65509
// continue ;
65507: GO 65405
// for k in factories do
65509: LD_ADDR_VAR 0 6
65513: PUSH
65514: LD_VAR 0 2
65518: PUSH
65519: FOR_IN
65520: IFFALSE 65585
// begin weapons := AvailableWeaponList ( k ) ;
65522: LD_ADDR_VAR 0 9
65526: PUSH
65527: LD_VAR 0 6
65531: PPUSH
65532: CALL_OW 478
65536: ST_TO_ADDR
// if not weapons then
65537: LD_VAR 0 9
65541: NOT
65542: IFFALSE 65546
// continue ;
65544: GO 65519
// if weapon in weapons then
65546: LD_VAR 0 8
65550: PUSH
65551: LD_VAR 0 9
65555: IN
65556: IFFALSE 65583
// begin result := [ i , weapon ] ;
65558: LD_ADDR_VAR 0 3
65562: PUSH
65563: LD_VAR 0 4
65567: PUSH
65568: LD_VAR 0 8
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: ST_TO_ADDR
// exit ;
65577: POP
65578: POP
65579: POP
65580: POP
65581: GO 65591
// end ; end ;
65583: GO 65519
65585: POP
65586: POP
// end ;
65587: GO 65405
65589: POP
65590: POP
// end ;
65591: LD_VAR 0 3
65595: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65596: LD_INT 0
65598: PPUSH
// if not side or side > 8 then
65599: LD_VAR 0 3
65603: NOT
65604: PUSH
65605: LD_VAR 0 3
65609: PUSH
65610: LD_INT 8
65612: GREATER
65613: OR
65614: IFFALSE 65618
// exit ;
65616: GO 65677
// if not range then
65618: LD_VAR 0 4
65622: NOT
65623: IFFALSE 65634
// range := - 12 ;
65625: LD_ADDR_VAR 0 4
65629: PUSH
65630: LD_INT 12
65632: NEG
65633: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65634: LD_VAR 0 1
65638: PPUSH
65639: LD_VAR 0 2
65643: PPUSH
65644: LD_VAR 0 3
65648: PPUSH
65649: LD_VAR 0 4
65653: PPUSH
65654: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65658: LD_VAR 0 1
65662: PPUSH
65663: LD_VAR 0 2
65667: PPUSH
65668: LD_VAR 0 3
65672: PPUSH
65673: CALL_OW 331
// end ;
65677: LD_VAR 0 5
65681: RET
// export function Video ( mode ) ; begin
65682: LD_INT 0
65684: PPUSH
// ingame_video = mode ;
65685: LD_ADDR_OWVAR 52
65689: PUSH
65690: LD_VAR 0 1
65694: ST_TO_ADDR
// interface_hidden = mode ;
65695: LD_ADDR_OWVAR 54
65699: PUSH
65700: LD_VAR 0 1
65704: ST_TO_ADDR
// end ;
65705: LD_VAR 0 2
65709: RET
// export function Join ( array , element ) ; begin
65710: LD_INT 0
65712: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65713: LD_ADDR_VAR 0 3
65717: PUSH
65718: LD_VAR 0 1
65722: PPUSH
65723: LD_VAR 0 1
65727: PUSH
65728: LD_INT 1
65730: PLUS
65731: PPUSH
65732: LD_VAR 0 2
65736: PPUSH
65737: CALL_OW 1
65741: ST_TO_ADDR
// end ;
65742: LD_VAR 0 3
65746: RET
// export function JoinUnion ( array , element ) ; begin
65747: LD_INT 0
65749: PPUSH
// result := array union element ;
65750: LD_ADDR_VAR 0 3
65754: PUSH
65755: LD_VAR 0 1
65759: PUSH
65760: LD_VAR 0 2
65764: UNION
65765: ST_TO_ADDR
// end ;
65766: LD_VAR 0 3
65770: RET
// export function GetBehemoths ( side ) ; begin
65771: LD_INT 0
65773: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65774: LD_ADDR_VAR 0 2
65778: PUSH
65779: LD_INT 22
65781: PUSH
65782: LD_VAR 0 1
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 31
65793: PUSH
65794: LD_INT 25
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PPUSH
65805: CALL_OW 69
65809: ST_TO_ADDR
// end ;
65810: LD_VAR 0 2
65814: RET
// export function Shuffle ( array ) ; var i , index ; begin
65815: LD_INT 0
65817: PPUSH
65818: PPUSH
65819: PPUSH
// result := [ ] ;
65820: LD_ADDR_VAR 0 2
65824: PUSH
65825: EMPTY
65826: ST_TO_ADDR
// if not array then
65827: LD_VAR 0 1
65831: NOT
65832: IFFALSE 65836
// exit ;
65834: GO 65935
// Randomize ;
65836: CALL_OW 10
// for i = array downto 1 do
65840: LD_ADDR_VAR 0 3
65844: PUSH
65845: DOUBLE
65846: LD_VAR 0 1
65850: INC
65851: ST_TO_ADDR
65852: LD_INT 1
65854: PUSH
65855: FOR_DOWNTO
65856: IFFALSE 65933
// begin index := rand ( 1 , array ) ;
65858: LD_ADDR_VAR 0 4
65862: PUSH
65863: LD_INT 1
65865: PPUSH
65866: LD_VAR 0 1
65870: PPUSH
65871: CALL_OW 12
65875: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65876: LD_ADDR_VAR 0 2
65880: PUSH
65881: LD_VAR 0 2
65885: PPUSH
65886: LD_VAR 0 2
65890: PUSH
65891: LD_INT 1
65893: PLUS
65894: PPUSH
65895: LD_VAR 0 1
65899: PUSH
65900: LD_VAR 0 4
65904: ARRAY
65905: PPUSH
65906: CALL_OW 2
65910: ST_TO_ADDR
// array := Delete ( array , index ) ;
65911: LD_ADDR_VAR 0 1
65915: PUSH
65916: LD_VAR 0 1
65920: PPUSH
65921: LD_VAR 0 4
65925: PPUSH
65926: CALL_OW 3
65930: ST_TO_ADDR
// end ;
65931: GO 65855
65933: POP
65934: POP
// end ;
65935: LD_VAR 0 2
65939: RET
// export function GetBaseMaterials ( base ) ; begin
65940: LD_INT 0
65942: PPUSH
// result := [ 0 , 0 , 0 ] ;
65943: LD_ADDR_VAR 0 2
65947: PUSH
65948: LD_INT 0
65950: PUSH
65951: LD_INT 0
65953: PUSH
65954: LD_INT 0
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: LIST
65961: ST_TO_ADDR
// if not base then
65962: LD_VAR 0 1
65966: NOT
65967: IFFALSE 65971
// exit ;
65969: GO 66020
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65971: LD_ADDR_VAR 0 2
65975: PUSH
65976: LD_VAR 0 1
65980: PPUSH
65981: LD_INT 1
65983: PPUSH
65984: CALL_OW 275
65988: PUSH
65989: LD_VAR 0 1
65993: PPUSH
65994: LD_INT 2
65996: PPUSH
65997: CALL_OW 275
66001: PUSH
66002: LD_VAR 0 1
66006: PPUSH
66007: LD_INT 3
66009: PPUSH
66010: CALL_OW 275
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: LIST
66019: ST_TO_ADDR
// end ;
66020: LD_VAR 0 2
66024: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66025: LD_INT 0
66027: PPUSH
66028: PPUSH
// result := array ;
66029: LD_ADDR_VAR 0 3
66033: PUSH
66034: LD_VAR 0 1
66038: ST_TO_ADDR
// if size >= result then
66039: LD_VAR 0 2
66043: PUSH
66044: LD_VAR 0 3
66048: GREATEREQUAL
66049: IFFALSE 66053
// exit ;
66051: GO 66103
// if size then
66053: LD_VAR 0 2
66057: IFFALSE 66103
// for i := array downto size do
66059: LD_ADDR_VAR 0 4
66063: PUSH
66064: DOUBLE
66065: LD_VAR 0 1
66069: INC
66070: ST_TO_ADDR
66071: LD_VAR 0 2
66075: PUSH
66076: FOR_DOWNTO
66077: IFFALSE 66101
// result := Delete ( result , result ) ;
66079: LD_ADDR_VAR 0 3
66083: PUSH
66084: LD_VAR 0 3
66088: PPUSH
66089: LD_VAR 0 3
66093: PPUSH
66094: CALL_OW 3
66098: ST_TO_ADDR
66099: GO 66076
66101: POP
66102: POP
// end ;
66103: LD_VAR 0 3
66107: RET
// export function ComExit ( unit ) ; var tmp ; begin
66108: LD_INT 0
66110: PPUSH
66111: PPUSH
// if not IsInUnit ( unit ) then
66112: LD_VAR 0 1
66116: PPUSH
66117: CALL_OW 310
66121: NOT
66122: IFFALSE 66126
// exit ;
66124: GO 66186
// tmp := IsInUnit ( unit ) ;
66126: LD_ADDR_VAR 0 3
66130: PUSH
66131: LD_VAR 0 1
66135: PPUSH
66136: CALL_OW 310
66140: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66141: LD_VAR 0 3
66145: PPUSH
66146: CALL_OW 247
66150: PUSH
66151: LD_INT 2
66153: EQUAL
66154: IFFALSE 66167
// ComExitVehicle ( unit ) else
66156: LD_VAR 0 1
66160: PPUSH
66161: CALL_OW 121
66165: GO 66176
// ComExitBuilding ( unit ) ;
66167: LD_VAR 0 1
66171: PPUSH
66172: CALL_OW 122
// result := tmp ;
66176: LD_ADDR_VAR 0 2
66180: PUSH
66181: LD_VAR 0 3
66185: ST_TO_ADDR
// end ;
66186: LD_VAR 0 2
66190: RET
// export function ComExitAll ( units ) ; var i ; begin
66191: LD_INT 0
66193: PPUSH
66194: PPUSH
// if not units then
66195: LD_VAR 0 1
66199: NOT
66200: IFFALSE 66204
// exit ;
66202: GO 66230
// for i in units do
66204: LD_ADDR_VAR 0 3
66208: PUSH
66209: LD_VAR 0 1
66213: PUSH
66214: FOR_IN
66215: IFFALSE 66228
// ComExit ( i ) ;
66217: LD_VAR 0 3
66221: PPUSH
66222: CALL 66108 0 1
66226: GO 66214
66228: POP
66229: POP
// end ;
66230: LD_VAR 0 2
66234: RET
// export function ResetHc ; begin
66235: LD_INT 0
66237: PPUSH
// InitHc ;
66238: CALL_OW 19
// hc_importance := 0 ;
66242: LD_ADDR_OWVAR 32
66246: PUSH
66247: LD_INT 0
66249: ST_TO_ADDR
// end ;
66250: LD_VAR 0 1
66254: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66255: LD_INT 0
66257: PPUSH
66258: PPUSH
66259: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66260: LD_ADDR_VAR 0 6
66264: PUSH
66265: LD_VAR 0 1
66269: PUSH
66270: LD_VAR 0 3
66274: PLUS
66275: PUSH
66276: LD_INT 2
66278: DIV
66279: ST_TO_ADDR
// if _x < 0 then
66280: LD_VAR 0 6
66284: PUSH
66285: LD_INT 0
66287: LESS
66288: IFFALSE 66305
// _x := _x * - 1 ;
66290: LD_ADDR_VAR 0 6
66294: PUSH
66295: LD_VAR 0 6
66299: PUSH
66300: LD_INT 1
66302: NEG
66303: MUL
66304: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66305: LD_ADDR_VAR 0 7
66309: PUSH
66310: LD_VAR 0 2
66314: PUSH
66315: LD_VAR 0 4
66319: PLUS
66320: PUSH
66321: LD_INT 2
66323: DIV
66324: ST_TO_ADDR
// if _y < 0 then
66325: LD_VAR 0 7
66329: PUSH
66330: LD_INT 0
66332: LESS
66333: IFFALSE 66350
// _y := _y * - 1 ;
66335: LD_ADDR_VAR 0 7
66339: PUSH
66340: LD_VAR 0 7
66344: PUSH
66345: LD_INT 1
66347: NEG
66348: MUL
66349: ST_TO_ADDR
// result := [ _x , _y ] ;
66350: LD_ADDR_VAR 0 5
66354: PUSH
66355: LD_VAR 0 6
66359: PUSH
66360: LD_VAR 0 7
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: ST_TO_ADDR
// end ;
66369: LD_VAR 0 5
66373: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66374: LD_INT 0
66376: PPUSH
66377: PPUSH
66378: PPUSH
66379: PPUSH
// task := GetTaskList ( unit ) ;
66380: LD_ADDR_VAR 0 7
66384: PUSH
66385: LD_VAR 0 1
66389: PPUSH
66390: CALL_OW 437
66394: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66395: LD_VAR 0 7
66399: NOT
66400: PUSH
66401: LD_VAR 0 1
66405: PPUSH
66406: LD_VAR 0 2
66410: PPUSH
66411: CALL_OW 308
66415: NOT
66416: AND
66417: IFFALSE 66421
// exit ;
66419: GO 66539
// if IsInArea ( unit , area ) then
66421: LD_VAR 0 1
66425: PPUSH
66426: LD_VAR 0 2
66430: PPUSH
66431: CALL_OW 308
66435: IFFALSE 66453
// begin ComMoveToArea ( unit , goAway ) ;
66437: LD_VAR 0 1
66441: PPUSH
66442: LD_VAR 0 3
66446: PPUSH
66447: CALL_OW 113
// exit ;
66451: GO 66539
// end ; if task [ 1 ] [ 1 ] <> M then
66453: LD_VAR 0 7
66457: PUSH
66458: LD_INT 1
66460: ARRAY
66461: PUSH
66462: LD_INT 1
66464: ARRAY
66465: PUSH
66466: LD_STRING M
66468: NONEQUAL
66469: IFFALSE 66473
// exit ;
66471: GO 66539
// x := task [ 1 ] [ 2 ] ;
66473: LD_ADDR_VAR 0 5
66477: PUSH
66478: LD_VAR 0 7
66482: PUSH
66483: LD_INT 1
66485: ARRAY
66486: PUSH
66487: LD_INT 2
66489: ARRAY
66490: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66491: LD_ADDR_VAR 0 6
66495: PUSH
66496: LD_VAR 0 7
66500: PUSH
66501: LD_INT 1
66503: ARRAY
66504: PUSH
66505: LD_INT 3
66507: ARRAY
66508: ST_TO_ADDR
// if InArea ( x , y , area ) then
66509: LD_VAR 0 5
66513: PPUSH
66514: LD_VAR 0 6
66518: PPUSH
66519: LD_VAR 0 2
66523: PPUSH
66524: CALL_OW 309
66528: IFFALSE 66539
// ComStop ( unit ) ;
66530: LD_VAR 0 1
66534: PPUSH
66535: CALL_OW 141
// end ;
66539: LD_VAR 0 4
66543: RET
// export function Abs ( value ) ; begin
66544: LD_INT 0
66546: PPUSH
// result := value ;
66547: LD_ADDR_VAR 0 2
66551: PUSH
66552: LD_VAR 0 1
66556: ST_TO_ADDR
// if value < 0 then
66557: LD_VAR 0 1
66561: PUSH
66562: LD_INT 0
66564: LESS
66565: IFFALSE 66582
// result := value * - 1 ;
66567: LD_ADDR_VAR 0 2
66571: PUSH
66572: LD_VAR 0 1
66576: PUSH
66577: LD_INT 1
66579: NEG
66580: MUL
66581: ST_TO_ADDR
// end ;
66582: LD_VAR 0 2
66586: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66587: LD_INT 0
66589: PPUSH
66590: PPUSH
66591: PPUSH
66592: PPUSH
66593: PPUSH
66594: PPUSH
66595: PPUSH
66596: PPUSH
// if not unit or not building then
66597: LD_VAR 0 1
66601: NOT
66602: PUSH
66603: LD_VAR 0 2
66607: NOT
66608: OR
66609: IFFALSE 66613
// exit ;
66611: GO 66839
// x := GetX ( building ) ;
66613: LD_ADDR_VAR 0 4
66617: PUSH
66618: LD_VAR 0 2
66622: PPUSH
66623: CALL_OW 250
66627: ST_TO_ADDR
// y := GetY ( building ) ;
66628: LD_ADDR_VAR 0 6
66632: PUSH
66633: LD_VAR 0 2
66637: PPUSH
66638: CALL_OW 251
66642: ST_TO_ADDR
// d := GetDir ( building ) ;
66643: LD_ADDR_VAR 0 8
66647: PUSH
66648: LD_VAR 0 2
66652: PPUSH
66653: CALL_OW 254
66657: ST_TO_ADDR
// r := 4 ;
66658: LD_ADDR_VAR 0 9
66662: PUSH
66663: LD_INT 4
66665: ST_TO_ADDR
// for i := 1 to 5 do
66666: LD_ADDR_VAR 0 10
66670: PUSH
66671: DOUBLE
66672: LD_INT 1
66674: DEC
66675: ST_TO_ADDR
66676: LD_INT 5
66678: PUSH
66679: FOR_TO
66680: IFFALSE 66837
// begin _x := ShiftX ( x , d , r + i ) ;
66682: LD_ADDR_VAR 0 5
66686: PUSH
66687: LD_VAR 0 4
66691: PPUSH
66692: LD_VAR 0 8
66696: PPUSH
66697: LD_VAR 0 9
66701: PUSH
66702: LD_VAR 0 10
66706: PLUS
66707: PPUSH
66708: CALL_OW 272
66712: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66713: LD_ADDR_VAR 0 7
66717: PUSH
66718: LD_VAR 0 6
66722: PPUSH
66723: LD_VAR 0 8
66727: PPUSH
66728: LD_VAR 0 9
66732: PUSH
66733: LD_VAR 0 10
66737: PLUS
66738: PPUSH
66739: CALL_OW 273
66743: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66744: LD_VAR 0 5
66748: PPUSH
66749: LD_VAR 0 7
66753: PPUSH
66754: CALL_OW 488
66758: PUSH
66759: LD_VAR 0 5
66763: PPUSH
66764: LD_VAR 0 7
66768: PPUSH
66769: CALL_OW 428
66773: PPUSH
66774: CALL_OW 247
66778: PUSH
66779: LD_INT 3
66781: PUSH
66782: LD_INT 2
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: IN
66789: NOT
66790: AND
66791: IFFALSE 66835
// begin ComMoveXY ( unit , _x , _y ) ;
66793: LD_VAR 0 1
66797: PPUSH
66798: LD_VAR 0 5
66802: PPUSH
66803: LD_VAR 0 7
66807: PPUSH
66808: CALL_OW 111
// result := [ _x , _y ] ;
66812: LD_ADDR_VAR 0 3
66816: PUSH
66817: LD_VAR 0 5
66821: PUSH
66822: LD_VAR 0 7
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: ST_TO_ADDR
// exit ;
66831: POP
66832: POP
66833: GO 66839
// end ; end ;
66835: GO 66679
66837: POP
66838: POP
// end ;
66839: LD_VAR 0 3
66843: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66844: LD_INT 0
66846: PPUSH
66847: PPUSH
66848: PPUSH
// result := 0 ;
66849: LD_ADDR_VAR 0 3
66853: PUSH
66854: LD_INT 0
66856: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66857: LD_VAR 0 1
66861: PUSH
66862: LD_INT 0
66864: LESS
66865: PUSH
66866: LD_VAR 0 1
66870: PUSH
66871: LD_INT 8
66873: GREATER
66874: OR
66875: PUSH
66876: LD_VAR 0 2
66880: PUSH
66881: LD_INT 0
66883: LESS
66884: OR
66885: PUSH
66886: LD_VAR 0 2
66890: PUSH
66891: LD_INT 8
66893: GREATER
66894: OR
66895: IFFALSE 66899
// exit ;
66897: GO 66974
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
66899: LD_ADDR_VAR 0 4
66903: PUSH
66904: LD_INT 22
66906: PUSH
66907: LD_VAR 0 2
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PPUSH
66916: CALL_OW 69
66920: PUSH
66921: FOR_IN
66922: IFFALSE 66972
// begin un := UnitShoot ( i ) ;
66924: LD_ADDR_VAR 0 5
66928: PUSH
66929: LD_VAR 0 4
66933: PPUSH
66934: CALL_OW 504
66938: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66939: LD_VAR 0 5
66943: PPUSH
66944: CALL_OW 255
66948: PUSH
66949: LD_VAR 0 1
66953: EQUAL
66954: IFFALSE 66970
// begin result := un ;
66956: LD_ADDR_VAR 0 3
66960: PUSH
66961: LD_VAR 0 5
66965: ST_TO_ADDR
// exit ;
66966: POP
66967: POP
66968: GO 66974
// end ; end ;
66970: GO 66921
66972: POP
66973: POP
// end ;
66974: LD_VAR 0 3
66978: RET
// export function GetCargoBay ( units ) ; begin
66979: LD_INT 0
66981: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66982: LD_ADDR_VAR 0 2
66986: PUSH
66987: LD_VAR 0 1
66991: PPUSH
66992: LD_INT 2
66994: PUSH
66995: LD_INT 34
66997: PUSH
66998: LD_INT 12
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 34
67007: PUSH
67008: LD_INT 51
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 34
67017: PUSH
67018: LD_INT 32
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: LD_INT 34
67027: PUSH
67028: LD_INT 89
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: PPUSH
67042: CALL_OW 72
67046: ST_TO_ADDR
// end ;
67047: LD_VAR 0 2
67051: RET
// export function Negate ( value ) ; begin
67052: LD_INT 0
67054: PPUSH
// result := not value ;
67055: LD_ADDR_VAR 0 2
67059: PUSH
67060: LD_VAR 0 1
67064: NOT
67065: ST_TO_ADDR
// end ;
67066: LD_VAR 0 2
67070: RET
// export function Inc ( value ) ; begin
67071: LD_INT 0
67073: PPUSH
// result := value + 1 ;
67074: LD_ADDR_VAR 0 2
67078: PUSH
67079: LD_VAR 0 1
67083: PUSH
67084: LD_INT 1
67086: PLUS
67087: ST_TO_ADDR
// end ;
67088: LD_VAR 0 2
67092: RET
// export function Dec ( value ) ; begin
67093: LD_INT 0
67095: PPUSH
// result := value - 1 ;
67096: LD_ADDR_VAR 0 2
67100: PUSH
67101: LD_VAR 0 1
67105: PUSH
67106: LD_INT 1
67108: MINUS
67109: ST_TO_ADDR
// end ;
67110: LD_VAR 0 2
67114: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67115: LD_INT 0
67117: PPUSH
67118: PPUSH
67119: PPUSH
67120: PPUSH
67121: PPUSH
67122: PPUSH
67123: PPUSH
67124: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67125: LD_VAR 0 1
67129: PPUSH
67130: LD_VAR 0 2
67134: PPUSH
67135: CALL_OW 488
67139: NOT
67140: PUSH
67141: LD_VAR 0 3
67145: PPUSH
67146: LD_VAR 0 4
67150: PPUSH
67151: CALL_OW 488
67155: NOT
67156: OR
67157: IFFALSE 67170
// begin result := - 1 ;
67159: LD_ADDR_VAR 0 5
67163: PUSH
67164: LD_INT 1
67166: NEG
67167: ST_TO_ADDR
// exit ;
67168: GO 67405
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67170: LD_ADDR_VAR 0 12
67174: PUSH
67175: LD_VAR 0 1
67179: PPUSH
67180: LD_VAR 0 2
67184: PPUSH
67185: LD_VAR 0 3
67189: PPUSH
67190: LD_VAR 0 4
67194: PPUSH
67195: CALL 66255 0 4
67199: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67200: LD_ADDR_VAR 0 11
67204: PUSH
67205: LD_VAR 0 1
67209: PPUSH
67210: LD_VAR 0 2
67214: PPUSH
67215: LD_VAR 0 12
67219: PUSH
67220: LD_INT 1
67222: ARRAY
67223: PPUSH
67224: LD_VAR 0 12
67228: PUSH
67229: LD_INT 2
67231: ARRAY
67232: PPUSH
67233: CALL_OW 298
67237: ST_TO_ADDR
// distance := 9999 ;
67238: LD_ADDR_VAR 0 10
67242: PUSH
67243: LD_INT 9999
67245: ST_TO_ADDR
// for i := 0 to 5 do
67246: LD_ADDR_VAR 0 6
67250: PUSH
67251: DOUBLE
67252: LD_INT 0
67254: DEC
67255: ST_TO_ADDR
67256: LD_INT 5
67258: PUSH
67259: FOR_TO
67260: IFFALSE 67403
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67262: LD_ADDR_VAR 0 7
67266: PUSH
67267: LD_VAR 0 1
67271: PPUSH
67272: LD_VAR 0 6
67276: PPUSH
67277: LD_VAR 0 11
67281: PPUSH
67282: CALL_OW 272
67286: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67287: LD_ADDR_VAR 0 8
67291: PUSH
67292: LD_VAR 0 2
67296: PPUSH
67297: LD_VAR 0 6
67301: PPUSH
67302: LD_VAR 0 11
67306: PPUSH
67307: CALL_OW 273
67311: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67312: LD_VAR 0 7
67316: PPUSH
67317: LD_VAR 0 8
67321: PPUSH
67322: CALL_OW 488
67326: NOT
67327: IFFALSE 67331
// continue ;
67329: GO 67259
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67331: LD_ADDR_VAR 0 9
67335: PUSH
67336: LD_VAR 0 12
67340: PUSH
67341: LD_INT 1
67343: ARRAY
67344: PPUSH
67345: LD_VAR 0 12
67349: PUSH
67350: LD_INT 2
67352: ARRAY
67353: PPUSH
67354: LD_VAR 0 7
67358: PPUSH
67359: LD_VAR 0 8
67363: PPUSH
67364: CALL_OW 298
67368: ST_TO_ADDR
// if tmp < distance then
67369: LD_VAR 0 9
67373: PUSH
67374: LD_VAR 0 10
67378: LESS
67379: IFFALSE 67401
// begin result := i ;
67381: LD_ADDR_VAR 0 5
67385: PUSH
67386: LD_VAR 0 6
67390: ST_TO_ADDR
// distance := tmp ;
67391: LD_ADDR_VAR 0 10
67395: PUSH
67396: LD_VAR 0 9
67400: ST_TO_ADDR
// end ; end ;
67401: GO 67259
67403: POP
67404: POP
// end ;
67405: LD_VAR 0 5
67409: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67410: LD_INT 0
67412: PPUSH
67413: PPUSH
// if not driver or not IsInUnit ( driver ) then
67414: LD_VAR 0 1
67418: NOT
67419: PUSH
67420: LD_VAR 0 1
67424: PPUSH
67425: CALL_OW 310
67429: NOT
67430: OR
67431: IFFALSE 67435
// exit ;
67433: GO 67525
// vehicle := IsInUnit ( driver ) ;
67435: LD_ADDR_VAR 0 3
67439: PUSH
67440: LD_VAR 0 1
67444: PPUSH
67445: CALL_OW 310
67449: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67450: LD_VAR 0 1
67454: PPUSH
67455: LD_STRING \
67457: PUSH
67458: LD_INT 0
67460: PUSH
67461: LD_INT 0
67463: PUSH
67464: LD_INT 0
67466: PUSH
67467: LD_INT 0
67469: PUSH
67470: LD_INT 0
67472: PUSH
67473: LD_INT 0
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: PUSH
67485: LD_STRING E
67487: PUSH
67488: LD_INT 0
67490: PUSH
67491: LD_INT 0
67493: PUSH
67494: LD_VAR 0 3
67498: PUSH
67499: LD_INT 0
67501: PUSH
67502: LD_INT 0
67504: PUSH
67505: LD_INT 0
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PPUSH
67521: CALL_OW 446
// end ;
67525: LD_VAR 0 2
67529: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67530: LD_INT 0
67532: PPUSH
67533: PPUSH
// if not driver or not IsInUnit ( driver ) then
67534: LD_VAR 0 1
67538: NOT
67539: PUSH
67540: LD_VAR 0 1
67544: PPUSH
67545: CALL_OW 310
67549: NOT
67550: OR
67551: IFFALSE 67555
// exit ;
67553: GO 67645
// vehicle := IsInUnit ( driver ) ;
67555: LD_ADDR_VAR 0 3
67559: PUSH
67560: LD_VAR 0 1
67564: PPUSH
67565: CALL_OW 310
67569: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67570: LD_VAR 0 1
67574: PPUSH
67575: LD_STRING \
67577: PUSH
67578: LD_INT 0
67580: PUSH
67581: LD_INT 0
67583: PUSH
67584: LD_INT 0
67586: PUSH
67587: LD_INT 0
67589: PUSH
67590: LD_INT 0
67592: PUSH
67593: LD_INT 0
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: LIST
67600: LIST
67601: LIST
67602: LIST
67603: LIST
67604: PUSH
67605: LD_STRING E
67607: PUSH
67608: LD_INT 0
67610: PUSH
67611: LD_INT 0
67613: PUSH
67614: LD_VAR 0 3
67618: PUSH
67619: LD_INT 0
67621: PUSH
67622: LD_INT 0
67624: PUSH
67625: LD_INT 0
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PPUSH
67641: CALL_OW 447
// end ;
67645: LD_VAR 0 2
67649: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67650: LD_INT 0
67652: PPUSH
67653: PPUSH
67654: PPUSH
// tmp := [ ] ;
67655: LD_ADDR_VAR 0 5
67659: PUSH
67660: EMPTY
67661: ST_TO_ADDR
// for i in units do
67662: LD_ADDR_VAR 0 4
67666: PUSH
67667: LD_VAR 0 1
67671: PUSH
67672: FOR_IN
67673: IFFALSE 67711
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67675: LD_ADDR_VAR 0 5
67679: PUSH
67680: LD_VAR 0 5
67684: PPUSH
67685: LD_VAR 0 5
67689: PUSH
67690: LD_INT 1
67692: PLUS
67693: PPUSH
67694: LD_VAR 0 4
67698: PPUSH
67699: CALL_OW 256
67703: PPUSH
67704: CALL_OW 2
67708: ST_TO_ADDR
67709: GO 67672
67711: POP
67712: POP
// if not tmp then
67713: LD_VAR 0 5
67717: NOT
67718: IFFALSE 67722
// exit ;
67720: GO 67770
// if asc then
67722: LD_VAR 0 2
67726: IFFALSE 67750
// result := SortListByListAsc ( units , tmp ) else
67728: LD_ADDR_VAR 0 3
67732: PUSH
67733: LD_VAR 0 1
67737: PPUSH
67738: LD_VAR 0 5
67742: PPUSH
67743: CALL_OW 76
67747: ST_TO_ADDR
67748: GO 67770
// result := SortListByListDesc ( units , tmp ) ;
67750: LD_ADDR_VAR 0 3
67754: PUSH
67755: LD_VAR 0 1
67759: PPUSH
67760: LD_VAR 0 5
67764: PPUSH
67765: CALL_OW 77
67769: ST_TO_ADDR
// end ;
67770: LD_VAR 0 3
67774: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67775: LD_INT 0
67777: PPUSH
67778: PPUSH
// task := GetTaskList ( mech ) ;
67779: LD_ADDR_VAR 0 4
67783: PUSH
67784: LD_VAR 0 1
67788: PPUSH
67789: CALL_OW 437
67793: ST_TO_ADDR
// if not task then
67794: LD_VAR 0 4
67798: NOT
67799: IFFALSE 67803
// exit ;
67801: GO 67845
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67803: LD_ADDR_VAR 0 3
67807: PUSH
67808: LD_VAR 0 4
67812: PUSH
67813: LD_INT 1
67815: ARRAY
67816: PUSH
67817: LD_INT 1
67819: ARRAY
67820: PUSH
67821: LD_STRING r
67823: EQUAL
67824: PUSH
67825: LD_VAR 0 4
67829: PUSH
67830: LD_INT 1
67832: ARRAY
67833: PUSH
67834: LD_INT 4
67836: ARRAY
67837: PUSH
67838: LD_VAR 0 2
67842: EQUAL
67843: AND
67844: ST_TO_ADDR
// end ;
67845: LD_VAR 0 3
67849: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67850: LD_INT 0
67852: PPUSH
// SetDir ( unit , d ) ;
67853: LD_VAR 0 1
67857: PPUSH
67858: LD_VAR 0 4
67862: PPUSH
67863: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67867: LD_VAR 0 1
67871: PPUSH
67872: LD_VAR 0 2
67876: PPUSH
67877: LD_VAR 0 3
67881: PPUSH
67882: LD_VAR 0 5
67886: PPUSH
67887: CALL_OW 48
// end ;
67891: LD_VAR 0 6
67895: RET
// export function ToNaturalNumber ( number ) ; begin
67896: LD_INT 0
67898: PPUSH
// result := number div 1 ;
67899: LD_ADDR_VAR 0 2
67903: PUSH
67904: LD_VAR 0 1
67908: PUSH
67909: LD_INT 1
67911: DIV
67912: ST_TO_ADDR
// if number < 0 then
67913: LD_VAR 0 1
67917: PUSH
67918: LD_INT 0
67920: LESS
67921: IFFALSE 67931
// result := 0 ;
67923: LD_ADDR_VAR 0 2
67927: PUSH
67928: LD_INT 0
67930: ST_TO_ADDR
// end ;
67931: LD_VAR 0 2
67935: RET
// export function SortByClass ( units , class ) ; var un ; begin
67936: LD_INT 0
67938: PPUSH
67939: PPUSH
// if not units or not class then
67940: LD_VAR 0 1
67944: NOT
67945: PUSH
67946: LD_VAR 0 2
67950: NOT
67951: OR
67952: IFFALSE 67956
// exit ;
67954: GO 68051
// result := [ ] ;
67956: LD_ADDR_VAR 0 3
67960: PUSH
67961: EMPTY
67962: ST_TO_ADDR
// for un in units do
67963: LD_ADDR_VAR 0 4
67967: PUSH
67968: LD_VAR 0 1
67972: PUSH
67973: FOR_IN
67974: IFFALSE 68049
// if GetClass ( un ) = class then
67976: LD_VAR 0 4
67980: PPUSH
67981: CALL_OW 257
67985: PUSH
67986: LD_VAR 0 2
67990: EQUAL
67991: IFFALSE 68018
// result := Insert ( result , 1 , un ) else
67993: LD_ADDR_VAR 0 3
67997: PUSH
67998: LD_VAR 0 3
68002: PPUSH
68003: LD_INT 1
68005: PPUSH
68006: LD_VAR 0 4
68010: PPUSH
68011: CALL_OW 2
68015: ST_TO_ADDR
68016: GO 68047
// result := Replace ( result , result + 1 , un ) ;
68018: LD_ADDR_VAR 0 3
68022: PUSH
68023: LD_VAR 0 3
68027: PPUSH
68028: LD_VAR 0 3
68032: PUSH
68033: LD_INT 1
68035: PLUS
68036: PPUSH
68037: LD_VAR 0 4
68041: PPUSH
68042: CALL_OW 1
68046: ST_TO_ADDR
68047: GO 67973
68049: POP
68050: POP
// end ;
68051: LD_VAR 0 3
68055: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68056: LD_INT 0
68058: PPUSH
68059: PPUSH
68060: PPUSH
68061: PPUSH
68062: PPUSH
68063: PPUSH
68064: PPUSH
// result := [ ] ;
68065: LD_ADDR_VAR 0 4
68069: PUSH
68070: EMPTY
68071: ST_TO_ADDR
// if x - r < 0 then
68072: LD_VAR 0 1
68076: PUSH
68077: LD_VAR 0 3
68081: MINUS
68082: PUSH
68083: LD_INT 0
68085: LESS
68086: IFFALSE 68098
// min_x := 0 else
68088: LD_ADDR_VAR 0 8
68092: PUSH
68093: LD_INT 0
68095: ST_TO_ADDR
68096: GO 68114
// min_x := x - r ;
68098: LD_ADDR_VAR 0 8
68102: PUSH
68103: LD_VAR 0 1
68107: PUSH
68108: LD_VAR 0 3
68112: MINUS
68113: ST_TO_ADDR
// if y - r < 0 then
68114: LD_VAR 0 2
68118: PUSH
68119: LD_VAR 0 3
68123: MINUS
68124: PUSH
68125: LD_INT 0
68127: LESS
68128: IFFALSE 68140
// min_y := 0 else
68130: LD_ADDR_VAR 0 7
68134: PUSH
68135: LD_INT 0
68137: ST_TO_ADDR
68138: GO 68156
// min_y := y - r ;
68140: LD_ADDR_VAR 0 7
68144: PUSH
68145: LD_VAR 0 2
68149: PUSH
68150: LD_VAR 0 3
68154: MINUS
68155: ST_TO_ADDR
// max_x := x + r ;
68156: LD_ADDR_VAR 0 9
68160: PUSH
68161: LD_VAR 0 1
68165: PUSH
68166: LD_VAR 0 3
68170: PLUS
68171: ST_TO_ADDR
// max_y := y + r ;
68172: LD_ADDR_VAR 0 10
68176: PUSH
68177: LD_VAR 0 2
68181: PUSH
68182: LD_VAR 0 3
68186: PLUS
68187: ST_TO_ADDR
// for _x = min_x to max_x do
68188: LD_ADDR_VAR 0 5
68192: PUSH
68193: DOUBLE
68194: LD_VAR 0 8
68198: DEC
68199: ST_TO_ADDR
68200: LD_VAR 0 9
68204: PUSH
68205: FOR_TO
68206: IFFALSE 68307
// for _y = min_y to max_y do
68208: LD_ADDR_VAR 0 6
68212: PUSH
68213: DOUBLE
68214: LD_VAR 0 7
68218: DEC
68219: ST_TO_ADDR
68220: LD_VAR 0 10
68224: PUSH
68225: FOR_TO
68226: IFFALSE 68303
// begin if not ValidHex ( _x , _y ) then
68228: LD_VAR 0 5
68232: PPUSH
68233: LD_VAR 0 6
68237: PPUSH
68238: CALL_OW 488
68242: NOT
68243: IFFALSE 68247
// continue ;
68245: GO 68225
// if GetResourceTypeXY ( _x , _y ) then
68247: LD_VAR 0 5
68251: PPUSH
68252: LD_VAR 0 6
68256: PPUSH
68257: CALL_OW 283
68261: IFFALSE 68301
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68263: LD_ADDR_VAR 0 4
68267: PUSH
68268: LD_VAR 0 4
68272: PPUSH
68273: LD_VAR 0 4
68277: PUSH
68278: LD_INT 1
68280: PLUS
68281: PPUSH
68282: LD_VAR 0 5
68286: PUSH
68287: LD_VAR 0 6
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PPUSH
68296: CALL_OW 1
68300: ST_TO_ADDR
// end ;
68301: GO 68225
68303: POP
68304: POP
68305: GO 68205
68307: POP
68308: POP
// end ;
68309: LD_VAR 0 4
68313: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68314: LD_INT 0
68316: PPUSH
68317: PPUSH
68318: PPUSH
68319: PPUSH
68320: PPUSH
68321: PPUSH
68322: PPUSH
68323: PPUSH
// if not units then
68324: LD_VAR 0 1
68328: NOT
68329: IFFALSE 68333
// exit ;
68331: GO 68857
// result := UnitFilter ( units , [ f_ok ] ) ;
68333: LD_ADDR_VAR 0 3
68337: PUSH
68338: LD_VAR 0 1
68342: PPUSH
68343: LD_INT 50
68345: PUSH
68346: EMPTY
68347: LIST
68348: PPUSH
68349: CALL_OW 72
68353: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68354: LD_ADDR_VAR 0 8
68358: PUSH
68359: LD_VAR 0 1
68363: PUSH
68364: LD_INT 1
68366: ARRAY
68367: PPUSH
68368: CALL_OW 255
68372: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68373: LD_ADDR_VAR 0 10
68377: PUSH
68378: LD_INT 29
68380: PUSH
68381: LD_INT 91
68383: PUSH
68384: LD_INT 49
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: LIST
68391: ST_TO_ADDR
// if not result then
68392: LD_VAR 0 3
68396: NOT
68397: IFFALSE 68401
// exit ;
68399: GO 68857
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68401: LD_ADDR_VAR 0 5
68405: PUSH
68406: LD_INT 81
68408: PUSH
68409: LD_VAR 0 8
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PPUSH
68418: CALL_OW 69
68422: ST_TO_ADDR
// for i in result do
68423: LD_ADDR_VAR 0 4
68427: PUSH
68428: LD_VAR 0 3
68432: PUSH
68433: FOR_IN
68434: IFFALSE 68855
// begin tag := GetTag ( i ) + 1 ;
68436: LD_ADDR_VAR 0 9
68440: PUSH
68441: LD_VAR 0 4
68445: PPUSH
68446: CALL_OW 110
68450: PUSH
68451: LD_INT 1
68453: PLUS
68454: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68455: LD_ADDR_VAR 0 7
68459: PUSH
68460: LD_VAR 0 4
68464: PPUSH
68465: CALL_OW 250
68469: PPUSH
68470: LD_VAR 0 4
68474: PPUSH
68475: CALL_OW 251
68479: PPUSH
68480: LD_INT 6
68482: PPUSH
68483: CALL 68056 0 3
68487: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68488: LD_VAR 0 4
68492: PPUSH
68493: CALL_OW 247
68497: PUSH
68498: LD_INT 2
68500: EQUAL
68501: PUSH
68502: LD_VAR 0 7
68506: AND
68507: PUSH
68508: LD_VAR 0 4
68512: PPUSH
68513: CALL_OW 264
68517: PUSH
68518: LD_VAR 0 10
68522: IN
68523: NOT
68524: AND
68525: IFFALSE 68564
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68527: LD_VAR 0 4
68531: PPUSH
68532: LD_VAR 0 7
68536: PUSH
68537: LD_INT 1
68539: ARRAY
68540: PUSH
68541: LD_INT 1
68543: ARRAY
68544: PPUSH
68545: LD_VAR 0 7
68549: PUSH
68550: LD_INT 1
68552: ARRAY
68553: PUSH
68554: LD_INT 2
68556: ARRAY
68557: PPUSH
68558: CALL_OW 116
68562: GO 68853
// if path > tag then
68564: LD_VAR 0 2
68568: PUSH
68569: LD_VAR 0 9
68573: GREATER
68574: IFFALSE 68782
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68576: LD_ADDR_VAR 0 6
68580: PUSH
68581: LD_VAR 0 5
68585: PPUSH
68586: LD_INT 91
68588: PUSH
68589: LD_VAR 0 4
68593: PUSH
68594: LD_INT 8
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: LIST
68601: PPUSH
68602: CALL_OW 72
68606: ST_TO_ADDR
// if nearEnemy then
68607: LD_VAR 0 6
68611: IFFALSE 68680
// begin if GetWeapon ( i ) = ru_time_lapser then
68613: LD_VAR 0 4
68617: PPUSH
68618: CALL_OW 264
68622: PUSH
68623: LD_INT 49
68625: EQUAL
68626: IFFALSE 68654
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68628: LD_VAR 0 4
68632: PPUSH
68633: LD_VAR 0 6
68637: PPUSH
68638: LD_VAR 0 4
68642: PPUSH
68643: CALL_OW 74
68647: PPUSH
68648: CALL_OW 112
68652: GO 68678
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68654: LD_VAR 0 4
68658: PPUSH
68659: LD_VAR 0 6
68663: PPUSH
68664: LD_VAR 0 4
68668: PPUSH
68669: CALL_OW 74
68673: PPUSH
68674: CALL_OW 115
// end else
68678: GO 68780
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68680: LD_VAR 0 4
68684: PPUSH
68685: LD_VAR 0 2
68689: PUSH
68690: LD_VAR 0 9
68694: ARRAY
68695: PUSH
68696: LD_INT 1
68698: ARRAY
68699: PPUSH
68700: LD_VAR 0 2
68704: PUSH
68705: LD_VAR 0 9
68709: ARRAY
68710: PUSH
68711: LD_INT 2
68713: ARRAY
68714: PPUSH
68715: CALL_OW 297
68719: PUSH
68720: LD_INT 6
68722: GREATER
68723: IFFALSE 68766
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68725: LD_VAR 0 4
68729: PPUSH
68730: LD_VAR 0 2
68734: PUSH
68735: LD_VAR 0 9
68739: ARRAY
68740: PUSH
68741: LD_INT 1
68743: ARRAY
68744: PPUSH
68745: LD_VAR 0 2
68749: PUSH
68750: LD_VAR 0 9
68754: ARRAY
68755: PUSH
68756: LD_INT 2
68758: ARRAY
68759: PPUSH
68760: CALL_OW 114
68764: GO 68780
// SetTag ( i , tag ) ;
68766: LD_VAR 0 4
68770: PPUSH
68771: LD_VAR 0 9
68775: PPUSH
68776: CALL_OW 109
// end else
68780: GO 68853
// if enemy then
68782: LD_VAR 0 5
68786: IFFALSE 68853
// begin if GetWeapon ( i ) = ru_time_lapser then
68788: LD_VAR 0 4
68792: PPUSH
68793: CALL_OW 264
68797: PUSH
68798: LD_INT 49
68800: EQUAL
68801: IFFALSE 68829
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68803: LD_VAR 0 4
68807: PPUSH
68808: LD_VAR 0 5
68812: PPUSH
68813: LD_VAR 0 4
68817: PPUSH
68818: CALL_OW 74
68822: PPUSH
68823: CALL_OW 112
68827: GO 68853
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68829: LD_VAR 0 4
68833: PPUSH
68834: LD_VAR 0 5
68838: PPUSH
68839: LD_VAR 0 4
68843: PPUSH
68844: CALL_OW 74
68848: PPUSH
68849: CALL_OW 115
// end ; end ;
68853: GO 68433
68855: POP
68856: POP
// end ;
68857: LD_VAR 0 3
68861: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68862: LD_INT 0
68864: PPUSH
68865: PPUSH
68866: PPUSH
// if not unit or IsInUnit ( unit ) then
68867: LD_VAR 0 1
68871: NOT
68872: PUSH
68873: LD_VAR 0 1
68877: PPUSH
68878: CALL_OW 310
68882: OR
68883: IFFALSE 68887
// exit ;
68885: GO 68978
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68887: LD_ADDR_VAR 0 4
68891: PUSH
68892: LD_VAR 0 1
68896: PPUSH
68897: CALL_OW 250
68901: PPUSH
68902: LD_VAR 0 2
68906: PPUSH
68907: LD_INT 1
68909: PPUSH
68910: CALL_OW 272
68914: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68915: LD_ADDR_VAR 0 5
68919: PUSH
68920: LD_VAR 0 1
68924: PPUSH
68925: CALL_OW 251
68929: PPUSH
68930: LD_VAR 0 2
68934: PPUSH
68935: LD_INT 1
68937: PPUSH
68938: CALL_OW 273
68942: ST_TO_ADDR
// if ValidHex ( x , y ) then
68943: LD_VAR 0 4
68947: PPUSH
68948: LD_VAR 0 5
68952: PPUSH
68953: CALL_OW 488
68957: IFFALSE 68978
// ComTurnXY ( unit , x , y ) ;
68959: LD_VAR 0 1
68963: PPUSH
68964: LD_VAR 0 4
68968: PPUSH
68969: LD_VAR 0 5
68973: PPUSH
68974: CALL_OW 118
// end ;
68978: LD_VAR 0 3
68982: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68983: LD_INT 0
68985: PPUSH
68986: PPUSH
// result := false ;
68987: LD_ADDR_VAR 0 3
68991: PUSH
68992: LD_INT 0
68994: ST_TO_ADDR
// if not units then
68995: LD_VAR 0 2
68999: NOT
69000: IFFALSE 69004
// exit ;
69002: GO 69049
// for i in units do
69004: LD_ADDR_VAR 0 4
69008: PUSH
69009: LD_VAR 0 2
69013: PUSH
69014: FOR_IN
69015: IFFALSE 69047
// if See ( side , i ) then
69017: LD_VAR 0 1
69021: PPUSH
69022: LD_VAR 0 4
69026: PPUSH
69027: CALL_OW 292
69031: IFFALSE 69045
// begin result := true ;
69033: LD_ADDR_VAR 0 3
69037: PUSH
69038: LD_INT 1
69040: ST_TO_ADDR
// exit ;
69041: POP
69042: POP
69043: GO 69049
// end ;
69045: GO 69014
69047: POP
69048: POP
// end ;
69049: LD_VAR 0 3
69053: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69054: LD_INT 0
69056: PPUSH
69057: PPUSH
69058: PPUSH
69059: PPUSH
// if not unit or not points then
69060: LD_VAR 0 1
69064: NOT
69065: PUSH
69066: LD_VAR 0 2
69070: NOT
69071: OR
69072: IFFALSE 69076
// exit ;
69074: GO 69166
// dist := 99999 ;
69076: LD_ADDR_VAR 0 5
69080: PUSH
69081: LD_INT 99999
69083: ST_TO_ADDR
// for i in points do
69084: LD_ADDR_VAR 0 4
69088: PUSH
69089: LD_VAR 0 2
69093: PUSH
69094: FOR_IN
69095: IFFALSE 69164
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69097: LD_ADDR_VAR 0 6
69101: PUSH
69102: LD_VAR 0 1
69106: PPUSH
69107: LD_VAR 0 4
69111: PUSH
69112: LD_INT 1
69114: ARRAY
69115: PPUSH
69116: LD_VAR 0 4
69120: PUSH
69121: LD_INT 2
69123: ARRAY
69124: PPUSH
69125: CALL_OW 297
69129: ST_TO_ADDR
// if tmpDist < dist then
69130: LD_VAR 0 6
69134: PUSH
69135: LD_VAR 0 5
69139: LESS
69140: IFFALSE 69162
// begin result := i ;
69142: LD_ADDR_VAR 0 3
69146: PUSH
69147: LD_VAR 0 4
69151: ST_TO_ADDR
// dist := tmpDist ;
69152: LD_ADDR_VAR 0 5
69156: PUSH
69157: LD_VAR 0 6
69161: ST_TO_ADDR
// end ; end ;
69162: GO 69094
69164: POP
69165: POP
// end ;
69166: LD_VAR 0 3
69170: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69171: LD_INT 0
69173: PPUSH
// uc_side := side ;
69174: LD_ADDR_OWVAR 20
69178: PUSH
69179: LD_VAR 0 1
69183: ST_TO_ADDR
// uc_nation := 3 ;
69184: LD_ADDR_OWVAR 21
69188: PUSH
69189: LD_INT 3
69191: ST_TO_ADDR
// vc_chassis := 25 ;
69192: LD_ADDR_OWVAR 37
69196: PUSH
69197: LD_INT 25
69199: ST_TO_ADDR
// vc_engine := engine_siberite ;
69200: LD_ADDR_OWVAR 39
69204: PUSH
69205: LD_INT 3
69207: ST_TO_ADDR
// vc_control := control_computer ;
69208: LD_ADDR_OWVAR 38
69212: PUSH
69213: LD_INT 3
69215: ST_TO_ADDR
// vc_weapon := 59 ;
69216: LD_ADDR_OWVAR 40
69220: PUSH
69221: LD_INT 59
69223: ST_TO_ADDR
// result := CreateVehicle ;
69224: LD_ADDR_VAR 0 5
69228: PUSH
69229: CALL_OW 45
69233: ST_TO_ADDR
// SetDir ( result , d ) ;
69234: LD_VAR 0 5
69238: PPUSH
69239: LD_VAR 0 4
69243: PPUSH
69244: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69248: LD_VAR 0 5
69252: PPUSH
69253: LD_VAR 0 2
69257: PPUSH
69258: LD_VAR 0 3
69262: PPUSH
69263: LD_INT 0
69265: PPUSH
69266: CALL_OW 48
// end ;
69270: LD_VAR 0 5
69274: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69275: LD_INT 0
69277: PPUSH
69278: PPUSH
69279: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69280: LD_ADDR_VAR 0 2
69284: PUSH
69285: LD_INT 0
69287: PUSH
69288: LD_INT 0
69290: PUSH
69291: LD_INT 0
69293: PUSH
69294: LD_INT 0
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69303: LD_VAR 0 1
69307: NOT
69308: PUSH
69309: LD_VAR 0 1
69313: PPUSH
69314: CALL_OW 264
69318: PUSH
69319: LD_INT 12
69321: PUSH
69322: LD_INT 51
69324: PUSH
69325: LD_INT 32
69327: PUSH
69328: LD_INT 89
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: IN
69337: NOT
69338: OR
69339: IFFALSE 69343
// exit ;
69341: GO 69441
// for i := 1 to 3 do
69343: LD_ADDR_VAR 0 3
69347: PUSH
69348: DOUBLE
69349: LD_INT 1
69351: DEC
69352: ST_TO_ADDR
69353: LD_INT 3
69355: PUSH
69356: FOR_TO
69357: IFFALSE 69439
// begin tmp := GetCargo ( cargo , i ) ;
69359: LD_ADDR_VAR 0 4
69363: PUSH
69364: LD_VAR 0 1
69368: PPUSH
69369: LD_VAR 0 3
69373: PPUSH
69374: CALL_OW 289
69378: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69379: LD_ADDR_VAR 0 2
69383: PUSH
69384: LD_VAR 0 2
69388: PPUSH
69389: LD_VAR 0 3
69393: PPUSH
69394: LD_VAR 0 4
69398: PPUSH
69399: CALL_OW 1
69403: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69404: LD_ADDR_VAR 0 2
69408: PUSH
69409: LD_VAR 0 2
69413: PPUSH
69414: LD_INT 4
69416: PPUSH
69417: LD_VAR 0 2
69421: PUSH
69422: LD_INT 4
69424: ARRAY
69425: PUSH
69426: LD_VAR 0 4
69430: PLUS
69431: PPUSH
69432: CALL_OW 1
69436: ST_TO_ADDR
// end ;
69437: GO 69356
69439: POP
69440: POP
// end ;
69441: LD_VAR 0 2
69445: RET
// export function Length ( array ) ; begin
69446: LD_INT 0
69448: PPUSH
// result := array + 0 ;
69449: LD_ADDR_VAR 0 2
69453: PUSH
69454: LD_VAR 0 1
69458: PUSH
69459: LD_INT 0
69461: PLUS
69462: ST_TO_ADDR
// end ;
69463: LD_VAR 0 2
69467: RET
// export function PrepareArray ( array ) ; begin
69468: LD_INT 0
69470: PPUSH
// result := array diff 0 ;
69471: LD_ADDR_VAR 0 2
69475: PUSH
69476: LD_VAR 0 1
69480: PUSH
69481: LD_INT 0
69483: DIFF
69484: ST_TO_ADDR
// if not result [ 1 ] then
69485: LD_VAR 0 2
69489: PUSH
69490: LD_INT 1
69492: ARRAY
69493: NOT
69494: IFFALSE 69514
// result := Delete ( result , 1 ) ;
69496: LD_ADDR_VAR 0 2
69500: PUSH
69501: LD_VAR 0 2
69505: PPUSH
69506: LD_INT 1
69508: PPUSH
69509: CALL_OW 3
69513: ST_TO_ADDR
// end ;
69514: LD_VAR 0 2
69518: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69519: LD_INT 0
69521: PPUSH
69522: PPUSH
69523: PPUSH
69524: PPUSH
// sibRocketRange := 25 ;
69525: LD_ADDR_VAR 0 6
69529: PUSH
69530: LD_INT 25
69532: ST_TO_ADDR
// result := false ;
69533: LD_ADDR_VAR 0 4
69537: PUSH
69538: LD_INT 0
69540: ST_TO_ADDR
// for i := 0 to 5 do
69541: LD_ADDR_VAR 0 5
69545: PUSH
69546: DOUBLE
69547: LD_INT 0
69549: DEC
69550: ST_TO_ADDR
69551: LD_INT 5
69553: PUSH
69554: FOR_TO
69555: IFFALSE 69622
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69557: LD_VAR 0 1
69561: PPUSH
69562: LD_VAR 0 5
69566: PPUSH
69567: LD_VAR 0 6
69571: PPUSH
69572: CALL_OW 272
69576: PPUSH
69577: LD_VAR 0 2
69581: PPUSH
69582: LD_VAR 0 5
69586: PPUSH
69587: LD_VAR 0 6
69591: PPUSH
69592: CALL_OW 273
69596: PPUSH
69597: LD_VAR 0 3
69601: PPUSH
69602: CALL_OW 309
69606: IFFALSE 69620
// begin result := true ;
69608: LD_ADDR_VAR 0 4
69612: PUSH
69613: LD_INT 1
69615: ST_TO_ADDR
// exit ;
69616: POP
69617: POP
69618: GO 69624
// end ;
69620: GO 69554
69622: POP
69623: POP
// end ;
69624: LD_VAR 0 4
69628: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69629: LD_INT 0
69631: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69632: LD_VAR 0 1
69636: PPUSH
69637: LD_VAR 0 2
69641: PPUSH
69642: LD_INT 0
69644: PPUSH
69645: LD_INT 0
69647: PPUSH
69648: LD_INT 1
69650: PPUSH
69651: LD_INT 0
69653: PPUSH
69654: CALL_OW 587
// end ; end_of_file
69658: LD_VAR 0 3
69662: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69663: LD_VAR 0 1
69667: PUSH
69668: LD_INT 200
69670: DOUBLE
69671: GREATEREQUAL
69672: IFFALSE 69680
69674: LD_INT 299
69676: DOUBLE
69677: LESSEQUAL
69678: IFTRUE 69682
69680: GO 69714
69682: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69683: LD_VAR 0 1
69687: PPUSH
69688: LD_VAR 0 2
69692: PPUSH
69693: LD_VAR 0 3
69697: PPUSH
69698: LD_VAR 0 4
69702: PPUSH
69703: LD_VAR 0 5
69707: PPUSH
69708: CALL 24348 0 5
69712: GO 69791
69714: LD_INT 300
69716: DOUBLE
69717: GREATEREQUAL
69718: IFFALSE 69726
69720: LD_INT 399
69722: DOUBLE
69723: LESSEQUAL
69724: IFTRUE 69728
69726: GO 69790
69728: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69729: LD_VAR 0 1
69733: PPUSH
69734: LD_VAR 0 2
69738: PPUSH
69739: LD_VAR 0 3
69743: PPUSH
69744: LD_VAR 0 4
69748: PPUSH
69749: LD_VAR 0 5
69753: PPUSH
69754: LD_VAR 0 6
69758: PPUSH
69759: LD_VAR 0 7
69763: PPUSH
69764: LD_VAR 0 8
69768: PPUSH
69769: LD_VAR 0 9
69773: PPUSH
69774: LD_VAR 0 10
69778: PPUSH
69779: LD_VAR 0 11
69783: PPUSH
69784: CALL 20681 0 11
69788: GO 69791
69790: POP
// end ;
69791: PPOPN 11
69793: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69794: LD_VAR 0 1
69798: PPUSH
69799: LD_VAR 0 2
69803: PPUSH
69804: LD_VAR 0 3
69808: PPUSH
69809: LD_VAR 0 4
69813: PPUSH
69814: LD_VAR 0 5
69818: PPUSH
69819: CALL 24084 0 5
// end ; end_of_file
69823: PPOPN 5
69825: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69826: LD_VAR 0 1
69830: PPUSH
69831: LD_VAR 0 2
69835: PPUSH
69836: LD_VAR 0 3
69840: PPUSH
69841: LD_VAR 0 4
69845: PPUSH
69846: LD_VAR 0 5
69850: PPUSH
69851: LD_VAR 0 6
69855: PPUSH
69856: CALL 8374 0 6
// end ;
69860: PPOPN 6
69862: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69863: LD_INT 0
69865: PPUSH
// begin if not units then
69866: LD_VAR 0 1
69870: NOT
69871: IFFALSE 69875
// exit ;
69873: GO 69875
// end ;
69875: PPOPN 7
69877: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69878: CALL 8345 0 0
// end ;
69882: PPOPN 1
69884: END
