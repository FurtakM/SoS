// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 79 0 0
// InitRestrictions ;
  19: CALL 207 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 288 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 595 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: EMPTY
  56: LIST
  57: LIST
  58: LIST
  59: PUSH
  60: LD_OWVAR 67
  64: ARRAY
  65: PPUSH
  66: CALL 595 0 2
// PrepareAmericans ;
  70: CALL 1194 0 0
// Action ;
  74: CALL 2130 0 0
// end ;
  78: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter ; function Init ; begin
  79: LD_INT 0
  81: PPUSH
// debug := false ;
  82: LD_ADDR_EXP 1
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// mission_prefix := 05_ ;
  90: LD_ADDR_EXP 2
  94: PUSH
  95: LD_STRING 05_
  97: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
  98: LD_ADDR_EXP 3
 102: PUSH
 103: LD_STRING 05a_
 105: ST_TO_ADDR
// deltaBuilded := false ;
 106: LD_ADDR_EXP 4
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// denisArrives := false ;
 114: LD_ADDR_EXP 5
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// radar_allowed := false ;
 122: LD_ADDR_EXP 7
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// first_apeman_tamed := false ;
 130: LD_ADDR_EXP 8
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// arab_spotted := false ;
 138: LD_ADDR_EXP 13
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// end_mission := false ;
 146: LD_ADDR_EXP 14
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// apeman_army := false ;
 154: LD_ADDR_EXP 9
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// radar_researched := false ;
 162: LD_ADDR_EXP 10
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// radar_builded := false ;
 170: LD_ADDR_EXP 11
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// apeman_counter := 0 ;
 178: LD_ADDR_EXP 12
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// Delta := 0 ;
 186: LD_ADDR_EXP 6
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// apeKillCounter := 0 ;
 194: LD_ADDR_EXP 15
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// end ;
 202: LD_VAR 0 1
 206: RET
// function InitRestrictions ; begin
 207: LD_INT 0
 209: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 210: LD_INT 7
 212: PPUSH
 213: LD_INT 1
 215: PPUSH
 216: LD_INT 1
 218: PPUSH
 219: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 223: LD_INT 8
 225: PPUSH
 226: LD_INT 1
 228: PPUSH
 229: LD_INT 1
 231: PPUSH
 232: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 236: LD_INT 10
 238: PPUSH
 239: LD_INT 1
 241: PPUSH
 242: LD_INT 1
 244: PPUSH
 245: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 249: LD_INT 69
 251: PPUSH
 252: LD_INT 1
 254: PPUSH
 255: LD_STRING GatlingInGamma
 257: PPUSH
 258: LD_INT 1
 260: PPUSH
 261: CALL_OW 30
 265: PPUSH
 266: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 270: LD_INT 51
 272: PPUSH
 273: LD_INT 1
 275: PPUSH
 276: LD_INT 1
 278: PPUSH
 279: CALL_OW 322
// end ;
 283: LD_VAR 0 1
 287: RET
// function DebugMode ; begin
 288: LD_INT 0
 290: PPUSH
// FogOff ( 1 ) ;
 291: LD_INT 1
 293: PPUSH
 294: CALL_OW 344
// Difficulty := 2 ;
 298: LD_ADDR_OWVAR 67
 302: PUSH
 303: LD_INT 2
 305: ST_TO_ADDR
// end ;
 306: LD_VAR 0 1
 310: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 311: LD_INT 22
 313: PUSH
 314: LD_INT 1
 316: PUSH
 317: EMPTY
 318: LIST
 319: LIST
 320: PUSH
 321: LD_INT 23
 323: PUSH
 324: LD_INT 0
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PUSH
 331: EMPTY
 332: LIST
 333: LIST
 334: PPUSH
 335: CALL_OW 69
 339: PUSH
 340: LD_INT 7
 342: GREATEREQUAL
 343: IFFALSE 355
 345: GO 347
 347: DISABLE
// SetAchievement ( ACH_TAME ) ;
 348: LD_STRING ACH_TAME
 350: PPUSH
 351: CALL_OW 543
 355: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 356: LD_INT 22
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: LD_INT 35
 368: PUSH
 369: LD_INT 11
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PPUSH
 380: CALL_OW 69
 384: PUSH
 385: LD_INT 22
 387: PUSH
 388: LD_INT 1
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PUSH
 395: LD_INT 34
 397: PUSH
 398: LD_INT 11
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: PPUSH
 409: CALL_OW 69
 413: AND
 414: IFFALSE 426
 416: GO 418
 418: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 419: LD_STRING ACH_RADAR
 421: PPUSH
 422: CALL_OW 543
 426: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 427: LD_INT 0
 429: PPUSH
// uc_side := side ;
 430: LD_ADDR_OWVAR 20
 434: PUSH
 435: LD_VAR 0 1
 439: ST_TO_ADDR
// uc_nation := nation ;
 440: LD_ADDR_OWVAR 21
 444: PUSH
 445: LD_VAR 0 2
 449: ST_TO_ADDR
// vc_chassis := chassis ;
 450: LD_ADDR_OWVAR 37
 454: PUSH
 455: LD_VAR 0 3
 459: ST_TO_ADDR
// vc_engine := engine ;
 460: LD_ADDR_OWVAR 39
 464: PUSH
 465: LD_VAR 0 4
 469: ST_TO_ADDR
// vc_control := control ;
 470: LD_ADDR_OWVAR 38
 474: PUSH
 475: LD_VAR 0 5
 479: ST_TO_ADDR
// vc_weapon := weapon ;
 480: LD_ADDR_OWVAR 40
 484: PUSH
 485: LD_VAR 0 6
 489: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 490: LD_ADDR_OWVAR 41
 494: PUSH
 495: LD_VAR 0 7
 499: ST_TO_ADDR
// result := CreateVehicle ;
 500: LD_ADDR_VAR 0 8
 504: PUSH
 505: CALL_OW 45
 509: ST_TO_ADDR
// end ;
 510: LD_VAR 0 8
 514: RET
// export function SayX ( units , ident ) ; var i ; begin
 515: LD_INT 0
 517: PPUSH
 518: PPUSH
// result := false ;
 519: LD_ADDR_VAR 0 3
 523: PUSH
 524: LD_INT 0
 526: ST_TO_ADDR
// if not units then
 527: LD_VAR 0 1
 531: NOT
 532: IFFALSE 536
// exit ;
 534: GO 590
// for i in units do
 536: LD_ADDR_VAR 0 4
 540: PUSH
 541: LD_VAR 0 1
 545: PUSH
 546: FOR_IN
 547: IFFALSE 588
// if IsOk ( i ) then
 549: LD_VAR 0 4
 553: PPUSH
 554: CALL_OW 302
 558: IFFALSE 586
// begin Say ( i , ident ) ;
 560: LD_VAR 0 4
 564: PPUSH
 565: LD_VAR 0 2
 569: PPUSH
 570: CALL_OW 88
// result := i ;
 574: LD_ADDR_VAR 0 3
 578: PUSH
 579: LD_VAR 0 4
 583: ST_TO_ADDR
// break ;
 584: GO 588
// end ;
 586: GO 546
 588: POP
 589: POP
// end ;
 590: LD_VAR 0 3
 594: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 595: LD_INT 0
 597: PPUSH
 598: PPUSH
// InitUc ;
 599: CALL_OW 18
// InitHc ;
 603: CALL_OW 19
// uc_side := 0 ;
 607: LD_ADDR_OWVAR 20
 611: PUSH
 612: LD_INT 0
 614: ST_TO_ADDR
// uc_nation := 0 ;
 615: LD_ADDR_OWVAR 21
 619: PUSH
 620: LD_INT 0
 622: ST_TO_ADDR
// for i = 1 to amount do
 623: LD_ADDR_VAR 0 4
 627: PUSH
 628: DOUBLE
 629: LD_INT 1
 631: DEC
 632: ST_TO_ADDR
 633: LD_VAR 0 2
 637: PUSH
 638: FOR_TO
 639: IFFALSE 721
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 641: LD_ADDR_OWVAR 29
 645: PUSH
 646: LD_INT 9
 648: PPUSH
 649: LD_INT 12
 651: PPUSH
 652: CALL_OW 12
 656: PUSH
 657: LD_INT 9
 659: PPUSH
 660: LD_INT 12
 662: PPUSH
 663: CALL_OW 12
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 672: LD_ADDR_OWVAR 35
 676: PUSH
 677: LD_INT 5
 679: NEG
 680: PPUSH
 681: LD_INT 5
 683: PPUSH
 684: CALL_OW 12
 688: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 689: LD_INT 0
 691: PPUSH
 692: LD_INT 12
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 702: CALL_OW 44
 706: PPUSH
 707: LD_VAR 0 1
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// end ;
 719: GO 638
 721: POP
 722: POP
// InitHc ;
 723: CALL_OW 19
// end ;
 727: LD_VAR 0 3
 731: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 732: LD_INT 0
 734: PPUSH
 735: PPUSH
 736: PPUSH
// if not unit then
 737: LD_VAR 0 1
 741: NOT
 742: IFFALSE 746
// exit ;
 744: GO 1189
// if IsInUnit ( unit ) then
 746: LD_VAR 0 1
 750: PPUSH
 751: CALL_OW 310
 755: IFFALSE 772
// unit := IsDrivenBy ( unit ) ;
 757: LD_ADDR_VAR 0 1
 761: PUSH
 762: LD_VAR 0 1
 766: PPUSH
 767: CALL_OW 311
 771: ST_TO_ADDR
// targets_list := [ ] ;
 772: LD_ADDR_VAR 0 5
 776: PUSH
 777: EMPTY
 778: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 2
 788: PPUSH
 789: LD_INT 24
 791: PUSH
 792: LD_INT 250
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 3
 801: PUSH
 802: LD_INT 34
 804: PUSH
 805: LD_INT 12
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: PUSH
 816: LD_INT 21
 818: PUSH
 819: LD_INT 2
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: PUSH
 826: LD_INT 58
 828: PUSH
 829: EMPTY
 830: LIST
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: LIST
 836: LIST
 837: PPUSH
 838: CALL_OW 72
 842: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
 843: LD_VAR 0 4
 847: PPUSH
 848: LD_VAR 0 1
 852: PPUSH
 853: CALL_OW 74
 857: PPUSH
 858: LD_VAR 0 1
 862: PPUSH
 863: CALL_OW 296
 867: PUSH
 868: LD_INT 11
 870: LESS
 871: PUSH
 872: LD_VAR 0 1
 876: PPUSH
 877: CALL_OW 310
 881: NOT
 882: AND
 883: IFFALSE 911
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
 885: LD_VAR 0 1
 889: PPUSH
 890: LD_VAR 0 4
 894: PPUSH
 895: LD_VAR 0 1
 899: PPUSH
 900: CALL_OW 74
 904: PPUSH
 905: CALL_OW 120
// exit ;
 909: GO 1189
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
 911: LD_ADDR_VAR 0 5
 915: PUSH
 916: LD_VAR 0 2
 920: PPUSH
 921: LD_INT 21
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: LD_INT 3
 933: PUSH
 934: LD_INT 54
 936: PUSH
 937: EMPTY
 938: LIST
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PPUSH
 948: CALL_OW 72
 952: PUSH
 953: LD_VAR 0 2
 957: PPUSH
 958: LD_INT 21
 960: PUSH
 961: LD_INT 2
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PPUSH
 968: CALL_OW 72
 972: PUSH
 973: LD_VAR 0 2
 977: PPUSH
 978: LD_INT 21
 980: PUSH
 981: LD_INT 3
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: PUSH
 988: LD_INT 3
 990: PUSH
 991: LD_INT 58
 993: PUSH
 994: EMPTY
 995: LIST
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PPUSH
1005: CALL_OW 72
1009: PUSH
1010: LD_VAR 0 2
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: LIST
1019: LIST
1020: ST_TO_ADDR
// for target in targets_list do
1021: LD_ADDR_VAR 0 4
1025: PUSH
1026: LD_VAR 0 5
1030: PUSH
1031: FOR_IN
1032: IFFALSE 1187
// begin if target then
1034: LD_VAR 0 4
1038: IFFALSE 1185
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1040: LD_VAR 0 1
1044: PPUSH
1045: CALL_OW 110
1049: PUSH
1050: LD_INT 11
1052: EQUAL
1053: PUSH
1054: LD_VAR 0 4
1058: PPUSH
1059: LD_VAR 0 1
1063: PPUSH
1064: CALL_OW 74
1068: PPUSH
1069: CALL_OW 247
1073: PUSH
1074: LD_INT 3
1076: EQUAL
1077: PUSH
1078: LD_VAR 0 4
1082: PPUSH
1083: LD_VAR 0 1
1087: PPUSH
1088: CALL_OW 74
1092: PPUSH
1093: CALL_OW 264
1097: PUSH
1098: LD_INT 12
1100: EQUAL
1101: OR
1102: AND
1103: IFFALSE 1149
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1105: LD_VAR 0 1
1109: PPUSH
1110: LD_INT 0
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: LD_VAR 0 4
1120: PPUSH
1121: LD_VAR 0 1
1125: PPUSH
1126: CALL_OW 74
1130: PPUSH
1131: CALL_OW 132
// SetTag ( unit , 0 ) ;
1135: LD_VAR 0 1
1139: PPUSH
1140: LD_INT 0
1142: PPUSH
1143: CALL_OW 109
// end else
1147: GO 1185
// if not HasTask ( unit ) then
1149: LD_VAR 0 1
1153: PPUSH
1154: CALL_OW 314
1158: NOT
1159: IFFALSE 1185
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1161: LD_VAR 0 1
1165: PPUSH
1166: LD_VAR 0 4
1170: PPUSH
1171: LD_VAR 0 1
1175: PPUSH
1176: CALL_OW 74
1180: PPUSH
1181: CALL_OW 115
// end ;
1185: GO 1031
1187: POP
1188: POP
// end ; end_of_file
1189: LD_VAR 0 3
1193: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1194: LD_INT 0
1196: PPUSH
1197: PPUSH
1198: PPUSH
1199: PPUSH
1200: PPUSH
// uc_nation := 1 ;
1201: LD_ADDR_OWVAR 21
1205: PUSH
1206: LD_INT 1
1208: ST_TO_ADDR
// uc_side := 4 ;
1209: LD_ADDR_OWVAR 20
1213: PUSH
1214: LD_INT 4
1216: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1217: LD_ADDR_EXP 19
1221: PUSH
1222: LD_STRING Denis
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: LD_STRING 
1230: PPUSH
1231: CALL 20682 0 3
1235: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1236: LD_ADDR_EXP 18
1240: PUSH
1241: LD_STRING Harisson
1243: PPUSH
1244: LD_INT 0
1246: PPUSH
1247: LD_STRING 
1249: PPUSH
1250: CALL 20682 0 3
1254: ST_TO_ADDR
// uc_side := 1 ;
1255: LD_ADDR_OWVAR 20
1259: PUSH
1260: LD_INT 1
1262: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1263: LD_ADDR_EXP 16
1267: PUSH
1268: LD_STRING JMM
1270: PPUSH
1271: LD_EXP 1
1275: NOT
1276: PPUSH
1277: LD_EXP 3
1281: PPUSH
1282: CALL 20682 0 3
1286: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1287: LD_ADDR_EXP 17
1291: PUSH
1292: LD_STRING Gladstone
1294: PPUSH
1295: LD_INT 0
1297: PPUSH
1298: LD_EXP 3
1302: PPUSH
1303: CALL 20682 0 3
1307: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1308: LD_STRING BrownInDelta
1310: PPUSH
1311: LD_EXP 1
1315: PPUSH
1316: CALL_OW 30
1320: IFFALSE 1362
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1322: LD_ADDR_EXP 20
1326: PUSH
1327: LD_STRING Brown
1329: PPUSH
1330: LD_EXP 1
1334: NOT
1335: PPUSH
1336: LD_EXP 3
1340: PPUSH
1341: CALL 20682 0 3
1345: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1346: LD_ADDR_VAR 0 5
1350: PUSH
1351: LD_VAR 0 5
1355: PUSH
1356: LD_EXP 20
1360: ADD
1361: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1362: LD_STRING DonaldsonInDelta
1364: PPUSH
1365: LD_EXP 1
1369: PPUSH
1370: CALL_OW 30
1374: IFFALSE 1416
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1376: LD_ADDR_EXP 21
1380: PUSH
1381: LD_STRING Donaldson
1383: PPUSH
1384: LD_EXP 1
1388: NOT
1389: PPUSH
1390: LD_EXP 3
1394: PPUSH
1395: CALL 20682 0 3
1399: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1400: LD_ADDR_VAR 0 5
1404: PUSH
1405: LD_VAR 0 5
1409: PUSH
1410: LD_EXP 21
1414: ADD
1415: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1416: LD_STRING LisaInDelta
1418: PPUSH
1419: LD_EXP 1
1423: PPUSH
1424: CALL_OW 30
1428: IFFALSE 1470
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1430: LD_ADDR_EXP 22
1434: PUSH
1435: LD_STRING Lisa
1437: PPUSH
1438: LD_EXP 1
1442: NOT
1443: PPUSH
1444: LD_EXP 3
1448: PPUSH
1449: CALL 20682 0 3
1453: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1454: LD_ADDR_VAR 0 5
1458: PUSH
1459: LD_VAR 0 5
1463: PUSH
1464: LD_EXP 22
1468: ADD
1469: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1470: LD_STRING FrankInDelta
1472: PPUSH
1473: LD_EXP 1
1477: PPUSH
1478: CALL_OW 30
1482: IFFALSE 1524
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1484: LD_ADDR_EXP 23
1488: PUSH
1489: LD_STRING Frank
1491: PPUSH
1492: LD_EXP 1
1496: NOT
1497: PPUSH
1498: LD_EXP 3
1502: PPUSH
1503: CALL 20682 0 3
1507: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1508: LD_ADDR_VAR 0 5
1512: PUSH
1513: LD_VAR 0 5
1517: PUSH
1518: LD_EXP 23
1522: ADD
1523: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1524: LD_STRING BobbyInDelta
1526: PPUSH
1527: LD_INT 0
1529: PPUSH
1530: CALL_OW 30
1534: IFFALSE 1576
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1536: LD_ADDR_EXP 24
1540: PUSH
1541: LD_STRING Bobby
1543: PPUSH
1544: LD_EXP 1
1548: NOT
1549: PPUSH
1550: LD_EXP 3
1554: PPUSH
1555: CALL 20682 0 3
1559: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1560: LD_ADDR_VAR 0 5
1564: PUSH
1565: LD_VAR 0 5
1569: PUSH
1570: LD_EXP 24
1574: ADD
1575: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1576: LD_STRING CyrusInDelta
1578: PPUSH
1579: LD_INT 0
1581: PPUSH
1582: CALL_OW 30
1586: IFFALSE 1628
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1588: LD_ADDR_EXP 25
1592: PUSH
1593: LD_STRING Cyrus
1595: PPUSH
1596: LD_EXP 1
1600: NOT
1601: PPUSH
1602: LD_EXP 3
1606: PPUSH
1607: CALL 20682 0 3
1611: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1612: LD_ADDR_VAR 0 5
1616: PUSH
1617: LD_VAR 0 5
1621: PUSH
1622: LD_EXP 25
1626: ADD
1627: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1628: LD_ADDR_EXP 26
1632: PUSH
1633: LD_STRING othersDelta
1635: PPUSH
1636: CALL_OW 31
1640: ST_TO_ADDR
// if not others and debug then
1641: LD_EXP 26
1645: NOT
1646: PUSH
1647: LD_EXP 1
1651: AND
1652: IFFALSE 1717
// begin InitHc ;
1654: CALL_OW 19
// for i = 1 to 2 do
1658: LD_ADDR_VAR 0 2
1662: PUSH
1663: DOUBLE
1664: LD_INT 1
1666: DEC
1667: ST_TO_ADDR
1668: LD_INT 2
1670: PUSH
1671: FOR_TO
1672: IFFALSE 1715
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1674: LD_INT 0
1676: PPUSH
1677: LD_VAR 0 2
1681: PUSH
1682: LD_INT 4
1684: MOD
1685: PUSH
1686: LD_INT 1
1688: PLUS
1689: PPUSH
1690: LD_INT 3
1692: PPUSH
1693: CALL_OW 380
// others := others ^ CreateHuman ;
1697: LD_ADDR_EXP 26
1701: PUSH
1702: LD_EXP 26
1706: PUSH
1707: CALL_OW 44
1711: ADD
1712: ST_TO_ADDR
// end ;
1713: GO 1671
1715: POP
1716: POP
// end ; if others then
1717: LD_EXP 26
1721: IFFALSE 1739
// tmp := tmp ^ others ;
1723: LD_ADDR_VAR 0 5
1727: PUSH
1728: LD_VAR 0 5
1732: PUSH
1733: LD_EXP 26
1737: ADD
1738: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1739: LD_ADDR_VAR 0 3
1743: PUSH
1744: LD_INT 28
1746: PUSH
1747: LD_INT 49
1749: PUSH
1750: EMPTY
1751: LIST
1752: LIST
1753: PUSH
1754: LD_INT 33
1756: PUSH
1757: LD_INT 54
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: PUSH
1764: LD_INT 38
1766: PUSH
1767: LD_INT 56
1769: PUSH
1770: EMPTY
1771: LIST
1772: LIST
1773: PUSH
1774: EMPTY
1775: LIST
1776: LIST
1777: LIST
1778: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1779: LD_ADDR_VAR 0 4
1783: PUSH
1784: LD_INT 1
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: LD_INT 2
1792: PPUSH
1793: LD_INT 2
1795: PPUSH
1796: LD_INT 1
1798: PPUSH
1799: LD_INT 12
1801: PPUSH
1802: LD_INT 80
1804: PPUSH
1805: CALL 427 0 7
1809: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1810: LD_VAR 0 4
1814: PPUSH
1815: LD_INT 1
1817: PPUSH
1818: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
1822: LD_VAR 0 4
1826: PPUSH
1827: LD_VAR 0 3
1831: PUSH
1832: LD_INT 1
1834: ARRAY
1835: PUSH
1836: LD_INT 1
1838: ARRAY
1839: PPUSH
1840: LD_VAR 0 3
1844: PUSH
1845: LD_INT 1
1847: ARRAY
1848: PUSH
1849: LD_INT 2
1851: ARRAY
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
1860: LD_VAR 0 4
1864: PPUSH
1865: LD_INT 1
1867: PPUSH
1868: LD_INT 100
1870: PPUSH
1871: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
1875: LD_EXP 26
1879: PUSH
1880: LD_INT 1
1882: ARRAY
1883: PPUSH
1884: LD_VAR 0 4
1888: PPUSH
1889: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
1893: LD_ADDR_VAR 0 4
1897: PUSH
1898: LD_INT 1
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: LD_INT 1
1906: PPUSH
1907: LD_INT 2
1909: PPUSH
1910: LD_INT 1
1912: PPUSH
1913: LD_INT 2
1915: PPUSH
1916: LD_INT 80
1918: PPUSH
1919: CALL 427 0 7
1923: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1924: LD_VAR 0 4
1928: PPUSH
1929: LD_INT 1
1931: PPUSH
1932: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
1936: LD_VAR 0 4
1940: PPUSH
1941: LD_VAR 0 3
1945: PUSH
1946: LD_INT 2
1948: ARRAY
1949: PUSH
1950: LD_INT 1
1952: ARRAY
1953: PPUSH
1954: LD_VAR 0 3
1958: PUSH
1959: LD_INT 2
1961: ARRAY
1962: PUSH
1963: LD_INT 2
1965: ARRAY
1966: PPUSH
1967: LD_INT 0
1969: PPUSH
1970: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
1974: LD_EXP 17
1978: PPUSH
1979: LD_VAR 0 4
1983: PPUSH
1984: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
1988: LD_ADDR_VAR 0 4
1992: PUSH
1993: LD_INT 1
1995: PPUSH
1996: LD_INT 1
1998: PPUSH
1999: LD_INT 1
2001: PPUSH
2002: LD_INT 2
2004: PPUSH
2005: LD_INT 1
2007: PPUSH
2008: LD_INT 3
2010: PPUSH
2011: LD_INT 80
2013: PPUSH
2014: CALL 427 0 7
2018: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2019: LD_VAR 0 4
2023: PPUSH
2024: LD_INT 1
2026: PPUSH
2027: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2031: LD_VAR 0 4
2035: PPUSH
2036: LD_VAR 0 3
2040: PUSH
2041: LD_INT 3
2043: ARRAY
2044: PUSH
2045: LD_INT 1
2047: ARRAY
2048: PPUSH
2049: LD_VAR 0 3
2053: PUSH
2054: LD_INT 3
2056: ARRAY
2057: PUSH
2058: LD_INT 2
2060: ARRAY
2061: PPUSH
2062: LD_INT 0
2064: PPUSH
2065: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2069: LD_EXP 16
2073: PPUSH
2074: LD_VAR 0 4
2078: PPUSH
2079: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: LD_VAR 0 5
2092: PUSH
2093: LD_EXP 26
2097: PUSH
2098: LD_INT 1
2100: ARRAY
2101: DIFF
2102: PUSH
2103: FOR_IN
2104: IFFALSE 2123
// PlaceUnitArea ( i , startArea , false ) ;
2106: LD_VAR 0 2
2110: PPUSH
2111: LD_INT 5
2113: PPUSH
2114: LD_INT 0
2116: PPUSH
2117: CALL_OW 49
2121: GO 2103
2123: POP
2124: POP
// end ; end_of_file
2125: LD_VAR 0 1
2129: RET
// export function Action ; var m ; begin
2130: LD_INT 0
2132: PPUSH
2133: PPUSH
// InGameOn ;
2134: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2138: LD_INT 28
2140: PPUSH
2141: LD_INT 51
2143: PPUSH
2144: CALL_OW 86
// Wait ( 3 ) ;
2148: LD_INT 3
2150: PPUSH
2151: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2155: LD_EXP 16
2159: PPUSH
2160: LD_STRING D1d-JMM-1a
2162: PPUSH
2163: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2167: LD_EXP 18
2171: PPUSH
2172: LD_STRING D1d-Har-1
2174: PPUSH
2175: CALL_OW 94
// InGameOff ;
2179: CALL_OW 9
// SaveForQuickRestart ;
2183: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2187: LD_STRING M1
2189: PPUSH
2190: CALL_OW 337
// Wait ( 0 0$2 ) ;
2194: LD_INT 70
2196: PPUSH
2197: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2201: LD_EXP 16
2205: PPUSH
2206: LD_STRING D2-JMM-1
2208: PPUSH
2209: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2213: LD_EXP 17
2217: PPUSH
2218: LD_STRING D2-Glad-1
2220: PPUSH
2221: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2225: LD_EXP 16
2229: PPUSH
2230: LD_STRING D2-JMM-2
2232: PPUSH
2233: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2237: LD_EXP 17
2241: PPUSH
2242: LD_STRING D2-Glad-2
2244: PPUSH
2245: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2249: LD_EXP 16
2253: PPUSH
2254: LD_STRING D2-JMM-3
2256: PPUSH
2257: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2261: LD_INT 1050
2263: PPUSH
2264: LD_INT 2100
2266: PPUSH
2267: CALL_OW 12
2271: PPUSH
2272: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2276: LD_INT 1
2278: PPUSH
2279: LD_INT 570
2281: PPUSH
2282: LD_INT 350
2284: PPUSH
2285: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2289: LD_INT 6300
2291: PPUSH
2292: LD_INT 10500
2294: PPUSH
2295: CALL_OW 12
2299: PPUSH
2300: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2304: LD_INT 0
2306: PPUSH
2307: LD_INT 570
2309: PPUSH
2310: LD_INT 350
2312: PPUSH
2313: CALL_OW 550
// end ;
2317: LD_VAR 0 1
2321: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2322: LD_INT 22
2324: PUSH
2325: LD_INT 1
2327: PUSH
2328: EMPTY
2329: LIST
2330: LIST
2331: PUSH
2332: LD_INT 3
2334: PUSH
2335: LD_INT 57
2337: PUSH
2338: EMPTY
2339: LIST
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: PUSH
2345: LD_INT 30
2347: PUSH
2348: LD_INT 0
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: PUSH
2360: EMPTY
2361: LIST
2362: PPUSH
2363: CALL_OW 69
2367: PUSH
2368: LD_EXP 4
2372: NOT
2373: AND
2374: IFFALSE 2387
2376: GO 2378
2378: DISABLE
// begin deltaBuilded := true ;
2379: LD_ADDR_EXP 4
2383: PUSH
2384: LD_INT 1
2386: ST_TO_ADDR
// end ;
2387: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2388: LD_EXP 6
2392: NOT
2393: PUSH
2394: LD_EXP 4
2398: AND
2399: PUSH
2400: LD_INT 22
2402: PUSH
2403: LD_INT 1
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: PUSH
2410: LD_INT 3
2412: PUSH
2413: LD_INT 57
2415: PUSH
2416: EMPTY
2417: LIST
2418: PUSH
2419: EMPTY
2420: LIST
2421: LIST
2422: PUSH
2423: LD_INT 30
2425: PUSH
2426: LD_INT 0
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: PUSH
2438: EMPTY
2439: LIST
2440: PPUSH
2441: CALL_OW 69
2445: AND
2446: IFFALSE 2532
2448: GO 2450
2450: DISABLE
// begin enable ;
2451: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2452: LD_INT 0
2454: PPUSH
2455: LD_INT 1
2457: PPUSH
2458: LD_INT 0
2460: PPUSH
2461: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2465: LD_ADDR_EXP 6
2469: PUSH
2470: LD_INT 22
2472: PUSH
2473: LD_INT 1
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: PUSH
2480: LD_INT 3
2482: PUSH
2483: LD_INT 57
2485: PUSH
2486: EMPTY
2487: LIST
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PUSH
2493: LD_INT 30
2495: PUSH
2496: LD_INT 0
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: LIST
2507: PUSH
2508: EMPTY
2509: LIST
2510: PPUSH
2511: CALL_OW 69
2515: PUSH
2516: LD_INT 1
2518: ARRAY
2519: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2520: LD_EXP 6
2524: PPUSH
2525: LD_STRING Delta
2527: PPUSH
2528: CALL_OW 500
// end ;
2532: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2533: LD_INT 1
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL_OW 321
2543: PUSH
2544: LD_INT 2
2546: EQUAL
2547: PUSH
2548: LD_EXP 17
2552: PPUSH
2553: CALL_OW 302
2557: AND
2558: IFFALSE 2619
2560: GO 2562
2562: DISABLE
// begin DialogueOn ;
2563: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2567: LD_EXP 17
2571: PPUSH
2572: LD_STRING D3-Glad-1
2574: PPUSH
2575: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2579: LD_EXP 16
2583: PPUSH
2584: LD_STRING D3-JMM-1
2586: PPUSH
2587: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2591: LD_EXP 17
2595: PPUSH
2596: LD_STRING D3-Glad-2
2598: PPUSH
2599: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2603: LD_EXP 16
2607: PPUSH
2608: LD_STRING D3-JMM-2
2610: PPUSH
2611: CALL_OW 88
// DialogueOff ;
2615: CALL_OW 7
// end ;
2619: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched do var sol ;
2620: LD_INT 2
2622: PPUSH
2623: LD_INT 1
2625: PPUSH
2626: CALL_OW 321
2630: PUSH
2631: LD_INT 2
2633: EQUAL
2634: IFFALSE 2811
2636: GO 2638
2638: DISABLE
2639: LD_INT 0
2641: PPUSH
// begin DialogueOn ;
2642: CALL_OW 6
// if Frank then
2646: LD_EXP 23
2650: IFFALSE 2664
// Say ( Frank , D8a-Frank-1 ) ;
2652: LD_EXP 23
2656: PPUSH
2657: LD_STRING D8a-Frank-1
2659: PPUSH
2660: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2664: LD_ADDR_VAR 0 1
2668: PUSH
2669: LD_EXP 26
2673: PPUSH
2674: LD_INT 26
2676: PUSH
2677: LD_INT 1
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: PPUSH
2684: CALL_OW 72
2688: PPUSH
2689: LD_STRING D8a-Sol1-1
2691: PPUSH
2692: CALL 515 0 2
2696: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2697: LD_EXP 19
2701: PUSH
2702: LD_EXP 19
2706: PPUSH
2707: CALL_OW 255
2711: PUSH
2712: LD_INT 1
2714: EQUAL
2715: AND
2716: IFFALSE 2730
// Say ( Denis , D8a-Den-1 ) ;
2718: LD_EXP 19
2722: PPUSH
2723: LD_STRING D8a-Den-1
2725: PPUSH
2726: CALL_OW 88
// if sol or Denis or Frank then
2730: LD_VAR 0 1
2734: PUSH
2735: LD_EXP 19
2739: OR
2740: PUSH
2741: LD_EXP 23
2745: OR
2746: IFFALSE 2807
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
2748: LD_EXP 26
2752: PPUSH
2753: LD_INT 25
2755: PUSH
2756: LD_INT 4
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: LD_INT 26
2765: PUSH
2766: LD_INT 1
2768: PUSH
2769: EMPTY
2770: LIST
2771: LIST
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PPUSH
2777: CALL_OW 72
2781: PUSH
2782: LD_VAR 0 1
2786: DIFF
2787: PPUSH
2788: LD_STRING D8a-Sci1-1
2790: PPUSH
2791: CALL 515 0 2
// Say ( JMM , D8a-JMM-1 ) ;
2795: LD_EXP 16
2799: PPUSH
2800: LD_STRING D8a-JMM-1
2802: PPUSH
2803: CALL_OW 88
// end ; DialogueOff ;
2807: CALL_OW 7
// end ;
2811: PPOPN 1
2813: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
2814: LD_INT 22
2816: PUSH
2817: LD_INT 1
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: LD_INT 25
2826: PUSH
2827: LD_INT 16
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PPUSH
2838: CALL_OW 69
2842: IFFALSE 2901
2844: GO 2846
2846: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
2847: LD_STRING M1a
2849: PPUSH
2850: CALL_OW 337
// case Query ( Q2 ) of 1 :
2854: LD_STRING Q2
2856: PPUSH
2857: CALL_OW 97
2861: PUSH
2862: LD_INT 1
2864: DOUBLE
2865: EQUAL
2866: IFTRUE 2870
2868: GO 2881
2870: POP
// end_mission := true ; 2 :
2871: LD_ADDR_EXP 14
2875: PUSH
2876: LD_INT 1
2878: ST_TO_ADDR
2879: GO 2901
2881: LD_INT 2
2883: DOUBLE
2884: EQUAL
2885: IFTRUE 2889
2887: GO 2900
2889: POP
// end_the_mission_allowed := true ; end ;
2890: LD_ADDR_OWVAR 57
2894: PUSH
2895: LD_INT 1
2897: ST_TO_ADDR
2898: GO 2901
2900: POP
// end ;
2901: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
2902: LD_INT 22
2904: PUSH
2905: LD_INT 1
2907: PUSH
2908: EMPTY
2909: LIST
2910: LIST
2911: PUSH
2912: LD_INT 2
2914: PUSH
2915: LD_INT 30
2917: PUSH
2918: LD_INT 6
2920: PUSH
2921: EMPTY
2922: LIST
2923: LIST
2924: PUSH
2925: LD_INT 30
2927: PUSH
2928: LD_INT 7
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: LIST
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PPUSH
2944: CALL_OW 69
2948: PUSH
2949: LD_INT 22
2951: PUSH
2952: LD_INT 1
2954: PUSH
2955: EMPTY
2956: LIST
2957: LIST
2958: PUSH
2959: LD_INT 2
2961: PUSH
2962: LD_INT 30
2964: PUSH
2965: LD_INT 2
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: PUSH
2972: LD_INT 30
2974: PUSH
2975: LD_INT 3
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: LIST
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: PPUSH
2991: CALL_OW 69
2995: AND
2996: PUSH
2997: LD_EXP 6
3001: AND
3002: IFFALSE 3513
3004: GO 3006
3006: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3007: LD_INT 1050
3009: PPUSH
3010: LD_INT 1750
3012: PPUSH
3013: CALL_OW 12
3017: PPUSH
3018: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 ] [ Difficulty ] , false ) ;
3022: LD_EXP 19
3026: PPUSH
3027: LD_INT 6
3029: PUSH
3030: LD_INT 9
3032: PUSH
3033: LD_INT 10
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: LIST
3040: PUSH
3041: LD_OWVAR 67
3045: ARRAY
3046: PPUSH
3047: LD_INT 0
3049: PPUSH
3050: CALL_OW 49
// ComHold ( Denis ) ;
3054: LD_EXP 19
3058: PPUSH
3059: CALL_OW 140
// InGameOn ;
3063: CALL_OW 8
// DialogueOn ;
3067: CALL_OW 6
// if Delta then
3071: LD_EXP 6
3075: IFFALSE 3088
// CenterNowOnUnits ( Delta ) else
3077: LD_EXP 6
3081: PPUSH
3082: CALL_OW 87
3086: GO 3097
// CenterNowOnUnits ( JMM ) ;
3088: LD_EXP 16
3092: PPUSH
3093: CALL_OW 87
// SayRadio ( Denis , DD-Den-1 ) ;
3097: LD_EXP 19
3101: PPUSH
3102: LD_STRING DD-Den-1
3104: PPUSH
3105: CALL_OW 94
// Say ( JMM , DD-JMM-1 ) ;
3109: LD_EXP 16
3113: PPUSH
3114: LD_STRING DD-JMM-1
3116: PPUSH
3117: CALL_OW 88
// SayRadio ( Denis , DD-Den-2 ) ;
3121: LD_EXP 19
3125: PPUSH
3126: LD_STRING DD-Den-2
3128: PPUSH
3129: CALL_OW 94
// Wait ( 3 ) ;
3133: LD_INT 3
3135: PPUSH
3136: CALL_OW 67
// DialogueOff ;
3140: CALL_OW 7
// InGameOff ;
3144: CALL_OW 9
// if Difficulty = 1 then
3148: LD_OWVAR 67
3152: PUSH
3153: LD_INT 1
3155: EQUAL
3156: IFFALSE 3232
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3158: LD_EXP 19
3162: PPUSH
3163: CALL_OW 250
3167: PPUSH
3168: LD_EXP 19
3172: PPUSH
3173: CALL_OW 251
3177: PPUSH
3178: LD_INT 1
3180: PPUSH
3181: LD_INT 12
3183: NEG
3184: PPUSH
3185: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3189: LD_EXP 19
3193: PPUSH
3194: CALL_OW 87
// wait ( 0 0$5 ) ;
3198: LD_INT 175
3200: PPUSH
3201: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3205: LD_EXP 19
3209: PPUSH
3210: CALL_OW 250
3214: PPUSH
3215: LD_EXP 19
3219: PPUSH
3220: CALL_OW 251
3224: PPUSH
3225: LD_INT 1
3227: PPUSH
3228: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3232: LD_INT 35
3234: PPUSH
3235: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3239: LD_INT 1
3241: PPUSH
3242: LD_EXP 19
3246: PPUSH
3247: CALL_OW 292
3251: PUSH
3252: LD_EXP 19
3256: PPUSH
3257: CALL_OW 301
3261: OR
3262: IFFALSE 3232
// if IsDead ( Denis ) then
3264: LD_EXP 19
3268: PPUSH
3269: CALL_OW 301
3273: IFFALSE 3277
// exit ;
3275: GO 3513
// SetSide ( Denis , 1 ) ;
3277: LD_EXP 19
3281: PPUSH
3282: LD_INT 1
3284: PPUSH
3285: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3289: LD_EXP 19
3293: PPUSH
3294: LD_STRING DD-Den-2a
3296: PPUSH
3297: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3301: LD_INT 35
3303: PPUSH
3304: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3308: LD_EXP 19
3312: PPUSH
3313: CALL_OW 310
3317: PPUSH
3318: CALL_OW 266
3322: PUSH
3323: LD_INT 6
3325: PUSH
3326: LD_INT 7
3328: PUSH
3329: LD_INT 8
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: IN
3337: PUSH
3338: LD_EXP 19
3342: PPUSH
3343: CALL_OW 301
3347: OR
3348: IFFALSE 3301
// if IsDead ( Denis ) then
3350: LD_EXP 19
3354: PPUSH
3355: CALL_OW 301
3359: IFFALSE 3363
// exit ;
3361: GO 3513
// Say ( Denis , DD-Den-2b ) ;
3363: LD_EXP 19
3367: PPUSH
3368: LD_STRING DD-Den-2b
3370: PPUSH
3371: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
3375: LD_EXP 19
3379: PPUSH
3380: LD_INT 4
3382: PPUSH
3383: CALL_OW 123
// Wait ( 0 0$02 ) ;
3387: LD_INT 70
3389: PPUSH
3390: CALL_OW 67
// DialogueOn ;
3394: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
3398: LD_EXP 19
3402: PPUSH
3403: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
3407: LD_EXP 16
3411: PPUSH
3412: LD_STRING D4-JMM-1
3414: PPUSH
3415: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
3419: LD_EXP 19
3423: PPUSH
3424: LD_STRING D4-Den-1
3426: PPUSH
3427: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
3431: LD_EXP 16
3435: PPUSH
3436: LD_STRING D4-JMM-2
3438: PPUSH
3439: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
3443: LD_EXP 19
3447: PPUSH
3448: LD_STRING D4-Den-2
3450: PPUSH
3451: CALL_OW 88
// DialogueOff ;
3455: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3459: LD_STRING M2
3461: PPUSH
3462: CALL_OW 337
// radar_allowed := true ;
3466: LD_ADDR_EXP 7
3470: PUSH
3471: LD_INT 1
3473: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
3474: LD_INT 6
3476: PPUSH
3477: LD_INT 1
3479: PPUSH
3480: LD_INT 1
3482: PPUSH
3483: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
3487: LD_INT 15
3489: PPUSH
3490: LD_INT 1
3492: PPUSH
3493: LD_INT 1
3495: PPUSH
3496: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
3500: LD_INT 20
3502: PPUSH
3503: LD_INT 1
3505: PPUSH
3506: LD_INT 1
3508: PPUSH
3509: CALL_OW 324
// end ;
3513: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
3514: LD_EXP 13
3518: IFFALSE 4141
3520: GO 3522
3522: DISABLE
3523: LD_INT 0
3525: PPUSH
3526: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
3527: LD_ADDR_VAR 0 1
3531: PUSH
3532: LD_EXP 26
3536: PPUSH
3537: LD_INT 26
3539: PUSH
3540: LD_INT 1
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: PPUSH
3547: CALL_OW 72
3551: PPUSH
3552: LD_STRING D5-Sol1-1
3554: PPUSH
3555: CALL 515 0 2
3559: ST_TO_ADDR
// if not sol then
3560: LD_VAR 0 1
3564: NOT
3565: IFFALSE 3569
// exit ;
3567: GO 4141
// repeat wait ( 0 0$01 ) ;
3569: LD_INT 35
3571: PPUSH
3572: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
3576: LD_INT 22
3578: PUSH
3579: LD_INT 2
3581: PUSH
3582: EMPTY
3583: LIST
3584: LIST
3585: PUSH
3586: LD_INT 21
3588: PUSH
3589: LD_INT 1
3591: PUSH
3592: EMPTY
3593: LIST
3594: LIST
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PPUSH
3600: CALL_OW 69
3604: PUSH
3605: LD_INT 0
3607: EQUAL
3608: IFFALSE 3569
// if IsOk ( sol ) then
3610: LD_VAR 0 1
3614: PPUSH
3615: CALL_OW 302
3619: IFFALSE 3639
// begin sol2 := others diff sol ;
3621: LD_ADDR_VAR 0 2
3625: PUSH
3626: LD_EXP 26
3630: PUSH
3631: LD_VAR 0 1
3635: DIFF
3636: ST_TO_ADDR
// end else
3637: GO 3641
// exit ;
3639: GO 4141
// if not Lisa and not sol2 then
3641: LD_EXP 22
3645: NOT
3646: PUSH
3647: LD_VAR 0 2
3651: NOT
3652: AND
3653: IFFALSE 3657
// exit ;
3655: GO 4141
// DialogueOn ;
3657: CALL_OW 6
// if Lisa then
3661: LD_EXP 22
3665: IFFALSE 3681
// Say ( Lisa , D5a-Lisa-1 ) else
3667: LD_EXP 22
3671: PPUSH
3672: LD_STRING D5a-Lisa-1
3674: PPUSH
3675: CALL_OW 88
3679: GO 3756
// if sol2 then
3681: LD_VAR 0 2
3685: IFFALSE 3756
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3687: LD_VAR 0 2
3691: PUSH
3692: LD_INT 1
3694: ARRAY
3695: PPUSH
3696: CALL_OW 258
3700: PUSH
3701: LD_INT 1
3703: DOUBLE
3704: EQUAL
3705: IFTRUE 3709
3707: GO 3728
3709: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
3710: LD_VAR 0 2
3714: PUSH
3715: LD_INT 1
3717: ARRAY
3718: PPUSH
3719: LD_STRING D5-Sol2-1
3721: PPUSH
3722: CALL_OW 88
3726: GO 3756
3728: LD_INT 2
3730: DOUBLE
3731: EQUAL
3732: IFTRUE 3736
3734: GO 3755
3736: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
3737: LD_VAR 0 2
3741: PUSH
3742: LD_INT 1
3744: ARRAY
3745: PPUSH
3746: LD_STRING D5-FSol2-1
3748: PPUSH
3749: CALL_OW 88
3753: GO 3756
3755: POP
// Say ( sol , D5-Sol1-2 ) ;
3756: LD_VAR 0 1
3760: PPUSH
3761: LD_STRING D5-Sol1-2
3763: PPUSH
3764: CALL_OW 88
// if Lisa then
3768: LD_EXP 22
3772: IFFALSE 3788
// Say ( Lisa , D5a-Lisa-2 ) else
3774: LD_EXP 22
3778: PPUSH
3779: LD_STRING D5a-Lisa-2
3781: PPUSH
3782: CALL_OW 88
3786: GO 3863
// if sol2 then
3788: LD_VAR 0 2
3792: IFFALSE 3863
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3794: LD_VAR 0 2
3798: PUSH
3799: LD_INT 1
3801: ARRAY
3802: PPUSH
3803: CALL_OW 258
3807: PUSH
3808: LD_INT 1
3810: DOUBLE
3811: EQUAL
3812: IFTRUE 3816
3814: GO 3835
3816: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
3817: LD_VAR 0 2
3821: PUSH
3822: LD_INT 1
3824: ARRAY
3825: PPUSH
3826: LD_STRING D5-Sol2-2
3828: PPUSH
3829: CALL_OW 88
3833: GO 3863
3835: LD_INT 2
3837: DOUBLE
3838: EQUAL
3839: IFTRUE 3843
3841: GO 3862
3843: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
3844: LD_VAR 0 2
3848: PUSH
3849: LD_INT 1
3851: ARRAY
3852: PPUSH
3853: LD_STRING D5-FSol2-2
3855: PPUSH
3856: CALL_OW 88
3860: GO 3863
3862: POP
// Say ( sol , D5a-Sol1-3 ) ;
3863: LD_VAR 0 1
3867: PPUSH
3868: LD_STRING D5a-Sol1-3
3870: PPUSH
3871: CALL_OW 88
// if Lisa then
3875: LD_EXP 22
3879: IFFALSE 3893
// Say ( Lisa , D5a-Lisa-3 ) ;
3881: LD_EXP 22
3885: PPUSH
3886: LD_STRING D5a-Lisa-3
3888: PPUSH
3889: CALL_OW 88
// if not sol2 then
3893: LD_VAR 0 2
3897: NOT
3898: IFFALSE 3906
// begin DialogueOff ;
3900: CALL_OW 7
// exit ;
3904: GO 4141
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
3906: LD_VAR 0 2
3910: PUSH
3911: LD_INT 1
3913: ARRAY
3914: PPUSH
3915: CALL_OW 258
3919: PUSH
3920: LD_INT 1
3922: DOUBLE
3923: EQUAL
3924: IFTRUE 3928
3926: GO 3947
3928: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
3929: LD_VAR 0 2
3933: PUSH
3934: LD_INT 1
3936: ARRAY
3937: PPUSH
3938: LD_STRING D5-Sol2-3
3940: PPUSH
3941: CALL_OW 88
3945: GO 3975
3947: LD_INT 2
3949: DOUBLE
3950: EQUAL
3951: IFTRUE 3955
3953: GO 3974
3955: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
3956: LD_VAR 0 2
3960: PUSH
3961: LD_INT 1
3963: ARRAY
3964: PPUSH
3965: LD_STRING D5-FSol2-3
3967: PPUSH
3968: CALL_OW 88
3972: GO 3975
3974: POP
// Say ( sol , D5-Sol1-4 ) ;
3975: LD_VAR 0 1
3979: PPUSH
3980: LD_STRING D5-Sol1-4
3982: PPUSH
3983: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
3987: LD_VAR 0 2
3991: PUSH
3992: LD_INT 1
3994: ARRAY
3995: PPUSH
3996: CALL_OW 258
4000: PUSH
4001: LD_INT 1
4003: DOUBLE
4004: EQUAL
4005: IFTRUE 4009
4007: GO 4028
4009: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4010: LD_VAR 0 2
4014: PUSH
4015: LD_INT 1
4017: ARRAY
4018: PPUSH
4019: LD_STRING D5-Sol2-4
4021: PPUSH
4022: CALL_OW 88
4026: GO 4056
4028: LD_INT 2
4030: DOUBLE
4031: EQUAL
4032: IFTRUE 4036
4034: GO 4055
4036: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4037: LD_VAR 0 2
4041: PUSH
4042: LD_INT 1
4044: ARRAY
4045: PPUSH
4046: LD_STRING D5-FSol2-4
4048: PPUSH
4049: CALL_OW 88
4053: GO 4056
4055: POP
// Say ( sol , D5-Sol1-5 ) ;
4056: LD_VAR 0 1
4060: PPUSH
4061: LD_STRING D5-Sol1-5
4063: PPUSH
4064: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4068: LD_VAR 0 2
4072: PUSH
4073: LD_INT 1
4075: ARRAY
4076: PPUSH
4077: CALL_OW 258
4081: PUSH
4082: LD_INT 1
4084: DOUBLE
4085: EQUAL
4086: IFTRUE 4090
4088: GO 4109
4090: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4091: LD_VAR 0 2
4095: PUSH
4096: LD_INT 1
4098: ARRAY
4099: PPUSH
4100: LD_STRING D5-Sol2-5
4102: PPUSH
4103: CALL_OW 88
4107: GO 4137
4109: LD_INT 2
4111: DOUBLE
4112: EQUAL
4113: IFTRUE 4117
4115: GO 4136
4117: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4118: LD_VAR 0 2
4122: PUSH
4123: LD_INT 1
4125: ARRAY
4126: PPUSH
4127: LD_STRING D5-FSol2-5
4129: PPUSH
4130: CALL_OW 88
4134: GO 4137
4136: POP
// DialogueOff ;
4137: CALL_OW 7
// end ;
4141: PPOPN 2
4143: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4144: LD_INT 22
4146: PUSH
4147: LD_INT 1
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: PUSH
4154: LD_INT 25
4156: PUSH
4157: LD_INT 16
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PPUSH
4168: CALL_OW 69
4172: PUSH
4173: LD_INT 5
4175: GREATEREQUAL
4176: IFFALSE 4196
4178: GO 4180
4180: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4181: LD_STRING M1b
4183: PPUSH
4184: CALL_OW 337
// apeman_army := true ;
4188: LD_ADDR_EXP 9
4192: PUSH
4193: LD_INT 1
4195: ST_TO_ADDR
// end ;
4196: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4197: LD_INT 22
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 30
4209: PUSH
4210: LD_INT 3
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 57
4219: PUSH
4220: EMPTY
4221: LIST
4222: PUSH
4223: EMPTY
4224: LIST
4225: LIST
4226: LIST
4227: PPUSH
4228: CALL_OW 69
4232: IFFALSE 4244
4234: GO 4236
4236: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4237: LD_STRING M1c
4239: PPUSH
4240: CALL_OW 337
4244: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4245: LD_INT 6
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: CALL_OW 321
4255: PUSH
4256: LD_INT 2
4258: EQUAL
4259: IFFALSE 4279
4261: GO 4263
4263: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4264: LD_STRING M2a
4266: PPUSH
4267: CALL_OW 337
// radar_researched := true ;
4271: LD_ADDR_EXP 10
4275: PUSH
4276: LD_INT 1
4278: ST_TO_ADDR
// end ;
4279: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4280: LD_INT 22
4282: PUSH
4283: LD_INT 1
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: PUSH
4290: LD_INT 2
4292: PUSH
4293: LD_INT 34
4295: PUSH
4296: LD_INT 11
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: LD_INT 35
4305: PUSH
4306: LD_INT 11
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: PUSH
4318: EMPTY
4319: LIST
4320: LIST
4321: PPUSH
4322: CALL_OW 69
4326: IFFALSE 4346
4328: GO 4330
4330: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4331: LD_STRING M2b
4333: PPUSH
4334: CALL_OW 337
// radar_builded := true ;
4338: LD_ADDR_EXP 11
4342: PUSH
4343: LD_INT 1
4345: ST_TO_ADDR
// end ;
4346: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4347: LD_INT 22
4349: PUSH
4350: LD_INT 0
4352: PUSH
4353: EMPTY
4354: LIST
4355: LIST
4356: PUSH
4357: LD_INT 25
4359: PUSH
4360: LD_INT 12
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PPUSH
4371: CALL_OW 69
4375: PUSH
4376: LD_INT 0
4378: EQUAL
4379: PUSH
4380: LD_EXP 8
4384: NOT
4385: AND
4386: IFFALSE 4398
4388: GO 4390
4390: DISABLE
// YouLost ( Apeman ) ;
4391: LD_STRING Apeman
4393: PPUSH
4394: CALL_OW 104
4398: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
4399: LD_INT 22
4401: PUSH
4402: LD_INT 1
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: PUSH
4409: LD_INT 25
4411: PUSH
4412: LD_INT 16
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PPUSH
4423: CALL_OW 69
4427: PUSH
4428: LD_INT 7
4430: GREATEREQUAL
4431: IFFALSE 4529
4433: GO 4435
4435: DISABLE
4436: LD_INT 0
4438: PPUSH
4439: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
4440: LD_ADDR_VAR 0 2
4444: PUSH
4445: LD_INT 22
4447: PUSH
4448: LD_INT 1
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: PUSH
4455: LD_INT 21
4457: PUSH
4458: LD_INT 1
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: PUSH
4465: LD_INT 25
4467: PUSH
4468: LD_INT 4
4470: PUSH
4471: EMPTY
4472: LIST
4473: LIST
4474: PUSH
4475: EMPTY
4476: LIST
4477: LIST
4478: LIST
4479: PPUSH
4480: CALL_OW 69
4484: PUSH
4485: LD_EXP 16
4489: ADD
4490: ST_TO_ADDR
// if filter then
4491: LD_VAR 0 2
4495: IFFALSE 4529
// for i in filter do
4497: LD_ADDR_VAR 0 1
4501: PUSH
4502: LD_VAR 0 2
4506: PUSH
4507: FOR_IN
4508: IFFALSE 4527
// AddExperience ( i , 4 , 3500 ) ;
4510: LD_VAR 0 1
4514: PPUSH
4515: LD_INT 4
4517: PPUSH
4518: LD_INT 3500
4520: PPUSH
4521: CALL_OW 492
4525: GO 4507
4527: POP
4528: POP
// end ;
4529: PPOPN 2
4531: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
4532: LD_EXP 14
4536: IFFALSE 5670
4538: GO 4540
4540: DISABLE
4541: LD_INT 0
4543: PPUSH
4544: PPUSH
4545: PPUSH
4546: PPUSH
4547: PPUSH
// begin if apeKillCounter = 0 then
4548: LD_EXP 15
4552: PUSH
4553: LD_INT 0
4555: EQUAL
4556: IFFALSE 4565
// SetAchievement ( ACH_APEKILLER ) ;
4558: LD_STRING ACH_APEKILLER
4560: PPUSH
4561: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
4565: LD_INT 22
4567: PUSH
4568: LD_INT 2
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: PPUSH
4575: CALL_OW 69
4579: IFFALSE 4617
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
4581: LD_ADDR_VAR 0 1
4585: PUSH
4586: LD_INT 22
4588: PUSH
4589: LD_INT 2
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: PPUSH
4596: CALL_OW 69
4600: PUSH
4601: FOR_IN
4602: IFFALSE 4615
// RemoveUnit ( i ) ;
4604: LD_VAR 0 1
4608: PPUSH
4609: CALL_OW 64
4613: GO 4601
4615: POP
4616: POP
// m1 := false ;
4617: LD_ADDR_VAR 0 3
4621: PUSH
4622: LD_INT 0
4624: ST_TO_ADDR
// m2 := false ;
4625: LD_ADDR_VAR 0 4
4629: PUSH
4630: LD_INT 0
4632: ST_TO_ADDR
// m3 := false ;
4633: LD_ADDR_VAR 0 5
4637: PUSH
4638: LD_INT 0
4640: ST_TO_ADDR
// if apeman_army then
4641: LD_EXP 9
4645: IFFALSE 4667
// begin AddMedal ( Tame , 1 ) ;
4647: LD_STRING Tame
4649: PPUSH
4650: LD_INT 1
4652: PPUSH
4653: CALL_OW 101
// m1 := true ;
4657: LD_ADDR_VAR 0 3
4661: PUSH
4662: LD_INT 1
4664: ST_TO_ADDR
// end else
4665: GO 4678
// AddMedal ( Tame , - 1 ) ;
4667: LD_STRING Tame
4669: PPUSH
4670: LD_INT 1
4672: NEG
4673: PPUSH
4674: CALL_OW 101
// if radar_researched then
4678: LD_EXP 10
4682: IFFALSE 4714
// begin SaveVariable ( true , radarResInDelta ) ;
4684: LD_INT 1
4686: PPUSH
4687: LD_STRING radarResInDelta
4689: PPUSH
4690: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
4694: LD_STRING Radar
4696: PPUSH
4697: LD_INT 1
4699: PPUSH
4700: CALL_OW 101
// m2 := true ;
4704: LD_ADDR_VAR 0 4
4708: PUSH
4709: LD_INT 1
4711: ST_TO_ADDR
// end else
4712: GO 4744
// if radar_allowed then
4714: LD_EXP 7
4718: IFFALSE 4733
// AddMedal ( Radar , - 2 ) else
4720: LD_STRING Radar
4722: PPUSH
4723: LD_INT 2
4725: NEG
4726: PPUSH
4727: CALL_OW 101
4731: GO 4744
// AddMedal ( Radar , - 1 ) ;
4733: LD_STRING Radar
4735: PPUSH
4736: LD_INT 1
4738: NEG
4739: PPUSH
4740: CALL_OW 101
// if radar_builded then
4744: LD_EXP 11
4748: IFFALSE 4770
// begin AddMedal ( BuildRadar , 1 ) ;
4750: LD_STRING BuildRadar
4752: PPUSH
4753: LD_INT 1
4755: PPUSH
4756: CALL_OW 101
// m3 := true ;
4760: LD_ADDR_VAR 0 5
4764: PUSH
4765: LD_INT 1
4767: ST_TO_ADDR
// end else
4768: GO 4781
// AddMedal ( BuildRadar , - 1 ) ;
4770: LD_STRING BuildRadar
4772: PPUSH
4773: LD_INT 1
4775: NEG
4776: PPUSH
4777: CALL_OW 101
// if tick <= 7 7$00 then
4781: LD_OWVAR 1
4785: PUSH
4786: LD_INT 14700
4788: LESSEQUAL
4789: IFFALSE 4798
// SetAchievement ( ACH_ASPEED_5 ) ;
4791: LD_STRING ACH_ASPEED_5
4793: PPUSH
4794: CALL_OW 543
// if m1 and m2 and m3 and Difficulty = 3 then
4798: LD_VAR 0 3
4802: PUSH
4803: LD_VAR 0 4
4807: AND
4808: PUSH
4809: LD_VAR 0 5
4813: AND
4814: PUSH
4815: LD_OWVAR 67
4819: PUSH
4820: LD_INT 3
4822: EQUAL
4823: AND
4824: IFFALSE 4836
// SetAchievementEX ( ACH_AMER , 5 ) ;
4826: LD_STRING ACH_AMER
4828: PPUSH
4829: LD_INT 5
4831: PPUSH
4832: CALL_OW 564
// GiveMedals ( MAIN ) ;
4836: LD_STRING MAIN
4838: PPUSH
4839: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
4843: LD_ADDR_VAR 0 2
4847: PUSH
4848: LD_INT 22
4850: PUSH
4851: LD_INT 1
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: PUSH
4858: LD_INT 21
4860: PUSH
4861: LD_INT 1
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 2
4870: PUSH
4871: LD_INT 25
4873: PUSH
4874: LD_INT 1
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PUSH
4881: LD_INT 25
4883: PUSH
4884: LD_INT 2
4886: PUSH
4887: EMPTY
4888: LIST
4889: LIST
4890: PUSH
4891: LD_INT 25
4893: PUSH
4894: LD_INT 3
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: PUSH
4901: LD_INT 25
4903: PUSH
4904: LD_INT 4
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: LIST
4922: PPUSH
4923: CALL_OW 69
4927: ST_TO_ADDR
// RewardPeople ( tmp ) ;
4928: LD_VAR 0 2
4932: PPUSH
4933: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
4937: LD_EXP 16
4941: PPUSH
4942: LD_EXP 2
4946: PUSH
4947: LD_STRING JMM
4949: STR
4950: PPUSH
4951: CALL_OW 38
// if IsOk ( Gladstone ) then
4955: LD_EXP 17
4959: PPUSH
4960: CALL_OW 302
4964: IFFALSE 4984
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4966: LD_EXP 17
4970: PPUSH
4971: LD_EXP 2
4975: PUSH
4976: LD_STRING Gladstone
4978: STR
4979: PPUSH
4980: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
4984: LD_EXP 19
4988: PPUSH
4989: CALL_OW 302
4993: PUSH
4994: LD_EXP 19
4998: PPUSH
4999: CALL_OW 255
5003: PUSH
5004: LD_INT 1
5006: EQUAL
5007: AND
5008: IFFALSE 5038
// begin SaveCharacters ( Denis , mission_prefix & Denis ) ;
5010: LD_EXP 19
5014: PPUSH
5015: LD_EXP 2
5019: PUSH
5020: LD_STRING Denis
5022: STR
5023: PPUSH
5024: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5028: LD_INT 1
5030: PPUSH
5031: LD_STRING DenisInDelta
5033: PPUSH
5034: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5038: LD_EXP 22
5042: PPUSH
5043: CALL_OW 302
5047: IFFALSE 5067
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5049: LD_EXP 22
5053: PPUSH
5054: LD_EXP 2
5058: PUSH
5059: LD_STRING Lisa
5061: STR
5062: PPUSH
5063: CALL_OW 38
// end ; if IsOk ( Frank ) then
5067: LD_EXP 23
5071: PPUSH
5072: CALL_OW 302
5076: IFFALSE 5096
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5078: LD_EXP 23
5082: PPUSH
5083: LD_EXP 2
5087: PUSH
5088: LD_STRING Frank
5090: STR
5091: PPUSH
5092: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5096: LD_EXP 24
5100: PPUSH
5101: CALL_OW 302
5105: IFFALSE 5125
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5107: LD_EXP 24
5111: PPUSH
5112: LD_EXP 2
5116: PUSH
5117: LD_STRING Bobby
5119: STR
5120: PPUSH
5121: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5125: LD_EXP 25
5129: PPUSH
5130: CALL_OW 302
5134: IFFALSE 5154
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5136: LD_EXP 25
5140: PPUSH
5141: LD_EXP 2
5145: PUSH
5146: LD_STRING Cyrus
5148: STR
5149: PPUSH
5150: CALL_OW 38
// end ; if IsOk ( Brown ) then
5154: LD_EXP 20
5158: PPUSH
5159: CALL_OW 302
5163: IFFALSE 5183
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5165: LD_EXP 20
5169: PPUSH
5170: LD_EXP 2
5174: PUSH
5175: LD_STRING Brown
5177: STR
5178: PPUSH
5179: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5183: LD_EXP 21
5187: PPUSH
5188: CALL_OW 302
5192: IFFALSE 5212
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5194: LD_EXP 21
5198: PPUSH
5199: LD_EXP 2
5203: PUSH
5204: LD_STRING Donaldson
5206: STR
5207: PPUSH
5208: CALL_OW 38
// end ; if others then
5212: LD_EXP 26
5216: IFFALSE 5230
// SaveCharacters ( others , othersInDelta ) ;
5218: LD_EXP 26
5222: PPUSH
5223: LD_STRING othersInDelta
5225: PPUSH
5226: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5230: LD_INT 22
5232: PUSH
5233: LD_INT 1
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: PUSH
5240: LD_INT 25
5242: PUSH
5243: LD_INT 16
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PUSH
5250: EMPTY
5251: LIST
5252: LIST
5253: PPUSH
5254: CALL_OW 69
5258: IFFALSE 5296
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) , apeInDelta ) ;
5260: LD_INT 22
5262: PUSH
5263: LD_INT 1
5265: PUSH
5266: EMPTY
5267: LIST
5268: LIST
5269: PUSH
5270: LD_INT 25
5272: PUSH
5273: LD_INT 16
5275: PUSH
5276: EMPTY
5277: LIST
5278: LIST
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: PPUSH
5284: CALL_OW 69
5288: PPUSH
5289: LD_STRING apeInDelta
5291: PPUSH
5292: CALL_OW 38
// tmp := [ ] ;
5296: LD_ADDR_VAR 0 2
5300: PUSH
5301: EMPTY
5302: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5303: LD_INT 22
5305: PUSH
5306: LD_INT 1
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: PUSH
5313: LD_INT 21
5315: PUSH
5316: LD_INT 2
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PUSH
5323: EMPTY
5324: LIST
5325: LIST
5326: PPUSH
5327: CALL_OW 69
5331: IFFALSE 5442
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
5333: LD_ADDR_VAR 0 1
5337: PUSH
5338: LD_INT 22
5340: PUSH
5341: LD_INT 1
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: PUSH
5348: LD_INT 21
5350: PUSH
5351: LD_INT 2
5353: PUSH
5354: EMPTY
5355: LIST
5356: LIST
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: PPUSH
5362: CALL_OW 69
5366: PUSH
5367: FOR_IN
5368: IFFALSE 5440
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
5370: LD_ADDR_VAR 0 2
5374: PUSH
5375: LD_VAR 0 2
5379: PUSH
5380: LD_VAR 0 1
5384: PPUSH
5385: CALL_OW 248
5389: PUSH
5390: LD_VAR 0 1
5394: PPUSH
5395: CALL_OW 265
5399: PUSH
5400: LD_VAR 0 1
5404: PPUSH
5405: CALL_OW 262
5409: PUSH
5410: LD_VAR 0 1
5414: PPUSH
5415: CALL_OW 263
5419: PUSH
5420: LD_VAR 0 1
5424: PPUSH
5425: CALL_OW 264
5429: PUSH
5430: EMPTY
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: ADD
5437: ST_TO_ADDR
5438: GO 5367
5440: POP
5441: POP
// if tmp then
5442: LD_VAR 0 2
5446: IFFALSE 5460
// SaveVariable ( tmp , vehiclesInDelta ) ;
5448: LD_VAR 0 2
5452: PPUSH
5453: LD_STRING vehiclesInDelta
5455: PPUSH
5456: CALL_OW 39
// tmp := [ ] ;
5460: LD_ADDR_VAR 0 2
5464: PUSH
5465: EMPTY
5466: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
5467: LD_INT 22
5469: PUSH
5470: LD_INT 1
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PUSH
5477: LD_INT 21
5479: PUSH
5480: LD_INT 3
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: PPUSH
5491: CALL_OW 69
5495: IFFALSE 5648
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
5497: LD_ADDR_VAR 0 1
5501: PUSH
5502: LD_INT 22
5504: PUSH
5505: LD_INT 1
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 21
5514: PUSH
5515: LD_INT 3
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: EMPTY
5523: LIST
5524: LIST
5525: PPUSH
5526: CALL_OW 69
5530: PUSH
5531: FOR_IN
5532: IFFALSE 5646
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
5534: LD_ADDR_VAR 0 2
5538: PUSH
5539: LD_VAR 0 2
5543: PUSH
5544: LD_VAR 0 1
5548: PPUSH
5549: CALL_OW 266
5553: PUSH
5554: LD_VAR 0 1
5558: PPUSH
5559: CALL_OW 267
5563: PUSH
5564: LD_VAR 0 1
5568: PPUSH
5569: CALL_OW 250
5573: PUSH
5574: LD_VAR 0 1
5578: PPUSH
5579: CALL_OW 251
5583: PUSH
5584: LD_VAR 0 1
5588: PPUSH
5589: CALL_OW 254
5593: PUSH
5594: LD_VAR 0 1
5598: PPUSH
5599: LD_INT 1
5601: PPUSH
5602: CALL_OW 268
5606: PUSH
5607: LD_VAR 0 1
5611: PPUSH
5612: LD_INT 2
5614: PPUSH
5615: CALL_OW 268
5619: PUSH
5620: LD_VAR 0 1
5624: PPUSH
5625: CALL_OW 269
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: PUSH
5640: EMPTY
5641: LIST
5642: ADD
5643: ST_TO_ADDR
5644: GO 5531
5646: POP
5647: POP
// if tmp then
5648: LD_VAR 0 2
5652: IFFALSE 5666
// SaveVariable ( tmp , buildingsInDelta ) ;
5654: LD_VAR 0 2
5658: PPUSH
5659: LD_STRING buildingsInDelta
5661: PPUSH
5662: CALL_OW 39
// YouWin ;
5666: CALL_OW 103
// end ; end_of_file
5670: PPOPN 5
5672: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
5673: LD_INT 0
5675: PPUSH
5676: PPUSH
5677: PPUSH
5678: PPUSH
// InitHc ;
5679: CALL_OW 19
// InitUc ;
5683: CALL_OW 18
// uc_side := 2 ;
5687: LD_ADDR_OWVAR 20
5691: PUSH
5692: LD_INT 2
5694: ST_TO_ADDR
// uc_nation := 2 ;
5695: LD_ADDR_OWVAR 21
5699: PUSH
5700: LD_INT 2
5702: ST_TO_ADDR
// if not amount then
5703: LD_VAR 0 1
5707: NOT
5708: IFFALSE 5712
// exit ;
5710: GO 5835
// for i = 1 to amount do
5712: LD_ADDR_VAR 0 5
5716: PUSH
5717: DOUBLE
5718: LD_INT 1
5720: DEC
5721: ST_TO_ADDR
5722: LD_VAR 0 1
5726: PUSH
5727: FOR_TO
5728: IFFALSE 5823
// begin PrepareHuman ( false , 1 , skill ) ;
5730: LD_INT 0
5732: PPUSH
5733: LD_INT 1
5735: PPUSH
5736: LD_VAR 0 2
5740: PPUSH
5741: CALL_OW 380
// un := CreateHuman ;
5745: LD_ADDR_VAR 0 6
5749: PUSH
5750: CALL_OW 44
5754: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
5755: LD_ADDR_VAR 0 7
5759: PUSH
5760: LD_VAR 0 7
5764: PPUSH
5765: LD_INT 1
5767: PPUSH
5768: LD_VAR 0 6
5772: PPUSH
5773: CALL_OW 2
5777: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
5778: LD_VAR 0 6
5782: PPUSH
5783: LD_VAR 0 3
5787: PPUSH
5788: LD_INT 0
5790: PPUSH
5791: CALL_OW 49
// if i mod 2 = 0 then
5795: LD_VAR 0 5
5799: PUSH
5800: LD_INT 2
5802: MOD
5803: PUSH
5804: LD_INT 0
5806: EQUAL
5807: IFFALSE 5821
// SetTag ( un , 11 ) ;
5809: LD_VAR 0 6
5813: PPUSH
5814: LD_INT 11
5816: PPUSH
5817: CALL_OW 109
// end ;
5821: GO 5727
5823: POP
5824: POP
// result := tmp ;
5825: LD_ADDR_VAR 0 4
5829: PUSH
5830: LD_VAR 0 7
5834: ST_TO_ADDR
// end ;
5835: LD_VAR 0 4
5839: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
5840: LD_EXP 6
5844: IFFALSE 6711
5846: GO 5848
5848: DISABLE
5849: LD_INT 0
5851: PPUSH
5852: PPUSH
5853: PPUSH
5854: PPUSH
5855: PPUSH
5856: PPUSH
5857: PPUSH
5858: PPUSH
// begin more_troops := false ;
5859: LD_ADDR_VAR 0 3
5863: PUSH
5864: LD_INT 0
5866: ST_TO_ADDR
// skill := [ 3 , 4 , 5 ] [ Difficulty ] ;
5867: LD_ADDR_VAR 0 4
5871: PUSH
5872: LD_INT 3
5874: PUSH
5875: LD_INT 4
5877: PUSH
5878: LD_INT 5
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: LIST
5885: PUSH
5886: LD_OWVAR 67
5890: ARRAY
5891: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 ] [ Difficulty ] ;
5892: LD_ADDR_VAR 0 2
5896: PUSH
5897: LD_INT 10500
5899: PUSH
5900: LD_INT 8400
5902: PUSH
5903: LD_INT 6300
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: LIST
5910: PUSH
5911: LD_OWVAR 67
5915: ARRAY
5916: ST_TO_ADDR
// force := [ ] ;
5917: LD_ADDR_VAR 0 8
5921: PUSH
5922: EMPTY
5923: ST_TO_ADDR
// ar_forces := [ ] ;
5924: LD_ADDR_EXP 27
5928: PUSH
5929: EMPTY
5930: ST_TO_ADDR
// ap_killers := [ ] ;
5931: LD_ADDR_EXP 28
5935: PUSH
5936: EMPTY
5937: ST_TO_ADDR
// Wait ( timer ) ;
5938: LD_VAR 0 2
5942: PPUSH
5943: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
5947: LD_EXP 19
5951: PUSH
5952: LD_EXP 19
5956: PPUSH
5957: CALL_OW 255
5961: PUSH
5962: LD_INT 4
5964: EQUAL
5965: AND
5966: IFFALSE 5975
// Wait ( 0 0$45 ) ;
5968: LD_INT 1575
5970: PPUSH
5971: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
5975: LD_INT 22
5977: PUSH
5978: LD_INT 1
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: PUSH
5985: LD_INT 30
5987: PUSH
5988: LD_INT 4
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: EMPTY
5996: LIST
5997: LIST
5998: PPUSH
5999: CALL_OW 69
6003: IFFALSE 6020
// begin Wait ( 1 1$25 ) ;
6005: LD_INT 2975
6007: PPUSH
6008: CALL_OW 67
// more_troops := true ;
6012: LD_ADDR_VAR 0 3
6016: PUSH
6017: LD_INT 1
6019: ST_TO_ADDR
// end ; if more_troops then
6020: LD_VAR 0 3
6024: IFFALSE 6212
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6026: LD_ADDR_VAR 0 8
6030: PUSH
6031: LD_INT 4
6033: PUSH
6034: LD_INT 5
6036: PUSH
6037: LD_INT 6
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: LIST
6044: PUSH
6045: LD_OWVAR 67
6049: ARRAY
6050: PPUSH
6051: LD_VAR 0 4
6055: PPUSH
6056: LD_INT 14
6058: PPUSH
6059: CALL 5673 0 3
6063: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun ] [ Difficulty ] , 90 ) ;
6064: LD_ADDR_VAR 0 7
6068: PUSH
6069: LD_INT 2
6071: PPUSH
6072: LD_INT 3
6074: PPUSH
6075: LD_INT 22
6077: PPUSH
6078: LD_INT 1
6080: PPUSH
6081: LD_INT 1
6083: PPUSH
6084: LD_INT 42
6086: PUSH
6087: LD_INT 42
6089: PUSH
6090: LD_INT 43
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: PUSH
6098: LD_OWVAR 67
6102: ARRAY
6103: PPUSH
6104: LD_INT 90
6106: PPUSH
6107: CALL 427 0 7
6111: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6112: LD_VAR 0 7
6116: PPUSH
6117: LD_INT 4
6119: PPUSH
6120: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6124: LD_VAR 0 7
6128: PPUSH
6129: LD_INT 13
6131: PPUSH
6132: LD_INT 0
6134: PPUSH
6135: CALL_OW 49
// uc_side := 2 ;
6139: LD_ADDR_OWVAR 20
6143: PUSH
6144: LD_INT 2
6146: ST_TO_ADDR
// uc_nation := 2 ;
6147: LD_ADDR_OWVAR 21
6151: PUSH
6152: LD_INT 2
6154: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6155: LD_INT 0
6157: PPUSH
6158: LD_INT 1
6160: PPUSH
6161: LD_VAR 0 4
6165: PPUSH
6166: CALL_OW 380
// un := CreateHuman ;
6170: LD_ADDR_VAR 0 6
6174: PUSH
6175: CALL_OW 44
6179: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6180: LD_VAR 0 6
6184: PPUSH
6185: LD_VAR 0 7
6189: PPUSH
6190: CALL_OW 52
// force := force ^ un ;
6194: LD_ADDR_VAR 0 8
6198: PUSH
6199: LD_VAR 0 8
6203: PUSH
6204: LD_VAR 0 6
6208: ADD
6209: ST_TO_ADDR
// end else
6210: GO 6250
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 ] [ Difficulty ] , skill , arArea2 ) ;
6212: LD_ADDR_VAR 0 8
6216: PUSH
6217: LD_INT 3
6219: PUSH
6220: LD_INT 4
6222: PUSH
6223: LD_INT 5
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: LIST
6230: PUSH
6231: LD_OWVAR 67
6235: ARRAY
6236: PPUSH
6237: LD_VAR 0 4
6241: PPUSH
6242: LD_INT 14
6244: PPUSH
6245: CALL 5673 0 3
6249: ST_TO_ADDR
// end ; if force then
6250: LD_VAR 0 8
6254: IFFALSE 6266
// ar_forces := force ;
6256: LD_ADDR_EXP 27
6260: PUSH
6261: LD_VAR 0 8
6265: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6266: LD_INT 35
6268: PPUSH
6269: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6273: LD_INT 22
6275: PUSH
6276: LD_INT 2
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: LD_INT 21
6285: PUSH
6286: LD_INT 1
6288: PUSH
6289: EMPTY
6290: LIST
6291: LIST
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PPUSH
6297: CALL_OW 69
6301: PUSH
6302: LD_INT 0
6304: EQUAL
6305: IFFALSE 6266
// Wait ( timer ) ;
6307: LD_VAR 0 2
6311: PPUSH
6312: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
6316: LD_ADDR_VAR 0 8
6320: PUSH
6321: LD_INT 4
6323: PUSH
6324: LD_INT 5
6326: PUSH
6327: LD_INT 6
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: LIST
6334: PUSH
6335: LD_OWVAR 67
6339: ARRAY
6340: PPUSH
6341: LD_VAR 0 4
6345: PPUSH
6346: LD_INT 13
6348: PUSH
6349: LD_INT 14
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: LD_INT 1
6358: PPUSH
6359: LD_INT 2
6361: PPUSH
6362: CALL_OW 12
6366: ARRAY
6367: PPUSH
6368: CALL 5673 0 3
6372: ST_TO_ADDR
// if Difficulty > 1 and Delta then
6373: LD_OWVAR 67
6377: PUSH
6378: LD_INT 1
6380: GREATER
6381: PUSH
6382: LD_EXP 6
6386: AND
6387: IFFALSE 6466
// begin uc_side := 2 ;
6389: LD_ADDR_OWVAR 20
6393: PUSH
6394: LD_INT 2
6396: ST_TO_ADDR
// uc_nation := 2 ;
6397: LD_ADDR_OWVAR 21
6401: PUSH
6402: LD_INT 2
6404: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
6405: LD_INT 0
6407: PPUSH
6408: LD_INT 2
6410: PPUSH
6411: LD_VAR 0 4
6415: PPUSH
6416: CALL_OW 380
// eng := CreateHuman ;
6420: LD_ADDR_VAR 0 5
6424: PUSH
6425: CALL_OW 44
6429: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
6430: LD_VAR 0 5
6434: PPUSH
6435: LD_INT 13
6437: PPUSH
6438: LD_INT 0
6440: PPUSH
6441: CALL_OW 49
// Wait ( 3 ) ;
6445: LD_INT 3
6447: PPUSH
6448: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
6452: LD_VAR 0 5
6456: PPUSH
6457: LD_EXP 6
6461: PPUSH
6462: CALL_OW 180
// end ; if force then
6466: LD_VAR 0 8
6470: IFFALSE 6482
// ar_forces := force ;
6472: LD_ADDR_EXP 27
6476: PUSH
6477: LD_VAR 0 8
6481: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6482: LD_INT 35
6484: PPUSH
6485: CALL_OW 67
// if eng then
6489: LD_VAR 0 5
6493: IFFALSE 6547
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
6495: LD_EXP 6
6499: PPUSH
6500: CALL_OW 255
6504: PUSH
6505: LD_INT 2
6507: EQUAL
6508: PUSH
6509: LD_VAR 0 5
6513: PPUSH
6514: CALL_OW 302
6518: AND
6519: PUSH
6520: LD_VAR 0 5
6524: PPUSH
6525: CALL_OW 310
6529: NOT
6530: AND
6531: IFFALSE 6547
// ComEnterUnit ( eng , Delta ) ;
6533: LD_VAR 0 5
6537: PPUSH
6538: LD_EXP 6
6542: PPUSH
6543: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6547: LD_INT 22
6549: PUSH
6550: LD_INT 2
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: LD_INT 21
6559: PUSH
6560: LD_INT 1
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PPUSH
6571: CALL_OW 69
6575: PUSH
6576: LD_INT 0
6578: EQUAL
6579: IFFALSE 6482
// Wait ( 2 2$00 ) ;
6581: LD_INT 4200
6583: PPUSH
6584: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
6588: LD_ADDR_EXP 28
6592: PUSH
6593: LD_INT 1
6595: PUSH
6596: LD_INT 2
6598: PUSH
6599: LD_INT 2
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: LIST
6606: PUSH
6607: LD_OWVAR 67
6611: ARRAY
6612: PPUSH
6613: LD_VAR 0 4
6617: PPUSH
6618: LD_INT 13
6620: PPUSH
6621: CALL 5673 0 3
6625: ST_TO_ADDR
// Wait ( timer * 2 ) ;
6626: LD_VAR 0 2
6630: PUSH
6631: LD_INT 2
6633: MUL
6634: PPUSH
6635: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
6639: LD_ADDR_EXP 27
6643: PUSH
6644: LD_INT 5
6646: PUSH
6647: LD_INT 6
6649: PUSH
6650: LD_INT 7
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: PUSH
6658: LD_OWVAR 67
6662: ARRAY
6663: PPUSH
6664: LD_VAR 0 4
6668: PPUSH
6669: LD_INT 13
6671: PPUSH
6672: CALL 5673 0 3
6676: PUSH
6677: LD_INT 3
6679: PUSH
6680: LD_INT 4
6682: PUSH
6683: LD_INT 4
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: PUSH
6691: LD_OWVAR 67
6695: ARRAY
6696: PPUSH
6697: LD_VAR 0 4
6701: PPUSH
6702: LD_INT 14
6704: PPUSH
6705: CALL 5673 0 3
6709: ADD
6710: ST_TO_ADDR
// end ;
6711: PPOPN 8
6713: END
// every 0 0$03 trigger ar_forces do var i , target ;
6714: LD_EXP 27
6718: IFFALSE 6916
6720: GO 6722
6722: DISABLE
6723: LD_INT 0
6725: PPUSH
6726: PPUSH
// begin enable ;
6727: ENABLE
// if not ar_forces then
6728: LD_EXP 27
6732: NOT
6733: IFFALSE 6737
// exit ;
6735: GO 6916
// if Delta then
6737: LD_EXP 6
6741: IFFALSE 6755
// target := Delta else
6743: LD_ADDR_VAR 0 2
6747: PUSH
6748: LD_EXP 6
6752: ST_TO_ADDR
6753: GO 6765
// target := JMM ;
6755: LD_ADDR_VAR 0 2
6759: PUSH
6760: LD_EXP 16
6764: ST_TO_ADDR
// for i in ar_forces do
6765: LD_ADDR_VAR 0 1
6769: PUSH
6770: LD_EXP 27
6774: PUSH
6775: FOR_IN
6776: IFFALSE 6914
// begin if i in FilterAllUnits ( [ f_driving ] ) then
6778: LD_VAR 0 1
6782: PUSH
6783: LD_INT 55
6785: PUSH
6786: EMPTY
6787: LIST
6788: PPUSH
6789: CALL_OW 69
6793: IN
6794: IFFALSE 6837
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
6796: LD_VAR 0 1
6800: PPUSH
6801: LD_INT 22
6803: PUSH
6804: LD_INT 1
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: PPUSH
6811: CALL_OW 69
6815: PPUSH
6816: LD_VAR 0 1
6820: PPUSH
6821: CALL_OW 310
6825: PPUSH
6826: CALL_OW 74
6830: PPUSH
6831: CALL_OW 115
6835: GO 6912
// if GetDistUnits ( i , target ) > 30 then
6837: LD_VAR 0 1
6841: PPUSH
6842: LD_VAR 0 2
6846: PPUSH
6847: CALL_OW 296
6851: PUSH
6852: LD_INT 30
6854: GREATER
6855: IFFALSE 6888
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_VAR 0 2
6866: PPUSH
6867: CALL_OW 250
6871: PPUSH
6872: LD_VAR 0 2
6876: PPUSH
6877: CALL_OW 251
6881: PPUSH
6882: CALL_OW 114
6886: GO 6912
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
6888: LD_VAR 0 1
6892: PPUSH
6893: LD_INT 81
6895: PUSH
6896: LD_INT 2
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PPUSH
6903: CALL_OW 69
6907: PPUSH
6908: CALL 732 0 2
// end ;
6912: GO 6775
6914: POP
6915: POP
// end ;
6916: PPOPN 2
6918: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
6919: LD_EXP 28
6923: IFFALSE 7083
6925: GO 6927
6927: DISABLE
6928: LD_INT 0
6930: PPUSH
6931: PPUSH
6932: PPUSH
// begin enable ;
6933: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
6934: LD_ADDR_VAR 0 1
6938: PUSH
6939: LD_INT 22
6941: PUSH
6942: LD_INT 0
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 25
6951: PUSH
6952: LD_INT 12
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PPUSH
6963: CALL_OW 69
6967: ST_TO_ADDR
// if not filter then
6968: LD_VAR 0 1
6972: NOT
6973: IFFALSE 7000
// begin ar_forces := ar_forces ^ ap_killers ;
6975: LD_ADDR_EXP 27
6979: PUSH
6980: LD_EXP 27
6984: PUSH
6985: LD_EXP 28
6989: ADD
6990: ST_TO_ADDR
// ap_killers := [ ] ;
6991: LD_ADDR_EXP 28
6995: PUSH
6996: EMPTY
6997: ST_TO_ADDR
// exit ;
6998: GO 7083
// end ; for i in ap_killers do
7000: LD_ADDR_VAR 0 2
7004: PUSH
7005: LD_EXP 28
7009: PUSH
7010: FOR_IN
7011: IFFALSE 7081
// begin if not IsOk ( i ) then
7013: LD_VAR 0 2
7017: PPUSH
7018: CALL_OW 302
7022: NOT
7023: IFFALSE 7027
// continue ;
7025: GO 7010
// if not HasTask ( i ) then
7027: LD_VAR 0 2
7031: PPUSH
7032: CALL_OW 314
7036: NOT
7037: IFFALSE 7059
// target := NearestUnitToUnit ( filter , i ) ;
7039: LD_ADDR_VAR 0 3
7043: PUSH
7044: LD_VAR 0 1
7048: PPUSH
7049: LD_VAR 0 2
7053: PPUSH
7054: CALL_OW 74
7058: ST_TO_ADDR
// if target then
7059: LD_VAR 0 3
7063: IFFALSE 7079
// ComAttackUnit ( i , target ) ;
7065: LD_VAR 0 2
7069: PPUSH
7070: LD_VAR 0 3
7074: PPUSH
7075: CALL_OW 115
// end ;
7079: GO 7010
7081: POP
7082: POP
// end ; end_of_file
7083: PPOPN 3
7085: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7086: LD_EXP 6
7090: IFFALSE 7222
7092: GO 7094
7094: DISABLE
7095: LD_INT 0
7097: PPUSH
7098: PPUSH
7099: PPUSH
// begin counter := [ 300 , 250 , 220 ] [ Difficulty ] ;
7100: LD_ADDR_VAR 0 2
7104: PUSH
7105: LD_INT 300
7107: PUSH
7108: LD_INT 250
7110: PUSH
7111: LD_INT 220
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: LIST
7118: PUSH
7119: LD_OWVAR 67
7123: ARRAY
7124: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
7125: LD_INT 1
7127: PPUSH
7128: LD_INT 3
7130: PPUSH
7131: CALL_OW 12
7135: PPUSH
7136: LD_INT 7
7138: PPUSH
7139: LD_INT 1
7141: PPUSH
7142: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
7146: LD_INT 3150
7148: PPUSH
7149: LD_INT 4900
7151: PPUSH
7152: CALL_OW 12
7156: PPUSH
7157: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
7161: LD_ADDR_VAR 0 3
7165: PUSH
7166: LD_INT 1
7168: PPUSH
7169: LD_INT 5
7171: PPUSH
7172: CALL_OW 12
7176: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
7177: LD_VAR 0 3
7181: PPUSH
7182: LD_INT 7
7184: PPUSH
7185: LD_INT 1
7187: PPUSH
7188: CALL_OW 55
// counter := counter - cr * 10 ;
7192: LD_ADDR_VAR 0 2
7196: PUSH
7197: LD_VAR 0 2
7201: PUSH
7202: LD_VAR 0 3
7206: PUSH
7207: LD_INT 10
7209: MUL
7210: MINUS
7211: ST_TO_ADDR
// until counter <= 0 ;
7212: LD_VAR 0 2
7216: PUSH
7217: LD_INT 0
7219: LESSEQUAL
7220: IFFALSE 7146
// end ;
7222: PPOPN 3
7224: END
// every 0 0$03 trigger not Delta do var i ;
7225: LD_EXP 6
7229: NOT
7230: IFFALSE 7300
7232: GO 7234
7234: DISABLE
7235: LD_INT 0
7237: PPUSH
// begin for i = 1 to 4 - Difficulty do
7238: LD_ADDR_VAR 0 1
7242: PUSH
7243: DOUBLE
7244: LD_INT 1
7246: DEC
7247: ST_TO_ADDR
7248: LD_INT 4
7250: PUSH
7251: LD_OWVAR 67
7255: MINUS
7256: PUSH
7257: FOR_TO
7258: IFFALSE 7298
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
7260: LD_INT 2
7262: PPUSH
7263: LD_INT 5
7265: PPUSH
7266: CALL_OW 12
7270: PPUSH
7271: LD_INT 8
7273: PPUSH
7274: LD_INT 1
7276: PPUSH
7277: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
7281: LD_INT 560
7283: PPUSH
7284: LD_INT 1365
7286: PPUSH
7287: CALL_OW 12
7291: PPUSH
7292: CALL_OW 67
// end ;
7296: GO 7257
7298: POP
7299: POP
// end ;
7300: PPOPN 1
7302: END
// every 3 3$00 trigger tick < 15 15$00 do
7303: LD_OWVAR 1
7307: PUSH
7308: LD_INT 31500
7310: LESS
7311: IFFALSE 7371
7313: GO 7315
7315: DISABLE
// begin enable ;
7316: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
7317: LD_INT 1
7319: PPUSH
7320: LD_INT 3
7322: PPUSH
7323: CALL_OW 12
7327: PPUSH
7328: LD_INT 1
7330: PPUSH
7331: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
7335: LD_INT 1330
7337: PPUSH
7338: LD_INT 2065
7340: PPUSH
7341: CALL_OW 12
7345: PPUSH
7346: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
7350: LD_INT 1
7352: PPUSH
7353: LD_INT 4
7355: PPUSH
7356: CALL_OW 12
7360: PPUSH
7361: LD_INT 15
7363: PPUSH
7364: LD_INT 1
7366: PPUSH
7367: CALL_OW 55
// end ; end_of_file
7371: END
// on UnitDestroyed ( un ) do begin if un = JMM then
7372: LD_VAR 0 1
7376: PUSH
7377: LD_EXP 16
7381: EQUAL
7382: IFFALSE 7391
// YouLost ( JMM ) ;
7384: LD_STRING JMM
7386: PPUSH
7387: CALL_OW 104
// if un = Delta then
7391: LD_VAR 0 1
7395: PUSH
7396: LD_EXP 6
7400: EQUAL
7401: IFFALSE 7424
// begin Delta := 0 ;
7403: LD_ADDR_EXP 6
7407: PUSH
7408: LD_INT 0
7410: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
7411: LD_INT 0
7413: PPUSH
7414: LD_INT 1
7416: PPUSH
7417: LD_INT 1
7419: PPUSH
7420: CALL_OW 324
// end ; if un in ar_forces then
7424: LD_VAR 0 1
7428: PUSH
7429: LD_EXP 27
7433: IN
7434: IFFALSE 7452
// ar_forces := ar_forces diff un ;
7436: LD_ADDR_EXP 27
7440: PUSH
7441: LD_EXP 27
7445: PUSH
7446: LD_VAR 0 1
7450: DIFF
7451: ST_TO_ADDR
// if un in ap_killers then
7452: LD_VAR 0 1
7456: PUSH
7457: LD_EXP 28
7461: IN
7462: IFFALSE 7480
// ap_killers := ap_killers diff un ;
7464: LD_ADDR_EXP 28
7468: PUSH
7469: LD_EXP 28
7473: PUSH
7474: LD_VAR 0 1
7478: DIFF
7479: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
7480: LD_VAR 0 1
7484: PUSH
7485: LD_INT 2
7487: PUSH
7488: LD_INT 25
7490: PUSH
7491: LD_INT 12
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PUSH
7498: LD_INT 25
7500: PUSH
7501: LD_INT 16
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: LIST
7512: PPUSH
7513: CALL_OW 69
7517: IN
7518: IFFALSE 7534
// apeKillCounter := apeKillCounter + 1 ;
7520: LD_ADDR_EXP 15
7524: PUSH
7525: LD_EXP 15
7529: PUSH
7530: LD_INT 1
7532: PLUS
7533: ST_TO_ADDR
// end ;
7534: PPOPN 1
7536: END
// on Contact ( s1 , s2 ) do if s1 = 1 and s2 = 2 and not arab_spotted then
7537: LD_VAR 0 1
7541: PUSH
7542: LD_INT 1
7544: EQUAL
7545: PUSH
7546: LD_VAR 0 2
7550: PUSH
7551: LD_INT 2
7553: EQUAL
7554: AND
7555: PUSH
7556: LD_EXP 13
7560: NOT
7561: AND
7562: IFFALSE 7572
// arab_spotted := true ;
7564: LD_ADDR_EXP 13
7568: PUSH
7569: LD_INT 1
7571: ST_TO_ADDR
7572: PPOPN 2
7574: END
// on EndTheMissionRaised ( p ) do begin end_the_mission_allowed := false ;
7575: LD_ADDR_OWVAR 57
7579: PUSH
7580: LD_INT 0
7582: ST_TO_ADDR
// end_mission := true ;
7583: LD_ADDR_EXP 14
7587: PUSH
7588: LD_INT 1
7590: ST_TO_ADDR
// end ;
7591: PPOPN 1
7593: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
7594: LD_VAR 0 2
7598: PPUSH
7599: CALL_OW 255
7603: PUSH
7604: LD_INT 1
7606: EQUAL
7607: IFFALSE 7623
// apeman_counter := apeman_counter + 1 ;
7609: LD_ADDR_EXP 12
7613: PUSH
7614: LD_EXP 12
7618: PUSH
7619: LD_INT 1
7621: PLUS
7622: ST_TO_ADDR
// if not first_apeman_tamed then
7623: LD_EXP 8
7627: NOT
7628: IFFALSE 7828
// begin first_apeman_tamed := true ;
7630: LD_ADDR_EXP 8
7634: PUSH
7635: LD_INT 1
7637: ST_TO_ADDR
// if sci = Gladstone then
7638: LD_VAR 0 2
7642: PUSH
7643: LD_EXP 17
7647: EQUAL
7648: IFFALSE 7662
// Say ( Gladstone , D7b-Glad-1 ) ;
7650: LD_EXP 17
7654: PPUSH
7655: LD_STRING D7b-Glad-1
7657: PPUSH
7658: CALL_OW 88
// if sci = Denis then
7662: LD_VAR 0 2
7666: PUSH
7667: LD_EXP 19
7671: EQUAL
7672: IFFALSE 7686
// Say ( Denis , D7a-Den-1 ) ;
7674: LD_EXP 19
7678: PPUSH
7679: LD_STRING D7a-Den-1
7681: PPUSH
7682: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
7686: LD_VAR 0 2
7690: PUSH
7691: LD_EXP 16
7695: PUSH
7696: LD_EXP 17
7700: PUSH
7701: LD_EXP 19
7705: PUSH
7706: LD_EXP 22
7710: PUSH
7711: LD_EXP 23
7715: PUSH
7716: LD_EXP 24
7720: PUSH
7721: LD_EXP 25
7725: PUSH
7726: LD_EXP 21
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: LIST
7740: IN
7741: NOT
7742: IFFALSE 7785
// begin if GetSex ( sci ) = sex_male then
7744: LD_VAR 0 2
7748: PPUSH
7749: CALL_OW 258
7753: PUSH
7754: LD_INT 1
7756: EQUAL
7757: IFFALSE 7773
// Say ( sci , D7c-Sci1-1 ) else
7759: LD_VAR 0 2
7763: PPUSH
7764: LD_STRING D7c-Sci1-1
7766: PPUSH
7767: CALL_OW 88
7771: GO 7785
// Say ( sci , D7c-FSci1-1 ) ;
7773: LD_VAR 0 2
7777: PPUSH
7778: LD_STRING D7c-FSci1-1
7780: PPUSH
7781: CALL_OW 88
// end ; if not sci = Gladstone then
7785: LD_VAR 0 2
7789: PUSH
7790: LD_EXP 17
7794: EQUAL
7795: NOT
7796: IFFALSE 7810
// Say ( Gladstone , D7c-Glad-1 ) ;
7798: LD_EXP 17
7802: PPUSH
7803: LD_STRING D7c-Glad-1
7805: PPUSH
7806: CALL_OW 88
// if Lisa then
7810: LD_EXP 22
7814: IFFALSE 7828
// Say ( Lisa , D8-Lisa-1 ) ;
7816: LD_EXP 22
7820: PPUSH
7821: LD_STRING D8-Lisa-1
7823: PPUSH
7824: CALL_OW 88
// end ; end ; end_of_file
7828: PPOPN 2
7830: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
7831: LD_INT 0
7833: PPUSH
// ru_radar := 98 ;
7834: LD_ADDR_EXP 29
7838: PUSH
7839: LD_INT 98
7841: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7842: LD_ADDR_EXP 30
7846: PUSH
7847: LD_INT 89
7849: ST_TO_ADDR
// us_hack := 99 ;
7850: LD_ADDR_EXP 31
7854: PUSH
7855: LD_INT 99
7857: ST_TO_ADDR
// us_artillery := 97 ;
7858: LD_ADDR_EXP 32
7862: PUSH
7863: LD_INT 97
7865: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7866: LD_ADDR_EXP 33
7870: PUSH
7871: LD_INT 91
7873: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
7874: LD_ADDR_EXP 34
7878: PUSH
7879: LD_INT 92
7881: ST_TO_ADDR
// tech_Artillery := 80 ;
7882: LD_ADDR_EXP 35
7886: PUSH
7887: LD_INT 80
7889: ST_TO_ADDR
// tech_RadMat := 81 ;
7890: LD_ADDR_EXP 36
7894: PUSH
7895: LD_INT 81
7897: ST_TO_ADDR
// tech_BasicTools := 82 ;
7898: LD_ADDR_EXP 37
7902: PUSH
7903: LD_INT 82
7905: ST_TO_ADDR
// tech_Cargo := 83 ;
7906: LD_ADDR_EXP 38
7910: PUSH
7911: LD_INT 83
7913: ST_TO_ADDR
// tech_Track := 84 ;
7914: LD_ADDR_EXP 39
7918: PUSH
7919: LD_INT 84
7921: ST_TO_ADDR
// tech_Crane := 85 ;
7922: LD_ADDR_EXP 40
7926: PUSH
7927: LD_INT 85
7929: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7930: LD_ADDR_EXP 41
7934: PUSH
7935: LD_INT 86
7937: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7938: LD_ADDR_EXP 42
7942: PUSH
7943: LD_INT 87
7945: ST_TO_ADDR
// end ;
7946: LD_VAR 0 1
7950: RET
// every 1 do
7951: GO 7953
7953: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7954: CALL 7831 0 0
7958: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
7959: GO 7961
7961: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
7962: LD_STRING initStreamRollete();
7964: PPUSH
7965: CALL_OW 559
// InitStreamMode ;
7969: CALL 7978 0 0
// DefineStreamItems ( ) ;
7973: CALL 8418 0 0
// end ;
7977: END
// function InitStreamMode ; begin
7978: LD_INT 0
7980: PPUSH
// streamModeActive := false ;
7981: LD_ADDR_EXP 43
7985: PUSH
7986: LD_INT 0
7988: ST_TO_ADDR
// normalCounter := 36 ;
7989: LD_ADDR_EXP 44
7993: PUSH
7994: LD_INT 36
7996: ST_TO_ADDR
// hardcoreCounter := 16 ;
7997: LD_ADDR_EXP 45
8001: PUSH
8002: LD_INT 16
8004: ST_TO_ADDR
// sRocket := false ;
8005: LD_ADDR_EXP 48
8009: PUSH
8010: LD_INT 0
8012: ST_TO_ADDR
// sSpeed := false ;
8013: LD_ADDR_EXP 47
8017: PUSH
8018: LD_INT 0
8020: ST_TO_ADDR
// sEngine := false ;
8021: LD_ADDR_EXP 49
8025: PUSH
8026: LD_INT 0
8028: ST_TO_ADDR
// sSpec := false ;
8029: LD_ADDR_EXP 46
8033: PUSH
8034: LD_INT 0
8036: ST_TO_ADDR
// sLevel := false ;
8037: LD_ADDR_EXP 50
8041: PUSH
8042: LD_INT 0
8044: ST_TO_ADDR
// sArmoury := false ;
8045: LD_ADDR_EXP 51
8049: PUSH
8050: LD_INT 0
8052: ST_TO_ADDR
// sRadar := false ;
8053: LD_ADDR_EXP 52
8057: PUSH
8058: LD_INT 0
8060: ST_TO_ADDR
// sBunker := false ;
8061: LD_ADDR_EXP 53
8065: PUSH
8066: LD_INT 0
8068: ST_TO_ADDR
// sHack := false ;
8069: LD_ADDR_EXP 54
8073: PUSH
8074: LD_INT 0
8076: ST_TO_ADDR
// sFire := false ;
8077: LD_ADDR_EXP 55
8081: PUSH
8082: LD_INT 0
8084: ST_TO_ADDR
// sRefresh := false ;
8085: LD_ADDR_EXP 56
8089: PUSH
8090: LD_INT 0
8092: ST_TO_ADDR
// sExp := false ;
8093: LD_ADDR_EXP 57
8097: PUSH
8098: LD_INT 0
8100: ST_TO_ADDR
// sDepot := false ;
8101: LD_ADDR_EXP 58
8105: PUSH
8106: LD_INT 0
8108: ST_TO_ADDR
// sFlag := false ;
8109: LD_ADDR_EXP 59
8113: PUSH
8114: LD_INT 0
8116: ST_TO_ADDR
// sKamikadze := false ;
8117: LD_ADDR_EXP 67
8121: PUSH
8122: LD_INT 0
8124: ST_TO_ADDR
// sTroll := false ;
8125: LD_ADDR_EXP 68
8129: PUSH
8130: LD_INT 0
8132: ST_TO_ADDR
// sSlow := false ;
8133: LD_ADDR_EXP 69
8137: PUSH
8138: LD_INT 0
8140: ST_TO_ADDR
// sLack := false ;
8141: LD_ADDR_EXP 70
8145: PUSH
8146: LD_INT 0
8148: ST_TO_ADDR
// sTank := false ;
8149: LD_ADDR_EXP 72
8153: PUSH
8154: LD_INT 0
8156: ST_TO_ADDR
// sRemote := false ;
8157: LD_ADDR_EXP 73
8161: PUSH
8162: LD_INT 0
8164: ST_TO_ADDR
// sPowell := false ;
8165: LD_ADDR_EXP 74
8169: PUSH
8170: LD_INT 0
8172: ST_TO_ADDR
// sTeleport := false ;
8173: LD_ADDR_EXP 77
8177: PUSH
8178: LD_INT 0
8180: ST_TO_ADDR
// sOilTower := false ;
8181: LD_ADDR_EXP 79
8185: PUSH
8186: LD_INT 0
8188: ST_TO_ADDR
// sShovel := false ;
8189: LD_ADDR_EXP 80
8193: PUSH
8194: LD_INT 0
8196: ST_TO_ADDR
// sSheik := false ;
8197: LD_ADDR_EXP 81
8201: PUSH
8202: LD_INT 0
8204: ST_TO_ADDR
// sEarthquake := false ;
8205: LD_ADDR_EXP 83
8209: PUSH
8210: LD_INT 0
8212: ST_TO_ADDR
// sAI := false ;
8213: LD_ADDR_EXP 84
8217: PUSH
8218: LD_INT 0
8220: ST_TO_ADDR
// sCargo := false ;
8221: LD_ADDR_EXP 87
8225: PUSH
8226: LD_INT 0
8228: ST_TO_ADDR
// sDLaser := false ;
8229: LD_ADDR_EXP 88
8233: PUSH
8234: LD_INT 0
8236: ST_TO_ADDR
// sExchange := false ;
8237: LD_ADDR_EXP 89
8241: PUSH
8242: LD_INT 0
8244: ST_TO_ADDR
// sFac := false ;
8245: LD_ADDR_EXP 90
8249: PUSH
8250: LD_INT 0
8252: ST_TO_ADDR
// sPower := false ;
8253: LD_ADDR_EXP 91
8257: PUSH
8258: LD_INT 0
8260: ST_TO_ADDR
// sRandom := false ;
8261: LD_ADDR_EXP 92
8265: PUSH
8266: LD_INT 0
8268: ST_TO_ADDR
// sShield := false ;
8269: LD_ADDR_EXP 93
8273: PUSH
8274: LD_INT 0
8276: ST_TO_ADDR
// sTime := false ;
8277: LD_ADDR_EXP 94
8281: PUSH
8282: LD_INT 0
8284: ST_TO_ADDR
// sTools := false ;
8285: LD_ADDR_EXP 95
8289: PUSH
8290: LD_INT 0
8292: ST_TO_ADDR
// sSold := false ;
8293: LD_ADDR_EXP 60
8297: PUSH
8298: LD_INT 0
8300: ST_TO_ADDR
// sDiff := false ;
8301: LD_ADDR_EXP 61
8305: PUSH
8306: LD_INT 0
8308: ST_TO_ADDR
// sFog := false ;
8309: LD_ADDR_EXP 64
8313: PUSH
8314: LD_INT 0
8316: ST_TO_ADDR
// sReset := false ;
8317: LD_ADDR_EXP 65
8321: PUSH
8322: LD_INT 0
8324: ST_TO_ADDR
// sSun := false ;
8325: LD_ADDR_EXP 66
8329: PUSH
8330: LD_INT 0
8332: ST_TO_ADDR
// sTiger := false ;
8333: LD_ADDR_EXP 62
8337: PUSH
8338: LD_INT 0
8340: ST_TO_ADDR
// sBomb := false ;
8341: LD_ADDR_EXP 63
8345: PUSH
8346: LD_INT 0
8348: ST_TO_ADDR
// sWound := false ;
8349: LD_ADDR_EXP 71
8353: PUSH
8354: LD_INT 0
8356: ST_TO_ADDR
// sBetray := false ;
8357: LD_ADDR_EXP 75
8361: PUSH
8362: LD_INT 0
8364: ST_TO_ADDR
// sContamin := false ;
8365: LD_ADDR_EXP 76
8369: PUSH
8370: LD_INT 0
8372: ST_TO_ADDR
// sOil := false ;
8373: LD_ADDR_EXP 78
8377: PUSH
8378: LD_INT 0
8380: ST_TO_ADDR
// sStu := false ;
8381: LD_ADDR_EXP 82
8385: PUSH
8386: LD_INT 0
8388: ST_TO_ADDR
// sBazooka := false ;
8389: LD_ADDR_EXP 85
8393: PUSH
8394: LD_INT 0
8396: ST_TO_ADDR
// sMortar := false ;
8397: LD_ADDR_EXP 86
8401: PUSH
8402: LD_INT 0
8404: ST_TO_ADDR
// sRanger := false ;
8405: LD_ADDR_EXP 96
8409: PUSH
8410: LD_INT 0
8412: ST_TO_ADDR
// end ;
8413: LD_VAR 0 1
8417: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8418: LD_INT 0
8420: PPUSH
8421: PPUSH
8422: PPUSH
8423: PPUSH
8424: PPUSH
// result := [ ] ;
8425: LD_ADDR_VAR 0 1
8429: PUSH
8430: EMPTY
8431: ST_TO_ADDR
// if campaign_id = 1 then
8432: LD_OWVAR 69
8436: PUSH
8437: LD_INT 1
8439: EQUAL
8440: IFFALSE 11378
// begin case mission_number of 1 :
8442: LD_OWVAR 70
8446: PUSH
8447: LD_INT 1
8449: DOUBLE
8450: EQUAL
8451: IFTRUE 8455
8453: GO 8519
8455: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8456: LD_ADDR_VAR 0 1
8460: PUSH
8461: LD_INT 2
8463: PUSH
8464: LD_INT 4
8466: PUSH
8467: LD_INT 11
8469: PUSH
8470: LD_INT 12
8472: PUSH
8473: LD_INT 15
8475: PUSH
8476: LD_INT 16
8478: PUSH
8479: LD_INT 22
8481: PUSH
8482: LD_INT 23
8484: PUSH
8485: LD_INT 26
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: LIST
8497: LIST
8498: PUSH
8499: LD_INT 101
8501: PUSH
8502: LD_INT 102
8504: PUSH
8505: LD_INT 106
8507: PUSH
8508: EMPTY
8509: LIST
8510: LIST
8511: LIST
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: ST_TO_ADDR
8517: GO 11376
8519: LD_INT 2
8521: DOUBLE
8522: EQUAL
8523: IFTRUE 8527
8525: GO 8599
8527: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8528: LD_ADDR_VAR 0 1
8532: PUSH
8533: LD_INT 2
8535: PUSH
8536: LD_INT 4
8538: PUSH
8539: LD_INT 11
8541: PUSH
8542: LD_INT 12
8544: PUSH
8545: LD_INT 15
8547: PUSH
8548: LD_INT 16
8550: PUSH
8551: LD_INT 22
8553: PUSH
8554: LD_INT 23
8556: PUSH
8557: LD_INT 26
8559: PUSH
8560: EMPTY
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: LIST
8569: LIST
8570: PUSH
8571: LD_INT 101
8573: PUSH
8574: LD_INT 102
8576: PUSH
8577: LD_INT 105
8579: PUSH
8580: LD_INT 106
8582: PUSH
8583: LD_INT 108
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: PUSH
8593: EMPTY
8594: LIST
8595: LIST
8596: ST_TO_ADDR
8597: GO 11376
8599: LD_INT 3
8601: DOUBLE
8602: EQUAL
8603: IFTRUE 8607
8605: GO 8683
8607: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
8608: LD_ADDR_VAR 0 1
8612: PUSH
8613: LD_INT 2
8615: PUSH
8616: LD_INT 4
8618: PUSH
8619: LD_INT 5
8621: PUSH
8622: LD_INT 11
8624: PUSH
8625: LD_INT 12
8627: PUSH
8628: LD_INT 15
8630: PUSH
8631: LD_INT 16
8633: PUSH
8634: LD_INT 22
8636: PUSH
8637: LD_INT 26
8639: PUSH
8640: LD_INT 36
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 101
8657: PUSH
8658: LD_INT 102
8660: PUSH
8661: LD_INT 105
8663: PUSH
8664: LD_INT 106
8666: PUSH
8667: LD_INT 108
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: ST_TO_ADDR
8681: GO 11376
8683: LD_INT 4
8685: DOUBLE
8686: EQUAL
8687: IFTRUE 8691
8689: GO 8775
8691: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
8692: LD_ADDR_VAR 0 1
8696: PUSH
8697: LD_INT 2
8699: PUSH
8700: LD_INT 4
8702: PUSH
8703: LD_INT 5
8705: PUSH
8706: LD_INT 8
8708: PUSH
8709: LD_INT 11
8711: PUSH
8712: LD_INT 12
8714: PUSH
8715: LD_INT 15
8717: PUSH
8718: LD_INT 16
8720: PUSH
8721: LD_INT 22
8723: PUSH
8724: LD_INT 23
8726: PUSH
8727: LD_INT 26
8729: PUSH
8730: LD_INT 36
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: PUSH
8747: LD_INT 101
8749: PUSH
8750: LD_INT 102
8752: PUSH
8753: LD_INT 105
8755: PUSH
8756: LD_INT 106
8758: PUSH
8759: LD_INT 108
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: ST_TO_ADDR
8773: GO 11376
8775: LD_INT 5
8777: DOUBLE
8778: EQUAL
8779: IFTRUE 8783
8781: GO 8883
8783: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
8784: LD_ADDR_VAR 0 1
8788: PUSH
8789: LD_INT 2
8791: PUSH
8792: LD_INT 4
8794: PUSH
8795: LD_INT 5
8797: PUSH
8798: LD_INT 6
8800: PUSH
8801: LD_INT 8
8803: PUSH
8804: LD_INT 11
8806: PUSH
8807: LD_INT 12
8809: PUSH
8810: LD_INT 15
8812: PUSH
8813: LD_INT 16
8815: PUSH
8816: LD_INT 22
8818: PUSH
8819: LD_INT 23
8821: PUSH
8822: LD_INT 25
8824: PUSH
8825: LD_INT 26
8827: PUSH
8828: LD_INT 36
8830: PUSH
8831: EMPTY
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: PUSH
8847: LD_INT 101
8849: PUSH
8850: LD_INT 102
8852: PUSH
8853: LD_INT 105
8855: PUSH
8856: LD_INT 106
8858: PUSH
8859: LD_INT 108
8861: PUSH
8862: LD_INT 109
8864: PUSH
8865: LD_INT 112
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: ST_TO_ADDR
8881: GO 11376
8883: LD_INT 6
8885: DOUBLE
8886: EQUAL
8887: IFTRUE 8891
8889: GO 9011
8891: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
8892: LD_ADDR_VAR 0 1
8896: PUSH
8897: LD_INT 2
8899: PUSH
8900: LD_INT 4
8902: PUSH
8903: LD_INT 5
8905: PUSH
8906: LD_INT 6
8908: PUSH
8909: LD_INT 8
8911: PUSH
8912: LD_INT 11
8914: PUSH
8915: LD_INT 12
8917: PUSH
8918: LD_INT 15
8920: PUSH
8921: LD_INT 16
8923: PUSH
8924: LD_INT 20
8926: PUSH
8927: LD_INT 21
8929: PUSH
8930: LD_INT 22
8932: PUSH
8933: LD_INT 23
8935: PUSH
8936: LD_INT 25
8938: PUSH
8939: LD_INT 26
8941: PUSH
8942: LD_INT 30
8944: PUSH
8945: LD_INT 31
8947: PUSH
8948: LD_INT 32
8950: PUSH
8951: LD_INT 36
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: LIST
8961: LIST
8962: LIST
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: PUSH
8975: LD_INT 101
8977: PUSH
8978: LD_INT 102
8980: PUSH
8981: LD_INT 105
8983: PUSH
8984: LD_INT 106
8986: PUSH
8987: LD_INT 108
8989: PUSH
8990: LD_INT 109
8992: PUSH
8993: LD_INT 112
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: LIST
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: ST_TO_ADDR
9009: GO 11376
9011: LD_INT 7
9013: DOUBLE
9014: EQUAL
9015: IFTRUE 9019
9017: GO 9119
9019: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9020: LD_ADDR_VAR 0 1
9024: PUSH
9025: LD_INT 2
9027: PUSH
9028: LD_INT 4
9030: PUSH
9031: LD_INT 5
9033: PUSH
9034: LD_INT 7
9036: PUSH
9037: LD_INT 11
9039: PUSH
9040: LD_INT 12
9042: PUSH
9043: LD_INT 15
9045: PUSH
9046: LD_INT 16
9048: PUSH
9049: LD_INT 20
9051: PUSH
9052: LD_INT 21
9054: PUSH
9055: LD_INT 22
9057: PUSH
9058: LD_INT 23
9060: PUSH
9061: LD_INT 25
9063: PUSH
9064: LD_INT 26
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: PUSH
9083: LD_INT 101
9085: PUSH
9086: LD_INT 102
9088: PUSH
9089: LD_INT 103
9091: PUSH
9092: LD_INT 105
9094: PUSH
9095: LD_INT 106
9097: PUSH
9098: LD_INT 108
9100: PUSH
9101: LD_INT 112
9103: PUSH
9104: EMPTY
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: LIST
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: ST_TO_ADDR
9117: GO 11376
9119: LD_INT 8
9121: DOUBLE
9122: EQUAL
9123: IFTRUE 9127
9125: GO 9255
9127: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9128: LD_ADDR_VAR 0 1
9132: PUSH
9133: LD_INT 2
9135: PUSH
9136: LD_INT 4
9138: PUSH
9139: LD_INT 5
9141: PUSH
9142: LD_INT 6
9144: PUSH
9145: LD_INT 7
9147: PUSH
9148: LD_INT 8
9150: PUSH
9151: LD_INT 11
9153: PUSH
9154: LD_INT 12
9156: PUSH
9157: LD_INT 15
9159: PUSH
9160: LD_INT 16
9162: PUSH
9163: LD_INT 20
9165: PUSH
9166: LD_INT 21
9168: PUSH
9169: LD_INT 22
9171: PUSH
9172: LD_INT 23
9174: PUSH
9175: LD_INT 25
9177: PUSH
9178: LD_INT 26
9180: PUSH
9181: LD_INT 30
9183: PUSH
9184: LD_INT 31
9186: PUSH
9187: LD_INT 32
9189: PUSH
9190: LD_INT 36
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: PUSH
9215: LD_INT 101
9217: PUSH
9218: LD_INT 102
9220: PUSH
9221: LD_INT 103
9223: PUSH
9224: LD_INT 105
9226: PUSH
9227: LD_INT 106
9229: PUSH
9230: LD_INT 108
9232: PUSH
9233: LD_INT 109
9235: PUSH
9236: LD_INT 112
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: ST_TO_ADDR
9253: GO 11376
9255: LD_INT 9
9257: DOUBLE
9258: EQUAL
9259: IFTRUE 9263
9261: GO 9399
9263: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
9264: LD_ADDR_VAR 0 1
9268: PUSH
9269: LD_INT 2
9271: PUSH
9272: LD_INT 4
9274: PUSH
9275: LD_INT 5
9277: PUSH
9278: LD_INT 6
9280: PUSH
9281: LD_INT 7
9283: PUSH
9284: LD_INT 8
9286: PUSH
9287: LD_INT 11
9289: PUSH
9290: LD_INT 12
9292: PUSH
9293: LD_INT 15
9295: PUSH
9296: LD_INT 16
9298: PUSH
9299: LD_INT 20
9301: PUSH
9302: LD_INT 21
9304: PUSH
9305: LD_INT 22
9307: PUSH
9308: LD_INT 23
9310: PUSH
9311: LD_INT 25
9313: PUSH
9314: LD_INT 26
9316: PUSH
9317: LD_INT 28
9319: PUSH
9320: LD_INT 30
9322: PUSH
9323: LD_INT 31
9325: PUSH
9326: LD_INT 32
9328: PUSH
9329: LD_INT 36
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: PUSH
9355: LD_INT 101
9357: PUSH
9358: LD_INT 102
9360: PUSH
9361: LD_INT 103
9363: PUSH
9364: LD_INT 105
9366: PUSH
9367: LD_INT 106
9369: PUSH
9370: LD_INT 108
9372: PUSH
9373: LD_INT 109
9375: PUSH
9376: LD_INT 112
9378: PUSH
9379: LD_INT 114
9381: PUSH
9382: EMPTY
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: ST_TO_ADDR
9397: GO 11376
9399: LD_INT 10
9401: DOUBLE
9402: EQUAL
9403: IFTRUE 9407
9405: GO 9591
9407: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9408: LD_ADDR_VAR 0 1
9412: PUSH
9413: LD_INT 2
9415: PUSH
9416: LD_INT 4
9418: PUSH
9419: LD_INT 5
9421: PUSH
9422: LD_INT 6
9424: PUSH
9425: LD_INT 7
9427: PUSH
9428: LD_INT 8
9430: PUSH
9431: LD_INT 9
9433: PUSH
9434: LD_INT 10
9436: PUSH
9437: LD_INT 11
9439: PUSH
9440: LD_INT 12
9442: PUSH
9443: LD_INT 13
9445: PUSH
9446: LD_INT 14
9448: PUSH
9449: LD_INT 15
9451: PUSH
9452: LD_INT 16
9454: PUSH
9455: LD_INT 17
9457: PUSH
9458: LD_INT 18
9460: PUSH
9461: LD_INT 19
9463: PUSH
9464: LD_INT 20
9466: PUSH
9467: LD_INT 21
9469: PUSH
9470: LD_INT 22
9472: PUSH
9473: LD_INT 23
9475: PUSH
9476: LD_INT 24
9478: PUSH
9479: LD_INT 25
9481: PUSH
9482: LD_INT 26
9484: PUSH
9485: LD_INT 28
9487: PUSH
9488: LD_INT 30
9490: PUSH
9491: LD_INT 31
9493: PUSH
9494: LD_INT 32
9496: PUSH
9497: LD_INT 36
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: PUSH
9531: LD_INT 101
9533: PUSH
9534: LD_INT 102
9536: PUSH
9537: LD_INT 103
9539: PUSH
9540: LD_INT 104
9542: PUSH
9543: LD_INT 105
9545: PUSH
9546: LD_INT 106
9548: PUSH
9549: LD_INT 107
9551: PUSH
9552: LD_INT 108
9554: PUSH
9555: LD_INT 109
9557: PUSH
9558: LD_INT 110
9560: PUSH
9561: LD_INT 111
9563: PUSH
9564: LD_INT 112
9566: PUSH
9567: LD_INT 114
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: ST_TO_ADDR
9589: GO 11376
9591: LD_INT 11
9593: DOUBLE
9594: EQUAL
9595: IFTRUE 9599
9597: GO 9791
9599: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
9600: LD_ADDR_VAR 0 1
9604: PUSH
9605: LD_INT 2
9607: PUSH
9608: LD_INT 3
9610: PUSH
9611: LD_INT 4
9613: PUSH
9614: LD_INT 5
9616: PUSH
9617: LD_INT 6
9619: PUSH
9620: LD_INT 7
9622: PUSH
9623: LD_INT 8
9625: PUSH
9626: LD_INT 9
9628: PUSH
9629: LD_INT 10
9631: PUSH
9632: LD_INT 11
9634: PUSH
9635: LD_INT 12
9637: PUSH
9638: LD_INT 13
9640: PUSH
9641: LD_INT 14
9643: PUSH
9644: LD_INT 15
9646: PUSH
9647: LD_INT 16
9649: PUSH
9650: LD_INT 17
9652: PUSH
9653: LD_INT 18
9655: PUSH
9656: LD_INT 19
9658: PUSH
9659: LD_INT 20
9661: PUSH
9662: LD_INT 21
9664: PUSH
9665: LD_INT 22
9667: PUSH
9668: LD_INT 23
9670: PUSH
9671: LD_INT 24
9673: PUSH
9674: LD_INT 25
9676: PUSH
9677: LD_INT 26
9679: PUSH
9680: LD_INT 28
9682: PUSH
9683: LD_INT 30
9685: PUSH
9686: LD_INT 31
9688: PUSH
9689: LD_INT 32
9691: PUSH
9692: LD_INT 34
9694: PUSH
9695: LD_INT 36
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: PUSH
9731: LD_INT 101
9733: PUSH
9734: LD_INT 102
9736: PUSH
9737: LD_INT 103
9739: PUSH
9740: LD_INT 104
9742: PUSH
9743: LD_INT 105
9745: PUSH
9746: LD_INT 106
9748: PUSH
9749: LD_INT 107
9751: PUSH
9752: LD_INT 108
9754: PUSH
9755: LD_INT 109
9757: PUSH
9758: LD_INT 110
9760: PUSH
9761: LD_INT 111
9763: PUSH
9764: LD_INT 112
9766: PUSH
9767: LD_INT 114
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: ST_TO_ADDR
9789: GO 11376
9791: LD_INT 12
9793: DOUBLE
9794: EQUAL
9795: IFTRUE 9799
9797: GO 10007
9799: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
9800: LD_ADDR_VAR 0 1
9804: PUSH
9805: LD_INT 1
9807: PUSH
9808: LD_INT 2
9810: PUSH
9811: LD_INT 3
9813: PUSH
9814: LD_INT 4
9816: PUSH
9817: LD_INT 5
9819: PUSH
9820: LD_INT 6
9822: PUSH
9823: LD_INT 7
9825: PUSH
9826: LD_INT 8
9828: PUSH
9829: LD_INT 9
9831: PUSH
9832: LD_INT 10
9834: PUSH
9835: LD_INT 11
9837: PUSH
9838: LD_INT 12
9840: PUSH
9841: LD_INT 13
9843: PUSH
9844: LD_INT 14
9846: PUSH
9847: LD_INT 15
9849: PUSH
9850: LD_INT 16
9852: PUSH
9853: LD_INT 17
9855: PUSH
9856: LD_INT 18
9858: PUSH
9859: LD_INT 19
9861: PUSH
9862: LD_INT 20
9864: PUSH
9865: LD_INT 21
9867: PUSH
9868: LD_INT 22
9870: PUSH
9871: LD_INT 23
9873: PUSH
9874: LD_INT 24
9876: PUSH
9877: LD_INT 25
9879: PUSH
9880: LD_INT 26
9882: PUSH
9883: LD_INT 27
9885: PUSH
9886: LD_INT 28
9888: PUSH
9889: LD_INT 30
9891: PUSH
9892: LD_INT 31
9894: PUSH
9895: LD_INT 32
9897: PUSH
9898: LD_INT 33
9900: PUSH
9901: LD_INT 34
9903: PUSH
9904: LD_INT 36
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: PUSH
9943: LD_INT 101
9945: PUSH
9946: LD_INT 102
9948: PUSH
9949: LD_INT 103
9951: PUSH
9952: LD_INT 104
9954: PUSH
9955: LD_INT 105
9957: PUSH
9958: LD_INT 106
9960: PUSH
9961: LD_INT 107
9963: PUSH
9964: LD_INT 108
9966: PUSH
9967: LD_INT 109
9969: PUSH
9970: LD_INT 110
9972: PUSH
9973: LD_INT 111
9975: PUSH
9976: LD_INT 112
9978: PUSH
9979: LD_INT 113
9981: PUSH
9982: LD_INT 114
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: ST_TO_ADDR
10005: GO 11376
10007: LD_INT 13
10009: DOUBLE
10010: EQUAL
10011: IFTRUE 10015
10013: GO 10211
10015: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10016: LD_ADDR_VAR 0 1
10020: PUSH
10021: LD_INT 1
10023: PUSH
10024: LD_INT 2
10026: PUSH
10027: LD_INT 3
10029: PUSH
10030: LD_INT 4
10032: PUSH
10033: LD_INT 5
10035: PUSH
10036: LD_INT 8
10038: PUSH
10039: LD_INT 9
10041: PUSH
10042: LD_INT 10
10044: PUSH
10045: LD_INT 11
10047: PUSH
10048: LD_INT 12
10050: PUSH
10051: LD_INT 14
10053: PUSH
10054: LD_INT 15
10056: PUSH
10057: LD_INT 16
10059: PUSH
10060: LD_INT 17
10062: PUSH
10063: LD_INT 18
10065: PUSH
10066: LD_INT 19
10068: PUSH
10069: LD_INT 20
10071: PUSH
10072: LD_INT 21
10074: PUSH
10075: LD_INT 22
10077: PUSH
10078: LD_INT 23
10080: PUSH
10081: LD_INT 24
10083: PUSH
10084: LD_INT 25
10086: PUSH
10087: LD_INT 26
10089: PUSH
10090: LD_INT 27
10092: PUSH
10093: LD_INT 28
10095: PUSH
10096: LD_INT 30
10098: PUSH
10099: LD_INT 31
10101: PUSH
10102: LD_INT 32
10104: PUSH
10105: LD_INT 33
10107: PUSH
10108: LD_INT 34
10110: PUSH
10111: LD_INT 36
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: PUSH
10147: LD_INT 101
10149: PUSH
10150: LD_INT 102
10152: PUSH
10153: LD_INT 103
10155: PUSH
10156: LD_INT 104
10158: PUSH
10159: LD_INT 105
10161: PUSH
10162: LD_INT 106
10164: PUSH
10165: LD_INT 107
10167: PUSH
10168: LD_INT 108
10170: PUSH
10171: LD_INT 109
10173: PUSH
10174: LD_INT 110
10176: PUSH
10177: LD_INT 111
10179: PUSH
10180: LD_INT 112
10182: PUSH
10183: LD_INT 113
10185: PUSH
10186: LD_INT 114
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: ST_TO_ADDR
10209: GO 11376
10211: LD_INT 14
10213: DOUBLE
10214: EQUAL
10215: IFTRUE 10219
10217: GO 10431
10219: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
10220: LD_ADDR_VAR 0 1
10224: PUSH
10225: LD_INT 1
10227: PUSH
10228: LD_INT 2
10230: PUSH
10231: LD_INT 3
10233: PUSH
10234: LD_INT 4
10236: PUSH
10237: LD_INT 5
10239: PUSH
10240: LD_INT 6
10242: PUSH
10243: LD_INT 7
10245: PUSH
10246: LD_INT 8
10248: PUSH
10249: LD_INT 9
10251: PUSH
10252: LD_INT 10
10254: PUSH
10255: LD_INT 11
10257: PUSH
10258: LD_INT 12
10260: PUSH
10261: LD_INT 13
10263: PUSH
10264: LD_INT 14
10266: PUSH
10267: LD_INT 15
10269: PUSH
10270: LD_INT 16
10272: PUSH
10273: LD_INT 17
10275: PUSH
10276: LD_INT 18
10278: PUSH
10279: LD_INT 19
10281: PUSH
10282: LD_INT 20
10284: PUSH
10285: LD_INT 21
10287: PUSH
10288: LD_INT 22
10290: PUSH
10291: LD_INT 23
10293: PUSH
10294: LD_INT 24
10296: PUSH
10297: LD_INT 25
10299: PUSH
10300: LD_INT 26
10302: PUSH
10303: LD_INT 27
10305: PUSH
10306: LD_INT 28
10308: PUSH
10309: LD_INT 29
10311: PUSH
10312: LD_INT 30
10314: PUSH
10315: LD_INT 31
10317: PUSH
10318: LD_INT 32
10320: PUSH
10321: LD_INT 33
10323: PUSH
10324: LD_INT 34
10326: PUSH
10327: LD_INT 36
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 101
10369: PUSH
10370: LD_INT 102
10372: PUSH
10373: LD_INT 103
10375: PUSH
10376: LD_INT 104
10378: PUSH
10379: LD_INT 105
10381: PUSH
10382: LD_INT 106
10384: PUSH
10385: LD_INT 107
10387: PUSH
10388: LD_INT 108
10390: PUSH
10391: LD_INT 109
10393: PUSH
10394: LD_INT 110
10396: PUSH
10397: LD_INT 111
10399: PUSH
10400: LD_INT 112
10402: PUSH
10403: LD_INT 113
10405: PUSH
10406: LD_INT 114
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: ST_TO_ADDR
10429: GO 11376
10431: LD_INT 15
10433: DOUBLE
10434: EQUAL
10435: IFTRUE 10439
10437: GO 10651
10439: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10440: LD_ADDR_VAR 0 1
10444: PUSH
10445: LD_INT 1
10447: PUSH
10448: LD_INT 2
10450: PUSH
10451: LD_INT 3
10453: PUSH
10454: LD_INT 4
10456: PUSH
10457: LD_INT 5
10459: PUSH
10460: LD_INT 6
10462: PUSH
10463: LD_INT 7
10465: PUSH
10466: LD_INT 8
10468: PUSH
10469: LD_INT 9
10471: PUSH
10472: LD_INT 10
10474: PUSH
10475: LD_INT 11
10477: PUSH
10478: LD_INT 12
10480: PUSH
10481: LD_INT 13
10483: PUSH
10484: LD_INT 14
10486: PUSH
10487: LD_INT 15
10489: PUSH
10490: LD_INT 16
10492: PUSH
10493: LD_INT 17
10495: PUSH
10496: LD_INT 18
10498: PUSH
10499: LD_INT 19
10501: PUSH
10502: LD_INT 20
10504: PUSH
10505: LD_INT 21
10507: PUSH
10508: LD_INT 22
10510: PUSH
10511: LD_INT 23
10513: PUSH
10514: LD_INT 24
10516: PUSH
10517: LD_INT 25
10519: PUSH
10520: LD_INT 26
10522: PUSH
10523: LD_INT 27
10525: PUSH
10526: LD_INT 28
10528: PUSH
10529: LD_INT 29
10531: PUSH
10532: LD_INT 30
10534: PUSH
10535: LD_INT 31
10537: PUSH
10538: LD_INT 32
10540: PUSH
10541: LD_INT 33
10543: PUSH
10544: LD_INT 34
10546: PUSH
10547: LD_INT 36
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: PUSH
10587: LD_INT 101
10589: PUSH
10590: LD_INT 102
10592: PUSH
10593: LD_INT 103
10595: PUSH
10596: LD_INT 104
10598: PUSH
10599: LD_INT 105
10601: PUSH
10602: LD_INT 106
10604: PUSH
10605: LD_INT 107
10607: PUSH
10608: LD_INT 108
10610: PUSH
10611: LD_INT 109
10613: PUSH
10614: LD_INT 110
10616: PUSH
10617: LD_INT 111
10619: PUSH
10620: LD_INT 112
10622: PUSH
10623: LD_INT 113
10625: PUSH
10626: LD_INT 114
10628: PUSH
10629: EMPTY
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: ST_TO_ADDR
10649: GO 11376
10651: LD_INT 16
10653: DOUBLE
10654: EQUAL
10655: IFTRUE 10659
10657: GO 10783
10659: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
10660: LD_ADDR_VAR 0 1
10664: PUSH
10665: LD_INT 2
10667: PUSH
10668: LD_INT 4
10670: PUSH
10671: LD_INT 5
10673: PUSH
10674: LD_INT 7
10676: PUSH
10677: LD_INT 11
10679: PUSH
10680: LD_INT 12
10682: PUSH
10683: LD_INT 15
10685: PUSH
10686: LD_INT 16
10688: PUSH
10689: LD_INT 20
10691: PUSH
10692: LD_INT 21
10694: PUSH
10695: LD_INT 22
10697: PUSH
10698: LD_INT 23
10700: PUSH
10701: LD_INT 25
10703: PUSH
10704: LD_INT 26
10706: PUSH
10707: LD_INT 30
10709: PUSH
10710: LD_INT 31
10712: PUSH
10713: LD_INT 32
10715: PUSH
10716: LD_INT 33
10718: PUSH
10719: LD_INT 34
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: PUSH
10743: LD_INT 101
10745: PUSH
10746: LD_INT 102
10748: PUSH
10749: LD_INT 103
10751: PUSH
10752: LD_INT 106
10754: PUSH
10755: LD_INT 108
10757: PUSH
10758: LD_INT 112
10760: PUSH
10761: LD_INT 113
10763: PUSH
10764: LD_INT 114
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: ST_TO_ADDR
10781: GO 11376
10783: LD_INT 17
10785: DOUBLE
10786: EQUAL
10787: IFTRUE 10791
10789: GO 11003
10791: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
10792: LD_ADDR_VAR 0 1
10796: PUSH
10797: LD_INT 1
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: LD_INT 3
10805: PUSH
10806: LD_INT 4
10808: PUSH
10809: LD_INT 5
10811: PUSH
10812: LD_INT 6
10814: PUSH
10815: LD_INT 7
10817: PUSH
10818: LD_INT 8
10820: PUSH
10821: LD_INT 9
10823: PUSH
10824: LD_INT 10
10826: PUSH
10827: LD_INT 11
10829: PUSH
10830: LD_INT 12
10832: PUSH
10833: LD_INT 13
10835: PUSH
10836: LD_INT 14
10838: PUSH
10839: LD_INT 15
10841: PUSH
10842: LD_INT 16
10844: PUSH
10845: LD_INT 17
10847: PUSH
10848: LD_INT 18
10850: PUSH
10851: LD_INT 19
10853: PUSH
10854: LD_INT 20
10856: PUSH
10857: LD_INT 21
10859: PUSH
10860: LD_INT 22
10862: PUSH
10863: LD_INT 23
10865: PUSH
10866: LD_INT 24
10868: PUSH
10869: LD_INT 25
10871: PUSH
10872: LD_INT 26
10874: PUSH
10875: LD_INT 27
10877: PUSH
10878: LD_INT 28
10880: PUSH
10881: LD_INT 29
10883: PUSH
10884: LD_INT 30
10886: PUSH
10887: LD_INT 31
10889: PUSH
10890: LD_INT 32
10892: PUSH
10893: LD_INT 33
10895: PUSH
10896: LD_INT 34
10898: PUSH
10899: LD_INT 36
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: PUSH
10939: LD_INT 101
10941: PUSH
10942: LD_INT 102
10944: PUSH
10945: LD_INT 103
10947: PUSH
10948: LD_INT 104
10950: PUSH
10951: LD_INT 105
10953: PUSH
10954: LD_INT 106
10956: PUSH
10957: LD_INT 107
10959: PUSH
10960: LD_INT 108
10962: PUSH
10963: LD_INT 109
10965: PUSH
10966: LD_INT 110
10968: PUSH
10969: LD_INT 111
10971: PUSH
10972: LD_INT 112
10974: PUSH
10975: LD_INT 113
10977: PUSH
10978: LD_INT 114
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: ST_TO_ADDR
11001: GO 11376
11003: LD_INT 18
11005: DOUBLE
11006: EQUAL
11007: IFTRUE 11011
11009: GO 11147
11011: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11012: LD_ADDR_VAR 0 1
11016: PUSH
11017: LD_INT 2
11019: PUSH
11020: LD_INT 4
11022: PUSH
11023: LD_INT 5
11025: PUSH
11026: LD_INT 7
11028: PUSH
11029: LD_INT 11
11031: PUSH
11032: LD_INT 12
11034: PUSH
11035: LD_INT 15
11037: PUSH
11038: LD_INT 16
11040: PUSH
11041: LD_INT 20
11043: PUSH
11044: LD_INT 21
11046: PUSH
11047: LD_INT 22
11049: PUSH
11050: LD_INT 23
11052: PUSH
11053: LD_INT 25
11055: PUSH
11056: LD_INT 26
11058: PUSH
11059: LD_INT 30
11061: PUSH
11062: LD_INT 31
11064: PUSH
11065: LD_INT 32
11067: PUSH
11068: LD_INT 33
11070: PUSH
11071: LD_INT 34
11073: PUSH
11074: LD_INT 35
11076: PUSH
11077: LD_INT 36
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: PUSH
11103: LD_INT 101
11105: PUSH
11106: LD_INT 102
11108: PUSH
11109: LD_INT 103
11111: PUSH
11112: LD_INT 106
11114: PUSH
11115: LD_INT 108
11117: PUSH
11118: LD_INT 112
11120: PUSH
11121: LD_INT 113
11123: PUSH
11124: LD_INT 114
11126: PUSH
11127: LD_INT 115
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: ST_TO_ADDR
11145: GO 11376
11147: LD_INT 19
11149: DOUBLE
11150: EQUAL
11151: IFTRUE 11155
11153: GO 11375
11155: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
11156: LD_ADDR_VAR 0 1
11160: PUSH
11161: LD_INT 1
11163: PUSH
11164: LD_INT 2
11166: PUSH
11167: LD_INT 3
11169: PUSH
11170: LD_INT 4
11172: PUSH
11173: LD_INT 5
11175: PUSH
11176: LD_INT 6
11178: PUSH
11179: LD_INT 7
11181: PUSH
11182: LD_INT 8
11184: PUSH
11185: LD_INT 9
11187: PUSH
11188: LD_INT 10
11190: PUSH
11191: LD_INT 11
11193: PUSH
11194: LD_INT 12
11196: PUSH
11197: LD_INT 13
11199: PUSH
11200: LD_INT 14
11202: PUSH
11203: LD_INT 15
11205: PUSH
11206: LD_INT 16
11208: PUSH
11209: LD_INT 17
11211: PUSH
11212: LD_INT 18
11214: PUSH
11215: LD_INT 19
11217: PUSH
11218: LD_INT 20
11220: PUSH
11221: LD_INT 21
11223: PUSH
11224: LD_INT 22
11226: PUSH
11227: LD_INT 23
11229: PUSH
11230: LD_INT 24
11232: PUSH
11233: LD_INT 25
11235: PUSH
11236: LD_INT 26
11238: PUSH
11239: LD_INT 27
11241: PUSH
11242: LD_INT 28
11244: PUSH
11245: LD_INT 29
11247: PUSH
11248: LD_INT 30
11250: PUSH
11251: LD_INT 31
11253: PUSH
11254: LD_INT 32
11256: PUSH
11257: LD_INT 33
11259: PUSH
11260: LD_INT 34
11262: PUSH
11263: LD_INT 35
11265: PUSH
11266: LD_INT 36
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: PUSH
11307: LD_INT 101
11309: PUSH
11310: LD_INT 102
11312: PUSH
11313: LD_INT 103
11315: PUSH
11316: LD_INT 104
11318: PUSH
11319: LD_INT 105
11321: PUSH
11322: LD_INT 106
11324: PUSH
11325: LD_INT 107
11327: PUSH
11328: LD_INT 108
11330: PUSH
11331: LD_INT 109
11333: PUSH
11334: LD_INT 110
11336: PUSH
11337: LD_INT 111
11339: PUSH
11340: LD_INT 112
11342: PUSH
11343: LD_INT 113
11345: PUSH
11346: LD_INT 114
11348: PUSH
11349: LD_INT 115
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: ST_TO_ADDR
11373: GO 11376
11375: POP
// end else
11376: GO 11595
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
11378: LD_ADDR_VAR 0 1
11382: PUSH
11383: LD_INT 1
11385: PUSH
11386: LD_INT 2
11388: PUSH
11389: LD_INT 3
11391: PUSH
11392: LD_INT 4
11394: PUSH
11395: LD_INT 5
11397: PUSH
11398: LD_INT 6
11400: PUSH
11401: LD_INT 7
11403: PUSH
11404: LD_INT 8
11406: PUSH
11407: LD_INT 9
11409: PUSH
11410: LD_INT 10
11412: PUSH
11413: LD_INT 11
11415: PUSH
11416: LD_INT 12
11418: PUSH
11419: LD_INT 13
11421: PUSH
11422: LD_INT 14
11424: PUSH
11425: LD_INT 15
11427: PUSH
11428: LD_INT 16
11430: PUSH
11431: LD_INT 17
11433: PUSH
11434: LD_INT 18
11436: PUSH
11437: LD_INT 19
11439: PUSH
11440: LD_INT 20
11442: PUSH
11443: LD_INT 21
11445: PUSH
11446: LD_INT 22
11448: PUSH
11449: LD_INT 23
11451: PUSH
11452: LD_INT 24
11454: PUSH
11455: LD_INT 25
11457: PUSH
11458: LD_INT 26
11460: PUSH
11461: LD_INT 27
11463: PUSH
11464: LD_INT 28
11466: PUSH
11467: LD_INT 29
11469: PUSH
11470: LD_INT 30
11472: PUSH
11473: LD_INT 31
11475: PUSH
11476: LD_INT 32
11478: PUSH
11479: LD_INT 33
11481: PUSH
11482: LD_INT 34
11484: PUSH
11485: LD_INT 35
11487: PUSH
11488: LD_INT 36
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 101
11531: PUSH
11532: LD_INT 102
11534: PUSH
11535: LD_INT 103
11537: PUSH
11538: LD_INT 104
11540: PUSH
11541: LD_INT 105
11543: PUSH
11544: LD_INT 106
11546: PUSH
11547: LD_INT 107
11549: PUSH
11550: LD_INT 108
11552: PUSH
11553: LD_INT 109
11555: PUSH
11556: LD_INT 110
11558: PUSH
11559: LD_INT 111
11561: PUSH
11562: LD_INT 112
11564: PUSH
11565: LD_INT 113
11567: PUSH
11568: LD_INT 114
11570: PUSH
11571: LD_INT 115
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: ST_TO_ADDR
// if result then
11595: LD_VAR 0 1
11599: IFFALSE 11888
// begin normal :=  ;
11601: LD_ADDR_VAR 0 3
11605: PUSH
11606: LD_STRING 
11608: ST_TO_ADDR
// hardcore :=  ;
11609: LD_ADDR_VAR 0 4
11613: PUSH
11614: LD_STRING 
11616: ST_TO_ADDR
// for i = 1 to normalCounter do
11617: LD_ADDR_VAR 0 5
11621: PUSH
11622: DOUBLE
11623: LD_INT 1
11625: DEC
11626: ST_TO_ADDR
11627: LD_EXP 44
11631: PUSH
11632: FOR_TO
11633: IFFALSE 11734
// begin tmp := 0 ;
11635: LD_ADDR_VAR 0 2
11639: PUSH
11640: LD_STRING 0
11642: ST_TO_ADDR
// if result [ 1 ] then
11643: LD_VAR 0 1
11647: PUSH
11648: LD_INT 1
11650: ARRAY
11651: IFFALSE 11716
// if result [ 1 ] [ 1 ] = i then
11653: LD_VAR 0 1
11657: PUSH
11658: LD_INT 1
11660: ARRAY
11661: PUSH
11662: LD_INT 1
11664: ARRAY
11665: PUSH
11666: LD_VAR 0 5
11670: EQUAL
11671: IFFALSE 11716
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
11673: LD_ADDR_VAR 0 1
11677: PUSH
11678: LD_VAR 0 1
11682: PPUSH
11683: LD_INT 1
11685: PPUSH
11686: LD_VAR 0 1
11690: PUSH
11691: LD_INT 1
11693: ARRAY
11694: PPUSH
11695: LD_INT 1
11697: PPUSH
11698: CALL_OW 3
11702: PPUSH
11703: CALL_OW 1
11707: ST_TO_ADDR
// tmp := 1 ;
11708: LD_ADDR_VAR 0 2
11712: PUSH
11713: LD_STRING 1
11715: ST_TO_ADDR
// end ; normal := normal & tmp ;
11716: LD_ADDR_VAR 0 3
11720: PUSH
11721: LD_VAR 0 3
11725: PUSH
11726: LD_VAR 0 2
11730: STR
11731: ST_TO_ADDR
// end ;
11732: GO 11632
11734: POP
11735: POP
// for i = 1 to hardcoreCounter do
11736: LD_ADDR_VAR 0 5
11740: PUSH
11741: DOUBLE
11742: LD_INT 1
11744: DEC
11745: ST_TO_ADDR
11746: LD_EXP 45
11750: PUSH
11751: FOR_TO
11752: IFFALSE 11857
// begin tmp := 0 ;
11754: LD_ADDR_VAR 0 2
11758: PUSH
11759: LD_STRING 0
11761: ST_TO_ADDR
// if result [ 2 ] then
11762: LD_VAR 0 1
11766: PUSH
11767: LD_INT 2
11769: ARRAY
11770: IFFALSE 11839
// if result [ 2 ] [ 1 ] = 100 + i then
11772: LD_VAR 0 1
11776: PUSH
11777: LD_INT 2
11779: ARRAY
11780: PUSH
11781: LD_INT 1
11783: ARRAY
11784: PUSH
11785: LD_INT 100
11787: PUSH
11788: LD_VAR 0 5
11792: PLUS
11793: EQUAL
11794: IFFALSE 11839
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
11796: LD_ADDR_VAR 0 1
11800: PUSH
11801: LD_VAR 0 1
11805: PPUSH
11806: LD_INT 2
11808: PPUSH
11809: LD_VAR 0 1
11813: PUSH
11814: LD_INT 2
11816: ARRAY
11817: PPUSH
11818: LD_INT 1
11820: PPUSH
11821: CALL_OW 3
11825: PPUSH
11826: CALL_OW 1
11830: ST_TO_ADDR
// tmp := 1 ;
11831: LD_ADDR_VAR 0 2
11835: PUSH
11836: LD_STRING 1
11838: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
11839: LD_ADDR_VAR 0 4
11843: PUSH
11844: LD_VAR 0 4
11848: PUSH
11849: LD_VAR 0 2
11853: STR
11854: ST_TO_ADDR
// end ;
11855: GO 11751
11857: POP
11858: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
11859: LD_STRING getStreamItemsFromMission("
11861: PUSH
11862: LD_VAR 0 3
11866: STR
11867: PUSH
11868: LD_STRING ","
11870: STR
11871: PUSH
11872: LD_VAR 0 4
11876: STR
11877: PUSH
11878: LD_STRING ")
11880: STR
11881: PPUSH
11882: CALL_OW 559
// end else
11886: GO 11895
// ToLua ( getStreamItemsFromMission("","") ) ;
11888: LD_STRING getStreamItemsFromMission("","")
11890: PPUSH
11891: CALL_OW 559
// end ;
11895: LD_VAR 0 1
11899: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
11900: LD_VAR 0 2
11904: PUSH
11905: LD_INT 100
11907: EQUAL
11908: IFFALSE 12857
// begin if not StreamModeActive then
11910: LD_EXP 43
11914: NOT
11915: IFFALSE 11925
// StreamModeActive := true ;
11917: LD_ADDR_EXP 43
11921: PUSH
11922: LD_INT 1
11924: ST_TO_ADDR
// if p3 = 0 then
11925: LD_VAR 0 3
11929: PUSH
11930: LD_INT 0
11932: EQUAL
11933: IFFALSE 11939
// InitStreamMode ;
11935: CALL 7978 0 0
// if p3 = 1 then
11939: LD_VAR 0 3
11943: PUSH
11944: LD_INT 1
11946: EQUAL
11947: IFFALSE 11957
// sRocket := true ;
11949: LD_ADDR_EXP 48
11953: PUSH
11954: LD_INT 1
11956: ST_TO_ADDR
// if p3 = 2 then
11957: LD_VAR 0 3
11961: PUSH
11962: LD_INT 2
11964: EQUAL
11965: IFFALSE 11975
// sSpeed := true ;
11967: LD_ADDR_EXP 47
11971: PUSH
11972: LD_INT 1
11974: ST_TO_ADDR
// if p3 = 3 then
11975: LD_VAR 0 3
11979: PUSH
11980: LD_INT 3
11982: EQUAL
11983: IFFALSE 11993
// sEngine := true ;
11985: LD_ADDR_EXP 49
11989: PUSH
11990: LD_INT 1
11992: ST_TO_ADDR
// if p3 = 4 then
11993: LD_VAR 0 3
11997: PUSH
11998: LD_INT 4
12000: EQUAL
12001: IFFALSE 12011
// sSpec := true ;
12003: LD_ADDR_EXP 46
12007: PUSH
12008: LD_INT 1
12010: ST_TO_ADDR
// if p3 = 5 then
12011: LD_VAR 0 3
12015: PUSH
12016: LD_INT 5
12018: EQUAL
12019: IFFALSE 12029
// sLevel := true ;
12021: LD_ADDR_EXP 50
12025: PUSH
12026: LD_INT 1
12028: ST_TO_ADDR
// if p3 = 6 then
12029: LD_VAR 0 3
12033: PUSH
12034: LD_INT 6
12036: EQUAL
12037: IFFALSE 12047
// sArmoury := true ;
12039: LD_ADDR_EXP 51
12043: PUSH
12044: LD_INT 1
12046: ST_TO_ADDR
// if p3 = 7 then
12047: LD_VAR 0 3
12051: PUSH
12052: LD_INT 7
12054: EQUAL
12055: IFFALSE 12065
// sRadar := true ;
12057: LD_ADDR_EXP 52
12061: PUSH
12062: LD_INT 1
12064: ST_TO_ADDR
// if p3 = 8 then
12065: LD_VAR 0 3
12069: PUSH
12070: LD_INT 8
12072: EQUAL
12073: IFFALSE 12083
// sBunker := true ;
12075: LD_ADDR_EXP 53
12079: PUSH
12080: LD_INT 1
12082: ST_TO_ADDR
// if p3 = 9 then
12083: LD_VAR 0 3
12087: PUSH
12088: LD_INT 9
12090: EQUAL
12091: IFFALSE 12101
// sHack := true ;
12093: LD_ADDR_EXP 54
12097: PUSH
12098: LD_INT 1
12100: ST_TO_ADDR
// if p3 = 10 then
12101: LD_VAR 0 3
12105: PUSH
12106: LD_INT 10
12108: EQUAL
12109: IFFALSE 12119
// sFire := true ;
12111: LD_ADDR_EXP 55
12115: PUSH
12116: LD_INT 1
12118: ST_TO_ADDR
// if p3 = 11 then
12119: LD_VAR 0 3
12123: PUSH
12124: LD_INT 11
12126: EQUAL
12127: IFFALSE 12137
// sRefresh := true ;
12129: LD_ADDR_EXP 56
12133: PUSH
12134: LD_INT 1
12136: ST_TO_ADDR
// if p3 = 12 then
12137: LD_VAR 0 3
12141: PUSH
12142: LD_INT 12
12144: EQUAL
12145: IFFALSE 12155
// sExp := true ;
12147: LD_ADDR_EXP 57
12151: PUSH
12152: LD_INT 1
12154: ST_TO_ADDR
// if p3 = 13 then
12155: LD_VAR 0 3
12159: PUSH
12160: LD_INT 13
12162: EQUAL
12163: IFFALSE 12173
// sDepot := true ;
12165: LD_ADDR_EXP 58
12169: PUSH
12170: LD_INT 1
12172: ST_TO_ADDR
// if p3 = 14 then
12173: LD_VAR 0 3
12177: PUSH
12178: LD_INT 14
12180: EQUAL
12181: IFFALSE 12191
// sFlag := true ;
12183: LD_ADDR_EXP 59
12187: PUSH
12188: LD_INT 1
12190: ST_TO_ADDR
// if p3 = 15 then
12191: LD_VAR 0 3
12195: PUSH
12196: LD_INT 15
12198: EQUAL
12199: IFFALSE 12209
// sKamikadze := true ;
12201: LD_ADDR_EXP 67
12205: PUSH
12206: LD_INT 1
12208: ST_TO_ADDR
// if p3 = 16 then
12209: LD_VAR 0 3
12213: PUSH
12214: LD_INT 16
12216: EQUAL
12217: IFFALSE 12227
// sTroll := true ;
12219: LD_ADDR_EXP 68
12223: PUSH
12224: LD_INT 1
12226: ST_TO_ADDR
// if p3 = 17 then
12227: LD_VAR 0 3
12231: PUSH
12232: LD_INT 17
12234: EQUAL
12235: IFFALSE 12245
// sSlow := true ;
12237: LD_ADDR_EXP 69
12241: PUSH
12242: LD_INT 1
12244: ST_TO_ADDR
// if p3 = 18 then
12245: LD_VAR 0 3
12249: PUSH
12250: LD_INT 18
12252: EQUAL
12253: IFFALSE 12263
// sLack := true ;
12255: LD_ADDR_EXP 70
12259: PUSH
12260: LD_INT 1
12262: ST_TO_ADDR
// if p3 = 19 then
12263: LD_VAR 0 3
12267: PUSH
12268: LD_INT 19
12270: EQUAL
12271: IFFALSE 12281
// sTank := true ;
12273: LD_ADDR_EXP 72
12277: PUSH
12278: LD_INT 1
12280: ST_TO_ADDR
// if p3 = 20 then
12281: LD_VAR 0 3
12285: PUSH
12286: LD_INT 20
12288: EQUAL
12289: IFFALSE 12299
// sRemote := true ;
12291: LD_ADDR_EXP 73
12295: PUSH
12296: LD_INT 1
12298: ST_TO_ADDR
// if p3 = 21 then
12299: LD_VAR 0 3
12303: PUSH
12304: LD_INT 21
12306: EQUAL
12307: IFFALSE 12317
// sPowell := true ;
12309: LD_ADDR_EXP 74
12313: PUSH
12314: LD_INT 1
12316: ST_TO_ADDR
// if p3 = 22 then
12317: LD_VAR 0 3
12321: PUSH
12322: LD_INT 22
12324: EQUAL
12325: IFFALSE 12335
// sTeleport := true ;
12327: LD_ADDR_EXP 77
12331: PUSH
12332: LD_INT 1
12334: ST_TO_ADDR
// if p3 = 23 then
12335: LD_VAR 0 3
12339: PUSH
12340: LD_INT 23
12342: EQUAL
12343: IFFALSE 12353
// sOilTower := true ;
12345: LD_ADDR_EXP 79
12349: PUSH
12350: LD_INT 1
12352: ST_TO_ADDR
// if p3 = 24 then
12353: LD_VAR 0 3
12357: PUSH
12358: LD_INT 24
12360: EQUAL
12361: IFFALSE 12371
// sShovel := true ;
12363: LD_ADDR_EXP 80
12367: PUSH
12368: LD_INT 1
12370: ST_TO_ADDR
// if p3 = 25 then
12371: LD_VAR 0 3
12375: PUSH
12376: LD_INT 25
12378: EQUAL
12379: IFFALSE 12389
// sSheik := true ;
12381: LD_ADDR_EXP 81
12385: PUSH
12386: LD_INT 1
12388: ST_TO_ADDR
// if p3 = 26 then
12389: LD_VAR 0 3
12393: PUSH
12394: LD_INT 26
12396: EQUAL
12397: IFFALSE 12407
// sEarthquake := true ;
12399: LD_ADDR_EXP 83
12403: PUSH
12404: LD_INT 1
12406: ST_TO_ADDR
// if p3 = 27 then
12407: LD_VAR 0 3
12411: PUSH
12412: LD_INT 27
12414: EQUAL
12415: IFFALSE 12425
// sAI := true ;
12417: LD_ADDR_EXP 84
12421: PUSH
12422: LD_INT 1
12424: ST_TO_ADDR
// if p3 = 28 then
12425: LD_VAR 0 3
12429: PUSH
12430: LD_INT 28
12432: EQUAL
12433: IFFALSE 12443
// sCargo := true ;
12435: LD_ADDR_EXP 87
12439: PUSH
12440: LD_INT 1
12442: ST_TO_ADDR
// if p3 = 29 then
12443: LD_VAR 0 3
12447: PUSH
12448: LD_INT 29
12450: EQUAL
12451: IFFALSE 12461
// sDLaser := true ;
12453: LD_ADDR_EXP 88
12457: PUSH
12458: LD_INT 1
12460: ST_TO_ADDR
// if p3 = 30 then
12461: LD_VAR 0 3
12465: PUSH
12466: LD_INT 30
12468: EQUAL
12469: IFFALSE 12479
// sExchange := true ;
12471: LD_ADDR_EXP 89
12475: PUSH
12476: LD_INT 1
12478: ST_TO_ADDR
// if p3 = 31 then
12479: LD_VAR 0 3
12483: PUSH
12484: LD_INT 31
12486: EQUAL
12487: IFFALSE 12497
// sFac := true ;
12489: LD_ADDR_EXP 90
12493: PUSH
12494: LD_INT 1
12496: ST_TO_ADDR
// if p3 = 32 then
12497: LD_VAR 0 3
12501: PUSH
12502: LD_INT 32
12504: EQUAL
12505: IFFALSE 12515
// sPower := true ;
12507: LD_ADDR_EXP 91
12511: PUSH
12512: LD_INT 1
12514: ST_TO_ADDR
// if p3 = 33 then
12515: LD_VAR 0 3
12519: PUSH
12520: LD_INT 33
12522: EQUAL
12523: IFFALSE 12533
// sRandom := true ;
12525: LD_ADDR_EXP 92
12529: PUSH
12530: LD_INT 1
12532: ST_TO_ADDR
// if p3 = 34 then
12533: LD_VAR 0 3
12537: PUSH
12538: LD_INT 34
12540: EQUAL
12541: IFFALSE 12551
// sShield := true ;
12543: LD_ADDR_EXP 93
12547: PUSH
12548: LD_INT 1
12550: ST_TO_ADDR
// if p3 = 35 then
12551: LD_VAR 0 3
12555: PUSH
12556: LD_INT 35
12558: EQUAL
12559: IFFALSE 12569
// sTime := true ;
12561: LD_ADDR_EXP 94
12565: PUSH
12566: LD_INT 1
12568: ST_TO_ADDR
// if p3 = 36 then
12569: LD_VAR 0 3
12573: PUSH
12574: LD_INT 36
12576: EQUAL
12577: IFFALSE 12587
// sTools := true ;
12579: LD_ADDR_EXP 95
12583: PUSH
12584: LD_INT 1
12586: ST_TO_ADDR
// if p3 = 101 then
12587: LD_VAR 0 3
12591: PUSH
12592: LD_INT 101
12594: EQUAL
12595: IFFALSE 12605
// sSold := true ;
12597: LD_ADDR_EXP 60
12601: PUSH
12602: LD_INT 1
12604: ST_TO_ADDR
// if p3 = 102 then
12605: LD_VAR 0 3
12609: PUSH
12610: LD_INT 102
12612: EQUAL
12613: IFFALSE 12623
// sDiff := true ;
12615: LD_ADDR_EXP 61
12619: PUSH
12620: LD_INT 1
12622: ST_TO_ADDR
// if p3 = 103 then
12623: LD_VAR 0 3
12627: PUSH
12628: LD_INT 103
12630: EQUAL
12631: IFFALSE 12641
// sFog := true ;
12633: LD_ADDR_EXP 64
12637: PUSH
12638: LD_INT 1
12640: ST_TO_ADDR
// if p3 = 104 then
12641: LD_VAR 0 3
12645: PUSH
12646: LD_INT 104
12648: EQUAL
12649: IFFALSE 12659
// sReset := true ;
12651: LD_ADDR_EXP 65
12655: PUSH
12656: LD_INT 1
12658: ST_TO_ADDR
// if p3 = 105 then
12659: LD_VAR 0 3
12663: PUSH
12664: LD_INT 105
12666: EQUAL
12667: IFFALSE 12677
// sSun := true ;
12669: LD_ADDR_EXP 66
12673: PUSH
12674: LD_INT 1
12676: ST_TO_ADDR
// if p3 = 106 then
12677: LD_VAR 0 3
12681: PUSH
12682: LD_INT 106
12684: EQUAL
12685: IFFALSE 12695
// sTiger := true ;
12687: LD_ADDR_EXP 62
12691: PUSH
12692: LD_INT 1
12694: ST_TO_ADDR
// if p3 = 107 then
12695: LD_VAR 0 3
12699: PUSH
12700: LD_INT 107
12702: EQUAL
12703: IFFALSE 12713
// sBomb := true ;
12705: LD_ADDR_EXP 63
12709: PUSH
12710: LD_INT 1
12712: ST_TO_ADDR
// if p3 = 108 then
12713: LD_VAR 0 3
12717: PUSH
12718: LD_INT 108
12720: EQUAL
12721: IFFALSE 12731
// sWound := true ;
12723: LD_ADDR_EXP 71
12727: PUSH
12728: LD_INT 1
12730: ST_TO_ADDR
// if p3 = 109 then
12731: LD_VAR 0 3
12735: PUSH
12736: LD_INT 109
12738: EQUAL
12739: IFFALSE 12749
// sBetray := true ;
12741: LD_ADDR_EXP 75
12745: PUSH
12746: LD_INT 1
12748: ST_TO_ADDR
// if p3 = 110 then
12749: LD_VAR 0 3
12753: PUSH
12754: LD_INT 110
12756: EQUAL
12757: IFFALSE 12767
// sContamin := true ;
12759: LD_ADDR_EXP 76
12763: PUSH
12764: LD_INT 1
12766: ST_TO_ADDR
// if p3 = 111 then
12767: LD_VAR 0 3
12771: PUSH
12772: LD_INT 111
12774: EQUAL
12775: IFFALSE 12785
// sOil := true ;
12777: LD_ADDR_EXP 78
12781: PUSH
12782: LD_INT 1
12784: ST_TO_ADDR
// if p3 = 112 then
12785: LD_VAR 0 3
12789: PUSH
12790: LD_INT 112
12792: EQUAL
12793: IFFALSE 12803
// sStu := true ;
12795: LD_ADDR_EXP 82
12799: PUSH
12800: LD_INT 1
12802: ST_TO_ADDR
// if p3 = 113 then
12803: LD_VAR 0 3
12807: PUSH
12808: LD_INT 113
12810: EQUAL
12811: IFFALSE 12821
// sBazooka := true ;
12813: LD_ADDR_EXP 85
12817: PUSH
12818: LD_INT 1
12820: ST_TO_ADDR
// if p3 = 114 then
12821: LD_VAR 0 3
12825: PUSH
12826: LD_INT 114
12828: EQUAL
12829: IFFALSE 12839
// sMortar := true ;
12831: LD_ADDR_EXP 86
12835: PUSH
12836: LD_INT 1
12838: ST_TO_ADDR
// if p3 = 115 then
12839: LD_VAR 0 3
12843: PUSH
12844: LD_INT 115
12846: EQUAL
12847: IFFALSE 12857
// sRanger := true ;
12849: LD_ADDR_EXP 96
12853: PUSH
12854: LD_INT 1
12856: ST_TO_ADDR
// end ; end ;
12857: PPOPN 6
12859: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12860: LD_EXP 43
12864: PUSH
12865: LD_EXP 48
12869: AND
12870: IFFALSE 12994
12872: GO 12874
12874: DISABLE
12875: LD_INT 0
12877: PPUSH
12878: PPUSH
// begin enable ;
12879: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12880: LD_ADDR_VAR 0 2
12884: PUSH
12885: LD_INT 22
12887: PUSH
12888: LD_OWVAR 2
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: PUSH
12897: LD_INT 2
12899: PUSH
12900: LD_INT 34
12902: PUSH
12903: LD_INT 7
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 34
12912: PUSH
12913: LD_INT 45
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 34
12922: PUSH
12923: LD_INT 28
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 34
12932: PUSH
12933: LD_INT 47
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PPUSH
12951: CALL_OW 69
12955: ST_TO_ADDR
// if not tmp then
12956: LD_VAR 0 2
12960: NOT
12961: IFFALSE 12965
// exit ;
12963: GO 12994
// for i in tmp do
12965: LD_ADDR_VAR 0 1
12969: PUSH
12970: LD_VAR 0 2
12974: PUSH
12975: FOR_IN
12976: IFFALSE 12992
// begin SetLives ( i , 0 ) ;
12978: LD_VAR 0 1
12982: PPUSH
12983: LD_INT 0
12985: PPUSH
12986: CALL_OW 234
// end ;
12990: GO 12975
12992: POP
12993: POP
// end ;
12994: PPOPN 2
12996: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12997: LD_EXP 43
13001: PUSH
13002: LD_EXP 49
13006: AND
13007: IFFALSE 13091
13009: GO 13011
13011: DISABLE
13012: LD_INT 0
13014: PPUSH
13015: PPUSH
// begin enable ;
13016: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13017: LD_ADDR_VAR 0 2
13021: PUSH
13022: LD_INT 22
13024: PUSH
13025: LD_OWVAR 2
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 32
13036: PUSH
13037: LD_INT 3
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: PPUSH
13048: CALL_OW 69
13052: ST_TO_ADDR
// if not tmp then
13053: LD_VAR 0 2
13057: NOT
13058: IFFALSE 13062
// exit ;
13060: GO 13091
// for i in tmp do
13062: LD_ADDR_VAR 0 1
13066: PUSH
13067: LD_VAR 0 2
13071: PUSH
13072: FOR_IN
13073: IFFALSE 13089
// begin SetLives ( i , 0 ) ;
13075: LD_VAR 0 1
13079: PPUSH
13080: LD_INT 0
13082: PPUSH
13083: CALL_OW 234
// end ;
13087: GO 13072
13089: POP
13090: POP
// end ;
13091: PPOPN 2
13093: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13094: LD_EXP 43
13098: PUSH
13099: LD_EXP 46
13103: AND
13104: IFFALSE 13197
13106: GO 13108
13108: DISABLE
13109: LD_INT 0
13111: PPUSH
// begin enable ;
13112: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13113: LD_ADDR_VAR 0 1
13117: PUSH
13118: LD_INT 22
13120: PUSH
13121: LD_OWVAR 2
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: LD_INT 25
13135: PUSH
13136: LD_INT 5
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PUSH
13143: LD_INT 25
13145: PUSH
13146: LD_INT 9
13148: PUSH
13149: EMPTY
13150: LIST
13151: LIST
13152: PUSH
13153: LD_INT 25
13155: PUSH
13156: LD_INT 8
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PPUSH
13173: CALL_OW 69
13177: PUSH
13178: FOR_IN
13179: IFFALSE 13195
// begin SetClass ( i , 1 ) ;
13181: LD_VAR 0 1
13185: PPUSH
13186: LD_INT 1
13188: PPUSH
13189: CALL_OW 336
// end ;
13193: GO 13178
13195: POP
13196: POP
// end ;
13197: PPOPN 1
13199: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13200: LD_EXP 43
13204: PUSH
13205: LD_EXP 47
13209: AND
13210: PUSH
13211: LD_OWVAR 65
13215: PUSH
13216: LD_INT 7
13218: LESS
13219: AND
13220: IFFALSE 13234
13222: GO 13224
13224: DISABLE
// begin enable ;
13225: ENABLE
// game_speed := 7 ;
13226: LD_ADDR_OWVAR 65
13230: PUSH
13231: LD_INT 7
13233: ST_TO_ADDR
// end ;
13234: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13235: LD_EXP 43
13239: PUSH
13240: LD_EXP 50
13244: AND
13245: IFFALSE 13447
13247: GO 13249
13249: DISABLE
13250: LD_INT 0
13252: PPUSH
13253: PPUSH
13254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13255: LD_ADDR_VAR 0 3
13259: PUSH
13260: LD_INT 81
13262: PUSH
13263: LD_OWVAR 2
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PUSH
13272: LD_INT 21
13274: PUSH
13275: LD_INT 1
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PPUSH
13286: CALL_OW 69
13290: ST_TO_ADDR
// if not tmp then
13291: LD_VAR 0 3
13295: NOT
13296: IFFALSE 13300
// exit ;
13298: GO 13447
// if tmp > 5 then
13300: LD_VAR 0 3
13304: PUSH
13305: LD_INT 5
13307: GREATER
13308: IFFALSE 13320
// k := 5 else
13310: LD_ADDR_VAR 0 2
13314: PUSH
13315: LD_INT 5
13317: ST_TO_ADDR
13318: GO 13330
// k := tmp ;
13320: LD_ADDR_VAR 0 2
13324: PUSH
13325: LD_VAR 0 3
13329: ST_TO_ADDR
// for i := 1 to k do
13330: LD_ADDR_VAR 0 1
13334: PUSH
13335: DOUBLE
13336: LD_INT 1
13338: DEC
13339: ST_TO_ADDR
13340: LD_VAR 0 2
13344: PUSH
13345: FOR_TO
13346: IFFALSE 13445
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13348: LD_VAR 0 3
13352: PUSH
13353: LD_VAR 0 1
13357: ARRAY
13358: PPUSH
13359: LD_VAR 0 1
13363: PUSH
13364: LD_INT 4
13366: MOD
13367: PUSH
13368: LD_INT 1
13370: PLUS
13371: PPUSH
13372: CALL_OW 259
13376: PUSH
13377: LD_INT 10
13379: LESS
13380: IFFALSE 13443
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13382: LD_VAR 0 3
13386: PUSH
13387: LD_VAR 0 1
13391: ARRAY
13392: PPUSH
13393: LD_VAR 0 1
13397: PUSH
13398: LD_INT 4
13400: MOD
13401: PUSH
13402: LD_INT 1
13404: PLUS
13405: PPUSH
13406: LD_VAR 0 3
13410: PUSH
13411: LD_VAR 0 1
13415: ARRAY
13416: PPUSH
13417: LD_VAR 0 1
13421: PUSH
13422: LD_INT 4
13424: MOD
13425: PUSH
13426: LD_INT 1
13428: PLUS
13429: PPUSH
13430: CALL_OW 259
13434: PUSH
13435: LD_INT 1
13437: PLUS
13438: PPUSH
13439: CALL_OW 237
13443: GO 13345
13445: POP
13446: POP
// end ;
13447: PPOPN 3
13449: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13450: LD_EXP 43
13454: PUSH
13455: LD_EXP 51
13459: AND
13460: IFFALSE 13480
13462: GO 13464
13464: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13465: LD_INT 4
13467: PPUSH
13468: LD_OWVAR 2
13472: PPUSH
13473: LD_INT 0
13475: PPUSH
13476: CALL_OW 324
13480: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13481: LD_EXP 43
13485: PUSH
13486: LD_EXP 80
13490: AND
13491: IFFALSE 13511
13493: GO 13495
13495: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13496: LD_INT 19
13498: PPUSH
13499: LD_OWVAR 2
13503: PPUSH
13504: LD_INT 0
13506: PPUSH
13507: CALL_OW 324
13511: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13512: LD_EXP 43
13516: PUSH
13517: LD_EXP 52
13521: AND
13522: IFFALSE 13624
13524: GO 13526
13526: DISABLE
13527: LD_INT 0
13529: PPUSH
13530: PPUSH
// begin enable ;
13531: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13532: LD_ADDR_VAR 0 2
13536: PUSH
13537: LD_INT 22
13539: PUSH
13540: LD_OWVAR 2
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: PUSH
13549: LD_INT 2
13551: PUSH
13552: LD_INT 34
13554: PUSH
13555: LD_INT 11
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: PUSH
13562: LD_INT 34
13564: PUSH
13565: LD_INT 30
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: LIST
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PPUSH
13581: CALL_OW 69
13585: ST_TO_ADDR
// if not tmp then
13586: LD_VAR 0 2
13590: NOT
13591: IFFALSE 13595
// exit ;
13593: GO 13624
// for i in tmp do
13595: LD_ADDR_VAR 0 1
13599: PUSH
13600: LD_VAR 0 2
13604: PUSH
13605: FOR_IN
13606: IFFALSE 13622
// begin SetLives ( i , 0 ) ;
13608: LD_VAR 0 1
13612: PPUSH
13613: LD_INT 0
13615: PPUSH
13616: CALL_OW 234
// end ;
13620: GO 13605
13622: POP
13623: POP
// end ;
13624: PPOPN 2
13626: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13627: LD_EXP 43
13631: PUSH
13632: LD_EXP 53
13636: AND
13637: IFFALSE 13657
13639: GO 13641
13641: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13642: LD_INT 32
13644: PPUSH
13645: LD_OWVAR 2
13649: PPUSH
13650: LD_INT 0
13652: PPUSH
13653: CALL_OW 324
13657: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13658: LD_EXP 43
13662: PUSH
13663: LD_EXP 54
13667: AND
13668: IFFALSE 13849
13670: GO 13672
13672: DISABLE
13673: LD_INT 0
13675: PPUSH
13676: PPUSH
13677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13678: LD_ADDR_VAR 0 2
13682: PUSH
13683: LD_INT 22
13685: PUSH
13686: LD_OWVAR 2
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: PUSH
13695: LD_INT 33
13697: PUSH
13698: LD_INT 3
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PPUSH
13709: CALL_OW 69
13713: ST_TO_ADDR
// if not tmp then
13714: LD_VAR 0 2
13718: NOT
13719: IFFALSE 13723
// exit ;
13721: GO 13849
// side := 0 ;
13723: LD_ADDR_VAR 0 3
13727: PUSH
13728: LD_INT 0
13730: ST_TO_ADDR
// for i := 1 to 8 do
13731: LD_ADDR_VAR 0 1
13735: PUSH
13736: DOUBLE
13737: LD_INT 1
13739: DEC
13740: ST_TO_ADDR
13741: LD_INT 8
13743: PUSH
13744: FOR_TO
13745: IFFALSE 13793
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13747: LD_OWVAR 2
13751: PUSH
13752: LD_VAR 0 1
13756: NONEQUAL
13757: PUSH
13758: LD_OWVAR 2
13762: PPUSH
13763: LD_VAR 0 1
13767: PPUSH
13768: CALL_OW 81
13772: PUSH
13773: LD_INT 2
13775: EQUAL
13776: AND
13777: IFFALSE 13791
// begin side := i ;
13779: LD_ADDR_VAR 0 3
13783: PUSH
13784: LD_VAR 0 1
13788: ST_TO_ADDR
// break ;
13789: GO 13793
// end ;
13791: GO 13744
13793: POP
13794: POP
// if not side then
13795: LD_VAR 0 3
13799: NOT
13800: IFFALSE 13804
// exit ;
13802: GO 13849
// for i := 1 to tmp do
13804: LD_ADDR_VAR 0 1
13808: PUSH
13809: DOUBLE
13810: LD_INT 1
13812: DEC
13813: ST_TO_ADDR
13814: LD_VAR 0 2
13818: PUSH
13819: FOR_TO
13820: IFFALSE 13847
// if Prob ( 60 ) then
13822: LD_INT 60
13824: PPUSH
13825: CALL_OW 13
13829: IFFALSE 13845
// SetSide ( i , side ) ;
13831: LD_VAR 0 1
13835: PPUSH
13836: LD_VAR 0 3
13840: PPUSH
13841: CALL_OW 235
13845: GO 13819
13847: POP
13848: POP
// end ;
13849: PPOPN 3
13851: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13852: LD_EXP 43
13856: PUSH
13857: LD_EXP 56
13861: AND
13862: IFFALSE 13981
13864: GO 13866
13866: DISABLE
13867: LD_INT 0
13869: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13870: LD_ADDR_VAR 0 1
13874: PUSH
13875: LD_INT 22
13877: PUSH
13878: LD_OWVAR 2
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: PUSH
13887: LD_INT 21
13889: PUSH
13890: LD_INT 1
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: LD_INT 3
13899: PUSH
13900: LD_INT 23
13902: PUSH
13903: LD_INT 0
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: LIST
13918: PPUSH
13919: CALL_OW 69
13923: PUSH
13924: FOR_IN
13925: IFFALSE 13979
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13927: LD_VAR 0 1
13931: PPUSH
13932: CALL_OW 257
13936: PUSH
13937: LD_INT 1
13939: PUSH
13940: LD_INT 2
13942: PUSH
13943: LD_INT 3
13945: PUSH
13946: LD_INT 4
13948: PUSH
13949: EMPTY
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: IN
13955: IFFALSE 13977
// SetClass ( un , rand ( 1 , 4 ) ) ;
13957: LD_VAR 0 1
13961: PPUSH
13962: LD_INT 1
13964: PPUSH
13965: LD_INT 4
13967: PPUSH
13968: CALL_OW 12
13972: PPUSH
13973: CALL_OW 336
13977: GO 13924
13979: POP
13980: POP
// end ;
13981: PPOPN 1
13983: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13984: LD_EXP 43
13988: PUSH
13989: LD_EXP 55
13993: AND
13994: IFFALSE 14073
13996: GO 13998
13998: DISABLE
13999: LD_INT 0
14001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14002: LD_ADDR_VAR 0 1
14006: PUSH
14007: LD_INT 22
14009: PUSH
14010: LD_OWVAR 2
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: LD_INT 21
14021: PUSH
14022: LD_INT 3
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: PPUSH
14033: CALL_OW 69
14037: ST_TO_ADDR
// if not tmp then
14038: LD_VAR 0 1
14042: NOT
14043: IFFALSE 14047
// exit ;
14045: GO 14073
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14047: LD_VAR 0 1
14051: PUSH
14052: LD_INT 1
14054: PPUSH
14055: LD_VAR 0 1
14059: PPUSH
14060: CALL_OW 12
14064: ARRAY
14065: PPUSH
14066: LD_INT 100
14068: PPUSH
14069: CALL_OW 234
// end ;
14073: PPOPN 1
14075: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14076: LD_EXP 43
14080: PUSH
14081: LD_EXP 57
14085: AND
14086: IFFALSE 14184
14088: GO 14090
14090: DISABLE
14091: LD_INT 0
14093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14094: LD_ADDR_VAR 0 1
14098: PUSH
14099: LD_INT 22
14101: PUSH
14102: LD_OWVAR 2
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 21
14113: PUSH
14114: LD_INT 1
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: PPUSH
14125: CALL_OW 69
14129: ST_TO_ADDR
// if not tmp then
14130: LD_VAR 0 1
14134: NOT
14135: IFFALSE 14139
// exit ;
14137: GO 14184
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14139: LD_VAR 0 1
14143: PUSH
14144: LD_INT 1
14146: PPUSH
14147: LD_VAR 0 1
14151: PPUSH
14152: CALL_OW 12
14156: ARRAY
14157: PPUSH
14158: LD_INT 1
14160: PPUSH
14161: LD_INT 4
14163: PPUSH
14164: CALL_OW 12
14168: PPUSH
14169: LD_INT 3000
14171: PPUSH
14172: LD_INT 9000
14174: PPUSH
14175: CALL_OW 12
14179: PPUSH
14180: CALL_OW 492
// end ;
14184: PPOPN 1
14186: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14187: LD_EXP 43
14191: PUSH
14192: LD_EXP 58
14196: AND
14197: IFFALSE 14217
14199: GO 14201
14201: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14202: LD_INT 1
14204: PPUSH
14205: LD_OWVAR 2
14209: PPUSH
14210: LD_INT 0
14212: PPUSH
14213: CALL_OW 324
14217: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14218: LD_EXP 43
14222: PUSH
14223: LD_EXP 59
14227: AND
14228: IFFALSE 14311
14230: GO 14232
14232: DISABLE
14233: LD_INT 0
14235: PPUSH
14236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14237: LD_ADDR_VAR 0 2
14241: PUSH
14242: LD_INT 22
14244: PUSH
14245: LD_OWVAR 2
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: PUSH
14254: LD_INT 21
14256: PUSH
14257: LD_INT 3
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PPUSH
14268: CALL_OW 69
14272: ST_TO_ADDR
// if not tmp then
14273: LD_VAR 0 2
14277: NOT
14278: IFFALSE 14282
// exit ;
14280: GO 14311
// for i in tmp do
14282: LD_ADDR_VAR 0 1
14286: PUSH
14287: LD_VAR 0 2
14291: PUSH
14292: FOR_IN
14293: IFFALSE 14309
// SetBLevel ( i , 10 ) ;
14295: LD_VAR 0 1
14299: PPUSH
14300: LD_INT 10
14302: PPUSH
14303: CALL_OW 241
14307: GO 14292
14309: POP
14310: POP
// end ;
14311: PPOPN 2
14313: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14314: LD_EXP 43
14318: PUSH
14319: LD_EXP 60
14323: AND
14324: IFFALSE 14435
14326: GO 14328
14328: DISABLE
14329: LD_INT 0
14331: PPUSH
14332: PPUSH
14333: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14334: LD_ADDR_VAR 0 3
14338: PUSH
14339: LD_INT 22
14341: PUSH
14342: LD_OWVAR 2
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: LD_INT 25
14353: PUSH
14354: LD_INT 1
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PPUSH
14365: CALL_OW 69
14369: ST_TO_ADDR
// if not tmp then
14370: LD_VAR 0 3
14374: NOT
14375: IFFALSE 14379
// exit ;
14377: GO 14435
// un := tmp [ rand ( 1 , tmp ) ] ;
14379: LD_ADDR_VAR 0 2
14383: PUSH
14384: LD_VAR 0 3
14388: PUSH
14389: LD_INT 1
14391: PPUSH
14392: LD_VAR 0 3
14396: PPUSH
14397: CALL_OW 12
14401: ARRAY
14402: ST_TO_ADDR
// if Crawls ( un ) then
14403: LD_VAR 0 2
14407: PPUSH
14408: CALL_OW 318
14412: IFFALSE 14423
// ComWalk ( un ) ;
14414: LD_VAR 0 2
14418: PPUSH
14419: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14423: LD_VAR 0 2
14427: PPUSH
14428: LD_INT 5
14430: PPUSH
14431: CALL_OW 336
// end ;
14435: PPOPN 3
14437: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
14438: LD_EXP 43
14442: PUSH
14443: LD_EXP 61
14447: AND
14448: PUSH
14449: LD_OWVAR 67
14453: PUSH
14454: LD_INT 3
14456: LESS
14457: AND
14458: IFFALSE 14477
14460: GO 14462
14462: DISABLE
// Difficulty := Difficulty + 1 ;
14463: LD_ADDR_OWVAR 67
14467: PUSH
14468: LD_OWVAR 67
14472: PUSH
14473: LD_INT 1
14475: PLUS
14476: ST_TO_ADDR
14477: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14478: LD_EXP 43
14482: PUSH
14483: LD_EXP 62
14487: AND
14488: IFFALSE 14591
14490: GO 14492
14492: DISABLE
14493: LD_INT 0
14495: PPUSH
// begin for i := 1 to 5 do
14496: LD_ADDR_VAR 0 1
14500: PUSH
14501: DOUBLE
14502: LD_INT 1
14504: DEC
14505: ST_TO_ADDR
14506: LD_INT 5
14508: PUSH
14509: FOR_TO
14510: IFFALSE 14589
// begin uc_nation := nation_nature ;
14512: LD_ADDR_OWVAR 21
14516: PUSH
14517: LD_INT 0
14519: ST_TO_ADDR
// uc_side := 0 ;
14520: LD_ADDR_OWVAR 20
14524: PUSH
14525: LD_INT 0
14527: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14528: LD_ADDR_OWVAR 29
14532: PUSH
14533: LD_INT 12
14535: PUSH
14536: LD_INT 12
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: ST_TO_ADDR
// hc_agressivity := 20 ;
14543: LD_ADDR_OWVAR 35
14547: PUSH
14548: LD_INT 20
14550: ST_TO_ADDR
// hc_class := class_tiger ;
14551: LD_ADDR_OWVAR 28
14555: PUSH
14556: LD_INT 14
14558: ST_TO_ADDR
// hc_gallery :=  ;
14559: LD_ADDR_OWVAR 33
14563: PUSH
14564: LD_STRING 
14566: ST_TO_ADDR
// hc_name :=  ;
14567: LD_ADDR_OWVAR 26
14571: PUSH
14572: LD_STRING 
14574: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14575: CALL_OW 44
14579: PPUSH
14580: LD_INT 0
14582: PPUSH
14583: CALL_OW 51
// end ;
14587: GO 14509
14589: POP
14590: POP
// end ;
14591: PPOPN 1
14593: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14594: LD_EXP 43
14598: PUSH
14599: LD_EXP 63
14603: AND
14604: IFFALSE 14613
14606: GO 14608
14608: DISABLE
// StreamSibBomb ;
14609: CALL 14614 0 0
14613: END
// export function StreamSibBomb ; var i , x , y ; begin
14614: LD_INT 0
14616: PPUSH
14617: PPUSH
14618: PPUSH
14619: PPUSH
// result := false ;
14620: LD_ADDR_VAR 0 1
14624: PUSH
14625: LD_INT 0
14627: ST_TO_ADDR
// for i := 1 to 16 do
14628: LD_ADDR_VAR 0 2
14632: PUSH
14633: DOUBLE
14634: LD_INT 1
14636: DEC
14637: ST_TO_ADDR
14638: LD_INT 16
14640: PUSH
14641: FOR_TO
14642: IFFALSE 14841
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14644: LD_ADDR_VAR 0 3
14648: PUSH
14649: LD_INT 10
14651: PUSH
14652: LD_INT 20
14654: PUSH
14655: LD_INT 30
14657: PUSH
14658: LD_INT 40
14660: PUSH
14661: LD_INT 50
14663: PUSH
14664: LD_INT 60
14666: PUSH
14667: LD_INT 70
14669: PUSH
14670: LD_INT 80
14672: PUSH
14673: LD_INT 90
14675: PUSH
14676: LD_INT 100
14678: PUSH
14679: LD_INT 110
14681: PUSH
14682: LD_INT 120
14684: PUSH
14685: LD_INT 130
14687: PUSH
14688: LD_INT 140
14690: PUSH
14691: LD_INT 150
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: PUSH
14711: LD_INT 1
14713: PPUSH
14714: LD_INT 15
14716: PPUSH
14717: CALL_OW 12
14721: ARRAY
14722: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14723: LD_ADDR_VAR 0 4
14727: PUSH
14728: LD_INT 10
14730: PUSH
14731: LD_INT 20
14733: PUSH
14734: LD_INT 30
14736: PUSH
14737: LD_INT 40
14739: PUSH
14740: LD_INT 50
14742: PUSH
14743: LD_INT 60
14745: PUSH
14746: LD_INT 70
14748: PUSH
14749: LD_INT 80
14751: PUSH
14752: LD_INT 90
14754: PUSH
14755: LD_INT 100
14757: PUSH
14758: LD_INT 110
14760: PUSH
14761: LD_INT 120
14763: PUSH
14764: LD_INT 130
14766: PUSH
14767: LD_INT 140
14769: PUSH
14770: LD_INT 150
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: PUSH
14790: LD_INT 1
14792: PPUSH
14793: LD_INT 15
14795: PPUSH
14796: CALL_OW 12
14800: ARRAY
14801: ST_TO_ADDR
// if ValidHex ( x , y ) then
14802: LD_VAR 0 3
14806: PPUSH
14807: LD_VAR 0 4
14811: PPUSH
14812: CALL_OW 488
14816: IFFALSE 14839
// begin result := [ x , y ] ;
14818: LD_ADDR_VAR 0 1
14822: PUSH
14823: LD_VAR 0 3
14827: PUSH
14828: LD_VAR 0 4
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: ST_TO_ADDR
// break ;
14837: GO 14841
// end ; end ;
14839: GO 14641
14841: POP
14842: POP
// if result then
14843: LD_VAR 0 1
14847: IFFALSE 14907
// begin ToLua ( playSibBomb() ) ;
14849: LD_STRING playSibBomb()
14851: PPUSH
14852: CALL_OW 559
// wait ( 0 0$14 ) ;
14856: LD_INT 490
14858: PPUSH
14859: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14863: LD_VAR 0 1
14867: PUSH
14868: LD_INT 1
14870: ARRAY
14871: PPUSH
14872: LD_VAR 0 1
14876: PUSH
14877: LD_INT 2
14879: ARRAY
14880: PPUSH
14881: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14885: LD_VAR 0 1
14889: PUSH
14890: LD_INT 1
14892: ARRAY
14893: PPUSH
14894: LD_VAR 0 1
14898: PUSH
14899: LD_INT 2
14901: ARRAY
14902: PPUSH
14903: CALL_OW 429
// end ; end ;
14907: LD_VAR 0 1
14911: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14912: LD_EXP 43
14916: PUSH
14917: LD_EXP 65
14921: AND
14922: IFFALSE 14934
14924: GO 14926
14926: DISABLE
// YouLost (  ) ;
14927: LD_STRING 
14929: PPUSH
14930: CALL_OW 104
14934: END
// every 0 0$1 trigger StreamModeActive and sFog do
14935: LD_EXP 43
14939: PUSH
14940: LD_EXP 64
14944: AND
14945: IFFALSE 14959
14947: GO 14949
14949: DISABLE
// FogOff ( your_side ) ;
14950: LD_OWVAR 2
14954: PPUSH
14955: CALL_OW 344
14959: END
// every 0 0$1 trigger StreamModeActive and sSun do
14960: LD_EXP 43
14964: PUSH
14965: LD_EXP 66
14969: AND
14970: IFFALSE 14998
14972: GO 14974
14974: DISABLE
// begin solar_recharge_percent := 0 ;
14975: LD_ADDR_OWVAR 79
14979: PUSH
14980: LD_INT 0
14982: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14983: LD_INT 10500
14985: PPUSH
14986: CALL_OW 67
// solar_recharge_percent := 100 ;
14990: LD_ADDR_OWVAR 79
14994: PUSH
14995: LD_INT 100
14997: ST_TO_ADDR
// end ;
14998: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14999: LD_EXP 43
15003: PUSH
15004: LD_EXP 67
15008: AND
15009: IFFALSE 15248
15011: GO 15013
15013: DISABLE
15014: LD_INT 0
15016: PPUSH
15017: PPUSH
15018: PPUSH
// begin tmp := [ ] ;
15019: LD_ADDR_VAR 0 3
15023: PUSH
15024: EMPTY
15025: ST_TO_ADDR
// for i := 1 to 6 do
15026: LD_ADDR_VAR 0 1
15030: PUSH
15031: DOUBLE
15032: LD_INT 1
15034: DEC
15035: ST_TO_ADDR
15036: LD_INT 6
15038: PUSH
15039: FOR_TO
15040: IFFALSE 15145
// begin uc_nation := nation_nature ;
15042: LD_ADDR_OWVAR 21
15046: PUSH
15047: LD_INT 0
15049: ST_TO_ADDR
// uc_side := 0 ;
15050: LD_ADDR_OWVAR 20
15054: PUSH
15055: LD_INT 0
15057: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15058: LD_ADDR_OWVAR 29
15062: PUSH
15063: LD_INT 12
15065: PUSH
15066: LD_INT 12
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: ST_TO_ADDR
// hc_agressivity := 20 ;
15073: LD_ADDR_OWVAR 35
15077: PUSH
15078: LD_INT 20
15080: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15081: LD_ADDR_OWVAR 28
15085: PUSH
15086: LD_INT 17
15088: ST_TO_ADDR
// hc_gallery :=  ;
15089: LD_ADDR_OWVAR 33
15093: PUSH
15094: LD_STRING 
15096: ST_TO_ADDR
// hc_name :=  ;
15097: LD_ADDR_OWVAR 26
15101: PUSH
15102: LD_STRING 
15104: ST_TO_ADDR
// un := CreateHuman ;
15105: LD_ADDR_VAR 0 2
15109: PUSH
15110: CALL_OW 44
15114: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15115: LD_VAR 0 2
15119: PPUSH
15120: LD_INT 1
15122: PPUSH
15123: CALL_OW 51
// tmp := tmp ^ un ;
15127: LD_ADDR_VAR 0 3
15131: PUSH
15132: LD_VAR 0 3
15136: PUSH
15137: LD_VAR 0 2
15141: ADD
15142: ST_TO_ADDR
// end ;
15143: GO 15039
15145: POP
15146: POP
// repeat wait ( 0 0$1 ) ;
15147: LD_INT 35
15149: PPUSH
15150: CALL_OW 67
// for un in tmp do
15154: LD_ADDR_VAR 0 2
15158: PUSH
15159: LD_VAR 0 3
15163: PUSH
15164: FOR_IN
15165: IFFALSE 15239
// begin if IsDead ( un ) then
15167: LD_VAR 0 2
15171: PPUSH
15172: CALL_OW 301
15176: IFFALSE 15196
// begin tmp := tmp diff un ;
15178: LD_ADDR_VAR 0 3
15182: PUSH
15183: LD_VAR 0 3
15187: PUSH
15188: LD_VAR 0 2
15192: DIFF
15193: ST_TO_ADDR
// continue ;
15194: GO 15164
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15196: LD_VAR 0 2
15200: PPUSH
15201: LD_INT 3
15203: PUSH
15204: LD_INT 22
15206: PUSH
15207: LD_INT 0
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: PPUSH
15218: CALL_OW 69
15222: PPUSH
15223: LD_VAR 0 2
15227: PPUSH
15228: CALL_OW 74
15232: PPUSH
15233: CALL_OW 115
// end ;
15237: GO 15164
15239: POP
15240: POP
// until not tmp ;
15241: LD_VAR 0 3
15245: NOT
15246: IFFALSE 15147
// end ;
15248: PPOPN 3
15250: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15251: LD_EXP 43
15255: PUSH
15256: LD_EXP 68
15260: AND
15261: IFFALSE 15315
15263: GO 15265
15265: DISABLE
// begin ToLua ( displayTroll(); ) ;
15266: LD_STRING displayTroll();
15268: PPUSH
15269: CALL_OW 559
// wait ( 3 3$00 ) ;
15273: LD_INT 6300
15275: PPUSH
15276: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15280: LD_STRING hideTroll();
15282: PPUSH
15283: CALL_OW 559
// wait ( 1 1$00 ) ;
15287: LD_INT 2100
15289: PPUSH
15290: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15294: LD_STRING displayTroll();
15296: PPUSH
15297: CALL_OW 559
// wait ( 1 1$00 ) ;
15301: LD_INT 2100
15303: PPUSH
15304: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15308: LD_STRING hideTroll();
15310: PPUSH
15311: CALL_OW 559
// end ;
15315: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15316: LD_EXP 43
15320: PUSH
15321: LD_EXP 69
15325: AND
15326: IFFALSE 15389
15328: GO 15330
15330: DISABLE
15331: LD_INT 0
15333: PPUSH
// begin p := 0 ;
15334: LD_ADDR_VAR 0 1
15338: PUSH
15339: LD_INT 0
15341: ST_TO_ADDR
// repeat game_speed := 1 ;
15342: LD_ADDR_OWVAR 65
15346: PUSH
15347: LD_INT 1
15349: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15350: LD_INT 35
15352: PPUSH
15353: CALL_OW 67
// p := p + 1 ;
15357: LD_ADDR_VAR 0 1
15361: PUSH
15362: LD_VAR 0 1
15366: PUSH
15367: LD_INT 1
15369: PLUS
15370: ST_TO_ADDR
// until p >= 60 ;
15371: LD_VAR 0 1
15375: PUSH
15376: LD_INT 60
15378: GREATEREQUAL
15379: IFFALSE 15342
// game_speed := 4 ;
15381: LD_ADDR_OWVAR 65
15385: PUSH
15386: LD_INT 4
15388: ST_TO_ADDR
// end ;
15389: PPOPN 1
15391: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15392: LD_EXP 43
15396: PUSH
15397: LD_EXP 70
15401: AND
15402: IFFALSE 15548
15404: GO 15406
15406: DISABLE
15407: LD_INT 0
15409: PPUSH
15410: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15411: LD_ADDR_VAR 0 1
15415: PUSH
15416: LD_INT 22
15418: PUSH
15419: LD_OWVAR 2
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: LD_INT 2
15430: PUSH
15431: LD_INT 30
15433: PUSH
15434: LD_INT 0
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: LD_INT 30
15443: PUSH
15444: LD_INT 1
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: LIST
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PPUSH
15460: CALL_OW 69
15464: ST_TO_ADDR
// if not depot then
15465: LD_VAR 0 1
15469: NOT
15470: IFFALSE 15474
// exit ;
15472: GO 15548
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15474: LD_ADDR_VAR 0 2
15478: PUSH
15479: LD_VAR 0 1
15483: PUSH
15484: LD_INT 1
15486: PPUSH
15487: LD_VAR 0 1
15491: PPUSH
15492: CALL_OW 12
15496: ARRAY
15497: PPUSH
15498: CALL_OW 274
15502: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15503: LD_VAR 0 2
15507: PPUSH
15508: LD_INT 1
15510: PPUSH
15511: LD_INT 0
15513: PPUSH
15514: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15518: LD_VAR 0 2
15522: PPUSH
15523: LD_INT 2
15525: PPUSH
15526: LD_INT 0
15528: PPUSH
15529: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15533: LD_VAR 0 2
15537: PPUSH
15538: LD_INT 3
15540: PPUSH
15541: LD_INT 0
15543: PPUSH
15544: CALL_OW 277
// end ;
15548: PPOPN 2
15550: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15551: LD_EXP 43
15555: PUSH
15556: LD_EXP 71
15560: AND
15561: IFFALSE 15658
15563: GO 15565
15565: DISABLE
15566: LD_INT 0
15568: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15569: LD_ADDR_VAR 0 1
15573: PUSH
15574: LD_INT 22
15576: PUSH
15577: LD_OWVAR 2
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PUSH
15586: LD_INT 21
15588: PUSH
15589: LD_INT 1
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: PUSH
15596: LD_INT 3
15598: PUSH
15599: LD_INT 23
15601: PUSH
15602: LD_INT 0
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: LIST
15617: PPUSH
15618: CALL_OW 69
15622: ST_TO_ADDR
// if not tmp then
15623: LD_VAR 0 1
15627: NOT
15628: IFFALSE 15632
// exit ;
15630: GO 15658
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15632: LD_VAR 0 1
15636: PUSH
15637: LD_INT 1
15639: PPUSH
15640: LD_VAR 0 1
15644: PPUSH
15645: CALL_OW 12
15649: ARRAY
15650: PPUSH
15651: LD_INT 200
15653: PPUSH
15654: CALL_OW 234
// end ;
15658: PPOPN 1
15660: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15661: LD_EXP 43
15665: PUSH
15666: LD_EXP 72
15670: AND
15671: IFFALSE 15750
15673: GO 15675
15675: DISABLE
15676: LD_INT 0
15678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15679: LD_ADDR_VAR 0 1
15683: PUSH
15684: LD_INT 22
15686: PUSH
15687: LD_OWVAR 2
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 21
15698: PUSH
15699: LD_INT 2
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: PPUSH
15710: CALL_OW 69
15714: ST_TO_ADDR
// if not tmp then
15715: LD_VAR 0 1
15719: NOT
15720: IFFALSE 15724
// exit ;
15722: GO 15750
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15724: LD_VAR 0 1
15728: PUSH
15729: LD_INT 1
15731: PPUSH
15732: LD_VAR 0 1
15736: PPUSH
15737: CALL_OW 12
15741: ARRAY
15742: PPUSH
15743: LD_INT 60
15745: PPUSH
15746: CALL_OW 234
// end ;
15750: PPOPN 1
15752: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15753: LD_EXP 43
15757: PUSH
15758: LD_EXP 73
15762: AND
15763: IFFALSE 15862
15765: GO 15767
15767: DISABLE
15768: LD_INT 0
15770: PPUSH
15771: PPUSH
// begin enable ;
15772: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15773: LD_ADDR_VAR 0 1
15777: PUSH
15778: LD_INT 22
15780: PUSH
15781: LD_OWVAR 2
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 61
15792: PUSH
15793: EMPTY
15794: LIST
15795: PUSH
15796: LD_INT 33
15798: PUSH
15799: LD_INT 2
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: LIST
15810: PPUSH
15811: CALL_OW 69
15815: ST_TO_ADDR
// if not tmp then
15816: LD_VAR 0 1
15820: NOT
15821: IFFALSE 15825
// exit ;
15823: GO 15862
// for i in tmp do
15825: LD_ADDR_VAR 0 2
15829: PUSH
15830: LD_VAR 0 1
15834: PUSH
15835: FOR_IN
15836: IFFALSE 15860
// if IsControledBy ( i ) then
15838: LD_VAR 0 2
15842: PPUSH
15843: CALL_OW 312
15847: IFFALSE 15858
// ComUnlink ( i ) ;
15849: LD_VAR 0 2
15853: PPUSH
15854: CALL_OW 136
15858: GO 15835
15860: POP
15861: POP
// end ;
15862: PPOPN 2
15864: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15865: LD_EXP 43
15869: PUSH
15870: LD_EXP 74
15874: AND
15875: IFFALSE 16015
15877: GO 15879
15879: DISABLE
15880: LD_INT 0
15882: PPUSH
15883: PPUSH
// begin ToLua ( displayPowell(); ) ;
15884: LD_STRING displayPowell();
15886: PPUSH
15887: CALL_OW 559
// uc_side := 0 ;
15891: LD_ADDR_OWVAR 20
15895: PUSH
15896: LD_INT 0
15898: ST_TO_ADDR
// uc_nation := 2 ;
15899: LD_ADDR_OWVAR 21
15903: PUSH
15904: LD_INT 2
15906: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15907: LD_ADDR_OWVAR 37
15911: PUSH
15912: LD_INT 14
15914: ST_TO_ADDR
// vc_engine := engine_siberite ;
15915: LD_ADDR_OWVAR 39
15919: PUSH
15920: LD_INT 3
15922: ST_TO_ADDR
// vc_control := control_apeman ;
15923: LD_ADDR_OWVAR 38
15927: PUSH
15928: LD_INT 5
15930: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15931: LD_ADDR_OWVAR 40
15935: PUSH
15936: LD_INT 29
15938: ST_TO_ADDR
// un := CreateVehicle ;
15939: LD_ADDR_VAR 0 2
15943: PUSH
15944: CALL_OW 45
15948: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15949: LD_VAR 0 2
15953: PPUSH
15954: LD_INT 1
15956: PPUSH
15957: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15961: LD_INT 35
15963: PPUSH
15964: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15968: LD_VAR 0 2
15972: PPUSH
15973: LD_INT 22
15975: PUSH
15976: LD_OWVAR 2
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PPUSH
15985: CALL_OW 69
15989: PPUSH
15990: LD_VAR 0 2
15994: PPUSH
15995: CALL_OW 74
15999: PPUSH
16000: CALL_OW 115
// until IsDead ( un ) ;
16004: LD_VAR 0 2
16008: PPUSH
16009: CALL_OW 301
16013: IFFALSE 15961
// end ;
16015: PPOPN 2
16017: END
// every 0 0$1 trigger StreamModeActive and sStu do
16018: LD_EXP 43
16022: PUSH
16023: LD_EXP 82
16027: AND
16028: IFFALSE 16044
16030: GO 16032
16032: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16033: LD_STRING displayStucuk();
16035: PPUSH
16036: CALL_OW 559
// ResetFog ;
16040: CALL_OW 335
// end ;
16044: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16045: LD_EXP 43
16049: PUSH
16050: LD_EXP 75
16054: AND
16055: IFFALSE 16196
16057: GO 16059
16059: DISABLE
16060: LD_INT 0
16062: PPUSH
16063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16064: LD_ADDR_VAR 0 2
16068: PUSH
16069: LD_INT 22
16071: PUSH
16072: LD_OWVAR 2
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: PUSH
16081: LD_INT 21
16083: PUSH
16084: LD_INT 1
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: PPUSH
16095: CALL_OW 69
16099: ST_TO_ADDR
// if not tmp then
16100: LD_VAR 0 2
16104: NOT
16105: IFFALSE 16109
// exit ;
16107: GO 16196
// un := tmp [ rand ( 1 , tmp ) ] ;
16109: LD_ADDR_VAR 0 1
16113: PUSH
16114: LD_VAR 0 2
16118: PUSH
16119: LD_INT 1
16121: PPUSH
16122: LD_VAR 0 2
16126: PPUSH
16127: CALL_OW 12
16131: ARRAY
16132: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16133: LD_VAR 0 1
16137: PPUSH
16138: LD_INT 0
16140: PPUSH
16141: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16145: LD_VAR 0 1
16149: PPUSH
16150: LD_OWVAR 3
16154: PUSH
16155: LD_VAR 0 1
16159: DIFF
16160: PPUSH
16161: LD_VAR 0 1
16165: PPUSH
16166: CALL_OW 74
16170: PPUSH
16171: CALL_OW 115
// wait ( 0 0$20 ) ;
16175: LD_INT 700
16177: PPUSH
16178: CALL_OW 67
// SetSide ( un , your_side ) ;
16182: LD_VAR 0 1
16186: PPUSH
16187: LD_OWVAR 2
16191: PPUSH
16192: CALL_OW 235
// end ;
16196: PPOPN 2
16198: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16199: LD_EXP 43
16203: PUSH
16204: LD_EXP 76
16208: AND
16209: IFFALSE 16315
16211: GO 16213
16213: DISABLE
16214: LD_INT 0
16216: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16217: LD_ADDR_VAR 0 1
16221: PUSH
16222: LD_INT 22
16224: PUSH
16225: LD_OWVAR 2
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PUSH
16234: LD_INT 2
16236: PUSH
16237: LD_INT 30
16239: PUSH
16240: LD_INT 0
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: PUSH
16247: LD_INT 30
16249: PUSH
16250: LD_INT 1
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: LIST
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PPUSH
16266: CALL_OW 69
16270: ST_TO_ADDR
// if not depot then
16271: LD_VAR 0 1
16275: NOT
16276: IFFALSE 16280
// exit ;
16278: GO 16315
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16280: LD_VAR 0 1
16284: PUSH
16285: LD_INT 1
16287: ARRAY
16288: PPUSH
16289: CALL_OW 250
16293: PPUSH
16294: LD_VAR 0 1
16298: PUSH
16299: LD_INT 1
16301: ARRAY
16302: PPUSH
16303: CALL_OW 251
16307: PPUSH
16308: LD_INT 70
16310: PPUSH
16311: CALL_OW 495
// end ;
16315: PPOPN 1
16317: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16318: LD_EXP 43
16322: PUSH
16323: LD_EXP 77
16327: AND
16328: IFFALSE 16539
16330: GO 16332
16332: DISABLE
16333: LD_INT 0
16335: PPUSH
16336: PPUSH
16337: PPUSH
16338: PPUSH
16339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16340: LD_ADDR_VAR 0 5
16344: PUSH
16345: LD_INT 22
16347: PUSH
16348: LD_OWVAR 2
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PUSH
16357: LD_INT 21
16359: PUSH
16360: LD_INT 1
16362: PUSH
16363: EMPTY
16364: LIST
16365: LIST
16366: PUSH
16367: EMPTY
16368: LIST
16369: LIST
16370: PPUSH
16371: CALL_OW 69
16375: ST_TO_ADDR
// if not tmp then
16376: LD_VAR 0 5
16380: NOT
16381: IFFALSE 16385
// exit ;
16383: GO 16539
// for i in tmp do
16385: LD_ADDR_VAR 0 1
16389: PUSH
16390: LD_VAR 0 5
16394: PUSH
16395: FOR_IN
16396: IFFALSE 16537
// begin d := rand ( 0 , 5 ) ;
16398: LD_ADDR_VAR 0 4
16402: PUSH
16403: LD_INT 0
16405: PPUSH
16406: LD_INT 5
16408: PPUSH
16409: CALL_OW 12
16413: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16414: LD_ADDR_VAR 0 2
16418: PUSH
16419: LD_VAR 0 1
16423: PPUSH
16424: CALL_OW 250
16428: PPUSH
16429: LD_VAR 0 4
16433: PPUSH
16434: LD_INT 3
16436: PPUSH
16437: LD_INT 12
16439: PPUSH
16440: CALL_OW 12
16444: PPUSH
16445: CALL_OW 272
16449: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16450: LD_ADDR_VAR 0 3
16454: PUSH
16455: LD_VAR 0 1
16459: PPUSH
16460: CALL_OW 251
16464: PPUSH
16465: LD_VAR 0 4
16469: PPUSH
16470: LD_INT 3
16472: PPUSH
16473: LD_INT 12
16475: PPUSH
16476: CALL_OW 12
16480: PPUSH
16481: CALL_OW 273
16485: ST_TO_ADDR
// if ValidHex ( x , y ) then
16486: LD_VAR 0 2
16490: PPUSH
16491: LD_VAR 0 3
16495: PPUSH
16496: CALL_OW 488
16500: IFFALSE 16535
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16502: LD_VAR 0 1
16506: PPUSH
16507: LD_VAR 0 2
16511: PPUSH
16512: LD_VAR 0 3
16516: PPUSH
16517: LD_INT 3
16519: PPUSH
16520: LD_INT 6
16522: PPUSH
16523: CALL_OW 12
16527: PPUSH
16528: LD_INT 1
16530: PPUSH
16531: CALL_OW 483
// end ;
16535: GO 16395
16537: POP
16538: POP
// end ;
16539: PPOPN 5
16541: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16542: LD_EXP 43
16546: PUSH
16547: LD_EXP 78
16551: AND
16552: IFFALSE 16646
16554: GO 16556
16556: DISABLE
16557: LD_INT 0
16559: PPUSH
16560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16561: LD_ADDR_VAR 0 2
16565: PUSH
16566: LD_INT 22
16568: PUSH
16569: LD_OWVAR 2
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PUSH
16578: LD_INT 32
16580: PUSH
16581: LD_INT 1
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 21
16590: PUSH
16591: LD_INT 2
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: LIST
16602: PPUSH
16603: CALL_OW 69
16607: ST_TO_ADDR
// if not tmp then
16608: LD_VAR 0 2
16612: NOT
16613: IFFALSE 16617
// exit ;
16615: GO 16646
// for i in tmp do
16617: LD_ADDR_VAR 0 1
16621: PUSH
16622: LD_VAR 0 2
16626: PUSH
16627: FOR_IN
16628: IFFALSE 16644
// SetFuel ( i , 0 ) ;
16630: LD_VAR 0 1
16634: PPUSH
16635: LD_INT 0
16637: PPUSH
16638: CALL_OW 240
16642: GO 16627
16644: POP
16645: POP
// end ;
16646: PPOPN 2
16648: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16649: LD_EXP 43
16653: PUSH
16654: LD_EXP 79
16658: AND
16659: IFFALSE 16725
16661: GO 16663
16663: DISABLE
16664: LD_INT 0
16666: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16667: LD_ADDR_VAR 0 1
16671: PUSH
16672: LD_INT 22
16674: PUSH
16675: LD_OWVAR 2
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: LD_INT 30
16686: PUSH
16687: LD_INT 29
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PPUSH
16698: CALL_OW 69
16702: ST_TO_ADDR
// if not tmp then
16703: LD_VAR 0 1
16707: NOT
16708: IFFALSE 16712
// exit ;
16710: GO 16725
// DestroyUnit ( tmp [ 1 ] ) ;
16712: LD_VAR 0 1
16716: PUSH
16717: LD_INT 1
16719: ARRAY
16720: PPUSH
16721: CALL_OW 65
// end ;
16725: PPOPN 1
16727: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16728: LD_EXP 43
16732: PUSH
16733: LD_EXP 81
16737: AND
16738: IFFALSE 16867
16740: GO 16742
16742: DISABLE
16743: LD_INT 0
16745: PPUSH
// begin uc_side := 0 ;
16746: LD_ADDR_OWVAR 20
16750: PUSH
16751: LD_INT 0
16753: ST_TO_ADDR
// uc_nation := nation_arabian ;
16754: LD_ADDR_OWVAR 21
16758: PUSH
16759: LD_INT 2
16761: ST_TO_ADDR
// hc_gallery :=  ;
16762: LD_ADDR_OWVAR 33
16766: PUSH
16767: LD_STRING 
16769: ST_TO_ADDR
// hc_name :=  ;
16770: LD_ADDR_OWVAR 26
16774: PUSH
16775: LD_STRING 
16777: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16778: LD_INT 1
16780: PPUSH
16781: LD_INT 11
16783: PPUSH
16784: LD_INT 10
16786: PPUSH
16787: CALL_OW 380
// un := CreateHuman ;
16791: LD_ADDR_VAR 0 1
16795: PUSH
16796: CALL_OW 44
16800: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16801: LD_VAR 0 1
16805: PPUSH
16806: LD_INT 1
16808: PPUSH
16809: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16813: LD_INT 35
16815: PPUSH
16816: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16820: LD_VAR 0 1
16824: PPUSH
16825: LD_INT 22
16827: PUSH
16828: LD_OWVAR 2
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PPUSH
16837: CALL_OW 69
16841: PPUSH
16842: LD_VAR 0 1
16846: PPUSH
16847: CALL_OW 74
16851: PPUSH
16852: CALL_OW 115
// until IsDead ( un ) ;
16856: LD_VAR 0 1
16860: PPUSH
16861: CALL_OW 301
16865: IFFALSE 16813
// end ;
16867: PPOPN 1
16869: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16870: LD_EXP 43
16874: PUSH
16875: LD_EXP 83
16879: AND
16880: IFFALSE 16892
16882: GO 16884
16884: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16885: LD_STRING earthquake(getX(game), 0, 32)
16887: PPUSH
16888: CALL_OW 559
16892: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16893: LD_EXP 43
16897: PUSH
16898: LD_EXP 84
16902: AND
16903: IFFALSE 16994
16905: GO 16907
16907: DISABLE
16908: LD_INT 0
16910: PPUSH
// begin enable ;
16911: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16912: LD_ADDR_VAR 0 1
16916: PUSH
16917: LD_INT 22
16919: PUSH
16920: LD_OWVAR 2
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: PUSH
16929: LD_INT 21
16931: PUSH
16932: LD_INT 2
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PUSH
16939: LD_INT 33
16941: PUSH
16942: LD_INT 3
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: LIST
16953: PPUSH
16954: CALL_OW 69
16958: ST_TO_ADDR
// if not tmp then
16959: LD_VAR 0 1
16963: NOT
16964: IFFALSE 16968
// exit ;
16966: GO 16994
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16968: LD_VAR 0 1
16972: PUSH
16973: LD_INT 1
16975: PPUSH
16976: LD_VAR 0 1
16980: PPUSH
16981: CALL_OW 12
16985: ARRAY
16986: PPUSH
16987: LD_INT 1
16989: PPUSH
16990: CALL_OW 234
// end ;
16994: PPOPN 1
16996: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16997: LD_EXP 43
17001: PUSH
17002: LD_EXP 85
17006: AND
17007: IFFALSE 17148
17009: GO 17011
17011: DISABLE
17012: LD_INT 0
17014: PPUSH
17015: PPUSH
17016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17017: LD_ADDR_VAR 0 3
17021: PUSH
17022: LD_INT 22
17024: PUSH
17025: LD_OWVAR 2
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 25
17036: PUSH
17037: LD_INT 1
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PPUSH
17048: CALL_OW 69
17052: ST_TO_ADDR
// if not tmp then
17053: LD_VAR 0 3
17057: NOT
17058: IFFALSE 17062
// exit ;
17060: GO 17148
// un := tmp [ rand ( 1 , tmp ) ] ;
17062: LD_ADDR_VAR 0 2
17066: PUSH
17067: LD_VAR 0 3
17071: PUSH
17072: LD_INT 1
17074: PPUSH
17075: LD_VAR 0 3
17079: PPUSH
17080: CALL_OW 12
17084: ARRAY
17085: ST_TO_ADDR
// if Crawls ( un ) then
17086: LD_VAR 0 2
17090: PPUSH
17091: CALL_OW 318
17095: IFFALSE 17106
// ComWalk ( un ) ;
17097: LD_VAR 0 2
17101: PPUSH
17102: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17106: LD_VAR 0 2
17110: PPUSH
17111: LD_INT 9
17113: PPUSH
17114: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17118: LD_INT 28
17120: PPUSH
17121: LD_OWVAR 2
17125: PPUSH
17126: LD_INT 2
17128: PPUSH
17129: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17133: LD_INT 29
17135: PPUSH
17136: LD_OWVAR 2
17140: PPUSH
17141: LD_INT 2
17143: PPUSH
17144: CALL_OW 322
// end ;
17148: PPOPN 3
17150: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17151: LD_EXP 43
17155: PUSH
17156: LD_EXP 86
17160: AND
17161: IFFALSE 17272
17163: GO 17165
17165: DISABLE
17166: LD_INT 0
17168: PPUSH
17169: PPUSH
17170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17171: LD_ADDR_VAR 0 3
17175: PUSH
17176: LD_INT 22
17178: PUSH
17179: LD_OWVAR 2
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: LD_INT 25
17190: PUSH
17191: LD_INT 1
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PPUSH
17202: CALL_OW 69
17206: ST_TO_ADDR
// if not tmp then
17207: LD_VAR 0 3
17211: NOT
17212: IFFALSE 17216
// exit ;
17214: GO 17272
// un := tmp [ rand ( 1 , tmp ) ] ;
17216: LD_ADDR_VAR 0 2
17220: PUSH
17221: LD_VAR 0 3
17225: PUSH
17226: LD_INT 1
17228: PPUSH
17229: LD_VAR 0 3
17233: PPUSH
17234: CALL_OW 12
17238: ARRAY
17239: ST_TO_ADDR
// if Crawls ( un ) then
17240: LD_VAR 0 2
17244: PPUSH
17245: CALL_OW 318
17249: IFFALSE 17260
// ComWalk ( un ) ;
17251: LD_VAR 0 2
17255: PPUSH
17256: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17260: LD_VAR 0 2
17264: PPUSH
17265: LD_INT 8
17267: PPUSH
17268: CALL_OW 336
// end ;
17272: PPOPN 3
17274: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17275: LD_EXP 43
17279: PUSH
17280: LD_EXP 87
17284: AND
17285: IFFALSE 17429
17287: GO 17289
17289: DISABLE
17290: LD_INT 0
17292: PPUSH
17293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17294: LD_ADDR_VAR 0 2
17298: PUSH
17299: LD_INT 22
17301: PUSH
17302: LD_OWVAR 2
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: PUSH
17311: LD_INT 21
17313: PUSH
17314: LD_INT 2
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 2
17323: PUSH
17324: LD_INT 34
17326: PUSH
17327: LD_INT 12
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: LD_INT 34
17336: PUSH
17337: LD_INT 51
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: LD_INT 34
17346: PUSH
17347: LD_INT 32
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: LIST
17364: PPUSH
17365: CALL_OW 69
17369: ST_TO_ADDR
// if not tmp then
17370: LD_VAR 0 2
17374: NOT
17375: IFFALSE 17379
// exit ;
17377: GO 17429
// for i in tmp do
17379: LD_ADDR_VAR 0 1
17383: PUSH
17384: LD_VAR 0 2
17388: PUSH
17389: FOR_IN
17390: IFFALSE 17427
// if GetCargo ( i , mat_artifact ) = 0 then
17392: LD_VAR 0 1
17396: PPUSH
17397: LD_INT 4
17399: PPUSH
17400: CALL_OW 289
17404: PUSH
17405: LD_INT 0
17407: EQUAL
17408: IFFALSE 17425
// SetCargo ( i , mat_siberit , 100 ) ;
17410: LD_VAR 0 1
17414: PPUSH
17415: LD_INT 3
17417: PPUSH
17418: LD_INT 100
17420: PPUSH
17421: CALL_OW 290
17425: GO 17389
17427: POP
17428: POP
// end ;
17429: PPOPN 2
17431: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17432: LD_EXP 43
17436: PUSH
17437: LD_EXP 88
17441: AND
17442: IFFALSE 17625
17444: GO 17446
17446: DISABLE
17447: LD_INT 0
17449: PPUSH
17450: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17451: LD_ADDR_VAR 0 2
17455: PUSH
17456: LD_INT 22
17458: PUSH
17459: LD_OWVAR 2
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PPUSH
17468: CALL_OW 69
17472: ST_TO_ADDR
// if not tmp then
17473: LD_VAR 0 2
17477: NOT
17478: IFFALSE 17482
// exit ;
17480: GO 17625
// for i := 1 to 2 do
17482: LD_ADDR_VAR 0 1
17486: PUSH
17487: DOUBLE
17488: LD_INT 1
17490: DEC
17491: ST_TO_ADDR
17492: LD_INT 2
17494: PUSH
17495: FOR_TO
17496: IFFALSE 17623
// begin uc_side := your_side ;
17498: LD_ADDR_OWVAR 20
17502: PUSH
17503: LD_OWVAR 2
17507: ST_TO_ADDR
// uc_nation := nation_american ;
17508: LD_ADDR_OWVAR 21
17512: PUSH
17513: LD_INT 1
17515: ST_TO_ADDR
// vc_chassis := us_morphling ;
17516: LD_ADDR_OWVAR 37
17520: PUSH
17521: LD_INT 5
17523: ST_TO_ADDR
// vc_engine := engine_siberite ;
17524: LD_ADDR_OWVAR 39
17528: PUSH
17529: LD_INT 3
17531: ST_TO_ADDR
// vc_control := control_computer ;
17532: LD_ADDR_OWVAR 38
17536: PUSH
17537: LD_INT 3
17539: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17540: LD_ADDR_OWVAR 40
17544: PUSH
17545: LD_INT 10
17547: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17548: LD_VAR 0 2
17552: PUSH
17553: LD_INT 1
17555: ARRAY
17556: PPUSH
17557: CALL_OW 310
17561: NOT
17562: IFFALSE 17609
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17564: CALL_OW 45
17568: PPUSH
17569: LD_VAR 0 2
17573: PUSH
17574: LD_INT 1
17576: ARRAY
17577: PPUSH
17578: CALL_OW 250
17582: PPUSH
17583: LD_VAR 0 2
17587: PUSH
17588: LD_INT 1
17590: ARRAY
17591: PPUSH
17592: CALL_OW 251
17596: PPUSH
17597: LD_INT 12
17599: PPUSH
17600: LD_INT 1
17602: PPUSH
17603: CALL_OW 50
17607: GO 17621
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17609: CALL_OW 45
17613: PPUSH
17614: LD_INT 1
17616: PPUSH
17617: CALL_OW 51
// end ;
17621: GO 17495
17623: POP
17624: POP
// end ;
17625: PPOPN 2
17627: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17628: LD_EXP 43
17632: PUSH
17633: LD_EXP 89
17637: AND
17638: IFFALSE 17860
17640: GO 17642
17642: DISABLE
17643: LD_INT 0
17645: PPUSH
17646: PPUSH
17647: PPUSH
17648: PPUSH
17649: PPUSH
17650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17651: LD_ADDR_VAR 0 6
17655: PUSH
17656: LD_INT 22
17658: PUSH
17659: LD_OWVAR 2
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: PUSH
17668: LD_INT 21
17670: PUSH
17671: LD_INT 1
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: LD_INT 3
17680: PUSH
17681: LD_INT 23
17683: PUSH
17684: LD_INT 0
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: PUSH
17691: EMPTY
17692: LIST
17693: LIST
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: LIST
17699: PPUSH
17700: CALL_OW 69
17704: ST_TO_ADDR
// if not tmp then
17705: LD_VAR 0 6
17709: NOT
17710: IFFALSE 17714
// exit ;
17712: GO 17860
// s1 := rand ( 1 , 4 ) ;
17714: LD_ADDR_VAR 0 2
17718: PUSH
17719: LD_INT 1
17721: PPUSH
17722: LD_INT 4
17724: PPUSH
17725: CALL_OW 12
17729: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17730: LD_ADDR_VAR 0 4
17734: PUSH
17735: LD_VAR 0 6
17739: PUSH
17740: LD_INT 1
17742: ARRAY
17743: PPUSH
17744: LD_VAR 0 2
17748: PPUSH
17749: CALL_OW 259
17753: ST_TO_ADDR
// if s1 = 1 then
17754: LD_VAR 0 2
17758: PUSH
17759: LD_INT 1
17761: EQUAL
17762: IFFALSE 17782
// s2 := rand ( 2 , 4 ) else
17764: LD_ADDR_VAR 0 3
17768: PUSH
17769: LD_INT 2
17771: PPUSH
17772: LD_INT 4
17774: PPUSH
17775: CALL_OW 12
17779: ST_TO_ADDR
17780: GO 17790
// s2 := 1 ;
17782: LD_ADDR_VAR 0 3
17786: PUSH
17787: LD_INT 1
17789: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17790: LD_ADDR_VAR 0 5
17794: PUSH
17795: LD_VAR 0 6
17799: PUSH
17800: LD_INT 1
17802: ARRAY
17803: PPUSH
17804: LD_VAR 0 3
17808: PPUSH
17809: CALL_OW 259
17813: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17814: LD_VAR 0 6
17818: PUSH
17819: LD_INT 1
17821: ARRAY
17822: PPUSH
17823: LD_VAR 0 2
17827: PPUSH
17828: LD_VAR 0 5
17832: PPUSH
17833: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17837: LD_VAR 0 6
17841: PUSH
17842: LD_INT 1
17844: ARRAY
17845: PPUSH
17846: LD_VAR 0 3
17850: PPUSH
17851: LD_VAR 0 4
17855: PPUSH
17856: CALL_OW 237
// end ;
17860: PPOPN 6
17862: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17863: LD_EXP 43
17867: PUSH
17868: LD_EXP 90
17872: AND
17873: IFFALSE 17952
17875: GO 17877
17877: DISABLE
17878: LD_INT 0
17880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17881: LD_ADDR_VAR 0 1
17885: PUSH
17886: LD_INT 22
17888: PUSH
17889: LD_OWVAR 2
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: LD_INT 30
17900: PUSH
17901: LD_INT 3
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PPUSH
17912: CALL_OW 69
17916: ST_TO_ADDR
// if not tmp then
17917: LD_VAR 0 1
17921: NOT
17922: IFFALSE 17926
// exit ;
17924: GO 17952
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17926: LD_VAR 0 1
17930: PUSH
17931: LD_INT 1
17933: PPUSH
17934: LD_VAR 0 1
17938: PPUSH
17939: CALL_OW 12
17943: ARRAY
17944: PPUSH
17945: LD_INT 1
17947: PPUSH
17948: CALL_OW 234
// end ;
17952: PPOPN 1
17954: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17955: LD_EXP 43
17959: PUSH
17960: LD_EXP 91
17964: AND
17965: IFFALSE 18077
17967: GO 17969
17969: DISABLE
17970: LD_INT 0
17972: PPUSH
17973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17974: LD_ADDR_VAR 0 2
17978: PUSH
17979: LD_INT 22
17981: PUSH
17982: LD_OWVAR 2
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: LD_INT 2
17993: PUSH
17994: LD_INT 30
17996: PUSH
17997: LD_INT 27
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: PUSH
18004: LD_INT 30
18006: PUSH
18007: LD_INT 26
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: LD_INT 30
18016: PUSH
18017: LD_INT 28
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PPUSH
18034: CALL_OW 69
18038: ST_TO_ADDR
// if not tmp then
18039: LD_VAR 0 2
18043: NOT
18044: IFFALSE 18048
// exit ;
18046: GO 18077
// for i in tmp do
18048: LD_ADDR_VAR 0 1
18052: PUSH
18053: LD_VAR 0 2
18057: PUSH
18058: FOR_IN
18059: IFFALSE 18075
// SetLives ( i , 1 ) ;
18061: LD_VAR 0 1
18065: PPUSH
18066: LD_INT 1
18068: PPUSH
18069: CALL_OW 234
18073: GO 18058
18075: POP
18076: POP
// end ;
18077: PPOPN 2
18079: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18080: LD_EXP 43
18084: PUSH
18085: LD_EXP 92
18089: AND
18090: IFFALSE 18364
18092: GO 18094
18094: DISABLE
18095: LD_INT 0
18097: PPUSH
18098: PPUSH
18099: PPUSH
// begin i := rand ( 1 , 7 ) ;
18100: LD_ADDR_VAR 0 1
18104: PUSH
18105: LD_INT 1
18107: PPUSH
18108: LD_INT 7
18110: PPUSH
18111: CALL_OW 12
18115: ST_TO_ADDR
// case i of 1 :
18116: LD_VAR 0 1
18120: PUSH
18121: LD_INT 1
18123: DOUBLE
18124: EQUAL
18125: IFTRUE 18129
18127: GO 18139
18129: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18130: LD_STRING earthquake(getX(game), 0, 32)
18132: PPUSH
18133: CALL_OW 559
18137: GO 18364
18139: LD_INT 2
18141: DOUBLE
18142: EQUAL
18143: IFTRUE 18147
18145: GO 18161
18147: POP
// begin ToLua ( displayStucuk(); ) ;
18148: LD_STRING displayStucuk();
18150: PPUSH
18151: CALL_OW 559
// ResetFog ;
18155: CALL_OW 335
// end ; 3 :
18159: GO 18364
18161: LD_INT 3
18163: DOUBLE
18164: EQUAL
18165: IFTRUE 18169
18167: GO 18273
18169: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18170: LD_ADDR_VAR 0 2
18174: PUSH
18175: LD_INT 22
18177: PUSH
18178: LD_OWVAR 2
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 25
18189: PUSH
18190: LD_INT 1
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PPUSH
18201: CALL_OW 69
18205: ST_TO_ADDR
// if not tmp then
18206: LD_VAR 0 2
18210: NOT
18211: IFFALSE 18215
// exit ;
18213: GO 18364
// un := tmp [ rand ( 1 , tmp ) ] ;
18215: LD_ADDR_VAR 0 3
18219: PUSH
18220: LD_VAR 0 2
18224: PUSH
18225: LD_INT 1
18227: PPUSH
18228: LD_VAR 0 2
18232: PPUSH
18233: CALL_OW 12
18237: ARRAY
18238: ST_TO_ADDR
// if Crawls ( un ) then
18239: LD_VAR 0 3
18243: PPUSH
18244: CALL_OW 318
18248: IFFALSE 18259
// ComWalk ( un ) ;
18250: LD_VAR 0 3
18254: PPUSH
18255: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18259: LD_VAR 0 3
18263: PPUSH
18264: LD_INT 8
18266: PPUSH
18267: CALL_OW 336
// end ; 4 :
18271: GO 18364
18273: LD_INT 4
18275: DOUBLE
18276: EQUAL
18277: IFTRUE 18281
18279: GO 18342
18281: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18282: LD_ADDR_VAR 0 2
18286: PUSH
18287: LD_INT 22
18289: PUSH
18290: LD_OWVAR 2
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 30
18301: PUSH
18302: LD_INT 29
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PPUSH
18313: CALL_OW 69
18317: ST_TO_ADDR
// if not tmp then
18318: LD_VAR 0 2
18322: NOT
18323: IFFALSE 18327
// exit ;
18325: GO 18364
// DestroyUnit ( tmp [ 1 ] ) ;
18327: LD_VAR 0 2
18331: PUSH
18332: LD_INT 1
18334: ARRAY
18335: PPUSH
18336: CALL_OW 65
// end ; 5 .. 7 :
18340: GO 18364
18342: LD_INT 5
18344: DOUBLE
18345: GREATEREQUAL
18346: IFFALSE 18354
18348: LD_INT 7
18350: DOUBLE
18351: LESSEQUAL
18352: IFTRUE 18356
18354: GO 18363
18356: POP
// StreamSibBomb ; end ;
18357: CALL 14614 0 0
18361: GO 18364
18363: POP
// end ;
18364: PPOPN 3
18366: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18367: LD_EXP 43
18371: PUSH
18372: LD_EXP 93
18376: AND
18377: IFFALSE 18533
18379: GO 18381
18381: DISABLE
18382: LD_INT 0
18384: PPUSH
18385: PPUSH
18386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18387: LD_ADDR_VAR 0 2
18391: PUSH
18392: LD_INT 81
18394: PUSH
18395: LD_OWVAR 2
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 2
18406: PUSH
18407: LD_INT 21
18409: PUSH
18410: LD_INT 1
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: LD_INT 21
18419: PUSH
18420: LD_INT 2
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: LIST
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PPUSH
18436: CALL_OW 69
18440: ST_TO_ADDR
// if not tmp then
18441: LD_VAR 0 2
18445: NOT
18446: IFFALSE 18450
// exit ;
18448: GO 18533
// p := 0 ;
18450: LD_ADDR_VAR 0 3
18454: PUSH
18455: LD_INT 0
18457: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18458: LD_INT 35
18460: PPUSH
18461: CALL_OW 67
// p := p + 1 ;
18465: LD_ADDR_VAR 0 3
18469: PUSH
18470: LD_VAR 0 3
18474: PUSH
18475: LD_INT 1
18477: PLUS
18478: ST_TO_ADDR
// for i in tmp do
18479: LD_ADDR_VAR 0 1
18483: PUSH
18484: LD_VAR 0 2
18488: PUSH
18489: FOR_IN
18490: IFFALSE 18521
// if GetLives ( i ) < 1000 then
18492: LD_VAR 0 1
18496: PPUSH
18497: CALL_OW 256
18501: PUSH
18502: LD_INT 1000
18504: LESS
18505: IFFALSE 18519
// SetLives ( i , 1000 ) ;
18507: LD_VAR 0 1
18511: PPUSH
18512: LD_INT 1000
18514: PPUSH
18515: CALL_OW 234
18519: GO 18489
18521: POP
18522: POP
// until p > 20 ;
18523: LD_VAR 0 3
18527: PUSH
18528: LD_INT 20
18530: GREATER
18531: IFFALSE 18458
// end ;
18533: PPOPN 3
18535: END
// every 0 0$1 trigger StreamModeActive and sTime do
18536: LD_EXP 43
18540: PUSH
18541: LD_EXP 94
18545: AND
18546: IFFALSE 18581
18548: GO 18550
18550: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18551: LD_INT 28
18553: PPUSH
18554: LD_OWVAR 2
18558: PPUSH
18559: LD_INT 2
18561: PPUSH
18562: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18566: LD_INT 30
18568: PPUSH
18569: LD_OWVAR 2
18573: PPUSH
18574: LD_INT 2
18576: PPUSH
18577: CALL_OW 322
// end ;
18581: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18582: LD_EXP 43
18586: PUSH
18587: LD_EXP 95
18591: AND
18592: IFFALSE 18713
18594: GO 18596
18596: DISABLE
18597: LD_INT 0
18599: PPUSH
18600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18601: LD_ADDR_VAR 0 2
18605: PUSH
18606: LD_INT 22
18608: PUSH
18609: LD_OWVAR 2
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PUSH
18618: LD_INT 21
18620: PUSH
18621: LD_INT 1
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 3
18630: PUSH
18631: LD_INT 23
18633: PUSH
18634: LD_INT 0
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: LIST
18649: PPUSH
18650: CALL_OW 69
18654: ST_TO_ADDR
// if not tmp then
18655: LD_VAR 0 2
18659: NOT
18660: IFFALSE 18664
// exit ;
18662: GO 18713
// for i in tmp do
18664: LD_ADDR_VAR 0 1
18668: PUSH
18669: LD_VAR 0 2
18673: PUSH
18674: FOR_IN
18675: IFFALSE 18711
// begin if Crawls ( i ) then
18677: LD_VAR 0 1
18681: PPUSH
18682: CALL_OW 318
18686: IFFALSE 18697
// ComWalk ( i ) ;
18688: LD_VAR 0 1
18692: PPUSH
18693: CALL_OW 138
// SetClass ( i , 2 ) ;
18697: LD_VAR 0 1
18701: PPUSH
18702: LD_INT 2
18704: PPUSH
18705: CALL_OW 336
// end ;
18709: GO 18674
18711: POP
18712: POP
// end ;
18713: PPOPN 2
18715: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18716: LD_EXP 43
18720: PUSH
18721: LD_EXP 96
18725: AND
18726: IFFALSE 19007
18728: GO 18730
18730: DISABLE
18731: LD_INT 0
18733: PPUSH
18734: PPUSH
18735: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18736: LD_OWVAR 2
18740: PPUSH
18741: LD_INT 9
18743: PPUSH
18744: LD_INT 1
18746: PPUSH
18747: LD_INT 1
18749: PPUSH
18750: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18754: LD_INT 9
18756: PPUSH
18757: LD_OWVAR 2
18761: PPUSH
18762: CALL_OW 343
// uc_side := 9 ;
18766: LD_ADDR_OWVAR 20
18770: PUSH
18771: LD_INT 9
18773: ST_TO_ADDR
// uc_nation := 2 ;
18774: LD_ADDR_OWVAR 21
18778: PUSH
18779: LD_INT 2
18781: ST_TO_ADDR
// hc_name := Dark Warrior ;
18782: LD_ADDR_OWVAR 26
18786: PUSH
18787: LD_STRING Dark Warrior
18789: ST_TO_ADDR
// hc_gallery :=  ;
18790: LD_ADDR_OWVAR 33
18794: PUSH
18795: LD_STRING 
18797: ST_TO_ADDR
// hc_noskilllimit := true ;
18798: LD_ADDR_OWVAR 76
18802: PUSH
18803: LD_INT 1
18805: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18806: LD_ADDR_OWVAR 31
18810: PUSH
18811: LD_INT 30
18813: PUSH
18814: LD_INT 30
18816: PUSH
18817: LD_INT 30
18819: PUSH
18820: LD_INT 30
18822: PUSH
18823: EMPTY
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: ST_TO_ADDR
// un := CreateHuman ;
18829: LD_ADDR_VAR 0 3
18833: PUSH
18834: CALL_OW 44
18838: ST_TO_ADDR
// hc_noskilllimit := false ;
18839: LD_ADDR_OWVAR 76
18843: PUSH
18844: LD_INT 0
18846: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18847: LD_VAR 0 3
18851: PPUSH
18852: LD_INT 1
18854: PPUSH
18855: CALL_OW 51
// p := 0 ;
18859: LD_ADDR_VAR 0 2
18863: PUSH
18864: LD_INT 0
18866: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18867: LD_INT 35
18869: PPUSH
18870: CALL_OW 67
// p := p + 1 ;
18874: LD_ADDR_VAR 0 2
18878: PUSH
18879: LD_VAR 0 2
18883: PUSH
18884: LD_INT 1
18886: PLUS
18887: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18888: LD_VAR 0 3
18892: PPUSH
18893: CALL_OW 256
18897: PUSH
18898: LD_INT 1000
18900: LESS
18901: IFFALSE 18915
// SetLives ( un , 1000 ) ;
18903: LD_VAR 0 3
18907: PPUSH
18908: LD_INT 1000
18910: PPUSH
18911: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18915: LD_VAR 0 3
18919: PPUSH
18920: LD_INT 81
18922: PUSH
18923: LD_OWVAR 2
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 91
18934: PUSH
18935: LD_VAR 0 3
18939: PUSH
18940: LD_INT 30
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: LIST
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PPUSH
18952: CALL_OW 69
18956: PPUSH
18957: LD_VAR 0 3
18961: PPUSH
18962: CALL_OW 74
18966: PPUSH
18967: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
18971: LD_VAR 0 2
18975: PUSH
18976: LD_INT 60
18978: GREATER
18979: PUSH
18980: LD_VAR 0 3
18984: PPUSH
18985: CALL_OW 301
18989: OR
18990: IFFALSE 18867
// if un then
18992: LD_VAR 0 3
18996: IFFALSE 19007
// RemoveUnit ( un ) ;
18998: LD_VAR 0 3
19002: PPUSH
19003: CALL_OW 64
// end ; end_of_file
19007: PPOPN 3
19009: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19010: LD_INT 0
19012: PPUSH
19013: PPUSH
19014: PPUSH
19015: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19016: LD_VAR 0 1
19020: PPUSH
19021: CALL_OW 264
19025: PUSH
19026: LD_EXP 33
19030: EQUAL
19031: IFFALSE 19103
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19033: LD_INT 68
19035: PPUSH
19036: LD_VAR 0 1
19040: PPUSH
19041: CALL_OW 255
19045: PPUSH
19046: CALL_OW 321
19050: PUSH
19051: LD_INT 2
19053: EQUAL
19054: IFFALSE 19066
// eff := 70 else
19056: LD_ADDR_VAR 0 4
19060: PUSH
19061: LD_INT 70
19063: ST_TO_ADDR
19064: GO 19074
// eff := 30 ;
19066: LD_ADDR_VAR 0 4
19070: PUSH
19071: LD_INT 30
19073: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19074: LD_VAR 0 1
19078: PPUSH
19079: CALL_OW 250
19083: PPUSH
19084: LD_VAR 0 1
19088: PPUSH
19089: CALL_OW 251
19093: PPUSH
19094: LD_VAR 0 4
19098: PPUSH
19099: CALL_OW 495
// end ; end ;
19103: LD_VAR 0 2
19107: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
19108: LD_INT 0
19110: PPUSH
// end ;
19111: LD_VAR 0 4
19115: RET
// export function SOS_Command ( cmd ) ; begin
19116: LD_INT 0
19118: PPUSH
// end ;
19119: LD_VAR 0 2
19123: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
19124: LD_VAR 0 1
19128: PUSH
19129: LD_INT 254
19131: EQUAL
19132: PUSH
19133: LD_VAR 0 2
19137: PPUSH
19138: CALL_OW 264
19142: PUSH
19143: LD_EXP 31
19147: EQUAL
19148: AND
19149: PUSH
19150: LD_VAR 0 3
19154: PPUSH
19155: CALL_OW 263
19159: PUSH
19160: LD_INT 3
19162: EQUAL
19163: AND
19164: IFFALSE 19175
// DestroyUnit ( selectedUnit ) ;
19166: LD_VAR 0 3
19170: PPUSH
19171: CALL_OW 65
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
19175: LD_VAR 0 1
19179: PUSH
19180: LD_INT 255
19182: EQUAL
19183: PUSH
19184: LD_VAR 0 2
19188: PPUSH
19189: CALL_OW 264
19193: PUSH
19194: LD_INT 14
19196: PUSH
19197: LD_INT 53
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: IN
19204: AND
19205: PUSH
19206: LD_VAR 0 4
19210: PPUSH
19211: LD_VAR 0 5
19215: PPUSH
19216: CALL_OW 488
19220: AND
19221: IFFALSE 19245
// CutTreeXYR ( unit , x , y , 12 ) ;
19223: LD_VAR 0 2
19227: PPUSH
19228: LD_VAR 0 4
19232: PPUSH
19233: LD_VAR 0 5
19237: PPUSH
19238: LD_INT 12
19240: PPUSH
19241: CALL 19248 0 4
// end ;
19245: PPOPN 5
19247: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19248: LD_INT 0
19250: PPUSH
19251: PPUSH
19252: PPUSH
19253: PPUSH
19254: PPUSH
19255: PPUSH
19256: PPUSH
19257: PPUSH
19258: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19259: LD_VAR 0 1
19263: NOT
19264: PUSH
19265: LD_VAR 0 2
19269: PPUSH
19270: LD_VAR 0 3
19274: PPUSH
19275: CALL_OW 488
19279: NOT
19280: OR
19281: PUSH
19282: LD_VAR 0 4
19286: NOT
19287: OR
19288: IFFALSE 19292
// exit ;
19290: GO 19632
// list := [ ] ;
19292: LD_ADDR_VAR 0 13
19296: PUSH
19297: EMPTY
19298: ST_TO_ADDR
// if x - r < 0 then
19299: LD_VAR 0 2
19303: PUSH
19304: LD_VAR 0 4
19308: MINUS
19309: PUSH
19310: LD_INT 0
19312: LESS
19313: IFFALSE 19325
// min_x := 0 else
19315: LD_ADDR_VAR 0 7
19319: PUSH
19320: LD_INT 0
19322: ST_TO_ADDR
19323: GO 19341
// min_x := x - r ;
19325: LD_ADDR_VAR 0 7
19329: PUSH
19330: LD_VAR 0 2
19334: PUSH
19335: LD_VAR 0 4
19339: MINUS
19340: ST_TO_ADDR
// if y - r < 0 then
19341: LD_VAR 0 3
19345: PUSH
19346: LD_VAR 0 4
19350: MINUS
19351: PUSH
19352: LD_INT 0
19354: LESS
19355: IFFALSE 19367
// min_y := 0 else
19357: LD_ADDR_VAR 0 8
19361: PUSH
19362: LD_INT 0
19364: ST_TO_ADDR
19365: GO 19383
// min_y := y - r ;
19367: LD_ADDR_VAR 0 8
19371: PUSH
19372: LD_VAR 0 3
19376: PUSH
19377: LD_VAR 0 4
19381: MINUS
19382: ST_TO_ADDR
// max_x := x + r ;
19383: LD_ADDR_VAR 0 9
19387: PUSH
19388: LD_VAR 0 2
19392: PUSH
19393: LD_VAR 0 4
19397: PLUS
19398: ST_TO_ADDR
// max_y := y + r ;
19399: LD_ADDR_VAR 0 10
19403: PUSH
19404: LD_VAR 0 3
19408: PUSH
19409: LD_VAR 0 4
19413: PLUS
19414: ST_TO_ADDR
// for _x = min_x to max_x do
19415: LD_ADDR_VAR 0 11
19419: PUSH
19420: DOUBLE
19421: LD_VAR 0 7
19425: DEC
19426: ST_TO_ADDR
19427: LD_VAR 0 9
19431: PUSH
19432: FOR_TO
19433: IFFALSE 19550
// for _y = min_y to max_y do
19435: LD_ADDR_VAR 0 12
19439: PUSH
19440: DOUBLE
19441: LD_VAR 0 8
19445: DEC
19446: ST_TO_ADDR
19447: LD_VAR 0 10
19451: PUSH
19452: FOR_TO
19453: IFFALSE 19546
// begin if not ValidHex ( _x , _y ) then
19455: LD_VAR 0 11
19459: PPUSH
19460: LD_VAR 0 12
19464: PPUSH
19465: CALL_OW 488
19469: NOT
19470: IFFALSE 19474
// continue ;
19472: GO 19452
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
19474: LD_VAR 0 11
19478: PPUSH
19479: LD_VAR 0 12
19483: PPUSH
19484: CALL_OW 351
19488: PUSH
19489: LD_VAR 0 11
19493: PPUSH
19494: LD_VAR 0 12
19498: PPUSH
19499: CALL_OW 554
19503: AND
19504: IFFALSE 19544
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
19506: LD_ADDR_VAR 0 13
19510: PUSH
19511: LD_VAR 0 13
19515: PPUSH
19516: LD_VAR 0 13
19520: PUSH
19521: LD_INT 1
19523: PLUS
19524: PPUSH
19525: LD_VAR 0 11
19529: PUSH
19530: LD_VAR 0 12
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PPUSH
19539: CALL_OW 2
19543: ST_TO_ADDR
// end ;
19544: GO 19452
19546: POP
19547: POP
19548: GO 19432
19550: POP
19551: POP
// if not list then
19552: LD_VAR 0 13
19556: NOT
19557: IFFALSE 19561
// exit ;
19559: GO 19632
// for i in list do
19561: LD_ADDR_VAR 0 6
19565: PUSH
19566: LD_VAR 0 13
19570: PUSH
19571: FOR_IN
19572: IFFALSE 19630
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
19574: LD_VAR 0 1
19578: PPUSH
19579: LD_STRING M
19581: PUSH
19582: LD_VAR 0 6
19586: PUSH
19587: LD_INT 1
19589: ARRAY
19590: PUSH
19591: LD_VAR 0 6
19595: PUSH
19596: LD_INT 2
19598: ARRAY
19599: PUSH
19600: LD_INT 0
19602: PUSH
19603: LD_INT 0
19605: PUSH
19606: LD_INT 0
19608: PUSH
19609: LD_INT 0
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: PUSH
19621: EMPTY
19622: LIST
19623: PPUSH
19624: CALL_OW 447
19628: GO 19571
19630: POP
19631: POP
// end ;
19632: LD_VAR 0 5
19636: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
19637: LD_EXP 97
19641: NOT
19642: IFFALSE 19692
19644: GO 19646
19646: DISABLE
// begin initHack := true ;
19647: LD_ADDR_EXP 97
19651: PUSH
19652: LD_INT 1
19654: ST_TO_ADDR
// hackTanks := [ ] ;
19655: LD_ADDR_EXP 98
19659: PUSH
19660: EMPTY
19661: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
19662: LD_ADDR_EXP 99
19666: PUSH
19667: EMPTY
19668: ST_TO_ADDR
// hackLimit := 3 ;
19669: LD_ADDR_EXP 100
19673: PUSH
19674: LD_INT 3
19676: ST_TO_ADDR
// hackDist := 12 ;
19677: LD_ADDR_EXP 101
19681: PUSH
19682: LD_INT 12
19684: ST_TO_ADDR
// hackCounter := [ ] ;
19685: LD_ADDR_EXP 102
19689: PUSH
19690: EMPTY
19691: ST_TO_ADDR
// end ;
19692: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
19693: LD_EXP 97
19697: PUSH
19698: LD_INT 34
19700: PUSH
19701: LD_EXP 31
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PPUSH
19710: CALL_OW 69
19714: AND
19715: IFFALSE 19970
19717: GO 19719
19719: DISABLE
19720: LD_INT 0
19722: PPUSH
19723: PPUSH
// begin enable ;
19724: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
19725: LD_ADDR_VAR 0 1
19729: PUSH
19730: LD_INT 34
19732: PUSH
19733: LD_EXP 31
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PPUSH
19742: CALL_OW 69
19746: PUSH
19747: FOR_IN
19748: IFFALSE 19968
// begin if not i in hackTanks then
19750: LD_VAR 0 1
19754: PUSH
19755: LD_EXP 98
19759: IN
19760: NOT
19761: IFFALSE 19844
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19763: LD_ADDR_EXP 98
19767: PUSH
19768: LD_EXP 98
19772: PPUSH
19773: LD_EXP 98
19777: PUSH
19778: LD_INT 1
19780: PLUS
19781: PPUSH
19782: LD_VAR 0 1
19786: PPUSH
19787: CALL_OW 1
19791: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19792: LD_ADDR_EXP 99
19796: PUSH
19797: LD_EXP 99
19801: PPUSH
19802: LD_EXP 99
19806: PUSH
19807: LD_INT 1
19809: PLUS
19810: PPUSH
19811: EMPTY
19812: PPUSH
19813: CALL_OW 1
19817: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19818: LD_ADDR_EXP 102
19822: PUSH
19823: LD_EXP 102
19827: PPUSH
19828: LD_EXP 102
19832: PUSH
19833: LD_INT 1
19835: PLUS
19836: PPUSH
19837: EMPTY
19838: PPUSH
19839: CALL_OW 1
19843: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19844: LD_VAR 0 1
19848: PPUSH
19849: CALL_OW 302
19853: NOT
19854: IFFALSE 19867
// begin HackUnlinkAll ( i ) ;
19856: LD_VAR 0 1
19860: PPUSH
19861: CALL 19973 0 1
// continue ;
19865: GO 19747
// end ; HackCheckCapturedStatus ( i ) ;
19867: LD_VAR 0 1
19871: PPUSH
19872: CALL 20416 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19876: LD_ADDR_VAR 0 2
19880: PUSH
19881: LD_INT 81
19883: PUSH
19884: LD_VAR 0 1
19888: PPUSH
19889: CALL_OW 255
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: LD_INT 33
19900: PUSH
19901: LD_INT 3
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 91
19910: PUSH
19911: LD_VAR 0 1
19915: PUSH
19916: LD_EXP 101
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 50
19928: PUSH
19929: EMPTY
19930: LIST
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: PPUSH
19938: CALL_OW 69
19942: ST_TO_ADDR
// if not tmp then
19943: LD_VAR 0 2
19947: NOT
19948: IFFALSE 19952
// continue ;
19950: GO 19747
// HackLink ( i , tmp ) ;
19952: LD_VAR 0 1
19956: PPUSH
19957: LD_VAR 0 2
19961: PPUSH
19962: CALL 20109 0 2
// end ;
19966: GO 19747
19968: POP
19969: POP
// end ;
19970: PPOPN 2
19972: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19973: LD_INT 0
19975: PPUSH
19976: PPUSH
19977: PPUSH
// if not hack in hackTanks then
19978: LD_VAR 0 1
19982: PUSH
19983: LD_EXP 98
19987: IN
19988: NOT
19989: IFFALSE 19993
// exit ;
19991: GO 20104
// index := GetElementIndex ( hackTanks , hack ) ;
19993: LD_ADDR_VAR 0 4
19997: PUSH
19998: LD_EXP 98
20002: PPUSH
20003: LD_VAR 0 1
20007: PPUSH
20008: CALL 25413 0 2
20012: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
20013: LD_EXP 99
20017: PUSH
20018: LD_VAR 0 4
20022: ARRAY
20023: IFFALSE 20104
// begin for i in hackTanksCaptured [ index ] do
20025: LD_ADDR_VAR 0 3
20029: PUSH
20030: LD_EXP 99
20034: PUSH
20035: LD_VAR 0 4
20039: ARRAY
20040: PUSH
20041: FOR_IN
20042: IFFALSE 20068
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
20044: LD_VAR 0 3
20048: PUSH
20049: LD_INT 1
20051: ARRAY
20052: PPUSH
20053: LD_VAR 0 3
20057: PUSH
20058: LD_INT 2
20060: ARRAY
20061: PPUSH
20062: CALL_OW 235
20066: GO 20041
20068: POP
20069: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
20070: LD_ADDR_EXP 99
20074: PUSH
20075: LD_EXP 99
20079: PPUSH
20080: LD_VAR 0 4
20084: PPUSH
20085: EMPTY
20086: PPUSH
20087: CALL_OW 1
20091: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
20092: LD_VAR 0 1
20096: PPUSH
20097: LD_INT 0
20099: PPUSH
20100: CALL_OW 505
// end ; end ;
20104: LD_VAR 0 2
20108: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
20109: LD_INT 0
20111: PPUSH
20112: PPUSH
20113: PPUSH
// if not hack in hackTanks or not vehicles then
20114: LD_VAR 0 1
20118: PUSH
20119: LD_EXP 98
20123: IN
20124: NOT
20125: PUSH
20126: LD_VAR 0 2
20130: NOT
20131: OR
20132: IFFALSE 20136
// exit ;
20134: GO 20411
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
20136: LD_ADDR_VAR 0 2
20140: PUSH
20141: LD_VAR 0 1
20145: PPUSH
20146: LD_VAR 0 2
20150: PPUSH
20151: LD_INT 1
20153: PPUSH
20154: LD_INT 1
20156: PPUSH
20157: CALL 26063 0 4
20161: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
20162: LD_ADDR_VAR 0 5
20166: PUSH
20167: LD_EXP 98
20171: PPUSH
20172: LD_VAR 0 1
20176: PPUSH
20177: CALL 25413 0 2
20181: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
20182: LD_EXP 99
20186: PUSH
20187: LD_VAR 0 5
20191: ARRAY
20192: PUSH
20193: LD_EXP 100
20197: LESS
20198: IFFALSE 20387
// begin for i := 1 to vehicles do
20200: LD_ADDR_VAR 0 4
20204: PUSH
20205: DOUBLE
20206: LD_INT 1
20208: DEC
20209: ST_TO_ADDR
20210: LD_VAR 0 2
20214: PUSH
20215: FOR_TO
20216: IFFALSE 20385
// begin if hackTanksCaptured [ index ] = hackLimit then
20218: LD_EXP 99
20222: PUSH
20223: LD_VAR 0 5
20227: ARRAY
20228: PUSH
20229: LD_EXP 100
20233: EQUAL
20234: IFFALSE 20238
// break ;
20236: GO 20385
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
20238: LD_ADDR_EXP 102
20242: PUSH
20243: LD_EXP 102
20247: PPUSH
20248: LD_VAR 0 5
20252: PPUSH
20253: LD_EXP 102
20257: PUSH
20258: LD_VAR 0 5
20262: ARRAY
20263: PUSH
20264: LD_INT 1
20266: PLUS
20267: PPUSH
20268: CALL_OW 1
20272: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
20273: LD_ADDR_EXP 99
20277: PUSH
20278: LD_EXP 99
20282: PPUSH
20283: LD_VAR 0 5
20287: PUSH
20288: LD_EXP 99
20292: PUSH
20293: LD_VAR 0 5
20297: ARRAY
20298: PUSH
20299: LD_INT 1
20301: PLUS
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PPUSH
20307: LD_VAR 0 2
20311: PUSH
20312: LD_VAR 0 4
20316: ARRAY
20317: PUSH
20318: LD_VAR 0 2
20322: PUSH
20323: LD_VAR 0 4
20327: ARRAY
20328: PPUSH
20329: CALL_OW 255
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PPUSH
20338: CALL 25628 0 3
20342: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
20343: LD_VAR 0 2
20347: PUSH
20348: LD_VAR 0 4
20352: ARRAY
20353: PPUSH
20354: LD_VAR 0 1
20358: PPUSH
20359: CALL_OW 255
20363: PPUSH
20364: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
20368: LD_VAR 0 2
20372: PUSH
20373: LD_VAR 0 4
20377: ARRAY
20378: PPUSH
20379: CALL_OW 141
// end ;
20383: GO 20215
20385: POP
20386: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20387: LD_VAR 0 1
20391: PPUSH
20392: LD_EXP 99
20396: PUSH
20397: LD_VAR 0 5
20401: ARRAY
20402: PUSH
20403: LD_INT 0
20405: PLUS
20406: PPUSH
20407: CALL_OW 505
// end ;
20411: LD_VAR 0 3
20415: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
20416: LD_INT 0
20418: PPUSH
20419: PPUSH
20420: PPUSH
20421: PPUSH
// if not hack in hackTanks then
20422: LD_VAR 0 1
20426: PUSH
20427: LD_EXP 98
20431: IN
20432: NOT
20433: IFFALSE 20437
// exit ;
20435: GO 20677
// index := GetElementIndex ( hackTanks , hack ) ;
20437: LD_ADDR_VAR 0 4
20441: PUSH
20442: LD_EXP 98
20446: PPUSH
20447: LD_VAR 0 1
20451: PPUSH
20452: CALL 25413 0 2
20456: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
20457: LD_ADDR_VAR 0 3
20461: PUSH
20462: DOUBLE
20463: LD_EXP 99
20467: PUSH
20468: LD_VAR 0 4
20472: ARRAY
20473: INC
20474: ST_TO_ADDR
20475: LD_INT 1
20477: PUSH
20478: FOR_DOWNTO
20479: IFFALSE 20651
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
20481: LD_ADDR_VAR 0 5
20485: PUSH
20486: LD_EXP 99
20490: PUSH
20491: LD_VAR 0 4
20495: ARRAY
20496: PUSH
20497: LD_VAR 0 3
20501: ARRAY
20502: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
20503: LD_VAR 0 5
20507: PUSH
20508: LD_INT 1
20510: ARRAY
20511: PPUSH
20512: CALL_OW 302
20516: NOT
20517: PUSH
20518: LD_VAR 0 5
20522: PUSH
20523: LD_INT 1
20525: ARRAY
20526: PPUSH
20527: CALL_OW 255
20531: PUSH
20532: LD_VAR 0 1
20536: PPUSH
20537: CALL_OW 255
20541: NONEQUAL
20542: OR
20543: IFFALSE 20649
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
20545: LD_VAR 0 5
20549: PUSH
20550: LD_INT 1
20552: ARRAY
20553: PPUSH
20554: CALL_OW 305
20558: PUSH
20559: LD_VAR 0 5
20563: PUSH
20564: LD_INT 1
20566: ARRAY
20567: PPUSH
20568: CALL_OW 255
20572: PUSH
20573: LD_VAR 0 1
20577: PPUSH
20578: CALL_OW 255
20582: EQUAL
20583: AND
20584: IFFALSE 20608
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
20586: LD_VAR 0 5
20590: PUSH
20591: LD_INT 1
20593: ARRAY
20594: PPUSH
20595: LD_VAR 0 5
20599: PUSH
20600: LD_INT 2
20602: ARRAY
20603: PPUSH
20604: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
20608: LD_ADDR_EXP 99
20612: PUSH
20613: LD_EXP 99
20617: PPUSH
20618: LD_VAR 0 4
20622: PPUSH
20623: LD_EXP 99
20627: PUSH
20628: LD_VAR 0 4
20632: ARRAY
20633: PPUSH
20634: LD_VAR 0 3
20638: PPUSH
20639: CALL_OW 3
20643: PPUSH
20644: CALL_OW 1
20648: ST_TO_ADDR
// end ; end ;
20649: GO 20478
20651: POP
20652: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
20653: LD_VAR 0 1
20657: PPUSH
20658: LD_EXP 99
20662: PUSH
20663: LD_VAR 0 4
20667: ARRAY
20668: PUSH
20669: LD_INT 0
20671: PLUS
20672: PPUSH
20673: CALL_OW 505
// end ; end_of_file
20677: LD_VAR 0 2
20681: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20682: LD_INT 0
20684: PPUSH
20685: PPUSH
// if exist_mode then
20686: LD_VAR 0 2
20690: IFFALSE 20715
// unit := CreateCharacter ( prefix & ident ) else
20692: LD_ADDR_VAR 0 5
20696: PUSH
20697: LD_VAR 0 3
20701: PUSH
20702: LD_VAR 0 1
20706: STR
20707: PPUSH
20708: CALL_OW 34
20712: ST_TO_ADDR
20713: GO 20730
// unit := NewCharacter ( ident ) ;
20715: LD_ADDR_VAR 0 5
20719: PUSH
20720: LD_VAR 0 1
20724: PPUSH
20725: CALL_OW 25
20729: ST_TO_ADDR
// result := unit ;
20730: LD_ADDR_VAR 0 4
20734: PUSH
20735: LD_VAR 0 5
20739: ST_TO_ADDR
// end ;
20740: LD_VAR 0 4
20744: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20745: LD_INT 0
20747: PPUSH
20748: PPUSH
// if not side or not nation then
20749: LD_VAR 0 1
20753: NOT
20754: PUSH
20755: LD_VAR 0 2
20759: NOT
20760: OR
20761: IFFALSE 20765
// exit ;
20763: GO 21529
// case nation of nation_american :
20765: LD_VAR 0 2
20769: PUSH
20770: LD_INT 1
20772: DOUBLE
20773: EQUAL
20774: IFTRUE 20778
20776: GO 20992
20778: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20779: LD_ADDR_VAR 0 4
20783: PUSH
20784: LD_INT 35
20786: PUSH
20787: LD_INT 45
20789: PUSH
20790: LD_INT 46
20792: PUSH
20793: LD_INT 47
20795: PUSH
20796: LD_INT 82
20798: PUSH
20799: LD_INT 83
20801: PUSH
20802: LD_INT 84
20804: PUSH
20805: LD_INT 85
20807: PUSH
20808: LD_INT 86
20810: PUSH
20811: LD_INT 1
20813: PUSH
20814: LD_INT 2
20816: PUSH
20817: LD_INT 6
20819: PUSH
20820: LD_INT 15
20822: PUSH
20823: LD_INT 16
20825: PUSH
20826: LD_INT 7
20828: PUSH
20829: LD_INT 12
20831: PUSH
20832: LD_INT 13
20834: PUSH
20835: LD_INT 10
20837: PUSH
20838: LD_INT 14
20840: PUSH
20841: LD_INT 20
20843: PUSH
20844: LD_INT 21
20846: PUSH
20847: LD_INT 22
20849: PUSH
20850: LD_INT 25
20852: PUSH
20853: LD_INT 32
20855: PUSH
20856: LD_INT 27
20858: PUSH
20859: LD_INT 36
20861: PUSH
20862: LD_INT 69
20864: PUSH
20865: LD_INT 39
20867: PUSH
20868: LD_INT 34
20870: PUSH
20871: LD_INT 40
20873: PUSH
20874: LD_INT 48
20876: PUSH
20877: LD_INT 49
20879: PUSH
20880: LD_INT 50
20882: PUSH
20883: LD_INT 51
20885: PUSH
20886: LD_INT 52
20888: PUSH
20889: LD_INT 53
20891: PUSH
20892: LD_INT 54
20894: PUSH
20895: LD_INT 55
20897: PUSH
20898: LD_INT 56
20900: PUSH
20901: LD_INT 57
20903: PUSH
20904: LD_INT 58
20906: PUSH
20907: LD_INT 59
20909: PUSH
20910: LD_INT 60
20912: PUSH
20913: LD_INT 61
20915: PUSH
20916: LD_INT 62
20918: PUSH
20919: LD_INT 80
20921: PUSH
20922: LD_INT 82
20924: PUSH
20925: LD_INT 83
20927: PUSH
20928: LD_INT 84
20930: PUSH
20931: LD_INT 85
20933: PUSH
20934: LD_INT 86
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: ST_TO_ADDR
20990: GO 21453
20992: LD_INT 2
20994: DOUBLE
20995: EQUAL
20996: IFTRUE 21000
20998: GO 21222
21000: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
21001: LD_ADDR_VAR 0 4
21005: PUSH
21006: LD_INT 35
21008: PUSH
21009: LD_INT 45
21011: PUSH
21012: LD_INT 46
21014: PUSH
21015: LD_INT 47
21017: PUSH
21018: LD_INT 82
21020: PUSH
21021: LD_INT 83
21023: PUSH
21024: LD_INT 84
21026: PUSH
21027: LD_INT 85
21029: PUSH
21030: LD_INT 87
21032: PUSH
21033: LD_INT 70
21035: PUSH
21036: LD_INT 1
21038: PUSH
21039: LD_INT 11
21041: PUSH
21042: LD_INT 3
21044: PUSH
21045: LD_INT 4
21047: PUSH
21048: LD_INT 5
21050: PUSH
21051: LD_INT 6
21053: PUSH
21054: LD_INT 15
21056: PUSH
21057: LD_INT 18
21059: PUSH
21060: LD_INT 7
21062: PUSH
21063: LD_INT 17
21065: PUSH
21066: LD_INT 8
21068: PUSH
21069: LD_INT 20
21071: PUSH
21072: LD_INT 21
21074: PUSH
21075: LD_INT 22
21077: PUSH
21078: LD_INT 72
21080: PUSH
21081: LD_INT 26
21083: PUSH
21084: LD_INT 69
21086: PUSH
21087: LD_INT 39
21089: PUSH
21090: LD_INT 40
21092: PUSH
21093: LD_INT 41
21095: PUSH
21096: LD_INT 42
21098: PUSH
21099: LD_INT 43
21101: PUSH
21102: LD_INT 48
21104: PUSH
21105: LD_INT 49
21107: PUSH
21108: LD_INT 50
21110: PUSH
21111: LD_INT 51
21113: PUSH
21114: LD_INT 52
21116: PUSH
21117: LD_INT 53
21119: PUSH
21120: LD_INT 54
21122: PUSH
21123: LD_INT 55
21125: PUSH
21126: LD_INT 56
21128: PUSH
21129: LD_INT 60
21131: PUSH
21132: LD_INT 61
21134: PUSH
21135: LD_INT 62
21137: PUSH
21138: LD_INT 66
21140: PUSH
21141: LD_INT 67
21143: PUSH
21144: LD_INT 68
21146: PUSH
21147: LD_INT 81
21149: PUSH
21150: LD_INT 82
21152: PUSH
21153: LD_INT 83
21155: PUSH
21156: LD_INT 84
21158: PUSH
21159: LD_INT 85
21161: PUSH
21162: LD_INT 87
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: ST_TO_ADDR
21220: GO 21453
21222: LD_INT 3
21224: DOUBLE
21225: EQUAL
21226: IFTRUE 21230
21228: GO 21452
21230: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21231: LD_ADDR_VAR 0 4
21235: PUSH
21236: LD_INT 46
21238: PUSH
21239: LD_INT 47
21241: PUSH
21242: LD_INT 1
21244: PUSH
21245: LD_INT 2
21247: PUSH
21248: LD_INT 82
21250: PUSH
21251: LD_INT 83
21253: PUSH
21254: LD_INT 84
21256: PUSH
21257: LD_INT 85
21259: PUSH
21260: LD_INT 86
21262: PUSH
21263: LD_INT 11
21265: PUSH
21266: LD_INT 9
21268: PUSH
21269: LD_INT 20
21271: PUSH
21272: LD_INT 19
21274: PUSH
21275: LD_INT 21
21277: PUSH
21278: LD_INT 24
21280: PUSH
21281: LD_INT 22
21283: PUSH
21284: LD_INT 25
21286: PUSH
21287: LD_INT 28
21289: PUSH
21290: LD_INT 29
21292: PUSH
21293: LD_INT 30
21295: PUSH
21296: LD_INT 31
21298: PUSH
21299: LD_INT 37
21301: PUSH
21302: LD_INT 38
21304: PUSH
21305: LD_INT 32
21307: PUSH
21308: LD_INT 27
21310: PUSH
21311: LD_INT 33
21313: PUSH
21314: LD_INT 69
21316: PUSH
21317: LD_INT 39
21319: PUSH
21320: LD_INT 34
21322: PUSH
21323: LD_INT 40
21325: PUSH
21326: LD_INT 71
21328: PUSH
21329: LD_INT 23
21331: PUSH
21332: LD_INT 44
21334: PUSH
21335: LD_INT 48
21337: PUSH
21338: LD_INT 49
21340: PUSH
21341: LD_INT 50
21343: PUSH
21344: LD_INT 51
21346: PUSH
21347: LD_INT 52
21349: PUSH
21350: LD_INT 53
21352: PUSH
21353: LD_INT 54
21355: PUSH
21356: LD_INT 55
21358: PUSH
21359: LD_INT 56
21361: PUSH
21362: LD_INT 57
21364: PUSH
21365: LD_INT 58
21367: PUSH
21368: LD_INT 59
21370: PUSH
21371: LD_INT 63
21373: PUSH
21374: LD_INT 64
21376: PUSH
21377: LD_INT 65
21379: PUSH
21380: LD_INT 82
21382: PUSH
21383: LD_INT 83
21385: PUSH
21386: LD_INT 84
21388: PUSH
21389: LD_INT 85
21391: PUSH
21392: LD_INT 86
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: ST_TO_ADDR
21450: GO 21453
21452: POP
// if state > - 1 and state < 3 then
21453: LD_VAR 0 3
21457: PUSH
21458: LD_INT 1
21460: NEG
21461: GREATER
21462: PUSH
21463: LD_VAR 0 3
21467: PUSH
21468: LD_INT 3
21470: LESS
21471: AND
21472: IFFALSE 21529
// for i in result do
21474: LD_ADDR_VAR 0 5
21478: PUSH
21479: LD_VAR 0 4
21483: PUSH
21484: FOR_IN
21485: IFFALSE 21527
// if GetTech ( i , side ) <> state then
21487: LD_VAR 0 5
21491: PPUSH
21492: LD_VAR 0 1
21496: PPUSH
21497: CALL_OW 321
21501: PUSH
21502: LD_VAR 0 3
21506: NONEQUAL
21507: IFFALSE 21525
// result := result diff i ;
21509: LD_ADDR_VAR 0 4
21513: PUSH
21514: LD_VAR 0 4
21518: PUSH
21519: LD_VAR 0 5
21523: DIFF
21524: ST_TO_ADDR
21525: GO 21484
21527: POP
21528: POP
// end ;
21529: LD_VAR 0 4
21533: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21534: LD_INT 0
21536: PPUSH
21537: PPUSH
21538: PPUSH
// result := true ;
21539: LD_ADDR_VAR 0 3
21543: PUSH
21544: LD_INT 1
21546: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21547: LD_ADDR_VAR 0 5
21551: PUSH
21552: LD_VAR 0 2
21556: PPUSH
21557: CALL_OW 480
21561: ST_TO_ADDR
// if not tmp then
21562: LD_VAR 0 5
21566: NOT
21567: IFFALSE 21571
// exit ;
21569: GO 21620
// for i in tmp do
21571: LD_ADDR_VAR 0 4
21575: PUSH
21576: LD_VAR 0 5
21580: PUSH
21581: FOR_IN
21582: IFFALSE 21618
// if GetTech ( i , side ) <> state_researched then
21584: LD_VAR 0 4
21588: PPUSH
21589: LD_VAR 0 1
21593: PPUSH
21594: CALL_OW 321
21598: PUSH
21599: LD_INT 2
21601: NONEQUAL
21602: IFFALSE 21616
// begin result := false ;
21604: LD_ADDR_VAR 0 3
21608: PUSH
21609: LD_INT 0
21611: ST_TO_ADDR
// exit ;
21612: POP
21613: POP
21614: GO 21620
// end ;
21616: GO 21581
21618: POP
21619: POP
// end ;
21620: LD_VAR 0 3
21624: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21625: LD_INT 0
21627: PPUSH
21628: PPUSH
21629: PPUSH
21630: PPUSH
21631: PPUSH
21632: PPUSH
21633: PPUSH
21634: PPUSH
21635: PPUSH
21636: PPUSH
21637: PPUSH
21638: PPUSH
21639: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21640: LD_VAR 0 1
21644: NOT
21645: PUSH
21646: LD_VAR 0 1
21650: PPUSH
21651: CALL_OW 257
21655: PUSH
21656: LD_INT 9
21658: NONEQUAL
21659: OR
21660: IFFALSE 21664
// exit ;
21662: GO 22237
// side := GetSide ( unit ) ;
21664: LD_ADDR_VAR 0 9
21668: PUSH
21669: LD_VAR 0 1
21673: PPUSH
21674: CALL_OW 255
21678: ST_TO_ADDR
// tech_space := tech_spacanom ;
21679: LD_ADDR_VAR 0 12
21683: PUSH
21684: LD_INT 29
21686: ST_TO_ADDR
// tech_time := tech_taurad ;
21687: LD_ADDR_VAR 0 13
21691: PUSH
21692: LD_INT 28
21694: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21695: LD_ADDR_VAR 0 11
21699: PUSH
21700: LD_VAR 0 1
21704: PPUSH
21705: CALL_OW 310
21709: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21710: LD_VAR 0 11
21714: PPUSH
21715: CALL_OW 247
21719: PUSH
21720: LD_INT 2
21722: EQUAL
21723: IFFALSE 21727
// exit ;
21725: GO 22237
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21727: LD_ADDR_VAR 0 8
21731: PUSH
21732: LD_INT 81
21734: PUSH
21735: LD_VAR 0 9
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 3
21746: PUSH
21747: LD_INT 21
21749: PUSH
21750: LD_INT 3
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PPUSH
21765: CALL_OW 69
21769: ST_TO_ADDR
// if not tmp then
21770: LD_VAR 0 8
21774: NOT
21775: IFFALSE 21779
// exit ;
21777: GO 22237
// if in_unit then
21779: LD_VAR 0 11
21783: IFFALSE 21807
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21785: LD_ADDR_VAR 0 10
21789: PUSH
21790: LD_VAR 0 8
21794: PPUSH
21795: LD_VAR 0 11
21799: PPUSH
21800: CALL_OW 74
21804: ST_TO_ADDR
21805: GO 21827
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21807: LD_ADDR_VAR 0 10
21811: PUSH
21812: LD_VAR 0 8
21816: PPUSH
21817: LD_VAR 0 1
21821: PPUSH
21822: CALL_OW 74
21826: ST_TO_ADDR
// if not enemy then
21827: LD_VAR 0 10
21831: NOT
21832: IFFALSE 21836
// exit ;
21834: GO 22237
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21836: LD_VAR 0 11
21840: PUSH
21841: LD_VAR 0 11
21845: PPUSH
21846: LD_VAR 0 10
21850: PPUSH
21851: CALL_OW 296
21855: PUSH
21856: LD_INT 13
21858: GREATER
21859: AND
21860: PUSH
21861: LD_VAR 0 1
21865: PPUSH
21866: LD_VAR 0 10
21870: PPUSH
21871: CALL_OW 296
21875: PUSH
21876: LD_INT 12
21878: GREATER
21879: OR
21880: IFFALSE 21884
// exit ;
21882: GO 22237
// missile := [ 1 ] ;
21884: LD_ADDR_VAR 0 14
21888: PUSH
21889: LD_INT 1
21891: PUSH
21892: EMPTY
21893: LIST
21894: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21895: LD_VAR 0 9
21899: PPUSH
21900: LD_VAR 0 12
21904: PPUSH
21905: CALL_OW 325
21909: IFFALSE 21938
// missile := Insert ( missile , missile + 1 , 2 ) ;
21911: LD_ADDR_VAR 0 14
21915: PUSH
21916: LD_VAR 0 14
21920: PPUSH
21921: LD_VAR 0 14
21925: PUSH
21926: LD_INT 1
21928: PLUS
21929: PPUSH
21930: LD_INT 2
21932: PPUSH
21933: CALL_OW 2
21937: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21938: LD_VAR 0 9
21942: PPUSH
21943: LD_VAR 0 13
21947: PPUSH
21948: CALL_OW 325
21952: PUSH
21953: LD_VAR 0 10
21957: PPUSH
21958: CALL_OW 255
21962: PPUSH
21963: LD_VAR 0 13
21967: PPUSH
21968: CALL_OW 325
21972: NOT
21973: AND
21974: IFFALSE 22003
// missile := Insert ( missile , missile + 1 , 3 ) ;
21976: LD_ADDR_VAR 0 14
21980: PUSH
21981: LD_VAR 0 14
21985: PPUSH
21986: LD_VAR 0 14
21990: PUSH
21991: LD_INT 1
21993: PLUS
21994: PPUSH
21995: LD_INT 3
21997: PPUSH
21998: CALL_OW 2
22002: ST_TO_ADDR
// if missile < 2 then
22003: LD_VAR 0 14
22007: PUSH
22008: LD_INT 2
22010: LESS
22011: IFFALSE 22015
// exit ;
22013: GO 22237
// x := GetX ( enemy ) ;
22015: LD_ADDR_VAR 0 4
22019: PUSH
22020: LD_VAR 0 10
22024: PPUSH
22025: CALL_OW 250
22029: ST_TO_ADDR
// y := GetY ( enemy ) ;
22030: LD_ADDR_VAR 0 5
22034: PUSH
22035: LD_VAR 0 10
22039: PPUSH
22040: CALL_OW 251
22044: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22045: LD_ADDR_VAR 0 6
22049: PUSH
22050: LD_VAR 0 4
22054: PUSH
22055: LD_INT 1
22057: NEG
22058: PPUSH
22059: LD_INT 1
22061: PPUSH
22062: CALL_OW 12
22066: PLUS
22067: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22068: LD_ADDR_VAR 0 7
22072: PUSH
22073: LD_VAR 0 5
22077: PUSH
22078: LD_INT 1
22080: NEG
22081: PPUSH
22082: LD_INT 1
22084: PPUSH
22085: CALL_OW 12
22089: PLUS
22090: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22091: LD_VAR 0 6
22095: PPUSH
22096: LD_VAR 0 7
22100: PPUSH
22101: CALL_OW 488
22105: NOT
22106: IFFALSE 22128
// begin _x := x ;
22108: LD_ADDR_VAR 0 6
22112: PUSH
22113: LD_VAR 0 4
22117: ST_TO_ADDR
// _y := y ;
22118: LD_ADDR_VAR 0 7
22122: PUSH
22123: LD_VAR 0 5
22127: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22128: LD_ADDR_VAR 0 3
22132: PUSH
22133: LD_INT 1
22135: PPUSH
22136: LD_VAR 0 14
22140: PPUSH
22141: CALL_OW 12
22145: ST_TO_ADDR
// case i of 1 :
22146: LD_VAR 0 3
22150: PUSH
22151: LD_INT 1
22153: DOUBLE
22154: EQUAL
22155: IFTRUE 22159
22157: GO 22176
22159: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22160: LD_VAR 0 1
22164: PPUSH
22165: LD_VAR 0 10
22169: PPUSH
22170: CALL_OW 115
22174: GO 22237
22176: LD_INT 2
22178: DOUBLE
22179: EQUAL
22180: IFTRUE 22184
22182: GO 22206
22184: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22185: LD_VAR 0 1
22189: PPUSH
22190: LD_VAR 0 6
22194: PPUSH
22195: LD_VAR 0 7
22199: PPUSH
22200: CALL_OW 153
22204: GO 22237
22206: LD_INT 3
22208: DOUBLE
22209: EQUAL
22210: IFTRUE 22214
22212: GO 22236
22214: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22215: LD_VAR 0 1
22219: PPUSH
22220: LD_VAR 0 6
22224: PPUSH
22225: LD_VAR 0 7
22229: PPUSH
22230: CALL_OW 154
22234: GO 22237
22236: POP
// end ;
22237: LD_VAR 0 2
22241: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22242: LD_INT 0
22244: PPUSH
22245: PPUSH
22246: PPUSH
22247: PPUSH
22248: PPUSH
22249: PPUSH
// if not unit or not building then
22250: LD_VAR 0 1
22254: NOT
22255: PUSH
22256: LD_VAR 0 2
22260: NOT
22261: OR
22262: IFFALSE 22266
// exit ;
22264: GO 22424
// x := GetX ( building ) ;
22266: LD_ADDR_VAR 0 5
22270: PUSH
22271: LD_VAR 0 2
22275: PPUSH
22276: CALL_OW 250
22280: ST_TO_ADDR
// y := GetY ( building ) ;
22281: LD_ADDR_VAR 0 6
22285: PUSH
22286: LD_VAR 0 2
22290: PPUSH
22291: CALL_OW 251
22295: ST_TO_ADDR
// for i = 0 to 5 do
22296: LD_ADDR_VAR 0 4
22300: PUSH
22301: DOUBLE
22302: LD_INT 0
22304: DEC
22305: ST_TO_ADDR
22306: LD_INT 5
22308: PUSH
22309: FOR_TO
22310: IFFALSE 22422
// begin _x := ShiftX ( x , i , 3 ) ;
22312: LD_ADDR_VAR 0 7
22316: PUSH
22317: LD_VAR 0 5
22321: PPUSH
22322: LD_VAR 0 4
22326: PPUSH
22327: LD_INT 3
22329: PPUSH
22330: CALL_OW 272
22334: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22335: LD_ADDR_VAR 0 8
22339: PUSH
22340: LD_VAR 0 6
22344: PPUSH
22345: LD_VAR 0 4
22349: PPUSH
22350: LD_INT 3
22352: PPUSH
22353: CALL_OW 273
22357: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22358: LD_VAR 0 7
22362: PPUSH
22363: LD_VAR 0 8
22367: PPUSH
22368: CALL_OW 488
22372: NOT
22373: IFFALSE 22377
// continue ;
22375: GO 22309
// if HexInfo ( _x , _y ) = 0 then
22377: LD_VAR 0 7
22381: PPUSH
22382: LD_VAR 0 8
22386: PPUSH
22387: CALL_OW 428
22391: PUSH
22392: LD_INT 0
22394: EQUAL
22395: IFFALSE 22420
// begin ComMoveXY ( unit , _x , _y ) ;
22397: LD_VAR 0 1
22401: PPUSH
22402: LD_VAR 0 7
22406: PPUSH
22407: LD_VAR 0 8
22411: PPUSH
22412: CALL_OW 111
// exit ;
22416: POP
22417: POP
22418: GO 22424
// end ; end ;
22420: GO 22309
22422: POP
22423: POP
// end ;
22424: LD_VAR 0 3
22428: RET
// export function ScanBase ( side , base_area ) ; begin
22429: LD_INT 0
22431: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22432: LD_ADDR_VAR 0 3
22436: PUSH
22437: LD_VAR 0 2
22441: PPUSH
22442: LD_INT 81
22444: PUSH
22445: LD_VAR 0 1
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PPUSH
22454: CALL_OW 70
22458: ST_TO_ADDR
// end ;
22459: LD_VAR 0 3
22463: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22464: LD_INT 0
22466: PPUSH
22467: PPUSH
22468: PPUSH
22469: PPUSH
// result := false ;
22470: LD_ADDR_VAR 0 2
22474: PUSH
22475: LD_INT 0
22477: ST_TO_ADDR
// side := GetSide ( unit ) ;
22478: LD_ADDR_VAR 0 3
22482: PUSH
22483: LD_VAR 0 1
22487: PPUSH
22488: CALL_OW 255
22492: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22493: LD_ADDR_VAR 0 4
22497: PUSH
22498: LD_VAR 0 1
22502: PPUSH
22503: CALL_OW 248
22507: ST_TO_ADDR
// case nat of 1 :
22508: LD_VAR 0 4
22512: PUSH
22513: LD_INT 1
22515: DOUBLE
22516: EQUAL
22517: IFTRUE 22521
22519: GO 22532
22521: POP
// tech := tech_lassight ; 2 :
22522: LD_ADDR_VAR 0 5
22526: PUSH
22527: LD_INT 12
22529: ST_TO_ADDR
22530: GO 22571
22532: LD_INT 2
22534: DOUBLE
22535: EQUAL
22536: IFTRUE 22540
22538: GO 22551
22540: POP
// tech := tech_mortar ; 3 :
22541: LD_ADDR_VAR 0 5
22545: PUSH
22546: LD_INT 41
22548: ST_TO_ADDR
22549: GO 22571
22551: LD_INT 3
22553: DOUBLE
22554: EQUAL
22555: IFTRUE 22559
22557: GO 22570
22559: POP
// tech := tech_bazooka ; end ;
22560: LD_ADDR_VAR 0 5
22564: PUSH
22565: LD_INT 44
22567: ST_TO_ADDR
22568: GO 22571
22570: POP
// if Researched ( side , tech ) then
22571: LD_VAR 0 3
22575: PPUSH
22576: LD_VAR 0 5
22580: PPUSH
22581: CALL_OW 325
22585: IFFALSE 22612
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22587: LD_ADDR_VAR 0 2
22591: PUSH
22592: LD_INT 5
22594: PUSH
22595: LD_INT 8
22597: PUSH
22598: LD_INT 9
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: LIST
22605: PUSH
22606: LD_VAR 0 4
22610: ARRAY
22611: ST_TO_ADDR
// end ;
22612: LD_VAR 0 2
22616: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22617: LD_INT 0
22619: PPUSH
22620: PPUSH
22621: PPUSH
// if not mines then
22622: LD_VAR 0 2
22626: NOT
22627: IFFALSE 22631
// exit ;
22629: GO 22775
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22631: LD_ADDR_VAR 0 5
22635: PUSH
22636: LD_INT 81
22638: PUSH
22639: LD_VAR 0 1
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: LD_INT 3
22650: PUSH
22651: LD_INT 21
22653: PUSH
22654: LD_INT 3
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PUSH
22661: EMPTY
22662: LIST
22663: LIST
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PPUSH
22669: CALL_OW 69
22673: ST_TO_ADDR
// for i in mines do
22674: LD_ADDR_VAR 0 4
22678: PUSH
22679: LD_VAR 0 2
22683: PUSH
22684: FOR_IN
22685: IFFALSE 22773
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22687: LD_VAR 0 4
22691: PUSH
22692: LD_INT 1
22694: ARRAY
22695: PPUSH
22696: LD_VAR 0 4
22700: PUSH
22701: LD_INT 2
22703: ARRAY
22704: PPUSH
22705: CALL_OW 458
22709: NOT
22710: IFFALSE 22714
// continue ;
22712: GO 22684
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22714: LD_VAR 0 4
22718: PUSH
22719: LD_INT 1
22721: ARRAY
22722: PPUSH
22723: LD_VAR 0 4
22727: PUSH
22728: LD_INT 2
22730: ARRAY
22731: PPUSH
22732: CALL_OW 428
22736: PUSH
22737: LD_VAR 0 5
22741: IN
22742: IFFALSE 22771
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22744: LD_VAR 0 4
22748: PUSH
22749: LD_INT 1
22751: ARRAY
22752: PPUSH
22753: LD_VAR 0 4
22757: PUSH
22758: LD_INT 2
22760: ARRAY
22761: PPUSH
22762: LD_VAR 0 1
22766: PPUSH
22767: CALL_OW 456
// end ;
22771: GO 22684
22773: POP
22774: POP
// end ;
22775: LD_VAR 0 3
22779: RET
// export function Count ( array ) ; var i ; begin
22780: LD_INT 0
22782: PPUSH
22783: PPUSH
// result := 0 ;
22784: LD_ADDR_VAR 0 2
22788: PUSH
22789: LD_INT 0
22791: ST_TO_ADDR
// for i in array do
22792: LD_ADDR_VAR 0 3
22796: PUSH
22797: LD_VAR 0 1
22801: PUSH
22802: FOR_IN
22803: IFFALSE 22827
// if i then
22805: LD_VAR 0 3
22809: IFFALSE 22825
// result := result + 1 ;
22811: LD_ADDR_VAR 0 2
22815: PUSH
22816: LD_VAR 0 2
22820: PUSH
22821: LD_INT 1
22823: PLUS
22824: ST_TO_ADDR
22825: GO 22802
22827: POP
22828: POP
// end ;
22829: LD_VAR 0 2
22833: RET
// export function IsEmpty ( building ) ; begin
22834: LD_INT 0
22836: PPUSH
// if not building then
22837: LD_VAR 0 1
22841: NOT
22842: IFFALSE 22846
// exit ;
22844: GO 22889
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22846: LD_ADDR_VAR 0 2
22850: PUSH
22851: LD_VAR 0 1
22855: PUSH
22856: LD_INT 22
22858: PUSH
22859: LD_VAR 0 1
22863: PPUSH
22864: CALL_OW 255
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 58
22875: PUSH
22876: EMPTY
22877: LIST
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PPUSH
22883: CALL_OW 69
22887: IN
22888: ST_TO_ADDR
// end ;
22889: LD_VAR 0 2
22893: RET
// export function IsNotFull ( building ) ; begin
22894: LD_INT 0
22896: PPUSH
// if not building then
22897: LD_VAR 0 1
22901: NOT
22902: IFFALSE 22906
// exit ;
22904: GO 22925
// result := UnitsInside ( building ) < 6 ;
22906: LD_ADDR_VAR 0 2
22910: PUSH
22911: LD_VAR 0 1
22915: PPUSH
22916: CALL_OW 313
22920: PUSH
22921: LD_INT 6
22923: LESS
22924: ST_TO_ADDR
// end ;
22925: LD_VAR 0 2
22929: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22930: LD_INT 0
22932: PPUSH
22933: PPUSH
22934: PPUSH
22935: PPUSH
// tmp := [ ] ;
22936: LD_ADDR_VAR 0 3
22940: PUSH
22941: EMPTY
22942: ST_TO_ADDR
// list := [ ] ;
22943: LD_ADDR_VAR 0 5
22947: PUSH
22948: EMPTY
22949: ST_TO_ADDR
// for i = 16 to 25 do
22950: LD_ADDR_VAR 0 4
22954: PUSH
22955: DOUBLE
22956: LD_INT 16
22958: DEC
22959: ST_TO_ADDR
22960: LD_INT 25
22962: PUSH
22963: FOR_TO
22964: IFFALSE 23037
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22966: LD_ADDR_VAR 0 3
22970: PUSH
22971: LD_VAR 0 3
22975: PUSH
22976: LD_INT 22
22978: PUSH
22979: LD_VAR 0 1
22983: PPUSH
22984: CALL_OW 255
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PUSH
22993: LD_INT 91
22995: PUSH
22996: LD_VAR 0 1
23000: PUSH
23001: LD_INT 6
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: LIST
23008: PUSH
23009: LD_INT 30
23011: PUSH
23012: LD_VAR 0 4
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: LIST
23025: PUSH
23026: EMPTY
23027: LIST
23028: PPUSH
23029: CALL_OW 69
23033: ADD
23034: ST_TO_ADDR
23035: GO 22963
23037: POP
23038: POP
// for i = 1 to tmp do
23039: LD_ADDR_VAR 0 4
23043: PUSH
23044: DOUBLE
23045: LD_INT 1
23047: DEC
23048: ST_TO_ADDR
23049: LD_VAR 0 3
23053: PUSH
23054: FOR_TO
23055: IFFALSE 23143
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23057: LD_ADDR_VAR 0 5
23061: PUSH
23062: LD_VAR 0 5
23066: PUSH
23067: LD_VAR 0 3
23071: PUSH
23072: LD_VAR 0 4
23076: ARRAY
23077: PPUSH
23078: CALL_OW 266
23082: PUSH
23083: LD_VAR 0 3
23087: PUSH
23088: LD_VAR 0 4
23092: ARRAY
23093: PPUSH
23094: CALL_OW 250
23098: PUSH
23099: LD_VAR 0 3
23103: PUSH
23104: LD_VAR 0 4
23108: ARRAY
23109: PPUSH
23110: CALL_OW 251
23114: PUSH
23115: LD_VAR 0 3
23119: PUSH
23120: LD_VAR 0 4
23124: ARRAY
23125: PPUSH
23126: CALL_OW 254
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: PUSH
23137: EMPTY
23138: LIST
23139: ADD
23140: ST_TO_ADDR
23141: GO 23054
23143: POP
23144: POP
// result := list ;
23145: LD_ADDR_VAR 0 2
23149: PUSH
23150: LD_VAR 0 5
23154: ST_TO_ADDR
// end ;
23155: LD_VAR 0 2
23159: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23160: LD_INT 0
23162: PPUSH
23163: PPUSH
23164: PPUSH
23165: PPUSH
23166: PPUSH
23167: PPUSH
23168: PPUSH
// if not factory then
23169: LD_VAR 0 1
23173: NOT
23174: IFFALSE 23178
// exit ;
23176: GO 23771
// if control = control_apeman then
23178: LD_VAR 0 4
23182: PUSH
23183: LD_INT 5
23185: EQUAL
23186: IFFALSE 23295
// begin tmp := UnitsInside ( factory ) ;
23188: LD_ADDR_VAR 0 8
23192: PUSH
23193: LD_VAR 0 1
23197: PPUSH
23198: CALL_OW 313
23202: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23203: LD_VAR 0 8
23207: PPUSH
23208: LD_INT 25
23210: PUSH
23211: LD_INT 12
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PPUSH
23218: CALL_OW 72
23222: NOT
23223: IFFALSE 23233
// control := control_manual ;
23225: LD_ADDR_VAR 0 4
23229: PUSH
23230: LD_INT 1
23232: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23233: LD_ADDR_VAR 0 8
23237: PUSH
23238: LD_VAR 0 1
23242: PPUSH
23243: CALL 22930 0 1
23247: ST_TO_ADDR
// if tmp then
23248: LD_VAR 0 8
23252: IFFALSE 23295
// begin for i in tmp do
23254: LD_ADDR_VAR 0 7
23258: PUSH
23259: LD_VAR 0 8
23263: PUSH
23264: FOR_IN
23265: IFFALSE 23293
// if i [ 1 ] = b_ext_radio then
23267: LD_VAR 0 7
23271: PUSH
23272: LD_INT 1
23274: ARRAY
23275: PUSH
23276: LD_INT 22
23278: EQUAL
23279: IFFALSE 23291
// begin control := control_remote ;
23281: LD_ADDR_VAR 0 4
23285: PUSH
23286: LD_INT 2
23288: ST_TO_ADDR
// break ;
23289: GO 23293
// end ;
23291: GO 23264
23293: POP
23294: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23295: LD_VAR 0 1
23299: PPUSH
23300: LD_VAR 0 2
23304: PPUSH
23305: LD_VAR 0 3
23309: PPUSH
23310: LD_VAR 0 4
23314: PPUSH
23315: LD_VAR 0 5
23319: PPUSH
23320: CALL_OW 448
23324: IFFALSE 23359
// begin result := [ chassis , engine , control , weapon ] ;
23326: LD_ADDR_VAR 0 6
23330: PUSH
23331: LD_VAR 0 2
23335: PUSH
23336: LD_VAR 0 3
23340: PUSH
23341: LD_VAR 0 4
23345: PUSH
23346: LD_VAR 0 5
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: ST_TO_ADDR
// exit ;
23357: GO 23771
// end ; _chassis := AvailableChassisList ( factory ) ;
23359: LD_ADDR_VAR 0 9
23363: PUSH
23364: LD_VAR 0 1
23368: PPUSH
23369: CALL_OW 475
23373: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23374: LD_ADDR_VAR 0 11
23378: PUSH
23379: LD_VAR 0 1
23383: PPUSH
23384: CALL_OW 476
23388: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23389: LD_ADDR_VAR 0 12
23393: PUSH
23394: LD_VAR 0 1
23398: PPUSH
23399: CALL_OW 477
23403: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23404: LD_ADDR_VAR 0 10
23408: PUSH
23409: LD_VAR 0 1
23413: PPUSH
23414: CALL_OW 478
23418: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23419: LD_VAR 0 9
23423: NOT
23424: PUSH
23425: LD_VAR 0 11
23429: NOT
23430: OR
23431: PUSH
23432: LD_VAR 0 12
23436: NOT
23437: OR
23438: PUSH
23439: LD_VAR 0 10
23443: NOT
23444: OR
23445: IFFALSE 23480
// begin result := [ chassis , engine , control , weapon ] ;
23447: LD_ADDR_VAR 0 6
23451: PUSH
23452: LD_VAR 0 2
23456: PUSH
23457: LD_VAR 0 3
23461: PUSH
23462: LD_VAR 0 4
23466: PUSH
23467: LD_VAR 0 5
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: ST_TO_ADDR
// exit ;
23478: GO 23771
// end ; if not chassis in _chassis then
23480: LD_VAR 0 2
23484: PUSH
23485: LD_VAR 0 9
23489: IN
23490: NOT
23491: IFFALSE 23517
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23493: LD_ADDR_VAR 0 2
23497: PUSH
23498: LD_VAR 0 9
23502: PUSH
23503: LD_INT 1
23505: PPUSH
23506: LD_VAR 0 9
23510: PPUSH
23511: CALL_OW 12
23515: ARRAY
23516: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23517: LD_VAR 0 2
23521: PPUSH
23522: LD_VAR 0 3
23526: PPUSH
23527: CALL 23776 0 2
23531: NOT
23532: IFFALSE 23591
// repeat engine := _engine [ 1 ] ;
23534: LD_ADDR_VAR 0 3
23538: PUSH
23539: LD_VAR 0 11
23543: PUSH
23544: LD_INT 1
23546: ARRAY
23547: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23548: LD_ADDR_VAR 0 11
23552: PUSH
23553: LD_VAR 0 11
23557: PPUSH
23558: LD_INT 1
23560: PPUSH
23561: CALL_OW 3
23565: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23566: LD_VAR 0 2
23570: PPUSH
23571: LD_VAR 0 3
23575: PPUSH
23576: CALL 23776 0 2
23580: PUSH
23581: LD_VAR 0 11
23585: PUSH
23586: EMPTY
23587: EQUAL
23588: OR
23589: IFFALSE 23534
// if not control in _control then
23591: LD_VAR 0 4
23595: PUSH
23596: LD_VAR 0 12
23600: IN
23601: NOT
23602: IFFALSE 23628
// control := _control [ rand ( 1 , _control ) ] ;
23604: LD_ADDR_VAR 0 4
23608: PUSH
23609: LD_VAR 0 12
23613: PUSH
23614: LD_INT 1
23616: PPUSH
23617: LD_VAR 0 12
23621: PPUSH
23622: CALL_OW 12
23626: ARRAY
23627: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23628: LD_VAR 0 2
23632: PPUSH
23633: LD_VAR 0 5
23637: PPUSH
23638: CALL 23996 0 2
23642: NOT
23643: IFFALSE 23702
// repeat weapon := _weapon [ 1 ] ;
23645: LD_ADDR_VAR 0 5
23649: PUSH
23650: LD_VAR 0 10
23654: PUSH
23655: LD_INT 1
23657: ARRAY
23658: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23659: LD_ADDR_VAR 0 10
23663: PUSH
23664: LD_VAR 0 10
23668: PPUSH
23669: LD_INT 1
23671: PPUSH
23672: CALL_OW 3
23676: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23677: LD_VAR 0 2
23681: PPUSH
23682: LD_VAR 0 5
23686: PPUSH
23687: CALL 23996 0 2
23691: PUSH
23692: LD_VAR 0 10
23696: PUSH
23697: EMPTY
23698: EQUAL
23699: OR
23700: IFFALSE 23645
// result := [ ] ;
23702: LD_ADDR_VAR 0 6
23706: PUSH
23707: EMPTY
23708: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23709: LD_VAR 0 1
23713: PPUSH
23714: LD_VAR 0 2
23718: PPUSH
23719: LD_VAR 0 3
23723: PPUSH
23724: LD_VAR 0 4
23728: PPUSH
23729: LD_VAR 0 5
23733: PPUSH
23734: CALL_OW 448
23738: IFFALSE 23771
// result := [ chassis , engine , control , weapon ] ;
23740: LD_ADDR_VAR 0 6
23744: PUSH
23745: LD_VAR 0 2
23749: PUSH
23750: LD_VAR 0 3
23754: PUSH
23755: LD_VAR 0 4
23759: PUSH
23760: LD_VAR 0 5
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: ST_TO_ADDR
// end ;
23771: LD_VAR 0 6
23775: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23776: LD_INT 0
23778: PPUSH
// if not chassis or not engine then
23779: LD_VAR 0 1
23783: NOT
23784: PUSH
23785: LD_VAR 0 2
23789: NOT
23790: OR
23791: IFFALSE 23795
// exit ;
23793: GO 23991
// case engine of engine_solar :
23795: LD_VAR 0 2
23799: PUSH
23800: LD_INT 2
23802: DOUBLE
23803: EQUAL
23804: IFTRUE 23808
23806: GO 23846
23808: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23809: LD_ADDR_VAR 0 3
23813: PUSH
23814: LD_INT 11
23816: PUSH
23817: LD_INT 12
23819: PUSH
23820: LD_INT 13
23822: PUSH
23823: LD_INT 14
23825: PUSH
23826: LD_INT 1
23828: PUSH
23829: LD_INT 2
23831: PUSH
23832: LD_INT 3
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: ST_TO_ADDR
23844: GO 23975
23846: LD_INT 1
23848: DOUBLE
23849: EQUAL
23850: IFTRUE 23854
23852: GO 23916
23854: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23855: LD_ADDR_VAR 0 3
23859: PUSH
23860: LD_INT 11
23862: PUSH
23863: LD_INT 12
23865: PUSH
23866: LD_INT 13
23868: PUSH
23869: LD_INT 14
23871: PUSH
23872: LD_INT 1
23874: PUSH
23875: LD_INT 2
23877: PUSH
23878: LD_INT 3
23880: PUSH
23881: LD_INT 4
23883: PUSH
23884: LD_INT 5
23886: PUSH
23887: LD_INT 21
23889: PUSH
23890: LD_INT 23
23892: PUSH
23893: LD_INT 22
23895: PUSH
23896: LD_INT 24
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: ST_TO_ADDR
23914: GO 23975
23916: LD_INT 3
23918: DOUBLE
23919: EQUAL
23920: IFTRUE 23924
23922: GO 23974
23924: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23925: LD_ADDR_VAR 0 3
23929: PUSH
23930: LD_INT 13
23932: PUSH
23933: LD_INT 14
23935: PUSH
23936: LD_INT 2
23938: PUSH
23939: LD_INT 3
23941: PUSH
23942: LD_INT 4
23944: PUSH
23945: LD_INT 5
23947: PUSH
23948: LD_INT 21
23950: PUSH
23951: LD_INT 22
23953: PUSH
23954: LD_INT 23
23956: PUSH
23957: LD_INT 24
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: ST_TO_ADDR
23972: GO 23975
23974: POP
// result := ( chassis in result ) ;
23975: LD_ADDR_VAR 0 3
23979: PUSH
23980: LD_VAR 0 1
23984: PUSH
23985: LD_VAR 0 3
23989: IN
23990: ST_TO_ADDR
// end ;
23991: LD_VAR 0 3
23995: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23996: LD_INT 0
23998: PPUSH
// if not chassis or not weapon then
23999: LD_VAR 0 1
24003: NOT
24004: PUSH
24005: LD_VAR 0 2
24009: NOT
24010: OR
24011: IFFALSE 24015
// exit ;
24013: GO 25041
// case weapon of us_machine_gun :
24015: LD_VAR 0 2
24019: PUSH
24020: LD_INT 2
24022: DOUBLE
24023: EQUAL
24024: IFTRUE 24028
24026: GO 24058
24028: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24029: LD_ADDR_VAR 0 3
24033: PUSH
24034: LD_INT 1
24036: PUSH
24037: LD_INT 2
24039: PUSH
24040: LD_INT 3
24042: PUSH
24043: LD_INT 4
24045: PUSH
24046: LD_INT 5
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: ST_TO_ADDR
24056: GO 25025
24058: LD_INT 3
24060: DOUBLE
24061: EQUAL
24062: IFTRUE 24066
24064: GO 24096
24066: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24067: LD_ADDR_VAR 0 3
24071: PUSH
24072: LD_INT 1
24074: PUSH
24075: LD_INT 2
24077: PUSH
24078: LD_INT 3
24080: PUSH
24081: LD_INT 4
24083: PUSH
24084: LD_INT 5
24086: PUSH
24087: EMPTY
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: ST_TO_ADDR
24094: GO 25025
24096: LD_INT 11
24098: DOUBLE
24099: EQUAL
24100: IFTRUE 24104
24102: GO 24134
24104: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24105: LD_ADDR_VAR 0 3
24109: PUSH
24110: LD_INT 1
24112: PUSH
24113: LD_INT 2
24115: PUSH
24116: LD_INT 3
24118: PUSH
24119: LD_INT 4
24121: PUSH
24122: LD_INT 5
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: ST_TO_ADDR
24132: GO 25025
24134: LD_INT 4
24136: DOUBLE
24137: EQUAL
24138: IFTRUE 24142
24140: GO 24168
24142: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24143: LD_ADDR_VAR 0 3
24147: PUSH
24148: LD_INT 2
24150: PUSH
24151: LD_INT 3
24153: PUSH
24154: LD_INT 4
24156: PUSH
24157: LD_INT 5
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: ST_TO_ADDR
24166: GO 25025
24168: LD_INT 5
24170: DOUBLE
24171: EQUAL
24172: IFTRUE 24176
24174: GO 24202
24176: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24177: LD_ADDR_VAR 0 3
24181: PUSH
24182: LD_INT 2
24184: PUSH
24185: LD_INT 3
24187: PUSH
24188: LD_INT 4
24190: PUSH
24191: LD_INT 5
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: ST_TO_ADDR
24200: GO 25025
24202: LD_INT 9
24204: DOUBLE
24205: EQUAL
24206: IFTRUE 24210
24208: GO 24236
24210: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24211: LD_ADDR_VAR 0 3
24215: PUSH
24216: LD_INT 2
24218: PUSH
24219: LD_INT 3
24221: PUSH
24222: LD_INT 4
24224: PUSH
24225: LD_INT 5
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: ST_TO_ADDR
24234: GO 25025
24236: LD_INT 7
24238: DOUBLE
24239: EQUAL
24240: IFTRUE 24244
24242: GO 24270
24244: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24245: LD_ADDR_VAR 0 3
24249: PUSH
24250: LD_INT 2
24252: PUSH
24253: LD_INT 3
24255: PUSH
24256: LD_INT 4
24258: PUSH
24259: LD_INT 5
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: LIST
24266: LIST
24267: ST_TO_ADDR
24268: GO 25025
24270: LD_INT 12
24272: DOUBLE
24273: EQUAL
24274: IFTRUE 24278
24276: GO 24304
24278: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24279: LD_ADDR_VAR 0 3
24283: PUSH
24284: LD_INT 2
24286: PUSH
24287: LD_INT 3
24289: PUSH
24290: LD_INT 4
24292: PUSH
24293: LD_INT 5
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: ST_TO_ADDR
24302: GO 25025
24304: LD_INT 13
24306: DOUBLE
24307: EQUAL
24308: IFTRUE 24312
24310: GO 24338
24312: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24313: LD_ADDR_VAR 0 3
24317: PUSH
24318: LD_INT 2
24320: PUSH
24321: LD_INT 3
24323: PUSH
24324: LD_INT 4
24326: PUSH
24327: LD_INT 5
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: ST_TO_ADDR
24336: GO 25025
24338: LD_INT 14
24340: DOUBLE
24341: EQUAL
24342: IFTRUE 24346
24344: GO 24364
24346: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24347: LD_ADDR_VAR 0 3
24351: PUSH
24352: LD_INT 4
24354: PUSH
24355: LD_INT 5
24357: PUSH
24358: EMPTY
24359: LIST
24360: LIST
24361: ST_TO_ADDR
24362: GO 25025
24364: LD_INT 6
24366: DOUBLE
24367: EQUAL
24368: IFTRUE 24372
24370: GO 24390
24372: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24373: LD_ADDR_VAR 0 3
24377: PUSH
24378: LD_INT 4
24380: PUSH
24381: LD_INT 5
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: ST_TO_ADDR
24388: GO 25025
24390: LD_INT 10
24392: DOUBLE
24393: EQUAL
24394: IFTRUE 24398
24396: GO 24416
24398: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24399: LD_ADDR_VAR 0 3
24403: PUSH
24404: LD_INT 4
24406: PUSH
24407: LD_INT 5
24409: PUSH
24410: EMPTY
24411: LIST
24412: LIST
24413: ST_TO_ADDR
24414: GO 25025
24416: LD_INT 22
24418: DOUBLE
24419: EQUAL
24420: IFTRUE 24424
24422: GO 24450
24424: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24425: LD_ADDR_VAR 0 3
24429: PUSH
24430: LD_INT 11
24432: PUSH
24433: LD_INT 12
24435: PUSH
24436: LD_INT 13
24438: PUSH
24439: LD_INT 14
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: ST_TO_ADDR
24448: GO 25025
24450: LD_INT 23
24452: DOUBLE
24453: EQUAL
24454: IFTRUE 24458
24456: GO 24484
24458: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24459: LD_ADDR_VAR 0 3
24463: PUSH
24464: LD_INT 11
24466: PUSH
24467: LD_INT 12
24469: PUSH
24470: LD_INT 13
24472: PUSH
24473: LD_INT 14
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: ST_TO_ADDR
24482: GO 25025
24484: LD_INT 24
24486: DOUBLE
24487: EQUAL
24488: IFTRUE 24492
24490: GO 24518
24492: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24493: LD_ADDR_VAR 0 3
24497: PUSH
24498: LD_INT 11
24500: PUSH
24501: LD_INT 12
24503: PUSH
24504: LD_INT 13
24506: PUSH
24507: LD_INT 14
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: ST_TO_ADDR
24516: GO 25025
24518: LD_INT 30
24520: DOUBLE
24521: EQUAL
24522: IFTRUE 24526
24524: GO 24552
24526: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24527: LD_ADDR_VAR 0 3
24531: PUSH
24532: LD_INT 11
24534: PUSH
24535: LD_INT 12
24537: PUSH
24538: LD_INT 13
24540: PUSH
24541: LD_INT 14
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: ST_TO_ADDR
24550: GO 25025
24552: LD_INT 25
24554: DOUBLE
24555: EQUAL
24556: IFTRUE 24560
24558: GO 24578
24560: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24561: LD_ADDR_VAR 0 3
24565: PUSH
24566: LD_INT 13
24568: PUSH
24569: LD_INT 14
24571: PUSH
24572: EMPTY
24573: LIST
24574: LIST
24575: ST_TO_ADDR
24576: GO 25025
24578: LD_INT 27
24580: DOUBLE
24581: EQUAL
24582: IFTRUE 24586
24584: GO 24604
24586: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24587: LD_ADDR_VAR 0 3
24591: PUSH
24592: LD_INT 13
24594: PUSH
24595: LD_INT 14
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: ST_TO_ADDR
24602: GO 25025
24604: LD_INT 28
24606: DOUBLE
24607: EQUAL
24608: IFTRUE 24612
24610: GO 24630
24612: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24613: LD_ADDR_VAR 0 3
24617: PUSH
24618: LD_INT 13
24620: PUSH
24621: LD_INT 14
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: ST_TO_ADDR
24628: GO 25025
24630: LD_INT 29
24632: DOUBLE
24633: EQUAL
24634: IFTRUE 24638
24636: GO 24656
24638: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24639: LD_ADDR_VAR 0 3
24643: PUSH
24644: LD_INT 13
24646: PUSH
24647: LD_INT 14
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: ST_TO_ADDR
24654: GO 25025
24656: LD_INT 31
24658: DOUBLE
24659: EQUAL
24660: IFTRUE 24664
24662: GO 24682
24664: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24665: LD_ADDR_VAR 0 3
24669: PUSH
24670: LD_INT 13
24672: PUSH
24673: LD_INT 14
24675: PUSH
24676: EMPTY
24677: LIST
24678: LIST
24679: ST_TO_ADDR
24680: GO 25025
24682: LD_INT 26
24684: DOUBLE
24685: EQUAL
24686: IFTRUE 24690
24688: GO 24708
24690: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24691: LD_ADDR_VAR 0 3
24695: PUSH
24696: LD_INT 13
24698: PUSH
24699: LD_INT 14
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: ST_TO_ADDR
24706: GO 25025
24708: LD_INT 42
24710: DOUBLE
24711: EQUAL
24712: IFTRUE 24716
24714: GO 24742
24716: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24717: LD_ADDR_VAR 0 3
24721: PUSH
24722: LD_INT 21
24724: PUSH
24725: LD_INT 22
24727: PUSH
24728: LD_INT 23
24730: PUSH
24731: LD_INT 24
24733: PUSH
24734: EMPTY
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: ST_TO_ADDR
24740: GO 25025
24742: LD_INT 43
24744: DOUBLE
24745: EQUAL
24746: IFTRUE 24750
24748: GO 24776
24750: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24751: LD_ADDR_VAR 0 3
24755: PUSH
24756: LD_INT 21
24758: PUSH
24759: LD_INT 22
24761: PUSH
24762: LD_INT 23
24764: PUSH
24765: LD_INT 24
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: ST_TO_ADDR
24774: GO 25025
24776: LD_INT 44
24778: DOUBLE
24779: EQUAL
24780: IFTRUE 24784
24782: GO 24810
24784: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24785: LD_ADDR_VAR 0 3
24789: PUSH
24790: LD_INT 21
24792: PUSH
24793: LD_INT 22
24795: PUSH
24796: LD_INT 23
24798: PUSH
24799: LD_INT 24
24801: PUSH
24802: EMPTY
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: ST_TO_ADDR
24808: GO 25025
24810: LD_INT 45
24812: DOUBLE
24813: EQUAL
24814: IFTRUE 24818
24816: GO 24844
24818: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24819: LD_ADDR_VAR 0 3
24823: PUSH
24824: LD_INT 21
24826: PUSH
24827: LD_INT 22
24829: PUSH
24830: LD_INT 23
24832: PUSH
24833: LD_INT 24
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: ST_TO_ADDR
24842: GO 25025
24844: LD_INT 49
24846: DOUBLE
24847: EQUAL
24848: IFTRUE 24852
24850: GO 24878
24852: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24853: LD_ADDR_VAR 0 3
24857: PUSH
24858: LD_INT 21
24860: PUSH
24861: LD_INT 22
24863: PUSH
24864: LD_INT 23
24866: PUSH
24867: LD_INT 24
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: ST_TO_ADDR
24876: GO 25025
24878: LD_INT 51
24880: DOUBLE
24881: EQUAL
24882: IFTRUE 24886
24884: GO 24912
24886: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24887: LD_ADDR_VAR 0 3
24891: PUSH
24892: LD_INT 21
24894: PUSH
24895: LD_INT 22
24897: PUSH
24898: LD_INT 23
24900: PUSH
24901: LD_INT 24
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: ST_TO_ADDR
24910: GO 25025
24912: LD_INT 52
24914: DOUBLE
24915: EQUAL
24916: IFTRUE 24920
24918: GO 24946
24920: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24921: LD_ADDR_VAR 0 3
24925: PUSH
24926: LD_INT 21
24928: PUSH
24929: LD_INT 22
24931: PUSH
24932: LD_INT 23
24934: PUSH
24935: LD_INT 24
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: ST_TO_ADDR
24944: GO 25025
24946: LD_INT 53
24948: DOUBLE
24949: EQUAL
24950: IFTRUE 24954
24952: GO 24972
24954: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24955: LD_ADDR_VAR 0 3
24959: PUSH
24960: LD_INT 23
24962: PUSH
24963: LD_INT 24
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: ST_TO_ADDR
24970: GO 25025
24972: LD_INT 46
24974: DOUBLE
24975: EQUAL
24976: IFTRUE 24980
24978: GO 24998
24980: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24981: LD_ADDR_VAR 0 3
24985: PUSH
24986: LD_INT 23
24988: PUSH
24989: LD_INT 24
24991: PUSH
24992: EMPTY
24993: LIST
24994: LIST
24995: ST_TO_ADDR
24996: GO 25025
24998: LD_INT 47
25000: DOUBLE
25001: EQUAL
25002: IFTRUE 25006
25004: GO 25024
25006: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25007: LD_ADDR_VAR 0 3
25011: PUSH
25012: LD_INT 23
25014: PUSH
25015: LD_INT 24
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: ST_TO_ADDR
25022: GO 25025
25024: POP
// result := ( chassis in result ) ;
25025: LD_ADDR_VAR 0 3
25029: PUSH
25030: LD_VAR 0 1
25034: PUSH
25035: LD_VAR 0 3
25039: IN
25040: ST_TO_ADDR
// end ;
25041: LD_VAR 0 3
25045: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25046: LD_INT 0
25048: PPUSH
25049: PPUSH
25050: PPUSH
25051: PPUSH
25052: PPUSH
25053: PPUSH
25054: PPUSH
// result := array ;
25055: LD_ADDR_VAR 0 5
25059: PUSH
25060: LD_VAR 0 1
25064: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25065: LD_VAR 0 1
25069: NOT
25070: PUSH
25071: LD_VAR 0 2
25075: NOT
25076: OR
25077: PUSH
25078: LD_VAR 0 3
25082: NOT
25083: OR
25084: PUSH
25085: LD_VAR 0 2
25089: PUSH
25090: LD_VAR 0 1
25094: GREATER
25095: OR
25096: PUSH
25097: LD_VAR 0 3
25101: PUSH
25102: LD_VAR 0 1
25106: GREATER
25107: OR
25108: IFFALSE 25112
// exit ;
25110: GO 25408
// if direction then
25112: LD_VAR 0 4
25116: IFFALSE 25180
// begin d := 1 ;
25118: LD_ADDR_VAR 0 9
25122: PUSH
25123: LD_INT 1
25125: ST_TO_ADDR
// if i_from > i_to then
25126: LD_VAR 0 2
25130: PUSH
25131: LD_VAR 0 3
25135: GREATER
25136: IFFALSE 25162
// length := ( array - i_from ) + i_to else
25138: LD_ADDR_VAR 0 11
25142: PUSH
25143: LD_VAR 0 1
25147: PUSH
25148: LD_VAR 0 2
25152: MINUS
25153: PUSH
25154: LD_VAR 0 3
25158: PLUS
25159: ST_TO_ADDR
25160: GO 25178
// length := i_to - i_from ;
25162: LD_ADDR_VAR 0 11
25166: PUSH
25167: LD_VAR 0 3
25171: PUSH
25172: LD_VAR 0 2
25176: MINUS
25177: ST_TO_ADDR
// end else
25178: GO 25241
// begin d := - 1 ;
25180: LD_ADDR_VAR 0 9
25184: PUSH
25185: LD_INT 1
25187: NEG
25188: ST_TO_ADDR
// if i_from > i_to then
25189: LD_VAR 0 2
25193: PUSH
25194: LD_VAR 0 3
25198: GREATER
25199: IFFALSE 25219
// length := i_from - i_to else
25201: LD_ADDR_VAR 0 11
25205: PUSH
25206: LD_VAR 0 2
25210: PUSH
25211: LD_VAR 0 3
25215: MINUS
25216: ST_TO_ADDR
25217: GO 25241
// length := ( array - i_to ) + i_from ;
25219: LD_ADDR_VAR 0 11
25223: PUSH
25224: LD_VAR 0 1
25228: PUSH
25229: LD_VAR 0 3
25233: MINUS
25234: PUSH
25235: LD_VAR 0 2
25239: PLUS
25240: ST_TO_ADDR
// end ; if not length then
25241: LD_VAR 0 11
25245: NOT
25246: IFFALSE 25250
// exit ;
25248: GO 25408
// tmp := array ;
25250: LD_ADDR_VAR 0 10
25254: PUSH
25255: LD_VAR 0 1
25259: ST_TO_ADDR
// for i = 1 to length do
25260: LD_ADDR_VAR 0 6
25264: PUSH
25265: DOUBLE
25266: LD_INT 1
25268: DEC
25269: ST_TO_ADDR
25270: LD_VAR 0 11
25274: PUSH
25275: FOR_TO
25276: IFFALSE 25396
// begin for j = 1 to array do
25278: LD_ADDR_VAR 0 7
25282: PUSH
25283: DOUBLE
25284: LD_INT 1
25286: DEC
25287: ST_TO_ADDR
25288: LD_VAR 0 1
25292: PUSH
25293: FOR_TO
25294: IFFALSE 25382
// begin k := j + d ;
25296: LD_ADDR_VAR 0 8
25300: PUSH
25301: LD_VAR 0 7
25305: PUSH
25306: LD_VAR 0 9
25310: PLUS
25311: ST_TO_ADDR
// if k > array then
25312: LD_VAR 0 8
25316: PUSH
25317: LD_VAR 0 1
25321: GREATER
25322: IFFALSE 25332
// k := 1 ;
25324: LD_ADDR_VAR 0 8
25328: PUSH
25329: LD_INT 1
25331: ST_TO_ADDR
// if not k then
25332: LD_VAR 0 8
25336: NOT
25337: IFFALSE 25349
// k := array ;
25339: LD_ADDR_VAR 0 8
25343: PUSH
25344: LD_VAR 0 1
25348: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25349: LD_ADDR_VAR 0 10
25353: PUSH
25354: LD_VAR 0 10
25358: PPUSH
25359: LD_VAR 0 8
25363: PPUSH
25364: LD_VAR 0 1
25368: PUSH
25369: LD_VAR 0 7
25373: ARRAY
25374: PPUSH
25375: CALL_OW 1
25379: ST_TO_ADDR
// end ;
25380: GO 25293
25382: POP
25383: POP
// array := tmp ;
25384: LD_ADDR_VAR 0 1
25388: PUSH
25389: LD_VAR 0 10
25393: ST_TO_ADDR
// end ;
25394: GO 25275
25396: POP
25397: POP
// result := array ;
25398: LD_ADDR_VAR 0 5
25402: PUSH
25403: LD_VAR 0 1
25407: ST_TO_ADDR
// end ;
25408: LD_VAR 0 5
25412: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25413: LD_INT 0
25415: PPUSH
25416: PPUSH
// result := 0 ;
25417: LD_ADDR_VAR 0 3
25421: PUSH
25422: LD_INT 0
25424: ST_TO_ADDR
// if not array or not value in array then
25425: LD_VAR 0 1
25429: NOT
25430: PUSH
25431: LD_VAR 0 2
25435: PUSH
25436: LD_VAR 0 1
25440: IN
25441: NOT
25442: OR
25443: IFFALSE 25447
// exit ;
25445: GO 25501
// for i = 1 to array do
25447: LD_ADDR_VAR 0 4
25451: PUSH
25452: DOUBLE
25453: LD_INT 1
25455: DEC
25456: ST_TO_ADDR
25457: LD_VAR 0 1
25461: PUSH
25462: FOR_TO
25463: IFFALSE 25499
// if value = array [ i ] then
25465: LD_VAR 0 2
25469: PUSH
25470: LD_VAR 0 1
25474: PUSH
25475: LD_VAR 0 4
25479: ARRAY
25480: EQUAL
25481: IFFALSE 25497
// begin result := i ;
25483: LD_ADDR_VAR 0 3
25487: PUSH
25488: LD_VAR 0 4
25492: ST_TO_ADDR
// exit ;
25493: POP
25494: POP
25495: GO 25501
// end ;
25497: GO 25462
25499: POP
25500: POP
// end ;
25501: LD_VAR 0 3
25505: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25506: LD_INT 0
25508: PPUSH
// vc_chassis := chassis ;
25509: LD_ADDR_OWVAR 37
25513: PUSH
25514: LD_VAR 0 1
25518: ST_TO_ADDR
// vc_engine := engine ;
25519: LD_ADDR_OWVAR 39
25523: PUSH
25524: LD_VAR 0 2
25528: ST_TO_ADDR
// vc_control := control ;
25529: LD_ADDR_OWVAR 38
25533: PUSH
25534: LD_VAR 0 3
25538: ST_TO_ADDR
// vc_weapon := weapon ;
25539: LD_ADDR_OWVAR 40
25543: PUSH
25544: LD_VAR 0 4
25548: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25549: LD_ADDR_OWVAR 41
25553: PUSH
25554: LD_VAR 0 5
25558: ST_TO_ADDR
// end ;
25559: LD_VAR 0 6
25563: RET
// export function WantPlant ( unit ) ; var task ; begin
25564: LD_INT 0
25566: PPUSH
25567: PPUSH
// result := false ;
25568: LD_ADDR_VAR 0 2
25572: PUSH
25573: LD_INT 0
25575: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25576: LD_ADDR_VAR 0 3
25580: PUSH
25581: LD_VAR 0 1
25585: PPUSH
25586: CALL_OW 437
25590: ST_TO_ADDR
// if task then
25591: LD_VAR 0 3
25595: IFFALSE 25623
// if task [ 1 ] [ 1 ] = p then
25597: LD_VAR 0 3
25601: PUSH
25602: LD_INT 1
25604: ARRAY
25605: PUSH
25606: LD_INT 1
25608: ARRAY
25609: PUSH
25610: LD_STRING p
25612: EQUAL
25613: IFFALSE 25623
// result := true ;
25615: LD_ADDR_VAR 0 2
25619: PUSH
25620: LD_INT 1
25622: ST_TO_ADDR
// end ;
25623: LD_VAR 0 2
25627: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25628: LD_INT 0
25630: PPUSH
25631: PPUSH
25632: PPUSH
25633: PPUSH
// if pos < 1 then
25634: LD_VAR 0 2
25638: PUSH
25639: LD_INT 1
25641: LESS
25642: IFFALSE 25646
// exit ;
25644: GO 25949
// if pos = 1 then
25646: LD_VAR 0 2
25650: PUSH
25651: LD_INT 1
25653: EQUAL
25654: IFFALSE 25687
// result := Replace ( arr , pos [ 1 ] , value ) else
25656: LD_ADDR_VAR 0 4
25660: PUSH
25661: LD_VAR 0 1
25665: PPUSH
25666: LD_VAR 0 2
25670: PUSH
25671: LD_INT 1
25673: ARRAY
25674: PPUSH
25675: LD_VAR 0 3
25679: PPUSH
25680: CALL_OW 1
25684: ST_TO_ADDR
25685: GO 25949
// begin tmp := arr ;
25687: LD_ADDR_VAR 0 6
25691: PUSH
25692: LD_VAR 0 1
25696: ST_TO_ADDR
// s_arr := [ tmp ] ;
25697: LD_ADDR_VAR 0 7
25701: PUSH
25702: LD_VAR 0 6
25706: PUSH
25707: EMPTY
25708: LIST
25709: ST_TO_ADDR
// for i = 1 to pos - 1 do
25710: LD_ADDR_VAR 0 5
25714: PUSH
25715: DOUBLE
25716: LD_INT 1
25718: DEC
25719: ST_TO_ADDR
25720: LD_VAR 0 2
25724: PUSH
25725: LD_INT 1
25727: MINUS
25728: PUSH
25729: FOR_TO
25730: IFFALSE 25775
// begin tmp := tmp [ pos [ i ] ] ;
25732: LD_ADDR_VAR 0 6
25736: PUSH
25737: LD_VAR 0 6
25741: PUSH
25742: LD_VAR 0 2
25746: PUSH
25747: LD_VAR 0 5
25751: ARRAY
25752: ARRAY
25753: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25754: LD_ADDR_VAR 0 7
25758: PUSH
25759: LD_VAR 0 7
25763: PUSH
25764: LD_VAR 0 6
25768: PUSH
25769: EMPTY
25770: LIST
25771: ADD
25772: ST_TO_ADDR
// end ;
25773: GO 25729
25775: POP
25776: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25777: LD_ADDR_VAR 0 6
25781: PUSH
25782: LD_VAR 0 6
25786: PPUSH
25787: LD_VAR 0 2
25791: PUSH
25792: LD_VAR 0 2
25796: ARRAY
25797: PPUSH
25798: LD_VAR 0 3
25802: PPUSH
25803: CALL_OW 1
25807: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25808: LD_ADDR_VAR 0 7
25812: PUSH
25813: LD_VAR 0 7
25817: PPUSH
25818: LD_VAR 0 7
25822: PPUSH
25823: LD_VAR 0 6
25827: PPUSH
25828: CALL_OW 1
25832: ST_TO_ADDR
// for i = s_arr downto 2 do
25833: LD_ADDR_VAR 0 5
25837: PUSH
25838: DOUBLE
25839: LD_VAR 0 7
25843: INC
25844: ST_TO_ADDR
25845: LD_INT 2
25847: PUSH
25848: FOR_DOWNTO
25849: IFFALSE 25933
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25851: LD_ADDR_VAR 0 6
25855: PUSH
25856: LD_VAR 0 7
25860: PUSH
25861: LD_VAR 0 5
25865: PUSH
25866: LD_INT 1
25868: MINUS
25869: ARRAY
25870: PPUSH
25871: LD_VAR 0 2
25875: PUSH
25876: LD_VAR 0 5
25880: PUSH
25881: LD_INT 1
25883: MINUS
25884: ARRAY
25885: PPUSH
25886: LD_VAR 0 7
25890: PUSH
25891: LD_VAR 0 5
25895: ARRAY
25896: PPUSH
25897: CALL_OW 1
25901: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25902: LD_ADDR_VAR 0 7
25906: PUSH
25907: LD_VAR 0 7
25911: PPUSH
25912: LD_VAR 0 5
25916: PUSH
25917: LD_INT 1
25919: MINUS
25920: PPUSH
25921: LD_VAR 0 6
25925: PPUSH
25926: CALL_OW 1
25930: ST_TO_ADDR
// end ;
25931: GO 25848
25933: POP
25934: POP
// result := s_arr [ 1 ] ;
25935: LD_ADDR_VAR 0 4
25939: PUSH
25940: LD_VAR 0 7
25944: PUSH
25945: LD_INT 1
25947: ARRAY
25948: ST_TO_ADDR
// end ; end ;
25949: LD_VAR 0 4
25953: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25954: LD_INT 0
25956: PPUSH
25957: PPUSH
// if not list then
25958: LD_VAR 0 1
25962: NOT
25963: IFFALSE 25967
// exit ;
25965: GO 26058
// i := list [ pos1 ] ;
25967: LD_ADDR_VAR 0 5
25971: PUSH
25972: LD_VAR 0 1
25976: PUSH
25977: LD_VAR 0 2
25981: ARRAY
25982: ST_TO_ADDR
// if not i then
25983: LD_VAR 0 5
25987: NOT
25988: IFFALSE 25992
// exit ;
25990: GO 26058
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25992: LD_ADDR_VAR 0 1
25996: PUSH
25997: LD_VAR 0 1
26001: PPUSH
26002: LD_VAR 0 2
26006: PPUSH
26007: LD_VAR 0 1
26011: PUSH
26012: LD_VAR 0 3
26016: ARRAY
26017: PPUSH
26018: CALL_OW 1
26022: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26023: LD_ADDR_VAR 0 1
26027: PUSH
26028: LD_VAR 0 1
26032: PPUSH
26033: LD_VAR 0 3
26037: PPUSH
26038: LD_VAR 0 5
26042: PPUSH
26043: CALL_OW 1
26047: ST_TO_ADDR
// result := list ;
26048: LD_ADDR_VAR 0 4
26052: PUSH
26053: LD_VAR 0 1
26057: ST_TO_ADDR
// end ;
26058: LD_VAR 0 4
26062: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26063: LD_INT 0
26065: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26066: LD_ADDR_VAR 0 5
26070: PUSH
26071: LD_VAR 0 1
26075: PPUSH
26076: CALL_OW 250
26080: PPUSH
26081: LD_VAR 0 1
26085: PPUSH
26086: CALL_OW 251
26090: PPUSH
26091: LD_VAR 0 2
26095: PPUSH
26096: LD_VAR 0 3
26100: PPUSH
26101: LD_VAR 0 4
26105: PPUSH
26106: CALL 26116 0 5
26110: ST_TO_ADDR
// end ;
26111: LD_VAR 0 5
26115: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26116: LD_INT 0
26118: PPUSH
26119: PPUSH
26120: PPUSH
26121: PPUSH
// if not list then
26122: LD_VAR 0 3
26126: NOT
26127: IFFALSE 26131
// exit ;
26129: GO 26519
// result := [ ] ;
26131: LD_ADDR_VAR 0 6
26135: PUSH
26136: EMPTY
26137: ST_TO_ADDR
// for i in list do
26138: LD_ADDR_VAR 0 7
26142: PUSH
26143: LD_VAR 0 3
26147: PUSH
26148: FOR_IN
26149: IFFALSE 26351
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26151: LD_ADDR_VAR 0 9
26155: PUSH
26156: LD_VAR 0 7
26160: PPUSH
26161: LD_VAR 0 1
26165: PPUSH
26166: LD_VAR 0 2
26170: PPUSH
26171: CALL_OW 297
26175: ST_TO_ADDR
// if not result then
26176: LD_VAR 0 6
26180: NOT
26181: IFFALSE 26207
// result := [ [ i , tmp ] ] else
26183: LD_ADDR_VAR 0 6
26187: PUSH
26188: LD_VAR 0 7
26192: PUSH
26193: LD_VAR 0 9
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: EMPTY
26203: LIST
26204: ST_TO_ADDR
26205: GO 26349
// begin if result [ result ] [ 2 ] < tmp then
26207: LD_VAR 0 6
26211: PUSH
26212: LD_VAR 0 6
26216: ARRAY
26217: PUSH
26218: LD_INT 2
26220: ARRAY
26221: PUSH
26222: LD_VAR 0 9
26226: LESS
26227: IFFALSE 26269
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26229: LD_ADDR_VAR 0 6
26233: PUSH
26234: LD_VAR 0 6
26238: PPUSH
26239: LD_VAR 0 6
26243: PUSH
26244: LD_INT 1
26246: PLUS
26247: PPUSH
26248: LD_VAR 0 7
26252: PUSH
26253: LD_VAR 0 9
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: PPUSH
26262: CALL_OW 2
26266: ST_TO_ADDR
26267: GO 26349
// for j = 1 to result do
26269: LD_ADDR_VAR 0 8
26273: PUSH
26274: DOUBLE
26275: LD_INT 1
26277: DEC
26278: ST_TO_ADDR
26279: LD_VAR 0 6
26283: PUSH
26284: FOR_TO
26285: IFFALSE 26347
// begin if tmp < result [ j ] [ 2 ] then
26287: LD_VAR 0 9
26291: PUSH
26292: LD_VAR 0 6
26296: PUSH
26297: LD_VAR 0 8
26301: ARRAY
26302: PUSH
26303: LD_INT 2
26305: ARRAY
26306: LESS
26307: IFFALSE 26345
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26309: LD_ADDR_VAR 0 6
26313: PUSH
26314: LD_VAR 0 6
26318: PPUSH
26319: LD_VAR 0 8
26323: PPUSH
26324: LD_VAR 0 7
26328: PUSH
26329: LD_VAR 0 9
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PPUSH
26338: CALL_OW 2
26342: ST_TO_ADDR
// break ;
26343: GO 26347
// end ; end ;
26345: GO 26284
26347: POP
26348: POP
// end ; end ;
26349: GO 26148
26351: POP
26352: POP
// if result and not asc then
26353: LD_VAR 0 6
26357: PUSH
26358: LD_VAR 0 4
26362: NOT
26363: AND
26364: IFFALSE 26439
// begin tmp := result ;
26366: LD_ADDR_VAR 0 9
26370: PUSH
26371: LD_VAR 0 6
26375: ST_TO_ADDR
// for i = tmp downto 1 do
26376: LD_ADDR_VAR 0 7
26380: PUSH
26381: DOUBLE
26382: LD_VAR 0 9
26386: INC
26387: ST_TO_ADDR
26388: LD_INT 1
26390: PUSH
26391: FOR_DOWNTO
26392: IFFALSE 26437
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26394: LD_ADDR_VAR 0 6
26398: PUSH
26399: LD_VAR 0 6
26403: PPUSH
26404: LD_VAR 0 9
26408: PUSH
26409: LD_VAR 0 7
26413: MINUS
26414: PUSH
26415: LD_INT 1
26417: PLUS
26418: PPUSH
26419: LD_VAR 0 9
26423: PUSH
26424: LD_VAR 0 7
26428: ARRAY
26429: PPUSH
26430: CALL_OW 1
26434: ST_TO_ADDR
26435: GO 26391
26437: POP
26438: POP
// end ; tmp := [ ] ;
26439: LD_ADDR_VAR 0 9
26443: PUSH
26444: EMPTY
26445: ST_TO_ADDR
// if mode then
26446: LD_VAR 0 5
26450: IFFALSE 26519
// begin for i = 1 to result do
26452: LD_ADDR_VAR 0 7
26456: PUSH
26457: DOUBLE
26458: LD_INT 1
26460: DEC
26461: ST_TO_ADDR
26462: LD_VAR 0 6
26466: PUSH
26467: FOR_TO
26468: IFFALSE 26507
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26470: LD_ADDR_VAR 0 9
26474: PUSH
26475: LD_VAR 0 9
26479: PPUSH
26480: LD_VAR 0 7
26484: PPUSH
26485: LD_VAR 0 6
26489: PUSH
26490: LD_VAR 0 7
26494: ARRAY
26495: PUSH
26496: LD_INT 1
26498: ARRAY
26499: PPUSH
26500: CALL_OW 1
26504: ST_TO_ADDR
26505: GO 26467
26507: POP
26508: POP
// result := tmp ;
26509: LD_ADDR_VAR 0 6
26513: PUSH
26514: LD_VAR 0 9
26518: ST_TO_ADDR
// end ; end ;
26519: LD_VAR 0 6
26523: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26524: LD_INT 0
26526: PPUSH
26527: PPUSH
26528: PPUSH
26529: PPUSH
26530: PPUSH
26531: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26532: LD_ADDR_VAR 0 5
26536: PUSH
26537: LD_INT 0
26539: PUSH
26540: LD_INT 0
26542: PUSH
26543: LD_INT 0
26545: PUSH
26546: EMPTY
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: ST_TO_ADDR
// if not x or not y then
26554: LD_VAR 0 2
26558: NOT
26559: PUSH
26560: LD_VAR 0 3
26564: NOT
26565: OR
26566: IFFALSE 26570
// exit ;
26568: GO 28216
// if not range then
26570: LD_VAR 0 4
26574: NOT
26575: IFFALSE 26585
// range := 10 ;
26577: LD_ADDR_VAR 0 4
26581: PUSH
26582: LD_INT 10
26584: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26585: LD_ADDR_VAR 0 8
26589: PUSH
26590: LD_INT 81
26592: PUSH
26593: LD_VAR 0 1
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 92
26604: PUSH
26605: LD_VAR 0 2
26609: PUSH
26610: LD_VAR 0 3
26614: PUSH
26615: LD_VAR 0 4
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 3
26628: PUSH
26629: LD_INT 21
26631: PUSH
26632: LD_INT 3
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: LIST
26647: PPUSH
26648: CALL_OW 69
26652: ST_TO_ADDR
// if not tmp then
26653: LD_VAR 0 8
26657: NOT
26658: IFFALSE 26662
// exit ;
26660: GO 28216
// for i in tmp do
26662: LD_ADDR_VAR 0 6
26666: PUSH
26667: LD_VAR 0 8
26671: PUSH
26672: FOR_IN
26673: IFFALSE 28191
// begin points := [ 0 , 0 , 0 ] ;
26675: LD_ADDR_VAR 0 9
26679: PUSH
26680: LD_INT 0
26682: PUSH
26683: LD_INT 0
26685: PUSH
26686: LD_INT 0
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: LIST
26693: ST_TO_ADDR
// bpoints := 1 ;
26694: LD_ADDR_VAR 0 10
26698: PUSH
26699: LD_INT 1
26701: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26702: LD_VAR 0 6
26706: PPUSH
26707: CALL_OW 247
26711: PUSH
26712: LD_INT 1
26714: DOUBLE
26715: EQUAL
26716: IFTRUE 26720
26718: GO 27298
26720: POP
// begin if GetClass ( i ) = 1 then
26721: LD_VAR 0 6
26725: PPUSH
26726: CALL_OW 257
26730: PUSH
26731: LD_INT 1
26733: EQUAL
26734: IFFALSE 26755
// points := [ 10 , 5 , 3 ] ;
26736: LD_ADDR_VAR 0 9
26740: PUSH
26741: LD_INT 10
26743: PUSH
26744: LD_INT 5
26746: PUSH
26747: LD_INT 3
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: LIST
26754: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26755: LD_VAR 0 6
26759: PPUSH
26760: CALL_OW 257
26764: PUSH
26765: LD_INT 2
26767: PUSH
26768: LD_INT 3
26770: PUSH
26771: LD_INT 4
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: LIST
26778: IN
26779: IFFALSE 26800
// points := [ 3 , 2 , 1 ] ;
26781: LD_ADDR_VAR 0 9
26785: PUSH
26786: LD_INT 3
26788: PUSH
26789: LD_INT 2
26791: PUSH
26792: LD_INT 1
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: LIST
26799: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26800: LD_VAR 0 6
26804: PPUSH
26805: CALL_OW 257
26809: PUSH
26810: LD_INT 5
26812: EQUAL
26813: IFFALSE 26834
// points := [ 130 , 5 , 2 ] ;
26815: LD_ADDR_VAR 0 9
26819: PUSH
26820: LD_INT 130
26822: PUSH
26823: LD_INT 5
26825: PUSH
26826: LD_INT 2
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: LIST
26833: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26834: LD_VAR 0 6
26838: PPUSH
26839: CALL_OW 257
26843: PUSH
26844: LD_INT 8
26846: EQUAL
26847: IFFALSE 26868
// points := [ 35 , 35 , 30 ] ;
26849: LD_ADDR_VAR 0 9
26853: PUSH
26854: LD_INT 35
26856: PUSH
26857: LD_INT 35
26859: PUSH
26860: LD_INT 30
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: LIST
26867: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26868: LD_VAR 0 6
26872: PPUSH
26873: CALL_OW 257
26877: PUSH
26878: LD_INT 9
26880: EQUAL
26881: IFFALSE 26902
// points := [ 20 , 55 , 40 ] ;
26883: LD_ADDR_VAR 0 9
26887: PUSH
26888: LD_INT 20
26890: PUSH
26891: LD_INT 55
26893: PUSH
26894: LD_INT 40
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: LIST
26901: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26902: LD_VAR 0 6
26906: PPUSH
26907: CALL_OW 257
26911: PUSH
26912: LD_INT 12
26914: PUSH
26915: LD_INT 16
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: IN
26922: IFFALSE 26943
// points := [ 5 , 3 , 2 ] ;
26924: LD_ADDR_VAR 0 9
26928: PUSH
26929: LD_INT 5
26931: PUSH
26932: LD_INT 3
26934: PUSH
26935: LD_INT 2
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: LIST
26942: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26943: LD_VAR 0 6
26947: PPUSH
26948: CALL_OW 257
26952: PUSH
26953: LD_INT 17
26955: EQUAL
26956: IFFALSE 26977
// points := [ 100 , 50 , 75 ] ;
26958: LD_ADDR_VAR 0 9
26962: PUSH
26963: LD_INT 100
26965: PUSH
26966: LD_INT 50
26968: PUSH
26969: LD_INT 75
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: LIST
26976: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26977: LD_VAR 0 6
26981: PPUSH
26982: CALL_OW 257
26986: PUSH
26987: LD_INT 15
26989: EQUAL
26990: IFFALSE 27011
// points := [ 10 , 5 , 3 ] ;
26992: LD_ADDR_VAR 0 9
26996: PUSH
26997: LD_INT 10
26999: PUSH
27000: LD_INT 5
27002: PUSH
27003: LD_INT 3
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: LIST
27010: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27011: LD_VAR 0 6
27015: PPUSH
27016: CALL_OW 257
27020: PUSH
27021: LD_INT 14
27023: EQUAL
27024: IFFALSE 27045
// points := [ 10 , 0 , 0 ] ;
27026: LD_ADDR_VAR 0 9
27030: PUSH
27031: LD_INT 10
27033: PUSH
27034: LD_INT 0
27036: PUSH
27037: LD_INT 0
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: LIST
27044: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27045: LD_VAR 0 6
27049: PPUSH
27050: CALL_OW 257
27054: PUSH
27055: LD_INT 11
27057: EQUAL
27058: IFFALSE 27079
// points := [ 30 , 10 , 5 ] ;
27060: LD_ADDR_VAR 0 9
27064: PUSH
27065: LD_INT 30
27067: PUSH
27068: LD_INT 10
27070: PUSH
27071: LD_INT 5
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: LIST
27078: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27079: LD_VAR 0 1
27083: PPUSH
27084: LD_INT 5
27086: PPUSH
27087: CALL_OW 321
27091: PUSH
27092: LD_INT 2
27094: EQUAL
27095: IFFALSE 27112
// bpoints := bpoints * 1.8 ;
27097: LD_ADDR_VAR 0 10
27101: PUSH
27102: LD_VAR 0 10
27106: PUSH
27107: LD_REAL  1.80000000000000E+0000
27110: MUL
27111: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27112: LD_VAR 0 6
27116: PPUSH
27117: CALL_OW 257
27121: PUSH
27122: LD_INT 1
27124: PUSH
27125: LD_INT 2
27127: PUSH
27128: LD_INT 3
27130: PUSH
27131: LD_INT 4
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: IN
27140: PUSH
27141: LD_VAR 0 1
27145: PPUSH
27146: LD_INT 51
27148: PPUSH
27149: CALL_OW 321
27153: PUSH
27154: LD_INT 2
27156: EQUAL
27157: AND
27158: IFFALSE 27175
// bpoints := bpoints * 1.2 ;
27160: LD_ADDR_VAR 0 10
27164: PUSH
27165: LD_VAR 0 10
27169: PUSH
27170: LD_REAL  1.20000000000000E+0000
27173: MUL
27174: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27175: LD_VAR 0 6
27179: PPUSH
27180: CALL_OW 257
27184: PUSH
27185: LD_INT 5
27187: PUSH
27188: LD_INT 7
27190: PUSH
27191: LD_INT 9
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: LIST
27198: IN
27199: PUSH
27200: LD_VAR 0 1
27204: PPUSH
27205: LD_INT 52
27207: PPUSH
27208: CALL_OW 321
27212: PUSH
27213: LD_INT 2
27215: EQUAL
27216: AND
27217: IFFALSE 27234
// bpoints := bpoints * 1.5 ;
27219: LD_ADDR_VAR 0 10
27223: PUSH
27224: LD_VAR 0 10
27228: PUSH
27229: LD_REAL  1.50000000000000E+0000
27232: MUL
27233: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27234: LD_VAR 0 1
27238: PPUSH
27239: LD_INT 66
27241: PPUSH
27242: CALL_OW 321
27246: PUSH
27247: LD_INT 2
27249: EQUAL
27250: IFFALSE 27267
// bpoints := bpoints * 1.1 ;
27252: LD_ADDR_VAR 0 10
27256: PUSH
27257: LD_VAR 0 10
27261: PUSH
27262: LD_REAL  1.10000000000000E+0000
27265: MUL
27266: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27267: LD_ADDR_VAR 0 10
27271: PUSH
27272: LD_VAR 0 10
27276: PUSH
27277: LD_VAR 0 6
27281: PPUSH
27282: LD_INT 1
27284: PPUSH
27285: CALL_OW 259
27289: PUSH
27290: LD_REAL  1.15000000000000E+0000
27293: MUL
27294: MUL
27295: ST_TO_ADDR
// end ; unit_vehicle :
27296: GO 28120
27298: LD_INT 2
27300: DOUBLE
27301: EQUAL
27302: IFTRUE 27306
27304: GO 28108
27306: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27307: LD_VAR 0 6
27311: PPUSH
27312: CALL_OW 264
27316: PUSH
27317: LD_INT 2
27319: PUSH
27320: LD_INT 42
27322: PUSH
27323: LD_INT 24
27325: PUSH
27326: EMPTY
27327: LIST
27328: LIST
27329: LIST
27330: IN
27331: IFFALSE 27352
// points := [ 25 , 5 , 3 ] ;
27333: LD_ADDR_VAR 0 9
27337: PUSH
27338: LD_INT 25
27340: PUSH
27341: LD_INT 5
27343: PUSH
27344: LD_INT 3
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: LIST
27351: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27352: LD_VAR 0 6
27356: PPUSH
27357: CALL_OW 264
27361: PUSH
27362: LD_INT 4
27364: PUSH
27365: LD_INT 43
27367: PUSH
27368: LD_INT 25
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: LIST
27375: IN
27376: IFFALSE 27397
// points := [ 40 , 15 , 5 ] ;
27378: LD_ADDR_VAR 0 9
27382: PUSH
27383: LD_INT 40
27385: PUSH
27386: LD_INT 15
27388: PUSH
27389: LD_INT 5
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: LIST
27396: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27397: LD_VAR 0 6
27401: PPUSH
27402: CALL_OW 264
27406: PUSH
27407: LD_INT 3
27409: PUSH
27410: LD_INT 23
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: IN
27417: IFFALSE 27438
// points := [ 7 , 25 , 8 ] ;
27419: LD_ADDR_VAR 0 9
27423: PUSH
27424: LD_INT 7
27426: PUSH
27427: LD_INT 25
27429: PUSH
27430: LD_INT 8
27432: PUSH
27433: EMPTY
27434: LIST
27435: LIST
27436: LIST
27437: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27438: LD_VAR 0 6
27442: PPUSH
27443: CALL_OW 264
27447: PUSH
27448: LD_INT 5
27450: PUSH
27451: LD_INT 27
27453: PUSH
27454: LD_INT 44
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: LIST
27461: IN
27462: IFFALSE 27483
// points := [ 14 , 50 , 16 ] ;
27464: LD_ADDR_VAR 0 9
27468: PUSH
27469: LD_INT 14
27471: PUSH
27472: LD_INT 50
27474: PUSH
27475: LD_INT 16
27477: PUSH
27478: EMPTY
27479: LIST
27480: LIST
27481: LIST
27482: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27483: LD_VAR 0 6
27487: PPUSH
27488: CALL_OW 264
27492: PUSH
27493: LD_INT 6
27495: PUSH
27496: LD_INT 46
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: IN
27503: IFFALSE 27524
// points := [ 32 , 120 , 70 ] ;
27505: LD_ADDR_VAR 0 9
27509: PUSH
27510: LD_INT 32
27512: PUSH
27513: LD_INT 120
27515: PUSH
27516: LD_INT 70
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: LIST
27523: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27524: LD_VAR 0 6
27528: PPUSH
27529: CALL_OW 264
27533: PUSH
27534: LD_INT 7
27536: PUSH
27537: LD_INT 28
27539: PUSH
27540: LD_INT 45
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: LIST
27547: IN
27548: IFFALSE 27569
// points := [ 35 , 20 , 45 ] ;
27550: LD_ADDR_VAR 0 9
27554: PUSH
27555: LD_INT 35
27557: PUSH
27558: LD_INT 20
27560: PUSH
27561: LD_INT 45
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: LIST
27568: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27569: LD_VAR 0 6
27573: PPUSH
27574: CALL_OW 264
27578: PUSH
27579: LD_INT 47
27581: PUSH
27582: EMPTY
27583: LIST
27584: IN
27585: IFFALSE 27606
// points := [ 67 , 45 , 75 ] ;
27587: LD_ADDR_VAR 0 9
27591: PUSH
27592: LD_INT 67
27594: PUSH
27595: LD_INT 45
27597: PUSH
27598: LD_INT 75
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: LIST
27605: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27606: LD_VAR 0 6
27610: PPUSH
27611: CALL_OW 264
27615: PUSH
27616: LD_INT 26
27618: PUSH
27619: EMPTY
27620: LIST
27621: IN
27622: IFFALSE 27643
// points := [ 120 , 30 , 80 ] ;
27624: LD_ADDR_VAR 0 9
27628: PUSH
27629: LD_INT 120
27631: PUSH
27632: LD_INT 30
27634: PUSH
27635: LD_INT 80
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: LIST
27642: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27643: LD_VAR 0 6
27647: PPUSH
27648: CALL_OW 264
27652: PUSH
27653: LD_INT 22
27655: PUSH
27656: EMPTY
27657: LIST
27658: IN
27659: IFFALSE 27680
// points := [ 40 , 1 , 1 ] ;
27661: LD_ADDR_VAR 0 9
27665: PUSH
27666: LD_INT 40
27668: PUSH
27669: LD_INT 1
27671: PUSH
27672: LD_INT 1
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: LIST
27679: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27680: LD_VAR 0 6
27684: PPUSH
27685: CALL_OW 264
27689: PUSH
27690: LD_INT 29
27692: PUSH
27693: EMPTY
27694: LIST
27695: IN
27696: IFFALSE 27717
// points := [ 70 , 200 , 400 ] ;
27698: LD_ADDR_VAR 0 9
27702: PUSH
27703: LD_INT 70
27705: PUSH
27706: LD_INT 200
27708: PUSH
27709: LD_INT 400
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: LIST
27716: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27717: LD_VAR 0 6
27721: PPUSH
27722: CALL_OW 264
27726: PUSH
27727: LD_INT 14
27729: PUSH
27730: LD_INT 53
27732: PUSH
27733: EMPTY
27734: LIST
27735: LIST
27736: IN
27737: IFFALSE 27758
// points := [ 40 , 10 , 20 ] ;
27739: LD_ADDR_VAR 0 9
27743: PUSH
27744: LD_INT 40
27746: PUSH
27747: LD_INT 10
27749: PUSH
27750: LD_INT 20
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: LIST
27757: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27758: LD_VAR 0 6
27762: PPUSH
27763: CALL_OW 264
27767: PUSH
27768: LD_INT 9
27770: PUSH
27771: EMPTY
27772: LIST
27773: IN
27774: IFFALSE 27795
// points := [ 5 , 70 , 20 ] ;
27776: LD_ADDR_VAR 0 9
27780: PUSH
27781: LD_INT 5
27783: PUSH
27784: LD_INT 70
27786: PUSH
27787: LD_INT 20
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: LIST
27794: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27795: LD_VAR 0 6
27799: PPUSH
27800: CALL_OW 264
27804: PUSH
27805: LD_INT 10
27807: PUSH
27808: EMPTY
27809: LIST
27810: IN
27811: IFFALSE 27832
// points := [ 35 , 110 , 70 ] ;
27813: LD_ADDR_VAR 0 9
27817: PUSH
27818: LD_INT 35
27820: PUSH
27821: LD_INT 110
27823: PUSH
27824: LD_INT 70
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: LIST
27831: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27832: LD_VAR 0 6
27836: PPUSH
27837: CALL_OW 265
27841: PUSH
27842: LD_INT 25
27844: EQUAL
27845: IFFALSE 27866
// points := [ 80 , 65 , 100 ] ;
27847: LD_ADDR_VAR 0 9
27851: PUSH
27852: LD_INT 80
27854: PUSH
27855: LD_INT 65
27857: PUSH
27858: LD_INT 100
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: LIST
27865: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27866: LD_VAR 0 6
27870: PPUSH
27871: CALL_OW 263
27875: PUSH
27876: LD_INT 1
27878: EQUAL
27879: IFFALSE 27914
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27881: LD_ADDR_VAR 0 10
27885: PUSH
27886: LD_VAR 0 10
27890: PUSH
27891: LD_VAR 0 6
27895: PPUSH
27896: CALL_OW 311
27900: PPUSH
27901: LD_INT 3
27903: PPUSH
27904: CALL_OW 259
27908: PUSH
27909: LD_INT 4
27911: MUL
27912: MUL
27913: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27914: LD_VAR 0 6
27918: PPUSH
27919: CALL_OW 263
27923: PUSH
27924: LD_INT 2
27926: EQUAL
27927: IFFALSE 27978
// begin j := IsControledBy ( i ) ;
27929: LD_ADDR_VAR 0 7
27933: PUSH
27934: LD_VAR 0 6
27938: PPUSH
27939: CALL_OW 312
27943: ST_TO_ADDR
// if j then
27944: LD_VAR 0 7
27948: IFFALSE 27978
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27950: LD_ADDR_VAR 0 10
27954: PUSH
27955: LD_VAR 0 10
27959: PUSH
27960: LD_VAR 0 7
27964: PPUSH
27965: LD_INT 3
27967: PPUSH
27968: CALL_OW 259
27972: PUSH
27973: LD_INT 3
27975: MUL
27976: MUL
27977: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27978: LD_VAR 0 6
27982: PPUSH
27983: CALL_OW 264
27987: PUSH
27988: LD_INT 5
27990: PUSH
27991: LD_INT 6
27993: PUSH
27994: LD_INT 46
27996: PUSH
27997: LD_INT 44
27999: PUSH
28000: LD_INT 47
28002: PUSH
28003: LD_INT 45
28005: PUSH
28006: LD_INT 28
28008: PUSH
28009: LD_INT 7
28011: PUSH
28012: LD_INT 27
28014: PUSH
28015: LD_INT 29
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: LIST
28024: LIST
28025: LIST
28026: LIST
28027: LIST
28028: LIST
28029: IN
28030: PUSH
28031: LD_VAR 0 1
28035: PPUSH
28036: LD_INT 52
28038: PPUSH
28039: CALL_OW 321
28043: PUSH
28044: LD_INT 2
28046: EQUAL
28047: AND
28048: IFFALSE 28065
// bpoints := bpoints * 1.2 ;
28050: LD_ADDR_VAR 0 10
28054: PUSH
28055: LD_VAR 0 10
28059: PUSH
28060: LD_REAL  1.20000000000000E+0000
28063: MUL
28064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28065: LD_VAR 0 6
28069: PPUSH
28070: CALL_OW 264
28074: PUSH
28075: LD_INT 6
28077: PUSH
28078: LD_INT 46
28080: PUSH
28081: LD_INT 47
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: LIST
28088: IN
28089: IFFALSE 28106
// bpoints := bpoints * 1.2 ;
28091: LD_ADDR_VAR 0 10
28095: PUSH
28096: LD_VAR 0 10
28100: PUSH
28101: LD_REAL  1.20000000000000E+0000
28104: MUL
28105: ST_TO_ADDR
// end ; unit_building :
28106: GO 28120
28108: LD_INT 3
28110: DOUBLE
28111: EQUAL
28112: IFTRUE 28116
28114: GO 28119
28116: POP
// ; end ;
28117: GO 28120
28119: POP
// for j = 1 to 3 do
28120: LD_ADDR_VAR 0 7
28124: PUSH
28125: DOUBLE
28126: LD_INT 1
28128: DEC
28129: ST_TO_ADDR
28130: LD_INT 3
28132: PUSH
28133: FOR_TO
28134: IFFALSE 28187
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28136: LD_ADDR_VAR 0 5
28140: PUSH
28141: LD_VAR 0 5
28145: PPUSH
28146: LD_VAR 0 7
28150: PPUSH
28151: LD_VAR 0 5
28155: PUSH
28156: LD_VAR 0 7
28160: ARRAY
28161: PUSH
28162: LD_VAR 0 9
28166: PUSH
28167: LD_VAR 0 7
28171: ARRAY
28172: PUSH
28173: LD_VAR 0 10
28177: MUL
28178: PLUS
28179: PPUSH
28180: CALL_OW 1
28184: ST_TO_ADDR
28185: GO 28133
28187: POP
28188: POP
// end ;
28189: GO 26672
28191: POP
28192: POP
// result := Replace ( result , 4 , tmp ) ;
28193: LD_ADDR_VAR 0 5
28197: PUSH
28198: LD_VAR 0 5
28202: PPUSH
28203: LD_INT 4
28205: PPUSH
28206: LD_VAR 0 8
28210: PPUSH
28211: CALL_OW 1
28215: ST_TO_ADDR
// end ;
28216: LD_VAR 0 5
28220: RET
// export function DangerAtRange ( unit , range ) ; begin
28221: LD_INT 0
28223: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28224: LD_ADDR_VAR 0 3
28228: PUSH
28229: LD_VAR 0 1
28233: PPUSH
28234: CALL_OW 255
28238: PPUSH
28239: LD_VAR 0 1
28243: PPUSH
28244: CALL_OW 250
28248: PPUSH
28249: LD_VAR 0 1
28253: PPUSH
28254: CALL_OW 251
28258: PPUSH
28259: LD_VAR 0 2
28263: PPUSH
28264: CALL 26524 0 4
28268: ST_TO_ADDR
// end ;
28269: LD_VAR 0 3
28273: RET
// export function DangerInArea ( side , area ) ; begin
28274: LD_INT 0
28276: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28277: LD_ADDR_VAR 0 3
28281: PUSH
28282: LD_VAR 0 2
28286: PPUSH
28287: LD_INT 81
28289: PUSH
28290: LD_VAR 0 1
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PPUSH
28299: CALL_OW 70
28303: ST_TO_ADDR
// end ;
28304: LD_VAR 0 3
28308: RET
// export function IsExtension ( b ) ; begin
28309: LD_INT 0
28311: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28312: LD_ADDR_VAR 0 2
28316: PUSH
28317: LD_VAR 0 1
28321: PUSH
28322: LD_INT 23
28324: PUSH
28325: LD_INT 20
28327: PUSH
28328: LD_INT 22
28330: PUSH
28331: LD_INT 17
28333: PUSH
28334: LD_INT 24
28336: PUSH
28337: LD_INT 21
28339: PUSH
28340: LD_INT 19
28342: PUSH
28343: LD_INT 16
28345: PUSH
28346: LD_INT 25
28348: PUSH
28349: LD_INT 18
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: LIST
28361: LIST
28362: LIST
28363: IN
28364: ST_TO_ADDR
// end ;
28365: LD_VAR 0 2
28369: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
28370: LD_INT 0
28372: PPUSH
28373: PPUSH
28374: PPUSH
// result := [ ] ;
28375: LD_ADDR_VAR 0 3
28379: PUSH
28380: EMPTY
28381: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28382: LD_ADDR_VAR 0 4
28386: PUSH
28387: LD_VAR 0 2
28391: PPUSH
28392: LD_INT 21
28394: PUSH
28395: LD_INT 3
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PPUSH
28402: CALL_OW 70
28406: ST_TO_ADDR
// if not tmp then
28407: LD_VAR 0 4
28411: NOT
28412: IFFALSE 28416
// exit ;
28414: GO 28474
// for i in tmp do
28416: LD_ADDR_VAR 0 5
28420: PUSH
28421: LD_VAR 0 4
28425: PUSH
28426: FOR_IN
28427: IFFALSE 28462
// if GetBase ( i ) <> base then
28429: LD_VAR 0 5
28433: PPUSH
28434: CALL_OW 274
28438: PUSH
28439: LD_VAR 0 1
28443: NONEQUAL
28444: IFFALSE 28460
// ComLinkToBase ( base , i ) ;
28446: LD_VAR 0 1
28450: PPUSH
28451: LD_VAR 0 5
28455: PPUSH
28456: CALL_OW 169
28460: GO 28426
28462: POP
28463: POP
// result := tmp ;
28464: LD_ADDR_VAR 0 3
28468: PUSH
28469: LD_VAR 0 4
28473: ST_TO_ADDR
// end ;
28474: LD_VAR 0 3
28478: RET
// export function ComComplete ( unit , b ) ; var i ; begin
28479: LD_INT 0
28481: PPUSH
28482: PPUSH
// if BuildingStatus ( b ) = bs_build then
28483: LD_VAR 0 2
28487: PPUSH
28488: CALL_OW 461
28492: PUSH
28493: LD_INT 1
28495: EQUAL
28496: IFFALSE 28556
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28498: LD_VAR 0 1
28502: PPUSH
28503: LD_STRING h
28505: PUSH
28506: LD_VAR 0 2
28510: PPUSH
28511: CALL_OW 250
28515: PUSH
28516: LD_VAR 0 2
28520: PPUSH
28521: CALL_OW 251
28525: PUSH
28526: LD_VAR 0 2
28530: PUSH
28531: LD_INT 0
28533: PUSH
28534: LD_INT 0
28536: PUSH
28537: LD_INT 0
28539: PUSH
28540: EMPTY
28541: LIST
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: LIST
28547: LIST
28548: PUSH
28549: EMPTY
28550: LIST
28551: PPUSH
28552: CALL_OW 446
// end ;
28556: LD_VAR 0 3
28560: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28561: LD_INT 0
28563: PPUSH
28564: PPUSH
28565: PPUSH
28566: PPUSH
28567: PPUSH
28568: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28569: LD_VAR 0 1
28573: NOT
28574: PUSH
28575: LD_VAR 0 1
28579: PPUSH
28580: CALL_OW 263
28584: PUSH
28585: LD_INT 2
28587: EQUAL
28588: NOT
28589: OR
28590: IFFALSE 28594
// exit ;
28592: GO 28910
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28594: LD_ADDR_VAR 0 6
28598: PUSH
28599: LD_INT 22
28601: PUSH
28602: LD_VAR 0 1
28606: PPUSH
28607: CALL_OW 255
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: LD_INT 2
28618: PUSH
28619: LD_INT 30
28621: PUSH
28622: LD_INT 36
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 34
28631: PUSH
28632: LD_INT 31
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: LIST
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PPUSH
28648: CALL_OW 69
28652: ST_TO_ADDR
// if not tmp then
28653: LD_VAR 0 6
28657: NOT
28658: IFFALSE 28662
// exit ;
28660: GO 28910
// result := [ ] ;
28662: LD_ADDR_VAR 0 2
28666: PUSH
28667: EMPTY
28668: ST_TO_ADDR
// for i in tmp do
28669: LD_ADDR_VAR 0 3
28673: PUSH
28674: LD_VAR 0 6
28678: PUSH
28679: FOR_IN
28680: IFFALSE 28751
// begin t := UnitsInside ( i ) ;
28682: LD_ADDR_VAR 0 4
28686: PUSH
28687: LD_VAR 0 3
28691: PPUSH
28692: CALL_OW 313
28696: ST_TO_ADDR
// if t then
28697: LD_VAR 0 4
28701: IFFALSE 28749
// for j in t do
28703: LD_ADDR_VAR 0 7
28707: PUSH
28708: LD_VAR 0 4
28712: PUSH
28713: FOR_IN
28714: IFFALSE 28747
// result := Insert ( result , result + 1 , j ) ;
28716: LD_ADDR_VAR 0 2
28720: PUSH
28721: LD_VAR 0 2
28725: PPUSH
28726: LD_VAR 0 2
28730: PUSH
28731: LD_INT 1
28733: PLUS
28734: PPUSH
28735: LD_VAR 0 7
28739: PPUSH
28740: CALL_OW 2
28744: ST_TO_ADDR
28745: GO 28713
28747: POP
28748: POP
// end ;
28749: GO 28679
28751: POP
28752: POP
// if not result then
28753: LD_VAR 0 2
28757: NOT
28758: IFFALSE 28762
// exit ;
28760: GO 28910
// mech := result [ 1 ] ;
28762: LD_ADDR_VAR 0 5
28766: PUSH
28767: LD_VAR 0 2
28771: PUSH
28772: LD_INT 1
28774: ARRAY
28775: ST_TO_ADDR
// if result > 1 then
28776: LD_VAR 0 2
28780: PUSH
28781: LD_INT 1
28783: GREATER
28784: IFFALSE 28896
// for i = 2 to result do
28786: LD_ADDR_VAR 0 3
28790: PUSH
28791: DOUBLE
28792: LD_INT 2
28794: DEC
28795: ST_TO_ADDR
28796: LD_VAR 0 2
28800: PUSH
28801: FOR_TO
28802: IFFALSE 28894
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28804: LD_ADDR_VAR 0 4
28808: PUSH
28809: LD_VAR 0 2
28813: PUSH
28814: LD_VAR 0 3
28818: ARRAY
28819: PPUSH
28820: LD_INT 3
28822: PPUSH
28823: CALL_OW 259
28827: PUSH
28828: LD_VAR 0 2
28832: PUSH
28833: LD_VAR 0 3
28837: ARRAY
28838: PPUSH
28839: CALL_OW 432
28843: MINUS
28844: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28845: LD_VAR 0 4
28849: PUSH
28850: LD_VAR 0 5
28854: PPUSH
28855: LD_INT 3
28857: PPUSH
28858: CALL_OW 259
28862: PUSH
28863: LD_VAR 0 5
28867: PPUSH
28868: CALL_OW 432
28872: MINUS
28873: GREATEREQUAL
28874: IFFALSE 28892
// mech := result [ i ] ;
28876: LD_ADDR_VAR 0 5
28880: PUSH
28881: LD_VAR 0 2
28885: PUSH
28886: LD_VAR 0 3
28890: ARRAY
28891: ST_TO_ADDR
// end ;
28892: GO 28801
28894: POP
28895: POP
// ComLinkTo ( vehicle , mech ) ;
28896: LD_VAR 0 1
28900: PPUSH
28901: LD_VAR 0 5
28905: PPUSH
28906: CALL_OW 135
// end ;
28910: LD_VAR 0 2
28914: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28915: LD_INT 0
28917: PPUSH
28918: PPUSH
28919: PPUSH
28920: PPUSH
28921: PPUSH
28922: PPUSH
28923: PPUSH
28924: PPUSH
28925: PPUSH
28926: PPUSH
28927: PPUSH
28928: PPUSH
28929: PPUSH
// result := [ ] ;
28930: LD_ADDR_VAR 0 7
28934: PUSH
28935: EMPTY
28936: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28937: LD_VAR 0 1
28941: PPUSH
28942: CALL_OW 266
28946: PUSH
28947: LD_INT 0
28949: PUSH
28950: LD_INT 1
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: IN
28957: NOT
28958: IFFALSE 28962
// exit ;
28960: GO 30593
// if name then
28962: LD_VAR 0 3
28966: IFFALSE 28982
// SetBName ( base_dep , name ) ;
28968: LD_VAR 0 1
28972: PPUSH
28973: LD_VAR 0 3
28977: PPUSH
28978: CALL_OW 500
// base := GetBase ( base_dep ) ;
28982: LD_ADDR_VAR 0 15
28986: PUSH
28987: LD_VAR 0 1
28991: PPUSH
28992: CALL_OW 274
28996: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28997: LD_ADDR_VAR 0 16
29001: PUSH
29002: LD_VAR 0 1
29006: PPUSH
29007: CALL_OW 255
29011: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29012: LD_ADDR_VAR 0 17
29016: PUSH
29017: LD_VAR 0 1
29021: PPUSH
29022: CALL_OW 248
29026: ST_TO_ADDR
// if sources then
29027: LD_VAR 0 5
29031: IFFALSE 29078
// for i = 1 to 3 do
29033: LD_ADDR_VAR 0 8
29037: PUSH
29038: DOUBLE
29039: LD_INT 1
29041: DEC
29042: ST_TO_ADDR
29043: LD_INT 3
29045: PUSH
29046: FOR_TO
29047: IFFALSE 29076
// AddResourceType ( base , i , sources [ i ] ) ;
29049: LD_VAR 0 15
29053: PPUSH
29054: LD_VAR 0 8
29058: PPUSH
29059: LD_VAR 0 5
29063: PUSH
29064: LD_VAR 0 8
29068: ARRAY
29069: PPUSH
29070: CALL_OW 276
29074: GO 29046
29076: POP
29077: POP
// buildings := GetBaseBuildings ( base , area ) ;
29078: LD_ADDR_VAR 0 18
29082: PUSH
29083: LD_VAR 0 15
29087: PPUSH
29088: LD_VAR 0 2
29092: PPUSH
29093: CALL 28370 0 2
29097: ST_TO_ADDR
// InitHc ;
29098: CALL_OW 19
// InitUc ;
29102: CALL_OW 18
// uc_side := side ;
29106: LD_ADDR_OWVAR 20
29110: PUSH
29111: LD_VAR 0 16
29115: ST_TO_ADDR
// uc_nation := nation ;
29116: LD_ADDR_OWVAR 21
29120: PUSH
29121: LD_VAR 0 17
29125: ST_TO_ADDR
// if buildings then
29126: LD_VAR 0 18
29130: IFFALSE 30452
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29132: LD_ADDR_VAR 0 19
29136: PUSH
29137: LD_VAR 0 18
29141: PPUSH
29142: LD_INT 2
29144: PUSH
29145: LD_INT 30
29147: PUSH
29148: LD_INT 29
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: PUSH
29155: LD_INT 30
29157: PUSH
29158: LD_INT 30
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: EMPTY
29166: LIST
29167: LIST
29168: LIST
29169: PPUSH
29170: CALL_OW 72
29174: ST_TO_ADDR
// if tmp then
29175: LD_VAR 0 19
29179: IFFALSE 29227
// for i in tmp do
29181: LD_ADDR_VAR 0 8
29185: PUSH
29186: LD_VAR 0 19
29190: PUSH
29191: FOR_IN
29192: IFFALSE 29225
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29194: LD_VAR 0 8
29198: PPUSH
29199: CALL_OW 250
29203: PPUSH
29204: LD_VAR 0 8
29208: PPUSH
29209: CALL_OW 251
29213: PPUSH
29214: LD_VAR 0 16
29218: PPUSH
29219: CALL_OW 441
29223: GO 29191
29225: POP
29226: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29227: LD_VAR 0 18
29231: PPUSH
29232: LD_INT 2
29234: PUSH
29235: LD_INT 30
29237: PUSH
29238: LD_INT 32
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: PUSH
29245: LD_INT 30
29247: PUSH
29248: LD_INT 33
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: LIST
29259: PPUSH
29260: CALL_OW 72
29264: IFFALSE 29352
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29266: LD_ADDR_VAR 0 8
29270: PUSH
29271: LD_VAR 0 18
29275: PPUSH
29276: LD_INT 2
29278: PUSH
29279: LD_INT 30
29281: PUSH
29282: LD_INT 32
29284: PUSH
29285: EMPTY
29286: LIST
29287: LIST
29288: PUSH
29289: LD_INT 30
29291: PUSH
29292: LD_INT 33
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: LIST
29303: PPUSH
29304: CALL_OW 72
29308: PUSH
29309: FOR_IN
29310: IFFALSE 29350
// begin if not GetBWeapon ( i ) then
29312: LD_VAR 0 8
29316: PPUSH
29317: CALL_OW 269
29321: NOT
29322: IFFALSE 29348
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29324: LD_VAR 0 8
29328: PPUSH
29329: LD_VAR 0 8
29333: PPUSH
29334: LD_VAR 0 2
29338: PPUSH
29339: CALL 30598 0 2
29343: PPUSH
29344: CALL_OW 431
// end ;
29348: GO 29309
29350: POP
29351: POP
// end ; for i = 1 to personel do
29352: LD_ADDR_VAR 0 8
29356: PUSH
29357: DOUBLE
29358: LD_INT 1
29360: DEC
29361: ST_TO_ADDR
29362: LD_VAR 0 6
29366: PUSH
29367: FOR_TO
29368: IFFALSE 30432
// begin if i > 4 then
29370: LD_VAR 0 8
29374: PUSH
29375: LD_INT 4
29377: GREATER
29378: IFFALSE 29382
// break ;
29380: GO 30432
// case i of 1 :
29382: LD_VAR 0 8
29386: PUSH
29387: LD_INT 1
29389: DOUBLE
29390: EQUAL
29391: IFTRUE 29395
29393: GO 29475
29395: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29396: LD_ADDR_VAR 0 12
29400: PUSH
29401: LD_VAR 0 18
29405: PPUSH
29406: LD_INT 22
29408: PUSH
29409: LD_VAR 0 16
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 58
29420: PUSH
29421: EMPTY
29422: LIST
29423: PUSH
29424: LD_INT 2
29426: PUSH
29427: LD_INT 30
29429: PUSH
29430: LD_INT 32
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 30
29439: PUSH
29440: LD_INT 4
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 30
29449: PUSH
29450: LD_INT 5
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: LIST
29467: PPUSH
29468: CALL_OW 72
29472: ST_TO_ADDR
29473: GO 29697
29475: LD_INT 2
29477: DOUBLE
29478: EQUAL
29479: IFTRUE 29483
29481: GO 29545
29483: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29484: LD_ADDR_VAR 0 12
29488: PUSH
29489: LD_VAR 0 18
29493: PPUSH
29494: LD_INT 22
29496: PUSH
29497: LD_VAR 0 16
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 2
29508: PUSH
29509: LD_INT 30
29511: PUSH
29512: LD_INT 0
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 30
29521: PUSH
29522: LD_INT 1
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: LIST
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PPUSH
29538: CALL_OW 72
29542: ST_TO_ADDR
29543: GO 29697
29545: LD_INT 3
29547: DOUBLE
29548: EQUAL
29549: IFTRUE 29553
29551: GO 29615
29553: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29554: LD_ADDR_VAR 0 12
29558: PUSH
29559: LD_VAR 0 18
29563: PPUSH
29564: LD_INT 22
29566: PUSH
29567: LD_VAR 0 16
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: PUSH
29576: LD_INT 2
29578: PUSH
29579: LD_INT 30
29581: PUSH
29582: LD_INT 2
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 30
29591: PUSH
29592: LD_INT 3
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: LIST
29603: PUSH
29604: EMPTY
29605: LIST
29606: LIST
29607: PPUSH
29608: CALL_OW 72
29612: ST_TO_ADDR
29613: GO 29697
29615: LD_INT 4
29617: DOUBLE
29618: EQUAL
29619: IFTRUE 29623
29621: GO 29696
29623: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29624: LD_ADDR_VAR 0 12
29628: PUSH
29629: LD_VAR 0 18
29633: PPUSH
29634: LD_INT 22
29636: PUSH
29637: LD_VAR 0 16
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 2
29648: PUSH
29649: LD_INT 30
29651: PUSH
29652: LD_INT 6
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: PUSH
29659: LD_INT 30
29661: PUSH
29662: LD_INT 7
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 30
29671: PUSH
29672: LD_INT 8
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PPUSH
29689: CALL_OW 72
29693: ST_TO_ADDR
29694: GO 29697
29696: POP
// if i = 1 then
29697: LD_VAR 0 8
29701: PUSH
29702: LD_INT 1
29704: EQUAL
29705: IFFALSE 29816
// begin tmp := [ ] ;
29707: LD_ADDR_VAR 0 19
29711: PUSH
29712: EMPTY
29713: ST_TO_ADDR
// for j in f do
29714: LD_ADDR_VAR 0 9
29718: PUSH
29719: LD_VAR 0 12
29723: PUSH
29724: FOR_IN
29725: IFFALSE 29798
// if GetBType ( j ) = b_bunker then
29727: LD_VAR 0 9
29731: PPUSH
29732: CALL_OW 266
29736: PUSH
29737: LD_INT 32
29739: EQUAL
29740: IFFALSE 29767
// tmp := Insert ( tmp , 1 , j ) else
29742: LD_ADDR_VAR 0 19
29746: PUSH
29747: LD_VAR 0 19
29751: PPUSH
29752: LD_INT 1
29754: PPUSH
29755: LD_VAR 0 9
29759: PPUSH
29760: CALL_OW 2
29764: ST_TO_ADDR
29765: GO 29796
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29767: LD_ADDR_VAR 0 19
29771: PUSH
29772: LD_VAR 0 19
29776: PPUSH
29777: LD_VAR 0 19
29781: PUSH
29782: LD_INT 1
29784: PLUS
29785: PPUSH
29786: LD_VAR 0 9
29790: PPUSH
29791: CALL_OW 2
29795: ST_TO_ADDR
29796: GO 29724
29798: POP
29799: POP
// if tmp then
29800: LD_VAR 0 19
29804: IFFALSE 29816
// f := tmp ;
29806: LD_ADDR_VAR 0 12
29810: PUSH
29811: LD_VAR 0 19
29815: ST_TO_ADDR
// end ; x := personel [ i ] ;
29816: LD_ADDR_VAR 0 13
29820: PUSH
29821: LD_VAR 0 6
29825: PUSH
29826: LD_VAR 0 8
29830: ARRAY
29831: ST_TO_ADDR
// if x = - 1 then
29832: LD_VAR 0 13
29836: PUSH
29837: LD_INT 1
29839: NEG
29840: EQUAL
29841: IFFALSE 30050
// begin for j in f do
29843: LD_ADDR_VAR 0 9
29847: PUSH
29848: LD_VAR 0 12
29852: PUSH
29853: FOR_IN
29854: IFFALSE 30046
// repeat InitHc ;
29856: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29860: LD_VAR 0 9
29864: PPUSH
29865: CALL_OW 266
29869: PUSH
29870: LD_INT 5
29872: EQUAL
29873: IFFALSE 29943
// begin if UnitsInside ( j ) < 3 then
29875: LD_VAR 0 9
29879: PPUSH
29880: CALL_OW 313
29884: PUSH
29885: LD_INT 3
29887: LESS
29888: IFFALSE 29924
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29890: LD_INT 0
29892: PPUSH
29893: LD_INT 5
29895: PUSH
29896: LD_INT 8
29898: PUSH
29899: LD_INT 9
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: LIST
29906: PUSH
29907: LD_VAR 0 17
29911: ARRAY
29912: PPUSH
29913: LD_VAR 0 4
29917: PPUSH
29918: CALL_OW 380
29922: GO 29941
// PrepareHuman ( false , i , skill ) ;
29924: LD_INT 0
29926: PPUSH
29927: LD_VAR 0 8
29931: PPUSH
29932: LD_VAR 0 4
29936: PPUSH
29937: CALL_OW 380
// end else
29941: GO 29960
// PrepareHuman ( false , i , skill ) ;
29943: LD_INT 0
29945: PPUSH
29946: LD_VAR 0 8
29950: PPUSH
29951: LD_VAR 0 4
29955: PPUSH
29956: CALL_OW 380
// un := CreateHuman ;
29960: LD_ADDR_VAR 0 14
29964: PUSH
29965: CALL_OW 44
29969: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29970: LD_ADDR_VAR 0 7
29974: PUSH
29975: LD_VAR 0 7
29979: PPUSH
29980: LD_INT 1
29982: PPUSH
29983: LD_VAR 0 14
29987: PPUSH
29988: CALL_OW 2
29992: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29993: LD_VAR 0 14
29997: PPUSH
29998: LD_VAR 0 9
30002: PPUSH
30003: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30007: LD_VAR 0 9
30011: PPUSH
30012: CALL_OW 313
30016: PUSH
30017: LD_INT 6
30019: EQUAL
30020: PUSH
30021: LD_VAR 0 9
30025: PPUSH
30026: CALL_OW 266
30030: PUSH
30031: LD_INT 32
30033: PUSH
30034: LD_INT 31
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: IN
30041: OR
30042: IFFALSE 29856
30044: GO 29853
30046: POP
30047: POP
// end else
30048: GO 30430
// for j = 1 to x do
30050: LD_ADDR_VAR 0 9
30054: PUSH
30055: DOUBLE
30056: LD_INT 1
30058: DEC
30059: ST_TO_ADDR
30060: LD_VAR 0 13
30064: PUSH
30065: FOR_TO
30066: IFFALSE 30428
// begin InitHc ;
30068: CALL_OW 19
// if not f then
30072: LD_VAR 0 12
30076: NOT
30077: IFFALSE 30166
// begin PrepareHuman ( false , i , skill ) ;
30079: LD_INT 0
30081: PPUSH
30082: LD_VAR 0 8
30086: PPUSH
30087: LD_VAR 0 4
30091: PPUSH
30092: CALL_OW 380
// un := CreateHuman ;
30096: LD_ADDR_VAR 0 14
30100: PUSH
30101: CALL_OW 44
30105: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30106: LD_ADDR_VAR 0 7
30110: PUSH
30111: LD_VAR 0 7
30115: PPUSH
30116: LD_INT 1
30118: PPUSH
30119: LD_VAR 0 14
30123: PPUSH
30124: CALL_OW 2
30128: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30129: LD_VAR 0 14
30133: PPUSH
30134: LD_VAR 0 1
30138: PPUSH
30139: CALL_OW 250
30143: PPUSH
30144: LD_VAR 0 1
30148: PPUSH
30149: CALL_OW 251
30153: PPUSH
30154: LD_INT 10
30156: PPUSH
30157: LD_INT 0
30159: PPUSH
30160: CALL_OW 50
// continue ;
30164: GO 30065
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30166: LD_VAR 0 12
30170: PUSH
30171: LD_INT 1
30173: ARRAY
30174: PPUSH
30175: CALL_OW 313
30179: PUSH
30180: LD_VAR 0 12
30184: PUSH
30185: LD_INT 1
30187: ARRAY
30188: PPUSH
30189: CALL_OW 266
30193: PUSH
30194: LD_INT 32
30196: PUSH
30197: LD_INT 31
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: IN
30204: AND
30205: PUSH
30206: LD_VAR 0 12
30210: PUSH
30211: LD_INT 1
30213: ARRAY
30214: PPUSH
30215: CALL_OW 313
30219: PUSH
30220: LD_INT 6
30222: EQUAL
30223: OR
30224: IFFALSE 30244
// f := Delete ( f , 1 ) ;
30226: LD_ADDR_VAR 0 12
30230: PUSH
30231: LD_VAR 0 12
30235: PPUSH
30236: LD_INT 1
30238: PPUSH
30239: CALL_OW 3
30243: ST_TO_ADDR
// if not f then
30244: LD_VAR 0 12
30248: NOT
30249: IFFALSE 30267
// begin x := x + 2 ;
30251: LD_ADDR_VAR 0 13
30255: PUSH
30256: LD_VAR 0 13
30260: PUSH
30261: LD_INT 2
30263: PLUS
30264: ST_TO_ADDR
// continue ;
30265: GO 30065
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30267: LD_VAR 0 12
30271: PUSH
30272: LD_INT 1
30274: ARRAY
30275: PPUSH
30276: CALL_OW 266
30280: PUSH
30281: LD_INT 5
30283: EQUAL
30284: IFFALSE 30358
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30286: LD_VAR 0 12
30290: PUSH
30291: LD_INT 1
30293: ARRAY
30294: PPUSH
30295: CALL_OW 313
30299: PUSH
30300: LD_INT 3
30302: LESS
30303: IFFALSE 30339
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30305: LD_INT 0
30307: PPUSH
30308: LD_INT 5
30310: PUSH
30311: LD_INT 8
30313: PUSH
30314: LD_INT 9
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: LIST
30321: PUSH
30322: LD_VAR 0 17
30326: ARRAY
30327: PPUSH
30328: LD_VAR 0 4
30332: PPUSH
30333: CALL_OW 380
30337: GO 30356
// PrepareHuman ( false , i , skill ) ;
30339: LD_INT 0
30341: PPUSH
30342: LD_VAR 0 8
30346: PPUSH
30347: LD_VAR 0 4
30351: PPUSH
30352: CALL_OW 380
// end else
30356: GO 30375
// PrepareHuman ( false , i , skill ) ;
30358: LD_INT 0
30360: PPUSH
30361: LD_VAR 0 8
30365: PPUSH
30366: LD_VAR 0 4
30370: PPUSH
30371: CALL_OW 380
// un := CreateHuman ;
30375: LD_ADDR_VAR 0 14
30379: PUSH
30380: CALL_OW 44
30384: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30385: LD_ADDR_VAR 0 7
30389: PUSH
30390: LD_VAR 0 7
30394: PPUSH
30395: LD_INT 1
30397: PPUSH
30398: LD_VAR 0 14
30402: PPUSH
30403: CALL_OW 2
30407: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30408: LD_VAR 0 14
30412: PPUSH
30413: LD_VAR 0 12
30417: PUSH
30418: LD_INT 1
30420: ARRAY
30421: PPUSH
30422: CALL_OW 52
// end ;
30426: GO 30065
30428: POP
30429: POP
// end ;
30430: GO 29367
30432: POP
30433: POP
// result := result ^ buildings ;
30434: LD_ADDR_VAR 0 7
30438: PUSH
30439: LD_VAR 0 7
30443: PUSH
30444: LD_VAR 0 18
30448: ADD
30449: ST_TO_ADDR
// end else
30450: GO 30593
// begin for i = 1 to personel do
30452: LD_ADDR_VAR 0 8
30456: PUSH
30457: DOUBLE
30458: LD_INT 1
30460: DEC
30461: ST_TO_ADDR
30462: LD_VAR 0 6
30466: PUSH
30467: FOR_TO
30468: IFFALSE 30591
// begin if i > 4 then
30470: LD_VAR 0 8
30474: PUSH
30475: LD_INT 4
30477: GREATER
30478: IFFALSE 30482
// break ;
30480: GO 30591
// x := personel [ i ] ;
30482: LD_ADDR_VAR 0 13
30486: PUSH
30487: LD_VAR 0 6
30491: PUSH
30492: LD_VAR 0 8
30496: ARRAY
30497: ST_TO_ADDR
// if x = - 1 then
30498: LD_VAR 0 13
30502: PUSH
30503: LD_INT 1
30505: NEG
30506: EQUAL
30507: IFFALSE 30511
// continue ;
30509: GO 30467
// PrepareHuman ( false , i , skill ) ;
30511: LD_INT 0
30513: PPUSH
30514: LD_VAR 0 8
30518: PPUSH
30519: LD_VAR 0 4
30523: PPUSH
30524: CALL_OW 380
// un := CreateHuman ;
30528: LD_ADDR_VAR 0 14
30532: PUSH
30533: CALL_OW 44
30537: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30538: LD_VAR 0 14
30542: PPUSH
30543: LD_VAR 0 1
30547: PPUSH
30548: CALL_OW 250
30552: PPUSH
30553: LD_VAR 0 1
30557: PPUSH
30558: CALL_OW 251
30562: PPUSH
30563: LD_INT 10
30565: PPUSH
30566: LD_INT 0
30568: PPUSH
30569: CALL_OW 50
// result := result ^ un ;
30573: LD_ADDR_VAR 0 7
30577: PUSH
30578: LD_VAR 0 7
30582: PUSH
30583: LD_VAR 0 14
30587: ADD
30588: ST_TO_ADDR
// end ;
30589: GO 30467
30591: POP
30592: POP
// end ; end ;
30593: LD_VAR 0 7
30597: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30598: LD_INT 0
30600: PPUSH
30601: PPUSH
30602: PPUSH
30603: PPUSH
30604: PPUSH
30605: PPUSH
30606: PPUSH
30607: PPUSH
30608: PPUSH
30609: PPUSH
30610: PPUSH
30611: PPUSH
30612: PPUSH
30613: PPUSH
30614: PPUSH
30615: PPUSH
// result := false ;
30616: LD_ADDR_VAR 0 3
30620: PUSH
30621: LD_INT 0
30623: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30624: LD_VAR 0 1
30628: NOT
30629: PUSH
30630: LD_VAR 0 1
30634: PPUSH
30635: CALL_OW 266
30639: PUSH
30640: LD_INT 32
30642: PUSH
30643: LD_INT 33
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: IN
30650: NOT
30651: OR
30652: IFFALSE 30656
// exit ;
30654: GO 31792
// nat := GetNation ( tower ) ;
30656: LD_ADDR_VAR 0 12
30660: PUSH
30661: LD_VAR 0 1
30665: PPUSH
30666: CALL_OW 248
30670: ST_TO_ADDR
// side := GetSide ( tower ) ;
30671: LD_ADDR_VAR 0 16
30675: PUSH
30676: LD_VAR 0 1
30680: PPUSH
30681: CALL_OW 255
30685: ST_TO_ADDR
// x := GetX ( tower ) ;
30686: LD_ADDR_VAR 0 10
30690: PUSH
30691: LD_VAR 0 1
30695: PPUSH
30696: CALL_OW 250
30700: ST_TO_ADDR
// y := GetY ( tower ) ;
30701: LD_ADDR_VAR 0 11
30705: PUSH
30706: LD_VAR 0 1
30710: PPUSH
30711: CALL_OW 251
30715: ST_TO_ADDR
// if not x or not y then
30716: LD_VAR 0 10
30720: NOT
30721: PUSH
30722: LD_VAR 0 11
30726: NOT
30727: OR
30728: IFFALSE 30732
// exit ;
30730: GO 31792
// weapon := 0 ;
30732: LD_ADDR_VAR 0 18
30736: PUSH
30737: LD_INT 0
30739: ST_TO_ADDR
// fac_list := [ ] ;
30740: LD_ADDR_VAR 0 17
30744: PUSH
30745: EMPTY
30746: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
30747: LD_ADDR_VAR 0 6
30751: PUSH
30752: LD_VAR 0 1
30756: PPUSH
30757: CALL_OW 274
30761: PPUSH
30762: LD_VAR 0 2
30766: PPUSH
30767: CALL 28370 0 2
30771: PPUSH
30772: LD_INT 30
30774: PUSH
30775: LD_INT 3
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PPUSH
30782: CALL_OW 72
30786: ST_TO_ADDR
// if not factories then
30787: LD_VAR 0 6
30791: NOT
30792: IFFALSE 30796
// exit ;
30794: GO 31792
// for i in factories do
30796: LD_ADDR_VAR 0 8
30800: PUSH
30801: LD_VAR 0 6
30805: PUSH
30806: FOR_IN
30807: IFFALSE 30832
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30809: LD_ADDR_VAR 0 17
30813: PUSH
30814: LD_VAR 0 17
30818: PUSH
30819: LD_VAR 0 8
30823: PPUSH
30824: CALL_OW 478
30828: UNION
30829: ST_TO_ADDR
30830: GO 30806
30832: POP
30833: POP
// if not fac_list then
30834: LD_VAR 0 17
30838: NOT
30839: IFFALSE 30843
// exit ;
30841: GO 31792
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30843: LD_ADDR_VAR 0 5
30847: PUSH
30848: LD_INT 4
30850: PUSH
30851: LD_INT 5
30853: PUSH
30854: LD_INT 9
30856: PUSH
30857: LD_INT 10
30859: PUSH
30860: LD_INT 6
30862: PUSH
30863: LD_INT 7
30865: PUSH
30866: LD_INT 11
30868: PUSH
30869: EMPTY
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 27
30880: PUSH
30881: LD_INT 28
30883: PUSH
30884: LD_INT 26
30886: PUSH
30887: LD_INT 30
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 43
30898: PUSH
30899: LD_INT 44
30901: PUSH
30902: LD_INT 46
30904: PUSH
30905: LD_INT 45
30907: PUSH
30908: LD_INT 47
30910: PUSH
30911: LD_INT 49
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: LIST
30926: PUSH
30927: LD_VAR 0 12
30931: ARRAY
30932: ST_TO_ADDR
// for i in list do
30933: LD_ADDR_VAR 0 8
30937: PUSH
30938: LD_VAR 0 5
30942: PUSH
30943: FOR_IN
30944: IFFALSE 30977
// if not i in fac_list then
30946: LD_VAR 0 8
30950: PUSH
30951: LD_VAR 0 17
30955: IN
30956: NOT
30957: IFFALSE 30975
// list := list diff i ;
30959: LD_ADDR_VAR 0 5
30963: PUSH
30964: LD_VAR 0 5
30968: PUSH
30969: LD_VAR 0 8
30973: DIFF
30974: ST_TO_ADDR
30975: GO 30943
30977: POP
30978: POP
// if not list then
30979: LD_VAR 0 5
30983: NOT
30984: IFFALSE 30988
// exit ;
30986: GO 31792
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30988: LD_VAR 0 12
30992: PUSH
30993: LD_INT 3
30995: EQUAL
30996: PUSH
30997: LD_INT 49
30999: PUSH
31000: LD_VAR 0 5
31004: IN
31005: AND
31006: PUSH
31007: LD_INT 31
31009: PPUSH
31010: LD_VAR 0 16
31014: PPUSH
31015: CALL_OW 321
31019: PUSH
31020: LD_INT 2
31022: EQUAL
31023: AND
31024: IFFALSE 31084
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31026: LD_INT 22
31028: PUSH
31029: LD_VAR 0 16
31033: PUSH
31034: EMPTY
31035: LIST
31036: LIST
31037: PUSH
31038: LD_INT 35
31040: PUSH
31041: LD_INT 49
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 91
31050: PUSH
31051: LD_VAR 0 1
31055: PUSH
31056: LD_INT 10
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: LIST
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: LIST
31068: PPUSH
31069: CALL_OW 69
31073: NOT
31074: IFFALSE 31084
// weapon := ru_time_lapser ;
31076: LD_ADDR_VAR 0 18
31080: PUSH
31081: LD_INT 49
31083: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31084: LD_VAR 0 12
31088: PUSH
31089: LD_INT 1
31091: PUSH
31092: LD_INT 2
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: IN
31099: PUSH
31100: LD_INT 11
31102: PUSH
31103: LD_VAR 0 5
31107: IN
31108: PUSH
31109: LD_INT 30
31111: PUSH
31112: LD_VAR 0 5
31116: IN
31117: OR
31118: AND
31119: PUSH
31120: LD_INT 6
31122: PPUSH
31123: LD_VAR 0 16
31127: PPUSH
31128: CALL_OW 321
31132: PUSH
31133: LD_INT 2
31135: EQUAL
31136: AND
31137: IFFALSE 31302
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31139: LD_INT 22
31141: PUSH
31142: LD_VAR 0 16
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: PUSH
31151: LD_INT 2
31153: PUSH
31154: LD_INT 35
31156: PUSH
31157: LD_INT 11
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 35
31166: PUSH
31167: LD_INT 30
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 91
31181: PUSH
31182: LD_VAR 0 1
31186: PUSH
31187: LD_INT 18
31189: PUSH
31190: EMPTY
31191: LIST
31192: LIST
31193: LIST
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: LIST
31199: PPUSH
31200: CALL_OW 69
31204: NOT
31205: PUSH
31206: LD_INT 22
31208: PUSH
31209: LD_VAR 0 16
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: PUSH
31218: LD_INT 2
31220: PUSH
31221: LD_INT 30
31223: PUSH
31224: LD_INT 32
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 30
31233: PUSH
31234: LD_INT 33
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 91
31248: PUSH
31249: LD_VAR 0 1
31253: PUSH
31254: LD_INT 12
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: LIST
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: LIST
31266: PUSH
31267: EMPTY
31268: LIST
31269: PPUSH
31270: CALL_OW 69
31274: PUSH
31275: LD_INT 2
31277: GREATER
31278: AND
31279: IFFALSE 31302
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31281: LD_ADDR_VAR 0 18
31285: PUSH
31286: LD_INT 11
31288: PUSH
31289: LD_INT 30
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_VAR 0 12
31300: ARRAY
31301: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31302: LD_VAR 0 18
31306: NOT
31307: PUSH
31308: LD_INT 40
31310: PPUSH
31311: LD_VAR 0 16
31315: PPUSH
31316: CALL_OW 321
31320: PUSH
31321: LD_INT 2
31323: EQUAL
31324: AND
31325: PUSH
31326: LD_INT 7
31328: PUSH
31329: LD_VAR 0 5
31333: IN
31334: PUSH
31335: LD_INT 28
31337: PUSH
31338: LD_VAR 0 5
31342: IN
31343: OR
31344: PUSH
31345: LD_INT 45
31347: PUSH
31348: LD_VAR 0 5
31352: IN
31353: OR
31354: AND
31355: IFFALSE 31609
// begin hex := GetHexInfo ( x , y ) ;
31357: LD_ADDR_VAR 0 4
31361: PUSH
31362: LD_VAR 0 10
31366: PPUSH
31367: LD_VAR 0 11
31371: PPUSH
31372: CALL_OW 546
31376: ST_TO_ADDR
// if hex [ 1 ] then
31377: LD_VAR 0 4
31381: PUSH
31382: LD_INT 1
31384: ARRAY
31385: IFFALSE 31389
// exit ;
31387: GO 31792
// height := hex [ 2 ] ;
31389: LD_ADDR_VAR 0 15
31393: PUSH
31394: LD_VAR 0 4
31398: PUSH
31399: LD_INT 2
31401: ARRAY
31402: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31403: LD_ADDR_VAR 0 14
31407: PUSH
31408: LD_INT 0
31410: PUSH
31411: LD_INT 2
31413: PUSH
31414: LD_INT 3
31416: PUSH
31417: LD_INT 5
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: ST_TO_ADDR
// for i in tmp do
31426: LD_ADDR_VAR 0 8
31430: PUSH
31431: LD_VAR 0 14
31435: PUSH
31436: FOR_IN
31437: IFFALSE 31607
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31439: LD_ADDR_VAR 0 9
31443: PUSH
31444: LD_VAR 0 10
31448: PPUSH
31449: LD_VAR 0 8
31453: PPUSH
31454: LD_INT 5
31456: PPUSH
31457: CALL_OW 272
31461: PUSH
31462: LD_VAR 0 11
31466: PPUSH
31467: LD_VAR 0 8
31471: PPUSH
31472: LD_INT 5
31474: PPUSH
31475: CALL_OW 273
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31484: LD_VAR 0 9
31488: PUSH
31489: LD_INT 1
31491: ARRAY
31492: PPUSH
31493: LD_VAR 0 9
31497: PUSH
31498: LD_INT 2
31500: ARRAY
31501: PPUSH
31502: CALL_OW 488
31506: IFFALSE 31605
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31508: LD_ADDR_VAR 0 4
31512: PUSH
31513: LD_VAR 0 9
31517: PUSH
31518: LD_INT 1
31520: ARRAY
31521: PPUSH
31522: LD_VAR 0 9
31526: PUSH
31527: LD_INT 2
31529: ARRAY
31530: PPUSH
31531: CALL_OW 546
31535: ST_TO_ADDR
// if hex [ 1 ] then
31536: LD_VAR 0 4
31540: PUSH
31541: LD_INT 1
31543: ARRAY
31544: IFFALSE 31548
// continue ;
31546: GO 31436
// h := hex [ 2 ] ;
31548: LD_ADDR_VAR 0 13
31552: PUSH
31553: LD_VAR 0 4
31557: PUSH
31558: LD_INT 2
31560: ARRAY
31561: ST_TO_ADDR
// if h + 7 < height then
31562: LD_VAR 0 13
31566: PUSH
31567: LD_INT 7
31569: PLUS
31570: PUSH
31571: LD_VAR 0 15
31575: LESS
31576: IFFALSE 31605
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31578: LD_ADDR_VAR 0 18
31582: PUSH
31583: LD_INT 7
31585: PUSH
31586: LD_INT 28
31588: PUSH
31589: LD_INT 45
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: LIST
31596: PUSH
31597: LD_VAR 0 12
31601: ARRAY
31602: ST_TO_ADDR
// break ;
31603: GO 31607
// end ; end ; end ;
31605: GO 31436
31607: POP
31608: POP
// end ; if not weapon then
31609: LD_VAR 0 18
31613: NOT
31614: IFFALSE 31674
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31616: LD_ADDR_VAR 0 5
31620: PUSH
31621: LD_VAR 0 5
31625: PUSH
31626: LD_INT 11
31628: PUSH
31629: LD_INT 30
31631: PUSH
31632: LD_INT 49
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: LIST
31639: DIFF
31640: ST_TO_ADDR
// if not list then
31641: LD_VAR 0 5
31645: NOT
31646: IFFALSE 31650
// exit ;
31648: GO 31792
// weapon := list [ rand ( 1 , list ) ] ;
31650: LD_ADDR_VAR 0 18
31654: PUSH
31655: LD_VAR 0 5
31659: PUSH
31660: LD_INT 1
31662: PPUSH
31663: LD_VAR 0 5
31667: PPUSH
31668: CALL_OW 12
31672: ARRAY
31673: ST_TO_ADDR
// end ; if weapon then
31674: LD_VAR 0 18
31678: IFFALSE 31792
// begin tmp := CostOfWeapon ( weapon ) ;
31680: LD_ADDR_VAR 0 14
31684: PUSH
31685: LD_VAR 0 18
31689: PPUSH
31690: CALL_OW 451
31694: ST_TO_ADDR
// j := GetBase ( tower ) ;
31695: LD_ADDR_VAR 0 9
31699: PUSH
31700: LD_VAR 0 1
31704: PPUSH
31705: CALL_OW 274
31709: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31710: LD_VAR 0 9
31714: PPUSH
31715: LD_INT 1
31717: PPUSH
31718: CALL_OW 275
31722: PUSH
31723: LD_VAR 0 14
31727: PUSH
31728: LD_INT 1
31730: ARRAY
31731: GREATEREQUAL
31732: PUSH
31733: LD_VAR 0 9
31737: PPUSH
31738: LD_INT 2
31740: PPUSH
31741: CALL_OW 275
31745: PUSH
31746: LD_VAR 0 14
31750: PUSH
31751: LD_INT 2
31753: ARRAY
31754: GREATEREQUAL
31755: AND
31756: PUSH
31757: LD_VAR 0 9
31761: PPUSH
31762: LD_INT 3
31764: PPUSH
31765: CALL_OW 275
31769: PUSH
31770: LD_VAR 0 14
31774: PUSH
31775: LD_INT 3
31777: ARRAY
31778: GREATEREQUAL
31779: AND
31780: IFFALSE 31792
// result := weapon ;
31782: LD_ADDR_VAR 0 3
31786: PUSH
31787: LD_VAR 0 18
31791: ST_TO_ADDR
// end ; end ;
31792: LD_VAR 0 3
31796: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31797: LD_INT 0
31799: PPUSH
31800: PPUSH
// result := true ;
31801: LD_ADDR_VAR 0 3
31805: PUSH
31806: LD_INT 1
31808: ST_TO_ADDR
// if array1 = array2 then
31809: LD_VAR 0 1
31813: PUSH
31814: LD_VAR 0 2
31818: EQUAL
31819: IFFALSE 31879
// begin for i = 1 to array1 do
31821: LD_ADDR_VAR 0 4
31825: PUSH
31826: DOUBLE
31827: LD_INT 1
31829: DEC
31830: ST_TO_ADDR
31831: LD_VAR 0 1
31835: PUSH
31836: FOR_TO
31837: IFFALSE 31875
// if array1 [ i ] <> array2 [ i ] then
31839: LD_VAR 0 1
31843: PUSH
31844: LD_VAR 0 4
31848: ARRAY
31849: PUSH
31850: LD_VAR 0 2
31854: PUSH
31855: LD_VAR 0 4
31859: ARRAY
31860: NONEQUAL
31861: IFFALSE 31873
// begin result := false ;
31863: LD_ADDR_VAR 0 3
31867: PUSH
31868: LD_INT 0
31870: ST_TO_ADDR
// break ;
31871: GO 31875
// end ;
31873: GO 31836
31875: POP
31876: POP
// end else
31877: GO 31887
// result := false ;
31879: LD_ADDR_VAR 0 3
31883: PUSH
31884: LD_INT 0
31886: ST_TO_ADDR
// end ;
31887: LD_VAR 0 3
31891: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31892: LD_INT 0
31894: PPUSH
31895: PPUSH
31896: PPUSH
// pom := GetBase ( fac ) ;
31897: LD_ADDR_VAR 0 5
31901: PUSH
31902: LD_VAR 0 1
31906: PPUSH
31907: CALL_OW 274
31911: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31912: LD_ADDR_VAR 0 4
31916: PUSH
31917: LD_VAR 0 2
31921: PUSH
31922: LD_INT 1
31924: ARRAY
31925: PPUSH
31926: LD_VAR 0 2
31930: PUSH
31931: LD_INT 2
31933: ARRAY
31934: PPUSH
31935: LD_VAR 0 2
31939: PUSH
31940: LD_INT 3
31942: ARRAY
31943: PPUSH
31944: LD_VAR 0 2
31948: PUSH
31949: LD_INT 4
31951: ARRAY
31952: PPUSH
31953: CALL_OW 449
31957: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31958: LD_ADDR_VAR 0 3
31962: PUSH
31963: LD_VAR 0 5
31967: PPUSH
31968: LD_INT 1
31970: PPUSH
31971: CALL_OW 275
31975: PUSH
31976: LD_VAR 0 4
31980: PUSH
31981: LD_INT 1
31983: ARRAY
31984: GREATEREQUAL
31985: PUSH
31986: LD_VAR 0 5
31990: PPUSH
31991: LD_INT 2
31993: PPUSH
31994: CALL_OW 275
31998: PUSH
31999: LD_VAR 0 4
32003: PUSH
32004: LD_INT 2
32006: ARRAY
32007: GREATEREQUAL
32008: AND
32009: PUSH
32010: LD_VAR 0 5
32014: PPUSH
32015: LD_INT 3
32017: PPUSH
32018: CALL_OW 275
32022: PUSH
32023: LD_VAR 0 4
32027: PUSH
32028: LD_INT 3
32030: ARRAY
32031: GREATEREQUAL
32032: AND
32033: ST_TO_ADDR
// end ;
32034: LD_VAR 0 3
32038: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32039: LD_INT 0
32041: PPUSH
32042: PPUSH
32043: PPUSH
32044: PPUSH
// pom := GetBase ( building ) ;
32045: LD_ADDR_VAR 0 3
32049: PUSH
32050: LD_VAR 0 1
32054: PPUSH
32055: CALL_OW 274
32059: ST_TO_ADDR
// if not pom then
32060: LD_VAR 0 3
32064: NOT
32065: IFFALSE 32069
// exit ;
32067: GO 32239
// btype := GetBType ( building ) ;
32069: LD_ADDR_VAR 0 5
32073: PUSH
32074: LD_VAR 0 1
32078: PPUSH
32079: CALL_OW 266
32083: ST_TO_ADDR
// if btype = b_armoury then
32084: LD_VAR 0 5
32088: PUSH
32089: LD_INT 4
32091: EQUAL
32092: IFFALSE 32102
// btype := b_barracks ;
32094: LD_ADDR_VAR 0 5
32098: PUSH
32099: LD_INT 5
32101: ST_TO_ADDR
// if btype = b_depot then
32102: LD_VAR 0 5
32106: PUSH
32107: LD_INT 0
32109: EQUAL
32110: IFFALSE 32120
// btype := b_warehouse ;
32112: LD_ADDR_VAR 0 5
32116: PUSH
32117: LD_INT 1
32119: ST_TO_ADDR
// if btype = b_workshop then
32120: LD_VAR 0 5
32124: PUSH
32125: LD_INT 2
32127: EQUAL
32128: IFFALSE 32138
// btype := b_factory ;
32130: LD_ADDR_VAR 0 5
32134: PUSH
32135: LD_INT 3
32137: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32138: LD_ADDR_VAR 0 4
32142: PUSH
32143: LD_VAR 0 5
32147: PPUSH
32148: LD_VAR 0 1
32152: PPUSH
32153: CALL_OW 248
32157: PPUSH
32158: CALL_OW 450
32162: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32163: LD_ADDR_VAR 0 2
32167: PUSH
32168: LD_VAR 0 3
32172: PPUSH
32173: LD_INT 1
32175: PPUSH
32176: CALL_OW 275
32180: PUSH
32181: LD_VAR 0 4
32185: PUSH
32186: LD_INT 1
32188: ARRAY
32189: GREATEREQUAL
32190: PUSH
32191: LD_VAR 0 3
32195: PPUSH
32196: LD_INT 2
32198: PPUSH
32199: CALL_OW 275
32203: PUSH
32204: LD_VAR 0 4
32208: PUSH
32209: LD_INT 2
32211: ARRAY
32212: GREATEREQUAL
32213: AND
32214: PUSH
32215: LD_VAR 0 3
32219: PPUSH
32220: LD_INT 3
32222: PPUSH
32223: CALL_OW 275
32227: PUSH
32228: LD_VAR 0 4
32232: PUSH
32233: LD_INT 3
32235: ARRAY
32236: GREATEREQUAL
32237: AND
32238: ST_TO_ADDR
// end ;
32239: LD_VAR 0 2
32243: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32244: LD_INT 0
32246: PPUSH
32247: PPUSH
32248: PPUSH
// pom := GetBase ( building ) ;
32249: LD_ADDR_VAR 0 4
32253: PUSH
32254: LD_VAR 0 1
32258: PPUSH
32259: CALL_OW 274
32263: ST_TO_ADDR
// if not pom then
32264: LD_VAR 0 4
32268: NOT
32269: IFFALSE 32273
// exit ;
32271: GO 32374
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32273: LD_ADDR_VAR 0 5
32277: PUSH
32278: LD_VAR 0 2
32282: PPUSH
32283: LD_VAR 0 1
32287: PPUSH
32288: CALL_OW 248
32292: PPUSH
32293: CALL_OW 450
32297: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32298: LD_ADDR_VAR 0 3
32302: PUSH
32303: LD_VAR 0 4
32307: PPUSH
32308: LD_INT 1
32310: PPUSH
32311: CALL_OW 275
32315: PUSH
32316: LD_VAR 0 5
32320: PUSH
32321: LD_INT 1
32323: ARRAY
32324: GREATEREQUAL
32325: PUSH
32326: LD_VAR 0 4
32330: PPUSH
32331: LD_INT 2
32333: PPUSH
32334: CALL_OW 275
32338: PUSH
32339: LD_VAR 0 5
32343: PUSH
32344: LD_INT 2
32346: ARRAY
32347: GREATEREQUAL
32348: AND
32349: PUSH
32350: LD_VAR 0 4
32354: PPUSH
32355: LD_INT 3
32357: PPUSH
32358: CALL_OW 275
32362: PUSH
32363: LD_VAR 0 5
32367: PUSH
32368: LD_INT 3
32370: ARRAY
32371: GREATEREQUAL
32372: AND
32373: ST_TO_ADDR
// end ;
32374: LD_VAR 0 3
32378: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
32379: LD_INT 0
32381: PPUSH
32382: PPUSH
32383: PPUSH
32384: PPUSH
32385: PPUSH
32386: PPUSH
32387: PPUSH
32388: PPUSH
32389: PPUSH
32390: PPUSH
// result := false ;
32391: LD_ADDR_VAR 0 6
32395: PUSH
32396: LD_INT 0
32398: ST_TO_ADDR
// if not base or not btype or not x or not y then
32399: LD_VAR 0 1
32403: NOT
32404: PUSH
32405: LD_VAR 0 2
32409: NOT
32410: OR
32411: PUSH
32412: LD_VAR 0 3
32416: NOT
32417: OR
32418: PUSH
32419: LD_VAR 0 4
32423: NOT
32424: OR
32425: IFFALSE 32429
// exit ;
32427: GO 33038
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
32429: LD_ADDR_VAR 0 12
32433: PUSH
32434: LD_VAR 0 2
32438: PPUSH
32439: LD_VAR 0 3
32443: PPUSH
32444: LD_VAR 0 4
32448: PPUSH
32449: LD_VAR 0 5
32453: PPUSH
32454: LD_VAR 0 1
32458: PUSH
32459: LD_INT 1
32461: ARRAY
32462: PPUSH
32463: CALL_OW 248
32467: PPUSH
32468: LD_INT 0
32470: PPUSH
32471: CALL 33875 0 6
32475: ST_TO_ADDR
// if not hexes then
32476: LD_VAR 0 12
32480: NOT
32481: IFFALSE 32485
// exit ;
32483: GO 33038
// for i = 1 to hexes do
32485: LD_ADDR_VAR 0 7
32489: PUSH
32490: DOUBLE
32491: LD_INT 1
32493: DEC
32494: ST_TO_ADDR
32495: LD_VAR 0 12
32499: PUSH
32500: FOR_TO
32501: IFFALSE 33036
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32503: LD_ADDR_VAR 0 11
32507: PUSH
32508: LD_VAR 0 12
32512: PUSH
32513: LD_VAR 0 7
32517: ARRAY
32518: PUSH
32519: LD_INT 1
32521: ARRAY
32522: PPUSH
32523: LD_VAR 0 12
32527: PUSH
32528: LD_VAR 0 7
32532: ARRAY
32533: PUSH
32534: LD_INT 2
32536: ARRAY
32537: PPUSH
32538: CALL_OW 428
32542: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32543: LD_VAR 0 12
32547: PUSH
32548: LD_VAR 0 7
32552: ARRAY
32553: PUSH
32554: LD_INT 1
32556: ARRAY
32557: PPUSH
32558: LD_VAR 0 12
32562: PUSH
32563: LD_VAR 0 7
32567: ARRAY
32568: PUSH
32569: LD_INT 2
32571: ARRAY
32572: PPUSH
32573: CALL_OW 351
32577: PUSH
32578: LD_VAR 0 12
32582: PUSH
32583: LD_VAR 0 7
32587: ARRAY
32588: PUSH
32589: LD_INT 1
32591: ARRAY
32592: PPUSH
32593: LD_VAR 0 12
32597: PUSH
32598: LD_VAR 0 7
32602: ARRAY
32603: PUSH
32604: LD_INT 2
32606: ARRAY
32607: PPUSH
32608: CALL_OW 488
32612: NOT
32613: OR
32614: PUSH
32615: LD_VAR 0 11
32619: PPUSH
32620: CALL_OW 247
32624: PUSH
32625: LD_INT 3
32627: EQUAL
32628: OR
32629: IFFALSE 32635
// exit ;
32631: POP
32632: POP
32633: GO 33038
// if not tmp or not tmp in base then
32635: LD_VAR 0 11
32639: NOT
32640: PUSH
32641: LD_VAR 0 11
32645: PUSH
32646: LD_VAR 0 1
32650: IN
32651: NOT
32652: OR
32653: IFFALSE 32657
// continue ;
32655: GO 32500
// result := true ;
32657: LD_ADDR_VAR 0 6
32661: PUSH
32662: LD_INT 1
32664: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32665: LD_ADDR_VAR 0 15
32669: PUSH
32670: LD_VAR 0 1
32674: PPUSH
32675: LD_INT 22
32677: PUSH
32678: LD_VAR 0 11
32682: PPUSH
32683: CALL_OW 255
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 2
32694: PUSH
32695: LD_INT 30
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 30
32707: PUSH
32708: LD_INT 1
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: LIST
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PPUSH
32724: CALL_OW 72
32728: ST_TO_ADDR
// if dep then
32729: LD_VAR 0 15
32733: IFFALSE 32869
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32735: LD_ADDR_VAR 0 14
32739: PUSH
32740: LD_VAR 0 15
32744: PUSH
32745: LD_INT 1
32747: ARRAY
32748: PPUSH
32749: CALL_OW 250
32753: PPUSH
32754: LD_VAR 0 15
32758: PUSH
32759: LD_INT 1
32761: ARRAY
32762: PPUSH
32763: CALL_OW 254
32767: PPUSH
32768: LD_INT 5
32770: PPUSH
32771: CALL_OW 272
32775: PUSH
32776: LD_VAR 0 15
32780: PUSH
32781: LD_INT 1
32783: ARRAY
32784: PPUSH
32785: CALL_OW 251
32789: PPUSH
32790: LD_VAR 0 15
32794: PUSH
32795: LD_INT 1
32797: ARRAY
32798: PPUSH
32799: CALL_OW 254
32803: PPUSH
32804: LD_INT 5
32806: PPUSH
32807: CALL_OW 273
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32816: LD_VAR 0 14
32820: PUSH
32821: LD_INT 1
32823: ARRAY
32824: PPUSH
32825: LD_VAR 0 14
32829: PUSH
32830: LD_INT 2
32832: ARRAY
32833: PPUSH
32834: CALL_OW 488
32838: IFFALSE 32869
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32840: LD_VAR 0 11
32844: PPUSH
32845: LD_VAR 0 14
32849: PUSH
32850: LD_INT 1
32852: ARRAY
32853: PPUSH
32854: LD_VAR 0 14
32858: PUSH
32859: LD_INT 2
32861: ARRAY
32862: PPUSH
32863: CALL_OW 111
// continue ;
32867: GO 32500
// end ; end ; r := GetDir ( tmp ) ;
32869: LD_ADDR_VAR 0 13
32873: PUSH
32874: LD_VAR 0 11
32878: PPUSH
32879: CALL_OW 254
32883: ST_TO_ADDR
// if r = 5 then
32884: LD_VAR 0 13
32888: PUSH
32889: LD_INT 5
32891: EQUAL
32892: IFFALSE 32902
// r := 0 ;
32894: LD_ADDR_VAR 0 13
32898: PUSH
32899: LD_INT 0
32901: ST_TO_ADDR
// for j = r to 5 do
32902: LD_ADDR_VAR 0 8
32906: PUSH
32907: DOUBLE
32908: LD_VAR 0 13
32912: DEC
32913: ST_TO_ADDR
32914: LD_INT 5
32916: PUSH
32917: FOR_TO
32918: IFFALSE 33032
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32920: LD_ADDR_VAR 0 9
32924: PUSH
32925: LD_VAR 0 11
32929: PPUSH
32930: CALL_OW 250
32934: PPUSH
32935: LD_VAR 0 8
32939: PPUSH
32940: LD_INT 2
32942: PPUSH
32943: CALL_OW 272
32947: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32948: LD_ADDR_VAR 0 10
32952: PUSH
32953: LD_VAR 0 11
32957: PPUSH
32958: CALL_OW 251
32962: PPUSH
32963: LD_VAR 0 8
32967: PPUSH
32968: LD_INT 2
32970: PPUSH
32971: CALL_OW 273
32975: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32976: LD_VAR 0 9
32980: PPUSH
32981: LD_VAR 0 10
32985: PPUSH
32986: CALL_OW 488
32990: PUSH
32991: LD_VAR 0 9
32995: PPUSH
32996: LD_VAR 0 10
33000: PPUSH
33001: CALL_OW 428
33005: NOT
33006: AND
33007: IFFALSE 33030
// begin ComMoveXY ( tmp , _x , _y ) ;
33009: LD_VAR 0 11
33013: PPUSH
33014: LD_VAR 0 9
33018: PPUSH
33019: LD_VAR 0 10
33023: PPUSH
33024: CALL_OW 111
// break ;
33028: GO 33032
// end ; end ;
33030: GO 32917
33032: POP
33033: POP
// end ;
33034: GO 32500
33036: POP
33037: POP
// end ;
33038: LD_VAR 0 6
33042: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33043: LD_INT 0
33045: PPUSH
33046: PPUSH
33047: PPUSH
33048: PPUSH
33049: PPUSH
33050: PPUSH
33051: PPUSH
33052: PPUSH
33053: PPUSH
33054: PPUSH
// result := false ;
33055: LD_ADDR_VAR 0 6
33059: PUSH
33060: LD_INT 0
33062: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33063: LD_VAR 0 1
33067: NOT
33068: PUSH
33069: LD_VAR 0 1
33073: PPUSH
33074: CALL_OW 266
33078: PUSH
33079: LD_INT 0
33081: PUSH
33082: LD_INT 1
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: IN
33089: NOT
33090: OR
33091: PUSH
33092: LD_VAR 0 2
33096: NOT
33097: OR
33098: PUSH
33099: LD_VAR 0 5
33103: PUSH
33104: LD_INT 0
33106: PUSH
33107: LD_INT 1
33109: PUSH
33110: LD_INT 2
33112: PUSH
33113: LD_INT 3
33115: PUSH
33116: LD_INT 4
33118: PUSH
33119: LD_INT 5
33121: PUSH
33122: EMPTY
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: IN
33130: NOT
33131: OR
33132: PUSH
33133: LD_VAR 0 3
33137: PPUSH
33138: LD_VAR 0 4
33142: PPUSH
33143: CALL_OW 488
33147: NOT
33148: OR
33149: IFFALSE 33153
// exit ;
33151: GO 33870
// pom := GetBase ( depot ) ;
33153: LD_ADDR_VAR 0 10
33157: PUSH
33158: LD_VAR 0 1
33162: PPUSH
33163: CALL_OW 274
33167: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33168: LD_ADDR_VAR 0 11
33172: PUSH
33173: LD_VAR 0 2
33177: PPUSH
33178: LD_VAR 0 1
33182: PPUSH
33183: CALL_OW 248
33187: PPUSH
33188: CALL_OW 450
33192: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33193: LD_VAR 0 10
33197: PPUSH
33198: LD_INT 1
33200: PPUSH
33201: CALL_OW 275
33205: PUSH
33206: LD_VAR 0 11
33210: PUSH
33211: LD_INT 1
33213: ARRAY
33214: GREATEREQUAL
33215: PUSH
33216: LD_VAR 0 10
33220: PPUSH
33221: LD_INT 2
33223: PPUSH
33224: CALL_OW 275
33228: PUSH
33229: LD_VAR 0 11
33233: PUSH
33234: LD_INT 2
33236: ARRAY
33237: GREATEREQUAL
33238: AND
33239: PUSH
33240: LD_VAR 0 10
33244: PPUSH
33245: LD_INT 3
33247: PPUSH
33248: CALL_OW 275
33252: PUSH
33253: LD_VAR 0 11
33257: PUSH
33258: LD_INT 3
33260: ARRAY
33261: GREATEREQUAL
33262: AND
33263: NOT
33264: IFFALSE 33268
// exit ;
33266: GO 33870
// if GetBType ( depot ) = b_depot then
33268: LD_VAR 0 1
33272: PPUSH
33273: CALL_OW 266
33277: PUSH
33278: LD_INT 0
33280: EQUAL
33281: IFFALSE 33293
// dist := 28 else
33283: LD_ADDR_VAR 0 14
33287: PUSH
33288: LD_INT 28
33290: ST_TO_ADDR
33291: GO 33301
// dist := 36 ;
33293: LD_ADDR_VAR 0 14
33297: PUSH
33298: LD_INT 36
33300: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33301: LD_VAR 0 1
33305: PPUSH
33306: LD_VAR 0 3
33310: PPUSH
33311: LD_VAR 0 4
33315: PPUSH
33316: CALL_OW 297
33320: PUSH
33321: LD_VAR 0 14
33325: GREATER
33326: IFFALSE 33330
// exit ;
33328: GO 33870
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33330: LD_ADDR_VAR 0 12
33334: PUSH
33335: LD_VAR 0 2
33339: PPUSH
33340: LD_VAR 0 3
33344: PPUSH
33345: LD_VAR 0 4
33349: PPUSH
33350: LD_VAR 0 5
33354: PPUSH
33355: LD_VAR 0 1
33359: PPUSH
33360: CALL_OW 248
33364: PPUSH
33365: LD_INT 0
33367: PPUSH
33368: CALL 33875 0 6
33372: ST_TO_ADDR
// if not hexes then
33373: LD_VAR 0 12
33377: NOT
33378: IFFALSE 33382
// exit ;
33380: GO 33870
// hex := GetHexInfo ( x , y ) ;
33382: LD_ADDR_VAR 0 15
33386: PUSH
33387: LD_VAR 0 3
33391: PPUSH
33392: LD_VAR 0 4
33396: PPUSH
33397: CALL_OW 546
33401: ST_TO_ADDR
// if hex [ 1 ] then
33402: LD_VAR 0 15
33406: PUSH
33407: LD_INT 1
33409: ARRAY
33410: IFFALSE 33414
// exit ;
33412: GO 33870
// height := hex [ 2 ] ;
33414: LD_ADDR_VAR 0 13
33418: PUSH
33419: LD_VAR 0 15
33423: PUSH
33424: LD_INT 2
33426: ARRAY
33427: ST_TO_ADDR
// for i = 1 to hexes do
33428: LD_ADDR_VAR 0 7
33432: PUSH
33433: DOUBLE
33434: LD_INT 1
33436: DEC
33437: ST_TO_ADDR
33438: LD_VAR 0 12
33442: PUSH
33443: FOR_TO
33444: IFFALSE 33774
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33446: LD_VAR 0 12
33450: PUSH
33451: LD_VAR 0 7
33455: ARRAY
33456: PUSH
33457: LD_INT 1
33459: ARRAY
33460: PPUSH
33461: LD_VAR 0 12
33465: PUSH
33466: LD_VAR 0 7
33470: ARRAY
33471: PUSH
33472: LD_INT 2
33474: ARRAY
33475: PPUSH
33476: CALL_OW 488
33480: NOT
33481: PUSH
33482: LD_VAR 0 12
33486: PUSH
33487: LD_VAR 0 7
33491: ARRAY
33492: PUSH
33493: LD_INT 1
33495: ARRAY
33496: PPUSH
33497: LD_VAR 0 12
33501: PUSH
33502: LD_VAR 0 7
33506: ARRAY
33507: PUSH
33508: LD_INT 2
33510: ARRAY
33511: PPUSH
33512: CALL_OW 428
33516: PUSH
33517: LD_INT 0
33519: GREATER
33520: OR
33521: PUSH
33522: LD_VAR 0 12
33526: PUSH
33527: LD_VAR 0 7
33531: ARRAY
33532: PUSH
33533: LD_INT 1
33535: ARRAY
33536: PPUSH
33537: LD_VAR 0 12
33541: PUSH
33542: LD_VAR 0 7
33546: ARRAY
33547: PUSH
33548: LD_INT 2
33550: ARRAY
33551: PPUSH
33552: CALL_OW 351
33556: OR
33557: IFFALSE 33563
// exit ;
33559: POP
33560: POP
33561: GO 33870
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33563: LD_ADDR_VAR 0 8
33567: PUSH
33568: LD_VAR 0 12
33572: PUSH
33573: LD_VAR 0 7
33577: ARRAY
33578: PUSH
33579: LD_INT 1
33581: ARRAY
33582: PPUSH
33583: LD_VAR 0 12
33587: PUSH
33588: LD_VAR 0 7
33592: ARRAY
33593: PUSH
33594: LD_INT 2
33596: ARRAY
33597: PPUSH
33598: CALL_OW 546
33602: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33603: LD_VAR 0 8
33607: PUSH
33608: LD_INT 1
33610: ARRAY
33611: PUSH
33612: LD_VAR 0 8
33616: PUSH
33617: LD_INT 2
33619: ARRAY
33620: PUSH
33621: LD_VAR 0 13
33625: PUSH
33626: LD_INT 2
33628: PLUS
33629: GREATER
33630: OR
33631: PUSH
33632: LD_VAR 0 8
33636: PUSH
33637: LD_INT 2
33639: ARRAY
33640: PUSH
33641: LD_VAR 0 13
33645: PUSH
33646: LD_INT 2
33648: MINUS
33649: LESS
33650: OR
33651: PUSH
33652: LD_VAR 0 8
33656: PUSH
33657: LD_INT 3
33659: ARRAY
33660: PUSH
33661: LD_INT 0
33663: PUSH
33664: LD_INT 8
33666: PUSH
33667: LD_INT 9
33669: PUSH
33670: LD_INT 10
33672: PUSH
33673: LD_INT 11
33675: PUSH
33676: LD_INT 12
33678: PUSH
33679: LD_INT 13
33681: PUSH
33682: LD_INT 16
33684: PUSH
33685: LD_INT 17
33687: PUSH
33688: LD_INT 18
33690: PUSH
33691: LD_INT 19
33693: PUSH
33694: LD_INT 20
33696: PUSH
33697: LD_INT 21
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: IN
33715: NOT
33716: OR
33717: PUSH
33718: LD_VAR 0 8
33722: PUSH
33723: LD_INT 5
33725: ARRAY
33726: NOT
33727: OR
33728: PUSH
33729: LD_VAR 0 8
33733: PUSH
33734: LD_INT 6
33736: ARRAY
33737: PUSH
33738: LD_INT 1
33740: PUSH
33741: LD_INT 2
33743: PUSH
33744: LD_INT 7
33746: PUSH
33747: LD_INT 9
33749: PUSH
33750: LD_INT 10
33752: PUSH
33753: LD_INT 11
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: IN
33764: NOT
33765: OR
33766: IFFALSE 33772
// exit ;
33768: POP
33769: POP
33770: GO 33870
// end ;
33772: GO 33443
33774: POP
33775: POP
// side := GetSide ( depot ) ;
33776: LD_ADDR_VAR 0 9
33780: PUSH
33781: LD_VAR 0 1
33785: PPUSH
33786: CALL_OW 255
33790: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33791: LD_VAR 0 9
33795: PPUSH
33796: LD_VAR 0 3
33800: PPUSH
33801: LD_VAR 0 4
33805: PPUSH
33806: LD_INT 20
33808: PPUSH
33809: CALL 26524 0 4
33813: PUSH
33814: LD_INT 4
33816: ARRAY
33817: IFFALSE 33821
// exit ;
33819: GO 33870
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33821: LD_VAR 0 2
33825: PUSH
33826: LD_INT 29
33828: PUSH
33829: LD_INT 30
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: IN
33836: PUSH
33837: LD_VAR 0 3
33841: PPUSH
33842: LD_VAR 0 4
33846: PPUSH
33847: LD_VAR 0 9
33851: PPUSH
33852: CALL_OW 440
33856: NOT
33857: AND
33858: IFFALSE 33862
// exit ;
33860: GO 33870
// result := true ;
33862: LD_ADDR_VAR 0 6
33866: PUSH
33867: LD_INT 1
33869: ST_TO_ADDR
// end ;
33870: LD_VAR 0 6
33874: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
33875: LD_INT 0
33877: PPUSH
33878: PPUSH
33879: PPUSH
33880: PPUSH
33881: PPUSH
33882: PPUSH
33883: PPUSH
33884: PPUSH
33885: PPUSH
33886: PPUSH
33887: PPUSH
33888: PPUSH
33889: PPUSH
33890: PPUSH
33891: PPUSH
33892: PPUSH
33893: PPUSH
33894: PPUSH
33895: PPUSH
33896: PPUSH
33897: PPUSH
33898: PPUSH
33899: PPUSH
33900: PPUSH
33901: PPUSH
33902: PPUSH
33903: PPUSH
33904: PPUSH
33905: PPUSH
33906: PPUSH
33907: PPUSH
33908: PPUSH
33909: PPUSH
33910: PPUSH
33911: PPUSH
33912: PPUSH
33913: PPUSH
33914: PPUSH
33915: PPUSH
33916: PPUSH
33917: PPUSH
33918: PPUSH
33919: PPUSH
33920: PPUSH
33921: PPUSH
33922: PPUSH
33923: PPUSH
33924: PPUSH
33925: PPUSH
33926: PPUSH
33927: PPUSH
33928: PPUSH
33929: PPUSH
33930: PPUSH
33931: PPUSH
33932: PPUSH
33933: PPUSH
33934: PPUSH
// result = [ ] ;
33935: LD_ADDR_VAR 0 7
33939: PUSH
33940: EMPTY
33941: ST_TO_ADDR
// temp_list = [ ] ;
33942: LD_ADDR_VAR 0 9
33946: PUSH
33947: EMPTY
33948: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33949: LD_VAR 0 4
33953: PUSH
33954: LD_INT 0
33956: PUSH
33957: LD_INT 1
33959: PUSH
33960: LD_INT 2
33962: PUSH
33963: LD_INT 3
33965: PUSH
33966: LD_INT 4
33968: PUSH
33969: LD_INT 5
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: IN
33980: NOT
33981: PUSH
33982: LD_VAR 0 1
33986: PUSH
33987: LD_INT 0
33989: PUSH
33990: LD_INT 1
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: IN
33997: PUSH
33998: LD_VAR 0 5
34002: PUSH
34003: LD_INT 1
34005: PUSH
34006: LD_INT 2
34008: PUSH
34009: LD_INT 3
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: LIST
34016: IN
34017: NOT
34018: AND
34019: OR
34020: IFFALSE 34024
// exit ;
34022: GO 52415
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34024: LD_VAR 0 1
34028: PUSH
34029: LD_INT 6
34031: PUSH
34032: LD_INT 7
34034: PUSH
34035: LD_INT 8
34037: PUSH
34038: LD_INT 13
34040: PUSH
34041: LD_INT 12
34043: PUSH
34044: LD_INT 15
34046: PUSH
34047: LD_INT 11
34049: PUSH
34050: LD_INT 14
34052: PUSH
34053: LD_INT 10
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: IN
34067: IFFALSE 34077
// btype = b_lab ;
34069: LD_ADDR_VAR 0 1
34073: PUSH
34074: LD_INT 6
34076: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34077: LD_VAR 0 6
34081: PUSH
34082: LD_INT 0
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: LD_INT 2
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: LIST
34095: IN
34096: NOT
34097: PUSH
34098: LD_VAR 0 1
34102: PUSH
34103: LD_INT 0
34105: PUSH
34106: LD_INT 1
34108: PUSH
34109: LD_INT 2
34111: PUSH
34112: LD_INT 3
34114: PUSH
34115: LD_INT 6
34117: PUSH
34118: LD_INT 36
34120: PUSH
34121: LD_INT 4
34123: PUSH
34124: LD_INT 5
34126: PUSH
34127: LD_INT 31
34129: PUSH
34130: LD_INT 32
34132: PUSH
34133: LD_INT 33
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: IN
34149: NOT
34150: PUSH
34151: LD_VAR 0 6
34155: PUSH
34156: LD_INT 1
34158: EQUAL
34159: AND
34160: OR
34161: PUSH
34162: LD_VAR 0 1
34166: PUSH
34167: LD_INT 2
34169: PUSH
34170: LD_INT 3
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: IN
34177: NOT
34178: PUSH
34179: LD_VAR 0 6
34183: PUSH
34184: LD_INT 2
34186: EQUAL
34187: AND
34188: OR
34189: IFFALSE 34199
// mode = 0 ;
34191: LD_ADDR_VAR 0 6
34195: PUSH
34196: LD_INT 0
34198: ST_TO_ADDR
// case mode of 0 :
34199: LD_VAR 0 6
34203: PUSH
34204: LD_INT 0
34206: DOUBLE
34207: EQUAL
34208: IFTRUE 34212
34210: GO 45665
34212: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34213: LD_ADDR_VAR 0 11
34217: PUSH
34218: LD_INT 0
34220: PUSH
34221: LD_INT 0
34223: PUSH
34224: EMPTY
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 0
34230: PUSH
34231: LD_INT 1
34233: NEG
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 1
34241: PUSH
34242: LD_INT 0
34244: PUSH
34245: EMPTY
34246: LIST
34247: LIST
34248: PUSH
34249: LD_INT 1
34251: PUSH
34252: LD_INT 1
34254: PUSH
34255: EMPTY
34256: LIST
34257: LIST
34258: PUSH
34259: LD_INT 0
34261: PUSH
34262: LD_INT 1
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 1
34271: NEG
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: PUSH
34280: LD_INT 1
34282: NEG
34283: PUSH
34284: LD_INT 1
34286: NEG
34287: PUSH
34288: EMPTY
34289: LIST
34290: LIST
34291: PUSH
34292: LD_INT 1
34294: NEG
34295: PUSH
34296: LD_INT 2
34298: NEG
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 0
34306: PUSH
34307: LD_INT 2
34309: NEG
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 1
34317: PUSH
34318: LD_INT 1
34320: NEG
34321: PUSH
34322: EMPTY
34323: LIST
34324: LIST
34325: PUSH
34326: LD_INT 1
34328: PUSH
34329: LD_INT 2
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PUSH
34336: LD_INT 0
34338: PUSH
34339: LD_INT 2
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 1
34348: NEG
34349: PUSH
34350: LD_INT 1
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 1
34359: PUSH
34360: LD_INT 3
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 0
34369: PUSH
34370: LD_INT 3
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: PUSH
34377: LD_INT 1
34379: NEG
34380: PUSH
34381: LD_INT 2
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34406: LD_ADDR_VAR 0 12
34410: PUSH
34411: LD_INT 0
34413: PUSH
34414: LD_INT 0
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 0
34423: PUSH
34424: LD_INT 1
34426: NEG
34427: PUSH
34428: EMPTY
34429: LIST
34430: LIST
34431: PUSH
34432: LD_INT 1
34434: PUSH
34435: LD_INT 0
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 1
34444: PUSH
34445: LD_INT 1
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 0
34454: PUSH
34455: LD_INT 1
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 1
34464: NEG
34465: PUSH
34466: LD_INT 0
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 1
34475: NEG
34476: PUSH
34477: LD_INT 1
34479: NEG
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 1
34487: PUSH
34488: LD_INT 1
34490: NEG
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 2
34498: PUSH
34499: LD_INT 0
34501: PUSH
34502: EMPTY
34503: LIST
34504: LIST
34505: PUSH
34506: LD_INT 2
34508: PUSH
34509: LD_INT 1
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 1
34518: NEG
34519: PUSH
34520: LD_INT 1
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: PUSH
34527: LD_INT 2
34529: NEG
34530: PUSH
34531: LD_INT 0
34533: PUSH
34534: EMPTY
34535: LIST
34536: LIST
34537: PUSH
34538: LD_INT 2
34540: NEG
34541: PUSH
34542: LD_INT 1
34544: NEG
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: PUSH
34550: LD_INT 2
34552: NEG
34553: PUSH
34554: LD_INT 1
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: LD_INT 3
34563: NEG
34564: PUSH
34565: LD_INT 0
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 3
34574: NEG
34575: PUSH
34576: LD_INT 1
34578: NEG
34579: PUSH
34580: EMPTY
34581: LIST
34582: LIST
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: LIST
34588: LIST
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34602: LD_ADDR_VAR 0 13
34606: PUSH
34607: LD_INT 0
34609: PUSH
34610: LD_INT 0
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 0
34619: PUSH
34620: LD_INT 1
34622: NEG
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 1
34630: PUSH
34631: LD_INT 0
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 1
34640: PUSH
34641: LD_INT 1
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 0
34650: PUSH
34651: LD_INT 1
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 1
34660: NEG
34661: PUSH
34662: LD_INT 0
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 1
34671: NEG
34672: PUSH
34673: LD_INT 1
34675: NEG
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: PUSH
34681: LD_INT 1
34683: NEG
34684: PUSH
34685: LD_INT 2
34687: NEG
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 2
34695: PUSH
34696: LD_INT 1
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 2
34705: PUSH
34706: LD_INT 2
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 1
34715: PUSH
34716: LD_INT 2
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 2
34725: NEG
34726: PUSH
34727: LD_INT 1
34729: NEG
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 2
34737: NEG
34738: PUSH
34739: LD_INT 2
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 2
34749: NEG
34750: PUSH
34751: LD_INT 3
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 3
34761: NEG
34762: PUSH
34763: LD_INT 2
34765: NEG
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 3
34773: NEG
34774: PUSH
34775: LD_INT 3
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34801: LD_ADDR_VAR 0 14
34805: PUSH
34806: LD_INT 0
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 0
34818: PUSH
34819: LD_INT 1
34821: NEG
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 1
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: LD_INT 1
34839: PUSH
34840: LD_INT 1
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 0
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 1
34859: NEG
34860: PUSH
34861: LD_INT 0
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: LD_INT 1
34870: NEG
34871: PUSH
34872: LD_INT 1
34874: NEG
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: PUSH
34880: LD_INT 1
34882: NEG
34883: PUSH
34884: LD_INT 2
34886: NEG
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: LD_INT 2
34897: NEG
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 1
34905: PUSH
34906: LD_INT 1
34908: NEG
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 1
34916: PUSH
34917: LD_INT 2
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 0
34926: PUSH
34927: LD_INT 2
34929: PUSH
34930: EMPTY
34931: LIST
34932: LIST
34933: PUSH
34934: LD_INT 1
34936: NEG
34937: PUSH
34938: LD_INT 1
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 1
34947: NEG
34948: PUSH
34949: LD_INT 3
34951: NEG
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: LD_INT 3
34962: NEG
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 1
34970: PUSH
34971: LD_INT 2
34973: NEG
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34997: LD_ADDR_VAR 0 15
35001: PUSH
35002: LD_INT 0
35004: PUSH
35005: LD_INT 0
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 0
35014: PUSH
35015: LD_INT 1
35017: NEG
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 1
35025: PUSH
35026: LD_INT 0
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: LD_INT 1
35035: PUSH
35036: LD_INT 1
35038: PUSH
35039: EMPTY
35040: LIST
35041: LIST
35042: PUSH
35043: LD_INT 0
35045: PUSH
35046: LD_INT 1
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PUSH
35053: LD_INT 1
35055: NEG
35056: PUSH
35057: LD_INT 0
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 1
35066: NEG
35067: PUSH
35068: LD_INT 1
35070: NEG
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: LD_INT 1
35078: PUSH
35079: LD_INT 1
35081: NEG
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 2
35089: PUSH
35090: LD_INT 0
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 2
35099: PUSH
35100: LD_INT 1
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 1
35109: NEG
35110: PUSH
35111: LD_INT 1
35113: PUSH
35114: EMPTY
35115: LIST
35116: LIST
35117: PUSH
35118: LD_INT 2
35120: NEG
35121: PUSH
35122: LD_INT 0
35124: PUSH
35125: EMPTY
35126: LIST
35127: LIST
35128: PUSH
35129: LD_INT 2
35131: NEG
35132: PUSH
35133: LD_INT 1
35135: NEG
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 2
35143: PUSH
35144: LD_INT 1
35146: NEG
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 3
35154: PUSH
35155: LD_INT 0
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 3
35164: PUSH
35165: LD_INT 1
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: EMPTY
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35190: LD_ADDR_VAR 0 16
35194: PUSH
35195: LD_INT 0
35197: PUSH
35198: LD_INT 0
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 0
35207: PUSH
35208: LD_INT 1
35210: NEG
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 1
35218: PUSH
35219: LD_INT 0
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: LD_INT 1
35228: PUSH
35229: LD_INT 1
35231: PUSH
35232: EMPTY
35233: LIST
35234: LIST
35235: PUSH
35236: LD_INT 0
35238: PUSH
35239: LD_INT 1
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PUSH
35246: LD_INT 1
35248: NEG
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 1
35259: NEG
35260: PUSH
35261: LD_INT 1
35263: NEG
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 1
35271: NEG
35272: PUSH
35273: LD_INT 2
35275: NEG
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: PUSH
35281: LD_INT 2
35283: PUSH
35284: LD_INT 1
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 2
35293: PUSH
35294: LD_INT 2
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: LD_INT 2
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 2
35313: NEG
35314: PUSH
35315: LD_INT 1
35317: NEG
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 2
35325: NEG
35326: PUSH
35327: LD_INT 2
35329: NEG
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: LD_INT 3
35337: PUSH
35338: LD_INT 2
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 3
35347: PUSH
35348: LD_INT 3
35350: PUSH
35351: EMPTY
35352: LIST
35353: LIST
35354: PUSH
35355: LD_INT 2
35357: PUSH
35358: LD_INT 3
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35383: LD_ADDR_VAR 0 17
35387: PUSH
35388: LD_INT 0
35390: PUSH
35391: LD_INT 0
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: LD_INT 1
35403: NEG
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 1
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 1
35421: PUSH
35422: LD_INT 1
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: LD_INT 1
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 1
35441: NEG
35442: PUSH
35443: LD_INT 0
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 1
35452: NEG
35453: PUSH
35454: LD_INT 1
35456: NEG
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 1
35464: NEG
35465: PUSH
35466: LD_INT 2
35468: NEG
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 0
35476: PUSH
35477: LD_INT 2
35479: NEG
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 1
35487: PUSH
35488: LD_INT 1
35490: NEG
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 2
35498: PUSH
35499: LD_INT 0
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 2
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: LD_INT 2
35518: PUSH
35519: LD_INT 2
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 1
35528: PUSH
35529: LD_INT 2
35531: PUSH
35532: EMPTY
35533: LIST
35534: LIST
35535: PUSH
35536: LD_INT 0
35538: PUSH
35539: LD_INT 2
35541: PUSH
35542: EMPTY
35543: LIST
35544: LIST
35545: PUSH
35546: LD_INT 1
35548: NEG
35549: PUSH
35550: LD_INT 1
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 2
35559: NEG
35560: PUSH
35561: LD_INT 0
35563: PUSH
35564: EMPTY
35565: LIST
35566: LIST
35567: PUSH
35568: LD_INT 2
35570: NEG
35571: PUSH
35572: LD_INT 1
35574: NEG
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 2
35582: NEG
35583: PUSH
35584: LD_INT 2
35586: NEG
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35613: LD_ADDR_VAR 0 18
35617: PUSH
35618: LD_INT 0
35620: PUSH
35621: LD_INT 0
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 0
35630: PUSH
35631: LD_INT 1
35633: NEG
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 1
35641: PUSH
35642: LD_INT 0
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 1
35651: PUSH
35652: LD_INT 1
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: LD_INT 1
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 1
35671: NEG
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 1
35682: NEG
35683: PUSH
35684: LD_INT 1
35686: NEG
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 1
35694: NEG
35695: PUSH
35696: LD_INT 2
35698: NEG
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 0
35706: PUSH
35707: LD_INT 2
35709: NEG
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 1
35717: PUSH
35718: LD_INT 1
35720: NEG
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 2
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 2
35738: PUSH
35739: LD_INT 1
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 2
35748: PUSH
35749: LD_INT 2
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 1
35758: PUSH
35759: LD_INT 2
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 0
35768: PUSH
35769: LD_INT 2
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 1
35778: NEG
35779: PUSH
35780: LD_INT 1
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 2
35789: NEG
35790: PUSH
35791: LD_INT 0
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 2
35800: NEG
35801: PUSH
35802: LD_INT 1
35804: NEG
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 2
35812: NEG
35813: PUSH
35814: LD_INT 2
35816: NEG
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35843: LD_ADDR_VAR 0 19
35847: PUSH
35848: LD_INT 0
35850: PUSH
35851: LD_INT 0
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 0
35860: PUSH
35861: LD_INT 1
35863: NEG
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 1
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 1
35881: PUSH
35882: LD_INT 1
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 0
35891: PUSH
35892: LD_INT 1
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 1
35901: NEG
35902: PUSH
35903: LD_INT 0
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 1
35912: NEG
35913: PUSH
35914: LD_INT 1
35916: NEG
35917: PUSH
35918: EMPTY
35919: LIST
35920: LIST
35921: PUSH
35922: LD_INT 1
35924: NEG
35925: PUSH
35926: LD_INT 2
35928: NEG
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: PUSH
35934: LD_INT 0
35936: PUSH
35937: LD_INT 2
35939: NEG
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 1
35947: PUSH
35948: LD_INT 1
35950: NEG
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: LD_INT 2
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: LD_INT 2
35968: PUSH
35969: LD_INT 1
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 2
35978: PUSH
35979: LD_INT 2
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 1
35988: PUSH
35989: LD_INT 2
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 0
35998: PUSH
35999: LD_INT 2
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 1
36008: NEG
36009: PUSH
36010: LD_INT 1
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 2
36019: NEG
36020: PUSH
36021: LD_INT 0
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 2
36030: NEG
36031: PUSH
36032: LD_INT 1
36034: NEG
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 2
36042: NEG
36043: PUSH
36044: LD_INT 2
36046: NEG
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36073: LD_ADDR_VAR 0 20
36077: PUSH
36078: LD_INT 0
36080: PUSH
36081: LD_INT 0
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 0
36090: PUSH
36091: LD_INT 1
36093: NEG
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: PUSH
36099: LD_INT 1
36101: PUSH
36102: LD_INT 0
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 1
36111: PUSH
36112: LD_INT 1
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PUSH
36119: LD_INT 0
36121: PUSH
36122: LD_INT 1
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 1
36131: NEG
36132: PUSH
36133: LD_INT 0
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 1
36142: NEG
36143: PUSH
36144: LD_INT 1
36146: NEG
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 1
36154: NEG
36155: PUSH
36156: LD_INT 2
36158: NEG
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 0
36166: PUSH
36167: LD_INT 2
36169: NEG
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: PUSH
36175: LD_INT 1
36177: PUSH
36178: LD_INT 1
36180: NEG
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 2
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 2
36198: PUSH
36199: LD_INT 1
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PUSH
36206: LD_INT 2
36208: PUSH
36209: LD_INT 2
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 1
36218: PUSH
36219: LD_INT 2
36221: PUSH
36222: EMPTY
36223: LIST
36224: LIST
36225: PUSH
36226: LD_INT 0
36228: PUSH
36229: LD_INT 2
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 1
36238: NEG
36239: PUSH
36240: LD_INT 1
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 2
36249: NEG
36250: PUSH
36251: LD_INT 0
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 2
36260: NEG
36261: PUSH
36262: LD_INT 1
36264: NEG
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 2
36272: NEG
36273: PUSH
36274: LD_INT 2
36276: NEG
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: LIST
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36303: LD_ADDR_VAR 0 21
36307: PUSH
36308: LD_INT 0
36310: PUSH
36311: LD_INT 0
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 0
36320: PUSH
36321: LD_INT 1
36323: NEG
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 1
36331: PUSH
36332: LD_INT 0
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 1
36341: PUSH
36342: LD_INT 1
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: LD_INT 0
36351: PUSH
36352: LD_INT 1
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 1
36361: NEG
36362: PUSH
36363: LD_INT 0
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 1
36372: NEG
36373: PUSH
36374: LD_INT 1
36376: NEG
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 1
36384: NEG
36385: PUSH
36386: LD_INT 2
36388: NEG
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: LD_INT 0
36396: PUSH
36397: LD_INT 2
36399: NEG
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: PUSH
36405: LD_INT 1
36407: PUSH
36408: LD_INT 1
36410: NEG
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: PUSH
36416: LD_INT 2
36418: PUSH
36419: LD_INT 0
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PUSH
36426: LD_INT 2
36428: PUSH
36429: LD_INT 1
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 2
36438: PUSH
36439: LD_INT 2
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 1
36448: PUSH
36449: LD_INT 2
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 0
36458: PUSH
36459: LD_INT 2
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 1
36468: NEG
36469: PUSH
36470: LD_INT 1
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: PUSH
36477: LD_INT 2
36479: NEG
36480: PUSH
36481: LD_INT 0
36483: PUSH
36484: EMPTY
36485: LIST
36486: LIST
36487: PUSH
36488: LD_INT 2
36490: NEG
36491: PUSH
36492: LD_INT 1
36494: NEG
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 2
36502: NEG
36503: PUSH
36504: LD_INT 2
36506: NEG
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36533: LD_ADDR_VAR 0 22
36537: PUSH
36538: LD_INT 0
36540: PUSH
36541: LD_INT 0
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 0
36550: PUSH
36551: LD_INT 1
36553: NEG
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 1
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 1
36571: PUSH
36572: LD_INT 1
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: LD_INT 0
36581: PUSH
36582: LD_INT 1
36584: PUSH
36585: EMPTY
36586: LIST
36587: LIST
36588: PUSH
36589: LD_INT 1
36591: NEG
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 1
36602: NEG
36603: PUSH
36604: LD_INT 1
36606: NEG
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 1
36614: NEG
36615: PUSH
36616: LD_INT 2
36618: NEG
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 0
36626: PUSH
36627: LD_INT 2
36629: NEG
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 1
36637: PUSH
36638: LD_INT 1
36640: NEG
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 2
36648: PUSH
36649: LD_INT 0
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 2
36658: PUSH
36659: LD_INT 1
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 2
36668: PUSH
36669: LD_INT 2
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 1
36678: PUSH
36679: LD_INT 2
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 0
36688: PUSH
36689: LD_INT 2
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: PUSH
36696: LD_INT 1
36698: NEG
36699: PUSH
36700: LD_INT 1
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: PUSH
36707: LD_INT 2
36709: NEG
36710: PUSH
36711: LD_INT 0
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: PUSH
36718: LD_INT 2
36720: NEG
36721: PUSH
36722: LD_INT 1
36724: NEG
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 2
36732: NEG
36733: PUSH
36734: LD_INT 2
36736: NEG
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: LIST
36752: LIST
36753: LIST
36754: LIST
36755: LIST
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36763: LD_ADDR_VAR 0 23
36767: PUSH
36768: LD_INT 0
36770: PUSH
36771: LD_INT 0
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 0
36780: PUSH
36781: LD_INT 1
36783: NEG
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 1
36791: PUSH
36792: LD_INT 0
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 1
36801: PUSH
36802: LD_INT 1
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 0
36811: PUSH
36812: LD_INT 1
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 1
36821: NEG
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 1
36832: NEG
36833: PUSH
36834: LD_INT 1
36836: NEG
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 1
36844: NEG
36845: PUSH
36846: LD_INT 2
36848: NEG
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 0
36856: PUSH
36857: LD_INT 2
36859: NEG
36860: PUSH
36861: EMPTY
36862: LIST
36863: LIST
36864: PUSH
36865: LD_INT 1
36867: PUSH
36868: LD_INT 1
36870: NEG
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 2
36878: PUSH
36879: LD_INT 0
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 2
36888: PUSH
36889: LD_INT 1
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 2
36898: PUSH
36899: LD_INT 2
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 1
36908: PUSH
36909: LD_INT 2
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 0
36918: PUSH
36919: LD_INT 2
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 1
36928: NEG
36929: PUSH
36930: LD_INT 1
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: LD_INT 2
36939: NEG
36940: PUSH
36941: LD_INT 0
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 2
36950: NEG
36951: PUSH
36952: LD_INT 1
36954: NEG
36955: PUSH
36956: EMPTY
36957: LIST
36958: LIST
36959: PUSH
36960: LD_INT 2
36962: NEG
36963: PUSH
36964: LD_INT 2
36966: NEG
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 2
36974: NEG
36975: PUSH
36976: LD_INT 3
36978: NEG
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: LD_INT 1
36986: NEG
36987: PUSH
36988: LD_INT 3
36990: NEG
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 1
36998: PUSH
36999: LD_INT 2
37001: NEG
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 2
37009: PUSH
37010: LD_INT 1
37012: NEG
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37043: LD_ADDR_VAR 0 24
37047: PUSH
37048: LD_INT 0
37050: PUSH
37051: LD_INT 0
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 0
37060: PUSH
37061: LD_INT 1
37063: NEG
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 1
37071: PUSH
37072: LD_INT 0
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 1
37081: PUSH
37082: LD_INT 1
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 0
37091: PUSH
37092: LD_INT 1
37094: PUSH
37095: EMPTY
37096: LIST
37097: LIST
37098: PUSH
37099: LD_INT 1
37101: NEG
37102: PUSH
37103: LD_INT 0
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 1
37112: NEG
37113: PUSH
37114: LD_INT 1
37116: NEG
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 1
37124: NEG
37125: PUSH
37126: LD_INT 2
37128: NEG
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 0
37136: PUSH
37137: LD_INT 2
37139: NEG
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 1
37147: PUSH
37148: LD_INT 1
37150: NEG
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 2
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 2
37168: PUSH
37169: LD_INT 1
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 2
37178: PUSH
37179: LD_INT 2
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 1
37188: PUSH
37189: LD_INT 2
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 0
37198: PUSH
37199: LD_INT 2
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 1
37208: NEG
37209: PUSH
37210: LD_INT 1
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 2
37219: NEG
37220: PUSH
37221: LD_INT 0
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: PUSH
37228: LD_INT 2
37230: NEG
37231: PUSH
37232: LD_INT 1
37234: NEG
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 2
37242: NEG
37243: PUSH
37244: LD_INT 2
37246: NEG
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: PUSH
37252: LD_INT 1
37254: PUSH
37255: LD_INT 2
37257: NEG
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 2
37265: PUSH
37266: LD_INT 1
37268: NEG
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: LD_INT 3
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 3
37286: PUSH
37287: LD_INT 2
37289: PUSH
37290: EMPTY
37291: LIST
37292: LIST
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37319: LD_ADDR_VAR 0 25
37323: PUSH
37324: LD_INT 0
37326: PUSH
37327: LD_INT 0
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 0
37336: PUSH
37337: LD_INT 1
37339: NEG
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 1
37347: PUSH
37348: LD_INT 0
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 1
37357: PUSH
37358: LD_INT 1
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: LD_INT 1
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 1
37377: NEG
37378: PUSH
37379: LD_INT 0
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 1
37388: NEG
37389: PUSH
37390: LD_INT 1
37392: NEG
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 1
37400: NEG
37401: PUSH
37402: LD_INT 2
37404: NEG
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 0
37412: PUSH
37413: LD_INT 2
37415: NEG
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 1
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 2
37434: PUSH
37435: LD_INT 0
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 2
37444: PUSH
37445: LD_INT 1
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 2
37454: PUSH
37455: LD_INT 2
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 1
37464: PUSH
37465: LD_INT 2
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 0
37474: PUSH
37475: LD_INT 2
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 1
37484: NEG
37485: PUSH
37486: LD_INT 1
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 2
37495: NEG
37496: PUSH
37497: LD_INT 0
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 2
37506: NEG
37507: PUSH
37508: LD_INT 1
37510: NEG
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: LD_INT 2
37518: NEG
37519: PUSH
37520: LD_INT 2
37522: NEG
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 3
37530: PUSH
37531: LD_INT 1
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 3
37540: PUSH
37541: LD_INT 2
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: PUSH
37548: LD_INT 2
37550: PUSH
37551: LD_INT 3
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: PUSH
37558: LD_INT 1
37560: PUSH
37561: LD_INT 3
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: LIST
37574: LIST
37575: LIST
37576: LIST
37577: LIST
37578: LIST
37579: LIST
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37593: LD_ADDR_VAR 0 26
37597: PUSH
37598: LD_INT 0
37600: PUSH
37601: LD_INT 0
37603: PUSH
37604: EMPTY
37605: LIST
37606: LIST
37607: PUSH
37608: LD_INT 0
37610: PUSH
37611: LD_INT 1
37613: NEG
37614: PUSH
37615: EMPTY
37616: LIST
37617: LIST
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: LD_INT 1
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 0
37641: PUSH
37642: LD_INT 1
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 1
37651: NEG
37652: PUSH
37653: LD_INT 0
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 1
37662: NEG
37663: PUSH
37664: LD_INT 1
37666: NEG
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 1
37674: NEG
37675: PUSH
37676: LD_INT 2
37678: NEG
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 0
37686: PUSH
37687: LD_INT 2
37689: NEG
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 1
37697: PUSH
37698: LD_INT 1
37700: NEG
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 2
37708: PUSH
37709: LD_INT 0
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 2
37718: PUSH
37719: LD_INT 1
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 2
37728: PUSH
37729: LD_INT 2
37731: PUSH
37732: EMPTY
37733: LIST
37734: LIST
37735: PUSH
37736: LD_INT 1
37738: PUSH
37739: LD_INT 2
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 0
37748: PUSH
37749: LD_INT 2
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 1
37758: NEG
37759: PUSH
37760: LD_INT 1
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 2
37769: NEG
37770: PUSH
37771: LD_INT 0
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PUSH
37778: LD_INT 2
37780: NEG
37781: PUSH
37782: LD_INT 1
37784: NEG
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 2
37792: NEG
37793: PUSH
37794: LD_INT 2
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 2
37804: PUSH
37805: LD_INT 3
37807: PUSH
37808: EMPTY
37809: LIST
37810: LIST
37811: PUSH
37812: LD_INT 1
37814: PUSH
37815: LD_INT 3
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 1
37824: NEG
37825: PUSH
37826: LD_INT 2
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 2
37835: NEG
37836: PUSH
37837: LD_INT 1
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37869: LD_ADDR_VAR 0 27
37873: PUSH
37874: LD_INT 0
37876: PUSH
37877: LD_INT 0
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 0
37886: PUSH
37887: LD_INT 1
37889: NEG
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 1
37897: PUSH
37898: LD_INT 0
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 1
37907: PUSH
37908: LD_INT 1
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 0
37917: PUSH
37918: LD_INT 1
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 1
37927: NEG
37928: PUSH
37929: LD_INT 0
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: LD_INT 1
37942: NEG
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 1
37950: NEG
37951: PUSH
37952: LD_INT 2
37954: NEG
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 0
37962: PUSH
37963: LD_INT 2
37965: NEG
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 1
37973: PUSH
37974: LD_INT 1
37976: NEG
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 2
37984: PUSH
37985: LD_INT 0
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 2
37994: PUSH
37995: LD_INT 1
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 2
38004: PUSH
38005: LD_INT 2
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 1
38014: PUSH
38015: LD_INT 2
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: LD_INT 2
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 1
38034: NEG
38035: PUSH
38036: LD_INT 1
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 2
38045: NEG
38046: PUSH
38047: LD_INT 0
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 2
38056: NEG
38057: PUSH
38058: LD_INT 1
38060: NEG
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 2
38068: NEG
38069: PUSH
38070: LD_INT 2
38072: NEG
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 1
38080: NEG
38081: PUSH
38082: LD_INT 2
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 2
38091: NEG
38092: PUSH
38093: LD_INT 1
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 3
38102: NEG
38103: PUSH
38104: LD_INT 1
38106: NEG
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 3
38114: NEG
38115: PUSH
38116: LD_INT 2
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38149: LD_ADDR_VAR 0 28
38153: PUSH
38154: LD_INT 0
38156: PUSH
38157: LD_INT 0
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 0
38166: PUSH
38167: LD_INT 1
38169: NEG
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 1
38177: PUSH
38178: LD_INT 0
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 1
38187: PUSH
38188: LD_INT 1
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 0
38197: PUSH
38198: LD_INT 1
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 1
38207: NEG
38208: PUSH
38209: LD_INT 0
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 1
38218: NEG
38219: PUSH
38220: LD_INT 1
38222: NEG
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 1
38230: NEG
38231: PUSH
38232: LD_INT 2
38234: NEG
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 0
38242: PUSH
38243: LD_INT 2
38245: NEG
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 1
38253: PUSH
38254: LD_INT 1
38256: NEG
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 2
38264: PUSH
38265: LD_INT 0
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 2
38274: PUSH
38275: LD_INT 1
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 2
38284: PUSH
38285: LD_INT 2
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 1
38294: PUSH
38295: LD_INT 2
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 0
38304: PUSH
38305: LD_INT 2
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 1
38314: NEG
38315: PUSH
38316: LD_INT 1
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 2
38325: NEG
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 2
38336: NEG
38337: PUSH
38338: LD_INT 1
38340: NEG
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 2
38348: NEG
38349: PUSH
38350: LD_INT 2
38352: NEG
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 2
38360: NEG
38361: PUSH
38362: LD_INT 3
38364: NEG
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 1
38372: NEG
38373: PUSH
38374: LD_INT 3
38376: NEG
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 3
38384: NEG
38385: PUSH
38386: LD_INT 1
38388: NEG
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 3
38396: NEG
38397: PUSH
38398: LD_INT 2
38400: NEG
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38431: LD_ADDR_VAR 0 29
38435: PUSH
38436: LD_INT 0
38438: PUSH
38439: LD_INT 0
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 0
38448: PUSH
38449: LD_INT 1
38451: NEG
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: LD_INT 0
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 1
38469: PUSH
38470: LD_INT 1
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: LD_INT 1
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 1
38489: NEG
38490: PUSH
38491: LD_INT 0
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 1
38500: NEG
38501: PUSH
38502: LD_INT 1
38504: NEG
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 1
38512: NEG
38513: PUSH
38514: LD_INT 2
38516: NEG
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 0
38524: PUSH
38525: LD_INT 2
38527: NEG
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 1
38535: PUSH
38536: LD_INT 1
38538: NEG
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 2
38546: PUSH
38547: LD_INT 0
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 2
38556: PUSH
38557: LD_INT 1
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 1
38566: PUSH
38567: LD_INT 2
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 0
38576: PUSH
38577: LD_INT 2
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 1
38586: NEG
38587: PUSH
38588: LD_INT 1
38590: PUSH
38591: EMPTY
38592: LIST
38593: LIST
38594: PUSH
38595: LD_INT 2
38597: NEG
38598: PUSH
38599: LD_INT 1
38601: NEG
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 2
38609: NEG
38610: PUSH
38611: LD_INT 2
38613: NEG
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: LD_INT 2
38621: NEG
38622: PUSH
38623: LD_INT 3
38625: NEG
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PUSH
38631: LD_INT 2
38633: PUSH
38634: LD_INT 1
38636: NEG
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 3
38644: PUSH
38645: LD_INT 1
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 1
38654: PUSH
38655: LD_INT 3
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 1
38664: NEG
38665: PUSH
38666: LD_INT 2
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 3
38675: NEG
38676: PUSH
38677: LD_INT 2
38679: NEG
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38710: LD_ADDR_VAR 0 30
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: LD_INT 0
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 0
38727: PUSH
38728: LD_INT 1
38730: NEG
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: PUSH
38736: LD_INT 1
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: LD_INT 1
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 0
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 1
38768: NEG
38769: PUSH
38770: LD_INT 0
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 1
38779: NEG
38780: PUSH
38781: LD_INT 1
38783: NEG
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 1
38791: NEG
38792: PUSH
38793: LD_INT 2
38795: NEG
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 0
38803: PUSH
38804: LD_INT 2
38806: NEG
38807: PUSH
38808: EMPTY
38809: LIST
38810: LIST
38811: PUSH
38812: LD_INT 1
38814: PUSH
38815: LD_INT 1
38817: NEG
38818: PUSH
38819: EMPTY
38820: LIST
38821: LIST
38822: PUSH
38823: LD_INT 2
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 2
38835: PUSH
38836: LD_INT 1
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 2
38845: PUSH
38846: LD_INT 2
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 1
38855: PUSH
38856: LD_INT 2
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 1
38865: NEG
38866: PUSH
38867: LD_INT 1
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 2
38876: NEG
38877: PUSH
38878: LD_INT 0
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 2
38887: NEG
38888: PUSH
38889: LD_INT 1
38891: NEG
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 1
38899: NEG
38900: PUSH
38901: LD_INT 3
38903: NEG
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 1
38911: PUSH
38912: LD_INT 2
38914: NEG
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: PUSH
38920: LD_INT 3
38922: PUSH
38923: LD_INT 2
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 2
38932: PUSH
38933: LD_INT 3
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 2
38942: NEG
38943: PUSH
38944: LD_INT 1
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 3
38953: NEG
38954: PUSH
38955: LD_INT 1
38957: NEG
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38988: LD_ADDR_VAR 0 31
38992: PUSH
38993: LD_INT 0
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: LD_INT 1
39008: NEG
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 1
39016: PUSH
39017: LD_INT 0
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 1
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: LD_INT 1
39039: PUSH
39040: EMPTY
39041: LIST
39042: LIST
39043: PUSH
39044: LD_INT 1
39046: NEG
39047: PUSH
39048: LD_INT 0
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 1
39057: NEG
39058: PUSH
39059: LD_INT 1
39061: NEG
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 1
39069: NEG
39070: PUSH
39071: LD_INT 2
39073: NEG
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 1
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 2
39092: PUSH
39093: LD_INT 0
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: PUSH
39100: LD_INT 2
39102: PUSH
39103: LD_INT 1
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 2
39112: PUSH
39113: LD_INT 2
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: LD_INT 1
39122: PUSH
39123: LD_INT 2
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 0
39132: PUSH
39133: LD_INT 2
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 1
39142: NEG
39143: PUSH
39144: LD_INT 1
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 2
39153: NEG
39154: PUSH
39155: LD_INT 1
39157: NEG
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 2
39165: NEG
39166: PUSH
39167: LD_INT 2
39169: NEG
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 2
39177: NEG
39178: PUSH
39179: LD_INT 3
39181: NEG
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 2
39189: PUSH
39190: LD_INT 1
39192: NEG
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 3
39200: PUSH
39201: LD_INT 1
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 1
39210: PUSH
39211: LD_INT 3
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 1
39220: NEG
39221: PUSH
39222: LD_INT 2
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 3
39231: NEG
39232: PUSH
39233: LD_INT 2
39235: NEG
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39266: LD_ADDR_VAR 0 32
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: LD_INT 0
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 0
39283: PUSH
39284: LD_INT 1
39286: NEG
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 1
39294: PUSH
39295: LD_INT 0
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 1
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 0
39314: PUSH
39315: LD_INT 1
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: LD_INT 0
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 1
39335: NEG
39336: PUSH
39337: LD_INT 1
39339: NEG
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 1
39347: NEG
39348: PUSH
39349: LD_INT 2
39351: NEG
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 0
39359: PUSH
39360: LD_INT 2
39362: NEG
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 2
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 2
39391: PUSH
39392: LD_INT 2
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: LD_INT 2
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 0
39411: PUSH
39412: LD_INT 2
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 1
39421: NEG
39422: PUSH
39423: LD_INT 1
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 2
39432: NEG
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 2
39443: NEG
39444: PUSH
39445: LD_INT 1
39447: NEG
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 1
39455: NEG
39456: PUSH
39457: LD_INT 3
39459: NEG
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 1
39467: PUSH
39468: LD_INT 2
39470: NEG
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 3
39478: PUSH
39479: LD_INT 2
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 2
39488: PUSH
39489: LD_INT 3
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 2
39498: NEG
39499: PUSH
39500: LD_INT 1
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 3
39509: NEG
39510: PUSH
39511: LD_INT 1
39513: NEG
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39544: LD_ADDR_VAR 0 33
39548: PUSH
39549: LD_INT 0
39551: PUSH
39552: LD_INT 0
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 0
39561: PUSH
39562: LD_INT 1
39564: NEG
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 1
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: LD_INT 1
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 0
39592: PUSH
39593: LD_INT 1
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 1
39602: NEG
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 1
39613: NEG
39614: PUSH
39615: LD_INT 1
39617: NEG
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 1
39625: NEG
39626: PUSH
39627: LD_INT 2
39629: NEG
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 1
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 2
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 2
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 1
39668: PUSH
39669: LD_INT 2
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 0
39678: PUSH
39679: LD_INT 2
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: LD_INT 1
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 2
39699: NEG
39700: PUSH
39701: LD_INT 0
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 2
39710: NEG
39711: PUSH
39712: LD_INT 1
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 2
39722: NEG
39723: PUSH
39724: LD_INT 2
39726: NEG
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 2
39734: NEG
39735: PUSH
39736: LD_INT 3
39738: NEG
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 2
39746: PUSH
39747: LD_INT 1
39749: NEG
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 3
39757: PUSH
39758: LD_INT 1
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 1
39767: PUSH
39768: LD_INT 3
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 1
39777: NEG
39778: PUSH
39779: LD_INT 2
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 3
39788: NEG
39789: PUSH
39790: LD_INT 2
39792: NEG
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39823: LD_ADDR_VAR 0 34
39827: PUSH
39828: LD_INT 0
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: LD_INT 1
39843: NEG
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 1
39851: PUSH
39852: LD_INT 0
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 1
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 0
39871: PUSH
39872: LD_INT 1
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 1
39881: NEG
39882: PUSH
39883: LD_INT 0
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: NEG
39893: PUSH
39894: LD_INT 1
39896: NEG
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 1
39904: NEG
39905: PUSH
39906: LD_INT 2
39908: NEG
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: LD_INT 2
39919: NEG
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 1
39927: PUSH
39928: LD_INT 1
39930: NEG
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 2
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 2
39948: PUSH
39949: LD_INT 2
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 1
39958: PUSH
39959: LD_INT 2
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 1
39968: NEG
39969: PUSH
39970: LD_INT 1
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 2
39979: NEG
39980: PUSH
39981: LD_INT 0
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: PUSH
39988: LD_INT 2
39990: NEG
39991: PUSH
39992: LD_INT 1
39994: NEG
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 2
40002: NEG
40003: PUSH
40004: LD_INT 2
40006: NEG
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 1
40014: NEG
40015: PUSH
40016: LD_INT 3
40018: NEG
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 1
40026: PUSH
40027: LD_INT 2
40029: NEG
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 3
40037: PUSH
40038: LD_INT 2
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 2
40047: PUSH
40048: LD_INT 3
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 2
40057: NEG
40058: PUSH
40059: LD_INT 1
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 3
40068: NEG
40069: PUSH
40070: LD_INT 1
40072: NEG
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40103: LD_ADDR_VAR 0 35
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: LD_INT 0
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: LD_INT 1
40123: NEG
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 1
40131: PUSH
40132: LD_INT 0
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: PUSH
40142: LD_INT 1
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: LD_INT 1
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 1
40161: NEG
40162: PUSH
40163: LD_INT 0
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 1
40172: NEG
40173: PUSH
40174: LD_INT 1
40176: NEG
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 2
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 2
40194: NEG
40195: PUSH
40196: LD_INT 1
40198: NEG
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: LIST
40214: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40215: LD_ADDR_VAR 0 36
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: LD_INT 1
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: LD_INT 0
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: LD_INT 1
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: LD_INT 1
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 1
40273: NEG
40274: PUSH
40275: LD_INT 0
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: NEG
40285: PUSH
40286: LD_INT 1
40288: NEG
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 1
40296: NEG
40297: PUSH
40298: LD_INT 2
40300: NEG
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: LD_INT 2
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40327: LD_ADDR_VAR 0 37
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: LD_INT 0
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: LD_INT 1
40347: NEG
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: PUSH
40356: LD_INT 0
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: PUSH
40366: LD_INT 1
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 0
40375: PUSH
40376: LD_INT 1
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 1
40385: NEG
40386: PUSH
40387: LD_INT 0
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 1
40396: NEG
40397: PUSH
40398: LD_INT 1
40400: NEG
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 1
40408: PUSH
40409: LD_INT 1
40411: NEG
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 1
40419: NEG
40420: PUSH
40421: LD_INT 1
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40439: LD_ADDR_VAR 0 38
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: LD_INT 0
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 1
40477: PUSH
40478: LD_INT 1
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: LD_INT 1
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: LD_INT 0
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 2
40520: PUSH
40521: LD_INT 1
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 2
40530: NEG
40531: PUSH
40532: LD_INT 1
40534: NEG
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40551: LD_ADDR_VAR 0 39
40555: PUSH
40556: LD_INT 0
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 0
40568: PUSH
40569: LD_INT 1
40571: NEG
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: LD_INT 0
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 1
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: LD_INT 1
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 1
40609: NEG
40610: PUSH
40611: LD_INT 0
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 1
40620: NEG
40621: PUSH
40622: LD_INT 1
40624: NEG
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 1
40632: NEG
40633: PUSH
40634: LD_INT 2
40636: NEG
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: PUSH
40645: LD_INT 2
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40663: LD_ADDR_VAR 0 40
40667: PUSH
40668: LD_INT 0
40670: PUSH
40671: LD_INT 0
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: LD_INT 1
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 1
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 1
40701: PUSH
40702: LD_INT 1
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: LD_INT 1
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 1
40721: NEG
40722: PUSH
40723: LD_INT 0
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 1
40732: NEG
40733: PUSH
40734: LD_INT 1
40736: NEG
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 1
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 1
40755: NEG
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: LIST
40773: LIST
40774: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40775: LD_ADDR_VAR 0 41
40779: PUSH
40780: LD_INT 0
40782: PUSH
40783: LD_INT 0
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: LD_INT 1
40795: NEG
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 1
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 1
40813: PUSH
40814: LD_INT 1
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: PUSH
40821: LD_INT 0
40823: PUSH
40824: LD_INT 1
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: LD_INT 0
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 1
40844: NEG
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 1
40856: NEG
40857: PUSH
40858: LD_INT 2
40860: NEG
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 1
40868: PUSH
40869: LD_INT 1
40871: NEG
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: PUSH
40877: LD_INT 2
40879: PUSH
40880: LD_INT 0
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 2
40889: PUSH
40890: LD_INT 1
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 2
40899: PUSH
40900: LD_INT 2
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: PUSH
40907: LD_INT 1
40909: PUSH
40910: LD_INT 2
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 1
40919: NEG
40920: PUSH
40921: LD_INT 1
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 2
40930: NEG
40931: PUSH
40932: LD_INT 0
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: LD_INT 2
40941: NEG
40942: PUSH
40943: LD_INT 1
40945: NEG
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 2
40953: NEG
40954: PUSH
40955: LD_INT 2
40957: NEG
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 2
40965: NEG
40966: PUSH
40967: LD_INT 3
40969: NEG
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 2
40977: PUSH
40978: LD_INT 1
40980: NEG
40981: PUSH
40982: EMPTY
40983: LIST
40984: LIST
40985: PUSH
40986: LD_INT 3
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 3
40998: PUSH
40999: LD_INT 1
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 3
41008: PUSH
41009: LD_INT 2
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 3
41018: PUSH
41019: LD_INT 3
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 2
41028: PUSH
41029: LD_INT 3
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 2
41038: NEG
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: EMPTY
41044: LIST
41045: LIST
41046: PUSH
41047: LD_INT 3
41049: NEG
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 3
41060: NEG
41061: PUSH
41062: LD_INT 1
41064: NEG
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 3
41072: NEG
41073: PUSH
41074: LD_INT 2
41076: NEG
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 3
41084: NEG
41085: PUSH
41086: LD_INT 3
41088: NEG
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41125: LD_ADDR_VAR 0 42
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: LD_INT 1
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 0
41173: PUSH
41174: LD_INT 1
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: NEG
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 1
41194: NEG
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: LD_INT 2
41210: NEG
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: LD_INT 2
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: LD_INT 1
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 2
41240: PUSH
41241: LD_INT 1
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 2
41250: PUSH
41251: LD_INT 2
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 1
41260: PUSH
41261: LD_INT 2
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: LD_INT 2
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 1
41280: NEG
41281: PUSH
41282: LD_INT 1
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 2
41291: NEG
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: LD_INT 2
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 2
41315: NEG
41316: PUSH
41317: LD_INT 3
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 1
41327: NEG
41328: PUSH
41329: LD_INT 3
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 0
41339: PUSH
41340: LD_INT 3
41342: NEG
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: LD_INT 2
41353: NEG
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 3
41361: PUSH
41362: LD_INT 2
41364: PUSH
41365: EMPTY
41366: LIST
41367: LIST
41368: PUSH
41369: LD_INT 3
41371: PUSH
41372: LD_INT 3
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 2
41381: PUSH
41382: LD_INT 3
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: LD_INT 3
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 0
41401: PUSH
41402: LD_INT 3
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 1
41411: NEG
41412: PUSH
41413: LD_INT 2
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 3
41422: NEG
41423: PUSH
41424: LD_INT 2
41426: NEG
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 3
41434: NEG
41435: PUSH
41436: LD_INT 3
41438: NEG
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41475: LD_ADDR_VAR 0 43
41479: PUSH
41480: LD_INT 0
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 1
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: LD_INT 0
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 1
41513: PUSH
41514: LD_INT 1
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 0
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 1
41533: NEG
41534: PUSH
41535: LD_INT 0
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: LD_INT 1
41548: NEG
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: NEG
41557: PUSH
41558: LD_INT 2
41560: NEG
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: LD_INT 2
41571: NEG
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 1
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 2
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 2
41600: PUSH
41601: LD_INT 1
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 1
41610: PUSH
41611: LD_INT 2
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: LD_INT 0
41620: PUSH
41621: LD_INT 2
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 1
41630: NEG
41631: PUSH
41632: LD_INT 1
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 2
41641: NEG
41642: PUSH
41643: LD_INT 0
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 2
41652: NEG
41653: PUSH
41654: LD_INT 1
41656: NEG
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 1
41664: NEG
41665: PUSH
41666: LD_INT 3
41668: NEG
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 0
41676: PUSH
41677: LD_INT 3
41679: NEG
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 1
41687: PUSH
41688: LD_INT 2
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 2
41698: PUSH
41699: LD_INT 1
41701: NEG
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 3
41709: PUSH
41710: LD_INT 0
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 3
41719: PUSH
41720: LD_INT 1
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 1
41729: PUSH
41730: LD_INT 3
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: LD_INT 3
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: NEG
41750: PUSH
41751: LD_INT 2
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: LD_INT 1
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 3
41771: NEG
41772: PUSH
41773: LD_INT 0
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 3
41782: NEG
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41823: LD_ADDR_VAR 0 44
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: EMPTY
41835: LIST
41836: LIST
41837: PUSH
41838: LD_INT 0
41840: PUSH
41841: LD_INT 1
41843: NEG
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 1
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 1
41861: PUSH
41862: LD_INT 1
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: LD_INT 1
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 1
41881: NEG
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: LD_INT 1
41896: NEG
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: LD_INT 2
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 2
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 2
41947: PUSH
41948: LD_INT 2
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 1
41957: PUSH
41958: LD_INT 2
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: LD_INT 1
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 2
41978: NEG
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 2
41989: NEG
41990: PUSH
41991: LD_INT 1
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 2
42001: NEG
42002: PUSH
42003: LD_INT 2
42005: NEG
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 2
42013: NEG
42014: PUSH
42015: LD_INT 3
42017: NEG
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 2
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 3
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 3
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 3
42056: PUSH
42057: LD_INT 2
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 3
42066: PUSH
42067: LD_INT 3
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 2
42076: PUSH
42077: LD_INT 3
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: NEG
42087: PUSH
42088: LD_INT 1
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 3
42097: NEG
42098: PUSH
42099: LD_INT 0
42101: PUSH
42102: EMPTY
42103: LIST
42104: LIST
42105: PUSH
42106: LD_INT 3
42108: NEG
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 3
42120: NEG
42121: PUSH
42122: LD_INT 2
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 3
42132: NEG
42133: PUSH
42134: LD_INT 3
42136: NEG
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42173: LD_ADDR_VAR 0 45
42177: PUSH
42178: LD_INT 0
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: PUSH
42233: LD_INT 0
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: LD_INT 2
42258: NEG
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: LD_INT 2
42269: NEG
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 1
42277: PUSH
42278: LD_INT 1
42280: NEG
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 2
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 2
42298: PUSH
42299: LD_INT 2
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: LD_INT 2
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: LD_INT 2
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: NEG
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 2
42339: NEG
42340: PUSH
42341: LD_INT 1
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 2
42351: NEG
42352: PUSH
42353: LD_INT 2
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 2
42363: NEG
42364: PUSH
42365: LD_INT 3
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: NEG
42376: PUSH
42377: LD_INT 3
42379: NEG
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 3
42390: NEG
42391: PUSH
42392: EMPTY
42393: LIST
42394: LIST
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: LD_INT 2
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 3
42409: PUSH
42410: LD_INT 2
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 3
42419: PUSH
42420: LD_INT 3
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 2
42429: PUSH
42430: LD_INT 3
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: LD_INT 3
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: LD_INT 3
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: LD_INT 2
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 3
42470: NEG
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 3
42482: NEG
42483: PUSH
42484: LD_INT 3
42486: NEG
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42523: LD_ADDR_VAR 0 46
42527: PUSH
42528: LD_INT 0
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 1
42561: PUSH
42562: LD_INT 1
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 1
42581: NEG
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: LD_INT 1
42596: NEG
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 1
42604: NEG
42605: PUSH
42606: LD_INT 2
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: LD_INT 2
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 1
42627: PUSH
42628: LD_INT 1
42630: NEG
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 2
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 2
42648: PUSH
42649: LD_INT 1
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 1
42658: PUSH
42659: LD_INT 2
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: LD_INT 2
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 2
42689: NEG
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 2
42700: NEG
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: NEG
42713: PUSH
42714: LD_INT 3
42716: NEG
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 0
42724: PUSH
42725: LD_INT 3
42727: NEG
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 1
42735: PUSH
42736: LD_INT 2
42738: NEG
42739: PUSH
42740: EMPTY
42741: LIST
42742: LIST
42743: PUSH
42744: LD_INT 2
42746: PUSH
42747: LD_INT 1
42749: NEG
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 3
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 3
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: LD_INT 3
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 0
42787: PUSH
42788: LD_INT 3
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 1
42797: NEG
42798: PUSH
42799: LD_INT 2
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 2
42808: NEG
42809: PUSH
42810: LD_INT 1
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 3
42819: NEG
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 3
42830: NEG
42831: PUSH
42832: LD_INT 1
42834: NEG
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42871: LD_ADDR_VAR 0 47
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: LD_INT 0
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 0
42888: PUSH
42889: LD_INT 1
42891: NEG
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 1
42909: PUSH
42910: LD_INT 1
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: LD_INT 1
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: PUSH
42927: LD_INT 1
42929: NEG
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 1
42940: NEG
42941: PUSH
42942: LD_INT 1
42944: NEG
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 1
42952: NEG
42953: PUSH
42954: LD_INT 2
42956: NEG
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: LD_INT 2
42967: NEG
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 2
42986: NEG
42987: PUSH
42988: LD_INT 1
42990: NEG
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 2
42998: NEG
42999: PUSH
43000: LD_INT 2
43002: NEG
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43022: LD_ADDR_VAR 0 48
43026: PUSH
43027: LD_INT 0
43029: PUSH
43030: LD_INT 0
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 0
43039: PUSH
43040: LD_INT 1
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: LD_INT 0
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 1
43060: PUSH
43061: LD_INT 1
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 0
43070: PUSH
43071: LD_INT 1
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: LD_INT 0
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 1
43091: NEG
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: NEG
43104: PUSH
43105: LD_INT 2
43107: NEG
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 0
43115: PUSH
43116: LD_INT 2
43118: NEG
43119: PUSH
43120: EMPTY
43121: LIST
43122: LIST
43123: PUSH
43124: LD_INT 1
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 2
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 2
43147: PUSH
43148: LD_INT 1
43150: PUSH
43151: EMPTY
43152: LIST
43153: LIST
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43169: LD_ADDR_VAR 0 49
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: LD_INT 0
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: LD_INT 1
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 1
43207: PUSH
43208: LD_INT 1
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: LD_INT 1
43220: PUSH
43221: EMPTY
43222: LIST
43223: LIST
43224: PUSH
43225: LD_INT 1
43227: NEG
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 1
43238: NEG
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 1
43250: PUSH
43251: LD_INT 1
43253: NEG
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 2
43261: PUSH
43262: LD_INT 0
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 2
43271: PUSH
43272: LD_INT 1
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 2
43281: PUSH
43282: LD_INT 2
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: LD_INT 2
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43313: LD_ADDR_VAR 0 50
43317: PUSH
43318: LD_INT 0
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: LD_INT 1
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 1
43341: PUSH
43342: LD_INT 0
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 1
43351: PUSH
43352: LD_INT 1
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: LD_INT 1
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 1
43371: NEG
43372: PUSH
43373: LD_INT 0
43375: PUSH
43376: EMPTY
43377: LIST
43378: LIST
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 2
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 2
43404: PUSH
43405: LD_INT 2
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 1
43414: PUSH
43415: LD_INT 2
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 0
43424: PUSH
43425: LD_INT 2
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: NEG
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43457: LD_ADDR_VAR 0 51
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 0
43474: PUSH
43475: LD_INT 1
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 1
43495: PUSH
43496: LD_INT 1
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 0
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: NEG
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 1
43526: NEG
43527: PUSH
43528: LD_INT 1
43530: NEG
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: LD_INT 2
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: LD_INT 2
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: NEG
43559: PUSH
43560: LD_INT 1
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: LD_INT 2
43569: NEG
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 2
43580: NEG
43581: PUSH
43582: LD_INT 1
43584: NEG
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43604: LD_ADDR_VAR 0 52
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: LD_INT 0
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: LD_INT 1
43624: NEG
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: LD_INT 0
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 0
43652: PUSH
43653: LD_INT 1
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 1
43662: NEG
43663: PUSH
43664: LD_INT 0
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 1
43673: NEG
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: EMPTY
43680: LIST
43681: LIST
43682: PUSH
43683: LD_INT 1
43685: NEG
43686: PUSH
43687: LD_INT 2
43689: NEG
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: LD_INT 1
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 2
43708: NEG
43709: PUSH
43710: LD_INT 0
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 2
43719: NEG
43720: PUSH
43721: LD_INT 1
43723: NEG
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: PUSH
43729: LD_INT 2
43731: NEG
43732: PUSH
43733: LD_INT 2
43735: NEG
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43755: LD_ADDR_VAR 0 53
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 1
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 0
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: NEG
43837: PUSH
43838: LD_INT 2
43840: NEG
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 0
43848: PUSH
43849: LD_INT 2
43851: NEG
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 2
43870: PUSH
43871: LD_INT 0
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 2
43880: PUSH
43881: LD_INT 1
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 2
43890: PUSH
43891: LD_INT 2
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: LD_INT 2
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: LD_INT 2
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 1
43920: NEG
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 2
43931: NEG
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 2
43942: NEG
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 2
43954: NEG
43955: PUSH
43956: LD_INT 2
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: LIST
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: LIST
43981: LIST
43982: LIST
43983: LIST
43984: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43985: LD_ADDR_VAR 0 54
43989: PUSH
43990: LD_INT 0
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: LD_INT 0
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 1
44054: NEG
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 1
44066: NEG
44067: PUSH
44068: LD_INT 2
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 0
44078: PUSH
44079: LD_INT 2
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: LD_INT 1
44092: NEG
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 2
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 2
44110: PUSH
44111: LD_INT 1
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 2
44120: PUSH
44121: LD_INT 2
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: LD_INT 2
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 0
44140: PUSH
44141: LD_INT 2
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 2
44161: NEG
44162: PUSH
44163: LD_INT 0
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 2
44172: NEG
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 2
44184: NEG
44185: PUSH
44186: LD_INT 2
44188: NEG
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: EMPTY
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44215: LD_ADDR_VAR 0 55
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: EMPTY
44238: LIST
44239: LIST
44240: PUSH
44241: LD_INT 1
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: LD_INT 1
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 0
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: LD_INT 0
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 1
44284: NEG
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: LD_INT 2
44300: NEG
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: LD_INT 2
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: LD_INT 1
44322: NEG
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 2
44330: PUSH
44331: LD_INT 0
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 2
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 2
44350: PUSH
44351: LD_INT 2
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 1
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: LD_INT 2
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 1
44380: NEG
44381: PUSH
44382: LD_INT 1
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 2
44391: NEG
44392: PUSH
44393: LD_INT 0
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 2
44402: NEG
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 2
44414: NEG
44415: PUSH
44416: LD_INT 2
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44445: LD_ADDR_VAR 0 56
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: LD_INT 1
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 1
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 0
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 1
44503: NEG
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 1
44514: NEG
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: LD_INT 2
44530: NEG
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: LD_INT 2
44541: NEG
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: LD_INT 1
44552: NEG
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 2
44560: PUSH
44561: LD_INT 0
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 2
44570: PUSH
44571: LD_INT 1
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 2
44580: PUSH
44581: LD_INT 2
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: LD_INT 2
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: LD_INT 2
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: LD_INT 1
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 2
44621: NEG
44622: PUSH
44623: LD_INT 0
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 2
44632: NEG
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 2
44644: NEG
44645: PUSH
44646: LD_INT 2
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: LIST
44664: LIST
44665: LIST
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: LIST
44671: LIST
44672: LIST
44673: LIST
44674: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44675: LD_ADDR_VAR 0 57
44679: PUSH
44680: LD_INT 0
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 0
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: LD_INT 0
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 0
44723: PUSH
44724: LD_INT 1
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: NEG
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 1
44744: NEG
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: NEG
44757: PUSH
44758: LD_INT 2
44760: NEG
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 0
44768: PUSH
44769: LD_INT 2
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 1
44779: PUSH
44780: LD_INT 1
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 2
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 2
44800: PUSH
44801: LD_INT 1
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 2
44810: PUSH
44811: LD_INT 2
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 1
44820: PUSH
44821: LD_INT 2
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 0
44830: PUSH
44831: LD_INT 2
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: NEG
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 2
44851: NEG
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 2
44862: NEG
44863: PUSH
44864: LD_INT 1
44866: NEG
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 2
44874: NEG
44875: PUSH
44876: LD_INT 2
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44905: LD_ADDR_VAR 0 58
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: PUSH
44944: LD_INT 1
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 0
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: LD_INT 2
44990: NEG
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 0
44998: PUSH
44999: LD_INT 2
45001: NEG
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: PUSH
45010: LD_INT 1
45012: NEG
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 2
45020: PUSH
45021: LD_INT 0
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 2
45030: PUSH
45031: LD_INT 1
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 2
45040: PUSH
45041: LD_INT 2
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: LD_INT 2
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: LD_INT 2
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 1
45070: NEG
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 2
45081: NEG
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 2
45092: NEG
45093: PUSH
45094: LD_INT 1
45096: NEG
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 2
45104: NEG
45105: PUSH
45106: LD_INT 2
45108: NEG
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45135: LD_ADDR_VAR 0 59
45139: PUSH
45140: LD_INT 0
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: LD_INT 1
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: PUSH
45174: LD_INT 1
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: LIST
45222: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45223: LD_ADDR_VAR 0 60
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 0
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 1
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 1
45261: PUSH
45262: LD_INT 1
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: LD_INT 1
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: LD_INT 1
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45311: LD_ADDR_VAR 0 61
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: LD_INT 1
45331: NEG
45332: PUSH
45333: EMPTY
45334: LIST
45335: LIST
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: LD_INT 0
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45399: LD_ADDR_VAR 0 62
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: LD_INT 0
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: LD_INT 0
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: LD_INT 1
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: LD_INT 1
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: LD_INT 1
45472: NEG
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45487: LD_ADDR_VAR 0 63
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 0
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 1
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 1
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: NEG
45557: PUSH
45558: LD_INT 1
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45575: LD_ADDR_VAR 0 64
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 1
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 1
45633: NEG
45634: PUSH
45635: LD_INT 0
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: ST_TO_ADDR
// end ; 1 :
45663: GO 51560
45665: LD_INT 1
45667: DOUBLE
45668: EQUAL
45669: IFTRUE 45673
45671: GO 48296
45673: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45674: LD_ADDR_VAR 0 11
45678: PUSH
45679: LD_INT 1
45681: NEG
45682: PUSH
45683: LD_INT 3
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: LD_INT 3
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: LD_INT 2
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: LIST
45717: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45718: LD_ADDR_VAR 0 12
45722: PUSH
45723: LD_INT 2
45725: PUSH
45726: LD_INT 1
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 3
45736: PUSH
45737: LD_INT 0
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 3
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: LIST
45758: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45759: LD_ADDR_VAR 0 13
45763: PUSH
45764: LD_INT 3
45766: PUSH
45767: LD_INT 2
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 3
45776: PUSH
45777: LD_INT 3
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 2
45786: PUSH
45787: LD_INT 3
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: LIST
45798: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45799: LD_ADDR_VAR 0 14
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: LD_INT 3
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: LD_INT 3
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: LIST
45839: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45840: LD_ADDR_VAR 0 15
45844: PUSH
45845: LD_INT 2
45847: NEG
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 3
45858: NEG
45859: PUSH
45860: LD_INT 0
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 3
45869: NEG
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: LIST
45883: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45884: LD_ADDR_VAR 0 16
45888: PUSH
45889: LD_INT 2
45891: NEG
45892: PUSH
45893: LD_INT 3
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 3
45903: NEG
45904: PUSH
45905: LD_INT 2
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 3
45915: NEG
45916: PUSH
45917: LD_INT 3
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: LIST
45929: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45930: LD_ADDR_VAR 0 17
45934: PUSH
45935: LD_INT 1
45937: NEG
45938: PUSH
45939: LD_INT 3
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: LD_INT 3
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: PUSH
45961: LD_INT 2
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: LIST
45973: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45974: LD_ADDR_VAR 0 18
45978: PUSH
45979: LD_INT 2
45981: PUSH
45982: LD_INT 1
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 3
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 3
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: LIST
46014: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46015: LD_ADDR_VAR 0 19
46019: PUSH
46020: LD_INT 3
46022: PUSH
46023: LD_INT 2
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 3
46032: PUSH
46033: LD_INT 3
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 2
46042: PUSH
46043: LD_INT 3
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: LIST
46054: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46055: LD_ADDR_VAR 0 20
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: LD_INT 3
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: LD_INT 3
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: LD_INT 2
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: LIST
46095: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46096: LD_ADDR_VAR 0 21
46100: PUSH
46101: LD_INT 2
46103: NEG
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 3
46114: NEG
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 3
46125: NEG
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: LIST
46139: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46140: LD_ADDR_VAR 0 22
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: LD_INT 3
46151: NEG
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 3
46159: NEG
46160: PUSH
46161: LD_INT 2
46163: NEG
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 3
46171: NEG
46172: PUSH
46173: LD_INT 3
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: LIST
46185: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46186: LD_ADDR_VAR 0 23
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: LD_INT 3
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: LD_INT 4
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: LD_INT 3
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: LIST
46229: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46230: LD_ADDR_VAR 0 24
46234: PUSH
46235: LD_INT 3
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 3
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 4
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: LIST
46270: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46271: LD_ADDR_VAR 0 25
46275: PUSH
46276: LD_INT 3
46278: PUSH
46279: LD_INT 3
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 4
46288: PUSH
46289: LD_INT 3
46291: PUSH
46292: EMPTY
46293: LIST
46294: LIST
46295: PUSH
46296: LD_INT 3
46298: PUSH
46299: LD_INT 4
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: LIST
46310: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46311: LD_ADDR_VAR 0 26
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: LD_INT 3
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: LD_INT 4
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: LD_INT 3
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: LIST
46351: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46352: LD_ADDR_VAR 0 27
46356: PUSH
46357: LD_INT 3
46359: NEG
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 3
46370: NEG
46371: PUSH
46372: LD_INT 1
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 4
46381: NEG
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: LIST
46395: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46396: LD_ADDR_VAR 0 28
46400: PUSH
46401: LD_INT 3
46403: NEG
46404: PUSH
46405: LD_INT 3
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 3
46415: NEG
46416: PUSH
46417: LD_INT 4
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 4
46427: NEG
46428: PUSH
46429: LD_INT 3
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: LIST
46441: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46442: LD_ADDR_VAR 0 29
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: LD_INT 3
46453: NEG
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 0
46461: PUSH
46462: LD_INT 3
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: LD_INT 2
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: LD_INT 4
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: LD_INT 4
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: LD_INT 3
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: LD_INT 5
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: LD_INT 5
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: PUSH
46541: LD_INT 4
46543: NEG
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 1
46551: NEG
46552: PUSH
46553: LD_INT 6
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 0
46563: PUSH
46564: LD_INT 6
46566: NEG
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: PUSH
46575: LD_INT 5
46577: NEG
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: LIST
46589: LIST
46590: LIST
46591: LIST
46592: LIST
46593: LIST
46594: LIST
46595: LIST
46596: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46597: LD_ADDR_VAR 0 30
46601: PUSH
46602: LD_INT 2
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 3
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 3
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 3
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 4
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 4
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 4
46666: PUSH
46667: LD_INT 1
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 5
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 5
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 5
46697: PUSH
46698: LD_INT 1
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 6
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 6
46718: PUSH
46719: LD_INT 1
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46740: LD_ADDR_VAR 0 31
46744: PUSH
46745: LD_INT 3
46747: PUSH
46748: LD_INT 2
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 3
46757: PUSH
46758: LD_INT 3
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 2
46767: PUSH
46768: LD_INT 3
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 4
46777: PUSH
46778: LD_INT 3
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 4
46787: PUSH
46788: LD_INT 4
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 3
46797: PUSH
46798: LD_INT 4
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 5
46807: PUSH
46808: LD_INT 4
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 5
46817: PUSH
46818: LD_INT 5
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 4
46827: PUSH
46828: LD_INT 5
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 6
46837: PUSH
46838: LD_INT 5
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 6
46847: PUSH
46848: LD_INT 6
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 5
46857: PUSH
46858: LD_INT 6
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: LIST
46869: LIST
46870: LIST
46871: LIST
46872: LIST
46873: LIST
46874: LIST
46875: LIST
46876: LIST
46877: LIST
46878: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46879: LD_ADDR_VAR 0 32
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: LD_INT 3
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: LD_INT 3
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: LD_INT 2
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 1
46917: PUSH
46918: LD_INT 4
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: LD_INT 4
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: LD_INT 3
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: LD_INT 5
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: LD_INT 5
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: LD_INT 4
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: LD_INT 6
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: LD_INT 6
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: LD_INT 5
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47022: LD_ADDR_VAR 0 33
47026: PUSH
47027: LD_INT 2
47029: NEG
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 3
47040: NEG
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 3
47051: NEG
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 3
47063: NEG
47064: PUSH
47065: LD_INT 1
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 4
47074: NEG
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 4
47085: NEG
47086: PUSH
47087: LD_INT 1
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 4
47097: NEG
47098: PUSH
47099: LD_INT 1
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 5
47108: NEG
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 5
47119: NEG
47120: PUSH
47121: LD_INT 1
47123: NEG
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 5
47131: NEG
47132: PUSH
47133: LD_INT 1
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 6
47142: NEG
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 6
47153: NEG
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47177: LD_ADDR_VAR 0 34
47181: PUSH
47182: LD_INT 2
47184: NEG
47185: PUSH
47186: LD_INT 3
47188: NEG
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 3
47196: NEG
47197: PUSH
47198: LD_INT 2
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 3
47208: NEG
47209: PUSH
47210: LD_INT 3
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 3
47220: NEG
47221: PUSH
47222: LD_INT 4
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 4
47232: NEG
47233: PUSH
47234: LD_INT 3
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 4
47244: NEG
47245: PUSH
47246: LD_INT 4
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 4
47256: NEG
47257: PUSH
47258: LD_INT 5
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 5
47268: NEG
47269: PUSH
47270: LD_INT 4
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 5
47280: NEG
47281: PUSH
47282: LD_INT 5
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 5
47292: NEG
47293: PUSH
47294: LD_INT 6
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 6
47304: NEG
47305: PUSH
47306: LD_INT 5
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 6
47316: NEG
47317: PUSH
47318: LD_INT 6
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47340: LD_ADDR_VAR 0 41
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: LD_INT 2
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 3
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 2
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: LIST
47383: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47384: LD_ADDR_VAR 0 42
47388: PUSH
47389: LD_INT 2
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 2
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 3
47412: PUSH
47413: LD_INT 1
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: LIST
47424: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47425: LD_ADDR_VAR 0 43
47429: PUSH
47430: LD_INT 2
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 3
47442: PUSH
47443: LD_INT 2
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 2
47452: PUSH
47453: LD_INT 3
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: LIST
47464: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47465: LD_ADDR_VAR 0 44
47469: PUSH
47470: LD_INT 0
47472: PUSH
47473: LD_INT 2
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: LD_INT 3
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: LD_INT 2
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: LIST
47505: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47506: LD_ADDR_VAR 0 45
47510: PUSH
47511: LD_INT 2
47513: NEG
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 2
47524: NEG
47525: PUSH
47526: LD_INT 1
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 3
47535: NEG
47536: PUSH
47537: LD_INT 1
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: LIST
47549: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47550: LD_ADDR_VAR 0 46
47554: PUSH
47555: LD_INT 2
47557: NEG
47558: PUSH
47559: LD_INT 2
47561: NEG
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 2
47569: NEG
47570: PUSH
47571: LD_INT 3
47573: NEG
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 3
47581: NEG
47582: PUSH
47583: LD_INT 2
47585: NEG
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: LIST
47595: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47596: LD_ADDR_VAR 0 47
47600: PUSH
47601: LD_INT 2
47603: NEG
47604: PUSH
47605: LD_INT 3
47607: NEG
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: LD_INT 3
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47629: LD_ADDR_VAR 0 48
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: LD_INT 2
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 2
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47660: LD_ADDR_VAR 0 49
47664: PUSH
47665: LD_INT 3
47667: PUSH
47668: LD_INT 1
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 3
47677: PUSH
47678: LD_INT 2
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47689: LD_ADDR_VAR 0 50
47693: PUSH
47694: LD_INT 2
47696: PUSH
47697: LD_INT 3
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: LD_INT 3
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47718: LD_ADDR_VAR 0 51
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 2
47736: NEG
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47749: LD_ADDR_VAR 0 52
47753: PUSH
47754: LD_INT 3
47756: NEG
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 3
47768: NEG
47769: PUSH
47770: LD_INT 2
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47782: LD_ADDR_VAR 0 53
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: LD_INT 3
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: LD_INT 3
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: LD_INT 2
47815: NEG
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: LIST
47825: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47826: LD_ADDR_VAR 0 54
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 3
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 3
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: LIST
47866: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47867: LD_ADDR_VAR 0 55
47871: PUSH
47872: LD_INT 3
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 3
47884: PUSH
47885: LD_INT 3
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 2
47894: PUSH
47895: LD_INT 3
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: LIST
47906: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47907: LD_ADDR_VAR 0 56
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: LD_INT 3
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: LD_INT 3
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: LD_INT 2
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: LIST
47947: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47948: LD_ADDR_VAR 0 57
47952: PUSH
47953: LD_INT 2
47955: NEG
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 3
47966: NEG
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 3
47977: NEG
47978: PUSH
47979: LD_INT 1
47981: NEG
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: LIST
47991: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47992: LD_ADDR_VAR 0 58
47996: PUSH
47997: LD_INT 2
47999: NEG
48000: PUSH
48001: LD_INT 3
48003: NEG
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 3
48011: NEG
48012: PUSH
48013: LD_INT 2
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 3
48023: NEG
48024: PUSH
48025: LD_INT 3
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: LIST
48037: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48038: LD_ADDR_VAR 0 59
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: LD_INT 2
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 0
48057: PUSH
48058: LD_INT 2
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: LIST
48081: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48082: LD_ADDR_VAR 0 60
48086: PUSH
48087: LD_INT 1
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 2
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 2
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: LIST
48122: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48123: LD_ADDR_VAR 0 61
48127: PUSH
48128: LD_INT 2
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 2
48140: PUSH
48141: LD_INT 2
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: LD_INT 2
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: LIST
48162: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48163: LD_ADDR_VAR 0 62
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: LD_INT 2
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: LD_INT 1
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: LIST
48203: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48204: LD_ADDR_VAR 0 63
48208: PUSH
48209: LD_INT 1
48211: NEG
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: NEG
48234: PUSH
48235: LD_INT 1
48237: NEG
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: LIST
48247: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48248: LD_ADDR_VAR 0 64
48252: PUSH
48253: LD_INT 1
48255: NEG
48256: PUSH
48257: LD_INT 2
48259: NEG
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 2
48267: NEG
48268: PUSH
48269: LD_INT 1
48271: NEG
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 2
48279: NEG
48280: PUSH
48281: LD_INT 2
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: LIST
48293: ST_TO_ADDR
// end ; 2 :
48294: GO 51560
48296: LD_INT 2
48298: DOUBLE
48299: EQUAL
48300: IFTRUE 48304
48302: GO 51559
48304: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48305: LD_ADDR_VAR 0 29
48309: PUSH
48310: LD_INT 4
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 4
48322: PUSH
48323: LD_INT 1
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 5
48333: PUSH
48334: LD_INT 0
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 5
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 4
48353: PUSH
48354: LD_INT 1
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 3
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 3
48373: PUSH
48374: LD_INT 1
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 3
48384: PUSH
48385: LD_INT 2
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 5
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 3
48405: PUSH
48406: LD_INT 3
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 3
48415: PUSH
48416: LD_INT 2
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 4
48425: PUSH
48426: LD_INT 3
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 4
48435: PUSH
48436: LD_INT 4
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 3
48445: PUSH
48446: LD_INT 4
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 2
48455: PUSH
48456: LD_INT 3
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 2
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 4
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: LD_INT 4
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 0
48495: PUSH
48496: LD_INT 4
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: LD_INT 3
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: LD_INT 4
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 5
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: LD_INT 5
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: LD_INT 4
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: LD_INT 3
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: LD_INT 5
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 2
48577: NEG
48578: PUSH
48579: LD_INT 3
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 3
48588: NEG
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 3
48599: NEG
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 2
48611: NEG
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: NEG
48623: PUSH
48624: LD_INT 1
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 3
48633: NEG
48634: PUSH
48635: LD_INT 1
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 4
48644: NEG
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 4
48655: NEG
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 4
48667: NEG
48668: PUSH
48669: LD_INT 2
48671: NEG
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 2
48679: NEG
48680: PUSH
48681: LD_INT 2
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 4
48690: NEG
48691: PUSH
48692: LD_INT 4
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 4
48702: NEG
48703: PUSH
48704: LD_INT 5
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 3
48714: NEG
48715: PUSH
48716: LD_INT 4
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 3
48726: NEG
48727: PUSH
48728: LD_INT 3
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 4
48738: NEG
48739: PUSH
48740: LD_INT 3
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 5
48750: NEG
48751: PUSH
48752: LD_INT 4
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 5
48762: NEG
48763: PUSH
48764: LD_INT 5
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 3
48774: NEG
48775: PUSH
48776: LD_INT 5
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 5
48786: NEG
48787: PUSH
48788: LD_INT 3
48790: NEG
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48843: LD_ADDR_VAR 0 30
48847: PUSH
48848: LD_INT 4
48850: PUSH
48851: LD_INT 4
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 4
48860: PUSH
48861: LD_INT 3
48863: PUSH
48864: EMPTY
48865: LIST
48866: LIST
48867: PUSH
48868: LD_INT 5
48870: PUSH
48871: LD_INT 4
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 5
48880: PUSH
48881: LD_INT 5
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 4
48890: PUSH
48891: LD_INT 5
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 3
48900: PUSH
48901: LD_INT 4
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 3
48910: PUSH
48911: LD_INT 3
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 5
48920: PUSH
48921: LD_INT 3
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 3
48930: PUSH
48931: LD_INT 5
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: LD_INT 3
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: LD_INT 2
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: LD_INT 3
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: LD_INT 4
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: LD_INT 4
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: LD_INT 3
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: LD_INT 2
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 2
49012: PUSH
49013: LD_INT 4
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: LD_INT 2
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 4
49033: NEG
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 4
49044: NEG
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 3
49056: NEG
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 3
49067: NEG
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 4
49078: NEG
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 5
49089: NEG
49090: PUSH
49091: LD_INT 0
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 5
49100: NEG
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 5
49112: NEG
49113: PUSH
49114: LD_INT 2
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 3
49124: NEG
49125: PUSH
49126: LD_INT 2
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 3
49135: NEG
49136: PUSH
49137: LD_INT 3
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 3
49147: NEG
49148: PUSH
49149: LD_INT 4
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 2
49159: NEG
49160: PUSH
49161: LD_INT 3
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 2
49171: NEG
49172: PUSH
49173: LD_INT 2
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 3
49183: NEG
49184: PUSH
49185: LD_INT 2
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 4
49195: NEG
49196: PUSH
49197: LD_INT 3
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 4
49207: NEG
49208: PUSH
49209: LD_INT 4
49211: NEG
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 2
49219: NEG
49220: PUSH
49221: LD_INT 4
49223: NEG
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 4
49231: NEG
49232: PUSH
49233: LD_INT 2
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: LD_INT 4
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: LD_INT 5
49257: NEG
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: LD_INT 4
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 3
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 0
49287: PUSH
49288: LD_INT 3
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: LD_INT 4
49302: NEG
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: LD_INT 5
49314: NEG
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: LD_INT 3
49325: NEG
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: LD_INT 5
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49390: LD_ADDR_VAR 0 31
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: LD_INT 4
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: LD_INT 3
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: LD_INT 4
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: LD_INT 5
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: LD_INT 5
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: NEG
49448: PUSH
49449: LD_INT 4
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: LD_INT 3
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 2
49469: PUSH
49470: LD_INT 5
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 2
49479: NEG
49480: PUSH
49481: LD_INT 3
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 3
49490: NEG
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 3
49501: NEG
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 2
49513: NEG
49514: PUSH
49515: LD_INT 0
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 2
49524: NEG
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 3
49535: NEG
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 4
49546: NEG
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 4
49557: NEG
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 4
49569: NEG
49570: PUSH
49571: LD_INT 2
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 2
49581: NEG
49582: PUSH
49583: LD_INT 2
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 4
49592: NEG
49593: PUSH
49594: LD_INT 4
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 4
49604: NEG
49605: PUSH
49606: LD_INT 5
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 3
49616: NEG
49617: PUSH
49618: LD_INT 4
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 3
49628: NEG
49629: PUSH
49630: LD_INT 3
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 4
49640: NEG
49641: PUSH
49642: LD_INT 3
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 5
49652: NEG
49653: PUSH
49654: LD_INT 4
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 5
49664: NEG
49665: PUSH
49666: LD_INT 5
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 3
49676: NEG
49677: PUSH
49678: LD_INT 5
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 5
49688: NEG
49689: PUSH
49690: LD_INT 3
49692: NEG
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: LD_INT 3
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 0
49711: PUSH
49712: LD_INT 4
49714: NEG
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: LD_INT 3
49725: NEG
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 0
49744: PUSH
49745: LD_INT 2
49747: NEG
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: LD_INT 3
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: LD_INT 4
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 2
49779: PUSH
49780: LD_INT 2
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 2
49790: NEG
49791: PUSH
49792: LD_INT 4
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 4
49802: PUSH
49803: LD_INT 0
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 4
49812: PUSH
49813: LD_INT 1
49815: NEG
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 5
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 5
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 4
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 3
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 3
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 3
49874: PUSH
49875: LD_INT 2
49877: NEG
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 5
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49940: LD_ADDR_VAR 0 32
49944: PUSH
49945: LD_INT 4
49947: NEG
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: LD_INT 4
49958: NEG
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 3
49970: NEG
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 3
49981: NEG
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 4
49992: NEG
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 5
50003: NEG
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 5
50014: NEG
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 5
50026: NEG
50027: PUSH
50028: LD_INT 2
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 3
50038: NEG
50039: PUSH
50040: LD_INT 2
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 3
50049: NEG
50050: PUSH
50051: LD_INT 3
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 3
50061: NEG
50062: PUSH
50063: LD_INT 4
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 2
50073: NEG
50074: PUSH
50075: LD_INT 3
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 2
50085: NEG
50086: PUSH
50087: LD_INT 2
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 3
50097: NEG
50098: PUSH
50099: LD_INT 2
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 4
50109: NEG
50110: PUSH
50111: LD_INT 3
50113: NEG
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 4
50121: NEG
50122: PUSH
50123: LD_INT 4
50125: NEG
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: NEG
50134: PUSH
50135: LD_INT 4
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 4
50145: NEG
50146: PUSH
50147: LD_INT 2
50149: NEG
50150: PUSH
50151: EMPTY
50152: LIST
50153: LIST
50154: PUSH
50155: LD_INT 0
50157: PUSH
50158: LD_INT 4
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: LD_INT 5
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: LD_INT 4
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: LD_INT 3
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: LD_INT 3
50204: NEG
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: LD_INT 4
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: LD_INT 5
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 2
50236: PUSH
50237: LD_INT 3
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: LD_INT 5
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 3
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 3
50269: PUSH
50270: LD_INT 1
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 4
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 4
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 3
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 2
50310: PUSH
50311: LD_INT 0
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 2
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 2
50331: PUSH
50332: LD_INT 2
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 4
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 4
50352: PUSH
50353: LD_INT 4
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 4
50362: PUSH
50363: LD_INT 3
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 5
50372: PUSH
50373: LD_INT 4
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 5
50382: PUSH
50383: LD_INT 5
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 4
50392: PUSH
50393: LD_INT 5
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 3
50402: PUSH
50403: LD_INT 4
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 3
50412: PUSH
50413: LD_INT 3
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 5
50422: PUSH
50423: LD_INT 3
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 3
50432: PUSH
50433: LD_INT 5
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50487: LD_ADDR_VAR 0 33
50491: PUSH
50492: LD_INT 4
50494: NEG
50495: PUSH
50496: LD_INT 4
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 4
50506: NEG
50507: PUSH
50508: LD_INT 5
50510: NEG
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 3
50518: NEG
50519: PUSH
50520: LD_INT 4
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 3
50530: NEG
50531: PUSH
50532: LD_INT 3
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 4
50542: NEG
50543: PUSH
50544: LD_INT 3
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 5
50554: NEG
50555: PUSH
50556: LD_INT 4
50558: NEG
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 5
50566: NEG
50567: PUSH
50568: LD_INT 5
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 3
50578: NEG
50579: PUSH
50580: LD_INT 5
50582: NEG
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 5
50590: NEG
50591: PUSH
50592: LD_INT 3
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 0
50602: PUSH
50603: LD_INT 3
50605: NEG
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: LD_INT 4
50616: NEG
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: LD_INT 3
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: LD_INT 2
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: NEG
50658: PUSH
50659: LD_INT 3
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: LD_INT 4
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 2
50681: PUSH
50682: LD_INT 2
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: NEG
50693: PUSH
50694: LD_INT 4
50696: NEG
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 4
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 4
50714: PUSH
50715: LD_INT 1
50717: NEG
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 5
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 5
50735: PUSH
50736: LD_INT 1
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 4
50745: PUSH
50746: LD_INT 1
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 3
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 3
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 3
50776: PUSH
50777: LD_INT 2
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 5
50787: PUSH
50788: LD_INT 2
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: PUSH
50795: LD_INT 3
50797: PUSH
50798: LD_INT 3
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 3
50807: PUSH
50808: LD_INT 2
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 4
50817: PUSH
50818: LD_INT 3
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 4
50827: PUSH
50828: LD_INT 4
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 3
50837: PUSH
50838: LD_INT 4
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 2
50847: PUSH
50848: LD_INT 3
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 2
50857: PUSH
50858: LD_INT 2
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 4
50867: PUSH
50868: LD_INT 2
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 2
50877: PUSH
50878: LD_INT 4
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 0
50887: PUSH
50888: LD_INT 4
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: LD_INT 3
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 1
50907: PUSH
50908: LD_INT 4
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: LD_INT 5
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: LD_INT 5
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: NEG
50938: PUSH
50939: LD_INT 4
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: LD_INT 3
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 2
50959: PUSH
50960: LD_INT 5
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: LD_INT 3
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51025: LD_ADDR_VAR 0 34
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: LD_INT 4
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: LD_INT 5
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: LD_INT 4
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: LD_INT 3
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: LD_INT 3
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: LD_INT 4
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: LD_INT 5
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: PUSH
51112: LD_INT 3
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: LD_INT 5
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 3
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 3
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 4
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 4
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 3
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 2
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 2
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 2
51206: PUSH
51207: LD_INT 2
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 4
51217: PUSH
51218: LD_INT 2
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 4
51227: PUSH
51228: LD_INT 4
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 4
51237: PUSH
51238: LD_INT 3
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 5
51247: PUSH
51248: LD_INT 4
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 5
51257: PUSH
51258: LD_INT 5
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 4
51267: PUSH
51268: LD_INT 5
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 3
51277: PUSH
51278: LD_INT 4
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 3
51287: PUSH
51288: LD_INT 3
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 5
51297: PUSH
51298: LD_INT 3
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 3
51307: PUSH
51308: LD_INT 5
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 0
51317: PUSH
51318: LD_INT 3
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: LD_INT 2
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: LD_INT 3
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: LD_INT 4
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: LD_INT 4
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: LD_INT 3
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: LD_INT 2
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: LD_INT 4
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 2
51399: NEG
51400: PUSH
51401: LD_INT 2
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 4
51410: NEG
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 4
51421: NEG
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 3
51433: NEG
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 3
51444: NEG
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 4
51455: NEG
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 5
51466: NEG
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 5
51477: NEG
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 5
51489: NEG
51490: PUSH
51491: LD_INT 2
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 3
51501: NEG
51502: PUSH
51503: LD_INT 2
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: LIST
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: LIST
51554: LIST
51555: LIST
51556: ST_TO_ADDR
// end ; end ;
51557: GO 51560
51559: POP
// case btype of b_depot , b_warehouse :
51560: LD_VAR 0 1
51564: PUSH
51565: LD_INT 0
51567: DOUBLE
51568: EQUAL
51569: IFTRUE 51579
51571: LD_INT 1
51573: DOUBLE
51574: EQUAL
51575: IFTRUE 51579
51577: GO 51780
51579: POP
// case nation of nation_american :
51580: LD_VAR 0 5
51584: PUSH
51585: LD_INT 1
51587: DOUBLE
51588: EQUAL
51589: IFTRUE 51593
51591: GO 51649
51593: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
51594: LD_ADDR_VAR 0 9
51598: PUSH
51599: LD_VAR 0 11
51603: PUSH
51604: LD_VAR 0 12
51608: PUSH
51609: LD_VAR 0 13
51613: PUSH
51614: LD_VAR 0 14
51618: PUSH
51619: LD_VAR 0 15
51623: PUSH
51624: LD_VAR 0 16
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: PUSH
51637: LD_VAR 0 4
51641: PUSH
51642: LD_INT 1
51644: PLUS
51645: ARRAY
51646: ST_TO_ADDR
51647: GO 51778
51649: LD_INT 2
51651: DOUBLE
51652: EQUAL
51653: IFTRUE 51657
51655: GO 51713
51657: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
51658: LD_ADDR_VAR 0 9
51662: PUSH
51663: LD_VAR 0 17
51667: PUSH
51668: LD_VAR 0 18
51672: PUSH
51673: LD_VAR 0 19
51677: PUSH
51678: LD_VAR 0 20
51682: PUSH
51683: LD_VAR 0 21
51687: PUSH
51688: LD_VAR 0 22
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: PUSH
51701: LD_VAR 0 4
51705: PUSH
51706: LD_INT 1
51708: PLUS
51709: ARRAY
51710: ST_TO_ADDR
51711: GO 51778
51713: LD_INT 3
51715: DOUBLE
51716: EQUAL
51717: IFTRUE 51721
51719: GO 51777
51721: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51722: LD_ADDR_VAR 0 9
51726: PUSH
51727: LD_VAR 0 23
51731: PUSH
51732: LD_VAR 0 24
51736: PUSH
51737: LD_VAR 0 25
51741: PUSH
51742: LD_VAR 0 26
51746: PUSH
51747: LD_VAR 0 27
51751: PUSH
51752: LD_VAR 0 28
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: PUSH
51765: LD_VAR 0 4
51769: PUSH
51770: LD_INT 1
51772: PLUS
51773: ARRAY
51774: ST_TO_ADDR
51775: GO 51778
51777: POP
51778: GO 52333
51780: LD_INT 2
51782: DOUBLE
51783: EQUAL
51784: IFTRUE 51794
51786: LD_INT 3
51788: DOUBLE
51789: EQUAL
51790: IFTRUE 51794
51792: GO 51850
51794: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51795: LD_ADDR_VAR 0 9
51799: PUSH
51800: LD_VAR 0 29
51804: PUSH
51805: LD_VAR 0 30
51809: PUSH
51810: LD_VAR 0 31
51814: PUSH
51815: LD_VAR 0 32
51819: PUSH
51820: LD_VAR 0 33
51824: PUSH
51825: LD_VAR 0 34
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: PUSH
51838: LD_VAR 0 4
51842: PUSH
51843: LD_INT 1
51845: PLUS
51846: ARRAY
51847: ST_TO_ADDR
51848: GO 52333
51850: LD_INT 16
51852: DOUBLE
51853: EQUAL
51854: IFTRUE 51912
51856: LD_INT 17
51858: DOUBLE
51859: EQUAL
51860: IFTRUE 51912
51862: LD_INT 18
51864: DOUBLE
51865: EQUAL
51866: IFTRUE 51912
51868: LD_INT 19
51870: DOUBLE
51871: EQUAL
51872: IFTRUE 51912
51874: LD_INT 22
51876: DOUBLE
51877: EQUAL
51878: IFTRUE 51912
51880: LD_INT 20
51882: DOUBLE
51883: EQUAL
51884: IFTRUE 51912
51886: LD_INT 21
51888: DOUBLE
51889: EQUAL
51890: IFTRUE 51912
51892: LD_INT 23
51894: DOUBLE
51895: EQUAL
51896: IFTRUE 51912
51898: LD_INT 24
51900: DOUBLE
51901: EQUAL
51902: IFTRUE 51912
51904: LD_INT 25
51906: DOUBLE
51907: EQUAL
51908: IFTRUE 51912
51910: GO 51968
51912: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51913: LD_ADDR_VAR 0 9
51917: PUSH
51918: LD_VAR 0 35
51922: PUSH
51923: LD_VAR 0 36
51927: PUSH
51928: LD_VAR 0 37
51932: PUSH
51933: LD_VAR 0 38
51937: PUSH
51938: LD_VAR 0 39
51942: PUSH
51943: LD_VAR 0 40
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: PUSH
51956: LD_VAR 0 4
51960: PUSH
51961: LD_INT 1
51963: PLUS
51964: ARRAY
51965: ST_TO_ADDR
51966: GO 52333
51968: LD_INT 6
51970: DOUBLE
51971: EQUAL
51972: IFTRUE 52024
51974: LD_INT 7
51976: DOUBLE
51977: EQUAL
51978: IFTRUE 52024
51980: LD_INT 8
51982: DOUBLE
51983: EQUAL
51984: IFTRUE 52024
51986: LD_INT 13
51988: DOUBLE
51989: EQUAL
51990: IFTRUE 52024
51992: LD_INT 12
51994: DOUBLE
51995: EQUAL
51996: IFTRUE 52024
51998: LD_INT 15
52000: DOUBLE
52001: EQUAL
52002: IFTRUE 52024
52004: LD_INT 11
52006: DOUBLE
52007: EQUAL
52008: IFTRUE 52024
52010: LD_INT 14
52012: DOUBLE
52013: EQUAL
52014: IFTRUE 52024
52016: LD_INT 10
52018: DOUBLE
52019: EQUAL
52020: IFTRUE 52024
52022: GO 52080
52024: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
52025: LD_ADDR_VAR 0 9
52029: PUSH
52030: LD_VAR 0 41
52034: PUSH
52035: LD_VAR 0 42
52039: PUSH
52040: LD_VAR 0 43
52044: PUSH
52045: LD_VAR 0 44
52049: PUSH
52050: LD_VAR 0 45
52054: PUSH
52055: LD_VAR 0 46
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: PUSH
52068: LD_VAR 0 4
52072: PUSH
52073: LD_INT 1
52075: PLUS
52076: ARRAY
52077: ST_TO_ADDR
52078: GO 52333
52080: LD_INT 36
52082: DOUBLE
52083: EQUAL
52084: IFTRUE 52088
52086: GO 52144
52088: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52089: LD_ADDR_VAR 0 9
52093: PUSH
52094: LD_VAR 0 47
52098: PUSH
52099: LD_VAR 0 48
52103: PUSH
52104: LD_VAR 0 49
52108: PUSH
52109: LD_VAR 0 50
52113: PUSH
52114: LD_VAR 0 51
52118: PUSH
52119: LD_VAR 0 52
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: PUSH
52132: LD_VAR 0 4
52136: PUSH
52137: LD_INT 1
52139: PLUS
52140: ARRAY
52141: ST_TO_ADDR
52142: GO 52333
52144: LD_INT 4
52146: DOUBLE
52147: EQUAL
52148: IFTRUE 52170
52150: LD_INT 5
52152: DOUBLE
52153: EQUAL
52154: IFTRUE 52170
52156: LD_INT 34
52158: DOUBLE
52159: EQUAL
52160: IFTRUE 52170
52162: LD_INT 37
52164: DOUBLE
52165: EQUAL
52166: IFTRUE 52170
52168: GO 52226
52170: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52171: LD_ADDR_VAR 0 9
52175: PUSH
52176: LD_VAR 0 53
52180: PUSH
52181: LD_VAR 0 54
52185: PUSH
52186: LD_VAR 0 55
52190: PUSH
52191: LD_VAR 0 56
52195: PUSH
52196: LD_VAR 0 57
52200: PUSH
52201: LD_VAR 0 58
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: PUSH
52214: LD_VAR 0 4
52218: PUSH
52219: LD_INT 1
52221: PLUS
52222: ARRAY
52223: ST_TO_ADDR
52224: GO 52333
52226: LD_INT 31
52228: DOUBLE
52229: EQUAL
52230: IFTRUE 52276
52232: LD_INT 32
52234: DOUBLE
52235: EQUAL
52236: IFTRUE 52276
52238: LD_INT 33
52240: DOUBLE
52241: EQUAL
52242: IFTRUE 52276
52244: LD_INT 27
52246: DOUBLE
52247: EQUAL
52248: IFTRUE 52276
52250: LD_INT 26
52252: DOUBLE
52253: EQUAL
52254: IFTRUE 52276
52256: LD_INT 28
52258: DOUBLE
52259: EQUAL
52260: IFTRUE 52276
52262: LD_INT 29
52264: DOUBLE
52265: EQUAL
52266: IFTRUE 52276
52268: LD_INT 30
52270: DOUBLE
52271: EQUAL
52272: IFTRUE 52276
52274: GO 52332
52276: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
52277: LD_ADDR_VAR 0 9
52281: PUSH
52282: LD_VAR 0 59
52286: PUSH
52287: LD_VAR 0 60
52291: PUSH
52292: LD_VAR 0 61
52296: PUSH
52297: LD_VAR 0 62
52301: PUSH
52302: LD_VAR 0 63
52306: PUSH
52307: LD_VAR 0 64
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: PUSH
52320: LD_VAR 0 4
52324: PUSH
52325: LD_INT 1
52327: PLUS
52328: ARRAY
52329: ST_TO_ADDR
52330: GO 52333
52332: POP
// temp_list2 = [ ] ;
52333: LD_ADDR_VAR 0 10
52337: PUSH
52338: EMPTY
52339: ST_TO_ADDR
// for i in temp_list do
52340: LD_ADDR_VAR 0 8
52344: PUSH
52345: LD_VAR 0 9
52349: PUSH
52350: FOR_IN
52351: IFFALSE 52403
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52353: LD_ADDR_VAR 0 10
52357: PUSH
52358: LD_VAR 0 10
52362: PUSH
52363: LD_VAR 0 8
52367: PUSH
52368: LD_INT 1
52370: ARRAY
52371: PUSH
52372: LD_VAR 0 2
52376: PLUS
52377: PUSH
52378: LD_VAR 0 8
52382: PUSH
52383: LD_INT 2
52385: ARRAY
52386: PUSH
52387: LD_VAR 0 3
52391: PLUS
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: EMPTY
52398: LIST
52399: ADD
52400: ST_TO_ADDR
52401: GO 52350
52403: POP
52404: POP
// result = temp_list2 ;
52405: LD_ADDR_VAR 0 7
52409: PUSH
52410: LD_VAR 0 10
52414: ST_TO_ADDR
// end ;
52415: LD_VAR 0 7
52419: RET
// export function EnemyInRange ( unit , dist ) ; begin
52420: LD_INT 0
52422: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52423: LD_ADDR_VAR 0 3
52427: PUSH
52428: LD_VAR 0 1
52432: PPUSH
52433: CALL_OW 255
52437: PPUSH
52438: LD_VAR 0 1
52442: PPUSH
52443: CALL_OW 250
52447: PPUSH
52448: LD_VAR 0 1
52452: PPUSH
52453: CALL_OW 251
52457: PPUSH
52458: LD_VAR 0 2
52462: PPUSH
52463: CALL 26524 0 4
52467: PUSH
52468: LD_INT 4
52470: ARRAY
52471: ST_TO_ADDR
// end ;
52472: LD_VAR 0 3
52476: RET
// export function PlayerSeeMe ( unit ) ; begin
52477: LD_INT 0
52479: PPUSH
// result := See ( your_side , unit ) ;
52480: LD_ADDR_VAR 0 2
52484: PUSH
52485: LD_OWVAR 2
52489: PPUSH
52490: LD_VAR 0 1
52494: PPUSH
52495: CALL_OW 292
52499: ST_TO_ADDR
// end ;
52500: LD_VAR 0 2
52504: RET
// export function ReverseDir ( unit ) ; begin
52505: LD_INT 0
52507: PPUSH
// if not unit then
52508: LD_VAR 0 1
52512: NOT
52513: IFFALSE 52517
// exit ;
52515: GO 52540
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52517: LD_ADDR_VAR 0 2
52521: PUSH
52522: LD_VAR 0 1
52526: PPUSH
52527: CALL_OW 254
52531: PUSH
52532: LD_INT 3
52534: PLUS
52535: PUSH
52536: LD_INT 6
52538: MOD
52539: ST_TO_ADDR
// end ;
52540: LD_VAR 0 2
52544: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52545: LD_INT 0
52547: PPUSH
52548: PPUSH
52549: PPUSH
52550: PPUSH
52551: PPUSH
// if not hexes then
52552: LD_VAR 0 2
52556: NOT
52557: IFFALSE 52561
// exit ;
52559: GO 52709
// dist := 9999 ;
52561: LD_ADDR_VAR 0 5
52565: PUSH
52566: LD_INT 9999
52568: ST_TO_ADDR
// for i = 1 to hexes do
52569: LD_ADDR_VAR 0 4
52573: PUSH
52574: DOUBLE
52575: LD_INT 1
52577: DEC
52578: ST_TO_ADDR
52579: LD_VAR 0 2
52583: PUSH
52584: FOR_TO
52585: IFFALSE 52697
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52587: LD_VAR 0 1
52591: PPUSH
52592: LD_VAR 0 2
52596: PUSH
52597: LD_VAR 0 4
52601: ARRAY
52602: PUSH
52603: LD_INT 1
52605: ARRAY
52606: PPUSH
52607: LD_VAR 0 2
52611: PUSH
52612: LD_VAR 0 4
52616: ARRAY
52617: PUSH
52618: LD_INT 2
52620: ARRAY
52621: PPUSH
52622: CALL_OW 297
52626: PUSH
52627: LD_VAR 0 5
52631: LESS
52632: IFFALSE 52695
// begin hex := hexes [ i ] ;
52634: LD_ADDR_VAR 0 7
52638: PUSH
52639: LD_VAR 0 2
52643: PUSH
52644: LD_VAR 0 4
52648: ARRAY
52649: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52650: LD_ADDR_VAR 0 5
52654: PUSH
52655: LD_VAR 0 1
52659: PPUSH
52660: LD_VAR 0 2
52664: PUSH
52665: LD_VAR 0 4
52669: ARRAY
52670: PUSH
52671: LD_INT 1
52673: ARRAY
52674: PPUSH
52675: LD_VAR 0 2
52679: PUSH
52680: LD_VAR 0 4
52684: ARRAY
52685: PUSH
52686: LD_INT 2
52688: ARRAY
52689: PPUSH
52690: CALL_OW 297
52694: ST_TO_ADDR
// end ; end ;
52695: GO 52584
52697: POP
52698: POP
// result := hex ;
52699: LD_ADDR_VAR 0 3
52703: PUSH
52704: LD_VAR 0 7
52708: ST_TO_ADDR
// end ;
52709: LD_VAR 0 3
52713: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52714: LD_INT 0
52716: PPUSH
52717: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52718: LD_VAR 0 1
52722: NOT
52723: PUSH
52724: LD_VAR 0 1
52728: PUSH
52729: LD_INT 21
52731: PUSH
52732: LD_INT 2
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 23
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PPUSH
52753: CALL_OW 69
52757: IN
52758: NOT
52759: OR
52760: IFFALSE 52764
// exit ;
52762: GO 52811
// for i = 1 to 3 do
52764: LD_ADDR_VAR 0 3
52768: PUSH
52769: DOUBLE
52770: LD_INT 1
52772: DEC
52773: ST_TO_ADDR
52774: LD_INT 3
52776: PUSH
52777: FOR_TO
52778: IFFALSE 52809
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52780: LD_VAR 0 1
52784: PPUSH
52785: CALL_OW 250
52789: PPUSH
52790: LD_VAR 0 1
52794: PPUSH
52795: CALL_OW 251
52799: PPUSH
52800: LD_INT 1
52802: PPUSH
52803: CALL_OW 453
52807: GO 52777
52809: POP
52810: POP
// end ;
52811: LD_VAR 0 2
52815: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52816: LD_INT 0
52818: PPUSH
52819: PPUSH
52820: PPUSH
52821: PPUSH
52822: PPUSH
52823: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52824: LD_VAR 0 1
52828: NOT
52829: PUSH
52830: LD_VAR 0 2
52834: NOT
52835: OR
52836: PUSH
52837: LD_VAR 0 1
52841: PPUSH
52842: CALL_OW 314
52846: OR
52847: IFFALSE 52851
// exit ;
52849: GO 53292
// x := GetX ( enemy_unit ) ;
52851: LD_ADDR_VAR 0 7
52855: PUSH
52856: LD_VAR 0 2
52860: PPUSH
52861: CALL_OW 250
52865: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52866: LD_ADDR_VAR 0 8
52870: PUSH
52871: LD_VAR 0 2
52875: PPUSH
52876: CALL_OW 251
52880: ST_TO_ADDR
// if not x or not y then
52881: LD_VAR 0 7
52885: NOT
52886: PUSH
52887: LD_VAR 0 8
52891: NOT
52892: OR
52893: IFFALSE 52897
// exit ;
52895: GO 53292
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52897: LD_ADDR_VAR 0 6
52901: PUSH
52902: LD_VAR 0 7
52906: PPUSH
52907: LD_INT 0
52909: PPUSH
52910: LD_INT 4
52912: PPUSH
52913: CALL_OW 272
52917: PUSH
52918: LD_VAR 0 8
52922: PPUSH
52923: LD_INT 0
52925: PPUSH
52926: LD_INT 4
52928: PPUSH
52929: CALL_OW 273
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_VAR 0 7
52942: PPUSH
52943: LD_INT 1
52945: PPUSH
52946: LD_INT 4
52948: PPUSH
52949: CALL_OW 272
52953: PUSH
52954: LD_VAR 0 8
52958: PPUSH
52959: LD_INT 1
52961: PPUSH
52962: LD_INT 4
52964: PPUSH
52965: CALL_OW 273
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_VAR 0 7
52978: PPUSH
52979: LD_INT 2
52981: PPUSH
52982: LD_INT 4
52984: PPUSH
52985: CALL_OW 272
52989: PUSH
52990: LD_VAR 0 8
52994: PPUSH
52995: LD_INT 2
52997: PPUSH
52998: LD_INT 4
53000: PPUSH
53001: CALL_OW 273
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_VAR 0 7
53014: PPUSH
53015: LD_INT 3
53017: PPUSH
53018: LD_INT 4
53020: PPUSH
53021: CALL_OW 272
53025: PUSH
53026: LD_VAR 0 8
53030: PPUSH
53031: LD_INT 3
53033: PPUSH
53034: LD_INT 4
53036: PPUSH
53037: CALL_OW 273
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_VAR 0 7
53050: PPUSH
53051: LD_INT 4
53053: PPUSH
53054: LD_INT 4
53056: PPUSH
53057: CALL_OW 272
53061: PUSH
53062: LD_VAR 0 8
53066: PPUSH
53067: LD_INT 4
53069: PPUSH
53070: LD_INT 4
53072: PPUSH
53073: CALL_OW 273
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_VAR 0 7
53086: PPUSH
53087: LD_INT 5
53089: PPUSH
53090: LD_INT 4
53092: PPUSH
53093: CALL_OW 272
53097: PUSH
53098: LD_VAR 0 8
53102: PPUSH
53103: LD_INT 5
53105: PPUSH
53106: LD_INT 4
53108: PPUSH
53109: CALL_OW 273
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: EMPTY
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: ST_TO_ADDR
// for i = tmp downto 1 do
53126: LD_ADDR_VAR 0 4
53130: PUSH
53131: DOUBLE
53132: LD_VAR 0 6
53136: INC
53137: ST_TO_ADDR
53138: LD_INT 1
53140: PUSH
53141: FOR_DOWNTO
53142: IFFALSE 53243
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53144: LD_VAR 0 6
53148: PUSH
53149: LD_VAR 0 4
53153: ARRAY
53154: PUSH
53155: LD_INT 1
53157: ARRAY
53158: PPUSH
53159: LD_VAR 0 6
53163: PUSH
53164: LD_VAR 0 4
53168: ARRAY
53169: PUSH
53170: LD_INT 2
53172: ARRAY
53173: PPUSH
53174: CALL_OW 488
53178: NOT
53179: PUSH
53180: LD_VAR 0 6
53184: PUSH
53185: LD_VAR 0 4
53189: ARRAY
53190: PUSH
53191: LD_INT 1
53193: ARRAY
53194: PPUSH
53195: LD_VAR 0 6
53199: PUSH
53200: LD_VAR 0 4
53204: ARRAY
53205: PUSH
53206: LD_INT 2
53208: ARRAY
53209: PPUSH
53210: CALL_OW 428
53214: PUSH
53215: LD_INT 0
53217: NONEQUAL
53218: OR
53219: IFFALSE 53241
// tmp := Delete ( tmp , i ) ;
53221: LD_ADDR_VAR 0 6
53225: PUSH
53226: LD_VAR 0 6
53230: PPUSH
53231: LD_VAR 0 4
53235: PPUSH
53236: CALL_OW 3
53240: ST_TO_ADDR
53241: GO 53141
53243: POP
53244: POP
// j := GetClosestHex ( unit , tmp ) ;
53245: LD_ADDR_VAR 0 5
53249: PUSH
53250: LD_VAR 0 1
53254: PPUSH
53255: LD_VAR 0 6
53259: PPUSH
53260: CALL 52545 0 2
53264: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53265: LD_VAR 0 1
53269: PPUSH
53270: LD_VAR 0 5
53274: PUSH
53275: LD_INT 1
53277: ARRAY
53278: PPUSH
53279: LD_VAR 0 5
53283: PUSH
53284: LD_INT 2
53286: ARRAY
53287: PPUSH
53288: CALL_OW 111
// end ;
53292: LD_VAR 0 3
53296: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53297: LD_INT 0
53299: PPUSH
53300: PPUSH
53301: PPUSH
// uc_side = 0 ;
53302: LD_ADDR_OWVAR 20
53306: PUSH
53307: LD_INT 0
53309: ST_TO_ADDR
// uc_nation = 0 ;
53310: LD_ADDR_OWVAR 21
53314: PUSH
53315: LD_INT 0
53317: ST_TO_ADDR
// InitHc ;
53318: CALL_OW 19
// InitVc ;
53322: CALL_OW 20
// if mastodonts then
53326: LD_VAR 0 6
53330: IFFALSE 53397
// for i = 1 to mastodonts do
53332: LD_ADDR_VAR 0 11
53336: PUSH
53337: DOUBLE
53338: LD_INT 1
53340: DEC
53341: ST_TO_ADDR
53342: LD_VAR 0 6
53346: PUSH
53347: FOR_TO
53348: IFFALSE 53395
// begin vc_chassis := 31 ;
53350: LD_ADDR_OWVAR 37
53354: PUSH
53355: LD_INT 31
53357: ST_TO_ADDR
// vc_control := control_rider ;
53358: LD_ADDR_OWVAR 38
53362: PUSH
53363: LD_INT 4
53365: ST_TO_ADDR
// animal := CreateVehicle ;
53366: LD_ADDR_VAR 0 12
53370: PUSH
53371: CALL_OW 45
53375: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53376: LD_VAR 0 12
53380: PPUSH
53381: LD_VAR 0 8
53385: PPUSH
53386: LD_INT 0
53388: PPUSH
53389: CALL 55466 0 3
// end ;
53393: GO 53347
53395: POP
53396: POP
// if horses then
53397: LD_VAR 0 5
53401: IFFALSE 53468
// for i = 1 to horses do
53403: LD_ADDR_VAR 0 11
53407: PUSH
53408: DOUBLE
53409: LD_INT 1
53411: DEC
53412: ST_TO_ADDR
53413: LD_VAR 0 5
53417: PUSH
53418: FOR_TO
53419: IFFALSE 53466
// begin hc_class := 21 ;
53421: LD_ADDR_OWVAR 28
53425: PUSH
53426: LD_INT 21
53428: ST_TO_ADDR
// hc_gallery :=  ;
53429: LD_ADDR_OWVAR 33
53433: PUSH
53434: LD_STRING 
53436: ST_TO_ADDR
// animal := CreateHuman ;
53437: LD_ADDR_VAR 0 12
53441: PUSH
53442: CALL_OW 44
53446: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53447: LD_VAR 0 12
53451: PPUSH
53452: LD_VAR 0 8
53456: PPUSH
53457: LD_INT 0
53459: PPUSH
53460: CALL 55466 0 3
// end ;
53464: GO 53418
53466: POP
53467: POP
// if birds then
53468: LD_VAR 0 1
53472: IFFALSE 53539
// for i = 1 to birds do
53474: LD_ADDR_VAR 0 11
53478: PUSH
53479: DOUBLE
53480: LD_INT 1
53482: DEC
53483: ST_TO_ADDR
53484: LD_VAR 0 1
53488: PUSH
53489: FOR_TO
53490: IFFALSE 53537
// begin hc_class = 18 ;
53492: LD_ADDR_OWVAR 28
53496: PUSH
53497: LD_INT 18
53499: ST_TO_ADDR
// hc_gallery =  ;
53500: LD_ADDR_OWVAR 33
53504: PUSH
53505: LD_STRING 
53507: ST_TO_ADDR
// animal := CreateHuman ;
53508: LD_ADDR_VAR 0 12
53512: PUSH
53513: CALL_OW 44
53517: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53518: LD_VAR 0 12
53522: PPUSH
53523: LD_VAR 0 8
53527: PPUSH
53528: LD_INT 0
53530: PPUSH
53531: CALL 55466 0 3
// end ;
53535: GO 53489
53537: POP
53538: POP
// if tigers then
53539: LD_VAR 0 2
53543: IFFALSE 53627
// for i = 1 to tigers do
53545: LD_ADDR_VAR 0 11
53549: PUSH
53550: DOUBLE
53551: LD_INT 1
53553: DEC
53554: ST_TO_ADDR
53555: LD_VAR 0 2
53559: PUSH
53560: FOR_TO
53561: IFFALSE 53625
// begin hc_class = class_tiger ;
53563: LD_ADDR_OWVAR 28
53567: PUSH
53568: LD_INT 14
53570: ST_TO_ADDR
// hc_gallery =  ;
53571: LD_ADDR_OWVAR 33
53575: PUSH
53576: LD_STRING 
53578: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53579: LD_ADDR_OWVAR 35
53583: PUSH
53584: LD_INT 7
53586: NEG
53587: PPUSH
53588: LD_INT 7
53590: PPUSH
53591: CALL_OW 12
53595: ST_TO_ADDR
// animal := CreateHuman ;
53596: LD_ADDR_VAR 0 12
53600: PUSH
53601: CALL_OW 44
53605: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53606: LD_VAR 0 12
53610: PPUSH
53611: LD_VAR 0 8
53615: PPUSH
53616: LD_INT 0
53618: PPUSH
53619: CALL 55466 0 3
// end ;
53623: GO 53560
53625: POP
53626: POP
// if apemans then
53627: LD_VAR 0 3
53631: IFFALSE 53754
// for i = 1 to apemans do
53633: LD_ADDR_VAR 0 11
53637: PUSH
53638: DOUBLE
53639: LD_INT 1
53641: DEC
53642: ST_TO_ADDR
53643: LD_VAR 0 3
53647: PUSH
53648: FOR_TO
53649: IFFALSE 53752
// begin hc_class = class_apeman ;
53651: LD_ADDR_OWVAR 28
53655: PUSH
53656: LD_INT 12
53658: ST_TO_ADDR
// hc_gallery =  ;
53659: LD_ADDR_OWVAR 33
53663: PUSH
53664: LD_STRING 
53666: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
53667: LD_ADDR_OWVAR 35
53671: PUSH
53672: LD_INT 5
53674: NEG
53675: PPUSH
53676: LD_INT 5
53678: PPUSH
53679: CALL_OW 12
53683: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53684: LD_ADDR_OWVAR 31
53688: PUSH
53689: LD_INT 1
53691: PPUSH
53692: LD_INT 3
53694: PPUSH
53695: CALL_OW 12
53699: PUSH
53700: LD_INT 1
53702: PPUSH
53703: LD_INT 3
53705: PPUSH
53706: CALL_OW 12
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: ST_TO_ADDR
// animal := CreateHuman ;
53723: LD_ADDR_VAR 0 12
53727: PUSH
53728: CALL_OW 44
53732: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53733: LD_VAR 0 12
53737: PPUSH
53738: LD_VAR 0 8
53742: PPUSH
53743: LD_INT 0
53745: PPUSH
53746: CALL 55466 0 3
// end ;
53750: GO 53648
53752: POP
53753: POP
// if enchidnas then
53754: LD_VAR 0 4
53758: IFFALSE 53825
// for i = 1 to enchidnas do
53760: LD_ADDR_VAR 0 11
53764: PUSH
53765: DOUBLE
53766: LD_INT 1
53768: DEC
53769: ST_TO_ADDR
53770: LD_VAR 0 4
53774: PUSH
53775: FOR_TO
53776: IFFALSE 53823
// begin hc_class = 13 ;
53778: LD_ADDR_OWVAR 28
53782: PUSH
53783: LD_INT 13
53785: ST_TO_ADDR
// hc_gallery =  ;
53786: LD_ADDR_OWVAR 33
53790: PUSH
53791: LD_STRING 
53793: ST_TO_ADDR
// animal := CreateHuman ;
53794: LD_ADDR_VAR 0 12
53798: PUSH
53799: CALL_OW 44
53803: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53804: LD_VAR 0 12
53808: PPUSH
53809: LD_VAR 0 8
53813: PPUSH
53814: LD_INT 0
53816: PPUSH
53817: CALL 55466 0 3
// end ;
53821: GO 53775
53823: POP
53824: POP
// if fishes then
53825: LD_VAR 0 7
53829: IFFALSE 53896
// for i = 1 to fishes do
53831: LD_ADDR_VAR 0 11
53835: PUSH
53836: DOUBLE
53837: LD_INT 1
53839: DEC
53840: ST_TO_ADDR
53841: LD_VAR 0 7
53845: PUSH
53846: FOR_TO
53847: IFFALSE 53894
// begin hc_class = 20 ;
53849: LD_ADDR_OWVAR 28
53853: PUSH
53854: LD_INT 20
53856: ST_TO_ADDR
// hc_gallery =  ;
53857: LD_ADDR_OWVAR 33
53861: PUSH
53862: LD_STRING 
53864: ST_TO_ADDR
// animal := CreateHuman ;
53865: LD_ADDR_VAR 0 12
53869: PUSH
53870: CALL_OW 44
53874: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53875: LD_VAR 0 12
53879: PPUSH
53880: LD_VAR 0 9
53884: PPUSH
53885: LD_INT 0
53887: PPUSH
53888: CALL 55466 0 3
// end ;
53892: GO 53846
53894: POP
53895: POP
// end ;
53896: LD_VAR 0 10
53900: RET
// export function WantHeal ( sci , unit ) ; begin
53901: LD_INT 0
53903: PPUSH
// if GetTaskList ( sci ) > 0 then
53904: LD_VAR 0 1
53908: PPUSH
53909: CALL_OW 437
53913: PUSH
53914: LD_INT 0
53916: GREATER
53917: IFFALSE 53987
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53919: LD_VAR 0 1
53923: PPUSH
53924: CALL_OW 437
53928: PUSH
53929: LD_INT 1
53931: ARRAY
53932: PUSH
53933: LD_INT 1
53935: ARRAY
53936: PUSH
53937: LD_STRING l
53939: EQUAL
53940: PUSH
53941: LD_VAR 0 1
53945: PPUSH
53946: CALL_OW 437
53950: PUSH
53951: LD_INT 1
53953: ARRAY
53954: PUSH
53955: LD_INT 4
53957: ARRAY
53958: PUSH
53959: LD_VAR 0 2
53963: EQUAL
53964: AND
53965: IFFALSE 53977
// result := true else
53967: LD_ADDR_VAR 0 3
53971: PUSH
53972: LD_INT 1
53974: ST_TO_ADDR
53975: GO 53985
// result := false ;
53977: LD_ADDR_VAR 0 3
53981: PUSH
53982: LD_INT 0
53984: ST_TO_ADDR
// end else
53985: GO 53995
// result := false ;
53987: LD_ADDR_VAR 0 3
53991: PUSH
53992: LD_INT 0
53994: ST_TO_ADDR
// end ;
53995: LD_VAR 0 3
53999: RET
// export function HealTarget ( sci ) ; begin
54000: LD_INT 0
54002: PPUSH
// if not sci then
54003: LD_VAR 0 1
54007: NOT
54008: IFFALSE 54012
// exit ;
54010: GO 54077
// result := 0 ;
54012: LD_ADDR_VAR 0 2
54016: PUSH
54017: LD_INT 0
54019: ST_TO_ADDR
// if GetTaskList ( sci ) then
54020: LD_VAR 0 1
54024: PPUSH
54025: CALL_OW 437
54029: IFFALSE 54077
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54031: LD_VAR 0 1
54035: PPUSH
54036: CALL_OW 437
54040: PUSH
54041: LD_INT 1
54043: ARRAY
54044: PUSH
54045: LD_INT 1
54047: ARRAY
54048: PUSH
54049: LD_STRING l
54051: EQUAL
54052: IFFALSE 54077
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54054: LD_ADDR_VAR 0 2
54058: PUSH
54059: LD_VAR 0 1
54063: PPUSH
54064: CALL_OW 437
54068: PUSH
54069: LD_INT 1
54071: ARRAY
54072: PUSH
54073: LD_INT 4
54075: ARRAY
54076: ST_TO_ADDR
// end ;
54077: LD_VAR 0 2
54081: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54082: LD_INT 0
54084: PPUSH
54085: PPUSH
54086: PPUSH
54087: PPUSH
// if not base_units then
54088: LD_VAR 0 1
54092: NOT
54093: IFFALSE 54097
// exit ;
54095: GO 54184
// result := false ;
54097: LD_ADDR_VAR 0 2
54101: PUSH
54102: LD_INT 0
54104: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54105: LD_ADDR_VAR 0 5
54109: PUSH
54110: LD_VAR 0 1
54114: PPUSH
54115: LD_INT 21
54117: PUSH
54118: LD_INT 3
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PPUSH
54125: CALL_OW 72
54129: ST_TO_ADDR
// if not tmp then
54130: LD_VAR 0 5
54134: NOT
54135: IFFALSE 54139
// exit ;
54137: GO 54184
// for i in tmp do
54139: LD_ADDR_VAR 0 3
54143: PUSH
54144: LD_VAR 0 5
54148: PUSH
54149: FOR_IN
54150: IFFALSE 54182
// begin result := EnemyInRange ( i , 22 ) ;
54152: LD_ADDR_VAR 0 2
54156: PUSH
54157: LD_VAR 0 3
54161: PPUSH
54162: LD_INT 22
54164: PPUSH
54165: CALL 52420 0 2
54169: ST_TO_ADDR
// if result then
54170: LD_VAR 0 2
54174: IFFALSE 54180
// exit ;
54176: POP
54177: POP
54178: GO 54184
// end ;
54180: GO 54149
54182: POP
54183: POP
// end ;
54184: LD_VAR 0 2
54188: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54189: LD_INT 0
54191: PPUSH
54192: PPUSH
// if not units then
54193: LD_VAR 0 1
54197: NOT
54198: IFFALSE 54202
// exit ;
54200: GO 54272
// result := [ ] ;
54202: LD_ADDR_VAR 0 3
54206: PUSH
54207: EMPTY
54208: ST_TO_ADDR
// for i in units do
54209: LD_ADDR_VAR 0 4
54213: PUSH
54214: LD_VAR 0 1
54218: PUSH
54219: FOR_IN
54220: IFFALSE 54270
// if GetTag ( i ) = tag then
54222: LD_VAR 0 4
54226: PPUSH
54227: CALL_OW 110
54231: PUSH
54232: LD_VAR 0 2
54236: EQUAL
54237: IFFALSE 54268
// result := Insert ( result , result + 1 , i ) ;
54239: LD_ADDR_VAR 0 3
54243: PUSH
54244: LD_VAR 0 3
54248: PPUSH
54249: LD_VAR 0 3
54253: PUSH
54254: LD_INT 1
54256: PLUS
54257: PPUSH
54258: LD_VAR 0 4
54262: PPUSH
54263: CALL_OW 2
54267: ST_TO_ADDR
54268: GO 54219
54270: POP
54271: POP
// end ;
54272: LD_VAR 0 3
54276: RET
// export function IsDriver ( un ) ; begin
54277: LD_INT 0
54279: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54280: LD_ADDR_VAR 0 2
54284: PUSH
54285: LD_VAR 0 1
54289: PUSH
54290: LD_INT 55
54292: PUSH
54293: EMPTY
54294: LIST
54295: PPUSH
54296: CALL_OW 69
54300: IN
54301: ST_TO_ADDR
// end ;
54302: LD_VAR 0 2
54306: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54307: LD_INT 0
54309: PPUSH
54310: PPUSH
// list := [ ] ;
54311: LD_ADDR_VAR 0 5
54315: PUSH
54316: EMPTY
54317: ST_TO_ADDR
// case d of 0 :
54318: LD_VAR 0 3
54322: PUSH
54323: LD_INT 0
54325: DOUBLE
54326: EQUAL
54327: IFTRUE 54331
54329: GO 54464
54331: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54332: LD_ADDR_VAR 0 5
54336: PUSH
54337: LD_VAR 0 1
54341: PUSH
54342: LD_INT 4
54344: MINUS
54345: PUSH
54346: LD_VAR 0 2
54350: PUSH
54351: LD_INT 4
54353: MINUS
54354: PUSH
54355: LD_INT 2
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: LIST
54362: PUSH
54363: LD_VAR 0 1
54367: PUSH
54368: LD_INT 3
54370: MINUS
54371: PUSH
54372: LD_VAR 0 2
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: LIST
54384: PUSH
54385: LD_VAR 0 1
54389: PUSH
54390: LD_INT 4
54392: PLUS
54393: PUSH
54394: LD_VAR 0 2
54398: PUSH
54399: LD_INT 4
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: LIST
54406: PUSH
54407: LD_VAR 0 1
54411: PUSH
54412: LD_INT 3
54414: PLUS
54415: PUSH
54416: LD_VAR 0 2
54420: PUSH
54421: LD_INT 3
54423: PLUS
54424: PUSH
54425: LD_INT 5
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: LIST
54432: PUSH
54433: LD_VAR 0 1
54437: PUSH
54438: LD_VAR 0 2
54442: PUSH
54443: LD_INT 4
54445: PLUS
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: LIST
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: ST_TO_ADDR
// end ; 1 :
54462: GO 55162
54464: LD_INT 1
54466: DOUBLE
54467: EQUAL
54468: IFTRUE 54472
54470: GO 54605
54472: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54473: LD_ADDR_VAR 0 5
54477: PUSH
54478: LD_VAR 0 1
54482: PUSH
54483: LD_VAR 0 2
54487: PUSH
54488: LD_INT 4
54490: MINUS
54491: PUSH
54492: LD_INT 3
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: LIST
54499: PUSH
54500: LD_VAR 0 1
54504: PUSH
54505: LD_INT 3
54507: MINUS
54508: PUSH
54509: LD_VAR 0 2
54513: PUSH
54514: LD_INT 3
54516: MINUS
54517: PUSH
54518: LD_INT 2
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: LIST
54525: PUSH
54526: LD_VAR 0 1
54530: PUSH
54531: LD_INT 4
54533: MINUS
54534: PUSH
54535: LD_VAR 0 2
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: LIST
54547: PUSH
54548: LD_VAR 0 1
54552: PUSH
54553: LD_VAR 0 2
54557: PUSH
54558: LD_INT 3
54560: PLUS
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: LIST
54569: PUSH
54570: LD_VAR 0 1
54574: PUSH
54575: LD_INT 4
54577: PLUS
54578: PUSH
54579: LD_VAR 0 2
54583: PUSH
54584: LD_INT 4
54586: PLUS
54587: PUSH
54588: LD_INT 5
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: LIST
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: ST_TO_ADDR
// end ; 2 :
54603: GO 55162
54605: LD_INT 2
54607: DOUBLE
54608: EQUAL
54609: IFTRUE 54613
54611: GO 54742
54613: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54614: LD_ADDR_VAR 0 5
54618: PUSH
54619: LD_VAR 0 1
54623: PUSH
54624: LD_VAR 0 2
54628: PUSH
54629: LD_INT 3
54631: MINUS
54632: PUSH
54633: LD_INT 3
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: LIST
54640: PUSH
54641: LD_VAR 0 1
54645: PUSH
54646: LD_INT 4
54648: PLUS
54649: PUSH
54650: LD_VAR 0 2
54654: PUSH
54655: LD_INT 4
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: LIST
54662: PUSH
54663: LD_VAR 0 1
54667: PUSH
54668: LD_VAR 0 2
54672: PUSH
54673: LD_INT 4
54675: PLUS
54676: PUSH
54677: LD_INT 0
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: LIST
54684: PUSH
54685: LD_VAR 0 1
54689: PUSH
54690: LD_INT 3
54692: MINUS
54693: PUSH
54694: LD_VAR 0 2
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: LIST
54706: PUSH
54707: LD_VAR 0 1
54711: PUSH
54712: LD_INT 4
54714: MINUS
54715: PUSH
54716: LD_VAR 0 2
54720: PUSH
54721: LD_INT 4
54723: MINUS
54724: PUSH
54725: LD_INT 2
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: LIST
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: ST_TO_ADDR
// end ; 3 :
54740: GO 55162
54742: LD_INT 3
54744: DOUBLE
54745: EQUAL
54746: IFTRUE 54750
54748: GO 54883
54750: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54751: LD_ADDR_VAR 0 5
54755: PUSH
54756: LD_VAR 0 1
54760: PUSH
54761: LD_INT 3
54763: PLUS
54764: PUSH
54765: LD_VAR 0 2
54769: PUSH
54770: LD_INT 4
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: LIST
54777: PUSH
54778: LD_VAR 0 1
54782: PUSH
54783: LD_INT 4
54785: PLUS
54786: PUSH
54787: LD_VAR 0 2
54791: PUSH
54792: LD_INT 4
54794: PLUS
54795: PUSH
54796: LD_INT 5
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: LIST
54803: PUSH
54804: LD_VAR 0 1
54808: PUSH
54809: LD_INT 4
54811: MINUS
54812: PUSH
54813: LD_VAR 0 2
54817: PUSH
54818: LD_INT 1
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: LIST
54825: PUSH
54826: LD_VAR 0 1
54830: PUSH
54831: LD_VAR 0 2
54835: PUSH
54836: LD_INT 4
54838: MINUS
54839: PUSH
54840: LD_INT 3
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: LIST
54847: PUSH
54848: LD_VAR 0 1
54852: PUSH
54853: LD_INT 3
54855: MINUS
54856: PUSH
54857: LD_VAR 0 2
54861: PUSH
54862: LD_INT 3
54864: MINUS
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: LIST
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: ST_TO_ADDR
// end ; 4 :
54881: GO 55162
54883: LD_INT 4
54885: DOUBLE
54886: EQUAL
54887: IFTRUE 54891
54889: GO 55024
54891: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54892: LD_ADDR_VAR 0 5
54896: PUSH
54897: LD_VAR 0 1
54901: PUSH
54902: LD_VAR 0 2
54906: PUSH
54907: LD_INT 4
54909: PLUS
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: LIST
54918: PUSH
54919: LD_VAR 0 1
54923: PUSH
54924: LD_INT 3
54926: PLUS
54927: PUSH
54928: LD_VAR 0 2
54932: PUSH
54933: LD_INT 3
54935: PLUS
54936: PUSH
54937: LD_INT 5
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: LIST
54944: PUSH
54945: LD_VAR 0 1
54949: PUSH
54950: LD_INT 4
54952: PLUS
54953: PUSH
54954: LD_VAR 0 2
54958: PUSH
54959: LD_INT 4
54961: PUSH
54962: EMPTY
54963: LIST
54964: LIST
54965: LIST
54966: PUSH
54967: LD_VAR 0 1
54971: PUSH
54972: LD_VAR 0 2
54976: PUSH
54977: LD_INT 3
54979: MINUS
54980: PUSH
54981: LD_INT 3
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: LIST
54988: PUSH
54989: LD_VAR 0 1
54993: PUSH
54994: LD_INT 4
54996: MINUS
54997: PUSH
54998: LD_VAR 0 2
55002: PUSH
55003: LD_INT 4
55005: MINUS
55006: PUSH
55007: LD_INT 2
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: LIST
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: ST_TO_ADDR
// end ; 5 :
55022: GO 55162
55024: LD_INT 5
55026: DOUBLE
55027: EQUAL
55028: IFTRUE 55032
55030: GO 55161
55032: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55033: LD_ADDR_VAR 0 5
55037: PUSH
55038: LD_VAR 0 1
55042: PUSH
55043: LD_INT 4
55045: MINUS
55046: PUSH
55047: LD_VAR 0 2
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: LIST
55059: PUSH
55060: LD_VAR 0 1
55064: PUSH
55065: LD_VAR 0 2
55069: PUSH
55070: LD_INT 4
55072: MINUS
55073: PUSH
55074: LD_INT 3
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: LIST
55081: PUSH
55082: LD_VAR 0 1
55086: PUSH
55087: LD_INT 4
55089: PLUS
55090: PUSH
55091: LD_VAR 0 2
55095: PUSH
55096: LD_INT 4
55098: PLUS
55099: PUSH
55100: LD_INT 5
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: LIST
55107: PUSH
55108: LD_VAR 0 1
55112: PUSH
55113: LD_INT 3
55115: PLUS
55116: PUSH
55117: LD_VAR 0 2
55121: PUSH
55122: LD_INT 4
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: LIST
55129: PUSH
55130: LD_VAR 0 1
55134: PUSH
55135: LD_VAR 0 2
55139: PUSH
55140: LD_INT 3
55142: PLUS
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: LIST
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: ST_TO_ADDR
// end ; end ;
55159: GO 55162
55161: POP
// result := list ;
55162: LD_ADDR_VAR 0 4
55166: PUSH
55167: LD_VAR 0 5
55171: ST_TO_ADDR
// end ;
55172: LD_VAR 0 4
55176: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55177: LD_INT 0
55179: PPUSH
55180: PPUSH
55181: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55182: LD_VAR 0 1
55186: NOT
55187: PUSH
55188: LD_VAR 0 2
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: LD_INT 2
55198: PUSH
55199: LD_INT 3
55201: PUSH
55202: LD_INT 4
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: IN
55211: NOT
55212: OR
55213: IFFALSE 55217
// exit ;
55215: GO 55309
// tmp := [ ] ;
55217: LD_ADDR_VAR 0 5
55221: PUSH
55222: EMPTY
55223: ST_TO_ADDR
// for i in units do
55224: LD_ADDR_VAR 0 4
55228: PUSH
55229: LD_VAR 0 1
55233: PUSH
55234: FOR_IN
55235: IFFALSE 55278
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55237: LD_ADDR_VAR 0 5
55241: PUSH
55242: LD_VAR 0 5
55246: PPUSH
55247: LD_VAR 0 5
55251: PUSH
55252: LD_INT 1
55254: PLUS
55255: PPUSH
55256: LD_VAR 0 4
55260: PPUSH
55261: LD_VAR 0 2
55265: PPUSH
55266: CALL_OW 259
55270: PPUSH
55271: CALL_OW 2
55275: ST_TO_ADDR
55276: GO 55234
55278: POP
55279: POP
// if not tmp then
55280: LD_VAR 0 5
55284: NOT
55285: IFFALSE 55289
// exit ;
55287: GO 55309
// result := SortListByListDesc ( units , tmp ) ;
55289: LD_ADDR_VAR 0 3
55293: PUSH
55294: LD_VAR 0 1
55298: PPUSH
55299: LD_VAR 0 5
55303: PPUSH
55304: CALL_OW 77
55308: ST_TO_ADDR
// end ;
55309: LD_VAR 0 3
55313: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55314: LD_INT 0
55316: PPUSH
55317: PPUSH
55318: PPUSH
// x := GetX ( building ) ;
55319: LD_ADDR_VAR 0 4
55323: PUSH
55324: LD_VAR 0 2
55328: PPUSH
55329: CALL_OW 250
55333: ST_TO_ADDR
// y := GetY ( building ) ;
55334: LD_ADDR_VAR 0 5
55338: PUSH
55339: LD_VAR 0 2
55343: PPUSH
55344: CALL_OW 251
55348: ST_TO_ADDR
// if GetTaskList ( unit ) then
55349: LD_VAR 0 1
55353: PPUSH
55354: CALL_OW 437
55358: IFFALSE 55453
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55360: LD_STRING e
55362: PUSH
55363: LD_VAR 0 1
55367: PPUSH
55368: CALL_OW 437
55372: PUSH
55373: LD_INT 1
55375: ARRAY
55376: PUSH
55377: LD_INT 1
55379: ARRAY
55380: EQUAL
55381: PUSH
55382: LD_VAR 0 4
55386: PUSH
55387: LD_VAR 0 1
55391: PPUSH
55392: CALL_OW 437
55396: PUSH
55397: LD_INT 1
55399: ARRAY
55400: PUSH
55401: LD_INT 2
55403: ARRAY
55404: EQUAL
55405: AND
55406: PUSH
55407: LD_VAR 0 5
55411: PUSH
55412: LD_VAR 0 1
55416: PPUSH
55417: CALL_OW 437
55421: PUSH
55422: LD_INT 1
55424: ARRAY
55425: PUSH
55426: LD_INT 3
55428: ARRAY
55429: EQUAL
55430: AND
55431: IFFALSE 55443
// result := true else
55433: LD_ADDR_VAR 0 3
55437: PUSH
55438: LD_INT 1
55440: ST_TO_ADDR
55441: GO 55451
// result := false ;
55443: LD_ADDR_VAR 0 3
55447: PUSH
55448: LD_INT 0
55450: ST_TO_ADDR
// end else
55451: GO 55461
// result := false ;
55453: LD_ADDR_VAR 0 3
55457: PUSH
55458: LD_INT 0
55460: ST_TO_ADDR
// end ;
55461: LD_VAR 0 3
55465: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55466: LD_INT 0
55468: PPUSH
55469: PPUSH
55470: PPUSH
55471: PPUSH
// if not unit or not area then
55472: LD_VAR 0 1
55476: NOT
55477: PUSH
55478: LD_VAR 0 2
55482: NOT
55483: OR
55484: IFFALSE 55488
// exit ;
55486: GO 55652
// tmp := AreaToList ( area , i ) ;
55488: LD_ADDR_VAR 0 6
55492: PUSH
55493: LD_VAR 0 2
55497: PPUSH
55498: LD_VAR 0 5
55502: PPUSH
55503: CALL_OW 517
55507: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55508: LD_ADDR_VAR 0 5
55512: PUSH
55513: DOUBLE
55514: LD_INT 1
55516: DEC
55517: ST_TO_ADDR
55518: LD_VAR 0 6
55522: PUSH
55523: LD_INT 1
55525: ARRAY
55526: PUSH
55527: FOR_TO
55528: IFFALSE 55650
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55530: LD_ADDR_VAR 0 7
55534: PUSH
55535: LD_VAR 0 6
55539: PUSH
55540: LD_INT 1
55542: ARRAY
55543: PUSH
55544: LD_VAR 0 5
55548: ARRAY
55549: PUSH
55550: LD_VAR 0 6
55554: PUSH
55555: LD_INT 2
55557: ARRAY
55558: PUSH
55559: LD_VAR 0 5
55563: ARRAY
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55569: LD_VAR 0 7
55573: PUSH
55574: LD_INT 1
55576: ARRAY
55577: PPUSH
55578: LD_VAR 0 7
55582: PUSH
55583: LD_INT 2
55585: ARRAY
55586: PPUSH
55587: CALL_OW 428
55591: PUSH
55592: LD_INT 0
55594: EQUAL
55595: IFFALSE 55648
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55597: LD_VAR 0 1
55601: PPUSH
55602: LD_VAR 0 7
55606: PUSH
55607: LD_INT 1
55609: ARRAY
55610: PPUSH
55611: LD_VAR 0 7
55615: PUSH
55616: LD_INT 2
55618: ARRAY
55619: PPUSH
55620: LD_VAR 0 3
55624: PPUSH
55625: CALL_OW 48
// result := IsPlaced ( unit ) ;
55629: LD_ADDR_VAR 0 4
55633: PUSH
55634: LD_VAR 0 1
55638: PPUSH
55639: CALL_OW 305
55643: ST_TO_ADDR
// exit ;
55644: POP
55645: POP
55646: GO 55652
// end ; end ;
55648: GO 55527
55650: POP
55651: POP
// end ;
55652: LD_VAR 0 4
55656: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55657: LD_INT 0
55659: PPUSH
55660: PPUSH
55661: PPUSH
// if not side or side > 8 then
55662: LD_VAR 0 1
55666: NOT
55667: PUSH
55668: LD_VAR 0 1
55672: PUSH
55673: LD_INT 8
55675: GREATER
55676: OR
55677: IFFALSE 55681
// exit ;
55679: GO 55868
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55681: LD_ADDR_VAR 0 4
55685: PUSH
55686: LD_INT 22
55688: PUSH
55689: LD_VAR 0 1
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 21
55700: PUSH
55701: LD_INT 3
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PPUSH
55712: CALL_OW 69
55716: ST_TO_ADDR
// if not tmp then
55717: LD_VAR 0 4
55721: NOT
55722: IFFALSE 55726
// exit ;
55724: GO 55868
// enable_addtolog := true ;
55726: LD_ADDR_OWVAR 81
55730: PUSH
55731: LD_INT 1
55733: ST_TO_ADDR
// AddToLog ( [ ) ;
55734: LD_STRING [
55736: PPUSH
55737: CALL_OW 561
// for i in tmp do
55741: LD_ADDR_VAR 0 3
55745: PUSH
55746: LD_VAR 0 4
55750: PUSH
55751: FOR_IN
55752: IFFALSE 55859
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55754: LD_STRING [
55756: PUSH
55757: LD_VAR 0 3
55761: PPUSH
55762: CALL_OW 266
55766: STR
55767: PUSH
55768: LD_STRING , 
55770: STR
55771: PUSH
55772: LD_VAR 0 3
55776: PPUSH
55777: CALL_OW 250
55781: STR
55782: PUSH
55783: LD_STRING , 
55785: STR
55786: PUSH
55787: LD_VAR 0 3
55791: PPUSH
55792: CALL_OW 251
55796: STR
55797: PUSH
55798: LD_STRING , 
55800: STR
55801: PUSH
55802: LD_VAR 0 3
55806: PPUSH
55807: CALL_OW 254
55811: STR
55812: PUSH
55813: LD_STRING , 
55815: STR
55816: PUSH
55817: LD_VAR 0 3
55821: PPUSH
55822: LD_INT 1
55824: PPUSH
55825: CALL_OW 268
55829: STR
55830: PUSH
55831: LD_STRING , 
55833: STR
55834: PUSH
55835: LD_VAR 0 3
55839: PPUSH
55840: LD_INT 2
55842: PPUSH
55843: CALL_OW 268
55847: STR
55848: PUSH
55849: LD_STRING ],
55851: STR
55852: PPUSH
55853: CALL_OW 561
// end ;
55857: GO 55751
55859: POP
55860: POP
// AddToLog ( ]; ) ;
55861: LD_STRING ];
55863: PPUSH
55864: CALL_OW 561
// end ;
55868: LD_VAR 0 2
55872: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55873: LD_INT 0
55875: PPUSH
55876: PPUSH
55877: PPUSH
55878: PPUSH
55879: PPUSH
// if not area or not rate or not max then
55880: LD_VAR 0 1
55884: NOT
55885: PUSH
55886: LD_VAR 0 2
55890: NOT
55891: OR
55892: PUSH
55893: LD_VAR 0 4
55897: NOT
55898: OR
55899: IFFALSE 55903
// exit ;
55901: GO 56095
// while 1 do
55903: LD_INT 1
55905: IFFALSE 56095
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55907: LD_ADDR_VAR 0 9
55911: PUSH
55912: LD_VAR 0 1
55916: PPUSH
55917: LD_INT 1
55919: PPUSH
55920: CALL_OW 287
55924: PUSH
55925: LD_INT 10
55927: MUL
55928: ST_TO_ADDR
// r := rate / 10 ;
55929: LD_ADDR_VAR 0 7
55933: PUSH
55934: LD_VAR 0 2
55938: PUSH
55939: LD_INT 10
55941: DIVREAL
55942: ST_TO_ADDR
// time := 1 1$00 ;
55943: LD_ADDR_VAR 0 8
55947: PUSH
55948: LD_INT 2100
55950: ST_TO_ADDR
// if amount < min then
55951: LD_VAR 0 9
55955: PUSH
55956: LD_VAR 0 3
55960: LESS
55961: IFFALSE 55979
// r := r * 2 else
55963: LD_ADDR_VAR 0 7
55967: PUSH
55968: LD_VAR 0 7
55972: PUSH
55973: LD_INT 2
55975: MUL
55976: ST_TO_ADDR
55977: GO 56005
// if amount > max then
55979: LD_VAR 0 9
55983: PUSH
55984: LD_VAR 0 4
55988: GREATER
55989: IFFALSE 56005
// r := r / 2 ;
55991: LD_ADDR_VAR 0 7
55995: PUSH
55996: LD_VAR 0 7
56000: PUSH
56001: LD_INT 2
56003: DIVREAL
56004: ST_TO_ADDR
// time := time / r ;
56005: LD_ADDR_VAR 0 8
56009: PUSH
56010: LD_VAR 0 8
56014: PUSH
56015: LD_VAR 0 7
56019: DIVREAL
56020: ST_TO_ADDR
// if time < 0 then
56021: LD_VAR 0 8
56025: PUSH
56026: LD_INT 0
56028: LESS
56029: IFFALSE 56046
// time := time * - 1 ;
56031: LD_ADDR_VAR 0 8
56035: PUSH
56036: LD_VAR 0 8
56040: PUSH
56041: LD_INT 1
56043: NEG
56044: MUL
56045: ST_TO_ADDR
// wait ( time ) ;
56046: LD_VAR 0 8
56050: PPUSH
56051: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56055: LD_INT 35
56057: PPUSH
56058: LD_INT 875
56060: PPUSH
56061: CALL_OW 12
56065: PPUSH
56066: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56070: LD_INT 1
56072: PPUSH
56073: LD_INT 5
56075: PPUSH
56076: CALL_OW 12
56080: PPUSH
56081: LD_VAR 0 1
56085: PPUSH
56086: LD_INT 1
56088: PPUSH
56089: CALL_OW 55
// end ;
56093: GO 55903
// end ;
56095: LD_VAR 0 5
56099: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56100: LD_INT 0
56102: PPUSH
56103: PPUSH
56104: PPUSH
56105: PPUSH
56106: PPUSH
56107: PPUSH
56108: PPUSH
56109: PPUSH
// if not turrets or not factories then
56110: LD_VAR 0 1
56114: NOT
56115: PUSH
56116: LD_VAR 0 2
56120: NOT
56121: OR
56122: IFFALSE 56126
// exit ;
56124: GO 56433
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56126: LD_ADDR_VAR 0 10
56130: PUSH
56131: LD_INT 5
56133: PUSH
56134: LD_INT 6
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 2
56143: PUSH
56144: LD_INT 4
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 3
56153: PUSH
56154: LD_INT 5
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 24
56168: PUSH
56169: LD_INT 25
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 23
56178: PUSH
56179: LD_INT 27
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 42
56192: PUSH
56193: LD_INT 43
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 44
56202: PUSH
56203: LD_INT 46
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 45
56212: PUSH
56213: LD_INT 47
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: LIST
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: LIST
56229: ST_TO_ADDR
// result := [ ] ;
56230: LD_ADDR_VAR 0 3
56234: PUSH
56235: EMPTY
56236: ST_TO_ADDR
// for i in turrets do
56237: LD_ADDR_VAR 0 4
56241: PUSH
56242: LD_VAR 0 1
56246: PUSH
56247: FOR_IN
56248: IFFALSE 56431
// begin nat := GetNation ( i ) ;
56250: LD_ADDR_VAR 0 7
56254: PUSH
56255: LD_VAR 0 4
56259: PPUSH
56260: CALL_OW 248
56264: ST_TO_ADDR
// weapon := 0 ;
56265: LD_ADDR_VAR 0 8
56269: PUSH
56270: LD_INT 0
56272: ST_TO_ADDR
// if not nat then
56273: LD_VAR 0 7
56277: NOT
56278: IFFALSE 56282
// continue ;
56280: GO 56247
// for j in list [ nat ] do
56282: LD_ADDR_VAR 0 5
56286: PUSH
56287: LD_VAR 0 10
56291: PUSH
56292: LD_VAR 0 7
56296: ARRAY
56297: PUSH
56298: FOR_IN
56299: IFFALSE 56340
// if GetBWeapon ( i ) = j [ 1 ] then
56301: LD_VAR 0 4
56305: PPUSH
56306: CALL_OW 269
56310: PUSH
56311: LD_VAR 0 5
56315: PUSH
56316: LD_INT 1
56318: ARRAY
56319: EQUAL
56320: IFFALSE 56338
// begin weapon := j [ 2 ] ;
56322: LD_ADDR_VAR 0 8
56326: PUSH
56327: LD_VAR 0 5
56331: PUSH
56332: LD_INT 2
56334: ARRAY
56335: ST_TO_ADDR
// break ;
56336: GO 56340
// end ;
56338: GO 56298
56340: POP
56341: POP
// if not weapon then
56342: LD_VAR 0 8
56346: NOT
56347: IFFALSE 56351
// continue ;
56349: GO 56247
// for k in factories do
56351: LD_ADDR_VAR 0 6
56355: PUSH
56356: LD_VAR 0 2
56360: PUSH
56361: FOR_IN
56362: IFFALSE 56427
// begin weapons := AvailableWeaponList ( k ) ;
56364: LD_ADDR_VAR 0 9
56368: PUSH
56369: LD_VAR 0 6
56373: PPUSH
56374: CALL_OW 478
56378: ST_TO_ADDR
// if not weapons then
56379: LD_VAR 0 9
56383: NOT
56384: IFFALSE 56388
// continue ;
56386: GO 56361
// if weapon in weapons then
56388: LD_VAR 0 8
56392: PUSH
56393: LD_VAR 0 9
56397: IN
56398: IFFALSE 56425
// begin result := [ i , weapon ] ;
56400: LD_ADDR_VAR 0 3
56404: PUSH
56405: LD_VAR 0 4
56409: PUSH
56410: LD_VAR 0 8
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: ST_TO_ADDR
// exit ;
56419: POP
56420: POP
56421: POP
56422: POP
56423: GO 56433
// end ; end ;
56425: GO 56361
56427: POP
56428: POP
// end ;
56429: GO 56247
56431: POP
56432: POP
// end ;
56433: LD_VAR 0 3
56437: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56438: LD_INT 0
56440: PPUSH
// if not side or side > 8 then
56441: LD_VAR 0 3
56445: NOT
56446: PUSH
56447: LD_VAR 0 3
56451: PUSH
56452: LD_INT 8
56454: GREATER
56455: OR
56456: IFFALSE 56460
// exit ;
56458: GO 56519
// if not range then
56460: LD_VAR 0 4
56464: NOT
56465: IFFALSE 56476
// range := - 12 ;
56467: LD_ADDR_VAR 0 4
56471: PUSH
56472: LD_INT 12
56474: NEG
56475: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56476: LD_VAR 0 1
56480: PPUSH
56481: LD_VAR 0 2
56485: PPUSH
56486: LD_VAR 0 3
56490: PPUSH
56491: LD_VAR 0 4
56495: PPUSH
56496: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56500: LD_VAR 0 1
56504: PPUSH
56505: LD_VAR 0 2
56509: PPUSH
56510: LD_VAR 0 3
56514: PPUSH
56515: CALL_OW 331
// end ;
56519: LD_VAR 0 5
56523: RET
// export function Video ( mode ) ; begin
56524: LD_INT 0
56526: PPUSH
// ingame_video = mode ;
56527: LD_ADDR_OWVAR 52
56531: PUSH
56532: LD_VAR 0 1
56536: ST_TO_ADDR
// interface_hidden = mode ;
56537: LD_ADDR_OWVAR 54
56541: PUSH
56542: LD_VAR 0 1
56546: ST_TO_ADDR
// end ;
56547: LD_VAR 0 2
56551: RET
// export function Join ( array , element ) ; begin
56552: LD_INT 0
56554: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56555: LD_ADDR_VAR 0 3
56559: PUSH
56560: LD_VAR 0 1
56564: PPUSH
56565: LD_VAR 0 1
56569: PUSH
56570: LD_INT 1
56572: PLUS
56573: PPUSH
56574: LD_VAR 0 2
56578: PPUSH
56579: CALL_OW 1
56583: ST_TO_ADDR
// end ;
56584: LD_VAR 0 3
56588: RET
// export function JoinUnion ( array , element ) ; begin
56589: LD_INT 0
56591: PPUSH
// result := array union element ;
56592: LD_ADDR_VAR 0 3
56596: PUSH
56597: LD_VAR 0 1
56601: PUSH
56602: LD_VAR 0 2
56606: UNION
56607: ST_TO_ADDR
// end ;
56608: LD_VAR 0 3
56612: RET
// export function GetBehemoths ( side ) ; begin
56613: LD_INT 0
56615: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56616: LD_ADDR_VAR 0 2
56620: PUSH
56621: LD_INT 22
56623: PUSH
56624: LD_VAR 0 1
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 31
56635: PUSH
56636: LD_INT 25
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PPUSH
56647: CALL_OW 69
56651: ST_TO_ADDR
// end ;
56652: LD_VAR 0 2
56656: RET
// export function Shuffle ( array ) ; var i , index ; begin
56657: LD_INT 0
56659: PPUSH
56660: PPUSH
56661: PPUSH
// result := [ ] ;
56662: LD_ADDR_VAR 0 2
56666: PUSH
56667: EMPTY
56668: ST_TO_ADDR
// if not array then
56669: LD_VAR 0 1
56673: NOT
56674: IFFALSE 56678
// exit ;
56676: GO 56777
// Randomize ;
56678: CALL_OW 10
// for i = array downto 1 do
56682: LD_ADDR_VAR 0 3
56686: PUSH
56687: DOUBLE
56688: LD_VAR 0 1
56692: INC
56693: ST_TO_ADDR
56694: LD_INT 1
56696: PUSH
56697: FOR_DOWNTO
56698: IFFALSE 56775
// begin index := rand ( 1 , array ) ;
56700: LD_ADDR_VAR 0 4
56704: PUSH
56705: LD_INT 1
56707: PPUSH
56708: LD_VAR 0 1
56712: PPUSH
56713: CALL_OW 12
56717: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56718: LD_ADDR_VAR 0 2
56722: PUSH
56723: LD_VAR 0 2
56727: PPUSH
56728: LD_VAR 0 2
56732: PUSH
56733: LD_INT 1
56735: PLUS
56736: PPUSH
56737: LD_VAR 0 1
56741: PUSH
56742: LD_VAR 0 4
56746: ARRAY
56747: PPUSH
56748: CALL_OW 2
56752: ST_TO_ADDR
// array := Delete ( array , index ) ;
56753: LD_ADDR_VAR 0 1
56757: PUSH
56758: LD_VAR 0 1
56762: PPUSH
56763: LD_VAR 0 4
56767: PPUSH
56768: CALL_OW 3
56772: ST_TO_ADDR
// end ;
56773: GO 56697
56775: POP
56776: POP
// end ;
56777: LD_VAR 0 2
56781: RET
// export function GetBaseMaterials ( base ) ; begin
56782: LD_INT 0
56784: PPUSH
// result := [ 0 , 0 , 0 ] ;
56785: LD_ADDR_VAR 0 2
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: LD_INT 0
56798: PUSH
56799: EMPTY
56800: LIST
56801: LIST
56802: LIST
56803: ST_TO_ADDR
// if not base then
56804: LD_VAR 0 1
56808: NOT
56809: IFFALSE 56813
// exit ;
56811: GO 56862
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56813: LD_ADDR_VAR 0 2
56817: PUSH
56818: LD_VAR 0 1
56822: PPUSH
56823: LD_INT 1
56825: PPUSH
56826: CALL_OW 275
56830: PUSH
56831: LD_VAR 0 1
56835: PPUSH
56836: LD_INT 2
56838: PPUSH
56839: CALL_OW 275
56843: PUSH
56844: LD_VAR 0 1
56848: PPUSH
56849: LD_INT 3
56851: PPUSH
56852: CALL_OW 275
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: LIST
56861: ST_TO_ADDR
// end ;
56862: LD_VAR 0 2
56866: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56867: LD_INT 0
56869: PPUSH
56870: PPUSH
// result := array ;
56871: LD_ADDR_VAR 0 3
56875: PUSH
56876: LD_VAR 0 1
56880: ST_TO_ADDR
// if size > 0 then
56881: LD_VAR 0 2
56885: PUSH
56886: LD_INT 0
56888: GREATER
56889: IFFALSE 56935
// for i := array downto size do
56891: LD_ADDR_VAR 0 4
56895: PUSH
56896: DOUBLE
56897: LD_VAR 0 1
56901: INC
56902: ST_TO_ADDR
56903: LD_VAR 0 2
56907: PUSH
56908: FOR_DOWNTO
56909: IFFALSE 56933
// result := Delete ( result , result ) ;
56911: LD_ADDR_VAR 0 3
56915: PUSH
56916: LD_VAR 0 3
56920: PPUSH
56921: LD_VAR 0 3
56925: PPUSH
56926: CALL_OW 3
56930: ST_TO_ADDR
56931: GO 56908
56933: POP
56934: POP
// end ;
56935: LD_VAR 0 3
56939: RET
// export function ComExit ( unit ) ; var tmp ; begin
56940: LD_INT 0
56942: PPUSH
56943: PPUSH
// if not IsInUnit ( unit ) then
56944: LD_VAR 0 1
56948: PPUSH
56949: CALL_OW 310
56953: NOT
56954: IFFALSE 56958
// exit ;
56956: GO 57018
// tmp := IsInUnit ( unit ) ;
56958: LD_ADDR_VAR 0 3
56962: PUSH
56963: LD_VAR 0 1
56967: PPUSH
56968: CALL_OW 310
56972: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56973: LD_VAR 0 3
56977: PPUSH
56978: CALL_OW 247
56982: PUSH
56983: LD_INT 2
56985: EQUAL
56986: IFFALSE 56999
// ComExitVehicle ( unit ) else
56988: LD_VAR 0 1
56992: PPUSH
56993: CALL_OW 121
56997: GO 57008
// ComExitBuilding ( unit ) ;
56999: LD_VAR 0 1
57003: PPUSH
57004: CALL_OW 122
// result := tmp ;
57008: LD_ADDR_VAR 0 2
57012: PUSH
57013: LD_VAR 0 3
57017: ST_TO_ADDR
// end ;
57018: LD_VAR 0 2
57022: RET
// export function ResetHc ; begin
57023: LD_INT 0
57025: PPUSH
// InitHc ;
57026: CALL_OW 19
// hc_importance := 0 ;
57030: LD_ADDR_OWVAR 32
57034: PUSH
57035: LD_INT 0
57037: ST_TO_ADDR
// end ;
57038: LD_VAR 0 1
57042: RET
