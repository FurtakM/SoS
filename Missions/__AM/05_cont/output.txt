// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 87 0 0
// InitRestrictions ;
  19: CALL 223 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 304 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 798 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 798 0 2
// CreateNature ;
  74: CALL 531 0 0
// PrepareAmericans ;
  78: CALL 1397 0 0
// Action ;
  82: CALL 2333 0 0
// end ;
  86: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter , traitor ; function Init ; begin
  87: LD_INT 0
  89: PPUSH
// debug := false ;
  90: LD_ADDR_EXP 1
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// mission_prefix := 05_ ;
  98: LD_ADDR_EXP 2
 102: PUSH
 103: LD_STRING 05_
 105: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 106: LD_ADDR_EXP 3
 110: PUSH
 111: LD_STRING 05a_
 113: ST_TO_ADDR
// deltaBuilded := false ;
 114: LD_ADDR_EXP 4
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// denisArrives := false ;
 122: LD_ADDR_EXP 5
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// radar_allowed := false ;
 130: LD_ADDR_EXP 7
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// first_apeman_tamed := false ;
 138: LD_ADDR_EXP 8
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// arab_spotted := false ;
 146: LD_ADDR_EXP 13
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// end_mission := false ;
 154: LD_ADDR_EXP 14
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// apeman_army := false ;
 162: LD_ADDR_EXP 9
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// radar_researched := false ;
 170: LD_ADDR_EXP 10
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// radar_builded := false ;
 178: LD_ADDR_EXP 11
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// apeman_counter := 0 ;
 186: LD_ADDR_EXP 12
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// Delta := 0 ;
 194: LD_ADDR_EXP 6
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// apeKillCounter := 0 ;
 202: LD_ADDR_EXP 15
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// traitor := false ;
 210: LD_ADDR_EXP 16
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// end ;
 218: LD_VAR 0 1
 222: RET
// function InitRestrictions ; begin
 223: LD_INT 0
 225: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 226: LD_INT 7
 228: PPUSH
 229: LD_INT 1
 231: PPUSH
 232: LD_INT 1
 234: PPUSH
 235: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 239: LD_INT 8
 241: PPUSH
 242: LD_INT 1
 244: PPUSH
 245: LD_INT 1
 247: PPUSH
 248: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 252: LD_INT 10
 254: PPUSH
 255: LD_INT 1
 257: PPUSH
 258: LD_INT 1
 260: PPUSH
 261: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 265: LD_INT 69
 267: PPUSH
 268: LD_INT 1
 270: PPUSH
 271: LD_STRING GatlingInGamma
 273: PPUSH
 274: LD_INT 1
 276: PPUSH
 277: CALL_OW 30
 281: PPUSH
 282: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 286: LD_INT 51
 288: PPUSH
 289: LD_INT 1
 291: PPUSH
 292: LD_INT 1
 294: PPUSH
 295: CALL_OW 322
// end ;
 299: LD_VAR 0 1
 303: RET
// function DebugMode ; begin
 304: LD_INT 0
 306: PPUSH
// FogOff ( 1 ) ;
 307: LD_INT 1
 309: PPUSH
 310: CALL_OW 344
// Difficulty := 2 ;
 314: LD_ADDR_OWVAR 67
 318: PUSH
 319: LD_INT 2
 321: ST_TO_ADDR
// end ;
 322: LD_VAR 0 1
 326: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 327: LD_INT 22
 329: PUSH
 330: LD_INT 1
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: PUSH
 337: LD_INT 23
 339: PUSH
 340: LD_INT 0
 342: PUSH
 343: EMPTY
 344: LIST
 345: LIST
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PPUSH
 351: CALL_OW 69
 355: PUSH
 356: LD_INT 7
 358: GREATEREQUAL
 359: IFFALSE 371
 361: GO 363
 363: DISABLE
// SetAchievement ( ACH_TAME ) ;
 364: LD_STRING ACH_TAME
 366: PPUSH
 367: CALL_OW 543
 371: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 372: LD_INT 22
 374: PUSH
 375: LD_INT 1
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: PUSH
 382: LD_INT 35
 384: PUSH
 385: LD_INT 11
 387: PUSH
 388: EMPTY
 389: LIST
 390: LIST
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PPUSH
 396: CALL_OW 69
 400: PUSH
 401: LD_INT 22
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 34
 413: PUSH
 414: LD_INT 11
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PPUSH
 425: CALL_OW 69
 429: AND
 430: IFFALSE 442
 432: GO 434
 434: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 435: LD_STRING ACH_RADAR
 437: PPUSH
 438: CALL_OW 543
 442: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 443: LD_INT 0
 445: PPUSH
// uc_side := side ;
 446: LD_ADDR_OWVAR 20
 450: PUSH
 451: LD_VAR 0 1
 455: ST_TO_ADDR
// uc_nation := nation ;
 456: LD_ADDR_OWVAR 21
 460: PUSH
 461: LD_VAR 0 2
 465: ST_TO_ADDR
// vc_chassis := chassis ;
 466: LD_ADDR_OWVAR 37
 470: PUSH
 471: LD_VAR 0 3
 475: ST_TO_ADDR
// vc_engine := engine ;
 476: LD_ADDR_OWVAR 39
 480: PUSH
 481: LD_VAR 0 4
 485: ST_TO_ADDR
// vc_control := control ;
 486: LD_ADDR_OWVAR 38
 490: PUSH
 491: LD_VAR 0 5
 495: ST_TO_ADDR
// vc_weapon := weapon ;
 496: LD_ADDR_OWVAR 40
 500: PUSH
 501: LD_VAR 0 6
 505: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 506: LD_ADDR_OWVAR 41
 510: PUSH
 511: LD_VAR 0 7
 515: ST_TO_ADDR
// result := CreateVehicle ;
 516: LD_ADDR_VAR 0 8
 520: PUSH
 521: CALL_OW 45
 525: ST_TO_ADDR
// end ;
 526: LD_VAR 0 8
 530: RET
// export function CreateNature ; var i ; begin
 531: LD_INT 0
 533: PPUSH
 534: PPUSH
// for i := 1 to 4 do
 535: LD_ADDR_VAR 0 2
 539: PUSH
 540: DOUBLE
 541: LD_INT 1
 543: DEC
 544: ST_TO_ADDR
 545: LD_INT 4
 547: PUSH
 548: FOR_TO
 549: IFFALSE 572
// begin PrepareFrog ( ) ;
 551: CALL 64453 0 0
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 555: CALL_OW 44
 559: PPUSH
 560: LD_INT 17
 562: PPUSH
 563: LD_INT 0
 565: PPUSH
 566: CALL_OW 49
// end ;
 570: GO 548
 572: POP
 573: POP
// for i := 1 to 6 do
 574: LD_ADDR_VAR 0 2
 578: PUSH
 579: DOUBLE
 580: LD_INT 1
 582: DEC
 583: ST_TO_ADDR
 584: LD_INT 6
 586: PUSH
 587: FOR_TO
 588: IFFALSE 611
// begin PrepareBird ( ) ;
 590: CALL 64533 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 594: CALL_OW 44
 598: PPUSH
 599: LD_INT 1
 601: PPUSH
 602: LD_INT 0
 604: PPUSH
 605: CALL_OW 49
// end ;
 609: GO 587
 611: POP
 612: POP
// for i := 1 to 11 do
 613: LD_ADDR_VAR 0 2
 617: PUSH
 618: DOUBLE
 619: LD_INT 1
 621: DEC
 622: ST_TO_ADDR
 623: LD_INT 11
 625: PUSH
 626: FOR_TO
 627: IFFALSE 650
// begin PrepareEnchidna ( ) ;
 629: CALL 64413 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 633: CALL_OW 44
 637: PPUSH
 638: LD_INT 1
 640: PPUSH
 641: LD_INT 0
 643: PPUSH
 644: CALL_OW 49
// end ;
 648: GO 626
 650: POP
 651: POP
// for i := 1 to 3 do
 652: LD_ADDR_VAR 0 2
 656: PUSH
 657: DOUBLE
 658: LD_INT 1
 660: DEC
 661: ST_TO_ADDR
 662: LD_INT 3
 664: PUSH
 665: FOR_TO
 666: IFFALSE 692
// begin PrepareTiger ( 10 ) ;
 668: LD_INT 10
 670: PPUSH
 671: CALL 64352 0 1
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 675: CALL_OW 44
 679: PPUSH
 680: LD_INT 1
 682: PPUSH
 683: LD_INT 0
 685: PPUSH
 686: CALL_OW 49
// end ;
 690: GO 665
 692: POP
 693: POP
// PrepareMastodont ( ) ;
 694: CALL 64613 0 0
// PlaceUnitArea ( CreateVehicle , mastodontArea , false ) ;
 698: CALL_OW 45
 702: PPUSH
 703: LD_INT 18
 705: PPUSH
 706: LD_INT 0
 708: PPUSH
 709: CALL_OW 49
// end ;
 713: LD_VAR 0 1
 717: RET
// export function SayX ( units , ident ) ; var i ; begin
 718: LD_INT 0
 720: PPUSH
 721: PPUSH
// result := false ;
 722: LD_ADDR_VAR 0 3
 726: PUSH
 727: LD_INT 0
 729: ST_TO_ADDR
// if not units then
 730: LD_VAR 0 1
 734: NOT
 735: IFFALSE 739
// exit ;
 737: GO 793
// for i in units do
 739: LD_ADDR_VAR 0 4
 743: PUSH
 744: LD_VAR 0 1
 748: PUSH
 749: FOR_IN
 750: IFFALSE 791
// if IsOk ( i ) then
 752: LD_VAR 0 4
 756: PPUSH
 757: CALL_OW 302
 761: IFFALSE 789
// begin Say ( i , ident ) ;
 763: LD_VAR 0 4
 767: PPUSH
 768: LD_VAR 0 2
 772: PPUSH
 773: CALL_OW 88
// result := i ;
 777: LD_ADDR_VAR 0 3
 781: PUSH
 782: LD_VAR 0 4
 786: ST_TO_ADDR
// break ;
 787: GO 791
// end ;
 789: GO 749
 791: POP
 792: POP
// end ;
 793: LD_VAR 0 3
 797: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 798: LD_INT 0
 800: PPUSH
 801: PPUSH
// InitUc ;
 802: CALL_OW 18
// InitHc ;
 806: CALL_OW 19
// uc_side := 0 ;
 810: LD_ADDR_OWVAR 20
 814: PUSH
 815: LD_INT 0
 817: ST_TO_ADDR
// uc_nation := 0 ;
 818: LD_ADDR_OWVAR 21
 822: PUSH
 823: LD_INT 0
 825: ST_TO_ADDR
// for i = 1 to amount do
 826: LD_ADDR_VAR 0 4
 830: PUSH
 831: DOUBLE
 832: LD_INT 1
 834: DEC
 835: ST_TO_ADDR
 836: LD_VAR 0 2
 840: PUSH
 841: FOR_TO
 842: IFFALSE 924
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 844: LD_ADDR_OWVAR 29
 848: PUSH
 849: LD_INT 9
 851: PPUSH
 852: LD_INT 12
 854: PPUSH
 855: CALL_OW 12
 859: PUSH
 860: LD_INT 9
 862: PPUSH
 863: LD_INT 12
 865: PPUSH
 866: CALL_OW 12
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 875: LD_ADDR_OWVAR 35
 879: PUSH
 880: LD_INT 5
 882: NEG
 883: PPUSH
 884: LD_INT 5
 886: PPUSH
 887: CALL_OW 12
 891: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 892: LD_INT 0
 894: PPUSH
 895: LD_INT 12
 897: PPUSH
 898: LD_INT 1
 900: PPUSH
 901: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 905: CALL_OW 44
 909: PPUSH
 910: LD_VAR 0 1
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: CALL_OW 49
// end ;
 922: GO 841
 924: POP
 925: POP
// InitHc ;
 926: CALL_OW 19
// end ;
 930: LD_VAR 0 3
 934: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 935: LD_INT 0
 937: PPUSH
 938: PPUSH
 939: PPUSH
// if not unit then
 940: LD_VAR 0 1
 944: NOT
 945: IFFALSE 949
// exit ;
 947: GO 1392
// if IsInUnit ( unit ) then
 949: LD_VAR 0 1
 953: PPUSH
 954: CALL_OW 310
 958: IFFALSE 975
// unit := IsDrivenBy ( unit ) ;
 960: LD_ADDR_VAR 0 1
 964: PUSH
 965: LD_VAR 0 1
 969: PPUSH
 970: CALL_OW 311
 974: ST_TO_ADDR
// targets_list := [ ] ;
 975: LD_ADDR_VAR 0 5
 979: PUSH
 980: EMPTY
 981: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 982: LD_ADDR_VAR 0 4
 986: PUSH
 987: LD_VAR 0 2
 991: PPUSH
 992: LD_INT 24
 994: PUSH
 995: LD_INT 250
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: PUSH
1002: LD_INT 3
1004: PUSH
1005: LD_INT 34
1007: PUSH
1008: LD_INT 12
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: PUSH
1015: EMPTY
1016: LIST
1017: LIST
1018: PUSH
1019: LD_INT 21
1021: PUSH
1022: LD_INT 2
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: PUSH
1029: LD_INT 58
1031: PUSH
1032: EMPTY
1033: LIST
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: LIST
1039: LIST
1040: PPUSH
1041: CALL_OW 72
1045: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
1046: LD_VAR 0 4
1050: PPUSH
1051: LD_VAR 0 1
1055: PPUSH
1056: CALL_OW 74
1060: PPUSH
1061: LD_VAR 0 1
1065: PPUSH
1066: CALL_OW 296
1070: PUSH
1071: LD_INT 11
1073: LESS
1074: PUSH
1075: LD_VAR 0 1
1079: PPUSH
1080: CALL_OW 310
1084: NOT
1085: AND
1086: IFFALSE 1114
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1088: LD_VAR 0 1
1092: PPUSH
1093: LD_VAR 0 4
1097: PPUSH
1098: LD_VAR 0 1
1102: PPUSH
1103: CALL_OW 74
1107: PPUSH
1108: CALL_OW 120
// exit ;
1112: GO 1392
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
1114: LD_ADDR_VAR 0 5
1118: PUSH
1119: LD_VAR 0 2
1123: PPUSH
1124: LD_INT 21
1126: PUSH
1127: LD_INT 1
1129: PUSH
1130: EMPTY
1131: LIST
1132: LIST
1133: PUSH
1134: LD_INT 3
1136: PUSH
1137: LD_INT 54
1139: PUSH
1140: EMPTY
1141: LIST
1142: PUSH
1143: EMPTY
1144: LIST
1145: LIST
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: PPUSH
1151: CALL_OW 72
1155: PUSH
1156: LD_VAR 0 2
1160: PPUSH
1161: LD_INT 21
1163: PUSH
1164: LD_INT 2
1166: PUSH
1167: EMPTY
1168: LIST
1169: LIST
1170: PPUSH
1171: CALL_OW 72
1175: PUSH
1176: LD_VAR 0 2
1180: PPUSH
1181: LD_INT 21
1183: PUSH
1184: LD_INT 3
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: LD_INT 3
1193: PUSH
1194: LD_INT 58
1196: PUSH
1197: EMPTY
1198: LIST
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: PUSH
1204: EMPTY
1205: LIST
1206: LIST
1207: PPUSH
1208: CALL_OW 72
1212: PUSH
1213: LD_VAR 0 2
1217: PUSH
1218: EMPTY
1219: LIST
1220: LIST
1221: LIST
1222: LIST
1223: ST_TO_ADDR
// for target in targets_list do
1224: LD_ADDR_VAR 0 4
1228: PUSH
1229: LD_VAR 0 5
1233: PUSH
1234: FOR_IN
1235: IFFALSE 1390
// begin if target then
1237: LD_VAR 0 4
1241: IFFALSE 1388
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1243: LD_VAR 0 1
1247: PPUSH
1248: CALL_OW 110
1252: PUSH
1253: LD_INT 11
1255: EQUAL
1256: PUSH
1257: LD_VAR 0 4
1261: PPUSH
1262: LD_VAR 0 1
1266: PPUSH
1267: CALL_OW 74
1271: PPUSH
1272: CALL_OW 247
1276: PUSH
1277: LD_INT 3
1279: EQUAL
1280: PUSH
1281: LD_VAR 0 4
1285: PPUSH
1286: LD_VAR 0 1
1290: PPUSH
1291: CALL_OW 74
1295: PPUSH
1296: CALL_OW 264
1300: PUSH
1301: LD_INT 12
1303: EQUAL
1304: OR
1305: AND
1306: IFFALSE 1352
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1308: LD_VAR 0 1
1312: PPUSH
1313: LD_INT 0
1315: PPUSH
1316: LD_INT 0
1318: PPUSH
1319: LD_VAR 0 4
1323: PPUSH
1324: LD_VAR 0 1
1328: PPUSH
1329: CALL_OW 74
1333: PPUSH
1334: CALL_OW 132
// SetTag ( unit , 0 ) ;
1338: LD_VAR 0 1
1342: PPUSH
1343: LD_INT 0
1345: PPUSH
1346: CALL_OW 109
// end else
1350: GO 1388
// if not HasTask ( unit ) then
1352: LD_VAR 0 1
1356: PPUSH
1357: CALL_OW 314
1361: NOT
1362: IFFALSE 1388
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1364: LD_VAR 0 1
1368: PPUSH
1369: LD_VAR 0 4
1373: PPUSH
1374: LD_VAR 0 1
1378: PPUSH
1379: CALL_OW 74
1383: PPUSH
1384: CALL_OW 115
// end ;
1388: GO 1234
1390: POP
1391: POP
// end ; end_of_file
1392: LD_VAR 0 3
1396: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus , Mike ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1397: LD_INT 0
1399: PPUSH
1400: PPUSH
1401: PPUSH
1402: PPUSH
1403: PPUSH
// uc_nation := 1 ;
1404: LD_ADDR_OWVAR 21
1408: PUSH
1409: LD_INT 1
1411: ST_TO_ADDR
// uc_side := 4 ;
1412: LD_ADDR_OWVAR 20
1416: PUSH
1417: LD_INT 4
1419: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1420: LD_ADDR_EXP 20
1424: PUSH
1425: LD_STRING Denis
1427: PPUSH
1428: LD_INT 0
1430: PPUSH
1431: LD_STRING 
1433: PPUSH
1434: CALL 30181 0 3
1438: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1439: LD_ADDR_EXP 19
1443: PUSH
1444: LD_STRING Harisson
1446: PPUSH
1447: LD_INT 0
1449: PPUSH
1450: LD_STRING 
1452: PPUSH
1453: CALL 30181 0 3
1457: ST_TO_ADDR
// uc_side := 1 ;
1458: LD_ADDR_OWVAR 20
1462: PUSH
1463: LD_INT 1
1465: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1466: LD_ADDR_EXP 17
1470: PUSH
1471: LD_STRING JMM
1473: PPUSH
1474: LD_EXP 1
1478: NOT
1479: PPUSH
1480: LD_EXP 3
1484: PPUSH
1485: CALL 30181 0 3
1489: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1490: LD_ADDR_EXP 18
1494: PUSH
1495: LD_STRING Gladstone
1497: PPUSH
1498: LD_INT 0
1500: PPUSH
1501: LD_EXP 3
1505: PPUSH
1506: CALL 30181 0 3
1510: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1511: LD_STRING BrownInDelta
1513: PPUSH
1514: LD_EXP 1
1518: PPUSH
1519: CALL_OW 30
1523: IFFALSE 1565
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1525: LD_ADDR_EXP 21
1529: PUSH
1530: LD_STRING Brown
1532: PPUSH
1533: LD_EXP 1
1537: NOT
1538: PPUSH
1539: LD_EXP 3
1543: PPUSH
1544: CALL 30181 0 3
1548: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1549: LD_ADDR_VAR 0 5
1553: PUSH
1554: LD_VAR 0 5
1558: PUSH
1559: LD_EXP 21
1563: ADD
1564: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1565: LD_STRING DonaldsonInDelta
1567: PPUSH
1568: LD_EXP 1
1572: PPUSH
1573: CALL_OW 30
1577: IFFALSE 1619
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1579: LD_ADDR_EXP 22
1583: PUSH
1584: LD_STRING Donaldson
1586: PPUSH
1587: LD_EXP 1
1591: NOT
1592: PPUSH
1593: LD_EXP 3
1597: PPUSH
1598: CALL 30181 0 3
1602: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1603: LD_ADDR_VAR 0 5
1607: PUSH
1608: LD_VAR 0 5
1612: PUSH
1613: LD_EXP 22
1617: ADD
1618: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1619: LD_STRING LisaInDelta
1621: PPUSH
1622: LD_EXP 1
1626: PPUSH
1627: CALL_OW 30
1631: IFFALSE 1673
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1633: LD_ADDR_EXP 23
1637: PUSH
1638: LD_STRING Lisa
1640: PPUSH
1641: LD_EXP 1
1645: NOT
1646: PPUSH
1647: LD_EXP 3
1651: PPUSH
1652: CALL 30181 0 3
1656: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1657: LD_ADDR_VAR 0 5
1661: PUSH
1662: LD_VAR 0 5
1666: PUSH
1667: LD_EXP 23
1671: ADD
1672: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1673: LD_STRING FrankInDelta
1675: PPUSH
1676: LD_EXP 1
1680: PPUSH
1681: CALL_OW 30
1685: IFFALSE 1727
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1687: LD_ADDR_EXP 24
1691: PUSH
1692: LD_STRING Frank
1694: PPUSH
1695: LD_EXP 1
1699: NOT
1700: PPUSH
1701: LD_EXP 3
1705: PPUSH
1706: CALL 30181 0 3
1710: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1711: LD_ADDR_VAR 0 5
1715: PUSH
1716: LD_VAR 0 5
1720: PUSH
1721: LD_EXP 24
1725: ADD
1726: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1727: LD_STRING BobbyInDelta
1729: PPUSH
1730: LD_INT 0
1732: PPUSH
1733: CALL_OW 30
1737: IFFALSE 1779
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1739: LD_ADDR_EXP 25
1743: PUSH
1744: LD_STRING Bobby
1746: PPUSH
1747: LD_EXP 1
1751: NOT
1752: PPUSH
1753: LD_EXP 3
1757: PPUSH
1758: CALL 30181 0 3
1762: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1763: LD_ADDR_VAR 0 5
1767: PUSH
1768: LD_VAR 0 5
1772: PUSH
1773: LD_EXP 25
1777: ADD
1778: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1779: LD_STRING CyrusInDelta
1781: PPUSH
1782: LD_INT 0
1784: PPUSH
1785: CALL_OW 30
1789: IFFALSE 1831
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1791: LD_ADDR_EXP 26
1795: PUSH
1796: LD_STRING Cyrus
1798: PPUSH
1799: LD_EXP 1
1803: NOT
1804: PPUSH
1805: LD_EXP 3
1809: PPUSH
1810: CALL 30181 0 3
1814: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1815: LD_ADDR_VAR 0 5
1819: PUSH
1820: LD_VAR 0 5
1824: PUSH
1825: LD_EXP 26
1829: ADD
1830: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1831: LD_ADDR_EXP 28
1835: PUSH
1836: LD_STRING othersDelta
1838: PPUSH
1839: CALL_OW 31
1843: ST_TO_ADDR
// if not others and debug then
1844: LD_EXP 28
1848: NOT
1849: PUSH
1850: LD_EXP 1
1854: AND
1855: IFFALSE 1920
// begin InitHc ;
1857: CALL_OW 19
// for i = 1 to 2 do
1861: LD_ADDR_VAR 0 2
1865: PUSH
1866: DOUBLE
1867: LD_INT 1
1869: DEC
1870: ST_TO_ADDR
1871: LD_INT 2
1873: PUSH
1874: FOR_TO
1875: IFFALSE 1918
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1877: LD_INT 0
1879: PPUSH
1880: LD_VAR 0 2
1884: PUSH
1885: LD_INT 4
1887: MOD
1888: PUSH
1889: LD_INT 1
1891: PLUS
1892: PPUSH
1893: LD_INT 3
1895: PPUSH
1896: CALL_OW 380
// others := others ^ CreateHuman ;
1900: LD_ADDR_EXP 28
1904: PUSH
1905: LD_EXP 28
1909: PUSH
1910: CALL_OW 44
1914: ADD
1915: ST_TO_ADDR
// end ;
1916: GO 1874
1918: POP
1919: POP
// end ; if others then
1920: LD_EXP 28
1924: IFFALSE 1942
// tmp := tmp ^ others ;
1926: LD_ADDR_VAR 0 5
1930: PUSH
1931: LD_VAR 0 5
1935: PUSH
1936: LD_EXP 28
1940: ADD
1941: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1942: LD_ADDR_VAR 0 3
1946: PUSH
1947: LD_INT 28
1949: PUSH
1950: LD_INT 49
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PUSH
1957: LD_INT 33
1959: PUSH
1960: LD_INT 54
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PUSH
1967: LD_INT 38
1969: PUSH
1970: LD_INT 56
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1982: LD_ADDR_VAR 0 4
1986: PUSH
1987: LD_INT 1
1989: PPUSH
1990: LD_INT 1
1992: PPUSH
1993: LD_INT 2
1995: PPUSH
1996: LD_INT 2
1998: PPUSH
1999: LD_INT 1
2001: PPUSH
2002: LD_INT 12
2004: PPUSH
2005: LD_INT 80
2007: PPUSH
2008: CALL 443 0 7
2012: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2013: LD_VAR 0 4
2017: PPUSH
2018: LD_INT 1
2020: PPUSH
2021: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
2025: LD_VAR 0 4
2029: PPUSH
2030: LD_VAR 0 3
2034: PUSH
2035: LD_INT 1
2037: ARRAY
2038: PUSH
2039: LD_INT 1
2041: ARRAY
2042: PPUSH
2043: LD_VAR 0 3
2047: PUSH
2048: LD_INT 1
2050: ARRAY
2051: PUSH
2052: LD_INT 2
2054: ARRAY
2055: PPUSH
2056: LD_INT 0
2058: PPUSH
2059: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2063: LD_VAR 0 4
2067: PPUSH
2068: LD_INT 1
2070: PPUSH
2071: LD_INT 100
2073: PPUSH
2074: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
2078: LD_EXP 28
2082: PUSH
2083: LD_INT 1
2085: ARRAY
2086: PPUSH
2087: LD_VAR 0 4
2091: PPUSH
2092: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
2096: LD_ADDR_VAR 0 4
2100: PUSH
2101: LD_INT 1
2103: PPUSH
2104: LD_INT 1
2106: PPUSH
2107: LD_INT 1
2109: PPUSH
2110: LD_INT 2
2112: PPUSH
2113: LD_INT 1
2115: PPUSH
2116: LD_INT 2
2118: PPUSH
2119: LD_INT 80
2121: PPUSH
2122: CALL 443 0 7
2126: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2127: LD_VAR 0 4
2131: PPUSH
2132: LD_INT 1
2134: PPUSH
2135: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
2139: LD_VAR 0 4
2143: PPUSH
2144: LD_VAR 0 3
2148: PUSH
2149: LD_INT 2
2151: ARRAY
2152: PUSH
2153: LD_INT 1
2155: ARRAY
2156: PPUSH
2157: LD_VAR 0 3
2161: PUSH
2162: LD_INT 2
2164: ARRAY
2165: PUSH
2166: LD_INT 2
2168: ARRAY
2169: PPUSH
2170: LD_INT 0
2172: PPUSH
2173: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
2177: LD_EXP 18
2181: PPUSH
2182: LD_VAR 0 4
2186: PPUSH
2187: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
2191: LD_ADDR_VAR 0 4
2195: PUSH
2196: LD_INT 1
2198: PPUSH
2199: LD_INT 1
2201: PPUSH
2202: LD_INT 1
2204: PPUSH
2205: LD_INT 2
2207: PPUSH
2208: LD_INT 1
2210: PPUSH
2211: LD_INT 3
2213: PPUSH
2214: LD_INT 80
2216: PPUSH
2217: CALL 443 0 7
2221: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2222: LD_VAR 0 4
2226: PPUSH
2227: LD_INT 1
2229: PPUSH
2230: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2234: LD_VAR 0 4
2238: PPUSH
2239: LD_VAR 0 3
2243: PUSH
2244: LD_INT 3
2246: ARRAY
2247: PUSH
2248: LD_INT 1
2250: ARRAY
2251: PPUSH
2252: LD_VAR 0 3
2256: PUSH
2257: LD_INT 3
2259: ARRAY
2260: PUSH
2261: LD_INT 2
2263: ARRAY
2264: PPUSH
2265: LD_INT 0
2267: PPUSH
2268: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2272: LD_EXP 17
2276: PPUSH
2277: LD_VAR 0 4
2281: PPUSH
2282: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2286: LD_ADDR_VAR 0 2
2290: PUSH
2291: LD_VAR 0 5
2295: PUSH
2296: LD_EXP 28
2300: PUSH
2301: LD_INT 1
2303: ARRAY
2304: DIFF
2305: PUSH
2306: FOR_IN
2307: IFFALSE 2326
// PlaceUnitArea ( i , startArea , false ) ;
2309: LD_VAR 0 2
2313: PPUSH
2314: LD_INT 5
2316: PPUSH
2317: LD_INT 0
2319: PPUSH
2320: CALL_OW 49
2324: GO 2306
2326: POP
2327: POP
// end ; end_of_file
2328: LD_VAR 0 1
2332: RET
// export function Action ; var m ; begin
2333: LD_INT 0
2335: PPUSH
2336: PPUSH
// InGameOn ;
2337: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2341: LD_INT 28
2343: PPUSH
2344: LD_INT 51
2346: PPUSH
2347: CALL_OW 86
// Wait ( 3 ) ;
2351: LD_INT 3
2353: PPUSH
2354: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2358: LD_EXP 17
2362: PPUSH
2363: LD_STRING D1d-JMM-1a
2365: PPUSH
2366: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2370: LD_EXP 19
2374: PPUSH
2375: LD_STRING D1d-Har-1
2377: PPUSH
2378: CALL_OW 94
// InGameOff ;
2382: CALL_OW 9
// SaveForQuickRestart ;
2386: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2390: LD_STRING M1
2392: PPUSH
2393: CALL_OW 337
// Wait ( 0 0$2 ) ;
2397: LD_INT 70
2399: PPUSH
2400: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2404: LD_EXP 17
2408: PPUSH
2409: LD_STRING D2-JMM-1
2411: PPUSH
2412: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2416: LD_EXP 18
2420: PPUSH
2421: LD_STRING D2-Glad-1
2423: PPUSH
2424: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2428: LD_EXP 17
2432: PPUSH
2433: LD_STRING D2-JMM-2
2435: PPUSH
2436: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2440: LD_EXP 18
2444: PPUSH
2445: LD_STRING D2-Glad-2
2447: PPUSH
2448: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2452: LD_EXP 17
2456: PPUSH
2457: LD_STRING D2-JMM-3
2459: PPUSH
2460: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2464: LD_INT 1050
2466: PPUSH
2467: LD_INT 2100
2469: PPUSH
2470: CALL_OW 12
2474: PPUSH
2475: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2479: LD_INT 1
2481: PPUSH
2482: LD_INT 570
2484: PPUSH
2485: LD_INT 350
2487: PPUSH
2488: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2492: LD_INT 6300
2494: PPUSH
2495: LD_INT 10500
2497: PPUSH
2498: CALL_OW 12
2502: PPUSH
2503: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2507: LD_INT 0
2509: PPUSH
2510: LD_INT 570
2512: PPUSH
2513: LD_INT 350
2515: PPUSH
2516: CALL_OW 550
// end ;
2520: LD_VAR 0 1
2524: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2525: LD_INT 22
2527: PUSH
2528: LD_INT 1
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: PUSH
2535: LD_INT 3
2537: PUSH
2538: LD_INT 57
2540: PUSH
2541: EMPTY
2542: LIST
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: PUSH
2548: LD_INT 30
2550: PUSH
2551: LD_INT 0
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: LIST
2562: PUSH
2563: EMPTY
2564: LIST
2565: PPUSH
2566: CALL_OW 69
2570: PUSH
2571: LD_EXP 4
2575: NOT
2576: AND
2577: IFFALSE 2590
2579: GO 2581
2581: DISABLE
// begin deltaBuilded := true ;
2582: LD_ADDR_EXP 4
2586: PUSH
2587: LD_INT 1
2589: ST_TO_ADDR
// end ;
2590: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2591: LD_EXP 6
2595: NOT
2596: PUSH
2597: LD_EXP 4
2601: AND
2602: PUSH
2603: LD_INT 22
2605: PUSH
2606: LD_INT 1
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: PUSH
2613: LD_INT 3
2615: PUSH
2616: LD_INT 57
2618: PUSH
2619: EMPTY
2620: LIST
2621: PUSH
2622: EMPTY
2623: LIST
2624: LIST
2625: PUSH
2626: LD_INT 30
2628: PUSH
2629: LD_INT 0
2631: PUSH
2632: EMPTY
2633: LIST
2634: LIST
2635: PUSH
2636: EMPTY
2637: LIST
2638: LIST
2639: LIST
2640: PUSH
2641: EMPTY
2642: LIST
2643: PPUSH
2644: CALL_OW 69
2648: AND
2649: IFFALSE 2735
2651: GO 2653
2653: DISABLE
// begin enable ;
2654: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2655: LD_INT 0
2657: PPUSH
2658: LD_INT 1
2660: PPUSH
2661: LD_INT 0
2663: PPUSH
2664: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2668: LD_ADDR_EXP 6
2672: PUSH
2673: LD_INT 22
2675: PUSH
2676: LD_INT 1
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: LD_INT 3
2685: PUSH
2686: LD_INT 57
2688: PUSH
2689: EMPTY
2690: LIST
2691: PUSH
2692: EMPTY
2693: LIST
2694: LIST
2695: PUSH
2696: LD_INT 30
2698: PUSH
2699: LD_INT 0
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: LIST
2710: PUSH
2711: EMPTY
2712: LIST
2713: PPUSH
2714: CALL_OW 69
2718: PUSH
2719: LD_INT 1
2721: ARRAY
2722: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2723: LD_EXP 6
2727: PPUSH
2728: LD_STRING Delta
2730: PPUSH
2731: CALL_OW 500
// end ;
2735: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2736: LD_INT 1
2738: PPUSH
2739: LD_INT 1
2741: PPUSH
2742: CALL_OW 321
2746: PUSH
2747: LD_INT 2
2749: EQUAL
2750: PUSH
2751: LD_EXP 18
2755: PPUSH
2756: CALL_OW 302
2760: AND
2761: IFFALSE 2822
2763: GO 2765
2765: DISABLE
// begin DialogueOn ;
2766: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2770: LD_EXP 18
2774: PPUSH
2775: LD_STRING D3-Glad-1
2777: PPUSH
2778: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2782: LD_EXP 17
2786: PPUSH
2787: LD_STRING D3-JMM-1
2789: PPUSH
2790: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2794: LD_EXP 18
2798: PPUSH
2799: LD_STRING D3-Glad-2
2801: PPUSH
2802: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2806: LD_EXP 17
2810: PPUSH
2811: LD_STRING D3-JMM-2
2813: PPUSH
2814: CALL_OW 88
// DialogueOff ;
2818: CALL_OW 7
// end ;
2822: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched and ( IsOk ( Frank ) or ( IsOk ( Denis ) and GetSide ( Denis ) = 1 ) or UnitFilter ( others , [ f_sex , sex_male ] ) ) do var i , sol , ape , b ;
2823: LD_INT 2
2825: PPUSH
2826: LD_INT 1
2828: PPUSH
2829: CALL_OW 321
2833: PUSH
2834: LD_INT 2
2836: EQUAL
2837: PUSH
2838: LD_EXP 24
2842: PPUSH
2843: CALL_OW 302
2847: PUSH
2848: LD_EXP 20
2852: PPUSH
2853: CALL_OW 302
2857: PUSH
2858: LD_EXP 20
2862: PPUSH
2863: CALL_OW 255
2867: PUSH
2868: LD_INT 1
2870: EQUAL
2871: AND
2872: OR
2873: PUSH
2874: LD_EXP 28
2878: PPUSH
2879: LD_INT 26
2881: PUSH
2882: LD_INT 1
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: PPUSH
2889: CALL_OW 72
2893: OR
2894: AND
2895: IFFALSE 3436
2897: GO 2899
2899: DISABLE
2900: LD_INT 0
2902: PPUSH
2903: PPUSH
2904: PPUSH
2905: PPUSH
// begin InGameOn ;
2906: CALL_OW 8
// DialogueOn ;
2910: CALL_OW 6
// if Frank then
2914: LD_EXP 24
2918: IFFALSE 2932
// Say ( Frank , D8a-Frank-1 ) ;
2920: LD_EXP 24
2924: PPUSH
2925: LD_STRING D8a-Frank-1
2927: PPUSH
2928: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2932: LD_ADDR_VAR 0 2
2936: PUSH
2937: LD_EXP 28
2941: PPUSH
2942: LD_INT 26
2944: PUSH
2945: LD_INT 1
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: PPUSH
2952: CALL_OW 72
2956: PPUSH
2957: LD_STRING D8a-Sol1-1
2959: PPUSH
2960: CALL 718 0 2
2964: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2965: LD_EXP 20
2969: PUSH
2970: LD_EXP 20
2974: PPUSH
2975: CALL_OW 255
2979: PUSH
2980: LD_INT 1
2982: EQUAL
2983: AND
2984: IFFALSE 2998
// Say ( Denis , D8a-Den-1 ) ;
2986: LD_EXP 20
2990: PPUSH
2991: LD_STRING D8a-Den-1
2993: PPUSH
2994: CALL_OW 88
// if sol or Denis or Frank then
2998: LD_VAR 0 2
3002: PUSH
3003: LD_EXP 20
3007: OR
3008: PUSH
3009: LD_EXP 24
3013: OR
3014: IFFALSE 3075
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
3016: LD_EXP 28
3020: PPUSH
3021: LD_INT 25
3023: PUSH
3024: LD_INT 4
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: LD_INT 26
3033: PUSH
3034: LD_INT 1
3036: PUSH
3037: EMPTY
3038: LIST
3039: LIST
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PPUSH
3045: CALL_OW 72
3049: PUSH
3050: LD_VAR 0 2
3054: DIFF
3055: PPUSH
3056: LD_STRING D8a-Sci1-1
3058: PPUSH
3059: CALL 718 0 2
// Say ( JMM , D8a-JMM-1 ) ;
3063: LD_EXP 17
3067: PPUSH
3068: LD_STRING D8a-JMM-1
3070: PPUSH
3071: CALL_OW 88
// end ; ape := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] , [ f_inside ] ] ) ;
3075: LD_ADDR_VAR 0 3
3079: PUSH
3080: LD_INT 22
3082: PUSH
3083: LD_INT 1
3085: PUSH
3086: EMPTY
3087: LIST
3088: LIST
3089: PUSH
3090: LD_INT 25
3092: PUSH
3093: LD_INT 12
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: PUSH
3100: LD_INT 54
3102: PUSH
3103: EMPTY
3104: LIST
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: LIST
3110: PPUSH
3111: CALL_OW 69
3115: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
3116: LD_ADDR_VAR 0 4
3120: PUSH
3121: LD_INT 22
3123: PUSH
3124: LD_INT 1
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PUSH
3131: LD_INT 2
3133: PUSH
3134: LD_INT 30
3136: PUSH
3137: LD_INT 6
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PUSH
3144: LD_INT 30
3146: PUSH
3147: LD_INT 7
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 30
3156: PUSH
3157: LD_INT 8
3159: PUSH
3160: EMPTY
3161: LIST
3162: LIST
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: LIST
3168: LIST
3169: PUSH
3170: EMPTY
3171: LIST
3172: LIST
3173: PPUSH
3174: CALL_OW 69
3178: PUSH
3179: LD_INT 1
3181: ARRAY
3182: ST_TO_ADDR
// for i in ape do
3183: LD_ADDR_VAR 0 1
3187: PUSH
3188: LD_VAR 0 3
3192: PUSH
3193: FOR_IN
3194: IFFALSE 3227
// if i in UnitsInside ( b ) then
3196: LD_VAR 0 1
3200: PUSH
3201: LD_VAR 0 4
3205: PPUSH
3206: CALL_OW 313
3210: IN
3211: IFFALSE 3225
// begin ape := i ;
3213: LD_ADDR_VAR 0 3
3217: PUSH
3218: LD_VAR 0 1
3222: ST_TO_ADDR
// break ;
3223: GO 3227
// end ;
3225: GO 3193
3227: POP
3228: POP
// if not ape then
3229: LD_VAR 0 3
3233: NOT
3234: IFFALSE 3246
// begin DialogueOff ;
3236: CALL_OW 7
// InGameOff ;
3240: CALL_OW 9
// exit ;
3244: GO 3436
// end ; RemoveUnit ( ape ) ;
3246: LD_VAR 0 3
3250: PPUSH
3251: CALL_OW 64
// PrepareApeman ( 0 ) ;
3255: LD_INT 0
3257: PPUSH
3258: CALL 64224 0 1
// uc_side := 1 ;
3262: LD_ADDR_OWVAR 20
3266: PUSH
3267: LD_INT 1
3269: ST_TO_ADDR
// hc_name := Mike  ;
3270: LD_ADDR_OWVAR 26
3274: PUSH
3275: LD_STRING Mike 
3277: ST_TO_ADDR
// hc_gallery := us ;
3278: LD_ADDR_OWVAR 33
3282: PUSH
3283: LD_STRING us
3285: ST_TO_ADDR
// hc_face_number := 30 ;
3286: LD_ADDR_OWVAR 34
3290: PUSH
3291: LD_INT 30
3293: ST_TO_ADDR
// hc_attr := [ GetAttr ( ape , attr_stamina ) , GetAttr ( ape , attr_speed ) ] ;
3294: LD_ADDR_OWVAR 29
3298: PUSH
3299: LD_VAR 0 3
3303: PPUSH
3304: LD_INT 1
3306: PPUSH
3307: CALL_OW 260
3311: PUSH
3312: LD_VAR 0 3
3316: PPUSH
3317: LD_INT 2
3319: PPUSH
3320: CALL_OW 260
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: ST_TO_ADDR
// hc_skills := [ GetSkill ( ape , 1 ) , GetSkill ( ape , 2 ) , GetSkill ( ape , 3 ) , GetSkill ( ape , 4 ) ] ;
3329: LD_ADDR_OWVAR 31
3333: PUSH
3334: LD_VAR 0 3
3338: PPUSH
3339: LD_INT 1
3341: PPUSH
3342: CALL_OW 259
3346: PUSH
3347: LD_VAR 0 3
3351: PPUSH
3352: LD_INT 2
3354: PPUSH
3355: CALL_OW 259
3359: PUSH
3360: LD_VAR 0 3
3364: PPUSH
3365: LD_INT 3
3367: PPUSH
3368: CALL_OW 259
3372: PUSH
3373: LD_VAR 0 3
3377: PPUSH
3378: LD_INT 4
3380: PPUSH
3381: CALL_OW 259
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: LIST
3390: LIST
3391: ST_TO_ADDR
// hc_sex := sex_male ;
3392: LD_ADDR_OWVAR 27
3396: PUSH
3397: LD_INT 1
3399: ST_TO_ADDR
// Mike := CreateHuman ;
3400: LD_ADDR_EXP 27
3404: PUSH
3405: CALL_OW 44
3409: ST_TO_ADDR
// PlaceHumanInUnit ( Mike , b ) ;
3410: LD_EXP 27
3414: PPUSH
3415: LD_VAR 0 4
3419: PPUSH
3420: CALL_OW 52
// InitHc_All ( ) ;
3424: CALL_OW 584
// DialogueOff ;
3428: CALL_OW 7
// InGameOff ;
3432: CALL_OW 9
// end ;
3436: PPOPN 4
3438: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
3439: LD_INT 22
3441: PUSH
3442: LD_INT 1
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PUSH
3449: LD_INT 25
3451: PUSH
3452: LD_INT 16
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: PUSH
3459: EMPTY
3460: LIST
3461: LIST
3462: PPUSH
3463: CALL_OW 69
3467: IFFALSE 3526
3469: GO 3471
3471: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
3472: LD_STRING M1a
3474: PPUSH
3475: CALL_OW 337
// case Query ( Q2 ) of 1 :
3479: LD_STRING Q2
3481: PPUSH
3482: CALL_OW 97
3486: PUSH
3487: LD_INT 1
3489: DOUBLE
3490: EQUAL
3491: IFTRUE 3495
3493: GO 3506
3495: POP
// end_mission := true ; 2 :
3496: LD_ADDR_EXP 14
3500: PUSH
3501: LD_INT 1
3503: ST_TO_ADDR
3504: GO 3526
3506: LD_INT 2
3508: DOUBLE
3509: EQUAL
3510: IFTRUE 3514
3512: GO 3525
3514: POP
// end_the_mission_allowed := true ; end ;
3515: LD_ADDR_OWVAR 57
3519: PUSH
3520: LD_INT 1
3522: ST_TO_ADDR
3523: GO 3526
3525: POP
// end ;
3526: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
3527: LD_INT 22
3529: PUSH
3530: LD_INT 1
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: PUSH
3537: LD_INT 2
3539: PUSH
3540: LD_INT 30
3542: PUSH
3543: LD_INT 6
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: PUSH
3550: LD_INT 30
3552: PUSH
3553: LD_INT 7
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PPUSH
3569: CALL_OW 69
3573: PUSH
3574: LD_INT 22
3576: PUSH
3577: LD_INT 1
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: PUSH
3584: LD_INT 2
3586: PUSH
3587: LD_INT 30
3589: PUSH
3590: LD_INT 2
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PUSH
3597: LD_INT 30
3599: PUSH
3600: LD_INT 3
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: LIST
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: PPUSH
3616: CALL_OW 69
3620: AND
3621: PUSH
3622: LD_EXP 6
3626: AND
3627: IFFALSE 4142
3629: GO 3631
3631: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3632: LD_INT 1050
3634: PPUSH
3635: LD_INT 1750
3637: PPUSH
3638: CALL_OW 12
3642: PPUSH
3643: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3647: LD_EXP 20
3651: PPUSH
3652: LD_INT 6
3654: PUSH
3655: LD_INT 9
3657: PUSH
3658: LD_INT 10
3660: PUSH
3661: LD_INT 16
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: PUSH
3670: LD_OWVAR 67
3674: ARRAY
3675: PPUSH
3676: LD_INT 0
3678: PPUSH
3679: CALL_OW 49
// ComHold ( Denis ) ;
3683: LD_EXP 20
3687: PPUSH
3688: CALL_OW 140
// InGameOn ;
3692: CALL_OW 8
// DialogueOn ;
3696: CALL_OW 6
// if Delta then
3700: LD_EXP 6
3704: IFFALSE 3717
// CenterNowOnUnits ( Delta ) else
3706: LD_EXP 6
3710: PPUSH
3711: CALL_OW 87
3715: GO 3726
// CenterNowOnUnits ( JMM ) ;
3717: LD_EXP 17
3721: PPUSH
3722: CALL_OW 87
// SayRadioNoFaceNoName ( Denis , DD-Den-1 ) ;
3726: LD_EXP 20
3730: PPUSH
3731: LD_STRING DD-Den-1
3733: PPUSH
3734: CALL 72051 0 2
// Say ( JMM , DD-JMM-1 ) ;
3738: LD_EXP 17
3742: PPUSH
3743: LD_STRING DD-JMM-1
3745: PPUSH
3746: CALL_OW 88
// SayRadioNoFaceNoName ( Denis , DD-Den-2 ) ;
3750: LD_EXP 20
3754: PPUSH
3755: LD_STRING DD-Den-2
3757: PPUSH
3758: CALL 72051 0 2
// Wait ( 3 ) ;
3762: LD_INT 3
3764: PPUSH
3765: CALL_OW 67
// DialogueOff ;
3769: CALL_OW 7
// InGameOff ;
3773: CALL_OW 9
// if Difficulty = 1 then
3777: LD_OWVAR 67
3781: PUSH
3782: LD_INT 1
3784: EQUAL
3785: IFFALSE 3861
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3787: LD_EXP 20
3791: PPUSH
3792: CALL_OW 250
3796: PPUSH
3797: LD_EXP 20
3801: PPUSH
3802: CALL_OW 251
3806: PPUSH
3807: LD_INT 1
3809: PPUSH
3810: LD_INT 12
3812: NEG
3813: PPUSH
3814: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3818: LD_EXP 20
3822: PPUSH
3823: CALL_OW 87
// wait ( 0 0$5 ) ;
3827: LD_INT 175
3829: PPUSH
3830: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3834: LD_EXP 20
3838: PPUSH
3839: CALL_OW 250
3843: PPUSH
3844: LD_EXP 20
3848: PPUSH
3849: CALL_OW 251
3853: PPUSH
3854: LD_INT 1
3856: PPUSH
3857: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3861: LD_INT 35
3863: PPUSH
3864: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3868: LD_INT 1
3870: PPUSH
3871: LD_EXP 20
3875: PPUSH
3876: CALL_OW 292
3880: PUSH
3881: LD_EXP 20
3885: PPUSH
3886: CALL_OW 301
3890: OR
3891: IFFALSE 3861
// if IsDead ( Denis ) then
3893: LD_EXP 20
3897: PPUSH
3898: CALL_OW 301
3902: IFFALSE 3906
// exit ;
3904: GO 4142
// SetSide ( Denis , 1 ) ;
3906: LD_EXP 20
3910: PPUSH
3911: LD_INT 1
3913: PPUSH
3914: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3918: LD_EXP 20
3922: PPUSH
3923: LD_STRING DD-Den-2a
3925: PPUSH
3926: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3930: LD_INT 35
3932: PPUSH
3933: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3937: LD_EXP 20
3941: PPUSH
3942: CALL_OW 310
3946: PPUSH
3947: CALL_OW 266
3951: PUSH
3952: LD_INT 6
3954: PUSH
3955: LD_INT 7
3957: PUSH
3958: LD_INT 8
3960: PUSH
3961: EMPTY
3962: LIST
3963: LIST
3964: LIST
3965: IN
3966: PUSH
3967: LD_EXP 20
3971: PPUSH
3972: CALL_OW 301
3976: OR
3977: IFFALSE 3930
// if IsDead ( Denis ) then
3979: LD_EXP 20
3983: PPUSH
3984: CALL_OW 301
3988: IFFALSE 3992
// exit ;
3990: GO 4142
// Say ( Denis , DD-Den-2b ) ;
3992: LD_EXP 20
3996: PPUSH
3997: LD_STRING DD-Den-2b
3999: PPUSH
4000: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
4004: LD_EXP 20
4008: PPUSH
4009: LD_INT 4
4011: PPUSH
4012: CALL_OW 123
// Wait ( 0 0$02 ) ;
4016: LD_INT 70
4018: PPUSH
4019: CALL_OW 67
// DialogueOn ;
4023: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
4027: LD_EXP 20
4031: PPUSH
4032: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
4036: LD_EXP 17
4040: PPUSH
4041: LD_STRING D4-JMM-1
4043: PPUSH
4044: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
4048: LD_EXP 20
4052: PPUSH
4053: LD_STRING D4-Den-1
4055: PPUSH
4056: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
4060: LD_EXP 17
4064: PPUSH
4065: LD_STRING D4-JMM-2
4067: PPUSH
4068: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
4072: LD_EXP 20
4076: PPUSH
4077: LD_STRING D4-Den-2
4079: PPUSH
4080: CALL_OW 88
// DialogueOff ;
4084: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
4088: LD_STRING M2
4090: PPUSH
4091: CALL_OW 337
// radar_allowed := true ;
4095: LD_ADDR_EXP 7
4099: PUSH
4100: LD_INT 1
4102: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
4103: LD_INT 6
4105: PPUSH
4106: LD_INT 1
4108: PPUSH
4109: LD_INT 1
4111: PPUSH
4112: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
4116: LD_INT 15
4118: PPUSH
4119: LD_INT 1
4121: PPUSH
4122: LD_INT 1
4124: PPUSH
4125: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
4129: LD_INT 20
4131: PPUSH
4132: LD_INT 1
4134: PPUSH
4135: LD_INT 1
4137: PPUSH
4138: CALL_OW 324
// end ;
4142: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
4143: LD_EXP 13
4147: IFFALSE 4770
4149: GO 4151
4151: DISABLE
4152: LD_INT 0
4154: PPUSH
4155: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
4156: LD_ADDR_VAR 0 1
4160: PUSH
4161: LD_EXP 28
4165: PPUSH
4166: LD_INT 26
4168: PUSH
4169: LD_INT 1
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PPUSH
4176: CALL_OW 72
4180: PPUSH
4181: LD_STRING D5-Sol1-1
4183: PPUSH
4184: CALL 718 0 2
4188: ST_TO_ADDR
// if not sol then
4189: LD_VAR 0 1
4193: NOT
4194: IFFALSE 4198
// exit ;
4196: GO 4770
// repeat wait ( 0 0$01 ) ;
4198: LD_INT 35
4200: PPUSH
4201: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
4205: LD_INT 22
4207: PUSH
4208: LD_INT 2
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: PUSH
4215: LD_INT 21
4217: PUSH
4218: LD_INT 1
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PPUSH
4229: CALL_OW 69
4233: PUSH
4234: LD_INT 0
4236: EQUAL
4237: IFFALSE 4198
// if IsOk ( sol ) then
4239: LD_VAR 0 1
4243: PPUSH
4244: CALL_OW 302
4248: IFFALSE 4268
// begin sol2 := others diff sol ;
4250: LD_ADDR_VAR 0 2
4254: PUSH
4255: LD_EXP 28
4259: PUSH
4260: LD_VAR 0 1
4264: DIFF
4265: ST_TO_ADDR
// end else
4266: GO 4270
// exit ;
4268: GO 4770
// if not Lisa and not sol2 then
4270: LD_EXP 23
4274: NOT
4275: PUSH
4276: LD_VAR 0 2
4280: NOT
4281: AND
4282: IFFALSE 4286
// exit ;
4284: GO 4770
// DialogueOn ;
4286: CALL_OW 6
// if Lisa then
4290: LD_EXP 23
4294: IFFALSE 4310
// Say ( Lisa , D5a-Lisa-1 ) else
4296: LD_EXP 23
4300: PPUSH
4301: LD_STRING D5a-Lisa-1
4303: PPUSH
4304: CALL_OW 88
4308: GO 4385
// if sol2 then
4310: LD_VAR 0 2
4314: IFFALSE 4385
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4316: LD_VAR 0 2
4320: PUSH
4321: LD_INT 1
4323: ARRAY
4324: PPUSH
4325: CALL_OW 258
4329: PUSH
4330: LD_INT 1
4332: DOUBLE
4333: EQUAL
4334: IFTRUE 4338
4336: GO 4357
4338: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
4339: LD_VAR 0 2
4343: PUSH
4344: LD_INT 1
4346: ARRAY
4347: PPUSH
4348: LD_STRING D5-Sol2-1
4350: PPUSH
4351: CALL_OW 88
4355: GO 4385
4357: LD_INT 2
4359: DOUBLE
4360: EQUAL
4361: IFTRUE 4365
4363: GO 4384
4365: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
4366: LD_VAR 0 2
4370: PUSH
4371: LD_INT 1
4373: ARRAY
4374: PPUSH
4375: LD_STRING D5-FSol2-1
4377: PPUSH
4378: CALL_OW 88
4382: GO 4385
4384: POP
// Say ( sol , D5-Sol1-2 ) ;
4385: LD_VAR 0 1
4389: PPUSH
4390: LD_STRING D5-Sol1-2
4392: PPUSH
4393: CALL_OW 88
// if Lisa then
4397: LD_EXP 23
4401: IFFALSE 4417
// Say ( Lisa , D5a-Lisa-2 ) else
4403: LD_EXP 23
4407: PPUSH
4408: LD_STRING D5a-Lisa-2
4410: PPUSH
4411: CALL_OW 88
4415: GO 4492
// if sol2 then
4417: LD_VAR 0 2
4421: IFFALSE 4492
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4423: LD_VAR 0 2
4427: PUSH
4428: LD_INT 1
4430: ARRAY
4431: PPUSH
4432: CALL_OW 258
4436: PUSH
4437: LD_INT 1
4439: DOUBLE
4440: EQUAL
4441: IFTRUE 4445
4443: GO 4464
4445: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
4446: LD_VAR 0 2
4450: PUSH
4451: LD_INT 1
4453: ARRAY
4454: PPUSH
4455: LD_STRING D5-Sol2-2
4457: PPUSH
4458: CALL_OW 88
4462: GO 4492
4464: LD_INT 2
4466: DOUBLE
4467: EQUAL
4468: IFTRUE 4472
4470: GO 4491
4472: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
4473: LD_VAR 0 2
4477: PUSH
4478: LD_INT 1
4480: ARRAY
4481: PPUSH
4482: LD_STRING D5-FSol2-2
4484: PPUSH
4485: CALL_OW 88
4489: GO 4492
4491: POP
// Say ( sol , D5a-Sol1-3 ) ;
4492: LD_VAR 0 1
4496: PPUSH
4497: LD_STRING D5a-Sol1-3
4499: PPUSH
4500: CALL_OW 88
// if Lisa then
4504: LD_EXP 23
4508: IFFALSE 4522
// Say ( Lisa , D5a-Lisa-3 ) ;
4510: LD_EXP 23
4514: PPUSH
4515: LD_STRING D5a-Lisa-3
4517: PPUSH
4518: CALL_OW 88
// if not sol2 then
4522: LD_VAR 0 2
4526: NOT
4527: IFFALSE 4535
// begin DialogueOff ;
4529: CALL_OW 7
// exit ;
4533: GO 4770
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
4535: LD_VAR 0 2
4539: PUSH
4540: LD_INT 1
4542: ARRAY
4543: PPUSH
4544: CALL_OW 258
4548: PUSH
4549: LD_INT 1
4551: DOUBLE
4552: EQUAL
4553: IFTRUE 4557
4555: GO 4576
4557: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
4558: LD_VAR 0 2
4562: PUSH
4563: LD_INT 1
4565: ARRAY
4566: PPUSH
4567: LD_STRING D5-Sol2-3
4569: PPUSH
4570: CALL_OW 88
4574: GO 4604
4576: LD_INT 2
4578: DOUBLE
4579: EQUAL
4580: IFTRUE 4584
4582: GO 4603
4584: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
4585: LD_VAR 0 2
4589: PUSH
4590: LD_INT 1
4592: ARRAY
4593: PPUSH
4594: LD_STRING D5-FSol2-3
4596: PPUSH
4597: CALL_OW 88
4601: GO 4604
4603: POP
// Say ( sol , D5-Sol1-4 ) ;
4604: LD_VAR 0 1
4608: PPUSH
4609: LD_STRING D5-Sol1-4
4611: PPUSH
4612: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4616: LD_VAR 0 2
4620: PUSH
4621: LD_INT 1
4623: ARRAY
4624: PPUSH
4625: CALL_OW 258
4629: PUSH
4630: LD_INT 1
4632: DOUBLE
4633: EQUAL
4634: IFTRUE 4638
4636: GO 4657
4638: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4639: LD_VAR 0 2
4643: PUSH
4644: LD_INT 1
4646: ARRAY
4647: PPUSH
4648: LD_STRING D5-Sol2-4
4650: PPUSH
4651: CALL_OW 88
4655: GO 4685
4657: LD_INT 2
4659: DOUBLE
4660: EQUAL
4661: IFTRUE 4665
4663: GO 4684
4665: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4666: LD_VAR 0 2
4670: PUSH
4671: LD_INT 1
4673: ARRAY
4674: PPUSH
4675: LD_STRING D5-FSol2-4
4677: PPUSH
4678: CALL_OW 88
4682: GO 4685
4684: POP
// Say ( sol , D5-Sol1-5 ) ;
4685: LD_VAR 0 1
4689: PPUSH
4690: LD_STRING D5-Sol1-5
4692: PPUSH
4693: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4697: LD_VAR 0 2
4701: PUSH
4702: LD_INT 1
4704: ARRAY
4705: PPUSH
4706: CALL_OW 258
4710: PUSH
4711: LD_INT 1
4713: DOUBLE
4714: EQUAL
4715: IFTRUE 4719
4717: GO 4738
4719: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4720: LD_VAR 0 2
4724: PUSH
4725: LD_INT 1
4727: ARRAY
4728: PPUSH
4729: LD_STRING D5-Sol2-5
4731: PPUSH
4732: CALL_OW 88
4736: GO 4766
4738: LD_INT 2
4740: DOUBLE
4741: EQUAL
4742: IFTRUE 4746
4744: GO 4765
4746: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4747: LD_VAR 0 2
4751: PUSH
4752: LD_INT 1
4754: ARRAY
4755: PPUSH
4756: LD_STRING D5-FSol2-5
4758: PPUSH
4759: CALL_OW 88
4763: GO 4766
4765: POP
// DialogueOff ;
4766: CALL_OW 7
// end ;
4770: PPOPN 2
4772: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4773: LD_INT 22
4775: PUSH
4776: LD_INT 1
4778: PUSH
4779: EMPTY
4780: LIST
4781: LIST
4782: PUSH
4783: LD_INT 25
4785: PUSH
4786: LD_INT 16
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: PPUSH
4797: CALL_OW 69
4801: PUSH
4802: LD_INT 5
4804: GREATEREQUAL
4805: IFFALSE 4825
4807: GO 4809
4809: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4810: LD_STRING M1b
4812: PPUSH
4813: CALL_OW 337
// apeman_army := true ;
4817: LD_ADDR_EXP 9
4821: PUSH
4822: LD_INT 1
4824: ST_TO_ADDR
// end ;
4825: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4826: LD_INT 22
4828: PUSH
4829: LD_INT 1
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 30
4838: PUSH
4839: LD_INT 3
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: LD_INT 57
4848: PUSH
4849: EMPTY
4850: LIST
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: LIST
4856: PPUSH
4857: CALL_OW 69
4861: IFFALSE 4873
4863: GO 4865
4865: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4866: LD_STRING M1c
4868: PPUSH
4869: CALL_OW 337
4873: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4874: LD_INT 6
4876: PPUSH
4877: LD_INT 1
4879: PPUSH
4880: CALL_OW 321
4884: PUSH
4885: LD_INT 2
4887: EQUAL
4888: IFFALSE 4908
4890: GO 4892
4892: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4893: LD_STRING M2a
4895: PPUSH
4896: CALL_OW 337
// radar_researched := true ;
4900: LD_ADDR_EXP 10
4904: PUSH
4905: LD_INT 1
4907: ST_TO_ADDR
// end ;
4908: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4909: LD_INT 22
4911: PUSH
4912: LD_INT 1
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: LD_INT 2
4921: PUSH
4922: LD_INT 34
4924: PUSH
4925: LD_INT 11
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: PUSH
4932: LD_INT 35
4934: PUSH
4935: LD_INT 11
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: LIST
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: PPUSH
4951: CALL_OW 69
4955: IFFALSE 4975
4957: GO 4959
4959: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4960: LD_STRING M2b
4962: PPUSH
4963: CALL_OW 337
// radar_builded := true ;
4967: LD_ADDR_EXP 11
4971: PUSH
4972: LD_INT 1
4974: ST_TO_ADDR
// end ;
4975: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4976: LD_INT 22
4978: PUSH
4979: LD_INT 0
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PUSH
4986: LD_INT 25
4988: PUSH
4989: LD_INT 12
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: PPUSH
5000: CALL_OW 69
5004: PUSH
5005: LD_INT 0
5007: EQUAL
5008: PUSH
5009: LD_EXP 8
5013: NOT
5014: AND
5015: IFFALSE 5027
5017: GO 5019
5019: DISABLE
// YouLost ( Apeman ) ;
5020: LD_STRING Apeman
5022: PPUSH
5023: CALL_OW 104
5027: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
5028: LD_INT 22
5030: PUSH
5031: LD_INT 1
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: PUSH
5038: LD_INT 25
5040: PUSH
5041: LD_INT 16
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: PPUSH
5052: CALL_OW 69
5056: PUSH
5057: LD_INT 7
5059: GREATEREQUAL
5060: IFFALSE 5158
5062: GO 5064
5064: DISABLE
5065: LD_INT 0
5067: PPUSH
5068: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
5069: LD_ADDR_VAR 0 2
5073: PUSH
5074: LD_INT 22
5076: PUSH
5077: LD_INT 1
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PUSH
5084: LD_INT 21
5086: PUSH
5087: LD_INT 1
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PUSH
5094: LD_INT 25
5096: PUSH
5097: LD_INT 4
5099: PUSH
5100: EMPTY
5101: LIST
5102: LIST
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: LIST
5108: PPUSH
5109: CALL_OW 69
5113: PUSH
5114: LD_EXP 17
5118: ADD
5119: ST_TO_ADDR
// if filter then
5120: LD_VAR 0 2
5124: IFFALSE 5158
// for i in filter do
5126: LD_ADDR_VAR 0 1
5130: PUSH
5131: LD_VAR 0 2
5135: PUSH
5136: FOR_IN
5137: IFFALSE 5156
// AddExperience ( i , 4 , 3500 ) ;
5139: LD_VAR 0 1
5143: PPUSH
5144: LD_INT 4
5146: PPUSH
5147: LD_INT 3500
5149: PPUSH
5150: CALL_OW 492
5154: GO 5136
5156: POP
5157: POP
// end ;
5158: PPOPN 2
5160: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
5161: LD_EXP 14
5165: IFFALSE 6348
5167: GO 5169
5169: DISABLE
5170: LD_INT 0
5172: PPUSH
5173: PPUSH
5174: PPUSH
5175: PPUSH
5176: PPUSH
// begin if apeKillCounter = 0 then
5177: LD_EXP 15
5181: PUSH
5182: LD_INT 0
5184: EQUAL
5185: IFFALSE 5194
// SetAchievement ( ACH_APEKILLER ) ;
5187: LD_STRING ACH_APEKILLER
5189: PPUSH
5190: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
5194: LD_INT 22
5196: PUSH
5197: LD_INT 2
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PPUSH
5204: CALL_OW 69
5208: IFFALSE 5246
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
5210: LD_ADDR_VAR 0 1
5214: PUSH
5215: LD_INT 22
5217: PUSH
5218: LD_INT 2
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: PPUSH
5225: CALL_OW 69
5229: PUSH
5230: FOR_IN
5231: IFFALSE 5244
// RemoveUnit ( i ) ;
5233: LD_VAR 0 1
5237: PPUSH
5238: CALL_OW 64
5242: GO 5230
5244: POP
5245: POP
// m1 := false ;
5246: LD_ADDR_VAR 0 3
5250: PUSH
5251: LD_INT 0
5253: ST_TO_ADDR
// m2 := false ;
5254: LD_ADDR_VAR 0 4
5258: PUSH
5259: LD_INT 0
5261: ST_TO_ADDR
// m3 := false ;
5262: LD_ADDR_VAR 0 5
5266: PUSH
5267: LD_INT 0
5269: ST_TO_ADDR
// if apeman_army then
5270: LD_EXP 9
5274: IFFALSE 5296
// begin AddMedal ( Tame , 1 ) ;
5276: LD_STRING Tame
5278: PPUSH
5279: LD_INT 1
5281: PPUSH
5282: CALL_OW 101
// m1 := true ;
5286: LD_ADDR_VAR 0 3
5290: PUSH
5291: LD_INT 1
5293: ST_TO_ADDR
// end else
5294: GO 5307
// AddMedal ( Tame , - 1 ) ;
5296: LD_STRING Tame
5298: PPUSH
5299: LD_INT 1
5301: NEG
5302: PPUSH
5303: CALL_OW 101
// if radar_researched then
5307: LD_EXP 10
5311: IFFALSE 5343
// begin SaveVariable ( true , radarResInDelta ) ;
5313: LD_INT 1
5315: PPUSH
5316: LD_STRING radarResInDelta
5318: PPUSH
5319: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
5323: LD_STRING Radar
5325: PPUSH
5326: LD_INT 1
5328: PPUSH
5329: CALL_OW 101
// m2 := true ;
5333: LD_ADDR_VAR 0 4
5337: PUSH
5338: LD_INT 1
5340: ST_TO_ADDR
// end else
5341: GO 5373
// if radar_allowed then
5343: LD_EXP 7
5347: IFFALSE 5362
// AddMedal ( Radar , - 2 ) else
5349: LD_STRING Radar
5351: PPUSH
5352: LD_INT 2
5354: NEG
5355: PPUSH
5356: CALL_OW 101
5360: GO 5373
// AddMedal ( Radar , - 1 ) ;
5362: LD_STRING Radar
5364: PPUSH
5365: LD_INT 1
5367: NEG
5368: PPUSH
5369: CALL_OW 101
// if radar_builded then
5373: LD_EXP 11
5377: IFFALSE 5399
// begin AddMedal ( BuildRadar , 1 ) ;
5379: LD_STRING BuildRadar
5381: PPUSH
5382: LD_INT 1
5384: PPUSH
5385: CALL_OW 101
// m3 := true ;
5389: LD_ADDR_VAR 0 5
5393: PUSH
5394: LD_INT 1
5396: ST_TO_ADDR
// end else
5397: GO 5410
// AddMedal ( BuildRadar , - 1 ) ;
5399: LD_STRING BuildRadar
5401: PPUSH
5402: LD_INT 1
5404: NEG
5405: PPUSH
5406: CALL_OW 101
// if tick <= 7 7$00 then
5410: LD_OWVAR 1
5414: PUSH
5415: LD_INT 14700
5417: LESSEQUAL
5418: IFFALSE 5427
// SetAchievement ( ACH_ASPEED_5 ) ;
5420: LD_STRING ACH_ASPEED_5
5422: PPUSH
5423: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
5427: LD_VAR 0 3
5431: PUSH
5432: LD_VAR 0 4
5436: AND
5437: PUSH
5438: LD_VAR 0 5
5442: AND
5443: PUSH
5444: LD_OWVAR 67
5448: PUSH
5449: LD_INT 3
5451: GREATEREQUAL
5452: AND
5453: IFFALSE 5465
// SetAchievementEX ( ACH_AMER , 5 ) ;
5455: LD_STRING ACH_AMER
5457: PPUSH
5458: LD_INT 5
5460: PPUSH
5461: CALL_OW 564
// GiveMedals ( MAIN ) ;
5465: LD_STRING MAIN
5467: PPUSH
5468: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
5472: LD_ADDR_VAR 0 2
5476: PUSH
5477: LD_INT 22
5479: PUSH
5480: LD_INT 1
5482: PUSH
5483: EMPTY
5484: LIST
5485: LIST
5486: PUSH
5487: LD_INT 21
5489: PUSH
5490: LD_INT 1
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PUSH
5497: LD_INT 2
5499: PUSH
5500: LD_INT 25
5502: PUSH
5503: LD_INT 1
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: PUSH
5510: LD_INT 25
5512: PUSH
5513: LD_INT 2
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: PUSH
5520: LD_INT 25
5522: PUSH
5523: LD_INT 3
5525: PUSH
5526: EMPTY
5527: LIST
5528: LIST
5529: PUSH
5530: LD_INT 25
5532: PUSH
5533: LD_INT 4
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: PPUSH
5552: CALL_OW 69
5556: ST_TO_ADDR
// RewardPeople ( tmp ) ;
5557: LD_VAR 0 2
5561: PPUSH
5562: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
5566: LD_EXP 17
5570: PPUSH
5571: LD_EXP 2
5575: PUSH
5576: LD_STRING JMM
5578: STR
5579: PPUSH
5580: CALL_OW 38
// if IsOk ( Gladstone ) then
5584: LD_EXP 18
5588: PPUSH
5589: CALL_OW 302
5593: IFFALSE 5620
// begin ToLua ( enableBioCharacter(BIO_TIM) ) ;
5595: LD_STRING enableBioCharacter(BIO_TIM)
5597: PPUSH
5598: CALL_OW 559
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5602: LD_EXP 18
5606: PPUSH
5607: LD_EXP 2
5611: PUSH
5612: LD_STRING Gladstone
5614: STR
5615: PPUSH
5616: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
5620: LD_EXP 20
5624: PPUSH
5625: CALL_OW 302
5629: PUSH
5630: LD_EXP 20
5634: PPUSH
5635: CALL_OW 255
5639: PUSH
5640: LD_INT 1
5642: EQUAL
5643: AND
5644: IFFALSE 5681
// begin ToLua ( enableBioCharacter(BIO_DENIS) ) ;
5646: LD_STRING enableBioCharacter(BIO_DENIS)
5648: PPUSH
5649: CALL_OW 559
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
5653: LD_EXP 20
5657: PPUSH
5658: LD_EXP 2
5662: PUSH
5663: LD_STRING Denis
5665: STR
5666: PPUSH
5667: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5671: LD_INT 1
5673: PPUSH
5674: LD_STRING DenisInDelta
5676: PPUSH
5677: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5681: LD_EXP 23
5685: PPUSH
5686: CALL_OW 302
5690: IFFALSE 5710
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5692: LD_EXP 23
5696: PPUSH
5697: LD_EXP 2
5701: PUSH
5702: LD_STRING Lisa
5704: STR
5705: PPUSH
5706: CALL_OW 38
// end ; if IsOk ( Frank ) then
5710: LD_EXP 24
5714: PPUSH
5715: CALL_OW 302
5719: IFFALSE 5739
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5721: LD_EXP 24
5725: PPUSH
5726: LD_EXP 2
5730: PUSH
5731: LD_STRING Frank
5733: STR
5734: PPUSH
5735: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5739: LD_EXP 25
5743: PPUSH
5744: CALL_OW 302
5748: IFFALSE 5768
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5750: LD_EXP 25
5754: PPUSH
5755: LD_EXP 2
5759: PUSH
5760: LD_STRING Bobby
5762: STR
5763: PPUSH
5764: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5768: LD_EXP 26
5772: PPUSH
5773: CALL_OW 302
5777: IFFALSE 5797
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5779: LD_EXP 26
5783: PPUSH
5784: LD_EXP 2
5788: PUSH
5789: LD_STRING Cyrus
5791: STR
5792: PPUSH
5793: CALL_OW 38
// end ; if IsOk ( Brown ) then
5797: LD_EXP 21
5801: PPUSH
5802: CALL_OW 302
5806: IFFALSE 5826
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5808: LD_EXP 21
5812: PPUSH
5813: LD_EXP 2
5817: PUSH
5818: LD_STRING Brown
5820: STR
5821: PPUSH
5822: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5826: LD_EXP 22
5830: PPUSH
5831: CALL_OW 302
5835: IFFALSE 5855
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5837: LD_EXP 22
5841: PPUSH
5842: LD_EXP 2
5846: PUSH
5847: LD_STRING Donaldson
5849: STR
5850: PPUSH
5851: CALL_OW 38
// end ; if IsOk ( Mike ) then
5855: LD_EXP 27
5859: PPUSH
5860: CALL_OW 302
5864: IFFALSE 5884
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5866: LD_EXP 27
5870: PPUSH
5871: LD_EXP 2
5875: PUSH
5876: LD_STRING Mike
5878: STR
5879: PPUSH
5880: CALL_OW 38
// if others then
5884: LD_EXP 28
5888: IFFALSE 5902
// SaveCharacters ( others , othersInDelta ) ;
5890: LD_EXP 28
5894: PPUSH
5895: LD_STRING othersInDelta
5897: PPUSH
5898: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5902: LD_INT 22
5904: PUSH
5905: LD_INT 1
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PUSH
5912: LD_INT 25
5914: PUSH
5915: LD_INT 16
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PPUSH
5926: CALL_OW 69
5930: IFFALSE 5974
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) diff Mike , apeInDelta ) ;
5932: LD_INT 22
5934: PUSH
5935: LD_INT 1
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: LD_INT 25
5944: PUSH
5945: LD_INT 16
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PPUSH
5956: CALL_OW 69
5960: PUSH
5961: LD_EXP 27
5965: DIFF
5966: PPUSH
5967: LD_STRING apeInDelta
5969: PPUSH
5970: CALL_OW 38
// tmp := [ ] ;
5974: LD_ADDR_VAR 0 2
5978: PUSH
5979: EMPTY
5980: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5981: LD_INT 22
5983: PUSH
5984: LD_INT 1
5986: PUSH
5987: EMPTY
5988: LIST
5989: LIST
5990: PUSH
5991: LD_INT 21
5993: PUSH
5994: LD_INT 2
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: PPUSH
6005: CALL_OW 69
6009: IFFALSE 6120
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
6011: LD_ADDR_VAR 0 1
6015: PUSH
6016: LD_INT 22
6018: PUSH
6019: LD_INT 1
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 21
6028: PUSH
6029: LD_INT 2
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: PPUSH
6040: CALL_OW 69
6044: PUSH
6045: FOR_IN
6046: IFFALSE 6118
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
6048: LD_ADDR_VAR 0 2
6052: PUSH
6053: LD_VAR 0 2
6057: PUSH
6058: LD_VAR 0 1
6062: PPUSH
6063: CALL_OW 248
6067: PUSH
6068: LD_VAR 0 1
6072: PPUSH
6073: CALL_OW 265
6077: PUSH
6078: LD_VAR 0 1
6082: PPUSH
6083: CALL_OW 262
6087: PUSH
6088: LD_VAR 0 1
6092: PPUSH
6093: CALL_OW 263
6097: PUSH
6098: LD_VAR 0 1
6102: PPUSH
6103: CALL_OW 264
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: ADD
6115: ST_TO_ADDR
6116: GO 6045
6118: POP
6119: POP
// if tmp then
6120: LD_VAR 0 2
6124: IFFALSE 6138
// SaveVariable ( tmp , vehiclesInDelta ) ;
6126: LD_VAR 0 2
6130: PPUSH
6131: LD_STRING vehiclesInDelta
6133: PPUSH
6134: CALL_OW 39
// tmp := [ ] ;
6138: LD_ADDR_VAR 0 2
6142: PUSH
6143: EMPTY
6144: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
6145: LD_INT 22
6147: PUSH
6148: LD_INT 1
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PUSH
6155: LD_INT 21
6157: PUSH
6158: LD_INT 3
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PPUSH
6169: CALL_OW 69
6173: IFFALSE 6326
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
6175: LD_ADDR_VAR 0 1
6179: PUSH
6180: LD_INT 22
6182: PUSH
6183: LD_INT 1
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PUSH
6190: LD_INT 21
6192: PUSH
6193: LD_INT 3
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PPUSH
6204: CALL_OW 69
6208: PUSH
6209: FOR_IN
6210: IFFALSE 6324
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
6212: LD_ADDR_VAR 0 2
6216: PUSH
6217: LD_VAR 0 2
6221: PUSH
6222: LD_VAR 0 1
6226: PPUSH
6227: CALL_OW 266
6231: PUSH
6232: LD_VAR 0 1
6236: PPUSH
6237: CALL_OW 267
6241: PUSH
6242: LD_VAR 0 1
6246: PPUSH
6247: CALL_OW 250
6251: PUSH
6252: LD_VAR 0 1
6256: PPUSH
6257: CALL_OW 251
6261: PUSH
6262: LD_VAR 0 1
6266: PPUSH
6267: CALL_OW 254
6271: PUSH
6272: LD_VAR 0 1
6276: PPUSH
6277: LD_INT 1
6279: PPUSH
6280: CALL_OW 268
6284: PUSH
6285: LD_VAR 0 1
6289: PPUSH
6290: LD_INT 2
6292: PPUSH
6293: CALL_OW 268
6297: PUSH
6298: LD_VAR 0 1
6302: PPUSH
6303: CALL_OW 269
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: PUSH
6318: EMPTY
6319: LIST
6320: ADD
6321: ST_TO_ADDR
6322: GO 6209
6324: POP
6325: POP
// if tmp then
6326: LD_VAR 0 2
6330: IFFALSE 6344
// SaveVariable ( tmp , buildingsInDelta ) ;
6332: LD_VAR 0 2
6336: PPUSH
6337: LD_STRING buildingsInDelta
6339: PPUSH
6340: CALL_OW 39
// YouWin ;
6344: CALL_OW 103
// end ; end_of_file
6348: PPOPN 5
6350: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
6351: LD_INT 0
6353: PPUSH
6354: PPUSH
6355: PPUSH
6356: PPUSH
// InitHc ;
6357: CALL_OW 19
// InitUc ;
6361: CALL_OW 18
// uc_side := 2 ;
6365: LD_ADDR_OWVAR 20
6369: PUSH
6370: LD_INT 2
6372: ST_TO_ADDR
// uc_nation := 2 ;
6373: LD_ADDR_OWVAR 21
6377: PUSH
6378: LD_INT 2
6380: ST_TO_ADDR
// if not amount then
6381: LD_VAR 0 1
6385: NOT
6386: IFFALSE 6390
// exit ;
6388: GO 6513
// for i = 1 to amount do
6390: LD_ADDR_VAR 0 5
6394: PUSH
6395: DOUBLE
6396: LD_INT 1
6398: DEC
6399: ST_TO_ADDR
6400: LD_VAR 0 1
6404: PUSH
6405: FOR_TO
6406: IFFALSE 6501
// begin PrepareHuman ( false , 1 , skill ) ;
6408: LD_INT 0
6410: PPUSH
6411: LD_INT 1
6413: PPUSH
6414: LD_VAR 0 2
6418: PPUSH
6419: CALL_OW 380
// un := CreateHuman ;
6423: LD_ADDR_VAR 0 6
6427: PUSH
6428: CALL_OW 44
6432: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
6433: LD_ADDR_VAR 0 7
6437: PUSH
6438: LD_VAR 0 7
6442: PPUSH
6443: LD_INT 1
6445: PPUSH
6446: LD_VAR 0 6
6450: PPUSH
6451: CALL_OW 2
6455: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6456: LD_VAR 0 6
6460: PPUSH
6461: LD_VAR 0 3
6465: PPUSH
6466: LD_INT 0
6468: PPUSH
6469: CALL_OW 49
// if i mod 2 = 0 then
6473: LD_VAR 0 5
6477: PUSH
6478: LD_INT 2
6480: MOD
6481: PUSH
6482: LD_INT 0
6484: EQUAL
6485: IFFALSE 6499
// SetTag ( un , 11 ) ;
6487: LD_VAR 0 6
6491: PPUSH
6492: LD_INT 11
6494: PPUSH
6495: CALL_OW 109
// end ;
6499: GO 6405
6501: POP
6502: POP
// result := tmp ;
6503: LD_ADDR_VAR 0 4
6507: PUSH
6508: LD_VAR 0 7
6512: ST_TO_ADDR
// end ;
6513: LD_VAR 0 4
6517: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
6518: LD_EXP 6
6522: IFFALSE 7607
6524: GO 6526
6526: DISABLE
6527: LD_INT 0
6529: PPUSH
6530: PPUSH
6531: PPUSH
6532: PPUSH
6533: PPUSH
6534: PPUSH
6535: PPUSH
6536: PPUSH
// begin more_troops := false ;
6537: LD_ADDR_VAR 0 3
6541: PUSH
6542: LD_INT 0
6544: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
6545: LD_ADDR_VAR 0 4
6549: PUSH
6550: LD_INT 3
6552: PUSH
6553: LD_INT 4
6555: PUSH
6556: LD_INT 5
6558: PUSH
6559: LD_INT 5
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: PUSH
6568: LD_OWVAR 67
6572: ARRAY
6573: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
6574: LD_ADDR_VAR 0 2
6578: PUSH
6579: LD_INT 10500
6581: PUSH
6582: LD_INT 8400
6584: PUSH
6585: LD_INT 6300
6587: PUSH
6588: LD_INT 5250
6590: PUSH
6591: EMPTY
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: PUSH
6597: LD_OWVAR 67
6601: ARRAY
6602: ST_TO_ADDR
// force := [ ] ;
6603: LD_ADDR_VAR 0 8
6607: PUSH
6608: EMPTY
6609: ST_TO_ADDR
// ar_forces := [ ] ;
6610: LD_ADDR_EXP 29
6614: PUSH
6615: EMPTY
6616: ST_TO_ADDR
// ap_killers := [ ] ;
6617: LD_ADDR_EXP 30
6621: PUSH
6622: EMPTY
6623: ST_TO_ADDR
// Wait ( timer ) ;
6624: LD_VAR 0 2
6628: PPUSH
6629: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
6633: LD_EXP 20
6637: PUSH
6638: LD_EXP 20
6642: PPUSH
6643: CALL_OW 255
6647: PUSH
6648: LD_INT 4
6650: EQUAL
6651: AND
6652: IFFALSE 6661
// Wait ( 0 0$45 ) ;
6654: LD_INT 1575
6656: PPUSH
6657: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
6661: LD_INT 22
6663: PUSH
6664: LD_INT 1
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 30
6673: PUSH
6674: LD_INT 4
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 69
6689: IFFALSE 6706
// begin wait ( 1 1$25 ) ;
6691: LD_INT 2975
6693: PPUSH
6694: CALL_OW 67
// more_troops := true ;
6698: LD_ADDR_VAR 0 3
6702: PUSH
6703: LD_INT 1
6705: ST_TO_ADDR
// end ; if more_troops then
6706: LD_VAR 0 3
6710: IFFALSE 6906
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6712: LD_ADDR_VAR 0 8
6716: PUSH
6717: LD_INT 4
6719: PUSH
6720: LD_INT 5
6722: PUSH
6723: LD_INT 6
6725: PUSH
6726: LD_INT 7
6728: PUSH
6729: EMPTY
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: PUSH
6735: LD_OWVAR 67
6739: ARRAY
6740: PPUSH
6741: LD_VAR 0 4
6745: PPUSH
6746: LD_INT 14
6748: PPUSH
6749: CALL 6351 0 3
6753: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6754: LD_ADDR_VAR 0 7
6758: PUSH
6759: LD_INT 2
6761: PPUSH
6762: LD_INT 3
6764: PPUSH
6765: LD_INT 22
6767: PPUSH
6768: LD_INT 1
6770: PPUSH
6771: LD_INT 1
6773: PPUSH
6774: LD_INT 42
6776: PUSH
6777: LD_INT 42
6779: PUSH
6780: LD_INT 43
6782: PUSH
6783: LD_INT 44
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: PUSH
6792: LD_OWVAR 67
6796: ARRAY
6797: PPUSH
6798: LD_INT 90
6800: PPUSH
6801: CALL 443 0 7
6805: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6806: LD_VAR 0 7
6810: PPUSH
6811: LD_INT 4
6813: PPUSH
6814: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6818: LD_VAR 0 7
6822: PPUSH
6823: LD_INT 13
6825: PPUSH
6826: LD_INT 0
6828: PPUSH
6829: CALL_OW 49
// uc_side := 2 ;
6833: LD_ADDR_OWVAR 20
6837: PUSH
6838: LD_INT 2
6840: ST_TO_ADDR
// uc_nation := 2 ;
6841: LD_ADDR_OWVAR 21
6845: PUSH
6846: LD_INT 2
6848: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6849: LD_INT 0
6851: PPUSH
6852: LD_INT 1
6854: PPUSH
6855: LD_VAR 0 4
6859: PPUSH
6860: CALL_OW 380
// un := CreateHuman ;
6864: LD_ADDR_VAR 0 6
6868: PUSH
6869: CALL_OW 44
6873: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6874: LD_VAR 0 6
6878: PPUSH
6879: LD_VAR 0 7
6883: PPUSH
6884: CALL_OW 52
// force := force ^ un ;
6888: LD_ADDR_VAR 0 8
6892: PUSH
6893: LD_VAR 0 8
6897: PUSH
6898: LD_VAR 0 6
6902: ADD
6903: ST_TO_ADDR
// end else
6904: GO 6948
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6906: LD_ADDR_VAR 0 8
6910: PUSH
6911: LD_INT 3
6913: PUSH
6914: LD_INT 4
6916: PUSH
6917: LD_INT 5
6919: PUSH
6920: LD_INT 6
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: PUSH
6929: LD_OWVAR 67
6933: ARRAY
6934: PPUSH
6935: LD_VAR 0 4
6939: PPUSH
6940: LD_INT 14
6942: PPUSH
6943: CALL 6351 0 3
6947: ST_TO_ADDR
// end ; if force then
6948: LD_VAR 0 8
6952: IFFALSE 6964
// ar_forces := force ;
6954: LD_ADDR_EXP 29
6958: PUSH
6959: LD_VAR 0 8
6963: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6964: LD_INT 35
6966: PPUSH
6967: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6971: LD_INT 22
6973: PUSH
6974: LD_INT 2
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: LD_INT 21
6983: PUSH
6984: LD_INT 1
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PPUSH
6995: CALL_OW 69
6999: PUSH
7000: LD_INT 0
7002: EQUAL
7003: IFFALSE 6964
// wait ( timer ) ;
7005: LD_VAR 0 2
7009: PPUSH
7010: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
7014: LD_ADDR_VAR 0 8
7018: PUSH
7019: LD_INT 4
7021: PUSH
7022: LD_INT 5
7024: PUSH
7025: LD_INT 6
7027: PUSH
7028: LD_INT 7
7030: PUSH
7031: EMPTY
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: PUSH
7037: LD_OWVAR 67
7041: ARRAY
7042: PPUSH
7043: LD_VAR 0 4
7047: PPUSH
7048: LD_INT 13
7050: PUSH
7051: LD_INT 14
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: LD_INT 1
7060: PPUSH
7061: LD_INT 2
7063: PPUSH
7064: CALL_OW 12
7068: ARRAY
7069: PPUSH
7070: CALL 6351 0 3
7074: ST_TO_ADDR
// if Difficulty > 1 and Delta then
7075: LD_OWVAR 67
7079: PUSH
7080: LD_INT 1
7082: GREATER
7083: PUSH
7084: LD_EXP 6
7088: AND
7089: IFFALSE 7168
// begin uc_side := 2 ;
7091: LD_ADDR_OWVAR 20
7095: PUSH
7096: LD_INT 2
7098: ST_TO_ADDR
// uc_nation := 2 ;
7099: LD_ADDR_OWVAR 21
7103: PUSH
7104: LD_INT 2
7106: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
7107: LD_INT 0
7109: PPUSH
7110: LD_INT 2
7112: PPUSH
7113: LD_VAR 0 4
7117: PPUSH
7118: CALL_OW 380
// eng := CreateHuman ;
7122: LD_ADDR_VAR 0 5
7126: PUSH
7127: CALL_OW 44
7131: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
7132: LD_VAR 0 5
7136: PPUSH
7137: LD_INT 13
7139: PPUSH
7140: LD_INT 0
7142: PPUSH
7143: CALL_OW 49
// Wait ( 3 ) ;
7147: LD_INT 3
7149: PPUSH
7150: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
7154: LD_VAR 0 5
7158: PPUSH
7159: LD_EXP 6
7163: PPUSH
7164: CALL_OW 180
// end ; if force then
7168: LD_VAR 0 8
7172: IFFALSE 7184
// ar_forces := force ;
7174: LD_ADDR_EXP 29
7178: PUSH
7179: LD_VAR 0 8
7183: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7184: LD_INT 35
7186: PPUSH
7187: CALL_OW 67
// if eng then
7191: LD_VAR 0 5
7195: IFFALSE 7249
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
7197: LD_EXP 6
7201: PPUSH
7202: CALL_OW 255
7206: PUSH
7207: LD_INT 2
7209: EQUAL
7210: PUSH
7211: LD_VAR 0 5
7215: PPUSH
7216: CALL_OW 302
7220: AND
7221: PUSH
7222: LD_VAR 0 5
7226: PPUSH
7227: CALL_OW 310
7231: NOT
7232: AND
7233: IFFALSE 7249
// ComEnterUnit ( eng , Delta ) ;
7235: LD_VAR 0 5
7239: PPUSH
7240: LD_EXP 6
7244: PPUSH
7245: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
7249: LD_INT 22
7251: PUSH
7252: LD_INT 2
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PUSH
7259: LD_INT 21
7261: PUSH
7262: LD_INT 1
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PPUSH
7273: CALL_OW 69
7277: PUSH
7278: LD_INT 0
7280: EQUAL
7281: IFFALSE 7184
// Wait ( 2 2$00 ) ;
7283: LD_INT 4200
7285: PPUSH
7286: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
7290: LD_ADDR_EXP 30
7294: PUSH
7295: LD_INT 1
7297: PUSH
7298: LD_INT 2
7300: PUSH
7301: LD_INT 2
7303: PUSH
7304: LD_INT 2
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: PUSH
7313: LD_OWVAR 67
7317: ARRAY
7318: PPUSH
7319: LD_VAR 0 4
7323: PPUSH
7324: LD_INT 13
7326: PPUSH
7327: CALL 6351 0 3
7331: ST_TO_ADDR
// Wait ( timer * 2 ) ;
7332: LD_VAR 0 2
7336: PUSH
7337: LD_INT 2
7339: MUL
7340: PPUSH
7341: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
7345: LD_ADDR_EXP 29
7349: PUSH
7350: LD_INT 5
7352: PUSH
7353: LD_INT 6
7355: PUSH
7356: LD_INT 7
7358: PUSH
7359: LD_INT 8
7361: PUSH
7362: EMPTY
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: PUSH
7368: LD_OWVAR 67
7372: ARRAY
7373: PPUSH
7374: LD_VAR 0 4
7378: PPUSH
7379: LD_INT 13
7381: PPUSH
7382: CALL 6351 0 3
7386: PUSH
7387: LD_INT 3
7389: PUSH
7390: LD_INT 4
7392: PUSH
7393: LD_INT 4
7395: PUSH
7396: LD_INT 4
7398: PUSH
7399: EMPTY
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: PUSH
7405: LD_OWVAR 67
7409: ARRAY
7410: PPUSH
7411: LD_VAR 0 4
7415: PPUSH
7416: LD_INT 14
7418: PPUSH
7419: CALL 6351 0 3
7423: ADD
7424: ST_TO_ADDR
// if Difficulty < 4 and not traitor then
7425: LD_OWVAR 67
7429: PUSH
7430: LD_INT 4
7432: LESS
7433: PUSH
7434: LD_EXP 16
7438: NOT
7439: AND
7440: IFFALSE 7444
// exit ;
7442: GO 7607
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_gun , 90 ) ;
7444: LD_ADDR_VAR 0 7
7448: PUSH
7449: LD_INT 2
7451: PPUSH
7452: LD_INT 3
7454: PPUSH
7455: LD_INT 22
7457: PPUSH
7458: LD_INT 1
7460: PPUSH
7461: LD_INT 1
7463: PPUSH
7464: LD_INT 44
7466: PPUSH
7467: LD_INT 90
7469: PPUSH
7470: CALL 443 0 7
7474: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
7475: LD_VAR 0 7
7479: PPUSH
7480: LD_INT 1
7482: PPUSH
7483: CALL_OW 233
// PlaceUnitXY ( veh , 28 , 51 , false ) ;
7487: LD_VAR 0 7
7491: PPUSH
7492: LD_INT 28
7494: PPUSH
7495: LD_INT 51
7497: PPUSH
7498: LD_INT 0
7500: PPUSH
7501: CALL_OW 48
// uc_side := 2 ;
7505: LD_ADDR_OWVAR 20
7509: PUSH
7510: LD_INT 2
7512: ST_TO_ADDR
// uc_nation := 2 ;
7513: LD_ADDR_OWVAR 21
7517: PUSH
7518: LD_INT 2
7520: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7521: LD_INT 0
7523: PPUSH
7524: LD_INT 1
7526: PPUSH
7527: LD_VAR 0 4
7531: PPUSH
7532: CALL_OW 380
// un := CreateHuman ;
7536: LD_ADDR_VAR 0 6
7540: PUSH
7541: CALL_OW 44
7545: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7546: LD_VAR 0 6
7550: PPUSH
7551: LD_VAR 0 7
7555: PPUSH
7556: CALL_OW 52
// ar_forces := Join ( ar_forces , un ) ;
7560: LD_ADDR_EXP 29
7564: PUSH
7565: LD_EXP 29
7569: PPUSH
7570: LD_VAR 0 6
7574: PPUSH
7575: CALL 67976 0 2
7579: ST_TO_ADDR
// ar_forces := ar_forces union PrepareArabianTroops ( 4 , skill , arArea3 ) ;
7580: LD_ADDR_EXP 29
7584: PUSH
7585: LD_EXP 29
7589: PUSH
7590: LD_INT 4
7592: PPUSH
7593: LD_VAR 0 4
7597: PPUSH
7598: LD_INT 19
7600: PPUSH
7601: CALL 6351 0 3
7605: UNION
7606: ST_TO_ADDR
// end ;
7607: PPOPN 8
7609: END
// every 0 0$03 trigger ar_forces do var i , target ;
7610: LD_EXP 29
7614: IFFALSE 7812
7616: GO 7618
7618: DISABLE
7619: LD_INT 0
7621: PPUSH
7622: PPUSH
// begin enable ;
7623: ENABLE
// if not ar_forces then
7624: LD_EXP 29
7628: NOT
7629: IFFALSE 7633
// exit ;
7631: GO 7812
// if Delta then
7633: LD_EXP 6
7637: IFFALSE 7651
// target := Delta else
7639: LD_ADDR_VAR 0 2
7643: PUSH
7644: LD_EXP 6
7648: ST_TO_ADDR
7649: GO 7661
// target := JMM ;
7651: LD_ADDR_VAR 0 2
7655: PUSH
7656: LD_EXP 17
7660: ST_TO_ADDR
// for i in ar_forces do
7661: LD_ADDR_VAR 0 1
7665: PUSH
7666: LD_EXP 29
7670: PUSH
7671: FOR_IN
7672: IFFALSE 7810
// begin if i in FilterAllUnits ( [ f_driving ] ) then
7674: LD_VAR 0 1
7678: PUSH
7679: LD_INT 55
7681: PUSH
7682: EMPTY
7683: LIST
7684: PPUSH
7685: CALL_OW 69
7689: IN
7690: IFFALSE 7733
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
7692: LD_VAR 0 1
7696: PPUSH
7697: LD_INT 22
7699: PUSH
7700: LD_INT 1
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PPUSH
7707: CALL_OW 69
7711: PPUSH
7712: LD_VAR 0 1
7716: PPUSH
7717: CALL_OW 310
7721: PPUSH
7722: CALL_OW 74
7726: PPUSH
7727: CALL_OW 115
7731: GO 7808
// if GetDistUnits ( i , target ) > 30 then
7733: LD_VAR 0 1
7737: PPUSH
7738: LD_VAR 0 2
7742: PPUSH
7743: CALL_OW 296
7747: PUSH
7748: LD_INT 30
7750: GREATER
7751: IFFALSE 7784
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
7753: LD_VAR 0 1
7757: PPUSH
7758: LD_VAR 0 2
7762: PPUSH
7763: CALL_OW 250
7767: PPUSH
7768: LD_VAR 0 2
7772: PPUSH
7773: CALL_OW 251
7777: PPUSH
7778: CALL_OW 114
7782: GO 7808
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
7784: LD_VAR 0 1
7788: PPUSH
7789: LD_INT 81
7791: PUSH
7792: LD_INT 2
7794: PUSH
7795: EMPTY
7796: LIST
7797: LIST
7798: PPUSH
7799: CALL_OW 69
7803: PPUSH
7804: CALL 935 0 2
// end ;
7808: GO 7671
7810: POP
7811: POP
// end ;
7812: PPOPN 2
7814: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
7815: LD_EXP 30
7819: IFFALSE 7979
7821: GO 7823
7823: DISABLE
7824: LD_INT 0
7826: PPUSH
7827: PPUSH
7828: PPUSH
// begin enable ;
7829: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
7830: LD_ADDR_VAR 0 1
7834: PUSH
7835: LD_INT 22
7837: PUSH
7838: LD_INT 0
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 25
7847: PUSH
7848: LD_INT 12
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PPUSH
7859: CALL_OW 69
7863: ST_TO_ADDR
// if not filter then
7864: LD_VAR 0 1
7868: NOT
7869: IFFALSE 7896
// begin ar_forces := ar_forces ^ ap_killers ;
7871: LD_ADDR_EXP 29
7875: PUSH
7876: LD_EXP 29
7880: PUSH
7881: LD_EXP 30
7885: ADD
7886: ST_TO_ADDR
// ap_killers := [ ] ;
7887: LD_ADDR_EXP 30
7891: PUSH
7892: EMPTY
7893: ST_TO_ADDR
// exit ;
7894: GO 7979
// end ; for i in ap_killers do
7896: LD_ADDR_VAR 0 2
7900: PUSH
7901: LD_EXP 30
7905: PUSH
7906: FOR_IN
7907: IFFALSE 7977
// begin if not IsOk ( i ) then
7909: LD_VAR 0 2
7913: PPUSH
7914: CALL_OW 302
7918: NOT
7919: IFFALSE 7923
// continue ;
7921: GO 7906
// if not HasTask ( i ) then
7923: LD_VAR 0 2
7927: PPUSH
7928: CALL_OW 314
7932: NOT
7933: IFFALSE 7955
// target := NearestUnitToUnit ( filter , i ) ;
7935: LD_ADDR_VAR 0 3
7939: PUSH
7940: LD_VAR 0 1
7944: PPUSH
7945: LD_VAR 0 2
7949: PPUSH
7950: CALL_OW 74
7954: ST_TO_ADDR
// if target then
7955: LD_VAR 0 3
7959: IFFALSE 7975
// ComAttackUnit ( i , target ) ;
7961: LD_VAR 0 2
7965: PPUSH
7966: LD_VAR 0 3
7970: PPUSH
7971: CALL_OW 115
// end ;
7975: GO 7906
7977: POP
7978: POP
// end ; end_of_file
7979: PPOPN 3
7981: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7982: LD_EXP 6
7986: IFFALSE 8122
7988: GO 7990
7990: DISABLE
7991: LD_INT 0
7993: PPUSH
7994: PPUSH
7995: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
7996: LD_ADDR_VAR 0 2
8000: PUSH
8001: LD_INT 300
8003: PUSH
8004: LD_INT 250
8006: PUSH
8007: LD_INT 220
8009: PUSH
8010: LD_INT 210
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: PUSH
8019: LD_OWVAR 67
8023: ARRAY
8024: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
8025: LD_INT 1
8027: PPUSH
8028: LD_INT 3
8030: PPUSH
8031: CALL_OW 12
8035: PPUSH
8036: LD_INT 7
8038: PPUSH
8039: LD_INT 1
8041: PPUSH
8042: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
8046: LD_INT 3150
8048: PPUSH
8049: LD_INT 4900
8051: PPUSH
8052: CALL_OW 12
8056: PPUSH
8057: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8061: LD_ADDR_VAR 0 3
8065: PUSH
8066: LD_INT 1
8068: PPUSH
8069: LD_INT 5
8071: PPUSH
8072: CALL_OW 12
8076: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8077: LD_VAR 0 3
8081: PPUSH
8082: LD_INT 7
8084: PPUSH
8085: LD_INT 1
8087: PPUSH
8088: CALL_OW 55
// counter := counter - cr * 10 ;
8092: LD_ADDR_VAR 0 2
8096: PUSH
8097: LD_VAR 0 2
8101: PUSH
8102: LD_VAR 0 3
8106: PUSH
8107: LD_INT 10
8109: MUL
8110: MINUS
8111: ST_TO_ADDR
// until counter <= 0 ;
8112: LD_VAR 0 2
8116: PUSH
8117: LD_INT 0
8119: LESSEQUAL
8120: IFFALSE 8046
// end ;
8122: PPOPN 3
8124: END
// every 0 0$03 trigger not Delta do var i ;
8125: LD_EXP 6
8129: NOT
8130: IFFALSE 8200
8132: GO 8134
8134: DISABLE
8135: LD_INT 0
8137: PPUSH
// begin for i = 1 to 5 - Difficulty do
8138: LD_ADDR_VAR 0 1
8142: PUSH
8143: DOUBLE
8144: LD_INT 1
8146: DEC
8147: ST_TO_ADDR
8148: LD_INT 5
8150: PUSH
8151: LD_OWVAR 67
8155: MINUS
8156: PUSH
8157: FOR_TO
8158: IFFALSE 8198
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
8160: LD_INT 2
8162: PPUSH
8163: LD_INT 5
8165: PPUSH
8166: CALL_OW 12
8170: PPUSH
8171: LD_INT 8
8173: PPUSH
8174: LD_INT 1
8176: PPUSH
8177: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
8181: LD_INT 560
8183: PPUSH
8184: LD_INT 1365
8186: PPUSH
8187: CALL_OW 12
8191: PPUSH
8192: CALL_OW 67
// end ;
8196: GO 8157
8198: POP
8199: POP
// end ;
8200: PPOPN 1
8202: END
// every 3 3$00 trigger tick < 15 15$00 do
8203: LD_OWVAR 1
8207: PUSH
8208: LD_INT 31500
8210: LESS
8211: IFFALSE 8271
8213: GO 8215
8215: DISABLE
// begin enable ;
8216: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
8217: LD_INT 1
8219: PPUSH
8220: LD_INT 3
8222: PPUSH
8223: CALL_OW 12
8227: PPUSH
8228: LD_INT 1
8230: PPUSH
8231: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
8235: LD_INT 1330
8237: PPUSH
8238: LD_INT 2065
8240: PPUSH
8241: CALL_OW 12
8245: PPUSH
8246: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
8250: LD_INT 1
8252: PPUSH
8253: LD_INT 4
8255: PPUSH
8256: CALL_OW 12
8260: PPUSH
8261: LD_INT 15
8263: PPUSH
8264: LD_INT 1
8266: PPUSH
8267: CALL_OW 55
// end ; end_of_file
8271: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8272: LD_VAR 0 1
8276: PPUSH
8277: CALL 24817 0 1
// if un = JMM then
8281: LD_VAR 0 1
8285: PUSH
8286: LD_EXP 17
8290: EQUAL
8291: IFFALSE 8300
// YouLost ( JMM ) ;
8293: LD_STRING JMM
8295: PPUSH
8296: CALL_OW 104
// if un = Delta then
8300: LD_VAR 0 1
8304: PUSH
8305: LD_EXP 6
8309: EQUAL
8310: IFFALSE 8333
// begin Delta := 0 ;
8312: LD_ADDR_EXP 6
8316: PUSH
8317: LD_INT 0
8319: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
8320: LD_INT 0
8322: PPUSH
8323: LD_INT 1
8325: PPUSH
8326: LD_INT 1
8328: PPUSH
8329: CALL_OW 324
// end ; if un in ar_forces then
8333: LD_VAR 0 1
8337: PUSH
8338: LD_EXP 29
8342: IN
8343: IFFALSE 8361
// ar_forces := ar_forces diff un ;
8345: LD_ADDR_EXP 29
8349: PUSH
8350: LD_EXP 29
8354: PUSH
8355: LD_VAR 0 1
8359: DIFF
8360: ST_TO_ADDR
// if un in ap_killers then
8361: LD_VAR 0 1
8365: PUSH
8366: LD_EXP 30
8370: IN
8371: IFFALSE 8389
// ap_killers := ap_killers diff un ;
8373: LD_ADDR_EXP 30
8377: PUSH
8378: LD_EXP 30
8382: PUSH
8383: LD_VAR 0 1
8387: DIFF
8388: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
8389: LD_VAR 0 1
8393: PUSH
8394: LD_INT 2
8396: PUSH
8397: LD_INT 25
8399: PUSH
8400: LD_INT 12
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PUSH
8407: LD_INT 25
8409: PUSH
8410: LD_INT 16
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: LIST
8421: PPUSH
8422: CALL_OW 69
8426: IN
8427: IFFALSE 8443
// apeKillCounter := apeKillCounter + 1 ;
8429: LD_ADDR_EXP 15
8433: PUSH
8434: LD_EXP 15
8438: PUSH
8439: LD_INT 1
8441: PLUS
8442: ST_TO_ADDR
// end ;
8443: PPOPN 1
8445: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) and killerSide = 1 then
8446: LD_VAR 0 1
8450: PUSH
8451: LD_INT 22
8453: PUSH
8454: LD_INT 1
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: LD_INT 23
8463: PUSH
8464: LD_INT 1
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: LD_INT 21
8473: PUSH
8474: LD_INT 1
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: LIST
8485: PPUSH
8486: CALL_OW 69
8490: IN
8491: PUSH
8492: LD_VAR 0 2
8496: PUSH
8497: LD_INT 1
8499: EQUAL
8500: AND
8501: IFFALSE 8511
// traitor := true ;
8503: LD_ADDR_EXP 16
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// end ;
8511: PPOPN 3
8513: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8514: LD_VAR 0 1
8518: PPUSH
8519: LD_VAR 0 2
8523: PPUSH
8524: CALL 24875 0 2
// end ;
8528: PPOPN 2
8530: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 2 and not arab_spotted then
8531: LD_VAR 0 1
8535: PUSH
8536: LD_INT 1
8538: EQUAL
8539: PUSH
8540: LD_VAR 0 2
8544: PUSH
8545: LD_INT 2
8547: EQUAL
8548: AND
8549: PUSH
8550: LD_EXP 13
8554: NOT
8555: AND
8556: IFFALSE 8566
// arab_spotted := true ;
8558: LD_ADDR_EXP 13
8562: PUSH
8563: LD_INT 1
8565: ST_TO_ADDR
// end ;
8566: PPOPN 2
8568: END
// on EndTheMissionRaised ( p ) do begin if FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) then
8569: LD_INT 22
8571: PUSH
8572: LD_INT 2
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: PUSH
8579: LD_INT 50
8581: PUSH
8582: EMPTY
8583: LIST
8584: PUSH
8585: LD_INT 21
8587: PUSH
8588: LD_INT 1
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: LIST
8599: PPUSH
8600: CALL_OW 69
8604: IFFALSE 8615
// begin Query ( QArabOnMap ) ;
8606: LD_STRING QArabOnMap
8608: PPUSH
8609: CALL_OW 97
// exit ;
8613: GO 8631
// end ; end_the_mission_allowed := false ;
8615: LD_ADDR_OWVAR 57
8619: PUSH
8620: LD_INT 0
8622: ST_TO_ADDR
// end_mission := true ;
8623: LD_ADDR_EXP 14
8627: PUSH
8628: LD_INT 1
8630: ST_TO_ADDR
// end ;
8631: PPOPN 1
8633: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
8634: LD_VAR 0 2
8638: PPUSH
8639: CALL_OW 255
8643: PUSH
8644: LD_INT 1
8646: EQUAL
8647: IFFALSE 8663
// apeman_counter := apeman_counter + 1 ;
8649: LD_ADDR_EXP 12
8653: PUSH
8654: LD_EXP 12
8658: PUSH
8659: LD_INT 1
8661: PLUS
8662: ST_TO_ADDR
// if not first_apeman_tamed then
8663: LD_EXP 8
8667: NOT
8668: IFFALSE 8867
// begin first_apeman_tamed := true ;
8670: LD_ADDR_EXP 8
8674: PUSH
8675: LD_INT 1
8677: ST_TO_ADDR
// if sci = Gladstone then
8678: LD_VAR 0 2
8682: PUSH
8683: LD_EXP 18
8687: EQUAL
8688: IFFALSE 8702
// Say ( Gladstone , D7b-Glad-1 ) ;
8690: LD_EXP 18
8694: PPUSH
8695: LD_STRING D7b-Glad-1
8697: PPUSH
8698: CALL_OW 88
// if sci = Denis then
8702: LD_VAR 0 2
8706: PUSH
8707: LD_EXP 20
8711: EQUAL
8712: IFFALSE 8726
// Say ( Denis , D7a-Den-1 ) ;
8714: LD_EXP 20
8718: PPUSH
8719: LD_STRING D7a-Den-1
8721: PPUSH
8722: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
8726: LD_VAR 0 2
8730: PUSH
8731: LD_EXP 17
8735: PUSH
8736: LD_EXP 18
8740: PUSH
8741: LD_EXP 20
8745: PUSH
8746: LD_EXP 23
8750: PUSH
8751: LD_EXP 24
8755: PUSH
8756: LD_EXP 25
8760: PUSH
8761: LD_EXP 26
8765: PUSH
8766: LD_EXP 22
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: IN
8781: NOT
8782: IFFALSE 8825
// begin if GetSex ( sci ) = sex_male then
8784: LD_VAR 0 2
8788: PPUSH
8789: CALL_OW 258
8793: PUSH
8794: LD_INT 1
8796: EQUAL
8797: IFFALSE 8813
// Say ( sci , D7c-Sci1-1 ) else
8799: LD_VAR 0 2
8803: PPUSH
8804: LD_STRING D7c-Sci1-1
8806: PPUSH
8807: CALL_OW 88
8811: GO 8825
// Say ( sci , D7c-FSci1-1 ) ;
8813: LD_VAR 0 2
8817: PPUSH
8818: LD_STRING D7c-FSci1-1
8820: PPUSH
8821: CALL_OW 88
// end ; if sci <> Gladstone then
8825: LD_VAR 0 2
8829: PUSH
8830: LD_EXP 18
8834: NONEQUAL
8835: IFFALSE 8849
// Say ( Gladstone , D7c-Glad-1 ) ;
8837: LD_EXP 18
8841: PPUSH
8842: LD_STRING D7c-Glad-1
8844: PPUSH
8845: CALL_OW 88
// if Lisa then
8849: LD_EXP 23
8853: IFFALSE 8867
// Say ( Lisa , D8-Lisa-1 ) ;
8855: LD_EXP 23
8859: PPUSH
8860: LD_STRING D8-Lisa-1
8862: PPUSH
8863: CALL_OW 88
// end ; end ; end_of_file end_of_file
8867: PPOPN 2
8869: END
// export globalGameSaveCounter ; every 0 0$1 do
8870: GO 8872
8872: DISABLE
// begin enable ;
8873: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8874: LD_STRING updateTimer(
8876: PUSH
8877: LD_OWVAR 1
8881: STR
8882: PUSH
8883: LD_STRING );
8885: STR
8886: PPUSH
8887: CALL_OW 559
// end ;
8891: END
// every 0 0$1 do
8892: GO 8894
8894: DISABLE
// begin globalGameSaveCounter := 0 ;
8895: LD_ADDR_EXP 31
8899: PUSH
8900: LD_INT 0
8902: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
8903: LD_STRING setGameSaveCounter(0)
8905: PPUSH
8906: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
8910: LD_STRING initStreamRollete();
8912: PPUSH
8913: CALL_OW 559
// InitStreamMode ;
8917: CALL 10260 0 0
// DefineStreamItems ( false ) ;
8921: LD_INT 0
8923: PPUSH
8924: CALL 10724 0 1
// end ;
8928: END
// export function SOS_MapStart ( ) ; begin
8929: LD_INT 0
8931: PPUSH
// if streamModeActive then
8932: LD_EXP 32
8936: IFFALSE 8945
// DefineStreamItems ( true ) ;
8938: LD_INT 1
8940: PPUSH
8941: CALL 10724 0 1
// UpdateLuaVariables ( ) ;
8945: CALL 8962 0 0
// UpdateFactoryWaypoints ( ) ;
8949: CALL 23726 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8953: CALL 23978 0 0
// end ;
8957: LD_VAR 0 1
8961: RET
// function UpdateLuaVariables ( ) ; begin
8962: LD_INT 0
8964: PPUSH
// if globalGameSaveCounter then
8965: LD_EXP 31
8969: IFFALSE 9003
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
8971: LD_ADDR_EXP 31
8975: PUSH
8976: LD_EXP 31
8980: PPUSH
8981: CALL 69337 0 1
8985: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8986: LD_STRING setGameSaveCounter(
8988: PUSH
8989: LD_EXP 31
8993: STR
8994: PUSH
8995: LD_STRING )
8997: STR
8998: PPUSH
8999: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
9003: LD_STRING setGameDifficulty(
9005: PUSH
9006: LD_OWVAR 67
9010: STR
9011: PUSH
9012: LD_STRING )
9014: STR
9015: PPUSH
9016: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
9020: LD_STRING displayDifficulty(
9022: PUSH
9023: LD_OWVAR 67
9027: STR
9028: PUSH
9029: LD_STRING )
9031: STR
9032: PPUSH
9033: CALL_OW 559
// end ;
9037: LD_VAR 0 1
9041: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
9042: LD_INT 0
9044: PPUSH
// if p2 = stream_mode then
9045: LD_VAR 0 2
9049: PUSH
9050: LD_INT 100
9052: EQUAL
9053: IFFALSE 10056
// begin if not StreamModeActive then
9055: LD_EXP 32
9059: NOT
9060: IFFALSE 9070
// StreamModeActive := true ;
9062: LD_ADDR_EXP 32
9066: PUSH
9067: LD_INT 1
9069: ST_TO_ADDR
// if p3 = 0 then
9070: LD_VAR 0 3
9074: PUSH
9075: LD_INT 0
9077: EQUAL
9078: IFFALSE 9084
// InitStreamMode ;
9080: CALL 10260 0 0
// if p3 = 1 then
9084: LD_VAR 0 3
9088: PUSH
9089: LD_INT 1
9091: EQUAL
9092: IFFALSE 9102
// sRocket := true ;
9094: LD_ADDR_EXP 37
9098: PUSH
9099: LD_INT 1
9101: ST_TO_ADDR
// if p3 = 2 then
9102: LD_VAR 0 3
9106: PUSH
9107: LD_INT 2
9109: EQUAL
9110: IFFALSE 9120
// sSpeed := true ;
9112: LD_ADDR_EXP 36
9116: PUSH
9117: LD_INT 1
9119: ST_TO_ADDR
// if p3 = 3 then
9120: LD_VAR 0 3
9124: PUSH
9125: LD_INT 3
9127: EQUAL
9128: IFFALSE 9138
// sEngine := true ;
9130: LD_ADDR_EXP 38
9134: PUSH
9135: LD_INT 1
9137: ST_TO_ADDR
// if p3 = 4 then
9138: LD_VAR 0 3
9142: PUSH
9143: LD_INT 4
9145: EQUAL
9146: IFFALSE 9156
// sSpec := true ;
9148: LD_ADDR_EXP 35
9152: PUSH
9153: LD_INT 1
9155: ST_TO_ADDR
// if p3 = 5 then
9156: LD_VAR 0 3
9160: PUSH
9161: LD_INT 5
9163: EQUAL
9164: IFFALSE 9174
// sLevel := true ;
9166: LD_ADDR_EXP 39
9170: PUSH
9171: LD_INT 1
9173: ST_TO_ADDR
// if p3 = 6 then
9174: LD_VAR 0 3
9178: PUSH
9179: LD_INT 6
9181: EQUAL
9182: IFFALSE 9192
// sArmoury := true ;
9184: LD_ADDR_EXP 40
9188: PUSH
9189: LD_INT 1
9191: ST_TO_ADDR
// if p3 = 7 then
9192: LD_VAR 0 3
9196: PUSH
9197: LD_INT 7
9199: EQUAL
9200: IFFALSE 9210
// sRadar := true ;
9202: LD_ADDR_EXP 41
9206: PUSH
9207: LD_INT 1
9209: ST_TO_ADDR
// if p3 = 8 then
9210: LD_VAR 0 3
9214: PUSH
9215: LD_INT 8
9217: EQUAL
9218: IFFALSE 9228
// sBunker := true ;
9220: LD_ADDR_EXP 42
9224: PUSH
9225: LD_INT 1
9227: ST_TO_ADDR
// if p3 = 9 then
9228: LD_VAR 0 3
9232: PUSH
9233: LD_INT 9
9235: EQUAL
9236: IFFALSE 9246
// sHack := true ;
9238: LD_ADDR_EXP 43
9242: PUSH
9243: LD_INT 1
9245: ST_TO_ADDR
// if p3 = 10 then
9246: LD_VAR 0 3
9250: PUSH
9251: LD_INT 10
9253: EQUAL
9254: IFFALSE 9264
// sFire := true ;
9256: LD_ADDR_EXP 44
9260: PUSH
9261: LD_INT 1
9263: ST_TO_ADDR
// if p3 = 11 then
9264: LD_VAR 0 3
9268: PUSH
9269: LD_INT 11
9271: EQUAL
9272: IFFALSE 9282
// sRefresh := true ;
9274: LD_ADDR_EXP 45
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// if p3 = 12 then
9282: LD_VAR 0 3
9286: PUSH
9287: LD_INT 12
9289: EQUAL
9290: IFFALSE 9300
// sExp := true ;
9292: LD_ADDR_EXP 46
9296: PUSH
9297: LD_INT 1
9299: ST_TO_ADDR
// if p3 = 13 then
9300: LD_VAR 0 3
9304: PUSH
9305: LD_INT 13
9307: EQUAL
9308: IFFALSE 9318
// sDepot := true ;
9310: LD_ADDR_EXP 47
9314: PUSH
9315: LD_INT 1
9317: ST_TO_ADDR
// if p3 = 14 then
9318: LD_VAR 0 3
9322: PUSH
9323: LD_INT 14
9325: EQUAL
9326: IFFALSE 9336
// sFlag := true ;
9328: LD_ADDR_EXP 48
9332: PUSH
9333: LD_INT 1
9335: ST_TO_ADDR
// if p3 = 15 then
9336: LD_VAR 0 3
9340: PUSH
9341: LD_INT 15
9343: EQUAL
9344: IFFALSE 9354
// sKamikadze := true ;
9346: LD_ADDR_EXP 56
9350: PUSH
9351: LD_INT 1
9353: ST_TO_ADDR
// if p3 = 16 then
9354: LD_VAR 0 3
9358: PUSH
9359: LD_INT 16
9361: EQUAL
9362: IFFALSE 9372
// sTroll := true ;
9364: LD_ADDR_EXP 57
9368: PUSH
9369: LD_INT 1
9371: ST_TO_ADDR
// if p3 = 17 then
9372: LD_VAR 0 3
9376: PUSH
9377: LD_INT 17
9379: EQUAL
9380: IFFALSE 9390
// sSlow := true ;
9382: LD_ADDR_EXP 58
9386: PUSH
9387: LD_INT 1
9389: ST_TO_ADDR
// if p3 = 18 then
9390: LD_VAR 0 3
9394: PUSH
9395: LD_INT 18
9397: EQUAL
9398: IFFALSE 9408
// sLack := true ;
9400: LD_ADDR_EXP 59
9404: PUSH
9405: LD_INT 1
9407: ST_TO_ADDR
// if p3 = 19 then
9408: LD_VAR 0 3
9412: PUSH
9413: LD_INT 19
9415: EQUAL
9416: IFFALSE 9426
// sTank := true ;
9418: LD_ADDR_EXP 61
9422: PUSH
9423: LD_INT 1
9425: ST_TO_ADDR
// if p3 = 20 then
9426: LD_VAR 0 3
9430: PUSH
9431: LD_INT 20
9433: EQUAL
9434: IFFALSE 9444
// sRemote := true ;
9436: LD_ADDR_EXP 62
9440: PUSH
9441: LD_INT 1
9443: ST_TO_ADDR
// if p3 = 21 then
9444: LD_VAR 0 3
9448: PUSH
9449: LD_INT 21
9451: EQUAL
9452: IFFALSE 9462
// sPowell := true ;
9454: LD_ADDR_EXP 63
9458: PUSH
9459: LD_INT 1
9461: ST_TO_ADDR
// if p3 = 22 then
9462: LD_VAR 0 3
9466: PUSH
9467: LD_INT 22
9469: EQUAL
9470: IFFALSE 9480
// sTeleport := true ;
9472: LD_ADDR_EXP 66
9476: PUSH
9477: LD_INT 1
9479: ST_TO_ADDR
// if p3 = 23 then
9480: LD_VAR 0 3
9484: PUSH
9485: LD_INT 23
9487: EQUAL
9488: IFFALSE 9498
// sOilTower := true ;
9490: LD_ADDR_EXP 68
9494: PUSH
9495: LD_INT 1
9497: ST_TO_ADDR
// if p3 = 24 then
9498: LD_VAR 0 3
9502: PUSH
9503: LD_INT 24
9505: EQUAL
9506: IFFALSE 9516
// sShovel := true ;
9508: LD_ADDR_EXP 69
9512: PUSH
9513: LD_INT 1
9515: ST_TO_ADDR
// if p3 = 25 then
9516: LD_VAR 0 3
9520: PUSH
9521: LD_INT 25
9523: EQUAL
9524: IFFALSE 9534
// sSheik := true ;
9526: LD_ADDR_EXP 70
9530: PUSH
9531: LD_INT 1
9533: ST_TO_ADDR
// if p3 = 26 then
9534: LD_VAR 0 3
9538: PUSH
9539: LD_INT 26
9541: EQUAL
9542: IFFALSE 9552
// sEarthquake := true ;
9544: LD_ADDR_EXP 72
9548: PUSH
9549: LD_INT 1
9551: ST_TO_ADDR
// if p3 = 27 then
9552: LD_VAR 0 3
9556: PUSH
9557: LD_INT 27
9559: EQUAL
9560: IFFALSE 9570
// sAI := true ;
9562: LD_ADDR_EXP 73
9566: PUSH
9567: LD_INT 1
9569: ST_TO_ADDR
// if p3 = 28 then
9570: LD_VAR 0 3
9574: PUSH
9575: LD_INT 28
9577: EQUAL
9578: IFFALSE 9588
// sCargo := true ;
9580: LD_ADDR_EXP 76
9584: PUSH
9585: LD_INT 1
9587: ST_TO_ADDR
// if p3 = 29 then
9588: LD_VAR 0 3
9592: PUSH
9593: LD_INT 29
9595: EQUAL
9596: IFFALSE 9606
// sDLaser := true ;
9598: LD_ADDR_EXP 77
9602: PUSH
9603: LD_INT 1
9605: ST_TO_ADDR
// if p3 = 30 then
9606: LD_VAR 0 3
9610: PUSH
9611: LD_INT 30
9613: EQUAL
9614: IFFALSE 9624
// sExchange := true ;
9616: LD_ADDR_EXP 78
9620: PUSH
9621: LD_INT 1
9623: ST_TO_ADDR
// if p3 = 31 then
9624: LD_VAR 0 3
9628: PUSH
9629: LD_INT 31
9631: EQUAL
9632: IFFALSE 9642
// sFac := true ;
9634: LD_ADDR_EXP 79
9638: PUSH
9639: LD_INT 1
9641: ST_TO_ADDR
// if p3 = 32 then
9642: LD_VAR 0 3
9646: PUSH
9647: LD_INT 32
9649: EQUAL
9650: IFFALSE 9660
// sPower := true ;
9652: LD_ADDR_EXP 80
9656: PUSH
9657: LD_INT 1
9659: ST_TO_ADDR
// if p3 = 33 then
9660: LD_VAR 0 3
9664: PUSH
9665: LD_INT 33
9667: EQUAL
9668: IFFALSE 9678
// sRandom := true ;
9670: LD_ADDR_EXP 81
9674: PUSH
9675: LD_INT 1
9677: ST_TO_ADDR
// if p3 = 34 then
9678: LD_VAR 0 3
9682: PUSH
9683: LD_INT 34
9685: EQUAL
9686: IFFALSE 9696
// sShield := true ;
9688: LD_ADDR_EXP 82
9692: PUSH
9693: LD_INT 1
9695: ST_TO_ADDR
// if p3 = 35 then
9696: LD_VAR 0 3
9700: PUSH
9701: LD_INT 35
9703: EQUAL
9704: IFFALSE 9714
// sTime := true ;
9706: LD_ADDR_EXP 83
9710: PUSH
9711: LD_INT 1
9713: ST_TO_ADDR
// if p3 = 36 then
9714: LD_VAR 0 3
9718: PUSH
9719: LD_INT 36
9721: EQUAL
9722: IFFALSE 9732
// sTools := true ;
9724: LD_ADDR_EXP 84
9728: PUSH
9729: LD_INT 1
9731: ST_TO_ADDR
// if p3 = 101 then
9732: LD_VAR 0 3
9736: PUSH
9737: LD_INT 101
9739: EQUAL
9740: IFFALSE 9750
// sSold := true ;
9742: LD_ADDR_EXP 49
9746: PUSH
9747: LD_INT 1
9749: ST_TO_ADDR
// if p3 = 102 then
9750: LD_VAR 0 3
9754: PUSH
9755: LD_INT 102
9757: EQUAL
9758: IFFALSE 9768
// sDiff := true ;
9760: LD_ADDR_EXP 50
9764: PUSH
9765: LD_INT 1
9767: ST_TO_ADDR
// if p3 = 103 then
9768: LD_VAR 0 3
9772: PUSH
9773: LD_INT 103
9775: EQUAL
9776: IFFALSE 9786
// sFog := true ;
9778: LD_ADDR_EXP 53
9782: PUSH
9783: LD_INT 1
9785: ST_TO_ADDR
// if p3 = 104 then
9786: LD_VAR 0 3
9790: PUSH
9791: LD_INT 104
9793: EQUAL
9794: IFFALSE 9804
// sReset := true ;
9796: LD_ADDR_EXP 54
9800: PUSH
9801: LD_INT 1
9803: ST_TO_ADDR
// if p3 = 105 then
9804: LD_VAR 0 3
9808: PUSH
9809: LD_INT 105
9811: EQUAL
9812: IFFALSE 9822
// sSun := true ;
9814: LD_ADDR_EXP 55
9818: PUSH
9819: LD_INT 1
9821: ST_TO_ADDR
// if p3 = 106 then
9822: LD_VAR 0 3
9826: PUSH
9827: LD_INT 106
9829: EQUAL
9830: IFFALSE 9840
// sTiger := true ;
9832: LD_ADDR_EXP 51
9836: PUSH
9837: LD_INT 1
9839: ST_TO_ADDR
// if p3 = 107 then
9840: LD_VAR 0 3
9844: PUSH
9845: LD_INT 107
9847: EQUAL
9848: IFFALSE 9858
// sBomb := true ;
9850: LD_ADDR_EXP 52
9854: PUSH
9855: LD_INT 1
9857: ST_TO_ADDR
// if p3 = 108 then
9858: LD_VAR 0 3
9862: PUSH
9863: LD_INT 108
9865: EQUAL
9866: IFFALSE 9876
// sWound := true ;
9868: LD_ADDR_EXP 60
9872: PUSH
9873: LD_INT 1
9875: ST_TO_ADDR
// if p3 = 109 then
9876: LD_VAR 0 3
9880: PUSH
9881: LD_INT 109
9883: EQUAL
9884: IFFALSE 9894
// sBetray := true ;
9886: LD_ADDR_EXP 64
9890: PUSH
9891: LD_INT 1
9893: ST_TO_ADDR
// if p3 = 110 then
9894: LD_VAR 0 3
9898: PUSH
9899: LD_INT 110
9901: EQUAL
9902: IFFALSE 9912
// sContamin := true ;
9904: LD_ADDR_EXP 65
9908: PUSH
9909: LD_INT 1
9911: ST_TO_ADDR
// if p3 = 111 then
9912: LD_VAR 0 3
9916: PUSH
9917: LD_INT 111
9919: EQUAL
9920: IFFALSE 9930
// sOil := true ;
9922: LD_ADDR_EXP 67
9926: PUSH
9927: LD_INT 1
9929: ST_TO_ADDR
// if p3 = 112 then
9930: LD_VAR 0 3
9934: PUSH
9935: LD_INT 112
9937: EQUAL
9938: IFFALSE 9948
// sStu := true ;
9940: LD_ADDR_EXP 71
9944: PUSH
9945: LD_INT 1
9947: ST_TO_ADDR
// if p3 = 113 then
9948: LD_VAR 0 3
9952: PUSH
9953: LD_INT 113
9955: EQUAL
9956: IFFALSE 9966
// sBazooka := true ;
9958: LD_ADDR_EXP 74
9962: PUSH
9963: LD_INT 1
9965: ST_TO_ADDR
// if p3 = 114 then
9966: LD_VAR 0 3
9970: PUSH
9971: LD_INT 114
9973: EQUAL
9974: IFFALSE 9984
// sMortar := true ;
9976: LD_ADDR_EXP 75
9980: PUSH
9981: LD_INT 1
9983: ST_TO_ADDR
// if p3 = 115 then
9984: LD_VAR 0 3
9988: PUSH
9989: LD_INT 115
9991: EQUAL
9992: IFFALSE 10002
// sRanger := true ;
9994: LD_ADDR_EXP 85
9998: PUSH
9999: LD_INT 1
10001: ST_TO_ADDR
// if p3 = 116 then
10002: LD_VAR 0 3
10006: PUSH
10007: LD_INT 116
10009: EQUAL
10010: IFFALSE 10020
// sComputer := true ;
10012: LD_ADDR_EXP 86
10016: PUSH
10017: LD_INT 1
10019: ST_TO_ADDR
// if p3 = 117 then
10020: LD_VAR 0 3
10024: PUSH
10025: LD_INT 117
10027: EQUAL
10028: IFFALSE 10038
// s30 := true ;
10030: LD_ADDR_EXP 87
10034: PUSH
10035: LD_INT 1
10037: ST_TO_ADDR
// if p3 = 118 then
10038: LD_VAR 0 3
10042: PUSH
10043: LD_INT 118
10045: EQUAL
10046: IFFALSE 10056
// s60 := true ;
10048: LD_ADDR_EXP 88
10052: PUSH
10053: LD_INT 1
10055: ST_TO_ADDR
// end ; if p2 = hack_mode then
10056: LD_VAR 0 2
10060: PUSH
10061: LD_INT 101
10063: EQUAL
10064: IFFALSE 10192
// begin case p3 of 1 :
10066: LD_VAR 0 3
10070: PUSH
10071: LD_INT 1
10073: DOUBLE
10074: EQUAL
10075: IFTRUE 10079
10077: GO 10086
10079: POP
// hHackUnlimitedResources ; 2 :
10080: CALL 22339 0 0
10084: GO 10192
10086: LD_INT 2
10088: DOUBLE
10089: EQUAL
10090: IFTRUE 10094
10092: GO 10101
10094: POP
// hHackSetLevel10 ; 3 :
10095: CALL 22472 0 0
10099: GO 10192
10101: LD_INT 3
10103: DOUBLE
10104: EQUAL
10105: IFTRUE 10109
10107: GO 10116
10109: POP
// hHackSetLevel10YourUnits ; 4 :
10110: CALL 22557 0 0
10114: GO 10192
10116: LD_INT 4
10118: DOUBLE
10119: EQUAL
10120: IFTRUE 10124
10122: GO 10131
10124: POP
// hHackInvincible ; 5 :
10125: CALL 23005 0 0
10129: GO 10192
10131: LD_INT 5
10133: DOUBLE
10134: EQUAL
10135: IFTRUE 10139
10137: GO 10146
10139: POP
// hHackInvisible ; 6 :
10140: CALL 23116 0 0
10144: GO 10192
10146: LD_INT 6
10148: DOUBLE
10149: EQUAL
10150: IFTRUE 10154
10152: GO 10161
10154: POP
// hHackChangeYourSide ; 7 :
10155: CALL 23173 0 0
10159: GO 10192
10161: LD_INT 7
10163: DOUBLE
10164: EQUAL
10165: IFTRUE 10169
10167: GO 10176
10169: POP
// hHackChangeUnitSide ; 8 :
10170: CALL 23215 0 0
10174: GO 10192
10176: LD_INT 8
10178: DOUBLE
10179: EQUAL
10180: IFTRUE 10184
10182: GO 10191
10184: POP
// hHackFog ; end ;
10185: CALL 23316 0 0
10189: GO 10192
10191: POP
// end ; if p2 = game_save_mode then
10192: LD_VAR 0 2
10196: PUSH
10197: LD_INT 102
10199: EQUAL
10200: IFFALSE 10255
// begin if p3 = 1 then
10202: LD_VAR 0 3
10206: PUSH
10207: LD_INT 1
10209: EQUAL
10210: IFFALSE 10222
// globalGameSaveCounter := p4 ;
10212: LD_ADDR_EXP 31
10216: PUSH
10217: LD_VAR 0 4
10221: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10222: LD_VAR 0 3
10226: PUSH
10227: LD_INT 2
10229: EQUAL
10230: PUSH
10231: LD_EXP 31
10235: AND
10236: IFFALSE 10255
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10238: LD_STRING setGameSaveCounter(
10240: PUSH
10241: LD_EXP 31
10245: STR
10246: PUSH
10247: LD_STRING )
10249: STR
10250: PPUSH
10251: CALL_OW 559
// end ; end ;
10255: LD_VAR 0 7
10259: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
10260: LD_INT 0
10262: PPUSH
// streamModeActive := false ;
10263: LD_ADDR_EXP 32
10267: PUSH
10268: LD_INT 0
10270: ST_TO_ADDR
// normalCounter := 36 ;
10271: LD_ADDR_EXP 33
10275: PUSH
10276: LD_INT 36
10278: ST_TO_ADDR
// hardcoreCounter := 18 ;
10279: LD_ADDR_EXP 34
10283: PUSH
10284: LD_INT 18
10286: ST_TO_ADDR
// sRocket := false ;
10287: LD_ADDR_EXP 37
10291: PUSH
10292: LD_INT 0
10294: ST_TO_ADDR
// sSpeed := false ;
10295: LD_ADDR_EXP 36
10299: PUSH
10300: LD_INT 0
10302: ST_TO_ADDR
// sEngine := false ;
10303: LD_ADDR_EXP 38
10307: PUSH
10308: LD_INT 0
10310: ST_TO_ADDR
// sSpec := false ;
10311: LD_ADDR_EXP 35
10315: PUSH
10316: LD_INT 0
10318: ST_TO_ADDR
// sLevel := false ;
10319: LD_ADDR_EXP 39
10323: PUSH
10324: LD_INT 0
10326: ST_TO_ADDR
// sArmoury := false ;
10327: LD_ADDR_EXP 40
10331: PUSH
10332: LD_INT 0
10334: ST_TO_ADDR
// sRadar := false ;
10335: LD_ADDR_EXP 41
10339: PUSH
10340: LD_INT 0
10342: ST_TO_ADDR
// sBunker := false ;
10343: LD_ADDR_EXP 42
10347: PUSH
10348: LD_INT 0
10350: ST_TO_ADDR
// sHack := false ;
10351: LD_ADDR_EXP 43
10355: PUSH
10356: LD_INT 0
10358: ST_TO_ADDR
// sFire := false ;
10359: LD_ADDR_EXP 44
10363: PUSH
10364: LD_INT 0
10366: ST_TO_ADDR
// sRefresh := false ;
10367: LD_ADDR_EXP 45
10371: PUSH
10372: LD_INT 0
10374: ST_TO_ADDR
// sExp := false ;
10375: LD_ADDR_EXP 46
10379: PUSH
10380: LD_INT 0
10382: ST_TO_ADDR
// sDepot := false ;
10383: LD_ADDR_EXP 47
10387: PUSH
10388: LD_INT 0
10390: ST_TO_ADDR
// sFlag := false ;
10391: LD_ADDR_EXP 48
10395: PUSH
10396: LD_INT 0
10398: ST_TO_ADDR
// sKamikadze := false ;
10399: LD_ADDR_EXP 56
10403: PUSH
10404: LD_INT 0
10406: ST_TO_ADDR
// sTroll := false ;
10407: LD_ADDR_EXP 57
10411: PUSH
10412: LD_INT 0
10414: ST_TO_ADDR
// sSlow := false ;
10415: LD_ADDR_EXP 58
10419: PUSH
10420: LD_INT 0
10422: ST_TO_ADDR
// sLack := false ;
10423: LD_ADDR_EXP 59
10427: PUSH
10428: LD_INT 0
10430: ST_TO_ADDR
// sTank := false ;
10431: LD_ADDR_EXP 61
10435: PUSH
10436: LD_INT 0
10438: ST_TO_ADDR
// sRemote := false ;
10439: LD_ADDR_EXP 62
10443: PUSH
10444: LD_INT 0
10446: ST_TO_ADDR
// sPowell := false ;
10447: LD_ADDR_EXP 63
10451: PUSH
10452: LD_INT 0
10454: ST_TO_ADDR
// sTeleport := false ;
10455: LD_ADDR_EXP 66
10459: PUSH
10460: LD_INT 0
10462: ST_TO_ADDR
// sOilTower := false ;
10463: LD_ADDR_EXP 68
10467: PUSH
10468: LD_INT 0
10470: ST_TO_ADDR
// sShovel := false ;
10471: LD_ADDR_EXP 69
10475: PUSH
10476: LD_INT 0
10478: ST_TO_ADDR
// sSheik := false ;
10479: LD_ADDR_EXP 70
10483: PUSH
10484: LD_INT 0
10486: ST_TO_ADDR
// sEarthquake := false ;
10487: LD_ADDR_EXP 72
10491: PUSH
10492: LD_INT 0
10494: ST_TO_ADDR
// sAI := false ;
10495: LD_ADDR_EXP 73
10499: PUSH
10500: LD_INT 0
10502: ST_TO_ADDR
// sCargo := false ;
10503: LD_ADDR_EXP 76
10507: PUSH
10508: LD_INT 0
10510: ST_TO_ADDR
// sDLaser := false ;
10511: LD_ADDR_EXP 77
10515: PUSH
10516: LD_INT 0
10518: ST_TO_ADDR
// sExchange := false ;
10519: LD_ADDR_EXP 78
10523: PUSH
10524: LD_INT 0
10526: ST_TO_ADDR
// sFac := false ;
10527: LD_ADDR_EXP 79
10531: PUSH
10532: LD_INT 0
10534: ST_TO_ADDR
// sPower := false ;
10535: LD_ADDR_EXP 80
10539: PUSH
10540: LD_INT 0
10542: ST_TO_ADDR
// sRandom := false ;
10543: LD_ADDR_EXP 81
10547: PUSH
10548: LD_INT 0
10550: ST_TO_ADDR
// sShield := false ;
10551: LD_ADDR_EXP 82
10555: PUSH
10556: LD_INT 0
10558: ST_TO_ADDR
// sTime := false ;
10559: LD_ADDR_EXP 83
10563: PUSH
10564: LD_INT 0
10566: ST_TO_ADDR
// sTools := false ;
10567: LD_ADDR_EXP 84
10571: PUSH
10572: LD_INT 0
10574: ST_TO_ADDR
// sSold := false ;
10575: LD_ADDR_EXP 49
10579: PUSH
10580: LD_INT 0
10582: ST_TO_ADDR
// sDiff := false ;
10583: LD_ADDR_EXP 50
10587: PUSH
10588: LD_INT 0
10590: ST_TO_ADDR
// sFog := false ;
10591: LD_ADDR_EXP 53
10595: PUSH
10596: LD_INT 0
10598: ST_TO_ADDR
// sReset := false ;
10599: LD_ADDR_EXP 54
10603: PUSH
10604: LD_INT 0
10606: ST_TO_ADDR
// sSun := false ;
10607: LD_ADDR_EXP 55
10611: PUSH
10612: LD_INT 0
10614: ST_TO_ADDR
// sTiger := false ;
10615: LD_ADDR_EXP 51
10619: PUSH
10620: LD_INT 0
10622: ST_TO_ADDR
// sBomb := false ;
10623: LD_ADDR_EXP 52
10627: PUSH
10628: LD_INT 0
10630: ST_TO_ADDR
// sWound := false ;
10631: LD_ADDR_EXP 60
10635: PUSH
10636: LD_INT 0
10638: ST_TO_ADDR
// sBetray := false ;
10639: LD_ADDR_EXP 64
10643: PUSH
10644: LD_INT 0
10646: ST_TO_ADDR
// sContamin := false ;
10647: LD_ADDR_EXP 65
10651: PUSH
10652: LD_INT 0
10654: ST_TO_ADDR
// sOil := false ;
10655: LD_ADDR_EXP 67
10659: PUSH
10660: LD_INT 0
10662: ST_TO_ADDR
// sStu := false ;
10663: LD_ADDR_EXP 71
10667: PUSH
10668: LD_INT 0
10670: ST_TO_ADDR
// sBazooka := false ;
10671: LD_ADDR_EXP 74
10675: PUSH
10676: LD_INT 0
10678: ST_TO_ADDR
// sMortar := false ;
10679: LD_ADDR_EXP 75
10683: PUSH
10684: LD_INT 0
10686: ST_TO_ADDR
// sRanger := false ;
10687: LD_ADDR_EXP 85
10691: PUSH
10692: LD_INT 0
10694: ST_TO_ADDR
// sComputer := false ;
10695: LD_ADDR_EXP 86
10699: PUSH
10700: LD_INT 0
10702: ST_TO_ADDR
// s30 := false ;
10703: LD_ADDR_EXP 87
10707: PUSH
10708: LD_INT 0
10710: ST_TO_ADDR
// s60 := false ;
10711: LD_ADDR_EXP 88
10715: PUSH
10716: LD_INT 0
10718: ST_TO_ADDR
// end ;
10719: LD_VAR 0 1
10723: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10724: LD_INT 0
10726: PPUSH
10727: PPUSH
10728: PPUSH
10729: PPUSH
10730: PPUSH
10731: PPUSH
10732: PPUSH
// result := [ ] ;
10733: LD_ADDR_VAR 0 2
10737: PUSH
10738: EMPTY
10739: ST_TO_ADDR
// if campaign_id = 1 then
10740: LD_OWVAR 69
10744: PUSH
10745: LD_INT 1
10747: EQUAL
10748: IFFALSE 13914
// begin case mission_number of 1 :
10750: LD_OWVAR 70
10754: PUSH
10755: LD_INT 1
10757: DOUBLE
10758: EQUAL
10759: IFTRUE 10763
10761: GO 10839
10763: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10764: LD_ADDR_VAR 0 2
10768: PUSH
10769: LD_INT 2
10771: PUSH
10772: LD_INT 4
10774: PUSH
10775: LD_INT 11
10777: PUSH
10778: LD_INT 12
10780: PUSH
10781: LD_INT 15
10783: PUSH
10784: LD_INT 16
10786: PUSH
10787: LD_INT 22
10789: PUSH
10790: LD_INT 23
10792: PUSH
10793: LD_INT 26
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 101
10809: PUSH
10810: LD_INT 102
10812: PUSH
10813: LD_INT 106
10815: PUSH
10816: LD_INT 116
10818: PUSH
10819: LD_INT 117
10821: PUSH
10822: LD_INT 118
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: ST_TO_ADDR
10837: GO 13912
10839: LD_INT 2
10841: DOUBLE
10842: EQUAL
10843: IFTRUE 10847
10845: GO 10931
10847: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10848: LD_ADDR_VAR 0 2
10852: PUSH
10853: LD_INT 2
10855: PUSH
10856: LD_INT 4
10858: PUSH
10859: LD_INT 11
10861: PUSH
10862: LD_INT 12
10864: PUSH
10865: LD_INT 15
10867: PUSH
10868: LD_INT 16
10870: PUSH
10871: LD_INT 22
10873: PUSH
10874: LD_INT 23
10876: PUSH
10877: LD_INT 26
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: PUSH
10891: LD_INT 101
10893: PUSH
10894: LD_INT 102
10896: PUSH
10897: LD_INT 105
10899: PUSH
10900: LD_INT 106
10902: PUSH
10903: LD_INT 108
10905: PUSH
10906: LD_INT 116
10908: PUSH
10909: LD_INT 117
10911: PUSH
10912: LD_INT 118
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: ST_TO_ADDR
10929: GO 13912
10931: LD_INT 3
10933: DOUBLE
10934: EQUAL
10935: IFTRUE 10939
10937: GO 11027
10939: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10940: LD_ADDR_VAR 0 2
10944: PUSH
10945: LD_INT 2
10947: PUSH
10948: LD_INT 4
10950: PUSH
10951: LD_INT 5
10953: PUSH
10954: LD_INT 11
10956: PUSH
10957: LD_INT 12
10959: PUSH
10960: LD_INT 15
10962: PUSH
10963: LD_INT 16
10965: PUSH
10966: LD_INT 22
10968: PUSH
10969: LD_INT 26
10971: PUSH
10972: LD_INT 36
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 101
10989: PUSH
10990: LD_INT 102
10992: PUSH
10993: LD_INT 105
10995: PUSH
10996: LD_INT 106
10998: PUSH
10999: LD_INT 108
11001: PUSH
11002: LD_INT 116
11004: PUSH
11005: LD_INT 117
11007: PUSH
11008: LD_INT 118
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: ST_TO_ADDR
11025: GO 13912
11027: LD_INT 4
11029: DOUBLE
11030: EQUAL
11031: IFTRUE 11035
11033: GO 11131
11035: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
11036: LD_ADDR_VAR 0 2
11040: PUSH
11041: LD_INT 2
11043: PUSH
11044: LD_INT 4
11046: PUSH
11047: LD_INT 5
11049: PUSH
11050: LD_INT 8
11052: PUSH
11053: LD_INT 11
11055: PUSH
11056: LD_INT 12
11058: PUSH
11059: LD_INT 15
11061: PUSH
11062: LD_INT 16
11064: PUSH
11065: LD_INT 22
11067: PUSH
11068: LD_INT 23
11070: PUSH
11071: LD_INT 26
11073: PUSH
11074: LD_INT 36
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: PUSH
11091: LD_INT 101
11093: PUSH
11094: LD_INT 102
11096: PUSH
11097: LD_INT 105
11099: PUSH
11100: LD_INT 106
11102: PUSH
11103: LD_INT 108
11105: PUSH
11106: LD_INT 116
11108: PUSH
11109: LD_INT 117
11111: PUSH
11112: LD_INT 118
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: ST_TO_ADDR
11129: GO 13912
11131: LD_INT 5
11133: DOUBLE
11134: EQUAL
11135: IFTRUE 11139
11137: GO 11251
11139: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
11140: LD_ADDR_VAR 0 2
11144: PUSH
11145: LD_INT 2
11147: PUSH
11148: LD_INT 4
11150: PUSH
11151: LD_INT 5
11153: PUSH
11154: LD_INT 6
11156: PUSH
11157: LD_INT 8
11159: PUSH
11160: LD_INT 11
11162: PUSH
11163: LD_INT 12
11165: PUSH
11166: LD_INT 15
11168: PUSH
11169: LD_INT 16
11171: PUSH
11172: LD_INT 22
11174: PUSH
11175: LD_INT 23
11177: PUSH
11178: LD_INT 25
11180: PUSH
11181: LD_INT 26
11183: PUSH
11184: LD_INT 36
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 101
11205: PUSH
11206: LD_INT 102
11208: PUSH
11209: LD_INT 105
11211: PUSH
11212: LD_INT 106
11214: PUSH
11215: LD_INT 108
11217: PUSH
11218: LD_INT 109
11220: PUSH
11221: LD_INT 112
11223: PUSH
11224: LD_INT 116
11226: PUSH
11227: LD_INT 117
11229: PUSH
11230: LD_INT 118
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: ST_TO_ADDR
11249: GO 13912
11251: LD_INT 6
11253: DOUBLE
11254: EQUAL
11255: IFTRUE 11259
11257: GO 11391
11259: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11260: LD_ADDR_VAR 0 2
11264: PUSH
11265: LD_INT 2
11267: PUSH
11268: LD_INT 4
11270: PUSH
11271: LD_INT 5
11273: PUSH
11274: LD_INT 6
11276: PUSH
11277: LD_INT 8
11279: PUSH
11280: LD_INT 11
11282: PUSH
11283: LD_INT 12
11285: PUSH
11286: LD_INT 15
11288: PUSH
11289: LD_INT 16
11291: PUSH
11292: LD_INT 20
11294: PUSH
11295: LD_INT 21
11297: PUSH
11298: LD_INT 22
11300: PUSH
11301: LD_INT 23
11303: PUSH
11304: LD_INT 25
11306: PUSH
11307: LD_INT 26
11309: PUSH
11310: LD_INT 30
11312: PUSH
11313: LD_INT 31
11315: PUSH
11316: LD_INT 32
11318: PUSH
11319: LD_INT 36
11321: PUSH
11322: EMPTY
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: PUSH
11343: LD_INT 101
11345: PUSH
11346: LD_INT 102
11348: PUSH
11349: LD_INT 105
11351: PUSH
11352: LD_INT 106
11354: PUSH
11355: LD_INT 108
11357: PUSH
11358: LD_INT 109
11360: PUSH
11361: LD_INT 112
11363: PUSH
11364: LD_INT 116
11366: PUSH
11367: LD_INT 117
11369: PUSH
11370: LD_INT 118
11372: PUSH
11373: EMPTY
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: ST_TO_ADDR
11389: GO 13912
11391: LD_INT 7
11393: DOUBLE
11394: EQUAL
11395: IFTRUE 11399
11397: GO 11511
11399: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11400: LD_ADDR_VAR 0 2
11404: PUSH
11405: LD_INT 2
11407: PUSH
11408: LD_INT 4
11410: PUSH
11411: LD_INT 5
11413: PUSH
11414: LD_INT 7
11416: PUSH
11417: LD_INT 11
11419: PUSH
11420: LD_INT 12
11422: PUSH
11423: LD_INT 15
11425: PUSH
11426: LD_INT 16
11428: PUSH
11429: LD_INT 20
11431: PUSH
11432: LD_INT 21
11434: PUSH
11435: LD_INT 22
11437: PUSH
11438: LD_INT 23
11440: PUSH
11441: LD_INT 25
11443: PUSH
11444: LD_INT 26
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: PUSH
11463: LD_INT 101
11465: PUSH
11466: LD_INT 102
11468: PUSH
11469: LD_INT 103
11471: PUSH
11472: LD_INT 105
11474: PUSH
11475: LD_INT 106
11477: PUSH
11478: LD_INT 108
11480: PUSH
11481: LD_INT 112
11483: PUSH
11484: LD_INT 116
11486: PUSH
11487: LD_INT 117
11489: PUSH
11490: LD_INT 118
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: ST_TO_ADDR
11509: GO 13912
11511: LD_INT 8
11513: DOUBLE
11514: EQUAL
11515: IFTRUE 11519
11517: GO 11659
11519: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11520: LD_ADDR_VAR 0 2
11524: PUSH
11525: LD_INT 2
11527: PUSH
11528: LD_INT 4
11530: PUSH
11531: LD_INT 5
11533: PUSH
11534: LD_INT 6
11536: PUSH
11537: LD_INT 7
11539: PUSH
11540: LD_INT 8
11542: PUSH
11543: LD_INT 11
11545: PUSH
11546: LD_INT 12
11548: PUSH
11549: LD_INT 15
11551: PUSH
11552: LD_INT 16
11554: PUSH
11555: LD_INT 20
11557: PUSH
11558: LD_INT 21
11560: PUSH
11561: LD_INT 22
11563: PUSH
11564: LD_INT 23
11566: PUSH
11567: LD_INT 25
11569: PUSH
11570: LD_INT 26
11572: PUSH
11573: LD_INT 30
11575: PUSH
11576: LD_INT 31
11578: PUSH
11579: LD_INT 32
11581: PUSH
11582: LD_INT 36
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: PUSH
11607: LD_INT 101
11609: PUSH
11610: LD_INT 102
11612: PUSH
11613: LD_INT 103
11615: PUSH
11616: LD_INT 105
11618: PUSH
11619: LD_INT 106
11621: PUSH
11622: LD_INT 108
11624: PUSH
11625: LD_INT 109
11627: PUSH
11628: LD_INT 112
11630: PUSH
11631: LD_INT 116
11633: PUSH
11634: LD_INT 117
11636: PUSH
11637: LD_INT 118
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: ST_TO_ADDR
11657: GO 13912
11659: LD_INT 9
11661: DOUBLE
11662: EQUAL
11663: IFTRUE 11667
11665: GO 11815
11667: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11668: LD_ADDR_VAR 0 2
11672: PUSH
11673: LD_INT 2
11675: PUSH
11676: LD_INT 4
11678: PUSH
11679: LD_INT 5
11681: PUSH
11682: LD_INT 6
11684: PUSH
11685: LD_INT 7
11687: PUSH
11688: LD_INT 8
11690: PUSH
11691: LD_INT 11
11693: PUSH
11694: LD_INT 12
11696: PUSH
11697: LD_INT 15
11699: PUSH
11700: LD_INT 16
11702: PUSH
11703: LD_INT 20
11705: PUSH
11706: LD_INT 21
11708: PUSH
11709: LD_INT 22
11711: PUSH
11712: LD_INT 23
11714: PUSH
11715: LD_INT 25
11717: PUSH
11718: LD_INT 26
11720: PUSH
11721: LD_INT 28
11723: PUSH
11724: LD_INT 30
11726: PUSH
11727: LD_INT 31
11729: PUSH
11730: LD_INT 32
11732: PUSH
11733: LD_INT 36
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 101
11761: PUSH
11762: LD_INT 102
11764: PUSH
11765: LD_INT 103
11767: PUSH
11768: LD_INT 105
11770: PUSH
11771: LD_INT 106
11773: PUSH
11774: LD_INT 108
11776: PUSH
11777: LD_INT 109
11779: PUSH
11780: LD_INT 112
11782: PUSH
11783: LD_INT 114
11785: PUSH
11786: LD_INT 116
11788: PUSH
11789: LD_INT 117
11791: PUSH
11792: LD_INT 118
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: ST_TO_ADDR
11813: GO 13912
11815: LD_INT 10
11817: DOUBLE
11818: EQUAL
11819: IFTRUE 11823
11821: GO 12019
11823: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11824: LD_ADDR_VAR 0 2
11828: PUSH
11829: LD_INT 2
11831: PUSH
11832: LD_INT 4
11834: PUSH
11835: LD_INT 5
11837: PUSH
11838: LD_INT 6
11840: PUSH
11841: LD_INT 7
11843: PUSH
11844: LD_INT 8
11846: PUSH
11847: LD_INT 9
11849: PUSH
11850: LD_INT 10
11852: PUSH
11853: LD_INT 11
11855: PUSH
11856: LD_INT 12
11858: PUSH
11859: LD_INT 13
11861: PUSH
11862: LD_INT 14
11864: PUSH
11865: LD_INT 15
11867: PUSH
11868: LD_INT 16
11870: PUSH
11871: LD_INT 17
11873: PUSH
11874: LD_INT 18
11876: PUSH
11877: LD_INT 19
11879: PUSH
11880: LD_INT 20
11882: PUSH
11883: LD_INT 21
11885: PUSH
11886: LD_INT 22
11888: PUSH
11889: LD_INT 23
11891: PUSH
11892: LD_INT 24
11894: PUSH
11895: LD_INT 25
11897: PUSH
11898: LD_INT 26
11900: PUSH
11901: LD_INT 28
11903: PUSH
11904: LD_INT 30
11906: PUSH
11907: LD_INT 31
11909: PUSH
11910: LD_INT 32
11912: PUSH
11913: LD_INT 36
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: PUSH
11947: LD_INT 101
11949: PUSH
11950: LD_INT 102
11952: PUSH
11953: LD_INT 103
11955: PUSH
11956: LD_INT 104
11958: PUSH
11959: LD_INT 105
11961: PUSH
11962: LD_INT 106
11964: PUSH
11965: LD_INT 107
11967: PUSH
11968: LD_INT 108
11970: PUSH
11971: LD_INT 109
11973: PUSH
11974: LD_INT 110
11976: PUSH
11977: LD_INT 111
11979: PUSH
11980: LD_INT 112
11982: PUSH
11983: LD_INT 114
11985: PUSH
11986: LD_INT 116
11988: PUSH
11989: LD_INT 117
11991: PUSH
11992: LD_INT 118
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: ST_TO_ADDR
12017: GO 13912
12019: LD_INT 11
12021: DOUBLE
12022: EQUAL
12023: IFTRUE 12027
12025: GO 12231
12027: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
12028: LD_ADDR_VAR 0 2
12032: PUSH
12033: LD_INT 2
12035: PUSH
12036: LD_INT 3
12038: PUSH
12039: LD_INT 4
12041: PUSH
12042: LD_INT 5
12044: PUSH
12045: LD_INT 6
12047: PUSH
12048: LD_INT 7
12050: PUSH
12051: LD_INT 8
12053: PUSH
12054: LD_INT 9
12056: PUSH
12057: LD_INT 10
12059: PUSH
12060: LD_INT 11
12062: PUSH
12063: LD_INT 12
12065: PUSH
12066: LD_INT 13
12068: PUSH
12069: LD_INT 14
12071: PUSH
12072: LD_INT 15
12074: PUSH
12075: LD_INT 16
12077: PUSH
12078: LD_INT 17
12080: PUSH
12081: LD_INT 18
12083: PUSH
12084: LD_INT 19
12086: PUSH
12087: LD_INT 20
12089: PUSH
12090: LD_INT 21
12092: PUSH
12093: LD_INT 22
12095: PUSH
12096: LD_INT 23
12098: PUSH
12099: LD_INT 24
12101: PUSH
12102: LD_INT 25
12104: PUSH
12105: LD_INT 26
12107: PUSH
12108: LD_INT 28
12110: PUSH
12111: LD_INT 30
12113: PUSH
12114: LD_INT 31
12116: PUSH
12117: LD_INT 32
12119: PUSH
12120: LD_INT 34
12122: PUSH
12123: LD_INT 36
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: PUSH
12159: LD_INT 101
12161: PUSH
12162: LD_INT 102
12164: PUSH
12165: LD_INT 103
12167: PUSH
12168: LD_INT 104
12170: PUSH
12171: LD_INT 105
12173: PUSH
12174: LD_INT 106
12176: PUSH
12177: LD_INT 107
12179: PUSH
12180: LD_INT 108
12182: PUSH
12183: LD_INT 109
12185: PUSH
12186: LD_INT 110
12188: PUSH
12189: LD_INT 111
12191: PUSH
12192: LD_INT 112
12194: PUSH
12195: LD_INT 114
12197: PUSH
12198: LD_INT 116
12200: PUSH
12201: LD_INT 117
12203: PUSH
12204: LD_INT 118
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: ST_TO_ADDR
12229: GO 13912
12231: LD_INT 12
12233: DOUBLE
12234: EQUAL
12235: IFTRUE 12239
12237: GO 12459
12239: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12240: LD_ADDR_VAR 0 2
12244: PUSH
12245: LD_INT 1
12247: PUSH
12248: LD_INT 2
12250: PUSH
12251: LD_INT 3
12253: PUSH
12254: LD_INT 4
12256: PUSH
12257: LD_INT 5
12259: PUSH
12260: LD_INT 6
12262: PUSH
12263: LD_INT 7
12265: PUSH
12266: LD_INT 8
12268: PUSH
12269: LD_INT 9
12271: PUSH
12272: LD_INT 10
12274: PUSH
12275: LD_INT 11
12277: PUSH
12278: LD_INT 12
12280: PUSH
12281: LD_INT 13
12283: PUSH
12284: LD_INT 14
12286: PUSH
12287: LD_INT 15
12289: PUSH
12290: LD_INT 16
12292: PUSH
12293: LD_INT 17
12295: PUSH
12296: LD_INT 18
12298: PUSH
12299: LD_INT 19
12301: PUSH
12302: LD_INT 20
12304: PUSH
12305: LD_INT 21
12307: PUSH
12308: LD_INT 22
12310: PUSH
12311: LD_INT 23
12313: PUSH
12314: LD_INT 24
12316: PUSH
12317: LD_INT 25
12319: PUSH
12320: LD_INT 26
12322: PUSH
12323: LD_INT 27
12325: PUSH
12326: LD_INT 28
12328: PUSH
12329: LD_INT 30
12331: PUSH
12332: LD_INT 31
12334: PUSH
12335: LD_INT 32
12337: PUSH
12338: LD_INT 33
12340: PUSH
12341: LD_INT 34
12343: PUSH
12344: LD_INT 36
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 101
12385: PUSH
12386: LD_INT 102
12388: PUSH
12389: LD_INT 103
12391: PUSH
12392: LD_INT 104
12394: PUSH
12395: LD_INT 105
12397: PUSH
12398: LD_INT 106
12400: PUSH
12401: LD_INT 107
12403: PUSH
12404: LD_INT 108
12406: PUSH
12407: LD_INT 109
12409: PUSH
12410: LD_INT 110
12412: PUSH
12413: LD_INT 111
12415: PUSH
12416: LD_INT 112
12418: PUSH
12419: LD_INT 113
12421: PUSH
12422: LD_INT 114
12424: PUSH
12425: LD_INT 116
12427: PUSH
12428: LD_INT 117
12430: PUSH
12431: LD_INT 118
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: ST_TO_ADDR
12457: GO 13912
12459: LD_INT 13
12461: DOUBLE
12462: EQUAL
12463: IFTRUE 12467
12465: GO 12675
12467: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12468: LD_ADDR_VAR 0 2
12472: PUSH
12473: LD_INT 1
12475: PUSH
12476: LD_INT 2
12478: PUSH
12479: LD_INT 3
12481: PUSH
12482: LD_INT 4
12484: PUSH
12485: LD_INT 5
12487: PUSH
12488: LD_INT 8
12490: PUSH
12491: LD_INT 9
12493: PUSH
12494: LD_INT 10
12496: PUSH
12497: LD_INT 11
12499: PUSH
12500: LD_INT 12
12502: PUSH
12503: LD_INT 14
12505: PUSH
12506: LD_INT 15
12508: PUSH
12509: LD_INT 16
12511: PUSH
12512: LD_INT 17
12514: PUSH
12515: LD_INT 18
12517: PUSH
12518: LD_INT 19
12520: PUSH
12521: LD_INT 20
12523: PUSH
12524: LD_INT 21
12526: PUSH
12527: LD_INT 22
12529: PUSH
12530: LD_INT 23
12532: PUSH
12533: LD_INT 24
12535: PUSH
12536: LD_INT 25
12538: PUSH
12539: LD_INT 26
12541: PUSH
12542: LD_INT 27
12544: PUSH
12545: LD_INT 28
12547: PUSH
12548: LD_INT 30
12550: PUSH
12551: LD_INT 31
12553: PUSH
12554: LD_INT 32
12556: PUSH
12557: LD_INT 33
12559: PUSH
12560: LD_INT 34
12562: PUSH
12563: LD_INT 36
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: PUSH
12599: LD_INT 101
12601: PUSH
12602: LD_INT 102
12604: PUSH
12605: LD_INT 103
12607: PUSH
12608: LD_INT 104
12610: PUSH
12611: LD_INT 105
12613: PUSH
12614: LD_INT 106
12616: PUSH
12617: LD_INT 107
12619: PUSH
12620: LD_INT 108
12622: PUSH
12623: LD_INT 109
12625: PUSH
12626: LD_INT 110
12628: PUSH
12629: LD_INT 111
12631: PUSH
12632: LD_INT 112
12634: PUSH
12635: LD_INT 113
12637: PUSH
12638: LD_INT 114
12640: PUSH
12641: LD_INT 116
12643: PUSH
12644: LD_INT 117
12646: PUSH
12647: LD_INT 118
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: ST_TO_ADDR
12673: GO 13912
12675: LD_INT 14
12677: DOUBLE
12678: EQUAL
12679: IFTRUE 12683
12681: GO 12907
12683: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12684: LD_ADDR_VAR 0 2
12688: PUSH
12689: LD_INT 1
12691: PUSH
12692: LD_INT 2
12694: PUSH
12695: LD_INT 3
12697: PUSH
12698: LD_INT 4
12700: PUSH
12701: LD_INT 5
12703: PUSH
12704: LD_INT 6
12706: PUSH
12707: LD_INT 7
12709: PUSH
12710: LD_INT 8
12712: PUSH
12713: LD_INT 9
12715: PUSH
12716: LD_INT 10
12718: PUSH
12719: LD_INT 11
12721: PUSH
12722: LD_INT 12
12724: PUSH
12725: LD_INT 13
12727: PUSH
12728: LD_INT 14
12730: PUSH
12731: LD_INT 15
12733: PUSH
12734: LD_INT 16
12736: PUSH
12737: LD_INT 17
12739: PUSH
12740: LD_INT 18
12742: PUSH
12743: LD_INT 19
12745: PUSH
12746: LD_INT 20
12748: PUSH
12749: LD_INT 21
12751: PUSH
12752: LD_INT 22
12754: PUSH
12755: LD_INT 23
12757: PUSH
12758: LD_INT 24
12760: PUSH
12761: LD_INT 25
12763: PUSH
12764: LD_INT 26
12766: PUSH
12767: LD_INT 27
12769: PUSH
12770: LD_INT 28
12772: PUSH
12773: LD_INT 29
12775: PUSH
12776: LD_INT 30
12778: PUSH
12779: LD_INT 31
12781: PUSH
12782: LD_INT 32
12784: PUSH
12785: LD_INT 33
12787: PUSH
12788: LD_INT 34
12790: PUSH
12791: LD_INT 36
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: PUSH
12831: LD_INT 101
12833: PUSH
12834: LD_INT 102
12836: PUSH
12837: LD_INT 103
12839: PUSH
12840: LD_INT 104
12842: PUSH
12843: LD_INT 105
12845: PUSH
12846: LD_INT 106
12848: PUSH
12849: LD_INT 107
12851: PUSH
12852: LD_INT 108
12854: PUSH
12855: LD_INT 109
12857: PUSH
12858: LD_INT 110
12860: PUSH
12861: LD_INT 111
12863: PUSH
12864: LD_INT 112
12866: PUSH
12867: LD_INT 113
12869: PUSH
12870: LD_INT 114
12872: PUSH
12873: LD_INT 116
12875: PUSH
12876: LD_INT 117
12878: PUSH
12879: LD_INT 118
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: ST_TO_ADDR
12905: GO 13912
12907: LD_INT 15
12909: DOUBLE
12910: EQUAL
12911: IFTRUE 12915
12913: GO 13139
12915: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12916: LD_ADDR_VAR 0 2
12920: PUSH
12921: LD_INT 1
12923: PUSH
12924: LD_INT 2
12926: PUSH
12927: LD_INT 3
12929: PUSH
12930: LD_INT 4
12932: PUSH
12933: LD_INT 5
12935: PUSH
12936: LD_INT 6
12938: PUSH
12939: LD_INT 7
12941: PUSH
12942: LD_INT 8
12944: PUSH
12945: LD_INT 9
12947: PUSH
12948: LD_INT 10
12950: PUSH
12951: LD_INT 11
12953: PUSH
12954: LD_INT 12
12956: PUSH
12957: LD_INT 13
12959: PUSH
12960: LD_INT 14
12962: PUSH
12963: LD_INT 15
12965: PUSH
12966: LD_INT 16
12968: PUSH
12969: LD_INT 17
12971: PUSH
12972: LD_INT 18
12974: PUSH
12975: LD_INT 19
12977: PUSH
12978: LD_INT 20
12980: PUSH
12981: LD_INT 21
12983: PUSH
12984: LD_INT 22
12986: PUSH
12987: LD_INT 23
12989: PUSH
12990: LD_INT 24
12992: PUSH
12993: LD_INT 25
12995: PUSH
12996: LD_INT 26
12998: PUSH
12999: LD_INT 27
13001: PUSH
13002: LD_INT 28
13004: PUSH
13005: LD_INT 29
13007: PUSH
13008: LD_INT 30
13010: PUSH
13011: LD_INT 31
13013: PUSH
13014: LD_INT 32
13016: PUSH
13017: LD_INT 33
13019: PUSH
13020: LD_INT 34
13022: PUSH
13023: LD_INT 36
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: PUSH
13063: LD_INT 101
13065: PUSH
13066: LD_INT 102
13068: PUSH
13069: LD_INT 103
13071: PUSH
13072: LD_INT 104
13074: PUSH
13075: LD_INT 105
13077: PUSH
13078: LD_INT 106
13080: PUSH
13081: LD_INT 107
13083: PUSH
13084: LD_INT 108
13086: PUSH
13087: LD_INT 109
13089: PUSH
13090: LD_INT 110
13092: PUSH
13093: LD_INT 111
13095: PUSH
13096: LD_INT 112
13098: PUSH
13099: LD_INT 113
13101: PUSH
13102: LD_INT 114
13104: PUSH
13105: LD_INT 116
13107: PUSH
13108: LD_INT 117
13110: PUSH
13111: LD_INT 118
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: ST_TO_ADDR
13137: GO 13912
13139: LD_INT 16
13141: DOUBLE
13142: EQUAL
13143: IFTRUE 13147
13145: GO 13283
13147: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13148: LD_ADDR_VAR 0 2
13152: PUSH
13153: LD_INT 2
13155: PUSH
13156: LD_INT 4
13158: PUSH
13159: LD_INT 5
13161: PUSH
13162: LD_INT 7
13164: PUSH
13165: LD_INT 11
13167: PUSH
13168: LD_INT 12
13170: PUSH
13171: LD_INT 15
13173: PUSH
13174: LD_INT 16
13176: PUSH
13177: LD_INT 20
13179: PUSH
13180: LD_INT 21
13182: PUSH
13183: LD_INT 22
13185: PUSH
13186: LD_INT 23
13188: PUSH
13189: LD_INT 25
13191: PUSH
13192: LD_INT 26
13194: PUSH
13195: LD_INT 30
13197: PUSH
13198: LD_INT 31
13200: PUSH
13201: LD_INT 32
13203: PUSH
13204: LD_INT 33
13206: PUSH
13207: LD_INT 34
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 101
13233: PUSH
13234: LD_INT 102
13236: PUSH
13237: LD_INT 103
13239: PUSH
13240: LD_INT 106
13242: PUSH
13243: LD_INT 108
13245: PUSH
13246: LD_INT 112
13248: PUSH
13249: LD_INT 113
13251: PUSH
13252: LD_INT 114
13254: PUSH
13255: LD_INT 116
13257: PUSH
13258: LD_INT 117
13260: PUSH
13261: LD_INT 118
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: ST_TO_ADDR
13281: GO 13912
13283: LD_INT 17
13285: DOUBLE
13286: EQUAL
13287: IFTRUE 13291
13289: GO 13515
13291: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13292: LD_ADDR_VAR 0 2
13296: PUSH
13297: LD_INT 1
13299: PUSH
13300: LD_INT 2
13302: PUSH
13303: LD_INT 3
13305: PUSH
13306: LD_INT 4
13308: PUSH
13309: LD_INT 5
13311: PUSH
13312: LD_INT 6
13314: PUSH
13315: LD_INT 7
13317: PUSH
13318: LD_INT 8
13320: PUSH
13321: LD_INT 9
13323: PUSH
13324: LD_INT 10
13326: PUSH
13327: LD_INT 11
13329: PUSH
13330: LD_INT 12
13332: PUSH
13333: LD_INT 13
13335: PUSH
13336: LD_INT 14
13338: PUSH
13339: LD_INT 15
13341: PUSH
13342: LD_INT 16
13344: PUSH
13345: LD_INT 17
13347: PUSH
13348: LD_INT 18
13350: PUSH
13351: LD_INT 19
13353: PUSH
13354: LD_INT 20
13356: PUSH
13357: LD_INT 21
13359: PUSH
13360: LD_INT 22
13362: PUSH
13363: LD_INT 23
13365: PUSH
13366: LD_INT 24
13368: PUSH
13369: LD_INT 25
13371: PUSH
13372: LD_INT 26
13374: PUSH
13375: LD_INT 27
13377: PUSH
13378: LD_INT 28
13380: PUSH
13381: LD_INT 29
13383: PUSH
13384: LD_INT 30
13386: PUSH
13387: LD_INT 31
13389: PUSH
13390: LD_INT 32
13392: PUSH
13393: LD_INT 33
13395: PUSH
13396: LD_INT 34
13398: PUSH
13399: LD_INT 36
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: LIST
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: PUSH
13439: LD_INT 101
13441: PUSH
13442: LD_INT 102
13444: PUSH
13445: LD_INT 103
13447: PUSH
13448: LD_INT 104
13450: PUSH
13451: LD_INT 105
13453: PUSH
13454: LD_INT 106
13456: PUSH
13457: LD_INT 107
13459: PUSH
13460: LD_INT 108
13462: PUSH
13463: LD_INT 109
13465: PUSH
13466: LD_INT 110
13468: PUSH
13469: LD_INT 111
13471: PUSH
13472: LD_INT 112
13474: PUSH
13475: LD_INT 113
13477: PUSH
13478: LD_INT 114
13480: PUSH
13481: LD_INT 116
13483: PUSH
13484: LD_INT 117
13486: PUSH
13487: LD_INT 118
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: ST_TO_ADDR
13513: GO 13912
13515: LD_INT 18
13517: DOUBLE
13518: EQUAL
13519: IFTRUE 13523
13521: GO 13671
13523: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13524: LD_ADDR_VAR 0 2
13528: PUSH
13529: LD_INT 2
13531: PUSH
13532: LD_INT 4
13534: PUSH
13535: LD_INT 5
13537: PUSH
13538: LD_INT 7
13540: PUSH
13541: LD_INT 11
13543: PUSH
13544: LD_INT 12
13546: PUSH
13547: LD_INT 15
13549: PUSH
13550: LD_INT 16
13552: PUSH
13553: LD_INT 20
13555: PUSH
13556: LD_INT 21
13558: PUSH
13559: LD_INT 22
13561: PUSH
13562: LD_INT 23
13564: PUSH
13565: LD_INT 25
13567: PUSH
13568: LD_INT 26
13570: PUSH
13571: LD_INT 30
13573: PUSH
13574: LD_INT 31
13576: PUSH
13577: LD_INT 32
13579: PUSH
13580: LD_INT 33
13582: PUSH
13583: LD_INT 34
13585: PUSH
13586: LD_INT 35
13588: PUSH
13589: LD_INT 36
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: LIST
13612: LIST
13613: LIST
13614: PUSH
13615: LD_INT 101
13617: PUSH
13618: LD_INT 102
13620: PUSH
13621: LD_INT 103
13623: PUSH
13624: LD_INT 106
13626: PUSH
13627: LD_INT 108
13629: PUSH
13630: LD_INT 112
13632: PUSH
13633: LD_INT 113
13635: PUSH
13636: LD_INT 114
13638: PUSH
13639: LD_INT 115
13641: PUSH
13642: LD_INT 116
13644: PUSH
13645: LD_INT 117
13647: PUSH
13648: LD_INT 118
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: ST_TO_ADDR
13669: GO 13912
13671: LD_INT 19
13673: DOUBLE
13674: EQUAL
13675: IFTRUE 13679
13677: GO 13911
13679: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13680: LD_ADDR_VAR 0 2
13684: PUSH
13685: LD_INT 1
13687: PUSH
13688: LD_INT 2
13690: PUSH
13691: LD_INT 3
13693: PUSH
13694: LD_INT 4
13696: PUSH
13697: LD_INT 5
13699: PUSH
13700: LD_INT 6
13702: PUSH
13703: LD_INT 7
13705: PUSH
13706: LD_INT 8
13708: PUSH
13709: LD_INT 9
13711: PUSH
13712: LD_INT 10
13714: PUSH
13715: LD_INT 11
13717: PUSH
13718: LD_INT 12
13720: PUSH
13721: LD_INT 13
13723: PUSH
13724: LD_INT 14
13726: PUSH
13727: LD_INT 15
13729: PUSH
13730: LD_INT 16
13732: PUSH
13733: LD_INT 17
13735: PUSH
13736: LD_INT 18
13738: PUSH
13739: LD_INT 19
13741: PUSH
13742: LD_INT 20
13744: PUSH
13745: LD_INT 21
13747: PUSH
13748: LD_INT 22
13750: PUSH
13751: LD_INT 23
13753: PUSH
13754: LD_INT 24
13756: PUSH
13757: LD_INT 25
13759: PUSH
13760: LD_INT 26
13762: PUSH
13763: LD_INT 27
13765: PUSH
13766: LD_INT 28
13768: PUSH
13769: LD_INT 29
13771: PUSH
13772: LD_INT 30
13774: PUSH
13775: LD_INT 31
13777: PUSH
13778: LD_INT 32
13780: PUSH
13781: LD_INT 33
13783: PUSH
13784: LD_INT 34
13786: PUSH
13787: LD_INT 35
13789: PUSH
13790: LD_INT 36
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: PUSH
13831: LD_INT 101
13833: PUSH
13834: LD_INT 102
13836: PUSH
13837: LD_INT 103
13839: PUSH
13840: LD_INT 104
13842: PUSH
13843: LD_INT 105
13845: PUSH
13846: LD_INT 106
13848: PUSH
13849: LD_INT 107
13851: PUSH
13852: LD_INT 108
13854: PUSH
13855: LD_INT 109
13857: PUSH
13858: LD_INT 110
13860: PUSH
13861: LD_INT 111
13863: PUSH
13864: LD_INT 112
13866: PUSH
13867: LD_INT 113
13869: PUSH
13870: LD_INT 114
13872: PUSH
13873: LD_INT 115
13875: PUSH
13876: LD_INT 116
13878: PUSH
13879: LD_INT 117
13881: PUSH
13882: LD_INT 118
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: ST_TO_ADDR
13909: GO 13912
13911: POP
// end else
13912: GO 14143
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13914: LD_ADDR_VAR 0 2
13918: PUSH
13919: LD_INT 1
13921: PUSH
13922: LD_INT 2
13924: PUSH
13925: LD_INT 3
13927: PUSH
13928: LD_INT 4
13930: PUSH
13931: LD_INT 5
13933: PUSH
13934: LD_INT 6
13936: PUSH
13937: LD_INT 7
13939: PUSH
13940: LD_INT 8
13942: PUSH
13943: LD_INT 9
13945: PUSH
13946: LD_INT 10
13948: PUSH
13949: LD_INT 11
13951: PUSH
13952: LD_INT 12
13954: PUSH
13955: LD_INT 13
13957: PUSH
13958: LD_INT 14
13960: PUSH
13961: LD_INT 15
13963: PUSH
13964: LD_INT 16
13966: PUSH
13967: LD_INT 17
13969: PUSH
13970: LD_INT 18
13972: PUSH
13973: LD_INT 19
13975: PUSH
13976: LD_INT 20
13978: PUSH
13979: LD_INT 21
13981: PUSH
13982: LD_INT 22
13984: PUSH
13985: LD_INT 23
13987: PUSH
13988: LD_INT 24
13990: PUSH
13991: LD_INT 25
13993: PUSH
13994: LD_INT 26
13996: PUSH
13997: LD_INT 27
13999: PUSH
14000: LD_INT 28
14002: PUSH
14003: LD_INT 29
14005: PUSH
14006: LD_INT 30
14008: PUSH
14009: LD_INT 31
14011: PUSH
14012: LD_INT 32
14014: PUSH
14015: LD_INT 33
14017: PUSH
14018: LD_INT 34
14020: PUSH
14021: LD_INT 35
14023: PUSH
14024: LD_INT 36
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: PUSH
14065: LD_INT 101
14067: PUSH
14068: LD_INT 102
14070: PUSH
14071: LD_INT 103
14073: PUSH
14074: LD_INT 104
14076: PUSH
14077: LD_INT 105
14079: PUSH
14080: LD_INT 106
14082: PUSH
14083: LD_INT 107
14085: PUSH
14086: LD_INT 108
14088: PUSH
14089: LD_INT 109
14091: PUSH
14092: LD_INT 110
14094: PUSH
14095: LD_INT 111
14097: PUSH
14098: LD_INT 112
14100: PUSH
14101: LD_INT 113
14103: PUSH
14104: LD_INT 114
14106: PUSH
14107: LD_INT 115
14109: PUSH
14110: LD_INT 116
14112: PUSH
14113: LD_INT 117
14115: PUSH
14116: LD_INT 118
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: ST_TO_ADDR
// if result then
14143: LD_VAR 0 2
14147: IFFALSE 14933
// begin normal :=  ;
14149: LD_ADDR_VAR 0 5
14153: PUSH
14154: LD_STRING 
14156: ST_TO_ADDR
// hardcore :=  ;
14157: LD_ADDR_VAR 0 6
14161: PUSH
14162: LD_STRING 
14164: ST_TO_ADDR
// active :=  ;
14165: LD_ADDR_VAR 0 7
14169: PUSH
14170: LD_STRING 
14172: ST_TO_ADDR
// for i = 1 to normalCounter do
14173: LD_ADDR_VAR 0 8
14177: PUSH
14178: DOUBLE
14179: LD_INT 1
14181: DEC
14182: ST_TO_ADDR
14183: LD_EXP 33
14187: PUSH
14188: FOR_TO
14189: IFFALSE 14290
// begin tmp := 0 ;
14191: LD_ADDR_VAR 0 3
14195: PUSH
14196: LD_STRING 0
14198: ST_TO_ADDR
// if result [ 1 ] then
14199: LD_VAR 0 2
14203: PUSH
14204: LD_INT 1
14206: ARRAY
14207: IFFALSE 14272
// if result [ 1 ] [ 1 ] = i then
14209: LD_VAR 0 2
14213: PUSH
14214: LD_INT 1
14216: ARRAY
14217: PUSH
14218: LD_INT 1
14220: ARRAY
14221: PUSH
14222: LD_VAR 0 8
14226: EQUAL
14227: IFFALSE 14272
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14229: LD_ADDR_VAR 0 2
14233: PUSH
14234: LD_VAR 0 2
14238: PPUSH
14239: LD_INT 1
14241: PPUSH
14242: LD_VAR 0 2
14246: PUSH
14247: LD_INT 1
14249: ARRAY
14250: PPUSH
14251: LD_INT 1
14253: PPUSH
14254: CALL_OW 3
14258: PPUSH
14259: CALL_OW 1
14263: ST_TO_ADDR
// tmp := 1 ;
14264: LD_ADDR_VAR 0 3
14268: PUSH
14269: LD_STRING 1
14271: ST_TO_ADDR
// end ; normal := normal & tmp ;
14272: LD_ADDR_VAR 0 5
14276: PUSH
14277: LD_VAR 0 5
14281: PUSH
14282: LD_VAR 0 3
14286: STR
14287: ST_TO_ADDR
// end ;
14288: GO 14188
14290: POP
14291: POP
// for i = 1 to hardcoreCounter do
14292: LD_ADDR_VAR 0 8
14296: PUSH
14297: DOUBLE
14298: LD_INT 1
14300: DEC
14301: ST_TO_ADDR
14302: LD_EXP 34
14306: PUSH
14307: FOR_TO
14308: IFFALSE 14413
// begin tmp := 0 ;
14310: LD_ADDR_VAR 0 3
14314: PUSH
14315: LD_STRING 0
14317: ST_TO_ADDR
// if result [ 2 ] then
14318: LD_VAR 0 2
14322: PUSH
14323: LD_INT 2
14325: ARRAY
14326: IFFALSE 14395
// if result [ 2 ] [ 1 ] = 100 + i then
14328: LD_VAR 0 2
14332: PUSH
14333: LD_INT 2
14335: ARRAY
14336: PUSH
14337: LD_INT 1
14339: ARRAY
14340: PUSH
14341: LD_INT 100
14343: PUSH
14344: LD_VAR 0 8
14348: PLUS
14349: EQUAL
14350: IFFALSE 14395
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14352: LD_ADDR_VAR 0 2
14356: PUSH
14357: LD_VAR 0 2
14361: PPUSH
14362: LD_INT 2
14364: PPUSH
14365: LD_VAR 0 2
14369: PUSH
14370: LD_INT 2
14372: ARRAY
14373: PPUSH
14374: LD_INT 1
14376: PPUSH
14377: CALL_OW 3
14381: PPUSH
14382: CALL_OW 1
14386: ST_TO_ADDR
// tmp := 1 ;
14387: LD_ADDR_VAR 0 3
14391: PUSH
14392: LD_STRING 1
14394: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14395: LD_ADDR_VAR 0 6
14399: PUSH
14400: LD_VAR 0 6
14404: PUSH
14405: LD_VAR 0 3
14409: STR
14410: ST_TO_ADDR
// end ;
14411: GO 14307
14413: POP
14414: POP
// if isGameLoad then
14415: LD_VAR 0 1
14419: IFFALSE 14894
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14421: LD_ADDR_VAR 0 4
14425: PUSH
14426: LD_EXP 37
14430: PUSH
14431: LD_EXP 36
14435: PUSH
14436: LD_EXP 38
14440: PUSH
14441: LD_EXP 35
14445: PUSH
14446: LD_EXP 39
14450: PUSH
14451: LD_EXP 40
14455: PUSH
14456: LD_EXP 41
14460: PUSH
14461: LD_EXP 42
14465: PUSH
14466: LD_EXP 43
14470: PUSH
14471: LD_EXP 44
14475: PUSH
14476: LD_EXP 45
14480: PUSH
14481: LD_EXP 46
14485: PUSH
14486: LD_EXP 47
14490: PUSH
14491: LD_EXP 48
14495: PUSH
14496: LD_EXP 56
14500: PUSH
14501: LD_EXP 57
14505: PUSH
14506: LD_EXP 58
14510: PUSH
14511: LD_EXP 59
14515: PUSH
14516: LD_EXP 61
14520: PUSH
14521: LD_EXP 62
14525: PUSH
14526: LD_EXP 63
14530: PUSH
14531: LD_EXP 66
14535: PUSH
14536: LD_EXP 68
14540: PUSH
14541: LD_EXP 69
14545: PUSH
14546: LD_EXP 70
14550: PUSH
14551: LD_EXP 72
14555: PUSH
14556: LD_EXP 73
14560: PUSH
14561: LD_EXP 76
14565: PUSH
14566: LD_EXP 77
14570: PUSH
14571: LD_EXP 78
14575: PUSH
14576: LD_EXP 79
14580: PUSH
14581: LD_EXP 80
14585: PUSH
14586: LD_EXP 81
14590: PUSH
14591: LD_EXP 82
14595: PUSH
14596: LD_EXP 83
14600: PUSH
14601: LD_EXP 84
14605: PUSH
14606: LD_EXP 49
14610: PUSH
14611: LD_EXP 50
14615: PUSH
14616: LD_EXP 53
14620: PUSH
14621: LD_EXP 54
14625: PUSH
14626: LD_EXP 55
14630: PUSH
14631: LD_EXP 51
14635: PUSH
14636: LD_EXP 52
14640: PUSH
14641: LD_EXP 60
14645: PUSH
14646: LD_EXP 64
14650: PUSH
14651: LD_EXP 65
14655: PUSH
14656: LD_EXP 67
14660: PUSH
14661: LD_EXP 71
14665: PUSH
14666: LD_EXP 74
14670: PUSH
14671: LD_EXP 75
14675: PUSH
14676: LD_EXP 85
14680: PUSH
14681: LD_EXP 86
14685: PUSH
14686: LD_EXP 87
14690: PUSH
14691: LD_EXP 88
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: ST_TO_ADDR
// tmp :=  ;
14752: LD_ADDR_VAR 0 3
14756: PUSH
14757: LD_STRING 
14759: ST_TO_ADDR
// for i = 1 to normalCounter do
14760: LD_ADDR_VAR 0 8
14764: PUSH
14765: DOUBLE
14766: LD_INT 1
14768: DEC
14769: ST_TO_ADDR
14770: LD_EXP 33
14774: PUSH
14775: FOR_TO
14776: IFFALSE 14812
// begin if flags [ i ] then
14778: LD_VAR 0 4
14782: PUSH
14783: LD_VAR 0 8
14787: ARRAY
14788: IFFALSE 14810
// tmp := tmp & i & ; ;
14790: LD_ADDR_VAR 0 3
14794: PUSH
14795: LD_VAR 0 3
14799: PUSH
14800: LD_VAR 0 8
14804: STR
14805: PUSH
14806: LD_STRING ;
14808: STR
14809: ST_TO_ADDR
// end ;
14810: GO 14775
14812: POP
14813: POP
// for i = 1 to hardcoreCounter do
14814: LD_ADDR_VAR 0 8
14818: PUSH
14819: DOUBLE
14820: LD_INT 1
14822: DEC
14823: ST_TO_ADDR
14824: LD_EXP 34
14828: PUSH
14829: FOR_TO
14830: IFFALSE 14876
// begin if flags [ normalCounter + i ] then
14832: LD_VAR 0 4
14836: PUSH
14837: LD_EXP 33
14841: PUSH
14842: LD_VAR 0 8
14846: PLUS
14847: ARRAY
14848: IFFALSE 14874
// tmp := tmp & ( 100 + i ) & ; ;
14850: LD_ADDR_VAR 0 3
14854: PUSH
14855: LD_VAR 0 3
14859: PUSH
14860: LD_INT 100
14862: PUSH
14863: LD_VAR 0 8
14867: PLUS
14868: STR
14869: PUSH
14870: LD_STRING ;
14872: STR
14873: ST_TO_ADDR
// end ;
14874: GO 14829
14876: POP
14877: POP
// if tmp then
14878: LD_VAR 0 3
14882: IFFALSE 14894
// active := tmp ;
14884: LD_ADDR_VAR 0 7
14888: PUSH
14889: LD_VAR 0 3
14893: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14894: LD_STRING getStreamItemsFromMission("
14896: PUSH
14897: LD_VAR 0 5
14901: STR
14902: PUSH
14903: LD_STRING ","
14905: STR
14906: PUSH
14907: LD_VAR 0 6
14911: STR
14912: PUSH
14913: LD_STRING ","
14915: STR
14916: PUSH
14917: LD_VAR 0 7
14921: STR
14922: PUSH
14923: LD_STRING ")
14925: STR
14926: PPUSH
14927: CALL_OW 559
// end else
14931: GO 14940
// ToLua ( getStreamItemsFromMission("","","") ) ;
14933: LD_STRING getStreamItemsFromMission("","","")
14935: PPUSH
14936: CALL_OW 559
// end ;
14940: LD_VAR 0 2
14944: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14945: LD_EXP 32
14949: PUSH
14950: LD_EXP 37
14954: AND
14955: IFFALSE 15079
14957: GO 14959
14959: DISABLE
14960: LD_INT 0
14962: PPUSH
14963: PPUSH
// begin enable ;
14964: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14965: LD_ADDR_VAR 0 2
14969: PUSH
14970: LD_INT 22
14972: PUSH
14973: LD_OWVAR 2
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: LD_INT 2
14984: PUSH
14985: LD_INT 34
14987: PUSH
14988: LD_INT 7
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT 34
14997: PUSH
14998: LD_INT 45
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: LD_INT 34
15007: PUSH
15008: LD_INT 28
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: PUSH
15015: LD_INT 34
15017: PUSH
15018: LD_INT 47
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PPUSH
15036: CALL_OW 69
15040: ST_TO_ADDR
// if not tmp then
15041: LD_VAR 0 2
15045: NOT
15046: IFFALSE 15050
// exit ;
15048: GO 15079
// for i in tmp do
15050: LD_ADDR_VAR 0 1
15054: PUSH
15055: LD_VAR 0 2
15059: PUSH
15060: FOR_IN
15061: IFFALSE 15077
// begin SetLives ( i , 0 ) ;
15063: LD_VAR 0 1
15067: PPUSH
15068: LD_INT 0
15070: PPUSH
15071: CALL_OW 234
// end ;
15075: GO 15060
15077: POP
15078: POP
// end ;
15079: PPOPN 2
15081: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
15082: LD_EXP 32
15086: PUSH
15087: LD_EXP 38
15091: AND
15092: IFFALSE 15176
15094: GO 15096
15096: DISABLE
15097: LD_INT 0
15099: PPUSH
15100: PPUSH
// begin enable ;
15101: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
15102: LD_ADDR_VAR 0 2
15106: PUSH
15107: LD_INT 22
15109: PUSH
15110: LD_OWVAR 2
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PUSH
15119: LD_INT 32
15121: PUSH
15122: LD_INT 3
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PPUSH
15133: CALL_OW 69
15137: ST_TO_ADDR
// if not tmp then
15138: LD_VAR 0 2
15142: NOT
15143: IFFALSE 15147
// exit ;
15145: GO 15176
// for i in tmp do
15147: LD_ADDR_VAR 0 1
15151: PUSH
15152: LD_VAR 0 2
15156: PUSH
15157: FOR_IN
15158: IFFALSE 15174
// begin SetLives ( i , 0 ) ;
15160: LD_VAR 0 1
15164: PPUSH
15165: LD_INT 0
15167: PPUSH
15168: CALL_OW 234
// end ;
15172: GO 15157
15174: POP
15175: POP
// end ;
15176: PPOPN 2
15178: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15179: LD_EXP 32
15183: PUSH
15184: LD_EXP 35
15188: AND
15189: IFFALSE 15282
15191: GO 15193
15193: DISABLE
15194: LD_INT 0
15196: PPUSH
// begin enable ;
15197: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15198: LD_ADDR_VAR 0 1
15202: PUSH
15203: LD_INT 22
15205: PUSH
15206: LD_OWVAR 2
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: LD_INT 2
15217: PUSH
15218: LD_INT 25
15220: PUSH
15221: LD_INT 5
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PUSH
15228: LD_INT 25
15230: PUSH
15231: LD_INT 9
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PUSH
15238: LD_INT 25
15240: PUSH
15241: LD_INT 8
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: PPUSH
15258: CALL_OW 69
15262: PUSH
15263: FOR_IN
15264: IFFALSE 15280
// begin SetClass ( i , 1 ) ;
15266: LD_VAR 0 1
15270: PPUSH
15271: LD_INT 1
15273: PPUSH
15274: CALL_OW 336
// end ;
15278: GO 15263
15280: POP
15281: POP
// end ;
15282: PPOPN 1
15284: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15285: LD_EXP 32
15289: PUSH
15290: LD_EXP 36
15294: AND
15295: PUSH
15296: LD_OWVAR 65
15300: PUSH
15301: LD_INT 7
15303: LESS
15304: AND
15305: IFFALSE 15319
15307: GO 15309
15309: DISABLE
// begin enable ;
15310: ENABLE
// game_speed := 7 ;
15311: LD_ADDR_OWVAR 65
15315: PUSH
15316: LD_INT 7
15318: ST_TO_ADDR
// end ;
15319: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15320: LD_EXP 32
15324: PUSH
15325: LD_EXP 39
15329: AND
15330: IFFALSE 15532
15332: GO 15334
15334: DISABLE
15335: LD_INT 0
15337: PPUSH
15338: PPUSH
15339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15340: LD_ADDR_VAR 0 3
15344: PUSH
15345: LD_INT 81
15347: PUSH
15348: LD_OWVAR 2
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: LD_INT 21
15359: PUSH
15360: LD_INT 1
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PPUSH
15371: CALL_OW 69
15375: ST_TO_ADDR
// if not tmp then
15376: LD_VAR 0 3
15380: NOT
15381: IFFALSE 15385
// exit ;
15383: GO 15532
// if tmp > 5 then
15385: LD_VAR 0 3
15389: PUSH
15390: LD_INT 5
15392: GREATER
15393: IFFALSE 15405
// k := 5 else
15395: LD_ADDR_VAR 0 2
15399: PUSH
15400: LD_INT 5
15402: ST_TO_ADDR
15403: GO 15415
// k := tmp ;
15405: LD_ADDR_VAR 0 2
15409: PUSH
15410: LD_VAR 0 3
15414: ST_TO_ADDR
// for i := 1 to k do
15415: LD_ADDR_VAR 0 1
15419: PUSH
15420: DOUBLE
15421: LD_INT 1
15423: DEC
15424: ST_TO_ADDR
15425: LD_VAR 0 2
15429: PUSH
15430: FOR_TO
15431: IFFALSE 15530
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15433: LD_VAR 0 3
15437: PUSH
15438: LD_VAR 0 1
15442: ARRAY
15443: PPUSH
15444: LD_VAR 0 1
15448: PUSH
15449: LD_INT 4
15451: MOD
15452: PUSH
15453: LD_INT 1
15455: PLUS
15456: PPUSH
15457: CALL_OW 259
15461: PUSH
15462: LD_INT 10
15464: LESS
15465: IFFALSE 15528
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15467: LD_VAR 0 3
15471: PUSH
15472: LD_VAR 0 1
15476: ARRAY
15477: PPUSH
15478: LD_VAR 0 1
15482: PUSH
15483: LD_INT 4
15485: MOD
15486: PUSH
15487: LD_INT 1
15489: PLUS
15490: PPUSH
15491: LD_VAR 0 3
15495: PUSH
15496: LD_VAR 0 1
15500: ARRAY
15501: PPUSH
15502: LD_VAR 0 1
15506: PUSH
15507: LD_INT 4
15509: MOD
15510: PUSH
15511: LD_INT 1
15513: PLUS
15514: PPUSH
15515: CALL_OW 259
15519: PUSH
15520: LD_INT 1
15522: PLUS
15523: PPUSH
15524: CALL_OW 237
15528: GO 15430
15530: POP
15531: POP
// end ;
15532: PPOPN 3
15534: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15535: LD_EXP 32
15539: PUSH
15540: LD_EXP 40
15544: AND
15545: IFFALSE 15565
15547: GO 15549
15549: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15550: LD_INT 4
15552: PPUSH
15553: LD_OWVAR 2
15557: PPUSH
15558: LD_INT 0
15560: PPUSH
15561: CALL_OW 324
15565: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15566: LD_EXP 32
15570: PUSH
15571: LD_EXP 69
15575: AND
15576: IFFALSE 15596
15578: GO 15580
15580: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15581: LD_INT 19
15583: PPUSH
15584: LD_OWVAR 2
15588: PPUSH
15589: LD_INT 0
15591: PPUSH
15592: CALL_OW 324
15596: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15597: LD_EXP 32
15601: PUSH
15602: LD_EXP 41
15606: AND
15607: IFFALSE 15709
15609: GO 15611
15611: DISABLE
15612: LD_INT 0
15614: PPUSH
15615: PPUSH
// begin enable ;
15616: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15617: LD_ADDR_VAR 0 2
15621: PUSH
15622: LD_INT 22
15624: PUSH
15625: LD_OWVAR 2
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: LD_INT 2
15636: PUSH
15637: LD_INT 34
15639: PUSH
15640: LD_INT 11
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 34
15649: PUSH
15650: LD_INT 30
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: LIST
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PPUSH
15666: CALL_OW 69
15670: ST_TO_ADDR
// if not tmp then
15671: LD_VAR 0 2
15675: NOT
15676: IFFALSE 15680
// exit ;
15678: GO 15709
// for i in tmp do
15680: LD_ADDR_VAR 0 1
15684: PUSH
15685: LD_VAR 0 2
15689: PUSH
15690: FOR_IN
15691: IFFALSE 15707
// begin SetLives ( i , 0 ) ;
15693: LD_VAR 0 1
15697: PPUSH
15698: LD_INT 0
15700: PPUSH
15701: CALL_OW 234
// end ;
15705: GO 15690
15707: POP
15708: POP
// end ;
15709: PPOPN 2
15711: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15712: LD_EXP 32
15716: PUSH
15717: LD_EXP 42
15721: AND
15722: IFFALSE 15742
15724: GO 15726
15726: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15727: LD_INT 32
15729: PPUSH
15730: LD_OWVAR 2
15734: PPUSH
15735: LD_INT 0
15737: PPUSH
15738: CALL_OW 324
15742: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15743: LD_EXP 32
15747: PUSH
15748: LD_EXP 43
15752: AND
15753: IFFALSE 15934
15755: GO 15757
15757: DISABLE
15758: LD_INT 0
15760: PPUSH
15761: PPUSH
15762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15763: LD_ADDR_VAR 0 2
15767: PUSH
15768: LD_INT 22
15770: PUSH
15771: LD_OWVAR 2
15775: PUSH
15776: EMPTY
15777: LIST
15778: LIST
15779: PUSH
15780: LD_INT 33
15782: PUSH
15783: LD_INT 3
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: PPUSH
15794: CALL_OW 69
15798: ST_TO_ADDR
// if not tmp then
15799: LD_VAR 0 2
15803: NOT
15804: IFFALSE 15808
// exit ;
15806: GO 15934
// side := 0 ;
15808: LD_ADDR_VAR 0 3
15812: PUSH
15813: LD_INT 0
15815: ST_TO_ADDR
// for i := 1 to 8 do
15816: LD_ADDR_VAR 0 1
15820: PUSH
15821: DOUBLE
15822: LD_INT 1
15824: DEC
15825: ST_TO_ADDR
15826: LD_INT 8
15828: PUSH
15829: FOR_TO
15830: IFFALSE 15878
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15832: LD_OWVAR 2
15836: PUSH
15837: LD_VAR 0 1
15841: NONEQUAL
15842: PUSH
15843: LD_OWVAR 2
15847: PPUSH
15848: LD_VAR 0 1
15852: PPUSH
15853: CALL_OW 81
15857: PUSH
15858: LD_INT 2
15860: EQUAL
15861: AND
15862: IFFALSE 15876
// begin side := i ;
15864: LD_ADDR_VAR 0 3
15868: PUSH
15869: LD_VAR 0 1
15873: ST_TO_ADDR
// break ;
15874: GO 15878
// end ;
15876: GO 15829
15878: POP
15879: POP
// if not side then
15880: LD_VAR 0 3
15884: NOT
15885: IFFALSE 15889
// exit ;
15887: GO 15934
// for i := 1 to tmp do
15889: LD_ADDR_VAR 0 1
15893: PUSH
15894: DOUBLE
15895: LD_INT 1
15897: DEC
15898: ST_TO_ADDR
15899: LD_VAR 0 2
15903: PUSH
15904: FOR_TO
15905: IFFALSE 15932
// if Prob ( 60 ) then
15907: LD_INT 60
15909: PPUSH
15910: CALL_OW 13
15914: IFFALSE 15930
// SetSide ( i , side ) ;
15916: LD_VAR 0 1
15920: PPUSH
15921: LD_VAR 0 3
15925: PPUSH
15926: CALL_OW 235
15930: GO 15904
15932: POP
15933: POP
// end ;
15934: PPOPN 3
15936: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15937: LD_EXP 32
15941: PUSH
15942: LD_EXP 45
15946: AND
15947: IFFALSE 16066
15949: GO 15951
15951: DISABLE
15952: LD_INT 0
15954: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15955: LD_ADDR_VAR 0 1
15959: PUSH
15960: LD_INT 22
15962: PUSH
15963: LD_OWVAR 2
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 21
15974: PUSH
15975: LD_INT 1
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: LD_INT 3
15984: PUSH
15985: LD_INT 23
15987: PUSH
15988: LD_INT 0
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: LIST
16003: PPUSH
16004: CALL_OW 69
16008: PUSH
16009: FOR_IN
16010: IFFALSE 16064
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
16012: LD_VAR 0 1
16016: PPUSH
16017: CALL_OW 257
16021: PUSH
16022: LD_INT 1
16024: PUSH
16025: LD_INT 2
16027: PUSH
16028: LD_INT 3
16030: PUSH
16031: LD_INT 4
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: IN
16040: IFFALSE 16062
// SetClass ( un , rand ( 1 , 4 ) ) ;
16042: LD_VAR 0 1
16046: PPUSH
16047: LD_INT 1
16049: PPUSH
16050: LD_INT 4
16052: PPUSH
16053: CALL_OW 12
16057: PPUSH
16058: CALL_OW 336
16062: GO 16009
16064: POP
16065: POP
// end ;
16066: PPOPN 1
16068: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
16069: LD_EXP 32
16073: PUSH
16074: LD_EXP 44
16078: AND
16079: IFFALSE 16158
16081: GO 16083
16083: DISABLE
16084: LD_INT 0
16086: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16087: LD_ADDR_VAR 0 1
16091: PUSH
16092: LD_INT 22
16094: PUSH
16095: LD_OWVAR 2
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PUSH
16104: LD_INT 21
16106: PUSH
16107: LD_INT 3
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PPUSH
16118: CALL_OW 69
16122: ST_TO_ADDR
// if not tmp then
16123: LD_VAR 0 1
16127: NOT
16128: IFFALSE 16132
// exit ;
16130: GO 16158
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
16132: LD_VAR 0 1
16136: PUSH
16137: LD_INT 1
16139: PPUSH
16140: LD_VAR 0 1
16144: PPUSH
16145: CALL_OW 12
16149: ARRAY
16150: PPUSH
16151: LD_INT 100
16153: PPUSH
16154: CALL_OW 234
// end ;
16158: PPOPN 1
16160: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16161: LD_EXP 32
16165: PUSH
16166: LD_EXP 46
16170: AND
16171: IFFALSE 16269
16173: GO 16175
16175: DISABLE
16176: LD_INT 0
16178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16179: LD_ADDR_VAR 0 1
16183: PUSH
16184: LD_INT 22
16186: PUSH
16187: LD_OWVAR 2
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: PUSH
16196: LD_INT 21
16198: PUSH
16199: LD_INT 1
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PPUSH
16210: CALL_OW 69
16214: ST_TO_ADDR
// if not tmp then
16215: LD_VAR 0 1
16219: NOT
16220: IFFALSE 16224
// exit ;
16222: GO 16269
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16224: LD_VAR 0 1
16228: PUSH
16229: LD_INT 1
16231: PPUSH
16232: LD_VAR 0 1
16236: PPUSH
16237: CALL_OW 12
16241: ARRAY
16242: PPUSH
16243: LD_INT 1
16245: PPUSH
16246: LD_INT 4
16248: PPUSH
16249: CALL_OW 12
16253: PPUSH
16254: LD_INT 3000
16256: PPUSH
16257: LD_INT 9000
16259: PPUSH
16260: CALL_OW 12
16264: PPUSH
16265: CALL_OW 492
// end ;
16269: PPOPN 1
16271: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16272: LD_EXP 32
16276: PUSH
16277: LD_EXP 47
16281: AND
16282: IFFALSE 16302
16284: GO 16286
16286: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16287: LD_INT 1
16289: PPUSH
16290: LD_OWVAR 2
16294: PPUSH
16295: LD_INT 0
16297: PPUSH
16298: CALL_OW 324
16302: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16303: LD_EXP 32
16307: PUSH
16308: LD_EXP 48
16312: AND
16313: IFFALSE 16396
16315: GO 16317
16317: DISABLE
16318: LD_INT 0
16320: PPUSH
16321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16322: LD_ADDR_VAR 0 2
16326: PUSH
16327: LD_INT 22
16329: PUSH
16330: LD_OWVAR 2
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 21
16341: PUSH
16342: LD_INT 3
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PPUSH
16353: CALL_OW 69
16357: ST_TO_ADDR
// if not tmp then
16358: LD_VAR 0 2
16362: NOT
16363: IFFALSE 16367
// exit ;
16365: GO 16396
// for i in tmp do
16367: LD_ADDR_VAR 0 1
16371: PUSH
16372: LD_VAR 0 2
16376: PUSH
16377: FOR_IN
16378: IFFALSE 16394
// SetBLevel ( i , 10 ) ;
16380: LD_VAR 0 1
16384: PPUSH
16385: LD_INT 10
16387: PPUSH
16388: CALL_OW 241
16392: GO 16377
16394: POP
16395: POP
// end ;
16396: PPOPN 2
16398: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16399: LD_EXP 32
16403: PUSH
16404: LD_EXP 49
16408: AND
16409: IFFALSE 16520
16411: GO 16413
16413: DISABLE
16414: LD_INT 0
16416: PPUSH
16417: PPUSH
16418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16419: LD_ADDR_VAR 0 3
16423: PUSH
16424: LD_INT 22
16426: PUSH
16427: LD_OWVAR 2
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 25
16438: PUSH
16439: LD_INT 1
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PPUSH
16450: CALL_OW 69
16454: ST_TO_ADDR
// if not tmp then
16455: LD_VAR 0 3
16459: NOT
16460: IFFALSE 16464
// exit ;
16462: GO 16520
// un := tmp [ rand ( 1 , tmp ) ] ;
16464: LD_ADDR_VAR 0 2
16468: PUSH
16469: LD_VAR 0 3
16473: PUSH
16474: LD_INT 1
16476: PPUSH
16477: LD_VAR 0 3
16481: PPUSH
16482: CALL_OW 12
16486: ARRAY
16487: ST_TO_ADDR
// if Crawls ( un ) then
16488: LD_VAR 0 2
16492: PPUSH
16493: CALL_OW 318
16497: IFFALSE 16508
// ComWalk ( un ) ;
16499: LD_VAR 0 2
16503: PPUSH
16504: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16508: LD_VAR 0 2
16512: PPUSH
16513: LD_INT 5
16515: PPUSH
16516: CALL_OW 336
// end ;
16520: PPOPN 3
16522: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16523: LD_EXP 32
16527: PUSH
16528: LD_EXP 50
16532: AND
16533: PUSH
16534: LD_OWVAR 67
16538: PUSH
16539: LD_INT 4
16541: LESS
16542: AND
16543: IFFALSE 16562
16545: GO 16547
16547: DISABLE
// begin Difficulty := Difficulty + 1 ;
16548: LD_ADDR_OWVAR 67
16552: PUSH
16553: LD_OWVAR 67
16557: PUSH
16558: LD_INT 1
16560: PLUS
16561: ST_TO_ADDR
// end ;
16562: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16563: LD_EXP 32
16567: PUSH
16568: LD_EXP 51
16572: AND
16573: IFFALSE 16676
16575: GO 16577
16577: DISABLE
16578: LD_INT 0
16580: PPUSH
// begin for i := 1 to 5 do
16581: LD_ADDR_VAR 0 1
16585: PUSH
16586: DOUBLE
16587: LD_INT 1
16589: DEC
16590: ST_TO_ADDR
16591: LD_INT 5
16593: PUSH
16594: FOR_TO
16595: IFFALSE 16674
// begin uc_nation := nation_nature ;
16597: LD_ADDR_OWVAR 21
16601: PUSH
16602: LD_INT 0
16604: ST_TO_ADDR
// uc_side := 0 ;
16605: LD_ADDR_OWVAR 20
16609: PUSH
16610: LD_INT 0
16612: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16613: LD_ADDR_OWVAR 29
16617: PUSH
16618: LD_INT 12
16620: PUSH
16621: LD_INT 12
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: ST_TO_ADDR
// hc_agressivity := 20 ;
16628: LD_ADDR_OWVAR 35
16632: PUSH
16633: LD_INT 20
16635: ST_TO_ADDR
// hc_class := class_tiger ;
16636: LD_ADDR_OWVAR 28
16640: PUSH
16641: LD_INT 14
16643: ST_TO_ADDR
// hc_gallery :=  ;
16644: LD_ADDR_OWVAR 33
16648: PUSH
16649: LD_STRING 
16651: ST_TO_ADDR
// hc_name :=  ;
16652: LD_ADDR_OWVAR 26
16656: PUSH
16657: LD_STRING 
16659: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16660: CALL_OW 44
16664: PPUSH
16665: LD_INT 0
16667: PPUSH
16668: CALL_OW 51
// end ;
16672: GO 16594
16674: POP
16675: POP
// end ;
16676: PPOPN 1
16678: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16679: LD_EXP 32
16683: PUSH
16684: LD_EXP 52
16688: AND
16689: IFFALSE 16698
16691: GO 16693
16693: DISABLE
// StreamSibBomb ;
16694: CALL 16699 0 0
16698: END
// export function StreamSibBomb ; var i , x , y ; begin
16699: LD_INT 0
16701: PPUSH
16702: PPUSH
16703: PPUSH
16704: PPUSH
// result := false ;
16705: LD_ADDR_VAR 0 1
16709: PUSH
16710: LD_INT 0
16712: ST_TO_ADDR
// for i := 1 to 16 do
16713: LD_ADDR_VAR 0 2
16717: PUSH
16718: DOUBLE
16719: LD_INT 1
16721: DEC
16722: ST_TO_ADDR
16723: LD_INT 16
16725: PUSH
16726: FOR_TO
16727: IFFALSE 16926
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16729: LD_ADDR_VAR 0 3
16733: PUSH
16734: LD_INT 10
16736: PUSH
16737: LD_INT 20
16739: PUSH
16740: LD_INT 30
16742: PUSH
16743: LD_INT 40
16745: PUSH
16746: LD_INT 50
16748: PUSH
16749: LD_INT 60
16751: PUSH
16752: LD_INT 70
16754: PUSH
16755: LD_INT 80
16757: PUSH
16758: LD_INT 90
16760: PUSH
16761: LD_INT 100
16763: PUSH
16764: LD_INT 110
16766: PUSH
16767: LD_INT 120
16769: PUSH
16770: LD_INT 130
16772: PUSH
16773: LD_INT 140
16775: PUSH
16776: LD_INT 150
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 1
16798: PPUSH
16799: LD_INT 15
16801: PPUSH
16802: CALL_OW 12
16806: ARRAY
16807: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16808: LD_ADDR_VAR 0 4
16812: PUSH
16813: LD_INT 10
16815: PUSH
16816: LD_INT 20
16818: PUSH
16819: LD_INT 30
16821: PUSH
16822: LD_INT 40
16824: PUSH
16825: LD_INT 50
16827: PUSH
16828: LD_INT 60
16830: PUSH
16831: LD_INT 70
16833: PUSH
16834: LD_INT 80
16836: PUSH
16837: LD_INT 90
16839: PUSH
16840: LD_INT 100
16842: PUSH
16843: LD_INT 110
16845: PUSH
16846: LD_INT 120
16848: PUSH
16849: LD_INT 130
16851: PUSH
16852: LD_INT 140
16854: PUSH
16855: LD_INT 150
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: PUSH
16875: LD_INT 1
16877: PPUSH
16878: LD_INT 15
16880: PPUSH
16881: CALL_OW 12
16885: ARRAY
16886: ST_TO_ADDR
// if ValidHex ( x , y ) then
16887: LD_VAR 0 3
16891: PPUSH
16892: LD_VAR 0 4
16896: PPUSH
16897: CALL_OW 488
16901: IFFALSE 16924
// begin result := [ x , y ] ;
16903: LD_ADDR_VAR 0 1
16907: PUSH
16908: LD_VAR 0 3
16912: PUSH
16913: LD_VAR 0 4
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: ST_TO_ADDR
// break ;
16922: GO 16926
// end ; end ;
16924: GO 16726
16926: POP
16927: POP
// if result then
16928: LD_VAR 0 1
16932: IFFALSE 16992
// begin ToLua ( playSibBomb() ) ;
16934: LD_STRING playSibBomb()
16936: PPUSH
16937: CALL_OW 559
// wait ( 0 0$14 ) ;
16941: LD_INT 490
16943: PPUSH
16944: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16948: LD_VAR 0 1
16952: PUSH
16953: LD_INT 1
16955: ARRAY
16956: PPUSH
16957: LD_VAR 0 1
16961: PUSH
16962: LD_INT 2
16964: ARRAY
16965: PPUSH
16966: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16970: LD_VAR 0 1
16974: PUSH
16975: LD_INT 1
16977: ARRAY
16978: PPUSH
16979: LD_VAR 0 1
16983: PUSH
16984: LD_INT 2
16986: ARRAY
16987: PPUSH
16988: CALL_OW 429
// end ; end ;
16992: LD_VAR 0 1
16996: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16997: LD_EXP 32
17001: PUSH
17002: LD_EXP 54
17006: AND
17007: IFFALSE 17019
17009: GO 17011
17011: DISABLE
// YouLost (  ) ;
17012: LD_STRING 
17014: PPUSH
17015: CALL_OW 104
17019: END
// every 0 0$1 trigger StreamModeActive and sFog do
17020: LD_EXP 32
17024: PUSH
17025: LD_EXP 53
17029: AND
17030: IFFALSE 17044
17032: GO 17034
17034: DISABLE
// FogOff ( your_side ) ;
17035: LD_OWVAR 2
17039: PPUSH
17040: CALL_OW 344
17044: END
// every 0 0$1 trigger StreamModeActive and sSun do
17045: LD_EXP 32
17049: PUSH
17050: LD_EXP 55
17054: AND
17055: IFFALSE 17083
17057: GO 17059
17059: DISABLE
// begin solar_recharge_percent := 0 ;
17060: LD_ADDR_OWVAR 79
17064: PUSH
17065: LD_INT 0
17067: ST_TO_ADDR
// wait ( 5 5$00 ) ;
17068: LD_INT 10500
17070: PPUSH
17071: CALL_OW 67
// solar_recharge_percent := 100 ;
17075: LD_ADDR_OWVAR 79
17079: PUSH
17080: LD_INT 100
17082: ST_TO_ADDR
// end ;
17083: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
17084: LD_EXP 32
17088: PUSH
17089: LD_EXP 56
17093: AND
17094: IFFALSE 17333
17096: GO 17098
17098: DISABLE
17099: LD_INT 0
17101: PPUSH
17102: PPUSH
17103: PPUSH
// begin tmp := [ ] ;
17104: LD_ADDR_VAR 0 3
17108: PUSH
17109: EMPTY
17110: ST_TO_ADDR
// for i := 1 to 6 do
17111: LD_ADDR_VAR 0 1
17115: PUSH
17116: DOUBLE
17117: LD_INT 1
17119: DEC
17120: ST_TO_ADDR
17121: LD_INT 6
17123: PUSH
17124: FOR_TO
17125: IFFALSE 17230
// begin uc_nation := nation_nature ;
17127: LD_ADDR_OWVAR 21
17131: PUSH
17132: LD_INT 0
17134: ST_TO_ADDR
// uc_side := 0 ;
17135: LD_ADDR_OWVAR 20
17139: PUSH
17140: LD_INT 0
17142: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
17143: LD_ADDR_OWVAR 29
17147: PUSH
17148: LD_INT 12
17150: PUSH
17151: LD_INT 12
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: ST_TO_ADDR
// hc_agressivity := 20 ;
17158: LD_ADDR_OWVAR 35
17162: PUSH
17163: LD_INT 20
17165: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17166: LD_ADDR_OWVAR 28
17170: PUSH
17171: LD_INT 17
17173: ST_TO_ADDR
// hc_gallery :=  ;
17174: LD_ADDR_OWVAR 33
17178: PUSH
17179: LD_STRING 
17181: ST_TO_ADDR
// hc_name :=  ;
17182: LD_ADDR_OWVAR 26
17186: PUSH
17187: LD_STRING 
17189: ST_TO_ADDR
// un := CreateHuman ;
17190: LD_ADDR_VAR 0 2
17194: PUSH
17195: CALL_OW 44
17199: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17200: LD_VAR 0 2
17204: PPUSH
17205: LD_INT 1
17207: PPUSH
17208: CALL_OW 51
// tmp := tmp ^ un ;
17212: LD_ADDR_VAR 0 3
17216: PUSH
17217: LD_VAR 0 3
17221: PUSH
17222: LD_VAR 0 2
17226: ADD
17227: ST_TO_ADDR
// end ;
17228: GO 17124
17230: POP
17231: POP
// repeat wait ( 0 0$1 ) ;
17232: LD_INT 35
17234: PPUSH
17235: CALL_OW 67
// for un in tmp do
17239: LD_ADDR_VAR 0 2
17243: PUSH
17244: LD_VAR 0 3
17248: PUSH
17249: FOR_IN
17250: IFFALSE 17324
// begin if IsDead ( un ) then
17252: LD_VAR 0 2
17256: PPUSH
17257: CALL_OW 301
17261: IFFALSE 17281
// begin tmp := tmp diff un ;
17263: LD_ADDR_VAR 0 3
17267: PUSH
17268: LD_VAR 0 3
17272: PUSH
17273: LD_VAR 0 2
17277: DIFF
17278: ST_TO_ADDR
// continue ;
17279: GO 17249
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17281: LD_VAR 0 2
17285: PPUSH
17286: LD_INT 3
17288: PUSH
17289: LD_INT 22
17291: PUSH
17292: LD_INT 0
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PPUSH
17303: CALL_OW 69
17307: PPUSH
17308: LD_VAR 0 2
17312: PPUSH
17313: CALL_OW 74
17317: PPUSH
17318: CALL_OW 115
// end ;
17322: GO 17249
17324: POP
17325: POP
// until not tmp ;
17326: LD_VAR 0 3
17330: NOT
17331: IFFALSE 17232
// end ;
17333: PPOPN 3
17335: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17336: LD_EXP 32
17340: PUSH
17341: LD_EXP 57
17345: AND
17346: IFFALSE 17400
17348: GO 17350
17350: DISABLE
// begin ToLua ( displayTroll(); ) ;
17351: LD_STRING displayTroll();
17353: PPUSH
17354: CALL_OW 559
// wait ( 3 3$00 ) ;
17358: LD_INT 6300
17360: PPUSH
17361: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17365: LD_STRING hideTroll();
17367: PPUSH
17368: CALL_OW 559
// wait ( 1 1$00 ) ;
17372: LD_INT 2100
17374: PPUSH
17375: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17379: LD_STRING displayTroll();
17381: PPUSH
17382: CALL_OW 559
// wait ( 1 1$00 ) ;
17386: LD_INT 2100
17388: PPUSH
17389: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17393: LD_STRING hideTroll();
17395: PPUSH
17396: CALL_OW 559
// end ;
17400: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17401: LD_EXP 32
17405: PUSH
17406: LD_EXP 58
17410: AND
17411: IFFALSE 17474
17413: GO 17415
17415: DISABLE
17416: LD_INT 0
17418: PPUSH
// begin p := 0 ;
17419: LD_ADDR_VAR 0 1
17423: PUSH
17424: LD_INT 0
17426: ST_TO_ADDR
// repeat game_speed := 1 ;
17427: LD_ADDR_OWVAR 65
17431: PUSH
17432: LD_INT 1
17434: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17435: LD_INT 35
17437: PPUSH
17438: CALL_OW 67
// p := p + 1 ;
17442: LD_ADDR_VAR 0 1
17446: PUSH
17447: LD_VAR 0 1
17451: PUSH
17452: LD_INT 1
17454: PLUS
17455: ST_TO_ADDR
// until p >= 60 ;
17456: LD_VAR 0 1
17460: PUSH
17461: LD_INT 60
17463: GREATEREQUAL
17464: IFFALSE 17427
// game_speed := 4 ;
17466: LD_ADDR_OWVAR 65
17470: PUSH
17471: LD_INT 4
17473: ST_TO_ADDR
// end ;
17474: PPOPN 1
17476: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17477: LD_EXP 32
17481: PUSH
17482: LD_EXP 59
17486: AND
17487: IFFALSE 17633
17489: GO 17491
17491: DISABLE
17492: LD_INT 0
17494: PPUSH
17495: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17496: LD_ADDR_VAR 0 1
17500: PUSH
17501: LD_INT 22
17503: PUSH
17504: LD_OWVAR 2
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: LD_INT 2
17515: PUSH
17516: LD_INT 30
17518: PUSH
17519: LD_INT 0
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 30
17528: PUSH
17529: LD_INT 1
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: LIST
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PPUSH
17545: CALL_OW 69
17549: ST_TO_ADDR
// if not depot then
17550: LD_VAR 0 1
17554: NOT
17555: IFFALSE 17559
// exit ;
17557: GO 17633
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17559: LD_ADDR_VAR 0 2
17563: PUSH
17564: LD_VAR 0 1
17568: PUSH
17569: LD_INT 1
17571: PPUSH
17572: LD_VAR 0 1
17576: PPUSH
17577: CALL_OW 12
17581: ARRAY
17582: PPUSH
17583: CALL_OW 274
17587: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17588: LD_VAR 0 2
17592: PPUSH
17593: LD_INT 1
17595: PPUSH
17596: LD_INT 0
17598: PPUSH
17599: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17603: LD_VAR 0 2
17607: PPUSH
17608: LD_INT 2
17610: PPUSH
17611: LD_INT 0
17613: PPUSH
17614: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17618: LD_VAR 0 2
17622: PPUSH
17623: LD_INT 3
17625: PPUSH
17626: LD_INT 0
17628: PPUSH
17629: CALL_OW 277
// end ;
17633: PPOPN 2
17635: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17636: LD_EXP 32
17640: PUSH
17641: LD_EXP 60
17645: AND
17646: IFFALSE 17743
17648: GO 17650
17650: DISABLE
17651: LD_INT 0
17653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17654: LD_ADDR_VAR 0 1
17658: PUSH
17659: LD_INT 22
17661: PUSH
17662: LD_OWVAR 2
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 21
17673: PUSH
17674: LD_INT 1
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: LD_INT 3
17683: PUSH
17684: LD_INT 23
17686: PUSH
17687: LD_INT 0
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: EMPTY
17699: LIST
17700: LIST
17701: LIST
17702: PPUSH
17703: CALL_OW 69
17707: ST_TO_ADDR
// if not tmp then
17708: LD_VAR 0 1
17712: NOT
17713: IFFALSE 17717
// exit ;
17715: GO 17743
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17717: LD_VAR 0 1
17721: PUSH
17722: LD_INT 1
17724: PPUSH
17725: LD_VAR 0 1
17729: PPUSH
17730: CALL_OW 12
17734: ARRAY
17735: PPUSH
17736: LD_INT 200
17738: PPUSH
17739: CALL_OW 234
// end ;
17743: PPOPN 1
17745: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17746: LD_EXP 32
17750: PUSH
17751: LD_EXP 61
17755: AND
17756: IFFALSE 17835
17758: GO 17760
17760: DISABLE
17761: LD_INT 0
17763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17764: LD_ADDR_VAR 0 1
17768: PUSH
17769: LD_INT 22
17771: PUSH
17772: LD_OWVAR 2
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 21
17783: PUSH
17784: LD_INT 2
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PPUSH
17795: CALL_OW 69
17799: ST_TO_ADDR
// if not tmp then
17800: LD_VAR 0 1
17804: NOT
17805: IFFALSE 17809
// exit ;
17807: GO 17835
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17809: LD_VAR 0 1
17813: PUSH
17814: LD_INT 1
17816: PPUSH
17817: LD_VAR 0 1
17821: PPUSH
17822: CALL_OW 12
17826: ARRAY
17827: PPUSH
17828: LD_INT 60
17830: PPUSH
17831: CALL_OW 234
// end ;
17835: PPOPN 1
17837: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17838: LD_EXP 32
17842: PUSH
17843: LD_EXP 62
17847: AND
17848: IFFALSE 17947
17850: GO 17852
17852: DISABLE
17853: LD_INT 0
17855: PPUSH
17856: PPUSH
// begin enable ;
17857: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17858: LD_ADDR_VAR 0 1
17862: PUSH
17863: LD_INT 22
17865: PUSH
17866: LD_OWVAR 2
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 61
17877: PUSH
17878: EMPTY
17879: LIST
17880: PUSH
17881: LD_INT 33
17883: PUSH
17884: LD_INT 2
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: LIST
17895: PPUSH
17896: CALL_OW 69
17900: ST_TO_ADDR
// if not tmp then
17901: LD_VAR 0 1
17905: NOT
17906: IFFALSE 17910
// exit ;
17908: GO 17947
// for i in tmp do
17910: LD_ADDR_VAR 0 2
17914: PUSH
17915: LD_VAR 0 1
17919: PUSH
17920: FOR_IN
17921: IFFALSE 17945
// if IsControledBy ( i ) then
17923: LD_VAR 0 2
17927: PPUSH
17928: CALL_OW 312
17932: IFFALSE 17943
// ComUnlink ( i ) ;
17934: LD_VAR 0 2
17938: PPUSH
17939: CALL_OW 136
17943: GO 17920
17945: POP
17946: POP
// end ;
17947: PPOPN 2
17949: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17950: LD_EXP 32
17954: PUSH
17955: LD_EXP 63
17959: AND
17960: IFFALSE 18100
17962: GO 17964
17964: DISABLE
17965: LD_INT 0
17967: PPUSH
17968: PPUSH
// begin ToLua ( displayPowell(); ) ;
17969: LD_STRING displayPowell();
17971: PPUSH
17972: CALL_OW 559
// uc_side := 0 ;
17976: LD_ADDR_OWVAR 20
17980: PUSH
17981: LD_INT 0
17983: ST_TO_ADDR
// uc_nation := 2 ;
17984: LD_ADDR_OWVAR 21
17988: PUSH
17989: LD_INT 2
17991: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17992: LD_ADDR_OWVAR 37
17996: PUSH
17997: LD_INT 14
17999: ST_TO_ADDR
// vc_engine := engine_siberite ;
18000: LD_ADDR_OWVAR 39
18004: PUSH
18005: LD_INT 3
18007: ST_TO_ADDR
// vc_control := control_apeman ;
18008: LD_ADDR_OWVAR 38
18012: PUSH
18013: LD_INT 5
18015: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
18016: LD_ADDR_OWVAR 40
18020: PUSH
18021: LD_INT 29
18023: ST_TO_ADDR
// un := CreateVehicle ;
18024: LD_ADDR_VAR 0 2
18028: PUSH
18029: CALL_OW 45
18033: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18034: LD_VAR 0 2
18038: PPUSH
18039: LD_INT 1
18041: PPUSH
18042: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18046: LD_INT 35
18048: PPUSH
18049: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18053: LD_VAR 0 2
18057: PPUSH
18058: LD_INT 22
18060: PUSH
18061: LD_OWVAR 2
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PPUSH
18070: CALL_OW 69
18074: PPUSH
18075: LD_VAR 0 2
18079: PPUSH
18080: CALL_OW 74
18084: PPUSH
18085: CALL_OW 115
// until IsDead ( un ) ;
18089: LD_VAR 0 2
18093: PPUSH
18094: CALL_OW 301
18098: IFFALSE 18046
// end ;
18100: PPOPN 2
18102: END
// every 0 0$1 trigger StreamModeActive and sStu do
18103: LD_EXP 32
18107: PUSH
18108: LD_EXP 71
18112: AND
18113: IFFALSE 18129
18115: GO 18117
18117: DISABLE
// begin ToLua ( displayStucuk(); ) ;
18118: LD_STRING displayStucuk();
18120: PPUSH
18121: CALL_OW 559
// ResetFog ;
18125: CALL_OW 335
// end ;
18129: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
18130: LD_EXP 32
18134: PUSH
18135: LD_EXP 64
18139: AND
18140: IFFALSE 18281
18142: GO 18144
18144: DISABLE
18145: LD_INT 0
18147: PPUSH
18148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18149: LD_ADDR_VAR 0 2
18153: PUSH
18154: LD_INT 22
18156: PUSH
18157: LD_OWVAR 2
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: LD_INT 21
18168: PUSH
18169: LD_INT 1
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PPUSH
18180: CALL_OW 69
18184: ST_TO_ADDR
// if not tmp then
18185: LD_VAR 0 2
18189: NOT
18190: IFFALSE 18194
// exit ;
18192: GO 18281
// un := tmp [ rand ( 1 , tmp ) ] ;
18194: LD_ADDR_VAR 0 1
18198: PUSH
18199: LD_VAR 0 2
18203: PUSH
18204: LD_INT 1
18206: PPUSH
18207: LD_VAR 0 2
18211: PPUSH
18212: CALL_OW 12
18216: ARRAY
18217: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18218: LD_VAR 0 1
18222: PPUSH
18223: LD_INT 0
18225: PPUSH
18226: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18230: LD_VAR 0 1
18234: PPUSH
18235: LD_OWVAR 3
18239: PUSH
18240: LD_VAR 0 1
18244: DIFF
18245: PPUSH
18246: LD_VAR 0 1
18250: PPUSH
18251: CALL_OW 74
18255: PPUSH
18256: CALL_OW 115
// wait ( 0 0$20 ) ;
18260: LD_INT 700
18262: PPUSH
18263: CALL_OW 67
// SetSide ( un , your_side ) ;
18267: LD_VAR 0 1
18271: PPUSH
18272: LD_OWVAR 2
18276: PPUSH
18277: CALL_OW 235
// end ;
18281: PPOPN 2
18283: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18284: LD_EXP 32
18288: PUSH
18289: LD_EXP 65
18293: AND
18294: IFFALSE 18400
18296: GO 18298
18298: DISABLE
18299: LD_INT 0
18301: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18302: LD_ADDR_VAR 0 1
18306: PUSH
18307: LD_INT 22
18309: PUSH
18310: LD_OWVAR 2
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: LD_INT 2
18321: PUSH
18322: LD_INT 30
18324: PUSH
18325: LD_INT 0
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 30
18334: PUSH
18335: LD_INT 1
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: LIST
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PPUSH
18351: CALL_OW 69
18355: ST_TO_ADDR
// if not depot then
18356: LD_VAR 0 1
18360: NOT
18361: IFFALSE 18365
// exit ;
18363: GO 18400
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18365: LD_VAR 0 1
18369: PUSH
18370: LD_INT 1
18372: ARRAY
18373: PPUSH
18374: CALL_OW 250
18378: PPUSH
18379: LD_VAR 0 1
18383: PUSH
18384: LD_INT 1
18386: ARRAY
18387: PPUSH
18388: CALL_OW 251
18392: PPUSH
18393: LD_INT 70
18395: PPUSH
18396: CALL_OW 495
// end ;
18400: PPOPN 1
18402: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18403: LD_EXP 32
18407: PUSH
18408: LD_EXP 66
18412: AND
18413: IFFALSE 18624
18415: GO 18417
18417: DISABLE
18418: LD_INT 0
18420: PPUSH
18421: PPUSH
18422: PPUSH
18423: PPUSH
18424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18425: LD_ADDR_VAR 0 5
18429: PUSH
18430: LD_INT 22
18432: PUSH
18433: LD_OWVAR 2
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 21
18444: PUSH
18445: LD_INT 1
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PPUSH
18456: CALL_OW 69
18460: ST_TO_ADDR
// if not tmp then
18461: LD_VAR 0 5
18465: NOT
18466: IFFALSE 18470
// exit ;
18468: GO 18624
// for i in tmp do
18470: LD_ADDR_VAR 0 1
18474: PUSH
18475: LD_VAR 0 5
18479: PUSH
18480: FOR_IN
18481: IFFALSE 18622
// begin d := rand ( 0 , 5 ) ;
18483: LD_ADDR_VAR 0 4
18487: PUSH
18488: LD_INT 0
18490: PPUSH
18491: LD_INT 5
18493: PPUSH
18494: CALL_OW 12
18498: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18499: LD_ADDR_VAR 0 2
18503: PUSH
18504: LD_VAR 0 1
18508: PPUSH
18509: CALL_OW 250
18513: PPUSH
18514: LD_VAR 0 4
18518: PPUSH
18519: LD_INT 3
18521: PPUSH
18522: LD_INT 12
18524: PPUSH
18525: CALL_OW 12
18529: PPUSH
18530: CALL_OW 272
18534: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18535: LD_ADDR_VAR 0 3
18539: PUSH
18540: LD_VAR 0 1
18544: PPUSH
18545: CALL_OW 251
18549: PPUSH
18550: LD_VAR 0 4
18554: PPUSH
18555: LD_INT 3
18557: PPUSH
18558: LD_INT 12
18560: PPUSH
18561: CALL_OW 12
18565: PPUSH
18566: CALL_OW 273
18570: ST_TO_ADDR
// if ValidHex ( x , y ) then
18571: LD_VAR 0 2
18575: PPUSH
18576: LD_VAR 0 3
18580: PPUSH
18581: CALL_OW 488
18585: IFFALSE 18620
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18587: LD_VAR 0 1
18591: PPUSH
18592: LD_VAR 0 2
18596: PPUSH
18597: LD_VAR 0 3
18601: PPUSH
18602: LD_INT 3
18604: PPUSH
18605: LD_INT 6
18607: PPUSH
18608: CALL_OW 12
18612: PPUSH
18613: LD_INT 1
18615: PPUSH
18616: CALL_OW 483
// end ;
18620: GO 18480
18622: POP
18623: POP
// end ;
18624: PPOPN 5
18626: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18627: LD_EXP 32
18631: PUSH
18632: LD_EXP 67
18636: AND
18637: IFFALSE 18731
18639: GO 18641
18641: DISABLE
18642: LD_INT 0
18644: PPUSH
18645: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18646: LD_ADDR_VAR 0 2
18650: PUSH
18651: LD_INT 22
18653: PUSH
18654: LD_OWVAR 2
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 32
18665: PUSH
18666: LD_INT 1
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 21
18675: PUSH
18676: LD_INT 2
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: LIST
18687: PPUSH
18688: CALL_OW 69
18692: ST_TO_ADDR
// if not tmp then
18693: LD_VAR 0 2
18697: NOT
18698: IFFALSE 18702
// exit ;
18700: GO 18731
// for i in tmp do
18702: LD_ADDR_VAR 0 1
18706: PUSH
18707: LD_VAR 0 2
18711: PUSH
18712: FOR_IN
18713: IFFALSE 18729
// SetFuel ( i , 0 ) ;
18715: LD_VAR 0 1
18719: PPUSH
18720: LD_INT 0
18722: PPUSH
18723: CALL_OW 240
18727: GO 18712
18729: POP
18730: POP
// end ;
18731: PPOPN 2
18733: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18734: LD_EXP 32
18738: PUSH
18739: LD_EXP 68
18743: AND
18744: IFFALSE 18810
18746: GO 18748
18748: DISABLE
18749: LD_INT 0
18751: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18752: LD_ADDR_VAR 0 1
18756: PUSH
18757: LD_INT 22
18759: PUSH
18760: LD_OWVAR 2
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: LD_INT 30
18771: PUSH
18772: LD_INT 29
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PPUSH
18783: CALL_OW 69
18787: ST_TO_ADDR
// if not tmp then
18788: LD_VAR 0 1
18792: NOT
18793: IFFALSE 18797
// exit ;
18795: GO 18810
// DestroyUnit ( tmp [ 1 ] ) ;
18797: LD_VAR 0 1
18801: PUSH
18802: LD_INT 1
18804: ARRAY
18805: PPUSH
18806: CALL_OW 65
// end ;
18810: PPOPN 1
18812: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18813: LD_EXP 32
18817: PUSH
18818: LD_EXP 70
18822: AND
18823: IFFALSE 18952
18825: GO 18827
18827: DISABLE
18828: LD_INT 0
18830: PPUSH
// begin uc_side := 0 ;
18831: LD_ADDR_OWVAR 20
18835: PUSH
18836: LD_INT 0
18838: ST_TO_ADDR
// uc_nation := nation_arabian ;
18839: LD_ADDR_OWVAR 21
18843: PUSH
18844: LD_INT 2
18846: ST_TO_ADDR
// hc_gallery :=  ;
18847: LD_ADDR_OWVAR 33
18851: PUSH
18852: LD_STRING 
18854: ST_TO_ADDR
// hc_name :=  ;
18855: LD_ADDR_OWVAR 26
18859: PUSH
18860: LD_STRING 
18862: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18863: LD_INT 1
18865: PPUSH
18866: LD_INT 11
18868: PPUSH
18869: LD_INT 10
18871: PPUSH
18872: CALL_OW 380
// un := CreateHuman ;
18876: LD_ADDR_VAR 0 1
18880: PUSH
18881: CALL_OW 44
18885: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18886: LD_VAR 0 1
18890: PPUSH
18891: LD_INT 1
18893: PPUSH
18894: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18898: LD_INT 35
18900: PPUSH
18901: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18905: LD_VAR 0 1
18909: PPUSH
18910: LD_INT 22
18912: PUSH
18913: LD_OWVAR 2
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PPUSH
18922: CALL_OW 69
18926: PPUSH
18927: LD_VAR 0 1
18931: PPUSH
18932: CALL_OW 74
18936: PPUSH
18937: CALL_OW 115
// until IsDead ( un ) ;
18941: LD_VAR 0 1
18945: PPUSH
18946: CALL_OW 301
18950: IFFALSE 18898
// end ;
18952: PPOPN 1
18954: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18955: LD_EXP 32
18959: PUSH
18960: LD_EXP 72
18964: AND
18965: IFFALSE 18977
18967: GO 18969
18969: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18970: LD_STRING earthquake(getX(game), 0, 32)
18972: PPUSH
18973: CALL_OW 559
18977: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18978: LD_EXP 32
18982: PUSH
18983: LD_EXP 73
18987: AND
18988: IFFALSE 19079
18990: GO 18992
18992: DISABLE
18993: LD_INT 0
18995: PPUSH
// begin enable ;
18996: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18997: LD_ADDR_VAR 0 1
19001: PUSH
19002: LD_INT 22
19004: PUSH
19005: LD_OWVAR 2
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 21
19016: PUSH
19017: LD_INT 2
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 33
19026: PUSH
19027: LD_INT 3
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: LIST
19038: PPUSH
19039: CALL_OW 69
19043: ST_TO_ADDR
// if not tmp then
19044: LD_VAR 0 1
19048: NOT
19049: IFFALSE 19053
// exit ;
19051: GO 19079
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19053: LD_VAR 0 1
19057: PUSH
19058: LD_INT 1
19060: PPUSH
19061: LD_VAR 0 1
19065: PPUSH
19066: CALL_OW 12
19070: ARRAY
19071: PPUSH
19072: LD_INT 1
19074: PPUSH
19075: CALL_OW 234
// end ;
19079: PPOPN 1
19081: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
19082: LD_EXP 32
19086: PUSH
19087: LD_EXP 74
19091: AND
19092: IFFALSE 19233
19094: GO 19096
19096: DISABLE
19097: LD_INT 0
19099: PPUSH
19100: PPUSH
19101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19102: LD_ADDR_VAR 0 3
19106: PUSH
19107: LD_INT 22
19109: PUSH
19110: LD_OWVAR 2
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 25
19121: PUSH
19122: LD_INT 1
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PPUSH
19133: CALL_OW 69
19137: ST_TO_ADDR
// if not tmp then
19138: LD_VAR 0 3
19142: NOT
19143: IFFALSE 19147
// exit ;
19145: GO 19233
// un := tmp [ rand ( 1 , tmp ) ] ;
19147: LD_ADDR_VAR 0 2
19151: PUSH
19152: LD_VAR 0 3
19156: PUSH
19157: LD_INT 1
19159: PPUSH
19160: LD_VAR 0 3
19164: PPUSH
19165: CALL_OW 12
19169: ARRAY
19170: ST_TO_ADDR
// if Crawls ( un ) then
19171: LD_VAR 0 2
19175: PPUSH
19176: CALL_OW 318
19180: IFFALSE 19191
// ComWalk ( un ) ;
19182: LD_VAR 0 2
19186: PPUSH
19187: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19191: LD_VAR 0 2
19195: PPUSH
19196: LD_INT 9
19198: PPUSH
19199: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19203: LD_INT 28
19205: PPUSH
19206: LD_OWVAR 2
19210: PPUSH
19211: LD_INT 2
19213: PPUSH
19214: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19218: LD_INT 29
19220: PPUSH
19221: LD_OWVAR 2
19225: PPUSH
19226: LD_INT 2
19228: PPUSH
19229: CALL_OW 322
// end ;
19233: PPOPN 3
19235: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19236: LD_EXP 32
19240: PUSH
19241: LD_EXP 75
19245: AND
19246: IFFALSE 19357
19248: GO 19250
19250: DISABLE
19251: LD_INT 0
19253: PPUSH
19254: PPUSH
19255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19256: LD_ADDR_VAR 0 3
19260: PUSH
19261: LD_INT 22
19263: PUSH
19264: LD_OWVAR 2
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 25
19275: PUSH
19276: LD_INT 1
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PPUSH
19287: CALL_OW 69
19291: ST_TO_ADDR
// if not tmp then
19292: LD_VAR 0 3
19296: NOT
19297: IFFALSE 19301
// exit ;
19299: GO 19357
// un := tmp [ rand ( 1 , tmp ) ] ;
19301: LD_ADDR_VAR 0 2
19305: PUSH
19306: LD_VAR 0 3
19310: PUSH
19311: LD_INT 1
19313: PPUSH
19314: LD_VAR 0 3
19318: PPUSH
19319: CALL_OW 12
19323: ARRAY
19324: ST_TO_ADDR
// if Crawls ( un ) then
19325: LD_VAR 0 2
19329: PPUSH
19330: CALL_OW 318
19334: IFFALSE 19345
// ComWalk ( un ) ;
19336: LD_VAR 0 2
19340: PPUSH
19341: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19345: LD_VAR 0 2
19349: PPUSH
19350: LD_INT 8
19352: PPUSH
19353: CALL_OW 336
// end ;
19357: PPOPN 3
19359: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19360: LD_EXP 32
19364: PUSH
19365: LD_EXP 76
19369: AND
19370: IFFALSE 19514
19372: GO 19374
19374: DISABLE
19375: LD_INT 0
19377: PPUSH
19378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19379: LD_ADDR_VAR 0 2
19383: PUSH
19384: LD_INT 22
19386: PUSH
19387: LD_OWVAR 2
19391: PUSH
19392: EMPTY
19393: LIST
19394: LIST
19395: PUSH
19396: LD_INT 21
19398: PUSH
19399: LD_INT 2
19401: PUSH
19402: EMPTY
19403: LIST
19404: LIST
19405: PUSH
19406: LD_INT 2
19408: PUSH
19409: LD_INT 34
19411: PUSH
19412: LD_INT 12
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 34
19421: PUSH
19422: LD_INT 51
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 34
19431: PUSH
19432: LD_INT 32
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: LIST
19443: LIST
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: LIST
19449: PPUSH
19450: CALL_OW 69
19454: ST_TO_ADDR
// if not tmp then
19455: LD_VAR 0 2
19459: NOT
19460: IFFALSE 19464
// exit ;
19462: GO 19514
// for i in tmp do
19464: LD_ADDR_VAR 0 1
19468: PUSH
19469: LD_VAR 0 2
19473: PUSH
19474: FOR_IN
19475: IFFALSE 19512
// if GetCargo ( i , mat_artifact ) = 0 then
19477: LD_VAR 0 1
19481: PPUSH
19482: LD_INT 4
19484: PPUSH
19485: CALL_OW 289
19489: PUSH
19490: LD_INT 0
19492: EQUAL
19493: IFFALSE 19510
// SetCargo ( i , mat_siberit , 100 ) ;
19495: LD_VAR 0 1
19499: PPUSH
19500: LD_INT 3
19502: PPUSH
19503: LD_INT 100
19505: PPUSH
19506: CALL_OW 290
19510: GO 19474
19512: POP
19513: POP
// end ;
19514: PPOPN 2
19516: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19517: LD_EXP 32
19521: PUSH
19522: LD_EXP 77
19526: AND
19527: IFFALSE 19710
19529: GO 19531
19531: DISABLE
19532: LD_INT 0
19534: PPUSH
19535: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19536: LD_ADDR_VAR 0 2
19540: PUSH
19541: LD_INT 22
19543: PUSH
19544: LD_OWVAR 2
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PPUSH
19553: CALL_OW 69
19557: ST_TO_ADDR
// if not tmp then
19558: LD_VAR 0 2
19562: NOT
19563: IFFALSE 19567
// exit ;
19565: GO 19710
// for i := 1 to 2 do
19567: LD_ADDR_VAR 0 1
19571: PUSH
19572: DOUBLE
19573: LD_INT 1
19575: DEC
19576: ST_TO_ADDR
19577: LD_INT 2
19579: PUSH
19580: FOR_TO
19581: IFFALSE 19708
// begin uc_side := your_side ;
19583: LD_ADDR_OWVAR 20
19587: PUSH
19588: LD_OWVAR 2
19592: ST_TO_ADDR
// uc_nation := nation_american ;
19593: LD_ADDR_OWVAR 21
19597: PUSH
19598: LD_INT 1
19600: ST_TO_ADDR
// vc_chassis := us_morphling ;
19601: LD_ADDR_OWVAR 37
19605: PUSH
19606: LD_INT 5
19608: ST_TO_ADDR
// vc_engine := engine_siberite ;
19609: LD_ADDR_OWVAR 39
19613: PUSH
19614: LD_INT 3
19616: ST_TO_ADDR
// vc_control := control_computer ;
19617: LD_ADDR_OWVAR 38
19621: PUSH
19622: LD_INT 3
19624: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19625: LD_ADDR_OWVAR 40
19629: PUSH
19630: LD_INT 10
19632: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19633: LD_VAR 0 2
19637: PUSH
19638: LD_INT 1
19640: ARRAY
19641: PPUSH
19642: CALL_OW 310
19646: NOT
19647: IFFALSE 19694
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19649: CALL_OW 45
19653: PPUSH
19654: LD_VAR 0 2
19658: PUSH
19659: LD_INT 1
19661: ARRAY
19662: PPUSH
19663: CALL_OW 250
19667: PPUSH
19668: LD_VAR 0 2
19672: PUSH
19673: LD_INT 1
19675: ARRAY
19676: PPUSH
19677: CALL_OW 251
19681: PPUSH
19682: LD_INT 12
19684: PPUSH
19685: LD_INT 1
19687: PPUSH
19688: CALL_OW 50
19692: GO 19706
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19694: CALL_OW 45
19698: PPUSH
19699: LD_INT 1
19701: PPUSH
19702: CALL_OW 51
// end ;
19706: GO 19580
19708: POP
19709: POP
// end ;
19710: PPOPN 2
19712: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19713: LD_EXP 32
19717: PUSH
19718: LD_EXP 78
19722: AND
19723: IFFALSE 19945
19725: GO 19727
19727: DISABLE
19728: LD_INT 0
19730: PPUSH
19731: PPUSH
19732: PPUSH
19733: PPUSH
19734: PPUSH
19735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19736: LD_ADDR_VAR 0 6
19740: PUSH
19741: LD_INT 22
19743: PUSH
19744: LD_OWVAR 2
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: LD_INT 21
19755: PUSH
19756: LD_INT 1
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 3
19765: PUSH
19766: LD_INT 23
19768: PUSH
19769: LD_INT 0
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: LIST
19784: PPUSH
19785: CALL_OW 69
19789: ST_TO_ADDR
// if not tmp then
19790: LD_VAR 0 6
19794: NOT
19795: IFFALSE 19799
// exit ;
19797: GO 19945
// s1 := rand ( 1 , 4 ) ;
19799: LD_ADDR_VAR 0 2
19803: PUSH
19804: LD_INT 1
19806: PPUSH
19807: LD_INT 4
19809: PPUSH
19810: CALL_OW 12
19814: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19815: LD_ADDR_VAR 0 4
19819: PUSH
19820: LD_VAR 0 6
19824: PUSH
19825: LD_INT 1
19827: ARRAY
19828: PPUSH
19829: LD_VAR 0 2
19833: PPUSH
19834: CALL_OW 259
19838: ST_TO_ADDR
// if s1 = 1 then
19839: LD_VAR 0 2
19843: PUSH
19844: LD_INT 1
19846: EQUAL
19847: IFFALSE 19867
// s2 := rand ( 2 , 4 ) else
19849: LD_ADDR_VAR 0 3
19853: PUSH
19854: LD_INT 2
19856: PPUSH
19857: LD_INT 4
19859: PPUSH
19860: CALL_OW 12
19864: ST_TO_ADDR
19865: GO 19875
// s2 := 1 ;
19867: LD_ADDR_VAR 0 3
19871: PUSH
19872: LD_INT 1
19874: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19875: LD_ADDR_VAR 0 5
19879: PUSH
19880: LD_VAR 0 6
19884: PUSH
19885: LD_INT 1
19887: ARRAY
19888: PPUSH
19889: LD_VAR 0 3
19893: PPUSH
19894: CALL_OW 259
19898: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19899: LD_VAR 0 6
19903: PUSH
19904: LD_INT 1
19906: ARRAY
19907: PPUSH
19908: LD_VAR 0 2
19912: PPUSH
19913: LD_VAR 0 5
19917: PPUSH
19918: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19922: LD_VAR 0 6
19926: PUSH
19927: LD_INT 1
19929: ARRAY
19930: PPUSH
19931: LD_VAR 0 3
19935: PPUSH
19936: LD_VAR 0 4
19940: PPUSH
19941: CALL_OW 237
// end ;
19945: PPOPN 6
19947: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19948: LD_EXP 32
19952: PUSH
19953: LD_EXP 79
19957: AND
19958: IFFALSE 20037
19960: GO 19962
19962: DISABLE
19963: LD_INT 0
19965: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19966: LD_ADDR_VAR 0 1
19970: PUSH
19971: LD_INT 22
19973: PUSH
19974: LD_OWVAR 2
19978: PUSH
19979: EMPTY
19980: LIST
19981: LIST
19982: PUSH
19983: LD_INT 30
19985: PUSH
19986: LD_INT 3
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PPUSH
19997: CALL_OW 69
20001: ST_TO_ADDR
// if not tmp then
20002: LD_VAR 0 1
20006: NOT
20007: IFFALSE 20011
// exit ;
20009: GO 20037
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
20011: LD_VAR 0 1
20015: PUSH
20016: LD_INT 1
20018: PPUSH
20019: LD_VAR 0 1
20023: PPUSH
20024: CALL_OW 12
20028: ARRAY
20029: PPUSH
20030: LD_INT 1
20032: PPUSH
20033: CALL_OW 234
// end ;
20037: PPOPN 1
20039: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
20040: LD_EXP 32
20044: PUSH
20045: LD_EXP 80
20049: AND
20050: IFFALSE 20162
20052: GO 20054
20054: DISABLE
20055: LD_INT 0
20057: PPUSH
20058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
20059: LD_ADDR_VAR 0 2
20063: PUSH
20064: LD_INT 22
20066: PUSH
20067: LD_OWVAR 2
20071: PUSH
20072: EMPTY
20073: LIST
20074: LIST
20075: PUSH
20076: LD_INT 2
20078: PUSH
20079: LD_INT 30
20081: PUSH
20082: LD_INT 27
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PUSH
20089: LD_INT 30
20091: PUSH
20092: LD_INT 26
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PUSH
20099: LD_INT 30
20101: PUSH
20102: LD_INT 28
20104: PUSH
20105: EMPTY
20106: LIST
20107: LIST
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PPUSH
20119: CALL_OW 69
20123: ST_TO_ADDR
// if not tmp then
20124: LD_VAR 0 2
20128: NOT
20129: IFFALSE 20133
// exit ;
20131: GO 20162
// for i in tmp do
20133: LD_ADDR_VAR 0 1
20137: PUSH
20138: LD_VAR 0 2
20142: PUSH
20143: FOR_IN
20144: IFFALSE 20160
// SetLives ( i , 1 ) ;
20146: LD_VAR 0 1
20150: PPUSH
20151: LD_INT 1
20153: PPUSH
20154: CALL_OW 234
20158: GO 20143
20160: POP
20161: POP
// end ;
20162: PPOPN 2
20164: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20165: LD_EXP 32
20169: PUSH
20170: LD_EXP 81
20174: AND
20175: IFFALSE 20462
20177: GO 20179
20179: DISABLE
20180: LD_INT 0
20182: PPUSH
20183: PPUSH
20184: PPUSH
// begin i := rand ( 1 , 7 ) ;
20185: LD_ADDR_VAR 0 1
20189: PUSH
20190: LD_INT 1
20192: PPUSH
20193: LD_INT 7
20195: PPUSH
20196: CALL_OW 12
20200: ST_TO_ADDR
// case i of 1 :
20201: LD_VAR 0 1
20205: PUSH
20206: LD_INT 1
20208: DOUBLE
20209: EQUAL
20210: IFTRUE 20214
20212: GO 20224
20214: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20215: LD_STRING earthquake(getX(game), 0, 32)
20217: PPUSH
20218: CALL_OW 559
20222: GO 20462
20224: LD_INT 2
20226: DOUBLE
20227: EQUAL
20228: IFTRUE 20232
20230: GO 20246
20232: POP
// begin ToLua ( displayStucuk(); ) ;
20233: LD_STRING displayStucuk();
20235: PPUSH
20236: CALL_OW 559
// ResetFog ;
20240: CALL_OW 335
// end ; 3 :
20244: GO 20462
20246: LD_INT 3
20248: DOUBLE
20249: EQUAL
20250: IFTRUE 20254
20252: GO 20358
20254: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20255: LD_ADDR_VAR 0 2
20259: PUSH
20260: LD_INT 22
20262: PUSH
20263: LD_OWVAR 2
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PUSH
20272: LD_INT 25
20274: PUSH
20275: LD_INT 1
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PPUSH
20286: CALL_OW 69
20290: ST_TO_ADDR
// if not tmp then
20291: LD_VAR 0 2
20295: NOT
20296: IFFALSE 20300
// exit ;
20298: GO 20462
// un := tmp [ rand ( 1 , tmp ) ] ;
20300: LD_ADDR_VAR 0 3
20304: PUSH
20305: LD_VAR 0 2
20309: PUSH
20310: LD_INT 1
20312: PPUSH
20313: LD_VAR 0 2
20317: PPUSH
20318: CALL_OW 12
20322: ARRAY
20323: ST_TO_ADDR
// if Crawls ( un ) then
20324: LD_VAR 0 3
20328: PPUSH
20329: CALL_OW 318
20333: IFFALSE 20344
// ComWalk ( un ) ;
20335: LD_VAR 0 3
20339: PPUSH
20340: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20344: LD_VAR 0 3
20348: PPUSH
20349: LD_INT 8
20351: PPUSH
20352: CALL_OW 336
// end ; 4 :
20356: GO 20462
20358: LD_INT 4
20360: DOUBLE
20361: EQUAL
20362: IFTRUE 20366
20364: GO 20440
20366: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20367: LD_ADDR_VAR 0 2
20371: PUSH
20372: LD_INT 22
20374: PUSH
20375: LD_OWVAR 2
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 30
20386: PUSH
20387: LD_INT 29
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PPUSH
20398: CALL_OW 69
20402: ST_TO_ADDR
// if not tmp then
20403: LD_VAR 0 2
20407: NOT
20408: IFFALSE 20412
// exit ;
20410: GO 20462
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20412: LD_VAR 0 2
20416: PUSH
20417: LD_INT 1
20419: ARRAY
20420: PPUSH
20421: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20425: LD_VAR 0 2
20429: PUSH
20430: LD_INT 1
20432: ARRAY
20433: PPUSH
20434: CALL_OW 65
// end ; 5 .. 7 :
20438: GO 20462
20440: LD_INT 5
20442: DOUBLE
20443: GREATEREQUAL
20444: IFFALSE 20452
20446: LD_INT 7
20448: DOUBLE
20449: LESSEQUAL
20450: IFTRUE 20454
20452: GO 20461
20454: POP
// StreamSibBomb ; end ;
20455: CALL 16699 0 0
20459: GO 20462
20461: POP
// end ;
20462: PPOPN 3
20464: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20465: LD_EXP 32
20469: PUSH
20470: LD_EXP 82
20474: AND
20475: IFFALSE 20631
20477: GO 20479
20479: DISABLE
20480: LD_INT 0
20482: PPUSH
20483: PPUSH
20484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20485: LD_ADDR_VAR 0 2
20489: PUSH
20490: LD_INT 81
20492: PUSH
20493: LD_OWVAR 2
20497: PUSH
20498: EMPTY
20499: LIST
20500: LIST
20501: PUSH
20502: LD_INT 2
20504: PUSH
20505: LD_INT 21
20507: PUSH
20508: LD_INT 1
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 21
20517: PUSH
20518: LD_INT 2
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: LIST
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PPUSH
20534: CALL_OW 69
20538: ST_TO_ADDR
// if not tmp then
20539: LD_VAR 0 2
20543: NOT
20544: IFFALSE 20548
// exit ;
20546: GO 20631
// p := 0 ;
20548: LD_ADDR_VAR 0 3
20552: PUSH
20553: LD_INT 0
20555: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20556: LD_INT 35
20558: PPUSH
20559: CALL_OW 67
// p := p + 1 ;
20563: LD_ADDR_VAR 0 3
20567: PUSH
20568: LD_VAR 0 3
20572: PUSH
20573: LD_INT 1
20575: PLUS
20576: ST_TO_ADDR
// for i in tmp do
20577: LD_ADDR_VAR 0 1
20581: PUSH
20582: LD_VAR 0 2
20586: PUSH
20587: FOR_IN
20588: IFFALSE 20619
// if GetLives ( i ) < 1000 then
20590: LD_VAR 0 1
20594: PPUSH
20595: CALL_OW 256
20599: PUSH
20600: LD_INT 1000
20602: LESS
20603: IFFALSE 20617
// SetLives ( i , 1000 ) ;
20605: LD_VAR 0 1
20609: PPUSH
20610: LD_INT 1000
20612: PPUSH
20613: CALL_OW 234
20617: GO 20587
20619: POP
20620: POP
// until p > 20 ;
20621: LD_VAR 0 3
20625: PUSH
20626: LD_INT 20
20628: GREATER
20629: IFFALSE 20556
// end ;
20631: PPOPN 3
20633: END
// every 0 0$1 trigger StreamModeActive and sTime do
20634: LD_EXP 32
20638: PUSH
20639: LD_EXP 83
20643: AND
20644: IFFALSE 20679
20646: GO 20648
20648: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20649: LD_INT 28
20651: PPUSH
20652: LD_OWVAR 2
20656: PPUSH
20657: LD_INT 2
20659: PPUSH
20660: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20664: LD_INT 30
20666: PPUSH
20667: LD_OWVAR 2
20671: PPUSH
20672: LD_INT 2
20674: PPUSH
20675: CALL_OW 322
// end ;
20679: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20680: LD_EXP 32
20684: PUSH
20685: LD_EXP 84
20689: AND
20690: IFFALSE 20811
20692: GO 20694
20694: DISABLE
20695: LD_INT 0
20697: PPUSH
20698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20699: LD_ADDR_VAR 0 2
20703: PUSH
20704: LD_INT 22
20706: PUSH
20707: LD_OWVAR 2
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: LD_INT 21
20718: PUSH
20719: LD_INT 1
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 3
20728: PUSH
20729: LD_INT 23
20731: PUSH
20732: LD_INT 0
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: LIST
20747: PPUSH
20748: CALL_OW 69
20752: ST_TO_ADDR
// if not tmp then
20753: LD_VAR 0 2
20757: NOT
20758: IFFALSE 20762
// exit ;
20760: GO 20811
// for i in tmp do
20762: LD_ADDR_VAR 0 1
20766: PUSH
20767: LD_VAR 0 2
20771: PUSH
20772: FOR_IN
20773: IFFALSE 20809
// begin if Crawls ( i ) then
20775: LD_VAR 0 1
20779: PPUSH
20780: CALL_OW 318
20784: IFFALSE 20795
// ComWalk ( i ) ;
20786: LD_VAR 0 1
20790: PPUSH
20791: CALL_OW 138
// SetClass ( i , 2 ) ;
20795: LD_VAR 0 1
20799: PPUSH
20800: LD_INT 2
20802: PPUSH
20803: CALL_OW 336
// end ;
20807: GO 20772
20809: POP
20810: POP
// end ;
20811: PPOPN 2
20813: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20814: LD_EXP 32
20818: PUSH
20819: LD_EXP 85
20823: AND
20824: IFFALSE 21112
20826: GO 20828
20828: DISABLE
20829: LD_INT 0
20831: PPUSH
20832: PPUSH
20833: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20834: LD_OWVAR 2
20838: PPUSH
20839: LD_INT 9
20841: PPUSH
20842: LD_INT 1
20844: PPUSH
20845: LD_INT 1
20847: PPUSH
20848: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20852: LD_INT 9
20854: PPUSH
20855: LD_OWVAR 2
20859: PPUSH
20860: CALL_OW 343
// uc_side := 9 ;
20864: LD_ADDR_OWVAR 20
20868: PUSH
20869: LD_INT 9
20871: ST_TO_ADDR
// uc_nation := 2 ;
20872: LD_ADDR_OWVAR 21
20876: PUSH
20877: LD_INT 2
20879: ST_TO_ADDR
// hc_name := Dark Warrior ;
20880: LD_ADDR_OWVAR 26
20884: PUSH
20885: LD_STRING Dark Warrior
20887: ST_TO_ADDR
// hc_gallery :=  ;
20888: LD_ADDR_OWVAR 33
20892: PUSH
20893: LD_STRING 
20895: ST_TO_ADDR
// hc_noskilllimit := true ;
20896: LD_ADDR_OWVAR 76
20900: PUSH
20901: LD_INT 1
20903: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20904: LD_ADDR_OWVAR 31
20908: PUSH
20909: LD_INT 30
20911: PUSH
20912: LD_INT 30
20914: PUSH
20915: LD_INT 30
20917: PUSH
20918: LD_INT 30
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: LIST
20925: LIST
20926: ST_TO_ADDR
// un := CreateHuman ;
20927: LD_ADDR_VAR 0 3
20931: PUSH
20932: CALL_OW 44
20936: ST_TO_ADDR
// hc_noskilllimit := false ;
20937: LD_ADDR_OWVAR 76
20941: PUSH
20942: LD_INT 0
20944: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20945: LD_VAR 0 3
20949: PPUSH
20950: LD_INT 1
20952: PPUSH
20953: CALL_OW 51
// ToLua ( playRanger() ) ;
20957: LD_STRING playRanger()
20959: PPUSH
20960: CALL_OW 559
// p := 0 ;
20964: LD_ADDR_VAR 0 2
20968: PUSH
20969: LD_INT 0
20971: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20972: LD_INT 35
20974: PPUSH
20975: CALL_OW 67
// p := p + 1 ;
20979: LD_ADDR_VAR 0 2
20983: PUSH
20984: LD_VAR 0 2
20988: PUSH
20989: LD_INT 1
20991: PLUS
20992: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20993: LD_VAR 0 3
20997: PPUSH
20998: CALL_OW 256
21002: PUSH
21003: LD_INT 1000
21005: LESS
21006: IFFALSE 21020
// SetLives ( un , 1000 ) ;
21008: LD_VAR 0 3
21012: PPUSH
21013: LD_INT 1000
21015: PPUSH
21016: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
21020: LD_VAR 0 3
21024: PPUSH
21025: LD_INT 81
21027: PUSH
21028: LD_OWVAR 2
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: LD_INT 91
21039: PUSH
21040: LD_VAR 0 3
21044: PUSH
21045: LD_INT 30
21047: PUSH
21048: EMPTY
21049: LIST
21050: LIST
21051: LIST
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: PPUSH
21057: CALL_OW 69
21061: PPUSH
21062: LD_VAR 0 3
21066: PPUSH
21067: CALL_OW 74
21071: PPUSH
21072: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
21076: LD_VAR 0 2
21080: PUSH
21081: LD_INT 80
21083: GREATER
21084: PUSH
21085: LD_VAR 0 3
21089: PPUSH
21090: CALL_OW 301
21094: OR
21095: IFFALSE 20972
// if un then
21097: LD_VAR 0 3
21101: IFFALSE 21112
// RemoveUnit ( un ) ;
21103: LD_VAR 0 3
21107: PPUSH
21108: CALL_OW 64
// end ;
21112: PPOPN 3
21114: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
21115: LD_EXP 86
21119: IFFALSE 21235
21121: GO 21123
21123: DISABLE
21124: LD_INT 0
21126: PPUSH
21127: PPUSH
21128: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21129: LD_ADDR_VAR 0 2
21133: PUSH
21134: LD_INT 81
21136: PUSH
21137: LD_OWVAR 2
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 21
21148: PUSH
21149: LD_INT 1
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PPUSH
21160: CALL_OW 69
21164: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21165: LD_STRING playComputer()
21167: PPUSH
21168: CALL_OW 559
// if not tmp then
21172: LD_VAR 0 2
21176: NOT
21177: IFFALSE 21181
// exit ;
21179: GO 21235
// for i in tmp do
21181: LD_ADDR_VAR 0 1
21185: PUSH
21186: LD_VAR 0 2
21190: PUSH
21191: FOR_IN
21192: IFFALSE 21233
// for j := 1 to 4 do
21194: LD_ADDR_VAR 0 3
21198: PUSH
21199: DOUBLE
21200: LD_INT 1
21202: DEC
21203: ST_TO_ADDR
21204: LD_INT 4
21206: PUSH
21207: FOR_TO
21208: IFFALSE 21229
// SetSkill ( i , j , 10 ) ;
21210: LD_VAR 0 1
21214: PPUSH
21215: LD_VAR 0 3
21219: PPUSH
21220: LD_INT 10
21222: PPUSH
21223: CALL_OW 237
21227: GO 21207
21229: POP
21230: POP
21231: GO 21191
21233: POP
21234: POP
// end ;
21235: PPOPN 3
21237: END
// every 0 0$1 trigger s30 do var i , tmp ;
21238: LD_EXP 87
21242: IFFALSE 21311
21244: GO 21246
21246: DISABLE
21247: LD_INT 0
21249: PPUSH
21250: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21251: LD_ADDR_VAR 0 2
21255: PUSH
21256: LD_INT 22
21258: PUSH
21259: LD_OWVAR 2
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PPUSH
21268: CALL_OW 69
21272: ST_TO_ADDR
// if not tmp then
21273: LD_VAR 0 2
21277: NOT
21278: IFFALSE 21282
// exit ;
21280: GO 21311
// for i in tmp do
21282: LD_ADDR_VAR 0 1
21286: PUSH
21287: LD_VAR 0 2
21291: PUSH
21292: FOR_IN
21293: IFFALSE 21309
// SetLives ( i , 300 ) ;
21295: LD_VAR 0 1
21299: PPUSH
21300: LD_INT 300
21302: PPUSH
21303: CALL_OW 234
21307: GO 21292
21309: POP
21310: POP
// end ;
21311: PPOPN 2
21313: END
// every 0 0$1 trigger s60 do var i , tmp ;
21314: LD_EXP 88
21318: IFFALSE 21387
21320: GO 21322
21322: DISABLE
21323: LD_INT 0
21325: PPUSH
21326: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21327: LD_ADDR_VAR 0 2
21331: PUSH
21332: LD_INT 22
21334: PUSH
21335: LD_OWVAR 2
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PPUSH
21344: CALL_OW 69
21348: ST_TO_ADDR
// if not tmp then
21349: LD_VAR 0 2
21353: NOT
21354: IFFALSE 21358
// exit ;
21356: GO 21387
// for i in tmp do
21358: LD_ADDR_VAR 0 1
21362: PUSH
21363: LD_VAR 0 2
21367: PUSH
21368: FOR_IN
21369: IFFALSE 21385
// SetLives ( i , 600 ) ;
21371: LD_VAR 0 1
21375: PPUSH
21376: LD_INT 600
21378: PPUSH
21379: CALL_OW 234
21383: GO 21368
21385: POP
21386: POP
// end ;
21387: PPOPN 2
21389: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21390: LD_INT 0
21392: PPUSH
// case cmd of 301 :
21393: LD_VAR 0 1
21397: PUSH
21398: LD_INT 301
21400: DOUBLE
21401: EQUAL
21402: IFTRUE 21406
21404: GO 21438
21406: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21407: LD_VAR 0 6
21411: PPUSH
21412: LD_VAR 0 7
21416: PPUSH
21417: LD_VAR 0 8
21421: PPUSH
21422: LD_VAR 0 4
21426: PPUSH
21427: LD_VAR 0 5
21431: PPUSH
21432: CALL 22647 0 5
21436: GO 21559
21438: LD_INT 302
21440: DOUBLE
21441: EQUAL
21442: IFTRUE 21446
21444: GO 21483
21446: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21447: LD_VAR 0 6
21451: PPUSH
21452: LD_VAR 0 7
21456: PPUSH
21457: LD_VAR 0 8
21461: PPUSH
21462: LD_VAR 0 9
21466: PPUSH
21467: LD_VAR 0 4
21471: PPUSH
21472: LD_VAR 0 5
21476: PPUSH
21477: CALL 22738 0 6
21481: GO 21559
21483: LD_INT 303
21485: DOUBLE
21486: EQUAL
21487: IFTRUE 21491
21489: GO 21528
21491: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21492: LD_VAR 0 6
21496: PPUSH
21497: LD_VAR 0 7
21501: PPUSH
21502: LD_VAR 0 8
21506: PPUSH
21507: LD_VAR 0 9
21511: PPUSH
21512: LD_VAR 0 4
21516: PPUSH
21517: LD_VAR 0 5
21521: PPUSH
21522: CALL 21564 0 6
21526: GO 21559
21528: LD_INT 304
21530: DOUBLE
21531: EQUAL
21532: IFTRUE 21536
21534: GO 21558
21536: POP
// hHackTeleport ( unit , x , y ) ; end ;
21537: LD_VAR 0 2
21541: PPUSH
21542: LD_VAR 0 4
21546: PPUSH
21547: LD_VAR 0 5
21551: PPUSH
21552: CALL 23331 0 3
21556: GO 21559
21558: POP
// end ;
21559: LD_VAR 0 12
21563: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21564: LD_INT 0
21566: PPUSH
21567: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21568: LD_VAR 0 1
21572: PUSH
21573: LD_INT 1
21575: LESS
21576: PUSH
21577: LD_VAR 0 1
21581: PUSH
21582: LD_INT 3
21584: GREATER
21585: OR
21586: PUSH
21587: LD_VAR 0 5
21591: PPUSH
21592: LD_VAR 0 6
21596: PPUSH
21597: CALL_OW 428
21601: OR
21602: IFFALSE 21606
// exit ;
21604: GO 22334
// uc_side := your_side ;
21606: LD_ADDR_OWVAR 20
21610: PUSH
21611: LD_OWVAR 2
21615: ST_TO_ADDR
// uc_nation := nation ;
21616: LD_ADDR_OWVAR 21
21620: PUSH
21621: LD_VAR 0 1
21625: ST_TO_ADDR
// bc_level = 1 ;
21626: LD_ADDR_OWVAR 43
21630: PUSH
21631: LD_INT 1
21633: ST_TO_ADDR
// case btype of 1 :
21634: LD_VAR 0 2
21638: PUSH
21639: LD_INT 1
21641: DOUBLE
21642: EQUAL
21643: IFTRUE 21647
21645: GO 21658
21647: POP
// bc_type := b_depot ; 2 :
21648: LD_ADDR_OWVAR 42
21652: PUSH
21653: LD_INT 0
21655: ST_TO_ADDR
21656: GO 22278
21658: LD_INT 2
21660: DOUBLE
21661: EQUAL
21662: IFTRUE 21666
21664: GO 21677
21666: POP
// bc_type := b_warehouse ; 3 :
21667: LD_ADDR_OWVAR 42
21671: PUSH
21672: LD_INT 1
21674: ST_TO_ADDR
21675: GO 22278
21677: LD_INT 3
21679: DOUBLE
21680: EQUAL
21681: IFTRUE 21685
21683: GO 21696
21685: POP
// bc_type := b_lab ; 4 .. 9 :
21686: LD_ADDR_OWVAR 42
21690: PUSH
21691: LD_INT 6
21693: ST_TO_ADDR
21694: GO 22278
21696: LD_INT 4
21698: DOUBLE
21699: GREATEREQUAL
21700: IFFALSE 21708
21702: LD_INT 9
21704: DOUBLE
21705: LESSEQUAL
21706: IFTRUE 21710
21708: GO 21770
21710: POP
// begin bc_type := b_lab_half ;
21711: LD_ADDR_OWVAR 42
21715: PUSH
21716: LD_INT 7
21718: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21719: LD_ADDR_OWVAR 44
21723: PUSH
21724: LD_INT 10
21726: PUSH
21727: LD_INT 11
21729: PUSH
21730: LD_INT 12
21732: PUSH
21733: LD_INT 15
21735: PUSH
21736: LD_INT 14
21738: PUSH
21739: LD_INT 13
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: PUSH
21750: LD_VAR 0 2
21754: PUSH
21755: LD_INT 3
21757: MINUS
21758: ARRAY
21759: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
21760: LD_ADDR_OWVAR 45
21764: PUSH
21765: LD_INT 9
21767: ST_TO_ADDR
// end ; 10 .. 13 :
21768: GO 22278
21770: LD_INT 10
21772: DOUBLE
21773: GREATEREQUAL
21774: IFFALSE 21782
21776: LD_INT 13
21778: DOUBLE
21779: LESSEQUAL
21780: IFTRUE 21784
21782: GO 21861
21784: POP
// begin bc_type := b_lab_full ;
21785: LD_ADDR_OWVAR 42
21789: PUSH
21790: LD_INT 8
21792: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21793: LD_ADDR_OWVAR 44
21797: PUSH
21798: LD_INT 10
21800: PUSH
21801: LD_INT 12
21803: PUSH
21804: LD_INT 14
21806: PUSH
21807: LD_INT 13
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: PUSH
21816: LD_VAR 0 2
21820: PUSH
21821: LD_INT 9
21823: MINUS
21824: ARRAY
21825: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21826: LD_ADDR_OWVAR 45
21830: PUSH
21831: LD_INT 11
21833: PUSH
21834: LD_INT 15
21836: PUSH
21837: LD_INT 12
21839: PUSH
21840: LD_INT 15
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: PUSH
21849: LD_VAR 0 2
21853: PUSH
21854: LD_INT 9
21856: MINUS
21857: ARRAY
21858: ST_TO_ADDR
// end ; 14 :
21859: GO 22278
21861: LD_INT 14
21863: DOUBLE
21864: EQUAL
21865: IFTRUE 21869
21867: GO 21880
21869: POP
// bc_type := b_workshop ; 15 :
21870: LD_ADDR_OWVAR 42
21874: PUSH
21875: LD_INT 2
21877: ST_TO_ADDR
21878: GO 22278
21880: LD_INT 15
21882: DOUBLE
21883: EQUAL
21884: IFTRUE 21888
21886: GO 21899
21888: POP
// bc_type := b_factory ; 16 :
21889: LD_ADDR_OWVAR 42
21893: PUSH
21894: LD_INT 3
21896: ST_TO_ADDR
21897: GO 22278
21899: LD_INT 16
21901: DOUBLE
21902: EQUAL
21903: IFTRUE 21907
21905: GO 21918
21907: POP
// bc_type := b_ext_gun ; 17 :
21908: LD_ADDR_OWVAR 42
21912: PUSH
21913: LD_INT 17
21915: ST_TO_ADDR
21916: GO 22278
21918: LD_INT 17
21920: DOUBLE
21921: EQUAL
21922: IFTRUE 21926
21924: GO 21954
21926: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21927: LD_ADDR_OWVAR 42
21931: PUSH
21932: LD_INT 19
21934: PUSH
21935: LD_INT 23
21937: PUSH
21938: LD_INT 19
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: LIST
21945: PUSH
21946: LD_VAR 0 1
21950: ARRAY
21951: ST_TO_ADDR
21952: GO 22278
21954: LD_INT 18
21956: DOUBLE
21957: EQUAL
21958: IFTRUE 21962
21960: GO 21973
21962: POP
// bc_type := b_ext_radar ; 19 :
21963: LD_ADDR_OWVAR 42
21967: PUSH
21968: LD_INT 20
21970: ST_TO_ADDR
21971: GO 22278
21973: LD_INT 19
21975: DOUBLE
21976: EQUAL
21977: IFTRUE 21981
21979: GO 21992
21981: POP
// bc_type := b_ext_radio ; 20 :
21982: LD_ADDR_OWVAR 42
21986: PUSH
21987: LD_INT 22
21989: ST_TO_ADDR
21990: GO 22278
21992: LD_INT 20
21994: DOUBLE
21995: EQUAL
21996: IFTRUE 22000
21998: GO 22011
22000: POP
// bc_type := b_ext_siberium ; 21 :
22001: LD_ADDR_OWVAR 42
22005: PUSH
22006: LD_INT 21
22008: ST_TO_ADDR
22009: GO 22278
22011: LD_INT 21
22013: DOUBLE
22014: EQUAL
22015: IFTRUE 22019
22017: GO 22030
22019: POP
// bc_type := b_ext_computer ; 22 :
22020: LD_ADDR_OWVAR 42
22024: PUSH
22025: LD_INT 24
22027: ST_TO_ADDR
22028: GO 22278
22030: LD_INT 22
22032: DOUBLE
22033: EQUAL
22034: IFTRUE 22038
22036: GO 22049
22038: POP
// bc_type := b_ext_track ; 23 :
22039: LD_ADDR_OWVAR 42
22043: PUSH
22044: LD_INT 16
22046: ST_TO_ADDR
22047: GO 22278
22049: LD_INT 23
22051: DOUBLE
22052: EQUAL
22053: IFTRUE 22057
22055: GO 22068
22057: POP
// bc_type := b_ext_laser ; 24 :
22058: LD_ADDR_OWVAR 42
22062: PUSH
22063: LD_INT 25
22065: ST_TO_ADDR
22066: GO 22278
22068: LD_INT 24
22070: DOUBLE
22071: EQUAL
22072: IFTRUE 22076
22074: GO 22087
22076: POP
// bc_type := b_control_tower ; 25 :
22077: LD_ADDR_OWVAR 42
22081: PUSH
22082: LD_INT 36
22084: ST_TO_ADDR
22085: GO 22278
22087: LD_INT 25
22089: DOUBLE
22090: EQUAL
22091: IFTRUE 22095
22093: GO 22106
22095: POP
// bc_type := b_breastwork ; 26 :
22096: LD_ADDR_OWVAR 42
22100: PUSH
22101: LD_INT 31
22103: ST_TO_ADDR
22104: GO 22278
22106: LD_INT 26
22108: DOUBLE
22109: EQUAL
22110: IFTRUE 22114
22112: GO 22125
22114: POP
// bc_type := b_bunker ; 27 :
22115: LD_ADDR_OWVAR 42
22119: PUSH
22120: LD_INT 32
22122: ST_TO_ADDR
22123: GO 22278
22125: LD_INT 27
22127: DOUBLE
22128: EQUAL
22129: IFTRUE 22133
22131: GO 22144
22133: POP
// bc_type := b_turret ; 28 :
22134: LD_ADDR_OWVAR 42
22138: PUSH
22139: LD_INT 33
22141: ST_TO_ADDR
22142: GO 22278
22144: LD_INT 28
22146: DOUBLE
22147: EQUAL
22148: IFTRUE 22152
22150: GO 22163
22152: POP
// bc_type := b_armoury ; 29 :
22153: LD_ADDR_OWVAR 42
22157: PUSH
22158: LD_INT 4
22160: ST_TO_ADDR
22161: GO 22278
22163: LD_INT 29
22165: DOUBLE
22166: EQUAL
22167: IFTRUE 22171
22169: GO 22182
22171: POP
// bc_type := b_barracks ; 30 :
22172: LD_ADDR_OWVAR 42
22176: PUSH
22177: LD_INT 5
22179: ST_TO_ADDR
22180: GO 22278
22182: LD_INT 30
22184: DOUBLE
22185: EQUAL
22186: IFTRUE 22190
22188: GO 22201
22190: POP
// bc_type := b_solar_power ; 31 :
22191: LD_ADDR_OWVAR 42
22195: PUSH
22196: LD_INT 27
22198: ST_TO_ADDR
22199: GO 22278
22201: LD_INT 31
22203: DOUBLE
22204: EQUAL
22205: IFTRUE 22209
22207: GO 22220
22209: POP
// bc_type := b_oil_power ; 32 :
22210: LD_ADDR_OWVAR 42
22214: PUSH
22215: LD_INT 26
22217: ST_TO_ADDR
22218: GO 22278
22220: LD_INT 32
22222: DOUBLE
22223: EQUAL
22224: IFTRUE 22228
22226: GO 22239
22228: POP
// bc_type := b_siberite_power ; 33 :
22229: LD_ADDR_OWVAR 42
22233: PUSH
22234: LD_INT 28
22236: ST_TO_ADDR
22237: GO 22278
22239: LD_INT 33
22241: DOUBLE
22242: EQUAL
22243: IFTRUE 22247
22245: GO 22258
22247: POP
// bc_type := b_oil_mine ; 34 :
22248: LD_ADDR_OWVAR 42
22252: PUSH
22253: LD_INT 29
22255: ST_TO_ADDR
22256: GO 22278
22258: LD_INT 34
22260: DOUBLE
22261: EQUAL
22262: IFTRUE 22266
22264: GO 22277
22266: POP
// bc_type := b_siberite_mine ; end ;
22267: LD_ADDR_OWVAR 42
22271: PUSH
22272: LD_INT 30
22274: ST_TO_ADDR
22275: GO 22278
22277: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22278: LD_ADDR_VAR 0 8
22282: PUSH
22283: LD_VAR 0 5
22287: PPUSH
22288: LD_VAR 0 6
22292: PPUSH
22293: LD_VAR 0 3
22297: PPUSH
22298: CALL_OW 47
22302: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22303: LD_OWVAR 42
22307: PUSH
22308: LD_INT 32
22310: PUSH
22311: LD_INT 33
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: IN
22318: IFFALSE 22334
// PlaceWeaponTurret ( b , weapon ) ;
22320: LD_VAR 0 8
22324: PPUSH
22325: LD_VAR 0 4
22329: PPUSH
22330: CALL_OW 431
// end ;
22334: LD_VAR 0 7
22338: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22339: LD_INT 0
22341: PPUSH
22342: PPUSH
22343: PPUSH
22344: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22345: LD_ADDR_VAR 0 4
22349: PUSH
22350: LD_INT 22
22352: PUSH
22353: LD_OWVAR 2
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 2
22364: PUSH
22365: LD_INT 30
22367: PUSH
22368: LD_INT 0
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: PUSH
22375: LD_INT 30
22377: PUSH
22378: LD_INT 1
22380: PUSH
22381: EMPTY
22382: LIST
22383: LIST
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: LIST
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PPUSH
22394: CALL_OW 69
22398: ST_TO_ADDR
// if not tmp then
22399: LD_VAR 0 4
22403: NOT
22404: IFFALSE 22408
// exit ;
22406: GO 22467
// for i in tmp do
22408: LD_ADDR_VAR 0 2
22412: PUSH
22413: LD_VAR 0 4
22417: PUSH
22418: FOR_IN
22419: IFFALSE 22465
// for j = 1 to 3 do
22421: LD_ADDR_VAR 0 3
22425: PUSH
22426: DOUBLE
22427: LD_INT 1
22429: DEC
22430: ST_TO_ADDR
22431: LD_INT 3
22433: PUSH
22434: FOR_TO
22435: IFFALSE 22461
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22437: LD_VAR 0 2
22441: PPUSH
22442: CALL_OW 274
22446: PPUSH
22447: LD_VAR 0 3
22451: PPUSH
22452: LD_INT 99999
22454: PPUSH
22455: CALL_OW 277
22459: GO 22434
22461: POP
22462: POP
22463: GO 22418
22465: POP
22466: POP
// end ;
22467: LD_VAR 0 1
22471: RET
// export function hHackSetLevel10 ; var i , j ; begin
22472: LD_INT 0
22474: PPUSH
22475: PPUSH
22476: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22477: LD_ADDR_VAR 0 2
22481: PUSH
22482: LD_INT 21
22484: PUSH
22485: LD_INT 1
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PPUSH
22492: CALL_OW 69
22496: PUSH
22497: FOR_IN
22498: IFFALSE 22550
// if IsSelected ( i ) then
22500: LD_VAR 0 2
22504: PPUSH
22505: CALL_OW 306
22509: IFFALSE 22548
// begin for j := 1 to 4 do
22511: LD_ADDR_VAR 0 3
22515: PUSH
22516: DOUBLE
22517: LD_INT 1
22519: DEC
22520: ST_TO_ADDR
22521: LD_INT 4
22523: PUSH
22524: FOR_TO
22525: IFFALSE 22546
// SetSkill ( i , j , 10 ) ;
22527: LD_VAR 0 2
22531: PPUSH
22532: LD_VAR 0 3
22536: PPUSH
22537: LD_INT 10
22539: PPUSH
22540: CALL_OW 237
22544: GO 22524
22546: POP
22547: POP
// end ;
22548: GO 22497
22550: POP
22551: POP
// end ;
22552: LD_VAR 0 1
22556: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22557: LD_INT 0
22559: PPUSH
22560: PPUSH
22561: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22562: LD_ADDR_VAR 0 2
22566: PUSH
22567: LD_INT 22
22569: PUSH
22570: LD_OWVAR 2
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 21
22581: PUSH
22582: LD_INT 1
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PPUSH
22593: CALL_OW 69
22597: PUSH
22598: FOR_IN
22599: IFFALSE 22640
// begin for j := 1 to 4 do
22601: LD_ADDR_VAR 0 3
22605: PUSH
22606: DOUBLE
22607: LD_INT 1
22609: DEC
22610: ST_TO_ADDR
22611: LD_INT 4
22613: PUSH
22614: FOR_TO
22615: IFFALSE 22636
// SetSkill ( i , j , 10 ) ;
22617: LD_VAR 0 2
22621: PPUSH
22622: LD_VAR 0 3
22626: PPUSH
22627: LD_INT 10
22629: PPUSH
22630: CALL_OW 237
22634: GO 22614
22636: POP
22637: POP
// end ;
22638: GO 22598
22640: POP
22641: POP
// end ;
22642: LD_VAR 0 1
22646: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22647: LD_INT 0
22649: PPUSH
// uc_side := your_side ;
22650: LD_ADDR_OWVAR 20
22654: PUSH
22655: LD_OWVAR 2
22659: ST_TO_ADDR
// uc_nation := nation ;
22660: LD_ADDR_OWVAR 21
22664: PUSH
22665: LD_VAR 0 1
22669: ST_TO_ADDR
// InitHc ;
22670: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22674: LD_INT 0
22676: PPUSH
22677: LD_VAR 0 2
22681: PPUSH
22682: LD_VAR 0 3
22686: PPUSH
22687: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22691: LD_VAR 0 4
22695: PPUSH
22696: LD_VAR 0 5
22700: PPUSH
22701: CALL_OW 428
22705: PUSH
22706: LD_INT 0
22708: EQUAL
22709: IFFALSE 22733
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22711: CALL_OW 44
22715: PPUSH
22716: LD_VAR 0 4
22720: PPUSH
22721: LD_VAR 0 5
22725: PPUSH
22726: LD_INT 1
22728: PPUSH
22729: CALL_OW 48
// end ;
22733: LD_VAR 0 6
22737: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22738: LD_INT 0
22740: PPUSH
22741: PPUSH
// uc_side := your_side ;
22742: LD_ADDR_OWVAR 20
22746: PUSH
22747: LD_OWVAR 2
22751: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22752: LD_VAR 0 1
22756: PUSH
22757: LD_INT 1
22759: PUSH
22760: LD_INT 2
22762: PUSH
22763: LD_INT 3
22765: PUSH
22766: LD_INT 4
22768: PUSH
22769: LD_INT 5
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: IN
22779: IFFALSE 22791
// uc_nation := nation_american else
22781: LD_ADDR_OWVAR 21
22785: PUSH
22786: LD_INT 1
22788: ST_TO_ADDR
22789: GO 22834
// if chassis in [ 11 , 12 , 13 , 14 ] then
22791: LD_VAR 0 1
22795: PUSH
22796: LD_INT 11
22798: PUSH
22799: LD_INT 12
22801: PUSH
22802: LD_INT 13
22804: PUSH
22805: LD_INT 14
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: IN
22814: IFFALSE 22826
// uc_nation := nation_arabian else
22816: LD_ADDR_OWVAR 21
22820: PUSH
22821: LD_INT 2
22823: ST_TO_ADDR
22824: GO 22834
// uc_nation := nation_russian ;
22826: LD_ADDR_OWVAR 21
22830: PUSH
22831: LD_INT 3
22833: ST_TO_ADDR
// vc_chassis := chassis ;
22834: LD_ADDR_OWVAR 37
22838: PUSH
22839: LD_VAR 0 1
22843: ST_TO_ADDR
// vc_engine := engine ;
22844: LD_ADDR_OWVAR 39
22848: PUSH
22849: LD_VAR 0 2
22853: ST_TO_ADDR
// vc_control := control ;
22854: LD_ADDR_OWVAR 38
22858: PUSH
22859: LD_VAR 0 3
22863: ST_TO_ADDR
// vc_weapon := weapon ;
22864: LD_ADDR_OWVAR 40
22868: PUSH
22869: LD_VAR 0 4
22873: ST_TO_ADDR
// un := CreateVehicle ;
22874: LD_ADDR_VAR 0 8
22878: PUSH
22879: CALL_OW 45
22883: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22884: LD_VAR 0 8
22888: PPUSH
22889: LD_INT 0
22891: PPUSH
22892: LD_INT 5
22894: PPUSH
22895: CALL_OW 12
22899: PPUSH
22900: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22904: LD_VAR 0 8
22908: PPUSH
22909: LD_VAR 0 5
22913: PPUSH
22914: LD_VAR 0 6
22918: PPUSH
22919: LD_INT 1
22921: PPUSH
22922: CALL_OW 48
// end ;
22926: LD_VAR 0 7
22930: RET
// export hInvincible ; every 1 do
22931: GO 22933
22933: DISABLE
// hInvincible := [ ] ;
22934: LD_ADDR_EXP 89
22938: PUSH
22939: EMPTY
22940: ST_TO_ADDR
22941: END
// every 10 do var i ;
22942: GO 22944
22944: DISABLE
22945: LD_INT 0
22947: PPUSH
// begin enable ;
22948: ENABLE
// if not hInvincible then
22949: LD_EXP 89
22953: NOT
22954: IFFALSE 22958
// exit ;
22956: GO 23002
// for i in hInvincible do
22958: LD_ADDR_VAR 0 1
22962: PUSH
22963: LD_EXP 89
22967: PUSH
22968: FOR_IN
22969: IFFALSE 23000
// if GetLives ( i ) < 1000 then
22971: LD_VAR 0 1
22975: PPUSH
22976: CALL_OW 256
22980: PUSH
22981: LD_INT 1000
22983: LESS
22984: IFFALSE 22998
// SetLives ( i , 1000 ) ;
22986: LD_VAR 0 1
22990: PPUSH
22991: LD_INT 1000
22993: PPUSH
22994: CALL_OW 234
22998: GO 22968
23000: POP
23001: POP
// end ;
23002: PPOPN 1
23004: END
// export function hHackInvincible ; var i ; begin
23005: LD_INT 0
23007: PPUSH
23008: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
23009: LD_ADDR_VAR 0 2
23013: PUSH
23014: LD_INT 2
23016: PUSH
23017: LD_INT 21
23019: PUSH
23020: LD_INT 1
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 21
23029: PUSH
23030: LD_INT 2
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: LIST
23041: PPUSH
23042: CALL_OW 69
23046: PUSH
23047: FOR_IN
23048: IFFALSE 23109
// if IsSelected ( i ) then
23050: LD_VAR 0 2
23054: PPUSH
23055: CALL_OW 306
23059: IFFALSE 23107
// begin if i in hInvincible then
23061: LD_VAR 0 2
23065: PUSH
23066: LD_EXP 89
23070: IN
23071: IFFALSE 23091
// hInvincible := hInvincible diff i else
23073: LD_ADDR_EXP 89
23077: PUSH
23078: LD_EXP 89
23082: PUSH
23083: LD_VAR 0 2
23087: DIFF
23088: ST_TO_ADDR
23089: GO 23107
// hInvincible := hInvincible union i ;
23091: LD_ADDR_EXP 89
23095: PUSH
23096: LD_EXP 89
23100: PUSH
23101: LD_VAR 0 2
23105: UNION
23106: ST_TO_ADDR
// end ;
23107: GO 23047
23109: POP
23110: POP
// end ;
23111: LD_VAR 0 1
23115: RET
// export function hHackInvisible ; var i , j ; begin
23116: LD_INT 0
23118: PPUSH
23119: PPUSH
23120: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23121: LD_ADDR_VAR 0 2
23125: PUSH
23126: LD_INT 21
23128: PUSH
23129: LD_INT 1
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PPUSH
23136: CALL_OW 69
23140: PUSH
23141: FOR_IN
23142: IFFALSE 23166
// if IsSelected ( i ) then
23144: LD_VAR 0 2
23148: PPUSH
23149: CALL_OW 306
23153: IFFALSE 23164
// ComForceInvisible ( i ) ;
23155: LD_VAR 0 2
23159: PPUSH
23160: CALL_OW 496
23164: GO 23141
23166: POP
23167: POP
// end ;
23168: LD_VAR 0 1
23172: RET
// export function hHackChangeYourSide ; begin
23173: LD_INT 0
23175: PPUSH
// if your_side = 8 then
23176: LD_OWVAR 2
23180: PUSH
23181: LD_INT 8
23183: EQUAL
23184: IFFALSE 23196
// your_side := 0 else
23186: LD_ADDR_OWVAR 2
23190: PUSH
23191: LD_INT 0
23193: ST_TO_ADDR
23194: GO 23210
// your_side := your_side + 1 ;
23196: LD_ADDR_OWVAR 2
23200: PUSH
23201: LD_OWVAR 2
23205: PUSH
23206: LD_INT 1
23208: PLUS
23209: ST_TO_ADDR
// end ;
23210: LD_VAR 0 1
23214: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23215: LD_INT 0
23217: PPUSH
23218: PPUSH
23219: PPUSH
// for i in all_units do
23220: LD_ADDR_VAR 0 2
23224: PUSH
23225: LD_OWVAR 3
23229: PUSH
23230: FOR_IN
23231: IFFALSE 23309
// if IsSelected ( i ) then
23233: LD_VAR 0 2
23237: PPUSH
23238: CALL_OW 306
23242: IFFALSE 23307
// begin j := GetSide ( i ) ;
23244: LD_ADDR_VAR 0 3
23248: PUSH
23249: LD_VAR 0 2
23253: PPUSH
23254: CALL_OW 255
23258: ST_TO_ADDR
// if j = 8 then
23259: LD_VAR 0 3
23263: PUSH
23264: LD_INT 8
23266: EQUAL
23267: IFFALSE 23279
// j := 0 else
23269: LD_ADDR_VAR 0 3
23273: PUSH
23274: LD_INT 0
23276: ST_TO_ADDR
23277: GO 23293
// j := j + 1 ;
23279: LD_ADDR_VAR 0 3
23283: PUSH
23284: LD_VAR 0 3
23288: PUSH
23289: LD_INT 1
23291: PLUS
23292: ST_TO_ADDR
// SetSide ( i , j ) ;
23293: LD_VAR 0 2
23297: PPUSH
23298: LD_VAR 0 3
23302: PPUSH
23303: CALL_OW 235
// end ;
23307: GO 23230
23309: POP
23310: POP
// end ;
23311: LD_VAR 0 1
23315: RET
// export function hHackFog ; begin
23316: LD_INT 0
23318: PPUSH
// FogOff ( true ) ;
23319: LD_INT 1
23321: PPUSH
23322: CALL_OW 344
// end ;
23326: LD_VAR 0 1
23330: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23331: LD_INT 0
23333: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23334: LD_VAR 0 1
23338: PPUSH
23339: LD_VAR 0 2
23343: PPUSH
23344: LD_VAR 0 3
23348: PPUSH
23349: LD_INT 1
23351: PPUSH
23352: LD_INT 1
23354: PPUSH
23355: CALL_OW 483
// CenterOnXY ( x , y ) ;
23359: LD_VAR 0 2
23363: PPUSH
23364: LD_VAR 0 3
23368: PPUSH
23369: CALL_OW 84
// end ;
23373: LD_VAR 0 4
23377: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23378: LD_INT 0
23380: PPUSH
23381: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23382: LD_VAR 0 1
23386: NOT
23387: PUSH
23388: LD_VAR 0 2
23392: PPUSH
23393: LD_VAR 0 3
23397: PPUSH
23398: CALL_OW 488
23402: NOT
23403: OR
23404: PUSH
23405: LD_VAR 0 1
23409: PPUSH
23410: CALL_OW 266
23414: PUSH
23415: LD_INT 3
23417: NONEQUAL
23418: PUSH
23419: LD_VAR 0 1
23423: PPUSH
23424: CALL_OW 247
23428: PUSH
23429: LD_INT 1
23431: EQUAL
23432: NOT
23433: AND
23434: OR
23435: IFFALSE 23439
// exit ;
23437: GO 23721
// if GetType ( factory ) = unit_human then
23439: LD_VAR 0 1
23443: PPUSH
23444: CALL_OW 247
23448: PUSH
23449: LD_INT 1
23451: EQUAL
23452: IFFALSE 23469
// factory := IsInUnit ( factory ) ;
23454: LD_ADDR_VAR 0 1
23458: PUSH
23459: LD_VAR 0 1
23463: PPUSH
23464: CALL_OW 310
23468: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23469: LD_VAR 0 1
23473: PPUSH
23474: CALL_OW 266
23478: PUSH
23479: LD_INT 3
23481: NONEQUAL
23482: IFFALSE 23486
// exit ;
23484: GO 23721
// for i := 1 to Count ( factoryWaypoints ) do
23486: LD_ADDR_VAR 0 5
23490: PUSH
23491: DOUBLE
23492: LD_INT 1
23494: DEC
23495: ST_TO_ADDR
23496: LD_EXP 90
23500: PPUSH
23501: CALL 32367 0 1
23505: PUSH
23506: FOR_TO
23507: IFFALSE 23669
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
23509: LD_VAR 0 2
23513: PPUSH
23514: LD_VAR 0 3
23518: PPUSH
23519: CALL_OW 428
23523: PUSH
23524: LD_EXP 90
23528: PUSH
23529: LD_VAR 0 5
23533: ARRAY
23534: PUSH
23535: LD_INT 2
23537: ARRAY
23538: EQUAL
23539: IFFALSE 23571
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
23541: LD_ADDR_EXP 90
23545: PUSH
23546: LD_EXP 90
23550: PPUSH
23551: LD_VAR 0 5
23555: PPUSH
23556: CALL_OW 3
23560: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23561: CALL 23726 0 0
// exit ;
23565: POP
23566: POP
23567: GO 23721
// end else
23569: GO 23667
// if factory = factoryWaypoints [ i ] [ 2 ] then
23571: LD_VAR 0 1
23575: PUSH
23576: LD_EXP 90
23580: PUSH
23581: LD_VAR 0 5
23585: ARRAY
23586: PUSH
23587: LD_INT 2
23589: ARRAY
23590: EQUAL
23591: IFFALSE 23667
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
23593: LD_ADDR_EXP 90
23597: PUSH
23598: LD_EXP 90
23602: PPUSH
23603: LD_VAR 0 5
23607: PPUSH
23608: CALL_OW 3
23612: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
23613: LD_ADDR_EXP 90
23617: PUSH
23618: LD_EXP 90
23622: PPUSH
23623: LD_VAR 0 1
23627: PPUSH
23628: CALL_OW 255
23632: PUSH
23633: LD_VAR 0 1
23637: PUSH
23638: LD_VAR 0 2
23642: PUSH
23643: LD_VAR 0 3
23647: PUSH
23648: EMPTY
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: PPUSH
23654: CALL 67976 0 2
23658: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23659: CALL 23726 0 0
// exit ;
23663: POP
23664: POP
23665: GO 23721
// end ; end ;
23667: GO 23506
23669: POP
23670: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
23671: LD_ADDR_EXP 90
23675: PUSH
23676: LD_EXP 90
23680: PPUSH
23681: LD_VAR 0 1
23685: PPUSH
23686: CALL_OW 255
23690: PUSH
23691: LD_VAR 0 1
23695: PUSH
23696: LD_VAR 0 2
23700: PUSH
23701: LD_VAR 0 3
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: PPUSH
23712: CALL 67976 0 2
23716: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23717: CALL 23726 0 0
// end ;
23721: LD_VAR 0 4
23725: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
23726: LD_INT 0
23728: PPUSH
23729: PPUSH
23730: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
23731: LD_STRING resetFactoryWaypoint();
23733: PPUSH
23734: CALL_OW 559
// if factoryWaypoints then
23738: LD_EXP 90
23742: IFFALSE 23863
// begin list := factoryWaypoints ;
23744: LD_ADDR_VAR 0 3
23748: PUSH
23749: LD_EXP 90
23753: ST_TO_ADDR
// for i := 1 to list do
23754: LD_ADDR_VAR 0 2
23758: PUSH
23759: DOUBLE
23760: LD_INT 1
23762: DEC
23763: ST_TO_ADDR
23764: LD_VAR 0 3
23768: PUSH
23769: FOR_TO
23770: IFFALSE 23861
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23772: LD_STRING setFactoryWaypointXY(
23774: PUSH
23775: LD_VAR 0 3
23779: PUSH
23780: LD_VAR 0 2
23784: ARRAY
23785: PUSH
23786: LD_INT 1
23788: ARRAY
23789: STR
23790: PUSH
23791: LD_STRING ,
23793: STR
23794: PUSH
23795: LD_VAR 0 3
23799: PUSH
23800: LD_VAR 0 2
23804: ARRAY
23805: PUSH
23806: LD_INT 2
23808: ARRAY
23809: STR
23810: PUSH
23811: LD_STRING ,
23813: STR
23814: PUSH
23815: LD_VAR 0 3
23819: PUSH
23820: LD_VAR 0 2
23824: ARRAY
23825: PUSH
23826: LD_INT 3
23828: ARRAY
23829: STR
23830: PUSH
23831: LD_STRING ,
23833: STR
23834: PUSH
23835: LD_VAR 0 3
23839: PUSH
23840: LD_VAR 0 2
23844: ARRAY
23845: PUSH
23846: LD_INT 4
23848: ARRAY
23849: STR
23850: PUSH
23851: LD_STRING )
23853: STR
23854: PPUSH
23855: CALL_OW 559
23859: GO 23769
23861: POP
23862: POP
// end ; end ;
23863: LD_VAR 0 1
23867: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23868: LD_INT 0
23870: PPUSH
// if HexInfo ( x , y ) = warehouse then
23871: LD_VAR 0 2
23875: PPUSH
23876: LD_VAR 0 3
23880: PPUSH
23881: CALL_OW 428
23885: PUSH
23886: LD_VAR 0 1
23890: EQUAL
23891: IFFALSE 23918
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23893: LD_ADDR_EXP 92
23897: PUSH
23898: LD_EXP 92
23902: PPUSH
23903: LD_VAR 0 1
23907: PPUSH
23908: LD_INT 0
23910: PPUSH
23911: CALL_OW 1
23915: ST_TO_ADDR
23916: GO 23969
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23918: LD_ADDR_EXP 92
23922: PUSH
23923: LD_EXP 92
23927: PPUSH
23928: LD_VAR 0 1
23932: PPUSH
23933: LD_VAR 0 1
23937: PPUSH
23938: CALL_OW 255
23942: PUSH
23943: LD_VAR 0 1
23947: PUSH
23948: LD_VAR 0 2
23952: PUSH
23953: LD_VAR 0 3
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: PPUSH
23964: CALL_OW 1
23968: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23969: CALL 23978 0 0
// end ;
23973: LD_VAR 0 4
23977: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23978: LD_INT 0
23980: PPUSH
23981: PPUSH
23982: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23983: LD_STRING resetWarehouseGatheringPoints();
23985: PPUSH
23986: CALL_OW 559
// if warehouseGatheringPoints then
23990: LD_EXP 92
23994: IFFALSE 24120
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23996: LD_ADDR_VAR 0 3
24000: PUSH
24001: LD_EXP 92
24005: PPUSH
24006: CALL 71744 0 1
24010: ST_TO_ADDR
// for i := 1 to list do
24011: LD_ADDR_VAR 0 2
24015: PUSH
24016: DOUBLE
24017: LD_INT 1
24019: DEC
24020: ST_TO_ADDR
24021: LD_VAR 0 3
24025: PUSH
24026: FOR_TO
24027: IFFALSE 24118
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
24029: LD_STRING setWarehouseGatheringPointXY(
24031: PUSH
24032: LD_VAR 0 3
24036: PUSH
24037: LD_VAR 0 2
24041: ARRAY
24042: PUSH
24043: LD_INT 1
24045: ARRAY
24046: STR
24047: PUSH
24048: LD_STRING ,
24050: STR
24051: PUSH
24052: LD_VAR 0 3
24056: PUSH
24057: LD_VAR 0 2
24061: ARRAY
24062: PUSH
24063: LD_INT 2
24065: ARRAY
24066: STR
24067: PUSH
24068: LD_STRING ,
24070: STR
24071: PUSH
24072: LD_VAR 0 3
24076: PUSH
24077: LD_VAR 0 2
24081: ARRAY
24082: PUSH
24083: LD_INT 3
24085: ARRAY
24086: STR
24087: PUSH
24088: LD_STRING ,
24090: STR
24091: PUSH
24092: LD_VAR 0 3
24096: PUSH
24097: LD_VAR 0 2
24101: ARRAY
24102: PUSH
24103: LD_INT 4
24105: ARRAY
24106: STR
24107: PUSH
24108: LD_STRING )
24110: STR
24111: PPUSH
24112: CALL_OW 559
24116: GO 24026
24118: POP
24119: POP
// end ; end ;
24120: LD_VAR 0 1
24124: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
24125: LD_EXP 92
24129: IFFALSE 24814
24131: GO 24133
24133: DISABLE
24134: LD_INT 0
24136: PPUSH
24137: PPUSH
24138: PPUSH
24139: PPUSH
24140: PPUSH
24141: PPUSH
24142: PPUSH
24143: PPUSH
24144: PPUSH
// begin enable ;
24145: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
24146: LD_ADDR_VAR 0 3
24150: PUSH
24151: LD_EXP 92
24155: PPUSH
24156: CALL 71744 0 1
24160: ST_TO_ADDR
// if not list then
24161: LD_VAR 0 3
24165: NOT
24166: IFFALSE 24170
// exit ;
24168: GO 24814
// for i := 1 to list do
24170: LD_ADDR_VAR 0 1
24174: PUSH
24175: DOUBLE
24176: LD_INT 1
24178: DEC
24179: ST_TO_ADDR
24180: LD_VAR 0 3
24184: PUSH
24185: FOR_TO
24186: IFFALSE 24812
// begin depot := list [ i ] [ 2 ] ;
24188: LD_ADDR_VAR 0 8
24192: PUSH
24193: LD_VAR 0 3
24197: PUSH
24198: LD_VAR 0 1
24202: ARRAY
24203: PUSH
24204: LD_INT 2
24206: ARRAY
24207: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
24208: LD_ADDR_VAR 0 5
24212: PUSH
24213: LD_VAR 0 3
24217: PUSH
24218: LD_VAR 0 1
24222: ARRAY
24223: PUSH
24224: LD_INT 1
24226: ARRAY
24227: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
24228: LD_VAR 0 8
24232: PPUSH
24233: CALL_OW 301
24237: PUSH
24238: LD_VAR 0 5
24242: PUSH
24243: LD_VAR 0 8
24247: PPUSH
24248: CALL_OW 255
24252: NONEQUAL
24253: OR
24254: IFFALSE 24283
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
24256: LD_ADDR_EXP 92
24260: PUSH
24261: LD_EXP 92
24265: PPUSH
24266: LD_VAR 0 8
24270: PPUSH
24271: LD_INT 0
24273: PPUSH
24274: CALL_OW 1
24278: ST_TO_ADDR
// exit ;
24279: POP
24280: POP
24281: GO 24814
// end ; x := list [ i ] [ 3 ] ;
24283: LD_ADDR_VAR 0 6
24287: PUSH
24288: LD_VAR 0 3
24292: PUSH
24293: LD_VAR 0 1
24297: ARRAY
24298: PUSH
24299: LD_INT 3
24301: ARRAY
24302: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24303: LD_ADDR_VAR 0 7
24307: PUSH
24308: LD_VAR 0 3
24312: PUSH
24313: LD_VAR 0 1
24317: ARRAY
24318: PUSH
24319: LD_INT 4
24321: ARRAY
24322: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24323: LD_ADDR_VAR 0 9
24327: PUSH
24328: LD_VAR 0 6
24332: PPUSH
24333: LD_VAR 0 7
24337: PPUSH
24338: LD_INT 16
24340: PPUSH
24341: CALL 70328 0 3
24345: ST_TO_ADDR
// if not cratesNearbyPoint then
24346: LD_VAR 0 9
24350: NOT
24351: IFFALSE 24357
// exit ;
24353: POP
24354: POP
24355: GO 24814
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24357: LD_ADDR_VAR 0 4
24361: PUSH
24362: LD_INT 22
24364: PUSH
24365: LD_VAR 0 5
24369: PUSH
24370: EMPTY
24371: LIST
24372: LIST
24373: PUSH
24374: LD_INT 3
24376: PUSH
24377: LD_INT 60
24379: PUSH
24380: EMPTY
24381: LIST
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 91
24389: PUSH
24390: LD_VAR 0 8
24394: PUSH
24395: LD_INT 6
24397: PUSH
24398: EMPTY
24399: LIST
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 2
24405: PUSH
24406: LD_INT 25
24408: PUSH
24409: LD_INT 2
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 25
24418: PUSH
24419: LD_INT 16
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: LIST
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: PPUSH
24437: CALL_OW 69
24441: PUSH
24442: LD_VAR 0 8
24446: PPUSH
24447: CALL_OW 313
24451: PPUSH
24452: LD_INT 3
24454: PUSH
24455: LD_INT 60
24457: PUSH
24458: EMPTY
24459: LIST
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: LD_INT 2
24467: PUSH
24468: LD_INT 25
24470: PUSH
24471: LD_INT 2
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 25
24480: PUSH
24481: LD_INT 16
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: LIST
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PPUSH
24497: CALL_OW 72
24501: UNION
24502: ST_TO_ADDR
// if tmp then
24503: LD_VAR 0 4
24507: IFFALSE 24587
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24509: LD_ADDR_VAR 0 4
24513: PUSH
24514: LD_VAR 0 4
24518: PPUSH
24519: LD_INT 3
24521: PPUSH
24522: CALL 68291 0 2
24526: ST_TO_ADDR
// for j in tmp do
24527: LD_ADDR_VAR 0 2
24531: PUSH
24532: LD_VAR 0 4
24536: PUSH
24537: FOR_IN
24538: IFFALSE 24581
// begin if IsInUnit ( j ) then
24540: LD_VAR 0 2
24544: PPUSH
24545: CALL_OW 310
24549: IFFALSE 24560
// ComExit ( j ) ;
24551: LD_VAR 0 2
24555: PPUSH
24556: CALL 68374 0 1
// AddComCollect ( j , x , y ) ;
24560: LD_VAR 0 2
24564: PPUSH
24565: LD_VAR 0 6
24569: PPUSH
24570: LD_VAR 0 7
24574: PPUSH
24575: CALL_OW 177
// end ;
24579: GO 24537
24581: POP
24582: POP
// exit ;
24583: POP
24584: POP
24585: GO 24814
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24587: LD_ADDR_VAR 0 4
24591: PUSH
24592: LD_INT 22
24594: PUSH
24595: LD_VAR 0 5
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 91
24606: PUSH
24607: LD_VAR 0 8
24611: PUSH
24612: LD_INT 8
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 2
24622: PUSH
24623: LD_INT 34
24625: PUSH
24626: LD_INT 12
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 34
24635: PUSH
24636: LD_INT 51
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 34
24645: PUSH
24646: LD_INT 32
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: PUSH
24653: LD_INT 34
24655: PUSH
24656: LD_INT 89
24658: PUSH
24659: EMPTY
24660: LIST
24661: LIST
24662: PUSH
24663: EMPTY
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: LIST
24674: PPUSH
24675: CALL_OW 69
24679: ST_TO_ADDR
// if tmp then
24680: LD_VAR 0 4
24684: IFFALSE 24810
// begin for j in tmp do
24686: LD_ADDR_VAR 0 2
24690: PUSH
24691: LD_VAR 0 4
24695: PUSH
24696: FOR_IN
24697: IFFALSE 24808
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
24699: LD_VAR 0 2
24703: PPUSH
24704: CALL_OW 262
24708: PUSH
24709: LD_INT 3
24711: EQUAL
24712: PUSH
24713: LD_VAR 0 2
24717: PPUSH
24718: CALL_OW 261
24722: PUSH
24723: LD_INT 20
24725: GREATER
24726: OR
24727: PUSH
24728: LD_VAR 0 2
24732: PPUSH
24733: CALL_OW 314
24737: NOT
24738: AND
24739: PUSH
24740: LD_VAR 0 2
24744: PPUSH
24745: CALL_OW 263
24749: PUSH
24750: LD_INT 1
24752: NONEQUAL
24753: PUSH
24754: LD_VAR 0 2
24758: PPUSH
24759: CALL_OW 311
24763: OR
24764: AND
24765: IFFALSE 24806
// begin ComCollect ( j , x , y ) ;
24767: LD_VAR 0 2
24771: PPUSH
24772: LD_VAR 0 6
24776: PPUSH
24777: LD_VAR 0 7
24781: PPUSH
24782: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
24786: LD_VAR 0 2
24790: PPUSH
24791: LD_VAR 0 8
24795: PPUSH
24796: CALL_OW 172
// exit ;
24800: POP
24801: POP
24802: POP
24803: POP
24804: GO 24814
// end ;
24806: GO 24696
24808: POP
24809: POP
// end ; end ;
24810: GO 24185
24812: POP
24813: POP
// end ; end_of_file
24814: PPOPN 9
24816: END
// export function SOS_UnitDestroyed ( un ) ; begin
24817: LD_INT 0
24819: PPUSH
// ComRadiation ( un ) ;
24820: LD_VAR 0 1
24824: PPUSH
24825: CALL 25886 0 1
// end ;
24829: LD_VAR 0 2
24833: RET
// export function SOS_UnitKamikazed ( un ) ; begin
24834: LD_INT 0
24836: PPUSH
// ComRadiation ( un ) ;
24837: LD_VAR 0 1
24841: PPUSH
24842: CALL 25886 0 1
// end ;
24846: LD_VAR 0 2
24850: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24851: LD_INT 0
24853: PPUSH
// end ;
24854: LD_VAR 0 4
24858: RET
// export function SOS_Command ( cmd ) ; begin
24859: LD_INT 0
24861: PPUSH
// end ;
24862: LD_VAR 0 2
24866: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24867: LD_INT 0
24869: PPUSH
// end ;
24870: LD_VAR 0 6
24874: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
24875: LD_INT 0
24877: PPUSH
24878: PPUSH
24879: PPUSH
24880: PPUSH
// if not vehicle or not factory then
24881: LD_VAR 0 1
24885: NOT
24886: PUSH
24887: LD_VAR 0 2
24891: NOT
24892: OR
24893: IFFALSE 24897
// exit ;
24895: GO 25477
// if not factoryWaypoints then
24897: LD_EXP 90
24901: NOT
24902: IFFALSE 24906
// exit ;
24904: GO 25477
// for i := 1 to Count ( factoryWaypoints ) do
24906: LD_ADDR_VAR 0 4
24910: PUSH
24911: DOUBLE
24912: LD_INT 1
24914: DEC
24915: ST_TO_ADDR
24916: LD_EXP 90
24920: PPUSH
24921: CALL 32367 0 1
24925: PUSH
24926: FOR_TO
24927: IFFALSE 25475
// if factoryWaypoints [ i ] [ 2 ] = factory then
24929: LD_EXP 90
24933: PUSH
24934: LD_VAR 0 4
24938: ARRAY
24939: PUSH
24940: LD_INT 2
24942: ARRAY
24943: PUSH
24944: LD_VAR 0 2
24948: EQUAL
24949: IFFALSE 25473
// begin if GetControl ( vehicle ) = control_manual then
24951: LD_VAR 0 1
24955: PPUSH
24956: CALL_OW 263
24960: PUSH
24961: LD_INT 1
24963: EQUAL
24964: IFFALSE 25326
// begin driver := IsDrivenBy ( vehicle ) ;
24966: LD_ADDR_VAR 0 5
24970: PUSH
24971: LD_VAR 0 1
24975: PPUSH
24976: CALL_OW 311
24980: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
24981: LD_VAR 0 5
24985: PUSH
24986: LD_EXP 91
24990: IN
24991: PUSH
24992: LD_VAR 0 1
24996: PUSH
24997: LD_EXP 91
25001: IN
25002: OR
25003: IFFALSE 25009
// exit ;
25005: POP
25006: POP
25007: GO 25477
// if not HasTask ( driver ) then
25009: LD_VAR 0 5
25013: PPUSH
25014: CALL_OW 314
25018: NOT
25019: IFFALSE 25324
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
25021: LD_ADDR_EXP 91
25025: PUSH
25026: LD_EXP 91
25030: PPUSH
25031: LD_VAR 0 5
25035: PPUSH
25036: CALL 67976 0 2
25040: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
25041: LD_ADDR_EXP 91
25045: PUSH
25046: LD_EXP 91
25050: PPUSH
25051: LD_VAR 0 1
25055: PPUSH
25056: CALL 67976 0 2
25060: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25061: LD_ADDR_VAR 0 6
25065: PUSH
25066: LD_EXP 90
25070: PUSH
25071: LD_VAR 0 4
25075: ARRAY
25076: PUSH
25077: LD_INT 3
25079: ARRAY
25080: PPUSH
25081: LD_EXP 90
25085: PUSH
25086: LD_VAR 0 4
25090: ARRAY
25091: PUSH
25092: LD_INT 4
25094: ARRAY
25095: PPUSH
25096: CALL_OW 428
25100: ST_TO_ADDR
// if hex then
25101: LD_VAR 0 6
25105: IFFALSE 25123
// ComMoveUnit ( driver , hex ) else
25107: LD_VAR 0 5
25111: PPUSH
25112: LD_VAR 0 6
25116: PPUSH
25117: CALL_OW 112
25121: GO 25207
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
25123: LD_VAR 0 1
25127: PPUSH
25128: LD_EXP 90
25132: PUSH
25133: LD_VAR 0 4
25137: ARRAY
25138: PUSH
25139: LD_INT 3
25141: ARRAY
25142: PPUSH
25143: LD_EXP 90
25147: PUSH
25148: LD_VAR 0 4
25152: ARRAY
25153: PUSH
25154: LD_INT 4
25156: ARRAY
25157: PPUSH
25158: CALL_OW 297
25162: PUSH
25163: LD_INT 0
25165: GREATER
25166: IFFALSE 25207
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25168: LD_VAR 0 5
25172: PPUSH
25173: LD_EXP 90
25177: PUSH
25178: LD_VAR 0 4
25182: ARRAY
25183: PUSH
25184: LD_INT 3
25186: ARRAY
25187: PPUSH
25188: LD_EXP 90
25192: PUSH
25193: LD_VAR 0 4
25197: ARRAY
25198: PUSH
25199: LD_INT 4
25201: ARRAY
25202: PPUSH
25203: CALL_OW 111
// AddComExitVehicle ( driver ) ;
25207: LD_VAR 0 5
25211: PPUSH
25212: CALL_OW 181
// if Multiplayer then
25216: LD_OWVAR 4
25220: IFFALSE 25269
// begin repeat wait ( 10 ) ;
25222: LD_INT 10
25224: PPUSH
25225: CALL_OW 67
// until not IsInUnit ( driver ) ;
25229: LD_VAR 0 5
25233: PPUSH
25234: CALL_OW 310
25238: NOT
25239: IFFALSE 25222
// if not HasTask ( driver ) then
25241: LD_VAR 0 5
25245: PPUSH
25246: CALL_OW 314
25250: NOT
25251: IFFALSE 25267
// ComEnterUnit ( driver , factory ) ;
25253: LD_VAR 0 5
25257: PPUSH
25258: LD_VAR 0 2
25262: PPUSH
25263: CALL_OW 120
// end else
25267: GO 25283
// AddComEnterUnit ( driver , factory ) ;
25269: LD_VAR 0 5
25273: PPUSH
25274: LD_VAR 0 2
25278: PPUSH
25279: CALL_OW 180
// wait ( 0 0$1 ) ;
25283: LD_INT 35
25285: PPUSH
25286: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
25290: LD_ADDR_EXP 91
25294: PUSH
25295: LD_EXP 91
25299: PUSH
25300: LD_VAR 0 5
25304: DIFF
25305: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
25306: LD_ADDR_EXP 91
25310: PUSH
25311: LD_EXP 91
25315: PUSH
25316: LD_VAR 0 1
25320: DIFF
25321: ST_TO_ADDR
// break ;
25322: GO 25475
// end ; end else
25324: GO 25473
// if GetControl ( vehicle ) = control_remote then
25326: LD_VAR 0 1
25330: PPUSH
25331: CALL_OW 263
25335: PUSH
25336: LD_INT 2
25338: EQUAL
25339: IFFALSE 25425
// begin wait ( 0 0$2 ) ;
25341: LD_INT 70
25343: PPUSH
25344: CALL_OW 67
// repeat wait ( 10 ) ;
25348: LD_INT 10
25350: PPUSH
25351: CALL_OW 67
// Connect ( vehicle ) ;
25355: LD_VAR 0 1
25359: PPUSH
25360: CALL 38573 0 1
// until IsControledBy ( vehicle ) ;
25364: LD_VAR 0 1
25368: PPUSH
25369: CALL_OW 312
25373: IFFALSE 25348
// wait ( 10 ) ;
25375: LD_INT 10
25377: PPUSH
25378: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25382: LD_VAR 0 1
25386: PPUSH
25387: LD_EXP 90
25391: PUSH
25392: LD_VAR 0 4
25396: ARRAY
25397: PUSH
25398: LD_INT 3
25400: ARRAY
25401: PPUSH
25402: LD_EXP 90
25406: PUSH
25407: LD_VAR 0 4
25411: ARRAY
25412: PUSH
25413: LD_INT 4
25415: ARRAY
25416: PPUSH
25417: CALL_OW 111
// break ;
25421: GO 25475
// end else
25423: GO 25473
// begin wait ( 0 0$3 ) ;
25425: LD_INT 105
25427: PPUSH
25428: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
25432: LD_VAR 0 1
25436: PPUSH
25437: LD_EXP 90
25441: PUSH
25442: LD_VAR 0 4
25446: ARRAY
25447: PUSH
25448: LD_INT 3
25450: ARRAY
25451: PPUSH
25452: LD_EXP 90
25456: PUSH
25457: LD_VAR 0 4
25461: ARRAY
25462: PUSH
25463: LD_INT 4
25465: ARRAY
25466: PPUSH
25467: CALL_OW 111
// break ;
25471: GO 25475
// end ; end ;
25473: GO 24926
25475: POP
25476: POP
// end ;
25477: LD_VAR 0 3
25481: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25482: LD_INT 0
25484: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
25485: LD_VAR 0 1
25489: PUSH
25490: LD_INT 250
25492: EQUAL
25493: PUSH
25494: LD_VAR 0 2
25498: PPUSH
25499: CALL_OW 264
25503: PUSH
25504: LD_INT 81
25506: EQUAL
25507: AND
25508: IFFALSE 25529
// MinerPlaceMine ( unit , x , y ) ;
25510: LD_VAR 0 2
25514: PPUSH
25515: LD_VAR 0 4
25519: PPUSH
25520: LD_VAR 0 5
25524: PPUSH
25525: CALL 28621 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
25529: LD_VAR 0 1
25533: PUSH
25534: LD_INT 251
25536: EQUAL
25537: PUSH
25538: LD_VAR 0 2
25542: PPUSH
25543: CALL_OW 264
25547: PUSH
25548: LD_INT 81
25550: EQUAL
25551: AND
25552: IFFALSE 25573
// MinerDetonateMine ( unit , x , y ) ;
25554: LD_VAR 0 2
25558: PPUSH
25559: LD_VAR 0 4
25563: PPUSH
25564: LD_VAR 0 5
25568: PPUSH
25569: CALL 28896 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25573: LD_VAR 0 1
25577: PUSH
25578: LD_INT 252
25580: EQUAL
25581: PUSH
25582: LD_VAR 0 2
25586: PPUSH
25587: CALL_OW 264
25591: PUSH
25592: LD_INT 81
25594: EQUAL
25595: AND
25596: IFFALSE 25617
// MinerCreateMinefield ( unit , x , y ) ;
25598: LD_VAR 0 2
25602: PPUSH
25603: LD_VAR 0 4
25607: PPUSH
25608: LD_VAR 0 5
25612: PPUSH
25613: CALL 29313 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25617: LD_VAR 0 1
25621: PUSH
25622: LD_INT 253
25624: EQUAL
25625: PUSH
25626: LD_VAR 0 2
25630: PPUSH
25631: CALL_OW 257
25635: PUSH
25636: LD_INT 5
25638: EQUAL
25639: AND
25640: IFFALSE 25661
// ComBinocular ( unit , x , y ) ;
25642: LD_VAR 0 2
25646: PPUSH
25647: LD_VAR 0 4
25651: PPUSH
25652: LD_VAR 0 5
25656: PPUSH
25657: CALL 29682 0 3
// if selectedUnit then
25661: LD_VAR 0 3
25665: IFFALSE 25721
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25667: LD_VAR 0 1
25671: PUSH
25672: LD_INT 254
25674: EQUAL
25675: PUSH
25676: LD_VAR 0 2
25680: PPUSH
25681: CALL_OW 264
25685: PUSH
25686: LD_INT 99
25688: EQUAL
25689: AND
25690: PUSH
25691: LD_VAR 0 3
25695: PPUSH
25696: CALL_OW 263
25700: PUSH
25701: LD_INT 3
25703: EQUAL
25704: AND
25705: IFFALSE 25721
// HackDestroyVehicle ( unit , selectedUnit ) ;
25707: LD_VAR 0 2
25711: PPUSH
25712: LD_VAR 0 3
25716: PPUSH
25717: CALL 27985 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25721: LD_VAR 0 1
25725: PUSH
25726: LD_INT 255
25728: EQUAL
25729: PUSH
25730: LD_VAR 0 2
25734: PPUSH
25735: CALL_OW 264
25739: PUSH
25740: LD_INT 14
25742: PUSH
25743: LD_INT 53
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: IN
25750: AND
25751: PUSH
25752: LD_VAR 0 4
25756: PPUSH
25757: LD_VAR 0 5
25761: PPUSH
25762: CALL_OW 488
25766: AND
25767: IFFALSE 25791
// CutTreeXYR ( unit , x , y , 12 ) ;
25769: LD_VAR 0 2
25773: PPUSH
25774: LD_VAR 0 4
25778: PPUSH
25779: LD_VAR 0 5
25783: PPUSH
25784: LD_INT 12
25786: PPUSH
25787: CALL 25982 0 4
// if cmd = 256 then
25791: LD_VAR 0 1
25795: PUSH
25796: LD_INT 256
25798: EQUAL
25799: IFFALSE 25820
// SetFactoryWaypoint ( unit , x , y ) ;
25801: LD_VAR 0 2
25805: PPUSH
25806: LD_VAR 0 4
25810: PPUSH
25811: LD_VAR 0 5
25815: PPUSH
25816: CALL 23378 0 3
// if cmd = 257 then
25820: LD_VAR 0 1
25824: PUSH
25825: LD_INT 257
25827: EQUAL
25828: IFFALSE 25849
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25830: LD_VAR 0 2
25834: PPUSH
25835: LD_VAR 0 4
25839: PPUSH
25840: LD_VAR 0 5
25844: PPUSH
25845: CALL 23868 0 3
// if cmd = 258 then
25849: LD_VAR 0 1
25853: PUSH
25854: LD_INT 258
25856: EQUAL
25857: IFFALSE 25881
// BurnTreeXYR ( unit , x , y , 8 ) ;
25859: LD_VAR 0 2
25863: PPUSH
25864: LD_VAR 0 4
25868: PPUSH
25869: LD_VAR 0 5
25873: PPUSH
25874: LD_INT 8
25876: PPUSH
25877: CALL 26376 0 4
// end ;
25881: LD_VAR 0 6
25885: RET
// export function ComRadiation ( un ) ; var eff ; begin
25886: LD_INT 0
25888: PPUSH
25889: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
25890: LD_VAR 0 1
25894: PPUSH
25895: CALL_OW 264
25899: PUSH
25900: LD_INT 91
25902: NONEQUAL
25903: IFFALSE 25907
// exit ;
25905: GO 25977
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25907: LD_INT 68
25909: PPUSH
25910: LD_VAR 0 1
25914: PPUSH
25915: CALL_OW 255
25919: PPUSH
25920: CALL_OW 321
25924: PUSH
25925: LD_INT 2
25927: EQUAL
25928: IFFALSE 25940
// eff := 50 else
25930: LD_ADDR_VAR 0 3
25934: PUSH
25935: LD_INT 50
25937: ST_TO_ADDR
25938: GO 25948
// eff := 25 ;
25940: LD_ADDR_VAR 0 3
25944: PUSH
25945: LD_INT 25
25947: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25948: LD_VAR 0 1
25952: PPUSH
25953: CALL_OW 250
25957: PPUSH
25958: LD_VAR 0 1
25962: PPUSH
25963: CALL_OW 251
25967: PPUSH
25968: LD_VAR 0 3
25972: PPUSH
25973: CALL_OW 495
// end ;
25977: LD_VAR 0 2
25981: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25982: LD_INT 0
25984: PPUSH
25985: PPUSH
25986: PPUSH
25987: PPUSH
25988: PPUSH
25989: PPUSH
25990: PPUSH
25991: PPUSH
25992: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
25993: LD_VAR 0 1
25997: PPUSH
25998: CALL_OW 302
26002: NOT
26003: PUSH
26004: LD_VAR 0 2
26008: PPUSH
26009: LD_VAR 0 3
26013: PPUSH
26014: CALL_OW 488
26018: NOT
26019: OR
26020: PUSH
26021: LD_VAR 0 4
26025: NOT
26026: OR
26027: IFFALSE 26031
// exit ;
26029: GO 26371
// list := [ ] ;
26031: LD_ADDR_VAR 0 13
26035: PUSH
26036: EMPTY
26037: ST_TO_ADDR
// if x - r < 0 then
26038: LD_VAR 0 2
26042: PUSH
26043: LD_VAR 0 4
26047: MINUS
26048: PUSH
26049: LD_INT 0
26051: LESS
26052: IFFALSE 26064
// min_x := 0 else
26054: LD_ADDR_VAR 0 7
26058: PUSH
26059: LD_INT 0
26061: ST_TO_ADDR
26062: GO 26080
// min_x := x - r ;
26064: LD_ADDR_VAR 0 7
26068: PUSH
26069: LD_VAR 0 2
26073: PUSH
26074: LD_VAR 0 4
26078: MINUS
26079: ST_TO_ADDR
// if y - r < 0 then
26080: LD_VAR 0 3
26084: PUSH
26085: LD_VAR 0 4
26089: MINUS
26090: PUSH
26091: LD_INT 0
26093: LESS
26094: IFFALSE 26106
// min_y := 0 else
26096: LD_ADDR_VAR 0 8
26100: PUSH
26101: LD_INT 0
26103: ST_TO_ADDR
26104: GO 26122
// min_y := y - r ;
26106: LD_ADDR_VAR 0 8
26110: PUSH
26111: LD_VAR 0 3
26115: PUSH
26116: LD_VAR 0 4
26120: MINUS
26121: ST_TO_ADDR
// max_x := x + r ;
26122: LD_ADDR_VAR 0 9
26126: PUSH
26127: LD_VAR 0 2
26131: PUSH
26132: LD_VAR 0 4
26136: PLUS
26137: ST_TO_ADDR
// max_y := y + r ;
26138: LD_ADDR_VAR 0 10
26142: PUSH
26143: LD_VAR 0 3
26147: PUSH
26148: LD_VAR 0 4
26152: PLUS
26153: ST_TO_ADDR
// for _x = min_x to max_x do
26154: LD_ADDR_VAR 0 11
26158: PUSH
26159: DOUBLE
26160: LD_VAR 0 7
26164: DEC
26165: ST_TO_ADDR
26166: LD_VAR 0 9
26170: PUSH
26171: FOR_TO
26172: IFFALSE 26289
// for _y = min_y to max_y do
26174: LD_ADDR_VAR 0 12
26178: PUSH
26179: DOUBLE
26180: LD_VAR 0 8
26184: DEC
26185: ST_TO_ADDR
26186: LD_VAR 0 10
26190: PUSH
26191: FOR_TO
26192: IFFALSE 26285
// begin if not ValidHex ( _x , _y ) then
26194: LD_VAR 0 11
26198: PPUSH
26199: LD_VAR 0 12
26203: PPUSH
26204: CALL_OW 488
26208: NOT
26209: IFFALSE 26213
// continue ;
26211: GO 26191
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26213: LD_VAR 0 11
26217: PPUSH
26218: LD_VAR 0 12
26222: PPUSH
26223: CALL_OW 351
26227: PUSH
26228: LD_VAR 0 11
26232: PPUSH
26233: LD_VAR 0 12
26237: PPUSH
26238: CALL_OW 554
26242: AND
26243: IFFALSE 26283
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26245: LD_ADDR_VAR 0 13
26249: PUSH
26250: LD_VAR 0 13
26254: PPUSH
26255: LD_VAR 0 13
26259: PUSH
26260: LD_INT 1
26262: PLUS
26263: PPUSH
26264: LD_VAR 0 11
26268: PUSH
26269: LD_VAR 0 12
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PPUSH
26278: CALL_OW 2
26282: ST_TO_ADDR
// end ;
26283: GO 26191
26285: POP
26286: POP
26287: GO 26171
26289: POP
26290: POP
// if not list then
26291: LD_VAR 0 13
26295: NOT
26296: IFFALSE 26300
// exit ;
26298: GO 26371
// for i in list do
26300: LD_ADDR_VAR 0 6
26304: PUSH
26305: LD_VAR 0 13
26309: PUSH
26310: FOR_IN
26311: IFFALSE 26369
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26313: LD_VAR 0 1
26317: PPUSH
26318: LD_STRING M
26320: PUSH
26321: LD_VAR 0 6
26325: PUSH
26326: LD_INT 1
26328: ARRAY
26329: PUSH
26330: LD_VAR 0 6
26334: PUSH
26335: LD_INT 2
26337: ARRAY
26338: PUSH
26339: LD_INT 0
26341: PUSH
26342: LD_INT 0
26344: PUSH
26345: LD_INT 0
26347: PUSH
26348: LD_INT 0
26350: PUSH
26351: EMPTY
26352: LIST
26353: LIST
26354: LIST
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: PUSH
26360: EMPTY
26361: LIST
26362: PPUSH
26363: CALL_OW 447
26367: GO 26310
26369: POP
26370: POP
// end ;
26371: LD_VAR 0 5
26375: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
26376: LD_INT 0
26378: PPUSH
26379: PPUSH
26380: PPUSH
26381: PPUSH
26382: PPUSH
26383: PPUSH
26384: PPUSH
26385: PPUSH
26386: PPUSH
26387: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
26388: LD_VAR 0 1
26392: PPUSH
26393: CALL_OW 302
26397: NOT
26398: PUSH
26399: LD_VAR 0 2
26403: PPUSH
26404: LD_VAR 0 3
26408: PPUSH
26409: CALL_OW 488
26413: NOT
26414: OR
26415: PUSH
26416: LD_VAR 0 4
26420: NOT
26421: OR
26422: IFFALSE 26426
// exit ;
26424: GO 26939
// list := [ ] ;
26426: LD_ADDR_VAR 0 13
26430: PUSH
26431: EMPTY
26432: ST_TO_ADDR
// if x - r < 0 then
26433: LD_VAR 0 2
26437: PUSH
26438: LD_VAR 0 4
26442: MINUS
26443: PUSH
26444: LD_INT 0
26446: LESS
26447: IFFALSE 26459
// min_x := 0 else
26449: LD_ADDR_VAR 0 7
26453: PUSH
26454: LD_INT 0
26456: ST_TO_ADDR
26457: GO 26475
// min_x := x - r ;
26459: LD_ADDR_VAR 0 7
26463: PUSH
26464: LD_VAR 0 2
26468: PUSH
26469: LD_VAR 0 4
26473: MINUS
26474: ST_TO_ADDR
// if y - r < 0 then
26475: LD_VAR 0 3
26479: PUSH
26480: LD_VAR 0 4
26484: MINUS
26485: PUSH
26486: LD_INT 0
26488: LESS
26489: IFFALSE 26501
// min_y := 0 else
26491: LD_ADDR_VAR 0 8
26495: PUSH
26496: LD_INT 0
26498: ST_TO_ADDR
26499: GO 26517
// min_y := y - r ;
26501: LD_ADDR_VAR 0 8
26505: PUSH
26506: LD_VAR 0 3
26510: PUSH
26511: LD_VAR 0 4
26515: MINUS
26516: ST_TO_ADDR
// max_x := x + r ;
26517: LD_ADDR_VAR 0 9
26521: PUSH
26522: LD_VAR 0 2
26526: PUSH
26527: LD_VAR 0 4
26531: PLUS
26532: ST_TO_ADDR
// max_y := y + r ;
26533: LD_ADDR_VAR 0 10
26537: PUSH
26538: LD_VAR 0 3
26542: PUSH
26543: LD_VAR 0 4
26547: PLUS
26548: ST_TO_ADDR
// for _x = min_x to max_x do
26549: LD_ADDR_VAR 0 11
26553: PUSH
26554: DOUBLE
26555: LD_VAR 0 7
26559: DEC
26560: ST_TO_ADDR
26561: LD_VAR 0 9
26565: PUSH
26566: FOR_TO
26567: IFFALSE 26684
// for _y = min_y to max_y do
26569: LD_ADDR_VAR 0 12
26573: PUSH
26574: DOUBLE
26575: LD_VAR 0 8
26579: DEC
26580: ST_TO_ADDR
26581: LD_VAR 0 10
26585: PUSH
26586: FOR_TO
26587: IFFALSE 26680
// begin if not ValidHex ( _x , _y ) then
26589: LD_VAR 0 11
26593: PPUSH
26594: LD_VAR 0 12
26598: PPUSH
26599: CALL_OW 488
26603: NOT
26604: IFFALSE 26608
// continue ;
26606: GO 26586
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26608: LD_VAR 0 11
26612: PPUSH
26613: LD_VAR 0 12
26617: PPUSH
26618: CALL_OW 351
26622: PUSH
26623: LD_VAR 0 11
26627: PPUSH
26628: LD_VAR 0 12
26632: PPUSH
26633: CALL_OW 554
26637: AND
26638: IFFALSE 26678
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26640: LD_ADDR_VAR 0 13
26644: PUSH
26645: LD_VAR 0 13
26649: PPUSH
26650: LD_VAR 0 13
26654: PUSH
26655: LD_INT 1
26657: PLUS
26658: PPUSH
26659: LD_VAR 0 11
26663: PUSH
26664: LD_VAR 0 12
26668: PUSH
26669: EMPTY
26670: LIST
26671: LIST
26672: PPUSH
26673: CALL_OW 2
26677: ST_TO_ADDR
// end ;
26678: GO 26586
26680: POP
26681: POP
26682: GO 26566
26684: POP
26685: POP
// if not list then
26686: LD_VAR 0 13
26690: NOT
26691: IFFALSE 26695
// exit ;
26693: GO 26939
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
26695: LD_ADDR_VAR 0 13
26699: PUSH
26700: LD_VAR 0 1
26704: PPUSH
26705: LD_VAR 0 13
26709: PPUSH
26710: LD_INT 1
26712: PPUSH
26713: LD_INT 1
26715: PPUSH
26716: CALL 35715 0 4
26720: ST_TO_ADDR
// ComStop ( flame ) ;
26721: LD_VAR 0 1
26725: PPUSH
26726: CALL_OW 141
// for i in list do
26730: LD_ADDR_VAR 0 6
26734: PUSH
26735: LD_VAR 0 13
26739: PUSH
26740: FOR_IN
26741: IFFALSE 26772
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
26743: LD_VAR 0 1
26747: PPUSH
26748: LD_VAR 0 6
26752: PUSH
26753: LD_INT 1
26755: ARRAY
26756: PPUSH
26757: LD_VAR 0 6
26761: PUSH
26762: LD_INT 2
26764: ARRAY
26765: PPUSH
26766: CALL_OW 176
26770: GO 26740
26772: POP
26773: POP
// repeat wait ( 0 0$1 ) ;
26774: LD_INT 35
26776: PPUSH
26777: CALL_OW 67
// task := GetTaskList ( flame ) ;
26781: LD_ADDR_VAR 0 14
26785: PUSH
26786: LD_VAR 0 1
26790: PPUSH
26791: CALL_OW 437
26795: ST_TO_ADDR
// if not task then
26796: LD_VAR 0 14
26800: NOT
26801: IFFALSE 26805
// exit ;
26803: GO 26939
// if task [ 1 ] [ 1 ] <> | then
26805: LD_VAR 0 14
26809: PUSH
26810: LD_INT 1
26812: ARRAY
26813: PUSH
26814: LD_INT 1
26816: ARRAY
26817: PUSH
26818: LD_STRING |
26820: NONEQUAL
26821: IFFALSE 26825
// exit ;
26823: GO 26939
// _x := task [ 1 ] [ 2 ] ;
26825: LD_ADDR_VAR 0 11
26829: PUSH
26830: LD_VAR 0 14
26834: PUSH
26835: LD_INT 1
26837: ARRAY
26838: PUSH
26839: LD_INT 2
26841: ARRAY
26842: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
26843: LD_ADDR_VAR 0 12
26847: PUSH
26848: LD_VAR 0 14
26852: PUSH
26853: LD_INT 1
26855: ARRAY
26856: PUSH
26857: LD_INT 3
26859: ARRAY
26860: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
26861: LD_VAR 0 11
26865: PPUSH
26866: LD_VAR 0 12
26870: PPUSH
26871: CALL_OW 351
26875: NOT
26876: PUSH
26877: LD_VAR 0 11
26881: PPUSH
26882: LD_VAR 0 12
26886: PPUSH
26887: CALL_OW 554
26891: NOT
26892: OR
26893: IFFALSE 26927
// begin task := Delete ( task , 1 ) ;
26895: LD_ADDR_VAR 0 14
26899: PUSH
26900: LD_VAR 0 14
26904: PPUSH
26905: LD_INT 1
26907: PPUSH
26908: CALL_OW 3
26912: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
26913: LD_VAR 0 1
26917: PPUSH
26918: LD_VAR 0 14
26922: PPUSH
26923: CALL_OW 446
// end ; until not HasTask ( flame ) ;
26927: LD_VAR 0 1
26931: PPUSH
26932: CALL_OW 314
26936: NOT
26937: IFFALSE 26774
// end ;
26939: LD_VAR 0 5
26943: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26944: LD_EXP 94
26948: NOT
26949: IFFALSE 26999
26951: GO 26953
26953: DISABLE
// begin initHack := true ;
26954: LD_ADDR_EXP 94
26958: PUSH
26959: LD_INT 1
26961: ST_TO_ADDR
// hackTanks := [ ] ;
26962: LD_ADDR_EXP 95
26966: PUSH
26967: EMPTY
26968: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26969: LD_ADDR_EXP 96
26973: PUSH
26974: EMPTY
26975: ST_TO_ADDR
// hackLimit := 3 ;
26976: LD_ADDR_EXP 97
26980: PUSH
26981: LD_INT 3
26983: ST_TO_ADDR
// hackDist := 12 ;
26984: LD_ADDR_EXP 98
26988: PUSH
26989: LD_INT 12
26991: ST_TO_ADDR
// hackCounter := [ ] ;
26992: LD_ADDR_EXP 99
26996: PUSH
26997: EMPTY
26998: ST_TO_ADDR
// end ;
26999: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
27000: LD_EXP 94
27004: PUSH
27005: LD_INT 34
27007: PUSH
27008: LD_INT 99
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PPUSH
27015: CALL_OW 69
27019: AND
27020: IFFALSE 27273
27022: GO 27024
27024: DISABLE
27025: LD_INT 0
27027: PPUSH
27028: PPUSH
// begin enable ;
27029: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
27030: LD_ADDR_VAR 0 1
27034: PUSH
27035: LD_INT 34
27037: PUSH
27038: LD_INT 99
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PPUSH
27045: CALL_OW 69
27049: PUSH
27050: FOR_IN
27051: IFFALSE 27271
// begin if not i in hackTanks then
27053: LD_VAR 0 1
27057: PUSH
27058: LD_EXP 95
27062: IN
27063: NOT
27064: IFFALSE 27147
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
27066: LD_ADDR_EXP 95
27070: PUSH
27071: LD_EXP 95
27075: PPUSH
27076: LD_EXP 95
27080: PUSH
27081: LD_INT 1
27083: PLUS
27084: PPUSH
27085: LD_VAR 0 1
27089: PPUSH
27090: CALL_OW 1
27094: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
27095: LD_ADDR_EXP 96
27099: PUSH
27100: LD_EXP 96
27104: PPUSH
27105: LD_EXP 96
27109: PUSH
27110: LD_INT 1
27112: PLUS
27113: PPUSH
27114: EMPTY
27115: PPUSH
27116: CALL_OW 1
27120: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
27121: LD_ADDR_EXP 99
27125: PUSH
27126: LD_EXP 99
27130: PPUSH
27131: LD_EXP 99
27135: PUSH
27136: LD_INT 1
27138: PLUS
27139: PPUSH
27140: EMPTY
27141: PPUSH
27142: CALL_OW 1
27146: ST_TO_ADDR
// end ; if not IsOk ( i ) then
27147: LD_VAR 0 1
27151: PPUSH
27152: CALL_OW 302
27156: NOT
27157: IFFALSE 27170
// begin HackUnlinkAll ( i ) ;
27159: LD_VAR 0 1
27163: PPUSH
27164: CALL 27276 0 1
// continue ;
27168: GO 27050
// end ; HackCheckCapturedStatus ( i ) ;
27170: LD_VAR 0 1
27174: PPUSH
27175: CALL 27719 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27179: LD_ADDR_VAR 0 2
27183: PUSH
27184: LD_INT 81
27186: PUSH
27187: LD_VAR 0 1
27191: PPUSH
27192: CALL_OW 255
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 33
27203: PUSH
27204: LD_INT 3
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 91
27213: PUSH
27214: LD_VAR 0 1
27218: PUSH
27219: LD_EXP 98
27223: PUSH
27224: EMPTY
27225: LIST
27226: LIST
27227: LIST
27228: PUSH
27229: LD_INT 50
27231: PUSH
27232: EMPTY
27233: LIST
27234: PUSH
27235: EMPTY
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: PPUSH
27241: CALL_OW 69
27245: ST_TO_ADDR
// if not tmp then
27246: LD_VAR 0 2
27250: NOT
27251: IFFALSE 27255
// continue ;
27253: GO 27050
// HackLink ( i , tmp ) ;
27255: LD_VAR 0 1
27259: PPUSH
27260: LD_VAR 0 2
27264: PPUSH
27265: CALL 27412 0 2
// end ;
27269: GO 27050
27271: POP
27272: POP
// end ;
27273: PPOPN 2
27275: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27276: LD_INT 0
27278: PPUSH
27279: PPUSH
27280: PPUSH
// if not hack in hackTanks then
27281: LD_VAR 0 1
27285: PUSH
27286: LD_EXP 95
27290: IN
27291: NOT
27292: IFFALSE 27296
// exit ;
27294: GO 27407
// index := GetElementIndex ( hackTanks , hack ) ;
27296: LD_ADDR_VAR 0 4
27300: PUSH
27301: LD_EXP 95
27305: PPUSH
27306: LD_VAR 0 1
27310: PPUSH
27311: CALL 35012 0 2
27315: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27316: LD_EXP 96
27320: PUSH
27321: LD_VAR 0 4
27325: ARRAY
27326: IFFALSE 27407
// begin for i in hackTanksCaptured [ index ] do
27328: LD_ADDR_VAR 0 3
27332: PUSH
27333: LD_EXP 96
27337: PUSH
27338: LD_VAR 0 4
27342: ARRAY
27343: PUSH
27344: FOR_IN
27345: IFFALSE 27371
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27347: LD_VAR 0 3
27351: PUSH
27352: LD_INT 1
27354: ARRAY
27355: PPUSH
27356: LD_VAR 0 3
27360: PUSH
27361: LD_INT 2
27363: ARRAY
27364: PPUSH
27365: CALL_OW 235
27369: GO 27344
27371: POP
27372: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27373: LD_ADDR_EXP 96
27377: PUSH
27378: LD_EXP 96
27382: PPUSH
27383: LD_VAR 0 4
27387: PPUSH
27388: EMPTY
27389: PPUSH
27390: CALL_OW 1
27394: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27395: LD_VAR 0 1
27399: PPUSH
27400: LD_INT 0
27402: PPUSH
27403: CALL_OW 505
// end ; end ;
27407: LD_VAR 0 2
27411: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27412: LD_INT 0
27414: PPUSH
27415: PPUSH
27416: PPUSH
// if not hack in hackTanks or not vehicles then
27417: LD_VAR 0 1
27421: PUSH
27422: LD_EXP 95
27426: IN
27427: NOT
27428: PUSH
27429: LD_VAR 0 2
27433: NOT
27434: OR
27435: IFFALSE 27439
// exit ;
27437: GO 27714
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27439: LD_ADDR_VAR 0 2
27443: PUSH
27444: LD_VAR 0 1
27448: PPUSH
27449: LD_VAR 0 2
27453: PPUSH
27454: LD_INT 1
27456: PPUSH
27457: LD_INT 1
27459: PPUSH
27460: CALL 35662 0 4
27464: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27465: LD_ADDR_VAR 0 5
27469: PUSH
27470: LD_EXP 95
27474: PPUSH
27475: LD_VAR 0 1
27479: PPUSH
27480: CALL 35012 0 2
27484: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27485: LD_EXP 96
27489: PUSH
27490: LD_VAR 0 5
27494: ARRAY
27495: PUSH
27496: LD_EXP 97
27500: LESS
27501: IFFALSE 27690
// begin for i := 1 to vehicles do
27503: LD_ADDR_VAR 0 4
27507: PUSH
27508: DOUBLE
27509: LD_INT 1
27511: DEC
27512: ST_TO_ADDR
27513: LD_VAR 0 2
27517: PUSH
27518: FOR_TO
27519: IFFALSE 27688
// begin if hackTanksCaptured [ index ] = hackLimit then
27521: LD_EXP 96
27525: PUSH
27526: LD_VAR 0 5
27530: ARRAY
27531: PUSH
27532: LD_EXP 97
27536: EQUAL
27537: IFFALSE 27541
// break ;
27539: GO 27688
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27541: LD_ADDR_EXP 99
27545: PUSH
27546: LD_EXP 99
27550: PPUSH
27551: LD_VAR 0 5
27555: PPUSH
27556: LD_EXP 99
27560: PUSH
27561: LD_VAR 0 5
27565: ARRAY
27566: PUSH
27567: LD_INT 1
27569: PLUS
27570: PPUSH
27571: CALL_OW 1
27575: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27576: LD_ADDR_EXP 96
27580: PUSH
27581: LD_EXP 96
27585: PPUSH
27586: LD_VAR 0 5
27590: PUSH
27591: LD_EXP 96
27595: PUSH
27596: LD_VAR 0 5
27600: ARRAY
27601: PUSH
27602: LD_INT 1
27604: PLUS
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: PPUSH
27610: LD_VAR 0 2
27614: PUSH
27615: LD_VAR 0 4
27619: ARRAY
27620: PUSH
27621: LD_VAR 0 2
27625: PUSH
27626: LD_VAR 0 4
27630: ARRAY
27631: PPUSH
27632: CALL_OW 255
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PPUSH
27641: CALL 35227 0 3
27645: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27646: LD_VAR 0 2
27650: PUSH
27651: LD_VAR 0 4
27655: ARRAY
27656: PPUSH
27657: LD_VAR 0 1
27661: PPUSH
27662: CALL_OW 255
27666: PPUSH
27667: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27671: LD_VAR 0 2
27675: PUSH
27676: LD_VAR 0 4
27680: ARRAY
27681: PPUSH
27682: CALL_OW 141
// end ;
27686: GO 27518
27688: POP
27689: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27690: LD_VAR 0 1
27694: PPUSH
27695: LD_EXP 96
27699: PUSH
27700: LD_VAR 0 5
27704: ARRAY
27705: PUSH
27706: LD_INT 0
27708: PLUS
27709: PPUSH
27710: CALL_OW 505
// end ;
27714: LD_VAR 0 3
27718: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27719: LD_INT 0
27721: PPUSH
27722: PPUSH
27723: PPUSH
27724: PPUSH
// if not hack in hackTanks then
27725: LD_VAR 0 1
27729: PUSH
27730: LD_EXP 95
27734: IN
27735: NOT
27736: IFFALSE 27740
// exit ;
27738: GO 27980
// index := GetElementIndex ( hackTanks , hack ) ;
27740: LD_ADDR_VAR 0 4
27744: PUSH
27745: LD_EXP 95
27749: PPUSH
27750: LD_VAR 0 1
27754: PPUSH
27755: CALL 35012 0 2
27759: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27760: LD_ADDR_VAR 0 3
27764: PUSH
27765: DOUBLE
27766: LD_EXP 96
27770: PUSH
27771: LD_VAR 0 4
27775: ARRAY
27776: INC
27777: ST_TO_ADDR
27778: LD_INT 1
27780: PUSH
27781: FOR_DOWNTO
27782: IFFALSE 27954
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27784: LD_ADDR_VAR 0 5
27788: PUSH
27789: LD_EXP 96
27793: PUSH
27794: LD_VAR 0 4
27798: ARRAY
27799: PUSH
27800: LD_VAR 0 3
27804: ARRAY
27805: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27806: LD_VAR 0 5
27810: PUSH
27811: LD_INT 1
27813: ARRAY
27814: PPUSH
27815: CALL_OW 302
27819: NOT
27820: PUSH
27821: LD_VAR 0 5
27825: PUSH
27826: LD_INT 1
27828: ARRAY
27829: PPUSH
27830: CALL_OW 255
27834: PUSH
27835: LD_VAR 0 1
27839: PPUSH
27840: CALL_OW 255
27844: NONEQUAL
27845: OR
27846: IFFALSE 27952
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27848: LD_VAR 0 5
27852: PUSH
27853: LD_INT 1
27855: ARRAY
27856: PPUSH
27857: CALL_OW 305
27861: PUSH
27862: LD_VAR 0 5
27866: PUSH
27867: LD_INT 1
27869: ARRAY
27870: PPUSH
27871: CALL_OW 255
27875: PUSH
27876: LD_VAR 0 1
27880: PPUSH
27881: CALL_OW 255
27885: EQUAL
27886: AND
27887: IFFALSE 27911
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27889: LD_VAR 0 5
27893: PUSH
27894: LD_INT 1
27896: ARRAY
27897: PPUSH
27898: LD_VAR 0 5
27902: PUSH
27903: LD_INT 2
27905: ARRAY
27906: PPUSH
27907: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27911: LD_ADDR_EXP 96
27915: PUSH
27916: LD_EXP 96
27920: PPUSH
27921: LD_VAR 0 4
27925: PPUSH
27926: LD_EXP 96
27930: PUSH
27931: LD_VAR 0 4
27935: ARRAY
27936: PPUSH
27937: LD_VAR 0 3
27941: PPUSH
27942: CALL_OW 3
27946: PPUSH
27947: CALL_OW 1
27951: ST_TO_ADDR
// end ; end ;
27952: GO 27781
27954: POP
27955: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27956: LD_VAR 0 1
27960: PPUSH
27961: LD_EXP 96
27965: PUSH
27966: LD_VAR 0 4
27970: ARRAY
27971: PUSH
27972: LD_INT 0
27974: PLUS
27975: PPUSH
27976: CALL_OW 505
// end ;
27980: LD_VAR 0 2
27984: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27985: LD_INT 0
27987: PPUSH
27988: PPUSH
27989: PPUSH
27990: PPUSH
// if not hack in hackTanks then
27991: LD_VAR 0 1
27995: PUSH
27996: LD_EXP 95
28000: IN
28001: NOT
28002: IFFALSE 28006
// exit ;
28004: GO 28091
// index := GetElementIndex ( hackTanks , hack ) ;
28006: LD_ADDR_VAR 0 5
28010: PUSH
28011: LD_EXP 95
28015: PPUSH
28016: LD_VAR 0 1
28020: PPUSH
28021: CALL 35012 0 2
28025: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
28026: LD_ADDR_VAR 0 4
28030: PUSH
28031: DOUBLE
28032: LD_INT 1
28034: DEC
28035: ST_TO_ADDR
28036: LD_EXP 96
28040: PUSH
28041: LD_VAR 0 5
28045: ARRAY
28046: PUSH
28047: FOR_TO
28048: IFFALSE 28089
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
28050: LD_EXP 96
28054: PUSH
28055: LD_VAR 0 5
28059: ARRAY
28060: PUSH
28061: LD_VAR 0 4
28065: ARRAY
28066: PUSH
28067: LD_INT 1
28069: ARRAY
28070: PUSH
28071: LD_VAR 0 2
28075: EQUAL
28076: IFFALSE 28087
// KillUnit ( vehicle ) ;
28078: LD_VAR 0 2
28082: PPUSH
28083: CALL_OW 66
28087: GO 28047
28089: POP
28090: POP
// end ;
28091: LD_VAR 0 3
28095: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
28096: LD_EXP 100
28100: NOT
28101: IFFALSE 28136
28103: GO 28105
28105: DISABLE
// begin initMiner := true ;
28106: LD_ADDR_EXP 100
28110: PUSH
28111: LD_INT 1
28113: ST_TO_ADDR
// minersList := [ ] ;
28114: LD_ADDR_EXP 101
28118: PUSH
28119: EMPTY
28120: ST_TO_ADDR
// minerMinesList := [ ] ;
28121: LD_ADDR_EXP 102
28125: PUSH
28126: EMPTY
28127: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
28128: LD_ADDR_EXP 103
28132: PUSH
28133: LD_INT 5
28135: ST_TO_ADDR
// end ;
28136: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
28137: LD_EXP 100
28141: PUSH
28142: LD_INT 34
28144: PUSH
28145: LD_INT 81
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PPUSH
28152: CALL_OW 69
28156: AND
28157: IFFALSE 28618
28159: GO 28161
28161: DISABLE
28162: LD_INT 0
28164: PPUSH
28165: PPUSH
28166: PPUSH
28167: PPUSH
// begin enable ;
28168: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
28169: LD_ADDR_VAR 0 1
28173: PUSH
28174: LD_INT 34
28176: PUSH
28177: LD_INT 81
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PPUSH
28184: CALL_OW 69
28188: PUSH
28189: FOR_IN
28190: IFFALSE 28262
// begin if not i in minersList then
28192: LD_VAR 0 1
28196: PUSH
28197: LD_EXP 101
28201: IN
28202: NOT
28203: IFFALSE 28260
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28205: LD_ADDR_EXP 101
28209: PUSH
28210: LD_EXP 101
28214: PPUSH
28215: LD_EXP 101
28219: PUSH
28220: LD_INT 1
28222: PLUS
28223: PPUSH
28224: LD_VAR 0 1
28228: PPUSH
28229: CALL_OW 1
28233: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28234: LD_ADDR_EXP 102
28238: PUSH
28239: LD_EXP 102
28243: PPUSH
28244: LD_EXP 102
28248: PUSH
28249: LD_INT 1
28251: PLUS
28252: PPUSH
28253: EMPTY
28254: PPUSH
28255: CALL_OW 1
28259: ST_TO_ADDR
// end end ;
28260: GO 28189
28262: POP
28263: POP
// for i := minerMinesList downto 1 do
28264: LD_ADDR_VAR 0 1
28268: PUSH
28269: DOUBLE
28270: LD_EXP 102
28274: INC
28275: ST_TO_ADDR
28276: LD_INT 1
28278: PUSH
28279: FOR_DOWNTO
28280: IFFALSE 28616
// begin if IsLive ( minersList [ i ] ) then
28282: LD_EXP 101
28286: PUSH
28287: LD_VAR 0 1
28291: ARRAY
28292: PPUSH
28293: CALL_OW 300
28297: IFFALSE 28325
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28299: LD_EXP 101
28303: PUSH
28304: LD_VAR 0 1
28308: ARRAY
28309: PPUSH
28310: LD_EXP 102
28314: PUSH
28315: LD_VAR 0 1
28319: ARRAY
28320: PPUSH
28321: CALL_OW 505
// if not minerMinesList [ i ] then
28325: LD_EXP 102
28329: PUSH
28330: LD_VAR 0 1
28334: ARRAY
28335: NOT
28336: IFFALSE 28340
// continue ;
28338: GO 28279
// for j := minerMinesList [ i ] downto 1 do
28340: LD_ADDR_VAR 0 2
28344: PUSH
28345: DOUBLE
28346: LD_EXP 102
28350: PUSH
28351: LD_VAR 0 1
28355: ARRAY
28356: INC
28357: ST_TO_ADDR
28358: LD_INT 1
28360: PUSH
28361: FOR_DOWNTO
28362: IFFALSE 28612
// begin side := GetSide ( minersList [ i ] ) ;
28364: LD_ADDR_VAR 0 3
28368: PUSH
28369: LD_EXP 101
28373: PUSH
28374: LD_VAR 0 1
28378: ARRAY
28379: PPUSH
28380: CALL_OW 255
28384: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28385: LD_ADDR_VAR 0 4
28389: PUSH
28390: LD_EXP 102
28394: PUSH
28395: LD_VAR 0 1
28399: ARRAY
28400: PUSH
28401: LD_VAR 0 2
28405: ARRAY
28406: PUSH
28407: LD_INT 1
28409: ARRAY
28410: PPUSH
28411: LD_EXP 102
28415: PUSH
28416: LD_VAR 0 1
28420: ARRAY
28421: PUSH
28422: LD_VAR 0 2
28426: ARRAY
28427: PUSH
28428: LD_INT 2
28430: ARRAY
28431: PPUSH
28432: CALL_OW 428
28436: ST_TO_ADDR
// if not tmp then
28437: LD_VAR 0 4
28441: NOT
28442: IFFALSE 28446
// continue ;
28444: GO 28361
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28446: LD_VAR 0 4
28450: PUSH
28451: LD_INT 81
28453: PUSH
28454: LD_VAR 0 3
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PPUSH
28463: CALL_OW 69
28467: IN
28468: PUSH
28469: LD_EXP 102
28473: PUSH
28474: LD_VAR 0 1
28478: ARRAY
28479: PUSH
28480: LD_VAR 0 2
28484: ARRAY
28485: PUSH
28486: LD_INT 1
28488: ARRAY
28489: PPUSH
28490: LD_EXP 102
28494: PUSH
28495: LD_VAR 0 1
28499: ARRAY
28500: PUSH
28501: LD_VAR 0 2
28505: ARRAY
28506: PUSH
28507: LD_INT 2
28509: ARRAY
28510: PPUSH
28511: CALL_OW 458
28515: AND
28516: IFFALSE 28610
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28518: LD_EXP 102
28522: PUSH
28523: LD_VAR 0 1
28527: ARRAY
28528: PUSH
28529: LD_VAR 0 2
28533: ARRAY
28534: PUSH
28535: LD_INT 1
28537: ARRAY
28538: PPUSH
28539: LD_EXP 102
28543: PUSH
28544: LD_VAR 0 1
28548: ARRAY
28549: PUSH
28550: LD_VAR 0 2
28554: ARRAY
28555: PUSH
28556: LD_INT 2
28558: ARRAY
28559: PPUSH
28560: LD_VAR 0 3
28564: PPUSH
28565: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28569: LD_ADDR_EXP 102
28573: PUSH
28574: LD_EXP 102
28578: PPUSH
28579: LD_VAR 0 1
28583: PPUSH
28584: LD_EXP 102
28588: PUSH
28589: LD_VAR 0 1
28593: ARRAY
28594: PPUSH
28595: LD_VAR 0 2
28599: PPUSH
28600: CALL_OW 3
28604: PPUSH
28605: CALL_OW 1
28609: ST_TO_ADDR
// end ; end ;
28610: GO 28361
28612: POP
28613: POP
// end ;
28614: GO 28279
28616: POP
28617: POP
// end ;
28618: PPOPN 4
28620: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28621: LD_INT 0
28623: PPUSH
28624: PPUSH
// result := false ;
28625: LD_ADDR_VAR 0 4
28629: PUSH
28630: LD_INT 0
28632: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28633: LD_VAR 0 1
28637: PPUSH
28638: CALL_OW 264
28642: PUSH
28643: LD_INT 81
28645: EQUAL
28646: NOT
28647: IFFALSE 28651
// exit ;
28649: GO 28891
// index := GetElementIndex ( minersList , unit ) ;
28651: LD_ADDR_VAR 0 5
28655: PUSH
28656: LD_EXP 101
28660: PPUSH
28661: LD_VAR 0 1
28665: PPUSH
28666: CALL 35012 0 2
28670: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28671: LD_EXP 102
28675: PUSH
28676: LD_VAR 0 5
28680: ARRAY
28681: PUSH
28682: LD_EXP 103
28686: GREATEREQUAL
28687: IFFALSE 28691
// exit ;
28689: GO 28891
// ComMoveXY ( unit , x , y ) ;
28691: LD_VAR 0 1
28695: PPUSH
28696: LD_VAR 0 2
28700: PPUSH
28701: LD_VAR 0 3
28705: PPUSH
28706: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28710: LD_INT 35
28712: PPUSH
28713: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28717: LD_VAR 0 1
28721: PPUSH
28722: LD_VAR 0 2
28726: PPUSH
28727: LD_VAR 0 3
28731: PPUSH
28732: CALL 66773 0 3
28736: NOT
28737: PUSH
28738: LD_VAR 0 1
28742: PPUSH
28743: CALL_OW 314
28747: AND
28748: IFFALSE 28752
// exit ;
28750: GO 28891
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28752: LD_VAR 0 2
28756: PPUSH
28757: LD_VAR 0 3
28761: PPUSH
28762: CALL_OW 428
28766: PUSH
28767: LD_VAR 0 1
28771: EQUAL
28772: PUSH
28773: LD_VAR 0 1
28777: PPUSH
28778: CALL_OW 314
28782: NOT
28783: AND
28784: IFFALSE 28710
// PlaySoundXY ( x , y , PlantMine ) ;
28786: LD_VAR 0 2
28790: PPUSH
28791: LD_VAR 0 3
28795: PPUSH
28796: LD_STRING PlantMine
28798: PPUSH
28799: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28803: LD_VAR 0 2
28807: PPUSH
28808: LD_VAR 0 3
28812: PPUSH
28813: LD_VAR 0 1
28817: PPUSH
28818: CALL_OW 255
28822: PPUSH
28823: LD_INT 0
28825: PPUSH
28826: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28830: LD_ADDR_EXP 102
28834: PUSH
28835: LD_EXP 102
28839: PPUSH
28840: LD_VAR 0 5
28844: PUSH
28845: LD_EXP 102
28849: PUSH
28850: LD_VAR 0 5
28854: ARRAY
28855: PUSH
28856: LD_INT 1
28858: PLUS
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PPUSH
28864: LD_VAR 0 2
28868: PUSH
28869: LD_VAR 0 3
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PPUSH
28878: CALL 35227 0 3
28882: ST_TO_ADDR
// result := true ;
28883: LD_ADDR_VAR 0 4
28887: PUSH
28888: LD_INT 1
28890: ST_TO_ADDR
// end ;
28891: LD_VAR 0 4
28895: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28896: LD_INT 0
28898: PPUSH
28899: PPUSH
28900: PPUSH
// if not unit in minersList then
28901: LD_VAR 0 1
28905: PUSH
28906: LD_EXP 101
28910: IN
28911: NOT
28912: IFFALSE 28916
// exit ;
28914: GO 29308
// index := GetElementIndex ( minersList , unit ) ;
28916: LD_ADDR_VAR 0 6
28920: PUSH
28921: LD_EXP 101
28925: PPUSH
28926: LD_VAR 0 1
28930: PPUSH
28931: CALL 35012 0 2
28935: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28936: LD_ADDR_VAR 0 5
28940: PUSH
28941: DOUBLE
28942: LD_EXP 102
28946: PUSH
28947: LD_VAR 0 6
28951: ARRAY
28952: INC
28953: ST_TO_ADDR
28954: LD_INT 1
28956: PUSH
28957: FOR_DOWNTO
28958: IFFALSE 29119
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28960: LD_EXP 102
28964: PUSH
28965: LD_VAR 0 6
28969: ARRAY
28970: PUSH
28971: LD_VAR 0 5
28975: ARRAY
28976: PUSH
28977: LD_INT 1
28979: ARRAY
28980: PUSH
28981: LD_VAR 0 2
28985: EQUAL
28986: PUSH
28987: LD_EXP 102
28991: PUSH
28992: LD_VAR 0 6
28996: ARRAY
28997: PUSH
28998: LD_VAR 0 5
29002: ARRAY
29003: PUSH
29004: LD_INT 2
29006: ARRAY
29007: PUSH
29008: LD_VAR 0 3
29012: EQUAL
29013: AND
29014: IFFALSE 29117
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29016: LD_EXP 102
29020: PUSH
29021: LD_VAR 0 6
29025: ARRAY
29026: PUSH
29027: LD_VAR 0 5
29031: ARRAY
29032: PUSH
29033: LD_INT 1
29035: ARRAY
29036: PPUSH
29037: LD_EXP 102
29041: PUSH
29042: LD_VAR 0 6
29046: ARRAY
29047: PUSH
29048: LD_VAR 0 5
29052: ARRAY
29053: PUSH
29054: LD_INT 2
29056: ARRAY
29057: PPUSH
29058: LD_VAR 0 1
29062: PPUSH
29063: CALL_OW 255
29067: PPUSH
29068: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29072: LD_ADDR_EXP 102
29076: PUSH
29077: LD_EXP 102
29081: PPUSH
29082: LD_VAR 0 6
29086: PPUSH
29087: LD_EXP 102
29091: PUSH
29092: LD_VAR 0 6
29096: ARRAY
29097: PPUSH
29098: LD_VAR 0 5
29102: PPUSH
29103: CALL_OW 3
29107: PPUSH
29108: CALL_OW 1
29112: ST_TO_ADDR
// exit ;
29113: POP
29114: POP
29115: GO 29308
// end ; end ;
29117: GO 28957
29119: POP
29120: POP
// for i := minerMinesList [ index ] downto 1 do
29121: LD_ADDR_VAR 0 5
29125: PUSH
29126: DOUBLE
29127: LD_EXP 102
29131: PUSH
29132: LD_VAR 0 6
29136: ARRAY
29137: INC
29138: ST_TO_ADDR
29139: LD_INT 1
29141: PUSH
29142: FOR_DOWNTO
29143: IFFALSE 29306
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
29145: LD_EXP 102
29149: PUSH
29150: LD_VAR 0 6
29154: ARRAY
29155: PUSH
29156: LD_VAR 0 5
29160: ARRAY
29161: PUSH
29162: LD_INT 1
29164: ARRAY
29165: PPUSH
29166: LD_EXP 102
29170: PUSH
29171: LD_VAR 0 6
29175: ARRAY
29176: PUSH
29177: LD_VAR 0 5
29181: ARRAY
29182: PUSH
29183: LD_INT 2
29185: ARRAY
29186: PPUSH
29187: LD_VAR 0 2
29191: PPUSH
29192: LD_VAR 0 3
29196: PPUSH
29197: CALL_OW 298
29201: PUSH
29202: LD_INT 6
29204: LESS
29205: IFFALSE 29304
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29207: LD_EXP 102
29211: PUSH
29212: LD_VAR 0 6
29216: ARRAY
29217: PUSH
29218: LD_VAR 0 5
29222: ARRAY
29223: PUSH
29224: LD_INT 1
29226: ARRAY
29227: PPUSH
29228: LD_EXP 102
29232: PUSH
29233: LD_VAR 0 6
29237: ARRAY
29238: PUSH
29239: LD_VAR 0 5
29243: ARRAY
29244: PUSH
29245: LD_INT 2
29247: ARRAY
29248: PPUSH
29249: LD_VAR 0 1
29253: PPUSH
29254: CALL_OW 255
29258: PPUSH
29259: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29263: LD_ADDR_EXP 102
29267: PUSH
29268: LD_EXP 102
29272: PPUSH
29273: LD_VAR 0 6
29277: PPUSH
29278: LD_EXP 102
29282: PUSH
29283: LD_VAR 0 6
29287: ARRAY
29288: PPUSH
29289: LD_VAR 0 5
29293: PPUSH
29294: CALL_OW 3
29298: PPUSH
29299: CALL_OW 1
29303: ST_TO_ADDR
// end ; end ;
29304: GO 29142
29306: POP
29307: POP
// end ;
29308: LD_VAR 0 4
29312: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29313: LD_INT 0
29315: PPUSH
29316: PPUSH
29317: PPUSH
29318: PPUSH
29319: PPUSH
29320: PPUSH
29321: PPUSH
29322: PPUSH
29323: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29324: LD_VAR 0 1
29328: PPUSH
29329: CALL_OW 264
29333: PUSH
29334: LD_INT 81
29336: EQUAL
29337: NOT
29338: PUSH
29339: LD_VAR 0 1
29343: PUSH
29344: LD_EXP 101
29348: IN
29349: NOT
29350: OR
29351: IFFALSE 29355
// exit ;
29353: GO 29677
// index := GetElementIndex ( minersList , unit ) ;
29355: LD_ADDR_VAR 0 6
29359: PUSH
29360: LD_EXP 101
29364: PPUSH
29365: LD_VAR 0 1
29369: PPUSH
29370: CALL 35012 0 2
29374: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29375: LD_ADDR_VAR 0 8
29379: PUSH
29380: LD_EXP 103
29384: PUSH
29385: LD_EXP 102
29389: PUSH
29390: LD_VAR 0 6
29394: ARRAY
29395: MINUS
29396: ST_TO_ADDR
// if not minesFreeAmount then
29397: LD_VAR 0 8
29401: NOT
29402: IFFALSE 29406
// exit ;
29404: GO 29677
// tmp := [ ] ;
29406: LD_ADDR_VAR 0 7
29410: PUSH
29411: EMPTY
29412: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29413: LD_ADDR_VAR 0 5
29417: PUSH
29418: DOUBLE
29419: LD_INT 1
29421: DEC
29422: ST_TO_ADDR
29423: LD_VAR 0 8
29427: PUSH
29428: FOR_TO
29429: IFFALSE 29624
// begin _d := rand ( 0 , 5 ) ;
29431: LD_ADDR_VAR 0 11
29435: PUSH
29436: LD_INT 0
29438: PPUSH
29439: LD_INT 5
29441: PPUSH
29442: CALL_OW 12
29446: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29447: LD_ADDR_VAR 0 12
29451: PUSH
29452: LD_INT 2
29454: PPUSH
29455: LD_INT 6
29457: PPUSH
29458: CALL_OW 12
29462: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29463: LD_ADDR_VAR 0 9
29467: PUSH
29468: LD_VAR 0 2
29472: PPUSH
29473: LD_VAR 0 11
29477: PPUSH
29478: LD_VAR 0 12
29482: PPUSH
29483: CALL_OW 272
29487: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29488: LD_ADDR_VAR 0 10
29492: PUSH
29493: LD_VAR 0 3
29497: PPUSH
29498: LD_VAR 0 11
29502: PPUSH
29503: LD_VAR 0 12
29507: PPUSH
29508: CALL_OW 273
29512: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29513: LD_VAR 0 9
29517: PPUSH
29518: LD_VAR 0 10
29522: PPUSH
29523: CALL_OW 488
29527: PUSH
29528: LD_VAR 0 9
29532: PUSH
29533: LD_VAR 0 10
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_VAR 0 7
29546: IN
29547: NOT
29548: AND
29549: PUSH
29550: LD_VAR 0 9
29554: PPUSH
29555: LD_VAR 0 10
29559: PPUSH
29560: CALL_OW 458
29564: NOT
29565: AND
29566: IFFALSE 29608
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29568: LD_ADDR_VAR 0 7
29572: PUSH
29573: LD_VAR 0 7
29577: PPUSH
29578: LD_VAR 0 7
29582: PUSH
29583: LD_INT 1
29585: PLUS
29586: PPUSH
29587: LD_VAR 0 9
29591: PUSH
29592: LD_VAR 0 10
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: PPUSH
29601: CALL_OW 1
29605: ST_TO_ADDR
29606: GO 29622
// i := i - 1 ;
29608: LD_ADDR_VAR 0 5
29612: PUSH
29613: LD_VAR 0 5
29617: PUSH
29618: LD_INT 1
29620: MINUS
29621: ST_TO_ADDR
// end ;
29622: GO 29428
29624: POP
29625: POP
// for i in tmp do
29626: LD_ADDR_VAR 0 5
29630: PUSH
29631: LD_VAR 0 7
29635: PUSH
29636: FOR_IN
29637: IFFALSE 29675
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29639: LD_VAR 0 1
29643: PPUSH
29644: LD_VAR 0 5
29648: PUSH
29649: LD_INT 1
29651: ARRAY
29652: PPUSH
29653: LD_VAR 0 5
29657: PUSH
29658: LD_INT 2
29660: ARRAY
29661: PPUSH
29662: CALL 28621 0 3
29666: NOT
29667: IFFALSE 29673
// exit ;
29669: POP
29670: POP
29671: GO 29677
29673: GO 29636
29675: POP
29676: POP
// end ;
29677: LD_VAR 0 4
29681: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
29682: LD_INT 0
29684: PPUSH
29685: PPUSH
29686: PPUSH
29687: PPUSH
29688: PPUSH
29689: PPUSH
29690: PPUSH
29691: PPUSH
29692: PPUSH
// if GetClass ( unit ) <> class_sniper then
29693: LD_VAR 0 1
29697: PPUSH
29698: CALL_OW 257
29702: PUSH
29703: LD_INT 5
29705: NONEQUAL
29706: IFFALSE 29710
// exit ;
29708: GO 30176
// dist := 8 ;
29710: LD_ADDR_VAR 0 5
29714: PUSH
29715: LD_INT 8
29717: ST_TO_ADDR
// viewRange := 12 ;
29718: LD_ADDR_VAR 0 8
29722: PUSH
29723: LD_INT 12
29725: ST_TO_ADDR
// side := GetSide ( unit ) ;
29726: LD_ADDR_VAR 0 6
29730: PUSH
29731: LD_VAR 0 1
29735: PPUSH
29736: CALL_OW 255
29740: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29741: LD_INT 61
29743: PPUSH
29744: LD_VAR 0 6
29748: PPUSH
29749: CALL_OW 321
29753: PUSH
29754: LD_INT 2
29756: EQUAL
29757: IFFALSE 29767
// viewRange := 16 ;
29759: LD_ADDR_VAR 0 8
29763: PUSH
29764: LD_INT 16
29766: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29767: LD_VAR 0 1
29771: PPUSH
29772: LD_VAR 0 2
29776: PPUSH
29777: LD_VAR 0 3
29781: PPUSH
29782: CALL_OW 297
29786: PUSH
29787: LD_VAR 0 5
29791: GREATER
29792: IFFALSE 29871
// begin ComMoveXY ( unit , x , y ) ;
29794: LD_VAR 0 1
29798: PPUSH
29799: LD_VAR 0 2
29803: PPUSH
29804: LD_VAR 0 3
29808: PPUSH
29809: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29813: LD_INT 35
29815: PPUSH
29816: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29820: LD_VAR 0 1
29824: PPUSH
29825: LD_VAR 0 2
29829: PPUSH
29830: LD_VAR 0 3
29834: PPUSH
29835: CALL 66773 0 3
29839: NOT
29840: IFFALSE 29844
// exit ;
29842: GO 30176
// until GetDistUnitXY ( unit , x , y ) < dist ;
29844: LD_VAR 0 1
29848: PPUSH
29849: LD_VAR 0 2
29853: PPUSH
29854: LD_VAR 0 3
29858: PPUSH
29859: CALL_OW 297
29863: PUSH
29864: LD_VAR 0 5
29868: LESS
29869: IFFALSE 29813
// end ; ComTurnXY ( unit , x , y ) ;
29871: LD_VAR 0 1
29875: PPUSH
29876: LD_VAR 0 2
29880: PPUSH
29881: LD_VAR 0 3
29885: PPUSH
29886: CALL_OW 118
// repeat if Multiplayer then
29890: LD_OWVAR 4
29894: IFFALSE 29905
// wait ( 35 ) else
29896: LD_INT 35
29898: PPUSH
29899: CALL_OW 67
29903: GO 29912
// wait ( 5 ) ;
29905: LD_INT 5
29907: PPUSH
29908: CALL_OW 67
// _d := GetDir ( unit ) ;
29912: LD_ADDR_VAR 0 11
29916: PUSH
29917: LD_VAR 0 1
29921: PPUSH
29922: CALL_OW 254
29926: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
29927: LD_ADDR_VAR 0 7
29931: PUSH
29932: LD_VAR 0 1
29936: PPUSH
29937: CALL_OW 250
29941: PPUSH
29942: LD_VAR 0 1
29946: PPUSH
29947: CALL_OW 251
29951: PPUSH
29952: LD_VAR 0 2
29956: PPUSH
29957: LD_VAR 0 3
29961: PPUSH
29962: CALL 69381 0 4
29966: ST_TO_ADDR
// until dir = _d ;
29967: LD_VAR 0 7
29971: PUSH
29972: LD_VAR 0 11
29976: EQUAL
29977: IFFALSE 29890
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
29979: LD_ADDR_VAR 0 9
29983: PUSH
29984: LD_VAR 0 1
29988: PPUSH
29989: CALL_OW 250
29993: PPUSH
29994: LD_VAR 0 7
29998: PPUSH
29999: LD_VAR 0 5
30003: PPUSH
30004: CALL_OW 272
30008: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
30009: LD_ADDR_VAR 0 10
30013: PUSH
30014: LD_VAR 0 1
30018: PPUSH
30019: CALL_OW 251
30023: PPUSH
30024: LD_VAR 0 7
30028: PPUSH
30029: LD_VAR 0 5
30033: PPUSH
30034: CALL_OW 273
30038: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30039: LD_VAR 0 9
30043: PPUSH
30044: LD_VAR 0 10
30048: PPUSH
30049: CALL_OW 488
30053: NOT
30054: IFFALSE 30058
// exit ;
30056: GO 30176
// ComAnimCustom ( unit , 1 ) ;
30058: LD_VAR 0 1
30062: PPUSH
30063: LD_INT 1
30065: PPUSH
30066: CALL_OW 592
// p := 0 ;
30070: LD_ADDR_VAR 0 12
30074: PUSH
30075: LD_INT 0
30077: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
30078: LD_VAR 0 9
30082: PPUSH
30083: LD_VAR 0 10
30087: PPUSH
30088: LD_VAR 0 6
30092: PPUSH
30093: LD_VAR 0 8
30097: PPUSH
30098: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
30102: LD_INT 35
30104: PPUSH
30105: CALL_OW 67
// p := Inc ( p ) ;
30109: LD_ADDR_VAR 0 12
30113: PUSH
30114: LD_VAR 0 12
30118: PPUSH
30119: CALL 69337 0 1
30123: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
30124: LD_VAR 0 12
30128: PUSH
30129: LD_INT 3
30131: EQUAL
30132: PUSH
30133: LD_VAR 0 1
30137: PPUSH
30138: CALL_OW 302
30142: NOT
30143: OR
30144: PUSH
30145: LD_VAR 0 1
30149: PPUSH
30150: CALL_OW 301
30154: OR
30155: IFFALSE 30102
// RemoveSeeing ( _x , _y , side ) ;
30157: LD_VAR 0 9
30161: PPUSH
30162: LD_VAR 0 10
30166: PPUSH
30167: LD_VAR 0 6
30171: PPUSH
30172: CALL_OW 331
// end ; end_of_file
30176: LD_VAR 0 4
30180: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
30181: LD_INT 0
30183: PPUSH
30184: PPUSH
// if exist_mode then
30185: LD_VAR 0 2
30189: IFFALSE 30235
// begin unit := CreateCharacter ( prefix & ident ) ;
30191: LD_ADDR_VAR 0 5
30195: PUSH
30196: LD_VAR 0 3
30200: PUSH
30201: LD_VAR 0 1
30205: STR
30206: PPUSH
30207: CALL_OW 34
30211: ST_TO_ADDR
// if unit then
30212: LD_VAR 0 5
30216: IFFALSE 30233
// DeleteCharacters ( prefix & ident ) ;
30218: LD_VAR 0 3
30222: PUSH
30223: LD_VAR 0 1
30227: STR
30228: PPUSH
30229: CALL_OW 40
// end else
30233: GO 30250
// unit := NewCharacter ( ident ) ;
30235: LD_ADDR_VAR 0 5
30239: PUSH
30240: LD_VAR 0 1
30244: PPUSH
30245: CALL_OW 25
30249: ST_TO_ADDR
// result := unit ;
30250: LD_ADDR_VAR 0 4
30254: PUSH
30255: LD_VAR 0 5
30259: ST_TO_ADDR
// end ;
30260: LD_VAR 0 4
30264: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
30265: LD_INT 0
30267: PPUSH
30268: PPUSH
// if exist_mode then
30269: LD_VAR 0 2
30273: IFFALSE 30298
// unit := CreateCharacter ( prefix & ident ) else
30275: LD_ADDR_VAR 0 5
30279: PUSH
30280: LD_VAR 0 3
30284: PUSH
30285: LD_VAR 0 1
30289: STR
30290: PPUSH
30291: CALL_OW 34
30295: ST_TO_ADDR
30296: GO 30313
// unit := NewCharacter ( ident ) ;
30298: LD_ADDR_VAR 0 5
30302: PUSH
30303: LD_VAR 0 1
30307: PPUSH
30308: CALL_OW 25
30312: ST_TO_ADDR
// result := unit ;
30313: LD_ADDR_VAR 0 4
30317: PUSH
30318: LD_VAR 0 5
30322: ST_TO_ADDR
// end ;
30323: LD_VAR 0 4
30327: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
30328: LD_INT 0
30330: PPUSH
30331: PPUSH
// if not side or not nation then
30332: LD_VAR 0 1
30336: NOT
30337: PUSH
30338: LD_VAR 0 2
30342: NOT
30343: OR
30344: IFFALSE 30348
// exit ;
30346: GO 31116
// case nation of nation_american :
30348: LD_VAR 0 2
30352: PUSH
30353: LD_INT 1
30355: DOUBLE
30356: EQUAL
30357: IFTRUE 30361
30359: GO 30575
30361: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30362: LD_ADDR_VAR 0 4
30366: PUSH
30367: LD_INT 35
30369: PUSH
30370: LD_INT 45
30372: PUSH
30373: LD_INT 46
30375: PUSH
30376: LD_INT 47
30378: PUSH
30379: LD_INT 82
30381: PUSH
30382: LD_INT 83
30384: PUSH
30385: LD_INT 84
30387: PUSH
30388: LD_INT 85
30390: PUSH
30391: LD_INT 86
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: LD_INT 2
30399: PUSH
30400: LD_INT 6
30402: PUSH
30403: LD_INT 15
30405: PUSH
30406: LD_INT 16
30408: PUSH
30409: LD_INT 7
30411: PUSH
30412: LD_INT 12
30414: PUSH
30415: LD_INT 13
30417: PUSH
30418: LD_INT 10
30420: PUSH
30421: LD_INT 14
30423: PUSH
30424: LD_INT 20
30426: PUSH
30427: LD_INT 21
30429: PUSH
30430: LD_INT 22
30432: PUSH
30433: LD_INT 25
30435: PUSH
30436: LD_INT 32
30438: PUSH
30439: LD_INT 27
30441: PUSH
30442: LD_INT 36
30444: PUSH
30445: LD_INT 69
30447: PUSH
30448: LD_INT 39
30450: PUSH
30451: LD_INT 34
30453: PUSH
30454: LD_INT 40
30456: PUSH
30457: LD_INT 48
30459: PUSH
30460: LD_INT 49
30462: PUSH
30463: LD_INT 50
30465: PUSH
30466: LD_INT 51
30468: PUSH
30469: LD_INT 52
30471: PUSH
30472: LD_INT 53
30474: PUSH
30475: LD_INT 54
30477: PUSH
30478: LD_INT 55
30480: PUSH
30481: LD_INT 56
30483: PUSH
30484: LD_INT 57
30486: PUSH
30487: LD_INT 58
30489: PUSH
30490: LD_INT 59
30492: PUSH
30493: LD_INT 60
30495: PUSH
30496: LD_INT 61
30498: PUSH
30499: LD_INT 62
30501: PUSH
30502: LD_INT 80
30504: PUSH
30505: LD_INT 82
30507: PUSH
30508: LD_INT 83
30510: PUSH
30511: LD_INT 84
30513: PUSH
30514: LD_INT 85
30516: PUSH
30517: LD_INT 86
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: LIST
30524: LIST
30525: LIST
30526: LIST
30527: LIST
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: LIST
30533: LIST
30534: LIST
30535: LIST
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: LIST
30555: LIST
30556: LIST
30557: LIST
30558: LIST
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: ST_TO_ADDR
30573: GO 31040
30575: LD_INT 2
30577: DOUBLE
30578: EQUAL
30579: IFTRUE 30583
30581: GO 30809
30583: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30584: LD_ADDR_VAR 0 4
30588: PUSH
30589: LD_INT 35
30591: PUSH
30592: LD_INT 45
30594: PUSH
30595: LD_INT 46
30597: PUSH
30598: LD_INT 47
30600: PUSH
30601: LD_INT 82
30603: PUSH
30604: LD_INT 83
30606: PUSH
30607: LD_INT 84
30609: PUSH
30610: LD_INT 85
30612: PUSH
30613: LD_INT 87
30615: PUSH
30616: LD_INT 70
30618: PUSH
30619: LD_INT 1
30621: PUSH
30622: LD_INT 11
30624: PUSH
30625: LD_INT 3
30627: PUSH
30628: LD_INT 4
30630: PUSH
30631: LD_INT 5
30633: PUSH
30634: LD_INT 6
30636: PUSH
30637: LD_INT 15
30639: PUSH
30640: LD_INT 18
30642: PUSH
30643: LD_INT 7
30645: PUSH
30646: LD_INT 17
30648: PUSH
30649: LD_INT 8
30651: PUSH
30652: LD_INT 20
30654: PUSH
30655: LD_INT 21
30657: PUSH
30658: LD_INT 22
30660: PUSH
30661: LD_INT 72
30663: PUSH
30664: LD_INT 26
30666: PUSH
30667: LD_INT 69
30669: PUSH
30670: LD_INT 39
30672: PUSH
30673: LD_INT 40
30675: PUSH
30676: LD_INT 41
30678: PUSH
30679: LD_INT 42
30681: PUSH
30682: LD_INT 43
30684: PUSH
30685: LD_INT 48
30687: PUSH
30688: LD_INT 49
30690: PUSH
30691: LD_INT 50
30693: PUSH
30694: LD_INT 51
30696: PUSH
30697: LD_INT 52
30699: PUSH
30700: LD_INT 53
30702: PUSH
30703: LD_INT 54
30705: PUSH
30706: LD_INT 55
30708: PUSH
30709: LD_INT 56
30711: PUSH
30712: LD_INT 60
30714: PUSH
30715: LD_INT 61
30717: PUSH
30718: LD_INT 62
30720: PUSH
30721: LD_INT 66
30723: PUSH
30724: LD_INT 67
30726: PUSH
30727: LD_INT 68
30729: PUSH
30730: LD_INT 81
30732: PUSH
30733: LD_INT 82
30735: PUSH
30736: LD_INT 83
30738: PUSH
30739: LD_INT 84
30741: PUSH
30742: LD_INT 85
30744: PUSH
30745: LD_INT 87
30747: PUSH
30748: LD_INT 88
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: LIST
30761: LIST
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: LIST
30805: LIST
30806: ST_TO_ADDR
30807: GO 31040
30809: LD_INT 3
30811: DOUBLE
30812: EQUAL
30813: IFTRUE 30817
30815: GO 31039
30817: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30818: LD_ADDR_VAR 0 4
30822: PUSH
30823: LD_INT 46
30825: PUSH
30826: LD_INT 47
30828: PUSH
30829: LD_INT 1
30831: PUSH
30832: LD_INT 2
30834: PUSH
30835: LD_INT 82
30837: PUSH
30838: LD_INT 83
30840: PUSH
30841: LD_INT 84
30843: PUSH
30844: LD_INT 85
30846: PUSH
30847: LD_INT 86
30849: PUSH
30850: LD_INT 11
30852: PUSH
30853: LD_INT 9
30855: PUSH
30856: LD_INT 20
30858: PUSH
30859: LD_INT 19
30861: PUSH
30862: LD_INT 21
30864: PUSH
30865: LD_INT 24
30867: PUSH
30868: LD_INT 22
30870: PUSH
30871: LD_INT 25
30873: PUSH
30874: LD_INT 28
30876: PUSH
30877: LD_INT 29
30879: PUSH
30880: LD_INT 30
30882: PUSH
30883: LD_INT 31
30885: PUSH
30886: LD_INT 37
30888: PUSH
30889: LD_INT 38
30891: PUSH
30892: LD_INT 32
30894: PUSH
30895: LD_INT 27
30897: PUSH
30898: LD_INT 33
30900: PUSH
30901: LD_INT 69
30903: PUSH
30904: LD_INT 39
30906: PUSH
30907: LD_INT 34
30909: PUSH
30910: LD_INT 40
30912: PUSH
30913: LD_INT 71
30915: PUSH
30916: LD_INT 23
30918: PUSH
30919: LD_INT 44
30921: PUSH
30922: LD_INT 48
30924: PUSH
30925: LD_INT 49
30927: PUSH
30928: LD_INT 50
30930: PUSH
30931: LD_INT 51
30933: PUSH
30934: LD_INT 52
30936: PUSH
30937: LD_INT 53
30939: PUSH
30940: LD_INT 54
30942: PUSH
30943: LD_INT 55
30945: PUSH
30946: LD_INT 56
30948: PUSH
30949: LD_INT 57
30951: PUSH
30952: LD_INT 58
30954: PUSH
30955: LD_INT 59
30957: PUSH
30958: LD_INT 63
30960: PUSH
30961: LD_INT 64
30963: PUSH
30964: LD_INT 65
30966: PUSH
30967: LD_INT 82
30969: PUSH
30970: LD_INT 83
30972: PUSH
30973: LD_INT 84
30975: PUSH
30976: LD_INT 85
30978: PUSH
30979: LD_INT 86
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: LIST
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: LIST
31016: LIST
31017: LIST
31018: LIST
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: LIST
31029: LIST
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: ST_TO_ADDR
31037: GO 31040
31039: POP
// if state > - 1 and state < 3 then
31040: LD_VAR 0 3
31044: PUSH
31045: LD_INT 1
31047: NEG
31048: GREATER
31049: PUSH
31050: LD_VAR 0 3
31054: PUSH
31055: LD_INT 3
31057: LESS
31058: AND
31059: IFFALSE 31116
// for i in result do
31061: LD_ADDR_VAR 0 5
31065: PUSH
31066: LD_VAR 0 4
31070: PUSH
31071: FOR_IN
31072: IFFALSE 31114
// if GetTech ( i , side ) <> state then
31074: LD_VAR 0 5
31078: PPUSH
31079: LD_VAR 0 1
31083: PPUSH
31084: CALL_OW 321
31088: PUSH
31089: LD_VAR 0 3
31093: NONEQUAL
31094: IFFALSE 31112
// result := result diff i ;
31096: LD_ADDR_VAR 0 4
31100: PUSH
31101: LD_VAR 0 4
31105: PUSH
31106: LD_VAR 0 5
31110: DIFF
31111: ST_TO_ADDR
31112: GO 31071
31114: POP
31115: POP
// end ;
31116: LD_VAR 0 4
31120: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31121: LD_INT 0
31123: PPUSH
31124: PPUSH
31125: PPUSH
// result := true ;
31126: LD_ADDR_VAR 0 3
31130: PUSH
31131: LD_INT 1
31133: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31134: LD_ADDR_VAR 0 5
31138: PUSH
31139: LD_VAR 0 2
31143: PPUSH
31144: CALL_OW 480
31148: ST_TO_ADDR
// if not tmp then
31149: LD_VAR 0 5
31153: NOT
31154: IFFALSE 31158
// exit ;
31156: GO 31207
// for i in tmp do
31158: LD_ADDR_VAR 0 4
31162: PUSH
31163: LD_VAR 0 5
31167: PUSH
31168: FOR_IN
31169: IFFALSE 31205
// if GetTech ( i , side ) <> state_researched then
31171: LD_VAR 0 4
31175: PPUSH
31176: LD_VAR 0 1
31180: PPUSH
31181: CALL_OW 321
31185: PUSH
31186: LD_INT 2
31188: NONEQUAL
31189: IFFALSE 31203
// begin result := false ;
31191: LD_ADDR_VAR 0 3
31195: PUSH
31196: LD_INT 0
31198: ST_TO_ADDR
// exit ;
31199: POP
31200: POP
31201: GO 31207
// end ;
31203: GO 31168
31205: POP
31206: POP
// end ;
31207: LD_VAR 0 3
31211: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
31212: LD_INT 0
31214: PPUSH
31215: PPUSH
31216: PPUSH
31217: PPUSH
31218: PPUSH
31219: PPUSH
31220: PPUSH
31221: PPUSH
31222: PPUSH
31223: PPUSH
31224: PPUSH
31225: PPUSH
31226: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
31227: LD_VAR 0 1
31231: NOT
31232: PUSH
31233: LD_VAR 0 1
31237: PPUSH
31238: CALL_OW 257
31242: PUSH
31243: LD_INT 9
31245: NONEQUAL
31246: OR
31247: IFFALSE 31251
// exit ;
31249: GO 31824
// side := GetSide ( unit ) ;
31251: LD_ADDR_VAR 0 9
31255: PUSH
31256: LD_VAR 0 1
31260: PPUSH
31261: CALL_OW 255
31265: ST_TO_ADDR
// tech_space := tech_spacanom ;
31266: LD_ADDR_VAR 0 12
31270: PUSH
31271: LD_INT 29
31273: ST_TO_ADDR
// tech_time := tech_taurad ;
31274: LD_ADDR_VAR 0 13
31278: PUSH
31279: LD_INT 28
31281: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
31282: LD_ADDR_VAR 0 11
31286: PUSH
31287: LD_VAR 0 1
31291: PPUSH
31292: CALL_OW 310
31296: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
31297: LD_VAR 0 11
31301: PPUSH
31302: CALL_OW 247
31306: PUSH
31307: LD_INT 2
31309: EQUAL
31310: IFFALSE 31314
// exit ;
31312: GO 31824
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31314: LD_ADDR_VAR 0 8
31318: PUSH
31319: LD_INT 81
31321: PUSH
31322: LD_VAR 0 9
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 3
31333: PUSH
31334: LD_INT 21
31336: PUSH
31337: LD_INT 3
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: EMPTY
31345: LIST
31346: LIST
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PPUSH
31352: CALL_OW 69
31356: ST_TO_ADDR
// if not tmp then
31357: LD_VAR 0 8
31361: NOT
31362: IFFALSE 31366
// exit ;
31364: GO 31824
// if in_unit then
31366: LD_VAR 0 11
31370: IFFALSE 31394
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31372: LD_ADDR_VAR 0 10
31376: PUSH
31377: LD_VAR 0 8
31381: PPUSH
31382: LD_VAR 0 11
31386: PPUSH
31387: CALL_OW 74
31391: ST_TO_ADDR
31392: GO 31414
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31394: LD_ADDR_VAR 0 10
31398: PUSH
31399: LD_VAR 0 8
31403: PPUSH
31404: LD_VAR 0 1
31408: PPUSH
31409: CALL_OW 74
31413: ST_TO_ADDR
// if not enemy then
31414: LD_VAR 0 10
31418: NOT
31419: IFFALSE 31423
// exit ;
31421: GO 31824
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31423: LD_VAR 0 11
31427: PUSH
31428: LD_VAR 0 11
31432: PPUSH
31433: LD_VAR 0 10
31437: PPUSH
31438: CALL_OW 296
31442: PUSH
31443: LD_INT 13
31445: GREATER
31446: AND
31447: PUSH
31448: LD_VAR 0 1
31452: PPUSH
31453: LD_VAR 0 10
31457: PPUSH
31458: CALL_OW 296
31462: PUSH
31463: LD_INT 12
31465: GREATER
31466: OR
31467: IFFALSE 31471
// exit ;
31469: GO 31824
// missile := [ 1 ] ;
31471: LD_ADDR_VAR 0 14
31475: PUSH
31476: LD_INT 1
31478: PUSH
31479: EMPTY
31480: LIST
31481: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31482: LD_VAR 0 9
31486: PPUSH
31487: LD_VAR 0 12
31491: PPUSH
31492: CALL_OW 325
31496: IFFALSE 31525
// missile := Replace ( missile , missile + 1 , 2 ) ;
31498: LD_ADDR_VAR 0 14
31502: PUSH
31503: LD_VAR 0 14
31507: PPUSH
31508: LD_VAR 0 14
31512: PUSH
31513: LD_INT 1
31515: PLUS
31516: PPUSH
31517: LD_INT 2
31519: PPUSH
31520: CALL_OW 1
31524: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31525: LD_VAR 0 9
31529: PPUSH
31530: LD_VAR 0 13
31534: PPUSH
31535: CALL_OW 325
31539: PUSH
31540: LD_VAR 0 10
31544: PPUSH
31545: CALL_OW 255
31549: PPUSH
31550: LD_VAR 0 13
31554: PPUSH
31555: CALL_OW 325
31559: NOT
31560: AND
31561: IFFALSE 31590
// missile := Replace ( missile , missile + 1 , 3 ) ;
31563: LD_ADDR_VAR 0 14
31567: PUSH
31568: LD_VAR 0 14
31572: PPUSH
31573: LD_VAR 0 14
31577: PUSH
31578: LD_INT 1
31580: PLUS
31581: PPUSH
31582: LD_INT 3
31584: PPUSH
31585: CALL_OW 1
31589: ST_TO_ADDR
// if missile < 2 then
31590: LD_VAR 0 14
31594: PUSH
31595: LD_INT 2
31597: LESS
31598: IFFALSE 31602
// exit ;
31600: GO 31824
// x := GetX ( enemy ) ;
31602: LD_ADDR_VAR 0 4
31606: PUSH
31607: LD_VAR 0 10
31611: PPUSH
31612: CALL_OW 250
31616: ST_TO_ADDR
// y := GetY ( enemy ) ;
31617: LD_ADDR_VAR 0 5
31621: PUSH
31622: LD_VAR 0 10
31626: PPUSH
31627: CALL_OW 251
31631: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31632: LD_ADDR_VAR 0 6
31636: PUSH
31637: LD_VAR 0 4
31641: PUSH
31642: LD_INT 1
31644: NEG
31645: PPUSH
31646: LD_INT 1
31648: PPUSH
31649: CALL_OW 12
31653: PLUS
31654: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31655: LD_ADDR_VAR 0 7
31659: PUSH
31660: LD_VAR 0 5
31664: PUSH
31665: LD_INT 1
31667: NEG
31668: PPUSH
31669: LD_INT 1
31671: PPUSH
31672: CALL_OW 12
31676: PLUS
31677: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31678: LD_VAR 0 6
31682: PPUSH
31683: LD_VAR 0 7
31687: PPUSH
31688: CALL_OW 488
31692: NOT
31693: IFFALSE 31715
// begin _x := x ;
31695: LD_ADDR_VAR 0 6
31699: PUSH
31700: LD_VAR 0 4
31704: ST_TO_ADDR
// _y := y ;
31705: LD_ADDR_VAR 0 7
31709: PUSH
31710: LD_VAR 0 5
31714: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31715: LD_ADDR_VAR 0 3
31719: PUSH
31720: LD_INT 1
31722: PPUSH
31723: LD_VAR 0 14
31727: PPUSH
31728: CALL_OW 12
31732: ST_TO_ADDR
// case i of 1 :
31733: LD_VAR 0 3
31737: PUSH
31738: LD_INT 1
31740: DOUBLE
31741: EQUAL
31742: IFTRUE 31746
31744: GO 31763
31746: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31747: LD_VAR 0 1
31751: PPUSH
31752: LD_VAR 0 10
31756: PPUSH
31757: CALL_OW 115
31761: GO 31824
31763: LD_INT 2
31765: DOUBLE
31766: EQUAL
31767: IFTRUE 31771
31769: GO 31793
31771: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31772: LD_VAR 0 1
31776: PPUSH
31777: LD_VAR 0 6
31781: PPUSH
31782: LD_VAR 0 7
31786: PPUSH
31787: CALL_OW 153
31791: GO 31824
31793: LD_INT 3
31795: DOUBLE
31796: EQUAL
31797: IFTRUE 31801
31799: GO 31823
31801: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31802: LD_VAR 0 1
31806: PPUSH
31807: LD_VAR 0 6
31811: PPUSH
31812: LD_VAR 0 7
31816: PPUSH
31817: CALL_OW 154
31821: GO 31824
31823: POP
// end ;
31824: LD_VAR 0 2
31828: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31829: LD_INT 0
31831: PPUSH
31832: PPUSH
31833: PPUSH
31834: PPUSH
31835: PPUSH
31836: PPUSH
// if not unit or not building then
31837: LD_VAR 0 1
31841: NOT
31842: PUSH
31843: LD_VAR 0 2
31847: NOT
31848: OR
31849: IFFALSE 31853
// exit ;
31851: GO 32011
// x := GetX ( building ) ;
31853: LD_ADDR_VAR 0 5
31857: PUSH
31858: LD_VAR 0 2
31862: PPUSH
31863: CALL_OW 250
31867: ST_TO_ADDR
// y := GetY ( building ) ;
31868: LD_ADDR_VAR 0 6
31872: PUSH
31873: LD_VAR 0 2
31877: PPUSH
31878: CALL_OW 251
31882: ST_TO_ADDR
// for i = 0 to 5 do
31883: LD_ADDR_VAR 0 4
31887: PUSH
31888: DOUBLE
31889: LD_INT 0
31891: DEC
31892: ST_TO_ADDR
31893: LD_INT 5
31895: PUSH
31896: FOR_TO
31897: IFFALSE 32009
// begin _x := ShiftX ( x , i , 3 ) ;
31899: LD_ADDR_VAR 0 7
31903: PUSH
31904: LD_VAR 0 5
31908: PPUSH
31909: LD_VAR 0 4
31913: PPUSH
31914: LD_INT 3
31916: PPUSH
31917: CALL_OW 272
31921: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31922: LD_ADDR_VAR 0 8
31926: PUSH
31927: LD_VAR 0 6
31931: PPUSH
31932: LD_VAR 0 4
31936: PPUSH
31937: LD_INT 3
31939: PPUSH
31940: CALL_OW 273
31944: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31945: LD_VAR 0 7
31949: PPUSH
31950: LD_VAR 0 8
31954: PPUSH
31955: CALL_OW 488
31959: NOT
31960: IFFALSE 31964
// continue ;
31962: GO 31896
// if HexInfo ( _x , _y ) = 0 then
31964: LD_VAR 0 7
31968: PPUSH
31969: LD_VAR 0 8
31973: PPUSH
31974: CALL_OW 428
31978: PUSH
31979: LD_INT 0
31981: EQUAL
31982: IFFALSE 32007
// begin ComMoveXY ( unit , _x , _y ) ;
31984: LD_VAR 0 1
31988: PPUSH
31989: LD_VAR 0 7
31993: PPUSH
31994: LD_VAR 0 8
31998: PPUSH
31999: CALL_OW 111
// exit ;
32003: POP
32004: POP
32005: GO 32011
// end ; end ;
32007: GO 31896
32009: POP
32010: POP
// end ;
32011: LD_VAR 0 3
32015: RET
// export function ScanBase ( side , base_area ) ; begin
32016: LD_INT 0
32018: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32019: LD_ADDR_VAR 0 3
32023: PUSH
32024: LD_VAR 0 2
32028: PPUSH
32029: LD_INT 81
32031: PUSH
32032: LD_VAR 0 1
32036: PUSH
32037: EMPTY
32038: LIST
32039: LIST
32040: PPUSH
32041: CALL_OW 70
32045: ST_TO_ADDR
// end ;
32046: LD_VAR 0 3
32050: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32051: LD_INT 0
32053: PPUSH
32054: PPUSH
32055: PPUSH
32056: PPUSH
// result := false ;
32057: LD_ADDR_VAR 0 2
32061: PUSH
32062: LD_INT 0
32064: ST_TO_ADDR
// side := GetSide ( unit ) ;
32065: LD_ADDR_VAR 0 3
32069: PUSH
32070: LD_VAR 0 1
32074: PPUSH
32075: CALL_OW 255
32079: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32080: LD_ADDR_VAR 0 4
32084: PUSH
32085: LD_VAR 0 1
32089: PPUSH
32090: CALL_OW 248
32094: ST_TO_ADDR
// case nat of 1 :
32095: LD_VAR 0 4
32099: PUSH
32100: LD_INT 1
32102: DOUBLE
32103: EQUAL
32104: IFTRUE 32108
32106: GO 32119
32108: POP
// tech := tech_lassight ; 2 :
32109: LD_ADDR_VAR 0 5
32113: PUSH
32114: LD_INT 12
32116: ST_TO_ADDR
32117: GO 32158
32119: LD_INT 2
32121: DOUBLE
32122: EQUAL
32123: IFTRUE 32127
32125: GO 32138
32127: POP
// tech := tech_mortar ; 3 :
32128: LD_ADDR_VAR 0 5
32132: PUSH
32133: LD_INT 41
32135: ST_TO_ADDR
32136: GO 32158
32138: LD_INT 3
32140: DOUBLE
32141: EQUAL
32142: IFTRUE 32146
32144: GO 32157
32146: POP
// tech := tech_bazooka ; end ;
32147: LD_ADDR_VAR 0 5
32151: PUSH
32152: LD_INT 44
32154: ST_TO_ADDR
32155: GO 32158
32157: POP
// if Researched ( side , tech ) then
32158: LD_VAR 0 3
32162: PPUSH
32163: LD_VAR 0 5
32167: PPUSH
32168: CALL_OW 325
32172: IFFALSE 32199
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
32174: LD_ADDR_VAR 0 2
32178: PUSH
32179: LD_INT 5
32181: PUSH
32182: LD_INT 8
32184: PUSH
32185: LD_INT 9
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: LIST
32192: PUSH
32193: LD_VAR 0 4
32197: ARRAY
32198: ST_TO_ADDR
// end ;
32199: LD_VAR 0 2
32203: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
32204: LD_INT 0
32206: PPUSH
32207: PPUSH
32208: PPUSH
// if not mines then
32209: LD_VAR 0 2
32213: NOT
32214: IFFALSE 32218
// exit ;
32216: GO 32362
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32218: LD_ADDR_VAR 0 5
32222: PUSH
32223: LD_INT 81
32225: PUSH
32226: LD_VAR 0 1
32230: PUSH
32231: EMPTY
32232: LIST
32233: LIST
32234: PUSH
32235: LD_INT 3
32237: PUSH
32238: LD_INT 21
32240: PUSH
32241: LD_INT 3
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: PPUSH
32256: CALL_OW 69
32260: ST_TO_ADDR
// for i in mines do
32261: LD_ADDR_VAR 0 4
32265: PUSH
32266: LD_VAR 0 2
32270: PUSH
32271: FOR_IN
32272: IFFALSE 32360
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
32274: LD_VAR 0 4
32278: PUSH
32279: LD_INT 1
32281: ARRAY
32282: PPUSH
32283: LD_VAR 0 4
32287: PUSH
32288: LD_INT 2
32290: ARRAY
32291: PPUSH
32292: CALL_OW 458
32296: NOT
32297: IFFALSE 32301
// continue ;
32299: GO 32271
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
32301: LD_VAR 0 4
32305: PUSH
32306: LD_INT 1
32308: ARRAY
32309: PPUSH
32310: LD_VAR 0 4
32314: PUSH
32315: LD_INT 2
32317: ARRAY
32318: PPUSH
32319: CALL_OW 428
32323: PUSH
32324: LD_VAR 0 5
32328: IN
32329: IFFALSE 32358
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32331: LD_VAR 0 4
32335: PUSH
32336: LD_INT 1
32338: ARRAY
32339: PPUSH
32340: LD_VAR 0 4
32344: PUSH
32345: LD_INT 2
32347: ARRAY
32348: PPUSH
32349: LD_VAR 0 1
32353: PPUSH
32354: CALL_OW 456
// end ;
32358: GO 32271
32360: POP
32361: POP
// end ;
32362: LD_VAR 0 3
32366: RET
// export function Count ( array ) ; begin
32367: LD_INT 0
32369: PPUSH
// result := array + 0 ;
32370: LD_ADDR_VAR 0 2
32374: PUSH
32375: LD_VAR 0 1
32379: PUSH
32380: LD_INT 0
32382: PLUS
32383: ST_TO_ADDR
// end ;
32384: LD_VAR 0 2
32388: RET
// export function IsEmpty ( building ) ; begin
32389: LD_INT 0
32391: PPUSH
// if not building then
32392: LD_VAR 0 1
32396: NOT
32397: IFFALSE 32401
// exit ;
32399: GO 32444
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32401: LD_ADDR_VAR 0 2
32405: PUSH
32406: LD_VAR 0 1
32410: PUSH
32411: LD_INT 22
32413: PUSH
32414: LD_VAR 0 1
32418: PPUSH
32419: CALL_OW 255
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 58
32430: PUSH
32431: EMPTY
32432: LIST
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PPUSH
32438: CALL_OW 69
32442: IN
32443: ST_TO_ADDR
// end ;
32444: LD_VAR 0 2
32448: RET
// export function IsNotFull ( building ) ; var places ; begin
32449: LD_INT 0
32451: PPUSH
32452: PPUSH
// if not building then
32453: LD_VAR 0 1
32457: NOT
32458: IFFALSE 32462
// exit ;
32460: GO 32490
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
32462: LD_ADDR_VAR 0 2
32466: PUSH
32467: LD_VAR 0 1
32471: PPUSH
32472: LD_INT 3
32474: PUSH
32475: LD_INT 62
32477: PUSH
32478: EMPTY
32479: LIST
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PPUSH
32485: CALL_OW 72
32489: ST_TO_ADDR
// end ;
32490: LD_VAR 0 2
32494: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32495: LD_INT 0
32497: PPUSH
32498: PPUSH
32499: PPUSH
32500: PPUSH
// tmp := [ ] ;
32501: LD_ADDR_VAR 0 3
32505: PUSH
32506: EMPTY
32507: ST_TO_ADDR
// list := [ ] ;
32508: LD_ADDR_VAR 0 5
32512: PUSH
32513: EMPTY
32514: ST_TO_ADDR
// for i = 16 to 25 do
32515: LD_ADDR_VAR 0 4
32519: PUSH
32520: DOUBLE
32521: LD_INT 16
32523: DEC
32524: ST_TO_ADDR
32525: LD_INT 25
32527: PUSH
32528: FOR_TO
32529: IFFALSE 32602
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32531: LD_ADDR_VAR 0 3
32535: PUSH
32536: LD_VAR 0 3
32540: PUSH
32541: LD_INT 22
32543: PUSH
32544: LD_VAR 0 1
32548: PPUSH
32549: CALL_OW 255
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 91
32560: PUSH
32561: LD_VAR 0 1
32565: PUSH
32566: LD_INT 6
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 30
32576: PUSH
32577: LD_VAR 0 4
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: PUSH
32586: EMPTY
32587: LIST
32588: LIST
32589: LIST
32590: PUSH
32591: EMPTY
32592: LIST
32593: PPUSH
32594: CALL_OW 69
32598: ADD
32599: ST_TO_ADDR
32600: GO 32528
32602: POP
32603: POP
// for i = 1 to tmp do
32604: LD_ADDR_VAR 0 4
32608: PUSH
32609: DOUBLE
32610: LD_INT 1
32612: DEC
32613: ST_TO_ADDR
32614: LD_VAR 0 3
32618: PUSH
32619: FOR_TO
32620: IFFALSE 32708
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32622: LD_ADDR_VAR 0 5
32626: PUSH
32627: LD_VAR 0 5
32631: PUSH
32632: LD_VAR 0 3
32636: PUSH
32637: LD_VAR 0 4
32641: ARRAY
32642: PPUSH
32643: CALL_OW 266
32647: PUSH
32648: LD_VAR 0 3
32652: PUSH
32653: LD_VAR 0 4
32657: ARRAY
32658: PPUSH
32659: CALL_OW 250
32663: PUSH
32664: LD_VAR 0 3
32668: PUSH
32669: LD_VAR 0 4
32673: ARRAY
32674: PPUSH
32675: CALL_OW 251
32679: PUSH
32680: LD_VAR 0 3
32684: PUSH
32685: LD_VAR 0 4
32689: ARRAY
32690: PPUSH
32691: CALL_OW 254
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: PUSH
32702: EMPTY
32703: LIST
32704: ADD
32705: ST_TO_ADDR
32706: GO 32619
32708: POP
32709: POP
// result := list ;
32710: LD_ADDR_VAR 0 2
32714: PUSH
32715: LD_VAR 0 5
32719: ST_TO_ADDR
// end ;
32720: LD_VAR 0 2
32724: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32725: LD_INT 0
32727: PPUSH
32728: PPUSH
32729: PPUSH
32730: PPUSH
32731: PPUSH
32732: PPUSH
32733: PPUSH
// if not factory then
32734: LD_VAR 0 1
32738: NOT
32739: IFFALSE 32743
// exit ;
32741: GO 33336
// if control = control_apeman then
32743: LD_VAR 0 4
32747: PUSH
32748: LD_INT 5
32750: EQUAL
32751: IFFALSE 32860
// begin tmp := UnitsInside ( factory ) ;
32753: LD_ADDR_VAR 0 8
32757: PUSH
32758: LD_VAR 0 1
32762: PPUSH
32763: CALL_OW 313
32767: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32768: LD_VAR 0 8
32772: PPUSH
32773: LD_INT 25
32775: PUSH
32776: LD_INT 12
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: PPUSH
32783: CALL_OW 72
32787: NOT
32788: IFFALSE 32798
// control := control_manual ;
32790: LD_ADDR_VAR 0 4
32794: PUSH
32795: LD_INT 1
32797: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32798: LD_ADDR_VAR 0 8
32802: PUSH
32803: LD_VAR 0 1
32807: PPUSH
32808: CALL 32495 0 1
32812: ST_TO_ADDR
// if tmp then
32813: LD_VAR 0 8
32817: IFFALSE 32860
// begin for i in tmp do
32819: LD_ADDR_VAR 0 7
32823: PUSH
32824: LD_VAR 0 8
32828: PUSH
32829: FOR_IN
32830: IFFALSE 32858
// if i [ 1 ] = b_ext_radio then
32832: LD_VAR 0 7
32836: PUSH
32837: LD_INT 1
32839: ARRAY
32840: PUSH
32841: LD_INT 22
32843: EQUAL
32844: IFFALSE 32856
// begin control := control_remote ;
32846: LD_ADDR_VAR 0 4
32850: PUSH
32851: LD_INT 2
32853: ST_TO_ADDR
// break ;
32854: GO 32858
// end ;
32856: GO 32829
32858: POP
32859: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32860: LD_VAR 0 1
32864: PPUSH
32865: LD_VAR 0 2
32869: PPUSH
32870: LD_VAR 0 3
32874: PPUSH
32875: LD_VAR 0 4
32879: PPUSH
32880: LD_VAR 0 5
32884: PPUSH
32885: CALL_OW 448
32889: IFFALSE 32924
// begin result := [ chassis , engine , control , weapon ] ;
32891: LD_ADDR_VAR 0 6
32895: PUSH
32896: LD_VAR 0 2
32900: PUSH
32901: LD_VAR 0 3
32905: PUSH
32906: LD_VAR 0 4
32910: PUSH
32911: LD_VAR 0 5
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: ST_TO_ADDR
// exit ;
32922: GO 33336
// end ; _chassis := AvailableChassisList ( factory ) ;
32924: LD_ADDR_VAR 0 9
32928: PUSH
32929: LD_VAR 0 1
32933: PPUSH
32934: CALL_OW 475
32938: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32939: LD_ADDR_VAR 0 11
32943: PUSH
32944: LD_VAR 0 1
32948: PPUSH
32949: CALL_OW 476
32953: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32954: LD_ADDR_VAR 0 12
32958: PUSH
32959: LD_VAR 0 1
32963: PPUSH
32964: CALL_OW 477
32968: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32969: LD_ADDR_VAR 0 10
32973: PUSH
32974: LD_VAR 0 1
32978: PPUSH
32979: CALL_OW 478
32983: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32984: LD_VAR 0 9
32988: NOT
32989: PUSH
32990: LD_VAR 0 11
32994: NOT
32995: OR
32996: PUSH
32997: LD_VAR 0 12
33001: NOT
33002: OR
33003: PUSH
33004: LD_VAR 0 10
33008: NOT
33009: OR
33010: IFFALSE 33045
// begin result := [ chassis , engine , control , weapon ] ;
33012: LD_ADDR_VAR 0 6
33016: PUSH
33017: LD_VAR 0 2
33021: PUSH
33022: LD_VAR 0 3
33026: PUSH
33027: LD_VAR 0 4
33031: PUSH
33032: LD_VAR 0 5
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: ST_TO_ADDR
// exit ;
33043: GO 33336
// end ; if not chassis in _chassis then
33045: LD_VAR 0 2
33049: PUSH
33050: LD_VAR 0 9
33054: IN
33055: NOT
33056: IFFALSE 33082
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33058: LD_ADDR_VAR 0 2
33062: PUSH
33063: LD_VAR 0 9
33067: PUSH
33068: LD_INT 1
33070: PPUSH
33071: LD_VAR 0 9
33075: PPUSH
33076: CALL_OW 12
33080: ARRAY
33081: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33082: LD_VAR 0 2
33086: PPUSH
33087: LD_VAR 0 3
33091: PPUSH
33092: CALL 33341 0 2
33096: NOT
33097: IFFALSE 33156
// repeat engine := _engine [ 1 ] ;
33099: LD_ADDR_VAR 0 3
33103: PUSH
33104: LD_VAR 0 11
33108: PUSH
33109: LD_INT 1
33111: ARRAY
33112: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33113: LD_ADDR_VAR 0 11
33117: PUSH
33118: LD_VAR 0 11
33122: PPUSH
33123: LD_INT 1
33125: PPUSH
33126: CALL_OW 3
33130: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
33131: LD_VAR 0 2
33135: PPUSH
33136: LD_VAR 0 3
33140: PPUSH
33141: CALL 33341 0 2
33145: PUSH
33146: LD_VAR 0 11
33150: PUSH
33151: EMPTY
33152: EQUAL
33153: OR
33154: IFFALSE 33099
// if not control in _control then
33156: LD_VAR 0 4
33160: PUSH
33161: LD_VAR 0 12
33165: IN
33166: NOT
33167: IFFALSE 33193
// control := _control [ rand ( 1 , _control ) ] ;
33169: LD_ADDR_VAR 0 4
33173: PUSH
33174: LD_VAR 0 12
33178: PUSH
33179: LD_INT 1
33181: PPUSH
33182: LD_VAR 0 12
33186: PPUSH
33187: CALL_OW 12
33191: ARRAY
33192: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
33193: LD_VAR 0 2
33197: PPUSH
33198: LD_VAR 0 5
33202: PPUSH
33203: CALL 33561 0 2
33207: NOT
33208: IFFALSE 33267
// repeat weapon := _weapon [ 1 ] ;
33210: LD_ADDR_VAR 0 5
33214: PUSH
33215: LD_VAR 0 10
33219: PUSH
33220: LD_INT 1
33222: ARRAY
33223: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
33224: LD_ADDR_VAR 0 10
33228: PUSH
33229: LD_VAR 0 10
33233: PPUSH
33234: LD_INT 1
33236: PPUSH
33237: CALL_OW 3
33241: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
33242: LD_VAR 0 2
33246: PPUSH
33247: LD_VAR 0 5
33251: PPUSH
33252: CALL 33561 0 2
33256: PUSH
33257: LD_VAR 0 10
33261: PUSH
33262: EMPTY
33263: EQUAL
33264: OR
33265: IFFALSE 33210
// result := [ ] ;
33267: LD_ADDR_VAR 0 6
33271: PUSH
33272: EMPTY
33273: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33274: LD_VAR 0 1
33278: PPUSH
33279: LD_VAR 0 2
33283: PPUSH
33284: LD_VAR 0 3
33288: PPUSH
33289: LD_VAR 0 4
33293: PPUSH
33294: LD_VAR 0 5
33298: PPUSH
33299: CALL_OW 448
33303: IFFALSE 33336
// result := [ chassis , engine , control , weapon ] ;
33305: LD_ADDR_VAR 0 6
33309: PUSH
33310: LD_VAR 0 2
33314: PUSH
33315: LD_VAR 0 3
33319: PUSH
33320: LD_VAR 0 4
33324: PUSH
33325: LD_VAR 0 5
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: ST_TO_ADDR
// end ;
33336: LD_VAR 0 6
33340: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33341: LD_INT 0
33343: PPUSH
// if not chassis or not engine then
33344: LD_VAR 0 1
33348: NOT
33349: PUSH
33350: LD_VAR 0 2
33354: NOT
33355: OR
33356: IFFALSE 33360
// exit ;
33358: GO 33556
// case engine of engine_solar :
33360: LD_VAR 0 2
33364: PUSH
33365: LD_INT 2
33367: DOUBLE
33368: EQUAL
33369: IFTRUE 33373
33371: GO 33411
33373: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33374: LD_ADDR_VAR 0 3
33378: PUSH
33379: LD_INT 11
33381: PUSH
33382: LD_INT 12
33384: PUSH
33385: LD_INT 13
33387: PUSH
33388: LD_INT 14
33390: PUSH
33391: LD_INT 1
33393: PUSH
33394: LD_INT 2
33396: PUSH
33397: LD_INT 3
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: ST_TO_ADDR
33409: GO 33540
33411: LD_INT 1
33413: DOUBLE
33414: EQUAL
33415: IFTRUE 33419
33417: GO 33481
33419: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33420: LD_ADDR_VAR 0 3
33424: PUSH
33425: LD_INT 11
33427: PUSH
33428: LD_INT 12
33430: PUSH
33431: LD_INT 13
33433: PUSH
33434: LD_INT 14
33436: PUSH
33437: LD_INT 1
33439: PUSH
33440: LD_INT 2
33442: PUSH
33443: LD_INT 3
33445: PUSH
33446: LD_INT 4
33448: PUSH
33449: LD_INT 5
33451: PUSH
33452: LD_INT 21
33454: PUSH
33455: LD_INT 23
33457: PUSH
33458: LD_INT 22
33460: PUSH
33461: LD_INT 24
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: ST_TO_ADDR
33479: GO 33540
33481: LD_INT 3
33483: DOUBLE
33484: EQUAL
33485: IFTRUE 33489
33487: GO 33539
33489: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33490: LD_ADDR_VAR 0 3
33494: PUSH
33495: LD_INT 13
33497: PUSH
33498: LD_INT 14
33500: PUSH
33501: LD_INT 2
33503: PUSH
33504: LD_INT 3
33506: PUSH
33507: LD_INT 4
33509: PUSH
33510: LD_INT 5
33512: PUSH
33513: LD_INT 21
33515: PUSH
33516: LD_INT 22
33518: PUSH
33519: LD_INT 23
33521: PUSH
33522: LD_INT 24
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: ST_TO_ADDR
33537: GO 33540
33539: POP
// result := ( chassis in result ) ;
33540: LD_ADDR_VAR 0 3
33544: PUSH
33545: LD_VAR 0 1
33549: PUSH
33550: LD_VAR 0 3
33554: IN
33555: ST_TO_ADDR
// end ;
33556: LD_VAR 0 3
33560: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33561: LD_INT 0
33563: PPUSH
// if not chassis or not weapon then
33564: LD_VAR 0 1
33568: NOT
33569: PUSH
33570: LD_VAR 0 2
33574: NOT
33575: OR
33576: IFFALSE 33580
// exit ;
33578: GO 34640
// case weapon of us_machine_gun :
33580: LD_VAR 0 2
33584: PUSH
33585: LD_INT 2
33587: DOUBLE
33588: EQUAL
33589: IFTRUE 33593
33591: GO 33623
33593: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33594: LD_ADDR_VAR 0 3
33598: PUSH
33599: LD_INT 1
33601: PUSH
33602: LD_INT 2
33604: PUSH
33605: LD_INT 3
33607: PUSH
33608: LD_INT 4
33610: PUSH
33611: LD_INT 5
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: ST_TO_ADDR
33621: GO 34624
33623: LD_INT 3
33625: DOUBLE
33626: EQUAL
33627: IFTRUE 33631
33629: GO 33661
33631: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33632: LD_ADDR_VAR 0 3
33636: PUSH
33637: LD_INT 1
33639: PUSH
33640: LD_INT 2
33642: PUSH
33643: LD_INT 3
33645: PUSH
33646: LD_INT 4
33648: PUSH
33649: LD_INT 5
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: LIST
33656: LIST
33657: LIST
33658: ST_TO_ADDR
33659: GO 34624
33661: LD_INT 11
33663: DOUBLE
33664: EQUAL
33665: IFTRUE 33669
33667: GO 33699
33669: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33670: LD_ADDR_VAR 0 3
33674: PUSH
33675: LD_INT 1
33677: PUSH
33678: LD_INT 2
33680: PUSH
33681: LD_INT 3
33683: PUSH
33684: LD_INT 4
33686: PUSH
33687: LD_INT 5
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: ST_TO_ADDR
33697: GO 34624
33699: LD_INT 4
33701: DOUBLE
33702: EQUAL
33703: IFTRUE 33707
33705: GO 33733
33707: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33708: LD_ADDR_VAR 0 3
33712: PUSH
33713: LD_INT 2
33715: PUSH
33716: LD_INT 3
33718: PUSH
33719: LD_INT 4
33721: PUSH
33722: LD_INT 5
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: ST_TO_ADDR
33731: GO 34624
33733: LD_INT 5
33735: DOUBLE
33736: EQUAL
33737: IFTRUE 33741
33739: GO 33767
33741: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33742: LD_ADDR_VAR 0 3
33746: PUSH
33747: LD_INT 2
33749: PUSH
33750: LD_INT 3
33752: PUSH
33753: LD_INT 4
33755: PUSH
33756: LD_INT 5
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: ST_TO_ADDR
33765: GO 34624
33767: LD_INT 9
33769: DOUBLE
33770: EQUAL
33771: IFTRUE 33775
33773: GO 33801
33775: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33776: LD_ADDR_VAR 0 3
33780: PUSH
33781: LD_INT 2
33783: PUSH
33784: LD_INT 3
33786: PUSH
33787: LD_INT 4
33789: PUSH
33790: LD_INT 5
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: ST_TO_ADDR
33799: GO 34624
33801: LD_INT 7
33803: DOUBLE
33804: EQUAL
33805: IFTRUE 33809
33807: GO 33835
33809: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33810: LD_ADDR_VAR 0 3
33814: PUSH
33815: LD_INT 2
33817: PUSH
33818: LD_INT 3
33820: PUSH
33821: LD_INT 4
33823: PUSH
33824: LD_INT 5
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: ST_TO_ADDR
33833: GO 34624
33835: LD_INT 12
33837: DOUBLE
33838: EQUAL
33839: IFTRUE 33843
33841: GO 33869
33843: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33844: LD_ADDR_VAR 0 3
33848: PUSH
33849: LD_INT 2
33851: PUSH
33852: LD_INT 3
33854: PUSH
33855: LD_INT 4
33857: PUSH
33858: LD_INT 5
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: LIST
33865: LIST
33866: ST_TO_ADDR
33867: GO 34624
33869: LD_INT 13
33871: DOUBLE
33872: EQUAL
33873: IFTRUE 33877
33875: GO 33903
33877: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33878: LD_ADDR_VAR 0 3
33882: PUSH
33883: LD_INT 2
33885: PUSH
33886: LD_INT 3
33888: PUSH
33889: LD_INT 4
33891: PUSH
33892: LD_INT 5
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: ST_TO_ADDR
33901: GO 34624
33903: LD_INT 14
33905: DOUBLE
33906: EQUAL
33907: IFTRUE 33911
33909: GO 33929
33911: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33912: LD_ADDR_VAR 0 3
33916: PUSH
33917: LD_INT 4
33919: PUSH
33920: LD_INT 5
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: ST_TO_ADDR
33927: GO 34624
33929: LD_INT 6
33931: DOUBLE
33932: EQUAL
33933: IFTRUE 33937
33935: GO 33955
33937: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33938: LD_ADDR_VAR 0 3
33942: PUSH
33943: LD_INT 4
33945: PUSH
33946: LD_INT 5
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: ST_TO_ADDR
33953: GO 34624
33955: LD_INT 10
33957: DOUBLE
33958: EQUAL
33959: IFTRUE 33963
33961: GO 33981
33963: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33964: LD_ADDR_VAR 0 3
33968: PUSH
33969: LD_INT 4
33971: PUSH
33972: LD_INT 5
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: ST_TO_ADDR
33979: GO 34624
33981: LD_INT 22
33983: DOUBLE
33984: EQUAL
33985: IFTRUE 33989
33987: GO 34015
33989: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33990: LD_ADDR_VAR 0 3
33994: PUSH
33995: LD_INT 11
33997: PUSH
33998: LD_INT 12
34000: PUSH
34001: LD_INT 13
34003: PUSH
34004: LD_INT 14
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: ST_TO_ADDR
34013: GO 34624
34015: LD_INT 23
34017: DOUBLE
34018: EQUAL
34019: IFTRUE 34023
34021: GO 34049
34023: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34024: LD_ADDR_VAR 0 3
34028: PUSH
34029: LD_INT 11
34031: PUSH
34032: LD_INT 12
34034: PUSH
34035: LD_INT 13
34037: PUSH
34038: LD_INT 14
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: ST_TO_ADDR
34047: GO 34624
34049: LD_INT 24
34051: DOUBLE
34052: EQUAL
34053: IFTRUE 34057
34055: GO 34083
34057: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34058: LD_ADDR_VAR 0 3
34062: PUSH
34063: LD_INT 11
34065: PUSH
34066: LD_INT 12
34068: PUSH
34069: LD_INT 13
34071: PUSH
34072: LD_INT 14
34074: PUSH
34075: EMPTY
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: ST_TO_ADDR
34081: GO 34624
34083: LD_INT 30
34085: DOUBLE
34086: EQUAL
34087: IFTRUE 34091
34089: GO 34117
34091: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34092: LD_ADDR_VAR 0 3
34096: PUSH
34097: LD_INT 11
34099: PUSH
34100: LD_INT 12
34102: PUSH
34103: LD_INT 13
34105: PUSH
34106: LD_INT 14
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: ST_TO_ADDR
34115: GO 34624
34117: LD_INT 25
34119: DOUBLE
34120: EQUAL
34121: IFTRUE 34125
34123: GO 34143
34125: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34126: LD_ADDR_VAR 0 3
34130: PUSH
34131: LD_INT 13
34133: PUSH
34134: LD_INT 14
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: ST_TO_ADDR
34141: GO 34624
34143: LD_INT 27
34145: DOUBLE
34146: EQUAL
34147: IFTRUE 34151
34149: GO 34169
34151: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
34152: LD_ADDR_VAR 0 3
34156: PUSH
34157: LD_INT 13
34159: PUSH
34160: LD_INT 14
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: ST_TO_ADDR
34167: GO 34624
34169: LD_INT 92
34171: DOUBLE
34172: EQUAL
34173: IFTRUE 34177
34175: GO 34203
34177: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
34178: LD_ADDR_VAR 0 3
34182: PUSH
34183: LD_INT 11
34185: PUSH
34186: LD_INT 12
34188: PUSH
34189: LD_INT 13
34191: PUSH
34192: LD_INT 14
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: ST_TO_ADDR
34201: GO 34624
34203: LD_INT 28
34205: DOUBLE
34206: EQUAL
34207: IFTRUE 34211
34209: GO 34229
34211: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
34212: LD_ADDR_VAR 0 3
34216: PUSH
34217: LD_INT 13
34219: PUSH
34220: LD_INT 14
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: ST_TO_ADDR
34227: GO 34624
34229: LD_INT 29
34231: DOUBLE
34232: EQUAL
34233: IFTRUE 34237
34235: GO 34255
34237: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
34238: LD_ADDR_VAR 0 3
34242: PUSH
34243: LD_INT 13
34245: PUSH
34246: LD_INT 14
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: ST_TO_ADDR
34253: GO 34624
34255: LD_INT 31
34257: DOUBLE
34258: EQUAL
34259: IFTRUE 34263
34261: GO 34281
34263: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
34264: LD_ADDR_VAR 0 3
34268: PUSH
34269: LD_INT 13
34271: PUSH
34272: LD_INT 14
34274: PUSH
34275: EMPTY
34276: LIST
34277: LIST
34278: ST_TO_ADDR
34279: GO 34624
34281: LD_INT 26
34283: DOUBLE
34284: EQUAL
34285: IFTRUE 34289
34287: GO 34307
34289: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
34290: LD_ADDR_VAR 0 3
34294: PUSH
34295: LD_INT 13
34297: PUSH
34298: LD_INT 14
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: ST_TO_ADDR
34305: GO 34624
34307: LD_INT 42
34309: DOUBLE
34310: EQUAL
34311: IFTRUE 34315
34313: GO 34341
34315: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34316: LD_ADDR_VAR 0 3
34320: PUSH
34321: LD_INT 21
34323: PUSH
34324: LD_INT 22
34326: PUSH
34327: LD_INT 23
34329: PUSH
34330: LD_INT 24
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: ST_TO_ADDR
34339: GO 34624
34341: LD_INT 43
34343: DOUBLE
34344: EQUAL
34345: IFTRUE 34349
34347: GO 34375
34349: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34350: LD_ADDR_VAR 0 3
34354: PUSH
34355: LD_INT 21
34357: PUSH
34358: LD_INT 22
34360: PUSH
34361: LD_INT 23
34363: PUSH
34364: LD_INT 24
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: ST_TO_ADDR
34373: GO 34624
34375: LD_INT 44
34377: DOUBLE
34378: EQUAL
34379: IFTRUE 34383
34381: GO 34409
34383: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34384: LD_ADDR_VAR 0 3
34388: PUSH
34389: LD_INT 21
34391: PUSH
34392: LD_INT 22
34394: PUSH
34395: LD_INT 23
34397: PUSH
34398: LD_INT 24
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: ST_TO_ADDR
34407: GO 34624
34409: LD_INT 45
34411: DOUBLE
34412: EQUAL
34413: IFTRUE 34417
34415: GO 34443
34417: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34418: LD_ADDR_VAR 0 3
34422: PUSH
34423: LD_INT 21
34425: PUSH
34426: LD_INT 22
34428: PUSH
34429: LD_INT 23
34431: PUSH
34432: LD_INT 24
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: ST_TO_ADDR
34441: GO 34624
34443: LD_INT 49
34445: DOUBLE
34446: EQUAL
34447: IFTRUE 34451
34449: GO 34477
34451: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34452: LD_ADDR_VAR 0 3
34456: PUSH
34457: LD_INT 21
34459: PUSH
34460: LD_INT 22
34462: PUSH
34463: LD_INT 23
34465: PUSH
34466: LD_INT 24
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: ST_TO_ADDR
34475: GO 34624
34477: LD_INT 51
34479: DOUBLE
34480: EQUAL
34481: IFTRUE 34485
34483: GO 34511
34485: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34486: LD_ADDR_VAR 0 3
34490: PUSH
34491: LD_INT 21
34493: PUSH
34494: LD_INT 22
34496: PUSH
34497: LD_INT 23
34499: PUSH
34500: LD_INT 24
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: ST_TO_ADDR
34509: GO 34624
34511: LD_INT 52
34513: DOUBLE
34514: EQUAL
34515: IFTRUE 34519
34517: GO 34545
34519: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34520: LD_ADDR_VAR 0 3
34524: PUSH
34525: LD_INT 21
34527: PUSH
34528: LD_INT 22
34530: PUSH
34531: LD_INT 23
34533: PUSH
34534: LD_INT 24
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: ST_TO_ADDR
34543: GO 34624
34545: LD_INT 53
34547: DOUBLE
34548: EQUAL
34549: IFTRUE 34553
34551: GO 34571
34553: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34554: LD_ADDR_VAR 0 3
34558: PUSH
34559: LD_INT 23
34561: PUSH
34562: LD_INT 24
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: ST_TO_ADDR
34569: GO 34624
34571: LD_INT 46
34573: DOUBLE
34574: EQUAL
34575: IFTRUE 34579
34577: GO 34597
34579: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34580: LD_ADDR_VAR 0 3
34584: PUSH
34585: LD_INT 23
34587: PUSH
34588: LD_INT 24
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: ST_TO_ADDR
34595: GO 34624
34597: LD_INT 47
34599: DOUBLE
34600: EQUAL
34601: IFTRUE 34605
34603: GO 34623
34605: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34606: LD_ADDR_VAR 0 3
34610: PUSH
34611: LD_INT 23
34613: PUSH
34614: LD_INT 24
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: ST_TO_ADDR
34621: GO 34624
34623: POP
// result := ( chassis in result ) ;
34624: LD_ADDR_VAR 0 3
34628: PUSH
34629: LD_VAR 0 1
34633: PUSH
34634: LD_VAR 0 3
34638: IN
34639: ST_TO_ADDR
// end ;
34640: LD_VAR 0 3
34644: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34645: LD_INT 0
34647: PPUSH
34648: PPUSH
34649: PPUSH
34650: PPUSH
34651: PPUSH
34652: PPUSH
34653: PPUSH
// result := array ;
34654: LD_ADDR_VAR 0 5
34658: PUSH
34659: LD_VAR 0 1
34663: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34664: LD_VAR 0 1
34668: NOT
34669: PUSH
34670: LD_VAR 0 2
34674: NOT
34675: OR
34676: PUSH
34677: LD_VAR 0 3
34681: NOT
34682: OR
34683: PUSH
34684: LD_VAR 0 2
34688: PUSH
34689: LD_VAR 0 1
34693: GREATER
34694: OR
34695: PUSH
34696: LD_VAR 0 3
34700: PUSH
34701: LD_VAR 0 1
34705: GREATER
34706: OR
34707: IFFALSE 34711
// exit ;
34709: GO 35007
// if direction then
34711: LD_VAR 0 4
34715: IFFALSE 34779
// begin d := 1 ;
34717: LD_ADDR_VAR 0 9
34721: PUSH
34722: LD_INT 1
34724: ST_TO_ADDR
// if i_from > i_to then
34725: LD_VAR 0 2
34729: PUSH
34730: LD_VAR 0 3
34734: GREATER
34735: IFFALSE 34761
// length := ( array - i_from ) + i_to else
34737: LD_ADDR_VAR 0 11
34741: PUSH
34742: LD_VAR 0 1
34746: PUSH
34747: LD_VAR 0 2
34751: MINUS
34752: PUSH
34753: LD_VAR 0 3
34757: PLUS
34758: ST_TO_ADDR
34759: GO 34777
// length := i_to - i_from ;
34761: LD_ADDR_VAR 0 11
34765: PUSH
34766: LD_VAR 0 3
34770: PUSH
34771: LD_VAR 0 2
34775: MINUS
34776: ST_TO_ADDR
// end else
34777: GO 34840
// begin d := - 1 ;
34779: LD_ADDR_VAR 0 9
34783: PUSH
34784: LD_INT 1
34786: NEG
34787: ST_TO_ADDR
// if i_from > i_to then
34788: LD_VAR 0 2
34792: PUSH
34793: LD_VAR 0 3
34797: GREATER
34798: IFFALSE 34818
// length := i_from - i_to else
34800: LD_ADDR_VAR 0 11
34804: PUSH
34805: LD_VAR 0 2
34809: PUSH
34810: LD_VAR 0 3
34814: MINUS
34815: ST_TO_ADDR
34816: GO 34840
// length := ( array - i_to ) + i_from ;
34818: LD_ADDR_VAR 0 11
34822: PUSH
34823: LD_VAR 0 1
34827: PUSH
34828: LD_VAR 0 3
34832: MINUS
34833: PUSH
34834: LD_VAR 0 2
34838: PLUS
34839: ST_TO_ADDR
// end ; if not length then
34840: LD_VAR 0 11
34844: NOT
34845: IFFALSE 34849
// exit ;
34847: GO 35007
// tmp := array ;
34849: LD_ADDR_VAR 0 10
34853: PUSH
34854: LD_VAR 0 1
34858: ST_TO_ADDR
// for i = 1 to length do
34859: LD_ADDR_VAR 0 6
34863: PUSH
34864: DOUBLE
34865: LD_INT 1
34867: DEC
34868: ST_TO_ADDR
34869: LD_VAR 0 11
34873: PUSH
34874: FOR_TO
34875: IFFALSE 34995
// begin for j = 1 to array do
34877: LD_ADDR_VAR 0 7
34881: PUSH
34882: DOUBLE
34883: LD_INT 1
34885: DEC
34886: ST_TO_ADDR
34887: LD_VAR 0 1
34891: PUSH
34892: FOR_TO
34893: IFFALSE 34981
// begin k := j + d ;
34895: LD_ADDR_VAR 0 8
34899: PUSH
34900: LD_VAR 0 7
34904: PUSH
34905: LD_VAR 0 9
34909: PLUS
34910: ST_TO_ADDR
// if k > array then
34911: LD_VAR 0 8
34915: PUSH
34916: LD_VAR 0 1
34920: GREATER
34921: IFFALSE 34931
// k := 1 ;
34923: LD_ADDR_VAR 0 8
34927: PUSH
34928: LD_INT 1
34930: ST_TO_ADDR
// if not k then
34931: LD_VAR 0 8
34935: NOT
34936: IFFALSE 34948
// k := array ;
34938: LD_ADDR_VAR 0 8
34942: PUSH
34943: LD_VAR 0 1
34947: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34948: LD_ADDR_VAR 0 10
34952: PUSH
34953: LD_VAR 0 10
34957: PPUSH
34958: LD_VAR 0 8
34962: PPUSH
34963: LD_VAR 0 1
34967: PUSH
34968: LD_VAR 0 7
34972: ARRAY
34973: PPUSH
34974: CALL_OW 1
34978: ST_TO_ADDR
// end ;
34979: GO 34892
34981: POP
34982: POP
// array := tmp ;
34983: LD_ADDR_VAR 0 1
34987: PUSH
34988: LD_VAR 0 10
34992: ST_TO_ADDR
// end ;
34993: GO 34874
34995: POP
34996: POP
// result := array ;
34997: LD_ADDR_VAR 0 5
35001: PUSH
35002: LD_VAR 0 1
35006: ST_TO_ADDR
// end ;
35007: LD_VAR 0 5
35011: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35012: LD_INT 0
35014: PPUSH
35015: PPUSH
// result := 0 ;
35016: LD_ADDR_VAR 0 3
35020: PUSH
35021: LD_INT 0
35023: ST_TO_ADDR
// if not array or not value in array then
35024: LD_VAR 0 1
35028: NOT
35029: PUSH
35030: LD_VAR 0 2
35034: PUSH
35035: LD_VAR 0 1
35039: IN
35040: NOT
35041: OR
35042: IFFALSE 35046
// exit ;
35044: GO 35100
// for i = 1 to array do
35046: LD_ADDR_VAR 0 4
35050: PUSH
35051: DOUBLE
35052: LD_INT 1
35054: DEC
35055: ST_TO_ADDR
35056: LD_VAR 0 1
35060: PUSH
35061: FOR_TO
35062: IFFALSE 35098
// if value = array [ i ] then
35064: LD_VAR 0 2
35068: PUSH
35069: LD_VAR 0 1
35073: PUSH
35074: LD_VAR 0 4
35078: ARRAY
35079: EQUAL
35080: IFFALSE 35096
// begin result := i ;
35082: LD_ADDR_VAR 0 3
35086: PUSH
35087: LD_VAR 0 4
35091: ST_TO_ADDR
// exit ;
35092: POP
35093: POP
35094: GO 35100
// end ;
35096: GO 35061
35098: POP
35099: POP
// end ;
35100: LD_VAR 0 3
35104: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35105: LD_INT 0
35107: PPUSH
// vc_chassis := chassis ;
35108: LD_ADDR_OWVAR 37
35112: PUSH
35113: LD_VAR 0 1
35117: ST_TO_ADDR
// vc_engine := engine ;
35118: LD_ADDR_OWVAR 39
35122: PUSH
35123: LD_VAR 0 2
35127: ST_TO_ADDR
// vc_control := control ;
35128: LD_ADDR_OWVAR 38
35132: PUSH
35133: LD_VAR 0 3
35137: ST_TO_ADDR
// vc_weapon := weapon ;
35138: LD_ADDR_OWVAR 40
35142: PUSH
35143: LD_VAR 0 4
35147: ST_TO_ADDR
// vc_fuel_battery := fuel ;
35148: LD_ADDR_OWVAR 41
35152: PUSH
35153: LD_VAR 0 5
35157: ST_TO_ADDR
// end ;
35158: LD_VAR 0 6
35162: RET
// export function WantPlant ( unit ) ; var task ; begin
35163: LD_INT 0
35165: PPUSH
35166: PPUSH
// result := false ;
35167: LD_ADDR_VAR 0 2
35171: PUSH
35172: LD_INT 0
35174: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
35175: LD_ADDR_VAR 0 3
35179: PUSH
35180: LD_VAR 0 1
35184: PPUSH
35185: CALL_OW 437
35189: ST_TO_ADDR
// if task then
35190: LD_VAR 0 3
35194: IFFALSE 35222
// if task [ 1 ] [ 1 ] = p then
35196: LD_VAR 0 3
35200: PUSH
35201: LD_INT 1
35203: ARRAY
35204: PUSH
35205: LD_INT 1
35207: ARRAY
35208: PUSH
35209: LD_STRING p
35211: EQUAL
35212: IFFALSE 35222
// result := true ;
35214: LD_ADDR_VAR 0 2
35218: PUSH
35219: LD_INT 1
35221: ST_TO_ADDR
// end ;
35222: LD_VAR 0 2
35226: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
35227: LD_INT 0
35229: PPUSH
35230: PPUSH
35231: PPUSH
35232: PPUSH
// if pos < 1 then
35233: LD_VAR 0 2
35237: PUSH
35238: LD_INT 1
35240: LESS
35241: IFFALSE 35245
// exit ;
35243: GO 35548
// if pos = 1 then
35245: LD_VAR 0 2
35249: PUSH
35250: LD_INT 1
35252: EQUAL
35253: IFFALSE 35286
// result := Replace ( arr , pos [ 1 ] , value ) else
35255: LD_ADDR_VAR 0 4
35259: PUSH
35260: LD_VAR 0 1
35264: PPUSH
35265: LD_VAR 0 2
35269: PUSH
35270: LD_INT 1
35272: ARRAY
35273: PPUSH
35274: LD_VAR 0 3
35278: PPUSH
35279: CALL_OW 1
35283: ST_TO_ADDR
35284: GO 35548
// begin tmp := arr ;
35286: LD_ADDR_VAR 0 6
35290: PUSH
35291: LD_VAR 0 1
35295: ST_TO_ADDR
// s_arr := [ tmp ] ;
35296: LD_ADDR_VAR 0 7
35300: PUSH
35301: LD_VAR 0 6
35305: PUSH
35306: EMPTY
35307: LIST
35308: ST_TO_ADDR
// for i = 1 to pos - 1 do
35309: LD_ADDR_VAR 0 5
35313: PUSH
35314: DOUBLE
35315: LD_INT 1
35317: DEC
35318: ST_TO_ADDR
35319: LD_VAR 0 2
35323: PUSH
35324: LD_INT 1
35326: MINUS
35327: PUSH
35328: FOR_TO
35329: IFFALSE 35374
// begin tmp := tmp [ pos [ i ] ] ;
35331: LD_ADDR_VAR 0 6
35335: PUSH
35336: LD_VAR 0 6
35340: PUSH
35341: LD_VAR 0 2
35345: PUSH
35346: LD_VAR 0 5
35350: ARRAY
35351: ARRAY
35352: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35353: LD_ADDR_VAR 0 7
35357: PUSH
35358: LD_VAR 0 7
35362: PUSH
35363: LD_VAR 0 6
35367: PUSH
35368: EMPTY
35369: LIST
35370: ADD
35371: ST_TO_ADDR
// end ;
35372: GO 35328
35374: POP
35375: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35376: LD_ADDR_VAR 0 6
35380: PUSH
35381: LD_VAR 0 6
35385: PPUSH
35386: LD_VAR 0 2
35390: PUSH
35391: LD_VAR 0 2
35395: ARRAY
35396: PPUSH
35397: LD_VAR 0 3
35401: PPUSH
35402: CALL_OW 1
35406: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35407: LD_ADDR_VAR 0 7
35411: PUSH
35412: LD_VAR 0 7
35416: PPUSH
35417: LD_VAR 0 7
35421: PPUSH
35422: LD_VAR 0 6
35426: PPUSH
35427: CALL_OW 1
35431: ST_TO_ADDR
// for i = s_arr downto 2 do
35432: LD_ADDR_VAR 0 5
35436: PUSH
35437: DOUBLE
35438: LD_VAR 0 7
35442: INC
35443: ST_TO_ADDR
35444: LD_INT 2
35446: PUSH
35447: FOR_DOWNTO
35448: IFFALSE 35532
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35450: LD_ADDR_VAR 0 6
35454: PUSH
35455: LD_VAR 0 7
35459: PUSH
35460: LD_VAR 0 5
35464: PUSH
35465: LD_INT 1
35467: MINUS
35468: ARRAY
35469: PPUSH
35470: LD_VAR 0 2
35474: PUSH
35475: LD_VAR 0 5
35479: PUSH
35480: LD_INT 1
35482: MINUS
35483: ARRAY
35484: PPUSH
35485: LD_VAR 0 7
35489: PUSH
35490: LD_VAR 0 5
35494: ARRAY
35495: PPUSH
35496: CALL_OW 1
35500: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35501: LD_ADDR_VAR 0 7
35505: PUSH
35506: LD_VAR 0 7
35510: PPUSH
35511: LD_VAR 0 5
35515: PUSH
35516: LD_INT 1
35518: MINUS
35519: PPUSH
35520: LD_VAR 0 6
35524: PPUSH
35525: CALL_OW 1
35529: ST_TO_ADDR
// end ;
35530: GO 35447
35532: POP
35533: POP
// result := s_arr [ 1 ] ;
35534: LD_ADDR_VAR 0 4
35538: PUSH
35539: LD_VAR 0 7
35543: PUSH
35544: LD_INT 1
35546: ARRAY
35547: ST_TO_ADDR
// end ; end ;
35548: LD_VAR 0 4
35552: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35553: LD_INT 0
35555: PPUSH
35556: PPUSH
// if not list then
35557: LD_VAR 0 1
35561: NOT
35562: IFFALSE 35566
// exit ;
35564: GO 35657
// i := list [ pos1 ] ;
35566: LD_ADDR_VAR 0 5
35570: PUSH
35571: LD_VAR 0 1
35575: PUSH
35576: LD_VAR 0 2
35580: ARRAY
35581: ST_TO_ADDR
// if not i then
35582: LD_VAR 0 5
35586: NOT
35587: IFFALSE 35591
// exit ;
35589: GO 35657
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35591: LD_ADDR_VAR 0 1
35595: PUSH
35596: LD_VAR 0 1
35600: PPUSH
35601: LD_VAR 0 2
35605: PPUSH
35606: LD_VAR 0 1
35610: PUSH
35611: LD_VAR 0 3
35615: ARRAY
35616: PPUSH
35617: CALL_OW 1
35621: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35622: LD_ADDR_VAR 0 1
35626: PUSH
35627: LD_VAR 0 1
35631: PPUSH
35632: LD_VAR 0 3
35636: PPUSH
35637: LD_VAR 0 5
35641: PPUSH
35642: CALL_OW 1
35646: ST_TO_ADDR
// result := list ;
35647: LD_ADDR_VAR 0 4
35651: PUSH
35652: LD_VAR 0 1
35656: ST_TO_ADDR
// end ;
35657: LD_VAR 0 4
35661: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35662: LD_INT 0
35664: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35665: LD_ADDR_VAR 0 5
35669: PUSH
35670: LD_VAR 0 1
35674: PPUSH
35675: CALL_OW 250
35679: PPUSH
35680: LD_VAR 0 1
35684: PPUSH
35685: CALL_OW 251
35689: PPUSH
35690: LD_VAR 0 2
35694: PPUSH
35695: LD_VAR 0 3
35699: PPUSH
35700: LD_VAR 0 4
35704: PPUSH
35705: CALL 36083 0 5
35709: ST_TO_ADDR
// end ;
35710: LD_VAR 0 5
35714: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
35715: LD_INT 0
35717: PPUSH
35718: PPUSH
35719: PPUSH
35720: PPUSH
// if not list or not unit then
35721: LD_VAR 0 2
35725: NOT
35726: PUSH
35727: LD_VAR 0 1
35731: NOT
35732: OR
35733: IFFALSE 35737
// exit ;
35735: GO 36078
// result := [ ] ;
35737: LD_ADDR_VAR 0 5
35741: PUSH
35742: EMPTY
35743: ST_TO_ADDR
// for i in list do
35744: LD_ADDR_VAR 0 6
35748: PUSH
35749: LD_VAR 0 2
35753: PUSH
35754: FOR_IN
35755: IFFALSE 35973
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
35757: LD_ADDR_VAR 0 8
35761: PUSH
35762: LD_VAR 0 1
35766: PPUSH
35767: LD_VAR 0 6
35771: PUSH
35772: LD_INT 1
35774: ARRAY
35775: PPUSH
35776: LD_VAR 0 6
35780: PUSH
35781: LD_INT 2
35783: ARRAY
35784: PPUSH
35785: CALL_OW 297
35789: ST_TO_ADDR
// if not Count ( result ) then
35790: LD_VAR 0 5
35794: PPUSH
35795: CALL 32367 0 1
35799: NOT
35800: IFFALSE 35833
// begin result := Join ( result , [ i , tmp ] ) ;
35802: LD_ADDR_VAR 0 5
35806: PUSH
35807: LD_VAR 0 5
35811: PPUSH
35812: LD_VAR 0 6
35816: PUSH
35817: LD_VAR 0 8
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PPUSH
35826: CALL 67976 0 2
35830: ST_TO_ADDR
// continue ;
35831: GO 35754
// end ; if result [ result ] [ 2 ] <= tmp then
35833: LD_VAR 0 5
35837: PUSH
35838: LD_VAR 0 5
35842: ARRAY
35843: PUSH
35844: LD_INT 2
35846: ARRAY
35847: PUSH
35848: LD_VAR 0 8
35852: LESSEQUAL
35853: IFFALSE 35886
// result := Join ( result , [ i , tmp ] ) else
35855: LD_ADDR_VAR 0 5
35859: PUSH
35860: LD_VAR 0 5
35864: PPUSH
35865: LD_VAR 0 6
35869: PUSH
35870: LD_VAR 0 8
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PPUSH
35879: CALL 67976 0 2
35883: ST_TO_ADDR
35884: GO 35971
// begin for j := 1 to Count ( result ) do
35886: LD_ADDR_VAR 0 7
35890: PUSH
35891: DOUBLE
35892: LD_INT 1
35894: DEC
35895: ST_TO_ADDR
35896: LD_VAR 0 5
35900: PPUSH
35901: CALL 32367 0 1
35905: PUSH
35906: FOR_TO
35907: IFFALSE 35969
// begin if tmp < result [ j ] [ 2 ] then
35909: LD_VAR 0 8
35913: PUSH
35914: LD_VAR 0 5
35918: PUSH
35919: LD_VAR 0 7
35923: ARRAY
35924: PUSH
35925: LD_INT 2
35927: ARRAY
35928: LESS
35929: IFFALSE 35967
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35931: LD_ADDR_VAR 0 5
35935: PUSH
35936: LD_VAR 0 5
35940: PPUSH
35941: LD_VAR 0 7
35945: PPUSH
35946: LD_VAR 0 6
35950: PUSH
35951: LD_VAR 0 8
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PPUSH
35960: CALL_OW 2
35964: ST_TO_ADDR
// break ;
35965: GO 35969
// end ; end ;
35967: GO 35906
35969: POP
35970: POP
// end ; end ;
35971: GO 35754
35973: POP
35974: POP
// if result and not asc then
35975: LD_VAR 0 5
35979: PUSH
35980: LD_VAR 0 3
35984: NOT
35985: AND
35986: IFFALSE 36003
// result := ReverseArray ( result ) ;
35988: LD_ADDR_VAR 0 5
35992: PUSH
35993: LD_VAR 0 5
35997: PPUSH
35998: CALL 63243 0 1
36002: ST_TO_ADDR
// tmp := [ ] ;
36003: LD_ADDR_VAR 0 8
36007: PUSH
36008: EMPTY
36009: ST_TO_ADDR
// if mode then
36010: LD_VAR 0 4
36014: IFFALSE 36078
// begin for i := 1 to result do
36016: LD_ADDR_VAR 0 6
36020: PUSH
36021: DOUBLE
36022: LD_INT 1
36024: DEC
36025: ST_TO_ADDR
36026: LD_VAR 0 5
36030: PUSH
36031: FOR_TO
36032: IFFALSE 36066
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
36034: LD_ADDR_VAR 0 8
36038: PUSH
36039: LD_VAR 0 8
36043: PPUSH
36044: LD_VAR 0 5
36048: PUSH
36049: LD_VAR 0 6
36053: ARRAY
36054: PUSH
36055: LD_INT 1
36057: ARRAY
36058: PPUSH
36059: CALL 67976 0 2
36063: ST_TO_ADDR
36064: GO 36031
36066: POP
36067: POP
// result := tmp ;
36068: LD_ADDR_VAR 0 5
36072: PUSH
36073: LD_VAR 0 8
36077: ST_TO_ADDR
// end ; end ;
36078: LD_VAR 0 5
36082: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36083: LD_INT 0
36085: PPUSH
36086: PPUSH
36087: PPUSH
36088: PPUSH
// if not list then
36089: LD_VAR 0 3
36093: NOT
36094: IFFALSE 36098
// exit ;
36096: GO 36486
// result := [ ] ;
36098: LD_ADDR_VAR 0 6
36102: PUSH
36103: EMPTY
36104: ST_TO_ADDR
// for i in list do
36105: LD_ADDR_VAR 0 7
36109: PUSH
36110: LD_VAR 0 3
36114: PUSH
36115: FOR_IN
36116: IFFALSE 36318
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36118: LD_ADDR_VAR 0 9
36122: PUSH
36123: LD_VAR 0 7
36127: PPUSH
36128: LD_VAR 0 1
36132: PPUSH
36133: LD_VAR 0 2
36137: PPUSH
36138: CALL_OW 297
36142: ST_TO_ADDR
// if not result then
36143: LD_VAR 0 6
36147: NOT
36148: IFFALSE 36174
// result := [ [ i , tmp ] ] else
36150: LD_ADDR_VAR 0 6
36154: PUSH
36155: LD_VAR 0 7
36159: PUSH
36160: LD_VAR 0 9
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: EMPTY
36170: LIST
36171: ST_TO_ADDR
36172: GO 36316
// begin if result [ result ] [ 2 ] <= tmp then
36174: LD_VAR 0 6
36178: PUSH
36179: LD_VAR 0 6
36183: ARRAY
36184: PUSH
36185: LD_INT 2
36187: ARRAY
36188: PUSH
36189: LD_VAR 0 9
36193: LESSEQUAL
36194: IFFALSE 36236
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36196: LD_ADDR_VAR 0 6
36200: PUSH
36201: LD_VAR 0 6
36205: PPUSH
36206: LD_VAR 0 6
36210: PUSH
36211: LD_INT 1
36213: PLUS
36214: PPUSH
36215: LD_VAR 0 7
36219: PUSH
36220: LD_VAR 0 9
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PPUSH
36229: CALL_OW 2
36233: ST_TO_ADDR
36234: GO 36316
// for j := 1 to result do
36236: LD_ADDR_VAR 0 8
36240: PUSH
36241: DOUBLE
36242: LD_INT 1
36244: DEC
36245: ST_TO_ADDR
36246: LD_VAR 0 6
36250: PUSH
36251: FOR_TO
36252: IFFALSE 36314
// begin if tmp < result [ j ] [ 2 ] then
36254: LD_VAR 0 9
36258: PUSH
36259: LD_VAR 0 6
36263: PUSH
36264: LD_VAR 0 8
36268: ARRAY
36269: PUSH
36270: LD_INT 2
36272: ARRAY
36273: LESS
36274: IFFALSE 36312
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36276: LD_ADDR_VAR 0 6
36280: PUSH
36281: LD_VAR 0 6
36285: PPUSH
36286: LD_VAR 0 8
36290: PPUSH
36291: LD_VAR 0 7
36295: PUSH
36296: LD_VAR 0 9
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PPUSH
36305: CALL_OW 2
36309: ST_TO_ADDR
// break ;
36310: GO 36314
// end ; end ;
36312: GO 36251
36314: POP
36315: POP
// end ; end ;
36316: GO 36115
36318: POP
36319: POP
// if result and not asc then
36320: LD_VAR 0 6
36324: PUSH
36325: LD_VAR 0 4
36329: NOT
36330: AND
36331: IFFALSE 36406
// begin tmp := result ;
36333: LD_ADDR_VAR 0 9
36337: PUSH
36338: LD_VAR 0 6
36342: ST_TO_ADDR
// for i = tmp downto 1 do
36343: LD_ADDR_VAR 0 7
36347: PUSH
36348: DOUBLE
36349: LD_VAR 0 9
36353: INC
36354: ST_TO_ADDR
36355: LD_INT 1
36357: PUSH
36358: FOR_DOWNTO
36359: IFFALSE 36404
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36361: LD_ADDR_VAR 0 6
36365: PUSH
36366: LD_VAR 0 6
36370: PPUSH
36371: LD_VAR 0 9
36375: PUSH
36376: LD_VAR 0 7
36380: MINUS
36381: PUSH
36382: LD_INT 1
36384: PLUS
36385: PPUSH
36386: LD_VAR 0 9
36390: PUSH
36391: LD_VAR 0 7
36395: ARRAY
36396: PPUSH
36397: CALL_OW 1
36401: ST_TO_ADDR
36402: GO 36358
36404: POP
36405: POP
// end ; tmp := [ ] ;
36406: LD_ADDR_VAR 0 9
36410: PUSH
36411: EMPTY
36412: ST_TO_ADDR
// if mode then
36413: LD_VAR 0 5
36417: IFFALSE 36486
// begin for i = 1 to result do
36419: LD_ADDR_VAR 0 7
36423: PUSH
36424: DOUBLE
36425: LD_INT 1
36427: DEC
36428: ST_TO_ADDR
36429: LD_VAR 0 6
36433: PUSH
36434: FOR_TO
36435: IFFALSE 36474
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36437: LD_ADDR_VAR 0 9
36441: PUSH
36442: LD_VAR 0 9
36446: PPUSH
36447: LD_VAR 0 7
36451: PPUSH
36452: LD_VAR 0 6
36456: PUSH
36457: LD_VAR 0 7
36461: ARRAY
36462: PUSH
36463: LD_INT 1
36465: ARRAY
36466: PPUSH
36467: CALL_OW 1
36471: ST_TO_ADDR
36472: GO 36434
36474: POP
36475: POP
// result := tmp ;
36476: LD_ADDR_VAR 0 6
36480: PUSH
36481: LD_VAR 0 9
36485: ST_TO_ADDR
// end ; end ;
36486: LD_VAR 0 6
36490: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36491: LD_INT 0
36493: PPUSH
36494: PPUSH
36495: PPUSH
36496: PPUSH
36497: PPUSH
36498: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
36499: LD_ADDR_VAR 0 5
36503: PUSH
36504: LD_INT 0
36506: PUSH
36507: LD_INT 0
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: EMPTY
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: ST_TO_ADDR
// if not x or not y then
36521: LD_VAR 0 2
36525: NOT
36526: PUSH
36527: LD_VAR 0 3
36531: NOT
36532: OR
36533: IFFALSE 36537
// exit ;
36535: GO 38187
// if not range then
36537: LD_VAR 0 4
36541: NOT
36542: IFFALSE 36552
// range := 10 ;
36544: LD_ADDR_VAR 0 4
36548: PUSH
36549: LD_INT 10
36551: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36552: LD_ADDR_VAR 0 8
36556: PUSH
36557: LD_INT 81
36559: PUSH
36560: LD_VAR 0 1
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 92
36571: PUSH
36572: LD_VAR 0 2
36576: PUSH
36577: LD_VAR 0 3
36581: PUSH
36582: LD_VAR 0 4
36586: PUSH
36587: EMPTY
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 3
36595: PUSH
36596: LD_INT 21
36598: PUSH
36599: LD_INT 3
36601: PUSH
36602: EMPTY
36603: LIST
36604: LIST
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: LIST
36614: PPUSH
36615: CALL_OW 69
36619: ST_TO_ADDR
// if not tmp then
36620: LD_VAR 0 8
36624: NOT
36625: IFFALSE 36629
// exit ;
36627: GO 38187
// for i in tmp do
36629: LD_ADDR_VAR 0 6
36633: PUSH
36634: LD_VAR 0 8
36638: PUSH
36639: FOR_IN
36640: IFFALSE 38162
// begin points := [ 0 , 0 , 0 ] ;
36642: LD_ADDR_VAR 0 9
36646: PUSH
36647: LD_INT 0
36649: PUSH
36650: LD_INT 0
36652: PUSH
36653: LD_INT 0
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: LIST
36660: ST_TO_ADDR
// bpoints := 1 ;
36661: LD_ADDR_VAR 0 10
36665: PUSH
36666: LD_INT 1
36668: ST_TO_ADDR
// case GetType ( i ) of unit_human :
36669: LD_VAR 0 6
36673: PPUSH
36674: CALL_OW 247
36678: PUSH
36679: LD_INT 1
36681: DOUBLE
36682: EQUAL
36683: IFTRUE 36687
36685: GO 37265
36687: POP
// begin if GetClass ( i ) = 1 then
36688: LD_VAR 0 6
36692: PPUSH
36693: CALL_OW 257
36697: PUSH
36698: LD_INT 1
36700: EQUAL
36701: IFFALSE 36722
// points := [ 10 , 5 , 3 ] ;
36703: LD_ADDR_VAR 0 9
36707: PUSH
36708: LD_INT 10
36710: PUSH
36711: LD_INT 5
36713: PUSH
36714: LD_INT 3
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: LIST
36721: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36722: LD_VAR 0 6
36726: PPUSH
36727: CALL_OW 257
36731: PUSH
36732: LD_INT 2
36734: PUSH
36735: LD_INT 3
36737: PUSH
36738: LD_INT 4
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: LIST
36745: IN
36746: IFFALSE 36767
// points := [ 3 , 2 , 1 ] ;
36748: LD_ADDR_VAR 0 9
36752: PUSH
36753: LD_INT 3
36755: PUSH
36756: LD_INT 2
36758: PUSH
36759: LD_INT 1
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: LIST
36766: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36767: LD_VAR 0 6
36771: PPUSH
36772: CALL_OW 257
36776: PUSH
36777: LD_INT 5
36779: EQUAL
36780: IFFALSE 36801
// points := [ 130 , 5 , 2 ] ;
36782: LD_ADDR_VAR 0 9
36786: PUSH
36787: LD_INT 130
36789: PUSH
36790: LD_INT 5
36792: PUSH
36793: LD_INT 2
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: LIST
36800: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36801: LD_VAR 0 6
36805: PPUSH
36806: CALL_OW 257
36810: PUSH
36811: LD_INT 8
36813: EQUAL
36814: IFFALSE 36835
// points := [ 35 , 35 , 30 ] ;
36816: LD_ADDR_VAR 0 9
36820: PUSH
36821: LD_INT 35
36823: PUSH
36824: LD_INT 35
36826: PUSH
36827: LD_INT 30
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: LIST
36834: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36835: LD_VAR 0 6
36839: PPUSH
36840: CALL_OW 257
36844: PUSH
36845: LD_INT 9
36847: EQUAL
36848: IFFALSE 36869
// points := [ 20 , 55 , 40 ] ;
36850: LD_ADDR_VAR 0 9
36854: PUSH
36855: LD_INT 20
36857: PUSH
36858: LD_INT 55
36860: PUSH
36861: LD_INT 40
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: LIST
36868: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36869: LD_VAR 0 6
36873: PPUSH
36874: CALL_OW 257
36878: PUSH
36879: LD_INT 12
36881: PUSH
36882: LD_INT 16
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: IN
36889: IFFALSE 36910
// points := [ 5 , 3 , 2 ] ;
36891: LD_ADDR_VAR 0 9
36895: PUSH
36896: LD_INT 5
36898: PUSH
36899: LD_INT 3
36901: PUSH
36902: LD_INT 2
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: LIST
36909: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36910: LD_VAR 0 6
36914: PPUSH
36915: CALL_OW 257
36919: PUSH
36920: LD_INT 17
36922: EQUAL
36923: IFFALSE 36944
// points := [ 100 , 50 , 75 ] ;
36925: LD_ADDR_VAR 0 9
36929: PUSH
36930: LD_INT 100
36932: PUSH
36933: LD_INT 50
36935: PUSH
36936: LD_INT 75
36938: PUSH
36939: EMPTY
36940: LIST
36941: LIST
36942: LIST
36943: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36944: LD_VAR 0 6
36948: PPUSH
36949: CALL_OW 257
36953: PUSH
36954: LD_INT 15
36956: EQUAL
36957: IFFALSE 36978
// points := [ 10 , 5 , 3 ] ;
36959: LD_ADDR_VAR 0 9
36963: PUSH
36964: LD_INT 10
36966: PUSH
36967: LD_INT 5
36969: PUSH
36970: LD_INT 3
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: LIST
36977: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36978: LD_VAR 0 6
36982: PPUSH
36983: CALL_OW 257
36987: PUSH
36988: LD_INT 14
36990: EQUAL
36991: IFFALSE 37012
// points := [ 10 , 0 , 0 ] ;
36993: LD_ADDR_VAR 0 9
36997: PUSH
36998: LD_INT 10
37000: PUSH
37001: LD_INT 0
37003: PUSH
37004: LD_INT 0
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: LIST
37011: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37012: LD_VAR 0 6
37016: PPUSH
37017: CALL_OW 257
37021: PUSH
37022: LD_INT 11
37024: EQUAL
37025: IFFALSE 37046
// points := [ 30 , 10 , 5 ] ;
37027: LD_ADDR_VAR 0 9
37031: PUSH
37032: LD_INT 30
37034: PUSH
37035: LD_INT 10
37037: PUSH
37038: LD_INT 5
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: LIST
37045: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37046: LD_VAR 0 1
37050: PPUSH
37051: LD_INT 5
37053: PPUSH
37054: CALL_OW 321
37058: PUSH
37059: LD_INT 2
37061: EQUAL
37062: IFFALSE 37079
// bpoints := bpoints * 1.8 ;
37064: LD_ADDR_VAR 0 10
37068: PUSH
37069: LD_VAR 0 10
37073: PUSH
37074: LD_REAL  1.80000000000000E+0000
37077: MUL
37078: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37079: LD_VAR 0 6
37083: PPUSH
37084: CALL_OW 257
37088: PUSH
37089: LD_INT 1
37091: PUSH
37092: LD_INT 2
37094: PUSH
37095: LD_INT 3
37097: PUSH
37098: LD_INT 4
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: IN
37107: PUSH
37108: LD_VAR 0 1
37112: PPUSH
37113: LD_INT 51
37115: PPUSH
37116: CALL_OW 321
37120: PUSH
37121: LD_INT 2
37123: EQUAL
37124: AND
37125: IFFALSE 37142
// bpoints := bpoints * 1.2 ;
37127: LD_ADDR_VAR 0 10
37131: PUSH
37132: LD_VAR 0 10
37136: PUSH
37137: LD_REAL  1.20000000000000E+0000
37140: MUL
37141: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37142: LD_VAR 0 6
37146: PPUSH
37147: CALL_OW 257
37151: PUSH
37152: LD_INT 5
37154: PUSH
37155: LD_INT 7
37157: PUSH
37158: LD_INT 9
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: LIST
37165: IN
37166: PUSH
37167: LD_VAR 0 1
37171: PPUSH
37172: LD_INT 52
37174: PPUSH
37175: CALL_OW 321
37179: PUSH
37180: LD_INT 2
37182: EQUAL
37183: AND
37184: IFFALSE 37201
// bpoints := bpoints * 1.5 ;
37186: LD_ADDR_VAR 0 10
37190: PUSH
37191: LD_VAR 0 10
37195: PUSH
37196: LD_REAL  1.50000000000000E+0000
37199: MUL
37200: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37201: LD_VAR 0 1
37205: PPUSH
37206: LD_INT 66
37208: PPUSH
37209: CALL_OW 321
37213: PUSH
37214: LD_INT 2
37216: EQUAL
37217: IFFALSE 37234
// bpoints := bpoints * 1.1 ;
37219: LD_ADDR_VAR 0 10
37223: PUSH
37224: LD_VAR 0 10
37228: PUSH
37229: LD_REAL  1.10000000000000E+0000
37232: MUL
37233: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37234: LD_ADDR_VAR 0 10
37238: PUSH
37239: LD_VAR 0 10
37243: PUSH
37244: LD_VAR 0 6
37248: PPUSH
37249: LD_INT 1
37251: PPUSH
37252: CALL_OW 259
37256: PUSH
37257: LD_REAL  1.15000000000000E+0000
37260: MUL
37261: MUL
37262: ST_TO_ADDR
// end ; unit_vehicle :
37263: GO 38091
37265: LD_INT 2
37267: DOUBLE
37268: EQUAL
37269: IFTRUE 37273
37271: GO 38079
37273: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37274: LD_VAR 0 6
37278: PPUSH
37279: CALL_OW 264
37283: PUSH
37284: LD_INT 2
37286: PUSH
37287: LD_INT 42
37289: PUSH
37290: LD_INT 24
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: LIST
37297: IN
37298: IFFALSE 37319
// points := [ 25 , 5 , 3 ] ;
37300: LD_ADDR_VAR 0 9
37304: PUSH
37305: LD_INT 25
37307: PUSH
37308: LD_INT 5
37310: PUSH
37311: LD_INT 3
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: LIST
37318: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37319: LD_VAR 0 6
37323: PPUSH
37324: CALL_OW 264
37328: PUSH
37329: LD_INT 4
37331: PUSH
37332: LD_INT 43
37334: PUSH
37335: LD_INT 25
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: LIST
37342: IN
37343: IFFALSE 37364
// points := [ 40 , 15 , 5 ] ;
37345: LD_ADDR_VAR 0 9
37349: PUSH
37350: LD_INT 40
37352: PUSH
37353: LD_INT 15
37355: PUSH
37356: LD_INT 5
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: LIST
37363: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37364: LD_VAR 0 6
37368: PPUSH
37369: CALL_OW 264
37373: PUSH
37374: LD_INT 3
37376: PUSH
37377: LD_INT 23
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: IN
37384: IFFALSE 37405
// points := [ 7 , 25 , 8 ] ;
37386: LD_ADDR_VAR 0 9
37390: PUSH
37391: LD_INT 7
37393: PUSH
37394: LD_INT 25
37396: PUSH
37397: LD_INT 8
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: LIST
37404: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37405: LD_VAR 0 6
37409: PPUSH
37410: CALL_OW 264
37414: PUSH
37415: LD_INT 5
37417: PUSH
37418: LD_INT 27
37420: PUSH
37421: LD_INT 44
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: LIST
37428: IN
37429: IFFALSE 37450
// points := [ 14 , 50 , 16 ] ;
37431: LD_ADDR_VAR 0 9
37435: PUSH
37436: LD_INT 14
37438: PUSH
37439: LD_INT 50
37441: PUSH
37442: LD_INT 16
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: LIST
37449: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37450: LD_VAR 0 6
37454: PPUSH
37455: CALL_OW 264
37459: PUSH
37460: LD_INT 6
37462: PUSH
37463: LD_INT 46
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: IN
37470: IFFALSE 37491
// points := [ 32 , 120 , 70 ] ;
37472: LD_ADDR_VAR 0 9
37476: PUSH
37477: LD_INT 32
37479: PUSH
37480: LD_INT 120
37482: PUSH
37483: LD_INT 70
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: LIST
37490: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37491: LD_VAR 0 6
37495: PPUSH
37496: CALL_OW 264
37500: PUSH
37501: LD_INT 7
37503: PUSH
37504: LD_INT 28
37506: PUSH
37507: LD_INT 45
37509: PUSH
37510: LD_INT 92
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: IN
37519: IFFALSE 37540
// points := [ 35 , 20 , 45 ] ;
37521: LD_ADDR_VAR 0 9
37525: PUSH
37526: LD_INT 35
37528: PUSH
37529: LD_INT 20
37531: PUSH
37532: LD_INT 45
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: LIST
37539: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
37540: LD_VAR 0 6
37544: PPUSH
37545: CALL_OW 264
37549: PUSH
37550: LD_INT 47
37552: PUSH
37553: EMPTY
37554: LIST
37555: IN
37556: IFFALSE 37577
// points := [ 67 , 45 , 75 ] ;
37558: LD_ADDR_VAR 0 9
37562: PUSH
37563: LD_INT 67
37565: PUSH
37566: LD_INT 45
37568: PUSH
37569: LD_INT 75
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: LIST
37576: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
37577: LD_VAR 0 6
37581: PPUSH
37582: CALL_OW 264
37586: PUSH
37587: LD_INT 26
37589: PUSH
37590: EMPTY
37591: LIST
37592: IN
37593: IFFALSE 37614
// points := [ 120 , 30 , 80 ] ;
37595: LD_ADDR_VAR 0 9
37599: PUSH
37600: LD_INT 120
37602: PUSH
37603: LD_INT 30
37605: PUSH
37606: LD_INT 80
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: LIST
37613: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
37614: LD_VAR 0 6
37618: PPUSH
37619: CALL_OW 264
37623: PUSH
37624: LD_INT 22
37626: PUSH
37627: EMPTY
37628: LIST
37629: IN
37630: IFFALSE 37651
// points := [ 40 , 1 , 1 ] ;
37632: LD_ADDR_VAR 0 9
37636: PUSH
37637: LD_INT 40
37639: PUSH
37640: LD_INT 1
37642: PUSH
37643: LD_INT 1
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: LIST
37650: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
37651: LD_VAR 0 6
37655: PPUSH
37656: CALL_OW 264
37660: PUSH
37661: LD_INT 29
37663: PUSH
37664: EMPTY
37665: LIST
37666: IN
37667: IFFALSE 37688
// points := [ 70 , 200 , 400 ] ;
37669: LD_ADDR_VAR 0 9
37673: PUSH
37674: LD_INT 70
37676: PUSH
37677: LD_INT 200
37679: PUSH
37680: LD_INT 400
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: LIST
37687: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37688: LD_VAR 0 6
37692: PPUSH
37693: CALL_OW 264
37697: PUSH
37698: LD_INT 14
37700: PUSH
37701: LD_INT 53
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: IN
37708: IFFALSE 37729
// points := [ 40 , 10 , 20 ] ;
37710: LD_ADDR_VAR 0 9
37714: PUSH
37715: LD_INT 40
37717: PUSH
37718: LD_INT 10
37720: PUSH
37721: LD_INT 20
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: LIST
37728: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37729: LD_VAR 0 6
37733: PPUSH
37734: CALL_OW 264
37738: PUSH
37739: LD_INT 9
37741: PUSH
37742: EMPTY
37743: LIST
37744: IN
37745: IFFALSE 37766
// points := [ 5 , 70 , 20 ] ;
37747: LD_ADDR_VAR 0 9
37751: PUSH
37752: LD_INT 5
37754: PUSH
37755: LD_INT 70
37757: PUSH
37758: LD_INT 20
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: LIST
37765: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37766: LD_VAR 0 6
37770: PPUSH
37771: CALL_OW 264
37775: PUSH
37776: LD_INT 10
37778: PUSH
37779: EMPTY
37780: LIST
37781: IN
37782: IFFALSE 37803
// points := [ 35 , 110 , 70 ] ;
37784: LD_ADDR_VAR 0 9
37788: PUSH
37789: LD_INT 35
37791: PUSH
37792: LD_INT 110
37794: PUSH
37795: LD_INT 70
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: LIST
37802: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37803: LD_VAR 0 6
37807: PPUSH
37808: CALL_OW 265
37812: PUSH
37813: LD_INT 25
37815: EQUAL
37816: IFFALSE 37837
// points := [ 80 , 65 , 100 ] ;
37818: LD_ADDR_VAR 0 9
37822: PUSH
37823: LD_INT 80
37825: PUSH
37826: LD_INT 65
37828: PUSH
37829: LD_INT 100
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: LIST
37836: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37837: LD_VAR 0 6
37841: PPUSH
37842: CALL_OW 263
37846: PUSH
37847: LD_INT 1
37849: EQUAL
37850: IFFALSE 37885
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37852: LD_ADDR_VAR 0 10
37856: PUSH
37857: LD_VAR 0 10
37861: PUSH
37862: LD_VAR 0 6
37866: PPUSH
37867: CALL_OW 311
37871: PPUSH
37872: LD_INT 3
37874: PPUSH
37875: CALL_OW 259
37879: PUSH
37880: LD_INT 4
37882: MUL
37883: MUL
37884: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37885: LD_VAR 0 6
37889: PPUSH
37890: CALL_OW 263
37894: PUSH
37895: LD_INT 2
37897: EQUAL
37898: IFFALSE 37949
// begin j := IsControledBy ( i ) ;
37900: LD_ADDR_VAR 0 7
37904: PUSH
37905: LD_VAR 0 6
37909: PPUSH
37910: CALL_OW 312
37914: ST_TO_ADDR
// if j then
37915: LD_VAR 0 7
37919: IFFALSE 37949
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37921: LD_ADDR_VAR 0 10
37925: PUSH
37926: LD_VAR 0 10
37930: PUSH
37931: LD_VAR 0 7
37935: PPUSH
37936: LD_INT 3
37938: PPUSH
37939: CALL_OW 259
37943: PUSH
37944: LD_INT 3
37946: MUL
37947: MUL
37948: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37949: LD_VAR 0 6
37953: PPUSH
37954: CALL_OW 264
37958: PUSH
37959: LD_INT 5
37961: PUSH
37962: LD_INT 6
37964: PUSH
37965: LD_INT 46
37967: PUSH
37968: LD_INT 44
37970: PUSH
37971: LD_INT 47
37973: PUSH
37974: LD_INT 45
37976: PUSH
37977: LD_INT 28
37979: PUSH
37980: LD_INT 7
37982: PUSH
37983: LD_INT 27
37985: PUSH
37986: LD_INT 29
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: IN
38001: PUSH
38002: LD_VAR 0 1
38006: PPUSH
38007: LD_INT 52
38009: PPUSH
38010: CALL_OW 321
38014: PUSH
38015: LD_INT 2
38017: EQUAL
38018: AND
38019: IFFALSE 38036
// bpoints := bpoints * 1.2 ;
38021: LD_ADDR_VAR 0 10
38025: PUSH
38026: LD_VAR 0 10
38030: PUSH
38031: LD_REAL  1.20000000000000E+0000
38034: MUL
38035: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38036: LD_VAR 0 6
38040: PPUSH
38041: CALL_OW 264
38045: PUSH
38046: LD_INT 6
38048: PUSH
38049: LD_INT 46
38051: PUSH
38052: LD_INT 47
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: LIST
38059: IN
38060: IFFALSE 38077
// bpoints := bpoints * 1.2 ;
38062: LD_ADDR_VAR 0 10
38066: PUSH
38067: LD_VAR 0 10
38071: PUSH
38072: LD_REAL  1.20000000000000E+0000
38075: MUL
38076: ST_TO_ADDR
// end ; unit_building :
38077: GO 38091
38079: LD_INT 3
38081: DOUBLE
38082: EQUAL
38083: IFTRUE 38087
38085: GO 38090
38087: POP
// ; end ;
38088: GO 38091
38090: POP
// for j = 1 to 3 do
38091: LD_ADDR_VAR 0 7
38095: PUSH
38096: DOUBLE
38097: LD_INT 1
38099: DEC
38100: ST_TO_ADDR
38101: LD_INT 3
38103: PUSH
38104: FOR_TO
38105: IFFALSE 38158
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38107: LD_ADDR_VAR 0 5
38111: PUSH
38112: LD_VAR 0 5
38116: PPUSH
38117: LD_VAR 0 7
38121: PPUSH
38122: LD_VAR 0 5
38126: PUSH
38127: LD_VAR 0 7
38131: ARRAY
38132: PUSH
38133: LD_VAR 0 9
38137: PUSH
38138: LD_VAR 0 7
38142: ARRAY
38143: PUSH
38144: LD_VAR 0 10
38148: MUL
38149: PLUS
38150: PPUSH
38151: CALL_OW 1
38155: ST_TO_ADDR
38156: GO 38104
38158: POP
38159: POP
// end ;
38160: GO 36639
38162: POP
38163: POP
// result := Replace ( result , 4 , tmp ) ;
38164: LD_ADDR_VAR 0 5
38168: PUSH
38169: LD_VAR 0 5
38173: PPUSH
38174: LD_INT 4
38176: PPUSH
38177: LD_VAR 0 8
38181: PPUSH
38182: CALL_OW 1
38186: ST_TO_ADDR
// end ;
38187: LD_VAR 0 5
38191: RET
// export function DangerAtRange ( unit , range ) ; begin
38192: LD_INT 0
38194: PPUSH
// if not unit then
38195: LD_VAR 0 1
38199: NOT
38200: IFFALSE 38204
// exit ;
38202: GO 38249
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38204: LD_ADDR_VAR 0 3
38208: PUSH
38209: LD_VAR 0 1
38213: PPUSH
38214: CALL_OW 255
38218: PPUSH
38219: LD_VAR 0 1
38223: PPUSH
38224: CALL_OW 250
38228: PPUSH
38229: LD_VAR 0 1
38233: PPUSH
38234: CALL_OW 251
38238: PPUSH
38239: LD_VAR 0 2
38243: PPUSH
38244: CALL 36491 0 4
38248: ST_TO_ADDR
// end ;
38249: LD_VAR 0 3
38253: RET
// export function DangerInArea ( side , area ) ; begin
38254: LD_INT 0
38256: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38257: LD_ADDR_VAR 0 3
38261: PUSH
38262: LD_VAR 0 2
38266: PPUSH
38267: LD_INT 81
38269: PUSH
38270: LD_VAR 0 1
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PPUSH
38279: CALL_OW 70
38283: ST_TO_ADDR
// end ;
38284: LD_VAR 0 3
38288: RET
// export function IsExtension ( b ) ; begin
38289: LD_INT 0
38291: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38292: LD_ADDR_VAR 0 2
38296: PUSH
38297: LD_VAR 0 1
38301: PUSH
38302: LD_INT 23
38304: PUSH
38305: LD_INT 20
38307: PUSH
38308: LD_INT 22
38310: PUSH
38311: LD_INT 17
38313: PUSH
38314: LD_INT 24
38316: PUSH
38317: LD_INT 21
38319: PUSH
38320: LD_INT 19
38322: PUSH
38323: LD_INT 16
38325: PUSH
38326: LD_INT 25
38328: PUSH
38329: LD_INT 18
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: IN
38344: ST_TO_ADDR
// end ;
38345: LD_VAR 0 2
38349: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38350: LD_INT 0
38352: PPUSH
38353: PPUSH
38354: PPUSH
// result := [ ] ;
38355: LD_ADDR_VAR 0 4
38359: PUSH
38360: EMPTY
38361: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38362: LD_ADDR_VAR 0 5
38366: PUSH
38367: LD_VAR 0 2
38371: PPUSH
38372: LD_INT 21
38374: PUSH
38375: LD_INT 3
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PPUSH
38382: CALL_OW 70
38386: ST_TO_ADDR
// if not tmp then
38387: LD_VAR 0 5
38391: NOT
38392: IFFALSE 38396
// exit ;
38394: GO 38460
// if checkLink then
38396: LD_VAR 0 3
38400: IFFALSE 38450
// begin for i in tmp do
38402: LD_ADDR_VAR 0 6
38406: PUSH
38407: LD_VAR 0 5
38411: PUSH
38412: FOR_IN
38413: IFFALSE 38448
// if GetBase ( i ) <> base then
38415: LD_VAR 0 6
38419: PPUSH
38420: CALL_OW 274
38424: PUSH
38425: LD_VAR 0 1
38429: NONEQUAL
38430: IFFALSE 38446
// ComLinkToBase ( base , i ) ;
38432: LD_VAR 0 1
38436: PPUSH
38437: LD_VAR 0 6
38441: PPUSH
38442: CALL_OW 169
38446: GO 38412
38448: POP
38449: POP
// end ; result := tmp ;
38450: LD_ADDR_VAR 0 4
38454: PUSH
38455: LD_VAR 0 5
38459: ST_TO_ADDR
// end ;
38460: LD_VAR 0 4
38464: RET
// export function ComComplete ( units , b ) ; var i ; begin
38465: LD_INT 0
38467: PPUSH
38468: PPUSH
// if not units then
38469: LD_VAR 0 1
38473: NOT
38474: IFFALSE 38478
// exit ;
38476: GO 38568
// for i in units do
38478: LD_ADDR_VAR 0 4
38482: PUSH
38483: LD_VAR 0 1
38487: PUSH
38488: FOR_IN
38489: IFFALSE 38566
// if BuildingStatus ( b ) = bs_build then
38491: LD_VAR 0 2
38495: PPUSH
38496: CALL_OW 461
38500: PUSH
38501: LD_INT 1
38503: EQUAL
38504: IFFALSE 38564
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
38506: LD_VAR 0 4
38510: PPUSH
38511: LD_STRING h
38513: PUSH
38514: LD_VAR 0 2
38518: PPUSH
38519: CALL_OW 250
38523: PUSH
38524: LD_VAR 0 2
38528: PPUSH
38529: CALL_OW 251
38533: PUSH
38534: LD_VAR 0 2
38538: PUSH
38539: LD_INT 0
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: LD_INT 0
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: PUSH
38557: EMPTY
38558: LIST
38559: PPUSH
38560: CALL_OW 446
38564: GO 38488
38566: POP
38567: POP
// end ;
38568: LD_VAR 0 3
38572: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
38573: LD_INT 0
38575: PPUSH
38576: PPUSH
38577: PPUSH
38578: PPUSH
38579: PPUSH
38580: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
38581: LD_VAR 0 1
38585: NOT
38586: PUSH
38587: LD_VAR 0 1
38591: PPUSH
38592: CALL_OW 263
38596: PUSH
38597: LD_INT 2
38599: NONEQUAL
38600: OR
38601: IFFALSE 38605
// exit ;
38603: GO 38921
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
38605: LD_ADDR_VAR 0 6
38609: PUSH
38610: LD_INT 22
38612: PUSH
38613: LD_VAR 0 1
38617: PPUSH
38618: CALL_OW 255
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 2
38629: PUSH
38630: LD_INT 30
38632: PUSH
38633: LD_INT 36
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 34
38642: PUSH
38643: LD_INT 31
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: LIST
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PPUSH
38659: CALL_OW 69
38663: ST_TO_ADDR
// if not tmp then
38664: LD_VAR 0 6
38668: NOT
38669: IFFALSE 38673
// exit ;
38671: GO 38921
// result := [ ] ;
38673: LD_ADDR_VAR 0 2
38677: PUSH
38678: EMPTY
38679: ST_TO_ADDR
// for i in tmp do
38680: LD_ADDR_VAR 0 3
38684: PUSH
38685: LD_VAR 0 6
38689: PUSH
38690: FOR_IN
38691: IFFALSE 38762
// begin t := UnitsInside ( i ) ;
38693: LD_ADDR_VAR 0 4
38697: PUSH
38698: LD_VAR 0 3
38702: PPUSH
38703: CALL_OW 313
38707: ST_TO_ADDR
// if t then
38708: LD_VAR 0 4
38712: IFFALSE 38760
// for j in t do
38714: LD_ADDR_VAR 0 7
38718: PUSH
38719: LD_VAR 0 4
38723: PUSH
38724: FOR_IN
38725: IFFALSE 38758
// result := Replace ( result , result + 1 , j ) ;
38727: LD_ADDR_VAR 0 2
38731: PUSH
38732: LD_VAR 0 2
38736: PPUSH
38737: LD_VAR 0 2
38741: PUSH
38742: LD_INT 1
38744: PLUS
38745: PPUSH
38746: LD_VAR 0 7
38750: PPUSH
38751: CALL_OW 1
38755: ST_TO_ADDR
38756: GO 38724
38758: POP
38759: POP
// end ;
38760: GO 38690
38762: POP
38763: POP
// if not result then
38764: LD_VAR 0 2
38768: NOT
38769: IFFALSE 38773
// exit ;
38771: GO 38921
// mech := result [ 1 ] ;
38773: LD_ADDR_VAR 0 5
38777: PUSH
38778: LD_VAR 0 2
38782: PUSH
38783: LD_INT 1
38785: ARRAY
38786: ST_TO_ADDR
// if result > 1 then
38787: LD_VAR 0 2
38791: PUSH
38792: LD_INT 1
38794: GREATER
38795: IFFALSE 38907
// begin for i = 2 to result do
38797: LD_ADDR_VAR 0 3
38801: PUSH
38802: DOUBLE
38803: LD_INT 2
38805: DEC
38806: ST_TO_ADDR
38807: LD_VAR 0 2
38811: PUSH
38812: FOR_TO
38813: IFFALSE 38905
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38815: LD_ADDR_VAR 0 4
38819: PUSH
38820: LD_VAR 0 2
38824: PUSH
38825: LD_VAR 0 3
38829: ARRAY
38830: PPUSH
38831: LD_INT 3
38833: PPUSH
38834: CALL_OW 259
38838: PUSH
38839: LD_VAR 0 2
38843: PUSH
38844: LD_VAR 0 3
38848: ARRAY
38849: PPUSH
38850: CALL_OW 432
38854: MINUS
38855: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38856: LD_VAR 0 4
38860: PUSH
38861: LD_VAR 0 5
38865: PPUSH
38866: LD_INT 3
38868: PPUSH
38869: CALL_OW 259
38873: PUSH
38874: LD_VAR 0 5
38878: PPUSH
38879: CALL_OW 432
38883: MINUS
38884: GREATEREQUAL
38885: IFFALSE 38903
// mech := result [ i ] ;
38887: LD_ADDR_VAR 0 5
38891: PUSH
38892: LD_VAR 0 2
38896: PUSH
38897: LD_VAR 0 3
38901: ARRAY
38902: ST_TO_ADDR
// end ;
38903: GO 38812
38905: POP
38906: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38907: LD_VAR 0 1
38911: PPUSH
38912: LD_VAR 0 5
38916: PPUSH
38917: CALL_OW 135
// end ;
38921: LD_VAR 0 2
38925: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38926: LD_INT 0
38928: PPUSH
38929: PPUSH
38930: PPUSH
38931: PPUSH
38932: PPUSH
38933: PPUSH
38934: PPUSH
38935: PPUSH
38936: PPUSH
38937: PPUSH
38938: PPUSH
38939: PPUSH
38940: PPUSH
// result := [ ] ;
38941: LD_ADDR_VAR 0 7
38945: PUSH
38946: EMPTY
38947: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38948: LD_VAR 0 1
38952: PPUSH
38953: CALL_OW 266
38957: PUSH
38958: LD_INT 0
38960: PUSH
38961: LD_INT 1
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: IN
38968: NOT
38969: IFFALSE 38973
// exit ;
38971: GO 40607
// if name then
38973: LD_VAR 0 3
38977: IFFALSE 38993
// SetBName ( base_dep , name ) ;
38979: LD_VAR 0 1
38983: PPUSH
38984: LD_VAR 0 3
38988: PPUSH
38989: CALL_OW 500
// base := GetBase ( base_dep ) ;
38993: LD_ADDR_VAR 0 15
38997: PUSH
38998: LD_VAR 0 1
39002: PPUSH
39003: CALL_OW 274
39007: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39008: LD_ADDR_VAR 0 16
39012: PUSH
39013: LD_VAR 0 1
39017: PPUSH
39018: CALL_OW 255
39022: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39023: LD_ADDR_VAR 0 17
39027: PUSH
39028: LD_VAR 0 1
39032: PPUSH
39033: CALL_OW 248
39037: ST_TO_ADDR
// if sources then
39038: LD_VAR 0 5
39042: IFFALSE 39089
// for i = 1 to 3 do
39044: LD_ADDR_VAR 0 8
39048: PUSH
39049: DOUBLE
39050: LD_INT 1
39052: DEC
39053: ST_TO_ADDR
39054: LD_INT 3
39056: PUSH
39057: FOR_TO
39058: IFFALSE 39087
// AddResourceType ( base , i , sources [ i ] ) ;
39060: LD_VAR 0 15
39064: PPUSH
39065: LD_VAR 0 8
39069: PPUSH
39070: LD_VAR 0 5
39074: PUSH
39075: LD_VAR 0 8
39079: ARRAY
39080: PPUSH
39081: CALL_OW 276
39085: GO 39057
39087: POP
39088: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39089: LD_ADDR_VAR 0 18
39093: PUSH
39094: LD_VAR 0 15
39098: PPUSH
39099: LD_VAR 0 2
39103: PPUSH
39104: LD_INT 1
39106: PPUSH
39107: CALL 38350 0 3
39111: ST_TO_ADDR
// InitHc ;
39112: CALL_OW 19
// InitUc ;
39116: CALL_OW 18
// uc_side := side ;
39120: LD_ADDR_OWVAR 20
39124: PUSH
39125: LD_VAR 0 16
39129: ST_TO_ADDR
// uc_nation := nation ;
39130: LD_ADDR_OWVAR 21
39134: PUSH
39135: LD_VAR 0 17
39139: ST_TO_ADDR
// if buildings then
39140: LD_VAR 0 18
39144: IFFALSE 40466
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39146: LD_ADDR_VAR 0 19
39150: PUSH
39151: LD_VAR 0 18
39155: PPUSH
39156: LD_INT 2
39158: PUSH
39159: LD_INT 30
39161: PUSH
39162: LD_INT 29
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 30
39171: PUSH
39172: LD_INT 30
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: EMPTY
39180: LIST
39181: LIST
39182: LIST
39183: PPUSH
39184: CALL_OW 72
39188: ST_TO_ADDR
// if tmp then
39189: LD_VAR 0 19
39193: IFFALSE 39241
// for i in tmp do
39195: LD_ADDR_VAR 0 8
39199: PUSH
39200: LD_VAR 0 19
39204: PUSH
39205: FOR_IN
39206: IFFALSE 39239
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39208: LD_VAR 0 8
39212: PPUSH
39213: CALL_OW 250
39217: PPUSH
39218: LD_VAR 0 8
39222: PPUSH
39223: CALL_OW 251
39227: PPUSH
39228: LD_VAR 0 16
39232: PPUSH
39233: CALL_OW 441
39237: GO 39205
39239: POP
39240: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39241: LD_VAR 0 18
39245: PPUSH
39246: LD_INT 2
39248: PUSH
39249: LD_INT 30
39251: PUSH
39252: LD_INT 32
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 30
39261: PUSH
39262: LD_INT 33
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: LIST
39273: PPUSH
39274: CALL_OW 72
39278: IFFALSE 39366
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39280: LD_ADDR_VAR 0 8
39284: PUSH
39285: LD_VAR 0 18
39289: PPUSH
39290: LD_INT 2
39292: PUSH
39293: LD_INT 30
39295: PUSH
39296: LD_INT 32
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 30
39305: PUSH
39306: LD_INT 33
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: LIST
39317: PPUSH
39318: CALL_OW 72
39322: PUSH
39323: FOR_IN
39324: IFFALSE 39364
// begin if not GetBWeapon ( i ) then
39326: LD_VAR 0 8
39330: PPUSH
39331: CALL_OW 269
39335: NOT
39336: IFFALSE 39362
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39338: LD_VAR 0 8
39342: PPUSH
39343: LD_VAR 0 8
39347: PPUSH
39348: LD_VAR 0 2
39352: PPUSH
39353: CALL 40612 0 2
39357: PPUSH
39358: CALL_OW 431
// end ;
39362: GO 39323
39364: POP
39365: POP
// end ; for i = 1 to personel do
39366: LD_ADDR_VAR 0 8
39370: PUSH
39371: DOUBLE
39372: LD_INT 1
39374: DEC
39375: ST_TO_ADDR
39376: LD_VAR 0 6
39380: PUSH
39381: FOR_TO
39382: IFFALSE 40446
// begin if i > 4 then
39384: LD_VAR 0 8
39388: PUSH
39389: LD_INT 4
39391: GREATER
39392: IFFALSE 39396
// break ;
39394: GO 40446
// case i of 1 :
39396: LD_VAR 0 8
39400: PUSH
39401: LD_INT 1
39403: DOUBLE
39404: EQUAL
39405: IFTRUE 39409
39407: GO 39489
39409: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39410: LD_ADDR_VAR 0 12
39414: PUSH
39415: LD_VAR 0 18
39419: PPUSH
39420: LD_INT 22
39422: PUSH
39423: LD_VAR 0 16
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 58
39434: PUSH
39435: EMPTY
39436: LIST
39437: PUSH
39438: LD_INT 2
39440: PUSH
39441: LD_INT 30
39443: PUSH
39444: LD_INT 32
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 30
39453: PUSH
39454: LD_INT 4
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 30
39463: PUSH
39464: LD_INT 5
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: LIST
39481: PPUSH
39482: CALL_OW 72
39486: ST_TO_ADDR
39487: GO 39711
39489: LD_INT 2
39491: DOUBLE
39492: EQUAL
39493: IFTRUE 39497
39495: GO 39559
39497: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39498: LD_ADDR_VAR 0 12
39502: PUSH
39503: LD_VAR 0 18
39507: PPUSH
39508: LD_INT 22
39510: PUSH
39511: LD_VAR 0 16
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 2
39522: PUSH
39523: LD_INT 30
39525: PUSH
39526: LD_INT 0
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 30
39535: PUSH
39536: LD_INT 1
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: LIST
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PPUSH
39552: CALL_OW 72
39556: ST_TO_ADDR
39557: GO 39711
39559: LD_INT 3
39561: DOUBLE
39562: EQUAL
39563: IFTRUE 39567
39565: GO 39629
39567: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
39568: LD_ADDR_VAR 0 12
39572: PUSH
39573: LD_VAR 0 18
39577: PPUSH
39578: LD_INT 22
39580: PUSH
39581: LD_VAR 0 16
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 2
39592: PUSH
39593: LD_INT 30
39595: PUSH
39596: LD_INT 2
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 30
39605: PUSH
39606: LD_INT 3
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: LIST
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PPUSH
39622: CALL_OW 72
39626: ST_TO_ADDR
39627: GO 39711
39629: LD_INT 4
39631: DOUBLE
39632: EQUAL
39633: IFTRUE 39637
39635: GO 39710
39637: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
39638: LD_ADDR_VAR 0 12
39642: PUSH
39643: LD_VAR 0 18
39647: PPUSH
39648: LD_INT 22
39650: PUSH
39651: LD_VAR 0 16
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 2
39662: PUSH
39663: LD_INT 30
39665: PUSH
39666: LD_INT 6
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 30
39675: PUSH
39676: LD_INT 7
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 30
39685: PUSH
39686: LD_INT 8
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PPUSH
39703: CALL_OW 72
39707: ST_TO_ADDR
39708: GO 39711
39710: POP
// if i = 1 then
39711: LD_VAR 0 8
39715: PUSH
39716: LD_INT 1
39718: EQUAL
39719: IFFALSE 39830
// begin tmp := [ ] ;
39721: LD_ADDR_VAR 0 19
39725: PUSH
39726: EMPTY
39727: ST_TO_ADDR
// for j in f do
39728: LD_ADDR_VAR 0 9
39732: PUSH
39733: LD_VAR 0 12
39737: PUSH
39738: FOR_IN
39739: IFFALSE 39812
// if GetBType ( j ) = b_bunker then
39741: LD_VAR 0 9
39745: PPUSH
39746: CALL_OW 266
39750: PUSH
39751: LD_INT 32
39753: EQUAL
39754: IFFALSE 39781
// tmp := Insert ( tmp , 1 , j ) else
39756: LD_ADDR_VAR 0 19
39760: PUSH
39761: LD_VAR 0 19
39765: PPUSH
39766: LD_INT 1
39768: PPUSH
39769: LD_VAR 0 9
39773: PPUSH
39774: CALL_OW 2
39778: ST_TO_ADDR
39779: GO 39810
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39781: LD_ADDR_VAR 0 19
39785: PUSH
39786: LD_VAR 0 19
39790: PPUSH
39791: LD_VAR 0 19
39795: PUSH
39796: LD_INT 1
39798: PLUS
39799: PPUSH
39800: LD_VAR 0 9
39804: PPUSH
39805: CALL_OW 2
39809: ST_TO_ADDR
39810: GO 39738
39812: POP
39813: POP
// if tmp then
39814: LD_VAR 0 19
39818: IFFALSE 39830
// f := tmp ;
39820: LD_ADDR_VAR 0 12
39824: PUSH
39825: LD_VAR 0 19
39829: ST_TO_ADDR
// end ; x := personel [ i ] ;
39830: LD_ADDR_VAR 0 13
39834: PUSH
39835: LD_VAR 0 6
39839: PUSH
39840: LD_VAR 0 8
39844: ARRAY
39845: ST_TO_ADDR
// if x = - 1 then
39846: LD_VAR 0 13
39850: PUSH
39851: LD_INT 1
39853: NEG
39854: EQUAL
39855: IFFALSE 40064
// begin for j in f do
39857: LD_ADDR_VAR 0 9
39861: PUSH
39862: LD_VAR 0 12
39866: PUSH
39867: FOR_IN
39868: IFFALSE 40060
// repeat InitHc ;
39870: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39874: LD_VAR 0 9
39878: PPUSH
39879: CALL_OW 266
39883: PUSH
39884: LD_INT 5
39886: EQUAL
39887: IFFALSE 39957
// begin if UnitsInside ( j ) < 3 then
39889: LD_VAR 0 9
39893: PPUSH
39894: CALL_OW 313
39898: PUSH
39899: LD_INT 3
39901: LESS
39902: IFFALSE 39938
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39904: LD_INT 0
39906: PPUSH
39907: LD_INT 5
39909: PUSH
39910: LD_INT 8
39912: PUSH
39913: LD_INT 9
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: LIST
39920: PUSH
39921: LD_VAR 0 17
39925: ARRAY
39926: PPUSH
39927: LD_VAR 0 4
39931: PPUSH
39932: CALL_OW 380
39936: GO 39955
// PrepareHuman ( false , i , skill ) ;
39938: LD_INT 0
39940: PPUSH
39941: LD_VAR 0 8
39945: PPUSH
39946: LD_VAR 0 4
39950: PPUSH
39951: CALL_OW 380
// end else
39955: GO 39974
// PrepareHuman ( false , i , skill ) ;
39957: LD_INT 0
39959: PPUSH
39960: LD_VAR 0 8
39964: PPUSH
39965: LD_VAR 0 4
39969: PPUSH
39970: CALL_OW 380
// un := CreateHuman ;
39974: LD_ADDR_VAR 0 14
39978: PUSH
39979: CALL_OW 44
39983: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39984: LD_ADDR_VAR 0 7
39988: PUSH
39989: LD_VAR 0 7
39993: PPUSH
39994: LD_INT 1
39996: PPUSH
39997: LD_VAR 0 14
40001: PPUSH
40002: CALL_OW 2
40006: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40007: LD_VAR 0 14
40011: PPUSH
40012: LD_VAR 0 9
40016: PPUSH
40017: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40021: LD_VAR 0 9
40025: PPUSH
40026: CALL_OW 313
40030: PUSH
40031: LD_INT 6
40033: EQUAL
40034: PUSH
40035: LD_VAR 0 9
40039: PPUSH
40040: CALL_OW 266
40044: PUSH
40045: LD_INT 32
40047: PUSH
40048: LD_INT 31
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: IN
40055: OR
40056: IFFALSE 39870
40058: GO 39867
40060: POP
40061: POP
// end else
40062: GO 40444
// for j = 1 to x do
40064: LD_ADDR_VAR 0 9
40068: PUSH
40069: DOUBLE
40070: LD_INT 1
40072: DEC
40073: ST_TO_ADDR
40074: LD_VAR 0 13
40078: PUSH
40079: FOR_TO
40080: IFFALSE 40442
// begin InitHc ;
40082: CALL_OW 19
// if not f then
40086: LD_VAR 0 12
40090: NOT
40091: IFFALSE 40180
// begin PrepareHuman ( false , i , skill ) ;
40093: LD_INT 0
40095: PPUSH
40096: LD_VAR 0 8
40100: PPUSH
40101: LD_VAR 0 4
40105: PPUSH
40106: CALL_OW 380
// un := CreateHuman ;
40110: LD_ADDR_VAR 0 14
40114: PUSH
40115: CALL_OW 44
40119: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40120: LD_ADDR_VAR 0 7
40124: PUSH
40125: LD_VAR 0 7
40129: PPUSH
40130: LD_INT 1
40132: PPUSH
40133: LD_VAR 0 14
40137: PPUSH
40138: CALL_OW 2
40142: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40143: LD_VAR 0 14
40147: PPUSH
40148: LD_VAR 0 1
40152: PPUSH
40153: CALL_OW 250
40157: PPUSH
40158: LD_VAR 0 1
40162: PPUSH
40163: CALL_OW 251
40167: PPUSH
40168: LD_INT 10
40170: PPUSH
40171: LD_INT 0
40173: PPUSH
40174: CALL_OW 50
// continue ;
40178: GO 40079
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40180: LD_VAR 0 12
40184: PUSH
40185: LD_INT 1
40187: ARRAY
40188: PPUSH
40189: CALL_OW 313
40193: PUSH
40194: LD_VAR 0 12
40198: PUSH
40199: LD_INT 1
40201: ARRAY
40202: PPUSH
40203: CALL_OW 266
40207: PUSH
40208: LD_INT 32
40210: PUSH
40211: LD_INT 31
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: IN
40218: AND
40219: PUSH
40220: LD_VAR 0 12
40224: PUSH
40225: LD_INT 1
40227: ARRAY
40228: PPUSH
40229: CALL_OW 313
40233: PUSH
40234: LD_INT 6
40236: EQUAL
40237: OR
40238: IFFALSE 40258
// f := Delete ( f , 1 ) ;
40240: LD_ADDR_VAR 0 12
40244: PUSH
40245: LD_VAR 0 12
40249: PPUSH
40250: LD_INT 1
40252: PPUSH
40253: CALL_OW 3
40257: ST_TO_ADDR
// if not f then
40258: LD_VAR 0 12
40262: NOT
40263: IFFALSE 40281
// begin x := x + 2 ;
40265: LD_ADDR_VAR 0 13
40269: PUSH
40270: LD_VAR 0 13
40274: PUSH
40275: LD_INT 2
40277: PLUS
40278: ST_TO_ADDR
// continue ;
40279: GO 40079
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40281: LD_VAR 0 12
40285: PUSH
40286: LD_INT 1
40288: ARRAY
40289: PPUSH
40290: CALL_OW 266
40294: PUSH
40295: LD_INT 5
40297: EQUAL
40298: IFFALSE 40372
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40300: LD_VAR 0 12
40304: PUSH
40305: LD_INT 1
40307: ARRAY
40308: PPUSH
40309: CALL_OW 313
40313: PUSH
40314: LD_INT 3
40316: LESS
40317: IFFALSE 40353
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40319: LD_INT 0
40321: PPUSH
40322: LD_INT 5
40324: PUSH
40325: LD_INT 8
40327: PUSH
40328: LD_INT 9
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: LIST
40335: PUSH
40336: LD_VAR 0 17
40340: ARRAY
40341: PPUSH
40342: LD_VAR 0 4
40346: PPUSH
40347: CALL_OW 380
40351: GO 40370
// PrepareHuman ( false , i , skill ) ;
40353: LD_INT 0
40355: PPUSH
40356: LD_VAR 0 8
40360: PPUSH
40361: LD_VAR 0 4
40365: PPUSH
40366: CALL_OW 380
// end else
40370: GO 40389
// PrepareHuman ( false , i , skill ) ;
40372: LD_INT 0
40374: PPUSH
40375: LD_VAR 0 8
40379: PPUSH
40380: LD_VAR 0 4
40384: PPUSH
40385: CALL_OW 380
// un := CreateHuman ;
40389: LD_ADDR_VAR 0 14
40393: PUSH
40394: CALL_OW 44
40398: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40399: LD_ADDR_VAR 0 7
40403: PUSH
40404: LD_VAR 0 7
40408: PPUSH
40409: LD_INT 1
40411: PPUSH
40412: LD_VAR 0 14
40416: PPUSH
40417: CALL_OW 2
40421: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40422: LD_VAR 0 14
40426: PPUSH
40427: LD_VAR 0 12
40431: PUSH
40432: LD_INT 1
40434: ARRAY
40435: PPUSH
40436: CALL_OW 52
// end ;
40440: GO 40079
40442: POP
40443: POP
// end ;
40444: GO 39381
40446: POP
40447: POP
// result := result ^ buildings ;
40448: LD_ADDR_VAR 0 7
40452: PUSH
40453: LD_VAR 0 7
40457: PUSH
40458: LD_VAR 0 18
40462: ADD
40463: ST_TO_ADDR
// end else
40464: GO 40607
// begin for i = 1 to personel do
40466: LD_ADDR_VAR 0 8
40470: PUSH
40471: DOUBLE
40472: LD_INT 1
40474: DEC
40475: ST_TO_ADDR
40476: LD_VAR 0 6
40480: PUSH
40481: FOR_TO
40482: IFFALSE 40605
// begin if i > 4 then
40484: LD_VAR 0 8
40488: PUSH
40489: LD_INT 4
40491: GREATER
40492: IFFALSE 40496
// break ;
40494: GO 40605
// x := personel [ i ] ;
40496: LD_ADDR_VAR 0 13
40500: PUSH
40501: LD_VAR 0 6
40505: PUSH
40506: LD_VAR 0 8
40510: ARRAY
40511: ST_TO_ADDR
// if x = - 1 then
40512: LD_VAR 0 13
40516: PUSH
40517: LD_INT 1
40519: NEG
40520: EQUAL
40521: IFFALSE 40525
// continue ;
40523: GO 40481
// PrepareHuman ( false , i , skill ) ;
40525: LD_INT 0
40527: PPUSH
40528: LD_VAR 0 8
40532: PPUSH
40533: LD_VAR 0 4
40537: PPUSH
40538: CALL_OW 380
// un := CreateHuman ;
40542: LD_ADDR_VAR 0 14
40546: PUSH
40547: CALL_OW 44
40551: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40552: LD_VAR 0 14
40556: PPUSH
40557: LD_VAR 0 1
40561: PPUSH
40562: CALL_OW 250
40566: PPUSH
40567: LD_VAR 0 1
40571: PPUSH
40572: CALL_OW 251
40576: PPUSH
40577: LD_INT 10
40579: PPUSH
40580: LD_INT 0
40582: PPUSH
40583: CALL_OW 50
// result := result ^ un ;
40587: LD_ADDR_VAR 0 7
40591: PUSH
40592: LD_VAR 0 7
40596: PUSH
40597: LD_VAR 0 14
40601: ADD
40602: ST_TO_ADDR
// end ;
40603: GO 40481
40605: POP
40606: POP
// end ; end ;
40607: LD_VAR 0 7
40611: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
40612: LD_INT 0
40614: PPUSH
40615: PPUSH
40616: PPUSH
40617: PPUSH
40618: PPUSH
40619: PPUSH
40620: PPUSH
40621: PPUSH
40622: PPUSH
40623: PPUSH
40624: PPUSH
40625: PPUSH
40626: PPUSH
40627: PPUSH
40628: PPUSH
40629: PPUSH
// result := false ;
40630: LD_ADDR_VAR 0 3
40634: PUSH
40635: LD_INT 0
40637: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
40638: LD_VAR 0 1
40642: NOT
40643: PUSH
40644: LD_VAR 0 1
40648: PPUSH
40649: CALL_OW 266
40653: PUSH
40654: LD_INT 32
40656: PUSH
40657: LD_INT 33
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: IN
40664: NOT
40665: OR
40666: IFFALSE 40670
// exit ;
40668: GO 41779
// nat := GetNation ( tower ) ;
40670: LD_ADDR_VAR 0 12
40674: PUSH
40675: LD_VAR 0 1
40679: PPUSH
40680: CALL_OW 248
40684: ST_TO_ADDR
// side := GetSide ( tower ) ;
40685: LD_ADDR_VAR 0 16
40689: PUSH
40690: LD_VAR 0 1
40694: PPUSH
40695: CALL_OW 255
40699: ST_TO_ADDR
// x := GetX ( tower ) ;
40700: LD_ADDR_VAR 0 10
40704: PUSH
40705: LD_VAR 0 1
40709: PPUSH
40710: CALL_OW 250
40714: ST_TO_ADDR
// y := GetY ( tower ) ;
40715: LD_ADDR_VAR 0 11
40719: PUSH
40720: LD_VAR 0 1
40724: PPUSH
40725: CALL_OW 251
40729: ST_TO_ADDR
// if not x or not y then
40730: LD_VAR 0 10
40734: NOT
40735: PUSH
40736: LD_VAR 0 11
40740: NOT
40741: OR
40742: IFFALSE 40746
// exit ;
40744: GO 41779
// weapon := 0 ;
40746: LD_ADDR_VAR 0 18
40750: PUSH
40751: LD_INT 0
40753: ST_TO_ADDR
// fac_list := [ ] ;
40754: LD_ADDR_VAR 0 17
40758: PUSH
40759: EMPTY
40760: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40761: LD_ADDR_VAR 0 6
40765: PUSH
40766: LD_VAR 0 1
40770: PPUSH
40771: CALL_OW 274
40775: PPUSH
40776: LD_VAR 0 2
40780: PPUSH
40781: LD_INT 0
40783: PPUSH
40784: CALL 38350 0 3
40788: PPUSH
40789: LD_INT 30
40791: PUSH
40792: LD_INT 3
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PPUSH
40799: CALL_OW 72
40803: ST_TO_ADDR
// if not factories then
40804: LD_VAR 0 6
40808: NOT
40809: IFFALSE 40813
// exit ;
40811: GO 41779
// for i in factories do
40813: LD_ADDR_VAR 0 8
40817: PUSH
40818: LD_VAR 0 6
40822: PUSH
40823: FOR_IN
40824: IFFALSE 40849
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40826: LD_ADDR_VAR 0 17
40830: PUSH
40831: LD_VAR 0 17
40835: PUSH
40836: LD_VAR 0 8
40840: PPUSH
40841: CALL_OW 478
40845: UNION
40846: ST_TO_ADDR
40847: GO 40823
40849: POP
40850: POP
// if not fac_list then
40851: LD_VAR 0 17
40855: NOT
40856: IFFALSE 40860
// exit ;
40858: GO 41779
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40860: LD_ADDR_VAR 0 5
40864: PUSH
40865: LD_INT 4
40867: PUSH
40868: LD_INT 5
40870: PUSH
40871: LD_INT 9
40873: PUSH
40874: LD_INT 10
40876: PUSH
40877: LD_INT 6
40879: PUSH
40880: LD_INT 7
40882: PUSH
40883: LD_INT 11
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 27
40897: PUSH
40898: LD_INT 28
40900: PUSH
40901: LD_INT 26
40903: PUSH
40904: LD_INT 30
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 43
40915: PUSH
40916: LD_INT 44
40918: PUSH
40919: LD_INT 46
40921: PUSH
40922: LD_INT 45
40924: PUSH
40925: LD_INT 47
40927: PUSH
40928: LD_INT 49
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: LIST
40943: PUSH
40944: LD_VAR 0 12
40948: ARRAY
40949: ST_TO_ADDR
// list := list isect fac_list ;
40950: LD_ADDR_VAR 0 5
40954: PUSH
40955: LD_VAR 0 5
40959: PUSH
40960: LD_VAR 0 17
40964: ISECT
40965: ST_TO_ADDR
// if not list then
40966: LD_VAR 0 5
40970: NOT
40971: IFFALSE 40975
// exit ;
40973: GO 41779
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40975: LD_VAR 0 12
40979: PUSH
40980: LD_INT 3
40982: EQUAL
40983: PUSH
40984: LD_INT 49
40986: PUSH
40987: LD_VAR 0 5
40991: IN
40992: AND
40993: PUSH
40994: LD_INT 31
40996: PPUSH
40997: LD_VAR 0 16
41001: PPUSH
41002: CALL_OW 321
41006: PUSH
41007: LD_INT 2
41009: EQUAL
41010: AND
41011: IFFALSE 41071
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41013: LD_INT 22
41015: PUSH
41016: LD_VAR 0 16
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 35
41027: PUSH
41028: LD_INT 49
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 91
41037: PUSH
41038: LD_VAR 0 1
41042: PUSH
41043: LD_INT 10
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: LIST
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: LIST
41055: PPUSH
41056: CALL_OW 69
41060: NOT
41061: IFFALSE 41071
// weapon := ru_time_lapser ;
41063: LD_ADDR_VAR 0 18
41067: PUSH
41068: LD_INT 49
41070: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41071: LD_VAR 0 12
41075: PUSH
41076: LD_INT 1
41078: PUSH
41079: LD_INT 2
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: IN
41086: PUSH
41087: LD_INT 11
41089: PUSH
41090: LD_VAR 0 5
41094: IN
41095: PUSH
41096: LD_INT 30
41098: PUSH
41099: LD_VAR 0 5
41103: IN
41104: OR
41105: AND
41106: PUSH
41107: LD_INT 6
41109: PPUSH
41110: LD_VAR 0 16
41114: PPUSH
41115: CALL_OW 321
41119: PUSH
41120: LD_INT 2
41122: EQUAL
41123: AND
41124: IFFALSE 41289
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41126: LD_INT 22
41128: PUSH
41129: LD_VAR 0 16
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 2
41140: PUSH
41141: LD_INT 35
41143: PUSH
41144: LD_INT 11
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 35
41153: PUSH
41154: LD_INT 30
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 91
41168: PUSH
41169: LD_VAR 0 1
41173: PUSH
41174: LD_INT 18
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: LIST
41181: PUSH
41182: EMPTY
41183: LIST
41184: LIST
41185: LIST
41186: PPUSH
41187: CALL_OW 69
41191: NOT
41192: PUSH
41193: LD_INT 22
41195: PUSH
41196: LD_VAR 0 16
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 2
41207: PUSH
41208: LD_INT 30
41210: PUSH
41211: LD_INT 32
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 30
41220: PUSH
41221: LD_INT 33
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 91
41235: PUSH
41236: LD_VAR 0 1
41240: PUSH
41241: LD_INT 12
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: LIST
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: LIST
41253: PUSH
41254: EMPTY
41255: LIST
41256: PPUSH
41257: CALL_OW 69
41261: PUSH
41262: LD_INT 2
41264: GREATER
41265: AND
41266: IFFALSE 41289
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41268: LD_ADDR_VAR 0 18
41272: PUSH
41273: LD_INT 11
41275: PUSH
41276: LD_INT 30
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_VAR 0 12
41287: ARRAY
41288: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41289: LD_VAR 0 18
41293: NOT
41294: PUSH
41295: LD_INT 40
41297: PPUSH
41298: LD_VAR 0 16
41302: PPUSH
41303: CALL_OW 321
41307: PUSH
41308: LD_INT 2
41310: EQUAL
41311: AND
41312: PUSH
41313: LD_INT 7
41315: PUSH
41316: LD_VAR 0 5
41320: IN
41321: PUSH
41322: LD_INT 28
41324: PUSH
41325: LD_VAR 0 5
41329: IN
41330: OR
41331: PUSH
41332: LD_INT 45
41334: PUSH
41335: LD_VAR 0 5
41339: IN
41340: OR
41341: AND
41342: IFFALSE 41596
// begin hex := GetHexInfo ( x , y ) ;
41344: LD_ADDR_VAR 0 4
41348: PUSH
41349: LD_VAR 0 10
41353: PPUSH
41354: LD_VAR 0 11
41358: PPUSH
41359: CALL_OW 546
41363: ST_TO_ADDR
// if hex [ 1 ] then
41364: LD_VAR 0 4
41368: PUSH
41369: LD_INT 1
41371: ARRAY
41372: IFFALSE 41376
// exit ;
41374: GO 41779
// height := hex [ 2 ] ;
41376: LD_ADDR_VAR 0 15
41380: PUSH
41381: LD_VAR 0 4
41385: PUSH
41386: LD_INT 2
41388: ARRAY
41389: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41390: LD_ADDR_VAR 0 14
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 2
41400: PUSH
41401: LD_INT 3
41403: PUSH
41404: LD_INT 5
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: ST_TO_ADDR
// for i in tmp do
41413: LD_ADDR_VAR 0 8
41417: PUSH
41418: LD_VAR 0 14
41422: PUSH
41423: FOR_IN
41424: IFFALSE 41594
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41426: LD_ADDR_VAR 0 9
41430: PUSH
41431: LD_VAR 0 10
41435: PPUSH
41436: LD_VAR 0 8
41440: PPUSH
41441: LD_INT 5
41443: PPUSH
41444: CALL_OW 272
41448: PUSH
41449: LD_VAR 0 11
41453: PPUSH
41454: LD_VAR 0 8
41458: PPUSH
41459: LD_INT 5
41461: PPUSH
41462: CALL_OW 273
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41471: LD_VAR 0 9
41475: PUSH
41476: LD_INT 1
41478: ARRAY
41479: PPUSH
41480: LD_VAR 0 9
41484: PUSH
41485: LD_INT 2
41487: ARRAY
41488: PPUSH
41489: CALL_OW 488
41493: IFFALSE 41592
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41495: LD_ADDR_VAR 0 4
41499: PUSH
41500: LD_VAR 0 9
41504: PUSH
41505: LD_INT 1
41507: ARRAY
41508: PPUSH
41509: LD_VAR 0 9
41513: PUSH
41514: LD_INT 2
41516: ARRAY
41517: PPUSH
41518: CALL_OW 546
41522: ST_TO_ADDR
// if hex [ 1 ] then
41523: LD_VAR 0 4
41527: PUSH
41528: LD_INT 1
41530: ARRAY
41531: IFFALSE 41535
// continue ;
41533: GO 41423
// h := hex [ 2 ] ;
41535: LD_ADDR_VAR 0 13
41539: PUSH
41540: LD_VAR 0 4
41544: PUSH
41545: LD_INT 2
41547: ARRAY
41548: ST_TO_ADDR
// if h + 7 < height then
41549: LD_VAR 0 13
41553: PUSH
41554: LD_INT 7
41556: PLUS
41557: PUSH
41558: LD_VAR 0 15
41562: LESS
41563: IFFALSE 41592
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
41565: LD_ADDR_VAR 0 18
41569: PUSH
41570: LD_INT 7
41572: PUSH
41573: LD_INT 28
41575: PUSH
41576: LD_INT 45
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: LIST
41583: PUSH
41584: LD_VAR 0 12
41588: ARRAY
41589: ST_TO_ADDR
// break ;
41590: GO 41594
// end ; end ; end ;
41592: GO 41423
41594: POP
41595: POP
// end ; if not weapon then
41596: LD_VAR 0 18
41600: NOT
41601: IFFALSE 41661
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
41603: LD_ADDR_VAR 0 5
41607: PUSH
41608: LD_VAR 0 5
41612: PUSH
41613: LD_INT 11
41615: PUSH
41616: LD_INT 30
41618: PUSH
41619: LD_INT 49
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: LIST
41626: DIFF
41627: ST_TO_ADDR
// if not list then
41628: LD_VAR 0 5
41632: NOT
41633: IFFALSE 41637
// exit ;
41635: GO 41779
// weapon := list [ rand ( 1 , list ) ] ;
41637: LD_ADDR_VAR 0 18
41641: PUSH
41642: LD_VAR 0 5
41646: PUSH
41647: LD_INT 1
41649: PPUSH
41650: LD_VAR 0 5
41654: PPUSH
41655: CALL_OW 12
41659: ARRAY
41660: ST_TO_ADDR
// end ; if weapon then
41661: LD_VAR 0 18
41665: IFFALSE 41779
// begin tmp := CostOfWeapon ( weapon ) ;
41667: LD_ADDR_VAR 0 14
41671: PUSH
41672: LD_VAR 0 18
41676: PPUSH
41677: CALL_OW 451
41681: ST_TO_ADDR
// j := GetBase ( tower ) ;
41682: LD_ADDR_VAR 0 9
41686: PUSH
41687: LD_VAR 0 1
41691: PPUSH
41692: CALL_OW 274
41696: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41697: LD_VAR 0 9
41701: PPUSH
41702: LD_INT 1
41704: PPUSH
41705: CALL_OW 275
41709: PUSH
41710: LD_VAR 0 14
41714: PUSH
41715: LD_INT 1
41717: ARRAY
41718: GREATEREQUAL
41719: PUSH
41720: LD_VAR 0 9
41724: PPUSH
41725: LD_INT 2
41727: PPUSH
41728: CALL_OW 275
41732: PUSH
41733: LD_VAR 0 14
41737: PUSH
41738: LD_INT 2
41740: ARRAY
41741: GREATEREQUAL
41742: AND
41743: PUSH
41744: LD_VAR 0 9
41748: PPUSH
41749: LD_INT 3
41751: PPUSH
41752: CALL_OW 275
41756: PUSH
41757: LD_VAR 0 14
41761: PUSH
41762: LD_INT 3
41764: ARRAY
41765: GREATEREQUAL
41766: AND
41767: IFFALSE 41779
// result := weapon ;
41769: LD_ADDR_VAR 0 3
41773: PUSH
41774: LD_VAR 0 18
41778: ST_TO_ADDR
// end ; end ;
41779: LD_VAR 0 3
41783: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41784: LD_INT 0
41786: PPUSH
41787: PPUSH
// result := true ;
41788: LD_ADDR_VAR 0 3
41792: PUSH
41793: LD_INT 1
41795: ST_TO_ADDR
// if array1 = array2 then
41796: LD_VAR 0 1
41800: PUSH
41801: LD_VAR 0 2
41805: EQUAL
41806: IFFALSE 41866
// begin for i = 1 to array1 do
41808: LD_ADDR_VAR 0 4
41812: PUSH
41813: DOUBLE
41814: LD_INT 1
41816: DEC
41817: ST_TO_ADDR
41818: LD_VAR 0 1
41822: PUSH
41823: FOR_TO
41824: IFFALSE 41862
// if array1 [ i ] <> array2 [ i ] then
41826: LD_VAR 0 1
41830: PUSH
41831: LD_VAR 0 4
41835: ARRAY
41836: PUSH
41837: LD_VAR 0 2
41841: PUSH
41842: LD_VAR 0 4
41846: ARRAY
41847: NONEQUAL
41848: IFFALSE 41860
// begin result := false ;
41850: LD_ADDR_VAR 0 3
41854: PUSH
41855: LD_INT 0
41857: ST_TO_ADDR
// break ;
41858: GO 41862
// end ;
41860: GO 41823
41862: POP
41863: POP
// end else
41864: GO 41874
// result := false ;
41866: LD_ADDR_VAR 0 3
41870: PUSH
41871: LD_INT 0
41873: ST_TO_ADDR
// end ;
41874: LD_VAR 0 3
41878: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41879: LD_INT 0
41881: PPUSH
41882: PPUSH
// if not array1 or not array2 then
41883: LD_VAR 0 1
41887: NOT
41888: PUSH
41889: LD_VAR 0 2
41893: NOT
41894: OR
41895: IFFALSE 41899
// exit ;
41897: GO 41963
// result := true ;
41899: LD_ADDR_VAR 0 3
41903: PUSH
41904: LD_INT 1
41906: ST_TO_ADDR
// for i = 1 to array1 do
41907: LD_ADDR_VAR 0 4
41911: PUSH
41912: DOUBLE
41913: LD_INT 1
41915: DEC
41916: ST_TO_ADDR
41917: LD_VAR 0 1
41921: PUSH
41922: FOR_TO
41923: IFFALSE 41961
// if array1 [ i ] <> array2 [ i ] then
41925: LD_VAR 0 1
41929: PUSH
41930: LD_VAR 0 4
41934: ARRAY
41935: PUSH
41936: LD_VAR 0 2
41940: PUSH
41941: LD_VAR 0 4
41945: ARRAY
41946: NONEQUAL
41947: IFFALSE 41959
// begin result := false ;
41949: LD_ADDR_VAR 0 3
41953: PUSH
41954: LD_INT 0
41956: ST_TO_ADDR
// break ;
41957: GO 41961
// end ;
41959: GO 41922
41961: POP
41962: POP
// end ;
41963: LD_VAR 0 3
41967: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41968: LD_INT 0
41970: PPUSH
41971: PPUSH
41972: PPUSH
// pom := GetBase ( fac ) ;
41973: LD_ADDR_VAR 0 5
41977: PUSH
41978: LD_VAR 0 1
41982: PPUSH
41983: CALL_OW 274
41987: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41988: LD_ADDR_VAR 0 4
41992: PUSH
41993: LD_VAR 0 2
41997: PUSH
41998: LD_INT 1
42000: ARRAY
42001: PPUSH
42002: LD_VAR 0 2
42006: PUSH
42007: LD_INT 2
42009: ARRAY
42010: PPUSH
42011: LD_VAR 0 2
42015: PUSH
42016: LD_INT 3
42018: ARRAY
42019: PPUSH
42020: LD_VAR 0 2
42024: PUSH
42025: LD_INT 4
42027: ARRAY
42028: PPUSH
42029: CALL_OW 449
42033: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42034: LD_ADDR_VAR 0 3
42038: PUSH
42039: LD_VAR 0 5
42043: PPUSH
42044: LD_INT 1
42046: PPUSH
42047: CALL_OW 275
42051: PUSH
42052: LD_VAR 0 4
42056: PUSH
42057: LD_INT 1
42059: ARRAY
42060: GREATEREQUAL
42061: PUSH
42062: LD_VAR 0 5
42066: PPUSH
42067: LD_INT 2
42069: PPUSH
42070: CALL_OW 275
42074: PUSH
42075: LD_VAR 0 4
42079: PUSH
42080: LD_INT 2
42082: ARRAY
42083: GREATEREQUAL
42084: AND
42085: PUSH
42086: LD_VAR 0 5
42090: PPUSH
42091: LD_INT 3
42093: PPUSH
42094: CALL_OW 275
42098: PUSH
42099: LD_VAR 0 4
42103: PUSH
42104: LD_INT 3
42106: ARRAY
42107: GREATEREQUAL
42108: AND
42109: ST_TO_ADDR
// end ;
42110: LD_VAR 0 3
42114: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42115: LD_INT 0
42117: PPUSH
42118: PPUSH
42119: PPUSH
42120: PPUSH
// pom := GetBase ( building ) ;
42121: LD_ADDR_VAR 0 3
42125: PUSH
42126: LD_VAR 0 1
42130: PPUSH
42131: CALL_OW 274
42135: ST_TO_ADDR
// if not pom then
42136: LD_VAR 0 3
42140: NOT
42141: IFFALSE 42145
// exit ;
42143: GO 42315
// btype := GetBType ( building ) ;
42145: LD_ADDR_VAR 0 5
42149: PUSH
42150: LD_VAR 0 1
42154: PPUSH
42155: CALL_OW 266
42159: ST_TO_ADDR
// if btype = b_armoury then
42160: LD_VAR 0 5
42164: PUSH
42165: LD_INT 4
42167: EQUAL
42168: IFFALSE 42178
// btype := b_barracks ;
42170: LD_ADDR_VAR 0 5
42174: PUSH
42175: LD_INT 5
42177: ST_TO_ADDR
// if btype = b_depot then
42178: LD_VAR 0 5
42182: PUSH
42183: LD_INT 0
42185: EQUAL
42186: IFFALSE 42196
// btype := b_warehouse ;
42188: LD_ADDR_VAR 0 5
42192: PUSH
42193: LD_INT 1
42195: ST_TO_ADDR
// if btype = b_workshop then
42196: LD_VAR 0 5
42200: PUSH
42201: LD_INT 2
42203: EQUAL
42204: IFFALSE 42214
// btype := b_factory ;
42206: LD_ADDR_VAR 0 5
42210: PUSH
42211: LD_INT 3
42213: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42214: LD_ADDR_VAR 0 4
42218: PUSH
42219: LD_VAR 0 5
42223: PPUSH
42224: LD_VAR 0 1
42228: PPUSH
42229: CALL_OW 248
42233: PPUSH
42234: CALL_OW 450
42238: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42239: LD_ADDR_VAR 0 2
42243: PUSH
42244: LD_VAR 0 3
42248: PPUSH
42249: LD_INT 1
42251: PPUSH
42252: CALL_OW 275
42256: PUSH
42257: LD_VAR 0 4
42261: PUSH
42262: LD_INT 1
42264: ARRAY
42265: GREATEREQUAL
42266: PUSH
42267: LD_VAR 0 3
42271: PPUSH
42272: LD_INT 2
42274: PPUSH
42275: CALL_OW 275
42279: PUSH
42280: LD_VAR 0 4
42284: PUSH
42285: LD_INT 2
42287: ARRAY
42288: GREATEREQUAL
42289: AND
42290: PUSH
42291: LD_VAR 0 3
42295: PPUSH
42296: LD_INT 3
42298: PPUSH
42299: CALL_OW 275
42303: PUSH
42304: LD_VAR 0 4
42308: PUSH
42309: LD_INT 3
42311: ARRAY
42312: GREATEREQUAL
42313: AND
42314: ST_TO_ADDR
// end ;
42315: LD_VAR 0 2
42319: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42320: LD_INT 0
42322: PPUSH
42323: PPUSH
42324: PPUSH
// pom := GetBase ( building ) ;
42325: LD_ADDR_VAR 0 4
42329: PUSH
42330: LD_VAR 0 1
42334: PPUSH
42335: CALL_OW 274
42339: ST_TO_ADDR
// if not pom then
42340: LD_VAR 0 4
42344: NOT
42345: IFFALSE 42349
// exit ;
42347: GO 42450
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42349: LD_ADDR_VAR 0 5
42353: PUSH
42354: LD_VAR 0 2
42358: PPUSH
42359: LD_VAR 0 1
42363: PPUSH
42364: CALL_OW 248
42368: PPUSH
42369: CALL_OW 450
42373: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42374: LD_ADDR_VAR 0 3
42378: PUSH
42379: LD_VAR 0 4
42383: PPUSH
42384: LD_INT 1
42386: PPUSH
42387: CALL_OW 275
42391: PUSH
42392: LD_VAR 0 5
42396: PUSH
42397: LD_INT 1
42399: ARRAY
42400: GREATEREQUAL
42401: PUSH
42402: LD_VAR 0 4
42406: PPUSH
42407: LD_INT 2
42409: PPUSH
42410: CALL_OW 275
42414: PUSH
42415: LD_VAR 0 5
42419: PUSH
42420: LD_INT 2
42422: ARRAY
42423: GREATEREQUAL
42424: AND
42425: PUSH
42426: LD_VAR 0 4
42430: PPUSH
42431: LD_INT 3
42433: PPUSH
42434: CALL_OW 275
42438: PUSH
42439: LD_VAR 0 5
42443: PUSH
42444: LD_INT 3
42446: ARRAY
42447: GREATEREQUAL
42448: AND
42449: ST_TO_ADDR
// end ;
42450: LD_VAR 0 3
42454: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42455: LD_INT 0
42457: PPUSH
42458: PPUSH
42459: PPUSH
42460: PPUSH
42461: PPUSH
42462: PPUSH
42463: PPUSH
42464: PPUSH
42465: PPUSH
42466: PPUSH
42467: PPUSH
// result := false ;
42468: LD_ADDR_VAR 0 8
42472: PUSH
42473: LD_INT 0
42475: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42476: LD_VAR 0 5
42480: NOT
42481: PUSH
42482: LD_VAR 0 1
42486: NOT
42487: OR
42488: PUSH
42489: LD_VAR 0 2
42493: NOT
42494: OR
42495: PUSH
42496: LD_VAR 0 3
42500: NOT
42501: OR
42502: IFFALSE 42506
// exit ;
42504: GO 43320
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
42506: LD_ADDR_VAR 0 14
42510: PUSH
42511: LD_VAR 0 1
42515: PPUSH
42516: LD_VAR 0 2
42520: PPUSH
42521: LD_VAR 0 3
42525: PPUSH
42526: LD_VAR 0 4
42530: PPUSH
42531: LD_VAR 0 5
42535: PUSH
42536: LD_INT 1
42538: ARRAY
42539: PPUSH
42540: CALL_OW 248
42544: PPUSH
42545: LD_INT 0
42547: PPUSH
42548: CALL 44573 0 6
42552: ST_TO_ADDR
// if not hexes then
42553: LD_VAR 0 14
42557: NOT
42558: IFFALSE 42562
// exit ;
42560: GO 43320
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42562: LD_ADDR_VAR 0 17
42566: PUSH
42567: LD_VAR 0 5
42571: PPUSH
42572: LD_INT 22
42574: PUSH
42575: LD_VAR 0 13
42579: PPUSH
42580: CALL_OW 255
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 2
42591: PUSH
42592: LD_INT 30
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 30
42604: PUSH
42605: LD_INT 1
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: LIST
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PPUSH
42621: CALL_OW 72
42625: ST_TO_ADDR
// for i = 1 to hexes do
42626: LD_ADDR_VAR 0 9
42630: PUSH
42631: DOUBLE
42632: LD_INT 1
42634: DEC
42635: ST_TO_ADDR
42636: LD_VAR 0 14
42640: PUSH
42641: FOR_TO
42642: IFFALSE 43318
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42644: LD_ADDR_VAR 0 13
42648: PUSH
42649: LD_VAR 0 14
42653: PUSH
42654: LD_VAR 0 9
42658: ARRAY
42659: PUSH
42660: LD_INT 1
42662: ARRAY
42663: PPUSH
42664: LD_VAR 0 14
42668: PUSH
42669: LD_VAR 0 9
42673: ARRAY
42674: PUSH
42675: LD_INT 2
42677: ARRAY
42678: PPUSH
42679: CALL_OW 428
42683: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42684: LD_VAR 0 14
42688: PUSH
42689: LD_VAR 0 9
42693: ARRAY
42694: PUSH
42695: LD_INT 1
42697: ARRAY
42698: PPUSH
42699: LD_VAR 0 14
42703: PUSH
42704: LD_VAR 0 9
42708: ARRAY
42709: PUSH
42710: LD_INT 2
42712: ARRAY
42713: PPUSH
42714: CALL_OW 351
42718: PUSH
42719: LD_VAR 0 14
42723: PUSH
42724: LD_VAR 0 9
42728: ARRAY
42729: PUSH
42730: LD_INT 1
42732: ARRAY
42733: PPUSH
42734: LD_VAR 0 14
42738: PUSH
42739: LD_VAR 0 9
42743: ARRAY
42744: PUSH
42745: LD_INT 2
42747: ARRAY
42748: PPUSH
42749: CALL_OW 488
42753: NOT
42754: OR
42755: PUSH
42756: LD_VAR 0 13
42760: PPUSH
42761: CALL_OW 247
42765: PUSH
42766: LD_INT 3
42768: EQUAL
42769: OR
42770: IFFALSE 42776
// exit ;
42772: POP
42773: POP
42774: GO 43320
// if not tmp then
42776: LD_VAR 0 13
42780: NOT
42781: IFFALSE 42785
// continue ;
42783: GO 42641
// result := true ;
42785: LD_ADDR_VAR 0 8
42789: PUSH
42790: LD_INT 1
42792: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42793: LD_VAR 0 6
42797: PUSH
42798: LD_VAR 0 13
42802: PPUSH
42803: CALL_OW 247
42807: PUSH
42808: LD_INT 2
42810: EQUAL
42811: AND
42812: PUSH
42813: LD_VAR 0 13
42817: PPUSH
42818: CALL_OW 263
42822: PUSH
42823: LD_INT 1
42825: EQUAL
42826: AND
42827: IFFALSE 42991
// begin if IsDrivenBy ( tmp ) then
42829: LD_VAR 0 13
42833: PPUSH
42834: CALL_OW 311
42838: IFFALSE 42842
// continue ;
42840: GO 42641
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42842: LD_VAR 0 6
42846: PPUSH
42847: LD_INT 3
42849: PUSH
42850: LD_INT 60
42852: PUSH
42853: EMPTY
42854: LIST
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 3
42862: PUSH
42863: LD_INT 55
42865: PUSH
42866: EMPTY
42867: LIST
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PPUSH
42877: CALL_OW 72
42881: IFFALSE 42989
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42883: LD_ADDR_VAR 0 18
42887: PUSH
42888: LD_VAR 0 6
42892: PPUSH
42893: LD_INT 3
42895: PUSH
42896: LD_INT 60
42898: PUSH
42899: EMPTY
42900: LIST
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 3
42908: PUSH
42909: LD_INT 55
42911: PUSH
42912: EMPTY
42913: LIST
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PPUSH
42923: CALL_OW 72
42927: PUSH
42928: LD_INT 1
42930: ARRAY
42931: ST_TO_ADDR
// if IsInUnit ( driver ) then
42932: LD_VAR 0 18
42936: PPUSH
42937: CALL_OW 310
42941: IFFALSE 42952
// ComExit ( driver ) ;
42943: LD_VAR 0 18
42947: PPUSH
42948: CALL 68374 0 1
// AddComEnterUnit ( driver , tmp ) ;
42952: LD_VAR 0 18
42956: PPUSH
42957: LD_VAR 0 13
42961: PPUSH
42962: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42966: LD_VAR 0 18
42970: PPUSH
42971: LD_VAR 0 7
42975: PPUSH
42976: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42980: LD_VAR 0 18
42984: PPUSH
42985: CALL_OW 181
// end ; continue ;
42989: GO 42641
// end ; if not cleaners or not tmp in cleaners then
42991: LD_VAR 0 6
42995: NOT
42996: PUSH
42997: LD_VAR 0 13
43001: PUSH
43002: LD_VAR 0 6
43006: IN
43007: NOT
43008: OR
43009: IFFALSE 43316
// begin if dep then
43011: LD_VAR 0 17
43015: IFFALSE 43151
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43017: LD_ADDR_VAR 0 16
43021: PUSH
43022: LD_VAR 0 17
43026: PUSH
43027: LD_INT 1
43029: ARRAY
43030: PPUSH
43031: CALL_OW 250
43035: PPUSH
43036: LD_VAR 0 17
43040: PUSH
43041: LD_INT 1
43043: ARRAY
43044: PPUSH
43045: CALL_OW 254
43049: PPUSH
43050: LD_INT 5
43052: PPUSH
43053: CALL_OW 272
43057: PUSH
43058: LD_VAR 0 17
43062: PUSH
43063: LD_INT 1
43065: ARRAY
43066: PPUSH
43067: CALL_OW 251
43071: PPUSH
43072: LD_VAR 0 17
43076: PUSH
43077: LD_INT 1
43079: ARRAY
43080: PPUSH
43081: CALL_OW 254
43085: PPUSH
43086: LD_INT 5
43088: PPUSH
43089: CALL_OW 273
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43098: LD_VAR 0 16
43102: PUSH
43103: LD_INT 1
43105: ARRAY
43106: PPUSH
43107: LD_VAR 0 16
43111: PUSH
43112: LD_INT 2
43114: ARRAY
43115: PPUSH
43116: CALL_OW 488
43120: IFFALSE 43151
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43122: LD_VAR 0 13
43126: PPUSH
43127: LD_VAR 0 16
43131: PUSH
43132: LD_INT 1
43134: ARRAY
43135: PPUSH
43136: LD_VAR 0 16
43140: PUSH
43141: LD_INT 2
43143: ARRAY
43144: PPUSH
43145: CALL_OW 111
// continue ;
43149: GO 42641
// end ; end ; r := GetDir ( tmp ) ;
43151: LD_ADDR_VAR 0 15
43155: PUSH
43156: LD_VAR 0 13
43160: PPUSH
43161: CALL_OW 254
43165: ST_TO_ADDR
// if r = 5 then
43166: LD_VAR 0 15
43170: PUSH
43171: LD_INT 5
43173: EQUAL
43174: IFFALSE 43184
// r := 0 ;
43176: LD_ADDR_VAR 0 15
43180: PUSH
43181: LD_INT 0
43183: ST_TO_ADDR
// for j = r to 5 do
43184: LD_ADDR_VAR 0 10
43188: PUSH
43189: DOUBLE
43190: LD_VAR 0 15
43194: DEC
43195: ST_TO_ADDR
43196: LD_INT 5
43198: PUSH
43199: FOR_TO
43200: IFFALSE 43314
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43202: LD_ADDR_VAR 0 11
43206: PUSH
43207: LD_VAR 0 13
43211: PPUSH
43212: CALL_OW 250
43216: PPUSH
43217: LD_VAR 0 10
43221: PPUSH
43222: LD_INT 2
43224: PPUSH
43225: CALL_OW 272
43229: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43230: LD_ADDR_VAR 0 12
43234: PUSH
43235: LD_VAR 0 13
43239: PPUSH
43240: CALL_OW 251
43244: PPUSH
43245: LD_VAR 0 10
43249: PPUSH
43250: LD_INT 2
43252: PPUSH
43253: CALL_OW 273
43257: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43258: LD_VAR 0 11
43262: PPUSH
43263: LD_VAR 0 12
43267: PPUSH
43268: CALL_OW 488
43272: PUSH
43273: LD_VAR 0 11
43277: PPUSH
43278: LD_VAR 0 12
43282: PPUSH
43283: CALL_OW 428
43287: NOT
43288: AND
43289: IFFALSE 43312
// begin ComMoveXY ( tmp , _x , _y ) ;
43291: LD_VAR 0 13
43295: PPUSH
43296: LD_VAR 0 11
43300: PPUSH
43301: LD_VAR 0 12
43305: PPUSH
43306: CALL_OW 111
// break ;
43310: GO 43314
// end ; end ;
43312: GO 43199
43314: POP
43315: POP
// end ; end ;
43316: GO 42641
43318: POP
43319: POP
// end ;
43320: LD_VAR 0 8
43324: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43325: LD_INT 0
43327: PPUSH
// result := true ;
43328: LD_ADDR_VAR 0 3
43332: PUSH
43333: LD_INT 1
43335: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43336: LD_VAR 0 2
43340: PUSH
43341: LD_INT 24
43343: DOUBLE
43344: EQUAL
43345: IFTRUE 43355
43347: LD_INT 33
43349: DOUBLE
43350: EQUAL
43351: IFTRUE 43355
43353: GO 43380
43355: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43356: LD_ADDR_VAR 0 3
43360: PUSH
43361: LD_INT 32
43363: PPUSH
43364: LD_VAR 0 1
43368: PPUSH
43369: CALL_OW 321
43373: PUSH
43374: LD_INT 2
43376: EQUAL
43377: ST_TO_ADDR
43378: GO 43696
43380: LD_INT 20
43382: DOUBLE
43383: EQUAL
43384: IFTRUE 43388
43386: GO 43413
43388: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43389: LD_ADDR_VAR 0 3
43393: PUSH
43394: LD_INT 6
43396: PPUSH
43397: LD_VAR 0 1
43401: PPUSH
43402: CALL_OW 321
43406: PUSH
43407: LD_INT 2
43409: EQUAL
43410: ST_TO_ADDR
43411: GO 43696
43413: LD_INT 22
43415: DOUBLE
43416: EQUAL
43417: IFTRUE 43427
43419: LD_INT 36
43421: DOUBLE
43422: EQUAL
43423: IFTRUE 43427
43425: GO 43452
43427: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43428: LD_ADDR_VAR 0 3
43432: PUSH
43433: LD_INT 15
43435: PPUSH
43436: LD_VAR 0 1
43440: PPUSH
43441: CALL_OW 321
43445: PUSH
43446: LD_INT 2
43448: EQUAL
43449: ST_TO_ADDR
43450: GO 43696
43452: LD_INT 30
43454: DOUBLE
43455: EQUAL
43456: IFTRUE 43460
43458: GO 43485
43460: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43461: LD_ADDR_VAR 0 3
43465: PUSH
43466: LD_INT 20
43468: PPUSH
43469: LD_VAR 0 1
43473: PPUSH
43474: CALL_OW 321
43478: PUSH
43479: LD_INT 2
43481: EQUAL
43482: ST_TO_ADDR
43483: GO 43696
43485: LD_INT 28
43487: DOUBLE
43488: EQUAL
43489: IFTRUE 43499
43491: LD_INT 21
43493: DOUBLE
43494: EQUAL
43495: IFTRUE 43499
43497: GO 43524
43499: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43500: LD_ADDR_VAR 0 3
43504: PUSH
43505: LD_INT 21
43507: PPUSH
43508: LD_VAR 0 1
43512: PPUSH
43513: CALL_OW 321
43517: PUSH
43518: LD_INT 2
43520: EQUAL
43521: ST_TO_ADDR
43522: GO 43696
43524: LD_INT 16
43526: DOUBLE
43527: EQUAL
43528: IFTRUE 43532
43530: GO 43557
43532: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
43533: LD_ADDR_VAR 0 3
43537: PUSH
43538: LD_INT 84
43540: PPUSH
43541: LD_VAR 0 1
43545: PPUSH
43546: CALL_OW 321
43550: PUSH
43551: LD_INT 2
43553: EQUAL
43554: ST_TO_ADDR
43555: GO 43696
43557: LD_INT 19
43559: DOUBLE
43560: EQUAL
43561: IFTRUE 43571
43563: LD_INT 23
43565: DOUBLE
43566: EQUAL
43567: IFTRUE 43571
43569: GO 43596
43571: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
43572: LD_ADDR_VAR 0 3
43576: PUSH
43577: LD_INT 83
43579: PPUSH
43580: LD_VAR 0 1
43584: PPUSH
43585: CALL_OW 321
43589: PUSH
43590: LD_INT 2
43592: EQUAL
43593: ST_TO_ADDR
43594: GO 43696
43596: LD_INT 17
43598: DOUBLE
43599: EQUAL
43600: IFTRUE 43604
43602: GO 43629
43604: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
43605: LD_ADDR_VAR 0 3
43609: PUSH
43610: LD_INT 39
43612: PPUSH
43613: LD_VAR 0 1
43617: PPUSH
43618: CALL_OW 321
43622: PUSH
43623: LD_INT 2
43625: EQUAL
43626: ST_TO_ADDR
43627: GO 43696
43629: LD_INT 18
43631: DOUBLE
43632: EQUAL
43633: IFTRUE 43637
43635: GO 43662
43637: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
43638: LD_ADDR_VAR 0 3
43642: PUSH
43643: LD_INT 40
43645: PPUSH
43646: LD_VAR 0 1
43650: PPUSH
43651: CALL_OW 321
43655: PUSH
43656: LD_INT 2
43658: EQUAL
43659: ST_TO_ADDR
43660: GO 43696
43662: LD_INT 27
43664: DOUBLE
43665: EQUAL
43666: IFTRUE 43670
43668: GO 43695
43670: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
43671: LD_ADDR_VAR 0 3
43675: PUSH
43676: LD_INT 35
43678: PPUSH
43679: LD_VAR 0 1
43683: PPUSH
43684: CALL_OW 321
43688: PUSH
43689: LD_INT 2
43691: EQUAL
43692: ST_TO_ADDR
43693: GO 43696
43695: POP
// end ;
43696: LD_VAR 0 3
43700: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43701: LD_INT 0
43703: PPUSH
43704: PPUSH
43705: PPUSH
43706: PPUSH
43707: PPUSH
43708: PPUSH
43709: PPUSH
43710: PPUSH
43711: PPUSH
43712: PPUSH
43713: PPUSH
// result := false ;
43714: LD_ADDR_VAR 0 6
43718: PUSH
43719: LD_INT 0
43721: ST_TO_ADDR
// if btype = b_depot then
43722: LD_VAR 0 2
43726: PUSH
43727: LD_INT 0
43729: EQUAL
43730: IFFALSE 43742
// begin result := true ;
43732: LD_ADDR_VAR 0 6
43736: PUSH
43737: LD_INT 1
43739: ST_TO_ADDR
// exit ;
43740: GO 44568
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43742: LD_VAR 0 1
43746: NOT
43747: PUSH
43748: LD_VAR 0 1
43752: PPUSH
43753: CALL_OW 266
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: LD_INT 1
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: IN
43768: NOT
43769: OR
43770: PUSH
43771: LD_VAR 0 2
43775: NOT
43776: OR
43777: PUSH
43778: LD_VAR 0 5
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: LD_INT 2
43791: PUSH
43792: LD_INT 3
43794: PUSH
43795: LD_INT 4
43797: PUSH
43798: LD_INT 5
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: IN
43809: NOT
43810: OR
43811: PUSH
43812: LD_VAR 0 3
43816: PPUSH
43817: LD_VAR 0 4
43821: PPUSH
43822: CALL_OW 488
43826: NOT
43827: OR
43828: IFFALSE 43832
// exit ;
43830: GO 44568
// side := GetSide ( depot ) ;
43832: LD_ADDR_VAR 0 9
43836: PUSH
43837: LD_VAR 0 1
43841: PPUSH
43842: CALL_OW 255
43846: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43847: LD_VAR 0 9
43851: PPUSH
43852: LD_VAR 0 2
43856: PPUSH
43857: CALL 43325 0 2
43861: NOT
43862: IFFALSE 43866
// exit ;
43864: GO 44568
// pom := GetBase ( depot ) ;
43866: LD_ADDR_VAR 0 10
43870: PUSH
43871: LD_VAR 0 1
43875: PPUSH
43876: CALL_OW 274
43880: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43881: LD_ADDR_VAR 0 11
43885: PUSH
43886: LD_VAR 0 2
43890: PPUSH
43891: LD_VAR 0 1
43895: PPUSH
43896: CALL_OW 248
43900: PPUSH
43901: CALL_OW 450
43905: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43906: LD_VAR 0 10
43910: PPUSH
43911: LD_INT 1
43913: PPUSH
43914: CALL_OW 275
43918: PUSH
43919: LD_VAR 0 11
43923: PUSH
43924: LD_INT 1
43926: ARRAY
43927: GREATEREQUAL
43928: PUSH
43929: LD_VAR 0 10
43933: PPUSH
43934: LD_INT 2
43936: PPUSH
43937: CALL_OW 275
43941: PUSH
43942: LD_VAR 0 11
43946: PUSH
43947: LD_INT 2
43949: ARRAY
43950: GREATEREQUAL
43951: AND
43952: PUSH
43953: LD_VAR 0 10
43957: PPUSH
43958: LD_INT 3
43960: PPUSH
43961: CALL_OW 275
43965: PUSH
43966: LD_VAR 0 11
43970: PUSH
43971: LD_INT 3
43973: ARRAY
43974: GREATEREQUAL
43975: AND
43976: NOT
43977: IFFALSE 43981
// exit ;
43979: GO 44568
// if GetBType ( depot ) = b_depot then
43981: LD_VAR 0 1
43985: PPUSH
43986: CALL_OW 266
43990: PUSH
43991: LD_INT 0
43993: EQUAL
43994: IFFALSE 44006
// dist := 28 else
43996: LD_ADDR_VAR 0 14
44000: PUSH
44001: LD_INT 28
44003: ST_TO_ADDR
44004: GO 44014
// dist := 36 ;
44006: LD_ADDR_VAR 0 14
44010: PUSH
44011: LD_INT 36
44013: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44014: LD_VAR 0 1
44018: PPUSH
44019: LD_VAR 0 3
44023: PPUSH
44024: LD_VAR 0 4
44028: PPUSH
44029: CALL_OW 297
44033: PUSH
44034: LD_VAR 0 14
44038: GREATER
44039: IFFALSE 44043
// exit ;
44041: GO 44568
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44043: LD_ADDR_VAR 0 12
44047: PUSH
44048: LD_VAR 0 2
44052: PPUSH
44053: LD_VAR 0 3
44057: PPUSH
44058: LD_VAR 0 4
44062: PPUSH
44063: LD_VAR 0 5
44067: PPUSH
44068: LD_VAR 0 1
44072: PPUSH
44073: CALL_OW 248
44077: PPUSH
44078: LD_INT 0
44080: PPUSH
44081: CALL 44573 0 6
44085: ST_TO_ADDR
// if not hexes then
44086: LD_VAR 0 12
44090: NOT
44091: IFFALSE 44095
// exit ;
44093: GO 44568
// hex := GetHexInfo ( x , y ) ;
44095: LD_ADDR_VAR 0 15
44099: PUSH
44100: LD_VAR 0 3
44104: PPUSH
44105: LD_VAR 0 4
44109: PPUSH
44110: CALL_OW 546
44114: ST_TO_ADDR
// if hex [ 1 ] then
44115: LD_VAR 0 15
44119: PUSH
44120: LD_INT 1
44122: ARRAY
44123: IFFALSE 44127
// exit ;
44125: GO 44568
// height := hex [ 2 ] ;
44127: LD_ADDR_VAR 0 13
44131: PUSH
44132: LD_VAR 0 15
44136: PUSH
44137: LD_INT 2
44139: ARRAY
44140: ST_TO_ADDR
// for i = 1 to hexes do
44141: LD_ADDR_VAR 0 7
44145: PUSH
44146: DOUBLE
44147: LD_INT 1
44149: DEC
44150: ST_TO_ADDR
44151: LD_VAR 0 12
44155: PUSH
44156: FOR_TO
44157: IFFALSE 44487
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44159: LD_VAR 0 12
44163: PUSH
44164: LD_VAR 0 7
44168: ARRAY
44169: PUSH
44170: LD_INT 1
44172: ARRAY
44173: PPUSH
44174: LD_VAR 0 12
44178: PUSH
44179: LD_VAR 0 7
44183: ARRAY
44184: PUSH
44185: LD_INT 2
44187: ARRAY
44188: PPUSH
44189: CALL_OW 488
44193: NOT
44194: PUSH
44195: LD_VAR 0 12
44199: PUSH
44200: LD_VAR 0 7
44204: ARRAY
44205: PUSH
44206: LD_INT 1
44208: ARRAY
44209: PPUSH
44210: LD_VAR 0 12
44214: PUSH
44215: LD_VAR 0 7
44219: ARRAY
44220: PUSH
44221: LD_INT 2
44223: ARRAY
44224: PPUSH
44225: CALL_OW 428
44229: PUSH
44230: LD_INT 0
44232: GREATER
44233: OR
44234: PUSH
44235: LD_VAR 0 12
44239: PUSH
44240: LD_VAR 0 7
44244: ARRAY
44245: PUSH
44246: LD_INT 1
44248: ARRAY
44249: PPUSH
44250: LD_VAR 0 12
44254: PUSH
44255: LD_VAR 0 7
44259: ARRAY
44260: PUSH
44261: LD_INT 2
44263: ARRAY
44264: PPUSH
44265: CALL_OW 351
44269: OR
44270: IFFALSE 44276
// exit ;
44272: POP
44273: POP
44274: GO 44568
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44276: LD_ADDR_VAR 0 8
44280: PUSH
44281: LD_VAR 0 12
44285: PUSH
44286: LD_VAR 0 7
44290: ARRAY
44291: PUSH
44292: LD_INT 1
44294: ARRAY
44295: PPUSH
44296: LD_VAR 0 12
44300: PUSH
44301: LD_VAR 0 7
44305: ARRAY
44306: PUSH
44307: LD_INT 2
44309: ARRAY
44310: PPUSH
44311: CALL_OW 546
44315: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44316: LD_VAR 0 8
44320: PUSH
44321: LD_INT 1
44323: ARRAY
44324: PUSH
44325: LD_VAR 0 8
44329: PUSH
44330: LD_INT 2
44332: ARRAY
44333: PUSH
44334: LD_VAR 0 13
44338: PUSH
44339: LD_INT 2
44341: PLUS
44342: GREATER
44343: OR
44344: PUSH
44345: LD_VAR 0 8
44349: PUSH
44350: LD_INT 2
44352: ARRAY
44353: PUSH
44354: LD_VAR 0 13
44358: PUSH
44359: LD_INT 2
44361: MINUS
44362: LESS
44363: OR
44364: PUSH
44365: LD_VAR 0 8
44369: PUSH
44370: LD_INT 3
44372: ARRAY
44373: PUSH
44374: LD_INT 0
44376: PUSH
44377: LD_INT 8
44379: PUSH
44380: LD_INT 9
44382: PUSH
44383: LD_INT 10
44385: PUSH
44386: LD_INT 11
44388: PUSH
44389: LD_INT 12
44391: PUSH
44392: LD_INT 13
44394: PUSH
44395: LD_INT 16
44397: PUSH
44398: LD_INT 17
44400: PUSH
44401: LD_INT 18
44403: PUSH
44404: LD_INT 19
44406: PUSH
44407: LD_INT 20
44409: PUSH
44410: LD_INT 21
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: IN
44428: NOT
44429: OR
44430: PUSH
44431: LD_VAR 0 8
44435: PUSH
44436: LD_INT 5
44438: ARRAY
44439: NOT
44440: OR
44441: PUSH
44442: LD_VAR 0 8
44446: PUSH
44447: LD_INT 6
44449: ARRAY
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: LD_INT 2
44456: PUSH
44457: LD_INT 7
44459: PUSH
44460: LD_INT 9
44462: PUSH
44463: LD_INT 10
44465: PUSH
44466: LD_INT 11
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: IN
44477: NOT
44478: OR
44479: IFFALSE 44485
// exit ;
44481: POP
44482: POP
44483: GO 44568
// end ;
44485: GO 44156
44487: POP
44488: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44489: LD_VAR 0 9
44493: PPUSH
44494: LD_VAR 0 3
44498: PPUSH
44499: LD_VAR 0 4
44503: PPUSH
44504: LD_INT 20
44506: PPUSH
44507: CALL 36491 0 4
44511: PUSH
44512: LD_INT 4
44514: ARRAY
44515: IFFALSE 44519
// exit ;
44517: GO 44568
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44519: LD_VAR 0 2
44523: PUSH
44524: LD_INT 29
44526: PUSH
44527: LD_INT 30
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: IN
44534: PUSH
44535: LD_VAR 0 3
44539: PPUSH
44540: LD_VAR 0 4
44544: PPUSH
44545: LD_VAR 0 9
44549: PPUSH
44550: CALL_OW 440
44554: NOT
44555: AND
44556: IFFALSE 44560
// exit ;
44558: GO 44568
// result := true ;
44560: LD_ADDR_VAR 0 6
44564: PUSH
44565: LD_INT 1
44567: ST_TO_ADDR
// end ;
44568: LD_VAR 0 6
44572: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44573: LD_INT 0
44575: PPUSH
44576: PPUSH
44577: PPUSH
44578: PPUSH
44579: PPUSH
44580: PPUSH
44581: PPUSH
44582: PPUSH
44583: PPUSH
44584: PPUSH
44585: PPUSH
44586: PPUSH
44587: PPUSH
44588: PPUSH
44589: PPUSH
44590: PPUSH
44591: PPUSH
44592: PPUSH
44593: PPUSH
44594: PPUSH
44595: PPUSH
44596: PPUSH
44597: PPUSH
44598: PPUSH
44599: PPUSH
44600: PPUSH
44601: PPUSH
44602: PPUSH
44603: PPUSH
44604: PPUSH
44605: PPUSH
44606: PPUSH
44607: PPUSH
44608: PPUSH
44609: PPUSH
44610: PPUSH
44611: PPUSH
44612: PPUSH
44613: PPUSH
44614: PPUSH
44615: PPUSH
44616: PPUSH
44617: PPUSH
44618: PPUSH
44619: PPUSH
44620: PPUSH
44621: PPUSH
44622: PPUSH
44623: PPUSH
44624: PPUSH
44625: PPUSH
44626: PPUSH
44627: PPUSH
44628: PPUSH
44629: PPUSH
44630: PPUSH
44631: PPUSH
44632: PPUSH
// result = [ ] ;
44633: LD_ADDR_VAR 0 7
44637: PUSH
44638: EMPTY
44639: ST_TO_ADDR
// temp_list = [ ] ;
44640: LD_ADDR_VAR 0 9
44644: PUSH
44645: EMPTY
44646: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
44647: LD_VAR 0 4
44651: PUSH
44652: LD_INT 0
44654: PUSH
44655: LD_INT 1
44657: PUSH
44658: LD_INT 2
44660: PUSH
44661: LD_INT 3
44663: PUSH
44664: LD_INT 4
44666: PUSH
44667: LD_INT 5
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: LIST
44674: LIST
44675: LIST
44676: LIST
44677: IN
44678: NOT
44679: PUSH
44680: LD_VAR 0 1
44684: PUSH
44685: LD_INT 0
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: IN
44695: PUSH
44696: LD_VAR 0 5
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: LD_INT 2
44706: PUSH
44707: LD_INT 3
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: LIST
44714: IN
44715: NOT
44716: AND
44717: OR
44718: IFFALSE 44722
// exit ;
44720: GO 63113
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44722: LD_VAR 0 1
44726: PUSH
44727: LD_INT 6
44729: PUSH
44730: LD_INT 7
44732: PUSH
44733: LD_INT 8
44735: PUSH
44736: LD_INT 13
44738: PUSH
44739: LD_INT 12
44741: PUSH
44742: LD_INT 15
44744: PUSH
44745: LD_INT 11
44747: PUSH
44748: LD_INT 14
44750: PUSH
44751: LD_INT 10
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: IN
44765: IFFALSE 44775
// btype = b_lab ;
44767: LD_ADDR_VAR 0 1
44771: PUSH
44772: LD_INT 6
44774: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44775: LD_VAR 0 6
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: LD_INT 1
44785: PUSH
44786: LD_INT 2
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: LIST
44793: IN
44794: NOT
44795: PUSH
44796: LD_VAR 0 1
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: LD_INT 2
44809: PUSH
44810: LD_INT 3
44812: PUSH
44813: LD_INT 6
44815: PUSH
44816: LD_INT 36
44818: PUSH
44819: LD_INT 4
44821: PUSH
44822: LD_INT 5
44824: PUSH
44825: LD_INT 31
44827: PUSH
44828: LD_INT 32
44830: PUSH
44831: LD_INT 33
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: IN
44847: NOT
44848: PUSH
44849: LD_VAR 0 6
44853: PUSH
44854: LD_INT 1
44856: EQUAL
44857: AND
44858: OR
44859: PUSH
44860: LD_VAR 0 1
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: LD_INT 3
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: IN
44875: NOT
44876: PUSH
44877: LD_VAR 0 6
44881: PUSH
44882: LD_INT 2
44884: EQUAL
44885: AND
44886: OR
44887: IFFALSE 44897
// mode = 0 ;
44889: LD_ADDR_VAR 0 6
44893: PUSH
44894: LD_INT 0
44896: ST_TO_ADDR
// case mode of 0 :
44897: LD_VAR 0 6
44901: PUSH
44902: LD_INT 0
44904: DOUBLE
44905: EQUAL
44906: IFTRUE 44910
44908: GO 56363
44910: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44911: LD_ADDR_VAR 0 11
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 1
44992: NEG
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: LD_INT 2
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: LD_INT 2
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: LD_INT 2
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: LD_INT 1
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: LD_INT 3
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: LD_INT 3
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 1
45077: NEG
45078: PUSH
45079: LD_INT 2
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45104: LD_ADDR_VAR 0 12
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: LD_INT 0
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 0
45121: PUSH
45122: LD_INT 1
45124: NEG
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 1
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: LD_INT 1
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: LD_INT 1
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: LD_INT 1
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 2
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 2
45206: PUSH
45207: LD_INT 1
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 1
45216: NEG
45217: PUSH
45218: LD_INT 1
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: PUSH
45225: LD_INT 2
45227: NEG
45228: PUSH
45229: LD_INT 0
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: LD_INT 1
45242: NEG
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: PUSH
45248: LD_INT 2
45250: NEG
45251: PUSH
45252: LD_INT 1
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: PUSH
45259: LD_INT 3
45261: NEG
45262: PUSH
45263: LD_INT 0
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 3
45272: NEG
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45300: LD_ADDR_VAR 0 13
45304: PUSH
45305: LD_INT 0
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: LD_INT 1
45320: NEG
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 1
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: LD_INT 1
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 1
45358: NEG
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: LD_INT 2
45385: NEG
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 2
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 2
45403: PUSH
45404: LD_INT 2
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 1
45413: PUSH
45414: LD_INT 2
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: NEG
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 2
45435: NEG
45436: PUSH
45437: LD_INT 2
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 2
45447: NEG
45448: PUSH
45449: LD_INT 3
45451: NEG
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 3
45459: NEG
45460: PUSH
45461: LD_INT 2
45463: NEG
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 3
45471: NEG
45472: PUSH
45473: LD_INT 3
45475: NEG
45476: PUSH
45477: EMPTY
45478: LIST
45479: LIST
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45499: LD_ADDR_VAR 0 14
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: LD_INT 0
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 1
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: LD_INT 0
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: NEG
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: LD_INT 2
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 0
45592: PUSH
45593: LD_INT 2
45595: NEG
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 1
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: LD_INT 2
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: LD_INT 2
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: LD_INT 1
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: LD_INT 3
45649: NEG
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: LD_INT 3
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: PUSH
45669: LD_INT 2
45671: NEG
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45695: LD_ADDR_VAR 0 15
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: LD_INT 0
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: LD_INT 1
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 1
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: LD_INT 1
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 1
45764: NEG
45765: PUSH
45766: LD_INT 1
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 2
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 2
45818: NEG
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 2
45829: NEG
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 3
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 3
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45888: LD_ADDR_VAR 0 16
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: LD_INT 0
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: LD_INT 1
45908: NEG
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 1
45926: PUSH
45927: LD_INT 1
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: LD_INT 1
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: NEG
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: NEG
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: LD_INT 2
45973: NEG
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 2
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 2
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: PUSH
46002: LD_INT 2
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 2
46011: NEG
46012: PUSH
46013: LD_INT 1
46015: NEG
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 2
46023: NEG
46024: PUSH
46025: LD_INT 2
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 3
46035: PUSH
46036: LD_INT 2
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 3
46045: PUSH
46046: LD_INT 3
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 2
46055: PUSH
46056: LD_INT 3
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46081: LD_ADDR_VAR 0 17
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 0
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: NEG
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 1
46162: NEG
46163: PUSH
46164: LD_INT 2
46166: NEG
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: LD_INT 2
46177: NEG
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: LD_INT 1
46188: NEG
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: PUSH
46194: LD_INT 2
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 2
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 2
46216: PUSH
46217: LD_INT 2
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 1
46226: PUSH
46227: LD_INT 2
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: LD_INT 2
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 2
46257: NEG
46258: PUSH
46259: LD_INT 0
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 2
46280: NEG
46281: PUSH
46282: LD_INT 2
46284: NEG
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46311: LD_ADDR_VAR 0 18
46315: PUSH
46316: LD_INT 0
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 0
46328: PUSH
46329: LD_INT 1
46331: NEG
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 1
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 0
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: LD_INT 2
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: LD_INT 2
46407: NEG
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: LD_INT 1
46418: NEG
46419: PUSH
46420: EMPTY
46421: LIST
46422: LIST
46423: PUSH
46424: LD_INT 2
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 2
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 2
46446: PUSH
46447: LD_INT 2
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 1
46456: PUSH
46457: LD_INT 2
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 2
46487: NEG
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 2
46498: NEG
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 2
46510: NEG
46511: PUSH
46512: LD_INT 2
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46541: LD_ADDR_VAR 0 19
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 1
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: LD_INT 1
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 1
46599: NEG
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: LD_INT 2
46626: NEG
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: LD_INT 2
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 2
46656: PUSH
46657: LD_INT 0
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 2
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 2
46676: PUSH
46677: LD_INT 2
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: LD_INT 2
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: LD_INT 2
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 2
46717: NEG
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 2
46728: NEG
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 2
46740: NEG
46741: PUSH
46742: LD_INT 2
46744: NEG
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46771: LD_ADDR_VAR 0 20
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: LD_INT 1
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 1
46809: PUSH
46810: LD_INT 1
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: NEG
46841: PUSH
46842: LD_INT 1
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: LD_INT 2
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: LD_INT 2
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 2
46886: PUSH
46887: LD_INT 0
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 2
46896: PUSH
46897: LD_INT 1
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 1
46936: NEG
46937: PUSH
46938: LD_INT 1
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 2
46947: NEG
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 2
46958: NEG
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 2
46970: NEG
46971: PUSH
46972: LD_INT 2
46974: NEG
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47001: LD_ADDR_VAR 0 21
47005: PUSH
47006: LD_INT 0
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: LD_INT 1
47021: NEG
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 1
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 1
47059: NEG
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: LD_INT 1
47074: NEG
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: LD_INT 2
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: LD_INT 2
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: LD_INT 1
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 2
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: PUSH
47127: LD_INT 1
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: PUSH
47147: LD_INT 2
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: LD_INT 2
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 1
47166: NEG
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 2
47177: NEG
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 2
47188: NEG
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 2
47200: NEG
47201: PUSH
47202: LD_INT 2
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47231: LD_ADDR_VAR 0 22
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 0
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: LD_INT 1
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: LD_INT 1
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: NEG
47313: PUSH
47314: LD_INT 2
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: LD_INT 2
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: LD_INT 1
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 2
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 2
47356: PUSH
47357: LD_INT 1
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 2
47366: PUSH
47367: LD_INT 2
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: LD_INT 2
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 2
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 2
47407: NEG
47408: PUSH
47409: LD_INT 0
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: LD_INT 1
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 2
47430: NEG
47431: PUSH
47432: LD_INT 2
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47461: LD_ADDR_VAR 0 23
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: PUSH
47500: LD_INT 1
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 0
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: LD_INT 2
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: LD_INT 2
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: LD_INT 1
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 2
47596: PUSH
47597: LD_INT 2
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 1
47606: PUSH
47607: LD_INT 2
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 0
47616: PUSH
47617: LD_INT 2
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 2
47637: NEG
47638: PUSH
47639: LD_INT 0
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 2
47648: NEG
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 2
47660: NEG
47661: PUSH
47662: LD_INT 2
47664: NEG
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 2
47672: NEG
47673: PUSH
47674: LD_INT 3
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 1
47684: NEG
47685: PUSH
47686: LD_INT 3
47688: NEG
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: LD_INT 2
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 2
47707: PUSH
47708: LD_INT 1
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47741: LD_ADDR_VAR 0 24
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 0
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 0
47789: PUSH
47790: LD_INT 1
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: NEG
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: NEG
47823: PUSH
47824: LD_INT 2
47826: NEG
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 2
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 2
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 2
47866: PUSH
47867: LD_INT 1
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 1
47906: NEG
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: NEG
47918: PUSH
47919: LD_INT 0
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 2
47928: NEG
47929: PUSH
47930: LD_INT 1
47932: NEG
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: LD_INT 2
47940: NEG
47941: PUSH
47942: LD_INT 2
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: LD_INT 2
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 3
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 3
47984: PUSH
47985: LD_INT 2
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48017: LD_ADDR_VAR 0 25
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: LD_INT 1
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 1
48086: NEG
48087: PUSH
48088: LD_INT 1
48090: NEG
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: LD_INT 2
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: LD_INT 2
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 2
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 2
48204: NEG
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 2
48216: NEG
48217: PUSH
48218: LD_INT 2
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 3
48228: PUSH
48229: LD_INT 1
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 3
48238: PUSH
48239: LD_INT 2
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 2
48248: PUSH
48249: LD_INT 3
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: LD_INT 3
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48291: LD_ADDR_VAR 0 26
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: LD_INT 1
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: NEG
48373: PUSH
48374: LD_INT 2
48376: NEG
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 2
48387: NEG
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 1
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 2
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 2
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 2
48426: PUSH
48427: LD_INT 2
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 2
48467: NEG
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: NEG
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: LD_INT 2
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: LD_INT 3
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: LD_INT 3
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: LD_INT 2
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 2
48533: NEG
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48567: LD_ADDR_VAR 0 27
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 1
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 1
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: LD_INT 1
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 1
48636: NEG
48637: PUSH
48638: LD_INT 1
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: LD_INT 2
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 2
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 2
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 2
48702: PUSH
48703: LD_INT 2
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: LD_INT 2
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 1
48732: NEG
48733: PUSH
48734: LD_INT 1
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 2
48743: NEG
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: NEG
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 2
48766: NEG
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: LD_INT 2
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 2
48789: NEG
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 3
48800: NEG
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 3
48812: NEG
48813: PUSH
48814: LD_INT 2
48816: NEG
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48847: LD_ADDR_VAR 0 28
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: LD_INT 0
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 0
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: LD_INT 1
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: LD_INT 2
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: LD_INT 2
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 2
48962: PUSH
48963: LD_INT 0
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: LD_INT 2
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: LD_INT 1
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 2
49034: NEG
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 2
49046: NEG
49047: PUSH
49048: LD_INT 2
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 2
49058: NEG
49059: PUSH
49060: LD_INT 3
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: LD_INT 3
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 3
49082: NEG
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 3
49094: NEG
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49129: LD_ADDR_VAR 0 29
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: NEG
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: NEG
49211: PUSH
49212: LD_INT 2
49214: NEG
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 1
49233: PUSH
49234: LD_INT 1
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: LD_INT 2
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 2
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: LD_INT 1
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 2
49295: NEG
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: NEG
49308: PUSH
49309: LD_INT 2
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 2
49319: NEG
49320: PUSH
49321: LD_INT 3
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 3
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: LD_INT 3
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: LD_INT 2
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 3
49373: NEG
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49408: LD_ADDR_VAR 0 30
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: LD_INT 0
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 1
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 0
49456: PUSH
49457: LD_INT 1
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: NEG
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: LD_INT 2
49504: NEG
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: PUSH
49513: LD_INT 1
49515: NEG
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 2
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 2
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 2
49543: PUSH
49544: LD_INT 2
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: LD_INT 2
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: LD_INT 1
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 2
49574: NEG
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 2
49585: NEG
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: LD_INT 3
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 3
49620: PUSH
49621: LD_INT 2
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 2
49630: PUSH
49631: LD_INT 3
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 2
49640: NEG
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 3
49651: NEG
49652: PUSH
49653: LD_INT 1
49655: NEG
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49686: LD_ADDR_VAR 0 31
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 1
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: NEG
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: LD_INT 1
49759: NEG
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: LD_INT 2
49771: NEG
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 2
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 2
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 2
49810: PUSH
49811: LD_INT 2
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: LD_INT 2
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 0
49830: PUSH
49831: LD_INT 2
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: NEG
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: NEG
49864: PUSH
49865: LD_INT 2
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: LD_INT 3
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 2
49887: PUSH
49888: LD_INT 1
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 3
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: LD_INT 3
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: LD_INT 2
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 3
49929: NEG
49930: PUSH
49931: LD_INT 2
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49964: LD_ADDR_VAR 0 32
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: LD_INT 2
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 2
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 2
50089: PUSH
50090: LD_INT 2
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 2
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 2
50141: NEG
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: LD_INT 3
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 1
50165: PUSH
50166: LD_INT 2
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 3
50176: PUSH
50177: LD_INT 2
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: LD_INT 3
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 2
50196: NEG
50197: PUSH
50198: LD_INT 1
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 3
50207: NEG
50208: PUSH
50209: LD_INT 1
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50242: LD_ADDR_VAR 0 33
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: LD_INT 0
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: PUSH
50357: LD_INT 1
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 2
50397: NEG
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 2
50420: NEG
50421: PUSH
50422: LD_INT 2
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 2
50432: NEG
50433: PUSH
50434: LD_INT 3
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 2
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 3
50455: PUSH
50456: LD_INT 1
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 1
50465: PUSH
50466: LD_INT 3
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: LD_INT 2
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 3
50486: NEG
50487: PUSH
50488: LD_INT 2
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50521: LD_ADDR_VAR 0 34
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: LD_INT 2
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: LD_INT 2
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 2
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: LD_INT 2
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 1
50656: PUSH
50657: LD_INT 2
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 2
50677: NEG
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 2
50688: NEG
50689: PUSH
50690: LD_INT 1
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 2
50700: NEG
50701: PUSH
50702: LD_INT 2
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: LD_INT 3
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: LD_INT 2
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 3
50735: PUSH
50736: LD_INT 2
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 2
50745: PUSH
50746: LD_INT 3
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 2
50755: NEG
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 3
50766: NEG
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50801: LD_ADDR_VAR 0 35
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 1
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: NEG
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 2
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 2
50892: NEG
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50913: LD_ADDR_VAR 0 36
50917: PUSH
50918: LD_INT 0
50920: PUSH
50921: LD_INT 0
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: LD_INT 1
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: LD_INT 1
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 1
50982: NEG
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: NEG
50995: PUSH
50996: LD_INT 2
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: LD_INT 2
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51025: LD_ADDR_VAR 0 37
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 1
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: NEG
51084: PUSH
51085: LD_INT 0
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 1
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 1
51117: NEG
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51137: LD_ADDR_VAR 0 38
51141: PUSH
51142: LD_INT 0
51144: PUSH
51145: LD_INT 0
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 0
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: NEG
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: NEG
51229: PUSH
51230: LD_INT 1
51232: NEG
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51249: LD_ADDR_VAR 0 39
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 1
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: PUSH
51285: LD_INT 1
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: LD_INT 1
51307: NEG
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: LD_INT 1
51322: NEG
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: LD_INT 2
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: LD_INT 2
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51361: LD_ADDR_VAR 0 40
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: PUSH
51443: LD_INT 1
51445: NEG
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51473: LD_ADDR_VAR 0 41
51477: PUSH
51478: LD_INT 0
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_INT 1
51493: NEG
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 1
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: LD_INT 1
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: LD_INT 2
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: LD_INT 1
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 2
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 2
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 2
51597: PUSH
51598: LD_INT 2
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: LD_INT 2
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: LD_INT 1
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 2
51628: NEG
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: NEG
51640: PUSH
51641: LD_INT 1
51643: NEG
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: NEG
51652: PUSH
51653: LD_INT 2
51655: NEG
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: LD_INT 3
51667: NEG
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 2
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 3
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 3
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 3
51706: PUSH
51707: LD_INT 2
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 3
51716: PUSH
51717: LD_INT 3
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 2
51726: PUSH
51727: LD_INT 3
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 2
51736: NEG
51737: PUSH
51738: LD_INT 1
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 3
51747: NEG
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 3
51758: NEG
51759: PUSH
51760: LD_INT 1
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 3
51770: NEG
51771: PUSH
51772: LD_INT 2
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 3
51782: NEG
51783: PUSH
51784: LD_INT 3
51786: NEG
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51823: LD_ADDR_VAR 0 42
51827: PUSH
51828: LD_INT 0
51830: PUSH
51831: LD_INT 0
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: LD_INT 1
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 1
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 1
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: NEG
51893: PUSH
51894: LD_INT 1
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 1
51904: NEG
51905: PUSH
51906: LD_INT 2
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: LD_INT 2
51919: NEG
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 2
51948: PUSH
51949: LD_INT 2
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: LD_INT 2
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: LD_INT 2
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 2
51989: NEG
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 2
52001: NEG
52002: PUSH
52003: LD_INT 2
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 2
52013: NEG
52014: PUSH
52015: LD_INT 3
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: LD_INT 3
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: LD_INT 3
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 3
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 3
52069: PUSH
52070: LD_INT 3
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 2
52079: PUSH
52080: LD_INT 3
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: LD_INT 3
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: LD_INT 3
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: LD_INT 2
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 3
52120: NEG
52121: PUSH
52122: LD_INT 2
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 3
52132: NEG
52133: PUSH
52134: LD_INT 3
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52173: LD_ADDR_VAR 0 43
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 0
52190: PUSH
52191: LD_INT 1
52193: NEG
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 1
52201: PUSH
52202: LD_INT 0
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 1
52211: PUSH
52212: LD_INT 1
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 0
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 1
52231: NEG
52232: PUSH
52233: LD_INT 0
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: LD_INT 1
52246: NEG
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: LD_INT 2
52258: NEG
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: PUSH
52264: LD_INT 0
52266: PUSH
52267: LD_INT 2
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: PUSH
52278: LD_INT 1
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 2
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 2
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: LD_INT 2
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: LD_INT 1
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: LD_INT 0
52343: PUSH
52344: EMPTY
52345: LIST
52346: LIST
52347: PUSH
52348: LD_INT 2
52350: NEG
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: LD_INT 3
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 3
52377: NEG
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 1
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: EMPTY
52391: LIST
52392: LIST
52393: PUSH
52394: LD_INT 2
52396: PUSH
52397: LD_INT 1
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 3
52407: PUSH
52408: LD_INT 0
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 3
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: LD_INT 3
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: LD_INT 3
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: NEG
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 2
52458: NEG
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 3
52469: NEG
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 3
52480: NEG
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52521: LD_ADDR_VAR 0 44
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 1
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 0
52569: PUSH
52570: LD_INT 1
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 1
52579: NEG
52580: PUSH
52581: LD_INT 0
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: NEG
52603: PUSH
52604: LD_INT 2
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 2
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 2
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 2
52645: PUSH
52646: LD_INT 2
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 2
52676: NEG
52677: PUSH
52678: LD_INT 0
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 2
52687: NEG
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 2
52699: NEG
52700: PUSH
52701: LD_INT 2
52703: NEG
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 2
52711: NEG
52712: PUSH
52713: LD_INT 3
52715: NEG
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: PUSH
52724: LD_INT 1
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 3
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 3
52744: PUSH
52745: LD_INT 1
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 3
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 3
52764: PUSH
52765: LD_INT 3
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 2
52774: PUSH
52775: LD_INT 3
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 2
52784: NEG
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 3
52795: NEG
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 3
52806: NEG
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 3
52818: NEG
52819: PUSH
52820: LD_INT 2
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 3
52830: NEG
52831: PUSH
52832: LD_INT 3
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52871: LD_ADDR_VAR 0 45
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: NEG
52953: PUSH
52954: LD_INT 2
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: LD_INT 2
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 2
52986: PUSH
52987: LD_INT 1
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 2
52996: PUSH
52997: LD_INT 2
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: LD_INT 2
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: LD_INT 2
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 1
53026: NEG
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 2
53037: NEG
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 2
53049: NEG
53050: PUSH
53051: LD_INT 2
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 2
53061: NEG
53062: PUSH
53063: LD_INT 3
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: LD_INT 3
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: LD_INT 3
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: LD_INT 2
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 3
53107: PUSH
53108: LD_INT 2
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 3
53117: PUSH
53118: LD_INT 3
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: LD_INT 3
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: LD_INT 3
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: LD_INT 3
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 3
53168: NEG
53169: PUSH
53170: LD_INT 2
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 3
53180: NEG
53181: PUSH
53182: LD_INT 3
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53221: LD_ADDR_VAR 0 46
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 0
53238: PUSH
53239: LD_INT 1
53241: NEG
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 1
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 1
53279: NEG
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 1
53302: NEG
53303: PUSH
53304: LD_INT 2
53306: NEG
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 2
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 2
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 2
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: LD_INT 2
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 0
53366: PUSH
53367: LD_INT 2
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 2
53387: NEG
53388: PUSH
53389: LD_INT 0
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 2
53398: NEG
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: LD_INT 3
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: LD_INT 3
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: LD_INT 2
53436: NEG
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 3
53455: PUSH
53456: LD_INT 0
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 3
53465: PUSH
53466: LD_INT 1
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 1
53475: PUSH
53476: LD_INT 3
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 0
53485: PUSH
53486: LD_INT 3
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 1
53495: NEG
53496: PUSH
53497: LD_INT 2
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 3
53517: NEG
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 3
53528: NEG
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53569: LD_ADDR_VAR 0 47
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: LD_INT 1
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: LD_INT 1
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: LD_INT 2
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 2
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 2
53696: NEG
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53720: LD_ADDR_VAR 0 48
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: PUSH
53759: LD_INT 1
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 0
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: NEG
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 1
53789: NEG
53790: PUSH
53791: LD_INT 1
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: LD_INT 1
53827: NEG
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 2
53835: PUSH
53836: LD_INT 0
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 2
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53867: LD_ADDR_VAR 0 49
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 0
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 0
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 1
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 1
53925: NEG
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 1
53936: NEG
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: PUSH
53949: LD_INT 1
53951: NEG
53952: PUSH
53953: EMPTY
53954: LIST
53955: LIST
53956: PUSH
53957: LD_INT 2
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 2
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: LD_INT 2
53979: PUSH
53980: LD_INT 2
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54011: LD_ADDR_VAR 0 50
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 0
54028: PUSH
54029: LD_INT 1
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: LD_INT 1
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 2
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 2
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: LD_INT 2
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: LD_INT 2
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54155: LD_ADDR_VAR 0 51
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 2
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 2
54267: NEG
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 2
54278: NEG
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54302: LD_ADDR_VAR 0 52
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: LD_INT 0
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 1
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: NEG
54361: PUSH
54362: LD_INT 0
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: LD_INT 2
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: LD_INT 1
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 2
54406: NEG
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 2
54429: NEG
54430: PUSH
54431: LD_INT 2
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: LIST
54451: LIST
54452: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54453: LD_ADDR_VAR 0 53
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: LD_INT 1
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: LD_INT 2
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: LD_INT 2
54549: NEG
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 2
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 2
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 2
54588: PUSH
54589: LD_INT 2
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: PUSH
54599: LD_INT 2
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: LD_INT 2
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 2
54629: NEG
54630: PUSH
54631: LD_INT 0
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 2
54640: NEG
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 2
54652: NEG
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54683: LD_ADDR_VAR 0 54
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: LD_INT 1
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 1
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 0
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 1
54741: NEG
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: NEG
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: LD_INT 2
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: LD_INT 2
54779: NEG
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 1
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 2
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 2
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 2
54818: PUSH
54819: LD_INT 2
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 1
54828: PUSH
54829: LD_INT 2
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: LD_INT 2
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: NEG
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 2
54859: NEG
54860: PUSH
54861: LD_INT 0
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 2
54870: NEG
54871: PUSH
54872: LD_INT 1
54874: NEG
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 2
54882: NEG
54883: PUSH
54884: LD_INT 2
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54913: LD_ADDR_VAR 0 55
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: LD_INT 2
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: LD_INT 2
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 2
55038: PUSH
55039: LD_INT 1
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 2
55048: PUSH
55049: LD_INT 2
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: LD_INT 2
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: LD_INT 2
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 1
55078: NEG
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 2
55089: NEG
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 2
55100: NEG
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 2
55112: NEG
55113: PUSH
55114: LD_INT 2
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55143: LD_ADDR_VAR 0 56
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: LD_INT 1
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 1
55201: NEG
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: NEG
55213: PUSH
55214: LD_INT 1
55216: NEG
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: LD_INT 2
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: LD_INT 2
55239: NEG
55240: PUSH
55241: EMPTY
55242: LIST
55243: LIST
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 2
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: PUSH
55266: LD_INT 2
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 2
55278: PUSH
55279: LD_INT 2
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 1
55288: PUSH
55289: LD_INT 2
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: LD_INT 2
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 2
55319: NEG
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 2
55330: NEG
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 2
55342: NEG
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55373: LD_ADDR_VAR 0 57
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 2
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 2
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 2
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 2
55508: PUSH
55509: LD_INT 2
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: LD_INT 2
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: LD_INT 2
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 2
55549: NEG
55550: PUSH
55551: LD_INT 0
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 2
55560: NEG
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 2
55572: NEG
55573: PUSH
55574: LD_INT 2
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55603: LD_ADDR_VAR 0 58
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 1
55641: PUSH
55642: LD_INT 1
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: LD_INT 1
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: NEG
55662: PUSH
55663: LD_INT 0
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: LD_INT 2
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: PUSH
55708: LD_INT 1
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 2
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 2
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: PUSH
55739: LD_INT 2
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: LD_INT 2
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 2
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 2
55790: NEG
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 2
55802: NEG
55803: PUSH
55804: LD_INT 2
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55833: LD_ADDR_VAR 0 59
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: LD_INT 1
55853: NEG
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: NEG
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55921: LD_ADDR_VAR 0 60
55925: PUSH
55926: LD_INT 0
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: LD_INT 1
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 1
55949: PUSH
55950: LD_INT 0
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56009: LD_ADDR_VAR 0 61
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: LD_INT 1
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56097: LD_ADDR_VAR 0 62
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56185: LD_ADDR_VAR 0 63
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: LD_INT 1
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: NEG
56255: PUSH
56256: LD_INT 1
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56273: LD_ADDR_VAR 0 64
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 1
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 1
56331: NEG
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: NEG
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: ST_TO_ADDR
// end ; 1 :
56361: GO 62258
56363: LD_INT 1
56365: DOUBLE
56366: EQUAL
56367: IFTRUE 56371
56369: GO 58994
56371: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56372: LD_ADDR_VAR 0 11
56376: PUSH
56377: LD_INT 1
56379: NEG
56380: PUSH
56381: LD_INT 3
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: LD_INT 3
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: LD_INT 2
56405: NEG
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: LIST
56415: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56416: LD_ADDR_VAR 0 12
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 3
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 3
56444: PUSH
56445: LD_INT 1
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: LIST
56456: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56457: LD_ADDR_VAR 0 13
56461: PUSH
56462: LD_INT 3
56464: PUSH
56465: LD_INT 2
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 3
56474: PUSH
56475: LD_INT 3
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 2
56484: PUSH
56485: LD_INT 3
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: LIST
56496: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56497: LD_ADDR_VAR 0 14
56501: PUSH
56502: LD_INT 1
56504: PUSH
56505: LD_INT 3
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: LD_INT 3
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: PUSH
56522: LD_INT 1
56524: NEG
56525: PUSH
56526: LD_INT 2
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: LIST
56537: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56538: LD_ADDR_VAR 0 15
56542: PUSH
56543: LD_INT 2
56545: NEG
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 3
56556: NEG
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 3
56567: NEG
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: EMPTY
56578: LIST
56579: LIST
56580: LIST
56581: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56582: LD_ADDR_VAR 0 16
56586: PUSH
56587: LD_INT 2
56589: NEG
56590: PUSH
56591: LD_INT 3
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 3
56601: NEG
56602: PUSH
56603: LD_INT 2
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 3
56613: NEG
56614: PUSH
56615: LD_INT 3
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: LIST
56627: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56628: LD_ADDR_VAR 0 17
56632: PUSH
56633: LD_INT 1
56635: NEG
56636: PUSH
56637: LD_INT 3
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: LD_INT 3
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: LD_INT 2
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: LIST
56671: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56672: LD_ADDR_VAR 0 18
56676: PUSH
56677: LD_INT 2
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 3
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 3
56700: PUSH
56701: LD_INT 1
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: LIST
56712: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56713: LD_ADDR_VAR 0 19
56717: PUSH
56718: LD_INT 3
56720: PUSH
56721: LD_INT 2
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 3
56730: PUSH
56731: LD_INT 3
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 2
56740: PUSH
56741: LD_INT 3
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: LIST
56752: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56753: LD_ADDR_VAR 0 20
56757: PUSH
56758: LD_INT 1
56760: PUSH
56761: LD_INT 3
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: LD_INT 3
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: LD_INT 2
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: LIST
56793: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56794: LD_ADDR_VAR 0 21
56798: PUSH
56799: LD_INT 2
56801: NEG
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 3
56812: NEG
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 3
56823: NEG
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: LIST
56837: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56838: LD_ADDR_VAR 0 22
56842: PUSH
56843: LD_INT 2
56845: NEG
56846: PUSH
56847: LD_INT 3
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 3
56857: NEG
56858: PUSH
56859: LD_INT 2
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 3
56869: NEG
56870: PUSH
56871: LD_INT 3
56873: NEG
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: LIST
56883: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56884: LD_ADDR_VAR 0 23
56888: PUSH
56889: LD_INT 0
56891: PUSH
56892: LD_INT 3
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: LD_INT 4
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: LD_INT 3
56917: NEG
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: LIST
56927: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56928: LD_ADDR_VAR 0 24
56932: PUSH
56933: LD_INT 3
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 3
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 4
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: LIST
56968: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56969: LD_ADDR_VAR 0 25
56973: PUSH
56974: LD_INT 3
56976: PUSH
56977: LD_INT 3
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 4
56986: PUSH
56987: LD_INT 3
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 3
56996: PUSH
56997: LD_INT 4
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: LIST
57008: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57009: LD_ADDR_VAR 0 26
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: LD_INT 3
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 1
57026: PUSH
57027: LD_INT 4
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: NEG
57037: PUSH
57038: LD_INT 3
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: LIST
57049: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57050: LD_ADDR_VAR 0 27
57054: PUSH
57055: LD_INT 3
57057: NEG
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 3
57068: NEG
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 4
57079: NEG
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: LIST
57093: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57094: LD_ADDR_VAR 0 28
57098: PUSH
57099: LD_INT 3
57101: NEG
57102: PUSH
57103: LD_INT 3
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 3
57113: NEG
57114: PUSH
57115: LD_INT 4
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 4
57125: NEG
57126: PUSH
57127: LD_INT 3
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: LIST
57139: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57140: LD_ADDR_VAR 0 29
57144: PUSH
57145: LD_INT 1
57147: NEG
57148: PUSH
57149: LD_INT 3
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: LD_INT 3
57162: NEG
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 1
57170: PUSH
57171: LD_INT 2
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 1
57181: NEG
57182: PUSH
57183: LD_INT 4
57185: NEG
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: LD_INT 4
57196: NEG
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 1
57204: PUSH
57205: LD_INT 3
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 1
57215: NEG
57216: PUSH
57217: LD_INT 5
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: LD_INT 5
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: LD_INT 4
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 1
57249: NEG
57250: PUSH
57251: LD_INT 6
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: LD_INT 6
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: LD_INT 5
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57295: LD_ADDR_VAR 0 30
57299: PUSH
57300: LD_INT 2
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 3
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 3
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 3
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 4
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 4
57354: PUSH
57355: LD_INT 1
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 4
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 5
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 5
57385: PUSH
57386: LD_INT 1
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 5
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 6
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 6
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57438: LD_ADDR_VAR 0 31
57442: PUSH
57443: LD_INT 3
57445: PUSH
57446: LD_INT 2
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 3
57455: PUSH
57456: LD_INT 3
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 2
57465: PUSH
57466: LD_INT 3
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 4
57475: PUSH
57476: LD_INT 3
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 4
57485: PUSH
57486: LD_INT 4
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 3
57495: PUSH
57496: LD_INT 4
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 5
57505: PUSH
57506: LD_INT 4
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 5
57515: PUSH
57516: LD_INT 5
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 4
57525: PUSH
57526: LD_INT 5
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 6
57535: PUSH
57536: LD_INT 5
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 6
57545: PUSH
57546: LD_INT 6
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 5
57555: PUSH
57556: LD_INT 6
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57577: LD_ADDR_VAR 0 32
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: LD_INT 3
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 0
57594: PUSH
57595: LD_INT 3
57597: PUSH
57598: EMPTY
57599: LIST
57600: LIST
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: PUSH
57606: LD_INT 2
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: LD_INT 4
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: LD_INT 4
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: LD_INT 3
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 1
57646: PUSH
57647: LD_INT 5
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: LD_INT 5
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: LD_INT 4
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 1
57677: PUSH
57678: LD_INT 6
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: LD_INT 6
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: NEG
57698: PUSH
57699: LD_INT 5
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57720: LD_ADDR_VAR 0 33
57724: PUSH
57725: LD_INT 2
57727: NEG
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 3
57738: NEG
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 3
57749: NEG
57750: PUSH
57751: LD_INT 1
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 3
57761: NEG
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 4
57772: NEG
57773: PUSH
57774: LD_INT 0
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 4
57783: NEG
57784: PUSH
57785: LD_INT 1
57787: NEG
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 4
57795: NEG
57796: PUSH
57797: LD_INT 1
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 5
57806: NEG
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 5
57817: NEG
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 5
57829: NEG
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 6
57840: NEG
57841: PUSH
57842: LD_INT 0
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 6
57851: NEG
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57875: LD_ADDR_VAR 0 34
57879: PUSH
57880: LD_INT 2
57882: NEG
57883: PUSH
57884: LD_INT 3
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 3
57894: NEG
57895: PUSH
57896: LD_INT 2
57898: NEG
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 3
57906: NEG
57907: PUSH
57908: LD_INT 3
57910: NEG
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 3
57918: NEG
57919: PUSH
57920: LD_INT 4
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 4
57930: NEG
57931: PUSH
57932: LD_INT 3
57934: NEG
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 4
57942: NEG
57943: PUSH
57944: LD_INT 4
57946: NEG
57947: PUSH
57948: EMPTY
57949: LIST
57950: LIST
57951: PUSH
57952: LD_INT 4
57954: NEG
57955: PUSH
57956: LD_INT 5
57958: NEG
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 5
57966: NEG
57967: PUSH
57968: LD_INT 4
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 5
57978: NEG
57979: PUSH
57980: LD_INT 5
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 5
57990: NEG
57991: PUSH
57992: LD_INT 6
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 6
58002: NEG
58003: PUSH
58004: LD_INT 5
58006: NEG
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 6
58014: NEG
58015: PUSH
58016: LD_INT 6
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58038: LD_ADDR_VAR 0 41
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: LD_INT 2
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: NEG
58057: PUSH
58058: LD_INT 3
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: LD_INT 2
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: LIST
58081: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58082: LD_ADDR_VAR 0 42
58086: PUSH
58087: LD_INT 2
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 3
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: LIST
58122: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58123: LD_ADDR_VAR 0 43
58127: PUSH
58128: LD_INT 2
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 3
58140: PUSH
58141: LD_INT 2
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 2
58150: PUSH
58151: LD_INT 3
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: LIST
58162: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58163: LD_ADDR_VAR 0 44
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: LD_INT 2
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: PUSH
58181: LD_INT 3
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: LD_INT 2
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: LIST
58203: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58204: LD_ADDR_VAR 0 45
58208: PUSH
58209: LD_INT 2
58211: NEG
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: EMPTY
58217: LIST
58218: LIST
58219: PUSH
58220: LD_INT 2
58222: NEG
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 3
58233: NEG
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: LIST
58247: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58248: LD_ADDR_VAR 0 46
58252: PUSH
58253: LD_INT 2
58255: NEG
58256: PUSH
58257: LD_INT 2
58259: NEG
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 2
58267: NEG
58268: PUSH
58269: LD_INT 3
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 3
58279: NEG
58280: PUSH
58281: LD_INT 2
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: LIST
58293: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58294: LD_ADDR_VAR 0 47
58298: PUSH
58299: LD_INT 2
58301: NEG
58302: PUSH
58303: LD_INT 3
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 1
58313: NEG
58314: PUSH
58315: LD_INT 3
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58327: LD_ADDR_VAR 0 48
58331: PUSH
58332: LD_INT 1
58334: PUSH
58335: LD_INT 2
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: LD_INT 1
58348: NEG
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58358: LD_ADDR_VAR 0 49
58362: PUSH
58363: LD_INT 3
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 3
58375: PUSH
58376: LD_INT 2
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58387: LD_ADDR_VAR 0 50
58391: PUSH
58392: LD_INT 2
58394: PUSH
58395: LD_INT 3
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: LD_INT 3
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58416: LD_ADDR_VAR 0 51
58420: PUSH
58421: LD_INT 1
58423: NEG
58424: PUSH
58425: LD_INT 2
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 2
58434: NEG
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58447: LD_ADDR_VAR 0 52
58451: PUSH
58452: LD_INT 3
58454: NEG
58455: PUSH
58456: LD_INT 1
58458: NEG
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 3
58466: NEG
58467: PUSH
58468: LD_INT 2
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58480: LD_ADDR_VAR 0 53
58484: PUSH
58485: LD_INT 1
58487: NEG
58488: PUSH
58489: LD_INT 3
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: LD_INT 3
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: LD_INT 2
58513: NEG
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: LIST
58523: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58524: LD_ADDR_VAR 0 54
58528: PUSH
58529: LD_INT 2
58531: PUSH
58532: LD_INT 1
58534: NEG
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 3
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 3
58552: PUSH
58553: LD_INT 1
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: LIST
58564: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58565: LD_ADDR_VAR 0 55
58569: PUSH
58570: LD_INT 3
58572: PUSH
58573: LD_INT 2
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 3
58582: PUSH
58583: LD_INT 3
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 2
58592: PUSH
58593: LD_INT 3
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: LIST
58604: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58605: LD_ADDR_VAR 0 56
58609: PUSH
58610: LD_INT 1
58612: PUSH
58613: LD_INT 3
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: LD_INT 3
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 1
58632: NEG
58633: PUSH
58634: LD_INT 2
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: LIST
58645: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58646: LD_ADDR_VAR 0 57
58650: PUSH
58651: LD_INT 2
58653: NEG
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 3
58664: NEG
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 3
58675: NEG
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: LIST
58689: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58690: LD_ADDR_VAR 0 58
58694: PUSH
58695: LD_INT 2
58697: NEG
58698: PUSH
58699: LD_INT 3
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 3
58709: NEG
58710: PUSH
58711: LD_INT 2
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 3
58721: NEG
58722: PUSH
58723: LD_INT 3
58725: NEG
58726: PUSH
58727: EMPTY
58728: LIST
58729: LIST
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: LIST
58735: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58736: LD_ADDR_VAR 0 59
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: LD_INT 2
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: LD_INT 2
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: LD_INT 1
58769: NEG
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: LIST
58779: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58780: LD_ADDR_VAR 0 60
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: LD_INT 0
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: LD_INT 1
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: LIST
58820: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58821: LD_ADDR_VAR 0 61
58825: PUSH
58826: LD_INT 2
58828: PUSH
58829: LD_INT 1
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: LD_INT 2
58838: PUSH
58839: LD_INT 2
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: PUSH
58849: LD_INT 2
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: LIST
58860: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58861: LD_ADDR_VAR 0 62
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: LD_INT 2
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 1
58888: NEG
58889: PUSH
58890: LD_INT 1
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: LIST
58901: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58902: LD_ADDR_VAR 0 63
58906: PUSH
58907: LD_INT 1
58909: NEG
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 2
58920: NEG
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 2
58931: NEG
58932: PUSH
58933: LD_INT 1
58935: NEG
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: LIST
58945: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58946: LD_ADDR_VAR 0 64
58950: PUSH
58951: LD_INT 1
58953: NEG
58954: PUSH
58955: LD_INT 2
58957: NEG
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 2
58965: NEG
58966: PUSH
58967: LD_INT 1
58969: NEG
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 2
58977: NEG
58978: PUSH
58979: LD_INT 2
58981: NEG
58982: PUSH
58983: EMPTY
58984: LIST
58985: LIST
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: LIST
58991: ST_TO_ADDR
// end ; 2 :
58992: GO 62258
58994: LD_INT 2
58996: DOUBLE
58997: EQUAL
58998: IFTRUE 59002
59000: GO 62257
59002: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59003: LD_ADDR_VAR 0 29
59007: PUSH
59008: LD_INT 4
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 4
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 5
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 5
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 4
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 3
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 3
59071: PUSH
59072: LD_INT 1
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 3
59082: PUSH
59083: LD_INT 2
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 5
59093: PUSH
59094: LD_INT 2
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 3
59103: PUSH
59104: LD_INT 3
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 3
59113: PUSH
59114: LD_INT 2
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 4
59123: PUSH
59124: LD_INT 3
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 4
59133: PUSH
59134: LD_INT 4
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 3
59143: PUSH
59144: LD_INT 4
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 2
59153: PUSH
59154: LD_INT 3
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: LD_INT 2
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 4
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 2
59183: PUSH
59184: LD_INT 4
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 0
59193: PUSH
59194: LD_INT 4
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: LD_INT 3
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: PUSH
59214: LD_INT 4
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 1
59223: PUSH
59224: LD_INT 5
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: LD_INT 5
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 1
59243: NEG
59244: PUSH
59245: LD_INT 4
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: LD_INT 1
59254: NEG
59255: PUSH
59256: LD_INT 3
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 2
59265: PUSH
59266: LD_INT 5
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 2
59275: NEG
59276: PUSH
59277: LD_INT 3
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 3
59286: NEG
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 3
59297: NEG
59298: PUSH
59299: LD_INT 1
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 2
59309: NEG
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 2
59320: NEG
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 3
59331: NEG
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 4
59342: NEG
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 4
59353: NEG
59354: PUSH
59355: LD_INT 1
59357: NEG
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 4
59365: NEG
59366: PUSH
59367: LD_INT 2
59369: NEG
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 2
59377: NEG
59378: PUSH
59379: LD_INT 2
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 4
59388: NEG
59389: PUSH
59390: LD_INT 4
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 4
59400: NEG
59401: PUSH
59402: LD_INT 5
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 3
59412: NEG
59413: PUSH
59414: LD_INT 4
59416: NEG
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 3
59424: NEG
59425: PUSH
59426: LD_INT 3
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 4
59436: NEG
59437: PUSH
59438: LD_INT 3
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 5
59448: NEG
59449: PUSH
59450: LD_INT 4
59452: NEG
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 5
59460: NEG
59461: PUSH
59462: LD_INT 5
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 3
59472: NEG
59473: PUSH
59474: LD_INT 5
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 5
59484: NEG
59485: PUSH
59486: LD_INT 3
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: EMPTY
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59541: LD_ADDR_VAR 0 30
59545: PUSH
59546: LD_INT 4
59548: PUSH
59549: LD_INT 4
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 4
59558: PUSH
59559: LD_INT 3
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 5
59568: PUSH
59569: LD_INT 4
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 5
59578: PUSH
59579: LD_INT 5
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 4
59588: PUSH
59589: LD_INT 5
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 3
59598: PUSH
59599: LD_INT 4
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 3
59608: PUSH
59609: LD_INT 3
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 5
59618: PUSH
59619: LD_INT 3
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: PUSH
59626: LD_INT 3
59628: PUSH
59629: LD_INT 5
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 0
59638: PUSH
59639: LD_INT 3
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: LD_INT 2
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: PUSH
59659: LD_INT 3
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 1
59668: PUSH
59669: LD_INT 4
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: LD_INT 4
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: LD_INT 3
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: PUSH
59697: LD_INT 1
59699: NEG
59700: PUSH
59701: LD_INT 2
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 2
59710: PUSH
59711: LD_INT 4
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 2
59720: NEG
59721: PUSH
59722: LD_INT 2
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 4
59731: NEG
59732: PUSH
59733: LD_INT 0
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 4
59742: NEG
59743: PUSH
59744: LD_INT 1
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 3
59754: NEG
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 3
59765: NEG
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 4
59776: NEG
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: LD_INT 5
59787: NEG
59788: PUSH
59789: LD_INT 0
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 5
59798: NEG
59799: PUSH
59800: LD_INT 1
59802: NEG
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 5
59810: NEG
59811: PUSH
59812: LD_INT 2
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 3
59822: NEG
59823: PUSH
59824: LD_INT 2
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 3
59833: NEG
59834: PUSH
59835: LD_INT 3
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 3
59845: NEG
59846: PUSH
59847: LD_INT 4
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 2
59857: NEG
59858: PUSH
59859: LD_INT 3
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: LD_INT 2
59869: NEG
59870: PUSH
59871: LD_INT 2
59873: NEG
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 3
59881: NEG
59882: PUSH
59883: LD_INT 2
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 4
59893: NEG
59894: PUSH
59895: LD_INT 3
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 4
59905: NEG
59906: PUSH
59907: LD_INT 4
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 2
59917: NEG
59918: PUSH
59919: LD_INT 4
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 4
59929: NEG
59930: PUSH
59931: LD_INT 2
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 0
59941: PUSH
59942: LD_INT 4
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: LD_INT 5
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: PUSH
59964: LD_INT 4
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 1
59974: PUSH
59975: LD_INT 3
59977: NEG
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 0
59985: PUSH
59986: LD_INT 3
59988: NEG
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: LD_INT 4
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 1
60008: NEG
60009: PUSH
60010: LD_INT 5
60012: NEG
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 2
60020: PUSH
60021: LD_INT 3
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 2
60031: NEG
60032: PUSH
60033: LD_INT 5
60035: NEG
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60088: LD_ADDR_VAR 0 31
60092: PUSH
60093: LD_INT 0
60095: PUSH
60096: LD_INT 4
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: LD_INT 3
60108: PUSH
60109: EMPTY
60110: LIST
60111: LIST
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: LD_INT 4
60118: PUSH
60119: EMPTY
60120: LIST
60121: LIST
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: LD_INT 5
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: LD_INT 5
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 1
60145: NEG
60146: PUSH
60147: LD_INT 4
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 1
60156: NEG
60157: PUSH
60158: LD_INT 3
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 2
60167: PUSH
60168: LD_INT 5
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 2
60177: NEG
60178: PUSH
60179: LD_INT 3
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 3
60188: NEG
60189: PUSH
60190: LD_INT 0
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: LD_INT 3
60199: NEG
60200: PUSH
60201: LD_INT 1
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 2
60211: NEG
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 2
60222: NEG
60223: PUSH
60224: LD_INT 1
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 3
60233: NEG
60234: PUSH
60235: LD_INT 1
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 4
60244: NEG
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 4
60255: NEG
60256: PUSH
60257: LD_INT 1
60259: NEG
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 4
60267: NEG
60268: PUSH
60269: LD_INT 2
60271: NEG
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 2
60279: NEG
60280: PUSH
60281: LD_INT 2
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 4
60290: NEG
60291: PUSH
60292: LD_INT 4
60294: NEG
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 4
60302: NEG
60303: PUSH
60304: LD_INT 5
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 3
60314: NEG
60315: PUSH
60316: LD_INT 4
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 3
60326: NEG
60327: PUSH
60328: LD_INT 3
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 4
60338: NEG
60339: PUSH
60340: LD_INT 3
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 5
60350: NEG
60351: PUSH
60352: LD_INT 4
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 5
60362: NEG
60363: PUSH
60364: LD_INT 5
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 3
60374: NEG
60375: PUSH
60376: LD_INT 5
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 5
60386: NEG
60387: PUSH
60388: LD_INT 3
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: LD_INT 3
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 0
60409: PUSH
60410: LD_INT 4
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 1
60420: PUSH
60421: LD_INT 3
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 1
60431: PUSH
60432: LD_INT 2
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: LD_INT 2
60445: NEG
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 1
60453: NEG
60454: PUSH
60455: LD_INT 3
60457: NEG
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: LD_INT 4
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 2
60477: PUSH
60478: LD_INT 2
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 2
60488: NEG
60489: PUSH
60490: LD_INT 4
60492: NEG
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 4
60500: PUSH
60501: LD_INT 0
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 4
60510: PUSH
60511: LD_INT 1
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 5
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 5
60531: PUSH
60532: LD_INT 1
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 4
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 3
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 3
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 3
60572: PUSH
60573: LD_INT 2
60575: NEG
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 5
60583: PUSH
60584: LD_INT 2
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
60638: LD_ADDR_VAR 0 32
60642: PUSH
60643: LD_INT 4
60645: NEG
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 4
60656: NEG
60657: PUSH
60658: LD_INT 1
60660: NEG
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 3
60668: NEG
60669: PUSH
60670: LD_INT 0
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 3
60679: NEG
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: PUSH
60688: LD_INT 4
60690: NEG
60691: PUSH
60692: LD_INT 1
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 5
60701: NEG
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 5
60712: NEG
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 5
60724: NEG
60725: PUSH
60726: LD_INT 2
60728: NEG
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 3
60736: NEG
60737: PUSH
60738: LD_INT 2
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 3
60747: NEG
60748: PUSH
60749: LD_INT 3
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 3
60759: NEG
60760: PUSH
60761: LD_INT 4
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 2
60771: NEG
60772: PUSH
60773: LD_INT 3
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 2
60783: NEG
60784: PUSH
60785: LD_INT 2
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 3
60795: NEG
60796: PUSH
60797: LD_INT 2
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 4
60807: NEG
60808: PUSH
60809: LD_INT 3
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 4
60819: NEG
60820: PUSH
60821: LD_INT 4
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 2
60831: NEG
60832: PUSH
60833: LD_INT 4
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 4
60843: NEG
60844: PUSH
60845: LD_INT 2
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 0
60855: PUSH
60856: LD_INT 4
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 0
60866: PUSH
60867: LD_INT 5
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: LD_INT 4
60880: NEG
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 1
60888: PUSH
60889: LD_INT 3
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: LD_INT 3
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: LD_INT 4
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 1
60922: NEG
60923: PUSH
60924: LD_INT 5
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 2
60934: PUSH
60935: LD_INT 3
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 2
60945: NEG
60946: PUSH
60947: LD_INT 5
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 3
60957: PUSH
60958: LD_INT 0
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 3
60967: PUSH
60968: LD_INT 1
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 4
60978: PUSH
60979: LD_INT 0
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 4
60988: PUSH
60989: LD_INT 1
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 3
60998: PUSH
60999: LD_INT 1
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 2
61008: PUSH
61009: LD_INT 0
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 2
61018: PUSH
61019: LD_INT 1
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 2
61029: PUSH
61030: LD_INT 2
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 4
61040: PUSH
61041: LD_INT 2
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 4
61050: PUSH
61051: LD_INT 4
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 4
61060: PUSH
61061: LD_INT 3
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 5
61070: PUSH
61071: LD_INT 4
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 5
61080: PUSH
61081: LD_INT 5
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 4
61090: PUSH
61091: LD_INT 5
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 3
61100: PUSH
61101: LD_INT 4
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 3
61110: PUSH
61111: LD_INT 3
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 5
61120: PUSH
61121: LD_INT 3
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 3
61130: PUSH
61131: LD_INT 5
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61185: LD_ADDR_VAR 0 33
61189: PUSH
61190: LD_INT 4
61192: NEG
61193: PUSH
61194: LD_INT 4
61196: NEG
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 4
61204: NEG
61205: PUSH
61206: LD_INT 5
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 3
61216: NEG
61217: PUSH
61218: LD_INT 4
61220: NEG
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 3
61228: NEG
61229: PUSH
61230: LD_INT 3
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 4
61240: NEG
61241: PUSH
61242: LD_INT 3
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 5
61252: NEG
61253: PUSH
61254: LD_INT 4
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 5
61264: NEG
61265: PUSH
61266: LD_INT 5
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 3
61276: NEG
61277: PUSH
61278: LD_INT 5
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 5
61288: NEG
61289: PUSH
61290: LD_INT 3
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: LD_INT 3
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 0
61311: PUSH
61312: LD_INT 4
61314: NEG
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 1
61322: PUSH
61323: LD_INT 3
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: LD_INT 2
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 0
61344: PUSH
61345: LD_INT 2
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 1
61355: NEG
61356: PUSH
61357: LD_INT 3
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 1
61367: NEG
61368: PUSH
61369: LD_INT 4
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 2
61379: PUSH
61380: LD_INT 2
61382: NEG
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 2
61390: NEG
61391: PUSH
61392: LD_INT 4
61394: NEG
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 4
61402: PUSH
61403: LD_INT 0
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 4
61412: PUSH
61413: LD_INT 1
61415: NEG
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 5
61423: PUSH
61424: LD_INT 0
61426: PUSH
61427: EMPTY
61428: LIST
61429: LIST
61430: PUSH
61431: LD_INT 5
61433: PUSH
61434: LD_INT 1
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 4
61443: PUSH
61444: LD_INT 1
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 3
61453: PUSH
61454: LD_INT 0
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 3
61463: PUSH
61464: LD_INT 1
61466: NEG
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 3
61474: PUSH
61475: LD_INT 2
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 5
61485: PUSH
61486: LD_INT 2
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 3
61495: PUSH
61496: LD_INT 3
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 3
61505: PUSH
61506: LD_INT 2
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 4
61515: PUSH
61516: LD_INT 3
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 4
61525: PUSH
61526: LD_INT 4
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: PUSH
61533: LD_INT 3
61535: PUSH
61536: LD_INT 4
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 2
61545: PUSH
61546: LD_INT 3
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: PUSH
61553: LD_INT 2
61555: PUSH
61556: LD_INT 2
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 4
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 2
61575: PUSH
61576: LD_INT 4
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 0
61585: PUSH
61586: LD_INT 4
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: PUSH
61593: LD_INT 0
61595: PUSH
61596: LD_INT 3
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 1
61605: PUSH
61606: LD_INT 4
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 1
61615: PUSH
61616: LD_INT 5
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: LD_INT 5
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 1
61635: NEG
61636: PUSH
61637: LD_INT 4
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 1
61646: NEG
61647: PUSH
61648: LD_INT 3
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 2
61657: PUSH
61658: LD_INT 5
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 2
61667: NEG
61668: PUSH
61669: LD_INT 3
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61723: LD_ADDR_VAR 0 34
61727: PUSH
61728: LD_INT 0
61730: PUSH
61731: LD_INT 4
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 0
61741: PUSH
61742: LD_INT 5
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 1
61752: PUSH
61753: LD_INT 4
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: LD_INT 3
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 0
61774: PUSH
61775: LD_INT 3
61777: NEG
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 1
61785: NEG
61786: PUSH
61787: LD_INT 4
61789: NEG
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: LD_INT 5
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 2
61809: PUSH
61810: LD_INT 3
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 2
61820: NEG
61821: PUSH
61822: LD_INT 5
61824: NEG
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 3
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 3
61842: PUSH
61843: LD_INT 1
61845: NEG
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 4
61853: PUSH
61854: LD_INT 0
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 4
61863: PUSH
61864: LD_INT 1
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 3
61873: PUSH
61874: LD_INT 1
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 2
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 2
61893: PUSH
61894: LD_INT 1
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 2
61904: PUSH
61905: LD_INT 2
61907: NEG
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 4
61915: PUSH
61916: LD_INT 2
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 4
61925: PUSH
61926: LD_INT 4
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 4
61935: PUSH
61936: LD_INT 3
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 5
61945: PUSH
61946: LD_INT 4
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 5
61955: PUSH
61956: LD_INT 5
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 4
61965: PUSH
61966: LD_INT 5
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 3
61975: PUSH
61976: LD_INT 4
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 3
61985: PUSH
61986: LD_INT 3
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 5
61995: PUSH
61996: LD_INT 3
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 3
62005: PUSH
62006: LD_INT 5
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 0
62015: PUSH
62016: LD_INT 3
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: LD_INT 2
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 1
62035: PUSH
62036: LD_INT 3
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 1
62045: PUSH
62046: LD_INT 4
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 0
62055: PUSH
62056: LD_INT 4
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 1
62065: NEG
62066: PUSH
62067: LD_INT 3
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 1
62076: NEG
62077: PUSH
62078: LD_INT 2
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 2
62087: PUSH
62088: LD_INT 4
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 2
62097: NEG
62098: PUSH
62099: LD_INT 2
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 4
62108: NEG
62109: PUSH
62110: LD_INT 0
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 4
62119: NEG
62120: PUSH
62121: LD_INT 1
62123: NEG
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 3
62131: NEG
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 3
62142: NEG
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 4
62153: NEG
62154: PUSH
62155: LD_INT 1
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 5
62164: NEG
62165: PUSH
62166: LD_INT 0
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 5
62175: NEG
62176: PUSH
62177: LD_INT 1
62179: NEG
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 5
62187: NEG
62188: PUSH
62189: LD_INT 2
62191: NEG
62192: PUSH
62193: EMPTY
62194: LIST
62195: LIST
62196: PUSH
62197: LD_INT 3
62199: NEG
62200: PUSH
62201: LD_INT 2
62203: PUSH
62204: EMPTY
62205: LIST
62206: LIST
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: ST_TO_ADDR
// end ; end ;
62255: GO 62258
62257: POP
// case btype of b_depot , b_warehouse :
62258: LD_VAR 0 1
62262: PUSH
62263: LD_INT 0
62265: DOUBLE
62266: EQUAL
62267: IFTRUE 62277
62269: LD_INT 1
62271: DOUBLE
62272: EQUAL
62273: IFTRUE 62277
62275: GO 62478
62277: POP
// case nation of nation_american :
62278: LD_VAR 0 5
62282: PUSH
62283: LD_INT 1
62285: DOUBLE
62286: EQUAL
62287: IFTRUE 62291
62289: GO 62347
62291: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62292: LD_ADDR_VAR 0 9
62296: PUSH
62297: LD_VAR 0 11
62301: PUSH
62302: LD_VAR 0 12
62306: PUSH
62307: LD_VAR 0 13
62311: PUSH
62312: LD_VAR 0 14
62316: PUSH
62317: LD_VAR 0 15
62321: PUSH
62322: LD_VAR 0 16
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: PUSH
62335: LD_VAR 0 4
62339: PUSH
62340: LD_INT 1
62342: PLUS
62343: ARRAY
62344: ST_TO_ADDR
62345: GO 62476
62347: LD_INT 2
62349: DOUBLE
62350: EQUAL
62351: IFTRUE 62355
62353: GO 62411
62355: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62356: LD_ADDR_VAR 0 9
62360: PUSH
62361: LD_VAR 0 17
62365: PUSH
62366: LD_VAR 0 18
62370: PUSH
62371: LD_VAR 0 19
62375: PUSH
62376: LD_VAR 0 20
62380: PUSH
62381: LD_VAR 0 21
62385: PUSH
62386: LD_VAR 0 22
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: PUSH
62399: LD_VAR 0 4
62403: PUSH
62404: LD_INT 1
62406: PLUS
62407: ARRAY
62408: ST_TO_ADDR
62409: GO 62476
62411: LD_INT 3
62413: DOUBLE
62414: EQUAL
62415: IFTRUE 62419
62417: GO 62475
62419: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62420: LD_ADDR_VAR 0 9
62424: PUSH
62425: LD_VAR 0 23
62429: PUSH
62430: LD_VAR 0 24
62434: PUSH
62435: LD_VAR 0 25
62439: PUSH
62440: LD_VAR 0 26
62444: PUSH
62445: LD_VAR 0 27
62449: PUSH
62450: LD_VAR 0 28
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: PUSH
62463: LD_VAR 0 4
62467: PUSH
62468: LD_INT 1
62470: PLUS
62471: ARRAY
62472: ST_TO_ADDR
62473: GO 62476
62475: POP
62476: GO 63031
62478: LD_INT 2
62480: DOUBLE
62481: EQUAL
62482: IFTRUE 62492
62484: LD_INT 3
62486: DOUBLE
62487: EQUAL
62488: IFTRUE 62492
62490: GO 62548
62492: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62493: LD_ADDR_VAR 0 9
62497: PUSH
62498: LD_VAR 0 29
62502: PUSH
62503: LD_VAR 0 30
62507: PUSH
62508: LD_VAR 0 31
62512: PUSH
62513: LD_VAR 0 32
62517: PUSH
62518: LD_VAR 0 33
62522: PUSH
62523: LD_VAR 0 34
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: PUSH
62536: LD_VAR 0 4
62540: PUSH
62541: LD_INT 1
62543: PLUS
62544: ARRAY
62545: ST_TO_ADDR
62546: GO 63031
62548: LD_INT 16
62550: DOUBLE
62551: EQUAL
62552: IFTRUE 62610
62554: LD_INT 17
62556: DOUBLE
62557: EQUAL
62558: IFTRUE 62610
62560: LD_INT 18
62562: DOUBLE
62563: EQUAL
62564: IFTRUE 62610
62566: LD_INT 19
62568: DOUBLE
62569: EQUAL
62570: IFTRUE 62610
62572: LD_INT 22
62574: DOUBLE
62575: EQUAL
62576: IFTRUE 62610
62578: LD_INT 20
62580: DOUBLE
62581: EQUAL
62582: IFTRUE 62610
62584: LD_INT 21
62586: DOUBLE
62587: EQUAL
62588: IFTRUE 62610
62590: LD_INT 23
62592: DOUBLE
62593: EQUAL
62594: IFTRUE 62610
62596: LD_INT 24
62598: DOUBLE
62599: EQUAL
62600: IFTRUE 62610
62602: LD_INT 25
62604: DOUBLE
62605: EQUAL
62606: IFTRUE 62610
62608: GO 62666
62610: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
62611: LD_ADDR_VAR 0 9
62615: PUSH
62616: LD_VAR 0 35
62620: PUSH
62621: LD_VAR 0 36
62625: PUSH
62626: LD_VAR 0 37
62630: PUSH
62631: LD_VAR 0 38
62635: PUSH
62636: LD_VAR 0 39
62640: PUSH
62641: LD_VAR 0 40
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: PUSH
62654: LD_VAR 0 4
62658: PUSH
62659: LD_INT 1
62661: PLUS
62662: ARRAY
62663: ST_TO_ADDR
62664: GO 63031
62666: LD_INT 6
62668: DOUBLE
62669: EQUAL
62670: IFTRUE 62722
62672: LD_INT 7
62674: DOUBLE
62675: EQUAL
62676: IFTRUE 62722
62678: LD_INT 8
62680: DOUBLE
62681: EQUAL
62682: IFTRUE 62722
62684: LD_INT 13
62686: DOUBLE
62687: EQUAL
62688: IFTRUE 62722
62690: LD_INT 12
62692: DOUBLE
62693: EQUAL
62694: IFTRUE 62722
62696: LD_INT 15
62698: DOUBLE
62699: EQUAL
62700: IFTRUE 62722
62702: LD_INT 11
62704: DOUBLE
62705: EQUAL
62706: IFTRUE 62722
62708: LD_INT 14
62710: DOUBLE
62711: EQUAL
62712: IFTRUE 62722
62714: LD_INT 10
62716: DOUBLE
62717: EQUAL
62718: IFTRUE 62722
62720: GO 62778
62722: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62723: LD_ADDR_VAR 0 9
62727: PUSH
62728: LD_VAR 0 41
62732: PUSH
62733: LD_VAR 0 42
62737: PUSH
62738: LD_VAR 0 43
62742: PUSH
62743: LD_VAR 0 44
62747: PUSH
62748: LD_VAR 0 45
62752: PUSH
62753: LD_VAR 0 46
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: PUSH
62766: LD_VAR 0 4
62770: PUSH
62771: LD_INT 1
62773: PLUS
62774: ARRAY
62775: ST_TO_ADDR
62776: GO 63031
62778: LD_INT 36
62780: DOUBLE
62781: EQUAL
62782: IFTRUE 62786
62784: GO 62842
62786: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62787: LD_ADDR_VAR 0 9
62791: PUSH
62792: LD_VAR 0 47
62796: PUSH
62797: LD_VAR 0 48
62801: PUSH
62802: LD_VAR 0 49
62806: PUSH
62807: LD_VAR 0 50
62811: PUSH
62812: LD_VAR 0 51
62816: PUSH
62817: LD_VAR 0 52
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: PUSH
62830: LD_VAR 0 4
62834: PUSH
62835: LD_INT 1
62837: PLUS
62838: ARRAY
62839: ST_TO_ADDR
62840: GO 63031
62842: LD_INT 4
62844: DOUBLE
62845: EQUAL
62846: IFTRUE 62868
62848: LD_INT 5
62850: DOUBLE
62851: EQUAL
62852: IFTRUE 62868
62854: LD_INT 34
62856: DOUBLE
62857: EQUAL
62858: IFTRUE 62868
62860: LD_INT 37
62862: DOUBLE
62863: EQUAL
62864: IFTRUE 62868
62866: GO 62924
62868: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62869: LD_ADDR_VAR 0 9
62873: PUSH
62874: LD_VAR 0 53
62878: PUSH
62879: LD_VAR 0 54
62883: PUSH
62884: LD_VAR 0 55
62888: PUSH
62889: LD_VAR 0 56
62893: PUSH
62894: LD_VAR 0 57
62898: PUSH
62899: LD_VAR 0 58
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: PUSH
62912: LD_VAR 0 4
62916: PUSH
62917: LD_INT 1
62919: PLUS
62920: ARRAY
62921: ST_TO_ADDR
62922: GO 63031
62924: LD_INT 31
62926: DOUBLE
62927: EQUAL
62928: IFTRUE 62974
62930: LD_INT 32
62932: DOUBLE
62933: EQUAL
62934: IFTRUE 62974
62936: LD_INT 33
62938: DOUBLE
62939: EQUAL
62940: IFTRUE 62974
62942: LD_INT 27
62944: DOUBLE
62945: EQUAL
62946: IFTRUE 62974
62948: LD_INT 26
62950: DOUBLE
62951: EQUAL
62952: IFTRUE 62974
62954: LD_INT 28
62956: DOUBLE
62957: EQUAL
62958: IFTRUE 62974
62960: LD_INT 29
62962: DOUBLE
62963: EQUAL
62964: IFTRUE 62974
62966: LD_INT 30
62968: DOUBLE
62969: EQUAL
62970: IFTRUE 62974
62972: GO 63030
62974: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62975: LD_ADDR_VAR 0 9
62979: PUSH
62980: LD_VAR 0 59
62984: PUSH
62985: LD_VAR 0 60
62989: PUSH
62990: LD_VAR 0 61
62994: PUSH
62995: LD_VAR 0 62
62999: PUSH
63000: LD_VAR 0 63
63004: PUSH
63005: LD_VAR 0 64
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: PUSH
63018: LD_VAR 0 4
63022: PUSH
63023: LD_INT 1
63025: PLUS
63026: ARRAY
63027: ST_TO_ADDR
63028: GO 63031
63030: POP
// temp_list2 = [ ] ;
63031: LD_ADDR_VAR 0 10
63035: PUSH
63036: EMPTY
63037: ST_TO_ADDR
// for i in temp_list do
63038: LD_ADDR_VAR 0 8
63042: PUSH
63043: LD_VAR 0 9
63047: PUSH
63048: FOR_IN
63049: IFFALSE 63101
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63051: LD_ADDR_VAR 0 10
63055: PUSH
63056: LD_VAR 0 10
63060: PUSH
63061: LD_VAR 0 8
63065: PUSH
63066: LD_INT 1
63068: ARRAY
63069: PUSH
63070: LD_VAR 0 2
63074: PLUS
63075: PUSH
63076: LD_VAR 0 8
63080: PUSH
63081: LD_INT 2
63083: ARRAY
63084: PUSH
63085: LD_VAR 0 3
63089: PLUS
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: EMPTY
63096: LIST
63097: ADD
63098: ST_TO_ADDR
63099: GO 63048
63101: POP
63102: POP
// result = temp_list2 ;
63103: LD_ADDR_VAR 0 7
63107: PUSH
63108: LD_VAR 0 10
63112: ST_TO_ADDR
// end ;
63113: LD_VAR 0 7
63117: RET
// export function EnemyInRange ( unit , dist ) ; begin
63118: LD_INT 0
63120: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63121: LD_ADDR_VAR 0 3
63125: PUSH
63126: LD_VAR 0 1
63130: PPUSH
63131: CALL_OW 255
63135: PPUSH
63136: LD_VAR 0 1
63140: PPUSH
63141: CALL_OW 250
63145: PPUSH
63146: LD_VAR 0 1
63150: PPUSH
63151: CALL_OW 251
63155: PPUSH
63156: LD_VAR 0 2
63160: PPUSH
63161: CALL 36491 0 4
63165: PUSH
63166: LD_INT 4
63168: ARRAY
63169: ST_TO_ADDR
// end ;
63170: LD_VAR 0 3
63174: RET
// export function PlayerSeeMe ( unit ) ; begin
63175: LD_INT 0
63177: PPUSH
// result := See ( your_side , unit ) ;
63178: LD_ADDR_VAR 0 2
63182: PUSH
63183: LD_OWVAR 2
63187: PPUSH
63188: LD_VAR 0 1
63192: PPUSH
63193: CALL_OW 292
63197: ST_TO_ADDR
// end ;
63198: LD_VAR 0 2
63202: RET
// export function ReverseDir ( unit ) ; begin
63203: LD_INT 0
63205: PPUSH
// if not unit then
63206: LD_VAR 0 1
63210: NOT
63211: IFFALSE 63215
// exit ;
63213: GO 63238
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63215: LD_ADDR_VAR 0 2
63219: PUSH
63220: LD_VAR 0 1
63224: PPUSH
63225: CALL_OW 254
63229: PUSH
63230: LD_INT 3
63232: PLUS
63233: PUSH
63234: LD_INT 6
63236: MOD
63237: ST_TO_ADDR
// end ;
63238: LD_VAR 0 2
63242: RET
// export function ReverseArray ( array ) ; var i ; begin
63243: LD_INT 0
63245: PPUSH
63246: PPUSH
// if not array then
63247: LD_VAR 0 1
63251: NOT
63252: IFFALSE 63256
// exit ;
63254: GO 63311
// result := [ ] ;
63256: LD_ADDR_VAR 0 2
63260: PUSH
63261: EMPTY
63262: ST_TO_ADDR
// for i := array downto 1 do
63263: LD_ADDR_VAR 0 3
63267: PUSH
63268: DOUBLE
63269: LD_VAR 0 1
63273: INC
63274: ST_TO_ADDR
63275: LD_INT 1
63277: PUSH
63278: FOR_DOWNTO
63279: IFFALSE 63309
// result := Join ( result , array [ i ] ) ;
63281: LD_ADDR_VAR 0 2
63285: PUSH
63286: LD_VAR 0 2
63290: PPUSH
63291: LD_VAR 0 1
63295: PUSH
63296: LD_VAR 0 3
63300: ARRAY
63301: PPUSH
63302: CALL 67976 0 2
63306: ST_TO_ADDR
63307: GO 63278
63309: POP
63310: POP
// end ;
63311: LD_VAR 0 2
63315: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
63316: LD_INT 0
63318: PPUSH
63319: PPUSH
63320: PPUSH
63321: PPUSH
63322: PPUSH
63323: PPUSH
// if not unit or not hexes then
63324: LD_VAR 0 1
63328: NOT
63329: PUSH
63330: LD_VAR 0 2
63334: NOT
63335: OR
63336: IFFALSE 63340
// exit ;
63338: GO 63463
// dist := 9999 ;
63340: LD_ADDR_VAR 0 5
63344: PUSH
63345: LD_INT 9999
63347: ST_TO_ADDR
// for i = 1 to hexes do
63348: LD_ADDR_VAR 0 4
63352: PUSH
63353: DOUBLE
63354: LD_INT 1
63356: DEC
63357: ST_TO_ADDR
63358: LD_VAR 0 2
63362: PUSH
63363: FOR_TO
63364: IFFALSE 63451
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63366: LD_ADDR_VAR 0 6
63370: PUSH
63371: LD_VAR 0 1
63375: PPUSH
63376: LD_VAR 0 2
63380: PUSH
63381: LD_VAR 0 4
63385: ARRAY
63386: PUSH
63387: LD_INT 1
63389: ARRAY
63390: PPUSH
63391: LD_VAR 0 2
63395: PUSH
63396: LD_VAR 0 4
63400: ARRAY
63401: PUSH
63402: LD_INT 2
63404: ARRAY
63405: PPUSH
63406: CALL_OW 297
63410: ST_TO_ADDR
// if tdist < dist then
63411: LD_VAR 0 6
63415: PUSH
63416: LD_VAR 0 5
63420: LESS
63421: IFFALSE 63449
// begin hex := hexes [ i ] ;
63423: LD_ADDR_VAR 0 8
63427: PUSH
63428: LD_VAR 0 2
63432: PUSH
63433: LD_VAR 0 4
63437: ARRAY
63438: ST_TO_ADDR
// dist := tdist ;
63439: LD_ADDR_VAR 0 5
63443: PUSH
63444: LD_VAR 0 6
63448: ST_TO_ADDR
// end ; end ;
63449: GO 63363
63451: POP
63452: POP
// result := hex ;
63453: LD_ADDR_VAR 0 3
63457: PUSH
63458: LD_VAR 0 8
63462: ST_TO_ADDR
// end ;
63463: LD_VAR 0 3
63467: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63468: LD_INT 0
63470: PPUSH
63471: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63472: LD_VAR 0 1
63476: NOT
63477: PUSH
63478: LD_VAR 0 1
63482: PUSH
63483: LD_INT 21
63485: PUSH
63486: LD_INT 2
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 23
63495: PUSH
63496: LD_INT 2
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PPUSH
63507: CALL_OW 69
63511: IN
63512: NOT
63513: OR
63514: IFFALSE 63518
// exit ;
63516: GO 63565
// for i = 1 to 3 do
63518: LD_ADDR_VAR 0 3
63522: PUSH
63523: DOUBLE
63524: LD_INT 1
63526: DEC
63527: ST_TO_ADDR
63528: LD_INT 3
63530: PUSH
63531: FOR_TO
63532: IFFALSE 63563
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63534: LD_VAR 0 1
63538: PPUSH
63539: CALL_OW 250
63543: PPUSH
63544: LD_VAR 0 1
63548: PPUSH
63549: CALL_OW 251
63553: PPUSH
63554: LD_INT 1
63556: PPUSH
63557: CALL_OW 453
63561: GO 63531
63563: POP
63564: POP
// end ;
63565: LD_VAR 0 2
63569: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63570: LD_INT 0
63572: PPUSH
63573: PPUSH
63574: PPUSH
63575: PPUSH
63576: PPUSH
63577: PPUSH
// if not unit or not enemy_unit then
63578: LD_VAR 0 1
63582: NOT
63583: PUSH
63584: LD_VAR 0 2
63588: NOT
63589: OR
63590: IFFALSE 63594
// exit ;
63592: GO 64061
// if GetLives ( i ) < 250 then
63594: LD_VAR 0 4
63598: PPUSH
63599: CALL_OW 256
63603: PUSH
63604: LD_INT 250
63606: LESS
63607: IFFALSE 63620
// begin ComAutodestruct ( i ) ;
63609: LD_VAR 0 4
63613: PPUSH
63614: CALL 63468 0 1
// exit ;
63618: GO 64061
// end ; x := GetX ( enemy_unit ) ;
63620: LD_ADDR_VAR 0 7
63624: PUSH
63625: LD_VAR 0 2
63629: PPUSH
63630: CALL_OW 250
63634: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63635: LD_ADDR_VAR 0 8
63639: PUSH
63640: LD_VAR 0 2
63644: PPUSH
63645: CALL_OW 251
63649: ST_TO_ADDR
// if not x or not y then
63650: LD_VAR 0 7
63654: NOT
63655: PUSH
63656: LD_VAR 0 8
63660: NOT
63661: OR
63662: IFFALSE 63666
// exit ;
63664: GO 64061
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63666: LD_ADDR_VAR 0 6
63670: PUSH
63671: LD_VAR 0 7
63675: PPUSH
63676: LD_INT 0
63678: PPUSH
63679: LD_INT 4
63681: PPUSH
63682: CALL_OW 272
63686: PUSH
63687: LD_VAR 0 8
63691: PPUSH
63692: LD_INT 0
63694: PPUSH
63695: LD_INT 4
63697: PPUSH
63698: CALL_OW 273
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_VAR 0 7
63711: PPUSH
63712: LD_INT 1
63714: PPUSH
63715: LD_INT 4
63717: PPUSH
63718: CALL_OW 272
63722: PUSH
63723: LD_VAR 0 8
63727: PPUSH
63728: LD_INT 1
63730: PPUSH
63731: LD_INT 4
63733: PPUSH
63734: CALL_OW 273
63738: PUSH
63739: EMPTY
63740: LIST
63741: LIST
63742: PUSH
63743: LD_VAR 0 7
63747: PPUSH
63748: LD_INT 2
63750: PPUSH
63751: LD_INT 4
63753: PPUSH
63754: CALL_OW 272
63758: PUSH
63759: LD_VAR 0 8
63763: PPUSH
63764: LD_INT 2
63766: PPUSH
63767: LD_INT 4
63769: PPUSH
63770: CALL_OW 273
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_VAR 0 7
63783: PPUSH
63784: LD_INT 3
63786: PPUSH
63787: LD_INT 4
63789: PPUSH
63790: CALL_OW 272
63794: PUSH
63795: LD_VAR 0 8
63799: PPUSH
63800: LD_INT 3
63802: PPUSH
63803: LD_INT 4
63805: PPUSH
63806: CALL_OW 273
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_VAR 0 7
63819: PPUSH
63820: LD_INT 4
63822: PPUSH
63823: LD_INT 4
63825: PPUSH
63826: CALL_OW 272
63830: PUSH
63831: LD_VAR 0 8
63835: PPUSH
63836: LD_INT 4
63838: PPUSH
63839: LD_INT 4
63841: PPUSH
63842: CALL_OW 273
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_VAR 0 7
63855: PPUSH
63856: LD_INT 5
63858: PPUSH
63859: LD_INT 4
63861: PPUSH
63862: CALL_OW 272
63866: PUSH
63867: LD_VAR 0 8
63871: PPUSH
63872: LD_INT 5
63874: PPUSH
63875: LD_INT 4
63877: PPUSH
63878: CALL_OW 273
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: ST_TO_ADDR
// for i = tmp downto 1 do
63895: LD_ADDR_VAR 0 4
63899: PUSH
63900: DOUBLE
63901: LD_VAR 0 6
63905: INC
63906: ST_TO_ADDR
63907: LD_INT 1
63909: PUSH
63910: FOR_DOWNTO
63911: IFFALSE 64012
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63913: LD_VAR 0 6
63917: PUSH
63918: LD_VAR 0 4
63922: ARRAY
63923: PUSH
63924: LD_INT 1
63926: ARRAY
63927: PPUSH
63928: LD_VAR 0 6
63932: PUSH
63933: LD_VAR 0 4
63937: ARRAY
63938: PUSH
63939: LD_INT 2
63941: ARRAY
63942: PPUSH
63943: CALL_OW 488
63947: NOT
63948: PUSH
63949: LD_VAR 0 6
63953: PUSH
63954: LD_VAR 0 4
63958: ARRAY
63959: PUSH
63960: LD_INT 1
63962: ARRAY
63963: PPUSH
63964: LD_VAR 0 6
63968: PUSH
63969: LD_VAR 0 4
63973: ARRAY
63974: PUSH
63975: LD_INT 2
63977: ARRAY
63978: PPUSH
63979: CALL_OW 428
63983: PUSH
63984: LD_INT 0
63986: NONEQUAL
63987: OR
63988: IFFALSE 64010
// tmp := Delete ( tmp , i ) ;
63990: LD_ADDR_VAR 0 6
63994: PUSH
63995: LD_VAR 0 6
63999: PPUSH
64000: LD_VAR 0 4
64004: PPUSH
64005: CALL_OW 3
64009: ST_TO_ADDR
64010: GO 63910
64012: POP
64013: POP
// j := GetClosestHex ( unit , tmp ) ;
64014: LD_ADDR_VAR 0 5
64018: PUSH
64019: LD_VAR 0 1
64023: PPUSH
64024: LD_VAR 0 6
64028: PPUSH
64029: CALL 63316 0 2
64033: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64034: LD_VAR 0 1
64038: PPUSH
64039: LD_VAR 0 5
64043: PUSH
64044: LD_INT 1
64046: ARRAY
64047: PPUSH
64048: LD_VAR 0 5
64052: PUSH
64053: LD_INT 2
64055: ARRAY
64056: PPUSH
64057: CALL_OW 111
// end ;
64061: LD_VAR 0 3
64065: RET
// export function PrepareApemanSoldier ( ) ; begin
64066: LD_INT 0
64068: PPUSH
// uc_nation := 0 ;
64069: LD_ADDR_OWVAR 21
64073: PUSH
64074: LD_INT 0
64076: ST_TO_ADDR
// hc_sex := sex_male ;
64077: LD_ADDR_OWVAR 27
64081: PUSH
64082: LD_INT 1
64084: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
64085: LD_ADDR_OWVAR 28
64089: PUSH
64090: LD_INT 15
64092: ST_TO_ADDR
// hc_gallery :=  ;
64093: LD_ADDR_OWVAR 33
64097: PUSH
64098: LD_STRING 
64100: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64101: LD_ADDR_OWVAR 31
64105: PUSH
64106: LD_INT 0
64108: PPUSH
64109: LD_INT 3
64111: PPUSH
64112: CALL_OW 12
64116: PUSH
64117: LD_INT 0
64119: PPUSH
64120: LD_INT 3
64122: PPUSH
64123: CALL_OW 12
64127: PUSH
64128: LD_INT 0
64130: PUSH
64131: LD_INT 0
64133: PUSH
64134: EMPTY
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: ST_TO_ADDR
// end ;
64140: LD_VAR 0 1
64144: RET
// export function PrepareApemanEngineer ( ) ; begin
64145: LD_INT 0
64147: PPUSH
// uc_nation := 0 ;
64148: LD_ADDR_OWVAR 21
64152: PUSH
64153: LD_INT 0
64155: ST_TO_ADDR
// hc_sex := sex_male ;
64156: LD_ADDR_OWVAR 27
64160: PUSH
64161: LD_INT 1
64163: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
64164: LD_ADDR_OWVAR 28
64168: PUSH
64169: LD_INT 16
64171: ST_TO_ADDR
// hc_gallery :=  ;
64172: LD_ADDR_OWVAR 33
64176: PUSH
64177: LD_STRING 
64179: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64180: LD_ADDR_OWVAR 31
64184: PUSH
64185: LD_INT 0
64187: PPUSH
64188: LD_INT 3
64190: PPUSH
64191: CALL_OW 12
64195: PUSH
64196: LD_INT 0
64198: PPUSH
64199: LD_INT 3
64201: PPUSH
64202: CALL_OW 12
64206: PUSH
64207: LD_INT 0
64209: PUSH
64210: LD_INT 0
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: ST_TO_ADDR
// end ;
64219: LD_VAR 0 1
64223: RET
// export function PrepareApeman ( agressivity ) ; begin
64224: LD_INT 0
64226: PPUSH
// uc_side := 0 ;
64227: LD_ADDR_OWVAR 20
64231: PUSH
64232: LD_INT 0
64234: ST_TO_ADDR
// uc_nation := 0 ;
64235: LD_ADDR_OWVAR 21
64239: PUSH
64240: LD_INT 0
64242: ST_TO_ADDR
// hc_sex := sex_male ;
64243: LD_ADDR_OWVAR 27
64247: PUSH
64248: LD_INT 1
64250: ST_TO_ADDR
// hc_class := class_apeman ;
64251: LD_ADDR_OWVAR 28
64255: PUSH
64256: LD_INT 12
64258: ST_TO_ADDR
// hc_gallery :=  ;
64259: LD_ADDR_OWVAR 33
64263: PUSH
64264: LD_STRING 
64266: ST_TO_ADDR
// if agressivity = 0 then
64267: LD_VAR 0 1
64271: PUSH
64272: LD_INT 0
64274: EQUAL
64275: IFFALSE 64287
// hc_agressivity := 0 else
64277: LD_ADDR_OWVAR 35
64281: PUSH
64282: LD_INT 0
64284: ST_TO_ADDR
64285: GO 64308
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64287: LD_ADDR_OWVAR 35
64291: PUSH
64292: LD_VAR 0 1
64296: NEG
64297: PPUSH
64298: LD_VAR 0 1
64302: PPUSH
64303: CALL_OW 12
64307: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
64308: LD_ADDR_OWVAR 31
64312: PUSH
64313: LD_INT 0
64315: PPUSH
64316: LD_INT 3
64318: PPUSH
64319: CALL_OW 12
64323: PUSH
64324: LD_INT 0
64326: PPUSH
64327: LD_INT 3
64329: PPUSH
64330: CALL_OW 12
64334: PUSH
64335: LD_INT 0
64337: PUSH
64338: LD_INT 0
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: LIST
64345: LIST
64346: ST_TO_ADDR
// end ;
64347: LD_VAR 0 2
64351: RET
// export function PrepareTiger ( agressivity ) ; begin
64352: LD_INT 0
64354: PPUSH
// uc_side := 0 ;
64355: LD_ADDR_OWVAR 20
64359: PUSH
64360: LD_INT 0
64362: ST_TO_ADDR
// uc_nation := 0 ;
64363: LD_ADDR_OWVAR 21
64367: PUSH
64368: LD_INT 0
64370: ST_TO_ADDR
// hc_class := class_tiger ;
64371: LD_ADDR_OWVAR 28
64375: PUSH
64376: LD_INT 14
64378: ST_TO_ADDR
// hc_gallery :=  ;
64379: LD_ADDR_OWVAR 33
64383: PUSH
64384: LD_STRING 
64386: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
64387: LD_ADDR_OWVAR 35
64391: PUSH
64392: LD_VAR 0 1
64396: NEG
64397: PPUSH
64398: LD_VAR 0 1
64402: PPUSH
64403: CALL_OW 12
64407: ST_TO_ADDR
// end ;
64408: LD_VAR 0 2
64412: RET
// export function PrepareEnchidna ( ) ; begin
64413: LD_INT 0
64415: PPUSH
// uc_side := 0 ;
64416: LD_ADDR_OWVAR 20
64420: PUSH
64421: LD_INT 0
64423: ST_TO_ADDR
// uc_nation := 0 ;
64424: LD_ADDR_OWVAR 21
64428: PUSH
64429: LD_INT 0
64431: ST_TO_ADDR
// hc_class := class_baggie ;
64432: LD_ADDR_OWVAR 28
64436: PUSH
64437: LD_INT 13
64439: ST_TO_ADDR
// hc_gallery :=  ;
64440: LD_ADDR_OWVAR 33
64444: PUSH
64445: LD_STRING 
64447: ST_TO_ADDR
// end ;
64448: LD_VAR 0 1
64452: RET
// export function PrepareFrog ( ) ; begin
64453: LD_INT 0
64455: PPUSH
// uc_side := 0 ;
64456: LD_ADDR_OWVAR 20
64460: PUSH
64461: LD_INT 0
64463: ST_TO_ADDR
// uc_nation := 0 ;
64464: LD_ADDR_OWVAR 21
64468: PUSH
64469: LD_INT 0
64471: ST_TO_ADDR
// hc_class := class_frog ;
64472: LD_ADDR_OWVAR 28
64476: PUSH
64477: LD_INT 19
64479: ST_TO_ADDR
// hc_gallery :=  ;
64480: LD_ADDR_OWVAR 33
64484: PUSH
64485: LD_STRING 
64487: ST_TO_ADDR
// end ;
64488: LD_VAR 0 1
64492: RET
// export function PrepareFish ( ) ; begin
64493: LD_INT 0
64495: PPUSH
// uc_side := 0 ;
64496: LD_ADDR_OWVAR 20
64500: PUSH
64501: LD_INT 0
64503: ST_TO_ADDR
// uc_nation := 0 ;
64504: LD_ADDR_OWVAR 21
64508: PUSH
64509: LD_INT 0
64511: ST_TO_ADDR
// hc_class := class_fish ;
64512: LD_ADDR_OWVAR 28
64516: PUSH
64517: LD_INT 20
64519: ST_TO_ADDR
// hc_gallery :=  ;
64520: LD_ADDR_OWVAR 33
64524: PUSH
64525: LD_STRING 
64527: ST_TO_ADDR
// end ;
64528: LD_VAR 0 1
64532: RET
// export function PrepareBird ( ) ; begin
64533: LD_INT 0
64535: PPUSH
// uc_side := 0 ;
64536: LD_ADDR_OWVAR 20
64540: PUSH
64541: LD_INT 0
64543: ST_TO_ADDR
// uc_nation := 0 ;
64544: LD_ADDR_OWVAR 21
64548: PUSH
64549: LD_INT 0
64551: ST_TO_ADDR
// hc_class := class_phororhacos ;
64552: LD_ADDR_OWVAR 28
64556: PUSH
64557: LD_INT 18
64559: ST_TO_ADDR
// hc_gallery :=  ;
64560: LD_ADDR_OWVAR 33
64564: PUSH
64565: LD_STRING 
64567: ST_TO_ADDR
// end ;
64568: LD_VAR 0 1
64572: RET
// export function PrepareHorse ( ) ; begin
64573: LD_INT 0
64575: PPUSH
// uc_side := 0 ;
64576: LD_ADDR_OWVAR 20
64580: PUSH
64581: LD_INT 0
64583: ST_TO_ADDR
// uc_nation := 0 ;
64584: LD_ADDR_OWVAR 21
64588: PUSH
64589: LD_INT 0
64591: ST_TO_ADDR
// hc_class := class_horse ;
64592: LD_ADDR_OWVAR 28
64596: PUSH
64597: LD_INT 21
64599: ST_TO_ADDR
// hc_gallery :=  ;
64600: LD_ADDR_OWVAR 33
64604: PUSH
64605: LD_STRING 
64607: ST_TO_ADDR
// end ;
64608: LD_VAR 0 1
64612: RET
// export function PrepareMastodont ( ) ; begin
64613: LD_INT 0
64615: PPUSH
// uc_side := 0 ;
64616: LD_ADDR_OWVAR 20
64620: PUSH
64621: LD_INT 0
64623: ST_TO_ADDR
// uc_nation := 0 ;
64624: LD_ADDR_OWVAR 21
64628: PUSH
64629: LD_INT 0
64631: ST_TO_ADDR
// vc_chassis := class_mastodont ;
64632: LD_ADDR_OWVAR 37
64636: PUSH
64637: LD_INT 31
64639: ST_TO_ADDR
// vc_control := control_rider ;
64640: LD_ADDR_OWVAR 38
64644: PUSH
64645: LD_INT 4
64647: ST_TO_ADDR
// end ;
64648: LD_VAR 0 1
64652: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64653: LD_INT 0
64655: PPUSH
64656: PPUSH
64657: PPUSH
// uc_side = 0 ;
64658: LD_ADDR_OWVAR 20
64662: PUSH
64663: LD_INT 0
64665: ST_TO_ADDR
// uc_nation = 0 ;
64666: LD_ADDR_OWVAR 21
64670: PUSH
64671: LD_INT 0
64673: ST_TO_ADDR
// InitHc_All ( ) ;
64674: CALL_OW 584
// InitVc ;
64678: CALL_OW 20
// if mastodonts then
64682: LD_VAR 0 6
64686: IFFALSE 64753
// for i = 1 to mastodonts do
64688: LD_ADDR_VAR 0 11
64692: PUSH
64693: DOUBLE
64694: LD_INT 1
64696: DEC
64697: ST_TO_ADDR
64698: LD_VAR 0 6
64702: PUSH
64703: FOR_TO
64704: IFFALSE 64751
// begin vc_chassis := 31 ;
64706: LD_ADDR_OWVAR 37
64710: PUSH
64711: LD_INT 31
64713: ST_TO_ADDR
// vc_control := control_rider ;
64714: LD_ADDR_OWVAR 38
64718: PUSH
64719: LD_INT 4
64721: ST_TO_ADDR
// animal := CreateVehicle ;
64722: LD_ADDR_VAR 0 12
64726: PUSH
64727: CALL_OW 45
64731: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64732: LD_VAR 0 12
64736: PPUSH
64737: LD_VAR 0 8
64741: PPUSH
64742: LD_INT 0
64744: PPUSH
64745: CALL 66881 0 3
// end ;
64749: GO 64703
64751: POP
64752: POP
// if horses then
64753: LD_VAR 0 5
64757: IFFALSE 64824
// for i = 1 to horses do
64759: LD_ADDR_VAR 0 11
64763: PUSH
64764: DOUBLE
64765: LD_INT 1
64767: DEC
64768: ST_TO_ADDR
64769: LD_VAR 0 5
64773: PUSH
64774: FOR_TO
64775: IFFALSE 64822
// begin hc_class := 21 ;
64777: LD_ADDR_OWVAR 28
64781: PUSH
64782: LD_INT 21
64784: ST_TO_ADDR
// hc_gallery :=  ;
64785: LD_ADDR_OWVAR 33
64789: PUSH
64790: LD_STRING 
64792: ST_TO_ADDR
// animal := CreateHuman ;
64793: LD_ADDR_VAR 0 12
64797: PUSH
64798: CALL_OW 44
64802: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64803: LD_VAR 0 12
64807: PPUSH
64808: LD_VAR 0 8
64812: PPUSH
64813: LD_INT 0
64815: PPUSH
64816: CALL 66881 0 3
// end ;
64820: GO 64774
64822: POP
64823: POP
// if birds then
64824: LD_VAR 0 1
64828: IFFALSE 64895
// for i = 1 to birds do
64830: LD_ADDR_VAR 0 11
64834: PUSH
64835: DOUBLE
64836: LD_INT 1
64838: DEC
64839: ST_TO_ADDR
64840: LD_VAR 0 1
64844: PUSH
64845: FOR_TO
64846: IFFALSE 64893
// begin hc_class := 18 ;
64848: LD_ADDR_OWVAR 28
64852: PUSH
64853: LD_INT 18
64855: ST_TO_ADDR
// hc_gallery =  ;
64856: LD_ADDR_OWVAR 33
64860: PUSH
64861: LD_STRING 
64863: ST_TO_ADDR
// animal := CreateHuman ;
64864: LD_ADDR_VAR 0 12
64868: PUSH
64869: CALL_OW 44
64873: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64874: LD_VAR 0 12
64878: PPUSH
64879: LD_VAR 0 8
64883: PPUSH
64884: LD_INT 0
64886: PPUSH
64887: CALL 66881 0 3
// end ;
64891: GO 64845
64893: POP
64894: POP
// if tigers then
64895: LD_VAR 0 2
64899: IFFALSE 64983
// for i = 1 to tigers do
64901: LD_ADDR_VAR 0 11
64905: PUSH
64906: DOUBLE
64907: LD_INT 1
64909: DEC
64910: ST_TO_ADDR
64911: LD_VAR 0 2
64915: PUSH
64916: FOR_TO
64917: IFFALSE 64981
// begin hc_class = class_tiger ;
64919: LD_ADDR_OWVAR 28
64923: PUSH
64924: LD_INT 14
64926: ST_TO_ADDR
// hc_gallery =  ;
64927: LD_ADDR_OWVAR 33
64931: PUSH
64932: LD_STRING 
64934: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64935: LD_ADDR_OWVAR 35
64939: PUSH
64940: LD_INT 7
64942: NEG
64943: PPUSH
64944: LD_INT 7
64946: PPUSH
64947: CALL_OW 12
64951: ST_TO_ADDR
// animal := CreateHuman ;
64952: LD_ADDR_VAR 0 12
64956: PUSH
64957: CALL_OW 44
64961: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64962: LD_VAR 0 12
64966: PPUSH
64967: LD_VAR 0 8
64971: PPUSH
64972: LD_INT 0
64974: PPUSH
64975: CALL 66881 0 3
// end ;
64979: GO 64916
64981: POP
64982: POP
// if apemans then
64983: LD_VAR 0 3
64987: IFFALSE 65110
// for i = 1 to apemans do
64989: LD_ADDR_VAR 0 11
64993: PUSH
64994: DOUBLE
64995: LD_INT 1
64997: DEC
64998: ST_TO_ADDR
64999: LD_VAR 0 3
65003: PUSH
65004: FOR_TO
65005: IFFALSE 65108
// begin hc_class = class_apeman ;
65007: LD_ADDR_OWVAR 28
65011: PUSH
65012: LD_INT 12
65014: ST_TO_ADDR
// hc_gallery =  ;
65015: LD_ADDR_OWVAR 33
65019: PUSH
65020: LD_STRING 
65022: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
65023: LD_ADDR_OWVAR 35
65027: PUSH
65028: LD_INT 2
65030: NEG
65031: PPUSH
65032: LD_INT 2
65034: PPUSH
65035: CALL_OW 12
65039: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65040: LD_ADDR_OWVAR 31
65044: PUSH
65045: LD_INT 1
65047: PPUSH
65048: LD_INT 3
65050: PPUSH
65051: CALL_OW 12
65055: PUSH
65056: LD_INT 1
65058: PPUSH
65059: LD_INT 3
65061: PPUSH
65062: CALL_OW 12
65066: PUSH
65067: LD_INT 0
65069: PUSH
65070: LD_INT 0
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: ST_TO_ADDR
// animal := CreateHuman ;
65079: LD_ADDR_VAR 0 12
65083: PUSH
65084: CALL_OW 44
65088: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65089: LD_VAR 0 12
65093: PPUSH
65094: LD_VAR 0 8
65098: PPUSH
65099: LD_INT 0
65101: PPUSH
65102: CALL 66881 0 3
// end ;
65106: GO 65004
65108: POP
65109: POP
// if enchidnas then
65110: LD_VAR 0 4
65114: IFFALSE 65181
// for i = 1 to enchidnas do
65116: LD_ADDR_VAR 0 11
65120: PUSH
65121: DOUBLE
65122: LD_INT 1
65124: DEC
65125: ST_TO_ADDR
65126: LD_VAR 0 4
65130: PUSH
65131: FOR_TO
65132: IFFALSE 65179
// begin hc_class = 13 ;
65134: LD_ADDR_OWVAR 28
65138: PUSH
65139: LD_INT 13
65141: ST_TO_ADDR
// hc_gallery =  ;
65142: LD_ADDR_OWVAR 33
65146: PUSH
65147: LD_STRING 
65149: ST_TO_ADDR
// animal := CreateHuman ;
65150: LD_ADDR_VAR 0 12
65154: PUSH
65155: CALL_OW 44
65159: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65160: LD_VAR 0 12
65164: PPUSH
65165: LD_VAR 0 8
65169: PPUSH
65170: LD_INT 0
65172: PPUSH
65173: CALL 66881 0 3
// end ;
65177: GO 65131
65179: POP
65180: POP
// if fishes then
65181: LD_VAR 0 7
65185: IFFALSE 65252
// for i = 1 to fishes do
65187: LD_ADDR_VAR 0 11
65191: PUSH
65192: DOUBLE
65193: LD_INT 1
65195: DEC
65196: ST_TO_ADDR
65197: LD_VAR 0 7
65201: PUSH
65202: FOR_TO
65203: IFFALSE 65250
// begin hc_class = 20 ;
65205: LD_ADDR_OWVAR 28
65209: PUSH
65210: LD_INT 20
65212: ST_TO_ADDR
// hc_gallery =  ;
65213: LD_ADDR_OWVAR 33
65217: PUSH
65218: LD_STRING 
65220: ST_TO_ADDR
// animal := CreateHuman ;
65221: LD_ADDR_VAR 0 12
65225: PUSH
65226: CALL_OW 44
65230: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65231: LD_VAR 0 12
65235: PPUSH
65236: LD_VAR 0 9
65240: PPUSH
65241: LD_INT 0
65243: PPUSH
65244: CALL 66881 0 3
// end ;
65248: GO 65202
65250: POP
65251: POP
// end ;
65252: LD_VAR 0 10
65256: RET
// export function WantHeal ( sci , unit ) ; begin
65257: LD_INT 0
65259: PPUSH
// if GetTaskList ( sci ) > 0 then
65260: LD_VAR 0 1
65264: PPUSH
65265: CALL_OW 437
65269: PUSH
65270: LD_INT 0
65272: GREATER
65273: IFFALSE 65343
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65275: LD_VAR 0 1
65279: PPUSH
65280: CALL_OW 437
65284: PUSH
65285: LD_INT 1
65287: ARRAY
65288: PUSH
65289: LD_INT 1
65291: ARRAY
65292: PUSH
65293: LD_STRING l
65295: EQUAL
65296: PUSH
65297: LD_VAR 0 1
65301: PPUSH
65302: CALL_OW 437
65306: PUSH
65307: LD_INT 1
65309: ARRAY
65310: PUSH
65311: LD_INT 4
65313: ARRAY
65314: PUSH
65315: LD_VAR 0 2
65319: EQUAL
65320: AND
65321: IFFALSE 65333
// result := true else
65323: LD_ADDR_VAR 0 3
65327: PUSH
65328: LD_INT 1
65330: ST_TO_ADDR
65331: GO 65341
// result := false ;
65333: LD_ADDR_VAR 0 3
65337: PUSH
65338: LD_INT 0
65340: ST_TO_ADDR
// end else
65341: GO 65351
// result := false ;
65343: LD_ADDR_VAR 0 3
65347: PUSH
65348: LD_INT 0
65350: ST_TO_ADDR
// end ;
65351: LD_VAR 0 3
65355: RET
// export function HealTarget ( sci ) ; begin
65356: LD_INT 0
65358: PPUSH
// if not sci then
65359: LD_VAR 0 1
65363: NOT
65364: IFFALSE 65368
// exit ;
65366: GO 65433
// result := 0 ;
65368: LD_ADDR_VAR 0 2
65372: PUSH
65373: LD_INT 0
65375: ST_TO_ADDR
// if GetTaskList ( sci ) then
65376: LD_VAR 0 1
65380: PPUSH
65381: CALL_OW 437
65385: IFFALSE 65433
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65387: LD_VAR 0 1
65391: PPUSH
65392: CALL_OW 437
65396: PUSH
65397: LD_INT 1
65399: ARRAY
65400: PUSH
65401: LD_INT 1
65403: ARRAY
65404: PUSH
65405: LD_STRING l
65407: EQUAL
65408: IFFALSE 65433
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65410: LD_ADDR_VAR 0 2
65414: PUSH
65415: LD_VAR 0 1
65419: PPUSH
65420: CALL_OW 437
65424: PUSH
65425: LD_INT 1
65427: ARRAY
65428: PUSH
65429: LD_INT 4
65431: ARRAY
65432: ST_TO_ADDR
// end ;
65433: LD_VAR 0 2
65437: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65438: LD_INT 0
65440: PPUSH
65441: PPUSH
65442: PPUSH
65443: PPUSH
// if not base_units then
65444: LD_VAR 0 1
65448: NOT
65449: IFFALSE 65453
// exit ;
65451: GO 65540
// result := false ;
65453: LD_ADDR_VAR 0 2
65457: PUSH
65458: LD_INT 0
65460: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65461: LD_ADDR_VAR 0 5
65465: PUSH
65466: LD_VAR 0 1
65470: PPUSH
65471: LD_INT 21
65473: PUSH
65474: LD_INT 3
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PPUSH
65481: CALL_OW 72
65485: ST_TO_ADDR
// if not tmp then
65486: LD_VAR 0 5
65490: NOT
65491: IFFALSE 65495
// exit ;
65493: GO 65540
// for i in tmp do
65495: LD_ADDR_VAR 0 3
65499: PUSH
65500: LD_VAR 0 5
65504: PUSH
65505: FOR_IN
65506: IFFALSE 65538
// begin result := EnemyInRange ( i , 22 ) ;
65508: LD_ADDR_VAR 0 2
65512: PUSH
65513: LD_VAR 0 3
65517: PPUSH
65518: LD_INT 22
65520: PPUSH
65521: CALL 63118 0 2
65525: ST_TO_ADDR
// if result then
65526: LD_VAR 0 2
65530: IFFALSE 65536
// exit ;
65532: POP
65533: POP
65534: GO 65540
// end ;
65536: GO 65505
65538: POP
65539: POP
// end ;
65540: LD_VAR 0 2
65544: RET
// export function FilterByTag ( units , tag ) ; begin
65545: LD_INT 0
65547: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65548: LD_ADDR_VAR 0 3
65552: PUSH
65553: LD_VAR 0 1
65557: PPUSH
65558: LD_INT 120
65560: PUSH
65561: LD_VAR 0 2
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PPUSH
65570: CALL_OW 72
65574: ST_TO_ADDR
// end ;
65575: LD_VAR 0 3
65579: RET
// export function IsDriver ( un ) ; begin
65580: LD_INT 0
65582: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65583: LD_ADDR_VAR 0 2
65587: PUSH
65588: LD_VAR 0 1
65592: PUSH
65593: LD_INT 55
65595: PUSH
65596: EMPTY
65597: LIST
65598: PPUSH
65599: CALL_OW 69
65603: IN
65604: ST_TO_ADDR
// end ;
65605: LD_VAR 0 2
65609: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65610: LD_INT 0
65612: PPUSH
65613: PPUSH
// list := [ ] ;
65614: LD_ADDR_VAR 0 5
65618: PUSH
65619: EMPTY
65620: ST_TO_ADDR
// case d of 0 :
65621: LD_VAR 0 3
65625: PUSH
65626: LD_INT 0
65628: DOUBLE
65629: EQUAL
65630: IFTRUE 65634
65632: GO 65767
65634: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65635: LD_ADDR_VAR 0 5
65639: PUSH
65640: LD_VAR 0 1
65644: PUSH
65645: LD_INT 4
65647: MINUS
65648: PUSH
65649: LD_VAR 0 2
65653: PUSH
65654: LD_INT 4
65656: MINUS
65657: PUSH
65658: LD_INT 2
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: LIST
65665: PUSH
65666: LD_VAR 0 1
65670: PUSH
65671: LD_INT 3
65673: MINUS
65674: PUSH
65675: LD_VAR 0 2
65679: PUSH
65680: LD_INT 1
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: LIST
65687: PUSH
65688: LD_VAR 0 1
65692: PUSH
65693: LD_INT 4
65695: PLUS
65696: PUSH
65697: LD_VAR 0 2
65701: PUSH
65702: LD_INT 4
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: LIST
65709: PUSH
65710: LD_VAR 0 1
65714: PUSH
65715: LD_INT 3
65717: PLUS
65718: PUSH
65719: LD_VAR 0 2
65723: PUSH
65724: LD_INT 3
65726: PLUS
65727: PUSH
65728: LD_INT 5
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: LIST
65735: PUSH
65736: LD_VAR 0 1
65740: PUSH
65741: LD_VAR 0 2
65745: PUSH
65746: LD_INT 4
65748: PLUS
65749: PUSH
65750: LD_INT 0
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: LIST
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: ST_TO_ADDR
// end ; 1 :
65765: GO 66465
65767: LD_INT 1
65769: DOUBLE
65770: EQUAL
65771: IFTRUE 65775
65773: GO 65908
65775: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65776: LD_ADDR_VAR 0 5
65780: PUSH
65781: LD_VAR 0 1
65785: PUSH
65786: LD_VAR 0 2
65790: PUSH
65791: LD_INT 4
65793: MINUS
65794: PUSH
65795: LD_INT 3
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: LIST
65802: PUSH
65803: LD_VAR 0 1
65807: PUSH
65808: LD_INT 3
65810: MINUS
65811: PUSH
65812: LD_VAR 0 2
65816: PUSH
65817: LD_INT 3
65819: MINUS
65820: PUSH
65821: LD_INT 2
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: LIST
65828: PUSH
65829: LD_VAR 0 1
65833: PUSH
65834: LD_INT 4
65836: MINUS
65837: PUSH
65838: LD_VAR 0 2
65842: PUSH
65843: LD_INT 1
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: LIST
65850: PUSH
65851: LD_VAR 0 1
65855: PUSH
65856: LD_VAR 0 2
65860: PUSH
65861: LD_INT 3
65863: PLUS
65864: PUSH
65865: LD_INT 0
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: LIST
65872: PUSH
65873: LD_VAR 0 1
65877: PUSH
65878: LD_INT 4
65880: PLUS
65881: PUSH
65882: LD_VAR 0 2
65886: PUSH
65887: LD_INT 4
65889: PLUS
65890: PUSH
65891: LD_INT 5
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: LIST
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: ST_TO_ADDR
// end ; 2 :
65906: GO 66465
65908: LD_INT 2
65910: DOUBLE
65911: EQUAL
65912: IFTRUE 65916
65914: GO 66045
65916: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65917: LD_ADDR_VAR 0 5
65921: PUSH
65922: LD_VAR 0 1
65926: PUSH
65927: LD_VAR 0 2
65931: PUSH
65932: LD_INT 3
65934: MINUS
65935: PUSH
65936: LD_INT 3
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: LIST
65943: PUSH
65944: LD_VAR 0 1
65948: PUSH
65949: LD_INT 4
65951: PLUS
65952: PUSH
65953: LD_VAR 0 2
65957: PUSH
65958: LD_INT 4
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: LIST
65965: PUSH
65966: LD_VAR 0 1
65970: PUSH
65971: LD_VAR 0 2
65975: PUSH
65976: LD_INT 4
65978: PLUS
65979: PUSH
65980: LD_INT 0
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: LIST
65987: PUSH
65988: LD_VAR 0 1
65992: PUSH
65993: LD_INT 3
65995: MINUS
65996: PUSH
65997: LD_VAR 0 2
66001: PUSH
66002: LD_INT 1
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: LIST
66009: PUSH
66010: LD_VAR 0 1
66014: PUSH
66015: LD_INT 4
66017: MINUS
66018: PUSH
66019: LD_VAR 0 2
66023: PUSH
66024: LD_INT 4
66026: MINUS
66027: PUSH
66028: LD_INT 2
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: LIST
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: ST_TO_ADDR
// end ; 3 :
66043: GO 66465
66045: LD_INT 3
66047: DOUBLE
66048: EQUAL
66049: IFTRUE 66053
66051: GO 66186
66053: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66054: LD_ADDR_VAR 0 5
66058: PUSH
66059: LD_VAR 0 1
66063: PUSH
66064: LD_INT 3
66066: PLUS
66067: PUSH
66068: LD_VAR 0 2
66072: PUSH
66073: LD_INT 4
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: LIST
66080: PUSH
66081: LD_VAR 0 1
66085: PUSH
66086: LD_INT 4
66088: PLUS
66089: PUSH
66090: LD_VAR 0 2
66094: PUSH
66095: LD_INT 4
66097: PLUS
66098: PUSH
66099: LD_INT 5
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: LIST
66106: PUSH
66107: LD_VAR 0 1
66111: PUSH
66112: LD_INT 4
66114: MINUS
66115: PUSH
66116: LD_VAR 0 2
66120: PUSH
66121: LD_INT 1
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: LIST
66128: PUSH
66129: LD_VAR 0 1
66133: PUSH
66134: LD_VAR 0 2
66138: PUSH
66139: LD_INT 4
66141: MINUS
66142: PUSH
66143: LD_INT 3
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: LIST
66150: PUSH
66151: LD_VAR 0 1
66155: PUSH
66156: LD_INT 3
66158: MINUS
66159: PUSH
66160: LD_VAR 0 2
66164: PUSH
66165: LD_INT 3
66167: MINUS
66168: PUSH
66169: LD_INT 2
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: LIST
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: ST_TO_ADDR
// end ; 4 :
66184: GO 66465
66186: LD_INT 4
66188: DOUBLE
66189: EQUAL
66190: IFTRUE 66194
66192: GO 66327
66194: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66195: LD_ADDR_VAR 0 5
66199: PUSH
66200: LD_VAR 0 1
66204: PUSH
66205: LD_VAR 0 2
66209: PUSH
66210: LD_INT 4
66212: PLUS
66213: PUSH
66214: LD_INT 0
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: LIST
66221: PUSH
66222: LD_VAR 0 1
66226: PUSH
66227: LD_INT 3
66229: PLUS
66230: PUSH
66231: LD_VAR 0 2
66235: PUSH
66236: LD_INT 3
66238: PLUS
66239: PUSH
66240: LD_INT 5
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: LIST
66247: PUSH
66248: LD_VAR 0 1
66252: PUSH
66253: LD_INT 4
66255: PLUS
66256: PUSH
66257: LD_VAR 0 2
66261: PUSH
66262: LD_INT 4
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: LIST
66269: PUSH
66270: LD_VAR 0 1
66274: PUSH
66275: LD_VAR 0 2
66279: PUSH
66280: LD_INT 3
66282: MINUS
66283: PUSH
66284: LD_INT 3
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: LIST
66291: PUSH
66292: LD_VAR 0 1
66296: PUSH
66297: LD_INT 4
66299: MINUS
66300: PUSH
66301: LD_VAR 0 2
66305: PUSH
66306: LD_INT 4
66308: MINUS
66309: PUSH
66310: LD_INT 2
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: LIST
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: ST_TO_ADDR
// end ; 5 :
66325: GO 66465
66327: LD_INT 5
66329: DOUBLE
66330: EQUAL
66331: IFTRUE 66335
66333: GO 66464
66335: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66336: LD_ADDR_VAR 0 5
66340: PUSH
66341: LD_VAR 0 1
66345: PUSH
66346: LD_INT 4
66348: MINUS
66349: PUSH
66350: LD_VAR 0 2
66354: PUSH
66355: LD_INT 1
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: LIST
66362: PUSH
66363: LD_VAR 0 1
66367: PUSH
66368: LD_VAR 0 2
66372: PUSH
66373: LD_INT 4
66375: MINUS
66376: PUSH
66377: LD_INT 3
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: LIST
66384: PUSH
66385: LD_VAR 0 1
66389: PUSH
66390: LD_INT 4
66392: PLUS
66393: PUSH
66394: LD_VAR 0 2
66398: PUSH
66399: LD_INT 4
66401: PLUS
66402: PUSH
66403: LD_INT 5
66405: PUSH
66406: EMPTY
66407: LIST
66408: LIST
66409: LIST
66410: PUSH
66411: LD_VAR 0 1
66415: PUSH
66416: LD_INT 3
66418: PLUS
66419: PUSH
66420: LD_VAR 0 2
66424: PUSH
66425: LD_INT 4
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: LIST
66432: PUSH
66433: LD_VAR 0 1
66437: PUSH
66438: LD_VAR 0 2
66442: PUSH
66443: LD_INT 3
66445: PLUS
66446: PUSH
66447: LD_INT 0
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: LIST
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: LIST
66459: LIST
66460: LIST
66461: ST_TO_ADDR
// end ; end ;
66462: GO 66465
66464: POP
// result := list ;
66465: LD_ADDR_VAR 0 4
66469: PUSH
66470: LD_VAR 0 5
66474: ST_TO_ADDR
// end ;
66475: LD_VAR 0 4
66479: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66480: LD_INT 0
66482: PPUSH
66483: PPUSH
66484: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66485: LD_VAR 0 1
66489: NOT
66490: PUSH
66491: LD_VAR 0 2
66495: PUSH
66496: LD_INT 1
66498: PUSH
66499: LD_INT 2
66501: PUSH
66502: LD_INT 3
66504: PUSH
66505: LD_INT 4
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: LIST
66512: LIST
66513: IN
66514: NOT
66515: OR
66516: IFFALSE 66520
// exit ;
66518: GO 66603
// tmp := [ ] ;
66520: LD_ADDR_VAR 0 5
66524: PUSH
66525: EMPTY
66526: ST_TO_ADDR
// for i in units do
66527: LD_ADDR_VAR 0 4
66531: PUSH
66532: LD_VAR 0 1
66536: PUSH
66537: FOR_IN
66538: IFFALSE 66572
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
66540: LD_ADDR_VAR 0 5
66544: PUSH
66545: LD_VAR 0 5
66549: PPUSH
66550: LD_VAR 0 4
66554: PPUSH
66555: LD_VAR 0 2
66559: PPUSH
66560: CALL_OW 259
66564: PPUSH
66565: CALL 67976 0 2
66569: ST_TO_ADDR
66570: GO 66537
66572: POP
66573: POP
// if not tmp then
66574: LD_VAR 0 5
66578: NOT
66579: IFFALSE 66583
// exit ;
66581: GO 66603
// result := SortListByListDesc ( units , tmp ) ;
66583: LD_ADDR_VAR 0 3
66587: PUSH
66588: LD_VAR 0 1
66592: PPUSH
66593: LD_VAR 0 5
66597: PPUSH
66598: CALL_OW 77
66602: ST_TO_ADDR
// end ;
66603: LD_VAR 0 3
66607: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66608: LD_INT 0
66610: PPUSH
66611: PPUSH
66612: PPUSH
// result := false ;
66613: LD_ADDR_VAR 0 3
66617: PUSH
66618: LD_INT 0
66620: ST_TO_ADDR
// if not building then
66621: LD_VAR 0 2
66625: NOT
66626: IFFALSE 66630
// exit ;
66628: GO 66768
// x := GetX ( building ) ;
66630: LD_ADDR_VAR 0 4
66634: PUSH
66635: LD_VAR 0 2
66639: PPUSH
66640: CALL_OW 250
66644: ST_TO_ADDR
// y := GetY ( building ) ;
66645: LD_ADDR_VAR 0 5
66649: PUSH
66650: LD_VAR 0 2
66654: PPUSH
66655: CALL_OW 251
66659: ST_TO_ADDR
// if not x or not y then
66660: LD_VAR 0 4
66664: NOT
66665: PUSH
66666: LD_VAR 0 5
66670: NOT
66671: OR
66672: IFFALSE 66676
// exit ;
66674: GO 66768
// if GetTaskList ( unit ) then
66676: LD_VAR 0 1
66680: PPUSH
66681: CALL_OW 437
66685: IFFALSE 66768
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66687: LD_STRING e
66689: PUSH
66690: LD_VAR 0 1
66694: PPUSH
66695: CALL_OW 437
66699: PUSH
66700: LD_INT 1
66702: ARRAY
66703: PUSH
66704: LD_INT 1
66706: ARRAY
66707: EQUAL
66708: PUSH
66709: LD_VAR 0 4
66713: PUSH
66714: LD_VAR 0 1
66718: PPUSH
66719: CALL_OW 437
66723: PUSH
66724: LD_INT 1
66726: ARRAY
66727: PUSH
66728: LD_INT 2
66730: ARRAY
66731: EQUAL
66732: AND
66733: PUSH
66734: LD_VAR 0 5
66738: PUSH
66739: LD_VAR 0 1
66743: PPUSH
66744: CALL_OW 437
66748: PUSH
66749: LD_INT 1
66751: ARRAY
66752: PUSH
66753: LD_INT 3
66755: ARRAY
66756: EQUAL
66757: AND
66758: IFFALSE 66768
// result := true end ;
66760: LD_ADDR_VAR 0 3
66764: PUSH
66765: LD_INT 1
66767: ST_TO_ADDR
// end ;
66768: LD_VAR 0 3
66772: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66773: LD_INT 0
66775: PPUSH
// result := false ;
66776: LD_ADDR_VAR 0 4
66780: PUSH
66781: LD_INT 0
66783: ST_TO_ADDR
// if GetTaskList ( unit ) then
66784: LD_VAR 0 1
66788: PPUSH
66789: CALL_OW 437
66793: IFFALSE 66876
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66795: LD_STRING M
66797: PUSH
66798: LD_VAR 0 1
66802: PPUSH
66803: CALL_OW 437
66807: PUSH
66808: LD_INT 1
66810: ARRAY
66811: PUSH
66812: LD_INT 1
66814: ARRAY
66815: EQUAL
66816: PUSH
66817: LD_VAR 0 2
66821: PUSH
66822: LD_VAR 0 1
66826: PPUSH
66827: CALL_OW 437
66831: PUSH
66832: LD_INT 1
66834: ARRAY
66835: PUSH
66836: LD_INT 2
66838: ARRAY
66839: EQUAL
66840: AND
66841: PUSH
66842: LD_VAR 0 3
66846: PUSH
66847: LD_VAR 0 1
66851: PPUSH
66852: CALL_OW 437
66856: PUSH
66857: LD_INT 1
66859: ARRAY
66860: PUSH
66861: LD_INT 3
66863: ARRAY
66864: EQUAL
66865: AND
66866: IFFALSE 66876
// result := true ;
66868: LD_ADDR_VAR 0 4
66872: PUSH
66873: LD_INT 1
66875: ST_TO_ADDR
// end ; end ;
66876: LD_VAR 0 4
66880: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66881: LD_INT 0
66883: PPUSH
66884: PPUSH
66885: PPUSH
66886: PPUSH
// if not unit or not area then
66887: LD_VAR 0 1
66891: NOT
66892: PUSH
66893: LD_VAR 0 2
66897: NOT
66898: OR
66899: IFFALSE 66903
// exit ;
66901: GO 67079
// tmp := AreaToList ( area , i ) ;
66903: LD_ADDR_VAR 0 6
66907: PUSH
66908: LD_VAR 0 2
66912: PPUSH
66913: LD_VAR 0 5
66917: PPUSH
66918: CALL_OW 517
66922: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66923: LD_ADDR_VAR 0 5
66927: PUSH
66928: DOUBLE
66929: LD_INT 1
66931: DEC
66932: ST_TO_ADDR
66933: LD_VAR 0 6
66937: PUSH
66938: LD_INT 1
66940: ARRAY
66941: PUSH
66942: FOR_TO
66943: IFFALSE 67077
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66945: LD_ADDR_VAR 0 7
66949: PUSH
66950: LD_VAR 0 6
66954: PUSH
66955: LD_INT 1
66957: ARRAY
66958: PUSH
66959: LD_VAR 0 5
66963: ARRAY
66964: PUSH
66965: LD_VAR 0 6
66969: PUSH
66970: LD_INT 2
66972: ARRAY
66973: PUSH
66974: LD_VAR 0 5
66978: ARRAY
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
66984: LD_INT 92
66986: PUSH
66987: LD_VAR 0 7
66991: PUSH
66992: LD_INT 1
66994: ARRAY
66995: PUSH
66996: LD_VAR 0 7
67000: PUSH
67001: LD_INT 2
67003: ARRAY
67004: PUSH
67005: LD_INT 2
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: LIST
67012: LIST
67013: PPUSH
67014: CALL_OW 69
67018: PUSH
67019: LD_INT 0
67021: EQUAL
67022: IFFALSE 67075
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67024: LD_VAR 0 1
67028: PPUSH
67029: LD_VAR 0 7
67033: PUSH
67034: LD_INT 1
67036: ARRAY
67037: PPUSH
67038: LD_VAR 0 7
67042: PUSH
67043: LD_INT 2
67045: ARRAY
67046: PPUSH
67047: LD_VAR 0 3
67051: PPUSH
67052: CALL_OW 48
// result := IsPlaced ( unit ) ;
67056: LD_ADDR_VAR 0 4
67060: PUSH
67061: LD_VAR 0 1
67065: PPUSH
67066: CALL_OW 305
67070: ST_TO_ADDR
// exit ;
67071: POP
67072: POP
67073: GO 67079
// end ; end ;
67075: GO 66942
67077: POP
67078: POP
// end ;
67079: LD_VAR 0 4
67083: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67084: LD_INT 0
67086: PPUSH
67087: PPUSH
67088: PPUSH
// if not side or side > 8 then
67089: LD_VAR 0 1
67093: NOT
67094: PUSH
67095: LD_VAR 0 1
67099: PUSH
67100: LD_INT 8
67102: GREATER
67103: OR
67104: IFFALSE 67108
// exit ;
67106: GO 67295
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67108: LD_ADDR_VAR 0 4
67112: PUSH
67113: LD_INT 22
67115: PUSH
67116: LD_VAR 0 1
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 21
67127: PUSH
67128: LD_INT 3
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: EMPTY
67136: LIST
67137: LIST
67138: PPUSH
67139: CALL_OW 69
67143: ST_TO_ADDR
// if not tmp then
67144: LD_VAR 0 4
67148: NOT
67149: IFFALSE 67153
// exit ;
67151: GO 67295
// enable_addtolog := true ;
67153: LD_ADDR_OWVAR 81
67157: PUSH
67158: LD_INT 1
67160: ST_TO_ADDR
// AddToLog ( [ ) ;
67161: LD_STRING [
67163: PPUSH
67164: CALL_OW 561
// for i in tmp do
67168: LD_ADDR_VAR 0 3
67172: PUSH
67173: LD_VAR 0 4
67177: PUSH
67178: FOR_IN
67179: IFFALSE 67286
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67181: LD_STRING [
67183: PUSH
67184: LD_VAR 0 3
67188: PPUSH
67189: CALL_OW 266
67193: STR
67194: PUSH
67195: LD_STRING , 
67197: STR
67198: PUSH
67199: LD_VAR 0 3
67203: PPUSH
67204: CALL_OW 250
67208: STR
67209: PUSH
67210: LD_STRING , 
67212: STR
67213: PUSH
67214: LD_VAR 0 3
67218: PPUSH
67219: CALL_OW 251
67223: STR
67224: PUSH
67225: LD_STRING , 
67227: STR
67228: PUSH
67229: LD_VAR 0 3
67233: PPUSH
67234: CALL_OW 254
67238: STR
67239: PUSH
67240: LD_STRING , 
67242: STR
67243: PUSH
67244: LD_VAR 0 3
67248: PPUSH
67249: LD_INT 1
67251: PPUSH
67252: CALL_OW 268
67256: STR
67257: PUSH
67258: LD_STRING , 
67260: STR
67261: PUSH
67262: LD_VAR 0 3
67266: PPUSH
67267: LD_INT 2
67269: PPUSH
67270: CALL_OW 268
67274: STR
67275: PUSH
67276: LD_STRING ],
67278: STR
67279: PPUSH
67280: CALL_OW 561
// end ;
67284: GO 67178
67286: POP
67287: POP
// AddToLog ( ]; ) ;
67288: LD_STRING ];
67290: PPUSH
67291: CALL_OW 561
// end ;
67295: LD_VAR 0 2
67299: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67300: LD_INT 0
67302: PPUSH
67303: PPUSH
67304: PPUSH
67305: PPUSH
67306: PPUSH
// if not area or not rate or not max then
67307: LD_VAR 0 1
67311: NOT
67312: PUSH
67313: LD_VAR 0 2
67317: NOT
67318: OR
67319: PUSH
67320: LD_VAR 0 4
67324: NOT
67325: OR
67326: IFFALSE 67330
// exit ;
67328: GO 67519
// while 1 do
67330: LD_INT 1
67332: IFFALSE 67519
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67334: LD_ADDR_VAR 0 9
67338: PUSH
67339: LD_VAR 0 1
67343: PPUSH
67344: LD_INT 1
67346: PPUSH
67347: CALL_OW 287
67351: PUSH
67352: LD_INT 10
67354: MUL
67355: ST_TO_ADDR
// r := rate / 10 ;
67356: LD_ADDR_VAR 0 7
67360: PUSH
67361: LD_VAR 0 2
67365: PUSH
67366: LD_INT 10
67368: DIVREAL
67369: ST_TO_ADDR
// time := 1 1$00 ;
67370: LD_ADDR_VAR 0 8
67374: PUSH
67375: LD_INT 2100
67377: ST_TO_ADDR
// if amount < min then
67378: LD_VAR 0 9
67382: PUSH
67383: LD_VAR 0 3
67387: LESS
67388: IFFALSE 67406
// r := r * 2 else
67390: LD_ADDR_VAR 0 7
67394: PUSH
67395: LD_VAR 0 7
67399: PUSH
67400: LD_INT 2
67402: MUL
67403: ST_TO_ADDR
67404: GO 67432
// if amount > max then
67406: LD_VAR 0 9
67410: PUSH
67411: LD_VAR 0 4
67415: GREATER
67416: IFFALSE 67432
// r := r / 2 ;
67418: LD_ADDR_VAR 0 7
67422: PUSH
67423: LD_VAR 0 7
67427: PUSH
67428: LD_INT 2
67430: DIVREAL
67431: ST_TO_ADDR
// time := time / r ;
67432: LD_ADDR_VAR 0 8
67436: PUSH
67437: LD_VAR 0 8
67441: PUSH
67442: LD_VAR 0 7
67446: DIVREAL
67447: ST_TO_ADDR
// if time < 0 then
67448: LD_VAR 0 8
67452: PUSH
67453: LD_INT 0
67455: LESS
67456: IFFALSE 67473
// time := time * - 1 ;
67458: LD_ADDR_VAR 0 8
67462: PUSH
67463: LD_VAR 0 8
67467: PUSH
67468: LD_INT 1
67470: NEG
67471: MUL
67472: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67473: LD_VAR 0 8
67477: PUSH
67478: LD_INT 35
67480: PPUSH
67481: LD_INT 875
67483: PPUSH
67484: CALL_OW 12
67488: PLUS
67489: PPUSH
67490: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67494: LD_INT 1
67496: PPUSH
67497: LD_INT 5
67499: PPUSH
67500: CALL_OW 12
67504: PPUSH
67505: LD_VAR 0 1
67509: PPUSH
67510: LD_INT 1
67512: PPUSH
67513: CALL_OW 55
// end ;
67517: GO 67330
// end ;
67519: LD_VAR 0 5
67523: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67524: LD_INT 0
67526: PPUSH
67527: PPUSH
67528: PPUSH
67529: PPUSH
67530: PPUSH
67531: PPUSH
67532: PPUSH
67533: PPUSH
// if not turrets or not factories then
67534: LD_VAR 0 1
67538: NOT
67539: PUSH
67540: LD_VAR 0 2
67544: NOT
67545: OR
67546: IFFALSE 67550
// exit ;
67548: GO 67857
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67550: LD_ADDR_VAR 0 10
67554: PUSH
67555: LD_INT 5
67557: PUSH
67558: LD_INT 6
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 2
67567: PUSH
67568: LD_INT 4
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 3
67577: PUSH
67578: LD_INT 5
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 24
67592: PUSH
67593: LD_INT 25
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 23
67602: PUSH
67603: LD_INT 27
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 42
67616: PUSH
67617: LD_INT 43
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 44
67626: PUSH
67627: LD_INT 46
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 45
67636: PUSH
67637: LD_INT 47
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: LIST
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: LIST
67653: ST_TO_ADDR
// result := [ ] ;
67654: LD_ADDR_VAR 0 3
67658: PUSH
67659: EMPTY
67660: ST_TO_ADDR
// for i in turrets do
67661: LD_ADDR_VAR 0 4
67665: PUSH
67666: LD_VAR 0 1
67670: PUSH
67671: FOR_IN
67672: IFFALSE 67855
// begin nat := GetNation ( i ) ;
67674: LD_ADDR_VAR 0 7
67678: PUSH
67679: LD_VAR 0 4
67683: PPUSH
67684: CALL_OW 248
67688: ST_TO_ADDR
// weapon := 0 ;
67689: LD_ADDR_VAR 0 8
67693: PUSH
67694: LD_INT 0
67696: ST_TO_ADDR
// if not nat then
67697: LD_VAR 0 7
67701: NOT
67702: IFFALSE 67706
// continue ;
67704: GO 67671
// for j in list [ nat ] do
67706: LD_ADDR_VAR 0 5
67710: PUSH
67711: LD_VAR 0 10
67715: PUSH
67716: LD_VAR 0 7
67720: ARRAY
67721: PUSH
67722: FOR_IN
67723: IFFALSE 67764
// if GetBWeapon ( i ) = j [ 1 ] then
67725: LD_VAR 0 4
67729: PPUSH
67730: CALL_OW 269
67734: PUSH
67735: LD_VAR 0 5
67739: PUSH
67740: LD_INT 1
67742: ARRAY
67743: EQUAL
67744: IFFALSE 67762
// begin weapon := j [ 2 ] ;
67746: LD_ADDR_VAR 0 8
67750: PUSH
67751: LD_VAR 0 5
67755: PUSH
67756: LD_INT 2
67758: ARRAY
67759: ST_TO_ADDR
// break ;
67760: GO 67764
// end ;
67762: GO 67722
67764: POP
67765: POP
// if not weapon then
67766: LD_VAR 0 8
67770: NOT
67771: IFFALSE 67775
// continue ;
67773: GO 67671
// for k in factories do
67775: LD_ADDR_VAR 0 6
67779: PUSH
67780: LD_VAR 0 2
67784: PUSH
67785: FOR_IN
67786: IFFALSE 67851
// begin weapons := AvailableWeaponList ( k ) ;
67788: LD_ADDR_VAR 0 9
67792: PUSH
67793: LD_VAR 0 6
67797: PPUSH
67798: CALL_OW 478
67802: ST_TO_ADDR
// if not weapons then
67803: LD_VAR 0 9
67807: NOT
67808: IFFALSE 67812
// continue ;
67810: GO 67785
// if weapon in weapons then
67812: LD_VAR 0 8
67816: PUSH
67817: LD_VAR 0 9
67821: IN
67822: IFFALSE 67849
// begin result := [ i , weapon ] ;
67824: LD_ADDR_VAR 0 3
67828: PUSH
67829: LD_VAR 0 4
67833: PUSH
67834: LD_VAR 0 8
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: ST_TO_ADDR
// exit ;
67843: POP
67844: POP
67845: POP
67846: POP
67847: GO 67857
// end ; end ;
67849: GO 67785
67851: POP
67852: POP
// end ;
67853: GO 67671
67855: POP
67856: POP
// end ;
67857: LD_VAR 0 3
67861: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67862: LD_INT 0
67864: PPUSH
// if not side or side > 8 then
67865: LD_VAR 0 3
67869: NOT
67870: PUSH
67871: LD_VAR 0 3
67875: PUSH
67876: LD_INT 8
67878: GREATER
67879: OR
67880: IFFALSE 67884
// exit ;
67882: GO 67943
// if not range then
67884: LD_VAR 0 4
67888: NOT
67889: IFFALSE 67900
// range := - 12 ;
67891: LD_ADDR_VAR 0 4
67895: PUSH
67896: LD_INT 12
67898: NEG
67899: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67900: LD_VAR 0 1
67904: PPUSH
67905: LD_VAR 0 2
67909: PPUSH
67910: LD_VAR 0 3
67914: PPUSH
67915: LD_VAR 0 4
67919: PPUSH
67920: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67924: LD_VAR 0 1
67928: PPUSH
67929: LD_VAR 0 2
67933: PPUSH
67934: LD_VAR 0 3
67938: PPUSH
67939: CALL_OW 331
// end ;
67943: LD_VAR 0 5
67947: RET
// export function Video ( mode ) ; begin
67948: LD_INT 0
67950: PPUSH
// ingame_video = mode ;
67951: LD_ADDR_OWVAR 52
67955: PUSH
67956: LD_VAR 0 1
67960: ST_TO_ADDR
// interface_hidden = mode ;
67961: LD_ADDR_OWVAR 54
67965: PUSH
67966: LD_VAR 0 1
67970: ST_TO_ADDR
// end ;
67971: LD_VAR 0 2
67975: RET
// export function Join ( array , element ) ; begin
67976: LD_INT 0
67978: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67979: LD_ADDR_VAR 0 3
67983: PUSH
67984: LD_VAR 0 1
67988: PPUSH
67989: LD_VAR 0 1
67993: PUSH
67994: LD_INT 1
67996: PLUS
67997: PPUSH
67998: LD_VAR 0 2
68002: PPUSH
68003: CALL_OW 1
68007: ST_TO_ADDR
// end ;
68008: LD_VAR 0 3
68012: RET
// export function JoinUnion ( array , element ) ; begin
68013: LD_INT 0
68015: PPUSH
// result := array union element ;
68016: LD_ADDR_VAR 0 3
68020: PUSH
68021: LD_VAR 0 1
68025: PUSH
68026: LD_VAR 0 2
68030: UNION
68031: ST_TO_ADDR
// end ;
68032: LD_VAR 0 3
68036: RET
// export function GetBehemoths ( side ) ; begin
68037: LD_INT 0
68039: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
68040: LD_ADDR_VAR 0 2
68044: PUSH
68045: LD_INT 22
68047: PUSH
68048: LD_VAR 0 1
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 31
68059: PUSH
68060: LD_INT 25
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PPUSH
68071: CALL_OW 69
68075: ST_TO_ADDR
// end ;
68076: LD_VAR 0 2
68080: RET
// export function Shuffle ( array ) ; var i , index ; begin
68081: LD_INT 0
68083: PPUSH
68084: PPUSH
68085: PPUSH
// result := [ ] ;
68086: LD_ADDR_VAR 0 2
68090: PUSH
68091: EMPTY
68092: ST_TO_ADDR
// if not array then
68093: LD_VAR 0 1
68097: NOT
68098: IFFALSE 68102
// exit ;
68100: GO 68201
// Randomize ;
68102: CALL_OW 10
// for i = array downto 1 do
68106: LD_ADDR_VAR 0 3
68110: PUSH
68111: DOUBLE
68112: LD_VAR 0 1
68116: INC
68117: ST_TO_ADDR
68118: LD_INT 1
68120: PUSH
68121: FOR_DOWNTO
68122: IFFALSE 68199
// begin index := rand ( 1 , array ) ;
68124: LD_ADDR_VAR 0 4
68128: PUSH
68129: LD_INT 1
68131: PPUSH
68132: LD_VAR 0 1
68136: PPUSH
68137: CALL_OW 12
68141: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68142: LD_ADDR_VAR 0 2
68146: PUSH
68147: LD_VAR 0 2
68151: PPUSH
68152: LD_VAR 0 2
68156: PUSH
68157: LD_INT 1
68159: PLUS
68160: PPUSH
68161: LD_VAR 0 1
68165: PUSH
68166: LD_VAR 0 4
68170: ARRAY
68171: PPUSH
68172: CALL_OW 2
68176: ST_TO_ADDR
// array := Delete ( array , index ) ;
68177: LD_ADDR_VAR 0 1
68181: PUSH
68182: LD_VAR 0 1
68186: PPUSH
68187: LD_VAR 0 4
68191: PPUSH
68192: CALL_OW 3
68196: ST_TO_ADDR
// end ;
68197: GO 68121
68199: POP
68200: POP
// end ;
68201: LD_VAR 0 2
68205: RET
// export function GetBaseMaterials ( base ) ; begin
68206: LD_INT 0
68208: PPUSH
// result := [ 0 , 0 , 0 ] ;
68209: LD_ADDR_VAR 0 2
68213: PUSH
68214: LD_INT 0
68216: PUSH
68217: LD_INT 0
68219: PUSH
68220: LD_INT 0
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: LIST
68227: ST_TO_ADDR
// if not base then
68228: LD_VAR 0 1
68232: NOT
68233: IFFALSE 68237
// exit ;
68235: GO 68286
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68237: LD_ADDR_VAR 0 2
68241: PUSH
68242: LD_VAR 0 1
68246: PPUSH
68247: LD_INT 1
68249: PPUSH
68250: CALL_OW 275
68254: PUSH
68255: LD_VAR 0 1
68259: PPUSH
68260: LD_INT 2
68262: PPUSH
68263: CALL_OW 275
68267: PUSH
68268: LD_VAR 0 1
68272: PPUSH
68273: LD_INT 3
68275: PPUSH
68276: CALL_OW 275
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: LIST
68285: ST_TO_ADDR
// end ;
68286: LD_VAR 0 2
68290: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68291: LD_INT 0
68293: PPUSH
68294: PPUSH
// result := array ;
68295: LD_ADDR_VAR 0 3
68299: PUSH
68300: LD_VAR 0 1
68304: ST_TO_ADDR
// if size >= result then
68305: LD_VAR 0 2
68309: PUSH
68310: LD_VAR 0 3
68314: GREATEREQUAL
68315: IFFALSE 68319
// exit ;
68317: GO 68369
// if size then
68319: LD_VAR 0 2
68323: IFFALSE 68369
// for i := array downto size do
68325: LD_ADDR_VAR 0 4
68329: PUSH
68330: DOUBLE
68331: LD_VAR 0 1
68335: INC
68336: ST_TO_ADDR
68337: LD_VAR 0 2
68341: PUSH
68342: FOR_DOWNTO
68343: IFFALSE 68367
// result := Delete ( result , result ) ;
68345: LD_ADDR_VAR 0 3
68349: PUSH
68350: LD_VAR 0 3
68354: PPUSH
68355: LD_VAR 0 3
68359: PPUSH
68360: CALL_OW 3
68364: ST_TO_ADDR
68365: GO 68342
68367: POP
68368: POP
// end ;
68369: LD_VAR 0 3
68373: RET
// export function ComExit ( unit ) ; var tmp ; begin
68374: LD_INT 0
68376: PPUSH
68377: PPUSH
// if not IsInUnit ( unit ) then
68378: LD_VAR 0 1
68382: PPUSH
68383: CALL_OW 310
68387: NOT
68388: IFFALSE 68392
// exit ;
68390: GO 68452
// tmp := IsInUnit ( unit ) ;
68392: LD_ADDR_VAR 0 3
68396: PUSH
68397: LD_VAR 0 1
68401: PPUSH
68402: CALL_OW 310
68406: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68407: LD_VAR 0 3
68411: PPUSH
68412: CALL_OW 247
68416: PUSH
68417: LD_INT 2
68419: EQUAL
68420: IFFALSE 68433
// ComExitVehicle ( unit ) else
68422: LD_VAR 0 1
68426: PPUSH
68427: CALL_OW 121
68431: GO 68442
// ComExitBuilding ( unit ) ;
68433: LD_VAR 0 1
68437: PPUSH
68438: CALL_OW 122
// result := tmp ;
68442: LD_ADDR_VAR 0 2
68446: PUSH
68447: LD_VAR 0 3
68451: ST_TO_ADDR
// end ;
68452: LD_VAR 0 2
68456: RET
// export function ComExitAll ( units ) ; var i ; begin
68457: LD_INT 0
68459: PPUSH
68460: PPUSH
// if not units then
68461: LD_VAR 0 1
68465: NOT
68466: IFFALSE 68470
// exit ;
68468: GO 68496
// for i in units do
68470: LD_ADDR_VAR 0 3
68474: PUSH
68475: LD_VAR 0 1
68479: PUSH
68480: FOR_IN
68481: IFFALSE 68494
// ComExit ( i ) ;
68483: LD_VAR 0 3
68487: PPUSH
68488: CALL 68374 0 1
68492: GO 68480
68494: POP
68495: POP
// end ;
68496: LD_VAR 0 2
68500: RET
// export function ResetHc ; begin
68501: LD_INT 0
68503: PPUSH
// InitHc ;
68504: CALL_OW 19
// hc_importance := 0 ;
68508: LD_ADDR_OWVAR 32
68512: PUSH
68513: LD_INT 0
68515: ST_TO_ADDR
// end ;
68516: LD_VAR 0 1
68520: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68521: LD_INT 0
68523: PPUSH
68524: PPUSH
68525: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68526: LD_ADDR_VAR 0 6
68530: PUSH
68531: LD_VAR 0 1
68535: PUSH
68536: LD_VAR 0 3
68540: PLUS
68541: PUSH
68542: LD_INT 2
68544: DIV
68545: ST_TO_ADDR
// if _x < 0 then
68546: LD_VAR 0 6
68550: PUSH
68551: LD_INT 0
68553: LESS
68554: IFFALSE 68571
// _x := _x * - 1 ;
68556: LD_ADDR_VAR 0 6
68560: PUSH
68561: LD_VAR 0 6
68565: PUSH
68566: LD_INT 1
68568: NEG
68569: MUL
68570: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68571: LD_ADDR_VAR 0 7
68575: PUSH
68576: LD_VAR 0 2
68580: PUSH
68581: LD_VAR 0 4
68585: PLUS
68586: PUSH
68587: LD_INT 2
68589: DIV
68590: ST_TO_ADDR
// if _y < 0 then
68591: LD_VAR 0 7
68595: PUSH
68596: LD_INT 0
68598: LESS
68599: IFFALSE 68616
// _y := _y * - 1 ;
68601: LD_ADDR_VAR 0 7
68605: PUSH
68606: LD_VAR 0 7
68610: PUSH
68611: LD_INT 1
68613: NEG
68614: MUL
68615: ST_TO_ADDR
// result := [ _x , _y ] ;
68616: LD_ADDR_VAR 0 5
68620: PUSH
68621: LD_VAR 0 6
68625: PUSH
68626: LD_VAR 0 7
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: ST_TO_ADDR
// end ;
68635: LD_VAR 0 5
68639: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68640: LD_INT 0
68642: PPUSH
68643: PPUSH
68644: PPUSH
68645: PPUSH
// task := GetTaskList ( unit ) ;
68646: LD_ADDR_VAR 0 7
68650: PUSH
68651: LD_VAR 0 1
68655: PPUSH
68656: CALL_OW 437
68660: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68661: LD_VAR 0 7
68665: NOT
68666: PUSH
68667: LD_VAR 0 1
68671: PPUSH
68672: LD_VAR 0 2
68676: PPUSH
68677: CALL_OW 308
68681: NOT
68682: AND
68683: IFFALSE 68687
// exit ;
68685: GO 68805
// if IsInArea ( unit , area ) then
68687: LD_VAR 0 1
68691: PPUSH
68692: LD_VAR 0 2
68696: PPUSH
68697: CALL_OW 308
68701: IFFALSE 68719
// begin ComMoveToArea ( unit , goAway ) ;
68703: LD_VAR 0 1
68707: PPUSH
68708: LD_VAR 0 3
68712: PPUSH
68713: CALL_OW 113
// exit ;
68717: GO 68805
// end ; if task [ 1 ] [ 1 ] <> M then
68719: LD_VAR 0 7
68723: PUSH
68724: LD_INT 1
68726: ARRAY
68727: PUSH
68728: LD_INT 1
68730: ARRAY
68731: PUSH
68732: LD_STRING M
68734: NONEQUAL
68735: IFFALSE 68739
// exit ;
68737: GO 68805
// x := task [ 1 ] [ 2 ] ;
68739: LD_ADDR_VAR 0 5
68743: PUSH
68744: LD_VAR 0 7
68748: PUSH
68749: LD_INT 1
68751: ARRAY
68752: PUSH
68753: LD_INT 2
68755: ARRAY
68756: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68757: LD_ADDR_VAR 0 6
68761: PUSH
68762: LD_VAR 0 7
68766: PUSH
68767: LD_INT 1
68769: ARRAY
68770: PUSH
68771: LD_INT 3
68773: ARRAY
68774: ST_TO_ADDR
// if InArea ( x , y , area ) then
68775: LD_VAR 0 5
68779: PPUSH
68780: LD_VAR 0 6
68784: PPUSH
68785: LD_VAR 0 2
68789: PPUSH
68790: CALL_OW 309
68794: IFFALSE 68805
// ComStop ( unit ) ;
68796: LD_VAR 0 1
68800: PPUSH
68801: CALL_OW 141
// end ;
68805: LD_VAR 0 4
68809: RET
// export function Abs ( value ) ; begin
68810: LD_INT 0
68812: PPUSH
// result := value ;
68813: LD_ADDR_VAR 0 2
68817: PUSH
68818: LD_VAR 0 1
68822: ST_TO_ADDR
// if value < 0 then
68823: LD_VAR 0 1
68827: PUSH
68828: LD_INT 0
68830: LESS
68831: IFFALSE 68848
// result := value * - 1 ;
68833: LD_ADDR_VAR 0 2
68837: PUSH
68838: LD_VAR 0 1
68842: PUSH
68843: LD_INT 1
68845: NEG
68846: MUL
68847: ST_TO_ADDR
// end ;
68848: LD_VAR 0 2
68852: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68853: LD_INT 0
68855: PPUSH
68856: PPUSH
68857: PPUSH
68858: PPUSH
68859: PPUSH
68860: PPUSH
68861: PPUSH
68862: PPUSH
// if not unit or not building then
68863: LD_VAR 0 1
68867: NOT
68868: PUSH
68869: LD_VAR 0 2
68873: NOT
68874: OR
68875: IFFALSE 68879
// exit ;
68877: GO 69105
// x := GetX ( building ) ;
68879: LD_ADDR_VAR 0 4
68883: PUSH
68884: LD_VAR 0 2
68888: PPUSH
68889: CALL_OW 250
68893: ST_TO_ADDR
// y := GetY ( building ) ;
68894: LD_ADDR_VAR 0 6
68898: PUSH
68899: LD_VAR 0 2
68903: PPUSH
68904: CALL_OW 251
68908: ST_TO_ADDR
// d := GetDir ( building ) ;
68909: LD_ADDR_VAR 0 8
68913: PUSH
68914: LD_VAR 0 2
68918: PPUSH
68919: CALL_OW 254
68923: ST_TO_ADDR
// r := 4 ;
68924: LD_ADDR_VAR 0 9
68928: PUSH
68929: LD_INT 4
68931: ST_TO_ADDR
// for i := 1 to 5 do
68932: LD_ADDR_VAR 0 10
68936: PUSH
68937: DOUBLE
68938: LD_INT 1
68940: DEC
68941: ST_TO_ADDR
68942: LD_INT 5
68944: PUSH
68945: FOR_TO
68946: IFFALSE 69103
// begin _x := ShiftX ( x , d , r + i ) ;
68948: LD_ADDR_VAR 0 5
68952: PUSH
68953: LD_VAR 0 4
68957: PPUSH
68958: LD_VAR 0 8
68962: PPUSH
68963: LD_VAR 0 9
68967: PUSH
68968: LD_VAR 0 10
68972: PLUS
68973: PPUSH
68974: CALL_OW 272
68978: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68979: LD_ADDR_VAR 0 7
68983: PUSH
68984: LD_VAR 0 6
68988: PPUSH
68989: LD_VAR 0 8
68993: PPUSH
68994: LD_VAR 0 9
68998: PUSH
68999: LD_VAR 0 10
69003: PLUS
69004: PPUSH
69005: CALL_OW 273
69009: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69010: LD_VAR 0 5
69014: PPUSH
69015: LD_VAR 0 7
69019: PPUSH
69020: CALL_OW 488
69024: PUSH
69025: LD_VAR 0 5
69029: PPUSH
69030: LD_VAR 0 7
69034: PPUSH
69035: CALL_OW 428
69039: PPUSH
69040: CALL_OW 247
69044: PUSH
69045: LD_INT 3
69047: PUSH
69048: LD_INT 2
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: IN
69055: NOT
69056: AND
69057: IFFALSE 69101
// begin ComMoveXY ( unit , _x , _y ) ;
69059: LD_VAR 0 1
69063: PPUSH
69064: LD_VAR 0 5
69068: PPUSH
69069: LD_VAR 0 7
69073: PPUSH
69074: CALL_OW 111
// result := [ _x , _y ] ;
69078: LD_ADDR_VAR 0 3
69082: PUSH
69083: LD_VAR 0 5
69087: PUSH
69088: LD_VAR 0 7
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: ST_TO_ADDR
// exit ;
69097: POP
69098: POP
69099: GO 69105
// end ; end ;
69101: GO 68945
69103: POP
69104: POP
// end ;
69105: LD_VAR 0 3
69109: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69110: LD_INT 0
69112: PPUSH
69113: PPUSH
69114: PPUSH
// result := 0 ;
69115: LD_ADDR_VAR 0 3
69119: PUSH
69120: LD_INT 0
69122: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69123: LD_VAR 0 1
69127: PUSH
69128: LD_INT 0
69130: LESS
69131: PUSH
69132: LD_VAR 0 1
69136: PUSH
69137: LD_INT 8
69139: GREATER
69140: OR
69141: PUSH
69142: LD_VAR 0 2
69146: PUSH
69147: LD_INT 0
69149: LESS
69150: OR
69151: PUSH
69152: LD_VAR 0 2
69156: PUSH
69157: LD_INT 8
69159: GREATER
69160: OR
69161: IFFALSE 69165
// exit ;
69163: GO 69240
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69165: LD_ADDR_VAR 0 4
69169: PUSH
69170: LD_INT 22
69172: PUSH
69173: LD_VAR 0 2
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PPUSH
69182: CALL_OW 69
69186: PUSH
69187: FOR_IN
69188: IFFALSE 69238
// begin un := UnitShoot ( i ) ;
69190: LD_ADDR_VAR 0 5
69194: PUSH
69195: LD_VAR 0 4
69199: PPUSH
69200: CALL_OW 504
69204: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69205: LD_VAR 0 5
69209: PPUSH
69210: CALL_OW 255
69214: PUSH
69215: LD_VAR 0 1
69219: EQUAL
69220: IFFALSE 69236
// begin result := un ;
69222: LD_ADDR_VAR 0 3
69226: PUSH
69227: LD_VAR 0 5
69231: ST_TO_ADDR
// exit ;
69232: POP
69233: POP
69234: GO 69240
// end ; end ;
69236: GO 69187
69238: POP
69239: POP
// end ;
69240: LD_VAR 0 3
69244: RET
// export function GetCargoBay ( units ) ; begin
69245: LD_INT 0
69247: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69248: LD_ADDR_VAR 0 2
69252: PUSH
69253: LD_VAR 0 1
69257: PPUSH
69258: LD_INT 2
69260: PUSH
69261: LD_INT 34
69263: PUSH
69264: LD_INT 12
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 34
69273: PUSH
69274: LD_INT 51
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 34
69283: PUSH
69284: LD_INT 32
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: LD_INT 34
69293: PUSH
69294: LD_INT 89
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: PPUSH
69308: CALL_OW 72
69312: ST_TO_ADDR
// end ;
69313: LD_VAR 0 2
69317: RET
// export function Negate ( value ) ; begin
69318: LD_INT 0
69320: PPUSH
// result := not value ;
69321: LD_ADDR_VAR 0 2
69325: PUSH
69326: LD_VAR 0 1
69330: NOT
69331: ST_TO_ADDR
// end ;
69332: LD_VAR 0 2
69336: RET
// export function Inc ( value ) ; begin
69337: LD_INT 0
69339: PPUSH
// result := value + 1 ;
69340: LD_ADDR_VAR 0 2
69344: PUSH
69345: LD_VAR 0 1
69349: PUSH
69350: LD_INT 1
69352: PLUS
69353: ST_TO_ADDR
// end ;
69354: LD_VAR 0 2
69358: RET
// export function Dec ( value ) ; begin
69359: LD_INT 0
69361: PPUSH
// result := value - 1 ;
69362: LD_ADDR_VAR 0 2
69366: PUSH
69367: LD_VAR 0 1
69371: PUSH
69372: LD_INT 1
69374: MINUS
69375: ST_TO_ADDR
// end ;
69376: LD_VAR 0 2
69380: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69381: LD_INT 0
69383: PPUSH
69384: PPUSH
69385: PPUSH
69386: PPUSH
69387: PPUSH
69388: PPUSH
69389: PPUSH
69390: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69391: LD_VAR 0 1
69395: PPUSH
69396: LD_VAR 0 2
69400: PPUSH
69401: CALL_OW 488
69405: NOT
69406: PUSH
69407: LD_VAR 0 3
69411: PPUSH
69412: LD_VAR 0 4
69416: PPUSH
69417: CALL_OW 488
69421: NOT
69422: OR
69423: IFFALSE 69436
// begin result := - 1 ;
69425: LD_ADDR_VAR 0 5
69429: PUSH
69430: LD_INT 1
69432: NEG
69433: ST_TO_ADDR
// exit ;
69434: GO 69671
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69436: LD_ADDR_VAR 0 12
69440: PUSH
69441: LD_VAR 0 1
69445: PPUSH
69446: LD_VAR 0 2
69450: PPUSH
69451: LD_VAR 0 3
69455: PPUSH
69456: LD_VAR 0 4
69460: PPUSH
69461: CALL 68521 0 4
69465: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69466: LD_ADDR_VAR 0 11
69470: PUSH
69471: LD_VAR 0 1
69475: PPUSH
69476: LD_VAR 0 2
69480: PPUSH
69481: LD_VAR 0 12
69485: PUSH
69486: LD_INT 1
69488: ARRAY
69489: PPUSH
69490: LD_VAR 0 12
69494: PUSH
69495: LD_INT 2
69497: ARRAY
69498: PPUSH
69499: CALL_OW 298
69503: ST_TO_ADDR
// distance := 9999 ;
69504: LD_ADDR_VAR 0 10
69508: PUSH
69509: LD_INT 9999
69511: ST_TO_ADDR
// for i := 0 to 5 do
69512: LD_ADDR_VAR 0 6
69516: PUSH
69517: DOUBLE
69518: LD_INT 0
69520: DEC
69521: ST_TO_ADDR
69522: LD_INT 5
69524: PUSH
69525: FOR_TO
69526: IFFALSE 69669
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69528: LD_ADDR_VAR 0 7
69532: PUSH
69533: LD_VAR 0 1
69537: PPUSH
69538: LD_VAR 0 6
69542: PPUSH
69543: LD_VAR 0 11
69547: PPUSH
69548: CALL_OW 272
69552: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69553: LD_ADDR_VAR 0 8
69557: PUSH
69558: LD_VAR 0 2
69562: PPUSH
69563: LD_VAR 0 6
69567: PPUSH
69568: LD_VAR 0 11
69572: PPUSH
69573: CALL_OW 273
69577: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69578: LD_VAR 0 7
69582: PPUSH
69583: LD_VAR 0 8
69587: PPUSH
69588: CALL_OW 488
69592: NOT
69593: IFFALSE 69597
// continue ;
69595: GO 69525
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69597: LD_ADDR_VAR 0 9
69601: PUSH
69602: LD_VAR 0 12
69606: PUSH
69607: LD_INT 1
69609: ARRAY
69610: PPUSH
69611: LD_VAR 0 12
69615: PUSH
69616: LD_INT 2
69618: ARRAY
69619: PPUSH
69620: LD_VAR 0 7
69624: PPUSH
69625: LD_VAR 0 8
69629: PPUSH
69630: CALL_OW 298
69634: ST_TO_ADDR
// if tmp < distance then
69635: LD_VAR 0 9
69639: PUSH
69640: LD_VAR 0 10
69644: LESS
69645: IFFALSE 69667
// begin result := i ;
69647: LD_ADDR_VAR 0 5
69651: PUSH
69652: LD_VAR 0 6
69656: ST_TO_ADDR
// distance := tmp ;
69657: LD_ADDR_VAR 0 10
69661: PUSH
69662: LD_VAR 0 9
69666: ST_TO_ADDR
// end ; end ;
69667: GO 69525
69669: POP
69670: POP
// end ;
69671: LD_VAR 0 5
69675: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69676: LD_INT 0
69678: PPUSH
69679: PPUSH
// if not driver or not IsInUnit ( driver ) then
69680: LD_VAR 0 1
69684: NOT
69685: PUSH
69686: LD_VAR 0 1
69690: PPUSH
69691: CALL_OW 310
69695: NOT
69696: OR
69697: IFFALSE 69701
// exit ;
69699: GO 69791
// vehicle := IsInUnit ( driver ) ;
69701: LD_ADDR_VAR 0 3
69705: PUSH
69706: LD_VAR 0 1
69710: PPUSH
69711: CALL_OW 310
69715: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69716: LD_VAR 0 1
69720: PPUSH
69721: LD_STRING \
69723: PUSH
69724: LD_INT 0
69726: PUSH
69727: LD_INT 0
69729: PUSH
69730: LD_INT 0
69732: PUSH
69733: LD_INT 0
69735: PUSH
69736: LD_INT 0
69738: PUSH
69739: LD_INT 0
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: PUSH
69751: LD_STRING E
69753: PUSH
69754: LD_INT 0
69756: PUSH
69757: LD_INT 0
69759: PUSH
69760: LD_VAR 0 3
69764: PUSH
69765: LD_INT 0
69767: PUSH
69768: LD_INT 0
69770: PUSH
69771: LD_INT 0
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PPUSH
69787: CALL_OW 446
// end ;
69791: LD_VAR 0 2
69795: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69796: LD_INT 0
69798: PPUSH
69799: PPUSH
// if not driver or not IsInUnit ( driver ) then
69800: LD_VAR 0 1
69804: NOT
69805: PUSH
69806: LD_VAR 0 1
69810: PPUSH
69811: CALL_OW 310
69815: NOT
69816: OR
69817: IFFALSE 69821
// exit ;
69819: GO 69911
// vehicle := IsInUnit ( driver ) ;
69821: LD_ADDR_VAR 0 3
69825: PUSH
69826: LD_VAR 0 1
69830: PPUSH
69831: CALL_OW 310
69835: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69836: LD_VAR 0 1
69840: PPUSH
69841: LD_STRING \
69843: PUSH
69844: LD_INT 0
69846: PUSH
69847: LD_INT 0
69849: PUSH
69850: LD_INT 0
69852: PUSH
69853: LD_INT 0
69855: PUSH
69856: LD_INT 0
69858: PUSH
69859: LD_INT 0
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: PUSH
69871: LD_STRING E
69873: PUSH
69874: LD_INT 0
69876: PUSH
69877: LD_INT 0
69879: PUSH
69880: LD_VAR 0 3
69884: PUSH
69885: LD_INT 0
69887: PUSH
69888: LD_INT 0
69890: PUSH
69891: LD_INT 0
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: LIST
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PPUSH
69907: CALL_OW 447
// end ;
69911: LD_VAR 0 2
69915: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69916: LD_INT 0
69918: PPUSH
69919: PPUSH
69920: PPUSH
// tmp := [ ] ;
69921: LD_ADDR_VAR 0 5
69925: PUSH
69926: EMPTY
69927: ST_TO_ADDR
// for i in units do
69928: LD_ADDR_VAR 0 4
69932: PUSH
69933: LD_VAR 0 1
69937: PUSH
69938: FOR_IN
69939: IFFALSE 69977
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69941: LD_ADDR_VAR 0 5
69945: PUSH
69946: LD_VAR 0 5
69950: PPUSH
69951: LD_VAR 0 5
69955: PUSH
69956: LD_INT 1
69958: PLUS
69959: PPUSH
69960: LD_VAR 0 4
69964: PPUSH
69965: CALL_OW 256
69969: PPUSH
69970: CALL_OW 2
69974: ST_TO_ADDR
69975: GO 69938
69977: POP
69978: POP
// if not tmp then
69979: LD_VAR 0 5
69983: NOT
69984: IFFALSE 69988
// exit ;
69986: GO 70036
// if asc then
69988: LD_VAR 0 2
69992: IFFALSE 70016
// result := SortListByListAsc ( units , tmp ) else
69994: LD_ADDR_VAR 0 3
69998: PUSH
69999: LD_VAR 0 1
70003: PPUSH
70004: LD_VAR 0 5
70008: PPUSH
70009: CALL_OW 76
70013: ST_TO_ADDR
70014: GO 70036
// result := SortListByListDesc ( units , tmp ) ;
70016: LD_ADDR_VAR 0 3
70020: PUSH
70021: LD_VAR 0 1
70025: PPUSH
70026: LD_VAR 0 5
70030: PPUSH
70031: CALL_OW 77
70035: ST_TO_ADDR
// end ;
70036: LD_VAR 0 3
70040: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
70041: LD_INT 0
70043: PPUSH
70044: PPUSH
// task := GetTaskList ( mech ) ;
70045: LD_ADDR_VAR 0 4
70049: PUSH
70050: LD_VAR 0 1
70054: PPUSH
70055: CALL_OW 437
70059: ST_TO_ADDR
// if not task then
70060: LD_VAR 0 4
70064: NOT
70065: IFFALSE 70069
// exit ;
70067: GO 70111
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
70069: LD_ADDR_VAR 0 3
70073: PUSH
70074: LD_VAR 0 4
70078: PUSH
70079: LD_INT 1
70081: ARRAY
70082: PUSH
70083: LD_INT 1
70085: ARRAY
70086: PUSH
70087: LD_STRING r
70089: EQUAL
70090: PUSH
70091: LD_VAR 0 4
70095: PUSH
70096: LD_INT 1
70098: ARRAY
70099: PUSH
70100: LD_INT 4
70102: ARRAY
70103: PUSH
70104: LD_VAR 0 2
70108: EQUAL
70109: AND
70110: ST_TO_ADDR
// end ;
70111: LD_VAR 0 3
70115: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
70116: LD_INT 0
70118: PPUSH
// SetDir ( unit , d ) ;
70119: LD_VAR 0 1
70123: PPUSH
70124: LD_VAR 0 4
70128: PPUSH
70129: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
70133: LD_ADDR_VAR 0 6
70137: PUSH
70138: LD_VAR 0 1
70142: PPUSH
70143: LD_VAR 0 2
70147: PPUSH
70148: LD_VAR 0 3
70152: PPUSH
70153: LD_VAR 0 5
70157: PPUSH
70158: CALL_OW 48
70162: ST_TO_ADDR
// end ;
70163: LD_VAR 0 6
70167: RET
// export function ToNaturalNumber ( number ) ; begin
70168: LD_INT 0
70170: PPUSH
// result := number div 1 ;
70171: LD_ADDR_VAR 0 2
70175: PUSH
70176: LD_VAR 0 1
70180: PUSH
70181: LD_INT 1
70183: DIV
70184: ST_TO_ADDR
// if number < 0 then
70185: LD_VAR 0 1
70189: PUSH
70190: LD_INT 0
70192: LESS
70193: IFFALSE 70203
// result := 0 ;
70195: LD_ADDR_VAR 0 2
70199: PUSH
70200: LD_INT 0
70202: ST_TO_ADDR
// end ;
70203: LD_VAR 0 2
70207: RET
// export function SortByClass ( units , class ) ; var un ; begin
70208: LD_INT 0
70210: PPUSH
70211: PPUSH
// if not units or not class then
70212: LD_VAR 0 1
70216: NOT
70217: PUSH
70218: LD_VAR 0 2
70222: NOT
70223: OR
70224: IFFALSE 70228
// exit ;
70226: GO 70323
// result := [ ] ;
70228: LD_ADDR_VAR 0 3
70232: PUSH
70233: EMPTY
70234: ST_TO_ADDR
// for un in units do
70235: LD_ADDR_VAR 0 4
70239: PUSH
70240: LD_VAR 0 1
70244: PUSH
70245: FOR_IN
70246: IFFALSE 70321
// if GetClass ( un ) = class then
70248: LD_VAR 0 4
70252: PPUSH
70253: CALL_OW 257
70257: PUSH
70258: LD_VAR 0 2
70262: EQUAL
70263: IFFALSE 70290
// result := Insert ( result , 1 , un ) else
70265: LD_ADDR_VAR 0 3
70269: PUSH
70270: LD_VAR 0 3
70274: PPUSH
70275: LD_INT 1
70277: PPUSH
70278: LD_VAR 0 4
70282: PPUSH
70283: CALL_OW 2
70287: ST_TO_ADDR
70288: GO 70319
// result := Replace ( result , result + 1 , un ) ;
70290: LD_ADDR_VAR 0 3
70294: PUSH
70295: LD_VAR 0 3
70299: PPUSH
70300: LD_VAR 0 3
70304: PUSH
70305: LD_INT 1
70307: PLUS
70308: PPUSH
70309: LD_VAR 0 4
70313: PPUSH
70314: CALL_OW 1
70318: ST_TO_ADDR
70319: GO 70245
70321: POP
70322: POP
// end ;
70323: LD_VAR 0 3
70327: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70328: LD_INT 0
70330: PPUSH
70331: PPUSH
70332: PPUSH
70333: PPUSH
70334: PPUSH
70335: PPUSH
70336: PPUSH
// result := [ ] ;
70337: LD_ADDR_VAR 0 4
70341: PUSH
70342: EMPTY
70343: ST_TO_ADDR
// if x - r < 0 then
70344: LD_VAR 0 1
70348: PUSH
70349: LD_VAR 0 3
70353: MINUS
70354: PUSH
70355: LD_INT 0
70357: LESS
70358: IFFALSE 70370
// min_x := 0 else
70360: LD_ADDR_VAR 0 8
70364: PUSH
70365: LD_INT 0
70367: ST_TO_ADDR
70368: GO 70386
// min_x := x - r ;
70370: LD_ADDR_VAR 0 8
70374: PUSH
70375: LD_VAR 0 1
70379: PUSH
70380: LD_VAR 0 3
70384: MINUS
70385: ST_TO_ADDR
// if y - r < 0 then
70386: LD_VAR 0 2
70390: PUSH
70391: LD_VAR 0 3
70395: MINUS
70396: PUSH
70397: LD_INT 0
70399: LESS
70400: IFFALSE 70412
// min_y := 0 else
70402: LD_ADDR_VAR 0 7
70406: PUSH
70407: LD_INT 0
70409: ST_TO_ADDR
70410: GO 70428
// min_y := y - r ;
70412: LD_ADDR_VAR 0 7
70416: PUSH
70417: LD_VAR 0 2
70421: PUSH
70422: LD_VAR 0 3
70426: MINUS
70427: ST_TO_ADDR
// max_x := x + r ;
70428: LD_ADDR_VAR 0 9
70432: PUSH
70433: LD_VAR 0 1
70437: PUSH
70438: LD_VAR 0 3
70442: PLUS
70443: ST_TO_ADDR
// max_y := y + r ;
70444: LD_ADDR_VAR 0 10
70448: PUSH
70449: LD_VAR 0 2
70453: PUSH
70454: LD_VAR 0 3
70458: PLUS
70459: ST_TO_ADDR
// for _x = min_x to max_x do
70460: LD_ADDR_VAR 0 5
70464: PUSH
70465: DOUBLE
70466: LD_VAR 0 8
70470: DEC
70471: ST_TO_ADDR
70472: LD_VAR 0 9
70476: PUSH
70477: FOR_TO
70478: IFFALSE 70579
// for _y = min_y to max_y do
70480: LD_ADDR_VAR 0 6
70484: PUSH
70485: DOUBLE
70486: LD_VAR 0 7
70490: DEC
70491: ST_TO_ADDR
70492: LD_VAR 0 10
70496: PUSH
70497: FOR_TO
70498: IFFALSE 70575
// begin if not ValidHex ( _x , _y ) then
70500: LD_VAR 0 5
70504: PPUSH
70505: LD_VAR 0 6
70509: PPUSH
70510: CALL_OW 488
70514: NOT
70515: IFFALSE 70519
// continue ;
70517: GO 70497
// if GetResourceTypeXY ( _x , _y ) then
70519: LD_VAR 0 5
70523: PPUSH
70524: LD_VAR 0 6
70528: PPUSH
70529: CALL_OW 283
70533: IFFALSE 70573
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70535: LD_ADDR_VAR 0 4
70539: PUSH
70540: LD_VAR 0 4
70544: PPUSH
70545: LD_VAR 0 4
70549: PUSH
70550: LD_INT 1
70552: PLUS
70553: PPUSH
70554: LD_VAR 0 5
70558: PUSH
70559: LD_VAR 0 6
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PPUSH
70568: CALL_OW 1
70572: ST_TO_ADDR
// end ;
70573: GO 70497
70575: POP
70576: POP
70577: GO 70477
70579: POP
70580: POP
// end ;
70581: LD_VAR 0 4
70585: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70586: LD_INT 0
70588: PPUSH
70589: PPUSH
70590: PPUSH
70591: PPUSH
70592: PPUSH
70593: PPUSH
70594: PPUSH
70595: PPUSH
// if not units then
70596: LD_VAR 0 1
70600: NOT
70601: IFFALSE 70605
// exit ;
70603: GO 71133
// result := UnitFilter ( units , [ f_ok ] ) ;
70605: LD_ADDR_VAR 0 3
70609: PUSH
70610: LD_VAR 0 1
70614: PPUSH
70615: LD_INT 50
70617: PUSH
70618: EMPTY
70619: LIST
70620: PPUSH
70621: CALL_OW 72
70625: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70626: LD_ADDR_VAR 0 8
70630: PUSH
70631: LD_VAR 0 1
70635: PUSH
70636: LD_INT 1
70638: ARRAY
70639: PPUSH
70640: CALL_OW 255
70644: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70645: LD_ADDR_VAR 0 10
70649: PUSH
70650: LD_INT 29
70652: PUSH
70653: LD_INT 91
70655: PUSH
70656: LD_INT 49
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: LIST
70663: ST_TO_ADDR
// if not result then
70664: LD_VAR 0 3
70668: NOT
70669: IFFALSE 70673
// exit ;
70671: GO 71133
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70673: LD_ADDR_VAR 0 5
70677: PUSH
70678: LD_INT 81
70680: PUSH
70681: LD_VAR 0 8
70685: PUSH
70686: EMPTY
70687: LIST
70688: LIST
70689: PPUSH
70690: CALL_OW 69
70694: ST_TO_ADDR
// for i in result do
70695: LD_ADDR_VAR 0 4
70699: PUSH
70700: LD_VAR 0 3
70704: PUSH
70705: FOR_IN
70706: IFFALSE 71131
// begin tag := GetTag ( i ) + 1 ;
70708: LD_ADDR_VAR 0 9
70712: PUSH
70713: LD_VAR 0 4
70717: PPUSH
70718: CALL_OW 110
70722: PUSH
70723: LD_INT 1
70725: PLUS
70726: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
70727: LD_ADDR_VAR 0 7
70731: PUSH
70732: LD_VAR 0 4
70736: PPUSH
70737: CALL_OW 250
70741: PPUSH
70742: LD_VAR 0 4
70746: PPUSH
70747: CALL_OW 251
70751: PPUSH
70752: LD_INT 4
70754: PPUSH
70755: CALL 70328 0 3
70759: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
70760: LD_VAR 0 4
70764: PPUSH
70765: CALL_OW 247
70769: PUSH
70770: LD_INT 2
70772: EQUAL
70773: PUSH
70774: LD_VAR 0 7
70778: PUSH
70779: LD_INT 2
70781: GREATER
70782: AND
70783: PUSH
70784: LD_VAR 0 4
70788: PPUSH
70789: CALL_OW 264
70793: PUSH
70794: LD_VAR 0 10
70798: IN
70799: NOT
70800: AND
70801: IFFALSE 70840
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70803: LD_VAR 0 4
70807: PPUSH
70808: LD_VAR 0 7
70812: PUSH
70813: LD_INT 1
70815: ARRAY
70816: PUSH
70817: LD_INT 1
70819: ARRAY
70820: PPUSH
70821: LD_VAR 0 7
70825: PUSH
70826: LD_INT 1
70828: ARRAY
70829: PUSH
70830: LD_INT 2
70832: ARRAY
70833: PPUSH
70834: CALL_OW 116
70838: GO 71129
// if path > tag then
70840: LD_VAR 0 2
70844: PUSH
70845: LD_VAR 0 9
70849: GREATER
70850: IFFALSE 71058
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
70852: LD_ADDR_VAR 0 6
70856: PUSH
70857: LD_VAR 0 5
70861: PPUSH
70862: LD_INT 91
70864: PUSH
70865: LD_VAR 0 4
70869: PUSH
70870: LD_INT 8
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: LIST
70877: PPUSH
70878: CALL_OW 72
70882: ST_TO_ADDR
// if nearEnemy then
70883: LD_VAR 0 6
70887: IFFALSE 70956
// begin if GetWeapon ( i ) = ru_time_lapser then
70889: LD_VAR 0 4
70893: PPUSH
70894: CALL_OW 264
70898: PUSH
70899: LD_INT 49
70901: EQUAL
70902: IFFALSE 70930
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70904: LD_VAR 0 4
70908: PPUSH
70909: LD_VAR 0 6
70913: PPUSH
70914: LD_VAR 0 4
70918: PPUSH
70919: CALL_OW 74
70923: PPUSH
70924: CALL_OW 112
70928: GO 70954
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70930: LD_VAR 0 4
70934: PPUSH
70935: LD_VAR 0 6
70939: PPUSH
70940: LD_VAR 0 4
70944: PPUSH
70945: CALL_OW 74
70949: PPUSH
70950: CALL 72204 0 2
// end else
70954: GO 71056
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70956: LD_VAR 0 4
70960: PPUSH
70961: LD_VAR 0 2
70965: PUSH
70966: LD_VAR 0 9
70970: ARRAY
70971: PUSH
70972: LD_INT 1
70974: ARRAY
70975: PPUSH
70976: LD_VAR 0 2
70980: PUSH
70981: LD_VAR 0 9
70985: ARRAY
70986: PUSH
70987: LD_INT 2
70989: ARRAY
70990: PPUSH
70991: CALL_OW 297
70995: PUSH
70996: LD_INT 6
70998: GREATER
70999: IFFALSE 71042
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
71001: LD_VAR 0 4
71005: PPUSH
71006: LD_VAR 0 2
71010: PUSH
71011: LD_VAR 0 9
71015: ARRAY
71016: PUSH
71017: LD_INT 1
71019: ARRAY
71020: PPUSH
71021: LD_VAR 0 2
71025: PUSH
71026: LD_VAR 0 9
71030: ARRAY
71031: PUSH
71032: LD_INT 2
71034: ARRAY
71035: PPUSH
71036: CALL_OW 114
71040: GO 71056
// SetTag ( i , tag ) ;
71042: LD_VAR 0 4
71046: PPUSH
71047: LD_VAR 0 9
71051: PPUSH
71052: CALL_OW 109
// end else
71056: GO 71129
// if enemy then
71058: LD_VAR 0 5
71062: IFFALSE 71129
// begin if GetWeapon ( i ) = ru_time_lapser then
71064: LD_VAR 0 4
71068: PPUSH
71069: CALL_OW 264
71073: PUSH
71074: LD_INT 49
71076: EQUAL
71077: IFFALSE 71105
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
71079: LD_VAR 0 4
71083: PPUSH
71084: LD_VAR 0 5
71088: PPUSH
71089: LD_VAR 0 4
71093: PPUSH
71094: CALL_OW 74
71098: PPUSH
71099: CALL_OW 112
71103: GO 71129
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
71105: LD_VAR 0 4
71109: PPUSH
71110: LD_VAR 0 5
71114: PPUSH
71115: LD_VAR 0 4
71119: PPUSH
71120: CALL_OW 74
71124: PPUSH
71125: CALL 72204 0 2
// end ; end ;
71129: GO 70705
71131: POP
71132: POP
// end ;
71133: LD_VAR 0 3
71137: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
71138: LD_INT 0
71140: PPUSH
71141: PPUSH
71142: PPUSH
// if not unit or IsInUnit ( unit ) then
71143: LD_VAR 0 1
71147: NOT
71148: PUSH
71149: LD_VAR 0 1
71153: PPUSH
71154: CALL_OW 310
71158: OR
71159: IFFALSE 71163
// exit ;
71161: GO 71254
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
71163: LD_ADDR_VAR 0 4
71167: PUSH
71168: LD_VAR 0 1
71172: PPUSH
71173: CALL_OW 250
71177: PPUSH
71178: LD_VAR 0 2
71182: PPUSH
71183: LD_INT 1
71185: PPUSH
71186: CALL_OW 272
71190: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71191: LD_ADDR_VAR 0 5
71195: PUSH
71196: LD_VAR 0 1
71200: PPUSH
71201: CALL_OW 251
71205: PPUSH
71206: LD_VAR 0 2
71210: PPUSH
71211: LD_INT 1
71213: PPUSH
71214: CALL_OW 273
71218: ST_TO_ADDR
// if ValidHex ( x , y ) then
71219: LD_VAR 0 4
71223: PPUSH
71224: LD_VAR 0 5
71228: PPUSH
71229: CALL_OW 488
71233: IFFALSE 71254
// ComTurnXY ( unit , x , y ) ;
71235: LD_VAR 0 1
71239: PPUSH
71240: LD_VAR 0 4
71244: PPUSH
71245: LD_VAR 0 5
71249: PPUSH
71250: CALL_OW 118
// end ;
71254: LD_VAR 0 3
71258: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71259: LD_INT 0
71261: PPUSH
71262: PPUSH
// result := false ;
71263: LD_ADDR_VAR 0 3
71267: PUSH
71268: LD_INT 0
71270: ST_TO_ADDR
// if not units then
71271: LD_VAR 0 2
71275: NOT
71276: IFFALSE 71280
// exit ;
71278: GO 71325
// for i in units do
71280: LD_ADDR_VAR 0 4
71284: PUSH
71285: LD_VAR 0 2
71289: PUSH
71290: FOR_IN
71291: IFFALSE 71323
// if See ( side , i ) then
71293: LD_VAR 0 1
71297: PPUSH
71298: LD_VAR 0 4
71302: PPUSH
71303: CALL_OW 292
71307: IFFALSE 71321
// begin result := true ;
71309: LD_ADDR_VAR 0 3
71313: PUSH
71314: LD_INT 1
71316: ST_TO_ADDR
// exit ;
71317: POP
71318: POP
71319: GO 71325
// end ;
71321: GO 71290
71323: POP
71324: POP
// end ;
71325: LD_VAR 0 3
71329: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71330: LD_INT 0
71332: PPUSH
71333: PPUSH
71334: PPUSH
71335: PPUSH
// if not unit or not points then
71336: LD_VAR 0 1
71340: NOT
71341: PUSH
71342: LD_VAR 0 2
71346: NOT
71347: OR
71348: IFFALSE 71352
// exit ;
71350: GO 71442
// dist := 99999 ;
71352: LD_ADDR_VAR 0 5
71356: PUSH
71357: LD_INT 99999
71359: ST_TO_ADDR
// for i in points do
71360: LD_ADDR_VAR 0 4
71364: PUSH
71365: LD_VAR 0 2
71369: PUSH
71370: FOR_IN
71371: IFFALSE 71440
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71373: LD_ADDR_VAR 0 6
71377: PUSH
71378: LD_VAR 0 1
71382: PPUSH
71383: LD_VAR 0 4
71387: PUSH
71388: LD_INT 1
71390: ARRAY
71391: PPUSH
71392: LD_VAR 0 4
71396: PUSH
71397: LD_INT 2
71399: ARRAY
71400: PPUSH
71401: CALL_OW 297
71405: ST_TO_ADDR
// if tmpDist < dist then
71406: LD_VAR 0 6
71410: PUSH
71411: LD_VAR 0 5
71415: LESS
71416: IFFALSE 71438
// begin result := i ;
71418: LD_ADDR_VAR 0 3
71422: PUSH
71423: LD_VAR 0 4
71427: ST_TO_ADDR
// dist := tmpDist ;
71428: LD_ADDR_VAR 0 5
71432: PUSH
71433: LD_VAR 0 6
71437: ST_TO_ADDR
// end ; end ;
71438: GO 71370
71440: POP
71441: POP
// end ;
71442: LD_VAR 0 3
71446: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71447: LD_INT 0
71449: PPUSH
// uc_side := side ;
71450: LD_ADDR_OWVAR 20
71454: PUSH
71455: LD_VAR 0 1
71459: ST_TO_ADDR
// uc_nation := 3 ;
71460: LD_ADDR_OWVAR 21
71464: PUSH
71465: LD_INT 3
71467: ST_TO_ADDR
// vc_chassis := 25 ;
71468: LD_ADDR_OWVAR 37
71472: PUSH
71473: LD_INT 25
71475: ST_TO_ADDR
// vc_engine := engine_siberite ;
71476: LD_ADDR_OWVAR 39
71480: PUSH
71481: LD_INT 3
71483: ST_TO_ADDR
// vc_control := control_computer ;
71484: LD_ADDR_OWVAR 38
71488: PUSH
71489: LD_INT 3
71491: ST_TO_ADDR
// vc_weapon := 59 ;
71492: LD_ADDR_OWVAR 40
71496: PUSH
71497: LD_INT 59
71499: ST_TO_ADDR
// result := CreateVehicle ;
71500: LD_ADDR_VAR 0 5
71504: PUSH
71505: CALL_OW 45
71509: ST_TO_ADDR
// SetDir ( result , d ) ;
71510: LD_VAR 0 5
71514: PPUSH
71515: LD_VAR 0 4
71519: PPUSH
71520: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71524: LD_VAR 0 5
71528: PPUSH
71529: LD_VAR 0 2
71533: PPUSH
71534: LD_VAR 0 3
71538: PPUSH
71539: LD_INT 0
71541: PPUSH
71542: CALL_OW 48
// end ;
71546: LD_VAR 0 5
71550: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71551: LD_INT 0
71553: PPUSH
71554: PPUSH
71555: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71556: LD_ADDR_VAR 0 2
71560: PUSH
71561: LD_INT 0
71563: PUSH
71564: LD_INT 0
71566: PUSH
71567: LD_INT 0
71569: PUSH
71570: LD_INT 0
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71579: LD_VAR 0 1
71583: NOT
71584: PUSH
71585: LD_VAR 0 1
71589: PPUSH
71590: CALL_OW 264
71594: PUSH
71595: LD_INT 12
71597: PUSH
71598: LD_INT 51
71600: PUSH
71601: LD_INT 32
71603: PUSH
71604: LD_INT 89
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: IN
71613: NOT
71614: OR
71615: IFFALSE 71619
// exit ;
71617: GO 71717
// for i := 1 to 3 do
71619: LD_ADDR_VAR 0 3
71623: PUSH
71624: DOUBLE
71625: LD_INT 1
71627: DEC
71628: ST_TO_ADDR
71629: LD_INT 3
71631: PUSH
71632: FOR_TO
71633: IFFALSE 71715
// begin tmp := GetCargo ( cargo , i ) ;
71635: LD_ADDR_VAR 0 4
71639: PUSH
71640: LD_VAR 0 1
71644: PPUSH
71645: LD_VAR 0 3
71649: PPUSH
71650: CALL_OW 289
71654: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71655: LD_ADDR_VAR 0 2
71659: PUSH
71660: LD_VAR 0 2
71664: PPUSH
71665: LD_VAR 0 3
71669: PPUSH
71670: LD_VAR 0 4
71674: PPUSH
71675: CALL_OW 1
71679: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71680: LD_ADDR_VAR 0 2
71684: PUSH
71685: LD_VAR 0 2
71689: PPUSH
71690: LD_INT 4
71692: PPUSH
71693: LD_VAR 0 2
71697: PUSH
71698: LD_INT 4
71700: ARRAY
71701: PUSH
71702: LD_VAR 0 4
71706: PLUS
71707: PPUSH
71708: CALL_OW 1
71712: ST_TO_ADDR
// end ;
71713: GO 71632
71715: POP
71716: POP
// end ;
71717: LD_VAR 0 2
71721: RET
// export function Length ( array ) ; begin
71722: LD_INT 0
71724: PPUSH
// result := array + 0 ;
71725: LD_ADDR_VAR 0 2
71729: PUSH
71730: LD_VAR 0 1
71734: PUSH
71735: LD_INT 0
71737: PLUS
71738: ST_TO_ADDR
// end ;
71739: LD_VAR 0 2
71743: RET
// export function PrepareArray ( array ) ; begin
71744: LD_INT 0
71746: PPUSH
// result := array diff 0 ;
71747: LD_ADDR_VAR 0 2
71751: PUSH
71752: LD_VAR 0 1
71756: PUSH
71757: LD_INT 0
71759: DIFF
71760: ST_TO_ADDR
// if not result [ 1 ] then
71761: LD_VAR 0 2
71765: PUSH
71766: LD_INT 1
71768: ARRAY
71769: NOT
71770: IFFALSE 71790
// result := Delete ( result , 1 ) ;
71772: LD_ADDR_VAR 0 2
71776: PUSH
71777: LD_VAR 0 2
71781: PPUSH
71782: LD_INT 1
71784: PPUSH
71785: CALL_OW 3
71789: ST_TO_ADDR
// end ;
71790: LD_VAR 0 2
71794: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
71795: LD_INT 0
71797: PPUSH
71798: PPUSH
71799: PPUSH
71800: PPUSH
// sibRocketRange := 25 ;
71801: LD_ADDR_VAR 0 6
71805: PUSH
71806: LD_INT 25
71808: ST_TO_ADDR
// result := false ;
71809: LD_ADDR_VAR 0 4
71813: PUSH
71814: LD_INT 0
71816: ST_TO_ADDR
// for i := 0 to 5 do
71817: LD_ADDR_VAR 0 5
71821: PUSH
71822: DOUBLE
71823: LD_INT 0
71825: DEC
71826: ST_TO_ADDR
71827: LD_INT 5
71829: PUSH
71830: FOR_TO
71831: IFFALSE 71898
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
71833: LD_VAR 0 1
71837: PPUSH
71838: LD_VAR 0 5
71842: PPUSH
71843: LD_VAR 0 6
71847: PPUSH
71848: CALL_OW 272
71852: PPUSH
71853: LD_VAR 0 2
71857: PPUSH
71858: LD_VAR 0 5
71862: PPUSH
71863: LD_VAR 0 6
71867: PPUSH
71868: CALL_OW 273
71872: PPUSH
71873: LD_VAR 0 3
71877: PPUSH
71878: CALL_OW 309
71882: IFFALSE 71896
// begin result := true ;
71884: LD_ADDR_VAR 0 4
71888: PUSH
71889: LD_INT 1
71891: ST_TO_ADDR
// exit ;
71892: POP
71893: POP
71894: GO 71900
// end ;
71896: GO 71830
71898: POP
71899: POP
// end ;
71900: LD_VAR 0 4
71904: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
71905: LD_INT 0
71907: PPUSH
71908: PPUSH
71909: PPUSH
// if btype = b_depot then
71910: LD_VAR 0 2
71914: PUSH
71915: LD_INT 0
71917: EQUAL
71918: IFFALSE 71930
// begin result := true ;
71920: LD_ADDR_VAR 0 3
71924: PUSH
71925: LD_INT 1
71927: ST_TO_ADDR
// exit ;
71928: GO 72046
// end ; pom := GetBase ( depot ) ;
71930: LD_ADDR_VAR 0 4
71934: PUSH
71935: LD_VAR 0 1
71939: PPUSH
71940: CALL_OW 274
71944: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
71945: LD_ADDR_VAR 0 5
71949: PUSH
71950: LD_VAR 0 2
71954: PPUSH
71955: LD_VAR 0 1
71959: PPUSH
71960: CALL_OW 248
71964: PPUSH
71965: CALL_OW 450
71969: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
71970: LD_ADDR_VAR 0 3
71974: PUSH
71975: LD_VAR 0 4
71979: PPUSH
71980: LD_INT 1
71982: PPUSH
71983: CALL_OW 275
71987: PUSH
71988: LD_VAR 0 5
71992: PUSH
71993: LD_INT 1
71995: ARRAY
71996: GREATEREQUAL
71997: PUSH
71998: LD_VAR 0 4
72002: PPUSH
72003: LD_INT 2
72005: PPUSH
72006: CALL_OW 275
72010: PUSH
72011: LD_VAR 0 5
72015: PUSH
72016: LD_INT 2
72018: ARRAY
72019: GREATEREQUAL
72020: AND
72021: PUSH
72022: LD_VAR 0 4
72026: PPUSH
72027: LD_INT 3
72029: PPUSH
72030: CALL_OW 275
72034: PUSH
72035: LD_VAR 0 5
72039: PUSH
72040: LD_INT 3
72042: ARRAY
72043: GREATEREQUAL
72044: AND
72045: ST_TO_ADDR
// end ;
72046: LD_VAR 0 3
72050: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
72051: LD_INT 0
72053: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
72054: LD_VAR 0 1
72058: PPUSH
72059: LD_VAR 0 2
72063: PPUSH
72064: LD_INT 0
72066: PPUSH
72067: LD_INT 0
72069: PPUSH
72070: LD_INT 1
72072: PPUSH
72073: LD_INT 0
72075: PPUSH
72076: CALL_OW 587
// end ;
72080: LD_VAR 0 3
72084: RET
// export function CenterOnNow ( unit ) ; begin
72085: LD_INT 0
72087: PPUSH
// result := IsInUnit ( unit ) ;
72088: LD_ADDR_VAR 0 2
72092: PUSH
72093: LD_VAR 0 1
72097: PPUSH
72098: CALL_OW 310
72102: ST_TO_ADDR
// if not result then
72103: LD_VAR 0 2
72107: NOT
72108: IFFALSE 72120
// result := unit ;
72110: LD_ADDR_VAR 0 2
72114: PUSH
72115: LD_VAR 0 1
72119: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
72120: LD_VAR 0 1
72124: PPUSH
72125: CALL_OW 87
// end ;
72129: LD_VAR 0 2
72133: RET
// export function ComMoveHex ( unit , hex ) ; begin
72134: LD_INT 0
72136: PPUSH
// if not hex then
72137: LD_VAR 0 2
72141: NOT
72142: IFFALSE 72146
// exit ;
72144: GO 72199
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
72146: LD_VAR 0 2
72150: PUSH
72151: LD_INT 1
72153: ARRAY
72154: PPUSH
72155: LD_VAR 0 2
72159: PUSH
72160: LD_INT 2
72162: ARRAY
72163: PPUSH
72164: CALL_OW 428
72168: IFFALSE 72172
// exit ;
72170: GO 72199
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
72172: LD_VAR 0 1
72176: PPUSH
72177: LD_VAR 0 2
72181: PUSH
72182: LD_INT 1
72184: ARRAY
72185: PPUSH
72186: LD_VAR 0 2
72190: PUSH
72191: LD_INT 2
72193: ARRAY
72194: PPUSH
72195: CALL_OW 111
// end ;
72199: LD_VAR 0 3
72203: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
72204: LD_INT 0
72206: PPUSH
72207: PPUSH
72208: PPUSH
// if not unit or not enemy then
72209: LD_VAR 0 1
72213: NOT
72214: PUSH
72215: LD_VAR 0 2
72219: NOT
72220: OR
72221: IFFALSE 72225
// exit ;
72223: GO 72349
// x := GetX ( enemy ) ;
72225: LD_ADDR_VAR 0 4
72229: PUSH
72230: LD_VAR 0 2
72234: PPUSH
72235: CALL_OW 250
72239: ST_TO_ADDR
// y := GetY ( enemy ) ;
72240: LD_ADDR_VAR 0 5
72244: PUSH
72245: LD_VAR 0 2
72249: PPUSH
72250: CALL_OW 251
72254: ST_TO_ADDR
// if ValidHex ( x , y ) then
72255: LD_VAR 0 4
72259: PPUSH
72260: LD_VAR 0 5
72264: PPUSH
72265: CALL_OW 488
72269: IFFALSE 72349
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
72271: LD_VAR 0 2
72275: PPUSH
72276: CALL_OW 247
72280: PUSH
72281: LD_INT 3
72283: PUSH
72284: LD_INT 2
72286: PUSH
72287: EMPTY
72288: LIST
72289: LIST
72290: IN
72291: PUSH
72292: LD_VAR 0 1
72296: PPUSH
72297: CALL_OW 255
72301: PPUSH
72302: LD_VAR 0 2
72306: PPUSH
72307: CALL_OW 292
72311: OR
72312: IFFALSE 72330
// ComAttackUnit ( unit , enemy ) else
72314: LD_VAR 0 1
72318: PPUSH
72319: LD_VAR 0 2
72323: PPUSH
72324: CALL_OW 115
72328: GO 72349
// ComAgressiveMove ( unit , x , y ) ;
72330: LD_VAR 0 1
72334: PPUSH
72335: LD_VAR 0 4
72339: PPUSH
72340: LD_VAR 0 5
72344: PPUSH
72345: CALL_OW 114
// end ;
72349: LD_VAR 0 3
72353: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
72354: LD_INT 0
72356: PPUSH
72357: PPUSH
72358: PPUSH
// list := AreaToList ( area , 0 ) ;
72359: LD_ADDR_VAR 0 5
72363: PUSH
72364: LD_VAR 0 1
72368: PPUSH
72369: LD_INT 0
72371: PPUSH
72372: CALL_OW 517
72376: ST_TO_ADDR
// if not list then
72377: LD_VAR 0 5
72381: NOT
72382: IFFALSE 72386
// exit ;
72384: GO 72516
// if all then
72386: LD_VAR 0 2
72390: IFFALSE 72478
// begin for i := 1 to list [ 1 ] do
72392: LD_ADDR_VAR 0 4
72396: PUSH
72397: DOUBLE
72398: LD_INT 1
72400: DEC
72401: ST_TO_ADDR
72402: LD_VAR 0 5
72406: PUSH
72407: LD_INT 1
72409: ARRAY
72410: PUSH
72411: FOR_TO
72412: IFFALSE 72474
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
72414: LD_ADDR_VAR 0 3
72418: PUSH
72419: LD_VAR 0 3
72423: PPUSH
72424: LD_VAR 0 3
72428: PUSH
72429: LD_INT 1
72431: PLUS
72432: PPUSH
72433: LD_VAR 0 5
72437: PUSH
72438: LD_INT 1
72440: ARRAY
72441: PUSH
72442: LD_VAR 0 4
72446: ARRAY
72447: PUSH
72448: LD_VAR 0 5
72452: PUSH
72453: LD_INT 2
72455: ARRAY
72456: PUSH
72457: LD_VAR 0 4
72461: ARRAY
72462: PUSH
72463: EMPTY
72464: LIST
72465: LIST
72466: PPUSH
72467: CALL_OW 1
72471: ST_TO_ADDR
72472: GO 72411
72474: POP
72475: POP
// exit ;
72476: GO 72516
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
72478: LD_ADDR_VAR 0 3
72482: PUSH
72483: LD_VAR 0 5
72487: PUSH
72488: LD_INT 1
72490: ARRAY
72491: PUSH
72492: LD_INT 1
72494: ARRAY
72495: PUSH
72496: LD_VAR 0 5
72500: PUSH
72501: LD_INT 2
72503: ARRAY
72504: PUSH
72505: LD_INT 1
72507: ARRAY
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: EMPTY
72514: LIST
72515: ST_TO_ADDR
// end ;
72516: LD_VAR 0 3
72520: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
72521: LD_INT 0
72523: PPUSH
72524: PPUSH
// list := AreaToList ( area , 0 ) ;
72525: LD_ADDR_VAR 0 4
72529: PUSH
72530: LD_VAR 0 1
72534: PPUSH
72535: LD_INT 0
72537: PPUSH
72538: CALL_OW 517
72542: ST_TO_ADDR
// if not list then
72543: LD_VAR 0 4
72547: NOT
72548: IFFALSE 72552
// exit ;
72550: GO 72593
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
72552: LD_ADDR_VAR 0 3
72556: PUSH
72557: LD_VAR 0 4
72561: PUSH
72562: LD_INT 1
72564: ARRAY
72565: PUSH
72566: LD_INT 1
72568: ARRAY
72569: PUSH
72570: LD_VAR 0 4
72574: PUSH
72575: LD_INT 2
72577: ARRAY
72578: PUSH
72579: LD_INT 1
72581: ARRAY
72582: PUSH
72583: LD_VAR 0 2
72587: PUSH
72588: EMPTY
72589: LIST
72590: LIST
72591: LIST
72592: ST_TO_ADDR
// end ;
72593: LD_VAR 0 3
72597: RET
// export function First ( array ) ; begin
72598: LD_INT 0
72600: PPUSH
// if not array then
72601: LD_VAR 0 1
72605: NOT
72606: IFFALSE 72610
// exit ;
72608: GO 72624
// result := array [ 1 ] ;
72610: LD_ADDR_VAR 0 2
72614: PUSH
72615: LD_VAR 0 1
72619: PUSH
72620: LD_INT 1
72622: ARRAY
72623: ST_TO_ADDR
// end ;
72624: LD_VAR 0 2
72628: RET
// export function Last ( array ) ; begin
72629: LD_INT 0
72631: PPUSH
// if not array then
72632: LD_VAR 0 1
72636: NOT
72637: IFFALSE 72641
// exit ;
72639: GO 72657
// result := array [ array ] ;
72641: LD_ADDR_VAR 0 2
72645: PUSH
72646: LD_VAR 0 1
72650: PUSH
72651: LD_VAR 0 1
72655: ARRAY
72656: ST_TO_ADDR
// end ;
72657: LD_VAR 0 2
72661: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
72662: LD_INT 0
72664: PPUSH
72665: PPUSH
// result := [ ] ;
72666: LD_ADDR_VAR 0 5
72670: PUSH
72671: EMPTY
72672: ST_TO_ADDR
// if not array then
72673: LD_VAR 0 1
72677: NOT
72678: IFFALSE 72682
// exit ;
72680: GO 72794
// for i := 1 to array do
72682: LD_ADDR_VAR 0 6
72686: PUSH
72687: DOUBLE
72688: LD_INT 1
72690: DEC
72691: ST_TO_ADDR
72692: LD_VAR 0 1
72696: PUSH
72697: FOR_TO
72698: IFFALSE 72792
// if array [ i ] [ index ] = value then
72700: LD_VAR 0 1
72704: PUSH
72705: LD_VAR 0 6
72709: ARRAY
72710: PUSH
72711: LD_VAR 0 2
72715: ARRAY
72716: PUSH
72717: LD_VAR 0 3
72721: EQUAL
72722: IFFALSE 72790
// begin if indexColumn then
72724: LD_VAR 0 4
72728: IFFALSE 72764
// result := Join ( result , array [ i ] [ indexColumn ] ) else
72730: LD_ADDR_VAR 0 5
72734: PUSH
72735: LD_VAR 0 5
72739: PPUSH
72740: LD_VAR 0 1
72744: PUSH
72745: LD_VAR 0 6
72749: ARRAY
72750: PUSH
72751: LD_VAR 0 4
72755: ARRAY
72756: PPUSH
72757: CALL 67976 0 2
72761: ST_TO_ADDR
72762: GO 72790
// result := Join ( result , array [ i ] ) ;
72764: LD_ADDR_VAR 0 5
72768: PUSH
72769: LD_VAR 0 5
72773: PPUSH
72774: LD_VAR 0 1
72778: PUSH
72779: LD_VAR 0 6
72783: ARRAY
72784: PPUSH
72785: CALL 67976 0 2
72789: ST_TO_ADDR
// end ;
72790: GO 72697
72792: POP
72793: POP
// end ;
72794: LD_VAR 0 5
72798: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
72799: LD_INT 0
72801: PPUSH
// if not vehicles or not parkingPoint then
72802: LD_VAR 0 1
72806: NOT
72807: PUSH
72808: LD_VAR 0 2
72812: NOT
72813: OR
72814: IFFALSE 72818
// exit ;
72816: GO 72916
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
72818: LD_ADDR_VAR 0 1
72822: PUSH
72823: LD_VAR 0 1
72827: PPUSH
72828: LD_INT 50
72830: PUSH
72831: EMPTY
72832: LIST
72833: PUSH
72834: LD_INT 3
72836: PUSH
72837: LD_INT 92
72839: PUSH
72840: LD_VAR 0 2
72844: PUSH
72845: LD_INT 1
72847: ARRAY
72848: PUSH
72849: LD_VAR 0 2
72853: PUSH
72854: LD_INT 2
72856: ARRAY
72857: PUSH
72858: LD_INT 8
72860: PUSH
72861: EMPTY
72862: LIST
72863: LIST
72864: LIST
72865: LIST
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PPUSH
72875: CALL_OW 72
72879: ST_TO_ADDR
// if not vehicles then
72880: LD_VAR 0 1
72884: NOT
72885: IFFALSE 72889
// exit ;
72887: GO 72916
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
72889: LD_VAR 0 1
72893: PPUSH
72894: LD_VAR 0 2
72898: PUSH
72899: LD_INT 1
72901: ARRAY
72902: PPUSH
72903: LD_VAR 0 2
72907: PUSH
72908: LD_INT 2
72910: ARRAY
72911: PPUSH
72912: CALL_OW 111
// end ;
72916: LD_VAR 0 3
72920: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
72921: LD_INT 0
72923: PPUSH
72924: PPUSH
72925: PPUSH
// if not side or not area then
72926: LD_VAR 0 1
72930: NOT
72931: PUSH
72932: LD_VAR 0 2
72936: NOT
72937: OR
72938: IFFALSE 72942
// exit ;
72940: GO 73061
// tmp := AreaToList ( area , 0 ) ;
72942: LD_ADDR_VAR 0 5
72946: PUSH
72947: LD_VAR 0 2
72951: PPUSH
72952: LD_INT 0
72954: PPUSH
72955: CALL_OW 517
72959: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
72960: LD_ADDR_VAR 0 4
72964: PUSH
72965: DOUBLE
72966: LD_INT 1
72968: DEC
72969: ST_TO_ADDR
72970: LD_VAR 0 5
72974: PUSH
72975: LD_INT 1
72977: ARRAY
72978: PUSH
72979: FOR_TO
72980: IFFALSE 73059
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
72982: LD_VAR 0 5
72986: PUSH
72987: LD_INT 1
72989: ARRAY
72990: PUSH
72991: LD_VAR 0 4
72995: ARRAY
72996: PPUSH
72997: LD_VAR 0 5
73001: PUSH
73002: LD_INT 2
73004: ARRAY
73005: PUSH
73006: LD_VAR 0 4
73010: ARRAY
73011: PPUSH
73012: CALL_OW 351
73016: IFFALSE 73057
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
73018: LD_VAR 0 5
73022: PUSH
73023: LD_INT 1
73025: ARRAY
73026: PUSH
73027: LD_VAR 0 4
73031: ARRAY
73032: PPUSH
73033: LD_VAR 0 5
73037: PUSH
73038: LD_INT 2
73040: ARRAY
73041: PUSH
73042: LD_VAR 0 4
73046: ARRAY
73047: PPUSH
73048: LD_VAR 0 1
73052: PPUSH
73053: CALL_OW 244
// end ;
73057: GO 72979
73059: POP
73060: POP
// end ; end_of_file
73061: LD_VAR 0 3
73065: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73066: LD_VAR 0 1
73070: PUSH
73071: LD_INT 200
73073: DOUBLE
73074: GREATEREQUAL
73075: IFFALSE 73083
73077: LD_INT 299
73079: DOUBLE
73080: LESSEQUAL
73081: IFTRUE 73085
73083: GO 73117
73085: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73086: LD_VAR 0 1
73090: PPUSH
73091: LD_VAR 0 2
73095: PPUSH
73096: LD_VAR 0 3
73100: PPUSH
73101: LD_VAR 0 4
73105: PPUSH
73106: LD_VAR 0 5
73110: PPUSH
73111: CALL 25482 0 5
73115: GO 73194
73117: LD_INT 300
73119: DOUBLE
73120: GREATEREQUAL
73121: IFFALSE 73129
73123: LD_INT 399
73125: DOUBLE
73126: LESSEQUAL
73127: IFTRUE 73131
73129: GO 73193
73131: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73132: LD_VAR 0 1
73136: PPUSH
73137: LD_VAR 0 2
73141: PPUSH
73142: LD_VAR 0 3
73146: PPUSH
73147: LD_VAR 0 4
73151: PPUSH
73152: LD_VAR 0 5
73156: PPUSH
73157: LD_VAR 0 6
73161: PPUSH
73162: LD_VAR 0 7
73166: PPUSH
73167: LD_VAR 0 8
73171: PPUSH
73172: LD_VAR 0 9
73176: PPUSH
73177: LD_VAR 0 10
73181: PPUSH
73182: LD_VAR 0 11
73186: PPUSH
73187: CALL 21390 0 11
73191: GO 73194
73193: POP
// end ;
73194: PPOPN 11
73196: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73197: LD_VAR 0 1
73201: PPUSH
73202: LD_VAR 0 2
73206: PPUSH
73207: LD_VAR 0 3
73211: PPUSH
73212: LD_VAR 0 4
73216: PPUSH
73217: LD_VAR 0 5
73221: PPUSH
73222: CALL 24867 0 5
// end ; end_of_file
73226: PPOPN 5
73228: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73229: LD_VAR 0 1
73233: PPUSH
73234: LD_VAR 0 2
73238: PPUSH
73239: LD_VAR 0 3
73243: PPUSH
73244: LD_VAR 0 4
73248: PPUSH
73249: LD_VAR 0 5
73253: PPUSH
73254: LD_VAR 0 6
73258: PPUSH
73259: CALL 9042 0 6
// end ;
73263: PPOPN 6
73265: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73266: LD_INT 0
73268: PPUSH
// begin if not units then
73269: LD_VAR 0 1
73273: NOT
73274: IFFALSE 73278
// exit ;
73276: GO 73278
// end ;
73278: PPOPN 7
73280: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73281: CALL 8929 0 0
// end ;
73285: PPOPN 1
73287: END
