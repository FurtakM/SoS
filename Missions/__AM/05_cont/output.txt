// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 87 0 0
// InitRestrictions ;
  19: CALL 215 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 33
// DebugMode ;
  29: CALL 296 0 0
// SpawnApeman ( apemanStartArea , 2 ) ;
  33: LD_INT 12
  35: PPUSH
  36: LD_INT 2
  38: PPUSH
  39: CALL 790 0 2
// SpawnApeman ( apemanArea , [ 10 , 8 , 7 , 6 ] [ Difficulty ] ) ;
  43: LD_INT 11
  45: PPUSH
  46: LD_INT 10
  48: PUSH
  49: LD_INT 8
  51: PUSH
  52: LD_INT 7
  54: PUSH
  55: LD_INT 6
  57: PUSH
  58: EMPTY
  59: LIST
  60: LIST
  61: LIST
  62: LIST
  63: PUSH
  64: LD_OWVAR 67
  68: ARRAY
  69: PPUSH
  70: CALL 790 0 2
// CreateNature ;
  74: CALL 523 0 0
// PrepareAmericans ;
  78: CALL 1389 0 0
// Action ;
  82: CALL 2325 0 0
// end ;
  86: END
// export debug ; export mission_prefix , mission_prefix_prev ; export deltaBuilded , denisArrives , Delta , radar_allowed , first_apeman_tamed , apeman_army , radar_researched , radar_builded ; export apeman_counter , arab_spotted , end_mission , apeKillCounter ; function Init ; begin
  87: LD_INT 0
  89: PPUSH
// debug := false ;
  90: LD_ADDR_EXP 1
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// mission_prefix := 05_ ;
  98: LD_ADDR_EXP 2
 102: PUSH
 103: LD_STRING 05_
 105: ST_TO_ADDR
// mission_prefix_prev := 05a_ ;
 106: LD_ADDR_EXP 3
 110: PUSH
 111: LD_STRING 05a_
 113: ST_TO_ADDR
// deltaBuilded := false ;
 114: LD_ADDR_EXP 4
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// denisArrives := false ;
 122: LD_ADDR_EXP 5
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// radar_allowed := false ;
 130: LD_ADDR_EXP 7
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// first_apeman_tamed := false ;
 138: LD_ADDR_EXP 8
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// arab_spotted := false ;
 146: LD_ADDR_EXP 13
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// end_mission := false ;
 154: LD_ADDR_EXP 14
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// apeman_army := false ;
 162: LD_ADDR_EXP 9
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// radar_researched := false ;
 170: LD_ADDR_EXP 10
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// radar_builded := false ;
 178: LD_ADDR_EXP 11
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// apeman_counter := 0 ;
 186: LD_ADDR_EXP 12
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// Delta := 0 ;
 194: LD_ADDR_EXP 6
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// apeKillCounter := 0 ;
 202: LD_ADDR_EXP 15
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// end ;
 210: LD_VAR 0 1
 214: RET
// function InitRestrictions ; begin
 215: LD_INT 0
 217: PPUSH
// SetRestrict ( b_lab_half , 1 , state_enabled ) ;
 218: LD_INT 7
 220: PPUSH
 221: LD_INT 1
 223: PPUSH
 224: LD_INT 1
 226: PPUSH
 227: CALL_OW 324
// SetRestrict ( b_lab_full , 1 , state_enabled ) ;
 231: LD_INT 8
 233: PPUSH
 234: LD_INT 1
 236: PPUSH
 237: LD_INT 1
 239: PPUSH
 240: CALL_OW 324
// SetRestrict ( b_lab_weapon , 1 , state_enabled ) ;
 244: LD_INT 10
 246: PPUSH
 247: LD_INT 1
 249: PPUSH
 250: LD_INT 1
 252: PPUSH
 253: CALL_OW 324
// SetTech ( tech_gatling , 1 , LoadVariable ( GatlingInGamma , 1 ) ) ;
 257: LD_INT 69
 259: PPUSH
 260: LD_INT 1
 262: PPUSH
 263: LD_STRING GatlingInGamma
 265: PPUSH
 266: LD_INT 1
 268: PPUSH
 269: CALL_OW 30
 273: PPUSH
 274: CALL_OW 322
// SetTech ( tech_weap1 , 1 , state_enabled ) ;
 278: LD_INT 51
 280: PPUSH
 281: LD_INT 1
 283: PPUSH
 284: LD_INT 1
 286: PPUSH
 287: CALL_OW 322
// end ;
 291: LD_VAR 0 1
 295: RET
// function DebugMode ; begin
 296: LD_INT 0
 298: PPUSH
// FogOff ( 1 ) ;
 299: LD_INT 1
 301: PPUSH
 302: CALL_OW 344
// Difficulty := 2 ;
 306: LD_ADDR_OWVAR 67
 310: PUSH
 311: LD_INT 2
 313: ST_TO_ADDR
// end ;
 314: LD_VAR 0 1
 318: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 0 ] ] ) >= 7 do
 319: LD_INT 22
 321: PUSH
 322: LD_INT 1
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PUSH
 329: LD_INT 23
 331: PUSH
 332: LD_INT 0
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PPUSH
 343: CALL_OW 69
 347: PUSH
 348: LD_INT 7
 350: GREATEREQUAL
 351: IFFALSE 363
 353: GO 355
 355: DISABLE
// SetAchievement ( ACH_TAME ) ;
 356: LD_STRING ACH_TAME
 358: PPUSH
 359: CALL_OW 543
 363: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_bweapon , us_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) do
 364: LD_INT 22
 366: PUSH
 367: LD_INT 1
 369: PUSH
 370: EMPTY
 371: LIST
 372: LIST
 373: PUSH
 374: LD_INT 35
 376: PUSH
 377: LD_INT 11
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: LD_INT 22
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: LD_INT 34
 405: PUSH
 406: LD_INT 11
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PPUSH
 417: CALL_OW 69
 421: AND
 422: IFFALSE 434
 424: GO 426
 426: DISABLE
// SetAchievement ( ACH_RADAR ) ; end_of_file
 427: LD_STRING ACH_RADAR
 429: PPUSH
 430: CALL_OW 543
 434: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 435: LD_INT 0
 437: PPUSH
// uc_side := side ;
 438: LD_ADDR_OWVAR 20
 442: PUSH
 443: LD_VAR 0 1
 447: ST_TO_ADDR
// uc_nation := nation ;
 448: LD_ADDR_OWVAR 21
 452: PUSH
 453: LD_VAR 0 2
 457: ST_TO_ADDR
// vc_chassis := chassis ;
 458: LD_ADDR_OWVAR 37
 462: PUSH
 463: LD_VAR 0 3
 467: ST_TO_ADDR
// vc_engine := engine ;
 468: LD_ADDR_OWVAR 39
 472: PUSH
 473: LD_VAR 0 4
 477: ST_TO_ADDR
// vc_control := control ;
 478: LD_ADDR_OWVAR 38
 482: PUSH
 483: LD_VAR 0 5
 487: ST_TO_ADDR
// vc_weapon := weapon ;
 488: LD_ADDR_OWVAR 40
 492: PUSH
 493: LD_VAR 0 6
 497: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 498: LD_ADDR_OWVAR 41
 502: PUSH
 503: LD_VAR 0 7
 507: ST_TO_ADDR
// result := CreateVehicle ;
 508: LD_ADDR_VAR 0 8
 512: PUSH
 513: CALL_OW 45
 517: ST_TO_ADDR
// end ;
 518: LD_VAR 0 8
 522: RET
// export function CreateNature ; var i ; begin
 523: LD_INT 0
 525: PPUSH
 526: PPUSH
// for i := 1 to 4 do
 527: LD_ADDR_VAR 0 2
 531: PUSH
 532: DOUBLE
 533: LD_INT 1
 535: DEC
 536: ST_TO_ADDR
 537: LD_INT 4
 539: PUSH
 540: FOR_TO
 541: IFFALSE 564
// begin PrepareFrog ( ) ;
 543: CALL 63450 0 0
// PlaceUnitArea ( CreateHuman , swampArea , false ) ;
 547: CALL_OW 44
 551: PPUSH
 552: LD_INT 17
 554: PPUSH
 555: LD_INT 0
 557: PPUSH
 558: CALL_OW 49
// end ;
 562: GO 540
 564: POP
 565: POP
// for i := 1 to 6 do
 566: LD_ADDR_VAR 0 2
 570: PUSH
 571: DOUBLE
 572: LD_INT 1
 574: DEC
 575: ST_TO_ADDR
 576: LD_INT 6
 578: PUSH
 579: FOR_TO
 580: IFFALSE 603
// begin PrepareBird ( ) ;
 582: CALL 63530 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 586: CALL_OW 44
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: LD_INT 0
 596: PPUSH
 597: CALL_OW 49
// end ;
 601: GO 579
 603: POP
 604: POP
// for i := 1 to 11 do
 605: LD_ADDR_VAR 0 2
 609: PUSH
 610: DOUBLE
 611: LD_INT 1
 613: DEC
 614: ST_TO_ADDR
 615: LD_INT 11
 617: PUSH
 618: FOR_TO
 619: IFFALSE 642
// begin PrepareEnchidna ( ) ;
 621: CALL 63410 0 0
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 625: CALL_OW 44
 629: PPUSH
 630: LD_INT 1
 632: PPUSH
 633: LD_INT 0
 635: PPUSH
 636: CALL_OW 49
// end ;
 640: GO 618
 642: POP
 643: POP
// for i := 1 to 3 do
 644: LD_ADDR_VAR 0 2
 648: PUSH
 649: DOUBLE
 650: LD_INT 1
 652: DEC
 653: ST_TO_ADDR
 654: LD_INT 3
 656: PUSH
 657: FOR_TO
 658: IFFALSE 684
// begin PrepareTiger ( 10 ) ;
 660: LD_INT 10
 662: PPUSH
 663: CALL 63349 0 1
// PlaceUnitArea ( CreateHuman , forest , false ) ;
 667: CALL_OW 44
 671: PPUSH
 672: LD_INT 1
 674: PPUSH
 675: LD_INT 0
 677: PPUSH
 678: CALL_OW 49
// end ;
 682: GO 657
 684: POP
 685: POP
// PrepareMastodont ( ) ;
 686: CALL 63610 0 0
// PlaceUnitArea ( CreateVehicle , mastodontArea , false ) ;
 690: CALL_OW 45
 694: PPUSH
 695: LD_INT 18
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 49
// end ;
 705: LD_VAR 0 1
 709: RET
// export function SayX ( units , ident ) ; var i ; begin
 710: LD_INT 0
 712: PPUSH
 713: PPUSH
// result := false ;
 714: LD_ADDR_VAR 0 3
 718: PUSH
 719: LD_INT 0
 721: ST_TO_ADDR
// if not units then
 722: LD_VAR 0 1
 726: NOT
 727: IFFALSE 731
// exit ;
 729: GO 785
// for i in units do
 731: LD_ADDR_VAR 0 4
 735: PUSH
 736: LD_VAR 0 1
 740: PUSH
 741: FOR_IN
 742: IFFALSE 783
// if IsOk ( i ) then
 744: LD_VAR 0 4
 748: PPUSH
 749: CALL_OW 302
 753: IFFALSE 781
// begin Say ( i , ident ) ;
 755: LD_VAR 0 4
 759: PPUSH
 760: LD_VAR 0 2
 764: PPUSH
 765: CALL_OW 88
// result := i ;
 769: LD_ADDR_VAR 0 3
 773: PUSH
 774: LD_VAR 0 4
 778: ST_TO_ADDR
// break ;
 779: GO 783
// end ;
 781: GO 741
 783: POP
 784: POP
// end ;
 785: LD_VAR 0 3
 789: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
 790: LD_INT 0
 792: PPUSH
 793: PPUSH
// InitUc ;
 794: CALL_OW 18
// InitHc ;
 798: CALL_OW 19
// uc_side := 0 ;
 802: LD_ADDR_OWVAR 20
 806: PUSH
 807: LD_INT 0
 809: ST_TO_ADDR
// uc_nation := 0 ;
 810: LD_ADDR_OWVAR 21
 814: PUSH
 815: LD_INT 0
 817: ST_TO_ADDR
// for i = 1 to amount do
 818: LD_ADDR_VAR 0 4
 822: PUSH
 823: DOUBLE
 824: LD_INT 1
 826: DEC
 827: ST_TO_ADDR
 828: LD_VAR 0 2
 832: PUSH
 833: FOR_TO
 834: IFFALSE 916
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
 836: LD_ADDR_OWVAR 29
 840: PUSH
 841: LD_INT 9
 843: PPUSH
 844: LD_INT 12
 846: PPUSH
 847: CALL_OW 12
 851: PUSH
 852: LD_INT 9
 854: PPUSH
 855: LD_INT 12
 857: PPUSH
 858: CALL_OW 12
 862: PUSH
 863: EMPTY
 864: LIST
 865: LIST
 866: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) ;
 867: LD_ADDR_OWVAR 35
 871: PUSH
 872: LD_INT 5
 874: NEG
 875: PPUSH
 876: LD_INT 5
 878: PPUSH
 879: CALL_OW 12
 883: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
 884: LD_INT 0
 886: PPUSH
 887: LD_INT 12
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
 897: CALL_OW 44
 901: PPUSH
 902: LD_VAR 0 1
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 49
// end ;
 914: GO 833
 916: POP
 917: POP
// InitHc ;
 918: CALL_OW 19
// end ;
 922: LD_VAR 0 3
 926: RET
// export function Attack ( unit , enemy_list ) ; var target , targets_list ; begin
 927: LD_INT 0
 929: PPUSH
 930: PPUSH
 931: PPUSH
// if not unit then
 932: LD_VAR 0 1
 936: NOT
 937: IFFALSE 941
// exit ;
 939: GO 1384
// if IsInUnit ( unit ) then
 941: LD_VAR 0 1
 945: PPUSH
 946: CALL_OW 310
 950: IFFALSE 967
// unit := IsDrivenBy ( unit ) ;
 952: LD_ADDR_VAR 0 1
 956: PUSH
 957: LD_VAR 0 1
 961: PPUSH
 962: CALL_OW 311
 966: ST_TO_ADDR
// targets_list := [ ] ;
 967: LD_ADDR_VAR 0 5
 971: PUSH
 972: EMPTY
 973: ST_TO_ADDR
// target := UnitFilter ( enemy_list , [ [ f_lives , 250 ] , [ f_not , [ f_weapon , us_cargo_bay ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 974: LD_ADDR_VAR 0 4
 978: PUSH
 979: LD_VAR 0 2
 983: PPUSH
 984: LD_INT 24
 986: PUSH
 987: LD_INT 250
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 3
 996: PUSH
 997: LD_INT 34
 999: PUSH
1000: LD_INT 12
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: LD_INT 21
1013: PUSH
1014: LD_INT 2
1016: PUSH
1017: EMPTY
1018: LIST
1019: LIST
1020: PUSH
1021: LD_INT 58
1023: PUSH
1024: EMPTY
1025: LIST
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: LIST
1032: PPUSH
1033: CALL_OW 72
1037: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( target , unit ) , unit ) < 11 and not IsInUnit ( unit ) then
1038: LD_VAR 0 4
1042: PPUSH
1043: LD_VAR 0 1
1047: PPUSH
1048: CALL_OW 74
1052: PPUSH
1053: LD_VAR 0 1
1057: PPUSH
1058: CALL_OW 296
1062: PUSH
1063: LD_INT 11
1065: LESS
1066: PUSH
1067: LD_VAR 0 1
1071: PPUSH
1072: CALL_OW 310
1076: NOT
1077: AND
1078: IFFALSE 1106
// begin ComEnterUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1080: LD_VAR 0 1
1084: PPUSH
1085: LD_VAR 0 4
1089: PPUSH
1090: LD_VAR 0 1
1094: PPUSH
1095: CALL_OW 74
1099: PPUSH
1100: CALL_OW 120
// exit ;
1104: GO 1384
// end ; targets_list := [ UnitFilter ( enemy_list , [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] ] ) , UnitFilter ( enemy_list , [ f_type , unit_vehicle ] ) , UnitFilter ( enemy_list , [ [ f_type , unit_building ] , [ f_not , [ f_empty ] ] ] ) , enemy_list ] ;
1106: LD_ADDR_VAR 0 5
1110: PUSH
1111: LD_VAR 0 2
1115: PPUSH
1116: LD_INT 21
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: LD_INT 3
1128: PUSH
1129: LD_INT 54
1131: PUSH
1132: EMPTY
1133: LIST
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PPUSH
1143: CALL_OW 72
1147: PUSH
1148: LD_VAR 0 2
1152: PPUSH
1153: LD_INT 21
1155: PUSH
1156: LD_INT 2
1158: PUSH
1159: EMPTY
1160: LIST
1161: LIST
1162: PPUSH
1163: CALL_OW 72
1167: PUSH
1168: LD_VAR 0 2
1172: PPUSH
1173: LD_INT 21
1175: PUSH
1176: LD_INT 3
1178: PUSH
1179: EMPTY
1180: LIST
1181: LIST
1182: PUSH
1183: LD_INT 3
1185: PUSH
1186: LD_INT 58
1188: PUSH
1189: EMPTY
1190: LIST
1191: PUSH
1192: EMPTY
1193: LIST
1194: LIST
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: PPUSH
1200: CALL_OW 72
1204: PUSH
1205: LD_VAR 0 2
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: LIST
1215: ST_TO_ADDR
// for target in targets_list do
1216: LD_ADDR_VAR 0 4
1220: PUSH
1221: LD_VAR 0 5
1225: PUSH
1226: FOR_IN
1227: IFFALSE 1382
// begin if target then
1229: LD_VAR 0 4
1233: IFFALSE 1380
// if GetTag ( unit ) = 11 and ( GetType ( NearestUnitToUnit ( target , unit ) ) = unit_building or GetWeapon ( NearestUnitToUnit ( target , unit ) ) = us_cargo_bay ) then
1235: LD_VAR 0 1
1239: PPUSH
1240: CALL_OW 110
1244: PUSH
1245: LD_INT 11
1247: EQUAL
1248: PUSH
1249: LD_VAR 0 4
1253: PPUSH
1254: LD_VAR 0 1
1258: PPUSH
1259: CALL_OW 74
1263: PPUSH
1264: CALL_OW 247
1268: PUSH
1269: LD_INT 3
1271: EQUAL
1272: PUSH
1273: LD_VAR 0 4
1277: PPUSH
1278: LD_VAR 0 1
1282: PPUSH
1283: CALL_OW 74
1287: PPUSH
1288: CALL_OW 264
1292: PUSH
1293: LD_INT 12
1295: EQUAL
1296: OR
1297: AND
1298: IFFALSE 1344
// begin ComPlaceDelayedCharge ( unit , 0 , 0 , NearestUnitToUnit ( target , unit ) ) ;
1300: LD_VAR 0 1
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: LD_INT 0
1310: PPUSH
1311: LD_VAR 0 4
1315: PPUSH
1316: LD_VAR 0 1
1320: PPUSH
1321: CALL_OW 74
1325: PPUSH
1326: CALL_OW 132
// SetTag ( unit , 0 ) ;
1330: LD_VAR 0 1
1334: PPUSH
1335: LD_INT 0
1337: PPUSH
1338: CALL_OW 109
// end else
1342: GO 1380
// if not HasTask ( unit ) then
1344: LD_VAR 0 1
1348: PPUSH
1349: CALL_OW 314
1353: NOT
1354: IFFALSE 1380
// ComAttackUnit ( unit , NearestUnitToUnit ( target , unit ) ) ;
1356: LD_VAR 0 1
1360: PPUSH
1361: LD_VAR 0 4
1365: PPUSH
1366: LD_VAR 0 1
1370: PPUSH
1371: CALL_OW 74
1375: PPUSH
1376: CALL_OW 115
// end ;
1380: GO 1226
1382: POP
1383: POP
// end ; end_of_file
1384: LD_VAR 0 3
1388: RET
// export JMM , Gladstone , Harrison , Denis , Brown , Donaldson , Lisa , Frank , Bobby , Cyrus , Mike ; export others ; export function PrepareAmericans ; var i , points , veh , tmp ; begin
1389: LD_INT 0
1391: PPUSH
1392: PPUSH
1393: PPUSH
1394: PPUSH
1395: PPUSH
// uc_nation := 1 ;
1396: LD_ADDR_OWVAR 21
1400: PUSH
1401: LD_INT 1
1403: ST_TO_ADDR
// uc_side := 4 ;
1404: LD_ADDR_OWVAR 20
1408: PUSH
1409: LD_INT 4
1411: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , false ,  ) ;
1412: LD_ADDR_EXP 19
1416: PUSH
1417: LD_STRING Denis
1419: PPUSH
1420: LD_INT 0
1422: PPUSH
1423: LD_STRING 
1425: PPUSH
1426: CALL 29271 0 3
1430: ST_TO_ADDR
// Harrison := PrepareUnit ( Harisson , false ,  ) ;
1431: LD_ADDR_EXP 18
1435: PUSH
1436: LD_STRING Harisson
1438: PPUSH
1439: LD_INT 0
1441: PPUSH
1442: LD_STRING 
1444: PPUSH
1445: CALL 29271 0 3
1449: ST_TO_ADDR
// uc_side := 1 ;
1450: LD_ADDR_OWVAR 20
1454: PUSH
1455: LD_INT 1
1457: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
1458: LD_ADDR_EXP 16
1462: PUSH
1463: LD_STRING JMM
1465: PPUSH
1466: LD_EXP 1
1470: NOT
1471: PPUSH
1472: LD_EXP 3
1476: PPUSH
1477: CALL 29271 0 3
1481: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , false , mission_prefix_prev ) ;
1482: LD_ADDR_EXP 17
1486: PUSH
1487: LD_STRING Gladstone
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: LD_EXP 3
1497: PPUSH
1498: CALL 29271 0 3
1502: ST_TO_ADDR
// if LoadVariable ( BrownInDelta , debug ) then
1503: LD_STRING BrownInDelta
1505: PPUSH
1506: LD_EXP 1
1510: PPUSH
1511: CALL_OW 30
1515: IFFALSE 1557
// begin Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
1517: LD_ADDR_EXP 20
1521: PUSH
1522: LD_STRING Brown
1524: PPUSH
1525: LD_EXP 1
1529: NOT
1530: PPUSH
1531: LD_EXP 3
1535: PPUSH
1536: CALL 29271 0 3
1540: ST_TO_ADDR
// tmp := tmp ^ Brown ;
1541: LD_ADDR_VAR 0 5
1545: PUSH
1546: LD_VAR 0 5
1550: PUSH
1551: LD_EXP 20
1555: ADD
1556: ST_TO_ADDR
// end ; if LoadVariable ( DonaldsonInDelta , debug ) then
1557: LD_STRING DonaldsonInDelta
1559: PPUSH
1560: LD_EXP 1
1564: PPUSH
1565: CALL_OW 30
1569: IFFALSE 1611
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
1571: LD_ADDR_EXP 21
1575: PUSH
1576: LD_STRING Donaldson
1578: PPUSH
1579: LD_EXP 1
1583: NOT
1584: PPUSH
1585: LD_EXP 3
1589: PPUSH
1590: CALL 29271 0 3
1594: ST_TO_ADDR
// tmp := tmp ^ Donaldson ;
1595: LD_ADDR_VAR 0 5
1599: PUSH
1600: LD_VAR 0 5
1604: PUSH
1605: LD_EXP 21
1609: ADD
1610: ST_TO_ADDR
// end ; if LoadVariable ( LisaInDelta , debug ) then
1611: LD_STRING LisaInDelta
1613: PPUSH
1614: LD_EXP 1
1618: PPUSH
1619: CALL_OW 30
1623: IFFALSE 1665
// begin Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
1625: LD_ADDR_EXP 22
1629: PUSH
1630: LD_STRING Lisa
1632: PPUSH
1633: LD_EXP 1
1637: NOT
1638: PPUSH
1639: LD_EXP 3
1643: PPUSH
1644: CALL 29271 0 3
1648: ST_TO_ADDR
// tmp := tmp ^ Lisa ;
1649: LD_ADDR_VAR 0 5
1653: PUSH
1654: LD_VAR 0 5
1658: PUSH
1659: LD_EXP 22
1663: ADD
1664: ST_TO_ADDR
// end ; if LoadVariable ( FrankInDelta , debug ) then
1665: LD_STRING FrankInDelta
1667: PPUSH
1668: LD_EXP 1
1672: PPUSH
1673: CALL_OW 30
1677: IFFALSE 1719
// begin Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1679: LD_ADDR_EXP 23
1683: PUSH
1684: LD_STRING Frank
1686: PPUSH
1687: LD_EXP 1
1691: NOT
1692: PPUSH
1693: LD_EXP 3
1697: PPUSH
1698: CALL 29271 0 3
1702: ST_TO_ADDR
// tmp := tmp ^ Frank ;
1703: LD_ADDR_VAR 0 5
1707: PUSH
1708: LD_VAR 0 5
1712: PUSH
1713: LD_EXP 23
1717: ADD
1718: ST_TO_ADDR
// end ; if LoadVariable ( BobbyInDelta , 0 ) then
1719: LD_STRING BobbyInDelta
1721: PPUSH
1722: LD_INT 0
1724: PPUSH
1725: CALL_OW 30
1729: IFFALSE 1771
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
1731: LD_ADDR_EXP 24
1735: PUSH
1736: LD_STRING Bobby
1738: PPUSH
1739: LD_EXP 1
1743: NOT
1744: PPUSH
1745: LD_EXP 3
1749: PPUSH
1750: CALL 29271 0 3
1754: ST_TO_ADDR
// tmp := tmp ^ Bobby ;
1755: LD_ADDR_VAR 0 5
1759: PUSH
1760: LD_VAR 0 5
1764: PUSH
1765: LD_EXP 24
1769: ADD
1770: ST_TO_ADDR
// end ; if LoadVariable ( CyrusInDelta , 0 ) then
1771: LD_STRING CyrusInDelta
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: CALL_OW 30
1781: IFFALSE 1823
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
1783: LD_ADDR_EXP 25
1787: PUSH
1788: LD_STRING Cyrus
1790: PPUSH
1791: LD_EXP 1
1795: NOT
1796: PPUSH
1797: LD_EXP 3
1801: PPUSH
1802: CALL 29271 0 3
1806: ST_TO_ADDR
// tmp := tmp ^ Cyrus ;
1807: LD_ADDR_VAR 0 5
1811: PUSH
1812: LD_VAR 0 5
1816: PUSH
1817: LD_EXP 25
1821: ADD
1822: ST_TO_ADDR
// end ; others := CreateCharacterSet ( othersDelta ) ;
1823: LD_ADDR_EXP 27
1827: PUSH
1828: LD_STRING othersDelta
1830: PPUSH
1831: CALL_OW 31
1835: ST_TO_ADDR
// if not others and debug then
1836: LD_EXP 27
1840: NOT
1841: PUSH
1842: LD_EXP 1
1846: AND
1847: IFFALSE 1912
// begin InitHc ;
1849: CALL_OW 19
// for i = 1 to 2 do
1853: LD_ADDR_VAR 0 2
1857: PUSH
1858: DOUBLE
1859: LD_INT 1
1861: DEC
1862: ST_TO_ADDR
1863: LD_INT 2
1865: PUSH
1866: FOR_TO
1867: IFFALSE 1910
// begin PrepareHuman ( false , i mod 4 + 1 , 3 ) ;
1869: LD_INT 0
1871: PPUSH
1872: LD_VAR 0 2
1876: PUSH
1877: LD_INT 4
1879: MOD
1880: PUSH
1881: LD_INT 1
1883: PLUS
1884: PPUSH
1885: LD_INT 3
1887: PPUSH
1888: CALL_OW 380
// others := others ^ CreateHuman ;
1892: LD_ADDR_EXP 27
1896: PUSH
1897: LD_EXP 27
1901: PUSH
1902: CALL_OW 44
1906: ADD
1907: ST_TO_ADDR
// end ;
1908: GO 1866
1910: POP
1911: POP
// end ; if others then
1912: LD_EXP 27
1916: IFFALSE 1934
// tmp := tmp ^ others ;
1918: LD_ADDR_VAR 0 5
1922: PUSH
1923: LD_VAR 0 5
1927: PUSH
1928: LD_EXP 27
1932: ADD
1933: ST_TO_ADDR
// points := [ [ 28 , 49 ] , [ 33 , 54 ] , [ 38 , 56 ] ] ;
1934: LD_ADDR_VAR 0 3
1938: PUSH
1939: LD_INT 28
1941: PUSH
1942: LD_INT 49
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: LD_INT 33
1951: PUSH
1952: LD_INT 54
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 38
1961: PUSH
1962: LD_INT 56
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: EMPTY
1970: LIST
1971: LIST
1972: LIST
1973: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_wheeled , engine_solar , control_manual , us_cargo_bay , 80 ) ;
1974: LD_ADDR_VAR 0 4
1978: PUSH
1979: LD_INT 1
1981: PPUSH
1982: LD_INT 1
1984: PPUSH
1985: LD_INT 2
1987: PPUSH
1988: LD_INT 2
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: LD_INT 12
1996: PPUSH
1997: LD_INT 80
1999: PPUSH
2000: CALL 435 0 7
2004: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2005: LD_VAR 0 4
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: CALL_OW 233
// PlaceUnitXY ( veh , points [ 1 ] [ 1 ] , points [ 1 ] [ 2 ] , false ) ;
2017: LD_VAR 0 4
2021: PPUSH
2022: LD_VAR 0 3
2026: PUSH
2027: LD_INT 1
2029: ARRAY
2030: PUSH
2031: LD_INT 1
2033: ARRAY
2034: PPUSH
2035: LD_VAR 0 3
2039: PUSH
2040: LD_INT 1
2042: ARRAY
2043: PUSH
2044: LD_INT 2
2046: ARRAY
2047: PPUSH
2048: LD_INT 0
2050: PPUSH
2051: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
2055: LD_VAR 0 4
2059: PPUSH
2060: LD_INT 1
2062: PPUSH
2063: LD_INT 100
2065: PPUSH
2066: CALL_OW 290
// PlaceHumanInUnit ( others [ 1 ] , veh ) ;
2070: LD_EXP 27
2074: PUSH
2075: LD_INT 1
2077: ARRAY
2078: PPUSH
2079: LD_VAR 0 4
2083: PPUSH
2084: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_machine_gun , 80 ) ;
2088: LD_ADDR_VAR 0 4
2092: PUSH
2093: LD_INT 1
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_INT 1
2101: PPUSH
2102: LD_INT 2
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: LD_INT 2
2110: PPUSH
2111: LD_INT 80
2113: PPUSH
2114: CALL 435 0 7
2118: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2119: LD_VAR 0 4
2123: PPUSH
2124: LD_INT 1
2126: PPUSH
2127: CALL_OW 233
// PlaceUnitXY ( veh , points [ 2 ] [ 1 ] , points [ 2 ] [ 2 ] , false ) ;
2131: LD_VAR 0 4
2135: PPUSH
2136: LD_VAR 0 3
2140: PUSH
2141: LD_INT 2
2143: ARRAY
2144: PUSH
2145: LD_INT 1
2147: ARRAY
2148: PPUSH
2149: LD_VAR 0 3
2153: PUSH
2154: LD_INT 2
2156: ARRAY
2157: PUSH
2158: LD_INT 2
2160: ARRAY
2161: PPUSH
2162: LD_INT 0
2164: PPUSH
2165: CALL_OW 48
// PlaceHumanInUnit ( Gladstone , veh ) ;
2169: LD_EXP 17
2173: PPUSH
2174: LD_VAR 0 4
2178: PPUSH
2179: CALL_OW 52
// veh := PrepareTank ( 1 , 1 , us_light_wheeled , engine_solar , control_manual , us_light_gun , 80 ) ;
2183: LD_ADDR_VAR 0 4
2187: PUSH
2188: LD_INT 1
2190: PPUSH
2191: LD_INT 1
2193: PPUSH
2194: LD_INT 1
2196: PPUSH
2197: LD_INT 2
2199: PPUSH
2200: LD_INT 1
2202: PPUSH
2203: LD_INT 3
2205: PPUSH
2206: LD_INT 80
2208: PPUSH
2209: CALL 435 0 7
2213: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2214: LD_VAR 0 4
2218: PPUSH
2219: LD_INT 1
2221: PPUSH
2222: CALL_OW 233
// PlaceUnitXY ( veh , points [ 3 ] [ 1 ] , points [ 3 ] [ 2 ] , false ) ;
2226: LD_VAR 0 4
2230: PPUSH
2231: LD_VAR 0 3
2235: PUSH
2236: LD_INT 3
2238: ARRAY
2239: PUSH
2240: LD_INT 1
2242: ARRAY
2243: PPUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 3
2251: ARRAY
2252: PUSH
2253: LD_INT 2
2255: ARRAY
2256: PPUSH
2257: LD_INT 0
2259: PPUSH
2260: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
2264: LD_EXP 16
2268: PPUSH
2269: LD_VAR 0 4
2273: PPUSH
2274: CALL_OW 52
// for i in tmp diff others [ 1 ] do
2278: LD_ADDR_VAR 0 2
2282: PUSH
2283: LD_VAR 0 5
2287: PUSH
2288: LD_EXP 27
2292: PUSH
2293: LD_INT 1
2295: ARRAY
2296: DIFF
2297: PUSH
2298: FOR_IN
2299: IFFALSE 2318
// PlaceUnitArea ( i , startArea , false ) ;
2301: LD_VAR 0 2
2305: PPUSH
2306: LD_INT 5
2308: PPUSH
2309: LD_INT 0
2311: PPUSH
2312: CALL_OW 49
2316: GO 2298
2318: POP
2319: POP
// end ; end_of_file
2320: LD_VAR 0 1
2324: RET
// export function Action ; var m ; begin
2325: LD_INT 0
2327: PPUSH
2328: PPUSH
// InGameOn ;
2329: CALL_OW 8
// CenterNowOnXY ( 28 , 51 ) ;
2333: LD_INT 28
2335: PPUSH
2336: LD_INT 51
2338: PPUSH
2339: CALL_OW 86
// Wait ( 3 ) ;
2343: LD_INT 3
2345: PPUSH
2346: CALL_OW 67
// Say ( JMM , D1d-JMM-1a ) ;
2350: LD_EXP 16
2354: PPUSH
2355: LD_STRING D1d-JMM-1a
2357: PPUSH
2358: CALL_OW 88
// SayRadio ( Harrison , D1d-Har-1 ) ;
2362: LD_EXP 18
2366: PPUSH
2367: LD_STRING D1d-Har-1
2369: PPUSH
2370: CALL_OW 94
// InGameOff ;
2374: CALL_OW 9
// SaveForQuickRestart ;
2378: CALL_OW 22
// ChangeMissionObjectives ( M1 ) ;
2382: LD_STRING M1
2384: PPUSH
2385: CALL_OW 337
// Wait ( 0 0$2 ) ;
2389: LD_INT 70
2391: PPUSH
2392: CALL_OW 67
// Say ( JMM , D2-JMM-1 ) ;
2396: LD_EXP 16
2400: PPUSH
2401: LD_STRING D2-JMM-1
2403: PPUSH
2404: CALL_OW 88
// Say ( Gladstone , D2-Glad-1 ) ;
2408: LD_EXP 17
2412: PPUSH
2413: LD_STRING D2-Glad-1
2415: PPUSH
2416: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2420: LD_EXP 16
2424: PPUSH
2425: LD_STRING D2-JMM-2
2427: PPUSH
2428: CALL_OW 88
// Say ( Gladstone , D2-Glad-2 ) ;
2432: LD_EXP 17
2436: PPUSH
2437: LD_STRING D2-Glad-2
2439: PPUSH
2440: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2444: LD_EXP 16
2448: PPUSH
2449: LD_STRING D2-JMM-3
2451: PPUSH
2452: CALL_OW 88
// Wait ( rand ( 0 0$30 , 1 1$00 ) ) ;
2456: LD_INT 1050
2458: PPUSH
2459: LD_INT 2100
2461: PPUSH
2462: CALL_OW 12
2466: PPUSH
2467: CALL_OW 67
// SetWeather ( 1 , 570 , 350 ) ;
2471: LD_INT 1
2473: PPUSH
2474: LD_INT 570
2476: PPUSH
2477: LD_INT 350
2479: PPUSH
2480: CALL_OW 550
// Wait ( rand ( 3 3$00 , 5 5$00 ) ) ;
2484: LD_INT 6300
2486: PPUSH
2487: LD_INT 10500
2489: PPUSH
2490: CALL_OW 12
2494: PPUSH
2495: CALL_OW 67
// SetWeather ( 0 , 570 , 350 ) ;
2499: LD_INT 0
2501: PPUSH
2502: LD_INT 570
2504: PPUSH
2505: LD_INT 350
2507: PPUSH
2508: CALL_OW 550
// end ;
2512: LD_VAR 0 1
2516: RET
// every 0 0$01 trigger FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) and not deltaBuilded do
2517: LD_INT 22
2519: PUSH
2520: LD_INT 1
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: PUSH
2527: LD_INT 3
2529: PUSH
2530: LD_INT 57
2532: PUSH
2533: EMPTY
2534: LIST
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: PUSH
2540: LD_INT 30
2542: PUSH
2543: LD_INT 0
2545: PUSH
2546: EMPTY
2547: LIST
2548: LIST
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: LIST
2554: PUSH
2555: EMPTY
2556: LIST
2557: PPUSH
2558: CALL_OW 69
2562: PUSH
2563: LD_EXP 4
2567: NOT
2568: AND
2569: IFFALSE 2582
2571: GO 2573
2573: DISABLE
// begin deltaBuilded := true ;
2574: LD_ADDR_EXP 4
2578: PUSH
2579: LD_INT 1
2581: ST_TO_ADDR
// end ;
2582: END
// every 0 0$01 trigger not Delta and deltaBuilded and FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) do
2583: LD_EXP 6
2587: NOT
2588: PUSH
2589: LD_EXP 4
2593: AND
2594: PUSH
2595: LD_INT 22
2597: PUSH
2598: LD_INT 1
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 3
2607: PUSH
2608: LD_INT 57
2610: PUSH
2611: EMPTY
2612: LIST
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: PUSH
2618: LD_INT 30
2620: PUSH
2621: LD_INT 0
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: PUSH
2628: EMPTY
2629: LIST
2630: LIST
2631: LIST
2632: PUSH
2633: EMPTY
2634: LIST
2635: PPUSH
2636: CALL_OW 69
2640: AND
2641: IFFALSE 2727
2643: GO 2645
2645: DISABLE
// begin enable ;
2646: ENABLE
// SetRestrict ( b_depot , 1 , state_disabled ) ;
2647: LD_INT 0
2649: PPUSH
2650: LD_INT 1
2652: PPUSH
2653: LD_INT 0
2655: PPUSH
2656: CALL_OW 324
// Delta := FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_btype , b_depot ] ] ] ) [ 1 ] ;
2660: LD_ADDR_EXP 6
2664: PUSH
2665: LD_INT 22
2667: PUSH
2668: LD_INT 1
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: PUSH
2675: LD_INT 3
2677: PUSH
2678: LD_INT 57
2680: PUSH
2681: EMPTY
2682: LIST
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PUSH
2688: LD_INT 30
2690: PUSH
2691: LD_INT 0
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: LIST
2702: PUSH
2703: EMPTY
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: PUSH
2711: LD_INT 1
2713: ARRAY
2714: ST_TO_ADDR
// SetBName ( Delta , Delta ) ;
2715: LD_EXP 6
2719: PPUSH
2720: LD_STRING Delta
2722: PPUSH
2723: CALL_OW 500
// end ;
2727: END
// every 0 0$2 trigger GetTech ( tech_ApeLang , 1 ) = state_researched and IsOk ( Gladstone ) do
2728: LD_INT 1
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: CALL_OW 321
2738: PUSH
2739: LD_INT 2
2741: EQUAL
2742: PUSH
2743: LD_EXP 17
2747: PPUSH
2748: CALL_OW 302
2752: AND
2753: IFFALSE 2814
2755: GO 2757
2757: DISABLE
// begin DialogueOn ;
2758: CALL_OW 6
// Say ( Gladstone , D3-Glad-1 ) ;
2762: LD_EXP 17
2766: PPUSH
2767: LD_STRING D3-Glad-1
2769: PPUSH
2770: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
2774: LD_EXP 16
2778: PPUSH
2779: LD_STRING D3-JMM-1
2781: PPUSH
2782: CALL_OW 88
// Say ( Gladstone , D3-Glad-2 ) ;
2786: LD_EXP 17
2790: PPUSH
2791: LD_STRING D3-Glad-2
2793: PPUSH
2794: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
2798: LD_EXP 16
2802: PPUSH
2803: LD_STRING D3-JMM-2
2805: PPUSH
2806: CALL_OW 88
// DialogueOff ;
2810: CALL_OW 7
// end ;
2814: END
// every 0 0$1 trigger GetTech ( tech_ApePsych , 1 ) = state_researched and ( IsOk ( Frank ) or ( IsOk ( Denis ) and GetSide ( Denis ) = 1 ) or UnitFilter ( others , [ f_sex , sex_male ] ) ) do var i , sol , ape , b ;
2815: LD_INT 2
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: CALL_OW 321
2825: PUSH
2826: LD_INT 2
2828: EQUAL
2829: PUSH
2830: LD_EXP 23
2834: PPUSH
2835: CALL_OW 302
2839: PUSH
2840: LD_EXP 19
2844: PPUSH
2845: CALL_OW 302
2849: PUSH
2850: LD_EXP 19
2854: PPUSH
2855: CALL_OW 255
2859: PUSH
2860: LD_INT 1
2862: EQUAL
2863: AND
2864: OR
2865: PUSH
2866: LD_EXP 27
2870: PPUSH
2871: LD_INT 26
2873: PUSH
2874: LD_INT 1
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PPUSH
2881: CALL_OW 72
2885: OR
2886: AND
2887: IFFALSE 3428
2889: GO 2891
2891: DISABLE
2892: LD_INT 0
2894: PPUSH
2895: PPUSH
2896: PPUSH
2897: PPUSH
// begin InGameOn ;
2898: CALL_OW 8
// DialogueOn ;
2902: CALL_OW 6
// if Frank then
2906: LD_EXP 23
2910: IFFALSE 2924
// Say ( Frank , D8a-Frank-1 ) ;
2912: LD_EXP 23
2916: PPUSH
2917: LD_STRING D8a-Frank-1
2919: PPUSH
2920: CALL_OW 88
// sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D8a-Sol1-1 ) ;
2924: LD_ADDR_VAR 0 2
2928: PUSH
2929: LD_EXP 27
2933: PPUSH
2934: LD_INT 26
2936: PUSH
2937: LD_INT 1
2939: PUSH
2940: EMPTY
2941: LIST
2942: LIST
2943: PPUSH
2944: CALL_OW 72
2948: PPUSH
2949: LD_STRING D8a-Sol1-1
2951: PPUSH
2952: CALL 710 0 2
2956: ST_TO_ADDR
// if Denis and GetSide ( Denis ) = 1 then
2957: LD_EXP 19
2961: PUSH
2962: LD_EXP 19
2966: PPUSH
2967: CALL_OW 255
2971: PUSH
2972: LD_INT 1
2974: EQUAL
2975: AND
2976: IFFALSE 2990
// Say ( Denis , D8a-Den-1 ) ;
2978: LD_EXP 19
2982: PPUSH
2983: LD_STRING D8a-Den-1
2985: PPUSH
2986: CALL_OW 88
// if sol or Denis or Frank then
2990: LD_VAR 0 2
2994: PUSH
2995: LD_EXP 19
2999: OR
3000: PUSH
3001: LD_EXP 23
3005: OR
3006: IFFALSE 3067
// begin SayX ( UnitFilter ( others , [ [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff sol , D8a-Sci1-1 ) ;
3008: LD_EXP 27
3012: PPUSH
3013: LD_INT 25
3015: PUSH
3016: LD_INT 4
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PUSH
3023: LD_INT 26
3025: PUSH
3026: LD_INT 1
3028: PUSH
3029: EMPTY
3030: LIST
3031: LIST
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PPUSH
3037: CALL_OW 72
3041: PUSH
3042: LD_VAR 0 2
3046: DIFF
3047: PPUSH
3048: LD_STRING D8a-Sci1-1
3050: PPUSH
3051: CALL 710 0 2
// Say ( JMM , D8a-JMM-1 ) ;
3055: LD_EXP 16
3059: PPUSH
3060: LD_STRING D8a-JMM-1
3062: PPUSH
3063: CALL_OW 88
// end ; ape := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman ] , [ f_inside ] ] ) ;
3067: LD_ADDR_VAR 0 3
3071: PUSH
3072: LD_INT 22
3074: PUSH
3075: LD_INT 1
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PUSH
3082: LD_INT 25
3084: PUSH
3085: LD_INT 12
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PUSH
3092: LD_INT 54
3094: PUSH
3095: EMPTY
3096: LIST
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: LIST
3102: PPUSH
3103: CALL_OW 69
3107: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ;
3108: LD_ADDR_VAR 0 4
3112: PUSH
3113: LD_INT 22
3115: PUSH
3116: LD_INT 1
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: PUSH
3123: LD_INT 2
3125: PUSH
3126: LD_INT 30
3128: PUSH
3129: LD_INT 6
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 30
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: LD_INT 30
3148: PUSH
3149: LD_INT 8
3151: PUSH
3152: EMPTY
3153: LIST
3154: LIST
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: LIST
3160: LIST
3161: PUSH
3162: EMPTY
3163: LIST
3164: LIST
3165: PPUSH
3166: CALL_OW 69
3170: PUSH
3171: LD_INT 1
3173: ARRAY
3174: ST_TO_ADDR
// for i in ape do
3175: LD_ADDR_VAR 0 1
3179: PUSH
3180: LD_VAR 0 3
3184: PUSH
3185: FOR_IN
3186: IFFALSE 3219
// if i in UnitsInside ( b ) then
3188: LD_VAR 0 1
3192: PUSH
3193: LD_VAR 0 4
3197: PPUSH
3198: CALL_OW 313
3202: IN
3203: IFFALSE 3217
// begin ape := i ;
3205: LD_ADDR_VAR 0 3
3209: PUSH
3210: LD_VAR 0 1
3214: ST_TO_ADDR
// break ;
3215: GO 3219
// end ;
3217: GO 3185
3219: POP
3220: POP
// if not ape then
3221: LD_VAR 0 3
3225: NOT
3226: IFFALSE 3238
// begin DialogueOff ;
3228: CALL_OW 7
// InGameOff ;
3232: CALL_OW 9
// exit ;
3236: GO 3428
// end ; RemoveUnit ( ape ) ;
3238: LD_VAR 0 3
3242: PPUSH
3243: CALL_OW 64
// PrepareApeman ( 0 ) ;
3247: LD_INT 0
3249: PPUSH
3250: CALL 63241 0 1
// uc_side := 1 ;
3254: LD_ADDR_OWVAR 20
3258: PUSH
3259: LD_INT 1
3261: ST_TO_ADDR
// hc_name := Mike  ;
3262: LD_ADDR_OWVAR 26
3266: PUSH
3267: LD_STRING Mike 
3269: ST_TO_ADDR
// hc_gallery := us ;
3270: LD_ADDR_OWVAR 33
3274: PUSH
3275: LD_STRING us
3277: ST_TO_ADDR
// hc_face_number := 30 ;
3278: LD_ADDR_OWVAR 34
3282: PUSH
3283: LD_INT 30
3285: ST_TO_ADDR
// hc_attr := [ GetAttr ( ape , attr_stamina ) , GetAttr ( ape , attr_speed ) ] ;
3286: LD_ADDR_OWVAR 29
3290: PUSH
3291: LD_VAR 0 3
3295: PPUSH
3296: LD_INT 1
3298: PPUSH
3299: CALL_OW 260
3303: PUSH
3304: LD_VAR 0 3
3308: PPUSH
3309: LD_INT 2
3311: PPUSH
3312: CALL_OW 260
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: ST_TO_ADDR
// hc_skills := [ GetSkill ( ape , 1 ) , GetSkill ( ape , 2 ) , GetSkill ( ape , 3 ) , GetSkill ( ape , 4 ) ] ;
3321: LD_ADDR_OWVAR 31
3325: PUSH
3326: LD_VAR 0 3
3330: PPUSH
3331: LD_INT 1
3333: PPUSH
3334: CALL_OW 259
3338: PUSH
3339: LD_VAR 0 3
3343: PPUSH
3344: LD_INT 2
3346: PPUSH
3347: CALL_OW 259
3351: PUSH
3352: LD_VAR 0 3
3356: PPUSH
3357: LD_INT 3
3359: PPUSH
3360: CALL_OW 259
3364: PUSH
3365: LD_VAR 0 3
3369: PPUSH
3370: LD_INT 4
3372: PPUSH
3373: CALL_OW 259
3377: PUSH
3378: EMPTY
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: ST_TO_ADDR
// hc_sex := sex_male ;
3384: LD_ADDR_OWVAR 27
3388: PUSH
3389: LD_INT 1
3391: ST_TO_ADDR
// Mike := CreateHuman ;
3392: LD_ADDR_EXP 26
3396: PUSH
3397: CALL_OW 44
3401: ST_TO_ADDR
// PlaceHumanInUnit ( Mike , b ) ;
3402: LD_EXP 26
3406: PPUSH
3407: LD_VAR 0 4
3411: PPUSH
3412: CALL_OW 52
// InitHc_All ( ) ;
3416: CALL_OW 584
// DialogueOff ;
3420: CALL_OW 7
// InGameOff ;
3424: CALL_OW 9
// end ;
3428: PPOPN 4
3430: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) do
3431: LD_INT 22
3433: PUSH
3434: LD_INT 1
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PUSH
3441: LD_INT 25
3443: PUSH
3444: LD_INT 16
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PPUSH
3455: CALL_OW 69
3459: IFFALSE 3518
3461: GO 3463
3463: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
3464: LD_STRING M1a
3466: PPUSH
3467: CALL_OW 337
// case Query ( Q2 ) of 1 :
3471: LD_STRING Q2
3473: PPUSH
3474: CALL_OW 97
3478: PUSH
3479: LD_INT 1
3481: DOUBLE
3482: EQUAL
3483: IFTRUE 3487
3485: GO 3498
3487: POP
// end_mission := true ; 2 :
3488: LD_ADDR_EXP 14
3492: PUSH
3493: LD_INT 1
3495: ST_TO_ADDR
3496: GO 3518
3498: LD_INT 2
3500: DOUBLE
3501: EQUAL
3502: IFTRUE 3506
3504: GO 3517
3506: POP
// end_the_mission_allowed := true ; end ;
3507: LD_ADDR_OWVAR 57
3511: PUSH
3512: LD_INT 1
3514: ST_TO_ADDR
3515: GO 3518
3517: POP
// end ;
3518: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) and Delta do
3519: LD_INT 22
3521: PUSH
3522: LD_INT 1
3524: PUSH
3525: EMPTY
3526: LIST
3527: LIST
3528: PUSH
3529: LD_INT 2
3531: PUSH
3532: LD_INT 30
3534: PUSH
3535: LD_INT 6
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 30
3544: PUSH
3545: LD_INT 7
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: LIST
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PPUSH
3561: CALL_OW 69
3565: PUSH
3566: LD_INT 22
3568: PUSH
3569: LD_INT 1
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: PUSH
3576: LD_INT 2
3578: PUSH
3579: LD_INT 30
3581: PUSH
3582: LD_INT 2
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: PUSH
3589: LD_INT 30
3591: PUSH
3592: LD_INT 3
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: LIST
3603: PUSH
3604: EMPTY
3605: LIST
3606: LIST
3607: PPUSH
3608: CALL_OW 69
3612: AND
3613: PUSH
3614: LD_EXP 6
3618: AND
3619: IFFALSE 4134
3621: GO 3623
3623: DISABLE
// begin Wait ( rand ( 0 0$30 , 0 0$50 ) ) ;
3624: LD_INT 1050
3626: PPUSH
3627: LD_INT 1750
3629: PPUSH
3630: CALL_OW 12
3634: PPUSH
3635: CALL_OW 67
// PlaceUnitArea ( Denis , [ denisArea1 , denisArea2 , denisArea3 , denisArea4 ] [ Difficulty ] , false ) ;
3639: LD_EXP 19
3643: PPUSH
3644: LD_INT 6
3646: PUSH
3647: LD_INT 9
3649: PUSH
3650: LD_INT 10
3652: PUSH
3653: LD_INT 16
3655: PUSH
3656: EMPTY
3657: LIST
3658: LIST
3659: LIST
3660: LIST
3661: PUSH
3662: LD_OWVAR 67
3666: ARRAY
3667: PPUSH
3668: LD_INT 0
3670: PPUSH
3671: CALL_OW 49
// ComHold ( Denis ) ;
3675: LD_EXP 19
3679: PPUSH
3680: CALL_OW 140
// InGameOn ;
3684: CALL_OW 8
// DialogueOn ;
3688: CALL_OW 6
// if Delta then
3692: LD_EXP 6
3696: IFFALSE 3709
// CenterNowOnUnits ( Delta ) else
3698: LD_EXP 6
3702: PPUSH
3703: CALL_OW 87
3707: GO 3718
// CenterNowOnUnits ( JMM ) ;
3709: LD_EXP 16
3713: PPUSH
3714: CALL_OW 87
// SayRadioNoFaceNoName ( Denis , DD-Den-1 ) ;
3718: LD_EXP 19
3722: PPUSH
3723: LD_STRING DD-Den-1
3725: PPUSH
3726: CALL 70892 0 2
// Say ( JMM , DD-JMM-1 ) ;
3730: LD_EXP 16
3734: PPUSH
3735: LD_STRING DD-JMM-1
3737: PPUSH
3738: CALL_OW 88
// SayRadioNoFaceNoName ( Denis , DD-Den-2 ) ;
3742: LD_EXP 19
3746: PPUSH
3747: LD_STRING DD-Den-2
3749: PPUSH
3750: CALL 70892 0 2
// Wait ( 3 ) ;
3754: LD_INT 3
3756: PPUSH
3757: CALL_OW 67
// DialogueOff ;
3761: CALL_OW 7
// InGameOff ;
3765: CALL_OW 9
// if Difficulty = 1 then
3769: LD_OWVAR 67
3773: PUSH
3774: LD_INT 1
3776: EQUAL
3777: IFFALSE 3853
// begin PlaceSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 , - 12 ) ;
3779: LD_EXP 19
3783: PPUSH
3784: CALL_OW 250
3788: PPUSH
3789: LD_EXP 19
3793: PPUSH
3794: CALL_OW 251
3798: PPUSH
3799: LD_INT 1
3801: PPUSH
3802: LD_INT 12
3804: NEG
3805: PPUSH
3806: CALL_OW 330
// CenterNowOnUnits ( Denis ) ;
3810: LD_EXP 19
3814: PPUSH
3815: CALL_OW 87
// wait ( 0 0$5 ) ;
3819: LD_INT 175
3821: PPUSH
3822: CALL_OW 67
// RemoveSeeing ( GetX ( Denis ) , GetY ( Denis ) , 1 ) ;
3826: LD_EXP 19
3830: PPUSH
3831: CALL_OW 250
3835: PPUSH
3836: LD_EXP 19
3840: PPUSH
3841: CALL_OW 251
3845: PPUSH
3846: LD_INT 1
3848: PPUSH
3849: CALL_OW 331
// end ; repeat wait ( 0 0$01 ) ;
3853: LD_INT 35
3855: PPUSH
3856: CALL_OW 67
// until See ( 1 , Denis ) or IsDead ( Denis ) ;
3860: LD_INT 1
3862: PPUSH
3863: LD_EXP 19
3867: PPUSH
3868: CALL_OW 292
3872: PUSH
3873: LD_EXP 19
3877: PPUSH
3878: CALL_OW 301
3882: OR
3883: IFFALSE 3853
// if IsDead ( Denis ) then
3885: LD_EXP 19
3889: PPUSH
3890: CALL_OW 301
3894: IFFALSE 3898
// exit ;
3896: GO 4134
// SetSide ( Denis , 1 ) ;
3898: LD_EXP 19
3902: PPUSH
3903: LD_INT 1
3905: PPUSH
3906: CALL_OW 235
// Say ( Denis , DD-Den-2a ) ;
3910: LD_EXP 19
3914: PPUSH
3915: LD_STRING DD-Den-2a
3917: PPUSH
3918: CALL_OW 88
// repeat wait ( 0 0$01 ) ;
3922: LD_INT 35
3924: PPUSH
3925: CALL_OW 67
// until GetBType ( IsInUnit ( Denis ) ) in [ b_lab , b_lab_half , b_lab_full ] or IsDead ( Denis ) ;
3929: LD_EXP 19
3933: PPUSH
3934: CALL_OW 310
3938: PPUSH
3939: CALL_OW 266
3943: PUSH
3944: LD_INT 6
3946: PUSH
3947: LD_INT 7
3949: PUSH
3950: LD_INT 8
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: LIST
3957: IN
3958: PUSH
3959: LD_EXP 19
3963: PPUSH
3964: CALL_OW 301
3968: OR
3969: IFFALSE 3922
// if IsDead ( Denis ) then
3971: LD_EXP 19
3975: PPUSH
3976: CALL_OW 301
3980: IFFALSE 3984
// exit ;
3982: GO 4134
// Say ( Denis , DD-Den-2b ) ;
3984: LD_EXP 19
3988: PPUSH
3989: LD_STRING DD-Den-2b
3991: PPUSH
3992: CALL_OW 88
// ComChangeProfession ( Denis , 4 ) ;
3996: LD_EXP 19
4000: PPUSH
4001: LD_INT 4
4003: PPUSH
4004: CALL_OW 123
// Wait ( 0 0$02 ) ;
4008: LD_INT 70
4010: PPUSH
4011: CALL_OW 67
// DialogueOn ;
4015: CALL_OW 6
// CenterNowOnUnits ( Denis ) ;
4019: LD_EXP 19
4023: PPUSH
4024: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
4028: LD_EXP 16
4032: PPUSH
4033: LD_STRING D4-JMM-1
4035: PPUSH
4036: CALL_OW 88
// Say ( Denis , D4-Den-1 ) ;
4040: LD_EXP 19
4044: PPUSH
4045: LD_STRING D4-Den-1
4047: PPUSH
4048: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
4052: LD_EXP 16
4056: PPUSH
4057: LD_STRING D4-JMM-2
4059: PPUSH
4060: CALL_OW 88
// Say ( Denis , D4-Den-2 ) ;
4064: LD_EXP 19
4068: PPUSH
4069: LD_STRING D4-Den-2
4071: PPUSH
4072: CALL_OW 88
// DialogueOff ;
4076: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
4080: LD_STRING M2
4082: PPUSH
4083: CALL_OW 337
// radar_allowed := true ;
4087: LD_ADDR_EXP 7
4091: PUSH
4092: LD_INT 1
4094: ST_TO_ADDR
// SetTech ( tech_radar , 1 , state_enabled ) ;
4095: LD_INT 6
4097: PPUSH
4098: LD_INT 1
4100: PPUSH
4101: LD_INT 1
4103: PPUSH
4104: CALL_OW 322
// SetRestrict ( b_lab_opto , 1 , state_enabled ) ;
4108: LD_INT 15
4110: PPUSH
4111: LD_INT 1
4113: PPUSH
4114: LD_INT 1
4116: PPUSH
4117: CALL_OW 324
// SetRestrict ( b_ext_radar , 1 , state_enabled ) ;
4121: LD_INT 20
4123: PPUSH
4124: LD_INT 1
4126: PPUSH
4127: LD_INT 1
4129: PPUSH
4130: CALL_OW 324
// end ;
4134: END
// every 0 0$1 trigger arab_spotted do var sol , sol2 ;
4135: LD_EXP 13
4139: IFFALSE 4762
4141: GO 4143
4143: DISABLE
4144: LD_INT 0
4146: PPUSH
4147: PPUSH
// begin sol := SayX ( UnitFilter ( others , [ f_sex , sex_male ] ) , D5-Sol1-1 ) ;
4148: LD_ADDR_VAR 0 1
4152: PUSH
4153: LD_EXP 27
4157: PPUSH
4158: LD_INT 26
4160: PUSH
4161: LD_INT 1
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PPUSH
4168: CALL_OW 72
4172: PPUSH
4173: LD_STRING D5-Sol1-1
4175: PPUSH
4176: CALL 710 0 2
4180: ST_TO_ADDR
// if not sol then
4181: LD_VAR 0 1
4185: NOT
4186: IFFALSE 4190
// exit ;
4188: GO 4762
// repeat wait ( 0 0$01 ) ;
4190: LD_INT 35
4192: PPUSH
4193: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
4197: LD_INT 22
4199: PUSH
4200: LD_INT 2
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 21
4209: PUSH
4210: LD_INT 1
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PPUSH
4221: CALL_OW 69
4225: PUSH
4226: LD_INT 0
4228: EQUAL
4229: IFFALSE 4190
// if IsOk ( sol ) then
4231: LD_VAR 0 1
4235: PPUSH
4236: CALL_OW 302
4240: IFFALSE 4260
// begin sol2 := others diff sol ;
4242: LD_ADDR_VAR 0 2
4246: PUSH
4247: LD_EXP 27
4251: PUSH
4252: LD_VAR 0 1
4256: DIFF
4257: ST_TO_ADDR
// end else
4258: GO 4262
// exit ;
4260: GO 4762
// if not Lisa and not sol2 then
4262: LD_EXP 22
4266: NOT
4267: PUSH
4268: LD_VAR 0 2
4272: NOT
4273: AND
4274: IFFALSE 4278
// exit ;
4276: GO 4762
// DialogueOn ;
4278: CALL_OW 6
// if Lisa then
4282: LD_EXP 22
4286: IFFALSE 4302
// Say ( Lisa , D5a-Lisa-1 ) else
4288: LD_EXP 22
4292: PPUSH
4293: LD_STRING D5a-Lisa-1
4295: PPUSH
4296: CALL_OW 88
4300: GO 4377
// if sol2 then
4302: LD_VAR 0 2
4306: IFFALSE 4377
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4308: LD_VAR 0 2
4312: PUSH
4313: LD_INT 1
4315: ARRAY
4316: PPUSH
4317: CALL_OW 258
4321: PUSH
4322: LD_INT 1
4324: DOUBLE
4325: EQUAL
4326: IFTRUE 4330
4328: GO 4349
4330: POP
// Say ( sol2 [ 1 ] , D5-Sol2-1 ) ; sex_female :
4331: LD_VAR 0 2
4335: PUSH
4336: LD_INT 1
4338: ARRAY
4339: PPUSH
4340: LD_STRING D5-Sol2-1
4342: PPUSH
4343: CALL_OW 88
4347: GO 4377
4349: LD_INT 2
4351: DOUBLE
4352: EQUAL
4353: IFTRUE 4357
4355: GO 4376
4357: POP
// Say ( sol2 [ 1 ] , D5-FSol2-1 ) ; end ;
4358: LD_VAR 0 2
4362: PUSH
4363: LD_INT 1
4365: ARRAY
4366: PPUSH
4367: LD_STRING D5-FSol2-1
4369: PPUSH
4370: CALL_OW 88
4374: GO 4377
4376: POP
// Say ( sol , D5-Sol1-2 ) ;
4377: LD_VAR 0 1
4381: PPUSH
4382: LD_STRING D5-Sol1-2
4384: PPUSH
4385: CALL_OW 88
// if Lisa then
4389: LD_EXP 22
4393: IFFALSE 4409
// Say ( Lisa , D5a-Lisa-2 ) else
4395: LD_EXP 22
4399: PPUSH
4400: LD_STRING D5a-Lisa-2
4402: PPUSH
4403: CALL_OW 88
4407: GO 4484
// if sol2 then
4409: LD_VAR 0 2
4413: IFFALSE 4484
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4415: LD_VAR 0 2
4419: PUSH
4420: LD_INT 1
4422: ARRAY
4423: PPUSH
4424: CALL_OW 258
4428: PUSH
4429: LD_INT 1
4431: DOUBLE
4432: EQUAL
4433: IFTRUE 4437
4435: GO 4456
4437: POP
// Say ( sol2 [ 1 ] , D5-Sol2-2 ) ; sex_female :
4438: LD_VAR 0 2
4442: PUSH
4443: LD_INT 1
4445: ARRAY
4446: PPUSH
4447: LD_STRING D5-Sol2-2
4449: PPUSH
4450: CALL_OW 88
4454: GO 4484
4456: LD_INT 2
4458: DOUBLE
4459: EQUAL
4460: IFTRUE 4464
4462: GO 4483
4464: POP
// Say ( sol2 [ 1 ] , D5-FSol2-2 ) ; end ;
4465: LD_VAR 0 2
4469: PUSH
4470: LD_INT 1
4472: ARRAY
4473: PPUSH
4474: LD_STRING D5-FSol2-2
4476: PPUSH
4477: CALL_OW 88
4481: GO 4484
4483: POP
// Say ( sol , D5a-Sol1-3 ) ;
4484: LD_VAR 0 1
4488: PPUSH
4489: LD_STRING D5a-Sol1-3
4491: PPUSH
4492: CALL_OW 88
// if Lisa then
4496: LD_EXP 22
4500: IFFALSE 4514
// Say ( Lisa , D5a-Lisa-3 ) ;
4502: LD_EXP 22
4506: PPUSH
4507: LD_STRING D5a-Lisa-3
4509: PPUSH
4510: CALL_OW 88
// if not sol2 then
4514: LD_VAR 0 2
4518: NOT
4519: IFFALSE 4527
// begin DialogueOff ;
4521: CALL_OW 7
// exit ;
4525: GO 4762
// end ; case GetSex ( sol2 [ 1 ] ) of sex_male :
4527: LD_VAR 0 2
4531: PUSH
4532: LD_INT 1
4534: ARRAY
4535: PPUSH
4536: CALL_OW 258
4540: PUSH
4541: LD_INT 1
4543: DOUBLE
4544: EQUAL
4545: IFTRUE 4549
4547: GO 4568
4549: POP
// Say ( sol2 [ 1 ] , D5-Sol2-3 ) ; sex_female :
4550: LD_VAR 0 2
4554: PUSH
4555: LD_INT 1
4557: ARRAY
4558: PPUSH
4559: LD_STRING D5-Sol2-3
4561: PPUSH
4562: CALL_OW 88
4566: GO 4596
4568: LD_INT 2
4570: DOUBLE
4571: EQUAL
4572: IFTRUE 4576
4574: GO 4595
4576: POP
// Say ( sol2 [ 1 ] , D5-FSol2-3 ) ; end ;
4577: LD_VAR 0 2
4581: PUSH
4582: LD_INT 1
4584: ARRAY
4585: PPUSH
4586: LD_STRING D5-FSol2-3
4588: PPUSH
4589: CALL_OW 88
4593: GO 4596
4595: POP
// Say ( sol , D5-Sol1-4 ) ;
4596: LD_VAR 0 1
4600: PPUSH
4601: LD_STRING D5-Sol1-4
4603: PPUSH
4604: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4608: LD_VAR 0 2
4612: PUSH
4613: LD_INT 1
4615: ARRAY
4616: PPUSH
4617: CALL_OW 258
4621: PUSH
4622: LD_INT 1
4624: DOUBLE
4625: EQUAL
4626: IFTRUE 4630
4628: GO 4649
4630: POP
// Say ( sol2 [ 1 ] , D5-Sol2-4 ) ; sex_female :
4631: LD_VAR 0 2
4635: PUSH
4636: LD_INT 1
4638: ARRAY
4639: PPUSH
4640: LD_STRING D5-Sol2-4
4642: PPUSH
4643: CALL_OW 88
4647: GO 4677
4649: LD_INT 2
4651: DOUBLE
4652: EQUAL
4653: IFTRUE 4657
4655: GO 4676
4657: POP
// Say ( sol2 [ 1 ] , D5-FSol2-4 ) ; end ;
4658: LD_VAR 0 2
4662: PUSH
4663: LD_INT 1
4665: ARRAY
4666: PPUSH
4667: LD_STRING D5-FSol2-4
4669: PPUSH
4670: CALL_OW 88
4674: GO 4677
4676: POP
// Say ( sol , D5-Sol1-5 ) ;
4677: LD_VAR 0 1
4681: PPUSH
4682: LD_STRING D5-Sol1-5
4684: PPUSH
4685: CALL_OW 88
// case GetSex ( sol2 [ 1 ] ) of sex_male :
4689: LD_VAR 0 2
4693: PUSH
4694: LD_INT 1
4696: ARRAY
4697: PPUSH
4698: CALL_OW 258
4702: PUSH
4703: LD_INT 1
4705: DOUBLE
4706: EQUAL
4707: IFTRUE 4711
4709: GO 4730
4711: POP
// Say ( sol2 [ 1 ] , D5-Sol2-5 ) ; sex_female :
4712: LD_VAR 0 2
4716: PUSH
4717: LD_INT 1
4719: ARRAY
4720: PPUSH
4721: LD_STRING D5-Sol2-5
4723: PPUSH
4724: CALL_OW 88
4728: GO 4758
4730: LD_INT 2
4732: DOUBLE
4733: EQUAL
4734: IFTRUE 4738
4736: GO 4757
4738: POP
// Say ( sol2 [ 1 ] , D5-FSol2-5 ) ; end ;
4739: LD_VAR 0 2
4743: PUSH
4744: LD_INT 1
4746: ARRAY
4747: PPUSH
4748: LD_STRING D5-FSol2-5
4750: PPUSH
4751: CALL_OW 88
4755: GO 4758
4757: POP
// DialogueOff ;
4758: CALL_OW 7
// end ;
4762: PPOPN 2
4764: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 5 do
4765: LD_INT 22
4767: PUSH
4768: LD_INT 1
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: PUSH
4775: LD_INT 25
4777: PUSH
4778: LD_INT 16
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: PPUSH
4789: CALL_OW 69
4793: PUSH
4794: LD_INT 5
4796: GREATEREQUAL
4797: IFFALSE 4817
4799: GO 4801
4801: DISABLE
// begin ChangeMissionObjectives ( M1b ) ;
4802: LD_STRING M1b
4804: PPUSH
4805: CALL_OW 337
// apeman_army := true ;
4809: LD_ADDR_EXP 9
4813: PUSH
4814: LD_INT 1
4816: ST_TO_ADDR
// end ;
4817: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] , [ f_constructed ] ] ) do
4818: LD_INT 22
4820: PUSH
4821: LD_INT 1
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 30
4830: PUSH
4831: LD_INT 3
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 57
4840: PUSH
4841: EMPTY
4842: LIST
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: LIST
4848: PPUSH
4849: CALL_OW 69
4853: IFFALSE 4865
4855: GO 4857
4857: DISABLE
// ChangeMissionObjectives ( M1c ) ;
4858: LD_STRING M1c
4860: PPUSH
4861: CALL_OW 337
4865: END
// every 0 0$1 trigger GetTech ( tech_radar , 1 ) = state_researched do
4866: LD_INT 6
4868: PPUSH
4869: LD_INT 1
4871: PPUSH
4872: CALL_OW 321
4876: PUSH
4877: LD_INT 2
4879: EQUAL
4880: IFFALSE 4900
4882: GO 4884
4884: DISABLE
// begin ChangeMissionObjectives ( M2a ) ;
4885: LD_STRING M2a
4887: PPUSH
4888: CALL_OW 337
// radar_researched := true ;
4892: LD_ADDR_EXP 10
4896: PUSH
4897: LD_INT 1
4899: ST_TO_ADDR
// end ;
4900: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , us_radar ] , [ f_bweapon , us_radar ] ] ] ) do
4901: LD_INT 22
4903: PUSH
4904: LD_INT 1
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PUSH
4911: LD_INT 2
4913: PUSH
4914: LD_INT 34
4916: PUSH
4917: LD_INT 11
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 35
4926: PUSH
4927: LD_INT 11
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: PUSH
4939: EMPTY
4940: LIST
4941: LIST
4942: PPUSH
4943: CALL_OW 69
4947: IFFALSE 4967
4949: GO 4951
4951: DISABLE
// begin ChangeMissionObjectives ( M2b ) ;
4952: LD_STRING M2b
4954: PPUSH
4955: CALL_OW 337
// radar_builded := true ;
4959: LD_ADDR_EXP 11
4963: PUSH
4964: LD_INT 1
4966: ST_TO_ADDR
// end ;
4967: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) = 0 and not first_apeman_tamed do
4968: LD_INT 22
4970: PUSH
4971: LD_INT 0
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PUSH
4978: LD_INT 25
4980: PUSH
4981: LD_INT 12
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PPUSH
4992: CALL_OW 69
4996: PUSH
4997: LD_INT 0
4999: EQUAL
5000: PUSH
5001: LD_EXP 8
5005: NOT
5006: AND
5007: IFFALSE 5019
5009: GO 5011
5011: DISABLE
// YouLost ( Apeman ) ;
5012: LD_STRING Apeman
5014: PPUSH
5015: CALL_OW 104
5019: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) >= 7 do var i , filter ;
5020: LD_INT 22
5022: PUSH
5023: LD_INT 1
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: LD_INT 25
5032: PUSH
5033: LD_INT 16
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PPUSH
5044: CALL_OW 69
5048: PUSH
5049: LD_INT 7
5051: GREATEREQUAL
5052: IFFALSE 5150
5054: GO 5056
5056: DISABLE
5057: LD_INT 0
5059: PPUSH
5060: PPUSH
// begin filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ^ JMM ;
5061: LD_ADDR_VAR 0 2
5065: PUSH
5066: LD_INT 22
5068: PUSH
5069: LD_INT 1
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: PUSH
5076: LD_INT 21
5078: PUSH
5079: LD_INT 1
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 25
5088: PUSH
5089: LD_INT 4
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: EMPTY
5097: LIST
5098: LIST
5099: LIST
5100: PPUSH
5101: CALL_OW 69
5105: PUSH
5106: LD_EXP 16
5110: ADD
5111: ST_TO_ADDR
// if filter then
5112: LD_VAR 0 2
5116: IFFALSE 5150
// for i in filter do
5118: LD_ADDR_VAR 0 1
5122: PUSH
5123: LD_VAR 0 2
5127: PUSH
5128: FOR_IN
5129: IFFALSE 5148
// AddExperience ( i , 4 , 3500 ) ;
5131: LD_VAR 0 1
5135: PPUSH
5136: LD_INT 4
5138: PPUSH
5139: LD_INT 3500
5141: PPUSH
5142: CALL_OW 492
5146: GO 5128
5148: POP
5149: POP
// end ;
5150: PPOPN 2
5152: END
// every 0 0$1 trigger end_mission do var i , tmp , m1 , m2 , m3 ;
5153: LD_EXP 14
5157: IFFALSE 6340
5159: GO 5161
5161: DISABLE
5162: LD_INT 0
5164: PPUSH
5165: PPUSH
5166: PPUSH
5167: PPUSH
5168: PPUSH
// begin if apeKillCounter = 0 then
5169: LD_EXP 15
5173: PUSH
5174: LD_INT 0
5176: EQUAL
5177: IFFALSE 5186
// SetAchievement ( ACH_APEKILLER ) ;
5179: LD_STRING ACH_APEKILLER
5181: PPUSH
5182: CALL_OW 543
// if FilterAllUnits ( [ f_side , 2 ] ) then
5186: LD_INT 22
5188: PUSH
5189: LD_INT 2
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PPUSH
5196: CALL_OW 69
5200: IFFALSE 5238
// for i in FilterAllUnits ( [ f_side , 2 ] ) do
5202: LD_ADDR_VAR 0 1
5206: PUSH
5207: LD_INT 22
5209: PUSH
5210: LD_INT 2
5212: PUSH
5213: EMPTY
5214: LIST
5215: LIST
5216: PPUSH
5217: CALL_OW 69
5221: PUSH
5222: FOR_IN
5223: IFFALSE 5236
// RemoveUnit ( i ) ;
5225: LD_VAR 0 1
5229: PPUSH
5230: CALL_OW 64
5234: GO 5222
5236: POP
5237: POP
// m1 := false ;
5238: LD_ADDR_VAR 0 3
5242: PUSH
5243: LD_INT 0
5245: ST_TO_ADDR
// m2 := false ;
5246: LD_ADDR_VAR 0 4
5250: PUSH
5251: LD_INT 0
5253: ST_TO_ADDR
// m3 := false ;
5254: LD_ADDR_VAR 0 5
5258: PUSH
5259: LD_INT 0
5261: ST_TO_ADDR
// if apeman_army then
5262: LD_EXP 9
5266: IFFALSE 5288
// begin AddMedal ( Tame , 1 ) ;
5268: LD_STRING Tame
5270: PPUSH
5271: LD_INT 1
5273: PPUSH
5274: CALL_OW 101
// m1 := true ;
5278: LD_ADDR_VAR 0 3
5282: PUSH
5283: LD_INT 1
5285: ST_TO_ADDR
// end else
5286: GO 5299
// AddMedal ( Tame , - 1 ) ;
5288: LD_STRING Tame
5290: PPUSH
5291: LD_INT 1
5293: NEG
5294: PPUSH
5295: CALL_OW 101
// if radar_researched then
5299: LD_EXP 10
5303: IFFALSE 5335
// begin SaveVariable ( true , radarResInDelta ) ;
5305: LD_INT 1
5307: PPUSH
5308: LD_STRING radarResInDelta
5310: PPUSH
5311: CALL_OW 39
// AddMedal ( Radar , 1 ) ;
5315: LD_STRING Radar
5317: PPUSH
5318: LD_INT 1
5320: PPUSH
5321: CALL_OW 101
// m2 := true ;
5325: LD_ADDR_VAR 0 4
5329: PUSH
5330: LD_INT 1
5332: ST_TO_ADDR
// end else
5333: GO 5365
// if radar_allowed then
5335: LD_EXP 7
5339: IFFALSE 5354
// AddMedal ( Radar , - 2 ) else
5341: LD_STRING Radar
5343: PPUSH
5344: LD_INT 2
5346: NEG
5347: PPUSH
5348: CALL_OW 101
5352: GO 5365
// AddMedal ( Radar , - 1 ) ;
5354: LD_STRING Radar
5356: PPUSH
5357: LD_INT 1
5359: NEG
5360: PPUSH
5361: CALL_OW 101
// if radar_builded then
5365: LD_EXP 11
5369: IFFALSE 5391
// begin AddMedal ( BuildRadar , 1 ) ;
5371: LD_STRING BuildRadar
5373: PPUSH
5374: LD_INT 1
5376: PPUSH
5377: CALL_OW 101
// m3 := true ;
5381: LD_ADDR_VAR 0 5
5385: PUSH
5386: LD_INT 1
5388: ST_TO_ADDR
// end else
5389: GO 5402
// AddMedal ( BuildRadar , - 1 ) ;
5391: LD_STRING BuildRadar
5393: PPUSH
5394: LD_INT 1
5396: NEG
5397: PPUSH
5398: CALL_OW 101
// if tick <= 7 7$00 then
5402: LD_OWVAR 1
5406: PUSH
5407: LD_INT 14700
5409: LESSEQUAL
5410: IFFALSE 5419
// SetAchievement ( ACH_ASPEED_5 ) ;
5412: LD_STRING ACH_ASPEED_5
5414: PPUSH
5415: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
5419: LD_VAR 0 3
5423: PUSH
5424: LD_VAR 0 4
5428: AND
5429: PUSH
5430: LD_VAR 0 5
5434: AND
5435: PUSH
5436: LD_OWVAR 67
5440: PUSH
5441: LD_INT 3
5443: GREATEREQUAL
5444: AND
5445: IFFALSE 5457
// SetAchievementEX ( ACH_AMER , 5 ) ;
5447: LD_STRING ACH_AMER
5449: PPUSH
5450: LD_INT 5
5452: PPUSH
5453: CALL_OW 564
// GiveMedals ( MAIN ) ;
5457: LD_STRING MAIN
5459: PPUSH
5460: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
5464: LD_ADDR_VAR 0 2
5468: PUSH
5469: LD_INT 22
5471: PUSH
5472: LD_INT 1
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: PUSH
5479: LD_INT 21
5481: PUSH
5482: LD_INT 1
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: LD_INT 2
5491: PUSH
5492: LD_INT 25
5494: PUSH
5495: LD_INT 1
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 25
5504: PUSH
5505: LD_INT 2
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PUSH
5512: LD_INT 25
5514: PUSH
5515: LD_INT 3
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: PUSH
5522: LD_INT 25
5524: PUSH
5525: LD_INT 4
5527: PUSH
5528: EMPTY
5529: LIST
5530: LIST
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: LIST
5536: LIST
5537: LIST
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: LIST
5543: PPUSH
5544: CALL_OW 69
5548: ST_TO_ADDR
// RewardPeople ( tmp ) ;
5549: LD_VAR 0 2
5553: PPUSH
5554: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
5558: LD_EXP 16
5562: PPUSH
5563: LD_EXP 2
5567: PUSH
5568: LD_STRING JMM
5570: STR
5571: PPUSH
5572: CALL_OW 38
// if IsOk ( Gladstone ) then
5576: LD_EXP 17
5580: PPUSH
5581: CALL_OW 302
5585: IFFALSE 5612
// begin ToLua ( enableBioCharacter(BIO_TIM) ) ;
5587: LD_STRING enableBioCharacter(BIO_TIM)
5589: PPUSH
5590: CALL_OW 559
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
5594: LD_EXP 17
5598: PPUSH
5599: LD_EXP 2
5603: PUSH
5604: LD_STRING Gladstone
5606: STR
5607: PPUSH
5608: CALL_OW 38
// end ; if IsOk ( Denis ) and GetSide ( Denis ) = 1 then
5612: LD_EXP 19
5616: PPUSH
5617: CALL_OW 302
5621: PUSH
5622: LD_EXP 19
5626: PPUSH
5627: CALL_OW 255
5631: PUSH
5632: LD_INT 1
5634: EQUAL
5635: AND
5636: IFFALSE 5673
// begin ToLua ( enableBioCharacter(BIO_DENIS) ) ;
5638: LD_STRING enableBioCharacter(BIO_DENIS)
5640: PPUSH
5641: CALL_OW 559
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
5645: LD_EXP 19
5649: PPUSH
5650: LD_EXP 2
5654: PUSH
5655: LD_STRING Denis
5657: STR
5658: PPUSH
5659: CALL_OW 38
// SaveVariable ( true , DenisInDelta ) ;
5663: LD_INT 1
5665: PPUSH
5666: LD_STRING DenisInDelta
5668: PPUSH
5669: CALL_OW 39
// end ; if IsOk ( Lisa ) then
5673: LD_EXP 22
5677: PPUSH
5678: CALL_OW 302
5682: IFFALSE 5702
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
5684: LD_EXP 22
5688: PPUSH
5689: LD_EXP 2
5693: PUSH
5694: LD_STRING Lisa
5696: STR
5697: PPUSH
5698: CALL_OW 38
// end ; if IsOk ( Frank ) then
5702: LD_EXP 23
5706: PPUSH
5707: CALL_OW 302
5711: IFFALSE 5731
// begin SaveCharacters ( Frank , mission_prefix & Frank ) ;
5713: LD_EXP 23
5717: PPUSH
5718: LD_EXP 2
5722: PUSH
5723: LD_STRING Frank
5725: STR
5726: PPUSH
5727: CALL_OW 38
// end ; if IsOk ( Bobby ) then
5731: LD_EXP 24
5735: PPUSH
5736: CALL_OW 302
5740: IFFALSE 5760
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
5742: LD_EXP 24
5746: PPUSH
5747: LD_EXP 2
5751: PUSH
5752: LD_STRING Bobby
5754: STR
5755: PPUSH
5756: CALL_OW 38
// end ; if IsOk ( Cyrus ) then
5760: LD_EXP 25
5764: PPUSH
5765: CALL_OW 302
5769: IFFALSE 5789
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
5771: LD_EXP 25
5775: PPUSH
5776: LD_EXP 2
5780: PUSH
5781: LD_STRING Cyrus
5783: STR
5784: PPUSH
5785: CALL_OW 38
// end ; if IsOk ( Brown ) then
5789: LD_EXP 20
5793: PPUSH
5794: CALL_OW 302
5798: IFFALSE 5818
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
5800: LD_EXP 20
5804: PPUSH
5805: LD_EXP 2
5809: PUSH
5810: LD_STRING Brown
5812: STR
5813: PPUSH
5814: CALL_OW 38
// end ; if IsOk ( Donaldson ) then
5818: LD_EXP 21
5822: PPUSH
5823: CALL_OW 302
5827: IFFALSE 5847
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
5829: LD_EXP 21
5833: PPUSH
5834: LD_EXP 2
5838: PUSH
5839: LD_STRING Donaldson
5841: STR
5842: PPUSH
5843: CALL_OW 38
// end ; if IsOk ( Mike ) then
5847: LD_EXP 26
5851: PPUSH
5852: CALL_OW 302
5856: IFFALSE 5876
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
5858: LD_EXP 26
5862: PPUSH
5863: LD_EXP 2
5867: PUSH
5868: LD_STRING Mike
5870: STR
5871: PPUSH
5872: CALL_OW 38
// if others then
5876: LD_EXP 27
5880: IFFALSE 5894
// SaveCharacters ( others , othersInDelta ) ;
5882: LD_EXP 27
5886: PPUSH
5887: LD_STRING othersInDelta
5889: PPUSH
5890: CALL_OW 38
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) then
5894: LD_INT 22
5896: PUSH
5897: LD_INT 1
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PUSH
5904: LD_INT 25
5906: PUSH
5907: LD_INT 16
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: PPUSH
5918: CALL_OW 69
5922: IFFALSE 5966
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_apeman_engineer ] ] ) diff Mike , apeInDelta ) ;
5924: LD_INT 22
5926: PUSH
5927: LD_INT 1
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: PUSH
5934: LD_INT 25
5936: PUSH
5937: LD_INT 16
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: PPUSH
5948: CALL_OW 69
5952: PUSH
5953: LD_EXP 26
5957: DIFF
5958: PPUSH
5959: LD_STRING apeInDelta
5961: PPUSH
5962: CALL_OW 38
// tmp := [ ] ;
5966: LD_ADDR_VAR 0 2
5970: PUSH
5971: EMPTY
5972: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
5973: LD_INT 22
5975: PUSH
5976: LD_INT 1
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: PUSH
5983: LD_INT 21
5985: PUSH
5986: LD_INT 2
5988: PUSH
5989: EMPTY
5990: LIST
5991: LIST
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PPUSH
5997: CALL_OW 69
6001: IFFALSE 6112
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) do
6003: LD_ADDR_VAR 0 1
6007: PUSH
6008: LD_INT 22
6010: PUSH
6011: LD_INT 1
6013: PUSH
6014: EMPTY
6015: LIST
6016: LIST
6017: PUSH
6018: LD_INT 21
6020: PUSH
6021: LD_INT 2
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: PUSH
6028: EMPTY
6029: LIST
6030: LIST
6031: PPUSH
6032: CALL_OW 69
6036: PUSH
6037: FOR_IN
6038: IFFALSE 6110
// tmp := tmp ^ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
6040: LD_ADDR_VAR 0 2
6044: PUSH
6045: LD_VAR 0 2
6049: PUSH
6050: LD_VAR 0 1
6054: PPUSH
6055: CALL_OW 248
6059: PUSH
6060: LD_VAR 0 1
6064: PPUSH
6065: CALL_OW 265
6069: PUSH
6070: LD_VAR 0 1
6074: PPUSH
6075: CALL_OW 262
6079: PUSH
6080: LD_VAR 0 1
6084: PPUSH
6085: CALL_OW 263
6089: PUSH
6090: LD_VAR 0 1
6094: PPUSH
6095: CALL_OW 264
6099: PUSH
6100: EMPTY
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: ADD
6107: ST_TO_ADDR
6108: GO 6037
6110: POP
6111: POP
// if tmp then
6112: LD_VAR 0 2
6116: IFFALSE 6130
// SaveVariable ( tmp , vehiclesInDelta ) ;
6118: LD_VAR 0 2
6122: PPUSH
6123: LD_STRING vehiclesInDelta
6125: PPUSH
6126: CALL_OW 39
// tmp := [ ] ;
6130: LD_ADDR_VAR 0 2
6134: PUSH
6135: EMPTY
6136: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) then
6137: LD_INT 22
6139: PUSH
6140: LD_INT 1
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: PUSH
6147: LD_INT 21
6149: PUSH
6150: LD_INT 3
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PPUSH
6161: CALL_OW 69
6165: IFFALSE 6318
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
6167: LD_ADDR_VAR 0 1
6171: PUSH
6172: LD_INT 22
6174: PUSH
6175: LD_INT 1
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 21
6184: PUSH
6185: LD_INT 3
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PPUSH
6196: CALL_OW 69
6200: PUSH
6201: FOR_IN
6202: IFFALSE 6316
// tmp := tmp ^ [ [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) , GetBWeapon ( i ) ] ] ;
6204: LD_ADDR_VAR 0 2
6208: PUSH
6209: LD_VAR 0 2
6213: PUSH
6214: LD_VAR 0 1
6218: PPUSH
6219: CALL_OW 266
6223: PUSH
6224: LD_VAR 0 1
6228: PPUSH
6229: CALL_OW 267
6233: PUSH
6234: LD_VAR 0 1
6238: PPUSH
6239: CALL_OW 250
6243: PUSH
6244: LD_VAR 0 1
6248: PPUSH
6249: CALL_OW 251
6253: PUSH
6254: LD_VAR 0 1
6258: PPUSH
6259: CALL_OW 254
6263: PUSH
6264: LD_VAR 0 1
6268: PPUSH
6269: LD_INT 1
6271: PPUSH
6272: CALL_OW 268
6276: PUSH
6277: LD_VAR 0 1
6281: PPUSH
6282: LD_INT 2
6284: PPUSH
6285: CALL_OW 268
6289: PUSH
6290: LD_VAR 0 1
6294: PPUSH
6295: CALL_OW 269
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: PUSH
6310: EMPTY
6311: LIST
6312: ADD
6313: ST_TO_ADDR
6314: GO 6201
6316: POP
6317: POP
// if tmp then
6318: LD_VAR 0 2
6322: IFFALSE 6336
// SaveVariable ( tmp , buildingsInDelta ) ;
6324: LD_VAR 0 2
6328: PPUSH
6329: LD_STRING buildingsInDelta
6331: PPUSH
6332: CALL_OW 39
// YouWin ;
6336: CALL_OW 103
// end ; end_of_file
6340: PPOPN 5
6342: END
// export function PrepareArabianTroops ( amount , skill , area ) ; var i , un , tmp ; begin
6343: LD_INT 0
6345: PPUSH
6346: PPUSH
6347: PPUSH
6348: PPUSH
// InitHc ;
6349: CALL_OW 19
// InitUc ;
6353: CALL_OW 18
// uc_side := 2 ;
6357: LD_ADDR_OWVAR 20
6361: PUSH
6362: LD_INT 2
6364: ST_TO_ADDR
// uc_nation := 2 ;
6365: LD_ADDR_OWVAR 21
6369: PUSH
6370: LD_INT 2
6372: ST_TO_ADDR
// if not amount then
6373: LD_VAR 0 1
6377: NOT
6378: IFFALSE 6382
// exit ;
6380: GO 6505
// for i = 1 to amount do
6382: LD_ADDR_VAR 0 5
6386: PUSH
6387: DOUBLE
6388: LD_INT 1
6390: DEC
6391: ST_TO_ADDR
6392: LD_VAR 0 1
6396: PUSH
6397: FOR_TO
6398: IFFALSE 6493
// begin PrepareHuman ( false , 1 , skill ) ;
6400: LD_INT 0
6402: PPUSH
6403: LD_INT 1
6405: PPUSH
6406: LD_VAR 0 2
6410: PPUSH
6411: CALL_OW 380
// un := CreateHuman ;
6415: LD_ADDR_VAR 0 6
6419: PUSH
6420: CALL_OW 44
6424: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , un ) ;
6425: LD_ADDR_VAR 0 7
6429: PUSH
6430: LD_VAR 0 7
6434: PPUSH
6435: LD_INT 1
6437: PPUSH
6438: LD_VAR 0 6
6442: PPUSH
6443: CALL_OW 2
6447: ST_TO_ADDR
// PlaceUnitArea ( un , area , false ) ;
6448: LD_VAR 0 6
6452: PPUSH
6453: LD_VAR 0 3
6457: PPUSH
6458: LD_INT 0
6460: PPUSH
6461: CALL_OW 49
// if i mod 2 = 0 then
6465: LD_VAR 0 5
6469: PUSH
6470: LD_INT 2
6472: MOD
6473: PUSH
6474: LD_INT 0
6476: EQUAL
6477: IFFALSE 6491
// SetTag ( un , 11 ) ;
6479: LD_VAR 0 6
6483: PPUSH
6484: LD_INT 11
6486: PPUSH
6487: CALL_OW 109
// end ;
6491: GO 6397
6493: POP
6494: POP
// result := tmp ;
6495: LD_ADDR_VAR 0 4
6499: PUSH
6500: LD_VAR 0 7
6504: ST_TO_ADDR
// end ;
6505: LD_VAR 0 4
6509: RET
// export ar_forces , ap_killers ; every 0 0$1 trigger Delta do var i , timer , more_troops , skill , eng , un , veh , force ;
6510: LD_EXP 6
6514: IFFALSE 7592
6516: GO 6518
6518: DISABLE
6519: LD_INT 0
6521: PPUSH
6522: PPUSH
6523: PPUSH
6524: PPUSH
6525: PPUSH
6526: PPUSH
6527: PPUSH
6528: PPUSH
// begin more_troops := false ;
6529: LD_ADDR_VAR 0 3
6533: PUSH
6534: LD_INT 0
6536: ST_TO_ADDR
// skill := [ 3 , 4 , 5 , 5 ] [ Difficulty ] ;
6537: LD_ADDR_VAR 0 4
6541: PUSH
6542: LD_INT 3
6544: PUSH
6545: LD_INT 4
6547: PUSH
6548: LD_INT 5
6550: PUSH
6551: LD_INT 5
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: PUSH
6560: LD_OWVAR 67
6564: ARRAY
6565: ST_TO_ADDR
// timer := [ 5 5$00 , 4 4$00 , 3 3$00 , 2 2$30 ] [ Difficulty ] ;
6566: LD_ADDR_VAR 0 2
6570: PUSH
6571: LD_INT 10500
6573: PUSH
6574: LD_INT 8400
6576: PUSH
6577: LD_INT 6300
6579: PUSH
6580: LD_INT 5250
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: PUSH
6589: LD_OWVAR 67
6593: ARRAY
6594: ST_TO_ADDR
// force := [ ] ;
6595: LD_ADDR_VAR 0 8
6599: PUSH
6600: EMPTY
6601: ST_TO_ADDR
// ar_forces := [ ] ;
6602: LD_ADDR_EXP 28
6606: PUSH
6607: EMPTY
6608: ST_TO_ADDR
// ap_killers := [ ] ;
6609: LD_ADDR_EXP 29
6613: PUSH
6614: EMPTY
6615: ST_TO_ADDR
// Wait ( timer ) ;
6616: LD_VAR 0 2
6620: PPUSH
6621: CALL_OW 67
// if Denis and GetSide ( Denis ) = 4 then
6625: LD_EXP 19
6629: PUSH
6630: LD_EXP 19
6634: PPUSH
6635: CALL_OW 255
6639: PUSH
6640: LD_INT 4
6642: EQUAL
6643: AND
6644: IFFALSE 6653
// Wait ( 0 0$45 ) ;
6646: LD_INT 1575
6648: PPUSH
6649: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_armoury ] ] ) then
6653: LD_INT 22
6655: PUSH
6656: LD_INT 1
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PUSH
6663: LD_INT 30
6665: PUSH
6666: LD_INT 4
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PPUSH
6677: CALL_OW 69
6681: IFFALSE 6698
// begin wait ( 1 1$25 ) ;
6683: LD_INT 2975
6685: PPUSH
6686: CALL_OW 67
// more_troops := true ;
6690: LD_ADDR_VAR 0 3
6694: PUSH
6695: LD_INT 1
6697: ST_TO_ADDR
// end ; if more_troops then
6698: LD_VAR 0 3
6702: IFFALSE 6898
// begin force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , arArea2 ) ;
6704: LD_ADDR_VAR 0 8
6708: PUSH
6709: LD_INT 4
6711: PUSH
6712: LD_INT 5
6714: PUSH
6715: LD_INT 6
6717: PUSH
6718: LD_INT 7
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: PUSH
6727: LD_OWVAR 67
6731: ARRAY
6732: PPUSH
6733: LD_VAR 0 4
6737: PPUSH
6738: LD_INT 14
6740: PPUSH
6741: CALL 6343 0 3
6745: ST_TO_ADDR
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_heavy_machine_gun , ru_heavy_machine_gun , ru_gatling_gun , ru_gun ] [ Difficulty ] , 90 ) ;
6746: LD_ADDR_VAR 0 7
6750: PUSH
6751: LD_INT 2
6753: PPUSH
6754: LD_INT 3
6756: PPUSH
6757: LD_INT 22
6759: PPUSH
6760: LD_INT 1
6762: PPUSH
6763: LD_INT 1
6765: PPUSH
6766: LD_INT 42
6768: PUSH
6769: LD_INT 42
6771: PUSH
6772: LD_INT 43
6774: PUSH
6775: LD_INT 44
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: PUSH
6784: LD_OWVAR 67
6788: ARRAY
6789: PPUSH
6790: LD_INT 90
6792: PPUSH
6793: CALL 435 0 7
6797: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6798: LD_VAR 0 7
6802: PPUSH
6803: LD_INT 4
6805: PPUSH
6806: CALL_OW 233
// PlaceUnitArea ( veh , arArea1 , false ) ;
6810: LD_VAR 0 7
6814: PPUSH
6815: LD_INT 13
6817: PPUSH
6818: LD_INT 0
6820: PPUSH
6821: CALL_OW 49
// uc_side := 2 ;
6825: LD_ADDR_OWVAR 20
6829: PUSH
6830: LD_INT 2
6832: ST_TO_ADDR
// uc_nation := 2 ;
6833: LD_ADDR_OWVAR 21
6837: PUSH
6838: LD_INT 2
6840: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6841: LD_INT 0
6843: PPUSH
6844: LD_INT 1
6846: PPUSH
6847: LD_VAR 0 4
6851: PPUSH
6852: CALL_OW 380
// un := CreateHuman ;
6856: LD_ADDR_VAR 0 6
6860: PUSH
6861: CALL_OW 44
6865: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
6866: LD_VAR 0 6
6870: PPUSH
6871: LD_VAR 0 7
6875: PPUSH
6876: CALL_OW 52
// force := force ^ un ;
6880: LD_ADDR_VAR 0 8
6884: PUSH
6885: LD_VAR 0 8
6889: PUSH
6890: LD_VAR 0 6
6894: ADD
6895: ST_TO_ADDR
// end else
6896: GO 6940
// begin force := PrepareArabianTroops ( [ 3 , 4 , 5 , 6 ] [ Difficulty ] , skill , arArea2 ) ;
6898: LD_ADDR_VAR 0 8
6902: PUSH
6903: LD_INT 3
6905: PUSH
6906: LD_INT 4
6908: PUSH
6909: LD_INT 5
6911: PUSH
6912: LD_INT 6
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: PUSH
6921: LD_OWVAR 67
6925: ARRAY
6926: PPUSH
6927: LD_VAR 0 4
6931: PPUSH
6932: LD_INT 14
6934: PPUSH
6935: CALL 6343 0 3
6939: ST_TO_ADDR
// end ; if force then
6940: LD_VAR 0 8
6944: IFFALSE 6956
// ar_forces := force ;
6946: LD_ADDR_EXP 28
6950: PUSH
6951: LD_VAR 0 8
6955: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
6956: LD_INT 35
6958: PPUSH
6959: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
6963: LD_INT 22
6965: PUSH
6966: LD_INT 2
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PUSH
6973: LD_INT 21
6975: PUSH
6976: LD_INT 1
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PPUSH
6987: CALL_OW 69
6991: PUSH
6992: LD_INT 0
6994: EQUAL
6995: IFFALSE 6956
// wait ( timer ) ;
6997: LD_VAR 0 2
7001: PPUSH
7002: CALL_OW 67
// force := PrepareArabianTroops ( [ 4 , 5 , 6 , 7 ] [ Difficulty ] , skill , [ arArea1 , arArea2 ] [ rand ( 1 , 2 ) ] ) ;
7006: LD_ADDR_VAR 0 8
7010: PUSH
7011: LD_INT 4
7013: PUSH
7014: LD_INT 5
7016: PUSH
7017: LD_INT 6
7019: PUSH
7020: LD_INT 7
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: PUSH
7029: LD_OWVAR 67
7033: ARRAY
7034: PPUSH
7035: LD_VAR 0 4
7039: PPUSH
7040: LD_INT 13
7042: PUSH
7043: LD_INT 14
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 1
7052: PPUSH
7053: LD_INT 2
7055: PPUSH
7056: CALL_OW 12
7060: ARRAY
7061: PPUSH
7062: CALL 6343 0 3
7066: ST_TO_ADDR
// if Difficulty > 1 and Delta then
7067: LD_OWVAR 67
7071: PUSH
7072: LD_INT 1
7074: GREATER
7075: PUSH
7076: LD_EXP 6
7080: AND
7081: IFFALSE 7160
// begin uc_side := 2 ;
7083: LD_ADDR_OWVAR 20
7087: PUSH
7088: LD_INT 2
7090: ST_TO_ADDR
// uc_nation := 2 ;
7091: LD_ADDR_OWVAR 21
7095: PUSH
7096: LD_INT 2
7098: ST_TO_ADDR
// PrepareHuman ( false , 2 , skill ) ;
7099: LD_INT 0
7101: PPUSH
7102: LD_INT 2
7104: PPUSH
7105: LD_VAR 0 4
7109: PPUSH
7110: CALL_OW 380
// eng := CreateHuman ;
7114: LD_ADDR_VAR 0 5
7118: PUSH
7119: CALL_OW 44
7123: ST_TO_ADDR
// PlaceUnitArea ( eng , arArea1 , false ) ;
7124: LD_VAR 0 5
7128: PPUSH
7129: LD_INT 13
7131: PPUSH
7132: LD_INT 0
7134: PPUSH
7135: CALL_OW 49
// Wait ( 3 ) ;
7139: LD_INT 3
7141: PPUSH
7142: CALL_OW 67
// AddComEnterUnit ( eng , Delta ) ;
7146: LD_VAR 0 5
7150: PPUSH
7151: LD_EXP 6
7155: PPUSH
7156: CALL_OW 180
// end ; if force then
7160: LD_VAR 0 8
7164: IFFALSE 7176
// ar_forces := force ;
7166: LD_ADDR_EXP 28
7170: PUSH
7171: LD_VAR 0 8
7175: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
7176: LD_INT 35
7178: PPUSH
7179: CALL_OW 67
// if eng then
7183: LD_VAR 0 5
7187: IFFALSE 7241
// if GetSide ( Delta ) = 2 and IsOk ( eng ) and not IsInUnit ( eng ) then
7189: LD_EXP 6
7193: PPUSH
7194: CALL_OW 255
7198: PUSH
7199: LD_INT 2
7201: EQUAL
7202: PUSH
7203: LD_VAR 0 5
7207: PPUSH
7208: CALL_OW 302
7212: AND
7213: PUSH
7214: LD_VAR 0 5
7218: PPUSH
7219: CALL_OW 310
7223: NOT
7224: AND
7225: IFFALSE 7241
// ComEnterUnit ( eng , Delta ) ;
7227: LD_VAR 0 5
7231: PPUSH
7232: LD_EXP 6
7236: PPUSH
7237: CALL_OW 120
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 ;
7241: LD_INT 22
7243: PUSH
7244: LD_INT 2
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 21
7253: PUSH
7254: LD_INT 1
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PPUSH
7265: CALL_OW 69
7269: PUSH
7270: LD_INT 0
7272: EQUAL
7273: IFFALSE 7176
// Wait ( 2 2$00 ) ;
7275: LD_INT 4200
7277: PPUSH
7278: CALL_OW 67
// ap_killers := PrepareArabianTroops ( [ 1 , 2 , 2 , 2 ] [ Difficulty ] , skill , arArea1 ) ;
7282: LD_ADDR_EXP 29
7286: PUSH
7287: LD_INT 1
7289: PUSH
7290: LD_INT 2
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: LD_INT 2
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: PUSH
7305: LD_OWVAR 67
7309: ARRAY
7310: PPUSH
7311: LD_VAR 0 4
7315: PPUSH
7316: LD_INT 13
7318: PPUSH
7319: CALL 6343 0 3
7323: ST_TO_ADDR
// Wait ( timer * 2 ) ;
7324: LD_VAR 0 2
7328: PUSH
7329: LD_INT 2
7331: MUL
7332: PPUSH
7333: CALL_OW 67
// ar_forces := PrepareArabianTroops ( [ 5 , 6 , 7 , 8 ] [ Difficulty ] , skill , arArea1 ) ^ PrepareArabianTroops ( [ 3 , 4 , 4 , 4 ] [ Difficulty ] , skill , arArea2 ) ;
7337: LD_ADDR_EXP 28
7341: PUSH
7342: LD_INT 5
7344: PUSH
7345: LD_INT 6
7347: PUSH
7348: LD_INT 7
7350: PUSH
7351: LD_INT 8
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: LIST
7358: LIST
7359: PUSH
7360: LD_OWVAR 67
7364: ARRAY
7365: PPUSH
7366: LD_VAR 0 4
7370: PPUSH
7371: LD_INT 13
7373: PPUSH
7374: CALL 6343 0 3
7378: PUSH
7379: LD_INT 3
7381: PUSH
7382: LD_INT 4
7384: PUSH
7385: LD_INT 4
7387: PUSH
7388: LD_INT 4
7390: PUSH
7391: EMPTY
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: PUSH
7397: LD_OWVAR 67
7401: ARRAY
7402: PPUSH
7403: LD_VAR 0 4
7407: PPUSH
7408: LD_INT 14
7410: PPUSH
7411: CALL 6343 0 3
7415: ADD
7416: ST_TO_ADDR
// if Difficulty < 4 then
7417: LD_OWVAR 67
7421: PUSH
7422: LD_INT 4
7424: LESS
7425: IFFALSE 7429
// exit ;
7427: GO 7592
// veh := PrepareTank ( 2 , 3 , ru_medium_tracked , engine_combustion , control_manual , ru_gun , 90 ) ;
7429: LD_ADDR_VAR 0 7
7433: PUSH
7434: LD_INT 2
7436: PPUSH
7437: LD_INT 3
7439: PPUSH
7440: LD_INT 22
7442: PPUSH
7443: LD_INT 1
7445: PPUSH
7446: LD_INT 1
7448: PPUSH
7449: LD_INT 44
7451: PPUSH
7452: LD_INT 90
7454: PPUSH
7455: CALL 435 0 7
7459: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
7460: LD_VAR 0 7
7464: PPUSH
7465: LD_INT 1
7467: PPUSH
7468: CALL_OW 233
// PlaceUnitXY ( veh , 28 , 51 , false ) ;
7472: LD_VAR 0 7
7476: PPUSH
7477: LD_INT 28
7479: PPUSH
7480: LD_INT 51
7482: PPUSH
7483: LD_INT 0
7485: PPUSH
7486: CALL_OW 48
// uc_side := 2 ;
7490: LD_ADDR_OWVAR 20
7494: PUSH
7495: LD_INT 2
7497: ST_TO_ADDR
// uc_nation := 2 ;
7498: LD_ADDR_OWVAR 21
7502: PUSH
7503: LD_INT 2
7505: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
7506: LD_INT 0
7508: PPUSH
7509: LD_INT 1
7511: PPUSH
7512: LD_VAR 0 4
7516: PPUSH
7517: CALL_OW 380
// un := CreateHuman ;
7521: LD_ADDR_VAR 0 6
7525: PUSH
7526: CALL_OW 44
7530: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
7531: LD_VAR 0 6
7535: PPUSH
7536: LD_VAR 0 7
7540: PPUSH
7541: CALL_OW 52
// ar_forces := Join ( ar_forces , un ) ;
7545: LD_ADDR_EXP 28
7549: PUSH
7550: LD_EXP 28
7554: PPUSH
7555: LD_VAR 0 6
7559: PPUSH
7560: CALL 66973 0 2
7564: ST_TO_ADDR
// ar_forces := ar_forces union PrepareArabianTroops ( 4 , skill , arArea3 ) ;
7565: LD_ADDR_EXP 28
7569: PUSH
7570: LD_EXP 28
7574: PUSH
7575: LD_INT 4
7577: PPUSH
7578: LD_VAR 0 4
7582: PPUSH
7583: LD_INT 19
7585: PPUSH
7586: CALL 6343 0 3
7590: UNION
7591: ST_TO_ADDR
// end ;
7592: PPOPN 8
7594: END
// every 0 0$03 trigger ar_forces do var i , target ;
7595: LD_EXP 28
7599: IFFALSE 7797
7601: GO 7603
7603: DISABLE
7604: LD_INT 0
7606: PPUSH
7607: PPUSH
// begin enable ;
7608: ENABLE
// if not ar_forces then
7609: LD_EXP 28
7613: NOT
7614: IFFALSE 7618
// exit ;
7616: GO 7797
// if Delta then
7618: LD_EXP 6
7622: IFFALSE 7636
// target := Delta else
7624: LD_ADDR_VAR 0 2
7628: PUSH
7629: LD_EXP 6
7633: ST_TO_ADDR
7634: GO 7646
// target := JMM ;
7636: LD_ADDR_VAR 0 2
7640: PUSH
7641: LD_EXP 16
7645: ST_TO_ADDR
// for i in ar_forces do
7646: LD_ADDR_VAR 0 1
7650: PUSH
7651: LD_EXP 28
7655: PUSH
7656: FOR_IN
7657: IFFALSE 7795
// begin if i in FilterAllUnits ( [ f_driving ] ) then
7659: LD_VAR 0 1
7663: PUSH
7664: LD_INT 55
7666: PUSH
7667: EMPTY
7668: LIST
7669: PPUSH
7670: CALL_OW 69
7674: IN
7675: IFFALSE 7718
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , IsInUnit ( i ) ) ) else
7677: LD_VAR 0 1
7681: PPUSH
7682: LD_INT 22
7684: PUSH
7685: LD_INT 1
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PPUSH
7692: CALL_OW 69
7696: PPUSH
7697: LD_VAR 0 1
7701: PPUSH
7702: CALL_OW 310
7706: PPUSH
7707: CALL_OW 74
7711: PPUSH
7712: CALL_OW 115
7716: GO 7793
// if GetDistUnits ( i , target ) > 30 then
7718: LD_VAR 0 1
7722: PPUSH
7723: LD_VAR 0 2
7727: PPUSH
7728: CALL_OW 296
7732: PUSH
7733: LD_INT 30
7735: GREATER
7736: IFFALSE 7769
// ComAgressiveMove ( i , GetX ( target ) , GetY ( target ) ) else
7738: LD_VAR 0 1
7742: PPUSH
7743: LD_VAR 0 2
7747: PPUSH
7748: CALL_OW 250
7752: PPUSH
7753: LD_VAR 0 2
7757: PPUSH
7758: CALL_OW 251
7762: PPUSH
7763: CALL_OW 114
7767: GO 7793
// Attack ( i , FilterAllUnits ( [ f_enemy , 2 ] ) ) ;
7769: LD_VAR 0 1
7773: PPUSH
7774: LD_INT 81
7776: PUSH
7777: LD_INT 2
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: PPUSH
7784: CALL_OW 69
7788: PPUSH
7789: CALL 927 0 2
// end ;
7793: GO 7656
7795: POP
7796: POP
// end ;
7797: PPOPN 2
7799: END
// every 0 0$01 trigger ap_killers do var filter , i , target ;
7800: LD_EXP 29
7804: IFFALSE 7964
7806: GO 7808
7808: DISABLE
7809: LD_INT 0
7811: PPUSH
7812: PPUSH
7813: PPUSH
// begin enable ;
7814: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
7815: LD_ADDR_VAR 0 1
7819: PUSH
7820: LD_INT 22
7822: PUSH
7823: LD_INT 0
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PUSH
7830: LD_INT 25
7832: PUSH
7833: LD_INT 12
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: PPUSH
7844: CALL_OW 69
7848: ST_TO_ADDR
// if not filter then
7849: LD_VAR 0 1
7853: NOT
7854: IFFALSE 7881
// begin ar_forces := ar_forces ^ ap_killers ;
7856: LD_ADDR_EXP 28
7860: PUSH
7861: LD_EXP 28
7865: PUSH
7866: LD_EXP 29
7870: ADD
7871: ST_TO_ADDR
// ap_killers := [ ] ;
7872: LD_ADDR_EXP 29
7876: PUSH
7877: EMPTY
7878: ST_TO_ADDR
// exit ;
7879: GO 7964
// end ; for i in ap_killers do
7881: LD_ADDR_VAR 0 2
7885: PUSH
7886: LD_EXP 29
7890: PUSH
7891: FOR_IN
7892: IFFALSE 7962
// begin if not IsOk ( i ) then
7894: LD_VAR 0 2
7898: PPUSH
7899: CALL_OW 302
7903: NOT
7904: IFFALSE 7908
// continue ;
7906: GO 7891
// if not HasTask ( i ) then
7908: LD_VAR 0 2
7912: PPUSH
7913: CALL_OW 314
7917: NOT
7918: IFFALSE 7940
// target := NearestUnitToUnit ( filter , i ) ;
7920: LD_ADDR_VAR 0 3
7924: PUSH
7925: LD_VAR 0 1
7929: PPUSH
7930: LD_VAR 0 2
7934: PPUSH
7935: CALL_OW 74
7939: ST_TO_ADDR
// if target then
7940: LD_VAR 0 3
7944: IFFALSE 7960
// ComAttackUnit ( i , target ) ;
7946: LD_VAR 0 2
7950: PPUSH
7951: LD_VAR 0 3
7955: PPUSH
7956: CALL_OW 115
// end ;
7960: GO 7891
7962: POP
7963: POP
// end ; end_of_file
7964: PPOPN 3
7966: END
// every 0 0$40 + 0 0$2 trigger Delta do var i , counter , cr ;
7967: LD_EXP 6
7971: IFFALSE 8107
7973: GO 7975
7975: DISABLE
7976: LD_INT 0
7978: PPUSH
7979: PPUSH
7980: PPUSH
// begin counter := [ 300 , 250 , 220 , 210 ] [ Difficulty ] ;
7981: LD_ADDR_VAR 0 2
7985: PUSH
7986: LD_INT 300
7988: PUSH
7989: LD_INT 250
7991: PUSH
7992: LD_INT 220
7994: PUSH
7995: LD_INT 210
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: PUSH
8004: LD_OWVAR 67
8008: ARRAY
8009: ST_TO_ADDR
// CreateCratesArea ( Rand ( 1 , 3 ) , cratesArea , true ) ;
8010: LD_INT 1
8012: PPUSH
8013: LD_INT 3
8015: PPUSH
8016: CALL_OW 12
8020: PPUSH
8021: LD_INT 7
8023: PPUSH
8024: LD_INT 1
8026: PPUSH
8027: CALL_OW 55
// repeat wait ( rand ( 1 1$30 , 2 2$20 ) ) ;
8031: LD_INT 3150
8033: PPUSH
8034: LD_INT 4900
8036: PPUSH
8037: CALL_OW 12
8041: PPUSH
8042: CALL_OW 67
// cr := rand ( 1 , 5 ) ;
8046: LD_ADDR_VAR 0 3
8050: PUSH
8051: LD_INT 1
8053: PPUSH
8054: LD_INT 5
8056: PPUSH
8057: CALL_OW 12
8061: ST_TO_ADDR
// CreateCratesArea ( cr , cratesArea , true ) ;
8062: LD_VAR 0 3
8066: PPUSH
8067: LD_INT 7
8069: PPUSH
8070: LD_INT 1
8072: PPUSH
8073: CALL_OW 55
// counter := counter - cr * 10 ;
8077: LD_ADDR_VAR 0 2
8081: PUSH
8082: LD_VAR 0 2
8086: PUSH
8087: LD_VAR 0 3
8091: PUSH
8092: LD_INT 10
8094: MUL
8095: MINUS
8096: ST_TO_ADDR
// until counter <= 0 ;
8097: LD_VAR 0 2
8101: PUSH
8102: LD_INT 0
8104: LESSEQUAL
8105: IFFALSE 8031
// end ;
8107: PPOPN 3
8109: END
// every 0 0$03 trigger not Delta do var i ;
8110: LD_EXP 6
8114: NOT
8115: IFFALSE 8185
8117: GO 8119
8119: DISABLE
8120: LD_INT 0
8122: PPUSH
// begin for i = 1 to 5 - Difficulty do
8123: LD_ADDR_VAR 0 1
8127: PUSH
8128: DOUBLE
8129: LD_INT 1
8131: DEC
8132: ST_TO_ADDR
8133: LD_INT 5
8135: PUSH
8136: LD_OWVAR 67
8140: MINUS
8141: PUSH
8142: FOR_TO
8143: IFFALSE 8183
// begin CreateCratesArea ( rand ( 2 , 5 ) , deltaMainArea , true ) ;
8145: LD_INT 2
8147: PPUSH
8148: LD_INT 5
8150: PPUSH
8151: CALL_OW 12
8155: PPUSH
8156: LD_INT 8
8158: PPUSH
8159: LD_INT 1
8161: PPUSH
8162: CALL_OW 55
// Wait ( rand ( 0 0$16 , 0 0$39 ) ) ;
8166: LD_INT 560
8168: PPUSH
8169: LD_INT 1365
8171: PPUSH
8172: CALL_OW 12
8176: PPUSH
8177: CALL_OW 67
// end ;
8181: GO 8142
8183: POP
8184: POP
// end ;
8185: PPOPN 1
8187: END
// every 3 3$00 trigger tick < 15 15$00 do
8188: LD_OWVAR 1
8192: PUSH
8193: LD_INT 31500
8195: LESS
8196: IFFALSE 8256
8198: GO 8200
8200: DISABLE
// begin enable ;
8201: ENABLE
// CreateCratesAnyWhere ( rand ( 1 , 3 ) , true ) ;
8202: LD_INT 1
8204: PPUSH
8205: LD_INT 3
8207: PPUSH
8208: CALL_OW 12
8212: PPUSH
8213: LD_INT 1
8215: PPUSH
8216: CALL_OW 57
// Wait ( rand ( 0 0$38 , 0 0$59 ) ) ;
8220: LD_INT 1330
8222: PPUSH
8223: LD_INT 2065
8225: PPUSH
8226: CALL_OW 12
8230: PPUSH
8231: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 4 ) , riverArea , true ) ;
8235: LD_INT 1
8237: PPUSH
8238: LD_INT 4
8240: PPUSH
8241: CALL_OW 12
8245: PPUSH
8246: LD_INT 15
8248: PPUSH
8249: LD_INT 1
8251: PPUSH
8252: CALL_OW 55
// end ; end_of_file
8256: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
8257: LD_VAR 0 1
8261: PPUSH
8262: CALL 24543 0 1
// if un = JMM then
8266: LD_VAR 0 1
8270: PUSH
8271: LD_EXP 16
8275: EQUAL
8276: IFFALSE 8285
// YouLost ( JMM ) ;
8278: LD_STRING JMM
8280: PPUSH
8281: CALL_OW 104
// if un = Delta then
8285: LD_VAR 0 1
8289: PUSH
8290: LD_EXP 6
8294: EQUAL
8295: IFFALSE 8318
// begin Delta := 0 ;
8297: LD_ADDR_EXP 6
8301: PUSH
8302: LD_INT 0
8304: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
8305: LD_INT 0
8307: PPUSH
8308: LD_INT 1
8310: PPUSH
8311: LD_INT 1
8313: PPUSH
8314: CALL_OW 324
// end ; if un in ar_forces then
8318: LD_VAR 0 1
8322: PUSH
8323: LD_EXP 28
8327: IN
8328: IFFALSE 8346
// ar_forces := ar_forces diff un ;
8330: LD_ADDR_EXP 28
8334: PUSH
8335: LD_EXP 28
8339: PUSH
8340: LD_VAR 0 1
8344: DIFF
8345: ST_TO_ADDR
// if un in ap_killers then
8346: LD_VAR 0 1
8350: PUSH
8351: LD_EXP 29
8355: IN
8356: IFFALSE 8374
// ap_killers := ap_killers diff un ;
8358: LD_ADDR_EXP 29
8362: PUSH
8363: LD_EXP 29
8367: PUSH
8368: LD_VAR 0 1
8372: DIFF
8373: ST_TO_ADDR
// if un in FilterAllUnits ( [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] ] ) then
8374: LD_VAR 0 1
8378: PUSH
8379: LD_INT 2
8381: PUSH
8382: LD_INT 25
8384: PUSH
8385: LD_INT 12
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: PUSH
8392: LD_INT 25
8394: PUSH
8395: LD_INT 16
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: LIST
8406: PPUSH
8407: CALL_OW 69
8411: IN
8412: IFFALSE 8428
// apeKillCounter := apeKillCounter + 1 ;
8414: LD_ADDR_EXP 15
8418: PUSH
8419: LD_EXP 15
8423: PUSH
8424: LD_INT 1
8426: PLUS
8427: ST_TO_ADDR
// end ;
8428: PPOPN 1
8430: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
8431: LD_VAR 0 1
8435: PPUSH
8436: LD_VAR 0 2
8440: PPUSH
8441: CALL 24663 0 2
// end ;
8445: PPOPN 2
8447: END
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 2 and not arab_spotted then
8448: LD_VAR 0 1
8452: PUSH
8453: LD_INT 1
8455: EQUAL
8456: PUSH
8457: LD_VAR 0 2
8461: PUSH
8462: LD_INT 2
8464: EQUAL
8465: AND
8466: PUSH
8467: LD_EXP 13
8471: NOT
8472: AND
8473: IFFALSE 8483
// arab_spotted := true ;
8475: LD_ADDR_EXP 13
8479: PUSH
8480: LD_INT 1
8482: ST_TO_ADDR
// end ;
8483: PPOPN 2
8485: END
// on EndTheMissionRaised ( p ) do begin end_the_mission_allowed := false ;
8486: LD_ADDR_OWVAR 57
8490: PUSH
8491: LD_INT 0
8493: ST_TO_ADDR
// end_mission := true ;
8494: LD_ADDR_EXP 14
8498: PUSH
8499: LD_INT 1
8501: ST_TO_ADDR
// end ;
8502: PPOPN 1
8504: END
// on ApemanTamed ( apeman , sci ) do begin if GetSide ( sci ) = 1 then
8505: LD_VAR 0 2
8509: PPUSH
8510: CALL_OW 255
8514: PUSH
8515: LD_INT 1
8517: EQUAL
8518: IFFALSE 8534
// apeman_counter := apeman_counter + 1 ;
8520: LD_ADDR_EXP 12
8524: PUSH
8525: LD_EXP 12
8529: PUSH
8530: LD_INT 1
8532: PLUS
8533: ST_TO_ADDR
// if not first_apeman_tamed then
8534: LD_EXP 8
8538: NOT
8539: IFFALSE 8738
// begin first_apeman_tamed := true ;
8541: LD_ADDR_EXP 8
8545: PUSH
8546: LD_INT 1
8548: ST_TO_ADDR
// if sci = Gladstone then
8549: LD_VAR 0 2
8553: PUSH
8554: LD_EXP 17
8558: EQUAL
8559: IFFALSE 8573
// Say ( Gladstone , D7b-Glad-1 ) ;
8561: LD_EXP 17
8565: PPUSH
8566: LD_STRING D7b-Glad-1
8568: PPUSH
8569: CALL_OW 88
// if sci = Denis then
8573: LD_VAR 0 2
8577: PUSH
8578: LD_EXP 19
8582: EQUAL
8583: IFFALSE 8597
// Say ( Denis , D7a-Den-1 ) ;
8585: LD_EXP 19
8589: PPUSH
8590: LD_STRING D7a-Den-1
8592: PPUSH
8593: CALL_OW 88
// if not sci in [ JMM , Gladstone , Denis , Lisa , Frank , Bobby , Cyrus , Donaldson ] then
8597: LD_VAR 0 2
8601: PUSH
8602: LD_EXP 16
8606: PUSH
8607: LD_EXP 17
8611: PUSH
8612: LD_EXP 19
8616: PUSH
8617: LD_EXP 22
8621: PUSH
8622: LD_EXP 23
8626: PUSH
8627: LD_EXP 24
8631: PUSH
8632: LD_EXP 25
8636: PUSH
8637: LD_EXP 21
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: IN
8652: NOT
8653: IFFALSE 8696
// begin if GetSex ( sci ) = sex_male then
8655: LD_VAR 0 2
8659: PPUSH
8660: CALL_OW 258
8664: PUSH
8665: LD_INT 1
8667: EQUAL
8668: IFFALSE 8684
// Say ( sci , D7c-Sci1-1 ) else
8670: LD_VAR 0 2
8674: PPUSH
8675: LD_STRING D7c-Sci1-1
8677: PPUSH
8678: CALL_OW 88
8682: GO 8696
// Say ( sci , D7c-FSci1-1 ) ;
8684: LD_VAR 0 2
8688: PPUSH
8689: LD_STRING D7c-FSci1-1
8691: PPUSH
8692: CALL_OW 88
// end ; if sci <> Gladstone then
8696: LD_VAR 0 2
8700: PUSH
8701: LD_EXP 17
8705: NONEQUAL
8706: IFFALSE 8720
// Say ( Gladstone , D7c-Glad-1 ) ;
8708: LD_EXP 17
8712: PPUSH
8713: LD_STRING D7c-Glad-1
8715: PPUSH
8716: CALL_OW 88
// if Lisa then
8720: LD_EXP 22
8724: IFFALSE 8738
// Say ( Lisa , D8-Lisa-1 ) ;
8726: LD_EXP 22
8730: PPUSH
8731: LD_STRING D8-Lisa-1
8733: PPUSH
8734: CALL_OW 88
// end ; end ; end_of_file end_of_file
8738: PPOPN 2
8740: END
// export globalGameSaveCounter ; every 0 0$1 do
8741: GO 8743
8743: DISABLE
// begin enable ;
8744: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8745: LD_STRING updateTimer(
8747: PUSH
8748: LD_OWVAR 1
8752: STR
8753: PUSH
8754: LD_STRING );
8756: STR
8757: PPUSH
8758: CALL_OW 559
// end ;
8762: END
// every 0 0$1 do
8763: GO 8765
8765: DISABLE
// begin globalGameSaveCounter := 0 ;
8766: LD_ADDR_EXP 30
8770: PUSH
8771: LD_INT 0
8773: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
8774: LD_STRING setGameSaveCounter(0)
8776: PPUSH
8777: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
8781: LD_STRING initStreamRollete();
8783: PPUSH
8784: CALL_OW 559
// InitStreamMode ;
8788: CALL 10114 0 0
// DefineStreamItems ( false ) ;
8792: LD_INT 0
8794: PPUSH
8795: CALL 10578 0 1
// end ;
8799: END
// export function SOS_MapStart ( ) ; begin
8800: LD_INT 0
8802: PPUSH
// if streamModeActive then
8803: LD_EXP 31
8807: IFFALSE 8816
// DefineStreamItems ( true ) ;
8809: LD_INT 1
8811: PPUSH
8812: CALL 10578 0 1
// UpdateLuaVariables ( ) ;
8816: CALL 8833 0 0
// UpdateFactoryWaypoints ( ) ;
8820: CALL 23447 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8824: CALL 23704 0 0
// end ;
8828: LD_VAR 0 1
8832: RET
// function UpdateLuaVariables ( ) ; begin
8833: LD_INT 0
8835: PPUSH
// if globalGameSaveCounter then
8836: LD_EXP 30
8840: IFFALSE 8874
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
8842: LD_ADDR_EXP 30
8846: PUSH
8847: LD_EXP 30
8851: PPUSH
8852: CALL 68334 0 1
8856: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8857: LD_STRING setGameSaveCounter(
8859: PUSH
8860: LD_EXP 30
8864: STR
8865: PUSH
8866: LD_STRING )
8868: STR
8869: PPUSH
8870: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
8874: LD_STRING setGameDifficulty(
8876: PUSH
8877: LD_OWVAR 67
8881: STR
8882: PUSH
8883: LD_STRING )
8885: STR
8886: PPUSH
8887: CALL_OW 559
// end ;
8891: LD_VAR 0 1
8895: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8896: LD_INT 0
8898: PPUSH
// if p2 = stream_mode then
8899: LD_VAR 0 2
8903: PUSH
8904: LD_INT 100
8906: EQUAL
8907: IFFALSE 9910
// begin if not StreamModeActive then
8909: LD_EXP 31
8913: NOT
8914: IFFALSE 8924
// StreamModeActive := true ;
8916: LD_ADDR_EXP 31
8920: PUSH
8921: LD_INT 1
8923: ST_TO_ADDR
// if p3 = 0 then
8924: LD_VAR 0 3
8928: PUSH
8929: LD_INT 0
8931: EQUAL
8932: IFFALSE 8938
// InitStreamMode ;
8934: CALL 10114 0 0
// if p3 = 1 then
8938: LD_VAR 0 3
8942: PUSH
8943: LD_INT 1
8945: EQUAL
8946: IFFALSE 8956
// sRocket := true ;
8948: LD_ADDR_EXP 36
8952: PUSH
8953: LD_INT 1
8955: ST_TO_ADDR
// if p3 = 2 then
8956: LD_VAR 0 3
8960: PUSH
8961: LD_INT 2
8963: EQUAL
8964: IFFALSE 8974
// sSpeed := true ;
8966: LD_ADDR_EXP 35
8970: PUSH
8971: LD_INT 1
8973: ST_TO_ADDR
// if p3 = 3 then
8974: LD_VAR 0 3
8978: PUSH
8979: LD_INT 3
8981: EQUAL
8982: IFFALSE 8992
// sEngine := true ;
8984: LD_ADDR_EXP 37
8988: PUSH
8989: LD_INT 1
8991: ST_TO_ADDR
// if p3 = 4 then
8992: LD_VAR 0 3
8996: PUSH
8997: LD_INT 4
8999: EQUAL
9000: IFFALSE 9010
// sSpec := true ;
9002: LD_ADDR_EXP 34
9006: PUSH
9007: LD_INT 1
9009: ST_TO_ADDR
// if p3 = 5 then
9010: LD_VAR 0 3
9014: PUSH
9015: LD_INT 5
9017: EQUAL
9018: IFFALSE 9028
// sLevel := true ;
9020: LD_ADDR_EXP 38
9024: PUSH
9025: LD_INT 1
9027: ST_TO_ADDR
// if p3 = 6 then
9028: LD_VAR 0 3
9032: PUSH
9033: LD_INT 6
9035: EQUAL
9036: IFFALSE 9046
// sArmoury := true ;
9038: LD_ADDR_EXP 39
9042: PUSH
9043: LD_INT 1
9045: ST_TO_ADDR
// if p3 = 7 then
9046: LD_VAR 0 3
9050: PUSH
9051: LD_INT 7
9053: EQUAL
9054: IFFALSE 9064
// sRadar := true ;
9056: LD_ADDR_EXP 40
9060: PUSH
9061: LD_INT 1
9063: ST_TO_ADDR
// if p3 = 8 then
9064: LD_VAR 0 3
9068: PUSH
9069: LD_INT 8
9071: EQUAL
9072: IFFALSE 9082
// sBunker := true ;
9074: LD_ADDR_EXP 41
9078: PUSH
9079: LD_INT 1
9081: ST_TO_ADDR
// if p3 = 9 then
9082: LD_VAR 0 3
9086: PUSH
9087: LD_INT 9
9089: EQUAL
9090: IFFALSE 9100
// sHack := true ;
9092: LD_ADDR_EXP 42
9096: PUSH
9097: LD_INT 1
9099: ST_TO_ADDR
// if p3 = 10 then
9100: LD_VAR 0 3
9104: PUSH
9105: LD_INT 10
9107: EQUAL
9108: IFFALSE 9118
// sFire := true ;
9110: LD_ADDR_EXP 43
9114: PUSH
9115: LD_INT 1
9117: ST_TO_ADDR
// if p3 = 11 then
9118: LD_VAR 0 3
9122: PUSH
9123: LD_INT 11
9125: EQUAL
9126: IFFALSE 9136
// sRefresh := true ;
9128: LD_ADDR_EXP 44
9132: PUSH
9133: LD_INT 1
9135: ST_TO_ADDR
// if p3 = 12 then
9136: LD_VAR 0 3
9140: PUSH
9141: LD_INT 12
9143: EQUAL
9144: IFFALSE 9154
// sExp := true ;
9146: LD_ADDR_EXP 45
9150: PUSH
9151: LD_INT 1
9153: ST_TO_ADDR
// if p3 = 13 then
9154: LD_VAR 0 3
9158: PUSH
9159: LD_INT 13
9161: EQUAL
9162: IFFALSE 9172
// sDepot := true ;
9164: LD_ADDR_EXP 46
9168: PUSH
9169: LD_INT 1
9171: ST_TO_ADDR
// if p3 = 14 then
9172: LD_VAR 0 3
9176: PUSH
9177: LD_INT 14
9179: EQUAL
9180: IFFALSE 9190
// sFlag := true ;
9182: LD_ADDR_EXP 47
9186: PUSH
9187: LD_INT 1
9189: ST_TO_ADDR
// if p3 = 15 then
9190: LD_VAR 0 3
9194: PUSH
9195: LD_INT 15
9197: EQUAL
9198: IFFALSE 9208
// sKamikadze := true ;
9200: LD_ADDR_EXP 55
9204: PUSH
9205: LD_INT 1
9207: ST_TO_ADDR
// if p3 = 16 then
9208: LD_VAR 0 3
9212: PUSH
9213: LD_INT 16
9215: EQUAL
9216: IFFALSE 9226
// sTroll := true ;
9218: LD_ADDR_EXP 56
9222: PUSH
9223: LD_INT 1
9225: ST_TO_ADDR
// if p3 = 17 then
9226: LD_VAR 0 3
9230: PUSH
9231: LD_INT 17
9233: EQUAL
9234: IFFALSE 9244
// sSlow := true ;
9236: LD_ADDR_EXP 57
9240: PUSH
9241: LD_INT 1
9243: ST_TO_ADDR
// if p3 = 18 then
9244: LD_VAR 0 3
9248: PUSH
9249: LD_INT 18
9251: EQUAL
9252: IFFALSE 9262
// sLack := true ;
9254: LD_ADDR_EXP 58
9258: PUSH
9259: LD_INT 1
9261: ST_TO_ADDR
// if p3 = 19 then
9262: LD_VAR 0 3
9266: PUSH
9267: LD_INT 19
9269: EQUAL
9270: IFFALSE 9280
// sTank := true ;
9272: LD_ADDR_EXP 60
9276: PUSH
9277: LD_INT 1
9279: ST_TO_ADDR
// if p3 = 20 then
9280: LD_VAR 0 3
9284: PUSH
9285: LD_INT 20
9287: EQUAL
9288: IFFALSE 9298
// sRemote := true ;
9290: LD_ADDR_EXP 61
9294: PUSH
9295: LD_INT 1
9297: ST_TO_ADDR
// if p3 = 21 then
9298: LD_VAR 0 3
9302: PUSH
9303: LD_INT 21
9305: EQUAL
9306: IFFALSE 9316
// sPowell := true ;
9308: LD_ADDR_EXP 62
9312: PUSH
9313: LD_INT 1
9315: ST_TO_ADDR
// if p3 = 22 then
9316: LD_VAR 0 3
9320: PUSH
9321: LD_INT 22
9323: EQUAL
9324: IFFALSE 9334
// sTeleport := true ;
9326: LD_ADDR_EXP 65
9330: PUSH
9331: LD_INT 1
9333: ST_TO_ADDR
// if p3 = 23 then
9334: LD_VAR 0 3
9338: PUSH
9339: LD_INT 23
9341: EQUAL
9342: IFFALSE 9352
// sOilTower := true ;
9344: LD_ADDR_EXP 67
9348: PUSH
9349: LD_INT 1
9351: ST_TO_ADDR
// if p3 = 24 then
9352: LD_VAR 0 3
9356: PUSH
9357: LD_INT 24
9359: EQUAL
9360: IFFALSE 9370
// sShovel := true ;
9362: LD_ADDR_EXP 68
9366: PUSH
9367: LD_INT 1
9369: ST_TO_ADDR
// if p3 = 25 then
9370: LD_VAR 0 3
9374: PUSH
9375: LD_INT 25
9377: EQUAL
9378: IFFALSE 9388
// sSheik := true ;
9380: LD_ADDR_EXP 69
9384: PUSH
9385: LD_INT 1
9387: ST_TO_ADDR
// if p3 = 26 then
9388: LD_VAR 0 3
9392: PUSH
9393: LD_INT 26
9395: EQUAL
9396: IFFALSE 9406
// sEarthquake := true ;
9398: LD_ADDR_EXP 71
9402: PUSH
9403: LD_INT 1
9405: ST_TO_ADDR
// if p3 = 27 then
9406: LD_VAR 0 3
9410: PUSH
9411: LD_INT 27
9413: EQUAL
9414: IFFALSE 9424
// sAI := true ;
9416: LD_ADDR_EXP 72
9420: PUSH
9421: LD_INT 1
9423: ST_TO_ADDR
// if p3 = 28 then
9424: LD_VAR 0 3
9428: PUSH
9429: LD_INT 28
9431: EQUAL
9432: IFFALSE 9442
// sCargo := true ;
9434: LD_ADDR_EXP 75
9438: PUSH
9439: LD_INT 1
9441: ST_TO_ADDR
// if p3 = 29 then
9442: LD_VAR 0 3
9446: PUSH
9447: LD_INT 29
9449: EQUAL
9450: IFFALSE 9460
// sDLaser := true ;
9452: LD_ADDR_EXP 76
9456: PUSH
9457: LD_INT 1
9459: ST_TO_ADDR
// if p3 = 30 then
9460: LD_VAR 0 3
9464: PUSH
9465: LD_INT 30
9467: EQUAL
9468: IFFALSE 9478
// sExchange := true ;
9470: LD_ADDR_EXP 77
9474: PUSH
9475: LD_INT 1
9477: ST_TO_ADDR
// if p3 = 31 then
9478: LD_VAR 0 3
9482: PUSH
9483: LD_INT 31
9485: EQUAL
9486: IFFALSE 9496
// sFac := true ;
9488: LD_ADDR_EXP 78
9492: PUSH
9493: LD_INT 1
9495: ST_TO_ADDR
// if p3 = 32 then
9496: LD_VAR 0 3
9500: PUSH
9501: LD_INT 32
9503: EQUAL
9504: IFFALSE 9514
// sPower := true ;
9506: LD_ADDR_EXP 79
9510: PUSH
9511: LD_INT 1
9513: ST_TO_ADDR
// if p3 = 33 then
9514: LD_VAR 0 3
9518: PUSH
9519: LD_INT 33
9521: EQUAL
9522: IFFALSE 9532
// sRandom := true ;
9524: LD_ADDR_EXP 80
9528: PUSH
9529: LD_INT 1
9531: ST_TO_ADDR
// if p3 = 34 then
9532: LD_VAR 0 3
9536: PUSH
9537: LD_INT 34
9539: EQUAL
9540: IFFALSE 9550
// sShield := true ;
9542: LD_ADDR_EXP 81
9546: PUSH
9547: LD_INT 1
9549: ST_TO_ADDR
// if p3 = 35 then
9550: LD_VAR 0 3
9554: PUSH
9555: LD_INT 35
9557: EQUAL
9558: IFFALSE 9568
// sTime := true ;
9560: LD_ADDR_EXP 82
9564: PUSH
9565: LD_INT 1
9567: ST_TO_ADDR
// if p3 = 36 then
9568: LD_VAR 0 3
9572: PUSH
9573: LD_INT 36
9575: EQUAL
9576: IFFALSE 9586
// sTools := true ;
9578: LD_ADDR_EXP 83
9582: PUSH
9583: LD_INT 1
9585: ST_TO_ADDR
// if p3 = 101 then
9586: LD_VAR 0 3
9590: PUSH
9591: LD_INT 101
9593: EQUAL
9594: IFFALSE 9604
// sSold := true ;
9596: LD_ADDR_EXP 48
9600: PUSH
9601: LD_INT 1
9603: ST_TO_ADDR
// if p3 = 102 then
9604: LD_VAR 0 3
9608: PUSH
9609: LD_INT 102
9611: EQUAL
9612: IFFALSE 9622
// sDiff := true ;
9614: LD_ADDR_EXP 49
9618: PUSH
9619: LD_INT 1
9621: ST_TO_ADDR
// if p3 = 103 then
9622: LD_VAR 0 3
9626: PUSH
9627: LD_INT 103
9629: EQUAL
9630: IFFALSE 9640
// sFog := true ;
9632: LD_ADDR_EXP 52
9636: PUSH
9637: LD_INT 1
9639: ST_TO_ADDR
// if p3 = 104 then
9640: LD_VAR 0 3
9644: PUSH
9645: LD_INT 104
9647: EQUAL
9648: IFFALSE 9658
// sReset := true ;
9650: LD_ADDR_EXP 53
9654: PUSH
9655: LD_INT 1
9657: ST_TO_ADDR
// if p3 = 105 then
9658: LD_VAR 0 3
9662: PUSH
9663: LD_INT 105
9665: EQUAL
9666: IFFALSE 9676
// sSun := true ;
9668: LD_ADDR_EXP 54
9672: PUSH
9673: LD_INT 1
9675: ST_TO_ADDR
// if p3 = 106 then
9676: LD_VAR 0 3
9680: PUSH
9681: LD_INT 106
9683: EQUAL
9684: IFFALSE 9694
// sTiger := true ;
9686: LD_ADDR_EXP 50
9690: PUSH
9691: LD_INT 1
9693: ST_TO_ADDR
// if p3 = 107 then
9694: LD_VAR 0 3
9698: PUSH
9699: LD_INT 107
9701: EQUAL
9702: IFFALSE 9712
// sBomb := true ;
9704: LD_ADDR_EXP 51
9708: PUSH
9709: LD_INT 1
9711: ST_TO_ADDR
// if p3 = 108 then
9712: LD_VAR 0 3
9716: PUSH
9717: LD_INT 108
9719: EQUAL
9720: IFFALSE 9730
// sWound := true ;
9722: LD_ADDR_EXP 59
9726: PUSH
9727: LD_INT 1
9729: ST_TO_ADDR
// if p3 = 109 then
9730: LD_VAR 0 3
9734: PUSH
9735: LD_INT 109
9737: EQUAL
9738: IFFALSE 9748
// sBetray := true ;
9740: LD_ADDR_EXP 63
9744: PUSH
9745: LD_INT 1
9747: ST_TO_ADDR
// if p3 = 110 then
9748: LD_VAR 0 3
9752: PUSH
9753: LD_INT 110
9755: EQUAL
9756: IFFALSE 9766
// sContamin := true ;
9758: LD_ADDR_EXP 64
9762: PUSH
9763: LD_INT 1
9765: ST_TO_ADDR
// if p3 = 111 then
9766: LD_VAR 0 3
9770: PUSH
9771: LD_INT 111
9773: EQUAL
9774: IFFALSE 9784
// sOil := true ;
9776: LD_ADDR_EXP 66
9780: PUSH
9781: LD_INT 1
9783: ST_TO_ADDR
// if p3 = 112 then
9784: LD_VAR 0 3
9788: PUSH
9789: LD_INT 112
9791: EQUAL
9792: IFFALSE 9802
// sStu := true ;
9794: LD_ADDR_EXP 70
9798: PUSH
9799: LD_INT 1
9801: ST_TO_ADDR
// if p3 = 113 then
9802: LD_VAR 0 3
9806: PUSH
9807: LD_INT 113
9809: EQUAL
9810: IFFALSE 9820
// sBazooka := true ;
9812: LD_ADDR_EXP 73
9816: PUSH
9817: LD_INT 1
9819: ST_TO_ADDR
// if p3 = 114 then
9820: LD_VAR 0 3
9824: PUSH
9825: LD_INT 114
9827: EQUAL
9828: IFFALSE 9838
// sMortar := true ;
9830: LD_ADDR_EXP 74
9834: PUSH
9835: LD_INT 1
9837: ST_TO_ADDR
// if p3 = 115 then
9838: LD_VAR 0 3
9842: PUSH
9843: LD_INT 115
9845: EQUAL
9846: IFFALSE 9856
// sRanger := true ;
9848: LD_ADDR_EXP 84
9852: PUSH
9853: LD_INT 1
9855: ST_TO_ADDR
// if p3 = 116 then
9856: LD_VAR 0 3
9860: PUSH
9861: LD_INT 116
9863: EQUAL
9864: IFFALSE 9874
// sComputer := true ;
9866: LD_ADDR_EXP 85
9870: PUSH
9871: LD_INT 1
9873: ST_TO_ADDR
// if p3 = 117 then
9874: LD_VAR 0 3
9878: PUSH
9879: LD_INT 117
9881: EQUAL
9882: IFFALSE 9892
// s30 := true ;
9884: LD_ADDR_EXP 86
9888: PUSH
9889: LD_INT 1
9891: ST_TO_ADDR
// if p3 = 118 then
9892: LD_VAR 0 3
9896: PUSH
9897: LD_INT 118
9899: EQUAL
9900: IFFALSE 9910
// s60 := true ;
9902: LD_ADDR_EXP 87
9906: PUSH
9907: LD_INT 1
9909: ST_TO_ADDR
// end ; if p2 = hack_mode then
9910: LD_VAR 0 2
9914: PUSH
9915: LD_INT 101
9917: EQUAL
9918: IFFALSE 10046
// begin case p3 of 1 :
9920: LD_VAR 0 3
9924: PUSH
9925: LD_INT 1
9927: DOUBLE
9928: EQUAL
9929: IFTRUE 9933
9931: GO 9940
9933: POP
// hHackUnlimitedResources ; 2 :
9934: CALL 22193 0 0
9938: GO 10046
9940: LD_INT 2
9942: DOUBLE
9943: EQUAL
9944: IFTRUE 9948
9946: GO 9955
9948: POP
// hHackSetLevel10 ; 3 :
9949: CALL 22326 0 0
9953: GO 10046
9955: LD_INT 3
9957: DOUBLE
9958: EQUAL
9959: IFTRUE 9963
9961: GO 9970
9963: POP
// hHackSetLevel10YourUnits ; 4 :
9964: CALL 22411 0 0
9968: GO 10046
9970: LD_INT 4
9972: DOUBLE
9973: EQUAL
9974: IFTRUE 9978
9976: GO 9985
9978: POP
// hHackInvincible ; 5 :
9979: CALL 22859 0 0
9983: GO 10046
9985: LD_INT 5
9987: DOUBLE
9988: EQUAL
9989: IFTRUE 9993
9991: GO 10000
9993: POP
// hHackInvisible ; 6 :
9994: CALL 22970 0 0
9998: GO 10046
10000: LD_INT 6
10002: DOUBLE
10003: EQUAL
10004: IFTRUE 10008
10006: GO 10015
10008: POP
// hHackChangeYourSide ; 7 :
10009: CALL 23027 0 0
10013: GO 10046
10015: LD_INT 7
10017: DOUBLE
10018: EQUAL
10019: IFTRUE 10023
10021: GO 10030
10023: POP
// hHackChangeUnitSide ; 8 :
10024: CALL 23069 0 0
10028: GO 10046
10030: LD_INT 8
10032: DOUBLE
10033: EQUAL
10034: IFTRUE 10038
10036: GO 10045
10038: POP
// hHackFog ; end ;
10039: CALL 23170 0 0
10043: GO 10046
10045: POP
// end ; if p2 = game_save_mode then
10046: LD_VAR 0 2
10050: PUSH
10051: LD_INT 102
10053: EQUAL
10054: IFFALSE 10109
// begin if p3 = 1 then
10056: LD_VAR 0 3
10060: PUSH
10061: LD_INT 1
10063: EQUAL
10064: IFFALSE 10076
// globalGameSaveCounter := p4 ;
10066: LD_ADDR_EXP 30
10070: PUSH
10071: LD_VAR 0 4
10075: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
10076: LD_VAR 0 3
10080: PUSH
10081: LD_INT 2
10083: EQUAL
10084: PUSH
10085: LD_EXP 30
10089: AND
10090: IFFALSE 10109
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
10092: LD_STRING setGameSaveCounter(
10094: PUSH
10095: LD_EXP 30
10099: STR
10100: PUSH
10101: LD_STRING )
10103: STR
10104: PPUSH
10105: CALL_OW 559
// end ; end ;
10109: LD_VAR 0 7
10113: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
10114: LD_INT 0
10116: PPUSH
// streamModeActive := false ;
10117: LD_ADDR_EXP 31
10121: PUSH
10122: LD_INT 0
10124: ST_TO_ADDR
// normalCounter := 36 ;
10125: LD_ADDR_EXP 32
10129: PUSH
10130: LD_INT 36
10132: ST_TO_ADDR
// hardcoreCounter := 18 ;
10133: LD_ADDR_EXP 33
10137: PUSH
10138: LD_INT 18
10140: ST_TO_ADDR
// sRocket := false ;
10141: LD_ADDR_EXP 36
10145: PUSH
10146: LD_INT 0
10148: ST_TO_ADDR
// sSpeed := false ;
10149: LD_ADDR_EXP 35
10153: PUSH
10154: LD_INT 0
10156: ST_TO_ADDR
// sEngine := false ;
10157: LD_ADDR_EXP 37
10161: PUSH
10162: LD_INT 0
10164: ST_TO_ADDR
// sSpec := false ;
10165: LD_ADDR_EXP 34
10169: PUSH
10170: LD_INT 0
10172: ST_TO_ADDR
// sLevel := false ;
10173: LD_ADDR_EXP 38
10177: PUSH
10178: LD_INT 0
10180: ST_TO_ADDR
// sArmoury := false ;
10181: LD_ADDR_EXP 39
10185: PUSH
10186: LD_INT 0
10188: ST_TO_ADDR
// sRadar := false ;
10189: LD_ADDR_EXP 40
10193: PUSH
10194: LD_INT 0
10196: ST_TO_ADDR
// sBunker := false ;
10197: LD_ADDR_EXP 41
10201: PUSH
10202: LD_INT 0
10204: ST_TO_ADDR
// sHack := false ;
10205: LD_ADDR_EXP 42
10209: PUSH
10210: LD_INT 0
10212: ST_TO_ADDR
// sFire := false ;
10213: LD_ADDR_EXP 43
10217: PUSH
10218: LD_INT 0
10220: ST_TO_ADDR
// sRefresh := false ;
10221: LD_ADDR_EXP 44
10225: PUSH
10226: LD_INT 0
10228: ST_TO_ADDR
// sExp := false ;
10229: LD_ADDR_EXP 45
10233: PUSH
10234: LD_INT 0
10236: ST_TO_ADDR
// sDepot := false ;
10237: LD_ADDR_EXP 46
10241: PUSH
10242: LD_INT 0
10244: ST_TO_ADDR
// sFlag := false ;
10245: LD_ADDR_EXP 47
10249: PUSH
10250: LD_INT 0
10252: ST_TO_ADDR
// sKamikadze := false ;
10253: LD_ADDR_EXP 55
10257: PUSH
10258: LD_INT 0
10260: ST_TO_ADDR
// sTroll := false ;
10261: LD_ADDR_EXP 56
10265: PUSH
10266: LD_INT 0
10268: ST_TO_ADDR
// sSlow := false ;
10269: LD_ADDR_EXP 57
10273: PUSH
10274: LD_INT 0
10276: ST_TO_ADDR
// sLack := false ;
10277: LD_ADDR_EXP 58
10281: PUSH
10282: LD_INT 0
10284: ST_TO_ADDR
// sTank := false ;
10285: LD_ADDR_EXP 60
10289: PUSH
10290: LD_INT 0
10292: ST_TO_ADDR
// sRemote := false ;
10293: LD_ADDR_EXP 61
10297: PUSH
10298: LD_INT 0
10300: ST_TO_ADDR
// sPowell := false ;
10301: LD_ADDR_EXP 62
10305: PUSH
10306: LD_INT 0
10308: ST_TO_ADDR
// sTeleport := false ;
10309: LD_ADDR_EXP 65
10313: PUSH
10314: LD_INT 0
10316: ST_TO_ADDR
// sOilTower := false ;
10317: LD_ADDR_EXP 67
10321: PUSH
10322: LD_INT 0
10324: ST_TO_ADDR
// sShovel := false ;
10325: LD_ADDR_EXP 68
10329: PUSH
10330: LD_INT 0
10332: ST_TO_ADDR
// sSheik := false ;
10333: LD_ADDR_EXP 69
10337: PUSH
10338: LD_INT 0
10340: ST_TO_ADDR
// sEarthquake := false ;
10341: LD_ADDR_EXP 71
10345: PUSH
10346: LD_INT 0
10348: ST_TO_ADDR
// sAI := false ;
10349: LD_ADDR_EXP 72
10353: PUSH
10354: LD_INT 0
10356: ST_TO_ADDR
// sCargo := false ;
10357: LD_ADDR_EXP 75
10361: PUSH
10362: LD_INT 0
10364: ST_TO_ADDR
// sDLaser := false ;
10365: LD_ADDR_EXP 76
10369: PUSH
10370: LD_INT 0
10372: ST_TO_ADDR
// sExchange := false ;
10373: LD_ADDR_EXP 77
10377: PUSH
10378: LD_INT 0
10380: ST_TO_ADDR
// sFac := false ;
10381: LD_ADDR_EXP 78
10385: PUSH
10386: LD_INT 0
10388: ST_TO_ADDR
// sPower := false ;
10389: LD_ADDR_EXP 79
10393: PUSH
10394: LD_INT 0
10396: ST_TO_ADDR
// sRandom := false ;
10397: LD_ADDR_EXP 80
10401: PUSH
10402: LD_INT 0
10404: ST_TO_ADDR
// sShield := false ;
10405: LD_ADDR_EXP 81
10409: PUSH
10410: LD_INT 0
10412: ST_TO_ADDR
// sTime := false ;
10413: LD_ADDR_EXP 82
10417: PUSH
10418: LD_INT 0
10420: ST_TO_ADDR
// sTools := false ;
10421: LD_ADDR_EXP 83
10425: PUSH
10426: LD_INT 0
10428: ST_TO_ADDR
// sSold := false ;
10429: LD_ADDR_EXP 48
10433: PUSH
10434: LD_INT 0
10436: ST_TO_ADDR
// sDiff := false ;
10437: LD_ADDR_EXP 49
10441: PUSH
10442: LD_INT 0
10444: ST_TO_ADDR
// sFog := false ;
10445: LD_ADDR_EXP 52
10449: PUSH
10450: LD_INT 0
10452: ST_TO_ADDR
// sReset := false ;
10453: LD_ADDR_EXP 53
10457: PUSH
10458: LD_INT 0
10460: ST_TO_ADDR
// sSun := false ;
10461: LD_ADDR_EXP 54
10465: PUSH
10466: LD_INT 0
10468: ST_TO_ADDR
// sTiger := false ;
10469: LD_ADDR_EXP 50
10473: PUSH
10474: LD_INT 0
10476: ST_TO_ADDR
// sBomb := false ;
10477: LD_ADDR_EXP 51
10481: PUSH
10482: LD_INT 0
10484: ST_TO_ADDR
// sWound := false ;
10485: LD_ADDR_EXP 59
10489: PUSH
10490: LD_INT 0
10492: ST_TO_ADDR
// sBetray := false ;
10493: LD_ADDR_EXP 63
10497: PUSH
10498: LD_INT 0
10500: ST_TO_ADDR
// sContamin := false ;
10501: LD_ADDR_EXP 64
10505: PUSH
10506: LD_INT 0
10508: ST_TO_ADDR
// sOil := false ;
10509: LD_ADDR_EXP 66
10513: PUSH
10514: LD_INT 0
10516: ST_TO_ADDR
// sStu := false ;
10517: LD_ADDR_EXP 70
10521: PUSH
10522: LD_INT 0
10524: ST_TO_ADDR
// sBazooka := false ;
10525: LD_ADDR_EXP 73
10529: PUSH
10530: LD_INT 0
10532: ST_TO_ADDR
// sMortar := false ;
10533: LD_ADDR_EXP 74
10537: PUSH
10538: LD_INT 0
10540: ST_TO_ADDR
// sRanger := false ;
10541: LD_ADDR_EXP 84
10545: PUSH
10546: LD_INT 0
10548: ST_TO_ADDR
// sComputer := false ;
10549: LD_ADDR_EXP 85
10553: PUSH
10554: LD_INT 0
10556: ST_TO_ADDR
// s30 := false ;
10557: LD_ADDR_EXP 86
10561: PUSH
10562: LD_INT 0
10564: ST_TO_ADDR
// s60 := false ;
10565: LD_ADDR_EXP 87
10569: PUSH
10570: LD_INT 0
10572: ST_TO_ADDR
// end ;
10573: LD_VAR 0 1
10577: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
10578: LD_INT 0
10580: PPUSH
10581: PPUSH
10582: PPUSH
10583: PPUSH
10584: PPUSH
10585: PPUSH
10586: PPUSH
// result := [ ] ;
10587: LD_ADDR_VAR 0 2
10591: PUSH
10592: EMPTY
10593: ST_TO_ADDR
// if campaign_id = 1 then
10594: LD_OWVAR 69
10598: PUSH
10599: LD_INT 1
10601: EQUAL
10602: IFFALSE 13768
// begin case mission_number of 1 :
10604: LD_OWVAR 70
10608: PUSH
10609: LD_INT 1
10611: DOUBLE
10612: EQUAL
10613: IFTRUE 10617
10615: GO 10693
10617: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
10618: LD_ADDR_VAR 0 2
10622: PUSH
10623: LD_INT 2
10625: PUSH
10626: LD_INT 4
10628: PUSH
10629: LD_INT 11
10631: PUSH
10632: LD_INT 12
10634: PUSH
10635: LD_INT 15
10637: PUSH
10638: LD_INT 16
10640: PUSH
10641: LD_INT 22
10643: PUSH
10644: LD_INT 23
10646: PUSH
10647: LD_INT 26
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: PUSH
10661: LD_INT 101
10663: PUSH
10664: LD_INT 102
10666: PUSH
10667: LD_INT 106
10669: PUSH
10670: LD_INT 116
10672: PUSH
10673: LD_INT 117
10675: PUSH
10676: LD_INT 118
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: ST_TO_ADDR
10691: GO 13766
10693: LD_INT 2
10695: DOUBLE
10696: EQUAL
10697: IFTRUE 10701
10699: GO 10785
10701: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10702: LD_ADDR_VAR 0 2
10706: PUSH
10707: LD_INT 2
10709: PUSH
10710: LD_INT 4
10712: PUSH
10713: LD_INT 11
10715: PUSH
10716: LD_INT 12
10718: PUSH
10719: LD_INT 15
10721: PUSH
10722: LD_INT 16
10724: PUSH
10725: LD_INT 22
10727: PUSH
10728: LD_INT 23
10730: PUSH
10731: LD_INT 26
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: PUSH
10745: LD_INT 101
10747: PUSH
10748: LD_INT 102
10750: PUSH
10751: LD_INT 105
10753: PUSH
10754: LD_INT 106
10756: PUSH
10757: LD_INT 108
10759: PUSH
10760: LD_INT 116
10762: PUSH
10763: LD_INT 117
10765: PUSH
10766: LD_INT 118
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: ST_TO_ADDR
10783: GO 13766
10785: LD_INT 3
10787: DOUBLE
10788: EQUAL
10789: IFTRUE 10793
10791: GO 10881
10793: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10794: LD_ADDR_VAR 0 2
10798: PUSH
10799: LD_INT 2
10801: PUSH
10802: LD_INT 4
10804: PUSH
10805: LD_INT 5
10807: PUSH
10808: LD_INT 11
10810: PUSH
10811: LD_INT 12
10813: PUSH
10814: LD_INT 15
10816: PUSH
10817: LD_INT 16
10819: PUSH
10820: LD_INT 22
10822: PUSH
10823: LD_INT 26
10825: PUSH
10826: LD_INT 36
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: PUSH
10841: LD_INT 101
10843: PUSH
10844: LD_INT 102
10846: PUSH
10847: LD_INT 105
10849: PUSH
10850: LD_INT 106
10852: PUSH
10853: LD_INT 108
10855: PUSH
10856: LD_INT 116
10858: PUSH
10859: LD_INT 117
10861: PUSH
10862: LD_INT 118
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: ST_TO_ADDR
10879: GO 13766
10881: LD_INT 4
10883: DOUBLE
10884: EQUAL
10885: IFTRUE 10889
10887: GO 10985
10889: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10890: LD_ADDR_VAR 0 2
10894: PUSH
10895: LD_INT 2
10897: PUSH
10898: LD_INT 4
10900: PUSH
10901: LD_INT 5
10903: PUSH
10904: LD_INT 8
10906: PUSH
10907: LD_INT 11
10909: PUSH
10910: LD_INT 12
10912: PUSH
10913: LD_INT 15
10915: PUSH
10916: LD_INT 16
10918: PUSH
10919: LD_INT 22
10921: PUSH
10922: LD_INT 23
10924: PUSH
10925: LD_INT 26
10927: PUSH
10928: LD_INT 36
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: PUSH
10945: LD_INT 101
10947: PUSH
10948: LD_INT 102
10950: PUSH
10951: LD_INT 105
10953: PUSH
10954: LD_INT 106
10956: PUSH
10957: LD_INT 108
10959: PUSH
10960: LD_INT 116
10962: PUSH
10963: LD_INT 117
10965: PUSH
10966: LD_INT 118
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: ST_TO_ADDR
10983: GO 13766
10985: LD_INT 5
10987: DOUBLE
10988: EQUAL
10989: IFTRUE 10993
10991: GO 11105
10993: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10994: LD_ADDR_VAR 0 2
10998: PUSH
10999: LD_INT 2
11001: PUSH
11002: LD_INT 4
11004: PUSH
11005: LD_INT 5
11007: PUSH
11008: LD_INT 6
11010: PUSH
11011: LD_INT 8
11013: PUSH
11014: LD_INT 11
11016: PUSH
11017: LD_INT 12
11019: PUSH
11020: LD_INT 15
11022: PUSH
11023: LD_INT 16
11025: PUSH
11026: LD_INT 22
11028: PUSH
11029: LD_INT 23
11031: PUSH
11032: LD_INT 25
11034: PUSH
11035: LD_INT 26
11037: PUSH
11038: LD_INT 36
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 101
11059: PUSH
11060: LD_INT 102
11062: PUSH
11063: LD_INT 105
11065: PUSH
11066: LD_INT 106
11068: PUSH
11069: LD_INT 108
11071: PUSH
11072: LD_INT 109
11074: PUSH
11075: LD_INT 112
11077: PUSH
11078: LD_INT 116
11080: PUSH
11081: LD_INT 117
11083: PUSH
11084: LD_INT 118
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: ST_TO_ADDR
11103: GO 13766
11105: LD_INT 6
11107: DOUBLE
11108: EQUAL
11109: IFTRUE 11113
11111: GO 11245
11113: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
11114: LD_ADDR_VAR 0 2
11118: PUSH
11119: LD_INT 2
11121: PUSH
11122: LD_INT 4
11124: PUSH
11125: LD_INT 5
11127: PUSH
11128: LD_INT 6
11130: PUSH
11131: LD_INT 8
11133: PUSH
11134: LD_INT 11
11136: PUSH
11137: LD_INT 12
11139: PUSH
11140: LD_INT 15
11142: PUSH
11143: LD_INT 16
11145: PUSH
11146: LD_INT 20
11148: PUSH
11149: LD_INT 21
11151: PUSH
11152: LD_INT 22
11154: PUSH
11155: LD_INT 23
11157: PUSH
11158: LD_INT 25
11160: PUSH
11161: LD_INT 26
11163: PUSH
11164: LD_INT 30
11166: PUSH
11167: LD_INT 31
11169: PUSH
11170: LD_INT 32
11172: PUSH
11173: LD_INT 36
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 101
11199: PUSH
11200: LD_INT 102
11202: PUSH
11203: LD_INT 105
11205: PUSH
11206: LD_INT 106
11208: PUSH
11209: LD_INT 108
11211: PUSH
11212: LD_INT 109
11214: PUSH
11215: LD_INT 112
11217: PUSH
11218: LD_INT 116
11220: PUSH
11221: LD_INT 117
11223: PUSH
11224: LD_INT 118
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: ST_TO_ADDR
11243: GO 13766
11245: LD_INT 7
11247: DOUBLE
11248: EQUAL
11249: IFTRUE 11253
11251: GO 11365
11253: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
11254: LD_ADDR_VAR 0 2
11258: PUSH
11259: LD_INT 2
11261: PUSH
11262: LD_INT 4
11264: PUSH
11265: LD_INT 5
11267: PUSH
11268: LD_INT 7
11270: PUSH
11271: LD_INT 11
11273: PUSH
11274: LD_INT 12
11276: PUSH
11277: LD_INT 15
11279: PUSH
11280: LD_INT 16
11282: PUSH
11283: LD_INT 20
11285: PUSH
11286: LD_INT 21
11288: PUSH
11289: LD_INT 22
11291: PUSH
11292: LD_INT 23
11294: PUSH
11295: LD_INT 25
11297: PUSH
11298: LD_INT 26
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: PUSH
11317: LD_INT 101
11319: PUSH
11320: LD_INT 102
11322: PUSH
11323: LD_INT 103
11325: PUSH
11326: LD_INT 105
11328: PUSH
11329: LD_INT 106
11331: PUSH
11332: LD_INT 108
11334: PUSH
11335: LD_INT 112
11337: PUSH
11338: LD_INT 116
11340: PUSH
11341: LD_INT 117
11343: PUSH
11344: LD_INT 118
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: ST_TO_ADDR
11363: GO 13766
11365: LD_INT 8
11367: DOUBLE
11368: EQUAL
11369: IFTRUE 11373
11371: GO 11513
11373: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
11374: LD_ADDR_VAR 0 2
11378: PUSH
11379: LD_INT 2
11381: PUSH
11382: LD_INT 4
11384: PUSH
11385: LD_INT 5
11387: PUSH
11388: LD_INT 6
11390: PUSH
11391: LD_INT 7
11393: PUSH
11394: LD_INT 8
11396: PUSH
11397: LD_INT 11
11399: PUSH
11400: LD_INT 12
11402: PUSH
11403: LD_INT 15
11405: PUSH
11406: LD_INT 16
11408: PUSH
11409: LD_INT 20
11411: PUSH
11412: LD_INT 21
11414: PUSH
11415: LD_INT 22
11417: PUSH
11418: LD_INT 23
11420: PUSH
11421: LD_INT 25
11423: PUSH
11424: LD_INT 26
11426: PUSH
11427: LD_INT 30
11429: PUSH
11430: LD_INT 31
11432: PUSH
11433: LD_INT 32
11435: PUSH
11436: LD_INT 36
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: PUSH
11461: LD_INT 101
11463: PUSH
11464: LD_INT 102
11466: PUSH
11467: LD_INT 103
11469: PUSH
11470: LD_INT 105
11472: PUSH
11473: LD_INT 106
11475: PUSH
11476: LD_INT 108
11478: PUSH
11479: LD_INT 109
11481: PUSH
11482: LD_INT 112
11484: PUSH
11485: LD_INT 116
11487: PUSH
11488: LD_INT 117
11490: PUSH
11491: LD_INT 118
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: ST_TO_ADDR
11511: GO 13766
11513: LD_INT 9
11515: DOUBLE
11516: EQUAL
11517: IFTRUE 11521
11519: GO 11669
11521: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
11522: LD_ADDR_VAR 0 2
11526: PUSH
11527: LD_INT 2
11529: PUSH
11530: LD_INT 4
11532: PUSH
11533: LD_INT 5
11535: PUSH
11536: LD_INT 6
11538: PUSH
11539: LD_INT 7
11541: PUSH
11542: LD_INT 8
11544: PUSH
11545: LD_INT 11
11547: PUSH
11548: LD_INT 12
11550: PUSH
11551: LD_INT 15
11553: PUSH
11554: LD_INT 16
11556: PUSH
11557: LD_INT 20
11559: PUSH
11560: LD_INT 21
11562: PUSH
11563: LD_INT 22
11565: PUSH
11566: LD_INT 23
11568: PUSH
11569: LD_INT 25
11571: PUSH
11572: LD_INT 26
11574: PUSH
11575: LD_INT 28
11577: PUSH
11578: LD_INT 30
11580: PUSH
11581: LD_INT 31
11583: PUSH
11584: LD_INT 32
11586: PUSH
11587: LD_INT 36
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: PUSH
11613: LD_INT 101
11615: PUSH
11616: LD_INT 102
11618: PUSH
11619: LD_INT 103
11621: PUSH
11622: LD_INT 105
11624: PUSH
11625: LD_INT 106
11627: PUSH
11628: LD_INT 108
11630: PUSH
11631: LD_INT 109
11633: PUSH
11634: LD_INT 112
11636: PUSH
11637: LD_INT 114
11639: PUSH
11640: LD_INT 116
11642: PUSH
11643: LD_INT 117
11645: PUSH
11646: LD_INT 118
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: ST_TO_ADDR
11667: GO 13766
11669: LD_INT 10
11671: DOUBLE
11672: EQUAL
11673: IFTRUE 11677
11675: GO 11873
11677: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11678: LD_ADDR_VAR 0 2
11682: PUSH
11683: LD_INT 2
11685: PUSH
11686: LD_INT 4
11688: PUSH
11689: LD_INT 5
11691: PUSH
11692: LD_INT 6
11694: PUSH
11695: LD_INT 7
11697: PUSH
11698: LD_INT 8
11700: PUSH
11701: LD_INT 9
11703: PUSH
11704: LD_INT 10
11706: PUSH
11707: LD_INT 11
11709: PUSH
11710: LD_INT 12
11712: PUSH
11713: LD_INT 13
11715: PUSH
11716: LD_INT 14
11718: PUSH
11719: LD_INT 15
11721: PUSH
11722: LD_INT 16
11724: PUSH
11725: LD_INT 17
11727: PUSH
11728: LD_INT 18
11730: PUSH
11731: LD_INT 19
11733: PUSH
11734: LD_INT 20
11736: PUSH
11737: LD_INT 21
11739: PUSH
11740: LD_INT 22
11742: PUSH
11743: LD_INT 23
11745: PUSH
11746: LD_INT 24
11748: PUSH
11749: LD_INT 25
11751: PUSH
11752: LD_INT 26
11754: PUSH
11755: LD_INT 28
11757: PUSH
11758: LD_INT 30
11760: PUSH
11761: LD_INT 31
11763: PUSH
11764: LD_INT 32
11766: PUSH
11767: LD_INT 36
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 101
11803: PUSH
11804: LD_INT 102
11806: PUSH
11807: LD_INT 103
11809: PUSH
11810: LD_INT 104
11812: PUSH
11813: LD_INT 105
11815: PUSH
11816: LD_INT 106
11818: PUSH
11819: LD_INT 107
11821: PUSH
11822: LD_INT 108
11824: PUSH
11825: LD_INT 109
11827: PUSH
11828: LD_INT 110
11830: PUSH
11831: LD_INT 111
11833: PUSH
11834: LD_INT 112
11836: PUSH
11837: LD_INT 114
11839: PUSH
11840: LD_INT 116
11842: PUSH
11843: LD_INT 117
11845: PUSH
11846: LD_INT 118
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: ST_TO_ADDR
11871: GO 13766
11873: LD_INT 11
11875: DOUBLE
11876: EQUAL
11877: IFTRUE 11881
11879: GO 12085
11881: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11882: LD_ADDR_VAR 0 2
11886: PUSH
11887: LD_INT 2
11889: PUSH
11890: LD_INT 3
11892: PUSH
11893: LD_INT 4
11895: PUSH
11896: LD_INT 5
11898: PUSH
11899: LD_INT 6
11901: PUSH
11902: LD_INT 7
11904: PUSH
11905: LD_INT 8
11907: PUSH
11908: LD_INT 9
11910: PUSH
11911: LD_INT 10
11913: PUSH
11914: LD_INT 11
11916: PUSH
11917: LD_INT 12
11919: PUSH
11920: LD_INT 13
11922: PUSH
11923: LD_INT 14
11925: PUSH
11926: LD_INT 15
11928: PUSH
11929: LD_INT 16
11931: PUSH
11932: LD_INT 17
11934: PUSH
11935: LD_INT 18
11937: PUSH
11938: LD_INT 19
11940: PUSH
11941: LD_INT 20
11943: PUSH
11944: LD_INT 21
11946: PUSH
11947: LD_INT 22
11949: PUSH
11950: LD_INT 23
11952: PUSH
11953: LD_INT 24
11955: PUSH
11956: LD_INT 25
11958: PUSH
11959: LD_INT 26
11961: PUSH
11962: LD_INT 28
11964: PUSH
11965: LD_INT 30
11967: PUSH
11968: LD_INT 31
11970: PUSH
11971: LD_INT 32
11973: PUSH
11974: LD_INT 34
11976: PUSH
11977: LD_INT 36
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: PUSH
12013: LD_INT 101
12015: PUSH
12016: LD_INT 102
12018: PUSH
12019: LD_INT 103
12021: PUSH
12022: LD_INT 104
12024: PUSH
12025: LD_INT 105
12027: PUSH
12028: LD_INT 106
12030: PUSH
12031: LD_INT 107
12033: PUSH
12034: LD_INT 108
12036: PUSH
12037: LD_INT 109
12039: PUSH
12040: LD_INT 110
12042: PUSH
12043: LD_INT 111
12045: PUSH
12046: LD_INT 112
12048: PUSH
12049: LD_INT 114
12051: PUSH
12052: LD_INT 116
12054: PUSH
12055: LD_INT 117
12057: PUSH
12058: LD_INT 118
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: ST_TO_ADDR
12083: GO 13766
12085: LD_INT 12
12087: DOUBLE
12088: EQUAL
12089: IFTRUE 12093
12091: GO 12313
12093: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
12094: LD_ADDR_VAR 0 2
12098: PUSH
12099: LD_INT 1
12101: PUSH
12102: LD_INT 2
12104: PUSH
12105: LD_INT 3
12107: PUSH
12108: LD_INT 4
12110: PUSH
12111: LD_INT 5
12113: PUSH
12114: LD_INT 6
12116: PUSH
12117: LD_INT 7
12119: PUSH
12120: LD_INT 8
12122: PUSH
12123: LD_INT 9
12125: PUSH
12126: LD_INT 10
12128: PUSH
12129: LD_INT 11
12131: PUSH
12132: LD_INT 12
12134: PUSH
12135: LD_INT 13
12137: PUSH
12138: LD_INT 14
12140: PUSH
12141: LD_INT 15
12143: PUSH
12144: LD_INT 16
12146: PUSH
12147: LD_INT 17
12149: PUSH
12150: LD_INT 18
12152: PUSH
12153: LD_INT 19
12155: PUSH
12156: LD_INT 20
12158: PUSH
12159: LD_INT 21
12161: PUSH
12162: LD_INT 22
12164: PUSH
12165: LD_INT 23
12167: PUSH
12168: LD_INT 24
12170: PUSH
12171: LD_INT 25
12173: PUSH
12174: LD_INT 26
12176: PUSH
12177: LD_INT 27
12179: PUSH
12180: LD_INT 28
12182: PUSH
12183: LD_INT 30
12185: PUSH
12186: LD_INT 31
12188: PUSH
12189: LD_INT 32
12191: PUSH
12192: LD_INT 33
12194: PUSH
12195: LD_INT 34
12197: PUSH
12198: LD_INT 36
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: PUSH
12237: LD_INT 101
12239: PUSH
12240: LD_INT 102
12242: PUSH
12243: LD_INT 103
12245: PUSH
12246: LD_INT 104
12248: PUSH
12249: LD_INT 105
12251: PUSH
12252: LD_INT 106
12254: PUSH
12255: LD_INT 107
12257: PUSH
12258: LD_INT 108
12260: PUSH
12261: LD_INT 109
12263: PUSH
12264: LD_INT 110
12266: PUSH
12267: LD_INT 111
12269: PUSH
12270: LD_INT 112
12272: PUSH
12273: LD_INT 113
12275: PUSH
12276: LD_INT 114
12278: PUSH
12279: LD_INT 116
12281: PUSH
12282: LD_INT 117
12284: PUSH
12285: LD_INT 118
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: ST_TO_ADDR
12311: GO 13766
12313: LD_INT 13
12315: DOUBLE
12316: EQUAL
12317: IFTRUE 12321
12319: GO 12529
12321: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
12322: LD_ADDR_VAR 0 2
12326: PUSH
12327: LD_INT 1
12329: PUSH
12330: LD_INT 2
12332: PUSH
12333: LD_INT 3
12335: PUSH
12336: LD_INT 4
12338: PUSH
12339: LD_INT 5
12341: PUSH
12342: LD_INT 8
12344: PUSH
12345: LD_INT 9
12347: PUSH
12348: LD_INT 10
12350: PUSH
12351: LD_INT 11
12353: PUSH
12354: LD_INT 12
12356: PUSH
12357: LD_INT 14
12359: PUSH
12360: LD_INT 15
12362: PUSH
12363: LD_INT 16
12365: PUSH
12366: LD_INT 17
12368: PUSH
12369: LD_INT 18
12371: PUSH
12372: LD_INT 19
12374: PUSH
12375: LD_INT 20
12377: PUSH
12378: LD_INT 21
12380: PUSH
12381: LD_INT 22
12383: PUSH
12384: LD_INT 23
12386: PUSH
12387: LD_INT 24
12389: PUSH
12390: LD_INT 25
12392: PUSH
12393: LD_INT 26
12395: PUSH
12396: LD_INT 27
12398: PUSH
12399: LD_INT 28
12401: PUSH
12402: LD_INT 30
12404: PUSH
12405: LD_INT 31
12407: PUSH
12408: LD_INT 32
12410: PUSH
12411: LD_INT 33
12413: PUSH
12414: LD_INT 34
12416: PUSH
12417: LD_INT 36
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: PUSH
12453: LD_INT 101
12455: PUSH
12456: LD_INT 102
12458: PUSH
12459: LD_INT 103
12461: PUSH
12462: LD_INT 104
12464: PUSH
12465: LD_INT 105
12467: PUSH
12468: LD_INT 106
12470: PUSH
12471: LD_INT 107
12473: PUSH
12474: LD_INT 108
12476: PUSH
12477: LD_INT 109
12479: PUSH
12480: LD_INT 110
12482: PUSH
12483: LD_INT 111
12485: PUSH
12486: LD_INT 112
12488: PUSH
12489: LD_INT 113
12491: PUSH
12492: LD_INT 114
12494: PUSH
12495: LD_INT 116
12497: PUSH
12498: LD_INT 117
12500: PUSH
12501: LD_INT 118
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: ST_TO_ADDR
12527: GO 13766
12529: LD_INT 14
12531: DOUBLE
12532: EQUAL
12533: IFTRUE 12537
12535: GO 12761
12537: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
12538: LD_ADDR_VAR 0 2
12542: PUSH
12543: LD_INT 1
12545: PUSH
12546: LD_INT 2
12548: PUSH
12549: LD_INT 3
12551: PUSH
12552: LD_INT 4
12554: PUSH
12555: LD_INT 5
12557: PUSH
12558: LD_INT 6
12560: PUSH
12561: LD_INT 7
12563: PUSH
12564: LD_INT 8
12566: PUSH
12567: LD_INT 9
12569: PUSH
12570: LD_INT 10
12572: PUSH
12573: LD_INT 11
12575: PUSH
12576: LD_INT 12
12578: PUSH
12579: LD_INT 13
12581: PUSH
12582: LD_INT 14
12584: PUSH
12585: LD_INT 15
12587: PUSH
12588: LD_INT 16
12590: PUSH
12591: LD_INT 17
12593: PUSH
12594: LD_INT 18
12596: PUSH
12597: LD_INT 19
12599: PUSH
12600: LD_INT 20
12602: PUSH
12603: LD_INT 21
12605: PUSH
12606: LD_INT 22
12608: PUSH
12609: LD_INT 23
12611: PUSH
12612: LD_INT 24
12614: PUSH
12615: LD_INT 25
12617: PUSH
12618: LD_INT 26
12620: PUSH
12621: LD_INT 27
12623: PUSH
12624: LD_INT 28
12626: PUSH
12627: LD_INT 29
12629: PUSH
12630: LD_INT 30
12632: PUSH
12633: LD_INT 31
12635: PUSH
12636: LD_INT 32
12638: PUSH
12639: LD_INT 33
12641: PUSH
12642: LD_INT 34
12644: PUSH
12645: LD_INT 36
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 101
12687: PUSH
12688: LD_INT 102
12690: PUSH
12691: LD_INT 103
12693: PUSH
12694: LD_INT 104
12696: PUSH
12697: LD_INT 105
12699: PUSH
12700: LD_INT 106
12702: PUSH
12703: LD_INT 107
12705: PUSH
12706: LD_INT 108
12708: PUSH
12709: LD_INT 109
12711: PUSH
12712: LD_INT 110
12714: PUSH
12715: LD_INT 111
12717: PUSH
12718: LD_INT 112
12720: PUSH
12721: LD_INT 113
12723: PUSH
12724: LD_INT 114
12726: PUSH
12727: LD_INT 116
12729: PUSH
12730: LD_INT 117
12732: PUSH
12733: LD_INT 118
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: ST_TO_ADDR
12759: GO 13766
12761: LD_INT 15
12763: DOUBLE
12764: EQUAL
12765: IFTRUE 12769
12767: GO 12993
12769: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12770: LD_ADDR_VAR 0 2
12774: PUSH
12775: LD_INT 1
12777: PUSH
12778: LD_INT 2
12780: PUSH
12781: LD_INT 3
12783: PUSH
12784: LD_INT 4
12786: PUSH
12787: LD_INT 5
12789: PUSH
12790: LD_INT 6
12792: PUSH
12793: LD_INT 7
12795: PUSH
12796: LD_INT 8
12798: PUSH
12799: LD_INT 9
12801: PUSH
12802: LD_INT 10
12804: PUSH
12805: LD_INT 11
12807: PUSH
12808: LD_INT 12
12810: PUSH
12811: LD_INT 13
12813: PUSH
12814: LD_INT 14
12816: PUSH
12817: LD_INT 15
12819: PUSH
12820: LD_INT 16
12822: PUSH
12823: LD_INT 17
12825: PUSH
12826: LD_INT 18
12828: PUSH
12829: LD_INT 19
12831: PUSH
12832: LD_INT 20
12834: PUSH
12835: LD_INT 21
12837: PUSH
12838: LD_INT 22
12840: PUSH
12841: LD_INT 23
12843: PUSH
12844: LD_INT 24
12846: PUSH
12847: LD_INT 25
12849: PUSH
12850: LD_INT 26
12852: PUSH
12853: LD_INT 27
12855: PUSH
12856: LD_INT 28
12858: PUSH
12859: LD_INT 29
12861: PUSH
12862: LD_INT 30
12864: PUSH
12865: LD_INT 31
12867: PUSH
12868: LD_INT 32
12870: PUSH
12871: LD_INT 33
12873: PUSH
12874: LD_INT 34
12876: PUSH
12877: LD_INT 36
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 101
12919: PUSH
12920: LD_INT 102
12922: PUSH
12923: LD_INT 103
12925: PUSH
12926: LD_INT 104
12928: PUSH
12929: LD_INT 105
12931: PUSH
12932: LD_INT 106
12934: PUSH
12935: LD_INT 107
12937: PUSH
12938: LD_INT 108
12940: PUSH
12941: LD_INT 109
12943: PUSH
12944: LD_INT 110
12946: PUSH
12947: LD_INT 111
12949: PUSH
12950: LD_INT 112
12952: PUSH
12953: LD_INT 113
12955: PUSH
12956: LD_INT 114
12958: PUSH
12959: LD_INT 116
12961: PUSH
12962: LD_INT 117
12964: PUSH
12965: LD_INT 118
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: ST_TO_ADDR
12991: GO 13766
12993: LD_INT 16
12995: DOUBLE
12996: EQUAL
12997: IFTRUE 13001
12999: GO 13137
13001: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
13002: LD_ADDR_VAR 0 2
13006: PUSH
13007: LD_INT 2
13009: PUSH
13010: LD_INT 4
13012: PUSH
13013: LD_INT 5
13015: PUSH
13016: LD_INT 7
13018: PUSH
13019: LD_INT 11
13021: PUSH
13022: LD_INT 12
13024: PUSH
13025: LD_INT 15
13027: PUSH
13028: LD_INT 16
13030: PUSH
13031: LD_INT 20
13033: PUSH
13034: LD_INT 21
13036: PUSH
13037: LD_INT 22
13039: PUSH
13040: LD_INT 23
13042: PUSH
13043: LD_INT 25
13045: PUSH
13046: LD_INT 26
13048: PUSH
13049: LD_INT 30
13051: PUSH
13052: LD_INT 31
13054: PUSH
13055: LD_INT 32
13057: PUSH
13058: LD_INT 33
13060: PUSH
13061: LD_INT 34
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 101
13087: PUSH
13088: LD_INT 102
13090: PUSH
13091: LD_INT 103
13093: PUSH
13094: LD_INT 106
13096: PUSH
13097: LD_INT 108
13099: PUSH
13100: LD_INT 112
13102: PUSH
13103: LD_INT 113
13105: PUSH
13106: LD_INT 114
13108: PUSH
13109: LD_INT 116
13111: PUSH
13112: LD_INT 117
13114: PUSH
13115: LD_INT 118
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: ST_TO_ADDR
13135: GO 13766
13137: LD_INT 17
13139: DOUBLE
13140: EQUAL
13141: IFTRUE 13145
13143: GO 13369
13145: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
13146: LD_ADDR_VAR 0 2
13150: PUSH
13151: LD_INT 1
13153: PUSH
13154: LD_INT 2
13156: PUSH
13157: LD_INT 3
13159: PUSH
13160: LD_INT 4
13162: PUSH
13163: LD_INT 5
13165: PUSH
13166: LD_INT 6
13168: PUSH
13169: LD_INT 7
13171: PUSH
13172: LD_INT 8
13174: PUSH
13175: LD_INT 9
13177: PUSH
13178: LD_INT 10
13180: PUSH
13181: LD_INT 11
13183: PUSH
13184: LD_INT 12
13186: PUSH
13187: LD_INT 13
13189: PUSH
13190: LD_INT 14
13192: PUSH
13193: LD_INT 15
13195: PUSH
13196: LD_INT 16
13198: PUSH
13199: LD_INT 17
13201: PUSH
13202: LD_INT 18
13204: PUSH
13205: LD_INT 19
13207: PUSH
13208: LD_INT 20
13210: PUSH
13211: LD_INT 21
13213: PUSH
13214: LD_INT 22
13216: PUSH
13217: LD_INT 23
13219: PUSH
13220: LD_INT 24
13222: PUSH
13223: LD_INT 25
13225: PUSH
13226: LD_INT 26
13228: PUSH
13229: LD_INT 27
13231: PUSH
13232: LD_INT 28
13234: PUSH
13235: LD_INT 29
13237: PUSH
13238: LD_INT 30
13240: PUSH
13241: LD_INT 31
13243: PUSH
13244: LD_INT 32
13246: PUSH
13247: LD_INT 33
13249: PUSH
13250: LD_INT 34
13252: PUSH
13253: LD_INT 36
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: PUSH
13293: LD_INT 101
13295: PUSH
13296: LD_INT 102
13298: PUSH
13299: LD_INT 103
13301: PUSH
13302: LD_INT 104
13304: PUSH
13305: LD_INT 105
13307: PUSH
13308: LD_INT 106
13310: PUSH
13311: LD_INT 107
13313: PUSH
13314: LD_INT 108
13316: PUSH
13317: LD_INT 109
13319: PUSH
13320: LD_INT 110
13322: PUSH
13323: LD_INT 111
13325: PUSH
13326: LD_INT 112
13328: PUSH
13329: LD_INT 113
13331: PUSH
13332: LD_INT 114
13334: PUSH
13335: LD_INT 116
13337: PUSH
13338: LD_INT 117
13340: PUSH
13341: LD_INT 118
13343: PUSH
13344: EMPTY
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: ST_TO_ADDR
13367: GO 13766
13369: LD_INT 18
13371: DOUBLE
13372: EQUAL
13373: IFTRUE 13377
13375: GO 13525
13377: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
13378: LD_ADDR_VAR 0 2
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: LD_INT 4
13388: PUSH
13389: LD_INT 5
13391: PUSH
13392: LD_INT 7
13394: PUSH
13395: LD_INT 11
13397: PUSH
13398: LD_INT 12
13400: PUSH
13401: LD_INT 15
13403: PUSH
13404: LD_INT 16
13406: PUSH
13407: LD_INT 20
13409: PUSH
13410: LD_INT 21
13412: PUSH
13413: LD_INT 22
13415: PUSH
13416: LD_INT 23
13418: PUSH
13419: LD_INT 25
13421: PUSH
13422: LD_INT 26
13424: PUSH
13425: LD_INT 30
13427: PUSH
13428: LD_INT 31
13430: PUSH
13431: LD_INT 32
13433: PUSH
13434: LD_INT 33
13436: PUSH
13437: LD_INT 34
13439: PUSH
13440: LD_INT 35
13442: PUSH
13443: LD_INT 36
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: LIST
13468: PUSH
13469: LD_INT 101
13471: PUSH
13472: LD_INT 102
13474: PUSH
13475: LD_INT 103
13477: PUSH
13478: LD_INT 106
13480: PUSH
13481: LD_INT 108
13483: PUSH
13484: LD_INT 112
13486: PUSH
13487: LD_INT 113
13489: PUSH
13490: LD_INT 114
13492: PUSH
13493: LD_INT 115
13495: PUSH
13496: LD_INT 116
13498: PUSH
13499: LD_INT 117
13501: PUSH
13502: LD_INT 118
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: ST_TO_ADDR
13523: GO 13766
13525: LD_INT 19
13527: DOUBLE
13528: EQUAL
13529: IFTRUE 13533
13531: GO 13765
13533: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
13534: LD_ADDR_VAR 0 2
13538: PUSH
13539: LD_INT 1
13541: PUSH
13542: LD_INT 2
13544: PUSH
13545: LD_INT 3
13547: PUSH
13548: LD_INT 4
13550: PUSH
13551: LD_INT 5
13553: PUSH
13554: LD_INT 6
13556: PUSH
13557: LD_INT 7
13559: PUSH
13560: LD_INT 8
13562: PUSH
13563: LD_INT 9
13565: PUSH
13566: LD_INT 10
13568: PUSH
13569: LD_INT 11
13571: PUSH
13572: LD_INT 12
13574: PUSH
13575: LD_INT 13
13577: PUSH
13578: LD_INT 14
13580: PUSH
13581: LD_INT 15
13583: PUSH
13584: LD_INT 16
13586: PUSH
13587: LD_INT 17
13589: PUSH
13590: LD_INT 18
13592: PUSH
13593: LD_INT 19
13595: PUSH
13596: LD_INT 20
13598: PUSH
13599: LD_INT 21
13601: PUSH
13602: LD_INT 22
13604: PUSH
13605: LD_INT 23
13607: PUSH
13608: LD_INT 24
13610: PUSH
13611: LD_INT 25
13613: PUSH
13614: LD_INT 26
13616: PUSH
13617: LD_INT 27
13619: PUSH
13620: LD_INT 28
13622: PUSH
13623: LD_INT 29
13625: PUSH
13626: LD_INT 30
13628: PUSH
13629: LD_INT 31
13631: PUSH
13632: LD_INT 32
13634: PUSH
13635: LD_INT 33
13637: PUSH
13638: LD_INT 34
13640: PUSH
13641: LD_INT 35
13643: PUSH
13644: LD_INT 36
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: PUSH
13685: LD_INT 101
13687: PUSH
13688: LD_INT 102
13690: PUSH
13691: LD_INT 103
13693: PUSH
13694: LD_INT 104
13696: PUSH
13697: LD_INT 105
13699: PUSH
13700: LD_INT 106
13702: PUSH
13703: LD_INT 107
13705: PUSH
13706: LD_INT 108
13708: PUSH
13709: LD_INT 109
13711: PUSH
13712: LD_INT 110
13714: PUSH
13715: LD_INT 111
13717: PUSH
13718: LD_INT 112
13720: PUSH
13721: LD_INT 113
13723: PUSH
13724: LD_INT 114
13726: PUSH
13727: LD_INT 115
13729: PUSH
13730: LD_INT 116
13732: PUSH
13733: LD_INT 117
13735: PUSH
13736: LD_INT 118
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: ST_TO_ADDR
13763: GO 13766
13765: POP
// end else
13766: GO 13997
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13768: LD_ADDR_VAR 0 2
13772: PUSH
13773: LD_INT 1
13775: PUSH
13776: LD_INT 2
13778: PUSH
13779: LD_INT 3
13781: PUSH
13782: LD_INT 4
13784: PUSH
13785: LD_INT 5
13787: PUSH
13788: LD_INT 6
13790: PUSH
13791: LD_INT 7
13793: PUSH
13794: LD_INT 8
13796: PUSH
13797: LD_INT 9
13799: PUSH
13800: LD_INT 10
13802: PUSH
13803: LD_INT 11
13805: PUSH
13806: LD_INT 12
13808: PUSH
13809: LD_INT 13
13811: PUSH
13812: LD_INT 14
13814: PUSH
13815: LD_INT 15
13817: PUSH
13818: LD_INT 16
13820: PUSH
13821: LD_INT 17
13823: PUSH
13824: LD_INT 18
13826: PUSH
13827: LD_INT 19
13829: PUSH
13830: LD_INT 20
13832: PUSH
13833: LD_INT 21
13835: PUSH
13836: LD_INT 22
13838: PUSH
13839: LD_INT 23
13841: PUSH
13842: LD_INT 24
13844: PUSH
13845: LD_INT 25
13847: PUSH
13848: LD_INT 26
13850: PUSH
13851: LD_INT 27
13853: PUSH
13854: LD_INT 28
13856: PUSH
13857: LD_INT 29
13859: PUSH
13860: LD_INT 30
13862: PUSH
13863: LD_INT 31
13865: PUSH
13866: LD_INT 32
13868: PUSH
13869: LD_INT 33
13871: PUSH
13872: LD_INT 34
13874: PUSH
13875: LD_INT 35
13877: PUSH
13878: LD_INT 36
13880: PUSH
13881: EMPTY
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: PUSH
13919: LD_INT 101
13921: PUSH
13922: LD_INT 102
13924: PUSH
13925: LD_INT 103
13927: PUSH
13928: LD_INT 104
13930: PUSH
13931: LD_INT 105
13933: PUSH
13934: LD_INT 106
13936: PUSH
13937: LD_INT 107
13939: PUSH
13940: LD_INT 108
13942: PUSH
13943: LD_INT 109
13945: PUSH
13946: LD_INT 110
13948: PUSH
13949: LD_INT 111
13951: PUSH
13952: LD_INT 112
13954: PUSH
13955: LD_INT 113
13957: PUSH
13958: LD_INT 114
13960: PUSH
13961: LD_INT 115
13963: PUSH
13964: LD_INT 116
13966: PUSH
13967: LD_INT 117
13969: PUSH
13970: LD_INT 118
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: LIST
13984: LIST
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: ST_TO_ADDR
// if result then
13997: LD_VAR 0 2
14001: IFFALSE 14787
// begin normal :=  ;
14003: LD_ADDR_VAR 0 5
14007: PUSH
14008: LD_STRING 
14010: ST_TO_ADDR
// hardcore :=  ;
14011: LD_ADDR_VAR 0 6
14015: PUSH
14016: LD_STRING 
14018: ST_TO_ADDR
// active :=  ;
14019: LD_ADDR_VAR 0 7
14023: PUSH
14024: LD_STRING 
14026: ST_TO_ADDR
// for i = 1 to normalCounter do
14027: LD_ADDR_VAR 0 8
14031: PUSH
14032: DOUBLE
14033: LD_INT 1
14035: DEC
14036: ST_TO_ADDR
14037: LD_EXP 32
14041: PUSH
14042: FOR_TO
14043: IFFALSE 14144
// begin tmp := 0 ;
14045: LD_ADDR_VAR 0 3
14049: PUSH
14050: LD_STRING 0
14052: ST_TO_ADDR
// if result [ 1 ] then
14053: LD_VAR 0 2
14057: PUSH
14058: LD_INT 1
14060: ARRAY
14061: IFFALSE 14126
// if result [ 1 ] [ 1 ] = i then
14063: LD_VAR 0 2
14067: PUSH
14068: LD_INT 1
14070: ARRAY
14071: PUSH
14072: LD_INT 1
14074: ARRAY
14075: PUSH
14076: LD_VAR 0 8
14080: EQUAL
14081: IFFALSE 14126
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
14083: LD_ADDR_VAR 0 2
14087: PUSH
14088: LD_VAR 0 2
14092: PPUSH
14093: LD_INT 1
14095: PPUSH
14096: LD_VAR 0 2
14100: PUSH
14101: LD_INT 1
14103: ARRAY
14104: PPUSH
14105: LD_INT 1
14107: PPUSH
14108: CALL_OW 3
14112: PPUSH
14113: CALL_OW 1
14117: ST_TO_ADDR
// tmp := 1 ;
14118: LD_ADDR_VAR 0 3
14122: PUSH
14123: LD_STRING 1
14125: ST_TO_ADDR
// end ; normal := normal & tmp ;
14126: LD_ADDR_VAR 0 5
14130: PUSH
14131: LD_VAR 0 5
14135: PUSH
14136: LD_VAR 0 3
14140: STR
14141: ST_TO_ADDR
// end ;
14142: GO 14042
14144: POP
14145: POP
// for i = 1 to hardcoreCounter do
14146: LD_ADDR_VAR 0 8
14150: PUSH
14151: DOUBLE
14152: LD_INT 1
14154: DEC
14155: ST_TO_ADDR
14156: LD_EXP 33
14160: PUSH
14161: FOR_TO
14162: IFFALSE 14267
// begin tmp := 0 ;
14164: LD_ADDR_VAR 0 3
14168: PUSH
14169: LD_STRING 0
14171: ST_TO_ADDR
// if result [ 2 ] then
14172: LD_VAR 0 2
14176: PUSH
14177: LD_INT 2
14179: ARRAY
14180: IFFALSE 14249
// if result [ 2 ] [ 1 ] = 100 + i then
14182: LD_VAR 0 2
14186: PUSH
14187: LD_INT 2
14189: ARRAY
14190: PUSH
14191: LD_INT 1
14193: ARRAY
14194: PUSH
14195: LD_INT 100
14197: PUSH
14198: LD_VAR 0 8
14202: PLUS
14203: EQUAL
14204: IFFALSE 14249
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
14206: LD_ADDR_VAR 0 2
14210: PUSH
14211: LD_VAR 0 2
14215: PPUSH
14216: LD_INT 2
14218: PPUSH
14219: LD_VAR 0 2
14223: PUSH
14224: LD_INT 2
14226: ARRAY
14227: PPUSH
14228: LD_INT 1
14230: PPUSH
14231: CALL_OW 3
14235: PPUSH
14236: CALL_OW 1
14240: ST_TO_ADDR
// tmp := 1 ;
14241: LD_ADDR_VAR 0 3
14245: PUSH
14246: LD_STRING 1
14248: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
14249: LD_ADDR_VAR 0 6
14253: PUSH
14254: LD_VAR 0 6
14258: PUSH
14259: LD_VAR 0 3
14263: STR
14264: ST_TO_ADDR
// end ;
14265: GO 14161
14267: POP
14268: POP
// if isGameLoad then
14269: LD_VAR 0 1
14273: IFFALSE 14748
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
14275: LD_ADDR_VAR 0 4
14279: PUSH
14280: LD_EXP 36
14284: PUSH
14285: LD_EXP 35
14289: PUSH
14290: LD_EXP 37
14294: PUSH
14295: LD_EXP 34
14299: PUSH
14300: LD_EXP 38
14304: PUSH
14305: LD_EXP 39
14309: PUSH
14310: LD_EXP 40
14314: PUSH
14315: LD_EXP 41
14319: PUSH
14320: LD_EXP 42
14324: PUSH
14325: LD_EXP 43
14329: PUSH
14330: LD_EXP 44
14334: PUSH
14335: LD_EXP 45
14339: PUSH
14340: LD_EXP 46
14344: PUSH
14345: LD_EXP 47
14349: PUSH
14350: LD_EXP 55
14354: PUSH
14355: LD_EXP 56
14359: PUSH
14360: LD_EXP 57
14364: PUSH
14365: LD_EXP 58
14369: PUSH
14370: LD_EXP 60
14374: PUSH
14375: LD_EXP 61
14379: PUSH
14380: LD_EXP 62
14384: PUSH
14385: LD_EXP 65
14389: PUSH
14390: LD_EXP 67
14394: PUSH
14395: LD_EXP 68
14399: PUSH
14400: LD_EXP 69
14404: PUSH
14405: LD_EXP 71
14409: PUSH
14410: LD_EXP 72
14414: PUSH
14415: LD_EXP 75
14419: PUSH
14420: LD_EXP 76
14424: PUSH
14425: LD_EXP 77
14429: PUSH
14430: LD_EXP 78
14434: PUSH
14435: LD_EXP 79
14439: PUSH
14440: LD_EXP 80
14444: PUSH
14445: LD_EXP 81
14449: PUSH
14450: LD_EXP 82
14454: PUSH
14455: LD_EXP 83
14459: PUSH
14460: LD_EXP 48
14464: PUSH
14465: LD_EXP 49
14469: PUSH
14470: LD_EXP 52
14474: PUSH
14475: LD_EXP 53
14479: PUSH
14480: LD_EXP 54
14484: PUSH
14485: LD_EXP 50
14489: PUSH
14490: LD_EXP 51
14494: PUSH
14495: LD_EXP 59
14499: PUSH
14500: LD_EXP 63
14504: PUSH
14505: LD_EXP 64
14509: PUSH
14510: LD_EXP 66
14514: PUSH
14515: LD_EXP 70
14519: PUSH
14520: LD_EXP 73
14524: PUSH
14525: LD_EXP 74
14529: PUSH
14530: LD_EXP 84
14534: PUSH
14535: LD_EXP 85
14539: PUSH
14540: LD_EXP 86
14544: PUSH
14545: LD_EXP 87
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: LIST
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: ST_TO_ADDR
// tmp :=  ;
14606: LD_ADDR_VAR 0 3
14610: PUSH
14611: LD_STRING 
14613: ST_TO_ADDR
// for i = 1 to normalCounter do
14614: LD_ADDR_VAR 0 8
14618: PUSH
14619: DOUBLE
14620: LD_INT 1
14622: DEC
14623: ST_TO_ADDR
14624: LD_EXP 32
14628: PUSH
14629: FOR_TO
14630: IFFALSE 14666
// begin if flags [ i ] then
14632: LD_VAR 0 4
14636: PUSH
14637: LD_VAR 0 8
14641: ARRAY
14642: IFFALSE 14664
// tmp := tmp & i & ; ;
14644: LD_ADDR_VAR 0 3
14648: PUSH
14649: LD_VAR 0 3
14653: PUSH
14654: LD_VAR 0 8
14658: STR
14659: PUSH
14660: LD_STRING ;
14662: STR
14663: ST_TO_ADDR
// end ;
14664: GO 14629
14666: POP
14667: POP
// for i = 1 to hardcoreCounter do
14668: LD_ADDR_VAR 0 8
14672: PUSH
14673: DOUBLE
14674: LD_INT 1
14676: DEC
14677: ST_TO_ADDR
14678: LD_EXP 33
14682: PUSH
14683: FOR_TO
14684: IFFALSE 14730
// begin if flags [ normalCounter + i ] then
14686: LD_VAR 0 4
14690: PUSH
14691: LD_EXP 32
14695: PUSH
14696: LD_VAR 0 8
14700: PLUS
14701: ARRAY
14702: IFFALSE 14728
// tmp := tmp & ( 100 + i ) & ; ;
14704: LD_ADDR_VAR 0 3
14708: PUSH
14709: LD_VAR 0 3
14713: PUSH
14714: LD_INT 100
14716: PUSH
14717: LD_VAR 0 8
14721: PLUS
14722: STR
14723: PUSH
14724: LD_STRING ;
14726: STR
14727: ST_TO_ADDR
// end ;
14728: GO 14683
14730: POP
14731: POP
// if tmp then
14732: LD_VAR 0 3
14736: IFFALSE 14748
// active := tmp ;
14738: LD_ADDR_VAR 0 7
14742: PUSH
14743: LD_VAR 0 3
14747: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14748: LD_STRING getStreamItemsFromMission("
14750: PUSH
14751: LD_VAR 0 5
14755: STR
14756: PUSH
14757: LD_STRING ","
14759: STR
14760: PUSH
14761: LD_VAR 0 6
14765: STR
14766: PUSH
14767: LD_STRING ","
14769: STR
14770: PUSH
14771: LD_VAR 0 7
14775: STR
14776: PUSH
14777: LD_STRING ")
14779: STR
14780: PPUSH
14781: CALL_OW 559
// end else
14785: GO 14794
// ToLua ( getStreamItemsFromMission("","","") ) ;
14787: LD_STRING getStreamItemsFromMission("","","")
14789: PPUSH
14790: CALL_OW 559
// end ;
14794: LD_VAR 0 2
14798: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14799: LD_EXP 31
14803: PUSH
14804: LD_EXP 36
14808: AND
14809: IFFALSE 14933
14811: GO 14813
14813: DISABLE
14814: LD_INT 0
14816: PPUSH
14817: PPUSH
// begin enable ;
14818: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14819: LD_ADDR_VAR 0 2
14823: PUSH
14824: LD_INT 22
14826: PUSH
14827: LD_OWVAR 2
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: LD_INT 2
14838: PUSH
14839: LD_INT 34
14841: PUSH
14842: LD_INT 7
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 34
14851: PUSH
14852: LD_INT 45
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PUSH
14859: LD_INT 34
14861: PUSH
14862: LD_INT 28
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 34
14871: PUSH
14872: LD_INT 47
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PPUSH
14890: CALL_OW 69
14894: ST_TO_ADDR
// if not tmp then
14895: LD_VAR 0 2
14899: NOT
14900: IFFALSE 14904
// exit ;
14902: GO 14933
// for i in tmp do
14904: LD_ADDR_VAR 0 1
14908: PUSH
14909: LD_VAR 0 2
14913: PUSH
14914: FOR_IN
14915: IFFALSE 14931
// begin SetLives ( i , 0 ) ;
14917: LD_VAR 0 1
14921: PPUSH
14922: LD_INT 0
14924: PPUSH
14925: CALL_OW 234
// end ;
14929: GO 14914
14931: POP
14932: POP
// end ;
14933: PPOPN 2
14935: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14936: LD_EXP 31
14940: PUSH
14941: LD_EXP 37
14945: AND
14946: IFFALSE 15030
14948: GO 14950
14950: DISABLE
14951: LD_INT 0
14953: PPUSH
14954: PPUSH
// begin enable ;
14955: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14956: LD_ADDR_VAR 0 2
14960: PUSH
14961: LD_INT 22
14963: PUSH
14964: LD_OWVAR 2
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: LD_INT 32
14975: PUSH
14976: LD_INT 3
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PPUSH
14987: CALL_OW 69
14991: ST_TO_ADDR
// if not tmp then
14992: LD_VAR 0 2
14996: NOT
14997: IFFALSE 15001
// exit ;
14999: GO 15030
// for i in tmp do
15001: LD_ADDR_VAR 0 1
15005: PUSH
15006: LD_VAR 0 2
15010: PUSH
15011: FOR_IN
15012: IFFALSE 15028
// begin SetLives ( i , 0 ) ;
15014: LD_VAR 0 1
15018: PPUSH
15019: LD_INT 0
15021: PPUSH
15022: CALL_OW 234
// end ;
15026: GO 15011
15028: POP
15029: POP
// end ;
15030: PPOPN 2
15032: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
15033: LD_EXP 31
15037: PUSH
15038: LD_EXP 34
15042: AND
15043: IFFALSE 15136
15045: GO 15047
15047: DISABLE
15048: LD_INT 0
15050: PPUSH
// begin enable ;
15051: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
15052: LD_ADDR_VAR 0 1
15056: PUSH
15057: LD_INT 22
15059: PUSH
15060: LD_OWVAR 2
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: PUSH
15069: LD_INT 2
15071: PUSH
15072: LD_INT 25
15074: PUSH
15075: LD_INT 5
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: PUSH
15082: LD_INT 25
15084: PUSH
15085: LD_INT 9
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: PUSH
15092: LD_INT 25
15094: PUSH
15095: LD_INT 8
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: PPUSH
15112: CALL_OW 69
15116: PUSH
15117: FOR_IN
15118: IFFALSE 15134
// begin SetClass ( i , 1 ) ;
15120: LD_VAR 0 1
15124: PPUSH
15125: LD_INT 1
15127: PPUSH
15128: CALL_OW 336
// end ;
15132: GO 15117
15134: POP
15135: POP
// end ;
15136: PPOPN 1
15138: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
15139: LD_EXP 31
15143: PUSH
15144: LD_EXP 35
15148: AND
15149: PUSH
15150: LD_OWVAR 65
15154: PUSH
15155: LD_INT 7
15157: LESS
15158: AND
15159: IFFALSE 15173
15161: GO 15163
15163: DISABLE
// begin enable ;
15164: ENABLE
// game_speed := 7 ;
15165: LD_ADDR_OWVAR 65
15169: PUSH
15170: LD_INT 7
15172: ST_TO_ADDR
// end ;
15173: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
15174: LD_EXP 31
15178: PUSH
15179: LD_EXP 38
15183: AND
15184: IFFALSE 15386
15186: GO 15188
15188: DISABLE
15189: LD_INT 0
15191: PPUSH
15192: PPUSH
15193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15194: LD_ADDR_VAR 0 3
15198: PUSH
15199: LD_INT 81
15201: PUSH
15202: LD_OWVAR 2
15206: PUSH
15207: EMPTY
15208: LIST
15209: LIST
15210: PUSH
15211: LD_INT 21
15213: PUSH
15214: LD_INT 1
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PUSH
15221: EMPTY
15222: LIST
15223: LIST
15224: PPUSH
15225: CALL_OW 69
15229: ST_TO_ADDR
// if not tmp then
15230: LD_VAR 0 3
15234: NOT
15235: IFFALSE 15239
// exit ;
15237: GO 15386
// if tmp > 5 then
15239: LD_VAR 0 3
15243: PUSH
15244: LD_INT 5
15246: GREATER
15247: IFFALSE 15259
// k := 5 else
15249: LD_ADDR_VAR 0 2
15253: PUSH
15254: LD_INT 5
15256: ST_TO_ADDR
15257: GO 15269
// k := tmp ;
15259: LD_ADDR_VAR 0 2
15263: PUSH
15264: LD_VAR 0 3
15268: ST_TO_ADDR
// for i := 1 to k do
15269: LD_ADDR_VAR 0 1
15273: PUSH
15274: DOUBLE
15275: LD_INT 1
15277: DEC
15278: ST_TO_ADDR
15279: LD_VAR 0 2
15283: PUSH
15284: FOR_TO
15285: IFFALSE 15384
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
15287: LD_VAR 0 3
15291: PUSH
15292: LD_VAR 0 1
15296: ARRAY
15297: PPUSH
15298: LD_VAR 0 1
15302: PUSH
15303: LD_INT 4
15305: MOD
15306: PUSH
15307: LD_INT 1
15309: PLUS
15310: PPUSH
15311: CALL_OW 259
15315: PUSH
15316: LD_INT 10
15318: LESS
15319: IFFALSE 15382
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
15321: LD_VAR 0 3
15325: PUSH
15326: LD_VAR 0 1
15330: ARRAY
15331: PPUSH
15332: LD_VAR 0 1
15336: PUSH
15337: LD_INT 4
15339: MOD
15340: PUSH
15341: LD_INT 1
15343: PLUS
15344: PPUSH
15345: LD_VAR 0 3
15349: PUSH
15350: LD_VAR 0 1
15354: ARRAY
15355: PPUSH
15356: LD_VAR 0 1
15360: PUSH
15361: LD_INT 4
15363: MOD
15364: PUSH
15365: LD_INT 1
15367: PLUS
15368: PPUSH
15369: CALL_OW 259
15373: PUSH
15374: LD_INT 1
15376: PLUS
15377: PPUSH
15378: CALL_OW 237
15382: GO 15284
15384: POP
15385: POP
// end ;
15386: PPOPN 3
15388: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
15389: LD_EXP 31
15393: PUSH
15394: LD_EXP 39
15398: AND
15399: IFFALSE 15419
15401: GO 15403
15403: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
15404: LD_INT 4
15406: PPUSH
15407: LD_OWVAR 2
15411: PPUSH
15412: LD_INT 0
15414: PPUSH
15415: CALL_OW 324
15419: END
// every 0 0$1 trigger StreamModeActive and sShovel do
15420: LD_EXP 31
15424: PUSH
15425: LD_EXP 68
15429: AND
15430: IFFALSE 15450
15432: GO 15434
15434: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
15435: LD_INT 19
15437: PPUSH
15438: LD_OWVAR 2
15442: PPUSH
15443: LD_INT 0
15445: PPUSH
15446: CALL_OW 324
15450: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
15451: LD_EXP 31
15455: PUSH
15456: LD_EXP 40
15460: AND
15461: IFFALSE 15563
15463: GO 15465
15465: DISABLE
15466: LD_INT 0
15468: PPUSH
15469: PPUSH
// begin enable ;
15470: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
15471: LD_ADDR_VAR 0 2
15475: PUSH
15476: LD_INT 22
15478: PUSH
15479: LD_OWVAR 2
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PUSH
15488: LD_INT 2
15490: PUSH
15491: LD_INT 34
15493: PUSH
15494: LD_INT 11
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 34
15503: PUSH
15504: LD_INT 30
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: LIST
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PPUSH
15520: CALL_OW 69
15524: ST_TO_ADDR
// if not tmp then
15525: LD_VAR 0 2
15529: NOT
15530: IFFALSE 15534
// exit ;
15532: GO 15563
// for i in tmp do
15534: LD_ADDR_VAR 0 1
15538: PUSH
15539: LD_VAR 0 2
15543: PUSH
15544: FOR_IN
15545: IFFALSE 15561
// begin SetLives ( i , 0 ) ;
15547: LD_VAR 0 1
15551: PPUSH
15552: LD_INT 0
15554: PPUSH
15555: CALL_OW 234
// end ;
15559: GO 15544
15561: POP
15562: POP
// end ;
15563: PPOPN 2
15565: END
// every 0 0$1 trigger StreamModeActive and sBunker do
15566: LD_EXP 31
15570: PUSH
15571: LD_EXP 41
15575: AND
15576: IFFALSE 15596
15578: GO 15580
15580: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
15581: LD_INT 32
15583: PPUSH
15584: LD_OWVAR 2
15588: PPUSH
15589: LD_INT 0
15591: PPUSH
15592: CALL_OW 324
15596: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
15597: LD_EXP 31
15601: PUSH
15602: LD_EXP 42
15606: AND
15607: IFFALSE 15788
15609: GO 15611
15611: DISABLE
15612: LD_INT 0
15614: PPUSH
15615: PPUSH
15616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
15617: LD_ADDR_VAR 0 2
15621: PUSH
15622: LD_INT 22
15624: PUSH
15625: LD_OWVAR 2
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: LD_INT 33
15636: PUSH
15637: LD_INT 3
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PPUSH
15648: CALL_OW 69
15652: ST_TO_ADDR
// if not tmp then
15653: LD_VAR 0 2
15657: NOT
15658: IFFALSE 15662
// exit ;
15660: GO 15788
// side := 0 ;
15662: LD_ADDR_VAR 0 3
15666: PUSH
15667: LD_INT 0
15669: ST_TO_ADDR
// for i := 1 to 8 do
15670: LD_ADDR_VAR 0 1
15674: PUSH
15675: DOUBLE
15676: LD_INT 1
15678: DEC
15679: ST_TO_ADDR
15680: LD_INT 8
15682: PUSH
15683: FOR_TO
15684: IFFALSE 15732
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15686: LD_OWVAR 2
15690: PUSH
15691: LD_VAR 0 1
15695: NONEQUAL
15696: PUSH
15697: LD_OWVAR 2
15701: PPUSH
15702: LD_VAR 0 1
15706: PPUSH
15707: CALL_OW 81
15711: PUSH
15712: LD_INT 2
15714: EQUAL
15715: AND
15716: IFFALSE 15730
// begin side := i ;
15718: LD_ADDR_VAR 0 3
15722: PUSH
15723: LD_VAR 0 1
15727: ST_TO_ADDR
// break ;
15728: GO 15732
// end ;
15730: GO 15683
15732: POP
15733: POP
// if not side then
15734: LD_VAR 0 3
15738: NOT
15739: IFFALSE 15743
// exit ;
15741: GO 15788
// for i := 1 to tmp do
15743: LD_ADDR_VAR 0 1
15747: PUSH
15748: DOUBLE
15749: LD_INT 1
15751: DEC
15752: ST_TO_ADDR
15753: LD_VAR 0 2
15757: PUSH
15758: FOR_TO
15759: IFFALSE 15786
// if Prob ( 60 ) then
15761: LD_INT 60
15763: PPUSH
15764: CALL_OW 13
15768: IFFALSE 15784
// SetSide ( i , side ) ;
15770: LD_VAR 0 1
15774: PPUSH
15775: LD_VAR 0 3
15779: PPUSH
15780: CALL_OW 235
15784: GO 15758
15786: POP
15787: POP
// end ;
15788: PPOPN 3
15790: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15791: LD_EXP 31
15795: PUSH
15796: LD_EXP 44
15800: AND
15801: IFFALSE 15920
15803: GO 15805
15805: DISABLE
15806: LD_INT 0
15808: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15809: LD_ADDR_VAR 0 1
15813: PUSH
15814: LD_INT 22
15816: PUSH
15817: LD_OWVAR 2
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: LD_INT 21
15828: PUSH
15829: LD_INT 1
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: LD_INT 3
15838: PUSH
15839: LD_INT 23
15841: PUSH
15842: LD_INT 0
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: LIST
15857: PPUSH
15858: CALL_OW 69
15862: PUSH
15863: FOR_IN
15864: IFFALSE 15918
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15866: LD_VAR 0 1
15870: PPUSH
15871: CALL_OW 257
15875: PUSH
15876: LD_INT 1
15878: PUSH
15879: LD_INT 2
15881: PUSH
15882: LD_INT 3
15884: PUSH
15885: LD_INT 4
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: IN
15894: IFFALSE 15916
// SetClass ( un , rand ( 1 , 4 ) ) ;
15896: LD_VAR 0 1
15900: PPUSH
15901: LD_INT 1
15903: PPUSH
15904: LD_INT 4
15906: PPUSH
15907: CALL_OW 12
15911: PPUSH
15912: CALL_OW 336
15916: GO 15863
15918: POP
15919: POP
// end ;
15920: PPOPN 1
15922: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15923: LD_EXP 31
15927: PUSH
15928: LD_EXP 43
15932: AND
15933: IFFALSE 16012
15935: GO 15937
15937: DISABLE
15938: LD_INT 0
15940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15941: LD_ADDR_VAR 0 1
15945: PUSH
15946: LD_INT 22
15948: PUSH
15949: LD_OWVAR 2
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: PUSH
15958: LD_INT 21
15960: PUSH
15961: LD_INT 3
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PPUSH
15972: CALL_OW 69
15976: ST_TO_ADDR
// if not tmp then
15977: LD_VAR 0 1
15981: NOT
15982: IFFALSE 15986
// exit ;
15984: GO 16012
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15986: LD_VAR 0 1
15990: PUSH
15991: LD_INT 1
15993: PPUSH
15994: LD_VAR 0 1
15998: PPUSH
15999: CALL_OW 12
16003: ARRAY
16004: PPUSH
16005: LD_INT 100
16007: PPUSH
16008: CALL_OW 234
// end ;
16012: PPOPN 1
16014: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
16015: LD_EXP 31
16019: PUSH
16020: LD_EXP 45
16024: AND
16025: IFFALSE 16123
16027: GO 16029
16029: DISABLE
16030: LD_INT 0
16032: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16033: LD_ADDR_VAR 0 1
16037: PUSH
16038: LD_INT 22
16040: PUSH
16041: LD_OWVAR 2
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PUSH
16050: LD_INT 21
16052: PUSH
16053: LD_INT 1
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PPUSH
16064: CALL_OW 69
16068: ST_TO_ADDR
// if not tmp then
16069: LD_VAR 0 1
16073: NOT
16074: IFFALSE 16078
// exit ;
16076: GO 16123
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
16078: LD_VAR 0 1
16082: PUSH
16083: LD_INT 1
16085: PPUSH
16086: LD_VAR 0 1
16090: PPUSH
16091: CALL_OW 12
16095: ARRAY
16096: PPUSH
16097: LD_INT 1
16099: PPUSH
16100: LD_INT 4
16102: PPUSH
16103: CALL_OW 12
16107: PPUSH
16108: LD_INT 3000
16110: PPUSH
16111: LD_INT 9000
16113: PPUSH
16114: CALL_OW 12
16118: PPUSH
16119: CALL_OW 492
// end ;
16123: PPOPN 1
16125: END
// every 0 0$1 trigger StreamModeActive and sDepot do
16126: LD_EXP 31
16130: PUSH
16131: LD_EXP 46
16135: AND
16136: IFFALSE 16156
16138: GO 16140
16140: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
16141: LD_INT 1
16143: PPUSH
16144: LD_OWVAR 2
16148: PPUSH
16149: LD_INT 0
16151: PPUSH
16152: CALL_OW 324
16156: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
16157: LD_EXP 31
16161: PUSH
16162: LD_EXP 47
16166: AND
16167: IFFALSE 16250
16169: GO 16171
16171: DISABLE
16172: LD_INT 0
16174: PPUSH
16175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
16176: LD_ADDR_VAR 0 2
16180: PUSH
16181: LD_INT 22
16183: PUSH
16184: LD_OWVAR 2
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PUSH
16193: LD_INT 21
16195: PUSH
16196: LD_INT 3
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: PPUSH
16207: CALL_OW 69
16211: ST_TO_ADDR
// if not tmp then
16212: LD_VAR 0 2
16216: NOT
16217: IFFALSE 16221
// exit ;
16219: GO 16250
// for i in tmp do
16221: LD_ADDR_VAR 0 1
16225: PUSH
16226: LD_VAR 0 2
16230: PUSH
16231: FOR_IN
16232: IFFALSE 16248
// SetBLevel ( i , 10 ) ;
16234: LD_VAR 0 1
16238: PPUSH
16239: LD_INT 10
16241: PPUSH
16242: CALL_OW 241
16246: GO 16231
16248: POP
16249: POP
// end ;
16250: PPOPN 2
16252: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
16253: LD_EXP 31
16257: PUSH
16258: LD_EXP 48
16262: AND
16263: IFFALSE 16374
16265: GO 16267
16267: DISABLE
16268: LD_INT 0
16270: PPUSH
16271: PPUSH
16272: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16273: LD_ADDR_VAR 0 3
16277: PUSH
16278: LD_INT 22
16280: PUSH
16281: LD_OWVAR 2
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 25
16292: PUSH
16293: LD_INT 1
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: EMPTY
16301: LIST
16302: LIST
16303: PPUSH
16304: CALL_OW 69
16308: ST_TO_ADDR
// if not tmp then
16309: LD_VAR 0 3
16313: NOT
16314: IFFALSE 16318
// exit ;
16316: GO 16374
// un := tmp [ rand ( 1 , tmp ) ] ;
16318: LD_ADDR_VAR 0 2
16322: PUSH
16323: LD_VAR 0 3
16327: PUSH
16328: LD_INT 1
16330: PPUSH
16331: LD_VAR 0 3
16335: PPUSH
16336: CALL_OW 12
16340: ARRAY
16341: ST_TO_ADDR
// if Crawls ( un ) then
16342: LD_VAR 0 2
16346: PPUSH
16347: CALL_OW 318
16351: IFFALSE 16362
// ComWalk ( un ) ;
16353: LD_VAR 0 2
16357: PPUSH
16358: CALL_OW 138
// SetClass ( un , class_sniper ) ;
16362: LD_VAR 0 2
16366: PPUSH
16367: LD_INT 5
16369: PPUSH
16370: CALL_OW 336
// end ;
16374: PPOPN 3
16376: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
16377: LD_EXP 31
16381: PUSH
16382: LD_EXP 49
16386: AND
16387: PUSH
16388: LD_OWVAR 67
16392: PUSH
16393: LD_INT 4
16395: LESS
16396: AND
16397: IFFALSE 16416
16399: GO 16401
16401: DISABLE
// begin Difficulty := Difficulty + 1 ;
16402: LD_ADDR_OWVAR 67
16406: PUSH
16407: LD_OWVAR 67
16411: PUSH
16412: LD_INT 1
16414: PLUS
16415: ST_TO_ADDR
// end ;
16416: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
16417: LD_EXP 31
16421: PUSH
16422: LD_EXP 50
16426: AND
16427: IFFALSE 16530
16429: GO 16431
16431: DISABLE
16432: LD_INT 0
16434: PPUSH
// begin for i := 1 to 5 do
16435: LD_ADDR_VAR 0 1
16439: PUSH
16440: DOUBLE
16441: LD_INT 1
16443: DEC
16444: ST_TO_ADDR
16445: LD_INT 5
16447: PUSH
16448: FOR_TO
16449: IFFALSE 16528
// begin uc_nation := nation_nature ;
16451: LD_ADDR_OWVAR 21
16455: PUSH
16456: LD_INT 0
16458: ST_TO_ADDR
// uc_side := 0 ;
16459: LD_ADDR_OWVAR 20
16463: PUSH
16464: LD_INT 0
16466: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16467: LD_ADDR_OWVAR 29
16471: PUSH
16472: LD_INT 12
16474: PUSH
16475: LD_INT 12
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: ST_TO_ADDR
// hc_agressivity := 20 ;
16482: LD_ADDR_OWVAR 35
16486: PUSH
16487: LD_INT 20
16489: ST_TO_ADDR
// hc_class := class_tiger ;
16490: LD_ADDR_OWVAR 28
16494: PUSH
16495: LD_INT 14
16497: ST_TO_ADDR
// hc_gallery :=  ;
16498: LD_ADDR_OWVAR 33
16502: PUSH
16503: LD_STRING 
16505: ST_TO_ADDR
// hc_name :=  ;
16506: LD_ADDR_OWVAR 26
16510: PUSH
16511: LD_STRING 
16513: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
16514: CALL_OW 44
16518: PPUSH
16519: LD_INT 0
16521: PPUSH
16522: CALL_OW 51
// end ;
16526: GO 16448
16528: POP
16529: POP
// end ;
16530: PPOPN 1
16532: END
// every 0 0$1 trigger StreamModeActive and sBomb do
16533: LD_EXP 31
16537: PUSH
16538: LD_EXP 51
16542: AND
16543: IFFALSE 16552
16545: GO 16547
16547: DISABLE
// StreamSibBomb ;
16548: CALL 16553 0 0
16552: END
// export function StreamSibBomb ; var i , x , y ; begin
16553: LD_INT 0
16555: PPUSH
16556: PPUSH
16557: PPUSH
16558: PPUSH
// result := false ;
16559: LD_ADDR_VAR 0 1
16563: PUSH
16564: LD_INT 0
16566: ST_TO_ADDR
// for i := 1 to 16 do
16567: LD_ADDR_VAR 0 2
16571: PUSH
16572: DOUBLE
16573: LD_INT 1
16575: DEC
16576: ST_TO_ADDR
16577: LD_INT 16
16579: PUSH
16580: FOR_TO
16581: IFFALSE 16780
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16583: LD_ADDR_VAR 0 3
16587: PUSH
16588: LD_INT 10
16590: PUSH
16591: LD_INT 20
16593: PUSH
16594: LD_INT 30
16596: PUSH
16597: LD_INT 40
16599: PUSH
16600: LD_INT 50
16602: PUSH
16603: LD_INT 60
16605: PUSH
16606: LD_INT 70
16608: PUSH
16609: LD_INT 80
16611: PUSH
16612: LD_INT 90
16614: PUSH
16615: LD_INT 100
16617: PUSH
16618: LD_INT 110
16620: PUSH
16621: LD_INT 120
16623: PUSH
16624: LD_INT 130
16626: PUSH
16627: LD_INT 140
16629: PUSH
16630: LD_INT 150
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: PUSH
16650: LD_INT 1
16652: PPUSH
16653: LD_INT 15
16655: PPUSH
16656: CALL_OW 12
16660: ARRAY
16661: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16662: LD_ADDR_VAR 0 4
16666: PUSH
16667: LD_INT 10
16669: PUSH
16670: LD_INT 20
16672: PUSH
16673: LD_INT 30
16675: PUSH
16676: LD_INT 40
16678: PUSH
16679: LD_INT 50
16681: PUSH
16682: LD_INT 60
16684: PUSH
16685: LD_INT 70
16687: PUSH
16688: LD_INT 80
16690: PUSH
16691: LD_INT 90
16693: PUSH
16694: LD_INT 100
16696: PUSH
16697: LD_INT 110
16699: PUSH
16700: LD_INT 120
16702: PUSH
16703: LD_INT 130
16705: PUSH
16706: LD_INT 140
16708: PUSH
16709: LD_INT 150
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: PUSH
16729: LD_INT 1
16731: PPUSH
16732: LD_INT 15
16734: PPUSH
16735: CALL_OW 12
16739: ARRAY
16740: ST_TO_ADDR
// if ValidHex ( x , y ) then
16741: LD_VAR 0 3
16745: PPUSH
16746: LD_VAR 0 4
16750: PPUSH
16751: CALL_OW 488
16755: IFFALSE 16778
// begin result := [ x , y ] ;
16757: LD_ADDR_VAR 0 1
16761: PUSH
16762: LD_VAR 0 3
16766: PUSH
16767: LD_VAR 0 4
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: ST_TO_ADDR
// break ;
16776: GO 16780
// end ; end ;
16778: GO 16580
16780: POP
16781: POP
// if result then
16782: LD_VAR 0 1
16786: IFFALSE 16846
// begin ToLua ( playSibBomb() ) ;
16788: LD_STRING playSibBomb()
16790: PPUSH
16791: CALL_OW 559
// wait ( 0 0$14 ) ;
16795: LD_INT 490
16797: PPUSH
16798: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16802: LD_VAR 0 1
16806: PUSH
16807: LD_INT 1
16809: ARRAY
16810: PPUSH
16811: LD_VAR 0 1
16815: PUSH
16816: LD_INT 2
16818: ARRAY
16819: PPUSH
16820: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16824: LD_VAR 0 1
16828: PUSH
16829: LD_INT 1
16831: ARRAY
16832: PPUSH
16833: LD_VAR 0 1
16837: PUSH
16838: LD_INT 2
16840: ARRAY
16841: PPUSH
16842: CALL_OW 429
// end ; end ;
16846: LD_VAR 0 1
16850: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16851: LD_EXP 31
16855: PUSH
16856: LD_EXP 53
16860: AND
16861: IFFALSE 16873
16863: GO 16865
16865: DISABLE
// YouLost (  ) ;
16866: LD_STRING 
16868: PPUSH
16869: CALL_OW 104
16873: END
// every 0 0$1 trigger StreamModeActive and sFog do
16874: LD_EXP 31
16878: PUSH
16879: LD_EXP 52
16883: AND
16884: IFFALSE 16898
16886: GO 16888
16888: DISABLE
// FogOff ( your_side ) ;
16889: LD_OWVAR 2
16893: PPUSH
16894: CALL_OW 344
16898: END
// every 0 0$1 trigger StreamModeActive and sSun do
16899: LD_EXP 31
16903: PUSH
16904: LD_EXP 54
16908: AND
16909: IFFALSE 16937
16911: GO 16913
16913: DISABLE
// begin solar_recharge_percent := 0 ;
16914: LD_ADDR_OWVAR 79
16918: PUSH
16919: LD_INT 0
16921: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16922: LD_INT 10500
16924: PPUSH
16925: CALL_OW 67
// solar_recharge_percent := 100 ;
16929: LD_ADDR_OWVAR 79
16933: PUSH
16934: LD_INT 100
16936: ST_TO_ADDR
// end ;
16937: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16938: LD_EXP 31
16942: PUSH
16943: LD_EXP 55
16947: AND
16948: IFFALSE 17187
16950: GO 16952
16952: DISABLE
16953: LD_INT 0
16955: PPUSH
16956: PPUSH
16957: PPUSH
// begin tmp := [ ] ;
16958: LD_ADDR_VAR 0 3
16962: PUSH
16963: EMPTY
16964: ST_TO_ADDR
// for i := 1 to 6 do
16965: LD_ADDR_VAR 0 1
16969: PUSH
16970: DOUBLE
16971: LD_INT 1
16973: DEC
16974: ST_TO_ADDR
16975: LD_INT 6
16977: PUSH
16978: FOR_TO
16979: IFFALSE 17084
// begin uc_nation := nation_nature ;
16981: LD_ADDR_OWVAR 21
16985: PUSH
16986: LD_INT 0
16988: ST_TO_ADDR
// uc_side := 0 ;
16989: LD_ADDR_OWVAR 20
16993: PUSH
16994: LD_INT 0
16996: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16997: LD_ADDR_OWVAR 29
17001: PUSH
17002: LD_INT 12
17004: PUSH
17005: LD_INT 12
17007: PUSH
17008: EMPTY
17009: LIST
17010: LIST
17011: ST_TO_ADDR
// hc_agressivity := 20 ;
17012: LD_ADDR_OWVAR 35
17016: PUSH
17017: LD_INT 20
17019: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
17020: LD_ADDR_OWVAR 28
17024: PUSH
17025: LD_INT 17
17027: ST_TO_ADDR
// hc_gallery :=  ;
17028: LD_ADDR_OWVAR 33
17032: PUSH
17033: LD_STRING 
17035: ST_TO_ADDR
// hc_name :=  ;
17036: LD_ADDR_OWVAR 26
17040: PUSH
17041: LD_STRING 
17043: ST_TO_ADDR
// un := CreateHuman ;
17044: LD_ADDR_VAR 0 2
17048: PUSH
17049: CALL_OW 44
17053: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
17054: LD_VAR 0 2
17058: PPUSH
17059: LD_INT 1
17061: PPUSH
17062: CALL_OW 51
// tmp := tmp ^ un ;
17066: LD_ADDR_VAR 0 3
17070: PUSH
17071: LD_VAR 0 3
17075: PUSH
17076: LD_VAR 0 2
17080: ADD
17081: ST_TO_ADDR
// end ;
17082: GO 16978
17084: POP
17085: POP
// repeat wait ( 0 0$1 ) ;
17086: LD_INT 35
17088: PPUSH
17089: CALL_OW 67
// for un in tmp do
17093: LD_ADDR_VAR 0 2
17097: PUSH
17098: LD_VAR 0 3
17102: PUSH
17103: FOR_IN
17104: IFFALSE 17178
// begin if IsDead ( un ) then
17106: LD_VAR 0 2
17110: PPUSH
17111: CALL_OW 301
17115: IFFALSE 17135
// begin tmp := tmp diff un ;
17117: LD_ADDR_VAR 0 3
17121: PUSH
17122: LD_VAR 0 3
17126: PUSH
17127: LD_VAR 0 2
17131: DIFF
17132: ST_TO_ADDR
// continue ;
17133: GO 17103
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
17135: LD_VAR 0 2
17139: PPUSH
17140: LD_INT 3
17142: PUSH
17143: LD_INT 22
17145: PUSH
17146: LD_INT 0
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PPUSH
17157: CALL_OW 69
17161: PPUSH
17162: LD_VAR 0 2
17166: PPUSH
17167: CALL_OW 74
17171: PPUSH
17172: CALL_OW 115
// end ;
17176: GO 17103
17178: POP
17179: POP
// until not tmp ;
17180: LD_VAR 0 3
17184: NOT
17185: IFFALSE 17086
// end ;
17187: PPOPN 3
17189: END
// every 0 0$1 trigger StreamModeActive and sTroll do
17190: LD_EXP 31
17194: PUSH
17195: LD_EXP 56
17199: AND
17200: IFFALSE 17254
17202: GO 17204
17204: DISABLE
// begin ToLua ( displayTroll(); ) ;
17205: LD_STRING displayTroll();
17207: PPUSH
17208: CALL_OW 559
// wait ( 3 3$00 ) ;
17212: LD_INT 6300
17214: PPUSH
17215: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17219: LD_STRING hideTroll();
17221: PPUSH
17222: CALL_OW 559
// wait ( 1 1$00 ) ;
17226: LD_INT 2100
17228: PPUSH
17229: CALL_OW 67
// ToLua ( displayTroll(); ) ;
17233: LD_STRING displayTroll();
17235: PPUSH
17236: CALL_OW 559
// wait ( 1 1$00 ) ;
17240: LD_INT 2100
17242: PPUSH
17243: CALL_OW 67
// ToLua ( hideTroll(); ) ;
17247: LD_STRING hideTroll();
17249: PPUSH
17250: CALL_OW 559
// end ;
17254: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
17255: LD_EXP 31
17259: PUSH
17260: LD_EXP 57
17264: AND
17265: IFFALSE 17328
17267: GO 17269
17269: DISABLE
17270: LD_INT 0
17272: PPUSH
// begin p := 0 ;
17273: LD_ADDR_VAR 0 1
17277: PUSH
17278: LD_INT 0
17280: ST_TO_ADDR
// repeat game_speed := 1 ;
17281: LD_ADDR_OWVAR 65
17285: PUSH
17286: LD_INT 1
17288: ST_TO_ADDR
// wait ( 0 0$1 ) ;
17289: LD_INT 35
17291: PPUSH
17292: CALL_OW 67
// p := p + 1 ;
17296: LD_ADDR_VAR 0 1
17300: PUSH
17301: LD_VAR 0 1
17305: PUSH
17306: LD_INT 1
17308: PLUS
17309: ST_TO_ADDR
// until p >= 60 ;
17310: LD_VAR 0 1
17314: PUSH
17315: LD_INT 60
17317: GREATEREQUAL
17318: IFFALSE 17281
// game_speed := 4 ;
17320: LD_ADDR_OWVAR 65
17324: PUSH
17325: LD_INT 4
17327: ST_TO_ADDR
// end ;
17328: PPOPN 1
17330: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
17331: LD_EXP 31
17335: PUSH
17336: LD_EXP 58
17340: AND
17341: IFFALSE 17487
17343: GO 17345
17345: DISABLE
17346: LD_INT 0
17348: PPUSH
17349: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17350: LD_ADDR_VAR 0 1
17354: PUSH
17355: LD_INT 22
17357: PUSH
17358: LD_OWVAR 2
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 2
17369: PUSH
17370: LD_INT 30
17372: PUSH
17373: LD_INT 0
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 30
17382: PUSH
17383: LD_INT 1
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: LIST
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PPUSH
17399: CALL_OW 69
17403: ST_TO_ADDR
// if not depot then
17404: LD_VAR 0 1
17408: NOT
17409: IFFALSE 17413
// exit ;
17411: GO 17487
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
17413: LD_ADDR_VAR 0 2
17417: PUSH
17418: LD_VAR 0 1
17422: PUSH
17423: LD_INT 1
17425: PPUSH
17426: LD_VAR 0 1
17430: PPUSH
17431: CALL_OW 12
17435: ARRAY
17436: PPUSH
17437: CALL_OW 274
17441: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
17442: LD_VAR 0 2
17446: PPUSH
17447: LD_INT 1
17449: PPUSH
17450: LD_INT 0
17452: PPUSH
17453: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
17457: LD_VAR 0 2
17461: PPUSH
17462: LD_INT 2
17464: PPUSH
17465: LD_INT 0
17467: PPUSH
17468: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
17472: LD_VAR 0 2
17476: PPUSH
17477: LD_INT 3
17479: PPUSH
17480: LD_INT 0
17482: PPUSH
17483: CALL_OW 277
// end ;
17487: PPOPN 2
17489: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
17490: LD_EXP 31
17494: PUSH
17495: LD_EXP 59
17499: AND
17500: IFFALSE 17597
17502: GO 17504
17504: DISABLE
17505: LD_INT 0
17507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17508: LD_ADDR_VAR 0 1
17512: PUSH
17513: LD_INT 22
17515: PUSH
17516: LD_OWVAR 2
17520: PUSH
17521: EMPTY
17522: LIST
17523: LIST
17524: PUSH
17525: LD_INT 21
17527: PUSH
17528: LD_INT 1
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: PUSH
17535: LD_INT 3
17537: PUSH
17538: LD_INT 23
17540: PUSH
17541: LD_INT 0
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: LIST
17556: PPUSH
17557: CALL_OW 69
17561: ST_TO_ADDR
// if not tmp then
17562: LD_VAR 0 1
17566: NOT
17567: IFFALSE 17571
// exit ;
17569: GO 17597
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
17571: LD_VAR 0 1
17575: PUSH
17576: LD_INT 1
17578: PPUSH
17579: LD_VAR 0 1
17583: PPUSH
17584: CALL_OW 12
17588: ARRAY
17589: PPUSH
17590: LD_INT 200
17592: PPUSH
17593: CALL_OW 234
// end ;
17597: PPOPN 1
17599: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
17600: LD_EXP 31
17604: PUSH
17605: LD_EXP 60
17609: AND
17610: IFFALSE 17689
17612: GO 17614
17614: DISABLE
17615: LD_INT 0
17617: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
17618: LD_ADDR_VAR 0 1
17622: PUSH
17623: LD_INT 22
17625: PUSH
17626: LD_OWVAR 2
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 21
17637: PUSH
17638: LD_INT 2
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: PPUSH
17649: CALL_OW 69
17653: ST_TO_ADDR
// if not tmp then
17654: LD_VAR 0 1
17658: NOT
17659: IFFALSE 17663
// exit ;
17661: GO 17689
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17663: LD_VAR 0 1
17667: PUSH
17668: LD_INT 1
17670: PPUSH
17671: LD_VAR 0 1
17675: PPUSH
17676: CALL_OW 12
17680: ARRAY
17681: PPUSH
17682: LD_INT 60
17684: PPUSH
17685: CALL_OW 234
// end ;
17689: PPOPN 1
17691: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17692: LD_EXP 31
17696: PUSH
17697: LD_EXP 61
17701: AND
17702: IFFALSE 17801
17704: GO 17706
17706: DISABLE
17707: LD_INT 0
17709: PPUSH
17710: PPUSH
// begin enable ;
17711: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17712: LD_ADDR_VAR 0 1
17716: PUSH
17717: LD_INT 22
17719: PUSH
17720: LD_OWVAR 2
17724: PUSH
17725: EMPTY
17726: LIST
17727: LIST
17728: PUSH
17729: LD_INT 61
17731: PUSH
17732: EMPTY
17733: LIST
17734: PUSH
17735: LD_INT 33
17737: PUSH
17738: LD_INT 2
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: LIST
17749: PPUSH
17750: CALL_OW 69
17754: ST_TO_ADDR
// if not tmp then
17755: LD_VAR 0 1
17759: NOT
17760: IFFALSE 17764
// exit ;
17762: GO 17801
// for i in tmp do
17764: LD_ADDR_VAR 0 2
17768: PUSH
17769: LD_VAR 0 1
17773: PUSH
17774: FOR_IN
17775: IFFALSE 17799
// if IsControledBy ( i ) then
17777: LD_VAR 0 2
17781: PPUSH
17782: CALL_OW 312
17786: IFFALSE 17797
// ComUnlink ( i ) ;
17788: LD_VAR 0 2
17792: PPUSH
17793: CALL_OW 136
17797: GO 17774
17799: POP
17800: POP
// end ;
17801: PPOPN 2
17803: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17804: LD_EXP 31
17808: PUSH
17809: LD_EXP 62
17813: AND
17814: IFFALSE 17954
17816: GO 17818
17818: DISABLE
17819: LD_INT 0
17821: PPUSH
17822: PPUSH
// begin ToLua ( displayPowell(); ) ;
17823: LD_STRING displayPowell();
17825: PPUSH
17826: CALL_OW 559
// uc_side := 0 ;
17830: LD_ADDR_OWVAR 20
17834: PUSH
17835: LD_INT 0
17837: ST_TO_ADDR
// uc_nation := 2 ;
17838: LD_ADDR_OWVAR 21
17842: PUSH
17843: LD_INT 2
17845: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17846: LD_ADDR_OWVAR 37
17850: PUSH
17851: LD_INT 14
17853: ST_TO_ADDR
// vc_engine := engine_siberite ;
17854: LD_ADDR_OWVAR 39
17858: PUSH
17859: LD_INT 3
17861: ST_TO_ADDR
// vc_control := control_apeman ;
17862: LD_ADDR_OWVAR 38
17866: PUSH
17867: LD_INT 5
17869: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17870: LD_ADDR_OWVAR 40
17874: PUSH
17875: LD_INT 29
17877: ST_TO_ADDR
// un := CreateVehicle ;
17878: LD_ADDR_VAR 0 2
17882: PUSH
17883: CALL_OW 45
17887: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17888: LD_VAR 0 2
17892: PPUSH
17893: LD_INT 1
17895: PPUSH
17896: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17900: LD_INT 35
17902: PPUSH
17903: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17907: LD_VAR 0 2
17911: PPUSH
17912: LD_INT 22
17914: PUSH
17915: LD_OWVAR 2
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PPUSH
17924: CALL_OW 69
17928: PPUSH
17929: LD_VAR 0 2
17933: PPUSH
17934: CALL_OW 74
17938: PPUSH
17939: CALL_OW 115
// until IsDead ( un ) ;
17943: LD_VAR 0 2
17947: PPUSH
17948: CALL_OW 301
17952: IFFALSE 17900
// end ;
17954: PPOPN 2
17956: END
// every 0 0$1 trigger StreamModeActive and sStu do
17957: LD_EXP 31
17961: PUSH
17962: LD_EXP 70
17966: AND
17967: IFFALSE 17983
17969: GO 17971
17971: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17972: LD_STRING displayStucuk();
17974: PPUSH
17975: CALL_OW 559
// ResetFog ;
17979: CALL_OW 335
// end ;
17983: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17984: LD_EXP 31
17988: PUSH
17989: LD_EXP 63
17993: AND
17994: IFFALSE 18135
17996: GO 17998
17998: DISABLE
17999: LD_INT 0
18001: PPUSH
18002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18003: LD_ADDR_VAR 0 2
18007: PUSH
18008: LD_INT 22
18010: PUSH
18011: LD_OWVAR 2
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: PUSH
18020: LD_INT 21
18022: PUSH
18023: LD_INT 1
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PPUSH
18034: CALL_OW 69
18038: ST_TO_ADDR
// if not tmp then
18039: LD_VAR 0 2
18043: NOT
18044: IFFALSE 18048
// exit ;
18046: GO 18135
// un := tmp [ rand ( 1 , tmp ) ] ;
18048: LD_ADDR_VAR 0 1
18052: PUSH
18053: LD_VAR 0 2
18057: PUSH
18058: LD_INT 1
18060: PPUSH
18061: LD_VAR 0 2
18065: PPUSH
18066: CALL_OW 12
18070: ARRAY
18071: ST_TO_ADDR
// SetSide ( un , 0 ) ;
18072: LD_VAR 0 1
18076: PPUSH
18077: LD_INT 0
18079: PPUSH
18080: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
18084: LD_VAR 0 1
18088: PPUSH
18089: LD_OWVAR 3
18093: PUSH
18094: LD_VAR 0 1
18098: DIFF
18099: PPUSH
18100: LD_VAR 0 1
18104: PPUSH
18105: CALL_OW 74
18109: PPUSH
18110: CALL_OW 115
// wait ( 0 0$20 ) ;
18114: LD_INT 700
18116: PPUSH
18117: CALL_OW 67
// SetSide ( un , your_side ) ;
18121: LD_VAR 0 1
18125: PPUSH
18126: LD_OWVAR 2
18130: PPUSH
18131: CALL_OW 235
// end ;
18135: PPOPN 2
18137: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
18138: LD_EXP 31
18142: PUSH
18143: LD_EXP 64
18147: AND
18148: IFFALSE 18254
18150: GO 18152
18152: DISABLE
18153: LD_INT 0
18155: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18156: LD_ADDR_VAR 0 1
18160: PUSH
18161: LD_INT 22
18163: PUSH
18164: LD_OWVAR 2
18168: PUSH
18169: EMPTY
18170: LIST
18171: LIST
18172: PUSH
18173: LD_INT 2
18175: PUSH
18176: LD_INT 30
18178: PUSH
18179: LD_INT 0
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: PUSH
18186: LD_INT 30
18188: PUSH
18189: LD_INT 1
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: LIST
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PPUSH
18205: CALL_OW 69
18209: ST_TO_ADDR
// if not depot then
18210: LD_VAR 0 1
18214: NOT
18215: IFFALSE 18219
// exit ;
18217: GO 18254
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
18219: LD_VAR 0 1
18223: PUSH
18224: LD_INT 1
18226: ARRAY
18227: PPUSH
18228: CALL_OW 250
18232: PPUSH
18233: LD_VAR 0 1
18237: PUSH
18238: LD_INT 1
18240: ARRAY
18241: PPUSH
18242: CALL_OW 251
18246: PPUSH
18247: LD_INT 70
18249: PPUSH
18250: CALL_OW 495
// end ;
18254: PPOPN 1
18256: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
18257: LD_EXP 31
18261: PUSH
18262: LD_EXP 65
18266: AND
18267: IFFALSE 18478
18269: GO 18271
18271: DISABLE
18272: LD_INT 0
18274: PPUSH
18275: PPUSH
18276: PPUSH
18277: PPUSH
18278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18279: LD_ADDR_VAR 0 5
18283: PUSH
18284: LD_INT 22
18286: PUSH
18287: LD_OWVAR 2
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 21
18298: PUSH
18299: LD_INT 1
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PPUSH
18310: CALL_OW 69
18314: ST_TO_ADDR
// if not tmp then
18315: LD_VAR 0 5
18319: NOT
18320: IFFALSE 18324
// exit ;
18322: GO 18478
// for i in tmp do
18324: LD_ADDR_VAR 0 1
18328: PUSH
18329: LD_VAR 0 5
18333: PUSH
18334: FOR_IN
18335: IFFALSE 18476
// begin d := rand ( 0 , 5 ) ;
18337: LD_ADDR_VAR 0 4
18341: PUSH
18342: LD_INT 0
18344: PPUSH
18345: LD_INT 5
18347: PPUSH
18348: CALL_OW 12
18352: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
18353: LD_ADDR_VAR 0 2
18357: PUSH
18358: LD_VAR 0 1
18362: PPUSH
18363: CALL_OW 250
18367: PPUSH
18368: LD_VAR 0 4
18372: PPUSH
18373: LD_INT 3
18375: PPUSH
18376: LD_INT 12
18378: PPUSH
18379: CALL_OW 12
18383: PPUSH
18384: CALL_OW 272
18388: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
18389: LD_ADDR_VAR 0 3
18393: PUSH
18394: LD_VAR 0 1
18398: PPUSH
18399: CALL_OW 251
18403: PPUSH
18404: LD_VAR 0 4
18408: PPUSH
18409: LD_INT 3
18411: PPUSH
18412: LD_INT 12
18414: PPUSH
18415: CALL_OW 12
18419: PPUSH
18420: CALL_OW 273
18424: ST_TO_ADDR
// if ValidHex ( x , y ) then
18425: LD_VAR 0 2
18429: PPUSH
18430: LD_VAR 0 3
18434: PPUSH
18435: CALL_OW 488
18439: IFFALSE 18474
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
18441: LD_VAR 0 1
18445: PPUSH
18446: LD_VAR 0 2
18450: PPUSH
18451: LD_VAR 0 3
18455: PPUSH
18456: LD_INT 3
18458: PPUSH
18459: LD_INT 6
18461: PPUSH
18462: CALL_OW 12
18466: PPUSH
18467: LD_INT 1
18469: PPUSH
18470: CALL_OW 483
// end ;
18474: GO 18334
18476: POP
18477: POP
// end ;
18478: PPOPN 5
18480: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
18481: LD_EXP 31
18485: PUSH
18486: LD_EXP 66
18490: AND
18491: IFFALSE 18585
18493: GO 18495
18495: DISABLE
18496: LD_INT 0
18498: PPUSH
18499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
18500: LD_ADDR_VAR 0 2
18504: PUSH
18505: LD_INT 22
18507: PUSH
18508: LD_OWVAR 2
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 32
18519: PUSH
18520: LD_INT 1
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 21
18529: PUSH
18530: LD_INT 2
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: LIST
18541: PPUSH
18542: CALL_OW 69
18546: ST_TO_ADDR
// if not tmp then
18547: LD_VAR 0 2
18551: NOT
18552: IFFALSE 18556
// exit ;
18554: GO 18585
// for i in tmp do
18556: LD_ADDR_VAR 0 1
18560: PUSH
18561: LD_VAR 0 2
18565: PUSH
18566: FOR_IN
18567: IFFALSE 18583
// SetFuel ( i , 0 ) ;
18569: LD_VAR 0 1
18573: PPUSH
18574: LD_INT 0
18576: PPUSH
18577: CALL_OW 240
18581: GO 18566
18583: POP
18584: POP
// end ;
18585: PPOPN 2
18587: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
18588: LD_EXP 31
18592: PUSH
18593: LD_EXP 67
18597: AND
18598: IFFALSE 18664
18600: GO 18602
18602: DISABLE
18603: LD_INT 0
18605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18606: LD_ADDR_VAR 0 1
18610: PUSH
18611: LD_INT 22
18613: PUSH
18614: LD_OWVAR 2
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 30
18625: PUSH
18626: LD_INT 29
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PPUSH
18637: CALL_OW 69
18641: ST_TO_ADDR
// if not tmp then
18642: LD_VAR 0 1
18646: NOT
18647: IFFALSE 18651
// exit ;
18649: GO 18664
// DestroyUnit ( tmp [ 1 ] ) ;
18651: LD_VAR 0 1
18655: PUSH
18656: LD_INT 1
18658: ARRAY
18659: PPUSH
18660: CALL_OW 65
// end ;
18664: PPOPN 1
18666: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18667: LD_EXP 31
18671: PUSH
18672: LD_EXP 69
18676: AND
18677: IFFALSE 18806
18679: GO 18681
18681: DISABLE
18682: LD_INT 0
18684: PPUSH
// begin uc_side := 0 ;
18685: LD_ADDR_OWVAR 20
18689: PUSH
18690: LD_INT 0
18692: ST_TO_ADDR
// uc_nation := nation_arabian ;
18693: LD_ADDR_OWVAR 21
18697: PUSH
18698: LD_INT 2
18700: ST_TO_ADDR
// hc_gallery :=  ;
18701: LD_ADDR_OWVAR 33
18705: PUSH
18706: LD_STRING 
18708: ST_TO_ADDR
// hc_name :=  ;
18709: LD_ADDR_OWVAR 26
18713: PUSH
18714: LD_STRING 
18716: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18717: LD_INT 1
18719: PPUSH
18720: LD_INT 11
18722: PPUSH
18723: LD_INT 10
18725: PPUSH
18726: CALL_OW 380
// un := CreateHuman ;
18730: LD_ADDR_VAR 0 1
18734: PUSH
18735: CALL_OW 44
18739: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18740: LD_VAR 0 1
18744: PPUSH
18745: LD_INT 1
18747: PPUSH
18748: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18752: LD_INT 35
18754: PPUSH
18755: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18759: LD_VAR 0 1
18763: PPUSH
18764: LD_INT 22
18766: PUSH
18767: LD_OWVAR 2
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PPUSH
18776: CALL_OW 69
18780: PPUSH
18781: LD_VAR 0 1
18785: PPUSH
18786: CALL_OW 74
18790: PPUSH
18791: CALL_OW 115
// until IsDead ( un ) ;
18795: LD_VAR 0 1
18799: PPUSH
18800: CALL_OW 301
18804: IFFALSE 18752
// end ;
18806: PPOPN 1
18808: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18809: LD_EXP 31
18813: PUSH
18814: LD_EXP 71
18818: AND
18819: IFFALSE 18831
18821: GO 18823
18823: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18824: LD_STRING earthquake(getX(game), 0, 32)
18826: PPUSH
18827: CALL_OW 559
18831: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18832: LD_EXP 31
18836: PUSH
18837: LD_EXP 72
18841: AND
18842: IFFALSE 18933
18844: GO 18846
18846: DISABLE
18847: LD_INT 0
18849: PPUSH
// begin enable ;
18850: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18851: LD_ADDR_VAR 0 1
18855: PUSH
18856: LD_INT 22
18858: PUSH
18859: LD_OWVAR 2
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 21
18870: PUSH
18871: LD_INT 2
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 33
18880: PUSH
18881: LD_INT 3
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: LIST
18892: PPUSH
18893: CALL_OW 69
18897: ST_TO_ADDR
// if not tmp then
18898: LD_VAR 0 1
18902: NOT
18903: IFFALSE 18907
// exit ;
18905: GO 18933
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18907: LD_VAR 0 1
18911: PUSH
18912: LD_INT 1
18914: PPUSH
18915: LD_VAR 0 1
18919: PPUSH
18920: CALL_OW 12
18924: ARRAY
18925: PPUSH
18926: LD_INT 1
18928: PPUSH
18929: CALL_OW 234
// end ;
18933: PPOPN 1
18935: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18936: LD_EXP 31
18940: PUSH
18941: LD_EXP 73
18945: AND
18946: IFFALSE 19087
18948: GO 18950
18950: DISABLE
18951: LD_INT 0
18953: PPUSH
18954: PPUSH
18955: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18956: LD_ADDR_VAR 0 3
18960: PUSH
18961: LD_INT 22
18963: PUSH
18964: LD_OWVAR 2
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 25
18975: PUSH
18976: LD_INT 1
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PPUSH
18987: CALL_OW 69
18991: ST_TO_ADDR
// if not tmp then
18992: LD_VAR 0 3
18996: NOT
18997: IFFALSE 19001
// exit ;
18999: GO 19087
// un := tmp [ rand ( 1 , tmp ) ] ;
19001: LD_ADDR_VAR 0 2
19005: PUSH
19006: LD_VAR 0 3
19010: PUSH
19011: LD_INT 1
19013: PPUSH
19014: LD_VAR 0 3
19018: PPUSH
19019: CALL_OW 12
19023: ARRAY
19024: ST_TO_ADDR
// if Crawls ( un ) then
19025: LD_VAR 0 2
19029: PPUSH
19030: CALL_OW 318
19034: IFFALSE 19045
// ComWalk ( un ) ;
19036: LD_VAR 0 2
19040: PPUSH
19041: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
19045: LD_VAR 0 2
19049: PPUSH
19050: LD_INT 9
19052: PPUSH
19053: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
19057: LD_INT 28
19059: PPUSH
19060: LD_OWVAR 2
19064: PPUSH
19065: LD_INT 2
19067: PPUSH
19068: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
19072: LD_INT 29
19074: PPUSH
19075: LD_OWVAR 2
19079: PPUSH
19080: LD_INT 2
19082: PPUSH
19083: CALL_OW 322
// end ;
19087: PPOPN 3
19089: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
19090: LD_EXP 31
19094: PUSH
19095: LD_EXP 74
19099: AND
19100: IFFALSE 19211
19102: GO 19104
19104: DISABLE
19105: LD_INT 0
19107: PPUSH
19108: PPUSH
19109: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19110: LD_ADDR_VAR 0 3
19114: PUSH
19115: LD_INT 22
19117: PUSH
19118: LD_OWVAR 2
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 25
19129: PUSH
19130: LD_INT 1
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PPUSH
19141: CALL_OW 69
19145: ST_TO_ADDR
// if not tmp then
19146: LD_VAR 0 3
19150: NOT
19151: IFFALSE 19155
// exit ;
19153: GO 19211
// un := tmp [ rand ( 1 , tmp ) ] ;
19155: LD_ADDR_VAR 0 2
19159: PUSH
19160: LD_VAR 0 3
19164: PUSH
19165: LD_INT 1
19167: PPUSH
19168: LD_VAR 0 3
19172: PPUSH
19173: CALL_OW 12
19177: ARRAY
19178: ST_TO_ADDR
// if Crawls ( un ) then
19179: LD_VAR 0 2
19183: PPUSH
19184: CALL_OW 318
19188: IFFALSE 19199
// ComWalk ( un ) ;
19190: LD_VAR 0 2
19194: PPUSH
19195: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19199: LD_VAR 0 2
19203: PPUSH
19204: LD_INT 8
19206: PPUSH
19207: CALL_OW 336
// end ;
19211: PPOPN 3
19213: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
19214: LD_EXP 31
19218: PUSH
19219: LD_EXP 75
19223: AND
19224: IFFALSE 19368
19226: GO 19228
19228: DISABLE
19229: LD_INT 0
19231: PPUSH
19232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
19233: LD_ADDR_VAR 0 2
19237: PUSH
19238: LD_INT 22
19240: PUSH
19241: LD_OWVAR 2
19245: PUSH
19246: EMPTY
19247: LIST
19248: LIST
19249: PUSH
19250: LD_INT 21
19252: PUSH
19253: LD_INT 2
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: PUSH
19260: LD_INT 2
19262: PUSH
19263: LD_INT 34
19265: PUSH
19266: LD_INT 12
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: LD_INT 34
19275: PUSH
19276: LD_INT 51
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 34
19285: PUSH
19286: LD_INT 32
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: LIST
19303: PPUSH
19304: CALL_OW 69
19308: ST_TO_ADDR
// if not tmp then
19309: LD_VAR 0 2
19313: NOT
19314: IFFALSE 19318
// exit ;
19316: GO 19368
// for i in tmp do
19318: LD_ADDR_VAR 0 1
19322: PUSH
19323: LD_VAR 0 2
19327: PUSH
19328: FOR_IN
19329: IFFALSE 19366
// if GetCargo ( i , mat_artifact ) = 0 then
19331: LD_VAR 0 1
19335: PPUSH
19336: LD_INT 4
19338: PPUSH
19339: CALL_OW 289
19343: PUSH
19344: LD_INT 0
19346: EQUAL
19347: IFFALSE 19364
// SetCargo ( i , mat_siberit , 100 ) ;
19349: LD_VAR 0 1
19353: PPUSH
19354: LD_INT 3
19356: PPUSH
19357: LD_INT 100
19359: PPUSH
19360: CALL_OW 290
19364: GO 19328
19366: POP
19367: POP
// end ;
19368: PPOPN 2
19370: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
19371: LD_EXP 31
19375: PUSH
19376: LD_EXP 76
19380: AND
19381: IFFALSE 19564
19383: GO 19385
19385: DISABLE
19386: LD_INT 0
19388: PPUSH
19389: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19390: LD_ADDR_VAR 0 2
19394: PUSH
19395: LD_INT 22
19397: PUSH
19398: LD_OWVAR 2
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PPUSH
19407: CALL_OW 69
19411: ST_TO_ADDR
// if not tmp then
19412: LD_VAR 0 2
19416: NOT
19417: IFFALSE 19421
// exit ;
19419: GO 19564
// for i := 1 to 2 do
19421: LD_ADDR_VAR 0 1
19425: PUSH
19426: DOUBLE
19427: LD_INT 1
19429: DEC
19430: ST_TO_ADDR
19431: LD_INT 2
19433: PUSH
19434: FOR_TO
19435: IFFALSE 19562
// begin uc_side := your_side ;
19437: LD_ADDR_OWVAR 20
19441: PUSH
19442: LD_OWVAR 2
19446: ST_TO_ADDR
// uc_nation := nation_american ;
19447: LD_ADDR_OWVAR 21
19451: PUSH
19452: LD_INT 1
19454: ST_TO_ADDR
// vc_chassis := us_morphling ;
19455: LD_ADDR_OWVAR 37
19459: PUSH
19460: LD_INT 5
19462: ST_TO_ADDR
// vc_engine := engine_siberite ;
19463: LD_ADDR_OWVAR 39
19467: PUSH
19468: LD_INT 3
19470: ST_TO_ADDR
// vc_control := control_computer ;
19471: LD_ADDR_OWVAR 38
19475: PUSH
19476: LD_INT 3
19478: ST_TO_ADDR
// vc_weapon := us_double_laser ;
19479: LD_ADDR_OWVAR 40
19483: PUSH
19484: LD_INT 10
19486: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
19487: LD_VAR 0 2
19491: PUSH
19492: LD_INT 1
19494: ARRAY
19495: PPUSH
19496: CALL_OW 310
19500: NOT
19501: IFFALSE 19548
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
19503: CALL_OW 45
19507: PPUSH
19508: LD_VAR 0 2
19512: PUSH
19513: LD_INT 1
19515: ARRAY
19516: PPUSH
19517: CALL_OW 250
19521: PPUSH
19522: LD_VAR 0 2
19526: PUSH
19527: LD_INT 1
19529: ARRAY
19530: PPUSH
19531: CALL_OW 251
19535: PPUSH
19536: LD_INT 12
19538: PPUSH
19539: LD_INT 1
19541: PPUSH
19542: CALL_OW 50
19546: GO 19560
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
19548: CALL_OW 45
19552: PPUSH
19553: LD_INT 1
19555: PPUSH
19556: CALL_OW 51
// end ;
19560: GO 19434
19562: POP
19563: POP
// end ;
19564: PPOPN 2
19566: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
19567: LD_EXP 31
19571: PUSH
19572: LD_EXP 77
19576: AND
19577: IFFALSE 19799
19579: GO 19581
19581: DISABLE
19582: LD_INT 0
19584: PPUSH
19585: PPUSH
19586: PPUSH
19587: PPUSH
19588: PPUSH
19589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19590: LD_ADDR_VAR 0 6
19594: PUSH
19595: LD_INT 22
19597: PUSH
19598: LD_OWVAR 2
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PUSH
19607: LD_INT 21
19609: PUSH
19610: LD_INT 1
19612: PUSH
19613: EMPTY
19614: LIST
19615: LIST
19616: PUSH
19617: LD_INT 3
19619: PUSH
19620: LD_INT 23
19622: PUSH
19623: LD_INT 0
19625: PUSH
19626: EMPTY
19627: LIST
19628: LIST
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: LIST
19638: PPUSH
19639: CALL_OW 69
19643: ST_TO_ADDR
// if not tmp then
19644: LD_VAR 0 6
19648: NOT
19649: IFFALSE 19653
// exit ;
19651: GO 19799
// s1 := rand ( 1 , 4 ) ;
19653: LD_ADDR_VAR 0 2
19657: PUSH
19658: LD_INT 1
19660: PPUSH
19661: LD_INT 4
19663: PPUSH
19664: CALL_OW 12
19668: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19669: LD_ADDR_VAR 0 4
19673: PUSH
19674: LD_VAR 0 6
19678: PUSH
19679: LD_INT 1
19681: ARRAY
19682: PPUSH
19683: LD_VAR 0 2
19687: PPUSH
19688: CALL_OW 259
19692: ST_TO_ADDR
// if s1 = 1 then
19693: LD_VAR 0 2
19697: PUSH
19698: LD_INT 1
19700: EQUAL
19701: IFFALSE 19721
// s2 := rand ( 2 , 4 ) else
19703: LD_ADDR_VAR 0 3
19707: PUSH
19708: LD_INT 2
19710: PPUSH
19711: LD_INT 4
19713: PPUSH
19714: CALL_OW 12
19718: ST_TO_ADDR
19719: GO 19729
// s2 := 1 ;
19721: LD_ADDR_VAR 0 3
19725: PUSH
19726: LD_INT 1
19728: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19729: LD_ADDR_VAR 0 5
19733: PUSH
19734: LD_VAR 0 6
19738: PUSH
19739: LD_INT 1
19741: ARRAY
19742: PPUSH
19743: LD_VAR 0 3
19747: PPUSH
19748: CALL_OW 259
19752: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19753: LD_VAR 0 6
19757: PUSH
19758: LD_INT 1
19760: ARRAY
19761: PPUSH
19762: LD_VAR 0 2
19766: PPUSH
19767: LD_VAR 0 5
19771: PPUSH
19772: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19776: LD_VAR 0 6
19780: PUSH
19781: LD_INT 1
19783: ARRAY
19784: PPUSH
19785: LD_VAR 0 3
19789: PPUSH
19790: LD_VAR 0 4
19794: PPUSH
19795: CALL_OW 237
// end ;
19799: PPOPN 6
19801: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19802: LD_EXP 31
19806: PUSH
19807: LD_EXP 78
19811: AND
19812: IFFALSE 19891
19814: GO 19816
19816: DISABLE
19817: LD_INT 0
19819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19820: LD_ADDR_VAR 0 1
19824: PUSH
19825: LD_INT 22
19827: PUSH
19828: LD_OWVAR 2
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: LD_INT 30
19839: PUSH
19840: LD_INT 3
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PPUSH
19851: CALL_OW 69
19855: ST_TO_ADDR
// if not tmp then
19856: LD_VAR 0 1
19860: NOT
19861: IFFALSE 19865
// exit ;
19863: GO 19891
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19865: LD_VAR 0 1
19869: PUSH
19870: LD_INT 1
19872: PPUSH
19873: LD_VAR 0 1
19877: PPUSH
19878: CALL_OW 12
19882: ARRAY
19883: PPUSH
19884: LD_INT 1
19886: PPUSH
19887: CALL_OW 234
// end ;
19891: PPOPN 1
19893: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19894: LD_EXP 31
19898: PUSH
19899: LD_EXP 79
19903: AND
19904: IFFALSE 20016
19906: GO 19908
19908: DISABLE
19909: LD_INT 0
19911: PPUSH
19912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19913: LD_ADDR_VAR 0 2
19917: PUSH
19918: LD_INT 22
19920: PUSH
19921: LD_OWVAR 2
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 2
19932: PUSH
19933: LD_INT 30
19935: PUSH
19936: LD_INT 27
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 30
19945: PUSH
19946: LD_INT 26
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 30
19955: PUSH
19956: LD_INT 28
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PPUSH
19973: CALL_OW 69
19977: ST_TO_ADDR
// if not tmp then
19978: LD_VAR 0 2
19982: NOT
19983: IFFALSE 19987
// exit ;
19985: GO 20016
// for i in tmp do
19987: LD_ADDR_VAR 0 1
19991: PUSH
19992: LD_VAR 0 2
19996: PUSH
19997: FOR_IN
19998: IFFALSE 20014
// SetLives ( i , 1 ) ;
20000: LD_VAR 0 1
20004: PPUSH
20005: LD_INT 1
20007: PPUSH
20008: CALL_OW 234
20012: GO 19997
20014: POP
20015: POP
// end ;
20016: PPOPN 2
20018: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
20019: LD_EXP 31
20023: PUSH
20024: LD_EXP 80
20028: AND
20029: IFFALSE 20316
20031: GO 20033
20033: DISABLE
20034: LD_INT 0
20036: PPUSH
20037: PPUSH
20038: PPUSH
// begin i := rand ( 1 , 7 ) ;
20039: LD_ADDR_VAR 0 1
20043: PUSH
20044: LD_INT 1
20046: PPUSH
20047: LD_INT 7
20049: PPUSH
20050: CALL_OW 12
20054: ST_TO_ADDR
// case i of 1 :
20055: LD_VAR 0 1
20059: PUSH
20060: LD_INT 1
20062: DOUBLE
20063: EQUAL
20064: IFTRUE 20068
20066: GO 20078
20068: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
20069: LD_STRING earthquake(getX(game), 0, 32)
20071: PPUSH
20072: CALL_OW 559
20076: GO 20316
20078: LD_INT 2
20080: DOUBLE
20081: EQUAL
20082: IFTRUE 20086
20084: GO 20100
20086: POP
// begin ToLua ( displayStucuk(); ) ;
20087: LD_STRING displayStucuk();
20089: PPUSH
20090: CALL_OW 559
// ResetFog ;
20094: CALL_OW 335
// end ; 3 :
20098: GO 20316
20100: LD_INT 3
20102: DOUBLE
20103: EQUAL
20104: IFTRUE 20108
20106: GO 20212
20108: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20109: LD_ADDR_VAR 0 2
20113: PUSH
20114: LD_INT 22
20116: PUSH
20117: LD_OWVAR 2
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: PUSH
20126: LD_INT 25
20128: PUSH
20129: LD_INT 1
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PPUSH
20140: CALL_OW 69
20144: ST_TO_ADDR
// if not tmp then
20145: LD_VAR 0 2
20149: NOT
20150: IFFALSE 20154
// exit ;
20152: GO 20316
// un := tmp [ rand ( 1 , tmp ) ] ;
20154: LD_ADDR_VAR 0 3
20158: PUSH
20159: LD_VAR 0 2
20163: PUSH
20164: LD_INT 1
20166: PPUSH
20167: LD_VAR 0 2
20171: PPUSH
20172: CALL_OW 12
20176: ARRAY
20177: ST_TO_ADDR
// if Crawls ( un ) then
20178: LD_VAR 0 3
20182: PPUSH
20183: CALL_OW 318
20187: IFFALSE 20198
// ComWalk ( un ) ;
20189: LD_VAR 0 3
20193: PPUSH
20194: CALL_OW 138
// SetClass ( un , class_mortar ) ;
20198: LD_VAR 0 3
20202: PPUSH
20203: LD_INT 8
20205: PPUSH
20206: CALL_OW 336
// end ; 4 :
20210: GO 20316
20212: LD_INT 4
20214: DOUBLE
20215: EQUAL
20216: IFTRUE 20220
20218: GO 20294
20220: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20221: LD_ADDR_VAR 0 2
20225: PUSH
20226: LD_INT 22
20228: PUSH
20229: LD_OWVAR 2
20233: PUSH
20234: EMPTY
20235: LIST
20236: LIST
20237: PUSH
20238: LD_INT 30
20240: PUSH
20241: LD_INT 29
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PPUSH
20252: CALL_OW 69
20256: ST_TO_ADDR
// if not tmp then
20257: LD_VAR 0 2
20261: NOT
20262: IFFALSE 20266
// exit ;
20264: GO 20316
// CenterNowOnUnits ( tmp [ 1 ] ) ;
20266: LD_VAR 0 2
20270: PUSH
20271: LD_INT 1
20273: ARRAY
20274: PPUSH
20275: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
20279: LD_VAR 0 2
20283: PUSH
20284: LD_INT 1
20286: ARRAY
20287: PPUSH
20288: CALL_OW 65
// end ; 5 .. 7 :
20292: GO 20316
20294: LD_INT 5
20296: DOUBLE
20297: GREATEREQUAL
20298: IFFALSE 20306
20300: LD_INT 7
20302: DOUBLE
20303: LESSEQUAL
20304: IFTRUE 20308
20306: GO 20315
20308: POP
// StreamSibBomb ; end ;
20309: CALL 16553 0 0
20313: GO 20316
20315: POP
// end ;
20316: PPOPN 3
20318: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
20319: LD_EXP 31
20323: PUSH
20324: LD_EXP 81
20328: AND
20329: IFFALSE 20485
20331: GO 20333
20333: DISABLE
20334: LD_INT 0
20336: PPUSH
20337: PPUSH
20338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
20339: LD_ADDR_VAR 0 2
20343: PUSH
20344: LD_INT 81
20346: PUSH
20347: LD_OWVAR 2
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 2
20358: PUSH
20359: LD_INT 21
20361: PUSH
20362: LD_INT 1
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: LD_INT 21
20371: PUSH
20372: LD_INT 2
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: LIST
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PPUSH
20388: CALL_OW 69
20392: ST_TO_ADDR
// if not tmp then
20393: LD_VAR 0 2
20397: NOT
20398: IFFALSE 20402
// exit ;
20400: GO 20485
// p := 0 ;
20402: LD_ADDR_VAR 0 3
20406: PUSH
20407: LD_INT 0
20409: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20410: LD_INT 35
20412: PPUSH
20413: CALL_OW 67
// p := p + 1 ;
20417: LD_ADDR_VAR 0 3
20421: PUSH
20422: LD_VAR 0 3
20426: PUSH
20427: LD_INT 1
20429: PLUS
20430: ST_TO_ADDR
// for i in tmp do
20431: LD_ADDR_VAR 0 1
20435: PUSH
20436: LD_VAR 0 2
20440: PUSH
20441: FOR_IN
20442: IFFALSE 20473
// if GetLives ( i ) < 1000 then
20444: LD_VAR 0 1
20448: PPUSH
20449: CALL_OW 256
20453: PUSH
20454: LD_INT 1000
20456: LESS
20457: IFFALSE 20471
// SetLives ( i , 1000 ) ;
20459: LD_VAR 0 1
20463: PPUSH
20464: LD_INT 1000
20466: PPUSH
20467: CALL_OW 234
20471: GO 20441
20473: POP
20474: POP
// until p > 20 ;
20475: LD_VAR 0 3
20479: PUSH
20480: LD_INT 20
20482: GREATER
20483: IFFALSE 20410
// end ;
20485: PPOPN 3
20487: END
// every 0 0$1 trigger StreamModeActive and sTime do
20488: LD_EXP 31
20492: PUSH
20493: LD_EXP 82
20497: AND
20498: IFFALSE 20533
20500: GO 20502
20502: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
20503: LD_INT 28
20505: PPUSH
20506: LD_OWVAR 2
20510: PPUSH
20511: LD_INT 2
20513: PPUSH
20514: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
20518: LD_INT 30
20520: PPUSH
20521: LD_OWVAR 2
20525: PPUSH
20526: LD_INT 2
20528: PPUSH
20529: CALL_OW 322
// end ;
20533: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
20534: LD_EXP 31
20538: PUSH
20539: LD_EXP 83
20543: AND
20544: IFFALSE 20665
20546: GO 20548
20548: DISABLE
20549: LD_INT 0
20551: PPUSH
20552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20553: LD_ADDR_VAR 0 2
20557: PUSH
20558: LD_INT 22
20560: PUSH
20561: LD_OWVAR 2
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 21
20572: PUSH
20573: LD_INT 1
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: LD_INT 3
20582: PUSH
20583: LD_INT 23
20585: PUSH
20586: LD_INT 0
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: LIST
20601: PPUSH
20602: CALL_OW 69
20606: ST_TO_ADDR
// if not tmp then
20607: LD_VAR 0 2
20611: NOT
20612: IFFALSE 20616
// exit ;
20614: GO 20665
// for i in tmp do
20616: LD_ADDR_VAR 0 1
20620: PUSH
20621: LD_VAR 0 2
20625: PUSH
20626: FOR_IN
20627: IFFALSE 20663
// begin if Crawls ( i ) then
20629: LD_VAR 0 1
20633: PPUSH
20634: CALL_OW 318
20638: IFFALSE 20649
// ComWalk ( i ) ;
20640: LD_VAR 0 1
20644: PPUSH
20645: CALL_OW 138
// SetClass ( i , 2 ) ;
20649: LD_VAR 0 1
20653: PPUSH
20654: LD_INT 2
20656: PPUSH
20657: CALL_OW 336
// end ;
20661: GO 20626
20663: POP
20664: POP
// end ;
20665: PPOPN 2
20667: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20668: LD_EXP 31
20672: PUSH
20673: LD_EXP 84
20677: AND
20678: IFFALSE 20966
20680: GO 20682
20682: DISABLE
20683: LD_INT 0
20685: PPUSH
20686: PPUSH
20687: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20688: LD_OWVAR 2
20692: PPUSH
20693: LD_INT 9
20695: PPUSH
20696: LD_INT 1
20698: PPUSH
20699: LD_INT 1
20701: PPUSH
20702: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20706: LD_INT 9
20708: PPUSH
20709: LD_OWVAR 2
20713: PPUSH
20714: CALL_OW 343
// uc_side := 9 ;
20718: LD_ADDR_OWVAR 20
20722: PUSH
20723: LD_INT 9
20725: ST_TO_ADDR
// uc_nation := 2 ;
20726: LD_ADDR_OWVAR 21
20730: PUSH
20731: LD_INT 2
20733: ST_TO_ADDR
// hc_name := Dark Warrior ;
20734: LD_ADDR_OWVAR 26
20738: PUSH
20739: LD_STRING Dark Warrior
20741: ST_TO_ADDR
// hc_gallery :=  ;
20742: LD_ADDR_OWVAR 33
20746: PUSH
20747: LD_STRING 
20749: ST_TO_ADDR
// hc_noskilllimit := true ;
20750: LD_ADDR_OWVAR 76
20754: PUSH
20755: LD_INT 1
20757: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20758: LD_ADDR_OWVAR 31
20762: PUSH
20763: LD_INT 30
20765: PUSH
20766: LD_INT 30
20768: PUSH
20769: LD_INT 30
20771: PUSH
20772: LD_INT 30
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: ST_TO_ADDR
// un := CreateHuman ;
20781: LD_ADDR_VAR 0 3
20785: PUSH
20786: CALL_OW 44
20790: ST_TO_ADDR
// hc_noskilllimit := false ;
20791: LD_ADDR_OWVAR 76
20795: PUSH
20796: LD_INT 0
20798: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20799: LD_VAR 0 3
20803: PPUSH
20804: LD_INT 1
20806: PPUSH
20807: CALL_OW 51
// ToLua ( playRanger() ) ;
20811: LD_STRING playRanger()
20813: PPUSH
20814: CALL_OW 559
// p := 0 ;
20818: LD_ADDR_VAR 0 2
20822: PUSH
20823: LD_INT 0
20825: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20826: LD_INT 35
20828: PPUSH
20829: CALL_OW 67
// p := p + 1 ;
20833: LD_ADDR_VAR 0 2
20837: PUSH
20838: LD_VAR 0 2
20842: PUSH
20843: LD_INT 1
20845: PLUS
20846: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20847: LD_VAR 0 3
20851: PPUSH
20852: CALL_OW 256
20856: PUSH
20857: LD_INT 1000
20859: LESS
20860: IFFALSE 20874
// SetLives ( un , 1000 ) ;
20862: LD_VAR 0 3
20866: PPUSH
20867: LD_INT 1000
20869: PPUSH
20870: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20874: LD_VAR 0 3
20878: PPUSH
20879: LD_INT 81
20881: PUSH
20882: LD_OWVAR 2
20886: PUSH
20887: EMPTY
20888: LIST
20889: LIST
20890: PUSH
20891: LD_INT 91
20893: PUSH
20894: LD_VAR 0 3
20898: PUSH
20899: LD_INT 30
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: LIST
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PPUSH
20911: CALL_OW 69
20915: PPUSH
20916: LD_VAR 0 3
20920: PPUSH
20921: CALL_OW 74
20925: PPUSH
20926: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20930: LD_VAR 0 2
20934: PUSH
20935: LD_INT 80
20937: GREATER
20938: PUSH
20939: LD_VAR 0 3
20943: PPUSH
20944: CALL_OW 301
20948: OR
20949: IFFALSE 20826
// if un then
20951: LD_VAR 0 3
20955: IFFALSE 20966
// RemoveUnit ( un ) ;
20957: LD_VAR 0 3
20961: PPUSH
20962: CALL_OW 64
// end ;
20966: PPOPN 3
20968: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20969: LD_EXP 85
20973: IFFALSE 21089
20975: GO 20977
20977: DISABLE
20978: LD_INT 0
20980: PPUSH
20981: PPUSH
20982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20983: LD_ADDR_VAR 0 2
20987: PUSH
20988: LD_INT 81
20990: PUSH
20991: LD_OWVAR 2
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 21
21002: PUSH
21003: LD_INT 1
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PPUSH
21014: CALL_OW 69
21018: ST_TO_ADDR
// ToLua ( playComputer() ) ;
21019: LD_STRING playComputer()
21021: PPUSH
21022: CALL_OW 559
// if not tmp then
21026: LD_VAR 0 2
21030: NOT
21031: IFFALSE 21035
// exit ;
21033: GO 21089
// for i in tmp do
21035: LD_ADDR_VAR 0 1
21039: PUSH
21040: LD_VAR 0 2
21044: PUSH
21045: FOR_IN
21046: IFFALSE 21087
// for j := 1 to 4 do
21048: LD_ADDR_VAR 0 3
21052: PUSH
21053: DOUBLE
21054: LD_INT 1
21056: DEC
21057: ST_TO_ADDR
21058: LD_INT 4
21060: PUSH
21061: FOR_TO
21062: IFFALSE 21083
// SetSkill ( i , j , 10 ) ;
21064: LD_VAR 0 1
21068: PPUSH
21069: LD_VAR 0 3
21073: PPUSH
21074: LD_INT 10
21076: PPUSH
21077: CALL_OW 237
21081: GO 21061
21083: POP
21084: POP
21085: GO 21045
21087: POP
21088: POP
// end ;
21089: PPOPN 3
21091: END
// every 0 0$1 trigger s30 do var i , tmp ;
21092: LD_EXP 86
21096: IFFALSE 21165
21098: GO 21100
21100: DISABLE
21101: LD_INT 0
21103: PPUSH
21104: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21105: LD_ADDR_VAR 0 2
21109: PUSH
21110: LD_INT 22
21112: PUSH
21113: LD_OWVAR 2
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PPUSH
21122: CALL_OW 69
21126: ST_TO_ADDR
// if not tmp then
21127: LD_VAR 0 2
21131: NOT
21132: IFFALSE 21136
// exit ;
21134: GO 21165
// for i in tmp do
21136: LD_ADDR_VAR 0 1
21140: PUSH
21141: LD_VAR 0 2
21145: PUSH
21146: FOR_IN
21147: IFFALSE 21163
// SetLives ( i , 300 ) ;
21149: LD_VAR 0 1
21153: PPUSH
21154: LD_INT 300
21156: PPUSH
21157: CALL_OW 234
21161: GO 21146
21163: POP
21164: POP
// end ;
21165: PPOPN 2
21167: END
// every 0 0$1 trigger s60 do var i , tmp ;
21168: LD_EXP 87
21172: IFFALSE 21241
21174: GO 21176
21176: DISABLE
21177: LD_INT 0
21179: PPUSH
21180: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21181: LD_ADDR_VAR 0 2
21185: PUSH
21186: LD_INT 22
21188: PUSH
21189: LD_OWVAR 2
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PPUSH
21198: CALL_OW 69
21202: ST_TO_ADDR
// if not tmp then
21203: LD_VAR 0 2
21207: NOT
21208: IFFALSE 21212
// exit ;
21210: GO 21241
// for i in tmp do
21212: LD_ADDR_VAR 0 1
21216: PUSH
21217: LD_VAR 0 2
21221: PUSH
21222: FOR_IN
21223: IFFALSE 21239
// SetLives ( i , 600 ) ;
21225: LD_VAR 0 1
21229: PPUSH
21230: LD_INT 600
21232: PPUSH
21233: CALL_OW 234
21237: GO 21222
21239: POP
21240: POP
// end ;
21241: PPOPN 2
21243: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
21244: LD_INT 0
21246: PPUSH
// case cmd of 301 :
21247: LD_VAR 0 1
21251: PUSH
21252: LD_INT 301
21254: DOUBLE
21255: EQUAL
21256: IFTRUE 21260
21258: GO 21292
21260: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
21261: LD_VAR 0 6
21265: PPUSH
21266: LD_VAR 0 7
21270: PPUSH
21271: LD_VAR 0 8
21275: PPUSH
21276: LD_VAR 0 4
21280: PPUSH
21281: LD_VAR 0 5
21285: PPUSH
21286: CALL 22501 0 5
21290: GO 21413
21292: LD_INT 302
21294: DOUBLE
21295: EQUAL
21296: IFTRUE 21300
21298: GO 21337
21300: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
21301: LD_VAR 0 6
21305: PPUSH
21306: LD_VAR 0 7
21310: PPUSH
21311: LD_VAR 0 8
21315: PPUSH
21316: LD_VAR 0 9
21320: PPUSH
21321: LD_VAR 0 4
21325: PPUSH
21326: LD_VAR 0 5
21330: PPUSH
21331: CALL 22592 0 6
21335: GO 21413
21337: LD_INT 303
21339: DOUBLE
21340: EQUAL
21341: IFTRUE 21345
21343: GO 21382
21345: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
21346: LD_VAR 0 6
21350: PPUSH
21351: LD_VAR 0 7
21355: PPUSH
21356: LD_VAR 0 8
21360: PPUSH
21361: LD_VAR 0 9
21365: PPUSH
21366: LD_VAR 0 4
21370: PPUSH
21371: LD_VAR 0 5
21375: PPUSH
21376: CALL 21418 0 6
21380: GO 21413
21382: LD_INT 304
21384: DOUBLE
21385: EQUAL
21386: IFTRUE 21390
21388: GO 21412
21390: POP
// hHackTeleport ( unit , x , y ) ; end ;
21391: LD_VAR 0 2
21395: PPUSH
21396: LD_VAR 0 4
21400: PPUSH
21401: LD_VAR 0 5
21405: PPUSH
21406: CALL 23185 0 3
21410: GO 21413
21412: POP
// end ;
21413: LD_VAR 0 12
21417: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
21418: LD_INT 0
21420: PPUSH
21421: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
21422: LD_VAR 0 1
21426: PUSH
21427: LD_INT 1
21429: LESS
21430: PUSH
21431: LD_VAR 0 1
21435: PUSH
21436: LD_INT 3
21438: GREATER
21439: OR
21440: PUSH
21441: LD_VAR 0 5
21445: PPUSH
21446: LD_VAR 0 6
21450: PPUSH
21451: CALL_OW 428
21455: OR
21456: IFFALSE 21460
// exit ;
21458: GO 22188
// uc_side := your_side ;
21460: LD_ADDR_OWVAR 20
21464: PUSH
21465: LD_OWVAR 2
21469: ST_TO_ADDR
// uc_nation := nation ;
21470: LD_ADDR_OWVAR 21
21474: PUSH
21475: LD_VAR 0 1
21479: ST_TO_ADDR
// bc_level = 1 ;
21480: LD_ADDR_OWVAR 43
21484: PUSH
21485: LD_INT 1
21487: ST_TO_ADDR
// case btype of 1 :
21488: LD_VAR 0 2
21492: PUSH
21493: LD_INT 1
21495: DOUBLE
21496: EQUAL
21497: IFTRUE 21501
21499: GO 21512
21501: POP
// bc_type := b_depot ; 2 :
21502: LD_ADDR_OWVAR 42
21506: PUSH
21507: LD_INT 0
21509: ST_TO_ADDR
21510: GO 22132
21512: LD_INT 2
21514: DOUBLE
21515: EQUAL
21516: IFTRUE 21520
21518: GO 21531
21520: POP
// bc_type := b_warehouse ; 3 :
21521: LD_ADDR_OWVAR 42
21525: PUSH
21526: LD_INT 1
21528: ST_TO_ADDR
21529: GO 22132
21531: LD_INT 3
21533: DOUBLE
21534: EQUAL
21535: IFTRUE 21539
21537: GO 21550
21539: POP
// bc_type := b_lab ; 4 .. 9 :
21540: LD_ADDR_OWVAR 42
21544: PUSH
21545: LD_INT 6
21547: ST_TO_ADDR
21548: GO 22132
21550: LD_INT 4
21552: DOUBLE
21553: GREATEREQUAL
21554: IFFALSE 21562
21556: LD_INT 9
21558: DOUBLE
21559: LESSEQUAL
21560: IFTRUE 21564
21562: GO 21624
21564: POP
// begin bc_type := b_lab_half ;
21565: LD_ADDR_OWVAR 42
21569: PUSH
21570: LD_INT 7
21572: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
21573: LD_ADDR_OWVAR 44
21577: PUSH
21578: LD_INT 10
21580: PUSH
21581: LD_INT 11
21583: PUSH
21584: LD_INT 12
21586: PUSH
21587: LD_INT 15
21589: PUSH
21590: LD_INT 14
21592: PUSH
21593: LD_INT 13
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: PUSH
21604: LD_VAR 0 2
21608: PUSH
21609: LD_INT 3
21611: MINUS
21612: ARRAY
21613: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
21614: LD_ADDR_OWVAR 45
21618: PUSH
21619: LD_INT 9
21621: ST_TO_ADDR
// end ; 10 .. 13 :
21622: GO 22132
21624: LD_INT 10
21626: DOUBLE
21627: GREATEREQUAL
21628: IFFALSE 21636
21630: LD_INT 13
21632: DOUBLE
21633: LESSEQUAL
21634: IFTRUE 21638
21636: GO 21715
21638: POP
// begin bc_type := b_lab_full ;
21639: LD_ADDR_OWVAR 42
21643: PUSH
21644: LD_INT 8
21646: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21647: LD_ADDR_OWVAR 44
21651: PUSH
21652: LD_INT 10
21654: PUSH
21655: LD_INT 12
21657: PUSH
21658: LD_INT 14
21660: PUSH
21661: LD_INT 13
21663: PUSH
21664: EMPTY
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: PUSH
21670: LD_VAR 0 2
21674: PUSH
21675: LD_INT 9
21677: MINUS
21678: ARRAY
21679: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21680: LD_ADDR_OWVAR 45
21684: PUSH
21685: LD_INT 11
21687: PUSH
21688: LD_INT 15
21690: PUSH
21691: LD_INT 12
21693: PUSH
21694: LD_INT 15
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: LIST
21701: LIST
21702: PUSH
21703: LD_VAR 0 2
21707: PUSH
21708: LD_INT 9
21710: MINUS
21711: ARRAY
21712: ST_TO_ADDR
// end ; 14 :
21713: GO 22132
21715: LD_INT 14
21717: DOUBLE
21718: EQUAL
21719: IFTRUE 21723
21721: GO 21734
21723: POP
// bc_type := b_workshop ; 15 :
21724: LD_ADDR_OWVAR 42
21728: PUSH
21729: LD_INT 2
21731: ST_TO_ADDR
21732: GO 22132
21734: LD_INT 15
21736: DOUBLE
21737: EQUAL
21738: IFTRUE 21742
21740: GO 21753
21742: POP
// bc_type := b_factory ; 16 :
21743: LD_ADDR_OWVAR 42
21747: PUSH
21748: LD_INT 3
21750: ST_TO_ADDR
21751: GO 22132
21753: LD_INT 16
21755: DOUBLE
21756: EQUAL
21757: IFTRUE 21761
21759: GO 21772
21761: POP
// bc_type := b_ext_gun ; 17 :
21762: LD_ADDR_OWVAR 42
21766: PUSH
21767: LD_INT 17
21769: ST_TO_ADDR
21770: GO 22132
21772: LD_INT 17
21774: DOUBLE
21775: EQUAL
21776: IFTRUE 21780
21778: GO 21808
21780: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21781: LD_ADDR_OWVAR 42
21785: PUSH
21786: LD_INT 19
21788: PUSH
21789: LD_INT 23
21791: PUSH
21792: LD_INT 19
21794: PUSH
21795: EMPTY
21796: LIST
21797: LIST
21798: LIST
21799: PUSH
21800: LD_VAR 0 1
21804: ARRAY
21805: ST_TO_ADDR
21806: GO 22132
21808: LD_INT 18
21810: DOUBLE
21811: EQUAL
21812: IFTRUE 21816
21814: GO 21827
21816: POP
// bc_type := b_ext_radar ; 19 :
21817: LD_ADDR_OWVAR 42
21821: PUSH
21822: LD_INT 20
21824: ST_TO_ADDR
21825: GO 22132
21827: LD_INT 19
21829: DOUBLE
21830: EQUAL
21831: IFTRUE 21835
21833: GO 21846
21835: POP
// bc_type := b_ext_radio ; 20 :
21836: LD_ADDR_OWVAR 42
21840: PUSH
21841: LD_INT 22
21843: ST_TO_ADDR
21844: GO 22132
21846: LD_INT 20
21848: DOUBLE
21849: EQUAL
21850: IFTRUE 21854
21852: GO 21865
21854: POP
// bc_type := b_ext_siberium ; 21 :
21855: LD_ADDR_OWVAR 42
21859: PUSH
21860: LD_INT 21
21862: ST_TO_ADDR
21863: GO 22132
21865: LD_INT 21
21867: DOUBLE
21868: EQUAL
21869: IFTRUE 21873
21871: GO 21884
21873: POP
// bc_type := b_ext_computer ; 22 :
21874: LD_ADDR_OWVAR 42
21878: PUSH
21879: LD_INT 24
21881: ST_TO_ADDR
21882: GO 22132
21884: LD_INT 22
21886: DOUBLE
21887: EQUAL
21888: IFTRUE 21892
21890: GO 21903
21892: POP
// bc_type := b_ext_track ; 23 :
21893: LD_ADDR_OWVAR 42
21897: PUSH
21898: LD_INT 16
21900: ST_TO_ADDR
21901: GO 22132
21903: LD_INT 23
21905: DOUBLE
21906: EQUAL
21907: IFTRUE 21911
21909: GO 21922
21911: POP
// bc_type := b_ext_laser ; 24 :
21912: LD_ADDR_OWVAR 42
21916: PUSH
21917: LD_INT 25
21919: ST_TO_ADDR
21920: GO 22132
21922: LD_INT 24
21924: DOUBLE
21925: EQUAL
21926: IFTRUE 21930
21928: GO 21941
21930: POP
// bc_type := b_control_tower ; 25 :
21931: LD_ADDR_OWVAR 42
21935: PUSH
21936: LD_INT 36
21938: ST_TO_ADDR
21939: GO 22132
21941: LD_INT 25
21943: DOUBLE
21944: EQUAL
21945: IFTRUE 21949
21947: GO 21960
21949: POP
// bc_type := b_breastwork ; 26 :
21950: LD_ADDR_OWVAR 42
21954: PUSH
21955: LD_INT 31
21957: ST_TO_ADDR
21958: GO 22132
21960: LD_INT 26
21962: DOUBLE
21963: EQUAL
21964: IFTRUE 21968
21966: GO 21979
21968: POP
// bc_type := b_bunker ; 27 :
21969: LD_ADDR_OWVAR 42
21973: PUSH
21974: LD_INT 32
21976: ST_TO_ADDR
21977: GO 22132
21979: LD_INT 27
21981: DOUBLE
21982: EQUAL
21983: IFTRUE 21987
21985: GO 21998
21987: POP
// bc_type := b_turret ; 28 :
21988: LD_ADDR_OWVAR 42
21992: PUSH
21993: LD_INT 33
21995: ST_TO_ADDR
21996: GO 22132
21998: LD_INT 28
22000: DOUBLE
22001: EQUAL
22002: IFTRUE 22006
22004: GO 22017
22006: POP
// bc_type := b_armoury ; 29 :
22007: LD_ADDR_OWVAR 42
22011: PUSH
22012: LD_INT 4
22014: ST_TO_ADDR
22015: GO 22132
22017: LD_INT 29
22019: DOUBLE
22020: EQUAL
22021: IFTRUE 22025
22023: GO 22036
22025: POP
// bc_type := b_barracks ; 30 :
22026: LD_ADDR_OWVAR 42
22030: PUSH
22031: LD_INT 5
22033: ST_TO_ADDR
22034: GO 22132
22036: LD_INT 30
22038: DOUBLE
22039: EQUAL
22040: IFTRUE 22044
22042: GO 22055
22044: POP
// bc_type := b_solar_power ; 31 :
22045: LD_ADDR_OWVAR 42
22049: PUSH
22050: LD_INT 27
22052: ST_TO_ADDR
22053: GO 22132
22055: LD_INT 31
22057: DOUBLE
22058: EQUAL
22059: IFTRUE 22063
22061: GO 22074
22063: POP
// bc_type := b_oil_power ; 32 :
22064: LD_ADDR_OWVAR 42
22068: PUSH
22069: LD_INT 26
22071: ST_TO_ADDR
22072: GO 22132
22074: LD_INT 32
22076: DOUBLE
22077: EQUAL
22078: IFTRUE 22082
22080: GO 22093
22082: POP
// bc_type := b_siberite_power ; 33 :
22083: LD_ADDR_OWVAR 42
22087: PUSH
22088: LD_INT 28
22090: ST_TO_ADDR
22091: GO 22132
22093: LD_INT 33
22095: DOUBLE
22096: EQUAL
22097: IFTRUE 22101
22099: GO 22112
22101: POP
// bc_type := b_oil_mine ; 34 :
22102: LD_ADDR_OWVAR 42
22106: PUSH
22107: LD_INT 29
22109: ST_TO_ADDR
22110: GO 22132
22112: LD_INT 34
22114: DOUBLE
22115: EQUAL
22116: IFTRUE 22120
22118: GO 22131
22120: POP
// bc_type := b_siberite_mine ; end ;
22121: LD_ADDR_OWVAR 42
22125: PUSH
22126: LD_INT 30
22128: ST_TO_ADDR
22129: GO 22132
22131: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
22132: LD_ADDR_VAR 0 8
22136: PUSH
22137: LD_VAR 0 5
22141: PPUSH
22142: LD_VAR 0 6
22146: PPUSH
22147: LD_VAR 0 3
22151: PPUSH
22152: CALL_OW 47
22156: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
22157: LD_OWVAR 42
22161: PUSH
22162: LD_INT 32
22164: PUSH
22165: LD_INT 33
22167: PUSH
22168: EMPTY
22169: LIST
22170: LIST
22171: IN
22172: IFFALSE 22188
// PlaceWeaponTurret ( b , weapon ) ;
22174: LD_VAR 0 8
22178: PPUSH
22179: LD_VAR 0 4
22183: PPUSH
22184: CALL_OW 431
// end ;
22188: LD_VAR 0 7
22192: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
22193: LD_INT 0
22195: PPUSH
22196: PPUSH
22197: PPUSH
22198: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22199: LD_ADDR_VAR 0 4
22203: PUSH
22204: LD_INT 22
22206: PUSH
22207: LD_OWVAR 2
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 2
22218: PUSH
22219: LD_INT 30
22221: PUSH
22222: LD_INT 0
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: LD_INT 30
22231: PUSH
22232: LD_INT 1
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: LIST
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PPUSH
22248: CALL_OW 69
22252: ST_TO_ADDR
// if not tmp then
22253: LD_VAR 0 4
22257: NOT
22258: IFFALSE 22262
// exit ;
22260: GO 22321
// for i in tmp do
22262: LD_ADDR_VAR 0 2
22266: PUSH
22267: LD_VAR 0 4
22271: PUSH
22272: FOR_IN
22273: IFFALSE 22319
// for j = 1 to 3 do
22275: LD_ADDR_VAR 0 3
22279: PUSH
22280: DOUBLE
22281: LD_INT 1
22283: DEC
22284: ST_TO_ADDR
22285: LD_INT 3
22287: PUSH
22288: FOR_TO
22289: IFFALSE 22315
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
22291: LD_VAR 0 2
22295: PPUSH
22296: CALL_OW 274
22300: PPUSH
22301: LD_VAR 0 3
22305: PPUSH
22306: LD_INT 99999
22308: PPUSH
22309: CALL_OW 277
22313: GO 22288
22315: POP
22316: POP
22317: GO 22272
22319: POP
22320: POP
// end ;
22321: LD_VAR 0 1
22325: RET
// export function hHackSetLevel10 ; var i , j ; begin
22326: LD_INT 0
22328: PPUSH
22329: PPUSH
22330: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22331: LD_ADDR_VAR 0 2
22335: PUSH
22336: LD_INT 21
22338: PUSH
22339: LD_INT 1
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: PPUSH
22346: CALL_OW 69
22350: PUSH
22351: FOR_IN
22352: IFFALSE 22404
// if IsSelected ( i ) then
22354: LD_VAR 0 2
22358: PPUSH
22359: CALL_OW 306
22363: IFFALSE 22402
// begin for j := 1 to 4 do
22365: LD_ADDR_VAR 0 3
22369: PUSH
22370: DOUBLE
22371: LD_INT 1
22373: DEC
22374: ST_TO_ADDR
22375: LD_INT 4
22377: PUSH
22378: FOR_TO
22379: IFFALSE 22400
// SetSkill ( i , j , 10 ) ;
22381: LD_VAR 0 2
22385: PPUSH
22386: LD_VAR 0 3
22390: PPUSH
22391: LD_INT 10
22393: PPUSH
22394: CALL_OW 237
22398: GO 22378
22400: POP
22401: POP
// end ;
22402: GO 22351
22404: POP
22405: POP
// end ;
22406: LD_VAR 0 1
22410: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
22411: LD_INT 0
22413: PPUSH
22414: PPUSH
22415: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
22416: LD_ADDR_VAR 0 2
22420: PUSH
22421: LD_INT 22
22423: PUSH
22424: LD_OWVAR 2
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: LD_INT 21
22435: PUSH
22436: LD_INT 1
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PUSH
22443: EMPTY
22444: LIST
22445: LIST
22446: PPUSH
22447: CALL_OW 69
22451: PUSH
22452: FOR_IN
22453: IFFALSE 22494
// begin for j := 1 to 4 do
22455: LD_ADDR_VAR 0 3
22459: PUSH
22460: DOUBLE
22461: LD_INT 1
22463: DEC
22464: ST_TO_ADDR
22465: LD_INT 4
22467: PUSH
22468: FOR_TO
22469: IFFALSE 22490
// SetSkill ( i , j , 10 ) ;
22471: LD_VAR 0 2
22475: PPUSH
22476: LD_VAR 0 3
22480: PPUSH
22481: LD_INT 10
22483: PPUSH
22484: CALL_OW 237
22488: GO 22468
22490: POP
22491: POP
// end ;
22492: GO 22452
22494: POP
22495: POP
// end ;
22496: LD_VAR 0 1
22500: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
22501: LD_INT 0
22503: PPUSH
// uc_side := your_side ;
22504: LD_ADDR_OWVAR 20
22508: PUSH
22509: LD_OWVAR 2
22513: ST_TO_ADDR
// uc_nation := nation ;
22514: LD_ADDR_OWVAR 21
22518: PUSH
22519: LD_VAR 0 1
22523: ST_TO_ADDR
// InitHc ;
22524: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
22528: LD_INT 0
22530: PPUSH
22531: LD_VAR 0 2
22535: PPUSH
22536: LD_VAR 0 3
22540: PPUSH
22541: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
22545: LD_VAR 0 4
22549: PPUSH
22550: LD_VAR 0 5
22554: PPUSH
22555: CALL_OW 428
22559: PUSH
22560: LD_INT 0
22562: EQUAL
22563: IFFALSE 22587
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
22565: CALL_OW 44
22569: PPUSH
22570: LD_VAR 0 4
22574: PPUSH
22575: LD_VAR 0 5
22579: PPUSH
22580: LD_INT 1
22582: PPUSH
22583: CALL_OW 48
// end ;
22587: LD_VAR 0 6
22591: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
22592: LD_INT 0
22594: PPUSH
22595: PPUSH
// uc_side := your_side ;
22596: LD_ADDR_OWVAR 20
22600: PUSH
22601: LD_OWVAR 2
22605: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
22606: LD_VAR 0 1
22610: PUSH
22611: LD_INT 1
22613: PUSH
22614: LD_INT 2
22616: PUSH
22617: LD_INT 3
22619: PUSH
22620: LD_INT 4
22622: PUSH
22623: LD_INT 5
22625: PUSH
22626: EMPTY
22627: LIST
22628: LIST
22629: LIST
22630: LIST
22631: LIST
22632: IN
22633: IFFALSE 22645
// uc_nation := nation_american else
22635: LD_ADDR_OWVAR 21
22639: PUSH
22640: LD_INT 1
22642: ST_TO_ADDR
22643: GO 22688
// if chassis in [ 11 , 12 , 13 , 14 ] then
22645: LD_VAR 0 1
22649: PUSH
22650: LD_INT 11
22652: PUSH
22653: LD_INT 12
22655: PUSH
22656: LD_INT 13
22658: PUSH
22659: LD_INT 14
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: IN
22668: IFFALSE 22680
// uc_nation := nation_arabian else
22670: LD_ADDR_OWVAR 21
22674: PUSH
22675: LD_INT 2
22677: ST_TO_ADDR
22678: GO 22688
// uc_nation := nation_russian ;
22680: LD_ADDR_OWVAR 21
22684: PUSH
22685: LD_INT 3
22687: ST_TO_ADDR
// vc_chassis := chassis ;
22688: LD_ADDR_OWVAR 37
22692: PUSH
22693: LD_VAR 0 1
22697: ST_TO_ADDR
// vc_engine := engine ;
22698: LD_ADDR_OWVAR 39
22702: PUSH
22703: LD_VAR 0 2
22707: ST_TO_ADDR
// vc_control := control ;
22708: LD_ADDR_OWVAR 38
22712: PUSH
22713: LD_VAR 0 3
22717: ST_TO_ADDR
// vc_weapon := weapon ;
22718: LD_ADDR_OWVAR 40
22722: PUSH
22723: LD_VAR 0 4
22727: ST_TO_ADDR
// un := CreateVehicle ;
22728: LD_ADDR_VAR 0 8
22732: PUSH
22733: CALL_OW 45
22737: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22738: LD_VAR 0 8
22742: PPUSH
22743: LD_INT 0
22745: PPUSH
22746: LD_INT 5
22748: PPUSH
22749: CALL_OW 12
22753: PPUSH
22754: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22758: LD_VAR 0 8
22762: PPUSH
22763: LD_VAR 0 5
22767: PPUSH
22768: LD_VAR 0 6
22772: PPUSH
22773: LD_INT 1
22775: PPUSH
22776: CALL_OW 48
// end ;
22780: LD_VAR 0 7
22784: RET
// export hInvincible ; every 1 do
22785: GO 22787
22787: DISABLE
// hInvincible := [ ] ;
22788: LD_ADDR_EXP 88
22792: PUSH
22793: EMPTY
22794: ST_TO_ADDR
22795: END
// every 10 do var i ;
22796: GO 22798
22798: DISABLE
22799: LD_INT 0
22801: PPUSH
// begin enable ;
22802: ENABLE
// if not hInvincible then
22803: LD_EXP 88
22807: NOT
22808: IFFALSE 22812
// exit ;
22810: GO 22856
// for i in hInvincible do
22812: LD_ADDR_VAR 0 1
22816: PUSH
22817: LD_EXP 88
22821: PUSH
22822: FOR_IN
22823: IFFALSE 22854
// if GetLives ( i ) < 1000 then
22825: LD_VAR 0 1
22829: PPUSH
22830: CALL_OW 256
22834: PUSH
22835: LD_INT 1000
22837: LESS
22838: IFFALSE 22852
// SetLives ( i , 1000 ) ;
22840: LD_VAR 0 1
22844: PPUSH
22845: LD_INT 1000
22847: PPUSH
22848: CALL_OW 234
22852: GO 22822
22854: POP
22855: POP
// end ;
22856: PPOPN 1
22858: END
// export function hHackInvincible ; var i ; begin
22859: LD_INT 0
22861: PPUSH
22862: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22863: LD_ADDR_VAR 0 2
22867: PUSH
22868: LD_INT 2
22870: PUSH
22871: LD_INT 21
22873: PUSH
22874: LD_INT 1
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 21
22883: PUSH
22884: LD_INT 2
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: LIST
22895: PPUSH
22896: CALL_OW 69
22900: PUSH
22901: FOR_IN
22902: IFFALSE 22963
// if IsSelected ( i ) then
22904: LD_VAR 0 2
22908: PPUSH
22909: CALL_OW 306
22913: IFFALSE 22961
// begin if i in hInvincible then
22915: LD_VAR 0 2
22919: PUSH
22920: LD_EXP 88
22924: IN
22925: IFFALSE 22945
// hInvincible := hInvincible diff i else
22927: LD_ADDR_EXP 88
22931: PUSH
22932: LD_EXP 88
22936: PUSH
22937: LD_VAR 0 2
22941: DIFF
22942: ST_TO_ADDR
22943: GO 22961
// hInvincible := hInvincible union i ;
22945: LD_ADDR_EXP 88
22949: PUSH
22950: LD_EXP 88
22954: PUSH
22955: LD_VAR 0 2
22959: UNION
22960: ST_TO_ADDR
// end ;
22961: GO 22901
22963: POP
22964: POP
// end ;
22965: LD_VAR 0 1
22969: RET
// export function hHackInvisible ; var i , j ; begin
22970: LD_INT 0
22972: PPUSH
22973: PPUSH
22974: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22975: LD_ADDR_VAR 0 2
22979: PUSH
22980: LD_INT 21
22982: PUSH
22983: LD_INT 1
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PPUSH
22990: CALL_OW 69
22994: PUSH
22995: FOR_IN
22996: IFFALSE 23020
// if IsSelected ( i ) then
22998: LD_VAR 0 2
23002: PPUSH
23003: CALL_OW 306
23007: IFFALSE 23018
// ComForceInvisible ( i ) ;
23009: LD_VAR 0 2
23013: PPUSH
23014: CALL_OW 496
23018: GO 22995
23020: POP
23021: POP
// end ;
23022: LD_VAR 0 1
23026: RET
// export function hHackChangeYourSide ; begin
23027: LD_INT 0
23029: PPUSH
// if your_side = 8 then
23030: LD_OWVAR 2
23034: PUSH
23035: LD_INT 8
23037: EQUAL
23038: IFFALSE 23050
// your_side := 0 else
23040: LD_ADDR_OWVAR 2
23044: PUSH
23045: LD_INT 0
23047: ST_TO_ADDR
23048: GO 23064
// your_side := your_side + 1 ;
23050: LD_ADDR_OWVAR 2
23054: PUSH
23055: LD_OWVAR 2
23059: PUSH
23060: LD_INT 1
23062: PLUS
23063: ST_TO_ADDR
// end ;
23064: LD_VAR 0 1
23068: RET
// export function hHackChangeUnitSide ; var i , j ; begin
23069: LD_INT 0
23071: PPUSH
23072: PPUSH
23073: PPUSH
// for i in all_units do
23074: LD_ADDR_VAR 0 2
23078: PUSH
23079: LD_OWVAR 3
23083: PUSH
23084: FOR_IN
23085: IFFALSE 23163
// if IsSelected ( i ) then
23087: LD_VAR 0 2
23091: PPUSH
23092: CALL_OW 306
23096: IFFALSE 23161
// begin j := GetSide ( i ) ;
23098: LD_ADDR_VAR 0 3
23102: PUSH
23103: LD_VAR 0 2
23107: PPUSH
23108: CALL_OW 255
23112: ST_TO_ADDR
// if j = 8 then
23113: LD_VAR 0 3
23117: PUSH
23118: LD_INT 8
23120: EQUAL
23121: IFFALSE 23133
// j := 0 else
23123: LD_ADDR_VAR 0 3
23127: PUSH
23128: LD_INT 0
23130: ST_TO_ADDR
23131: GO 23147
// j := j + 1 ;
23133: LD_ADDR_VAR 0 3
23137: PUSH
23138: LD_VAR 0 3
23142: PUSH
23143: LD_INT 1
23145: PLUS
23146: ST_TO_ADDR
// SetSide ( i , j ) ;
23147: LD_VAR 0 2
23151: PPUSH
23152: LD_VAR 0 3
23156: PPUSH
23157: CALL_OW 235
// end ;
23161: GO 23084
23163: POP
23164: POP
// end ;
23165: LD_VAR 0 1
23169: RET
// export function hHackFog ; begin
23170: LD_INT 0
23172: PPUSH
// FogOff ( true ) ;
23173: LD_INT 1
23175: PPUSH
23176: CALL_OW 344
// end ;
23180: LD_VAR 0 1
23184: RET
// export function hHackTeleport ( unit , x , y ) ; begin
23185: LD_INT 0
23187: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
23188: LD_VAR 0 1
23192: PPUSH
23193: LD_VAR 0 2
23197: PPUSH
23198: LD_VAR 0 3
23202: PPUSH
23203: LD_INT 1
23205: PPUSH
23206: LD_INT 1
23208: PPUSH
23209: CALL_OW 483
// CenterOnXY ( x , y ) ;
23213: LD_VAR 0 2
23217: PPUSH
23218: LD_VAR 0 3
23222: PPUSH
23223: CALL_OW 84
// end ;
23227: LD_VAR 0 4
23231: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
23232: LD_INT 0
23234: PPUSH
23235: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
23236: LD_VAR 0 1
23240: NOT
23241: PUSH
23242: LD_VAR 0 2
23246: PPUSH
23247: LD_VAR 0 3
23251: PPUSH
23252: CALL_OW 488
23256: NOT
23257: OR
23258: PUSH
23259: LD_VAR 0 1
23263: PPUSH
23264: CALL_OW 266
23268: PUSH
23269: LD_INT 3
23271: NONEQUAL
23272: PUSH
23273: LD_VAR 0 1
23277: PPUSH
23278: CALL_OW 247
23282: PUSH
23283: LD_INT 1
23285: EQUAL
23286: NOT
23287: AND
23288: OR
23289: IFFALSE 23293
// exit ;
23291: GO 23442
// if GetType ( factory ) = unit_human then
23293: LD_VAR 0 1
23297: PPUSH
23298: CALL_OW 247
23302: PUSH
23303: LD_INT 1
23305: EQUAL
23306: IFFALSE 23323
// factory := IsInUnit ( factory ) ;
23308: LD_ADDR_VAR 0 1
23312: PUSH
23313: LD_VAR 0 1
23317: PPUSH
23318: CALL_OW 310
23322: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
23323: LD_VAR 0 1
23327: PPUSH
23328: CALL_OW 266
23332: PUSH
23333: LD_INT 3
23335: NONEQUAL
23336: IFFALSE 23340
// exit ;
23338: GO 23442
// if HexInfo ( x , y ) = factory then
23340: LD_VAR 0 2
23344: PPUSH
23345: LD_VAR 0 3
23349: PPUSH
23350: CALL_OW 428
23354: PUSH
23355: LD_VAR 0 1
23359: EQUAL
23360: IFFALSE 23387
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
23362: LD_ADDR_EXP 89
23366: PUSH
23367: LD_EXP 89
23371: PPUSH
23372: LD_VAR 0 1
23376: PPUSH
23377: LD_INT 0
23379: PPUSH
23380: CALL_OW 1
23384: ST_TO_ADDR
23385: GO 23438
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
23387: LD_ADDR_EXP 89
23391: PUSH
23392: LD_EXP 89
23396: PPUSH
23397: LD_VAR 0 1
23401: PPUSH
23402: LD_VAR 0 1
23406: PPUSH
23407: CALL_OW 255
23411: PUSH
23412: LD_VAR 0 1
23416: PUSH
23417: LD_VAR 0 2
23421: PUSH
23422: LD_VAR 0 3
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: PPUSH
23433: CALL_OW 1
23437: ST_TO_ADDR
// UpdateFactoryWaypoints ;
23438: CALL 23447 0 0
// end ;
23442: LD_VAR 0 4
23446: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
23447: LD_INT 0
23449: PPUSH
23450: PPUSH
23451: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
23452: LD_STRING resetFactoryWaypoint();
23454: PPUSH
23455: CALL_OW 559
// if factoryWaypoints then
23459: LD_EXP 89
23463: IFFALSE 23589
// begin list := PrepareArray ( factoryWaypoints ) ;
23465: LD_ADDR_VAR 0 3
23469: PUSH
23470: LD_EXP 89
23474: PPUSH
23475: CALL 70731 0 1
23479: ST_TO_ADDR
// for i := 1 to list do
23480: LD_ADDR_VAR 0 2
23484: PUSH
23485: DOUBLE
23486: LD_INT 1
23488: DEC
23489: ST_TO_ADDR
23490: LD_VAR 0 3
23494: PUSH
23495: FOR_TO
23496: IFFALSE 23587
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23498: LD_STRING setFactoryWaypointXY(
23500: PUSH
23501: LD_VAR 0 3
23505: PUSH
23506: LD_VAR 0 2
23510: ARRAY
23511: PUSH
23512: LD_INT 1
23514: ARRAY
23515: STR
23516: PUSH
23517: LD_STRING ,
23519: STR
23520: PUSH
23521: LD_VAR 0 3
23525: PUSH
23526: LD_VAR 0 2
23530: ARRAY
23531: PUSH
23532: LD_INT 2
23534: ARRAY
23535: STR
23536: PUSH
23537: LD_STRING ,
23539: STR
23540: PUSH
23541: LD_VAR 0 3
23545: PUSH
23546: LD_VAR 0 2
23550: ARRAY
23551: PUSH
23552: LD_INT 3
23554: ARRAY
23555: STR
23556: PUSH
23557: LD_STRING ,
23559: STR
23560: PUSH
23561: LD_VAR 0 3
23565: PUSH
23566: LD_VAR 0 2
23570: ARRAY
23571: PUSH
23572: LD_INT 4
23574: ARRAY
23575: STR
23576: PUSH
23577: LD_STRING )
23579: STR
23580: PPUSH
23581: CALL_OW 559
23585: GO 23495
23587: POP
23588: POP
// end ; end ;
23589: LD_VAR 0 1
23593: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
23594: LD_INT 0
23596: PPUSH
// if HexInfo ( x , y ) = warehouse then
23597: LD_VAR 0 2
23601: PPUSH
23602: LD_VAR 0 3
23606: PPUSH
23607: CALL_OW 428
23611: PUSH
23612: LD_VAR 0 1
23616: EQUAL
23617: IFFALSE 23644
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
23619: LD_ADDR_EXP 90
23623: PUSH
23624: LD_EXP 90
23628: PPUSH
23629: LD_VAR 0 1
23633: PPUSH
23634: LD_INT 0
23636: PPUSH
23637: CALL_OW 1
23641: ST_TO_ADDR
23642: GO 23695
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23644: LD_ADDR_EXP 90
23648: PUSH
23649: LD_EXP 90
23653: PPUSH
23654: LD_VAR 0 1
23658: PPUSH
23659: LD_VAR 0 1
23663: PPUSH
23664: CALL_OW 255
23668: PUSH
23669: LD_VAR 0 1
23673: PUSH
23674: LD_VAR 0 2
23678: PUSH
23679: LD_VAR 0 3
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: PPUSH
23690: CALL_OW 1
23694: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23695: CALL 23704 0 0
// end ;
23699: LD_VAR 0 4
23703: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23704: LD_INT 0
23706: PPUSH
23707: PPUSH
23708: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23709: LD_STRING resetWarehouseGatheringPoints();
23711: PPUSH
23712: CALL_OW 559
// if warehouseGatheringPoints then
23716: LD_EXP 90
23720: IFFALSE 23846
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23722: LD_ADDR_VAR 0 3
23726: PUSH
23727: LD_EXP 90
23731: PPUSH
23732: CALL 70731 0 1
23736: ST_TO_ADDR
// for i := 1 to list do
23737: LD_ADDR_VAR 0 2
23741: PUSH
23742: DOUBLE
23743: LD_INT 1
23745: DEC
23746: ST_TO_ADDR
23747: LD_VAR 0 3
23751: PUSH
23752: FOR_TO
23753: IFFALSE 23844
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23755: LD_STRING setWarehouseGatheringPointXY(
23757: PUSH
23758: LD_VAR 0 3
23762: PUSH
23763: LD_VAR 0 2
23767: ARRAY
23768: PUSH
23769: LD_INT 1
23771: ARRAY
23772: STR
23773: PUSH
23774: LD_STRING ,
23776: STR
23777: PUSH
23778: LD_VAR 0 3
23782: PUSH
23783: LD_VAR 0 2
23787: ARRAY
23788: PUSH
23789: LD_INT 2
23791: ARRAY
23792: STR
23793: PUSH
23794: LD_STRING ,
23796: STR
23797: PUSH
23798: LD_VAR 0 3
23802: PUSH
23803: LD_VAR 0 2
23807: ARRAY
23808: PUSH
23809: LD_INT 3
23811: ARRAY
23812: STR
23813: PUSH
23814: LD_STRING ,
23816: STR
23817: PUSH
23818: LD_VAR 0 3
23822: PUSH
23823: LD_VAR 0 2
23827: ARRAY
23828: PUSH
23829: LD_INT 4
23831: ARRAY
23832: STR
23833: PUSH
23834: LD_STRING )
23836: STR
23837: PPUSH
23838: CALL_OW 559
23842: GO 23752
23844: POP
23845: POP
// end ; end ;
23846: LD_VAR 0 1
23850: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23851: LD_EXP 90
23855: IFFALSE 24540
23857: GO 23859
23859: DISABLE
23860: LD_INT 0
23862: PPUSH
23863: PPUSH
23864: PPUSH
23865: PPUSH
23866: PPUSH
23867: PPUSH
23868: PPUSH
23869: PPUSH
23870: PPUSH
// begin enable ;
23871: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23872: LD_ADDR_VAR 0 3
23876: PUSH
23877: LD_EXP 90
23881: PPUSH
23882: CALL 70731 0 1
23886: ST_TO_ADDR
// if not list then
23887: LD_VAR 0 3
23891: NOT
23892: IFFALSE 23896
// exit ;
23894: GO 24540
// for i := 1 to list do
23896: LD_ADDR_VAR 0 1
23900: PUSH
23901: DOUBLE
23902: LD_INT 1
23904: DEC
23905: ST_TO_ADDR
23906: LD_VAR 0 3
23910: PUSH
23911: FOR_TO
23912: IFFALSE 24538
// begin depot := list [ i ] [ 2 ] ;
23914: LD_ADDR_VAR 0 8
23918: PUSH
23919: LD_VAR 0 3
23923: PUSH
23924: LD_VAR 0 1
23928: ARRAY
23929: PUSH
23930: LD_INT 2
23932: ARRAY
23933: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23934: LD_ADDR_VAR 0 5
23938: PUSH
23939: LD_VAR 0 3
23943: PUSH
23944: LD_VAR 0 1
23948: ARRAY
23949: PUSH
23950: LD_INT 1
23952: ARRAY
23953: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23954: LD_VAR 0 8
23958: PPUSH
23959: CALL_OW 301
23963: PUSH
23964: LD_VAR 0 5
23968: PUSH
23969: LD_VAR 0 8
23973: PPUSH
23974: CALL_OW 255
23978: NONEQUAL
23979: OR
23980: IFFALSE 24009
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23982: LD_ADDR_EXP 90
23986: PUSH
23987: LD_EXP 90
23991: PPUSH
23992: LD_VAR 0 8
23996: PPUSH
23997: LD_INT 0
23999: PPUSH
24000: CALL_OW 1
24004: ST_TO_ADDR
// exit ;
24005: POP
24006: POP
24007: GO 24540
// end ; x := list [ i ] [ 3 ] ;
24009: LD_ADDR_VAR 0 6
24013: PUSH
24014: LD_VAR 0 3
24018: PUSH
24019: LD_VAR 0 1
24023: ARRAY
24024: PUSH
24025: LD_INT 3
24027: ARRAY
24028: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
24029: LD_ADDR_VAR 0 7
24033: PUSH
24034: LD_VAR 0 3
24038: PUSH
24039: LD_VAR 0 1
24043: ARRAY
24044: PUSH
24045: LD_INT 4
24047: ARRAY
24048: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
24049: LD_ADDR_VAR 0 9
24053: PUSH
24054: LD_VAR 0 6
24058: PPUSH
24059: LD_VAR 0 7
24063: PPUSH
24064: LD_INT 16
24066: PPUSH
24067: CALL 69319 0 3
24071: ST_TO_ADDR
// if not cratesNearbyPoint then
24072: LD_VAR 0 9
24076: NOT
24077: IFFALSE 24083
// exit ;
24079: POP
24080: POP
24081: GO 24540
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
24083: LD_ADDR_VAR 0 4
24087: PUSH
24088: LD_INT 22
24090: PUSH
24091: LD_VAR 0 5
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 3
24102: PUSH
24103: LD_INT 60
24105: PUSH
24106: EMPTY
24107: LIST
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 91
24115: PUSH
24116: LD_VAR 0 8
24120: PUSH
24121: LD_INT 6
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: LIST
24128: PUSH
24129: LD_INT 2
24131: PUSH
24132: LD_INT 25
24134: PUSH
24135: LD_INT 2
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: PUSH
24142: LD_INT 25
24144: PUSH
24145: LD_INT 16
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: LIST
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: PPUSH
24163: CALL_OW 69
24167: PUSH
24168: LD_VAR 0 8
24172: PPUSH
24173: CALL_OW 313
24177: PPUSH
24178: LD_INT 3
24180: PUSH
24181: LD_INT 60
24183: PUSH
24184: EMPTY
24185: LIST
24186: PUSH
24187: EMPTY
24188: LIST
24189: LIST
24190: PUSH
24191: LD_INT 2
24193: PUSH
24194: LD_INT 25
24196: PUSH
24197: LD_INT 2
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 25
24206: PUSH
24207: LD_INT 16
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: LIST
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PPUSH
24223: CALL_OW 72
24227: UNION
24228: ST_TO_ADDR
// if tmp then
24229: LD_VAR 0 4
24233: IFFALSE 24313
// begin tmp := ShrinkArray ( tmp , 3 ) ;
24235: LD_ADDR_VAR 0 4
24239: PUSH
24240: LD_VAR 0 4
24244: PPUSH
24245: LD_INT 3
24247: PPUSH
24248: CALL 67288 0 2
24252: ST_TO_ADDR
// for j in tmp do
24253: LD_ADDR_VAR 0 2
24257: PUSH
24258: LD_VAR 0 4
24262: PUSH
24263: FOR_IN
24264: IFFALSE 24307
// begin if IsInUnit ( j ) then
24266: LD_VAR 0 2
24270: PPUSH
24271: CALL_OW 310
24275: IFFALSE 24286
// ComExit ( j ) ;
24277: LD_VAR 0 2
24281: PPUSH
24282: CALL 67371 0 1
// AddComCollect ( j , x , y ) ;
24286: LD_VAR 0 2
24290: PPUSH
24291: LD_VAR 0 6
24295: PPUSH
24296: LD_VAR 0 7
24300: PPUSH
24301: CALL_OW 177
// end ;
24305: GO 24263
24307: POP
24308: POP
// exit ;
24309: POP
24310: POP
24311: GO 24540
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
24313: LD_ADDR_VAR 0 4
24317: PUSH
24318: LD_INT 22
24320: PUSH
24321: LD_VAR 0 5
24325: PUSH
24326: EMPTY
24327: LIST
24328: LIST
24329: PUSH
24330: LD_INT 91
24332: PUSH
24333: LD_VAR 0 8
24337: PUSH
24338: LD_INT 8
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: LIST
24345: PUSH
24346: LD_INT 2
24348: PUSH
24349: LD_INT 34
24351: PUSH
24352: LD_INT 12
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: LD_INT 34
24361: PUSH
24362: LD_INT 51
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PUSH
24369: LD_INT 34
24371: PUSH
24372: LD_INT 32
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 34
24381: PUSH
24382: LD_INT 89
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: PUSH
24396: EMPTY
24397: LIST
24398: LIST
24399: LIST
24400: PPUSH
24401: CALL_OW 69
24405: ST_TO_ADDR
// if tmp then
24406: LD_VAR 0 4
24410: IFFALSE 24536
// begin for j in tmp do
24412: LD_ADDR_VAR 0 2
24416: PUSH
24417: LD_VAR 0 4
24421: PUSH
24422: FOR_IN
24423: IFFALSE 24534
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
24425: LD_VAR 0 2
24429: PPUSH
24430: CALL_OW 262
24434: PUSH
24435: LD_INT 3
24437: EQUAL
24438: PUSH
24439: LD_VAR 0 2
24443: PPUSH
24444: CALL_OW 261
24448: PUSH
24449: LD_INT 20
24451: GREATER
24452: OR
24453: PUSH
24454: LD_VAR 0 2
24458: PPUSH
24459: CALL_OW 314
24463: NOT
24464: AND
24465: PUSH
24466: LD_VAR 0 2
24470: PPUSH
24471: CALL_OW 263
24475: PUSH
24476: LD_INT 1
24478: NONEQUAL
24479: PUSH
24480: LD_VAR 0 2
24484: PPUSH
24485: CALL_OW 311
24489: OR
24490: AND
24491: IFFALSE 24532
// begin ComCollect ( j , x , y ) ;
24493: LD_VAR 0 2
24497: PPUSH
24498: LD_VAR 0 6
24502: PPUSH
24503: LD_VAR 0 7
24507: PPUSH
24508: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
24512: LD_VAR 0 2
24516: PPUSH
24517: LD_VAR 0 8
24521: PPUSH
24522: CALL_OW 172
// exit ;
24526: POP
24527: POP
24528: POP
24529: POP
24530: GO 24540
// end ;
24532: GO 24422
24534: POP
24535: POP
// end ; end ;
24536: GO 23911
24538: POP
24539: POP
// end ; end_of_file
24540: PPOPN 9
24542: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24543: LD_INT 0
24545: PPUSH
24546: PPUSH
24547: PPUSH
24548: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24549: LD_VAR 0 1
24553: PPUSH
24554: CALL_OW 264
24558: PUSH
24559: LD_INT 91
24561: EQUAL
24562: IFFALSE 24634
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24564: LD_INT 68
24566: PPUSH
24567: LD_VAR 0 1
24571: PPUSH
24572: CALL_OW 255
24576: PPUSH
24577: CALL_OW 321
24581: PUSH
24582: LD_INT 2
24584: EQUAL
24585: IFFALSE 24597
// eff := 70 else
24587: LD_ADDR_VAR 0 4
24591: PUSH
24592: LD_INT 70
24594: ST_TO_ADDR
24595: GO 24605
// eff := 30 ;
24597: LD_ADDR_VAR 0 4
24601: PUSH
24602: LD_INT 30
24604: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24605: LD_VAR 0 1
24609: PPUSH
24610: CALL_OW 250
24614: PPUSH
24615: LD_VAR 0 1
24619: PPUSH
24620: CALL_OW 251
24624: PPUSH
24625: LD_VAR 0 4
24629: PPUSH
24630: CALL_OW 495
// end ; end ;
24634: LD_VAR 0 2
24638: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24639: LD_INT 0
24641: PPUSH
// end ;
24642: LD_VAR 0 4
24646: RET
// export function SOS_Command ( cmd ) ; begin
24647: LD_INT 0
24649: PPUSH
// end ;
24650: LD_VAR 0 2
24654: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
24655: LD_INT 0
24657: PPUSH
// end ;
24658: LD_VAR 0 6
24662: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
24663: LD_INT 0
24665: PPUSH
24666: PPUSH
// if not vehicle or not factory then
24667: LD_VAR 0 1
24671: NOT
24672: PUSH
24673: LD_VAR 0 2
24677: NOT
24678: OR
24679: IFFALSE 24683
// exit ;
24681: GO 24914
// if factoryWaypoints >= factory then
24683: LD_EXP 89
24687: PUSH
24688: LD_VAR 0 2
24692: GREATEREQUAL
24693: IFFALSE 24914
// if factoryWaypoints [ factory ] then
24695: LD_EXP 89
24699: PUSH
24700: LD_VAR 0 2
24704: ARRAY
24705: IFFALSE 24914
// begin if GetControl ( vehicle ) = control_manual then
24707: LD_VAR 0 1
24711: PPUSH
24712: CALL_OW 263
24716: PUSH
24717: LD_INT 1
24719: EQUAL
24720: IFFALSE 24801
// begin driver := IsDrivenBy ( vehicle ) ;
24722: LD_ADDR_VAR 0 4
24726: PUSH
24727: LD_VAR 0 1
24731: PPUSH
24732: CALL_OW 311
24736: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24737: LD_VAR 0 4
24741: PPUSH
24742: LD_EXP 89
24746: PUSH
24747: LD_VAR 0 2
24751: ARRAY
24752: PUSH
24753: LD_INT 3
24755: ARRAY
24756: PPUSH
24757: LD_EXP 89
24761: PUSH
24762: LD_VAR 0 2
24766: ARRAY
24767: PUSH
24768: LD_INT 4
24770: ARRAY
24771: PPUSH
24772: CALL_OW 171
// AddComExitVehicle ( driver ) ;
24776: LD_VAR 0 4
24780: PPUSH
24781: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
24785: LD_VAR 0 4
24789: PPUSH
24790: LD_VAR 0 2
24794: PPUSH
24795: CALL_OW 180
// end else
24799: GO 24914
// if GetControl ( vehicle ) = control_remote then
24801: LD_VAR 0 1
24805: PPUSH
24806: CALL_OW 263
24810: PUSH
24811: LD_INT 2
24813: EQUAL
24814: IFFALSE 24875
// begin wait ( 0 0$2 ) ;
24816: LD_INT 70
24818: PPUSH
24819: CALL_OW 67
// if Connect ( vehicle ) then
24823: LD_VAR 0 1
24827: PPUSH
24828: CALL 37579 0 1
24832: IFFALSE 24873
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24834: LD_VAR 0 1
24838: PPUSH
24839: LD_EXP 89
24843: PUSH
24844: LD_VAR 0 2
24848: ARRAY
24849: PUSH
24850: LD_INT 3
24852: ARRAY
24853: PPUSH
24854: LD_EXP 89
24858: PUSH
24859: LD_VAR 0 2
24863: ARRAY
24864: PUSH
24865: LD_INT 4
24867: ARRAY
24868: PPUSH
24869: CALL_OW 171
// end else
24873: GO 24914
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
24875: LD_VAR 0 1
24879: PPUSH
24880: LD_EXP 89
24884: PUSH
24885: LD_VAR 0 2
24889: ARRAY
24890: PUSH
24891: LD_INT 3
24893: ARRAY
24894: PPUSH
24895: LD_EXP 89
24899: PUSH
24900: LD_VAR 0 2
24904: ARRAY
24905: PUSH
24906: LD_INT 4
24908: ARRAY
24909: PPUSH
24910: CALL_OW 171
// end ; end ;
24914: LD_VAR 0 3
24918: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24919: LD_INT 0
24921: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24922: LD_VAR 0 1
24926: PUSH
24927: LD_INT 250
24929: EQUAL
24930: PUSH
24931: LD_VAR 0 2
24935: PPUSH
24936: CALL_OW 264
24940: PUSH
24941: LD_INT 81
24943: EQUAL
24944: AND
24945: IFFALSE 24966
// MinerPlaceMine ( unit , x , y ) ;
24947: LD_VAR 0 2
24951: PPUSH
24952: LD_VAR 0 4
24956: PPUSH
24957: LD_VAR 0 5
24961: PPUSH
24962: CALL 27790 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24966: LD_VAR 0 1
24970: PUSH
24971: LD_INT 251
24973: EQUAL
24974: PUSH
24975: LD_VAR 0 2
24979: PPUSH
24980: CALL_OW 264
24984: PUSH
24985: LD_INT 81
24987: EQUAL
24988: AND
24989: IFFALSE 25010
// MinerDetonateMine ( unit , x , y ) ;
24991: LD_VAR 0 2
24995: PPUSH
24996: LD_VAR 0 4
25000: PPUSH
25001: LD_VAR 0 5
25005: PPUSH
25006: CALL 28065 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
25010: LD_VAR 0 1
25014: PUSH
25015: LD_INT 252
25017: EQUAL
25018: PUSH
25019: LD_VAR 0 2
25023: PPUSH
25024: CALL_OW 264
25028: PUSH
25029: LD_INT 81
25031: EQUAL
25032: AND
25033: IFFALSE 25054
// MinerCreateMinefield ( unit , x , y ) ;
25035: LD_VAR 0 2
25039: PPUSH
25040: LD_VAR 0 4
25044: PPUSH
25045: LD_VAR 0 5
25049: PPUSH
25050: CALL 28482 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
25054: LD_VAR 0 1
25058: PUSH
25059: LD_INT 253
25061: EQUAL
25062: PUSH
25063: LD_VAR 0 2
25067: PPUSH
25068: CALL_OW 257
25072: PUSH
25073: LD_INT 5
25075: EQUAL
25076: AND
25077: IFFALSE 25098
// ComBinocular ( unit , x , y ) ;
25079: LD_VAR 0 2
25083: PPUSH
25084: LD_VAR 0 4
25088: PPUSH
25089: LD_VAR 0 5
25093: PPUSH
25094: CALL 28851 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25098: LD_VAR 0 1
25102: PUSH
25103: LD_INT 254
25105: EQUAL
25106: PUSH
25107: LD_VAR 0 2
25111: PPUSH
25112: CALL_OW 264
25116: PUSH
25117: LD_INT 99
25119: EQUAL
25120: AND
25121: PUSH
25122: LD_VAR 0 3
25126: PPUSH
25127: CALL_OW 263
25131: PUSH
25132: LD_INT 3
25134: EQUAL
25135: AND
25136: IFFALSE 25152
// HackDestroyVehicle ( unit , selectedUnit ) ;
25138: LD_VAR 0 2
25142: PPUSH
25143: LD_VAR 0 3
25147: PPUSH
25148: CALL 27154 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25152: LD_VAR 0 1
25156: PUSH
25157: LD_INT 255
25159: EQUAL
25160: PUSH
25161: LD_VAR 0 2
25165: PPUSH
25166: CALL_OW 264
25170: PUSH
25171: LD_INT 14
25173: PUSH
25174: LD_INT 53
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: IN
25181: AND
25182: PUSH
25183: LD_VAR 0 4
25187: PPUSH
25188: LD_VAR 0 5
25192: PPUSH
25193: CALL_OW 488
25197: AND
25198: IFFALSE 25222
// CutTreeXYR ( unit , x , y , 12 ) ;
25200: LD_VAR 0 2
25204: PPUSH
25205: LD_VAR 0 4
25209: PPUSH
25210: LD_VAR 0 5
25214: PPUSH
25215: LD_INT 12
25217: PPUSH
25218: CALL 25317 0 4
// if cmd = 256 then
25222: LD_VAR 0 1
25226: PUSH
25227: LD_INT 256
25229: EQUAL
25230: IFFALSE 25251
// SetFactoryWaypoint ( unit , x , y ) ;
25232: LD_VAR 0 2
25236: PPUSH
25237: LD_VAR 0 4
25241: PPUSH
25242: LD_VAR 0 5
25246: PPUSH
25247: CALL 23232 0 3
// if cmd = 257 then
25251: LD_VAR 0 1
25255: PUSH
25256: LD_INT 257
25258: EQUAL
25259: IFFALSE 25280
// SetWarehouseGatheringPoint ( unit , x , y ) ;
25261: LD_VAR 0 2
25265: PPUSH
25266: LD_VAR 0 4
25270: PPUSH
25271: LD_VAR 0 5
25275: PPUSH
25276: CALL 23594 0 3
// if cmd = 258 then
25280: LD_VAR 0 1
25284: PUSH
25285: LD_INT 258
25287: EQUAL
25288: IFFALSE 25312
// BurnTreeXYR ( unit , x , y , 8 ) ;
25290: LD_VAR 0 2
25294: PPUSH
25295: LD_VAR 0 4
25299: PPUSH
25300: LD_VAR 0 5
25304: PPUSH
25305: LD_INT 8
25307: PPUSH
25308: CALL 25711 0 4
// end ;
25312: LD_VAR 0 6
25316: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25317: LD_INT 0
25319: PPUSH
25320: PPUSH
25321: PPUSH
25322: PPUSH
25323: PPUSH
25324: PPUSH
25325: PPUSH
25326: PPUSH
25327: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
25328: LD_VAR 0 1
25332: PPUSH
25333: CALL_OW 302
25337: NOT
25338: PUSH
25339: LD_VAR 0 2
25343: PPUSH
25344: LD_VAR 0 3
25348: PPUSH
25349: CALL_OW 488
25353: NOT
25354: OR
25355: PUSH
25356: LD_VAR 0 4
25360: NOT
25361: OR
25362: IFFALSE 25366
// exit ;
25364: GO 25706
// list := [ ] ;
25366: LD_ADDR_VAR 0 13
25370: PUSH
25371: EMPTY
25372: ST_TO_ADDR
// if x - r < 0 then
25373: LD_VAR 0 2
25377: PUSH
25378: LD_VAR 0 4
25382: MINUS
25383: PUSH
25384: LD_INT 0
25386: LESS
25387: IFFALSE 25399
// min_x := 0 else
25389: LD_ADDR_VAR 0 7
25393: PUSH
25394: LD_INT 0
25396: ST_TO_ADDR
25397: GO 25415
// min_x := x - r ;
25399: LD_ADDR_VAR 0 7
25403: PUSH
25404: LD_VAR 0 2
25408: PUSH
25409: LD_VAR 0 4
25413: MINUS
25414: ST_TO_ADDR
// if y - r < 0 then
25415: LD_VAR 0 3
25419: PUSH
25420: LD_VAR 0 4
25424: MINUS
25425: PUSH
25426: LD_INT 0
25428: LESS
25429: IFFALSE 25441
// min_y := 0 else
25431: LD_ADDR_VAR 0 8
25435: PUSH
25436: LD_INT 0
25438: ST_TO_ADDR
25439: GO 25457
// min_y := y - r ;
25441: LD_ADDR_VAR 0 8
25445: PUSH
25446: LD_VAR 0 3
25450: PUSH
25451: LD_VAR 0 4
25455: MINUS
25456: ST_TO_ADDR
// max_x := x + r ;
25457: LD_ADDR_VAR 0 9
25461: PUSH
25462: LD_VAR 0 2
25466: PUSH
25467: LD_VAR 0 4
25471: PLUS
25472: ST_TO_ADDR
// max_y := y + r ;
25473: LD_ADDR_VAR 0 10
25477: PUSH
25478: LD_VAR 0 3
25482: PUSH
25483: LD_VAR 0 4
25487: PLUS
25488: ST_TO_ADDR
// for _x = min_x to max_x do
25489: LD_ADDR_VAR 0 11
25493: PUSH
25494: DOUBLE
25495: LD_VAR 0 7
25499: DEC
25500: ST_TO_ADDR
25501: LD_VAR 0 9
25505: PUSH
25506: FOR_TO
25507: IFFALSE 25624
// for _y = min_y to max_y do
25509: LD_ADDR_VAR 0 12
25513: PUSH
25514: DOUBLE
25515: LD_VAR 0 8
25519: DEC
25520: ST_TO_ADDR
25521: LD_VAR 0 10
25525: PUSH
25526: FOR_TO
25527: IFFALSE 25620
// begin if not ValidHex ( _x , _y ) then
25529: LD_VAR 0 11
25533: PPUSH
25534: LD_VAR 0 12
25538: PPUSH
25539: CALL_OW 488
25543: NOT
25544: IFFALSE 25548
// continue ;
25546: GO 25526
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25548: LD_VAR 0 11
25552: PPUSH
25553: LD_VAR 0 12
25557: PPUSH
25558: CALL_OW 351
25562: PUSH
25563: LD_VAR 0 11
25567: PPUSH
25568: LD_VAR 0 12
25572: PPUSH
25573: CALL_OW 554
25577: AND
25578: IFFALSE 25618
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25580: LD_ADDR_VAR 0 13
25584: PUSH
25585: LD_VAR 0 13
25589: PPUSH
25590: LD_VAR 0 13
25594: PUSH
25595: LD_INT 1
25597: PLUS
25598: PPUSH
25599: LD_VAR 0 11
25603: PUSH
25604: LD_VAR 0 12
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PPUSH
25613: CALL_OW 2
25617: ST_TO_ADDR
// end ;
25618: GO 25526
25620: POP
25621: POP
25622: GO 25506
25624: POP
25625: POP
// if not list then
25626: LD_VAR 0 13
25630: NOT
25631: IFFALSE 25635
// exit ;
25633: GO 25706
// for i in list do
25635: LD_ADDR_VAR 0 6
25639: PUSH
25640: LD_VAR 0 13
25644: PUSH
25645: FOR_IN
25646: IFFALSE 25704
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25648: LD_VAR 0 1
25652: PPUSH
25653: LD_STRING M
25655: PUSH
25656: LD_VAR 0 6
25660: PUSH
25661: LD_INT 1
25663: ARRAY
25664: PUSH
25665: LD_VAR 0 6
25669: PUSH
25670: LD_INT 2
25672: ARRAY
25673: PUSH
25674: LD_INT 0
25676: PUSH
25677: LD_INT 0
25679: PUSH
25680: LD_INT 0
25682: PUSH
25683: LD_INT 0
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: PUSH
25695: EMPTY
25696: LIST
25697: PPUSH
25698: CALL_OW 447
25702: GO 25645
25704: POP
25705: POP
// end ;
25706: LD_VAR 0 5
25710: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25711: LD_INT 0
25713: PPUSH
25714: PPUSH
25715: PPUSH
25716: PPUSH
25717: PPUSH
25718: PPUSH
25719: PPUSH
25720: PPUSH
25721: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
25722: LD_VAR 0 1
25726: PPUSH
25727: CALL_OW 302
25731: NOT
25732: PUSH
25733: LD_VAR 0 2
25737: PPUSH
25738: LD_VAR 0 3
25742: PPUSH
25743: CALL_OW 488
25747: NOT
25748: OR
25749: PUSH
25750: LD_VAR 0 4
25754: NOT
25755: OR
25756: IFFALSE 25760
// exit ;
25758: GO 26108
// list := [ ] ;
25760: LD_ADDR_VAR 0 13
25764: PUSH
25765: EMPTY
25766: ST_TO_ADDR
// if x - r < 0 then
25767: LD_VAR 0 2
25771: PUSH
25772: LD_VAR 0 4
25776: MINUS
25777: PUSH
25778: LD_INT 0
25780: LESS
25781: IFFALSE 25793
// min_x := 0 else
25783: LD_ADDR_VAR 0 7
25787: PUSH
25788: LD_INT 0
25790: ST_TO_ADDR
25791: GO 25809
// min_x := x - r ;
25793: LD_ADDR_VAR 0 7
25797: PUSH
25798: LD_VAR 0 2
25802: PUSH
25803: LD_VAR 0 4
25807: MINUS
25808: ST_TO_ADDR
// if y - r < 0 then
25809: LD_VAR 0 3
25813: PUSH
25814: LD_VAR 0 4
25818: MINUS
25819: PUSH
25820: LD_INT 0
25822: LESS
25823: IFFALSE 25835
// min_y := 0 else
25825: LD_ADDR_VAR 0 8
25829: PUSH
25830: LD_INT 0
25832: ST_TO_ADDR
25833: GO 25851
// min_y := y - r ;
25835: LD_ADDR_VAR 0 8
25839: PUSH
25840: LD_VAR 0 3
25844: PUSH
25845: LD_VAR 0 4
25849: MINUS
25850: ST_TO_ADDR
// max_x := x + r ;
25851: LD_ADDR_VAR 0 9
25855: PUSH
25856: LD_VAR 0 2
25860: PUSH
25861: LD_VAR 0 4
25865: PLUS
25866: ST_TO_ADDR
// max_y := y + r ;
25867: LD_ADDR_VAR 0 10
25871: PUSH
25872: LD_VAR 0 3
25876: PUSH
25877: LD_VAR 0 4
25881: PLUS
25882: ST_TO_ADDR
// for _x = min_x to max_x do
25883: LD_ADDR_VAR 0 11
25887: PUSH
25888: DOUBLE
25889: LD_VAR 0 7
25893: DEC
25894: ST_TO_ADDR
25895: LD_VAR 0 9
25899: PUSH
25900: FOR_TO
25901: IFFALSE 26018
// for _y = min_y to max_y do
25903: LD_ADDR_VAR 0 12
25907: PUSH
25908: DOUBLE
25909: LD_VAR 0 8
25913: DEC
25914: ST_TO_ADDR
25915: LD_VAR 0 10
25919: PUSH
25920: FOR_TO
25921: IFFALSE 26014
// begin if not ValidHex ( _x , _y ) then
25923: LD_VAR 0 11
25927: PPUSH
25928: LD_VAR 0 12
25932: PPUSH
25933: CALL_OW 488
25937: NOT
25938: IFFALSE 25942
// continue ;
25940: GO 25920
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25942: LD_VAR 0 11
25946: PPUSH
25947: LD_VAR 0 12
25951: PPUSH
25952: CALL_OW 351
25956: PUSH
25957: LD_VAR 0 11
25961: PPUSH
25962: LD_VAR 0 12
25966: PPUSH
25967: CALL_OW 554
25971: AND
25972: IFFALSE 26012
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25974: LD_ADDR_VAR 0 13
25978: PUSH
25979: LD_VAR 0 13
25983: PPUSH
25984: LD_VAR 0 13
25988: PUSH
25989: LD_INT 1
25991: PLUS
25992: PPUSH
25993: LD_VAR 0 11
25997: PUSH
25998: LD_VAR 0 12
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PPUSH
26007: CALL_OW 2
26011: ST_TO_ADDR
// end ;
26012: GO 25920
26014: POP
26015: POP
26016: GO 25900
26018: POP
26019: POP
// if not list then
26020: LD_VAR 0 13
26024: NOT
26025: IFFALSE 26029
// exit ;
26027: GO 26108
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
26029: LD_ADDR_VAR 0 13
26033: PUSH
26034: LD_VAR 0 1
26038: PPUSH
26039: LD_VAR 0 13
26043: PPUSH
26044: LD_INT 1
26046: PPUSH
26047: LD_INT 1
26049: PPUSH
26050: CALL 34721 0 4
26054: ST_TO_ADDR
// ComStop ( flame ) ;
26055: LD_VAR 0 1
26059: PPUSH
26060: CALL_OW 141
// for i in list do
26064: LD_ADDR_VAR 0 6
26068: PUSH
26069: LD_VAR 0 13
26073: PUSH
26074: FOR_IN
26075: IFFALSE 26106
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
26077: LD_VAR 0 1
26081: PPUSH
26082: LD_VAR 0 6
26086: PUSH
26087: LD_INT 1
26089: ARRAY
26090: PPUSH
26091: LD_VAR 0 6
26095: PUSH
26096: LD_INT 2
26098: ARRAY
26099: PPUSH
26100: CALL_OW 176
26104: GO 26074
26106: POP
26107: POP
// end ;
26108: LD_VAR 0 5
26112: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26113: LD_EXP 92
26117: NOT
26118: IFFALSE 26168
26120: GO 26122
26122: DISABLE
// begin initHack := true ;
26123: LD_ADDR_EXP 92
26127: PUSH
26128: LD_INT 1
26130: ST_TO_ADDR
// hackTanks := [ ] ;
26131: LD_ADDR_EXP 93
26135: PUSH
26136: EMPTY
26137: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26138: LD_ADDR_EXP 94
26142: PUSH
26143: EMPTY
26144: ST_TO_ADDR
// hackLimit := 3 ;
26145: LD_ADDR_EXP 95
26149: PUSH
26150: LD_INT 3
26152: ST_TO_ADDR
// hackDist := 12 ;
26153: LD_ADDR_EXP 96
26157: PUSH
26158: LD_INT 12
26160: ST_TO_ADDR
// hackCounter := [ ] ;
26161: LD_ADDR_EXP 97
26165: PUSH
26166: EMPTY
26167: ST_TO_ADDR
// end ;
26168: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26169: LD_EXP 92
26173: PUSH
26174: LD_INT 34
26176: PUSH
26177: LD_INT 99
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PPUSH
26184: CALL_OW 69
26188: AND
26189: IFFALSE 26442
26191: GO 26193
26193: DISABLE
26194: LD_INT 0
26196: PPUSH
26197: PPUSH
// begin enable ;
26198: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26199: LD_ADDR_VAR 0 1
26203: PUSH
26204: LD_INT 34
26206: PUSH
26207: LD_INT 99
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PPUSH
26214: CALL_OW 69
26218: PUSH
26219: FOR_IN
26220: IFFALSE 26440
// begin if not i in hackTanks then
26222: LD_VAR 0 1
26226: PUSH
26227: LD_EXP 93
26231: IN
26232: NOT
26233: IFFALSE 26316
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26235: LD_ADDR_EXP 93
26239: PUSH
26240: LD_EXP 93
26244: PPUSH
26245: LD_EXP 93
26249: PUSH
26250: LD_INT 1
26252: PLUS
26253: PPUSH
26254: LD_VAR 0 1
26258: PPUSH
26259: CALL_OW 1
26263: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26264: LD_ADDR_EXP 94
26268: PUSH
26269: LD_EXP 94
26273: PPUSH
26274: LD_EXP 94
26278: PUSH
26279: LD_INT 1
26281: PLUS
26282: PPUSH
26283: EMPTY
26284: PPUSH
26285: CALL_OW 1
26289: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26290: LD_ADDR_EXP 97
26294: PUSH
26295: LD_EXP 97
26299: PPUSH
26300: LD_EXP 97
26304: PUSH
26305: LD_INT 1
26307: PLUS
26308: PPUSH
26309: EMPTY
26310: PPUSH
26311: CALL_OW 1
26315: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26316: LD_VAR 0 1
26320: PPUSH
26321: CALL_OW 302
26325: NOT
26326: IFFALSE 26339
// begin HackUnlinkAll ( i ) ;
26328: LD_VAR 0 1
26332: PPUSH
26333: CALL 26445 0 1
// continue ;
26337: GO 26219
// end ; HackCheckCapturedStatus ( i ) ;
26339: LD_VAR 0 1
26343: PPUSH
26344: CALL 26888 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26348: LD_ADDR_VAR 0 2
26352: PUSH
26353: LD_INT 81
26355: PUSH
26356: LD_VAR 0 1
26360: PPUSH
26361: CALL_OW 255
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 33
26372: PUSH
26373: LD_INT 3
26375: PUSH
26376: EMPTY
26377: LIST
26378: LIST
26379: PUSH
26380: LD_INT 91
26382: PUSH
26383: LD_VAR 0 1
26387: PUSH
26388: LD_EXP 96
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: LIST
26397: PUSH
26398: LD_INT 50
26400: PUSH
26401: EMPTY
26402: LIST
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: PPUSH
26410: CALL_OW 69
26414: ST_TO_ADDR
// if not tmp then
26415: LD_VAR 0 2
26419: NOT
26420: IFFALSE 26424
// continue ;
26422: GO 26219
// HackLink ( i , tmp ) ;
26424: LD_VAR 0 1
26428: PPUSH
26429: LD_VAR 0 2
26433: PPUSH
26434: CALL 26581 0 2
// end ;
26438: GO 26219
26440: POP
26441: POP
// end ;
26442: PPOPN 2
26444: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26445: LD_INT 0
26447: PPUSH
26448: PPUSH
26449: PPUSH
// if not hack in hackTanks then
26450: LD_VAR 0 1
26454: PUSH
26455: LD_EXP 93
26459: IN
26460: NOT
26461: IFFALSE 26465
// exit ;
26463: GO 26576
// index := GetElementIndex ( hackTanks , hack ) ;
26465: LD_ADDR_VAR 0 4
26469: PUSH
26470: LD_EXP 93
26474: PPUSH
26475: LD_VAR 0 1
26479: PPUSH
26480: CALL 34018 0 2
26484: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26485: LD_EXP 94
26489: PUSH
26490: LD_VAR 0 4
26494: ARRAY
26495: IFFALSE 26576
// begin for i in hackTanksCaptured [ index ] do
26497: LD_ADDR_VAR 0 3
26501: PUSH
26502: LD_EXP 94
26506: PUSH
26507: LD_VAR 0 4
26511: ARRAY
26512: PUSH
26513: FOR_IN
26514: IFFALSE 26540
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26516: LD_VAR 0 3
26520: PUSH
26521: LD_INT 1
26523: ARRAY
26524: PPUSH
26525: LD_VAR 0 3
26529: PUSH
26530: LD_INT 2
26532: ARRAY
26533: PPUSH
26534: CALL_OW 235
26538: GO 26513
26540: POP
26541: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26542: LD_ADDR_EXP 94
26546: PUSH
26547: LD_EXP 94
26551: PPUSH
26552: LD_VAR 0 4
26556: PPUSH
26557: EMPTY
26558: PPUSH
26559: CALL_OW 1
26563: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26564: LD_VAR 0 1
26568: PPUSH
26569: LD_INT 0
26571: PPUSH
26572: CALL_OW 505
// end ; end ;
26576: LD_VAR 0 2
26580: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26581: LD_INT 0
26583: PPUSH
26584: PPUSH
26585: PPUSH
// if not hack in hackTanks or not vehicles then
26586: LD_VAR 0 1
26590: PUSH
26591: LD_EXP 93
26595: IN
26596: NOT
26597: PUSH
26598: LD_VAR 0 2
26602: NOT
26603: OR
26604: IFFALSE 26608
// exit ;
26606: GO 26883
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26608: LD_ADDR_VAR 0 2
26612: PUSH
26613: LD_VAR 0 1
26617: PPUSH
26618: LD_VAR 0 2
26622: PPUSH
26623: LD_INT 1
26625: PPUSH
26626: LD_INT 1
26628: PPUSH
26629: CALL 34668 0 4
26633: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26634: LD_ADDR_VAR 0 5
26638: PUSH
26639: LD_EXP 93
26643: PPUSH
26644: LD_VAR 0 1
26648: PPUSH
26649: CALL 34018 0 2
26653: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26654: LD_EXP 94
26658: PUSH
26659: LD_VAR 0 5
26663: ARRAY
26664: PUSH
26665: LD_EXP 95
26669: LESS
26670: IFFALSE 26859
// begin for i := 1 to vehicles do
26672: LD_ADDR_VAR 0 4
26676: PUSH
26677: DOUBLE
26678: LD_INT 1
26680: DEC
26681: ST_TO_ADDR
26682: LD_VAR 0 2
26686: PUSH
26687: FOR_TO
26688: IFFALSE 26857
// begin if hackTanksCaptured [ index ] = hackLimit then
26690: LD_EXP 94
26694: PUSH
26695: LD_VAR 0 5
26699: ARRAY
26700: PUSH
26701: LD_EXP 95
26705: EQUAL
26706: IFFALSE 26710
// break ;
26708: GO 26857
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26710: LD_ADDR_EXP 97
26714: PUSH
26715: LD_EXP 97
26719: PPUSH
26720: LD_VAR 0 5
26724: PPUSH
26725: LD_EXP 97
26729: PUSH
26730: LD_VAR 0 5
26734: ARRAY
26735: PUSH
26736: LD_INT 1
26738: PLUS
26739: PPUSH
26740: CALL_OW 1
26744: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26745: LD_ADDR_EXP 94
26749: PUSH
26750: LD_EXP 94
26754: PPUSH
26755: LD_VAR 0 5
26759: PUSH
26760: LD_EXP 94
26764: PUSH
26765: LD_VAR 0 5
26769: ARRAY
26770: PUSH
26771: LD_INT 1
26773: PLUS
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PPUSH
26779: LD_VAR 0 2
26783: PUSH
26784: LD_VAR 0 4
26788: ARRAY
26789: PUSH
26790: LD_VAR 0 2
26794: PUSH
26795: LD_VAR 0 4
26799: ARRAY
26800: PPUSH
26801: CALL_OW 255
26805: PUSH
26806: EMPTY
26807: LIST
26808: LIST
26809: PPUSH
26810: CALL 34233 0 3
26814: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26815: LD_VAR 0 2
26819: PUSH
26820: LD_VAR 0 4
26824: ARRAY
26825: PPUSH
26826: LD_VAR 0 1
26830: PPUSH
26831: CALL_OW 255
26835: PPUSH
26836: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26840: LD_VAR 0 2
26844: PUSH
26845: LD_VAR 0 4
26849: ARRAY
26850: PPUSH
26851: CALL_OW 141
// end ;
26855: GO 26687
26857: POP
26858: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26859: LD_VAR 0 1
26863: PPUSH
26864: LD_EXP 94
26868: PUSH
26869: LD_VAR 0 5
26873: ARRAY
26874: PUSH
26875: LD_INT 0
26877: PLUS
26878: PPUSH
26879: CALL_OW 505
// end ;
26883: LD_VAR 0 3
26887: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26888: LD_INT 0
26890: PPUSH
26891: PPUSH
26892: PPUSH
26893: PPUSH
// if not hack in hackTanks then
26894: LD_VAR 0 1
26898: PUSH
26899: LD_EXP 93
26903: IN
26904: NOT
26905: IFFALSE 26909
// exit ;
26907: GO 27149
// index := GetElementIndex ( hackTanks , hack ) ;
26909: LD_ADDR_VAR 0 4
26913: PUSH
26914: LD_EXP 93
26918: PPUSH
26919: LD_VAR 0 1
26923: PPUSH
26924: CALL 34018 0 2
26928: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26929: LD_ADDR_VAR 0 3
26933: PUSH
26934: DOUBLE
26935: LD_EXP 94
26939: PUSH
26940: LD_VAR 0 4
26944: ARRAY
26945: INC
26946: ST_TO_ADDR
26947: LD_INT 1
26949: PUSH
26950: FOR_DOWNTO
26951: IFFALSE 27123
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26953: LD_ADDR_VAR 0 5
26957: PUSH
26958: LD_EXP 94
26962: PUSH
26963: LD_VAR 0 4
26967: ARRAY
26968: PUSH
26969: LD_VAR 0 3
26973: ARRAY
26974: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26975: LD_VAR 0 5
26979: PUSH
26980: LD_INT 1
26982: ARRAY
26983: PPUSH
26984: CALL_OW 302
26988: NOT
26989: PUSH
26990: LD_VAR 0 5
26994: PUSH
26995: LD_INT 1
26997: ARRAY
26998: PPUSH
26999: CALL_OW 255
27003: PUSH
27004: LD_VAR 0 1
27008: PPUSH
27009: CALL_OW 255
27013: NONEQUAL
27014: OR
27015: IFFALSE 27121
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27017: LD_VAR 0 5
27021: PUSH
27022: LD_INT 1
27024: ARRAY
27025: PPUSH
27026: CALL_OW 305
27030: PUSH
27031: LD_VAR 0 5
27035: PUSH
27036: LD_INT 1
27038: ARRAY
27039: PPUSH
27040: CALL_OW 255
27044: PUSH
27045: LD_VAR 0 1
27049: PPUSH
27050: CALL_OW 255
27054: EQUAL
27055: AND
27056: IFFALSE 27080
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27058: LD_VAR 0 5
27062: PUSH
27063: LD_INT 1
27065: ARRAY
27066: PPUSH
27067: LD_VAR 0 5
27071: PUSH
27072: LD_INT 2
27074: ARRAY
27075: PPUSH
27076: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27080: LD_ADDR_EXP 94
27084: PUSH
27085: LD_EXP 94
27089: PPUSH
27090: LD_VAR 0 4
27094: PPUSH
27095: LD_EXP 94
27099: PUSH
27100: LD_VAR 0 4
27104: ARRAY
27105: PPUSH
27106: LD_VAR 0 3
27110: PPUSH
27111: CALL_OW 3
27115: PPUSH
27116: CALL_OW 1
27120: ST_TO_ADDR
// end ; end ;
27121: GO 26950
27123: POP
27124: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27125: LD_VAR 0 1
27129: PPUSH
27130: LD_EXP 94
27134: PUSH
27135: LD_VAR 0 4
27139: ARRAY
27140: PUSH
27141: LD_INT 0
27143: PLUS
27144: PPUSH
27145: CALL_OW 505
// end ;
27149: LD_VAR 0 2
27153: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27154: LD_INT 0
27156: PPUSH
27157: PPUSH
27158: PPUSH
27159: PPUSH
// if not hack in hackTanks then
27160: LD_VAR 0 1
27164: PUSH
27165: LD_EXP 93
27169: IN
27170: NOT
27171: IFFALSE 27175
// exit ;
27173: GO 27260
// index := GetElementIndex ( hackTanks , hack ) ;
27175: LD_ADDR_VAR 0 5
27179: PUSH
27180: LD_EXP 93
27184: PPUSH
27185: LD_VAR 0 1
27189: PPUSH
27190: CALL 34018 0 2
27194: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27195: LD_ADDR_VAR 0 4
27199: PUSH
27200: DOUBLE
27201: LD_INT 1
27203: DEC
27204: ST_TO_ADDR
27205: LD_EXP 94
27209: PUSH
27210: LD_VAR 0 5
27214: ARRAY
27215: PUSH
27216: FOR_TO
27217: IFFALSE 27258
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27219: LD_EXP 94
27223: PUSH
27224: LD_VAR 0 5
27228: ARRAY
27229: PUSH
27230: LD_VAR 0 4
27234: ARRAY
27235: PUSH
27236: LD_INT 1
27238: ARRAY
27239: PUSH
27240: LD_VAR 0 2
27244: EQUAL
27245: IFFALSE 27256
// KillUnit ( vehicle ) ;
27247: LD_VAR 0 2
27251: PPUSH
27252: CALL_OW 66
27256: GO 27216
27258: POP
27259: POP
// end ;
27260: LD_VAR 0 3
27264: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27265: LD_EXP 98
27269: NOT
27270: IFFALSE 27305
27272: GO 27274
27274: DISABLE
// begin initMiner := true ;
27275: LD_ADDR_EXP 98
27279: PUSH
27280: LD_INT 1
27282: ST_TO_ADDR
// minersList := [ ] ;
27283: LD_ADDR_EXP 99
27287: PUSH
27288: EMPTY
27289: ST_TO_ADDR
// minerMinesList := [ ] ;
27290: LD_ADDR_EXP 100
27294: PUSH
27295: EMPTY
27296: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27297: LD_ADDR_EXP 101
27301: PUSH
27302: LD_INT 5
27304: ST_TO_ADDR
// end ;
27305: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27306: LD_EXP 98
27310: PUSH
27311: LD_INT 34
27313: PUSH
27314: LD_INT 81
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PPUSH
27321: CALL_OW 69
27325: AND
27326: IFFALSE 27787
27328: GO 27330
27330: DISABLE
27331: LD_INT 0
27333: PPUSH
27334: PPUSH
27335: PPUSH
27336: PPUSH
// begin enable ;
27337: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27338: LD_ADDR_VAR 0 1
27342: PUSH
27343: LD_INT 34
27345: PUSH
27346: LD_INT 81
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PPUSH
27353: CALL_OW 69
27357: PUSH
27358: FOR_IN
27359: IFFALSE 27431
// begin if not i in minersList then
27361: LD_VAR 0 1
27365: PUSH
27366: LD_EXP 99
27370: IN
27371: NOT
27372: IFFALSE 27429
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
27374: LD_ADDR_EXP 99
27378: PUSH
27379: LD_EXP 99
27383: PPUSH
27384: LD_EXP 99
27388: PUSH
27389: LD_INT 1
27391: PLUS
27392: PPUSH
27393: LD_VAR 0 1
27397: PPUSH
27398: CALL_OW 1
27402: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
27403: LD_ADDR_EXP 100
27407: PUSH
27408: LD_EXP 100
27412: PPUSH
27413: LD_EXP 100
27417: PUSH
27418: LD_INT 1
27420: PLUS
27421: PPUSH
27422: EMPTY
27423: PPUSH
27424: CALL_OW 1
27428: ST_TO_ADDR
// end end ;
27429: GO 27358
27431: POP
27432: POP
// for i := minerMinesList downto 1 do
27433: LD_ADDR_VAR 0 1
27437: PUSH
27438: DOUBLE
27439: LD_EXP 100
27443: INC
27444: ST_TO_ADDR
27445: LD_INT 1
27447: PUSH
27448: FOR_DOWNTO
27449: IFFALSE 27785
// begin if IsLive ( minersList [ i ] ) then
27451: LD_EXP 99
27455: PUSH
27456: LD_VAR 0 1
27460: ARRAY
27461: PPUSH
27462: CALL_OW 300
27466: IFFALSE 27494
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
27468: LD_EXP 99
27472: PUSH
27473: LD_VAR 0 1
27477: ARRAY
27478: PPUSH
27479: LD_EXP 100
27483: PUSH
27484: LD_VAR 0 1
27488: ARRAY
27489: PPUSH
27490: CALL_OW 505
// if not minerMinesList [ i ] then
27494: LD_EXP 100
27498: PUSH
27499: LD_VAR 0 1
27503: ARRAY
27504: NOT
27505: IFFALSE 27509
// continue ;
27507: GO 27448
// for j := minerMinesList [ i ] downto 1 do
27509: LD_ADDR_VAR 0 2
27513: PUSH
27514: DOUBLE
27515: LD_EXP 100
27519: PUSH
27520: LD_VAR 0 1
27524: ARRAY
27525: INC
27526: ST_TO_ADDR
27527: LD_INT 1
27529: PUSH
27530: FOR_DOWNTO
27531: IFFALSE 27781
// begin side := GetSide ( minersList [ i ] ) ;
27533: LD_ADDR_VAR 0 3
27537: PUSH
27538: LD_EXP 99
27542: PUSH
27543: LD_VAR 0 1
27547: ARRAY
27548: PPUSH
27549: CALL_OW 255
27553: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
27554: LD_ADDR_VAR 0 4
27558: PUSH
27559: LD_EXP 100
27563: PUSH
27564: LD_VAR 0 1
27568: ARRAY
27569: PUSH
27570: LD_VAR 0 2
27574: ARRAY
27575: PUSH
27576: LD_INT 1
27578: ARRAY
27579: PPUSH
27580: LD_EXP 100
27584: PUSH
27585: LD_VAR 0 1
27589: ARRAY
27590: PUSH
27591: LD_VAR 0 2
27595: ARRAY
27596: PUSH
27597: LD_INT 2
27599: ARRAY
27600: PPUSH
27601: CALL_OW 428
27605: ST_TO_ADDR
// if not tmp then
27606: LD_VAR 0 4
27610: NOT
27611: IFFALSE 27615
// continue ;
27613: GO 27530
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
27615: LD_VAR 0 4
27619: PUSH
27620: LD_INT 81
27622: PUSH
27623: LD_VAR 0 3
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PPUSH
27632: CALL_OW 69
27636: IN
27637: PUSH
27638: LD_EXP 100
27642: PUSH
27643: LD_VAR 0 1
27647: ARRAY
27648: PUSH
27649: LD_VAR 0 2
27653: ARRAY
27654: PUSH
27655: LD_INT 1
27657: ARRAY
27658: PPUSH
27659: LD_EXP 100
27663: PUSH
27664: LD_VAR 0 1
27668: ARRAY
27669: PUSH
27670: LD_VAR 0 2
27674: ARRAY
27675: PUSH
27676: LD_INT 2
27678: ARRAY
27679: PPUSH
27680: CALL_OW 458
27684: AND
27685: IFFALSE 27779
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27687: LD_EXP 100
27691: PUSH
27692: LD_VAR 0 1
27696: ARRAY
27697: PUSH
27698: LD_VAR 0 2
27702: ARRAY
27703: PUSH
27704: LD_INT 1
27706: ARRAY
27707: PPUSH
27708: LD_EXP 100
27712: PUSH
27713: LD_VAR 0 1
27717: ARRAY
27718: PUSH
27719: LD_VAR 0 2
27723: ARRAY
27724: PUSH
27725: LD_INT 2
27727: ARRAY
27728: PPUSH
27729: LD_VAR 0 3
27733: PPUSH
27734: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27738: LD_ADDR_EXP 100
27742: PUSH
27743: LD_EXP 100
27747: PPUSH
27748: LD_VAR 0 1
27752: PPUSH
27753: LD_EXP 100
27757: PUSH
27758: LD_VAR 0 1
27762: ARRAY
27763: PPUSH
27764: LD_VAR 0 2
27768: PPUSH
27769: CALL_OW 3
27773: PPUSH
27774: CALL_OW 1
27778: ST_TO_ADDR
// end ; end ;
27779: GO 27530
27781: POP
27782: POP
// end ;
27783: GO 27448
27785: POP
27786: POP
// end ;
27787: PPOPN 4
27789: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27790: LD_INT 0
27792: PPUSH
27793: PPUSH
// result := false ;
27794: LD_ADDR_VAR 0 4
27798: PUSH
27799: LD_INT 0
27801: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27802: LD_VAR 0 1
27806: PPUSH
27807: CALL_OW 264
27811: PUSH
27812: LD_INT 81
27814: EQUAL
27815: NOT
27816: IFFALSE 27820
// exit ;
27818: GO 28060
// index := GetElementIndex ( minersList , unit ) ;
27820: LD_ADDR_VAR 0 5
27824: PUSH
27825: LD_EXP 99
27829: PPUSH
27830: LD_VAR 0 1
27834: PPUSH
27835: CALL 34018 0 2
27839: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27840: LD_EXP 100
27844: PUSH
27845: LD_VAR 0 5
27849: ARRAY
27850: PUSH
27851: LD_EXP 101
27855: GREATEREQUAL
27856: IFFALSE 27860
// exit ;
27858: GO 28060
// ComMoveXY ( unit , x , y ) ;
27860: LD_VAR 0 1
27864: PPUSH
27865: LD_VAR 0 2
27869: PPUSH
27870: LD_VAR 0 3
27874: PPUSH
27875: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27879: LD_INT 35
27881: PPUSH
27882: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27886: LD_VAR 0 1
27890: PPUSH
27891: LD_VAR 0 2
27895: PPUSH
27896: LD_VAR 0 3
27900: PPUSH
27901: CALL 65770 0 3
27905: NOT
27906: PUSH
27907: LD_VAR 0 1
27911: PPUSH
27912: CALL_OW 314
27916: AND
27917: IFFALSE 27921
// exit ;
27919: GO 28060
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27921: LD_VAR 0 2
27925: PPUSH
27926: LD_VAR 0 3
27930: PPUSH
27931: CALL_OW 428
27935: PUSH
27936: LD_VAR 0 1
27940: EQUAL
27941: PUSH
27942: LD_VAR 0 1
27946: PPUSH
27947: CALL_OW 314
27951: NOT
27952: AND
27953: IFFALSE 27879
// PlaySoundXY ( x , y , PlantMine ) ;
27955: LD_VAR 0 2
27959: PPUSH
27960: LD_VAR 0 3
27964: PPUSH
27965: LD_STRING PlantMine
27967: PPUSH
27968: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27972: LD_VAR 0 2
27976: PPUSH
27977: LD_VAR 0 3
27981: PPUSH
27982: LD_VAR 0 1
27986: PPUSH
27987: CALL_OW 255
27991: PPUSH
27992: LD_INT 0
27994: PPUSH
27995: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27999: LD_ADDR_EXP 100
28003: PUSH
28004: LD_EXP 100
28008: PPUSH
28009: LD_VAR 0 5
28013: PUSH
28014: LD_EXP 100
28018: PUSH
28019: LD_VAR 0 5
28023: ARRAY
28024: PUSH
28025: LD_INT 1
28027: PLUS
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PPUSH
28033: LD_VAR 0 2
28037: PUSH
28038: LD_VAR 0 3
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: PPUSH
28047: CALL 34233 0 3
28051: ST_TO_ADDR
// result := true ;
28052: LD_ADDR_VAR 0 4
28056: PUSH
28057: LD_INT 1
28059: ST_TO_ADDR
// end ;
28060: LD_VAR 0 4
28064: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28065: LD_INT 0
28067: PPUSH
28068: PPUSH
28069: PPUSH
// if not unit in minersList then
28070: LD_VAR 0 1
28074: PUSH
28075: LD_EXP 99
28079: IN
28080: NOT
28081: IFFALSE 28085
// exit ;
28083: GO 28477
// index := GetElementIndex ( minersList , unit ) ;
28085: LD_ADDR_VAR 0 6
28089: PUSH
28090: LD_EXP 99
28094: PPUSH
28095: LD_VAR 0 1
28099: PPUSH
28100: CALL 34018 0 2
28104: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28105: LD_ADDR_VAR 0 5
28109: PUSH
28110: DOUBLE
28111: LD_EXP 100
28115: PUSH
28116: LD_VAR 0 6
28120: ARRAY
28121: INC
28122: ST_TO_ADDR
28123: LD_INT 1
28125: PUSH
28126: FOR_DOWNTO
28127: IFFALSE 28288
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28129: LD_EXP 100
28133: PUSH
28134: LD_VAR 0 6
28138: ARRAY
28139: PUSH
28140: LD_VAR 0 5
28144: ARRAY
28145: PUSH
28146: LD_INT 1
28148: ARRAY
28149: PUSH
28150: LD_VAR 0 2
28154: EQUAL
28155: PUSH
28156: LD_EXP 100
28160: PUSH
28161: LD_VAR 0 6
28165: ARRAY
28166: PUSH
28167: LD_VAR 0 5
28171: ARRAY
28172: PUSH
28173: LD_INT 2
28175: ARRAY
28176: PUSH
28177: LD_VAR 0 3
28181: EQUAL
28182: AND
28183: IFFALSE 28286
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28185: LD_EXP 100
28189: PUSH
28190: LD_VAR 0 6
28194: ARRAY
28195: PUSH
28196: LD_VAR 0 5
28200: ARRAY
28201: PUSH
28202: LD_INT 1
28204: ARRAY
28205: PPUSH
28206: LD_EXP 100
28210: PUSH
28211: LD_VAR 0 6
28215: ARRAY
28216: PUSH
28217: LD_VAR 0 5
28221: ARRAY
28222: PUSH
28223: LD_INT 2
28225: ARRAY
28226: PPUSH
28227: LD_VAR 0 1
28231: PPUSH
28232: CALL_OW 255
28236: PPUSH
28237: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28241: LD_ADDR_EXP 100
28245: PUSH
28246: LD_EXP 100
28250: PPUSH
28251: LD_VAR 0 6
28255: PPUSH
28256: LD_EXP 100
28260: PUSH
28261: LD_VAR 0 6
28265: ARRAY
28266: PPUSH
28267: LD_VAR 0 5
28271: PPUSH
28272: CALL_OW 3
28276: PPUSH
28277: CALL_OW 1
28281: ST_TO_ADDR
// exit ;
28282: POP
28283: POP
28284: GO 28477
// end ; end ;
28286: GO 28126
28288: POP
28289: POP
// for i := minerMinesList [ index ] downto 1 do
28290: LD_ADDR_VAR 0 5
28294: PUSH
28295: DOUBLE
28296: LD_EXP 100
28300: PUSH
28301: LD_VAR 0 6
28305: ARRAY
28306: INC
28307: ST_TO_ADDR
28308: LD_INT 1
28310: PUSH
28311: FOR_DOWNTO
28312: IFFALSE 28475
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28314: LD_EXP 100
28318: PUSH
28319: LD_VAR 0 6
28323: ARRAY
28324: PUSH
28325: LD_VAR 0 5
28329: ARRAY
28330: PUSH
28331: LD_INT 1
28333: ARRAY
28334: PPUSH
28335: LD_EXP 100
28339: PUSH
28340: LD_VAR 0 6
28344: ARRAY
28345: PUSH
28346: LD_VAR 0 5
28350: ARRAY
28351: PUSH
28352: LD_INT 2
28354: ARRAY
28355: PPUSH
28356: LD_VAR 0 2
28360: PPUSH
28361: LD_VAR 0 3
28365: PPUSH
28366: CALL_OW 298
28370: PUSH
28371: LD_INT 6
28373: LESS
28374: IFFALSE 28473
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28376: LD_EXP 100
28380: PUSH
28381: LD_VAR 0 6
28385: ARRAY
28386: PUSH
28387: LD_VAR 0 5
28391: ARRAY
28392: PUSH
28393: LD_INT 1
28395: ARRAY
28396: PPUSH
28397: LD_EXP 100
28401: PUSH
28402: LD_VAR 0 6
28406: ARRAY
28407: PUSH
28408: LD_VAR 0 5
28412: ARRAY
28413: PUSH
28414: LD_INT 2
28416: ARRAY
28417: PPUSH
28418: LD_VAR 0 1
28422: PPUSH
28423: CALL_OW 255
28427: PPUSH
28428: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28432: LD_ADDR_EXP 100
28436: PUSH
28437: LD_EXP 100
28441: PPUSH
28442: LD_VAR 0 6
28446: PPUSH
28447: LD_EXP 100
28451: PUSH
28452: LD_VAR 0 6
28456: ARRAY
28457: PPUSH
28458: LD_VAR 0 5
28462: PPUSH
28463: CALL_OW 3
28467: PPUSH
28468: CALL_OW 1
28472: ST_TO_ADDR
// end ; end ;
28473: GO 28311
28475: POP
28476: POP
// end ;
28477: LD_VAR 0 4
28481: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
28482: LD_INT 0
28484: PPUSH
28485: PPUSH
28486: PPUSH
28487: PPUSH
28488: PPUSH
28489: PPUSH
28490: PPUSH
28491: PPUSH
28492: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
28493: LD_VAR 0 1
28497: PPUSH
28498: CALL_OW 264
28502: PUSH
28503: LD_INT 81
28505: EQUAL
28506: NOT
28507: PUSH
28508: LD_VAR 0 1
28512: PUSH
28513: LD_EXP 99
28517: IN
28518: NOT
28519: OR
28520: IFFALSE 28524
// exit ;
28522: GO 28846
// index := GetElementIndex ( minersList , unit ) ;
28524: LD_ADDR_VAR 0 6
28528: PUSH
28529: LD_EXP 99
28533: PPUSH
28534: LD_VAR 0 1
28538: PPUSH
28539: CALL 34018 0 2
28543: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
28544: LD_ADDR_VAR 0 8
28548: PUSH
28549: LD_EXP 101
28553: PUSH
28554: LD_EXP 100
28558: PUSH
28559: LD_VAR 0 6
28563: ARRAY
28564: MINUS
28565: ST_TO_ADDR
// if not minesFreeAmount then
28566: LD_VAR 0 8
28570: NOT
28571: IFFALSE 28575
// exit ;
28573: GO 28846
// tmp := [ ] ;
28575: LD_ADDR_VAR 0 7
28579: PUSH
28580: EMPTY
28581: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
28582: LD_ADDR_VAR 0 5
28586: PUSH
28587: DOUBLE
28588: LD_INT 1
28590: DEC
28591: ST_TO_ADDR
28592: LD_VAR 0 8
28596: PUSH
28597: FOR_TO
28598: IFFALSE 28793
// begin _d := rand ( 0 , 5 ) ;
28600: LD_ADDR_VAR 0 11
28604: PUSH
28605: LD_INT 0
28607: PPUSH
28608: LD_INT 5
28610: PPUSH
28611: CALL_OW 12
28615: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
28616: LD_ADDR_VAR 0 12
28620: PUSH
28621: LD_INT 2
28623: PPUSH
28624: LD_INT 6
28626: PPUSH
28627: CALL_OW 12
28631: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28632: LD_ADDR_VAR 0 9
28636: PUSH
28637: LD_VAR 0 2
28641: PPUSH
28642: LD_VAR 0 11
28646: PPUSH
28647: LD_VAR 0 12
28651: PPUSH
28652: CALL_OW 272
28656: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28657: LD_ADDR_VAR 0 10
28661: PUSH
28662: LD_VAR 0 3
28666: PPUSH
28667: LD_VAR 0 11
28671: PPUSH
28672: LD_VAR 0 12
28676: PPUSH
28677: CALL_OW 273
28681: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28682: LD_VAR 0 9
28686: PPUSH
28687: LD_VAR 0 10
28691: PPUSH
28692: CALL_OW 488
28696: PUSH
28697: LD_VAR 0 9
28701: PUSH
28702: LD_VAR 0 10
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_VAR 0 7
28715: IN
28716: NOT
28717: AND
28718: PUSH
28719: LD_VAR 0 9
28723: PPUSH
28724: LD_VAR 0 10
28728: PPUSH
28729: CALL_OW 458
28733: NOT
28734: AND
28735: IFFALSE 28777
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28737: LD_ADDR_VAR 0 7
28741: PUSH
28742: LD_VAR 0 7
28746: PPUSH
28747: LD_VAR 0 7
28751: PUSH
28752: LD_INT 1
28754: PLUS
28755: PPUSH
28756: LD_VAR 0 9
28760: PUSH
28761: LD_VAR 0 10
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PPUSH
28770: CALL_OW 1
28774: ST_TO_ADDR
28775: GO 28791
// i := i - 1 ;
28777: LD_ADDR_VAR 0 5
28781: PUSH
28782: LD_VAR 0 5
28786: PUSH
28787: LD_INT 1
28789: MINUS
28790: ST_TO_ADDR
// end ;
28791: GO 28597
28793: POP
28794: POP
// for i in tmp do
28795: LD_ADDR_VAR 0 5
28799: PUSH
28800: LD_VAR 0 7
28804: PUSH
28805: FOR_IN
28806: IFFALSE 28844
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28808: LD_VAR 0 1
28812: PPUSH
28813: LD_VAR 0 5
28817: PUSH
28818: LD_INT 1
28820: ARRAY
28821: PPUSH
28822: LD_VAR 0 5
28826: PUSH
28827: LD_INT 2
28829: ARRAY
28830: PPUSH
28831: CALL 27790 0 3
28835: NOT
28836: IFFALSE 28842
// exit ;
28838: POP
28839: POP
28840: GO 28846
28842: GO 28805
28844: POP
28845: POP
// end ;
28846: LD_VAR 0 4
28850: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
28851: LD_INT 0
28853: PPUSH
28854: PPUSH
28855: PPUSH
28856: PPUSH
28857: PPUSH
28858: PPUSH
28859: PPUSH
// if not GetClass ( unit ) = class_sniper then
28860: LD_VAR 0 1
28864: PPUSH
28865: CALL_OW 257
28869: PUSH
28870: LD_INT 5
28872: EQUAL
28873: NOT
28874: IFFALSE 28878
// exit ;
28876: GO 29266
// dist := 8 ;
28878: LD_ADDR_VAR 0 5
28882: PUSH
28883: LD_INT 8
28885: ST_TO_ADDR
// viewRange := 12 ;
28886: LD_ADDR_VAR 0 7
28890: PUSH
28891: LD_INT 12
28893: ST_TO_ADDR
// side := GetSide ( unit ) ;
28894: LD_ADDR_VAR 0 6
28898: PUSH
28899: LD_VAR 0 1
28903: PPUSH
28904: CALL_OW 255
28908: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28909: LD_INT 61
28911: PPUSH
28912: LD_VAR 0 6
28916: PPUSH
28917: CALL_OW 321
28921: PUSH
28922: LD_INT 2
28924: EQUAL
28925: IFFALSE 28935
// viewRange := 16 ;
28927: LD_ADDR_VAR 0 7
28931: PUSH
28932: LD_INT 16
28934: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28935: LD_VAR 0 1
28939: PPUSH
28940: LD_VAR 0 2
28944: PPUSH
28945: LD_VAR 0 3
28949: PPUSH
28950: CALL_OW 297
28954: PUSH
28955: LD_VAR 0 5
28959: GREATER
28960: IFFALSE 29039
// begin ComMoveXY ( unit , x , y ) ;
28962: LD_VAR 0 1
28966: PPUSH
28967: LD_VAR 0 2
28971: PPUSH
28972: LD_VAR 0 3
28976: PPUSH
28977: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28981: LD_INT 35
28983: PPUSH
28984: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28988: LD_VAR 0 1
28992: PPUSH
28993: LD_VAR 0 2
28997: PPUSH
28998: LD_VAR 0 3
29002: PPUSH
29003: CALL 65770 0 3
29007: NOT
29008: IFFALSE 29012
// exit ;
29010: GO 29266
// until GetDistUnitXY ( unit , x , y ) < dist ;
29012: LD_VAR 0 1
29016: PPUSH
29017: LD_VAR 0 2
29021: PPUSH
29022: LD_VAR 0 3
29026: PPUSH
29027: CALL_OW 297
29031: PUSH
29032: LD_VAR 0 5
29036: LESS
29037: IFFALSE 28981
// end ; ComTurnXY ( unit , x , y ) ;
29039: LD_VAR 0 1
29043: PPUSH
29044: LD_VAR 0 2
29048: PPUSH
29049: LD_VAR 0 3
29053: PPUSH
29054: CALL_OW 118
// wait ( 5 ) ;
29058: LD_INT 5
29060: PPUSH
29061: CALL_OW 67
// _d := GetDir ( unit ) ;
29065: LD_ADDR_VAR 0 10
29069: PUSH
29070: LD_VAR 0 1
29074: PPUSH
29075: CALL_OW 254
29079: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29080: LD_ADDR_VAR 0 8
29084: PUSH
29085: LD_VAR 0 1
29089: PPUSH
29090: CALL_OW 250
29094: PPUSH
29095: LD_VAR 0 10
29099: PPUSH
29100: LD_VAR 0 5
29104: PPUSH
29105: CALL_OW 272
29109: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29110: LD_ADDR_VAR 0 9
29114: PUSH
29115: LD_VAR 0 1
29119: PPUSH
29120: CALL_OW 251
29124: PPUSH
29125: LD_VAR 0 10
29129: PPUSH
29130: LD_VAR 0 5
29134: PPUSH
29135: CALL_OW 273
29139: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29140: LD_VAR 0 8
29144: PPUSH
29145: LD_VAR 0 9
29149: PPUSH
29150: CALL_OW 488
29154: NOT
29155: IFFALSE 29159
// exit ;
29157: GO 29266
// ComAnimCustom ( unit , 1 ) ;
29159: LD_VAR 0 1
29163: PPUSH
29164: LD_INT 1
29166: PPUSH
29167: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29171: LD_VAR 0 8
29175: PPUSH
29176: LD_VAR 0 9
29180: PPUSH
29181: LD_VAR 0 6
29185: PPUSH
29186: LD_VAR 0 7
29190: PPUSH
29191: CALL_OW 330
// repeat wait ( 1 ) ;
29195: LD_INT 1
29197: PPUSH
29198: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29202: LD_VAR 0 1
29206: PPUSH
29207: CALL_OW 316
29211: PUSH
29212: LD_VAR 0 1
29216: PPUSH
29217: CALL_OW 314
29221: OR
29222: PUSH
29223: LD_VAR 0 1
29227: PPUSH
29228: CALL_OW 302
29232: NOT
29233: OR
29234: PUSH
29235: LD_VAR 0 1
29239: PPUSH
29240: CALL_OW 301
29244: OR
29245: IFFALSE 29195
// RemoveSeeing ( _x , _y , side ) ;
29247: LD_VAR 0 8
29251: PPUSH
29252: LD_VAR 0 9
29256: PPUSH
29257: LD_VAR 0 6
29261: PPUSH
29262: CALL_OW 331
// end ; end_of_file
29266: LD_VAR 0 4
29270: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29271: LD_INT 0
29273: PPUSH
29274: PPUSH
// if exist_mode then
29275: LD_VAR 0 2
29279: IFFALSE 29304
// unit := CreateCharacter ( prefix & ident ) else
29281: LD_ADDR_VAR 0 5
29285: PUSH
29286: LD_VAR 0 3
29290: PUSH
29291: LD_VAR 0 1
29295: STR
29296: PPUSH
29297: CALL_OW 34
29301: ST_TO_ADDR
29302: GO 29319
// unit := NewCharacter ( ident ) ;
29304: LD_ADDR_VAR 0 5
29308: PUSH
29309: LD_VAR 0 1
29313: PPUSH
29314: CALL_OW 25
29318: ST_TO_ADDR
// result := unit ;
29319: LD_ADDR_VAR 0 4
29323: PUSH
29324: LD_VAR 0 5
29328: ST_TO_ADDR
// end ;
29329: LD_VAR 0 4
29333: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29334: LD_INT 0
29336: PPUSH
29337: PPUSH
// if not side or not nation then
29338: LD_VAR 0 1
29342: NOT
29343: PUSH
29344: LD_VAR 0 2
29348: NOT
29349: OR
29350: IFFALSE 29354
// exit ;
29352: GO 30122
// case nation of nation_american :
29354: LD_VAR 0 2
29358: PUSH
29359: LD_INT 1
29361: DOUBLE
29362: EQUAL
29363: IFTRUE 29367
29365: GO 29581
29367: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
29368: LD_ADDR_VAR 0 4
29372: PUSH
29373: LD_INT 35
29375: PUSH
29376: LD_INT 45
29378: PUSH
29379: LD_INT 46
29381: PUSH
29382: LD_INT 47
29384: PUSH
29385: LD_INT 82
29387: PUSH
29388: LD_INT 83
29390: PUSH
29391: LD_INT 84
29393: PUSH
29394: LD_INT 85
29396: PUSH
29397: LD_INT 86
29399: PUSH
29400: LD_INT 1
29402: PUSH
29403: LD_INT 2
29405: PUSH
29406: LD_INT 6
29408: PUSH
29409: LD_INT 15
29411: PUSH
29412: LD_INT 16
29414: PUSH
29415: LD_INT 7
29417: PUSH
29418: LD_INT 12
29420: PUSH
29421: LD_INT 13
29423: PUSH
29424: LD_INT 10
29426: PUSH
29427: LD_INT 14
29429: PUSH
29430: LD_INT 20
29432: PUSH
29433: LD_INT 21
29435: PUSH
29436: LD_INT 22
29438: PUSH
29439: LD_INT 25
29441: PUSH
29442: LD_INT 32
29444: PUSH
29445: LD_INT 27
29447: PUSH
29448: LD_INT 36
29450: PUSH
29451: LD_INT 69
29453: PUSH
29454: LD_INT 39
29456: PUSH
29457: LD_INT 34
29459: PUSH
29460: LD_INT 40
29462: PUSH
29463: LD_INT 48
29465: PUSH
29466: LD_INT 49
29468: PUSH
29469: LD_INT 50
29471: PUSH
29472: LD_INT 51
29474: PUSH
29475: LD_INT 52
29477: PUSH
29478: LD_INT 53
29480: PUSH
29481: LD_INT 54
29483: PUSH
29484: LD_INT 55
29486: PUSH
29487: LD_INT 56
29489: PUSH
29490: LD_INT 57
29492: PUSH
29493: LD_INT 58
29495: PUSH
29496: LD_INT 59
29498: PUSH
29499: LD_INT 60
29501: PUSH
29502: LD_INT 61
29504: PUSH
29505: LD_INT 62
29507: PUSH
29508: LD_INT 80
29510: PUSH
29511: LD_INT 82
29513: PUSH
29514: LD_INT 83
29516: PUSH
29517: LD_INT 84
29519: PUSH
29520: LD_INT 85
29522: PUSH
29523: LD_INT 86
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: LIST
29530: LIST
29531: LIST
29532: LIST
29533: LIST
29534: LIST
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: ST_TO_ADDR
29579: GO 30046
29581: LD_INT 2
29583: DOUBLE
29584: EQUAL
29585: IFTRUE 29589
29587: GO 29815
29589: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29590: LD_ADDR_VAR 0 4
29594: PUSH
29595: LD_INT 35
29597: PUSH
29598: LD_INT 45
29600: PUSH
29601: LD_INT 46
29603: PUSH
29604: LD_INT 47
29606: PUSH
29607: LD_INT 82
29609: PUSH
29610: LD_INT 83
29612: PUSH
29613: LD_INT 84
29615: PUSH
29616: LD_INT 85
29618: PUSH
29619: LD_INT 87
29621: PUSH
29622: LD_INT 70
29624: PUSH
29625: LD_INT 1
29627: PUSH
29628: LD_INT 11
29630: PUSH
29631: LD_INT 3
29633: PUSH
29634: LD_INT 4
29636: PUSH
29637: LD_INT 5
29639: PUSH
29640: LD_INT 6
29642: PUSH
29643: LD_INT 15
29645: PUSH
29646: LD_INT 18
29648: PUSH
29649: LD_INT 7
29651: PUSH
29652: LD_INT 17
29654: PUSH
29655: LD_INT 8
29657: PUSH
29658: LD_INT 20
29660: PUSH
29661: LD_INT 21
29663: PUSH
29664: LD_INT 22
29666: PUSH
29667: LD_INT 72
29669: PUSH
29670: LD_INT 26
29672: PUSH
29673: LD_INT 69
29675: PUSH
29676: LD_INT 39
29678: PUSH
29679: LD_INT 40
29681: PUSH
29682: LD_INT 41
29684: PUSH
29685: LD_INT 42
29687: PUSH
29688: LD_INT 43
29690: PUSH
29691: LD_INT 48
29693: PUSH
29694: LD_INT 49
29696: PUSH
29697: LD_INT 50
29699: PUSH
29700: LD_INT 51
29702: PUSH
29703: LD_INT 52
29705: PUSH
29706: LD_INT 53
29708: PUSH
29709: LD_INT 54
29711: PUSH
29712: LD_INT 55
29714: PUSH
29715: LD_INT 56
29717: PUSH
29718: LD_INT 60
29720: PUSH
29721: LD_INT 61
29723: PUSH
29724: LD_INT 62
29726: PUSH
29727: LD_INT 66
29729: PUSH
29730: LD_INT 67
29732: PUSH
29733: LD_INT 68
29735: PUSH
29736: LD_INT 81
29738: PUSH
29739: LD_INT 82
29741: PUSH
29742: LD_INT 83
29744: PUSH
29745: LD_INT 84
29747: PUSH
29748: LD_INT 85
29750: PUSH
29751: LD_INT 87
29753: PUSH
29754: LD_INT 88
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: LIST
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: LIST
29812: ST_TO_ADDR
29813: GO 30046
29815: LD_INT 3
29817: DOUBLE
29818: EQUAL
29819: IFTRUE 29823
29821: GO 30045
29823: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29824: LD_ADDR_VAR 0 4
29828: PUSH
29829: LD_INT 46
29831: PUSH
29832: LD_INT 47
29834: PUSH
29835: LD_INT 1
29837: PUSH
29838: LD_INT 2
29840: PUSH
29841: LD_INT 82
29843: PUSH
29844: LD_INT 83
29846: PUSH
29847: LD_INT 84
29849: PUSH
29850: LD_INT 85
29852: PUSH
29853: LD_INT 86
29855: PUSH
29856: LD_INT 11
29858: PUSH
29859: LD_INT 9
29861: PUSH
29862: LD_INT 20
29864: PUSH
29865: LD_INT 19
29867: PUSH
29868: LD_INT 21
29870: PUSH
29871: LD_INT 24
29873: PUSH
29874: LD_INT 22
29876: PUSH
29877: LD_INT 25
29879: PUSH
29880: LD_INT 28
29882: PUSH
29883: LD_INT 29
29885: PUSH
29886: LD_INT 30
29888: PUSH
29889: LD_INT 31
29891: PUSH
29892: LD_INT 37
29894: PUSH
29895: LD_INT 38
29897: PUSH
29898: LD_INT 32
29900: PUSH
29901: LD_INT 27
29903: PUSH
29904: LD_INT 33
29906: PUSH
29907: LD_INT 69
29909: PUSH
29910: LD_INT 39
29912: PUSH
29913: LD_INT 34
29915: PUSH
29916: LD_INT 40
29918: PUSH
29919: LD_INT 71
29921: PUSH
29922: LD_INT 23
29924: PUSH
29925: LD_INT 44
29927: PUSH
29928: LD_INT 48
29930: PUSH
29931: LD_INT 49
29933: PUSH
29934: LD_INT 50
29936: PUSH
29937: LD_INT 51
29939: PUSH
29940: LD_INT 52
29942: PUSH
29943: LD_INT 53
29945: PUSH
29946: LD_INT 54
29948: PUSH
29949: LD_INT 55
29951: PUSH
29952: LD_INT 56
29954: PUSH
29955: LD_INT 57
29957: PUSH
29958: LD_INT 58
29960: PUSH
29961: LD_INT 59
29963: PUSH
29964: LD_INT 63
29966: PUSH
29967: LD_INT 64
29969: PUSH
29970: LD_INT 65
29972: PUSH
29973: LD_INT 82
29975: PUSH
29976: LD_INT 83
29978: PUSH
29979: LD_INT 84
29981: PUSH
29982: LD_INT 85
29984: PUSH
29985: LD_INT 86
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: LIST
30029: LIST
30030: LIST
30031: LIST
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: ST_TO_ADDR
30043: GO 30046
30045: POP
// if state > - 1 and state < 3 then
30046: LD_VAR 0 3
30050: PUSH
30051: LD_INT 1
30053: NEG
30054: GREATER
30055: PUSH
30056: LD_VAR 0 3
30060: PUSH
30061: LD_INT 3
30063: LESS
30064: AND
30065: IFFALSE 30122
// for i in result do
30067: LD_ADDR_VAR 0 5
30071: PUSH
30072: LD_VAR 0 4
30076: PUSH
30077: FOR_IN
30078: IFFALSE 30120
// if GetTech ( i , side ) <> state then
30080: LD_VAR 0 5
30084: PPUSH
30085: LD_VAR 0 1
30089: PPUSH
30090: CALL_OW 321
30094: PUSH
30095: LD_VAR 0 3
30099: NONEQUAL
30100: IFFALSE 30118
// result := result diff i ;
30102: LD_ADDR_VAR 0 4
30106: PUSH
30107: LD_VAR 0 4
30111: PUSH
30112: LD_VAR 0 5
30116: DIFF
30117: ST_TO_ADDR
30118: GO 30077
30120: POP
30121: POP
// end ;
30122: LD_VAR 0 4
30126: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30127: LD_INT 0
30129: PPUSH
30130: PPUSH
30131: PPUSH
// result := true ;
30132: LD_ADDR_VAR 0 3
30136: PUSH
30137: LD_INT 1
30139: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30140: LD_ADDR_VAR 0 5
30144: PUSH
30145: LD_VAR 0 2
30149: PPUSH
30150: CALL_OW 480
30154: ST_TO_ADDR
// if not tmp then
30155: LD_VAR 0 5
30159: NOT
30160: IFFALSE 30164
// exit ;
30162: GO 30213
// for i in tmp do
30164: LD_ADDR_VAR 0 4
30168: PUSH
30169: LD_VAR 0 5
30173: PUSH
30174: FOR_IN
30175: IFFALSE 30211
// if GetTech ( i , side ) <> state_researched then
30177: LD_VAR 0 4
30181: PPUSH
30182: LD_VAR 0 1
30186: PPUSH
30187: CALL_OW 321
30191: PUSH
30192: LD_INT 2
30194: NONEQUAL
30195: IFFALSE 30209
// begin result := false ;
30197: LD_ADDR_VAR 0 3
30201: PUSH
30202: LD_INT 0
30204: ST_TO_ADDR
// exit ;
30205: POP
30206: POP
30207: GO 30213
// end ;
30209: GO 30174
30211: POP
30212: POP
// end ;
30213: LD_VAR 0 3
30217: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30218: LD_INT 0
30220: PPUSH
30221: PPUSH
30222: PPUSH
30223: PPUSH
30224: PPUSH
30225: PPUSH
30226: PPUSH
30227: PPUSH
30228: PPUSH
30229: PPUSH
30230: PPUSH
30231: PPUSH
30232: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30233: LD_VAR 0 1
30237: NOT
30238: PUSH
30239: LD_VAR 0 1
30243: PPUSH
30244: CALL_OW 257
30248: PUSH
30249: LD_INT 9
30251: NONEQUAL
30252: OR
30253: IFFALSE 30257
// exit ;
30255: GO 30830
// side := GetSide ( unit ) ;
30257: LD_ADDR_VAR 0 9
30261: PUSH
30262: LD_VAR 0 1
30266: PPUSH
30267: CALL_OW 255
30271: ST_TO_ADDR
// tech_space := tech_spacanom ;
30272: LD_ADDR_VAR 0 12
30276: PUSH
30277: LD_INT 29
30279: ST_TO_ADDR
// tech_time := tech_taurad ;
30280: LD_ADDR_VAR 0 13
30284: PUSH
30285: LD_INT 28
30287: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30288: LD_ADDR_VAR 0 11
30292: PUSH
30293: LD_VAR 0 1
30297: PPUSH
30298: CALL_OW 310
30302: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30303: LD_VAR 0 11
30307: PPUSH
30308: CALL_OW 247
30312: PUSH
30313: LD_INT 2
30315: EQUAL
30316: IFFALSE 30320
// exit ;
30318: GO 30830
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30320: LD_ADDR_VAR 0 8
30324: PUSH
30325: LD_INT 81
30327: PUSH
30328: LD_VAR 0 9
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: PUSH
30337: LD_INT 3
30339: PUSH
30340: LD_INT 21
30342: PUSH
30343: LD_INT 3
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: EMPTY
30351: LIST
30352: LIST
30353: PUSH
30354: EMPTY
30355: LIST
30356: LIST
30357: PPUSH
30358: CALL_OW 69
30362: ST_TO_ADDR
// if not tmp then
30363: LD_VAR 0 8
30367: NOT
30368: IFFALSE 30372
// exit ;
30370: GO 30830
// if in_unit then
30372: LD_VAR 0 11
30376: IFFALSE 30400
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
30378: LD_ADDR_VAR 0 10
30382: PUSH
30383: LD_VAR 0 8
30387: PPUSH
30388: LD_VAR 0 11
30392: PPUSH
30393: CALL_OW 74
30397: ST_TO_ADDR
30398: GO 30420
// enemy := NearestUnitToUnit ( tmp , unit ) ;
30400: LD_ADDR_VAR 0 10
30404: PUSH
30405: LD_VAR 0 8
30409: PPUSH
30410: LD_VAR 0 1
30414: PPUSH
30415: CALL_OW 74
30419: ST_TO_ADDR
// if not enemy then
30420: LD_VAR 0 10
30424: NOT
30425: IFFALSE 30429
// exit ;
30427: GO 30830
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
30429: LD_VAR 0 11
30433: PUSH
30434: LD_VAR 0 11
30438: PPUSH
30439: LD_VAR 0 10
30443: PPUSH
30444: CALL_OW 296
30448: PUSH
30449: LD_INT 13
30451: GREATER
30452: AND
30453: PUSH
30454: LD_VAR 0 1
30458: PPUSH
30459: LD_VAR 0 10
30463: PPUSH
30464: CALL_OW 296
30468: PUSH
30469: LD_INT 12
30471: GREATER
30472: OR
30473: IFFALSE 30477
// exit ;
30475: GO 30830
// missile := [ 1 ] ;
30477: LD_ADDR_VAR 0 14
30481: PUSH
30482: LD_INT 1
30484: PUSH
30485: EMPTY
30486: LIST
30487: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30488: LD_VAR 0 9
30492: PPUSH
30493: LD_VAR 0 12
30497: PPUSH
30498: CALL_OW 325
30502: IFFALSE 30531
// missile := Replace ( missile , missile + 1 , 2 ) ;
30504: LD_ADDR_VAR 0 14
30508: PUSH
30509: LD_VAR 0 14
30513: PPUSH
30514: LD_VAR 0 14
30518: PUSH
30519: LD_INT 1
30521: PLUS
30522: PPUSH
30523: LD_INT 2
30525: PPUSH
30526: CALL_OW 1
30530: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30531: LD_VAR 0 9
30535: PPUSH
30536: LD_VAR 0 13
30540: PPUSH
30541: CALL_OW 325
30545: PUSH
30546: LD_VAR 0 10
30550: PPUSH
30551: CALL_OW 255
30555: PPUSH
30556: LD_VAR 0 13
30560: PPUSH
30561: CALL_OW 325
30565: NOT
30566: AND
30567: IFFALSE 30596
// missile := Replace ( missile , missile + 1 , 3 ) ;
30569: LD_ADDR_VAR 0 14
30573: PUSH
30574: LD_VAR 0 14
30578: PPUSH
30579: LD_VAR 0 14
30583: PUSH
30584: LD_INT 1
30586: PLUS
30587: PPUSH
30588: LD_INT 3
30590: PPUSH
30591: CALL_OW 1
30595: ST_TO_ADDR
// if missile < 2 then
30596: LD_VAR 0 14
30600: PUSH
30601: LD_INT 2
30603: LESS
30604: IFFALSE 30608
// exit ;
30606: GO 30830
// x := GetX ( enemy ) ;
30608: LD_ADDR_VAR 0 4
30612: PUSH
30613: LD_VAR 0 10
30617: PPUSH
30618: CALL_OW 250
30622: ST_TO_ADDR
// y := GetY ( enemy ) ;
30623: LD_ADDR_VAR 0 5
30627: PUSH
30628: LD_VAR 0 10
30632: PPUSH
30633: CALL_OW 251
30637: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30638: LD_ADDR_VAR 0 6
30642: PUSH
30643: LD_VAR 0 4
30647: PUSH
30648: LD_INT 1
30650: NEG
30651: PPUSH
30652: LD_INT 1
30654: PPUSH
30655: CALL_OW 12
30659: PLUS
30660: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30661: LD_ADDR_VAR 0 7
30665: PUSH
30666: LD_VAR 0 5
30670: PUSH
30671: LD_INT 1
30673: NEG
30674: PPUSH
30675: LD_INT 1
30677: PPUSH
30678: CALL_OW 12
30682: PLUS
30683: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30684: LD_VAR 0 6
30688: PPUSH
30689: LD_VAR 0 7
30693: PPUSH
30694: CALL_OW 488
30698: NOT
30699: IFFALSE 30721
// begin _x := x ;
30701: LD_ADDR_VAR 0 6
30705: PUSH
30706: LD_VAR 0 4
30710: ST_TO_ADDR
// _y := y ;
30711: LD_ADDR_VAR 0 7
30715: PUSH
30716: LD_VAR 0 5
30720: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30721: LD_ADDR_VAR 0 3
30725: PUSH
30726: LD_INT 1
30728: PPUSH
30729: LD_VAR 0 14
30733: PPUSH
30734: CALL_OW 12
30738: ST_TO_ADDR
// case i of 1 :
30739: LD_VAR 0 3
30743: PUSH
30744: LD_INT 1
30746: DOUBLE
30747: EQUAL
30748: IFTRUE 30752
30750: GO 30769
30752: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30753: LD_VAR 0 1
30757: PPUSH
30758: LD_VAR 0 10
30762: PPUSH
30763: CALL_OW 115
30767: GO 30830
30769: LD_INT 2
30771: DOUBLE
30772: EQUAL
30773: IFTRUE 30777
30775: GO 30799
30777: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30778: LD_VAR 0 1
30782: PPUSH
30783: LD_VAR 0 6
30787: PPUSH
30788: LD_VAR 0 7
30792: PPUSH
30793: CALL_OW 153
30797: GO 30830
30799: LD_INT 3
30801: DOUBLE
30802: EQUAL
30803: IFTRUE 30807
30805: GO 30829
30807: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30808: LD_VAR 0 1
30812: PPUSH
30813: LD_VAR 0 6
30817: PPUSH
30818: LD_VAR 0 7
30822: PPUSH
30823: CALL_OW 154
30827: GO 30830
30829: POP
// end ;
30830: LD_VAR 0 2
30834: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30835: LD_INT 0
30837: PPUSH
30838: PPUSH
30839: PPUSH
30840: PPUSH
30841: PPUSH
30842: PPUSH
// if not unit or not building then
30843: LD_VAR 0 1
30847: NOT
30848: PUSH
30849: LD_VAR 0 2
30853: NOT
30854: OR
30855: IFFALSE 30859
// exit ;
30857: GO 31017
// x := GetX ( building ) ;
30859: LD_ADDR_VAR 0 5
30863: PUSH
30864: LD_VAR 0 2
30868: PPUSH
30869: CALL_OW 250
30873: ST_TO_ADDR
// y := GetY ( building ) ;
30874: LD_ADDR_VAR 0 6
30878: PUSH
30879: LD_VAR 0 2
30883: PPUSH
30884: CALL_OW 251
30888: ST_TO_ADDR
// for i = 0 to 5 do
30889: LD_ADDR_VAR 0 4
30893: PUSH
30894: DOUBLE
30895: LD_INT 0
30897: DEC
30898: ST_TO_ADDR
30899: LD_INT 5
30901: PUSH
30902: FOR_TO
30903: IFFALSE 31015
// begin _x := ShiftX ( x , i , 3 ) ;
30905: LD_ADDR_VAR 0 7
30909: PUSH
30910: LD_VAR 0 5
30914: PPUSH
30915: LD_VAR 0 4
30919: PPUSH
30920: LD_INT 3
30922: PPUSH
30923: CALL_OW 272
30927: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30928: LD_ADDR_VAR 0 8
30932: PUSH
30933: LD_VAR 0 6
30937: PPUSH
30938: LD_VAR 0 4
30942: PPUSH
30943: LD_INT 3
30945: PPUSH
30946: CALL_OW 273
30950: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30951: LD_VAR 0 7
30955: PPUSH
30956: LD_VAR 0 8
30960: PPUSH
30961: CALL_OW 488
30965: NOT
30966: IFFALSE 30970
// continue ;
30968: GO 30902
// if HexInfo ( _x , _y ) = 0 then
30970: LD_VAR 0 7
30974: PPUSH
30975: LD_VAR 0 8
30979: PPUSH
30980: CALL_OW 428
30984: PUSH
30985: LD_INT 0
30987: EQUAL
30988: IFFALSE 31013
// begin ComMoveXY ( unit , _x , _y ) ;
30990: LD_VAR 0 1
30994: PPUSH
30995: LD_VAR 0 7
30999: PPUSH
31000: LD_VAR 0 8
31004: PPUSH
31005: CALL_OW 111
// exit ;
31009: POP
31010: POP
31011: GO 31017
// end ; end ;
31013: GO 30902
31015: POP
31016: POP
// end ;
31017: LD_VAR 0 3
31021: RET
// export function ScanBase ( side , base_area ) ; begin
31022: LD_INT 0
31024: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31025: LD_ADDR_VAR 0 3
31029: PUSH
31030: LD_VAR 0 2
31034: PPUSH
31035: LD_INT 81
31037: PUSH
31038: LD_VAR 0 1
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: PPUSH
31047: CALL_OW 70
31051: ST_TO_ADDR
// end ;
31052: LD_VAR 0 3
31056: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31057: LD_INT 0
31059: PPUSH
31060: PPUSH
31061: PPUSH
31062: PPUSH
// result := false ;
31063: LD_ADDR_VAR 0 2
31067: PUSH
31068: LD_INT 0
31070: ST_TO_ADDR
// side := GetSide ( unit ) ;
31071: LD_ADDR_VAR 0 3
31075: PUSH
31076: LD_VAR 0 1
31080: PPUSH
31081: CALL_OW 255
31085: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31086: LD_ADDR_VAR 0 4
31090: PUSH
31091: LD_VAR 0 1
31095: PPUSH
31096: CALL_OW 248
31100: ST_TO_ADDR
// case nat of 1 :
31101: LD_VAR 0 4
31105: PUSH
31106: LD_INT 1
31108: DOUBLE
31109: EQUAL
31110: IFTRUE 31114
31112: GO 31125
31114: POP
// tech := tech_lassight ; 2 :
31115: LD_ADDR_VAR 0 5
31119: PUSH
31120: LD_INT 12
31122: ST_TO_ADDR
31123: GO 31164
31125: LD_INT 2
31127: DOUBLE
31128: EQUAL
31129: IFTRUE 31133
31131: GO 31144
31133: POP
// tech := tech_mortar ; 3 :
31134: LD_ADDR_VAR 0 5
31138: PUSH
31139: LD_INT 41
31141: ST_TO_ADDR
31142: GO 31164
31144: LD_INT 3
31146: DOUBLE
31147: EQUAL
31148: IFTRUE 31152
31150: GO 31163
31152: POP
// tech := tech_bazooka ; end ;
31153: LD_ADDR_VAR 0 5
31157: PUSH
31158: LD_INT 44
31160: ST_TO_ADDR
31161: GO 31164
31163: POP
// if Researched ( side , tech ) then
31164: LD_VAR 0 3
31168: PPUSH
31169: LD_VAR 0 5
31173: PPUSH
31174: CALL_OW 325
31178: IFFALSE 31205
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31180: LD_ADDR_VAR 0 2
31184: PUSH
31185: LD_INT 5
31187: PUSH
31188: LD_INT 8
31190: PUSH
31191: LD_INT 9
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: LIST
31198: PUSH
31199: LD_VAR 0 4
31203: ARRAY
31204: ST_TO_ADDR
// end ;
31205: LD_VAR 0 2
31209: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31210: LD_INT 0
31212: PPUSH
31213: PPUSH
31214: PPUSH
// if not mines then
31215: LD_VAR 0 2
31219: NOT
31220: IFFALSE 31224
// exit ;
31222: GO 31368
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31224: LD_ADDR_VAR 0 5
31228: PUSH
31229: LD_INT 81
31231: PUSH
31232: LD_VAR 0 1
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 3
31243: PUSH
31244: LD_INT 21
31246: PUSH
31247: LD_INT 3
31249: PUSH
31250: EMPTY
31251: LIST
31252: LIST
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PPUSH
31262: CALL_OW 69
31266: ST_TO_ADDR
// for i in mines do
31267: LD_ADDR_VAR 0 4
31271: PUSH
31272: LD_VAR 0 2
31276: PUSH
31277: FOR_IN
31278: IFFALSE 31366
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31280: LD_VAR 0 4
31284: PUSH
31285: LD_INT 1
31287: ARRAY
31288: PPUSH
31289: LD_VAR 0 4
31293: PUSH
31294: LD_INT 2
31296: ARRAY
31297: PPUSH
31298: CALL_OW 458
31302: NOT
31303: IFFALSE 31307
// continue ;
31305: GO 31277
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31307: LD_VAR 0 4
31311: PUSH
31312: LD_INT 1
31314: ARRAY
31315: PPUSH
31316: LD_VAR 0 4
31320: PUSH
31321: LD_INT 2
31323: ARRAY
31324: PPUSH
31325: CALL_OW 428
31329: PUSH
31330: LD_VAR 0 5
31334: IN
31335: IFFALSE 31364
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
31337: LD_VAR 0 4
31341: PUSH
31342: LD_INT 1
31344: ARRAY
31345: PPUSH
31346: LD_VAR 0 4
31350: PUSH
31351: LD_INT 2
31353: ARRAY
31354: PPUSH
31355: LD_VAR 0 1
31359: PPUSH
31360: CALL_OW 456
// end ;
31364: GO 31277
31366: POP
31367: POP
// end ;
31368: LD_VAR 0 3
31372: RET
// export function Count ( array ) ; begin
31373: LD_INT 0
31375: PPUSH
// result := array + 0 ;
31376: LD_ADDR_VAR 0 2
31380: PUSH
31381: LD_VAR 0 1
31385: PUSH
31386: LD_INT 0
31388: PLUS
31389: ST_TO_ADDR
// end ;
31390: LD_VAR 0 2
31394: RET
// export function IsEmpty ( building ) ; begin
31395: LD_INT 0
31397: PPUSH
// if not building then
31398: LD_VAR 0 1
31402: NOT
31403: IFFALSE 31407
// exit ;
31405: GO 31450
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
31407: LD_ADDR_VAR 0 2
31411: PUSH
31412: LD_VAR 0 1
31416: PUSH
31417: LD_INT 22
31419: PUSH
31420: LD_VAR 0 1
31424: PPUSH
31425: CALL_OW 255
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 58
31436: PUSH
31437: EMPTY
31438: LIST
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PPUSH
31444: CALL_OW 69
31448: IN
31449: ST_TO_ADDR
// end ;
31450: LD_VAR 0 2
31454: RET
// export function IsNotFull ( building ) ; var places ; begin
31455: LD_INT 0
31457: PPUSH
31458: PPUSH
// if not building then
31459: LD_VAR 0 1
31463: NOT
31464: IFFALSE 31468
// exit ;
31466: GO 31496
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31468: LD_ADDR_VAR 0 2
31472: PUSH
31473: LD_VAR 0 1
31477: PPUSH
31478: LD_INT 3
31480: PUSH
31481: LD_INT 62
31483: PUSH
31484: EMPTY
31485: LIST
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PPUSH
31491: CALL_OW 72
31495: ST_TO_ADDR
// end ;
31496: LD_VAR 0 2
31500: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31501: LD_INT 0
31503: PPUSH
31504: PPUSH
31505: PPUSH
31506: PPUSH
// tmp := [ ] ;
31507: LD_ADDR_VAR 0 3
31511: PUSH
31512: EMPTY
31513: ST_TO_ADDR
// list := [ ] ;
31514: LD_ADDR_VAR 0 5
31518: PUSH
31519: EMPTY
31520: ST_TO_ADDR
// for i = 16 to 25 do
31521: LD_ADDR_VAR 0 4
31525: PUSH
31526: DOUBLE
31527: LD_INT 16
31529: DEC
31530: ST_TO_ADDR
31531: LD_INT 25
31533: PUSH
31534: FOR_TO
31535: IFFALSE 31608
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31537: LD_ADDR_VAR 0 3
31541: PUSH
31542: LD_VAR 0 3
31546: PUSH
31547: LD_INT 22
31549: PUSH
31550: LD_VAR 0 1
31554: PPUSH
31555: CALL_OW 255
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: PUSH
31564: LD_INT 91
31566: PUSH
31567: LD_VAR 0 1
31571: PUSH
31572: LD_INT 6
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 30
31582: PUSH
31583: LD_VAR 0 4
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: LIST
31596: PUSH
31597: EMPTY
31598: LIST
31599: PPUSH
31600: CALL_OW 69
31604: ADD
31605: ST_TO_ADDR
31606: GO 31534
31608: POP
31609: POP
// for i = 1 to tmp do
31610: LD_ADDR_VAR 0 4
31614: PUSH
31615: DOUBLE
31616: LD_INT 1
31618: DEC
31619: ST_TO_ADDR
31620: LD_VAR 0 3
31624: PUSH
31625: FOR_TO
31626: IFFALSE 31714
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31628: LD_ADDR_VAR 0 5
31632: PUSH
31633: LD_VAR 0 5
31637: PUSH
31638: LD_VAR 0 3
31642: PUSH
31643: LD_VAR 0 4
31647: ARRAY
31648: PPUSH
31649: CALL_OW 266
31653: PUSH
31654: LD_VAR 0 3
31658: PUSH
31659: LD_VAR 0 4
31663: ARRAY
31664: PPUSH
31665: CALL_OW 250
31669: PUSH
31670: LD_VAR 0 3
31674: PUSH
31675: LD_VAR 0 4
31679: ARRAY
31680: PPUSH
31681: CALL_OW 251
31685: PUSH
31686: LD_VAR 0 3
31690: PUSH
31691: LD_VAR 0 4
31695: ARRAY
31696: PPUSH
31697: CALL_OW 254
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: PUSH
31708: EMPTY
31709: LIST
31710: ADD
31711: ST_TO_ADDR
31712: GO 31625
31714: POP
31715: POP
// result := list ;
31716: LD_ADDR_VAR 0 2
31720: PUSH
31721: LD_VAR 0 5
31725: ST_TO_ADDR
// end ;
31726: LD_VAR 0 2
31730: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31731: LD_INT 0
31733: PPUSH
31734: PPUSH
31735: PPUSH
31736: PPUSH
31737: PPUSH
31738: PPUSH
31739: PPUSH
// if not factory then
31740: LD_VAR 0 1
31744: NOT
31745: IFFALSE 31749
// exit ;
31747: GO 32342
// if control = control_apeman then
31749: LD_VAR 0 4
31753: PUSH
31754: LD_INT 5
31756: EQUAL
31757: IFFALSE 31866
// begin tmp := UnitsInside ( factory ) ;
31759: LD_ADDR_VAR 0 8
31763: PUSH
31764: LD_VAR 0 1
31768: PPUSH
31769: CALL_OW 313
31773: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31774: LD_VAR 0 8
31778: PPUSH
31779: LD_INT 25
31781: PUSH
31782: LD_INT 12
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PPUSH
31789: CALL_OW 72
31793: NOT
31794: IFFALSE 31804
// control := control_manual ;
31796: LD_ADDR_VAR 0 4
31800: PUSH
31801: LD_INT 1
31803: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31804: LD_ADDR_VAR 0 8
31808: PUSH
31809: LD_VAR 0 1
31813: PPUSH
31814: CALL 31501 0 1
31818: ST_TO_ADDR
// if tmp then
31819: LD_VAR 0 8
31823: IFFALSE 31866
// begin for i in tmp do
31825: LD_ADDR_VAR 0 7
31829: PUSH
31830: LD_VAR 0 8
31834: PUSH
31835: FOR_IN
31836: IFFALSE 31864
// if i [ 1 ] = b_ext_radio then
31838: LD_VAR 0 7
31842: PUSH
31843: LD_INT 1
31845: ARRAY
31846: PUSH
31847: LD_INT 22
31849: EQUAL
31850: IFFALSE 31862
// begin control := control_remote ;
31852: LD_ADDR_VAR 0 4
31856: PUSH
31857: LD_INT 2
31859: ST_TO_ADDR
// break ;
31860: GO 31864
// end ;
31862: GO 31835
31864: POP
31865: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31866: LD_VAR 0 1
31870: PPUSH
31871: LD_VAR 0 2
31875: PPUSH
31876: LD_VAR 0 3
31880: PPUSH
31881: LD_VAR 0 4
31885: PPUSH
31886: LD_VAR 0 5
31890: PPUSH
31891: CALL_OW 448
31895: IFFALSE 31930
// begin result := [ chassis , engine , control , weapon ] ;
31897: LD_ADDR_VAR 0 6
31901: PUSH
31902: LD_VAR 0 2
31906: PUSH
31907: LD_VAR 0 3
31911: PUSH
31912: LD_VAR 0 4
31916: PUSH
31917: LD_VAR 0 5
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: ST_TO_ADDR
// exit ;
31928: GO 32342
// end ; _chassis := AvailableChassisList ( factory ) ;
31930: LD_ADDR_VAR 0 9
31934: PUSH
31935: LD_VAR 0 1
31939: PPUSH
31940: CALL_OW 475
31944: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31945: LD_ADDR_VAR 0 11
31949: PUSH
31950: LD_VAR 0 1
31954: PPUSH
31955: CALL_OW 476
31959: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31960: LD_ADDR_VAR 0 12
31964: PUSH
31965: LD_VAR 0 1
31969: PPUSH
31970: CALL_OW 477
31974: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31975: LD_ADDR_VAR 0 10
31979: PUSH
31980: LD_VAR 0 1
31984: PPUSH
31985: CALL_OW 478
31989: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31990: LD_VAR 0 9
31994: NOT
31995: PUSH
31996: LD_VAR 0 11
32000: NOT
32001: OR
32002: PUSH
32003: LD_VAR 0 12
32007: NOT
32008: OR
32009: PUSH
32010: LD_VAR 0 10
32014: NOT
32015: OR
32016: IFFALSE 32051
// begin result := [ chassis , engine , control , weapon ] ;
32018: LD_ADDR_VAR 0 6
32022: PUSH
32023: LD_VAR 0 2
32027: PUSH
32028: LD_VAR 0 3
32032: PUSH
32033: LD_VAR 0 4
32037: PUSH
32038: LD_VAR 0 5
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: ST_TO_ADDR
// exit ;
32049: GO 32342
// end ; if not chassis in _chassis then
32051: LD_VAR 0 2
32055: PUSH
32056: LD_VAR 0 9
32060: IN
32061: NOT
32062: IFFALSE 32088
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32064: LD_ADDR_VAR 0 2
32068: PUSH
32069: LD_VAR 0 9
32073: PUSH
32074: LD_INT 1
32076: PPUSH
32077: LD_VAR 0 9
32081: PPUSH
32082: CALL_OW 12
32086: ARRAY
32087: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32088: LD_VAR 0 2
32092: PPUSH
32093: LD_VAR 0 3
32097: PPUSH
32098: CALL 32347 0 2
32102: NOT
32103: IFFALSE 32162
// repeat engine := _engine [ 1 ] ;
32105: LD_ADDR_VAR 0 3
32109: PUSH
32110: LD_VAR 0 11
32114: PUSH
32115: LD_INT 1
32117: ARRAY
32118: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32119: LD_ADDR_VAR 0 11
32123: PUSH
32124: LD_VAR 0 11
32128: PPUSH
32129: LD_INT 1
32131: PPUSH
32132: CALL_OW 3
32136: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32137: LD_VAR 0 2
32141: PPUSH
32142: LD_VAR 0 3
32146: PPUSH
32147: CALL 32347 0 2
32151: PUSH
32152: LD_VAR 0 11
32156: PUSH
32157: EMPTY
32158: EQUAL
32159: OR
32160: IFFALSE 32105
// if not control in _control then
32162: LD_VAR 0 4
32166: PUSH
32167: LD_VAR 0 12
32171: IN
32172: NOT
32173: IFFALSE 32199
// control := _control [ rand ( 1 , _control ) ] ;
32175: LD_ADDR_VAR 0 4
32179: PUSH
32180: LD_VAR 0 12
32184: PUSH
32185: LD_INT 1
32187: PPUSH
32188: LD_VAR 0 12
32192: PPUSH
32193: CALL_OW 12
32197: ARRAY
32198: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32199: LD_VAR 0 2
32203: PPUSH
32204: LD_VAR 0 5
32208: PPUSH
32209: CALL 32567 0 2
32213: NOT
32214: IFFALSE 32273
// repeat weapon := _weapon [ 1 ] ;
32216: LD_ADDR_VAR 0 5
32220: PUSH
32221: LD_VAR 0 10
32225: PUSH
32226: LD_INT 1
32228: ARRAY
32229: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32230: LD_ADDR_VAR 0 10
32234: PUSH
32235: LD_VAR 0 10
32239: PPUSH
32240: LD_INT 1
32242: PPUSH
32243: CALL_OW 3
32247: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32248: LD_VAR 0 2
32252: PPUSH
32253: LD_VAR 0 5
32257: PPUSH
32258: CALL 32567 0 2
32262: PUSH
32263: LD_VAR 0 10
32267: PUSH
32268: EMPTY
32269: EQUAL
32270: OR
32271: IFFALSE 32216
// result := [ ] ;
32273: LD_ADDR_VAR 0 6
32277: PUSH
32278: EMPTY
32279: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32280: LD_VAR 0 1
32284: PPUSH
32285: LD_VAR 0 2
32289: PPUSH
32290: LD_VAR 0 3
32294: PPUSH
32295: LD_VAR 0 4
32299: PPUSH
32300: LD_VAR 0 5
32304: PPUSH
32305: CALL_OW 448
32309: IFFALSE 32342
// result := [ chassis , engine , control , weapon ] ;
32311: LD_ADDR_VAR 0 6
32315: PUSH
32316: LD_VAR 0 2
32320: PUSH
32321: LD_VAR 0 3
32325: PUSH
32326: LD_VAR 0 4
32330: PUSH
32331: LD_VAR 0 5
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: ST_TO_ADDR
// end ;
32342: LD_VAR 0 6
32346: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
32347: LD_INT 0
32349: PPUSH
// if not chassis or not engine then
32350: LD_VAR 0 1
32354: NOT
32355: PUSH
32356: LD_VAR 0 2
32360: NOT
32361: OR
32362: IFFALSE 32366
// exit ;
32364: GO 32562
// case engine of engine_solar :
32366: LD_VAR 0 2
32370: PUSH
32371: LD_INT 2
32373: DOUBLE
32374: EQUAL
32375: IFTRUE 32379
32377: GO 32417
32379: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
32380: LD_ADDR_VAR 0 3
32384: PUSH
32385: LD_INT 11
32387: PUSH
32388: LD_INT 12
32390: PUSH
32391: LD_INT 13
32393: PUSH
32394: LD_INT 14
32396: PUSH
32397: LD_INT 1
32399: PUSH
32400: LD_INT 2
32402: PUSH
32403: LD_INT 3
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: ST_TO_ADDR
32415: GO 32546
32417: LD_INT 1
32419: DOUBLE
32420: EQUAL
32421: IFTRUE 32425
32423: GO 32487
32425: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
32426: LD_ADDR_VAR 0 3
32430: PUSH
32431: LD_INT 11
32433: PUSH
32434: LD_INT 12
32436: PUSH
32437: LD_INT 13
32439: PUSH
32440: LD_INT 14
32442: PUSH
32443: LD_INT 1
32445: PUSH
32446: LD_INT 2
32448: PUSH
32449: LD_INT 3
32451: PUSH
32452: LD_INT 4
32454: PUSH
32455: LD_INT 5
32457: PUSH
32458: LD_INT 21
32460: PUSH
32461: LD_INT 23
32463: PUSH
32464: LD_INT 22
32466: PUSH
32467: LD_INT 24
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: ST_TO_ADDR
32485: GO 32546
32487: LD_INT 3
32489: DOUBLE
32490: EQUAL
32491: IFTRUE 32495
32493: GO 32545
32495: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32496: LD_ADDR_VAR 0 3
32500: PUSH
32501: LD_INT 13
32503: PUSH
32504: LD_INT 14
32506: PUSH
32507: LD_INT 2
32509: PUSH
32510: LD_INT 3
32512: PUSH
32513: LD_INT 4
32515: PUSH
32516: LD_INT 5
32518: PUSH
32519: LD_INT 21
32521: PUSH
32522: LD_INT 22
32524: PUSH
32525: LD_INT 23
32527: PUSH
32528: LD_INT 24
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: ST_TO_ADDR
32543: GO 32546
32545: POP
// result := ( chassis in result ) ;
32546: LD_ADDR_VAR 0 3
32550: PUSH
32551: LD_VAR 0 1
32555: PUSH
32556: LD_VAR 0 3
32560: IN
32561: ST_TO_ADDR
// end ;
32562: LD_VAR 0 3
32566: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32567: LD_INT 0
32569: PPUSH
// if not chassis or not weapon then
32570: LD_VAR 0 1
32574: NOT
32575: PUSH
32576: LD_VAR 0 2
32580: NOT
32581: OR
32582: IFFALSE 32586
// exit ;
32584: GO 33646
// case weapon of us_machine_gun :
32586: LD_VAR 0 2
32590: PUSH
32591: LD_INT 2
32593: DOUBLE
32594: EQUAL
32595: IFTRUE 32599
32597: GO 32629
32599: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32600: LD_ADDR_VAR 0 3
32604: PUSH
32605: LD_INT 1
32607: PUSH
32608: LD_INT 2
32610: PUSH
32611: LD_INT 3
32613: PUSH
32614: LD_INT 4
32616: PUSH
32617: LD_INT 5
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: ST_TO_ADDR
32627: GO 33630
32629: LD_INT 3
32631: DOUBLE
32632: EQUAL
32633: IFTRUE 32637
32635: GO 32667
32637: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32638: LD_ADDR_VAR 0 3
32642: PUSH
32643: LD_INT 1
32645: PUSH
32646: LD_INT 2
32648: PUSH
32649: LD_INT 3
32651: PUSH
32652: LD_INT 4
32654: PUSH
32655: LD_INT 5
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: ST_TO_ADDR
32665: GO 33630
32667: LD_INT 11
32669: DOUBLE
32670: EQUAL
32671: IFTRUE 32675
32673: GO 32705
32675: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32676: LD_ADDR_VAR 0 3
32680: PUSH
32681: LD_INT 1
32683: PUSH
32684: LD_INT 2
32686: PUSH
32687: LD_INT 3
32689: PUSH
32690: LD_INT 4
32692: PUSH
32693: LD_INT 5
32695: PUSH
32696: EMPTY
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: ST_TO_ADDR
32703: GO 33630
32705: LD_INT 4
32707: DOUBLE
32708: EQUAL
32709: IFTRUE 32713
32711: GO 32739
32713: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32714: LD_ADDR_VAR 0 3
32718: PUSH
32719: LD_INT 2
32721: PUSH
32722: LD_INT 3
32724: PUSH
32725: LD_INT 4
32727: PUSH
32728: LD_INT 5
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: ST_TO_ADDR
32737: GO 33630
32739: LD_INT 5
32741: DOUBLE
32742: EQUAL
32743: IFTRUE 32747
32745: GO 32773
32747: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32748: LD_ADDR_VAR 0 3
32752: PUSH
32753: LD_INT 2
32755: PUSH
32756: LD_INT 3
32758: PUSH
32759: LD_INT 4
32761: PUSH
32762: LD_INT 5
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: ST_TO_ADDR
32771: GO 33630
32773: LD_INT 9
32775: DOUBLE
32776: EQUAL
32777: IFTRUE 32781
32779: GO 32807
32781: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32782: LD_ADDR_VAR 0 3
32786: PUSH
32787: LD_INT 2
32789: PUSH
32790: LD_INT 3
32792: PUSH
32793: LD_INT 4
32795: PUSH
32796: LD_INT 5
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: ST_TO_ADDR
32805: GO 33630
32807: LD_INT 7
32809: DOUBLE
32810: EQUAL
32811: IFTRUE 32815
32813: GO 32841
32815: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32816: LD_ADDR_VAR 0 3
32820: PUSH
32821: LD_INT 2
32823: PUSH
32824: LD_INT 3
32826: PUSH
32827: LD_INT 4
32829: PUSH
32830: LD_INT 5
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: ST_TO_ADDR
32839: GO 33630
32841: LD_INT 12
32843: DOUBLE
32844: EQUAL
32845: IFTRUE 32849
32847: GO 32875
32849: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32850: LD_ADDR_VAR 0 3
32854: PUSH
32855: LD_INT 2
32857: PUSH
32858: LD_INT 3
32860: PUSH
32861: LD_INT 4
32863: PUSH
32864: LD_INT 5
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: ST_TO_ADDR
32873: GO 33630
32875: LD_INT 13
32877: DOUBLE
32878: EQUAL
32879: IFTRUE 32883
32881: GO 32909
32883: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32884: LD_ADDR_VAR 0 3
32888: PUSH
32889: LD_INT 2
32891: PUSH
32892: LD_INT 3
32894: PUSH
32895: LD_INT 4
32897: PUSH
32898: LD_INT 5
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: ST_TO_ADDR
32907: GO 33630
32909: LD_INT 14
32911: DOUBLE
32912: EQUAL
32913: IFTRUE 32917
32915: GO 32935
32917: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32918: LD_ADDR_VAR 0 3
32922: PUSH
32923: LD_INT 4
32925: PUSH
32926: LD_INT 5
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: ST_TO_ADDR
32933: GO 33630
32935: LD_INT 6
32937: DOUBLE
32938: EQUAL
32939: IFTRUE 32943
32941: GO 32961
32943: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32944: LD_ADDR_VAR 0 3
32948: PUSH
32949: LD_INT 4
32951: PUSH
32952: LD_INT 5
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: ST_TO_ADDR
32959: GO 33630
32961: LD_INT 10
32963: DOUBLE
32964: EQUAL
32965: IFTRUE 32969
32967: GO 32987
32969: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32970: LD_ADDR_VAR 0 3
32974: PUSH
32975: LD_INT 4
32977: PUSH
32978: LD_INT 5
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: ST_TO_ADDR
32985: GO 33630
32987: LD_INT 22
32989: DOUBLE
32990: EQUAL
32991: IFTRUE 32995
32993: GO 33021
32995: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32996: LD_ADDR_VAR 0 3
33000: PUSH
33001: LD_INT 11
33003: PUSH
33004: LD_INT 12
33006: PUSH
33007: LD_INT 13
33009: PUSH
33010: LD_INT 14
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: ST_TO_ADDR
33019: GO 33630
33021: LD_INT 23
33023: DOUBLE
33024: EQUAL
33025: IFTRUE 33029
33027: GO 33055
33029: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33030: LD_ADDR_VAR 0 3
33034: PUSH
33035: LD_INT 11
33037: PUSH
33038: LD_INT 12
33040: PUSH
33041: LD_INT 13
33043: PUSH
33044: LD_INT 14
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: ST_TO_ADDR
33053: GO 33630
33055: LD_INT 24
33057: DOUBLE
33058: EQUAL
33059: IFTRUE 33063
33061: GO 33089
33063: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33064: LD_ADDR_VAR 0 3
33068: PUSH
33069: LD_INT 11
33071: PUSH
33072: LD_INT 12
33074: PUSH
33075: LD_INT 13
33077: PUSH
33078: LD_INT 14
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: ST_TO_ADDR
33087: GO 33630
33089: LD_INT 30
33091: DOUBLE
33092: EQUAL
33093: IFTRUE 33097
33095: GO 33123
33097: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33098: LD_ADDR_VAR 0 3
33102: PUSH
33103: LD_INT 11
33105: PUSH
33106: LD_INT 12
33108: PUSH
33109: LD_INT 13
33111: PUSH
33112: LD_INT 14
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: ST_TO_ADDR
33121: GO 33630
33123: LD_INT 25
33125: DOUBLE
33126: EQUAL
33127: IFTRUE 33131
33129: GO 33149
33131: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33132: LD_ADDR_VAR 0 3
33136: PUSH
33137: LD_INT 13
33139: PUSH
33140: LD_INT 14
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: ST_TO_ADDR
33147: GO 33630
33149: LD_INT 27
33151: DOUBLE
33152: EQUAL
33153: IFTRUE 33157
33155: GO 33175
33157: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33158: LD_ADDR_VAR 0 3
33162: PUSH
33163: LD_INT 13
33165: PUSH
33166: LD_INT 14
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: ST_TO_ADDR
33173: GO 33630
33175: LD_INT 92
33177: DOUBLE
33178: EQUAL
33179: IFTRUE 33183
33181: GO 33209
33183: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33184: LD_ADDR_VAR 0 3
33188: PUSH
33189: LD_INT 11
33191: PUSH
33192: LD_INT 12
33194: PUSH
33195: LD_INT 13
33197: PUSH
33198: LD_INT 14
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: ST_TO_ADDR
33207: GO 33630
33209: LD_INT 28
33211: DOUBLE
33212: EQUAL
33213: IFTRUE 33217
33215: GO 33235
33217: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33218: LD_ADDR_VAR 0 3
33222: PUSH
33223: LD_INT 13
33225: PUSH
33226: LD_INT 14
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: ST_TO_ADDR
33233: GO 33630
33235: LD_INT 29
33237: DOUBLE
33238: EQUAL
33239: IFTRUE 33243
33241: GO 33261
33243: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33244: LD_ADDR_VAR 0 3
33248: PUSH
33249: LD_INT 13
33251: PUSH
33252: LD_INT 14
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: ST_TO_ADDR
33259: GO 33630
33261: LD_INT 31
33263: DOUBLE
33264: EQUAL
33265: IFTRUE 33269
33267: GO 33287
33269: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33270: LD_ADDR_VAR 0 3
33274: PUSH
33275: LD_INT 13
33277: PUSH
33278: LD_INT 14
33280: PUSH
33281: EMPTY
33282: LIST
33283: LIST
33284: ST_TO_ADDR
33285: GO 33630
33287: LD_INT 26
33289: DOUBLE
33290: EQUAL
33291: IFTRUE 33295
33293: GO 33313
33295: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33296: LD_ADDR_VAR 0 3
33300: PUSH
33301: LD_INT 13
33303: PUSH
33304: LD_INT 14
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: ST_TO_ADDR
33311: GO 33630
33313: LD_INT 42
33315: DOUBLE
33316: EQUAL
33317: IFTRUE 33321
33319: GO 33347
33321: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
33322: LD_ADDR_VAR 0 3
33326: PUSH
33327: LD_INT 21
33329: PUSH
33330: LD_INT 22
33332: PUSH
33333: LD_INT 23
33335: PUSH
33336: LD_INT 24
33338: PUSH
33339: EMPTY
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: ST_TO_ADDR
33345: GO 33630
33347: LD_INT 43
33349: DOUBLE
33350: EQUAL
33351: IFTRUE 33355
33353: GO 33381
33355: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
33356: LD_ADDR_VAR 0 3
33360: PUSH
33361: LD_INT 21
33363: PUSH
33364: LD_INT 22
33366: PUSH
33367: LD_INT 23
33369: PUSH
33370: LD_INT 24
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: ST_TO_ADDR
33379: GO 33630
33381: LD_INT 44
33383: DOUBLE
33384: EQUAL
33385: IFTRUE 33389
33387: GO 33415
33389: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
33390: LD_ADDR_VAR 0 3
33394: PUSH
33395: LD_INT 21
33397: PUSH
33398: LD_INT 22
33400: PUSH
33401: LD_INT 23
33403: PUSH
33404: LD_INT 24
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: ST_TO_ADDR
33413: GO 33630
33415: LD_INT 45
33417: DOUBLE
33418: EQUAL
33419: IFTRUE 33423
33421: GO 33449
33423: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
33424: LD_ADDR_VAR 0 3
33428: PUSH
33429: LD_INT 21
33431: PUSH
33432: LD_INT 22
33434: PUSH
33435: LD_INT 23
33437: PUSH
33438: LD_INT 24
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: ST_TO_ADDR
33447: GO 33630
33449: LD_INT 49
33451: DOUBLE
33452: EQUAL
33453: IFTRUE 33457
33455: GO 33483
33457: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33458: LD_ADDR_VAR 0 3
33462: PUSH
33463: LD_INT 21
33465: PUSH
33466: LD_INT 22
33468: PUSH
33469: LD_INT 23
33471: PUSH
33472: LD_INT 24
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: ST_TO_ADDR
33481: GO 33630
33483: LD_INT 51
33485: DOUBLE
33486: EQUAL
33487: IFTRUE 33491
33489: GO 33517
33491: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33492: LD_ADDR_VAR 0 3
33496: PUSH
33497: LD_INT 21
33499: PUSH
33500: LD_INT 22
33502: PUSH
33503: LD_INT 23
33505: PUSH
33506: LD_INT 24
33508: PUSH
33509: EMPTY
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: ST_TO_ADDR
33515: GO 33630
33517: LD_INT 52
33519: DOUBLE
33520: EQUAL
33521: IFTRUE 33525
33523: GO 33551
33525: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33526: LD_ADDR_VAR 0 3
33530: PUSH
33531: LD_INT 21
33533: PUSH
33534: LD_INT 22
33536: PUSH
33537: LD_INT 23
33539: PUSH
33540: LD_INT 24
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: ST_TO_ADDR
33549: GO 33630
33551: LD_INT 53
33553: DOUBLE
33554: EQUAL
33555: IFTRUE 33559
33557: GO 33577
33559: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33560: LD_ADDR_VAR 0 3
33564: PUSH
33565: LD_INT 23
33567: PUSH
33568: LD_INT 24
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: ST_TO_ADDR
33575: GO 33630
33577: LD_INT 46
33579: DOUBLE
33580: EQUAL
33581: IFTRUE 33585
33583: GO 33603
33585: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33586: LD_ADDR_VAR 0 3
33590: PUSH
33591: LD_INT 23
33593: PUSH
33594: LD_INT 24
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: ST_TO_ADDR
33601: GO 33630
33603: LD_INT 47
33605: DOUBLE
33606: EQUAL
33607: IFTRUE 33611
33609: GO 33629
33611: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33612: LD_ADDR_VAR 0 3
33616: PUSH
33617: LD_INT 23
33619: PUSH
33620: LD_INT 24
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: ST_TO_ADDR
33627: GO 33630
33629: POP
// result := ( chassis in result ) ;
33630: LD_ADDR_VAR 0 3
33634: PUSH
33635: LD_VAR 0 1
33639: PUSH
33640: LD_VAR 0 3
33644: IN
33645: ST_TO_ADDR
// end ;
33646: LD_VAR 0 3
33650: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33651: LD_INT 0
33653: PPUSH
33654: PPUSH
33655: PPUSH
33656: PPUSH
33657: PPUSH
33658: PPUSH
33659: PPUSH
// result := array ;
33660: LD_ADDR_VAR 0 5
33664: PUSH
33665: LD_VAR 0 1
33669: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33670: LD_VAR 0 1
33674: NOT
33675: PUSH
33676: LD_VAR 0 2
33680: NOT
33681: OR
33682: PUSH
33683: LD_VAR 0 3
33687: NOT
33688: OR
33689: PUSH
33690: LD_VAR 0 2
33694: PUSH
33695: LD_VAR 0 1
33699: GREATER
33700: OR
33701: PUSH
33702: LD_VAR 0 3
33706: PUSH
33707: LD_VAR 0 1
33711: GREATER
33712: OR
33713: IFFALSE 33717
// exit ;
33715: GO 34013
// if direction then
33717: LD_VAR 0 4
33721: IFFALSE 33785
// begin d := 1 ;
33723: LD_ADDR_VAR 0 9
33727: PUSH
33728: LD_INT 1
33730: ST_TO_ADDR
// if i_from > i_to then
33731: LD_VAR 0 2
33735: PUSH
33736: LD_VAR 0 3
33740: GREATER
33741: IFFALSE 33767
// length := ( array - i_from ) + i_to else
33743: LD_ADDR_VAR 0 11
33747: PUSH
33748: LD_VAR 0 1
33752: PUSH
33753: LD_VAR 0 2
33757: MINUS
33758: PUSH
33759: LD_VAR 0 3
33763: PLUS
33764: ST_TO_ADDR
33765: GO 33783
// length := i_to - i_from ;
33767: LD_ADDR_VAR 0 11
33771: PUSH
33772: LD_VAR 0 3
33776: PUSH
33777: LD_VAR 0 2
33781: MINUS
33782: ST_TO_ADDR
// end else
33783: GO 33846
// begin d := - 1 ;
33785: LD_ADDR_VAR 0 9
33789: PUSH
33790: LD_INT 1
33792: NEG
33793: ST_TO_ADDR
// if i_from > i_to then
33794: LD_VAR 0 2
33798: PUSH
33799: LD_VAR 0 3
33803: GREATER
33804: IFFALSE 33824
// length := i_from - i_to else
33806: LD_ADDR_VAR 0 11
33810: PUSH
33811: LD_VAR 0 2
33815: PUSH
33816: LD_VAR 0 3
33820: MINUS
33821: ST_TO_ADDR
33822: GO 33846
// length := ( array - i_to ) + i_from ;
33824: LD_ADDR_VAR 0 11
33828: PUSH
33829: LD_VAR 0 1
33833: PUSH
33834: LD_VAR 0 3
33838: MINUS
33839: PUSH
33840: LD_VAR 0 2
33844: PLUS
33845: ST_TO_ADDR
// end ; if not length then
33846: LD_VAR 0 11
33850: NOT
33851: IFFALSE 33855
// exit ;
33853: GO 34013
// tmp := array ;
33855: LD_ADDR_VAR 0 10
33859: PUSH
33860: LD_VAR 0 1
33864: ST_TO_ADDR
// for i = 1 to length do
33865: LD_ADDR_VAR 0 6
33869: PUSH
33870: DOUBLE
33871: LD_INT 1
33873: DEC
33874: ST_TO_ADDR
33875: LD_VAR 0 11
33879: PUSH
33880: FOR_TO
33881: IFFALSE 34001
// begin for j = 1 to array do
33883: LD_ADDR_VAR 0 7
33887: PUSH
33888: DOUBLE
33889: LD_INT 1
33891: DEC
33892: ST_TO_ADDR
33893: LD_VAR 0 1
33897: PUSH
33898: FOR_TO
33899: IFFALSE 33987
// begin k := j + d ;
33901: LD_ADDR_VAR 0 8
33905: PUSH
33906: LD_VAR 0 7
33910: PUSH
33911: LD_VAR 0 9
33915: PLUS
33916: ST_TO_ADDR
// if k > array then
33917: LD_VAR 0 8
33921: PUSH
33922: LD_VAR 0 1
33926: GREATER
33927: IFFALSE 33937
// k := 1 ;
33929: LD_ADDR_VAR 0 8
33933: PUSH
33934: LD_INT 1
33936: ST_TO_ADDR
// if not k then
33937: LD_VAR 0 8
33941: NOT
33942: IFFALSE 33954
// k := array ;
33944: LD_ADDR_VAR 0 8
33948: PUSH
33949: LD_VAR 0 1
33953: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33954: LD_ADDR_VAR 0 10
33958: PUSH
33959: LD_VAR 0 10
33963: PPUSH
33964: LD_VAR 0 8
33968: PPUSH
33969: LD_VAR 0 1
33973: PUSH
33974: LD_VAR 0 7
33978: ARRAY
33979: PPUSH
33980: CALL_OW 1
33984: ST_TO_ADDR
// end ;
33985: GO 33898
33987: POP
33988: POP
// array := tmp ;
33989: LD_ADDR_VAR 0 1
33993: PUSH
33994: LD_VAR 0 10
33998: ST_TO_ADDR
// end ;
33999: GO 33880
34001: POP
34002: POP
// result := array ;
34003: LD_ADDR_VAR 0 5
34007: PUSH
34008: LD_VAR 0 1
34012: ST_TO_ADDR
// end ;
34013: LD_VAR 0 5
34017: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34018: LD_INT 0
34020: PPUSH
34021: PPUSH
// result := 0 ;
34022: LD_ADDR_VAR 0 3
34026: PUSH
34027: LD_INT 0
34029: ST_TO_ADDR
// if not array or not value in array then
34030: LD_VAR 0 1
34034: NOT
34035: PUSH
34036: LD_VAR 0 2
34040: PUSH
34041: LD_VAR 0 1
34045: IN
34046: NOT
34047: OR
34048: IFFALSE 34052
// exit ;
34050: GO 34106
// for i = 1 to array do
34052: LD_ADDR_VAR 0 4
34056: PUSH
34057: DOUBLE
34058: LD_INT 1
34060: DEC
34061: ST_TO_ADDR
34062: LD_VAR 0 1
34066: PUSH
34067: FOR_TO
34068: IFFALSE 34104
// if value = array [ i ] then
34070: LD_VAR 0 2
34074: PUSH
34075: LD_VAR 0 1
34079: PUSH
34080: LD_VAR 0 4
34084: ARRAY
34085: EQUAL
34086: IFFALSE 34102
// begin result := i ;
34088: LD_ADDR_VAR 0 3
34092: PUSH
34093: LD_VAR 0 4
34097: ST_TO_ADDR
// exit ;
34098: POP
34099: POP
34100: GO 34106
// end ;
34102: GO 34067
34104: POP
34105: POP
// end ;
34106: LD_VAR 0 3
34110: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34111: LD_INT 0
34113: PPUSH
// vc_chassis := chassis ;
34114: LD_ADDR_OWVAR 37
34118: PUSH
34119: LD_VAR 0 1
34123: ST_TO_ADDR
// vc_engine := engine ;
34124: LD_ADDR_OWVAR 39
34128: PUSH
34129: LD_VAR 0 2
34133: ST_TO_ADDR
// vc_control := control ;
34134: LD_ADDR_OWVAR 38
34138: PUSH
34139: LD_VAR 0 3
34143: ST_TO_ADDR
// vc_weapon := weapon ;
34144: LD_ADDR_OWVAR 40
34148: PUSH
34149: LD_VAR 0 4
34153: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34154: LD_ADDR_OWVAR 41
34158: PUSH
34159: LD_VAR 0 5
34163: ST_TO_ADDR
// end ;
34164: LD_VAR 0 6
34168: RET
// export function WantPlant ( unit ) ; var task ; begin
34169: LD_INT 0
34171: PPUSH
34172: PPUSH
// result := false ;
34173: LD_ADDR_VAR 0 2
34177: PUSH
34178: LD_INT 0
34180: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34181: LD_ADDR_VAR 0 3
34185: PUSH
34186: LD_VAR 0 1
34190: PPUSH
34191: CALL_OW 437
34195: ST_TO_ADDR
// if task then
34196: LD_VAR 0 3
34200: IFFALSE 34228
// if task [ 1 ] [ 1 ] = p then
34202: LD_VAR 0 3
34206: PUSH
34207: LD_INT 1
34209: ARRAY
34210: PUSH
34211: LD_INT 1
34213: ARRAY
34214: PUSH
34215: LD_STRING p
34217: EQUAL
34218: IFFALSE 34228
// result := true ;
34220: LD_ADDR_VAR 0 2
34224: PUSH
34225: LD_INT 1
34227: ST_TO_ADDR
// end ;
34228: LD_VAR 0 2
34232: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34233: LD_INT 0
34235: PPUSH
34236: PPUSH
34237: PPUSH
34238: PPUSH
// if pos < 1 then
34239: LD_VAR 0 2
34243: PUSH
34244: LD_INT 1
34246: LESS
34247: IFFALSE 34251
// exit ;
34249: GO 34554
// if pos = 1 then
34251: LD_VAR 0 2
34255: PUSH
34256: LD_INT 1
34258: EQUAL
34259: IFFALSE 34292
// result := Replace ( arr , pos [ 1 ] , value ) else
34261: LD_ADDR_VAR 0 4
34265: PUSH
34266: LD_VAR 0 1
34270: PPUSH
34271: LD_VAR 0 2
34275: PUSH
34276: LD_INT 1
34278: ARRAY
34279: PPUSH
34280: LD_VAR 0 3
34284: PPUSH
34285: CALL_OW 1
34289: ST_TO_ADDR
34290: GO 34554
// begin tmp := arr ;
34292: LD_ADDR_VAR 0 6
34296: PUSH
34297: LD_VAR 0 1
34301: ST_TO_ADDR
// s_arr := [ tmp ] ;
34302: LD_ADDR_VAR 0 7
34306: PUSH
34307: LD_VAR 0 6
34311: PUSH
34312: EMPTY
34313: LIST
34314: ST_TO_ADDR
// for i = 1 to pos - 1 do
34315: LD_ADDR_VAR 0 5
34319: PUSH
34320: DOUBLE
34321: LD_INT 1
34323: DEC
34324: ST_TO_ADDR
34325: LD_VAR 0 2
34329: PUSH
34330: LD_INT 1
34332: MINUS
34333: PUSH
34334: FOR_TO
34335: IFFALSE 34380
// begin tmp := tmp [ pos [ i ] ] ;
34337: LD_ADDR_VAR 0 6
34341: PUSH
34342: LD_VAR 0 6
34346: PUSH
34347: LD_VAR 0 2
34351: PUSH
34352: LD_VAR 0 5
34356: ARRAY
34357: ARRAY
34358: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
34359: LD_ADDR_VAR 0 7
34363: PUSH
34364: LD_VAR 0 7
34368: PUSH
34369: LD_VAR 0 6
34373: PUSH
34374: EMPTY
34375: LIST
34376: ADD
34377: ST_TO_ADDR
// end ;
34378: GO 34334
34380: POP
34381: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
34382: LD_ADDR_VAR 0 6
34386: PUSH
34387: LD_VAR 0 6
34391: PPUSH
34392: LD_VAR 0 2
34396: PUSH
34397: LD_VAR 0 2
34401: ARRAY
34402: PPUSH
34403: LD_VAR 0 3
34407: PPUSH
34408: CALL_OW 1
34412: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
34413: LD_ADDR_VAR 0 7
34417: PUSH
34418: LD_VAR 0 7
34422: PPUSH
34423: LD_VAR 0 7
34427: PPUSH
34428: LD_VAR 0 6
34432: PPUSH
34433: CALL_OW 1
34437: ST_TO_ADDR
// for i = s_arr downto 2 do
34438: LD_ADDR_VAR 0 5
34442: PUSH
34443: DOUBLE
34444: LD_VAR 0 7
34448: INC
34449: ST_TO_ADDR
34450: LD_INT 2
34452: PUSH
34453: FOR_DOWNTO
34454: IFFALSE 34538
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34456: LD_ADDR_VAR 0 6
34460: PUSH
34461: LD_VAR 0 7
34465: PUSH
34466: LD_VAR 0 5
34470: PUSH
34471: LD_INT 1
34473: MINUS
34474: ARRAY
34475: PPUSH
34476: LD_VAR 0 2
34480: PUSH
34481: LD_VAR 0 5
34485: PUSH
34486: LD_INT 1
34488: MINUS
34489: ARRAY
34490: PPUSH
34491: LD_VAR 0 7
34495: PUSH
34496: LD_VAR 0 5
34500: ARRAY
34501: PPUSH
34502: CALL_OW 1
34506: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34507: LD_ADDR_VAR 0 7
34511: PUSH
34512: LD_VAR 0 7
34516: PPUSH
34517: LD_VAR 0 5
34521: PUSH
34522: LD_INT 1
34524: MINUS
34525: PPUSH
34526: LD_VAR 0 6
34530: PPUSH
34531: CALL_OW 1
34535: ST_TO_ADDR
// end ;
34536: GO 34453
34538: POP
34539: POP
// result := s_arr [ 1 ] ;
34540: LD_ADDR_VAR 0 4
34544: PUSH
34545: LD_VAR 0 7
34549: PUSH
34550: LD_INT 1
34552: ARRAY
34553: ST_TO_ADDR
// end ; end ;
34554: LD_VAR 0 4
34558: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34559: LD_INT 0
34561: PPUSH
34562: PPUSH
// if not list then
34563: LD_VAR 0 1
34567: NOT
34568: IFFALSE 34572
// exit ;
34570: GO 34663
// i := list [ pos1 ] ;
34572: LD_ADDR_VAR 0 5
34576: PUSH
34577: LD_VAR 0 1
34581: PUSH
34582: LD_VAR 0 2
34586: ARRAY
34587: ST_TO_ADDR
// if not i then
34588: LD_VAR 0 5
34592: NOT
34593: IFFALSE 34597
// exit ;
34595: GO 34663
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34597: LD_ADDR_VAR 0 1
34601: PUSH
34602: LD_VAR 0 1
34606: PPUSH
34607: LD_VAR 0 2
34611: PPUSH
34612: LD_VAR 0 1
34616: PUSH
34617: LD_VAR 0 3
34621: ARRAY
34622: PPUSH
34623: CALL_OW 1
34627: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34628: LD_ADDR_VAR 0 1
34632: PUSH
34633: LD_VAR 0 1
34637: PPUSH
34638: LD_VAR 0 3
34642: PPUSH
34643: LD_VAR 0 5
34647: PPUSH
34648: CALL_OW 1
34652: ST_TO_ADDR
// result := list ;
34653: LD_ADDR_VAR 0 4
34657: PUSH
34658: LD_VAR 0 1
34662: ST_TO_ADDR
// end ;
34663: LD_VAR 0 4
34667: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34668: LD_INT 0
34670: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34671: LD_ADDR_VAR 0 5
34675: PUSH
34676: LD_VAR 0 1
34680: PPUSH
34681: CALL_OW 250
34685: PPUSH
34686: LD_VAR 0 1
34690: PPUSH
34691: CALL_OW 251
34695: PPUSH
34696: LD_VAR 0 2
34700: PPUSH
34701: LD_VAR 0 3
34705: PPUSH
34706: LD_VAR 0 4
34710: PPUSH
34711: CALL 35089 0 5
34715: ST_TO_ADDR
// end ;
34716: LD_VAR 0 5
34720: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
34721: LD_INT 0
34723: PPUSH
34724: PPUSH
34725: PPUSH
34726: PPUSH
// if not list or not unit then
34727: LD_VAR 0 2
34731: NOT
34732: PUSH
34733: LD_VAR 0 1
34737: NOT
34738: OR
34739: IFFALSE 34743
// exit ;
34741: GO 35084
// result := [ ] ;
34743: LD_ADDR_VAR 0 5
34747: PUSH
34748: EMPTY
34749: ST_TO_ADDR
// for i in list do
34750: LD_ADDR_VAR 0 6
34754: PUSH
34755: LD_VAR 0 2
34759: PUSH
34760: FOR_IN
34761: IFFALSE 34979
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
34763: LD_ADDR_VAR 0 8
34767: PUSH
34768: LD_VAR 0 1
34772: PPUSH
34773: LD_VAR 0 6
34777: PUSH
34778: LD_INT 1
34780: ARRAY
34781: PPUSH
34782: LD_VAR 0 6
34786: PUSH
34787: LD_INT 2
34789: ARRAY
34790: PPUSH
34791: CALL_OW 297
34795: ST_TO_ADDR
// if not Count ( result ) then
34796: LD_VAR 0 5
34800: PPUSH
34801: CALL 31373 0 1
34805: NOT
34806: IFFALSE 34839
// begin result := Join ( result , [ i , tmp ] ) ;
34808: LD_ADDR_VAR 0 5
34812: PUSH
34813: LD_VAR 0 5
34817: PPUSH
34818: LD_VAR 0 6
34822: PUSH
34823: LD_VAR 0 8
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PPUSH
34832: CALL 66973 0 2
34836: ST_TO_ADDR
// continue ;
34837: GO 34760
// end ; if result [ result ] [ 2 ] <= tmp then
34839: LD_VAR 0 5
34843: PUSH
34844: LD_VAR 0 5
34848: ARRAY
34849: PUSH
34850: LD_INT 2
34852: ARRAY
34853: PUSH
34854: LD_VAR 0 8
34858: LESSEQUAL
34859: IFFALSE 34892
// result := Join ( result , [ i , tmp ] ) else
34861: LD_ADDR_VAR 0 5
34865: PUSH
34866: LD_VAR 0 5
34870: PPUSH
34871: LD_VAR 0 6
34875: PUSH
34876: LD_VAR 0 8
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PPUSH
34885: CALL 66973 0 2
34889: ST_TO_ADDR
34890: GO 34977
// begin for j := 1 to Count ( result ) do
34892: LD_ADDR_VAR 0 7
34896: PUSH
34897: DOUBLE
34898: LD_INT 1
34900: DEC
34901: ST_TO_ADDR
34902: LD_VAR 0 5
34906: PPUSH
34907: CALL 31373 0 1
34911: PUSH
34912: FOR_TO
34913: IFFALSE 34975
// begin if tmp < result [ j ] [ 2 ] then
34915: LD_VAR 0 8
34919: PUSH
34920: LD_VAR 0 5
34924: PUSH
34925: LD_VAR 0 7
34929: ARRAY
34930: PUSH
34931: LD_INT 2
34933: ARRAY
34934: LESS
34935: IFFALSE 34973
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34937: LD_ADDR_VAR 0 5
34941: PUSH
34942: LD_VAR 0 5
34946: PPUSH
34947: LD_VAR 0 7
34951: PPUSH
34952: LD_VAR 0 6
34956: PUSH
34957: LD_VAR 0 8
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PPUSH
34966: CALL_OW 2
34970: ST_TO_ADDR
// break ;
34971: GO 34975
// end ; end ;
34973: GO 34912
34975: POP
34976: POP
// end ; end ;
34977: GO 34760
34979: POP
34980: POP
// if result and not asc then
34981: LD_VAR 0 5
34985: PUSH
34986: LD_VAR 0 3
34990: NOT
34991: AND
34992: IFFALSE 35009
// result := ReverseArray ( result ) ;
34994: LD_ADDR_VAR 0 5
34998: PUSH
34999: LD_VAR 0 5
35003: PPUSH
35004: CALL 62249 0 1
35008: ST_TO_ADDR
// tmp := [ ] ;
35009: LD_ADDR_VAR 0 8
35013: PUSH
35014: EMPTY
35015: ST_TO_ADDR
// if mode then
35016: LD_VAR 0 4
35020: IFFALSE 35084
// begin for i := 1 to result do
35022: LD_ADDR_VAR 0 6
35026: PUSH
35027: DOUBLE
35028: LD_INT 1
35030: DEC
35031: ST_TO_ADDR
35032: LD_VAR 0 5
35036: PUSH
35037: FOR_TO
35038: IFFALSE 35072
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
35040: LD_ADDR_VAR 0 8
35044: PUSH
35045: LD_VAR 0 8
35049: PPUSH
35050: LD_VAR 0 5
35054: PUSH
35055: LD_VAR 0 6
35059: ARRAY
35060: PUSH
35061: LD_INT 1
35063: ARRAY
35064: PPUSH
35065: CALL 66973 0 2
35069: ST_TO_ADDR
35070: GO 35037
35072: POP
35073: POP
// result := tmp ;
35074: LD_ADDR_VAR 0 5
35078: PUSH
35079: LD_VAR 0 8
35083: ST_TO_ADDR
// end ; end ;
35084: LD_VAR 0 5
35088: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35089: LD_INT 0
35091: PPUSH
35092: PPUSH
35093: PPUSH
35094: PPUSH
// if not list then
35095: LD_VAR 0 3
35099: NOT
35100: IFFALSE 35104
// exit ;
35102: GO 35492
// result := [ ] ;
35104: LD_ADDR_VAR 0 6
35108: PUSH
35109: EMPTY
35110: ST_TO_ADDR
// for i in list do
35111: LD_ADDR_VAR 0 7
35115: PUSH
35116: LD_VAR 0 3
35120: PUSH
35121: FOR_IN
35122: IFFALSE 35324
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35124: LD_ADDR_VAR 0 9
35128: PUSH
35129: LD_VAR 0 7
35133: PPUSH
35134: LD_VAR 0 1
35138: PPUSH
35139: LD_VAR 0 2
35143: PPUSH
35144: CALL_OW 297
35148: ST_TO_ADDR
// if not result then
35149: LD_VAR 0 6
35153: NOT
35154: IFFALSE 35180
// result := [ [ i , tmp ] ] else
35156: LD_ADDR_VAR 0 6
35160: PUSH
35161: LD_VAR 0 7
35165: PUSH
35166: LD_VAR 0 9
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: EMPTY
35176: LIST
35177: ST_TO_ADDR
35178: GO 35322
// begin if result [ result ] [ 2 ] < tmp then
35180: LD_VAR 0 6
35184: PUSH
35185: LD_VAR 0 6
35189: ARRAY
35190: PUSH
35191: LD_INT 2
35193: ARRAY
35194: PUSH
35195: LD_VAR 0 9
35199: LESS
35200: IFFALSE 35242
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35202: LD_ADDR_VAR 0 6
35206: PUSH
35207: LD_VAR 0 6
35211: PPUSH
35212: LD_VAR 0 6
35216: PUSH
35217: LD_INT 1
35219: PLUS
35220: PPUSH
35221: LD_VAR 0 7
35225: PUSH
35226: LD_VAR 0 9
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PPUSH
35235: CALL_OW 2
35239: ST_TO_ADDR
35240: GO 35322
// for j = 1 to result do
35242: LD_ADDR_VAR 0 8
35246: PUSH
35247: DOUBLE
35248: LD_INT 1
35250: DEC
35251: ST_TO_ADDR
35252: LD_VAR 0 6
35256: PUSH
35257: FOR_TO
35258: IFFALSE 35320
// begin if tmp < result [ j ] [ 2 ] then
35260: LD_VAR 0 9
35264: PUSH
35265: LD_VAR 0 6
35269: PUSH
35270: LD_VAR 0 8
35274: ARRAY
35275: PUSH
35276: LD_INT 2
35278: ARRAY
35279: LESS
35280: IFFALSE 35318
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35282: LD_ADDR_VAR 0 6
35286: PUSH
35287: LD_VAR 0 6
35291: PPUSH
35292: LD_VAR 0 8
35296: PPUSH
35297: LD_VAR 0 7
35301: PUSH
35302: LD_VAR 0 9
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PPUSH
35311: CALL_OW 2
35315: ST_TO_ADDR
// break ;
35316: GO 35320
// end ; end ;
35318: GO 35257
35320: POP
35321: POP
// end ; end ;
35322: GO 35121
35324: POP
35325: POP
// if result and not asc then
35326: LD_VAR 0 6
35330: PUSH
35331: LD_VAR 0 4
35335: NOT
35336: AND
35337: IFFALSE 35412
// begin tmp := result ;
35339: LD_ADDR_VAR 0 9
35343: PUSH
35344: LD_VAR 0 6
35348: ST_TO_ADDR
// for i = tmp downto 1 do
35349: LD_ADDR_VAR 0 7
35353: PUSH
35354: DOUBLE
35355: LD_VAR 0 9
35359: INC
35360: ST_TO_ADDR
35361: LD_INT 1
35363: PUSH
35364: FOR_DOWNTO
35365: IFFALSE 35410
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35367: LD_ADDR_VAR 0 6
35371: PUSH
35372: LD_VAR 0 6
35376: PPUSH
35377: LD_VAR 0 9
35381: PUSH
35382: LD_VAR 0 7
35386: MINUS
35387: PUSH
35388: LD_INT 1
35390: PLUS
35391: PPUSH
35392: LD_VAR 0 9
35396: PUSH
35397: LD_VAR 0 7
35401: ARRAY
35402: PPUSH
35403: CALL_OW 1
35407: ST_TO_ADDR
35408: GO 35364
35410: POP
35411: POP
// end ; tmp := [ ] ;
35412: LD_ADDR_VAR 0 9
35416: PUSH
35417: EMPTY
35418: ST_TO_ADDR
// if mode then
35419: LD_VAR 0 5
35423: IFFALSE 35492
// begin for i = 1 to result do
35425: LD_ADDR_VAR 0 7
35429: PUSH
35430: DOUBLE
35431: LD_INT 1
35433: DEC
35434: ST_TO_ADDR
35435: LD_VAR 0 6
35439: PUSH
35440: FOR_TO
35441: IFFALSE 35480
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35443: LD_ADDR_VAR 0 9
35447: PUSH
35448: LD_VAR 0 9
35452: PPUSH
35453: LD_VAR 0 7
35457: PPUSH
35458: LD_VAR 0 6
35462: PUSH
35463: LD_VAR 0 7
35467: ARRAY
35468: PUSH
35469: LD_INT 1
35471: ARRAY
35472: PPUSH
35473: CALL_OW 1
35477: ST_TO_ADDR
35478: GO 35440
35480: POP
35481: POP
// result := tmp ;
35482: LD_ADDR_VAR 0 6
35486: PUSH
35487: LD_VAR 0 9
35491: ST_TO_ADDR
// end ; end ;
35492: LD_VAR 0 6
35496: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35497: LD_INT 0
35499: PPUSH
35500: PPUSH
35501: PPUSH
35502: PPUSH
35503: PPUSH
35504: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35505: LD_ADDR_VAR 0 5
35509: PUSH
35510: LD_INT 0
35512: PUSH
35513: LD_INT 0
35515: PUSH
35516: LD_INT 0
35518: PUSH
35519: EMPTY
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: ST_TO_ADDR
// if not x or not y then
35527: LD_VAR 0 2
35531: NOT
35532: PUSH
35533: LD_VAR 0 3
35537: NOT
35538: OR
35539: IFFALSE 35543
// exit ;
35541: GO 37193
// if not range then
35543: LD_VAR 0 4
35547: NOT
35548: IFFALSE 35558
// range := 10 ;
35550: LD_ADDR_VAR 0 4
35554: PUSH
35555: LD_INT 10
35557: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35558: LD_ADDR_VAR 0 8
35562: PUSH
35563: LD_INT 81
35565: PUSH
35566: LD_VAR 0 1
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 92
35577: PUSH
35578: LD_VAR 0 2
35582: PUSH
35583: LD_VAR 0 3
35587: PUSH
35588: LD_VAR 0 4
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 3
35601: PUSH
35602: LD_INT 21
35604: PUSH
35605: LD_INT 3
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: LIST
35620: PPUSH
35621: CALL_OW 69
35625: ST_TO_ADDR
// if not tmp then
35626: LD_VAR 0 8
35630: NOT
35631: IFFALSE 35635
// exit ;
35633: GO 37193
// for i in tmp do
35635: LD_ADDR_VAR 0 6
35639: PUSH
35640: LD_VAR 0 8
35644: PUSH
35645: FOR_IN
35646: IFFALSE 37168
// begin points := [ 0 , 0 , 0 ] ;
35648: LD_ADDR_VAR 0 9
35652: PUSH
35653: LD_INT 0
35655: PUSH
35656: LD_INT 0
35658: PUSH
35659: LD_INT 0
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: LIST
35666: ST_TO_ADDR
// bpoints := 1 ;
35667: LD_ADDR_VAR 0 10
35671: PUSH
35672: LD_INT 1
35674: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35675: LD_VAR 0 6
35679: PPUSH
35680: CALL_OW 247
35684: PUSH
35685: LD_INT 1
35687: DOUBLE
35688: EQUAL
35689: IFTRUE 35693
35691: GO 36271
35693: POP
// begin if GetClass ( i ) = 1 then
35694: LD_VAR 0 6
35698: PPUSH
35699: CALL_OW 257
35703: PUSH
35704: LD_INT 1
35706: EQUAL
35707: IFFALSE 35728
// points := [ 10 , 5 , 3 ] ;
35709: LD_ADDR_VAR 0 9
35713: PUSH
35714: LD_INT 10
35716: PUSH
35717: LD_INT 5
35719: PUSH
35720: LD_INT 3
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: LIST
35727: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35728: LD_VAR 0 6
35732: PPUSH
35733: CALL_OW 257
35737: PUSH
35738: LD_INT 2
35740: PUSH
35741: LD_INT 3
35743: PUSH
35744: LD_INT 4
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: LIST
35751: IN
35752: IFFALSE 35773
// points := [ 3 , 2 , 1 ] ;
35754: LD_ADDR_VAR 0 9
35758: PUSH
35759: LD_INT 3
35761: PUSH
35762: LD_INT 2
35764: PUSH
35765: LD_INT 1
35767: PUSH
35768: EMPTY
35769: LIST
35770: LIST
35771: LIST
35772: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35773: LD_VAR 0 6
35777: PPUSH
35778: CALL_OW 257
35782: PUSH
35783: LD_INT 5
35785: EQUAL
35786: IFFALSE 35807
// points := [ 130 , 5 , 2 ] ;
35788: LD_ADDR_VAR 0 9
35792: PUSH
35793: LD_INT 130
35795: PUSH
35796: LD_INT 5
35798: PUSH
35799: LD_INT 2
35801: PUSH
35802: EMPTY
35803: LIST
35804: LIST
35805: LIST
35806: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35807: LD_VAR 0 6
35811: PPUSH
35812: CALL_OW 257
35816: PUSH
35817: LD_INT 8
35819: EQUAL
35820: IFFALSE 35841
// points := [ 35 , 35 , 30 ] ;
35822: LD_ADDR_VAR 0 9
35826: PUSH
35827: LD_INT 35
35829: PUSH
35830: LD_INT 35
35832: PUSH
35833: LD_INT 30
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: LIST
35840: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35841: LD_VAR 0 6
35845: PPUSH
35846: CALL_OW 257
35850: PUSH
35851: LD_INT 9
35853: EQUAL
35854: IFFALSE 35875
// points := [ 20 , 55 , 40 ] ;
35856: LD_ADDR_VAR 0 9
35860: PUSH
35861: LD_INT 20
35863: PUSH
35864: LD_INT 55
35866: PUSH
35867: LD_INT 40
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: LIST
35874: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35875: LD_VAR 0 6
35879: PPUSH
35880: CALL_OW 257
35884: PUSH
35885: LD_INT 12
35887: PUSH
35888: LD_INT 16
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: IN
35895: IFFALSE 35916
// points := [ 5 , 3 , 2 ] ;
35897: LD_ADDR_VAR 0 9
35901: PUSH
35902: LD_INT 5
35904: PUSH
35905: LD_INT 3
35907: PUSH
35908: LD_INT 2
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: LIST
35915: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35916: LD_VAR 0 6
35920: PPUSH
35921: CALL_OW 257
35925: PUSH
35926: LD_INT 17
35928: EQUAL
35929: IFFALSE 35950
// points := [ 100 , 50 , 75 ] ;
35931: LD_ADDR_VAR 0 9
35935: PUSH
35936: LD_INT 100
35938: PUSH
35939: LD_INT 50
35941: PUSH
35942: LD_INT 75
35944: PUSH
35945: EMPTY
35946: LIST
35947: LIST
35948: LIST
35949: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35950: LD_VAR 0 6
35954: PPUSH
35955: CALL_OW 257
35959: PUSH
35960: LD_INT 15
35962: EQUAL
35963: IFFALSE 35984
// points := [ 10 , 5 , 3 ] ;
35965: LD_ADDR_VAR 0 9
35969: PUSH
35970: LD_INT 10
35972: PUSH
35973: LD_INT 5
35975: PUSH
35976: LD_INT 3
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: LIST
35983: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35984: LD_VAR 0 6
35988: PPUSH
35989: CALL_OW 257
35993: PUSH
35994: LD_INT 14
35996: EQUAL
35997: IFFALSE 36018
// points := [ 10 , 0 , 0 ] ;
35999: LD_ADDR_VAR 0 9
36003: PUSH
36004: LD_INT 10
36006: PUSH
36007: LD_INT 0
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: LIST
36017: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36018: LD_VAR 0 6
36022: PPUSH
36023: CALL_OW 257
36027: PUSH
36028: LD_INT 11
36030: EQUAL
36031: IFFALSE 36052
// points := [ 30 , 10 , 5 ] ;
36033: LD_ADDR_VAR 0 9
36037: PUSH
36038: LD_INT 30
36040: PUSH
36041: LD_INT 10
36043: PUSH
36044: LD_INT 5
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: LIST
36051: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36052: LD_VAR 0 1
36056: PPUSH
36057: LD_INT 5
36059: PPUSH
36060: CALL_OW 321
36064: PUSH
36065: LD_INT 2
36067: EQUAL
36068: IFFALSE 36085
// bpoints := bpoints * 1.8 ;
36070: LD_ADDR_VAR 0 10
36074: PUSH
36075: LD_VAR 0 10
36079: PUSH
36080: LD_REAL  1.80000000000000E+0000
36083: MUL
36084: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36085: LD_VAR 0 6
36089: PPUSH
36090: CALL_OW 257
36094: PUSH
36095: LD_INT 1
36097: PUSH
36098: LD_INT 2
36100: PUSH
36101: LD_INT 3
36103: PUSH
36104: LD_INT 4
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: IN
36113: PUSH
36114: LD_VAR 0 1
36118: PPUSH
36119: LD_INT 51
36121: PPUSH
36122: CALL_OW 321
36126: PUSH
36127: LD_INT 2
36129: EQUAL
36130: AND
36131: IFFALSE 36148
// bpoints := bpoints * 1.2 ;
36133: LD_ADDR_VAR 0 10
36137: PUSH
36138: LD_VAR 0 10
36142: PUSH
36143: LD_REAL  1.20000000000000E+0000
36146: MUL
36147: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36148: LD_VAR 0 6
36152: PPUSH
36153: CALL_OW 257
36157: PUSH
36158: LD_INT 5
36160: PUSH
36161: LD_INT 7
36163: PUSH
36164: LD_INT 9
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: LIST
36171: IN
36172: PUSH
36173: LD_VAR 0 1
36177: PPUSH
36178: LD_INT 52
36180: PPUSH
36181: CALL_OW 321
36185: PUSH
36186: LD_INT 2
36188: EQUAL
36189: AND
36190: IFFALSE 36207
// bpoints := bpoints * 1.5 ;
36192: LD_ADDR_VAR 0 10
36196: PUSH
36197: LD_VAR 0 10
36201: PUSH
36202: LD_REAL  1.50000000000000E+0000
36205: MUL
36206: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36207: LD_VAR 0 1
36211: PPUSH
36212: LD_INT 66
36214: PPUSH
36215: CALL_OW 321
36219: PUSH
36220: LD_INT 2
36222: EQUAL
36223: IFFALSE 36240
// bpoints := bpoints * 1.1 ;
36225: LD_ADDR_VAR 0 10
36229: PUSH
36230: LD_VAR 0 10
36234: PUSH
36235: LD_REAL  1.10000000000000E+0000
36238: MUL
36239: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36240: LD_ADDR_VAR 0 10
36244: PUSH
36245: LD_VAR 0 10
36249: PUSH
36250: LD_VAR 0 6
36254: PPUSH
36255: LD_INT 1
36257: PPUSH
36258: CALL_OW 259
36262: PUSH
36263: LD_REAL  1.15000000000000E+0000
36266: MUL
36267: MUL
36268: ST_TO_ADDR
// end ; unit_vehicle :
36269: GO 37097
36271: LD_INT 2
36273: DOUBLE
36274: EQUAL
36275: IFTRUE 36279
36277: GO 37085
36279: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36280: LD_VAR 0 6
36284: PPUSH
36285: CALL_OW 264
36289: PUSH
36290: LD_INT 2
36292: PUSH
36293: LD_INT 42
36295: PUSH
36296: LD_INT 24
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: LIST
36303: IN
36304: IFFALSE 36325
// points := [ 25 , 5 , 3 ] ;
36306: LD_ADDR_VAR 0 9
36310: PUSH
36311: LD_INT 25
36313: PUSH
36314: LD_INT 5
36316: PUSH
36317: LD_INT 3
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: LIST
36324: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36325: LD_VAR 0 6
36329: PPUSH
36330: CALL_OW 264
36334: PUSH
36335: LD_INT 4
36337: PUSH
36338: LD_INT 43
36340: PUSH
36341: LD_INT 25
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: LIST
36348: IN
36349: IFFALSE 36370
// points := [ 40 , 15 , 5 ] ;
36351: LD_ADDR_VAR 0 9
36355: PUSH
36356: LD_INT 40
36358: PUSH
36359: LD_INT 15
36361: PUSH
36362: LD_INT 5
36364: PUSH
36365: EMPTY
36366: LIST
36367: LIST
36368: LIST
36369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36370: LD_VAR 0 6
36374: PPUSH
36375: CALL_OW 264
36379: PUSH
36380: LD_INT 3
36382: PUSH
36383: LD_INT 23
36385: PUSH
36386: EMPTY
36387: LIST
36388: LIST
36389: IN
36390: IFFALSE 36411
// points := [ 7 , 25 , 8 ] ;
36392: LD_ADDR_VAR 0 9
36396: PUSH
36397: LD_INT 7
36399: PUSH
36400: LD_INT 25
36402: PUSH
36403: LD_INT 8
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: LIST
36410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36411: LD_VAR 0 6
36415: PPUSH
36416: CALL_OW 264
36420: PUSH
36421: LD_INT 5
36423: PUSH
36424: LD_INT 27
36426: PUSH
36427: LD_INT 44
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: LIST
36434: IN
36435: IFFALSE 36456
// points := [ 14 , 50 , 16 ] ;
36437: LD_ADDR_VAR 0 9
36441: PUSH
36442: LD_INT 14
36444: PUSH
36445: LD_INT 50
36447: PUSH
36448: LD_INT 16
36450: PUSH
36451: EMPTY
36452: LIST
36453: LIST
36454: LIST
36455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36456: LD_VAR 0 6
36460: PPUSH
36461: CALL_OW 264
36465: PUSH
36466: LD_INT 6
36468: PUSH
36469: LD_INT 46
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: IN
36476: IFFALSE 36497
// points := [ 32 , 120 , 70 ] ;
36478: LD_ADDR_VAR 0 9
36482: PUSH
36483: LD_INT 32
36485: PUSH
36486: LD_INT 120
36488: PUSH
36489: LD_INT 70
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: LIST
36496: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36497: LD_VAR 0 6
36501: PPUSH
36502: CALL_OW 264
36506: PUSH
36507: LD_INT 7
36509: PUSH
36510: LD_INT 28
36512: PUSH
36513: LD_INT 45
36515: PUSH
36516: LD_INT 92
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: IN
36525: IFFALSE 36546
// points := [ 35 , 20 , 45 ] ;
36527: LD_ADDR_VAR 0 9
36531: PUSH
36532: LD_INT 35
36534: PUSH
36535: LD_INT 20
36537: PUSH
36538: LD_INT 45
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: LIST
36545: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36546: LD_VAR 0 6
36550: PPUSH
36551: CALL_OW 264
36555: PUSH
36556: LD_INT 47
36558: PUSH
36559: EMPTY
36560: LIST
36561: IN
36562: IFFALSE 36583
// points := [ 67 , 45 , 75 ] ;
36564: LD_ADDR_VAR 0 9
36568: PUSH
36569: LD_INT 67
36571: PUSH
36572: LD_INT 45
36574: PUSH
36575: LD_INT 75
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: LIST
36582: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36583: LD_VAR 0 6
36587: PPUSH
36588: CALL_OW 264
36592: PUSH
36593: LD_INT 26
36595: PUSH
36596: EMPTY
36597: LIST
36598: IN
36599: IFFALSE 36620
// points := [ 120 , 30 , 80 ] ;
36601: LD_ADDR_VAR 0 9
36605: PUSH
36606: LD_INT 120
36608: PUSH
36609: LD_INT 30
36611: PUSH
36612: LD_INT 80
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: LIST
36619: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36620: LD_VAR 0 6
36624: PPUSH
36625: CALL_OW 264
36629: PUSH
36630: LD_INT 22
36632: PUSH
36633: EMPTY
36634: LIST
36635: IN
36636: IFFALSE 36657
// points := [ 40 , 1 , 1 ] ;
36638: LD_ADDR_VAR 0 9
36642: PUSH
36643: LD_INT 40
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: LD_INT 1
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: LIST
36656: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36657: LD_VAR 0 6
36661: PPUSH
36662: CALL_OW 264
36666: PUSH
36667: LD_INT 29
36669: PUSH
36670: EMPTY
36671: LIST
36672: IN
36673: IFFALSE 36694
// points := [ 70 , 200 , 400 ] ;
36675: LD_ADDR_VAR 0 9
36679: PUSH
36680: LD_INT 70
36682: PUSH
36683: LD_INT 200
36685: PUSH
36686: LD_INT 400
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: LIST
36693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36694: LD_VAR 0 6
36698: PPUSH
36699: CALL_OW 264
36703: PUSH
36704: LD_INT 14
36706: PUSH
36707: LD_INT 53
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: IN
36714: IFFALSE 36735
// points := [ 40 , 10 , 20 ] ;
36716: LD_ADDR_VAR 0 9
36720: PUSH
36721: LD_INT 40
36723: PUSH
36724: LD_INT 10
36726: PUSH
36727: LD_INT 20
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: LIST
36734: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36735: LD_VAR 0 6
36739: PPUSH
36740: CALL_OW 264
36744: PUSH
36745: LD_INT 9
36747: PUSH
36748: EMPTY
36749: LIST
36750: IN
36751: IFFALSE 36772
// points := [ 5 , 70 , 20 ] ;
36753: LD_ADDR_VAR 0 9
36757: PUSH
36758: LD_INT 5
36760: PUSH
36761: LD_INT 70
36763: PUSH
36764: LD_INT 20
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: LIST
36771: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36772: LD_VAR 0 6
36776: PPUSH
36777: CALL_OW 264
36781: PUSH
36782: LD_INT 10
36784: PUSH
36785: EMPTY
36786: LIST
36787: IN
36788: IFFALSE 36809
// points := [ 35 , 110 , 70 ] ;
36790: LD_ADDR_VAR 0 9
36794: PUSH
36795: LD_INT 35
36797: PUSH
36798: LD_INT 110
36800: PUSH
36801: LD_INT 70
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: LIST
36808: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36809: LD_VAR 0 6
36813: PPUSH
36814: CALL_OW 265
36818: PUSH
36819: LD_INT 25
36821: EQUAL
36822: IFFALSE 36843
// points := [ 80 , 65 , 100 ] ;
36824: LD_ADDR_VAR 0 9
36828: PUSH
36829: LD_INT 80
36831: PUSH
36832: LD_INT 65
36834: PUSH
36835: LD_INT 100
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: LIST
36842: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36843: LD_VAR 0 6
36847: PPUSH
36848: CALL_OW 263
36852: PUSH
36853: LD_INT 1
36855: EQUAL
36856: IFFALSE 36891
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36858: LD_ADDR_VAR 0 10
36862: PUSH
36863: LD_VAR 0 10
36867: PUSH
36868: LD_VAR 0 6
36872: PPUSH
36873: CALL_OW 311
36877: PPUSH
36878: LD_INT 3
36880: PPUSH
36881: CALL_OW 259
36885: PUSH
36886: LD_INT 4
36888: MUL
36889: MUL
36890: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36891: LD_VAR 0 6
36895: PPUSH
36896: CALL_OW 263
36900: PUSH
36901: LD_INT 2
36903: EQUAL
36904: IFFALSE 36955
// begin j := IsControledBy ( i ) ;
36906: LD_ADDR_VAR 0 7
36910: PUSH
36911: LD_VAR 0 6
36915: PPUSH
36916: CALL_OW 312
36920: ST_TO_ADDR
// if j then
36921: LD_VAR 0 7
36925: IFFALSE 36955
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36927: LD_ADDR_VAR 0 10
36931: PUSH
36932: LD_VAR 0 10
36936: PUSH
36937: LD_VAR 0 7
36941: PPUSH
36942: LD_INT 3
36944: PPUSH
36945: CALL_OW 259
36949: PUSH
36950: LD_INT 3
36952: MUL
36953: MUL
36954: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36955: LD_VAR 0 6
36959: PPUSH
36960: CALL_OW 264
36964: PUSH
36965: LD_INT 5
36967: PUSH
36968: LD_INT 6
36970: PUSH
36971: LD_INT 46
36973: PUSH
36974: LD_INT 44
36976: PUSH
36977: LD_INT 47
36979: PUSH
36980: LD_INT 45
36982: PUSH
36983: LD_INT 28
36985: PUSH
36986: LD_INT 7
36988: PUSH
36989: LD_INT 27
36991: PUSH
36992: LD_INT 29
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: IN
37007: PUSH
37008: LD_VAR 0 1
37012: PPUSH
37013: LD_INT 52
37015: PPUSH
37016: CALL_OW 321
37020: PUSH
37021: LD_INT 2
37023: EQUAL
37024: AND
37025: IFFALSE 37042
// bpoints := bpoints * 1.2 ;
37027: LD_ADDR_VAR 0 10
37031: PUSH
37032: LD_VAR 0 10
37036: PUSH
37037: LD_REAL  1.20000000000000E+0000
37040: MUL
37041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37042: LD_VAR 0 6
37046: PPUSH
37047: CALL_OW 264
37051: PUSH
37052: LD_INT 6
37054: PUSH
37055: LD_INT 46
37057: PUSH
37058: LD_INT 47
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: LIST
37065: IN
37066: IFFALSE 37083
// bpoints := bpoints * 1.2 ;
37068: LD_ADDR_VAR 0 10
37072: PUSH
37073: LD_VAR 0 10
37077: PUSH
37078: LD_REAL  1.20000000000000E+0000
37081: MUL
37082: ST_TO_ADDR
// end ; unit_building :
37083: GO 37097
37085: LD_INT 3
37087: DOUBLE
37088: EQUAL
37089: IFTRUE 37093
37091: GO 37096
37093: POP
// ; end ;
37094: GO 37097
37096: POP
// for j = 1 to 3 do
37097: LD_ADDR_VAR 0 7
37101: PUSH
37102: DOUBLE
37103: LD_INT 1
37105: DEC
37106: ST_TO_ADDR
37107: LD_INT 3
37109: PUSH
37110: FOR_TO
37111: IFFALSE 37164
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37113: LD_ADDR_VAR 0 5
37117: PUSH
37118: LD_VAR 0 5
37122: PPUSH
37123: LD_VAR 0 7
37127: PPUSH
37128: LD_VAR 0 5
37132: PUSH
37133: LD_VAR 0 7
37137: ARRAY
37138: PUSH
37139: LD_VAR 0 9
37143: PUSH
37144: LD_VAR 0 7
37148: ARRAY
37149: PUSH
37150: LD_VAR 0 10
37154: MUL
37155: PLUS
37156: PPUSH
37157: CALL_OW 1
37161: ST_TO_ADDR
37162: GO 37110
37164: POP
37165: POP
// end ;
37166: GO 35645
37168: POP
37169: POP
// result := Replace ( result , 4 , tmp ) ;
37170: LD_ADDR_VAR 0 5
37174: PUSH
37175: LD_VAR 0 5
37179: PPUSH
37180: LD_INT 4
37182: PPUSH
37183: LD_VAR 0 8
37187: PPUSH
37188: CALL_OW 1
37192: ST_TO_ADDR
// end ;
37193: LD_VAR 0 5
37197: RET
// export function DangerAtRange ( unit , range ) ; begin
37198: LD_INT 0
37200: PPUSH
// if not unit then
37201: LD_VAR 0 1
37205: NOT
37206: IFFALSE 37210
// exit ;
37208: GO 37255
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37210: LD_ADDR_VAR 0 3
37214: PUSH
37215: LD_VAR 0 1
37219: PPUSH
37220: CALL_OW 255
37224: PPUSH
37225: LD_VAR 0 1
37229: PPUSH
37230: CALL_OW 250
37234: PPUSH
37235: LD_VAR 0 1
37239: PPUSH
37240: CALL_OW 251
37244: PPUSH
37245: LD_VAR 0 2
37249: PPUSH
37250: CALL 35497 0 4
37254: ST_TO_ADDR
// end ;
37255: LD_VAR 0 3
37259: RET
// export function DangerInArea ( side , area ) ; begin
37260: LD_INT 0
37262: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37263: LD_ADDR_VAR 0 3
37267: PUSH
37268: LD_VAR 0 2
37272: PPUSH
37273: LD_INT 81
37275: PUSH
37276: LD_VAR 0 1
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PPUSH
37285: CALL_OW 70
37289: ST_TO_ADDR
// end ;
37290: LD_VAR 0 3
37294: RET
// export function IsExtension ( b ) ; begin
37295: LD_INT 0
37297: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37298: LD_ADDR_VAR 0 2
37302: PUSH
37303: LD_VAR 0 1
37307: PUSH
37308: LD_INT 23
37310: PUSH
37311: LD_INT 20
37313: PUSH
37314: LD_INT 22
37316: PUSH
37317: LD_INT 17
37319: PUSH
37320: LD_INT 24
37322: PUSH
37323: LD_INT 21
37325: PUSH
37326: LD_INT 19
37328: PUSH
37329: LD_INT 16
37331: PUSH
37332: LD_INT 25
37334: PUSH
37335: LD_INT 18
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: IN
37350: ST_TO_ADDR
// end ;
37351: LD_VAR 0 2
37355: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37356: LD_INT 0
37358: PPUSH
37359: PPUSH
37360: PPUSH
// result := [ ] ;
37361: LD_ADDR_VAR 0 4
37365: PUSH
37366: EMPTY
37367: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37368: LD_ADDR_VAR 0 5
37372: PUSH
37373: LD_VAR 0 2
37377: PPUSH
37378: LD_INT 21
37380: PUSH
37381: LD_INT 3
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PPUSH
37388: CALL_OW 70
37392: ST_TO_ADDR
// if not tmp then
37393: LD_VAR 0 5
37397: NOT
37398: IFFALSE 37402
// exit ;
37400: GO 37466
// if checkLink then
37402: LD_VAR 0 3
37406: IFFALSE 37456
// begin for i in tmp do
37408: LD_ADDR_VAR 0 6
37412: PUSH
37413: LD_VAR 0 5
37417: PUSH
37418: FOR_IN
37419: IFFALSE 37454
// if GetBase ( i ) <> base then
37421: LD_VAR 0 6
37425: PPUSH
37426: CALL_OW 274
37430: PUSH
37431: LD_VAR 0 1
37435: NONEQUAL
37436: IFFALSE 37452
// ComLinkToBase ( base , i ) ;
37438: LD_VAR 0 1
37442: PPUSH
37443: LD_VAR 0 6
37447: PPUSH
37448: CALL_OW 169
37452: GO 37418
37454: POP
37455: POP
// end ; result := tmp ;
37456: LD_ADDR_VAR 0 4
37460: PUSH
37461: LD_VAR 0 5
37465: ST_TO_ADDR
// end ;
37466: LD_VAR 0 4
37470: RET
// export function ComComplete ( units , b ) ; var i ; begin
37471: LD_INT 0
37473: PPUSH
37474: PPUSH
// if not units then
37475: LD_VAR 0 1
37479: NOT
37480: IFFALSE 37484
// exit ;
37482: GO 37574
// for i in units do
37484: LD_ADDR_VAR 0 4
37488: PUSH
37489: LD_VAR 0 1
37493: PUSH
37494: FOR_IN
37495: IFFALSE 37572
// if BuildingStatus ( b ) = bs_build then
37497: LD_VAR 0 2
37501: PPUSH
37502: CALL_OW 461
37506: PUSH
37507: LD_INT 1
37509: EQUAL
37510: IFFALSE 37570
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37512: LD_VAR 0 4
37516: PPUSH
37517: LD_STRING h
37519: PUSH
37520: LD_VAR 0 2
37524: PPUSH
37525: CALL_OW 250
37529: PUSH
37530: LD_VAR 0 2
37534: PPUSH
37535: CALL_OW 251
37539: PUSH
37540: LD_VAR 0 2
37544: PUSH
37545: LD_INT 0
37547: PUSH
37548: LD_INT 0
37550: PUSH
37551: LD_INT 0
37553: PUSH
37554: EMPTY
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: PUSH
37563: EMPTY
37564: LIST
37565: PPUSH
37566: CALL_OW 446
37570: GO 37494
37572: POP
37573: POP
// end ;
37574: LD_VAR 0 3
37578: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37579: LD_INT 0
37581: PPUSH
37582: PPUSH
37583: PPUSH
37584: PPUSH
37585: PPUSH
37586: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37587: LD_VAR 0 1
37591: NOT
37592: PUSH
37593: LD_VAR 0 1
37597: PPUSH
37598: CALL_OW 263
37602: PUSH
37603: LD_INT 2
37605: NONEQUAL
37606: OR
37607: IFFALSE 37611
// exit ;
37609: GO 37927
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37611: LD_ADDR_VAR 0 6
37615: PUSH
37616: LD_INT 22
37618: PUSH
37619: LD_VAR 0 1
37623: PPUSH
37624: CALL_OW 255
37628: PUSH
37629: EMPTY
37630: LIST
37631: LIST
37632: PUSH
37633: LD_INT 2
37635: PUSH
37636: LD_INT 30
37638: PUSH
37639: LD_INT 36
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 34
37648: PUSH
37649: LD_INT 31
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: LIST
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PPUSH
37665: CALL_OW 69
37669: ST_TO_ADDR
// if not tmp then
37670: LD_VAR 0 6
37674: NOT
37675: IFFALSE 37679
// exit ;
37677: GO 37927
// result := [ ] ;
37679: LD_ADDR_VAR 0 2
37683: PUSH
37684: EMPTY
37685: ST_TO_ADDR
// for i in tmp do
37686: LD_ADDR_VAR 0 3
37690: PUSH
37691: LD_VAR 0 6
37695: PUSH
37696: FOR_IN
37697: IFFALSE 37768
// begin t := UnitsInside ( i ) ;
37699: LD_ADDR_VAR 0 4
37703: PUSH
37704: LD_VAR 0 3
37708: PPUSH
37709: CALL_OW 313
37713: ST_TO_ADDR
// if t then
37714: LD_VAR 0 4
37718: IFFALSE 37766
// for j in t do
37720: LD_ADDR_VAR 0 7
37724: PUSH
37725: LD_VAR 0 4
37729: PUSH
37730: FOR_IN
37731: IFFALSE 37764
// result := Replace ( result , result + 1 , j ) ;
37733: LD_ADDR_VAR 0 2
37737: PUSH
37738: LD_VAR 0 2
37742: PPUSH
37743: LD_VAR 0 2
37747: PUSH
37748: LD_INT 1
37750: PLUS
37751: PPUSH
37752: LD_VAR 0 7
37756: PPUSH
37757: CALL_OW 1
37761: ST_TO_ADDR
37762: GO 37730
37764: POP
37765: POP
// end ;
37766: GO 37696
37768: POP
37769: POP
// if not result then
37770: LD_VAR 0 2
37774: NOT
37775: IFFALSE 37779
// exit ;
37777: GO 37927
// mech := result [ 1 ] ;
37779: LD_ADDR_VAR 0 5
37783: PUSH
37784: LD_VAR 0 2
37788: PUSH
37789: LD_INT 1
37791: ARRAY
37792: ST_TO_ADDR
// if result > 1 then
37793: LD_VAR 0 2
37797: PUSH
37798: LD_INT 1
37800: GREATER
37801: IFFALSE 37913
// begin for i = 2 to result do
37803: LD_ADDR_VAR 0 3
37807: PUSH
37808: DOUBLE
37809: LD_INT 2
37811: DEC
37812: ST_TO_ADDR
37813: LD_VAR 0 2
37817: PUSH
37818: FOR_TO
37819: IFFALSE 37911
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37821: LD_ADDR_VAR 0 4
37825: PUSH
37826: LD_VAR 0 2
37830: PUSH
37831: LD_VAR 0 3
37835: ARRAY
37836: PPUSH
37837: LD_INT 3
37839: PPUSH
37840: CALL_OW 259
37844: PUSH
37845: LD_VAR 0 2
37849: PUSH
37850: LD_VAR 0 3
37854: ARRAY
37855: PPUSH
37856: CALL_OW 432
37860: MINUS
37861: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37862: LD_VAR 0 4
37866: PUSH
37867: LD_VAR 0 5
37871: PPUSH
37872: LD_INT 3
37874: PPUSH
37875: CALL_OW 259
37879: PUSH
37880: LD_VAR 0 5
37884: PPUSH
37885: CALL_OW 432
37889: MINUS
37890: GREATEREQUAL
37891: IFFALSE 37909
// mech := result [ i ] ;
37893: LD_ADDR_VAR 0 5
37897: PUSH
37898: LD_VAR 0 2
37902: PUSH
37903: LD_VAR 0 3
37907: ARRAY
37908: ST_TO_ADDR
// end ;
37909: GO 37818
37911: POP
37912: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37913: LD_VAR 0 1
37917: PPUSH
37918: LD_VAR 0 5
37922: PPUSH
37923: CALL_OW 135
// end ;
37927: LD_VAR 0 2
37931: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37932: LD_INT 0
37934: PPUSH
37935: PPUSH
37936: PPUSH
37937: PPUSH
37938: PPUSH
37939: PPUSH
37940: PPUSH
37941: PPUSH
37942: PPUSH
37943: PPUSH
37944: PPUSH
37945: PPUSH
37946: PPUSH
// result := [ ] ;
37947: LD_ADDR_VAR 0 7
37951: PUSH
37952: EMPTY
37953: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37954: LD_VAR 0 1
37958: PPUSH
37959: CALL_OW 266
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: LD_INT 1
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: IN
37974: NOT
37975: IFFALSE 37979
// exit ;
37977: GO 39613
// if name then
37979: LD_VAR 0 3
37983: IFFALSE 37999
// SetBName ( base_dep , name ) ;
37985: LD_VAR 0 1
37989: PPUSH
37990: LD_VAR 0 3
37994: PPUSH
37995: CALL_OW 500
// base := GetBase ( base_dep ) ;
37999: LD_ADDR_VAR 0 15
38003: PUSH
38004: LD_VAR 0 1
38008: PPUSH
38009: CALL_OW 274
38013: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38014: LD_ADDR_VAR 0 16
38018: PUSH
38019: LD_VAR 0 1
38023: PPUSH
38024: CALL_OW 255
38028: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38029: LD_ADDR_VAR 0 17
38033: PUSH
38034: LD_VAR 0 1
38038: PPUSH
38039: CALL_OW 248
38043: ST_TO_ADDR
// if sources then
38044: LD_VAR 0 5
38048: IFFALSE 38095
// for i = 1 to 3 do
38050: LD_ADDR_VAR 0 8
38054: PUSH
38055: DOUBLE
38056: LD_INT 1
38058: DEC
38059: ST_TO_ADDR
38060: LD_INT 3
38062: PUSH
38063: FOR_TO
38064: IFFALSE 38093
// AddResourceType ( base , i , sources [ i ] ) ;
38066: LD_VAR 0 15
38070: PPUSH
38071: LD_VAR 0 8
38075: PPUSH
38076: LD_VAR 0 5
38080: PUSH
38081: LD_VAR 0 8
38085: ARRAY
38086: PPUSH
38087: CALL_OW 276
38091: GO 38063
38093: POP
38094: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38095: LD_ADDR_VAR 0 18
38099: PUSH
38100: LD_VAR 0 15
38104: PPUSH
38105: LD_VAR 0 2
38109: PPUSH
38110: LD_INT 1
38112: PPUSH
38113: CALL 37356 0 3
38117: ST_TO_ADDR
// InitHc ;
38118: CALL_OW 19
// InitUc ;
38122: CALL_OW 18
// uc_side := side ;
38126: LD_ADDR_OWVAR 20
38130: PUSH
38131: LD_VAR 0 16
38135: ST_TO_ADDR
// uc_nation := nation ;
38136: LD_ADDR_OWVAR 21
38140: PUSH
38141: LD_VAR 0 17
38145: ST_TO_ADDR
// if buildings then
38146: LD_VAR 0 18
38150: IFFALSE 39472
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38152: LD_ADDR_VAR 0 19
38156: PUSH
38157: LD_VAR 0 18
38161: PPUSH
38162: LD_INT 2
38164: PUSH
38165: LD_INT 30
38167: PUSH
38168: LD_INT 29
38170: PUSH
38171: EMPTY
38172: LIST
38173: LIST
38174: PUSH
38175: LD_INT 30
38177: PUSH
38178: LD_INT 30
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: LIST
38189: PPUSH
38190: CALL_OW 72
38194: ST_TO_ADDR
// if tmp then
38195: LD_VAR 0 19
38199: IFFALSE 38247
// for i in tmp do
38201: LD_ADDR_VAR 0 8
38205: PUSH
38206: LD_VAR 0 19
38210: PUSH
38211: FOR_IN
38212: IFFALSE 38245
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38214: LD_VAR 0 8
38218: PPUSH
38219: CALL_OW 250
38223: PPUSH
38224: LD_VAR 0 8
38228: PPUSH
38229: CALL_OW 251
38233: PPUSH
38234: LD_VAR 0 16
38238: PPUSH
38239: CALL_OW 441
38243: GO 38211
38245: POP
38246: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38247: LD_VAR 0 18
38251: PPUSH
38252: LD_INT 2
38254: PUSH
38255: LD_INT 30
38257: PUSH
38258: LD_INT 32
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 30
38267: PUSH
38268: LD_INT 33
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: LIST
38279: PPUSH
38280: CALL_OW 72
38284: IFFALSE 38372
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38286: LD_ADDR_VAR 0 8
38290: PUSH
38291: LD_VAR 0 18
38295: PPUSH
38296: LD_INT 2
38298: PUSH
38299: LD_INT 30
38301: PUSH
38302: LD_INT 32
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 30
38311: PUSH
38312: LD_INT 33
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: LIST
38323: PPUSH
38324: CALL_OW 72
38328: PUSH
38329: FOR_IN
38330: IFFALSE 38370
// begin if not GetBWeapon ( i ) then
38332: LD_VAR 0 8
38336: PPUSH
38337: CALL_OW 269
38341: NOT
38342: IFFALSE 38368
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38344: LD_VAR 0 8
38348: PPUSH
38349: LD_VAR 0 8
38353: PPUSH
38354: LD_VAR 0 2
38358: PPUSH
38359: CALL 39618 0 2
38363: PPUSH
38364: CALL_OW 431
// end ;
38368: GO 38329
38370: POP
38371: POP
// end ; for i = 1 to personel do
38372: LD_ADDR_VAR 0 8
38376: PUSH
38377: DOUBLE
38378: LD_INT 1
38380: DEC
38381: ST_TO_ADDR
38382: LD_VAR 0 6
38386: PUSH
38387: FOR_TO
38388: IFFALSE 39452
// begin if i > 4 then
38390: LD_VAR 0 8
38394: PUSH
38395: LD_INT 4
38397: GREATER
38398: IFFALSE 38402
// break ;
38400: GO 39452
// case i of 1 :
38402: LD_VAR 0 8
38406: PUSH
38407: LD_INT 1
38409: DOUBLE
38410: EQUAL
38411: IFTRUE 38415
38413: GO 38495
38415: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38416: LD_ADDR_VAR 0 12
38420: PUSH
38421: LD_VAR 0 18
38425: PPUSH
38426: LD_INT 22
38428: PUSH
38429: LD_VAR 0 16
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 58
38440: PUSH
38441: EMPTY
38442: LIST
38443: PUSH
38444: LD_INT 2
38446: PUSH
38447: LD_INT 30
38449: PUSH
38450: LD_INT 32
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 30
38459: PUSH
38460: LD_INT 4
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 30
38469: PUSH
38470: LD_INT 5
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: LIST
38487: PPUSH
38488: CALL_OW 72
38492: ST_TO_ADDR
38493: GO 38717
38495: LD_INT 2
38497: DOUBLE
38498: EQUAL
38499: IFTRUE 38503
38501: GO 38565
38503: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38504: LD_ADDR_VAR 0 12
38508: PUSH
38509: LD_VAR 0 18
38513: PPUSH
38514: LD_INT 22
38516: PUSH
38517: LD_VAR 0 16
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 2
38528: PUSH
38529: LD_INT 30
38531: PUSH
38532: LD_INT 0
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 30
38541: PUSH
38542: LD_INT 1
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: LIST
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PPUSH
38558: CALL_OW 72
38562: ST_TO_ADDR
38563: GO 38717
38565: LD_INT 3
38567: DOUBLE
38568: EQUAL
38569: IFTRUE 38573
38571: GO 38635
38573: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38574: LD_ADDR_VAR 0 12
38578: PUSH
38579: LD_VAR 0 18
38583: PPUSH
38584: LD_INT 22
38586: PUSH
38587: LD_VAR 0 16
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 2
38598: PUSH
38599: LD_INT 30
38601: PUSH
38602: LD_INT 2
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 30
38611: PUSH
38612: LD_INT 3
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: LIST
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PPUSH
38628: CALL_OW 72
38632: ST_TO_ADDR
38633: GO 38717
38635: LD_INT 4
38637: DOUBLE
38638: EQUAL
38639: IFTRUE 38643
38641: GO 38716
38643: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38644: LD_ADDR_VAR 0 12
38648: PUSH
38649: LD_VAR 0 18
38653: PPUSH
38654: LD_INT 22
38656: PUSH
38657: LD_VAR 0 16
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 2
38668: PUSH
38669: LD_INT 30
38671: PUSH
38672: LD_INT 6
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 30
38681: PUSH
38682: LD_INT 7
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 30
38691: PUSH
38692: LD_INT 8
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: EMPTY
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PPUSH
38709: CALL_OW 72
38713: ST_TO_ADDR
38714: GO 38717
38716: POP
// if i = 1 then
38717: LD_VAR 0 8
38721: PUSH
38722: LD_INT 1
38724: EQUAL
38725: IFFALSE 38836
// begin tmp := [ ] ;
38727: LD_ADDR_VAR 0 19
38731: PUSH
38732: EMPTY
38733: ST_TO_ADDR
// for j in f do
38734: LD_ADDR_VAR 0 9
38738: PUSH
38739: LD_VAR 0 12
38743: PUSH
38744: FOR_IN
38745: IFFALSE 38818
// if GetBType ( j ) = b_bunker then
38747: LD_VAR 0 9
38751: PPUSH
38752: CALL_OW 266
38756: PUSH
38757: LD_INT 32
38759: EQUAL
38760: IFFALSE 38787
// tmp := Insert ( tmp , 1 , j ) else
38762: LD_ADDR_VAR 0 19
38766: PUSH
38767: LD_VAR 0 19
38771: PPUSH
38772: LD_INT 1
38774: PPUSH
38775: LD_VAR 0 9
38779: PPUSH
38780: CALL_OW 2
38784: ST_TO_ADDR
38785: GO 38816
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38787: LD_ADDR_VAR 0 19
38791: PUSH
38792: LD_VAR 0 19
38796: PPUSH
38797: LD_VAR 0 19
38801: PUSH
38802: LD_INT 1
38804: PLUS
38805: PPUSH
38806: LD_VAR 0 9
38810: PPUSH
38811: CALL_OW 2
38815: ST_TO_ADDR
38816: GO 38744
38818: POP
38819: POP
// if tmp then
38820: LD_VAR 0 19
38824: IFFALSE 38836
// f := tmp ;
38826: LD_ADDR_VAR 0 12
38830: PUSH
38831: LD_VAR 0 19
38835: ST_TO_ADDR
// end ; x := personel [ i ] ;
38836: LD_ADDR_VAR 0 13
38840: PUSH
38841: LD_VAR 0 6
38845: PUSH
38846: LD_VAR 0 8
38850: ARRAY
38851: ST_TO_ADDR
// if x = - 1 then
38852: LD_VAR 0 13
38856: PUSH
38857: LD_INT 1
38859: NEG
38860: EQUAL
38861: IFFALSE 39070
// begin for j in f do
38863: LD_ADDR_VAR 0 9
38867: PUSH
38868: LD_VAR 0 12
38872: PUSH
38873: FOR_IN
38874: IFFALSE 39066
// repeat InitHc ;
38876: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38880: LD_VAR 0 9
38884: PPUSH
38885: CALL_OW 266
38889: PUSH
38890: LD_INT 5
38892: EQUAL
38893: IFFALSE 38963
// begin if UnitsInside ( j ) < 3 then
38895: LD_VAR 0 9
38899: PPUSH
38900: CALL_OW 313
38904: PUSH
38905: LD_INT 3
38907: LESS
38908: IFFALSE 38944
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38910: LD_INT 0
38912: PPUSH
38913: LD_INT 5
38915: PUSH
38916: LD_INT 8
38918: PUSH
38919: LD_INT 9
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: LIST
38926: PUSH
38927: LD_VAR 0 17
38931: ARRAY
38932: PPUSH
38933: LD_VAR 0 4
38937: PPUSH
38938: CALL_OW 380
38942: GO 38961
// PrepareHuman ( false , i , skill ) ;
38944: LD_INT 0
38946: PPUSH
38947: LD_VAR 0 8
38951: PPUSH
38952: LD_VAR 0 4
38956: PPUSH
38957: CALL_OW 380
// end else
38961: GO 38980
// PrepareHuman ( false , i , skill ) ;
38963: LD_INT 0
38965: PPUSH
38966: LD_VAR 0 8
38970: PPUSH
38971: LD_VAR 0 4
38975: PPUSH
38976: CALL_OW 380
// un := CreateHuman ;
38980: LD_ADDR_VAR 0 14
38984: PUSH
38985: CALL_OW 44
38989: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38990: LD_ADDR_VAR 0 7
38994: PUSH
38995: LD_VAR 0 7
38999: PPUSH
39000: LD_INT 1
39002: PPUSH
39003: LD_VAR 0 14
39007: PPUSH
39008: CALL_OW 2
39012: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39013: LD_VAR 0 14
39017: PPUSH
39018: LD_VAR 0 9
39022: PPUSH
39023: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39027: LD_VAR 0 9
39031: PPUSH
39032: CALL_OW 313
39036: PUSH
39037: LD_INT 6
39039: EQUAL
39040: PUSH
39041: LD_VAR 0 9
39045: PPUSH
39046: CALL_OW 266
39050: PUSH
39051: LD_INT 32
39053: PUSH
39054: LD_INT 31
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: IN
39061: OR
39062: IFFALSE 38876
39064: GO 38873
39066: POP
39067: POP
// end else
39068: GO 39450
// for j = 1 to x do
39070: LD_ADDR_VAR 0 9
39074: PUSH
39075: DOUBLE
39076: LD_INT 1
39078: DEC
39079: ST_TO_ADDR
39080: LD_VAR 0 13
39084: PUSH
39085: FOR_TO
39086: IFFALSE 39448
// begin InitHc ;
39088: CALL_OW 19
// if not f then
39092: LD_VAR 0 12
39096: NOT
39097: IFFALSE 39186
// begin PrepareHuman ( false , i , skill ) ;
39099: LD_INT 0
39101: PPUSH
39102: LD_VAR 0 8
39106: PPUSH
39107: LD_VAR 0 4
39111: PPUSH
39112: CALL_OW 380
// un := CreateHuman ;
39116: LD_ADDR_VAR 0 14
39120: PUSH
39121: CALL_OW 44
39125: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39126: LD_ADDR_VAR 0 7
39130: PUSH
39131: LD_VAR 0 7
39135: PPUSH
39136: LD_INT 1
39138: PPUSH
39139: LD_VAR 0 14
39143: PPUSH
39144: CALL_OW 2
39148: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39149: LD_VAR 0 14
39153: PPUSH
39154: LD_VAR 0 1
39158: PPUSH
39159: CALL_OW 250
39163: PPUSH
39164: LD_VAR 0 1
39168: PPUSH
39169: CALL_OW 251
39173: PPUSH
39174: LD_INT 10
39176: PPUSH
39177: LD_INT 0
39179: PPUSH
39180: CALL_OW 50
// continue ;
39184: GO 39085
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39186: LD_VAR 0 12
39190: PUSH
39191: LD_INT 1
39193: ARRAY
39194: PPUSH
39195: CALL_OW 313
39199: PUSH
39200: LD_VAR 0 12
39204: PUSH
39205: LD_INT 1
39207: ARRAY
39208: PPUSH
39209: CALL_OW 266
39213: PUSH
39214: LD_INT 32
39216: PUSH
39217: LD_INT 31
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: IN
39224: AND
39225: PUSH
39226: LD_VAR 0 12
39230: PUSH
39231: LD_INT 1
39233: ARRAY
39234: PPUSH
39235: CALL_OW 313
39239: PUSH
39240: LD_INT 6
39242: EQUAL
39243: OR
39244: IFFALSE 39264
// f := Delete ( f , 1 ) ;
39246: LD_ADDR_VAR 0 12
39250: PUSH
39251: LD_VAR 0 12
39255: PPUSH
39256: LD_INT 1
39258: PPUSH
39259: CALL_OW 3
39263: ST_TO_ADDR
// if not f then
39264: LD_VAR 0 12
39268: NOT
39269: IFFALSE 39287
// begin x := x + 2 ;
39271: LD_ADDR_VAR 0 13
39275: PUSH
39276: LD_VAR 0 13
39280: PUSH
39281: LD_INT 2
39283: PLUS
39284: ST_TO_ADDR
// continue ;
39285: GO 39085
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39287: LD_VAR 0 12
39291: PUSH
39292: LD_INT 1
39294: ARRAY
39295: PPUSH
39296: CALL_OW 266
39300: PUSH
39301: LD_INT 5
39303: EQUAL
39304: IFFALSE 39378
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39306: LD_VAR 0 12
39310: PUSH
39311: LD_INT 1
39313: ARRAY
39314: PPUSH
39315: CALL_OW 313
39319: PUSH
39320: LD_INT 3
39322: LESS
39323: IFFALSE 39359
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39325: LD_INT 0
39327: PPUSH
39328: LD_INT 5
39330: PUSH
39331: LD_INT 8
39333: PUSH
39334: LD_INT 9
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: LIST
39341: PUSH
39342: LD_VAR 0 17
39346: ARRAY
39347: PPUSH
39348: LD_VAR 0 4
39352: PPUSH
39353: CALL_OW 380
39357: GO 39376
// PrepareHuman ( false , i , skill ) ;
39359: LD_INT 0
39361: PPUSH
39362: LD_VAR 0 8
39366: PPUSH
39367: LD_VAR 0 4
39371: PPUSH
39372: CALL_OW 380
// end else
39376: GO 39395
// PrepareHuman ( false , i , skill ) ;
39378: LD_INT 0
39380: PPUSH
39381: LD_VAR 0 8
39385: PPUSH
39386: LD_VAR 0 4
39390: PPUSH
39391: CALL_OW 380
// un := CreateHuman ;
39395: LD_ADDR_VAR 0 14
39399: PUSH
39400: CALL_OW 44
39404: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39405: LD_ADDR_VAR 0 7
39409: PUSH
39410: LD_VAR 0 7
39414: PPUSH
39415: LD_INT 1
39417: PPUSH
39418: LD_VAR 0 14
39422: PPUSH
39423: CALL_OW 2
39427: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39428: LD_VAR 0 14
39432: PPUSH
39433: LD_VAR 0 12
39437: PUSH
39438: LD_INT 1
39440: ARRAY
39441: PPUSH
39442: CALL_OW 52
// end ;
39446: GO 39085
39448: POP
39449: POP
// end ;
39450: GO 38387
39452: POP
39453: POP
// result := result ^ buildings ;
39454: LD_ADDR_VAR 0 7
39458: PUSH
39459: LD_VAR 0 7
39463: PUSH
39464: LD_VAR 0 18
39468: ADD
39469: ST_TO_ADDR
// end else
39470: GO 39613
// begin for i = 1 to personel do
39472: LD_ADDR_VAR 0 8
39476: PUSH
39477: DOUBLE
39478: LD_INT 1
39480: DEC
39481: ST_TO_ADDR
39482: LD_VAR 0 6
39486: PUSH
39487: FOR_TO
39488: IFFALSE 39611
// begin if i > 4 then
39490: LD_VAR 0 8
39494: PUSH
39495: LD_INT 4
39497: GREATER
39498: IFFALSE 39502
// break ;
39500: GO 39611
// x := personel [ i ] ;
39502: LD_ADDR_VAR 0 13
39506: PUSH
39507: LD_VAR 0 6
39511: PUSH
39512: LD_VAR 0 8
39516: ARRAY
39517: ST_TO_ADDR
// if x = - 1 then
39518: LD_VAR 0 13
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: EQUAL
39527: IFFALSE 39531
// continue ;
39529: GO 39487
// PrepareHuman ( false , i , skill ) ;
39531: LD_INT 0
39533: PPUSH
39534: LD_VAR 0 8
39538: PPUSH
39539: LD_VAR 0 4
39543: PPUSH
39544: CALL_OW 380
// un := CreateHuman ;
39548: LD_ADDR_VAR 0 14
39552: PUSH
39553: CALL_OW 44
39557: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39558: LD_VAR 0 14
39562: PPUSH
39563: LD_VAR 0 1
39567: PPUSH
39568: CALL_OW 250
39572: PPUSH
39573: LD_VAR 0 1
39577: PPUSH
39578: CALL_OW 251
39582: PPUSH
39583: LD_INT 10
39585: PPUSH
39586: LD_INT 0
39588: PPUSH
39589: CALL_OW 50
// result := result ^ un ;
39593: LD_ADDR_VAR 0 7
39597: PUSH
39598: LD_VAR 0 7
39602: PUSH
39603: LD_VAR 0 14
39607: ADD
39608: ST_TO_ADDR
// end ;
39609: GO 39487
39611: POP
39612: POP
// end ; end ;
39613: LD_VAR 0 7
39617: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39618: LD_INT 0
39620: PPUSH
39621: PPUSH
39622: PPUSH
39623: PPUSH
39624: PPUSH
39625: PPUSH
39626: PPUSH
39627: PPUSH
39628: PPUSH
39629: PPUSH
39630: PPUSH
39631: PPUSH
39632: PPUSH
39633: PPUSH
39634: PPUSH
39635: PPUSH
// result := false ;
39636: LD_ADDR_VAR 0 3
39640: PUSH
39641: LD_INT 0
39643: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39644: LD_VAR 0 1
39648: NOT
39649: PUSH
39650: LD_VAR 0 1
39654: PPUSH
39655: CALL_OW 266
39659: PUSH
39660: LD_INT 32
39662: PUSH
39663: LD_INT 33
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: IN
39670: NOT
39671: OR
39672: IFFALSE 39676
// exit ;
39674: GO 40785
// nat := GetNation ( tower ) ;
39676: LD_ADDR_VAR 0 12
39680: PUSH
39681: LD_VAR 0 1
39685: PPUSH
39686: CALL_OW 248
39690: ST_TO_ADDR
// side := GetSide ( tower ) ;
39691: LD_ADDR_VAR 0 16
39695: PUSH
39696: LD_VAR 0 1
39700: PPUSH
39701: CALL_OW 255
39705: ST_TO_ADDR
// x := GetX ( tower ) ;
39706: LD_ADDR_VAR 0 10
39710: PUSH
39711: LD_VAR 0 1
39715: PPUSH
39716: CALL_OW 250
39720: ST_TO_ADDR
// y := GetY ( tower ) ;
39721: LD_ADDR_VAR 0 11
39725: PUSH
39726: LD_VAR 0 1
39730: PPUSH
39731: CALL_OW 251
39735: ST_TO_ADDR
// if not x or not y then
39736: LD_VAR 0 10
39740: NOT
39741: PUSH
39742: LD_VAR 0 11
39746: NOT
39747: OR
39748: IFFALSE 39752
// exit ;
39750: GO 40785
// weapon := 0 ;
39752: LD_ADDR_VAR 0 18
39756: PUSH
39757: LD_INT 0
39759: ST_TO_ADDR
// fac_list := [ ] ;
39760: LD_ADDR_VAR 0 17
39764: PUSH
39765: EMPTY
39766: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39767: LD_ADDR_VAR 0 6
39771: PUSH
39772: LD_VAR 0 1
39776: PPUSH
39777: CALL_OW 274
39781: PPUSH
39782: LD_VAR 0 2
39786: PPUSH
39787: LD_INT 0
39789: PPUSH
39790: CALL 37356 0 3
39794: PPUSH
39795: LD_INT 30
39797: PUSH
39798: LD_INT 3
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PPUSH
39805: CALL_OW 72
39809: ST_TO_ADDR
// if not factories then
39810: LD_VAR 0 6
39814: NOT
39815: IFFALSE 39819
// exit ;
39817: GO 40785
// for i in factories do
39819: LD_ADDR_VAR 0 8
39823: PUSH
39824: LD_VAR 0 6
39828: PUSH
39829: FOR_IN
39830: IFFALSE 39855
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39832: LD_ADDR_VAR 0 17
39836: PUSH
39837: LD_VAR 0 17
39841: PUSH
39842: LD_VAR 0 8
39846: PPUSH
39847: CALL_OW 478
39851: UNION
39852: ST_TO_ADDR
39853: GO 39829
39855: POP
39856: POP
// if not fac_list then
39857: LD_VAR 0 17
39861: NOT
39862: IFFALSE 39866
// exit ;
39864: GO 40785
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39866: LD_ADDR_VAR 0 5
39870: PUSH
39871: LD_INT 4
39873: PUSH
39874: LD_INT 5
39876: PUSH
39877: LD_INT 9
39879: PUSH
39880: LD_INT 10
39882: PUSH
39883: LD_INT 6
39885: PUSH
39886: LD_INT 7
39888: PUSH
39889: LD_INT 11
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 27
39903: PUSH
39904: LD_INT 28
39906: PUSH
39907: LD_INT 26
39909: PUSH
39910: LD_INT 30
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 43
39921: PUSH
39922: LD_INT 44
39924: PUSH
39925: LD_INT 46
39927: PUSH
39928: LD_INT 45
39930: PUSH
39931: LD_INT 47
39933: PUSH
39934: LD_INT 49
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: LIST
39949: PUSH
39950: LD_VAR 0 12
39954: ARRAY
39955: ST_TO_ADDR
// list := list isect fac_list ;
39956: LD_ADDR_VAR 0 5
39960: PUSH
39961: LD_VAR 0 5
39965: PUSH
39966: LD_VAR 0 17
39970: ISECT
39971: ST_TO_ADDR
// if not list then
39972: LD_VAR 0 5
39976: NOT
39977: IFFALSE 39981
// exit ;
39979: GO 40785
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39981: LD_VAR 0 12
39985: PUSH
39986: LD_INT 3
39988: EQUAL
39989: PUSH
39990: LD_INT 49
39992: PUSH
39993: LD_VAR 0 5
39997: IN
39998: AND
39999: PUSH
40000: LD_INT 31
40002: PPUSH
40003: LD_VAR 0 16
40007: PPUSH
40008: CALL_OW 321
40012: PUSH
40013: LD_INT 2
40015: EQUAL
40016: AND
40017: IFFALSE 40077
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40019: LD_INT 22
40021: PUSH
40022: LD_VAR 0 16
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 35
40033: PUSH
40034: LD_INT 49
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 91
40043: PUSH
40044: LD_VAR 0 1
40048: PUSH
40049: LD_INT 10
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: LIST
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: LIST
40061: PPUSH
40062: CALL_OW 69
40066: NOT
40067: IFFALSE 40077
// weapon := ru_time_lapser ;
40069: LD_ADDR_VAR 0 18
40073: PUSH
40074: LD_INT 49
40076: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40077: LD_VAR 0 12
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: LD_INT 2
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: IN
40092: PUSH
40093: LD_INT 11
40095: PUSH
40096: LD_VAR 0 5
40100: IN
40101: PUSH
40102: LD_INT 30
40104: PUSH
40105: LD_VAR 0 5
40109: IN
40110: OR
40111: AND
40112: PUSH
40113: LD_INT 6
40115: PPUSH
40116: LD_VAR 0 16
40120: PPUSH
40121: CALL_OW 321
40125: PUSH
40126: LD_INT 2
40128: EQUAL
40129: AND
40130: IFFALSE 40295
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40132: LD_INT 22
40134: PUSH
40135: LD_VAR 0 16
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 2
40146: PUSH
40147: LD_INT 35
40149: PUSH
40150: LD_INT 11
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 35
40159: PUSH
40160: LD_INT 30
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 91
40174: PUSH
40175: LD_VAR 0 1
40179: PUSH
40180: LD_INT 18
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: LIST
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: LIST
40192: PPUSH
40193: CALL_OW 69
40197: NOT
40198: PUSH
40199: LD_INT 22
40201: PUSH
40202: LD_VAR 0 16
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 2
40213: PUSH
40214: LD_INT 30
40216: PUSH
40217: LD_INT 32
40219: PUSH
40220: EMPTY
40221: LIST
40222: LIST
40223: PUSH
40224: LD_INT 30
40226: PUSH
40227: LD_INT 33
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 91
40241: PUSH
40242: LD_VAR 0 1
40246: PUSH
40247: LD_INT 12
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: LIST
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: LIST
40259: PUSH
40260: EMPTY
40261: LIST
40262: PPUSH
40263: CALL_OW 69
40267: PUSH
40268: LD_INT 2
40270: GREATER
40271: AND
40272: IFFALSE 40295
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40274: LD_ADDR_VAR 0 18
40278: PUSH
40279: LD_INT 11
40281: PUSH
40282: LD_INT 30
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_VAR 0 12
40293: ARRAY
40294: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40295: LD_VAR 0 18
40299: NOT
40300: PUSH
40301: LD_INT 40
40303: PPUSH
40304: LD_VAR 0 16
40308: PPUSH
40309: CALL_OW 321
40313: PUSH
40314: LD_INT 2
40316: EQUAL
40317: AND
40318: PUSH
40319: LD_INT 7
40321: PUSH
40322: LD_VAR 0 5
40326: IN
40327: PUSH
40328: LD_INT 28
40330: PUSH
40331: LD_VAR 0 5
40335: IN
40336: OR
40337: PUSH
40338: LD_INT 45
40340: PUSH
40341: LD_VAR 0 5
40345: IN
40346: OR
40347: AND
40348: IFFALSE 40602
// begin hex := GetHexInfo ( x , y ) ;
40350: LD_ADDR_VAR 0 4
40354: PUSH
40355: LD_VAR 0 10
40359: PPUSH
40360: LD_VAR 0 11
40364: PPUSH
40365: CALL_OW 546
40369: ST_TO_ADDR
// if hex [ 1 ] then
40370: LD_VAR 0 4
40374: PUSH
40375: LD_INT 1
40377: ARRAY
40378: IFFALSE 40382
// exit ;
40380: GO 40785
// height := hex [ 2 ] ;
40382: LD_ADDR_VAR 0 15
40386: PUSH
40387: LD_VAR 0 4
40391: PUSH
40392: LD_INT 2
40394: ARRAY
40395: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40396: LD_ADDR_VAR 0 14
40400: PUSH
40401: LD_INT 0
40403: PUSH
40404: LD_INT 2
40406: PUSH
40407: LD_INT 3
40409: PUSH
40410: LD_INT 5
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: ST_TO_ADDR
// for i in tmp do
40419: LD_ADDR_VAR 0 8
40423: PUSH
40424: LD_VAR 0 14
40428: PUSH
40429: FOR_IN
40430: IFFALSE 40600
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40432: LD_ADDR_VAR 0 9
40436: PUSH
40437: LD_VAR 0 10
40441: PPUSH
40442: LD_VAR 0 8
40446: PPUSH
40447: LD_INT 5
40449: PPUSH
40450: CALL_OW 272
40454: PUSH
40455: LD_VAR 0 11
40459: PPUSH
40460: LD_VAR 0 8
40464: PPUSH
40465: LD_INT 5
40467: PPUSH
40468: CALL_OW 273
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40477: LD_VAR 0 9
40481: PUSH
40482: LD_INT 1
40484: ARRAY
40485: PPUSH
40486: LD_VAR 0 9
40490: PUSH
40491: LD_INT 2
40493: ARRAY
40494: PPUSH
40495: CALL_OW 488
40499: IFFALSE 40598
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40501: LD_ADDR_VAR 0 4
40505: PUSH
40506: LD_VAR 0 9
40510: PUSH
40511: LD_INT 1
40513: ARRAY
40514: PPUSH
40515: LD_VAR 0 9
40519: PUSH
40520: LD_INT 2
40522: ARRAY
40523: PPUSH
40524: CALL_OW 546
40528: ST_TO_ADDR
// if hex [ 1 ] then
40529: LD_VAR 0 4
40533: PUSH
40534: LD_INT 1
40536: ARRAY
40537: IFFALSE 40541
// continue ;
40539: GO 40429
// h := hex [ 2 ] ;
40541: LD_ADDR_VAR 0 13
40545: PUSH
40546: LD_VAR 0 4
40550: PUSH
40551: LD_INT 2
40553: ARRAY
40554: ST_TO_ADDR
// if h + 7 < height then
40555: LD_VAR 0 13
40559: PUSH
40560: LD_INT 7
40562: PLUS
40563: PUSH
40564: LD_VAR 0 15
40568: LESS
40569: IFFALSE 40598
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40571: LD_ADDR_VAR 0 18
40575: PUSH
40576: LD_INT 7
40578: PUSH
40579: LD_INT 28
40581: PUSH
40582: LD_INT 45
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: LIST
40589: PUSH
40590: LD_VAR 0 12
40594: ARRAY
40595: ST_TO_ADDR
// break ;
40596: GO 40600
// end ; end ; end ;
40598: GO 40429
40600: POP
40601: POP
// end ; if not weapon then
40602: LD_VAR 0 18
40606: NOT
40607: IFFALSE 40667
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40609: LD_ADDR_VAR 0 5
40613: PUSH
40614: LD_VAR 0 5
40618: PUSH
40619: LD_INT 11
40621: PUSH
40622: LD_INT 30
40624: PUSH
40625: LD_INT 49
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: LIST
40632: DIFF
40633: ST_TO_ADDR
// if not list then
40634: LD_VAR 0 5
40638: NOT
40639: IFFALSE 40643
// exit ;
40641: GO 40785
// weapon := list [ rand ( 1 , list ) ] ;
40643: LD_ADDR_VAR 0 18
40647: PUSH
40648: LD_VAR 0 5
40652: PUSH
40653: LD_INT 1
40655: PPUSH
40656: LD_VAR 0 5
40660: PPUSH
40661: CALL_OW 12
40665: ARRAY
40666: ST_TO_ADDR
// end ; if weapon then
40667: LD_VAR 0 18
40671: IFFALSE 40785
// begin tmp := CostOfWeapon ( weapon ) ;
40673: LD_ADDR_VAR 0 14
40677: PUSH
40678: LD_VAR 0 18
40682: PPUSH
40683: CALL_OW 451
40687: ST_TO_ADDR
// j := GetBase ( tower ) ;
40688: LD_ADDR_VAR 0 9
40692: PUSH
40693: LD_VAR 0 1
40697: PPUSH
40698: CALL_OW 274
40702: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40703: LD_VAR 0 9
40707: PPUSH
40708: LD_INT 1
40710: PPUSH
40711: CALL_OW 275
40715: PUSH
40716: LD_VAR 0 14
40720: PUSH
40721: LD_INT 1
40723: ARRAY
40724: GREATEREQUAL
40725: PUSH
40726: LD_VAR 0 9
40730: PPUSH
40731: LD_INT 2
40733: PPUSH
40734: CALL_OW 275
40738: PUSH
40739: LD_VAR 0 14
40743: PUSH
40744: LD_INT 2
40746: ARRAY
40747: GREATEREQUAL
40748: AND
40749: PUSH
40750: LD_VAR 0 9
40754: PPUSH
40755: LD_INT 3
40757: PPUSH
40758: CALL_OW 275
40762: PUSH
40763: LD_VAR 0 14
40767: PUSH
40768: LD_INT 3
40770: ARRAY
40771: GREATEREQUAL
40772: AND
40773: IFFALSE 40785
// result := weapon ;
40775: LD_ADDR_VAR 0 3
40779: PUSH
40780: LD_VAR 0 18
40784: ST_TO_ADDR
// end ; end ;
40785: LD_VAR 0 3
40789: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40790: LD_INT 0
40792: PPUSH
40793: PPUSH
// result := true ;
40794: LD_ADDR_VAR 0 3
40798: PUSH
40799: LD_INT 1
40801: ST_TO_ADDR
// if array1 = array2 then
40802: LD_VAR 0 1
40806: PUSH
40807: LD_VAR 0 2
40811: EQUAL
40812: IFFALSE 40872
// begin for i = 1 to array1 do
40814: LD_ADDR_VAR 0 4
40818: PUSH
40819: DOUBLE
40820: LD_INT 1
40822: DEC
40823: ST_TO_ADDR
40824: LD_VAR 0 1
40828: PUSH
40829: FOR_TO
40830: IFFALSE 40868
// if array1 [ i ] <> array2 [ i ] then
40832: LD_VAR 0 1
40836: PUSH
40837: LD_VAR 0 4
40841: ARRAY
40842: PUSH
40843: LD_VAR 0 2
40847: PUSH
40848: LD_VAR 0 4
40852: ARRAY
40853: NONEQUAL
40854: IFFALSE 40866
// begin result := false ;
40856: LD_ADDR_VAR 0 3
40860: PUSH
40861: LD_INT 0
40863: ST_TO_ADDR
// break ;
40864: GO 40868
// end ;
40866: GO 40829
40868: POP
40869: POP
// end else
40870: GO 40880
// result := false ;
40872: LD_ADDR_VAR 0 3
40876: PUSH
40877: LD_INT 0
40879: ST_TO_ADDR
// end ;
40880: LD_VAR 0 3
40884: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40885: LD_INT 0
40887: PPUSH
40888: PPUSH
// if not array1 or not array2 then
40889: LD_VAR 0 1
40893: NOT
40894: PUSH
40895: LD_VAR 0 2
40899: NOT
40900: OR
40901: IFFALSE 40905
// exit ;
40903: GO 40969
// result := true ;
40905: LD_ADDR_VAR 0 3
40909: PUSH
40910: LD_INT 1
40912: ST_TO_ADDR
// for i = 1 to array1 do
40913: LD_ADDR_VAR 0 4
40917: PUSH
40918: DOUBLE
40919: LD_INT 1
40921: DEC
40922: ST_TO_ADDR
40923: LD_VAR 0 1
40927: PUSH
40928: FOR_TO
40929: IFFALSE 40967
// if array1 [ i ] <> array2 [ i ] then
40931: LD_VAR 0 1
40935: PUSH
40936: LD_VAR 0 4
40940: ARRAY
40941: PUSH
40942: LD_VAR 0 2
40946: PUSH
40947: LD_VAR 0 4
40951: ARRAY
40952: NONEQUAL
40953: IFFALSE 40965
// begin result := false ;
40955: LD_ADDR_VAR 0 3
40959: PUSH
40960: LD_INT 0
40962: ST_TO_ADDR
// break ;
40963: GO 40967
// end ;
40965: GO 40928
40967: POP
40968: POP
// end ;
40969: LD_VAR 0 3
40973: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40974: LD_INT 0
40976: PPUSH
40977: PPUSH
40978: PPUSH
// pom := GetBase ( fac ) ;
40979: LD_ADDR_VAR 0 5
40983: PUSH
40984: LD_VAR 0 1
40988: PPUSH
40989: CALL_OW 274
40993: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40994: LD_ADDR_VAR 0 4
40998: PUSH
40999: LD_VAR 0 2
41003: PUSH
41004: LD_INT 1
41006: ARRAY
41007: PPUSH
41008: LD_VAR 0 2
41012: PUSH
41013: LD_INT 2
41015: ARRAY
41016: PPUSH
41017: LD_VAR 0 2
41021: PUSH
41022: LD_INT 3
41024: ARRAY
41025: PPUSH
41026: LD_VAR 0 2
41030: PUSH
41031: LD_INT 4
41033: ARRAY
41034: PPUSH
41035: CALL_OW 449
41039: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41040: LD_ADDR_VAR 0 3
41044: PUSH
41045: LD_VAR 0 5
41049: PPUSH
41050: LD_INT 1
41052: PPUSH
41053: CALL_OW 275
41057: PUSH
41058: LD_VAR 0 4
41062: PUSH
41063: LD_INT 1
41065: ARRAY
41066: GREATEREQUAL
41067: PUSH
41068: LD_VAR 0 5
41072: PPUSH
41073: LD_INT 2
41075: PPUSH
41076: CALL_OW 275
41080: PUSH
41081: LD_VAR 0 4
41085: PUSH
41086: LD_INT 2
41088: ARRAY
41089: GREATEREQUAL
41090: AND
41091: PUSH
41092: LD_VAR 0 5
41096: PPUSH
41097: LD_INT 3
41099: PPUSH
41100: CALL_OW 275
41104: PUSH
41105: LD_VAR 0 4
41109: PUSH
41110: LD_INT 3
41112: ARRAY
41113: GREATEREQUAL
41114: AND
41115: ST_TO_ADDR
// end ;
41116: LD_VAR 0 3
41120: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41121: LD_INT 0
41123: PPUSH
41124: PPUSH
41125: PPUSH
41126: PPUSH
// pom := GetBase ( building ) ;
41127: LD_ADDR_VAR 0 3
41131: PUSH
41132: LD_VAR 0 1
41136: PPUSH
41137: CALL_OW 274
41141: ST_TO_ADDR
// if not pom then
41142: LD_VAR 0 3
41146: NOT
41147: IFFALSE 41151
// exit ;
41149: GO 41321
// btype := GetBType ( building ) ;
41151: LD_ADDR_VAR 0 5
41155: PUSH
41156: LD_VAR 0 1
41160: PPUSH
41161: CALL_OW 266
41165: ST_TO_ADDR
// if btype = b_armoury then
41166: LD_VAR 0 5
41170: PUSH
41171: LD_INT 4
41173: EQUAL
41174: IFFALSE 41184
// btype := b_barracks ;
41176: LD_ADDR_VAR 0 5
41180: PUSH
41181: LD_INT 5
41183: ST_TO_ADDR
// if btype = b_depot then
41184: LD_VAR 0 5
41188: PUSH
41189: LD_INT 0
41191: EQUAL
41192: IFFALSE 41202
// btype := b_warehouse ;
41194: LD_ADDR_VAR 0 5
41198: PUSH
41199: LD_INT 1
41201: ST_TO_ADDR
// if btype = b_workshop then
41202: LD_VAR 0 5
41206: PUSH
41207: LD_INT 2
41209: EQUAL
41210: IFFALSE 41220
// btype := b_factory ;
41212: LD_ADDR_VAR 0 5
41216: PUSH
41217: LD_INT 3
41219: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41220: LD_ADDR_VAR 0 4
41224: PUSH
41225: LD_VAR 0 5
41229: PPUSH
41230: LD_VAR 0 1
41234: PPUSH
41235: CALL_OW 248
41239: PPUSH
41240: CALL_OW 450
41244: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41245: LD_ADDR_VAR 0 2
41249: PUSH
41250: LD_VAR 0 3
41254: PPUSH
41255: LD_INT 1
41257: PPUSH
41258: CALL_OW 275
41262: PUSH
41263: LD_VAR 0 4
41267: PUSH
41268: LD_INT 1
41270: ARRAY
41271: GREATEREQUAL
41272: PUSH
41273: LD_VAR 0 3
41277: PPUSH
41278: LD_INT 2
41280: PPUSH
41281: CALL_OW 275
41285: PUSH
41286: LD_VAR 0 4
41290: PUSH
41291: LD_INT 2
41293: ARRAY
41294: GREATEREQUAL
41295: AND
41296: PUSH
41297: LD_VAR 0 3
41301: PPUSH
41302: LD_INT 3
41304: PPUSH
41305: CALL_OW 275
41309: PUSH
41310: LD_VAR 0 4
41314: PUSH
41315: LD_INT 3
41317: ARRAY
41318: GREATEREQUAL
41319: AND
41320: ST_TO_ADDR
// end ;
41321: LD_VAR 0 2
41325: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41326: LD_INT 0
41328: PPUSH
41329: PPUSH
41330: PPUSH
// pom := GetBase ( building ) ;
41331: LD_ADDR_VAR 0 4
41335: PUSH
41336: LD_VAR 0 1
41340: PPUSH
41341: CALL_OW 274
41345: ST_TO_ADDR
// if not pom then
41346: LD_VAR 0 4
41350: NOT
41351: IFFALSE 41355
// exit ;
41353: GO 41456
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41355: LD_ADDR_VAR 0 5
41359: PUSH
41360: LD_VAR 0 2
41364: PPUSH
41365: LD_VAR 0 1
41369: PPUSH
41370: CALL_OW 248
41374: PPUSH
41375: CALL_OW 450
41379: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41380: LD_ADDR_VAR 0 3
41384: PUSH
41385: LD_VAR 0 4
41389: PPUSH
41390: LD_INT 1
41392: PPUSH
41393: CALL_OW 275
41397: PUSH
41398: LD_VAR 0 5
41402: PUSH
41403: LD_INT 1
41405: ARRAY
41406: GREATEREQUAL
41407: PUSH
41408: LD_VAR 0 4
41412: PPUSH
41413: LD_INT 2
41415: PPUSH
41416: CALL_OW 275
41420: PUSH
41421: LD_VAR 0 5
41425: PUSH
41426: LD_INT 2
41428: ARRAY
41429: GREATEREQUAL
41430: AND
41431: PUSH
41432: LD_VAR 0 4
41436: PPUSH
41437: LD_INT 3
41439: PPUSH
41440: CALL_OW 275
41444: PUSH
41445: LD_VAR 0 5
41449: PUSH
41450: LD_INT 3
41452: ARRAY
41453: GREATEREQUAL
41454: AND
41455: ST_TO_ADDR
// end ;
41456: LD_VAR 0 3
41460: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41461: LD_INT 0
41463: PPUSH
41464: PPUSH
41465: PPUSH
41466: PPUSH
41467: PPUSH
41468: PPUSH
41469: PPUSH
41470: PPUSH
41471: PPUSH
41472: PPUSH
41473: PPUSH
// result := false ;
41474: LD_ADDR_VAR 0 8
41478: PUSH
41479: LD_INT 0
41481: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41482: LD_VAR 0 5
41486: NOT
41487: PUSH
41488: LD_VAR 0 1
41492: NOT
41493: OR
41494: PUSH
41495: LD_VAR 0 2
41499: NOT
41500: OR
41501: PUSH
41502: LD_VAR 0 3
41506: NOT
41507: OR
41508: IFFALSE 41512
// exit ;
41510: GO 42326
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41512: LD_ADDR_VAR 0 14
41516: PUSH
41517: LD_VAR 0 1
41521: PPUSH
41522: LD_VAR 0 2
41526: PPUSH
41527: LD_VAR 0 3
41531: PPUSH
41532: LD_VAR 0 4
41536: PPUSH
41537: LD_VAR 0 5
41541: PUSH
41542: LD_INT 1
41544: ARRAY
41545: PPUSH
41546: CALL_OW 248
41550: PPUSH
41551: LD_INT 0
41553: PPUSH
41554: CALL 43579 0 6
41558: ST_TO_ADDR
// if not hexes then
41559: LD_VAR 0 14
41563: NOT
41564: IFFALSE 41568
// exit ;
41566: GO 42326
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41568: LD_ADDR_VAR 0 17
41572: PUSH
41573: LD_VAR 0 5
41577: PPUSH
41578: LD_INT 22
41580: PUSH
41581: LD_VAR 0 13
41585: PPUSH
41586: CALL_OW 255
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 2
41597: PUSH
41598: LD_INT 30
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 30
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: LIST
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PPUSH
41627: CALL_OW 72
41631: ST_TO_ADDR
// for i = 1 to hexes do
41632: LD_ADDR_VAR 0 9
41636: PUSH
41637: DOUBLE
41638: LD_INT 1
41640: DEC
41641: ST_TO_ADDR
41642: LD_VAR 0 14
41646: PUSH
41647: FOR_TO
41648: IFFALSE 42324
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41650: LD_ADDR_VAR 0 13
41654: PUSH
41655: LD_VAR 0 14
41659: PUSH
41660: LD_VAR 0 9
41664: ARRAY
41665: PUSH
41666: LD_INT 1
41668: ARRAY
41669: PPUSH
41670: LD_VAR 0 14
41674: PUSH
41675: LD_VAR 0 9
41679: ARRAY
41680: PUSH
41681: LD_INT 2
41683: ARRAY
41684: PPUSH
41685: CALL_OW 428
41689: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41690: LD_VAR 0 14
41694: PUSH
41695: LD_VAR 0 9
41699: ARRAY
41700: PUSH
41701: LD_INT 1
41703: ARRAY
41704: PPUSH
41705: LD_VAR 0 14
41709: PUSH
41710: LD_VAR 0 9
41714: ARRAY
41715: PUSH
41716: LD_INT 2
41718: ARRAY
41719: PPUSH
41720: CALL_OW 351
41724: PUSH
41725: LD_VAR 0 14
41729: PUSH
41730: LD_VAR 0 9
41734: ARRAY
41735: PUSH
41736: LD_INT 1
41738: ARRAY
41739: PPUSH
41740: LD_VAR 0 14
41744: PUSH
41745: LD_VAR 0 9
41749: ARRAY
41750: PUSH
41751: LD_INT 2
41753: ARRAY
41754: PPUSH
41755: CALL_OW 488
41759: NOT
41760: OR
41761: PUSH
41762: LD_VAR 0 13
41766: PPUSH
41767: CALL_OW 247
41771: PUSH
41772: LD_INT 3
41774: EQUAL
41775: OR
41776: IFFALSE 41782
// exit ;
41778: POP
41779: POP
41780: GO 42326
// if not tmp then
41782: LD_VAR 0 13
41786: NOT
41787: IFFALSE 41791
// continue ;
41789: GO 41647
// result := true ;
41791: LD_ADDR_VAR 0 8
41795: PUSH
41796: LD_INT 1
41798: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41799: LD_VAR 0 6
41803: PUSH
41804: LD_VAR 0 13
41808: PPUSH
41809: CALL_OW 247
41813: PUSH
41814: LD_INT 2
41816: EQUAL
41817: AND
41818: PUSH
41819: LD_VAR 0 13
41823: PPUSH
41824: CALL_OW 263
41828: PUSH
41829: LD_INT 1
41831: EQUAL
41832: AND
41833: IFFALSE 41997
// begin if IsDrivenBy ( tmp ) then
41835: LD_VAR 0 13
41839: PPUSH
41840: CALL_OW 311
41844: IFFALSE 41848
// continue ;
41846: GO 41647
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41848: LD_VAR 0 6
41852: PPUSH
41853: LD_INT 3
41855: PUSH
41856: LD_INT 60
41858: PUSH
41859: EMPTY
41860: LIST
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 3
41868: PUSH
41869: LD_INT 55
41871: PUSH
41872: EMPTY
41873: LIST
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PPUSH
41883: CALL_OW 72
41887: IFFALSE 41995
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41889: LD_ADDR_VAR 0 18
41893: PUSH
41894: LD_VAR 0 6
41898: PPUSH
41899: LD_INT 3
41901: PUSH
41902: LD_INT 60
41904: PUSH
41905: EMPTY
41906: LIST
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 3
41914: PUSH
41915: LD_INT 55
41917: PUSH
41918: EMPTY
41919: LIST
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PPUSH
41929: CALL_OW 72
41933: PUSH
41934: LD_INT 1
41936: ARRAY
41937: ST_TO_ADDR
// if IsInUnit ( driver ) then
41938: LD_VAR 0 18
41942: PPUSH
41943: CALL_OW 310
41947: IFFALSE 41958
// ComExit ( driver ) ;
41949: LD_VAR 0 18
41953: PPUSH
41954: CALL 67371 0 1
// AddComEnterUnit ( driver , tmp ) ;
41958: LD_VAR 0 18
41962: PPUSH
41963: LD_VAR 0 13
41967: PPUSH
41968: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41972: LD_VAR 0 18
41976: PPUSH
41977: LD_VAR 0 7
41981: PPUSH
41982: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41986: LD_VAR 0 18
41990: PPUSH
41991: CALL_OW 181
// end ; continue ;
41995: GO 41647
// end ; if not cleaners or not tmp in cleaners then
41997: LD_VAR 0 6
42001: NOT
42002: PUSH
42003: LD_VAR 0 13
42007: PUSH
42008: LD_VAR 0 6
42012: IN
42013: NOT
42014: OR
42015: IFFALSE 42322
// begin if dep then
42017: LD_VAR 0 17
42021: IFFALSE 42157
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42023: LD_ADDR_VAR 0 16
42027: PUSH
42028: LD_VAR 0 17
42032: PUSH
42033: LD_INT 1
42035: ARRAY
42036: PPUSH
42037: CALL_OW 250
42041: PPUSH
42042: LD_VAR 0 17
42046: PUSH
42047: LD_INT 1
42049: ARRAY
42050: PPUSH
42051: CALL_OW 254
42055: PPUSH
42056: LD_INT 5
42058: PPUSH
42059: CALL_OW 272
42063: PUSH
42064: LD_VAR 0 17
42068: PUSH
42069: LD_INT 1
42071: ARRAY
42072: PPUSH
42073: CALL_OW 251
42077: PPUSH
42078: LD_VAR 0 17
42082: PUSH
42083: LD_INT 1
42085: ARRAY
42086: PPUSH
42087: CALL_OW 254
42091: PPUSH
42092: LD_INT 5
42094: PPUSH
42095: CALL_OW 273
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42104: LD_VAR 0 16
42108: PUSH
42109: LD_INT 1
42111: ARRAY
42112: PPUSH
42113: LD_VAR 0 16
42117: PUSH
42118: LD_INT 2
42120: ARRAY
42121: PPUSH
42122: CALL_OW 488
42126: IFFALSE 42157
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42128: LD_VAR 0 13
42132: PPUSH
42133: LD_VAR 0 16
42137: PUSH
42138: LD_INT 1
42140: ARRAY
42141: PPUSH
42142: LD_VAR 0 16
42146: PUSH
42147: LD_INT 2
42149: ARRAY
42150: PPUSH
42151: CALL_OW 111
// continue ;
42155: GO 41647
// end ; end ; r := GetDir ( tmp ) ;
42157: LD_ADDR_VAR 0 15
42161: PUSH
42162: LD_VAR 0 13
42166: PPUSH
42167: CALL_OW 254
42171: ST_TO_ADDR
// if r = 5 then
42172: LD_VAR 0 15
42176: PUSH
42177: LD_INT 5
42179: EQUAL
42180: IFFALSE 42190
// r := 0 ;
42182: LD_ADDR_VAR 0 15
42186: PUSH
42187: LD_INT 0
42189: ST_TO_ADDR
// for j = r to 5 do
42190: LD_ADDR_VAR 0 10
42194: PUSH
42195: DOUBLE
42196: LD_VAR 0 15
42200: DEC
42201: ST_TO_ADDR
42202: LD_INT 5
42204: PUSH
42205: FOR_TO
42206: IFFALSE 42320
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42208: LD_ADDR_VAR 0 11
42212: PUSH
42213: LD_VAR 0 13
42217: PPUSH
42218: CALL_OW 250
42222: PPUSH
42223: LD_VAR 0 10
42227: PPUSH
42228: LD_INT 2
42230: PPUSH
42231: CALL_OW 272
42235: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42236: LD_ADDR_VAR 0 12
42240: PUSH
42241: LD_VAR 0 13
42245: PPUSH
42246: CALL_OW 251
42250: PPUSH
42251: LD_VAR 0 10
42255: PPUSH
42256: LD_INT 2
42258: PPUSH
42259: CALL_OW 273
42263: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42264: LD_VAR 0 11
42268: PPUSH
42269: LD_VAR 0 12
42273: PPUSH
42274: CALL_OW 488
42278: PUSH
42279: LD_VAR 0 11
42283: PPUSH
42284: LD_VAR 0 12
42288: PPUSH
42289: CALL_OW 428
42293: NOT
42294: AND
42295: IFFALSE 42318
// begin ComMoveXY ( tmp , _x , _y ) ;
42297: LD_VAR 0 13
42301: PPUSH
42302: LD_VAR 0 11
42306: PPUSH
42307: LD_VAR 0 12
42311: PPUSH
42312: CALL_OW 111
// break ;
42316: GO 42320
// end ; end ;
42318: GO 42205
42320: POP
42321: POP
// end ; end ;
42322: GO 41647
42324: POP
42325: POP
// end ;
42326: LD_VAR 0 8
42330: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42331: LD_INT 0
42333: PPUSH
// result := true ;
42334: LD_ADDR_VAR 0 3
42338: PUSH
42339: LD_INT 1
42341: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42342: LD_VAR 0 2
42346: PUSH
42347: LD_INT 24
42349: DOUBLE
42350: EQUAL
42351: IFTRUE 42361
42353: LD_INT 33
42355: DOUBLE
42356: EQUAL
42357: IFTRUE 42361
42359: GO 42386
42361: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42362: LD_ADDR_VAR 0 3
42366: PUSH
42367: LD_INT 32
42369: PPUSH
42370: LD_VAR 0 1
42374: PPUSH
42375: CALL_OW 321
42379: PUSH
42380: LD_INT 2
42382: EQUAL
42383: ST_TO_ADDR
42384: GO 42702
42386: LD_INT 20
42388: DOUBLE
42389: EQUAL
42390: IFTRUE 42394
42392: GO 42419
42394: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42395: LD_ADDR_VAR 0 3
42399: PUSH
42400: LD_INT 6
42402: PPUSH
42403: LD_VAR 0 1
42407: PPUSH
42408: CALL_OW 321
42412: PUSH
42413: LD_INT 2
42415: EQUAL
42416: ST_TO_ADDR
42417: GO 42702
42419: LD_INT 22
42421: DOUBLE
42422: EQUAL
42423: IFTRUE 42433
42425: LD_INT 36
42427: DOUBLE
42428: EQUAL
42429: IFTRUE 42433
42431: GO 42458
42433: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42434: LD_ADDR_VAR 0 3
42438: PUSH
42439: LD_INT 15
42441: PPUSH
42442: LD_VAR 0 1
42446: PPUSH
42447: CALL_OW 321
42451: PUSH
42452: LD_INT 2
42454: EQUAL
42455: ST_TO_ADDR
42456: GO 42702
42458: LD_INT 30
42460: DOUBLE
42461: EQUAL
42462: IFTRUE 42466
42464: GO 42491
42466: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42467: LD_ADDR_VAR 0 3
42471: PUSH
42472: LD_INT 20
42474: PPUSH
42475: LD_VAR 0 1
42479: PPUSH
42480: CALL_OW 321
42484: PUSH
42485: LD_INT 2
42487: EQUAL
42488: ST_TO_ADDR
42489: GO 42702
42491: LD_INT 28
42493: DOUBLE
42494: EQUAL
42495: IFTRUE 42505
42497: LD_INT 21
42499: DOUBLE
42500: EQUAL
42501: IFTRUE 42505
42503: GO 42530
42505: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42506: LD_ADDR_VAR 0 3
42510: PUSH
42511: LD_INT 21
42513: PPUSH
42514: LD_VAR 0 1
42518: PPUSH
42519: CALL_OW 321
42523: PUSH
42524: LD_INT 2
42526: EQUAL
42527: ST_TO_ADDR
42528: GO 42702
42530: LD_INT 16
42532: DOUBLE
42533: EQUAL
42534: IFTRUE 42538
42536: GO 42563
42538: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42539: LD_ADDR_VAR 0 3
42543: PUSH
42544: LD_INT 84
42546: PPUSH
42547: LD_VAR 0 1
42551: PPUSH
42552: CALL_OW 321
42556: PUSH
42557: LD_INT 2
42559: EQUAL
42560: ST_TO_ADDR
42561: GO 42702
42563: LD_INT 19
42565: DOUBLE
42566: EQUAL
42567: IFTRUE 42577
42569: LD_INT 23
42571: DOUBLE
42572: EQUAL
42573: IFTRUE 42577
42575: GO 42602
42577: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42578: LD_ADDR_VAR 0 3
42582: PUSH
42583: LD_INT 83
42585: PPUSH
42586: LD_VAR 0 1
42590: PPUSH
42591: CALL_OW 321
42595: PUSH
42596: LD_INT 2
42598: EQUAL
42599: ST_TO_ADDR
42600: GO 42702
42602: LD_INT 17
42604: DOUBLE
42605: EQUAL
42606: IFTRUE 42610
42608: GO 42635
42610: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42611: LD_ADDR_VAR 0 3
42615: PUSH
42616: LD_INT 39
42618: PPUSH
42619: LD_VAR 0 1
42623: PPUSH
42624: CALL_OW 321
42628: PUSH
42629: LD_INT 2
42631: EQUAL
42632: ST_TO_ADDR
42633: GO 42702
42635: LD_INT 18
42637: DOUBLE
42638: EQUAL
42639: IFTRUE 42643
42641: GO 42668
42643: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42644: LD_ADDR_VAR 0 3
42648: PUSH
42649: LD_INT 40
42651: PPUSH
42652: LD_VAR 0 1
42656: PPUSH
42657: CALL_OW 321
42661: PUSH
42662: LD_INT 2
42664: EQUAL
42665: ST_TO_ADDR
42666: GO 42702
42668: LD_INT 27
42670: DOUBLE
42671: EQUAL
42672: IFTRUE 42676
42674: GO 42701
42676: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42677: LD_ADDR_VAR 0 3
42681: PUSH
42682: LD_INT 35
42684: PPUSH
42685: LD_VAR 0 1
42689: PPUSH
42690: CALL_OW 321
42694: PUSH
42695: LD_INT 2
42697: EQUAL
42698: ST_TO_ADDR
42699: GO 42702
42701: POP
// end ;
42702: LD_VAR 0 3
42706: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42707: LD_INT 0
42709: PPUSH
42710: PPUSH
42711: PPUSH
42712: PPUSH
42713: PPUSH
42714: PPUSH
42715: PPUSH
42716: PPUSH
42717: PPUSH
42718: PPUSH
42719: PPUSH
// result := false ;
42720: LD_ADDR_VAR 0 6
42724: PUSH
42725: LD_INT 0
42727: ST_TO_ADDR
// if btype = b_depot then
42728: LD_VAR 0 2
42732: PUSH
42733: LD_INT 0
42735: EQUAL
42736: IFFALSE 42748
// begin result := true ;
42738: LD_ADDR_VAR 0 6
42742: PUSH
42743: LD_INT 1
42745: ST_TO_ADDR
// exit ;
42746: GO 43574
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42748: LD_VAR 0 1
42752: NOT
42753: PUSH
42754: LD_VAR 0 1
42758: PPUSH
42759: CALL_OW 266
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: LD_INT 1
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: IN
42774: NOT
42775: OR
42776: PUSH
42777: LD_VAR 0 2
42781: NOT
42782: OR
42783: PUSH
42784: LD_VAR 0 5
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: LD_INT 2
42797: PUSH
42798: LD_INT 3
42800: PUSH
42801: LD_INT 4
42803: PUSH
42804: LD_INT 5
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: IN
42815: NOT
42816: OR
42817: PUSH
42818: LD_VAR 0 3
42822: PPUSH
42823: LD_VAR 0 4
42827: PPUSH
42828: CALL_OW 488
42832: NOT
42833: OR
42834: IFFALSE 42838
// exit ;
42836: GO 43574
// side := GetSide ( depot ) ;
42838: LD_ADDR_VAR 0 9
42842: PUSH
42843: LD_VAR 0 1
42847: PPUSH
42848: CALL_OW 255
42852: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42853: LD_VAR 0 9
42857: PPUSH
42858: LD_VAR 0 2
42862: PPUSH
42863: CALL 42331 0 2
42867: NOT
42868: IFFALSE 42872
// exit ;
42870: GO 43574
// pom := GetBase ( depot ) ;
42872: LD_ADDR_VAR 0 10
42876: PUSH
42877: LD_VAR 0 1
42881: PPUSH
42882: CALL_OW 274
42886: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42887: LD_ADDR_VAR 0 11
42891: PUSH
42892: LD_VAR 0 2
42896: PPUSH
42897: LD_VAR 0 1
42901: PPUSH
42902: CALL_OW 248
42906: PPUSH
42907: CALL_OW 450
42911: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42912: LD_VAR 0 10
42916: PPUSH
42917: LD_INT 1
42919: PPUSH
42920: CALL_OW 275
42924: PUSH
42925: LD_VAR 0 11
42929: PUSH
42930: LD_INT 1
42932: ARRAY
42933: GREATEREQUAL
42934: PUSH
42935: LD_VAR 0 10
42939: PPUSH
42940: LD_INT 2
42942: PPUSH
42943: CALL_OW 275
42947: PUSH
42948: LD_VAR 0 11
42952: PUSH
42953: LD_INT 2
42955: ARRAY
42956: GREATEREQUAL
42957: AND
42958: PUSH
42959: LD_VAR 0 10
42963: PPUSH
42964: LD_INT 3
42966: PPUSH
42967: CALL_OW 275
42971: PUSH
42972: LD_VAR 0 11
42976: PUSH
42977: LD_INT 3
42979: ARRAY
42980: GREATEREQUAL
42981: AND
42982: NOT
42983: IFFALSE 42987
// exit ;
42985: GO 43574
// if GetBType ( depot ) = b_depot then
42987: LD_VAR 0 1
42991: PPUSH
42992: CALL_OW 266
42996: PUSH
42997: LD_INT 0
42999: EQUAL
43000: IFFALSE 43012
// dist := 28 else
43002: LD_ADDR_VAR 0 14
43006: PUSH
43007: LD_INT 28
43009: ST_TO_ADDR
43010: GO 43020
// dist := 36 ;
43012: LD_ADDR_VAR 0 14
43016: PUSH
43017: LD_INT 36
43019: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43020: LD_VAR 0 1
43024: PPUSH
43025: LD_VAR 0 3
43029: PPUSH
43030: LD_VAR 0 4
43034: PPUSH
43035: CALL_OW 297
43039: PUSH
43040: LD_VAR 0 14
43044: GREATER
43045: IFFALSE 43049
// exit ;
43047: GO 43574
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43049: LD_ADDR_VAR 0 12
43053: PUSH
43054: LD_VAR 0 2
43058: PPUSH
43059: LD_VAR 0 3
43063: PPUSH
43064: LD_VAR 0 4
43068: PPUSH
43069: LD_VAR 0 5
43073: PPUSH
43074: LD_VAR 0 1
43078: PPUSH
43079: CALL_OW 248
43083: PPUSH
43084: LD_INT 0
43086: PPUSH
43087: CALL 43579 0 6
43091: ST_TO_ADDR
// if not hexes then
43092: LD_VAR 0 12
43096: NOT
43097: IFFALSE 43101
// exit ;
43099: GO 43574
// hex := GetHexInfo ( x , y ) ;
43101: LD_ADDR_VAR 0 15
43105: PUSH
43106: LD_VAR 0 3
43110: PPUSH
43111: LD_VAR 0 4
43115: PPUSH
43116: CALL_OW 546
43120: ST_TO_ADDR
// if hex [ 1 ] then
43121: LD_VAR 0 15
43125: PUSH
43126: LD_INT 1
43128: ARRAY
43129: IFFALSE 43133
// exit ;
43131: GO 43574
// height := hex [ 2 ] ;
43133: LD_ADDR_VAR 0 13
43137: PUSH
43138: LD_VAR 0 15
43142: PUSH
43143: LD_INT 2
43145: ARRAY
43146: ST_TO_ADDR
// for i = 1 to hexes do
43147: LD_ADDR_VAR 0 7
43151: PUSH
43152: DOUBLE
43153: LD_INT 1
43155: DEC
43156: ST_TO_ADDR
43157: LD_VAR 0 12
43161: PUSH
43162: FOR_TO
43163: IFFALSE 43493
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43165: LD_VAR 0 12
43169: PUSH
43170: LD_VAR 0 7
43174: ARRAY
43175: PUSH
43176: LD_INT 1
43178: ARRAY
43179: PPUSH
43180: LD_VAR 0 12
43184: PUSH
43185: LD_VAR 0 7
43189: ARRAY
43190: PUSH
43191: LD_INT 2
43193: ARRAY
43194: PPUSH
43195: CALL_OW 488
43199: NOT
43200: PUSH
43201: LD_VAR 0 12
43205: PUSH
43206: LD_VAR 0 7
43210: ARRAY
43211: PUSH
43212: LD_INT 1
43214: ARRAY
43215: PPUSH
43216: LD_VAR 0 12
43220: PUSH
43221: LD_VAR 0 7
43225: ARRAY
43226: PUSH
43227: LD_INT 2
43229: ARRAY
43230: PPUSH
43231: CALL_OW 428
43235: PUSH
43236: LD_INT 0
43238: GREATER
43239: OR
43240: PUSH
43241: LD_VAR 0 12
43245: PUSH
43246: LD_VAR 0 7
43250: ARRAY
43251: PUSH
43252: LD_INT 1
43254: ARRAY
43255: PPUSH
43256: LD_VAR 0 12
43260: PUSH
43261: LD_VAR 0 7
43265: ARRAY
43266: PUSH
43267: LD_INT 2
43269: ARRAY
43270: PPUSH
43271: CALL_OW 351
43275: OR
43276: IFFALSE 43282
// exit ;
43278: POP
43279: POP
43280: GO 43574
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43282: LD_ADDR_VAR 0 8
43286: PUSH
43287: LD_VAR 0 12
43291: PUSH
43292: LD_VAR 0 7
43296: ARRAY
43297: PUSH
43298: LD_INT 1
43300: ARRAY
43301: PPUSH
43302: LD_VAR 0 12
43306: PUSH
43307: LD_VAR 0 7
43311: ARRAY
43312: PUSH
43313: LD_INT 2
43315: ARRAY
43316: PPUSH
43317: CALL_OW 546
43321: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43322: LD_VAR 0 8
43326: PUSH
43327: LD_INT 1
43329: ARRAY
43330: PUSH
43331: LD_VAR 0 8
43335: PUSH
43336: LD_INT 2
43338: ARRAY
43339: PUSH
43340: LD_VAR 0 13
43344: PUSH
43345: LD_INT 2
43347: PLUS
43348: GREATER
43349: OR
43350: PUSH
43351: LD_VAR 0 8
43355: PUSH
43356: LD_INT 2
43358: ARRAY
43359: PUSH
43360: LD_VAR 0 13
43364: PUSH
43365: LD_INT 2
43367: MINUS
43368: LESS
43369: OR
43370: PUSH
43371: LD_VAR 0 8
43375: PUSH
43376: LD_INT 3
43378: ARRAY
43379: PUSH
43380: LD_INT 0
43382: PUSH
43383: LD_INT 8
43385: PUSH
43386: LD_INT 9
43388: PUSH
43389: LD_INT 10
43391: PUSH
43392: LD_INT 11
43394: PUSH
43395: LD_INT 12
43397: PUSH
43398: LD_INT 13
43400: PUSH
43401: LD_INT 16
43403: PUSH
43404: LD_INT 17
43406: PUSH
43407: LD_INT 18
43409: PUSH
43410: LD_INT 19
43412: PUSH
43413: LD_INT 20
43415: PUSH
43416: LD_INT 21
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: LIST
43423: LIST
43424: LIST
43425: LIST
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: IN
43434: NOT
43435: OR
43436: PUSH
43437: LD_VAR 0 8
43441: PUSH
43442: LD_INT 5
43444: ARRAY
43445: NOT
43446: OR
43447: PUSH
43448: LD_VAR 0 8
43452: PUSH
43453: LD_INT 6
43455: ARRAY
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: LD_INT 2
43462: PUSH
43463: LD_INT 7
43465: PUSH
43466: LD_INT 9
43468: PUSH
43469: LD_INT 10
43471: PUSH
43472: LD_INT 11
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: IN
43483: NOT
43484: OR
43485: IFFALSE 43491
// exit ;
43487: POP
43488: POP
43489: GO 43574
// end ;
43491: GO 43162
43493: POP
43494: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43495: LD_VAR 0 9
43499: PPUSH
43500: LD_VAR 0 3
43504: PPUSH
43505: LD_VAR 0 4
43509: PPUSH
43510: LD_INT 20
43512: PPUSH
43513: CALL 35497 0 4
43517: PUSH
43518: LD_INT 4
43520: ARRAY
43521: IFFALSE 43525
// exit ;
43523: GO 43574
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43525: LD_VAR 0 2
43529: PUSH
43530: LD_INT 29
43532: PUSH
43533: LD_INT 30
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: IN
43540: PUSH
43541: LD_VAR 0 3
43545: PPUSH
43546: LD_VAR 0 4
43550: PPUSH
43551: LD_VAR 0 9
43555: PPUSH
43556: CALL_OW 440
43560: NOT
43561: AND
43562: IFFALSE 43566
// exit ;
43564: GO 43574
// result := true ;
43566: LD_ADDR_VAR 0 6
43570: PUSH
43571: LD_INT 1
43573: ST_TO_ADDR
// end ;
43574: LD_VAR 0 6
43578: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43579: LD_INT 0
43581: PPUSH
43582: PPUSH
43583: PPUSH
43584: PPUSH
43585: PPUSH
43586: PPUSH
43587: PPUSH
43588: PPUSH
43589: PPUSH
43590: PPUSH
43591: PPUSH
43592: PPUSH
43593: PPUSH
43594: PPUSH
43595: PPUSH
43596: PPUSH
43597: PPUSH
43598: PPUSH
43599: PPUSH
43600: PPUSH
43601: PPUSH
43602: PPUSH
43603: PPUSH
43604: PPUSH
43605: PPUSH
43606: PPUSH
43607: PPUSH
43608: PPUSH
43609: PPUSH
43610: PPUSH
43611: PPUSH
43612: PPUSH
43613: PPUSH
43614: PPUSH
43615: PPUSH
43616: PPUSH
43617: PPUSH
43618: PPUSH
43619: PPUSH
43620: PPUSH
43621: PPUSH
43622: PPUSH
43623: PPUSH
43624: PPUSH
43625: PPUSH
43626: PPUSH
43627: PPUSH
43628: PPUSH
43629: PPUSH
43630: PPUSH
43631: PPUSH
43632: PPUSH
43633: PPUSH
43634: PPUSH
43635: PPUSH
43636: PPUSH
43637: PPUSH
43638: PPUSH
// result = [ ] ;
43639: LD_ADDR_VAR 0 7
43643: PUSH
43644: EMPTY
43645: ST_TO_ADDR
// temp_list = [ ] ;
43646: LD_ADDR_VAR 0 9
43650: PUSH
43651: EMPTY
43652: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43653: LD_VAR 0 4
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: LD_INT 1
43663: PUSH
43664: LD_INT 2
43666: PUSH
43667: LD_INT 3
43669: PUSH
43670: LD_INT 4
43672: PUSH
43673: LD_INT 5
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: IN
43684: NOT
43685: PUSH
43686: LD_VAR 0 1
43690: PUSH
43691: LD_INT 0
43693: PUSH
43694: LD_INT 1
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: IN
43701: PUSH
43702: LD_VAR 0 5
43706: PUSH
43707: LD_INT 1
43709: PUSH
43710: LD_INT 2
43712: PUSH
43713: LD_INT 3
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: LIST
43720: IN
43721: NOT
43722: AND
43723: OR
43724: IFFALSE 43728
// exit ;
43726: GO 62119
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43728: LD_VAR 0 1
43732: PUSH
43733: LD_INT 6
43735: PUSH
43736: LD_INT 7
43738: PUSH
43739: LD_INT 8
43741: PUSH
43742: LD_INT 13
43744: PUSH
43745: LD_INT 12
43747: PUSH
43748: LD_INT 15
43750: PUSH
43751: LD_INT 11
43753: PUSH
43754: LD_INT 14
43756: PUSH
43757: LD_INT 10
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: IN
43771: IFFALSE 43781
// btype = b_lab ;
43773: LD_ADDR_VAR 0 1
43777: PUSH
43778: LD_INT 6
43780: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43781: LD_VAR 0 6
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: LD_INT 2
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: LIST
43799: IN
43800: NOT
43801: PUSH
43802: LD_VAR 0 1
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: LD_INT 2
43815: PUSH
43816: LD_INT 3
43818: PUSH
43819: LD_INT 6
43821: PUSH
43822: LD_INT 36
43824: PUSH
43825: LD_INT 4
43827: PUSH
43828: LD_INT 5
43830: PUSH
43831: LD_INT 31
43833: PUSH
43834: LD_INT 32
43836: PUSH
43837: LD_INT 33
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: IN
43853: NOT
43854: PUSH
43855: LD_VAR 0 6
43859: PUSH
43860: LD_INT 1
43862: EQUAL
43863: AND
43864: OR
43865: PUSH
43866: LD_VAR 0 1
43870: PUSH
43871: LD_INT 2
43873: PUSH
43874: LD_INT 3
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: IN
43881: NOT
43882: PUSH
43883: LD_VAR 0 6
43887: PUSH
43888: LD_INT 2
43890: EQUAL
43891: AND
43892: OR
43893: IFFALSE 43903
// mode = 0 ;
43895: LD_ADDR_VAR 0 6
43899: PUSH
43900: LD_INT 0
43902: ST_TO_ADDR
// case mode of 0 :
43903: LD_VAR 0 6
43907: PUSH
43908: LD_INT 0
43910: DOUBLE
43911: EQUAL
43912: IFTRUE 43916
43914: GO 55369
43916: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43917: LD_ADDR_VAR 0 11
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: EMPTY
43929: LIST
43930: LIST
43931: PUSH
43932: LD_INT 0
43934: PUSH
43935: LD_INT 1
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 1
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 1
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: NEG
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 1
43998: NEG
43999: PUSH
44000: LD_INT 2
44002: NEG
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: LD_INT 2
44013: NEG
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 1
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: PUSH
44033: LD_INT 2
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: LD_INT 2
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: NEG
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 1
44063: PUSH
44064: LD_INT 3
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: LD_INT 3
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: LD_INT 2
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44110: LD_ADDR_VAR 0 12
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: LD_INT 1
44161: PUSH
44162: EMPTY
44163: LIST
44164: LIST
44165: PUSH
44166: LD_INT 1
44168: NEG
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: LD_INT 1
44183: NEG
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: LD_INT 1
44194: NEG
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 2
44202: PUSH
44203: LD_INT 0
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 2
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 1
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 2
44233: NEG
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 2
44244: NEG
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 2
44256: NEG
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 3
44267: NEG
44268: PUSH
44269: LD_INT 0
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 3
44278: NEG
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44306: LD_ADDR_VAR 0 13
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: LD_INT 0
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 1
44334: PUSH
44335: LD_INT 0
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: LD_INT 1
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: NEG
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: NEG
44388: PUSH
44389: LD_INT 2
44391: NEG
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: LD_INT 2
44399: PUSH
44400: LD_INT 1
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 2
44429: NEG
44430: PUSH
44431: LD_INT 1
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 2
44441: NEG
44442: PUSH
44443: LD_INT 2
44445: NEG
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 2
44453: NEG
44454: PUSH
44455: LD_INT 3
44457: NEG
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 3
44465: NEG
44466: PUSH
44467: LD_INT 2
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 3
44477: NEG
44478: PUSH
44479: LD_INT 3
44481: NEG
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44505: LD_ADDR_VAR 0 14
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: LD_INT 0
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: LD_INT 2
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: LD_INT 2
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: LD_INT 1
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 1
44620: PUSH
44621: LD_INT 2
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 0
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: LD_INT 3
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 0
44663: PUSH
44664: LD_INT 3
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: LD_INT 2
44677: NEG
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: LIST
44687: LIST
44688: LIST
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: LIST
44694: LIST
44695: LIST
44696: LIST
44697: LIST
44698: LIST
44699: LIST
44700: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44701: LD_ADDR_VAR 0 15
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: LD_INT 0
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: PUSH
44730: LD_INT 0
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 1
44770: NEG
44771: PUSH
44772: LD_INT 1
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: LD_INT 1
44785: NEG
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: LD_INT 1
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 2
44824: NEG
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 2
44835: NEG
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 2
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 3
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 3
44868: PUSH
44869: LD_INT 1
44871: PUSH
44872: EMPTY
44873: LIST
44874: LIST
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44894: LD_ADDR_VAR 0 16
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: LD_INT 2
44979: NEG
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: LD_INT 1
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: LD_INT 2
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: LD_INT 2
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 2
45017: NEG
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 2
45029: NEG
45030: PUSH
45031: LD_INT 2
45033: NEG
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 3
45041: PUSH
45042: LD_INT 2
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 3
45051: PUSH
45052: LD_INT 3
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 2
45061: PUSH
45062: LD_INT 3
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45087: LD_ADDR_VAR 0 17
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: PUSH
45170: LD_INT 2
45172: NEG
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 0
45180: PUSH
45181: LD_INT 2
45183: NEG
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 2
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 2
45212: PUSH
45213: LD_INT 1
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 2
45222: PUSH
45223: LD_INT 2
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: LD_INT 2
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: LD_INT 2
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 2
45263: NEG
45264: PUSH
45265: LD_INT 0
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 2
45274: NEG
45275: PUSH
45276: LD_INT 1
45278: NEG
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 2
45286: NEG
45287: PUSH
45288: LD_INT 2
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45317: LD_ADDR_VAR 0 18
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 0
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 1
45386: NEG
45387: PUSH
45388: LD_INT 1
45390: NEG
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 1
45398: NEG
45399: PUSH
45400: LD_INT 2
45402: NEG
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: LD_INT 2
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 2
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 2
45442: PUSH
45443: LD_INT 1
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 2
45452: PUSH
45453: LD_INT 2
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: LD_INT 2
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 2
45493: NEG
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 2
45504: NEG
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 2
45516: NEG
45517: PUSH
45518: LD_INT 2
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45547: LD_ADDR_VAR 0 19
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 1
45585: PUSH
45586: LD_INT 1
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: LD_INT 1
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: NEG
45629: PUSH
45630: LD_INT 2
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: LD_INT 2
45643: NEG
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: LD_INT 1
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 2
45662: PUSH
45663: LD_INT 0
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 2
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 2
45682: PUSH
45683: LD_INT 2
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 1
45692: PUSH
45693: LD_INT 2
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 0
45702: PUSH
45703: LD_INT 2
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 1
45712: NEG
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 2
45723: NEG
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 2
45734: NEG
45735: PUSH
45736: LD_INT 1
45738: NEG
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 2
45746: NEG
45747: PUSH
45748: LD_INT 2
45750: NEG
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45777: LD_ADDR_VAR 0 20
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: LD_INT 0
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: LD_INT 1
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 1
45835: NEG
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: LD_INT 1
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: LD_INT 2
45862: NEG
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 0
45870: PUSH
45871: LD_INT 2
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 2
45892: PUSH
45893: LD_INT 0
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 2
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 2
45912: PUSH
45913: LD_INT 2
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: PUSH
45923: LD_INT 2
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: NEG
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 2
45953: NEG
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 2
45964: NEG
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 2
45976: NEG
45977: PUSH
45978: LD_INT 2
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46007: LD_ADDR_VAR 0 21
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: LD_INT 1
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 1
46065: NEG
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: LD_INT 1
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: NEG
46089: PUSH
46090: LD_INT 2
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 0
46100: PUSH
46101: LD_INT 2
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 2
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 2
46142: PUSH
46143: LD_INT 2
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: LD_INT 2
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: LD_INT 2
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: NEG
46173: PUSH
46174: LD_INT 1
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 2
46183: NEG
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 2
46194: NEG
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 2
46206: NEG
46207: PUSH
46208: LD_INT 2
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46237: LD_ADDR_VAR 0 22
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: LD_INT 1
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: LD_INT 0
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 0
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: LD_INT 2
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: LD_INT 2
46333: NEG
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: LD_INT 1
46344: NEG
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 2
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 2
46413: NEG
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 2
46424: NEG
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 2
46436: NEG
46437: PUSH
46438: LD_INT 2
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: LIST
46459: LIST
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46467: LD_ADDR_VAR 0 23
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: EMPTY
46479: LIST
46480: LIST
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: PUSH
46496: LD_INT 0
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 1
46548: NEG
46549: PUSH
46550: LD_INT 2
46552: NEG
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 0
46560: PUSH
46561: LD_INT 2
46563: NEG
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: LD_INT 1
46574: NEG
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 2
46582: PUSH
46583: LD_INT 0
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: LD_INT 2
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: LD_INT 1
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 2
46643: NEG
46644: PUSH
46645: LD_INT 0
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 2
46666: NEG
46667: PUSH
46668: LD_INT 2
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 2
46678: NEG
46679: PUSH
46680: LD_INT 3
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: LD_INT 3
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: LD_INT 2
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46747: LD_ADDR_VAR 0 24
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: PUSH
46776: LD_INT 0
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 1
46785: PUSH
46786: LD_INT 1
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: LD_INT 1
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: LD_INT 2
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: LD_INT 2
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: LD_INT 2
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: LD_INT 2
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: NEG
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: NEG
46935: PUSH
46936: LD_INT 1
46938: NEG
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 2
46946: NEG
46947: PUSH
46948: LD_INT 2
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: LD_INT 2
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: PUSH
46970: LD_INT 1
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 3
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 3
46990: PUSH
46991: LD_INT 2
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47023: LD_ADDR_VAR 0 25
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 2
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: LD_INT 2
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 2
47210: NEG
47211: PUSH
47212: LD_INT 1
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 2
47222: NEG
47223: PUSH
47224: LD_INT 2
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 3
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 3
47244: PUSH
47245: LD_INT 2
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: LD_INT 3
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: PUSH
47265: LD_INT 3
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47297: LD_ADDR_VAR 0 26
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: LD_INT 2
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 2
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 2
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: LD_INT 2
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 1
47442: PUSH
47443: LD_INT 2
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: LD_INT 2
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: NEG
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 2
47473: NEG
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 2
47484: NEG
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 2
47496: NEG
47497: PUSH
47498: LD_INT 2
47500: NEG
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 2
47508: PUSH
47509: LD_INT 3
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: LD_INT 3
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: LD_INT 2
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47573: LD_ADDR_VAR 0 27
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 0
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 1
47631: NEG
47632: PUSH
47633: LD_INT 0
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: LD_INT 1
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: LD_INT 2
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: LD_INT 2
47669: NEG
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 2
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 2
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 2
47708: PUSH
47709: LD_INT 2
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: PUSH
47719: LD_INT 2
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: LD_INT 2
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: LD_INT 1
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 2
47749: NEG
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 2
47760: NEG
47761: PUSH
47762: LD_INT 1
47764: NEG
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 2
47772: NEG
47773: PUSH
47774: LD_INT 2
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: NEG
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 2
47795: NEG
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 3
47806: NEG
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 3
47818: NEG
47819: PUSH
47820: LD_INT 2
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47853: LD_ADDR_VAR 0 28
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: NEG
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: NEG
47935: PUSH
47936: LD_INT 2
47938: NEG
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 0
47946: PUSH
47947: LD_INT 2
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: LD_INT 1
47960: NEG
47961: PUSH
47962: EMPTY
47963: LIST
47964: LIST
47965: PUSH
47966: LD_INT 2
47968: PUSH
47969: LD_INT 0
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 2
47988: PUSH
47989: LD_INT 2
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: LD_INT 2
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: LD_INT 2
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 1
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 2
48029: NEG
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: NEG
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: NEG
48053: PUSH
48054: LD_INT 2
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: LD_INT 3
48068: NEG
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: LD_INT 3
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 3
48088: NEG
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 3
48100: NEG
48101: PUSH
48102: LD_INT 2
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48135: LD_ADDR_VAR 0 29
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: LD_INT 1
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: LD_INT 0
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: NEG
48217: PUSH
48218: LD_INT 2
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 0
48228: PUSH
48229: LD_INT 2
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: LD_INT 1
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 2
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 2
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 1
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: LD_INT 2
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: LD_INT 1
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: LD_INT 2
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 2
48325: NEG
48326: PUSH
48327: LD_INT 3
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 2
48337: PUSH
48338: LD_INT 1
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 3
48348: PUSH
48349: LD_INT 1
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: LD_INT 3
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: LD_INT 2
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: LD_INT 3
48379: NEG
48380: PUSH
48381: LD_INT 2
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48414: LD_ADDR_VAR 0 30
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: LD_INT 1
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: LD_INT 2
48499: NEG
48500: PUSH
48501: EMPTY
48502: LIST
48503: LIST
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: LD_INT 2
48510: NEG
48511: PUSH
48512: EMPTY
48513: LIST
48514: LIST
48515: PUSH
48516: LD_INT 1
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 2
48539: PUSH
48540: LD_INT 1
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 2
48549: PUSH
48550: LD_INT 2
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: LD_INT 2
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 1
48569: NEG
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 2
48580: NEG
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 2
48591: NEG
48592: PUSH
48593: LD_INT 1
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: NEG
48604: PUSH
48605: LD_INT 3
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 3
48626: PUSH
48627: LD_INT 2
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 2
48636: PUSH
48637: LD_INT 3
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 2
48646: NEG
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 3
48657: NEG
48658: PUSH
48659: LD_INT 1
48661: NEG
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48692: LD_ADDR_VAR 0 31
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 0
48740: PUSH
48741: LD_INT 1
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: NEG
48751: PUSH
48752: LD_INT 0
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: EMPTY
48768: LIST
48769: LIST
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: LD_INT 2
48777: NEG
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 1
48785: PUSH
48786: LD_INT 1
48788: NEG
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: LD_INT 1
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 1
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: LD_INT 2
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: LD_INT 1
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 2
48857: NEG
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 2
48881: NEG
48882: PUSH
48883: LD_INT 3
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 2
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 3
48904: PUSH
48905: LD_INT 1
48907: PUSH
48908: EMPTY
48909: LIST
48910: LIST
48911: PUSH
48912: LD_INT 1
48914: PUSH
48915: LD_INT 3
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: LD_INT 2
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 3
48935: NEG
48936: PUSH
48937: LD_INT 2
48939: NEG
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48970: LD_ADDR_VAR 0 32
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: LD_INT 1
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 0
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: NEG
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: EMPTY
49034: LIST
49035: LIST
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: LD_INT 2
49055: NEG
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: LD_INT 2
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: LD_INT 1
49077: NEG
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 2
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 2
49095: PUSH
49096: LD_INT 2
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: LD_INT 2
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 2
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: LD_INT 1
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 2
49136: NEG
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 2
49147: NEG
49148: PUSH
49149: LD_INT 1
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: LD_INT 3
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: LD_INT 2
49174: NEG
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: PUSH
49180: LD_INT 3
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 2
49192: PUSH
49193: LD_INT 3
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 2
49202: NEG
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 3
49213: NEG
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49248: LD_ADDR_VAR 0 33
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: LD_INT 1
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: NEG
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 1
49329: NEG
49330: PUSH
49331: LD_INT 2
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 2
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: LD_INT 1
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 2
49403: NEG
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 2
49414: NEG
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 2
49426: NEG
49427: PUSH
49428: LD_INT 2
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 2
49438: NEG
49439: PUSH
49440: LD_INT 3
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 3
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: LD_INT 3
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: LD_INT 2
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 3
49492: NEG
49493: PUSH
49494: LD_INT 2
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49527: LD_ADDR_VAR 0 34
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 1
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 1
49585: NEG
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 2
49612: NEG
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 0
49620: PUSH
49621: LD_INT 2
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 2
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: LD_INT 2
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 2
49683: NEG
49684: PUSH
49685: LD_INT 0
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 2
49694: NEG
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: LD_INT 2
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: LD_INT 3
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: LD_INT 2
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 3
49741: PUSH
49742: LD_INT 2
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 2
49751: PUSH
49752: LD_INT 3
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 2
49761: NEG
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: EMPTY
49767: LIST
49768: LIST
49769: PUSH
49770: LD_INT 3
49772: NEG
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49807: LD_ADDR_VAR 0 35
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: LD_INT 1
49827: NEG
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: LD_INT 1
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 2
49898: NEG
49899: PUSH
49900: LD_INT 1
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49919: LD_ADDR_VAR 0 36
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 1
49957: PUSH
49958: LD_INT 1
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: NEG
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: EMPTY
49983: LIST
49984: LIST
49985: PUSH
49986: LD_INT 1
49988: NEG
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: LD_INT 2
50004: NEG
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 1
50012: PUSH
50013: LD_INT 2
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50031: LD_ADDR_VAR 0 37
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 0
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: PUSH
50070: LD_INT 1
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: NEG
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: NEG
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: LD_INT 1
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50143: LD_ADDR_VAR 0 38
50147: PUSH
50148: LD_INT 0
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: PUSH
50182: LD_INT 1
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: NEG
50213: PUSH
50214: LD_INT 1
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 2
50234: NEG
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50255: LD_ADDR_VAR 0 39
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 1
50324: NEG
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: LD_INT 2
50340: NEG
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50367: LD_ADDR_VAR 0 40
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: LD_INT 1
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50479: LD_ADDR_VAR 0 41
50483: PUSH
50484: LD_INT 0
50486: PUSH
50487: LD_INT 0
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: LD_INT 1
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 0
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 1
50537: NEG
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: NEG
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 2
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 2
50603: PUSH
50604: LD_INT 2
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: LD_INT 2
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: LD_INT 1
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 2
50645: NEG
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: NEG
50658: PUSH
50659: LD_INT 2
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 2
50669: NEG
50670: PUSH
50671: LD_INT 3
50673: NEG
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 2
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 3
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 3
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 3
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 3
50722: PUSH
50723: LD_INT 3
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 2
50732: PUSH
50733: LD_INT 3
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 2
50742: NEG
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 3
50753: NEG
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 3
50764: NEG
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 3
50776: NEG
50777: PUSH
50778: LD_INT 2
50780: NEG
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 3
50788: NEG
50789: PUSH
50790: LD_INT 3
50792: NEG
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50829: LD_ADDR_VAR 0 42
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: LD_INT 1
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: LD_INT 1
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: LD_INT 0
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: LD_INT 2
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: LD_INT 2
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 2
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: PUSH
50955: LD_INT 2
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: LD_INT 2
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 0
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: LD_INT 2
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 2
51019: NEG
51020: PUSH
51021: LD_INT 3
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: NEG
51032: PUSH
51033: LD_INT 3
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: LD_INT 3
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: LD_INT 2
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 3
51065: PUSH
51066: LD_INT 2
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 3
51075: PUSH
51076: LD_INT 3
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 2
51085: PUSH
51086: LD_INT 3
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 1
51095: PUSH
51096: LD_INT 3
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: LD_INT 3
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: LD_INT 2
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 3
51126: NEG
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 3
51138: NEG
51139: PUSH
51140: LD_INT 3
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51179: LD_ADDR_VAR 0 43
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: LD_INT 2
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 2
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: NEG
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 2
51345: NEG
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 2
51356: NEG
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: PUSH
51370: LD_INT 3
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 0
51380: PUSH
51381: LD_INT 3
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: LD_INT 2
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: LD_INT 1
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 3
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 3
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: LD_INT 3
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 3
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 2
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 2
51464: NEG
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 3
51475: NEG
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 3
51486: NEG
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51527: LD_ADDR_VAR 0 44
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: LD_INT 0
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 1
51608: NEG
51609: PUSH
51610: LD_INT 2
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 2
51631: PUSH
51632: LD_INT 0
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: LD_INT 1
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: LD_INT 2
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 1
51661: PUSH
51662: LD_INT 2
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 1
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 2
51682: NEG
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 2
51693: NEG
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 2
51705: NEG
51706: PUSH
51707: LD_INT 2
51709: NEG
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 2
51717: NEG
51718: PUSH
51719: LD_INT 3
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 2
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 3
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 3
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 3
51760: PUSH
51761: LD_INT 2
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 3
51770: PUSH
51771: LD_INT 3
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 2
51780: PUSH
51781: LD_INT 3
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 2
51790: NEG
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 3
51801: NEG
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 3
51812: NEG
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 3
51824: NEG
51825: PUSH
51826: LD_INT 2
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 3
51836: NEG
51837: PUSH
51838: LD_INT 3
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51877: LD_ADDR_VAR 0 45
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 0
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: LD_INT 1
51946: NEG
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: NEG
51959: PUSH
51960: LD_INT 2
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 0
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: LD_INT 1
51984: NEG
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 2
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 2
52002: PUSH
52003: LD_INT 2
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: LD_INT 2
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: LD_INT 2
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: LD_INT 1
52047: NEG
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 2
52055: NEG
52056: PUSH
52057: LD_INT 2
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 2
52067: NEG
52068: PUSH
52069: LD_INT 3
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: LD_INT 3
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: LD_INT 3
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: LD_INT 2
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 3
52113: PUSH
52114: LD_INT 2
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 3
52123: PUSH
52124: LD_INT 3
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 2
52133: PUSH
52134: LD_INT 3
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: PUSH
52144: LD_INT 3
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: LD_INT 3
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 1
52163: NEG
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 3
52174: NEG
52175: PUSH
52176: LD_INT 2
52178: NEG
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 3
52186: NEG
52187: PUSH
52188: LD_INT 3
52190: NEG
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52227: LD_ADDR_VAR 0 46
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: LD_INT 2
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: LD_INT 1
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 2
52393: NEG
52394: PUSH
52395: LD_INT 0
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: LD_INT 3
52420: NEG
52421: PUSH
52422: EMPTY
52423: LIST
52424: LIST
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: LD_INT 3
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: LD_INT 1
52453: NEG
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 3
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 3
52471: PUSH
52472: LD_INT 1
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: LD_INT 3
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 0
52491: PUSH
52492: LD_INT 3
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 1
52501: NEG
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 2
52512: NEG
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 3
52523: NEG
52524: PUSH
52525: LD_INT 0
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 3
52534: NEG
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52575: LD_ADDR_VAR 0 47
52579: PUSH
52580: LD_INT 0
52582: PUSH
52583: LD_INT 0
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 1
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 1
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: NEG
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 1
52644: NEG
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: LD_INT 2
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 0
52668: PUSH
52669: LD_INT 2
52671: NEG
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 1
52679: PUSH
52680: LD_INT 1
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 2
52690: NEG
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 2
52702: NEG
52703: PUSH
52704: LD_INT 2
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52726: LD_ADDR_VAR 0 48
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: LD_INT 1
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: LD_INT 0
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 0
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: LD_INT 1
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: LD_INT 2
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: LD_INT 2
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 2
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52873: LD_ADDR_VAR 0 49
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: LD_INT 0
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: LD_INT 1
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: LD_INT 1
52946: NEG
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 2
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 2
52975: PUSH
52976: LD_INT 1
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 2
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 1
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53017: LD_ADDR_VAR 0 50
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: LD_INT 1
53037: NEG
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: LD_INT 0
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: LD_INT 0
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: LD_INT 1
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 2
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: LD_INT 2
53111: PUSH
53112: EMPTY
53113: LIST
53114: LIST
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: LD_INT 2
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 0
53128: PUSH
53129: LD_INT 2
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 1
53138: NEG
53139: PUSH
53140: LD_INT 1
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53161: LD_ADDR_VAR 0 51
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: NEG
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 1
53230: NEG
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: LD_INT 2
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: LD_INT 2
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 2
53273: NEG
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 2
53284: NEG
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53308: LD_ADDR_VAR 0 52
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: PUSH
53337: LD_INT 0
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: LD_INT 1
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: NEG
53367: PUSH
53368: LD_INT 0
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: LD_INT 1
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: LD_INT 2
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: NEG
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 2
53412: NEG
53413: PUSH
53414: LD_INT 0
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 2
53423: NEG
53424: PUSH
53425: LD_INT 1
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 2
53435: NEG
53436: PUSH
53437: LD_INT 2
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53459: LD_ADDR_VAR 0 53
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 0
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: NEG
53541: PUSH
53542: LD_INT 2
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: LD_INT 2
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 2
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: LD_INT 1
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 2
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: PUSH
53605: LD_INT 2
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 2
53635: NEG
53636: PUSH
53637: LD_INT 0
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: LD_INT 2
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53689: LD_ADDR_VAR 0 54
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: LD_INT 0
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: LD_INT 1
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: LD_INT 1
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: NEG
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: NEG
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: LD_INT 2
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 0
53782: PUSH
53783: LD_INT 2
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 1
53793: PUSH
53794: LD_INT 1
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 2
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 2
53814: PUSH
53815: LD_INT 1
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 2
53824: PUSH
53825: LD_INT 2
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: LD_INT 2
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: LD_INT 2
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 2
53865: NEG
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: NEG
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 2
53888: NEG
53889: PUSH
53890: LD_INT 2
53892: NEG
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53919: LD_ADDR_VAR 0 55
53923: PUSH
53924: LD_INT 0
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 1
54000: NEG
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: LD_INT 2
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: LD_INT 1
54026: NEG
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 2
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 2
54044: PUSH
54045: LD_INT 1
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 2
54054: PUSH
54055: LD_INT 2
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 1
54064: PUSH
54065: LD_INT 2
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 0
54074: PUSH
54075: LD_INT 2
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 2
54095: NEG
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 2
54106: NEG
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 2
54118: NEG
54119: PUSH
54120: LD_INT 2
54122: NEG
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54149: LD_ADDR_VAR 0 56
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: LD_INT 1
54169: NEG
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: LD_INT 1
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 0
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: LD_INT 2
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: LD_INT 2
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: LD_INT 1
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 2
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 2
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: PUSH
54295: LD_INT 2
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: LD_INT 2
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: NEG
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 2
54325: NEG
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 2
54336: NEG
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 2
54348: NEG
54349: PUSH
54350: LD_INT 2
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54379: LD_ADDR_VAR 0 57
54383: PUSH
54384: LD_INT 0
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: LD_INT 1
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: LD_INT 2
54464: NEG
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: LD_INT 2
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 1
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 2
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 2
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 2
54514: PUSH
54515: LD_INT 2
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: LD_INT 2
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: LD_INT 2
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: LD_INT 1
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 2
54555: NEG
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 2
54566: NEG
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 2
54578: NEG
54579: PUSH
54580: LD_INT 2
54582: NEG
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54609: LD_ADDR_VAR 0 58
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 1
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: NEG
54668: PUSH
54669: LD_INT 0
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: LD_INT 1
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: LD_INT 2
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: LD_INT 2
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 2
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 2
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 2
54744: PUSH
54745: LD_INT 2
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: PUSH
54755: LD_INT 2
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: LD_INT 2
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 2
54785: NEG
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: NEG
54797: PUSH
54798: LD_INT 1
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 2
54808: NEG
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54839: LD_ADDR_VAR 0 59
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: LD_INT 0
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: LD_INT 1
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: LD_INT 0
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54927: LD_ADDR_VAR 0 60
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 1
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: LD_INT 1
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: NEG
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 1
54996: NEG
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55015: LD_ADDR_VAR 0 61
55019: PUSH
55020: LD_INT 0
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 0
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 1
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 1
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 1
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: NEG
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55103: LD_ADDR_VAR 0 62
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 0
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 1
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: LD_INT 1
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: LD_INT 1
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55191: LD_ADDR_VAR 0 63
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55279: LD_ADDR_VAR 0 64
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: LD_INT 0
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 1
55317: PUSH
55318: LD_INT 1
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 0
55327: PUSH
55328: LD_INT 1
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: NEG
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: LD_INT 1
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: ST_TO_ADDR
// end ; 1 :
55367: GO 61264
55369: LD_INT 1
55371: DOUBLE
55372: EQUAL
55373: IFTRUE 55377
55375: GO 58000
55377: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55378: LD_ADDR_VAR 0 11
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: LD_INT 3
55389: NEG
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: LD_INT 3
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: LD_INT 2
55411: NEG
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: LIST
55421: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55422: LD_ADDR_VAR 0 12
55426: PUSH
55427: LD_INT 2
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 3
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 3
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: LIST
55462: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55463: LD_ADDR_VAR 0 13
55467: PUSH
55468: LD_INT 3
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 3
55480: PUSH
55481: LD_INT 3
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 2
55490: PUSH
55491: LD_INT 3
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: LIST
55502: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55503: LD_ADDR_VAR 0 14
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: LD_INT 3
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 3
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: LD_INT 2
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: LIST
55543: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55544: LD_ADDR_VAR 0 15
55548: PUSH
55549: LD_INT 2
55551: NEG
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 3
55562: NEG
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 3
55573: NEG
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: LIST
55587: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55588: LD_ADDR_VAR 0 16
55592: PUSH
55593: LD_INT 2
55595: NEG
55596: PUSH
55597: LD_INT 3
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 3
55607: NEG
55608: PUSH
55609: LD_INT 2
55611: NEG
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 3
55619: NEG
55620: PUSH
55621: LD_INT 3
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: LIST
55633: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55634: LD_ADDR_VAR 0 17
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: LD_INT 3
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 0
55653: PUSH
55654: LD_INT 3
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: LD_INT 2
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: LIST
55677: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55678: LD_ADDR_VAR 0 18
55682: PUSH
55683: LD_INT 2
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 3
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 3
55706: PUSH
55707: LD_INT 1
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: LIST
55718: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55719: LD_ADDR_VAR 0 19
55723: PUSH
55724: LD_INT 3
55726: PUSH
55727: LD_INT 2
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 3
55736: PUSH
55737: LD_INT 3
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 2
55746: PUSH
55747: LD_INT 3
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: LIST
55758: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55759: LD_ADDR_VAR 0 20
55763: PUSH
55764: LD_INT 1
55766: PUSH
55767: LD_INT 3
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: LD_INT 3
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 1
55786: NEG
55787: PUSH
55788: LD_INT 2
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: LIST
55799: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55800: LD_ADDR_VAR 0 21
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 3
55818: NEG
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 3
55829: NEG
55830: PUSH
55831: LD_INT 1
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: LIST
55843: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55844: LD_ADDR_VAR 0 22
55848: PUSH
55849: LD_INT 2
55851: NEG
55852: PUSH
55853: LD_INT 3
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 3
55863: NEG
55864: PUSH
55865: LD_INT 2
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 3
55875: NEG
55876: PUSH
55877: LD_INT 3
55879: NEG
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: LIST
55889: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55890: LD_ADDR_VAR 0 23
55894: PUSH
55895: LD_INT 0
55897: PUSH
55898: LD_INT 3
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: LD_INT 4
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: PUSH
55921: LD_INT 3
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: LIST
55933: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55934: LD_ADDR_VAR 0 24
55938: PUSH
55939: LD_INT 3
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 3
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 4
55962: PUSH
55963: LD_INT 1
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: LIST
55974: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55975: LD_ADDR_VAR 0 25
55979: PUSH
55980: LD_INT 3
55982: PUSH
55983: LD_INT 3
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 4
55992: PUSH
55993: LD_INT 3
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 3
56002: PUSH
56003: LD_INT 4
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: LIST
56014: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56015: LD_ADDR_VAR 0 26
56019: PUSH
56020: LD_INT 0
56022: PUSH
56023: LD_INT 3
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: LD_INT 4
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: NEG
56043: PUSH
56044: LD_INT 3
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: LIST
56055: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56056: LD_ADDR_VAR 0 27
56060: PUSH
56061: LD_INT 3
56063: NEG
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 3
56074: NEG
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 4
56085: NEG
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: LIST
56099: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56100: LD_ADDR_VAR 0 28
56104: PUSH
56105: LD_INT 3
56107: NEG
56108: PUSH
56109: LD_INT 3
56111: NEG
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 3
56119: NEG
56120: PUSH
56121: LD_INT 4
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 4
56131: NEG
56132: PUSH
56133: LD_INT 3
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: LIST
56145: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56146: LD_ADDR_VAR 0 29
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: LD_INT 3
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: LD_INT 3
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: LD_INT 2
56179: NEG
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: LD_INT 4
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 0
56199: PUSH
56200: LD_INT 4
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 1
56210: PUSH
56211: LD_INT 3
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: LD_INT 5
56225: NEG
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_INT 5
56236: NEG
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: PUSH
56245: LD_INT 4
56247: NEG
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: NEG
56256: PUSH
56257: LD_INT 6
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 0
56267: PUSH
56268: LD_INT 6
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: LD_INT 5
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56301: LD_ADDR_VAR 0 30
56305: PUSH
56306: LD_INT 2
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 3
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 3
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 3
56339: PUSH
56340: LD_INT 1
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 4
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 4
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 4
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 5
56381: PUSH
56382: LD_INT 0
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 5
56391: PUSH
56392: LD_INT 1
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 5
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 6
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 6
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56444: LD_ADDR_VAR 0 31
56448: PUSH
56449: LD_INT 3
56451: PUSH
56452: LD_INT 2
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 3
56461: PUSH
56462: LD_INT 3
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 2
56471: PUSH
56472: LD_INT 3
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PUSH
56479: LD_INT 4
56481: PUSH
56482: LD_INT 3
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 4
56491: PUSH
56492: LD_INT 4
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: PUSH
56499: LD_INT 3
56501: PUSH
56502: LD_INT 4
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 5
56511: PUSH
56512: LD_INT 4
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 5
56521: PUSH
56522: LD_INT 5
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 4
56531: PUSH
56532: LD_INT 5
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 6
56541: PUSH
56542: LD_INT 5
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 6
56551: PUSH
56552: LD_INT 6
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 5
56561: PUSH
56562: LD_INT 6
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56583: LD_ADDR_VAR 0 32
56587: PUSH
56588: LD_INT 1
56590: PUSH
56591: LD_INT 3
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: LD_INT 3
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: LD_INT 2
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: PUSH
56622: LD_INT 4
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: LD_INT 4
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: LD_INT 3
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: LD_INT 5
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: LD_INT 5
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: LD_INT 4
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: LD_INT 6
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: LD_INT 6
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: LD_INT 5
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56726: LD_ADDR_VAR 0 33
56730: PUSH
56731: LD_INT 2
56733: NEG
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 3
56744: NEG
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 3
56755: NEG
56756: PUSH
56757: LD_INT 1
56759: NEG
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 3
56767: NEG
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 4
56778: NEG
56779: PUSH
56780: LD_INT 0
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 4
56789: NEG
56790: PUSH
56791: LD_INT 1
56793: NEG
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 4
56801: NEG
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 5
56812: NEG
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 5
56823: NEG
56824: PUSH
56825: LD_INT 1
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 5
56835: NEG
56836: PUSH
56837: LD_INT 1
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 6
56846: NEG
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 6
56857: NEG
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56881: LD_ADDR_VAR 0 34
56885: PUSH
56886: LD_INT 2
56888: NEG
56889: PUSH
56890: LD_INT 3
56892: NEG
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 3
56900: NEG
56901: PUSH
56902: LD_INT 2
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 3
56912: NEG
56913: PUSH
56914: LD_INT 3
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 3
56924: NEG
56925: PUSH
56926: LD_INT 4
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 4
56936: NEG
56937: PUSH
56938: LD_INT 3
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 4
56948: NEG
56949: PUSH
56950: LD_INT 4
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 4
56960: NEG
56961: PUSH
56962: LD_INT 5
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 5
56972: NEG
56973: PUSH
56974: LD_INT 4
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 5
56984: NEG
56985: PUSH
56986: LD_INT 5
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 5
56996: NEG
56997: PUSH
56998: LD_INT 6
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 6
57008: NEG
57009: PUSH
57010: LD_INT 5
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 6
57020: NEG
57021: PUSH
57022: LD_INT 6
57024: NEG
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57044: LD_ADDR_VAR 0 41
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: LD_INT 2
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: LD_INT 3
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: LD_INT 2
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: LIST
57087: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57088: LD_ADDR_VAR 0 42
57092: PUSH
57093: LD_INT 2
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 2
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 3
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: LIST
57128: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57129: LD_ADDR_VAR 0 43
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: LD_INT 2
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 3
57146: PUSH
57147: LD_INT 2
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 2
57156: PUSH
57157: LD_INT 3
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: LIST
57168: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57169: LD_ADDR_VAR 0 44
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: LD_INT 3
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: EMPTY
57202: LIST
57203: LIST
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: LIST
57209: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57210: LD_ADDR_VAR 0 45
57214: PUSH
57215: LD_INT 2
57217: NEG
57218: PUSH
57219: LD_INT 0
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 3
57239: NEG
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: LIST
57253: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57254: LD_ADDR_VAR 0 46
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: LD_INT 3
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 3
57285: NEG
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: LIST
57299: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57300: LD_ADDR_VAR 0 47
57304: PUSH
57305: LD_INT 2
57307: NEG
57308: PUSH
57309: LD_INT 3
57311: NEG
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: LD_INT 3
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57333: LD_ADDR_VAR 0 48
57337: PUSH
57338: LD_INT 1
57340: PUSH
57341: LD_INT 2
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 2
57351: PUSH
57352: LD_INT 1
57354: NEG
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57364: LD_ADDR_VAR 0 49
57368: PUSH
57369: LD_INT 3
57371: PUSH
57372: LD_INT 1
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 3
57381: PUSH
57382: LD_INT 2
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57393: LD_ADDR_VAR 0 50
57397: PUSH
57398: LD_INT 2
57400: PUSH
57401: LD_INT 3
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: LD_INT 3
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57422: LD_ADDR_VAR 0 51
57426: PUSH
57427: LD_INT 1
57429: NEG
57430: PUSH
57431: LD_INT 2
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 2
57440: NEG
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57453: LD_ADDR_VAR 0 52
57457: PUSH
57458: LD_INT 3
57460: NEG
57461: PUSH
57462: LD_INT 1
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 3
57472: NEG
57473: PUSH
57474: LD_INT 2
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57486: LD_ADDR_VAR 0 53
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: LD_INT 3
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: LD_INT 3
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: LD_INT 2
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: LIST
57529: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57530: LD_ADDR_VAR 0 54
57534: PUSH
57535: LD_INT 2
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 3
57548: PUSH
57549: LD_INT 0
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 3
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: LIST
57570: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57571: LD_ADDR_VAR 0 55
57575: PUSH
57576: LD_INT 3
57578: PUSH
57579: LD_INT 2
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 3
57588: PUSH
57589: LD_INT 3
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 2
57598: PUSH
57599: LD_INT 3
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: LIST
57610: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57611: LD_ADDR_VAR 0 56
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: LD_INT 3
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: LD_INT 3
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: LD_INT 2
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: LIST
57651: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57652: LD_ADDR_VAR 0 57
57656: PUSH
57657: LD_INT 2
57659: NEG
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 3
57670: NEG
57671: PUSH
57672: LD_INT 0
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 3
57681: NEG
57682: PUSH
57683: LD_INT 1
57685: NEG
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: LIST
57695: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57696: LD_ADDR_VAR 0 58
57700: PUSH
57701: LD_INT 2
57703: NEG
57704: PUSH
57705: LD_INT 3
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 3
57715: NEG
57716: PUSH
57717: LD_INT 2
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 3
57727: NEG
57728: PUSH
57729: LD_INT 3
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: LIST
57741: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57742: LD_ADDR_VAR 0 59
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: LD_INT 2
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 0
57761: PUSH
57762: LD_INT 2
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: LD_INT 1
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: LIST
57785: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57786: LD_ADDR_VAR 0 60
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 2
57804: PUSH
57805: LD_INT 0
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 2
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: LIST
57826: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57827: LD_ADDR_VAR 0 61
57831: PUSH
57832: LD_INT 2
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 2
57844: PUSH
57845: LD_INT 2
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: LIST
57866: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57867: LD_ADDR_VAR 0 62
57871: PUSH
57872: LD_INT 1
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 0
57884: PUSH
57885: LD_INT 2
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 1
57894: NEG
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: LIST
57907: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57908: LD_ADDR_VAR 0 63
57912: PUSH
57913: LD_INT 1
57915: NEG
57916: PUSH
57917: LD_INT 1
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 2
57926: NEG
57927: PUSH
57928: LD_INT 0
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 2
57937: NEG
57938: PUSH
57939: LD_INT 1
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: LIST
57951: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57952: LD_ADDR_VAR 0 64
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 2
57971: NEG
57972: PUSH
57973: LD_INT 1
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 2
57983: NEG
57984: PUSH
57985: LD_INT 2
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: LIST
57997: ST_TO_ADDR
// end ; 2 :
57998: GO 61264
58000: LD_INT 2
58002: DOUBLE
58003: EQUAL
58004: IFTRUE 58008
58006: GO 61263
58008: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58009: LD_ADDR_VAR 0 29
58013: PUSH
58014: LD_INT 4
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 4
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 5
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 5
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 4
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 3
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 3
58077: PUSH
58078: LD_INT 1
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 3
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 5
58099: PUSH
58100: LD_INT 2
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 3
58109: PUSH
58110: LD_INT 3
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 3
58119: PUSH
58120: LD_INT 2
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 4
58129: PUSH
58130: LD_INT 3
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 4
58139: PUSH
58140: LD_INT 4
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 3
58149: PUSH
58150: LD_INT 4
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: LD_INT 3
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 2
58169: PUSH
58170: LD_INT 2
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 4
58179: PUSH
58180: LD_INT 2
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 2
58189: PUSH
58190: LD_INT 4
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: LD_INT 4
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 0
58209: PUSH
58210: LD_INT 3
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: PUSH
58220: LD_INT 4
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: LD_INT 5
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 0
58239: PUSH
58240: LD_INT 5
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: LD_INT 4
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: LD_INT 3
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: LD_INT 5
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 2
58281: NEG
58282: PUSH
58283: LD_INT 3
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 3
58292: NEG
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 3
58303: NEG
58304: PUSH
58305: LD_INT 1
58307: NEG
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 2
58315: NEG
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: LD_INT 1
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 3
58337: NEG
58338: PUSH
58339: LD_INT 1
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 4
58348: NEG
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 4
58359: NEG
58360: PUSH
58361: LD_INT 1
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 4
58371: NEG
58372: PUSH
58373: LD_INT 2
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 2
58383: NEG
58384: PUSH
58385: LD_INT 2
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 4
58394: NEG
58395: PUSH
58396: LD_INT 4
58398: NEG
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 4
58406: NEG
58407: PUSH
58408: LD_INT 5
58410: NEG
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 3
58418: NEG
58419: PUSH
58420: LD_INT 4
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 3
58430: NEG
58431: PUSH
58432: LD_INT 3
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 4
58442: NEG
58443: PUSH
58444: LD_INT 3
58446: NEG
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 5
58454: NEG
58455: PUSH
58456: LD_INT 4
58458: NEG
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 5
58466: NEG
58467: PUSH
58468: LD_INT 5
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 3
58478: NEG
58479: PUSH
58480: LD_INT 5
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 5
58490: NEG
58491: PUSH
58492: LD_INT 3
58494: NEG
58495: PUSH
58496: EMPTY
58497: LIST
58498: LIST
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58547: LD_ADDR_VAR 0 30
58551: PUSH
58552: LD_INT 4
58554: PUSH
58555: LD_INT 4
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 4
58564: PUSH
58565: LD_INT 3
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 5
58574: PUSH
58575: LD_INT 4
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 5
58584: PUSH
58585: LD_INT 5
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 4
58594: PUSH
58595: LD_INT 5
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 3
58604: PUSH
58605: LD_INT 4
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 3
58614: PUSH
58615: LD_INT 3
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 5
58624: PUSH
58625: LD_INT 3
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 3
58634: PUSH
58635: LD_INT 5
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: LD_INT 3
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: LD_INT 2
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: LD_INT 3
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: LD_INT 4
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 0
58684: PUSH
58685: LD_INT 4
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: LD_INT 3
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: NEG
58706: PUSH
58707: LD_INT 2
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 2
58716: PUSH
58717: LD_INT 4
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 2
58726: NEG
58727: PUSH
58728: LD_INT 2
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 4
58737: NEG
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 4
58748: NEG
58749: PUSH
58750: LD_INT 1
58752: NEG
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 3
58760: NEG
58761: PUSH
58762: LD_INT 0
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 3
58771: NEG
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 4
58782: NEG
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 5
58793: NEG
58794: PUSH
58795: LD_INT 0
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 5
58804: NEG
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 5
58816: NEG
58817: PUSH
58818: LD_INT 2
58820: NEG
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 3
58828: NEG
58829: PUSH
58830: LD_INT 2
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 3
58839: NEG
58840: PUSH
58841: LD_INT 3
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 3
58851: NEG
58852: PUSH
58853: LD_INT 4
58855: NEG
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 2
58863: NEG
58864: PUSH
58865: LD_INT 3
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 2
58875: NEG
58876: PUSH
58877: LD_INT 2
58879: NEG
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 3
58887: NEG
58888: PUSH
58889: LD_INT 2
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 4
58899: NEG
58900: PUSH
58901: LD_INT 3
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 4
58911: NEG
58912: PUSH
58913: LD_INT 4
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 2
58923: NEG
58924: PUSH
58925: LD_INT 4
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 4
58935: NEG
58936: PUSH
58937: LD_INT 2
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 0
58947: PUSH
58948: LD_INT 4
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 0
58958: PUSH
58959: LD_INT 5
58961: NEG
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: LD_INT 1
58969: PUSH
58970: LD_INT 4
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: LD_INT 3
58983: NEG
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: LD_INT 3
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: LD_INT 4
59006: NEG
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: LD_INT 5
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 2
59026: PUSH
59027: LD_INT 3
59029: NEG
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 2
59037: NEG
59038: PUSH
59039: LD_INT 5
59041: NEG
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59094: LD_ADDR_VAR 0 31
59098: PUSH
59099: LD_INT 0
59101: PUSH
59102: LD_INT 4
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 0
59111: PUSH
59112: LD_INT 3
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: PUSH
59122: LD_INT 4
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: LD_INT 1
59131: PUSH
59132: LD_INT 5
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 0
59141: PUSH
59142: LD_INT 5
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: NEG
59152: PUSH
59153: LD_INT 4
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: LD_INT 3
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 2
59173: PUSH
59174: LD_INT 5
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 2
59183: NEG
59184: PUSH
59185: LD_INT 3
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 3
59194: NEG
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 3
59205: NEG
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: LD_INT 0
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 2
59228: NEG
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 3
59239: NEG
59240: PUSH
59241: LD_INT 1
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 4
59250: NEG
59251: PUSH
59252: LD_INT 0
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 4
59261: NEG
59262: PUSH
59263: LD_INT 1
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 4
59273: NEG
59274: PUSH
59275: LD_INT 2
59277: NEG
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: PUSH
59283: LD_INT 2
59285: NEG
59286: PUSH
59287: LD_INT 2
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 4
59296: NEG
59297: PUSH
59298: LD_INT 4
59300: NEG
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 4
59308: NEG
59309: PUSH
59310: LD_INT 5
59312: NEG
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 3
59320: NEG
59321: PUSH
59322: LD_INT 4
59324: NEG
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: PUSH
59330: LD_INT 3
59332: NEG
59333: PUSH
59334: LD_INT 3
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 4
59344: NEG
59345: PUSH
59346: LD_INT 3
59348: NEG
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 5
59356: NEG
59357: PUSH
59358: LD_INT 4
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 5
59368: NEG
59369: PUSH
59370: LD_INT 5
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 3
59380: NEG
59381: PUSH
59382: LD_INT 5
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 5
59392: NEG
59393: PUSH
59394: LD_INT 3
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: LD_INT 3
59407: NEG
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: LD_INT 4
59418: NEG
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: LD_INT 3
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: LD_INT 2
59440: NEG
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: LD_INT 2
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: LD_INT 3
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: LD_INT 4
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: PUSH
59484: LD_INT 2
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 2
59494: NEG
59495: PUSH
59496: LD_INT 4
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 4
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 4
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 5
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 5
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 4
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 3
59557: PUSH
59558: LD_INT 0
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 3
59567: PUSH
59568: LD_INT 1
59570: NEG
59571: PUSH
59572: EMPTY
59573: LIST
59574: LIST
59575: PUSH
59576: LD_INT 3
59578: PUSH
59579: LD_INT 2
59581: NEG
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 5
59589: PUSH
59590: LD_INT 2
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: LIST
59605: LIST
59606: LIST
59607: LIST
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59644: LD_ADDR_VAR 0 32
59648: PUSH
59649: LD_INT 4
59651: NEG
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 4
59662: NEG
59663: PUSH
59664: LD_INT 1
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 3
59674: NEG
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 3
59685: NEG
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 4
59696: NEG
59697: PUSH
59698: LD_INT 1
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 5
59707: NEG
59708: PUSH
59709: LD_INT 0
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 5
59718: NEG
59719: PUSH
59720: LD_INT 1
59722: NEG
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 5
59730: NEG
59731: PUSH
59732: LD_INT 2
59734: NEG
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 3
59742: NEG
59743: PUSH
59744: LD_INT 2
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 3
59753: NEG
59754: PUSH
59755: LD_INT 3
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 3
59765: NEG
59766: PUSH
59767: LD_INT 4
59769: NEG
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 2
59777: NEG
59778: PUSH
59779: LD_INT 3
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 2
59789: NEG
59790: PUSH
59791: LD_INT 2
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: LD_INT 3
59801: NEG
59802: PUSH
59803: LD_INT 2
59805: NEG
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 4
59813: NEG
59814: PUSH
59815: LD_INT 3
59817: NEG
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 4
59825: NEG
59826: PUSH
59827: LD_INT 4
59829: NEG
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: PUSH
59835: LD_INT 2
59837: NEG
59838: PUSH
59839: LD_INT 4
59841: NEG
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 4
59849: NEG
59850: PUSH
59851: LD_INT 2
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 0
59861: PUSH
59862: LD_INT 4
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: LD_INT 5
59875: NEG
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 1
59883: PUSH
59884: LD_INT 4
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: PUSH
59895: LD_INT 3
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: LD_INT 3
59908: NEG
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: NEG
59917: PUSH
59918: LD_INT 4
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: LD_INT 5
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 2
59940: PUSH
59941: LD_INT 3
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 2
59951: NEG
59952: PUSH
59953: LD_INT 5
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 3
59963: PUSH
59964: LD_INT 0
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 3
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 4
59984: PUSH
59985: LD_INT 0
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 4
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 3
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 2
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 2
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 2
60035: PUSH
60036: LD_INT 2
60038: NEG
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 4
60046: PUSH
60047: LD_INT 2
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 4
60056: PUSH
60057: LD_INT 4
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 4
60066: PUSH
60067: LD_INT 3
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 5
60076: PUSH
60077: LD_INT 4
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 5
60086: PUSH
60087: LD_INT 5
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 4
60096: PUSH
60097: LD_INT 5
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 3
60106: PUSH
60107: LD_INT 4
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 3
60116: PUSH
60117: LD_INT 3
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 5
60126: PUSH
60127: LD_INT 3
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 3
60136: PUSH
60137: LD_INT 5
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: LIST
60152: LIST
60153: LIST
60154: LIST
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60191: LD_ADDR_VAR 0 33
60195: PUSH
60196: LD_INT 4
60198: NEG
60199: PUSH
60200: LD_INT 4
60202: NEG
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 4
60210: NEG
60211: PUSH
60212: LD_INT 5
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 3
60222: NEG
60223: PUSH
60224: LD_INT 4
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 3
60234: NEG
60235: PUSH
60236: LD_INT 3
60238: NEG
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 4
60246: NEG
60247: PUSH
60248: LD_INT 3
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 5
60258: NEG
60259: PUSH
60260: LD_INT 4
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 5
60270: NEG
60271: PUSH
60272: LD_INT 5
60274: NEG
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 3
60282: NEG
60283: PUSH
60284: LD_INT 5
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 5
60294: NEG
60295: PUSH
60296: LD_INT 3
60298: NEG
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 0
60306: PUSH
60307: LD_INT 3
60309: NEG
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 0
60317: PUSH
60318: LD_INT 4
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: LD_INT 3
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 1
60339: PUSH
60340: LD_INT 2
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: LD_INT 2
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 1
60361: NEG
60362: PUSH
60363: LD_INT 3
60365: NEG
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 1
60373: NEG
60374: PUSH
60375: LD_INT 4
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 2
60385: PUSH
60386: LD_INT 2
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 2
60396: NEG
60397: PUSH
60398: LD_INT 4
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 4
60408: PUSH
60409: LD_INT 0
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 4
60418: PUSH
60419: LD_INT 1
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 5
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 5
60439: PUSH
60440: LD_INT 1
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 4
60449: PUSH
60450: LD_INT 1
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 3
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 3
60469: PUSH
60470: LD_INT 1
60472: NEG
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 3
60480: PUSH
60481: LD_INT 2
60483: NEG
60484: PUSH
60485: EMPTY
60486: LIST
60487: LIST
60488: PUSH
60489: LD_INT 5
60491: PUSH
60492: LD_INT 2
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 3
60501: PUSH
60502: LD_INT 3
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 3
60511: PUSH
60512: LD_INT 2
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 4
60521: PUSH
60522: LD_INT 3
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 4
60531: PUSH
60532: LD_INT 4
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 3
60541: PUSH
60542: LD_INT 4
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 2
60551: PUSH
60552: LD_INT 3
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 2
60561: PUSH
60562: LD_INT 2
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 4
60571: PUSH
60572: LD_INT 2
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 2
60581: PUSH
60582: LD_INT 4
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: LD_INT 4
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 0
60601: PUSH
60602: LD_INT 3
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 1
60611: PUSH
60612: LD_INT 4
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: LD_INT 5
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: LD_INT 5
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: LD_INT 4
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 1
60652: NEG
60653: PUSH
60654: LD_INT 3
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 2
60663: PUSH
60664: LD_INT 5
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 2
60673: NEG
60674: PUSH
60675: LD_INT 3
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: LIST
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60729: LD_ADDR_VAR 0 34
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: LD_INT 4
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: LD_INT 5
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: LD_INT 4
60761: NEG
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 1
60769: PUSH
60770: LD_INT 3
60772: NEG
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 0
60780: PUSH
60781: LD_INT 3
60783: NEG
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 1
60791: NEG
60792: PUSH
60793: LD_INT 4
60795: NEG
60796: PUSH
60797: EMPTY
60798: LIST
60799: LIST
60800: PUSH
60801: LD_INT 1
60803: NEG
60804: PUSH
60805: LD_INT 5
60807: NEG
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 2
60815: PUSH
60816: LD_INT 3
60818: NEG
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 2
60826: NEG
60827: PUSH
60828: LD_INT 5
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 3
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 3
60848: PUSH
60849: LD_INT 1
60851: NEG
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 4
60859: PUSH
60860: LD_INT 0
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 4
60869: PUSH
60870: LD_INT 1
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 3
60879: PUSH
60880: LD_INT 1
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 2
60889: PUSH
60890: LD_INT 0
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 2
60899: PUSH
60900: LD_INT 1
60902: NEG
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 2
60910: PUSH
60911: LD_INT 2
60913: NEG
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 4
60921: PUSH
60922: LD_INT 2
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 4
60931: PUSH
60932: LD_INT 4
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 4
60941: PUSH
60942: LD_INT 3
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: PUSH
60949: LD_INT 5
60951: PUSH
60952: LD_INT 4
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 5
60961: PUSH
60962: LD_INT 5
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 4
60971: PUSH
60972: LD_INT 5
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 3
60981: PUSH
60982: LD_INT 4
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 3
60991: PUSH
60992: LD_INT 3
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 5
61001: PUSH
61002: LD_INT 3
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 3
61011: PUSH
61012: LD_INT 5
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: LD_INT 3
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: LD_INT 2
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: PUSH
61042: LD_INT 3
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 1
61051: PUSH
61052: LD_INT 4
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: LD_INT 4
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 1
61071: NEG
61072: PUSH
61073: LD_INT 3
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: LD_INT 2
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: LD_INT 4
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 2
61103: NEG
61104: PUSH
61105: LD_INT 2
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 4
61114: NEG
61115: PUSH
61116: LD_INT 0
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 4
61125: NEG
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 3
61137: NEG
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 3
61148: NEG
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 4
61159: NEG
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 5
61170: NEG
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 5
61181: NEG
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 5
61193: NEG
61194: PUSH
61195: LD_INT 2
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 3
61205: NEG
61206: PUSH
61207: LD_INT 2
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: ST_TO_ADDR
// end ; end ;
61261: GO 61264
61263: POP
// case btype of b_depot , b_warehouse :
61264: LD_VAR 0 1
61268: PUSH
61269: LD_INT 0
61271: DOUBLE
61272: EQUAL
61273: IFTRUE 61283
61275: LD_INT 1
61277: DOUBLE
61278: EQUAL
61279: IFTRUE 61283
61281: GO 61484
61283: POP
// case nation of nation_american :
61284: LD_VAR 0 5
61288: PUSH
61289: LD_INT 1
61291: DOUBLE
61292: EQUAL
61293: IFTRUE 61297
61295: GO 61353
61297: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61298: LD_ADDR_VAR 0 9
61302: PUSH
61303: LD_VAR 0 11
61307: PUSH
61308: LD_VAR 0 12
61312: PUSH
61313: LD_VAR 0 13
61317: PUSH
61318: LD_VAR 0 14
61322: PUSH
61323: LD_VAR 0 15
61327: PUSH
61328: LD_VAR 0 16
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: PUSH
61341: LD_VAR 0 4
61345: PUSH
61346: LD_INT 1
61348: PLUS
61349: ARRAY
61350: ST_TO_ADDR
61351: GO 61482
61353: LD_INT 2
61355: DOUBLE
61356: EQUAL
61357: IFTRUE 61361
61359: GO 61417
61361: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61362: LD_ADDR_VAR 0 9
61366: PUSH
61367: LD_VAR 0 17
61371: PUSH
61372: LD_VAR 0 18
61376: PUSH
61377: LD_VAR 0 19
61381: PUSH
61382: LD_VAR 0 20
61386: PUSH
61387: LD_VAR 0 21
61391: PUSH
61392: LD_VAR 0 22
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: LIST
61401: LIST
61402: LIST
61403: LIST
61404: PUSH
61405: LD_VAR 0 4
61409: PUSH
61410: LD_INT 1
61412: PLUS
61413: ARRAY
61414: ST_TO_ADDR
61415: GO 61482
61417: LD_INT 3
61419: DOUBLE
61420: EQUAL
61421: IFTRUE 61425
61423: GO 61481
61425: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61426: LD_ADDR_VAR 0 9
61430: PUSH
61431: LD_VAR 0 23
61435: PUSH
61436: LD_VAR 0 24
61440: PUSH
61441: LD_VAR 0 25
61445: PUSH
61446: LD_VAR 0 26
61450: PUSH
61451: LD_VAR 0 27
61455: PUSH
61456: LD_VAR 0 28
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: PUSH
61469: LD_VAR 0 4
61473: PUSH
61474: LD_INT 1
61476: PLUS
61477: ARRAY
61478: ST_TO_ADDR
61479: GO 61482
61481: POP
61482: GO 62037
61484: LD_INT 2
61486: DOUBLE
61487: EQUAL
61488: IFTRUE 61498
61490: LD_INT 3
61492: DOUBLE
61493: EQUAL
61494: IFTRUE 61498
61496: GO 61554
61498: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61499: LD_ADDR_VAR 0 9
61503: PUSH
61504: LD_VAR 0 29
61508: PUSH
61509: LD_VAR 0 30
61513: PUSH
61514: LD_VAR 0 31
61518: PUSH
61519: LD_VAR 0 32
61523: PUSH
61524: LD_VAR 0 33
61528: PUSH
61529: LD_VAR 0 34
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: PUSH
61542: LD_VAR 0 4
61546: PUSH
61547: LD_INT 1
61549: PLUS
61550: ARRAY
61551: ST_TO_ADDR
61552: GO 62037
61554: LD_INT 16
61556: DOUBLE
61557: EQUAL
61558: IFTRUE 61616
61560: LD_INT 17
61562: DOUBLE
61563: EQUAL
61564: IFTRUE 61616
61566: LD_INT 18
61568: DOUBLE
61569: EQUAL
61570: IFTRUE 61616
61572: LD_INT 19
61574: DOUBLE
61575: EQUAL
61576: IFTRUE 61616
61578: LD_INT 22
61580: DOUBLE
61581: EQUAL
61582: IFTRUE 61616
61584: LD_INT 20
61586: DOUBLE
61587: EQUAL
61588: IFTRUE 61616
61590: LD_INT 21
61592: DOUBLE
61593: EQUAL
61594: IFTRUE 61616
61596: LD_INT 23
61598: DOUBLE
61599: EQUAL
61600: IFTRUE 61616
61602: LD_INT 24
61604: DOUBLE
61605: EQUAL
61606: IFTRUE 61616
61608: LD_INT 25
61610: DOUBLE
61611: EQUAL
61612: IFTRUE 61616
61614: GO 61672
61616: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61617: LD_ADDR_VAR 0 9
61621: PUSH
61622: LD_VAR 0 35
61626: PUSH
61627: LD_VAR 0 36
61631: PUSH
61632: LD_VAR 0 37
61636: PUSH
61637: LD_VAR 0 38
61641: PUSH
61642: LD_VAR 0 39
61646: PUSH
61647: LD_VAR 0 40
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: PUSH
61660: LD_VAR 0 4
61664: PUSH
61665: LD_INT 1
61667: PLUS
61668: ARRAY
61669: ST_TO_ADDR
61670: GO 62037
61672: LD_INT 6
61674: DOUBLE
61675: EQUAL
61676: IFTRUE 61728
61678: LD_INT 7
61680: DOUBLE
61681: EQUAL
61682: IFTRUE 61728
61684: LD_INT 8
61686: DOUBLE
61687: EQUAL
61688: IFTRUE 61728
61690: LD_INT 13
61692: DOUBLE
61693: EQUAL
61694: IFTRUE 61728
61696: LD_INT 12
61698: DOUBLE
61699: EQUAL
61700: IFTRUE 61728
61702: LD_INT 15
61704: DOUBLE
61705: EQUAL
61706: IFTRUE 61728
61708: LD_INT 11
61710: DOUBLE
61711: EQUAL
61712: IFTRUE 61728
61714: LD_INT 14
61716: DOUBLE
61717: EQUAL
61718: IFTRUE 61728
61720: LD_INT 10
61722: DOUBLE
61723: EQUAL
61724: IFTRUE 61728
61726: GO 61784
61728: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61729: LD_ADDR_VAR 0 9
61733: PUSH
61734: LD_VAR 0 41
61738: PUSH
61739: LD_VAR 0 42
61743: PUSH
61744: LD_VAR 0 43
61748: PUSH
61749: LD_VAR 0 44
61753: PUSH
61754: LD_VAR 0 45
61758: PUSH
61759: LD_VAR 0 46
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: PUSH
61772: LD_VAR 0 4
61776: PUSH
61777: LD_INT 1
61779: PLUS
61780: ARRAY
61781: ST_TO_ADDR
61782: GO 62037
61784: LD_INT 36
61786: DOUBLE
61787: EQUAL
61788: IFTRUE 61792
61790: GO 61848
61792: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61793: LD_ADDR_VAR 0 9
61797: PUSH
61798: LD_VAR 0 47
61802: PUSH
61803: LD_VAR 0 48
61807: PUSH
61808: LD_VAR 0 49
61812: PUSH
61813: LD_VAR 0 50
61817: PUSH
61818: LD_VAR 0 51
61822: PUSH
61823: LD_VAR 0 52
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: PUSH
61836: LD_VAR 0 4
61840: PUSH
61841: LD_INT 1
61843: PLUS
61844: ARRAY
61845: ST_TO_ADDR
61846: GO 62037
61848: LD_INT 4
61850: DOUBLE
61851: EQUAL
61852: IFTRUE 61874
61854: LD_INT 5
61856: DOUBLE
61857: EQUAL
61858: IFTRUE 61874
61860: LD_INT 34
61862: DOUBLE
61863: EQUAL
61864: IFTRUE 61874
61866: LD_INT 37
61868: DOUBLE
61869: EQUAL
61870: IFTRUE 61874
61872: GO 61930
61874: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61875: LD_ADDR_VAR 0 9
61879: PUSH
61880: LD_VAR 0 53
61884: PUSH
61885: LD_VAR 0 54
61889: PUSH
61890: LD_VAR 0 55
61894: PUSH
61895: LD_VAR 0 56
61899: PUSH
61900: LD_VAR 0 57
61904: PUSH
61905: LD_VAR 0 58
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: PUSH
61918: LD_VAR 0 4
61922: PUSH
61923: LD_INT 1
61925: PLUS
61926: ARRAY
61927: ST_TO_ADDR
61928: GO 62037
61930: LD_INT 31
61932: DOUBLE
61933: EQUAL
61934: IFTRUE 61980
61936: LD_INT 32
61938: DOUBLE
61939: EQUAL
61940: IFTRUE 61980
61942: LD_INT 33
61944: DOUBLE
61945: EQUAL
61946: IFTRUE 61980
61948: LD_INT 27
61950: DOUBLE
61951: EQUAL
61952: IFTRUE 61980
61954: LD_INT 26
61956: DOUBLE
61957: EQUAL
61958: IFTRUE 61980
61960: LD_INT 28
61962: DOUBLE
61963: EQUAL
61964: IFTRUE 61980
61966: LD_INT 29
61968: DOUBLE
61969: EQUAL
61970: IFTRUE 61980
61972: LD_INT 30
61974: DOUBLE
61975: EQUAL
61976: IFTRUE 61980
61978: GO 62036
61980: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61981: LD_ADDR_VAR 0 9
61985: PUSH
61986: LD_VAR 0 59
61990: PUSH
61991: LD_VAR 0 60
61995: PUSH
61996: LD_VAR 0 61
62000: PUSH
62001: LD_VAR 0 62
62005: PUSH
62006: LD_VAR 0 63
62010: PUSH
62011: LD_VAR 0 64
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: PUSH
62024: LD_VAR 0 4
62028: PUSH
62029: LD_INT 1
62031: PLUS
62032: ARRAY
62033: ST_TO_ADDR
62034: GO 62037
62036: POP
// temp_list2 = [ ] ;
62037: LD_ADDR_VAR 0 10
62041: PUSH
62042: EMPTY
62043: ST_TO_ADDR
// for i in temp_list do
62044: LD_ADDR_VAR 0 8
62048: PUSH
62049: LD_VAR 0 9
62053: PUSH
62054: FOR_IN
62055: IFFALSE 62107
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62057: LD_ADDR_VAR 0 10
62061: PUSH
62062: LD_VAR 0 10
62066: PUSH
62067: LD_VAR 0 8
62071: PUSH
62072: LD_INT 1
62074: ARRAY
62075: PUSH
62076: LD_VAR 0 2
62080: PLUS
62081: PUSH
62082: LD_VAR 0 8
62086: PUSH
62087: LD_INT 2
62089: ARRAY
62090: PUSH
62091: LD_VAR 0 3
62095: PLUS
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: EMPTY
62102: LIST
62103: ADD
62104: ST_TO_ADDR
62105: GO 62054
62107: POP
62108: POP
// result = temp_list2 ;
62109: LD_ADDR_VAR 0 7
62113: PUSH
62114: LD_VAR 0 10
62118: ST_TO_ADDR
// end ;
62119: LD_VAR 0 7
62123: RET
// export function EnemyInRange ( unit , dist ) ; begin
62124: LD_INT 0
62126: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62127: LD_ADDR_VAR 0 3
62131: PUSH
62132: LD_VAR 0 1
62136: PPUSH
62137: CALL_OW 255
62141: PPUSH
62142: LD_VAR 0 1
62146: PPUSH
62147: CALL_OW 250
62151: PPUSH
62152: LD_VAR 0 1
62156: PPUSH
62157: CALL_OW 251
62161: PPUSH
62162: LD_VAR 0 2
62166: PPUSH
62167: CALL 35497 0 4
62171: PUSH
62172: LD_INT 4
62174: ARRAY
62175: ST_TO_ADDR
// end ;
62176: LD_VAR 0 3
62180: RET
// export function PlayerSeeMe ( unit ) ; begin
62181: LD_INT 0
62183: PPUSH
// result := See ( your_side , unit ) ;
62184: LD_ADDR_VAR 0 2
62188: PUSH
62189: LD_OWVAR 2
62193: PPUSH
62194: LD_VAR 0 1
62198: PPUSH
62199: CALL_OW 292
62203: ST_TO_ADDR
// end ;
62204: LD_VAR 0 2
62208: RET
// export function ReverseDir ( unit ) ; begin
62209: LD_INT 0
62211: PPUSH
// if not unit then
62212: LD_VAR 0 1
62216: NOT
62217: IFFALSE 62221
// exit ;
62219: GO 62244
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62221: LD_ADDR_VAR 0 2
62225: PUSH
62226: LD_VAR 0 1
62230: PPUSH
62231: CALL_OW 254
62235: PUSH
62236: LD_INT 3
62238: PLUS
62239: PUSH
62240: LD_INT 6
62242: MOD
62243: ST_TO_ADDR
// end ;
62244: LD_VAR 0 2
62248: RET
// export function ReverseArray ( array ) ; var i ; begin
62249: LD_INT 0
62251: PPUSH
62252: PPUSH
// if not array then
62253: LD_VAR 0 1
62257: NOT
62258: IFFALSE 62262
// exit ;
62260: GO 62317
// result := [ ] ;
62262: LD_ADDR_VAR 0 2
62266: PUSH
62267: EMPTY
62268: ST_TO_ADDR
// for i := array downto 1 do
62269: LD_ADDR_VAR 0 3
62273: PUSH
62274: DOUBLE
62275: LD_VAR 0 1
62279: INC
62280: ST_TO_ADDR
62281: LD_INT 1
62283: PUSH
62284: FOR_DOWNTO
62285: IFFALSE 62315
// result := Join ( result , array [ i ] ) ;
62287: LD_ADDR_VAR 0 2
62291: PUSH
62292: LD_VAR 0 2
62296: PPUSH
62297: LD_VAR 0 1
62301: PUSH
62302: LD_VAR 0 3
62306: ARRAY
62307: PPUSH
62308: CALL 66973 0 2
62312: ST_TO_ADDR
62313: GO 62284
62315: POP
62316: POP
// end ;
62317: LD_VAR 0 2
62321: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
62322: LD_INT 0
62324: PPUSH
62325: PPUSH
62326: PPUSH
62327: PPUSH
62328: PPUSH
62329: PPUSH
// if not unit or not hexes then
62330: LD_VAR 0 1
62334: NOT
62335: PUSH
62336: LD_VAR 0 2
62340: NOT
62341: OR
62342: IFFALSE 62346
// exit ;
62344: GO 62469
// dist := 9999 ;
62346: LD_ADDR_VAR 0 5
62350: PUSH
62351: LD_INT 9999
62353: ST_TO_ADDR
// for i = 1 to hexes do
62354: LD_ADDR_VAR 0 4
62358: PUSH
62359: DOUBLE
62360: LD_INT 1
62362: DEC
62363: ST_TO_ADDR
62364: LD_VAR 0 2
62368: PUSH
62369: FOR_TO
62370: IFFALSE 62457
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62372: LD_ADDR_VAR 0 6
62376: PUSH
62377: LD_VAR 0 1
62381: PPUSH
62382: LD_VAR 0 2
62386: PUSH
62387: LD_VAR 0 4
62391: ARRAY
62392: PUSH
62393: LD_INT 1
62395: ARRAY
62396: PPUSH
62397: LD_VAR 0 2
62401: PUSH
62402: LD_VAR 0 4
62406: ARRAY
62407: PUSH
62408: LD_INT 2
62410: ARRAY
62411: PPUSH
62412: CALL_OW 297
62416: ST_TO_ADDR
// if tdist < dist then
62417: LD_VAR 0 6
62421: PUSH
62422: LD_VAR 0 5
62426: LESS
62427: IFFALSE 62455
// begin hex := hexes [ i ] ;
62429: LD_ADDR_VAR 0 8
62433: PUSH
62434: LD_VAR 0 2
62438: PUSH
62439: LD_VAR 0 4
62443: ARRAY
62444: ST_TO_ADDR
// dist := tdist ;
62445: LD_ADDR_VAR 0 5
62449: PUSH
62450: LD_VAR 0 6
62454: ST_TO_ADDR
// end ; end ;
62455: GO 62369
62457: POP
62458: POP
// result := hex ;
62459: LD_ADDR_VAR 0 3
62463: PUSH
62464: LD_VAR 0 8
62468: ST_TO_ADDR
// end ;
62469: LD_VAR 0 3
62473: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62474: LD_INT 0
62476: PPUSH
62477: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62478: LD_VAR 0 1
62482: NOT
62483: PUSH
62484: LD_VAR 0 1
62488: PUSH
62489: LD_INT 21
62491: PUSH
62492: LD_INT 2
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 23
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PPUSH
62513: CALL_OW 69
62517: IN
62518: NOT
62519: OR
62520: IFFALSE 62524
// exit ;
62522: GO 62571
// for i = 1 to 3 do
62524: LD_ADDR_VAR 0 3
62528: PUSH
62529: DOUBLE
62530: LD_INT 1
62532: DEC
62533: ST_TO_ADDR
62534: LD_INT 3
62536: PUSH
62537: FOR_TO
62538: IFFALSE 62569
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62540: LD_VAR 0 1
62544: PPUSH
62545: CALL_OW 250
62549: PPUSH
62550: LD_VAR 0 1
62554: PPUSH
62555: CALL_OW 251
62559: PPUSH
62560: LD_INT 1
62562: PPUSH
62563: CALL_OW 453
62567: GO 62537
62569: POP
62570: POP
// end ;
62571: LD_VAR 0 2
62575: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62576: LD_INT 0
62578: PPUSH
62579: PPUSH
62580: PPUSH
62581: PPUSH
62582: PPUSH
62583: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62584: LD_VAR 0 1
62588: NOT
62589: PUSH
62590: LD_VAR 0 2
62594: NOT
62595: OR
62596: PUSH
62597: LD_VAR 0 1
62601: PPUSH
62602: CALL_OW 314
62606: OR
62607: IFFALSE 62611
// exit ;
62609: GO 63078
// if GetLives ( i ) < 250 then
62611: LD_VAR 0 4
62615: PPUSH
62616: CALL_OW 256
62620: PUSH
62621: LD_INT 250
62623: LESS
62624: IFFALSE 62637
// begin ComAutodestruct ( i ) ;
62626: LD_VAR 0 4
62630: PPUSH
62631: CALL 62474 0 1
// exit ;
62635: GO 63078
// end ; x := GetX ( enemy_unit ) ;
62637: LD_ADDR_VAR 0 7
62641: PUSH
62642: LD_VAR 0 2
62646: PPUSH
62647: CALL_OW 250
62651: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62652: LD_ADDR_VAR 0 8
62656: PUSH
62657: LD_VAR 0 2
62661: PPUSH
62662: CALL_OW 251
62666: ST_TO_ADDR
// if not x or not y then
62667: LD_VAR 0 7
62671: NOT
62672: PUSH
62673: LD_VAR 0 8
62677: NOT
62678: OR
62679: IFFALSE 62683
// exit ;
62681: GO 63078
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62683: LD_ADDR_VAR 0 6
62687: PUSH
62688: LD_VAR 0 7
62692: PPUSH
62693: LD_INT 0
62695: PPUSH
62696: LD_INT 4
62698: PPUSH
62699: CALL_OW 272
62703: PUSH
62704: LD_VAR 0 8
62708: PPUSH
62709: LD_INT 0
62711: PPUSH
62712: LD_INT 4
62714: PPUSH
62715: CALL_OW 273
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: LD_VAR 0 7
62728: PPUSH
62729: LD_INT 1
62731: PPUSH
62732: LD_INT 4
62734: PPUSH
62735: CALL_OW 272
62739: PUSH
62740: LD_VAR 0 8
62744: PPUSH
62745: LD_INT 1
62747: PPUSH
62748: LD_INT 4
62750: PPUSH
62751: CALL_OW 273
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_VAR 0 7
62764: PPUSH
62765: LD_INT 2
62767: PPUSH
62768: LD_INT 4
62770: PPUSH
62771: CALL_OW 272
62775: PUSH
62776: LD_VAR 0 8
62780: PPUSH
62781: LD_INT 2
62783: PPUSH
62784: LD_INT 4
62786: PPUSH
62787: CALL_OW 273
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_VAR 0 7
62800: PPUSH
62801: LD_INT 3
62803: PPUSH
62804: LD_INT 4
62806: PPUSH
62807: CALL_OW 272
62811: PUSH
62812: LD_VAR 0 8
62816: PPUSH
62817: LD_INT 3
62819: PPUSH
62820: LD_INT 4
62822: PPUSH
62823: CALL_OW 273
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: PUSH
62832: LD_VAR 0 7
62836: PPUSH
62837: LD_INT 4
62839: PPUSH
62840: LD_INT 4
62842: PPUSH
62843: CALL_OW 272
62847: PUSH
62848: LD_VAR 0 8
62852: PPUSH
62853: LD_INT 4
62855: PPUSH
62856: LD_INT 4
62858: PPUSH
62859: CALL_OW 273
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_VAR 0 7
62872: PPUSH
62873: LD_INT 5
62875: PPUSH
62876: LD_INT 4
62878: PPUSH
62879: CALL_OW 272
62883: PUSH
62884: LD_VAR 0 8
62888: PPUSH
62889: LD_INT 5
62891: PPUSH
62892: LD_INT 4
62894: PPUSH
62895: CALL_OW 273
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: ST_TO_ADDR
// for i = tmp downto 1 do
62912: LD_ADDR_VAR 0 4
62916: PUSH
62917: DOUBLE
62918: LD_VAR 0 6
62922: INC
62923: ST_TO_ADDR
62924: LD_INT 1
62926: PUSH
62927: FOR_DOWNTO
62928: IFFALSE 63029
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62930: LD_VAR 0 6
62934: PUSH
62935: LD_VAR 0 4
62939: ARRAY
62940: PUSH
62941: LD_INT 1
62943: ARRAY
62944: PPUSH
62945: LD_VAR 0 6
62949: PUSH
62950: LD_VAR 0 4
62954: ARRAY
62955: PUSH
62956: LD_INT 2
62958: ARRAY
62959: PPUSH
62960: CALL_OW 488
62964: NOT
62965: PUSH
62966: LD_VAR 0 6
62970: PUSH
62971: LD_VAR 0 4
62975: ARRAY
62976: PUSH
62977: LD_INT 1
62979: ARRAY
62980: PPUSH
62981: LD_VAR 0 6
62985: PUSH
62986: LD_VAR 0 4
62990: ARRAY
62991: PUSH
62992: LD_INT 2
62994: ARRAY
62995: PPUSH
62996: CALL_OW 428
63000: PUSH
63001: LD_INT 0
63003: NONEQUAL
63004: OR
63005: IFFALSE 63027
// tmp := Delete ( tmp , i ) ;
63007: LD_ADDR_VAR 0 6
63011: PUSH
63012: LD_VAR 0 6
63016: PPUSH
63017: LD_VAR 0 4
63021: PPUSH
63022: CALL_OW 3
63026: ST_TO_ADDR
63027: GO 62927
63029: POP
63030: POP
// j := GetClosestHex ( unit , tmp ) ;
63031: LD_ADDR_VAR 0 5
63035: PUSH
63036: LD_VAR 0 1
63040: PPUSH
63041: LD_VAR 0 6
63045: PPUSH
63046: CALL 62322 0 2
63050: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63051: LD_VAR 0 1
63055: PPUSH
63056: LD_VAR 0 5
63060: PUSH
63061: LD_INT 1
63063: ARRAY
63064: PPUSH
63065: LD_VAR 0 5
63069: PUSH
63070: LD_INT 2
63072: ARRAY
63073: PPUSH
63074: CALL_OW 111
// end ;
63078: LD_VAR 0 3
63082: RET
// export function PrepareApemanSoldier ( ) ; begin
63083: LD_INT 0
63085: PPUSH
// uc_nation := 0 ;
63086: LD_ADDR_OWVAR 21
63090: PUSH
63091: LD_INT 0
63093: ST_TO_ADDR
// hc_sex := sex_male ;
63094: LD_ADDR_OWVAR 27
63098: PUSH
63099: LD_INT 1
63101: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
63102: LD_ADDR_OWVAR 28
63106: PUSH
63107: LD_INT 15
63109: ST_TO_ADDR
// hc_gallery :=  ;
63110: LD_ADDR_OWVAR 33
63114: PUSH
63115: LD_STRING 
63117: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63118: LD_ADDR_OWVAR 31
63122: PUSH
63123: LD_INT 0
63125: PPUSH
63126: LD_INT 3
63128: PPUSH
63129: CALL_OW 12
63133: PUSH
63134: LD_INT 0
63136: PPUSH
63137: LD_INT 3
63139: PPUSH
63140: CALL_OW 12
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: LD_INT 0
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: ST_TO_ADDR
// end ;
63157: LD_VAR 0 1
63161: RET
// export function PrepareApemanEngineer ( ) ; begin
63162: LD_INT 0
63164: PPUSH
// uc_nation := 0 ;
63165: LD_ADDR_OWVAR 21
63169: PUSH
63170: LD_INT 0
63172: ST_TO_ADDR
// hc_sex := sex_male ;
63173: LD_ADDR_OWVAR 27
63177: PUSH
63178: LD_INT 1
63180: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
63181: LD_ADDR_OWVAR 28
63185: PUSH
63186: LD_INT 16
63188: ST_TO_ADDR
// hc_gallery :=  ;
63189: LD_ADDR_OWVAR 33
63193: PUSH
63194: LD_STRING 
63196: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63197: LD_ADDR_OWVAR 31
63201: PUSH
63202: LD_INT 0
63204: PPUSH
63205: LD_INT 3
63207: PPUSH
63208: CALL_OW 12
63212: PUSH
63213: LD_INT 0
63215: PPUSH
63216: LD_INT 3
63218: PPUSH
63219: CALL_OW 12
63223: PUSH
63224: LD_INT 0
63226: PUSH
63227: LD_INT 0
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: ST_TO_ADDR
// end ;
63236: LD_VAR 0 1
63240: RET
// export function PrepareApeman ( agressivity ) ; begin
63241: LD_INT 0
63243: PPUSH
// uc_side := 0 ;
63244: LD_ADDR_OWVAR 20
63248: PUSH
63249: LD_INT 0
63251: ST_TO_ADDR
// uc_nation := 0 ;
63252: LD_ADDR_OWVAR 21
63256: PUSH
63257: LD_INT 0
63259: ST_TO_ADDR
// hc_sex := sex_male ;
63260: LD_ADDR_OWVAR 27
63264: PUSH
63265: LD_INT 1
63267: ST_TO_ADDR
// hc_class := class_apeman ;
63268: LD_ADDR_OWVAR 28
63272: PUSH
63273: LD_INT 12
63275: ST_TO_ADDR
// hc_gallery :=  ;
63276: LD_ADDR_OWVAR 33
63280: PUSH
63281: LD_STRING 
63283: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63284: LD_ADDR_OWVAR 35
63288: PUSH
63289: LD_VAR 0 1
63293: NEG
63294: PPUSH
63295: LD_VAR 0 1
63299: PPUSH
63300: CALL_OW 12
63304: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
63305: LD_ADDR_OWVAR 31
63309: PUSH
63310: LD_INT 0
63312: PPUSH
63313: LD_INT 3
63315: PPUSH
63316: CALL_OW 12
63320: PUSH
63321: LD_INT 0
63323: PPUSH
63324: LD_INT 3
63326: PPUSH
63327: CALL_OW 12
63331: PUSH
63332: LD_INT 0
63334: PUSH
63335: LD_INT 0
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: ST_TO_ADDR
// end ;
63344: LD_VAR 0 2
63348: RET
// export function PrepareTiger ( agressivity ) ; begin
63349: LD_INT 0
63351: PPUSH
// uc_side := 0 ;
63352: LD_ADDR_OWVAR 20
63356: PUSH
63357: LD_INT 0
63359: ST_TO_ADDR
// uc_nation := 0 ;
63360: LD_ADDR_OWVAR 21
63364: PUSH
63365: LD_INT 0
63367: ST_TO_ADDR
// hc_class := class_tiger ;
63368: LD_ADDR_OWVAR 28
63372: PUSH
63373: LD_INT 14
63375: ST_TO_ADDR
// hc_gallery :=  ;
63376: LD_ADDR_OWVAR 33
63380: PUSH
63381: LD_STRING 
63383: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
63384: LD_ADDR_OWVAR 35
63388: PUSH
63389: LD_VAR 0 1
63393: NEG
63394: PPUSH
63395: LD_VAR 0 1
63399: PPUSH
63400: CALL_OW 12
63404: ST_TO_ADDR
// end ;
63405: LD_VAR 0 2
63409: RET
// export function PrepareEnchidna ( ) ; begin
63410: LD_INT 0
63412: PPUSH
// uc_side := 0 ;
63413: LD_ADDR_OWVAR 20
63417: PUSH
63418: LD_INT 0
63420: ST_TO_ADDR
// uc_nation := 0 ;
63421: LD_ADDR_OWVAR 21
63425: PUSH
63426: LD_INT 0
63428: ST_TO_ADDR
// hc_class := class_baggie ;
63429: LD_ADDR_OWVAR 28
63433: PUSH
63434: LD_INT 13
63436: ST_TO_ADDR
// hc_gallery :=  ;
63437: LD_ADDR_OWVAR 33
63441: PUSH
63442: LD_STRING 
63444: ST_TO_ADDR
// end ;
63445: LD_VAR 0 1
63449: RET
// export function PrepareFrog ( ) ; begin
63450: LD_INT 0
63452: PPUSH
// uc_side := 0 ;
63453: LD_ADDR_OWVAR 20
63457: PUSH
63458: LD_INT 0
63460: ST_TO_ADDR
// uc_nation := 0 ;
63461: LD_ADDR_OWVAR 21
63465: PUSH
63466: LD_INT 0
63468: ST_TO_ADDR
// hc_class := class_frog ;
63469: LD_ADDR_OWVAR 28
63473: PUSH
63474: LD_INT 19
63476: ST_TO_ADDR
// hc_gallery :=  ;
63477: LD_ADDR_OWVAR 33
63481: PUSH
63482: LD_STRING 
63484: ST_TO_ADDR
// end ;
63485: LD_VAR 0 1
63489: RET
// export function PrepareFish ( ) ; begin
63490: LD_INT 0
63492: PPUSH
// uc_side := 0 ;
63493: LD_ADDR_OWVAR 20
63497: PUSH
63498: LD_INT 0
63500: ST_TO_ADDR
// uc_nation := 0 ;
63501: LD_ADDR_OWVAR 21
63505: PUSH
63506: LD_INT 0
63508: ST_TO_ADDR
// hc_class := class_fish ;
63509: LD_ADDR_OWVAR 28
63513: PUSH
63514: LD_INT 20
63516: ST_TO_ADDR
// hc_gallery :=  ;
63517: LD_ADDR_OWVAR 33
63521: PUSH
63522: LD_STRING 
63524: ST_TO_ADDR
// end ;
63525: LD_VAR 0 1
63529: RET
// export function PrepareBird ( ) ; begin
63530: LD_INT 0
63532: PPUSH
// uc_side := 0 ;
63533: LD_ADDR_OWVAR 20
63537: PUSH
63538: LD_INT 0
63540: ST_TO_ADDR
// uc_nation := 0 ;
63541: LD_ADDR_OWVAR 21
63545: PUSH
63546: LD_INT 0
63548: ST_TO_ADDR
// hc_class := class_phororhacos ;
63549: LD_ADDR_OWVAR 28
63553: PUSH
63554: LD_INT 18
63556: ST_TO_ADDR
// hc_gallery :=  ;
63557: LD_ADDR_OWVAR 33
63561: PUSH
63562: LD_STRING 
63564: ST_TO_ADDR
// end ;
63565: LD_VAR 0 1
63569: RET
// export function PrepareHorse ( ) ; begin
63570: LD_INT 0
63572: PPUSH
// uc_side := 0 ;
63573: LD_ADDR_OWVAR 20
63577: PUSH
63578: LD_INT 0
63580: ST_TO_ADDR
// uc_nation := 0 ;
63581: LD_ADDR_OWVAR 21
63585: PUSH
63586: LD_INT 0
63588: ST_TO_ADDR
// hc_class := class_horse ;
63589: LD_ADDR_OWVAR 28
63593: PUSH
63594: LD_INT 21
63596: ST_TO_ADDR
// hc_gallery :=  ;
63597: LD_ADDR_OWVAR 33
63601: PUSH
63602: LD_STRING 
63604: ST_TO_ADDR
// end ;
63605: LD_VAR 0 1
63609: RET
// export function PrepareMastodont ( ) ; begin
63610: LD_INT 0
63612: PPUSH
// uc_side := 0 ;
63613: LD_ADDR_OWVAR 20
63617: PUSH
63618: LD_INT 0
63620: ST_TO_ADDR
// uc_nation := 0 ;
63621: LD_ADDR_OWVAR 21
63625: PUSH
63626: LD_INT 0
63628: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63629: LD_ADDR_OWVAR 37
63633: PUSH
63634: LD_INT 31
63636: ST_TO_ADDR
// vc_control := control_rider ;
63637: LD_ADDR_OWVAR 38
63641: PUSH
63642: LD_INT 4
63644: ST_TO_ADDR
// end ;
63645: LD_VAR 0 1
63649: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63650: LD_INT 0
63652: PPUSH
63653: PPUSH
63654: PPUSH
// uc_side = 0 ;
63655: LD_ADDR_OWVAR 20
63659: PUSH
63660: LD_INT 0
63662: ST_TO_ADDR
// uc_nation = 0 ;
63663: LD_ADDR_OWVAR 21
63667: PUSH
63668: LD_INT 0
63670: ST_TO_ADDR
// InitHc_All ( ) ;
63671: CALL_OW 584
// InitVc ;
63675: CALL_OW 20
// if mastodonts then
63679: LD_VAR 0 6
63683: IFFALSE 63750
// for i = 1 to mastodonts do
63685: LD_ADDR_VAR 0 11
63689: PUSH
63690: DOUBLE
63691: LD_INT 1
63693: DEC
63694: ST_TO_ADDR
63695: LD_VAR 0 6
63699: PUSH
63700: FOR_TO
63701: IFFALSE 63748
// begin vc_chassis := 31 ;
63703: LD_ADDR_OWVAR 37
63707: PUSH
63708: LD_INT 31
63710: ST_TO_ADDR
// vc_control := control_rider ;
63711: LD_ADDR_OWVAR 38
63715: PUSH
63716: LD_INT 4
63718: ST_TO_ADDR
// animal := CreateVehicle ;
63719: LD_ADDR_VAR 0 12
63723: PUSH
63724: CALL_OW 45
63728: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63729: LD_VAR 0 12
63733: PPUSH
63734: LD_VAR 0 8
63738: PPUSH
63739: LD_INT 0
63741: PPUSH
63742: CALL 65878 0 3
// end ;
63746: GO 63700
63748: POP
63749: POP
// if horses then
63750: LD_VAR 0 5
63754: IFFALSE 63821
// for i = 1 to horses do
63756: LD_ADDR_VAR 0 11
63760: PUSH
63761: DOUBLE
63762: LD_INT 1
63764: DEC
63765: ST_TO_ADDR
63766: LD_VAR 0 5
63770: PUSH
63771: FOR_TO
63772: IFFALSE 63819
// begin hc_class := 21 ;
63774: LD_ADDR_OWVAR 28
63778: PUSH
63779: LD_INT 21
63781: ST_TO_ADDR
// hc_gallery :=  ;
63782: LD_ADDR_OWVAR 33
63786: PUSH
63787: LD_STRING 
63789: ST_TO_ADDR
// animal := CreateHuman ;
63790: LD_ADDR_VAR 0 12
63794: PUSH
63795: CALL_OW 44
63799: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63800: LD_VAR 0 12
63804: PPUSH
63805: LD_VAR 0 8
63809: PPUSH
63810: LD_INT 0
63812: PPUSH
63813: CALL 65878 0 3
// end ;
63817: GO 63771
63819: POP
63820: POP
// if birds then
63821: LD_VAR 0 1
63825: IFFALSE 63892
// for i = 1 to birds do
63827: LD_ADDR_VAR 0 11
63831: PUSH
63832: DOUBLE
63833: LD_INT 1
63835: DEC
63836: ST_TO_ADDR
63837: LD_VAR 0 1
63841: PUSH
63842: FOR_TO
63843: IFFALSE 63890
// begin hc_class := 18 ;
63845: LD_ADDR_OWVAR 28
63849: PUSH
63850: LD_INT 18
63852: ST_TO_ADDR
// hc_gallery =  ;
63853: LD_ADDR_OWVAR 33
63857: PUSH
63858: LD_STRING 
63860: ST_TO_ADDR
// animal := CreateHuman ;
63861: LD_ADDR_VAR 0 12
63865: PUSH
63866: CALL_OW 44
63870: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63871: LD_VAR 0 12
63875: PPUSH
63876: LD_VAR 0 8
63880: PPUSH
63881: LD_INT 0
63883: PPUSH
63884: CALL 65878 0 3
// end ;
63888: GO 63842
63890: POP
63891: POP
// if tigers then
63892: LD_VAR 0 2
63896: IFFALSE 63980
// for i = 1 to tigers do
63898: LD_ADDR_VAR 0 11
63902: PUSH
63903: DOUBLE
63904: LD_INT 1
63906: DEC
63907: ST_TO_ADDR
63908: LD_VAR 0 2
63912: PUSH
63913: FOR_TO
63914: IFFALSE 63978
// begin hc_class = class_tiger ;
63916: LD_ADDR_OWVAR 28
63920: PUSH
63921: LD_INT 14
63923: ST_TO_ADDR
// hc_gallery =  ;
63924: LD_ADDR_OWVAR 33
63928: PUSH
63929: LD_STRING 
63931: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63932: LD_ADDR_OWVAR 35
63936: PUSH
63937: LD_INT 7
63939: NEG
63940: PPUSH
63941: LD_INT 7
63943: PPUSH
63944: CALL_OW 12
63948: ST_TO_ADDR
// animal := CreateHuman ;
63949: LD_ADDR_VAR 0 12
63953: PUSH
63954: CALL_OW 44
63958: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63959: LD_VAR 0 12
63963: PPUSH
63964: LD_VAR 0 8
63968: PPUSH
63969: LD_INT 0
63971: PPUSH
63972: CALL 65878 0 3
// end ;
63976: GO 63913
63978: POP
63979: POP
// if apemans then
63980: LD_VAR 0 3
63984: IFFALSE 64107
// for i = 1 to apemans do
63986: LD_ADDR_VAR 0 11
63990: PUSH
63991: DOUBLE
63992: LD_INT 1
63994: DEC
63995: ST_TO_ADDR
63996: LD_VAR 0 3
64000: PUSH
64001: FOR_TO
64002: IFFALSE 64105
// begin hc_class = class_apeman ;
64004: LD_ADDR_OWVAR 28
64008: PUSH
64009: LD_INT 12
64011: ST_TO_ADDR
// hc_gallery =  ;
64012: LD_ADDR_OWVAR 33
64016: PUSH
64017: LD_STRING 
64019: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64020: LD_ADDR_OWVAR 35
64024: PUSH
64025: LD_INT 2
64027: NEG
64028: PPUSH
64029: LD_INT 2
64031: PPUSH
64032: CALL_OW 12
64036: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64037: LD_ADDR_OWVAR 31
64041: PUSH
64042: LD_INT 1
64044: PPUSH
64045: LD_INT 3
64047: PPUSH
64048: CALL_OW 12
64052: PUSH
64053: LD_INT 1
64055: PPUSH
64056: LD_INT 3
64058: PPUSH
64059: CALL_OW 12
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: LD_INT 0
64069: PUSH
64070: EMPTY
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: ST_TO_ADDR
// animal := CreateHuman ;
64076: LD_ADDR_VAR 0 12
64080: PUSH
64081: CALL_OW 44
64085: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64086: LD_VAR 0 12
64090: PPUSH
64091: LD_VAR 0 8
64095: PPUSH
64096: LD_INT 0
64098: PPUSH
64099: CALL 65878 0 3
// end ;
64103: GO 64001
64105: POP
64106: POP
// if enchidnas then
64107: LD_VAR 0 4
64111: IFFALSE 64178
// for i = 1 to enchidnas do
64113: LD_ADDR_VAR 0 11
64117: PUSH
64118: DOUBLE
64119: LD_INT 1
64121: DEC
64122: ST_TO_ADDR
64123: LD_VAR 0 4
64127: PUSH
64128: FOR_TO
64129: IFFALSE 64176
// begin hc_class = 13 ;
64131: LD_ADDR_OWVAR 28
64135: PUSH
64136: LD_INT 13
64138: ST_TO_ADDR
// hc_gallery =  ;
64139: LD_ADDR_OWVAR 33
64143: PUSH
64144: LD_STRING 
64146: ST_TO_ADDR
// animal := CreateHuman ;
64147: LD_ADDR_VAR 0 12
64151: PUSH
64152: CALL_OW 44
64156: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64157: LD_VAR 0 12
64161: PPUSH
64162: LD_VAR 0 8
64166: PPUSH
64167: LD_INT 0
64169: PPUSH
64170: CALL 65878 0 3
// end ;
64174: GO 64128
64176: POP
64177: POP
// if fishes then
64178: LD_VAR 0 7
64182: IFFALSE 64249
// for i = 1 to fishes do
64184: LD_ADDR_VAR 0 11
64188: PUSH
64189: DOUBLE
64190: LD_INT 1
64192: DEC
64193: ST_TO_ADDR
64194: LD_VAR 0 7
64198: PUSH
64199: FOR_TO
64200: IFFALSE 64247
// begin hc_class = 20 ;
64202: LD_ADDR_OWVAR 28
64206: PUSH
64207: LD_INT 20
64209: ST_TO_ADDR
// hc_gallery =  ;
64210: LD_ADDR_OWVAR 33
64214: PUSH
64215: LD_STRING 
64217: ST_TO_ADDR
// animal := CreateHuman ;
64218: LD_ADDR_VAR 0 12
64222: PUSH
64223: CALL_OW 44
64227: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64228: LD_VAR 0 12
64232: PPUSH
64233: LD_VAR 0 9
64237: PPUSH
64238: LD_INT 0
64240: PPUSH
64241: CALL 65878 0 3
// end ;
64245: GO 64199
64247: POP
64248: POP
// end ;
64249: LD_VAR 0 10
64253: RET
// export function WantHeal ( sci , unit ) ; begin
64254: LD_INT 0
64256: PPUSH
// if GetTaskList ( sci ) > 0 then
64257: LD_VAR 0 1
64261: PPUSH
64262: CALL_OW 437
64266: PUSH
64267: LD_INT 0
64269: GREATER
64270: IFFALSE 64340
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
64272: LD_VAR 0 1
64276: PPUSH
64277: CALL_OW 437
64281: PUSH
64282: LD_INT 1
64284: ARRAY
64285: PUSH
64286: LD_INT 1
64288: ARRAY
64289: PUSH
64290: LD_STRING l
64292: EQUAL
64293: PUSH
64294: LD_VAR 0 1
64298: PPUSH
64299: CALL_OW 437
64303: PUSH
64304: LD_INT 1
64306: ARRAY
64307: PUSH
64308: LD_INT 4
64310: ARRAY
64311: PUSH
64312: LD_VAR 0 2
64316: EQUAL
64317: AND
64318: IFFALSE 64330
// result := true else
64320: LD_ADDR_VAR 0 3
64324: PUSH
64325: LD_INT 1
64327: ST_TO_ADDR
64328: GO 64338
// result := false ;
64330: LD_ADDR_VAR 0 3
64334: PUSH
64335: LD_INT 0
64337: ST_TO_ADDR
// end else
64338: GO 64348
// result := false ;
64340: LD_ADDR_VAR 0 3
64344: PUSH
64345: LD_INT 0
64347: ST_TO_ADDR
// end ;
64348: LD_VAR 0 3
64352: RET
// export function HealTarget ( sci ) ; begin
64353: LD_INT 0
64355: PPUSH
// if not sci then
64356: LD_VAR 0 1
64360: NOT
64361: IFFALSE 64365
// exit ;
64363: GO 64430
// result := 0 ;
64365: LD_ADDR_VAR 0 2
64369: PUSH
64370: LD_INT 0
64372: ST_TO_ADDR
// if GetTaskList ( sci ) then
64373: LD_VAR 0 1
64377: PPUSH
64378: CALL_OW 437
64382: IFFALSE 64430
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64384: LD_VAR 0 1
64388: PPUSH
64389: CALL_OW 437
64393: PUSH
64394: LD_INT 1
64396: ARRAY
64397: PUSH
64398: LD_INT 1
64400: ARRAY
64401: PUSH
64402: LD_STRING l
64404: EQUAL
64405: IFFALSE 64430
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64407: LD_ADDR_VAR 0 2
64411: PUSH
64412: LD_VAR 0 1
64416: PPUSH
64417: CALL_OW 437
64421: PUSH
64422: LD_INT 1
64424: ARRAY
64425: PUSH
64426: LD_INT 4
64428: ARRAY
64429: ST_TO_ADDR
// end ;
64430: LD_VAR 0 2
64434: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64435: LD_INT 0
64437: PPUSH
64438: PPUSH
64439: PPUSH
64440: PPUSH
// if not base_units then
64441: LD_VAR 0 1
64445: NOT
64446: IFFALSE 64450
// exit ;
64448: GO 64537
// result := false ;
64450: LD_ADDR_VAR 0 2
64454: PUSH
64455: LD_INT 0
64457: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64458: LD_ADDR_VAR 0 5
64462: PUSH
64463: LD_VAR 0 1
64467: PPUSH
64468: LD_INT 21
64470: PUSH
64471: LD_INT 3
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PPUSH
64478: CALL_OW 72
64482: ST_TO_ADDR
// if not tmp then
64483: LD_VAR 0 5
64487: NOT
64488: IFFALSE 64492
// exit ;
64490: GO 64537
// for i in tmp do
64492: LD_ADDR_VAR 0 3
64496: PUSH
64497: LD_VAR 0 5
64501: PUSH
64502: FOR_IN
64503: IFFALSE 64535
// begin result := EnemyInRange ( i , 22 ) ;
64505: LD_ADDR_VAR 0 2
64509: PUSH
64510: LD_VAR 0 3
64514: PPUSH
64515: LD_INT 22
64517: PPUSH
64518: CALL 62124 0 2
64522: ST_TO_ADDR
// if result then
64523: LD_VAR 0 2
64527: IFFALSE 64533
// exit ;
64529: POP
64530: POP
64531: GO 64537
// end ;
64533: GO 64502
64535: POP
64536: POP
// end ;
64537: LD_VAR 0 2
64541: RET
// export function FilterByTag ( units , tag ) ; begin
64542: LD_INT 0
64544: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64545: LD_ADDR_VAR 0 3
64549: PUSH
64550: LD_VAR 0 1
64554: PPUSH
64555: LD_INT 120
64557: PUSH
64558: LD_VAR 0 2
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PPUSH
64567: CALL_OW 72
64571: ST_TO_ADDR
// end ;
64572: LD_VAR 0 3
64576: RET
// export function IsDriver ( un ) ; begin
64577: LD_INT 0
64579: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64580: LD_ADDR_VAR 0 2
64584: PUSH
64585: LD_VAR 0 1
64589: PUSH
64590: LD_INT 55
64592: PUSH
64593: EMPTY
64594: LIST
64595: PPUSH
64596: CALL_OW 69
64600: IN
64601: ST_TO_ADDR
// end ;
64602: LD_VAR 0 2
64606: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64607: LD_INT 0
64609: PPUSH
64610: PPUSH
// list := [ ] ;
64611: LD_ADDR_VAR 0 5
64615: PUSH
64616: EMPTY
64617: ST_TO_ADDR
// case d of 0 :
64618: LD_VAR 0 3
64622: PUSH
64623: LD_INT 0
64625: DOUBLE
64626: EQUAL
64627: IFTRUE 64631
64629: GO 64764
64631: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64632: LD_ADDR_VAR 0 5
64636: PUSH
64637: LD_VAR 0 1
64641: PUSH
64642: LD_INT 4
64644: MINUS
64645: PUSH
64646: LD_VAR 0 2
64650: PUSH
64651: LD_INT 4
64653: MINUS
64654: PUSH
64655: LD_INT 2
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: LIST
64662: PUSH
64663: LD_VAR 0 1
64667: PUSH
64668: LD_INT 3
64670: MINUS
64671: PUSH
64672: LD_VAR 0 2
64676: PUSH
64677: LD_INT 1
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: LIST
64684: PUSH
64685: LD_VAR 0 1
64689: PUSH
64690: LD_INT 4
64692: PLUS
64693: PUSH
64694: LD_VAR 0 2
64698: PUSH
64699: LD_INT 4
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: LIST
64706: PUSH
64707: LD_VAR 0 1
64711: PUSH
64712: LD_INT 3
64714: PLUS
64715: PUSH
64716: LD_VAR 0 2
64720: PUSH
64721: LD_INT 3
64723: PLUS
64724: PUSH
64725: LD_INT 5
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: LIST
64732: PUSH
64733: LD_VAR 0 1
64737: PUSH
64738: LD_VAR 0 2
64742: PUSH
64743: LD_INT 4
64745: PLUS
64746: PUSH
64747: LD_INT 0
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: LIST
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: ST_TO_ADDR
// end ; 1 :
64762: GO 65462
64764: LD_INT 1
64766: DOUBLE
64767: EQUAL
64768: IFTRUE 64772
64770: GO 64905
64772: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64773: LD_ADDR_VAR 0 5
64777: PUSH
64778: LD_VAR 0 1
64782: PUSH
64783: LD_VAR 0 2
64787: PUSH
64788: LD_INT 4
64790: MINUS
64791: PUSH
64792: LD_INT 3
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: LIST
64799: PUSH
64800: LD_VAR 0 1
64804: PUSH
64805: LD_INT 3
64807: MINUS
64808: PUSH
64809: LD_VAR 0 2
64813: PUSH
64814: LD_INT 3
64816: MINUS
64817: PUSH
64818: LD_INT 2
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: LIST
64825: PUSH
64826: LD_VAR 0 1
64830: PUSH
64831: LD_INT 4
64833: MINUS
64834: PUSH
64835: LD_VAR 0 2
64839: PUSH
64840: LD_INT 1
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: LIST
64847: PUSH
64848: LD_VAR 0 1
64852: PUSH
64853: LD_VAR 0 2
64857: PUSH
64858: LD_INT 3
64860: PLUS
64861: PUSH
64862: LD_INT 0
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: LIST
64869: PUSH
64870: LD_VAR 0 1
64874: PUSH
64875: LD_INT 4
64877: PLUS
64878: PUSH
64879: LD_VAR 0 2
64883: PUSH
64884: LD_INT 4
64886: PLUS
64887: PUSH
64888: LD_INT 5
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: LIST
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: ST_TO_ADDR
// end ; 2 :
64903: GO 65462
64905: LD_INT 2
64907: DOUBLE
64908: EQUAL
64909: IFTRUE 64913
64911: GO 65042
64913: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64914: LD_ADDR_VAR 0 5
64918: PUSH
64919: LD_VAR 0 1
64923: PUSH
64924: LD_VAR 0 2
64928: PUSH
64929: LD_INT 3
64931: MINUS
64932: PUSH
64933: LD_INT 3
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: LIST
64940: PUSH
64941: LD_VAR 0 1
64945: PUSH
64946: LD_INT 4
64948: PLUS
64949: PUSH
64950: LD_VAR 0 2
64954: PUSH
64955: LD_INT 4
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: LIST
64962: PUSH
64963: LD_VAR 0 1
64967: PUSH
64968: LD_VAR 0 2
64972: PUSH
64973: LD_INT 4
64975: PLUS
64976: PUSH
64977: LD_INT 0
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: LIST
64984: PUSH
64985: LD_VAR 0 1
64989: PUSH
64990: LD_INT 3
64992: MINUS
64993: PUSH
64994: LD_VAR 0 2
64998: PUSH
64999: LD_INT 1
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: LIST
65006: PUSH
65007: LD_VAR 0 1
65011: PUSH
65012: LD_INT 4
65014: MINUS
65015: PUSH
65016: LD_VAR 0 2
65020: PUSH
65021: LD_INT 4
65023: MINUS
65024: PUSH
65025: LD_INT 2
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: LIST
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: ST_TO_ADDR
// end ; 3 :
65040: GO 65462
65042: LD_INT 3
65044: DOUBLE
65045: EQUAL
65046: IFTRUE 65050
65048: GO 65183
65050: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65051: LD_ADDR_VAR 0 5
65055: PUSH
65056: LD_VAR 0 1
65060: PUSH
65061: LD_INT 3
65063: PLUS
65064: PUSH
65065: LD_VAR 0 2
65069: PUSH
65070: LD_INT 4
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: LIST
65077: PUSH
65078: LD_VAR 0 1
65082: PUSH
65083: LD_INT 4
65085: PLUS
65086: PUSH
65087: LD_VAR 0 2
65091: PUSH
65092: LD_INT 4
65094: PLUS
65095: PUSH
65096: LD_INT 5
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: LIST
65103: PUSH
65104: LD_VAR 0 1
65108: PUSH
65109: LD_INT 4
65111: MINUS
65112: PUSH
65113: LD_VAR 0 2
65117: PUSH
65118: LD_INT 1
65120: PUSH
65121: EMPTY
65122: LIST
65123: LIST
65124: LIST
65125: PUSH
65126: LD_VAR 0 1
65130: PUSH
65131: LD_VAR 0 2
65135: PUSH
65136: LD_INT 4
65138: MINUS
65139: PUSH
65140: LD_INT 3
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: LIST
65147: PUSH
65148: LD_VAR 0 1
65152: PUSH
65153: LD_INT 3
65155: MINUS
65156: PUSH
65157: LD_VAR 0 2
65161: PUSH
65162: LD_INT 3
65164: MINUS
65165: PUSH
65166: LD_INT 2
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: LIST
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: ST_TO_ADDR
// end ; 4 :
65181: GO 65462
65183: LD_INT 4
65185: DOUBLE
65186: EQUAL
65187: IFTRUE 65191
65189: GO 65324
65191: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65192: LD_ADDR_VAR 0 5
65196: PUSH
65197: LD_VAR 0 1
65201: PUSH
65202: LD_VAR 0 2
65206: PUSH
65207: LD_INT 4
65209: PLUS
65210: PUSH
65211: LD_INT 0
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: LIST
65218: PUSH
65219: LD_VAR 0 1
65223: PUSH
65224: LD_INT 3
65226: PLUS
65227: PUSH
65228: LD_VAR 0 2
65232: PUSH
65233: LD_INT 3
65235: PLUS
65236: PUSH
65237: LD_INT 5
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: LIST
65244: PUSH
65245: LD_VAR 0 1
65249: PUSH
65250: LD_INT 4
65252: PLUS
65253: PUSH
65254: LD_VAR 0 2
65258: PUSH
65259: LD_INT 4
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: LIST
65266: PUSH
65267: LD_VAR 0 1
65271: PUSH
65272: LD_VAR 0 2
65276: PUSH
65277: LD_INT 3
65279: MINUS
65280: PUSH
65281: LD_INT 3
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: LIST
65288: PUSH
65289: LD_VAR 0 1
65293: PUSH
65294: LD_INT 4
65296: MINUS
65297: PUSH
65298: LD_VAR 0 2
65302: PUSH
65303: LD_INT 4
65305: MINUS
65306: PUSH
65307: LD_INT 2
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: LIST
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: ST_TO_ADDR
// end ; 5 :
65322: GO 65462
65324: LD_INT 5
65326: DOUBLE
65327: EQUAL
65328: IFTRUE 65332
65330: GO 65461
65332: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65333: LD_ADDR_VAR 0 5
65337: PUSH
65338: LD_VAR 0 1
65342: PUSH
65343: LD_INT 4
65345: MINUS
65346: PUSH
65347: LD_VAR 0 2
65351: PUSH
65352: LD_INT 1
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: LIST
65359: PUSH
65360: LD_VAR 0 1
65364: PUSH
65365: LD_VAR 0 2
65369: PUSH
65370: LD_INT 4
65372: MINUS
65373: PUSH
65374: LD_INT 3
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: LIST
65381: PUSH
65382: LD_VAR 0 1
65386: PUSH
65387: LD_INT 4
65389: PLUS
65390: PUSH
65391: LD_VAR 0 2
65395: PUSH
65396: LD_INT 4
65398: PLUS
65399: PUSH
65400: LD_INT 5
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: LIST
65407: PUSH
65408: LD_VAR 0 1
65412: PUSH
65413: LD_INT 3
65415: PLUS
65416: PUSH
65417: LD_VAR 0 2
65421: PUSH
65422: LD_INT 4
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: LIST
65429: PUSH
65430: LD_VAR 0 1
65434: PUSH
65435: LD_VAR 0 2
65439: PUSH
65440: LD_INT 3
65442: PLUS
65443: PUSH
65444: LD_INT 0
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: LIST
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: ST_TO_ADDR
// end ; end ;
65459: GO 65462
65461: POP
// result := list ;
65462: LD_ADDR_VAR 0 4
65466: PUSH
65467: LD_VAR 0 5
65471: ST_TO_ADDR
// end ;
65472: LD_VAR 0 4
65476: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65477: LD_INT 0
65479: PPUSH
65480: PPUSH
65481: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65482: LD_VAR 0 1
65486: NOT
65487: PUSH
65488: LD_VAR 0 2
65492: PUSH
65493: LD_INT 1
65495: PUSH
65496: LD_INT 2
65498: PUSH
65499: LD_INT 3
65501: PUSH
65502: LD_INT 4
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: IN
65511: NOT
65512: OR
65513: IFFALSE 65517
// exit ;
65515: GO 65600
// tmp := [ ] ;
65517: LD_ADDR_VAR 0 5
65521: PUSH
65522: EMPTY
65523: ST_TO_ADDR
// for i in units do
65524: LD_ADDR_VAR 0 4
65528: PUSH
65529: LD_VAR 0 1
65533: PUSH
65534: FOR_IN
65535: IFFALSE 65569
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65537: LD_ADDR_VAR 0 5
65541: PUSH
65542: LD_VAR 0 5
65546: PPUSH
65547: LD_VAR 0 4
65551: PPUSH
65552: LD_VAR 0 2
65556: PPUSH
65557: CALL_OW 259
65561: PPUSH
65562: CALL 66973 0 2
65566: ST_TO_ADDR
65567: GO 65534
65569: POP
65570: POP
// if not tmp then
65571: LD_VAR 0 5
65575: NOT
65576: IFFALSE 65580
// exit ;
65578: GO 65600
// result := SortListByListDesc ( units , tmp ) ;
65580: LD_ADDR_VAR 0 3
65584: PUSH
65585: LD_VAR 0 1
65589: PPUSH
65590: LD_VAR 0 5
65594: PPUSH
65595: CALL_OW 77
65599: ST_TO_ADDR
// end ;
65600: LD_VAR 0 3
65604: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65605: LD_INT 0
65607: PPUSH
65608: PPUSH
65609: PPUSH
// result := false ;
65610: LD_ADDR_VAR 0 3
65614: PUSH
65615: LD_INT 0
65617: ST_TO_ADDR
// if not building then
65618: LD_VAR 0 2
65622: NOT
65623: IFFALSE 65627
// exit ;
65625: GO 65765
// x := GetX ( building ) ;
65627: LD_ADDR_VAR 0 4
65631: PUSH
65632: LD_VAR 0 2
65636: PPUSH
65637: CALL_OW 250
65641: ST_TO_ADDR
// y := GetY ( building ) ;
65642: LD_ADDR_VAR 0 5
65646: PUSH
65647: LD_VAR 0 2
65651: PPUSH
65652: CALL_OW 251
65656: ST_TO_ADDR
// if not x or not y then
65657: LD_VAR 0 4
65661: NOT
65662: PUSH
65663: LD_VAR 0 5
65667: NOT
65668: OR
65669: IFFALSE 65673
// exit ;
65671: GO 65765
// if GetTaskList ( unit ) then
65673: LD_VAR 0 1
65677: PPUSH
65678: CALL_OW 437
65682: IFFALSE 65765
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65684: LD_STRING e
65686: PUSH
65687: LD_VAR 0 1
65691: PPUSH
65692: CALL_OW 437
65696: PUSH
65697: LD_INT 1
65699: ARRAY
65700: PUSH
65701: LD_INT 1
65703: ARRAY
65704: EQUAL
65705: PUSH
65706: LD_VAR 0 4
65710: PUSH
65711: LD_VAR 0 1
65715: PPUSH
65716: CALL_OW 437
65720: PUSH
65721: LD_INT 1
65723: ARRAY
65724: PUSH
65725: LD_INT 2
65727: ARRAY
65728: EQUAL
65729: AND
65730: PUSH
65731: LD_VAR 0 5
65735: PUSH
65736: LD_VAR 0 1
65740: PPUSH
65741: CALL_OW 437
65745: PUSH
65746: LD_INT 1
65748: ARRAY
65749: PUSH
65750: LD_INT 3
65752: ARRAY
65753: EQUAL
65754: AND
65755: IFFALSE 65765
// result := true end ;
65757: LD_ADDR_VAR 0 3
65761: PUSH
65762: LD_INT 1
65764: ST_TO_ADDR
// end ;
65765: LD_VAR 0 3
65769: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65770: LD_INT 0
65772: PPUSH
// result := false ;
65773: LD_ADDR_VAR 0 4
65777: PUSH
65778: LD_INT 0
65780: ST_TO_ADDR
// if GetTaskList ( unit ) then
65781: LD_VAR 0 1
65785: PPUSH
65786: CALL_OW 437
65790: IFFALSE 65873
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65792: LD_STRING M
65794: PUSH
65795: LD_VAR 0 1
65799: PPUSH
65800: CALL_OW 437
65804: PUSH
65805: LD_INT 1
65807: ARRAY
65808: PUSH
65809: LD_INT 1
65811: ARRAY
65812: EQUAL
65813: PUSH
65814: LD_VAR 0 2
65818: PUSH
65819: LD_VAR 0 1
65823: PPUSH
65824: CALL_OW 437
65828: PUSH
65829: LD_INT 1
65831: ARRAY
65832: PUSH
65833: LD_INT 2
65835: ARRAY
65836: EQUAL
65837: AND
65838: PUSH
65839: LD_VAR 0 3
65843: PUSH
65844: LD_VAR 0 1
65848: PPUSH
65849: CALL_OW 437
65853: PUSH
65854: LD_INT 1
65856: ARRAY
65857: PUSH
65858: LD_INT 3
65860: ARRAY
65861: EQUAL
65862: AND
65863: IFFALSE 65873
// result := true ;
65865: LD_ADDR_VAR 0 4
65869: PUSH
65870: LD_INT 1
65872: ST_TO_ADDR
// end ; end ;
65873: LD_VAR 0 4
65877: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65878: LD_INT 0
65880: PPUSH
65881: PPUSH
65882: PPUSH
65883: PPUSH
// if not unit or not area then
65884: LD_VAR 0 1
65888: NOT
65889: PUSH
65890: LD_VAR 0 2
65894: NOT
65895: OR
65896: IFFALSE 65900
// exit ;
65898: GO 66076
// tmp := AreaToList ( area , i ) ;
65900: LD_ADDR_VAR 0 6
65904: PUSH
65905: LD_VAR 0 2
65909: PPUSH
65910: LD_VAR 0 5
65914: PPUSH
65915: CALL_OW 517
65919: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65920: LD_ADDR_VAR 0 5
65924: PUSH
65925: DOUBLE
65926: LD_INT 1
65928: DEC
65929: ST_TO_ADDR
65930: LD_VAR 0 6
65934: PUSH
65935: LD_INT 1
65937: ARRAY
65938: PUSH
65939: FOR_TO
65940: IFFALSE 66074
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65942: LD_ADDR_VAR 0 7
65946: PUSH
65947: LD_VAR 0 6
65951: PUSH
65952: LD_INT 1
65954: ARRAY
65955: PUSH
65956: LD_VAR 0 5
65960: ARRAY
65961: PUSH
65962: LD_VAR 0 6
65966: PUSH
65967: LD_INT 2
65969: ARRAY
65970: PUSH
65971: LD_VAR 0 5
65975: ARRAY
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
65981: LD_INT 92
65983: PUSH
65984: LD_VAR 0 7
65988: PUSH
65989: LD_INT 1
65991: ARRAY
65992: PUSH
65993: LD_VAR 0 7
65997: PUSH
65998: LD_INT 2
66000: ARRAY
66001: PUSH
66002: LD_INT 2
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: LIST
66009: LIST
66010: PPUSH
66011: CALL_OW 69
66015: PUSH
66016: LD_INT 0
66018: EQUAL
66019: IFFALSE 66072
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66021: LD_VAR 0 1
66025: PPUSH
66026: LD_VAR 0 7
66030: PUSH
66031: LD_INT 1
66033: ARRAY
66034: PPUSH
66035: LD_VAR 0 7
66039: PUSH
66040: LD_INT 2
66042: ARRAY
66043: PPUSH
66044: LD_VAR 0 3
66048: PPUSH
66049: CALL_OW 48
// result := IsPlaced ( unit ) ;
66053: LD_ADDR_VAR 0 4
66057: PUSH
66058: LD_VAR 0 1
66062: PPUSH
66063: CALL_OW 305
66067: ST_TO_ADDR
// exit ;
66068: POP
66069: POP
66070: GO 66076
// end ; end ;
66072: GO 65939
66074: POP
66075: POP
// end ;
66076: LD_VAR 0 4
66080: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66081: LD_INT 0
66083: PPUSH
66084: PPUSH
66085: PPUSH
// if not side or side > 8 then
66086: LD_VAR 0 1
66090: NOT
66091: PUSH
66092: LD_VAR 0 1
66096: PUSH
66097: LD_INT 8
66099: GREATER
66100: OR
66101: IFFALSE 66105
// exit ;
66103: GO 66292
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66105: LD_ADDR_VAR 0 4
66109: PUSH
66110: LD_INT 22
66112: PUSH
66113: LD_VAR 0 1
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 21
66124: PUSH
66125: LD_INT 3
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PPUSH
66136: CALL_OW 69
66140: ST_TO_ADDR
// if not tmp then
66141: LD_VAR 0 4
66145: NOT
66146: IFFALSE 66150
// exit ;
66148: GO 66292
// enable_addtolog := true ;
66150: LD_ADDR_OWVAR 81
66154: PUSH
66155: LD_INT 1
66157: ST_TO_ADDR
// AddToLog ( [ ) ;
66158: LD_STRING [
66160: PPUSH
66161: CALL_OW 561
// for i in tmp do
66165: LD_ADDR_VAR 0 3
66169: PUSH
66170: LD_VAR 0 4
66174: PUSH
66175: FOR_IN
66176: IFFALSE 66283
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66178: LD_STRING [
66180: PUSH
66181: LD_VAR 0 3
66185: PPUSH
66186: CALL_OW 266
66190: STR
66191: PUSH
66192: LD_STRING , 
66194: STR
66195: PUSH
66196: LD_VAR 0 3
66200: PPUSH
66201: CALL_OW 250
66205: STR
66206: PUSH
66207: LD_STRING , 
66209: STR
66210: PUSH
66211: LD_VAR 0 3
66215: PPUSH
66216: CALL_OW 251
66220: STR
66221: PUSH
66222: LD_STRING , 
66224: STR
66225: PUSH
66226: LD_VAR 0 3
66230: PPUSH
66231: CALL_OW 254
66235: STR
66236: PUSH
66237: LD_STRING , 
66239: STR
66240: PUSH
66241: LD_VAR 0 3
66245: PPUSH
66246: LD_INT 1
66248: PPUSH
66249: CALL_OW 268
66253: STR
66254: PUSH
66255: LD_STRING , 
66257: STR
66258: PUSH
66259: LD_VAR 0 3
66263: PPUSH
66264: LD_INT 2
66266: PPUSH
66267: CALL_OW 268
66271: STR
66272: PUSH
66273: LD_STRING ],
66275: STR
66276: PPUSH
66277: CALL_OW 561
// end ;
66281: GO 66175
66283: POP
66284: POP
// AddToLog ( ]; ) ;
66285: LD_STRING ];
66287: PPUSH
66288: CALL_OW 561
// end ;
66292: LD_VAR 0 2
66296: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
66297: LD_INT 0
66299: PPUSH
66300: PPUSH
66301: PPUSH
66302: PPUSH
66303: PPUSH
// if not area or not rate or not max then
66304: LD_VAR 0 1
66308: NOT
66309: PUSH
66310: LD_VAR 0 2
66314: NOT
66315: OR
66316: PUSH
66317: LD_VAR 0 4
66321: NOT
66322: OR
66323: IFFALSE 66327
// exit ;
66325: GO 66516
// while 1 do
66327: LD_INT 1
66329: IFFALSE 66516
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66331: LD_ADDR_VAR 0 9
66335: PUSH
66336: LD_VAR 0 1
66340: PPUSH
66341: LD_INT 1
66343: PPUSH
66344: CALL_OW 287
66348: PUSH
66349: LD_INT 10
66351: MUL
66352: ST_TO_ADDR
// r := rate / 10 ;
66353: LD_ADDR_VAR 0 7
66357: PUSH
66358: LD_VAR 0 2
66362: PUSH
66363: LD_INT 10
66365: DIVREAL
66366: ST_TO_ADDR
// time := 1 1$00 ;
66367: LD_ADDR_VAR 0 8
66371: PUSH
66372: LD_INT 2100
66374: ST_TO_ADDR
// if amount < min then
66375: LD_VAR 0 9
66379: PUSH
66380: LD_VAR 0 3
66384: LESS
66385: IFFALSE 66403
// r := r * 2 else
66387: LD_ADDR_VAR 0 7
66391: PUSH
66392: LD_VAR 0 7
66396: PUSH
66397: LD_INT 2
66399: MUL
66400: ST_TO_ADDR
66401: GO 66429
// if amount > max then
66403: LD_VAR 0 9
66407: PUSH
66408: LD_VAR 0 4
66412: GREATER
66413: IFFALSE 66429
// r := r / 2 ;
66415: LD_ADDR_VAR 0 7
66419: PUSH
66420: LD_VAR 0 7
66424: PUSH
66425: LD_INT 2
66427: DIVREAL
66428: ST_TO_ADDR
// time := time / r ;
66429: LD_ADDR_VAR 0 8
66433: PUSH
66434: LD_VAR 0 8
66438: PUSH
66439: LD_VAR 0 7
66443: DIVREAL
66444: ST_TO_ADDR
// if time < 0 then
66445: LD_VAR 0 8
66449: PUSH
66450: LD_INT 0
66452: LESS
66453: IFFALSE 66470
// time := time * - 1 ;
66455: LD_ADDR_VAR 0 8
66459: PUSH
66460: LD_VAR 0 8
66464: PUSH
66465: LD_INT 1
66467: NEG
66468: MUL
66469: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66470: LD_VAR 0 8
66474: PUSH
66475: LD_INT 35
66477: PPUSH
66478: LD_INT 875
66480: PPUSH
66481: CALL_OW 12
66485: PLUS
66486: PPUSH
66487: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66491: LD_INT 1
66493: PPUSH
66494: LD_INT 5
66496: PPUSH
66497: CALL_OW 12
66501: PPUSH
66502: LD_VAR 0 1
66506: PPUSH
66507: LD_INT 1
66509: PPUSH
66510: CALL_OW 55
// end ;
66514: GO 66327
// end ;
66516: LD_VAR 0 5
66520: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66521: LD_INT 0
66523: PPUSH
66524: PPUSH
66525: PPUSH
66526: PPUSH
66527: PPUSH
66528: PPUSH
66529: PPUSH
66530: PPUSH
// if not turrets or not factories then
66531: LD_VAR 0 1
66535: NOT
66536: PUSH
66537: LD_VAR 0 2
66541: NOT
66542: OR
66543: IFFALSE 66547
// exit ;
66545: GO 66854
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66547: LD_ADDR_VAR 0 10
66551: PUSH
66552: LD_INT 5
66554: PUSH
66555: LD_INT 6
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 2
66564: PUSH
66565: LD_INT 4
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 3
66574: PUSH
66575: LD_INT 5
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 24
66589: PUSH
66590: LD_INT 25
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 23
66599: PUSH
66600: LD_INT 27
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 42
66613: PUSH
66614: LD_INT 43
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 44
66623: PUSH
66624: LD_INT 46
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 45
66633: PUSH
66634: LD_INT 47
66636: PUSH
66637: EMPTY
66638: LIST
66639: LIST
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: LIST
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: LIST
66650: ST_TO_ADDR
// result := [ ] ;
66651: LD_ADDR_VAR 0 3
66655: PUSH
66656: EMPTY
66657: ST_TO_ADDR
// for i in turrets do
66658: LD_ADDR_VAR 0 4
66662: PUSH
66663: LD_VAR 0 1
66667: PUSH
66668: FOR_IN
66669: IFFALSE 66852
// begin nat := GetNation ( i ) ;
66671: LD_ADDR_VAR 0 7
66675: PUSH
66676: LD_VAR 0 4
66680: PPUSH
66681: CALL_OW 248
66685: ST_TO_ADDR
// weapon := 0 ;
66686: LD_ADDR_VAR 0 8
66690: PUSH
66691: LD_INT 0
66693: ST_TO_ADDR
// if not nat then
66694: LD_VAR 0 7
66698: NOT
66699: IFFALSE 66703
// continue ;
66701: GO 66668
// for j in list [ nat ] do
66703: LD_ADDR_VAR 0 5
66707: PUSH
66708: LD_VAR 0 10
66712: PUSH
66713: LD_VAR 0 7
66717: ARRAY
66718: PUSH
66719: FOR_IN
66720: IFFALSE 66761
// if GetBWeapon ( i ) = j [ 1 ] then
66722: LD_VAR 0 4
66726: PPUSH
66727: CALL_OW 269
66731: PUSH
66732: LD_VAR 0 5
66736: PUSH
66737: LD_INT 1
66739: ARRAY
66740: EQUAL
66741: IFFALSE 66759
// begin weapon := j [ 2 ] ;
66743: LD_ADDR_VAR 0 8
66747: PUSH
66748: LD_VAR 0 5
66752: PUSH
66753: LD_INT 2
66755: ARRAY
66756: ST_TO_ADDR
// break ;
66757: GO 66761
// end ;
66759: GO 66719
66761: POP
66762: POP
// if not weapon then
66763: LD_VAR 0 8
66767: NOT
66768: IFFALSE 66772
// continue ;
66770: GO 66668
// for k in factories do
66772: LD_ADDR_VAR 0 6
66776: PUSH
66777: LD_VAR 0 2
66781: PUSH
66782: FOR_IN
66783: IFFALSE 66848
// begin weapons := AvailableWeaponList ( k ) ;
66785: LD_ADDR_VAR 0 9
66789: PUSH
66790: LD_VAR 0 6
66794: PPUSH
66795: CALL_OW 478
66799: ST_TO_ADDR
// if not weapons then
66800: LD_VAR 0 9
66804: NOT
66805: IFFALSE 66809
// continue ;
66807: GO 66782
// if weapon in weapons then
66809: LD_VAR 0 8
66813: PUSH
66814: LD_VAR 0 9
66818: IN
66819: IFFALSE 66846
// begin result := [ i , weapon ] ;
66821: LD_ADDR_VAR 0 3
66825: PUSH
66826: LD_VAR 0 4
66830: PUSH
66831: LD_VAR 0 8
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: ST_TO_ADDR
// exit ;
66840: POP
66841: POP
66842: POP
66843: POP
66844: GO 66854
// end ; end ;
66846: GO 66782
66848: POP
66849: POP
// end ;
66850: GO 66668
66852: POP
66853: POP
// end ;
66854: LD_VAR 0 3
66858: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66859: LD_INT 0
66861: PPUSH
// if not side or side > 8 then
66862: LD_VAR 0 3
66866: NOT
66867: PUSH
66868: LD_VAR 0 3
66872: PUSH
66873: LD_INT 8
66875: GREATER
66876: OR
66877: IFFALSE 66881
// exit ;
66879: GO 66940
// if not range then
66881: LD_VAR 0 4
66885: NOT
66886: IFFALSE 66897
// range := - 12 ;
66888: LD_ADDR_VAR 0 4
66892: PUSH
66893: LD_INT 12
66895: NEG
66896: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66897: LD_VAR 0 1
66901: PPUSH
66902: LD_VAR 0 2
66906: PPUSH
66907: LD_VAR 0 3
66911: PPUSH
66912: LD_VAR 0 4
66916: PPUSH
66917: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66921: LD_VAR 0 1
66925: PPUSH
66926: LD_VAR 0 2
66930: PPUSH
66931: LD_VAR 0 3
66935: PPUSH
66936: CALL_OW 331
// end ;
66940: LD_VAR 0 5
66944: RET
// export function Video ( mode ) ; begin
66945: LD_INT 0
66947: PPUSH
// ingame_video = mode ;
66948: LD_ADDR_OWVAR 52
66952: PUSH
66953: LD_VAR 0 1
66957: ST_TO_ADDR
// interface_hidden = mode ;
66958: LD_ADDR_OWVAR 54
66962: PUSH
66963: LD_VAR 0 1
66967: ST_TO_ADDR
// end ;
66968: LD_VAR 0 2
66972: RET
// export function Join ( array , element ) ; begin
66973: LD_INT 0
66975: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66976: LD_ADDR_VAR 0 3
66980: PUSH
66981: LD_VAR 0 1
66985: PPUSH
66986: LD_VAR 0 1
66990: PUSH
66991: LD_INT 1
66993: PLUS
66994: PPUSH
66995: LD_VAR 0 2
66999: PPUSH
67000: CALL_OW 1
67004: ST_TO_ADDR
// end ;
67005: LD_VAR 0 3
67009: RET
// export function JoinUnion ( array , element ) ; begin
67010: LD_INT 0
67012: PPUSH
// result := array union element ;
67013: LD_ADDR_VAR 0 3
67017: PUSH
67018: LD_VAR 0 1
67022: PUSH
67023: LD_VAR 0 2
67027: UNION
67028: ST_TO_ADDR
// end ;
67029: LD_VAR 0 3
67033: RET
// export function GetBehemoths ( side ) ; begin
67034: LD_INT 0
67036: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
67037: LD_ADDR_VAR 0 2
67041: PUSH
67042: LD_INT 22
67044: PUSH
67045: LD_VAR 0 1
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: LD_INT 31
67056: PUSH
67057: LD_INT 25
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PPUSH
67068: CALL_OW 69
67072: ST_TO_ADDR
// end ;
67073: LD_VAR 0 2
67077: RET
// export function Shuffle ( array ) ; var i , index ; begin
67078: LD_INT 0
67080: PPUSH
67081: PPUSH
67082: PPUSH
// result := [ ] ;
67083: LD_ADDR_VAR 0 2
67087: PUSH
67088: EMPTY
67089: ST_TO_ADDR
// if not array then
67090: LD_VAR 0 1
67094: NOT
67095: IFFALSE 67099
// exit ;
67097: GO 67198
// Randomize ;
67099: CALL_OW 10
// for i = array downto 1 do
67103: LD_ADDR_VAR 0 3
67107: PUSH
67108: DOUBLE
67109: LD_VAR 0 1
67113: INC
67114: ST_TO_ADDR
67115: LD_INT 1
67117: PUSH
67118: FOR_DOWNTO
67119: IFFALSE 67196
// begin index := rand ( 1 , array ) ;
67121: LD_ADDR_VAR 0 4
67125: PUSH
67126: LD_INT 1
67128: PPUSH
67129: LD_VAR 0 1
67133: PPUSH
67134: CALL_OW 12
67138: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67139: LD_ADDR_VAR 0 2
67143: PUSH
67144: LD_VAR 0 2
67148: PPUSH
67149: LD_VAR 0 2
67153: PUSH
67154: LD_INT 1
67156: PLUS
67157: PPUSH
67158: LD_VAR 0 1
67162: PUSH
67163: LD_VAR 0 4
67167: ARRAY
67168: PPUSH
67169: CALL_OW 2
67173: ST_TO_ADDR
// array := Delete ( array , index ) ;
67174: LD_ADDR_VAR 0 1
67178: PUSH
67179: LD_VAR 0 1
67183: PPUSH
67184: LD_VAR 0 4
67188: PPUSH
67189: CALL_OW 3
67193: ST_TO_ADDR
// end ;
67194: GO 67118
67196: POP
67197: POP
// end ;
67198: LD_VAR 0 2
67202: RET
// export function GetBaseMaterials ( base ) ; begin
67203: LD_INT 0
67205: PPUSH
// result := [ 0 , 0 , 0 ] ;
67206: LD_ADDR_VAR 0 2
67210: PUSH
67211: LD_INT 0
67213: PUSH
67214: LD_INT 0
67216: PUSH
67217: LD_INT 0
67219: PUSH
67220: EMPTY
67221: LIST
67222: LIST
67223: LIST
67224: ST_TO_ADDR
// if not base then
67225: LD_VAR 0 1
67229: NOT
67230: IFFALSE 67234
// exit ;
67232: GO 67283
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
67234: LD_ADDR_VAR 0 2
67238: PUSH
67239: LD_VAR 0 1
67243: PPUSH
67244: LD_INT 1
67246: PPUSH
67247: CALL_OW 275
67251: PUSH
67252: LD_VAR 0 1
67256: PPUSH
67257: LD_INT 2
67259: PPUSH
67260: CALL_OW 275
67264: PUSH
67265: LD_VAR 0 1
67269: PPUSH
67270: LD_INT 3
67272: PPUSH
67273: CALL_OW 275
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: LIST
67282: ST_TO_ADDR
// end ;
67283: LD_VAR 0 2
67287: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
67288: LD_INT 0
67290: PPUSH
67291: PPUSH
// result := array ;
67292: LD_ADDR_VAR 0 3
67296: PUSH
67297: LD_VAR 0 1
67301: ST_TO_ADDR
// if size >= result then
67302: LD_VAR 0 2
67306: PUSH
67307: LD_VAR 0 3
67311: GREATEREQUAL
67312: IFFALSE 67316
// exit ;
67314: GO 67366
// if size then
67316: LD_VAR 0 2
67320: IFFALSE 67366
// for i := array downto size do
67322: LD_ADDR_VAR 0 4
67326: PUSH
67327: DOUBLE
67328: LD_VAR 0 1
67332: INC
67333: ST_TO_ADDR
67334: LD_VAR 0 2
67338: PUSH
67339: FOR_DOWNTO
67340: IFFALSE 67364
// result := Delete ( result , result ) ;
67342: LD_ADDR_VAR 0 3
67346: PUSH
67347: LD_VAR 0 3
67351: PPUSH
67352: LD_VAR 0 3
67356: PPUSH
67357: CALL_OW 3
67361: ST_TO_ADDR
67362: GO 67339
67364: POP
67365: POP
// end ;
67366: LD_VAR 0 3
67370: RET
// export function ComExit ( unit ) ; var tmp ; begin
67371: LD_INT 0
67373: PPUSH
67374: PPUSH
// if not IsInUnit ( unit ) then
67375: LD_VAR 0 1
67379: PPUSH
67380: CALL_OW 310
67384: NOT
67385: IFFALSE 67389
// exit ;
67387: GO 67449
// tmp := IsInUnit ( unit ) ;
67389: LD_ADDR_VAR 0 3
67393: PUSH
67394: LD_VAR 0 1
67398: PPUSH
67399: CALL_OW 310
67403: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67404: LD_VAR 0 3
67408: PPUSH
67409: CALL_OW 247
67413: PUSH
67414: LD_INT 2
67416: EQUAL
67417: IFFALSE 67430
// ComExitVehicle ( unit ) else
67419: LD_VAR 0 1
67423: PPUSH
67424: CALL_OW 121
67428: GO 67439
// ComExitBuilding ( unit ) ;
67430: LD_VAR 0 1
67434: PPUSH
67435: CALL_OW 122
// result := tmp ;
67439: LD_ADDR_VAR 0 2
67443: PUSH
67444: LD_VAR 0 3
67448: ST_TO_ADDR
// end ;
67449: LD_VAR 0 2
67453: RET
// export function ComExitAll ( units ) ; var i ; begin
67454: LD_INT 0
67456: PPUSH
67457: PPUSH
// if not units then
67458: LD_VAR 0 1
67462: NOT
67463: IFFALSE 67467
// exit ;
67465: GO 67493
// for i in units do
67467: LD_ADDR_VAR 0 3
67471: PUSH
67472: LD_VAR 0 1
67476: PUSH
67477: FOR_IN
67478: IFFALSE 67491
// ComExit ( i ) ;
67480: LD_VAR 0 3
67484: PPUSH
67485: CALL 67371 0 1
67489: GO 67477
67491: POP
67492: POP
// end ;
67493: LD_VAR 0 2
67497: RET
// export function ResetHc ; begin
67498: LD_INT 0
67500: PPUSH
// InitHc ;
67501: CALL_OW 19
// hc_importance := 0 ;
67505: LD_ADDR_OWVAR 32
67509: PUSH
67510: LD_INT 0
67512: ST_TO_ADDR
// end ;
67513: LD_VAR 0 1
67517: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67518: LD_INT 0
67520: PPUSH
67521: PPUSH
67522: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67523: LD_ADDR_VAR 0 6
67527: PUSH
67528: LD_VAR 0 1
67532: PUSH
67533: LD_VAR 0 3
67537: PLUS
67538: PUSH
67539: LD_INT 2
67541: DIV
67542: ST_TO_ADDR
// if _x < 0 then
67543: LD_VAR 0 6
67547: PUSH
67548: LD_INT 0
67550: LESS
67551: IFFALSE 67568
// _x := _x * - 1 ;
67553: LD_ADDR_VAR 0 6
67557: PUSH
67558: LD_VAR 0 6
67562: PUSH
67563: LD_INT 1
67565: NEG
67566: MUL
67567: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67568: LD_ADDR_VAR 0 7
67572: PUSH
67573: LD_VAR 0 2
67577: PUSH
67578: LD_VAR 0 4
67582: PLUS
67583: PUSH
67584: LD_INT 2
67586: DIV
67587: ST_TO_ADDR
// if _y < 0 then
67588: LD_VAR 0 7
67592: PUSH
67593: LD_INT 0
67595: LESS
67596: IFFALSE 67613
// _y := _y * - 1 ;
67598: LD_ADDR_VAR 0 7
67602: PUSH
67603: LD_VAR 0 7
67607: PUSH
67608: LD_INT 1
67610: NEG
67611: MUL
67612: ST_TO_ADDR
// result := [ _x , _y ] ;
67613: LD_ADDR_VAR 0 5
67617: PUSH
67618: LD_VAR 0 6
67622: PUSH
67623: LD_VAR 0 7
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: ST_TO_ADDR
// end ;
67632: LD_VAR 0 5
67636: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67637: LD_INT 0
67639: PPUSH
67640: PPUSH
67641: PPUSH
67642: PPUSH
// task := GetTaskList ( unit ) ;
67643: LD_ADDR_VAR 0 7
67647: PUSH
67648: LD_VAR 0 1
67652: PPUSH
67653: CALL_OW 437
67657: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67658: LD_VAR 0 7
67662: NOT
67663: PUSH
67664: LD_VAR 0 1
67668: PPUSH
67669: LD_VAR 0 2
67673: PPUSH
67674: CALL_OW 308
67678: NOT
67679: AND
67680: IFFALSE 67684
// exit ;
67682: GO 67802
// if IsInArea ( unit , area ) then
67684: LD_VAR 0 1
67688: PPUSH
67689: LD_VAR 0 2
67693: PPUSH
67694: CALL_OW 308
67698: IFFALSE 67716
// begin ComMoveToArea ( unit , goAway ) ;
67700: LD_VAR 0 1
67704: PPUSH
67705: LD_VAR 0 3
67709: PPUSH
67710: CALL_OW 113
// exit ;
67714: GO 67802
// end ; if task [ 1 ] [ 1 ] <> M then
67716: LD_VAR 0 7
67720: PUSH
67721: LD_INT 1
67723: ARRAY
67724: PUSH
67725: LD_INT 1
67727: ARRAY
67728: PUSH
67729: LD_STRING M
67731: NONEQUAL
67732: IFFALSE 67736
// exit ;
67734: GO 67802
// x := task [ 1 ] [ 2 ] ;
67736: LD_ADDR_VAR 0 5
67740: PUSH
67741: LD_VAR 0 7
67745: PUSH
67746: LD_INT 1
67748: ARRAY
67749: PUSH
67750: LD_INT 2
67752: ARRAY
67753: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67754: LD_ADDR_VAR 0 6
67758: PUSH
67759: LD_VAR 0 7
67763: PUSH
67764: LD_INT 1
67766: ARRAY
67767: PUSH
67768: LD_INT 3
67770: ARRAY
67771: ST_TO_ADDR
// if InArea ( x , y , area ) then
67772: LD_VAR 0 5
67776: PPUSH
67777: LD_VAR 0 6
67781: PPUSH
67782: LD_VAR 0 2
67786: PPUSH
67787: CALL_OW 309
67791: IFFALSE 67802
// ComStop ( unit ) ;
67793: LD_VAR 0 1
67797: PPUSH
67798: CALL_OW 141
// end ;
67802: LD_VAR 0 4
67806: RET
// export function Abs ( value ) ; begin
67807: LD_INT 0
67809: PPUSH
// result := value ;
67810: LD_ADDR_VAR 0 2
67814: PUSH
67815: LD_VAR 0 1
67819: ST_TO_ADDR
// if value < 0 then
67820: LD_VAR 0 1
67824: PUSH
67825: LD_INT 0
67827: LESS
67828: IFFALSE 67845
// result := value * - 1 ;
67830: LD_ADDR_VAR 0 2
67834: PUSH
67835: LD_VAR 0 1
67839: PUSH
67840: LD_INT 1
67842: NEG
67843: MUL
67844: ST_TO_ADDR
// end ;
67845: LD_VAR 0 2
67849: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67850: LD_INT 0
67852: PPUSH
67853: PPUSH
67854: PPUSH
67855: PPUSH
67856: PPUSH
67857: PPUSH
67858: PPUSH
67859: PPUSH
// if not unit or not building then
67860: LD_VAR 0 1
67864: NOT
67865: PUSH
67866: LD_VAR 0 2
67870: NOT
67871: OR
67872: IFFALSE 67876
// exit ;
67874: GO 68102
// x := GetX ( building ) ;
67876: LD_ADDR_VAR 0 4
67880: PUSH
67881: LD_VAR 0 2
67885: PPUSH
67886: CALL_OW 250
67890: ST_TO_ADDR
// y := GetY ( building ) ;
67891: LD_ADDR_VAR 0 6
67895: PUSH
67896: LD_VAR 0 2
67900: PPUSH
67901: CALL_OW 251
67905: ST_TO_ADDR
// d := GetDir ( building ) ;
67906: LD_ADDR_VAR 0 8
67910: PUSH
67911: LD_VAR 0 2
67915: PPUSH
67916: CALL_OW 254
67920: ST_TO_ADDR
// r := 4 ;
67921: LD_ADDR_VAR 0 9
67925: PUSH
67926: LD_INT 4
67928: ST_TO_ADDR
// for i := 1 to 5 do
67929: LD_ADDR_VAR 0 10
67933: PUSH
67934: DOUBLE
67935: LD_INT 1
67937: DEC
67938: ST_TO_ADDR
67939: LD_INT 5
67941: PUSH
67942: FOR_TO
67943: IFFALSE 68100
// begin _x := ShiftX ( x , d , r + i ) ;
67945: LD_ADDR_VAR 0 5
67949: PUSH
67950: LD_VAR 0 4
67954: PPUSH
67955: LD_VAR 0 8
67959: PPUSH
67960: LD_VAR 0 9
67964: PUSH
67965: LD_VAR 0 10
67969: PLUS
67970: PPUSH
67971: CALL_OW 272
67975: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67976: LD_ADDR_VAR 0 7
67980: PUSH
67981: LD_VAR 0 6
67985: PPUSH
67986: LD_VAR 0 8
67990: PPUSH
67991: LD_VAR 0 9
67995: PUSH
67996: LD_VAR 0 10
68000: PLUS
68001: PPUSH
68002: CALL_OW 273
68006: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68007: LD_VAR 0 5
68011: PPUSH
68012: LD_VAR 0 7
68016: PPUSH
68017: CALL_OW 488
68021: PUSH
68022: LD_VAR 0 5
68026: PPUSH
68027: LD_VAR 0 7
68031: PPUSH
68032: CALL_OW 428
68036: PPUSH
68037: CALL_OW 247
68041: PUSH
68042: LD_INT 3
68044: PUSH
68045: LD_INT 2
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: IN
68052: NOT
68053: AND
68054: IFFALSE 68098
// begin ComMoveXY ( unit , _x , _y ) ;
68056: LD_VAR 0 1
68060: PPUSH
68061: LD_VAR 0 5
68065: PPUSH
68066: LD_VAR 0 7
68070: PPUSH
68071: CALL_OW 111
// result := [ _x , _y ] ;
68075: LD_ADDR_VAR 0 3
68079: PUSH
68080: LD_VAR 0 5
68084: PUSH
68085: LD_VAR 0 7
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: ST_TO_ADDR
// exit ;
68094: POP
68095: POP
68096: GO 68102
// end ; end ;
68098: GO 67942
68100: POP
68101: POP
// end ;
68102: LD_VAR 0 3
68106: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68107: LD_INT 0
68109: PPUSH
68110: PPUSH
68111: PPUSH
// result := 0 ;
68112: LD_ADDR_VAR 0 3
68116: PUSH
68117: LD_INT 0
68119: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68120: LD_VAR 0 1
68124: PUSH
68125: LD_INT 0
68127: LESS
68128: PUSH
68129: LD_VAR 0 1
68133: PUSH
68134: LD_INT 8
68136: GREATER
68137: OR
68138: PUSH
68139: LD_VAR 0 2
68143: PUSH
68144: LD_INT 0
68146: LESS
68147: OR
68148: PUSH
68149: LD_VAR 0 2
68153: PUSH
68154: LD_INT 8
68156: GREATER
68157: OR
68158: IFFALSE 68162
// exit ;
68160: GO 68237
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
68162: LD_ADDR_VAR 0 4
68166: PUSH
68167: LD_INT 22
68169: PUSH
68170: LD_VAR 0 2
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PPUSH
68179: CALL_OW 69
68183: PUSH
68184: FOR_IN
68185: IFFALSE 68235
// begin un := UnitShoot ( i ) ;
68187: LD_ADDR_VAR 0 5
68191: PUSH
68192: LD_VAR 0 4
68196: PPUSH
68197: CALL_OW 504
68201: ST_TO_ADDR
// if GetSide ( un ) = side1 then
68202: LD_VAR 0 5
68206: PPUSH
68207: CALL_OW 255
68211: PUSH
68212: LD_VAR 0 1
68216: EQUAL
68217: IFFALSE 68233
// begin result := un ;
68219: LD_ADDR_VAR 0 3
68223: PUSH
68224: LD_VAR 0 5
68228: ST_TO_ADDR
// exit ;
68229: POP
68230: POP
68231: GO 68237
// end ; end ;
68233: GO 68184
68235: POP
68236: POP
// end ;
68237: LD_VAR 0 3
68241: RET
// export function GetCargoBay ( units ) ; begin
68242: LD_INT 0
68244: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
68245: LD_ADDR_VAR 0 2
68249: PUSH
68250: LD_VAR 0 1
68254: PPUSH
68255: LD_INT 2
68257: PUSH
68258: LD_INT 34
68260: PUSH
68261: LD_INT 12
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: LD_INT 34
68270: PUSH
68271: LD_INT 51
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 34
68280: PUSH
68281: LD_INT 32
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 34
68290: PUSH
68291: LD_INT 89
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: LIST
68302: LIST
68303: LIST
68304: PPUSH
68305: CALL_OW 72
68309: ST_TO_ADDR
// end ;
68310: LD_VAR 0 2
68314: RET
// export function Negate ( value ) ; begin
68315: LD_INT 0
68317: PPUSH
// result := not value ;
68318: LD_ADDR_VAR 0 2
68322: PUSH
68323: LD_VAR 0 1
68327: NOT
68328: ST_TO_ADDR
// end ;
68329: LD_VAR 0 2
68333: RET
// export function Inc ( value ) ; begin
68334: LD_INT 0
68336: PPUSH
// result := value + 1 ;
68337: LD_ADDR_VAR 0 2
68341: PUSH
68342: LD_VAR 0 1
68346: PUSH
68347: LD_INT 1
68349: PLUS
68350: ST_TO_ADDR
// end ;
68351: LD_VAR 0 2
68355: RET
// export function Dec ( value ) ; begin
68356: LD_INT 0
68358: PPUSH
// result := value - 1 ;
68359: LD_ADDR_VAR 0 2
68363: PUSH
68364: LD_VAR 0 1
68368: PUSH
68369: LD_INT 1
68371: MINUS
68372: ST_TO_ADDR
// end ;
68373: LD_VAR 0 2
68377: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
68378: LD_INT 0
68380: PPUSH
68381: PPUSH
68382: PPUSH
68383: PPUSH
68384: PPUSH
68385: PPUSH
68386: PPUSH
68387: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
68388: LD_VAR 0 1
68392: PPUSH
68393: LD_VAR 0 2
68397: PPUSH
68398: CALL_OW 488
68402: NOT
68403: PUSH
68404: LD_VAR 0 3
68408: PPUSH
68409: LD_VAR 0 4
68413: PPUSH
68414: CALL_OW 488
68418: NOT
68419: OR
68420: IFFALSE 68433
// begin result := - 1 ;
68422: LD_ADDR_VAR 0 5
68426: PUSH
68427: LD_INT 1
68429: NEG
68430: ST_TO_ADDR
// exit ;
68431: GO 68668
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
68433: LD_ADDR_VAR 0 12
68437: PUSH
68438: LD_VAR 0 1
68442: PPUSH
68443: LD_VAR 0 2
68447: PPUSH
68448: LD_VAR 0 3
68452: PPUSH
68453: LD_VAR 0 4
68457: PPUSH
68458: CALL 67518 0 4
68462: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68463: LD_ADDR_VAR 0 11
68467: PUSH
68468: LD_VAR 0 1
68472: PPUSH
68473: LD_VAR 0 2
68477: PPUSH
68478: LD_VAR 0 12
68482: PUSH
68483: LD_INT 1
68485: ARRAY
68486: PPUSH
68487: LD_VAR 0 12
68491: PUSH
68492: LD_INT 2
68494: ARRAY
68495: PPUSH
68496: CALL_OW 298
68500: ST_TO_ADDR
// distance := 9999 ;
68501: LD_ADDR_VAR 0 10
68505: PUSH
68506: LD_INT 9999
68508: ST_TO_ADDR
// for i := 0 to 5 do
68509: LD_ADDR_VAR 0 6
68513: PUSH
68514: DOUBLE
68515: LD_INT 0
68517: DEC
68518: ST_TO_ADDR
68519: LD_INT 5
68521: PUSH
68522: FOR_TO
68523: IFFALSE 68666
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68525: LD_ADDR_VAR 0 7
68529: PUSH
68530: LD_VAR 0 1
68534: PPUSH
68535: LD_VAR 0 6
68539: PPUSH
68540: LD_VAR 0 11
68544: PPUSH
68545: CALL_OW 272
68549: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68550: LD_ADDR_VAR 0 8
68554: PUSH
68555: LD_VAR 0 2
68559: PPUSH
68560: LD_VAR 0 6
68564: PPUSH
68565: LD_VAR 0 11
68569: PPUSH
68570: CALL_OW 273
68574: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68575: LD_VAR 0 7
68579: PPUSH
68580: LD_VAR 0 8
68584: PPUSH
68585: CALL_OW 488
68589: NOT
68590: IFFALSE 68594
// continue ;
68592: GO 68522
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68594: LD_ADDR_VAR 0 9
68598: PUSH
68599: LD_VAR 0 12
68603: PUSH
68604: LD_INT 1
68606: ARRAY
68607: PPUSH
68608: LD_VAR 0 12
68612: PUSH
68613: LD_INT 2
68615: ARRAY
68616: PPUSH
68617: LD_VAR 0 7
68621: PPUSH
68622: LD_VAR 0 8
68626: PPUSH
68627: CALL_OW 298
68631: ST_TO_ADDR
// if tmp < distance then
68632: LD_VAR 0 9
68636: PUSH
68637: LD_VAR 0 10
68641: LESS
68642: IFFALSE 68664
// begin result := i ;
68644: LD_ADDR_VAR 0 5
68648: PUSH
68649: LD_VAR 0 6
68653: ST_TO_ADDR
// distance := tmp ;
68654: LD_ADDR_VAR 0 10
68658: PUSH
68659: LD_VAR 0 9
68663: ST_TO_ADDR
// end ; end ;
68664: GO 68522
68666: POP
68667: POP
// end ;
68668: LD_VAR 0 5
68672: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68673: LD_INT 0
68675: PPUSH
68676: PPUSH
// if not driver or not IsInUnit ( driver ) then
68677: LD_VAR 0 1
68681: NOT
68682: PUSH
68683: LD_VAR 0 1
68687: PPUSH
68688: CALL_OW 310
68692: NOT
68693: OR
68694: IFFALSE 68698
// exit ;
68696: GO 68788
// vehicle := IsInUnit ( driver ) ;
68698: LD_ADDR_VAR 0 3
68702: PUSH
68703: LD_VAR 0 1
68707: PPUSH
68708: CALL_OW 310
68712: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68713: LD_VAR 0 1
68717: PPUSH
68718: LD_STRING \
68720: PUSH
68721: LD_INT 0
68723: PUSH
68724: LD_INT 0
68726: PUSH
68727: LD_INT 0
68729: PUSH
68730: LD_INT 0
68732: PUSH
68733: LD_INT 0
68735: PUSH
68736: LD_INT 0
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: PUSH
68748: LD_STRING E
68750: PUSH
68751: LD_INT 0
68753: PUSH
68754: LD_INT 0
68756: PUSH
68757: LD_VAR 0 3
68761: PUSH
68762: LD_INT 0
68764: PUSH
68765: LD_INT 0
68767: PUSH
68768: LD_INT 0
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PPUSH
68784: CALL_OW 446
// end ;
68788: LD_VAR 0 2
68792: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68793: LD_INT 0
68795: PPUSH
68796: PPUSH
// if not driver or not IsInUnit ( driver ) then
68797: LD_VAR 0 1
68801: NOT
68802: PUSH
68803: LD_VAR 0 1
68807: PPUSH
68808: CALL_OW 310
68812: NOT
68813: OR
68814: IFFALSE 68818
// exit ;
68816: GO 68908
// vehicle := IsInUnit ( driver ) ;
68818: LD_ADDR_VAR 0 3
68822: PUSH
68823: LD_VAR 0 1
68827: PPUSH
68828: CALL_OW 310
68832: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68833: LD_VAR 0 1
68837: PPUSH
68838: LD_STRING \
68840: PUSH
68841: LD_INT 0
68843: PUSH
68844: LD_INT 0
68846: PUSH
68847: LD_INT 0
68849: PUSH
68850: LD_INT 0
68852: PUSH
68853: LD_INT 0
68855: PUSH
68856: LD_INT 0
68858: PUSH
68859: EMPTY
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: PUSH
68868: LD_STRING E
68870: PUSH
68871: LD_INT 0
68873: PUSH
68874: LD_INT 0
68876: PUSH
68877: LD_VAR 0 3
68881: PUSH
68882: LD_INT 0
68884: PUSH
68885: LD_INT 0
68887: PUSH
68888: LD_INT 0
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PPUSH
68904: CALL_OW 447
// end ;
68908: LD_VAR 0 2
68912: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68913: LD_INT 0
68915: PPUSH
68916: PPUSH
68917: PPUSH
// tmp := [ ] ;
68918: LD_ADDR_VAR 0 5
68922: PUSH
68923: EMPTY
68924: ST_TO_ADDR
// for i in units do
68925: LD_ADDR_VAR 0 4
68929: PUSH
68930: LD_VAR 0 1
68934: PUSH
68935: FOR_IN
68936: IFFALSE 68974
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68938: LD_ADDR_VAR 0 5
68942: PUSH
68943: LD_VAR 0 5
68947: PPUSH
68948: LD_VAR 0 5
68952: PUSH
68953: LD_INT 1
68955: PLUS
68956: PPUSH
68957: LD_VAR 0 4
68961: PPUSH
68962: CALL_OW 256
68966: PPUSH
68967: CALL_OW 2
68971: ST_TO_ADDR
68972: GO 68935
68974: POP
68975: POP
// if not tmp then
68976: LD_VAR 0 5
68980: NOT
68981: IFFALSE 68985
// exit ;
68983: GO 69033
// if asc then
68985: LD_VAR 0 2
68989: IFFALSE 69013
// result := SortListByListAsc ( units , tmp ) else
68991: LD_ADDR_VAR 0 3
68995: PUSH
68996: LD_VAR 0 1
69000: PPUSH
69001: LD_VAR 0 5
69005: PPUSH
69006: CALL_OW 76
69010: ST_TO_ADDR
69011: GO 69033
// result := SortListByListDesc ( units , tmp ) ;
69013: LD_ADDR_VAR 0 3
69017: PUSH
69018: LD_VAR 0 1
69022: PPUSH
69023: LD_VAR 0 5
69027: PPUSH
69028: CALL_OW 77
69032: ST_TO_ADDR
// end ;
69033: LD_VAR 0 3
69037: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69038: LD_INT 0
69040: PPUSH
69041: PPUSH
// task := GetTaskList ( mech ) ;
69042: LD_ADDR_VAR 0 4
69046: PUSH
69047: LD_VAR 0 1
69051: PPUSH
69052: CALL_OW 437
69056: ST_TO_ADDR
// if not task then
69057: LD_VAR 0 4
69061: NOT
69062: IFFALSE 69066
// exit ;
69064: GO 69108
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69066: LD_ADDR_VAR 0 3
69070: PUSH
69071: LD_VAR 0 4
69075: PUSH
69076: LD_INT 1
69078: ARRAY
69079: PUSH
69080: LD_INT 1
69082: ARRAY
69083: PUSH
69084: LD_STRING r
69086: EQUAL
69087: PUSH
69088: LD_VAR 0 4
69092: PUSH
69093: LD_INT 1
69095: ARRAY
69096: PUSH
69097: LD_INT 4
69099: ARRAY
69100: PUSH
69101: LD_VAR 0 2
69105: EQUAL
69106: AND
69107: ST_TO_ADDR
// end ;
69108: LD_VAR 0 3
69112: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69113: LD_INT 0
69115: PPUSH
// SetDir ( unit , d ) ;
69116: LD_VAR 0 1
69120: PPUSH
69121: LD_VAR 0 4
69125: PPUSH
69126: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69130: LD_VAR 0 1
69134: PPUSH
69135: LD_VAR 0 2
69139: PPUSH
69140: LD_VAR 0 3
69144: PPUSH
69145: LD_VAR 0 5
69149: PPUSH
69150: CALL_OW 48
// end ;
69154: LD_VAR 0 6
69158: RET
// export function ToNaturalNumber ( number ) ; begin
69159: LD_INT 0
69161: PPUSH
// result := number div 1 ;
69162: LD_ADDR_VAR 0 2
69166: PUSH
69167: LD_VAR 0 1
69171: PUSH
69172: LD_INT 1
69174: DIV
69175: ST_TO_ADDR
// if number < 0 then
69176: LD_VAR 0 1
69180: PUSH
69181: LD_INT 0
69183: LESS
69184: IFFALSE 69194
// result := 0 ;
69186: LD_ADDR_VAR 0 2
69190: PUSH
69191: LD_INT 0
69193: ST_TO_ADDR
// end ;
69194: LD_VAR 0 2
69198: RET
// export function SortByClass ( units , class ) ; var un ; begin
69199: LD_INT 0
69201: PPUSH
69202: PPUSH
// if not units or not class then
69203: LD_VAR 0 1
69207: NOT
69208: PUSH
69209: LD_VAR 0 2
69213: NOT
69214: OR
69215: IFFALSE 69219
// exit ;
69217: GO 69314
// result := [ ] ;
69219: LD_ADDR_VAR 0 3
69223: PUSH
69224: EMPTY
69225: ST_TO_ADDR
// for un in units do
69226: LD_ADDR_VAR 0 4
69230: PUSH
69231: LD_VAR 0 1
69235: PUSH
69236: FOR_IN
69237: IFFALSE 69312
// if GetClass ( un ) = class then
69239: LD_VAR 0 4
69243: PPUSH
69244: CALL_OW 257
69248: PUSH
69249: LD_VAR 0 2
69253: EQUAL
69254: IFFALSE 69281
// result := Insert ( result , 1 , un ) else
69256: LD_ADDR_VAR 0 3
69260: PUSH
69261: LD_VAR 0 3
69265: PPUSH
69266: LD_INT 1
69268: PPUSH
69269: LD_VAR 0 4
69273: PPUSH
69274: CALL_OW 2
69278: ST_TO_ADDR
69279: GO 69310
// result := Replace ( result , result + 1 , un ) ;
69281: LD_ADDR_VAR 0 3
69285: PUSH
69286: LD_VAR 0 3
69290: PPUSH
69291: LD_VAR 0 3
69295: PUSH
69296: LD_INT 1
69298: PLUS
69299: PPUSH
69300: LD_VAR 0 4
69304: PPUSH
69305: CALL_OW 1
69309: ST_TO_ADDR
69310: GO 69236
69312: POP
69313: POP
// end ;
69314: LD_VAR 0 3
69318: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
69319: LD_INT 0
69321: PPUSH
69322: PPUSH
69323: PPUSH
69324: PPUSH
69325: PPUSH
69326: PPUSH
69327: PPUSH
// result := [ ] ;
69328: LD_ADDR_VAR 0 4
69332: PUSH
69333: EMPTY
69334: ST_TO_ADDR
// if x - r < 0 then
69335: LD_VAR 0 1
69339: PUSH
69340: LD_VAR 0 3
69344: MINUS
69345: PUSH
69346: LD_INT 0
69348: LESS
69349: IFFALSE 69361
// min_x := 0 else
69351: LD_ADDR_VAR 0 8
69355: PUSH
69356: LD_INT 0
69358: ST_TO_ADDR
69359: GO 69377
// min_x := x - r ;
69361: LD_ADDR_VAR 0 8
69365: PUSH
69366: LD_VAR 0 1
69370: PUSH
69371: LD_VAR 0 3
69375: MINUS
69376: ST_TO_ADDR
// if y - r < 0 then
69377: LD_VAR 0 2
69381: PUSH
69382: LD_VAR 0 3
69386: MINUS
69387: PUSH
69388: LD_INT 0
69390: LESS
69391: IFFALSE 69403
// min_y := 0 else
69393: LD_ADDR_VAR 0 7
69397: PUSH
69398: LD_INT 0
69400: ST_TO_ADDR
69401: GO 69419
// min_y := y - r ;
69403: LD_ADDR_VAR 0 7
69407: PUSH
69408: LD_VAR 0 2
69412: PUSH
69413: LD_VAR 0 3
69417: MINUS
69418: ST_TO_ADDR
// max_x := x + r ;
69419: LD_ADDR_VAR 0 9
69423: PUSH
69424: LD_VAR 0 1
69428: PUSH
69429: LD_VAR 0 3
69433: PLUS
69434: ST_TO_ADDR
// max_y := y + r ;
69435: LD_ADDR_VAR 0 10
69439: PUSH
69440: LD_VAR 0 2
69444: PUSH
69445: LD_VAR 0 3
69449: PLUS
69450: ST_TO_ADDR
// for _x = min_x to max_x do
69451: LD_ADDR_VAR 0 5
69455: PUSH
69456: DOUBLE
69457: LD_VAR 0 8
69461: DEC
69462: ST_TO_ADDR
69463: LD_VAR 0 9
69467: PUSH
69468: FOR_TO
69469: IFFALSE 69570
// for _y = min_y to max_y do
69471: LD_ADDR_VAR 0 6
69475: PUSH
69476: DOUBLE
69477: LD_VAR 0 7
69481: DEC
69482: ST_TO_ADDR
69483: LD_VAR 0 10
69487: PUSH
69488: FOR_TO
69489: IFFALSE 69566
// begin if not ValidHex ( _x , _y ) then
69491: LD_VAR 0 5
69495: PPUSH
69496: LD_VAR 0 6
69500: PPUSH
69501: CALL_OW 488
69505: NOT
69506: IFFALSE 69510
// continue ;
69508: GO 69488
// if GetResourceTypeXY ( _x , _y ) then
69510: LD_VAR 0 5
69514: PPUSH
69515: LD_VAR 0 6
69519: PPUSH
69520: CALL_OW 283
69524: IFFALSE 69564
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69526: LD_ADDR_VAR 0 4
69530: PUSH
69531: LD_VAR 0 4
69535: PPUSH
69536: LD_VAR 0 4
69540: PUSH
69541: LD_INT 1
69543: PLUS
69544: PPUSH
69545: LD_VAR 0 5
69549: PUSH
69550: LD_VAR 0 6
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PPUSH
69559: CALL_OW 1
69563: ST_TO_ADDR
// end ;
69564: GO 69488
69566: POP
69567: POP
69568: GO 69468
69570: POP
69571: POP
// end ;
69572: LD_VAR 0 4
69576: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69577: LD_INT 0
69579: PPUSH
69580: PPUSH
69581: PPUSH
69582: PPUSH
69583: PPUSH
69584: PPUSH
69585: PPUSH
69586: PPUSH
// if not units then
69587: LD_VAR 0 1
69591: NOT
69592: IFFALSE 69596
// exit ;
69594: GO 70120
// result := UnitFilter ( units , [ f_ok ] ) ;
69596: LD_ADDR_VAR 0 3
69600: PUSH
69601: LD_VAR 0 1
69605: PPUSH
69606: LD_INT 50
69608: PUSH
69609: EMPTY
69610: LIST
69611: PPUSH
69612: CALL_OW 72
69616: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69617: LD_ADDR_VAR 0 8
69621: PUSH
69622: LD_VAR 0 1
69626: PUSH
69627: LD_INT 1
69629: ARRAY
69630: PPUSH
69631: CALL_OW 255
69635: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69636: LD_ADDR_VAR 0 10
69640: PUSH
69641: LD_INT 29
69643: PUSH
69644: LD_INT 91
69646: PUSH
69647: LD_INT 49
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: LIST
69654: ST_TO_ADDR
// if not result then
69655: LD_VAR 0 3
69659: NOT
69660: IFFALSE 69664
// exit ;
69662: GO 70120
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69664: LD_ADDR_VAR 0 5
69668: PUSH
69669: LD_INT 81
69671: PUSH
69672: LD_VAR 0 8
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: PPUSH
69681: CALL_OW 69
69685: ST_TO_ADDR
// for i in result do
69686: LD_ADDR_VAR 0 4
69690: PUSH
69691: LD_VAR 0 3
69695: PUSH
69696: FOR_IN
69697: IFFALSE 70118
// begin tag := GetTag ( i ) + 1 ;
69699: LD_ADDR_VAR 0 9
69703: PUSH
69704: LD_VAR 0 4
69708: PPUSH
69709: CALL_OW 110
69713: PUSH
69714: LD_INT 1
69716: PLUS
69717: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69718: LD_ADDR_VAR 0 7
69722: PUSH
69723: LD_VAR 0 4
69727: PPUSH
69728: CALL_OW 250
69732: PPUSH
69733: LD_VAR 0 4
69737: PPUSH
69738: CALL_OW 251
69742: PPUSH
69743: LD_INT 6
69745: PPUSH
69746: CALL 69319 0 3
69750: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
69751: LD_VAR 0 4
69755: PPUSH
69756: CALL_OW 247
69760: PUSH
69761: LD_INT 2
69763: EQUAL
69764: PUSH
69765: LD_VAR 0 7
69769: AND
69770: PUSH
69771: LD_VAR 0 4
69775: PPUSH
69776: CALL_OW 264
69780: PUSH
69781: LD_VAR 0 10
69785: IN
69786: NOT
69787: AND
69788: IFFALSE 69827
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69790: LD_VAR 0 4
69794: PPUSH
69795: LD_VAR 0 7
69799: PUSH
69800: LD_INT 1
69802: ARRAY
69803: PUSH
69804: LD_INT 1
69806: ARRAY
69807: PPUSH
69808: LD_VAR 0 7
69812: PUSH
69813: LD_INT 1
69815: ARRAY
69816: PUSH
69817: LD_INT 2
69819: ARRAY
69820: PPUSH
69821: CALL_OW 116
69825: GO 70116
// if path > tag then
69827: LD_VAR 0 2
69831: PUSH
69832: LD_VAR 0 9
69836: GREATER
69837: IFFALSE 70045
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69839: LD_ADDR_VAR 0 6
69843: PUSH
69844: LD_VAR 0 5
69848: PPUSH
69849: LD_INT 91
69851: PUSH
69852: LD_VAR 0 4
69856: PUSH
69857: LD_INT 8
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: LIST
69864: PPUSH
69865: CALL_OW 72
69869: ST_TO_ADDR
// if nearEnemy then
69870: LD_VAR 0 6
69874: IFFALSE 69943
// begin if GetWeapon ( i ) = ru_time_lapser then
69876: LD_VAR 0 4
69880: PPUSH
69881: CALL_OW 264
69885: PUSH
69886: LD_INT 49
69888: EQUAL
69889: IFFALSE 69917
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69891: LD_VAR 0 4
69895: PPUSH
69896: LD_VAR 0 6
69900: PPUSH
69901: LD_VAR 0 4
69905: PPUSH
69906: CALL_OW 74
69910: PPUSH
69911: CALL_OW 112
69915: GO 69941
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69917: LD_VAR 0 4
69921: PPUSH
69922: LD_VAR 0 6
69926: PPUSH
69927: LD_VAR 0 4
69931: PPUSH
69932: CALL_OW 74
69936: PPUSH
69937: CALL 71045 0 2
// end else
69941: GO 70043
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69943: LD_VAR 0 4
69947: PPUSH
69948: LD_VAR 0 2
69952: PUSH
69953: LD_VAR 0 9
69957: ARRAY
69958: PUSH
69959: LD_INT 1
69961: ARRAY
69962: PPUSH
69963: LD_VAR 0 2
69967: PUSH
69968: LD_VAR 0 9
69972: ARRAY
69973: PUSH
69974: LD_INT 2
69976: ARRAY
69977: PPUSH
69978: CALL_OW 297
69982: PUSH
69983: LD_INT 6
69985: GREATER
69986: IFFALSE 70029
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69988: LD_VAR 0 4
69992: PPUSH
69993: LD_VAR 0 2
69997: PUSH
69998: LD_VAR 0 9
70002: ARRAY
70003: PUSH
70004: LD_INT 1
70006: ARRAY
70007: PPUSH
70008: LD_VAR 0 2
70012: PUSH
70013: LD_VAR 0 9
70017: ARRAY
70018: PUSH
70019: LD_INT 2
70021: ARRAY
70022: PPUSH
70023: CALL_OW 114
70027: GO 70043
// SetTag ( i , tag ) ;
70029: LD_VAR 0 4
70033: PPUSH
70034: LD_VAR 0 9
70038: PPUSH
70039: CALL_OW 109
// end else
70043: GO 70116
// if enemy then
70045: LD_VAR 0 5
70049: IFFALSE 70116
// begin if GetWeapon ( i ) = ru_time_lapser then
70051: LD_VAR 0 4
70055: PPUSH
70056: CALL_OW 264
70060: PUSH
70061: LD_INT 49
70063: EQUAL
70064: IFFALSE 70092
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70066: LD_VAR 0 4
70070: PPUSH
70071: LD_VAR 0 5
70075: PPUSH
70076: LD_VAR 0 4
70080: PPUSH
70081: CALL_OW 74
70085: PPUSH
70086: CALL_OW 112
70090: GO 70116
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70092: LD_VAR 0 4
70096: PPUSH
70097: LD_VAR 0 5
70101: PPUSH
70102: LD_VAR 0 4
70106: PPUSH
70107: CALL_OW 74
70111: PPUSH
70112: CALL 71045 0 2
// end ; end ;
70116: GO 69696
70118: POP
70119: POP
// end ;
70120: LD_VAR 0 3
70124: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70125: LD_INT 0
70127: PPUSH
70128: PPUSH
70129: PPUSH
// if not unit or IsInUnit ( unit ) then
70130: LD_VAR 0 1
70134: NOT
70135: PUSH
70136: LD_VAR 0 1
70140: PPUSH
70141: CALL_OW 310
70145: OR
70146: IFFALSE 70150
// exit ;
70148: GO 70241
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70150: LD_ADDR_VAR 0 4
70154: PUSH
70155: LD_VAR 0 1
70159: PPUSH
70160: CALL_OW 250
70164: PPUSH
70165: LD_VAR 0 2
70169: PPUSH
70170: LD_INT 1
70172: PPUSH
70173: CALL_OW 272
70177: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70178: LD_ADDR_VAR 0 5
70182: PUSH
70183: LD_VAR 0 1
70187: PPUSH
70188: CALL_OW 251
70192: PPUSH
70193: LD_VAR 0 2
70197: PPUSH
70198: LD_INT 1
70200: PPUSH
70201: CALL_OW 273
70205: ST_TO_ADDR
// if ValidHex ( x , y ) then
70206: LD_VAR 0 4
70210: PPUSH
70211: LD_VAR 0 5
70215: PPUSH
70216: CALL_OW 488
70220: IFFALSE 70241
// ComTurnXY ( unit , x , y ) ;
70222: LD_VAR 0 1
70226: PPUSH
70227: LD_VAR 0 4
70231: PPUSH
70232: LD_VAR 0 5
70236: PPUSH
70237: CALL_OW 118
// end ;
70241: LD_VAR 0 3
70245: RET
// export function SeeUnits ( side , units ) ; var i ; begin
70246: LD_INT 0
70248: PPUSH
70249: PPUSH
// result := false ;
70250: LD_ADDR_VAR 0 3
70254: PUSH
70255: LD_INT 0
70257: ST_TO_ADDR
// if not units then
70258: LD_VAR 0 2
70262: NOT
70263: IFFALSE 70267
// exit ;
70265: GO 70312
// for i in units do
70267: LD_ADDR_VAR 0 4
70271: PUSH
70272: LD_VAR 0 2
70276: PUSH
70277: FOR_IN
70278: IFFALSE 70310
// if See ( side , i ) then
70280: LD_VAR 0 1
70284: PPUSH
70285: LD_VAR 0 4
70289: PPUSH
70290: CALL_OW 292
70294: IFFALSE 70308
// begin result := true ;
70296: LD_ADDR_VAR 0 3
70300: PUSH
70301: LD_INT 1
70303: ST_TO_ADDR
// exit ;
70304: POP
70305: POP
70306: GO 70312
// end ;
70308: GO 70277
70310: POP
70311: POP
// end ;
70312: LD_VAR 0 3
70316: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
70317: LD_INT 0
70319: PPUSH
70320: PPUSH
70321: PPUSH
70322: PPUSH
// if not unit or not points then
70323: LD_VAR 0 1
70327: NOT
70328: PUSH
70329: LD_VAR 0 2
70333: NOT
70334: OR
70335: IFFALSE 70339
// exit ;
70337: GO 70429
// dist := 99999 ;
70339: LD_ADDR_VAR 0 5
70343: PUSH
70344: LD_INT 99999
70346: ST_TO_ADDR
// for i in points do
70347: LD_ADDR_VAR 0 4
70351: PUSH
70352: LD_VAR 0 2
70356: PUSH
70357: FOR_IN
70358: IFFALSE 70427
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
70360: LD_ADDR_VAR 0 6
70364: PUSH
70365: LD_VAR 0 1
70369: PPUSH
70370: LD_VAR 0 4
70374: PUSH
70375: LD_INT 1
70377: ARRAY
70378: PPUSH
70379: LD_VAR 0 4
70383: PUSH
70384: LD_INT 2
70386: ARRAY
70387: PPUSH
70388: CALL_OW 297
70392: ST_TO_ADDR
// if tmpDist < dist then
70393: LD_VAR 0 6
70397: PUSH
70398: LD_VAR 0 5
70402: LESS
70403: IFFALSE 70425
// begin result := i ;
70405: LD_ADDR_VAR 0 3
70409: PUSH
70410: LD_VAR 0 4
70414: ST_TO_ADDR
// dist := tmpDist ;
70415: LD_ADDR_VAR 0 5
70419: PUSH
70420: LD_VAR 0 6
70424: ST_TO_ADDR
// end ; end ;
70425: GO 70357
70427: POP
70428: POP
// end ;
70429: LD_VAR 0 3
70433: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
70434: LD_INT 0
70436: PPUSH
// uc_side := side ;
70437: LD_ADDR_OWVAR 20
70441: PUSH
70442: LD_VAR 0 1
70446: ST_TO_ADDR
// uc_nation := 3 ;
70447: LD_ADDR_OWVAR 21
70451: PUSH
70452: LD_INT 3
70454: ST_TO_ADDR
// vc_chassis := 25 ;
70455: LD_ADDR_OWVAR 37
70459: PUSH
70460: LD_INT 25
70462: ST_TO_ADDR
// vc_engine := engine_siberite ;
70463: LD_ADDR_OWVAR 39
70467: PUSH
70468: LD_INT 3
70470: ST_TO_ADDR
// vc_control := control_computer ;
70471: LD_ADDR_OWVAR 38
70475: PUSH
70476: LD_INT 3
70478: ST_TO_ADDR
// vc_weapon := 59 ;
70479: LD_ADDR_OWVAR 40
70483: PUSH
70484: LD_INT 59
70486: ST_TO_ADDR
// result := CreateVehicle ;
70487: LD_ADDR_VAR 0 5
70491: PUSH
70492: CALL_OW 45
70496: ST_TO_ADDR
// SetDir ( result , d ) ;
70497: LD_VAR 0 5
70501: PPUSH
70502: LD_VAR 0 4
70506: PPUSH
70507: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70511: LD_VAR 0 5
70515: PPUSH
70516: LD_VAR 0 2
70520: PPUSH
70521: LD_VAR 0 3
70525: PPUSH
70526: LD_INT 0
70528: PPUSH
70529: CALL_OW 48
// end ;
70533: LD_VAR 0 5
70537: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70538: LD_INT 0
70540: PPUSH
70541: PPUSH
70542: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70543: LD_ADDR_VAR 0 2
70547: PUSH
70548: LD_INT 0
70550: PUSH
70551: LD_INT 0
70553: PUSH
70554: LD_INT 0
70556: PUSH
70557: LD_INT 0
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: LIST
70564: LIST
70565: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70566: LD_VAR 0 1
70570: NOT
70571: PUSH
70572: LD_VAR 0 1
70576: PPUSH
70577: CALL_OW 264
70581: PUSH
70582: LD_INT 12
70584: PUSH
70585: LD_INT 51
70587: PUSH
70588: LD_INT 32
70590: PUSH
70591: LD_INT 89
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: IN
70600: NOT
70601: OR
70602: IFFALSE 70606
// exit ;
70604: GO 70704
// for i := 1 to 3 do
70606: LD_ADDR_VAR 0 3
70610: PUSH
70611: DOUBLE
70612: LD_INT 1
70614: DEC
70615: ST_TO_ADDR
70616: LD_INT 3
70618: PUSH
70619: FOR_TO
70620: IFFALSE 70702
// begin tmp := GetCargo ( cargo , i ) ;
70622: LD_ADDR_VAR 0 4
70626: PUSH
70627: LD_VAR 0 1
70631: PPUSH
70632: LD_VAR 0 3
70636: PPUSH
70637: CALL_OW 289
70641: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70642: LD_ADDR_VAR 0 2
70646: PUSH
70647: LD_VAR 0 2
70651: PPUSH
70652: LD_VAR 0 3
70656: PPUSH
70657: LD_VAR 0 4
70661: PPUSH
70662: CALL_OW 1
70666: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70667: LD_ADDR_VAR 0 2
70671: PUSH
70672: LD_VAR 0 2
70676: PPUSH
70677: LD_INT 4
70679: PPUSH
70680: LD_VAR 0 2
70684: PUSH
70685: LD_INT 4
70687: ARRAY
70688: PUSH
70689: LD_VAR 0 4
70693: PLUS
70694: PPUSH
70695: CALL_OW 1
70699: ST_TO_ADDR
// end ;
70700: GO 70619
70702: POP
70703: POP
// end ;
70704: LD_VAR 0 2
70708: RET
// export function Length ( array ) ; begin
70709: LD_INT 0
70711: PPUSH
// result := array + 0 ;
70712: LD_ADDR_VAR 0 2
70716: PUSH
70717: LD_VAR 0 1
70721: PUSH
70722: LD_INT 0
70724: PLUS
70725: ST_TO_ADDR
// end ;
70726: LD_VAR 0 2
70730: RET
// export function PrepareArray ( array ) ; begin
70731: LD_INT 0
70733: PPUSH
// result := array diff 0 ;
70734: LD_ADDR_VAR 0 2
70738: PUSH
70739: LD_VAR 0 1
70743: PUSH
70744: LD_INT 0
70746: DIFF
70747: ST_TO_ADDR
// if not result [ 1 ] then
70748: LD_VAR 0 2
70752: PUSH
70753: LD_INT 1
70755: ARRAY
70756: NOT
70757: IFFALSE 70777
// result := Delete ( result , 1 ) ;
70759: LD_ADDR_VAR 0 2
70763: PUSH
70764: LD_VAR 0 2
70768: PPUSH
70769: LD_INT 1
70771: PPUSH
70772: CALL_OW 3
70776: ST_TO_ADDR
// end ;
70777: LD_VAR 0 2
70781: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70782: LD_INT 0
70784: PPUSH
70785: PPUSH
70786: PPUSH
70787: PPUSH
// sibRocketRange := 25 ;
70788: LD_ADDR_VAR 0 6
70792: PUSH
70793: LD_INT 25
70795: ST_TO_ADDR
// result := false ;
70796: LD_ADDR_VAR 0 4
70800: PUSH
70801: LD_INT 0
70803: ST_TO_ADDR
// for i := 0 to 5 do
70804: LD_ADDR_VAR 0 5
70808: PUSH
70809: DOUBLE
70810: LD_INT 0
70812: DEC
70813: ST_TO_ADDR
70814: LD_INT 5
70816: PUSH
70817: FOR_TO
70818: IFFALSE 70885
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70820: LD_VAR 0 1
70824: PPUSH
70825: LD_VAR 0 5
70829: PPUSH
70830: LD_VAR 0 6
70834: PPUSH
70835: CALL_OW 272
70839: PPUSH
70840: LD_VAR 0 2
70844: PPUSH
70845: LD_VAR 0 5
70849: PPUSH
70850: LD_VAR 0 6
70854: PPUSH
70855: CALL_OW 273
70859: PPUSH
70860: LD_VAR 0 3
70864: PPUSH
70865: CALL_OW 309
70869: IFFALSE 70883
// begin result := true ;
70871: LD_ADDR_VAR 0 4
70875: PUSH
70876: LD_INT 1
70878: ST_TO_ADDR
// exit ;
70879: POP
70880: POP
70881: GO 70887
// end ;
70883: GO 70817
70885: POP
70886: POP
// end ;
70887: LD_VAR 0 4
70891: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70892: LD_INT 0
70894: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70895: LD_VAR 0 1
70899: PPUSH
70900: LD_VAR 0 2
70904: PPUSH
70905: LD_INT 0
70907: PPUSH
70908: LD_INT 0
70910: PPUSH
70911: LD_INT 1
70913: PPUSH
70914: LD_INT 0
70916: PPUSH
70917: CALL_OW 587
// end ;
70921: LD_VAR 0 3
70925: RET
// export function CenterOnNow ( unit ) ; begin
70926: LD_INT 0
70928: PPUSH
// result := IsInUnit ( unit ) ;
70929: LD_ADDR_VAR 0 2
70933: PUSH
70934: LD_VAR 0 1
70938: PPUSH
70939: CALL_OW 310
70943: ST_TO_ADDR
// if not result then
70944: LD_VAR 0 2
70948: NOT
70949: IFFALSE 70961
// result := unit ;
70951: LD_ADDR_VAR 0 2
70955: PUSH
70956: LD_VAR 0 1
70960: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70961: LD_VAR 0 1
70965: PPUSH
70966: CALL_OW 87
// end ;
70970: LD_VAR 0 2
70974: RET
// export function ComMoveHex ( unit , hex ) ; begin
70975: LD_INT 0
70977: PPUSH
// if not hex then
70978: LD_VAR 0 2
70982: NOT
70983: IFFALSE 70987
// exit ;
70985: GO 71040
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70987: LD_VAR 0 2
70991: PUSH
70992: LD_INT 1
70994: ARRAY
70995: PPUSH
70996: LD_VAR 0 2
71000: PUSH
71001: LD_INT 2
71003: ARRAY
71004: PPUSH
71005: CALL_OW 428
71009: IFFALSE 71013
// exit ;
71011: GO 71040
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
71013: LD_VAR 0 1
71017: PPUSH
71018: LD_VAR 0 2
71022: PUSH
71023: LD_INT 1
71025: ARRAY
71026: PPUSH
71027: LD_VAR 0 2
71031: PUSH
71032: LD_INT 2
71034: ARRAY
71035: PPUSH
71036: CALL_OW 111
// end ;
71040: LD_VAR 0 3
71044: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
71045: LD_INT 0
71047: PPUSH
71048: PPUSH
71049: PPUSH
// if not unit or not enemy then
71050: LD_VAR 0 1
71054: NOT
71055: PUSH
71056: LD_VAR 0 2
71060: NOT
71061: OR
71062: IFFALSE 71066
// exit ;
71064: GO 71190
// x := GetX ( enemy ) ;
71066: LD_ADDR_VAR 0 4
71070: PUSH
71071: LD_VAR 0 2
71075: PPUSH
71076: CALL_OW 250
71080: ST_TO_ADDR
// y := GetY ( enemy ) ;
71081: LD_ADDR_VAR 0 5
71085: PUSH
71086: LD_VAR 0 2
71090: PPUSH
71091: CALL_OW 251
71095: ST_TO_ADDR
// if ValidHex ( x , y ) then
71096: LD_VAR 0 4
71100: PPUSH
71101: LD_VAR 0 5
71105: PPUSH
71106: CALL_OW 488
71110: IFFALSE 71190
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
71112: LD_VAR 0 2
71116: PPUSH
71117: CALL_OW 247
71121: PUSH
71122: LD_INT 3
71124: PUSH
71125: LD_INT 2
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: IN
71132: PUSH
71133: LD_VAR 0 1
71137: PPUSH
71138: CALL_OW 255
71142: PPUSH
71143: LD_VAR 0 2
71147: PPUSH
71148: CALL_OW 292
71152: AND
71153: IFFALSE 71171
// ComAttackUnit ( unit , enemy ) else
71155: LD_VAR 0 1
71159: PPUSH
71160: LD_VAR 0 2
71164: PPUSH
71165: CALL_OW 115
71169: GO 71190
// ComAgressiveMove ( unit , x , y ) ;
71171: LD_VAR 0 1
71175: PPUSH
71176: LD_VAR 0 4
71180: PPUSH
71181: LD_VAR 0 5
71185: PPUSH
71186: CALL_OW 114
// end ; end_of_file
71190: LD_VAR 0 3
71194: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71195: LD_VAR 0 1
71199: PUSH
71200: LD_INT 200
71202: DOUBLE
71203: GREATEREQUAL
71204: IFFALSE 71212
71206: LD_INT 299
71208: DOUBLE
71209: LESSEQUAL
71210: IFTRUE 71214
71212: GO 71246
71214: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71215: LD_VAR 0 1
71219: PPUSH
71220: LD_VAR 0 2
71224: PPUSH
71225: LD_VAR 0 3
71229: PPUSH
71230: LD_VAR 0 4
71234: PPUSH
71235: LD_VAR 0 5
71239: PPUSH
71240: CALL 24919 0 5
71244: GO 71323
71246: LD_INT 300
71248: DOUBLE
71249: GREATEREQUAL
71250: IFFALSE 71258
71252: LD_INT 399
71254: DOUBLE
71255: LESSEQUAL
71256: IFTRUE 71260
71258: GO 71322
71260: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71261: LD_VAR 0 1
71265: PPUSH
71266: LD_VAR 0 2
71270: PPUSH
71271: LD_VAR 0 3
71275: PPUSH
71276: LD_VAR 0 4
71280: PPUSH
71281: LD_VAR 0 5
71285: PPUSH
71286: LD_VAR 0 6
71290: PPUSH
71291: LD_VAR 0 7
71295: PPUSH
71296: LD_VAR 0 8
71300: PPUSH
71301: LD_VAR 0 9
71305: PPUSH
71306: LD_VAR 0 10
71310: PPUSH
71311: LD_VAR 0 11
71315: PPUSH
71316: CALL 21244 0 11
71320: GO 71323
71322: POP
// end ;
71323: PPOPN 11
71325: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71326: LD_VAR 0 1
71330: PPUSH
71331: LD_VAR 0 2
71335: PPUSH
71336: LD_VAR 0 3
71340: PPUSH
71341: LD_VAR 0 4
71345: PPUSH
71346: LD_VAR 0 5
71350: PPUSH
71351: CALL 24655 0 5
// end ; end_of_file
71355: PPOPN 5
71357: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71358: LD_VAR 0 1
71362: PPUSH
71363: LD_VAR 0 2
71367: PPUSH
71368: LD_VAR 0 3
71372: PPUSH
71373: LD_VAR 0 4
71377: PPUSH
71378: LD_VAR 0 5
71382: PPUSH
71383: LD_VAR 0 6
71387: PPUSH
71388: CALL 8896 0 6
// end ;
71392: PPOPN 6
71394: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71395: LD_INT 0
71397: PPUSH
// begin if not units then
71398: LD_VAR 0 1
71402: NOT
71403: IFFALSE 71407
// exit ;
71405: GO 71407
// end ;
71407: PPOPN 7
71409: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71410: CALL 8800 0 0
// end ;
71414: PPOPN 1
71416: END
