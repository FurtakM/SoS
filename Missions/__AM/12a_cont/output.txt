// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9595 0 0
// PrepareAlliance ;
  19: CALL 352 0 0
// PrepareFriends ;
  23: CALL 3833 0 0
// PrepareAmerican ;
  27: CALL 793 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 17
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 15
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9931 0 0
// PreparePatrol ;
 117: CALL 1417 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert , def_counter ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 1 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 1
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// def_counter := 0 ;
 243: LD_ADDR_EXP 14
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// end ;
 251: LD_VAR 0 1
 255: RET
// every 0 0$1 trigger on_hill do
 256: LD_EXP 7
 260: IFFALSE 272
 262: GO 264
 264: DISABLE
// SetAchievement ( ACH_EYE ) ;
 265: LD_STRING ACH_EYE
 267: PPUSH
 268: CALL_OW 543
 272: END
// every 0 0$1 trigger not invis_used do var i ;
 273: LD_EXP 12
 277: NOT
 278: IFFALSE 349
 280: GO 282
 282: DISABLE
 283: LD_INT 0
 285: PPUSH
// begin enable ;
 286: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 287: LD_ADDR_VAR 0 1
 291: PUSH
 292: LD_INT 22
 294: PUSH
 295: LD_INT 7
 297: PUSH
 298: EMPTY
 299: LIST
 300: LIST
 301: PUSH
 302: LD_INT 21
 304: PUSH
 305: LD_INT 1
 307: PUSH
 308: EMPTY
 309: LIST
 310: LIST
 311: PUSH
 312: EMPTY
 313: LIST
 314: LIST
 315: PPUSH
 316: CALL_OW 69
 320: PUSH
 321: FOR_IN
 322: IFFALSE 347
// if IsInvisible ( i ) then
 324: LD_VAR 0 1
 328: PPUSH
 329: CALL_OW 571
 333: IFFALSE 345
// begin invis_used := true ;
 335: LD_ADDR_EXP 12
 339: PUSH
 340: LD_INT 1
 342: ST_TO_ADDR
// break ;
 343: GO 347
// end ;
 345: GO 321
 347: POP
 348: POP
// end ; end_of_file
 349: PPOPN 1
 351: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 352: LD_INT 0
 354: PPUSH
 355: PPUSH
// uc_side := 7 ;
 356: LD_ADDR_OWVAR 20
 360: PUSH
 361: LD_INT 7
 363: ST_TO_ADDR
// uc_nation := 1 ;
 364: LD_ADDR_OWVAR 21
 368: PUSH
 369: LD_INT 1
 371: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 372: LD_ADDR_EXP 15
 376: PUSH
 377: LD_STRING JMM
 379: PPUSH
 380: LD_EXP 1
 384: NOT
 385: PPUSH
 386: LD_STRING 11_
 388: PPUSH
 389: CALL 38348 0 3
 393: ST_TO_ADDR
// uc_side := 4 ;
 394: LD_ADDR_OWVAR 20
 398: PUSH
 399: LD_INT 4
 401: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 402: LD_ADDR_EXP 16
 406: PUSH
 407: LD_STRING Roth
 409: PPUSH
 410: CALL_OW 25
 414: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 415: LD_EXP 15
 419: PPUSH
 420: LD_INT 1
 422: PPUSH
 423: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 427: LD_EXP 15
 431: PPUSH
 432: LD_INT 1
 434: PPUSH
 435: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 439: LD_EXP 15
 443: PPUSH
 444: LD_INT 105
 446: PPUSH
 447: LD_INT 10
 449: PPUSH
 450: LD_INT 0
 452: PPUSH
 453: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 457: LD_EXP 16
 461: PPUSH
 462: LD_INT 4
 464: PPUSH
 465: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 469: LD_EXP 16
 473: PPUSH
 474: LD_INT 109
 476: PPUSH
 477: LD_INT 10
 479: PPUSH
 480: LD_INT 0
 482: PPUSH
 483: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 487: LD_EXP 15
 491: PPUSH
 492: LD_EXP 16
 496: PPUSH
 497: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 501: LD_EXP 16
 505: PPUSH
 506: LD_EXP 15
 510: PPUSH
 511: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 515: LD_INT 3
 517: PPUSH
 518: LD_INT 3
 520: PPUSH
 521: LD_INT 3
 523: PPUSH
 524: LD_INT 12
 526: PPUSH
 527: LD_INT 100
 529: PPUSH
 530: CALL 43368 0 5
// cargo := CreateVehicle ;
 534: LD_ADDR_VAR 0 2
 538: PUSH
 539: CALL_OW 45
 543: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 544: LD_VAR 0 2
 548: PPUSH
 549: LD_INT 1
 551: PPUSH
 552: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 556: LD_VAR 0 2
 560: PPUSH
 561: LD_INT 179
 563: PPUSH
 564: LD_INT 45
 566: PPUSH
 567: LD_INT 0
 569: PPUSH
 570: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 574: LD_VAR 0 2
 578: PPUSH
 579: LD_INT 4
 581: PPUSH
 582: LD_INT 30
 584: PPUSH
 585: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 589: LD_STRING 11_artifact_captured
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 30
 599: IFFALSE 656
// begin cargo := CreateVehicle ;
 601: LD_ADDR_VAR 0 2
 605: PUSH
 606: CALL_OW 45
 610: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 611: LD_VAR 0 2
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_INT 171
 630: PPUSH
 631: LD_INT 85
 633: PPUSH
 634: LD_INT 0
 636: PPUSH
 637: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 641: LD_VAR 0 2
 645: PPUSH
 646: LD_INT 4
 648: PPUSH
 649: LD_INT 50
 651: PPUSH
 652: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 656: LD_INT 47
 658: PPUSH
 659: LD_INT 7
 661: PPUSH
 662: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 666: LD_INT 1
 668: PPUSH
 669: LD_INT 47
 671: PPUSH
 672: CALL_OW 471
// end ;
 676: LD_VAR 0 1
 680: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 681: LD_INT 38
 683: PPUSH
 684: LD_INT 22
 686: PUSH
 687: LD_INT 7
 689: PUSH
 690: EMPTY
 691: LIST
 692: LIST
 693: PPUSH
 694: CALL_OW 70
 698: IFFALSE 707
 700: PUSH
 701: LD_EXP 7
 705: NOT
 706: AND
 707: IFFALSE 738
 709: GO 711
 711: DISABLE
// begin enable ;
 712: ENABLE
// on_hill := true ;
 713: LD_ADDR_EXP 7
 717: PUSH
 718: LD_INT 1
 720: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 721: LD_INT 126
 723: PPUSH
 724: LD_INT 13
 726: PPUSH
 727: LD_INT 7
 729: PPUSH
 730: LD_INT 90
 732: NEG
 733: PPUSH
 734: CALL_OW 330
// end ;
 738: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 739: LD_INT 38
 741: PPUSH
 742: LD_INT 22
 744: PUSH
 745: LD_INT 7
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: PPUSH
 752: CALL_OW 70
 756: NOT
 757: IFFALSE 765
 759: PUSH
 760: LD_EXP 7
 764: AND
 765: IFFALSE 792
 767: GO 769
 769: DISABLE
// begin enable ;
 770: ENABLE
// on_hill := false ;
 771: LD_ADDR_EXP 7
 775: PUSH
 776: LD_INT 0
 778: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 779: LD_INT 126
 781: PPUSH
 782: LD_INT 13
 784: PPUSH
 785: LD_INT 7
 787: PPUSH
 788: CALL_OW 331
// end ; end_of_file
 792: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 793: LD_INT 0
 795: PPUSH
 796: PPUSH
 797: PPUSH
 798: PPUSH
 799: PPUSH
 800: PPUSH
// if Difficulty = 1 then
 801: LD_OWVAR 67
 805: PUSH
 806: LD_INT 1
 808: EQUAL
 809: IFFALSE 917
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 811: LD_ADDR_VAR 0 6
 815: PUSH
 816: LD_INT 155
 818: PUSH
 819: LD_INT 77
 821: PUSH
 822: EMPTY
 823: LIST
 824: LIST
 825: PUSH
 826: LD_INT 193
 828: PUSH
 829: LD_INT 93
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: PUSH
 836: LD_INT 188
 838: PUSH
 839: LD_INT 81
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: PUSH
 846: LD_INT 56
 848: PUSH
 849: LD_INT 85
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: PUSH
 856: LD_INT 98
 858: PUSH
 859: LD_INT 87
 861: PUSH
 862: EMPTY
 863: LIST
 864: LIST
 865: PUSH
 866: EMPTY
 867: LIST
 868: LIST
 869: LIST
 870: LIST
 871: LIST
 872: ST_TO_ADDR
// for i in tmp do
 873: LD_ADDR_VAR 0 2
 877: PUSH
 878: LD_VAR 0 6
 882: PUSH
 883: FOR_IN
 884: IFFALSE 915
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 886: LD_VAR 0 2
 890: PUSH
 891: LD_INT 1
 893: ARRAY
 894: PPUSH
 895: LD_VAR 0 2
 899: PUSH
 900: LD_INT 2
 902: ARRAY
 903: PPUSH
 904: CALL_OW 428
 908: PPUSH
 909: CALL_OW 64
 913: GO 883
 915: POP
 916: POP
// end ; defcon := 0 ;
 917: LD_ADDR_EXP 22
 921: PUSH
 922: LD_INT 0
 924: ST_TO_ADDR
// defcon_wave := 0 ;
 925: LD_ADDR_EXP 23
 929: PUSH
 930: LD_INT 0
 932: ST_TO_ADDR
// defenders := [ ] ;
 933: LD_ADDR_EXP 21
 937: PUSH
 938: EMPTY
 939: ST_TO_ADDR
// SetBName ( alfa , alfa ) ;
 940: LD_INT 5
 942: PPUSH
 943: LD_STRING alfa
 945: PPUSH
 946: CALL_OW 500
// uc_side := 1 ;
 950: LD_ADDR_OWVAR 20
 954: PUSH
 955: LD_INT 1
 957: ST_TO_ADDR
// uc_nation := 1 ;
 958: LD_ADDR_OWVAR 21
 962: PUSH
 963: LD_INT 1
 965: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 966: LD_ADDR_EXP 17
 970: PUSH
 971: LD_STRING Powell
 973: PPUSH
 974: CALL_OW 25
 978: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 979: LD_EXP 17
 983: PPUSH
 984: LD_INT 110
 986: PPUSH
 987: LD_INT 26
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 48
// ComHold ( Powell ) ;
 997: LD_EXP 17
1001: PPUSH
1002: CALL_OW 140
// for i := 1 to 5 do
1006: LD_ADDR_VAR 0 2
1010: PUSH
1011: DOUBLE
1012: LD_INT 1
1014: DEC
1015: ST_TO_ADDR
1016: LD_INT 5
1018: PUSH
1019: FOR_TO
1020: IFFALSE 1076
// begin PrepareHuman ( false , 1 , 10 ) ;
1022: LD_INT 0
1024: PPUSH
1025: LD_INT 1
1027: PPUSH
1028: LD_INT 10
1030: PPUSH
1031: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1035: LD_ADDR_EXP 20
1039: PUSH
1040: LD_EXP 20
1044: PPUSH
1045: LD_INT 1
1047: PPUSH
1048: CALL_OW 44
1052: PPUSH
1053: CALL_OW 2
1057: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1058: LD_EXP 20
1062: PUSH
1063: LD_INT 1
1065: ARRAY
1066: PPUSH
1067: LD_INT 18
1069: PPUSH
1070: CALL_OW 52
// end ;
1074: GO 1019
1076: POP
1077: POP
// if Difficulty > 1 then
1078: LD_OWVAR 67
1082: PUSH
1083: LD_INT 1
1085: GREATER
1086: IFFALSE 1237
// begin tmp := [ [ 81 , 33 ] , [ 134 , 114 ] , [ 193 , 102 ] ] ;
1088: LD_ADDR_VAR 0 6
1092: PUSH
1093: LD_INT 81
1095: PUSH
1096: LD_INT 33
1098: PUSH
1099: EMPTY
1100: LIST
1101: LIST
1102: PUSH
1103: LD_INT 134
1105: PUSH
1106: LD_INT 114
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 193
1115: PUSH
1116: LD_INT 102
1118: PUSH
1119: EMPTY
1120: LIST
1121: LIST
1122: PUSH
1123: EMPTY
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// for i := 1 to Difficulty - 1 do
1128: LD_ADDR_VAR 0 2
1132: PUSH
1133: DOUBLE
1134: LD_INT 1
1136: DEC
1137: ST_TO_ADDR
1138: LD_OWVAR 67
1142: PUSH
1143: LD_INT 1
1145: MINUS
1146: PUSH
1147: FOR_TO
1148: IFFALSE 1235
// begin PrepareSoldier ( false , 10 ) ;
1150: LD_INT 0
1152: PPUSH
1153: LD_INT 10
1155: PPUSH
1156: CALL_OW 381
// un := CreateHuman ;
1160: LD_ADDR_VAR 0 5
1164: PUSH
1165: CALL_OW 44
1169: ST_TO_ADDR
// SetClass ( un , class_sniper ) ;
1170: LD_VAR 0 5
1174: PPUSH
1175: LD_INT 5
1177: PPUSH
1178: CALL_OW 336
// PlaceUnitXY ( un , tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , false ) ;
1182: LD_VAR 0 5
1186: PPUSH
1187: LD_VAR 0 6
1191: PUSH
1192: LD_VAR 0 2
1196: ARRAY
1197: PUSH
1198: LD_INT 1
1200: ARRAY
1201: PPUSH
1202: LD_VAR 0 6
1206: PUSH
1207: LD_VAR 0 2
1211: ARRAY
1212: PUSH
1213: LD_INT 2
1215: ARRAY
1216: PPUSH
1217: LD_INT 0
1219: PPUSH
1220: CALL_OW 48
// ComHold ( un ) ;
1224: LD_VAR 0 5
1228: PPUSH
1229: CALL_OW 140
// end ;
1233: GO 1147
1235: POP
1236: POP
// end ; if Difficulty > 2 then
1237: LD_OWVAR 67
1241: PUSH
1242: LD_INT 2
1244: GREATER
1245: IFFALSE 1294
// begin bc_type := b_turret ;
1247: LD_ADDR_OWVAR 42
1251: PUSH
1252: LD_INT 33
1254: ST_TO_ADDR
// bc_level := 7 ;
1255: LD_ADDR_OWVAR 43
1259: PUSH
1260: LD_INT 7
1262: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1263: LD_ADDR_VAR 0 4
1267: PUSH
1268: LD_INT 107
1270: PPUSH
1271: LD_INT 55
1273: PPUSH
1274: LD_INT 5
1276: PPUSH
1277: CALL_OW 47
1281: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1282: LD_VAR 0 4
1286: PPUSH
1287: LD_INT 7
1289: PPUSH
1290: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1294: LD_ADDR_VAR 0 2
1298: PUSH
1299: LD_INT 22
1301: PUSH
1302: LD_INT 1
1304: PUSH
1305: EMPTY
1306: LIST
1307: LIST
1308: PUSH
1309: LD_INT 30
1311: PUSH
1312: LD_INT 3
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: EMPTY
1320: LIST
1321: LIST
1322: PPUSH
1323: CALL_OW 69
1327: PUSH
1328: LD_INT 22
1330: PUSH
1331: LD_INT 1
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: LD_INT 30
1340: PUSH
1341: LD_INT 36
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PPUSH
1352: CALL_OW 69
1356: ADD
1357: PUSH
1358: FOR_IN
1359: IFFALSE 1410
// for j = 1 to 3 do
1361: LD_ADDR_VAR 0 3
1365: PUSH
1366: DOUBLE
1367: LD_INT 1
1369: DEC
1370: ST_TO_ADDR
1371: LD_INT 3
1373: PUSH
1374: FOR_TO
1375: IFFALSE 1406
// begin PrepareHuman ( false , 3 , 6 ) ;
1377: LD_INT 0
1379: PPUSH
1380: LD_INT 3
1382: PPUSH
1383: LD_INT 6
1385: PPUSH
1386: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1390: CALL_OW 44
1394: PPUSH
1395: LD_VAR 0 2
1399: PPUSH
1400: CALL_OW 52
// end ;
1404: GO 1374
1406: POP
1407: POP
1408: GO 1358
1410: POP
1411: POP
// end ;
1412: LD_VAR 0 1
1416: RET
// export function PreparePatrol ; var i , un ; begin
1417: LD_INT 0
1419: PPUSH
1420: PPUSH
1421: PPUSH
// uc_side := 1 ;
1422: LD_ADDR_OWVAR 20
1426: PUSH
1427: LD_INT 1
1429: ST_TO_ADDR
// uc_nation := 1 ;
1430: LD_ADDR_OWVAR 21
1434: PUSH
1435: LD_INT 1
1437: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1438: LD_ADDR_EXP 19
1442: PUSH
1443: LD_INT 99
1445: PUSH
1446: LD_INT 55
1448: PUSH
1449: EMPTY
1450: LIST
1451: LIST
1452: PUSH
1453: LD_INT 113
1455: PUSH
1456: LD_INT 67
1458: PUSH
1459: EMPTY
1460: LIST
1461: LIST
1462: PUSH
1463: LD_INT 129
1465: PUSH
1466: LD_INT 68
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: PUSH
1473: LD_INT 135
1475: PUSH
1476: LD_INT 62
1478: PUSH
1479: EMPTY
1480: LIST
1481: LIST
1482: PUSH
1483: LD_INT 103
1485: PUSH
1486: LD_INT 41
1488: PUSH
1489: EMPTY
1490: LIST
1491: LIST
1492: PUSH
1493: EMPTY
1494: LIST
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 27
1502: PUSH
1503: LD_INT 49
1505: PUSH
1506: EMPTY
1507: LIST
1508: LIST
1509: PUSH
1510: LD_INT 46
1512: PUSH
1513: LD_INT 49
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PUSH
1520: LD_INT 87
1522: PUSH
1523: LD_INT 70
1525: PUSH
1526: EMPTY
1527: LIST
1528: LIST
1529: PUSH
1530: LD_INT 99
1532: PUSH
1533: LD_INT 79
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: PUSH
1540: LD_INT 118
1542: PUSH
1543: LD_INT 111
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: PUSH
1550: LD_INT 99
1552: PUSH
1553: LD_INT 79
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: PUSH
1560: LD_INT 87
1562: PUSH
1563: LD_INT 70
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PUSH
1570: LD_INT 46
1572: PUSH
1573: LD_INT 49
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: LIST
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: PUSH
1590: LD_INT 200
1592: PUSH
1593: LD_INT 88
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: PUSH
1600: LD_INT 175
1602: PUSH
1603: LD_INT 80
1605: PUSH
1606: EMPTY
1607: LIST
1608: LIST
1609: PUSH
1610: LD_INT 135
1612: PUSH
1613: LD_INT 62
1615: PUSH
1616: EMPTY
1617: LIST
1618: LIST
1619: PUSH
1620: LD_INT 117
1622: PUSH
1623: LD_INT 53
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PUSH
1630: LD_INT 103
1632: PUSH
1633: LD_INT 41
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: PUSH
1640: LD_INT 99
1642: PUSH
1643: LD_INT 24
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PUSH
1650: LD_INT 85
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 99
1662: PUSH
1663: LD_INT 24
1665: PUSH
1666: EMPTY
1667: LIST
1668: LIST
1669: PUSH
1670: LD_INT 103
1672: PUSH
1673: LD_INT 41
1675: PUSH
1676: EMPTY
1677: LIST
1678: LIST
1679: PUSH
1680: LD_INT 98
1682: PUSH
1683: LD_INT 47
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: PUSH
1690: LD_INT 99
1692: PUSH
1693: LD_INT 56
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: PUSH
1700: LD_INT 96
1702: PUSH
1703: LD_INT 66
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: PUSH
1710: LD_INT 99
1712: PUSH
1713: LD_INT 56
1715: PUSH
1716: EMPTY
1717: LIST
1718: LIST
1719: PUSH
1720: LD_INT 112
1722: PUSH
1723: LD_INT 66
1725: PUSH
1726: EMPTY
1727: LIST
1728: LIST
1729: PUSH
1730: LD_INT 129
1732: PUSH
1733: LD_INT 68
1735: PUSH
1736: EMPTY
1737: LIST
1738: LIST
1739: PUSH
1740: LD_INT 135
1742: PUSH
1743: LD_INT 62
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: PUSH
1750: LD_INT 156
1752: PUSH
1753: LD_INT 71
1755: PUSH
1756: EMPTY
1757: LIST
1758: LIST
1759: PUSH
1760: LD_INT 168
1762: PUSH
1763: LD_INT 76
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PUSH
1770: LD_INT 168
1772: PUSH
1773: LD_INT 61
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PUSH
1780: LD_INT 168
1782: PUSH
1783: LD_INT 75
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PUSH
1790: LD_INT 185
1792: PUSH
1793: LD_INT 85
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: PUSH
1800: EMPTY
1801: LIST
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: LIST
1812: LIST
1813: LIST
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: LIST
1827: ST_TO_ADDR
// mobile_patrol := [ ] ;
1828: LD_ADDR_EXP 18
1832: PUSH
1833: EMPTY
1834: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1835: LD_INT 3
1837: PPUSH
1838: LD_INT 1
1840: PPUSH
1841: LD_INT 3
1843: PPUSH
1844: LD_INT 4
1846: PPUSH
1847: LD_INT 100
1849: PPUSH
1850: CALL 43368 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1854: LD_ADDR_EXP 18
1858: PUSH
1859: LD_EXP 18
1863: PPUSH
1864: LD_INT 1
1866: PPUSH
1867: CALL_OW 45
1871: PPUSH
1872: CALL_OW 2
1876: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1877: LD_EXP 18
1881: PUSH
1882: LD_INT 1
1884: ARRAY
1885: PPUSH
1886: LD_INT 99
1888: PPUSH
1889: LD_INT 55
1891: PPUSH
1892: LD_INT 0
1894: PPUSH
1895: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1899: LD_INT 2
1901: PPUSH
1902: LD_INT 1
1904: PPUSH
1905: LD_INT 3
1907: PPUSH
1908: LD_INT 4
1910: PPUSH
1911: LD_INT 100
1913: PPUSH
1914: CALL 43368 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1918: LD_ADDR_EXP 18
1922: PUSH
1923: LD_EXP 18
1927: PPUSH
1928: LD_INT 2
1930: PPUSH
1931: CALL_OW 45
1935: PPUSH
1936: CALL_OW 2
1940: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1941: LD_EXP 18
1945: PUSH
1946: LD_INT 2
1948: ARRAY
1949: PPUSH
1950: LD_INT 27
1952: PPUSH
1953: LD_INT 49
1955: PPUSH
1956: LD_INT 0
1958: PPUSH
1959: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1963: LD_INT 3
1965: PPUSH
1966: LD_INT 1
1968: PPUSH
1969: LD_INT 3
1971: PPUSH
1972: LD_INT 9
1974: PUSH
1975: LD_INT 7
1977: PUSH
1978: LD_INT 7
1980: PUSH
1981: LD_INT 7
1983: PUSH
1984: EMPTY
1985: LIST
1986: LIST
1987: LIST
1988: LIST
1989: PUSH
1990: LD_OWVAR 67
1994: ARRAY
1995: PPUSH
1996: LD_INT 100
1998: PPUSH
1999: CALL 43368 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
2003: LD_ADDR_EXP 18
2007: PUSH
2008: LD_EXP 18
2012: PPUSH
2013: LD_INT 3
2015: PPUSH
2016: CALL_OW 45
2020: PPUSH
2021: CALL_OW 2
2025: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
2026: LD_EXP 18
2030: PUSH
2031: LD_INT 3
2033: ARRAY
2034: PPUSH
2035: LD_INT 200
2037: PPUSH
2038: LD_INT 88
2040: PPUSH
2041: LD_INT 0
2043: PPUSH
2044: CALL_OW 48
// for i := mobile_patrol downto 1 do
2048: LD_ADDR_VAR 0 2
2052: PUSH
2053: DOUBLE
2054: LD_EXP 18
2058: INC
2059: ST_TO_ADDR
2060: LD_INT 1
2062: PUSH
2063: FOR_DOWNTO
2064: IFFALSE 2075
// RaiseSailEvent ( 1 ) ;
2066: LD_INT 1
2068: PPUSH
2069: CALL_OW 427
2073: GO 2063
2075: POP
2076: POP
// end ;
2077: LD_VAR 0 1
2081: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
2082: LD_INT 0
2084: PPUSH
2085: PPUSH
2086: PPUSH
2087: PPUSH
2088: PPUSH
2089: PPUSH
2090: PPUSH
2091: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
2092: LD_ADDR_VAR 0 5
2096: PUSH
2097: LD_INT 20
2099: PUSH
2100: LD_INT 4
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 21
2109: PUSH
2110: LD_INT 5
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 22
2119: PUSH
2120: LD_INT 1
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
2132: LD_ADDR_VAR 0 6
2136: PUSH
2137: LD_INT 176
2139: PUSH
2140: LD_INT 81
2142: PUSH
2143: LD_INT 135
2145: PUSH
2146: LD_INT 62
2148: PUSH
2149: LD_INT 114
2151: PUSH
2152: LD_INT 67
2154: PUSH
2155: LD_INT 93
2157: PUSH
2158: LD_INT 71
2160: PUSH
2161: LD_INT 76
2163: PUSH
2164: LD_INT 67
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: PUSH
2179: LD_INT 107
2181: PUSH
2182: LD_INT 92
2184: PUSH
2185: LD_INT 92
2187: PUSH
2188: LD_INT 72
2190: PUSH
2191: LD_INT 77
2193: PUSH
2194: LD_INT 68
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: LIST
2203: LIST
2204: PUSH
2205: LD_INT 45
2207: PUSH
2208: LD_INT 49
2210: PUSH
2211: LD_INT 67
2213: PUSH
2214: LD_INT 59
2216: PUSH
2217: LD_INT 77
2219: PUSH
2220: LD_INT 68
2222: PUSH
2223: EMPTY
2224: LIST
2225: LIST
2226: LIST
2227: LIST
2228: LIST
2229: LIST
2230: PUSH
2231: EMPTY
2232: LIST
2233: LIST
2234: LIST
2235: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2236: LD_ADDR_VAR 0 4
2240: PUSH
2241: LD_INT 1
2243: PPUSH
2244: LD_VAR 0 5
2248: PPUSH
2249: CALL_OW 12
2253: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2254: LD_ADDR_VAR 0 3
2258: PUSH
2259: LD_INT 1
2261: PPUSH
2262: LD_INT 2
2264: PPUSH
2265: CALL_OW 12
2269: ST_TO_ADDR
// uc_side := 1 ;
2270: LD_ADDR_OWVAR 20
2274: PUSH
2275: LD_INT 1
2277: ST_TO_ADDR
// uc_nation := 1 ;
2278: LD_ADDR_OWVAR 21
2282: PUSH
2283: LD_INT 1
2285: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2286: LD_INT 2
2288: PPUSH
2289: LD_INT 3
2291: PPUSH
2292: LD_INT 3
2294: PPUSH
2295: LD_INT 12
2297: PPUSH
2298: LD_INT 100
2300: PPUSH
2301: CALL 43368 0 5
// veh := CreateVehicle ;
2305: LD_ADDR_VAR 0 8
2309: PUSH
2310: CALL_OW 45
2314: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2315: LD_VAR 0 8
2319: PPUSH
2320: LD_VAR 0 5
2324: PUSH
2325: LD_VAR 0 4
2329: ARRAY
2330: PUSH
2331: LD_INT 2
2333: ARRAY
2334: PPUSH
2335: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2339: LD_VAR 0 8
2343: PPUSH
2344: LD_VAR 0 5
2348: PUSH
2349: LD_VAR 0 4
2353: ARRAY
2354: PUSH
2355: LD_INT 1
2357: ARRAY
2358: PPUSH
2359: LD_INT 0
2361: PPUSH
2362: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2366: LD_VAR 0 8
2370: PPUSH
2371: LD_INT 1
2373: PUSH
2374: LD_INT 3
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: PUSH
2381: LD_VAR 0 3
2385: ARRAY
2386: PPUSH
2387: LD_INT 100
2389: PPUSH
2390: CALL_OW 290
// tmp := road [ k ] ;
2394: LD_ADDR_VAR 0 7
2398: PUSH
2399: LD_VAR 0 6
2403: PUSH
2404: LD_VAR 0 4
2408: ARRAY
2409: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2410: LD_ADDR_VAR 0 2
2414: PUSH
2415: DOUBLE
2416: LD_INT 1
2418: DEC
2419: ST_TO_ADDR
2420: LD_VAR 0 7
2424: PUSH
2425: LD_INT 2
2427: DIV
2428: PUSH
2429: FOR_TO
2430: IFFALSE 2477
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2432: LD_VAR 0 8
2436: PPUSH
2437: LD_VAR 0 7
2441: PUSH
2442: LD_VAR 0 2
2446: PUSH
2447: LD_INT 2
2449: MUL
2450: PUSH
2451: LD_INT 1
2453: MINUS
2454: ARRAY
2455: PPUSH
2456: LD_VAR 0 7
2460: PUSH
2461: LD_VAR 0 2
2465: PUSH
2466: LD_INT 2
2468: MUL
2469: ARRAY
2470: PPUSH
2471: CALL_OW 171
2475: GO 2429
2477: POP
2478: POP
// AddComGive ( veh , alfa ) ;
2479: LD_VAR 0 8
2483: PPUSH
2484: LD_INT 5
2486: PPUSH
2487: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2491: LD_VAR 0 8
2495: PPUSH
2496: LD_INT 70
2498: PPUSH
2499: CALL_OW 202
// for i = tmp div 2 downto 1 do
2503: LD_ADDR_VAR 0 2
2507: PUSH
2508: DOUBLE
2509: LD_VAR 0 7
2513: PUSH
2514: LD_INT 2
2516: DIV
2517: INC
2518: ST_TO_ADDR
2519: LD_INT 1
2521: PUSH
2522: FOR_DOWNTO
2523: IFFALSE 2570
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2525: LD_VAR 0 8
2529: PPUSH
2530: LD_VAR 0 7
2534: PUSH
2535: LD_VAR 0 2
2539: PUSH
2540: LD_INT 2
2542: MUL
2543: PUSH
2544: LD_INT 1
2546: MINUS
2547: ARRAY
2548: PPUSH
2549: LD_VAR 0 7
2553: PUSH
2554: LD_VAR 0 2
2558: PUSH
2559: LD_INT 2
2561: MUL
2562: ARRAY
2563: PPUSH
2564: CALL_OW 171
2568: GO 2522
2570: POP
2571: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2572: LD_VAR 0 8
2576: PPUSH
2577: LD_VAR 0 5
2581: PUSH
2582: LD_VAR 0 4
2586: ARRAY
2587: PUSH
2588: LD_INT 1
2590: ARRAY
2591: PPUSH
2592: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2596: LD_INT 35
2598: PPUSH
2599: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2603: LD_VAR 0 8
2607: PPUSH
2608: LD_VAR 0 5
2612: PUSH
2613: LD_VAR 0 4
2617: ARRAY
2618: PUSH
2619: LD_INT 1
2621: ARRAY
2622: PPUSH
2623: CALL_OW 308
2627: IFFALSE 2649
2629: PUSH
2630: LD_VAR 0 8
2634: PPUSH
2635: LD_VAR 0 3
2639: PPUSH
2640: CALL_OW 289
2644: PUSH
2645: LD_INT 0
2647: EQUAL
2648: AND
2649: IFFALSE 2596
// RemoveUnit ( veh ) ;
2651: LD_VAR 0 8
2655: PPUSH
2656: CALL_OW 64
// end ;
2660: LD_VAR 0 1
2664: RET
// every 3 3$00 do
2665: GO 2667
2667: DISABLE
// begin enable ;
2668: ENABLE
// SpawnCargo ;
2669: CALL 2082 0 0
// end ;
2673: END
// export function PrepareDefenders ; var i , tmp ; begin
2674: LD_INT 0
2676: PPUSH
2677: PPUSH
2678: PPUSH
// if defenders then
2679: LD_EXP 21
2683: IFFALSE 2687
// exit ;
2685: GO 2959
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2687: LD_ADDR_VAR 0 2
2691: PUSH
2692: DOUBLE
2693: LD_INT 1
2695: DEC
2696: ST_TO_ADDR
2697: LD_INT 4
2699: PUSH
2700: LD_INT 5
2702: PUSH
2703: LD_INT 6
2705: PUSH
2706: LD_INT 7
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: LIST
2713: LIST
2714: PUSH
2715: LD_OWVAR 67
2719: ARRAY
2720: PUSH
2721: FOR_TO
2722: IFFALSE 2861
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2724: LD_ADDR_VAR 0 3
2728: PUSH
2729: LD_INT 6
2731: PPUSH
2732: LD_INT 2
2734: PUSH
2735: LD_INT 3
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: PUSH
2742: LD_INT 1
2744: PPUSH
2745: LD_INT 2
2747: PPUSH
2748: CALL_OW 12
2752: ARRAY
2753: PPUSH
2754: LD_INT 1
2756: PUSH
2757: LD_INT 3
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: PUSH
2764: LD_INT 1
2766: PPUSH
2767: LD_INT 2
2769: PPUSH
2770: CALL_OW 12
2774: ARRAY
2775: PPUSH
2776: LD_INT 2
2778: PPUSH
2779: LD_INT 4
2781: PUSH
2782: LD_INT 5
2784: PUSH
2785: LD_INT 9
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: LIST
2792: PUSH
2793: LD_INT 1
2795: PPUSH
2796: LD_INT 3
2798: PPUSH
2799: CALL_OW 12
2803: ARRAY
2804: PPUSH
2805: CALL 40930 0 5
2809: ST_TO_ADDR
// if tmp then
2810: LD_VAR 0 3
2814: IFFALSE 2859
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2816: LD_INT 6
2818: PPUSH
2819: LD_VAR 0 3
2823: PUSH
2824: LD_INT 1
2826: ARRAY
2827: PPUSH
2828: LD_VAR 0 3
2832: PUSH
2833: LD_INT 2
2835: ARRAY
2836: PPUSH
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 3
2844: ARRAY
2845: PPUSH
2846: LD_VAR 0 3
2850: PUSH
2851: LD_INT 4
2853: ARRAY
2854: PPUSH
2855: CALL_OW 185
// end ;
2859: GO 2721
2861: POP
2862: POP
// repeat wait ( 0 0$1 ) ;
2863: LD_INT 35
2865: PPUSH
2866: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2870: LD_INT 22
2872: PUSH
2873: LD_INT 1
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: LD_INT 33
2882: PUSH
2883: LD_INT 2
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PPUSH
2894: CALL_OW 69
2898: PUSH
2899: LD_INT 4
2901: PUSH
2902: LD_INT 5
2904: PUSH
2905: LD_INT 6
2907: PUSH
2908: LD_INT 7
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: PUSH
2917: LD_OWVAR 67
2921: ARRAY
2922: GREATEREQUAL
2923: IFFALSE 2863
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2925: LD_ADDR_EXP 21
2929: PUSH
2930: LD_INT 22
2932: PUSH
2933: LD_INT 1
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: PUSH
2940: LD_INT 33
2942: PUSH
2943: LD_INT 2
2945: PUSH
2946: EMPTY
2947: LIST
2948: LIST
2949: PUSH
2950: EMPTY
2951: LIST
2952: LIST
2953: PPUSH
2954: CALL_OW 69
2958: ST_TO_ADDR
// end ;
2959: LD_VAR 0 1
2963: RET
// export function Defend ; var i , un , veh , tmp ; begin
2964: LD_INT 0
2966: PPUSH
2967: PPUSH
2968: PPUSH
2969: PPUSH
2970: PPUSH
// defcon_wave := defcon_wave + 1 ;
2971: LD_ADDR_EXP 23
2975: PUSH
2976: LD_EXP 23
2980: PUSH
2981: LD_INT 1
2983: PLUS
2984: ST_TO_ADDR
// if not defenders then
2985: LD_EXP 21
2989: NOT
2990: IFFALSE 2996
// PrepareDefenders ;
2992: CALL 2674 0 0
// if defcon_wave > 1 then
2996: LD_EXP 23
3000: PUSH
3001: LD_INT 1
3003: GREATER
3004: IFFALSE 3262
// begin for i = 1 to defcon_wave + 2 do
3006: LD_ADDR_VAR 0 2
3010: PUSH
3011: DOUBLE
3012: LD_INT 1
3014: DEC
3015: ST_TO_ADDR
3016: LD_EXP 23
3020: PUSH
3021: LD_INT 2
3023: PLUS
3024: PUSH
3025: FOR_TO
3026: IFFALSE 3168
// begin uc_side := 1 ;
3028: LD_ADDR_OWVAR 20
3032: PUSH
3033: LD_INT 1
3035: ST_TO_ADDR
// uc_nation := 1 ;
3036: LD_ADDR_OWVAR 21
3040: PUSH
3041: LD_INT 1
3043: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
3044: LD_INT 4
3046: PPUSH
3047: LD_INT 3
3049: PPUSH
3050: LD_INT 1
3052: PPUSH
3053: LD_INT 4
3055: PUSH
3056: LD_INT 6
3058: PUSH
3059: LD_INT 7
3061: PUSH
3062: EMPTY
3063: LIST
3064: LIST
3065: LIST
3066: PUSH
3067: LD_INT 1
3069: PPUSH
3070: LD_INT 3
3072: PPUSH
3073: CALL_OW 12
3077: ARRAY
3078: PPUSH
3079: LD_INT 100
3081: PPUSH
3082: CALL 43368 0 5
// veh := CreateVehicle ;
3086: LD_ADDR_VAR 0 4
3090: PUSH
3091: CALL_OW 45
3095: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
3096: LD_VAR 0 4
3100: PPUSH
3101: LD_INT 1
3103: PPUSH
3104: CALL_OW 233
// defenders := defenders ^ veh ;
3108: LD_ADDR_EXP 21
3112: PUSH
3113: LD_EXP 21
3117: PUSH
3118: LD_VAR 0 4
3122: ADD
3123: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
3124: LD_INT 0
3126: PPUSH
3127: LD_INT 3
3129: PPUSH
3130: LD_INT 9
3132: PPUSH
3133: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
3137: CALL_OW 44
3141: PPUSH
3142: LD_VAR 0 4
3146: PPUSH
3147: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
3151: LD_VAR 0 4
3155: PPUSH
3156: LD_INT 25
3158: PPUSH
3159: LD_INT 0
3161: PPUSH
3162: CALL_OW 49
// end ;
3166: GO 3025
3168: POP
3169: POP
// for i = 1 to defcon_wave do
3170: LD_ADDR_VAR 0 2
3174: PUSH
3175: DOUBLE
3176: LD_INT 1
3178: DEC
3179: ST_TO_ADDR
3180: LD_EXP 23
3184: PUSH
3185: FOR_TO
3186: IFFALSE 3260
// begin uc_side := 1 ;
3188: LD_ADDR_OWVAR 20
3192: PUSH
3193: LD_INT 1
3195: ST_TO_ADDR
// uc_nation := 1 ;
3196: LD_ADDR_OWVAR 21
3200: PUSH
3201: LD_INT 1
3203: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3204: LD_INT 0
3206: PPUSH
3207: LD_INT 5
3209: PPUSH
3210: LD_INT 9
3212: PPUSH
3213: CALL_OW 380
// un := CreateHuman ;
3217: LD_ADDR_VAR 0 3
3221: PUSH
3222: CALL_OW 44
3226: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3227: LD_VAR 0 3
3231: PPUSH
3232: LD_INT 25
3234: PPUSH
3235: LD_INT 0
3237: PPUSH
3238: CALL_OW 49
// defenders := defenders ^ un ;
3242: LD_ADDR_EXP 21
3246: PUSH
3247: LD_EXP 21
3251: PUSH
3252: LD_VAR 0 3
3256: ADD
3257: ST_TO_ADDR
// end ;
3258: GO 3185
3260: POP
3261: POP
// end ; repeat wait ( 0 0$1 ) ;
3262: LD_INT 35
3264: PPUSH
3265: CALL_OW 67
// for i in defenders do
3269: LD_ADDR_VAR 0 2
3273: PUSH
3274: LD_EXP 21
3278: PUSH
3279: FOR_IN
3280: IFFALSE 3366
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3282: LD_EXP 22
3286: IFFALSE 3321
3288: PUSH
3289: LD_VAR 0 2
3293: PPUSH
3294: LD_EXP 22
3298: PUSH
3299: LD_INT 1
3301: ARRAY
3302: PPUSH
3303: LD_EXP 22
3307: PUSH
3308: LD_INT 2
3310: ARRAY
3311: PPUSH
3312: CALL_OW 297
3316: PUSH
3317: LD_INT 10
3319: GREATER
3320: AND
3321: IFFALSE 3335
3323: PUSH
3324: LD_VAR 0 2
3328: PPUSH
3329: CALL_OW 314
3333: NOT
3334: AND
3335: IFFALSE 3364
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3337: LD_VAR 0 2
3341: PPUSH
3342: LD_EXP 22
3346: PUSH
3347: LD_INT 1
3349: ARRAY
3350: PPUSH
3351: LD_EXP 22
3355: PUSH
3356: LD_INT 2
3358: ARRAY
3359: PPUSH
3360: CALL_OW 114
// end ;
3364: GO 3279
3366: POP
3367: POP
// until not defenders ;
3368: LD_EXP 21
3372: NOT
3373: IFFALSE 3262
// end ;
3375: LD_VAR 0 1
3379: RET
// every 0 0$1 do var radar , i ;
3380: GO 3382
3382: DISABLE
3383: LD_INT 0
3385: PPUSH
3386: PPUSH
// begin uc_side := 1 ;
3387: LD_ADDR_OWVAR 20
3391: PUSH
3392: LD_INT 1
3394: ST_TO_ADDR
// uc_nation := 1 ;
3395: LD_ADDR_OWVAR 21
3399: PUSH
3400: LD_INT 1
3402: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3403: LD_INT 1
3405: PPUSH
3406: LD_INT 2
3408: PPUSH
3409: LD_INT 3
3411: PPUSH
3412: LD_INT 11
3414: PPUSH
3415: LD_INT 100
3417: PPUSH
3418: CALL 43368 0 5
// radar := CreateVehicle ;
3422: LD_ADDR_VAR 0 1
3426: PUSH
3427: CALL_OW 45
3431: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3432: LD_VAR 0 1
3436: PPUSH
3437: LD_INT 4
3439: PPUSH
3440: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3444: LD_VAR 0 1
3448: PPUSH
3449: LD_INT 51
3451: PPUSH
3452: LD_INT 45
3454: PPUSH
3455: LD_INT 0
3457: PPUSH
3458: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3462: LD_VAR 0 1
3466: PPUSH
3467: LD_INT 700
3469: PPUSH
3470: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3474: LD_VAR 0 1
3478: PPUSH
3479: LD_INT 65
3481: PPUSH
3482: LD_INT 75
3484: PPUSH
3485: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3489: LD_VAR 0 1
3493: PPUSH
3494: LD_INT 350
3496: PPUSH
3497: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3501: LD_VAR 0 1
3505: PPUSH
3506: LD_INT 83
3508: PPUSH
3509: LD_INT 87
3511: PPUSH
3512: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3516: LD_VAR 0 1
3520: PPUSH
3521: LD_INT 525
3523: PPUSH
3524: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_INT 94
3535: PPUSH
3536: LD_INT 81
3538: PPUSH
3539: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3543: LD_VAR 0 1
3547: PPUSH
3548: LD_INT 350
3550: PPUSH
3551: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_INT 55
3562: PPUSH
3563: LD_INT 48
3565: PPUSH
3566: CALL_OW 171
// wait ( 1 1$00 ) ;
3570: LD_INT 2100
3572: PPUSH
3573: CALL_OW 67
// until not IsOk ( radar ) ;
3577: LD_VAR 0 1
3581: PPUSH
3582: CALL_OW 302
3586: NOT
3587: IFFALSE 3462
// end ;
3589: PPOPN 2
3591: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3592: LD_OWVAR 67
3596: PUSH
3597: LD_INT 1
3599: GREATER
3600: IFFALSE 3608
3602: PUSH
3603: LD_EXP 11
3607: AND
3608: IFFALSE 3830
3610: GO 3612
3612: DISABLE
3613: LD_INT 0
3615: PPUSH
// begin enable ;
3616: ENABLE
// uc_side := 1 ;
3617: LD_ADDR_OWVAR 20
3621: PUSH
3622: LD_INT 1
3624: ST_TO_ADDR
// uc_nation := 1 ;
3625: LD_ADDR_OWVAR 21
3629: PUSH
3630: LD_INT 1
3632: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3633: LD_INT 5
3635: PPUSH
3636: LD_INT 3
3638: PPUSH
3639: LD_INT 3
3641: PPUSH
3642: LD_INT 4
3644: PPUSH
3645: LD_INT 100
3647: PPUSH
3648: CALL 43368 0 5
// un := CreateVehicle ;
3652: LD_ADDR_VAR 0 1
3656: PUSH
3657: CALL_OW 45
3661: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3662: LD_VAR 0 1
3666: PPUSH
3667: LD_INT 3
3669: PPUSH
3670: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3674: LD_VAR 0 1
3678: PPUSH
3679: LD_INT 155
3681: PPUSH
3682: LD_INT 2
3684: PPUSH
3685: LD_INT 0
3687: PPUSH
3688: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3692: LD_VAR 0 1
3696: PPUSH
3697: LD_INT 169
3699: PPUSH
3700: LD_INT 77
3702: PPUSH
3703: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3707: LD_VAR 0 1
3711: PPUSH
3712: LD_INT 70
3714: PPUSH
3715: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3719: LD_VAR 0 1
3723: PPUSH
3724: LD_INT 134
3726: PPUSH
3727: LD_INT 62
3729: PPUSH
3730: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3734: LD_VAR 0 1
3738: PPUSH
3739: LD_INT 103
3741: PPUSH
3742: LD_INT 42
3744: PPUSH
3745: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3749: LD_VAR 0 1
3753: PPUSH
3754: LD_INT 70
3756: PPUSH
3757: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3761: LD_VAR 0 1
3765: PPUSH
3766: LD_INT 84
3768: PPUSH
3769: LD_INT 2
3771: PPUSH
3772: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3776: LD_INT 35
3778: PPUSH
3779: CALL_OW 67
// if IsDead ( un ) then
3783: LD_VAR 0 1
3787: PPUSH
3788: CALL_OW 301
3792: IFFALSE 3804
// begin extra_patrol := false ;
3794: LD_ADDR_EXP 11
3798: PUSH
3799: LD_INT 0
3801: ST_TO_ADDR
// exit ;
3802: GO 3830
// end ; until IsAt ( un , 84 , 2 ) ;
3804: LD_VAR 0 1
3808: PPUSH
3809: LD_INT 84
3811: PPUSH
3812: LD_INT 2
3814: PPUSH
3815: CALL_OW 307
3819: IFFALSE 3776
// RemoveUnit ( un ) ;
3821: LD_VAR 0 1
3825: PPUSH
3826: CALL_OW 64
// end ; end_of_file
3830: PPOPN 1
3832: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl , gammaCommander ; begin
3833: LD_INT 0
3835: PPUSH
3836: PPUSH
3837: PPUSH
3838: PPUSH
3839: PPUSH
3840: PPUSH
3841: PPUSH
3842: PPUSH
// uc_side := 4 ;
3843: LD_ADDR_OWVAR 20
3847: PUSH
3848: LD_INT 4
3850: ST_TO_ADDR
// uc_nation := 1 ;
3851: LD_ADDR_OWVAR 21
3855: PUSH
3856: LD_INT 1
3858: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3859: LD_ADDR_EXP 38
3863: PUSH
3864: LD_STRING DeltaDoctor
3866: PPUSH
3867: LD_EXP 1
3871: NOT
3872: PPUSH
3873: LD_STRING 10c_
3875: PPUSH
3876: CALL 38348 0 3
3880: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3881: LD_ADDR_EXP 37
3885: PUSH
3886: LD_STRING Joan
3888: PPUSH
3889: LD_EXP 1
3893: NOT
3894: PPUSH
3895: LD_STRING 10c_
3897: PPUSH
3898: CALL 38348 0 3
3902: ST_TO_ADDR
// if Joan then
3903: LD_EXP 37
3907: IFFALSE 3938
// friends := Insert ( friends , friends + 1 , Joan ) ;
3909: LD_ADDR_EXP 4
3913: PUSH
3914: LD_EXP 4
3918: PPUSH
3919: LD_EXP 4
3923: PUSH
3924: LD_INT 1
3926: PLUS
3927: PPUSH
3928: LD_EXP 37
3932: PPUSH
3933: CALL_OW 2
3937: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3938: LD_ADDR_EXP 36
3942: PUSH
3943: LD_STRING Simms
3945: PPUSH
3946: LD_EXP 1
3950: NOT
3951: PPUSH
3952: LD_STRING 10c_
3954: PPUSH
3955: CALL 38348 0 3
3959: ST_TO_ADDR
// if debug then
3960: LD_EXP 1
3964: IFFALSE 3981
// Kikuchi := NewCharacter ( Yamoko ) else
3966: LD_ADDR_EXP 35
3970: PUSH
3971: LD_STRING Yamoko
3973: PPUSH
3974: CALL_OW 25
3978: ST_TO_ADDR
3979: GO 4003
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3981: LD_ADDR_EXP 35
3985: PUSH
3986: LD_STRING Kikuchi
3988: PPUSH
3989: LD_EXP 1
3993: NOT
3994: PPUSH
3995: LD_STRING 11_
3997: PPUSH
3998: CALL 38348 0 3
4002: ST_TO_ADDR
// if Kikuchi then
4003: LD_EXP 35
4007: IFFALSE 4038
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
4009: LD_ADDR_EXP 4
4013: PUSH
4014: LD_EXP 4
4018: PPUSH
4019: LD_EXP 4
4023: PUSH
4024: LD_INT 1
4026: PLUS
4027: PPUSH
4028: LD_EXP 35
4032: PPUSH
4033: CALL_OW 2
4037: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
4038: LD_ADDR_EXP 34
4042: PUSH
4043: LD_STRING Frank
4045: PPUSH
4046: LD_EXP 1
4050: NOT
4051: PPUSH
4052: LD_STRING 11_
4054: PPUSH
4055: CALL 38348 0 3
4059: ST_TO_ADDR
// if Frank then
4060: LD_EXP 34
4064: IFFALSE 4095
// friends := Insert ( friends , friends + 1 , Frank ) ;
4066: LD_ADDR_EXP 4
4070: PUSH
4071: LD_EXP 4
4075: PPUSH
4076: LD_EXP 4
4080: PUSH
4081: LD_INT 1
4083: PLUS
4084: PPUSH
4085: LD_EXP 34
4089: PPUSH
4090: CALL_OW 2
4094: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
4095: LD_ADDR_EXP 33
4099: PUSH
4100: LD_STRING Gary
4102: PPUSH
4103: LD_EXP 1
4107: NOT
4108: PPUSH
4109: LD_STRING 11_
4111: PPUSH
4112: CALL 38348 0 3
4116: ST_TO_ADDR
// if Gary then
4117: LD_EXP 33
4121: IFFALSE 4152
// friends := Insert ( friends , friends + 1 , Gary ) ;
4123: LD_ADDR_EXP 4
4127: PUSH
4128: LD_EXP 4
4132: PPUSH
4133: LD_EXP 4
4137: PUSH
4138: LD_INT 1
4140: PLUS
4141: PPUSH
4142: LD_EXP 33
4146: PPUSH
4147: CALL_OW 2
4151: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
4152: LD_ADDR_EXP 32
4156: PUSH
4157: LD_STRING Cornell
4159: PPUSH
4160: LD_EXP 1
4164: NOT
4165: PPUSH
4166: LD_STRING 11_
4168: PPUSH
4169: CALL 38348 0 3
4173: ST_TO_ADDR
// if Cornel then
4174: LD_EXP 32
4178: IFFALSE 4209
// friends := Insert ( friends , friends + 1 , Cornel ) ;
4180: LD_ADDR_EXP 4
4184: PUSH
4185: LD_EXP 4
4189: PPUSH
4190: LD_EXP 4
4194: PUSH
4195: LD_INT 1
4197: PLUS
4198: PPUSH
4199: LD_EXP 32
4203: PPUSH
4204: CALL_OW 2
4208: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4209: LD_ADDR_EXP 31
4213: PUSH
4214: LD_STRING Houten
4216: PPUSH
4217: LD_EXP 1
4221: NOT
4222: PPUSH
4223: LD_STRING 11_
4225: PPUSH
4226: CALL 38348 0 3
4230: ST_TO_ADDR
// if Houten then
4231: LD_EXP 31
4235: IFFALSE 4266
// friends := Insert ( friends , friends + 1 , Houten ) ;
4237: LD_ADDR_EXP 4
4241: PUSH
4242: LD_EXP 4
4246: PPUSH
4247: LD_EXP 4
4251: PUSH
4252: LD_INT 1
4254: PLUS
4255: PPUSH
4256: LD_EXP 31
4260: PPUSH
4261: CALL_OW 2
4265: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4266: LD_ADDR_EXP 30
4270: PUSH
4271: LD_STRING Gladstone
4273: PPUSH
4274: LD_EXP 1
4278: NOT
4279: PPUSH
4280: LD_STRING 11_
4282: PPUSH
4283: CALL 38348 0 3
4287: ST_TO_ADDR
// if Gladstone then
4288: LD_EXP 30
4292: IFFALSE 4323
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4294: LD_ADDR_EXP 4
4298: PUSH
4299: LD_EXP 4
4303: PPUSH
4304: LD_EXP 4
4308: PUSH
4309: LD_INT 1
4311: PLUS
4312: PPUSH
4313: LD_EXP 30
4317: PPUSH
4318: CALL_OW 2
4322: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4323: LD_ADDR_EXP 24
4327: PUSH
4328: LD_STRING Lisa
4330: PPUSH
4331: LD_EXP 1
4335: NOT
4336: PPUSH
4337: LD_STRING 11_
4339: PPUSH
4340: CALL 38348 0 3
4344: ST_TO_ADDR
// if Lisa then
4345: LD_EXP 24
4349: IFFALSE 4374
// friends := Insert ( friends , 1 , Lisa ) ;
4351: LD_ADDR_EXP 4
4355: PUSH
4356: LD_EXP 4
4360: PPUSH
4361: LD_INT 1
4363: PPUSH
4364: LD_EXP 24
4368: PPUSH
4369: CALL_OW 2
4373: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4374: LD_ADDR_EXP 25
4378: PUSH
4379: LD_STRING Donaldson
4381: PPUSH
4382: LD_EXP 1
4386: NOT
4387: PPUSH
4388: LD_STRING 11_
4390: PPUSH
4391: CALL 38348 0 3
4395: ST_TO_ADDR
// if Donaldson then
4396: LD_EXP 25
4400: IFFALSE 4431
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4402: LD_ADDR_EXP 4
4406: PUSH
4407: LD_EXP 4
4411: PPUSH
4412: LD_EXP 4
4416: PUSH
4417: LD_INT 1
4419: PLUS
4420: PPUSH
4421: LD_EXP 25
4425: PPUSH
4426: CALL_OW 2
4430: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4431: LD_ADDR_EXP 26
4435: PUSH
4436: LD_STRING Bobby
4438: PPUSH
4439: LD_EXP 1
4443: NOT
4444: PPUSH
4445: LD_STRING 11_
4447: PPUSH
4448: CALL 38348 0 3
4452: ST_TO_ADDR
// if Bobby then
4453: LD_EXP 26
4457: IFFALSE 4488
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4459: LD_ADDR_EXP 4
4463: PUSH
4464: LD_EXP 4
4468: PPUSH
4469: LD_EXP 4
4473: PUSH
4474: LD_INT 1
4476: PLUS
4477: PPUSH
4478: LD_EXP 26
4482: PPUSH
4483: CALL_OW 2
4487: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4488: LD_ADDR_EXP 27
4492: PUSH
4493: LD_STRING Cyrus
4495: PPUSH
4496: LD_EXP 1
4500: NOT
4501: PPUSH
4502: LD_STRING 11_
4504: PPUSH
4505: CALL 38348 0 3
4509: ST_TO_ADDR
// if Cyrus then
4510: LD_EXP 27
4514: IFFALSE 4545
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4516: LD_ADDR_EXP 4
4520: PUSH
4521: LD_EXP 4
4525: PPUSH
4526: LD_EXP 4
4530: PUSH
4531: LD_INT 1
4533: PLUS
4534: PPUSH
4535: LD_EXP 27
4539: PPUSH
4540: CALL_OW 2
4544: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4545: LD_ADDR_EXP 28
4549: PUSH
4550: LD_STRING Denis
4552: PPUSH
4553: LD_EXP 1
4557: NOT
4558: PPUSH
4559: LD_STRING 11_
4561: PPUSH
4562: CALL 38348 0 3
4566: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4567: LD_ADDR_EXP 29
4571: PUSH
4572: LD_STRING Brown
4574: PPUSH
4575: LD_EXP 1
4579: NOT
4580: PPUSH
4581: LD_STRING 11_
4583: PPUSH
4584: CALL 38348 0 3
4588: ST_TO_ADDR
// if Brown then
4589: LD_EXP 29
4593: IFFALSE 4624
// friends := Insert ( friends , friends + 1 , Brown ) ;
4595: LD_ADDR_EXP 4
4599: PUSH
4600: LD_EXP 4
4604: PPUSH
4605: LD_EXP 4
4609: PUSH
4610: LD_INT 1
4612: PLUS
4613: PPUSH
4614: LD_EXP 29
4618: PPUSH
4619: CALL_OW 2
4623: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 10c_ ) ;
4624: LD_ADDR_EXP 39
4628: PUSH
4629: LD_STRING Mike
4631: PPUSH
4632: LD_EXP 1
4636: NOT
4637: PPUSH
4638: LD_STRING 10c_
4640: PPUSH
4641: CALL 38348 0 3
4645: ST_TO_ADDR
// if Mike then
4646: LD_EXP 39
4650: IFFALSE 4691
// begin SetClass ( Mike , class_apeman_engineer ) ;
4652: LD_EXP 39
4656: PPUSH
4657: LD_INT 16
4659: PPUSH
4660: CALL_OW 336
// PlaceUnitXY ( Mike , 180 , 87 , false ) ;
4664: LD_EXP 39
4668: PPUSH
4669: LD_INT 180
4671: PPUSH
4672: LD_INT 87
4674: PPUSH
4675: LD_INT 0
4677: PPUSH
4678: CALL_OW 48
// ComHold ( Mike ) ;
4682: LD_EXP 39
4686: PPUSH
4687: CALL_OW 140
// end ; friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4691: LD_ADDR_EXP 4
4695: PUSH
4696: LD_EXP 4
4700: PUSH
4701: LD_STRING 11c_others
4703: PPUSH
4704: CALL_OW 31
4708: ADD
4709: PUSH
4710: LD_STRING 11_others
4712: PPUSH
4713: CALL_OW 31
4717: ADD
4718: ST_TO_ADDR
// if friends < 18 then
4719: LD_EXP 4
4723: PUSH
4724: LD_INT 18
4726: LESS
4727: IFFALSE 4799
// for i = 1 to 18 do
4729: LD_ADDR_VAR 0 2
4733: PUSH
4734: DOUBLE
4735: LD_INT 1
4737: DEC
4738: ST_TO_ADDR
4739: LD_INT 18
4741: PUSH
4742: FOR_TO
4743: IFFALSE 4797
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4745: LD_INT 0
4747: PPUSH
4748: LD_INT 1
4750: PPUSH
4751: LD_INT 4
4753: PPUSH
4754: CALL_OW 12
4758: PPUSH
4759: LD_INT 7
4761: PPUSH
4762: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4766: LD_ADDR_EXP 4
4770: PUSH
4771: LD_EXP 4
4775: PPUSH
4776: LD_EXP 4
4780: PUSH
4781: LD_INT 1
4783: PLUS
4784: PPUSH
4785: CALL_OW 44
4789: PPUSH
4790: CALL_OW 2
4794: ST_TO_ADDR
// end ;
4795: GO 4742
4797: POP
4798: POP
// for i in friends do
4799: LD_ADDR_VAR 0 2
4803: PUSH
4804: LD_EXP 4
4808: PUSH
4809: FOR_IN
4810: IFFALSE 4885
// if GetNation ( i ) = nation_american and GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4812: LD_VAR 0 2
4816: PPUSH
4817: CALL_OW 248
4821: PUSH
4822: LD_INT 1
4824: EQUAL
4825: IFFALSE 4855
4827: PUSH
4828: LD_VAR 0 2
4832: PPUSH
4833: LD_INT 1
4835: PPUSH
4836: CALL_OW 259
4840: PUSH
4841: LD_VAR 0 2
4845: PPUSH
4846: LD_INT 4
4848: PPUSH
4849: CALL_OW 259
4853: GREATEREQUAL
4854: AND
4855: IFFALSE 4871
// SetClass ( i , class_soldier ) else
4857: LD_VAR 0 2
4861: PPUSH
4862: LD_INT 1
4864: PPUSH
4865: CALL_OW 336
4869: GO 4883
// SetClass ( i , class_scientistic ) ;
4871: LD_VAR 0 2
4875: PPUSH
4876: LD_INT 4
4878: PPUSH
4879: CALL_OW 336
4883: GO 4809
4885: POP
4886: POP
// if Frank then
4887: LD_EXP 34
4891: IFFALSE 4905
// SetClass ( Frank , class_sniper ) ;
4893: LD_EXP 34
4897: PPUSH
4898: LD_INT 5
4900: PPUSH
4901: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4905: LD_EXP 37
4909: PUSH
4910: LD_EXP 28
4914: PUSH
4915: LD_EXP 38
4919: PUSH
4920: LD_EXP 36
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: PPUSH
4931: LD_INT 4
4933: PPUSH
4934: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ [ class_soldier , 3 ] , [ class_scientistic , 2 , 5 ] , [ class_sniper , 0 , 2 ] ] ) ;
4938: LD_ADDR_EXP 3
4942: PUSH
4943: LD_STRING 
4945: PPUSH
4946: LD_INT 7
4948: PPUSH
4949: LD_INT 7
4951: PPUSH
4952: LD_INT -6
4954: PUSH
4955: LD_EXP 15
4959: PUSH
4960: LD_EXP 16
4964: PUSH
4965: LD_EXP 36
4969: PUSH
4970: LD_EXP 28
4974: PUSH
4975: LD_EXP 38
4979: PUSH
4980: LD_INT -2
4982: PUSH
4983: LD_INT -3
4985: PUSH
4986: LD_INT -5
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: PUSH
5000: LD_EXP 4
5004: ADD
5005: PPUSH
5006: LD_INT 1
5008: PUSH
5009: LD_INT 3
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 4
5018: PUSH
5019: LD_INT 2
5021: PUSH
5022: LD_INT 5
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: LIST
5029: PUSH
5030: LD_INT 5
5032: PUSH
5033: LD_INT 0
5035: PUSH
5036: LD_INT 2
5038: PUSH
5039: EMPTY
5040: LIST
5041: LIST
5042: LIST
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: LIST
5048: PPUSH
5049: CALL_OW 42
5053: ST_TO_ADDR
// if Simms then
5054: LD_EXP 36
5058: IFFALSE 5076
// selected := selected ^ Simms ;
5060: LD_ADDR_EXP 3
5064: PUSH
5065: LD_EXP 3
5069: PUSH
5070: LD_EXP 36
5074: ADD
5075: ST_TO_ADDR
// if Denis then
5076: LD_EXP 28
5080: IFFALSE 5098
// selected := selected ^ Denis ;
5082: LD_ADDR_EXP 3
5086: PUSH
5087: LD_EXP 3
5091: PUSH
5092: LD_EXP 28
5096: ADD
5097: ST_TO_ADDR
// if DeltaDoctor then
5098: LD_EXP 38
5102: IFFALSE 5120
// selected := selected ^ DeltaDoctor ;
5104: LD_ADDR_EXP 3
5108: PUSH
5109: LD_EXP 3
5113: PUSH
5114: LD_EXP 38
5118: ADD
5119: ST_TO_ADDR
// if gamma_commander = 1 and Donaldson then
5120: LD_EXP 10
5124: PUSH
5125: LD_INT 1
5127: EQUAL
5128: IFFALSE 5136
5130: PUSH
5131: LD_EXP 25
5135: AND
5136: IFFALSE 5148
// gammaCommander := Donaldson ;
5138: LD_ADDR_VAR 0 8
5142: PUSH
5143: LD_EXP 25
5147: ST_TO_ADDR
// if gamma_commander = 2 and Brown then
5148: LD_EXP 10
5152: PUSH
5153: LD_INT 2
5155: EQUAL
5156: IFFALSE 5164
5158: PUSH
5159: LD_EXP 29
5163: AND
5164: IFFALSE 5176
// gammaCommander := Brown ;
5166: LD_ADDR_VAR 0 8
5170: PUSH
5171: LD_EXP 29
5175: ST_TO_ADDR
// friends := friends diff selected ;
5176: LD_ADDR_EXP 4
5180: PUSH
5181: LD_EXP 4
5185: PUSH
5186: LD_EXP 3
5190: DIFF
5191: ST_TO_ADDR
// friends := friends diff gammaCommander ;
5192: LD_ADDR_EXP 4
5196: PUSH
5197: LD_EXP 4
5201: PUSH
5202: LD_VAR 0 8
5206: DIFF
5207: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
5208: LD_ADDR_VAR 0 4
5212: PUSH
5213: LD_INT 111
5215: PUSH
5216: LD_INT 137
5218: PUSH
5219: LD_INT 51
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: LIST
5226: PUSH
5227: LD_INT 147
5229: PUSH
5230: LD_INT 129
5232: PUSH
5233: LD_INT 25
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: LIST
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
5245: LD_ADDR_VAR 0 5
5249: PUSH
5250: LD_INT 5
5252: PUSH
5253: LD_INT 6
5255: PUSH
5256: LD_INT 7
5258: PUSH
5259: LD_INT 8
5261: PUSH
5262: LD_INT 17
5264: PUSH
5265: LD_INT 18
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: ST_TO_ADDR
// for i in buildings do
5276: LD_ADDR_VAR 0 2
5280: PUSH
5281: LD_VAR 0 4
5285: PUSH
5286: FOR_IN
5287: IFFALSE 5303
// SetSide ( i , 4 ) ;
5289: LD_VAR 0 2
5293: PPUSH
5294: LD_INT 4
5296: PPUSH
5297: CALL_OW 235
5301: GO 5286
5303: POP
5304: POP
// for i in selected union gammaCommander do
5305: LD_ADDR_VAR 0 2
5309: PUSH
5310: LD_EXP 3
5314: PUSH
5315: LD_VAR 0 8
5319: UNION
5320: PUSH
5321: FOR_IN
5322: IFFALSE 5662
// begin if GetClass ( i ) in [ 1 , 5 ] then
5324: LD_VAR 0 2
5328: PPUSH
5329: CALL_OW 257
5333: PUSH
5334: LD_INT 1
5336: PUSH
5337: LD_INT 5
5339: PUSH
5340: EMPTY
5341: LIST
5342: LIST
5343: IN
5344: IFFALSE 5504
// begin if buildings [ 1 ] then
5346: LD_VAR 0 4
5350: PUSH
5351: LD_INT 1
5353: ARRAY
5354: IFFALSE 5415
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5356: LD_VAR 0 2
5360: PPUSH
5361: LD_VAR 0 4
5365: PUSH
5366: LD_INT 1
5368: ARRAY
5369: PUSH
5370: LD_INT 1
5372: ARRAY
5373: PPUSH
5374: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5378: LD_ADDR_VAR 0 4
5382: PUSH
5383: LD_VAR 0 4
5387: PPUSH
5388: LD_INT 1
5390: PPUSH
5391: LD_VAR 0 4
5395: PUSH
5396: LD_INT 1
5398: ARRAY
5399: PPUSH
5400: LD_INT 1
5402: PPUSH
5403: CALL_OW 3
5407: PPUSH
5408: CALL_OW 1
5412: ST_TO_ADDR
// end else
5413: GO 5502
// begin if not areas then
5415: LD_VAR 0 5
5419: NOT
5420: IFFALSE 5454
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5422: LD_VAR 0 2
5426: PPUSH
5427: LD_INT 87
5429: PPUSH
5430: LD_INT 68
5432: PPUSH
5433: LD_INT 8
5435: PPUSH
5436: LD_INT 0
5438: PPUSH
5439: CALL_OW 50
// ComHold ( i ) ;
5443: LD_VAR 0 2
5447: PPUSH
5448: CALL_OW 140
// end else
5452: GO 5502
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5454: LD_VAR 0 2
5458: PPUSH
5459: LD_VAR 0 5
5463: PUSH
5464: LD_INT 1
5466: ARRAY
5467: PPUSH
5468: LD_INT 0
5470: PPUSH
5471: CALL_OW 49
// ComHold ( i ) ;
5475: LD_VAR 0 2
5479: PPUSH
5480: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5484: LD_ADDR_VAR 0 5
5488: PUSH
5489: LD_VAR 0 5
5493: PPUSH
5494: LD_INT 1
5496: PPUSH
5497: CALL_OW 3
5501: ST_TO_ADDR
// end ; end ; end else
5502: GO 5660
// begin if buildings [ 2 ] then
5504: LD_VAR 0 4
5508: PUSH
5509: LD_INT 2
5511: ARRAY
5512: IFFALSE 5573
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5514: LD_VAR 0 2
5518: PPUSH
5519: LD_VAR 0 4
5523: PUSH
5524: LD_INT 2
5526: ARRAY
5527: PUSH
5528: LD_INT 1
5530: ARRAY
5531: PPUSH
5532: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5536: LD_ADDR_VAR 0 4
5540: PUSH
5541: LD_VAR 0 4
5545: PPUSH
5546: LD_INT 2
5548: PPUSH
5549: LD_VAR 0 4
5553: PUSH
5554: LD_INT 2
5556: ARRAY
5557: PPUSH
5558: LD_INT 1
5560: PPUSH
5561: CALL_OW 3
5565: PPUSH
5566: CALL_OW 1
5570: ST_TO_ADDR
// end else
5571: GO 5660
// begin if not areas then
5573: LD_VAR 0 5
5577: NOT
5578: IFFALSE 5612
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5580: LD_VAR 0 2
5584: PPUSH
5585: LD_INT 87
5587: PPUSH
5588: LD_INT 68
5590: PPUSH
5591: LD_INT 8
5593: PPUSH
5594: LD_INT 0
5596: PPUSH
5597: CALL_OW 50
// ComHold ( i ) ;
5601: LD_VAR 0 2
5605: PPUSH
5606: CALL_OW 140
// end else
5610: GO 5660
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5612: LD_VAR 0 2
5616: PPUSH
5617: LD_VAR 0 5
5621: PUSH
5622: LD_INT 1
5624: ARRAY
5625: PPUSH
5626: LD_INT 0
5628: PPUSH
5629: CALL_OW 49
// ComHold ( i ) ;
5633: LD_VAR 0 2
5637: PPUSH
5638: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5642: LD_ADDR_VAR 0 5
5646: PUSH
5647: LD_VAR 0 5
5651: PPUSH
5652: LD_INT 1
5654: PPUSH
5655: CALL_OW 3
5659: ST_TO_ADDR
// end ; end ; end ; end ;
5660: GO 5321
5662: POP
5663: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5664: LD_ADDR_VAR 0 6
5668: PUSH
5669: LD_INT 22
5671: PUSH
5672: LD_INT 1
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: PUSH
5679: LD_INT 30
5681: PUSH
5682: LD_INT 32
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PUSH
5689: EMPTY
5690: LIST
5691: LIST
5692: PPUSH
5693: CALL_OW 69
5697: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5698: LD_ADDR_VAR 0 2
5702: PUSH
5703: DOUBLE
5704: LD_VAR 0 6
5708: PUSH
5709: LD_EXP 4
5713: MINUS
5714: INC
5715: ST_TO_ADDR
5716: LD_INT 1
5718: PUSH
5719: FOR_DOWNTO
5720: IFFALSE 5787
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5722: LD_INT 0
5724: PPUSH
5725: LD_INT 1
5727: PPUSH
5728: LD_INT 7
5730: PUSH
5731: LD_INT 8
5733: PUSH
5734: LD_INT 9
5736: PUSH
5737: LD_INT 10
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: PUSH
5746: LD_OWVAR 67
5750: ARRAY
5751: PPUSH
5752: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5756: LD_ADDR_EXP 4
5760: PUSH
5761: LD_EXP 4
5765: PPUSH
5766: LD_EXP 4
5770: PUSH
5771: LD_INT 1
5773: PLUS
5774: PPUSH
5775: CALL_OW 44
5779: PPUSH
5780: CALL_OW 2
5784: ST_TO_ADDR
// end ;
5785: GO 5719
5787: POP
5788: POP
// if friends then
5789: LD_EXP 4
5793: IFFALSE 5909
// begin tmp := friends ;
5795: LD_ADDR_VAR 0 3
5799: PUSH
5800: LD_EXP 4
5804: ST_TO_ADDR
// for i = 1 to bunkers do
5805: LD_ADDR_VAR 0 2
5809: PUSH
5810: DOUBLE
5811: LD_INT 1
5813: DEC
5814: ST_TO_ADDR
5815: LD_VAR 0 6
5819: PUSH
5820: FOR_TO
5821: IFFALSE 5907
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5823: LD_VAR 0 3
5827: PUSH
5828: LD_VAR 0 3
5832: ARRAY
5833: PPUSH
5834: LD_INT 1
5836: PPUSH
5837: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5841: LD_VAR 0 3
5845: PUSH
5846: LD_VAR 0 3
5850: ARRAY
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5859: LD_VAR 0 3
5863: PUSH
5864: LD_VAR 0 3
5868: ARRAY
5869: PPUSH
5870: LD_VAR 0 6
5874: PUSH
5875: LD_VAR 0 2
5879: ARRAY
5880: PPUSH
5881: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5885: LD_ADDR_VAR 0 3
5889: PUSH
5890: LD_VAR 0 3
5894: PPUSH
5895: LD_VAR 0 3
5899: PPUSH
5900: CALL_OW 3
5904: ST_TO_ADDR
// end ;
5905: GO 5820
5907: POP
5908: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5909: LD_ADDR_VAR 0 5
5913: PUSH
5914: LD_VAR 0 5
5918: PUSH
5919: LD_INT 9
5921: PUSH
5922: LD_INT 10
5924: PUSH
5925: LD_INT 11
5927: PUSH
5928: LD_INT 12
5930: PUSH
5931: LD_INT 13
5933: PUSH
5934: LD_INT 14
5936: PUSH
5937: LD_INT 15
5939: PUSH
5940: LD_INT 16
5942: PUSH
5943: LD_INT 26
5945: PUSH
5946: LD_INT 27
5948: PUSH
5949: LD_INT 28
5951: PUSH
5952: LD_INT 29
5954: PUSH
5955: LD_INT 30
5957: PUSH
5958: LD_INT 31
5960: PUSH
5961: LD_INT 32
5963: PUSH
5964: LD_INT 33
5966: PUSH
5967: LD_INT 34
5969: PUSH
5970: LD_INT 35
5972: PUSH
5973: LD_INT 36
5975: PUSH
5976: LD_INT 37
5978: PUSH
5979: EMPTY
5980: LIST
5981: LIST
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: UNION
6001: ST_TO_ADDR
// for i in friends do
6002: LD_ADDR_VAR 0 2
6006: PUSH
6007: LD_EXP 4
6011: PUSH
6012: FOR_IN
6013: IFFALSE 6300
// begin SetTag ( i , 2 ) ;
6015: LD_VAR 0 2
6019: PPUSH
6020: LD_INT 2
6022: PPUSH
6023: CALL_OW 109
// if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
6027: LD_VAR 0 2
6031: PPUSH
6032: CALL_OW 257
6036: PUSH
6037: LD_INT 4
6039: EQUAL
6040: IFFALSE 6052
6042: PUSH
6043: LD_VAR 0 4
6047: PUSH
6048: LD_INT 2
6050: ARRAY
6051: AND
6052: IFFALSE 6113
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
6054: LD_VAR 0 2
6058: PPUSH
6059: LD_VAR 0 4
6063: PUSH
6064: LD_INT 2
6066: ARRAY
6067: PUSH
6068: LD_INT 1
6070: ARRAY
6071: PPUSH
6072: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
6076: LD_ADDR_VAR 0 4
6080: PUSH
6081: LD_VAR 0 4
6085: PPUSH
6086: LD_INT 2
6088: PPUSH
6089: LD_VAR 0 4
6093: PUSH
6094: LD_INT 2
6096: ARRAY
6097: PPUSH
6098: LD_INT 1
6100: PPUSH
6101: CALL_OW 3
6105: PPUSH
6106: CALL_OW 1
6110: ST_TO_ADDR
// continue ;
6111: GO 6012
// end ; if not GetClass ( i ) in [ class_soldier , class_sniper ] then
6113: LD_VAR 0 2
6117: PPUSH
6118: CALL_OW 257
6122: PUSH
6123: LD_INT 1
6125: PUSH
6126: LD_INT 5
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: IN
6133: NOT
6134: IFFALSE 6148
// SetClass ( i , 1 ) ;
6136: LD_VAR 0 2
6140: PPUSH
6141: LD_INT 1
6143: PPUSH
6144: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
6148: LD_VAR 0 2
6152: PPUSH
6153: CALL_OW 257
6157: PUSH
6158: LD_INT 1
6160: PUSH
6161: LD_INT 5
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: IN
6168: IFFALSE 6180
6170: PUSH
6171: LD_VAR 0 4
6175: PUSH
6176: LD_INT 1
6178: ARRAY
6179: AND
6180: IFFALSE 6241
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
6182: LD_VAR 0 2
6186: PPUSH
6187: LD_VAR 0 4
6191: PUSH
6192: LD_INT 1
6194: ARRAY
6195: PUSH
6196: LD_INT 1
6198: ARRAY
6199: PPUSH
6200: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
6204: LD_ADDR_VAR 0 4
6208: PUSH
6209: LD_VAR 0 4
6213: PPUSH
6214: LD_INT 1
6216: PPUSH
6217: LD_VAR 0 4
6221: PUSH
6222: LD_INT 1
6224: ARRAY
6225: PPUSH
6226: LD_INT 1
6228: PPUSH
6229: CALL_OW 3
6233: PPUSH
6234: CALL_OW 1
6238: ST_TO_ADDR
// continue ;
6239: GO 6012
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
6241: LD_VAR 0 2
6245: PPUSH
6246: LD_VAR 0 5
6250: PUSH
6251: LD_INT 1
6253: ARRAY
6254: PPUSH
6255: LD_INT 0
6257: PPUSH
6258: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
6262: LD_ADDR_VAR 0 5
6266: PUSH
6267: LD_VAR 0 5
6271: PPUSH
6272: LD_INT 1
6274: PPUSH
6275: CALL_OW 3
6279: ST_TO_ADDR
// ComHold ( i ) ;
6280: LD_VAR 0 2
6284: PPUSH
6285: CALL_OW 140
// if not areas then
6289: LD_VAR 0 5
6293: NOT
6294: IFFALSE 6298
// break ;
6296: GO 6300
// end ;
6298: GO 6012
6300: POP
6301: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
6302: LD_EXP 4
6306: PPUSH
6307: LD_INT 3
6309: PUSH
6310: LD_INT 52
6312: PUSH
6313: EMPTY
6314: LIST
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: PPUSH
6320: CALL_OW 72
6324: IFFALSE 6391
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
6326: LD_ADDR_VAR 0 2
6330: PUSH
6331: LD_EXP 4
6335: PPUSH
6336: LD_INT 3
6338: PUSH
6339: LD_INT 52
6341: PUSH
6342: EMPTY
6343: LIST
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PPUSH
6349: CALL_OW 72
6353: PUSH
6354: FOR_IN
6355: IFFALSE 6389
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
6357: LD_VAR 0 2
6361: PPUSH
6362: LD_INT 65
6364: PPUSH
6365: LD_INT 58
6367: PPUSH
6368: LD_INT 7
6370: PPUSH
6371: LD_INT 0
6373: PPUSH
6374: CALL_OW 50
// ComHold ( i ) ;
6378: LD_VAR 0 2
6382: PPUSH
6383: CALL_OW 140
// end ;
6387: GO 6354
6389: POP
6390: POP
// if Frank then
6391: LD_EXP 34
6395: IFFALSE 6409
// SetClass ( Frank , class_sniper ) ;
6397: LD_EXP 34
6401: PPUSH
6402: LD_INT 5
6404: PPUSH
6405: CALL_OW 336
// end ; end_of_file
6409: LD_VAR 0 1
6413: RET
// export function CanSayRand ( side ) ; begin
6414: LD_INT 0
6416: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6417: LD_ADDR_VAR 0 2
6421: PUSH
6422: LD_INT 52
6424: PUSH
6425: EMPTY
6426: LIST
6427: PUSH
6428: LD_INT 22
6430: PUSH
6431: LD_VAR 0 1
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: PUSH
6440: LD_INT 2
6442: PUSH
6443: LD_INT 25
6445: PUSH
6446: LD_INT 1
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: PUSH
6453: LD_INT 25
6455: PUSH
6456: LD_INT 2
6458: PUSH
6459: EMPTY
6460: LIST
6461: LIST
6462: PUSH
6463: LD_INT 25
6465: PUSH
6466: LD_INT 3
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: PUSH
6473: LD_INT 25
6475: PUSH
6476: LD_INT 4
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: LIST
6487: LIST
6488: LIST
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: LIST
6494: PPUSH
6495: CALL_OW 69
6499: PUSH
6500: LD_EXP 15
6504: PUSH
6505: LD_EXP 34
6509: PUSH
6510: LD_EXP 24
6514: PUSH
6515: LD_EXP 25
6519: PUSH
6520: LD_EXP 26
6524: PUSH
6525: LD_EXP 27
6529: PUSH
6530: LD_EXP 28
6534: PUSH
6535: LD_EXP 29
6539: PUSH
6540: LD_EXP 30
6544: PUSH
6545: LD_EXP 31
6549: PUSH
6550: LD_EXP 17
6554: PUSH
6555: LD_EXP 32
6559: PUSH
6560: LD_EXP 33
6564: PUSH
6565: LD_EXP 35
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: LIST
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: DIFF
6586: ST_TO_ADDR
// end ;
6587: LD_VAR 0 2
6591: RET
// export function SayRand ( sex , dial ) ; begin
6592: LD_INT 0
6594: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6595: LD_ADDR_VAR 0 3
6599: PUSH
6600: LD_INT 52
6602: PUSH
6603: EMPTY
6604: LIST
6605: PUSH
6606: LD_INT 22
6608: PUSH
6609: LD_INT 1
6611: PUSH
6612: EMPTY
6613: LIST
6614: LIST
6615: PUSH
6616: LD_INT 26
6618: PUSH
6619: LD_VAR 0 1
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: PUSH
6628: LD_INT 2
6630: PUSH
6631: LD_INT 25
6633: PUSH
6634: LD_INT 1
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PUSH
6641: LD_INT 25
6643: PUSH
6644: LD_INT 2
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PUSH
6651: LD_INT 25
6653: PUSH
6654: LD_INT 3
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 25
6663: PUSH
6664: LD_INT 4
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: LIST
6675: LIST
6676: LIST
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: PPUSH
6684: CALL_OW 69
6688: PUSH
6689: LD_EXP 15
6693: PUSH
6694: LD_EXP 34
6698: PUSH
6699: LD_EXP 24
6703: PUSH
6704: LD_EXP 25
6708: PUSH
6709: LD_EXP 26
6713: PUSH
6714: LD_EXP 27
6718: PUSH
6719: LD_EXP 28
6723: PUSH
6724: LD_EXP 29
6728: PUSH
6729: LD_EXP 30
6733: PUSH
6734: LD_EXP 31
6738: PUSH
6739: LD_EXP 17
6743: PUSH
6744: LD_EXP 32
6748: PUSH
6749: LD_EXP 33
6753: PUSH
6754: LD_EXP 35
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: DIFF
6775: ST_TO_ADDR
// if not result then
6776: LD_VAR 0 3
6780: NOT
6781: IFFALSE 6785
// exit ;
6783: GO 6813
// result := result [ 1 ] ;
6785: LD_ADDR_VAR 0 3
6789: PUSH
6790: LD_VAR 0 3
6794: PUSH
6795: LD_INT 1
6797: ARRAY
6798: ST_TO_ADDR
// Say ( result , dial ) ;
6799: LD_VAR 0 3
6803: PPUSH
6804: LD_VAR 0 2
6808: PPUSH
6809: CALL_OW 88
// end ;
6813: LD_VAR 0 3
6817: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6818: LD_INT 0
6820: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6821: LD_ADDR_VAR 0 4
6825: PUSH
6826: LD_INT 22
6828: PUSH
6829: LD_INT 1
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: LD_INT 26
6838: PUSH
6839: LD_VAR 0 1
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PUSH
6848: LD_INT 2
6850: PUSH
6851: LD_INT 25
6853: PUSH
6854: LD_INT 1
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: LD_INT 25
6863: PUSH
6864: LD_INT 2
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PUSH
6871: LD_INT 25
6873: PUSH
6874: LD_INT 3
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 25
6883: PUSH
6884: LD_INT 4
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: LIST
6902: PPUSH
6903: CALL_OW 69
6907: PUSH
6908: LD_EXP 15
6912: PUSH
6913: LD_EXP 34
6917: PUSH
6918: LD_EXP 24
6922: PUSH
6923: LD_EXP 25
6927: PUSH
6928: LD_EXP 26
6932: PUSH
6933: LD_EXP 27
6937: PUSH
6938: LD_EXP 28
6942: PUSH
6943: LD_EXP 29
6947: PUSH
6948: LD_EXP 30
6952: PUSH
6953: LD_EXP 31
6957: PUSH
6958: LD_EXP 17
6962: PUSH
6963: LD_EXP 32
6967: PUSH
6968: LD_EXP 33
6972: PUSH
6973: LD_EXP 35
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: LIST
6993: PUSH
6994: LD_VAR 0 3
6998: ADD
6999: DIFF
7000: ST_TO_ADDR
// if not result then
7001: LD_VAR 0 4
7005: NOT
7006: IFFALSE 7010
// exit ;
7008: GO 7038
// result := result [ 1 ] ;
7010: LD_ADDR_VAR 0 4
7014: PUSH
7015: LD_VAR 0 4
7019: PUSH
7020: LD_INT 1
7022: ARRAY
7023: ST_TO_ADDR
// Say ( result , dial ) ;
7024: LD_VAR 0 4
7028: PPUSH
7029: LD_VAR 0 2
7033: PPUSH
7034: CALL_OW 88
// end ;
7038: LD_VAR 0 4
7042: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
7043: LD_INT 0
7045: PPUSH
7046: PPUSH
7047: PPUSH
7048: PPUSH
7049: PPUSH
7050: PPUSH
7051: PPUSH
7052: PPUSH
7053: PPUSH
7054: PPUSH
7055: PPUSH
7056: PPUSH
7057: PPUSH
7058: PPUSH
7059: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
7060: LD_VAR 0 1
7064: NOT
7065: IFTRUE 7074
7067: PUSH
7068: LD_VAR 0 2
7072: NOT
7073: OR
7074: IFTRUE 7091
7076: PUSH
7077: LD_VAR 0 1
7081: PPUSH
7082: CALL_OW 247
7086: PUSH
7087: LD_INT 3
7089: EQUAL
7090: OR
7091: IFFALSE 7095
// exit ;
7093: GO 8644
// for i = path downto 1 do
7095: LD_ADDR_VAR 0 5
7099: PUSH
7100: DOUBLE
7101: LD_VAR 0 2
7105: INC
7106: ST_TO_ADDR
7107: LD_INT 1
7109: PUSH
7110: FOR_DOWNTO
7111: IFFALSE 7172
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
7113: LD_VAR 0 2
7117: PUSH
7118: LD_VAR 0 5
7122: ARRAY
7123: PUSH
7124: LD_INT 1
7126: ARRAY
7127: PPUSH
7128: LD_VAR 0 2
7132: PUSH
7133: LD_VAR 0 5
7137: ARRAY
7138: PUSH
7139: LD_INT 2
7141: ARRAY
7142: PPUSH
7143: CALL_OW 488
7147: NOT
7148: IFFALSE 7170
// path = Delete ( path , i ) ;
7150: LD_ADDR_VAR 0 2
7154: PUSH
7155: LD_VAR 0 2
7159: PPUSH
7160: LD_VAR 0 5
7164: PPUSH
7165: CALL_OW 3
7169: ST_TO_ADDR
// end ;
7170: GO 7110
7172: POP
7173: POP
// if not path then
7174: LD_VAR 0 2
7178: NOT
7179: IFFALSE 7183
// exit ;
7181: GO 8644
// tmp_path := [ ] ;
7183: LD_ADDR_VAR 0 11
7187: PUSH
7188: EMPTY
7189: ST_TO_ADDR
// if flags then
7190: LD_VAR 0 3
7194: IFFALSE 7268
// begin if flags [ 1 ] then
7196: LD_VAR 0 3
7200: PUSH
7201: LD_INT 1
7203: ARRAY
7204: IFFALSE 7220
// safe_place = flags [ 1 ] ;
7206: LD_ADDR_VAR 0 16
7210: PUSH
7211: LD_VAR 0 3
7215: PUSH
7216: LD_INT 1
7218: ARRAY
7219: ST_TO_ADDR
// if flags [ 2 ] then
7220: LD_VAR 0 3
7224: PUSH
7225: LD_INT 2
7227: ARRAY
7228: IFFALSE 7244
// spot_dist = flags [ 2 ] ;
7230: LD_ADDR_VAR 0 15
7234: PUSH
7235: LD_VAR 0 3
7239: PUSH
7240: LD_INT 2
7242: ARRAY
7243: ST_TO_ADDR
// if flags [ 3 ] then
7244: LD_VAR 0 3
7248: PUSH
7249: LD_INT 3
7251: ARRAY
7252: IFFALSE 7268
// chase_range = flags [ 3 ] ;
7254: LD_ADDR_VAR 0 17
7258: PUSH
7259: LD_VAR 0 3
7263: PUSH
7264: LD_INT 3
7266: ARRAY
7267: ST_TO_ADDR
// end ; if not chase_range then
7268: LD_VAR 0 17
7272: NOT
7273: IFFALSE 7283
// chase_range = 8 ;
7275: LD_ADDR_VAR 0 17
7279: PUSH
7280: LD_INT 8
7282: ST_TO_ADDR
// if not spot_dist then
7283: LD_VAR 0 15
7287: NOT
7288: IFFALSE 7298
// spot_dist := 8 ;
7290: LD_ADDR_VAR 0 15
7294: PUSH
7295: LD_INT 8
7297: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
7298: LD_ADDR_VAR 0 18
7302: PUSH
7303: LD_VAR 0 1
7307: PPUSH
7308: CALL_OW 247
7312: PUSH
7313: LD_INT 2
7315: EQUAL
7316: IFFALSE 7333
7318: PUSH
7319: LD_VAR 0 1
7323: PPUSH
7324: CALL_OW 262
7328: PUSH
7329: LD_INT 3
7331: NONEQUAL
7332: AND
7333: ST_TO_ADDR
// status = 1 ;
7334: LD_ADDR_VAR 0 12
7338: PUSH
7339: LD_INT 1
7341: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
7342: LD_ADDR_VAR 0 11
7346: PUSH
7347: LD_INT 1
7349: PUSH
7350: LD_VAR 0 2
7354: PUSH
7355: LD_INT 1
7357: ARRAY
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7363: LD_INT 35
7365: PPUSH
7366: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
7370: LD_VAR 0 18
7374: IFFALSE 7391
7376: PUSH
7377: LD_VAR 0 1
7381: PPUSH
7382: CALL_OW 261
7386: PUSH
7387: LD_INT 20
7389: LESS
7390: AND
7391: IFFALSE 7584
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7393: LD_ADDR_VAR 0 10
7397: PUSH
7398: LD_INT 22
7400: PUSH
7401: LD_VAR 0 1
7405: PPUSH
7406: CALL_OW 255
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PUSH
7415: LD_INT 2
7417: PUSH
7418: LD_INT 30
7420: PUSH
7421: LD_INT 0
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 30
7430: PUSH
7431: LD_INT 1
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: LD_INT 30
7440: PUSH
7441: LD_INT 29
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: PUSH
7448: LD_INT 30
7450: PUSH
7451: LD_INT 3
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: LIST
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PPUSH
7469: CALL_OW 69
7473: ST_TO_ADDR
// if not station then
7474: LD_VAR 0 10
7478: NOT
7479: IFFALSE 7495
// begin SetFuel ( unit , 40 ) ;
7481: LD_VAR 0 1
7485: PPUSH
7486: LD_INT 40
7488: PPUSH
7489: CALL_OW 240
// continue ;
7493: GO 7363
// end ; status := 6 ;
7495: LD_ADDR_VAR 0 12
7499: PUSH
7500: LD_INT 6
7502: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7503: LD_ADDR_VAR 0 10
7507: PUSH
7508: LD_VAR 0 10
7512: PPUSH
7513: LD_VAR 0 1
7517: PPUSH
7518: CALL_OW 74
7522: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7523: LD_INT 35
7525: PPUSH
7526: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7530: LD_VAR 0 1
7534: PPUSH
7535: LD_VAR 0 10
7539: PPUSH
7540: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7544: LD_VAR 0 1
7548: PPUSH
7549: LD_VAR 0 10
7553: PPUSH
7554: CALL_OW 296
7558: PUSH
7559: LD_INT 6
7561: LESS
7562: IFFALSE 7523
// SetFuel ( unit , 100 ) ;
7564: LD_VAR 0 1
7568: PPUSH
7569: LD_INT 100
7571: PPUSH
7572: CALL_OW 240
// status := 5 ;
7576: LD_ADDR_VAR 0 12
7580: PUSH
7581: LD_INT 5
7583: ST_TO_ADDR
// end ; if status = 1 then
7584: LD_VAR 0 12
7588: PUSH
7589: LD_INT 1
7591: EQUAL
7592: IFFALSE 7970
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7594: LD_ADDR_VAR 0 13
7598: PUSH
7599: LD_INT 81
7601: PUSH
7602: LD_VAR 0 1
7606: PPUSH
7607: CALL_OW 255
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 3
7618: PUSH
7619: LD_INT 21
7621: PUSH
7622: LD_INT 3
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PUSH
7633: LD_INT 91
7635: PUSH
7636: LD_VAR 0 1
7640: PUSH
7641: LD_VAR 0 15
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: LIST
7650: PUSH
7651: LD_INT 101
7653: PUSH
7654: LD_INT 1
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: PPUSH
7667: CALL_OW 69
7671: ST_TO_ADDR
// for i in enemy do
7672: LD_ADDR_VAR 0 5
7676: PUSH
7677: LD_VAR 0 13
7681: PUSH
7682: FOR_IN
7683: IFFALSE 7714
// if IsInvisible ( i ) then
7685: LD_VAR 0 5
7689: PPUSH
7690: CALL_OW 571
7694: IFFALSE 7712
// enemy := enemy diff i ;
7696: LD_ADDR_VAR 0 13
7700: PUSH
7701: LD_VAR 0 13
7705: PUSH
7706: LD_VAR 0 5
7710: DIFF
7711: ST_TO_ADDR
7712: GO 7682
7714: POP
7715: POP
// if enemy then
7716: LD_VAR 0 13
7720: IFFALSE 7770
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7722: LD_VAR 0 1
7726: PPUSH
7727: LD_VAR 0 1
7731: PPUSH
7732: CALL_OW 250
7736: PPUSH
7737: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7741: LD_VAR 0 1
7745: PPUSH
7746: LD_VAR 0 1
7750: PPUSH
7751: CALL_OW 251
7755: PPUSH
7756: CALL_OW 232
// status = 2 ;
7760: LD_ADDR_VAR 0 12
7764: PUSH
7765: LD_INT 2
7767: ST_TO_ADDR
// end else
7768: GO 7970
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7770: LD_VAR 0 1
7774: PPUSH
7775: LD_VAR 0 11
7779: PUSH
7780: LD_INT 2
7782: ARRAY
7783: PUSH
7784: LD_INT 1
7786: ARRAY
7787: PPUSH
7788: LD_VAR 0 11
7792: PUSH
7793: LD_INT 2
7795: ARRAY
7796: PUSH
7797: LD_INT 2
7799: ARRAY
7800: PPUSH
7801: CALL_OW 307
7805: IFTRUE 7819
7807: PUSH
7808: LD_VAR 0 1
7812: PPUSH
7813: CALL_OW 314
7817: NOT
7818: OR
7819: IFFALSE 7970
// begin wait ( 0 0$2 ) ;
7821: LD_INT 70
7823: PPUSH
7824: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7828: LD_VAR 0 11
7832: PUSH
7833: LD_INT 1
7835: ARRAY
7836: PUSH
7837: LD_INT 1
7839: PLUS
7840: PUSH
7841: LD_VAR 0 2
7845: GREATER
7846: IFFALSE 7871
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7848: LD_ADDR_VAR 0 11
7852: PUSH
7853: LD_VAR 0 11
7857: PPUSH
7858: LD_INT 1
7860: PPUSH
7861: LD_INT 1
7863: PPUSH
7864: CALL_OW 1
7868: ST_TO_ADDR
7869: GO 7902
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7871: LD_ADDR_VAR 0 11
7875: PUSH
7876: LD_VAR 0 11
7880: PPUSH
7881: LD_INT 1
7883: PPUSH
7884: LD_VAR 0 11
7888: PUSH
7889: LD_INT 1
7891: ARRAY
7892: PUSH
7893: LD_INT 1
7895: PLUS
7896: PPUSH
7897: CALL_OW 1
7901: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7902: LD_ADDR_VAR 0 11
7906: PUSH
7907: LD_VAR 0 11
7911: PPUSH
7912: LD_INT 2
7914: PPUSH
7915: LD_VAR 0 2
7919: PUSH
7920: LD_VAR 0 11
7924: PUSH
7925: LD_INT 1
7927: ARRAY
7928: ARRAY
7929: PPUSH
7930: CALL_OW 1
7934: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7935: LD_VAR 0 1
7939: PPUSH
7940: LD_VAR 0 11
7944: PUSH
7945: LD_INT 2
7947: ARRAY
7948: PUSH
7949: LD_INT 1
7951: ARRAY
7952: PPUSH
7953: LD_VAR 0 11
7957: PUSH
7958: LD_INT 2
7960: ARRAY
7961: PUSH
7962: LD_INT 2
7964: ARRAY
7965: PPUSH
7966: CALL_OW 114
// end ; end ; end ; if status = 2 then
7970: LD_VAR 0 12
7974: PUSH
7975: LD_INT 2
7977: EQUAL
7978: IFFALSE 8201
// begin if GetLives ( unit ) < 650 and safe_place then
7980: LD_VAR 0 1
7984: PPUSH
7985: CALL_OW 256
7989: PUSH
7990: LD_INT 650
7992: LESS
7993: IFFALSE 8001
7995: PUSH
7996: LD_VAR 0 16
8000: AND
8001: IFFALSE 8013
// begin status = 3 ;
8003: LD_ADDR_VAR 0 12
8007: PUSH
8008: LD_INT 3
8010: ST_TO_ADDR
// continue ;
8011: GO 7363
// end ; x := GetRememberedX ( unit ) ;
8013: LD_ADDR_VAR 0 6
8017: PUSH
8018: LD_VAR 0 1
8022: PPUSH
8023: CALL_OW 252
8027: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
8028: LD_ADDR_VAR 0 7
8032: PUSH
8033: LD_VAR 0 1
8037: PPUSH
8038: CALL_OW 253
8042: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
8043: LD_ADDR_VAR 0 13
8047: PUSH
8048: LD_INT 81
8050: PUSH
8051: LD_VAR 0 1
8055: PPUSH
8056: CALL_OW 255
8060: PUSH
8061: EMPTY
8062: LIST
8063: LIST
8064: PUSH
8065: LD_INT 92
8067: PUSH
8068: LD_VAR 0 6
8072: PUSH
8073: LD_VAR 0 7
8077: PUSH
8078: LD_VAR 0 15
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: PUSH
8089: LD_INT 101
8091: PUSH
8092: LD_INT 1
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: LIST
8103: PPUSH
8104: CALL_OW 69
8108: ST_TO_ADDR
// if enemy then
8109: LD_VAR 0 13
8113: IFFALSE 8184
// begin e := NearestUnitToUnit ( enemy , unit ) ;
8115: LD_ADDR_VAR 0 14
8119: PUSH
8120: LD_VAR 0 13
8124: PPUSH
8125: LD_VAR 0 1
8129: PPUSH
8130: CALL_OW 74
8134: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
8135: LD_VAR 0 14
8139: PPUSH
8140: LD_VAR 0 6
8144: PPUSH
8145: LD_VAR 0 7
8149: PPUSH
8150: CALL_OW 297
8154: PUSH
8155: LD_VAR 0 15
8159: PUSH
8160: LD_VAR 0 17
8164: PLUS
8165: LESS
8166: IFFALSE 8182
// ComAttackUnit ( unit , e ) ;
8168: LD_VAR 0 1
8172: PPUSH
8173: LD_VAR 0 14
8177: PPUSH
8178: CALL_OW 115
// end else
8182: GO 8201
// begin ComStop ( unit ) ;
8184: LD_VAR 0 1
8188: PPUSH
8189: CALL_OW 141
// status = 5 ;
8193: LD_ADDR_VAR 0 12
8197: PUSH
8198: LD_INT 5
8200: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
8201: LD_VAR 0 12
8205: PUSH
8206: LD_INT 3
8208: EQUAL
8209: IFFALSE 8217
8211: PUSH
8212: LD_VAR 0 16
8216: AND
8217: IFFALSE 8303
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
8219: LD_VAR 0 1
8223: PPUSH
8224: LD_VAR 0 16
8228: PUSH
8229: LD_INT 1
8231: ARRAY
8232: PPUSH
8233: LD_VAR 0 16
8237: PUSH
8238: LD_INT 2
8240: ARRAY
8241: PPUSH
8242: CALL_OW 111
// wait ( 0 0$1 ) ;
8246: LD_INT 35
8248: PPUSH
8249: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
8253: LD_VAR 0 1
8257: PPUSH
8258: LD_VAR 0 16
8262: PUSH
8263: LD_INT 1
8265: ARRAY
8266: PPUSH
8267: LD_VAR 0 16
8271: PUSH
8272: LD_INT 2
8274: ARRAY
8275: PPUSH
8276: CALL_OW 297
8280: PUSH
8281: LD_INT 4
8283: LESS
8284: IFFALSE 8219
// ComStop ( unit ) ;
8286: LD_VAR 0 1
8290: PPUSH
8291: CALL_OW 141
// status = 4 ;
8295: LD_ADDR_VAR 0 12
8299: PUSH
8300: LD_INT 4
8302: ST_TO_ADDR
// end ; if status = 4 then
8303: LD_VAR 0 12
8307: PUSH
8308: LD_INT 4
8310: EQUAL
8311: IFFALSE 8343
// begin repeat wait ( 0 0$1 ) ;
8313: LD_INT 35
8315: PPUSH
8316: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
8320: LD_VAR 0 1
8324: PPUSH
8325: CALL_OW 256
8329: PUSH
8330: LD_INT 1000
8332: EQUAL
8333: IFFALSE 8313
// status = 5 ;
8335: LD_ADDR_VAR 0 12
8339: PUSH
8340: LD_INT 5
8342: ST_TO_ADDR
// end ; if status = 5 then
8343: LD_VAR 0 12
8347: PUSH
8348: LD_INT 5
8350: EQUAL
8351: IFFALSE 8633
// begin p := 999 ;
8353: LD_ADDR_VAR 0 9
8357: PUSH
8358: LD_INT 999
8360: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
8361: LD_ADDR_VAR 0 14
8365: PUSH
8366: LD_VAR 0 11
8370: PUSH
8371: LD_INT 2
8373: ARRAY
8374: PUSH
8375: LD_INT 1
8377: ARRAY
8378: PUSH
8379: LD_VAR 0 11
8383: PUSH
8384: LD_INT 2
8386: ARRAY
8387: PUSH
8388: LD_INT 2
8390: ARRAY
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: ST_TO_ADDR
// c := 1 ;
8396: LD_ADDR_VAR 0 8
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8404: LD_ADDR_VAR 0 5
8408: PUSH
8409: DOUBLE
8410: LD_INT 1
8412: DEC
8413: ST_TO_ADDR
8414: LD_VAR 0 11
8418: PUSH
8419: LD_INT 2
8421: ARRAY
8422: PUSH
8423: LD_INT 2
8425: DIV
8426: PUSH
8427: FOR_TO
8428: IFFALSE 8560
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8430: LD_ADDR_VAR 0 6
8434: PUSH
8435: LD_VAR 0 1
8439: PPUSH
8440: LD_VAR 0 11
8444: PUSH
8445: LD_INT 2
8447: ARRAY
8448: PUSH
8449: LD_VAR 0 8
8453: ARRAY
8454: PPUSH
8455: LD_VAR 0 11
8459: PUSH
8460: LD_INT 2
8462: ARRAY
8463: PUSH
8464: LD_VAR 0 8
8468: PUSH
8469: LD_INT 1
8471: PLUS
8472: ARRAY
8473: PPUSH
8474: CALL_OW 297
8478: ST_TO_ADDR
// if x < p then
8479: LD_VAR 0 6
8483: PUSH
8484: LD_VAR 0 9
8488: LESS
8489: IFFALSE 8544
// begin p := x ;
8491: LD_ADDR_VAR 0 9
8495: PUSH
8496: LD_VAR 0 6
8500: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8501: LD_ADDR_VAR 0 14
8505: PUSH
8506: LD_VAR 0 11
8510: PUSH
8511: LD_INT 2
8513: ARRAY
8514: PUSH
8515: LD_VAR 0 8
8519: ARRAY
8520: PUSH
8521: LD_VAR 0 11
8525: PUSH
8526: LD_INT 2
8528: ARRAY
8529: PUSH
8530: LD_VAR 0 8
8534: PUSH
8535: LD_INT 1
8537: PLUS
8538: ARRAY
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: ST_TO_ADDR
// end ; c = c + 2 ;
8544: LD_ADDR_VAR 0 8
8548: PUSH
8549: LD_VAR 0 8
8553: PUSH
8554: LD_INT 2
8556: PLUS
8557: ST_TO_ADDR
// end ;
8558: GO 8427
8560: POP
8561: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8562: LD_VAR 0 1
8566: PPUSH
8567: LD_VAR 0 14
8571: PUSH
8572: LD_INT 1
8574: ARRAY
8575: PPUSH
8576: LD_VAR 0 14
8580: PUSH
8581: LD_INT 2
8583: ARRAY
8584: PPUSH
8585: CALL_OW 111
// wait ( 0 0$1 ) ;
8589: LD_INT 35
8591: PPUSH
8592: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8596: LD_VAR 0 1
8600: PPUSH
8601: LD_VAR 0 14
8605: PUSH
8606: LD_INT 1
8608: ARRAY
8609: PPUSH
8610: LD_VAR 0 14
8614: PUSH
8615: LD_INT 2
8617: ARRAY
8618: PPUSH
8619: CALL_OW 307
8623: IFFALSE 8562
// status = 1 ;
8625: LD_ADDR_VAR 0 12
8629: PUSH
8630: LD_INT 1
8632: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8633: LD_VAR 0 1
8637: PPUSH
8638: CALL_OW 301
8642: IFFALSE 7363
// end ;
8644: LD_VAR 0 4
8648: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8649: LD_INT 0
8651: PPUSH
8652: PPUSH
8653: PPUSH
8654: PPUSH
8655: PPUSH
8656: PPUSH
8657: PPUSH
8658: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8659: LD_VAR 0 1
8663: NOT
8664: IFTRUE 8673
8666: PUSH
8667: LD_VAR 0 3
8671: NOT
8672: OR
8673: IFTRUE 8697
8675: PUSH
8676: LD_VAR 0 4
8680: PUSH
8681: LD_INT 1
8683: PUSH
8684: LD_INT 2
8686: PUSH
8687: LD_INT 0
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: LIST
8694: IN
8695: NOT
8696: OR
8697: IFTRUE 8706
8699: PUSH
8700: LD_VAR 0 6
8704: NOT
8705: OR
8706: IFTRUE 8715
8708: PUSH
8709: LD_VAR 0 7
8713: NOT
8714: OR
8715: IFFALSE 8719
// exit ;
8717: GO 9110
// sex_id :=  ;
8719: LD_ADDR_VAR 0 14
8723: PUSH
8724: LD_STRING 
8726: ST_TO_ADDR
// case class of 1 :
8727: LD_VAR 0 5
8731: PUSH
8732: LD_INT 1
8734: DOUBLE
8735: EQUAL
8736: IFTRUE 8740
8738: GO 8751
8740: POP
// class_id := Sol ; 2 :
8741: LD_ADDR_VAR 0 15
8745: PUSH
8746: LD_STRING Sol
8748: ST_TO_ADDR
8749: GO 8809
8751: LD_INT 2
8753: DOUBLE
8754: EQUAL
8755: IFTRUE 8759
8757: GO 8770
8759: POP
// class_id := Eng ; 3 :
8760: LD_ADDR_VAR 0 15
8764: PUSH
8765: LD_STRING Eng
8767: ST_TO_ADDR
8768: GO 8809
8770: LD_INT 3
8772: DOUBLE
8773: EQUAL
8774: IFTRUE 8778
8776: GO 8789
8778: POP
// class_id := Mech ; 4 :
8779: LD_ADDR_VAR 0 15
8783: PUSH
8784: LD_STRING Mech
8786: ST_TO_ADDR
8787: GO 8809
8789: LD_INT 4
8791: DOUBLE
8792: EQUAL
8793: IFTRUE 8797
8795: GO 8808
8797: POP
// class_id := Sci ; end ;
8798: LD_ADDR_VAR 0 15
8802: PUSH
8803: LD_STRING Sci
8805: ST_TO_ADDR
8806: GO 8809
8808: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8809: LD_ADDR_VAR 0 11
8813: PUSH
8814: LD_VAR 0 1
8818: PPUSH
8819: LD_INT 25
8821: PUSH
8822: LD_VAR 0 5
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: PPUSH
8831: CALL_OW 72
8835: ST_TO_ADDR
// if tmp then
8836: LD_VAR 0 11
8840: IFFALSE 8852
// units := tmp ;
8842: LD_ADDR_VAR 0 1
8846: PUSH
8847: LD_VAR 0 11
8851: ST_TO_ADDR
// if sex then
8852: LD_VAR 0 4
8856: IFFALSE 8912
// begin if sex = sex_female then
8858: LD_VAR 0 4
8862: PUSH
8863: LD_INT 2
8865: EQUAL
8866: IFFALSE 8876
// sex_id := F ;
8868: LD_ADDR_VAR 0 14
8872: PUSH
8873: LD_STRING F
8875: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8876: LD_ADDR_VAR 0 1
8880: PUSH
8881: LD_VAR 0 1
8885: PPUSH
8886: LD_INT 26
8888: PUSH
8889: LD_VAR 0 4
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PPUSH
8898: CALL_OW 72
8902: ST_TO_ADDR
// if not units then
8903: LD_VAR 0 1
8907: NOT
8908: IFFALSE 8912
// exit ;
8910: GO 9110
// end ; unit_id := id ;
8912: LD_ADDR_VAR 0 12
8916: PUSH
8917: LD_VAR 0 6
8921: ST_TO_ADDR
// if unit_id > units then
8922: LD_VAR 0 12
8926: PUSH
8927: LD_VAR 0 1
8931: GREATER
8932: IFFALSE 8942
// unit_id := 1 ;
8934: LD_ADDR_VAR 0 12
8938: PUSH
8939: LD_INT 1
8941: ST_TO_ADDR
// if not units [ unit_id ] then
8942: LD_VAR 0 1
8946: PUSH
8947: LD_VAR 0 12
8951: ARRAY
8952: NOT
8953: IFFALSE 8957
// exit ;
8955: GO 9110
// unit := units [ unit_id ] ;
8957: LD_ADDR_VAR 0 10
8961: PUSH
8962: LD_VAR 0 1
8966: PUSH
8967: LD_VAR 0 12
8971: ARRAY
8972: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8973: LD_ADDR_VAR 0 13
8977: PUSH
8978: LD_STRING D
8980: PUSH
8981: LD_VAR 0 3
8985: STR
8986: PUSH
8987: LD_STRING -
8989: STR
8990: PUSH
8991: LD_VAR 0 14
8995: STR
8996: PUSH
8997: LD_VAR 0 15
9001: STR
9002: PUSH
9003: LD_VAR 0 6
9007: STR
9008: PUSH
9009: LD_STRING -
9011: STR
9012: PUSH
9013: LD_VAR 0 7
9017: STR
9018: ST_TO_ADDR
// case type of 0 :
9019: LD_VAR 0 2
9023: PUSH
9024: LD_INT 0
9026: DOUBLE
9027: EQUAL
9028: IFTRUE 9032
9030: GO 9049
9032: POP
// Say ( unit , dialog_id ) ; 1 :
9033: LD_VAR 0 10
9037: PPUSH
9038: LD_VAR 0 13
9042: PPUSH
9043: CALL_OW 88
9047: GO 9100
9049: LD_INT 1
9051: DOUBLE
9052: EQUAL
9053: IFTRUE 9057
9055: GO 9074
9057: POP
// SayRadio ( unit , dialog_id ) ; 2 :
9058: LD_VAR 0 10
9062: PPUSH
9063: LD_VAR 0 13
9067: PPUSH
9068: CALL_OW 94
9072: GO 9100
9074: LD_INT 2
9076: DOUBLE
9077: EQUAL
9078: IFTRUE 9082
9080: GO 9099
9082: POP
// ForceSay ( unit , dialog_id ) ; end ;
9083: LD_VAR 0 10
9087: PPUSH
9088: LD_VAR 0 13
9092: PPUSH
9093: CALL_OW 91
9097: GO 9100
9099: POP
// result := unit ;
9100: LD_ADDR_VAR 0 8
9104: PUSH
9105: LD_VAR 0 10
9109: ST_TO_ADDR
// end ;
9110: LD_VAR 0 8
9114: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
9115: LD_INT 0
9117: PPUSH
9118: PPUSH
9119: PPUSH
// result := false ;
9120: LD_ADDR_VAR 0 4
9124: PUSH
9125: LD_INT 0
9127: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
9128: LD_VAR 0 1
9132: NOT
9133: IFTRUE 9142
9135: PUSH
9136: LD_VAR 0 2
9140: NOT
9141: OR
9142: IFTRUE 9155
9144: PUSH
9145: LD_VAR 0 1
9149: PPUSH
9150: CALL_OW 310
9154: OR
9155: IFFALSE 9159
// exit ;
9157: GO 9363
// if distance < 0 then
9159: LD_VAR 0 3
9163: PUSH
9164: LD_INT 0
9166: LESS
9167: IFFALSE 9177
// distance := 0 ;
9169: LD_ADDR_VAR 0 3
9173: PUSH
9174: LD_INT 0
9176: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
9177: LD_ADDR_VAR 0 6
9181: PUSH
9182: LD_VAR 0 2
9186: PPUSH
9187: CALL_OW 266
9191: PPUSH
9192: LD_VAR 0 2
9196: PPUSH
9197: CALL_OW 250
9201: PPUSH
9202: LD_VAR 0 2
9206: PPUSH
9207: CALL_OW 251
9211: PPUSH
9212: LD_VAR 0 2
9216: PPUSH
9217: CALL_OW 254
9221: PPUSH
9222: LD_VAR 0 2
9226: PPUSH
9227: CALL_OW 248
9231: PPUSH
9232: LD_INT 1
9234: PPUSH
9235: CALL 52946 0 6
9239: ST_TO_ADDR
// if not entrance then
9240: LD_VAR 0 6
9244: NOT
9245: IFFALSE 9249
// exit ;
9247: GO 9363
// for i in entrance do
9249: LD_ADDR_VAR 0 5
9253: PUSH
9254: LD_VAR 0 6
9258: PUSH
9259: FOR_IN
9260: IFFALSE 9361
// begin if not distance then
9262: LD_VAR 0 3
9266: NOT
9267: IFFALSE 9312
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
9269: LD_VAR 0 1
9273: PPUSH
9274: LD_VAR 0 5
9278: PUSH
9279: LD_INT 1
9281: ARRAY
9282: PPUSH
9283: LD_VAR 0 5
9287: PUSH
9288: LD_INT 2
9290: ARRAY
9291: PPUSH
9292: CALL_OW 307
9296: IFFALSE 9310
// begin result := true ;
9298: LD_ADDR_VAR 0 4
9302: PUSH
9303: LD_INT 1
9305: ST_TO_ADDR
// exit ;
9306: POP
9307: POP
9308: GO 9363
// end ; end else
9310: GO 9359
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
9312: LD_VAR 0 1
9316: PPUSH
9317: LD_VAR 0 5
9321: PUSH
9322: LD_INT 1
9324: ARRAY
9325: PPUSH
9326: LD_VAR 0 5
9330: PUSH
9331: LD_INT 2
9333: ARRAY
9334: PPUSH
9335: CALL_OW 297
9339: PUSH
9340: LD_VAR 0 3
9344: LESSEQUAL
9345: IFFALSE 9359
// begin result := true ;
9347: LD_ADDR_VAR 0 4
9351: PUSH
9352: LD_INT 1
9354: ST_TO_ADDR
// exit ;
9355: POP
9356: POP
9357: GO 9363
// end ; end ; end ;
9359: GO 9259
9361: POP
9362: POP
// end ;
9363: LD_VAR 0 4
9367: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
9368: LD_INT 0
9370: PPUSH
9371: PPUSH
9372: PPUSH
// result := false ;
9373: LD_ADDR_VAR 0 3
9377: PUSH
9378: LD_INT 0
9380: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
9381: LD_VAR 0 1
9385: NOT
9386: IFTRUE 9395
9388: PUSH
9389: LD_VAR 0 2
9393: NOT
9394: OR
9395: IFTRUE 9409
9397: PUSH
9398: LD_VAR 0 1
9402: PPUSH
9403: CALL_OW 302
9407: NOT
9408: OR
9409: IFTRUE 9423
9411: PUSH
9412: LD_VAR 0 2
9416: PPUSH
9417: CALL_OW 302
9421: NOT
9422: OR
9423: IFFALSE 9427
// exit ;
9425: GO 9590
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9427: LD_VAR 0 1
9431: PPUSH
9432: LD_INT 81
9434: PUSH
9435: LD_VAR 0 1
9439: PPUSH
9440: CALL_OW 255
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PUSH
9449: LD_INT 3
9451: PUSH
9452: LD_INT 21
9454: PUSH
9455: LD_INT 3
9457: PUSH
9458: EMPTY
9459: LIST
9460: LIST
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: PPUSH
9470: CALL_OW 69
9474: PPUSH
9475: LD_VAR 0 1
9479: PPUSH
9480: CALL_OW 74
9484: PPUSH
9485: CALL_OW 296
9489: PUSH
9490: LD_INT 8
9492: LESS
9493: IFFALSE 9497
// exit ;
9495: GO 9590
// building := IsInUnit ( unit2 ) ;
9497: LD_ADDR_VAR 0 5
9501: PUSH
9502: LD_VAR 0 2
9506: PPUSH
9507: CALL_OW 310
9511: ST_TO_ADDR
// if building then
9512: LD_VAR 0 5
9516: IFFALSE 9543
// result := IsNearbyEntrance ( unit , building , 2 ) else
9518: LD_ADDR_VAR 0 3
9522: PUSH
9523: LD_VAR 0 1
9527: PPUSH
9528: LD_VAR 0 5
9532: PPUSH
9533: LD_INT 2
9535: PPUSH
9536: CALL 9115 0 3
9540: ST_TO_ADDR
9541: GO 9590
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9543: LD_ADDR_VAR 0 3
9547: PUSH
9548: LD_VAR 0 1
9552: PPUSH
9553: LD_VAR 0 2
9557: PPUSH
9558: CALL_OW 296
9562: PUSH
9563: LD_INT 6
9565: LESS
9566: IFFALSE 9589
9568: PUSH
9569: LD_VAR 0 2
9573: PPUSH
9574: CALL_OW 255
9578: PPUSH
9579: LD_VAR 0 1
9583: PPUSH
9584: CALL_OW 292
9588: AND
9589: ST_TO_ADDR
// end ;
9590: LD_VAR 0 3
9594: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9595: LD_INT 0
9597: PPUSH
9598: PPUSH
9599: PPUSH
9600: PPUSH
// uc_side = 0 ;
9601: LD_ADDR_OWVAR 20
9605: PUSH
9606: LD_INT 0
9608: ST_TO_ADDR
// uc_nation = 0 ;
9609: LD_ADDR_OWVAR 21
9613: PUSH
9614: LD_INT 0
9616: ST_TO_ADDR
// nat_area := nature_area ;
9617: LD_ADDR_VAR 0 4
9621: PUSH
9622: LD_INT 24
9624: ST_TO_ADDR
// InitHc ;
9625: CALL_OW 19
// for i = 1 to 4 do
9629: LD_ADDR_VAR 0 2
9633: PUSH
9634: DOUBLE
9635: LD_INT 1
9637: DEC
9638: ST_TO_ADDR
9639: LD_INT 4
9641: PUSH
9642: FOR_TO
9643: IFFALSE 9690
// begin hc_class = 18 ;
9645: LD_ADDR_OWVAR 28
9649: PUSH
9650: LD_INT 18
9652: ST_TO_ADDR
// hc_gallery =  ;
9653: LD_ADDR_OWVAR 33
9657: PUSH
9658: LD_STRING 
9660: ST_TO_ADDR
// animal := CreateHuman ;
9661: LD_ADDR_VAR 0 3
9665: PUSH
9666: CALL_OW 44
9670: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9671: LD_VAR 0 3
9675: PPUSH
9676: LD_VAR 0 4
9680: PPUSH
9681: LD_INT 0
9683: PPUSH
9684: CALL_OW 49
// end ;
9688: GO 9642
9690: POP
9691: POP
// for i = 1 to 3 do
9692: LD_ADDR_VAR 0 2
9696: PUSH
9697: DOUBLE
9698: LD_INT 1
9700: DEC
9701: ST_TO_ADDR
9702: LD_INT 3
9704: PUSH
9705: FOR_TO
9706: IFFALSE 9800
// begin hc_class = class_apeman ;
9708: LD_ADDR_OWVAR 28
9712: PUSH
9713: LD_INT 12
9715: ST_TO_ADDR
// hc_gallery =  ;
9716: LD_ADDR_OWVAR 33
9720: PUSH
9721: LD_STRING 
9723: ST_TO_ADDR
// hc_agressivity = 0 ;
9724: LD_ADDR_OWVAR 35
9728: PUSH
9729: LD_INT 0
9731: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9732: LD_ADDR_OWVAR 31
9736: PUSH
9737: LD_INT 1
9739: PPUSH
9740: LD_INT 3
9742: PPUSH
9743: CALL_OW 12
9747: PUSH
9748: LD_INT 1
9750: PPUSH
9751: LD_INT 3
9753: PPUSH
9754: CALL_OW 12
9758: PUSH
9759: LD_INT 0
9761: PUSH
9762: LD_INT 0
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: ST_TO_ADDR
// animal := CreateHuman ;
9771: LD_ADDR_VAR 0 3
9775: PUSH
9776: CALL_OW 44
9780: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9781: LD_VAR 0 3
9785: PPUSH
9786: LD_VAR 0 4
9790: PPUSH
9791: LD_INT 0
9793: PPUSH
9794: CALL_OW 49
// end ;
9798: GO 9705
9800: POP
9801: POP
// for i = 1 to 3 do
9802: LD_ADDR_VAR 0 2
9806: PUSH
9807: DOUBLE
9808: LD_INT 1
9810: DEC
9811: ST_TO_ADDR
9812: LD_INT 3
9814: PUSH
9815: FOR_TO
9816: IFFALSE 9863
// begin hc_class = 13 ;
9818: LD_ADDR_OWVAR 28
9822: PUSH
9823: LD_INT 13
9825: ST_TO_ADDR
// hc_gallery =  ;
9826: LD_ADDR_OWVAR 33
9830: PUSH
9831: LD_STRING 
9833: ST_TO_ADDR
// animal := CreateHuman ;
9834: LD_ADDR_VAR 0 3
9838: PUSH
9839: CALL_OW 44
9843: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9844: LD_VAR 0 3
9848: PPUSH
9849: LD_VAR 0 4
9853: PPUSH
9854: LD_INT 0
9856: PPUSH
9857: CALL_OW 49
// end ;
9861: GO 9815
9863: POP
9864: POP
// for i = 1 to 3 do
9865: LD_ADDR_VAR 0 2
9869: PUSH
9870: DOUBLE
9871: LD_INT 1
9873: DEC
9874: ST_TO_ADDR
9875: LD_INT 3
9877: PUSH
9878: FOR_TO
9879: IFFALSE 9924
// begin hc_class = 20 ;
9881: LD_ADDR_OWVAR 28
9885: PUSH
9886: LD_INT 20
9888: ST_TO_ADDR
// hc_gallery =  ;
9889: LD_ADDR_OWVAR 33
9893: PUSH
9894: LD_STRING 
9896: ST_TO_ADDR
// animal := CreateHuman ;
9897: LD_ADDR_VAR 0 3
9901: PUSH
9902: CALL_OW 44
9906: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9907: LD_VAR 0 3
9911: PPUSH
9912: LD_INT 4
9914: PPUSH
9915: LD_INT 0
9917: PPUSH
9918: CALL_OW 49
// end ;
9922: GO 9878
9924: POP
9925: POP
// end ; end_of_file
9926: LD_VAR 0 1
9930: RET
// export function Action ; begin
9931: LD_INT 0
9933: PPUSH
// InGameOn ;
9934: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9938: LD_EXP 15
9942: PPUSH
9943: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9947: LD_EXP 15
9951: PPUSH
9952: LD_STRING D1-JMM-1
9954: PPUSH
9955: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9959: LD_EXP 16
9963: PPUSH
9964: LD_STRING D1-Roth-1
9966: PPUSH
9967: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9971: LD_EXP 15
9975: PPUSH
9976: LD_STRING D1-JMM-2
9978: PPUSH
9979: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9983: LD_EXP 16
9987: PPUSH
9988: LD_STRING D1-Roth-2
9990: PPUSH
9991: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9995: LD_EXP 15
9999: PPUSH
10000: LD_STRING D1-JMM-3
10002: PPUSH
10003: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
10007: LD_EXP 16
10011: PPUSH
10012: LD_STRING D1-Roth-3
10014: PPUSH
10015: CALL_OW 88
// ComInvisible ( Roth ) ;
10019: LD_EXP 16
10023: PPUSH
10024: CALL_OW 152
// wait ( 0 0$1.3 ) ;
10028: LD_INT 46
10030: PPUSH
10031: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
10035: LD_EXP 15
10039: PPUSH
10040: LD_STRING D1-JMM-4
10042: PPUSH
10043: CALL_OW 88
// wait ( 0 0$0.3 ) ;
10047: LD_INT 10
10049: PPUSH
10050: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
10054: LD_EXP 16
10058: PPUSH
10059: LD_EXP 15
10063: PPUSH
10064: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
10068: LD_EXP 15
10072: PPUSH
10073: LD_STRING D1-JMM-4a
10075: PPUSH
10076: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
10080: LD_EXP 16
10084: PPUSH
10085: LD_STRING D1-Roth-4
10087: PPUSH
10088: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
10092: LD_EXP 15
10096: PPUSH
10097: LD_STRING D1-JMM-5
10099: PPUSH
10100: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
10104: LD_EXP 16
10108: PPUSH
10109: LD_STRING D1-Roth-5
10111: PPUSH
10112: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
10116: LD_EXP 15
10120: PPUSH
10121: LD_STRING D1-JMM-6
10123: PPUSH
10124: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
10128: LD_EXP 16
10132: PPUSH
10133: LD_STRING D1-Roth-6
10135: PPUSH
10136: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
10140: LD_EXP 15
10144: PPUSH
10145: LD_STRING D1-JMM-7
10147: PPUSH
10148: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
10152: LD_EXP 17
10156: PPUSH
10157: LD_EXP 15
10161: PPUSH
10162: CALL_OW 250
10166: PPUSH
10167: LD_EXP 15
10171: PPUSH
10172: CALL_OW 251
10176: PPUSH
10177: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
10181: LD_EXP 16
10185: PPUSH
10186: LD_STRING D1-Roth-7
10188: PPUSH
10189: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
10193: LD_INT 10
10195: PPUSH
10196: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
10200: LD_EXP 17
10204: PPUSH
10205: LD_EXP 15
10209: PPUSH
10210: CALL_OW 296
10214: PUSH
10215: LD_INT 6
10217: LESS
10218: IFFALSE 10193
// ComTurnUnit ( Powell , JMM ) ;
10220: LD_EXP 17
10224: PPUSH
10225: LD_EXP 15
10229: PPUSH
10230: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
10234: LD_EXP 17
10238: PPUSH
10239: LD_STRING D1-Pow-7
10241: PPUSH
10242: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
10246: LD_EXP 15
10250: PPUSH
10251: LD_EXP 17
10255: PPUSH
10256: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
10260: LD_EXP 16
10264: PPUSH
10265: LD_EXP 17
10269: PPUSH
10270: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
10274: LD_EXP 15
10278: PPUSH
10279: LD_STRING D1-JMM-8
10281: PPUSH
10282: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
10286: LD_EXP 17
10290: PPUSH
10291: LD_STRING D1-Pow-8
10293: PPUSH
10294: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
10298: LD_EXP 15
10302: PPUSH
10303: LD_STRING D1-JMM-9
10305: PPUSH
10306: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
10310: LD_EXP 17
10314: PPUSH
10315: LD_INT 124
10317: PPUSH
10318: LD_INT 61
10320: PPUSH
10321: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10325: LD_INT 35
10327: PPUSH
10328: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
10332: LD_EXP 15
10336: PPUSH
10337: LD_EXP 17
10341: PPUSH
10342: CALL_OW 296
10346: PUSH
10347: LD_INT 6
10349: GREATER
10350: IFFALSE 10325
// SayRadio ( Powell , D1-Pow-9 ) ;
10352: LD_EXP 17
10356: PPUSH
10357: LD_STRING D1-Pow-9
10359: PPUSH
10360: CALL_OW 94
// RemoveUnit ( Powell ) ;
10364: LD_EXP 17
10368: PPUSH
10369: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
10373: LD_EXP 17
10377: PPUSH
10378: LD_INT 18
10380: PPUSH
10381: CALL_OW 52
// if Joan and not Joan in selected then
10385: LD_EXP 37
10389: IFFALSE 10404
10391: PUSH
10392: LD_EXP 37
10396: PUSH
10397: LD_EXP 3
10401: IN
10402: NOT
10403: AND
10404: IFFALSE 10418
// SayRadio ( Joan , D1-Joan-9 ) ;
10406: LD_EXP 37
10410: PPUSH
10411: LD_STRING D1-Joan-9
10413: PPUSH
10414: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10418: LD_EXP 16
10422: PPUSH
10423: LD_EXP 15
10427: PPUSH
10428: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10432: LD_EXP 15
10436: PPUSH
10437: LD_EXP 16
10441: PPUSH
10442: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10446: LD_EXP 16
10450: PPUSH
10451: LD_STRING D1-Roth-9
10453: PPUSH
10454: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10458: LD_EXP 15
10462: PPUSH
10463: LD_STRING D1-JMM-10
10465: PPUSH
10466: CALL_OW 88
// InGameOff ;
10470: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10474: LD_STRING M1
10476: PPUSH
10477: CALL_OW 337
// if Difficulty < 3 then
10481: LD_OWVAR 67
10485: PUSH
10486: LD_INT 3
10488: LESS
10489: IFFALSE 10501
// ChangeSideFog ( 4 , 7 ) ;
10491: LD_INT 4
10493: PPUSH
10494: LD_INT 7
10496: PPUSH
10497: CALL_OW 343
// ToLua ( enableBioCharacter(BIO_ROTH) ) ;
10501: LD_STRING enableBioCharacter(BIO_ROTH)
10503: PPUSH
10504: CALL_OW 559
// SaveForQuickRestart ;
10508: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10512: LD_INT 7
10514: PPUSH
10515: LD_INT 1
10517: PPUSH
10518: LD_INT 2
10520: PPUSH
10521: LD_INT 1
10523: PPUSH
10524: CALL_OW 80
// wait ( 0 0$3 ) ;
10528: LD_INT 105
10530: PPUSH
10531: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10535: LD_EXP 16
10539: PPUSH
10540: LD_INT 124
10542: PPUSH
10543: LD_INT 18
10545: PPUSH
10546: CALL_OW 111
// AddComInvisible ( Roth ) ;
10550: LD_EXP 16
10554: PPUSH
10555: CALL_OW 212
// wait ( 0 0$30 ) ;
10559: LD_INT 1050
10561: PPUSH
10562: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10566: LD_EXP 16
10570: PPUSH
10571: LD_INT 2100
10573: PPUSH
10574: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10578: LD_EXP 16
10582: PPUSH
10583: LD_INT 156
10585: PPUSH
10586: LD_INT 20
10588: PPUSH
10589: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10593: LD_EXP 16
10597: PPUSH
10598: LD_INT 178
10600: PPUSH
10601: LD_INT 42
10603: PPUSH
10604: CALL_OW 171
// AddComInvisible ( Roth ) ;
10608: LD_EXP 16
10612: PPUSH
10613: CALL_OW 212
// end ;
10617: LD_VAR 0 1
10621: RET
// every 0 0$1 do var i , tmp ;
10622: GO 10624
10624: DISABLE
10625: LD_INT 0
10627: PPUSH
10628: PPUSH
// begin tmp := selected union friends ;
10629: LD_ADDR_VAR 0 2
10633: PUSH
10634: LD_EXP 3
10638: PUSH
10639: LD_EXP 4
10643: UNION
10644: ST_TO_ADDR
// if gamma_commander = 1 then
10645: LD_EXP 10
10649: PUSH
10650: LD_INT 1
10652: EQUAL
10653: IFFALSE 10671
// tmp := tmp union Donaldson ;
10655: LD_ADDR_VAR 0 2
10659: PUSH
10660: LD_VAR 0 2
10664: PUSH
10665: LD_EXP 25
10669: UNION
10670: ST_TO_ADDR
// if gamma_commander = 2 then
10671: LD_EXP 10
10675: PUSH
10676: LD_INT 2
10678: EQUAL
10679: IFFALSE 10697
// tmp := tmp union Brown ;
10681: LD_ADDR_VAR 0 2
10685: PUSH
10686: LD_VAR 0 2
10690: PUSH
10691: LD_EXP 29
10695: UNION
10696: ST_TO_ADDR
// if not tmp then
10697: LD_VAR 0 2
10701: NOT
10702: IFFALSE 10706
// exit ;
10704: GO 10778
// repeat wait ( 0 0$1 ) ;
10706: LD_INT 35
10708: PPUSH
10709: CALL_OW 67
// for i in tmp do
10713: LD_ADDR_VAR 0 1
10717: PUSH
10718: LD_VAR 0 2
10722: PUSH
10723: FOR_IN
10724: IFFALSE 10769
// if CanSpot ( JMM , i ) then
10726: LD_EXP 15
10730: PPUSH
10731: LD_VAR 0 1
10735: PPUSH
10736: CALL 9368 0 2
10740: IFFALSE 10767
// begin tmp := tmp diff i ;
10742: LD_ADDR_VAR 0 2
10746: PUSH
10747: LD_VAR 0 2
10751: PUSH
10752: LD_VAR 0 1
10756: DIFF
10757: ST_TO_ADDR
// Spot ( i ) ;
10758: LD_VAR 0 1
10762: PPUSH
10763: CALL 10781 0 1
// end ;
10767: GO 10723
10769: POP
10770: POP
// until not tmp ;
10771: LD_VAR 0 2
10775: NOT
10776: IFFALSE 10706
// end ;
10778: PPOPN 2
10780: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10781: LD_INT 0
10783: PPUSH
10784: PPUSH
10785: PPUSH
10786: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10787: LD_VAR 0 1
10791: NOT
10792: IFTRUE 10809
10794: PUSH
10795: LD_VAR 0 1
10799: PPUSH
10800: CALL_OW 255
10804: PUSH
10805: LD_INT 4
10807: NONEQUAL
10808: OR
10809: IFTRUE 10822
10811: PUSH
10812: LD_VAR 0 1
10816: PPUSH
10817: CALL_OW 555
10821: OR
10822: IFTRUE 10836
10824: PUSH
10825: LD_VAR 0 1
10829: PPUSH
10830: CALL_OW 302
10834: NOT
10835: OR
10836: IFFALSE 10840
// exit ;
10838: GO 12754
// InGameOn ;
10840: CALL_OW 8
// side := 7 ;
10844: LD_ADDR_VAR 0 4
10848: PUSH
10849: LD_INT 7
10851: ST_TO_ADDR
// joined := false ;
10852: LD_ADDR_VAR 0 5
10856: PUSH
10857: LD_INT 0
10859: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10860: LD_ADDR_VAR 0 3
10864: PUSH
10865: LD_VAR 0 1
10869: PPUSH
10870: CALL_OW 310
10874: ST_TO_ADDR
// if building then
10875: LD_VAR 0 3
10879: IFFALSE 10938
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10881: LD_EXP 15
10885: PPUSH
10886: LD_VAR 0 1
10890: PPUSH
10891: CALL_OW 255
10895: PPUSH
10896: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10900: LD_EXP 15
10904: PPUSH
10905: LD_VAR 0 3
10909: PPUSH
10910: CALL_OW 120
// repeat wait ( 3 ) ;
10914: LD_INT 3
10916: PPUSH
10917: CALL_OW 67
// until IsInUnit ( JMM ) ;
10921: LD_EXP 15
10925: PPUSH
10926: CALL_OW 310
10930: IFFALSE 10914
// DialogueOn ;
10932: CALL_OW 6
// end else
10936: GO 10970
// begin ComTurnUnit ( JMM , unit ) ;
10938: LD_EXP 15
10942: PPUSH
10943: LD_VAR 0 1
10947: PPUSH
10948: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10952: LD_VAR 0 1
10956: PPUSH
10957: LD_EXP 15
10961: PPUSH
10962: CALL_OW 119
// DialogueOn ;
10966: CALL_OW 6
// end ; if unit = Joan then
10970: LD_VAR 0 1
10974: PUSH
10975: LD_EXP 37
10979: EQUAL
10980: IFFALSE 11090
// begin joined := true ;
10982: LD_ADDR_VAR 0 5
10986: PUSH
10987: LD_INT 1
10989: ST_TO_ADDR
// if Joan in selected then
10990: LD_EXP 37
10994: PUSH
10995: LD_EXP 3
10999: IN
11000: IFFALSE 11028
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
11002: LD_EXP 37
11006: PPUSH
11007: LD_STRING D3-Joan-Joan-1
11009: PPUSH
11010: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
11014: LD_EXP 15
11018: PPUSH
11019: LD_STRING D3-Joan-JMM-1
11021: PPUSH
11022: CALL_OW 88
// end else
11026: GO 11088
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
11028: LD_EXP 37
11032: PPUSH
11033: LD_STRING D4-Joan-Joan-1
11035: PPUSH
11036: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
11040: LD_EXP 15
11044: PPUSH
11045: LD_STRING D4-Joan-JMM-1
11047: PPUSH
11048: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
11052: LD_EXP 37
11056: PPUSH
11057: LD_STRING D4-Joan-Joan-2
11059: PPUSH
11060: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
11064: LD_EXP 15
11068: PPUSH
11069: LD_STRING D4-Joan-JMM-2
11071: PPUSH
11072: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
11076: LD_EXP 37
11080: PPUSH
11081: LD_STRING D4-Joan-Joan-3
11083: PPUSH
11084: CALL_OW 88
// end ; end else
11088: GO 12562
// if unit = Lisa then
11090: LD_VAR 0 1
11094: PUSH
11095: LD_EXP 24
11099: EQUAL
11100: IFFALSE 11292
// begin if Lisa in selected then
11102: LD_EXP 24
11106: PUSH
11107: LD_EXP 3
11111: IN
11112: IFFALSE 11225
// begin if GetSide ( Joan ) = 7 then
11114: LD_EXP 37
11118: PPUSH
11119: CALL_OW 255
11123: PUSH
11124: LD_INT 7
11126: EQUAL
11127: IFFALSE 11191
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
11129: LD_EXP 24
11133: PPUSH
11134: LD_STRING D3-LisaJ-Lisa-1
11136: PPUSH
11137: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
11141: LD_EXP 15
11145: PPUSH
11146: LD_STRING D3-LisaJ-JMM-1
11148: PPUSH
11149: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
11153: LD_EXP 24
11157: PPUSH
11158: LD_STRING D3-LisaJ-Lisa-2
11160: PPUSH
11161: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
11165: LD_EXP 15
11169: PPUSH
11170: LD_STRING D3-LisaJ-JMM-2
11172: PPUSH
11173: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
11177: LD_EXP 24
11181: PPUSH
11182: LD_STRING D3-LisaJ-Lisa-3
11184: PPUSH
11185: CALL_OW 88
// end else
11189: GO 11223
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
11191: LD_EXP 24
11195: PPUSH
11196: LD_STRING D3-LisaL-Lisa-1
11198: PPUSH
11199: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
11203: LD_EXP 15
11207: PPUSH
11208: LD_STRING D3-LisaL-JMM-1
11210: PPUSH
11211: CALL_OW 88
// joined := true ;
11215: LD_ADDR_VAR 0 5
11219: PUSH
11220: LD_INT 1
11222: ST_TO_ADDR
// end ; end else
11223: GO 11290
// begin if GetSide ( Joan ) = 7 then
11225: LD_EXP 37
11229: PPUSH
11230: CALL_OW 255
11234: PUSH
11235: LD_INT 7
11237: EQUAL
11238: IFFALSE 11278
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
11240: LD_EXP 24
11244: PPUSH
11245: LD_STRING D4-LisaJ-Lisa-1
11247: PPUSH
11248: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
11252: LD_EXP 15
11256: PPUSH
11257: LD_STRING D4-LisaJ-JMM-1
11259: PPUSH
11260: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
11264: LD_EXP 24
11268: PPUSH
11269: LD_STRING D4-LisaJ-Lisa-2
11271: PPUSH
11272: CALL_OW 88
// end else
11276: GO 11290
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
11278: LD_EXP 24
11282: PPUSH
11283: LD_STRING D4-LisaL-Lisa-1
11285: PPUSH
11286: CALL_OW 88
// end ; end ; end else
11290: GO 12562
// if unit = Frank then
11292: LD_VAR 0 1
11296: PUSH
11297: LD_EXP 34
11301: EQUAL
11302: IFFALSE 11442
// begin joined := true ;
11304: LD_ADDR_VAR 0 5
11308: PUSH
11309: LD_INT 1
11311: ST_TO_ADDR
// if Frank in selected then
11312: LD_EXP 34
11316: PUSH
11317: LD_EXP 3
11321: IN
11322: IFFALSE 11392
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
11324: LD_EXP 34
11328: PPUSH
11329: LD_STRING D3-Frank-Frank-1
11331: PPUSH
11332: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
11336: LD_EXP 15
11340: PPUSH
11341: LD_STRING D3-Frank-JMM-1
11343: PPUSH
11344: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
11348: LD_EXP 34
11352: PPUSH
11353: LD_STRING D3-Frank-Frank-2
11355: PPUSH
11356: CALL_OW 88
// if reached_lab then
11360: LD_EXP 5
11364: IFFALSE 11390
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
11366: LD_EXP 15
11370: PPUSH
11371: LD_STRING D3-Frank-JMM-2
11373: PPUSH
11374: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
11378: LD_EXP 34
11382: PPUSH
11383: LD_STRING D3-Frank-Frank-3
11385: PPUSH
11386: CALL_OW 88
// end ; end else
11390: GO 11440
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
11392: LD_EXP 34
11396: PPUSH
11397: LD_STRING D4-Frank-Frank-1
11399: PPUSH
11400: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
11404: LD_EXP 15
11408: PPUSH
11409: LD_STRING D4-Frank-JMM-1
11411: PPUSH
11412: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
11416: LD_EXP 34
11420: PPUSH
11421: LD_STRING D4-Frank-Frank-2
11423: PPUSH
11424: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
11428: LD_EXP 15
11432: PPUSH
11433: LD_STRING D4-Frank-JMM-2
11435: PPUSH
11436: CALL_OW 88
// end ; end else
11440: GO 12562
// if unit = Brown then
11442: LD_VAR 0 1
11446: PUSH
11447: LD_EXP 29
11451: EQUAL
11452: IFFALSE 11550
// begin if Brown in selected or gamma_commander = 2 then
11454: LD_EXP 29
11458: PUSH
11459: LD_EXP 3
11463: IN
11464: IFTRUE 11476
11466: PUSH
11467: LD_EXP 10
11471: PUSH
11472: LD_INT 2
11474: EQUAL
11475: OR
11476: IFFALSE 11512
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11478: LD_EXP 29
11482: PPUSH
11483: LD_STRING D3-Soldier1-Sol1-1
11485: PPUSH
11486: CALL_OW 88
// Say ( JMM , D6-JMM-Brown-1 ) ;
11490: LD_EXP 15
11494: PPUSH
11495: LD_STRING D6-JMM-Brown-1
11497: PPUSH
11498: CALL_OW 88
// joined := true ;
11502: LD_ADDR_VAR 0 5
11506: PUSH
11507: LD_INT 1
11509: ST_TO_ADDR
// end else
11510: GO 11548
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11512: LD_EXP 29
11516: PPUSH
11517: LD_STRING D4-Soldier2-Sol1-1
11519: PPUSH
11520: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11524: LD_EXP 15
11528: PPUSH
11529: LD_STRING D4-Soldier1-JMM-1
11531: PPUSH
11532: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11536: LD_EXP 29
11540: PPUSH
11541: LD_STRING D4-Soldier2-Sol1-2
11543: PPUSH
11544: CALL_OW 88
// end ; end else
11548: GO 12562
// if unit = Donaldson then
11550: LD_VAR 0 1
11554: PUSH
11555: LD_EXP 25
11559: EQUAL
11560: IFFALSE 11658
// begin if Donaldson in selected or gamma_commander = 1 then
11562: LD_EXP 25
11566: PUSH
11567: LD_EXP 3
11571: IN
11572: IFTRUE 11584
11574: PUSH
11575: LD_EXP 10
11579: PUSH
11580: LD_INT 1
11582: EQUAL
11583: OR
11584: IFFALSE 11620
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11586: LD_EXP 25
11590: PPUSH
11591: LD_STRING D3-Soldier2-FSol2-1
11593: PPUSH
11594: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11598: LD_EXP 15
11602: PPUSH
11603: LD_STRING D3-Soldier2-JMM-1
11605: PPUSH
11606: CALL_OW 88
// joined := true ;
11610: LD_ADDR_VAR 0 5
11614: PUSH
11615: LD_INT 1
11617: ST_TO_ADDR
// end else
11618: GO 11656
// begin Say ( Donaldson , D4-Soldier1-FSol1-1 ) ;
11620: LD_EXP 25
11624: PPUSH
11625: LD_STRING D4-Soldier1-FSol1-1
11627: PPUSH
11628: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11632: LD_EXP 15
11636: PPUSH
11637: LD_STRING D4-Soldier1-JMM-1
11639: PPUSH
11640: CALL_OW 88
// Say ( Donaldson , D4-Soldier1-FSol1-2 ) ;
11644: LD_EXP 25
11648: PPUSH
11649: LD_STRING D4-Soldier1-FSol1-2
11651: PPUSH
11652: CALL_OW 88
// end ; end else
11656: GO 12562
// if unit = Cyrus then
11658: LD_VAR 0 1
11662: PUSH
11663: LD_EXP 27
11667: EQUAL
11668: IFFALSE 11742
// begin if Cyrus in selected then
11670: LD_EXP 27
11674: PUSH
11675: LD_EXP 3
11679: IN
11680: IFFALSE 11716
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11682: LD_EXP 27
11686: PPUSH
11687: LD_STRING D3-Cyrus-Cyrus-1
11689: PPUSH
11690: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11694: LD_EXP 15
11698: PPUSH
11699: LD_STRING D3-Cyrus-JMM-1
11701: PPUSH
11702: CALL_OW 88
// joined := true ;
11706: LD_ADDR_VAR 0 5
11710: PUSH
11711: LD_INT 1
11713: ST_TO_ADDR
// end else
11714: GO 11740
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11716: LD_EXP 27
11720: PPUSH
11721: LD_STRING D4-Cyrus-Cyrus-1
11723: PPUSH
11724: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11728: LD_EXP 15
11732: PPUSH
11733: LD_STRING D4-Cyrus-JMM-1
11735: PPUSH
11736: CALL_OW 88
// end ; end else
11740: GO 12562
// if unit = Bobby then
11742: LD_VAR 0 1
11746: PUSH
11747: LD_EXP 26
11751: EQUAL
11752: IFFALSE 11838
// begin if Bobby in selected then
11754: LD_EXP 26
11758: PUSH
11759: LD_EXP 3
11763: IN
11764: IFFALSE 11800
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11766: LD_EXP 26
11770: PPUSH
11771: LD_STRING D3-Bobby-Bobby-1
11773: PPUSH
11774: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11778: LD_EXP 15
11782: PPUSH
11783: LD_STRING D3-Bobby-JMM-1
11785: PPUSH
11786: CALL_OW 88
// joined := true ;
11790: LD_ADDR_VAR 0 5
11794: PUSH
11795: LD_INT 1
11797: ST_TO_ADDR
// end else
11798: GO 11836
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11800: LD_EXP 26
11804: PPUSH
11805: LD_STRING D4-Bobby-Bobby-1
11807: PPUSH
11808: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11812: LD_EXP 15
11816: PPUSH
11817: LD_STRING D4-Bobby-JMM-1
11819: PPUSH
11820: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11824: LD_EXP 26
11828: PPUSH
11829: LD_STRING D4-Bobby-Bobby-2
11831: PPUSH
11832: CALL_OW 88
// end ; end else
11836: GO 12562
// if unit = Cornel then
11838: LD_VAR 0 1
11842: PUSH
11843: LD_EXP 32
11847: EQUAL
11848: IFFALSE 11946
// begin if Cornel in selected then
11850: LD_EXP 32
11854: PUSH
11855: LD_EXP 3
11859: IN
11860: IFFALSE 11908
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11862: LD_EXP 32
11866: PPUSH
11867: LD_STRING D3-Mark-Corn-1
11869: PPUSH
11870: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11874: LD_EXP 15
11878: PPUSH
11879: LD_STRING D3-Mark-JMM-1
11881: PPUSH
11882: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11886: LD_EXP 32
11890: PPUSH
11891: LD_STRING D3-Mark-Corn-2
11893: PPUSH
11894: CALL_OW 88
// joined := true ;
11898: LD_ADDR_VAR 0 5
11902: PUSH
11903: LD_INT 1
11905: ST_TO_ADDR
// end else
11906: GO 11944
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11908: LD_EXP 32
11912: PPUSH
11913: LD_STRING D4-Mark-Corn-1
11915: PPUSH
11916: CALL_OW 88
// Say ( JMM , D4-Mark-JMM-1 ) ;
11920: LD_EXP 15
11924: PPUSH
11925: LD_STRING D4-Mark-JMM-1
11927: PPUSH
11928: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11932: LD_EXP 32
11936: PPUSH
11937: LD_STRING D4-Mark-Corn-2
11939: PPUSH
11940: CALL_OW 88
// end ; end else
11944: GO 12562
// if unit = Gary then
11946: LD_VAR 0 1
11950: PUSH
11951: LD_EXP 33
11955: EQUAL
11956: IFFALSE 12054
// begin if Gary in selected then
11958: LD_EXP 33
11962: PUSH
11963: LD_EXP 3
11967: IN
11968: IFFALSE 12004
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11970: LD_EXP 33
11974: PPUSH
11975: LD_STRING D3-Gary-Gary-1
11977: PPUSH
11978: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11982: LD_EXP 15
11986: PPUSH
11987: LD_STRING D3-Gary-JMM-1
11989: PPUSH
11990: CALL_OW 88
// joined := true ;
11994: LD_ADDR_VAR 0 5
11998: PUSH
11999: LD_INT 1
12001: ST_TO_ADDR
// end else
12002: GO 12052
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
12004: LD_EXP 33
12008: PPUSH
12009: LD_STRING D4-Gary-Gary-1
12011: PPUSH
12012: CALL_OW 88
// SetSide ( Gary , 1 ) ;
12016: LD_EXP 33
12020: PPUSH
12021: LD_INT 1
12023: PPUSH
12024: CALL_OW 235
// DialogueOff ;
12028: CALL_OW 7
// InGameOff ;
12032: CALL_OW 9
// SetSide ( JMM , side ) ;
12036: LD_EXP 15
12040: PPUSH
12041: LD_VAR 0 4
12045: PPUSH
12046: CALL_OW 235
// exit ;
12050: GO 12754
// end ; end else
12052: GO 12562
// if unit = Kikuchi then
12054: LD_VAR 0 1
12058: PUSH
12059: LD_EXP 35
12063: EQUAL
12064: IFFALSE 12162
// begin if Kikuchi in selected then
12066: LD_EXP 35
12070: PUSH
12071: LD_EXP 3
12075: IN
12076: IFFALSE 12112
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
12078: LD_EXP 35
12082: PPUSH
12083: LD_STRING D3-Yamako-Yam-1
12085: PPUSH
12086: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
12090: LD_EXP 15
12094: PPUSH
12095: LD_STRING D3-Soldier2-JMM-1
12097: PPUSH
12098: CALL_OW 88
// joined := true ;
12102: LD_ADDR_VAR 0 5
12106: PUSH
12107: LD_INT 1
12109: ST_TO_ADDR
// end else
12110: GO 12160
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
12112: LD_EXP 35
12116: PPUSH
12117: LD_STRING D4-Yamako-Yam-1
12119: PPUSH
12120: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
12124: LD_EXP 35
12128: PPUSH
12129: LD_INT 1
12131: PPUSH
12132: CALL_OW 235
// DialogueOff ;
12136: CALL_OW 7
// InGameOff ;
12140: CALL_OW 9
// SetSide ( JMM , side ) ;
12144: LD_EXP 15
12148: PPUSH
12149: LD_VAR 0 4
12153: PPUSH
12154: CALL_OW 235
// exit ;
12158: GO 12754
// end ; end else
12160: GO 12562
// if unit = Gladstone then
12162: LD_VAR 0 1
12166: PUSH
12167: LD_EXP 30
12171: EQUAL
12172: IFFALSE 12246
// begin if Gladstone in selected then
12174: LD_EXP 30
12178: PUSH
12179: LD_EXP 3
12183: IN
12184: IFFALSE 12220
// begin joined := true ;
12186: LD_ADDR_VAR 0 5
12190: PUSH
12191: LD_INT 1
12193: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
12194: LD_EXP 15
12198: PPUSH
12199: LD_STRING D3-Tim-JMM-1
12201: PPUSH
12202: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
12206: LD_EXP 30
12210: PPUSH
12211: LD_STRING D3-Tim-Glad-1
12213: PPUSH
12214: CALL_OW 88
// end else
12218: GO 12244
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
12220: LD_EXP 15
12224: PPUSH
12225: LD_STRING D4-Tim-JMM-1
12227: PPUSH
12228: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
12232: LD_EXP 30
12236: PPUSH
12237: LD_STRING D4-Tim-Glad-1
12239: PPUSH
12240: CALL_OW 88
// end ; end else
12244: GO 12562
// if unit = Denis then
12246: LD_VAR 0 1
12250: PUSH
12251: LD_EXP 28
12255: EQUAL
12256: IFFALSE 12292
// begin joined := true ;
12258: LD_ADDR_VAR 0 5
12262: PUSH
12263: LD_INT 1
12265: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
12266: LD_EXP 28
12270: PPUSH
12271: LD_STRING D3-Denis-Den-1
12273: PPUSH
12274: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
12278: LD_EXP 15
12282: PPUSH
12283: LD_STRING D3-Denis-JMM-1
12285: PPUSH
12286: CALL_OW 88
// end else
12290: GO 12562
// if unit = Simms then
12292: LD_VAR 0 1
12296: PUSH
12297: LD_EXP 36
12301: EQUAL
12302: IFFALSE 12338
// begin joined := true ;
12304: LD_ADDR_VAR 0 5
12308: PUSH
12309: LD_INT 1
12311: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
12312: LD_EXP 36
12316: PPUSH
12317: LD_STRING D3-Simms-Sim-1
12319: PPUSH
12320: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
12324: LD_EXP 15
12328: PPUSH
12329: LD_STRING D3-Simms-JMM-1
12331: PPUSH
12332: CALL_OW 88
// end else
12336: GO 12562
// if unit = DeltaDoctor then
12338: LD_VAR 0 1
12342: PUSH
12343: LD_EXP 38
12347: EQUAL
12348: IFFALSE 12384
// begin joined := true ;
12350: LD_ADDR_VAR 0 5
12354: PUSH
12355: LD_INT 1
12357: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
12358: LD_EXP 38
12362: PPUSH
12363: LD_STRING D3-Soldier1-Sol1-1
12365: PPUSH
12366: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12370: LD_EXP 15
12374: PPUSH
12375: LD_STRING D3-Soldier1-JMM-1
12377: PPUSH
12378: CALL_OW 88
// end else
12382: GO 12562
// begin joined := unit in selected ;
12384: LD_ADDR_VAR 0 5
12388: PUSH
12389: LD_VAR 0 1
12393: PUSH
12394: LD_EXP 3
12398: IN
12399: ST_TO_ADDR
// if joined then
12400: LD_VAR 0 5
12404: IFFALSE 12473
// begin if GetSex ( unit ) = sex_male then
12406: LD_VAR 0 1
12410: PPUSH
12411: CALL_OW 258
12415: PUSH
12416: LD_INT 1
12418: EQUAL
12419: IFFALSE 12447
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
12421: LD_VAR 0 1
12425: PPUSH
12426: LD_STRING D3-Soldier1-Sol1-1
12428: PPUSH
12429: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12433: LD_EXP 15
12437: PPUSH
12438: LD_STRING D3-Soldier1-JMM-1
12440: PPUSH
12441: CALL_OW 88
// end else
12445: GO 12471
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
12447: LD_VAR 0 1
12451: PPUSH
12452: LD_STRING D3-Soldier2-FSol2-1
12454: PPUSH
12455: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
12459: LD_EXP 15
12463: PPUSH
12464: LD_STRING D3-Soldier2-JMM-1
12466: PPUSH
12467: CALL_OW 88
// end ; end else
12471: GO 12562
// begin if GetSex ( unit ) = sex_male then
12473: LD_VAR 0 1
12477: PPUSH
12478: CALL_OW 258
12482: PUSH
12483: LD_INT 1
12485: EQUAL
12486: IFFALSE 12526
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
12488: LD_VAR 0 1
12492: PPUSH
12493: LD_STRING D4-Soldier2-Sol1-1
12495: PPUSH
12496: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
12500: LD_EXP 15
12504: PPUSH
12505: LD_STRING D4-Soldier2-JMM-1
12507: PPUSH
12508: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12512: LD_VAR 0 1
12516: PPUSH
12517: LD_STRING D4-Soldier2-Sol2-1
12519: PPUSH
12520: CALL_OW 88
// end else
12524: GO 12562
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12526: LD_VAR 0 1
12530: PPUSH
12531: LD_STRING D4-Soldier1-FSol1-1
12533: PPUSH
12534: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12538: LD_EXP 15
12542: PPUSH
12543: LD_STRING D4-Soldier1-JMM-1
12545: PPUSH
12546: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12550: LD_VAR 0 1
12554: PPUSH
12555: LD_STRING D4-Soldier1-FSol1-2
12557: PPUSH
12558: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12562: CALL_OW 7
// InGameOff ;
12566: CALL_OW 9
// if building then
12570: LD_VAR 0 3
12574: IFFALSE 12675
// begin SetSide ( JMM , side ) ;
12576: LD_EXP 15
12580: PPUSH
12581: LD_VAR 0 4
12585: PPUSH
12586: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12590: LD_EXP 15
12594: PPUSH
12595: CALL_OW 122
// if joined then
12599: LD_VAR 0 5
12603: IFFALSE 12642
// begin SetSide ( unit , side ) ;
12605: LD_VAR 0 1
12609: PPUSH
12610: LD_VAR 0 4
12614: PPUSH
12615: CALL_OW 235
// SetSide ( building , 1 ) ;
12619: LD_VAR 0 3
12623: PPUSH
12624: LD_INT 1
12626: PPUSH
12627: CALL_OW 235
// ComExitBuilding ( unit ) ;
12631: LD_VAR 0 1
12635: PPUSH
12636: CALL_OW 122
// end else
12640: GO 12673
// begin wait ( 0 0$10 ) ;
12642: LD_INT 350
12644: PPUSH
12645: CALL_OW 67
// SetSide ( unit , 1 ) ;
12649: LD_VAR 0 1
12653: PPUSH
12654: LD_INT 1
12656: PPUSH
12657: CALL_OW 235
// SetSide ( building , 1 ) ;
12661: LD_VAR 0 3
12665: PPUSH
12666: LD_INT 1
12668: PPUSH
12669: CALL_OW 235
// end ; end else
12673: GO 12754
// begin ComStop ( [ JMM , unit ] ) ;
12675: LD_EXP 15
12679: PUSH
12680: LD_VAR 0 1
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PPUSH
12689: CALL_OW 141
// if joined then
12693: LD_VAR 0 5
12697: IFFALSE 12715
// SetSide ( unit , side ) else
12699: LD_VAR 0 1
12703: PPUSH
12704: LD_VAR 0 4
12708: PPUSH
12709: CALL_OW 235
12713: GO 12754
// begin repeat wait ( 0 0$1 ) ;
12715: LD_INT 35
12717: PPUSH
12718: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12722: LD_EXP 15
12726: PPUSH
12727: LD_VAR 0 1
12731: PPUSH
12732: CALL_OW 296
12736: PUSH
12737: LD_INT 11
12739: GREATER
12740: IFFALSE 12715
// SetSide ( unit , 1 ) ;
12742: LD_VAR 0 1
12746: PPUSH
12747: LD_INT 1
12749: PPUSH
12750: CALL_OW 235
// end ; end ; end ;
12754: LD_VAR 0 2
12758: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Mike ) < 6 and See ( 7 , Mike ) do
12759: LD_EXP 15
12763: PPUSH
12764: LD_EXP 39
12768: PPUSH
12769: CALL_OW 296
12773: PUSH
12774: LD_INT 6
12776: LESS
12777: IFFALSE 12793
12779: PUSH
12780: LD_INT 7
12782: PPUSH
12783: LD_EXP 39
12787: PPUSH
12788: CALL_OW 292
12792: AND
12793: IFFALSE 12851
12795: GO 12797
12797: DISABLE
// begin DialogueOn ;
12798: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
12802: LD_EXP 39
12806: PPUSH
12807: CALL_OW 87
// Say ( JMM , D6-JMM-Mike-1 ) ;
12811: LD_EXP 15
12815: PPUSH
12816: LD_STRING D6-JMM-Mike-1
12818: PPUSH
12819: CALL_OW 88
// Say ( Mike , D6-Mike-1 ) ;
12823: LD_EXP 39
12827: PPUSH
12828: LD_STRING D6-Mike-1
12830: PPUSH
12831: CALL_OW 88
// SetSide ( Mike , 7 ) ;
12835: LD_EXP 39
12839: PPUSH
12840: LD_INT 7
12842: PPUSH
12843: CALL_OW 235
// DialogueOff ;
12847: CALL_OW 7
// end ;
12851: END
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12852: LD_EXP 15
12856: PPUSH
12857: CALL_OW 310
12861: PUSH
12862: LD_INT 47
12864: EQUAL
12865: IFFALSE 12933
12867: GO 12869
12869: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12870: LD_STRING M1a
12872: PPUSH
12873: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12877: LD_INT 13
12879: PPUSH
12880: LD_INT 7
12882: PPUSH
12883: LD_INT 2
12885: PPUSH
12886: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12890: LD_INT 29
12892: PPUSH
12893: LD_INT 7
12895: PPUSH
12896: LD_INT 2
12898: PPUSH
12899: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12903: LD_EXP 15
12907: PPUSH
12908: LD_INT 9
12910: PPUSH
12911: CALL_OW 336
// can_escape := true ;
12915: LD_ADDR_EXP 6
12919: PUSH
12920: LD_INT 1
12922: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12923: LD_INT 19
12925: PPUSH
12926: LD_INT 1
12928: PPUSH
12929: CALL_OW 424
// end ;
12933: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12934: LD_EXP 17
12938: PPUSH
12939: CALL_OW 256
12943: PUSH
12944: LD_INT 999
12946: LESS
12947: IFFALSE 12998
12949: GO 12951
12951: DISABLE
// begin enable ;
12952: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12953: LD_INT 25
12955: PPUSH
12956: LD_INT 48
12958: PPUSH
12959: CALL_OW 428
12963: PUSH
12964: LD_EXP 17
12968: EQUAL
12969: IFFALSE 12983
// begin RemoveUnit ( Powell ) ;
12971: LD_EXP 17
12975: PPUSH
12976: CALL_OW 64
// disable ;
12980: DISABLE
// end else
12981: GO 12998
// ComMoveXY ( Powell , 25 , 48 ) ;
12983: LD_EXP 17
12987: PPUSH
12988: LD_INT 25
12990: PPUSH
12991: LD_INT 48
12993: PPUSH
12994: CALL_OW 111
// end ;
12998: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12999: LD_INT 22
13001: PUSH
13002: LD_INT 4
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: PUSH
13009: LD_INT 21
13011: PUSH
13012: LD_INT 1
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PUSH
13019: LD_INT 3
13021: PUSH
13022: LD_INT 24
13024: PUSH
13025: LD_INT 990
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: LIST
13040: PPUSH
13041: CALL_OW 69
13045: PUSH
13046: LD_EXP 16
13050: DIFF
13051: IFFALSE 13195
13053: GO 13055
13055: DISABLE
13056: LD_INT 0
13058: PPUSH
// begin enable ;
13059: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
13060: LD_ADDR_VAR 0 1
13064: PUSH
13065: LD_INT 22
13067: PUSH
13068: LD_INT 4
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PUSH
13075: LD_INT 21
13077: PUSH
13078: LD_INT 1
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 3
13087: PUSH
13088: LD_INT 24
13090: PUSH
13091: LD_INT 990
13093: PUSH
13094: EMPTY
13095: LIST
13096: LIST
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: LIST
13106: PPUSH
13107: CALL_OW 69
13111: PUSH
13112: LD_EXP 16
13116: DIFF
13117: PUSH
13118: FOR_IN
13119: IFFALSE 13193
// begin ComFree ( i ) ;
13121: LD_VAR 0 1
13125: PPUSH
13126: CALL_OW 139
// SetSide ( i , 1 ) ;
13130: LD_VAR 0 1
13134: PPUSH
13135: LD_INT 1
13137: PPUSH
13138: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
13142: LD_VAR 0 1
13146: PPUSH
13147: LD_EXP 15
13151: PPUSH
13152: CALL_OW 296
13156: PUSH
13157: LD_INT 14
13159: LESS
13160: IFFALSE 13191
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
13162: LD_VAR 0 1
13166: PPUSH
13167: LD_EXP 15
13171: PPUSH
13172: CALL_OW 250
13176: PPUSH
13177: LD_EXP 15
13181: PPUSH
13182: CALL_OW 251
13186: PPUSH
13187: CALL_OW 114
// end ;
13191: GO 13118
13193: POP
13194: POP
// end ;
13195: PPOPN 1
13197: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
13198: LD_INT 22
13200: PUSH
13201: LD_INT 4
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 34
13210: PUSH
13211: LD_INT 12
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PPUSH
13222: CALL_OW 69
13226: IFFALSE 13308
13228: GO 13230
13230: DISABLE
13231: LD_INT 0
13233: PPUSH
// begin enable ;
13234: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
13235: LD_ADDR_VAR 0 1
13239: PUSH
13240: LD_INT 22
13242: PUSH
13243: LD_INT 4
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 34
13252: PUSH
13253: LD_INT 12
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PPUSH
13264: CALL_OW 69
13268: PUSH
13269: FOR_IN
13270: IFFALSE 13306
// if GetDistUnits ( i , JMM ) < 6 then
13272: LD_VAR 0 1
13276: PPUSH
13277: LD_EXP 15
13281: PPUSH
13282: CALL_OW 296
13286: PUSH
13287: LD_INT 6
13289: LESS
13290: IFFALSE 13304
// SetSide ( i , 7 ) ;
13292: LD_VAR 0 1
13296: PPUSH
13297: LD_INT 7
13299: PPUSH
13300: CALL_OW 235
13304: GO 13269
13306: POP
13307: POP
// end ;
13308: PPOPN 1
13310: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_ok ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
13311: LD_EXP 6
13315: IFFALSE 13358
13317: PUSH
13318: LD_INT 19
13320: PPUSH
13321: LD_INT 22
13323: PUSH
13324: LD_INT 7
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PUSH
13331: LD_INT 50
13333: PUSH
13334: EMPTY
13335: LIST
13336: PUSH
13337: LD_INT 21
13339: PUSH
13340: LD_INT 1
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: LIST
13351: PPUSH
13352: CALL_OW 71
13356: NOT
13357: AND
13358: IFFALSE 13370
13360: PUSH
13361: LD_INT 3
13363: PPUSH
13364: CALL_OW 469
13368: NOT
13369: AND
13370: IFFALSE 13382
13372: PUSH
13373: LD_INT 5
13375: PPUSH
13376: CALL_OW 469
13380: NOT
13381: AND
13382: IFFALSE 15121
13384: GO 13386
13386: DISABLE
13387: LD_INT 0
13389: PPUSH
13390: PPUSH
13391: PPUSH
13392: PPUSH
13393: PPUSH
// begin m1 := false ;
13394: LD_ADDR_VAR 0 3
13398: PUSH
13399: LD_INT 0
13401: ST_TO_ADDR
// m2 := false ;
13402: LD_ADDR_VAR 0 4
13406: PUSH
13407: LD_INT 0
13409: ST_TO_ADDR
// m3 := false ;
13410: LD_ADDR_VAR 0 5
13414: PUSH
13415: LD_INT 0
13417: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
13418: LD_ADDR_VAR 0 1
13422: PUSH
13423: LD_EXP 3
13427: PPUSH
13428: LD_INT 22
13430: PUSH
13431: LD_INT 4
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 21
13440: PUSH
13441: LD_INT 1
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PPUSH
13452: CALL_OW 72
13456: PUSH
13457: LD_INT 0
13459: EQUAL
13460: ST_TO_ADDR
// if not all_taken then
13461: LD_VAR 0 1
13465: NOT
13466: IFFALSE 13602
// begin if Query ( Q1 ) = 1 then
13468: LD_STRING Q1
13470: PPUSH
13471: CALL_OW 97
13475: PUSH
13476: LD_INT 1
13478: EQUAL
13479: IFFALSE 13602
// begin repeat wait ( 0 0$1 ) ;
13481: LD_INT 35
13483: PPUSH
13484: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_ok ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
13488: LD_EXP 3
13492: PPUSH
13493: LD_INT 22
13495: PUSH
13496: LD_INT 4
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: LD_INT 21
13505: PUSH
13506: LD_INT 1
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PPUSH
13517: CALL_OW 72
13521: PUSH
13522: LD_INT 0
13524: EQUAL
13525: IFFALSE 13568
13527: PUSH
13528: LD_INT 19
13530: PPUSH
13531: LD_INT 22
13533: PUSH
13534: LD_INT 7
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: LD_INT 50
13543: PUSH
13544: EMPTY
13545: LIST
13546: PUSH
13547: LD_INT 21
13549: PUSH
13550: LD_INT 1
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: LIST
13561: PPUSH
13562: CALL_OW 71
13566: NOT
13567: AND
13568: IFFALSE 13580
13570: PUSH
13571: LD_INT 3
13573: PPUSH
13574: CALL_OW 469
13578: NOT
13579: AND
13580: IFFALSE 13592
13582: PUSH
13583: LD_INT 5
13585: PPUSH
13586: CALL_OW 469
13590: NOT
13591: AND
13592: IFFALSE 13481
// all_taken := true ;
13594: LD_ADDR_VAR 0 1
13598: PUSH
13599: LD_INT 1
13601: ST_TO_ADDR
// end ; end ; if Count ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ) < 6 then
13602: LD_INT 22
13604: PUSH
13605: LD_INT 7
13607: PUSH
13608: EMPTY
13609: LIST
13610: LIST
13611: PUSH
13612: LD_INT 21
13614: PUSH
13615: LD_INT 1
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PUSH
13622: LD_INT 50
13624: PUSH
13625: EMPTY
13626: LIST
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: LIST
13632: PPUSH
13633: CALL_OW 69
13637: PPUSH
13638: CALL 40572 0 1
13642: PUSH
13643: LD_INT 6
13645: LESS
13646: IFFALSE 13657
// begin YouLost ( AlliesLost ) ;
13648: LD_STRING AlliesLost
13650: PPUSH
13651: CALL_OW 104
// exit ;
13655: GO 15121
// end ; if team_kill_counter < 3 then
13657: LD_EXP 9
13661: PUSH
13662: LD_INT 3
13664: LESS
13665: IFFALSE 13681
// Say ( JMM , D5-JMM-1 ) else
13667: LD_EXP 15
13671: PPUSH
13672: LD_STRING D5-JMM-1
13674: PPUSH
13675: CALL_OW 88
13679: GO 13693
// Say ( JMM , D5-JMM-1a ) ;
13681: LD_EXP 15
13685: PPUSH
13686: LD_STRING D5-JMM-1a
13688: PPUSH
13689: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13693: LD_INT 22
13695: PUSH
13696: LD_INT 7
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: PUSH
13703: LD_INT 21
13705: PUSH
13706: LD_INT 1
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PUSH
13713: LD_INT 23
13715: PUSH
13716: LD_INT 1
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: LIST
13727: PPUSH
13728: CALL_OW 69
13732: PUSH
13733: LD_EXP 15
13737: PUSH
13738: LD_EXP 16
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: DIFF
13747: PUSH
13748: LD_INT 10
13750: GREATEREQUAL
13751: IFFALSE 13760
// SetAchievement ( ACH_TEAM ) ;
13753: LD_STRING ACH_TEAM
13755: PPUSH
13756: CALL_OW 543
// if not invis_used then
13760: LD_EXP 12
13764: NOT
13765: IFFALSE 13781
// begin wait ( 3 ) ;
13767: LD_INT 3
13769: PPUSH
13770: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13774: LD_STRING ACH_NOINVIS
13776: PPUSH
13777: CALL_OW 543
// end ; if not alert then
13781: LD_EXP 13
13785: NOT
13786: IFFALSE 13802
// begin wait ( 3 ) ;
13788: LD_INT 3
13790: PPUSH
13791: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13795: LD_STRING ACH_ALARM
13797: PPUSH
13798: CALL_OW 543
// end ; if tick < 15 15$00 then
13802: LD_OWVAR 1
13806: PUSH
13807: LD_INT 31500
13809: LESS
13810: IFFALSE 13826
// begin wait ( 3 ) ;
13812: LD_INT 3
13814: PPUSH
13815: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13819: LD_STRING ACH_ASPEED_16
13821: PPUSH
13822: CALL_OW 543
// end ; if all_taken then
13826: LD_VAR 0 1
13830: IFFALSE 13852
// begin AddMedal ( All , 1 ) ;
13832: LD_STRING All
13834: PPUSH
13835: LD_INT 1
13837: PPUSH
13838: CALL_OW 101
// m1 := true ;
13842: LD_ADDR_VAR 0 3
13846: PUSH
13847: LD_INT 1
13849: ST_TO_ADDR
// end else
13850: GO 13863
// AddMedal ( All , - 1 ) ;
13852: LD_STRING All
13854: PPUSH
13855: LD_INT 1
13857: NEG
13858: PPUSH
13859: CALL_OW 101
// if team_kill_counter then
13863: LD_EXP 9
13867: IFFALSE 13882
// AddMedal ( Save , - 1 ) else
13869: LD_STRING Save
13871: PPUSH
13872: LD_INT 1
13874: NEG
13875: PPUSH
13876: CALL_OW 101
13880: GO 13900
// begin AddMedal ( Save , 1 ) ;
13882: LD_STRING Save
13884: PPUSH
13885: LD_INT 1
13887: PPUSH
13888: CALL_OW 101
// m2 := true ;
13892: LD_ADDR_VAR 0 4
13896: PUSH
13897: LD_INT 1
13899: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13900: LD_EXP 8
13904: PUSH
13905: LD_INT 2
13907: PUSH
13908: LD_INT 2
13910: PUSH
13911: LD_INT 1
13913: PUSH
13914: LD_INT 1
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: PUSH
13923: LD_OWVAR 67
13927: ARRAY
13928: GREATEREQUAL
13929: IFFALSE 13944
// AddMedal ( Friendship , - 1 ) else
13931: LD_STRING Friendship
13933: PPUSH
13934: LD_INT 1
13936: NEG
13937: PPUSH
13938: CALL_OW 101
13942: GO 13962
// begin AddMedal ( Friendship , 1 ) ;
13944: LD_STRING Friendship
13946: PPUSH
13947: LD_INT 1
13949: PPUSH
13950: CALL_OW 101
// m3 := true ;
13954: LD_ADDR_VAR 0 5
13958: PUSH
13959: LD_INT 1
13961: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13962: LD_VAR 0 3
13966: IFFALSE 13974
13968: PUSH
13969: LD_VAR 0 4
13973: AND
13974: IFFALSE 13982
13976: PUSH
13977: LD_VAR 0 5
13981: AND
13982: IFFALSE 13994
13984: PUSH
13985: LD_OWVAR 67
13989: PUSH
13990: LD_INT 3
13992: GREATEREQUAL
13993: AND
13994: IFFALSE 14006
// SetAchievementEX ( ACH_AMER , 16 ) ;
13996: LD_STRING ACH_AMER
13998: PPUSH
13999: LD_INT 16
14001: PPUSH
14002: CALL_OW 564
// GiveMedals ( MAIN ) ;
14006: LD_STRING MAIN
14008: PPUSH
14009: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] , [ f_class , class_apeman_engineer ] ] ] ] ) ;
14013: LD_ADDR_VAR 0 2
14017: PUSH
14018: LD_INT 22
14020: PUSH
14021: LD_INT 7
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: PUSH
14028: LD_INT 2
14030: PUSH
14031: LD_INT 25
14033: PUSH
14034: LD_INT 1
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PUSH
14041: LD_INT 25
14043: PUSH
14044: LD_INT 2
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PUSH
14051: LD_INT 25
14053: PUSH
14054: LD_INT 3
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 25
14063: PUSH
14064: LD_INT 4
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PUSH
14071: LD_INT 25
14073: PUSH
14074: LD_INT 5
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: LD_INT 25
14083: PUSH
14084: LD_INT 8
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PUSH
14091: LD_INT 25
14093: PUSH
14094: LD_INT 9
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: PUSH
14101: LD_INT 25
14103: PUSH
14104: LD_INT 16
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: PUSH
14126: EMPTY
14127: LIST
14128: PPUSH
14129: CALL_OW 69
14133: ST_TO_ADDR
// RewardPeople ( tmp union Roth diff Mike ) ;
14134: LD_VAR 0 2
14138: PUSH
14139: LD_EXP 16
14143: UNION
14144: PUSH
14145: LD_EXP 39
14149: DIFF
14150: PPUSH
14151: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
14155: LD_EXP 15
14159: PPUSH
14160: LD_STRING 12a_JMM
14162: PPUSH
14163: CALL_OW 38
// if IsLive ( Roth ) then
14167: LD_EXP 16
14171: PPUSH
14172: CALL_OW 300
14176: IFFALSE 14190
// SaveCharacters ( Roth , 12a_Roth ) ;
14178: LD_EXP 16
14182: PPUSH
14183: LD_STRING 12a_Roth
14185: PPUSH
14186: CALL_OW 38
// if Lisa in tmp then
14190: LD_EXP 24
14194: PUSH
14195: LD_VAR 0 2
14199: IN
14200: IFFALSE 14216
// SaveCharacters ( Lisa , 12a_Lisa ) else
14202: LD_EXP 24
14206: PPUSH
14207: LD_STRING 12a_Lisa
14209: PPUSH
14210: CALL_OW 38
14214: GO 14234
// if Lisa then
14216: LD_EXP 24
14220: IFFALSE 14234
// SaveCharacters ( Lisa , 12p_Lisa ) ;
14222: LD_EXP 24
14226: PPUSH
14227: LD_STRING 12p_Lisa
14229: PPUSH
14230: CALL_OW 38
// if Mike in tmp then
14234: LD_EXP 39
14238: PUSH
14239: LD_VAR 0 2
14243: IN
14244: IFFALSE 14258
// SaveCharacters ( Mike , 12a_Mike ) ;
14246: LD_EXP 39
14250: PPUSH
14251: LD_STRING 12a_Mike
14253: PPUSH
14254: CALL_OW 38
// if Donaldson in tmp then
14258: LD_EXP 25
14262: PUSH
14263: LD_VAR 0 2
14267: IN
14268: IFFALSE 14284
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
14270: LD_EXP 25
14274: PPUSH
14275: LD_STRING 12a_Donaldson
14277: PPUSH
14278: CALL_OW 38
14282: GO 14302
// if Donaldson then
14284: LD_EXP 25
14288: IFFALSE 14302
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
14290: LD_EXP 25
14294: PPUSH
14295: LD_STRING 12p_Donaldson
14297: PPUSH
14298: CALL_OW 38
// if Bobby in tmp then
14302: LD_EXP 26
14306: PUSH
14307: LD_VAR 0 2
14311: IN
14312: IFFALSE 14328
// SaveCharacters ( Bobby , 12a_Bobby ) else
14314: LD_EXP 26
14318: PPUSH
14319: LD_STRING 12a_Bobby
14321: PPUSH
14322: CALL_OW 38
14326: GO 14346
// if Bobby then
14328: LD_EXP 26
14332: IFFALSE 14346
// SaveCharacters ( Bobby , 12p_Bobby ) ;
14334: LD_EXP 26
14338: PPUSH
14339: LD_STRING 12p_Bobby
14341: PPUSH
14342: CALL_OW 38
// if Cyrus in tmp then
14346: LD_EXP 27
14350: PUSH
14351: LD_VAR 0 2
14355: IN
14356: IFFALSE 14372
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
14358: LD_EXP 27
14362: PPUSH
14363: LD_STRING 12a_Cyrus
14365: PPUSH
14366: CALL_OW 38
14370: GO 14390
// if Cyrus then
14372: LD_EXP 27
14376: IFFALSE 14390
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
14378: LD_EXP 27
14382: PPUSH
14383: LD_STRING 12p_Cyrus
14385: PPUSH
14386: CALL_OW 38
// if Denis in tmp then
14390: LD_EXP 28
14394: PUSH
14395: LD_VAR 0 2
14399: IN
14400: IFFALSE 14414
// SaveCharacters ( Denis , 12a_Denis ) ;
14402: LD_EXP 28
14406: PPUSH
14407: LD_STRING 12a_Denis
14409: PPUSH
14410: CALL_OW 38
// if Brown in tmp then
14414: LD_EXP 29
14418: PUSH
14419: LD_VAR 0 2
14423: IN
14424: IFFALSE 14440
// SaveCharacters ( Brown , 12a_Brown ) else
14426: LD_EXP 29
14430: PPUSH
14431: LD_STRING 12a_Brown
14433: PPUSH
14434: CALL_OW 38
14438: GO 14464
// if Brown in tmp then
14440: LD_EXP 29
14444: PUSH
14445: LD_VAR 0 2
14449: IN
14450: IFFALSE 14464
// SaveCharacters ( Brown , 12p_Brown ) ;
14452: LD_EXP 29
14456: PPUSH
14457: LD_STRING 12p_Brown
14459: PPUSH
14460: CALL_OW 38
// if Gladstone in tmp then
14464: LD_EXP 30
14468: PUSH
14469: LD_VAR 0 2
14473: IN
14474: IFFALSE 14490
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
14476: LD_EXP 30
14480: PPUSH
14481: LD_STRING 12a_Gladstone
14483: PPUSH
14484: CALL_OW 38
14488: GO 14508
// if Gladstone then
14490: LD_EXP 30
14494: IFFALSE 14508
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
14496: LD_EXP 30
14500: PPUSH
14501: LD_STRING 12p_Gladstone
14503: PPUSH
14504: CALL_OW 38
// if Houten in tmp then
14508: LD_EXP 31
14512: PUSH
14513: LD_VAR 0 2
14517: IN
14518: IFFALSE 14534
// SaveCharacters ( Houten , 12a_Houten ) else
14520: LD_EXP 31
14524: PPUSH
14525: LD_STRING 12a_Houten
14527: PPUSH
14528: CALL_OW 38
14532: GO 14552
// if Houten then
14534: LD_EXP 31
14538: IFFALSE 14552
// SaveCharacters ( Houten , 12p_Houten ) ;
14540: LD_EXP 31
14544: PPUSH
14545: LD_STRING 12p_Houten
14547: PPUSH
14548: CALL_OW 38
// if Cornel in tmp then
14552: LD_EXP 32
14556: PUSH
14557: LD_VAR 0 2
14561: IN
14562: IFFALSE 14578
// SaveCharacters ( Cornel , 12a_Cornell ) else
14564: LD_EXP 32
14568: PPUSH
14569: LD_STRING 12a_Cornell
14571: PPUSH
14572: CALL_OW 38
14576: GO 14596
// if Cornel then
14578: LD_EXP 32
14582: IFFALSE 14596
// SaveCharacters ( Cornel , 12p_Cornell ) ;
14584: LD_EXP 32
14588: PPUSH
14589: LD_STRING 12p_Cornell
14591: PPUSH
14592: CALL_OW 38
// if Gary in tmp then
14596: LD_EXP 33
14600: PUSH
14601: LD_VAR 0 2
14605: IN
14606: IFFALSE 14622
// SaveCharacters ( Gary , 12a_Gary ) else
14608: LD_EXP 33
14612: PPUSH
14613: LD_STRING 12a_Gary
14615: PPUSH
14616: CALL_OW 38
14620: GO 14640
// if Gary then
14622: LD_EXP 33
14626: IFFALSE 14640
// SaveCharacters ( Gary , 12p_Gary ) ;
14628: LD_EXP 33
14632: PPUSH
14633: LD_STRING 12p_Gary
14635: PPUSH
14636: CALL_OW 38
// if Frank in tmp then
14640: LD_EXP 34
14644: PUSH
14645: LD_VAR 0 2
14649: IN
14650: IFFALSE 14664
// SaveCharacters ( Frank , 12a_Frank ) ;
14652: LD_EXP 34
14656: PPUSH
14657: LD_STRING 12a_Frank
14659: PPUSH
14660: CALL_OW 38
// if Kikuchi in tmp then
14664: LD_EXP 35
14668: PUSH
14669: LD_VAR 0 2
14673: IN
14674: IFFALSE 14690
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
14676: LD_EXP 35
14680: PPUSH
14681: LD_STRING 12a_Kikuchi
14683: PPUSH
14684: CALL_OW 38
14688: GO 14708
// if Kikuchi then
14690: LD_EXP 35
14694: IFFALSE 14708
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
14696: LD_EXP 35
14700: PPUSH
14701: LD_STRING 12p_Kikuchi
14703: PPUSH
14704: CALL_OW 38
// if Simms in tmp then
14708: LD_EXP 36
14712: PUSH
14713: LD_VAR 0 2
14717: IN
14718: IFFALSE 14732
// SaveCharacters ( Simms , 12a_Simms ) ;
14720: LD_EXP 36
14724: PPUSH
14725: LD_STRING 12a_Simms
14727: PPUSH
14728: CALL_OW 38
// if Joan in tmp then
14732: LD_EXP 37
14736: PUSH
14737: LD_VAR 0 2
14741: IN
14742: IFFALSE 14756
// SaveCharacters ( Joan , 12a_Joan ) ;
14744: LD_EXP 37
14748: PPUSH
14749: LD_STRING 12a_Joan
14751: PPUSH
14752: CALL_OW 38
// if DeltaDoctor in tmp then
14756: LD_EXP 38
14760: PUSH
14761: LD_VAR 0 2
14765: IN
14766: IFFALSE 14780
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14768: LD_EXP 38
14772: PPUSH
14773: LD_STRING 12a_DeltaDoctor
14775: PPUSH
14776: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ] ;
14780: LD_ADDR_VAR 0 2
14784: PUSH
14785: LD_VAR 0 2
14789: PUSH
14790: LD_EXP 15
14794: PUSH
14795: LD_EXP 16
14799: PUSH
14800: LD_EXP 24
14804: PUSH
14805: LD_EXP 25
14809: PUSH
14810: LD_EXP 26
14814: PUSH
14815: LD_EXP 27
14819: PUSH
14820: LD_EXP 28
14824: PUSH
14825: LD_EXP 29
14829: PUSH
14830: LD_EXP 30
14834: PUSH
14835: LD_EXP 31
14839: PUSH
14840: LD_EXP 32
14844: PUSH
14845: LD_EXP 33
14849: PUSH
14850: LD_EXP 34
14854: PUSH
14855: LD_EXP 35
14859: PUSH
14860: LD_EXP 36
14864: PUSH
14865: LD_EXP 37
14869: PUSH
14870: LD_EXP 38
14874: PUSH
14875: LD_EXP 39
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: DIFF
14900: ST_TO_ADDR
// if tmp then
14901: LD_VAR 0 2
14905: IFFALSE 14919
// SaveCharacters ( tmp , 12a_others ) ;
14907: LD_VAR 0 2
14911: PPUSH
14912: LD_STRING 12a_others
14914: PPUSH
14915: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell , Mike ] ;
14919: LD_ADDR_VAR 0 2
14923: PUSH
14924: LD_INT 21
14926: PUSH
14927: LD_INT 1
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PUSH
14934: LD_INT 23
14936: PUSH
14937: LD_INT 1
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PUSH
14944: LD_INT 2
14946: PUSH
14947: LD_INT 22
14949: PUSH
14950: LD_INT 1
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 22
14959: PUSH
14960: LD_INT 4
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: LIST
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: LIST
14976: PPUSH
14977: CALL_OW 69
14981: PUSH
14982: LD_EXP 15
14986: PUSH
14987: LD_EXP 16
14991: PUSH
14992: LD_EXP 24
14996: PUSH
14997: LD_EXP 25
15001: PUSH
15002: LD_EXP 26
15006: PUSH
15007: LD_EXP 27
15011: PUSH
15012: LD_EXP 28
15016: PUSH
15017: LD_EXP 29
15021: PUSH
15022: LD_EXP 30
15026: PUSH
15027: LD_EXP 31
15031: PUSH
15032: LD_EXP 32
15036: PUSH
15037: LD_EXP 33
15041: PUSH
15042: LD_EXP 34
15046: PUSH
15047: LD_EXP 35
15051: PUSH
15052: LD_EXP 36
15056: PUSH
15057: LD_EXP 37
15061: PUSH
15062: LD_EXP 38
15066: PUSH
15067: LD_EXP 17
15071: PUSH
15072: LD_EXP 39
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: DIFF
15098: ST_TO_ADDR
// if tmp then
15099: LD_VAR 0 2
15103: IFFALSE 15117
// SaveCharacters ( tmp , 12p_others ) ;
15105: LD_VAR 0 2
15109: PPUSH
15110: LD_STRING 12p_others
15112: PPUSH
15113: CALL_OW 38
// YouWin ;
15117: CALL_OW 103
// end ; end_of_file
15121: PPOPN 5
15123: END
// on SailEvent ( event ) do var tmp ;
15124: LD_INT 0
15126: PPUSH
// begin if event = 1 then
15127: LD_VAR 0 1
15131: PUSH
15132: LD_INT 1
15134: EQUAL
15135: IFFALSE 15208
// begin if not mobile_patrol then
15137: LD_EXP 18
15141: NOT
15142: IFFALSE 15146
// exit ;
15144: GO 15208
// tmp := mobile_patrol [ mobile_patrol ] ;
15146: LD_ADDR_VAR 0 2
15150: PUSH
15151: LD_EXP 18
15155: PUSH
15156: LD_EXP 18
15160: ARRAY
15161: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
15162: LD_ADDR_EXP 18
15166: PUSH
15167: LD_EXP 18
15171: PPUSH
15172: LD_EXP 18
15176: PPUSH
15177: CALL_OW 3
15181: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
15182: LD_VAR 0 2
15186: PPUSH
15187: LD_EXP 19
15191: PUSH
15192: LD_EXP 18
15196: PUSH
15197: LD_INT 1
15199: PLUS
15200: ARRAY
15201: PPUSH
15202: EMPTY
15203: PPUSH
15204: CALL 7043 0 3
// end ; end ;
15208: PPOPN 2
15210: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
15211: LD_VAR 0 1
15215: PPUSH
15216: CALL 31874 0 1
// if un = JMM then
15220: LD_VAR 0 1
15224: PUSH
15225: LD_EXP 15
15229: EQUAL
15230: IFFALSE 15239
// YouLost ( JMM ) ;
15232: LD_STRING JMM
15234: PPUSH
15235: CALL_OW 104
// if un = Powell then
15239: LD_VAR 0 1
15243: PUSH
15244: LD_EXP 17
15248: EQUAL
15249: IFFALSE 15261
// SaveVariable ( true , 12a_PowellKilled ) ;
15251: LD_INT 1
15253: PPUSH
15254: LD_STRING 12a_PowellKilled
15256: PPUSH
15257: CALL_OW 39
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
15261: LD_VAR 0 1
15265: PPUSH
15266: CALL_OW 255
15270: PUSH
15271: LD_INT 7
15273: EQUAL
15274: IFFALSE 15291
15276: PUSH
15277: LD_VAR 0 1
15281: PPUSH
15282: CALL_OW 264
15286: PUSH
15287: LD_INT 12
15289: EQUAL
15290: AND
15291: IFFALSE 15300
// YouLost ( Artifact ) ;
15293: LD_STRING Artifact
15295: PPUSH
15296: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
15300: LD_VAR 0 1
15304: PPUSH
15305: CALL_OW 255
15309: PUSH
15310: LD_INT 7
15312: EQUAL
15313: IFFALSE 15330
15315: PUSH
15316: LD_VAR 0 1
15320: PPUSH
15321: CALL_OW 247
15325: PUSH
15326: LD_INT 1
15328: EQUAL
15329: AND
15330: IFTRUE 15344
15332: PUSH
15333: LD_VAR 0 1
15337: PUSH
15338: LD_EXP 16
15342: EQUAL
15343: OR
15344: IFFALSE 15360
// team_kill_counter := team_kill_counter + 1 ;
15346: LD_ADDR_EXP 9
15350: PUSH
15351: LD_EXP 9
15355: PUSH
15356: LD_INT 1
15358: PLUS
15359: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
15360: LD_VAR 0 1
15364: PPUSH
15365: CALL_OW 255
15369: PUSH
15370: LD_INT 1
15372: EQUAL
15373: IFFALSE 15390
15375: PUSH
15376: LD_VAR 0 1
15380: PPUSH
15381: CALL_OW 247
15385: PUSH
15386: LD_INT 1
15388: EQUAL
15389: AND
15390: IFFALSE 15406
// friends_kill_counter := friends_kill_counter + 1 ;
15392: LD_ADDR_EXP 8
15396: PUSH
15397: LD_EXP 8
15401: PUSH
15402: LD_INT 1
15404: PLUS
15405: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
15406: LD_VAR 0 1
15410: PPUSH
15411: CALL_OW 255
15415: PUSH
15416: LD_INT 1
15418: NONEQUAL
15419: IFFALSE 15423
// exit ;
15421: GO 15525
// if GetControl ( un ) = control_remote then
15423: LD_VAR 0 1
15427: PPUSH
15428: CALL_OW 263
15432: PUSH
15433: LD_INT 2
15435: EQUAL
15436: IFFALSE 15454
// defenders := defenders diff un ;
15438: LD_ADDR_EXP 21
15442: PUSH
15443: LD_EXP 21
15447: PUSH
15448: LD_VAR 0 1
15452: DIFF
15453: ST_TO_ADDR
// if not un in defenders then
15454: LD_VAR 0 1
15458: PUSH
15459: LD_EXP 21
15463: IN
15464: NOT
15465: IFFALSE 15525
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
15467: LD_ADDR_EXP 22
15471: PUSH
15472: LD_VAR 0 1
15476: PPUSH
15477: CALL_OW 250
15481: PUSH
15482: LD_VAR 0 1
15486: PPUSH
15487: CALL_OW 251
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: ST_TO_ADDR
// def_counter := Inc ( def_counter ) ;
15496: LD_ADDR_EXP 14
15500: PUSH
15501: LD_EXP 14
15505: PPUSH
15506: CALL 77921 0 1
15510: ST_TO_ADDR
// if def_counter < 4 then
15511: LD_EXP 14
15515: PUSH
15516: LD_INT 4
15518: LESS
15519: IFFALSE 15525
// Defend ;
15521: CALL 2964 0 0
// end ; end ;
15525: PPOPN 1
15527: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15528: LD_VAR 0 1
15532: PPUSH
15533: LD_VAR 0 2
15537: PPUSH
15538: CALL 31932 0 2
// if GetSide ( veh ) <> 1 then
15542: LD_VAR 0 1
15546: PPUSH
15547: CALL_OW 255
15551: PUSH
15552: LD_INT 1
15554: NONEQUAL
15555: IFFALSE 15559
// exit ;
15557: GO 15583
// if GetControl ( veh ) = control_remote then
15559: LD_VAR 0 1
15563: PPUSH
15564: CALL_OW 263
15568: PUSH
15569: LD_INT 2
15571: EQUAL
15572: IFFALSE 15583
// Connect ( veh ) ;
15574: LD_VAR 0 1
15578: PPUSH
15579: CALL 46850 0 1
// end ;
15583: PPOPN 2
15585: END
// on UnitGoesToRed ( un ) do var i , veh ;
15586: LD_INT 0
15588: PPUSH
15589: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
15590: LD_VAR 0 1
15594: PPUSH
15595: CALL_OW 255
15599: PUSH
15600: LD_INT 1
15602: EQUAL
15603: IFFALSE 15620
15605: PUSH
15606: LD_VAR 0 1
15610: PPUSH
15611: CALL_OW 263
15615: PUSH
15616: LD_INT 2
15618: EQUAL
15619: AND
15620: IFFALSE 15631
// ComUnlink ( un ) ;
15622: LD_VAR 0 1
15626: PPUSH
15627: CALL_OW 136
// if un = ambar0 then
15631: LD_VAR 0 1
15635: PUSH
15636: LD_INT 18
15638: EQUAL
15639: IFFALSE 15749
// begin uc_side := 1 ;
15641: LD_ADDR_OWVAR 20
15645: PUSH
15646: LD_INT 1
15648: ST_TO_ADDR
// uc_nation := 1 ;
15649: LD_ADDR_OWVAR 21
15653: PUSH
15654: LD_INT 1
15656: ST_TO_ADDR
// for i = 1 to 6 do
15657: LD_ADDR_VAR 0 2
15661: PUSH
15662: DOUBLE
15663: LD_INT 1
15665: DEC
15666: ST_TO_ADDR
15667: LD_INT 6
15669: PUSH
15670: FOR_TO
15671: IFFALSE 15747
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
15673: LD_INT 3
15675: PPUSH
15676: LD_INT 1
15678: PPUSH
15679: LD_INT 3
15681: PPUSH
15682: LD_INT 4
15684: PPUSH
15685: LD_INT 100
15687: PPUSH
15688: CALL 43368 0 5
// veh := CreateVehicle ;
15692: LD_ADDR_VAR 0 3
15696: PUSH
15697: CALL_OW 45
15701: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
15702: LD_VAR 0 3
15706: PPUSH
15707: LD_INT 1
15709: PPUSH
15710: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
15714: LD_VAR 0 3
15718: PPUSH
15719: LD_INT 25
15721: PPUSH
15722: LD_INT 0
15724: PPUSH
15725: CALL_OW 49
// defenders := defenders ^ veh ;
15729: LD_ADDR_EXP 21
15733: PUSH
15734: LD_EXP 21
15738: PUSH
15739: LD_VAR 0 3
15743: ADD
15744: ST_TO_ADDR
// end ;
15745: GO 15670
15747: POP
15748: POP
// end ; end ;
15749: PPOPN 3
15751: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
15752: LD_VAR 0 2
15756: PUSH
15757: LD_EXP 17
15761: EQUAL
15762: IFFALSE 15773
// RemoveUnit ( Powell ) ;
15764: LD_EXP 17
15768: PPUSH
15769: CALL_OW 64
// end ;
15773: PPOPN 2
15775: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15776: LD_VAR 0 1
15780: PPUSH
15781: CALL 31916 0 1
// end ; end_of_file end_of_file
15785: PPOPN 1
15787: END
// export globalGameSaveCounter ; every 0 0$1 do
15788: GO 15790
15790: DISABLE
// begin enable ;
15791: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15792: LD_STRING updateTimer(
15794: PUSH
15795: LD_OWVAR 1
15799: STR
15800: PUSH
15801: LD_STRING );
15803: STR
15804: PPUSH
15805: CALL_OW 559
// end ;
15809: END
// every 0 0$1 do
15810: GO 15812
15812: DISABLE
// begin globalGameSaveCounter := 0 ;
15813: LD_ADDR_EXP 40
15817: PUSH
15818: LD_INT 0
15820: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
15821: LD_STRING setGameSaveCounter(0)
15823: PPUSH
15824: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
15828: LD_STRING initStreamRollete();
15830: PPUSH
15831: CALL_OW 559
// InitStreamMode ;
15835: CALL 17187 0 0
// DefineStreamItems ( false ) ;
15839: LD_INT 0
15841: PPUSH
15842: CALL 17651 0 1
// end ;
15846: END
// export function SOS_MapStart ( ) ; begin
15847: LD_INT 0
15849: PPUSH
// if streamModeActive then
15850: LD_EXP 41
15854: IFFALSE 15863
// DefineStreamItems ( true ) ;
15856: LD_INT 1
15858: PPUSH
15859: CALL 17651 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
15863: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
15865: PPUSH
15866: CALL_OW 559
// UpdateLuaVariables ( ) ;
15870: CALL 15887 0 0
// UpdateFactoryWaypoints ( ) ;
15874: CALL 30773 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15878: CALL 31025 0 0
// end ;
15882: LD_VAR 0 1
15886: RET
// function UpdateLuaVariables ( ) ; begin
15887: LD_INT 0
15889: PPUSH
// if globalGameSaveCounter then
15890: LD_EXP 40
15894: IFFALSE 15928
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15896: LD_ADDR_EXP 40
15900: PUSH
15901: LD_EXP 40
15905: PPUSH
15906: CALL 77921 0 1
15910: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15911: LD_STRING setGameSaveCounter(
15913: PUSH
15914: LD_EXP 40
15918: STR
15919: PUSH
15920: LD_STRING )
15922: STR
15923: PPUSH
15924: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15928: LD_STRING setGameDifficulty(
15930: PUSH
15931: LD_OWVAR 67
15935: STR
15936: PUSH
15937: LD_STRING )
15939: STR
15940: PPUSH
15941: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
15945: LD_STRING displayDifficulty(
15947: PUSH
15948: LD_OWVAR 67
15952: STR
15953: PUSH
15954: LD_STRING )
15956: STR
15957: PPUSH
15958: CALL_OW 559
// end ;
15962: LD_VAR 0 1
15966: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15967: LD_INT 0
15969: PPUSH
// if p2 = stream_mode then
15970: LD_VAR 0 2
15974: PUSH
15975: LD_INT 100
15977: EQUAL
15978: IFFALSE 16981
// begin if not StreamModeActive then
15980: LD_EXP 41
15984: NOT
15985: IFFALSE 15995
// StreamModeActive := true ;
15987: LD_ADDR_EXP 41
15991: PUSH
15992: LD_INT 1
15994: ST_TO_ADDR
// if p3 = 0 then
15995: LD_VAR 0 3
15999: PUSH
16000: LD_INT 0
16002: EQUAL
16003: IFFALSE 16009
// InitStreamMode ;
16005: CALL 17187 0 0
// if p3 = 1 then
16009: LD_VAR 0 3
16013: PUSH
16014: LD_INT 1
16016: EQUAL
16017: IFFALSE 16027
// sRocket := true ;
16019: LD_ADDR_EXP 46
16023: PUSH
16024: LD_INT 1
16026: ST_TO_ADDR
// if p3 = 2 then
16027: LD_VAR 0 3
16031: PUSH
16032: LD_INT 2
16034: EQUAL
16035: IFFALSE 16045
// sSpeed := true ;
16037: LD_ADDR_EXP 45
16041: PUSH
16042: LD_INT 1
16044: ST_TO_ADDR
// if p3 = 3 then
16045: LD_VAR 0 3
16049: PUSH
16050: LD_INT 3
16052: EQUAL
16053: IFFALSE 16063
// sEngine := true ;
16055: LD_ADDR_EXP 47
16059: PUSH
16060: LD_INT 1
16062: ST_TO_ADDR
// if p3 = 4 then
16063: LD_VAR 0 3
16067: PUSH
16068: LD_INT 4
16070: EQUAL
16071: IFFALSE 16081
// sSpec := true ;
16073: LD_ADDR_EXP 44
16077: PUSH
16078: LD_INT 1
16080: ST_TO_ADDR
// if p3 = 5 then
16081: LD_VAR 0 3
16085: PUSH
16086: LD_INT 5
16088: EQUAL
16089: IFFALSE 16099
// sLevel := true ;
16091: LD_ADDR_EXP 48
16095: PUSH
16096: LD_INT 1
16098: ST_TO_ADDR
// if p3 = 6 then
16099: LD_VAR 0 3
16103: PUSH
16104: LD_INT 6
16106: EQUAL
16107: IFFALSE 16117
// sArmoury := true ;
16109: LD_ADDR_EXP 49
16113: PUSH
16114: LD_INT 1
16116: ST_TO_ADDR
// if p3 = 7 then
16117: LD_VAR 0 3
16121: PUSH
16122: LD_INT 7
16124: EQUAL
16125: IFFALSE 16135
// sRadar := true ;
16127: LD_ADDR_EXP 50
16131: PUSH
16132: LD_INT 1
16134: ST_TO_ADDR
// if p3 = 8 then
16135: LD_VAR 0 3
16139: PUSH
16140: LD_INT 8
16142: EQUAL
16143: IFFALSE 16153
// sBunker := true ;
16145: LD_ADDR_EXP 51
16149: PUSH
16150: LD_INT 1
16152: ST_TO_ADDR
// if p3 = 9 then
16153: LD_VAR 0 3
16157: PUSH
16158: LD_INT 9
16160: EQUAL
16161: IFFALSE 16171
// sHack := true ;
16163: LD_ADDR_EXP 52
16167: PUSH
16168: LD_INT 1
16170: ST_TO_ADDR
// if p3 = 10 then
16171: LD_VAR 0 3
16175: PUSH
16176: LD_INT 10
16178: EQUAL
16179: IFFALSE 16189
// sFire := true ;
16181: LD_ADDR_EXP 53
16185: PUSH
16186: LD_INT 1
16188: ST_TO_ADDR
// if p3 = 11 then
16189: LD_VAR 0 3
16193: PUSH
16194: LD_INT 11
16196: EQUAL
16197: IFFALSE 16207
// sRefresh := true ;
16199: LD_ADDR_EXP 54
16203: PUSH
16204: LD_INT 1
16206: ST_TO_ADDR
// if p3 = 12 then
16207: LD_VAR 0 3
16211: PUSH
16212: LD_INT 12
16214: EQUAL
16215: IFFALSE 16225
// sExp := true ;
16217: LD_ADDR_EXP 55
16221: PUSH
16222: LD_INT 1
16224: ST_TO_ADDR
// if p3 = 13 then
16225: LD_VAR 0 3
16229: PUSH
16230: LD_INT 13
16232: EQUAL
16233: IFFALSE 16243
// sDepot := true ;
16235: LD_ADDR_EXP 56
16239: PUSH
16240: LD_INT 1
16242: ST_TO_ADDR
// if p3 = 14 then
16243: LD_VAR 0 3
16247: PUSH
16248: LD_INT 14
16250: EQUAL
16251: IFFALSE 16261
// sFlag := true ;
16253: LD_ADDR_EXP 57
16257: PUSH
16258: LD_INT 1
16260: ST_TO_ADDR
// if p3 = 15 then
16261: LD_VAR 0 3
16265: PUSH
16266: LD_INT 15
16268: EQUAL
16269: IFFALSE 16279
// sKamikadze := true ;
16271: LD_ADDR_EXP 65
16275: PUSH
16276: LD_INT 1
16278: ST_TO_ADDR
// if p3 = 16 then
16279: LD_VAR 0 3
16283: PUSH
16284: LD_INT 16
16286: EQUAL
16287: IFFALSE 16297
// sTroll := true ;
16289: LD_ADDR_EXP 66
16293: PUSH
16294: LD_INT 1
16296: ST_TO_ADDR
// if p3 = 17 then
16297: LD_VAR 0 3
16301: PUSH
16302: LD_INT 17
16304: EQUAL
16305: IFFALSE 16315
// sSlow := true ;
16307: LD_ADDR_EXP 67
16311: PUSH
16312: LD_INT 1
16314: ST_TO_ADDR
// if p3 = 18 then
16315: LD_VAR 0 3
16319: PUSH
16320: LD_INT 18
16322: EQUAL
16323: IFFALSE 16333
// sLack := true ;
16325: LD_ADDR_EXP 68
16329: PUSH
16330: LD_INT 1
16332: ST_TO_ADDR
// if p3 = 19 then
16333: LD_VAR 0 3
16337: PUSH
16338: LD_INT 19
16340: EQUAL
16341: IFFALSE 16351
// sTank := true ;
16343: LD_ADDR_EXP 70
16347: PUSH
16348: LD_INT 1
16350: ST_TO_ADDR
// if p3 = 20 then
16351: LD_VAR 0 3
16355: PUSH
16356: LD_INT 20
16358: EQUAL
16359: IFFALSE 16369
// sRemote := true ;
16361: LD_ADDR_EXP 71
16365: PUSH
16366: LD_INT 1
16368: ST_TO_ADDR
// if p3 = 21 then
16369: LD_VAR 0 3
16373: PUSH
16374: LD_INT 21
16376: EQUAL
16377: IFFALSE 16387
// sPowell := true ;
16379: LD_ADDR_EXP 72
16383: PUSH
16384: LD_INT 1
16386: ST_TO_ADDR
// if p3 = 22 then
16387: LD_VAR 0 3
16391: PUSH
16392: LD_INT 22
16394: EQUAL
16395: IFFALSE 16405
// sTeleport := true ;
16397: LD_ADDR_EXP 75
16401: PUSH
16402: LD_INT 1
16404: ST_TO_ADDR
// if p3 = 23 then
16405: LD_VAR 0 3
16409: PUSH
16410: LD_INT 23
16412: EQUAL
16413: IFFALSE 16423
// sOilTower := true ;
16415: LD_ADDR_EXP 77
16419: PUSH
16420: LD_INT 1
16422: ST_TO_ADDR
// if p3 = 24 then
16423: LD_VAR 0 3
16427: PUSH
16428: LD_INT 24
16430: EQUAL
16431: IFFALSE 16441
// sShovel := true ;
16433: LD_ADDR_EXP 78
16437: PUSH
16438: LD_INT 1
16440: ST_TO_ADDR
// if p3 = 25 then
16441: LD_VAR 0 3
16445: PUSH
16446: LD_INT 25
16448: EQUAL
16449: IFFALSE 16459
// sSheik := true ;
16451: LD_ADDR_EXP 79
16455: PUSH
16456: LD_INT 1
16458: ST_TO_ADDR
// if p3 = 26 then
16459: LD_VAR 0 3
16463: PUSH
16464: LD_INT 26
16466: EQUAL
16467: IFFALSE 16477
// sEarthquake := true ;
16469: LD_ADDR_EXP 81
16473: PUSH
16474: LD_INT 1
16476: ST_TO_ADDR
// if p3 = 27 then
16477: LD_VAR 0 3
16481: PUSH
16482: LD_INT 27
16484: EQUAL
16485: IFFALSE 16495
// sAI := true ;
16487: LD_ADDR_EXP 82
16491: PUSH
16492: LD_INT 1
16494: ST_TO_ADDR
// if p3 = 28 then
16495: LD_VAR 0 3
16499: PUSH
16500: LD_INT 28
16502: EQUAL
16503: IFFALSE 16513
// sCargo := true ;
16505: LD_ADDR_EXP 85
16509: PUSH
16510: LD_INT 1
16512: ST_TO_ADDR
// if p3 = 29 then
16513: LD_VAR 0 3
16517: PUSH
16518: LD_INT 29
16520: EQUAL
16521: IFFALSE 16531
// sDLaser := true ;
16523: LD_ADDR_EXP 86
16527: PUSH
16528: LD_INT 1
16530: ST_TO_ADDR
// if p3 = 30 then
16531: LD_VAR 0 3
16535: PUSH
16536: LD_INT 30
16538: EQUAL
16539: IFFALSE 16549
// sExchange := true ;
16541: LD_ADDR_EXP 87
16545: PUSH
16546: LD_INT 1
16548: ST_TO_ADDR
// if p3 = 31 then
16549: LD_VAR 0 3
16553: PUSH
16554: LD_INT 31
16556: EQUAL
16557: IFFALSE 16567
// sFac := true ;
16559: LD_ADDR_EXP 88
16563: PUSH
16564: LD_INT 1
16566: ST_TO_ADDR
// if p3 = 32 then
16567: LD_VAR 0 3
16571: PUSH
16572: LD_INT 32
16574: EQUAL
16575: IFFALSE 16585
// sPower := true ;
16577: LD_ADDR_EXP 89
16581: PUSH
16582: LD_INT 1
16584: ST_TO_ADDR
// if p3 = 33 then
16585: LD_VAR 0 3
16589: PUSH
16590: LD_INT 33
16592: EQUAL
16593: IFFALSE 16603
// sRandom := true ;
16595: LD_ADDR_EXP 90
16599: PUSH
16600: LD_INT 1
16602: ST_TO_ADDR
// if p3 = 34 then
16603: LD_VAR 0 3
16607: PUSH
16608: LD_INT 34
16610: EQUAL
16611: IFFALSE 16621
// sShield := true ;
16613: LD_ADDR_EXP 91
16617: PUSH
16618: LD_INT 1
16620: ST_TO_ADDR
// if p3 = 35 then
16621: LD_VAR 0 3
16625: PUSH
16626: LD_INT 35
16628: EQUAL
16629: IFFALSE 16639
// sTime := true ;
16631: LD_ADDR_EXP 92
16635: PUSH
16636: LD_INT 1
16638: ST_TO_ADDR
// if p3 = 36 then
16639: LD_VAR 0 3
16643: PUSH
16644: LD_INT 36
16646: EQUAL
16647: IFFALSE 16657
// sTools := true ;
16649: LD_ADDR_EXP 93
16653: PUSH
16654: LD_INT 1
16656: ST_TO_ADDR
// if p3 = 101 then
16657: LD_VAR 0 3
16661: PUSH
16662: LD_INT 101
16664: EQUAL
16665: IFFALSE 16675
// sSold := true ;
16667: LD_ADDR_EXP 58
16671: PUSH
16672: LD_INT 1
16674: ST_TO_ADDR
// if p3 = 102 then
16675: LD_VAR 0 3
16679: PUSH
16680: LD_INT 102
16682: EQUAL
16683: IFFALSE 16693
// sDiff := true ;
16685: LD_ADDR_EXP 59
16689: PUSH
16690: LD_INT 1
16692: ST_TO_ADDR
// if p3 = 103 then
16693: LD_VAR 0 3
16697: PUSH
16698: LD_INT 103
16700: EQUAL
16701: IFFALSE 16711
// sFog := true ;
16703: LD_ADDR_EXP 62
16707: PUSH
16708: LD_INT 1
16710: ST_TO_ADDR
// if p3 = 104 then
16711: LD_VAR 0 3
16715: PUSH
16716: LD_INT 104
16718: EQUAL
16719: IFFALSE 16729
// sReset := true ;
16721: LD_ADDR_EXP 63
16725: PUSH
16726: LD_INT 1
16728: ST_TO_ADDR
// if p3 = 105 then
16729: LD_VAR 0 3
16733: PUSH
16734: LD_INT 105
16736: EQUAL
16737: IFFALSE 16747
// sSun := true ;
16739: LD_ADDR_EXP 64
16743: PUSH
16744: LD_INT 1
16746: ST_TO_ADDR
// if p3 = 106 then
16747: LD_VAR 0 3
16751: PUSH
16752: LD_INT 106
16754: EQUAL
16755: IFFALSE 16765
// sTiger := true ;
16757: LD_ADDR_EXP 60
16761: PUSH
16762: LD_INT 1
16764: ST_TO_ADDR
// if p3 = 107 then
16765: LD_VAR 0 3
16769: PUSH
16770: LD_INT 107
16772: EQUAL
16773: IFFALSE 16783
// sBomb := true ;
16775: LD_ADDR_EXP 61
16779: PUSH
16780: LD_INT 1
16782: ST_TO_ADDR
// if p3 = 108 then
16783: LD_VAR 0 3
16787: PUSH
16788: LD_INT 108
16790: EQUAL
16791: IFFALSE 16801
// sWound := true ;
16793: LD_ADDR_EXP 69
16797: PUSH
16798: LD_INT 1
16800: ST_TO_ADDR
// if p3 = 109 then
16801: LD_VAR 0 3
16805: PUSH
16806: LD_INT 109
16808: EQUAL
16809: IFFALSE 16819
// sBetray := true ;
16811: LD_ADDR_EXP 73
16815: PUSH
16816: LD_INT 1
16818: ST_TO_ADDR
// if p3 = 110 then
16819: LD_VAR 0 3
16823: PUSH
16824: LD_INT 110
16826: EQUAL
16827: IFFALSE 16837
// sContamin := true ;
16829: LD_ADDR_EXP 74
16833: PUSH
16834: LD_INT 1
16836: ST_TO_ADDR
// if p3 = 111 then
16837: LD_VAR 0 3
16841: PUSH
16842: LD_INT 111
16844: EQUAL
16845: IFFALSE 16855
// sOil := true ;
16847: LD_ADDR_EXP 76
16851: PUSH
16852: LD_INT 1
16854: ST_TO_ADDR
// if p3 = 112 then
16855: LD_VAR 0 3
16859: PUSH
16860: LD_INT 112
16862: EQUAL
16863: IFFALSE 16873
// sStu := true ;
16865: LD_ADDR_EXP 80
16869: PUSH
16870: LD_INT 1
16872: ST_TO_ADDR
// if p3 = 113 then
16873: LD_VAR 0 3
16877: PUSH
16878: LD_INT 113
16880: EQUAL
16881: IFFALSE 16891
// sBazooka := true ;
16883: LD_ADDR_EXP 83
16887: PUSH
16888: LD_INT 1
16890: ST_TO_ADDR
// if p3 = 114 then
16891: LD_VAR 0 3
16895: PUSH
16896: LD_INT 114
16898: EQUAL
16899: IFFALSE 16909
// sMortar := true ;
16901: LD_ADDR_EXP 84
16905: PUSH
16906: LD_INT 1
16908: ST_TO_ADDR
// if p3 = 115 then
16909: LD_VAR 0 3
16913: PUSH
16914: LD_INT 115
16916: EQUAL
16917: IFFALSE 16927
// sRanger := true ;
16919: LD_ADDR_EXP 94
16923: PUSH
16924: LD_INT 1
16926: ST_TO_ADDR
// if p3 = 116 then
16927: LD_VAR 0 3
16931: PUSH
16932: LD_INT 116
16934: EQUAL
16935: IFFALSE 16945
// sComputer := true ;
16937: LD_ADDR_EXP 95
16941: PUSH
16942: LD_INT 1
16944: ST_TO_ADDR
// if p3 = 117 then
16945: LD_VAR 0 3
16949: PUSH
16950: LD_INT 117
16952: EQUAL
16953: IFFALSE 16963
// s30 := true ;
16955: LD_ADDR_EXP 96
16959: PUSH
16960: LD_INT 1
16962: ST_TO_ADDR
// if p3 = 118 then
16963: LD_VAR 0 3
16967: PUSH
16968: LD_INT 118
16970: EQUAL
16971: IFFALSE 16981
// s60 := true ;
16973: LD_ADDR_EXP 97
16977: PUSH
16978: LD_INT 1
16980: ST_TO_ADDR
// end ; if p2 = hack_mode then
16981: LD_VAR 0 2
16985: PUSH
16986: LD_INT 101
16988: EQUAL
16989: IFFALSE 17117
// begin case p3 of 1 :
16991: LD_VAR 0 3
16995: PUSH
16996: LD_INT 1
16998: DOUBLE
16999: EQUAL
17000: IFTRUE 17004
17002: GO 17011
17004: POP
// hHackUnlimitedResources ; 2 :
17005: CALL 29380 0 0
17009: GO 17117
17011: LD_INT 2
17013: DOUBLE
17014: EQUAL
17015: IFTRUE 17019
17017: GO 17026
17019: POP
// hHackSetLevel10 ; 3 :
17020: CALL 29513 0 0
17024: GO 17117
17026: LD_INT 3
17028: DOUBLE
17029: EQUAL
17030: IFTRUE 17034
17032: GO 17041
17034: POP
// hHackSetLevel10YourUnits ; 4 :
17035: CALL 29598 0 0
17039: GO 17117
17041: LD_INT 4
17043: DOUBLE
17044: EQUAL
17045: IFTRUE 17049
17047: GO 17056
17049: POP
// hHackInvincible ; 5 :
17050: CALL 30046 0 0
17054: GO 17117
17056: LD_INT 5
17058: DOUBLE
17059: EQUAL
17060: IFTRUE 17064
17062: GO 17071
17064: POP
// hHackInvisible ; 6 :
17065: CALL 30157 0 0
17069: GO 17117
17071: LD_INT 6
17073: DOUBLE
17074: EQUAL
17075: IFTRUE 17079
17077: GO 17086
17079: POP
// hHackChangeYourSide ; 7 :
17080: CALL 30214 0 0
17084: GO 17117
17086: LD_INT 7
17088: DOUBLE
17089: EQUAL
17090: IFTRUE 17094
17092: GO 17101
17094: POP
// hHackChangeUnitSide ; 8 :
17095: CALL 30256 0 0
17099: GO 17117
17101: LD_INT 8
17103: DOUBLE
17104: EQUAL
17105: IFTRUE 17109
17107: GO 17116
17109: POP
// hHackFog ; end ;
17110: CALL 30357 0 0
17114: GO 17117
17116: POP
// end ; if p2 = game_save_mode then
17117: LD_VAR 0 2
17121: PUSH
17122: LD_INT 102
17124: EQUAL
17125: IFFALSE 17182
// begin if p3 = 1 then
17127: LD_VAR 0 3
17131: PUSH
17132: LD_INT 1
17134: EQUAL
17135: IFFALSE 17147
// globalGameSaveCounter := p4 ;
17137: LD_ADDR_EXP 40
17141: PUSH
17142: LD_VAR 0 4
17146: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
17147: LD_VAR 0 3
17151: PUSH
17152: LD_INT 2
17154: EQUAL
17155: IFFALSE 17163
17157: PUSH
17158: LD_EXP 40
17162: AND
17163: IFFALSE 17182
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
17165: LD_STRING setGameSaveCounter(
17167: PUSH
17168: LD_EXP 40
17172: STR
17173: PUSH
17174: LD_STRING )
17176: STR
17177: PPUSH
17178: CALL_OW 559
// end ; end ;
17182: LD_VAR 0 7
17186: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
17187: LD_INT 0
17189: PPUSH
// streamModeActive := false ;
17190: LD_ADDR_EXP 41
17194: PUSH
17195: LD_INT 0
17197: ST_TO_ADDR
// normalCounter := 36 ;
17198: LD_ADDR_EXP 42
17202: PUSH
17203: LD_INT 36
17205: ST_TO_ADDR
// hardcoreCounter := 18 ;
17206: LD_ADDR_EXP 43
17210: PUSH
17211: LD_INT 18
17213: ST_TO_ADDR
// sRocket := false ;
17214: LD_ADDR_EXP 46
17218: PUSH
17219: LD_INT 0
17221: ST_TO_ADDR
// sSpeed := false ;
17222: LD_ADDR_EXP 45
17226: PUSH
17227: LD_INT 0
17229: ST_TO_ADDR
// sEngine := false ;
17230: LD_ADDR_EXP 47
17234: PUSH
17235: LD_INT 0
17237: ST_TO_ADDR
// sSpec := false ;
17238: LD_ADDR_EXP 44
17242: PUSH
17243: LD_INT 0
17245: ST_TO_ADDR
// sLevel := false ;
17246: LD_ADDR_EXP 48
17250: PUSH
17251: LD_INT 0
17253: ST_TO_ADDR
// sArmoury := false ;
17254: LD_ADDR_EXP 49
17258: PUSH
17259: LD_INT 0
17261: ST_TO_ADDR
// sRadar := false ;
17262: LD_ADDR_EXP 50
17266: PUSH
17267: LD_INT 0
17269: ST_TO_ADDR
// sBunker := false ;
17270: LD_ADDR_EXP 51
17274: PUSH
17275: LD_INT 0
17277: ST_TO_ADDR
// sHack := false ;
17278: LD_ADDR_EXP 52
17282: PUSH
17283: LD_INT 0
17285: ST_TO_ADDR
// sFire := false ;
17286: LD_ADDR_EXP 53
17290: PUSH
17291: LD_INT 0
17293: ST_TO_ADDR
// sRefresh := false ;
17294: LD_ADDR_EXP 54
17298: PUSH
17299: LD_INT 0
17301: ST_TO_ADDR
// sExp := false ;
17302: LD_ADDR_EXP 55
17306: PUSH
17307: LD_INT 0
17309: ST_TO_ADDR
// sDepot := false ;
17310: LD_ADDR_EXP 56
17314: PUSH
17315: LD_INT 0
17317: ST_TO_ADDR
// sFlag := false ;
17318: LD_ADDR_EXP 57
17322: PUSH
17323: LD_INT 0
17325: ST_TO_ADDR
// sKamikadze := false ;
17326: LD_ADDR_EXP 65
17330: PUSH
17331: LD_INT 0
17333: ST_TO_ADDR
// sTroll := false ;
17334: LD_ADDR_EXP 66
17338: PUSH
17339: LD_INT 0
17341: ST_TO_ADDR
// sSlow := false ;
17342: LD_ADDR_EXP 67
17346: PUSH
17347: LD_INT 0
17349: ST_TO_ADDR
// sLack := false ;
17350: LD_ADDR_EXP 68
17354: PUSH
17355: LD_INT 0
17357: ST_TO_ADDR
// sTank := false ;
17358: LD_ADDR_EXP 70
17362: PUSH
17363: LD_INT 0
17365: ST_TO_ADDR
// sRemote := false ;
17366: LD_ADDR_EXP 71
17370: PUSH
17371: LD_INT 0
17373: ST_TO_ADDR
// sPowell := false ;
17374: LD_ADDR_EXP 72
17378: PUSH
17379: LD_INT 0
17381: ST_TO_ADDR
// sTeleport := false ;
17382: LD_ADDR_EXP 75
17386: PUSH
17387: LD_INT 0
17389: ST_TO_ADDR
// sOilTower := false ;
17390: LD_ADDR_EXP 77
17394: PUSH
17395: LD_INT 0
17397: ST_TO_ADDR
// sShovel := false ;
17398: LD_ADDR_EXP 78
17402: PUSH
17403: LD_INT 0
17405: ST_TO_ADDR
// sSheik := false ;
17406: LD_ADDR_EXP 79
17410: PUSH
17411: LD_INT 0
17413: ST_TO_ADDR
// sEarthquake := false ;
17414: LD_ADDR_EXP 81
17418: PUSH
17419: LD_INT 0
17421: ST_TO_ADDR
// sAI := false ;
17422: LD_ADDR_EXP 82
17426: PUSH
17427: LD_INT 0
17429: ST_TO_ADDR
// sCargo := false ;
17430: LD_ADDR_EXP 85
17434: PUSH
17435: LD_INT 0
17437: ST_TO_ADDR
// sDLaser := false ;
17438: LD_ADDR_EXP 86
17442: PUSH
17443: LD_INT 0
17445: ST_TO_ADDR
// sExchange := false ;
17446: LD_ADDR_EXP 87
17450: PUSH
17451: LD_INT 0
17453: ST_TO_ADDR
// sFac := false ;
17454: LD_ADDR_EXP 88
17458: PUSH
17459: LD_INT 0
17461: ST_TO_ADDR
// sPower := false ;
17462: LD_ADDR_EXP 89
17466: PUSH
17467: LD_INT 0
17469: ST_TO_ADDR
// sRandom := false ;
17470: LD_ADDR_EXP 90
17474: PUSH
17475: LD_INT 0
17477: ST_TO_ADDR
// sShield := false ;
17478: LD_ADDR_EXP 91
17482: PUSH
17483: LD_INT 0
17485: ST_TO_ADDR
// sTime := false ;
17486: LD_ADDR_EXP 92
17490: PUSH
17491: LD_INT 0
17493: ST_TO_ADDR
// sTools := false ;
17494: LD_ADDR_EXP 93
17498: PUSH
17499: LD_INT 0
17501: ST_TO_ADDR
// sSold := false ;
17502: LD_ADDR_EXP 58
17506: PUSH
17507: LD_INT 0
17509: ST_TO_ADDR
// sDiff := false ;
17510: LD_ADDR_EXP 59
17514: PUSH
17515: LD_INT 0
17517: ST_TO_ADDR
// sFog := false ;
17518: LD_ADDR_EXP 62
17522: PUSH
17523: LD_INT 0
17525: ST_TO_ADDR
// sReset := false ;
17526: LD_ADDR_EXP 63
17530: PUSH
17531: LD_INT 0
17533: ST_TO_ADDR
// sSun := false ;
17534: LD_ADDR_EXP 64
17538: PUSH
17539: LD_INT 0
17541: ST_TO_ADDR
// sTiger := false ;
17542: LD_ADDR_EXP 60
17546: PUSH
17547: LD_INT 0
17549: ST_TO_ADDR
// sBomb := false ;
17550: LD_ADDR_EXP 61
17554: PUSH
17555: LD_INT 0
17557: ST_TO_ADDR
// sWound := false ;
17558: LD_ADDR_EXP 69
17562: PUSH
17563: LD_INT 0
17565: ST_TO_ADDR
// sBetray := false ;
17566: LD_ADDR_EXP 73
17570: PUSH
17571: LD_INT 0
17573: ST_TO_ADDR
// sContamin := false ;
17574: LD_ADDR_EXP 74
17578: PUSH
17579: LD_INT 0
17581: ST_TO_ADDR
// sOil := false ;
17582: LD_ADDR_EXP 76
17586: PUSH
17587: LD_INT 0
17589: ST_TO_ADDR
// sStu := false ;
17590: LD_ADDR_EXP 80
17594: PUSH
17595: LD_INT 0
17597: ST_TO_ADDR
// sBazooka := false ;
17598: LD_ADDR_EXP 83
17602: PUSH
17603: LD_INT 0
17605: ST_TO_ADDR
// sMortar := false ;
17606: LD_ADDR_EXP 84
17610: PUSH
17611: LD_INT 0
17613: ST_TO_ADDR
// sRanger := false ;
17614: LD_ADDR_EXP 94
17618: PUSH
17619: LD_INT 0
17621: ST_TO_ADDR
// sComputer := false ;
17622: LD_ADDR_EXP 95
17626: PUSH
17627: LD_INT 0
17629: ST_TO_ADDR
// s30 := false ;
17630: LD_ADDR_EXP 96
17634: PUSH
17635: LD_INT 0
17637: ST_TO_ADDR
// s60 := false ;
17638: LD_ADDR_EXP 97
17642: PUSH
17643: LD_INT 0
17645: ST_TO_ADDR
// end ;
17646: LD_VAR 0 1
17650: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17651: LD_INT 0
17653: PPUSH
17654: PPUSH
17655: PPUSH
17656: PPUSH
17657: PPUSH
17658: PPUSH
17659: PPUSH
// result := [ ] ;
17660: LD_ADDR_VAR 0 2
17664: PUSH
17665: EMPTY
17666: ST_TO_ADDR
// if campaign_id = 1 then
17667: LD_OWVAR 69
17671: PUSH
17672: LD_INT 1
17674: EQUAL
17675: IFFALSE 20841
// begin case mission_number of 1 :
17677: LD_OWVAR 70
17681: PUSH
17682: LD_INT 1
17684: DOUBLE
17685: EQUAL
17686: IFTRUE 17690
17688: GO 17766
17690: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17691: LD_ADDR_VAR 0 2
17695: PUSH
17696: LD_INT 2
17698: PUSH
17699: LD_INT 4
17701: PUSH
17702: LD_INT 11
17704: PUSH
17705: LD_INT 12
17707: PUSH
17708: LD_INT 15
17710: PUSH
17711: LD_INT 16
17713: PUSH
17714: LD_INT 22
17716: PUSH
17717: LD_INT 23
17719: PUSH
17720: LD_INT 26
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: PUSH
17734: LD_INT 101
17736: PUSH
17737: LD_INT 102
17739: PUSH
17740: LD_INT 106
17742: PUSH
17743: LD_INT 116
17745: PUSH
17746: LD_INT 117
17748: PUSH
17749: LD_INT 118
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: ST_TO_ADDR
17764: GO 20839
17766: LD_INT 2
17768: DOUBLE
17769: EQUAL
17770: IFTRUE 17774
17772: GO 17858
17774: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17775: LD_ADDR_VAR 0 2
17779: PUSH
17780: LD_INT 2
17782: PUSH
17783: LD_INT 4
17785: PUSH
17786: LD_INT 11
17788: PUSH
17789: LD_INT 12
17791: PUSH
17792: LD_INT 15
17794: PUSH
17795: LD_INT 16
17797: PUSH
17798: LD_INT 22
17800: PUSH
17801: LD_INT 23
17803: PUSH
17804: LD_INT 26
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: PUSH
17818: LD_INT 101
17820: PUSH
17821: LD_INT 102
17823: PUSH
17824: LD_INT 105
17826: PUSH
17827: LD_INT 106
17829: PUSH
17830: LD_INT 108
17832: PUSH
17833: LD_INT 116
17835: PUSH
17836: LD_INT 117
17838: PUSH
17839: LD_INT 118
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: ST_TO_ADDR
17856: GO 20839
17858: LD_INT 3
17860: DOUBLE
17861: EQUAL
17862: IFTRUE 17866
17864: GO 17954
17866: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17867: LD_ADDR_VAR 0 2
17871: PUSH
17872: LD_INT 2
17874: PUSH
17875: LD_INT 4
17877: PUSH
17878: LD_INT 5
17880: PUSH
17881: LD_INT 11
17883: PUSH
17884: LD_INT 12
17886: PUSH
17887: LD_INT 15
17889: PUSH
17890: LD_INT 16
17892: PUSH
17893: LD_INT 22
17895: PUSH
17896: LD_INT 26
17898: PUSH
17899: LD_INT 36
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 101
17916: PUSH
17917: LD_INT 102
17919: PUSH
17920: LD_INT 105
17922: PUSH
17923: LD_INT 106
17925: PUSH
17926: LD_INT 108
17928: PUSH
17929: LD_INT 116
17931: PUSH
17932: LD_INT 117
17934: PUSH
17935: LD_INT 118
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: ST_TO_ADDR
17952: GO 20839
17954: LD_INT 4
17956: DOUBLE
17957: EQUAL
17958: IFTRUE 17962
17960: GO 18058
17962: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17963: LD_ADDR_VAR 0 2
17967: PUSH
17968: LD_INT 2
17970: PUSH
17971: LD_INT 4
17973: PUSH
17974: LD_INT 5
17976: PUSH
17977: LD_INT 8
17979: PUSH
17980: LD_INT 11
17982: PUSH
17983: LD_INT 12
17985: PUSH
17986: LD_INT 15
17988: PUSH
17989: LD_INT 16
17991: PUSH
17992: LD_INT 22
17994: PUSH
17995: LD_INT 23
17997: PUSH
17998: LD_INT 26
18000: PUSH
18001: LD_INT 36
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 101
18020: PUSH
18021: LD_INT 102
18023: PUSH
18024: LD_INT 105
18026: PUSH
18027: LD_INT 106
18029: PUSH
18030: LD_INT 108
18032: PUSH
18033: LD_INT 116
18035: PUSH
18036: LD_INT 117
18038: PUSH
18039: LD_INT 118
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: PUSH
18052: EMPTY
18053: LIST
18054: LIST
18055: ST_TO_ADDR
18056: GO 20839
18058: LD_INT 5
18060: DOUBLE
18061: EQUAL
18062: IFTRUE 18066
18064: GO 18178
18066: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
18067: LD_ADDR_VAR 0 2
18071: PUSH
18072: LD_INT 2
18074: PUSH
18075: LD_INT 4
18077: PUSH
18078: LD_INT 5
18080: PUSH
18081: LD_INT 6
18083: PUSH
18084: LD_INT 8
18086: PUSH
18087: LD_INT 11
18089: PUSH
18090: LD_INT 12
18092: PUSH
18093: LD_INT 15
18095: PUSH
18096: LD_INT 16
18098: PUSH
18099: LD_INT 22
18101: PUSH
18102: LD_INT 23
18104: PUSH
18105: LD_INT 25
18107: PUSH
18108: LD_INT 26
18110: PUSH
18111: LD_INT 36
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: PUSH
18130: LD_INT 101
18132: PUSH
18133: LD_INT 102
18135: PUSH
18136: LD_INT 105
18138: PUSH
18139: LD_INT 106
18141: PUSH
18142: LD_INT 108
18144: PUSH
18145: LD_INT 109
18147: PUSH
18148: LD_INT 112
18150: PUSH
18151: LD_INT 116
18153: PUSH
18154: LD_INT 117
18156: PUSH
18157: LD_INT 118
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: ST_TO_ADDR
18176: GO 20839
18178: LD_INT 6
18180: DOUBLE
18181: EQUAL
18182: IFTRUE 18186
18184: GO 18318
18186: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
18187: LD_ADDR_VAR 0 2
18191: PUSH
18192: LD_INT 2
18194: PUSH
18195: LD_INT 4
18197: PUSH
18198: LD_INT 5
18200: PUSH
18201: LD_INT 6
18203: PUSH
18204: LD_INT 8
18206: PUSH
18207: LD_INT 11
18209: PUSH
18210: LD_INT 12
18212: PUSH
18213: LD_INT 15
18215: PUSH
18216: LD_INT 16
18218: PUSH
18219: LD_INT 20
18221: PUSH
18222: LD_INT 21
18224: PUSH
18225: LD_INT 22
18227: PUSH
18228: LD_INT 23
18230: PUSH
18231: LD_INT 25
18233: PUSH
18234: LD_INT 26
18236: PUSH
18237: LD_INT 30
18239: PUSH
18240: LD_INT 31
18242: PUSH
18243: LD_INT 32
18245: PUSH
18246: LD_INT 36
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: LIST
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 101
18272: PUSH
18273: LD_INT 102
18275: PUSH
18276: LD_INT 105
18278: PUSH
18279: LD_INT 106
18281: PUSH
18282: LD_INT 108
18284: PUSH
18285: LD_INT 109
18287: PUSH
18288: LD_INT 112
18290: PUSH
18291: LD_INT 116
18293: PUSH
18294: LD_INT 117
18296: PUSH
18297: LD_INT 118
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: LIST
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: ST_TO_ADDR
18316: GO 20839
18318: LD_INT 7
18320: DOUBLE
18321: EQUAL
18322: IFTRUE 18326
18324: GO 18438
18326: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
18327: LD_ADDR_VAR 0 2
18331: PUSH
18332: LD_INT 2
18334: PUSH
18335: LD_INT 4
18337: PUSH
18338: LD_INT 5
18340: PUSH
18341: LD_INT 7
18343: PUSH
18344: LD_INT 11
18346: PUSH
18347: LD_INT 12
18349: PUSH
18350: LD_INT 15
18352: PUSH
18353: LD_INT 16
18355: PUSH
18356: LD_INT 20
18358: PUSH
18359: LD_INT 21
18361: PUSH
18362: LD_INT 22
18364: PUSH
18365: LD_INT 23
18367: PUSH
18368: LD_INT 25
18370: PUSH
18371: LD_INT 26
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 101
18392: PUSH
18393: LD_INT 102
18395: PUSH
18396: LD_INT 103
18398: PUSH
18399: LD_INT 105
18401: PUSH
18402: LD_INT 106
18404: PUSH
18405: LD_INT 108
18407: PUSH
18408: LD_INT 112
18410: PUSH
18411: LD_INT 116
18413: PUSH
18414: LD_INT 117
18416: PUSH
18417: LD_INT 118
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: ST_TO_ADDR
18436: GO 20839
18438: LD_INT 8
18440: DOUBLE
18441: EQUAL
18442: IFTRUE 18446
18444: GO 18586
18446: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
18447: LD_ADDR_VAR 0 2
18451: PUSH
18452: LD_INT 2
18454: PUSH
18455: LD_INT 4
18457: PUSH
18458: LD_INT 5
18460: PUSH
18461: LD_INT 6
18463: PUSH
18464: LD_INT 7
18466: PUSH
18467: LD_INT 8
18469: PUSH
18470: LD_INT 11
18472: PUSH
18473: LD_INT 12
18475: PUSH
18476: LD_INT 15
18478: PUSH
18479: LD_INT 16
18481: PUSH
18482: LD_INT 20
18484: PUSH
18485: LD_INT 21
18487: PUSH
18488: LD_INT 22
18490: PUSH
18491: LD_INT 23
18493: PUSH
18494: LD_INT 25
18496: PUSH
18497: LD_INT 26
18499: PUSH
18500: LD_INT 30
18502: PUSH
18503: LD_INT 31
18505: PUSH
18506: LD_INT 32
18508: PUSH
18509: LD_INT 36
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 101
18536: PUSH
18537: LD_INT 102
18539: PUSH
18540: LD_INT 103
18542: PUSH
18543: LD_INT 105
18545: PUSH
18546: LD_INT 106
18548: PUSH
18549: LD_INT 108
18551: PUSH
18552: LD_INT 109
18554: PUSH
18555: LD_INT 112
18557: PUSH
18558: LD_INT 116
18560: PUSH
18561: LD_INT 117
18563: PUSH
18564: LD_INT 118
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: ST_TO_ADDR
18584: GO 20839
18586: LD_INT 9
18588: DOUBLE
18589: EQUAL
18590: IFTRUE 18594
18592: GO 18742
18594: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18595: LD_ADDR_VAR 0 2
18599: PUSH
18600: LD_INT 2
18602: PUSH
18603: LD_INT 4
18605: PUSH
18606: LD_INT 5
18608: PUSH
18609: LD_INT 6
18611: PUSH
18612: LD_INT 7
18614: PUSH
18615: LD_INT 8
18617: PUSH
18618: LD_INT 11
18620: PUSH
18621: LD_INT 12
18623: PUSH
18624: LD_INT 15
18626: PUSH
18627: LD_INT 16
18629: PUSH
18630: LD_INT 20
18632: PUSH
18633: LD_INT 21
18635: PUSH
18636: LD_INT 22
18638: PUSH
18639: LD_INT 23
18641: PUSH
18642: LD_INT 25
18644: PUSH
18645: LD_INT 26
18647: PUSH
18648: LD_INT 28
18650: PUSH
18651: LD_INT 30
18653: PUSH
18654: LD_INT 31
18656: PUSH
18657: LD_INT 32
18659: PUSH
18660: LD_INT 36
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 101
18688: PUSH
18689: LD_INT 102
18691: PUSH
18692: LD_INT 103
18694: PUSH
18695: LD_INT 105
18697: PUSH
18698: LD_INT 106
18700: PUSH
18701: LD_INT 108
18703: PUSH
18704: LD_INT 109
18706: PUSH
18707: LD_INT 112
18709: PUSH
18710: LD_INT 114
18712: PUSH
18713: LD_INT 116
18715: PUSH
18716: LD_INT 117
18718: PUSH
18719: LD_INT 118
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: ST_TO_ADDR
18740: GO 20839
18742: LD_INT 10
18744: DOUBLE
18745: EQUAL
18746: IFTRUE 18750
18748: GO 18946
18750: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18751: LD_ADDR_VAR 0 2
18755: PUSH
18756: LD_INT 2
18758: PUSH
18759: LD_INT 4
18761: PUSH
18762: LD_INT 5
18764: PUSH
18765: LD_INT 6
18767: PUSH
18768: LD_INT 7
18770: PUSH
18771: LD_INT 8
18773: PUSH
18774: LD_INT 9
18776: PUSH
18777: LD_INT 10
18779: PUSH
18780: LD_INT 11
18782: PUSH
18783: LD_INT 12
18785: PUSH
18786: LD_INT 13
18788: PUSH
18789: LD_INT 14
18791: PUSH
18792: LD_INT 15
18794: PUSH
18795: LD_INT 16
18797: PUSH
18798: LD_INT 17
18800: PUSH
18801: LD_INT 18
18803: PUSH
18804: LD_INT 19
18806: PUSH
18807: LD_INT 20
18809: PUSH
18810: LD_INT 21
18812: PUSH
18813: LD_INT 22
18815: PUSH
18816: LD_INT 23
18818: PUSH
18819: LD_INT 24
18821: PUSH
18822: LD_INT 25
18824: PUSH
18825: LD_INT 26
18827: PUSH
18828: LD_INT 28
18830: PUSH
18831: LD_INT 30
18833: PUSH
18834: LD_INT 31
18836: PUSH
18837: LD_INT 32
18839: PUSH
18840: LD_INT 36
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: PUSH
18874: LD_INT 101
18876: PUSH
18877: LD_INT 102
18879: PUSH
18880: LD_INT 103
18882: PUSH
18883: LD_INT 104
18885: PUSH
18886: LD_INT 105
18888: PUSH
18889: LD_INT 106
18891: PUSH
18892: LD_INT 107
18894: PUSH
18895: LD_INT 108
18897: PUSH
18898: LD_INT 109
18900: PUSH
18901: LD_INT 110
18903: PUSH
18904: LD_INT 111
18906: PUSH
18907: LD_INT 112
18909: PUSH
18910: LD_INT 114
18912: PUSH
18913: LD_INT 116
18915: PUSH
18916: LD_INT 117
18918: PUSH
18919: LD_INT 118
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: ST_TO_ADDR
18944: GO 20839
18946: LD_INT 11
18948: DOUBLE
18949: EQUAL
18950: IFTRUE 18954
18952: GO 19158
18954: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18955: LD_ADDR_VAR 0 2
18959: PUSH
18960: LD_INT 2
18962: PUSH
18963: LD_INT 3
18965: PUSH
18966: LD_INT 4
18968: PUSH
18969: LD_INT 5
18971: PUSH
18972: LD_INT 6
18974: PUSH
18975: LD_INT 7
18977: PUSH
18978: LD_INT 8
18980: PUSH
18981: LD_INT 9
18983: PUSH
18984: LD_INT 10
18986: PUSH
18987: LD_INT 11
18989: PUSH
18990: LD_INT 12
18992: PUSH
18993: LD_INT 13
18995: PUSH
18996: LD_INT 14
18998: PUSH
18999: LD_INT 15
19001: PUSH
19002: LD_INT 16
19004: PUSH
19005: LD_INT 17
19007: PUSH
19008: LD_INT 18
19010: PUSH
19011: LD_INT 19
19013: PUSH
19014: LD_INT 20
19016: PUSH
19017: LD_INT 21
19019: PUSH
19020: LD_INT 22
19022: PUSH
19023: LD_INT 23
19025: PUSH
19026: LD_INT 24
19028: PUSH
19029: LD_INT 25
19031: PUSH
19032: LD_INT 26
19034: PUSH
19035: LD_INT 28
19037: PUSH
19038: LD_INT 30
19040: PUSH
19041: LD_INT 31
19043: PUSH
19044: LD_INT 32
19046: PUSH
19047: LD_INT 34
19049: PUSH
19050: LD_INT 36
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 101
19088: PUSH
19089: LD_INT 102
19091: PUSH
19092: LD_INT 103
19094: PUSH
19095: LD_INT 104
19097: PUSH
19098: LD_INT 105
19100: PUSH
19101: LD_INT 106
19103: PUSH
19104: LD_INT 107
19106: PUSH
19107: LD_INT 108
19109: PUSH
19110: LD_INT 109
19112: PUSH
19113: LD_INT 110
19115: PUSH
19116: LD_INT 111
19118: PUSH
19119: LD_INT 112
19121: PUSH
19122: LD_INT 114
19124: PUSH
19125: LD_INT 116
19127: PUSH
19128: LD_INT 117
19130: PUSH
19131: LD_INT 118
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: ST_TO_ADDR
19156: GO 20839
19158: LD_INT 12
19160: DOUBLE
19161: EQUAL
19162: IFTRUE 19166
19164: GO 19386
19166: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
19167: LD_ADDR_VAR 0 2
19171: PUSH
19172: LD_INT 1
19174: PUSH
19175: LD_INT 2
19177: PUSH
19178: LD_INT 3
19180: PUSH
19181: LD_INT 4
19183: PUSH
19184: LD_INT 5
19186: PUSH
19187: LD_INT 6
19189: PUSH
19190: LD_INT 7
19192: PUSH
19193: LD_INT 8
19195: PUSH
19196: LD_INT 9
19198: PUSH
19199: LD_INT 10
19201: PUSH
19202: LD_INT 11
19204: PUSH
19205: LD_INT 12
19207: PUSH
19208: LD_INT 13
19210: PUSH
19211: LD_INT 14
19213: PUSH
19214: LD_INT 15
19216: PUSH
19217: LD_INT 16
19219: PUSH
19220: LD_INT 17
19222: PUSH
19223: LD_INT 18
19225: PUSH
19226: LD_INT 19
19228: PUSH
19229: LD_INT 20
19231: PUSH
19232: LD_INT 21
19234: PUSH
19235: LD_INT 22
19237: PUSH
19238: LD_INT 23
19240: PUSH
19241: LD_INT 24
19243: PUSH
19244: LD_INT 25
19246: PUSH
19247: LD_INT 26
19249: PUSH
19250: LD_INT 27
19252: PUSH
19253: LD_INT 28
19255: PUSH
19256: LD_INT 30
19258: PUSH
19259: LD_INT 31
19261: PUSH
19262: LD_INT 32
19264: PUSH
19265: LD_INT 33
19267: PUSH
19268: LD_INT 34
19270: PUSH
19271: LD_INT 36
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: LIST
19283: LIST
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: LIST
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: LIST
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 101
19312: PUSH
19313: LD_INT 102
19315: PUSH
19316: LD_INT 103
19318: PUSH
19319: LD_INT 104
19321: PUSH
19322: LD_INT 105
19324: PUSH
19325: LD_INT 106
19327: PUSH
19328: LD_INT 107
19330: PUSH
19331: LD_INT 108
19333: PUSH
19334: LD_INT 109
19336: PUSH
19337: LD_INT 110
19339: PUSH
19340: LD_INT 111
19342: PUSH
19343: LD_INT 112
19345: PUSH
19346: LD_INT 113
19348: PUSH
19349: LD_INT 114
19351: PUSH
19352: LD_INT 116
19354: PUSH
19355: LD_INT 117
19357: PUSH
19358: LD_INT 118
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: ST_TO_ADDR
19384: GO 20839
19386: LD_INT 13
19388: DOUBLE
19389: EQUAL
19390: IFTRUE 19394
19392: GO 19602
19394: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
19395: LD_ADDR_VAR 0 2
19399: PUSH
19400: LD_INT 1
19402: PUSH
19403: LD_INT 2
19405: PUSH
19406: LD_INT 3
19408: PUSH
19409: LD_INT 4
19411: PUSH
19412: LD_INT 5
19414: PUSH
19415: LD_INT 8
19417: PUSH
19418: LD_INT 9
19420: PUSH
19421: LD_INT 10
19423: PUSH
19424: LD_INT 11
19426: PUSH
19427: LD_INT 12
19429: PUSH
19430: LD_INT 14
19432: PUSH
19433: LD_INT 15
19435: PUSH
19436: LD_INT 16
19438: PUSH
19439: LD_INT 17
19441: PUSH
19442: LD_INT 18
19444: PUSH
19445: LD_INT 19
19447: PUSH
19448: LD_INT 20
19450: PUSH
19451: LD_INT 21
19453: PUSH
19454: LD_INT 22
19456: PUSH
19457: LD_INT 23
19459: PUSH
19460: LD_INT 24
19462: PUSH
19463: LD_INT 25
19465: PUSH
19466: LD_INT 26
19468: PUSH
19469: LD_INT 27
19471: PUSH
19472: LD_INT 28
19474: PUSH
19475: LD_INT 30
19477: PUSH
19478: LD_INT 31
19480: PUSH
19481: LD_INT 32
19483: PUSH
19484: LD_INT 33
19486: PUSH
19487: LD_INT 34
19489: PUSH
19490: LD_INT 36
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: LIST
19497: LIST
19498: LIST
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: LIST
19504: LIST
19505: LIST
19506: LIST
19507: LIST
19508: LIST
19509: LIST
19510: LIST
19511: LIST
19512: LIST
19513: LIST
19514: LIST
19515: LIST
19516: LIST
19517: LIST
19518: LIST
19519: LIST
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 101
19528: PUSH
19529: LD_INT 102
19531: PUSH
19532: LD_INT 103
19534: PUSH
19535: LD_INT 104
19537: PUSH
19538: LD_INT 105
19540: PUSH
19541: LD_INT 106
19543: PUSH
19544: LD_INT 107
19546: PUSH
19547: LD_INT 108
19549: PUSH
19550: LD_INT 109
19552: PUSH
19553: LD_INT 110
19555: PUSH
19556: LD_INT 111
19558: PUSH
19559: LD_INT 112
19561: PUSH
19562: LD_INT 113
19564: PUSH
19565: LD_INT 114
19567: PUSH
19568: LD_INT 116
19570: PUSH
19571: LD_INT 117
19573: PUSH
19574: LD_INT 118
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: ST_TO_ADDR
19600: GO 20839
19602: LD_INT 14
19604: DOUBLE
19605: EQUAL
19606: IFTRUE 19610
19608: GO 19834
19610: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19611: LD_ADDR_VAR 0 2
19615: PUSH
19616: LD_INT 1
19618: PUSH
19619: LD_INT 2
19621: PUSH
19622: LD_INT 3
19624: PUSH
19625: LD_INT 4
19627: PUSH
19628: LD_INT 5
19630: PUSH
19631: LD_INT 6
19633: PUSH
19634: LD_INT 7
19636: PUSH
19637: LD_INT 8
19639: PUSH
19640: LD_INT 9
19642: PUSH
19643: LD_INT 10
19645: PUSH
19646: LD_INT 11
19648: PUSH
19649: LD_INT 12
19651: PUSH
19652: LD_INT 13
19654: PUSH
19655: LD_INT 14
19657: PUSH
19658: LD_INT 15
19660: PUSH
19661: LD_INT 16
19663: PUSH
19664: LD_INT 17
19666: PUSH
19667: LD_INT 18
19669: PUSH
19670: LD_INT 19
19672: PUSH
19673: LD_INT 20
19675: PUSH
19676: LD_INT 21
19678: PUSH
19679: LD_INT 22
19681: PUSH
19682: LD_INT 23
19684: PUSH
19685: LD_INT 24
19687: PUSH
19688: LD_INT 25
19690: PUSH
19691: LD_INT 26
19693: PUSH
19694: LD_INT 27
19696: PUSH
19697: LD_INT 28
19699: PUSH
19700: LD_INT 29
19702: PUSH
19703: LD_INT 30
19705: PUSH
19706: LD_INT 31
19708: PUSH
19709: LD_INT 32
19711: PUSH
19712: LD_INT 33
19714: PUSH
19715: LD_INT 34
19717: PUSH
19718: LD_INT 36
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: LIST
19727: LIST
19728: LIST
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: LIST
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: LIST
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 101
19760: PUSH
19761: LD_INT 102
19763: PUSH
19764: LD_INT 103
19766: PUSH
19767: LD_INT 104
19769: PUSH
19770: LD_INT 105
19772: PUSH
19773: LD_INT 106
19775: PUSH
19776: LD_INT 107
19778: PUSH
19779: LD_INT 108
19781: PUSH
19782: LD_INT 109
19784: PUSH
19785: LD_INT 110
19787: PUSH
19788: LD_INT 111
19790: PUSH
19791: LD_INT 112
19793: PUSH
19794: LD_INT 113
19796: PUSH
19797: LD_INT 114
19799: PUSH
19800: LD_INT 116
19802: PUSH
19803: LD_INT 117
19805: PUSH
19806: LD_INT 118
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: ST_TO_ADDR
19832: GO 20839
19834: LD_INT 15
19836: DOUBLE
19837: EQUAL
19838: IFTRUE 19842
19840: GO 20066
19842: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19843: LD_ADDR_VAR 0 2
19847: PUSH
19848: LD_INT 1
19850: PUSH
19851: LD_INT 2
19853: PUSH
19854: LD_INT 3
19856: PUSH
19857: LD_INT 4
19859: PUSH
19860: LD_INT 5
19862: PUSH
19863: LD_INT 6
19865: PUSH
19866: LD_INT 7
19868: PUSH
19869: LD_INT 8
19871: PUSH
19872: LD_INT 9
19874: PUSH
19875: LD_INT 10
19877: PUSH
19878: LD_INT 11
19880: PUSH
19881: LD_INT 12
19883: PUSH
19884: LD_INT 13
19886: PUSH
19887: LD_INT 14
19889: PUSH
19890: LD_INT 15
19892: PUSH
19893: LD_INT 16
19895: PUSH
19896: LD_INT 17
19898: PUSH
19899: LD_INT 18
19901: PUSH
19902: LD_INT 19
19904: PUSH
19905: LD_INT 20
19907: PUSH
19908: LD_INT 21
19910: PUSH
19911: LD_INT 22
19913: PUSH
19914: LD_INT 23
19916: PUSH
19917: LD_INT 24
19919: PUSH
19920: LD_INT 25
19922: PUSH
19923: LD_INT 26
19925: PUSH
19926: LD_INT 27
19928: PUSH
19929: LD_INT 28
19931: PUSH
19932: LD_INT 29
19934: PUSH
19935: LD_INT 30
19937: PUSH
19938: LD_INT 31
19940: PUSH
19941: LD_INT 32
19943: PUSH
19944: LD_INT 33
19946: PUSH
19947: LD_INT 34
19949: PUSH
19950: LD_INT 36
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 101
19992: PUSH
19993: LD_INT 102
19995: PUSH
19996: LD_INT 103
19998: PUSH
19999: LD_INT 104
20001: PUSH
20002: LD_INT 105
20004: PUSH
20005: LD_INT 106
20007: PUSH
20008: LD_INT 107
20010: PUSH
20011: LD_INT 108
20013: PUSH
20014: LD_INT 109
20016: PUSH
20017: LD_INT 110
20019: PUSH
20020: LD_INT 111
20022: PUSH
20023: LD_INT 112
20025: PUSH
20026: LD_INT 113
20028: PUSH
20029: LD_INT 114
20031: PUSH
20032: LD_INT 116
20034: PUSH
20035: LD_INT 117
20037: PUSH
20038: LD_INT 118
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: LIST
20054: LIST
20055: LIST
20056: LIST
20057: LIST
20058: LIST
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: ST_TO_ADDR
20064: GO 20839
20066: LD_INT 16
20068: DOUBLE
20069: EQUAL
20070: IFTRUE 20074
20072: GO 20210
20074: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
20075: LD_ADDR_VAR 0 2
20079: PUSH
20080: LD_INT 2
20082: PUSH
20083: LD_INT 4
20085: PUSH
20086: LD_INT 5
20088: PUSH
20089: LD_INT 7
20091: PUSH
20092: LD_INT 11
20094: PUSH
20095: LD_INT 12
20097: PUSH
20098: LD_INT 15
20100: PUSH
20101: LD_INT 16
20103: PUSH
20104: LD_INT 20
20106: PUSH
20107: LD_INT 21
20109: PUSH
20110: LD_INT 22
20112: PUSH
20113: LD_INT 23
20115: PUSH
20116: LD_INT 25
20118: PUSH
20119: LD_INT 26
20121: PUSH
20122: LD_INT 30
20124: PUSH
20125: LD_INT 31
20127: PUSH
20128: LD_INT 32
20130: PUSH
20131: LD_INT 33
20133: PUSH
20134: LD_INT 34
20136: PUSH
20137: EMPTY
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 101
20160: PUSH
20161: LD_INT 102
20163: PUSH
20164: LD_INT 103
20166: PUSH
20167: LD_INT 106
20169: PUSH
20170: LD_INT 108
20172: PUSH
20173: LD_INT 112
20175: PUSH
20176: LD_INT 113
20178: PUSH
20179: LD_INT 114
20181: PUSH
20182: LD_INT 116
20184: PUSH
20185: LD_INT 117
20187: PUSH
20188: LD_INT 118
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: ST_TO_ADDR
20208: GO 20839
20210: LD_INT 17
20212: DOUBLE
20213: EQUAL
20214: IFTRUE 20218
20216: GO 20442
20218: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
20219: LD_ADDR_VAR 0 2
20223: PUSH
20224: LD_INT 1
20226: PUSH
20227: LD_INT 2
20229: PUSH
20230: LD_INT 3
20232: PUSH
20233: LD_INT 4
20235: PUSH
20236: LD_INT 5
20238: PUSH
20239: LD_INT 6
20241: PUSH
20242: LD_INT 7
20244: PUSH
20245: LD_INT 8
20247: PUSH
20248: LD_INT 9
20250: PUSH
20251: LD_INT 10
20253: PUSH
20254: LD_INT 11
20256: PUSH
20257: LD_INT 12
20259: PUSH
20260: LD_INT 13
20262: PUSH
20263: LD_INT 14
20265: PUSH
20266: LD_INT 15
20268: PUSH
20269: LD_INT 16
20271: PUSH
20272: LD_INT 17
20274: PUSH
20275: LD_INT 18
20277: PUSH
20278: LD_INT 19
20280: PUSH
20281: LD_INT 20
20283: PUSH
20284: LD_INT 21
20286: PUSH
20287: LD_INT 22
20289: PUSH
20290: LD_INT 23
20292: PUSH
20293: LD_INT 24
20295: PUSH
20296: LD_INT 25
20298: PUSH
20299: LD_INT 26
20301: PUSH
20302: LD_INT 27
20304: PUSH
20305: LD_INT 28
20307: PUSH
20308: LD_INT 29
20310: PUSH
20311: LD_INT 30
20313: PUSH
20314: LD_INT 31
20316: PUSH
20317: LD_INT 32
20319: PUSH
20320: LD_INT 33
20322: PUSH
20323: LD_INT 34
20325: PUSH
20326: LD_INT 36
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: LIST
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: PUSH
20366: LD_INT 101
20368: PUSH
20369: LD_INT 102
20371: PUSH
20372: LD_INT 103
20374: PUSH
20375: LD_INT 104
20377: PUSH
20378: LD_INT 105
20380: PUSH
20381: LD_INT 106
20383: PUSH
20384: LD_INT 107
20386: PUSH
20387: LD_INT 108
20389: PUSH
20390: LD_INT 109
20392: PUSH
20393: LD_INT 110
20395: PUSH
20396: LD_INT 111
20398: PUSH
20399: LD_INT 112
20401: PUSH
20402: LD_INT 113
20404: PUSH
20405: LD_INT 114
20407: PUSH
20408: LD_INT 116
20410: PUSH
20411: LD_INT 117
20413: PUSH
20414: LD_INT 118
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: ST_TO_ADDR
20440: GO 20839
20442: LD_INT 18
20444: DOUBLE
20445: EQUAL
20446: IFTRUE 20450
20448: GO 20598
20450: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
20451: LD_ADDR_VAR 0 2
20455: PUSH
20456: LD_INT 2
20458: PUSH
20459: LD_INT 4
20461: PUSH
20462: LD_INT 5
20464: PUSH
20465: LD_INT 7
20467: PUSH
20468: LD_INT 11
20470: PUSH
20471: LD_INT 12
20473: PUSH
20474: LD_INT 15
20476: PUSH
20477: LD_INT 16
20479: PUSH
20480: LD_INT 20
20482: PUSH
20483: LD_INT 21
20485: PUSH
20486: LD_INT 22
20488: PUSH
20489: LD_INT 23
20491: PUSH
20492: LD_INT 25
20494: PUSH
20495: LD_INT 26
20497: PUSH
20498: LD_INT 30
20500: PUSH
20501: LD_INT 31
20503: PUSH
20504: LD_INT 32
20506: PUSH
20507: LD_INT 33
20509: PUSH
20510: LD_INT 34
20512: PUSH
20513: LD_INT 35
20515: PUSH
20516: LD_INT 36
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 101
20544: PUSH
20545: LD_INT 102
20547: PUSH
20548: LD_INT 103
20550: PUSH
20551: LD_INT 106
20553: PUSH
20554: LD_INT 108
20556: PUSH
20557: LD_INT 112
20559: PUSH
20560: LD_INT 113
20562: PUSH
20563: LD_INT 114
20565: PUSH
20566: LD_INT 115
20568: PUSH
20569: LD_INT 116
20571: PUSH
20572: LD_INT 117
20574: PUSH
20575: LD_INT 118
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: ST_TO_ADDR
20596: GO 20839
20598: LD_INT 19
20600: DOUBLE
20601: EQUAL
20602: IFTRUE 20606
20604: GO 20838
20606: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20607: LD_ADDR_VAR 0 2
20611: PUSH
20612: LD_INT 1
20614: PUSH
20615: LD_INT 2
20617: PUSH
20618: LD_INT 3
20620: PUSH
20621: LD_INT 4
20623: PUSH
20624: LD_INT 5
20626: PUSH
20627: LD_INT 6
20629: PUSH
20630: LD_INT 7
20632: PUSH
20633: LD_INT 8
20635: PUSH
20636: LD_INT 9
20638: PUSH
20639: LD_INT 10
20641: PUSH
20642: LD_INT 11
20644: PUSH
20645: LD_INT 12
20647: PUSH
20648: LD_INT 13
20650: PUSH
20651: LD_INT 14
20653: PUSH
20654: LD_INT 15
20656: PUSH
20657: LD_INT 16
20659: PUSH
20660: LD_INT 17
20662: PUSH
20663: LD_INT 18
20665: PUSH
20666: LD_INT 19
20668: PUSH
20669: LD_INT 20
20671: PUSH
20672: LD_INT 21
20674: PUSH
20675: LD_INT 22
20677: PUSH
20678: LD_INT 23
20680: PUSH
20681: LD_INT 24
20683: PUSH
20684: LD_INT 25
20686: PUSH
20687: LD_INT 26
20689: PUSH
20690: LD_INT 27
20692: PUSH
20693: LD_INT 28
20695: PUSH
20696: LD_INT 29
20698: PUSH
20699: LD_INT 30
20701: PUSH
20702: LD_INT 31
20704: PUSH
20705: LD_INT 32
20707: PUSH
20708: LD_INT 33
20710: PUSH
20711: LD_INT 34
20713: PUSH
20714: LD_INT 35
20716: PUSH
20717: LD_INT 36
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: LIST
20734: LIST
20735: LIST
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: LIST
20741: LIST
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: LIST
20749: LIST
20750: LIST
20751: LIST
20752: LIST
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: PUSH
20758: LD_INT 101
20760: PUSH
20761: LD_INT 102
20763: PUSH
20764: LD_INT 103
20766: PUSH
20767: LD_INT 104
20769: PUSH
20770: LD_INT 105
20772: PUSH
20773: LD_INT 106
20775: PUSH
20776: LD_INT 107
20778: PUSH
20779: LD_INT 108
20781: PUSH
20782: LD_INT 109
20784: PUSH
20785: LD_INT 110
20787: PUSH
20788: LD_INT 111
20790: PUSH
20791: LD_INT 112
20793: PUSH
20794: LD_INT 113
20796: PUSH
20797: LD_INT 114
20799: PUSH
20800: LD_INT 115
20802: PUSH
20803: LD_INT 116
20805: PUSH
20806: LD_INT 117
20808: PUSH
20809: LD_INT 118
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: LIST
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: ST_TO_ADDR
20836: GO 20839
20838: POP
// end else
20839: GO 21070
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20841: LD_ADDR_VAR 0 2
20845: PUSH
20846: LD_INT 1
20848: PUSH
20849: LD_INT 2
20851: PUSH
20852: LD_INT 3
20854: PUSH
20855: LD_INT 4
20857: PUSH
20858: LD_INT 5
20860: PUSH
20861: LD_INT 6
20863: PUSH
20864: LD_INT 7
20866: PUSH
20867: LD_INT 8
20869: PUSH
20870: LD_INT 9
20872: PUSH
20873: LD_INT 10
20875: PUSH
20876: LD_INT 11
20878: PUSH
20879: LD_INT 12
20881: PUSH
20882: LD_INT 13
20884: PUSH
20885: LD_INT 14
20887: PUSH
20888: LD_INT 15
20890: PUSH
20891: LD_INT 16
20893: PUSH
20894: LD_INT 17
20896: PUSH
20897: LD_INT 18
20899: PUSH
20900: LD_INT 19
20902: PUSH
20903: LD_INT 20
20905: PUSH
20906: LD_INT 21
20908: PUSH
20909: LD_INT 22
20911: PUSH
20912: LD_INT 23
20914: PUSH
20915: LD_INT 24
20917: PUSH
20918: LD_INT 25
20920: PUSH
20921: LD_INT 26
20923: PUSH
20924: LD_INT 27
20926: PUSH
20927: LD_INT 28
20929: PUSH
20930: LD_INT 29
20932: PUSH
20933: LD_INT 30
20935: PUSH
20936: LD_INT 31
20938: PUSH
20939: LD_INT 32
20941: PUSH
20942: LD_INT 33
20944: PUSH
20945: LD_INT 34
20947: PUSH
20948: LD_INT 35
20950: PUSH
20951: LD_INT 36
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 101
20994: PUSH
20995: LD_INT 102
20997: PUSH
20998: LD_INT 103
21000: PUSH
21001: LD_INT 104
21003: PUSH
21004: LD_INT 105
21006: PUSH
21007: LD_INT 106
21009: PUSH
21010: LD_INT 107
21012: PUSH
21013: LD_INT 108
21015: PUSH
21016: LD_INT 109
21018: PUSH
21019: LD_INT 110
21021: PUSH
21022: LD_INT 111
21024: PUSH
21025: LD_INT 112
21027: PUSH
21028: LD_INT 113
21030: PUSH
21031: LD_INT 114
21033: PUSH
21034: LD_INT 115
21036: PUSH
21037: LD_INT 116
21039: PUSH
21040: LD_INT 117
21042: PUSH
21043: LD_INT 118
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: LIST
21064: LIST
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: ST_TO_ADDR
// if result then
21070: LD_VAR 0 2
21074: IFFALSE 21860
// begin normal :=  ;
21076: LD_ADDR_VAR 0 5
21080: PUSH
21081: LD_STRING 
21083: ST_TO_ADDR
// hardcore :=  ;
21084: LD_ADDR_VAR 0 6
21088: PUSH
21089: LD_STRING 
21091: ST_TO_ADDR
// active :=  ;
21092: LD_ADDR_VAR 0 7
21096: PUSH
21097: LD_STRING 
21099: ST_TO_ADDR
// for i = 1 to normalCounter do
21100: LD_ADDR_VAR 0 8
21104: PUSH
21105: DOUBLE
21106: LD_INT 1
21108: DEC
21109: ST_TO_ADDR
21110: LD_EXP 42
21114: PUSH
21115: FOR_TO
21116: IFFALSE 21217
// begin tmp := 0 ;
21118: LD_ADDR_VAR 0 3
21122: PUSH
21123: LD_STRING 0
21125: ST_TO_ADDR
// if result [ 1 ] then
21126: LD_VAR 0 2
21130: PUSH
21131: LD_INT 1
21133: ARRAY
21134: IFFALSE 21199
// if result [ 1 ] [ 1 ] = i then
21136: LD_VAR 0 2
21140: PUSH
21141: LD_INT 1
21143: ARRAY
21144: PUSH
21145: LD_INT 1
21147: ARRAY
21148: PUSH
21149: LD_VAR 0 8
21153: EQUAL
21154: IFFALSE 21199
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
21156: LD_ADDR_VAR 0 2
21160: PUSH
21161: LD_VAR 0 2
21165: PPUSH
21166: LD_INT 1
21168: PPUSH
21169: LD_VAR 0 2
21173: PUSH
21174: LD_INT 1
21176: ARRAY
21177: PPUSH
21178: LD_INT 1
21180: PPUSH
21181: CALL_OW 3
21185: PPUSH
21186: CALL_OW 1
21190: ST_TO_ADDR
// tmp := 1 ;
21191: LD_ADDR_VAR 0 3
21195: PUSH
21196: LD_STRING 1
21198: ST_TO_ADDR
// end ; normal := normal & tmp ;
21199: LD_ADDR_VAR 0 5
21203: PUSH
21204: LD_VAR 0 5
21208: PUSH
21209: LD_VAR 0 3
21213: STR
21214: ST_TO_ADDR
// end ;
21215: GO 21115
21217: POP
21218: POP
// for i = 1 to hardcoreCounter do
21219: LD_ADDR_VAR 0 8
21223: PUSH
21224: DOUBLE
21225: LD_INT 1
21227: DEC
21228: ST_TO_ADDR
21229: LD_EXP 43
21233: PUSH
21234: FOR_TO
21235: IFFALSE 21340
// begin tmp := 0 ;
21237: LD_ADDR_VAR 0 3
21241: PUSH
21242: LD_STRING 0
21244: ST_TO_ADDR
// if result [ 2 ] then
21245: LD_VAR 0 2
21249: PUSH
21250: LD_INT 2
21252: ARRAY
21253: IFFALSE 21322
// if result [ 2 ] [ 1 ] = 100 + i then
21255: LD_VAR 0 2
21259: PUSH
21260: LD_INT 2
21262: ARRAY
21263: PUSH
21264: LD_INT 1
21266: ARRAY
21267: PUSH
21268: LD_INT 100
21270: PUSH
21271: LD_VAR 0 8
21275: PLUS
21276: EQUAL
21277: IFFALSE 21322
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
21279: LD_ADDR_VAR 0 2
21283: PUSH
21284: LD_VAR 0 2
21288: PPUSH
21289: LD_INT 2
21291: PPUSH
21292: LD_VAR 0 2
21296: PUSH
21297: LD_INT 2
21299: ARRAY
21300: PPUSH
21301: LD_INT 1
21303: PPUSH
21304: CALL_OW 3
21308: PPUSH
21309: CALL_OW 1
21313: ST_TO_ADDR
// tmp := 1 ;
21314: LD_ADDR_VAR 0 3
21318: PUSH
21319: LD_STRING 1
21321: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
21322: LD_ADDR_VAR 0 6
21326: PUSH
21327: LD_VAR 0 6
21331: PUSH
21332: LD_VAR 0 3
21336: STR
21337: ST_TO_ADDR
// end ;
21338: GO 21234
21340: POP
21341: POP
// if isGameLoad then
21342: LD_VAR 0 1
21346: IFFALSE 21821
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
21348: LD_ADDR_VAR 0 4
21352: PUSH
21353: LD_EXP 46
21357: PUSH
21358: LD_EXP 45
21362: PUSH
21363: LD_EXP 47
21367: PUSH
21368: LD_EXP 44
21372: PUSH
21373: LD_EXP 48
21377: PUSH
21378: LD_EXP 49
21382: PUSH
21383: LD_EXP 50
21387: PUSH
21388: LD_EXP 51
21392: PUSH
21393: LD_EXP 52
21397: PUSH
21398: LD_EXP 53
21402: PUSH
21403: LD_EXP 54
21407: PUSH
21408: LD_EXP 55
21412: PUSH
21413: LD_EXP 56
21417: PUSH
21418: LD_EXP 57
21422: PUSH
21423: LD_EXP 65
21427: PUSH
21428: LD_EXP 66
21432: PUSH
21433: LD_EXP 67
21437: PUSH
21438: LD_EXP 68
21442: PUSH
21443: LD_EXP 70
21447: PUSH
21448: LD_EXP 71
21452: PUSH
21453: LD_EXP 72
21457: PUSH
21458: LD_EXP 75
21462: PUSH
21463: LD_EXP 77
21467: PUSH
21468: LD_EXP 78
21472: PUSH
21473: LD_EXP 79
21477: PUSH
21478: LD_EXP 81
21482: PUSH
21483: LD_EXP 82
21487: PUSH
21488: LD_EXP 85
21492: PUSH
21493: LD_EXP 86
21497: PUSH
21498: LD_EXP 87
21502: PUSH
21503: LD_EXP 88
21507: PUSH
21508: LD_EXP 89
21512: PUSH
21513: LD_EXP 90
21517: PUSH
21518: LD_EXP 91
21522: PUSH
21523: LD_EXP 92
21527: PUSH
21528: LD_EXP 93
21532: PUSH
21533: LD_EXP 58
21537: PUSH
21538: LD_EXP 59
21542: PUSH
21543: LD_EXP 62
21547: PUSH
21548: LD_EXP 63
21552: PUSH
21553: LD_EXP 64
21557: PUSH
21558: LD_EXP 60
21562: PUSH
21563: LD_EXP 61
21567: PUSH
21568: LD_EXP 69
21572: PUSH
21573: LD_EXP 73
21577: PUSH
21578: LD_EXP 74
21582: PUSH
21583: LD_EXP 76
21587: PUSH
21588: LD_EXP 80
21592: PUSH
21593: LD_EXP 83
21597: PUSH
21598: LD_EXP 84
21602: PUSH
21603: LD_EXP 94
21607: PUSH
21608: LD_EXP 95
21612: PUSH
21613: LD_EXP 96
21617: PUSH
21618: LD_EXP 97
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: ST_TO_ADDR
// tmp :=  ;
21679: LD_ADDR_VAR 0 3
21683: PUSH
21684: LD_STRING 
21686: ST_TO_ADDR
// for i = 1 to normalCounter do
21687: LD_ADDR_VAR 0 8
21691: PUSH
21692: DOUBLE
21693: LD_INT 1
21695: DEC
21696: ST_TO_ADDR
21697: LD_EXP 42
21701: PUSH
21702: FOR_TO
21703: IFFALSE 21739
// begin if flags [ i ] then
21705: LD_VAR 0 4
21709: PUSH
21710: LD_VAR 0 8
21714: ARRAY
21715: IFFALSE 21737
// tmp := tmp & i & ; ;
21717: LD_ADDR_VAR 0 3
21721: PUSH
21722: LD_VAR 0 3
21726: PUSH
21727: LD_VAR 0 8
21731: STR
21732: PUSH
21733: LD_STRING ;
21735: STR
21736: ST_TO_ADDR
// end ;
21737: GO 21702
21739: POP
21740: POP
// for i = 1 to hardcoreCounter do
21741: LD_ADDR_VAR 0 8
21745: PUSH
21746: DOUBLE
21747: LD_INT 1
21749: DEC
21750: ST_TO_ADDR
21751: LD_EXP 43
21755: PUSH
21756: FOR_TO
21757: IFFALSE 21803
// begin if flags [ normalCounter + i ] then
21759: LD_VAR 0 4
21763: PUSH
21764: LD_EXP 42
21768: PUSH
21769: LD_VAR 0 8
21773: PLUS
21774: ARRAY
21775: IFFALSE 21801
// tmp := tmp & ( 100 + i ) & ; ;
21777: LD_ADDR_VAR 0 3
21781: PUSH
21782: LD_VAR 0 3
21786: PUSH
21787: LD_INT 100
21789: PUSH
21790: LD_VAR 0 8
21794: PLUS
21795: STR
21796: PUSH
21797: LD_STRING ;
21799: STR
21800: ST_TO_ADDR
// end ;
21801: GO 21756
21803: POP
21804: POP
// if tmp then
21805: LD_VAR 0 3
21809: IFFALSE 21821
// active := tmp ;
21811: LD_ADDR_VAR 0 7
21815: PUSH
21816: LD_VAR 0 3
21820: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21821: LD_STRING getStreamItemsFromMission("
21823: PUSH
21824: LD_VAR 0 5
21828: STR
21829: PUSH
21830: LD_STRING ","
21832: STR
21833: PUSH
21834: LD_VAR 0 6
21838: STR
21839: PUSH
21840: LD_STRING ","
21842: STR
21843: PUSH
21844: LD_VAR 0 7
21848: STR
21849: PUSH
21850: LD_STRING ")
21852: STR
21853: PPUSH
21854: CALL_OW 559
// end else
21858: GO 21867
// ToLua ( getStreamItemsFromMission("","","") ) ;
21860: LD_STRING getStreamItemsFromMission("","","")
21862: PPUSH
21863: CALL_OW 559
// end ;
21867: LD_VAR 0 2
21871: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21872: LD_EXP 41
21876: IFFALSE 21884
21878: PUSH
21879: LD_EXP 46
21883: AND
21884: IFFALSE 22008
21886: GO 21888
21888: DISABLE
21889: LD_INT 0
21891: PPUSH
21892: PPUSH
// begin enable ;
21893: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21894: LD_ADDR_VAR 0 2
21898: PUSH
21899: LD_INT 22
21901: PUSH
21902: LD_OWVAR 2
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 2
21913: PUSH
21914: LD_INT 34
21916: PUSH
21917: LD_INT 7
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: PUSH
21924: LD_INT 34
21926: PUSH
21927: LD_INT 45
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PUSH
21934: LD_INT 34
21936: PUSH
21937: LD_INT 28
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: PUSH
21944: LD_INT 34
21946: PUSH
21947: LD_INT 47
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: PPUSH
21965: CALL_OW 69
21969: ST_TO_ADDR
// if not tmp then
21970: LD_VAR 0 2
21974: NOT
21975: IFFALSE 21979
// exit ;
21977: GO 22008
// for i in tmp do
21979: LD_ADDR_VAR 0 1
21983: PUSH
21984: LD_VAR 0 2
21988: PUSH
21989: FOR_IN
21990: IFFALSE 22006
// begin SetLives ( i , 0 ) ;
21992: LD_VAR 0 1
21996: PPUSH
21997: LD_INT 0
21999: PPUSH
22000: CALL_OW 234
// end ;
22004: GO 21989
22006: POP
22007: POP
// end ;
22008: PPOPN 2
22010: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
22011: LD_EXP 41
22015: IFFALSE 22023
22017: PUSH
22018: LD_EXP 47
22022: AND
22023: IFFALSE 22107
22025: GO 22027
22027: DISABLE
22028: LD_INT 0
22030: PPUSH
22031: PPUSH
// begin enable ;
22032: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
22033: LD_ADDR_VAR 0 2
22037: PUSH
22038: LD_INT 22
22040: PUSH
22041: LD_OWVAR 2
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 32
22052: PUSH
22053: LD_INT 3
22055: PUSH
22056: EMPTY
22057: LIST
22058: LIST
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: PPUSH
22064: CALL_OW 69
22068: ST_TO_ADDR
// if not tmp then
22069: LD_VAR 0 2
22073: NOT
22074: IFFALSE 22078
// exit ;
22076: GO 22107
// for i in tmp do
22078: LD_ADDR_VAR 0 1
22082: PUSH
22083: LD_VAR 0 2
22087: PUSH
22088: FOR_IN
22089: IFFALSE 22105
// begin SetLives ( i , 0 ) ;
22091: LD_VAR 0 1
22095: PPUSH
22096: LD_INT 0
22098: PPUSH
22099: CALL_OW 234
// end ;
22103: GO 22088
22105: POP
22106: POP
// end ;
22107: PPOPN 2
22109: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
22110: LD_EXP 41
22114: IFFALSE 22122
22116: PUSH
22117: LD_EXP 44
22121: AND
22122: IFFALSE 22215
22124: GO 22126
22126: DISABLE
22127: LD_INT 0
22129: PPUSH
// begin enable ;
22130: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
22131: LD_ADDR_VAR 0 1
22135: PUSH
22136: LD_INT 22
22138: PUSH
22139: LD_OWVAR 2
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 2
22150: PUSH
22151: LD_INT 25
22153: PUSH
22154: LD_INT 5
22156: PUSH
22157: EMPTY
22158: LIST
22159: LIST
22160: PUSH
22161: LD_INT 25
22163: PUSH
22164: LD_INT 9
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 25
22173: PUSH
22174: LD_INT 8
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: PPUSH
22191: CALL_OW 69
22195: PUSH
22196: FOR_IN
22197: IFFALSE 22213
// begin SetClass ( i , 1 ) ;
22199: LD_VAR 0 1
22203: PPUSH
22204: LD_INT 1
22206: PPUSH
22207: CALL_OW 336
// end ;
22211: GO 22196
22213: POP
22214: POP
// end ;
22215: PPOPN 1
22217: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
22218: LD_EXP 41
22222: IFFALSE 22230
22224: PUSH
22225: LD_EXP 45
22229: AND
22230: IFFALSE 22242
22232: PUSH
22233: LD_OWVAR 65
22237: PUSH
22238: LD_INT 7
22240: LESS
22241: AND
22242: IFFALSE 22256
22244: GO 22246
22246: DISABLE
// begin enable ;
22247: ENABLE
// game_speed := 7 ;
22248: LD_ADDR_OWVAR 65
22252: PUSH
22253: LD_INT 7
22255: ST_TO_ADDR
// end ;
22256: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
22257: LD_EXP 41
22261: IFFALSE 22269
22263: PUSH
22264: LD_EXP 48
22268: AND
22269: IFFALSE 22471
22271: GO 22273
22273: DISABLE
22274: LD_INT 0
22276: PPUSH
22277: PPUSH
22278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
22279: LD_ADDR_VAR 0 3
22283: PUSH
22284: LD_INT 81
22286: PUSH
22287: LD_OWVAR 2
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 21
22298: PUSH
22299: LD_INT 1
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PPUSH
22310: CALL_OW 69
22314: ST_TO_ADDR
// if not tmp then
22315: LD_VAR 0 3
22319: NOT
22320: IFFALSE 22324
// exit ;
22322: GO 22471
// if tmp > 5 then
22324: LD_VAR 0 3
22328: PUSH
22329: LD_INT 5
22331: GREATER
22332: IFFALSE 22344
// k := 5 else
22334: LD_ADDR_VAR 0 2
22338: PUSH
22339: LD_INT 5
22341: ST_TO_ADDR
22342: GO 22354
// k := tmp ;
22344: LD_ADDR_VAR 0 2
22348: PUSH
22349: LD_VAR 0 3
22353: ST_TO_ADDR
// for i := 1 to k do
22354: LD_ADDR_VAR 0 1
22358: PUSH
22359: DOUBLE
22360: LD_INT 1
22362: DEC
22363: ST_TO_ADDR
22364: LD_VAR 0 2
22368: PUSH
22369: FOR_TO
22370: IFFALSE 22469
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
22372: LD_VAR 0 3
22376: PUSH
22377: LD_VAR 0 1
22381: ARRAY
22382: PPUSH
22383: LD_VAR 0 1
22387: PUSH
22388: LD_INT 4
22390: MOD
22391: PUSH
22392: LD_INT 1
22394: PLUS
22395: PPUSH
22396: CALL_OW 259
22400: PUSH
22401: LD_INT 10
22403: LESS
22404: IFFALSE 22467
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
22406: LD_VAR 0 3
22410: PUSH
22411: LD_VAR 0 1
22415: ARRAY
22416: PPUSH
22417: LD_VAR 0 1
22421: PUSH
22422: LD_INT 4
22424: MOD
22425: PUSH
22426: LD_INT 1
22428: PLUS
22429: PPUSH
22430: LD_VAR 0 3
22434: PUSH
22435: LD_VAR 0 1
22439: ARRAY
22440: PPUSH
22441: LD_VAR 0 1
22445: PUSH
22446: LD_INT 4
22448: MOD
22449: PUSH
22450: LD_INT 1
22452: PLUS
22453: PPUSH
22454: CALL_OW 259
22458: PUSH
22459: LD_INT 1
22461: PLUS
22462: PPUSH
22463: CALL_OW 237
22467: GO 22369
22469: POP
22470: POP
// end ;
22471: PPOPN 3
22473: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
22474: LD_EXP 41
22478: IFFALSE 22486
22480: PUSH
22481: LD_EXP 49
22485: AND
22486: IFFALSE 22506
22488: GO 22490
22490: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
22491: LD_INT 4
22493: PPUSH
22494: LD_OWVAR 2
22498: PPUSH
22499: LD_INT 0
22501: PPUSH
22502: CALL_OW 324
22506: END
// every 0 0$1 trigger StreamModeActive and sShovel do
22507: LD_EXP 41
22511: IFFALSE 22519
22513: PUSH
22514: LD_EXP 78
22518: AND
22519: IFFALSE 22539
22521: GO 22523
22523: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22524: LD_INT 19
22526: PPUSH
22527: LD_OWVAR 2
22531: PPUSH
22532: LD_INT 0
22534: PPUSH
22535: CALL_OW 324
22539: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22540: LD_EXP 41
22544: IFFALSE 22552
22546: PUSH
22547: LD_EXP 50
22551: AND
22552: IFFALSE 22654
22554: GO 22556
22556: DISABLE
22557: LD_INT 0
22559: PPUSH
22560: PPUSH
// begin enable ;
22561: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22562: LD_ADDR_VAR 0 2
22566: PUSH
22567: LD_INT 22
22569: PUSH
22570: LD_OWVAR 2
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 2
22581: PUSH
22582: LD_INT 34
22584: PUSH
22585: LD_INT 11
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: LD_INT 34
22594: PUSH
22595: LD_INT 30
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: LIST
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PPUSH
22611: CALL_OW 69
22615: ST_TO_ADDR
// if not tmp then
22616: LD_VAR 0 2
22620: NOT
22621: IFFALSE 22625
// exit ;
22623: GO 22654
// for i in tmp do
22625: LD_ADDR_VAR 0 1
22629: PUSH
22630: LD_VAR 0 2
22634: PUSH
22635: FOR_IN
22636: IFFALSE 22652
// begin SetLives ( i , 0 ) ;
22638: LD_VAR 0 1
22642: PPUSH
22643: LD_INT 0
22645: PPUSH
22646: CALL_OW 234
// end ;
22650: GO 22635
22652: POP
22653: POP
// end ;
22654: PPOPN 2
22656: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22657: LD_EXP 41
22661: IFFALSE 22669
22663: PUSH
22664: LD_EXP 51
22668: AND
22669: IFFALSE 22689
22671: GO 22673
22673: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22674: LD_INT 32
22676: PPUSH
22677: LD_OWVAR 2
22681: PPUSH
22682: LD_INT 0
22684: PPUSH
22685: CALL_OW 324
22689: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22690: LD_EXP 41
22694: IFFALSE 22702
22696: PUSH
22697: LD_EXP 52
22701: AND
22702: IFFALSE 22885
22704: GO 22706
22706: DISABLE
22707: LD_INT 0
22709: PPUSH
22710: PPUSH
22711: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22712: LD_ADDR_VAR 0 2
22716: PUSH
22717: LD_INT 22
22719: PUSH
22720: LD_OWVAR 2
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: PUSH
22729: LD_INT 33
22731: PUSH
22732: LD_INT 3
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: EMPTY
22740: LIST
22741: LIST
22742: PPUSH
22743: CALL_OW 69
22747: ST_TO_ADDR
// if not tmp then
22748: LD_VAR 0 2
22752: NOT
22753: IFFALSE 22757
// exit ;
22755: GO 22885
// side := 0 ;
22757: LD_ADDR_VAR 0 3
22761: PUSH
22762: LD_INT 0
22764: ST_TO_ADDR
// for i := 1 to 8 do
22765: LD_ADDR_VAR 0 1
22769: PUSH
22770: DOUBLE
22771: LD_INT 1
22773: DEC
22774: ST_TO_ADDR
22775: LD_INT 8
22777: PUSH
22778: FOR_TO
22779: IFFALSE 22829
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22781: LD_OWVAR 2
22785: PUSH
22786: LD_VAR 0 1
22790: NONEQUAL
22791: IFFALSE 22813
22793: PUSH
22794: LD_OWVAR 2
22798: PPUSH
22799: LD_VAR 0 1
22803: PPUSH
22804: CALL_OW 81
22808: PUSH
22809: LD_INT 2
22811: EQUAL
22812: AND
22813: IFFALSE 22827
// begin side := i ;
22815: LD_ADDR_VAR 0 3
22819: PUSH
22820: LD_VAR 0 1
22824: ST_TO_ADDR
// break ;
22825: GO 22829
// end ;
22827: GO 22778
22829: POP
22830: POP
// if not side then
22831: LD_VAR 0 3
22835: NOT
22836: IFFALSE 22840
// exit ;
22838: GO 22885
// for i := 1 to tmp do
22840: LD_ADDR_VAR 0 1
22844: PUSH
22845: DOUBLE
22846: LD_INT 1
22848: DEC
22849: ST_TO_ADDR
22850: LD_VAR 0 2
22854: PUSH
22855: FOR_TO
22856: IFFALSE 22883
// if Prob ( 60 ) then
22858: LD_INT 60
22860: PPUSH
22861: CALL_OW 13
22865: IFFALSE 22881
// SetSide ( i , side ) ;
22867: LD_VAR 0 1
22871: PPUSH
22872: LD_VAR 0 3
22876: PPUSH
22877: CALL_OW 235
22881: GO 22855
22883: POP
22884: POP
// end ;
22885: PPOPN 3
22887: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22888: LD_EXP 41
22892: IFFALSE 22900
22894: PUSH
22895: LD_EXP 54
22899: AND
22900: IFFALSE 23019
22902: GO 22904
22904: DISABLE
22905: LD_INT 0
22907: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22908: LD_ADDR_VAR 0 1
22912: PUSH
22913: LD_INT 22
22915: PUSH
22916: LD_OWVAR 2
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 21
22927: PUSH
22928: LD_INT 1
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: LD_INT 3
22937: PUSH
22938: LD_INT 23
22940: PUSH
22941: LD_INT 0
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: LIST
22956: PPUSH
22957: CALL_OW 69
22961: PUSH
22962: FOR_IN
22963: IFFALSE 23017
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22965: LD_VAR 0 1
22969: PPUSH
22970: CALL_OW 257
22974: PUSH
22975: LD_INT 1
22977: PUSH
22978: LD_INT 2
22980: PUSH
22981: LD_INT 3
22983: PUSH
22984: LD_INT 4
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: IN
22993: IFFALSE 23015
// SetClass ( un , rand ( 1 , 4 ) ) ;
22995: LD_VAR 0 1
22999: PPUSH
23000: LD_INT 1
23002: PPUSH
23003: LD_INT 4
23005: PPUSH
23006: CALL_OW 12
23010: PPUSH
23011: CALL_OW 336
23015: GO 22962
23017: POP
23018: POP
// end ;
23019: PPOPN 1
23021: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
23022: LD_EXP 41
23026: IFFALSE 23034
23028: PUSH
23029: LD_EXP 53
23033: AND
23034: IFFALSE 23113
23036: GO 23038
23038: DISABLE
23039: LD_INT 0
23041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23042: LD_ADDR_VAR 0 1
23046: PUSH
23047: LD_INT 22
23049: PUSH
23050: LD_OWVAR 2
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: PUSH
23059: LD_INT 21
23061: PUSH
23062: LD_INT 3
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PPUSH
23073: CALL_OW 69
23077: ST_TO_ADDR
// if not tmp then
23078: LD_VAR 0 1
23082: NOT
23083: IFFALSE 23087
// exit ;
23085: GO 23113
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
23087: LD_VAR 0 1
23091: PUSH
23092: LD_INT 1
23094: PPUSH
23095: LD_VAR 0 1
23099: PPUSH
23100: CALL_OW 12
23104: ARRAY
23105: PPUSH
23106: LD_INT 100
23108: PPUSH
23109: CALL_OW 234
// end ;
23113: PPOPN 1
23115: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
23116: LD_EXP 41
23120: IFFALSE 23128
23122: PUSH
23123: LD_EXP 55
23127: AND
23128: IFFALSE 23226
23130: GO 23132
23132: DISABLE
23133: LD_INT 0
23135: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23136: LD_ADDR_VAR 0 1
23140: PUSH
23141: LD_INT 22
23143: PUSH
23144: LD_OWVAR 2
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 21
23155: PUSH
23156: LD_INT 1
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PPUSH
23167: CALL_OW 69
23171: ST_TO_ADDR
// if not tmp then
23172: LD_VAR 0 1
23176: NOT
23177: IFFALSE 23181
// exit ;
23179: GO 23226
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
23181: LD_VAR 0 1
23185: PUSH
23186: LD_INT 1
23188: PPUSH
23189: LD_VAR 0 1
23193: PPUSH
23194: CALL_OW 12
23198: ARRAY
23199: PPUSH
23200: LD_INT 1
23202: PPUSH
23203: LD_INT 4
23205: PPUSH
23206: CALL_OW 12
23210: PPUSH
23211: LD_INT 3000
23213: PPUSH
23214: LD_INT 9000
23216: PPUSH
23217: CALL_OW 12
23221: PPUSH
23222: CALL_OW 492
// end ;
23226: PPOPN 1
23228: END
// every 0 0$1 trigger StreamModeActive and sDepot do
23229: LD_EXP 41
23233: IFFALSE 23241
23235: PUSH
23236: LD_EXP 56
23240: AND
23241: IFFALSE 23261
23243: GO 23245
23245: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
23246: LD_INT 1
23248: PPUSH
23249: LD_OWVAR 2
23253: PPUSH
23254: LD_INT 0
23256: PPUSH
23257: CALL_OW 324
23261: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
23262: LD_EXP 41
23266: IFFALSE 23274
23268: PUSH
23269: LD_EXP 57
23273: AND
23274: IFFALSE 23357
23276: GO 23278
23278: DISABLE
23279: LD_INT 0
23281: PPUSH
23282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
23283: LD_ADDR_VAR 0 2
23287: PUSH
23288: LD_INT 22
23290: PUSH
23291: LD_OWVAR 2
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: LD_INT 21
23302: PUSH
23303: LD_INT 3
23305: PUSH
23306: EMPTY
23307: LIST
23308: LIST
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: PPUSH
23314: CALL_OW 69
23318: ST_TO_ADDR
// if not tmp then
23319: LD_VAR 0 2
23323: NOT
23324: IFFALSE 23328
// exit ;
23326: GO 23357
// for i in tmp do
23328: LD_ADDR_VAR 0 1
23332: PUSH
23333: LD_VAR 0 2
23337: PUSH
23338: FOR_IN
23339: IFFALSE 23355
// SetBLevel ( i , 10 ) ;
23341: LD_VAR 0 1
23345: PPUSH
23346: LD_INT 10
23348: PPUSH
23349: CALL_OW 241
23353: GO 23338
23355: POP
23356: POP
// end ;
23357: PPOPN 2
23359: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
23360: LD_EXP 41
23364: IFFALSE 23372
23366: PUSH
23367: LD_EXP 58
23371: AND
23372: IFFALSE 23483
23374: GO 23376
23376: DISABLE
23377: LD_INT 0
23379: PPUSH
23380: PPUSH
23381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23382: LD_ADDR_VAR 0 3
23386: PUSH
23387: LD_INT 22
23389: PUSH
23390: LD_OWVAR 2
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PUSH
23399: LD_INT 25
23401: PUSH
23402: LD_INT 1
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: PUSH
23409: EMPTY
23410: LIST
23411: LIST
23412: PPUSH
23413: CALL_OW 69
23417: ST_TO_ADDR
// if not tmp then
23418: LD_VAR 0 3
23422: NOT
23423: IFFALSE 23427
// exit ;
23425: GO 23483
// un := tmp [ rand ( 1 , tmp ) ] ;
23427: LD_ADDR_VAR 0 2
23431: PUSH
23432: LD_VAR 0 3
23436: PUSH
23437: LD_INT 1
23439: PPUSH
23440: LD_VAR 0 3
23444: PPUSH
23445: CALL_OW 12
23449: ARRAY
23450: ST_TO_ADDR
// if Crawls ( un ) then
23451: LD_VAR 0 2
23455: PPUSH
23456: CALL_OW 318
23460: IFFALSE 23471
// ComWalk ( un ) ;
23462: LD_VAR 0 2
23466: PPUSH
23467: CALL_OW 138
// SetClass ( un , class_sniper ) ;
23471: LD_VAR 0 2
23475: PPUSH
23476: LD_INT 5
23478: PPUSH
23479: CALL_OW 336
// end ;
23483: PPOPN 3
23485: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
23486: LD_EXP 41
23490: IFFALSE 23498
23492: PUSH
23493: LD_EXP 59
23497: AND
23498: IFFALSE 23510
23500: PUSH
23501: LD_OWVAR 67
23505: PUSH
23506: LD_INT 4
23508: LESS
23509: AND
23510: IFFALSE 23529
23512: GO 23514
23514: DISABLE
// begin Difficulty := Difficulty + 1 ;
23515: LD_ADDR_OWVAR 67
23519: PUSH
23520: LD_OWVAR 67
23524: PUSH
23525: LD_INT 1
23527: PLUS
23528: ST_TO_ADDR
// end ;
23529: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
23530: LD_EXP 41
23534: IFFALSE 23542
23536: PUSH
23537: LD_EXP 60
23541: AND
23542: IFFALSE 23645
23544: GO 23546
23546: DISABLE
23547: LD_INT 0
23549: PPUSH
// begin for i := 1 to 5 do
23550: LD_ADDR_VAR 0 1
23554: PUSH
23555: DOUBLE
23556: LD_INT 1
23558: DEC
23559: ST_TO_ADDR
23560: LD_INT 5
23562: PUSH
23563: FOR_TO
23564: IFFALSE 23643
// begin uc_nation := nation_nature ;
23566: LD_ADDR_OWVAR 21
23570: PUSH
23571: LD_INT 0
23573: ST_TO_ADDR
// uc_side := 0 ;
23574: LD_ADDR_OWVAR 20
23578: PUSH
23579: LD_INT 0
23581: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23582: LD_ADDR_OWVAR 29
23586: PUSH
23587: LD_INT 12
23589: PUSH
23590: LD_INT 12
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: ST_TO_ADDR
// hc_agressivity := 20 ;
23597: LD_ADDR_OWVAR 35
23601: PUSH
23602: LD_INT 20
23604: ST_TO_ADDR
// hc_class := class_tiger ;
23605: LD_ADDR_OWVAR 28
23609: PUSH
23610: LD_INT 14
23612: ST_TO_ADDR
// hc_gallery :=  ;
23613: LD_ADDR_OWVAR 33
23617: PUSH
23618: LD_STRING 
23620: ST_TO_ADDR
// hc_name :=  ;
23621: LD_ADDR_OWVAR 26
23625: PUSH
23626: LD_STRING 
23628: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23629: CALL_OW 44
23633: PPUSH
23634: LD_INT 0
23636: PPUSH
23637: CALL_OW 51
// end ;
23641: GO 23563
23643: POP
23644: POP
// end ;
23645: PPOPN 1
23647: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23648: LD_EXP 41
23652: IFFALSE 23660
23654: PUSH
23655: LD_EXP 61
23659: AND
23660: IFFALSE 23669
23662: GO 23664
23664: DISABLE
// StreamSibBomb ;
23665: CALL 23670 0 0
23669: END
// export function StreamSibBomb ; var i , x , y ; begin
23670: LD_INT 0
23672: PPUSH
23673: PPUSH
23674: PPUSH
23675: PPUSH
// result := false ;
23676: LD_ADDR_VAR 0 1
23680: PUSH
23681: LD_INT 0
23683: ST_TO_ADDR
// for i := 1 to 16 do
23684: LD_ADDR_VAR 0 2
23688: PUSH
23689: DOUBLE
23690: LD_INT 1
23692: DEC
23693: ST_TO_ADDR
23694: LD_INT 16
23696: PUSH
23697: FOR_TO
23698: IFFALSE 23897
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23700: LD_ADDR_VAR 0 3
23704: PUSH
23705: LD_INT 10
23707: PUSH
23708: LD_INT 20
23710: PUSH
23711: LD_INT 30
23713: PUSH
23714: LD_INT 40
23716: PUSH
23717: LD_INT 50
23719: PUSH
23720: LD_INT 60
23722: PUSH
23723: LD_INT 70
23725: PUSH
23726: LD_INT 80
23728: PUSH
23729: LD_INT 90
23731: PUSH
23732: LD_INT 100
23734: PUSH
23735: LD_INT 110
23737: PUSH
23738: LD_INT 120
23740: PUSH
23741: LD_INT 130
23743: PUSH
23744: LD_INT 140
23746: PUSH
23747: LD_INT 150
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: PUSH
23767: LD_INT 1
23769: PPUSH
23770: LD_INT 15
23772: PPUSH
23773: CALL_OW 12
23777: ARRAY
23778: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23779: LD_ADDR_VAR 0 4
23783: PUSH
23784: LD_INT 10
23786: PUSH
23787: LD_INT 20
23789: PUSH
23790: LD_INT 30
23792: PUSH
23793: LD_INT 40
23795: PUSH
23796: LD_INT 50
23798: PUSH
23799: LD_INT 60
23801: PUSH
23802: LD_INT 70
23804: PUSH
23805: LD_INT 80
23807: PUSH
23808: LD_INT 90
23810: PUSH
23811: LD_INT 100
23813: PUSH
23814: LD_INT 110
23816: PUSH
23817: LD_INT 120
23819: PUSH
23820: LD_INT 130
23822: PUSH
23823: LD_INT 140
23825: PUSH
23826: LD_INT 150
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: PUSH
23846: LD_INT 1
23848: PPUSH
23849: LD_INT 15
23851: PPUSH
23852: CALL_OW 12
23856: ARRAY
23857: ST_TO_ADDR
// if ValidHex ( x , y ) then
23858: LD_VAR 0 3
23862: PPUSH
23863: LD_VAR 0 4
23867: PPUSH
23868: CALL_OW 488
23872: IFFALSE 23895
// begin result := [ x , y ] ;
23874: LD_ADDR_VAR 0 1
23878: PUSH
23879: LD_VAR 0 3
23883: PUSH
23884: LD_VAR 0 4
23888: PUSH
23889: EMPTY
23890: LIST
23891: LIST
23892: ST_TO_ADDR
// break ;
23893: GO 23897
// end ; end ;
23895: GO 23697
23897: POP
23898: POP
// if result then
23899: LD_VAR 0 1
23903: IFFALSE 23963
// begin ToLua ( playSibBomb() ) ;
23905: LD_STRING playSibBomb()
23907: PPUSH
23908: CALL_OW 559
// wait ( 0 0$14 ) ;
23912: LD_INT 490
23914: PPUSH
23915: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23919: LD_VAR 0 1
23923: PUSH
23924: LD_INT 1
23926: ARRAY
23927: PPUSH
23928: LD_VAR 0 1
23932: PUSH
23933: LD_INT 2
23935: ARRAY
23936: PPUSH
23937: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23941: LD_VAR 0 1
23945: PUSH
23946: LD_INT 1
23948: ARRAY
23949: PPUSH
23950: LD_VAR 0 1
23954: PUSH
23955: LD_INT 2
23957: ARRAY
23958: PPUSH
23959: CALL_OW 429
// end ; end ;
23963: LD_VAR 0 1
23967: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23968: LD_EXP 41
23972: IFFALSE 23980
23974: PUSH
23975: LD_EXP 63
23979: AND
23980: IFFALSE 23992
23982: GO 23984
23984: DISABLE
// YouLost (  ) ;
23985: LD_STRING 
23987: PPUSH
23988: CALL_OW 104
23992: END
// every 0 0$1 trigger StreamModeActive and sFog do
23993: LD_EXP 41
23997: IFFALSE 24005
23999: PUSH
24000: LD_EXP 62
24004: AND
24005: IFFALSE 24019
24007: GO 24009
24009: DISABLE
// FogOff ( your_side ) ;
24010: LD_OWVAR 2
24014: PPUSH
24015: CALL_OW 344
24019: END
// every 0 0$1 trigger StreamModeActive and sSun do
24020: LD_EXP 41
24024: IFFALSE 24032
24026: PUSH
24027: LD_EXP 64
24031: AND
24032: IFFALSE 24060
24034: GO 24036
24036: DISABLE
// begin solar_recharge_percent := 0 ;
24037: LD_ADDR_OWVAR 79
24041: PUSH
24042: LD_INT 0
24044: ST_TO_ADDR
// wait ( 5 5$00 ) ;
24045: LD_INT 10500
24047: PPUSH
24048: CALL_OW 67
// solar_recharge_percent := 100 ;
24052: LD_ADDR_OWVAR 79
24056: PUSH
24057: LD_INT 100
24059: ST_TO_ADDR
// end ;
24060: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
24061: LD_EXP 41
24065: IFFALSE 24073
24067: PUSH
24068: LD_EXP 65
24072: AND
24073: IFFALSE 24312
24075: GO 24077
24077: DISABLE
24078: LD_INT 0
24080: PPUSH
24081: PPUSH
24082: PPUSH
// begin tmp := [ ] ;
24083: LD_ADDR_VAR 0 3
24087: PUSH
24088: EMPTY
24089: ST_TO_ADDR
// for i := 1 to 6 do
24090: LD_ADDR_VAR 0 1
24094: PUSH
24095: DOUBLE
24096: LD_INT 1
24098: DEC
24099: ST_TO_ADDR
24100: LD_INT 6
24102: PUSH
24103: FOR_TO
24104: IFFALSE 24209
// begin uc_nation := nation_nature ;
24106: LD_ADDR_OWVAR 21
24110: PUSH
24111: LD_INT 0
24113: ST_TO_ADDR
// uc_side := 0 ;
24114: LD_ADDR_OWVAR 20
24118: PUSH
24119: LD_INT 0
24121: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
24122: LD_ADDR_OWVAR 29
24126: PUSH
24127: LD_INT 12
24129: PUSH
24130: LD_INT 12
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: ST_TO_ADDR
// hc_agressivity := 20 ;
24137: LD_ADDR_OWVAR 35
24141: PUSH
24142: LD_INT 20
24144: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
24145: LD_ADDR_OWVAR 28
24149: PUSH
24150: LD_INT 17
24152: ST_TO_ADDR
// hc_gallery :=  ;
24153: LD_ADDR_OWVAR 33
24157: PUSH
24158: LD_STRING 
24160: ST_TO_ADDR
// hc_name :=  ;
24161: LD_ADDR_OWVAR 26
24165: PUSH
24166: LD_STRING 
24168: ST_TO_ADDR
// un := CreateHuman ;
24169: LD_ADDR_VAR 0 2
24173: PUSH
24174: CALL_OW 44
24178: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
24179: LD_VAR 0 2
24183: PPUSH
24184: LD_INT 1
24186: PPUSH
24187: CALL_OW 51
// tmp := tmp ^ un ;
24191: LD_ADDR_VAR 0 3
24195: PUSH
24196: LD_VAR 0 3
24200: PUSH
24201: LD_VAR 0 2
24205: ADD
24206: ST_TO_ADDR
// end ;
24207: GO 24103
24209: POP
24210: POP
// repeat wait ( 0 0$1 ) ;
24211: LD_INT 35
24213: PPUSH
24214: CALL_OW 67
// for un in tmp do
24218: LD_ADDR_VAR 0 2
24222: PUSH
24223: LD_VAR 0 3
24227: PUSH
24228: FOR_IN
24229: IFFALSE 24303
// begin if IsDead ( un ) then
24231: LD_VAR 0 2
24235: PPUSH
24236: CALL_OW 301
24240: IFFALSE 24260
// begin tmp := tmp diff un ;
24242: LD_ADDR_VAR 0 3
24246: PUSH
24247: LD_VAR 0 3
24251: PUSH
24252: LD_VAR 0 2
24256: DIFF
24257: ST_TO_ADDR
// continue ;
24258: GO 24228
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
24260: LD_VAR 0 2
24264: PPUSH
24265: LD_INT 3
24267: PUSH
24268: LD_INT 22
24270: PUSH
24271: LD_INT 0
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: EMPTY
24279: LIST
24280: LIST
24281: PPUSH
24282: CALL_OW 69
24286: PPUSH
24287: LD_VAR 0 2
24291: PPUSH
24292: CALL_OW 74
24296: PPUSH
24297: CALL_OW 115
// end ;
24301: GO 24228
24303: POP
24304: POP
// until not tmp ;
24305: LD_VAR 0 3
24309: NOT
24310: IFFALSE 24211
// end ;
24312: PPOPN 3
24314: END
// every 0 0$1 trigger StreamModeActive and sTroll do
24315: LD_EXP 41
24319: IFFALSE 24327
24321: PUSH
24322: LD_EXP 66
24326: AND
24327: IFFALSE 24381
24329: GO 24331
24331: DISABLE
// begin ToLua ( displayTroll(); ) ;
24332: LD_STRING displayTroll();
24334: PPUSH
24335: CALL_OW 559
// wait ( 3 3$00 ) ;
24339: LD_INT 6300
24341: PPUSH
24342: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24346: LD_STRING hideTroll();
24348: PPUSH
24349: CALL_OW 559
// wait ( 1 1$00 ) ;
24353: LD_INT 2100
24355: PPUSH
24356: CALL_OW 67
// ToLua ( displayTroll(); ) ;
24360: LD_STRING displayTroll();
24362: PPUSH
24363: CALL_OW 559
// wait ( 1 1$00 ) ;
24367: LD_INT 2100
24369: PPUSH
24370: CALL_OW 67
// ToLua ( hideTroll(); ) ;
24374: LD_STRING hideTroll();
24376: PPUSH
24377: CALL_OW 559
// end ;
24381: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
24382: LD_EXP 41
24386: IFFALSE 24394
24388: PUSH
24389: LD_EXP 67
24393: AND
24394: IFFALSE 24457
24396: GO 24398
24398: DISABLE
24399: LD_INT 0
24401: PPUSH
// begin p := 0 ;
24402: LD_ADDR_VAR 0 1
24406: PUSH
24407: LD_INT 0
24409: ST_TO_ADDR
// repeat game_speed := 1 ;
24410: LD_ADDR_OWVAR 65
24414: PUSH
24415: LD_INT 1
24417: ST_TO_ADDR
// wait ( 0 0$1 ) ;
24418: LD_INT 35
24420: PPUSH
24421: CALL_OW 67
// p := p + 1 ;
24425: LD_ADDR_VAR 0 1
24429: PUSH
24430: LD_VAR 0 1
24434: PUSH
24435: LD_INT 1
24437: PLUS
24438: ST_TO_ADDR
// until p >= 60 ;
24439: LD_VAR 0 1
24443: PUSH
24444: LD_INT 60
24446: GREATEREQUAL
24447: IFFALSE 24410
// game_speed := 4 ;
24449: LD_ADDR_OWVAR 65
24453: PUSH
24454: LD_INT 4
24456: ST_TO_ADDR
// end ;
24457: PPOPN 1
24459: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
24460: LD_EXP 41
24464: IFFALSE 24472
24466: PUSH
24467: LD_EXP 68
24471: AND
24472: IFFALSE 24618
24474: GO 24476
24476: DISABLE
24477: LD_INT 0
24479: PPUSH
24480: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24481: LD_ADDR_VAR 0 1
24485: PUSH
24486: LD_INT 22
24488: PUSH
24489: LD_OWVAR 2
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: LD_INT 2
24500: PUSH
24501: LD_INT 30
24503: PUSH
24504: LD_INT 0
24506: PUSH
24507: EMPTY
24508: LIST
24509: LIST
24510: PUSH
24511: LD_INT 30
24513: PUSH
24514: LD_INT 1
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: LIST
24525: PUSH
24526: EMPTY
24527: LIST
24528: LIST
24529: PPUSH
24530: CALL_OW 69
24534: ST_TO_ADDR
// if not depot then
24535: LD_VAR 0 1
24539: NOT
24540: IFFALSE 24544
// exit ;
24542: GO 24618
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
24544: LD_ADDR_VAR 0 2
24548: PUSH
24549: LD_VAR 0 1
24553: PUSH
24554: LD_INT 1
24556: PPUSH
24557: LD_VAR 0 1
24561: PPUSH
24562: CALL_OW 12
24566: ARRAY
24567: PPUSH
24568: CALL_OW 274
24572: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24573: LD_VAR 0 2
24577: PPUSH
24578: LD_INT 1
24580: PPUSH
24581: LD_INT 0
24583: PPUSH
24584: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24588: LD_VAR 0 2
24592: PPUSH
24593: LD_INT 2
24595: PPUSH
24596: LD_INT 0
24598: PPUSH
24599: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24603: LD_VAR 0 2
24607: PPUSH
24608: LD_INT 3
24610: PPUSH
24611: LD_INT 0
24613: PPUSH
24614: CALL_OW 277
// end ;
24618: PPOPN 2
24620: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24621: LD_EXP 41
24625: IFFALSE 24633
24627: PUSH
24628: LD_EXP 69
24632: AND
24633: IFFALSE 24730
24635: GO 24637
24637: DISABLE
24638: LD_INT 0
24640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24641: LD_ADDR_VAR 0 1
24645: PUSH
24646: LD_INT 22
24648: PUSH
24649: LD_OWVAR 2
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: LD_INT 21
24660: PUSH
24661: LD_INT 1
24663: PUSH
24664: EMPTY
24665: LIST
24666: LIST
24667: PUSH
24668: LD_INT 3
24670: PUSH
24671: LD_INT 23
24673: PUSH
24674: LD_INT 0
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: LIST
24689: PPUSH
24690: CALL_OW 69
24694: ST_TO_ADDR
// if not tmp then
24695: LD_VAR 0 1
24699: NOT
24700: IFFALSE 24704
// exit ;
24702: GO 24730
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24704: LD_VAR 0 1
24708: PUSH
24709: LD_INT 1
24711: PPUSH
24712: LD_VAR 0 1
24716: PPUSH
24717: CALL_OW 12
24721: ARRAY
24722: PPUSH
24723: LD_INT 200
24725: PPUSH
24726: CALL_OW 234
// end ;
24730: PPOPN 1
24732: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24733: LD_EXP 41
24737: IFFALSE 24745
24739: PUSH
24740: LD_EXP 70
24744: AND
24745: IFFALSE 24824
24747: GO 24749
24749: DISABLE
24750: LD_INT 0
24752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24753: LD_ADDR_VAR 0 1
24757: PUSH
24758: LD_INT 22
24760: PUSH
24761: LD_OWVAR 2
24765: PUSH
24766: EMPTY
24767: LIST
24768: LIST
24769: PUSH
24770: LD_INT 21
24772: PUSH
24773: LD_INT 2
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PPUSH
24784: CALL_OW 69
24788: ST_TO_ADDR
// if not tmp then
24789: LD_VAR 0 1
24793: NOT
24794: IFFALSE 24798
// exit ;
24796: GO 24824
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24798: LD_VAR 0 1
24802: PUSH
24803: LD_INT 1
24805: PPUSH
24806: LD_VAR 0 1
24810: PPUSH
24811: CALL_OW 12
24815: ARRAY
24816: PPUSH
24817: LD_INT 60
24819: PPUSH
24820: CALL_OW 234
// end ;
24824: PPOPN 1
24826: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24827: LD_EXP 41
24831: IFFALSE 24839
24833: PUSH
24834: LD_EXP 71
24838: AND
24839: IFFALSE 24938
24841: GO 24843
24843: DISABLE
24844: LD_INT 0
24846: PPUSH
24847: PPUSH
// begin enable ;
24848: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24849: LD_ADDR_VAR 0 1
24853: PUSH
24854: LD_INT 22
24856: PUSH
24857: LD_OWVAR 2
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PUSH
24866: LD_INT 61
24868: PUSH
24869: EMPTY
24870: LIST
24871: PUSH
24872: LD_INT 33
24874: PUSH
24875: LD_INT 2
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: LIST
24886: PPUSH
24887: CALL_OW 69
24891: ST_TO_ADDR
// if not tmp then
24892: LD_VAR 0 1
24896: NOT
24897: IFFALSE 24901
// exit ;
24899: GO 24938
// for i in tmp do
24901: LD_ADDR_VAR 0 2
24905: PUSH
24906: LD_VAR 0 1
24910: PUSH
24911: FOR_IN
24912: IFFALSE 24936
// if IsControledBy ( i ) then
24914: LD_VAR 0 2
24918: PPUSH
24919: CALL_OW 312
24923: IFFALSE 24934
// ComUnlink ( i ) ;
24925: LD_VAR 0 2
24929: PPUSH
24930: CALL_OW 136
24934: GO 24911
24936: POP
24937: POP
// end ;
24938: PPOPN 2
24940: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24941: LD_EXP 41
24945: IFFALSE 24953
24947: PUSH
24948: LD_EXP 72
24952: AND
24953: IFFALSE 25093
24955: GO 24957
24957: DISABLE
24958: LD_INT 0
24960: PPUSH
24961: PPUSH
// begin ToLua ( displayPowell(); ) ;
24962: LD_STRING displayPowell();
24964: PPUSH
24965: CALL_OW 559
// uc_side := 0 ;
24969: LD_ADDR_OWVAR 20
24973: PUSH
24974: LD_INT 0
24976: ST_TO_ADDR
// uc_nation := 2 ;
24977: LD_ADDR_OWVAR 21
24981: PUSH
24982: LD_INT 2
24984: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24985: LD_ADDR_OWVAR 37
24989: PUSH
24990: LD_INT 14
24992: ST_TO_ADDR
// vc_engine := engine_siberite ;
24993: LD_ADDR_OWVAR 39
24997: PUSH
24998: LD_INT 3
25000: ST_TO_ADDR
// vc_control := control_apeman ;
25001: LD_ADDR_OWVAR 38
25005: PUSH
25006: LD_INT 5
25008: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
25009: LD_ADDR_OWVAR 40
25013: PUSH
25014: LD_INT 29
25016: ST_TO_ADDR
// un := CreateVehicle ;
25017: LD_ADDR_VAR 0 2
25021: PUSH
25022: CALL_OW 45
25026: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25027: LD_VAR 0 2
25031: PPUSH
25032: LD_INT 1
25034: PPUSH
25035: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25039: LD_INT 35
25041: PPUSH
25042: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25046: LD_VAR 0 2
25050: PPUSH
25051: LD_INT 22
25053: PUSH
25054: LD_OWVAR 2
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PPUSH
25063: CALL_OW 69
25067: PPUSH
25068: LD_VAR 0 2
25072: PPUSH
25073: CALL_OW 74
25077: PPUSH
25078: CALL_OW 115
// until IsDead ( un ) ;
25082: LD_VAR 0 2
25086: PPUSH
25087: CALL_OW 301
25091: IFFALSE 25039
// end ;
25093: PPOPN 2
25095: END
// every 0 0$1 trigger StreamModeActive and sStu do
25096: LD_EXP 41
25100: IFFALSE 25108
25102: PUSH
25103: LD_EXP 80
25107: AND
25108: IFFALSE 25124
25110: GO 25112
25112: DISABLE
// begin ToLua ( displayStucuk(); ) ;
25113: LD_STRING displayStucuk();
25115: PPUSH
25116: CALL_OW 559
// ResetFog ;
25120: CALL_OW 335
// end ;
25124: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
25125: LD_EXP 41
25129: IFFALSE 25137
25131: PUSH
25132: LD_EXP 73
25136: AND
25137: IFFALSE 25278
25139: GO 25141
25141: DISABLE
25142: LD_INT 0
25144: PPUSH
25145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25146: LD_ADDR_VAR 0 2
25150: PUSH
25151: LD_INT 22
25153: PUSH
25154: LD_OWVAR 2
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 21
25165: PUSH
25166: LD_INT 1
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PPUSH
25177: CALL_OW 69
25181: ST_TO_ADDR
// if not tmp then
25182: LD_VAR 0 2
25186: NOT
25187: IFFALSE 25191
// exit ;
25189: GO 25278
// un := tmp [ rand ( 1 , tmp ) ] ;
25191: LD_ADDR_VAR 0 1
25195: PUSH
25196: LD_VAR 0 2
25200: PUSH
25201: LD_INT 1
25203: PPUSH
25204: LD_VAR 0 2
25208: PPUSH
25209: CALL_OW 12
25213: ARRAY
25214: ST_TO_ADDR
// SetSide ( un , 0 ) ;
25215: LD_VAR 0 1
25219: PPUSH
25220: LD_INT 0
25222: PPUSH
25223: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
25227: LD_VAR 0 1
25231: PPUSH
25232: LD_OWVAR 3
25236: PUSH
25237: LD_VAR 0 1
25241: DIFF
25242: PPUSH
25243: LD_VAR 0 1
25247: PPUSH
25248: CALL_OW 74
25252: PPUSH
25253: CALL_OW 115
// wait ( 0 0$20 ) ;
25257: LD_INT 700
25259: PPUSH
25260: CALL_OW 67
// SetSide ( un , your_side ) ;
25264: LD_VAR 0 1
25268: PPUSH
25269: LD_OWVAR 2
25273: PPUSH
25274: CALL_OW 235
// end ;
25278: PPOPN 2
25280: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
25281: LD_EXP 41
25285: IFFALSE 25293
25287: PUSH
25288: LD_EXP 74
25292: AND
25293: IFFALSE 25399
25295: GO 25297
25297: DISABLE
25298: LD_INT 0
25300: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25301: LD_ADDR_VAR 0 1
25305: PUSH
25306: LD_INT 22
25308: PUSH
25309: LD_OWVAR 2
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 2
25320: PUSH
25321: LD_INT 30
25323: PUSH
25324: LD_INT 0
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 30
25333: PUSH
25334: LD_INT 1
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: LIST
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: PPUSH
25350: CALL_OW 69
25354: ST_TO_ADDR
// if not depot then
25355: LD_VAR 0 1
25359: NOT
25360: IFFALSE 25364
// exit ;
25362: GO 25399
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
25364: LD_VAR 0 1
25368: PUSH
25369: LD_INT 1
25371: ARRAY
25372: PPUSH
25373: CALL_OW 250
25377: PPUSH
25378: LD_VAR 0 1
25382: PUSH
25383: LD_INT 1
25385: ARRAY
25386: PPUSH
25387: CALL_OW 251
25391: PPUSH
25392: LD_INT 70
25394: PPUSH
25395: CALL_OW 495
// end ;
25399: PPOPN 1
25401: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
25402: LD_EXP 41
25406: IFFALSE 25414
25408: PUSH
25409: LD_EXP 75
25413: AND
25414: IFFALSE 25625
25416: GO 25418
25418: DISABLE
25419: LD_INT 0
25421: PPUSH
25422: PPUSH
25423: PPUSH
25424: PPUSH
25425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25426: LD_ADDR_VAR 0 5
25430: PUSH
25431: LD_INT 22
25433: PUSH
25434: LD_OWVAR 2
25438: PUSH
25439: EMPTY
25440: LIST
25441: LIST
25442: PUSH
25443: LD_INT 21
25445: PUSH
25446: LD_INT 1
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PPUSH
25457: CALL_OW 69
25461: ST_TO_ADDR
// if not tmp then
25462: LD_VAR 0 5
25466: NOT
25467: IFFALSE 25471
// exit ;
25469: GO 25625
// for i in tmp do
25471: LD_ADDR_VAR 0 1
25475: PUSH
25476: LD_VAR 0 5
25480: PUSH
25481: FOR_IN
25482: IFFALSE 25623
// begin d := rand ( 0 , 5 ) ;
25484: LD_ADDR_VAR 0 4
25488: PUSH
25489: LD_INT 0
25491: PPUSH
25492: LD_INT 5
25494: PPUSH
25495: CALL_OW 12
25499: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
25500: LD_ADDR_VAR 0 2
25504: PUSH
25505: LD_VAR 0 1
25509: PPUSH
25510: CALL_OW 250
25514: PPUSH
25515: LD_VAR 0 4
25519: PPUSH
25520: LD_INT 3
25522: PPUSH
25523: LD_INT 12
25525: PPUSH
25526: CALL_OW 12
25530: PPUSH
25531: CALL_OW 272
25535: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
25536: LD_ADDR_VAR 0 3
25540: PUSH
25541: LD_VAR 0 1
25545: PPUSH
25546: CALL_OW 251
25550: PPUSH
25551: LD_VAR 0 4
25555: PPUSH
25556: LD_INT 3
25558: PPUSH
25559: LD_INT 12
25561: PPUSH
25562: CALL_OW 12
25566: PPUSH
25567: CALL_OW 273
25571: ST_TO_ADDR
// if ValidHex ( x , y ) then
25572: LD_VAR 0 2
25576: PPUSH
25577: LD_VAR 0 3
25581: PPUSH
25582: CALL_OW 488
25586: IFFALSE 25621
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25588: LD_VAR 0 1
25592: PPUSH
25593: LD_VAR 0 2
25597: PPUSH
25598: LD_VAR 0 3
25602: PPUSH
25603: LD_INT 3
25605: PPUSH
25606: LD_INT 6
25608: PPUSH
25609: CALL_OW 12
25613: PPUSH
25614: LD_INT 1
25616: PPUSH
25617: CALL_OW 483
// end ;
25621: GO 25481
25623: POP
25624: POP
// end ;
25625: PPOPN 5
25627: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25628: LD_EXP 41
25632: IFFALSE 25640
25634: PUSH
25635: LD_EXP 76
25639: AND
25640: IFFALSE 25734
25642: GO 25644
25644: DISABLE
25645: LD_INT 0
25647: PPUSH
25648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25649: LD_ADDR_VAR 0 2
25653: PUSH
25654: LD_INT 22
25656: PUSH
25657: LD_OWVAR 2
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 32
25668: PUSH
25669: LD_INT 1
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: PUSH
25676: LD_INT 21
25678: PUSH
25679: LD_INT 2
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: PUSH
25686: EMPTY
25687: LIST
25688: LIST
25689: LIST
25690: PPUSH
25691: CALL_OW 69
25695: ST_TO_ADDR
// if not tmp then
25696: LD_VAR 0 2
25700: NOT
25701: IFFALSE 25705
// exit ;
25703: GO 25734
// for i in tmp do
25705: LD_ADDR_VAR 0 1
25709: PUSH
25710: LD_VAR 0 2
25714: PUSH
25715: FOR_IN
25716: IFFALSE 25732
// SetFuel ( i , 0 ) ;
25718: LD_VAR 0 1
25722: PPUSH
25723: LD_INT 0
25725: PPUSH
25726: CALL_OW 240
25730: GO 25715
25732: POP
25733: POP
// end ;
25734: PPOPN 2
25736: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25737: LD_EXP 41
25741: IFFALSE 25749
25743: PUSH
25744: LD_EXP 77
25748: AND
25749: IFFALSE 25815
25751: GO 25753
25753: DISABLE
25754: LD_INT 0
25756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25757: LD_ADDR_VAR 0 1
25761: PUSH
25762: LD_INT 22
25764: PUSH
25765: LD_OWVAR 2
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 30
25776: PUSH
25777: LD_INT 29
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: EMPTY
25785: LIST
25786: LIST
25787: PPUSH
25788: CALL_OW 69
25792: ST_TO_ADDR
// if not tmp then
25793: LD_VAR 0 1
25797: NOT
25798: IFFALSE 25802
// exit ;
25800: GO 25815
// DestroyUnit ( tmp [ 1 ] ) ;
25802: LD_VAR 0 1
25806: PUSH
25807: LD_INT 1
25809: ARRAY
25810: PPUSH
25811: CALL_OW 65
// end ;
25815: PPOPN 1
25817: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25818: LD_EXP 41
25822: IFFALSE 25830
25824: PUSH
25825: LD_EXP 79
25829: AND
25830: IFFALSE 25959
25832: GO 25834
25834: DISABLE
25835: LD_INT 0
25837: PPUSH
// begin uc_side := 0 ;
25838: LD_ADDR_OWVAR 20
25842: PUSH
25843: LD_INT 0
25845: ST_TO_ADDR
// uc_nation := nation_arabian ;
25846: LD_ADDR_OWVAR 21
25850: PUSH
25851: LD_INT 2
25853: ST_TO_ADDR
// hc_gallery :=  ;
25854: LD_ADDR_OWVAR 33
25858: PUSH
25859: LD_STRING 
25861: ST_TO_ADDR
// hc_name :=  ;
25862: LD_ADDR_OWVAR 26
25866: PUSH
25867: LD_STRING 
25869: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25870: LD_INT 1
25872: PPUSH
25873: LD_INT 11
25875: PPUSH
25876: LD_INT 10
25878: PPUSH
25879: CALL_OW 380
// un := CreateHuman ;
25883: LD_ADDR_VAR 0 1
25887: PUSH
25888: CALL_OW 44
25892: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25893: LD_VAR 0 1
25897: PPUSH
25898: LD_INT 1
25900: PPUSH
25901: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25905: LD_INT 35
25907: PPUSH
25908: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25912: LD_VAR 0 1
25916: PPUSH
25917: LD_INT 22
25919: PUSH
25920: LD_OWVAR 2
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PPUSH
25929: CALL_OW 69
25933: PPUSH
25934: LD_VAR 0 1
25938: PPUSH
25939: CALL_OW 74
25943: PPUSH
25944: CALL_OW 115
// until IsDead ( un ) ;
25948: LD_VAR 0 1
25952: PPUSH
25953: CALL_OW 301
25957: IFFALSE 25905
// end ;
25959: PPOPN 1
25961: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25962: LD_EXP 41
25966: IFFALSE 25974
25968: PUSH
25969: LD_EXP 81
25973: AND
25974: IFFALSE 25986
25976: GO 25978
25978: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25979: LD_STRING earthquake(getX(game), 0, 32)
25981: PPUSH
25982: CALL_OW 559
25986: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25987: LD_EXP 41
25991: IFFALSE 25999
25993: PUSH
25994: LD_EXP 82
25998: AND
25999: IFFALSE 26090
26001: GO 26003
26003: DISABLE
26004: LD_INT 0
26006: PPUSH
// begin enable ;
26007: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
26008: LD_ADDR_VAR 0 1
26012: PUSH
26013: LD_INT 22
26015: PUSH
26016: LD_OWVAR 2
26020: PUSH
26021: EMPTY
26022: LIST
26023: LIST
26024: PUSH
26025: LD_INT 21
26027: PUSH
26028: LD_INT 2
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 33
26037: PUSH
26038: LD_INT 3
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: LIST
26049: PPUSH
26050: CALL_OW 69
26054: ST_TO_ADDR
// if not tmp then
26055: LD_VAR 0 1
26059: NOT
26060: IFFALSE 26064
// exit ;
26062: GO 26090
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26064: LD_VAR 0 1
26068: PUSH
26069: LD_INT 1
26071: PPUSH
26072: LD_VAR 0 1
26076: PPUSH
26077: CALL_OW 12
26081: ARRAY
26082: PPUSH
26083: LD_INT 1
26085: PPUSH
26086: CALL_OW 234
// end ;
26090: PPOPN 1
26092: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
26093: LD_EXP 41
26097: IFFALSE 26105
26099: PUSH
26100: LD_EXP 83
26104: AND
26105: IFFALSE 26246
26107: GO 26109
26109: DISABLE
26110: LD_INT 0
26112: PPUSH
26113: PPUSH
26114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26115: LD_ADDR_VAR 0 3
26119: PUSH
26120: LD_INT 22
26122: PUSH
26123: LD_OWVAR 2
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 25
26134: PUSH
26135: LD_INT 1
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PPUSH
26146: CALL_OW 69
26150: ST_TO_ADDR
// if not tmp then
26151: LD_VAR 0 3
26155: NOT
26156: IFFALSE 26160
// exit ;
26158: GO 26246
// un := tmp [ rand ( 1 , tmp ) ] ;
26160: LD_ADDR_VAR 0 2
26164: PUSH
26165: LD_VAR 0 3
26169: PUSH
26170: LD_INT 1
26172: PPUSH
26173: LD_VAR 0 3
26177: PPUSH
26178: CALL_OW 12
26182: ARRAY
26183: ST_TO_ADDR
// if Crawls ( un ) then
26184: LD_VAR 0 2
26188: PPUSH
26189: CALL_OW 318
26193: IFFALSE 26204
// ComWalk ( un ) ;
26195: LD_VAR 0 2
26199: PPUSH
26200: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
26204: LD_VAR 0 2
26208: PPUSH
26209: LD_INT 9
26211: PPUSH
26212: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
26216: LD_INT 28
26218: PPUSH
26219: LD_OWVAR 2
26223: PPUSH
26224: LD_INT 2
26226: PPUSH
26227: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
26231: LD_INT 29
26233: PPUSH
26234: LD_OWVAR 2
26238: PPUSH
26239: LD_INT 2
26241: PPUSH
26242: CALL_OW 322
// end ;
26246: PPOPN 3
26248: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
26249: LD_EXP 41
26253: IFFALSE 26261
26255: PUSH
26256: LD_EXP 84
26260: AND
26261: IFFALSE 26372
26263: GO 26265
26265: DISABLE
26266: LD_INT 0
26268: PPUSH
26269: PPUSH
26270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26271: LD_ADDR_VAR 0 3
26275: PUSH
26276: LD_INT 22
26278: PUSH
26279: LD_OWVAR 2
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 25
26290: PUSH
26291: LD_INT 1
26293: PUSH
26294: EMPTY
26295: LIST
26296: LIST
26297: PUSH
26298: EMPTY
26299: LIST
26300: LIST
26301: PPUSH
26302: CALL_OW 69
26306: ST_TO_ADDR
// if not tmp then
26307: LD_VAR 0 3
26311: NOT
26312: IFFALSE 26316
// exit ;
26314: GO 26372
// un := tmp [ rand ( 1 , tmp ) ] ;
26316: LD_ADDR_VAR 0 2
26320: PUSH
26321: LD_VAR 0 3
26325: PUSH
26326: LD_INT 1
26328: PPUSH
26329: LD_VAR 0 3
26333: PPUSH
26334: CALL_OW 12
26338: ARRAY
26339: ST_TO_ADDR
// if Crawls ( un ) then
26340: LD_VAR 0 2
26344: PPUSH
26345: CALL_OW 318
26349: IFFALSE 26360
// ComWalk ( un ) ;
26351: LD_VAR 0 2
26355: PPUSH
26356: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26360: LD_VAR 0 2
26364: PPUSH
26365: LD_INT 8
26367: PPUSH
26368: CALL_OW 336
// end ;
26372: PPOPN 3
26374: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
26375: LD_EXP 41
26379: IFFALSE 26387
26381: PUSH
26382: LD_EXP 85
26386: AND
26387: IFFALSE 26531
26389: GO 26391
26391: DISABLE
26392: LD_INT 0
26394: PPUSH
26395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
26396: LD_ADDR_VAR 0 2
26400: PUSH
26401: LD_INT 22
26403: PUSH
26404: LD_OWVAR 2
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 21
26415: PUSH
26416: LD_INT 2
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 2
26425: PUSH
26426: LD_INT 34
26428: PUSH
26429: LD_INT 12
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PUSH
26436: LD_INT 34
26438: PUSH
26439: LD_INT 51
26441: PUSH
26442: EMPTY
26443: LIST
26444: LIST
26445: PUSH
26446: LD_INT 34
26448: PUSH
26449: LD_INT 32
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: LIST
26460: LIST
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: LIST
26466: PPUSH
26467: CALL_OW 69
26471: ST_TO_ADDR
// if not tmp then
26472: LD_VAR 0 2
26476: NOT
26477: IFFALSE 26481
// exit ;
26479: GO 26531
// for i in tmp do
26481: LD_ADDR_VAR 0 1
26485: PUSH
26486: LD_VAR 0 2
26490: PUSH
26491: FOR_IN
26492: IFFALSE 26529
// if GetCargo ( i , mat_artifact ) = 0 then
26494: LD_VAR 0 1
26498: PPUSH
26499: LD_INT 4
26501: PPUSH
26502: CALL_OW 289
26506: PUSH
26507: LD_INT 0
26509: EQUAL
26510: IFFALSE 26527
// SetCargo ( i , mat_siberit , 100 ) ;
26512: LD_VAR 0 1
26516: PPUSH
26517: LD_INT 3
26519: PPUSH
26520: LD_INT 100
26522: PPUSH
26523: CALL_OW 290
26527: GO 26491
26529: POP
26530: POP
// end ;
26531: PPOPN 2
26533: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
26534: LD_EXP 41
26538: IFFALSE 26546
26540: PUSH
26541: LD_EXP 86
26545: AND
26546: IFFALSE 26729
26548: GO 26550
26550: DISABLE
26551: LD_INT 0
26553: PPUSH
26554: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26555: LD_ADDR_VAR 0 2
26559: PUSH
26560: LD_INT 22
26562: PUSH
26563: LD_OWVAR 2
26567: PUSH
26568: EMPTY
26569: LIST
26570: LIST
26571: PPUSH
26572: CALL_OW 69
26576: ST_TO_ADDR
// if not tmp then
26577: LD_VAR 0 2
26581: NOT
26582: IFFALSE 26586
// exit ;
26584: GO 26729
// for i := 1 to 2 do
26586: LD_ADDR_VAR 0 1
26590: PUSH
26591: DOUBLE
26592: LD_INT 1
26594: DEC
26595: ST_TO_ADDR
26596: LD_INT 2
26598: PUSH
26599: FOR_TO
26600: IFFALSE 26727
// begin uc_side := your_side ;
26602: LD_ADDR_OWVAR 20
26606: PUSH
26607: LD_OWVAR 2
26611: ST_TO_ADDR
// uc_nation := nation_american ;
26612: LD_ADDR_OWVAR 21
26616: PUSH
26617: LD_INT 1
26619: ST_TO_ADDR
// vc_chassis := us_morphling ;
26620: LD_ADDR_OWVAR 37
26624: PUSH
26625: LD_INT 5
26627: ST_TO_ADDR
// vc_engine := engine_siberite ;
26628: LD_ADDR_OWVAR 39
26632: PUSH
26633: LD_INT 3
26635: ST_TO_ADDR
// vc_control := control_computer ;
26636: LD_ADDR_OWVAR 38
26640: PUSH
26641: LD_INT 3
26643: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26644: LD_ADDR_OWVAR 40
26648: PUSH
26649: LD_INT 10
26651: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26652: LD_VAR 0 2
26656: PUSH
26657: LD_INT 1
26659: ARRAY
26660: PPUSH
26661: CALL_OW 310
26665: NOT
26666: IFFALSE 26713
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26668: CALL_OW 45
26672: PPUSH
26673: LD_VAR 0 2
26677: PUSH
26678: LD_INT 1
26680: ARRAY
26681: PPUSH
26682: CALL_OW 250
26686: PPUSH
26687: LD_VAR 0 2
26691: PUSH
26692: LD_INT 1
26694: ARRAY
26695: PPUSH
26696: CALL_OW 251
26700: PPUSH
26701: LD_INT 12
26703: PPUSH
26704: LD_INT 1
26706: PPUSH
26707: CALL_OW 50
26711: GO 26725
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26713: CALL_OW 45
26717: PPUSH
26718: LD_INT 1
26720: PPUSH
26721: CALL_OW 51
// end ;
26725: GO 26599
26727: POP
26728: POP
// end ;
26729: PPOPN 2
26731: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26732: LD_EXP 41
26736: IFFALSE 26744
26738: PUSH
26739: LD_EXP 87
26743: AND
26744: IFFALSE 26966
26746: GO 26748
26748: DISABLE
26749: LD_INT 0
26751: PPUSH
26752: PPUSH
26753: PPUSH
26754: PPUSH
26755: PPUSH
26756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26757: LD_ADDR_VAR 0 6
26761: PUSH
26762: LD_INT 22
26764: PUSH
26765: LD_OWVAR 2
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 21
26776: PUSH
26777: LD_INT 1
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 3
26786: PUSH
26787: LD_INT 23
26789: PUSH
26790: LD_INT 0
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: LIST
26805: PPUSH
26806: CALL_OW 69
26810: ST_TO_ADDR
// if not tmp then
26811: LD_VAR 0 6
26815: NOT
26816: IFFALSE 26820
// exit ;
26818: GO 26966
// s1 := rand ( 1 , 4 ) ;
26820: LD_ADDR_VAR 0 2
26824: PUSH
26825: LD_INT 1
26827: PPUSH
26828: LD_INT 4
26830: PPUSH
26831: CALL_OW 12
26835: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26836: LD_ADDR_VAR 0 4
26840: PUSH
26841: LD_VAR 0 6
26845: PUSH
26846: LD_INT 1
26848: ARRAY
26849: PPUSH
26850: LD_VAR 0 2
26854: PPUSH
26855: CALL_OW 259
26859: ST_TO_ADDR
// if s1 = 1 then
26860: LD_VAR 0 2
26864: PUSH
26865: LD_INT 1
26867: EQUAL
26868: IFFALSE 26888
// s2 := rand ( 2 , 4 ) else
26870: LD_ADDR_VAR 0 3
26874: PUSH
26875: LD_INT 2
26877: PPUSH
26878: LD_INT 4
26880: PPUSH
26881: CALL_OW 12
26885: ST_TO_ADDR
26886: GO 26896
// s2 := 1 ;
26888: LD_ADDR_VAR 0 3
26892: PUSH
26893: LD_INT 1
26895: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26896: LD_ADDR_VAR 0 5
26900: PUSH
26901: LD_VAR 0 6
26905: PUSH
26906: LD_INT 1
26908: ARRAY
26909: PPUSH
26910: LD_VAR 0 3
26914: PPUSH
26915: CALL_OW 259
26919: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26920: LD_VAR 0 6
26924: PUSH
26925: LD_INT 1
26927: ARRAY
26928: PPUSH
26929: LD_VAR 0 2
26933: PPUSH
26934: LD_VAR 0 5
26938: PPUSH
26939: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26943: LD_VAR 0 6
26947: PUSH
26948: LD_INT 1
26950: ARRAY
26951: PPUSH
26952: LD_VAR 0 3
26956: PPUSH
26957: LD_VAR 0 4
26961: PPUSH
26962: CALL_OW 237
// end ;
26966: PPOPN 6
26968: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26969: LD_EXP 41
26973: IFFALSE 26981
26975: PUSH
26976: LD_EXP 88
26980: AND
26981: IFFALSE 27060
26983: GO 26985
26985: DISABLE
26986: LD_INT 0
26988: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26989: LD_ADDR_VAR 0 1
26993: PUSH
26994: LD_INT 22
26996: PUSH
26997: LD_OWVAR 2
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 30
27008: PUSH
27009: LD_INT 3
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PPUSH
27020: CALL_OW 69
27024: ST_TO_ADDR
// if not tmp then
27025: LD_VAR 0 1
27029: NOT
27030: IFFALSE 27034
// exit ;
27032: GO 27060
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
27034: LD_VAR 0 1
27038: PUSH
27039: LD_INT 1
27041: PPUSH
27042: LD_VAR 0 1
27046: PPUSH
27047: CALL_OW 12
27051: ARRAY
27052: PPUSH
27053: LD_INT 1
27055: PPUSH
27056: CALL_OW 234
// end ;
27060: PPOPN 1
27062: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
27063: LD_EXP 41
27067: IFFALSE 27075
27069: PUSH
27070: LD_EXP 89
27074: AND
27075: IFFALSE 27187
27077: GO 27079
27079: DISABLE
27080: LD_INT 0
27082: PPUSH
27083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
27084: LD_ADDR_VAR 0 2
27088: PUSH
27089: LD_INT 22
27091: PUSH
27092: LD_OWVAR 2
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: PUSH
27101: LD_INT 2
27103: PUSH
27104: LD_INT 30
27106: PUSH
27107: LD_INT 27
27109: PUSH
27110: EMPTY
27111: LIST
27112: LIST
27113: PUSH
27114: LD_INT 30
27116: PUSH
27117: LD_INT 26
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 30
27126: PUSH
27127: LD_INT 28
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: PPUSH
27144: CALL_OW 69
27148: ST_TO_ADDR
// if not tmp then
27149: LD_VAR 0 2
27153: NOT
27154: IFFALSE 27158
// exit ;
27156: GO 27187
// for i in tmp do
27158: LD_ADDR_VAR 0 1
27162: PUSH
27163: LD_VAR 0 2
27167: PUSH
27168: FOR_IN
27169: IFFALSE 27185
// SetLives ( i , 1 ) ;
27171: LD_VAR 0 1
27175: PPUSH
27176: LD_INT 1
27178: PPUSH
27179: CALL_OW 234
27183: GO 27168
27185: POP
27186: POP
// end ;
27187: PPOPN 2
27189: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
27190: LD_EXP 41
27194: IFFALSE 27202
27196: PUSH
27197: LD_EXP 90
27201: AND
27202: IFFALSE 27489
27204: GO 27206
27206: DISABLE
27207: LD_INT 0
27209: PPUSH
27210: PPUSH
27211: PPUSH
// begin i := rand ( 1 , 7 ) ;
27212: LD_ADDR_VAR 0 1
27216: PUSH
27217: LD_INT 1
27219: PPUSH
27220: LD_INT 7
27222: PPUSH
27223: CALL_OW 12
27227: ST_TO_ADDR
// case i of 1 :
27228: LD_VAR 0 1
27232: PUSH
27233: LD_INT 1
27235: DOUBLE
27236: EQUAL
27237: IFTRUE 27241
27239: GO 27251
27241: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
27242: LD_STRING earthquake(getX(game), 0, 32)
27244: PPUSH
27245: CALL_OW 559
27249: GO 27489
27251: LD_INT 2
27253: DOUBLE
27254: EQUAL
27255: IFTRUE 27259
27257: GO 27273
27259: POP
// begin ToLua ( displayStucuk(); ) ;
27260: LD_STRING displayStucuk();
27262: PPUSH
27263: CALL_OW 559
// ResetFog ;
27267: CALL_OW 335
// end ; 3 :
27271: GO 27489
27273: LD_INT 3
27275: DOUBLE
27276: EQUAL
27277: IFTRUE 27281
27279: GO 27385
27281: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27282: LD_ADDR_VAR 0 2
27286: PUSH
27287: LD_INT 22
27289: PUSH
27290: LD_OWVAR 2
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 25
27301: PUSH
27302: LD_INT 1
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: PPUSH
27313: CALL_OW 69
27317: ST_TO_ADDR
// if not tmp then
27318: LD_VAR 0 2
27322: NOT
27323: IFFALSE 27327
// exit ;
27325: GO 27489
// un := tmp [ rand ( 1 , tmp ) ] ;
27327: LD_ADDR_VAR 0 3
27331: PUSH
27332: LD_VAR 0 2
27336: PUSH
27337: LD_INT 1
27339: PPUSH
27340: LD_VAR 0 2
27344: PPUSH
27345: CALL_OW 12
27349: ARRAY
27350: ST_TO_ADDR
// if Crawls ( un ) then
27351: LD_VAR 0 3
27355: PPUSH
27356: CALL_OW 318
27360: IFFALSE 27371
// ComWalk ( un ) ;
27362: LD_VAR 0 3
27366: PPUSH
27367: CALL_OW 138
// SetClass ( un , class_mortar ) ;
27371: LD_VAR 0 3
27375: PPUSH
27376: LD_INT 8
27378: PPUSH
27379: CALL_OW 336
// end ; 4 :
27383: GO 27489
27385: LD_INT 4
27387: DOUBLE
27388: EQUAL
27389: IFTRUE 27393
27391: GO 27467
27393: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
27394: LD_ADDR_VAR 0 2
27398: PUSH
27399: LD_INT 22
27401: PUSH
27402: LD_OWVAR 2
27406: PUSH
27407: EMPTY
27408: LIST
27409: LIST
27410: PUSH
27411: LD_INT 30
27413: PUSH
27414: LD_INT 29
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: EMPTY
27422: LIST
27423: LIST
27424: PPUSH
27425: CALL_OW 69
27429: ST_TO_ADDR
// if not tmp then
27430: LD_VAR 0 2
27434: NOT
27435: IFFALSE 27439
// exit ;
27437: GO 27489
// CenterNowOnUnits ( tmp [ 1 ] ) ;
27439: LD_VAR 0 2
27443: PUSH
27444: LD_INT 1
27446: ARRAY
27447: PPUSH
27448: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
27452: LD_VAR 0 2
27456: PUSH
27457: LD_INT 1
27459: ARRAY
27460: PPUSH
27461: CALL_OW 65
// end ; 5 .. 7 :
27465: GO 27489
27467: LD_INT 5
27469: DOUBLE
27470: GREATEREQUAL
27471: IFFALSE 27479
27473: LD_INT 7
27475: DOUBLE
27476: LESSEQUAL
27477: IFTRUE 27481
27479: GO 27488
27481: POP
// StreamSibBomb ; end ;
27482: CALL 23670 0 0
27486: GO 27489
27488: POP
// end ;
27489: PPOPN 3
27491: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
27492: LD_EXP 41
27496: IFFALSE 27504
27498: PUSH
27499: LD_EXP 91
27503: AND
27504: IFFALSE 27660
27506: GO 27508
27508: DISABLE
27509: LD_INT 0
27511: PPUSH
27512: PPUSH
27513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
27514: LD_ADDR_VAR 0 2
27518: PUSH
27519: LD_INT 81
27521: PUSH
27522: LD_OWVAR 2
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 2
27533: PUSH
27534: LD_INT 21
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 21
27546: PUSH
27547: LD_INT 2
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: LIST
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PPUSH
27563: CALL_OW 69
27567: ST_TO_ADDR
// if not tmp then
27568: LD_VAR 0 2
27572: NOT
27573: IFFALSE 27577
// exit ;
27575: GO 27660
// p := 0 ;
27577: LD_ADDR_VAR 0 3
27581: PUSH
27582: LD_INT 0
27584: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27585: LD_INT 35
27587: PPUSH
27588: CALL_OW 67
// p := p + 1 ;
27592: LD_ADDR_VAR 0 3
27596: PUSH
27597: LD_VAR 0 3
27601: PUSH
27602: LD_INT 1
27604: PLUS
27605: ST_TO_ADDR
// for i in tmp do
27606: LD_ADDR_VAR 0 1
27610: PUSH
27611: LD_VAR 0 2
27615: PUSH
27616: FOR_IN
27617: IFFALSE 27648
// if GetLives ( i ) < 1000 then
27619: LD_VAR 0 1
27623: PPUSH
27624: CALL_OW 256
27628: PUSH
27629: LD_INT 1000
27631: LESS
27632: IFFALSE 27646
// SetLives ( i , 1000 ) ;
27634: LD_VAR 0 1
27638: PPUSH
27639: LD_INT 1000
27641: PPUSH
27642: CALL_OW 234
27646: GO 27616
27648: POP
27649: POP
// until p > 20 ;
27650: LD_VAR 0 3
27654: PUSH
27655: LD_INT 20
27657: GREATER
27658: IFFALSE 27585
// end ;
27660: PPOPN 3
27662: END
// every 0 0$1 trigger StreamModeActive and sTime do
27663: LD_EXP 41
27667: IFFALSE 27675
27669: PUSH
27670: LD_EXP 92
27674: AND
27675: IFFALSE 27710
27677: GO 27679
27679: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27680: LD_INT 28
27682: PPUSH
27683: LD_OWVAR 2
27687: PPUSH
27688: LD_INT 2
27690: PPUSH
27691: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27695: LD_INT 30
27697: PPUSH
27698: LD_OWVAR 2
27702: PPUSH
27703: LD_INT 2
27705: PPUSH
27706: CALL_OW 322
// end ;
27710: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27711: LD_EXP 41
27715: IFFALSE 27723
27717: PUSH
27718: LD_EXP 93
27722: AND
27723: IFFALSE 27844
27725: GO 27727
27727: DISABLE
27728: LD_INT 0
27730: PPUSH
27731: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27732: LD_ADDR_VAR 0 2
27736: PUSH
27737: LD_INT 22
27739: PUSH
27740: LD_OWVAR 2
27744: PUSH
27745: EMPTY
27746: LIST
27747: LIST
27748: PUSH
27749: LD_INT 21
27751: PUSH
27752: LD_INT 1
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 3
27761: PUSH
27762: LD_INT 23
27764: PUSH
27765: LD_INT 0
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: LIST
27780: PPUSH
27781: CALL_OW 69
27785: ST_TO_ADDR
// if not tmp then
27786: LD_VAR 0 2
27790: NOT
27791: IFFALSE 27795
// exit ;
27793: GO 27844
// for i in tmp do
27795: LD_ADDR_VAR 0 1
27799: PUSH
27800: LD_VAR 0 2
27804: PUSH
27805: FOR_IN
27806: IFFALSE 27842
// begin if Crawls ( i ) then
27808: LD_VAR 0 1
27812: PPUSH
27813: CALL_OW 318
27817: IFFALSE 27828
// ComWalk ( i ) ;
27819: LD_VAR 0 1
27823: PPUSH
27824: CALL_OW 138
// SetClass ( i , 2 ) ;
27828: LD_VAR 0 1
27832: PPUSH
27833: LD_INT 2
27835: PPUSH
27836: CALL_OW 336
// end ;
27840: GO 27805
27842: POP
27843: POP
// end ;
27844: PPOPN 2
27846: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27847: LD_EXP 41
27851: IFFALSE 27859
27853: PUSH
27854: LD_EXP 94
27858: AND
27859: IFFALSE 28149
27861: GO 27863
27863: DISABLE
27864: LD_INT 0
27866: PPUSH
27867: PPUSH
27868: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27869: LD_OWVAR 2
27873: PPUSH
27874: LD_INT 9
27876: PPUSH
27877: LD_INT 1
27879: PPUSH
27880: LD_INT 1
27882: PPUSH
27883: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27887: LD_INT 9
27889: PPUSH
27890: LD_OWVAR 2
27894: PPUSH
27895: CALL_OW 343
// uc_side := 9 ;
27899: LD_ADDR_OWVAR 20
27903: PUSH
27904: LD_INT 9
27906: ST_TO_ADDR
// uc_nation := 2 ;
27907: LD_ADDR_OWVAR 21
27911: PUSH
27912: LD_INT 2
27914: ST_TO_ADDR
// hc_name := Dark Warrior ;
27915: LD_ADDR_OWVAR 26
27919: PUSH
27920: LD_STRING Dark Warrior
27922: ST_TO_ADDR
// hc_gallery :=  ;
27923: LD_ADDR_OWVAR 33
27927: PUSH
27928: LD_STRING 
27930: ST_TO_ADDR
// hc_noskilllimit := true ;
27931: LD_ADDR_OWVAR 76
27935: PUSH
27936: LD_INT 1
27938: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27939: LD_ADDR_OWVAR 31
27943: PUSH
27944: LD_INT 30
27946: PUSH
27947: LD_INT 30
27949: PUSH
27950: LD_INT 30
27952: PUSH
27953: LD_INT 30
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: LIST
27960: LIST
27961: ST_TO_ADDR
// un := CreateHuman ;
27962: LD_ADDR_VAR 0 3
27966: PUSH
27967: CALL_OW 44
27971: ST_TO_ADDR
// hc_noskilllimit := false ;
27972: LD_ADDR_OWVAR 76
27976: PUSH
27977: LD_INT 0
27979: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27980: LD_VAR 0 3
27984: PPUSH
27985: LD_INT 1
27987: PPUSH
27988: CALL_OW 51
// ToLua ( playRanger() ) ;
27992: LD_STRING playRanger()
27994: PPUSH
27995: CALL_OW 559
// p := 0 ;
27999: LD_ADDR_VAR 0 2
28003: PUSH
28004: LD_INT 0
28006: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
28007: LD_INT 35
28009: PPUSH
28010: CALL_OW 67
// p := p + 1 ;
28014: LD_ADDR_VAR 0 2
28018: PUSH
28019: LD_VAR 0 2
28023: PUSH
28024: LD_INT 1
28026: PLUS
28027: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
28028: LD_VAR 0 3
28032: PPUSH
28033: CALL_OW 256
28037: PUSH
28038: LD_INT 1000
28040: LESS
28041: IFFALSE 28055
// SetLives ( un , 1000 ) ;
28043: LD_VAR 0 3
28047: PPUSH
28048: LD_INT 1000
28050: PPUSH
28051: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
28055: LD_VAR 0 3
28059: PPUSH
28060: LD_INT 81
28062: PUSH
28063: LD_OWVAR 2
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 91
28074: PUSH
28075: LD_VAR 0 3
28079: PUSH
28080: LD_INT 30
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: LIST
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PPUSH
28092: CALL_OW 69
28096: PPUSH
28097: LD_VAR 0 3
28101: PPUSH
28102: CALL_OW 74
28106: PPUSH
28107: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
28111: LD_VAR 0 2
28115: PUSH
28116: LD_INT 80
28118: GREATER
28119: IFTRUE 28132
28121: PUSH
28122: LD_VAR 0 3
28126: PPUSH
28127: CALL_OW 301
28131: OR
28132: IFFALSE 28007
// if un then
28134: LD_VAR 0 3
28138: IFFALSE 28149
// RemoveUnit ( un ) ;
28140: LD_VAR 0 3
28144: PPUSH
28145: CALL_OW 64
// end ;
28149: PPOPN 3
28151: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
28152: LD_EXP 95
28156: IFFALSE 28272
28158: GO 28160
28160: DISABLE
28161: LD_INT 0
28163: PPUSH
28164: PPUSH
28165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
28166: LD_ADDR_VAR 0 2
28170: PUSH
28171: LD_INT 81
28173: PUSH
28174: LD_OWVAR 2
28178: PUSH
28179: EMPTY
28180: LIST
28181: LIST
28182: PUSH
28183: LD_INT 21
28185: PUSH
28186: LD_INT 1
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: PUSH
28193: EMPTY
28194: LIST
28195: LIST
28196: PPUSH
28197: CALL_OW 69
28201: ST_TO_ADDR
// ToLua ( playComputer() ) ;
28202: LD_STRING playComputer()
28204: PPUSH
28205: CALL_OW 559
// if not tmp then
28209: LD_VAR 0 2
28213: NOT
28214: IFFALSE 28218
// exit ;
28216: GO 28272
// for i in tmp do
28218: LD_ADDR_VAR 0 1
28222: PUSH
28223: LD_VAR 0 2
28227: PUSH
28228: FOR_IN
28229: IFFALSE 28270
// for j := 1 to 4 do
28231: LD_ADDR_VAR 0 3
28235: PUSH
28236: DOUBLE
28237: LD_INT 1
28239: DEC
28240: ST_TO_ADDR
28241: LD_INT 4
28243: PUSH
28244: FOR_TO
28245: IFFALSE 28266
// SetSkill ( i , j , 10 ) ;
28247: LD_VAR 0 1
28251: PPUSH
28252: LD_VAR 0 3
28256: PPUSH
28257: LD_INT 10
28259: PPUSH
28260: CALL_OW 237
28264: GO 28244
28266: POP
28267: POP
28268: GO 28228
28270: POP
28271: POP
// end ;
28272: PPOPN 3
28274: END
// every 0 0$1 trigger s30 do var i , tmp ;
28275: LD_EXP 96
28279: IFFALSE 28348
28281: GO 28283
28283: DISABLE
28284: LD_INT 0
28286: PPUSH
28287: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28288: LD_ADDR_VAR 0 2
28292: PUSH
28293: LD_INT 22
28295: PUSH
28296: LD_OWVAR 2
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PPUSH
28305: CALL_OW 69
28309: ST_TO_ADDR
// if not tmp then
28310: LD_VAR 0 2
28314: NOT
28315: IFFALSE 28319
// exit ;
28317: GO 28348
// for i in tmp do
28319: LD_ADDR_VAR 0 1
28323: PUSH
28324: LD_VAR 0 2
28328: PUSH
28329: FOR_IN
28330: IFFALSE 28346
// SetLives ( i , 300 ) ;
28332: LD_VAR 0 1
28336: PPUSH
28337: LD_INT 300
28339: PPUSH
28340: CALL_OW 234
28344: GO 28329
28346: POP
28347: POP
// end ;
28348: PPOPN 2
28350: END
// every 0 0$1 trigger s60 do var i , tmp ;
28351: LD_EXP 97
28355: IFFALSE 28424
28357: GO 28359
28359: DISABLE
28360: LD_INT 0
28362: PPUSH
28363: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
28364: LD_ADDR_VAR 0 2
28368: PUSH
28369: LD_INT 22
28371: PUSH
28372: LD_OWVAR 2
28376: PUSH
28377: EMPTY
28378: LIST
28379: LIST
28380: PPUSH
28381: CALL_OW 69
28385: ST_TO_ADDR
// if not tmp then
28386: LD_VAR 0 2
28390: NOT
28391: IFFALSE 28395
// exit ;
28393: GO 28424
// for i in tmp do
28395: LD_ADDR_VAR 0 1
28399: PUSH
28400: LD_VAR 0 2
28404: PUSH
28405: FOR_IN
28406: IFFALSE 28422
// SetLives ( i , 600 ) ;
28408: LD_VAR 0 1
28412: PPUSH
28413: LD_INT 600
28415: PPUSH
28416: CALL_OW 234
28420: GO 28405
28422: POP
28423: POP
// end ;
28424: PPOPN 2
28426: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
28427: LD_INT 0
28429: PPUSH
// case cmd of 301 :
28430: LD_VAR 0 1
28434: PUSH
28435: LD_INT 301
28437: DOUBLE
28438: EQUAL
28439: IFTRUE 28443
28441: GO 28475
28443: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
28444: LD_VAR 0 6
28448: PPUSH
28449: LD_VAR 0 7
28453: PPUSH
28454: LD_VAR 0 8
28458: PPUSH
28459: LD_VAR 0 4
28463: PPUSH
28464: LD_VAR 0 5
28468: PPUSH
28469: CALL 29688 0 5
28473: GO 28596
28475: LD_INT 302
28477: DOUBLE
28478: EQUAL
28479: IFTRUE 28483
28481: GO 28520
28483: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
28484: LD_VAR 0 6
28488: PPUSH
28489: LD_VAR 0 7
28493: PPUSH
28494: LD_VAR 0 8
28498: PPUSH
28499: LD_VAR 0 9
28503: PPUSH
28504: LD_VAR 0 4
28508: PPUSH
28509: LD_VAR 0 5
28513: PPUSH
28514: CALL 29779 0 6
28518: GO 28596
28520: LD_INT 303
28522: DOUBLE
28523: EQUAL
28524: IFTRUE 28528
28526: GO 28565
28528: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
28529: LD_VAR 0 6
28533: PPUSH
28534: LD_VAR 0 7
28538: PPUSH
28539: LD_VAR 0 8
28543: PPUSH
28544: LD_VAR 0 9
28548: PPUSH
28549: LD_VAR 0 4
28553: PPUSH
28554: LD_VAR 0 5
28558: PPUSH
28559: CALL 28601 0 6
28563: GO 28596
28565: LD_INT 304
28567: DOUBLE
28568: EQUAL
28569: IFTRUE 28573
28571: GO 28595
28573: POP
// hHackTeleport ( unit , x , y ) ; end ;
28574: LD_VAR 0 2
28578: PPUSH
28579: LD_VAR 0 4
28583: PPUSH
28584: LD_VAR 0 5
28588: PPUSH
28589: CALL 30372 0 3
28593: GO 28596
28595: POP
// end ;
28596: LD_VAR 0 12
28600: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
28601: LD_INT 0
28603: PPUSH
28604: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
28605: LD_VAR 0 1
28609: PUSH
28610: LD_INT 1
28612: LESS
28613: IFTRUE 28625
28615: PUSH
28616: LD_VAR 0 1
28620: PUSH
28621: LD_INT 3
28623: GREATER
28624: OR
28625: IFTRUE 28643
28627: PUSH
28628: LD_VAR 0 5
28632: PPUSH
28633: LD_VAR 0 6
28637: PPUSH
28638: CALL_OW 428
28642: OR
28643: IFFALSE 28647
// exit ;
28645: GO 29375
// uc_side := your_side ;
28647: LD_ADDR_OWVAR 20
28651: PUSH
28652: LD_OWVAR 2
28656: ST_TO_ADDR
// uc_nation := nation ;
28657: LD_ADDR_OWVAR 21
28661: PUSH
28662: LD_VAR 0 1
28666: ST_TO_ADDR
// bc_level = 1 ;
28667: LD_ADDR_OWVAR 43
28671: PUSH
28672: LD_INT 1
28674: ST_TO_ADDR
// case btype of 1 :
28675: LD_VAR 0 2
28679: PUSH
28680: LD_INT 1
28682: DOUBLE
28683: EQUAL
28684: IFTRUE 28688
28686: GO 28699
28688: POP
// bc_type := b_depot ; 2 :
28689: LD_ADDR_OWVAR 42
28693: PUSH
28694: LD_INT 0
28696: ST_TO_ADDR
28697: GO 29319
28699: LD_INT 2
28701: DOUBLE
28702: EQUAL
28703: IFTRUE 28707
28705: GO 28718
28707: POP
// bc_type := b_warehouse ; 3 :
28708: LD_ADDR_OWVAR 42
28712: PUSH
28713: LD_INT 1
28715: ST_TO_ADDR
28716: GO 29319
28718: LD_INT 3
28720: DOUBLE
28721: EQUAL
28722: IFTRUE 28726
28724: GO 28737
28726: POP
// bc_type := b_lab ; 4 .. 9 :
28727: LD_ADDR_OWVAR 42
28731: PUSH
28732: LD_INT 6
28734: ST_TO_ADDR
28735: GO 29319
28737: LD_INT 4
28739: DOUBLE
28740: GREATEREQUAL
28741: IFFALSE 28749
28743: LD_INT 9
28745: DOUBLE
28746: LESSEQUAL
28747: IFTRUE 28751
28749: GO 28811
28751: POP
// begin bc_type := b_lab_half ;
28752: LD_ADDR_OWVAR 42
28756: PUSH
28757: LD_INT 7
28759: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28760: LD_ADDR_OWVAR 44
28764: PUSH
28765: LD_INT 10
28767: PUSH
28768: LD_INT 11
28770: PUSH
28771: LD_INT 12
28773: PUSH
28774: LD_INT 15
28776: PUSH
28777: LD_INT 14
28779: PUSH
28780: LD_INT 13
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: PUSH
28791: LD_VAR 0 2
28795: PUSH
28796: LD_INT 3
28798: MINUS
28799: ARRAY
28800: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
28801: LD_ADDR_OWVAR 45
28805: PUSH
28806: LD_INT 9
28808: ST_TO_ADDR
// end ; 10 .. 13 :
28809: GO 29319
28811: LD_INT 10
28813: DOUBLE
28814: GREATEREQUAL
28815: IFFALSE 28823
28817: LD_INT 13
28819: DOUBLE
28820: LESSEQUAL
28821: IFTRUE 28825
28823: GO 28902
28825: POP
// begin bc_type := b_lab_full ;
28826: LD_ADDR_OWVAR 42
28830: PUSH
28831: LD_INT 8
28833: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28834: LD_ADDR_OWVAR 44
28838: PUSH
28839: LD_INT 10
28841: PUSH
28842: LD_INT 12
28844: PUSH
28845: LD_INT 14
28847: PUSH
28848: LD_INT 13
28850: PUSH
28851: EMPTY
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: PUSH
28857: LD_VAR 0 2
28861: PUSH
28862: LD_INT 9
28864: MINUS
28865: ARRAY
28866: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28867: LD_ADDR_OWVAR 45
28871: PUSH
28872: LD_INT 11
28874: PUSH
28875: LD_INT 15
28877: PUSH
28878: LD_INT 12
28880: PUSH
28881: LD_INT 15
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: PUSH
28890: LD_VAR 0 2
28894: PUSH
28895: LD_INT 9
28897: MINUS
28898: ARRAY
28899: ST_TO_ADDR
// end ; 14 :
28900: GO 29319
28902: LD_INT 14
28904: DOUBLE
28905: EQUAL
28906: IFTRUE 28910
28908: GO 28921
28910: POP
// bc_type := b_workshop ; 15 :
28911: LD_ADDR_OWVAR 42
28915: PUSH
28916: LD_INT 2
28918: ST_TO_ADDR
28919: GO 29319
28921: LD_INT 15
28923: DOUBLE
28924: EQUAL
28925: IFTRUE 28929
28927: GO 28940
28929: POP
// bc_type := b_factory ; 16 :
28930: LD_ADDR_OWVAR 42
28934: PUSH
28935: LD_INT 3
28937: ST_TO_ADDR
28938: GO 29319
28940: LD_INT 16
28942: DOUBLE
28943: EQUAL
28944: IFTRUE 28948
28946: GO 28959
28948: POP
// bc_type := b_ext_gun ; 17 :
28949: LD_ADDR_OWVAR 42
28953: PUSH
28954: LD_INT 17
28956: ST_TO_ADDR
28957: GO 29319
28959: LD_INT 17
28961: DOUBLE
28962: EQUAL
28963: IFTRUE 28967
28965: GO 28995
28967: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28968: LD_ADDR_OWVAR 42
28972: PUSH
28973: LD_INT 19
28975: PUSH
28976: LD_INT 23
28978: PUSH
28979: LD_INT 19
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: LIST
28986: PUSH
28987: LD_VAR 0 1
28991: ARRAY
28992: ST_TO_ADDR
28993: GO 29319
28995: LD_INT 18
28997: DOUBLE
28998: EQUAL
28999: IFTRUE 29003
29001: GO 29014
29003: POP
// bc_type := b_ext_radar ; 19 :
29004: LD_ADDR_OWVAR 42
29008: PUSH
29009: LD_INT 20
29011: ST_TO_ADDR
29012: GO 29319
29014: LD_INT 19
29016: DOUBLE
29017: EQUAL
29018: IFTRUE 29022
29020: GO 29033
29022: POP
// bc_type := b_ext_radio ; 20 :
29023: LD_ADDR_OWVAR 42
29027: PUSH
29028: LD_INT 22
29030: ST_TO_ADDR
29031: GO 29319
29033: LD_INT 20
29035: DOUBLE
29036: EQUAL
29037: IFTRUE 29041
29039: GO 29052
29041: POP
// bc_type := b_ext_siberium ; 21 :
29042: LD_ADDR_OWVAR 42
29046: PUSH
29047: LD_INT 21
29049: ST_TO_ADDR
29050: GO 29319
29052: LD_INT 21
29054: DOUBLE
29055: EQUAL
29056: IFTRUE 29060
29058: GO 29071
29060: POP
// bc_type := b_ext_computer ; 22 :
29061: LD_ADDR_OWVAR 42
29065: PUSH
29066: LD_INT 24
29068: ST_TO_ADDR
29069: GO 29319
29071: LD_INT 22
29073: DOUBLE
29074: EQUAL
29075: IFTRUE 29079
29077: GO 29090
29079: POP
// bc_type := b_ext_track ; 23 :
29080: LD_ADDR_OWVAR 42
29084: PUSH
29085: LD_INT 16
29087: ST_TO_ADDR
29088: GO 29319
29090: LD_INT 23
29092: DOUBLE
29093: EQUAL
29094: IFTRUE 29098
29096: GO 29109
29098: POP
// bc_type := b_ext_laser ; 24 :
29099: LD_ADDR_OWVAR 42
29103: PUSH
29104: LD_INT 25
29106: ST_TO_ADDR
29107: GO 29319
29109: LD_INT 24
29111: DOUBLE
29112: EQUAL
29113: IFTRUE 29117
29115: GO 29128
29117: POP
// bc_type := b_control_tower ; 25 :
29118: LD_ADDR_OWVAR 42
29122: PUSH
29123: LD_INT 36
29125: ST_TO_ADDR
29126: GO 29319
29128: LD_INT 25
29130: DOUBLE
29131: EQUAL
29132: IFTRUE 29136
29134: GO 29147
29136: POP
// bc_type := b_breastwork ; 26 :
29137: LD_ADDR_OWVAR 42
29141: PUSH
29142: LD_INT 31
29144: ST_TO_ADDR
29145: GO 29319
29147: LD_INT 26
29149: DOUBLE
29150: EQUAL
29151: IFTRUE 29155
29153: GO 29166
29155: POP
// bc_type := b_bunker ; 27 :
29156: LD_ADDR_OWVAR 42
29160: PUSH
29161: LD_INT 32
29163: ST_TO_ADDR
29164: GO 29319
29166: LD_INT 27
29168: DOUBLE
29169: EQUAL
29170: IFTRUE 29174
29172: GO 29185
29174: POP
// bc_type := b_turret ; 28 :
29175: LD_ADDR_OWVAR 42
29179: PUSH
29180: LD_INT 33
29182: ST_TO_ADDR
29183: GO 29319
29185: LD_INT 28
29187: DOUBLE
29188: EQUAL
29189: IFTRUE 29193
29191: GO 29204
29193: POP
// bc_type := b_armoury ; 29 :
29194: LD_ADDR_OWVAR 42
29198: PUSH
29199: LD_INT 4
29201: ST_TO_ADDR
29202: GO 29319
29204: LD_INT 29
29206: DOUBLE
29207: EQUAL
29208: IFTRUE 29212
29210: GO 29223
29212: POP
// bc_type := b_barracks ; 30 :
29213: LD_ADDR_OWVAR 42
29217: PUSH
29218: LD_INT 5
29220: ST_TO_ADDR
29221: GO 29319
29223: LD_INT 30
29225: DOUBLE
29226: EQUAL
29227: IFTRUE 29231
29229: GO 29242
29231: POP
// bc_type := b_solar_power ; 31 :
29232: LD_ADDR_OWVAR 42
29236: PUSH
29237: LD_INT 27
29239: ST_TO_ADDR
29240: GO 29319
29242: LD_INT 31
29244: DOUBLE
29245: EQUAL
29246: IFTRUE 29250
29248: GO 29261
29250: POP
// bc_type := b_oil_power ; 32 :
29251: LD_ADDR_OWVAR 42
29255: PUSH
29256: LD_INT 26
29258: ST_TO_ADDR
29259: GO 29319
29261: LD_INT 32
29263: DOUBLE
29264: EQUAL
29265: IFTRUE 29269
29267: GO 29280
29269: POP
// bc_type := b_siberite_power ; 33 :
29270: LD_ADDR_OWVAR 42
29274: PUSH
29275: LD_INT 28
29277: ST_TO_ADDR
29278: GO 29319
29280: LD_INT 33
29282: DOUBLE
29283: EQUAL
29284: IFTRUE 29288
29286: GO 29299
29288: POP
// bc_type := b_oil_mine ; 34 :
29289: LD_ADDR_OWVAR 42
29293: PUSH
29294: LD_INT 29
29296: ST_TO_ADDR
29297: GO 29319
29299: LD_INT 34
29301: DOUBLE
29302: EQUAL
29303: IFTRUE 29307
29305: GO 29318
29307: POP
// bc_type := b_siberite_mine ; end ;
29308: LD_ADDR_OWVAR 42
29312: PUSH
29313: LD_INT 30
29315: ST_TO_ADDR
29316: GO 29319
29318: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
29319: LD_ADDR_VAR 0 8
29323: PUSH
29324: LD_VAR 0 5
29328: PPUSH
29329: LD_VAR 0 6
29333: PPUSH
29334: LD_VAR 0 3
29338: PPUSH
29339: CALL_OW 47
29343: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
29344: LD_OWVAR 42
29348: PUSH
29349: LD_INT 32
29351: PUSH
29352: LD_INT 33
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: IN
29359: IFFALSE 29375
// PlaceWeaponTurret ( b , weapon ) ;
29361: LD_VAR 0 8
29365: PPUSH
29366: LD_VAR 0 4
29370: PPUSH
29371: CALL_OW 431
// end ;
29375: LD_VAR 0 7
29379: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
29380: LD_INT 0
29382: PPUSH
29383: PPUSH
29384: PPUSH
29385: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29386: LD_ADDR_VAR 0 4
29390: PUSH
29391: LD_INT 22
29393: PUSH
29394: LD_OWVAR 2
29398: PUSH
29399: EMPTY
29400: LIST
29401: LIST
29402: PUSH
29403: LD_INT 2
29405: PUSH
29406: LD_INT 30
29408: PUSH
29409: LD_INT 0
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 30
29418: PUSH
29419: LD_INT 1
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: LIST
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PPUSH
29435: CALL_OW 69
29439: ST_TO_ADDR
// if not tmp then
29440: LD_VAR 0 4
29444: NOT
29445: IFFALSE 29449
// exit ;
29447: GO 29508
// for i in tmp do
29449: LD_ADDR_VAR 0 2
29453: PUSH
29454: LD_VAR 0 4
29458: PUSH
29459: FOR_IN
29460: IFFALSE 29506
// for j = 1 to 3 do
29462: LD_ADDR_VAR 0 3
29466: PUSH
29467: DOUBLE
29468: LD_INT 1
29470: DEC
29471: ST_TO_ADDR
29472: LD_INT 3
29474: PUSH
29475: FOR_TO
29476: IFFALSE 29502
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
29478: LD_VAR 0 2
29482: PPUSH
29483: CALL_OW 274
29487: PPUSH
29488: LD_VAR 0 3
29492: PPUSH
29493: LD_INT 99999
29495: PPUSH
29496: CALL_OW 277
29500: GO 29475
29502: POP
29503: POP
29504: GO 29459
29506: POP
29507: POP
// end ;
29508: LD_VAR 0 1
29512: RET
// export function hHackSetLevel10 ; var i , j ; begin
29513: LD_INT 0
29515: PPUSH
29516: PPUSH
29517: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29518: LD_ADDR_VAR 0 2
29522: PUSH
29523: LD_INT 21
29525: PUSH
29526: LD_INT 1
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PPUSH
29533: CALL_OW 69
29537: PUSH
29538: FOR_IN
29539: IFFALSE 29591
// if IsSelected ( i ) then
29541: LD_VAR 0 2
29545: PPUSH
29546: CALL_OW 306
29550: IFFALSE 29589
// begin for j := 1 to 4 do
29552: LD_ADDR_VAR 0 3
29556: PUSH
29557: DOUBLE
29558: LD_INT 1
29560: DEC
29561: ST_TO_ADDR
29562: LD_INT 4
29564: PUSH
29565: FOR_TO
29566: IFFALSE 29587
// SetSkill ( i , j , 10 ) ;
29568: LD_VAR 0 2
29572: PPUSH
29573: LD_VAR 0 3
29577: PPUSH
29578: LD_INT 10
29580: PPUSH
29581: CALL_OW 237
29585: GO 29565
29587: POP
29588: POP
// end ;
29589: GO 29538
29591: POP
29592: POP
// end ;
29593: LD_VAR 0 1
29597: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
29598: LD_INT 0
29600: PPUSH
29601: PPUSH
29602: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
29603: LD_ADDR_VAR 0 2
29607: PUSH
29608: LD_INT 22
29610: PUSH
29611: LD_OWVAR 2
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: PUSH
29620: LD_INT 21
29622: PUSH
29623: LD_INT 1
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PPUSH
29634: CALL_OW 69
29638: PUSH
29639: FOR_IN
29640: IFFALSE 29681
// begin for j := 1 to 4 do
29642: LD_ADDR_VAR 0 3
29646: PUSH
29647: DOUBLE
29648: LD_INT 1
29650: DEC
29651: ST_TO_ADDR
29652: LD_INT 4
29654: PUSH
29655: FOR_TO
29656: IFFALSE 29677
// SetSkill ( i , j , 10 ) ;
29658: LD_VAR 0 2
29662: PPUSH
29663: LD_VAR 0 3
29667: PPUSH
29668: LD_INT 10
29670: PPUSH
29671: CALL_OW 237
29675: GO 29655
29677: POP
29678: POP
// end ;
29679: GO 29639
29681: POP
29682: POP
// end ;
29683: LD_VAR 0 1
29687: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29688: LD_INT 0
29690: PPUSH
// uc_side := your_side ;
29691: LD_ADDR_OWVAR 20
29695: PUSH
29696: LD_OWVAR 2
29700: ST_TO_ADDR
// uc_nation := nation ;
29701: LD_ADDR_OWVAR 21
29705: PUSH
29706: LD_VAR 0 1
29710: ST_TO_ADDR
// InitHc ;
29711: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29715: LD_INT 0
29717: PPUSH
29718: LD_VAR 0 2
29722: PPUSH
29723: LD_VAR 0 3
29727: PPUSH
29728: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29732: LD_VAR 0 4
29736: PPUSH
29737: LD_VAR 0 5
29741: PPUSH
29742: CALL_OW 428
29746: PUSH
29747: LD_INT 0
29749: EQUAL
29750: IFFALSE 29774
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29752: CALL_OW 44
29756: PPUSH
29757: LD_VAR 0 4
29761: PPUSH
29762: LD_VAR 0 5
29766: PPUSH
29767: LD_INT 1
29769: PPUSH
29770: CALL_OW 48
// end ;
29774: LD_VAR 0 6
29778: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29779: LD_INT 0
29781: PPUSH
29782: PPUSH
// uc_side := your_side ;
29783: LD_ADDR_OWVAR 20
29787: PUSH
29788: LD_OWVAR 2
29792: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29793: LD_VAR 0 1
29797: PUSH
29798: LD_INT 1
29800: PUSH
29801: LD_INT 2
29803: PUSH
29804: LD_INT 3
29806: PUSH
29807: LD_INT 4
29809: PUSH
29810: LD_INT 5
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: LIST
29817: LIST
29818: LIST
29819: IN
29820: IFFALSE 29832
// uc_nation := nation_american else
29822: LD_ADDR_OWVAR 21
29826: PUSH
29827: LD_INT 1
29829: ST_TO_ADDR
29830: GO 29875
// if chassis in [ 11 , 12 , 13 , 14 ] then
29832: LD_VAR 0 1
29836: PUSH
29837: LD_INT 11
29839: PUSH
29840: LD_INT 12
29842: PUSH
29843: LD_INT 13
29845: PUSH
29846: LD_INT 14
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: IN
29855: IFFALSE 29867
// uc_nation := nation_arabian else
29857: LD_ADDR_OWVAR 21
29861: PUSH
29862: LD_INT 2
29864: ST_TO_ADDR
29865: GO 29875
// uc_nation := nation_russian ;
29867: LD_ADDR_OWVAR 21
29871: PUSH
29872: LD_INT 3
29874: ST_TO_ADDR
// vc_chassis := chassis ;
29875: LD_ADDR_OWVAR 37
29879: PUSH
29880: LD_VAR 0 1
29884: ST_TO_ADDR
// vc_engine := engine ;
29885: LD_ADDR_OWVAR 39
29889: PUSH
29890: LD_VAR 0 2
29894: ST_TO_ADDR
// vc_control := control ;
29895: LD_ADDR_OWVAR 38
29899: PUSH
29900: LD_VAR 0 3
29904: ST_TO_ADDR
// vc_weapon := weapon ;
29905: LD_ADDR_OWVAR 40
29909: PUSH
29910: LD_VAR 0 4
29914: ST_TO_ADDR
// un := CreateVehicle ;
29915: LD_ADDR_VAR 0 8
29919: PUSH
29920: CALL_OW 45
29924: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29925: LD_VAR 0 8
29929: PPUSH
29930: LD_INT 0
29932: PPUSH
29933: LD_INT 5
29935: PPUSH
29936: CALL_OW 12
29940: PPUSH
29941: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29945: LD_VAR 0 8
29949: PPUSH
29950: LD_VAR 0 5
29954: PPUSH
29955: LD_VAR 0 6
29959: PPUSH
29960: LD_INT 1
29962: PPUSH
29963: CALL_OW 48
// end ;
29967: LD_VAR 0 7
29971: RET
// export hInvincible ; every 1 do
29972: GO 29974
29974: DISABLE
// hInvincible := [ ] ;
29975: LD_ADDR_EXP 98
29979: PUSH
29980: EMPTY
29981: ST_TO_ADDR
29982: END
// every 10 do var i ;
29983: GO 29985
29985: DISABLE
29986: LD_INT 0
29988: PPUSH
// begin enable ;
29989: ENABLE
// if not hInvincible then
29990: LD_EXP 98
29994: NOT
29995: IFFALSE 29999
// exit ;
29997: GO 30043
// for i in hInvincible do
29999: LD_ADDR_VAR 0 1
30003: PUSH
30004: LD_EXP 98
30008: PUSH
30009: FOR_IN
30010: IFFALSE 30041
// if GetLives ( i ) < 1000 then
30012: LD_VAR 0 1
30016: PPUSH
30017: CALL_OW 256
30021: PUSH
30022: LD_INT 1000
30024: LESS
30025: IFFALSE 30039
// SetLives ( i , 1000 ) ;
30027: LD_VAR 0 1
30031: PPUSH
30032: LD_INT 1000
30034: PPUSH
30035: CALL_OW 234
30039: GO 30009
30041: POP
30042: POP
// end ;
30043: PPOPN 1
30045: END
// export function hHackInvincible ; var i ; begin
30046: LD_INT 0
30048: PPUSH
30049: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
30050: LD_ADDR_VAR 0 2
30054: PUSH
30055: LD_INT 2
30057: PUSH
30058: LD_INT 21
30060: PUSH
30061: LD_INT 1
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 21
30070: PUSH
30071: LD_INT 2
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: LIST
30082: PPUSH
30083: CALL_OW 69
30087: PUSH
30088: FOR_IN
30089: IFFALSE 30150
// if IsSelected ( i ) then
30091: LD_VAR 0 2
30095: PPUSH
30096: CALL_OW 306
30100: IFFALSE 30148
// begin if i in hInvincible then
30102: LD_VAR 0 2
30106: PUSH
30107: LD_EXP 98
30111: IN
30112: IFFALSE 30132
// hInvincible := hInvincible diff i else
30114: LD_ADDR_EXP 98
30118: PUSH
30119: LD_EXP 98
30123: PUSH
30124: LD_VAR 0 2
30128: DIFF
30129: ST_TO_ADDR
30130: GO 30148
// hInvincible := hInvincible union i ;
30132: LD_ADDR_EXP 98
30136: PUSH
30137: LD_EXP 98
30141: PUSH
30142: LD_VAR 0 2
30146: UNION
30147: ST_TO_ADDR
// end ;
30148: GO 30088
30150: POP
30151: POP
// end ;
30152: LD_VAR 0 1
30156: RET
// export function hHackInvisible ; var i , j ; begin
30157: LD_INT 0
30159: PPUSH
30160: PPUSH
30161: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
30162: LD_ADDR_VAR 0 2
30166: PUSH
30167: LD_INT 21
30169: PUSH
30170: LD_INT 1
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PPUSH
30177: CALL_OW 69
30181: PUSH
30182: FOR_IN
30183: IFFALSE 30207
// if IsSelected ( i ) then
30185: LD_VAR 0 2
30189: PPUSH
30190: CALL_OW 306
30194: IFFALSE 30205
// ComForceInvisible ( i ) ;
30196: LD_VAR 0 2
30200: PPUSH
30201: CALL_OW 496
30205: GO 30182
30207: POP
30208: POP
// end ;
30209: LD_VAR 0 1
30213: RET
// export function hHackChangeYourSide ; begin
30214: LD_INT 0
30216: PPUSH
// if your_side = 8 then
30217: LD_OWVAR 2
30221: PUSH
30222: LD_INT 8
30224: EQUAL
30225: IFFALSE 30237
// your_side := 0 else
30227: LD_ADDR_OWVAR 2
30231: PUSH
30232: LD_INT 0
30234: ST_TO_ADDR
30235: GO 30251
// your_side := your_side + 1 ;
30237: LD_ADDR_OWVAR 2
30241: PUSH
30242: LD_OWVAR 2
30246: PUSH
30247: LD_INT 1
30249: PLUS
30250: ST_TO_ADDR
// end ;
30251: LD_VAR 0 1
30255: RET
// export function hHackChangeUnitSide ; var i , j ; begin
30256: LD_INT 0
30258: PPUSH
30259: PPUSH
30260: PPUSH
// for i in all_units do
30261: LD_ADDR_VAR 0 2
30265: PUSH
30266: LD_OWVAR 3
30270: PUSH
30271: FOR_IN
30272: IFFALSE 30350
// if IsSelected ( i ) then
30274: LD_VAR 0 2
30278: PPUSH
30279: CALL_OW 306
30283: IFFALSE 30348
// begin j := GetSide ( i ) ;
30285: LD_ADDR_VAR 0 3
30289: PUSH
30290: LD_VAR 0 2
30294: PPUSH
30295: CALL_OW 255
30299: ST_TO_ADDR
// if j = 8 then
30300: LD_VAR 0 3
30304: PUSH
30305: LD_INT 8
30307: EQUAL
30308: IFFALSE 30320
// j := 0 else
30310: LD_ADDR_VAR 0 3
30314: PUSH
30315: LD_INT 0
30317: ST_TO_ADDR
30318: GO 30334
// j := j + 1 ;
30320: LD_ADDR_VAR 0 3
30324: PUSH
30325: LD_VAR 0 3
30329: PUSH
30330: LD_INT 1
30332: PLUS
30333: ST_TO_ADDR
// SetSide ( i , j ) ;
30334: LD_VAR 0 2
30338: PPUSH
30339: LD_VAR 0 3
30343: PPUSH
30344: CALL_OW 235
// end ;
30348: GO 30271
30350: POP
30351: POP
// end ;
30352: LD_VAR 0 1
30356: RET
// export function hHackFog ; begin
30357: LD_INT 0
30359: PPUSH
// FogOff ( true ) ;
30360: LD_INT 1
30362: PPUSH
30363: CALL_OW 344
// end ;
30367: LD_VAR 0 1
30371: RET
// export function hHackTeleport ( unit , x , y ) ; begin
30372: LD_INT 0
30374: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
30375: LD_VAR 0 1
30379: PPUSH
30380: LD_VAR 0 2
30384: PPUSH
30385: LD_VAR 0 3
30389: PPUSH
30390: LD_INT 1
30392: PPUSH
30393: LD_INT 1
30395: PPUSH
30396: CALL_OW 483
// CenterOnXY ( x , y ) ;
30400: LD_VAR 0 2
30404: PPUSH
30405: LD_VAR 0 3
30409: PPUSH
30410: CALL_OW 84
// end ;
30414: LD_VAR 0 4
30418: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30419: LD_INT 0
30421: PPUSH
30422: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30423: LD_VAR 0 1
30427: NOT
30428: IFTRUE 30447
30430: PUSH
30431: LD_VAR 0 2
30435: PPUSH
30436: LD_VAR 0 3
30440: PPUSH
30441: CALL_OW 488
30445: NOT
30446: OR
30447: IFTRUE 30482
30449: PUSH
30450: LD_VAR 0 1
30454: PPUSH
30455: CALL_OW 266
30459: PUSH
30460: LD_INT 3
30462: NONEQUAL
30463: IFFALSE 30481
30465: PUSH
30466: LD_VAR 0 1
30470: PPUSH
30471: CALL_OW 247
30475: PUSH
30476: LD_INT 1
30478: EQUAL
30479: NOT
30480: AND
30481: OR
30482: IFFALSE 30486
// exit ;
30484: GO 30768
// if GetType ( factory ) = unit_human then
30486: LD_VAR 0 1
30490: PPUSH
30491: CALL_OW 247
30495: PUSH
30496: LD_INT 1
30498: EQUAL
30499: IFFALSE 30516
// factory := IsInUnit ( factory ) ;
30501: LD_ADDR_VAR 0 1
30505: PUSH
30506: LD_VAR 0 1
30510: PPUSH
30511: CALL_OW 310
30515: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30516: LD_VAR 0 1
30520: PPUSH
30521: CALL_OW 266
30525: PUSH
30526: LD_INT 3
30528: NONEQUAL
30529: IFFALSE 30533
// exit ;
30531: GO 30768
// for i := 1 to Count ( factoryWaypoints ) do
30533: LD_ADDR_VAR 0 5
30537: PUSH
30538: DOUBLE
30539: LD_INT 1
30541: DEC
30542: ST_TO_ADDR
30543: LD_EXP 99
30547: PPUSH
30548: CALL 40572 0 1
30552: PUSH
30553: FOR_TO
30554: IFFALSE 30716
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
30556: LD_VAR 0 2
30560: PPUSH
30561: LD_VAR 0 3
30565: PPUSH
30566: CALL_OW 428
30570: PUSH
30571: LD_EXP 99
30575: PUSH
30576: LD_VAR 0 5
30580: ARRAY
30581: PUSH
30582: LD_INT 2
30584: ARRAY
30585: EQUAL
30586: IFFALSE 30618
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
30588: LD_ADDR_EXP 99
30592: PUSH
30593: LD_EXP 99
30597: PPUSH
30598: LD_VAR 0 5
30602: PPUSH
30603: CALL_OW 3
30607: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30608: CALL 30773 0 0
// exit ;
30612: POP
30613: POP
30614: GO 30768
// end else
30616: GO 30714
// if factory = factoryWaypoints [ i ] [ 2 ] then
30618: LD_VAR 0 1
30622: PUSH
30623: LD_EXP 99
30627: PUSH
30628: LD_VAR 0 5
30632: ARRAY
30633: PUSH
30634: LD_INT 2
30636: ARRAY
30637: EQUAL
30638: IFFALSE 30714
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
30640: LD_ADDR_EXP 99
30644: PUSH
30645: LD_EXP 99
30649: PPUSH
30650: LD_VAR 0 5
30654: PPUSH
30655: CALL_OW 3
30659: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
30660: LD_ADDR_EXP 99
30664: PUSH
30665: LD_EXP 99
30669: PPUSH
30670: LD_VAR 0 1
30674: PPUSH
30675: CALL_OW 255
30679: PUSH
30680: LD_VAR 0 1
30684: PUSH
30685: LD_VAR 0 2
30689: PUSH
30690: LD_VAR 0 3
30694: PUSH
30695: EMPTY
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: PPUSH
30701: CALL 76548 0 2
30705: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30706: CALL 30773 0 0
// exit ;
30710: POP
30711: POP
30712: GO 30768
// end ; end ;
30714: GO 30553
30716: POP
30717: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
30718: LD_ADDR_EXP 99
30722: PUSH
30723: LD_EXP 99
30727: PPUSH
30728: LD_VAR 0 1
30732: PPUSH
30733: CALL_OW 255
30737: PUSH
30738: LD_VAR 0 1
30742: PUSH
30743: LD_VAR 0 2
30747: PUSH
30748: LD_VAR 0 3
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: PPUSH
30759: CALL 76548 0 2
30763: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30764: CALL 30773 0 0
// end ;
30768: LD_VAR 0 4
30772: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
30773: LD_INT 0
30775: PPUSH
30776: PPUSH
30777: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30778: LD_STRING resetFactoryWaypoint();
30780: PPUSH
30781: CALL_OW 559
// if factoryWaypoints then
30785: LD_EXP 99
30789: IFFALSE 30910
// begin list := factoryWaypoints ;
30791: LD_ADDR_VAR 0 3
30795: PUSH
30796: LD_EXP 99
30800: ST_TO_ADDR
// for i := 1 to list do
30801: LD_ADDR_VAR 0 2
30805: PUSH
30806: DOUBLE
30807: LD_INT 1
30809: DEC
30810: ST_TO_ADDR
30811: LD_VAR 0 3
30815: PUSH
30816: FOR_TO
30817: IFFALSE 30908
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30819: LD_STRING setFactoryWaypointXY(
30821: PUSH
30822: LD_VAR 0 3
30826: PUSH
30827: LD_VAR 0 2
30831: ARRAY
30832: PUSH
30833: LD_INT 1
30835: ARRAY
30836: STR
30837: PUSH
30838: LD_STRING ,
30840: STR
30841: PUSH
30842: LD_VAR 0 3
30846: PUSH
30847: LD_VAR 0 2
30851: ARRAY
30852: PUSH
30853: LD_INT 2
30855: ARRAY
30856: STR
30857: PUSH
30858: LD_STRING ,
30860: STR
30861: PUSH
30862: LD_VAR 0 3
30866: PUSH
30867: LD_VAR 0 2
30871: ARRAY
30872: PUSH
30873: LD_INT 3
30875: ARRAY
30876: STR
30877: PUSH
30878: LD_STRING ,
30880: STR
30881: PUSH
30882: LD_VAR 0 3
30886: PUSH
30887: LD_VAR 0 2
30891: ARRAY
30892: PUSH
30893: LD_INT 4
30895: ARRAY
30896: STR
30897: PUSH
30898: LD_STRING )
30900: STR
30901: PPUSH
30902: CALL_OW 559
30906: GO 30816
30908: POP
30909: POP
// end ; end ;
30910: LD_VAR 0 1
30914: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
30915: LD_INT 0
30917: PPUSH
// if HexInfo ( x , y ) = warehouse then
30918: LD_VAR 0 2
30922: PPUSH
30923: LD_VAR 0 3
30927: PPUSH
30928: CALL_OW 428
30932: PUSH
30933: LD_VAR 0 1
30937: EQUAL
30938: IFFALSE 30965
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
30940: LD_ADDR_EXP 101
30944: PUSH
30945: LD_EXP 101
30949: PPUSH
30950: LD_VAR 0 1
30954: PPUSH
30955: LD_INT 0
30957: PPUSH
30958: CALL_OW 1
30962: ST_TO_ADDR
30963: GO 31016
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
30965: LD_ADDR_EXP 101
30969: PUSH
30970: LD_EXP 101
30974: PPUSH
30975: LD_VAR 0 1
30979: PPUSH
30980: LD_VAR 0 1
30984: PPUSH
30985: CALL_OW 255
30989: PUSH
30990: LD_VAR 0 1
30994: PUSH
30995: LD_VAR 0 2
30999: PUSH
31000: LD_VAR 0 3
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: LIST
31009: LIST
31010: PPUSH
31011: CALL_OW 1
31015: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
31016: CALL 31025 0 0
// end ;
31020: LD_VAR 0 4
31024: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
31025: LD_INT 0
31027: PPUSH
31028: PPUSH
31029: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
31030: LD_STRING resetWarehouseGatheringPoints();
31032: PPUSH
31033: CALL_OW 559
// if warehouseGatheringPoints then
31037: LD_EXP 101
31041: IFFALSE 31167
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
31043: LD_ADDR_VAR 0 3
31047: PUSH
31048: LD_EXP 101
31052: PPUSH
31053: CALL 80482 0 1
31057: ST_TO_ADDR
// for i := 1 to list do
31058: LD_ADDR_VAR 0 2
31062: PUSH
31063: DOUBLE
31064: LD_INT 1
31066: DEC
31067: ST_TO_ADDR
31068: LD_VAR 0 3
31072: PUSH
31073: FOR_TO
31074: IFFALSE 31165
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
31076: LD_STRING setWarehouseGatheringPointXY(
31078: PUSH
31079: LD_VAR 0 3
31083: PUSH
31084: LD_VAR 0 2
31088: ARRAY
31089: PUSH
31090: LD_INT 1
31092: ARRAY
31093: STR
31094: PUSH
31095: LD_STRING ,
31097: STR
31098: PUSH
31099: LD_VAR 0 3
31103: PUSH
31104: LD_VAR 0 2
31108: ARRAY
31109: PUSH
31110: LD_INT 2
31112: ARRAY
31113: STR
31114: PUSH
31115: LD_STRING ,
31117: STR
31118: PUSH
31119: LD_VAR 0 3
31123: PUSH
31124: LD_VAR 0 2
31128: ARRAY
31129: PUSH
31130: LD_INT 3
31132: ARRAY
31133: STR
31134: PUSH
31135: LD_STRING ,
31137: STR
31138: PUSH
31139: LD_VAR 0 3
31143: PUSH
31144: LD_VAR 0 2
31148: ARRAY
31149: PUSH
31150: LD_INT 4
31152: ARRAY
31153: STR
31154: PUSH
31155: LD_STRING )
31157: STR
31158: PPUSH
31159: CALL_OW 559
31163: GO 31073
31165: POP
31166: POP
// end ; end ;
31167: LD_VAR 0 1
31171: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
31172: LD_EXP 101
31176: IFFALSE 31871
31178: GO 31180
31180: DISABLE
31181: LD_INT 0
31183: PPUSH
31184: PPUSH
31185: PPUSH
31186: PPUSH
31187: PPUSH
31188: PPUSH
31189: PPUSH
31190: PPUSH
31191: PPUSH
// begin enable ;
31192: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
31193: LD_ADDR_VAR 0 3
31197: PUSH
31198: LD_EXP 101
31202: PPUSH
31203: CALL 80482 0 1
31207: ST_TO_ADDR
// if not list then
31208: LD_VAR 0 3
31212: NOT
31213: IFFALSE 31217
// exit ;
31215: GO 31871
// for i := 1 to list do
31217: LD_ADDR_VAR 0 1
31221: PUSH
31222: DOUBLE
31223: LD_INT 1
31225: DEC
31226: ST_TO_ADDR
31227: LD_VAR 0 3
31231: PUSH
31232: FOR_TO
31233: IFFALSE 31869
// begin depot := list [ i ] [ 2 ] ;
31235: LD_ADDR_VAR 0 8
31239: PUSH
31240: LD_VAR 0 3
31244: PUSH
31245: LD_VAR 0 1
31249: ARRAY
31250: PUSH
31251: LD_INT 2
31253: ARRAY
31254: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
31255: LD_ADDR_VAR 0 5
31259: PUSH
31260: LD_VAR 0 3
31264: PUSH
31265: LD_VAR 0 1
31269: ARRAY
31270: PUSH
31271: LD_INT 1
31273: ARRAY
31274: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
31275: LD_VAR 0 8
31279: PPUSH
31280: CALL_OW 301
31284: IFTRUE 31303
31286: PUSH
31287: LD_VAR 0 5
31291: PUSH
31292: LD_VAR 0 8
31296: PPUSH
31297: CALL_OW 255
31301: NONEQUAL
31302: OR
31303: IFFALSE 31332
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
31305: LD_ADDR_EXP 101
31309: PUSH
31310: LD_EXP 101
31314: PPUSH
31315: LD_VAR 0 8
31319: PPUSH
31320: LD_INT 0
31322: PPUSH
31323: CALL_OW 1
31327: ST_TO_ADDR
// exit ;
31328: POP
31329: POP
31330: GO 31871
// end ; x := list [ i ] [ 3 ] ;
31332: LD_ADDR_VAR 0 6
31336: PUSH
31337: LD_VAR 0 3
31341: PUSH
31342: LD_VAR 0 1
31346: ARRAY
31347: PUSH
31348: LD_INT 3
31350: ARRAY
31351: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
31352: LD_ADDR_VAR 0 7
31356: PUSH
31357: LD_VAR 0 3
31361: PUSH
31362: LD_VAR 0 1
31366: ARRAY
31367: PUSH
31368: LD_INT 4
31370: ARRAY
31371: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
31372: LD_ADDR_VAR 0 9
31376: PUSH
31377: LD_VAR 0 6
31381: PPUSH
31382: LD_VAR 0 7
31386: PPUSH
31387: LD_INT 16
31389: PPUSH
31390: CALL 79056 0 3
31394: ST_TO_ADDR
// if not cratesNearbyPoint then
31395: LD_VAR 0 9
31399: NOT
31400: IFFALSE 31406
// exit ;
31402: POP
31403: POP
31404: GO 31871
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
31406: LD_ADDR_VAR 0 4
31410: PUSH
31411: LD_INT 22
31413: PUSH
31414: LD_VAR 0 5
31418: PUSH
31419: EMPTY
31420: LIST
31421: LIST
31422: PUSH
31423: LD_INT 3
31425: PUSH
31426: LD_INT 60
31428: PUSH
31429: EMPTY
31430: LIST
31431: PUSH
31432: EMPTY
31433: LIST
31434: LIST
31435: PUSH
31436: LD_INT 91
31438: PUSH
31439: LD_VAR 0 8
31443: PUSH
31444: LD_INT 6
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: LIST
31451: PUSH
31452: LD_INT 2
31454: PUSH
31455: LD_INT 25
31457: PUSH
31458: LD_INT 2
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: PUSH
31465: LD_INT 25
31467: PUSH
31468: LD_INT 16
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: LIST
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: PPUSH
31486: CALL_OW 69
31490: PUSH
31491: LD_VAR 0 8
31495: PPUSH
31496: CALL_OW 313
31500: PPUSH
31501: LD_INT 3
31503: PUSH
31504: LD_INT 60
31506: PUSH
31507: EMPTY
31508: LIST
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 2
31516: PUSH
31517: LD_INT 25
31519: PUSH
31520: LD_INT 2
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 25
31529: PUSH
31530: LD_INT 16
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: LIST
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PPUSH
31546: CALL_OW 72
31550: UNION
31551: ST_TO_ADDR
// if tmp then
31552: LD_VAR 0 4
31556: IFFALSE 31636
// begin tmp := ShrinkArray ( tmp , 3 ) ;
31558: LD_ADDR_VAR 0 4
31562: PUSH
31563: LD_VAR 0 4
31567: PPUSH
31568: LD_INT 3
31570: PPUSH
31571: CALL 76863 0 2
31575: ST_TO_ADDR
// for j in tmp do
31576: LD_ADDR_VAR 0 2
31580: PUSH
31581: LD_VAR 0 4
31585: PUSH
31586: FOR_IN
31587: IFFALSE 31630
// begin if IsInUnit ( j ) then
31589: LD_VAR 0 2
31593: PPUSH
31594: CALL_OW 310
31598: IFFALSE 31609
// ComExit ( j ) ;
31600: LD_VAR 0 2
31604: PPUSH
31605: CALL 76946 0 1
// AddComCollect ( j , x , y ) ;
31609: LD_VAR 0 2
31613: PPUSH
31614: LD_VAR 0 6
31618: PPUSH
31619: LD_VAR 0 7
31623: PPUSH
31624: CALL_OW 177
// end ;
31628: GO 31586
31630: POP
31631: POP
// exit ;
31632: POP
31633: POP
31634: GO 31871
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
31636: LD_ADDR_VAR 0 4
31640: PUSH
31641: LD_INT 22
31643: PUSH
31644: LD_VAR 0 5
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PUSH
31653: LD_INT 91
31655: PUSH
31656: LD_VAR 0 8
31660: PUSH
31661: LD_INT 8
31663: PUSH
31664: EMPTY
31665: LIST
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 2
31671: PUSH
31672: LD_INT 34
31674: PUSH
31675: LD_INT 12
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: LD_INT 34
31684: PUSH
31685: LD_INT 51
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 34
31694: PUSH
31695: LD_INT 32
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 34
31704: PUSH
31705: LD_INT 89
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: LIST
31716: LIST
31717: LIST
31718: PUSH
31719: EMPTY
31720: LIST
31721: LIST
31722: LIST
31723: PPUSH
31724: CALL_OW 69
31728: ST_TO_ADDR
// if tmp then
31729: LD_VAR 0 4
31733: IFFALSE 31867
// begin for j in tmp do
31735: LD_ADDR_VAR 0 2
31739: PUSH
31740: LD_VAR 0 4
31744: PUSH
31745: FOR_IN
31746: IFFALSE 31865
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
31748: LD_VAR 0 2
31752: PPUSH
31753: CALL_OW 262
31757: PUSH
31758: LD_INT 3
31760: EQUAL
31761: IFTRUE 31778
31763: PUSH
31764: LD_VAR 0 2
31768: PPUSH
31769: CALL_OW 261
31773: PUSH
31774: LD_INT 20
31776: GREATER
31777: OR
31778: IFFALSE 31792
31780: PUSH
31781: LD_VAR 0 2
31785: PPUSH
31786: CALL_OW 314
31790: NOT
31791: AND
31792: IFFALSE 31822
31794: PUSH
31795: LD_VAR 0 2
31799: PPUSH
31800: CALL_OW 263
31804: PUSH
31805: LD_INT 1
31807: NONEQUAL
31808: IFTRUE 31821
31810: PUSH
31811: LD_VAR 0 2
31815: PPUSH
31816: CALL_OW 311
31820: OR
31821: AND
31822: IFFALSE 31863
// begin ComCollect ( j , x , y ) ;
31824: LD_VAR 0 2
31828: PPUSH
31829: LD_VAR 0 6
31833: PPUSH
31834: LD_VAR 0 7
31838: PPUSH
31839: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
31843: LD_VAR 0 2
31847: PPUSH
31848: LD_VAR 0 8
31852: PPUSH
31853: CALL_OW 172
// exit ;
31857: POP
31858: POP
31859: POP
31860: POP
31861: GO 31871
// end ;
31863: GO 31745
31865: POP
31866: POP
// end ; end ;
31867: GO 31232
31869: POP
31870: POP
// end ; end_of_file
31871: PPOPN 9
31873: END
// export function SOS_UnitDestroyed ( un ) ; begin
31874: LD_INT 0
31876: PPUSH
// ComRadiation ( un ) ;
31877: LD_VAR 0 1
31881: PPUSH
31882: CALL 33044 0 1
// end ;
31886: LD_VAR 0 2
31890: RET
// export function SOS_UnitKamikazed ( un ) ; begin
31891: LD_INT 0
31893: PPUSH
// ComRadiation ( un ) ;
31894: LD_VAR 0 1
31898: PPUSH
31899: CALL 33044 0 1
// end ;
31903: LD_VAR 0 2
31907: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31908: LD_INT 0
31910: PPUSH
// end ;
31911: LD_VAR 0 4
31915: RET
// export function SOS_Command ( cmd ) ; begin
31916: LD_INT 0
31918: PPUSH
// end ;
31919: LD_VAR 0 2
31923: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31924: LD_INT 0
31926: PPUSH
// end ;
31927: LD_VAR 0 6
31931: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
31932: LD_INT 0
31934: PPUSH
31935: PPUSH
31936: PPUSH
31937: PPUSH
31938: PPUSH
// if not vehicle or not factory then
31939: LD_VAR 0 1
31943: NOT
31944: IFTRUE 31953
31946: PUSH
31947: LD_VAR 0 2
31951: NOT
31952: OR
31953: IFFALSE 31957
// exit ;
31955: GO 32619
// weapon := GetWeapon ( vehicle ) ;
31957: LD_ADDR_VAR 0 7
31961: PUSH
31962: LD_VAR 0 1
31966: PPUSH
31967: CALL_OW 264
31971: ST_TO_ADDR
// if weapon = ar_miner then
31972: LD_VAR 0 7
31976: PUSH
31977: LD_INT 81
31979: EQUAL
31980: IFFALSE 32037
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
31982: LD_ADDR_EXP 110
31986: PUSH
31987: LD_EXP 110
31991: PPUSH
31992: LD_EXP 110
31996: PUSH
31997: LD_INT 1
31999: PLUS
32000: PPUSH
32001: LD_VAR 0 1
32005: PPUSH
32006: CALL_OW 1
32010: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
32011: LD_ADDR_EXP 111
32015: PUSH
32016: LD_EXP 111
32020: PPUSH
32021: LD_EXP 111
32025: PUSH
32026: LD_INT 1
32028: PLUS
32029: PPUSH
32030: EMPTY
32031: PPUSH
32032: CALL_OW 1
32036: ST_TO_ADDR
// end ; if not factoryWaypoints then
32037: LD_EXP 99
32041: NOT
32042: IFFALSE 32046
// exit ;
32044: GO 32619
// for i := 1 to Count ( factoryWaypoints ) do
32046: LD_ADDR_VAR 0 4
32050: PUSH
32051: DOUBLE
32052: LD_INT 1
32054: DEC
32055: ST_TO_ADDR
32056: LD_EXP 99
32060: PPUSH
32061: CALL 40572 0 1
32065: PUSH
32066: FOR_TO
32067: IFFALSE 32617
// if factoryWaypoints [ i ] [ 2 ] = factory then
32069: LD_EXP 99
32073: PUSH
32074: LD_VAR 0 4
32078: ARRAY
32079: PUSH
32080: LD_INT 2
32082: ARRAY
32083: PUSH
32084: LD_VAR 0 2
32088: EQUAL
32089: IFFALSE 32615
// begin if GetControl ( vehicle ) = control_manual then
32091: LD_VAR 0 1
32095: PPUSH
32096: CALL_OW 263
32100: PUSH
32101: LD_INT 1
32103: EQUAL
32104: IFFALSE 32468
// begin driver := IsDrivenBy ( vehicle ) ;
32106: LD_ADDR_VAR 0 5
32110: PUSH
32111: LD_VAR 0 1
32115: PPUSH
32116: CALL_OW 311
32120: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
32121: LD_VAR 0 5
32125: PUSH
32126: LD_EXP 100
32130: IN
32131: IFTRUE 32145
32133: PUSH
32134: LD_VAR 0 1
32138: PUSH
32139: LD_EXP 100
32143: IN
32144: OR
32145: IFFALSE 32151
// exit ;
32147: POP
32148: POP
32149: GO 32619
// if not HasTask ( driver ) then
32151: LD_VAR 0 5
32155: PPUSH
32156: CALL_OW 314
32160: NOT
32161: IFFALSE 32466
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
32163: LD_ADDR_EXP 100
32167: PUSH
32168: LD_EXP 100
32172: PPUSH
32173: LD_VAR 0 5
32177: PPUSH
32178: CALL 76548 0 2
32182: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
32183: LD_ADDR_EXP 100
32187: PUSH
32188: LD_EXP 100
32192: PPUSH
32193: LD_VAR 0 1
32197: PPUSH
32198: CALL 76548 0 2
32202: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
32203: LD_ADDR_VAR 0 6
32207: PUSH
32208: LD_EXP 99
32212: PUSH
32213: LD_VAR 0 4
32217: ARRAY
32218: PUSH
32219: LD_INT 3
32221: ARRAY
32222: PPUSH
32223: LD_EXP 99
32227: PUSH
32228: LD_VAR 0 4
32232: ARRAY
32233: PUSH
32234: LD_INT 4
32236: ARRAY
32237: PPUSH
32238: CALL_OW 428
32242: ST_TO_ADDR
// if hex then
32243: LD_VAR 0 6
32247: IFFALSE 32265
// ComMoveUnit ( driver , hex ) else
32249: LD_VAR 0 5
32253: PPUSH
32254: LD_VAR 0 6
32258: PPUSH
32259: CALL_OW 112
32263: GO 32349
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
32265: LD_VAR 0 1
32269: PPUSH
32270: LD_EXP 99
32274: PUSH
32275: LD_VAR 0 4
32279: ARRAY
32280: PUSH
32281: LD_INT 3
32283: ARRAY
32284: PPUSH
32285: LD_EXP 99
32289: PUSH
32290: LD_VAR 0 4
32294: ARRAY
32295: PUSH
32296: LD_INT 4
32298: ARRAY
32299: PPUSH
32300: CALL_OW 297
32304: PUSH
32305: LD_INT 0
32307: GREATER
32308: IFFALSE 32349
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
32310: LD_VAR 0 5
32314: PPUSH
32315: LD_EXP 99
32319: PUSH
32320: LD_VAR 0 4
32324: ARRAY
32325: PUSH
32326: LD_INT 3
32328: ARRAY
32329: PPUSH
32330: LD_EXP 99
32334: PUSH
32335: LD_VAR 0 4
32339: ARRAY
32340: PUSH
32341: LD_INT 4
32343: ARRAY
32344: PPUSH
32345: CALL_OW 111
// AddComExitVehicle ( driver ) ;
32349: LD_VAR 0 5
32353: PPUSH
32354: CALL_OW 181
// if Multiplayer then
32358: LD_OWVAR 4
32362: IFFALSE 32411
// begin repeat wait ( 10 ) ;
32364: LD_INT 10
32366: PPUSH
32367: CALL_OW 67
// until not IsInUnit ( driver ) ;
32371: LD_VAR 0 5
32375: PPUSH
32376: CALL_OW 310
32380: NOT
32381: IFFALSE 32364
// if not HasTask ( driver ) then
32383: LD_VAR 0 5
32387: PPUSH
32388: CALL_OW 314
32392: NOT
32393: IFFALSE 32409
// ComEnterUnit ( driver , factory ) ;
32395: LD_VAR 0 5
32399: PPUSH
32400: LD_VAR 0 2
32404: PPUSH
32405: CALL_OW 120
// end else
32409: GO 32425
// AddComEnterUnit ( driver , factory ) ;
32411: LD_VAR 0 5
32415: PPUSH
32416: LD_VAR 0 2
32420: PPUSH
32421: CALL_OW 180
// wait ( 0 0$1 ) ;
32425: LD_INT 35
32427: PPUSH
32428: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
32432: LD_ADDR_EXP 100
32436: PUSH
32437: LD_EXP 100
32441: PUSH
32442: LD_VAR 0 5
32446: DIFF
32447: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
32448: LD_ADDR_EXP 100
32452: PUSH
32453: LD_EXP 100
32457: PUSH
32458: LD_VAR 0 1
32462: DIFF
32463: ST_TO_ADDR
// break ;
32464: GO 32617
// end ; end else
32466: GO 32615
// if GetControl ( vehicle ) = control_remote then
32468: LD_VAR 0 1
32472: PPUSH
32473: CALL_OW 263
32477: PUSH
32478: LD_INT 2
32480: EQUAL
32481: IFFALSE 32567
// begin wait ( 0 0$2 ) ;
32483: LD_INT 70
32485: PPUSH
32486: CALL_OW 67
// repeat wait ( 10 ) ;
32490: LD_INT 10
32492: PPUSH
32493: CALL_OW 67
// Connect ( vehicle ) ;
32497: LD_VAR 0 1
32501: PPUSH
32502: CALL 46850 0 1
// until IsControledBy ( vehicle ) ;
32506: LD_VAR 0 1
32510: PPUSH
32511: CALL_OW 312
32515: IFFALSE 32490
// wait ( 10 ) ;
32517: LD_INT 10
32519: PPUSH
32520: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
32524: LD_VAR 0 1
32528: PPUSH
32529: LD_EXP 99
32533: PUSH
32534: LD_VAR 0 4
32538: ARRAY
32539: PUSH
32540: LD_INT 3
32542: ARRAY
32543: PPUSH
32544: LD_EXP 99
32548: PUSH
32549: LD_VAR 0 4
32553: ARRAY
32554: PUSH
32555: LD_INT 4
32557: ARRAY
32558: PPUSH
32559: CALL_OW 111
// break ;
32563: GO 32617
// end else
32565: GO 32615
// begin wait ( 0 0$3 ) ;
32567: LD_INT 105
32569: PPUSH
32570: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
32574: LD_VAR 0 1
32578: PPUSH
32579: LD_EXP 99
32583: PUSH
32584: LD_VAR 0 4
32588: ARRAY
32589: PUSH
32590: LD_INT 3
32592: ARRAY
32593: PPUSH
32594: LD_EXP 99
32598: PUSH
32599: LD_VAR 0 4
32603: ARRAY
32604: PUSH
32605: LD_INT 4
32607: ARRAY
32608: PPUSH
32609: CALL_OW 111
// break ;
32613: GO 32617
// end ; end ;
32615: GO 32066
32617: POP
32618: POP
// end ;
32619: LD_VAR 0 3
32623: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
32624: LD_INT 0
32626: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
32627: LD_VAR 0 1
32631: PUSH
32632: LD_INT 250
32634: EQUAL
32635: IFFALSE 32652
32637: PUSH
32638: LD_VAR 0 2
32642: PPUSH
32643: CALL_OW 264
32647: PUSH
32648: LD_INT 81
32650: EQUAL
32651: AND
32652: IFFALSE 32673
// MinerPlaceMine ( unit , x , y ) ;
32654: LD_VAR 0 2
32658: PPUSH
32659: LD_VAR 0 4
32663: PPUSH
32664: LD_VAR 0 5
32668: PPUSH
32669: CALL 36019 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
32673: LD_VAR 0 1
32677: PUSH
32678: LD_INT 251
32680: EQUAL
32681: IFFALSE 32698
32683: PUSH
32684: LD_VAR 0 2
32688: PPUSH
32689: CALL_OW 264
32693: PUSH
32694: LD_INT 81
32696: EQUAL
32697: AND
32698: IFFALSE 32719
// MinerDetonateMine ( unit , x , y ) ;
32700: LD_VAR 0 2
32704: PPUSH
32705: LD_VAR 0 4
32709: PPUSH
32710: LD_VAR 0 5
32714: PPUSH
32715: CALL 36426 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
32719: LD_VAR 0 1
32723: PUSH
32724: LD_INT 252
32726: EQUAL
32727: IFFALSE 32744
32729: PUSH
32730: LD_VAR 0 2
32734: PPUSH
32735: CALL_OW 264
32739: PUSH
32740: LD_INT 81
32742: EQUAL
32743: AND
32744: IFFALSE 32765
// MinerCreateMinefield ( unit , x , y ) ;
32746: LD_VAR 0 2
32750: PPUSH
32751: LD_VAR 0 4
32755: PPUSH
32756: LD_VAR 0 5
32760: PPUSH
32761: CALL 36658 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
32765: LD_VAR 0 1
32769: PUSH
32770: LD_INT 253
32772: EQUAL
32773: IFFALSE 32790
32775: PUSH
32776: LD_VAR 0 2
32780: PPUSH
32781: CALL_OW 257
32785: PUSH
32786: LD_INT 5
32788: EQUAL
32789: AND
32790: IFFALSE 32811
// ComBinocular ( unit , x , y ) ;
32792: LD_VAR 0 2
32796: PPUSH
32797: LD_VAR 0 4
32801: PPUSH
32802: LD_VAR 0 5
32806: PPUSH
32807: CALL 37033 0 3
// if selectedUnit then
32811: LD_VAR 0 3
32815: IFFALSE 32875
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
32817: LD_VAR 0 1
32821: PUSH
32822: LD_INT 254
32824: EQUAL
32825: IFFALSE 32842
32827: PUSH
32828: LD_VAR 0 2
32832: PPUSH
32833: CALL_OW 264
32837: PUSH
32838: LD_INT 99
32840: EQUAL
32841: AND
32842: IFFALSE 32859
32844: PUSH
32845: LD_VAR 0 3
32849: PPUSH
32850: CALL_OW 263
32854: PUSH
32855: LD_INT 3
32857: EQUAL
32858: AND
32859: IFFALSE 32875
// HackDestroyVehicle ( unit , selectedUnit ) ;
32861: LD_VAR 0 2
32865: PPUSH
32866: LD_VAR 0 3
32870: PPUSH
32871: CALL 35209 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
32875: LD_VAR 0 1
32879: PUSH
32880: LD_INT 255
32882: EQUAL
32883: IFFALSE 32907
32885: PUSH
32886: LD_VAR 0 2
32890: PPUSH
32891: CALL_OW 264
32895: PUSH
32896: LD_INT 14
32898: PUSH
32899: LD_INT 53
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: IN
32906: AND
32907: IFFALSE 32925
32909: PUSH
32910: LD_VAR 0 4
32914: PPUSH
32915: LD_VAR 0 5
32919: PPUSH
32920: CALL_OW 488
32924: AND
32925: IFFALSE 32949
// CutTreeXYR ( unit , x , y , 12 ) ;
32927: LD_VAR 0 2
32931: PPUSH
32932: LD_VAR 0 4
32936: PPUSH
32937: LD_VAR 0 5
32941: PPUSH
32942: LD_INT 12
32944: PPUSH
32945: CALL 33140 0 4
// if cmd = 256 then
32949: LD_VAR 0 1
32953: PUSH
32954: LD_INT 256
32956: EQUAL
32957: IFFALSE 32978
// SetFactoryWaypoint ( unit , x , y ) ;
32959: LD_VAR 0 2
32963: PPUSH
32964: LD_VAR 0 4
32968: PPUSH
32969: LD_VAR 0 5
32973: PPUSH
32974: CALL 30419 0 3
// if cmd = 257 then
32978: LD_VAR 0 1
32982: PUSH
32983: LD_INT 257
32985: EQUAL
32986: IFFALSE 33007
// SetWarehouseGatheringPoint ( unit , x , y ) ;
32988: LD_VAR 0 2
32992: PPUSH
32993: LD_VAR 0 4
32997: PPUSH
32998: LD_VAR 0 5
33002: PPUSH
33003: CALL 30915 0 3
// if cmd = 258 then
33007: LD_VAR 0 1
33011: PUSH
33012: LD_INT 258
33014: EQUAL
33015: IFFALSE 33039
// BurnTreeXYR ( unit , x , y , 8 ) ;
33017: LD_VAR 0 2
33021: PPUSH
33022: LD_VAR 0 4
33026: PPUSH
33027: LD_VAR 0 5
33031: PPUSH
33032: LD_INT 8
33034: PPUSH
33035: CALL 33562 0 4
// end ;
33039: LD_VAR 0 6
33043: RET
// export function ComRadiation ( un ) ; var eff ; begin
33044: LD_INT 0
33046: PPUSH
33047: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
33048: LD_VAR 0 1
33052: PPUSH
33053: CALL_OW 264
33057: PUSH
33058: LD_INT 91
33060: NONEQUAL
33061: IFFALSE 33065
// exit ;
33063: GO 33135
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33065: LD_INT 68
33067: PPUSH
33068: LD_VAR 0 1
33072: PPUSH
33073: CALL_OW 255
33077: PPUSH
33078: CALL_OW 321
33082: PUSH
33083: LD_INT 2
33085: EQUAL
33086: IFFALSE 33098
// eff := 50 else
33088: LD_ADDR_VAR 0 3
33092: PUSH
33093: LD_INT 50
33095: ST_TO_ADDR
33096: GO 33106
// eff := 25 ;
33098: LD_ADDR_VAR 0 3
33102: PUSH
33103: LD_INT 25
33105: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33106: LD_VAR 0 1
33110: PPUSH
33111: CALL_OW 250
33115: PPUSH
33116: LD_VAR 0 1
33120: PPUSH
33121: CALL_OW 251
33125: PPUSH
33126: LD_VAR 0 3
33130: PPUSH
33131: CALL_OW 495
// end ;
33135: LD_VAR 0 2
33139: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
33140: LD_INT 0
33142: PPUSH
33143: PPUSH
33144: PPUSH
33145: PPUSH
33146: PPUSH
33147: PPUSH
33148: PPUSH
33149: PPUSH
33150: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
33151: LD_VAR 0 1
33155: PPUSH
33156: CALL_OW 302
33160: NOT
33161: IFTRUE 33180
33163: PUSH
33164: LD_VAR 0 2
33168: PPUSH
33169: LD_VAR 0 3
33173: PPUSH
33174: CALL_OW 488
33178: NOT
33179: OR
33180: IFTRUE 33189
33182: PUSH
33183: LD_VAR 0 4
33187: NOT
33188: OR
33189: IFFALSE 33193
// exit ;
33191: GO 33557
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
33193: LD_VAR 0 1
33197: PPUSH
33198: CALL_OW 437
33202: PPUSH
33203: CALL 40572 0 1
33207: PUSH
33208: LD_INT 10
33210: GREATER
33211: IFFALSE 33215
// exit ;
33213: GO 33557
// list := [ ] ;
33215: LD_ADDR_VAR 0 13
33219: PUSH
33220: EMPTY
33221: ST_TO_ADDR
// if x - r < 0 then
33222: LD_VAR 0 2
33226: PUSH
33227: LD_VAR 0 4
33231: MINUS
33232: PUSH
33233: LD_INT 0
33235: LESS
33236: IFFALSE 33248
// min_x := 0 else
33238: LD_ADDR_VAR 0 7
33242: PUSH
33243: LD_INT 0
33245: ST_TO_ADDR
33246: GO 33264
// min_x := x - r ;
33248: LD_ADDR_VAR 0 7
33252: PUSH
33253: LD_VAR 0 2
33257: PUSH
33258: LD_VAR 0 4
33262: MINUS
33263: ST_TO_ADDR
// if y - r < 0 then
33264: LD_VAR 0 3
33268: PUSH
33269: LD_VAR 0 4
33273: MINUS
33274: PUSH
33275: LD_INT 0
33277: LESS
33278: IFFALSE 33290
// min_y := 0 else
33280: LD_ADDR_VAR 0 8
33284: PUSH
33285: LD_INT 0
33287: ST_TO_ADDR
33288: GO 33306
// min_y := y - r ;
33290: LD_ADDR_VAR 0 8
33294: PUSH
33295: LD_VAR 0 3
33299: PUSH
33300: LD_VAR 0 4
33304: MINUS
33305: ST_TO_ADDR
// max_x := x + r ;
33306: LD_ADDR_VAR 0 9
33310: PUSH
33311: LD_VAR 0 2
33315: PUSH
33316: LD_VAR 0 4
33320: PLUS
33321: ST_TO_ADDR
// max_y := y + r ;
33322: LD_ADDR_VAR 0 10
33326: PUSH
33327: LD_VAR 0 3
33331: PUSH
33332: LD_VAR 0 4
33336: PLUS
33337: ST_TO_ADDR
// for _x = min_x to max_x do
33338: LD_ADDR_VAR 0 11
33342: PUSH
33343: DOUBLE
33344: LD_VAR 0 7
33348: DEC
33349: ST_TO_ADDR
33350: LD_VAR 0 9
33354: PUSH
33355: FOR_TO
33356: IFFALSE 33475
// for _y = min_y to max_y do
33358: LD_ADDR_VAR 0 12
33362: PUSH
33363: DOUBLE
33364: LD_VAR 0 8
33368: DEC
33369: ST_TO_ADDR
33370: LD_VAR 0 10
33374: PUSH
33375: FOR_TO
33376: IFFALSE 33471
// begin if not ValidHex ( _x , _y ) then
33378: LD_VAR 0 11
33382: PPUSH
33383: LD_VAR 0 12
33387: PPUSH
33388: CALL_OW 488
33392: NOT
33393: IFFALSE 33397
// continue ;
33395: GO 33375
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33397: LD_VAR 0 11
33401: PPUSH
33402: LD_VAR 0 12
33406: PPUSH
33407: CALL_OW 351
33411: IFFALSE 33429
33413: PUSH
33414: LD_VAR 0 11
33418: PPUSH
33419: LD_VAR 0 12
33423: PPUSH
33424: CALL_OW 554
33428: AND
33429: IFFALSE 33469
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33431: LD_ADDR_VAR 0 13
33435: PUSH
33436: LD_VAR 0 13
33440: PPUSH
33441: LD_VAR 0 13
33445: PUSH
33446: LD_INT 1
33448: PLUS
33449: PPUSH
33450: LD_VAR 0 11
33454: PUSH
33455: LD_VAR 0 12
33459: PUSH
33460: EMPTY
33461: LIST
33462: LIST
33463: PPUSH
33464: CALL_OW 2
33468: ST_TO_ADDR
// end ;
33469: GO 33375
33471: POP
33472: POP
33473: GO 33355
33475: POP
33476: POP
// if not list then
33477: LD_VAR 0 13
33481: NOT
33482: IFFALSE 33486
// exit ;
33484: GO 33557
// for i in list do
33486: LD_ADDR_VAR 0 6
33490: PUSH
33491: LD_VAR 0 13
33495: PUSH
33496: FOR_IN
33497: IFFALSE 33555
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
33499: LD_VAR 0 1
33503: PPUSH
33504: LD_STRING M
33506: PUSH
33507: LD_VAR 0 6
33511: PUSH
33512: LD_INT 1
33514: ARRAY
33515: PUSH
33516: LD_VAR 0 6
33520: PUSH
33521: LD_INT 2
33523: ARRAY
33524: PUSH
33525: LD_INT 0
33527: PUSH
33528: LD_INT 0
33530: PUSH
33531: LD_INT 0
33533: PUSH
33534: LD_INT 0
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: PUSH
33546: EMPTY
33547: LIST
33548: PPUSH
33549: CALL_OW 447
33553: GO 33496
33555: POP
33556: POP
// end ;
33557: LD_VAR 0 5
33561: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
33562: LD_INT 0
33564: PPUSH
33565: PPUSH
33566: PPUSH
33567: PPUSH
33568: PPUSH
33569: PPUSH
33570: PPUSH
33571: PPUSH
33572: PPUSH
33573: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
33574: LD_VAR 0 1
33578: PPUSH
33579: CALL_OW 302
33583: NOT
33584: IFTRUE 33603
33586: PUSH
33587: LD_VAR 0 2
33591: PPUSH
33592: LD_VAR 0 3
33596: PPUSH
33597: CALL_OW 488
33601: NOT
33602: OR
33603: IFTRUE 33612
33605: PUSH
33606: LD_VAR 0 4
33610: NOT
33611: OR
33612: IFFALSE 33616
// exit ;
33614: GO 34155
// if Count ( GetTaskList ( flame ) ) > 10 then
33616: LD_VAR 0 1
33620: PPUSH
33621: CALL_OW 437
33625: PPUSH
33626: CALL 40572 0 1
33630: PUSH
33631: LD_INT 10
33633: GREATER
33634: IFFALSE 33638
// exit ;
33636: GO 34155
// list := [ ] ;
33638: LD_ADDR_VAR 0 13
33642: PUSH
33643: EMPTY
33644: ST_TO_ADDR
// if x - r < 0 then
33645: LD_VAR 0 2
33649: PUSH
33650: LD_VAR 0 4
33654: MINUS
33655: PUSH
33656: LD_INT 0
33658: LESS
33659: IFFALSE 33671
// min_x := 0 else
33661: LD_ADDR_VAR 0 7
33665: PUSH
33666: LD_INT 0
33668: ST_TO_ADDR
33669: GO 33687
// min_x := x - r ;
33671: LD_ADDR_VAR 0 7
33675: PUSH
33676: LD_VAR 0 2
33680: PUSH
33681: LD_VAR 0 4
33685: MINUS
33686: ST_TO_ADDR
// if y - r < 0 then
33687: LD_VAR 0 3
33691: PUSH
33692: LD_VAR 0 4
33696: MINUS
33697: PUSH
33698: LD_INT 0
33700: LESS
33701: IFFALSE 33713
// min_y := 0 else
33703: LD_ADDR_VAR 0 8
33707: PUSH
33708: LD_INT 0
33710: ST_TO_ADDR
33711: GO 33729
// min_y := y - r ;
33713: LD_ADDR_VAR 0 8
33717: PUSH
33718: LD_VAR 0 3
33722: PUSH
33723: LD_VAR 0 4
33727: MINUS
33728: ST_TO_ADDR
// max_x := x + r ;
33729: LD_ADDR_VAR 0 9
33733: PUSH
33734: LD_VAR 0 2
33738: PUSH
33739: LD_VAR 0 4
33743: PLUS
33744: ST_TO_ADDR
// max_y := y + r ;
33745: LD_ADDR_VAR 0 10
33749: PUSH
33750: LD_VAR 0 3
33754: PUSH
33755: LD_VAR 0 4
33759: PLUS
33760: ST_TO_ADDR
// for _x = min_x to max_x do
33761: LD_ADDR_VAR 0 11
33765: PUSH
33766: DOUBLE
33767: LD_VAR 0 7
33771: DEC
33772: ST_TO_ADDR
33773: LD_VAR 0 9
33777: PUSH
33778: FOR_TO
33779: IFFALSE 33898
// for _y = min_y to max_y do
33781: LD_ADDR_VAR 0 12
33785: PUSH
33786: DOUBLE
33787: LD_VAR 0 8
33791: DEC
33792: ST_TO_ADDR
33793: LD_VAR 0 10
33797: PUSH
33798: FOR_TO
33799: IFFALSE 33894
// begin if not ValidHex ( _x , _y ) then
33801: LD_VAR 0 11
33805: PPUSH
33806: LD_VAR 0 12
33810: PPUSH
33811: CALL_OW 488
33815: NOT
33816: IFFALSE 33820
// continue ;
33818: GO 33798
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
33820: LD_VAR 0 11
33824: PPUSH
33825: LD_VAR 0 12
33829: PPUSH
33830: CALL_OW 351
33834: IFFALSE 33852
33836: PUSH
33837: LD_VAR 0 11
33841: PPUSH
33842: LD_VAR 0 12
33846: PPUSH
33847: CALL_OW 554
33851: AND
33852: IFFALSE 33892
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
33854: LD_ADDR_VAR 0 13
33858: PUSH
33859: LD_VAR 0 13
33863: PPUSH
33864: LD_VAR 0 13
33868: PUSH
33869: LD_INT 1
33871: PLUS
33872: PPUSH
33873: LD_VAR 0 11
33877: PUSH
33878: LD_VAR 0 12
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PPUSH
33887: CALL_OW 2
33891: ST_TO_ADDR
// end ;
33892: GO 33798
33894: POP
33895: POP
33896: GO 33778
33898: POP
33899: POP
// if not list then
33900: LD_VAR 0 13
33904: NOT
33905: IFFALSE 33909
// exit ;
33907: GO 34155
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
33909: LD_ADDR_VAR 0 13
33913: PUSH
33914: LD_VAR 0 1
33918: PPUSH
33919: LD_VAR 0 13
33923: PPUSH
33924: LD_INT 1
33926: PPUSH
33927: LD_INT 1
33929: PPUSH
33930: CALL 43978 0 4
33934: ST_TO_ADDR
// ComStop ( flame ) ;
33935: LD_VAR 0 1
33939: PPUSH
33940: CALL_OW 141
// for i in list do
33944: LD_ADDR_VAR 0 6
33948: PUSH
33949: LD_VAR 0 13
33953: PUSH
33954: FOR_IN
33955: IFFALSE 33986
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
33957: LD_VAR 0 1
33961: PPUSH
33962: LD_VAR 0 6
33966: PUSH
33967: LD_INT 1
33969: ARRAY
33970: PPUSH
33971: LD_VAR 0 6
33975: PUSH
33976: LD_INT 2
33978: ARRAY
33979: PPUSH
33980: CALL_OW 176
33984: GO 33954
33986: POP
33987: POP
// repeat wait ( 0 0$1 ) ;
33988: LD_INT 35
33990: PPUSH
33991: CALL_OW 67
// task := GetTaskList ( flame ) ;
33995: LD_ADDR_VAR 0 14
33999: PUSH
34000: LD_VAR 0 1
34004: PPUSH
34005: CALL_OW 437
34009: ST_TO_ADDR
// if not task then
34010: LD_VAR 0 14
34014: NOT
34015: IFFALSE 34019
// exit ;
34017: GO 34155
// if task [ 1 ] [ 1 ] <> | then
34019: LD_VAR 0 14
34023: PUSH
34024: LD_INT 1
34026: ARRAY
34027: PUSH
34028: LD_INT 1
34030: ARRAY
34031: PUSH
34032: LD_STRING |
34034: NONEQUAL
34035: IFFALSE 34039
// exit ;
34037: GO 34155
// _x := task [ 1 ] [ 2 ] ;
34039: LD_ADDR_VAR 0 11
34043: PUSH
34044: LD_VAR 0 14
34048: PUSH
34049: LD_INT 1
34051: ARRAY
34052: PUSH
34053: LD_INT 2
34055: ARRAY
34056: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
34057: LD_ADDR_VAR 0 12
34061: PUSH
34062: LD_VAR 0 14
34066: PUSH
34067: LD_INT 1
34069: ARRAY
34070: PUSH
34071: LD_INT 3
34073: ARRAY
34074: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
34075: LD_VAR 0 11
34079: PPUSH
34080: LD_VAR 0 12
34084: PPUSH
34085: CALL_OW 351
34089: NOT
34090: IFTRUE 34109
34092: PUSH
34093: LD_VAR 0 11
34097: PPUSH
34098: LD_VAR 0 12
34102: PPUSH
34103: CALL_OW 554
34107: NOT
34108: OR
34109: IFFALSE 34143
// begin task := Delete ( task , 1 ) ;
34111: LD_ADDR_VAR 0 14
34115: PUSH
34116: LD_VAR 0 14
34120: PPUSH
34121: LD_INT 1
34123: PPUSH
34124: CALL_OW 3
34128: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
34129: LD_VAR 0 1
34133: PPUSH
34134: LD_VAR 0 14
34138: PPUSH
34139: CALL_OW 446
// end ; until not HasTask ( flame ) ;
34143: LD_VAR 0 1
34147: PPUSH
34148: CALL_OW 314
34152: NOT
34153: IFFALSE 33988
// end ;
34155: LD_VAR 0 5
34159: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34160: LD_EXP 103
34164: NOT
34165: IFFALSE 34215
34167: GO 34169
34169: DISABLE
// begin initHack := true ;
34170: LD_ADDR_EXP 103
34174: PUSH
34175: LD_INT 1
34177: ST_TO_ADDR
// hackTanks := [ ] ;
34178: LD_ADDR_EXP 104
34182: PUSH
34183: EMPTY
34184: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34185: LD_ADDR_EXP 105
34189: PUSH
34190: EMPTY
34191: ST_TO_ADDR
// hackLimit := 3 ;
34192: LD_ADDR_EXP 106
34196: PUSH
34197: LD_INT 3
34199: ST_TO_ADDR
// hackDist := 12 ;
34200: LD_ADDR_EXP 107
34204: PUSH
34205: LD_INT 12
34207: ST_TO_ADDR
// hackCounter := [ ] ;
34208: LD_ADDR_EXP 108
34212: PUSH
34213: EMPTY
34214: ST_TO_ADDR
// end ;
34215: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34216: LD_EXP 103
34220: IFFALSE 34238
34222: PUSH
34223: LD_INT 34
34225: PUSH
34226: LD_INT 99
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PPUSH
34233: CALL_OW 69
34237: AND
34238: IFFALSE 34491
34240: GO 34242
34242: DISABLE
34243: LD_INT 0
34245: PPUSH
34246: PPUSH
// begin enable ;
34247: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34248: LD_ADDR_VAR 0 1
34252: PUSH
34253: LD_INT 34
34255: PUSH
34256: LD_INT 99
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: PPUSH
34263: CALL_OW 69
34267: PUSH
34268: FOR_IN
34269: IFFALSE 34489
// begin if not i in hackTanks then
34271: LD_VAR 0 1
34275: PUSH
34276: LD_EXP 104
34280: IN
34281: NOT
34282: IFFALSE 34365
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34284: LD_ADDR_EXP 104
34288: PUSH
34289: LD_EXP 104
34293: PPUSH
34294: LD_EXP 104
34298: PUSH
34299: LD_INT 1
34301: PLUS
34302: PPUSH
34303: LD_VAR 0 1
34307: PPUSH
34308: CALL_OW 1
34312: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34313: LD_ADDR_EXP 105
34317: PUSH
34318: LD_EXP 105
34322: PPUSH
34323: LD_EXP 105
34327: PUSH
34328: LD_INT 1
34330: PLUS
34331: PPUSH
34332: EMPTY
34333: PPUSH
34334: CALL_OW 1
34338: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34339: LD_ADDR_EXP 108
34343: PUSH
34344: LD_EXP 108
34348: PPUSH
34349: LD_EXP 108
34353: PUSH
34354: LD_INT 1
34356: PLUS
34357: PPUSH
34358: EMPTY
34359: PPUSH
34360: CALL_OW 1
34364: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34365: LD_VAR 0 1
34369: PPUSH
34370: CALL_OW 302
34374: NOT
34375: IFFALSE 34388
// begin HackUnlinkAll ( i ) ;
34377: LD_VAR 0 1
34381: PPUSH
34382: CALL 34494 0 1
// continue ;
34386: GO 34268
// end ; HackCheckCapturedStatus ( i ) ;
34388: LD_VAR 0 1
34392: PPUSH
34393: CALL 34939 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34397: LD_ADDR_VAR 0 2
34401: PUSH
34402: LD_INT 81
34404: PUSH
34405: LD_VAR 0 1
34409: PPUSH
34410: CALL_OW 255
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 33
34421: PUSH
34422: LD_INT 3
34424: PUSH
34425: EMPTY
34426: LIST
34427: LIST
34428: PUSH
34429: LD_INT 91
34431: PUSH
34432: LD_VAR 0 1
34436: PUSH
34437: LD_EXP 107
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 50
34449: PUSH
34450: EMPTY
34451: LIST
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: PPUSH
34459: CALL_OW 69
34463: ST_TO_ADDR
// if not tmp then
34464: LD_VAR 0 2
34468: NOT
34469: IFFALSE 34473
// continue ;
34471: GO 34268
// HackLink ( i , tmp ) ;
34473: LD_VAR 0 1
34477: PPUSH
34478: LD_VAR 0 2
34482: PPUSH
34483: CALL 34630 0 2
// end ;
34487: GO 34268
34489: POP
34490: POP
// end ;
34491: PPOPN 2
34493: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34494: LD_INT 0
34496: PPUSH
34497: PPUSH
34498: PPUSH
// if not hack in hackTanks then
34499: LD_VAR 0 1
34503: PUSH
34504: LD_EXP 104
34508: IN
34509: NOT
34510: IFFALSE 34514
// exit ;
34512: GO 34625
// index := GetElementIndex ( hackTanks , hack ) ;
34514: LD_ADDR_VAR 0 4
34518: PUSH
34519: LD_EXP 104
34523: PPUSH
34524: LD_VAR 0 1
34528: PPUSH
34529: CALL 43273 0 2
34533: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34534: LD_EXP 105
34538: PUSH
34539: LD_VAR 0 4
34543: ARRAY
34544: IFFALSE 34625
// begin for i in hackTanksCaptured [ index ] do
34546: LD_ADDR_VAR 0 3
34550: PUSH
34551: LD_EXP 105
34555: PUSH
34556: LD_VAR 0 4
34560: ARRAY
34561: PUSH
34562: FOR_IN
34563: IFFALSE 34589
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34565: LD_VAR 0 3
34569: PUSH
34570: LD_INT 1
34572: ARRAY
34573: PPUSH
34574: LD_VAR 0 3
34578: PUSH
34579: LD_INT 2
34581: ARRAY
34582: PPUSH
34583: CALL_OW 235
34587: GO 34562
34589: POP
34590: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34591: LD_ADDR_EXP 105
34595: PUSH
34596: LD_EXP 105
34600: PPUSH
34601: LD_VAR 0 4
34605: PPUSH
34606: EMPTY
34607: PPUSH
34608: CALL_OW 1
34612: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34613: LD_VAR 0 1
34617: PPUSH
34618: LD_INT 0
34620: PPUSH
34621: CALL_OW 505
// end ; end ;
34625: LD_VAR 0 2
34629: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
34630: LD_INT 0
34632: PPUSH
34633: PPUSH
34634: PPUSH
// if not hack in hackTanks or not vehicles then
34635: LD_VAR 0 1
34639: PUSH
34640: LD_EXP 104
34644: IN
34645: NOT
34646: IFTRUE 34655
34648: PUSH
34649: LD_VAR 0 2
34653: NOT
34654: OR
34655: IFFALSE 34659
// exit ;
34657: GO 34934
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
34659: LD_ADDR_VAR 0 2
34663: PUSH
34664: LD_VAR 0 1
34668: PPUSH
34669: LD_VAR 0 2
34673: PPUSH
34674: LD_INT 1
34676: PPUSH
34677: LD_INT 1
34679: PPUSH
34680: CALL 43925 0 4
34684: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
34685: LD_ADDR_VAR 0 5
34689: PUSH
34690: LD_EXP 104
34694: PPUSH
34695: LD_VAR 0 1
34699: PPUSH
34700: CALL 43273 0 2
34704: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
34705: LD_EXP 105
34709: PUSH
34710: LD_VAR 0 5
34714: ARRAY
34715: PUSH
34716: LD_EXP 106
34720: LESS
34721: IFFALSE 34910
// begin for i := 1 to vehicles do
34723: LD_ADDR_VAR 0 4
34727: PUSH
34728: DOUBLE
34729: LD_INT 1
34731: DEC
34732: ST_TO_ADDR
34733: LD_VAR 0 2
34737: PUSH
34738: FOR_TO
34739: IFFALSE 34908
// begin if hackTanksCaptured [ index ] = hackLimit then
34741: LD_EXP 105
34745: PUSH
34746: LD_VAR 0 5
34750: ARRAY
34751: PUSH
34752: LD_EXP 106
34756: EQUAL
34757: IFFALSE 34761
// break ;
34759: GO 34908
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
34761: LD_ADDR_EXP 108
34765: PUSH
34766: LD_EXP 108
34770: PPUSH
34771: LD_VAR 0 5
34775: PPUSH
34776: LD_EXP 108
34780: PUSH
34781: LD_VAR 0 5
34785: ARRAY
34786: PUSH
34787: LD_INT 1
34789: PLUS
34790: PPUSH
34791: CALL_OW 1
34795: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
34796: LD_ADDR_EXP 105
34800: PUSH
34801: LD_EXP 105
34805: PPUSH
34806: LD_VAR 0 5
34810: PUSH
34811: LD_EXP 105
34815: PUSH
34816: LD_VAR 0 5
34820: ARRAY
34821: PUSH
34822: LD_INT 1
34824: PLUS
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PPUSH
34830: LD_VAR 0 2
34834: PUSH
34835: LD_VAR 0 4
34839: ARRAY
34840: PUSH
34841: LD_VAR 0 2
34845: PUSH
34846: LD_VAR 0 4
34850: ARRAY
34851: PPUSH
34852: CALL_OW 255
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PPUSH
34861: CALL 43490 0 3
34865: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
34866: LD_VAR 0 2
34870: PUSH
34871: LD_VAR 0 4
34875: ARRAY
34876: PPUSH
34877: LD_VAR 0 1
34881: PPUSH
34882: CALL_OW 255
34886: PPUSH
34887: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
34891: LD_VAR 0 2
34895: PUSH
34896: LD_VAR 0 4
34900: ARRAY
34901: PPUSH
34902: CALL_OW 141
// end ;
34906: GO 34738
34908: POP
34909: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
34910: LD_VAR 0 1
34914: PPUSH
34915: LD_EXP 105
34919: PUSH
34920: LD_VAR 0 5
34924: ARRAY
34925: PUSH
34926: LD_INT 0
34928: PLUS
34929: PPUSH
34930: CALL_OW 505
// end ;
34934: LD_VAR 0 3
34938: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
34939: LD_INT 0
34941: PPUSH
34942: PPUSH
34943: PPUSH
34944: PPUSH
// if not hack in hackTanks then
34945: LD_VAR 0 1
34949: PUSH
34950: LD_EXP 104
34954: IN
34955: NOT
34956: IFFALSE 34960
// exit ;
34958: GO 35204
// index := GetElementIndex ( hackTanks , hack ) ;
34960: LD_ADDR_VAR 0 4
34964: PUSH
34965: LD_EXP 104
34969: PPUSH
34970: LD_VAR 0 1
34974: PPUSH
34975: CALL 43273 0 2
34979: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
34980: LD_ADDR_VAR 0 3
34984: PUSH
34985: DOUBLE
34986: LD_EXP 105
34990: PUSH
34991: LD_VAR 0 4
34995: ARRAY
34996: INC
34997: ST_TO_ADDR
34998: LD_INT 1
35000: PUSH
35001: FOR_DOWNTO
35002: IFFALSE 35178
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35004: LD_ADDR_VAR 0 5
35008: PUSH
35009: LD_EXP 105
35013: PUSH
35014: LD_VAR 0 4
35018: ARRAY
35019: PUSH
35020: LD_VAR 0 3
35024: ARRAY
35025: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35026: LD_VAR 0 5
35030: PUSH
35031: LD_INT 1
35033: ARRAY
35034: PPUSH
35035: CALL_OW 302
35039: NOT
35040: IFTRUE 35068
35042: PUSH
35043: LD_VAR 0 5
35047: PUSH
35048: LD_INT 1
35050: ARRAY
35051: PPUSH
35052: CALL_OW 255
35056: PUSH
35057: LD_VAR 0 1
35061: PPUSH
35062: CALL_OW 255
35066: NONEQUAL
35067: OR
35068: IFFALSE 35176
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35070: LD_VAR 0 5
35074: PUSH
35075: LD_INT 1
35077: ARRAY
35078: PPUSH
35079: CALL_OW 305
35083: IFFALSE 35111
35085: PUSH
35086: LD_VAR 0 5
35090: PUSH
35091: LD_INT 1
35093: ARRAY
35094: PPUSH
35095: CALL_OW 255
35099: PUSH
35100: LD_VAR 0 1
35104: PPUSH
35105: CALL_OW 255
35109: EQUAL
35110: AND
35111: IFFALSE 35135
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35113: LD_VAR 0 5
35117: PUSH
35118: LD_INT 1
35120: ARRAY
35121: PPUSH
35122: LD_VAR 0 5
35126: PUSH
35127: LD_INT 2
35129: ARRAY
35130: PPUSH
35131: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35135: LD_ADDR_EXP 105
35139: PUSH
35140: LD_EXP 105
35144: PPUSH
35145: LD_VAR 0 4
35149: PPUSH
35150: LD_EXP 105
35154: PUSH
35155: LD_VAR 0 4
35159: ARRAY
35160: PPUSH
35161: LD_VAR 0 3
35165: PPUSH
35166: CALL_OW 3
35170: PPUSH
35171: CALL_OW 1
35175: ST_TO_ADDR
// end ; end ;
35176: GO 35001
35178: POP
35179: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35180: LD_VAR 0 1
35184: PPUSH
35185: LD_EXP 105
35189: PUSH
35190: LD_VAR 0 4
35194: ARRAY
35195: PUSH
35196: LD_INT 0
35198: PLUS
35199: PPUSH
35200: CALL_OW 505
// end ;
35204: LD_VAR 0 2
35208: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35209: LD_INT 0
35211: PPUSH
35212: PPUSH
35213: PPUSH
35214: PPUSH
// if not hack in hackTanks then
35215: LD_VAR 0 1
35219: PUSH
35220: LD_EXP 104
35224: IN
35225: NOT
35226: IFFALSE 35230
// exit ;
35228: GO 35315
// index := GetElementIndex ( hackTanks , hack ) ;
35230: LD_ADDR_VAR 0 5
35234: PUSH
35235: LD_EXP 104
35239: PPUSH
35240: LD_VAR 0 1
35244: PPUSH
35245: CALL 43273 0 2
35249: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35250: LD_ADDR_VAR 0 4
35254: PUSH
35255: DOUBLE
35256: LD_INT 1
35258: DEC
35259: ST_TO_ADDR
35260: LD_EXP 105
35264: PUSH
35265: LD_VAR 0 5
35269: ARRAY
35270: PUSH
35271: FOR_TO
35272: IFFALSE 35313
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35274: LD_EXP 105
35278: PUSH
35279: LD_VAR 0 5
35283: ARRAY
35284: PUSH
35285: LD_VAR 0 4
35289: ARRAY
35290: PUSH
35291: LD_INT 1
35293: ARRAY
35294: PUSH
35295: LD_VAR 0 2
35299: EQUAL
35300: IFFALSE 35311
// KillUnit ( vehicle ) ;
35302: LD_VAR 0 2
35306: PPUSH
35307: CALL_OW 66
35311: GO 35271
35313: POP
35314: POP
// end ;
35315: LD_VAR 0 3
35319: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
35320: LD_EXP 109
35324: NOT
35325: IFFALSE 35458
35327: GO 35329
35329: DISABLE
35330: LD_INT 0
35332: PPUSH
// begin initMiner := true ;
35333: LD_ADDR_EXP 109
35337: PUSH
35338: LD_INT 1
35340: ST_TO_ADDR
// minersList := [ ] ;
35341: LD_ADDR_EXP 110
35345: PUSH
35346: EMPTY
35347: ST_TO_ADDR
// minerMinesList := [ ] ;
35348: LD_ADDR_EXP 111
35352: PUSH
35353: EMPTY
35354: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
35355: LD_ADDR_EXP 112
35359: PUSH
35360: LD_INT 10
35362: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
35363: LD_ADDR_VAR 0 1
35367: PUSH
35368: LD_INT 34
35370: PUSH
35371: LD_INT 81
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PPUSH
35378: CALL_OW 69
35382: PUSH
35383: FOR_IN
35384: IFFALSE 35456
// begin if not i in minersList then
35386: LD_VAR 0 1
35390: PUSH
35391: LD_EXP 110
35395: IN
35396: NOT
35397: IFFALSE 35454
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
35399: LD_ADDR_EXP 110
35403: PUSH
35404: LD_EXP 110
35408: PPUSH
35409: LD_EXP 110
35413: PUSH
35414: LD_INT 1
35416: PLUS
35417: PPUSH
35418: LD_VAR 0 1
35422: PPUSH
35423: CALL_OW 1
35427: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
35428: LD_ADDR_EXP 111
35432: PUSH
35433: LD_EXP 111
35437: PPUSH
35438: LD_EXP 111
35442: PUSH
35443: LD_INT 1
35445: PLUS
35446: PPUSH
35447: EMPTY
35448: PPUSH
35449: CALL_OW 1
35453: ST_TO_ADDR
// end end ;
35454: GO 35383
35456: POP
35457: POP
// end ;
35458: PPOPN 1
35460: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
35461: LD_EXP 109
35465: IFFALSE 35496
35467: PUSH
35468: LD_EXP 111
35472: PPUSH
35473: CALL 40572 0 1
35477: IFTRUE 35495
35479: PUSH
35480: LD_INT 34
35482: PUSH
35483: LD_INT 81
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PPUSH
35490: CALL_OW 69
35494: OR
35495: AND
35496: IFFALSE 36016
35498: GO 35500
35500: DISABLE
35501: LD_INT 0
35503: PPUSH
35504: PPUSH
35505: PPUSH
35506: PPUSH
// begin enable ;
35507: ENABLE
// for i := minerMinesList downto 1 do
35508: LD_ADDR_VAR 0 1
35512: PUSH
35513: DOUBLE
35514: LD_EXP 111
35518: INC
35519: ST_TO_ADDR
35520: LD_INT 1
35522: PUSH
35523: FOR_DOWNTO
35524: IFFALSE 36014
// begin side := GetSide ( minersList [ i ] ) ;
35526: LD_ADDR_VAR 0 3
35530: PUSH
35531: LD_EXP 110
35535: PUSH
35536: LD_VAR 0 1
35540: ARRAY
35541: PPUSH
35542: CALL_OW 255
35546: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
35547: LD_EXP 110
35551: PUSH
35552: LD_VAR 0 1
35556: ARRAY
35557: PPUSH
35558: CALL_OW 300
35562: IFFALSE 35583
35564: PUSH
35565: LD_VAR 0 3
35569: PUSH
35570: LD_OWVAR 2
35574: PUSH
35575: LD_INT 9
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: IN
35582: AND
35583: IFFALSE 35616
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
35585: LD_EXP 110
35589: PUSH
35590: LD_VAR 0 1
35594: ARRAY
35595: PPUSH
35596: LD_EXP 111
35600: PUSH
35601: LD_VAR 0 1
35605: ARRAY
35606: PPUSH
35607: CALL 40572 0 1
35611: PPUSH
35612: CALL_OW 505
// if not minerMinesList [ i ] then
35616: LD_EXP 111
35620: PUSH
35621: LD_VAR 0 1
35625: ARRAY
35626: NOT
35627: IFFALSE 35631
// continue ;
35629: GO 35523
// for j := minerMinesList [ i ] downto 1 do
35631: LD_ADDR_VAR 0 2
35635: PUSH
35636: DOUBLE
35637: LD_EXP 111
35641: PUSH
35642: LD_VAR 0 1
35646: ARRAY
35647: INC
35648: ST_TO_ADDR
35649: LD_INT 1
35651: PUSH
35652: FOR_DOWNTO
35653: IFFALSE 36010
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
35655: LD_EXP 110
35659: PUSH
35660: LD_VAR 0 1
35664: ARRAY
35665: PPUSH
35666: CALL_OW 301
35670: IFTRUE 35690
35672: PUSH
35673: LD_EXP 110
35677: PUSH
35678: LD_VAR 0 1
35682: ARRAY
35683: PPUSH
35684: CALL_OW 305
35688: NOT
35689: OR
35690: IFFALSE 35781
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35692: LD_EXP 111
35696: PUSH
35697: LD_VAR 0 1
35701: ARRAY
35702: PUSH
35703: LD_VAR 0 2
35707: ARRAY
35708: PUSH
35709: LD_INT 1
35711: ARRAY
35712: PPUSH
35713: LD_EXP 111
35717: PUSH
35718: LD_VAR 0 1
35722: ARRAY
35723: PUSH
35724: LD_VAR 0 2
35728: ARRAY
35729: PUSH
35730: LD_INT 2
35732: ARRAY
35733: PPUSH
35734: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35738: LD_ADDR_EXP 111
35742: PUSH
35743: LD_EXP 111
35747: PPUSH
35748: LD_VAR 0 1
35752: PPUSH
35753: LD_EXP 111
35757: PUSH
35758: LD_VAR 0 1
35762: ARRAY
35763: PPUSH
35764: LD_VAR 0 2
35768: PPUSH
35769: CALL_OW 3
35773: PPUSH
35774: CALL_OW 1
35778: ST_TO_ADDR
// continue ;
35779: GO 35652
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
35781: LD_ADDR_VAR 0 4
35785: PUSH
35786: LD_EXP 111
35790: PUSH
35791: LD_VAR 0 1
35795: ARRAY
35796: PUSH
35797: LD_VAR 0 2
35801: ARRAY
35802: PUSH
35803: LD_INT 1
35805: ARRAY
35806: PPUSH
35807: LD_EXP 111
35811: PUSH
35812: LD_VAR 0 1
35816: ARRAY
35817: PUSH
35818: LD_VAR 0 2
35822: ARRAY
35823: PUSH
35824: LD_INT 2
35826: ARRAY
35827: PPUSH
35828: CALL_OW 428
35832: ST_TO_ADDR
// if not tmp then
35833: LD_VAR 0 4
35837: NOT
35838: IFFALSE 35842
// continue ;
35840: GO 35652
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
35842: LD_VAR 0 4
35846: PUSH
35847: LD_INT 81
35849: PUSH
35850: LD_VAR 0 3
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PPUSH
35859: CALL_OW 69
35863: IN
35864: IFFALSE 35914
35866: PUSH
35867: LD_EXP 111
35871: PUSH
35872: LD_VAR 0 1
35876: ARRAY
35877: PUSH
35878: LD_VAR 0 2
35882: ARRAY
35883: PUSH
35884: LD_INT 1
35886: ARRAY
35887: PPUSH
35888: LD_EXP 111
35892: PUSH
35893: LD_VAR 0 1
35897: ARRAY
35898: PUSH
35899: LD_VAR 0 2
35903: ARRAY
35904: PUSH
35905: LD_INT 2
35907: ARRAY
35908: PPUSH
35909: CALL_OW 458
35913: AND
35914: IFFALSE 36008
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
35916: LD_EXP 111
35920: PUSH
35921: LD_VAR 0 1
35925: ARRAY
35926: PUSH
35927: LD_VAR 0 2
35931: ARRAY
35932: PUSH
35933: LD_INT 1
35935: ARRAY
35936: PPUSH
35937: LD_EXP 111
35941: PUSH
35942: LD_VAR 0 1
35946: ARRAY
35947: PUSH
35948: LD_VAR 0 2
35952: ARRAY
35953: PUSH
35954: LD_INT 2
35956: ARRAY
35957: PPUSH
35958: LD_VAR 0 3
35962: PPUSH
35963: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
35967: LD_ADDR_EXP 111
35971: PUSH
35972: LD_EXP 111
35976: PPUSH
35977: LD_VAR 0 1
35981: PPUSH
35982: LD_EXP 111
35986: PUSH
35987: LD_VAR 0 1
35991: ARRAY
35992: PPUSH
35993: LD_VAR 0 2
35997: PPUSH
35998: CALL_OW 3
36002: PPUSH
36003: CALL_OW 1
36007: ST_TO_ADDR
// end ; end ;
36008: GO 35652
36010: POP
36011: POP
// end ;
36012: GO 35523
36014: POP
36015: POP
// end ;
36016: PPOPN 4
36018: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
36019: LD_INT 0
36021: PPUSH
36022: PPUSH
36023: PPUSH
36024: PPUSH
// result := false ;
36025: LD_ADDR_VAR 0 4
36029: PUSH
36030: LD_INT 0
36032: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36033: LD_VAR 0 1
36037: PPUSH
36038: CALL_OW 264
36042: PUSH
36043: LD_INT 81
36045: EQUAL
36046: NOT
36047: IFFALSE 36051
// exit ;
36049: GO 36421
// side := GetSide ( unit ) ;
36051: LD_ADDR_VAR 0 6
36055: PUSH
36056: LD_VAR 0 1
36060: PPUSH
36061: CALL_OW 255
36065: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
36066: LD_ADDR_VAR 0 5
36070: PUSH
36071: LD_EXP 110
36075: PPUSH
36076: LD_VAR 0 1
36080: PPUSH
36081: CALL 43273 0 2
36085: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36086: LD_EXP 111
36090: PUSH
36091: LD_VAR 0 5
36095: ARRAY
36096: PUSH
36097: LD_EXP 112
36101: GREATEREQUAL
36102: IFFALSE 36106
// exit ;
36104: GO 36421
// ComMoveXY ( unit , x , y ) ;
36106: LD_VAR 0 1
36110: PPUSH
36111: LD_VAR 0 2
36115: PPUSH
36116: LD_VAR 0 3
36120: PPUSH
36121: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36125: LD_INT 35
36127: PPUSH
36128: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36132: LD_VAR 0 1
36136: PPUSH
36137: LD_VAR 0 2
36141: PPUSH
36142: LD_VAR 0 3
36146: PPUSH
36147: CALL 75329 0 3
36151: NOT
36152: IFFALSE 36165
36154: PUSH
36155: LD_VAR 0 1
36159: PPUSH
36160: CALL_OW 314
36164: AND
36165: IFFALSE 36169
// exit ;
36167: GO 36421
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36169: LD_VAR 0 2
36173: PPUSH
36174: LD_VAR 0 3
36178: PPUSH
36179: CALL_OW 428
36183: PUSH
36184: LD_VAR 0 1
36188: EQUAL
36189: IFFALSE 36203
36191: PUSH
36192: LD_VAR 0 1
36196: PPUSH
36197: CALL_OW 314
36201: NOT
36202: AND
36203: IFFALSE 36125
// if MineAtPos ( x , y ) then
36205: LD_VAR 0 2
36209: PPUSH
36210: LD_VAR 0 3
36214: PPUSH
36215: CALL_OW 458
36219: IFFALSE 36223
// exit ;
36221: GO 36421
// if your_side = side then
36223: LD_OWVAR 2
36227: PUSH
36228: LD_VAR 0 6
36232: EQUAL
36233: IFFALSE 36252
// PlaySoundXY ( x , y , PlantMine ) ;
36235: LD_VAR 0 2
36239: PPUSH
36240: LD_VAR 0 3
36244: PPUSH
36245: LD_STRING PlantMine
36247: PPUSH
36248: CALL_OW 366
// repeat wait ( 1 ) ;
36252: LD_INT 1
36254: PPUSH
36255: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
36259: LD_VAR 0 2
36263: PPUSH
36264: LD_VAR 0 3
36268: PPUSH
36269: LD_VAR 0 6
36273: PPUSH
36274: LD_INT 0
36276: PPUSH
36277: CALL_OW 454
36281: IFFALSE 36252
// if MineAtPos ( x , y ) then
36283: LD_VAR 0 2
36287: PPUSH
36288: LD_VAR 0 3
36292: PPUSH
36293: CALL_OW 458
36297: IFFALSE 36413
// begin for i in minerMinesList [ index ] do
36299: LD_ADDR_VAR 0 7
36303: PUSH
36304: LD_EXP 111
36308: PUSH
36309: LD_VAR 0 5
36313: ARRAY
36314: PUSH
36315: FOR_IN
36316: IFFALSE 36358
// if i [ 1 ] = x and i [ 2 ] = y then
36318: LD_VAR 0 7
36322: PUSH
36323: LD_INT 1
36325: ARRAY
36326: PUSH
36327: LD_VAR 0 2
36331: EQUAL
36332: IFFALSE 36350
36334: PUSH
36335: LD_VAR 0 7
36339: PUSH
36340: LD_INT 2
36342: ARRAY
36343: PUSH
36344: LD_VAR 0 3
36348: EQUAL
36349: AND
36350: IFFALSE 36356
// exit ;
36352: POP
36353: POP
36354: GO 36421
36356: GO 36315
36358: POP
36359: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
36360: LD_ADDR_EXP 111
36364: PUSH
36365: LD_EXP 111
36369: PPUSH
36370: LD_VAR 0 5
36374: PUSH
36375: LD_EXP 111
36379: PUSH
36380: LD_VAR 0 5
36384: ARRAY
36385: PUSH
36386: LD_INT 1
36388: PLUS
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PPUSH
36394: LD_VAR 0 2
36398: PUSH
36399: LD_VAR 0 3
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PPUSH
36408: CALL 43490 0 3
36412: ST_TO_ADDR
// end ; result := true ;
36413: LD_ADDR_VAR 0 4
36417: PUSH
36418: LD_INT 1
36420: ST_TO_ADDR
// end ;
36421: LD_VAR 0 4
36425: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
36426: LD_INT 0
36428: PPUSH
36429: PPUSH
36430: PPUSH
// if not unit in minersList then
36431: LD_VAR 0 1
36435: PUSH
36436: LD_EXP 110
36440: IN
36441: NOT
36442: IFFALSE 36446
// exit ;
36444: GO 36653
// index := GetElementIndex ( minersList , unit ) ;
36446: LD_ADDR_VAR 0 6
36450: PUSH
36451: LD_EXP 110
36455: PPUSH
36456: LD_VAR 0 1
36460: PPUSH
36461: CALL 43273 0 2
36465: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
36466: LD_ADDR_VAR 0 5
36470: PUSH
36471: DOUBLE
36472: LD_EXP 111
36476: PUSH
36477: LD_VAR 0 6
36481: ARRAY
36482: INC
36483: ST_TO_ADDR
36484: LD_INT 1
36486: PUSH
36487: FOR_DOWNTO
36488: IFFALSE 36651
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
36490: LD_EXP 111
36494: PUSH
36495: LD_VAR 0 6
36499: ARRAY
36500: PUSH
36501: LD_VAR 0 5
36505: ARRAY
36506: PUSH
36507: LD_INT 1
36509: ARRAY
36510: PPUSH
36511: LD_EXP 111
36515: PUSH
36516: LD_VAR 0 6
36520: ARRAY
36521: PUSH
36522: LD_VAR 0 5
36526: ARRAY
36527: PUSH
36528: LD_INT 2
36530: ARRAY
36531: PPUSH
36532: LD_VAR 0 2
36536: PPUSH
36537: LD_VAR 0 3
36541: PPUSH
36542: CALL_OW 298
36546: PUSH
36547: LD_INT 6
36549: LESS
36550: IFFALSE 36649
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
36552: LD_EXP 111
36556: PUSH
36557: LD_VAR 0 6
36561: ARRAY
36562: PUSH
36563: LD_VAR 0 5
36567: ARRAY
36568: PUSH
36569: LD_INT 1
36571: ARRAY
36572: PPUSH
36573: LD_EXP 111
36577: PUSH
36578: LD_VAR 0 6
36582: ARRAY
36583: PUSH
36584: LD_VAR 0 5
36588: ARRAY
36589: PUSH
36590: LD_INT 2
36592: ARRAY
36593: PPUSH
36594: LD_VAR 0 1
36598: PPUSH
36599: CALL_OW 255
36603: PPUSH
36604: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
36608: LD_ADDR_EXP 111
36612: PUSH
36613: LD_EXP 111
36617: PPUSH
36618: LD_VAR 0 6
36622: PPUSH
36623: LD_EXP 111
36627: PUSH
36628: LD_VAR 0 6
36632: ARRAY
36633: PPUSH
36634: LD_VAR 0 5
36638: PPUSH
36639: CALL_OW 3
36643: PPUSH
36644: CALL_OW 1
36648: ST_TO_ADDR
// end ; end ;
36649: GO 36487
36651: POP
36652: POP
// end ;
36653: LD_VAR 0 4
36657: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
36658: LD_INT 0
36660: PPUSH
36661: PPUSH
36662: PPUSH
36663: PPUSH
36664: PPUSH
36665: PPUSH
36666: PPUSH
36667: PPUSH
36668: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
36669: LD_VAR 0 1
36673: PPUSH
36674: CALL_OW 264
36678: PUSH
36679: LD_INT 81
36681: EQUAL
36682: NOT
36683: IFTRUE 36698
36685: PUSH
36686: LD_VAR 0 1
36690: PUSH
36691: LD_EXP 110
36695: IN
36696: NOT
36697: OR
36698: IFFALSE 36702
// exit ;
36700: GO 37028
// index := GetElementIndex ( minersList , unit ) ;
36702: LD_ADDR_VAR 0 6
36706: PUSH
36707: LD_EXP 110
36711: PPUSH
36712: LD_VAR 0 1
36716: PPUSH
36717: CALL 43273 0 2
36721: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
36722: LD_ADDR_VAR 0 8
36726: PUSH
36727: LD_EXP 112
36731: PUSH
36732: LD_EXP 111
36736: PUSH
36737: LD_VAR 0 6
36741: ARRAY
36742: MINUS
36743: ST_TO_ADDR
// if not minesFreeAmount then
36744: LD_VAR 0 8
36748: NOT
36749: IFFALSE 36753
// exit ;
36751: GO 37028
// tmp := [ ] ;
36753: LD_ADDR_VAR 0 7
36757: PUSH
36758: EMPTY
36759: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
36760: LD_ADDR_VAR 0 5
36764: PUSH
36765: DOUBLE
36766: LD_INT 1
36768: DEC
36769: ST_TO_ADDR
36770: LD_VAR 0 8
36774: PUSH
36775: FOR_TO
36776: IFFALSE 36975
// begin _d := rand ( 0 , 5 ) ;
36778: LD_ADDR_VAR 0 11
36782: PUSH
36783: LD_INT 0
36785: PPUSH
36786: LD_INT 5
36788: PPUSH
36789: CALL_OW 12
36793: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
36794: LD_ADDR_VAR 0 12
36798: PUSH
36799: LD_INT 2
36801: PPUSH
36802: LD_INT 6
36804: PPUSH
36805: CALL_OW 12
36809: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
36810: LD_ADDR_VAR 0 9
36814: PUSH
36815: LD_VAR 0 2
36819: PPUSH
36820: LD_VAR 0 11
36824: PPUSH
36825: LD_VAR 0 12
36829: PPUSH
36830: CALL_OW 272
36834: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
36835: LD_ADDR_VAR 0 10
36839: PUSH
36840: LD_VAR 0 3
36844: PPUSH
36845: LD_VAR 0 11
36849: PPUSH
36850: LD_VAR 0 12
36854: PPUSH
36855: CALL_OW 273
36859: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
36860: LD_VAR 0 9
36864: PPUSH
36865: LD_VAR 0 10
36869: PPUSH
36870: CALL_OW 488
36874: IFFALSE 36898
36876: PUSH
36877: LD_VAR 0 9
36881: PUSH
36882: LD_VAR 0 10
36886: PUSH
36887: EMPTY
36888: LIST
36889: LIST
36890: PUSH
36891: LD_VAR 0 7
36895: IN
36896: NOT
36897: AND
36898: IFFALSE 36917
36900: PUSH
36901: LD_VAR 0 9
36905: PPUSH
36906: LD_VAR 0 10
36910: PPUSH
36911: CALL_OW 458
36915: NOT
36916: AND
36917: IFFALSE 36959
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
36919: LD_ADDR_VAR 0 7
36923: PUSH
36924: LD_VAR 0 7
36928: PPUSH
36929: LD_VAR 0 7
36933: PUSH
36934: LD_INT 1
36936: PLUS
36937: PPUSH
36938: LD_VAR 0 9
36942: PUSH
36943: LD_VAR 0 10
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PPUSH
36952: CALL_OW 1
36956: ST_TO_ADDR
36957: GO 36973
// i := i - 1 ;
36959: LD_ADDR_VAR 0 5
36963: PUSH
36964: LD_VAR 0 5
36968: PUSH
36969: LD_INT 1
36971: MINUS
36972: ST_TO_ADDR
// end ;
36973: GO 36775
36975: POP
36976: POP
// for i in tmp do
36977: LD_ADDR_VAR 0 5
36981: PUSH
36982: LD_VAR 0 7
36986: PUSH
36987: FOR_IN
36988: IFFALSE 37026
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
36990: LD_VAR 0 1
36994: PPUSH
36995: LD_VAR 0 5
36999: PUSH
37000: LD_INT 1
37002: ARRAY
37003: PPUSH
37004: LD_VAR 0 5
37008: PUSH
37009: LD_INT 2
37011: ARRAY
37012: PPUSH
37013: CALL 36019 0 3
37017: NOT
37018: IFFALSE 37024
// exit ;
37020: POP
37021: POP
37022: GO 37028
37024: GO 36987
37026: POP
37027: POP
// end ;
37028: LD_VAR 0 4
37032: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
37033: LD_INT 0
37035: PPUSH
37036: PPUSH
37037: PPUSH
37038: PPUSH
37039: PPUSH
37040: PPUSH
37041: PPUSH
37042: PPUSH
37043: PPUSH
// if GetClass ( unit ) <> class_sniper then
37044: LD_VAR 0 1
37048: PPUSH
37049: CALL_OW 257
37053: PUSH
37054: LD_INT 5
37056: NONEQUAL
37057: IFFALSE 37061
// exit ;
37059: GO 37531
// dist := 8 ;
37061: LD_ADDR_VAR 0 5
37065: PUSH
37066: LD_INT 8
37068: ST_TO_ADDR
// viewRange := 12 ;
37069: LD_ADDR_VAR 0 8
37073: PUSH
37074: LD_INT 12
37076: ST_TO_ADDR
// side := GetSide ( unit ) ;
37077: LD_ADDR_VAR 0 6
37081: PUSH
37082: LD_VAR 0 1
37086: PPUSH
37087: CALL_OW 255
37091: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37092: LD_INT 61
37094: PPUSH
37095: LD_VAR 0 6
37099: PPUSH
37100: CALL_OW 321
37104: PUSH
37105: LD_INT 2
37107: EQUAL
37108: IFFALSE 37118
// viewRange := 16 ;
37110: LD_ADDR_VAR 0 8
37114: PUSH
37115: LD_INT 16
37117: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
37118: LD_VAR 0 1
37122: PPUSH
37123: LD_VAR 0 2
37127: PPUSH
37128: LD_VAR 0 3
37132: PPUSH
37133: CALL_OW 297
37137: PUSH
37138: LD_VAR 0 5
37142: GREATER
37143: IFFALSE 37222
// begin ComMoveXY ( unit , x , y ) ;
37145: LD_VAR 0 1
37149: PPUSH
37150: LD_VAR 0 2
37154: PPUSH
37155: LD_VAR 0 3
37159: PPUSH
37160: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37164: LD_INT 35
37166: PPUSH
37167: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
37171: LD_VAR 0 1
37175: PPUSH
37176: LD_VAR 0 2
37180: PPUSH
37181: LD_VAR 0 3
37185: PPUSH
37186: CALL 75329 0 3
37190: NOT
37191: IFFALSE 37195
// exit ;
37193: GO 37531
// until GetDistUnitXY ( unit , x , y ) < dist ;
37195: LD_VAR 0 1
37199: PPUSH
37200: LD_VAR 0 2
37204: PPUSH
37205: LD_VAR 0 3
37209: PPUSH
37210: CALL_OW 297
37214: PUSH
37215: LD_VAR 0 5
37219: LESS
37220: IFFALSE 37164
// end ; ComTurnXY ( unit , x , y ) ;
37222: LD_VAR 0 1
37226: PPUSH
37227: LD_VAR 0 2
37231: PPUSH
37232: LD_VAR 0 3
37236: PPUSH
37237: CALL_OW 118
// repeat if Multiplayer then
37241: LD_OWVAR 4
37245: IFFALSE 37256
// wait ( 35 ) else
37247: LD_INT 35
37249: PPUSH
37250: CALL_OW 67
37254: GO 37263
// wait ( 5 ) ;
37256: LD_INT 5
37258: PPUSH
37259: CALL_OW 67
// _d := GetDir ( unit ) ;
37263: LD_ADDR_VAR 0 11
37267: PUSH
37268: LD_VAR 0 1
37272: PPUSH
37273: CALL_OW 254
37277: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
37278: LD_ADDR_VAR 0 7
37282: PUSH
37283: LD_VAR 0 1
37287: PPUSH
37288: CALL_OW 250
37292: PPUSH
37293: LD_VAR 0 1
37297: PPUSH
37298: CALL_OW 251
37302: PPUSH
37303: LD_VAR 0 2
37307: PPUSH
37308: LD_VAR 0 3
37312: PPUSH
37313: CALL 77965 0 4
37317: ST_TO_ADDR
// until dir = _d ;
37318: LD_VAR 0 7
37322: PUSH
37323: LD_VAR 0 11
37327: EQUAL
37328: IFFALSE 37241
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
37330: LD_ADDR_VAR 0 9
37334: PUSH
37335: LD_VAR 0 1
37339: PPUSH
37340: CALL_OW 250
37344: PPUSH
37345: LD_VAR 0 7
37349: PPUSH
37350: LD_VAR 0 5
37354: PPUSH
37355: CALL_OW 272
37359: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
37360: LD_ADDR_VAR 0 10
37364: PUSH
37365: LD_VAR 0 1
37369: PPUSH
37370: CALL_OW 251
37374: PPUSH
37375: LD_VAR 0 7
37379: PPUSH
37380: LD_VAR 0 5
37384: PPUSH
37385: CALL_OW 273
37389: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37390: LD_VAR 0 9
37394: PPUSH
37395: LD_VAR 0 10
37399: PPUSH
37400: CALL_OW 488
37404: NOT
37405: IFFALSE 37409
// exit ;
37407: GO 37531
// ComAnimCustom ( unit , 1 ) ;
37409: LD_VAR 0 1
37413: PPUSH
37414: LD_INT 1
37416: PPUSH
37417: CALL_OW 592
// p := 0 ;
37421: LD_ADDR_VAR 0 12
37425: PUSH
37426: LD_INT 0
37428: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
37429: LD_VAR 0 9
37433: PPUSH
37434: LD_VAR 0 10
37438: PPUSH
37439: LD_VAR 0 6
37443: PPUSH
37444: LD_VAR 0 8
37448: PPUSH
37449: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
37453: LD_INT 35
37455: PPUSH
37456: CALL_OW 67
// p := Inc ( p ) ;
37460: LD_ADDR_VAR 0 12
37464: PUSH
37465: LD_VAR 0 12
37469: PPUSH
37470: CALL 77921 0 1
37474: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
37475: LD_VAR 0 12
37479: PUSH
37480: LD_INT 3
37482: EQUAL
37483: IFTRUE 37497
37485: PUSH
37486: LD_VAR 0 1
37490: PPUSH
37491: CALL_OW 302
37495: NOT
37496: OR
37497: IFTRUE 37510
37499: PUSH
37500: LD_VAR 0 1
37504: PPUSH
37505: CALL_OW 301
37509: OR
37510: IFFALSE 37453
// RemoveSeeing ( _x , _y , side ) ;
37512: LD_VAR 0 9
37516: PPUSH
37517: LD_VAR 0 10
37521: PPUSH
37522: LD_VAR 0 6
37526: PPUSH
37527: CALL_OW 331
// end ;
37531: LD_VAR 0 4
37535: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
37536: LD_INT 0
37538: PPUSH
37539: PPUSH
37540: PPUSH
37541: PPUSH
37542: PPUSH
37543: PPUSH
37544: PPUSH
37545: PPUSH
37546: PPUSH
37547: PPUSH
37548: PPUSH
// if not unit then
37549: LD_VAR 0 1
37553: NOT
37554: IFFALSE 37558
// exit ;
37556: GO 37829
// side := GetSide ( unit ) ;
37558: LD_ADDR_VAR 0 3
37562: PUSH
37563: LD_VAR 0 1
37567: PPUSH
37568: CALL_OW 255
37572: ST_TO_ADDR
// x := GetX ( unit ) ;
37573: LD_ADDR_VAR 0 5
37577: PUSH
37578: LD_VAR 0 1
37582: PPUSH
37583: CALL_OW 250
37587: ST_TO_ADDR
// y := GetY ( unit ) ;
37588: LD_ADDR_VAR 0 6
37592: PUSH
37593: LD_VAR 0 1
37597: PPUSH
37598: CALL_OW 251
37602: ST_TO_ADDR
// r := 8 ;
37603: LD_ADDR_VAR 0 4
37607: PUSH
37608: LD_INT 8
37610: ST_TO_ADDR
// if x - r < 0 then
37611: LD_VAR 0 5
37615: PUSH
37616: LD_VAR 0 4
37620: MINUS
37621: PUSH
37622: LD_INT 0
37624: LESS
37625: IFFALSE 37637
// min_x := 0 else
37627: LD_ADDR_VAR 0 7
37631: PUSH
37632: LD_INT 0
37634: ST_TO_ADDR
37635: GO 37653
// min_x := x - r ;
37637: LD_ADDR_VAR 0 7
37641: PUSH
37642: LD_VAR 0 5
37646: PUSH
37647: LD_VAR 0 4
37651: MINUS
37652: ST_TO_ADDR
// if y - r < 0 then
37653: LD_VAR 0 6
37657: PUSH
37658: LD_VAR 0 4
37662: MINUS
37663: PUSH
37664: LD_INT 0
37666: LESS
37667: IFFALSE 37679
// min_y := 0 else
37669: LD_ADDR_VAR 0 8
37673: PUSH
37674: LD_INT 0
37676: ST_TO_ADDR
37677: GO 37695
// min_y := y - r ;
37679: LD_ADDR_VAR 0 8
37683: PUSH
37684: LD_VAR 0 6
37688: PUSH
37689: LD_VAR 0 4
37693: MINUS
37694: ST_TO_ADDR
// max_x := x + r ;
37695: LD_ADDR_VAR 0 9
37699: PUSH
37700: LD_VAR 0 5
37704: PUSH
37705: LD_VAR 0 4
37709: PLUS
37710: ST_TO_ADDR
// max_y := y + r ;
37711: LD_ADDR_VAR 0 10
37715: PUSH
37716: LD_VAR 0 6
37720: PUSH
37721: LD_VAR 0 4
37725: PLUS
37726: ST_TO_ADDR
// for _x = min_x to max_x do
37727: LD_ADDR_VAR 0 11
37731: PUSH
37732: DOUBLE
37733: LD_VAR 0 7
37737: DEC
37738: ST_TO_ADDR
37739: LD_VAR 0 9
37743: PUSH
37744: FOR_TO
37745: IFFALSE 37827
// for _y = min_y to max_y do
37747: LD_ADDR_VAR 0 12
37751: PUSH
37752: DOUBLE
37753: LD_VAR 0 8
37757: DEC
37758: ST_TO_ADDR
37759: LD_VAR 0 10
37763: PUSH
37764: FOR_TO
37765: IFFALSE 37823
// begin if not ValidHex ( _x , _y ) then
37767: LD_VAR 0 11
37771: PPUSH
37772: LD_VAR 0 12
37776: PPUSH
37777: CALL_OW 488
37781: NOT
37782: IFFALSE 37786
// continue ;
37784: GO 37764
// if MineAtPos ( _x , _y ) then
37786: LD_VAR 0 11
37790: PPUSH
37791: LD_VAR 0 12
37795: PPUSH
37796: CALL_OW 458
37800: IFFALSE 37821
// ViewMineAtPos ( _x , _y , side ) ;
37802: LD_VAR 0 11
37806: PPUSH
37807: LD_VAR 0 12
37811: PPUSH
37812: LD_VAR 0 3
37816: PPUSH
37817: CALL_OW 457
// end ;
37821: GO 37764
37823: POP
37824: POP
37825: GO 37744
37827: POP
37828: POP
// end ;
37829: LD_VAR 0 2
37833: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
37834: LD_INT 0
37836: PPUSH
37837: PPUSH
37838: PPUSH
37839: PPUSH
37840: PPUSH
37841: PPUSH
37842: PPUSH
// if not units then
37843: LD_VAR 0 1
37847: NOT
37848: IFFALSE 37852
// exit ;
37850: GO 38316
// scaners := [ ] ;
37852: LD_ADDR_VAR 0 6
37856: PUSH
37857: EMPTY
37858: ST_TO_ADDR
// for i in units do
37859: LD_ADDR_VAR 0 3
37863: PUSH
37864: LD_VAR 0 1
37868: PUSH
37869: FOR_IN
37870: IFFALSE 38027
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
37872: LD_VAR 0 3
37876: PPUSH
37877: CALL_OW 264
37881: PUSH
37882: LD_INT 11
37884: NONEQUAL
37885: IFTRUE 37899
37887: PUSH
37888: LD_VAR 0 3
37892: PPUSH
37893: CALL_OW 302
37897: NOT
37898: OR
37899: IFTRUE 37916
37901: PUSH
37902: LD_VAR 0 3
37906: PPUSH
37907: CALL_OW 110
37911: PUSH
37912: LD_INT 502
37914: EQUAL
37915: OR
37916: IFFALSE 37920
// continue ;
37918: GO 37869
// ComStop ( i ) ;
37920: LD_VAR 0 3
37924: PPUSH
37925: CALL_OW 141
// x := GetX ( i ) ;
37929: LD_ADDR_VAR 0 4
37933: PUSH
37934: LD_VAR 0 3
37938: PPUSH
37939: CALL_OW 250
37943: ST_TO_ADDR
// y := GetY ( i ) ;
37944: LD_ADDR_VAR 0 5
37948: PUSH
37949: LD_VAR 0 3
37953: PPUSH
37954: CALL_OW 251
37958: ST_TO_ADDR
// if GetSide ( i ) = your_side then
37959: LD_VAR 0 3
37963: PPUSH
37964: CALL_OW 255
37968: PUSH
37969: LD_OWVAR 2
37973: EQUAL
37974: IFFALSE 37993
// PlaySoundXY ( x , y , mineDetector ) ;
37976: LD_VAR 0 4
37980: PPUSH
37981: LD_VAR 0 5
37985: PPUSH
37986: LD_STRING mineDetector
37988: PPUSH
37989: CALL_OW 366
// scaners := Join ( scaners , i ) ;
37993: LD_ADDR_VAR 0 6
37997: PUSH
37998: LD_VAR 0 6
38002: PPUSH
38003: LD_VAR 0 3
38007: PPUSH
38008: CALL 76548 0 2
38012: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
38013: LD_VAR 0 3
38017: PPUSH
38018: LD_INT 502
38020: PPUSH
38021: CALL_OW 109
// end ;
38025: GO 37869
38027: POP
38028: POP
// if not scaners then
38029: LD_VAR 0 6
38033: NOT
38034: IFFALSE 38038
// exit ;
38036: GO 38316
// wait ( 3 ) ;
38038: LD_INT 3
38040: PPUSH
38041: CALL_OW 67
// timer := 6 ;
38045: LD_ADDR_VAR 0 7
38049: PUSH
38050: LD_INT 6
38052: ST_TO_ADDR
// repeat for i in scaners do
38053: LD_ADDR_VAR 0 3
38057: PUSH
38058: LD_VAR 0 6
38062: PUSH
38063: FOR_IN
38064: IFFALSE 38214
// begin side := GetSide ( i ) ;
38066: LD_ADDR_VAR 0 8
38070: PUSH
38071: LD_VAR 0 3
38075: PPUSH
38076: CALL_OW 255
38080: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
38081: LD_VAR 0 3
38085: PPUSH
38086: CALL_OW 302
38090: NOT
38091: IFTRUE 38104
38093: PUSH
38094: LD_VAR 0 3
38098: PPUSH
38099: CALL_OW 314
38103: OR
38104: IFTRUE 38135
38106: PUSH
38107: LD_VAR 0 3
38111: PPUSH
38112: CALL_OW 263
38116: PUSH
38117: LD_INT 1
38119: EQUAL
38120: IFFALSE 38134
38122: PUSH
38123: LD_VAR 0 3
38127: PPUSH
38128: CALL_OW 311
38132: NOT
38133: AND
38134: OR
38135: IFFALSE 38179
// begin SetUnitDisplayNumber ( i , 0 ) ;
38137: LD_VAR 0 3
38141: PPUSH
38142: LD_INT 0
38144: PPUSH
38145: CALL_OW 505
// SetTag ( i , 0 ) ;
38149: LD_VAR 0 3
38153: PPUSH
38154: LD_INT 0
38156: PPUSH
38157: CALL_OW 109
// scaners := scaners diff i ;
38161: LD_ADDR_VAR 0 6
38165: PUSH
38166: LD_VAR 0 6
38170: PUSH
38171: LD_VAR 0 3
38175: DIFF
38176: ST_TO_ADDR
// continue ;
38177: GO 38063
// end ; if side in [ your_side , 9 ] then
38179: LD_VAR 0 8
38183: PUSH
38184: LD_OWVAR 2
38188: PUSH
38189: LD_INT 9
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: IN
38196: IFFALSE 38212
// SetUnitDisplayNumber ( i , timer ) ;
38198: LD_VAR 0 3
38202: PPUSH
38203: LD_VAR 0 7
38207: PPUSH
38208: CALL_OW 505
// end ;
38212: GO 38063
38214: POP
38215: POP
// if not scaners then
38216: LD_VAR 0 6
38220: NOT
38221: IFFALSE 38225
// exit ;
38223: GO 38316
// timer := Dec ( timer ) ;
38225: LD_ADDR_VAR 0 7
38229: PUSH
38230: LD_VAR 0 7
38234: PPUSH
38235: CALL 77943 0 1
38239: ST_TO_ADDR
// wait ( 0 0$1 ) ;
38240: LD_INT 35
38242: PPUSH
38243: CALL_OW 67
// until timer = 0 ;
38247: LD_VAR 0 7
38251: PUSH
38252: LD_INT 0
38254: EQUAL
38255: IFFALSE 38053
// if not scaners then
38257: LD_VAR 0 6
38261: NOT
38262: IFFALSE 38266
// exit ;
38264: GO 38316
// for i in scaners do
38266: LD_ADDR_VAR 0 3
38270: PUSH
38271: LD_VAR 0 6
38275: PUSH
38276: FOR_IN
38277: IFFALSE 38314
// begin SetUnitDisplayNumber ( i , 0 ) ;
38279: LD_VAR 0 3
38283: PPUSH
38284: LD_INT 0
38286: PPUSH
38287: CALL_OW 505
// SetTag ( i , 0 ) ;
38291: LD_VAR 0 3
38295: PPUSH
38296: LD_INT 0
38298: PPUSH
38299: CALL_OW 109
// RevealDetectorMine ( i ) ;
38303: LD_VAR 0 3
38307: PPUSH
38308: CALL 37536 0 1
// end ;
38312: GO 38276
38314: POP
38315: POP
// end ;
38316: LD_VAR 0 2
38320: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
38321: LD_INT 0
38323: PPUSH
// if p1 = mine_detector_mode then
38324: LD_VAR 0 2
38328: PUSH
38329: LD_INT 103
38331: EQUAL
38332: IFFALSE 38343
// DetectMine ( units ) ;
38334: LD_VAR 0 1
38338: PPUSH
38339: CALL 37834 0 1
// end ; end_of_file
38343: LD_VAR 0 7
38347: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38348: LD_INT 0
38350: PPUSH
38351: PPUSH
// if exist_mode then
38352: LD_VAR 0 2
38356: IFFALSE 38402
// begin unit := CreateCharacter ( prefix & ident ) ;
38358: LD_ADDR_VAR 0 5
38362: PUSH
38363: LD_VAR 0 3
38367: PUSH
38368: LD_VAR 0 1
38372: STR
38373: PPUSH
38374: CALL_OW 34
38378: ST_TO_ADDR
// if unit then
38379: LD_VAR 0 5
38383: IFFALSE 38400
// DeleteCharacters ( prefix & ident ) ;
38385: LD_VAR 0 3
38389: PUSH
38390: LD_VAR 0 1
38394: STR
38395: PPUSH
38396: CALL_OW 40
// end else
38400: GO 38417
// unit := NewCharacter ( ident ) ;
38402: LD_ADDR_VAR 0 5
38406: PUSH
38407: LD_VAR 0 1
38411: PPUSH
38412: CALL_OW 25
38416: ST_TO_ADDR
// result := unit ;
38417: LD_ADDR_VAR 0 4
38421: PUSH
38422: LD_VAR 0 5
38426: ST_TO_ADDR
// end ;
38427: LD_VAR 0 4
38431: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
38432: LD_INT 0
38434: PPUSH
38435: PPUSH
// if exist_mode then
38436: LD_VAR 0 2
38440: IFFALSE 38465
// unit := CreateCharacter ( prefix & ident ) else
38442: LD_ADDR_VAR 0 5
38446: PUSH
38447: LD_VAR 0 3
38451: PUSH
38452: LD_VAR 0 1
38456: STR
38457: PPUSH
38458: CALL_OW 34
38462: ST_TO_ADDR
38463: GO 38480
// unit := NewCharacter ( ident ) ;
38465: LD_ADDR_VAR 0 5
38469: PUSH
38470: LD_VAR 0 1
38474: PPUSH
38475: CALL_OW 25
38479: ST_TO_ADDR
// result := unit ;
38480: LD_ADDR_VAR 0 4
38484: PUSH
38485: LD_VAR 0 5
38489: ST_TO_ADDR
// end ;
38490: LD_VAR 0 4
38494: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38495: LD_INT 0
38497: PPUSH
38498: PPUSH
// if not side or not nation then
38499: LD_VAR 0 1
38503: NOT
38504: IFTRUE 38513
38506: PUSH
38507: LD_VAR 0 2
38511: NOT
38512: OR
38513: IFFALSE 38517
// exit ;
38515: GO 39311
// case nation of nation_american :
38517: LD_VAR 0 2
38521: PUSH
38522: LD_INT 1
38524: DOUBLE
38525: EQUAL
38526: IFTRUE 38530
38528: GO 38752
38530: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
38531: LD_ADDR_VAR 0 4
38535: PUSH
38536: LD_INT 35
38538: PUSH
38539: LD_INT 45
38541: PUSH
38542: LD_INT 46
38544: PUSH
38545: LD_INT 47
38547: PUSH
38548: LD_INT 82
38550: PUSH
38551: LD_INT 83
38553: PUSH
38554: LD_INT 84
38556: PUSH
38557: LD_INT 85
38559: PUSH
38560: LD_INT 86
38562: PUSH
38563: LD_INT 1
38565: PUSH
38566: LD_INT 2
38568: PUSH
38569: LD_INT 6
38571: PUSH
38572: LD_INT 15
38574: PUSH
38575: LD_INT 16
38577: PUSH
38578: LD_INT 7
38580: PUSH
38581: LD_INT 12
38583: PUSH
38584: LD_INT 13
38586: PUSH
38587: LD_INT 10
38589: PUSH
38590: LD_INT 14
38592: PUSH
38593: LD_INT 20
38595: PUSH
38596: LD_INT 21
38598: PUSH
38599: LD_INT 22
38601: PUSH
38602: LD_INT 25
38604: PUSH
38605: LD_INT 32
38607: PUSH
38608: LD_INT 27
38610: PUSH
38611: LD_INT 36
38613: PUSH
38614: LD_INT 69
38616: PUSH
38617: LD_INT 39
38619: PUSH
38620: LD_INT 34
38622: PUSH
38623: LD_INT 40
38625: PUSH
38626: LD_INT 48
38628: PUSH
38629: LD_INT 49
38631: PUSH
38632: LD_INT 50
38634: PUSH
38635: LD_INT 51
38637: PUSH
38638: LD_INT 52
38640: PUSH
38641: LD_INT 53
38643: PUSH
38644: LD_INT 54
38646: PUSH
38647: LD_INT 55
38649: PUSH
38650: LD_INT 56
38652: PUSH
38653: LD_INT 57
38655: PUSH
38656: LD_INT 58
38658: PUSH
38659: LD_INT 59
38661: PUSH
38662: LD_INT 60
38664: PUSH
38665: LD_INT 61
38667: PUSH
38668: LD_INT 62
38670: PUSH
38671: LD_INT 80
38673: PUSH
38674: LD_INT 82
38676: PUSH
38677: LD_INT 83
38679: PUSH
38680: LD_INT 84
38682: PUSH
38683: LD_INT 85
38685: PUSH
38686: LD_INT 86
38688: PUSH
38689: LD_INT 90
38691: PUSH
38692: LD_INT 93
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: ST_TO_ADDR
38750: GO 39233
38752: LD_INT 2
38754: DOUBLE
38755: EQUAL
38756: IFTRUE 38760
38758: GO 38994
38760: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
38761: LD_ADDR_VAR 0 4
38765: PUSH
38766: LD_INT 35
38768: PUSH
38769: LD_INT 45
38771: PUSH
38772: LD_INT 46
38774: PUSH
38775: LD_INT 47
38777: PUSH
38778: LD_INT 82
38780: PUSH
38781: LD_INT 83
38783: PUSH
38784: LD_INT 84
38786: PUSH
38787: LD_INT 85
38789: PUSH
38790: LD_INT 87
38792: PUSH
38793: LD_INT 70
38795: PUSH
38796: LD_INT 1
38798: PUSH
38799: LD_INT 11
38801: PUSH
38802: LD_INT 3
38804: PUSH
38805: LD_INT 4
38807: PUSH
38808: LD_INT 5
38810: PUSH
38811: LD_INT 6
38813: PUSH
38814: LD_INT 15
38816: PUSH
38817: LD_INT 18
38819: PUSH
38820: LD_INT 7
38822: PUSH
38823: LD_INT 17
38825: PUSH
38826: LD_INT 8
38828: PUSH
38829: LD_INT 20
38831: PUSH
38832: LD_INT 21
38834: PUSH
38835: LD_INT 22
38837: PUSH
38838: LD_INT 72
38840: PUSH
38841: LD_INT 26
38843: PUSH
38844: LD_INT 69
38846: PUSH
38847: LD_INT 39
38849: PUSH
38850: LD_INT 40
38852: PUSH
38853: LD_INT 41
38855: PUSH
38856: LD_INT 42
38858: PUSH
38859: LD_INT 43
38861: PUSH
38862: LD_INT 48
38864: PUSH
38865: LD_INT 49
38867: PUSH
38868: LD_INT 50
38870: PUSH
38871: LD_INT 51
38873: PUSH
38874: LD_INT 52
38876: PUSH
38877: LD_INT 53
38879: PUSH
38880: LD_INT 54
38882: PUSH
38883: LD_INT 55
38885: PUSH
38886: LD_INT 56
38888: PUSH
38889: LD_INT 60
38891: PUSH
38892: LD_INT 61
38894: PUSH
38895: LD_INT 62
38897: PUSH
38898: LD_INT 66
38900: PUSH
38901: LD_INT 67
38903: PUSH
38904: LD_INT 68
38906: PUSH
38907: LD_INT 81
38909: PUSH
38910: LD_INT 82
38912: PUSH
38913: LD_INT 83
38915: PUSH
38916: LD_INT 84
38918: PUSH
38919: LD_INT 85
38921: PUSH
38922: LD_INT 87
38924: PUSH
38925: LD_INT 88
38927: PUSH
38928: LD_INT 92
38930: PUSH
38931: LD_INT 94
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: ST_TO_ADDR
38992: GO 39233
38994: LD_INT 3
38996: DOUBLE
38997: EQUAL
38998: IFTRUE 39002
39000: GO 39232
39002: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
39003: LD_ADDR_VAR 0 4
39007: PUSH
39008: LD_INT 46
39010: PUSH
39011: LD_INT 47
39013: PUSH
39014: LD_INT 1
39016: PUSH
39017: LD_INT 2
39019: PUSH
39020: LD_INT 82
39022: PUSH
39023: LD_INT 83
39025: PUSH
39026: LD_INT 84
39028: PUSH
39029: LD_INT 85
39031: PUSH
39032: LD_INT 86
39034: PUSH
39035: LD_INT 11
39037: PUSH
39038: LD_INT 9
39040: PUSH
39041: LD_INT 20
39043: PUSH
39044: LD_INT 19
39046: PUSH
39047: LD_INT 21
39049: PUSH
39050: LD_INT 24
39052: PUSH
39053: LD_INT 22
39055: PUSH
39056: LD_INT 25
39058: PUSH
39059: LD_INT 28
39061: PUSH
39062: LD_INT 29
39064: PUSH
39065: LD_INT 30
39067: PUSH
39068: LD_INT 31
39070: PUSH
39071: LD_INT 37
39073: PUSH
39074: LD_INT 38
39076: PUSH
39077: LD_INT 32
39079: PUSH
39080: LD_INT 27
39082: PUSH
39083: LD_INT 33
39085: PUSH
39086: LD_INT 69
39088: PUSH
39089: LD_INT 39
39091: PUSH
39092: LD_INT 34
39094: PUSH
39095: LD_INT 40
39097: PUSH
39098: LD_INT 71
39100: PUSH
39101: LD_INT 23
39103: PUSH
39104: LD_INT 44
39106: PUSH
39107: LD_INT 48
39109: PUSH
39110: LD_INT 49
39112: PUSH
39113: LD_INT 50
39115: PUSH
39116: LD_INT 51
39118: PUSH
39119: LD_INT 52
39121: PUSH
39122: LD_INT 53
39124: PUSH
39125: LD_INT 54
39127: PUSH
39128: LD_INT 55
39130: PUSH
39131: LD_INT 56
39133: PUSH
39134: LD_INT 57
39136: PUSH
39137: LD_INT 58
39139: PUSH
39140: LD_INT 59
39142: PUSH
39143: LD_INT 63
39145: PUSH
39146: LD_INT 64
39148: PUSH
39149: LD_INT 65
39151: PUSH
39152: LD_INT 82
39154: PUSH
39155: LD_INT 83
39157: PUSH
39158: LD_INT 84
39160: PUSH
39161: LD_INT 85
39163: PUSH
39164: LD_INT 86
39166: PUSH
39167: LD_INT 89
39169: PUSH
39170: LD_INT 91
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: ST_TO_ADDR
39230: GO 39233
39232: POP
// if state > - 1 and state < 3 then
39233: LD_VAR 0 3
39237: PUSH
39238: LD_INT 1
39240: NEG
39241: GREATER
39242: IFFALSE 39254
39244: PUSH
39245: LD_VAR 0 3
39249: PUSH
39250: LD_INT 3
39252: LESS
39253: AND
39254: IFFALSE 39311
// for i in result do
39256: LD_ADDR_VAR 0 5
39260: PUSH
39261: LD_VAR 0 4
39265: PUSH
39266: FOR_IN
39267: IFFALSE 39309
// if GetTech ( i , side ) <> state then
39269: LD_VAR 0 5
39273: PPUSH
39274: LD_VAR 0 1
39278: PPUSH
39279: CALL_OW 321
39283: PUSH
39284: LD_VAR 0 3
39288: NONEQUAL
39289: IFFALSE 39307
// result := result diff i ;
39291: LD_ADDR_VAR 0 4
39295: PUSH
39296: LD_VAR 0 4
39300: PUSH
39301: LD_VAR 0 5
39305: DIFF
39306: ST_TO_ADDR
39307: GO 39266
39309: POP
39310: POP
// end ;
39311: LD_VAR 0 4
39315: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39316: LD_INT 0
39318: PPUSH
39319: PPUSH
39320: PPUSH
// result := true ;
39321: LD_ADDR_VAR 0 3
39325: PUSH
39326: LD_INT 1
39328: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39329: LD_ADDR_VAR 0 5
39333: PUSH
39334: LD_VAR 0 2
39338: PPUSH
39339: CALL_OW 480
39343: ST_TO_ADDR
// if not tmp then
39344: LD_VAR 0 5
39348: NOT
39349: IFFALSE 39353
// exit ;
39351: GO 39402
// for i in tmp do
39353: LD_ADDR_VAR 0 4
39357: PUSH
39358: LD_VAR 0 5
39362: PUSH
39363: FOR_IN
39364: IFFALSE 39400
// if GetTech ( i , side ) <> state_researched then
39366: LD_VAR 0 4
39370: PPUSH
39371: LD_VAR 0 1
39375: PPUSH
39376: CALL_OW 321
39380: PUSH
39381: LD_INT 2
39383: NONEQUAL
39384: IFFALSE 39398
// begin result := false ;
39386: LD_ADDR_VAR 0 3
39390: PUSH
39391: LD_INT 0
39393: ST_TO_ADDR
// exit ;
39394: POP
39395: POP
39396: GO 39402
// end ;
39398: GO 39363
39400: POP
39401: POP
// end ;
39402: LD_VAR 0 3
39406: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39407: LD_INT 0
39409: PPUSH
39410: PPUSH
39411: PPUSH
39412: PPUSH
39413: PPUSH
39414: PPUSH
39415: PPUSH
39416: PPUSH
39417: PPUSH
39418: PPUSH
39419: PPUSH
39420: PPUSH
39421: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39422: LD_VAR 0 1
39426: NOT
39427: IFTRUE 39444
39429: PUSH
39430: LD_VAR 0 1
39434: PPUSH
39435: CALL_OW 257
39439: PUSH
39440: LD_INT 9
39442: NONEQUAL
39443: OR
39444: IFFALSE 39448
// exit ;
39446: GO 40027
// side := GetSide ( unit ) ;
39448: LD_ADDR_VAR 0 9
39452: PUSH
39453: LD_VAR 0 1
39457: PPUSH
39458: CALL_OW 255
39462: ST_TO_ADDR
// tech_space := tech_spacanom ;
39463: LD_ADDR_VAR 0 12
39467: PUSH
39468: LD_INT 29
39470: ST_TO_ADDR
// tech_time := tech_taurad ;
39471: LD_ADDR_VAR 0 13
39475: PUSH
39476: LD_INT 28
39478: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39479: LD_ADDR_VAR 0 11
39483: PUSH
39484: LD_VAR 0 1
39488: PPUSH
39489: CALL_OW 310
39493: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39494: LD_VAR 0 11
39498: PPUSH
39499: CALL_OW 247
39503: PUSH
39504: LD_INT 2
39506: EQUAL
39507: IFFALSE 39511
// exit ;
39509: GO 40027
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39511: LD_ADDR_VAR 0 8
39515: PUSH
39516: LD_INT 81
39518: PUSH
39519: LD_VAR 0 9
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 3
39530: PUSH
39531: LD_INT 21
39533: PUSH
39534: LD_INT 3
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PPUSH
39549: CALL_OW 69
39553: ST_TO_ADDR
// if not tmp then
39554: LD_VAR 0 8
39558: NOT
39559: IFFALSE 39563
// exit ;
39561: GO 40027
// if in_unit then
39563: LD_VAR 0 11
39567: IFFALSE 39591
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39569: LD_ADDR_VAR 0 10
39573: PUSH
39574: LD_VAR 0 8
39578: PPUSH
39579: LD_VAR 0 11
39583: PPUSH
39584: CALL_OW 74
39588: ST_TO_ADDR
39589: GO 39611
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39591: LD_ADDR_VAR 0 10
39595: PUSH
39596: LD_VAR 0 8
39600: PPUSH
39601: LD_VAR 0 1
39605: PPUSH
39606: CALL_OW 74
39610: ST_TO_ADDR
// if not enemy then
39611: LD_VAR 0 10
39615: NOT
39616: IFFALSE 39620
// exit ;
39618: GO 40027
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39620: LD_VAR 0 11
39624: IFFALSE 39646
39626: PUSH
39627: LD_VAR 0 11
39631: PPUSH
39632: LD_VAR 0 10
39636: PPUSH
39637: CALL_OW 296
39641: PUSH
39642: LD_INT 13
39644: GREATER
39645: AND
39646: IFTRUE 39668
39648: PUSH
39649: LD_VAR 0 1
39653: PPUSH
39654: LD_VAR 0 10
39658: PPUSH
39659: CALL_OW 296
39663: PUSH
39664: LD_INT 12
39666: GREATER
39667: OR
39668: IFFALSE 39672
// exit ;
39670: GO 40027
// missile := [ 1 ] ;
39672: LD_ADDR_VAR 0 14
39676: PUSH
39677: LD_INT 1
39679: PUSH
39680: EMPTY
39681: LIST
39682: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39683: LD_VAR 0 9
39687: PPUSH
39688: LD_VAR 0 12
39692: PPUSH
39693: CALL_OW 325
39697: IFFALSE 39726
// missile := Replace ( missile , missile + 1 , 2 ) ;
39699: LD_ADDR_VAR 0 14
39703: PUSH
39704: LD_VAR 0 14
39708: PPUSH
39709: LD_VAR 0 14
39713: PUSH
39714: LD_INT 1
39716: PLUS
39717: PPUSH
39718: LD_INT 2
39720: PPUSH
39721: CALL_OW 1
39725: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39726: LD_VAR 0 9
39730: PPUSH
39731: LD_VAR 0 13
39735: PPUSH
39736: CALL_OW 325
39740: IFFALSE 39764
39742: PUSH
39743: LD_VAR 0 10
39747: PPUSH
39748: CALL_OW 255
39752: PPUSH
39753: LD_VAR 0 13
39757: PPUSH
39758: CALL_OW 325
39762: NOT
39763: AND
39764: IFFALSE 39793
// missile := Replace ( missile , missile + 1 , 3 ) ;
39766: LD_ADDR_VAR 0 14
39770: PUSH
39771: LD_VAR 0 14
39775: PPUSH
39776: LD_VAR 0 14
39780: PUSH
39781: LD_INT 1
39783: PLUS
39784: PPUSH
39785: LD_INT 3
39787: PPUSH
39788: CALL_OW 1
39792: ST_TO_ADDR
// if missile < 2 then
39793: LD_VAR 0 14
39797: PUSH
39798: LD_INT 2
39800: LESS
39801: IFFALSE 39805
// exit ;
39803: GO 40027
// x := GetX ( enemy ) ;
39805: LD_ADDR_VAR 0 4
39809: PUSH
39810: LD_VAR 0 10
39814: PPUSH
39815: CALL_OW 250
39819: ST_TO_ADDR
// y := GetY ( enemy ) ;
39820: LD_ADDR_VAR 0 5
39824: PUSH
39825: LD_VAR 0 10
39829: PPUSH
39830: CALL_OW 251
39834: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39835: LD_ADDR_VAR 0 6
39839: PUSH
39840: LD_VAR 0 4
39844: PUSH
39845: LD_INT 1
39847: NEG
39848: PPUSH
39849: LD_INT 1
39851: PPUSH
39852: CALL_OW 12
39856: PLUS
39857: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39858: LD_ADDR_VAR 0 7
39862: PUSH
39863: LD_VAR 0 5
39867: PUSH
39868: LD_INT 1
39870: NEG
39871: PPUSH
39872: LD_INT 1
39874: PPUSH
39875: CALL_OW 12
39879: PLUS
39880: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39881: LD_VAR 0 6
39885: PPUSH
39886: LD_VAR 0 7
39890: PPUSH
39891: CALL_OW 488
39895: NOT
39896: IFFALSE 39918
// begin _x := x ;
39898: LD_ADDR_VAR 0 6
39902: PUSH
39903: LD_VAR 0 4
39907: ST_TO_ADDR
// _y := y ;
39908: LD_ADDR_VAR 0 7
39912: PUSH
39913: LD_VAR 0 5
39917: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39918: LD_ADDR_VAR 0 3
39922: PUSH
39923: LD_INT 1
39925: PPUSH
39926: LD_VAR 0 14
39930: PPUSH
39931: CALL_OW 12
39935: ST_TO_ADDR
// case i of 1 :
39936: LD_VAR 0 3
39940: PUSH
39941: LD_INT 1
39943: DOUBLE
39944: EQUAL
39945: IFTRUE 39949
39947: GO 39966
39949: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39950: LD_VAR 0 1
39954: PPUSH
39955: LD_VAR 0 10
39959: PPUSH
39960: CALL_OW 115
39964: GO 40027
39966: LD_INT 2
39968: DOUBLE
39969: EQUAL
39970: IFTRUE 39974
39972: GO 39996
39974: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39975: LD_VAR 0 1
39979: PPUSH
39980: LD_VAR 0 6
39984: PPUSH
39985: LD_VAR 0 7
39989: PPUSH
39990: CALL_OW 153
39994: GO 40027
39996: LD_INT 3
39998: DOUBLE
39999: EQUAL
40000: IFTRUE 40004
40002: GO 40026
40004: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40005: LD_VAR 0 1
40009: PPUSH
40010: LD_VAR 0 6
40014: PPUSH
40015: LD_VAR 0 7
40019: PPUSH
40020: CALL_OW 154
40024: GO 40027
40026: POP
// end ;
40027: LD_VAR 0 2
40031: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40032: LD_INT 0
40034: PPUSH
40035: PPUSH
40036: PPUSH
40037: PPUSH
40038: PPUSH
40039: PPUSH
// if not unit or not building then
40040: LD_VAR 0 1
40044: NOT
40045: IFTRUE 40054
40047: PUSH
40048: LD_VAR 0 2
40052: NOT
40053: OR
40054: IFFALSE 40058
// exit ;
40056: GO 40216
// x := GetX ( building ) ;
40058: LD_ADDR_VAR 0 5
40062: PUSH
40063: LD_VAR 0 2
40067: PPUSH
40068: CALL_OW 250
40072: ST_TO_ADDR
// y := GetY ( building ) ;
40073: LD_ADDR_VAR 0 6
40077: PUSH
40078: LD_VAR 0 2
40082: PPUSH
40083: CALL_OW 251
40087: ST_TO_ADDR
// for i := 0 to 5 do
40088: LD_ADDR_VAR 0 4
40092: PUSH
40093: DOUBLE
40094: LD_INT 0
40096: DEC
40097: ST_TO_ADDR
40098: LD_INT 5
40100: PUSH
40101: FOR_TO
40102: IFFALSE 40214
// begin _x := ShiftX ( x , i , 3 ) ;
40104: LD_ADDR_VAR 0 7
40108: PUSH
40109: LD_VAR 0 5
40113: PPUSH
40114: LD_VAR 0 4
40118: PPUSH
40119: LD_INT 3
40121: PPUSH
40122: CALL_OW 272
40126: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40127: LD_ADDR_VAR 0 8
40131: PUSH
40132: LD_VAR 0 6
40136: PPUSH
40137: LD_VAR 0 4
40141: PPUSH
40142: LD_INT 3
40144: PPUSH
40145: CALL_OW 273
40149: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40150: LD_VAR 0 7
40154: PPUSH
40155: LD_VAR 0 8
40159: PPUSH
40160: CALL_OW 488
40164: NOT
40165: IFFALSE 40169
// continue ;
40167: GO 40101
// if HexInfo ( _x , _y ) = 0 then
40169: LD_VAR 0 7
40173: PPUSH
40174: LD_VAR 0 8
40178: PPUSH
40179: CALL_OW 428
40183: PUSH
40184: LD_INT 0
40186: EQUAL
40187: IFFALSE 40212
// begin ComMoveXY ( unit , _x , _y ) ;
40189: LD_VAR 0 1
40193: PPUSH
40194: LD_VAR 0 7
40198: PPUSH
40199: LD_VAR 0 8
40203: PPUSH
40204: CALL_OW 111
// exit ;
40208: POP
40209: POP
40210: GO 40216
// end ; end ;
40212: GO 40101
40214: POP
40215: POP
// end ;
40216: LD_VAR 0 3
40220: RET
// export function ScanBase ( side , base_area ) ; begin
40221: LD_INT 0
40223: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40224: LD_ADDR_VAR 0 3
40228: PUSH
40229: LD_VAR 0 2
40233: PPUSH
40234: LD_INT 81
40236: PUSH
40237: LD_VAR 0 1
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PPUSH
40246: CALL_OW 70
40250: ST_TO_ADDR
// end ;
40251: LD_VAR 0 3
40255: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40256: LD_INT 0
40258: PPUSH
40259: PPUSH
40260: PPUSH
40261: PPUSH
// result := false ;
40262: LD_ADDR_VAR 0 2
40266: PUSH
40267: LD_INT 0
40269: ST_TO_ADDR
// side := GetSide ( unit ) ;
40270: LD_ADDR_VAR 0 3
40274: PUSH
40275: LD_VAR 0 1
40279: PPUSH
40280: CALL_OW 255
40284: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40285: LD_ADDR_VAR 0 4
40289: PUSH
40290: LD_VAR 0 1
40294: PPUSH
40295: CALL_OW 248
40299: ST_TO_ADDR
// case nat of 1 :
40300: LD_VAR 0 4
40304: PUSH
40305: LD_INT 1
40307: DOUBLE
40308: EQUAL
40309: IFTRUE 40313
40311: GO 40324
40313: POP
// tech := tech_lassight ; 2 :
40314: LD_ADDR_VAR 0 5
40318: PUSH
40319: LD_INT 12
40321: ST_TO_ADDR
40322: GO 40363
40324: LD_INT 2
40326: DOUBLE
40327: EQUAL
40328: IFTRUE 40332
40330: GO 40343
40332: POP
// tech := tech_mortar ; 3 :
40333: LD_ADDR_VAR 0 5
40337: PUSH
40338: LD_INT 41
40340: ST_TO_ADDR
40341: GO 40363
40343: LD_INT 3
40345: DOUBLE
40346: EQUAL
40347: IFTRUE 40351
40349: GO 40362
40351: POP
// tech := tech_bazooka ; end ;
40352: LD_ADDR_VAR 0 5
40356: PUSH
40357: LD_INT 44
40359: ST_TO_ADDR
40360: GO 40363
40362: POP
// if Researched ( side , tech ) then
40363: LD_VAR 0 3
40367: PPUSH
40368: LD_VAR 0 5
40372: PPUSH
40373: CALL_OW 325
40377: IFFALSE 40404
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40379: LD_ADDR_VAR 0 2
40383: PUSH
40384: LD_INT 5
40386: PUSH
40387: LD_INT 8
40389: PUSH
40390: LD_INT 9
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: LIST
40397: PUSH
40398: LD_VAR 0 4
40402: ARRAY
40403: ST_TO_ADDR
// end ;
40404: LD_VAR 0 2
40408: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40409: LD_INT 0
40411: PPUSH
40412: PPUSH
40413: PPUSH
// if not mines then
40414: LD_VAR 0 2
40418: NOT
40419: IFFALSE 40423
// exit ;
40421: GO 40567
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40423: LD_ADDR_VAR 0 5
40427: PUSH
40428: LD_INT 81
40430: PUSH
40431: LD_VAR 0 1
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 3
40442: PUSH
40443: LD_INT 21
40445: PUSH
40446: LD_INT 3
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PPUSH
40461: CALL_OW 69
40465: ST_TO_ADDR
// for i in mines do
40466: LD_ADDR_VAR 0 4
40470: PUSH
40471: LD_VAR 0 2
40475: PUSH
40476: FOR_IN
40477: IFFALSE 40565
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40479: LD_VAR 0 4
40483: PUSH
40484: LD_INT 1
40486: ARRAY
40487: PPUSH
40488: LD_VAR 0 4
40492: PUSH
40493: LD_INT 2
40495: ARRAY
40496: PPUSH
40497: CALL_OW 458
40501: NOT
40502: IFFALSE 40506
// continue ;
40504: GO 40476
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40506: LD_VAR 0 4
40510: PUSH
40511: LD_INT 1
40513: ARRAY
40514: PPUSH
40515: LD_VAR 0 4
40519: PUSH
40520: LD_INT 2
40522: ARRAY
40523: PPUSH
40524: CALL_OW 428
40528: PUSH
40529: LD_VAR 0 5
40533: IN
40534: IFFALSE 40563
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40536: LD_VAR 0 4
40540: PUSH
40541: LD_INT 1
40543: ARRAY
40544: PPUSH
40545: LD_VAR 0 4
40549: PUSH
40550: LD_INT 2
40552: ARRAY
40553: PPUSH
40554: LD_VAR 0 1
40558: PPUSH
40559: CALL_OW 456
// end ;
40563: GO 40476
40565: POP
40566: POP
// end ;
40567: LD_VAR 0 3
40571: RET
// export function Count ( array ) ; begin
40572: LD_INT 0
40574: PPUSH
// result := array + 0 ;
40575: LD_ADDR_VAR 0 2
40579: PUSH
40580: LD_VAR 0 1
40584: PUSH
40585: LD_INT 0
40587: PLUS
40588: ST_TO_ADDR
// end ;
40589: LD_VAR 0 2
40593: RET
// export function IsEmpty ( building ) ; begin
40594: LD_INT 0
40596: PPUSH
// if not building then
40597: LD_VAR 0 1
40601: NOT
40602: IFFALSE 40606
// exit ;
40604: GO 40649
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40606: LD_ADDR_VAR 0 2
40610: PUSH
40611: LD_VAR 0 1
40615: PUSH
40616: LD_INT 22
40618: PUSH
40619: LD_VAR 0 1
40623: PPUSH
40624: CALL_OW 255
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 58
40635: PUSH
40636: EMPTY
40637: LIST
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PPUSH
40643: CALL_OW 69
40647: IN
40648: ST_TO_ADDR
// end ;
40649: LD_VAR 0 2
40653: RET
// export function IsNotFull ( building ) ; var places ; begin
40654: LD_INT 0
40656: PPUSH
40657: PPUSH
// if not building then
40658: LD_VAR 0 1
40662: NOT
40663: IFFALSE 40667
// exit ;
40665: GO 40695
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
40667: LD_ADDR_VAR 0 2
40671: PUSH
40672: LD_VAR 0 1
40676: PPUSH
40677: LD_INT 3
40679: PUSH
40680: LD_INT 62
40682: PUSH
40683: EMPTY
40684: LIST
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PPUSH
40690: CALL_OW 72
40694: ST_TO_ADDR
// end ;
40695: LD_VAR 0 2
40699: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40700: LD_INT 0
40702: PPUSH
40703: PPUSH
40704: PPUSH
40705: PPUSH
// tmp := [ ] ;
40706: LD_ADDR_VAR 0 3
40710: PUSH
40711: EMPTY
40712: ST_TO_ADDR
// list := [ ] ;
40713: LD_ADDR_VAR 0 5
40717: PUSH
40718: EMPTY
40719: ST_TO_ADDR
// for i = 16 to 25 do
40720: LD_ADDR_VAR 0 4
40724: PUSH
40725: DOUBLE
40726: LD_INT 16
40728: DEC
40729: ST_TO_ADDR
40730: LD_INT 25
40732: PUSH
40733: FOR_TO
40734: IFFALSE 40807
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40736: LD_ADDR_VAR 0 3
40740: PUSH
40741: LD_VAR 0 3
40745: PUSH
40746: LD_INT 22
40748: PUSH
40749: LD_VAR 0 1
40753: PPUSH
40754: CALL_OW 255
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 91
40765: PUSH
40766: LD_VAR 0 1
40770: PUSH
40771: LD_INT 6
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 30
40781: PUSH
40782: LD_VAR 0 4
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: LIST
40795: PUSH
40796: EMPTY
40797: LIST
40798: PPUSH
40799: CALL_OW 69
40803: ADD
40804: ST_TO_ADDR
40805: GO 40733
40807: POP
40808: POP
// for i = 1 to tmp do
40809: LD_ADDR_VAR 0 4
40813: PUSH
40814: DOUBLE
40815: LD_INT 1
40817: DEC
40818: ST_TO_ADDR
40819: LD_VAR 0 3
40823: PUSH
40824: FOR_TO
40825: IFFALSE 40913
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40827: LD_ADDR_VAR 0 5
40831: PUSH
40832: LD_VAR 0 5
40836: PUSH
40837: LD_VAR 0 3
40841: PUSH
40842: LD_VAR 0 4
40846: ARRAY
40847: PPUSH
40848: CALL_OW 266
40852: PUSH
40853: LD_VAR 0 3
40857: PUSH
40858: LD_VAR 0 4
40862: ARRAY
40863: PPUSH
40864: CALL_OW 250
40868: PUSH
40869: LD_VAR 0 3
40873: PUSH
40874: LD_VAR 0 4
40878: ARRAY
40879: PPUSH
40880: CALL_OW 251
40884: PUSH
40885: LD_VAR 0 3
40889: PUSH
40890: LD_VAR 0 4
40894: ARRAY
40895: PPUSH
40896: CALL_OW 254
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: PUSH
40907: EMPTY
40908: LIST
40909: ADD
40910: ST_TO_ADDR
40911: GO 40824
40913: POP
40914: POP
// result := list ;
40915: LD_ADDR_VAR 0 2
40919: PUSH
40920: LD_VAR 0 5
40924: ST_TO_ADDR
// end ;
40925: LD_VAR 0 2
40929: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40930: LD_INT 0
40932: PPUSH
40933: PPUSH
40934: PPUSH
40935: PPUSH
40936: PPUSH
40937: PPUSH
40938: PPUSH
// if not factory then
40939: LD_VAR 0 1
40943: NOT
40944: IFFALSE 40948
// exit ;
40946: GO 41551
// if control = control_apeman then
40948: LD_VAR 0 4
40952: PUSH
40953: LD_INT 5
40955: EQUAL
40956: IFFALSE 41065
// begin tmp := UnitsInside ( factory ) ;
40958: LD_ADDR_VAR 0 8
40962: PUSH
40963: LD_VAR 0 1
40967: PPUSH
40968: CALL_OW 313
40972: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40973: LD_VAR 0 8
40977: PPUSH
40978: LD_INT 25
40980: PUSH
40981: LD_INT 12
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PPUSH
40988: CALL_OW 72
40992: NOT
40993: IFFALSE 41003
// control := control_manual ;
40995: LD_ADDR_VAR 0 4
40999: PUSH
41000: LD_INT 1
41002: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41003: LD_ADDR_VAR 0 8
41007: PUSH
41008: LD_VAR 0 1
41012: PPUSH
41013: CALL 40700 0 1
41017: ST_TO_ADDR
// if tmp then
41018: LD_VAR 0 8
41022: IFFALSE 41065
// begin for i in tmp do
41024: LD_ADDR_VAR 0 7
41028: PUSH
41029: LD_VAR 0 8
41033: PUSH
41034: FOR_IN
41035: IFFALSE 41063
// if i [ 1 ] = b_ext_radio then
41037: LD_VAR 0 7
41041: PUSH
41042: LD_INT 1
41044: ARRAY
41045: PUSH
41046: LD_INT 22
41048: EQUAL
41049: IFFALSE 41061
// begin control := control_remote ;
41051: LD_ADDR_VAR 0 4
41055: PUSH
41056: LD_INT 2
41058: ST_TO_ADDR
// break ;
41059: GO 41063
// end ;
41061: GO 41034
41063: POP
41064: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41065: LD_VAR 0 1
41069: PPUSH
41070: LD_VAR 0 2
41074: PPUSH
41075: LD_VAR 0 3
41079: PPUSH
41080: LD_VAR 0 4
41084: PPUSH
41085: LD_VAR 0 5
41089: PPUSH
41090: CALL_OW 448
41094: IFFALSE 41129
// begin result := [ chassis , engine , control , weapon ] ;
41096: LD_ADDR_VAR 0 6
41100: PUSH
41101: LD_VAR 0 2
41105: PUSH
41106: LD_VAR 0 3
41110: PUSH
41111: LD_VAR 0 4
41115: PUSH
41116: LD_VAR 0 5
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: ST_TO_ADDR
// exit ;
41127: GO 41551
// end ; _chassis := AvailableChassisList ( factory ) ;
41129: LD_ADDR_VAR 0 9
41133: PUSH
41134: LD_VAR 0 1
41138: PPUSH
41139: CALL_OW 475
41143: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41144: LD_ADDR_VAR 0 11
41148: PUSH
41149: LD_VAR 0 1
41153: PPUSH
41154: CALL_OW 476
41158: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41159: LD_ADDR_VAR 0 12
41163: PUSH
41164: LD_VAR 0 1
41168: PPUSH
41169: CALL_OW 477
41173: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41174: LD_ADDR_VAR 0 10
41178: PUSH
41179: LD_VAR 0 1
41183: PPUSH
41184: CALL_OW 478
41188: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41189: LD_VAR 0 9
41193: NOT
41194: IFTRUE 41203
41196: PUSH
41197: LD_VAR 0 11
41201: NOT
41202: OR
41203: IFTRUE 41212
41205: PUSH
41206: LD_VAR 0 12
41210: NOT
41211: OR
41212: IFTRUE 41221
41214: PUSH
41215: LD_VAR 0 10
41219: NOT
41220: OR
41221: IFFALSE 41256
// begin result := [ chassis , engine , control , weapon ] ;
41223: LD_ADDR_VAR 0 6
41227: PUSH
41228: LD_VAR 0 2
41232: PUSH
41233: LD_VAR 0 3
41237: PUSH
41238: LD_VAR 0 4
41242: PUSH
41243: LD_VAR 0 5
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: ST_TO_ADDR
// exit ;
41254: GO 41551
// end ; if not chassis in _chassis then
41256: LD_VAR 0 2
41260: PUSH
41261: LD_VAR 0 9
41265: IN
41266: NOT
41267: IFFALSE 41293
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41269: LD_ADDR_VAR 0 2
41273: PUSH
41274: LD_VAR 0 9
41278: PUSH
41279: LD_INT 1
41281: PPUSH
41282: LD_VAR 0 9
41286: PPUSH
41287: CALL_OW 12
41291: ARRAY
41292: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41293: LD_VAR 0 2
41297: PPUSH
41298: LD_VAR 0 3
41302: PPUSH
41303: CALL 41556 0 2
41307: NOT
41308: IFFALSE 41369
// repeat engine := _engine [ 1 ] ;
41310: LD_ADDR_VAR 0 3
41314: PUSH
41315: LD_VAR 0 11
41319: PUSH
41320: LD_INT 1
41322: ARRAY
41323: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41324: LD_ADDR_VAR 0 11
41328: PUSH
41329: LD_VAR 0 11
41333: PPUSH
41334: LD_INT 1
41336: PPUSH
41337: CALL_OW 3
41341: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41342: LD_VAR 0 2
41346: PPUSH
41347: LD_VAR 0 3
41351: PPUSH
41352: CALL 41556 0 2
41356: IFTRUE 41367
41358: PUSH
41359: LD_VAR 0 11
41363: PUSH
41364: EMPTY
41365: EQUAL
41366: OR
41367: IFFALSE 41310
// if not control in _control then
41369: LD_VAR 0 4
41373: PUSH
41374: LD_VAR 0 12
41378: IN
41379: NOT
41380: IFFALSE 41406
// control := _control [ rand ( 1 , _control ) ] ;
41382: LD_ADDR_VAR 0 4
41386: PUSH
41387: LD_VAR 0 12
41391: PUSH
41392: LD_INT 1
41394: PPUSH
41395: LD_VAR 0 12
41399: PPUSH
41400: CALL_OW 12
41404: ARRAY
41405: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41406: LD_VAR 0 2
41410: PPUSH
41411: LD_VAR 0 5
41415: PPUSH
41416: CALL 41778 0 2
41420: NOT
41421: IFFALSE 41482
// repeat weapon := _weapon [ 1 ] ;
41423: LD_ADDR_VAR 0 5
41427: PUSH
41428: LD_VAR 0 10
41432: PUSH
41433: LD_INT 1
41435: ARRAY
41436: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41437: LD_ADDR_VAR 0 10
41441: PUSH
41442: LD_VAR 0 10
41446: PPUSH
41447: LD_INT 1
41449: PPUSH
41450: CALL_OW 3
41454: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41455: LD_VAR 0 2
41459: PPUSH
41460: LD_VAR 0 5
41464: PPUSH
41465: CALL 41778 0 2
41469: IFTRUE 41480
41471: PUSH
41472: LD_VAR 0 10
41476: PUSH
41477: EMPTY
41478: EQUAL
41479: OR
41480: IFFALSE 41423
// result := [ ] ;
41482: LD_ADDR_VAR 0 6
41486: PUSH
41487: EMPTY
41488: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41489: LD_VAR 0 1
41493: PPUSH
41494: LD_VAR 0 2
41498: PPUSH
41499: LD_VAR 0 3
41503: PPUSH
41504: LD_VAR 0 4
41508: PPUSH
41509: LD_VAR 0 5
41513: PPUSH
41514: CALL_OW 448
41518: IFFALSE 41551
// result := [ chassis , engine , control , weapon ] ;
41520: LD_ADDR_VAR 0 6
41524: PUSH
41525: LD_VAR 0 2
41529: PUSH
41530: LD_VAR 0 3
41534: PUSH
41535: LD_VAR 0 4
41539: PUSH
41540: LD_VAR 0 5
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: ST_TO_ADDR
// end ;
41551: LD_VAR 0 6
41555: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41556: LD_INT 0
41558: PPUSH
// if not chassis or not engine then
41559: LD_VAR 0 1
41563: NOT
41564: IFTRUE 41573
41566: PUSH
41567: LD_VAR 0 2
41571: NOT
41572: OR
41573: IFFALSE 41577
// exit ;
41575: GO 41773
// case engine of engine_solar :
41577: LD_VAR 0 2
41581: PUSH
41582: LD_INT 2
41584: DOUBLE
41585: EQUAL
41586: IFTRUE 41590
41588: GO 41628
41590: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41591: LD_ADDR_VAR 0 3
41595: PUSH
41596: LD_INT 11
41598: PUSH
41599: LD_INT 12
41601: PUSH
41602: LD_INT 13
41604: PUSH
41605: LD_INT 14
41607: PUSH
41608: LD_INT 1
41610: PUSH
41611: LD_INT 2
41613: PUSH
41614: LD_INT 3
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: ST_TO_ADDR
41626: GO 41757
41628: LD_INT 1
41630: DOUBLE
41631: EQUAL
41632: IFTRUE 41636
41634: GO 41698
41636: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41637: LD_ADDR_VAR 0 3
41641: PUSH
41642: LD_INT 11
41644: PUSH
41645: LD_INT 12
41647: PUSH
41648: LD_INT 13
41650: PUSH
41651: LD_INT 14
41653: PUSH
41654: LD_INT 1
41656: PUSH
41657: LD_INT 2
41659: PUSH
41660: LD_INT 3
41662: PUSH
41663: LD_INT 4
41665: PUSH
41666: LD_INT 5
41668: PUSH
41669: LD_INT 21
41671: PUSH
41672: LD_INT 23
41674: PUSH
41675: LD_INT 22
41677: PUSH
41678: LD_INT 24
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: LIST
41685: LIST
41686: LIST
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: ST_TO_ADDR
41696: GO 41757
41698: LD_INT 3
41700: DOUBLE
41701: EQUAL
41702: IFTRUE 41706
41704: GO 41756
41706: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41707: LD_ADDR_VAR 0 3
41711: PUSH
41712: LD_INT 13
41714: PUSH
41715: LD_INT 14
41717: PUSH
41718: LD_INT 2
41720: PUSH
41721: LD_INT 3
41723: PUSH
41724: LD_INT 4
41726: PUSH
41727: LD_INT 5
41729: PUSH
41730: LD_INT 21
41732: PUSH
41733: LD_INT 22
41735: PUSH
41736: LD_INT 23
41738: PUSH
41739: LD_INT 24
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: ST_TO_ADDR
41754: GO 41757
41756: POP
// result := ( chassis in result ) ;
41757: LD_ADDR_VAR 0 3
41761: PUSH
41762: LD_VAR 0 1
41766: PUSH
41767: LD_VAR 0 3
41771: IN
41772: ST_TO_ADDR
// end ;
41773: LD_VAR 0 3
41777: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41778: LD_INT 0
41780: PPUSH
// if not chassis or not weapon then
41781: LD_VAR 0 1
41785: NOT
41786: IFTRUE 41795
41788: PUSH
41789: LD_VAR 0 2
41793: NOT
41794: OR
41795: IFFALSE 41799
// exit ;
41797: GO 42893
// case weapon of us_machine_gun :
41799: LD_VAR 0 2
41803: PUSH
41804: LD_INT 2
41806: DOUBLE
41807: EQUAL
41808: IFTRUE 41812
41810: GO 41842
41812: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41813: LD_ADDR_VAR 0 3
41817: PUSH
41818: LD_INT 1
41820: PUSH
41821: LD_INT 2
41823: PUSH
41824: LD_INT 3
41826: PUSH
41827: LD_INT 4
41829: PUSH
41830: LD_INT 5
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: ST_TO_ADDR
41840: GO 42877
41842: LD_INT 3
41844: DOUBLE
41845: EQUAL
41846: IFTRUE 41850
41848: GO 41880
41850: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41851: LD_ADDR_VAR 0 3
41855: PUSH
41856: LD_INT 1
41858: PUSH
41859: LD_INT 2
41861: PUSH
41862: LD_INT 3
41864: PUSH
41865: LD_INT 4
41867: PUSH
41868: LD_INT 5
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: ST_TO_ADDR
41878: GO 42877
41880: LD_INT 11
41882: DOUBLE
41883: EQUAL
41884: IFTRUE 41888
41886: GO 41918
41888: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41889: LD_ADDR_VAR 0 3
41893: PUSH
41894: LD_INT 1
41896: PUSH
41897: LD_INT 2
41899: PUSH
41900: LD_INT 3
41902: PUSH
41903: LD_INT 4
41905: PUSH
41906: LD_INT 5
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: ST_TO_ADDR
41916: GO 42877
41918: LD_INT 4
41920: DOUBLE
41921: EQUAL
41922: IFTRUE 41926
41924: GO 41952
41926: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41927: LD_ADDR_VAR 0 3
41931: PUSH
41932: LD_INT 2
41934: PUSH
41935: LD_INT 3
41937: PUSH
41938: LD_INT 4
41940: PUSH
41941: LD_INT 5
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: ST_TO_ADDR
41950: GO 42877
41952: LD_INT 5
41954: DOUBLE
41955: EQUAL
41956: IFTRUE 41960
41958: GO 41986
41960: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41961: LD_ADDR_VAR 0 3
41965: PUSH
41966: LD_INT 2
41968: PUSH
41969: LD_INT 3
41971: PUSH
41972: LD_INT 4
41974: PUSH
41975: LD_INT 5
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: LIST
41982: LIST
41983: ST_TO_ADDR
41984: GO 42877
41986: LD_INT 9
41988: DOUBLE
41989: EQUAL
41990: IFTRUE 41994
41992: GO 42020
41994: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41995: LD_ADDR_VAR 0 3
41999: PUSH
42000: LD_INT 2
42002: PUSH
42003: LD_INT 3
42005: PUSH
42006: LD_INT 4
42008: PUSH
42009: LD_INT 5
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: ST_TO_ADDR
42018: GO 42877
42020: LD_INT 7
42022: DOUBLE
42023: EQUAL
42024: IFTRUE 42028
42026: GO 42054
42028: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42029: LD_ADDR_VAR 0 3
42033: PUSH
42034: LD_INT 2
42036: PUSH
42037: LD_INT 3
42039: PUSH
42040: LD_INT 4
42042: PUSH
42043: LD_INT 5
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: ST_TO_ADDR
42052: GO 42877
42054: LD_INT 12
42056: DOUBLE
42057: EQUAL
42058: IFTRUE 42062
42060: GO 42088
42062: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42063: LD_ADDR_VAR 0 3
42067: PUSH
42068: LD_INT 2
42070: PUSH
42071: LD_INT 3
42073: PUSH
42074: LD_INT 4
42076: PUSH
42077: LD_INT 5
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: ST_TO_ADDR
42086: GO 42877
42088: LD_INT 13
42090: DOUBLE
42091: EQUAL
42092: IFTRUE 42096
42094: GO 42122
42096: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42097: LD_ADDR_VAR 0 3
42101: PUSH
42102: LD_INT 2
42104: PUSH
42105: LD_INT 3
42107: PUSH
42108: LD_INT 4
42110: PUSH
42111: LD_INT 5
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: ST_TO_ADDR
42120: GO 42877
42122: LD_INT 14
42124: DOUBLE
42125: EQUAL
42126: IFTRUE 42130
42128: GO 42148
42130: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42131: LD_ADDR_VAR 0 3
42135: PUSH
42136: LD_INT 4
42138: PUSH
42139: LD_INT 5
42141: PUSH
42142: EMPTY
42143: LIST
42144: LIST
42145: ST_TO_ADDR
42146: GO 42877
42148: LD_INT 6
42150: DOUBLE
42151: EQUAL
42152: IFTRUE 42156
42154: GO 42174
42156: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42157: LD_ADDR_VAR 0 3
42161: PUSH
42162: LD_INT 4
42164: PUSH
42165: LD_INT 5
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: ST_TO_ADDR
42172: GO 42877
42174: LD_INT 10
42176: DOUBLE
42177: EQUAL
42178: IFTRUE 42182
42180: GO 42200
42182: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42183: LD_ADDR_VAR 0 3
42187: PUSH
42188: LD_INT 4
42190: PUSH
42191: LD_INT 5
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: ST_TO_ADDR
42198: GO 42877
42200: LD_INT 22
42202: DOUBLE
42203: EQUAL
42204: IFTRUE 42208
42206: GO 42234
42208: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42209: LD_ADDR_VAR 0 3
42213: PUSH
42214: LD_INT 11
42216: PUSH
42217: LD_INT 12
42219: PUSH
42220: LD_INT 13
42222: PUSH
42223: LD_INT 14
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: ST_TO_ADDR
42232: GO 42877
42234: LD_INT 23
42236: DOUBLE
42237: EQUAL
42238: IFTRUE 42242
42240: GO 42268
42242: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42243: LD_ADDR_VAR 0 3
42247: PUSH
42248: LD_INT 11
42250: PUSH
42251: LD_INT 12
42253: PUSH
42254: LD_INT 13
42256: PUSH
42257: LD_INT 14
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: ST_TO_ADDR
42266: GO 42877
42268: LD_INT 24
42270: DOUBLE
42271: EQUAL
42272: IFTRUE 42276
42274: GO 42302
42276: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42277: LD_ADDR_VAR 0 3
42281: PUSH
42282: LD_INT 11
42284: PUSH
42285: LD_INT 12
42287: PUSH
42288: LD_INT 13
42290: PUSH
42291: LD_INT 14
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: ST_TO_ADDR
42300: GO 42877
42302: LD_INT 30
42304: DOUBLE
42305: EQUAL
42306: IFTRUE 42310
42308: GO 42336
42310: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42311: LD_ADDR_VAR 0 3
42315: PUSH
42316: LD_INT 11
42318: PUSH
42319: LD_INT 12
42321: PUSH
42322: LD_INT 13
42324: PUSH
42325: LD_INT 14
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: ST_TO_ADDR
42334: GO 42877
42336: LD_INT 25
42338: DOUBLE
42339: EQUAL
42340: IFTRUE 42344
42342: GO 42362
42344: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42345: LD_ADDR_VAR 0 3
42349: PUSH
42350: LD_INT 13
42352: PUSH
42353: LD_INT 14
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: ST_TO_ADDR
42360: GO 42877
42362: LD_INT 27
42364: DOUBLE
42365: EQUAL
42366: IFTRUE 42370
42368: GO 42388
42370: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42371: LD_ADDR_VAR 0 3
42375: PUSH
42376: LD_INT 13
42378: PUSH
42379: LD_INT 14
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: ST_TO_ADDR
42386: GO 42877
42388: LD_INT 92
42390: DOUBLE
42391: EQUAL
42392: IFTRUE 42396
42394: GO 42422
42396: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42397: LD_ADDR_VAR 0 3
42401: PUSH
42402: LD_INT 11
42404: PUSH
42405: LD_INT 12
42407: PUSH
42408: LD_INT 13
42410: PUSH
42411: LD_INT 14
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: ST_TO_ADDR
42420: GO 42877
42422: LD_INT 28
42424: DOUBLE
42425: EQUAL
42426: IFTRUE 42430
42428: GO 42448
42430: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42431: LD_ADDR_VAR 0 3
42435: PUSH
42436: LD_INT 13
42438: PUSH
42439: LD_INT 14
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: ST_TO_ADDR
42446: GO 42877
42448: LD_INT 29
42450: DOUBLE
42451: EQUAL
42452: IFTRUE 42456
42454: GO 42474
42456: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42457: LD_ADDR_VAR 0 3
42461: PUSH
42462: LD_INT 13
42464: PUSH
42465: LD_INT 14
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: ST_TO_ADDR
42472: GO 42877
42474: LD_INT 31
42476: DOUBLE
42477: EQUAL
42478: IFTRUE 42482
42480: GO 42500
42482: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42483: LD_ADDR_VAR 0 3
42487: PUSH
42488: LD_INT 13
42490: PUSH
42491: LD_INT 14
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: ST_TO_ADDR
42498: GO 42877
42500: LD_INT 26
42502: DOUBLE
42503: EQUAL
42504: IFTRUE 42508
42506: GO 42526
42508: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42509: LD_ADDR_VAR 0 3
42513: PUSH
42514: LD_INT 13
42516: PUSH
42517: LD_INT 14
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: ST_TO_ADDR
42524: GO 42877
42526: LD_INT 42
42528: DOUBLE
42529: EQUAL
42530: IFTRUE 42534
42532: GO 42560
42534: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42535: LD_ADDR_VAR 0 3
42539: PUSH
42540: LD_INT 21
42542: PUSH
42543: LD_INT 22
42545: PUSH
42546: LD_INT 23
42548: PUSH
42549: LD_INT 24
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: ST_TO_ADDR
42558: GO 42877
42560: LD_INT 43
42562: DOUBLE
42563: EQUAL
42564: IFTRUE 42568
42566: GO 42594
42568: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42569: LD_ADDR_VAR 0 3
42573: PUSH
42574: LD_INT 21
42576: PUSH
42577: LD_INT 22
42579: PUSH
42580: LD_INT 23
42582: PUSH
42583: LD_INT 24
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: ST_TO_ADDR
42592: GO 42877
42594: LD_INT 44
42596: DOUBLE
42597: EQUAL
42598: IFTRUE 42602
42600: GO 42628
42602: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42603: LD_ADDR_VAR 0 3
42607: PUSH
42608: LD_INT 21
42610: PUSH
42611: LD_INT 22
42613: PUSH
42614: LD_INT 23
42616: PUSH
42617: LD_INT 24
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: ST_TO_ADDR
42626: GO 42877
42628: LD_INT 45
42630: DOUBLE
42631: EQUAL
42632: IFTRUE 42636
42634: GO 42662
42636: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42637: LD_ADDR_VAR 0 3
42641: PUSH
42642: LD_INT 21
42644: PUSH
42645: LD_INT 22
42647: PUSH
42648: LD_INT 23
42650: PUSH
42651: LD_INT 24
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: ST_TO_ADDR
42660: GO 42877
42662: LD_INT 49
42664: DOUBLE
42665: EQUAL
42666: IFTRUE 42670
42668: GO 42696
42670: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42671: LD_ADDR_VAR 0 3
42675: PUSH
42676: LD_INT 21
42678: PUSH
42679: LD_INT 22
42681: PUSH
42682: LD_INT 23
42684: PUSH
42685: LD_INT 24
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: ST_TO_ADDR
42694: GO 42877
42696: LD_INT 51
42698: DOUBLE
42699: EQUAL
42700: IFTRUE 42704
42702: GO 42730
42704: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42705: LD_ADDR_VAR 0 3
42709: PUSH
42710: LD_INT 21
42712: PUSH
42713: LD_INT 22
42715: PUSH
42716: LD_INT 23
42718: PUSH
42719: LD_INT 24
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: ST_TO_ADDR
42728: GO 42877
42730: LD_INT 52
42732: DOUBLE
42733: EQUAL
42734: IFTRUE 42738
42736: GO 42764
42738: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42739: LD_ADDR_VAR 0 3
42743: PUSH
42744: LD_INT 21
42746: PUSH
42747: LD_INT 22
42749: PUSH
42750: LD_INT 23
42752: PUSH
42753: LD_INT 24
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: ST_TO_ADDR
42762: GO 42877
42764: LD_INT 53
42766: DOUBLE
42767: EQUAL
42768: IFTRUE 42772
42770: GO 42790
42772: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42773: LD_ADDR_VAR 0 3
42777: PUSH
42778: LD_INT 23
42780: PUSH
42781: LD_INT 24
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: ST_TO_ADDR
42788: GO 42877
42790: LD_INT 46
42792: DOUBLE
42793: EQUAL
42794: IFTRUE 42798
42796: GO 42816
42798: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42799: LD_ADDR_VAR 0 3
42803: PUSH
42804: LD_INT 23
42806: PUSH
42807: LD_INT 24
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: ST_TO_ADDR
42814: GO 42877
42816: LD_INT 47
42818: DOUBLE
42819: EQUAL
42820: IFTRUE 42824
42822: GO 42842
42824: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
42825: LD_ADDR_VAR 0 3
42829: PUSH
42830: LD_INT 23
42832: PUSH
42833: LD_INT 24
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: ST_TO_ADDR
42840: GO 42877
42842: LD_INT 98
42844: DOUBLE
42845: EQUAL
42846: IFTRUE 42850
42848: GO 42876
42850: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42851: LD_ADDR_VAR 0 3
42855: PUSH
42856: LD_INT 21
42858: PUSH
42859: LD_INT 22
42861: PUSH
42862: LD_INT 23
42864: PUSH
42865: LD_INT 24
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: ST_TO_ADDR
42874: GO 42877
42876: POP
// result := ( chassis in result ) ;
42877: LD_ADDR_VAR 0 3
42881: PUSH
42882: LD_VAR 0 1
42886: PUSH
42887: LD_VAR 0 3
42891: IN
42892: ST_TO_ADDR
// end ;
42893: LD_VAR 0 3
42897: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42898: LD_INT 0
42900: PPUSH
42901: PPUSH
42902: PPUSH
42903: PPUSH
42904: PPUSH
42905: PPUSH
42906: PPUSH
// result := array ;
42907: LD_ADDR_VAR 0 5
42911: PUSH
42912: LD_VAR 0 1
42916: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42917: LD_VAR 0 1
42921: NOT
42922: IFTRUE 42931
42924: PUSH
42925: LD_VAR 0 2
42929: NOT
42930: OR
42931: IFTRUE 42940
42933: PUSH
42934: LD_VAR 0 3
42938: NOT
42939: OR
42940: IFTRUE 42954
42942: PUSH
42943: LD_VAR 0 2
42947: PUSH
42948: LD_VAR 0 1
42952: GREATER
42953: OR
42954: IFTRUE 42968
42956: PUSH
42957: LD_VAR 0 3
42961: PUSH
42962: LD_VAR 0 1
42966: GREATER
42967: OR
42968: IFFALSE 42972
// exit ;
42970: GO 43268
// if direction then
42972: LD_VAR 0 4
42976: IFFALSE 43040
// begin d := 1 ;
42978: LD_ADDR_VAR 0 9
42982: PUSH
42983: LD_INT 1
42985: ST_TO_ADDR
// if i_from > i_to then
42986: LD_VAR 0 2
42990: PUSH
42991: LD_VAR 0 3
42995: GREATER
42996: IFFALSE 43022
// length := ( array - i_from ) + i_to else
42998: LD_ADDR_VAR 0 11
43002: PUSH
43003: LD_VAR 0 1
43007: PUSH
43008: LD_VAR 0 2
43012: MINUS
43013: PUSH
43014: LD_VAR 0 3
43018: PLUS
43019: ST_TO_ADDR
43020: GO 43038
// length := i_to - i_from ;
43022: LD_ADDR_VAR 0 11
43026: PUSH
43027: LD_VAR 0 3
43031: PUSH
43032: LD_VAR 0 2
43036: MINUS
43037: ST_TO_ADDR
// end else
43038: GO 43101
// begin d := - 1 ;
43040: LD_ADDR_VAR 0 9
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: ST_TO_ADDR
// if i_from > i_to then
43049: LD_VAR 0 2
43053: PUSH
43054: LD_VAR 0 3
43058: GREATER
43059: IFFALSE 43079
// length := i_from - i_to else
43061: LD_ADDR_VAR 0 11
43065: PUSH
43066: LD_VAR 0 2
43070: PUSH
43071: LD_VAR 0 3
43075: MINUS
43076: ST_TO_ADDR
43077: GO 43101
// length := ( array - i_to ) + i_from ;
43079: LD_ADDR_VAR 0 11
43083: PUSH
43084: LD_VAR 0 1
43088: PUSH
43089: LD_VAR 0 3
43093: MINUS
43094: PUSH
43095: LD_VAR 0 2
43099: PLUS
43100: ST_TO_ADDR
// end ; if not length then
43101: LD_VAR 0 11
43105: NOT
43106: IFFALSE 43110
// exit ;
43108: GO 43268
// tmp := array ;
43110: LD_ADDR_VAR 0 10
43114: PUSH
43115: LD_VAR 0 1
43119: ST_TO_ADDR
// for i = 1 to length do
43120: LD_ADDR_VAR 0 6
43124: PUSH
43125: DOUBLE
43126: LD_INT 1
43128: DEC
43129: ST_TO_ADDR
43130: LD_VAR 0 11
43134: PUSH
43135: FOR_TO
43136: IFFALSE 43256
// begin for j = 1 to array do
43138: LD_ADDR_VAR 0 7
43142: PUSH
43143: DOUBLE
43144: LD_INT 1
43146: DEC
43147: ST_TO_ADDR
43148: LD_VAR 0 1
43152: PUSH
43153: FOR_TO
43154: IFFALSE 43242
// begin k := j + d ;
43156: LD_ADDR_VAR 0 8
43160: PUSH
43161: LD_VAR 0 7
43165: PUSH
43166: LD_VAR 0 9
43170: PLUS
43171: ST_TO_ADDR
// if k > array then
43172: LD_VAR 0 8
43176: PUSH
43177: LD_VAR 0 1
43181: GREATER
43182: IFFALSE 43192
// k := 1 ;
43184: LD_ADDR_VAR 0 8
43188: PUSH
43189: LD_INT 1
43191: ST_TO_ADDR
// if not k then
43192: LD_VAR 0 8
43196: NOT
43197: IFFALSE 43209
// k := array ;
43199: LD_ADDR_VAR 0 8
43203: PUSH
43204: LD_VAR 0 1
43208: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43209: LD_ADDR_VAR 0 10
43213: PUSH
43214: LD_VAR 0 10
43218: PPUSH
43219: LD_VAR 0 8
43223: PPUSH
43224: LD_VAR 0 1
43228: PUSH
43229: LD_VAR 0 7
43233: ARRAY
43234: PPUSH
43235: CALL_OW 1
43239: ST_TO_ADDR
// end ;
43240: GO 43153
43242: POP
43243: POP
// array := tmp ;
43244: LD_ADDR_VAR 0 1
43248: PUSH
43249: LD_VAR 0 10
43253: ST_TO_ADDR
// end ;
43254: GO 43135
43256: POP
43257: POP
// result := array ;
43258: LD_ADDR_VAR 0 5
43262: PUSH
43263: LD_VAR 0 1
43267: ST_TO_ADDR
// end ;
43268: LD_VAR 0 5
43272: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43273: LD_INT 0
43275: PPUSH
43276: PPUSH
// result := 0 ;
43277: LD_ADDR_VAR 0 3
43281: PUSH
43282: LD_INT 0
43284: ST_TO_ADDR
// if not array or not value in array then
43285: LD_VAR 0 1
43289: NOT
43290: IFTRUE 43305
43292: PUSH
43293: LD_VAR 0 2
43297: PUSH
43298: LD_VAR 0 1
43302: IN
43303: NOT
43304: OR
43305: IFFALSE 43309
// exit ;
43307: GO 43363
// for i = 1 to array do
43309: LD_ADDR_VAR 0 4
43313: PUSH
43314: DOUBLE
43315: LD_INT 1
43317: DEC
43318: ST_TO_ADDR
43319: LD_VAR 0 1
43323: PUSH
43324: FOR_TO
43325: IFFALSE 43361
// if value = array [ i ] then
43327: LD_VAR 0 2
43331: PUSH
43332: LD_VAR 0 1
43336: PUSH
43337: LD_VAR 0 4
43341: ARRAY
43342: EQUAL
43343: IFFALSE 43359
// begin result := i ;
43345: LD_ADDR_VAR 0 3
43349: PUSH
43350: LD_VAR 0 4
43354: ST_TO_ADDR
// exit ;
43355: POP
43356: POP
43357: GO 43363
// end ;
43359: GO 43324
43361: POP
43362: POP
// end ;
43363: LD_VAR 0 3
43367: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43368: LD_INT 0
43370: PPUSH
// vc_chassis := chassis ;
43371: LD_ADDR_OWVAR 37
43375: PUSH
43376: LD_VAR 0 1
43380: ST_TO_ADDR
// vc_engine := engine ;
43381: LD_ADDR_OWVAR 39
43385: PUSH
43386: LD_VAR 0 2
43390: ST_TO_ADDR
// vc_control := control ;
43391: LD_ADDR_OWVAR 38
43395: PUSH
43396: LD_VAR 0 3
43400: ST_TO_ADDR
// vc_weapon := weapon ;
43401: LD_ADDR_OWVAR 40
43405: PUSH
43406: LD_VAR 0 4
43410: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43411: LD_ADDR_OWVAR 41
43415: PUSH
43416: LD_VAR 0 5
43420: ST_TO_ADDR
// end ;
43421: LD_VAR 0 6
43425: RET
// export function WantPlant ( unit ) ; var task ; begin
43426: LD_INT 0
43428: PPUSH
43429: PPUSH
// result := false ;
43430: LD_ADDR_VAR 0 2
43434: PUSH
43435: LD_INT 0
43437: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43438: LD_ADDR_VAR 0 3
43442: PUSH
43443: LD_VAR 0 1
43447: PPUSH
43448: CALL_OW 437
43452: ST_TO_ADDR
// if task then
43453: LD_VAR 0 3
43457: IFFALSE 43485
// if task [ 1 ] [ 1 ] = p then
43459: LD_VAR 0 3
43463: PUSH
43464: LD_INT 1
43466: ARRAY
43467: PUSH
43468: LD_INT 1
43470: ARRAY
43471: PUSH
43472: LD_STRING p
43474: EQUAL
43475: IFFALSE 43485
// result := true ;
43477: LD_ADDR_VAR 0 2
43481: PUSH
43482: LD_INT 1
43484: ST_TO_ADDR
// end ;
43485: LD_VAR 0 2
43489: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43490: LD_INT 0
43492: PPUSH
43493: PPUSH
43494: PPUSH
43495: PPUSH
// if pos < 1 then
43496: LD_VAR 0 2
43500: PUSH
43501: LD_INT 1
43503: LESS
43504: IFFALSE 43508
// exit ;
43506: GO 43811
// if pos = 1 then
43508: LD_VAR 0 2
43512: PUSH
43513: LD_INT 1
43515: EQUAL
43516: IFFALSE 43549
// result := Replace ( arr , pos [ 1 ] , value ) else
43518: LD_ADDR_VAR 0 4
43522: PUSH
43523: LD_VAR 0 1
43527: PPUSH
43528: LD_VAR 0 2
43532: PUSH
43533: LD_INT 1
43535: ARRAY
43536: PPUSH
43537: LD_VAR 0 3
43541: PPUSH
43542: CALL_OW 1
43546: ST_TO_ADDR
43547: GO 43811
// begin tmp := arr ;
43549: LD_ADDR_VAR 0 6
43553: PUSH
43554: LD_VAR 0 1
43558: ST_TO_ADDR
// s_arr := [ tmp ] ;
43559: LD_ADDR_VAR 0 7
43563: PUSH
43564: LD_VAR 0 6
43568: PUSH
43569: EMPTY
43570: LIST
43571: ST_TO_ADDR
// for i = 1 to pos - 1 do
43572: LD_ADDR_VAR 0 5
43576: PUSH
43577: DOUBLE
43578: LD_INT 1
43580: DEC
43581: ST_TO_ADDR
43582: LD_VAR 0 2
43586: PUSH
43587: LD_INT 1
43589: MINUS
43590: PUSH
43591: FOR_TO
43592: IFFALSE 43637
// begin tmp := tmp [ pos [ i ] ] ;
43594: LD_ADDR_VAR 0 6
43598: PUSH
43599: LD_VAR 0 6
43603: PUSH
43604: LD_VAR 0 2
43608: PUSH
43609: LD_VAR 0 5
43613: ARRAY
43614: ARRAY
43615: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43616: LD_ADDR_VAR 0 7
43620: PUSH
43621: LD_VAR 0 7
43625: PUSH
43626: LD_VAR 0 6
43630: PUSH
43631: EMPTY
43632: LIST
43633: ADD
43634: ST_TO_ADDR
// end ;
43635: GO 43591
43637: POP
43638: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43639: LD_ADDR_VAR 0 6
43643: PUSH
43644: LD_VAR 0 6
43648: PPUSH
43649: LD_VAR 0 2
43653: PUSH
43654: LD_VAR 0 2
43658: ARRAY
43659: PPUSH
43660: LD_VAR 0 3
43664: PPUSH
43665: CALL_OW 1
43669: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43670: LD_ADDR_VAR 0 7
43674: PUSH
43675: LD_VAR 0 7
43679: PPUSH
43680: LD_VAR 0 7
43684: PPUSH
43685: LD_VAR 0 6
43689: PPUSH
43690: CALL_OW 1
43694: ST_TO_ADDR
// for i = s_arr downto 2 do
43695: LD_ADDR_VAR 0 5
43699: PUSH
43700: DOUBLE
43701: LD_VAR 0 7
43705: INC
43706: ST_TO_ADDR
43707: LD_INT 2
43709: PUSH
43710: FOR_DOWNTO
43711: IFFALSE 43795
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43713: LD_ADDR_VAR 0 6
43717: PUSH
43718: LD_VAR 0 7
43722: PUSH
43723: LD_VAR 0 5
43727: PUSH
43728: LD_INT 1
43730: MINUS
43731: ARRAY
43732: PPUSH
43733: LD_VAR 0 2
43737: PUSH
43738: LD_VAR 0 5
43742: PUSH
43743: LD_INT 1
43745: MINUS
43746: ARRAY
43747: PPUSH
43748: LD_VAR 0 7
43752: PUSH
43753: LD_VAR 0 5
43757: ARRAY
43758: PPUSH
43759: CALL_OW 1
43763: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43764: LD_ADDR_VAR 0 7
43768: PUSH
43769: LD_VAR 0 7
43773: PPUSH
43774: LD_VAR 0 5
43778: PUSH
43779: LD_INT 1
43781: MINUS
43782: PPUSH
43783: LD_VAR 0 6
43787: PPUSH
43788: CALL_OW 1
43792: ST_TO_ADDR
// end ;
43793: GO 43710
43795: POP
43796: POP
// result := s_arr [ 1 ] ;
43797: LD_ADDR_VAR 0 4
43801: PUSH
43802: LD_VAR 0 7
43806: PUSH
43807: LD_INT 1
43809: ARRAY
43810: ST_TO_ADDR
// end ; end ;
43811: LD_VAR 0 4
43815: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43816: LD_INT 0
43818: PPUSH
43819: PPUSH
// if not list then
43820: LD_VAR 0 1
43824: NOT
43825: IFFALSE 43829
// exit ;
43827: GO 43920
// i := list [ pos1 ] ;
43829: LD_ADDR_VAR 0 5
43833: PUSH
43834: LD_VAR 0 1
43838: PUSH
43839: LD_VAR 0 2
43843: ARRAY
43844: ST_TO_ADDR
// if not i then
43845: LD_VAR 0 5
43849: NOT
43850: IFFALSE 43854
// exit ;
43852: GO 43920
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43854: LD_ADDR_VAR 0 1
43858: PUSH
43859: LD_VAR 0 1
43863: PPUSH
43864: LD_VAR 0 2
43868: PPUSH
43869: LD_VAR 0 1
43873: PUSH
43874: LD_VAR 0 3
43878: ARRAY
43879: PPUSH
43880: CALL_OW 1
43884: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43885: LD_ADDR_VAR 0 1
43889: PUSH
43890: LD_VAR 0 1
43894: PPUSH
43895: LD_VAR 0 3
43899: PPUSH
43900: LD_VAR 0 5
43904: PPUSH
43905: CALL_OW 1
43909: ST_TO_ADDR
// result := list ;
43910: LD_ADDR_VAR 0 4
43914: PUSH
43915: LD_VAR 0 1
43919: ST_TO_ADDR
// end ;
43920: LD_VAR 0 4
43924: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43925: LD_INT 0
43927: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43928: LD_ADDR_VAR 0 5
43932: PUSH
43933: LD_VAR 0 1
43937: PPUSH
43938: CALL_OW 250
43942: PPUSH
43943: LD_VAR 0 1
43947: PPUSH
43948: CALL_OW 251
43952: PPUSH
43953: LD_VAR 0 2
43957: PPUSH
43958: LD_VAR 0 3
43962: PPUSH
43963: LD_VAR 0 4
43967: PPUSH
43968: CALL 44350 0 5
43972: ST_TO_ADDR
// end ;
43973: LD_VAR 0 5
43977: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
43978: LD_INT 0
43980: PPUSH
43981: PPUSH
43982: PPUSH
43983: PPUSH
// if not list or not unit then
43984: LD_VAR 0 2
43988: NOT
43989: IFTRUE 43998
43991: PUSH
43992: LD_VAR 0 1
43996: NOT
43997: OR
43998: IFFALSE 44002
// exit ;
44000: GO 44345
// result := [ ] ;
44002: LD_ADDR_VAR 0 5
44006: PUSH
44007: EMPTY
44008: ST_TO_ADDR
// for i in list do
44009: LD_ADDR_VAR 0 6
44013: PUSH
44014: LD_VAR 0 2
44018: PUSH
44019: FOR_IN
44020: IFFALSE 44238
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
44022: LD_ADDR_VAR 0 8
44026: PUSH
44027: LD_VAR 0 1
44031: PPUSH
44032: LD_VAR 0 6
44036: PUSH
44037: LD_INT 1
44039: ARRAY
44040: PPUSH
44041: LD_VAR 0 6
44045: PUSH
44046: LD_INT 2
44048: ARRAY
44049: PPUSH
44050: CALL_OW 297
44054: ST_TO_ADDR
// if not Count ( result ) then
44055: LD_VAR 0 5
44059: PPUSH
44060: CALL 40572 0 1
44064: NOT
44065: IFFALSE 44098
// begin result := Join ( result , [ i , tmp ] ) ;
44067: LD_ADDR_VAR 0 5
44071: PUSH
44072: LD_VAR 0 5
44076: PPUSH
44077: LD_VAR 0 6
44081: PUSH
44082: LD_VAR 0 8
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PPUSH
44091: CALL 76548 0 2
44095: ST_TO_ADDR
// continue ;
44096: GO 44019
// end ; if result [ result ] [ 2 ] <= tmp then
44098: LD_VAR 0 5
44102: PUSH
44103: LD_VAR 0 5
44107: ARRAY
44108: PUSH
44109: LD_INT 2
44111: ARRAY
44112: PUSH
44113: LD_VAR 0 8
44117: LESSEQUAL
44118: IFFALSE 44151
// result := Join ( result , [ i , tmp ] ) else
44120: LD_ADDR_VAR 0 5
44124: PUSH
44125: LD_VAR 0 5
44129: PPUSH
44130: LD_VAR 0 6
44134: PUSH
44135: LD_VAR 0 8
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PPUSH
44144: CALL 76548 0 2
44148: ST_TO_ADDR
44149: GO 44236
// begin for j := 1 to Count ( result ) do
44151: LD_ADDR_VAR 0 7
44155: PUSH
44156: DOUBLE
44157: LD_INT 1
44159: DEC
44160: ST_TO_ADDR
44161: LD_VAR 0 5
44165: PPUSH
44166: CALL 40572 0 1
44170: PUSH
44171: FOR_TO
44172: IFFALSE 44234
// begin if tmp < result [ j ] [ 2 ] then
44174: LD_VAR 0 8
44178: PUSH
44179: LD_VAR 0 5
44183: PUSH
44184: LD_VAR 0 7
44188: ARRAY
44189: PUSH
44190: LD_INT 2
44192: ARRAY
44193: LESS
44194: IFFALSE 44232
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44196: LD_ADDR_VAR 0 5
44200: PUSH
44201: LD_VAR 0 5
44205: PPUSH
44206: LD_VAR 0 7
44210: PPUSH
44211: LD_VAR 0 6
44215: PUSH
44216: LD_VAR 0 8
44220: PUSH
44221: EMPTY
44222: LIST
44223: LIST
44224: PPUSH
44225: CALL_OW 2
44229: ST_TO_ADDR
// break ;
44230: GO 44234
// end ; end ;
44232: GO 44171
44234: POP
44235: POP
// end ; end ;
44236: GO 44019
44238: POP
44239: POP
// if result and not asc then
44240: LD_VAR 0 5
44244: IFFALSE 44253
44246: PUSH
44247: LD_VAR 0 3
44251: NOT
44252: AND
44253: IFFALSE 44270
// result := ReverseArray ( result ) ;
44255: LD_ADDR_VAR 0 5
44259: PUSH
44260: LD_VAR 0 5
44264: PPUSH
44265: CALL 71628 0 1
44269: ST_TO_ADDR
// tmp := [ ] ;
44270: LD_ADDR_VAR 0 8
44274: PUSH
44275: EMPTY
44276: ST_TO_ADDR
// if mode then
44277: LD_VAR 0 4
44281: IFFALSE 44345
// begin for i := 1 to result do
44283: LD_ADDR_VAR 0 6
44287: PUSH
44288: DOUBLE
44289: LD_INT 1
44291: DEC
44292: ST_TO_ADDR
44293: LD_VAR 0 5
44297: PUSH
44298: FOR_TO
44299: IFFALSE 44333
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
44301: LD_ADDR_VAR 0 8
44305: PUSH
44306: LD_VAR 0 8
44310: PPUSH
44311: LD_VAR 0 5
44315: PUSH
44316: LD_VAR 0 6
44320: ARRAY
44321: PUSH
44322: LD_INT 1
44324: ARRAY
44325: PPUSH
44326: CALL 76548 0 2
44330: ST_TO_ADDR
44331: GO 44298
44333: POP
44334: POP
// result := tmp ;
44335: LD_ADDR_VAR 0 5
44339: PUSH
44340: LD_VAR 0 8
44344: ST_TO_ADDR
// end ; end ;
44345: LD_VAR 0 5
44349: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44350: LD_INT 0
44352: PPUSH
44353: PPUSH
44354: PPUSH
44355: PPUSH
// if not list then
44356: LD_VAR 0 3
44360: NOT
44361: IFFALSE 44365
// exit ;
44363: GO 44755
// result := [ ] ;
44365: LD_ADDR_VAR 0 6
44369: PUSH
44370: EMPTY
44371: ST_TO_ADDR
// for i in list do
44372: LD_ADDR_VAR 0 7
44376: PUSH
44377: LD_VAR 0 3
44381: PUSH
44382: FOR_IN
44383: IFFALSE 44585
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44385: LD_ADDR_VAR 0 9
44389: PUSH
44390: LD_VAR 0 7
44394: PPUSH
44395: LD_VAR 0 1
44399: PPUSH
44400: LD_VAR 0 2
44404: PPUSH
44405: CALL_OW 297
44409: ST_TO_ADDR
// if not result then
44410: LD_VAR 0 6
44414: NOT
44415: IFFALSE 44441
// result := [ [ i , tmp ] ] else
44417: LD_ADDR_VAR 0 6
44421: PUSH
44422: LD_VAR 0 7
44426: PUSH
44427: LD_VAR 0 9
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: EMPTY
44437: LIST
44438: ST_TO_ADDR
44439: GO 44583
// begin if result [ result ] [ 2 ] <= tmp then
44441: LD_VAR 0 6
44445: PUSH
44446: LD_VAR 0 6
44450: ARRAY
44451: PUSH
44452: LD_INT 2
44454: ARRAY
44455: PUSH
44456: LD_VAR 0 9
44460: LESSEQUAL
44461: IFFALSE 44503
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44463: LD_ADDR_VAR 0 6
44467: PUSH
44468: LD_VAR 0 6
44472: PPUSH
44473: LD_VAR 0 6
44477: PUSH
44478: LD_INT 1
44480: PLUS
44481: PPUSH
44482: LD_VAR 0 7
44486: PUSH
44487: LD_VAR 0 9
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PPUSH
44496: CALL_OW 2
44500: ST_TO_ADDR
44501: GO 44583
// for j := 1 to result do
44503: LD_ADDR_VAR 0 8
44507: PUSH
44508: DOUBLE
44509: LD_INT 1
44511: DEC
44512: ST_TO_ADDR
44513: LD_VAR 0 6
44517: PUSH
44518: FOR_TO
44519: IFFALSE 44581
// begin if tmp < result [ j ] [ 2 ] then
44521: LD_VAR 0 9
44525: PUSH
44526: LD_VAR 0 6
44530: PUSH
44531: LD_VAR 0 8
44535: ARRAY
44536: PUSH
44537: LD_INT 2
44539: ARRAY
44540: LESS
44541: IFFALSE 44579
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44543: LD_ADDR_VAR 0 6
44547: PUSH
44548: LD_VAR 0 6
44552: PPUSH
44553: LD_VAR 0 8
44557: PPUSH
44558: LD_VAR 0 7
44562: PUSH
44563: LD_VAR 0 9
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PPUSH
44572: CALL_OW 2
44576: ST_TO_ADDR
// break ;
44577: GO 44581
// end ; end ;
44579: GO 44518
44581: POP
44582: POP
// end ; end ;
44583: GO 44382
44585: POP
44586: POP
// if result and not asc then
44587: LD_VAR 0 6
44591: IFFALSE 44600
44593: PUSH
44594: LD_VAR 0 4
44598: NOT
44599: AND
44600: IFFALSE 44675
// begin tmp := result ;
44602: LD_ADDR_VAR 0 9
44606: PUSH
44607: LD_VAR 0 6
44611: ST_TO_ADDR
// for i = tmp downto 1 do
44612: LD_ADDR_VAR 0 7
44616: PUSH
44617: DOUBLE
44618: LD_VAR 0 9
44622: INC
44623: ST_TO_ADDR
44624: LD_INT 1
44626: PUSH
44627: FOR_DOWNTO
44628: IFFALSE 44673
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44630: LD_ADDR_VAR 0 6
44634: PUSH
44635: LD_VAR 0 6
44639: PPUSH
44640: LD_VAR 0 9
44644: PUSH
44645: LD_VAR 0 7
44649: MINUS
44650: PUSH
44651: LD_INT 1
44653: PLUS
44654: PPUSH
44655: LD_VAR 0 9
44659: PUSH
44660: LD_VAR 0 7
44664: ARRAY
44665: PPUSH
44666: CALL_OW 1
44670: ST_TO_ADDR
44671: GO 44627
44673: POP
44674: POP
// end ; tmp := [ ] ;
44675: LD_ADDR_VAR 0 9
44679: PUSH
44680: EMPTY
44681: ST_TO_ADDR
// if mode then
44682: LD_VAR 0 5
44686: IFFALSE 44755
// begin for i = 1 to result do
44688: LD_ADDR_VAR 0 7
44692: PUSH
44693: DOUBLE
44694: LD_INT 1
44696: DEC
44697: ST_TO_ADDR
44698: LD_VAR 0 6
44702: PUSH
44703: FOR_TO
44704: IFFALSE 44743
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44706: LD_ADDR_VAR 0 9
44710: PUSH
44711: LD_VAR 0 9
44715: PPUSH
44716: LD_VAR 0 7
44720: PPUSH
44721: LD_VAR 0 6
44725: PUSH
44726: LD_VAR 0 7
44730: ARRAY
44731: PUSH
44732: LD_INT 1
44734: ARRAY
44735: PPUSH
44736: CALL_OW 1
44740: ST_TO_ADDR
44741: GO 44703
44743: POP
44744: POP
// result := tmp ;
44745: LD_ADDR_VAR 0 6
44749: PUSH
44750: LD_VAR 0 9
44754: ST_TO_ADDR
// end ; end ;
44755: LD_VAR 0 6
44759: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44760: LD_INT 0
44762: PPUSH
44763: PPUSH
44764: PPUSH
44765: PPUSH
44766: PPUSH
44767: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44768: LD_ADDR_VAR 0 5
44772: PUSH
44773: LD_INT 0
44775: PUSH
44776: LD_INT 0
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: EMPTY
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: ST_TO_ADDR
// if not x or not y then
44790: LD_VAR 0 2
44794: NOT
44795: IFTRUE 44804
44797: PUSH
44798: LD_VAR 0 3
44802: NOT
44803: OR
44804: IFFALSE 44808
// exit ;
44806: GO 46464
// if not range then
44808: LD_VAR 0 4
44812: NOT
44813: IFFALSE 44823
// range := 10 ;
44815: LD_ADDR_VAR 0 4
44819: PUSH
44820: LD_INT 10
44822: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44823: LD_ADDR_VAR 0 8
44827: PUSH
44828: LD_INT 81
44830: PUSH
44831: LD_VAR 0 1
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 92
44842: PUSH
44843: LD_VAR 0 2
44847: PUSH
44848: LD_VAR 0 3
44852: PUSH
44853: LD_VAR 0 4
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 3
44866: PUSH
44867: LD_INT 21
44869: PUSH
44870: LD_INT 3
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: LIST
44885: PPUSH
44886: CALL_OW 69
44890: ST_TO_ADDR
// if not tmp then
44891: LD_VAR 0 8
44895: NOT
44896: IFFALSE 44900
// exit ;
44898: GO 46464
// for i in tmp do
44900: LD_ADDR_VAR 0 6
44904: PUSH
44905: LD_VAR 0 8
44909: PUSH
44910: FOR_IN
44911: IFFALSE 46439
// begin points := [ 0 , 0 , 0 ] ;
44913: LD_ADDR_VAR 0 9
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: LD_INT 0
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: LIST
44931: ST_TO_ADDR
// bpoints := 1 ;
44932: LD_ADDR_VAR 0 10
44936: PUSH
44937: LD_INT 1
44939: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44940: LD_VAR 0 6
44944: PPUSH
44945: CALL_OW 247
44949: PUSH
44950: LD_INT 1
44952: DOUBLE
44953: EQUAL
44954: IFTRUE 44958
44956: GO 45540
44958: POP
// begin if GetClass ( i ) = 1 then
44959: LD_VAR 0 6
44963: PPUSH
44964: CALL_OW 257
44968: PUSH
44969: LD_INT 1
44971: EQUAL
44972: IFFALSE 44993
// points := [ 10 , 5 , 3 ] ;
44974: LD_ADDR_VAR 0 9
44978: PUSH
44979: LD_INT 10
44981: PUSH
44982: LD_INT 5
44984: PUSH
44985: LD_INT 3
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: LIST
44992: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44993: LD_VAR 0 6
44997: PPUSH
44998: CALL_OW 257
45002: PUSH
45003: LD_INT 2
45005: PUSH
45006: LD_INT 3
45008: PUSH
45009: LD_INT 4
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: LIST
45016: IN
45017: IFFALSE 45038
// points := [ 3 , 2 , 1 ] ;
45019: LD_ADDR_VAR 0 9
45023: PUSH
45024: LD_INT 3
45026: PUSH
45027: LD_INT 2
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: LIST
45037: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45038: LD_VAR 0 6
45042: PPUSH
45043: CALL_OW 257
45047: PUSH
45048: LD_INT 5
45050: EQUAL
45051: IFFALSE 45072
// points := [ 130 , 5 , 2 ] ;
45053: LD_ADDR_VAR 0 9
45057: PUSH
45058: LD_INT 130
45060: PUSH
45061: LD_INT 5
45063: PUSH
45064: LD_INT 2
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: LIST
45071: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45072: LD_VAR 0 6
45076: PPUSH
45077: CALL_OW 257
45081: PUSH
45082: LD_INT 8
45084: EQUAL
45085: IFFALSE 45106
// points := [ 35 , 35 , 30 ] ;
45087: LD_ADDR_VAR 0 9
45091: PUSH
45092: LD_INT 35
45094: PUSH
45095: LD_INT 35
45097: PUSH
45098: LD_INT 30
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: LIST
45105: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45106: LD_VAR 0 6
45110: PPUSH
45111: CALL_OW 257
45115: PUSH
45116: LD_INT 9
45118: EQUAL
45119: IFFALSE 45140
// points := [ 20 , 55 , 40 ] ;
45121: LD_ADDR_VAR 0 9
45125: PUSH
45126: LD_INT 20
45128: PUSH
45129: LD_INT 55
45131: PUSH
45132: LD_INT 40
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: LIST
45139: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45140: LD_VAR 0 6
45144: PPUSH
45145: CALL_OW 257
45149: PUSH
45150: LD_INT 12
45152: PUSH
45153: LD_INT 16
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: IN
45160: IFFALSE 45181
// points := [ 5 , 3 , 2 ] ;
45162: LD_ADDR_VAR 0 9
45166: PUSH
45167: LD_INT 5
45169: PUSH
45170: LD_INT 3
45172: PUSH
45173: LD_INT 2
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: LIST
45180: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45181: LD_VAR 0 6
45185: PPUSH
45186: CALL_OW 257
45190: PUSH
45191: LD_INT 17
45193: EQUAL
45194: IFFALSE 45215
// points := [ 100 , 50 , 75 ] ;
45196: LD_ADDR_VAR 0 9
45200: PUSH
45201: LD_INT 100
45203: PUSH
45204: LD_INT 50
45206: PUSH
45207: LD_INT 75
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: LIST
45214: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45215: LD_VAR 0 6
45219: PPUSH
45220: CALL_OW 257
45224: PUSH
45225: LD_INT 15
45227: EQUAL
45228: IFFALSE 45249
// points := [ 10 , 5 , 3 ] ;
45230: LD_ADDR_VAR 0 9
45234: PUSH
45235: LD_INT 10
45237: PUSH
45238: LD_INT 5
45240: PUSH
45241: LD_INT 3
45243: PUSH
45244: EMPTY
45245: LIST
45246: LIST
45247: LIST
45248: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45249: LD_VAR 0 6
45253: PPUSH
45254: CALL_OW 257
45258: PUSH
45259: LD_INT 14
45261: EQUAL
45262: IFFALSE 45283
// points := [ 10 , 0 , 0 ] ;
45264: LD_ADDR_VAR 0 9
45268: PUSH
45269: LD_INT 10
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: LD_INT 0
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: LIST
45282: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45283: LD_VAR 0 6
45287: PPUSH
45288: CALL_OW 257
45292: PUSH
45293: LD_INT 11
45295: EQUAL
45296: IFFALSE 45317
// points := [ 30 , 10 , 5 ] ;
45298: LD_ADDR_VAR 0 9
45302: PUSH
45303: LD_INT 30
45305: PUSH
45306: LD_INT 10
45308: PUSH
45309: LD_INT 5
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: LIST
45316: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45317: LD_VAR 0 1
45321: PPUSH
45322: LD_INT 5
45324: PPUSH
45325: CALL_OW 321
45329: PUSH
45330: LD_INT 2
45332: EQUAL
45333: IFFALSE 45350
// bpoints := bpoints * 1.8 ;
45335: LD_ADDR_VAR 0 10
45339: PUSH
45340: LD_VAR 0 10
45344: PUSH
45345: LD_REAL  1.80000000000000E+0000
45348: MUL
45349: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45350: LD_VAR 0 6
45354: PPUSH
45355: CALL_OW 257
45359: PUSH
45360: LD_INT 1
45362: PUSH
45363: LD_INT 2
45365: PUSH
45366: LD_INT 3
45368: PUSH
45369: LD_INT 4
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: IN
45378: IFFALSE 45398
45380: PUSH
45381: LD_VAR 0 1
45385: PPUSH
45386: LD_INT 51
45388: PPUSH
45389: CALL_OW 321
45393: PUSH
45394: LD_INT 2
45396: EQUAL
45397: AND
45398: IFFALSE 45415
// bpoints := bpoints * 1.2 ;
45400: LD_ADDR_VAR 0 10
45404: PUSH
45405: LD_VAR 0 10
45409: PUSH
45410: LD_REAL  1.20000000000000E+0000
45413: MUL
45414: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45415: LD_VAR 0 6
45419: PPUSH
45420: CALL_OW 257
45424: PUSH
45425: LD_INT 5
45427: PUSH
45428: LD_INT 7
45430: PUSH
45431: LD_INT 9
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: LIST
45438: IN
45439: IFFALSE 45459
45441: PUSH
45442: LD_VAR 0 1
45446: PPUSH
45447: LD_INT 52
45449: PPUSH
45450: CALL_OW 321
45454: PUSH
45455: LD_INT 2
45457: EQUAL
45458: AND
45459: IFFALSE 45476
// bpoints := bpoints * 1.5 ;
45461: LD_ADDR_VAR 0 10
45465: PUSH
45466: LD_VAR 0 10
45470: PUSH
45471: LD_REAL  1.50000000000000E+0000
45474: MUL
45475: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45476: LD_VAR 0 1
45480: PPUSH
45481: LD_INT 66
45483: PPUSH
45484: CALL_OW 321
45488: PUSH
45489: LD_INT 2
45491: EQUAL
45492: IFFALSE 45509
// bpoints := bpoints * 1.1 ;
45494: LD_ADDR_VAR 0 10
45498: PUSH
45499: LD_VAR 0 10
45503: PUSH
45504: LD_REAL  1.10000000000000E+0000
45507: MUL
45508: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45509: LD_ADDR_VAR 0 10
45513: PUSH
45514: LD_VAR 0 10
45518: PUSH
45519: LD_VAR 0 6
45523: PPUSH
45524: LD_INT 1
45526: PPUSH
45527: CALL_OW 259
45531: PUSH
45532: LD_REAL  1.15000000000000E+0000
45535: MUL
45536: MUL
45537: ST_TO_ADDR
// end ; unit_vehicle :
45538: GO 46368
45540: LD_INT 2
45542: DOUBLE
45543: EQUAL
45544: IFTRUE 45548
45546: GO 46356
45548: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45549: LD_VAR 0 6
45553: PPUSH
45554: CALL_OW 264
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: LD_INT 42
45564: PUSH
45565: LD_INT 24
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: LIST
45572: IN
45573: IFFALSE 45594
// points := [ 25 , 5 , 3 ] ;
45575: LD_ADDR_VAR 0 9
45579: PUSH
45580: LD_INT 25
45582: PUSH
45583: LD_INT 5
45585: PUSH
45586: LD_INT 3
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: LIST
45593: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45594: LD_VAR 0 6
45598: PPUSH
45599: CALL_OW 264
45603: PUSH
45604: LD_INT 4
45606: PUSH
45607: LD_INT 43
45609: PUSH
45610: LD_INT 25
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: LIST
45617: IN
45618: IFFALSE 45639
// points := [ 40 , 15 , 5 ] ;
45620: LD_ADDR_VAR 0 9
45624: PUSH
45625: LD_INT 40
45627: PUSH
45628: LD_INT 15
45630: PUSH
45631: LD_INT 5
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: LIST
45638: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45639: LD_VAR 0 6
45643: PPUSH
45644: CALL_OW 264
45648: PUSH
45649: LD_INT 3
45651: PUSH
45652: LD_INT 23
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: IN
45659: IFFALSE 45680
// points := [ 7 , 25 , 8 ] ;
45661: LD_ADDR_VAR 0 9
45665: PUSH
45666: LD_INT 7
45668: PUSH
45669: LD_INT 25
45671: PUSH
45672: LD_INT 8
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: LIST
45679: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45680: LD_VAR 0 6
45684: PPUSH
45685: CALL_OW 264
45689: PUSH
45690: LD_INT 5
45692: PUSH
45693: LD_INT 27
45695: PUSH
45696: LD_INT 44
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: LIST
45703: IN
45704: IFFALSE 45725
// points := [ 14 , 50 , 16 ] ;
45706: LD_ADDR_VAR 0 9
45710: PUSH
45711: LD_INT 14
45713: PUSH
45714: LD_INT 50
45716: PUSH
45717: LD_INT 16
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: LIST
45724: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45725: LD_VAR 0 6
45729: PPUSH
45730: CALL_OW 264
45734: PUSH
45735: LD_INT 6
45737: PUSH
45738: LD_INT 46
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: IN
45745: IFFALSE 45766
// points := [ 32 , 120 , 70 ] ;
45747: LD_ADDR_VAR 0 9
45751: PUSH
45752: LD_INT 32
45754: PUSH
45755: LD_INT 120
45757: PUSH
45758: LD_INT 70
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: LIST
45765: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45766: LD_VAR 0 6
45770: PPUSH
45771: CALL_OW 264
45775: PUSH
45776: LD_INT 7
45778: PUSH
45779: LD_INT 28
45781: PUSH
45782: LD_INT 45
45784: PUSH
45785: LD_INT 92
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: IN
45794: IFFALSE 45815
// points := [ 35 , 20 , 45 ] ;
45796: LD_ADDR_VAR 0 9
45800: PUSH
45801: LD_INT 35
45803: PUSH
45804: LD_INT 20
45806: PUSH
45807: LD_INT 45
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: LIST
45814: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45815: LD_VAR 0 6
45819: PPUSH
45820: CALL_OW 264
45824: PUSH
45825: LD_INT 47
45827: PUSH
45828: EMPTY
45829: LIST
45830: IN
45831: IFFALSE 45852
// points := [ 67 , 45 , 75 ] ;
45833: LD_ADDR_VAR 0 9
45837: PUSH
45838: LD_INT 67
45840: PUSH
45841: LD_INT 45
45843: PUSH
45844: LD_INT 75
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: LIST
45851: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45852: LD_VAR 0 6
45856: PPUSH
45857: CALL_OW 264
45861: PUSH
45862: LD_INT 26
45864: PUSH
45865: EMPTY
45866: LIST
45867: IN
45868: IFFALSE 45889
// points := [ 120 , 30 , 80 ] ;
45870: LD_ADDR_VAR 0 9
45874: PUSH
45875: LD_INT 120
45877: PUSH
45878: LD_INT 30
45880: PUSH
45881: LD_INT 80
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: LIST
45888: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45889: LD_VAR 0 6
45893: PPUSH
45894: CALL_OW 264
45898: PUSH
45899: LD_INT 22
45901: PUSH
45902: EMPTY
45903: LIST
45904: IN
45905: IFFALSE 45926
// points := [ 40 , 1 , 1 ] ;
45907: LD_ADDR_VAR 0 9
45911: PUSH
45912: LD_INT 40
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: LIST
45925: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45926: LD_VAR 0 6
45930: PPUSH
45931: CALL_OW 264
45935: PUSH
45936: LD_INT 29
45938: PUSH
45939: EMPTY
45940: LIST
45941: IN
45942: IFFALSE 45963
// points := [ 70 , 200 , 400 ] ;
45944: LD_ADDR_VAR 0 9
45948: PUSH
45949: LD_INT 70
45951: PUSH
45952: LD_INT 200
45954: PUSH
45955: LD_INT 400
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: LIST
45962: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45963: LD_VAR 0 6
45967: PPUSH
45968: CALL_OW 264
45972: PUSH
45973: LD_INT 14
45975: PUSH
45976: LD_INT 53
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: IN
45983: IFFALSE 46004
// points := [ 40 , 10 , 20 ] ;
45985: LD_ADDR_VAR 0 9
45989: PUSH
45990: LD_INT 40
45992: PUSH
45993: LD_INT 10
45995: PUSH
45996: LD_INT 20
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: LIST
46003: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46004: LD_VAR 0 6
46008: PPUSH
46009: CALL_OW 264
46013: PUSH
46014: LD_INT 9
46016: PUSH
46017: EMPTY
46018: LIST
46019: IN
46020: IFFALSE 46041
// points := [ 5 , 70 , 20 ] ;
46022: LD_ADDR_VAR 0 9
46026: PUSH
46027: LD_INT 5
46029: PUSH
46030: LD_INT 70
46032: PUSH
46033: LD_INT 20
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: LIST
46040: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46041: LD_VAR 0 6
46045: PPUSH
46046: CALL_OW 264
46050: PUSH
46051: LD_INT 10
46053: PUSH
46054: EMPTY
46055: LIST
46056: IN
46057: IFFALSE 46078
// points := [ 35 , 110 , 70 ] ;
46059: LD_ADDR_VAR 0 9
46063: PUSH
46064: LD_INT 35
46066: PUSH
46067: LD_INT 110
46069: PUSH
46070: LD_INT 70
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: LIST
46077: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46078: LD_VAR 0 6
46082: PPUSH
46083: CALL_OW 265
46087: PUSH
46088: LD_INT 25
46090: EQUAL
46091: IFFALSE 46112
// points := [ 80 , 65 , 100 ] ;
46093: LD_ADDR_VAR 0 9
46097: PUSH
46098: LD_INT 80
46100: PUSH
46101: LD_INT 65
46103: PUSH
46104: LD_INT 100
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: LIST
46111: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46112: LD_VAR 0 6
46116: PPUSH
46117: CALL_OW 263
46121: PUSH
46122: LD_INT 1
46124: EQUAL
46125: IFFALSE 46160
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46127: LD_ADDR_VAR 0 10
46131: PUSH
46132: LD_VAR 0 10
46136: PUSH
46137: LD_VAR 0 6
46141: PPUSH
46142: CALL_OW 311
46146: PPUSH
46147: LD_INT 3
46149: PPUSH
46150: CALL_OW 259
46154: PUSH
46155: LD_INT 4
46157: MUL
46158: MUL
46159: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46160: LD_VAR 0 6
46164: PPUSH
46165: CALL_OW 263
46169: PUSH
46170: LD_INT 2
46172: EQUAL
46173: IFFALSE 46224
// begin j := IsControledBy ( i ) ;
46175: LD_ADDR_VAR 0 7
46179: PUSH
46180: LD_VAR 0 6
46184: PPUSH
46185: CALL_OW 312
46189: ST_TO_ADDR
// if j then
46190: LD_VAR 0 7
46194: IFFALSE 46224
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46196: LD_ADDR_VAR 0 10
46200: PUSH
46201: LD_VAR 0 10
46205: PUSH
46206: LD_VAR 0 7
46210: PPUSH
46211: LD_INT 3
46213: PPUSH
46214: CALL_OW 259
46218: PUSH
46219: LD_INT 3
46221: MUL
46222: MUL
46223: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46224: LD_VAR 0 6
46228: PPUSH
46229: CALL_OW 264
46233: PUSH
46234: LD_INT 5
46236: PUSH
46237: LD_INT 6
46239: PUSH
46240: LD_INT 46
46242: PUSH
46243: LD_INT 44
46245: PUSH
46246: LD_INT 47
46248: PUSH
46249: LD_INT 45
46251: PUSH
46252: LD_INT 28
46254: PUSH
46255: LD_INT 7
46257: PUSH
46258: LD_INT 27
46260: PUSH
46261: LD_INT 29
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: IN
46276: IFFALSE 46296
46278: PUSH
46279: LD_VAR 0 1
46283: PPUSH
46284: LD_INT 52
46286: PPUSH
46287: CALL_OW 321
46291: PUSH
46292: LD_INT 2
46294: EQUAL
46295: AND
46296: IFFALSE 46313
// bpoints := bpoints * 1.2 ;
46298: LD_ADDR_VAR 0 10
46302: PUSH
46303: LD_VAR 0 10
46307: PUSH
46308: LD_REAL  1.20000000000000E+0000
46311: MUL
46312: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46313: LD_VAR 0 6
46317: PPUSH
46318: CALL_OW 264
46322: PUSH
46323: LD_INT 6
46325: PUSH
46326: LD_INT 46
46328: PUSH
46329: LD_INT 47
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: LIST
46336: IN
46337: IFFALSE 46354
// bpoints := bpoints * 1.2 ;
46339: LD_ADDR_VAR 0 10
46343: PUSH
46344: LD_VAR 0 10
46348: PUSH
46349: LD_REAL  1.20000000000000E+0000
46352: MUL
46353: ST_TO_ADDR
// end ; unit_building :
46354: GO 46368
46356: LD_INT 3
46358: DOUBLE
46359: EQUAL
46360: IFTRUE 46364
46362: GO 46367
46364: POP
// ; end ;
46365: GO 46368
46367: POP
// for j = 1 to 3 do
46368: LD_ADDR_VAR 0 7
46372: PUSH
46373: DOUBLE
46374: LD_INT 1
46376: DEC
46377: ST_TO_ADDR
46378: LD_INT 3
46380: PUSH
46381: FOR_TO
46382: IFFALSE 46435
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46384: LD_ADDR_VAR 0 5
46388: PUSH
46389: LD_VAR 0 5
46393: PPUSH
46394: LD_VAR 0 7
46398: PPUSH
46399: LD_VAR 0 5
46403: PUSH
46404: LD_VAR 0 7
46408: ARRAY
46409: PUSH
46410: LD_VAR 0 9
46414: PUSH
46415: LD_VAR 0 7
46419: ARRAY
46420: PUSH
46421: LD_VAR 0 10
46425: MUL
46426: PLUS
46427: PPUSH
46428: CALL_OW 1
46432: ST_TO_ADDR
46433: GO 46381
46435: POP
46436: POP
// end ;
46437: GO 44910
46439: POP
46440: POP
// result := Replace ( result , 4 , tmp ) ;
46441: LD_ADDR_VAR 0 5
46445: PUSH
46446: LD_VAR 0 5
46450: PPUSH
46451: LD_INT 4
46453: PPUSH
46454: LD_VAR 0 8
46458: PPUSH
46459: CALL_OW 1
46463: ST_TO_ADDR
// end ;
46464: LD_VAR 0 5
46468: RET
// export function DangerAtRange ( unit , range ) ; begin
46469: LD_INT 0
46471: PPUSH
// if not unit then
46472: LD_VAR 0 1
46476: NOT
46477: IFFALSE 46481
// exit ;
46479: GO 46526
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46481: LD_ADDR_VAR 0 3
46485: PUSH
46486: LD_VAR 0 1
46490: PPUSH
46491: CALL_OW 255
46495: PPUSH
46496: LD_VAR 0 1
46500: PPUSH
46501: CALL_OW 250
46505: PPUSH
46506: LD_VAR 0 1
46510: PPUSH
46511: CALL_OW 251
46515: PPUSH
46516: LD_VAR 0 2
46520: PPUSH
46521: CALL 44760 0 4
46525: ST_TO_ADDR
// end ;
46526: LD_VAR 0 3
46530: RET
// export function DangerInArea ( side , area ) ; begin
46531: LD_INT 0
46533: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46534: LD_ADDR_VAR 0 3
46538: PUSH
46539: LD_VAR 0 2
46543: PPUSH
46544: LD_INT 81
46546: PUSH
46547: LD_VAR 0 1
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PPUSH
46556: CALL_OW 70
46560: ST_TO_ADDR
// end ;
46561: LD_VAR 0 3
46565: RET
// export function IsExtension ( b ) ; begin
46566: LD_INT 0
46568: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46569: LD_ADDR_VAR 0 2
46573: PUSH
46574: LD_VAR 0 1
46578: PUSH
46579: LD_INT 23
46581: PUSH
46582: LD_INT 20
46584: PUSH
46585: LD_INT 22
46587: PUSH
46588: LD_INT 17
46590: PUSH
46591: LD_INT 24
46593: PUSH
46594: LD_INT 21
46596: PUSH
46597: LD_INT 19
46599: PUSH
46600: LD_INT 16
46602: PUSH
46603: LD_INT 25
46605: PUSH
46606: LD_INT 18
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: IN
46621: ST_TO_ADDR
// end ;
46622: LD_VAR 0 2
46626: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46627: LD_INT 0
46629: PPUSH
46630: PPUSH
46631: PPUSH
// result := [ ] ;
46632: LD_ADDR_VAR 0 4
46636: PUSH
46637: EMPTY
46638: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46639: LD_ADDR_VAR 0 5
46643: PUSH
46644: LD_VAR 0 2
46648: PPUSH
46649: LD_INT 21
46651: PUSH
46652: LD_INT 3
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PPUSH
46659: CALL_OW 70
46663: ST_TO_ADDR
// if not tmp then
46664: LD_VAR 0 5
46668: NOT
46669: IFFALSE 46673
// exit ;
46671: GO 46737
// if checkLink then
46673: LD_VAR 0 3
46677: IFFALSE 46727
// begin for i in tmp do
46679: LD_ADDR_VAR 0 6
46683: PUSH
46684: LD_VAR 0 5
46688: PUSH
46689: FOR_IN
46690: IFFALSE 46725
// if GetBase ( i ) <> base then
46692: LD_VAR 0 6
46696: PPUSH
46697: CALL_OW 274
46701: PUSH
46702: LD_VAR 0 1
46706: NONEQUAL
46707: IFFALSE 46723
// ComLinkToBase ( base , i ) ;
46709: LD_VAR 0 1
46713: PPUSH
46714: LD_VAR 0 6
46718: PPUSH
46719: CALL_OW 169
46723: GO 46689
46725: POP
46726: POP
// end ; result := tmp ;
46727: LD_ADDR_VAR 0 4
46731: PUSH
46732: LD_VAR 0 5
46736: ST_TO_ADDR
// end ;
46737: LD_VAR 0 4
46741: RET
// export function ComComplete ( units , b ) ; var i ; begin
46742: LD_INT 0
46744: PPUSH
46745: PPUSH
// if not units then
46746: LD_VAR 0 1
46750: NOT
46751: IFFALSE 46755
// exit ;
46753: GO 46845
// for i in units do
46755: LD_ADDR_VAR 0 4
46759: PUSH
46760: LD_VAR 0 1
46764: PUSH
46765: FOR_IN
46766: IFFALSE 46843
// if BuildingStatus ( b ) = bs_build then
46768: LD_VAR 0 2
46772: PPUSH
46773: CALL_OW 461
46777: PUSH
46778: LD_INT 1
46780: EQUAL
46781: IFFALSE 46841
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46783: LD_VAR 0 4
46787: PPUSH
46788: LD_STRING h
46790: PUSH
46791: LD_VAR 0 2
46795: PPUSH
46796: CALL_OW 250
46800: PUSH
46801: LD_VAR 0 2
46805: PPUSH
46806: CALL_OW 251
46810: PUSH
46811: LD_VAR 0 2
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: PUSH
46834: EMPTY
46835: LIST
46836: PPUSH
46837: CALL_OW 446
46841: GO 46765
46843: POP
46844: POP
// end ;
46845: LD_VAR 0 3
46849: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46850: LD_INT 0
46852: PPUSH
46853: PPUSH
46854: PPUSH
46855: PPUSH
46856: PPUSH
46857: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46858: LD_VAR 0 1
46862: NOT
46863: IFTRUE 46880
46865: PUSH
46866: LD_VAR 0 1
46870: PPUSH
46871: CALL_OW 263
46875: PUSH
46876: LD_INT 2
46878: NONEQUAL
46879: OR
46880: IFFALSE 46884
// exit ;
46882: GO 47200
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46884: LD_ADDR_VAR 0 6
46888: PUSH
46889: LD_INT 22
46891: PUSH
46892: LD_VAR 0 1
46896: PPUSH
46897: CALL_OW 255
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 2
46908: PUSH
46909: LD_INT 30
46911: PUSH
46912: LD_INT 36
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 34
46921: PUSH
46922: LD_INT 31
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: LIST
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PPUSH
46938: CALL_OW 69
46942: ST_TO_ADDR
// if not tmp then
46943: LD_VAR 0 6
46947: NOT
46948: IFFALSE 46952
// exit ;
46950: GO 47200
// result := [ ] ;
46952: LD_ADDR_VAR 0 2
46956: PUSH
46957: EMPTY
46958: ST_TO_ADDR
// for i in tmp do
46959: LD_ADDR_VAR 0 3
46963: PUSH
46964: LD_VAR 0 6
46968: PUSH
46969: FOR_IN
46970: IFFALSE 47041
// begin t := UnitsInside ( i ) ;
46972: LD_ADDR_VAR 0 4
46976: PUSH
46977: LD_VAR 0 3
46981: PPUSH
46982: CALL_OW 313
46986: ST_TO_ADDR
// if t then
46987: LD_VAR 0 4
46991: IFFALSE 47039
// for j in t do
46993: LD_ADDR_VAR 0 7
46997: PUSH
46998: LD_VAR 0 4
47002: PUSH
47003: FOR_IN
47004: IFFALSE 47037
// result := Replace ( result , result + 1 , j ) ;
47006: LD_ADDR_VAR 0 2
47010: PUSH
47011: LD_VAR 0 2
47015: PPUSH
47016: LD_VAR 0 2
47020: PUSH
47021: LD_INT 1
47023: PLUS
47024: PPUSH
47025: LD_VAR 0 7
47029: PPUSH
47030: CALL_OW 1
47034: ST_TO_ADDR
47035: GO 47003
47037: POP
47038: POP
// end ;
47039: GO 46969
47041: POP
47042: POP
// if not result then
47043: LD_VAR 0 2
47047: NOT
47048: IFFALSE 47052
// exit ;
47050: GO 47200
// mech := result [ 1 ] ;
47052: LD_ADDR_VAR 0 5
47056: PUSH
47057: LD_VAR 0 2
47061: PUSH
47062: LD_INT 1
47064: ARRAY
47065: ST_TO_ADDR
// if result > 1 then
47066: LD_VAR 0 2
47070: PUSH
47071: LD_INT 1
47073: GREATER
47074: IFFALSE 47186
// begin for i = 2 to result do
47076: LD_ADDR_VAR 0 3
47080: PUSH
47081: DOUBLE
47082: LD_INT 2
47084: DEC
47085: ST_TO_ADDR
47086: LD_VAR 0 2
47090: PUSH
47091: FOR_TO
47092: IFFALSE 47184
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47094: LD_ADDR_VAR 0 4
47098: PUSH
47099: LD_VAR 0 2
47103: PUSH
47104: LD_VAR 0 3
47108: ARRAY
47109: PPUSH
47110: LD_INT 3
47112: PPUSH
47113: CALL_OW 259
47117: PUSH
47118: LD_VAR 0 2
47122: PUSH
47123: LD_VAR 0 3
47127: ARRAY
47128: PPUSH
47129: CALL_OW 432
47133: MINUS
47134: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47135: LD_VAR 0 4
47139: PUSH
47140: LD_VAR 0 5
47144: PPUSH
47145: LD_INT 3
47147: PPUSH
47148: CALL_OW 259
47152: PUSH
47153: LD_VAR 0 5
47157: PPUSH
47158: CALL_OW 432
47162: MINUS
47163: GREATEREQUAL
47164: IFFALSE 47182
// mech := result [ i ] ;
47166: LD_ADDR_VAR 0 5
47170: PUSH
47171: LD_VAR 0 2
47175: PUSH
47176: LD_VAR 0 3
47180: ARRAY
47181: ST_TO_ADDR
// end ;
47182: GO 47091
47184: POP
47185: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47186: LD_VAR 0 1
47190: PPUSH
47191: LD_VAR 0 5
47195: PPUSH
47196: CALL_OW 135
// end ;
47200: LD_VAR 0 2
47204: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47205: LD_INT 0
47207: PPUSH
47208: PPUSH
47209: PPUSH
47210: PPUSH
47211: PPUSH
47212: PPUSH
47213: PPUSH
47214: PPUSH
47215: PPUSH
47216: PPUSH
47217: PPUSH
47218: PPUSH
47219: PPUSH
// result := [ ] ;
47220: LD_ADDR_VAR 0 7
47224: PUSH
47225: EMPTY
47226: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47227: LD_VAR 0 1
47231: PPUSH
47232: CALL_OW 266
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: IN
47247: NOT
47248: IFFALSE 47252
// exit ;
47250: GO 48892
// if name then
47252: LD_VAR 0 3
47256: IFFALSE 47272
// SetBName ( base_dep , name ) ;
47258: LD_VAR 0 1
47262: PPUSH
47263: LD_VAR 0 3
47267: PPUSH
47268: CALL_OW 500
// base := GetBase ( base_dep ) ;
47272: LD_ADDR_VAR 0 15
47276: PUSH
47277: LD_VAR 0 1
47281: PPUSH
47282: CALL_OW 274
47286: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47287: LD_ADDR_VAR 0 16
47291: PUSH
47292: LD_VAR 0 1
47296: PPUSH
47297: CALL_OW 255
47301: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47302: LD_ADDR_VAR 0 17
47306: PUSH
47307: LD_VAR 0 1
47311: PPUSH
47312: CALL_OW 248
47316: ST_TO_ADDR
// if sources then
47317: LD_VAR 0 5
47321: IFFALSE 47368
// for i = 1 to 3 do
47323: LD_ADDR_VAR 0 8
47327: PUSH
47328: DOUBLE
47329: LD_INT 1
47331: DEC
47332: ST_TO_ADDR
47333: LD_INT 3
47335: PUSH
47336: FOR_TO
47337: IFFALSE 47366
// AddResourceType ( base , i , sources [ i ] ) ;
47339: LD_VAR 0 15
47343: PPUSH
47344: LD_VAR 0 8
47348: PPUSH
47349: LD_VAR 0 5
47353: PUSH
47354: LD_VAR 0 8
47358: ARRAY
47359: PPUSH
47360: CALL_OW 276
47364: GO 47336
47366: POP
47367: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47368: LD_ADDR_VAR 0 18
47372: PUSH
47373: LD_VAR 0 15
47377: PPUSH
47378: LD_VAR 0 2
47382: PPUSH
47383: LD_INT 1
47385: PPUSH
47386: CALL 46627 0 3
47390: ST_TO_ADDR
// InitHc ;
47391: CALL_OW 19
// InitUc ;
47395: CALL_OW 18
// uc_side := side ;
47399: LD_ADDR_OWVAR 20
47403: PUSH
47404: LD_VAR 0 16
47408: ST_TO_ADDR
// uc_nation := nation ;
47409: LD_ADDR_OWVAR 21
47413: PUSH
47414: LD_VAR 0 17
47418: ST_TO_ADDR
// if buildings then
47419: LD_VAR 0 18
47423: IFFALSE 48751
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47425: LD_ADDR_VAR 0 19
47429: PUSH
47430: LD_VAR 0 18
47434: PPUSH
47435: LD_INT 2
47437: PUSH
47438: LD_INT 30
47440: PUSH
47441: LD_INT 29
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 30
47450: PUSH
47451: LD_INT 30
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: LIST
47462: PPUSH
47463: CALL_OW 72
47467: ST_TO_ADDR
// if tmp then
47468: LD_VAR 0 19
47472: IFFALSE 47520
// for i in tmp do
47474: LD_ADDR_VAR 0 8
47478: PUSH
47479: LD_VAR 0 19
47483: PUSH
47484: FOR_IN
47485: IFFALSE 47518
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47487: LD_VAR 0 8
47491: PPUSH
47492: CALL_OW 250
47496: PPUSH
47497: LD_VAR 0 8
47501: PPUSH
47502: CALL_OW 251
47506: PPUSH
47507: LD_VAR 0 16
47511: PPUSH
47512: CALL_OW 441
47516: GO 47484
47518: POP
47519: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47520: LD_VAR 0 18
47524: PPUSH
47525: LD_INT 2
47527: PUSH
47528: LD_INT 30
47530: PUSH
47531: LD_INT 32
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 30
47540: PUSH
47541: LD_INT 33
47543: PUSH
47544: EMPTY
47545: LIST
47546: LIST
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: LIST
47552: PPUSH
47553: CALL_OW 72
47557: IFFALSE 47645
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47559: LD_ADDR_VAR 0 8
47563: PUSH
47564: LD_VAR 0 18
47568: PPUSH
47569: LD_INT 2
47571: PUSH
47572: LD_INT 30
47574: PUSH
47575: LD_INT 32
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 30
47584: PUSH
47585: LD_INT 33
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: LIST
47596: PPUSH
47597: CALL_OW 72
47601: PUSH
47602: FOR_IN
47603: IFFALSE 47643
// begin if not GetBWeapon ( i ) then
47605: LD_VAR 0 8
47609: PPUSH
47610: CALL_OW 269
47614: NOT
47615: IFFALSE 47641
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47617: LD_VAR 0 8
47621: PPUSH
47622: LD_VAR 0 8
47626: PPUSH
47627: LD_VAR 0 2
47631: PPUSH
47632: CALL 48897 0 2
47636: PPUSH
47637: CALL_OW 431
// end ;
47641: GO 47602
47643: POP
47644: POP
// end ; for i = 1 to personel do
47645: LD_ADDR_VAR 0 8
47649: PUSH
47650: DOUBLE
47651: LD_INT 1
47653: DEC
47654: ST_TO_ADDR
47655: LD_VAR 0 6
47659: PUSH
47660: FOR_TO
47661: IFFALSE 48731
// begin if i > 4 then
47663: LD_VAR 0 8
47667: PUSH
47668: LD_INT 4
47670: GREATER
47671: IFFALSE 47675
// break ;
47673: GO 48731
// case i of 1 :
47675: LD_VAR 0 8
47679: PUSH
47680: LD_INT 1
47682: DOUBLE
47683: EQUAL
47684: IFTRUE 47688
47686: GO 47768
47688: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47689: LD_ADDR_VAR 0 12
47693: PUSH
47694: LD_VAR 0 18
47698: PPUSH
47699: LD_INT 22
47701: PUSH
47702: LD_VAR 0 16
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 58
47713: PUSH
47714: EMPTY
47715: LIST
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: LD_INT 30
47722: PUSH
47723: LD_INT 32
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 30
47732: PUSH
47733: LD_INT 4
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 30
47742: PUSH
47743: LD_INT 5
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: LIST
47760: PPUSH
47761: CALL_OW 72
47765: ST_TO_ADDR
47766: GO 47990
47768: LD_INT 2
47770: DOUBLE
47771: EQUAL
47772: IFTRUE 47776
47774: GO 47838
47776: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47777: LD_ADDR_VAR 0 12
47781: PUSH
47782: LD_VAR 0 18
47786: PPUSH
47787: LD_INT 22
47789: PUSH
47790: LD_VAR 0 16
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: LD_INT 30
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 30
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: LIST
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PPUSH
47831: CALL_OW 72
47835: ST_TO_ADDR
47836: GO 47990
47838: LD_INT 3
47840: DOUBLE
47841: EQUAL
47842: IFTRUE 47846
47844: GO 47908
47846: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47847: LD_ADDR_VAR 0 12
47851: PUSH
47852: LD_VAR 0 18
47856: PPUSH
47857: LD_INT 22
47859: PUSH
47860: LD_VAR 0 16
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 2
47871: PUSH
47872: LD_INT 30
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 30
47884: PUSH
47885: LD_INT 3
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: LIST
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PPUSH
47901: CALL_OW 72
47905: ST_TO_ADDR
47906: GO 47990
47908: LD_INT 4
47910: DOUBLE
47911: EQUAL
47912: IFTRUE 47916
47914: GO 47989
47916: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47917: LD_ADDR_VAR 0 12
47921: PUSH
47922: LD_VAR 0 18
47926: PPUSH
47927: LD_INT 22
47929: PUSH
47930: LD_VAR 0 16
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 2
47941: PUSH
47942: LD_INT 30
47944: PUSH
47945: LD_INT 6
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 30
47954: PUSH
47955: LD_INT 7
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 30
47964: PUSH
47965: LD_INT 8
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PPUSH
47982: CALL_OW 72
47986: ST_TO_ADDR
47987: GO 47990
47989: POP
// if i = 1 then
47990: LD_VAR 0 8
47994: PUSH
47995: LD_INT 1
47997: EQUAL
47998: IFFALSE 48109
// begin tmp := [ ] ;
48000: LD_ADDR_VAR 0 19
48004: PUSH
48005: EMPTY
48006: ST_TO_ADDR
// for j in f do
48007: LD_ADDR_VAR 0 9
48011: PUSH
48012: LD_VAR 0 12
48016: PUSH
48017: FOR_IN
48018: IFFALSE 48091
// if GetBType ( j ) = b_bunker then
48020: LD_VAR 0 9
48024: PPUSH
48025: CALL_OW 266
48029: PUSH
48030: LD_INT 32
48032: EQUAL
48033: IFFALSE 48060
// tmp := Insert ( tmp , 1 , j ) else
48035: LD_ADDR_VAR 0 19
48039: PUSH
48040: LD_VAR 0 19
48044: PPUSH
48045: LD_INT 1
48047: PPUSH
48048: LD_VAR 0 9
48052: PPUSH
48053: CALL_OW 2
48057: ST_TO_ADDR
48058: GO 48089
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48060: LD_ADDR_VAR 0 19
48064: PUSH
48065: LD_VAR 0 19
48069: PPUSH
48070: LD_VAR 0 19
48074: PUSH
48075: LD_INT 1
48077: PLUS
48078: PPUSH
48079: LD_VAR 0 9
48083: PPUSH
48084: CALL_OW 2
48088: ST_TO_ADDR
48089: GO 48017
48091: POP
48092: POP
// if tmp then
48093: LD_VAR 0 19
48097: IFFALSE 48109
// f := tmp ;
48099: LD_ADDR_VAR 0 12
48103: PUSH
48104: LD_VAR 0 19
48108: ST_TO_ADDR
// end ; x := personel [ i ] ;
48109: LD_ADDR_VAR 0 13
48113: PUSH
48114: LD_VAR 0 6
48118: PUSH
48119: LD_VAR 0 8
48123: ARRAY
48124: ST_TO_ADDR
// if x = - 1 then
48125: LD_VAR 0 13
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: EQUAL
48134: IFFALSE 48345
// begin for j in f do
48136: LD_ADDR_VAR 0 9
48140: PUSH
48141: LD_VAR 0 12
48145: PUSH
48146: FOR_IN
48147: IFFALSE 48341
// repeat InitHc ;
48149: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48153: LD_VAR 0 9
48157: PPUSH
48158: CALL_OW 266
48162: PUSH
48163: LD_INT 5
48165: EQUAL
48166: IFFALSE 48236
// begin if UnitsInside ( j ) < 3 then
48168: LD_VAR 0 9
48172: PPUSH
48173: CALL_OW 313
48177: PUSH
48178: LD_INT 3
48180: LESS
48181: IFFALSE 48217
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48183: LD_INT 0
48185: PPUSH
48186: LD_INT 5
48188: PUSH
48189: LD_INT 8
48191: PUSH
48192: LD_INT 9
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: LIST
48199: PUSH
48200: LD_VAR 0 17
48204: ARRAY
48205: PPUSH
48206: LD_VAR 0 4
48210: PPUSH
48211: CALL_OW 380
48215: GO 48234
// PrepareHuman ( false , i , skill ) ;
48217: LD_INT 0
48219: PPUSH
48220: LD_VAR 0 8
48224: PPUSH
48225: LD_VAR 0 4
48229: PPUSH
48230: CALL_OW 380
// end else
48234: GO 48253
// PrepareHuman ( false , i , skill ) ;
48236: LD_INT 0
48238: PPUSH
48239: LD_VAR 0 8
48243: PPUSH
48244: LD_VAR 0 4
48248: PPUSH
48249: CALL_OW 380
// un := CreateHuman ;
48253: LD_ADDR_VAR 0 14
48257: PUSH
48258: CALL_OW 44
48262: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48263: LD_ADDR_VAR 0 7
48267: PUSH
48268: LD_VAR 0 7
48272: PPUSH
48273: LD_INT 1
48275: PPUSH
48276: LD_VAR 0 14
48280: PPUSH
48281: CALL_OW 2
48285: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48286: LD_VAR 0 14
48290: PPUSH
48291: LD_VAR 0 9
48295: PPUSH
48296: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48300: LD_VAR 0 9
48304: PPUSH
48305: CALL_OW 313
48309: PUSH
48310: LD_INT 6
48312: EQUAL
48313: IFTRUE 48337
48315: PUSH
48316: LD_VAR 0 9
48320: PPUSH
48321: CALL_OW 266
48325: PUSH
48326: LD_INT 32
48328: PUSH
48329: LD_INT 31
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: IN
48336: OR
48337: IFFALSE 48149
48339: GO 48146
48341: POP
48342: POP
// end else
48343: GO 48729
// for j = 1 to x do
48345: LD_ADDR_VAR 0 9
48349: PUSH
48350: DOUBLE
48351: LD_INT 1
48353: DEC
48354: ST_TO_ADDR
48355: LD_VAR 0 13
48359: PUSH
48360: FOR_TO
48361: IFFALSE 48727
// begin InitHc ;
48363: CALL_OW 19
// if not f then
48367: LD_VAR 0 12
48371: NOT
48372: IFFALSE 48461
// begin PrepareHuman ( false , i , skill ) ;
48374: LD_INT 0
48376: PPUSH
48377: LD_VAR 0 8
48381: PPUSH
48382: LD_VAR 0 4
48386: PPUSH
48387: CALL_OW 380
// un := CreateHuman ;
48391: LD_ADDR_VAR 0 14
48395: PUSH
48396: CALL_OW 44
48400: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48401: LD_ADDR_VAR 0 7
48405: PUSH
48406: LD_VAR 0 7
48410: PPUSH
48411: LD_INT 1
48413: PPUSH
48414: LD_VAR 0 14
48418: PPUSH
48419: CALL_OW 2
48423: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48424: LD_VAR 0 14
48428: PPUSH
48429: LD_VAR 0 1
48433: PPUSH
48434: CALL_OW 250
48438: PPUSH
48439: LD_VAR 0 1
48443: PPUSH
48444: CALL_OW 251
48448: PPUSH
48449: LD_INT 10
48451: PPUSH
48452: LD_INT 0
48454: PPUSH
48455: CALL_OW 50
// continue ;
48459: GO 48360
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48461: LD_VAR 0 12
48465: PUSH
48466: LD_INT 1
48468: ARRAY
48469: PPUSH
48470: CALL_OW 313
48474: IFFALSE 48502
48476: PUSH
48477: LD_VAR 0 12
48481: PUSH
48482: LD_INT 1
48484: ARRAY
48485: PPUSH
48486: CALL_OW 266
48490: PUSH
48491: LD_INT 32
48493: PUSH
48494: LD_INT 31
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: IN
48501: AND
48502: IFTRUE 48523
48504: PUSH
48505: LD_VAR 0 12
48509: PUSH
48510: LD_INT 1
48512: ARRAY
48513: PPUSH
48514: CALL_OW 313
48518: PUSH
48519: LD_INT 6
48521: EQUAL
48522: OR
48523: IFFALSE 48543
// f := Delete ( f , 1 ) ;
48525: LD_ADDR_VAR 0 12
48529: PUSH
48530: LD_VAR 0 12
48534: PPUSH
48535: LD_INT 1
48537: PPUSH
48538: CALL_OW 3
48542: ST_TO_ADDR
// if not f then
48543: LD_VAR 0 12
48547: NOT
48548: IFFALSE 48566
// begin x := x + 2 ;
48550: LD_ADDR_VAR 0 13
48554: PUSH
48555: LD_VAR 0 13
48559: PUSH
48560: LD_INT 2
48562: PLUS
48563: ST_TO_ADDR
// continue ;
48564: GO 48360
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48566: LD_VAR 0 12
48570: PUSH
48571: LD_INT 1
48573: ARRAY
48574: PPUSH
48575: CALL_OW 266
48579: PUSH
48580: LD_INT 5
48582: EQUAL
48583: IFFALSE 48657
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48585: LD_VAR 0 12
48589: PUSH
48590: LD_INT 1
48592: ARRAY
48593: PPUSH
48594: CALL_OW 313
48598: PUSH
48599: LD_INT 3
48601: LESS
48602: IFFALSE 48638
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48604: LD_INT 0
48606: PPUSH
48607: LD_INT 5
48609: PUSH
48610: LD_INT 8
48612: PUSH
48613: LD_INT 9
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: LIST
48620: PUSH
48621: LD_VAR 0 17
48625: ARRAY
48626: PPUSH
48627: LD_VAR 0 4
48631: PPUSH
48632: CALL_OW 380
48636: GO 48655
// PrepareHuman ( false , i , skill ) ;
48638: LD_INT 0
48640: PPUSH
48641: LD_VAR 0 8
48645: PPUSH
48646: LD_VAR 0 4
48650: PPUSH
48651: CALL_OW 380
// end else
48655: GO 48674
// PrepareHuman ( false , i , skill ) ;
48657: LD_INT 0
48659: PPUSH
48660: LD_VAR 0 8
48664: PPUSH
48665: LD_VAR 0 4
48669: PPUSH
48670: CALL_OW 380
// un := CreateHuman ;
48674: LD_ADDR_VAR 0 14
48678: PUSH
48679: CALL_OW 44
48683: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48684: LD_ADDR_VAR 0 7
48688: PUSH
48689: LD_VAR 0 7
48693: PPUSH
48694: LD_INT 1
48696: PPUSH
48697: LD_VAR 0 14
48701: PPUSH
48702: CALL_OW 2
48706: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48707: LD_VAR 0 14
48711: PPUSH
48712: LD_VAR 0 12
48716: PUSH
48717: LD_INT 1
48719: ARRAY
48720: PPUSH
48721: CALL_OW 52
// end ;
48725: GO 48360
48727: POP
48728: POP
// end ;
48729: GO 47660
48731: POP
48732: POP
// result := result ^ buildings ;
48733: LD_ADDR_VAR 0 7
48737: PUSH
48738: LD_VAR 0 7
48742: PUSH
48743: LD_VAR 0 18
48747: ADD
48748: ST_TO_ADDR
// end else
48749: GO 48892
// begin for i = 1 to personel do
48751: LD_ADDR_VAR 0 8
48755: PUSH
48756: DOUBLE
48757: LD_INT 1
48759: DEC
48760: ST_TO_ADDR
48761: LD_VAR 0 6
48765: PUSH
48766: FOR_TO
48767: IFFALSE 48890
// begin if i > 4 then
48769: LD_VAR 0 8
48773: PUSH
48774: LD_INT 4
48776: GREATER
48777: IFFALSE 48781
// break ;
48779: GO 48890
// x := personel [ i ] ;
48781: LD_ADDR_VAR 0 13
48785: PUSH
48786: LD_VAR 0 6
48790: PUSH
48791: LD_VAR 0 8
48795: ARRAY
48796: ST_TO_ADDR
// if x = - 1 then
48797: LD_VAR 0 13
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: EQUAL
48806: IFFALSE 48810
// continue ;
48808: GO 48766
// PrepareHuman ( false , i , skill ) ;
48810: LD_INT 0
48812: PPUSH
48813: LD_VAR 0 8
48817: PPUSH
48818: LD_VAR 0 4
48822: PPUSH
48823: CALL_OW 380
// un := CreateHuman ;
48827: LD_ADDR_VAR 0 14
48831: PUSH
48832: CALL_OW 44
48836: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48837: LD_VAR 0 14
48841: PPUSH
48842: LD_VAR 0 1
48846: PPUSH
48847: CALL_OW 250
48851: PPUSH
48852: LD_VAR 0 1
48856: PPUSH
48857: CALL_OW 251
48861: PPUSH
48862: LD_INT 10
48864: PPUSH
48865: LD_INT 0
48867: PPUSH
48868: CALL_OW 50
// result := result ^ un ;
48872: LD_ADDR_VAR 0 7
48876: PUSH
48877: LD_VAR 0 7
48881: PUSH
48882: LD_VAR 0 14
48886: ADD
48887: ST_TO_ADDR
// end ;
48888: GO 48766
48890: POP
48891: POP
// end ; end ;
48892: LD_VAR 0 7
48896: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48897: LD_INT 0
48899: PPUSH
48900: PPUSH
48901: PPUSH
48902: PPUSH
48903: PPUSH
48904: PPUSH
48905: PPUSH
48906: PPUSH
48907: PPUSH
48908: PPUSH
48909: PPUSH
48910: PPUSH
48911: PPUSH
48912: PPUSH
48913: PPUSH
48914: PPUSH
// result := false ;
48915: LD_ADDR_VAR 0 3
48919: PUSH
48920: LD_INT 0
48922: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48923: LD_VAR 0 1
48927: NOT
48928: IFTRUE 48953
48930: PUSH
48931: LD_VAR 0 1
48935: PPUSH
48936: CALL_OW 266
48940: PUSH
48941: LD_INT 32
48943: PUSH
48944: LD_INT 33
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: IN
48951: NOT
48952: OR
48953: IFFALSE 48957
// exit ;
48955: GO 50092
// nat := GetNation ( tower ) ;
48957: LD_ADDR_VAR 0 12
48961: PUSH
48962: LD_VAR 0 1
48966: PPUSH
48967: CALL_OW 248
48971: ST_TO_ADDR
// side := GetSide ( tower ) ;
48972: LD_ADDR_VAR 0 16
48976: PUSH
48977: LD_VAR 0 1
48981: PPUSH
48982: CALL_OW 255
48986: ST_TO_ADDR
// x := GetX ( tower ) ;
48987: LD_ADDR_VAR 0 10
48991: PUSH
48992: LD_VAR 0 1
48996: PPUSH
48997: CALL_OW 250
49001: ST_TO_ADDR
// y := GetY ( tower ) ;
49002: LD_ADDR_VAR 0 11
49006: PUSH
49007: LD_VAR 0 1
49011: PPUSH
49012: CALL_OW 251
49016: ST_TO_ADDR
// if not x or not y then
49017: LD_VAR 0 10
49021: NOT
49022: IFTRUE 49031
49024: PUSH
49025: LD_VAR 0 11
49029: NOT
49030: OR
49031: IFFALSE 49035
// exit ;
49033: GO 50092
// weapon := 0 ;
49035: LD_ADDR_VAR 0 18
49039: PUSH
49040: LD_INT 0
49042: ST_TO_ADDR
// fac_list := [ ] ;
49043: LD_ADDR_VAR 0 17
49047: PUSH
49048: EMPTY
49049: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49050: LD_ADDR_VAR 0 6
49054: PUSH
49055: LD_VAR 0 1
49059: PPUSH
49060: CALL_OW 274
49064: PPUSH
49065: LD_VAR 0 2
49069: PPUSH
49070: LD_INT 0
49072: PPUSH
49073: CALL 46627 0 3
49077: PPUSH
49078: LD_INT 30
49080: PUSH
49081: LD_INT 3
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PPUSH
49088: CALL_OW 72
49092: ST_TO_ADDR
// if not factories then
49093: LD_VAR 0 6
49097: NOT
49098: IFFALSE 49102
// exit ;
49100: GO 50092
// for i in factories do
49102: LD_ADDR_VAR 0 8
49106: PUSH
49107: LD_VAR 0 6
49111: PUSH
49112: FOR_IN
49113: IFFALSE 49138
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49115: LD_ADDR_VAR 0 17
49119: PUSH
49120: LD_VAR 0 17
49124: PUSH
49125: LD_VAR 0 8
49129: PPUSH
49130: CALL_OW 478
49134: UNION
49135: ST_TO_ADDR
49136: GO 49112
49138: POP
49139: POP
// if not fac_list then
49140: LD_VAR 0 17
49144: NOT
49145: IFFALSE 49149
// exit ;
49147: GO 50092
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49149: LD_ADDR_VAR 0 5
49153: PUSH
49154: LD_INT 4
49156: PUSH
49157: LD_INT 5
49159: PUSH
49160: LD_INT 9
49162: PUSH
49163: LD_INT 10
49165: PUSH
49166: LD_INT 6
49168: PUSH
49169: LD_INT 7
49171: PUSH
49172: LD_INT 11
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: PUSH
49184: LD_INT 27
49186: PUSH
49187: LD_INT 28
49189: PUSH
49190: LD_INT 26
49192: PUSH
49193: LD_INT 30
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 43
49204: PUSH
49205: LD_INT 44
49207: PUSH
49208: LD_INT 46
49210: PUSH
49211: LD_INT 45
49213: PUSH
49214: LD_INT 47
49216: PUSH
49217: LD_INT 49
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: LIST
49232: PUSH
49233: LD_VAR 0 12
49237: ARRAY
49238: ST_TO_ADDR
// list := list isect fac_list ;
49239: LD_ADDR_VAR 0 5
49243: PUSH
49244: LD_VAR 0 5
49248: PUSH
49249: LD_VAR 0 17
49253: ISECT
49254: ST_TO_ADDR
// if not list then
49255: LD_VAR 0 5
49259: NOT
49260: IFFALSE 49264
// exit ;
49262: GO 50092
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49264: LD_VAR 0 12
49268: PUSH
49269: LD_INT 3
49271: EQUAL
49272: IFFALSE 49284
49274: PUSH
49275: LD_INT 49
49277: PUSH
49278: LD_VAR 0 5
49282: IN
49283: AND
49284: IFFALSE 49304
49286: PUSH
49287: LD_INT 31
49289: PPUSH
49290: LD_VAR 0 16
49294: PPUSH
49295: CALL_OW 321
49299: PUSH
49300: LD_INT 2
49302: EQUAL
49303: AND
49304: IFFALSE 49364
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49306: LD_INT 22
49308: PUSH
49309: LD_VAR 0 16
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 35
49320: PUSH
49321: LD_INT 49
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 91
49330: PUSH
49331: LD_VAR 0 1
49335: PUSH
49336: LD_INT 10
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: LIST
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: LIST
49348: PPUSH
49349: CALL_OW 69
49353: NOT
49354: IFFALSE 49364
// weapon := ru_time_lapser ;
49356: LD_ADDR_VAR 0 18
49360: PUSH
49361: LD_INT 49
49363: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49364: LD_VAR 0 12
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: LD_INT 2
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: IN
49379: IFFALSE 49403
49381: PUSH
49382: LD_INT 11
49384: PUSH
49385: LD_VAR 0 5
49389: IN
49390: IFTRUE 49402
49392: PUSH
49393: LD_INT 30
49395: PUSH
49396: LD_VAR 0 5
49400: IN
49401: OR
49402: AND
49403: IFFALSE 49423
49405: PUSH
49406: LD_INT 6
49408: PPUSH
49409: LD_VAR 0 16
49413: PPUSH
49414: CALL_OW 321
49418: PUSH
49419: LD_INT 2
49421: EQUAL
49422: AND
49423: IFFALSE 49590
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49425: LD_INT 22
49427: PUSH
49428: LD_VAR 0 16
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 2
49439: PUSH
49440: LD_INT 35
49442: PUSH
49443: LD_INT 11
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 35
49452: PUSH
49453: LD_INT 30
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 91
49467: PUSH
49468: LD_VAR 0 1
49472: PUSH
49473: LD_INT 18
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: LIST
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: LIST
49485: PPUSH
49486: CALL_OW 69
49490: NOT
49491: IFFALSE 49567
49493: PUSH
49494: LD_INT 22
49496: PUSH
49497: LD_VAR 0 16
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 2
49508: PUSH
49509: LD_INT 30
49511: PUSH
49512: LD_INT 32
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 30
49521: PUSH
49522: LD_INT 33
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 91
49536: PUSH
49537: LD_VAR 0 1
49541: PUSH
49542: LD_INT 12
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: LIST
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: LIST
49554: PUSH
49555: EMPTY
49556: LIST
49557: PPUSH
49558: CALL_OW 69
49562: PUSH
49563: LD_INT 2
49565: GREATER
49566: AND
49567: IFFALSE 49590
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49569: LD_ADDR_VAR 0 18
49573: PUSH
49574: LD_INT 11
49576: PUSH
49577: LD_INT 30
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_VAR 0 12
49588: ARRAY
49589: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49590: LD_VAR 0 18
49594: NOT
49595: IFFALSE 49615
49597: PUSH
49598: LD_INT 40
49600: PPUSH
49601: LD_VAR 0 16
49605: PPUSH
49606: CALL_OW 321
49610: PUSH
49611: LD_INT 2
49613: EQUAL
49614: AND
49615: IFFALSE 49651
49617: PUSH
49618: LD_INT 7
49620: PUSH
49621: LD_VAR 0 5
49625: IN
49626: IFTRUE 49638
49628: PUSH
49629: LD_INT 28
49631: PUSH
49632: LD_VAR 0 5
49636: IN
49637: OR
49638: IFTRUE 49650
49640: PUSH
49641: LD_INT 45
49643: PUSH
49644: LD_VAR 0 5
49648: IN
49649: OR
49650: AND
49651: IFFALSE 49905
// begin hex := GetHexInfo ( x , y ) ;
49653: LD_ADDR_VAR 0 4
49657: PUSH
49658: LD_VAR 0 10
49662: PPUSH
49663: LD_VAR 0 11
49667: PPUSH
49668: CALL_OW 546
49672: ST_TO_ADDR
// if hex [ 1 ] then
49673: LD_VAR 0 4
49677: PUSH
49678: LD_INT 1
49680: ARRAY
49681: IFFALSE 49685
// exit ;
49683: GO 50092
// height := hex [ 2 ] ;
49685: LD_ADDR_VAR 0 15
49689: PUSH
49690: LD_VAR 0 4
49694: PUSH
49695: LD_INT 2
49697: ARRAY
49698: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49699: LD_ADDR_VAR 0 14
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: LD_INT 2
49709: PUSH
49710: LD_INT 3
49712: PUSH
49713: LD_INT 5
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: ST_TO_ADDR
// for i in tmp do
49722: LD_ADDR_VAR 0 8
49726: PUSH
49727: LD_VAR 0 14
49731: PUSH
49732: FOR_IN
49733: IFFALSE 49903
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49735: LD_ADDR_VAR 0 9
49739: PUSH
49740: LD_VAR 0 10
49744: PPUSH
49745: LD_VAR 0 8
49749: PPUSH
49750: LD_INT 5
49752: PPUSH
49753: CALL_OW 272
49757: PUSH
49758: LD_VAR 0 11
49762: PPUSH
49763: LD_VAR 0 8
49767: PPUSH
49768: LD_INT 5
49770: PPUSH
49771: CALL_OW 273
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49780: LD_VAR 0 9
49784: PUSH
49785: LD_INT 1
49787: ARRAY
49788: PPUSH
49789: LD_VAR 0 9
49793: PUSH
49794: LD_INT 2
49796: ARRAY
49797: PPUSH
49798: CALL_OW 488
49802: IFFALSE 49901
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49804: LD_ADDR_VAR 0 4
49808: PUSH
49809: LD_VAR 0 9
49813: PUSH
49814: LD_INT 1
49816: ARRAY
49817: PPUSH
49818: LD_VAR 0 9
49822: PUSH
49823: LD_INT 2
49825: ARRAY
49826: PPUSH
49827: CALL_OW 546
49831: ST_TO_ADDR
// if hex [ 1 ] then
49832: LD_VAR 0 4
49836: PUSH
49837: LD_INT 1
49839: ARRAY
49840: IFFALSE 49844
// continue ;
49842: GO 49732
// h := hex [ 2 ] ;
49844: LD_ADDR_VAR 0 13
49848: PUSH
49849: LD_VAR 0 4
49853: PUSH
49854: LD_INT 2
49856: ARRAY
49857: ST_TO_ADDR
// if h + 7 < height then
49858: LD_VAR 0 13
49862: PUSH
49863: LD_INT 7
49865: PLUS
49866: PUSH
49867: LD_VAR 0 15
49871: LESS
49872: IFFALSE 49901
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49874: LD_ADDR_VAR 0 18
49878: PUSH
49879: LD_INT 7
49881: PUSH
49882: LD_INT 28
49884: PUSH
49885: LD_INT 45
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: LIST
49892: PUSH
49893: LD_VAR 0 12
49897: ARRAY
49898: ST_TO_ADDR
// break ;
49899: GO 49903
// end ; end ; end ;
49901: GO 49732
49903: POP
49904: POP
// end ; if not weapon then
49905: LD_VAR 0 18
49909: NOT
49910: IFFALSE 49970
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49912: LD_ADDR_VAR 0 5
49916: PUSH
49917: LD_VAR 0 5
49921: PUSH
49922: LD_INT 11
49924: PUSH
49925: LD_INT 30
49927: PUSH
49928: LD_INT 49
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: LIST
49935: DIFF
49936: ST_TO_ADDR
// if not list then
49937: LD_VAR 0 5
49941: NOT
49942: IFFALSE 49946
// exit ;
49944: GO 50092
// weapon := list [ rand ( 1 , list ) ] ;
49946: LD_ADDR_VAR 0 18
49950: PUSH
49951: LD_VAR 0 5
49955: PUSH
49956: LD_INT 1
49958: PPUSH
49959: LD_VAR 0 5
49963: PPUSH
49964: CALL_OW 12
49968: ARRAY
49969: ST_TO_ADDR
// end ; if weapon then
49970: LD_VAR 0 18
49974: IFFALSE 50092
// begin tmp := CostOfWeapon ( weapon ) ;
49976: LD_ADDR_VAR 0 14
49980: PUSH
49981: LD_VAR 0 18
49985: PPUSH
49986: CALL_OW 451
49990: ST_TO_ADDR
// j := GetBase ( tower ) ;
49991: LD_ADDR_VAR 0 9
49995: PUSH
49996: LD_VAR 0 1
50000: PPUSH
50001: CALL_OW 274
50005: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50006: LD_VAR 0 9
50010: PPUSH
50011: LD_INT 1
50013: PPUSH
50014: CALL_OW 275
50018: PUSH
50019: LD_VAR 0 14
50023: PUSH
50024: LD_INT 1
50026: ARRAY
50027: GREATEREQUAL
50028: IFFALSE 50054
50030: PUSH
50031: LD_VAR 0 9
50035: PPUSH
50036: LD_INT 2
50038: PPUSH
50039: CALL_OW 275
50043: PUSH
50044: LD_VAR 0 14
50048: PUSH
50049: LD_INT 2
50051: ARRAY
50052: GREATEREQUAL
50053: AND
50054: IFFALSE 50080
50056: PUSH
50057: LD_VAR 0 9
50061: PPUSH
50062: LD_INT 3
50064: PPUSH
50065: CALL_OW 275
50069: PUSH
50070: LD_VAR 0 14
50074: PUSH
50075: LD_INT 3
50077: ARRAY
50078: GREATEREQUAL
50079: AND
50080: IFFALSE 50092
// result := weapon ;
50082: LD_ADDR_VAR 0 3
50086: PUSH
50087: LD_VAR 0 18
50091: ST_TO_ADDR
// end ; end ;
50092: LD_VAR 0 3
50096: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50097: LD_INT 0
50099: PPUSH
50100: PPUSH
// result := true ;
50101: LD_ADDR_VAR 0 3
50105: PUSH
50106: LD_INT 1
50108: ST_TO_ADDR
// if array1 = array2 then
50109: LD_VAR 0 1
50113: PUSH
50114: LD_VAR 0 2
50118: EQUAL
50119: IFFALSE 50179
// begin for i = 1 to array1 do
50121: LD_ADDR_VAR 0 4
50125: PUSH
50126: DOUBLE
50127: LD_INT 1
50129: DEC
50130: ST_TO_ADDR
50131: LD_VAR 0 1
50135: PUSH
50136: FOR_TO
50137: IFFALSE 50175
// if array1 [ i ] <> array2 [ i ] then
50139: LD_VAR 0 1
50143: PUSH
50144: LD_VAR 0 4
50148: ARRAY
50149: PUSH
50150: LD_VAR 0 2
50154: PUSH
50155: LD_VAR 0 4
50159: ARRAY
50160: NONEQUAL
50161: IFFALSE 50173
// begin result := false ;
50163: LD_ADDR_VAR 0 3
50167: PUSH
50168: LD_INT 0
50170: ST_TO_ADDR
// break ;
50171: GO 50175
// end ;
50173: GO 50136
50175: POP
50176: POP
// end else
50177: GO 50187
// result := false ;
50179: LD_ADDR_VAR 0 3
50183: PUSH
50184: LD_INT 0
50186: ST_TO_ADDR
// end ;
50187: LD_VAR 0 3
50191: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50192: LD_INT 0
50194: PPUSH
50195: PPUSH
// if not array1 or not array2 then
50196: LD_VAR 0 1
50200: NOT
50201: IFTRUE 50210
50203: PUSH
50204: LD_VAR 0 2
50208: NOT
50209: OR
50210: IFFALSE 50214
// exit ;
50212: GO 50278
// result := true ;
50214: LD_ADDR_VAR 0 3
50218: PUSH
50219: LD_INT 1
50221: ST_TO_ADDR
// for i = 1 to array1 do
50222: LD_ADDR_VAR 0 4
50226: PUSH
50227: DOUBLE
50228: LD_INT 1
50230: DEC
50231: ST_TO_ADDR
50232: LD_VAR 0 1
50236: PUSH
50237: FOR_TO
50238: IFFALSE 50276
// if array1 [ i ] <> array2 [ i ] then
50240: LD_VAR 0 1
50244: PUSH
50245: LD_VAR 0 4
50249: ARRAY
50250: PUSH
50251: LD_VAR 0 2
50255: PUSH
50256: LD_VAR 0 4
50260: ARRAY
50261: NONEQUAL
50262: IFFALSE 50274
// begin result := false ;
50264: LD_ADDR_VAR 0 3
50268: PUSH
50269: LD_INT 0
50271: ST_TO_ADDR
// break ;
50272: GO 50276
// end ;
50274: GO 50237
50276: POP
50277: POP
// end ;
50278: LD_VAR 0 3
50282: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50283: LD_INT 0
50285: PPUSH
50286: PPUSH
50287: PPUSH
// pom := GetBase ( fac ) ;
50288: LD_ADDR_VAR 0 5
50292: PUSH
50293: LD_VAR 0 1
50297: PPUSH
50298: CALL_OW 274
50302: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50303: LD_ADDR_VAR 0 4
50307: PUSH
50308: LD_VAR 0 2
50312: PUSH
50313: LD_INT 1
50315: ARRAY
50316: PPUSH
50317: LD_VAR 0 2
50321: PUSH
50322: LD_INT 2
50324: ARRAY
50325: PPUSH
50326: LD_VAR 0 2
50330: PUSH
50331: LD_INT 3
50333: ARRAY
50334: PPUSH
50335: LD_VAR 0 2
50339: PUSH
50340: LD_INT 4
50342: ARRAY
50343: PPUSH
50344: CALL_OW 449
50348: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50349: LD_ADDR_VAR 0 3
50353: PUSH
50354: LD_VAR 0 5
50358: PPUSH
50359: LD_INT 1
50361: PPUSH
50362: CALL_OW 275
50366: PUSH
50367: LD_VAR 0 4
50371: PUSH
50372: LD_INT 1
50374: ARRAY
50375: GREATEREQUAL
50376: IFFALSE 50402
50378: PUSH
50379: LD_VAR 0 5
50383: PPUSH
50384: LD_INT 2
50386: PPUSH
50387: CALL_OW 275
50391: PUSH
50392: LD_VAR 0 4
50396: PUSH
50397: LD_INT 2
50399: ARRAY
50400: GREATEREQUAL
50401: AND
50402: IFFALSE 50428
50404: PUSH
50405: LD_VAR 0 5
50409: PPUSH
50410: LD_INT 3
50412: PPUSH
50413: CALL_OW 275
50417: PUSH
50418: LD_VAR 0 4
50422: PUSH
50423: LD_INT 3
50425: ARRAY
50426: GREATEREQUAL
50427: AND
50428: ST_TO_ADDR
// end ;
50429: LD_VAR 0 3
50433: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50434: LD_INT 0
50436: PPUSH
50437: PPUSH
50438: PPUSH
50439: PPUSH
// pom := GetBase ( building ) ;
50440: LD_ADDR_VAR 0 3
50444: PUSH
50445: LD_VAR 0 1
50449: PPUSH
50450: CALL_OW 274
50454: ST_TO_ADDR
// if not pom then
50455: LD_VAR 0 3
50459: NOT
50460: IFFALSE 50464
// exit ;
50462: GO 50638
// btype := GetBType ( building ) ;
50464: LD_ADDR_VAR 0 5
50468: PUSH
50469: LD_VAR 0 1
50473: PPUSH
50474: CALL_OW 266
50478: ST_TO_ADDR
// if btype = b_armoury then
50479: LD_VAR 0 5
50483: PUSH
50484: LD_INT 4
50486: EQUAL
50487: IFFALSE 50497
// btype := b_barracks ;
50489: LD_ADDR_VAR 0 5
50493: PUSH
50494: LD_INT 5
50496: ST_TO_ADDR
// if btype = b_depot then
50497: LD_VAR 0 5
50501: PUSH
50502: LD_INT 0
50504: EQUAL
50505: IFFALSE 50515
// btype := b_warehouse ;
50507: LD_ADDR_VAR 0 5
50511: PUSH
50512: LD_INT 1
50514: ST_TO_ADDR
// if btype = b_workshop then
50515: LD_VAR 0 5
50519: PUSH
50520: LD_INT 2
50522: EQUAL
50523: IFFALSE 50533
// btype := b_factory ;
50525: LD_ADDR_VAR 0 5
50529: PUSH
50530: LD_INT 3
50532: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50533: LD_ADDR_VAR 0 4
50537: PUSH
50538: LD_VAR 0 5
50542: PPUSH
50543: LD_VAR 0 1
50547: PPUSH
50548: CALL_OW 248
50552: PPUSH
50553: CALL_OW 450
50557: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50558: LD_ADDR_VAR 0 2
50562: PUSH
50563: LD_VAR 0 3
50567: PPUSH
50568: LD_INT 1
50570: PPUSH
50571: CALL_OW 275
50575: PUSH
50576: LD_VAR 0 4
50580: PUSH
50581: LD_INT 1
50583: ARRAY
50584: GREATEREQUAL
50585: IFFALSE 50611
50587: PUSH
50588: LD_VAR 0 3
50592: PPUSH
50593: LD_INT 2
50595: PPUSH
50596: CALL_OW 275
50600: PUSH
50601: LD_VAR 0 4
50605: PUSH
50606: LD_INT 2
50608: ARRAY
50609: GREATEREQUAL
50610: AND
50611: IFFALSE 50637
50613: PUSH
50614: LD_VAR 0 3
50618: PPUSH
50619: LD_INT 3
50621: PPUSH
50622: CALL_OW 275
50626: PUSH
50627: LD_VAR 0 4
50631: PUSH
50632: LD_INT 3
50634: ARRAY
50635: GREATEREQUAL
50636: AND
50637: ST_TO_ADDR
// end ;
50638: LD_VAR 0 2
50642: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50643: LD_INT 0
50645: PPUSH
50646: PPUSH
50647: PPUSH
// pom := GetBase ( building ) ;
50648: LD_ADDR_VAR 0 4
50652: PUSH
50653: LD_VAR 0 1
50657: PPUSH
50658: CALL_OW 274
50662: ST_TO_ADDR
// if not pom then
50663: LD_VAR 0 4
50667: NOT
50668: IFFALSE 50672
// exit ;
50670: GO 50777
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50672: LD_ADDR_VAR 0 5
50676: PUSH
50677: LD_VAR 0 2
50681: PPUSH
50682: LD_VAR 0 1
50686: PPUSH
50687: CALL_OW 248
50691: PPUSH
50692: CALL_OW 450
50696: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50697: LD_ADDR_VAR 0 3
50701: PUSH
50702: LD_VAR 0 4
50706: PPUSH
50707: LD_INT 1
50709: PPUSH
50710: CALL_OW 275
50714: PUSH
50715: LD_VAR 0 5
50719: PUSH
50720: LD_INT 1
50722: ARRAY
50723: GREATEREQUAL
50724: IFFALSE 50750
50726: PUSH
50727: LD_VAR 0 4
50731: PPUSH
50732: LD_INT 2
50734: PPUSH
50735: CALL_OW 275
50739: PUSH
50740: LD_VAR 0 5
50744: PUSH
50745: LD_INT 2
50747: ARRAY
50748: GREATEREQUAL
50749: AND
50750: IFFALSE 50776
50752: PUSH
50753: LD_VAR 0 4
50757: PPUSH
50758: LD_INT 3
50760: PPUSH
50761: CALL_OW 275
50765: PUSH
50766: LD_VAR 0 5
50770: PUSH
50771: LD_INT 3
50773: ARRAY
50774: GREATEREQUAL
50775: AND
50776: ST_TO_ADDR
// end ;
50777: LD_VAR 0 3
50781: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50782: LD_INT 0
50784: PPUSH
50785: PPUSH
50786: PPUSH
50787: PPUSH
50788: PPUSH
50789: PPUSH
50790: PPUSH
50791: PPUSH
50792: PPUSH
50793: PPUSH
50794: PPUSH
// result := false ;
50795: LD_ADDR_VAR 0 8
50799: PUSH
50800: LD_INT 0
50802: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50803: LD_VAR 0 5
50807: NOT
50808: IFTRUE 50817
50810: PUSH
50811: LD_VAR 0 1
50815: NOT
50816: OR
50817: IFTRUE 50826
50819: PUSH
50820: LD_VAR 0 2
50824: NOT
50825: OR
50826: IFTRUE 50835
50828: PUSH
50829: LD_VAR 0 3
50833: NOT
50834: OR
50835: IFFALSE 50839
// exit ;
50837: GO 51665
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50839: LD_ADDR_VAR 0 14
50843: PUSH
50844: LD_VAR 0 1
50848: PPUSH
50849: LD_VAR 0 2
50853: PPUSH
50854: LD_VAR 0 3
50858: PPUSH
50859: LD_VAR 0 4
50863: PPUSH
50864: LD_VAR 0 5
50868: PUSH
50869: LD_INT 1
50871: ARRAY
50872: PPUSH
50873: CALL_OW 248
50877: PPUSH
50878: LD_INT 0
50880: PPUSH
50881: CALL 52946 0 6
50885: ST_TO_ADDR
// if not hexes then
50886: LD_VAR 0 14
50890: NOT
50891: IFFALSE 50895
// exit ;
50893: GO 51665
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50895: LD_ADDR_VAR 0 17
50899: PUSH
50900: LD_VAR 0 5
50904: PPUSH
50905: LD_INT 22
50907: PUSH
50908: LD_VAR 0 13
50912: PPUSH
50913: CALL_OW 255
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 2
50924: PUSH
50925: LD_INT 30
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 30
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: LIST
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PPUSH
50954: CALL_OW 72
50958: ST_TO_ADDR
// for i = 1 to hexes do
50959: LD_ADDR_VAR 0 9
50963: PUSH
50964: DOUBLE
50965: LD_INT 1
50967: DEC
50968: ST_TO_ADDR
50969: LD_VAR 0 14
50973: PUSH
50974: FOR_TO
50975: IFFALSE 51663
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50977: LD_ADDR_VAR 0 13
50981: PUSH
50982: LD_VAR 0 14
50986: PUSH
50987: LD_VAR 0 9
50991: ARRAY
50992: PUSH
50993: LD_INT 1
50995: ARRAY
50996: PPUSH
50997: LD_VAR 0 14
51001: PUSH
51002: LD_VAR 0 9
51006: ARRAY
51007: PUSH
51008: LD_INT 2
51010: ARRAY
51011: PPUSH
51012: CALL_OW 428
51016: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51017: LD_VAR 0 14
51021: PUSH
51022: LD_VAR 0 9
51026: ARRAY
51027: PUSH
51028: LD_INT 1
51030: ARRAY
51031: PPUSH
51032: LD_VAR 0 14
51036: PUSH
51037: LD_VAR 0 9
51041: ARRAY
51042: PUSH
51043: LD_INT 2
51045: ARRAY
51046: PPUSH
51047: CALL_OW 351
51051: IFTRUE 51090
51053: PUSH
51054: LD_VAR 0 14
51058: PUSH
51059: LD_VAR 0 9
51063: ARRAY
51064: PUSH
51065: LD_INT 1
51067: ARRAY
51068: PPUSH
51069: LD_VAR 0 14
51073: PUSH
51074: LD_VAR 0 9
51078: ARRAY
51079: PUSH
51080: LD_INT 2
51082: ARRAY
51083: PPUSH
51084: CALL_OW 488
51088: NOT
51089: OR
51090: IFTRUE 51107
51092: PUSH
51093: LD_VAR 0 13
51097: PPUSH
51098: CALL_OW 247
51102: PUSH
51103: LD_INT 3
51105: EQUAL
51106: OR
51107: IFFALSE 51113
// exit ;
51109: POP
51110: POP
51111: GO 51665
// if not tmp then
51113: LD_VAR 0 13
51117: NOT
51118: IFFALSE 51122
// continue ;
51120: GO 50974
// result := true ;
51122: LD_ADDR_VAR 0 8
51126: PUSH
51127: LD_INT 1
51129: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51130: LD_VAR 0 6
51134: IFFALSE 51151
51136: PUSH
51137: LD_VAR 0 13
51141: PPUSH
51142: CALL_OW 247
51146: PUSH
51147: LD_INT 2
51149: EQUAL
51150: AND
51151: IFFALSE 51168
51153: PUSH
51154: LD_VAR 0 13
51158: PPUSH
51159: CALL_OW 263
51163: PUSH
51164: LD_INT 1
51166: EQUAL
51167: AND
51168: IFFALSE 51332
// begin if IsDrivenBy ( tmp ) then
51170: LD_VAR 0 13
51174: PPUSH
51175: CALL_OW 311
51179: IFFALSE 51183
// continue ;
51181: GO 50974
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51183: LD_VAR 0 6
51187: PPUSH
51188: LD_INT 3
51190: PUSH
51191: LD_INT 60
51193: PUSH
51194: EMPTY
51195: LIST
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 3
51203: PUSH
51204: LD_INT 55
51206: PUSH
51207: EMPTY
51208: LIST
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PPUSH
51218: CALL_OW 72
51222: IFFALSE 51330
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51224: LD_ADDR_VAR 0 18
51228: PUSH
51229: LD_VAR 0 6
51233: PPUSH
51234: LD_INT 3
51236: PUSH
51237: LD_INT 60
51239: PUSH
51240: EMPTY
51241: LIST
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 3
51249: PUSH
51250: LD_INT 55
51252: PUSH
51253: EMPTY
51254: LIST
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PPUSH
51264: CALL_OW 72
51268: PUSH
51269: LD_INT 1
51271: ARRAY
51272: ST_TO_ADDR
// if IsInUnit ( driver ) then
51273: LD_VAR 0 18
51277: PPUSH
51278: CALL_OW 310
51282: IFFALSE 51293
// ComExit ( driver ) ;
51284: LD_VAR 0 18
51288: PPUSH
51289: CALL 76946 0 1
// AddComEnterUnit ( driver , tmp ) ;
51293: LD_VAR 0 18
51297: PPUSH
51298: LD_VAR 0 13
51302: PPUSH
51303: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51307: LD_VAR 0 18
51311: PPUSH
51312: LD_VAR 0 7
51316: PPUSH
51317: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51321: LD_VAR 0 18
51325: PPUSH
51326: CALL_OW 181
// end ; continue ;
51330: GO 50974
// end ; if not cleaners or not tmp in cleaners then
51332: LD_VAR 0 6
51336: NOT
51337: IFTRUE 51352
51339: PUSH
51340: LD_VAR 0 13
51344: PUSH
51345: LD_VAR 0 6
51349: IN
51350: NOT
51351: OR
51352: IFFALSE 51661
// begin if dep then
51354: LD_VAR 0 17
51358: IFFALSE 51494
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51360: LD_ADDR_VAR 0 16
51364: PUSH
51365: LD_VAR 0 17
51369: PUSH
51370: LD_INT 1
51372: ARRAY
51373: PPUSH
51374: CALL_OW 250
51378: PPUSH
51379: LD_VAR 0 17
51383: PUSH
51384: LD_INT 1
51386: ARRAY
51387: PPUSH
51388: CALL_OW 254
51392: PPUSH
51393: LD_INT 5
51395: PPUSH
51396: CALL_OW 272
51400: PUSH
51401: LD_VAR 0 17
51405: PUSH
51406: LD_INT 1
51408: ARRAY
51409: PPUSH
51410: CALL_OW 251
51414: PPUSH
51415: LD_VAR 0 17
51419: PUSH
51420: LD_INT 1
51422: ARRAY
51423: PPUSH
51424: CALL_OW 254
51428: PPUSH
51429: LD_INT 5
51431: PPUSH
51432: CALL_OW 273
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51441: LD_VAR 0 16
51445: PUSH
51446: LD_INT 1
51448: ARRAY
51449: PPUSH
51450: LD_VAR 0 16
51454: PUSH
51455: LD_INT 2
51457: ARRAY
51458: PPUSH
51459: CALL_OW 488
51463: IFFALSE 51494
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51465: LD_VAR 0 13
51469: PPUSH
51470: LD_VAR 0 16
51474: PUSH
51475: LD_INT 1
51477: ARRAY
51478: PPUSH
51479: LD_VAR 0 16
51483: PUSH
51484: LD_INT 2
51486: ARRAY
51487: PPUSH
51488: CALL_OW 111
// continue ;
51492: GO 50974
// end ; end ; r := GetDir ( tmp ) ;
51494: LD_ADDR_VAR 0 15
51498: PUSH
51499: LD_VAR 0 13
51503: PPUSH
51504: CALL_OW 254
51508: ST_TO_ADDR
// if r = 5 then
51509: LD_VAR 0 15
51513: PUSH
51514: LD_INT 5
51516: EQUAL
51517: IFFALSE 51527
// r := 0 ;
51519: LD_ADDR_VAR 0 15
51523: PUSH
51524: LD_INT 0
51526: ST_TO_ADDR
// for j = r to 5 do
51527: LD_ADDR_VAR 0 10
51531: PUSH
51532: DOUBLE
51533: LD_VAR 0 15
51537: DEC
51538: ST_TO_ADDR
51539: LD_INT 5
51541: PUSH
51542: FOR_TO
51543: IFFALSE 51659
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51545: LD_ADDR_VAR 0 11
51549: PUSH
51550: LD_VAR 0 13
51554: PPUSH
51555: CALL_OW 250
51559: PPUSH
51560: LD_VAR 0 10
51564: PPUSH
51565: LD_INT 2
51567: PPUSH
51568: CALL_OW 272
51572: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51573: LD_ADDR_VAR 0 12
51577: PUSH
51578: LD_VAR 0 13
51582: PPUSH
51583: CALL_OW 251
51587: PPUSH
51588: LD_VAR 0 10
51592: PPUSH
51593: LD_INT 2
51595: PPUSH
51596: CALL_OW 273
51600: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51601: LD_VAR 0 11
51605: PPUSH
51606: LD_VAR 0 12
51610: PPUSH
51611: CALL_OW 488
51615: IFFALSE 51634
51617: PUSH
51618: LD_VAR 0 11
51622: PPUSH
51623: LD_VAR 0 12
51627: PPUSH
51628: CALL_OW 428
51632: NOT
51633: AND
51634: IFFALSE 51657
// begin ComMoveXY ( tmp , _x , _y ) ;
51636: LD_VAR 0 13
51640: PPUSH
51641: LD_VAR 0 11
51645: PPUSH
51646: LD_VAR 0 12
51650: PPUSH
51651: CALL_OW 111
// break ;
51655: GO 51659
// end ; end ;
51657: GO 51542
51659: POP
51660: POP
// end ; end ;
51661: GO 50974
51663: POP
51664: POP
// end ;
51665: LD_VAR 0 8
51669: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51670: LD_INT 0
51672: PPUSH
// result := true ;
51673: LD_ADDR_VAR 0 3
51677: PUSH
51678: LD_INT 1
51680: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51681: LD_VAR 0 2
51685: PUSH
51686: LD_INT 24
51688: DOUBLE
51689: EQUAL
51690: IFTRUE 51700
51692: LD_INT 33
51694: DOUBLE
51695: EQUAL
51696: IFTRUE 51700
51698: GO 51725
51700: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51701: LD_ADDR_VAR 0 3
51705: PUSH
51706: LD_INT 32
51708: PPUSH
51709: LD_VAR 0 1
51713: PPUSH
51714: CALL_OW 321
51718: PUSH
51719: LD_INT 2
51721: EQUAL
51722: ST_TO_ADDR
51723: GO 52041
51725: LD_INT 20
51727: DOUBLE
51728: EQUAL
51729: IFTRUE 51733
51731: GO 51758
51733: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51734: LD_ADDR_VAR 0 3
51738: PUSH
51739: LD_INT 6
51741: PPUSH
51742: LD_VAR 0 1
51746: PPUSH
51747: CALL_OW 321
51751: PUSH
51752: LD_INT 2
51754: EQUAL
51755: ST_TO_ADDR
51756: GO 52041
51758: LD_INT 22
51760: DOUBLE
51761: EQUAL
51762: IFTRUE 51772
51764: LD_INT 36
51766: DOUBLE
51767: EQUAL
51768: IFTRUE 51772
51770: GO 51797
51772: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51773: LD_ADDR_VAR 0 3
51777: PUSH
51778: LD_INT 15
51780: PPUSH
51781: LD_VAR 0 1
51785: PPUSH
51786: CALL_OW 321
51790: PUSH
51791: LD_INT 2
51793: EQUAL
51794: ST_TO_ADDR
51795: GO 52041
51797: LD_INT 30
51799: DOUBLE
51800: EQUAL
51801: IFTRUE 51805
51803: GO 51830
51805: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51806: LD_ADDR_VAR 0 3
51810: PUSH
51811: LD_INT 20
51813: PPUSH
51814: LD_VAR 0 1
51818: PPUSH
51819: CALL_OW 321
51823: PUSH
51824: LD_INT 2
51826: EQUAL
51827: ST_TO_ADDR
51828: GO 52041
51830: LD_INT 28
51832: DOUBLE
51833: EQUAL
51834: IFTRUE 51844
51836: LD_INT 21
51838: DOUBLE
51839: EQUAL
51840: IFTRUE 51844
51842: GO 51869
51844: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51845: LD_ADDR_VAR 0 3
51849: PUSH
51850: LD_INT 21
51852: PPUSH
51853: LD_VAR 0 1
51857: PPUSH
51858: CALL_OW 321
51862: PUSH
51863: LD_INT 2
51865: EQUAL
51866: ST_TO_ADDR
51867: GO 52041
51869: LD_INT 16
51871: DOUBLE
51872: EQUAL
51873: IFTRUE 51877
51875: GO 51902
51877: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51878: LD_ADDR_VAR 0 3
51882: PUSH
51883: LD_INT 84
51885: PPUSH
51886: LD_VAR 0 1
51890: PPUSH
51891: CALL_OW 321
51895: PUSH
51896: LD_INT 2
51898: EQUAL
51899: ST_TO_ADDR
51900: GO 52041
51902: LD_INT 19
51904: DOUBLE
51905: EQUAL
51906: IFTRUE 51916
51908: LD_INT 23
51910: DOUBLE
51911: EQUAL
51912: IFTRUE 51916
51914: GO 51941
51916: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51917: LD_ADDR_VAR 0 3
51921: PUSH
51922: LD_INT 83
51924: PPUSH
51925: LD_VAR 0 1
51929: PPUSH
51930: CALL_OW 321
51934: PUSH
51935: LD_INT 2
51937: EQUAL
51938: ST_TO_ADDR
51939: GO 52041
51941: LD_INT 17
51943: DOUBLE
51944: EQUAL
51945: IFTRUE 51949
51947: GO 51974
51949: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51950: LD_ADDR_VAR 0 3
51954: PUSH
51955: LD_INT 39
51957: PPUSH
51958: LD_VAR 0 1
51962: PPUSH
51963: CALL_OW 321
51967: PUSH
51968: LD_INT 2
51970: EQUAL
51971: ST_TO_ADDR
51972: GO 52041
51974: LD_INT 18
51976: DOUBLE
51977: EQUAL
51978: IFTRUE 51982
51980: GO 52007
51982: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51983: LD_ADDR_VAR 0 3
51987: PUSH
51988: LD_INT 40
51990: PPUSH
51991: LD_VAR 0 1
51995: PPUSH
51996: CALL_OW 321
52000: PUSH
52001: LD_INT 2
52003: EQUAL
52004: ST_TO_ADDR
52005: GO 52041
52007: LD_INT 27
52009: DOUBLE
52010: EQUAL
52011: IFTRUE 52015
52013: GO 52040
52015: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52016: LD_ADDR_VAR 0 3
52020: PUSH
52021: LD_INT 35
52023: PPUSH
52024: LD_VAR 0 1
52028: PPUSH
52029: CALL_OW 321
52033: PUSH
52034: LD_INT 2
52036: EQUAL
52037: ST_TO_ADDR
52038: GO 52041
52040: POP
// end ;
52041: LD_VAR 0 3
52045: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52046: LD_INT 0
52048: PPUSH
52049: PPUSH
52050: PPUSH
52051: PPUSH
52052: PPUSH
52053: PPUSH
52054: PPUSH
52055: PPUSH
52056: PPUSH
52057: PPUSH
52058: PPUSH
// result := false ;
52059: LD_ADDR_VAR 0 6
52063: PUSH
52064: LD_INT 0
52066: ST_TO_ADDR
// if btype = b_depot then
52067: LD_VAR 0 2
52071: PUSH
52072: LD_INT 0
52074: EQUAL
52075: IFFALSE 52087
// begin result := true ;
52077: LD_ADDR_VAR 0 6
52081: PUSH
52082: LD_INT 1
52084: ST_TO_ADDR
// exit ;
52085: GO 52941
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52087: LD_VAR 0 1
52091: NOT
52092: IFTRUE 52117
52094: PUSH
52095: LD_VAR 0 1
52099: PPUSH
52100: CALL_OW 266
52104: PUSH
52105: LD_INT 0
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: IN
52115: NOT
52116: OR
52117: IFTRUE 52126
52119: PUSH
52120: LD_VAR 0 2
52124: NOT
52125: OR
52126: IFTRUE 52162
52128: PUSH
52129: LD_VAR 0 5
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: LD_INT 1
52139: PUSH
52140: LD_INT 2
52142: PUSH
52143: LD_INT 3
52145: PUSH
52146: LD_INT 4
52148: PUSH
52149: LD_INT 5
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: IN
52160: NOT
52161: OR
52162: IFTRUE 52181
52164: PUSH
52165: LD_VAR 0 3
52169: PPUSH
52170: LD_VAR 0 4
52174: PPUSH
52175: CALL_OW 488
52179: NOT
52180: OR
52181: IFFALSE 52185
// exit ;
52183: GO 52941
// side := GetSide ( depot ) ;
52185: LD_ADDR_VAR 0 9
52189: PUSH
52190: LD_VAR 0 1
52194: PPUSH
52195: CALL_OW 255
52199: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52200: LD_VAR 0 9
52204: PPUSH
52205: LD_VAR 0 2
52209: PPUSH
52210: CALL 51670 0 2
52214: NOT
52215: IFFALSE 52219
// exit ;
52217: GO 52941
// pom := GetBase ( depot ) ;
52219: LD_ADDR_VAR 0 10
52223: PUSH
52224: LD_VAR 0 1
52228: PPUSH
52229: CALL_OW 274
52233: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52234: LD_ADDR_VAR 0 11
52238: PUSH
52239: LD_VAR 0 2
52243: PPUSH
52244: LD_VAR 0 1
52248: PPUSH
52249: CALL_OW 248
52253: PPUSH
52254: CALL_OW 450
52258: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52259: LD_VAR 0 10
52263: PPUSH
52264: LD_INT 1
52266: PPUSH
52267: CALL_OW 275
52271: PUSH
52272: LD_VAR 0 11
52276: PUSH
52277: LD_INT 1
52279: ARRAY
52280: GREATEREQUAL
52281: IFFALSE 52307
52283: PUSH
52284: LD_VAR 0 10
52288: PPUSH
52289: LD_INT 2
52291: PPUSH
52292: CALL_OW 275
52296: PUSH
52297: LD_VAR 0 11
52301: PUSH
52302: LD_INT 2
52304: ARRAY
52305: GREATEREQUAL
52306: AND
52307: IFFALSE 52333
52309: PUSH
52310: LD_VAR 0 10
52314: PPUSH
52315: LD_INT 3
52317: PPUSH
52318: CALL_OW 275
52322: PUSH
52323: LD_VAR 0 11
52327: PUSH
52328: LD_INT 3
52330: ARRAY
52331: GREATEREQUAL
52332: AND
52333: NOT
52334: IFFALSE 52338
// exit ;
52336: GO 52941
// if GetBType ( depot ) = b_depot then
52338: LD_VAR 0 1
52342: PPUSH
52343: CALL_OW 266
52347: PUSH
52348: LD_INT 0
52350: EQUAL
52351: IFFALSE 52363
// dist := 28 else
52353: LD_ADDR_VAR 0 14
52357: PUSH
52358: LD_INT 28
52360: ST_TO_ADDR
52361: GO 52371
// dist := 36 ;
52363: LD_ADDR_VAR 0 14
52367: PUSH
52368: LD_INT 36
52370: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52371: LD_VAR 0 1
52375: PPUSH
52376: LD_VAR 0 3
52380: PPUSH
52381: LD_VAR 0 4
52385: PPUSH
52386: CALL_OW 297
52390: PUSH
52391: LD_VAR 0 14
52395: GREATER
52396: IFFALSE 52400
// exit ;
52398: GO 52941
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52400: LD_ADDR_VAR 0 12
52404: PUSH
52405: LD_VAR 0 2
52409: PPUSH
52410: LD_VAR 0 3
52414: PPUSH
52415: LD_VAR 0 4
52419: PPUSH
52420: LD_VAR 0 5
52424: PPUSH
52425: LD_VAR 0 1
52429: PPUSH
52430: CALL_OW 248
52434: PPUSH
52435: LD_INT 0
52437: PPUSH
52438: CALL 52946 0 6
52442: ST_TO_ADDR
// if not hexes then
52443: LD_VAR 0 12
52447: NOT
52448: IFFALSE 52452
// exit ;
52450: GO 52941
// hex := GetHexInfo ( x , y ) ;
52452: LD_ADDR_VAR 0 15
52456: PUSH
52457: LD_VAR 0 3
52461: PPUSH
52462: LD_VAR 0 4
52466: PPUSH
52467: CALL_OW 546
52471: ST_TO_ADDR
// if hex [ 1 ] then
52472: LD_VAR 0 15
52476: PUSH
52477: LD_INT 1
52479: ARRAY
52480: IFFALSE 52484
// exit ;
52482: GO 52941
// height := hex [ 2 ] ;
52484: LD_ADDR_VAR 0 13
52488: PUSH
52489: LD_VAR 0 15
52493: PUSH
52494: LD_INT 2
52496: ARRAY
52497: ST_TO_ADDR
// for i = 1 to hexes do
52498: LD_ADDR_VAR 0 7
52502: PUSH
52503: DOUBLE
52504: LD_INT 1
52506: DEC
52507: ST_TO_ADDR
52508: LD_VAR 0 12
52512: PUSH
52513: FOR_TO
52514: IFFALSE 52858
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52516: LD_VAR 0 12
52520: PUSH
52521: LD_VAR 0 7
52525: ARRAY
52526: PUSH
52527: LD_INT 1
52529: ARRAY
52530: PPUSH
52531: LD_VAR 0 12
52535: PUSH
52536: LD_VAR 0 7
52540: ARRAY
52541: PUSH
52542: LD_INT 2
52544: ARRAY
52545: PPUSH
52546: CALL_OW 488
52550: NOT
52551: IFTRUE 52593
52553: PUSH
52554: LD_VAR 0 12
52558: PUSH
52559: LD_VAR 0 7
52563: ARRAY
52564: PUSH
52565: LD_INT 1
52567: ARRAY
52568: PPUSH
52569: LD_VAR 0 12
52573: PUSH
52574: LD_VAR 0 7
52578: ARRAY
52579: PUSH
52580: LD_INT 2
52582: ARRAY
52583: PPUSH
52584: CALL_OW 428
52588: PUSH
52589: LD_INT 0
52591: GREATER
52592: OR
52593: IFTRUE 52631
52595: PUSH
52596: LD_VAR 0 12
52600: PUSH
52601: LD_VAR 0 7
52605: ARRAY
52606: PUSH
52607: LD_INT 1
52609: ARRAY
52610: PPUSH
52611: LD_VAR 0 12
52615: PUSH
52616: LD_VAR 0 7
52620: ARRAY
52621: PUSH
52622: LD_INT 2
52624: ARRAY
52625: PPUSH
52626: CALL_OW 351
52630: OR
52631: IFFALSE 52637
// exit ;
52633: POP
52634: POP
52635: GO 52941
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52637: LD_ADDR_VAR 0 8
52641: PUSH
52642: LD_VAR 0 12
52646: PUSH
52647: LD_VAR 0 7
52651: ARRAY
52652: PUSH
52653: LD_INT 1
52655: ARRAY
52656: PPUSH
52657: LD_VAR 0 12
52661: PUSH
52662: LD_VAR 0 7
52666: ARRAY
52667: PUSH
52668: LD_INT 2
52670: ARRAY
52671: PPUSH
52672: CALL_OW 546
52676: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52677: LD_VAR 0 8
52681: PUSH
52682: LD_INT 1
52684: ARRAY
52685: IFTRUE 52707
52687: PUSH
52688: LD_VAR 0 8
52692: PUSH
52693: LD_INT 2
52695: ARRAY
52696: PUSH
52697: LD_VAR 0 13
52701: PUSH
52702: LD_INT 2
52704: PLUS
52705: GREATER
52706: OR
52707: IFTRUE 52729
52709: PUSH
52710: LD_VAR 0 8
52714: PUSH
52715: LD_INT 2
52717: ARRAY
52718: PUSH
52719: LD_VAR 0 13
52723: PUSH
52724: LD_INT 2
52726: MINUS
52727: LESS
52728: OR
52729: IFTRUE 52797
52731: PUSH
52732: LD_VAR 0 8
52736: PUSH
52737: LD_INT 3
52739: ARRAY
52740: PUSH
52741: LD_INT 0
52743: PUSH
52744: LD_INT 8
52746: PUSH
52747: LD_INT 9
52749: PUSH
52750: LD_INT 10
52752: PUSH
52753: LD_INT 11
52755: PUSH
52756: LD_INT 12
52758: PUSH
52759: LD_INT 13
52761: PUSH
52762: LD_INT 16
52764: PUSH
52765: LD_INT 17
52767: PUSH
52768: LD_INT 18
52770: PUSH
52771: LD_INT 19
52773: PUSH
52774: LD_INT 20
52776: PUSH
52777: LD_INT 21
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: IN
52795: NOT
52796: OR
52797: IFTRUE 52810
52799: PUSH
52800: LD_VAR 0 8
52804: PUSH
52805: LD_INT 5
52807: ARRAY
52808: NOT
52809: OR
52810: IFTRUE 52850
52812: PUSH
52813: LD_VAR 0 8
52817: PUSH
52818: LD_INT 6
52820: ARRAY
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: LD_INT 2
52827: PUSH
52828: LD_INT 7
52830: PUSH
52831: LD_INT 9
52833: PUSH
52834: LD_INT 10
52836: PUSH
52837: LD_INT 11
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: IN
52848: NOT
52849: OR
52850: IFFALSE 52856
// exit ;
52852: POP
52853: POP
52854: GO 52941
// end ;
52856: GO 52513
52858: POP
52859: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52860: LD_VAR 0 9
52864: PPUSH
52865: LD_VAR 0 3
52869: PPUSH
52870: LD_VAR 0 4
52874: PPUSH
52875: LD_INT 20
52877: PPUSH
52878: CALL 44760 0 4
52882: PUSH
52883: LD_INT 4
52885: ARRAY
52886: IFFALSE 52890
// exit ;
52888: GO 52941
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52890: LD_VAR 0 2
52894: PUSH
52895: LD_INT 29
52897: PUSH
52898: LD_INT 30
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: IN
52905: IFFALSE 52929
52907: PUSH
52908: LD_VAR 0 3
52912: PPUSH
52913: LD_VAR 0 4
52917: PPUSH
52918: LD_VAR 0 9
52922: PPUSH
52923: CALL_OW 440
52927: NOT
52928: AND
52929: IFFALSE 52933
// exit ;
52931: GO 52941
// result := true ;
52933: LD_ADDR_VAR 0 6
52937: PUSH
52938: LD_INT 1
52940: ST_TO_ADDR
// end ;
52941: LD_VAR 0 6
52945: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52946: LD_INT 0
52948: PPUSH
52949: PPUSH
52950: PPUSH
52951: PPUSH
52952: PPUSH
52953: PPUSH
52954: PPUSH
52955: PPUSH
52956: PPUSH
52957: PPUSH
52958: PPUSH
52959: PPUSH
52960: PPUSH
52961: PPUSH
52962: PPUSH
52963: PPUSH
52964: PPUSH
52965: PPUSH
52966: PPUSH
52967: PPUSH
52968: PPUSH
52969: PPUSH
52970: PPUSH
52971: PPUSH
52972: PPUSH
52973: PPUSH
52974: PPUSH
52975: PPUSH
52976: PPUSH
52977: PPUSH
52978: PPUSH
52979: PPUSH
52980: PPUSH
52981: PPUSH
52982: PPUSH
52983: PPUSH
52984: PPUSH
52985: PPUSH
52986: PPUSH
52987: PPUSH
52988: PPUSH
52989: PPUSH
52990: PPUSH
52991: PPUSH
52992: PPUSH
52993: PPUSH
52994: PPUSH
52995: PPUSH
52996: PPUSH
52997: PPUSH
52998: PPUSH
52999: PPUSH
53000: PPUSH
53001: PPUSH
53002: PPUSH
53003: PPUSH
53004: PPUSH
53005: PPUSH
// result = [ ] ;
53006: LD_ADDR_VAR 0 7
53010: PUSH
53011: EMPTY
53012: ST_TO_ADDR
// temp_list = [ ] ;
53013: LD_ADDR_VAR 0 9
53017: PUSH
53018: EMPTY
53019: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53020: LD_VAR 0 4
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: LD_INT 1
53030: PUSH
53031: LD_INT 2
53033: PUSH
53034: LD_INT 3
53036: PUSH
53037: LD_INT 4
53039: PUSH
53040: LD_INT 5
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: IN
53051: NOT
53052: IFTRUE 53095
53054: PUSH
53055: LD_VAR 0 1
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: IN
53070: IFFALSE 53094
53072: PUSH
53073: LD_VAR 0 5
53077: PUSH
53078: LD_INT 1
53080: PUSH
53081: LD_INT 2
53083: PUSH
53084: LD_INT 3
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: LIST
53091: IN
53092: NOT
53093: AND
53094: OR
53095: IFFALSE 53099
// exit ;
53097: GO 71498
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53099: LD_VAR 0 1
53103: PUSH
53104: LD_INT 6
53106: PUSH
53107: LD_INT 7
53109: PUSH
53110: LD_INT 8
53112: PUSH
53113: LD_INT 13
53115: PUSH
53116: LD_INT 12
53118: PUSH
53119: LD_INT 15
53121: PUSH
53122: LD_INT 11
53124: PUSH
53125: LD_INT 14
53127: PUSH
53128: LD_INT 10
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: IN
53142: IFFALSE 53152
// btype = b_lab ;
53144: LD_ADDR_VAR 0 1
53148: PUSH
53149: LD_INT 6
53151: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53152: LD_VAR 0 6
53156: PUSH
53157: LD_INT 0
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: LIST
53170: IN
53171: NOT
53172: IFTRUE 53240
53174: PUSH
53175: LD_VAR 0 1
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: LD_INT 1
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: LD_INT 3
53191: PUSH
53192: LD_INT 6
53194: PUSH
53195: LD_INT 36
53197: PUSH
53198: LD_INT 4
53200: PUSH
53201: LD_INT 5
53203: PUSH
53204: LD_INT 31
53206: PUSH
53207: LD_INT 32
53209: PUSH
53210: LD_INT 33
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: IN
53226: NOT
53227: IFFALSE 53239
53229: PUSH
53230: LD_VAR 0 6
53234: PUSH
53235: LD_INT 1
53237: EQUAL
53238: AND
53239: OR
53240: IFTRUE 53272
53242: PUSH
53243: LD_VAR 0 1
53247: PUSH
53248: LD_INT 2
53250: PUSH
53251: LD_INT 3
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: IN
53258: NOT
53259: IFFALSE 53271
53261: PUSH
53262: LD_VAR 0 6
53266: PUSH
53267: LD_INT 2
53269: EQUAL
53270: AND
53271: OR
53272: IFFALSE 53282
// mode = 0 ;
53274: LD_ADDR_VAR 0 6
53278: PUSH
53279: LD_INT 0
53281: ST_TO_ADDR
// case mode of 0 :
53282: LD_VAR 0 6
53286: PUSH
53287: LD_INT 0
53289: DOUBLE
53290: EQUAL
53291: IFTRUE 53295
53293: GO 64748
53295: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53296: LD_ADDR_VAR 0 11
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: LD_INT 0
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: LD_INT 1
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: LD_INT 0
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: LD_INT 1
53369: NEG
53370: PUSH
53371: EMPTY
53372: LIST
53373: LIST
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: LD_INT 2
53381: NEG
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 2
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: LD_INT 1
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 2
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: LD_INT 2
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 1
53442: PUSH
53443: LD_INT 3
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: LD_INT 3
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: LD_INT 2
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53489: LD_ADDR_VAR 0 12
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: LD_INT 1
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: LD_INT 1
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: LD_INT 1
53562: NEG
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 2
53581: PUSH
53582: LD_INT 0
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 2
53591: PUSH
53592: LD_INT 1
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: LD_INT 1
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 2
53612: NEG
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 2
53623: NEG
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 2
53635: NEG
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 3
53646: NEG
53647: PUSH
53648: LD_INT 0
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 3
53657: NEG
53658: PUSH
53659: LD_INT 1
53661: NEG
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53685: LD_ADDR_VAR 0 13
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: LD_INT 1
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: LD_INT 0
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: LD_INT 1
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 1
53766: NEG
53767: PUSH
53768: LD_INT 2
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 2
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 2
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: LD_INT 2
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 2
53808: NEG
53809: PUSH
53810: LD_INT 1
53812: NEG
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 2
53820: NEG
53821: PUSH
53822: LD_INT 2
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 2
53832: NEG
53833: PUSH
53834: LD_INT 3
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 3
53844: NEG
53845: PUSH
53846: LD_INT 2
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 3
53856: NEG
53857: PUSH
53858: LD_INT 3
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53884: LD_ADDR_VAR 0 14
53888: PUSH
53889: LD_INT 0
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: LD_INT 1
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: LD_INT 0
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: NEG
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: NEG
53966: PUSH
53967: LD_INT 2
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: LD_INT 2
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 1
53999: PUSH
54000: LD_INT 2
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: LD_INT 2
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: NEG
54031: PUSH
54032: LD_INT 3
54034: NEG
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: LD_INT 3
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: LD_INT 2
54056: NEG
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54080: LD_ADDR_VAR 0 15
54084: PUSH
54085: LD_INT 0
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: PUSH
54109: LD_INT 0
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 1
54118: PUSH
54119: LD_INT 1
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: LD_INT 1
54153: NEG
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: LD_INT 1
54164: NEG
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 2
54172: PUSH
54173: LD_INT 0
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 2
54182: PUSH
54183: LD_INT 1
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 2
54203: NEG
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 2
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 3
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 3
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54273: LD_ADDR_VAR 0 16
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: LD_INT 0
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: LD_INT 1
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: LD_INT 0
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 1
54311: PUSH
54312: LD_INT 1
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 1
54331: NEG
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: LD_INT 2
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 2
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 2
54376: PUSH
54377: LD_INT 2
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 1
54386: PUSH
54387: LD_INT 2
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 2
54396: NEG
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 2
54408: NEG
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 3
54420: PUSH
54421: LD_INT 2
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 3
54430: PUSH
54431: LD_INT 3
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 2
54440: PUSH
54441: LD_INT 3
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54466: LD_ADDR_VAR 0 17
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: LD_INT 0
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: LD_INT 1
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 1
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 1
54547: NEG
54548: PUSH
54549: LD_INT 2
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: LD_INT 2
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 1
54570: PUSH
54571: LD_INT 1
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 2
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 2
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 2
54601: PUSH
54602: LD_INT 2
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: LD_INT 2
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 0
54621: PUSH
54622: LD_INT 2
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: LD_INT 1
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 2
54642: NEG
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 2
54653: NEG
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 2
54665: NEG
54666: PUSH
54667: LD_INT 2
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54696: LD_ADDR_VAR 0 18
54700: PUSH
54701: LD_INT 0
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 1
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 1
54734: PUSH
54735: LD_INT 1
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: PUSH
54779: LD_INT 2
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: LD_INT 2
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: LD_INT 1
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 2
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 2
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: LD_INT 2
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 0
54851: PUSH
54852: LD_INT 2
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 1
54861: NEG
54862: PUSH
54863: LD_INT 1
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 2
54872: NEG
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 2
54895: NEG
54896: PUSH
54897: LD_INT 2
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54926: LD_ADDR_VAR 0 19
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: LD_INT 2
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: LD_INT 2
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 1
55030: PUSH
55031: LD_INT 1
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 2
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 2
55051: PUSH
55052: LD_INT 1
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 2
55061: PUSH
55062: LD_INT 2
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: LD_INT 2
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: LD_INT 2
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: LD_INT 1
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 2
55102: NEG
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 2
55113: NEG
55114: PUSH
55115: LD_INT 1
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: NEG
55126: PUSH
55127: LD_INT 2
55129: NEG
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55156: LD_ADDR_VAR 0 20
55160: PUSH
55161: LD_INT 0
55163: PUSH
55164: LD_INT 0
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: LD_INT 1
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: LD_INT 1
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 0
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 1
55225: NEG
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: LD_INT 2
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: LD_INT 2
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: PUSH
55261: LD_INT 1
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 2
55271: PUSH
55272: LD_INT 0
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 2
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 2
55291: PUSH
55292: LD_INT 2
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: LD_INT 2
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 0
55311: PUSH
55312: LD_INT 2
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 2
55332: NEG
55333: PUSH
55334: LD_INT 0
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: NEG
55356: PUSH
55357: LD_INT 2
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55386: LD_ADDR_VAR 0 21
55390: PUSH
55391: LD_INT 0
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: EMPTY
55398: LIST
55399: LIST
55400: PUSH
55401: LD_INT 0
55403: PUSH
55404: LD_INT 1
55406: NEG
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 1
55455: NEG
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 1
55467: NEG
55468: PUSH
55469: LD_INT 2
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: LD_INT 2
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 1
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 2
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 2
55511: PUSH
55512: LD_INT 1
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 2
55521: PUSH
55522: LD_INT 2
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: LD_INT 2
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 0
55541: PUSH
55542: LD_INT 2
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 1
55551: NEG
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 2
55562: NEG
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 2
55573: NEG
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 2
55585: NEG
55586: PUSH
55587: LD_INT 2
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55616: LD_ADDR_VAR 0 22
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 1
55644: PUSH
55645: LD_INT 0
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: PUSH
55655: LD_INT 1
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: LD_INT 1
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 1
55697: NEG
55698: PUSH
55699: LD_INT 2
55701: NEG
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: PUSH
55707: LD_INT 0
55709: PUSH
55710: LD_INT 2
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: LD_INT 1
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 2
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 2
55751: PUSH
55752: LD_INT 2
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: LD_INT 2
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: LD_INT 2
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 2
55792: NEG
55793: PUSH
55794: LD_INT 0
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 2
55803: NEG
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 2
55815: NEG
55816: PUSH
55817: LD_INT 2
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55846: LD_ADDR_VAR 0 23
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: LD_INT 1
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: LD_INT 1
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 0
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 1
55915: NEG
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: LD_INT 2
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 0
55939: PUSH
55940: LD_INT 2
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 1
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 2
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 2
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 2
55981: PUSH
55982: LD_INT 2
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 1
55991: PUSH
55992: LD_INT 2
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: LD_INT 2
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 1
56011: NEG
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 2
56022: NEG
56023: PUSH
56024: LD_INT 0
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 2
56033: NEG
56034: PUSH
56035: LD_INT 1
56037: NEG
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 2
56045: NEG
56046: PUSH
56047: LD_INT 2
56049: NEG
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 2
56057: NEG
56058: PUSH
56059: LD_INT 3
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: LD_INT 3
56073: NEG
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 2
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56126: LD_ADDR_VAR 0 24
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 0
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 0
56174: PUSH
56175: LD_INT 1
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: LD_INT 1
56199: NEG
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: LD_INT 2
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 0
56219: PUSH
56220: LD_INT 2
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 2
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 2
56261: PUSH
56262: LD_INT 2
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 1
56271: PUSH
56272: LD_INT 2
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 0
56281: PUSH
56282: LD_INT 2
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: NEG
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 2
56302: NEG
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 2
56313: NEG
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 2
56325: NEG
56326: PUSH
56327: LD_INT 2
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 2
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 3
56359: PUSH
56360: LD_INT 1
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 3
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56402: LD_ADDR_VAR 0 25
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 1
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 0
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 1
56471: NEG
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: NEG
56484: PUSH
56485: LD_INT 2
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: LD_INT 2
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: PUSH
56507: LD_INT 1
56509: NEG
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 2
56517: PUSH
56518: LD_INT 0
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 2
56527: PUSH
56528: LD_INT 1
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 2
56537: PUSH
56538: LD_INT 2
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 1
56547: PUSH
56548: LD_INT 2
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: LD_INT 2
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 2
56578: NEG
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 2
56589: NEG
56590: PUSH
56591: LD_INT 1
56593: NEG
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 2
56601: NEG
56602: PUSH
56603: LD_INT 2
56605: NEG
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 3
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 3
56623: PUSH
56624: LD_INT 2
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 2
56633: PUSH
56634: LD_INT 3
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: LD_INT 3
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56676: LD_ADDR_VAR 0 26
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: LD_INT 1
56696: NEG
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PUSH
56702: LD_INT 1
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 1
56734: NEG
56735: PUSH
56736: LD_INT 0
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 1
56757: NEG
56758: PUSH
56759: LD_INT 2
56761: NEG
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: LD_INT 2
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 1
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 2
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 2
56801: PUSH
56802: LD_INT 1
56804: PUSH
56805: EMPTY
56806: LIST
56807: LIST
56808: PUSH
56809: LD_INT 2
56811: PUSH
56812: LD_INT 2
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 1
56821: PUSH
56822: LD_INT 2
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: LD_INT 2
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 2
56852: NEG
56853: PUSH
56854: LD_INT 0
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 2
56863: NEG
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PUSH
56877: LD_INT 2
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 2
56887: PUSH
56888: LD_INT 3
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: LD_INT 3
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: LD_INT 2
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 2
56918: NEG
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56952: LD_ADDR_VAR 0 27
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 0
56969: PUSH
56970: LD_INT 1
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: LD_INT 1
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 0
57000: PUSH
57001: LD_INT 1
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 1
57021: NEG
57022: PUSH
57023: LD_INT 1
57025: NEG
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 1
57033: NEG
57034: PUSH
57035: LD_INT 2
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: LD_INT 2
57048: NEG
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 2
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: LD_INT 2
57077: PUSH
57078: LD_INT 1
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: LD_INT 2
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: LD_INT 2
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: LD_INT 2
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: LD_INT 1
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 2
57128: NEG
57129: PUSH
57130: LD_INT 0
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 2
57139: NEG
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 2
57151: NEG
57152: PUSH
57153: LD_INT 2
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: LD_INT 2
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 2
57174: NEG
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 3
57185: NEG
57186: PUSH
57187: LD_INT 1
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 3
57197: NEG
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57232: LD_ADDR_VAR 0 28
57236: PUSH
57237: LD_INT 0
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 1
57260: PUSH
57261: LD_INT 0
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: PUSH
57271: LD_INT 1
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: LD_INT 1
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: NEG
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: PUSH
57315: LD_INT 2
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: LD_INT 2
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: LD_INT 1
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 2
57357: PUSH
57358: LD_INT 1
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 2
57367: PUSH
57368: LD_INT 2
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 1
57377: PUSH
57378: LD_INT 2
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: LD_INT 2
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 1
57397: NEG
57398: PUSH
57399: LD_INT 1
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 2
57408: NEG
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 2
57419: NEG
57420: PUSH
57421: LD_INT 1
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 2
57431: NEG
57432: PUSH
57433: LD_INT 2
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 2
57443: NEG
57444: PUSH
57445: LD_INT 3
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: NEG
57456: PUSH
57457: LD_INT 3
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 3
57467: NEG
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 3
57479: NEG
57480: PUSH
57481: LD_INT 2
57483: NEG
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57514: LD_ADDR_VAR 0 29
57518: PUSH
57519: LD_INT 0
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 1
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 1
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 0
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 1
57572: NEG
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 1
57583: NEG
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 1
57595: NEG
57596: PUSH
57597: LD_INT 2
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: LD_INT 1
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 2
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 2
57639: PUSH
57640: LD_INT 1
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 1
57649: PUSH
57650: LD_INT 2
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 0
57659: PUSH
57660: LD_INT 2
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: LD_INT 1
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 2
57680: NEG
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 2
57692: NEG
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 2
57704: NEG
57705: PUSH
57706: LD_INT 3
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 2
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 3
57727: PUSH
57728: LD_INT 1
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 1
57737: PUSH
57738: LD_INT 3
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PUSH
57745: LD_INT 1
57747: NEG
57748: PUSH
57749: LD_INT 2
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 3
57758: NEG
57759: PUSH
57760: LD_INT 2
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57793: LD_ADDR_VAR 0 30
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 0
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: PUSH
57822: LD_INT 0
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: LD_INT 1
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: LD_INT 2
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: LD_INT 0
57886: PUSH
57887: LD_INT 2
57889: NEG
57890: PUSH
57891: EMPTY
57892: LIST
57893: LIST
57894: PUSH
57895: LD_INT 1
57897: PUSH
57898: LD_INT 1
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 2
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 2
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 2
57928: PUSH
57929: LD_INT 2
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 1
57938: PUSH
57939: LD_INT 2
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 2
57959: NEG
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 2
57970: NEG
57971: PUSH
57972: LD_INT 1
57974: NEG
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 1
57982: NEG
57983: PUSH
57984: LD_INT 3
57986: NEG
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: PUSH
57995: LD_INT 2
57997: NEG
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 3
58005: PUSH
58006: LD_INT 2
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 2
58015: PUSH
58016: LD_INT 3
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 2
58025: NEG
58026: PUSH
58027: LD_INT 1
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 3
58036: NEG
58037: PUSH
58038: LD_INT 1
58040: NEG
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58071: LD_ADDR_VAR 0 31
58075: PUSH
58076: LD_INT 0
58078: PUSH
58079: LD_INT 0
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 0
58088: PUSH
58089: LD_INT 1
58091: NEG
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 1
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 1
58140: NEG
58141: PUSH
58142: LD_INT 1
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: LD_INT 2
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 1
58164: PUSH
58165: LD_INT 1
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 2
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 2
58185: PUSH
58186: LD_INT 1
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 2
58195: PUSH
58196: LD_INT 2
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: LD_INT 1
58205: PUSH
58206: LD_INT 2
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: LD_INT 2
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 2
58236: NEG
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 2
58248: NEG
58249: PUSH
58250: LD_INT 2
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 2
58260: NEG
58261: PUSH
58262: LD_INT 3
58264: NEG
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 2
58272: PUSH
58273: LD_INT 1
58275: NEG
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 3
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: LD_INT 3
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: LD_INT 2
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 3
58314: NEG
58315: PUSH
58316: LD_INT 2
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58349: LD_ADDR_VAR 0 32
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: LD_INT 1
58369: NEG
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 1
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: LD_INT 1
58418: NEG
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 1
58430: NEG
58431: PUSH
58432: LD_INT 2
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: LD_INT 2
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 1
58453: PUSH
58454: LD_INT 1
58456: NEG
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 2
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 2
58474: PUSH
58475: LD_INT 2
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: LD_INT 2
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: LD_INT 2
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 2
58515: NEG
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 2
58526: NEG
58527: PUSH
58528: LD_INT 1
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: LD_INT 3
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: LD_INT 2
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 3
58561: PUSH
58562: LD_INT 2
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 2
58571: PUSH
58572: LD_INT 3
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 2
58581: NEG
58582: PUSH
58583: LD_INT 1
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 3
58592: NEG
58593: PUSH
58594: LD_INT 1
58596: NEG
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58627: LD_ADDR_VAR 0 33
58631: PUSH
58632: LD_INT 0
58634: PUSH
58635: LD_INT 0
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: LD_INT 1
58647: NEG
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 1
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 1
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 0
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: NEG
58709: PUSH
58710: LD_INT 2
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 2
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 2
58741: PUSH
58742: LD_INT 1
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 1
58751: PUSH
58752: LD_INT 2
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: LD_INT 2
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 1
58771: NEG
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 2
58782: NEG
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 2
58793: NEG
58794: PUSH
58795: LD_INT 1
58797: NEG
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 2
58805: NEG
58806: PUSH
58807: LD_INT 2
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 2
58817: NEG
58818: PUSH
58819: LD_INT 3
58821: NEG
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 2
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 3
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: LD_INT 3
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 1
58860: NEG
58861: PUSH
58862: LD_INT 2
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 3
58871: NEG
58872: PUSH
58873: LD_INT 2
58875: NEG
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58906: LD_ADDR_VAR 0 34
58910: PUSH
58911: LD_INT 0
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 0
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 1
58934: PUSH
58935: LD_INT 0
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: LD_INT 1
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 0
58954: PUSH
58955: LD_INT 1
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: LD_INT 0
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: LD_INT 1
58979: NEG
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 1
58987: NEG
58988: PUSH
58989: LD_INT 2
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 0
58999: PUSH
59000: LD_INT 2
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 1
59010: PUSH
59011: LD_INT 1
59013: NEG
59014: PUSH
59015: EMPTY
59016: LIST
59017: LIST
59018: PUSH
59019: LD_INT 2
59021: PUSH
59022: LD_INT 1
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 2
59031: PUSH
59032: LD_INT 2
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: LD_INT 2
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 1
59051: NEG
59052: PUSH
59053: LD_INT 1
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 2
59062: NEG
59063: PUSH
59064: LD_INT 0
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 2
59073: NEG
59074: PUSH
59075: LD_INT 1
59077: NEG
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: PUSH
59083: LD_INT 2
59085: NEG
59086: PUSH
59087: LD_INT 2
59089: NEG
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: LD_INT 3
59101: NEG
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 1
59109: PUSH
59110: LD_INT 2
59112: NEG
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 3
59120: PUSH
59121: LD_INT 2
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 2
59130: PUSH
59131: LD_INT 3
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 2
59140: NEG
59141: PUSH
59142: LD_INT 1
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 3
59151: NEG
59152: PUSH
59153: LD_INT 1
59155: NEG
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59186: LD_ADDR_VAR 0 35
59190: PUSH
59191: LD_INT 0
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: LD_INT 1
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 1
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 1
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 0
59234: PUSH
59235: LD_INT 1
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 1
59244: NEG
59245: PUSH
59246: LD_INT 0
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 1
59255: NEG
59256: PUSH
59257: LD_INT 1
59259: NEG
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 2
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 2
59277: NEG
59278: PUSH
59279: LD_INT 1
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59298: LD_ADDR_VAR 0 36
59302: PUSH
59303: LD_INT 0
59305: PUSH
59306: LD_INT 0
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: LD_INT 1
59318: NEG
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: PUSH
59324: LD_INT 1
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: LD_INT 1
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 0
59346: PUSH
59347: LD_INT 1
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: LD_INT 0
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 1
59367: NEG
59368: PUSH
59369: LD_INT 1
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 1
59379: NEG
59380: PUSH
59381: LD_INT 2
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 1
59391: PUSH
59392: LD_INT 2
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59410: LD_ADDR_VAR 0 37
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 0
59427: PUSH
59428: LD_INT 1
59430: NEG
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 1
59438: PUSH
59439: LD_INT 0
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 1
59448: PUSH
59449: LD_INT 1
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 0
59458: PUSH
59459: LD_INT 1
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: LD_INT 0
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 1
59479: NEG
59480: PUSH
59481: LD_INT 1
59483: NEG
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: LD_INT 1
59494: NEG
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 1
59502: NEG
59503: PUSH
59504: LD_INT 1
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59522: LD_ADDR_VAR 0 38
59526: PUSH
59527: LD_INT 0
59529: PUSH
59530: LD_INT 0
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: LD_INT 1
59542: NEG
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 1
59560: PUSH
59561: LD_INT 1
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: LD_INT 1
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 1
59580: NEG
59581: PUSH
59582: LD_INT 0
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 1
59591: NEG
59592: PUSH
59593: LD_INT 1
59595: NEG
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 2
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 2
59613: NEG
59614: PUSH
59615: LD_INT 1
59617: NEG
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59634: LD_ADDR_VAR 0 39
59638: PUSH
59639: LD_INT 0
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: LD_INT 1
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 1
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: PUSH
59673: LD_INT 1
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 0
59682: PUSH
59683: LD_INT 1
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: LD_INT 1
59703: NEG
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 1
59715: NEG
59716: PUSH
59717: LD_INT 2
59719: NEG
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 1
59727: PUSH
59728: LD_INT 2
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59746: LD_ADDR_VAR 0 40
59750: PUSH
59751: LD_INT 0
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: LD_INT 1
59766: NEG
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 1
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: LD_INT 1
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 1
59804: NEG
59805: PUSH
59806: LD_INT 0
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: LD_INT 1
59819: NEG
59820: PUSH
59821: EMPTY
59822: LIST
59823: LIST
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: LD_INT 1
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59858: LD_ADDR_VAR 0 41
59862: PUSH
59863: LD_INT 0
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: LD_INT 1
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 1
59886: PUSH
59887: LD_INT 0
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: PUSH
59897: LD_INT 1
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: LD_INT 1
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: PUSH
59914: LD_INT 1
59916: NEG
59917: PUSH
59918: LD_INT 0
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 1
59927: NEG
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 1
59939: NEG
59940: PUSH
59941: LD_INT 2
59943: NEG
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 1
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 2
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 2
59972: PUSH
59973: LD_INT 1
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 2
59982: PUSH
59983: LD_INT 2
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 1
59992: PUSH
59993: LD_INT 2
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: NEG
60003: PUSH
60004: LD_INT 1
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 2
60013: NEG
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 2
60024: NEG
60025: PUSH
60026: LD_INT 1
60028: NEG
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: PUSH
60034: LD_INT 2
60036: NEG
60037: PUSH
60038: LD_INT 2
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 2
60048: NEG
60049: PUSH
60050: LD_INT 3
60052: NEG
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 2
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 3
60071: PUSH
60072: LD_INT 0
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 3
60081: PUSH
60082: LD_INT 1
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 3
60091: PUSH
60092: LD_INT 2
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 3
60101: PUSH
60102: LD_INT 3
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 2
60111: PUSH
60112: LD_INT 3
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 2
60121: NEG
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 3
60132: NEG
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 3
60143: NEG
60144: PUSH
60145: LD_INT 1
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 3
60155: NEG
60156: PUSH
60157: LD_INT 2
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 3
60167: NEG
60168: PUSH
60169: LD_INT 3
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60208: LD_ADDR_VAR 0 42
60212: PUSH
60213: LD_INT 0
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 0
60225: PUSH
60226: LD_INT 1
60228: NEG
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 1
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 1
60246: PUSH
60247: LD_INT 1
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 0
60256: PUSH
60257: LD_INT 1
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: LD_INT 0
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 1
60277: NEG
60278: PUSH
60279: LD_INT 1
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 1
60289: NEG
60290: PUSH
60291: LD_INT 2
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 0
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PUSH
60310: LD_INT 1
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 2
60323: PUSH
60324: LD_INT 1
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: LD_INT 2
60333: PUSH
60334: LD_INT 2
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 1
60343: PUSH
60344: LD_INT 2
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 0
60353: PUSH
60354: LD_INT 2
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: LD_INT 1
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 2
60374: NEG
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 2
60386: NEG
60387: PUSH
60388: LD_INT 2
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 2
60398: NEG
60399: PUSH
60400: LD_INT 3
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 1
60410: NEG
60411: PUSH
60412: LD_INT 3
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 0
60422: PUSH
60423: LD_INT 3
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: LD_INT 2
60436: NEG
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 3
60444: PUSH
60445: LD_INT 2
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 3
60454: PUSH
60455: LD_INT 3
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 2
60464: PUSH
60465: LD_INT 3
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: LD_INT 3
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: LD_INT 3
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 1
60494: NEG
60495: PUSH
60496: LD_INT 2
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 3
60505: NEG
60506: PUSH
60507: LD_INT 2
60509: NEG
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 3
60517: NEG
60518: PUSH
60519: LD_INT 3
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60558: LD_ADDR_VAR 0 43
60562: PUSH
60563: LD_INT 0
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 0
60575: PUSH
60576: LD_INT 1
60578: NEG
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 1
60586: PUSH
60587: LD_INT 0
60589: PUSH
60590: EMPTY
60591: LIST
60592: LIST
60593: PUSH
60594: LD_INT 1
60596: PUSH
60597: LD_INT 1
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 0
60606: PUSH
60607: LD_INT 1
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 1
60616: NEG
60617: PUSH
60618: LD_INT 0
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: LD_INT 1
60631: NEG
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 1
60639: NEG
60640: PUSH
60641: LD_INT 2
60643: NEG
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 0
60651: PUSH
60652: LD_INT 2
60654: NEG
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 1
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 2
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 2
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 1
60693: PUSH
60694: LD_INT 2
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 0
60703: PUSH
60704: LD_INT 2
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 1
60713: NEG
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 2
60724: NEG
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 2
60735: NEG
60736: PUSH
60737: LD_INT 1
60739: NEG
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 1
60747: NEG
60748: PUSH
60749: LD_INT 3
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 0
60759: PUSH
60760: LD_INT 3
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 1
60770: PUSH
60771: LD_INT 2
60773: NEG
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 2
60781: PUSH
60782: LD_INT 1
60784: NEG
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 3
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 3
60802: PUSH
60803: LD_INT 1
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 1
60812: PUSH
60813: LD_INT 3
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 0
60822: PUSH
60823: LD_INT 3
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 1
60832: NEG
60833: PUSH
60834: LD_INT 2
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 2
60843: NEG
60844: PUSH
60845: LD_INT 1
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 3
60854: NEG
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 3
60865: NEG
60866: PUSH
60867: LD_INT 1
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60906: LD_ADDR_VAR 0 44
60910: PUSH
60911: LD_INT 0
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: LD_INT 1
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: PUSH
60935: LD_INT 0
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 1
60944: PUSH
60945: LD_INT 1
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 0
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 1
60975: NEG
60976: PUSH
60977: LD_INT 1
60979: NEG
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 1
60987: NEG
60988: PUSH
60989: LD_INT 2
60991: NEG
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: LD_INT 1
61002: NEG
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 2
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 2
61020: PUSH
61021: LD_INT 1
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 2
61030: PUSH
61031: LD_INT 2
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 1
61040: PUSH
61041: LD_INT 2
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: LD_INT 1
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 2
61061: NEG
61062: PUSH
61063: LD_INT 0
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 2
61072: NEG
61073: PUSH
61074: LD_INT 1
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 2
61084: NEG
61085: PUSH
61086: LD_INT 2
61088: NEG
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 2
61096: NEG
61097: PUSH
61098: LD_INT 3
61100: NEG
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 2
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 3
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 3
61129: PUSH
61130: LD_INT 1
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 3
61139: PUSH
61140: LD_INT 2
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 3
61149: PUSH
61150: LD_INT 3
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 2
61159: PUSH
61160: LD_INT 3
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 2
61169: NEG
61170: PUSH
61171: LD_INT 1
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 3
61180: NEG
61181: PUSH
61182: LD_INT 0
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 3
61191: NEG
61192: PUSH
61193: LD_INT 1
61195: NEG
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 3
61203: NEG
61204: PUSH
61205: LD_INT 2
61207: NEG
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 3
61215: NEG
61216: PUSH
61217: LD_INT 3
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61256: LD_ADDR_VAR 0 45
61260: PUSH
61261: LD_INT 0
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 0
61273: PUSH
61274: LD_INT 1
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: LD_INT 0
61287: PUSH
61288: EMPTY
61289: LIST
61290: LIST
61291: PUSH
61292: LD_INT 1
61294: PUSH
61295: LD_INT 1
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 0
61304: PUSH
61305: LD_INT 1
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 1
61314: NEG
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 1
61325: NEG
61326: PUSH
61327: LD_INT 1
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 1
61337: NEG
61338: PUSH
61339: LD_INT 2
61341: NEG
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: PUSH
61347: LD_INT 0
61349: PUSH
61350: LD_INT 2
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: LD_INT 1
61363: NEG
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 2
61371: PUSH
61372: LD_INT 1
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 2
61381: PUSH
61382: LD_INT 2
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 1
61391: PUSH
61392: LD_INT 2
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: LD_INT 2
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: LD_INT 1
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 2
61422: NEG
61423: PUSH
61424: LD_INT 1
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 2
61434: NEG
61435: PUSH
61436: LD_INT 2
61438: NEG
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 2
61446: NEG
61447: PUSH
61448: LD_INT 3
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: PUSH
61460: LD_INT 3
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: LD_INT 3
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: LD_INT 2
61484: NEG
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 3
61492: PUSH
61493: LD_INT 2
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 3
61502: PUSH
61503: LD_INT 3
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 2
61512: PUSH
61513: LD_INT 3
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: LD_INT 3
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: LD_INT 3
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: LD_INT 2
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 3
61553: NEG
61554: PUSH
61555: LD_INT 2
61557: NEG
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 3
61565: NEG
61566: PUSH
61567: LD_INT 3
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: LIST
61597: LIST
61598: LIST
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: LIST
61604: LIST
61605: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61606: LD_ADDR_VAR 0 46
61610: PUSH
61611: LD_INT 0
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 0
61623: PUSH
61624: LD_INT 1
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 1
61634: PUSH
61635: LD_INT 0
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: LD_INT 1
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 0
61654: PUSH
61655: LD_INT 1
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 1
61664: NEG
61665: PUSH
61666: LD_INT 0
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 1
61675: NEG
61676: PUSH
61677: LD_INT 1
61679: NEG
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 1
61687: NEG
61688: PUSH
61689: LD_INT 2
61691: NEG
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 0
61699: PUSH
61700: LD_INT 2
61702: NEG
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 1
61710: PUSH
61711: LD_INT 1
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 2
61721: PUSH
61722: LD_INT 0
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 2
61731: PUSH
61732: LD_INT 1
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 1
61741: PUSH
61742: LD_INT 2
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 0
61751: PUSH
61752: LD_INT 2
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 1
61761: NEG
61762: PUSH
61763: LD_INT 1
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 2
61772: NEG
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 2
61783: NEG
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 1
61795: NEG
61796: PUSH
61797: LD_INT 3
61799: NEG
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: LD_INT 3
61810: NEG
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 1
61818: PUSH
61819: LD_INT 2
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 2
61829: PUSH
61830: LD_INT 1
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 3
61840: PUSH
61841: LD_INT 0
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 3
61850: PUSH
61851: LD_INT 1
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 1
61860: PUSH
61861: LD_INT 3
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 0
61870: PUSH
61871: LD_INT 3
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 1
61880: NEG
61881: PUSH
61882: LD_INT 2
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 2
61891: NEG
61892: PUSH
61893: LD_INT 1
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 3
61902: NEG
61903: PUSH
61904: LD_INT 0
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 3
61913: NEG
61914: PUSH
61915: LD_INT 1
61917: NEG
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: LIST
61951: LIST
61952: LIST
61953: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61954: LD_ADDR_VAR 0 47
61958: PUSH
61959: LD_INT 0
61961: PUSH
61962: LD_INT 0
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: LD_INT 1
61974: NEG
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 1
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: LD_INT 1
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 0
62002: PUSH
62003: LD_INT 1
62005: PUSH
62006: EMPTY
62007: LIST
62008: LIST
62009: PUSH
62010: LD_INT 1
62012: NEG
62013: PUSH
62014: LD_INT 0
62016: PUSH
62017: EMPTY
62018: LIST
62019: LIST
62020: PUSH
62021: LD_INT 1
62023: NEG
62024: PUSH
62025: LD_INT 1
62027: NEG
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 1
62035: NEG
62036: PUSH
62037: LD_INT 2
62039: NEG
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 0
62047: PUSH
62048: LD_INT 2
62050: NEG
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 1
62058: PUSH
62059: LD_INT 1
62061: NEG
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 2
62069: NEG
62070: PUSH
62071: LD_INT 1
62073: NEG
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 2
62081: NEG
62082: PUSH
62083: LD_INT 2
62085: NEG
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62105: LD_ADDR_VAR 0 48
62109: PUSH
62110: LD_INT 0
62112: PUSH
62113: LD_INT 0
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 0
62122: PUSH
62123: LD_INT 1
62125: NEG
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 1
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 1
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 0
62153: PUSH
62154: LD_INT 1
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 1
62163: NEG
62164: PUSH
62165: LD_INT 0
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 1
62174: NEG
62175: PUSH
62176: LD_INT 1
62178: NEG
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 1
62186: NEG
62187: PUSH
62188: LD_INT 2
62190: NEG
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 0
62198: PUSH
62199: LD_INT 2
62201: NEG
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 1
62209: PUSH
62210: LD_INT 1
62212: NEG
62213: PUSH
62214: EMPTY
62215: LIST
62216: LIST
62217: PUSH
62218: LD_INT 2
62220: PUSH
62221: LD_INT 0
62223: PUSH
62224: EMPTY
62225: LIST
62226: LIST
62227: PUSH
62228: LD_INT 2
62230: PUSH
62231: LD_INT 1
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62252: LD_ADDR_VAR 0 49
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: LD_INT 1
62272: NEG
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 1
62280: PUSH
62281: LD_INT 0
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 1
62290: PUSH
62291: LD_INT 1
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 0
62300: PUSH
62301: LD_INT 1
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 1
62310: NEG
62311: PUSH
62312: LD_INT 0
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 1
62321: NEG
62322: PUSH
62323: LD_INT 1
62325: NEG
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_INT 1
62333: PUSH
62334: LD_INT 1
62336: NEG
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 2
62344: PUSH
62345: LD_INT 0
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 2
62354: PUSH
62355: LD_INT 1
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 2
62364: PUSH
62365: LD_INT 2
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 1
62374: PUSH
62375: LD_INT 2
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62396: LD_ADDR_VAR 0 50
62400: PUSH
62401: LD_INT 0
62403: PUSH
62404: LD_INT 0
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 0
62413: PUSH
62414: LD_INT 1
62416: NEG
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: PUSH
62425: LD_INT 0
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 1
62434: PUSH
62435: LD_INT 1
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 0
62444: PUSH
62445: LD_INT 1
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 1
62454: NEG
62455: PUSH
62456: LD_INT 0
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 1
62465: NEG
62466: PUSH
62467: LD_INT 1
62469: NEG
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 2
62477: PUSH
62478: LD_INT 1
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 2
62487: PUSH
62488: LD_INT 2
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 1
62497: PUSH
62498: LD_INT 2
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: LD_INT 2
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 1
62517: NEG
62518: PUSH
62519: LD_INT 1
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: EMPTY
62527: LIST
62528: LIST
62529: LIST
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: LIST
62536: LIST
62537: LIST
62538: LIST
62539: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62540: LD_ADDR_VAR 0 51
62544: PUSH
62545: LD_INT 0
62547: PUSH
62548: LD_INT 0
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 0
62557: PUSH
62558: LD_INT 1
62560: NEG
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 1
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 1
62578: PUSH
62579: LD_INT 1
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: LD_INT 1
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 1
62598: NEG
62599: PUSH
62600: LD_INT 0
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 1
62609: NEG
62610: PUSH
62611: LD_INT 1
62613: NEG
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 1
62621: PUSH
62622: LD_INT 2
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 0
62631: PUSH
62632: LD_INT 2
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 1
62641: NEG
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 2
62652: NEG
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 2
62663: NEG
62664: PUSH
62665: LD_INT 1
62667: NEG
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62687: LD_ADDR_VAR 0 52
62691: PUSH
62692: LD_INT 0
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 0
62704: PUSH
62705: LD_INT 1
62707: NEG
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 1
62715: PUSH
62716: LD_INT 0
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 1
62725: PUSH
62726: LD_INT 1
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 0
62735: PUSH
62736: LD_INT 1
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 1
62745: NEG
62746: PUSH
62747: LD_INT 0
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PUSH
62754: LD_INT 1
62756: NEG
62757: PUSH
62758: LD_INT 1
62760: NEG
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 1
62768: NEG
62769: PUSH
62770: LD_INT 2
62772: NEG
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 1
62780: NEG
62781: PUSH
62782: LD_INT 1
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 2
62791: NEG
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 2
62802: NEG
62803: PUSH
62804: LD_INT 1
62806: NEG
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 2
62814: NEG
62815: PUSH
62816: LD_INT 2
62818: NEG
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62838: LD_ADDR_VAR 0 53
62842: PUSH
62843: LD_INT 0
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: EMPTY
62850: LIST
62851: LIST
62852: PUSH
62853: LD_INT 0
62855: PUSH
62856: LD_INT 1
62858: NEG
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 1
62866: PUSH
62867: LD_INT 0
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 1
62876: PUSH
62877: LD_INT 1
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 0
62886: PUSH
62887: LD_INT 1
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 1
62896: NEG
62897: PUSH
62898: LD_INT 0
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 1
62907: NEG
62908: PUSH
62909: LD_INT 1
62911: NEG
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 1
62919: NEG
62920: PUSH
62921: LD_INT 2
62923: NEG
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 0
62931: PUSH
62932: LD_INT 2
62934: NEG
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 1
62942: PUSH
62943: LD_INT 1
62945: NEG
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 2
62953: PUSH
62954: LD_INT 0
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 2
62963: PUSH
62964: LD_INT 1
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 2
62973: PUSH
62974: LD_INT 2
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 1
62983: PUSH
62984: LD_INT 2
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 0
62993: PUSH
62994: LD_INT 2
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 1
63003: NEG
63004: PUSH
63005: LD_INT 1
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 2
63014: NEG
63015: PUSH
63016: LD_INT 0
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 2
63025: NEG
63026: PUSH
63027: LD_INT 1
63029: NEG
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: LD_INT 2
63037: NEG
63038: PUSH
63039: LD_INT 2
63041: NEG
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63068: LD_ADDR_VAR 0 54
63072: PUSH
63073: LD_INT 0
63075: PUSH
63076: LD_INT 0
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 0
63085: PUSH
63086: LD_INT 1
63088: NEG
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 1
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 1
63106: PUSH
63107: LD_INT 1
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: LD_INT 1
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: LD_INT 0
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 1
63137: NEG
63138: PUSH
63139: LD_INT 1
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 1
63149: NEG
63150: PUSH
63151: LD_INT 2
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 0
63161: PUSH
63162: LD_INT 2
63164: NEG
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 1
63172: PUSH
63173: LD_INT 1
63175: NEG
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: LD_INT 0
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 2
63193: PUSH
63194: LD_INT 1
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 2
63203: PUSH
63204: LD_INT 2
63206: PUSH
63207: EMPTY
63208: LIST
63209: LIST
63210: PUSH
63211: LD_INT 1
63213: PUSH
63214: LD_INT 2
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: PUSH
63221: LD_INT 0
63223: PUSH
63224: LD_INT 2
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 1
63233: NEG
63234: PUSH
63235: LD_INT 1
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 2
63244: NEG
63245: PUSH
63246: LD_INT 0
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 2
63255: NEG
63256: PUSH
63257: LD_INT 1
63259: NEG
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 2
63267: NEG
63268: PUSH
63269: LD_INT 2
63271: NEG
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63298: LD_ADDR_VAR 0 55
63302: PUSH
63303: LD_INT 0
63305: PUSH
63306: LD_INT 0
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: PUSH
63313: LD_INT 0
63315: PUSH
63316: LD_INT 1
63318: NEG
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 1
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: LD_INT 1
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: PUSH
63344: LD_INT 0
63346: PUSH
63347: LD_INT 1
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: LD_INT 1
63356: NEG
63357: PUSH
63358: LD_INT 0
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 1
63367: NEG
63368: PUSH
63369: LD_INT 1
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 1
63379: NEG
63380: PUSH
63381: LD_INT 2
63383: NEG
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 0
63391: PUSH
63392: LD_INT 2
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 1
63402: PUSH
63403: LD_INT 1
63405: NEG
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 2
63413: PUSH
63414: LD_INT 0
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 2
63423: PUSH
63424: LD_INT 1
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 2
63433: PUSH
63434: LD_INT 2
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: PUSH
63441: LD_INT 1
63443: PUSH
63444: LD_INT 2
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: LD_INT 2
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 1
63463: NEG
63464: PUSH
63465: LD_INT 1
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 2
63474: NEG
63475: PUSH
63476: LD_INT 0
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 2
63485: NEG
63486: PUSH
63487: LD_INT 1
63489: NEG
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 2
63497: NEG
63498: PUSH
63499: LD_INT 2
63501: NEG
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63528: LD_ADDR_VAR 0 56
63532: PUSH
63533: LD_INT 0
63535: PUSH
63536: LD_INT 0
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: LD_INT 1
63548: NEG
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 1
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 1
63566: PUSH
63567: LD_INT 1
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 0
63576: PUSH
63577: LD_INT 1
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 1
63586: NEG
63587: PUSH
63588: LD_INT 0
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 1
63597: NEG
63598: PUSH
63599: LD_INT 1
63601: NEG
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 1
63609: NEG
63610: PUSH
63611: LD_INT 2
63613: NEG
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 0
63621: PUSH
63622: LD_INT 2
63624: NEG
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 1
63632: PUSH
63633: LD_INT 1
63635: NEG
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 2
63643: PUSH
63644: LD_INT 0
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 2
63653: PUSH
63654: LD_INT 1
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 2
63663: PUSH
63664: LD_INT 2
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: LD_INT 2
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 0
63683: PUSH
63684: LD_INT 2
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 1
63693: NEG
63694: PUSH
63695: LD_INT 1
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 2
63704: NEG
63705: PUSH
63706: LD_INT 0
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 2
63715: NEG
63716: PUSH
63717: LD_INT 1
63719: NEG
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 2
63727: NEG
63728: PUSH
63729: LD_INT 2
63731: NEG
63732: PUSH
63733: EMPTY
63734: LIST
63735: LIST
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63758: LD_ADDR_VAR 0 57
63762: PUSH
63763: LD_INT 0
63765: PUSH
63766: LD_INT 0
63768: PUSH
63769: EMPTY
63770: LIST
63771: LIST
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: LD_INT 1
63778: NEG
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 1
63786: PUSH
63787: LD_INT 0
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PUSH
63794: LD_INT 1
63796: PUSH
63797: LD_INT 1
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 0
63806: PUSH
63807: LD_INT 1
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: LD_INT 1
63816: NEG
63817: PUSH
63818: LD_INT 0
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 1
63827: NEG
63828: PUSH
63829: LD_INT 1
63831: NEG
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 1
63839: NEG
63840: PUSH
63841: LD_INT 2
63843: NEG
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 0
63851: PUSH
63852: LD_INT 2
63854: NEG
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 1
63862: PUSH
63863: LD_INT 1
63865: NEG
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 2
63873: PUSH
63874: LD_INT 0
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 2
63883: PUSH
63884: LD_INT 1
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 2
63893: PUSH
63894: LD_INT 2
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 1
63903: PUSH
63904: LD_INT 2
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 0
63913: PUSH
63914: LD_INT 2
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 1
63923: NEG
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 2
63934: NEG
63935: PUSH
63936: LD_INT 0
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 2
63945: NEG
63946: PUSH
63947: LD_INT 1
63949: NEG
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 2
63957: NEG
63958: PUSH
63959: LD_INT 2
63961: NEG
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63988: LD_ADDR_VAR 0 58
63992: PUSH
63993: LD_INT 0
63995: PUSH
63996: LD_INT 0
63998: PUSH
63999: EMPTY
64000: LIST
64001: LIST
64002: PUSH
64003: LD_INT 0
64005: PUSH
64006: LD_INT 1
64008: NEG
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 1
64016: PUSH
64017: LD_INT 0
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 1
64026: PUSH
64027: LD_INT 1
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: LD_INT 1
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 1
64046: NEG
64047: PUSH
64048: LD_INT 0
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 1
64057: NEG
64058: PUSH
64059: LD_INT 1
64061: NEG
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 1
64069: NEG
64070: PUSH
64071: LD_INT 2
64073: NEG
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 0
64081: PUSH
64082: LD_INT 2
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: LD_INT 1
64092: PUSH
64093: LD_INT 1
64095: NEG
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 2
64103: PUSH
64104: LD_INT 0
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 2
64113: PUSH
64114: LD_INT 1
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 2
64123: PUSH
64124: LD_INT 2
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 1
64133: PUSH
64134: LD_INT 2
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 0
64143: PUSH
64144: LD_INT 2
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 1
64153: NEG
64154: PUSH
64155: LD_INT 1
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 2
64164: NEG
64165: PUSH
64166: LD_INT 0
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 2
64175: NEG
64176: PUSH
64177: LD_INT 1
64179: NEG
64180: PUSH
64181: EMPTY
64182: LIST
64183: LIST
64184: PUSH
64185: LD_INT 2
64187: NEG
64188: PUSH
64189: LD_INT 2
64191: NEG
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64218: LD_ADDR_VAR 0 59
64222: PUSH
64223: LD_INT 0
64225: PUSH
64226: LD_INT 0
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 0
64235: PUSH
64236: LD_INT 1
64238: NEG
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 1
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 1
64256: PUSH
64257: LD_INT 1
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 0
64266: PUSH
64267: LD_INT 1
64269: PUSH
64270: EMPTY
64271: LIST
64272: LIST
64273: PUSH
64274: LD_INT 1
64276: NEG
64277: PUSH
64278: LD_INT 0
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 1
64287: NEG
64288: PUSH
64289: LD_INT 1
64291: NEG
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64306: LD_ADDR_VAR 0 60
64310: PUSH
64311: LD_INT 0
64313: PUSH
64314: LD_INT 0
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 0
64323: PUSH
64324: LD_INT 1
64326: NEG
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 1
64334: PUSH
64335: LD_INT 0
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 1
64344: PUSH
64345: LD_INT 1
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 0
64354: PUSH
64355: LD_INT 1
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 1
64364: NEG
64365: PUSH
64366: LD_INT 0
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 1
64375: NEG
64376: PUSH
64377: LD_INT 1
64379: NEG
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64394: LD_ADDR_VAR 0 61
64398: PUSH
64399: LD_INT 0
64401: PUSH
64402: LD_INT 0
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 0
64411: PUSH
64412: LD_INT 1
64414: NEG
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 1
64422: PUSH
64423: LD_INT 0
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: LD_INT 1
64432: PUSH
64433: LD_INT 1
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 0
64442: PUSH
64443: LD_INT 1
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 1
64452: NEG
64453: PUSH
64454: LD_INT 0
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 1
64463: NEG
64464: PUSH
64465: LD_INT 1
64467: NEG
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: EMPTY
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64482: LD_ADDR_VAR 0 62
64486: PUSH
64487: LD_INT 0
64489: PUSH
64490: LD_INT 0
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 0
64499: PUSH
64500: LD_INT 1
64502: NEG
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 1
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 1
64520: PUSH
64521: LD_INT 1
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 0
64530: PUSH
64531: LD_INT 1
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 1
64540: NEG
64541: PUSH
64542: LD_INT 0
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 1
64551: NEG
64552: PUSH
64553: LD_INT 1
64555: NEG
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64570: LD_ADDR_VAR 0 63
64574: PUSH
64575: LD_INT 0
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 0
64587: PUSH
64588: LD_INT 1
64590: NEG
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 1
64598: PUSH
64599: LD_INT 0
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 1
64608: PUSH
64609: LD_INT 1
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 0
64618: PUSH
64619: LD_INT 1
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 1
64628: NEG
64629: PUSH
64630: LD_INT 0
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 1
64639: NEG
64640: PUSH
64641: LD_INT 1
64643: NEG
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64658: LD_ADDR_VAR 0 64
64662: PUSH
64663: LD_INT 0
64665: PUSH
64666: LD_INT 0
64668: PUSH
64669: EMPTY
64670: LIST
64671: LIST
64672: PUSH
64673: LD_INT 0
64675: PUSH
64676: LD_INT 1
64678: NEG
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PUSH
64684: LD_INT 1
64686: PUSH
64687: LD_INT 0
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 1
64696: PUSH
64697: LD_INT 1
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 0
64706: PUSH
64707: LD_INT 1
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 1
64716: NEG
64717: PUSH
64718: LD_INT 0
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 1
64727: NEG
64728: PUSH
64729: LD_INT 1
64731: NEG
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: EMPTY
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: ST_TO_ADDR
// end ; 1 :
64746: GO 70643
64748: LD_INT 1
64750: DOUBLE
64751: EQUAL
64752: IFTRUE 64756
64754: GO 67379
64756: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64757: LD_ADDR_VAR 0 11
64761: PUSH
64762: LD_INT 1
64764: NEG
64765: PUSH
64766: LD_INT 3
64768: NEG
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 0
64776: PUSH
64777: LD_INT 3
64779: NEG
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 1
64787: PUSH
64788: LD_INT 2
64790: NEG
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: LIST
64800: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64801: LD_ADDR_VAR 0 12
64805: PUSH
64806: LD_INT 2
64808: PUSH
64809: LD_INT 1
64811: NEG
64812: PUSH
64813: EMPTY
64814: LIST
64815: LIST
64816: PUSH
64817: LD_INT 3
64819: PUSH
64820: LD_INT 0
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 3
64829: PUSH
64830: LD_INT 1
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: LIST
64841: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64842: LD_ADDR_VAR 0 13
64846: PUSH
64847: LD_INT 3
64849: PUSH
64850: LD_INT 2
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 3
64859: PUSH
64860: LD_INT 3
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 2
64869: PUSH
64870: LD_INT 3
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: LIST
64881: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64882: LD_ADDR_VAR 0 14
64886: PUSH
64887: LD_INT 1
64889: PUSH
64890: LD_INT 3
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 0
64899: PUSH
64900: LD_INT 3
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 1
64909: NEG
64910: PUSH
64911: LD_INT 2
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: LIST
64922: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64923: LD_ADDR_VAR 0 15
64927: PUSH
64928: LD_INT 2
64930: NEG
64931: PUSH
64932: LD_INT 1
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: PUSH
64939: LD_INT 3
64941: NEG
64942: PUSH
64943: LD_INT 0
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 3
64952: NEG
64953: PUSH
64954: LD_INT 1
64956: NEG
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: LIST
64966: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64967: LD_ADDR_VAR 0 16
64971: PUSH
64972: LD_INT 2
64974: NEG
64975: PUSH
64976: LD_INT 3
64978: NEG
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 3
64986: NEG
64987: PUSH
64988: LD_INT 2
64990: NEG
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 3
64998: NEG
64999: PUSH
65000: LD_INT 3
65002: NEG
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: LIST
65012: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65013: LD_ADDR_VAR 0 17
65017: PUSH
65018: LD_INT 1
65020: NEG
65021: PUSH
65022: LD_INT 3
65024: NEG
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 0
65032: PUSH
65033: LD_INT 3
65035: NEG
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 1
65043: PUSH
65044: LD_INT 2
65046: NEG
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: LIST
65056: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65057: LD_ADDR_VAR 0 18
65061: PUSH
65062: LD_INT 2
65064: PUSH
65065: LD_INT 1
65067: NEG
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 3
65075: PUSH
65076: LD_INT 0
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 3
65085: PUSH
65086: LD_INT 1
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: LIST
65097: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65098: LD_ADDR_VAR 0 19
65102: PUSH
65103: LD_INT 3
65105: PUSH
65106: LD_INT 2
65108: PUSH
65109: EMPTY
65110: LIST
65111: LIST
65112: PUSH
65113: LD_INT 3
65115: PUSH
65116: LD_INT 3
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: LD_INT 2
65125: PUSH
65126: LD_INT 3
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: LIST
65137: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65138: LD_ADDR_VAR 0 20
65142: PUSH
65143: LD_INT 1
65145: PUSH
65146: LD_INT 3
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 0
65155: PUSH
65156: LD_INT 3
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 1
65165: NEG
65166: PUSH
65167: LD_INT 2
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: LIST
65178: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65179: LD_ADDR_VAR 0 21
65183: PUSH
65184: LD_INT 2
65186: NEG
65187: PUSH
65188: LD_INT 1
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 3
65197: NEG
65198: PUSH
65199: LD_INT 0
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 3
65208: NEG
65209: PUSH
65210: LD_INT 1
65212: NEG
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: LIST
65222: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65223: LD_ADDR_VAR 0 22
65227: PUSH
65228: LD_INT 2
65230: NEG
65231: PUSH
65232: LD_INT 3
65234: NEG
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 3
65242: NEG
65243: PUSH
65244: LD_INT 2
65246: NEG
65247: PUSH
65248: EMPTY
65249: LIST
65250: LIST
65251: PUSH
65252: LD_INT 3
65254: NEG
65255: PUSH
65256: LD_INT 3
65258: NEG
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: LIST
65268: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65269: LD_ADDR_VAR 0 23
65273: PUSH
65274: LD_INT 0
65276: PUSH
65277: LD_INT 3
65279: NEG
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 1
65287: NEG
65288: PUSH
65289: LD_INT 4
65291: NEG
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: LD_INT 1
65299: PUSH
65300: LD_INT 3
65302: NEG
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: LIST
65312: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65313: LD_ADDR_VAR 0 24
65317: PUSH
65318: LD_INT 3
65320: PUSH
65321: LD_INT 0
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 3
65330: PUSH
65331: LD_INT 1
65333: NEG
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 4
65341: PUSH
65342: LD_INT 1
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: LIST
65353: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65354: LD_ADDR_VAR 0 25
65358: PUSH
65359: LD_INT 3
65361: PUSH
65362: LD_INT 3
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 4
65371: PUSH
65372: LD_INT 3
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 3
65381: PUSH
65382: LD_INT 4
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: LIST
65393: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65394: LD_ADDR_VAR 0 26
65398: PUSH
65399: LD_INT 0
65401: PUSH
65402: LD_INT 3
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 1
65411: PUSH
65412: LD_INT 4
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 1
65421: NEG
65422: PUSH
65423: LD_INT 3
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: EMPTY
65431: LIST
65432: LIST
65433: LIST
65434: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65435: LD_ADDR_VAR 0 27
65439: PUSH
65440: LD_INT 3
65442: NEG
65443: PUSH
65444: LD_INT 0
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 3
65453: NEG
65454: PUSH
65455: LD_INT 1
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 4
65464: NEG
65465: PUSH
65466: LD_INT 1
65468: NEG
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: LIST
65478: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65479: LD_ADDR_VAR 0 28
65483: PUSH
65484: LD_INT 3
65486: NEG
65487: PUSH
65488: LD_INT 3
65490: NEG
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: LD_INT 3
65498: NEG
65499: PUSH
65500: LD_INT 4
65502: NEG
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 4
65510: NEG
65511: PUSH
65512: LD_INT 3
65514: NEG
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: LIST
65524: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65525: LD_ADDR_VAR 0 29
65529: PUSH
65530: LD_INT 1
65532: NEG
65533: PUSH
65534: LD_INT 3
65536: NEG
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 0
65544: PUSH
65545: LD_INT 3
65547: NEG
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 1
65555: PUSH
65556: LD_INT 2
65558: NEG
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 1
65566: NEG
65567: PUSH
65568: LD_INT 4
65570: NEG
65571: PUSH
65572: EMPTY
65573: LIST
65574: LIST
65575: PUSH
65576: LD_INT 0
65578: PUSH
65579: LD_INT 4
65581: NEG
65582: PUSH
65583: EMPTY
65584: LIST
65585: LIST
65586: PUSH
65587: LD_INT 1
65589: PUSH
65590: LD_INT 3
65592: NEG
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: LD_INT 1
65600: NEG
65601: PUSH
65602: LD_INT 5
65604: NEG
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 0
65612: PUSH
65613: LD_INT 5
65615: NEG
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: PUSH
65621: LD_INT 1
65623: PUSH
65624: LD_INT 4
65626: NEG
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 1
65634: NEG
65635: PUSH
65636: LD_INT 6
65638: NEG
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 0
65646: PUSH
65647: LD_INT 6
65649: NEG
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 1
65657: PUSH
65658: LD_INT 5
65660: NEG
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65680: LD_ADDR_VAR 0 30
65684: PUSH
65685: LD_INT 2
65687: PUSH
65688: LD_INT 1
65690: NEG
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: PUSH
65696: LD_INT 3
65698: PUSH
65699: LD_INT 0
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 3
65708: PUSH
65709: LD_INT 1
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 3
65718: PUSH
65719: LD_INT 1
65721: NEG
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 4
65729: PUSH
65730: LD_INT 0
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 4
65739: PUSH
65740: LD_INT 1
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 4
65749: PUSH
65750: LD_INT 1
65752: NEG
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 5
65760: PUSH
65761: LD_INT 0
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 5
65770: PUSH
65771: LD_INT 1
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 5
65780: PUSH
65781: LD_INT 1
65783: NEG
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 6
65791: PUSH
65792: LD_INT 0
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 6
65801: PUSH
65802: LD_INT 1
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65823: LD_ADDR_VAR 0 31
65827: PUSH
65828: LD_INT 3
65830: PUSH
65831: LD_INT 2
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 3
65840: PUSH
65841: LD_INT 3
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 2
65850: PUSH
65851: LD_INT 3
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 4
65860: PUSH
65861: LD_INT 3
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 4
65870: PUSH
65871: LD_INT 4
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 3
65880: PUSH
65881: LD_INT 4
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: LD_INT 5
65890: PUSH
65891: LD_INT 4
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 5
65900: PUSH
65901: LD_INT 5
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: LD_INT 4
65910: PUSH
65911: LD_INT 5
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 6
65920: PUSH
65921: LD_INT 5
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 6
65930: PUSH
65931: LD_INT 6
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 5
65940: PUSH
65941: LD_INT 6
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: LIST
65952: LIST
65953: LIST
65954: LIST
65955: LIST
65956: LIST
65957: LIST
65958: LIST
65959: LIST
65960: LIST
65961: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65962: LD_ADDR_VAR 0 32
65966: PUSH
65967: LD_INT 1
65969: PUSH
65970: LD_INT 3
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 0
65979: PUSH
65980: LD_INT 3
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 1
65989: NEG
65990: PUSH
65991: LD_INT 2
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: PUSH
65998: LD_INT 1
66000: PUSH
66001: LD_INT 4
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 0
66010: PUSH
66011: LD_INT 4
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 1
66020: NEG
66021: PUSH
66022: LD_INT 3
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 1
66031: PUSH
66032: LD_INT 5
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 0
66041: PUSH
66042: LD_INT 5
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 1
66051: NEG
66052: PUSH
66053: LD_INT 4
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 1
66062: PUSH
66063: LD_INT 6
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 0
66072: PUSH
66073: LD_INT 6
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 1
66082: NEG
66083: PUSH
66084: LD_INT 5
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66105: LD_ADDR_VAR 0 33
66109: PUSH
66110: LD_INT 2
66112: NEG
66113: PUSH
66114: LD_INT 1
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 3
66123: NEG
66124: PUSH
66125: LD_INT 0
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 3
66134: NEG
66135: PUSH
66136: LD_INT 1
66138: NEG
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 3
66146: NEG
66147: PUSH
66148: LD_INT 1
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 4
66157: NEG
66158: PUSH
66159: LD_INT 0
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 4
66168: NEG
66169: PUSH
66170: LD_INT 1
66172: NEG
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 4
66180: NEG
66181: PUSH
66182: LD_INT 1
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 5
66191: NEG
66192: PUSH
66193: LD_INT 0
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 5
66202: NEG
66203: PUSH
66204: LD_INT 1
66206: NEG
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 5
66214: NEG
66215: PUSH
66216: LD_INT 1
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 6
66225: NEG
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 6
66236: NEG
66237: PUSH
66238: LD_INT 1
66240: NEG
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: LIST
66253: LIST
66254: LIST
66255: LIST
66256: LIST
66257: LIST
66258: LIST
66259: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66260: LD_ADDR_VAR 0 34
66264: PUSH
66265: LD_INT 2
66267: NEG
66268: PUSH
66269: LD_INT 3
66271: NEG
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 3
66279: NEG
66280: PUSH
66281: LD_INT 2
66283: NEG
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 3
66291: NEG
66292: PUSH
66293: LD_INT 3
66295: NEG
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 3
66303: NEG
66304: PUSH
66305: LD_INT 4
66307: NEG
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 4
66315: NEG
66316: PUSH
66317: LD_INT 3
66319: NEG
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: PUSH
66325: LD_INT 4
66327: NEG
66328: PUSH
66329: LD_INT 4
66331: NEG
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 4
66339: NEG
66340: PUSH
66341: LD_INT 5
66343: NEG
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 5
66351: NEG
66352: PUSH
66353: LD_INT 4
66355: NEG
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: LD_INT 5
66363: NEG
66364: PUSH
66365: LD_INT 5
66367: NEG
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 5
66375: NEG
66376: PUSH
66377: LD_INT 6
66379: NEG
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 6
66387: NEG
66388: PUSH
66389: LD_INT 5
66391: NEG
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 6
66399: NEG
66400: PUSH
66401: LD_INT 6
66403: NEG
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66423: LD_ADDR_VAR 0 41
66427: PUSH
66428: LD_INT 0
66430: PUSH
66431: LD_INT 2
66433: NEG
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 1
66441: NEG
66442: PUSH
66443: LD_INT 3
66445: NEG
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 1
66453: PUSH
66454: LD_INT 2
66456: NEG
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: LIST
66466: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66467: LD_ADDR_VAR 0 42
66471: PUSH
66472: LD_INT 2
66474: PUSH
66475: LD_INT 0
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 2
66484: PUSH
66485: LD_INT 1
66487: NEG
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 3
66495: PUSH
66496: LD_INT 1
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: LIST
66507: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66508: LD_ADDR_VAR 0 43
66512: PUSH
66513: LD_INT 2
66515: PUSH
66516: LD_INT 2
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 3
66525: PUSH
66526: LD_INT 2
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 2
66535: PUSH
66536: LD_INT 3
66538: PUSH
66539: EMPTY
66540: LIST
66541: LIST
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: LIST
66547: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66548: LD_ADDR_VAR 0 44
66552: PUSH
66553: LD_INT 0
66555: PUSH
66556: LD_INT 2
66558: PUSH
66559: EMPTY
66560: LIST
66561: LIST
66562: PUSH
66563: LD_INT 1
66565: PUSH
66566: LD_INT 3
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 1
66575: NEG
66576: PUSH
66577: LD_INT 2
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: LIST
66588: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66589: LD_ADDR_VAR 0 45
66593: PUSH
66594: LD_INT 2
66596: NEG
66597: PUSH
66598: LD_INT 0
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 2
66607: NEG
66608: PUSH
66609: LD_INT 1
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 3
66618: NEG
66619: PUSH
66620: LD_INT 1
66622: NEG
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: LIST
66632: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66633: LD_ADDR_VAR 0 46
66637: PUSH
66638: LD_INT 2
66640: NEG
66641: PUSH
66642: LD_INT 2
66644: NEG
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 2
66652: NEG
66653: PUSH
66654: LD_INT 3
66656: NEG
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 3
66664: NEG
66665: PUSH
66666: LD_INT 2
66668: NEG
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: LIST
66678: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66679: LD_ADDR_VAR 0 47
66683: PUSH
66684: LD_INT 2
66686: NEG
66687: PUSH
66688: LD_INT 3
66690: NEG
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 1
66698: NEG
66699: PUSH
66700: LD_INT 3
66702: NEG
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: EMPTY
66709: LIST
66710: LIST
66711: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66712: LD_ADDR_VAR 0 48
66716: PUSH
66717: LD_INT 1
66719: PUSH
66720: LD_INT 2
66722: NEG
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 2
66730: PUSH
66731: LD_INT 1
66733: NEG
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66743: LD_ADDR_VAR 0 49
66747: PUSH
66748: LD_INT 3
66750: PUSH
66751: LD_INT 1
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 3
66760: PUSH
66761: LD_INT 2
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66772: LD_ADDR_VAR 0 50
66776: PUSH
66777: LD_INT 2
66779: PUSH
66780: LD_INT 3
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 1
66789: PUSH
66790: LD_INT 3
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66801: LD_ADDR_VAR 0 51
66805: PUSH
66806: LD_INT 1
66808: NEG
66809: PUSH
66810: LD_INT 2
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 2
66819: NEG
66820: PUSH
66821: LD_INT 1
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66832: LD_ADDR_VAR 0 52
66836: PUSH
66837: LD_INT 3
66839: NEG
66840: PUSH
66841: LD_INT 1
66843: NEG
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 3
66851: NEG
66852: PUSH
66853: LD_INT 2
66855: NEG
66856: PUSH
66857: EMPTY
66858: LIST
66859: LIST
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66865: LD_ADDR_VAR 0 53
66869: PUSH
66870: LD_INT 1
66872: NEG
66873: PUSH
66874: LD_INT 3
66876: NEG
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 0
66884: PUSH
66885: LD_INT 3
66887: NEG
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 1
66895: PUSH
66896: LD_INT 2
66898: NEG
66899: PUSH
66900: EMPTY
66901: LIST
66902: LIST
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: LIST
66908: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66909: LD_ADDR_VAR 0 54
66913: PUSH
66914: LD_INT 2
66916: PUSH
66917: LD_INT 1
66919: NEG
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 3
66927: PUSH
66928: LD_INT 0
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 3
66937: PUSH
66938: LD_INT 1
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: LIST
66949: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66950: LD_ADDR_VAR 0 55
66954: PUSH
66955: LD_INT 3
66957: PUSH
66958: LD_INT 2
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 3
66967: PUSH
66968: LD_INT 3
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 2
66977: PUSH
66978: LD_INT 3
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: LIST
66989: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66990: LD_ADDR_VAR 0 56
66994: PUSH
66995: LD_INT 1
66997: PUSH
66998: LD_INT 3
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 0
67007: PUSH
67008: LD_INT 3
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 1
67017: NEG
67018: PUSH
67019: LD_INT 2
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: LIST
67030: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67031: LD_ADDR_VAR 0 57
67035: PUSH
67036: LD_INT 2
67038: NEG
67039: PUSH
67040: LD_INT 1
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: PUSH
67047: LD_INT 3
67049: NEG
67050: PUSH
67051: LD_INT 0
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PUSH
67058: LD_INT 3
67060: NEG
67061: PUSH
67062: LD_INT 1
67064: NEG
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: LIST
67074: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67075: LD_ADDR_VAR 0 58
67079: PUSH
67080: LD_INT 2
67082: NEG
67083: PUSH
67084: LD_INT 3
67086: NEG
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: LD_INT 3
67094: NEG
67095: PUSH
67096: LD_INT 2
67098: NEG
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 3
67106: NEG
67107: PUSH
67108: LD_INT 3
67110: NEG
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: LIST
67120: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67121: LD_ADDR_VAR 0 59
67125: PUSH
67126: LD_INT 1
67128: NEG
67129: PUSH
67130: LD_INT 2
67132: NEG
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 0
67140: PUSH
67141: LD_INT 2
67143: NEG
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: PUSH
67149: LD_INT 1
67151: PUSH
67152: LD_INT 1
67154: NEG
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: LIST
67164: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67165: LD_ADDR_VAR 0 60
67169: PUSH
67170: LD_INT 1
67172: PUSH
67173: LD_INT 1
67175: NEG
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 2
67183: PUSH
67184: LD_INT 0
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 2
67193: PUSH
67194: LD_INT 1
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: LIST
67205: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67206: LD_ADDR_VAR 0 61
67210: PUSH
67211: LD_INT 2
67213: PUSH
67214: LD_INT 1
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 2
67223: PUSH
67224: LD_INT 2
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 1
67233: PUSH
67234: LD_INT 2
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: LIST
67245: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67246: LD_ADDR_VAR 0 62
67250: PUSH
67251: LD_INT 1
67253: PUSH
67254: LD_INT 2
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 0
67263: PUSH
67264: LD_INT 2
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: LD_INT 1
67273: NEG
67274: PUSH
67275: LD_INT 1
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: LIST
67286: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67287: LD_ADDR_VAR 0 63
67291: PUSH
67292: LD_INT 1
67294: NEG
67295: PUSH
67296: LD_INT 1
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 2
67305: NEG
67306: PUSH
67307: LD_INT 0
67309: PUSH
67310: EMPTY
67311: LIST
67312: LIST
67313: PUSH
67314: LD_INT 2
67316: NEG
67317: PUSH
67318: LD_INT 1
67320: NEG
67321: PUSH
67322: EMPTY
67323: LIST
67324: LIST
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: LIST
67330: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67331: LD_ADDR_VAR 0 64
67335: PUSH
67336: LD_INT 1
67338: NEG
67339: PUSH
67340: LD_INT 2
67342: NEG
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: PUSH
67348: LD_INT 2
67350: NEG
67351: PUSH
67352: LD_INT 1
67354: NEG
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: PUSH
67360: LD_INT 2
67362: NEG
67363: PUSH
67364: LD_INT 2
67366: NEG
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: LIST
67376: ST_TO_ADDR
// end ; 2 :
67377: GO 70643
67379: LD_INT 2
67381: DOUBLE
67382: EQUAL
67383: IFTRUE 67387
67385: GO 70642
67387: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67388: LD_ADDR_VAR 0 29
67392: PUSH
67393: LD_INT 4
67395: PUSH
67396: LD_INT 0
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 4
67405: PUSH
67406: LD_INT 1
67408: NEG
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 5
67416: PUSH
67417: LD_INT 0
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 5
67426: PUSH
67427: LD_INT 1
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 4
67436: PUSH
67437: LD_INT 1
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 3
67446: PUSH
67447: LD_INT 0
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 3
67456: PUSH
67457: LD_INT 1
67459: NEG
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 3
67467: PUSH
67468: LD_INT 2
67470: NEG
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 5
67478: PUSH
67479: LD_INT 2
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 3
67488: PUSH
67489: LD_INT 3
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: LD_INT 3
67498: PUSH
67499: LD_INT 2
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 4
67508: PUSH
67509: LD_INT 3
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 4
67518: PUSH
67519: LD_INT 4
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PUSH
67526: LD_INT 3
67528: PUSH
67529: LD_INT 4
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 2
67538: PUSH
67539: LD_INT 3
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 2
67548: PUSH
67549: LD_INT 2
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 4
67558: PUSH
67559: LD_INT 2
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 2
67568: PUSH
67569: LD_INT 4
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 0
67578: PUSH
67579: LD_INT 4
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 0
67588: PUSH
67589: LD_INT 3
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 1
67598: PUSH
67599: LD_INT 4
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 1
67608: PUSH
67609: LD_INT 5
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 0
67618: PUSH
67619: LD_INT 5
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 1
67628: NEG
67629: PUSH
67630: LD_INT 4
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 1
67639: NEG
67640: PUSH
67641: LD_INT 3
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 2
67650: PUSH
67651: LD_INT 5
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 2
67660: NEG
67661: PUSH
67662: LD_INT 3
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 3
67671: NEG
67672: PUSH
67673: LD_INT 0
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 3
67682: NEG
67683: PUSH
67684: LD_INT 1
67686: NEG
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 2
67694: NEG
67695: PUSH
67696: LD_INT 0
67698: PUSH
67699: EMPTY
67700: LIST
67701: LIST
67702: PUSH
67703: LD_INT 2
67705: NEG
67706: PUSH
67707: LD_INT 1
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 3
67716: NEG
67717: PUSH
67718: LD_INT 1
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 4
67727: NEG
67728: PUSH
67729: LD_INT 0
67731: PUSH
67732: EMPTY
67733: LIST
67734: LIST
67735: PUSH
67736: LD_INT 4
67738: NEG
67739: PUSH
67740: LD_INT 1
67742: NEG
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 4
67750: NEG
67751: PUSH
67752: LD_INT 2
67754: NEG
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: PUSH
67760: LD_INT 2
67762: NEG
67763: PUSH
67764: LD_INT 2
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 4
67773: NEG
67774: PUSH
67775: LD_INT 4
67777: NEG
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 4
67785: NEG
67786: PUSH
67787: LD_INT 5
67789: NEG
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 3
67797: NEG
67798: PUSH
67799: LD_INT 4
67801: NEG
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: PUSH
67807: LD_INT 3
67809: NEG
67810: PUSH
67811: LD_INT 3
67813: NEG
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 4
67821: NEG
67822: PUSH
67823: LD_INT 3
67825: NEG
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 5
67833: NEG
67834: PUSH
67835: LD_INT 4
67837: NEG
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 5
67845: NEG
67846: PUSH
67847: LD_INT 5
67849: NEG
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 3
67857: NEG
67858: PUSH
67859: LD_INT 5
67861: NEG
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 5
67869: NEG
67870: PUSH
67871: LD_INT 3
67873: NEG
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67926: LD_ADDR_VAR 0 30
67930: PUSH
67931: LD_INT 4
67933: PUSH
67934: LD_INT 4
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 4
67943: PUSH
67944: LD_INT 3
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 5
67953: PUSH
67954: LD_INT 4
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 5
67963: PUSH
67964: LD_INT 5
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 4
67973: PUSH
67974: LD_INT 5
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 3
67983: PUSH
67984: LD_INT 4
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 3
67993: PUSH
67994: LD_INT 3
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: LD_INT 5
68003: PUSH
68004: LD_INT 3
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 3
68013: PUSH
68014: LD_INT 5
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: LD_INT 0
68023: PUSH
68024: LD_INT 3
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 0
68033: PUSH
68034: LD_INT 2
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 1
68043: PUSH
68044: LD_INT 3
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 1
68053: PUSH
68054: LD_INT 4
68056: PUSH
68057: EMPTY
68058: LIST
68059: LIST
68060: PUSH
68061: LD_INT 0
68063: PUSH
68064: LD_INT 4
68066: PUSH
68067: EMPTY
68068: LIST
68069: LIST
68070: PUSH
68071: LD_INT 1
68073: NEG
68074: PUSH
68075: LD_INT 3
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 1
68084: NEG
68085: PUSH
68086: LD_INT 2
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 2
68095: PUSH
68096: LD_INT 4
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 2
68105: NEG
68106: PUSH
68107: LD_INT 2
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 4
68116: NEG
68117: PUSH
68118: LD_INT 0
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 4
68127: NEG
68128: PUSH
68129: LD_INT 1
68131: NEG
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 3
68139: NEG
68140: PUSH
68141: LD_INT 0
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 3
68150: NEG
68151: PUSH
68152: LD_INT 1
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: LD_INT 4
68161: NEG
68162: PUSH
68163: LD_INT 1
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: PUSH
68170: LD_INT 5
68172: NEG
68173: PUSH
68174: LD_INT 0
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 5
68183: NEG
68184: PUSH
68185: LD_INT 1
68187: NEG
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 5
68195: NEG
68196: PUSH
68197: LD_INT 2
68199: NEG
68200: PUSH
68201: EMPTY
68202: LIST
68203: LIST
68204: PUSH
68205: LD_INT 3
68207: NEG
68208: PUSH
68209: LD_INT 2
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 3
68218: NEG
68219: PUSH
68220: LD_INT 3
68222: NEG
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 3
68230: NEG
68231: PUSH
68232: LD_INT 4
68234: NEG
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_INT 2
68242: NEG
68243: PUSH
68244: LD_INT 3
68246: NEG
68247: PUSH
68248: EMPTY
68249: LIST
68250: LIST
68251: PUSH
68252: LD_INT 2
68254: NEG
68255: PUSH
68256: LD_INT 2
68258: NEG
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 3
68266: NEG
68267: PUSH
68268: LD_INT 2
68270: NEG
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 4
68278: NEG
68279: PUSH
68280: LD_INT 3
68282: NEG
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 4
68290: NEG
68291: PUSH
68292: LD_INT 4
68294: NEG
68295: PUSH
68296: EMPTY
68297: LIST
68298: LIST
68299: PUSH
68300: LD_INT 2
68302: NEG
68303: PUSH
68304: LD_INT 4
68306: NEG
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 4
68314: NEG
68315: PUSH
68316: LD_INT 2
68318: NEG
68319: PUSH
68320: EMPTY
68321: LIST
68322: LIST
68323: PUSH
68324: LD_INT 0
68326: PUSH
68327: LD_INT 4
68329: NEG
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: LD_INT 0
68337: PUSH
68338: LD_INT 5
68340: NEG
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 1
68348: PUSH
68349: LD_INT 4
68351: NEG
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 1
68359: PUSH
68360: LD_INT 3
68362: NEG
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 0
68370: PUSH
68371: LD_INT 3
68373: NEG
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: LD_INT 1
68381: NEG
68382: PUSH
68383: LD_INT 4
68385: NEG
68386: PUSH
68387: EMPTY
68388: LIST
68389: LIST
68390: PUSH
68391: LD_INT 1
68393: NEG
68394: PUSH
68395: LD_INT 5
68397: NEG
68398: PUSH
68399: EMPTY
68400: LIST
68401: LIST
68402: PUSH
68403: LD_INT 2
68405: PUSH
68406: LD_INT 3
68408: NEG
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: LD_INT 2
68416: NEG
68417: PUSH
68418: LD_INT 5
68420: NEG
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68473: LD_ADDR_VAR 0 31
68477: PUSH
68478: LD_INT 0
68480: PUSH
68481: LD_INT 4
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 0
68490: PUSH
68491: LD_INT 3
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: PUSH
68498: LD_INT 1
68500: PUSH
68501: LD_INT 4
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 1
68510: PUSH
68511: LD_INT 5
68513: PUSH
68514: EMPTY
68515: LIST
68516: LIST
68517: PUSH
68518: LD_INT 0
68520: PUSH
68521: LD_INT 5
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PUSH
68528: LD_INT 1
68530: NEG
68531: PUSH
68532: LD_INT 4
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 1
68541: NEG
68542: PUSH
68543: LD_INT 3
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 2
68552: PUSH
68553: LD_INT 5
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 2
68562: NEG
68563: PUSH
68564: LD_INT 3
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 3
68573: NEG
68574: PUSH
68575: LD_INT 0
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 3
68584: NEG
68585: PUSH
68586: LD_INT 1
68588: NEG
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 2
68596: NEG
68597: PUSH
68598: LD_INT 0
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: LD_INT 2
68607: NEG
68608: PUSH
68609: LD_INT 1
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 3
68618: NEG
68619: PUSH
68620: LD_INT 1
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 4
68629: NEG
68630: PUSH
68631: LD_INT 0
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 4
68640: NEG
68641: PUSH
68642: LD_INT 1
68644: NEG
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 4
68652: NEG
68653: PUSH
68654: LD_INT 2
68656: NEG
68657: PUSH
68658: EMPTY
68659: LIST
68660: LIST
68661: PUSH
68662: LD_INT 2
68664: NEG
68665: PUSH
68666: LD_INT 2
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 4
68675: NEG
68676: PUSH
68677: LD_INT 4
68679: NEG
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 4
68687: NEG
68688: PUSH
68689: LD_INT 5
68691: NEG
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 3
68699: NEG
68700: PUSH
68701: LD_INT 4
68703: NEG
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 3
68711: NEG
68712: PUSH
68713: LD_INT 3
68715: NEG
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 4
68723: NEG
68724: PUSH
68725: LD_INT 3
68727: NEG
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 5
68735: NEG
68736: PUSH
68737: LD_INT 4
68739: NEG
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 5
68747: NEG
68748: PUSH
68749: LD_INT 5
68751: NEG
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 3
68759: NEG
68760: PUSH
68761: LD_INT 5
68763: NEG
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: PUSH
68769: LD_INT 5
68771: NEG
68772: PUSH
68773: LD_INT 3
68775: NEG
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: LD_INT 0
68783: PUSH
68784: LD_INT 3
68786: NEG
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 0
68794: PUSH
68795: LD_INT 4
68797: NEG
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 1
68805: PUSH
68806: LD_INT 3
68808: NEG
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 1
68816: PUSH
68817: LD_INT 2
68819: NEG
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 0
68827: PUSH
68828: LD_INT 2
68830: NEG
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PUSH
68836: LD_INT 1
68838: NEG
68839: PUSH
68840: LD_INT 3
68842: NEG
68843: PUSH
68844: EMPTY
68845: LIST
68846: LIST
68847: PUSH
68848: LD_INT 1
68850: NEG
68851: PUSH
68852: LD_INT 4
68854: NEG
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 2
68862: PUSH
68863: LD_INT 2
68865: NEG
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: PUSH
68871: LD_INT 2
68873: NEG
68874: PUSH
68875: LD_INT 4
68877: NEG
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 4
68885: PUSH
68886: LD_INT 0
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 4
68895: PUSH
68896: LD_INT 1
68898: NEG
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 5
68906: PUSH
68907: LD_INT 0
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 5
68916: PUSH
68917: LD_INT 1
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 4
68926: PUSH
68927: LD_INT 1
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 3
68936: PUSH
68937: LD_INT 0
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 3
68946: PUSH
68947: LD_INT 1
68949: NEG
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: LD_INT 3
68957: PUSH
68958: LD_INT 2
68960: NEG
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 5
68968: PUSH
68969: LD_INT 2
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69023: LD_ADDR_VAR 0 32
69027: PUSH
69028: LD_INT 4
69030: NEG
69031: PUSH
69032: LD_INT 0
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 4
69041: NEG
69042: PUSH
69043: LD_INT 1
69045: NEG
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 3
69053: NEG
69054: PUSH
69055: LD_INT 0
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: PUSH
69062: LD_INT 3
69064: NEG
69065: PUSH
69066: LD_INT 1
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: LD_INT 4
69075: NEG
69076: PUSH
69077: LD_INT 1
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 5
69086: NEG
69087: PUSH
69088: LD_INT 0
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 5
69097: NEG
69098: PUSH
69099: LD_INT 1
69101: NEG
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: LD_INT 5
69109: NEG
69110: PUSH
69111: LD_INT 2
69113: NEG
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PUSH
69119: LD_INT 3
69121: NEG
69122: PUSH
69123: LD_INT 2
69125: PUSH
69126: EMPTY
69127: LIST
69128: LIST
69129: PUSH
69130: LD_INT 3
69132: NEG
69133: PUSH
69134: LD_INT 3
69136: NEG
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: LD_INT 3
69144: NEG
69145: PUSH
69146: LD_INT 4
69148: NEG
69149: PUSH
69150: EMPTY
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 2
69156: NEG
69157: PUSH
69158: LD_INT 3
69160: NEG
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: PUSH
69166: LD_INT 2
69168: NEG
69169: PUSH
69170: LD_INT 2
69172: NEG
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 3
69180: NEG
69181: PUSH
69182: LD_INT 2
69184: NEG
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 4
69192: NEG
69193: PUSH
69194: LD_INT 3
69196: NEG
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 4
69204: NEG
69205: PUSH
69206: LD_INT 4
69208: NEG
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 2
69216: NEG
69217: PUSH
69218: LD_INT 4
69220: NEG
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: LD_INT 4
69228: NEG
69229: PUSH
69230: LD_INT 2
69232: NEG
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: LD_INT 0
69240: PUSH
69241: LD_INT 4
69243: NEG
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: PUSH
69249: LD_INT 0
69251: PUSH
69252: LD_INT 5
69254: NEG
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 1
69262: PUSH
69263: LD_INT 4
69265: NEG
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 1
69273: PUSH
69274: LD_INT 3
69276: NEG
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 0
69284: PUSH
69285: LD_INT 3
69287: NEG
69288: PUSH
69289: EMPTY
69290: LIST
69291: LIST
69292: PUSH
69293: LD_INT 1
69295: NEG
69296: PUSH
69297: LD_INT 4
69299: NEG
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: PUSH
69305: LD_INT 1
69307: NEG
69308: PUSH
69309: LD_INT 5
69311: NEG
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 2
69319: PUSH
69320: LD_INT 3
69322: NEG
69323: PUSH
69324: EMPTY
69325: LIST
69326: LIST
69327: PUSH
69328: LD_INT 2
69330: NEG
69331: PUSH
69332: LD_INT 5
69334: NEG
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 3
69342: PUSH
69343: LD_INT 0
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 3
69352: PUSH
69353: LD_INT 1
69355: NEG
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PUSH
69361: LD_INT 4
69363: PUSH
69364: LD_INT 0
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 4
69373: PUSH
69374: LD_INT 1
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 3
69383: PUSH
69384: LD_INT 1
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 2
69393: PUSH
69394: LD_INT 0
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 2
69403: PUSH
69404: LD_INT 1
69406: NEG
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: PUSH
69412: LD_INT 2
69414: PUSH
69415: LD_INT 2
69417: NEG
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: PUSH
69423: LD_INT 4
69425: PUSH
69426: LD_INT 2
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PUSH
69433: LD_INT 4
69435: PUSH
69436: LD_INT 4
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: PUSH
69443: LD_INT 4
69445: PUSH
69446: LD_INT 3
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: LD_INT 5
69455: PUSH
69456: LD_INT 4
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: PUSH
69463: LD_INT 5
69465: PUSH
69466: LD_INT 5
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 4
69475: PUSH
69476: LD_INT 5
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 3
69485: PUSH
69486: LD_INT 4
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_INT 3
69495: PUSH
69496: LD_INT 3
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: LD_INT 5
69505: PUSH
69506: LD_INT 3
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: LD_INT 3
69515: PUSH
69516: LD_INT 5
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69570: LD_ADDR_VAR 0 33
69574: PUSH
69575: LD_INT 4
69577: NEG
69578: PUSH
69579: LD_INT 4
69581: NEG
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 4
69589: NEG
69590: PUSH
69591: LD_INT 5
69593: NEG
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 3
69601: NEG
69602: PUSH
69603: LD_INT 4
69605: NEG
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: PUSH
69611: LD_INT 3
69613: NEG
69614: PUSH
69615: LD_INT 3
69617: NEG
69618: PUSH
69619: EMPTY
69620: LIST
69621: LIST
69622: PUSH
69623: LD_INT 4
69625: NEG
69626: PUSH
69627: LD_INT 3
69629: NEG
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: LD_INT 5
69637: NEG
69638: PUSH
69639: LD_INT 4
69641: NEG
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 5
69649: NEG
69650: PUSH
69651: LD_INT 5
69653: NEG
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: LD_INT 3
69661: NEG
69662: PUSH
69663: LD_INT 5
69665: NEG
69666: PUSH
69667: EMPTY
69668: LIST
69669: LIST
69670: PUSH
69671: LD_INT 5
69673: NEG
69674: PUSH
69675: LD_INT 3
69677: NEG
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PUSH
69683: LD_INT 0
69685: PUSH
69686: LD_INT 3
69688: NEG
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 0
69696: PUSH
69697: LD_INT 4
69699: NEG
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: LD_INT 1
69707: PUSH
69708: LD_INT 3
69710: NEG
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: LD_INT 1
69718: PUSH
69719: LD_INT 2
69721: NEG
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 0
69729: PUSH
69730: LD_INT 2
69732: NEG
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: LD_INT 1
69740: NEG
69741: PUSH
69742: LD_INT 3
69744: NEG
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: PUSH
69750: LD_INT 1
69752: NEG
69753: PUSH
69754: LD_INT 4
69756: NEG
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: LD_INT 2
69764: PUSH
69765: LD_INT 2
69767: NEG
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: PUSH
69773: LD_INT 2
69775: NEG
69776: PUSH
69777: LD_INT 4
69779: NEG
69780: PUSH
69781: EMPTY
69782: LIST
69783: LIST
69784: PUSH
69785: LD_INT 4
69787: PUSH
69788: LD_INT 0
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: PUSH
69795: LD_INT 4
69797: PUSH
69798: LD_INT 1
69800: NEG
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: PUSH
69806: LD_INT 5
69808: PUSH
69809: LD_INT 0
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: LD_INT 5
69818: PUSH
69819: LD_INT 1
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 4
69828: PUSH
69829: LD_INT 1
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: LD_INT 3
69838: PUSH
69839: LD_INT 0
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 3
69848: PUSH
69849: LD_INT 1
69851: NEG
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PUSH
69857: LD_INT 3
69859: PUSH
69860: LD_INT 2
69862: NEG
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 5
69870: PUSH
69871: LD_INT 2
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 3
69880: PUSH
69881: LD_INT 3
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PUSH
69888: LD_INT 3
69890: PUSH
69891: LD_INT 2
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 4
69900: PUSH
69901: LD_INT 3
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: LD_INT 4
69910: PUSH
69911: LD_INT 4
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 3
69920: PUSH
69921: LD_INT 4
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 2
69930: PUSH
69931: LD_INT 3
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 2
69940: PUSH
69941: LD_INT 2
69943: PUSH
69944: EMPTY
69945: LIST
69946: LIST
69947: PUSH
69948: LD_INT 4
69950: PUSH
69951: LD_INT 2
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 2
69960: PUSH
69961: LD_INT 4
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 0
69970: PUSH
69971: LD_INT 4
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 0
69980: PUSH
69981: LD_INT 3
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 1
69990: PUSH
69991: LD_INT 4
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 1
70000: PUSH
70001: LD_INT 5
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 0
70010: PUSH
70011: LD_INT 5
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 1
70020: NEG
70021: PUSH
70022: LD_INT 4
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 1
70031: NEG
70032: PUSH
70033: LD_INT 3
70035: PUSH
70036: EMPTY
70037: LIST
70038: LIST
70039: PUSH
70040: LD_INT 2
70042: PUSH
70043: LD_INT 5
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: PUSH
70050: LD_INT 2
70052: NEG
70053: PUSH
70054: LD_INT 3
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70108: LD_ADDR_VAR 0 34
70112: PUSH
70113: LD_INT 0
70115: PUSH
70116: LD_INT 4
70118: NEG
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 0
70126: PUSH
70127: LD_INT 5
70129: NEG
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PUSH
70135: LD_INT 1
70137: PUSH
70138: LD_INT 4
70140: NEG
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 1
70148: PUSH
70149: LD_INT 3
70151: NEG
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 0
70159: PUSH
70160: LD_INT 3
70162: NEG
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PUSH
70168: LD_INT 1
70170: NEG
70171: PUSH
70172: LD_INT 4
70174: NEG
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: PUSH
70180: LD_INT 1
70182: NEG
70183: PUSH
70184: LD_INT 5
70186: NEG
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 2
70194: PUSH
70195: LD_INT 3
70197: NEG
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: PUSH
70203: LD_INT 2
70205: NEG
70206: PUSH
70207: LD_INT 5
70209: NEG
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: PUSH
70215: LD_INT 3
70217: PUSH
70218: LD_INT 0
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: PUSH
70225: LD_INT 3
70227: PUSH
70228: LD_INT 1
70230: NEG
70231: PUSH
70232: EMPTY
70233: LIST
70234: LIST
70235: PUSH
70236: LD_INT 4
70238: PUSH
70239: LD_INT 0
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 4
70248: PUSH
70249: LD_INT 1
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 3
70258: PUSH
70259: LD_INT 1
70261: PUSH
70262: EMPTY
70263: LIST
70264: LIST
70265: PUSH
70266: LD_INT 2
70268: PUSH
70269: LD_INT 0
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: PUSH
70276: LD_INT 2
70278: PUSH
70279: LD_INT 1
70281: NEG
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: LD_INT 2
70289: PUSH
70290: LD_INT 2
70292: NEG
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 4
70300: PUSH
70301: LD_INT 2
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 4
70310: PUSH
70311: LD_INT 4
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: PUSH
70318: LD_INT 4
70320: PUSH
70321: LD_INT 3
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: LD_INT 5
70330: PUSH
70331: LD_INT 4
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 5
70340: PUSH
70341: LD_INT 5
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: LD_INT 4
70350: PUSH
70351: LD_INT 5
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 3
70360: PUSH
70361: LD_INT 4
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 3
70370: PUSH
70371: LD_INT 3
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 5
70380: PUSH
70381: LD_INT 3
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: PUSH
70388: LD_INT 3
70390: PUSH
70391: LD_INT 5
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 0
70400: PUSH
70401: LD_INT 3
70403: PUSH
70404: EMPTY
70405: LIST
70406: LIST
70407: PUSH
70408: LD_INT 0
70410: PUSH
70411: LD_INT 2
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: LD_INT 1
70420: PUSH
70421: LD_INT 3
70423: PUSH
70424: EMPTY
70425: LIST
70426: LIST
70427: PUSH
70428: LD_INT 1
70430: PUSH
70431: LD_INT 4
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 0
70440: PUSH
70441: LD_INT 4
70443: PUSH
70444: EMPTY
70445: LIST
70446: LIST
70447: PUSH
70448: LD_INT 1
70450: NEG
70451: PUSH
70452: LD_INT 3
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: PUSH
70459: LD_INT 1
70461: NEG
70462: PUSH
70463: LD_INT 2
70465: PUSH
70466: EMPTY
70467: LIST
70468: LIST
70469: PUSH
70470: LD_INT 2
70472: PUSH
70473: LD_INT 4
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: PUSH
70480: LD_INT 2
70482: NEG
70483: PUSH
70484: LD_INT 2
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 4
70493: NEG
70494: PUSH
70495: LD_INT 0
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_INT 4
70504: NEG
70505: PUSH
70506: LD_INT 1
70508: NEG
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PUSH
70514: LD_INT 3
70516: NEG
70517: PUSH
70518: LD_INT 0
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: PUSH
70525: LD_INT 3
70527: NEG
70528: PUSH
70529: LD_INT 1
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: PUSH
70536: LD_INT 4
70538: NEG
70539: PUSH
70540: LD_INT 1
70542: PUSH
70543: EMPTY
70544: LIST
70545: LIST
70546: PUSH
70547: LD_INT 5
70549: NEG
70550: PUSH
70551: LD_INT 0
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: PUSH
70558: LD_INT 5
70560: NEG
70561: PUSH
70562: LD_INT 1
70564: NEG
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 5
70572: NEG
70573: PUSH
70574: LD_INT 2
70576: NEG
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: LD_INT 3
70584: NEG
70585: PUSH
70586: LD_INT 2
70588: PUSH
70589: EMPTY
70590: LIST
70591: LIST
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: ST_TO_ADDR
// end ; end ;
70640: GO 70643
70642: POP
// case btype of b_depot , b_warehouse :
70643: LD_VAR 0 1
70647: PUSH
70648: LD_INT 0
70650: DOUBLE
70651: EQUAL
70652: IFTRUE 70662
70654: LD_INT 1
70656: DOUBLE
70657: EQUAL
70658: IFTRUE 70662
70660: GO 70863
70662: POP
// case nation of nation_american :
70663: LD_VAR 0 5
70667: PUSH
70668: LD_INT 1
70670: DOUBLE
70671: EQUAL
70672: IFTRUE 70676
70674: GO 70732
70676: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70677: LD_ADDR_VAR 0 9
70681: PUSH
70682: LD_VAR 0 11
70686: PUSH
70687: LD_VAR 0 12
70691: PUSH
70692: LD_VAR 0 13
70696: PUSH
70697: LD_VAR 0 14
70701: PUSH
70702: LD_VAR 0 15
70706: PUSH
70707: LD_VAR 0 16
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: PUSH
70720: LD_VAR 0 4
70724: PUSH
70725: LD_INT 1
70727: PLUS
70728: ARRAY
70729: ST_TO_ADDR
70730: GO 70861
70732: LD_INT 2
70734: DOUBLE
70735: EQUAL
70736: IFTRUE 70740
70738: GO 70796
70740: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70741: LD_ADDR_VAR 0 9
70745: PUSH
70746: LD_VAR 0 17
70750: PUSH
70751: LD_VAR 0 18
70755: PUSH
70756: LD_VAR 0 19
70760: PUSH
70761: LD_VAR 0 20
70765: PUSH
70766: LD_VAR 0 21
70770: PUSH
70771: LD_VAR 0 22
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: LIST
70783: PUSH
70784: LD_VAR 0 4
70788: PUSH
70789: LD_INT 1
70791: PLUS
70792: ARRAY
70793: ST_TO_ADDR
70794: GO 70861
70796: LD_INT 3
70798: DOUBLE
70799: EQUAL
70800: IFTRUE 70804
70802: GO 70860
70804: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70805: LD_ADDR_VAR 0 9
70809: PUSH
70810: LD_VAR 0 23
70814: PUSH
70815: LD_VAR 0 24
70819: PUSH
70820: LD_VAR 0 25
70824: PUSH
70825: LD_VAR 0 26
70829: PUSH
70830: LD_VAR 0 27
70834: PUSH
70835: LD_VAR 0 28
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: PUSH
70848: LD_VAR 0 4
70852: PUSH
70853: LD_INT 1
70855: PLUS
70856: ARRAY
70857: ST_TO_ADDR
70858: GO 70861
70860: POP
70861: GO 71416
70863: LD_INT 2
70865: DOUBLE
70866: EQUAL
70867: IFTRUE 70877
70869: LD_INT 3
70871: DOUBLE
70872: EQUAL
70873: IFTRUE 70877
70875: GO 70933
70877: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70878: LD_ADDR_VAR 0 9
70882: PUSH
70883: LD_VAR 0 29
70887: PUSH
70888: LD_VAR 0 30
70892: PUSH
70893: LD_VAR 0 31
70897: PUSH
70898: LD_VAR 0 32
70902: PUSH
70903: LD_VAR 0 33
70907: PUSH
70908: LD_VAR 0 34
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: LIST
70919: LIST
70920: PUSH
70921: LD_VAR 0 4
70925: PUSH
70926: LD_INT 1
70928: PLUS
70929: ARRAY
70930: ST_TO_ADDR
70931: GO 71416
70933: LD_INT 16
70935: DOUBLE
70936: EQUAL
70937: IFTRUE 70995
70939: LD_INT 17
70941: DOUBLE
70942: EQUAL
70943: IFTRUE 70995
70945: LD_INT 18
70947: DOUBLE
70948: EQUAL
70949: IFTRUE 70995
70951: LD_INT 19
70953: DOUBLE
70954: EQUAL
70955: IFTRUE 70995
70957: LD_INT 22
70959: DOUBLE
70960: EQUAL
70961: IFTRUE 70995
70963: LD_INT 20
70965: DOUBLE
70966: EQUAL
70967: IFTRUE 70995
70969: LD_INT 21
70971: DOUBLE
70972: EQUAL
70973: IFTRUE 70995
70975: LD_INT 23
70977: DOUBLE
70978: EQUAL
70979: IFTRUE 70995
70981: LD_INT 24
70983: DOUBLE
70984: EQUAL
70985: IFTRUE 70995
70987: LD_INT 25
70989: DOUBLE
70990: EQUAL
70991: IFTRUE 70995
70993: GO 71051
70995: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70996: LD_ADDR_VAR 0 9
71000: PUSH
71001: LD_VAR 0 35
71005: PUSH
71006: LD_VAR 0 36
71010: PUSH
71011: LD_VAR 0 37
71015: PUSH
71016: LD_VAR 0 38
71020: PUSH
71021: LD_VAR 0 39
71025: PUSH
71026: LD_VAR 0 40
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: PUSH
71039: LD_VAR 0 4
71043: PUSH
71044: LD_INT 1
71046: PLUS
71047: ARRAY
71048: ST_TO_ADDR
71049: GO 71416
71051: LD_INT 6
71053: DOUBLE
71054: EQUAL
71055: IFTRUE 71107
71057: LD_INT 7
71059: DOUBLE
71060: EQUAL
71061: IFTRUE 71107
71063: LD_INT 8
71065: DOUBLE
71066: EQUAL
71067: IFTRUE 71107
71069: LD_INT 13
71071: DOUBLE
71072: EQUAL
71073: IFTRUE 71107
71075: LD_INT 12
71077: DOUBLE
71078: EQUAL
71079: IFTRUE 71107
71081: LD_INT 15
71083: DOUBLE
71084: EQUAL
71085: IFTRUE 71107
71087: LD_INT 11
71089: DOUBLE
71090: EQUAL
71091: IFTRUE 71107
71093: LD_INT 14
71095: DOUBLE
71096: EQUAL
71097: IFTRUE 71107
71099: LD_INT 10
71101: DOUBLE
71102: EQUAL
71103: IFTRUE 71107
71105: GO 71163
71107: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71108: LD_ADDR_VAR 0 9
71112: PUSH
71113: LD_VAR 0 41
71117: PUSH
71118: LD_VAR 0 42
71122: PUSH
71123: LD_VAR 0 43
71127: PUSH
71128: LD_VAR 0 44
71132: PUSH
71133: LD_VAR 0 45
71137: PUSH
71138: LD_VAR 0 46
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: PUSH
71151: LD_VAR 0 4
71155: PUSH
71156: LD_INT 1
71158: PLUS
71159: ARRAY
71160: ST_TO_ADDR
71161: GO 71416
71163: LD_INT 36
71165: DOUBLE
71166: EQUAL
71167: IFTRUE 71171
71169: GO 71227
71171: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71172: LD_ADDR_VAR 0 9
71176: PUSH
71177: LD_VAR 0 47
71181: PUSH
71182: LD_VAR 0 48
71186: PUSH
71187: LD_VAR 0 49
71191: PUSH
71192: LD_VAR 0 50
71196: PUSH
71197: LD_VAR 0 51
71201: PUSH
71202: LD_VAR 0 52
71206: PUSH
71207: EMPTY
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: PUSH
71215: LD_VAR 0 4
71219: PUSH
71220: LD_INT 1
71222: PLUS
71223: ARRAY
71224: ST_TO_ADDR
71225: GO 71416
71227: LD_INT 4
71229: DOUBLE
71230: EQUAL
71231: IFTRUE 71253
71233: LD_INT 5
71235: DOUBLE
71236: EQUAL
71237: IFTRUE 71253
71239: LD_INT 34
71241: DOUBLE
71242: EQUAL
71243: IFTRUE 71253
71245: LD_INT 37
71247: DOUBLE
71248: EQUAL
71249: IFTRUE 71253
71251: GO 71309
71253: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71254: LD_ADDR_VAR 0 9
71258: PUSH
71259: LD_VAR 0 53
71263: PUSH
71264: LD_VAR 0 54
71268: PUSH
71269: LD_VAR 0 55
71273: PUSH
71274: LD_VAR 0 56
71278: PUSH
71279: LD_VAR 0 57
71283: PUSH
71284: LD_VAR 0 58
71288: PUSH
71289: EMPTY
71290: LIST
71291: LIST
71292: LIST
71293: LIST
71294: LIST
71295: LIST
71296: PUSH
71297: LD_VAR 0 4
71301: PUSH
71302: LD_INT 1
71304: PLUS
71305: ARRAY
71306: ST_TO_ADDR
71307: GO 71416
71309: LD_INT 31
71311: DOUBLE
71312: EQUAL
71313: IFTRUE 71359
71315: LD_INT 32
71317: DOUBLE
71318: EQUAL
71319: IFTRUE 71359
71321: LD_INT 33
71323: DOUBLE
71324: EQUAL
71325: IFTRUE 71359
71327: LD_INT 27
71329: DOUBLE
71330: EQUAL
71331: IFTRUE 71359
71333: LD_INT 26
71335: DOUBLE
71336: EQUAL
71337: IFTRUE 71359
71339: LD_INT 28
71341: DOUBLE
71342: EQUAL
71343: IFTRUE 71359
71345: LD_INT 29
71347: DOUBLE
71348: EQUAL
71349: IFTRUE 71359
71351: LD_INT 30
71353: DOUBLE
71354: EQUAL
71355: IFTRUE 71359
71357: GO 71415
71359: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71360: LD_ADDR_VAR 0 9
71364: PUSH
71365: LD_VAR 0 59
71369: PUSH
71370: LD_VAR 0 60
71374: PUSH
71375: LD_VAR 0 61
71379: PUSH
71380: LD_VAR 0 62
71384: PUSH
71385: LD_VAR 0 63
71389: PUSH
71390: LD_VAR 0 64
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: PUSH
71403: LD_VAR 0 4
71407: PUSH
71408: LD_INT 1
71410: PLUS
71411: ARRAY
71412: ST_TO_ADDR
71413: GO 71416
71415: POP
// temp_list2 = [ ] ;
71416: LD_ADDR_VAR 0 10
71420: PUSH
71421: EMPTY
71422: ST_TO_ADDR
// for i in temp_list do
71423: LD_ADDR_VAR 0 8
71427: PUSH
71428: LD_VAR 0 9
71432: PUSH
71433: FOR_IN
71434: IFFALSE 71486
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71436: LD_ADDR_VAR 0 10
71440: PUSH
71441: LD_VAR 0 10
71445: PUSH
71446: LD_VAR 0 8
71450: PUSH
71451: LD_INT 1
71453: ARRAY
71454: PUSH
71455: LD_VAR 0 2
71459: PLUS
71460: PUSH
71461: LD_VAR 0 8
71465: PUSH
71466: LD_INT 2
71468: ARRAY
71469: PUSH
71470: LD_VAR 0 3
71474: PLUS
71475: PUSH
71476: EMPTY
71477: LIST
71478: LIST
71479: PUSH
71480: EMPTY
71481: LIST
71482: ADD
71483: ST_TO_ADDR
71484: GO 71433
71486: POP
71487: POP
// result = temp_list2 ;
71488: LD_ADDR_VAR 0 7
71492: PUSH
71493: LD_VAR 0 10
71497: ST_TO_ADDR
// end ;
71498: LD_VAR 0 7
71502: RET
// export function EnemyInRange ( unit , dist ) ; begin
71503: LD_INT 0
71505: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71506: LD_ADDR_VAR 0 3
71510: PUSH
71511: LD_VAR 0 1
71515: PPUSH
71516: CALL_OW 255
71520: PPUSH
71521: LD_VAR 0 1
71525: PPUSH
71526: CALL_OW 250
71530: PPUSH
71531: LD_VAR 0 1
71535: PPUSH
71536: CALL_OW 251
71540: PPUSH
71541: LD_VAR 0 2
71545: PPUSH
71546: CALL 44760 0 4
71550: PUSH
71551: LD_INT 4
71553: ARRAY
71554: ST_TO_ADDR
// end ;
71555: LD_VAR 0 3
71559: RET
// export function PlayerSeeMe ( unit ) ; begin
71560: LD_INT 0
71562: PPUSH
// result := See ( your_side , unit ) ;
71563: LD_ADDR_VAR 0 2
71567: PUSH
71568: LD_OWVAR 2
71572: PPUSH
71573: LD_VAR 0 1
71577: PPUSH
71578: CALL_OW 292
71582: ST_TO_ADDR
// end ;
71583: LD_VAR 0 2
71587: RET
// export function ReverseDir ( unit ) ; begin
71588: LD_INT 0
71590: PPUSH
// if not unit then
71591: LD_VAR 0 1
71595: NOT
71596: IFFALSE 71600
// exit ;
71598: GO 71623
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71600: LD_ADDR_VAR 0 2
71604: PUSH
71605: LD_VAR 0 1
71609: PPUSH
71610: CALL_OW 254
71614: PUSH
71615: LD_INT 3
71617: PLUS
71618: PUSH
71619: LD_INT 6
71621: MOD
71622: ST_TO_ADDR
// end ;
71623: LD_VAR 0 2
71627: RET
// export function ReverseArray ( array ) ; var i ; begin
71628: LD_INT 0
71630: PPUSH
71631: PPUSH
// if not array then
71632: LD_VAR 0 1
71636: NOT
71637: IFFALSE 71641
// exit ;
71639: GO 71696
// result := [ ] ;
71641: LD_ADDR_VAR 0 2
71645: PUSH
71646: EMPTY
71647: ST_TO_ADDR
// for i := array downto 1 do
71648: LD_ADDR_VAR 0 3
71652: PUSH
71653: DOUBLE
71654: LD_VAR 0 1
71658: INC
71659: ST_TO_ADDR
71660: LD_INT 1
71662: PUSH
71663: FOR_DOWNTO
71664: IFFALSE 71694
// result := Join ( result , array [ i ] ) ;
71666: LD_ADDR_VAR 0 2
71670: PUSH
71671: LD_VAR 0 2
71675: PPUSH
71676: LD_VAR 0 1
71680: PUSH
71681: LD_VAR 0 3
71685: ARRAY
71686: PPUSH
71687: CALL 76548 0 2
71691: ST_TO_ADDR
71692: GO 71663
71694: POP
71695: POP
// end ;
71696: LD_VAR 0 2
71700: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71701: LD_INT 0
71703: PPUSH
71704: PPUSH
71705: PPUSH
71706: PPUSH
71707: PPUSH
71708: PPUSH
// if not unit or not hexes then
71709: LD_VAR 0 1
71713: NOT
71714: IFTRUE 71723
71716: PUSH
71717: LD_VAR 0 2
71721: NOT
71722: OR
71723: IFFALSE 71727
// exit ;
71725: GO 71850
// dist := 9999 ;
71727: LD_ADDR_VAR 0 5
71731: PUSH
71732: LD_INT 9999
71734: ST_TO_ADDR
// for i = 1 to hexes do
71735: LD_ADDR_VAR 0 4
71739: PUSH
71740: DOUBLE
71741: LD_INT 1
71743: DEC
71744: ST_TO_ADDR
71745: LD_VAR 0 2
71749: PUSH
71750: FOR_TO
71751: IFFALSE 71838
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71753: LD_ADDR_VAR 0 6
71757: PUSH
71758: LD_VAR 0 1
71762: PPUSH
71763: LD_VAR 0 2
71767: PUSH
71768: LD_VAR 0 4
71772: ARRAY
71773: PUSH
71774: LD_INT 1
71776: ARRAY
71777: PPUSH
71778: LD_VAR 0 2
71782: PUSH
71783: LD_VAR 0 4
71787: ARRAY
71788: PUSH
71789: LD_INT 2
71791: ARRAY
71792: PPUSH
71793: CALL_OW 297
71797: ST_TO_ADDR
// if tdist < dist then
71798: LD_VAR 0 6
71802: PUSH
71803: LD_VAR 0 5
71807: LESS
71808: IFFALSE 71836
// begin hex := hexes [ i ] ;
71810: LD_ADDR_VAR 0 8
71814: PUSH
71815: LD_VAR 0 2
71819: PUSH
71820: LD_VAR 0 4
71824: ARRAY
71825: ST_TO_ADDR
// dist := tdist ;
71826: LD_ADDR_VAR 0 5
71830: PUSH
71831: LD_VAR 0 6
71835: ST_TO_ADDR
// end ; end ;
71836: GO 71750
71838: POP
71839: POP
// result := hex ;
71840: LD_ADDR_VAR 0 3
71844: PUSH
71845: LD_VAR 0 8
71849: ST_TO_ADDR
// end ;
71850: LD_VAR 0 3
71854: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71855: LD_INT 0
71857: PPUSH
71858: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71859: LD_VAR 0 1
71863: NOT
71864: IFTRUE 71903
71866: PUSH
71867: LD_VAR 0 1
71871: PUSH
71872: LD_INT 21
71874: PUSH
71875: LD_INT 2
71877: PUSH
71878: EMPTY
71879: LIST
71880: LIST
71881: PUSH
71882: LD_INT 23
71884: PUSH
71885: LD_INT 2
71887: PUSH
71888: EMPTY
71889: LIST
71890: LIST
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: PPUSH
71896: CALL_OW 69
71900: IN
71901: NOT
71902: OR
71903: IFFALSE 71907
// exit ;
71905: GO 71954
// for i = 1 to 3 do
71907: LD_ADDR_VAR 0 3
71911: PUSH
71912: DOUBLE
71913: LD_INT 1
71915: DEC
71916: ST_TO_ADDR
71917: LD_INT 3
71919: PUSH
71920: FOR_TO
71921: IFFALSE 71952
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71923: LD_VAR 0 1
71927: PPUSH
71928: CALL_OW 250
71932: PPUSH
71933: LD_VAR 0 1
71937: PPUSH
71938: CALL_OW 251
71942: PPUSH
71943: LD_INT 1
71945: PPUSH
71946: CALL_OW 453
71950: GO 71920
71952: POP
71953: POP
// end ;
71954: LD_VAR 0 2
71958: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71959: LD_INT 0
71961: PPUSH
71962: PPUSH
71963: PPUSH
71964: PPUSH
71965: PPUSH
71966: PPUSH
// if not unit or not enemy_unit then
71967: LD_VAR 0 1
71971: NOT
71972: IFTRUE 71981
71974: PUSH
71975: LD_VAR 0 2
71979: NOT
71980: OR
71981: IFFALSE 71985
// exit ;
71983: GO 72466
// if GetLives ( i ) < 250 then
71985: LD_VAR 0 4
71989: PPUSH
71990: CALL_OW 256
71994: PUSH
71995: LD_INT 250
71997: LESS
71998: IFFALSE 72011
// begin ComAutodestruct ( i ) ;
72000: LD_VAR 0 4
72004: PPUSH
72005: CALL 71855 0 1
// exit ;
72009: GO 72466
// end ; x := GetX ( enemy_unit ) ;
72011: LD_ADDR_VAR 0 7
72015: PUSH
72016: LD_VAR 0 2
72020: PPUSH
72021: CALL_OW 250
72025: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72026: LD_ADDR_VAR 0 8
72030: PUSH
72031: LD_VAR 0 2
72035: PPUSH
72036: CALL_OW 251
72040: ST_TO_ADDR
// if not x or not y then
72041: LD_VAR 0 7
72045: NOT
72046: IFTRUE 72055
72048: PUSH
72049: LD_VAR 0 8
72053: NOT
72054: OR
72055: IFFALSE 72059
// exit ;
72057: GO 72466
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72059: LD_ADDR_VAR 0 6
72063: PUSH
72064: LD_VAR 0 7
72068: PPUSH
72069: LD_INT 0
72071: PPUSH
72072: LD_INT 4
72074: PPUSH
72075: CALL_OW 272
72079: PUSH
72080: LD_VAR 0 8
72084: PPUSH
72085: LD_INT 0
72087: PPUSH
72088: LD_INT 4
72090: PPUSH
72091: CALL_OW 273
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: PUSH
72100: LD_VAR 0 7
72104: PPUSH
72105: LD_INT 1
72107: PPUSH
72108: LD_INT 4
72110: PPUSH
72111: CALL_OW 272
72115: PUSH
72116: LD_VAR 0 8
72120: PPUSH
72121: LD_INT 1
72123: PPUSH
72124: LD_INT 4
72126: PPUSH
72127: CALL_OW 273
72131: PUSH
72132: EMPTY
72133: LIST
72134: LIST
72135: PUSH
72136: LD_VAR 0 7
72140: PPUSH
72141: LD_INT 2
72143: PPUSH
72144: LD_INT 4
72146: PPUSH
72147: CALL_OW 272
72151: PUSH
72152: LD_VAR 0 8
72156: PPUSH
72157: LD_INT 2
72159: PPUSH
72160: LD_INT 4
72162: PPUSH
72163: CALL_OW 273
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: PUSH
72172: LD_VAR 0 7
72176: PPUSH
72177: LD_INT 3
72179: PPUSH
72180: LD_INT 4
72182: PPUSH
72183: CALL_OW 272
72187: PUSH
72188: LD_VAR 0 8
72192: PPUSH
72193: LD_INT 3
72195: PPUSH
72196: LD_INT 4
72198: PPUSH
72199: CALL_OW 273
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: LD_VAR 0 7
72212: PPUSH
72213: LD_INT 4
72215: PPUSH
72216: LD_INT 4
72218: PPUSH
72219: CALL_OW 272
72223: PUSH
72224: LD_VAR 0 8
72228: PPUSH
72229: LD_INT 4
72231: PPUSH
72232: LD_INT 4
72234: PPUSH
72235: CALL_OW 273
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PUSH
72244: LD_VAR 0 7
72248: PPUSH
72249: LD_INT 5
72251: PPUSH
72252: LD_INT 4
72254: PPUSH
72255: CALL_OW 272
72259: PUSH
72260: LD_VAR 0 8
72264: PPUSH
72265: LD_INT 5
72267: PPUSH
72268: LD_INT 4
72270: PPUSH
72271: CALL_OW 273
72275: PUSH
72276: EMPTY
72277: LIST
72278: LIST
72279: PUSH
72280: EMPTY
72281: LIST
72282: LIST
72283: LIST
72284: LIST
72285: LIST
72286: LIST
72287: ST_TO_ADDR
// for i = tmp downto 1 do
72288: LD_ADDR_VAR 0 4
72292: PUSH
72293: DOUBLE
72294: LD_VAR 0 6
72298: INC
72299: ST_TO_ADDR
72300: LD_INT 1
72302: PUSH
72303: FOR_DOWNTO
72304: IFFALSE 72407
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72306: LD_VAR 0 6
72310: PUSH
72311: LD_VAR 0 4
72315: ARRAY
72316: PUSH
72317: LD_INT 1
72319: ARRAY
72320: PPUSH
72321: LD_VAR 0 6
72325: PUSH
72326: LD_VAR 0 4
72330: ARRAY
72331: PUSH
72332: LD_INT 2
72334: ARRAY
72335: PPUSH
72336: CALL_OW 488
72340: NOT
72341: IFTRUE 72383
72343: PUSH
72344: LD_VAR 0 6
72348: PUSH
72349: LD_VAR 0 4
72353: ARRAY
72354: PUSH
72355: LD_INT 1
72357: ARRAY
72358: PPUSH
72359: LD_VAR 0 6
72363: PUSH
72364: LD_VAR 0 4
72368: ARRAY
72369: PUSH
72370: LD_INT 2
72372: ARRAY
72373: PPUSH
72374: CALL_OW 428
72378: PUSH
72379: LD_INT 0
72381: NONEQUAL
72382: OR
72383: IFFALSE 72405
// tmp := Delete ( tmp , i ) ;
72385: LD_ADDR_VAR 0 6
72389: PUSH
72390: LD_VAR 0 6
72394: PPUSH
72395: LD_VAR 0 4
72399: PPUSH
72400: CALL_OW 3
72404: ST_TO_ADDR
72405: GO 72303
72407: POP
72408: POP
// j := GetClosestHex ( unit , tmp ) ;
72409: LD_ADDR_VAR 0 5
72413: PUSH
72414: LD_VAR 0 1
72418: PPUSH
72419: LD_VAR 0 6
72423: PPUSH
72424: CALL 71701 0 2
72428: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72429: LD_VAR 0 1
72433: PPUSH
72434: LD_VAR 0 5
72438: PUSH
72439: LD_INT 1
72441: ARRAY
72442: PPUSH
72443: LD_VAR 0 5
72447: PUSH
72448: LD_INT 2
72450: ARRAY
72451: PPUSH
72452: CALL_OW 111
// result := j ;
72456: LD_ADDR_VAR 0 3
72460: PUSH
72461: LD_VAR 0 5
72465: ST_TO_ADDR
// end ;
72466: LD_VAR 0 3
72470: RET
// export function PrepareApemanSoldier ( ) ; begin
72471: LD_INT 0
72473: PPUSH
// uc_nation := 0 ;
72474: LD_ADDR_OWVAR 21
72478: PUSH
72479: LD_INT 0
72481: ST_TO_ADDR
// hc_sex := sex_male ;
72482: LD_ADDR_OWVAR 27
72486: PUSH
72487: LD_INT 1
72489: ST_TO_ADDR
// hc_name :=  ;
72490: LD_ADDR_OWVAR 26
72494: PUSH
72495: LD_STRING 
72497: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72498: LD_ADDR_OWVAR 28
72502: PUSH
72503: LD_INT 15
72505: ST_TO_ADDR
// hc_gallery :=  ;
72506: LD_ADDR_OWVAR 33
72510: PUSH
72511: LD_STRING 
72513: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72514: LD_ADDR_OWVAR 31
72518: PUSH
72519: LD_INT 0
72521: PPUSH
72522: LD_INT 3
72524: PPUSH
72525: CALL_OW 12
72529: PUSH
72530: LD_INT 0
72532: PPUSH
72533: LD_INT 3
72535: PPUSH
72536: CALL_OW 12
72540: PUSH
72541: LD_INT 0
72543: PUSH
72544: LD_INT 0
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: LIST
72551: LIST
72552: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
72553: LD_ADDR_OWVAR 29
72557: PUSH
72558: LD_INT 10
72560: PUSH
72561: LD_INT 12
72563: PUSH
72564: EMPTY
72565: LIST
72566: LIST
72567: ST_TO_ADDR
// end ;
72568: LD_VAR 0 1
72572: RET
// export function PrepareApemanEngineer ( ) ; begin
72573: LD_INT 0
72575: PPUSH
// uc_nation := 0 ;
72576: LD_ADDR_OWVAR 21
72580: PUSH
72581: LD_INT 0
72583: ST_TO_ADDR
// hc_sex := sex_male ;
72584: LD_ADDR_OWVAR 27
72588: PUSH
72589: LD_INT 1
72591: ST_TO_ADDR
// hc_name :=  ;
72592: LD_ADDR_OWVAR 26
72596: PUSH
72597: LD_STRING 
72599: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72600: LD_ADDR_OWVAR 28
72604: PUSH
72605: LD_INT 16
72607: ST_TO_ADDR
// hc_gallery :=  ;
72608: LD_ADDR_OWVAR 33
72612: PUSH
72613: LD_STRING 
72615: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72616: LD_ADDR_OWVAR 31
72620: PUSH
72621: LD_INT 0
72623: PPUSH
72624: LD_INT 3
72626: PPUSH
72627: CALL_OW 12
72631: PUSH
72632: LD_INT 0
72634: PPUSH
72635: LD_INT 3
72637: PPUSH
72638: CALL_OW 12
72642: PUSH
72643: LD_INT 0
72645: PUSH
72646: LD_INT 0
72648: PUSH
72649: EMPTY
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
72655: LD_ADDR_OWVAR 29
72659: PUSH
72660: LD_INT 10
72662: PUSH
72663: LD_INT 12
72665: PUSH
72666: EMPTY
72667: LIST
72668: LIST
72669: ST_TO_ADDR
// end ;
72670: LD_VAR 0 1
72674: RET
// export function PrepareApeman ( agressivity ) ; begin
72675: LD_INT 0
72677: PPUSH
// uc_side := 0 ;
72678: LD_ADDR_OWVAR 20
72682: PUSH
72683: LD_INT 0
72685: ST_TO_ADDR
// uc_nation := 0 ;
72686: LD_ADDR_OWVAR 21
72690: PUSH
72691: LD_INT 0
72693: ST_TO_ADDR
// hc_sex := sex_male ;
72694: LD_ADDR_OWVAR 27
72698: PUSH
72699: LD_INT 1
72701: ST_TO_ADDR
// hc_class := class_apeman ;
72702: LD_ADDR_OWVAR 28
72706: PUSH
72707: LD_INT 12
72709: ST_TO_ADDR
// hc_gallery :=  ;
72710: LD_ADDR_OWVAR 33
72714: PUSH
72715: LD_STRING 
72717: ST_TO_ADDR
// hc_name :=  ;
72718: LD_ADDR_OWVAR 26
72722: PUSH
72723: LD_STRING 
72725: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
72726: LD_ADDR_OWVAR 29
72730: PUSH
72731: LD_INT 10
72733: PUSH
72734: LD_INT 12
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: ST_TO_ADDR
// if agressivity = 0 then
72741: LD_VAR 0 1
72745: PUSH
72746: LD_INT 0
72748: EQUAL
72749: IFFALSE 72761
// hc_agressivity := 0 else
72751: LD_ADDR_OWVAR 35
72755: PUSH
72756: LD_INT 0
72758: ST_TO_ADDR
72759: GO 72782
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72761: LD_ADDR_OWVAR 35
72765: PUSH
72766: LD_VAR 0 1
72770: NEG
72771: PPUSH
72772: LD_VAR 0 1
72776: PPUSH
72777: CALL_OW 12
72781: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72782: LD_ADDR_OWVAR 31
72786: PUSH
72787: LD_INT 0
72789: PPUSH
72790: LD_INT 3
72792: PPUSH
72793: CALL_OW 12
72797: PUSH
72798: LD_INT 0
72800: PPUSH
72801: LD_INT 3
72803: PPUSH
72804: CALL_OW 12
72808: PUSH
72809: LD_INT 0
72811: PUSH
72812: LD_INT 0
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: LIST
72819: LIST
72820: ST_TO_ADDR
// end ;
72821: LD_VAR 0 2
72825: RET
// export function PrepareTiger ( agressivity ) ; begin
72826: LD_INT 0
72828: PPUSH
// uc_side := 0 ;
72829: LD_ADDR_OWVAR 20
72833: PUSH
72834: LD_INT 0
72836: ST_TO_ADDR
// uc_nation := 0 ;
72837: LD_ADDR_OWVAR 21
72841: PUSH
72842: LD_INT 0
72844: ST_TO_ADDR
// InitHc ;
72845: CALL_OW 19
// hc_class := class_tiger ;
72849: LD_ADDR_OWVAR 28
72853: PUSH
72854: LD_INT 14
72856: ST_TO_ADDR
// hc_gallery :=  ;
72857: LD_ADDR_OWVAR 33
72861: PUSH
72862: LD_STRING 
72864: ST_TO_ADDR
// hc_name :=  ;
72865: LD_ADDR_OWVAR 26
72869: PUSH
72870: LD_STRING 
72872: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72873: LD_ADDR_OWVAR 35
72877: PUSH
72878: LD_VAR 0 1
72882: NEG
72883: PPUSH
72884: LD_VAR 0 1
72888: PPUSH
72889: CALL_OW 12
72893: ST_TO_ADDR
// end ;
72894: LD_VAR 0 2
72898: RET
// export function PrepareEnchidna ( ) ; begin
72899: LD_INT 0
72901: PPUSH
// uc_side := 0 ;
72902: LD_ADDR_OWVAR 20
72906: PUSH
72907: LD_INT 0
72909: ST_TO_ADDR
// uc_nation := 0 ;
72910: LD_ADDR_OWVAR 21
72914: PUSH
72915: LD_INT 0
72917: ST_TO_ADDR
// InitHc ;
72918: CALL_OW 19
// hc_class := class_baggie ;
72922: LD_ADDR_OWVAR 28
72926: PUSH
72927: LD_INT 13
72929: ST_TO_ADDR
// hc_gallery :=  ;
72930: LD_ADDR_OWVAR 33
72934: PUSH
72935: LD_STRING 
72937: ST_TO_ADDR
// hc_name :=  ;
72938: LD_ADDR_OWVAR 26
72942: PUSH
72943: LD_STRING 
72945: ST_TO_ADDR
// end ;
72946: LD_VAR 0 1
72950: RET
// export function PrepareFrog ( ) ; begin
72951: LD_INT 0
72953: PPUSH
// uc_side := 0 ;
72954: LD_ADDR_OWVAR 20
72958: PUSH
72959: LD_INT 0
72961: ST_TO_ADDR
// uc_nation := 0 ;
72962: LD_ADDR_OWVAR 21
72966: PUSH
72967: LD_INT 0
72969: ST_TO_ADDR
// InitHc ;
72970: CALL_OW 19
// hc_class := class_frog ;
72974: LD_ADDR_OWVAR 28
72978: PUSH
72979: LD_INT 19
72981: ST_TO_ADDR
// hc_gallery :=  ;
72982: LD_ADDR_OWVAR 33
72986: PUSH
72987: LD_STRING 
72989: ST_TO_ADDR
// hc_name :=  ;
72990: LD_ADDR_OWVAR 26
72994: PUSH
72995: LD_STRING 
72997: ST_TO_ADDR
// end ;
72998: LD_VAR 0 1
73002: RET
// export function PrepareFish ( ) ; begin
73003: LD_INT 0
73005: PPUSH
// uc_side := 0 ;
73006: LD_ADDR_OWVAR 20
73010: PUSH
73011: LD_INT 0
73013: ST_TO_ADDR
// uc_nation := 0 ;
73014: LD_ADDR_OWVAR 21
73018: PUSH
73019: LD_INT 0
73021: ST_TO_ADDR
// InitHc ;
73022: CALL_OW 19
// hc_class := class_fish ;
73026: LD_ADDR_OWVAR 28
73030: PUSH
73031: LD_INT 20
73033: ST_TO_ADDR
// hc_gallery :=  ;
73034: LD_ADDR_OWVAR 33
73038: PUSH
73039: LD_STRING 
73041: ST_TO_ADDR
// hc_name :=  ;
73042: LD_ADDR_OWVAR 26
73046: PUSH
73047: LD_STRING 
73049: ST_TO_ADDR
// end ;
73050: LD_VAR 0 1
73054: RET
// export function PrepareBird ( ) ; begin
73055: LD_INT 0
73057: PPUSH
// uc_side := 0 ;
73058: LD_ADDR_OWVAR 20
73062: PUSH
73063: LD_INT 0
73065: ST_TO_ADDR
// uc_nation := 0 ;
73066: LD_ADDR_OWVAR 21
73070: PUSH
73071: LD_INT 0
73073: ST_TO_ADDR
// InitHc ;
73074: CALL_OW 19
// hc_class := class_phororhacos ;
73078: LD_ADDR_OWVAR 28
73082: PUSH
73083: LD_INT 18
73085: ST_TO_ADDR
// hc_gallery :=  ;
73086: LD_ADDR_OWVAR 33
73090: PUSH
73091: LD_STRING 
73093: ST_TO_ADDR
// hc_name :=  ;
73094: LD_ADDR_OWVAR 26
73098: PUSH
73099: LD_STRING 
73101: ST_TO_ADDR
// end ;
73102: LD_VAR 0 1
73106: RET
// export function PrepareHorse ( ) ; begin
73107: LD_INT 0
73109: PPUSH
// uc_side := 0 ;
73110: LD_ADDR_OWVAR 20
73114: PUSH
73115: LD_INT 0
73117: ST_TO_ADDR
// uc_nation := 0 ;
73118: LD_ADDR_OWVAR 21
73122: PUSH
73123: LD_INT 0
73125: ST_TO_ADDR
// InitHc ;
73126: CALL_OW 19
// hc_class := class_horse ;
73130: LD_ADDR_OWVAR 28
73134: PUSH
73135: LD_INT 21
73137: ST_TO_ADDR
// hc_gallery :=  ;
73138: LD_ADDR_OWVAR 33
73142: PUSH
73143: LD_STRING 
73145: ST_TO_ADDR
// hc_name :=  ;
73146: LD_ADDR_OWVAR 26
73150: PUSH
73151: LD_STRING 
73153: ST_TO_ADDR
// end ;
73154: LD_VAR 0 1
73158: RET
// export function PrepareMastodont ( ) ; begin
73159: LD_INT 0
73161: PPUSH
// uc_side := 0 ;
73162: LD_ADDR_OWVAR 20
73166: PUSH
73167: LD_INT 0
73169: ST_TO_ADDR
// uc_nation := 0 ;
73170: LD_ADDR_OWVAR 21
73174: PUSH
73175: LD_INT 0
73177: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73178: LD_ADDR_OWVAR 37
73182: PUSH
73183: LD_INT 31
73185: ST_TO_ADDR
// vc_control := control_rider ;
73186: LD_ADDR_OWVAR 38
73190: PUSH
73191: LD_INT 4
73193: ST_TO_ADDR
// end ;
73194: LD_VAR 0 1
73198: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73199: LD_INT 0
73201: PPUSH
73202: PPUSH
73203: PPUSH
// uc_side = 0 ;
73204: LD_ADDR_OWVAR 20
73208: PUSH
73209: LD_INT 0
73211: ST_TO_ADDR
// uc_nation = 0 ;
73212: LD_ADDR_OWVAR 21
73216: PUSH
73217: LD_INT 0
73219: ST_TO_ADDR
// InitHc_All ( ) ;
73220: CALL_OW 584
// InitVc ;
73224: CALL_OW 20
// if mastodonts then
73228: LD_VAR 0 6
73232: IFFALSE 73299
// for i = 1 to mastodonts do
73234: LD_ADDR_VAR 0 11
73238: PUSH
73239: DOUBLE
73240: LD_INT 1
73242: DEC
73243: ST_TO_ADDR
73244: LD_VAR 0 6
73248: PUSH
73249: FOR_TO
73250: IFFALSE 73297
// begin vc_chassis := 31 ;
73252: LD_ADDR_OWVAR 37
73256: PUSH
73257: LD_INT 31
73259: ST_TO_ADDR
// vc_control := control_rider ;
73260: LD_ADDR_OWVAR 38
73264: PUSH
73265: LD_INT 4
73267: ST_TO_ADDR
// animal := CreateVehicle ;
73268: LD_ADDR_VAR 0 12
73272: PUSH
73273: CALL_OW 45
73277: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73278: LD_VAR 0 12
73282: PPUSH
73283: LD_VAR 0 8
73287: PPUSH
73288: LD_INT 0
73290: PPUSH
73291: CALL 75441 0 3
// end ;
73295: GO 73249
73297: POP
73298: POP
// if horses then
73299: LD_VAR 0 5
73303: IFFALSE 73370
// for i = 1 to horses do
73305: LD_ADDR_VAR 0 11
73309: PUSH
73310: DOUBLE
73311: LD_INT 1
73313: DEC
73314: ST_TO_ADDR
73315: LD_VAR 0 5
73319: PUSH
73320: FOR_TO
73321: IFFALSE 73368
// begin hc_class := 21 ;
73323: LD_ADDR_OWVAR 28
73327: PUSH
73328: LD_INT 21
73330: ST_TO_ADDR
// hc_gallery :=  ;
73331: LD_ADDR_OWVAR 33
73335: PUSH
73336: LD_STRING 
73338: ST_TO_ADDR
// animal := CreateHuman ;
73339: LD_ADDR_VAR 0 12
73343: PUSH
73344: CALL_OW 44
73348: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73349: LD_VAR 0 12
73353: PPUSH
73354: LD_VAR 0 8
73358: PPUSH
73359: LD_INT 0
73361: PPUSH
73362: CALL 75441 0 3
// end ;
73366: GO 73320
73368: POP
73369: POP
// if birds then
73370: LD_VAR 0 1
73374: IFFALSE 73441
// for i = 1 to birds do
73376: LD_ADDR_VAR 0 11
73380: PUSH
73381: DOUBLE
73382: LD_INT 1
73384: DEC
73385: ST_TO_ADDR
73386: LD_VAR 0 1
73390: PUSH
73391: FOR_TO
73392: IFFALSE 73439
// begin hc_class := 18 ;
73394: LD_ADDR_OWVAR 28
73398: PUSH
73399: LD_INT 18
73401: ST_TO_ADDR
// hc_gallery =  ;
73402: LD_ADDR_OWVAR 33
73406: PUSH
73407: LD_STRING 
73409: ST_TO_ADDR
// animal := CreateHuman ;
73410: LD_ADDR_VAR 0 12
73414: PUSH
73415: CALL_OW 44
73419: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73420: LD_VAR 0 12
73424: PPUSH
73425: LD_VAR 0 8
73429: PPUSH
73430: LD_INT 0
73432: PPUSH
73433: CALL 75441 0 3
// end ;
73437: GO 73391
73439: POP
73440: POP
// if tigers then
73441: LD_VAR 0 2
73445: IFFALSE 73529
// for i = 1 to tigers do
73447: LD_ADDR_VAR 0 11
73451: PUSH
73452: DOUBLE
73453: LD_INT 1
73455: DEC
73456: ST_TO_ADDR
73457: LD_VAR 0 2
73461: PUSH
73462: FOR_TO
73463: IFFALSE 73527
// begin hc_class = class_tiger ;
73465: LD_ADDR_OWVAR 28
73469: PUSH
73470: LD_INT 14
73472: ST_TO_ADDR
// hc_gallery =  ;
73473: LD_ADDR_OWVAR 33
73477: PUSH
73478: LD_STRING 
73480: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73481: LD_ADDR_OWVAR 35
73485: PUSH
73486: LD_INT 7
73488: NEG
73489: PPUSH
73490: LD_INT 7
73492: PPUSH
73493: CALL_OW 12
73497: ST_TO_ADDR
// animal := CreateHuman ;
73498: LD_ADDR_VAR 0 12
73502: PUSH
73503: CALL_OW 44
73507: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73508: LD_VAR 0 12
73512: PPUSH
73513: LD_VAR 0 8
73517: PPUSH
73518: LD_INT 0
73520: PPUSH
73521: CALL 75441 0 3
// end ;
73525: GO 73462
73527: POP
73528: POP
// if apemans then
73529: LD_VAR 0 3
73533: IFFALSE 73656
// for i = 1 to apemans do
73535: LD_ADDR_VAR 0 11
73539: PUSH
73540: DOUBLE
73541: LD_INT 1
73543: DEC
73544: ST_TO_ADDR
73545: LD_VAR 0 3
73549: PUSH
73550: FOR_TO
73551: IFFALSE 73654
// begin hc_class = class_apeman ;
73553: LD_ADDR_OWVAR 28
73557: PUSH
73558: LD_INT 12
73560: ST_TO_ADDR
// hc_gallery =  ;
73561: LD_ADDR_OWVAR 33
73565: PUSH
73566: LD_STRING 
73568: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73569: LD_ADDR_OWVAR 35
73573: PUSH
73574: LD_INT 2
73576: NEG
73577: PPUSH
73578: LD_INT 2
73580: PPUSH
73581: CALL_OW 12
73585: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73586: LD_ADDR_OWVAR 31
73590: PUSH
73591: LD_INT 1
73593: PPUSH
73594: LD_INT 3
73596: PPUSH
73597: CALL_OW 12
73601: PUSH
73602: LD_INT 1
73604: PPUSH
73605: LD_INT 3
73607: PPUSH
73608: CALL_OW 12
73612: PUSH
73613: LD_INT 0
73615: PUSH
73616: LD_INT 0
73618: PUSH
73619: EMPTY
73620: LIST
73621: LIST
73622: LIST
73623: LIST
73624: ST_TO_ADDR
// animal := CreateHuman ;
73625: LD_ADDR_VAR 0 12
73629: PUSH
73630: CALL_OW 44
73634: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73635: LD_VAR 0 12
73639: PPUSH
73640: LD_VAR 0 8
73644: PPUSH
73645: LD_INT 0
73647: PPUSH
73648: CALL 75441 0 3
// end ;
73652: GO 73550
73654: POP
73655: POP
// if enchidnas then
73656: LD_VAR 0 4
73660: IFFALSE 73727
// for i = 1 to enchidnas do
73662: LD_ADDR_VAR 0 11
73666: PUSH
73667: DOUBLE
73668: LD_INT 1
73670: DEC
73671: ST_TO_ADDR
73672: LD_VAR 0 4
73676: PUSH
73677: FOR_TO
73678: IFFALSE 73725
// begin hc_class = 13 ;
73680: LD_ADDR_OWVAR 28
73684: PUSH
73685: LD_INT 13
73687: ST_TO_ADDR
// hc_gallery =  ;
73688: LD_ADDR_OWVAR 33
73692: PUSH
73693: LD_STRING 
73695: ST_TO_ADDR
// animal := CreateHuman ;
73696: LD_ADDR_VAR 0 12
73700: PUSH
73701: CALL_OW 44
73705: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73706: LD_VAR 0 12
73710: PPUSH
73711: LD_VAR 0 8
73715: PPUSH
73716: LD_INT 0
73718: PPUSH
73719: CALL 75441 0 3
// end ;
73723: GO 73677
73725: POP
73726: POP
// if fishes then
73727: LD_VAR 0 7
73731: IFFALSE 73798
// for i = 1 to fishes do
73733: LD_ADDR_VAR 0 11
73737: PUSH
73738: DOUBLE
73739: LD_INT 1
73741: DEC
73742: ST_TO_ADDR
73743: LD_VAR 0 7
73747: PUSH
73748: FOR_TO
73749: IFFALSE 73796
// begin hc_class = 20 ;
73751: LD_ADDR_OWVAR 28
73755: PUSH
73756: LD_INT 20
73758: ST_TO_ADDR
// hc_gallery =  ;
73759: LD_ADDR_OWVAR 33
73763: PUSH
73764: LD_STRING 
73766: ST_TO_ADDR
// animal := CreateHuman ;
73767: LD_ADDR_VAR 0 12
73771: PUSH
73772: CALL_OW 44
73776: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73777: LD_VAR 0 12
73781: PPUSH
73782: LD_VAR 0 9
73786: PPUSH
73787: LD_INT 0
73789: PPUSH
73790: CALL 75441 0 3
// end ;
73794: GO 73748
73796: POP
73797: POP
// end ;
73798: LD_VAR 0 10
73802: RET
// export function WantHeal ( sci , unit ) ; begin
73803: LD_INT 0
73805: PPUSH
// if GetTaskList ( sci ) > 0 then
73806: LD_VAR 0 1
73810: PPUSH
73811: CALL_OW 437
73815: PUSH
73816: LD_INT 0
73818: GREATER
73819: IFFALSE 73891
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73821: LD_VAR 0 1
73825: PPUSH
73826: CALL_OW 437
73830: PUSH
73831: LD_INT 1
73833: ARRAY
73834: PUSH
73835: LD_INT 1
73837: ARRAY
73838: PUSH
73839: LD_STRING l
73841: EQUAL
73842: IFFALSE 73869
73844: PUSH
73845: LD_VAR 0 1
73849: PPUSH
73850: CALL_OW 437
73854: PUSH
73855: LD_INT 1
73857: ARRAY
73858: PUSH
73859: LD_INT 4
73861: ARRAY
73862: PUSH
73863: LD_VAR 0 2
73867: EQUAL
73868: AND
73869: IFFALSE 73881
// result := true else
73871: LD_ADDR_VAR 0 3
73875: PUSH
73876: LD_INT 1
73878: ST_TO_ADDR
73879: GO 73889
// result := false ;
73881: LD_ADDR_VAR 0 3
73885: PUSH
73886: LD_INT 0
73888: ST_TO_ADDR
// end else
73889: GO 73899
// result := false ;
73891: LD_ADDR_VAR 0 3
73895: PUSH
73896: LD_INT 0
73898: ST_TO_ADDR
// end ;
73899: LD_VAR 0 3
73903: RET
// export function HealTarget ( sci ) ; begin
73904: LD_INT 0
73906: PPUSH
// if not sci then
73907: LD_VAR 0 1
73911: NOT
73912: IFFALSE 73916
// exit ;
73914: GO 73981
// result := 0 ;
73916: LD_ADDR_VAR 0 2
73920: PUSH
73921: LD_INT 0
73923: ST_TO_ADDR
// if GetTaskList ( sci ) then
73924: LD_VAR 0 1
73928: PPUSH
73929: CALL_OW 437
73933: IFFALSE 73981
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73935: LD_VAR 0 1
73939: PPUSH
73940: CALL_OW 437
73944: PUSH
73945: LD_INT 1
73947: ARRAY
73948: PUSH
73949: LD_INT 1
73951: ARRAY
73952: PUSH
73953: LD_STRING l
73955: EQUAL
73956: IFFALSE 73981
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73958: LD_ADDR_VAR 0 2
73962: PUSH
73963: LD_VAR 0 1
73967: PPUSH
73968: CALL_OW 437
73972: PUSH
73973: LD_INT 1
73975: ARRAY
73976: PUSH
73977: LD_INT 4
73979: ARRAY
73980: ST_TO_ADDR
// end ;
73981: LD_VAR 0 2
73985: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73986: LD_INT 0
73988: PPUSH
73989: PPUSH
73990: PPUSH
73991: PPUSH
// if not base_units then
73992: LD_VAR 0 1
73996: NOT
73997: IFFALSE 74001
// exit ;
73999: GO 74088
// result := false ;
74001: LD_ADDR_VAR 0 2
74005: PUSH
74006: LD_INT 0
74008: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74009: LD_ADDR_VAR 0 5
74013: PUSH
74014: LD_VAR 0 1
74018: PPUSH
74019: LD_INT 21
74021: PUSH
74022: LD_INT 3
74024: PUSH
74025: EMPTY
74026: LIST
74027: LIST
74028: PPUSH
74029: CALL_OW 72
74033: ST_TO_ADDR
// if not tmp then
74034: LD_VAR 0 5
74038: NOT
74039: IFFALSE 74043
// exit ;
74041: GO 74088
// for i in tmp do
74043: LD_ADDR_VAR 0 3
74047: PUSH
74048: LD_VAR 0 5
74052: PUSH
74053: FOR_IN
74054: IFFALSE 74086
// begin result := EnemyInRange ( i , 22 ) ;
74056: LD_ADDR_VAR 0 2
74060: PUSH
74061: LD_VAR 0 3
74065: PPUSH
74066: LD_INT 22
74068: PPUSH
74069: CALL 71503 0 2
74073: ST_TO_ADDR
// if result then
74074: LD_VAR 0 2
74078: IFFALSE 74084
// exit ;
74080: POP
74081: POP
74082: GO 74088
// end ;
74084: GO 74053
74086: POP
74087: POP
// end ;
74088: LD_VAR 0 2
74092: RET
// export function FilterByTag ( units , tag ) ; begin
74093: LD_INT 0
74095: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74096: LD_ADDR_VAR 0 3
74100: PUSH
74101: LD_VAR 0 1
74105: PPUSH
74106: LD_INT 120
74108: PUSH
74109: LD_VAR 0 2
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: PPUSH
74118: CALL_OW 72
74122: ST_TO_ADDR
// end ;
74123: LD_VAR 0 3
74127: RET
// export function IsDriver ( un ) ; begin
74128: LD_INT 0
74130: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74131: LD_ADDR_VAR 0 2
74135: PUSH
74136: LD_VAR 0 1
74140: PUSH
74141: LD_INT 55
74143: PUSH
74144: EMPTY
74145: LIST
74146: PPUSH
74147: CALL_OW 69
74151: IN
74152: ST_TO_ADDR
// end ;
74153: LD_VAR 0 2
74157: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74158: LD_INT 0
74160: PPUSH
74161: PPUSH
// list := [ ] ;
74162: LD_ADDR_VAR 0 5
74166: PUSH
74167: EMPTY
74168: ST_TO_ADDR
// case d of 0 :
74169: LD_VAR 0 3
74173: PUSH
74174: LD_INT 0
74176: DOUBLE
74177: EQUAL
74178: IFTRUE 74182
74180: GO 74315
74182: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74183: LD_ADDR_VAR 0 5
74187: PUSH
74188: LD_VAR 0 1
74192: PUSH
74193: LD_INT 4
74195: MINUS
74196: PUSH
74197: LD_VAR 0 2
74201: PUSH
74202: LD_INT 4
74204: MINUS
74205: PUSH
74206: LD_INT 2
74208: PUSH
74209: EMPTY
74210: LIST
74211: LIST
74212: LIST
74213: PUSH
74214: LD_VAR 0 1
74218: PUSH
74219: LD_INT 3
74221: MINUS
74222: PUSH
74223: LD_VAR 0 2
74227: PUSH
74228: LD_INT 1
74230: PUSH
74231: EMPTY
74232: LIST
74233: LIST
74234: LIST
74235: PUSH
74236: LD_VAR 0 1
74240: PUSH
74241: LD_INT 4
74243: PLUS
74244: PUSH
74245: LD_VAR 0 2
74249: PUSH
74250: LD_INT 4
74252: PUSH
74253: EMPTY
74254: LIST
74255: LIST
74256: LIST
74257: PUSH
74258: LD_VAR 0 1
74262: PUSH
74263: LD_INT 3
74265: PLUS
74266: PUSH
74267: LD_VAR 0 2
74271: PUSH
74272: LD_INT 3
74274: PLUS
74275: PUSH
74276: LD_INT 5
74278: PUSH
74279: EMPTY
74280: LIST
74281: LIST
74282: LIST
74283: PUSH
74284: LD_VAR 0 1
74288: PUSH
74289: LD_VAR 0 2
74293: PUSH
74294: LD_INT 4
74296: PLUS
74297: PUSH
74298: LD_INT 0
74300: PUSH
74301: EMPTY
74302: LIST
74303: LIST
74304: LIST
74305: PUSH
74306: EMPTY
74307: LIST
74308: LIST
74309: LIST
74310: LIST
74311: LIST
74312: ST_TO_ADDR
// end ; 1 :
74313: GO 75013
74315: LD_INT 1
74317: DOUBLE
74318: EQUAL
74319: IFTRUE 74323
74321: GO 74456
74323: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74324: LD_ADDR_VAR 0 5
74328: PUSH
74329: LD_VAR 0 1
74333: PUSH
74334: LD_VAR 0 2
74338: PUSH
74339: LD_INT 4
74341: MINUS
74342: PUSH
74343: LD_INT 3
74345: PUSH
74346: EMPTY
74347: LIST
74348: LIST
74349: LIST
74350: PUSH
74351: LD_VAR 0 1
74355: PUSH
74356: LD_INT 3
74358: MINUS
74359: PUSH
74360: LD_VAR 0 2
74364: PUSH
74365: LD_INT 3
74367: MINUS
74368: PUSH
74369: LD_INT 2
74371: PUSH
74372: EMPTY
74373: LIST
74374: LIST
74375: LIST
74376: PUSH
74377: LD_VAR 0 1
74381: PUSH
74382: LD_INT 4
74384: MINUS
74385: PUSH
74386: LD_VAR 0 2
74390: PUSH
74391: LD_INT 1
74393: PUSH
74394: EMPTY
74395: LIST
74396: LIST
74397: LIST
74398: PUSH
74399: LD_VAR 0 1
74403: PUSH
74404: LD_VAR 0 2
74408: PUSH
74409: LD_INT 3
74411: PLUS
74412: PUSH
74413: LD_INT 0
74415: PUSH
74416: EMPTY
74417: LIST
74418: LIST
74419: LIST
74420: PUSH
74421: LD_VAR 0 1
74425: PUSH
74426: LD_INT 4
74428: PLUS
74429: PUSH
74430: LD_VAR 0 2
74434: PUSH
74435: LD_INT 4
74437: PLUS
74438: PUSH
74439: LD_INT 5
74441: PUSH
74442: EMPTY
74443: LIST
74444: LIST
74445: LIST
74446: PUSH
74447: EMPTY
74448: LIST
74449: LIST
74450: LIST
74451: LIST
74452: LIST
74453: ST_TO_ADDR
// end ; 2 :
74454: GO 75013
74456: LD_INT 2
74458: DOUBLE
74459: EQUAL
74460: IFTRUE 74464
74462: GO 74593
74464: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74465: LD_ADDR_VAR 0 5
74469: PUSH
74470: LD_VAR 0 1
74474: PUSH
74475: LD_VAR 0 2
74479: PUSH
74480: LD_INT 3
74482: MINUS
74483: PUSH
74484: LD_INT 3
74486: PUSH
74487: EMPTY
74488: LIST
74489: LIST
74490: LIST
74491: PUSH
74492: LD_VAR 0 1
74496: PUSH
74497: LD_INT 4
74499: PLUS
74500: PUSH
74501: LD_VAR 0 2
74505: PUSH
74506: LD_INT 4
74508: PUSH
74509: EMPTY
74510: LIST
74511: LIST
74512: LIST
74513: PUSH
74514: LD_VAR 0 1
74518: PUSH
74519: LD_VAR 0 2
74523: PUSH
74524: LD_INT 4
74526: PLUS
74527: PUSH
74528: LD_INT 0
74530: PUSH
74531: EMPTY
74532: LIST
74533: LIST
74534: LIST
74535: PUSH
74536: LD_VAR 0 1
74540: PUSH
74541: LD_INT 3
74543: MINUS
74544: PUSH
74545: LD_VAR 0 2
74549: PUSH
74550: LD_INT 1
74552: PUSH
74553: EMPTY
74554: LIST
74555: LIST
74556: LIST
74557: PUSH
74558: LD_VAR 0 1
74562: PUSH
74563: LD_INT 4
74565: MINUS
74566: PUSH
74567: LD_VAR 0 2
74571: PUSH
74572: LD_INT 4
74574: MINUS
74575: PUSH
74576: LD_INT 2
74578: PUSH
74579: EMPTY
74580: LIST
74581: LIST
74582: LIST
74583: PUSH
74584: EMPTY
74585: LIST
74586: LIST
74587: LIST
74588: LIST
74589: LIST
74590: ST_TO_ADDR
// end ; 3 :
74591: GO 75013
74593: LD_INT 3
74595: DOUBLE
74596: EQUAL
74597: IFTRUE 74601
74599: GO 74734
74601: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74602: LD_ADDR_VAR 0 5
74606: PUSH
74607: LD_VAR 0 1
74611: PUSH
74612: LD_INT 3
74614: PLUS
74615: PUSH
74616: LD_VAR 0 2
74620: PUSH
74621: LD_INT 4
74623: PUSH
74624: EMPTY
74625: LIST
74626: LIST
74627: LIST
74628: PUSH
74629: LD_VAR 0 1
74633: PUSH
74634: LD_INT 4
74636: PLUS
74637: PUSH
74638: LD_VAR 0 2
74642: PUSH
74643: LD_INT 4
74645: PLUS
74646: PUSH
74647: LD_INT 5
74649: PUSH
74650: EMPTY
74651: LIST
74652: LIST
74653: LIST
74654: PUSH
74655: LD_VAR 0 1
74659: PUSH
74660: LD_INT 4
74662: MINUS
74663: PUSH
74664: LD_VAR 0 2
74668: PUSH
74669: LD_INT 1
74671: PUSH
74672: EMPTY
74673: LIST
74674: LIST
74675: LIST
74676: PUSH
74677: LD_VAR 0 1
74681: PUSH
74682: LD_VAR 0 2
74686: PUSH
74687: LD_INT 4
74689: MINUS
74690: PUSH
74691: LD_INT 3
74693: PUSH
74694: EMPTY
74695: LIST
74696: LIST
74697: LIST
74698: PUSH
74699: LD_VAR 0 1
74703: PUSH
74704: LD_INT 3
74706: MINUS
74707: PUSH
74708: LD_VAR 0 2
74712: PUSH
74713: LD_INT 3
74715: MINUS
74716: PUSH
74717: LD_INT 2
74719: PUSH
74720: EMPTY
74721: LIST
74722: LIST
74723: LIST
74724: PUSH
74725: EMPTY
74726: LIST
74727: LIST
74728: LIST
74729: LIST
74730: LIST
74731: ST_TO_ADDR
// end ; 4 :
74732: GO 75013
74734: LD_INT 4
74736: DOUBLE
74737: EQUAL
74738: IFTRUE 74742
74740: GO 74875
74742: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74743: LD_ADDR_VAR 0 5
74747: PUSH
74748: LD_VAR 0 1
74752: PUSH
74753: LD_VAR 0 2
74757: PUSH
74758: LD_INT 4
74760: PLUS
74761: PUSH
74762: LD_INT 0
74764: PUSH
74765: EMPTY
74766: LIST
74767: LIST
74768: LIST
74769: PUSH
74770: LD_VAR 0 1
74774: PUSH
74775: LD_INT 3
74777: PLUS
74778: PUSH
74779: LD_VAR 0 2
74783: PUSH
74784: LD_INT 3
74786: PLUS
74787: PUSH
74788: LD_INT 5
74790: PUSH
74791: EMPTY
74792: LIST
74793: LIST
74794: LIST
74795: PUSH
74796: LD_VAR 0 1
74800: PUSH
74801: LD_INT 4
74803: PLUS
74804: PUSH
74805: LD_VAR 0 2
74809: PUSH
74810: LD_INT 4
74812: PUSH
74813: EMPTY
74814: LIST
74815: LIST
74816: LIST
74817: PUSH
74818: LD_VAR 0 1
74822: PUSH
74823: LD_VAR 0 2
74827: PUSH
74828: LD_INT 3
74830: MINUS
74831: PUSH
74832: LD_INT 3
74834: PUSH
74835: EMPTY
74836: LIST
74837: LIST
74838: LIST
74839: PUSH
74840: LD_VAR 0 1
74844: PUSH
74845: LD_INT 4
74847: MINUS
74848: PUSH
74849: LD_VAR 0 2
74853: PUSH
74854: LD_INT 4
74856: MINUS
74857: PUSH
74858: LD_INT 2
74860: PUSH
74861: EMPTY
74862: LIST
74863: LIST
74864: LIST
74865: PUSH
74866: EMPTY
74867: LIST
74868: LIST
74869: LIST
74870: LIST
74871: LIST
74872: ST_TO_ADDR
// end ; 5 :
74873: GO 75013
74875: LD_INT 5
74877: DOUBLE
74878: EQUAL
74879: IFTRUE 74883
74881: GO 75012
74883: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74884: LD_ADDR_VAR 0 5
74888: PUSH
74889: LD_VAR 0 1
74893: PUSH
74894: LD_INT 4
74896: MINUS
74897: PUSH
74898: LD_VAR 0 2
74902: PUSH
74903: LD_INT 1
74905: PUSH
74906: EMPTY
74907: LIST
74908: LIST
74909: LIST
74910: PUSH
74911: LD_VAR 0 1
74915: PUSH
74916: LD_VAR 0 2
74920: PUSH
74921: LD_INT 4
74923: MINUS
74924: PUSH
74925: LD_INT 3
74927: PUSH
74928: EMPTY
74929: LIST
74930: LIST
74931: LIST
74932: PUSH
74933: LD_VAR 0 1
74937: PUSH
74938: LD_INT 4
74940: PLUS
74941: PUSH
74942: LD_VAR 0 2
74946: PUSH
74947: LD_INT 4
74949: PLUS
74950: PUSH
74951: LD_INT 5
74953: PUSH
74954: EMPTY
74955: LIST
74956: LIST
74957: LIST
74958: PUSH
74959: LD_VAR 0 1
74963: PUSH
74964: LD_INT 3
74966: PLUS
74967: PUSH
74968: LD_VAR 0 2
74972: PUSH
74973: LD_INT 4
74975: PUSH
74976: EMPTY
74977: LIST
74978: LIST
74979: LIST
74980: PUSH
74981: LD_VAR 0 1
74985: PUSH
74986: LD_VAR 0 2
74990: PUSH
74991: LD_INT 3
74993: PLUS
74994: PUSH
74995: LD_INT 0
74997: PUSH
74998: EMPTY
74999: LIST
75000: LIST
75001: LIST
75002: PUSH
75003: EMPTY
75004: LIST
75005: LIST
75006: LIST
75007: LIST
75008: LIST
75009: ST_TO_ADDR
// end ; end ;
75010: GO 75013
75012: POP
// result := list ;
75013: LD_ADDR_VAR 0 4
75017: PUSH
75018: LD_VAR 0 5
75022: ST_TO_ADDR
// end ;
75023: LD_VAR 0 4
75027: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75028: LD_INT 0
75030: PPUSH
75031: PPUSH
75032: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75033: LD_VAR 0 1
75037: NOT
75038: IFTRUE 75066
75040: PUSH
75041: LD_VAR 0 2
75045: PUSH
75046: LD_INT 1
75048: PUSH
75049: LD_INT 2
75051: PUSH
75052: LD_INT 3
75054: PUSH
75055: LD_INT 4
75057: PUSH
75058: EMPTY
75059: LIST
75060: LIST
75061: LIST
75062: LIST
75063: IN
75064: NOT
75065: OR
75066: IFFALSE 75070
// exit ;
75068: GO 75153
// tmp := [ ] ;
75070: LD_ADDR_VAR 0 5
75074: PUSH
75075: EMPTY
75076: ST_TO_ADDR
// for i in units do
75077: LD_ADDR_VAR 0 4
75081: PUSH
75082: LD_VAR 0 1
75086: PUSH
75087: FOR_IN
75088: IFFALSE 75122
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75090: LD_ADDR_VAR 0 5
75094: PUSH
75095: LD_VAR 0 5
75099: PPUSH
75100: LD_VAR 0 4
75104: PPUSH
75105: LD_VAR 0 2
75109: PPUSH
75110: CALL_OW 259
75114: PPUSH
75115: CALL 76548 0 2
75119: ST_TO_ADDR
75120: GO 75087
75122: POP
75123: POP
// if not tmp then
75124: LD_VAR 0 5
75128: NOT
75129: IFFALSE 75133
// exit ;
75131: GO 75153
// result := SortListByListDesc ( units , tmp ) ;
75133: LD_ADDR_VAR 0 3
75137: PUSH
75138: LD_VAR 0 1
75142: PPUSH
75143: LD_VAR 0 5
75147: PPUSH
75148: CALL_OW 77
75152: ST_TO_ADDR
// end ;
75153: LD_VAR 0 3
75157: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75158: LD_INT 0
75160: PPUSH
75161: PPUSH
75162: PPUSH
// result := false ;
75163: LD_ADDR_VAR 0 3
75167: PUSH
75168: LD_INT 0
75170: ST_TO_ADDR
// if not building then
75171: LD_VAR 0 2
75175: NOT
75176: IFFALSE 75180
// exit ;
75178: GO 75324
// x := GetX ( building ) ;
75180: LD_ADDR_VAR 0 4
75184: PUSH
75185: LD_VAR 0 2
75189: PPUSH
75190: CALL_OW 250
75194: ST_TO_ADDR
// y := GetY ( building ) ;
75195: LD_ADDR_VAR 0 5
75199: PUSH
75200: LD_VAR 0 2
75204: PPUSH
75205: CALL_OW 251
75209: ST_TO_ADDR
// if not x or not y then
75210: LD_VAR 0 4
75214: NOT
75215: IFTRUE 75224
75217: PUSH
75218: LD_VAR 0 5
75222: NOT
75223: OR
75224: IFFALSE 75228
// exit ;
75226: GO 75324
// if GetTaskList ( unit ) then
75228: LD_VAR 0 1
75232: PPUSH
75233: CALL_OW 437
75237: IFFALSE 75324
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75239: LD_STRING e
75241: PUSH
75242: LD_VAR 0 1
75246: PPUSH
75247: CALL_OW 437
75251: PUSH
75252: LD_INT 1
75254: ARRAY
75255: PUSH
75256: LD_INT 1
75258: ARRAY
75259: EQUAL
75260: IFFALSE 75287
75262: PUSH
75263: LD_VAR 0 4
75267: PUSH
75268: LD_VAR 0 1
75272: PPUSH
75273: CALL_OW 437
75277: PUSH
75278: LD_INT 1
75280: ARRAY
75281: PUSH
75282: LD_INT 2
75284: ARRAY
75285: EQUAL
75286: AND
75287: IFFALSE 75314
75289: PUSH
75290: LD_VAR 0 5
75294: PUSH
75295: LD_VAR 0 1
75299: PPUSH
75300: CALL_OW 437
75304: PUSH
75305: LD_INT 1
75307: ARRAY
75308: PUSH
75309: LD_INT 3
75311: ARRAY
75312: EQUAL
75313: AND
75314: IFFALSE 75324
// result := true end ;
75316: LD_ADDR_VAR 0 3
75320: PUSH
75321: LD_INT 1
75323: ST_TO_ADDR
// end ;
75324: LD_VAR 0 3
75328: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75329: LD_INT 0
75331: PPUSH
// result := false ;
75332: LD_ADDR_VAR 0 4
75336: PUSH
75337: LD_INT 0
75339: ST_TO_ADDR
// if GetTaskList ( unit ) then
75340: LD_VAR 0 1
75344: PPUSH
75345: CALL_OW 437
75349: IFFALSE 75436
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75351: LD_STRING M
75353: PUSH
75354: LD_VAR 0 1
75358: PPUSH
75359: CALL_OW 437
75363: PUSH
75364: LD_INT 1
75366: ARRAY
75367: PUSH
75368: LD_INT 1
75370: ARRAY
75371: EQUAL
75372: IFFALSE 75399
75374: PUSH
75375: LD_VAR 0 2
75379: PUSH
75380: LD_VAR 0 1
75384: PPUSH
75385: CALL_OW 437
75389: PUSH
75390: LD_INT 1
75392: ARRAY
75393: PUSH
75394: LD_INT 2
75396: ARRAY
75397: EQUAL
75398: AND
75399: IFFALSE 75426
75401: PUSH
75402: LD_VAR 0 3
75406: PUSH
75407: LD_VAR 0 1
75411: PPUSH
75412: CALL_OW 437
75416: PUSH
75417: LD_INT 1
75419: ARRAY
75420: PUSH
75421: LD_INT 3
75423: ARRAY
75424: EQUAL
75425: AND
75426: IFFALSE 75436
// result := true ;
75428: LD_ADDR_VAR 0 4
75432: PUSH
75433: LD_INT 1
75435: ST_TO_ADDR
// end ; end ;
75436: LD_VAR 0 4
75440: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75441: LD_INT 0
75443: PPUSH
75444: PPUSH
75445: PPUSH
75446: PPUSH
// if not unit or not area then
75447: LD_VAR 0 1
75451: NOT
75452: IFTRUE 75461
75454: PUSH
75455: LD_VAR 0 2
75459: NOT
75460: OR
75461: IFFALSE 75465
// exit ;
75463: GO 75641
// tmp := AreaToList ( area , i ) ;
75465: LD_ADDR_VAR 0 6
75469: PUSH
75470: LD_VAR 0 2
75474: PPUSH
75475: LD_VAR 0 5
75479: PPUSH
75480: CALL_OW 517
75484: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75485: LD_ADDR_VAR 0 5
75489: PUSH
75490: DOUBLE
75491: LD_INT 1
75493: DEC
75494: ST_TO_ADDR
75495: LD_VAR 0 6
75499: PUSH
75500: LD_INT 1
75502: ARRAY
75503: PUSH
75504: FOR_TO
75505: IFFALSE 75639
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75507: LD_ADDR_VAR 0 7
75511: PUSH
75512: LD_VAR 0 6
75516: PUSH
75517: LD_INT 1
75519: ARRAY
75520: PUSH
75521: LD_VAR 0 5
75525: ARRAY
75526: PUSH
75527: LD_VAR 0 6
75531: PUSH
75532: LD_INT 2
75534: ARRAY
75535: PUSH
75536: LD_VAR 0 5
75540: ARRAY
75541: PUSH
75542: EMPTY
75543: LIST
75544: LIST
75545: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
75546: LD_INT 92
75548: PUSH
75549: LD_VAR 0 7
75553: PUSH
75554: LD_INT 1
75556: ARRAY
75557: PUSH
75558: LD_VAR 0 7
75562: PUSH
75563: LD_INT 2
75565: ARRAY
75566: PUSH
75567: LD_INT 2
75569: PUSH
75570: EMPTY
75571: LIST
75572: LIST
75573: LIST
75574: LIST
75575: PPUSH
75576: CALL_OW 69
75580: PUSH
75581: LD_INT 0
75583: EQUAL
75584: IFFALSE 75637
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75586: LD_VAR 0 1
75590: PPUSH
75591: LD_VAR 0 7
75595: PUSH
75596: LD_INT 1
75598: ARRAY
75599: PPUSH
75600: LD_VAR 0 7
75604: PUSH
75605: LD_INT 2
75607: ARRAY
75608: PPUSH
75609: LD_VAR 0 3
75613: PPUSH
75614: CALL_OW 48
// result := IsPlaced ( unit ) ;
75618: LD_ADDR_VAR 0 4
75622: PUSH
75623: LD_VAR 0 1
75627: PPUSH
75628: CALL_OW 305
75632: ST_TO_ADDR
// exit ;
75633: POP
75634: POP
75635: GO 75641
// end ; end ;
75637: GO 75504
75639: POP
75640: POP
// end ;
75641: LD_VAR 0 4
75645: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75646: LD_INT 0
75648: PPUSH
75649: PPUSH
75650: PPUSH
// if not side or side > 8 then
75651: LD_VAR 0 1
75655: NOT
75656: IFTRUE 75668
75658: PUSH
75659: LD_VAR 0 1
75663: PUSH
75664: LD_INT 8
75666: GREATER
75667: OR
75668: IFFALSE 75672
// exit ;
75670: GO 75859
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75672: LD_ADDR_VAR 0 4
75676: PUSH
75677: LD_INT 22
75679: PUSH
75680: LD_VAR 0 1
75684: PUSH
75685: EMPTY
75686: LIST
75687: LIST
75688: PUSH
75689: LD_INT 21
75691: PUSH
75692: LD_INT 3
75694: PUSH
75695: EMPTY
75696: LIST
75697: LIST
75698: PUSH
75699: EMPTY
75700: LIST
75701: LIST
75702: PPUSH
75703: CALL_OW 69
75707: ST_TO_ADDR
// if not tmp then
75708: LD_VAR 0 4
75712: NOT
75713: IFFALSE 75717
// exit ;
75715: GO 75859
// enable_addtolog := true ;
75717: LD_ADDR_OWVAR 81
75721: PUSH
75722: LD_INT 1
75724: ST_TO_ADDR
// AddToLog ( [ ) ;
75725: LD_STRING [
75727: PPUSH
75728: CALL_OW 561
// for i in tmp do
75732: LD_ADDR_VAR 0 3
75736: PUSH
75737: LD_VAR 0 4
75741: PUSH
75742: FOR_IN
75743: IFFALSE 75850
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75745: LD_STRING [
75747: PUSH
75748: LD_VAR 0 3
75752: PPUSH
75753: CALL_OW 266
75757: STR
75758: PUSH
75759: LD_STRING , 
75761: STR
75762: PUSH
75763: LD_VAR 0 3
75767: PPUSH
75768: CALL_OW 250
75772: STR
75773: PUSH
75774: LD_STRING , 
75776: STR
75777: PUSH
75778: LD_VAR 0 3
75782: PPUSH
75783: CALL_OW 251
75787: STR
75788: PUSH
75789: LD_STRING , 
75791: STR
75792: PUSH
75793: LD_VAR 0 3
75797: PPUSH
75798: CALL_OW 254
75802: STR
75803: PUSH
75804: LD_STRING , 
75806: STR
75807: PUSH
75808: LD_VAR 0 3
75812: PPUSH
75813: LD_INT 1
75815: PPUSH
75816: CALL_OW 268
75820: STR
75821: PUSH
75822: LD_STRING , 
75824: STR
75825: PUSH
75826: LD_VAR 0 3
75830: PPUSH
75831: LD_INT 2
75833: PPUSH
75834: CALL_OW 268
75838: STR
75839: PUSH
75840: LD_STRING ],
75842: STR
75843: PPUSH
75844: CALL_OW 561
// end ;
75848: GO 75742
75850: POP
75851: POP
// AddToLog ( ]; ) ;
75852: LD_STRING ];
75854: PPUSH
75855: CALL_OW 561
// end ;
75859: LD_VAR 0 2
75863: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75864: LD_INT 0
75866: PPUSH
75867: PPUSH
75868: PPUSH
75869: PPUSH
75870: PPUSH
// if not area or not rate or not max then
75871: LD_VAR 0 1
75875: NOT
75876: IFTRUE 75885
75878: PUSH
75879: LD_VAR 0 2
75883: NOT
75884: OR
75885: IFTRUE 75894
75887: PUSH
75888: LD_VAR 0 4
75892: NOT
75893: OR
75894: IFFALSE 75898
// exit ;
75896: GO 76087
// while 1 do
75898: LD_INT 1
75900: IFFALSE 76087
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75902: LD_ADDR_VAR 0 9
75906: PUSH
75907: LD_VAR 0 1
75911: PPUSH
75912: LD_INT 1
75914: PPUSH
75915: CALL_OW 287
75919: PUSH
75920: LD_INT 10
75922: MUL
75923: ST_TO_ADDR
// r := rate / 10 ;
75924: LD_ADDR_VAR 0 7
75928: PUSH
75929: LD_VAR 0 2
75933: PUSH
75934: LD_INT 10
75936: DIVREAL
75937: ST_TO_ADDR
// time := 1 1$00 ;
75938: LD_ADDR_VAR 0 8
75942: PUSH
75943: LD_INT 2100
75945: ST_TO_ADDR
// if amount < min then
75946: LD_VAR 0 9
75950: PUSH
75951: LD_VAR 0 3
75955: LESS
75956: IFFALSE 75974
// r := r * 2 else
75958: LD_ADDR_VAR 0 7
75962: PUSH
75963: LD_VAR 0 7
75967: PUSH
75968: LD_INT 2
75970: MUL
75971: ST_TO_ADDR
75972: GO 76000
// if amount > max then
75974: LD_VAR 0 9
75978: PUSH
75979: LD_VAR 0 4
75983: GREATER
75984: IFFALSE 76000
// r := r / 2 ;
75986: LD_ADDR_VAR 0 7
75990: PUSH
75991: LD_VAR 0 7
75995: PUSH
75996: LD_INT 2
75998: DIVREAL
75999: ST_TO_ADDR
// time := time / r ;
76000: LD_ADDR_VAR 0 8
76004: PUSH
76005: LD_VAR 0 8
76009: PUSH
76010: LD_VAR 0 7
76014: DIVREAL
76015: ST_TO_ADDR
// if time < 0 then
76016: LD_VAR 0 8
76020: PUSH
76021: LD_INT 0
76023: LESS
76024: IFFALSE 76041
// time := time * - 1 ;
76026: LD_ADDR_VAR 0 8
76030: PUSH
76031: LD_VAR 0 8
76035: PUSH
76036: LD_INT 1
76038: NEG
76039: MUL
76040: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76041: LD_VAR 0 8
76045: PUSH
76046: LD_INT 35
76048: PPUSH
76049: LD_INT 875
76051: PPUSH
76052: CALL_OW 12
76056: PLUS
76057: PPUSH
76058: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76062: LD_INT 1
76064: PPUSH
76065: LD_INT 5
76067: PPUSH
76068: CALL_OW 12
76072: PPUSH
76073: LD_VAR 0 1
76077: PPUSH
76078: LD_INT 1
76080: PPUSH
76081: CALL_OW 55
// end ;
76085: GO 75898
// end ;
76087: LD_VAR 0 5
76091: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76092: LD_INT 0
76094: PPUSH
76095: PPUSH
76096: PPUSH
76097: PPUSH
76098: PPUSH
76099: PPUSH
76100: PPUSH
76101: PPUSH
// if not turrets or not factories then
76102: LD_VAR 0 1
76106: NOT
76107: IFTRUE 76116
76109: PUSH
76110: LD_VAR 0 2
76114: NOT
76115: OR
76116: IFFALSE 76120
// exit ;
76118: GO 76427
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76120: LD_ADDR_VAR 0 10
76124: PUSH
76125: LD_INT 5
76127: PUSH
76128: LD_INT 6
76130: PUSH
76131: EMPTY
76132: LIST
76133: LIST
76134: PUSH
76135: LD_INT 2
76137: PUSH
76138: LD_INT 4
76140: PUSH
76141: EMPTY
76142: LIST
76143: LIST
76144: PUSH
76145: LD_INT 3
76147: PUSH
76148: LD_INT 5
76150: PUSH
76151: EMPTY
76152: LIST
76153: LIST
76154: PUSH
76155: EMPTY
76156: LIST
76157: LIST
76158: LIST
76159: PUSH
76160: LD_INT 24
76162: PUSH
76163: LD_INT 25
76165: PUSH
76166: EMPTY
76167: LIST
76168: LIST
76169: PUSH
76170: LD_INT 23
76172: PUSH
76173: LD_INT 27
76175: PUSH
76176: EMPTY
76177: LIST
76178: LIST
76179: PUSH
76180: EMPTY
76181: LIST
76182: LIST
76183: PUSH
76184: LD_INT 42
76186: PUSH
76187: LD_INT 43
76189: PUSH
76190: EMPTY
76191: LIST
76192: LIST
76193: PUSH
76194: LD_INT 44
76196: PUSH
76197: LD_INT 46
76199: PUSH
76200: EMPTY
76201: LIST
76202: LIST
76203: PUSH
76204: LD_INT 45
76206: PUSH
76207: LD_INT 47
76209: PUSH
76210: EMPTY
76211: LIST
76212: LIST
76213: PUSH
76214: EMPTY
76215: LIST
76216: LIST
76217: LIST
76218: PUSH
76219: EMPTY
76220: LIST
76221: LIST
76222: LIST
76223: ST_TO_ADDR
// result := [ ] ;
76224: LD_ADDR_VAR 0 3
76228: PUSH
76229: EMPTY
76230: ST_TO_ADDR
// for i in turrets do
76231: LD_ADDR_VAR 0 4
76235: PUSH
76236: LD_VAR 0 1
76240: PUSH
76241: FOR_IN
76242: IFFALSE 76425
// begin nat := GetNation ( i ) ;
76244: LD_ADDR_VAR 0 7
76248: PUSH
76249: LD_VAR 0 4
76253: PPUSH
76254: CALL_OW 248
76258: ST_TO_ADDR
// weapon := 0 ;
76259: LD_ADDR_VAR 0 8
76263: PUSH
76264: LD_INT 0
76266: ST_TO_ADDR
// if not nat then
76267: LD_VAR 0 7
76271: NOT
76272: IFFALSE 76276
// continue ;
76274: GO 76241
// for j in list [ nat ] do
76276: LD_ADDR_VAR 0 5
76280: PUSH
76281: LD_VAR 0 10
76285: PUSH
76286: LD_VAR 0 7
76290: ARRAY
76291: PUSH
76292: FOR_IN
76293: IFFALSE 76334
// if GetBWeapon ( i ) = j [ 1 ] then
76295: LD_VAR 0 4
76299: PPUSH
76300: CALL_OW 269
76304: PUSH
76305: LD_VAR 0 5
76309: PUSH
76310: LD_INT 1
76312: ARRAY
76313: EQUAL
76314: IFFALSE 76332
// begin weapon := j [ 2 ] ;
76316: LD_ADDR_VAR 0 8
76320: PUSH
76321: LD_VAR 0 5
76325: PUSH
76326: LD_INT 2
76328: ARRAY
76329: ST_TO_ADDR
// break ;
76330: GO 76334
// end ;
76332: GO 76292
76334: POP
76335: POP
// if not weapon then
76336: LD_VAR 0 8
76340: NOT
76341: IFFALSE 76345
// continue ;
76343: GO 76241
// for k in factories do
76345: LD_ADDR_VAR 0 6
76349: PUSH
76350: LD_VAR 0 2
76354: PUSH
76355: FOR_IN
76356: IFFALSE 76421
// begin weapons := AvailableWeaponList ( k ) ;
76358: LD_ADDR_VAR 0 9
76362: PUSH
76363: LD_VAR 0 6
76367: PPUSH
76368: CALL_OW 478
76372: ST_TO_ADDR
// if not weapons then
76373: LD_VAR 0 9
76377: NOT
76378: IFFALSE 76382
// continue ;
76380: GO 76355
// if weapon in weapons then
76382: LD_VAR 0 8
76386: PUSH
76387: LD_VAR 0 9
76391: IN
76392: IFFALSE 76419
// begin result := [ i , weapon ] ;
76394: LD_ADDR_VAR 0 3
76398: PUSH
76399: LD_VAR 0 4
76403: PUSH
76404: LD_VAR 0 8
76408: PUSH
76409: EMPTY
76410: LIST
76411: LIST
76412: ST_TO_ADDR
// exit ;
76413: POP
76414: POP
76415: POP
76416: POP
76417: GO 76427
// end ; end ;
76419: GO 76355
76421: POP
76422: POP
// end ;
76423: GO 76241
76425: POP
76426: POP
// end ;
76427: LD_VAR 0 3
76431: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76432: LD_INT 0
76434: PPUSH
// if not side or side > 8 then
76435: LD_VAR 0 3
76439: NOT
76440: IFTRUE 76452
76442: PUSH
76443: LD_VAR 0 3
76447: PUSH
76448: LD_INT 8
76450: GREATER
76451: OR
76452: IFFALSE 76456
// exit ;
76454: GO 76515
// if not range then
76456: LD_VAR 0 4
76460: NOT
76461: IFFALSE 76472
// range := - 12 ;
76463: LD_ADDR_VAR 0 4
76467: PUSH
76468: LD_INT 12
76470: NEG
76471: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76472: LD_VAR 0 1
76476: PPUSH
76477: LD_VAR 0 2
76481: PPUSH
76482: LD_VAR 0 3
76486: PPUSH
76487: LD_VAR 0 4
76491: PPUSH
76492: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76496: LD_VAR 0 1
76500: PPUSH
76501: LD_VAR 0 2
76505: PPUSH
76506: LD_VAR 0 3
76510: PPUSH
76511: CALL_OW 331
// end ;
76515: LD_VAR 0 5
76519: RET
// export function Video ( mode ) ; begin
76520: LD_INT 0
76522: PPUSH
// ingame_video = mode ;
76523: LD_ADDR_OWVAR 52
76527: PUSH
76528: LD_VAR 0 1
76532: ST_TO_ADDR
// interface_hidden = mode ;
76533: LD_ADDR_OWVAR 54
76537: PUSH
76538: LD_VAR 0 1
76542: ST_TO_ADDR
// end ;
76543: LD_VAR 0 2
76547: RET
// export function Join ( array , element ) ; begin
76548: LD_INT 0
76550: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76551: LD_ADDR_VAR 0 3
76555: PUSH
76556: LD_VAR 0 1
76560: PPUSH
76561: LD_VAR 0 1
76565: PUSH
76566: LD_INT 1
76568: PLUS
76569: PPUSH
76570: LD_VAR 0 2
76574: PPUSH
76575: CALL_OW 1
76579: ST_TO_ADDR
// end ;
76580: LD_VAR 0 3
76584: RET
// export function JoinUnion ( array , element ) ; begin
76585: LD_INT 0
76587: PPUSH
// result := array union element ;
76588: LD_ADDR_VAR 0 3
76592: PUSH
76593: LD_VAR 0 1
76597: PUSH
76598: LD_VAR 0 2
76602: UNION
76603: ST_TO_ADDR
// end ;
76604: LD_VAR 0 3
76608: RET
// export function GetBehemoths ( side ) ; begin
76609: LD_INT 0
76611: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76612: LD_ADDR_VAR 0 2
76616: PUSH
76617: LD_INT 22
76619: PUSH
76620: LD_VAR 0 1
76624: PUSH
76625: EMPTY
76626: LIST
76627: LIST
76628: PUSH
76629: LD_INT 31
76631: PUSH
76632: LD_INT 25
76634: PUSH
76635: EMPTY
76636: LIST
76637: LIST
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: PPUSH
76643: CALL_OW 69
76647: ST_TO_ADDR
// end ;
76648: LD_VAR 0 2
76652: RET
// export function Shuffle ( array ) ; var i , index ; begin
76653: LD_INT 0
76655: PPUSH
76656: PPUSH
76657: PPUSH
// result := [ ] ;
76658: LD_ADDR_VAR 0 2
76662: PUSH
76663: EMPTY
76664: ST_TO_ADDR
// if not array then
76665: LD_VAR 0 1
76669: NOT
76670: IFFALSE 76674
// exit ;
76672: GO 76773
// Randomize ;
76674: CALL_OW 10
// for i = array downto 1 do
76678: LD_ADDR_VAR 0 3
76682: PUSH
76683: DOUBLE
76684: LD_VAR 0 1
76688: INC
76689: ST_TO_ADDR
76690: LD_INT 1
76692: PUSH
76693: FOR_DOWNTO
76694: IFFALSE 76771
// begin index := rand ( 1 , array ) ;
76696: LD_ADDR_VAR 0 4
76700: PUSH
76701: LD_INT 1
76703: PPUSH
76704: LD_VAR 0 1
76708: PPUSH
76709: CALL_OW 12
76713: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76714: LD_ADDR_VAR 0 2
76718: PUSH
76719: LD_VAR 0 2
76723: PPUSH
76724: LD_VAR 0 2
76728: PUSH
76729: LD_INT 1
76731: PLUS
76732: PPUSH
76733: LD_VAR 0 1
76737: PUSH
76738: LD_VAR 0 4
76742: ARRAY
76743: PPUSH
76744: CALL_OW 2
76748: ST_TO_ADDR
// array := Delete ( array , index ) ;
76749: LD_ADDR_VAR 0 1
76753: PUSH
76754: LD_VAR 0 1
76758: PPUSH
76759: LD_VAR 0 4
76763: PPUSH
76764: CALL_OW 3
76768: ST_TO_ADDR
// end ;
76769: GO 76693
76771: POP
76772: POP
// end ;
76773: LD_VAR 0 2
76777: RET
// export function GetBaseMaterials ( base ) ; begin
76778: LD_INT 0
76780: PPUSH
// result := [ 0 , 0 , 0 ] ;
76781: LD_ADDR_VAR 0 2
76785: PUSH
76786: LD_INT 0
76788: PUSH
76789: LD_INT 0
76791: PUSH
76792: LD_INT 0
76794: PUSH
76795: EMPTY
76796: LIST
76797: LIST
76798: LIST
76799: ST_TO_ADDR
// if not base then
76800: LD_VAR 0 1
76804: NOT
76805: IFFALSE 76809
// exit ;
76807: GO 76858
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76809: LD_ADDR_VAR 0 2
76813: PUSH
76814: LD_VAR 0 1
76818: PPUSH
76819: LD_INT 1
76821: PPUSH
76822: CALL_OW 275
76826: PUSH
76827: LD_VAR 0 1
76831: PPUSH
76832: LD_INT 2
76834: PPUSH
76835: CALL_OW 275
76839: PUSH
76840: LD_VAR 0 1
76844: PPUSH
76845: LD_INT 3
76847: PPUSH
76848: CALL_OW 275
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: LIST
76857: ST_TO_ADDR
// end ;
76858: LD_VAR 0 2
76862: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76863: LD_INT 0
76865: PPUSH
76866: PPUSH
// result := array ;
76867: LD_ADDR_VAR 0 3
76871: PUSH
76872: LD_VAR 0 1
76876: ST_TO_ADDR
// if size >= result then
76877: LD_VAR 0 2
76881: PUSH
76882: LD_VAR 0 3
76886: GREATEREQUAL
76887: IFFALSE 76891
// exit ;
76889: GO 76941
// if size then
76891: LD_VAR 0 2
76895: IFFALSE 76941
// for i := array downto size do
76897: LD_ADDR_VAR 0 4
76901: PUSH
76902: DOUBLE
76903: LD_VAR 0 1
76907: INC
76908: ST_TO_ADDR
76909: LD_VAR 0 2
76913: PUSH
76914: FOR_DOWNTO
76915: IFFALSE 76939
// result := Delete ( result , result ) ;
76917: LD_ADDR_VAR 0 3
76921: PUSH
76922: LD_VAR 0 3
76926: PPUSH
76927: LD_VAR 0 3
76931: PPUSH
76932: CALL_OW 3
76936: ST_TO_ADDR
76937: GO 76914
76939: POP
76940: POP
// end ;
76941: LD_VAR 0 3
76945: RET
// export function ComExit ( unit ) ; var tmp ; begin
76946: LD_INT 0
76948: PPUSH
76949: PPUSH
// if not IsInUnit ( unit ) then
76950: LD_VAR 0 1
76954: PPUSH
76955: CALL_OW 310
76959: NOT
76960: IFFALSE 76964
// exit ;
76962: GO 77024
// tmp := IsInUnit ( unit ) ;
76964: LD_ADDR_VAR 0 3
76968: PUSH
76969: LD_VAR 0 1
76973: PPUSH
76974: CALL_OW 310
76978: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76979: LD_VAR 0 3
76983: PPUSH
76984: CALL_OW 247
76988: PUSH
76989: LD_INT 2
76991: EQUAL
76992: IFFALSE 77005
// ComExitVehicle ( unit ) else
76994: LD_VAR 0 1
76998: PPUSH
76999: CALL_OW 121
77003: GO 77014
// ComExitBuilding ( unit ) ;
77005: LD_VAR 0 1
77009: PPUSH
77010: CALL_OW 122
// result := tmp ;
77014: LD_ADDR_VAR 0 2
77018: PUSH
77019: LD_VAR 0 3
77023: ST_TO_ADDR
// end ;
77024: LD_VAR 0 2
77028: RET
// export function ComExitAll ( units ) ; var i ; begin
77029: LD_INT 0
77031: PPUSH
77032: PPUSH
// if not units then
77033: LD_VAR 0 1
77037: NOT
77038: IFFALSE 77042
// exit ;
77040: GO 77068
// for i in units do
77042: LD_ADDR_VAR 0 3
77046: PUSH
77047: LD_VAR 0 1
77051: PUSH
77052: FOR_IN
77053: IFFALSE 77066
// ComExit ( i ) ;
77055: LD_VAR 0 3
77059: PPUSH
77060: CALL 76946 0 1
77064: GO 77052
77066: POP
77067: POP
// end ;
77068: LD_VAR 0 2
77072: RET
// export function ResetHc ; begin
77073: LD_INT 0
77075: PPUSH
// InitHc ;
77076: CALL_OW 19
// hc_importance := 0 ;
77080: LD_ADDR_OWVAR 32
77084: PUSH
77085: LD_INT 0
77087: ST_TO_ADDR
// end ;
77088: LD_VAR 0 1
77092: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77093: LD_INT 0
77095: PPUSH
77096: PPUSH
77097: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77098: LD_ADDR_VAR 0 6
77102: PUSH
77103: LD_VAR 0 1
77107: PUSH
77108: LD_VAR 0 3
77112: PLUS
77113: PUSH
77114: LD_INT 2
77116: DIV
77117: ST_TO_ADDR
// if _x < 0 then
77118: LD_VAR 0 6
77122: PUSH
77123: LD_INT 0
77125: LESS
77126: IFFALSE 77143
// _x := _x * - 1 ;
77128: LD_ADDR_VAR 0 6
77132: PUSH
77133: LD_VAR 0 6
77137: PUSH
77138: LD_INT 1
77140: NEG
77141: MUL
77142: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77143: LD_ADDR_VAR 0 7
77147: PUSH
77148: LD_VAR 0 2
77152: PUSH
77153: LD_VAR 0 4
77157: PLUS
77158: PUSH
77159: LD_INT 2
77161: DIV
77162: ST_TO_ADDR
// if _y < 0 then
77163: LD_VAR 0 7
77167: PUSH
77168: LD_INT 0
77170: LESS
77171: IFFALSE 77188
// _y := _y * - 1 ;
77173: LD_ADDR_VAR 0 7
77177: PUSH
77178: LD_VAR 0 7
77182: PUSH
77183: LD_INT 1
77185: NEG
77186: MUL
77187: ST_TO_ADDR
// result := [ _x , _y ] ;
77188: LD_ADDR_VAR 0 5
77192: PUSH
77193: LD_VAR 0 6
77197: PUSH
77198: LD_VAR 0 7
77202: PUSH
77203: EMPTY
77204: LIST
77205: LIST
77206: ST_TO_ADDR
// end ;
77207: LD_VAR 0 5
77211: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77212: LD_INT 0
77214: PPUSH
77215: PPUSH
77216: PPUSH
77217: PPUSH
// task := GetTaskList ( unit ) ;
77218: LD_ADDR_VAR 0 7
77222: PUSH
77223: LD_VAR 0 1
77227: PPUSH
77228: CALL_OW 437
77232: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77233: LD_VAR 0 7
77237: NOT
77238: IFFALSE 77257
77240: PUSH
77241: LD_VAR 0 1
77245: PPUSH
77246: LD_VAR 0 2
77250: PPUSH
77251: CALL_OW 308
77255: NOT
77256: AND
77257: IFFALSE 77261
// exit ;
77259: GO 77379
// if IsInArea ( unit , area ) then
77261: LD_VAR 0 1
77265: PPUSH
77266: LD_VAR 0 2
77270: PPUSH
77271: CALL_OW 308
77275: IFFALSE 77293
// begin ComMoveToArea ( unit , goAway ) ;
77277: LD_VAR 0 1
77281: PPUSH
77282: LD_VAR 0 3
77286: PPUSH
77287: CALL_OW 113
// exit ;
77291: GO 77379
// end ; if task [ 1 ] [ 1 ] <> M then
77293: LD_VAR 0 7
77297: PUSH
77298: LD_INT 1
77300: ARRAY
77301: PUSH
77302: LD_INT 1
77304: ARRAY
77305: PUSH
77306: LD_STRING M
77308: NONEQUAL
77309: IFFALSE 77313
// exit ;
77311: GO 77379
// x := task [ 1 ] [ 2 ] ;
77313: LD_ADDR_VAR 0 5
77317: PUSH
77318: LD_VAR 0 7
77322: PUSH
77323: LD_INT 1
77325: ARRAY
77326: PUSH
77327: LD_INT 2
77329: ARRAY
77330: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77331: LD_ADDR_VAR 0 6
77335: PUSH
77336: LD_VAR 0 7
77340: PUSH
77341: LD_INT 1
77343: ARRAY
77344: PUSH
77345: LD_INT 3
77347: ARRAY
77348: ST_TO_ADDR
// if InArea ( x , y , area ) then
77349: LD_VAR 0 5
77353: PPUSH
77354: LD_VAR 0 6
77358: PPUSH
77359: LD_VAR 0 2
77363: PPUSH
77364: CALL_OW 309
77368: IFFALSE 77379
// ComStop ( unit ) ;
77370: LD_VAR 0 1
77374: PPUSH
77375: CALL_OW 141
// end ;
77379: LD_VAR 0 4
77383: RET
// export function Abs ( value ) ; begin
77384: LD_INT 0
77386: PPUSH
// result := value ;
77387: LD_ADDR_VAR 0 2
77391: PUSH
77392: LD_VAR 0 1
77396: ST_TO_ADDR
// if value < 0 then
77397: LD_VAR 0 1
77401: PUSH
77402: LD_INT 0
77404: LESS
77405: IFFALSE 77422
// result := value * - 1 ;
77407: LD_ADDR_VAR 0 2
77411: PUSH
77412: LD_VAR 0 1
77416: PUSH
77417: LD_INT 1
77419: NEG
77420: MUL
77421: ST_TO_ADDR
// end ;
77422: LD_VAR 0 2
77426: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77427: LD_INT 0
77429: PPUSH
77430: PPUSH
77431: PPUSH
77432: PPUSH
77433: PPUSH
77434: PPUSH
77435: PPUSH
77436: PPUSH
// if not unit or not building then
77437: LD_VAR 0 1
77441: NOT
77442: IFTRUE 77451
77444: PUSH
77445: LD_VAR 0 2
77449: NOT
77450: OR
77451: IFFALSE 77455
// exit ;
77453: GO 77683
// x := GetX ( building ) ;
77455: LD_ADDR_VAR 0 4
77459: PUSH
77460: LD_VAR 0 2
77464: PPUSH
77465: CALL_OW 250
77469: ST_TO_ADDR
// y := GetY ( building ) ;
77470: LD_ADDR_VAR 0 6
77474: PUSH
77475: LD_VAR 0 2
77479: PPUSH
77480: CALL_OW 251
77484: ST_TO_ADDR
// d := GetDir ( building ) ;
77485: LD_ADDR_VAR 0 8
77489: PUSH
77490: LD_VAR 0 2
77494: PPUSH
77495: CALL_OW 254
77499: ST_TO_ADDR
// r := 4 ;
77500: LD_ADDR_VAR 0 9
77504: PUSH
77505: LD_INT 4
77507: ST_TO_ADDR
// for i := 1 to 5 do
77508: LD_ADDR_VAR 0 10
77512: PUSH
77513: DOUBLE
77514: LD_INT 1
77516: DEC
77517: ST_TO_ADDR
77518: LD_INT 5
77520: PUSH
77521: FOR_TO
77522: IFFALSE 77681
// begin _x := ShiftX ( x , d , r + i ) ;
77524: LD_ADDR_VAR 0 5
77528: PUSH
77529: LD_VAR 0 4
77533: PPUSH
77534: LD_VAR 0 8
77538: PPUSH
77539: LD_VAR 0 9
77543: PUSH
77544: LD_VAR 0 10
77548: PLUS
77549: PPUSH
77550: CALL_OW 272
77554: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77555: LD_ADDR_VAR 0 7
77559: PUSH
77560: LD_VAR 0 6
77564: PPUSH
77565: LD_VAR 0 8
77569: PPUSH
77570: LD_VAR 0 9
77574: PUSH
77575: LD_VAR 0 10
77579: PLUS
77580: PPUSH
77581: CALL_OW 273
77585: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77586: LD_VAR 0 5
77590: PPUSH
77591: LD_VAR 0 7
77595: PPUSH
77596: CALL_OW 488
77600: IFFALSE 77635
77602: PUSH
77603: LD_VAR 0 5
77607: PPUSH
77608: LD_VAR 0 7
77612: PPUSH
77613: CALL_OW 428
77617: PPUSH
77618: CALL_OW 247
77622: PUSH
77623: LD_INT 3
77625: PUSH
77626: LD_INT 2
77628: PUSH
77629: EMPTY
77630: LIST
77631: LIST
77632: IN
77633: NOT
77634: AND
77635: IFFALSE 77679
// begin ComMoveXY ( unit , _x , _y ) ;
77637: LD_VAR 0 1
77641: PPUSH
77642: LD_VAR 0 5
77646: PPUSH
77647: LD_VAR 0 7
77651: PPUSH
77652: CALL_OW 111
// result := [ _x , _y ] ;
77656: LD_ADDR_VAR 0 3
77660: PUSH
77661: LD_VAR 0 5
77665: PUSH
77666: LD_VAR 0 7
77670: PUSH
77671: EMPTY
77672: LIST
77673: LIST
77674: ST_TO_ADDR
// exit ;
77675: POP
77676: POP
77677: GO 77683
// end ; end ;
77679: GO 77521
77681: POP
77682: POP
// end ;
77683: LD_VAR 0 3
77687: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77688: LD_INT 0
77690: PPUSH
77691: PPUSH
77692: PPUSH
// result := 0 ;
77693: LD_ADDR_VAR 0 3
77697: PUSH
77698: LD_INT 0
77700: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77701: LD_VAR 0 1
77705: PUSH
77706: LD_INT 0
77708: LESS
77709: IFTRUE 77721
77711: PUSH
77712: LD_VAR 0 1
77716: PUSH
77717: LD_INT 8
77719: GREATER
77720: OR
77721: IFTRUE 77733
77723: PUSH
77724: LD_VAR 0 2
77728: PUSH
77729: LD_INT 0
77731: LESS
77732: OR
77733: IFTRUE 77745
77735: PUSH
77736: LD_VAR 0 2
77740: PUSH
77741: LD_INT 8
77743: GREATER
77744: OR
77745: IFFALSE 77749
// exit ;
77747: GO 77824
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77749: LD_ADDR_VAR 0 4
77753: PUSH
77754: LD_INT 22
77756: PUSH
77757: LD_VAR 0 2
77761: PUSH
77762: EMPTY
77763: LIST
77764: LIST
77765: PPUSH
77766: CALL_OW 69
77770: PUSH
77771: FOR_IN
77772: IFFALSE 77822
// begin un := UnitShoot ( i ) ;
77774: LD_ADDR_VAR 0 5
77778: PUSH
77779: LD_VAR 0 4
77783: PPUSH
77784: CALL_OW 504
77788: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77789: LD_VAR 0 5
77793: PPUSH
77794: CALL_OW 255
77798: PUSH
77799: LD_VAR 0 1
77803: EQUAL
77804: IFFALSE 77820
// begin result := un ;
77806: LD_ADDR_VAR 0 3
77810: PUSH
77811: LD_VAR 0 5
77815: ST_TO_ADDR
// exit ;
77816: POP
77817: POP
77818: GO 77824
// end ; end ;
77820: GO 77771
77822: POP
77823: POP
// end ;
77824: LD_VAR 0 3
77828: RET
// export function GetCargoBay ( units ) ; begin
77829: LD_INT 0
77831: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77832: LD_ADDR_VAR 0 2
77836: PUSH
77837: LD_VAR 0 1
77841: PPUSH
77842: LD_INT 2
77844: PUSH
77845: LD_INT 34
77847: PUSH
77848: LD_INT 12
77850: PUSH
77851: EMPTY
77852: LIST
77853: LIST
77854: PUSH
77855: LD_INT 34
77857: PUSH
77858: LD_INT 51
77860: PUSH
77861: EMPTY
77862: LIST
77863: LIST
77864: PUSH
77865: LD_INT 34
77867: PUSH
77868: LD_INT 32
77870: PUSH
77871: EMPTY
77872: LIST
77873: LIST
77874: PUSH
77875: LD_INT 34
77877: PUSH
77878: LD_INT 89
77880: PUSH
77881: EMPTY
77882: LIST
77883: LIST
77884: PUSH
77885: EMPTY
77886: LIST
77887: LIST
77888: LIST
77889: LIST
77890: LIST
77891: PPUSH
77892: CALL_OW 72
77896: ST_TO_ADDR
// end ;
77897: LD_VAR 0 2
77901: RET
// export function Negate ( value ) ; begin
77902: LD_INT 0
77904: PPUSH
// result := not value ;
77905: LD_ADDR_VAR 0 2
77909: PUSH
77910: LD_VAR 0 1
77914: NOT
77915: ST_TO_ADDR
// end ;
77916: LD_VAR 0 2
77920: RET
// export function Inc ( value ) ; begin
77921: LD_INT 0
77923: PPUSH
// result := value + 1 ;
77924: LD_ADDR_VAR 0 2
77928: PUSH
77929: LD_VAR 0 1
77933: PUSH
77934: LD_INT 1
77936: PLUS
77937: ST_TO_ADDR
// end ;
77938: LD_VAR 0 2
77942: RET
// export function Dec ( value ) ; begin
77943: LD_INT 0
77945: PPUSH
// result := value - 1 ;
77946: LD_ADDR_VAR 0 2
77950: PUSH
77951: LD_VAR 0 1
77955: PUSH
77956: LD_INT 1
77958: MINUS
77959: ST_TO_ADDR
// end ;
77960: LD_VAR 0 2
77964: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77965: LD_INT 0
77967: PPUSH
77968: PPUSH
77969: PPUSH
77970: PPUSH
77971: PPUSH
77972: PPUSH
77973: PPUSH
77974: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77975: LD_VAR 0 1
77979: PPUSH
77980: LD_VAR 0 2
77984: PPUSH
77985: CALL_OW 488
77989: NOT
77990: IFTRUE 78009
77992: PUSH
77993: LD_VAR 0 3
77997: PPUSH
77998: LD_VAR 0 4
78002: PPUSH
78003: CALL_OW 488
78007: NOT
78008: OR
78009: IFFALSE 78022
// begin result := - 1 ;
78011: LD_ADDR_VAR 0 5
78015: PUSH
78016: LD_INT 1
78018: NEG
78019: ST_TO_ADDR
// exit ;
78020: GO 78257
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78022: LD_ADDR_VAR 0 12
78026: PUSH
78027: LD_VAR 0 1
78031: PPUSH
78032: LD_VAR 0 2
78036: PPUSH
78037: LD_VAR 0 3
78041: PPUSH
78042: LD_VAR 0 4
78046: PPUSH
78047: CALL 77093 0 4
78051: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78052: LD_ADDR_VAR 0 11
78056: PUSH
78057: LD_VAR 0 1
78061: PPUSH
78062: LD_VAR 0 2
78066: PPUSH
78067: LD_VAR 0 12
78071: PUSH
78072: LD_INT 1
78074: ARRAY
78075: PPUSH
78076: LD_VAR 0 12
78080: PUSH
78081: LD_INT 2
78083: ARRAY
78084: PPUSH
78085: CALL_OW 298
78089: ST_TO_ADDR
// distance := 9999 ;
78090: LD_ADDR_VAR 0 10
78094: PUSH
78095: LD_INT 9999
78097: ST_TO_ADDR
// for i := 0 to 5 do
78098: LD_ADDR_VAR 0 6
78102: PUSH
78103: DOUBLE
78104: LD_INT 0
78106: DEC
78107: ST_TO_ADDR
78108: LD_INT 5
78110: PUSH
78111: FOR_TO
78112: IFFALSE 78255
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78114: LD_ADDR_VAR 0 7
78118: PUSH
78119: LD_VAR 0 1
78123: PPUSH
78124: LD_VAR 0 6
78128: PPUSH
78129: LD_VAR 0 11
78133: PPUSH
78134: CALL_OW 272
78138: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78139: LD_ADDR_VAR 0 8
78143: PUSH
78144: LD_VAR 0 2
78148: PPUSH
78149: LD_VAR 0 6
78153: PPUSH
78154: LD_VAR 0 11
78158: PPUSH
78159: CALL_OW 273
78163: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78164: LD_VAR 0 7
78168: PPUSH
78169: LD_VAR 0 8
78173: PPUSH
78174: CALL_OW 488
78178: NOT
78179: IFFALSE 78183
// continue ;
78181: GO 78111
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78183: LD_ADDR_VAR 0 9
78187: PUSH
78188: LD_VAR 0 12
78192: PUSH
78193: LD_INT 1
78195: ARRAY
78196: PPUSH
78197: LD_VAR 0 12
78201: PUSH
78202: LD_INT 2
78204: ARRAY
78205: PPUSH
78206: LD_VAR 0 7
78210: PPUSH
78211: LD_VAR 0 8
78215: PPUSH
78216: CALL_OW 298
78220: ST_TO_ADDR
// if tmp < distance then
78221: LD_VAR 0 9
78225: PUSH
78226: LD_VAR 0 10
78230: LESS
78231: IFFALSE 78253
// begin result := i ;
78233: LD_ADDR_VAR 0 5
78237: PUSH
78238: LD_VAR 0 6
78242: ST_TO_ADDR
// distance := tmp ;
78243: LD_ADDR_VAR 0 10
78247: PUSH
78248: LD_VAR 0 9
78252: ST_TO_ADDR
// end ; end ;
78253: GO 78111
78255: POP
78256: POP
// end ;
78257: LD_VAR 0 5
78261: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78262: LD_INT 0
78264: PPUSH
78265: PPUSH
// if not driver or not IsInUnit ( driver ) then
78266: LD_VAR 0 1
78270: NOT
78271: IFTRUE 78285
78273: PUSH
78274: LD_VAR 0 1
78278: PPUSH
78279: CALL_OW 310
78283: NOT
78284: OR
78285: IFFALSE 78289
// exit ;
78287: GO 78379
// vehicle := IsInUnit ( driver ) ;
78289: LD_ADDR_VAR 0 3
78293: PUSH
78294: LD_VAR 0 1
78298: PPUSH
78299: CALL_OW 310
78303: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78304: LD_VAR 0 1
78308: PPUSH
78309: LD_STRING \
78311: PUSH
78312: LD_INT 0
78314: PUSH
78315: LD_INT 0
78317: PUSH
78318: LD_INT 0
78320: PUSH
78321: LD_INT 0
78323: PUSH
78324: LD_INT 0
78326: PUSH
78327: LD_INT 0
78329: PUSH
78330: EMPTY
78331: LIST
78332: LIST
78333: LIST
78334: LIST
78335: LIST
78336: LIST
78337: LIST
78338: PUSH
78339: LD_STRING E
78341: PUSH
78342: LD_INT 0
78344: PUSH
78345: LD_INT 0
78347: PUSH
78348: LD_VAR 0 3
78352: PUSH
78353: LD_INT 0
78355: PUSH
78356: LD_INT 0
78358: PUSH
78359: LD_INT 0
78361: PUSH
78362: EMPTY
78363: LIST
78364: LIST
78365: LIST
78366: LIST
78367: LIST
78368: LIST
78369: LIST
78370: PUSH
78371: EMPTY
78372: LIST
78373: LIST
78374: PPUSH
78375: CALL_OW 446
// end ;
78379: LD_VAR 0 2
78383: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78384: LD_INT 0
78386: PPUSH
78387: PPUSH
// if not driver or not IsInUnit ( driver ) then
78388: LD_VAR 0 1
78392: NOT
78393: IFTRUE 78407
78395: PUSH
78396: LD_VAR 0 1
78400: PPUSH
78401: CALL_OW 310
78405: NOT
78406: OR
78407: IFFALSE 78411
// exit ;
78409: GO 78501
// vehicle := IsInUnit ( driver ) ;
78411: LD_ADDR_VAR 0 3
78415: PUSH
78416: LD_VAR 0 1
78420: PPUSH
78421: CALL_OW 310
78425: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78426: LD_VAR 0 1
78430: PPUSH
78431: LD_STRING \
78433: PUSH
78434: LD_INT 0
78436: PUSH
78437: LD_INT 0
78439: PUSH
78440: LD_INT 0
78442: PUSH
78443: LD_INT 0
78445: PUSH
78446: LD_INT 0
78448: PUSH
78449: LD_INT 0
78451: PUSH
78452: EMPTY
78453: LIST
78454: LIST
78455: LIST
78456: LIST
78457: LIST
78458: LIST
78459: LIST
78460: PUSH
78461: LD_STRING E
78463: PUSH
78464: LD_INT 0
78466: PUSH
78467: LD_INT 0
78469: PUSH
78470: LD_VAR 0 3
78474: PUSH
78475: LD_INT 0
78477: PUSH
78478: LD_INT 0
78480: PUSH
78481: LD_INT 0
78483: PUSH
78484: EMPTY
78485: LIST
78486: LIST
78487: LIST
78488: LIST
78489: LIST
78490: LIST
78491: LIST
78492: PUSH
78493: EMPTY
78494: LIST
78495: LIST
78496: PPUSH
78497: CALL_OW 447
// end ;
78501: LD_VAR 0 2
78505: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78506: LD_INT 0
78508: PPUSH
78509: PPUSH
78510: PPUSH
// tmp := [ ] ;
78511: LD_ADDR_VAR 0 5
78515: PUSH
78516: EMPTY
78517: ST_TO_ADDR
// for i in units do
78518: LD_ADDR_VAR 0 4
78522: PUSH
78523: LD_VAR 0 1
78527: PUSH
78528: FOR_IN
78529: IFFALSE 78567
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78531: LD_ADDR_VAR 0 5
78535: PUSH
78536: LD_VAR 0 5
78540: PPUSH
78541: LD_VAR 0 5
78545: PUSH
78546: LD_INT 1
78548: PLUS
78549: PPUSH
78550: LD_VAR 0 4
78554: PPUSH
78555: CALL_OW 256
78559: PPUSH
78560: CALL_OW 2
78564: ST_TO_ADDR
78565: GO 78528
78567: POP
78568: POP
// if not tmp then
78569: LD_VAR 0 5
78573: NOT
78574: IFFALSE 78578
// exit ;
78576: GO 78626
// if asc then
78578: LD_VAR 0 2
78582: IFFALSE 78606
// result := SortListByListAsc ( units , tmp ) else
78584: LD_ADDR_VAR 0 3
78588: PUSH
78589: LD_VAR 0 1
78593: PPUSH
78594: LD_VAR 0 5
78598: PPUSH
78599: CALL_OW 76
78603: ST_TO_ADDR
78604: GO 78626
// result := SortListByListDesc ( units , tmp ) ;
78606: LD_ADDR_VAR 0 3
78610: PUSH
78611: LD_VAR 0 1
78615: PPUSH
78616: LD_VAR 0 5
78620: PPUSH
78621: CALL_OW 77
78625: ST_TO_ADDR
// end ;
78626: LD_VAR 0 3
78630: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78631: LD_INT 0
78633: PPUSH
78634: PPUSH
// task := GetTaskList ( mech ) ;
78635: LD_ADDR_VAR 0 4
78639: PUSH
78640: LD_VAR 0 1
78644: PPUSH
78645: CALL_OW 437
78649: ST_TO_ADDR
// if not task then
78650: LD_VAR 0 4
78654: NOT
78655: IFFALSE 78659
// exit ;
78657: GO 78703
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78659: LD_ADDR_VAR 0 3
78663: PUSH
78664: LD_VAR 0 4
78668: PUSH
78669: LD_INT 1
78671: ARRAY
78672: PUSH
78673: LD_INT 1
78675: ARRAY
78676: PUSH
78677: LD_STRING r
78679: EQUAL
78680: IFFALSE 78702
78682: PUSH
78683: LD_VAR 0 4
78687: PUSH
78688: LD_INT 1
78690: ARRAY
78691: PUSH
78692: LD_INT 4
78694: ARRAY
78695: PUSH
78696: LD_VAR 0 2
78700: EQUAL
78701: AND
78702: ST_TO_ADDR
// end ;
78703: LD_VAR 0 3
78707: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78708: LD_INT 0
78710: PPUSH
// SetDir ( unit , d ) ;
78711: LD_VAR 0 1
78715: PPUSH
78716: LD_VAR 0 4
78720: PPUSH
78721: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
78725: LD_ADDR_VAR 0 6
78729: PUSH
78730: LD_VAR 0 1
78734: PPUSH
78735: LD_VAR 0 2
78739: PPUSH
78740: LD_VAR 0 3
78744: PPUSH
78745: LD_VAR 0 5
78749: PPUSH
78750: CALL_OW 48
78754: ST_TO_ADDR
// end ;
78755: LD_VAR 0 6
78759: RET
// export function ToNaturalNumber ( number ) ; begin
78760: LD_INT 0
78762: PPUSH
// result := number div 1 ;
78763: LD_ADDR_VAR 0 2
78767: PUSH
78768: LD_VAR 0 1
78772: PUSH
78773: LD_INT 1
78775: DIV
78776: ST_TO_ADDR
// if number < 0 then
78777: LD_VAR 0 1
78781: PUSH
78782: LD_INT 0
78784: LESS
78785: IFFALSE 78795
// result := 0 ;
78787: LD_ADDR_VAR 0 2
78791: PUSH
78792: LD_INT 0
78794: ST_TO_ADDR
// end ;
78795: LD_VAR 0 2
78799: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
78800: LD_INT 0
78802: PPUSH
78803: PPUSH
78804: PPUSH
// if not buildings then
78805: LD_VAR 0 1
78809: NOT
78810: IFFALSE 78814
// exit ;
78812: GO 78929
// tmp := [ ] ;
78814: LD_ADDR_VAR 0 5
78818: PUSH
78819: EMPTY
78820: ST_TO_ADDR
// for b in buildings do
78821: LD_ADDR_VAR 0 4
78825: PUSH
78826: LD_VAR 0 1
78830: PUSH
78831: FOR_IN
78832: IFFALSE 78870
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
78834: LD_ADDR_VAR 0 5
78838: PUSH
78839: LD_VAR 0 5
78843: PPUSH
78844: LD_VAR 0 5
78848: PUSH
78849: LD_INT 1
78851: PLUS
78852: PPUSH
78853: LD_VAR 0 4
78857: PPUSH
78858: CALL_OW 266
78862: PPUSH
78863: CALL_OW 1
78867: ST_TO_ADDR
78868: GO 78831
78870: POP
78871: POP
// if not tmp then
78872: LD_VAR 0 5
78876: NOT
78877: IFFALSE 78881
// exit ;
78879: GO 78929
// if asc then
78881: LD_VAR 0 2
78885: IFFALSE 78909
// result := SortListByListAsc ( buildings , tmp ) else
78887: LD_ADDR_VAR 0 3
78891: PUSH
78892: LD_VAR 0 1
78896: PPUSH
78897: LD_VAR 0 5
78901: PPUSH
78902: CALL_OW 76
78906: ST_TO_ADDR
78907: GO 78929
// result := SortListByListDesc ( buildings , tmp ) ;
78909: LD_ADDR_VAR 0 3
78913: PUSH
78914: LD_VAR 0 1
78918: PPUSH
78919: LD_VAR 0 5
78923: PPUSH
78924: CALL_OW 77
78928: ST_TO_ADDR
// end ;
78929: LD_VAR 0 3
78933: RET
// export function SortByClass ( units , class ) ; var un ; begin
78934: LD_INT 0
78936: PPUSH
78937: PPUSH
// if not units or not class then
78938: LD_VAR 0 1
78942: NOT
78943: IFTRUE 78952
78945: PUSH
78946: LD_VAR 0 2
78950: NOT
78951: OR
78952: IFFALSE 78956
// exit ;
78954: GO 79051
// result := [ ] ;
78956: LD_ADDR_VAR 0 3
78960: PUSH
78961: EMPTY
78962: ST_TO_ADDR
// for un in units do
78963: LD_ADDR_VAR 0 4
78967: PUSH
78968: LD_VAR 0 1
78972: PUSH
78973: FOR_IN
78974: IFFALSE 79049
// if GetClass ( un ) = class then
78976: LD_VAR 0 4
78980: PPUSH
78981: CALL_OW 257
78985: PUSH
78986: LD_VAR 0 2
78990: EQUAL
78991: IFFALSE 79018
// result := Insert ( result , 1 , un ) else
78993: LD_ADDR_VAR 0 3
78997: PUSH
78998: LD_VAR 0 3
79002: PPUSH
79003: LD_INT 1
79005: PPUSH
79006: LD_VAR 0 4
79010: PPUSH
79011: CALL_OW 2
79015: ST_TO_ADDR
79016: GO 79047
// result := Replace ( result , result + 1 , un ) ;
79018: LD_ADDR_VAR 0 3
79022: PUSH
79023: LD_VAR 0 3
79027: PPUSH
79028: LD_VAR 0 3
79032: PUSH
79033: LD_INT 1
79035: PLUS
79036: PPUSH
79037: LD_VAR 0 4
79041: PPUSH
79042: CALL_OW 1
79046: ST_TO_ADDR
79047: GO 78973
79049: POP
79050: POP
// end ;
79051: LD_VAR 0 3
79055: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79056: LD_INT 0
79058: PPUSH
79059: PPUSH
79060: PPUSH
79061: PPUSH
79062: PPUSH
79063: PPUSH
79064: PPUSH
// result := [ ] ;
79065: LD_ADDR_VAR 0 4
79069: PUSH
79070: EMPTY
79071: ST_TO_ADDR
// if x - r < 0 then
79072: LD_VAR 0 1
79076: PUSH
79077: LD_VAR 0 3
79081: MINUS
79082: PUSH
79083: LD_INT 0
79085: LESS
79086: IFFALSE 79098
// min_x := 0 else
79088: LD_ADDR_VAR 0 8
79092: PUSH
79093: LD_INT 0
79095: ST_TO_ADDR
79096: GO 79114
// min_x := x - r ;
79098: LD_ADDR_VAR 0 8
79102: PUSH
79103: LD_VAR 0 1
79107: PUSH
79108: LD_VAR 0 3
79112: MINUS
79113: ST_TO_ADDR
// if y - r < 0 then
79114: LD_VAR 0 2
79118: PUSH
79119: LD_VAR 0 3
79123: MINUS
79124: PUSH
79125: LD_INT 0
79127: LESS
79128: IFFALSE 79140
// min_y := 0 else
79130: LD_ADDR_VAR 0 7
79134: PUSH
79135: LD_INT 0
79137: ST_TO_ADDR
79138: GO 79156
// min_y := y - r ;
79140: LD_ADDR_VAR 0 7
79144: PUSH
79145: LD_VAR 0 2
79149: PUSH
79150: LD_VAR 0 3
79154: MINUS
79155: ST_TO_ADDR
// max_x := x + r ;
79156: LD_ADDR_VAR 0 9
79160: PUSH
79161: LD_VAR 0 1
79165: PUSH
79166: LD_VAR 0 3
79170: PLUS
79171: ST_TO_ADDR
// max_y := y + r ;
79172: LD_ADDR_VAR 0 10
79176: PUSH
79177: LD_VAR 0 2
79181: PUSH
79182: LD_VAR 0 3
79186: PLUS
79187: ST_TO_ADDR
// for _x = min_x to max_x do
79188: LD_ADDR_VAR 0 5
79192: PUSH
79193: DOUBLE
79194: LD_VAR 0 8
79198: DEC
79199: ST_TO_ADDR
79200: LD_VAR 0 9
79204: PUSH
79205: FOR_TO
79206: IFFALSE 79307
// for _y = min_y to max_y do
79208: LD_ADDR_VAR 0 6
79212: PUSH
79213: DOUBLE
79214: LD_VAR 0 7
79218: DEC
79219: ST_TO_ADDR
79220: LD_VAR 0 10
79224: PUSH
79225: FOR_TO
79226: IFFALSE 79303
// begin if not ValidHex ( _x , _y ) then
79228: LD_VAR 0 5
79232: PPUSH
79233: LD_VAR 0 6
79237: PPUSH
79238: CALL_OW 488
79242: NOT
79243: IFFALSE 79247
// continue ;
79245: GO 79225
// if GetResourceTypeXY ( _x , _y ) then
79247: LD_VAR 0 5
79251: PPUSH
79252: LD_VAR 0 6
79256: PPUSH
79257: CALL_OW 283
79261: IFFALSE 79301
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79263: LD_ADDR_VAR 0 4
79267: PUSH
79268: LD_VAR 0 4
79272: PPUSH
79273: LD_VAR 0 4
79277: PUSH
79278: LD_INT 1
79280: PLUS
79281: PPUSH
79282: LD_VAR 0 5
79286: PUSH
79287: LD_VAR 0 6
79291: PUSH
79292: EMPTY
79293: LIST
79294: LIST
79295: PPUSH
79296: CALL_OW 1
79300: ST_TO_ADDR
// end ;
79301: GO 79225
79303: POP
79304: POP
79305: GO 79205
79307: POP
79308: POP
// end ;
79309: LD_VAR 0 4
79313: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79314: LD_INT 0
79316: PPUSH
79317: PPUSH
79318: PPUSH
79319: PPUSH
79320: PPUSH
79321: PPUSH
79322: PPUSH
79323: PPUSH
// if not units then
79324: LD_VAR 0 1
79328: NOT
79329: IFFALSE 79333
// exit ;
79331: GO 79865
// result := UnitFilter ( units , [ f_ok ] ) ;
79333: LD_ADDR_VAR 0 3
79337: PUSH
79338: LD_VAR 0 1
79342: PPUSH
79343: LD_INT 50
79345: PUSH
79346: EMPTY
79347: LIST
79348: PPUSH
79349: CALL_OW 72
79353: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79354: LD_ADDR_VAR 0 8
79358: PUSH
79359: LD_VAR 0 1
79363: PUSH
79364: LD_INT 1
79366: ARRAY
79367: PPUSH
79368: CALL_OW 255
79372: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79373: LD_ADDR_VAR 0 10
79377: PUSH
79378: LD_INT 29
79380: PUSH
79381: LD_INT 91
79383: PUSH
79384: LD_INT 49
79386: PUSH
79387: EMPTY
79388: LIST
79389: LIST
79390: LIST
79391: ST_TO_ADDR
// if not result then
79392: LD_VAR 0 3
79396: NOT
79397: IFFALSE 79401
// exit ;
79399: GO 79865
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79401: LD_ADDR_VAR 0 5
79405: PUSH
79406: LD_INT 81
79408: PUSH
79409: LD_VAR 0 8
79413: PUSH
79414: EMPTY
79415: LIST
79416: LIST
79417: PPUSH
79418: CALL_OW 69
79422: ST_TO_ADDR
// for i in result do
79423: LD_ADDR_VAR 0 4
79427: PUSH
79428: LD_VAR 0 3
79432: PUSH
79433: FOR_IN
79434: IFFALSE 79863
// begin tag := GetTag ( i ) + 1 ;
79436: LD_ADDR_VAR 0 9
79440: PUSH
79441: LD_VAR 0 4
79445: PPUSH
79446: CALL_OW 110
79450: PUSH
79451: LD_INT 1
79453: PLUS
79454: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
79455: LD_ADDR_VAR 0 7
79459: PUSH
79460: LD_VAR 0 4
79464: PPUSH
79465: CALL_OW 250
79469: PPUSH
79470: LD_VAR 0 4
79474: PPUSH
79475: CALL_OW 251
79479: PPUSH
79480: LD_INT 4
79482: PPUSH
79483: CALL 79056 0 3
79487: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
79488: LD_VAR 0 4
79492: PPUSH
79493: CALL_OW 247
79497: PUSH
79498: LD_INT 2
79500: EQUAL
79501: IFFALSE 79513
79503: PUSH
79504: LD_VAR 0 7
79508: PUSH
79509: LD_INT 2
79511: GREATER
79512: AND
79513: IFFALSE 79533
79515: PUSH
79516: LD_VAR 0 4
79520: PPUSH
79521: CALL_OW 264
79525: PUSH
79526: LD_VAR 0 10
79530: IN
79531: NOT
79532: AND
79533: IFFALSE 79572
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79535: LD_VAR 0 4
79539: PPUSH
79540: LD_VAR 0 7
79544: PUSH
79545: LD_INT 1
79547: ARRAY
79548: PUSH
79549: LD_INT 1
79551: ARRAY
79552: PPUSH
79553: LD_VAR 0 7
79557: PUSH
79558: LD_INT 1
79560: ARRAY
79561: PUSH
79562: LD_INT 2
79564: ARRAY
79565: PPUSH
79566: CALL_OW 116
79570: GO 79861
// if path > tag then
79572: LD_VAR 0 2
79576: PUSH
79577: LD_VAR 0 9
79581: GREATER
79582: IFFALSE 79790
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79584: LD_ADDR_VAR 0 6
79588: PUSH
79589: LD_VAR 0 5
79593: PPUSH
79594: LD_INT 91
79596: PUSH
79597: LD_VAR 0 4
79601: PUSH
79602: LD_INT 8
79604: PUSH
79605: EMPTY
79606: LIST
79607: LIST
79608: LIST
79609: PPUSH
79610: CALL_OW 72
79614: ST_TO_ADDR
// if nearEnemy then
79615: LD_VAR 0 6
79619: IFFALSE 79688
// begin if GetWeapon ( i ) = ru_time_lapser then
79621: LD_VAR 0 4
79625: PPUSH
79626: CALL_OW 264
79630: PUSH
79631: LD_INT 49
79633: EQUAL
79634: IFFALSE 79662
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79636: LD_VAR 0 4
79640: PPUSH
79641: LD_VAR 0 6
79645: PPUSH
79646: LD_VAR 0 4
79650: PPUSH
79651: CALL_OW 74
79655: PPUSH
79656: CALL_OW 112
79660: GO 79686
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79662: LD_VAR 0 4
79666: PPUSH
79667: LD_VAR 0 6
79671: PPUSH
79672: LD_VAR 0 4
79676: PPUSH
79677: CALL_OW 74
79681: PPUSH
79682: CALL 80946 0 2
// end else
79686: GO 79788
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79688: LD_VAR 0 4
79692: PPUSH
79693: LD_VAR 0 2
79697: PUSH
79698: LD_VAR 0 9
79702: ARRAY
79703: PUSH
79704: LD_INT 1
79706: ARRAY
79707: PPUSH
79708: LD_VAR 0 2
79712: PUSH
79713: LD_VAR 0 9
79717: ARRAY
79718: PUSH
79719: LD_INT 2
79721: ARRAY
79722: PPUSH
79723: CALL_OW 297
79727: PUSH
79728: LD_INT 6
79730: GREATER
79731: IFFALSE 79774
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79733: LD_VAR 0 4
79737: PPUSH
79738: LD_VAR 0 2
79742: PUSH
79743: LD_VAR 0 9
79747: ARRAY
79748: PUSH
79749: LD_INT 1
79751: ARRAY
79752: PPUSH
79753: LD_VAR 0 2
79757: PUSH
79758: LD_VAR 0 9
79762: ARRAY
79763: PUSH
79764: LD_INT 2
79766: ARRAY
79767: PPUSH
79768: CALL_OW 114
79772: GO 79788
// SetTag ( i , tag ) ;
79774: LD_VAR 0 4
79778: PPUSH
79779: LD_VAR 0 9
79783: PPUSH
79784: CALL_OW 109
// end else
79788: GO 79861
// if enemy then
79790: LD_VAR 0 5
79794: IFFALSE 79861
// begin if GetWeapon ( i ) = ru_time_lapser then
79796: LD_VAR 0 4
79800: PPUSH
79801: CALL_OW 264
79805: PUSH
79806: LD_INT 49
79808: EQUAL
79809: IFFALSE 79837
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79811: LD_VAR 0 4
79815: PPUSH
79816: LD_VAR 0 5
79820: PPUSH
79821: LD_VAR 0 4
79825: PPUSH
79826: CALL_OW 74
79830: PPUSH
79831: CALL_OW 112
79835: GO 79861
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79837: LD_VAR 0 4
79841: PPUSH
79842: LD_VAR 0 5
79846: PPUSH
79847: LD_VAR 0 4
79851: PPUSH
79852: CALL_OW 74
79856: PPUSH
79857: CALL 80946 0 2
// end ; end ;
79861: GO 79433
79863: POP
79864: POP
// end ;
79865: LD_VAR 0 3
79869: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79870: LD_INT 0
79872: PPUSH
79873: PPUSH
79874: PPUSH
// if not unit or IsInUnit ( unit ) then
79875: LD_VAR 0 1
79879: NOT
79880: IFTRUE 79893
79882: PUSH
79883: LD_VAR 0 1
79887: PPUSH
79888: CALL_OW 310
79892: OR
79893: IFFALSE 79897
// exit ;
79895: GO 79988
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79897: LD_ADDR_VAR 0 4
79901: PUSH
79902: LD_VAR 0 1
79906: PPUSH
79907: CALL_OW 250
79911: PPUSH
79912: LD_VAR 0 2
79916: PPUSH
79917: LD_INT 1
79919: PPUSH
79920: CALL_OW 272
79924: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79925: LD_ADDR_VAR 0 5
79929: PUSH
79930: LD_VAR 0 1
79934: PPUSH
79935: CALL_OW 251
79939: PPUSH
79940: LD_VAR 0 2
79944: PPUSH
79945: LD_INT 1
79947: PPUSH
79948: CALL_OW 273
79952: ST_TO_ADDR
// if ValidHex ( x , y ) then
79953: LD_VAR 0 4
79957: PPUSH
79958: LD_VAR 0 5
79962: PPUSH
79963: CALL_OW 488
79967: IFFALSE 79988
// ComTurnXY ( unit , x , y ) ;
79969: LD_VAR 0 1
79973: PPUSH
79974: LD_VAR 0 4
79978: PPUSH
79979: LD_VAR 0 5
79983: PPUSH
79984: CALL_OW 118
// end ;
79988: LD_VAR 0 3
79992: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79993: LD_INT 0
79995: PPUSH
79996: PPUSH
// result := false ;
79997: LD_ADDR_VAR 0 3
80001: PUSH
80002: LD_INT 0
80004: ST_TO_ADDR
// if not units then
80005: LD_VAR 0 2
80009: NOT
80010: IFFALSE 80014
// exit ;
80012: GO 80059
// for i in units do
80014: LD_ADDR_VAR 0 4
80018: PUSH
80019: LD_VAR 0 2
80023: PUSH
80024: FOR_IN
80025: IFFALSE 80057
// if See ( side , i ) then
80027: LD_VAR 0 1
80031: PPUSH
80032: LD_VAR 0 4
80036: PPUSH
80037: CALL_OW 292
80041: IFFALSE 80055
// begin result := true ;
80043: LD_ADDR_VAR 0 3
80047: PUSH
80048: LD_INT 1
80050: ST_TO_ADDR
// exit ;
80051: POP
80052: POP
80053: GO 80059
// end ;
80055: GO 80024
80057: POP
80058: POP
// end ;
80059: LD_VAR 0 3
80063: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80064: LD_INT 0
80066: PPUSH
80067: PPUSH
80068: PPUSH
80069: PPUSH
// if not unit or not points then
80070: LD_VAR 0 1
80074: NOT
80075: IFTRUE 80084
80077: PUSH
80078: LD_VAR 0 2
80082: NOT
80083: OR
80084: IFFALSE 80088
// exit ;
80086: GO 80178
// dist := 99999 ;
80088: LD_ADDR_VAR 0 5
80092: PUSH
80093: LD_INT 99999
80095: ST_TO_ADDR
// for i in points do
80096: LD_ADDR_VAR 0 4
80100: PUSH
80101: LD_VAR 0 2
80105: PUSH
80106: FOR_IN
80107: IFFALSE 80176
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80109: LD_ADDR_VAR 0 6
80113: PUSH
80114: LD_VAR 0 1
80118: PPUSH
80119: LD_VAR 0 4
80123: PUSH
80124: LD_INT 1
80126: ARRAY
80127: PPUSH
80128: LD_VAR 0 4
80132: PUSH
80133: LD_INT 2
80135: ARRAY
80136: PPUSH
80137: CALL_OW 297
80141: ST_TO_ADDR
// if tmpDist < dist then
80142: LD_VAR 0 6
80146: PUSH
80147: LD_VAR 0 5
80151: LESS
80152: IFFALSE 80174
// begin result := i ;
80154: LD_ADDR_VAR 0 3
80158: PUSH
80159: LD_VAR 0 4
80163: ST_TO_ADDR
// dist := tmpDist ;
80164: LD_ADDR_VAR 0 5
80168: PUSH
80169: LD_VAR 0 6
80173: ST_TO_ADDR
// end ; end ;
80174: GO 80106
80176: POP
80177: POP
// end ;
80178: LD_VAR 0 3
80182: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80183: LD_INT 0
80185: PPUSH
// uc_side := side ;
80186: LD_ADDR_OWVAR 20
80190: PUSH
80191: LD_VAR 0 1
80195: ST_TO_ADDR
// uc_nation := 3 ;
80196: LD_ADDR_OWVAR 21
80200: PUSH
80201: LD_INT 3
80203: ST_TO_ADDR
// vc_chassis := 25 ;
80204: LD_ADDR_OWVAR 37
80208: PUSH
80209: LD_INT 25
80211: ST_TO_ADDR
// vc_engine := engine_siberite ;
80212: LD_ADDR_OWVAR 39
80216: PUSH
80217: LD_INT 3
80219: ST_TO_ADDR
// vc_control := control_computer ;
80220: LD_ADDR_OWVAR 38
80224: PUSH
80225: LD_INT 3
80227: ST_TO_ADDR
// vc_weapon := 59 ;
80228: LD_ADDR_OWVAR 40
80232: PUSH
80233: LD_INT 59
80235: ST_TO_ADDR
// result := CreateVehicle ;
80236: LD_ADDR_VAR 0 5
80240: PUSH
80241: CALL_OW 45
80245: ST_TO_ADDR
// SetDir ( result , d ) ;
80246: LD_VAR 0 5
80250: PPUSH
80251: LD_VAR 0 4
80255: PPUSH
80256: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80260: LD_VAR 0 5
80264: PPUSH
80265: LD_VAR 0 2
80269: PPUSH
80270: LD_VAR 0 3
80274: PPUSH
80275: LD_INT 0
80277: PPUSH
80278: CALL_OW 48
// end ;
80282: LD_VAR 0 5
80286: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80287: LD_INT 0
80289: PPUSH
80290: PPUSH
80291: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80292: LD_ADDR_VAR 0 2
80296: PUSH
80297: LD_INT 0
80299: PUSH
80300: LD_INT 0
80302: PUSH
80303: LD_INT 0
80305: PUSH
80306: LD_INT 0
80308: PUSH
80309: EMPTY
80310: LIST
80311: LIST
80312: LIST
80313: LIST
80314: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80315: LD_VAR 0 1
80319: NOT
80320: IFTRUE 80353
80322: PUSH
80323: LD_VAR 0 1
80327: PPUSH
80328: CALL_OW 264
80332: PUSH
80333: LD_INT 12
80335: PUSH
80336: LD_INT 51
80338: PUSH
80339: LD_INT 32
80341: PUSH
80342: LD_INT 89
80344: PUSH
80345: EMPTY
80346: LIST
80347: LIST
80348: LIST
80349: LIST
80350: IN
80351: NOT
80352: OR
80353: IFFALSE 80357
// exit ;
80355: GO 80455
// for i := 1 to 3 do
80357: LD_ADDR_VAR 0 3
80361: PUSH
80362: DOUBLE
80363: LD_INT 1
80365: DEC
80366: ST_TO_ADDR
80367: LD_INT 3
80369: PUSH
80370: FOR_TO
80371: IFFALSE 80453
// begin tmp := GetCargo ( cargo , i ) ;
80373: LD_ADDR_VAR 0 4
80377: PUSH
80378: LD_VAR 0 1
80382: PPUSH
80383: LD_VAR 0 3
80387: PPUSH
80388: CALL_OW 289
80392: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80393: LD_ADDR_VAR 0 2
80397: PUSH
80398: LD_VAR 0 2
80402: PPUSH
80403: LD_VAR 0 3
80407: PPUSH
80408: LD_VAR 0 4
80412: PPUSH
80413: CALL_OW 1
80417: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80418: LD_ADDR_VAR 0 2
80422: PUSH
80423: LD_VAR 0 2
80427: PPUSH
80428: LD_INT 4
80430: PPUSH
80431: LD_VAR 0 2
80435: PUSH
80436: LD_INT 4
80438: ARRAY
80439: PUSH
80440: LD_VAR 0 4
80444: PLUS
80445: PPUSH
80446: CALL_OW 1
80450: ST_TO_ADDR
// end ;
80451: GO 80370
80453: POP
80454: POP
// end ;
80455: LD_VAR 0 2
80459: RET
// export function Length ( array ) ; begin
80460: LD_INT 0
80462: PPUSH
// result := array + 0 ;
80463: LD_ADDR_VAR 0 2
80467: PUSH
80468: LD_VAR 0 1
80472: PUSH
80473: LD_INT 0
80475: PLUS
80476: ST_TO_ADDR
// end ;
80477: LD_VAR 0 2
80481: RET
// export function PrepareArray ( array ) ; begin
80482: LD_INT 0
80484: PPUSH
// result := array diff 0 ;
80485: LD_ADDR_VAR 0 2
80489: PUSH
80490: LD_VAR 0 1
80494: PUSH
80495: LD_INT 0
80497: DIFF
80498: ST_TO_ADDR
// if not result [ 1 ] then
80499: LD_VAR 0 2
80503: PUSH
80504: LD_INT 1
80506: ARRAY
80507: NOT
80508: IFFALSE 80528
// result := Delete ( result , 1 ) ;
80510: LD_ADDR_VAR 0 2
80514: PUSH
80515: LD_VAR 0 2
80519: PPUSH
80520: LD_INT 1
80522: PPUSH
80523: CALL_OW 3
80527: ST_TO_ADDR
// end ;
80528: LD_VAR 0 2
80532: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80533: LD_INT 0
80535: PPUSH
80536: PPUSH
80537: PPUSH
80538: PPUSH
// sibRocketRange := 25 ;
80539: LD_ADDR_VAR 0 6
80543: PUSH
80544: LD_INT 25
80546: ST_TO_ADDR
// result := false ;
80547: LD_ADDR_VAR 0 4
80551: PUSH
80552: LD_INT 0
80554: ST_TO_ADDR
// for i := 0 to 5 do
80555: LD_ADDR_VAR 0 5
80559: PUSH
80560: DOUBLE
80561: LD_INT 0
80563: DEC
80564: ST_TO_ADDR
80565: LD_INT 5
80567: PUSH
80568: FOR_TO
80569: IFFALSE 80636
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80571: LD_VAR 0 1
80575: PPUSH
80576: LD_VAR 0 5
80580: PPUSH
80581: LD_VAR 0 6
80585: PPUSH
80586: CALL_OW 272
80590: PPUSH
80591: LD_VAR 0 2
80595: PPUSH
80596: LD_VAR 0 5
80600: PPUSH
80601: LD_VAR 0 6
80605: PPUSH
80606: CALL_OW 273
80610: PPUSH
80611: LD_VAR 0 3
80615: PPUSH
80616: CALL_OW 309
80620: IFFALSE 80634
// begin result := true ;
80622: LD_ADDR_VAR 0 4
80626: PUSH
80627: LD_INT 1
80629: ST_TO_ADDR
// exit ;
80630: POP
80631: POP
80632: GO 80638
// end ;
80634: GO 80568
80636: POP
80637: POP
// end ;
80638: LD_VAR 0 4
80642: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
80643: LD_INT 0
80645: PPUSH
80646: PPUSH
80647: PPUSH
// if btype = b_depot then
80648: LD_VAR 0 2
80652: PUSH
80653: LD_INT 0
80655: EQUAL
80656: IFFALSE 80668
// begin result := true ;
80658: LD_ADDR_VAR 0 3
80662: PUSH
80663: LD_INT 1
80665: ST_TO_ADDR
// exit ;
80666: GO 80788
// end ; pom := GetBase ( depot ) ;
80668: LD_ADDR_VAR 0 4
80672: PUSH
80673: LD_VAR 0 1
80677: PPUSH
80678: CALL_OW 274
80682: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
80683: LD_ADDR_VAR 0 5
80687: PUSH
80688: LD_VAR 0 2
80692: PPUSH
80693: LD_VAR 0 1
80697: PPUSH
80698: CALL_OW 248
80702: PPUSH
80703: CALL_OW 450
80707: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
80708: LD_ADDR_VAR 0 3
80712: PUSH
80713: LD_VAR 0 4
80717: PPUSH
80718: LD_INT 1
80720: PPUSH
80721: CALL_OW 275
80725: PUSH
80726: LD_VAR 0 5
80730: PUSH
80731: LD_INT 1
80733: ARRAY
80734: GREATEREQUAL
80735: IFFALSE 80761
80737: PUSH
80738: LD_VAR 0 4
80742: PPUSH
80743: LD_INT 2
80745: PPUSH
80746: CALL_OW 275
80750: PUSH
80751: LD_VAR 0 5
80755: PUSH
80756: LD_INT 2
80758: ARRAY
80759: GREATEREQUAL
80760: AND
80761: IFFALSE 80787
80763: PUSH
80764: LD_VAR 0 4
80768: PPUSH
80769: LD_INT 3
80771: PPUSH
80772: CALL_OW 275
80776: PUSH
80777: LD_VAR 0 5
80781: PUSH
80782: LD_INT 3
80784: ARRAY
80785: GREATEREQUAL
80786: AND
80787: ST_TO_ADDR
// end ;
80788: LD_VAR 0 3
80792: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80793: LD_INT 0
80795: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80796: LD_VAR 0 1
80800: PPUSH
80801: LD_VAR 0 2
80805: PPUSH
80806: LD_INT 0
80808: PPUSH
80809: LD_INT 0
80811: PPUSH
80812: LD_INT 1
80814: PPUSH
80815: LD_INT 0
80817: PPUSH
80818: CALL_OW 587
// end ;
80822: LD_VAR 0 3
80826: RET
// export function CenterOnNow ( unit ) ; begin
80827: LD_INT 0
80829: PPUSH
// result := IsInUnit ( unit ) ;
80830: LD_ADDR_VAR 0 2
80834: PUSH
80835: LD_VAR 0 1
80839: PPUSH
80840: CALL_OW 310
80844: ST_TO_ADDR
// if not result then
80845: LD_VAR 0 2
80849: NOT
80850: IFFALSE 80862
// result := unit ;
80852: LD_ADDR_VAR 0 2
80856: PUSH
80857: LD_VAR 0 1
80861: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
80862: LD_VAR 0 1
80866: PPUSH
80867: CALL_OW 87
// end ;
80871: LD_VAR 0 2
80875: RET
// export function ComMoveHex ( unit , hex ) ; begin
80876: LD_INT 0
80878: PPUSH
// if not hex then
80879: LD_VAR 0 2
80883: NOT
80884: IFFALSE 80888
// exit ;
80886: GO 80941
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
80888: LD_VAR 0 2
80892: PUSH
80893: LD_INT 1
80895: ARRAY
80896: PPUSH
80897: LD_VAR 0 2
80901: PUSH
80902: LD_INT 2
80904: ARRAY
80905: PPUSH
80906: CALL_OW 428
80910: IFFALSE 80914
// exit ;
80912: GO 80941
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
80914: LD_VAR 0 1
80918: PPUSH
80919: LD_VAR 0 2
80923: PUSH
80924: LD_INT 1
80926: ARRAY
80927: PPUSH
80928: LD_VAR 0 2
80932: PUSH
80933: LD_INT 2
80935: ARRAY
80936: PPUSH
80937: CALL_OW 111
// end ;
80941: LD_VAR 0 3
80945: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
80946: LD_INT 0
80948: PPUSH
80949: PPUSH
80950: PPUSH
// if not unit or not enemy then
80951: LD_VAR 0 1
80955: NOT
80956: IFTRUE 80965
80958: PUSH
80959: LD_VAR 0 2
80963: NOT
80964: OR
80965: IFFALSE 80969
// exit ;
80967: GO 81095
// x := GetX ( enemy ) ;
80969: LD_ADDR_VAR 0 4
80973: PUSH
80974: LD_VAR 0 2
80978: PPUSH
80979: CALL_OW 250
80983: ST_TO_ADDR
// y := GetY ( enemy ) ;
80984: LD_ADDR_VAR 0 5
80988: PUSH
80989: LD_VAR 0 2
80993: PPUSH
80994: CALL_OW 251
80998: ST_TO_ADDR
// if ValidHex ( x , y ) then
80999: LD_VAR 0 4
81003: PPUSH
81004: LD_VAR 0 5
81008: PPUSH
81009: CALL_OW 488
81013: IFFALSE 81095
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
81015: LD_VAR 0 2
81019: PPUSH
81020: CALL_OW 247
81024: PUSH
81025: LD_INT 3
81027: PUSH
81028: LD_INT 2
81030: PUSH
81031: EMPTY
81032: LIST
81033: LIST
81034: IN
81035: IFTRUE 81058
81037: PUSH
81038: LD_VAR 0 1
81042: PPUSH
81043: CALL_OW 255
81047: PPUSH
81048: LD_VAR 0 2
81052: PPUSH
81053: CALL_OW 292
81057: OR
81058: IFFALSE 81076
// ComAttackUnit ( unit , enemy ) else
81060: LD_VAR 0 1
81064: PPUSH
81065: LD_VAR 0 2
81069: PPUSH
81070: CALL_OW 115
81074: GO 81095
// ComAgressiveMove ( unit , x , y ) ;
81076: LD_VAR 0 1
81080: PPUSH
81081: LD_VAR 0 4
81085: PPUSH
81086: LD_VAR 0 5
81090: PPUSH
81091: CALL_OW 114
// end ;
81095: LD_VAR 0 3
81099: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
81100: LD_INT 0
81102: PPUSH
81103: PPUSH
81104: PPUSH
// list := AreaToList ( area , 0 ) ;
81105: LD_ADDR_VAR 0 5
81109: PUSH
81110: LD_VAR 0 1
81114: PPUSH
81115: LD_INT 0
81117: PPUSH
81118: CALL_OW 517
81122: ST_TO_ADDR
// if not list then
81123: LD_VAR 0 5
81127: NOT
81128: IFFALSE 81132
// exit ;
81130: GO 81262
// if all then
81132: LD_VAR 0 2
81136: IFFALSE 81224
// begin for i := 1 to list [ 1 ] do
81138: LD_ADDR_VAR 0 4
81142: PUSH
81143: DOUBLE
81144: LD_INT 1
81146: DEC
81147: ST_TO_ADDR
81148: LD_VAR 0 5
81152: PUSH
81153: LD_INT 1
81155: ARRAY
81156: PUSH
81157: FOR_TO
81158: IFFALSE 81220
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
81160: LD_ADDR_VAR 0 3
81164: PUSH
81165: LD_VAR 0 3
81169: PPUSH
81170: LD_VAR 0 3
81174: PUSH
81175: LD_INT 1
81177: PLUS
81178: PPUSH
81179: LD_VAR 0 5
81183: PUSH
81184: LD_INT 1
81186: ARRAY
81187: PUSH
81188: LD_VAR 0 4
81192: ARRAY
81193: PUSH
81194: LD_VAR 0 5
81198: PUSH
81199: LD_INT 2
81201: ARRAY
81202: PUSH
81203: LD_VAR 0 4
81207: ARRAY
81208: PUSH
81209: EMPTY
81210: LIST
81211: LIST
81212: PPUSH
81213: CALL_OW 1
81217: ST_TO_ADDR
81218: GO 81157
81220: POP
81221: POP
// exit ;
81222: GO 81262
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
81224: LD_ADDR_VAR 0 3
81228: PUSH
81229: LD_VAR 0 5
81233: PUSH
81234: LD_INT 1
81236: ARRAY
81237: PUSH
81238: LD_INT 1
81240: ARRAY
81241: PUSH
81242: LD_VAR 0 5
81246: PUSH
81247: LD_INT 2
81249: ARRAY
81250: PUSH
81251: LD_INT 1
81253: ARRAY
81254: PUSH
81255: EMPTY
81256: LIST
81257: LIST
81258: PUSH
81259: EMPTY
81260: LIST
81261: ST_TO_ADDR
// end ;
81262: LD_VAR 0 3
81266: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
81267: LD_INT 0
81269: PPUSH
81270: PPUSH
// list := AreaToList ( area , 0 ) ;
81271: LD_ADDR_VAR 0 4
81275: PUSH
81276: LD_VAR 0 1
81280: PPUSH
81281: LD_INT 0
81283: PPUSH
81284: CALL_OW 517
81288: ST_TO_ADDR
// if not list then
81289: LD_VAR 0 4
81293: NOT
81294: IFFALSE 81298
// exit ;
81296: GO 81339
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
81298: LD_ADDR_VAR 0 3
81302: PUSH
81303: LD_VAR 0 4
81307: PUSH
81308: LD_INT 1
81310: ARRAY
81311: PUSH
81312: LD_INT 1
81314: ARRAY
81315: PUSH
81316: LD_VAR 0 4
81320: PUSH
81321: LD_INT 2
81323: ARRAY
81324: PUSH
81325: LD_INT 1
81327: ARRAY
81328: PUSH
81329: LD_VAR 0 2
81333: PUSH
81334: EMPTY
81335: LIST
81336: LIST
81337: LIST
81338: ST_TO_ADDR
// end ;
81339: LD_VAR 0 3
81343: RET
// export function First ( array ) ; begin
81344: LD_INT 0
81346: PPUSH
// if not array then
81347: LD_VAR 0 1
81351: NOT
81352: IFFALSE 81356
// exit ;
81354: GO 81370
// result := array [ 1 ] ;
81356: LD_ADDR_VAR 0 2
81360: PUSH
81361: LD_VAR 0 1
81365: PUSH
81366: LD_INT 1
81368: ARRAY
81369: ST_TO_ADDR
// end ;
81370: LD_VAR 0 2
81374: RET
// export function Last ( array ) ; begin
81375: LD_INT 0
81377: PPUSH
// if not array then
81378: LD_VAR 0 1
81382: NOT
81383: IFFALSE 81387
// exit ;
81385: GO 81403
// result := array [ array ] ;
81387: LD_ADDR_VAR 0 2
81391: PUSH
81392: LD_VAR 0 1
81396: PUSH
81397: LD_VAR 0 1
81401: ARRAY
81402: ST_TO_ADDR
// end ;
81403: LD_VAR 0 2
81407: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
81408: LD_INT 0
81410: PPUSH
81411: PPUSH
// result := [ ] ;
81412: LD_ADDR_VAR 0 5
81416: PUSH
81417: EMPTY
81418: ST_TO_ADDR
// if not array then
81419: LD_VAR 0 1
81423: NOT
81424: IFFALSE 81428
// exit ;
81426: GO 81540
// for i := 1 to array do
81428: LD_ADDR_VAR 0 6
81432: PUSH
81433: DOUBLE
81434: LD_INT 1
81436: DEC
81437: ST_TO_ADDR
81438: LD_VAR 0 1
81442: PUSH
81443: FOR_TO
81444: IFFALSE 81538
// if array [ i ] [ index ] = value then
81446: LD_VAR 0 1
81450: PUSH
81451: LD_VAR 0 6
81455: ARRAY
81456: PUSH
81457: LD_VAR 0 2
81461: ARRAY
81462: PUSH
81463: LD_VAR 0 3
81467: EQUAL
81468: IFFALSE 81536
// begin if indexColumn then
81470: LD_VAR 0 4
81474: IFFALSE 81510
// result := Join ( result , array [ i ] [ indexColumn ] ) else
81476: LD_ADDR_VAR 0 5
81480: PUSH
81481: LD_VAR 0 5
81485: PPUSH
81486: LD_VAR 0 1
81490: PUSH
81491: LD_VAR 0 6
81495: ARRAY
81496: PUSH
81497: LD_VAR 0 4
81501: ARRAY
81502: PPUSH
81503: CALL 76548 0 2
81507: ST_TO_ADDR
81508: GO 81536
// result := Join ( result , array [ i ] ) ;
81510: LD_ADDR_VAR 0 5
81514: PUSH
81515: LD_VAR 0 5
81519: PPUSH
81520: LD_VAR 0 1
81524: PUSH
81525: LD_VAR 0 6
81529: ARRAY
81530: PPUSH
81531: CALL 76548 0 2
81535: ST_TO_ADDR
// end ;
81536: GO 81443
81538: POP
81539: POP
// end ;
81540: LD_VAR 0 5
81544: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
81545: LD_INT 0
81547: PPUSH
// if not vehicles or not parkingPoint then
81548: LD_VAR 0 1
81552: NOT
81553: IFTRUE 81562
81555: PUSH
81556: LD_VAR 0 2
81560: NOT
81561: OR
81562: IFFALSE 81566
// exit ;
81564: GO 81664
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
81566: LD_ADDR_VAR 0 1
81570: PUSH
81571: LD_VAR 0 1
81575: PPUSH
81576: LD_INT 50
81578: PUSH
81579: EMPTY
81580: LIST
81581: PUSH
81582: LD_INT 3
81584: PUSH
81585: LD_INT 92
81587: PUSH
81588: LD_VAR 0 2
81592: PUSH
81593: LD_INT 1
81595: ARRAY
81596: PUSH
81597: LD_VAR 0 2
81601: PUSH
81602: LD_INT 2
81604: ARRAY
81605: PUSH
81606: LD_INT 8
81608: PUSH
81609: EMPTY
81610: LIST
81611: LIST
81612: LIST
81613: LIST
81614: PUSH
81615: EMPTY
81616: LIST
81617: LIST
81618: PUSH
81619: EMPTY
81620: LIST
81621: LIST
81622: PPUSH
81623: CALL_OW 72
81627: ST_TO_ADDR
// if not vehicles then
81628: LD_VAR 0 1
81632: NOT
81633: IFFALSE 81637
// exit ;
81635: GO 81664
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
81637: LD_VAR 0 1
81641: PPUSH
81642: LD_VAR 0 2
81646: PUSH
81647: LD_INT 1
81649: ARRAY
81650: PPUSH
81651: LD_VAR 0 2
81655: PUSH
81656: LD_INT 2
81658: ARRAY
81659: PPUSH
81660: CALL_OW 111
// end ;
81664: LD_VAR 0 3
81668: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
81669: LD_INT 0
81671: PPUSH
81672: PPUSH
81673: PPUSH
// if not side or not area then
81674: LD_VAR 0 1
81678: NOT
81679: IFTRUE 81688
81681: PUSH
81682: LD_VAR 0 2
81686: NOT
81687: OR
81688: IFFALSE 81692
// exit ;
81690: GO 81811
// tmp := AreaToList ( area , 0 ) ;
81692: LD_ADDR_VAR 0 5
81696: PUSH
81697: LD_VAR 0 2
81701: PPUSH
81702: LD_INT 0
81704: PPUSH
81705: CALL_OW 517
81709: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
81710: LD_ADDR_VAR 0 4
81714: PUSH
81715: DOUBLE
81716: LD_INT 1
81718: DEC
81719: ST_TO_ADDR
81720: LD_VAR 0 5
81724: PUSH
81725: LD_INT 1
81727: ARRAY
81728: PUSH
81729: FOR_TO
81730: IFFALSE 81809
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
81732: LD_VAR 0 5
81736: PUSH
81737: LD_INT 1
81739: ARRAY
81740: PUSH
81741: LD_VAR 0 4
81745: ARRAY
81746: PPUSH
81747: LD_VAR 0 5
81751: PUSH
81752: LD_INT 2
81754: ARRAY
81755: PUSH
81756: LD_VAR 0 4
81760: ARRAY
81761: PPUSH
81762: CALL_OW 351
81766: IFFALSE 81807
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
81768: LD_VAR 0 5
81772: PUSH
81773: LD_INT 1
81775: ARRAY
81776: PUSH
81777: LD_VAR 0 4
81781: ARRAY
81782: PPUSH
81783: LD_VAR 0 5
81787: PUSH
81788: LD_INT 2
81790: ARRAY
81791: PUSH
81792: LD_VAR 0 4
81796: ARRAY
81797: PPUSH
81798: LD_VAR 0 1
81802: PPUSH
81803: CALL_OW 244
// end ;
81807: GO 81729
81809: POP
81810: POP
// end ;
81811: LD_VAR 0 3
81815: RET
// export function UniqueArray ( array ) ; var i ; begin
81816: LD_INT 0
81818: PPUSH
81819: PPUSH
// result := [ ] ;
81820: LD_ADDR_VAR 0 2
81824: PUSH
81825: EMPTY
81826: ST_TO_ADDR
// if not array then
81827: LD_VAR 0 1
81831: NOT
81832: IFFALSE 81836
// exit ;
81834: GO 81897
// for i := 1 to array do
81836: LD_ADDR_VAR 0 3
81840: PUSH
81841: DOUBLE
81842: LD_INT 1
81844: DEC
81845: ST_TO_ADDR
81846: LD_VAR 0 1
81850: PUSH
81851: FOR_TO
81852: IFFALSE 81895
// if not array [ i ] in result then
81854: LD_VAR 0 1
81858: PUSH
81859: LD_VAR 0 3
81863: ARRAY
81864: PUSH
81865: LD_VAR 0 2
81869: IN
81870: NOT
81871: IFFALSE 81893
// result := Join ( result , i ) ;
81873: LD_ADDR_VAR 0 2
81877: PUSH
81878: LD_VAR 0 2
81882: PPUSH
81883: LD_VAR 0 3
81887: PPUSH
81888: CALL 76548 0 2
81892: ST_TO_ADDR
81893: GO 81851
81895: POP
81896: POP
// end ; end_of_file
81897: LD_VAR 0 2
81901: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81902: LD_VAR 0 1
81906: PUSH
81907: LD_INT 200
81909: DOUBLE
81910: GREATEREQUAL
81911: IFFALSE 81919
81913: LD_INT 299
81915: DOUBLE
81916: LESSEQUAL
81917: IFTRUE 81921
81919: GO 81953
81921: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81922: LD_VAR 0 1
81926: PPUSH
81927: LD_VAR 0 2
81931: PPUSH
81932: LD_VAR 0 3
81936: PPUSH
81937: LD_VAR 0 4
81941: PPUSH
81942: LD_VAR 0 5
81946: PPUSH
81947: CALL 32624 0 5
81951: GO 82030
81953: LD_INT 300
81955: DOUBLE
81956: GREATEREQUAL
81957: IFFALSE 81965
81959: LD_INT 399
81961: DOUBLE
81962: LESSEQUAL
81963: IFTRUE 81967
81965: GO 82029
81967: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81968: LD_VAR 0 1
81972: PPUSH
81973: LD_VAR 0 2
81977: PPUSH
81978: LD_VAR 0 3
81982: PPUSH
81983: LD_VAR 0 4
81987: PPUSH
81988: LD_VAR 0 5
81992: PPUSH
81993: LD_VAR 0 6
81997: PPUSH
81998: LD_VAR 0 7
82002: PPUSH
82003: LD_VAR 0 8
82007: PPUSH
82008: LD_VAR 0 9
82012: PPUSH
82013: LD_VAR 0 10
82017: PPUSH
82018: LD_VAR 0 11
82022: PPUSH
82023: CALL 28427 0 11
82027: GO 82030
82029: POP
// end ;
82030: PPOPN 11
82032: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82033: LD_VAR 0 1
82037: PPUSH
82038: LD_VAR 0 2
82042: PPUSH
82043: LD_VAR 0 3
82047: PPUSH
82048: LD_VAR 0 4
82052: PPUSH
82053: LD_VAR 0 5
82057: PPUSH
82058: CALL 31924 0 5
// end ; end_of_file
82062: PPOPN 5
82064: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82065: LD_VAR 0 1
82069: PPUSH
82070: LD_VAR 0 2
82074: PPUSH
82075: LD_VAR 0 3
82079: PPUSH
82080: LD_VAR 0 4
82084: PPUSH
82085: LD_VAR 0 5
82089: PPUSH
82090: LD_VAR 0 6
82094: PPUSH
82095: CALL 15967 0 6
// end ;
82099: PPOPN 6
82101: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82102: LD_INT 0
82104: PPUSH
// begin if not units then
82105: LD_VAR 0 1
82109: NOT
82110: IFFALSE 82114
// exit ;
82112: GO 82148
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
82114: LD_VAR 0 1
82118: PPUSH
82119: LD_VAR 0 2
82123: PPUSH
82124: LD_VAR 0 3
82128: PPUSH
82129: LD_VAR 0 4
82133: PPUSH
82134: LD_VAR 0 5
82138: PPUSH
82139: LD_VAR 0 6
82143: PPUSH
82144: CALL 38321 0 6
// end ;
82148: PPOPN 7
82150: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82151: CALL 15847 0 0
// end ;
82155: PPOPN 1
82157: END
