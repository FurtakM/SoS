// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9171 0 0
// PrepareAlliance ;
  19: CALL 344 0 0
// PrepareFriends ;
  23: CALL 3642 0 0
// PrepareAmerican ;
  27: CALL 781 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 16
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 14
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9507 0 0
// PreparePatrol ;
 117: CALL 1246 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 2 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 2
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// end ;
 243: LD_VAR 0 1
 247: RET
// every 0 0$1 trigger on_hill do
 248: LD_EXP 7
 252: IFFALSE 264
 254: GO 256
 256: DISABLE
// SetAchievement ( ACH_EYE ) ;
 257: LD_STRING ACH_EYE
 259: PPUSH
 260: CALL_OW 543
 264: END
// every 0 0$1 trigger not invis_used do var i ;
 265: LD_EXP 12
 269: NOT
 270: IFFALSE 341
 272: GO 274
 274: DISABLE
 275: LD_INT 0
 277: PPUSH
// begin enable ;
 278: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 279: LD_ADDR_VAR 0 1
 283: PUSH
 284: LD_INT 22
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 21
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PPUSH
 308: CALL_OW 69
 312: PUSH
 313: FOR_IN
 314: IFFALSE 339
// if IsInvisible ( i ) then
 316: LD_VAR 0 1
 320: PPUSH
 321: CALL_OW 571
 325: IFFALSE 337
// begin invis_used := true ;
 327: LD_ADDR_EXP 12
 331: PUSH
 332: LD_INT 1
 334: ST_TO_ADDR
// break ;
 335: GO 339
// end ;
 337: GO 313
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 344: LD_INT 0
 346: PPUSH
 347: PPUSH
// uc_side := 7 ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_INT 7
 355: ST_TO_ADDR
// uc_nation := 1 ;
 356: LD_ADDR_OWVAR 21
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 364: LD_ADDR_EXP 14
 368: PUSH
 369: LD_STRING JMM
 371: PPUSH
 372: LD_EXP 1
 376: NOT
 377: PPUSH
 378: LD_STRING 11_
 380: PPUSH
 381: CALL 32295 0 3
 385: ST_TO_ADDR
// uc_side := 4 ;
 386: LD_ADDR_OWVAR 20
 390: PUSH
 391: LD_INT 4
 393: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 394: LD_ADDR_EXP 15
 398: PUSH
 399: LD_STRING Roth
 401: PPUSH
 402: CALL_OW 25
 406: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 407: LD_EXP 14
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 419: LD_EXP 14
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 431: LD_EXP 14
 435: PPUSH
 436: LD_INT 105
 438: PPUSH
 439: LD_INT 10
 441: PPUSH
 442: LD_INT 0
 444: PPUSH
 445: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 449: LD_EXP 15
 453: PPUSH
 454: LD_INT 4
 456: PPUSH
 457: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 461: LD_EXP 15
 465: PPUSH
 466: LD_INT 109
 468: PPUSH
 469: LD_INT 10
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 479: LD_EXP 14
 483: PPUSH
 484: LD_EXP 15
 488: PPUSH
 489: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 493: LD_EXP 15
 497: PPUSH
 498: LD_EXP 14
 502: PPUSH
 503: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 507: LD_INT 3
 509: PPUSH
 510: LD_INT 3
 512: PPUSH
 513: LD_INT 3
 515: PPUSH
 516: LD_INT 12
 518: PPUSH
 519: LD_INT 100
 521: PPUSH
 522: CALL 37119 0 5
// cargo := CreateVehicle ;
 526: LD_ADDR_VAR 0 2
 530: PUSH
 531: CALL_OW 45
 535: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 536: LD_VAR 0 2
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 548: LD_VAR 0 2
 552: PPUSH
 553: LD_INT 179
 555: PPUSH
 556: LD_INT 45
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 566: LD_VAR 0 2
 570: PPUSH
 571: LD_INT 4
 573: PPUSH
 574: LD_INT 30
 576: PPUSH
 577: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 581: LD_STRING 11_artifact_captured
 583: PPUSH
 584: LD_INT 0
 586: PPUSH
 587: CALL_OW 30
 591: IFFALSE 648
// begin cargo := CreateVehicle ;
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 603: LD_VAR 0 2
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 615: LD_VAR 0 2
 619: PPUSH
 620: LD_INT 171
 622: PPUSH
 623: LD_INT 85
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 633: LD_VAR 0 2
 637: PPUSH
 638: LD_INT 4
 640: PPUSH
 641: LD_INT 50
 643: PPUSH
 644: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 648: LD_INT 47
 650: PPUSH
 651: LD_INT 7
 653: PPUSH
 654: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 658: LD_INT 1
 660: PPUSH
 661: LD_INT 47
 663: PPUSH
 664: CALL_OW 471
// end ;
 668: LD_VAR 0 1
 672: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 673: LD_INT 38
 675: PPUSH
 676: LD_INT 22
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PPUSH
 686: CALL_OW 70
 690: PUSH
 691: LD_EXP 7
 695: NOT
 696: AND
 697: IFFALSE 728
 699: GO 701
 701: DISABLE
// begin enable ;
 702: ENABLE
// on_hill := true ;
 703: LD_ADDR_EXP 7
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 711: LD_INT 126
 713: PPUSH
 714: LD_INT 13
 716: PPUSH
 717: LD_INT 7
 719: PPUSH
 720: LD_INT 90
 722: NEG
 723: PPUSH
 724: CALL_OW 330
// end ;
 728: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 729: LD_INT 38
 731: PPUSH
 732: LD_INT 22
 734: PUSH
 735: LD_INT 7
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 70
 746: NOT
 747: PUSH
 748: LD_EXP 7
 752: AND
 753: IFFALSE 780
 755: GO 757
 757: DISABLE
// begin enable ;
 758: ENABLE
// on_hill := false ;
 759: LD_ADDR_EXP 7
 763: PUSH
 764: LD_INT 0
 766: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 767: LD_INT 126
 769: PPUSH
 770: LD_INT 13
 772: PPUSH
 773: LD_INT 7
 775: PPUSH
 776: CALL_OW 331
// end ; end_of_file
 780: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
 786: PPUSH
 787: PPUSH
 788: PPUSH
// if Difficulty = 1 then
 789: LD_OWVAR 67
 793: PUSH
 794: LD_INT 1
 796: EQUAL
 797: IFFALSE 905
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 799: LD_ADDR_VAR 0 6
 803: PUSH
 804: LD_INT 155
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 193
 816: PUSH
 817: LD_INT 93
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 188
 826: PUSH
 827: LD_INT 81
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 56
 836: PUSH
 837: LD_INT 85
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 98
 846: PUSH
 847: LD_INT 87
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: ST_TO_ADDR
// for i in tmp do
 861: LD_ADDR_VAR 0 2
 865: PUSH
 866: LD_VAR 0 6
 870: PUSH
 871: FOR_IN
 872: IFFALSE 903
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: LD_VAR 0 2
 887: PUSH
 888: LD_INT 2
 890: ARRAY
 891: PPUSH
 892: CALL_OW 428
 896: PPUSH
 897: CALL_OW 64
 901: GO 871
 903: POP
 904: POP
// end ; defcon := 0 ;
 905: LD_ADDR_EXP 21
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// defcon_wave := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defenders := [ ] ;
 921: LD_ADDR_EXP 20
 925: PUSH
 926: EMPTY
 927: ST_TO_ADDR
// SetBName ( alfa , alpha ) ;
 928: LD_INT 5
 930: PPUSH
 931: LD_STRING alpha
 933: PPUSH
 934: CALL_OW 500
// uc_side := 1 ;
 938: LD_ADDR_OWVAR 20
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// uc_nation := 1 ;
 946: LD_ADDR_OWVAR 21
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 954: LD_ADDR_EXP 16
 958: PUSH
 959: LD_STRING Powell
 961: PPUSH
 962: CALL_OW 25
 966: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 967: LD_EXP 16
 971: PPUSH
 972: LD_INT 110
 974: PPUSH
 975: LD_INT 26
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 48
// ComHold ( Powell ) ;
 985: LD_EXP 16
 989: PPUSH
 990: CALL_OW 140
// for i = 1 to 5 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 5
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1064
// begin PrepareHuman ( false , 1 , 10 ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_INT 1
1015: PPUSH
1016: LD_INT 10
1018: PPUSH
1019: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1023: LD_ADDR_EXP 19
1027: PUSH
1028: LD_EXP 19
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: CALL_OW 44
1040: PPUSH
1041: CALL_OW 2
1045: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1046: LD_EXP 19
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_INT 18
1057: PPUSH
1058: CALL_OW 52
// end ;
1062: GO 1007
1064: POP
1065: POP
// if Difficulty > 2 then
1066: LD_OWVAR 67
1070: PUSH
1071: LD_INT 2
1073: GREATER
1074: IFFALSE 1123
// begin bc_type := b_turret ;
1076: LD_ADDR_OWVAR 42
1080: PUSH
1081: LD_INT 33
1083: ST_TO_ADDR
// bc_level := 7 ;
1084: LD_ADDR_OWVAR 43
1088: PUSH
1089: LD_INT 7
1091: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_INT 107
1099: PPUSH
1100: LD_INT 55
1102: PPUSH
1103: LD_INT 5
1105: PPUSH
1106: CALL_OW 47
1110: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1111: LD_VAR 0 4
1115: PPUSH
1116: LD_INT 7
1118: PPUSH
1119: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1123: LD_ADDR_VAR 0 2
1127: PUSH
1128: LD_INT 22
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: LD_INT 30
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 69
1156: PUSH
1157: LD_INT 22
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 30
1169: PUSH
1170: LD_INT 36
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PPUSH
1181: CALL_OW 69
1185: ADD
1186: PUSH
1187: FOR_IN
1188: IFFALSE 1239
// for j = 1 to 3 do
1190: LD_ADDR_VAR 0 3
1194: PUSH
1195: DOUBLE
1196: LD_INT 1
1198: DEC
1199: ST_TO_ADDR
1200: LD_INT 3
1202: PUSH
1203: FOR_TO
1204: IFFALSE 1235
// begin PrepareHuman ( false , 3 , 6 ) ;
1206: LD_INT 0
1208: PPUSH
1209: LD_INT 3
1211: PPUSH
1212: LD_INT 6
1214: PPUSH
1215: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1219: CALL_OW 44
1223: PPUSH
1224: LD_VAR 0 2
1228: PPUSH
1229: CALL_OW 52
// end ;
1233: GO 1203
1235: POP
1236: POP
1237: GO 1187
1239: POP
1240: POP
// end ;
1241: LD_VAR 0 1
1245: RET
// export function PreparePatrol ; var i , un ; begin
1246: LD_INT 0
1248: PPUSH
1249: PPUSH
1250: PPUSH
// uc_side := 1 ;
1251: LD_ADDR_OWVAR 20
1255: PUSH
1256: LD_INT 1
1258: ST_TO_ADDR
// uc_nation := 1 ;
1259: LD_ADDR_OWVAR 21
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1267: LD_ADDR_EXP 18
1271: PUSH
1272: LD_INT 99
1274: PUSH
1275: LD_INT 55
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: LD_INT 113
1284: PUSH
1285: LD_INT 67
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PUSH
1292: LD_INT 129
1294: PUSH
1295: LD_INT 68
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 135
1304: PUSH
1305: LD_INT 62
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: PUSH
1312: LD_INT 103
1314: PUSH
1315: LD_INT 41
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: PUSH
1329: LD_INT 27
1331: PUSH
1332: LD_INT 49
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 46
1341: PUSH
1342: LD_INT 49
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 87
1351: PUSH
1352: LD_INT 70
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 99
1361: PUSH
1362: LD_INT 79
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 118
1371: PUSH
1372: LD_INT 111
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 99
1381: PUSH
1382: LD_INT 79
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 87
1391: PUSH
1392: LD_INT 70
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 46
1401: PUSH
1402: LD_INT 49
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: LD_INT 200
1421: PUSH
1422: LD_INT 88
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PUSH
1429: LD_INT 175
1431: PUSH
1432: LD_INT 80
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 135
1441: PUSH
1442: LD_INT 62
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 117
1451: PUSH
1452: LD_INT 53
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 103
1461: PUSH
1462: LD_INT 41
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: LD_INT 99
1471: PUSH
1472: LD_INT 24
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 85
1481: PUSH
1482: LD_INT 3
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: LD_INT 99
1491: PUSH
1492: LD_INT 24
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 103
1501: PUSH
1502: LD_INT 41
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: PUSH
1509: LD_INT 98
1511: PUSH
1512: LD_INT 47
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PUSH
1519: LD_INT 99
1521: PUSH
1522: LD_INT 56
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 96
1531: PUSH
1532: LD_INT 66
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 99
1541: PUSH
1542: LD_INT 56
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 112
1551: PUSH
1552: LD_INT 66
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 129
1561: PUSH
1562: LD_INT 68
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 135
1571: PUSH
1572: LD_INT 62
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 156
1581: PUSH
1582: LD_INT 71
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 168
1591: PUSH
1592: LD_INT 76
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 168
1601: PUSH
1602: LD_INT 61
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 168
1611: PUSH
1612: LD_INT 75
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 185
1621: PUSH
1622: LD_INT 85
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: ST_TO_ADDR
// mobile_patrol := [ ] ;
1657: LD_ADDR_EXP 17
1661: PUSH
1662: EMPTY
1663: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1664: LD_INT 3
1666: PPUSH
1667: LD_INT 1
1669: PPUSH
1670: LD_INT 3
1672: PPUSH
1673: LD_INT 4
1675: PPUSH
1676: LD_INT 100
1678: PPUSH
1679: CALL 37119 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1683: LD_ADDR_EXP 17
1687: PUSH
1688: LD_EXP 17
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: CALL_OW 45
1700: PPUSH
1701: CALL_OW 2
1705: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1706: LD_EXP 17
1710: PUSH
1711: LD_INT 1
1713: ARRAY
1714: PPUSH
1715: LD_INT 99
1717: PPUSH
1718: LD_INT 55
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1728: LD_INT 2
1730: PPUSH
1731: LD_INT 1
1733: PPUSH
1734: LD_INT 3
1736: PPUSH
1737: LD_INT 4
1739: PPUSH
1740: LD_INT 100
1742: PPUSH
1743: CALL 37119 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1747: LD_ADDR_EXP 17
1751: PUSH
1752: LD_EXP 17
1756: PPUSH
1757: LD_INT 2
1759: PPUSH
1760: CALL_OW 45
1764: PPUSH
1765: CALL_OW 2
1769: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1770: LD_EXP 17
1774: PUSH
1775: LD_INT 2
1777: ARRAY
1778: PPUSH
1779: LD_INT 27
1781: PPUSH
1782: LD_INT 49
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 1
1797: PPUSH
1798: LD_INT 3
1800: PPUSH
1801: LD_INT 9
1803: PUSH
1804: LD_INT 7
1806: PUSH
1807: LD_INT 7
1809: PUSH
1810: EMPTY
1811: LIST
1812: LIST
1813: LIST
1814: PUSH
1815: LD_OWVAR 67
1819: ARRAY
1820: PPUSH
1821: LD_INT 100
1823: PPUSH
1824: CALL 37119 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1828: LD_ADDR_EXP 17
1832: PUSH
1833: LD_EXP 17
1837: PPUSH
1838: LD_INT 3
1840: PPUSH
1841: CALL_OW 45
1845: PPUSH
1846: CALL_OW 2
1850: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
1851: LD_EXP 17
1855: PUSH
1856: LD_INT 3
1858: ARRAY
1859: PPUSH
1860: LD_INT 200
1862: PPUSH
1863: LD_INT 88
1865: PPUSH
1866: LD_INT 0
1868: PPUSH
1869: CALL_OW 48
// for i = mobile_patrol downto 1 do
1873: LD_ADDR_VAR 0 2
1877: PUSH
1878: DOUBLE
1879: LD_EXP 17
1883: INC
1884: ST_TO_ADDR
1885: LD_INT 1
1887: PUSH
1888: FOR_DOWNTO
1889: IFFALSE 1900
// RaiseSailEvent ( 1 ) ;
1891: LD_INT 1
1893: PPUSH
1894: CALL_OW 427
1898: GO 1888
1900: POP
1901: POP
// end ;
1902: LD_VAR 0 1
1906: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
1907: LD_INT 0
1909: PPUSH
1910: PPUSH
1911: PPUSH
1912: PPUSH
1913: PPUSH
1914: PPUSH
1915: PPUSH
1916: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
1917: LD_ADDR_VAR 0 5
1921: PUSH
1922: LD_INT 20
1924: PUSH
1925: LD_INT 4
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: PUSH
1932: LD_INT 21
1934: PUSH
1935: LD_INT 5
1937: PUSH
1938: EMPTY
1939: LIST
1940: LIST
1941: PUSH
1942: LD_INT 22
1944: PUSH
1945: LD_INT 1
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: LIST
1956: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
1957: LD_ADDR_VAR 0 6
1961: PUSH
1962: LD_INT 176
1964: PUSH
1965: LD_INT 81
1967: PUSH
1968: LD_INT 135
1970: PUSH
1971: LD_INT 62
1973: PUSH
1974: LD_INT 114
1976: PUSH
1977: LD_INT 67
1979: PUSH
1980: LD_INT 93
1982: PUSH
1983: LD_INT 71
1985: PUSH
1986: LD_INT 76
1988: PUSH
1989: LD_INT 67
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: PUSH
2004: LD_INT 107
2006: PUSH
2007: LD_INT 92
2009: PUSH
2010: LD_INT 92
2012: PUSH
2013: LD_INT 72
2015: PUSH
2016: LD_INT 77
2018: PUSH
2019: LD_INT 68
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: PUSH
2030: LD_INT 45
2032: PUSH
2033: LD_INT 49
2035: PUSH
2036: LD_INT 67
2038: PUSH
2039: LD_INT 59
2041: PUSH
2042: LD_INT 77
2044: PUSH
2045: LD_INT 68
2047: PUSH
2048: EMPTY
2049: LIST
2050: LIST
2051: LIST
2052: LIST
2053: LIST
2054: LIST
2055: PUSH
2056: EMPTY
2057: LIST
2058: LIST
2059: LIST
2060: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2061: LD_ADDR_VAR 0 4
2065: PUSH
2066: LD_INT 1
2068: PPUSH
2069: LD_VAR 0 5
2073: PPUSH
2074: CALL_OW 12
2078: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2079: LD_ADDR_VAR 0 3
2083: PUSH
2084: LD_INT 1
2086: PPUSH
2087: LD_INT 2
2089: PPUSH
2090: CALL_OW 12
2094: ST_TO_ADDR
// uc_side := 1 ;
2095: LD_ADDR_OWVAR 20
2099: PUSH
2100: LD_INT 1
2102: ST_TO_ADDR
// uc_nation := 1 ;
2103: LD_ADDR_OWVAR 21
2107: PUSH
2108: LD_INT 1
2110: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2111: LD_INT 2
2113: PPUSH
2114: LD_INT 3
2116: PPUSH
2117: LD_INT 3
2119: PPUSH
2120: LD_INT 12
2122: PPUSH
2123: LD_INT 100
2125: PPUSH
2126: CALL 37119 0 5
// veh := CreateVehicle ;
2130: LD_ADDR_VAR 0 8
2134: PUSH
2135: CALL_OW 45
2139: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2140: LD_VAR 0 8
2144: PPUSH
2145: LD_VAR 0 5
2149: PUSH
2150: LD_VAR 0 4
2154: ARRAY
2155: PUSH
2156: LD_INT 2
2158: ARRAY
2159: PPUSH
2160: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2164: LD_VAR 0 8
2168: PPUSH
2169: LD_VAR 0 5
2173: PUSH
2174: LD_VAR 0 4
2178: ARRAY
2179: PUSH
2180: LD_INT 1
2182: ARRAY
2183: PPUSH
2184: LD_INT 0
2186: PPUSH
2187: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2191: LD_VAR 0 8
2195: PPUSH
2196: LD_INT 1
2198: PUSH
2199: LD_INT 3
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PUSH
2206: LD_VAR 0 3
2210: ARRAY
2211: PPUSH
2212: LD_INT 100
2214: PPUSH
2215: CALL_OW 290
// tmp := road [ k ] ;
2219: LD_ADDR_VAR 0 7
2223: PUSH
2224: LD_VAR 0 6
2228: PUSH
2229: LD_VAR 0 4
2233: ARRAY
2234: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2235: LD_ADDR_VAR 0 2
2239: PUSH
2240: DOUBLE
2241: LD_INT 1
2243: DEC
2244: ST_TO_ADDR
2245: LD_VAR 0 7
2249: PUSH
2250: LD_INT 2
2252: DIV
2253: PUSH
2254: FOR_TO
2255: IFFALSE 2302
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2257: LD_VAR 0 8
2261: PPUSH
2262: LD_VAR 0 7
2266: PUSH
2267: LD_VAR 0 2
2271: PUSH
2272: LD_INT 2
2274: MUL
2275: PUSH
2276: LD_INT 1
2278: MINUS
2279: ARRAY
2280: PPUSH
2281: LD_VAR 0 7
2285: PUSH
2286: LD_VAR 0 2
2290: PUSH
2291: LD_INT 2
2293: MUL
2294: ARRAY
2295: PPUSH
2296: CALL_OW 171
2300: GO 2254
2302: POP
2303: POP
// AddComGive ( veh , alfa ) ;
2304: LD_VAR 0 8
2308: PPUSH
2309: LD_INT 5
2311: PPUSH
2312: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2316: LD_VAR 0 8
2320: PPUSH
2321: LD_INT 70
2323: PPUSH
2324: CALL_OW 202
// for i = tmp div 2 downto 1 do
2328: LD_ADDR_VAR 0 2
2332: PUSH
2333: DOUBLE
2334: LD_VAR 0 7
2338: PUSH
2339: LD_INT 2
2341: DIV
2342: INC
2343: ST_TO_ADDR
2344: LD_INT 1
2346: PUSH
2347: FOR_DOWNTO
2348: IFFALSE 2395
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2350: LD_VAR 0 8
2354: PPUSH
2355: LD_VAR 0 7
2359: PUSH
2360: LD_VAR 0 2
2364: PUSH
2365: LD_INT 2
2367: MUL
2368: PUSH
2369: LD_INT 1
2371: MINUS
2372: ARRAY
2373: PPUSH
2374: LD_VAR 0 7
2378: PUSH
2379: LD_VAR 0 2
2383: PUSH
2384: LD_INT 2
2386: MUL
2387: ARRAY
2388: PPUSH
2389: CALL_OW 171
2393: GO 2347
2395: POP
2396: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2397: LD_VAR 0 8
2401: PPUSH
2402: LD_VAR 0 5
2406: PUSH
2407: LD_VAR 0 4
2411: ARRAY
2412: PUSH
2413: LD_INT 1
2415: ARRAY
2416: PPUSH
2417: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2421: LD_INT 35
2423: PPUSH
2424: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2428: LD_VAR 0 8
2432: PPUSH
2433: LD_VAR 0 5
2437: PUSH
2438: LD_VAR 0 4
2442: ARRAY
2443: PUSH
2444: LD_INT 1
2446: ARRAY
2447: PPUSH
2448: CALL_OW 308
2452: PUSH
2453: LD_VAR 0 8
2457: PPUSH
2458: LD_VAR 0 3
2462: PPUSH
2463: CALL_OW 289
2467: PUSH
2468: LD_INT 0
2470: EQUAL
2471: AND
2472: IFFALSE 2421
// RemoveUnit ( veh ) ;
2474: LD_VAR 0 8
2478: PPUSH
2479: CALL_OW 64
// end ;
2483: LD_VAR 0 1
2487: RET
// every 3 3$00 do
2488: GO 2490
2490: DISABLE
// begin enable ;
2491: ENABLE
// SpawnCargo ;
2492: CALL 1907 0 0
// end ;
2496: END
// export function PrepareDefenders ; var i , tmp ; begin
2497: LD_INT 0
2499: PPUSH
2500: PPUSH
2501: PPUSH
// if defenders then
2502: LD_EXP 20
2506: IFFALSE 2510
// exit ;
2508: GO 2774
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2510: LD_ADDR_VAR 0 2
2514: PUSH
2515: DOUBLE
2516: LD_INT 1
2518: DEC
2519: ST_TO_ADDR
2520: LD_INT 4
2522: PUSH
2523: LD_INT 5
2525: PUSH
2526: LD_INT 6
2528: PUSH
2529: EMPTY
2530: LIST
2531: LIST
2532: LIST
2533: PUSH
2534: LD_OWVAR 67
2538: ARRAY
2539: PUSH
2540: FOR_TO
2541: IFFALSE 2680
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2543: LD_ADDR_VAR 0 3
2547: PUSH
2548: LD_INT 6
2550: PPUSH
2551: LD_INT 2
2553: PUSH
2554: LD_INT 3
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: PUSH
2561: LD_INT 1
2563: PPUSH
2564: LD_INT 2
2566: PPUSH
2567: CALL_OW 12
2571: ARRAY
2572: PPUSH
2573: LD_INT 1
2575: PUSH
2576: LD_INT 3
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: PUSH
2583: LD_INT 1
2585: PPUSH
2586: LD_INT 2
2588: PPUSH
2589: CALL_OW 12
2593: ARRAY
2594: PPUSH
2595: LD_INT 2
2597: PPUSH
2598: LD_INT 4
2600: PUSH
2601: LD_INT 5
2603: PUSH
2604: LD_INT 9
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: LIST
2611: PUSH
2612: LD_INT 1
2614: PPUSH
2615: LD_INT 3
2617: PPUSH
2618: CALL_OW 12
2622: ARRAY
2623: PPUSH
2624: CALL 34773 0 5
2628: ST_TO_ADDR
// if tmp then
2629: LD_VAR 0 3
2633: IFFALSE 2678
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2635: LD_INT 6
2637: PPUSH
2638: LD_VAR 0 3
2642: PUSH
2643: LD_INT 1
2645: ARRAY
2646: PPUSH
2647: LD_VAR 0 3
2651: PUSH
2652: LD_INT 2
2654: ARRAY
2655: PPUSH
2656: LD_VAR 0 3
2660: PUSH
2661: LD_INT 3
2663: ARRAY
2664: PPUSH
2665: LD_VAR 0 3
2669: PUSH
2670: LD_INT 4
2672: ARRAY
2673: PPUSH
2674: CALL_OW 185
// end ;
2678: GO 2540
2680: POP
2681: POP
// repeat wait ( 0 0$1 ) ;
2682: LD_INT 35
2684: PPUSH
2685: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 ] [ Difficulty ] ;
2689: LD_INT 22
2691: PUSH
2692: LD_INT 1
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: PUSH
2699: LD_INT 33
2701: PUSH
2702: LD_INT 2
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PPUSH
2713: CALL_OW 69
2717: PUSH
2718: LD_INT 4
2720: PUSH
2721: LD_INT 5
2723: PUSH
2724: LD_INT 6
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: LIST
2731: PUSH
2732: LD_OWVAR 67
2736: ARRAY
2737: GREATEREQUAL
2738: IFFALSE 2682
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2740: LD_ADDR_EXP 20
2744: PUSH
2745: LD_INT 22
2747: PUSH
2748: LD_INT 1
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: PUSH
2755: LD_INT 33
2757: PUSH
2758: LD_INT 2
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: PUSH
2765: EMPTY
2766: LIST
2767: LIST
2768: PPUSH
2769: CALL_OW 69
2773: ST_TO_ADDR
// end ;
2774: LD_VAR 0 1
2778: RET
// export function Defend ; var i , un , veh , tmp ; begin
2779: LD_INT 0
2781: PPUSH
2782: PPUSH
2783: PPUSH
2784: PPUSH
2785: PPUSH
// defcon_wave := defcon_wave + 1 ;
2786: LD_ADDR_EXP 22
2790: PUSH
2791: LD_EXP 22
2795: PUSH
2796: LD_INT 1
2798: PLUS
2799: ST_TO_ADDR
// if not defenders then
2800: LD_EXP 20
2804: NOT
2805: IFFALSE 2811
// PrepareDefenders ;
2807: CALL 2497 0 0
// if defcon_wave > 1 then
2811: LD_EXP 22
2815: PUSH
2816: LD_INT 1
2818: GREATER
2819: IFFALSE 3077
// begin for i = 1 to defcon_wave + 2 do
2821: LD_ADDR_VAR 0 2
2825: PUSH
2826: DOUBLE
2827: LD_INT 1
2829: DEC
2830: ST_TO_ADDR
2831: LD_EXP 22
2835: PUSH
2836: LD_INT 2
2838: PLUS
2839: PUSH
2840: FOR_TO
2841: IFFALSE 2983
// begin uc_side := 1 ;
2843: LD_ADDR_OWVAR 20
2847: PUSH
2848: LD_INT 1
2850: ST_TO_ADDR
// uc_nation := 1 ;
2851: LD_ADDR_OWVAR 21
2855: PUSH
2856: LD_INT 1
2858: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
2859: LD_INT 4
2861: PPUSH
2862: LD_INT 3
2864: PPUSH
2865: LD_INT 1
2867: PPUSH
2868: LD_INT 4
2870: PUSH
2871: LD_INT 6
2873: PUSH
2874: LD_INT 7
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: LIST
2881: PUSH
2882: LD_INT 1
2884: PPUSH
2885: LD_INT 3
2887: PPUSH
2888: CALL_OW 12
2892: ARRAY
2893: PPUSH
2894: LD_INT 100
2896: PPUSH
2897: CALL 37119 0 5
// veh := CreateVehicle ;
2901: LD_ADDR_VAR 0 4
2905: PUSH
2906: CALL_OW 45
2910: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2911: LD_VAR 0 4
2915: PPUSH
2916: LD_INT 1
2918: PPUSH
2919: CALL_OW 233
// defenders := defenders ^ veh ;
2923: LD_ADDR_EXP 20
2927: PUSH
2928: LD_EXP 20
2932: PUSH
2933: LD_VAR 0 4
2937: ADD
2938: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
2939: LD_INT 0
2941: PPUSH
2942: LD_INT 3
2944: PPUSH
2945: LD_INT 9
2947: PPUSH
2948: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2952: CALL_OW 44
2956: PPUSH
2957: LD_VAR 0 4
2961: PPUSH
2962: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
2966: LD_VAR 0 4
2970: PPUSH
2971: LD_INT 25
2973: PPUSH
2974: LD_INT 0
2976: PPUSH
2977: CALL_OW 49
// end ;
2981: GO 2840
2983: POP
2984: POP
// for i = 1 to defcon_wave do
2985: LD_ADDR_VAR 0 2
2989: PUSH
2990: DOUBLE
2991: LD_INT 1
2993: DEC
2994: ST_TO_ADDR
2995: LD_EXP 22
2999: PUSH
3000: FOR_TO
3001: IFFALSE 3075
// begin uc_side := 1 ;
3003: LD_ADDR_OWVAR 20
3007: PUSH
3008: LD_INT 1
3010: ST_TO_ADDR
// uc_nation := 1 ;
3011: LD_ADDR_OWVAR 21
3015: PUSH
3016: LD_INT 1
3018: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3019: LD_INT 0
3021: PPUSH
3022: LD_INT 5
3024: PPUSH
3025: LD_INT 9
3027: PPUSH
3028: CALL_OW 380
// un := CreateHuman ;
3032: LD_ADDR_VAR 0 3
3036: PUSH
3037: CALL_OW 44
3041: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3042: LD_VAR 0 3
3046: PPUSH
3047: LD_INT 25
3049: PPUSH
3050: LD_INT 0
3052: PPUSH
3053: CALL_OW 49
// defenders := defenders ^ un ;
3057: LD_ADDR_EXP 20
3061: PUSH
3062: LD_EXP 20
3066: PUSH
3067: LD_VAR 0 3
3071: ADD
3072: ST_TO_ADDR
// end ;
3073: GO 3000
3075: POP
3076: POP
// end ; repeat wait ( 0 0$1 ) ;
3077: LD_INT 35
3079: PPUSH
3080: CALL_OW 67
// for i in defenders do
3084: LD_ADDR_VAR 0 2
3088: PUSH
3089: LD_EXP 20
3093: PUSH
3094: FOR_IN
3095: IFFALSE 3177
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3097: LD_EXP 21
3101: PUSH
3102: LD_VAR 0 2
3106: PPUSH
3107: LD_EXP 21
3111: PUSH
3112: LD_INT 1
3114: ARRAY
3115: PPUSH
3116: LD_EXP 21
3120: PUSH
3121: LD_INT 2
3123: ARRAY
3124: PPUSH
3125: CALL_OW 297
3129: PUSH
3130: LD_INT 10
3132: GREATER
3133: AND
3134: PUSH
3135: LD_VAR 0 2
3139: PPUSH
3140: CALL_OW 314
3144: NOT
3145: AND
3146: IFFALSE 3175
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3148: LD_VAR 0 2
3152: PPUSH
3153: LD_EXP 21
3157: PUSH
3158: LD_INT 1
3160: ARRAY
3161: PPUSH
3162: LD_EXP 21
3166: PUSH
3167: LD_INT 2
3169: ARRAY
3170: PPUSH
3171: CALL_OW 114
// end ;
3175: GO 3094
3177: POP
3178: POP
// until not defenders ;
3179: LD_EXP 20
3183: NOT
3184: IFFALSE 3077
// end ;
3186: LD_VAR 0 1
3190: RET
// every 0 0$1 do var radar , i ;
3191: GO 3193
3193: DISABLE
3194: LD_INT 0
3196: PPUSH
3197: PPUSH
// begin uc_side := 1 ;
3198: LD_ADDR_OWVAR 20
3202: PUSH
3203: LD_INT 1
3205: ST_TO_ADDR
// uc_nation := 1 ;
3206: LD_ADDR_OWVAR 21
3210: PUSH
3211: LD_INT 1
3213: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3214: LD_INT 1
3216: PPUSH
3217: LD_INT 2
3219: PPUSH
3220: LD_INT 3
3222: PPUSH
3223: LD_INT 11
3225: PPUSH
3226: LD_INT 100
3228: PPUSH
3229: CALL 37119 0 5
// radar := CreateVehicle ;
3233: LD_ADDR_VAR 0 1
3237: PUSH
3238: CALL_OW 45
3242: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3243: LD_VAR 0 1
3247: PPUSH
3248: LD_INT 4
3250: PPUSH
3251: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3255: LD_VAR 0 1
3259: PPUSH
3260: LD_INT 51
3262: PPUSH
3263: LD_INT 45
3265: PPUSH
3266: LD_INT 0
3268: PPUSH
3269: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3273: LD_VAR 0 1
3277: PPUSH
3278: LD_INT 700
3280: PPUSH
3281: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3285: LD_VAR 0 1
3289: PPUSH
3290: LD_INT 65
3292: PPUSH
3293: LD_INT 75
3295: PPUSH
3296: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3300: LD_VAR 0 1
3304: PPUSH
3305: LD_INT 350
3307: PPUSH
3308: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3312: LD_VAR 0 1
3316: PPUSH
3317: LD_INT 83
3319: PPUSH
3320: LD_INT 87
3322: PPUSH
3323: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3327: LD_VAR 0 1
3331: PPUSH
3332: LD_INT 525
3334: PPUSH
3335: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3339: LD_VAR 0 1
3343: PPUSH
3344: LD_INT 94
3346: PPUSH
3347: LD_INT 81
3349: PPUSH
3350: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3354: LD_VAR 0 1
3358: PPUSH
3359: LD_INT 350
3361: PPUSH
3362: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3366: LD_VAR 0 1
3370: PPUSH
3371: LD_INT 55
3373: PPUSH
3374: LD_INT 48
3376: PPUSH
3377: CALL_OW 171
// wait ( 1 1$00 ) ;
3381: LD_INT 2100
3383: PPUSH
3384: CALL_OW 67
// until not IsOk ( radar ) ;
3388: LD_VAR 0 1
3392: PPUSH
3393: CALL_OW 302
3397: NOT
3398: IFFALSE 3273
// end ;
3400: PPOPN 2
3402: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3403: LD_OWVAR 67
3407: PUSH
3408: LD_INT 1
3410: GREATER
3411: PUSH
3412: LD_EXP 11
3416: AND
3417: IFFALSE 3639
3419: GO 3421
3421: DISABLE
3422: LD_INT 0
3424: PPUSH
// begin enable ;
3425: ENABLE
// uc_side := 1 ;
3426: LD_ADDR_OWVAR 20
3430: PUSH
3431: LD_INT 1
3433: ST_TO_ADDR
// uc_nation := 1 ;
3434: LD_ADDR_OWVAR 21
3438: PUSH
3439: LD_INT 1
3441: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3442: LD_INT 5
3444: PPUSH
3445: LD_INT 3
3447: PPUSH
3448: LD_INT 3
3450: PPUSH
3451: LD_INT 4
3453: PPUSH
3454: LD_INT 100
3456: PPUSH
3457: CALL 37119 0 5
// un := CreateVehicle ;
3461: LD_ADDR_VAR 0 1
3465: PUSH
3466: CALL_OW 45
3470: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3471: LD_VAR 0 1
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3483: LD_VAR 0 1
3487: PPUSH
3488: LD_INT 155
3490: PPUSH
3491: LD_INT 2
3493: PPUSH
3494: LD_INT 0
3496: PPUSH
3497: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3501: LD_VAR 0 1
3505: PPUSH
3506: LD_INT 169
3508: PPUSH
3509: LD_INT 77
3511: PPUSH
3512: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3516: LD_VAR 0 1
3520: PPUSH
3521: LD_INT 70
3523: PPUSH
3524: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_INT 134
3535: PPUSH
3536: LD_INT 62
3538: PPUSH
3539: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3543: LD_VAR 0 1
3547: PPUSH
3548: LD_INT 103
3550: PPUSH
3551: LD_INT 42
3553: PPUSH
3554: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3558: LD_VAR 0 1
3562: PPUSH
3563: LD_INT 70
3565: PPUSH
3566: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: LD_INT 84
3577: PPUSH
3578: LD_INT 2
3580: PPUSH
3581: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3585: LD_INT 35
3587: PPUSH
3588: CALL_OW 67
// if IsDead ( un ) then
3592: LD_VAR 0 1
3596: PPUSH
3597: CALL_OW 301
3601: IFFALSE 3613
// begin extra_patrol := false ;
3603: LD_ADDR_EXP 11
3607: PUSH
3608: LD_INT 0
3610: ST_TO_ADDR
// exit ;
3611: GO 3639
// end ; until IsAt ( un , 84 , 2 ) ;
3613: LD_VAR 0 1
3617: PPUSH
3618: LD_INT 84
3620: PPUSH
3621: LD_INT 2
3623: PPUSH
3624: CALL_OW 307
3628: IFFALSE 3585
// RemoveUnit ( un ) ;
3630: LD_VAR 0 1
3634: PPUSH
3635: CALL_OW 64
// end ; end_of_file
3639: PPOPN 1
3641: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl ; begin
3642: LD_INT 0
3644: PPUSH
3645: PPUSH
3646: PPUSH
3647: PPUSH
3648: PPUSH
3649: PPUSH
3650: PPUSH
// uc_side := 4 ;
3651: LD_ADDR_OWVAR 20
3655: PUSH
3656: LD_INT 4
3658: ST_TO_ADDR
// uc_nation := 1 ;
3659: LD_ADDR_OWVAR 21
3663: PUSH
3664: LD_INT 1
3666: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3667: LD_ADDR_EXP 37
3671: PUSH
3672: LD_STRING DeltaDoctor
3674: PPUSH
3675: LD_EXP 1
3679: NOT
3680: PPUSH
3681: LD_STRING 10c_
3683: PPUSH
3684: CALL 32295 0 3
3688: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3689: LD_ADDR_EXP 36
3693: PUSH
3694: LD_STRING Joan
3696: PPUSH
3697: LD_EXP 1
3701: NOT
3702: PPUSH
3703: LD_STRING 10c_
3705: PPUSH
3706: CALL 32295 0 3
3710: ST_TO_ADDR
// if Joan then
3711: LD_EXP 36
3715: IFFALSE 3746
// friends := Insert ( friends , friends + 1 , Joan ) ;
3717: LD_ADDR_EXP 4
3721: PUSH
3722: LD_EXP 4
3726: PPUSH
3727: LD_EXP 4
3731: PUSH
3732: LD_INT 1
3734: PLUS
3735: PPUSH
3736: LD_EXP 36
3740: PPUSH
3741: CALL_OW 2
3745: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3746: LD_ADDR_EXP 35
3750: PUSH
3751: LD_STRING Simms
3753: PPUSH
3754: LD_EXP 1
3758: NOT
3759: PPUSH
3760: LD_STRING 10c_
3762: PPUSH
3763: CALL 32295 0 3
3767: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3768: LD_ADDR_EXP 34
3772: PUSH
3773: LD_STRING Kikuchi
3775: PPUSH
3776: LD_EXP 1
3780: NOT
3781: PPUSH
3782: LD_STRING 11_
3784: PPUSH
3785: CALL 32295 0 3
3789: ST_TO_ADDR
// if Kikuchi then
3790: LD_EXP 34
3794: IFFALSE 3825
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3796: LD_ADDR_EXP 4
3800: PUSH
3801: LD_EXP 4
3805: PPUSH
3806: LD_EXP 4
3810: PUSH
3811: LD_INT 1
3813: PLUS
3814: PPUSH
3815: LD_EXP 34
3819: PPUSH
3820: CALL_OW 2
3824: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
3825: LD_ADDR_EXP 33
3829: PUSH
3830: LD_STRING Frank
3832: PPUSH
3833: LD_EXP 1
3837: NOT
3838: PPUSH
3839: LD_STRING 11_
3841: PPUSH
3842: CALL 32295 0 3
3846: ST_TO_ADDR
// if Frank then
3847: LD_EXP 33
3851: IFFALSE 3882
// friends := Insert ( friends , friends + 1 , Frank ) ;
3853: LD_ADDR_EXP 4
3857: PUSH
3858: LD_EXP 4
3862: PPUSH
3863: LD_EXP 4
3867: PUSH
3868: LD_INT 1
3870: PLUS
3871: PPUSH
3872: LD_EXP 33
3876: PPUSH
3877: CALL_OW 2
3881: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
3882: LD_ADDR_EXP 32
3886: PUSH
3887: LD_STRING Gary
3889: PPUSH
3890: LD_EXP 1
3894: NOT
3895: PPUSH
3896: LD_STRING 11_
3898: PPUSH
3899: CALL 32295 0 3
3903: ST_TO_ADDR
// if Gary then
3904: LD_EXP 32
3908: IFFALSE 3939
// friends := Insert ( friends , friends + 1 , Gary ) ;
3910: LD_ADDR_EXP 4
3914: PUSH
3915: LD_EXP 4
3919: PPUSH
3920: LD_EXP 4
3924: PUSH
3925: LD_INT 1
3927: PLUS
3928: PPUSH
3929: LD_EXP 32
3933: PPUSH
3934: CALL_OW 2
3938: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
3939: LD_ADDR_EXP 31
3943: PUSH
3944: LD_STRING Cornell
3946: PPUSH
3947: LD_EXP 1
3951: NOT
3952: PPUSH
3953: LD_STRING 11_
3955: PPUSH
3956: CALL 32295 0 3
3960: ST_TO_ADDR
// if Cornel then
3961: LD_EXP 31
3965: IFFALSE 3996
// friends := Insert ( friends , friends + 1 , Cornel ) ;
3967: LD_ADDR_EXP 4
3971: PUSH
3972: LD_EXP 4
3976: PPUSH
3977: LD_EXP 4
3981: PUSH
3982: LD_INT 1
3984: PLUS
3985: PPUSH
3986: LD_EXP 31
3990: PPUSH
3991: CALL_OW 2
3995: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
3996: LD_ADDR_EXP 30
4000: PUSH
4001: LD_STRING Houten
4003: PPUSH
4004: LD_EXP 1
4008: NOT
4009: PPUSH
4010: LD_STRING 11_
4012: PPUSH
4013: CALL 32295 0 3
4017: ST_TO_ADDR
// if Houten then
4018: LD_EXP 30
4022: IFFALSE 4053
// friends := Insert ( friends , friends + 1 , Houten ) ;
4024: LD_ADDR_EXP 4
4028: PUSH
4029: LD_EXP 4
4033: PPUSH
4034: LD_EXP 4
4038: PUSH
4039: LD_INT 1
4041: PLUS
4042: PPUSH
4043: LD_EXP 30
4047: PPUSH
4048: CALL_OW 2
4052: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4053: LD_ADDR_EXP 29
4057: PUSH
4058: LD_STRING Gladstone
4060: PPUSH
4061: LD_EXP 1
4065: NOT
4066: PPUSH
4067: LD_STRING 11_
4069: PPUSH
4070: CALL 32295 0 3
4074: ST_TO_ADDR
// if Gladstone then
4075: LD_EXP 29
4079: IFFALSE 4110
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4081: LD_ADDR_EXP 4
4085: PUSH
4086: LD_EXP 4
4090: PPUSH
4091: LD_EXP 4
4095: PUSH
4096: LD_INT 1
4098: PLUS
4099: PPUSH
4100: LD_EXP 29
4104: PPUSH
4105: CALL_OW 2
4109: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4110: LD_ADDR_EXP 23
4114: PUSH
4115: LD_STRING Lisa
4117: PPUSH
4118: LD_EXP 1
4122: NOT
4123: PPUSH
4124: LD_STRING 11_
4126: PPUSH
4127: CALL 32295 0 3
4131: ST_TO_ADDR
// if Lisa then
4132: LD_EXP 23
4136: IFFALSE 4161
// friends := Insert ( friends , 1 , Lisa ) ;
4138: LD_ADDR_EXP 4
4142: PUSH
4143: LD_EXP 4
4147: PPUSH
4148: LD_INT 1
4150: PPUSH
4151: LD_EXP 23
4155: PPUSH
4156: CALL_OW 2
4160: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4161: LD_ADDR_EXP 24
4165: PUSH
4166: LD_STRING Donaldson
4168: PPUSH
4169: LD_EXP 1
4173: NOT
4174: PPUSH
4175: LD_STRING 11_
4177: PPUSH
4178: CALL 32295 0 3
4182: ST_TO_ADDR
// if Donaldson then
4183: LD_EXP 24
4187: IFFALSE 4218
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4189: LD_ADDR_EXP 4
4193: PUSH
4194: LD_EXP 4
4198: PPUSH
4199: LD_EXP 4
4203: PUSH
4204: LD_INT 1
4206: PLUS
4207: PPUSH
4208: LD_EXP 24
4212: PPUSH
4213: CALL_OW 2
4217: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4218: LD_ADDR_EXP 25
4222: PUSH
4223: LD_STRING Bobby
4225: PPUSH
4226: LD_EXP 1
4230: NOT
4231: PPUSH
4232: LD_STRING 11_
4234: PPUSH
4235: CALL 32295 0 3
4239: ST_TO_ADDR
// if Bobby then
4240: LD_EXP 25
4244: IFFALSE 4275
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4246: LD_ADDR_EXP 4
4250: PUSH
4251: LD_EXP 4
4255: PPUSH
4256: LD_EXP 4
4260: PUSH
4261: LD_INT 1
4263: PLUS
4264: PPUSH
4265: LD_EXP 25
4269: PPUSH
4270: CALL_OW 2
4274: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4275: LD_ADDR_EXP 26
4279: PUSH
4280: LD_STRING Cyrus
4282: PPUSH
4283: LD_EXP 1
4287: NOT
4288: PPUSH
4289: LD_STRING 11_
4291: PPUSH
4292: CALL 32295 0 3
4296: ST_TO_ADDR
// if Cyrus then
4297: LD_EXP 26
4301: IFFALSE 4332
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4303: LD_ADDR_EXP 4
4307: PUSH
4308: LD_EXP 4
4312: PPUSH
4313: LD_EXP 4
4317: PUSH
4318: LD_INT 1
4320: PLUS
4321: PPUSH
4322: LD_EXP 26
4326: PPUSH
4327: CALL_OW 2
4331: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4332: LD_ADDR_EXP 27
4336: PUSH
4337: LD_STRING Denis
4339: PPUSH
4340: LD_EXP 1
4344: NOT
4345: PPUSH
4346: LD_STRING 11_
4348: PPUSH
4349: CALL 32295 0 3
4353: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4354: LD_ADDR_EXP 28
4358: PUSH
4359: LD_STRING Brown
4361: PPUSH
4362: LD_EXP 1
4366: NOT
4367: PPUSH
4368: LD_STRING 11_
4370: PPUSH
4371: CALL 32295 0 3
4375: ST_TO_ADDR
// if Brown then
4376: LD_EXP 28
4380: IFFALSE 4411
// friends := Insert ( friends , friends + 1 , Brown ) ;
4382: LD_ADDR_EXP 4
4386: PUSH
4387: LD_EXP 4
4391: PPUSH
4392: LD_EXP 4
4396: PUSH
4397: LD_INT 1
4399: PLUS
4400: PPUSH
4401: LD_EXP 28
4405: PPUSH
4406: CALL_OW 2
4410: ST_TO_ADDR
// friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4411: LD_ADDR_EXP 4
4415: PUSH
4416: LD_EXP 4
4420: PUSH
4421: LD_STRING 11c_others
4423: PPUSH
4424: CALL_OW 31
4428: ADD
4429: PUSH
4430: LD_STRING 11_others
4432: PPUSH
4433: CALL_OW 31
4437: ADD
4438: ST_TO_ADDR
// if friends < 18 then
4439: LD_EXP 4
4443: PUSH
4444: LD_INT 18
4446: LESS
4447: IFFALSE 4519
// for i = 1 to 18 do
4449: LD_ADDR_VAR 0 2
4453: PUSH
4454: DOUBLE
4455: LD_INT 1
4457: DEC
4458: ST_TO_ADDR
4459: LD_INT 18
4461: PUSH
4462: FOR_TO
4463: IFFALSE 4517
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4465: LD_INT 0
4467: PPUSH
4468: LD_INT 1
4470: PPUSH
4471: LD_INT 4
4473: PPUSH
4474: CALL_OW 12
4478: PPUSH
4479: LD_INT 7
4481: PPUSH
4482: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4486: LD_ADDR_EXP 4
4490: PUSH
4491: LD_EXP 4
4495: PPUSH
4496: LD_EXP 4
4500: PUSH
4501: LD_INT 1
4503: PLUS
4504: PPUSH
4505: CALL_OW 44
4509: PPUSH
4510: CALL_OW 2
4514: ST_TO_ADDR
// end ;
4515: GO 4462
4517: POP
4518: POP
// for i in friends do
4519: LD_ADDR_VAR 0 2
4523: PUSH
4524: LD_EXP 4
4528: PUSH
4529: FOR_IN
4530: IFFALSE 4588
// if GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4532: LD_VAR 0 2
4536: PPUSH
4537: LD_INT 1
4539: PPUSH
4540: CALL_OW 259
4544: PUSH
4545: LD_VAR 0 2
4549: PPUSH
4550: LD_INT 4
4552: PPUSH
4553: CALL_OW 259
4557: GREATEREQUAL
4558: IFFALSE 4574
// SetClass ( i , class_soldier ) else
4560: LD_VAR 0 2
4564: PPUSH
4565: LD_INT 1
4567: PPUSH
4568: CALL_OW 336
4572: GO 4586
// SetClass ( i , class_scientistic ) ;
4574: LD_VAR 0 2
4578: PPUSH
4579: LD_INT 4
4581: PPUSH
4582: CALL_OW 336
4586: GO 4529
4588: POP
4589: POP
// if Frank then
4590: LD_EXP 33
4594: IFFALSE 4608
// SetClass ( Frank , class_sniper ) ;
4596: LD_EXP 33
4600: PPUSH
4601: LD_INT 5
4603: PPUSH
4604: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4608: LD_EXP 36
4612: PUSH
4613: LD_EXP 27
4617: PUSH
4618: LD_EXP 37
4622: PUSH
4623: LD_EXP 35
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: PPUSH
4634: LD_INT 4
4636: PPUSH
4637: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4641: LD_ADDR_EXP 3
4645: PUSH
4646: LD_STRING 
4648: PPUSH
4649: LD_INT 7
4651: PPUSH
4652: LD_INT 7
4654: PPUSH
4655: LD_INT -6
4657: PUSH
4658: LD_EXP 14
4662: PUSH
4663: LD_EXP 15
4667: PUSH
4668: LD_EXP 35
4672: PUSH
4673: LD_EXP 27
4677: PUSH
4678: LD_EXP 37
4682: PUSH
4683: LD_INT -2
4685: PUSH
4686: LD_INT -3
4688: PUSH
4689: LD_INT -5
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: PUSH
4703: LD_EXP 4
4707: ADD
4708: PPUSH
4709: LD_INT 1
4711: PUSH
4712: LD_INT 4
4714: PUSH
4715: LD_INT 2
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: PUSH
4722: LD_INT 5
4724: PUSH
4725: LD_INT 0
4727: PUSH
4728: LD_INT 3
4730: PUSH
4731: EMPTY
4732: LIST
4733: LIST
4734: LIST
4735: PUSH
4736: EMPTY
4737: LIST
4738: LIST
4739: LIST
4740: PPUSH
4741: CALL_OW 42
4745: ST_TO_ADDR
// if Simms then
4746: LD_EXP 35
4750: IFFALSE 4768
// selected := selected ^ Simms ;
4752: LD_ADDR_EXP 3
4756: PUSH
4757: LD_EXP 3
4761: PUSH
4762: LD_EXP 35
4766: ADD
4767: ST_TO_ADDR
// if Denis then
4768: LD_EXP 27
4772: IFFALSE 4790
// selected := selected ^ Denis ;
4774: LD_ADDR_EXP 3
4778: PUSH
4779: LD_EXP 3
4783: PUSH
4784: LD_EXP 27
4788: ADD
4789: ST_TO_ADDR
// if DeltaDoctor then
4790: LD_EXP 37
4794: IFFALSE 4812
// selected := selected ^ DeltaDoctor ;
4796: LD_ADDR_EXP 3
4800: PUSH
4801: LD_EXP 3
4805: PUSH
4806: LD_EXP 37
4810: ADD
4811: ST_TO_ADDR
// friends := friends diff selected ;
4812: LD_ADDR_EXP 4
4816: PUSH
4817: LD_EXP 4
4821: PUSH
4822: LD_EXP 3
4826: DIFF
4827: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
4828: LD_ADDR_VAR 0 4
4832: PUSH
4833: LD_INT 111
4835: PUSH
4836: LD_INT 137
4838: PUSH
4839: LD_INT 51
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: LIST
4846: PUSH
4847: LD_INT 147
4849: PUSH
4850: LD_INT 129
4852: PUSH
4853: LD_INT 25
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: LIST
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
4865: LD_ADDR_VAR 0 5
4869: PUSH
4870: LD_INT 5
4872: PUSH
4873: LD_INT 6
4875: PUSH
4876: LD_INT 7
4878: PUSH
4879: LD_INT 8
4881: PUSH
4882: LD_INT 17
4884: PUSH
4885: LD_INT 18
4887: PUSH
4888: EMPTY
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: ST_TO_ADDR
// for i in buildings do
4896: LD_ADDR_VAR 0 2
4900: PUSH
4901: LD_VAR 0 4
4905: PUSH
4906: FOR_IN
4907: IFFALSE 4923
// SetSide ( i , 4 ) ;
4909: LD_VAR 0 2
4913: PPUSH
4914: LD_INT 4
4916: PPUSH
4917: CALL_OW 235
4921: GO 4906
4923: POP
4924: POP
// for i in selected do
4925: LD_ADDR_VAR 0 2
4929: PUSH
4930: LD_EXP 3
4934: PUSH
4935: FOR_IN
4936: IFFALSE 5276
// begin if GetClass ( i ) in [ 1 , 5 ] then
4938: LD_VAR 0 2
4942: PPUSH
4943: CALL_OW 257
4947: PUSH
4948: LD_INT 1
4950: PUSH
4951: LD_INT 5
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: IN
4958: IFFALSE 5118
// begin if buildings [ 1 ] then
4960: LD_VAR 0 4
4964: PUSH
4965: LD_INT 1
4967: ARRAY
4968: IFFALSE 5029
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
4970: LD_VAR 0 2
4974: PPUSH
4975: LD_VAR 0 4
4979: PUSH
4980: LD_INT 1
4982: ARRAY
4983: PUSH
4984: LD_INT 1
4986: ARRAY
4987: PPUSH
4988: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
4992: LD_ADDR_VAR 0 4
4996: PUSH
4997: LD_VAR 0 4
5001: PPUSH
5002: LD_INT 1
5004: PPUSH
5005: LD_VAR 0 4
5009: PUSH
5010: LD_INT 1
5012: ARRAY
5013: PPUSH
5014: LD_INT 1
5016: PPUSH
5017: CALL_OW 3
5021: PPUSH
5022: CALL_OW 1
5026: ST_TO_ADDR
// end else
5027: GO 5116
// begin if not areas then
5029: LD_VAR 0 5
5033: NOT
5034: IFFALSE 5068
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5036: LD_VAR 0 2
5040: PPUSH
5041: LD_INT 87
5043: PPUSH
5044: LD_INT 68
5046: PPUSH
5047: LD_INT 8
5049: PPUSH
5050: LD_INT 0
5052: PPUSH
5053: CALL_OW 50
// ComHold ( i ) ;
5057: LD_VAR 0 2
5061: PPUSH
5062: CALL_OW 140
// end else
5066: GO 5116
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5068: LD_VAR 0 2
5072: PPUSH
5073: LD_VAR 0 5
5077: PUSH
5078: LD_INT 1
5080: ARRAY
5081: PPUSH
5082: LD_INT 0
5084: PPUSH
5085: CALL_OW 49
// ComHold ( i ) ;
5089: LD_VAR 0 2
5093: PPUSH
5094: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5098: LD_ADDR_VAR 0 5
5102: PUSH
5103: LD_VAR 0 5
5107: PPUSH
5108: LD_INT 1
5110: PPUSH
5111: CALL_OW 3
5115: ST_TO_ADDR
// end ; end ; end else
5116: GO 5274
// begin if buildings [ 2 ] then
5118: LD_VAR 0 4
5122: PUSH
5123: LD_INT 2
5125: ARRAY
5126: IFFALSE 5187
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5128: LD_VAR 0 2
5132: PPUSH
5133: LD_VAR 0 4
5137: PUSH
5138: LD_INT 2
5140: ARRAY
5141: PUSH
5142: LD_INT 1
5144: ARRAY
5145: PPUSH
5146: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5150: LD_ADDR_VAR 0 4
5154: PUSH
5155: LD_VAR 0 4
5159: PPUSH
5160: LD_INT 2
5162: PPUSH
5163: LD_VAR 0 4
5167: PUSH
5168: LD_INT 2
5170: ARRAY
5171: PPUSH
5172: LD_INT 1
5174: PPUSH
5175: CALL_OW 3
5179: PPUSH
5180: CALL_OW 1
5184: ST_TO_ADDR
// end else
5185: GO 5274
// begin if not areas then
5187: LD_VAR 0 5
5191: NOT
5192: IFFALSE 5226
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5194: LD_VAR 0 2
5198: PPUSH
5199: LD_INT 87
5201: PPUSH
5202: LD_INT 68
5204: PPUSH
5205: LD_INT 8
5207: PPUSH
5208: LD_INT 0
5210: PPUSH
5211: CALL_OW 50
// ComHold ( i ) ;
5215: LD_VAR 0 2
5219: PPUSH
5220: CALL_OW 140
// end else
5224: GO 5274
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5226: LD_VAR 0 2
5230: PPUSH
5231: LD_VAR 0 5
5235: PUSH
5236: LD_INT 1
5238: ARRAY
5239: PPUSH
5240: LD_INT 0
5242: PPUSH
5243: CALL_OW 49
// ComHold ( i ) ;
5247: LD_VAR 0 2
5251: PPUSH
5252: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5256: LD_ADDR_VAR 0 5
5260: PUSH
5261: LD_VAR 0 5
5265: PPUSH
5266: LD_INT 1
5268: PPUSH
5269: CALL_OW 3
5273: ST_TO_ADDR
// end ; end ; end ; end ;
5274: GO 4935
5276: POP
5277: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5278: LD_ADDR_VAR 0 6
5282: PUSH
5283: LD_INT 22
5285: PUSH
5286: LD_INT 1
5288: PUSH
5289: EMPTY
5290: LIST
5291: LIST
5292: PUSH
5293: LD_INT 30
5295: PUSH
5296: LD_INT 32
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: PPUSH
5307: CALL_OW 69
5311: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5312: LD_ADDR_VAR 0 2
5316: PUSH
5317: DOUBLE
5318: LD_VAR 0 6
5322: PUSH
5323: LD_EXP 4
5327: MINUS
5328: INC
5329: ST_TO_ADDR
5330: LD_INT 1
5332: PUSH
5333: FOR_DOWNTO
5334: IFFALSE 5397
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 ] [ Difficulty ] ) ;
5336: LD_INT 0
5338: PPUSH
5339: LD_INT 1
5341: PPUSH
5342: LD_INT 7
5344: PUSH
5345: LD_INT 8
5347: PUSH
5348: LD_INT 9
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_OWVAR 67
5360: ARRAY
5361: PPUSH
5362: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5366: LD_ADDR_EXP 4
5370: PUSH
5371: LD_EXP 4
5375: PPUSH
5376: LD_EXP 4
5380: PUSH
5381: LD_INT 1
5383: PLUS
5384: PPUSH
5385: CALL_OW 44
5389: PPUSH
5390: CALL_OW 2
5394: ST_TO_ADDR
// end ;
5395: GO 5333
5397: POP
5398: POP
// if friends then
5399: LD_EXP 4
5403: IFFALSE 5519
// begin tmp := friends ;
5405: LD_ADDR_VAR 0 3
5409: PUSH
5410: LD_EXP 4
5414: ST_TO_ADDR
// for i = 1 to bunkers do
5415: LD_ADDR_VAR 0 2
5419: PUSH
5420: DOUBLE
5421: LD_INT 1
5423: DEC
5424: ST_TO_ADDR
5425: LD_VAR 0 6
5429: PUSH
5430: FOR_TO
5431: IFFALSE 5517
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5433: LD_VAR 0 3
5437: PUSH
5438: LD_VAR 0 3
5442: ARRAY
5443: PPUSH
5444: LD_INT 1
5446: PPUSH
5447: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5451: LD_VAR 0 3
5455: PUSH
5456: LD_VAR 0 3
5460: ARRAY
5461: PPUSH
5462: LD_INT 1
5464: PPUSH
5465: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5469: LD_VAR 0 3
5473: PUSH
5474: LD_VAR 0 3
5478: ARRAY
5479: PPUSH
5480: LD_VAR 0 6
5484: PUSH
5485: LD_VAR 0 2
5489: ARRAY
5490: PPUSH
5491: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5495: LD_ADDR_VAR 0 3
5499: PUSH
5500: LD_VAR 0 3
5504: PPUSH
5505: LD_VAR 0 3
5509: PPUSH
5510: CALL_OW 3
5514: ST_TO_ADDR
// end ;
5515: GO 5430
5517: POP
5518: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5519: LD_ADDR_VAR 0 5
5523: PUSH
5524: LD_VAR 0 5
5528: PUSH
5529: LD_INT 9
5531: PUSH
5532: LD_INT 10
5534: PUSH
5535: LD_INT 11
5537: PUSH
5538: LD_INT 12
5540: PUSH
5541: LD_INT 13
5543: PUSH
5544: LD_INT 14
5546: PUSH
5547: LD_INT 15
5549: PUSH
5550: LD_INT 16
5552: PUSH
5553: LD_INT 26
5555: PUSH
5556: LD_INT 27
5558: PUSH
5559: LD_INT 28
5561: PUSH
5562: LD_INT 29
5564: PUSH
5565: LD_INT 30
5567: PUSH
5568: LD_INT 31
5570: PUSH
5571: LD_INT 32
5573: PUSH
5574: LD_INT 33
5576: PUSH
5577: LD_INT 34
5579: PUSH
5580: LD_INT 35
5582: PUSH
5583: LD_INT 36
5585: PUSH
5586: LD_INT 37
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: UNION
5611: ST_TO_ADDR
// for i in friends do
5612: LD_ADDR_VAR 0 2
5616: PUSH
5617: LD_EXP 4
5621: PUSH
5622: FOR_IN
5623: IFFALSE 5910
// begin SetTag ( i , 2 ) ;
5625: LD_VAR 0 2
5629: PPUSH
5630: LD_INT 2
5632: PPUSH
5633: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_scientistic , class_sniper ] then
5637: LD_VAR 0 2
5641: PPUSH
5642: CALL_OW 257
5646: PUSH
5647: LD_INT 1
5649: PUSH
5650: LD_INT 4
5652: PUSH
5653: LD_INT 5
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: LIST
5660: IN
5661: NOT
5662: IFFALSE 5676
// SetClass ( i , 1 ) ;
5664: LD_VAR 0 2
5668: PPUSH
5669: LD_INT 1
5671: PPUSH
5672: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
5676: LD_VAR 0 2
5680: PPUSH
5681: CALL_OW 257
5685: PUSH
5686: LD_INT 1
5688: PUSH
5689: LD_INT 5
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: IN
5696: PUSH
5697: LD_VAR 0 4
5701: PUSH
5702: LD_INT 1
5704: ARRAY
5705: AND
5706: IFFALSE 5767
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5708: LD_VAR 0 2
5712: PPUSH
5713: LD_VAR 0 4
5717: PUSH
5718: LD_INT 1
5720: ARRAY
5721: PUSH
5722: LD_INT 1
5724: ARRAY
5725: PPUSH
5726: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5730: LD_ADDR_VAR 0 4
5734: PUSH
5735: LD_VAR 0 4
5739: PPUSH
5740: LD_INT 1
5742: PPUSH
5743: LD_VAR 0 4
5747: PUSH
5748: LD_INT 1
5750: ARRAY
5751: PPUSH
5752: LD_INT 1
5754: PPUSH
5755: CALL_OW 3
5759: PPUSH
5760: CALL_OW 1
5764: ST_TO_ADDR
// continue ;
5765: GO 5622
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
5767: LD_VAR 0 2
5771: PPUSH
5772: CALL_OW 257
5776: PUSH
5777: LD_INT 4
5779: EQUAL
5780: PUSH
5781: LD_VAR 0 4
5785: PUSH
5786: LD_INT 2
5788: ARRAY
5789: AND
5790: IFFALSE 5851
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5792: LD_VAR 0 2
5796: PPUSH
5797: LD_VAR 0 4
5801: PUSH
5802: LD_INT 2
5804: ARRAY
5805: PUSH
5806: LD_INT 1
5808: ARRAY
5809: PPUSH
5810: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5814: LD_ADDR_VAR 0 4
5818: PUSH
5819: LD_VAR 0 4
5823: PPUSH
5824: LD_INT 2
5826: PPUSH
5827: LD_VAR 0 4
5831: PUSH
5832: LD_INT 2
5834: ARRAY
5835: PPUSH
5836: LD_INT 1
5838: PPUSH
5839: CALL_OW 3
5843: PPUSH
5844: CALL_OW 1
5848: ST_TO_ADDR
// continue ;
5849: GO 5622
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5851: LD_VAR 0 2
5855: PPUSH
5856: LD_VAR 0 5
5860: PUSH
5861: LD_INT 1
5863: ARRAY
5864: PPUSH
5865: LD_INT 0
5867: PPUSH
5868: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
5872: LD_ADDR_VAR 0 5
5876: PUSH
5877: LD_VAR 0 5
5881: PPUSH
5882: LD_INT 1
5884: PPUSH
5885: CALL_OW 3
5889: ST_TO_ADDR
// ComHold ( i ) ;
5890: LD_VAR 0 2
5894: PPUSH
5895: CALL_OW 140
// if not areas then
5899: LD_VAR 0 5
5903: NOT
5904: IFFALSE 5908
// break ;
5906: GO 5910
// end ;
5908: GO 5622
5910: POP
5911: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
5912: LD_EXP 4
5916: PPUSH
5917: LD_INT 3
5919: PUSH
5920: LD_INT 52
5922: PUSH
5923: EMPTY
5924: LIST
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: PPUSH
5930: CALL_OW 72
5934: IFFALSE 6001
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
5936: LD_ADDR_VAR 0 2
5940: PUSH
5941: LD_EXP 4
5945: PPUSH
5946: LD_INT 3
5948: PUSH
5949: LD_INT 52
5951: PUSH
5952: EMPTY
5953: LIST
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: PPUSH
5959: CALL_OW 72
5963: PUSH
5964: FOR_IN
5965: IFFALSE 5999
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
5967: LD_VAR 0 2
5971: PPUSH
5972: LD_INT 65
5974: PPUSH
5975: LD_INT 58
5977: PPUSH
5978: LD_INT 7
5980: PPUSH
5981: LD_INT 0
5983: PPUSH
5984: CALL_OW 50
// ComHold ( i ) ;
5988: LD_VAR 0 2
5992: PPUSH
5993: CALL_OW 140
// end ;
5997: GO 5964
5999: POP
6000: POP
// if Frank then
6001: LD_EXP 33
6005: IFFALSE 6019
// SetClass ( Frank , class_sniper ) ;
6007: LD_EXP 33
6011: PPUSH
6012: LD_INT 5
6014: PPUSH
6015: CALL_OW 336
// end ; end_of_file
6019: LD_VAR 0 1
6023: RET
// export function CanSayRand ( side ) ; begin
6024: LD_INT 0
6026: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6027: LD_ADDR_VAR 0 2
6031: PUSH
6032: LD_INT 52
6034: PUSH
6035: EMPTY
6036: LIST
6037: PUSH
6038: LD_INT 22
6040: PUSH
6041: LD_VAR 0 1
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: PUSH
6050: LD_INT 2
6052: PUSH
6053: LD_INT 25
6055: PUSH
6056: LD_INT 1
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: PUSH
6063: LD_INT 25
6065: PUSH
6066: LD_INT 2
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: PUSH
6073: LD_INT 25
6075: PUSH
6076: LD_INT 3
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: LD_INT 25
6085: PUSH
6086: LD_INT 4
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: LIST
6099: PUSH
6100: EMPTY
6101: LIST
6102: LIST
6103: LIST
6104: PPUSH
6105: CALL_OW 69
6109: PUSH
6110: LD_EXP 14
6114: PUSH
6115: LD_EXP 33
6119: PUSH
6120: LD_EXP 23
6124: PUSH
6125: LD_EXP 24
6129: PUSH
6130: LD_EXP 25
6134: PUSH
6135: LD_EXP 26
6139: PUSH
6140: LD_EXP 27
6144: PUSH
6145: LD_EXP 28
6149: PUSH
6150: LD_EXP 29
6154: PUSH
6155: LD_EXP 30
6159: PUSH
6160: LD_EXP 16
6164: PUSH
6165: LD_EXP 31
6169: PUSH
6170: LD_EXP 32
6174: PUSH
6175: LD_EXP 34
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: DIFF
6196: ST_TO_ADDR
// end ;
6197: LD_VAR 0 2
6201: RET
// export function SayRand ( sex , dial ) ; begin
6202: LD_INT 0
6204: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6205: LD_ADDR_VAR 0 3
6209: PUSH
6210: LD_INT 52
6212: PUSH
6213: EMPTY
6214: LIST
6215: PUSH
6216: LD_INT 22
6218: PUSH
6219: LD_INT 1
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PUSH
6226: LD_INT 26
6228: PUSH
6229: LD_VAR 0 1
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PUSH
6238: LD_INT 2
6240: PUSH
6241: LD_INT 25
6243: PUSH
6244: LD_INT 1
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PUSH
6251: LD_INT 25
6253: PUSH
6254: LD_INT 2
6256: PUSH
6257: EMPTY
6258: LIST
6259: LIST
6260: PUSH
6261: LD_INT 25
6263: PUSH
6264: LD_INT 3
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: LD_INT 25
6273: PUSH
6274: LD_INT 4
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: PUSH
6288: EMPTY
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: PPUSH
6294: CALL_OW 69
6298: PUSH
6299: LD_EXP 14
6303: PUSH
6304: LD_EXP 33
6308: PUSH
6309: LD_EXP 23
6313: PUSH
6314: LD_EXP 24
6318: PUSH
6319: LD_EXP 25
6323: PUSH
6324: LD_EXP 26
6328: PUSH
6329: LD_EXP 27
6333: PUSH
6334: LD_EXP 28
6338: PUSH
6339: LD_EXP 29
6343: PUSH
6344: LD_EXP 30
6348: PUSH
6349: LD_EXP 16
6353: PUSH
6354: LD_EXP 31
6358: PUSH
6359: LD_EXP 32
6363: PUSH
6364: LD_EXP 34
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: DIFF
6385: ST_TO_ADDR
// if not result then
6386: LD_VAR 0 3
6390: NOT
6391: IFFALSE 6395
// exit ;
6393: GO 6423
// result := result [ 1 ] ;
6395: LD_ADDR_VAR 0 3
6399: PUSH
6400: LD_VAR 0 3
6404: PUSH
6405: LD_INT 1
6407: ARRAY
6408: ST_TO_ADDR
// Say ( result , dial ) ;
6409: LD_VAR 0 3
6413: PPUSH
6414: LD_VAR 0 2
6418: PPUSH
6419: CALL_OW 88
// end ;
6423: LD_VAR 0 3
6427: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6428: LD_INT 0
6430: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6431: LD_ADDR_VAR 0 4
6435: PUSH
6436: LD_INT 22
6438: PUSH
6439: LD_INT 1
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PUSH
6446: LD_INT 26
6448: PUSH
6449: LD_VAR 0 1
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PUSH
6458: LD_INT 2
6460: PUSH
6461: LD_INT 25
6463: PUSH
6464: LD_INT 1
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 25
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 25
6483: PUSH
6484: LD_INT 3
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PUSH
6491: LD_INT 25
6493: PUSH
6494: LD_INT 4
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: LIST
6512: PPUSH
6513: CALL_OW 69
6517: PUSH
6518: LD_EXP 14
6522: PUSH
6523: LD_EXP 33
6527: PUSH
6528: LD_EXP 23
6532: PUSH
6533: LD_EXP 24
6537: PUSH
6538: LD_EXP 25
6542: PUSH
6543: LD_EXP 26
6547: PUSH
6548: LD_EXP 27
6552: PUSH
6553: LD_EXP 28
6557: PUSH
6558: LD_EXP 29
6562: PUSH
6563: LD_EXP 30
6567: PUSH
6568: LD_EXP 16
6572: PUSH
6573: LD_EXP 31
6577: PUSH
6578: LD_EXP 32
6582: PUSH
6583: LD_EXP 34
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: LD_VAR 0 3
6608: ADD
6609: DIFF
6610: ST_TO_ADDR
// if not result then
6611: LD_VAR 0 4
6615: NOT
6616: IFFALSE 6620
// exit ;
6618: GO 6648
// result := result [ 1 ] ;
6620: LD_ADDR_VAR 0 4
6624: PUSH
6625: LD_VAR 0 4
6629: PUSH
6630: LD_INT 1
6632: ARRAY
6633: ST_TO_ADDR
// Say ( result , dial ) ;
6634: LD_VAR 0 4
6638: PPUSH
6639: LD_VAR 0 2
6643: PPUSH
6644: CALL_OW 88
// end ;
6648: LD_VAR 0 4
6652: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
6653: LD_INT 0
6655: PPUSH
6656: PPUSH
6657: PPUSH
6658: PPUSH
6659: PPUSH
6660: PPUSH
6661: PPUSH
6662: PPUSH
6663: PPUSH
6664: PPUSH
6665: PPUSH
6666: PPUSH
6667: PPUSH
6668: PPUSH
6669: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
6670: LD_VAR 0 1
6674: NOT
6675: PUSH
6676: LD_VAR 0 2
6680: NOT
6681: OR
6682: PUSH
6683: LD_VAR 0 1
6687: PPUSH
6688: CALL_OW 247
6692: PUSH
6693: LD_INT 3
6695: EQUAL
6696: OR
6697: IFFALSE 6701
// exit ;
6699: GO 8240
// for i = path downto 1 do
6701: LD_ADDR_VAR 0 5
6705: PUSH
6706: DOUBLE
6707: LD_VAR 0 2
6711: INC
6712: ST_TO_ADDR
6713: LD_INT 1
6715: PUSH
6716: FOR_DOWNTO
6717: IFFALSE 6778
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
6719: LD_VAR 0 2
6723: PUSH
6724: LD_VAR 0 5
6728: ARRAY
6729: PUSH
6730: LD_INT 1
6732: ARRAY
6733: PPUSH
6734: LD_VAR 0 2
6738: PUSH
6739: LD_VAR 0 5
6743: ARRAY
6744: PUSH
6745: LD_INT 2
6747: ARRAY
6748: PPUSH
6749: CALL_OW 488
6753: NOT
6754: IFFALSE 6776
// path = Delete ( path , i ) ;
6756: LD_ADDR_VAR 0 2
6760: PUSH
6761: LD_VAR 0 2
6765: PPUSH
6766: LD_VAR 0 5
6770: PPUSH
6771: CALL_OW 3
6775: ST_TO_ADDR
// end ;
6776: GO 6716
6778: POP
6779: POP
// if not path then
6780: LD_VAR 0 2
6784: NOT
6785: IFFALSE 6789
// exit ;
6787: GO 8240
// tmp_path := [ ] ;
6789: LD_ADDR_VAR 0 11
6793: PUSH
6794: EMPTY
6795: ST_TO_ADDR
// if flags then
6796: LD_VAR 0 3
6800: IFFALSE 6874
// begin if flags [ 1 ] then
6802: LD_VAR 0 3
6806: PUSH
6807: LD_INT 1
6809: ARRAY
6810: IFFALSE 6826
// safe_place = flags [ 1 ] ;
6812: LD_ADDR_VAR 0 16
6816: PUSH
6817: LD_VAR 0 3
6821: PUSH
6822: LD_INT 1
6824: ARRAY
6825: ST_TO_ADDR
// if flags [ 2 ] then
6826: LD_VAR 0 3
6830: PUSH
6831: LD_INT 2
6833: ARRAY
6834: IFFALSE 6850
// spot_dist = flags [ 2 ] ;
6836: LD_ADDR_VAR 0 15
6840: PUSH
6841: LD_VAR 0 3
6845: PUSH
6846: LD_INT 2
6848: ARRAY
6849: ST_TO_ADDR
// if flags [ 3 ] then
6850: LD_VAR 0 3
6854: PUSH
6855: LD_INT 3
6857: ARRAY
6858: IFFALSE 6874
// chase_range = flags [ 3 ] ;
6860: LD_ADDR_VAR 0 17
6864: PUSH
6865: LD_VAR 0 3
6869: PUSH
6870: LD_INT 3
6872: ARRAY
6873: ST_TO_ADDR
// end ; if not chase_range then
6874: LD_VAR 0 17
6878: NOT
6879: IFFALSE 6889
// chase_range = 8 ;
6881: LD_ADDR_VAR 0 17
6885: PUSH
6886: LD_INT 8
6888: ST_TO_ADDR
// if not spot_dist then
6889: LD_VAR 0 15
6893: NOT
6894: IFFALSE 6904
// spot_dist := 8 ;
6896: LD_ADDR_VAR 0 15
6900: PUSH
6901: LD_INT 8
6903: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
6904: LD_ADDR_VAR 0 18
6908: PUSH
6909: LD_VAR 0 1
6913: PPUSH
6914: CALL_OW 247
6918: PUSH
6919: LD_INT 2
6921: EQUAL
6922: PUSH
6923: LD_VAR 0 1
6927: PPUSH
6928: CALL_OW 262
6932: PUSH
6933: LD_INT 3
6935: NONEQUAL
6936: AND
6937: ST_TO_ADDR
// status = 1 ;
6938: LD_ADDR_VAR 0 12
6942: PUSH
6943: LD_INT 1
6945: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
6946: LD_ADDR_VAR 0 11
6950: PUSH
6951: LD_INT 1
6953: PUSH
6954: LD_VAR 0 2
6958: PUSH
6959: LD_INT 1
6961: ARRAY
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6967: LD_INT 35
6969: PPUSH
6970: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
6974: LD_VAR 0 18
6978: PUSH
6979: LD_VAR 0 1
6983: PPUSH
6984: CALL_OW 261
6988: PUSH
6989: LD_INT 20
6991: LESS
6992: AND
6993: IFFALSE 7186
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
6995: LD_ADDR_VAR 0 10
6999: PUSH
7000: LD_INT 22
7002: PUSH
7003: LD_VAR 0 1
7007: PPUSH
7008: CALL_OW 255
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: LD_INT 2
7019: PUSH
7020: LD_INT 30
7022: PUSH
7023: LD_INT 0
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: LD_INT 30
7032: PUSH
7033: LD_INT 1
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: LD_INT 30
7042: PUSH
7043: LD_INT 29
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: LD_INT 30
7052: PUSH
7053: LD_INT 3
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PPUSH
7071: CALL_OW 69
7075: ST_TO_ADDR
// if not station then
7076: LD_VAR 0 10
7080: NOT
7081: IFFALSE 7097
// begin SetFuel ( unit , 40 ) ;
7083: LD_VAR 0 1
7087: PPUSH
7088: LD_INT 40
7090: PPUSH
7091: CALL_OW 240
// continue ;
7095: GO 6967
// end ; status := 6 ;
7097: LD_ADDR_VAR 0 12
7101: PUSH
7102: LD_INT 6
7104: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7105: LD_ADDR_VAR 0 10
7109: PUSH
7110: LD_VAR 0 10
7114: PPUSH
7115: LD_VAR 0 1
7119: PPUSH
7120: CALL_OW 74
7124: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7125: LD_INT 35
7127: PPUSH
7128: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7132: LD_VAR 0 1
7136: PPUSH
7137: LD_VAR 0 10
7141: PPUSH
7142: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7146: LD_VAR 0 1
7150: PPUSH
7151: LD_VAR 0 10
7155: PPUSH
7156: CALL_OW 296
7160: PUSH
7161: LD_INT 6
7163: LESS
7164: IFFALSE 7125
// SetFuel ( unit , 100 ) ;
7166: LD_VAR 0 1
7170: PPUSH
7171: LD_INT 100
7173: PPUSH
7174: CALL_OW 240
// status := 5 ;
7178: LD_ADDR_VAR 0 12
7182: PUSH
7183: LD_INT 5
7185: ST_TO_ADDR
// end ; if status = 1 then
7186: LD_VAR 0 12
7190: PUSH
7191: LD_INT 1
7193: EQUAL
7194: IFFALSE 7570
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7196: LD_ADDR_VAR 0 13
7200: PUSH
7201: LD_INT 81
7203: PUSH
7204: LD_VAR 0 1
7208: PPUSH
7209: CALL_OW 255
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: PUSH
7218: LD_INT 3
7220: PUSH
7221: LD_INT 21
7223: PUSH
7224: LD_INT 3
7226: PUSH
7227: EMPTY
7228: LIST
7229: LIST
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 91
7237: PUSH
7238: LD_VAR 0 1
7242: PUSH
7243: LD_VAR 0 15
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 101
7255: PUSH
7256: LD_INT 1
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: PPUSH
7269: CALL_OW 69
7273: ST_TO_ADDR
// for i in enemy do
7274: LD_ADDR_VAR 0 5
7278: PUSH
7279: LD_VAR 0 13
7283: PUSH
7284: FOR_IN
7285: IFFALSE 7316
// if IsInvisible ( i ) then
7287: LD_VAR 0 5
7291: PPUSH
7292: CALL_OW 571
7296: IFFALSE 7314
// enemy := enemy diff i ;
7298: LD_ADDR_VAR 0 13
7302: PUSH
7303: LD_VAR 0 13
7307: PUSH
7308: LD_VAR 0 5
7312: DIFF
7313: ST_TO_ADDR
7314: GO 7284
7316: POP
7317: POP
// if enemy then
7318: LD_VAR 0 13
7322: IFFALSE 7372
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7324: LD_VAR 0 1
7328: PPUSH
7329: LD_VAR 0 1
7333: PPUSH
7334: CALL_OW 250
7338: PPUSH
7339: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7343: LD_VAR 0 1
7347: PPUSH
7348: LD_VAR 0 1
7352: PPUSH
7353: CALL_OW 251
7357: PPUSH
7358: CALL_OW 232
// status = 2 ;
7362: LD_ADDR_VAR 0 12
7366: PUSH
7367: LD_INT 2
7369: ST_TO_ADDR
// end else
7370: GO 7570
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7372: LD_VAR 0 1
7376: PPUSH
7377: LD_VAR 0 11
7381: PUSH
7382: LD_INT 2
7384: ARRAY
7385: PUSH
7386: LD_INT 1
7388: ARRAY
7389: PPUSH
7390: LD_VAR 0 11
7394: PUSH
7395: LD_INT 2
7397: ARRAY
7398: PUSH
7399: LD_INT 2
7401: ARRAY
7402: PPUSH
7403: CALL_OW 307
7407: PUSH
7408: LD_VAR 0 1
7412: PPUSH
7413: CALL_OW 314
7417: NOT
7418: OR
7419: IFFALSE 7570
// begin wait ( 0 0$2 ) ;
7421: LD_INT 70
7423: PPUSH
7424: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7428: LD_VAR 0 11
7432: PUSH
7433: LD_INT 1
7435: ARRAY
7436: PUSH
7437: LD_INT 1
7439: PLUS
7440: PUSH
7441: LD_VAR 0 2
7445: GREATER
7446: IFFALSE 7471
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7448: LD_ADDR_VAR 0 11
7452: PUSH
7453: LD_VAR 0 11
7457: PPUSH
7458: LD_INT 1
7460: PPUSH
7461: LD_INT 1
7463: PPUSH
7464: CALL_OW 1
7468: ST_TO_ADDR
7469: GO 7502
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7471: LD_ADDR_VAR 0 11
7475: PUSH
7476: LD_VAR 0 11
7480: PPUSH
7481: LD_INT 1
7483: PPUSH
7484: LD_VAR 0 11
7488: PUSH
7489: LD_INT 1
7491: ARRAY
7492: PUSH
7493: LD_INT 1
7495: PLUS
7496: PPUSH
7497: CALL_OW 1
7501: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7502: LD_ADDR_VAR 0 11
7506: PUSH
7507: LD_VAR 0 11
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: LD_VAR 0 2
7519: PUSH
7520: LD_VAR 0 11
7524: PUSH
7525: LD_INT 1
7527: ARRAY
7528: ARRAY
7529: PPUSH
7530: CALL_OW 1
7534: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7535: LD_VAR 0 1
7539: PPUSH
7540: LD_VAR 0 11
7544: PUSH
7545: LD_INT 2
7547: ARRAY
7548: PUSH
7549: LD_INT 1
7551: ARRAY
7552: PPUSH
7553: LD_VAR 0 11
7557: PUSH
7558: LD_INT 2
7560: ARRAY
7561: PUSH
7562: LD_INT 2
7564: ARRAY
7565: PPUSH
7566: CALL_OW 114
// end ; end ; end ; if status = 2 then
7570: LD_VAR 0 12
7574: PUSH
7575: LD_INT 2
7577: EQUAL
7578: IFFALSE 7799
// begin if GetLives ( unit ) < 650 and safe_place then
7580: LD_VAR 0 1
7584: PPUSH
7585: CALL_OW 256
7589: PUSH
7590: LD_INT 650
7592: LESS
7593: PUSH
7594: LD_VAR 0 16
7598: AND
7599: IFFALSE 7611
// begin status = 3 ;
7601: LD_ADDR_VAR 0 12
7605: PUSH
7606: LD_INT 3
7608: ST_TO_ADDR
// continue ;
7609: GO 6967
// end ; x := GetRememberedX ( unit ) ;
7611: LD_ADDR_VAR 0 6
7615: PUSH
7616: LD_VAR 0 1
7620: PPUSH
7621: CALL_OW 252
7625: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7626: LD_ADDR_VAR 0 7
7630: PUSH
7631: LD_VAR 0 1
7635: PPUSH
7636: CALL_OW 253
7640: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
7641: LD_ADDR_VAR 0 13
7645: PUSH
7646: LD_INT 81
7648: PUSH
7649: LD_VAR 0 1
7653: PPUSH
7654: CALL_OW 255
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PUSH
7663: LD_INT 92
7665: PUSH
7666: LD_VAR 0 6
7670: PUSH
7671: LD_VAR 0 7
7675: PUSH
7676: LD_VAR 0 15
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: PUSH
7687: LD_INT 101
7689: PUSH
7690: LD_INT 1
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 69
7706: ST_TO_ADDR
// if enemy then
7707: LD_VAR 0 13
7711: IFFALSE 7782
// begin e := NearestUnitToUnit ( enemy , unit ) ;
7713: LD_ADDR_VAR 0 14
7717: PUSH
7718: LD_VAR 0 13
7722: PPUSH
7723: LD_VAR 0 1
7727: PPUSH
7728: CALL_OW 74
7732: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
7733: LD_VAR 0 14
7737: PPUSH
7738: LD_VAR 0 6
7742: PPUSH
7743: LD_VAR 0 7
7747: PPUSH
7748: CALL_OW 297
7752: PUSH
7753: LD_VAR 0 15
7757: PUSH
7758: LD_VAR 0 17
7762: PLUS
7763: LESS
7764: IFFALSE 7780
// ComAttackUnit ( unit , e ) ;
7766: LD_VAR 0 1
7770: PPUSH
7771: LD_VAR 0 14
7775: PPUSH
7776: CALL_OW 115
// end else
7780: GO 7799
// begin ComStop ( unit ) ;
7782: LD_VAR 0 1
7786: PPUSH
7787: CALL_OW 141
// status = 5 ;
7791: LD_ADDR_VAR 0 12
7795: PUSH
7796: LD_INT 5
7798: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
7799: LD_VAR 0 12
7803: PUSH
7804: LD_INT 3
7806: EQUAL
7807: PUSH
7808: LD_VAR 0 16
7812: AND
7813: IFFALSE 7899
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
7815: LD_VAR 0 1
7819: PPUSH
7820: LD_VAR 0 16
7824: PUSH
7825: LD_INT 1
7827: ARRAY
7828: PPUSH
7829: LD_VAR 0 16
7833: PUSH
7834: LD_INT 2
7836: ARRAY
7837: PPUSH
7838: CALL_OW 111
// wait ( 0 0$1 ) ;
7842: LD_INT 35
7844: PPUSH
7845: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
7849: LD_VAR 0 1
7853: PPUSH
7854: LD_VAR 0 16
7858: PUSH
7859: LD_INT 1
7861: ARRAY
7862: PPUSH
7863: LD_VAR 0 16
7867: PUSH
7868: LD_INT 2
7870: ARRAY
7871: PPUSH
7872: CALL_OW 297
7876: PUSH
7877: LD_INT 4
7879: LESS
7880: IFFALSE 7815
// ComStop ( unit ) ;
7882: LD_VAR 0 1
7886: PPUSH
7887: CALL_OW 141
// status = 4 ;
7891: LD_ADDR_VAR 0 12
7895: PUSH
7896: LD_INT 4
7898: ST_TO_ADDR
// end ; if status = 4 then
7899: LD_VAR 0 12
7903: PUSH
7904: LD_INT 4
7906: EQUAL
7907: IFFALSE 7939
// begin repeat wait ( 0 0$1 ) ;
7909: LD_INT 35
7911: PPUSH
7912: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
7916: LD_VAR 0 1
7920: PPUSH
7921: CALL_OW 256
7925: PUSH
7926: LD_INT 1000
7928: EQUAL
7929: IFFALSE 7909
// status = 5 ;
7931: LD_ADDR_VAR 0 12
7935: PUSH
7936: LD_INT 5
7938: ST_TO_ADDR
// end ; if status = 5 then
7939: LD_VAR 0 12
7943: PUSH
7944: LD_INT 5
7946: EQUAL
7947: IFFALSE 8229
// begin p := 999 ;
7949: LD_ADDR_VAR 0 9
7953: PUSH
7954: LD_INT 999
7956: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
7957: LD_ADDR_VAR 0 14
7961: PUSH
7962: LD_VAR 0 11
7966: PUSH
7967: LD_INT 2
7969: ARRAY
7970: PUSH
7971: LD_INT 1
7973: ARRAY
7974: PUSH
7975: LD_VAR 0 11
7979: PUSH
7980: LD_INT 2
7982: ARRAY
7983: PUSH
7984: LD_INT 2
7986: ARRAY
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: ST_TO_ADDR
// c := 1 ;
7992: LD_ADDR_VAR 0 8
7996: PUSH
7997: LD_INT 1
7999: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8000: LD_ADDR_VAR 0 5
8004: PUSH
8005: DOUBLE
8006: LD_INT 1
8008: DEC
8009: ST_TO_ADDR
8010: LD_VAR 0 11
8014: PUSH
8015: LD_INT 2
8017: ARRAY
8018: PUSH
8019: LD_INT 2
8021: DIV
8022: PUSH
8023: FOR_TO
8024: IFFALSE 8156
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8026: LD_ADDR_VAR 0 6
8030: PUSH
8031: LD_VAR 0 1
8035: PPUSH
8036: LD_VAR 0 11
8040: PUSH
8041: LD_INT 2
8043: ARRAY
8044: PUSH
8045: LD_VAR 0 8
8049: ARRAY
8050: PPUSH
8051: LD_VAR 0 11
8055: PUSH
8056: LD_INT 2
8058: ARRAY
8059: PUSH
8060: LD_VAR 0 8
8064: PUSH
8065: LD_INT 1
8067: PLUS
8068: ARRAY
8069: PPUSH
8070: CALL_OW 297
8074: ST_TO_ADDR
// if x < p then
8075: LD_VAR 0 6
8079: PUSH
8080: LD_VAR 0 9
8084: LESS
8085: IFFALSE 8140
// begin p := x ;
8087: LD_ADDR_VAR 0 9
8091: PUSH
8092: LD_VAR 0 6
8096: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8097: LD_ADDR_VAR 0 14
8101: PUSH
8102: LD_VAR 0 11
8106: PUSH
8107: LD_INT 2
8109: ARRAY
8110: PUSH
8111: LD_VAR 0 8
8115: ARRAY
8116: PUSH
8117: LD_VAR 0 11
8121: PUSH
8122: LD_INT 2
8124: ARRAY
8125: PUSH
8126: LD_VAR 0 8
8130: PUSH
8131: LD_INT 1
8133: PLUS
8134: ARRAY
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: ST_TO_ADDR
// end ; c = c + 2 ;
8140: LD_ADDR_VAR 0 8
8144: PUSH
8145: LD_VAR 0 8
8149: PUSH
8150: LD_INT 2
8152: PLUS
8153: ST_TO_ADDR
// end ;
8154: GO 8023
8156: POP
8157: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8158: LD_VAR 0 1
8162: PPUSH
8163: LD_VAR 0 14
8167: PUSH
8168: LD_INT 1
8170: ARRAY
8171: PPUSH
8172: LD_VAR 0 14
8176: PUSH
8177: LD_INT 2
8179: ARRAY
8180: PPUSH
8181: CALL_OW 111
// wait ( 0 0$1 ) ;
8185: LD_INT 35
8187: PPUSH
8188: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8192: LD_VAR 0 1
8196: PPUSH
8197: LD_VAR 0 14
8201: PUSH
8202: LD_INT 1
8204: ARRAY
8205: PPUSH
8206: LD_VAR 0 14
8210: PUSH
8211: LD_INT 2
8213: ARRAY
8214: PPUSH
8215: CALL_OW 307
8219: IFFALSE 8158
// status = 1 ;
8221: LD_ADDR_VAR 0 12
8225: PUSH
8226: LD_INT 1
8228: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8229: LD_VAR 0 1
8233: PPUSH
8234: CALL_OW 301
8238: IFFALSE 6967
// end ;
8240: LD_VAR 0 4
8244: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8245: LD_INT 0
8247: PPUSH
8248: PPUSH
8249: PPUSH
8250: PPUSH
8251: PPUSH
8252: PPUSH
8253: PPUSH
8254: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8255: LD_VAR 0 1
8259: NOT
8260: PUSH
8261: LD_VAR 0 3
8265: NOT
8266: OR
8267: PUSH
8268: LD_VAR 0 4
8272: PUSH
8273: LD_INT 1
8275: PUSH
8276: LD_INT 2
8278: PUSH
8279: LD_INT 0
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: LIST
8286: IN
8287: NOT
8288: OR
8289: PUSH
8290: LD_VAR 0 6
8294: NOT
8295: OR
8296: PUSH
8297: LD_VAR 0 7
8301: NOT
8302: OR
8303: IFFALSE 8307
// exit ;
8305: GO 8698
// sex_id :=  ;
8307: LD_ADDR_VAR 0 14
8311: PUSH
8312: LD_STRING 
8314: ST_TO_ADDR
// case class of 1 :
8315: LD_VAR 0 5
8319: PUSH
8320: LD_INT 1
8322: DOUBLE
8323: EQUAL
8324: IFTRUE 8328
8326: GO 8339
8328: POP
// class_id := Sol ; 2 :
8329: LD_ADDR_VAR 0 15
8333: PUSH
8334: LD_STRING Sol
8336: ST_TO_ADDR
8337: GO 8397
8339: LD_INT 2
8341: DOUBLE
8342: EQUAL
8343: IFTRUE 8347
8345: GO 8358
8347: POP
// class_id := Eng ; 3 :
8348: LD_ADDR_VAR 0 15
8352: PUSH
8353: LD_STRING Eng
8355: ST_TO_ADDR
8356: GO 8397
8358: LD_INT 3
8360: DOUBLE
8361: EQUAL
8362: IFTRUE 8366
8364: GO 8377
8366: POP
// class_id := Mech ; 4 :
8367: LD_ADDR_VAR 0 15
8371: PUSH
8372: LD_STRING Mech
8374: ST_TO_ADDR
8375: GO 8397
8377: LD_INT 4
8379: DOUBLE
8380: EQUAL
8381: IFTRUE 8385
8383: GO 8396
8385: POP
// class_id := Sci ; end ;
8386: LD_ADDR_VAR 0 15
8390: PUSH
8391: LD_STRING Sci
8393: ST_TO_ADDR
8394: GO 8397
8396: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8397: LD_ADDR_VAR 0 11
8401: PUSH
8402: LD_VAR 0 1
8406: PPUSH
8407: LD_INT 25
8409: PUSH
8410: LD_VAR 0 5
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PPUSH
8419: CALL_OW 72
8423: ST_TO_ADDR
// if tmp then
8424: LD_VAR 0 11
8428: IFFALSE 8440
// units := tmp ;
8430: LD_ADDR_VAR 0 1
8434: PUSH
8435: LD_VAR 0 11
8439: ST_TO_ADDR
// if sex then
8440: LD_VAR 0 4
8444: IFFALSE 8500
// begin if sex = sex_female then
8446: LD_VAR 0 4
8450: PUSH
8451: LD_INT 2
8453: EQUAL
8454: IFFALSE 8464
// sex_id := F ;
8456: LD_ADDR_VAR 0 14
8460: PUSH
8461: LD_STRING F
8463: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8464: LD_ADDR_VAR 0 1
8468: PUSH
8469: LD_VAR 0 1
8473: PPUSH
8474: LD_INT 26
8476: PUSH
8477: LD_VAR 0 4
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PPUSH
8486: CALL_OW 72
8490: ST_TO_ADDR
// if not units then
8491: LD_VAR 0 1
8495: NOT
8496: IFFALSE 8500
// exit ;
8498: GO 8698
// end ; unit_id := id ;
8500: LD_ADDR_VAR 0 12
8504: PUSH
8505: LD_VAR 0 6
8509: ST_TO_ADDR
// if unit_id > units then
8510: LD_VAR 0 12
8514: PUSH
8515: LD_VAR 0 1
8519: GREATER
8520: IFFALSE 8530
// unit_id := 1 ;
8522: LD_ADDR_VAR 0 12
8526: PUSH
8527: LD_INT 1
8529: ST_TO_ADDR
// if not units [ unit_id ] then
8530: LD_VAR 0 1
8534: PUSH
8535: LD_VAR 0 12
8539: ARRAY
8540: NOT
8541: IFFALSE 8545
// exit ;
8543: GO 8698
// unit := units [ unit_id ] ;
8545: LD_ADDR_VAR 0 10
8549: PUSH
8550: LD_VAR 0 1
8554: PUSH
8555: LD_VAR 0 12
8559: ARRAY
8560: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8561: LD_ADDR_VAR 0 13
8565: PUSH
8566: LD_STRING D
8568: PUSH
8569: LD_VAR 0 3
8573: STR
8574: PUSH
8575: LD_STRING -
8577: STR
8578: PUSH
8579: LD_VAR 0 14
8583: STR
8584: PUSH
8585: LD_VAR 0 15
8589: STR
8590: PUSH
8591: LD_VAR 0 6
8595: STR
8596: PUSH
8597: LD_STRING -
8599: STR
8600: PUSH
8601: LD_VAR 0 7
8605: STR
8606: ST_TO_ADDR
// case type of 0 :
8607: LD_VAR 0 2
8611: PUSH
8612: LD_INT 0
8614: DOUBLE
8615: EQUAL
8616: IFTRUE 8620
8618: GO 8637
8620: POP
// Say ( unit , dialog_id ) ; 1 :
8621: LD_VAR 0 10
8625: PPUSH
8626: LD_VAR 0 13
8630: PPUSH
8631: CALL_OW 88
8635: GO 8688
8637: LD_INT 1
8639: DOUBLE
8640: EQUAL
8641: IFTRUE 8645
8643: GO 8662
8645: POP
// SayRadio ( unit , dialog_id ) ; 2 :
8646: LD_VAR 0 10
8650: PPUSH
8651: LD_VAR 0 13
8655: PPUSH
8656: CALL_OW 94
8660: GO 8688
8662: LD_INT 2
8664: DOUBLE
8665: EQUAL
8666: IFTRUE 8670
8668: GO 8687
8670: POP
// ForceSay ( unit , dialog_id ) ; end ;
8671: LD_VAR 0 10
8675: PPUSH
8676: LD_VAR 0 13
8680: PPUSH
8681: CALL_OW 91
8685: GO 8688
8687: POP
// result := unit ;
8688: LD_ADDR_VAR 0 8
8692: PUSH
8693: LD_VAR 0 10
8697: ST_TO_ADDR
// end ;
8698: LD_VAR 0 8
8702: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
8703: LD_INT 0
8705: PPUSH
8706: PPUSH
8707: PPUSH
// result := false ;
8708: LD_ADDR_VAR 0 4
8712: PUSH
8713: LD_INT 0
8715: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
8716: LD_VAR 0 1
8720: NOT
8721: PUSH
8722: LD_VAR 0 2
8726: NOT
8727: OR
8728: PUSH
8729: LD_VAR 0 1
8733: PPUSH
8734: CALL_OW 310
8738: OR
8739: IFFALSE 8743
// exit ;
8741: GO 8947
// if distance < 0 then
8743: LD_VAR 0 3
8747: PUSH
8748: LD_INT 0
8750: LESS
8751: IFFALSE 8761
// distance := 0 ;
8753: LD_ADDR_VAR 0 3
8757: PUSH
8758: LD_INT 0
8760: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
8761: LD_ADDR_VAR 0 6
8765: PUSH
8766: LD_VAR 0 2
8770: PPUSH
8771: CALL_OW 266
8775: PPUSH
8776: LD_VAR 0 2
8780: PPUSH
8781: CALL_OW 250
8785: PPUSH
8786: LD_VAR 0 2
8790: PPUSH
8791: CALL_OW 251
8795: PPUSH
8796: LD_VAR 0 2
8800: PPUSH
8801: CALL_OW 254
8805: PPUSH
8806: LD_VAR 0 2
8810: PPUSH
8811: CALL_OW 248
8815: PPUSH
8816: LD_INT 1
8818: PPUSH
8819: CALL 45488 0 6
8823: ST_TO_ADDR
// if not entrance then
8824: LD_VAR 0 6
8828: NOT
8829: IFFALSE 8833
// exit ;
8831: GO 8947
// for i in entrance do
8833: LD_ADDR_VAR 0 5
8837: PUSH
8838: LD_VAR 0 6
8842: PUSH
8843: FOR_IN
8844: IFFALSE 8945
// begin if not distance then
8846: LD_VAR 0 3
8850: NOT
8851: IFFALSE 8896
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
8853: LD_VAR 0 1
8857: PPUSH
8858: LD_VAR 0 5
8862: PUSH
8863: LD_INT 1
8865: ARRAY
8866: PPUSH
8867: LD_VAR 0 5
8871: PUSH
8872: LD_INT 2
8874: ARRAY
8875: PPUSH
8876: CALL_OW 307
8880: IFFALSE 8894
// begin result := true ;
8882: LD_ADDR_VAR 0 4
8886: PUSH
8887: LD_INT 1
8889: ST_TO_ADDR
// exit ;
8890: POP
8891: POP
8892: GO 8947
// end ; end else
8894: GO 8943
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
8896: LD_VAR 0 1
8900: PPUSH
8901: LD_VAR 0 5
8905: PUSH
8906: LD_INT 1
8908: ARRAY
8909: PPUSH
8910: LD_VAR 0 5
8914: PUSH
8915: LD_INT 2
8917: ARRAY
8918: PPUSH
8919: CALL_OW 297
8923: PUSH
8924: LD_VAR 0 3
8928: LESSEQUAL
8929: IFFALSE 8943
// begin result := true ;
8931: LD_ADDR_VAR 0 4
8935: PUSH
8936: LD_INT 1
8938: ST_TO_ADDR
// exit ;
8939: POP
8940: POP
8941: GO 8947
// end ; end ; end ;
8943: GO 8843
8945: POP
8946: POP
// end ;
8947: LD_VAR 0 4
8951: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
8952: LD_INT 0
8954: PPUSH
8955: PPUSH
8956: PPUSH
// result := false ;
8957: LD_ADDR_VAR 0 3
8961: PUSH
8962: LD_INT 0
8964: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
8965: LD_VAR 0 1
8969: NOT
8970: PUSH
8971: LD_VAR 0 2
8975: NOT
8976: OR
8977: PUSH
8978: LD_VAR 0 1
8982: PPUSH
8983: CALL_OW 302
8987: NOT
8988: OR
8989: PUSH
8990: LD_VAR 0 2
8994: PPUSH
8995: CALL_OW 302
8999: NOT
9000: OR
9001: IFFALSE 9005
// exit ;
9003: GO 9166
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9005: LD_VAR 0 1
9009: PPUSH
9010: LD_INT 81
9012: PUSH
9013: LD_VAR 0 1
9017: PPUSH
9018: CALL_OW 255
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 3
9029: PUSH
9030: LD_INT 21
9032: PUSH
9033: LD_INT 3
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: PPUSH
9048: CALL_OW 69
9052: PPUSH
9053: LD_VAR 0 1
9057: PPUSH
9058: CALL_OW 74
9062: PPUSH
9063: CALL_OW 296
9067: PUSH
9068: LD_INT 8
9070: LESS
9071: IFFALSE 9075
// exit ;
9073: GO 9166
// building := IsInUnit ( unit2 ) ;
9075: LD_ADDR_VAR 0 5
9079: PUSH
9080: LD_VAR 0 2
9084: PPUSH
9085: CALL_OW 310
9089: ST_TO_ADDR
// if building then
9090: LD_VAR 0 5
9094: IFFALSE 9121
// result := IsNearbyEntrance ( unit , building , 2 ) else
9096: LD_ADDR_VAR 0 3
9100: PUSH
9101: LD_VAR 0 1
9105: PPUSH
9106: LD_VAR 0 5
9110: PPUSH
9111: LD_INT 2
9113: PPUSH
9114: CALL 8703 0 3
9118: ST_TO_ADDR
9119: GO 9166
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9121: LD_ADDR_VAR 0 3
9125: PUSH
9126: LD_VAR 0 1
9130: PPUSH
9131: LD_VAR 0 2
9135: PPUSH
9136: CALL_OW 296
9140: PUSH
9141: LD_INT 6
9143: LESS
9144: PUSH
9145: LD_VAR 0 2
9149: PPUSH
9150: CALL_OW 255
9154: PPUSH
9155: LD_VAR 0 1
9159: PPUSH
9160: CALL_OW 292
9164: AND
9165: ST_TO_ADDR
// end ;
9166: LD_VAR 0 3
9170: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9171: LD_INT 0
9173: PPUSH
9174: PPUSH
9175: PPUSH
9176: PPUSH
// uc_side = 0 ;
9177: LD_ADDR_OWVAR 20
9181: PUSH
9182: LD_INT 0
9184: ST_TO_ADDR
// uc_nation = 0 ;
9185: LD_ADDR_OWVAR 21
9189: PUSH
9190: LD_INT 0
9192: ST_TO_ADDR
// nat_area := nature_area ;
9193: LD_ADDR_VAR 0 4
9197: PUSH
9198: LD_INT 24
9200: ST_TO_ADDR
// InitHc ;
9201: CALL_OW 19
// for i = 1 to 4 do
9205: LD_ADDR_VAR 0 2
9209: PUSH
9210: DOUBLE
9211: LD_INT 1
9213: DEC
9214: ST_TO_ADDR
9215: LD_INT 4
9217: PUSH
9218: FOR_TO
9219: IFFALSE 9266
// begin hc_class = 18 ;
9221: LD_ADDR_OWVAR 28
9225: PUSH
9226: LD_INT 18
9228: ST_TO_ADDR
// hc_gallery =  ;
9229: LD_ADDR_OWVAR 33
9233: PUSH
9234: LD_STRING 
9236: ST_TO_ADDR
// animal := CreateHuman ;
9237: LD_ADDR_VAR 0 3
9241: PUSH
9242: CALL_OW 44
9246: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9247: LD_VAR 0 3
9251: PPUSH
9252: LD_VAR 0 4
9256: PPUSH
9257: LD_INT 0
9259: PPUSH
9260: CALL_OW 49
// end ;
9264: GO 9218
9266: POP
9267: POP
// for i = 1 to 3 do
9268: LD_ADDR_VAR 0 2
9272: PUSH
9273: DOUBLE
9274: LD_INT 1
9276: DEC
9277: ST_TO_ADDR
9278: LD_INT 3
9280: PUSH
9281: FOR_TO
9282: IFFALSE 9376
// begin hc_class = class_apeman ;
9284: LD_ADDR_OWVAR 28
9288: PUSH
9289: LD_INT 12
9291: ST_TO_ADDR
// hc_gallery =  ;
9292: LD_ADDR_OWVAR 33
9296: PUSH
9297: LD_STRING 
9299: ST_TO_ADDR
// hc_agressivity = 0 ;
9300: LD_ADDR_OWVAR 35
9304: PUSH
9305: LD_INT 0
9307: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9308: LD_ADDR_OWVAR 31
9312: PUSH
9313: LD_INT 1
9315: PPUSH
9316: LD_INT 3
9318: PPUSH
9319: CALL_OW 12
9323: PUSH
9324: LD_INT 1
9326: PPUSH
9327: LD_INT 3
9329: PPUSH
9330: CALL_OW 12
9334: PUSH
9335: LD_INT 0
9337: PUSH
9338: LD_INT 0
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: ST_TO_ADDR
// animal := CreateHuman ;
9347: LD_ADDR_VAR 0 3
9351: PUSH
9352: CALL_OW 44
9356: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9357: LD_VAR 0 3
9361: PPUSH
9362: LD_VAR 0 4
9366: PPUSH
9367: LD_INT 0
9369: PPUSH
9370: CALL_OW 49
// end ;
9374: GO 9281
9376: POP
9377: POP
// for i = 1 to 3 do
9378: LD_ADDR_VAR 0 2
9382: PUSH
9383: DOUBLE
9384: LD_INT 1
9386: DEC
9387: ST_TO_ADDR
9388: LD_INT 3
9390: PUSH
9391: FOR_TO
9392: IFFALSE 9439
// begin hc_class = 13 ;
9394: LD_ADDR_OWVAR 28
9398: PUSH
9399: LD_INT 13
9401: ST_TO_ADDR
// hc_gallery =  ;
9402: LD_ADDR_OWVAR 33
9406: PUSH
9407: LD_STRING 
9409: ST_TO_ADDR
// animal := CreateHuman ;
9410: LD_ADDR_VAR 0 3
9414: PUSH
9415: CALL_OW 44
9419: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9420: LD_VAR 0 3
9424: PPUSH
9425: LD_VAR 0 4
9429: PPUSH
9430: LD_INT 0
9432: PPUSH
9433: CALL_OW 49
// end ;
9437: GO 9391
9439: POP
9440: POP
// for i = 1 to 3 do
9441: LD_ADDR_VAR 0 2
9445: PUSH
9446: DOUBLE
9447: LD_INT 1
9449: DEC
9450: ST_TO_ADDR
9451: LD_INT 3
9453: PUSH
9454: FOR_TO
9455: IFFALSE 9500
// begin hc_class = 20 ;
9457: LD_ADDR_OWVAR 28
9461: PUSH
9462: LD_INT 20
9464: ST_TO_ADDR
// hc_gallery =  ;
9465: LD_ADDR_OWVAR 33
9469: PUSH
9470: LD_STRING 
9472: ST_TO_ADDR
// animal := CreateHuman ;
9473: LD_ADDR_VAR 0 3
9477: PUSH
9478: CALL_OW 44
9482: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9483: LD_VAR 0 3
9487: PPUSH
9488: LD_INT 4
9490: PPUSH
9491: LD_INT 0
9493: PPUSH
9494: CALL_OW 49
// end ;
9498: GO 9454
9500: POP
9501: POP
// end ; end_of_file
9502: LD_VAR 0 1
9506: RET
// export function Action ; begin
9507: LD_INT 0
9509: PPUSH
// InGameOn ;
9510: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9514: LD_EXP 14
9518: PPUSH
9519: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9523: LD_EXP 14
9527: PPUSH
9528: LD_STRING D1-JMM-1
9530: PPUSH
9531: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9535: LD_EXP 15
9539: PPUSH
9540: LD_STRING D1-Roth-1
9542: PPUSH
9543: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9547: LD_EXP 14
9551: PPUSH
9552: LD_STRING D1-JMM-2
9554: PPUSH
9555: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9559: LD_EXP 15
9563: PPUSH
9564: LD_STRING D1-Roth-2
9566: PPUSH
9567: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9571: LD_EXP 14
9575: PPUSH
9576: LD_STRING D1-JMM-3
9578: PPUSH
9579: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9583: LD_EXP 15
9587: PPUSH
9588: LD_STRING D1-Roth-3
9590: PPUSH
9591: CALL_OW 88
// ComInvisible ( Roth ) ;
9595: LD_EXP 15
9599: PPUSH
9600: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9604: LD_INT 46
9606: PPUSH
9607: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9611: LD_EXP 14
9615: PPUSH
9616: LD_STRING D1-JMM-4
9618: PPUSH
9619: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9623: LD_INT 10
9625: PPUSH
9626: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9630: LD_EXP 15
9634: PPUSH
9635: LD_EXP 14
9639: PPUSH
9640: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
9644: LD_EXP 14
9648: PPUSH
9649: LD_STRING D1-JMM-4a
9651: PPUSH
9652: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
9656: LD_EXP 15
9660: PPUSH
9661: LD_STRING D1-Roth-4
9663: PPUSH
9664: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
9668: LD_EXP 14
9672: PPUSH
9673: LD_STRING D1-JMM-5
9675: PPUSH
9676: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
9680: LD_EXP 15
9684: PPUSH
9685: LD_STRING D1-Roth-5
9687: PPUSH
9688: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
9692: LD_EXP 14
9696: PPUSH
9697: LD_STRING D1-JMM-6
9699: PPUSH
9700: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
9704: LD_EXP 15
9708: PPUSH
9709: LD_STRING D1-Roth-6
9711: PPUSH
9712: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
9716: LD_EXP 14
9720: PPUSH
9721: LD_STRING D1-JMM-7
9723: PPUSH
9724: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
9728: LD_EXP 16
9732: PPUSH
9733: LD_EXP 14
9737: PPUSH
9738: CALL_OW 250
9742: PPUSH
9743: LD_EXP 14
9747: PPUSH
9748: CALL_OW 251
9752: PPUSH
9753: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
9757: LD_EXP 15
9761: PPUSH
9762: LD_STRING D1-Roth-7
9764: PPUSH
9765: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
9769: LD_INT 10
9771: PPUSH
9772: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
9776: LD_EXP 16
9780: PPUSH
9781: LD_EXP 14
9785: PPUSH
9786: CALL_OW 296
9790: PUSH
9791: LD_INT 6
9793: LESS
9794: IFFALSE 9769
// ComTurnUnit ( Powell , JMM ) ;
9796: LD_EXP 16
9800: PPUSH
9801: LD_EXP 14
9805: PPUSH
9806: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
9810: LD_EXP 16
9814: PPUSH
9815: LD_STRING D1-Pow-7
9817: PPUSH
9818: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
9822: LD_EXP 14
9826: PPUSH
9827: LD_EXP 16
9831: PPUSH
9832: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
9836: LD_EXP 15
9840: PPUSH
9841: LD_EXP 16
9845: PPUSH
9846: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
9850: LD_EXP 14
9854: PPUSH
9855: LD_STRING D1-JMM-8
9857: PPUSH
9858: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
9862: LD_EXP 16
9866: PPUSH
9867: LD_STRING D1-Pow-8
9869: PPUSH
9870: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
9874: LD_EXP 14
9878: PPUSH
9879: LD_STRING D1-JMM-9
9881: PPUSH
9882: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
9886: LD_EXP 16
9890: PPUSH
9891: LD_INT 124
9893: PPUSH
9894: LD_INT 61
9896: PPUSH
9897: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9901: LD_INT 35
9903: PPUSH
9904: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
9908: LD_EXP 14
9912: PPUSH
9913: LD_EXP 16
9917: PPUSH
9918: CALL_OW 296
9922: PUSH
9923: LD_INT 6
9925: GREATER
9926: IFFALSE 9901
// SayRadio ( Powell , D1-Pow-9 ) ;
9928: LD_EXP 16
9932: PPUSH
9933: LD_STRING D1-Pow-9
9935: PPUSH
9936: CALL_OW 94
// RemoveUnit ( Powell ) ;
9940: LD_EXP 16
9944: PPUSH
9945: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
9949: LD_EXP 16
9953: PPUSH
9954: LD_INT 18
9956: PPUSH
9957: CALL_OW 52
// if Joan and not Joan in selected then
9961: LD_EXP 36
9965: PUSH
9966: LD_EXP 36
9970: PUSH
9971: LD_EXP 3
9975: IN
9976: NOT
9977: AND
9978: IFFALSE 9992
// SayRadio ( Joan , D1-Joan-9 ) ;
9980: LD_EXP 36
9984: PPUSH
9985: LD_STRING D1-Joan-9
9987: PPUSH
9988: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
9992: LD_EXP 15
9996: PPUSH
9997: LD_EXP 14
10001: PPUSH
10002: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10006: LD_EXP 14
10010: PPUSH
10011: LD_EXP 15
10015: PPUSH
10016: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10020: LD_EXP 15
10024: PPUSH
10025: LD_STRING D1-Roth-9
10027: PPUSH
10028: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10032: LD_EXP 14
10036: PPUSH
10037: LD_STRING D1-JMM-10
10039: PPUSH
10040: CALL_OW 88
// InGameOff ;
10044: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10048: LD_STRING M1
10050: PPUSH
10051: CALL_OW 337
// if Difficulty < 3 then
10055: LD_OWVAR 67
10059: PUSH
10060: LD_INT 3
10062: LESS
10063: IFFALSE 10075
// ChangeSideFog ( 4 , 7 ) ;
10065: LD_INT 4
10067: PPUSH
10068: LD_INT 7
10070: PPUSH
10071: CALL_OW 343
// SaveForQuickRestart ;
10075: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10079: LD_INT 7
10081: PPUSH
10082: LD_INT 1
10084: PPUSH
10085: LD_INT 2
10087: PPUSH
10088: LD_INT 1
10090: PPUSH
10091: CALL_OW 80
// wait ( 0 0$3 ) ;
10095: LD_INT 105
10097: PPUSH
10098: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10102: LD_EXP 15
10106: PPUSH
10107: LD_INT 124
10109: PPUSH
10110: LD_INT 18
10112: PPUSH
10113: CALL_OW 111
// AddComInvisible ( Roth ) ;
10117: LD_EXP 15
10121: PPUSH
10122: CALL_OW 212
// wait ( 0 0$30 ) ;
10126: LD_INT 1050
10128: PPUSH
10129: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10133: LD_EXP 15
10137: PPUSH
10138: LD_INT 2100
10140: PPUSH
10141: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10145: LD_EXP 15
10149: PPUSH
10150: LD_INT 156
10152: PPUSH
10153: LD_INT 20
10155: PPUSH
10156: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10160: LD_EXP 15
10164: PPUSH
10165: LD_INT 178
10167: PPUSH
10168: LD_INT 42
10170: PPUSH
10171: CALL_OW 171
// AddComInvisible ( Roth ) ;
10175: LD_EXP 15
10179: PPUSH
10180: CALL_OW 212
// end ;
10184: LD_VAR 0 1
10188: RET
// every 0 0$1 do var i , tmp ;
10189: GO 10191
10191: DISABLE
10192: LD_INT 0
10194: PPUSH
10195: PPUSH
// begin tmp := selected union friends ;
10196: LD_ADDR_VAR 0 2
10200: PUSH
10201: LD_EXP 3
10205: PUSH
10206: LD_EXP 4
10210: UNION
10211: ST_TO_ADDR
// if not tmp then
10212: LD_VAR 0 2
10216: NOT
10217: IFFALSE 10221
// exit ;
10219: GO 10293
// repeat wait ( 0 0$1 ) ;
10221: LD_INT 35
10223: PPUSH
10224: CALL_OW 67
// for i in tmp do
10228: LD_ADDR_VAR 0 1
10232: PUSH
10233: LD_VAR 0 2
10237: PUSH
10238: FOR_IN
10239: IFFALSE 10284
// if CanSpot ( JMM , i ) then
10241: LD_EXP 14
10245: PPUSH
10246: LD_VAR 0 1
10250: PPUSH
10251: CALL 8952 0 2
10255: IFFALSE 10282
// begin tmp := tmp diff i ;
10257: LD_ADDR_VAR 0 2
10261: PUSH
10262: LD_VAR 0 2
10266: PUSH
10267: LD_VAR 0 1
10271: DIFF
10272: ST_TO_ADDR
// Spot ( i ) ;
10273: LD_VAR 0 1
10277: PPUSH
10278: CALL 10296 0 1
// end ;
10282: GO 10238
10284: POP
10285: POP
// until not tmp ;
10286: LD_VAR 0 2
10290: NOT
10291: IFFALSE 10221
// end ;
10293: PPOPN 2
10295: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10296: LD_INT 0
10298: PPUSH
10299: PPUSH
10300: PPUSH
10301: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10302: LD_VAR 0 1
10306: NOT
10307: PUSH
10308: LD_VAR 0 1
10312: PPUSH
10313: CALL_OW 255
10317: PUSH
10318: LD_INT 4
10320: NONEQUAL
10321: OR
10322: PUSH
10323: LD_VAR 0 1
10327: PPUSH
10328: CALL_OW 555
10332: OR
10333: PUSH
10334: LD_VAR 0 1
10338: PPUSH
10339: CALL_OW 302
10343: NOT
10344: OR
10345: IFFALSE 10349
// exit ;
10347: GO 12238
// InGameOn ;
10349: CALL_OW 8
// side := GetSide ( JMM ) ;
10353: LD_ADDR_VAR 0 4
10357: PUSH
10358: LD_EXP 14
10362: PPUSH
10363: CALL_OW 255
10367: ST_TO_ADDR
// joined := false ;
10368: LD_ADDR_VAR 0 5
10372: PUSH
10373: LD_INT 0
10375: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10376: LD_ADDR_VAR 0 3
10380: PUSH
10381: LD_VAR 0 1
10385: PPUSH
10386: CALL_OW 310
10390: ST_TO_ADDR
// if building then
10391: LD_VAR 0 3
10395: IFFALSE 10454
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10397: LD_EXP 14
10401: PPUSH
10402: LD_VAR 0 1
10406: PPUSH
10407: CALL_OW 255
10411: PPUSH
10412: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10416: LD_EXP 14
10420: PPUSH
10421: LD_VAR 0 3
10425: PPUSH
10426: CALL_OW 120
// repeat wait ( 3 ) ;
10430: LD_INT 3
10432: PPUSH
10433: CALL_OW 67
// until IsInUnit ( JMM ) ;
10437: LD_EXP 14
10441: PPUSH
10442: CALL_OW 310
10446: IFFALSE 10430
// DialogueOn ;
10448: CALL_OW 6
// end else
10452: GO 10486
// begin ComTurnUnit ( JMM , unit ) ;
10454: LD_EXP 14
10458: PPUSH
10459: LD_VAR 0 1
10463: PPUSH
10464: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10468: LD_VAR 0 1
10472: PPUSH
10473: LD_EXP 14
10477: PPUSH
10478: CALL_OW 119
// DialogueOn ;
10482: CALL_OW 6
// end ; if unit = Joan then
10486: LD_VAR 0 1
10490: PUSH
10491: LD_EXP 36
10495: EQUAL
10496: IFFALSE 10606
// begin joined := true ;
10498: LD_ADDR_VAR 0 5
10502: PUSH
10503: LD_INT 1
10505: ST_TO_ADDR
// if Joan in selected then
10506: LD_EXP 36
10510: PUSH
10511: LD_EXP 3
10515: IN
10516: IFFALSE 10544
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10518: LD_EXP 36
10522: PPUSH
10523: LD_STRING D3-Joan-Joan-1
10525: PPUSH
10526: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10530: LD_EXP 14
10534: PPUSH
10535: LD_STRING D3-Joan-JMM-1
10537: PPUSH
10538: CALL_OW 88
// end else
10542: GO 10604
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10544: LD_EXP 36
10548: PPUSH
10549: LD_STRING D4-Joan-Joan-1
10551: PPUSH
10552: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10556: LD_EXP 14
10560: PPUSH
10561: LD_STRING D4-Joan-JMM-1
10563: PPUSH
10564: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10568: LD_EXP 36
10572: PPUSH
10573: LD_STRING D4-Joan-Joan-2
10575: PPUSH
10576: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
10580: LD_EXP 14
10584: PPUSH
10585: LD_STRING D4-Joan-JMM-2
10587: PPUSH
10588: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
10592: LD_EXP 36
10596: PPUSH
10597: LD_STRING D4-Joan-Joan-3
10599: PPUSH
10600: CALL_OW 88
// end ; end else
10604: GO 12046
// if unit = Lisa then
10606: LD_VAR 0 1
10610: PUSH
10611: LD_EXP 23
10615: EQUAL
10616: IFFALSE 10808
// begin if Lisa in selected then
10618: LD_EXP 23
10622: PUSH
10623: LD_EXP 3
10627: IN
10628: IFFALSE 10741
// begin if GetSide ( Joan ) = 7 then
10630: LD_EXP 36
10634: PPUSH
10635: CALL_OW 255
10639: PUSH
10640: LD_INT 7
10642: EQUAL
10643: IFFALSE 10707
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
10645: LD_EXP 23
10649: PPUSH
10650: LD_STRING D3-LisaJ-Lisa-1
10652: PPUSH
10653: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
10657: LD_EXP 14
10661: PPUSH
10662: LD_STRING D3-LisaJ-JMM-1
10664: PPUSH
10665: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
10669: LD_EXP 23
10673: PPUSH
10674: LD_STRING D3-LisaJ-Lisa-2
10676: PPUSH
10677: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
10681: LD_EXP 14
10685: PPUSH
10686: LD_STRING D3-LisaJ-JMM-2
10688: PPUSH
10689: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
10693: LD_EXP 23
10697: PPUSH
10698: LD_STRING D3-LisaJ-Lisa-3
10700: PPUSH
10701: CALL_OW 88
// end else
10705: GO 10739
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
10707: LD_EXP 23
10711: PPUSH
10712: LD_STRING D3-LisaL-Lisa-1
10714: PPUSH
10715: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
10719: LD_EXP 14
10723: PPUSH
10724: LD_STRING D3-LisaL-JMM-1
10726: PPUSH
10727: CALL_OW 88
// joined := true ;
10731: LD_ADDR_VAR 0 5
10735: PUSH
10736: LD_INT 1
10738: ST_TO_ADDR
// end ; end else
10739: GO 10806
// begin if GetSide ( Joan ) = 7 then
10741: LD_EXP 36
10745: PPUSH
10746: CALL_OW 255
10750: PUSH
10751: LD_INT 7
10753: EQUAL
10754: IFFALSE 10794
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
10756: LD_EXP 23
10760: PPUSH
10761: LD_STRING D4-LisaJ-Lisa-1
10763: PPUSH
10764: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
10768: LD_EXP 14
10772: PPUSH
10773: LD_STRING D4-LisaJ-JMM-1
10775: PPUSH
10776: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
10780: LD_EXP 23
10784: PPUSH
10785: LD_STRING D4-LisaJ-Lisa-2
10787: PPUSH
10788: CALL_OW 88
// end else
10792: GO 10806
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
10794: LD_EXP 23
10798: PPUSH
10799: LD_STRING D4-LisaL-Lisa-1
10801: PPUSH
10802: CALL_OW 88
// end ; end ; end else
10806: GO 12046
// if unit = Frank then
10808: LD_VAR 0 1
10812: PUSH
10813: LD_EXP 33
10817: EQUAL
10818: IFFALSE 10958
// begin joined := true ;
10820: LD_ADDR_VAR 0 5
10824: PUSH
10825: LD_INT 1
10827: ST_TO_ADDR
// if Frank in selected then
10828: LD_EXP 33
10832: PUSH
10833: LD_EXP 3
10837: IN
10838: IFFALSE 10908
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
10840: LD_EXP 33
10844: PPUSH
10845: LD_STRING D3-Frank-Frank-1
10847: PPUSH
10848: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
10852: LD_EXP 14
10856: PPUSH
10857: LD_STRING D3-Frank-JMM-1
10859: PPUSH
10860: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
10864: LD_EXP 33
10868: PPUSH
10869: LD_STRING D3-Frank-Frank-2
10871: PPUSH
10872: CALL_OW 88
// if reached_lab then
10876: LD_EXP 5
10880: IFFALSE 10906
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
10882: LD_EXP 14
10886: PPUSH
10887: LD_STRING D3-Frank-JMM-2
10889: PPUSH
10890: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
10894: LD_EXP 33
10898: PPUSH
10899: LD_STRING D3-Frank-Frank-3
10901: PPUSH
10902: CALL_OW 88
// end ; end else
10906: GO 10956
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
10908: LD_EXP 33
10912: PPUSH
10913: LD_STRING D4-Frank-Frank-1
10915: PPUSH
10916: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
10920: LD_EXP 14
10924: PPUSH
10925: LD_STRING D4-Frank-JMM-1
10927: PPUSH
10928: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
10932: LD_EXP 33
10936: PPUSH
10937: LD_STRING D4-Frank-Frank-2
10939: PPUSH
10940: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
10944: LD_EXP 14
10948: PPUSH
10949: LD_STRING D4-Frank-JMM-2
10951: PPUSH
10952: CALL_OW 88
// end ; end else
10956: GO 12046
// if unit = Brown then
10958: LD_VAR 0 1
10962: PUSH
10963: LD_EXP 28
10967: EQUAL
10968: IFFALSE 11064
// begin if Brown in selected or gamma_commander = 2 then
10970: LD_EXP 28
10974: PUSH
10975: LD_EXP 3
10979: IN
10980: PUSH
10981: LD_EXP 10
10985: PUSH
10986: LD_INT 2
10988: EQUAL
10989: OR
10990: IFFALSE 11026
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
10992: LD_EXP 28
10996: PPUSH
10997: LD_STRING D3-Soldier1-Sol1-1
10999: PPUSH
11000: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11004: LD_EXP 14
11008: PPUSH
11009: LD_STRING D3-Soldier1-JMM-1
11011: PPUSH
11012: CALL_OW 88
// joined := true ;
11016: LD_ADDR_VAR 0 5
11020: PUSH
11021: LD_INT 1
11023: ST_TO_ADDR
// end else
11024: GO 11062
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11026: LD_EXP 28
11030: PPUSH
11031: LD_STRING D4-Soldier2-Sol1-1
11033: PPUSH
11034: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11038: LD_EXP 14
11042: PPUSH
11043: LD_STRING D4-Soldier1-JMM-1
11045: PPUSH
11046: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11050: LD_EXP 28
11054: PPUSH
11055: LD_STRING D4-Soldier2-Sol1-2
11057: PPUSH
11058: CALL_OW 88
// end ; end else
11062: GO 12046
// if unit = Donaldson then
11064: LD_VAR 0 1
11068: PUSH
11069: LD_EXP 24
11073: EQUAL
11074: IFFALSE 11170
// begin if Donaldson in selected or gamma_commander = 1 then
11076: LD_EXP 24
11080: PUSH
11081: LD_EXP 3
11085: IN
11086: PUSH
11087: LD_EXP 10
11091: PUSH
11092: LD_INT 1
11094: EQUAL
11095: OR
11096: IFFALSE 11132
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11098: LD_EXP 24
11102: PPUSH
11103: LD_STRING D3-Soldier2-FSol2-1
11105: PPUSH
11106: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11110: LD_EXP 14
11114: PPUSH
11115: LD_STRING D3-Soldier2-JMM-1
11117: PPUSH
11118: CALL_OW 88
// joined := true ;
11122: LD_ADDR_VAR 0 5
11126: PUSH
11127: LD_INT 1
11129: ST_TO_ADDR
// end else
11130: GO 11168
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
11132: LD_VAR 0 1
11136: PPUSH
11137: LD_STRING D4-Soldier1-FSol1-1
11139: PPUSH
11140: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11144: LD_EXP 14
11148: PPUSH
11149: LD_STRING D4-Soldier1-JMM-1
11151: PPUSH
11152: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
11156: LD_VAR 0 1
11160: PPUSH
11161: LD_STRING D4-Soldier1-FSol1-2
11163: PPUSH
11164: CALL_OW 88
// end ; end else
11168: GO 12046
// if unit = Cyrus then
11170: LD_VAR 0 1
11174: PUSH
11175: LD_EXP 26
11179: EQUAL
11180: IFFALSE 11254
// begin if Cyrus in selected then
11182: LD_EXP 26
11186: PUSH
11187: LD_EXP 3
11191: IN
11192: IFFALSE 11228
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11194: LD_EXP 26
11198: PPUSH
11199: LD_STRING D3-Cyrus-Cyrus-1
11201: PPUSH
11202: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11206: LD_EXP 14
11210: PPUSH
11211: LD_STRING D3-Cyrus-JMM-1
11213: PPUSH
11214: CALL_OW 88
// joined := true ;
11218: LD_ADDR_VAR 0 5
11222: PUSH
11223: LD_INT 1
11225: ST_TO_ADDR
// end else
11226: GO 11252
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11228: LD_EXP 26
11232: PPUSH
11233: LD_STRING D4-Cyrus-Cyrus-1
11235: PPUSH
11236: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11240: LD_EXP 14
11244: PPUSH
11245: LD_STRING D4-Cyrus-JMM-1
11247: PPUSH
11248: CALL_OW 88
// end ; end else
11252: GO 12046
// if unit = Bobby then
11254: LD_VAR 0 1
11258: PUSH
11259: LD_EXP 25
11263: EQUAL
11264: IFFALSE 11350
// begin if Bobby in selected then
11266: LD_EXP 25
11270: PUSH
11271: LD_EXP 3
11275: IN
11276: IFFALSE 11312
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11278: LD_EXP 25
11282: PPUSH
11283: LD_STRING D3-Bobby-Bobby-1
11285: PPUSH
11286: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11290: LD_EXP 14
11294: PPUSH
11295: LD_STRING D3-Bobby-JMM-1
11297: PPUSH
11298: CALL_OW 88
// joined := true ;
11302: LD_ADDR_VAR 0 5
11306: PUSH
11307: LD_INT 1
11309: ST_TO_ADDR
// end else
11310: GO 11348
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11312: LD_EXP 25
11316: PPUSH
11317: LD_STRING D4-Bobby-Bobby-1
11319: PPUSH
11320: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11324: LD_EXP 14
11328: PPUSH
11329: LD_STRING D4-Bobby-JMM-1
11331: PPUSH
11332: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11336: LD_EXP 25
11340: PPUSH
11341: LD_STRING D4-Bobby-Bobby-2
11343: PPUSH
11344: CALL_OW 88
// end ; end else
11348: GO 12046
// if unit = Cornel then
11350: LD_VAR 0 1
11354: PUSH
11355: LD_EXP 31
11359: EQUAL
11360: IFFALSE 11458
// begin if Cornel in selected then
11362: LD_EXP 31
11366: PUSH
11367: LD_EXP 3
11371: IN
11372: IFFALSE 11420
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11374: LD_EXP 31
11378: PPUSH
11379: LD_STRING D3-Mark-Corn-1
11381: PPUSH
11382: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11386: LD_EXP 14
11390: PPUSH
11391: LD_STRING D3-Mark-JMM-1
11393: PPUSH
11394: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11398: LD_EXP 31
11402: PPUSH
11403: LD_STRING D3-Mark-Corn-2
11405: PPUSH
11406: CALL_OW 88
// joined := true ;
11410: LD_ADDR_VAR 0 5
11414: PUSH
11415: LD_INT 1
11417: ST_TO_ADDR
// end else
11418: GO 11456
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11420: LD_EXP 31
11424: PPUSH
11425: LD_STRING D4-Mark-Corn-1
11427: PPUSH
11428: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
11432: LD_EXP 14
11436: PPUSH
11437: LD_STRING D3-Joan-JMM-1
11439: PPUSH
11440: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11444: LD_EXP 31
11448: PPUSH
11449: LD_STRING D4-Mark-Corn-2
11451: PPUSH
11452: CALL_OW 88
// end ; end else
11456: GO 12046
// if unit = Gary then
11458: LD_VAR 0 1
11462: PUSH
11463: LD_EXP 32
11467: EQUAL
11468: IFFALSE 11552
// begin if Gary in selected then
11470: LD_EXP 32
11474: PUSH
11475: LD_EXP 3
11479: IN
11480: IFFALSE 11516
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11482: LD_EXP 32
11486: PPUSH
11487: LD_STRING D3-Gary-Gary-1
11489: PPUSH
11490: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11494: LD_EXP 14
11498: PPUSH
11499: LD_STRING D3-Gary-JMM-1
11501: PPUSH
11502: CALL_OW 88
// joined := true ;
11506: LD_ADDR_VAR 0 5
11510: PUSH
11511: LD_INT 1
11513: ST_TO_ADDR
// end else
11514: GO 11550
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11516: LD_EXP 32
11520: PPUSH
11521: LD_STRING D4-Gary-Gary-1
11523: PPUSH
11524: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11528: LD_EXP 32
11532: PPUSH
11533: LD_INT 1
11535: PPUSH
11536: CALL_OW 235
// DialogueOff ;
11540: CALL_OW 7
// InGameOff ;
11544: CALL_OW 9
// exit ;
11548: GO 12238
// end ; end else
11550: GO 12046
// if unit = Kikuchi then
11552: LD_VAR 0 1
11556: PUSH
11557: LD_EXP 34
11561: EQUAL
11562: IFFALSE 11646
// begin if Kikuchi in selected then
11564: LD_EXP 34
11568: PUSH
11569: LD_EXP 3
11573: IN
11574: IFFALSE 11610
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
11576: LD_EXP 34
11580: PPUSH
11581: LD_STRING D3-Yamako-Yam-1
11583: PPUSH
11584: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11588: LD_EXP 14
11592: PPUSH
11593: LD_STRING D3-Soldier2-JMM-1
11595: PPUSH
11596: CALL_OW 88
// joined := true ;
11600: LD_ADDR_VAR 0 5
11604: PUSH
11605: LD_INT 1
11607: ST_TO_ADDR
// end else
11608: GO 11644
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
11610: LD_EXP 34
11614: PPUSH
11615: LD_STRING D4-Yamako-Yam-1
11617: PPUSH
11618: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
11622: LD_EXP 34
11626: PPUSH
11627: LD_INT 1
11629: PPUSH
11630: CALL_OW 235
// DialogueOff ;
11634: CALL_OW 7
// InGameOff ;
11638: CALL_OW 9
// exit ;
11642: GO 12238
// end ; end else
11644: GO 12046
// if unit = Gladstone then
11646: LD_VAR 0 1
11650: PUSH
11651: LD_EXP 29
11655: EQUAL
11656: IFFALSE 11730
// begin if Gladstone in selected then
11658: LD_EXP 29
11662: PUSH
11663: LD_EXP 3
11667: IN
11668: IFFALSE 11704
// begin joined := true ;
11670: LD_ADDR_VAR 0 5
11674: PUSH
11675: LD_INT 1
11677: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
11678: LD_EXP 14
11682: PPUSH
11683: LD_STRING D3-Tim-JMM-1
11685: PPUSH
11686: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
11690: LD_EXP 29
11694: PPUSH
11695: LD_STRING D3-Tim-Glad-1
11697: PPUSH
11698: CALL_OW 88
// end else
11702: GO 11728
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
11704: LD_EXP 14
11708: PPUSH
11709: LD_STRING D4-Tim-JMM-1
11711: PPUSH
11712: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
11716: LD_EXP 29
11720: PPUSH
11721: LD_STRING D4-Tim-Glad-1
11723: PPUSH
11724: CALL_OW 88
// end ; end else
11728: GO 12046
// if unit = Denis then
11730: LD_VAR 0 1
11734: PUSH
11735: LD_EXP 27
11739: EQUAL
11740: IFFALSE 11776
// begin joined := true ;
11742: LD_ADDR_VAR 0 5
11746: PUSH
11747: LD_INT 1
11749: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
11750: LD_EXP 27
11754: PPUSH
11755: LD_STRING D3-Denis-Den-1
11757: PPUSH
11758: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
11762: LD_EXP 14
11766: PPUSH
11767: LD_STRING D3-Denis-JMM-1
11769: PPUSH
11770: CALL_OW 88
// end else
11774: GO 12046
// if unit = Simms then
11776: LD_VAR 0 1
11780: PUSH
11781: LD_EXP 35
11785: EQUAL
11786: IFFALSE 11822
// begin joined := true ;
11788: LD_ADDR_VAR 0 5
11792: PUSH
11793: LD_INT 1
11795: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
11796: LD_EXP 35
11800: PPUSH
11801: LD_STRING D3-Simms-Sim-1
11803: PPUSH
11804: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
11808: LD_EXP 14
11812: PPUSH
11813: LD_STRING D3-Simms-JMM-1
11815: PPUSH
11816: CALL_OW 88
// end else
11820: GO 12046
// if unit = DeltaDoctor then
11822: LD_VAR 0 1
11826: PUSH
11827: LD_EXP 37
11831: EQUAL
11832: IFFALSE 11868
// begin joined := true ;
11834: LD_ADDR_VAR 0 5
11838: PUSH
11839: LD_INT 1
11841: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
11842: LD_EXP 37
11846: PPUSH
11847: LD_STRING D3-Soldier1-Sol1-1
11849: PPUSH
11850: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11854: LD_EXP 14
11858: PPUSH
11859: LD_STRING D3-Soldier1-JMM-1
11861: PPUSH
11862: CALL_OW 88
// end else
11866: GO 12046
// begin joined := unit in selected ;
11868: LD_ADDR_VAR 0 5
11872: PUSH
11873: LD_VAR 0 1
11877: PUSH
11878: LD_EXP 3
11882: IN
11883: ST_TO_ADDR
// if joined then
11884: LD_VAR 0 5
11888: IFFALSE 11957
// begin if GetSex ( unit ) = sex_male then
11890: LD_VAR 0 1
11894: PPUSH
11895: CALL_OW 258
11899: PUSH
11900: LD_INT 1
11902: EQUAL
11903: IFFALSE 11931
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
11905: LD_VAR 0 1
11909: PPUSH
11910: LD_STRING D3-Soldier1-Sol1-1
11912: PPUSH
11913: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11917: LD_EXP 14
11921: PPUSH
11922: LD_STRING D3-Soldier1-JMM-1
11924: PPUSH
11925: CALL_OW 88
// end else
11929: GO 11955
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
11931: LD_VAR 0 1
11935: PPUSH
11936: LD_STRING D3-Soldier2-FSol2-1
11938: PPUSH
11939: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11943: LD_EXP 14
11947: PPUSH
11948: LD_STRING D3-Soldier2-JMM-1
11950: PPUSH
11951: CALL_OW 88
// end ; end else
11955: GO 12046
// begin if GetSex ( unit ) = sex_male then
11957: LD_VAR 0 1
11961: PPUSH
11962: CALL_OW 258
11966: PUSH
11967: LD_INT 1
11969: EQUAL
11970: IFFALSE 12010
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
11972: LD_VAR 0 1
11976: PPUSH
11977: LD_STRING D4-Soldier2-Sol1-1
11979: PPUSH
11980: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
11984: LD_EXP 14
11988: PPUSH
11989: LD_STRING D4-Soldier2-JMM-1
11991: PPUSH
11992: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
11996: LD_VAR 0 1
12000: PPUSH
12001: LD_STRING D4-Soldier2-Sol2-1
12003: PPUSH
12004: CALL_OW 88
// end else
12008: GO 12046
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12010: LD_VAR 0 1
12014: PPUSH
12015: LD_STRING D4-Soldier1-FSol1-1
12017: PPUSH
12018: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12022: LD_EXP 14
12026: PPUSH
12027: LD_STRING D4-Soldier1-JMM-1
12029: PPUSH
12030: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12034: LD_VAR 0 1
12038: PPUSH
12039: LD_STRING D4-Soldier1-FSol1-2
12041: PPUSH
12042: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12046: CALL_OW 7
// InGameOff ;
12050: CALL_OW 9
// if building then
12054: LD_VAR 0 3
12058: IFFALSE 12159
// begin SetSide ( JMM , side ) ;
12060: LD_EXP 14
12064: PPUSH
12065: LD_VAR 0 4
12069: PPUSH
12070: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12074: LD_EXP 14
12078: PPUSH
12079: CALL_OW 122
// if joined then
12083: LD_VAR 0 5
12087: IFFALSE 12126
// begin SetSide ( unit , side ) ;
12089: LD_VAR 0 1
12093: PPUSH
12094: LD_VAR 0 4
12098: PPUSH
12099: CALL_OW 235
// SetSide ( building , 1 ) ;
12103: LD_VAR 0 3
12107: PPUSH
12108: LD_INT 1
12110: PPUSH
12111: CALL_OW 235
// ComExitBuilding ( unit ) ;
12115: LD_VAR 0 1
12119: PPUSH
12120: CALL_OW 122
// end else
12124: GO 12157
// begin wait ( 0 0$10 ) ;
12126: LD_INT 350
12128: PPUSH
12129: CALL_OW 67
// SetSide ( unit , 1 ) ;
12133: LD_VAR 0 1
12137: PPUSH
12138: LD_INT 1
12140: PPUSH
12141: CALL_OW 235
// SetSide ( building , 1 ) ;
12145: LD_VAR 0 3
12149: PPUSH
12150: LD_INT 1
12152: PPUSH
12153: CALL_OW 235
// end ; end else
12157: GO 12238
// begin ComStop ( [ JMM , unit ] ) ;
12159: LD_EXP 14
12163: PUSH
12164: LD_VAR 0 1
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PPUSH
12173: CALL_OW 141
// if joined then
12177: LD_VAR 0 5
12181: IFFALSE 12199
// SetSide ( unit , side ) else
12183: LD_VAR 0 1
12187: PPUSH
12188: LD_VAR 0 4
12192: PPUSH
12193: CALL_OW 235
12197: GO 12238
// begin repeat wait ( 0 0$1 ) ;
12199: LD_INT 35
12201: PPUSH
12202: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12206: LD_EXP 14
12210: PPUSH
12211: LD_VAR 0 1
12215: PPUSH
12216: CALL_OW 296
12220: PUSH
12221: LD_INT 11
12223: GREATER
12224: IFFALSE 12199
// SetSide ( unit , 1 ) ;
12226: LD_VAR 0 1
12230: PPUSH
12231: LD_INT 1
12233: PPUSH
12234: CALL_OW 235
// end ; end ; end ;
12238: LD_VAR 0 2
12242: RET
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12243: LD_EXP 14
12247: PPUSH
12248: CALL_OW 310
12252: PUSH
12253: LD_INT 47
12255: EQUAL
12256: IFFALSE 12324
12258: GO 12260
12260: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12261: LD_STRING M1a
12263: PPUSH
12264: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12268: LD_INT 13
12270: PPUSH
12271: LD_INT 7
12273: PPUSH
12274: LD_INT 2
12276: PPUSH
12277: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12281: LD_INT 29
12283: PPUSH
12284: LD_INT 7
12286: PPUSH
12287: LD_INT 2
12289: PPUSH
12290: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12294: LD_EXP 14
12298: PPUSH
12299: LD_INT 9
12301: PPUSH
12302: CALL_OW 336
// can_escape := true ;
12306: LD_ADDR_EXP 6
12310: PUSH
12311: LD_INT 1
12313: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12314: LD_INT 19
12316: PPUSH
12317: LD_INT 1
12319: PPUSH
12320: CALL_OW 424
// end ;
12324: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12325: LD_EXP 16
12329: PPUSH
12330: CALL_OW 256
12334: PUSH
12335: LD_INT 999
12337: LESS
12338: IFFALSE 12389
12340: GO 12342
12342: DISABLE
// begin enable ;
12343: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12344: LD_INT 25
12346: PPUSH
12347: LD_INT 48
12349: PPUSH
12350: CALL_OW 428
12354: PUSH
12355: LD_EXP 16
12359: EQUAL
12360: IFFALSE 12374
// begin RemoveUnit ( Powell ) ;
12362: LD_EXP 16
12366: PPUSH
12367: CALL_OW 64
// disable ;
12371: DISABLE
// end else
12372: GO 12389
// ComMoveXY ( Powell , 25 , 48 ) ;
12374: LD_EXP 16
12378: PPUSH
12379: LD_INT 25
12381: PPUSH
12382: LD_INT 48
12384: PPUSH
12385: CALL_OW 111
// end ;
12389: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12390: LD_INT 22
12392: PUSH
12393: LD_INT 4
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PUSH
12400: LD_INT 21
12402: PUSH
12403: LD_INT 1
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PUSH
12410: LD_INT 3
12412: PUSH
12413: LD_INT 24
12415: PUSH
12416: LD_INT 990
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: LIST
12431: PPUSH
12432: CALL_OW 69
12436: PUSH
12437: LD_EXP 15
12441: DIFF
12442: IFFALSE 12586
12444: GO 12446
12446: DISABLE
12447: LD_INT 0
12449: PPUSH
// begin enable ;
12450: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12451: LD_ADDR_VAR 0 1
12455: PUSH
12456: LD_INT 22
12458: PUSH
12459: LD_INT 4
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 21
12468: PUSH
12469: LD_INT 1
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: LD_INT 3
12478: PUSH
12479: LD_INT 24
12481: PUSH
12482: LD_INT 990
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: EMPTY
12494: LIST
12495: LIST
12496: LIST
12497: PPUSH
12498: CALL_OW 69
12502: PUSH
12503: LD_EXP 15
12507: DIFF
12508: PUSH
12509: FOR_IN
12510: IFFALSE 12584
// begin ComFree ( i ) ;
12512: LD_VAR 0 1
12516: PPUSH
12517: CALL_OW 139
// SetSide ( i , 1 ) ;
12521: LD_VAR 0 1
12525: PPUSH
12526: LD_INT 1
12528: PPUSH
12529: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
12533: LD_VAR 0 1
12537: PPUSH
12538: LD_EXP 14
12542: PPUSH
12543: CALL_OW 296
12547: PUSH
12548: LD_INT 14
12550: LESS
12551: IFFALSE 12582
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
12553: LD_VAR 0 1
12557: PPUSH
12558: LD_EXP 14
12562: PPUSH
12563: CALL_OW 250
12567: PPUSH
12568: LD_EXP 14
12572: PPUSH
12573: CALL_OW 251
12577: PPUSH
12578: CALL_OW 114
// end ;
12582: GO 12509
12584: POP
12585: POP
// end ;
12586: PPOPN 1
12588: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
12589: LD_INT 22
12591: PUSH
12592: LD_INT 4
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PUSH
12599: LD_INT 34
12601: PUSH
12602: LD_INT 12
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PPUSH
12613: CALL_OW 69
12617: IFFALSE 12699
12619: GO 12621
12621: DISABLE
12622: LD_INT 0
12624: PPUSH
// begin enable ;
12625: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
12626: LD_ADDR_VAR 0 1
12630: PUSH
12631: LD_INT 22
12633: PUSH
12634: LD_INT 4
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: LD_INT 34
12643: PUSH
12644: LD_INT 12
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PPUSH
12655: CALL_OW 69
12659: PUSH
12660: FOR_IN
12661: IFFALSE 12697
// if GetDistUnits ( i , JMM ) < 6 then
12663: LD_VAR 0 1
12667: PPUSH
12668: LD_EXP 14
12672: PPUSH
12673: CALL_OW 296
12677: PUSH
12678: LD_INT 6
12680: LESS
12681: IFFALSE 12695
// SetSide ( i , 7 ) ;
12683: LD_VAR 0 1
12687: PPUSH
12688: LD_INT 7
12690: PPUSH
12691: CALL_OW 235
12695: GO 12660
12697: POP
12698: POP
// end ;
12699: PPOPN 1
12701: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
12702: LD_EXP 6
12706: PUSH
12707: LD_INT 19
12709: PPUSH
12710: LD_INT 22
12712: PUSH
12713: LD_INT 7
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: LD_INT 21
12722: PUSH
12723: LD_INT 1
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PPUSH
12734: CALL_OW 71
12738: NOT
12739: AND
12740: PUSH
12741: LD_INT 3
12743: PPUSH
12744: CALL_OW 469
12748: NOT
12749: AND
12750: PUSH
12751: LD_INT 5
12753: PPUSH
12754: CALL_OW 469
12758: NOT
12759: AND
12760: IFFALSE 14382
12762: GO 12764
12764: DISABLE
12765: LD_INT 0
12767: PPUSH
12768: PPUSH
12769: PPUSH
12770: PPUSH
12771: PPUSH
// begin m1 := false ;
12772: LD_ADDR_VAR 0 3
12776: PUSH
12777: LD_INT 0
12779: ST_TO_ADDR
// m2 := false ;
12780: LD_ADDR_VAR 0 4
12784: PUSH
12785: LD_INT 0
12787: ST_TO_ADDR
// m3 := false ;
12788: LD_ADDR_VAR 0 5
12792: PUSH
12793: LD_INT 0
12795: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
12796: LD_ADDR_VAR 0 1
12800: PUSH
12801: LD_EXP 3
12805: PPUSH
12806: LD_INT 22
12808: PUSH
12809: LD_INT 4
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PUSH
12816: LD_INT 21
12818: PUSH
12819: LD_INT 1
12821: PUSH
12822: EMPTY
12823: LIST
12824: LIST
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PPUSH
12830: CALL_OW 72
12834: PUSH
12835: LD_INT 0
12837: EQUAL
12838: ST_TO_ADDR
// if not all_taken then
12839: LD_VAR 0 1
12843: NOT
12844: IFFALSE 12985
// case query ( Q1 ) of 1 :
12846: LD_STRING Q1
12848: PPUSH
12849: CALL_OW 97
12853: PUSH
12854: LD_INT 1
12856: DOUBLE
12857: EQUAL
12858: IFTRUE 12862
12860: GO 12973
12862: POP
// begin repeat wait ( 0 0$1 ) ;
12863: LD_INT 35
12865: PPUSH
12866: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
12870: LD_EXP 3
12874: PPUSH
12875: LD_INT 22
12877: PUSH
12878: LD_INT 4
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 21
12887: PUSH
12888: LD_INT 1
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PPUSH
12899: CALL_OW 72
12903: PUSH
12904: LD_INT 0
12906: EQUAL
12907: PUSH
12908: LD_INT 19
12910: PPUSH
12911: LD_INT 22
12913: PUSH
12914: LD_INT 7
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PUSH
12921: LD_INT 21
12923: PUSH
12924: LD_INT 1
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PPUSH
12935: CALL_OW 71
12939: NOT
12940: AND
12941: PUSH
12942: LD_INT 3
12944: PPUSH
12945: CALL_OW 469
12949: NOT
12950: AND
12951: PUSH
12952: LD_INT 5
12954: PPUSH
12955: CALL_OW 469
12959: NOT
12960: AND
12961: IFFALSE 12863
// all_taken := true ;
12963: LD_ADDR_VAR 0 1
12967: PUSH
12968: LD_INT 1
12970: ST_TO_ADDR
// end ; 2 :
12971: GO 12985
12973: LD_INT 2
12975: DOUBLE
12976: EQUAL
12977: IFTRUE 12981
12979: GO 12984
12981: POP
// ; end ;
12982: GO 12985
12984: POP
// if team_kill_counter then
12985: LD_EXP 9
12989: IFFALSE 13005
// Say ( JMM , D5-JMM-1 ) else
12991: LD_EXP 14
12995: PPUSH
12996: LD_STRING D5-JMM-1
12998: PPUSH
12999: CALL_OW 88
13003: GO 13017
// Say ( JMM , D5-JMM-1a ) ;
13005: LD_EXP 14
13009: PPUSH
13010: LD_STRING D5-JMM-1a
13012: PPUSH
13013: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13017: LD_INT 22
13019: PUSH
13020: LD_INT 7
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: PUSH
13027: LD_INT 21
13029: PUSH
13030: LD_INT 1
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PUSH
13037: LD_INT 23
13039: PUSH
13040: LD_INT 1
13042: PUSH
13043: EMPTY
13044: LIST
13045: LIST
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: LIST
13051: PPUSH
13052: CALL_OW 69
13056: PUSH
13057: LD_EXP 14
13061: PUSH
13062: LD_EXP 15
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: DIFF
13071: PUSH
13072: LD_INT 10
13074: GREATEREQUAL
13075: IFFALSE 13084
// SetAchievement ( ACH_TEAM ) ;
13077: LD_STRING ACH_TEAM
13079: PPUSH
13080: CALL_OW 543
// if not invis_used then
13084: LD_EXP 12
13088: NOT
13089: IFFALSE 13105
// begin wait ( 3 ) ;
13091: LD_INT 3
13093: PPUSH
13094: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13098: LD_STRING ACH_NOINVIS
13100: PPUSH
13101: CALL_OW 543
// end ; if not alert then
13105: LD_EXP 13
13109: NOT
13110: IFFALSE 13126
// begin wait ( 3 ) ;
13112: LD_INT 3
13114: PPUSH
13115: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13119: LD_STRING ACH_ALARM
13121: PPUSH
13122: CALL_OW 543
// end ; if tick < 15 15$00 then
13126: LD_OWVAR 1
13130: PUSH
13131: LD_INT 31500
13133: LESS
13134: IFFALSE 13150
// begin wait ( 3 ) ;
13136: LD_INT 3
13138: PPUSH
13139: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13143: LD_STRING ACH_ASPEED_16
13145: PPUSH
13146: CALL_OW 543
// end ; if all_taken then
13150: LD_VAR 0 1
13154: IFFALSE 13176
// begin AddMedal ( All , 1 ) ;
13156: LD_STRING All
13158: PPUSH
13159: LD_INT 1
13161: PPUSH
13162: CALL_OW 101
// m1 := true ;
13166: LD_ADDR_VAR 0 3
13170: PUSH
13171: LD_INT 1
13173: ST_TO_ADDR
// end else
13174: GO 13187
// AddMedal ( All , - 1 ) ;
13176: LD_STRING All
13178: PPUSH
13179: LD_INT 1
13181: NEG
13182: PPUSH
13183: CALL_OW 101
// if team_kill_counter then
13187: LD_EXP 9
13191: IFFALSE 13206
// AddMedal ( Save , - 1 ) else
13193: LD_STRING Save
13195: PPUSH
13196: LD_INT 1
13198: NEG
13199: PPUSH
13200: CALL_OW 101
13204: GO 13224
// begin AddMedal ( Save , 1 ) ;
13206: LD_STRING Save
13208: PPUSH
13209: LD_INT 1
13211: PPUSH
13212: CALL_OW 101
// m2 := true ;
13216: LD_ADDR_VAR 0 4
13220: PUSH
13221: LD_INT 1
13223: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 1 , 1 ] [ Difficulty ] then
13224: LD_EXP 8
13228: PUSH
13229: LD_INT 2
13231: PUSH
13232: LD_INT 1
13234: PUSH
13235: LD_INT 1
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: LIST
13242: PUSH
13243: LD_OWVAR 67
13247: ARRAY
13248: GREATEREQUAL
13249: IFFALSE 13264
// AddMedal ( Friendship , - 1 ) else
13251: LD_STRING Friendship
13253: PPUSH
13254: LD_INT 1
13256: NEG
13257: PPUSH
13258: CALL_OW 101
13262: GO 13282
// begin AddMedal ( Friendship , 1 ) ;
13264: LD_STRING Friendship
13266: PPUSH
13267: LD_INT 1
13269: PPUSH
13270: CALL_OW 101
// m3 := true ;
13274: LD_ADDR_VAR 0 5
13278: PUSH
13279: LD_INT 1
13281: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty = 3 then
13282: LD_VAR 0 3
13286: PUSH
13287: LD_VAR 0 4
13291: AND
13292: PUSH
13293: LD_VAR 0 5
13297: AND
13298: PUSH
13299: LD_OWVAR 67
13303: PUSH
13304: LD_INT 3
13306: EQUAL
13307: AND
13308: IFFALSE 13320
// SetAchievementEX ( ACH_AMER , 16 ) ;
13310: LD_STRING ACH_AMER
13312: PPUSH
13313: LD_INT 16
13315: PPUSH
13316: CALL_OW 564
// GiveMedals ( MAIN ) ;
13320: LD_STRING MAIN
13322: PPUSH
13323: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ] ) ;
13327: LD_ADDR_VAR 0 2
13331: PUSH
13332: LD_INT 22
13334: PUSH
13335: LD_INT 7
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 2
13344: PUSH
13345: LD_INT 25
13347: PUSH
13348: LD_INT 1
13350: PUSH
13351: EMPTY
13352: LIST
13353: LIST
13354: PUSH
13355: LD_INT 25
13357: PUSH
13358: LD_INT 2
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 25
13367: PUSH
13368: LD_INT 3
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: LD_INT 25
13377: PUSH
13378: LD_INT 4
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 25
13387: PUSH
13388: LD_INT 5
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 25
13397: PUSH
13398: LD_INT 8
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 25
13407: PUSH
13408: LD_INT 9
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PUSH
13429: EMPTY
13430: LIST
13431: PPUSH
13432: CALL_OW 69
13436: ST_TO_ADDR
// RewardPeople ( tmp ^ Roth ) ;
13437: LD_VAR 0 2
13441: PUSH
13442: LD_EXP 15
13446: ADD
13447: PPUSH
13448: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
13452: LD_EXP 14
13456: PPUSH
13457: LD_STRING 12a_JMM
13459: PPUSH
13460: CALL_OW 38
// if IsLive ( Roth ) then
13464: LD_EXP 15
13468: PPUSH
13469: CALL_OW 300
13473: IFFALSE 13487
// SaveCharacters ( Roth , 12a_Roth ) ;
13475: LD_EXP 15
13479: PPUSH
13480: LD_STRING 12a_Roth
13482: PPUSH
13483: CALL_OW 38
// if Lisa in tmp then
13487: LD_EXP 23
13491: PUSH
13492: LD_VAR 0 2
13496: IN
13497: IFFALSE 13513
// SaveCharacters ( Lisa , 12a_Lisa ) else
13499: LD_EXP 23
13503: PPUSH
13504: LD_STRING 12a_Lisa
13506: PPUSH
13507: CALL_OW 38
13511: GO 13531
// if Lisa then
13513: LD_EXP 23
13517: IFFALSE 13531
// SaveCharacters ( Lisa , 12p_Lisa ) ;
13519: LD_EXP 23
13523: PPUSH
13524: LD_STRING 12p_Lisa
13526: PPUSH
13527: CALL_OW 38
// if Donaldson in tmp then
13531: LD_EXP 24
13535: PUSH
13536: LD_VAR 0 2
13540: IN
13541: IFFALSE 13557
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
13543: LD_EXP 24
13547: PPUSH
13548: LD_STRING 12a_Donaldson
13550: PPUSH
13551: CALL_OW 38
13555: GO 13575
// if Donaldson then
13557: LD_EXP 24
13561: IFFALSE 13575
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
13563: LD_EXP 24
13567: PPUSH
13568: LD_STRING 12p_Donaldson
13570: PPUSH
13571: CALL_OW 38
// if Bobby in tmp then
13575: LD_EXP 25
13579: PUSH
13580: LD_VAR 0 2
13584: IN
13585: IFFALSE 13601
// SaveCharacters ( Bobby , 12a_Bobby ) else
13587: LD_EXP 25
13591: PPUSH
13592: LD_STRING 12a_Bobby
13594: PPUSH
13595: CALL_OW 38
13599: GO 13619
// if Bobby then
13601: LD_EXP 25
13605: IFFALSE 13619
// SaveCharacters ( Bobby , 12p_Bobby ) ;
13607: LD_EXP 25
13611: PPUSH
13612: LD_STRING 12p_Bobby
13614: PPUSH
13615: CALL_OW 38
// if Cyrus in tmp then
13619: LD_EXP 26
13623: PUSH
13624: LD_VAR 0 2
13628: IN
13629: IFFALSE 13645
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
13631: LD_EXP 26
13635: PPUSH
13636: LD_STRING 12a_Cyrus
13638: PPUSH
13639: CALL_OW 38
13643: GO 13663
// if Cyrus then
13645: LD_EXP 26
13649: IFFALSE 13663
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
13651: LD_EXP 26
13655: PPUSH
13656: LD_STRING 12p_Cyrus
13658: PPUSH
13659: CALL_OW 38
// if Denis in tmp then
13663: LD_EXP 27
13667: PUSH
13668: LD_VAR 0 2
13672: IN
13673: IFFALSE 13687
// SaveCharacters ( Denis , 12a_Denis ) ;
13675: LD_EXP 27
13679: PPUSH
13680: LD_STRING 12a_Denis
13682: PPUSH
13683: CALL_OW 38
// if Brown in tmp then
13687: LD_EXP 28
13691: PUSH
13692: LD_VAR 0 2
13696: IN
13697: IFFALSE 13713
// SaveCharacters ( Brown , 12a_Brown ) else
13699: LD_EXP 28
13703: PPUSH
13704: LD_STRING 12a_Brown
13706: PPUSH
13707: CALL_OW 38
13711: GO 13737
// if Brown in tmp then
13713: LD_EXP 28
13717: PUSH
13718: LD_VAR 0 2
13722: IN
13723: IFFALSE 13737
// SaveCharacters ( Brown , 12p_Brown ) ;
13725: LD_EXP 28
13729: PPUSH
13730: LD_STRING 12p_Brown
13732: PPUSH
13733: CALL_OW 38
// if Gladstone in tmp then
13737: LD_EXP 29
13741: PUSH
13742: LD_VAR 0 2
13746: IN
13747: IFFALSE 13763
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
13749: LD_EXP 29
13753: PPUSH
13754: LD_STRING 12a_Gladstone
13756: PPUSH
13757: CALL_OW 38
13761: GO 13781
// if Gladstone then
13763: LD_EXP 29
13767: IFFALSE 13781
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
13769: LD_EXP 29
13773: PPUSH
13774: LD_STRING 12p_Gladstone
13776: PPUSH
13777: CALL_OW 38
// if Houten in tmp then
13781: LD_EXP 30
13785: PUSH
13786: LD_VAR 0 2
13790: IN
13791: IFFALSE 13807
// SaveCharacters ( Houten , 12a_Houten ) else
13793: LD_EXP 30
13797: PPUSH
13798: LD_STRING 12a_Houten
13800: PPUSH
13801: CALL_OW 38
13805: GO 13825
// if Houten then
13807: LD_EXP 30
13811: IFFALSE 13825
// SaveCharacters ( Houten , 12p_Houten ) ;
13813: LD_EXP 30
13817: PPUSH
13818: LD_STRING 12p_Houten
13820: PPUSH
13821: CALL_OW 38
// if Cornel in tmp then
13825: LD_EXP 31
13829: PUSH
13830: LD_VAR 0 2
13834: IN
13835: IFFALSE 13851
// SaveCharacters ( Cornel , 12a_Cornell ) else
13837: LD_EXP 31
13841: PPUSH
13842: LD_STRING 12a_Cornell
13844: PPUSH
13845: CALL_OW 38
13849: GO 13869
// if Cornel then
13851: LD_EXP 31
13855: IFFALSE 13869
// SaveCharacters ( Cornel , 12p_Cornell ) ;
13857: LD_EXP 31
13861: PPUSH
13862: LD_STRING 12p_Cornell
13864: PPUSH
13865: CALL_OW 38
// if Gary in tmp then
13869: LD_EXP 32
13873: PUSH
13874: LD_VAR 0 2
13878: IN
13879: IFFALSE 13895
// SaveCharacters ( Gary , 12a_Gary ) else
13881: LD_EXP 32
13885: PPUSH
13886: LD_STRING 12a_Gary
13888: PPUSH
13889: CALL_OW 38
13893: GO 13913
// if Gary then
13895: LD_EXP 32
13899: IFFALSE 13913
// SaveCharacters ( Gary , 12p_Gary ) ;
13901: LD_EXP 32
13905: PPUSH
13906: LD_STRING 12p_Gary
13908: PPUSH
13909: CALL_OW 38
// if Frank in tmp then
13913: LD_EXP 33
13917: PUSH
13918: LD_VAR 0 2
13922: IN
13923: IFFALSE 13937
// SaveCharacters ( Frank , 12a_Frank ) ;
13925: LD_EXP 33
13929: PPUSH
13930: LD_STRING 12a_Frank
13932: PPUSH
13933: CALL_OW 38
// if Kikuchi in tmp then
13937: LD_EXP 34
13941: PUSH
13942: LD_VAR 0 2
13946: IN
13947: IFFALSE 13963
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
13949: LD_EXP 34
13953: PPUSH
13954: LD_STRING 12a_Kikuchi
13956: PPUSH
13957: CALL_OW 38
13961: GO 13981
// if Kikuchi then
13963: LD_EXP 34
13967: IFFALSE 13981
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
13969: LD_EXP 34
13973: PPUSH
13974: LD_STRING 12p_Kikuchi
13976: PPUSH
13977: CALL_OW 38
// if Simms in tmp then
13981: LD_EXP 35
13985: PUSH
13986: LD_VAR 0 2
13990: IN
13991: IFFALSE 14005
// SaveCharacters ( Simms , 12a_Simms ) ;
13993: LD_EXP 35
13997: PPUSH
13998: LD_STRING 12a_Simms
14000: PPUSH
14001: CALL_OW 38
// if Joan in tmp then
14005: LD_EXP 36
14009: PUSH
14010: LD_VAR 0 2
14014: IN
14015: IFFALSE 14029
// SaveCharacters ( Joan , 12a_Joan ) ;
14017: LD_EXP 36
14021: PPUSH
14022: LD_STRING 12a_Joan
14024: PPUSH
14025: CALL_OW 38
// if DeltaDoctor in tmp then
14029: LD_EXP 37
14033: PUSH
14034: LD_VAR 0 2
14038: IN
14039: IFFALSE 14053
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14041: LD_EXP 37
14045: PPUSH
14046: LD_STRING 12a_DeltaDoctor
14048: PPUSH
14049: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ] ;
14053: LD_ADDR_VAR 0 2
14057: PUSH
14058: LD_VAR 0 2
14062: PUSH
14063: LD_EXP 14
14067: PUSH
14068: LD_EXP 15
14072: PUSH
14073: LD_EXP 23
14077: PUSH
14078: LD_EXP 24
14082: PUSH
14083: LD_EXP 25
14087: PUSH
14088: LD_EXP 26
14092: PUSH
14093: LD_EXP 27
14097: PUSH
14098: LD_EXP 28
14102: PUSH
14103: LD_EXP 29
14107: PUSH
14108: LD_EXP 30
14112: PUSH
14113: LD_EXP 31
14117: PUSH
14118: LD_EXP 32
14122: PUSH
14123: LD_EXP 33
14127: PUSH
14128: LD_EXP 34
14132: PUSH
14133: LD_EXP 35
14137: PUSH
14138: LD_EXP 36
14142: PUSH
14143: LD_EXP 37
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: LIST
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: DIFF
14167: ST_TO_ADDR
// if tmp then
14168: LD_VAR 0 2
14172: IFFALSE 14186
// SaveCharacters ( tmp , 12a_others ) ;
14174: LD_VAR 0 2
14178: PPUSH
14179: LD_STRING 12a_others
14181: PPUSH
14182: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell ] ;
14186: LD_ADDR_VAR 0 2
14190: PUSH
14191: LD_INT 21
14193: PUSH
14194: LD_INT 1
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: PUSH
14201: LD_INT 23
14203: PUSH
14204: LD_INT 1
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: PUSH
14211: LD_INT 2
14213: PUSH
14214: LD_INT 22
14216: PUSH
14217: LD_INT 1
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PUSH
14224: LD_INT 22
14226: PUSH
14227: LD_INT 4
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: LIST
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: LIST
14243: PPUSH
14244: CALL_OW 69
14248: PUSH
14249: LD_EXP 14
14253: PUSH
14254: LD_EXP 15
14258: PUSH
14259: LD_EXP 23
14263: PUSH
14264: LD_EXP 24
14268: PUSH
14269: LD_EXP 25
14273: PUSH
14274: LD_EXP 26
14278: PUSH
14279: LD_EXP 27
14283: PUSH
14284: LD_EXP 28
14288: PUSH
14289: LD_EXP 29
14293: PUSH
14294: LD_EXP 30
14298: PUSH
14299: LD_EXP 31
14303: PUSH
14304: LD_EXP 32
14308: PUSH
14309: LD_EXP 33
14313: PUSH
14314: LD_EXP 34
14318: PUSH
14319: LD_EXP 35
14323: PUSH
14324: LD_EXP 36
14328: PUSH
14329: LD_EXP 37
14333: PUSH
14334: LD_EXP 16
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: DIFF
14359: ST_TO_ADDR
// if tmp then
14360: LD_VAR 0 2
14364: IFFALSE 14378
// SaveCharacters ( tmp , 12p_others ) ;
14366: LD_VAR 0 2
14370: PPUSH
14371: LD_STRING 12p_others
14373: PPUSH
14374: CALL_OW 38
// YouWin ;
14378: CALL_OW 103
// end ; end_of_file
14382: PPOPN 5
14384: END
// on SailEvent ( event ) do var tmp ;
14385: LD_INT 0
14387: PPUSH
// begin if event = 1 then
14388: LD_VAR 0 1
14392: PUSH
14393: LD_INT 1
14395: EQUAL
14396: IFFALSE 14469
// begin if not mobile_patrol then
14398: LD_EXP 17
14402: NOT
14403: IFFALSE 14407
// exit ;
14405: GO 14469
// tmp := mobile_patrol [ mobile_patrol ] ;
14407: LD_ADDR_VAR 0 2
14411: PUSH
14412: LD_EXP 17
14416: PUSH
14417: LD_EXP 17
14421: ARRAY
14422: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
14423: LD_ADDR_EXP 17
14427: PUSH
14428: LD_EXP 17
14432: PPUSH
14433: LD_EXP 17
14437: PPUSH
14438: CALL_OW 3
14442: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
14443: LD_VAR 0 2
14447: PPUSH
14448: LD_EXP 18
14452: PUSH
14453: LD_EXP 17
14457: PUSH
14458: LD_INT 1
14460: PLUS
14461: ARRAY
14462: PPUSH
14463: EMPTY
14464: PPUSH
14465: CALL 6653 0 3
// end ; end ;
14469: PPOPN 2
14471: END
// on UnitDestroyed ( un ) do begin if un = JMM then
14472: LD_VAR 0 1
14476: PUSH
14477: LD_EXP 14
14481: EQUAL
14482: IFFALSE 14491
// YouLost ( JMM ) ;
14484: LD_STRING JMM
14486: PPUSH
14487: CALL_OW 104
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
14491: LD_VAR 0 1
14495: PPUSH
14496: CALL_OW 255
14500: PUSH
14501: LD_INT 7
14503: EQUAL
14504: PUSH
14505: LD_VAR 0 1
14509: PPUSH
14510: CALL_OW 264
14514: PUSH
14515: LD_INT 12
14517: EQUAL
14518: AND
14519: IFFALSE 14528
// YouLost ( Artifact ) ;
14521: LD_STRING Artifact
14523: PPUSH
14524: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
14528: LD_VAR 0 1
14532: PPUSH
14533: CALL_OW 255
14537: PUSH
14538: LD_INT 7
14540: EQUAL
14541: PUSH
14542: LD_VAR 0 1
14546: PPUSH
14547: CALL_OW 247
14551: PUSH
14552: LD_INT 1
14554: EQUAL
14555: AND
14556: PUSH
14557: LD_VAR 0 1
14561: PUSH
14562: LD_EXP 15
14566: EQUAL
14567: OR
14568: IFFALSE 14584
// team_kill_counter := team_kill_counter + 1 ;
14570: LD_ADDR_EXP 9
14574: PUSH
14575: LD_EXP 9
14579: PUSH
14580: LD_INT 1
14582: PLUS
14583: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
14584: LD_VAR 0 1
14588: PPUSH
14589: CALL_OW 255
14593: PUSH
14594: LD_INT 1
14596: EQUAL
14597: PUSH
14598: LD_VAR 0 1
14602: PPUSH
14603: CALL_OW 247
14607: PUSH
14608: LD_INT 1
14610: EQUAL
14611: AND
14612: IFFALSE 14628
// friends_kill_counter := friends_kill_counter + 1 ;
14614: LD_ADDR_EXP 8
14618: PUSH
14619: LD_EXP 8
14623: PUSH
14624: LD_INT 1
14626: PLUS
14627: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
14628: LD_VAR 0 1
14632: PPUSH
14633: CALL_OW 255
14637: PUSH
14638: LD_INT 1
14640: NONEQUAL
14641: IFFALSE 14645
// exit ;
14643: GO 14722
// if GetControl ( un ) = control_remote then
14645: LD_VAR 0 1
14649: PPUSH
14650: CALL_OW 263
14654: PUSH
14655: LD_INT 2
14657: EQUAL
14658: IFFALSE 14676
// defenders := defenders diff un ;
14660: LD_ADDR_EXP 20
14664: PUSH
14665: LD_EXP 20
14669: PUSH
14670: LD_VAR 0 1
14674: DIFF
14675: ST_TO_ADDR
// if not un in defenders then
14676: LD_VAR 0 1
14680: PUSH
14681: LD_EXP 20
14685: IN
14686: NOT
14687: IFFALSE 14722
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
14689: LD_ADDR_EXP 21
14693: PUSH
14694: LD_VAR 0 1
14698: PPUSH
14699: CALL_OW 250
14703: PUSH
14704: LD_VAR 0 1
14708: PPUSH
14709: CALL_OW 251
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: ST_TO_ADDR
// Defend ;
14718: CALL 2779 0 0
// end ; end ;
14722: PPOPN 1
14724: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) <> 1 then
14725: LD_VAR 0 1
14729: PPUSH
14730: CALL_OW 255
14734: PUSH
14735: LD_INT 1
14737: NONEQUAL
14738: IFFALSE 14742
// exit ;
14740: GO 14766
// if GetControl ( veh ) = control_remote then
14742: LD_VAR 0 1
14746: PPUSH
14747: CALL_OW 263
14751: PUSH
14752: LD_INT 2
14754: EQUAL
14755: IFFALSE 14766
// Connect ( veh ) ;
14757: LD_VAR 0 1
14761: PPUSH
14762: CALL 40174 0 1
// end ;
14766: PPOPN 2
14768: END
// on UnitGoesToRed ( un ) do var i , veh ;
14769: LD_INT 0
14771: PPUSH
14772: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
14773: LD_VAR 0 1
14777: PPUSH
14778: CALL_OW 255
14782: PUSH
14783: LD_INT 1
14785: EQUAL
14786: PUSH
14787: LD_VAR 0 1
14791: PPUSH
14792: CALL_OW 263
14796: PUSH
14797: LD_INT 2
14799: EQUAL
14800: AND
14801: IFFALSE 14812
// ComUnlink ( un ) ;
14803: LD_VAR 0 1
14807: PPUSH
14808: CALL_OW 136
// if un = ambar0 then
14812: LD_VAR 0 1
14816: PUSH
14817: LD_INT 18
14819: EQUAL
14820: IFFALSE 14930
// begin uc_side := 1 ;
14822: LD_ADDR_OWVAR 20
14826: PUSH
14827: LD_INT 1
14829: ST_TO_ADDR
// uc_nation := 1 ;
14830: LD_ADDR_OWVAR 21
14834: PUSH
14835: LD_INT 1
14837: ST_TO_ADDR
// for i = 1 to 6 do
14838: LD_ADDR_VAR 0 2
14842: PUSH
14843: DOUBLE
14844: LD_INT 1
14846: DEC
14847: ST_TO_ADDR
14848: LD_INT 6
14850: PUSH
14851: FOR_TO
14852: IFFALSE 14928
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
14854: LD_INT 3
14856: PPUSH
14857: LD_INT 1
14859: PPUSH
14860: LD_INT 3
14862: PPUSH
14863: LD_INT 4
14865: PPUSH
14866: LD_INT 100
14868: PPUSH
14869: CALL 37119 0 5
// veh := CreateVehicle ;
14873: LD_ADDR_VAR 0 3
14877: PUSH
14878: CALL_OW 45
14882: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
14883: LD_VAR 0 3
14887: PPUSH
14888: LD_INT 1
14890: PPUSH
14891: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
14895: LD_VAR 0 3
14899: PPUSH
14900: LD_INT 25
14902: PPUSH
14903: LD_INT 0
14905: PPUSH
14906: CALL_OW 49
// defenders := defenders ^ veh ;
14910: LD_ADDR_EXP 20
14914: PUSH
14915: LD_EXP 20
14919: PUSH
14920: LD_VAR 0 3
14924: ADD
14925: ST_TO_ADDR
// end ;
14926: GO 14851
14928: POP
14929: POP
// end ; end ;
14930: PPOPN 3
14932: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
14933: LD_VAR 0 2
14937: PUSH
14938: LD_EXP 16
14942: EQUAL
14943: IFFALSE 14954
// RemoveUnit ( Powell ) ;
14945: LD_EXP 16
14949: PPUSH
14950: CALL_OW 64
// end ;
14954: PPOPN 2
14956: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
14957: LD_VAR 0 1
14961: PPUSH
14962: CALL 28386 0 1
// end ; end_of_file
14966: PPOPN 1
14968: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
14969: LD_INT 0
14971: PPUSH
// ar_miner := 81 ;
14972: LD_ADDR_EXP 45
14976: PUSH
14977: LD_INT 81
14979: ST_TO_ADDR
// ar_crane := 88 ;
14980: LD_ADDR_EXP 44
14984: PUSH
14985: LD_INT 88
14987: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
14988: LD_ADDR_EXP 39
14992: PUSH
14993: LD_INT 89
14995: ST_TO_ADDR
// us_hack := 99 ;
14996: LD_ADDR_EXP 40
15000: PUSH
15001: LD_INT 99
15003: ST_TO_ADDR
// us_artillery := 97 ;
15004: LD_ADDR_EXP 41
15008: PUSH
15009: LD_INT 97
15011: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15012: LD_ADDR_EXP 42
15016: PUSH
15017: LD_INT 91
15019: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
15020: LD_ADDR_EXP 43
15024: PUSH
15025: LD_INT 92
15027: ST_TO_ADDR
// ru_radar := 98 ;
15028: LD_ADDR_EXP 38
15032: PUSH
15033: LD_INT 98
15035: ST_TO_ADDR
// tech_Artillery := 80 ;
15036: LD_ADDR_EXP 46
15040: PUSH
15041: LD_INT 80
15043: ST_TO_ADDR
// tech_RadMat := 81 ;
15044: LD_ADDR_EXP 47
15048: PUSH
15049: LD_INT 81
15051: ST_TO_ADDR
// tech_BasicTools := 82 ;
15052: LD_ADDR_EXP 48
15056: PUSH
15057: LD_INT 82
15059: ST_TO_ADDR
// tech_Cargo := 83 ;
15060: LD_ADDR_EXP 49
15064: PUSH
15065: LD_INT 83
15067: ST_TO_ADDR
// tech_Track := 84 ;
15068: LD_ADDR_EXP 50
15072: PUSH
15073: LD_INT 84
15075: ST_TO_ADDR
// tech_Crane := 85 ;
15076: LD_ADDR_EXP 51
15080: PUSH
15081: LD_INT 85
15083: ST_TO_ADDR
// tech_Bulldozer := 86 ;
15084: LD_ADDR_EXP 52
15088: PUSH
15089: LD_INT 86
15091: ST_TO_ADDR
// tech_Hovercraft := 87 ;
15092: LD_ADDR_EXP 53
15096: PUSH
15097: LD_INT 87
15099: ST_TO_ADDR
// end ;
15100: LD_VAR 0 1
15104: RET
// every 1 do
15105: GO 15107
15107: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
15108: CALL 14969 0 0
15112: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
15113: LD_VAR 0 2
15117: PUSH
15118: LD_INT 100
15120: EQUAL
15121: IFFALSE 16070
// begin if not StreamModeActive then
15123: LD_EXP 54
15127: NOT
15128: IFFALSE 15138
// StreamModeActive := true ;
15130: LD_ADDR_EXP 54
15134: PUSH
15135: LD_INT 1
15137: ST_TO_ADDR
// if p3 = 0 then
15138: LD_VAR 0 3
15142: PUSH
15143: LD_INT 0
15145: EQUAL
15146: IFFALSE 15152
// InitStreamMode ;
15148: CALL 16228 0 0
// if p3 = 1 then
15152: LD_VAR 0 3
15156: PUSH
15157: LD_INT 1
15159: EQUAL
15160: IFFALSE 15170
// sRocket := true ;
15162: LD_ADDR_EXP 59
15166: PUSH
15167: LD_INT 1
15169: ST_TO_ADDR
// if p3 = 2 then
15170: LD_VAR 0 3
15174: PUSH
15175: LD_INT 2
15177: EQUAL
15178: IFFALSE 15188
// sSpeed := true ;
15180: LD_ADDR_EXP 58
15184: PUSH
15185: LD_INT 1
15187: ST_TO_ADDR
// if p3 = 3 then
15188: LD_VAR 0 3
15192: PUSH
15193: LD_INT 3
15195: EQUAL
15196: IFFALSE 15206
// sEngine := true ;
15198: LD_ADDR_EXP 60
15202: PUSH
15203: LD_INT 1
15205: ST_TO_ADDR
// if p3 = 4 then
15206: LD_VAR 0 3
15210: PUSH
15211: LD_INT 4
15213: EQUAL
15214: IFFALSE 15224
// sSpec := true ;
15216: LD_ADDR_EXP 57
15220: PUSH
15221: LD_INT 1
15223: ST_TO_ADDR
// if p3 = 5 then
15224: LD_VAR 0 3
15228: PUSH
15229: LD_INT 5
15231: EQUAL
15232: IFFALSE 15242
// sLevel := true ;
15234: LD_ADDR_EXP 61
15238: PUSH
15239: LD_INT 1
15241: ST_TO_ADDR
// if p3 = 6 then
15242: LD_VAR 0 3
15246: PUSH
15247: LD_INT 6
15249: EQUAL
15250: IFFALSE 15260
// sArmoury := true ;
15252: LD_ADDR_EXP 62
15256: PUSH
15257: LD_INT 1
15259: ST_TO_ADDR
// if p3 = 7 then
15260: LD_VAR 0 3
15264: PUSH
15265: LD_INT 7
15267: EQUAL
15268: IFFALSE 15278
// sRadar := true ;
15270: LD_ADDR_EXP 63
15274: PUSH
15275: LD_INT 1
15277: ST_TO_ADDR
// if p3 = 8 then
15278: LD_VAR 0 3
15282: PUSH
15283: LD_INT 8
15285: EQUAL
15286: IFFALSE 15296
// sBunker := true ;
15288: LD_ADDR_EXP 64
15292: PUSH
15293: LD_INT 1
15295: ST_TO_ADDR
// if p3 = 9 then
15296: LD_VAR 0 3
15300: PUSH
15301: LD_INT 9
15303: EQUAL
15304: IFFALSE 15314
// sHack := true ;
15306: LD_ADDR_EXP 65
15310: PUSH
15311: LD_INT 1
15313: ST_TO_ADDR
// if p3 = 10 then
15314: LD_VAR 0 3
15318: PUSH
15319: LD_INT 10
15321: EQUAL
15322: IFFALSE 15332
// sFire := true ;
15324: LD_ADDR_EXP 66
15328: PUSH
15329: LD_INT 1
15331: ST_TO_ADDR
// if p3 = 11 then
15332: LD_VAR 0 3
15336: PUSH
15337: LD_INT 11
15339: EQUAL
15340: IFFALSE 15350
// sRefresh := true ;
15342: LD_ADDR_EXP 67
15346: PUSH
15347: LD_INT 1
15349: ST_TO_ADDR
// if p3 = 12 then
15350: LD_VAR 0 3
15354: PUSH
15355: LD_INT 12
15357: EQUAL
15358: IFFALSE 15368
// sExp := true ;
15360: LD_ADDR_EXP 68
15364: PUSH
15365: LD_INT 1
15367: ST_TO_ADDR
// if p3 = 13 then
15368: LD_VAR 0 3
15372: PUSH
15373: LD_INT 13
15375: EQUAL
15376: IFFALSE 15386
// sDepot := true ;
15378: LD_ADDR_EXP 69
15382: PUSH
15383: LD_INT 1
15385: ST_TO_ADDR
// if p3 = 14 then
15386: LD_VAR 0 3
15390: PUSH
15391: LD_INT 14
15393: EQUAL
15394: IFFALSE 15404
// sFlag := true ;
15396: LD_ADDR_EXP 70
15400: PUSH
15401: LD_INT 1
15403: ST_TO_ADDR
// if p3 = 15 then
15404: LD_VAR 0 3
15408: PUSH
15409: LD_INT 15
15411: EQUAL
15412: IFFALSE 15422
// sKamikadze := true ;
15414: LD_ADDR_EXP 78
15418: PUSH
15419: LD_INT 1
15421: ST_TO_ADDR
// if p3 = 16 then
15422: LD_VAR 0 3
15426: PUSH
15427: LD_INT 16
15429: EQUAL
15430: IFFALSE 15440
// sTroll := true ;
15432: LD_ADDR_EXP 79
15436: PUSH
15437: LD_INT 1
15439: ST_TO_ADDR
// if p3 = 17 then
15440: LD_VAR 0 3
15444: PUSH
15445: LD_INT 17
15447: EQUAL
15448: IFFALSE 15458
// sSlow := true ;
15450: LD_ADDR_EXP 80
15454: PUSH
15455: LD_INT 1
15457: ST_TO_ADDR
// if p3 = 18 then
15458: LD_VAR 0 3
15462: PUSH
15463: LD_INT 18
15465: EQUAL
15466: IFFALSE 15476
// sLack := true ;
15468: LD_ADDR_EXP 81
15472: PUSH
15473: LD_INT 1
15475: ST_TO_ADDR
// if p3 = 19 then
15476: LD_VAR 0 3
15480: PUSH
15481: LD_INT 19
15483: EQUAL
15484: IFFALSE 15494
// sTank := true ;
15486: LD_ADDR_EXP 83
15490: PUSH
15491: LD_INT 1
15493: ST_TO_ADDR
// if p3 = 20 then
15494: LD_VAR 0 3
15498: PUSH
15499: LD_INT 20
15501: EQUAL
15502: IFFALSE 15512
// sRemote := true ;
15504: LD_ADDR_EXP 84
15508: PUSH
15509: LD_INT 1
15511: ST_TO_ADDR
// if p3 = 21 then
15512: LD_VAR 0 3
15516: PUSH
15517: LD_INT 21
15519: EQUAL
15520: IFFALSE 15530
// sPowell := true ;
15522: LD_ADDR_EXP 85
15526: PUSH
15527: LD_INT 1
15529: ST_TO_ADDR
// if p3 = 22 then
15530: LD_VAR 0 3
15534: PUSH
15535: LD_INT 22
15537: EQUAL
15538: IFFALSE 15548
// sTeleport := true ;
15540: LD_ADDR_EXP 88
15544: PUSH
15545: LD_INT 1
15547: ST_TO_ADDR
// if p3 = 23 then
15548: LD_VAR 0 3
15552: PUSH
15553: LD_INT 23
15555: EQUAL
15556: IFFALSE 15566
// sOilTower := true ;
15558: LD_ADDR_EXP 90
15562: PUSH
15563: LD_INT 1
15565: ST_TO_ADDR
// if p3 = 24 then
15566: LD_VAR 0 3
15570: PUSH
15571: LD_INT 24
15573: EQUAL
15574: IFFALSE 15584
// sShovel := true ;
15576: LD_ADDR_EXP 91
15580: PUSH
15581: LD_INT 1
15583: ST_TO_ADDR
// if p3 = 25 then
15584: LD_VAR 0 3
15588: PUSH
15589: LD_INT 25
15591: EQUAL
15592: IFFALSE 15602
// sSheik := true ;
15594: LD_ADDR_EXP 92
15598: PUSH
15599: LD_INT 1
15601: ST_TO_ADDR
// if p3 = 26 then
15602: LD_VAR 0 3
15606: PUSH
15607: LD_INT 26
15609: EQUAL
15610: IFFALSE 15620
// sEarthquake := true ;
15612: LD_ADDR_EXP 94
15616: PUSH
15617: LD_INT 1
15619: ST_TO_ADDR
// if p3 = 27 then
15620: LD_VAR 0 3
15624: PUSH
15625: LD_INT 27
15627: EQUAL
15628: IFFALSE 15638
// sAI := true ;
15630: LD_ADDR_EXP 95
15634: PUSH
15635: LD_INT 1
15637: ST_TO_ADDR
// if p3 = 28 then
15638: LD_VAR 0 3
15642: PUSH
15643: LD_INT 28
15645: EQUAL
15646: IFFALSE 15656
// sCargo := true ;
15648: LD_ADDR_EXP 98
15652: PUSH
15653: LD_INT 1
15655: ST_TO_ADDR
// if p3 = 29 then
15656: LD_VAR 0 3
15660: PUSH
15661: LD_INT 29
15663: EQUAL
15664: IFFALSE 15674
// sDLaser := true ;
15666: LD_ADDR_EXP 99
15670: PUSH
15671: LD_INT 1
15673: ST_TO_ADDR
// if p3 = 30 then
15674: LD_VAR 0 3
15678: PUSH
15679: LD_INT 30
15681: EQUAL
15682: IFFALSE 15692
// sExchange := true ;
15684: LD_ADDR_EXP 100
15688: PUSH
15689: LD_INT 1
15691: ST_TO_ADDR
// if p3 = 31 then
15692: LD_VAR 0 3
15696: PUSH
15697: LD_INT 31
15699: EQUAL
15700: IFFALSE 15710
// sFac := true ;
15702: LD_ADDR_EXP 101
15706: PUSH
15707: LD_INT 1
15709: ST_TO_ADDR
// if p3 = 32 then
15710: LD_VAR 0 3
15714: PUSH
15715: LD_INT 32
15717: EQUAL
15718: IFFALSE 15728
// sPower := true ;
15720: LD_ADDR_EXP 102
15724: PUSH
15725: LD_INT 1
15727: ST_TO_ADDR
// if p3 = 33 then
15728: LD_VAR 0 3
15732: PUSH
15733: LD_INT 33
15735: EQUAL
15736: IFFALSE 15746
// sRandom := true ;
15738: LD_ADDR_EXP 103
15742: PUSH
15743: LD_INT 1
15745: ST_TO_ADDR
// if p3 = 34 then
15746: LD_VAR 0 3
15750: PUSH
15751: LD_INT 34
15753: EQUAL
15754: IFFALSE 15764
// sShield := true ;
15756: LD_ADDR_EXP 104
15760: PUSH
15761: LD_INT 1
15763: ST_TO_ADDR
// if p3 = 35 then
15764: LD_VAR 0 3
15768: PUSH
15769: LD_INT 35
15771: EQUAL
15772: IFFALSE 15782
// sTime := true ;
15774: LD_ADDR_EXP 105
15778: PUSH
15779: LD_INT 1
15781: ST_TO_ADDR
// if p3 = 36 then
15782: LD_VAR 0 3
15786: PUSH
15787: LD_INT 36
15789: EQUAL
15790: IFFALSE 15800
// sTools := true ;
15792: LD_ADDR_EXP 106
15796: PUSH
15797: LD_INT 1
15799: ST_TO_ADDR
// if p3 = 101 then
15800: LD_VAR 0 3
15804: PUSH
15805: LD_INT 101
15807: EQUAL
15808: IFFALSE 15818
// sSold := true ;
15810: LD_ADDR_EXP 71
15814: PUSH
15815: LD_INT 1
15817: ST_TO_ADDR
// if p3 = 102 then
15818: LD_VAR 0 3
15822: PUSH
15823: LD_INT 102
15825: EQUAL
15826: IFFALSE 15836
// sDiff := true ;
15828: LD_ADDR_EXP 72
15832: PUSH
15833: LD_INT 1
15835: ST_TO_ADDR
// if p3 = 103 then
15836: LD_VAR 0 3
15840: PUSH
15841: LD_INT 103
15843: EQUAL
15844: IFFALSE 15854
// sFog := true ;
15846: LD_ADDR_EXP 75
15850: PUSH
15851: LD_INT 1
15853: ST_TO_ADDR
// if p3 = 104 then
15854: LD_VAR 0 3
15858: PUSH
15859: LD_INT 104
15861: EQUAL
15862: IFFALSE 15872
// sReset := true ;
15864: LD_ADDR_EXP 76
15868: PUSH
15869: LD_INT 1
15871: ST_TO_ADDR
// if p3 = 105 then
15872: LD_VAR 0 3
15876: PUSH
15877: LD_INT 105
15879: EQUAL
15880: IFFALSE 15890
// sSun := true ;
15882: LD_ADDR_EXP 77
15886: PUSH
15887: LD_INT 1
15889: ST_TO_ADDR
// if p3 = 106 then
15890: LD_VAR 0 3
15894: PUSH
15895: LD_INT 106
15897: EQUAL
15898: IFFALSE 15908
// sTiger := true ;
15900: LD_ADDR_EXP 73
15904: PUSH
15905: LD_INT 1
15907: ST_TO_ADDR
// if p3 = 107 then
15908: LD_VAR 0 3
15912: PUSH
15913: LD_INT 107
15915: EQUAL
15916: IFFALSE 15926
// sBomb := true ;
15918: LD_ADDR_EXP 74
15922: PUSH
15923: LD_INT 1
15925: ST_TO_ADDR
// if p3 = 108 then
15926: LD_VAR 0 3
15930: PUSH
15931: LD_INT 108
15933: EQUAL
15934: IFFALSE 15944
// sWound := true ;
15936: LD_ADDR_EXP 82
15940: PUSH
15941: LD_INT 1
15943: ST_TO_ADDR
// if p3 = 109 then
15944: LD_VAR 0 3
15948: PUSH
15949: LD_INT 109
15951: EQUAL
15952: IFFALSE 15962
// sBetray := true ;
15954: LD_ADDR_EXP 86
15958: PUSH
15959: LD_INT 1
15961: ST_TO_ADDR
// if p3 = 110 then
15962: LD_VAR 0 3
15966: PUSH
15967: LD_INT 110
15969: EQUAL
15970: IFFALSE 15980
// sContamin := true ;
15972: LD_ADDR_EXP 87
15976: PUSH
15977: LD_INT 1
15979: ST_TO_ADDR
// if p3 = 111 then
15980: LD_VAR 0 3
15984: PUSH
15985: LD_INT 111
15987: EQUAL
15988: IFFALSE 15998
// sOil := true ;
15990: LD_ADDR_EXP 89
15994: PUSH
15995: LD_INT 1
15997: ST_TO_ADDR
// if p3 = 112 then
15998: LD_VAR 0 3
16002: PUSH
16003: LD_INT 112
16005: EQUAL
16006: IFFALSE 16016
// sStu := true ;
16008: LD_ADDR_EXP 93
16012: PUSH
16013: LD_INT 1
16015: ST_TO_ADDR
// if p3 = 113 then
16016: LD_VAR 0 3
16020: PUSH
16021: LD_INT 113
16023: EQUAL
16024: IFFALSE 16034
// sBazooka := true ;
16026: LD_ADDR_EXP 96
16030: PUSH
16031: LD_INT 1
16033: ST_TO_ADDR
// if p3 = 114 then
16034: LD_VAR 0 3
16038: PUSH
16039: LD_INT 114
16041: EQUAL
16042: IFFALSE 16052
// sMortar := true ;
16044: LD_ADDR_EXP 97
16048: PUSH
16049: LD_INT 1
16051: ST_TO_ADDR
// if p3 = 115 then
16052: LD_VAR 0 3
16056: PUSH
16057: LD_INT 115
16059: EQUAL
16060: IFFALSE 16070
// sRanger := true ;
16062: LD_ADDR_EXP 107
16066: PUSH
16067: LD_INT 1
16069: ST_TO_ADDR
// end ; if p2 = 101 then
16070: LD_VAR 0 2
16074: PUSH
16075: LD_INT 101
16077: EQUAL
16078: IFFALSE 16206
// begin case p3 of 1 :
16080: LD_VAR 0 3
16084: PUSH
16085: LD_INT 1
16087: DOUBLE
16088: EQUAL
16089: IFTRUE 16093
16091: GO 16100
16093: POP
// hHackUnlimitedResources ; 2 :
16094: CALL 27241 0 0
16098: GO 16206
16100: LD_INT 2
16102: DOUBLE
16103: EQUAL
16104: IFTRUE 16108
16106: GO 16115
16108: POP
// hHackSetLevel10 ; 3 :
16109: CALL 27374 0 0
16113: GO 16206
16115: LD_INT 3
16117: DOUBLE
16118: EQUAL
16119: IFTRUE 16123
16121: GO 16130
16123: POP
// hHackSetLevel10YourUnits ; 4 :
16124: CALL 27459 0 0
16128: GO 16206
16130: LD_INT 4
16132: DOUBLE
16133: EQUAL
16134: IFTRUE 16138
16136: GO 16145
16138: POP
// hHackInvincible ; 5 :
16139: CALL 27907 0 0
16143: GO 16206
16145: LD_INT 5
16147: DOUBLE
16148: EQUAL
16149: IFTRUE 16153
16151: GO 16160
16153: POP
// hHackInvisible ; 6 :
16154: CALL 28018 0 0
16158: GO 16206
16160: LD_INT 6
16162: DOUBLE
16163: EQUAL
16164: IFTRUE 16168
16166: GO 16175
16168: POP
// hHackChangeYourSide ; 7 :
16169: CALL 28075 0 0
16173: GO 16206
16175: LD_INT 7
16177: DOUBLE
16178: EQUAL
16179: IFTRUE 16183
16181: GO 16190
16183: POP
// hHackChangeUnitSide ; 8 :
16184: CALL 28117 0 0
16188: GO 16206
16190: LD_INT 8
16192: DOUBLE
16193: EQUAL
16194: IFTRUE 16198
16196: GO 16205
16198: POP
// hHackFog ; end ;
16199: CALL 28218 0 0
16203: GO 16206
16205: POP
// end ; end ;
16206: PPOPN 6
16208: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
16209: GO 16211
16211: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16212: LD_STRING initStreamRollete();
16214: PPUSH
16215: CALL_OW 559
// InitStreamMode ;
16219: CALL 16228 0 0
// DefineStreamItems ( ) ;
16223: CALL 16668 0 0
// end ;
16227: END
// function InitStreamMode ; begin
16228: LD_INT 0
16230: PPUSH
// streamModeActive := false ;
16231: LD_ADDR_EXP 54
16235: PUSH
16236: LD_INT 0
16238: ST_TO_ADDR
// normalCounter := 36 ;
16239: LD_ADDR_EXP 55
16243: PUSH
16244: LD_INT 36
16246: ST_TO_ADDR
// hardcoreCounter := 16 ;
16247: LD_ADDR_EXP 56
16251: PUSH
16252: LD_INT 16
16254: ST_TO_ADDR
// sRocket := false ;
16255: LD_ADDR_EXP 59
16259: PUSH
16260: LD_INT 0
16262: ST_TO_ADDR
// sSpeed := false ;
16263: LD_ADDR_EXP 58
16267: PUSH
16268: LD_INT 0
16270: ST_TO_ADDR
// sEngine := false ;
16271: LD_ADDR_EXP 60
16275: PUSH
16276: LD_INT 0
16278: ST_TO_ADDR
// sSpec := false ;
16279: LD_ADDR_EXP 57
16283: PUSH
16284: LD_INT 0
16286: ST_TO_ADDR
// sLevel := false ;
16287: LD_ADDR_EXP 61
16291: PUSH
16292: LD_INT 0
16294: ST_TO_ADDR
// sArmoury := false ;
16295: LD_ADDR_EXP 62
16299: PUSH
16300: LD_INT 0
16302: ST_TO_ADDR
// sRadar := false ;
16303: LD_ADDR_EXP 63
16307: PUSH
16308: LD_INT 0
16310: ST_TO_ADDR
// sBunker := false ;
16311: LD_ADDR_EXP 64
16315: PUSH
16316: LD_INT 0
16318: ST_TO_ADDR
// sHack := false ;
16319: LD_ADDR_EXP 65
16323: PUSH
16324: LD_INT 0
16326: ST_TO_ADDR
// sFire := false ;
16327: LD_ADDR_EXP 66
16331: PUSH
16332: LD_INT 0
16334: ST_TO_ADDR
// sRefresh := false ;
16335: LD_ADDR_EXP 67
16339: PUSH
16340: LD_INT 0
16342: ST_TO_ADDR
// sExp := false ;
16343: LD_ADDR_EXP 68
16347: PUSH
16348: LD_INT 0
16350: ST_TO_ADDR
// sDepot := false ;
16351: LD_ADDR_EXP 69
16355: PUSH
16356: LD_INT 0
16358: ST_TO_ADDR
// sFlag := false ;
16359: LD_ADDR_EXP 70
16363: PUSH
16364: LD_INT 0
16366: ST_TO_ADDR
// sKamikadze := false ;
16367: LD_ADDR_EXP 78
16371: PUSH
16372: LD_INT 0
16374: ST_TO_ADDR
// sTroll := false ;
16375: LD_ADDR_EXP 79
16379: PUSH
16380: LD_INT 0
16382: ST_TO_ADDR
// sSlow := false ;
16383: LD_ADDR_EXP 80
16387: PUSH
16388: LD_INT 0
16390: ST_TO_ADDR
// sLack := false ;
16391: LD_ADDR_EXP 81
16395: PUSH
16396: LD_INT 0
16398: ST_TO_ADDR
// sTank := false ;
16399: LD_ADDR_EXP 83
16403: PUSH
16404: LD_INT 0
16406: ST_TO_ADDR
// sRemote := false ;
16407: LD_ADDR_EXP 84
16411: PUSH
16412: LD_INT 0
16414: ST_TO_ADDR
// sPowell := false ;
16415: LD_ADDR_EXP 85
16419: PUSH
16420: LD_INT 0
16422: ST_TO_ADDR
// sTeleport := false ;
16423: LD_ADDR_EXP 88
16427: PUSH
16428: LD_INT 0
16430: ST_TO_ADDR
// sOilTower := false ;
16431: LD_ADDR_EXP 90
16435: PUSH
16436: LD_INT 0
16438: ST_TO_ADDR
// sShovel := false ;
16439: LD_ADDR_EXP 91
16443: PUSH
16444: LD_INT 0
16446: ST_TO_ADDR
// sSheik := false ;
16447: LD_ADDR_EXP 92
16451: PUSH
16452: LD_INT 0
16454: ST_TO_ADDR
// sEarthquake := false ;
16455: LD_ADDR_EXP 94
16459: PUSH
16460: LD_INT 0
16462: ST_TO_ADDR
// sAI := false ;
16463: LD_ADDR_EXP 95
16467: PUSH
16468: LD_INT 0
16470: ST_TO_ADDR
// sCargo := false ;
16471: LD_ADDR_EXP 98
16475: PUSH
16476: LD_INT 0
16478: ST_TO_ADDR
// sDLaser := false ;
16479: LD_ADDR_EXP 99
16483: PUSH
16484: LD_INT 0
16486: ST_TO_ADDR
// sExchange := false ;
16487: LD_ADDR_EXP 100
16491: PUSH
16492: LD_INT 0
16494: ST_TO_ADDR
// sFac := false ;
16495: LD_ADDR_EXP 101
16499: PUSH
16500: LD_INT 0
16502: ST_TO_ADDR
// sPower := false ;
16503: LD_ADDR_EXP 102
16507: PUSH
16508: LD_INT 0
16510: ST_TO_ADDR
// sRandom := false ;
16511: LD_ADDR_EXP 103
16515: PUSH
16516: LD_INT 0
16518: ST_TO_ADDR
// sShield := false ;
16519: LD_ADDR_EXP 104
16523: PUSH
16524: LD_INT 0
16526: ST_TO_ADDR
// sTime := false ;
16527: LD_ADDR_EXP 105
16531: PUSH
16532: LD_INT 0
16534: ST_TO_ADDR
// sTools := false ;
16535: LD_ADDR_EXP 106
16539: PUSH
16540: LD_INT 0
16542: ST_TO_ADDR
// sSold := false ;
16543: LD_ADDR_EXP 71
16547: PUSH
16548: LD_INT 0
16550: ST_TO_ADDR
// sDiff := false ;
16551: LD_ADDR_EXP 72
16555: PUSH
16556: LD_INT 0
16558: ST_TO_ADDR
// sFog := false ;
16559: LD_ADDR_EXP 75
16563: PUSH
16564: LD_INT 0
16566: ST_TO_ADDR
// sReset := false ;
16567: LD_ADDR_EXP 76
16571: PUSH
16572: LD_INT 0
16574: ST_TO_ADDR
// sSun := false ;
16575: LD_ADDR_EXP 77
16579: PUSH
16580: LD_INT 0
16582: ST_TO_ADDR
// sTiger := false ;
16583: LD_ADDR_EXP 73
16587: PUSH
16588: LD_INT 0
16590: ST_TO_ADDR
// sBomb := false ;
16591: LD_ADDR_EXP 74
16595: PUSH
16596: LD_INT 0
16598: ST_TO_ADDR
// sWound := false ;
16599: LD_ADDR_EXP 82
16603: PUSH
16604: LD_INT 0
16606: ST_TO_ADDR
// sBetray := false ;
16607: LD_ADDR_EXP 86
16611: PUSH
16612: LD_INT 0
16614: ST_TO_ADDR
// sContamin := false ;
16615: LD_ADDR_EXP 87
16619: PUSH
16620: LD_INT 0
16622: ST_TO_ADDR
// sOil := false ;
16623: LD_ADDR_EXP 89
16627: PUSH
16628: LD_INT 0
16630: ST_TO_ADDR
// sStu := false ;
16631: LD_ADDR_EXP 93
16635: PUSH
16636: LD_INT 0
16638: ST_TO_ADDR
// sBazooka := false ;
16639: LD_ADDR_EXP 96
16643: PUSH
16644: LD_INT 0
16646: ST_TO_ADDR
// sMortar := false ;
16647: LD_ADDR_EXP 97
16651: PUSH
16652: LD_INT 0
16654: ST_TO_ADDR
// sRanger := false ;
16655: LD_ADDR_EXP 107
16659: PUSH
16660: LD_INT 0
16662: ST_TO_ADDR
// end ;
16663: LD_VAR 0 1
16667: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16668: LD_INT 0
16670: PPUSH
16671: PPUSH
16672: PPUSH
16673: PPUSH
16674: PPUSH
// result := [ ] ;
16675: LD_ADDR_VAR 0 1
16679: PUSH
16680: EMPTY
16681: ST_TO_ADDR
// if campaign_id = 1 then
16682: LD_OWVAR 69
16686: PUSH
16687: LD_INT 1
16689: EQUAL
16690: IFFALSE 19628
// begin case mission_number of 1 :
16692: LD_OWVAR 70
16696: PUSH
16697: LD_INT 1
16699: DOUBLE
16700: EQUAL
16701: IFTRUE 16705
16703: GO 16769
16705: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
16706: LD_ADDR_VAR 0 1
16710: PUSH
16711: LD_INT 2
16713: PUSH
16714: LD_INT 4
16716: PUSH
16717: LD_INT 11
16719: PUSH
16720: LD_INT 12
16722: PUSH
16723: LD_INT 15
16725: PUSH
16726: LD_INT 16
16728: PUSH
16729: LD_INT 22
16731: PUSH
16732: LD_INT 23
16734: PUSH
16735: LD_INT 26
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: PUSH
16749: LD_INT 101
16751: PUSH
16752: LD_INT 102
16754: PUSH
16755: LD_INT 106
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: LIST
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: ST_TO_ADDR
16767: GO 19626
16769: LD_INT 2
16771: DOUBLE
16772: EQUAL
16773: IFTRUE 16777
16775: GO 16849
16777: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
16778: LD_ADDR_VAR 0 1
16782: PUSH
16783: LD_INT 2
16785: PUSH
16786: LD_INT 4
16788: PUSH
16789: LD_INT 11
16791: PUSH
16792: LD_INT 12
16794: PUSH
16795: LD_INT 15
16797: PUSH
16798: LD_INT 16
16800: PUSH
16801: LD_INT 22
16803: PUSH
16804: LD_INT 23
16806: PUSH
16807: LD_INT 26
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 101
16823: PUSH
16824: LD_INT 102
16826: PUSH
16827: LD_INT 105
16829: PUSH
16830: LD_INT 106
16832: PUSH
16833: LD_INT 108
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: ST_TO_ADDR
16847: GO 19626
16849: LD_INT 3
16851: DOUBLE
16852: EQUAL
16853: IFTRUE 16857
16855: GO 16933
16857: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
16858: LD_ADDR_VAR 0 1
16862: PUSH
16863: LD_INT 2
16865: PUSH
16866: LD_INT 4
16868: PUSH
16869: LD_INT 5
16871: PUSH
16872: LD_INT 11
16874: PUSH
16875: LD_INT 12
16877: PUSH
16878: LD_INT 15
16880: PUSH
16881: LD_INT 16
16883: PUSH
16884: LD_INT 22
16886: PUSH
16887: LD_INT 26
16889: PUSH
16890: LD_INT 36
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 101
16907: PUSH
16908: LD_INT 102
16910: PUSH
16911: LD_INT 105
16913: PUSH
16914: LD_INT 106
16916: PUSH
16917: LD_INT 108
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: ST_TO_ADDR
16931: GO 19626
16933: LD_INT 4
16935: DOUBLE
16936: EQUAL
16937: IFTRUE 16941
16939: GO 17025
16941: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
16942: LD_ADDR_VAR 0 1
16946: PUSH
16947: LD_INT 2
16949: PUSH
16950: LD_INT 4
16952: PUSH
16953: LD_INT 5
16955: PUSH
16956: LD_INT 8
16958: PUSH
16959: LD_INT 11
16961: PUSH
16962: LD_INT 12
16964: PUSH
16965: LD_INT 15
16967: PUSH
16968: LD_INT 16
16970: PUSH
16971: LD_INT 22
16973: PUSH
16974: LD_INT 23
16976: PUSH
16977: LD_INT 26
16979: PUSH
16980: LD_INT 36
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: PUSH
16997: LD_INT 101
16999: PUSH
17000: LD_INT 102
17002: PUSH
17003: LD_INT 105
17005: PUSH
17006: LD_INT 106
17008: PUSH
17009: LD_INT 108
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: ST_TO_ADDR
17023: GO 19626
17025: LD_INT 5
17027: DOUBLE
17028: EQUAL
17029: IFTRUE 17033
17031: GO 17133
17033: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
17034: LD_ADDR_VAR 0 1
17038: PUSH
17039: LD_INT 2
17041: PUSH
17042: LD_INT 4
17044: PUSH
17045: LD_INT 5
17047: PUSH
17048: LD_INT 6
17050: PUSH
17051: LD_INT 8
17053: PUSH
17054: LD_INT 11
17056: PUSH
17057: LD_INT 12
17059: PUSH
17060: LD_INT 15
17062: PUSH
17063: LD_INT 16
17065: PUSH
17066: LD_INT 22
17068: PUSH
17069: LD_INT 23
17071: PUSH
17072: LD_INT 25
17074: PUSH
17075: LD_INT 26
17077: PUSH
17078: LD_INT 36
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: PUSH
17097: LD_INT 101
17099: PUSH
17100: LD_INT 102
17102: PUSH
17103: LD_INT 105
17105: PUSH
17106: LD_INT 106
17108: PUSH
17109: LD_INT 108
17111: PUSH
17112: LD_INT 109
17114: PUSH
17115: LD_INT 112
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: ST_TO_ADDR
17131: GO 19626
17133: LD_INT 6
17135: DOUBLE
17136: EQUAL
17137: IFTRUE 17141
17139: GO 17261
17141: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
17142: LD_ADDR_VAR 0 1
17146: PUSH
17147: LD_INT 2
17149: PUSH
17150: LD_INT 4
17152: PUSH
17153: LD_INT 5
17155: PUSH
17156: LD_INT 6
17158: PUSH
17159: LD_INT 8
17161: PUSH
17162: LD_INT 11
17164: PUSH
17165: LD_INT 12
17167: PUSH
17168: LD_INT 15
17170: PUSH
17171: LD_INT 16
17173: PUSH
17174: LD_INT 20
17176: PUSH
17177: LD_INT 21
17179: PUSH
17180: LD_INT 22
17182: PUSH
17183: LD_INT 23
17185: PUSH
17186: LD_INT 25
17188: PUSH
17189: LD_INT 26
17191: PUSH
17192: LD_INT 30
17194: PUSH
17195: LD_INT 31
17197: PUSH
17198: LD_INT 32
17200: PUSH
17201: LD_INT 36
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 101
17227: PUSH
17228: LD_INT 102
17230: PUSH
17231: LD_INT 105
17233: PUSH
17234: LD_INT 106
17236: PUSH
17237: LD_INT 108
17239: PUSH
17240: LD_INT 109
17242: PUSH
17243: LD_INT 112
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: ST_TO_ADDR
17259: GO 19626
17261: LD_INT 7
17263: DOUBLE
17264: EQUAL
17265: IFTRUE 17269
17267: GO 17369
17269: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
17270: LD_ADDR_VAR 0 1
17274: PUSH
17275: LD_INT 2
17277: PUSH
17278: LD_INT 4
17280: PUSH
17281: LD_INT 5
17283: PUSH
17284: LD_INT 7
17286: PUSH
17287: LD_INT 11
17289: PUSH
17290: LD_INT 12
17292: PUSH
17293: LD_INT 15
17295: PUSH
17296: LD_INT 16
17298: PUSH
17299: LD_INT 20
17301: PUSH
17302: LD_INT 21
17304: PUSH
17305: LD_INT 22
17307: PUSH
17308: LD_INT 23
17310: PUSH
17311: LD_INT 25
17313: PUSH
17314: LD_INT 26
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: PUSH
17333: LD_INT 101
17335: PUSH
17336: LD_INT 102
17338: PUSH
17339: LD_INT 103
17341: PUSH
17342: LD_INT 105
17344: PUSH
17345: LD_INT 106
17347: PUSH
17348: LD_INT 108
17350: PUSH
17351: LD_INT 112
17353: PUSH
17354: EMPTY
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: ST_TO_ADDR
17367: GO 19626
17369: LD_INT 8
17371: DOUBLE
17372: EQUAL
17373: IFTRUE 17377
17375: GO 17505
17377: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
17378: LD_ADDR_VAR 0 1
17382: PUSH
17383: LD_INT 2
17385: PUSH
17386: LD_INT 4
17388: PUSH
17389: LD_INT 5
17391: PUSH
17392: LD_INT 6
17394: PUSH
17395: LD_INT 7
17397: PUSH
17398: LD_INT 8
17400: PUSH
17401: LD_INT 11
17403: PUSH
17404: LD_INT 12
17406: PUSH
17407: LD_INT 15
17409: PUSH
17410: LD_INT 16
17412: PUSH
17413: LD_INT 20
17415: PUSH
17416: LD_INT 21
17418: PUSH
17419: LD_INT 22
17421: PUSH
17422: LD_INT 23
17424: PUSH
17425: LD_INT 25
17427: PUSH
17428: LD_INT 26
17430: PUSH
17431: LD_INT 30
17433: PUSH
17434: LD_INT 31
17436: PUSH
17437: LD_INT 32
17439: PUSH
17440: LD_INT 36
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: PUSH
17465: LD_INT 101
17467: PUSH
17468: LD_INT 102
17470: PUSH
17471: LD_INT 103
17473: PUSH
17474: LD_INT 105
17476: PUSH
17477: LD_INT 106
17479: PUSH
17480: LD_INT 108
17482: PUSH
17483: LD_INT 109
17485: PUSH
17486: LD_INT 112
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: ST_TO_ADDR
17503: GO 19626
17505: LD_INT 9
17507: DOUBLE
17508: EQUAL
17509: IFTRUE 17513
17511: GO 17649
17513: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
17514: LD_ADDR_VAR 0 1
17518: PUSH
17519: LD_INT 2
17521: PUSH
17522: LD_INT 4
17524: PUSH
17525: LD_INT 5
17527: PUSH
17528: LD_INT 6
17530: PUSH
17531: LD_INT 7
17533: PUSH
17534: LD_INT 8
17536: PUSH
17537: LD_INT 11
17539: PUSH
17540: LD_INT 12
17542: PUSH
17543: LD_INT 15
17545: PUSH
17546: LD_INT 16
17548: PUSH
17549: LD_INT 20
17551: PUSH
17552: LD_INT 21
17554: PUSH
17555: LD_INT 22
17557: PUSH
17558: LD_INT 23
17560: PUSH
17561: LD_INT 25
17563: PUSH
17564: LD_INT 26
17566: PUSH
17567: LD_INT 28
17569: PUSH
17570: LD_INT 30
17572: PUSH
17573: LD_INT 31
17575: PUSH
17576: LD_INT 32
17578: PUSH
17579: LD_INT 36
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: LIST
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 101
17607: PUSH
17608: LD_INT 102
17610: PUSH
17611: LD_INT 103
17613: PUSH
17614: LD_INT 105
17616: PUSH
17617: LD_INT 106
17619: PUSH
17620: LD_INT 108
17622: PUSH
17623: LD_INT 109
17625: PUSH
17626: LD_INT 112
17628: PUSH
17629: LD_INT 114
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: LIST
17639: LIST
17640: LIST
17641: LIST
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: ST_TO_ADDR
17647: GO 19626
17649: LD_INT 10
17651: DOUBLE
17652: EQUAL
17653: IFTRUE 17657
17655: GO 17841
17657: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
17658: LD_ADDR_VAR 0 1
17662: PUSH
17663: LD_INT 2
17665: PUSH
17666: LD_INT 4
17668: PUSH
17669: LD_INT 5
17671: PUSH
17672: LD_INT 6
17674: PUSH
17675: LD_INT 7
17677: PUSH
17678: LD_INT 8
17680: PUSH
17681: LD_INT 9
17683: PUSH
17684: LD_INT 10
17686: PUSH
17687: LD_INT 11
17689: PUSH
17690: LD_INT 12
17692: PUSH
17693: LD_INT 13
17695: PUSH
17696: LD_INT 14
17698: PUSH
17699: LD_INT 15
17701: PUSH
17702: LD_INT 16
17704: PUSH
17705: LD_INT 17
17707: PUSH
17708: LD_INT 18
17710: PUSH
17711: LD_INT 19
17713: PUSH
17714: LD_INT 20
17716: PUSH
17717: LD_INT 21
17719: PUSH
17720: LD_INT 22
17722: PUSH
17723: LD_INT 23
17725: PUSH
17726: LD_INT 24
17728: PUSH
17729: LD_INT 25
17731: PUSH
17732: LD_INT 26
17734: PUSH
17735: LD_INT 28
17737: PUSH
17738: LD_INT 30
17740: PUSH
17741: LD_INT 31
17743: PUSH
17744: LD_INT 32
17746: PUSH
17747: LD_INT 36
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 101
17783: PUSH
17784: LD_INT 102
17786: PUSH
17787: LD_INT 103
17789: PUSH
17790: LD_INT 104
17792: PUSH
17793: LD_INT 105
17795: PUSH
17796: LD_INT 106
17798: PUSH
17799: LD_INT 107
17801: PUSH
17802: LD_INT 108
17804: PUSH
17805: LD_INT 109
17807: PUSH
17808: LD_INT 110
17810: PUSH
17811: LD_INT 111
17813: PUSH
17814: LD_INT 112
17816: PUSH
17817: LD_INT 114
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: ST_TO_ADDR
17839: GO 19626
17841: LD_INT 11
17843: DOUBLE
17844: EQUAL
17845: IFTRUE 17849
17847: GO 18041
17849: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
17850: LD_ADDR_VAR 0 1
17854: PUSH
17855: LD_INT 2
17857: PUSH
17858: LD_INT 3
17860: PUSH
17861: LD_INT 4
17863: PUSH
17864: LD_INT 5
17866: PUSH
17867: LD_INT 6
17869: PUSH
17870: LD_INT 7
17872: PUSH
17873: LD_INT 8
17875: PUSH
17876: LD_INT 9
17878: PUSH
17879: LD_INT 10
17881: PUSH
17882: LD_INT 11
17884: PUSH
17885: LD_INT 12
17887: PUSH
17888: LD_INT 13
17890: PUSH
17891: LD_INT 14
17893: PUSH
17894: LD_INT 15
17896: PUSH
17897: LD_INT 16
17899: PUSH
17900: LD_INT 17
17902: PUSH
17903: LD_INT 18
17905: PUSH
17906: LD_INT 19
17908: PUSH
17909: LD_INT 20
17911: PUSH
17912: LD_INT 21
17914: PUSH
17915: LD_INT 22
17917: PUSH
17918: LD_INT 23
17920: PUSH
17921: LD_INT 24
17923: PUSH
17924: LD_INT 25
17926: PUSH
17927: LD_INT 26
17929: PUSH
17930: LD_INT 28
17932: PUSH
17933: LD_INT 30
17935: PUSH
17936: LD_INT 31
17938: PUSH
17939: LD_INT 32
17941: PUSH
17942: LD_INT 34
17944: PUSH
17945: LD_INT 36
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 101
17983: PUSH
17984: LD_INT 102
17986: PUSH
17987: LD_INT 103
17989: PUSH
17990: LD_INT 104
17992: PUSH
17993: LD_INT 105
17995: PUSH
17996: LD_INT 106
17998: PUSH
17999: LD_INT 107
18001: PUSH
18002: LD_INT 108
18004: PUSH
18005: LD_INT 109
18007: PUSH
18008: LD_INT 110
18010: PUSH
18011: LD_INT 111
18013: PUSH
18014: LD_INT 112
18016: PUSH
18017: LD_INT 114
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: ST_TO_ADDR
18039: GO 19626
18041: LD_INT 12
18043: DOUBLE
18044: EQUAL
18045: IFTRUE 18049
18047: GO 18257
18049: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
18050: LD_ADDR_VAR 0 1
18054: PUSH
18055: LD_INT 1
18057: PUSH
18058: LD_INT 2
18060: PUSH
18061: LD_INT 3
18063: PUSH
18064: LD_INT 4
18066: PUSH
18067: LD_INT 5
18069: PUSH
18070: LD_INT 6
18072: PUSH
18073: LD_INT 7
18075: PUSH
18076: LD_INT 8
18078: PUSH
18079: LD_INT 9
18081: PUSH
18082: LD_INT 10
18084: PUSH
18085: LD_INT 11
18087: PUSH
18088: LD_INT 12
18090: PUSH
18091: LD_INT 13
18093: PUSH
18094: LD_INT 14
18096: PUSH
18097: LD_INT 15
18099: PUSH
18100: LD_INT 16
18102: PUSH
18103: LD_INT 17
18105: PUSH
18106: LD_INT 18
18108: PUSH
18109: LD_INT 19
18111: PUSH
18112: LD_INT 20
18114: PUSH
18115: LD_INT 21
18117: PUSH
18118: LD_INT 22
18120: PUSH
18121: LD_INT 23
18123: PUSH
18124: LD_INT 24
18126: PUSH
18127: LD_INT 25
18129: PUSH
18130: LD_INT 26
18132: PUSH
18133: LD_INT 27
18135: PUSH
18136: LD_INT 28
18138: PUSH
18139: LD_INT 30
18141: PUSH
18142: LD_INT 31
18144: PUSH
18145: LD_INT 32
18147: PUSH
18148: LD_INT 33
18150: PUSH
18151: LD_INT 34
18153: PUSH
18154: LD_INT 36
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 101
18195: PUSH
18196: LD_INT 102
18198: PUSH
18199: LD_INT 103
18201: PUSH
18202: LD_INT 104
18204: PUSH
18205: LD_INT 105
18207: PUSH
18208: LD_INT 106
18210: PUSH
18211: LD_INT 107
18213: PUSH
18214: LD_INT 108
18216: PUSH
18217: LD_INT 109
18219: PUSH
18220: LD_INT 110
18222: PUSH
18223: LD_INT 111
18225: PUSH
18226: LD_INT 112
18228: PUSH
18229: LD_INT 113
18231: PUSH
18232: LD_INT 114
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: ST_TO_ADDR
18255: GO 19626
18257: LD_INT 13
18259: DOUBLE
18260: EQUAL
18261: IFTRUE 18265
18263: GO 18461
18265: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
18266: LD_ADDR_VAR 0 1
18270: PUSH
18271: LD_INT 1
18273: PUSH
18274: LD_INT 2
18276: PUSH
18277: LD_INT 3
18279: PUSH
18280: LD_INT 4
18282: PUSH
18283: LD_INT 5
18285: PUSH
18286: LD_INT 8
18288: PUSH
18289: LD_INT 9
18291: PUSH
18292: LD_INT 10
18294: PUSH
18295: LD_INT 11
18297: PUSH
18298: LD_INT 12
18300: PUSH
18301: LD_INT 14
18303: PUSH
18304: LD_INT 15
18306: PUSH
18307: LD_INT 16
18309: PUSH
18310: LD_INT 17
18312: PUSH
18313: LD_INT 18
18315: PUSH
18316: LD_INT 19
18318: PUSH
18319: LD_INT 20
18321: PUSH
18322: LD_INT 21
18324: PUSH
18325: LD_INT 22
18327: PUSH
18328: LD_INT 23
18330: PUSH
18331: LD_INT 24
18333: PUSH
18334: LD_INT 25
18336: PUSH
18337: LD_INT 26
18339: PUSH
18340: LD_INT 27
18342: PUSH
18343: LD_INT 28
18345: PUSH
18346: LD_INT 30
18348: PUSH
18349: LD_INT 31
18351: PUSH
18352: LD_INT 32
18354: PUSH
18355: LD_INT 33
18357: PUSH
18358: LD_INT 34
18360: PUSH
18361: LD_INT 36
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 101
18399: PUSH
18400: LD_INT 102
18402: PUSH
18403: LD_INT 103
18405: PUSH
18406: LD_INT 104
18408: PUSH
18409: LD_INT 105
18411: PUSH
18412: LD_INT 106
18414: PUSH
18415: LD_INT 107
18417: PUSH
18418: LD_INT 108
18420: PUSH
18421: LD_INT 109
18423: PUSH
18424: LD_INT 110
18426: PUSH
18427: LD_INT 111
18429: PUSH
18430: LD_INT 112
18432: PUSH
18433: LD_INT 113
18435: PUSH
18436: LD_INT 114
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: ST_TO_ADDR
18459: GO 19626
18461: LD_INT 14
18463: DOUBLE
18464: EQUAL
18465: IFTRUE 18469
18467: GO 18681
18469: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
18470: LD_ADDR_VAR 0 1
18474: PUSH
18475: LD_INT 1
18477: PUSH
18478: LD_INT 2
18480: PUSH
18481: LD_INT 3
18483: PUSH
18484: LD_INT 4
18486: PUSH
18487: LD_INT 5
18489: PUSH
18490: LD_INT 6
18492: PUSH
18493: LD_INT 7
18495: PUSH
18496: LD_INT 8
18498: PUSH
18499: LD_INT 9
18501: PUSH
18502: LD_INT 10
18504: PUSH
18505: LD_INT 11
18507: PUSH
18508: LD_INT 12
18510: PUSH
18511: LD_INT 13
18513: PUSH
18514: LD_INT 14
18516: PUSH
18517: LD_INT 15
18519: PUSH
18520: LD_INT 16
18522: PUSH
18523: LD_INT 17
18525: PUSH
18526: LD_INT 18
18528: PUSH
18529: LD_INT 19
18531: PUSH
18532: LD_INT 20
18534: PUSH
18535: LD_INT 21
18537: PUSH
18538: LD_INT 22
18540: PUSH
18541: LD_INT 23
18543: PUSH
18544: LD_INT 24
18546: PUSH
18547: LD_INT 25
18549: PUSH
18550: LD_INT 26
18552: PUSH
18553: LD_INT 27
18555: PUSH
18556: LD_INT 28
18558: PUSH
18559: LD_INT 29
18561: PUSH
18562: LD_INT 30
18564: PUSH
18565: LD_INT 31
18567: PUSH
18568: LD_INT 32
18570: PUSH
18571: LD_INT 33
18573: PUSH
18574: LD_INT 34
18576: PUSH
18577: LD_INT 36
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 101
18619: PUSH
18620: LD_INT 102
18622: PUSH
18623: LD_INT 103
18625: PUSH
18626: LD_INT 104
18628: PUSH
18629: LD_INT 105
18631: PUSH
18632: LD_INT 106
18634: PUSH
18635: LD_INT 107
18637: PUSH
18638: LD_INT 108
18640: PUSH
18641: LD_INT 109
18643: PUSH
18644: LD_INT 110
18646: PUSH
18647: LD_INT 111
18649: PUSH
18650: LD_INT 112
18652: PUSH
18653: LD_INT 113
18655: PUSH
18656: LD_INT 114
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: LIST
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: ST_TO_ADDR
18679: GO 19626
18681: LD_INT 15
18683: DOUBLE
18684: EQUAL
18685: IFTRUE 18689
18687: GO 18901
18689: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
18690: LD_ADDR_VAR 0 1
18694: PUSH
18695: LD_INT 1
18697: PUSH
18698: LD_INT 2
18700: PUSH
18701: LD_INT 3
18703: PUSH
18704: LD_INT 4
18706: PUSH
18707: LD_INT 5
18709: PUSH
18710: LD_INT 6
18712: PUSH
18713: LD_INT 7
18715: PUSH
18716: LD_INT 8
18718: PUSH
18719: LD_INT 9
18721: PUSH
18722: LD_INT 10
18724: PUSH
18725: LD_INT 11
18727: PUSH
18728: LD_INT 12
18730: PUSH
18731: LD_INT 13
18733: PUSH
18734: LD_INT 14
18736: PUSH
18737: LD_INT 15
18739: PUSH
18740: LD_INT 16
18742: PUSH
18743: LD_INT 17
18745: PUSH
18746: LD_INT 18
18748: PUSH
18749: LD_INT 19
18751: PUSH
18752: LD_INT 20
18754: PUSH
18755: LD_INT 21
18757: PUSH
18758: LD_INT 22
18760: PUSH
18761: LD_INT 23
18763: PUSH
18764: LD_INT 24
18766: PUSH
18767: LD_INT 25
18769: PUSH
18770: LD_INT 26
18772: PUSH
18773: LD_INT 27
18775: PUSH
18776: LD_INT 28
18778: PUSH
18779: LD_INT 29
18781: PUSH
18782: LD_INT 30
18784: PUSH
18785: LD_INT 31
18787: PUSH
18788: LD_INT 32
18790: PUSH
18791: LD_INT 33
18793: PUSH
18794: LD_INT 34
18796: PUSH
18797: LD_INT 36
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 101
18839: PUSH
18840: LD_INT 102
18842: PUSH
18843: LD_INT 103
18845: PUSH
18846: LD_INT 104
18848: PUSH
18849: LD_INT 105
18851: PUSH
18852: LD_INT 106
18854: PUSH
18855: LD_INT 107
18857: PUSH
18858: LD_INT 108
18860: PUSH
18861: LD_INT 109
18863: PUSH
18864: LD_INT 110
18866: PUSH
18867: LD_INT 111
18869: PUSH
18870: LD_INT 112
18872: PUSH
18873: LD_INT 113
18875: PUSH
18876: LD_INT 114
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: LIST
18883: LIST
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: ST_TO_ADDR
18899: GO 19626
18901: LD_INT 16
18903: DOUBLE
18904: EQUAL
18905: IFTRUE 18909
18907: GO 19033
18909: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
18910: LD_ADDR_VAR 0 1
18914: PUSH
18915: LD_INT 2
18917: PUSH
18918: LD_INT 4
18920: PUSH
18921: LD_INT 5
18923: PUSH
18924: LD_INT 7
18926: PUSH
18927: LD_INT 11
18929: PUSH
18930: LD_INT 12
18932: PUSH
18933: LD_INT 15
18935: PUSH
18936: LD_INT 16
18938: PUSH
18939: LD_INT 20
18941: PUSH
18942: LD_INT 21
18944: PUSH
18945: LD_INT 22
18947: PUSH
18948: LD_INT 23
18950: PUSH
18951: LD_INT 25
18953: PUSH
18954: LD_INT 26
18956: PUSH
18957: LD_INT 30
18959: PUSH
18960: LD_INT 31
18962: PUSH
18963: LD_INT 32
18965: PUSH
18966: LD_INT 33
18968: PUSH
18969: LD_INT 34
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 101
18995: PUSH
18996: LD_INT 102
18998: PUSH
18999: LD_INT 103
19001: PUSH
19002: LD_INT 106
19004: PUSH
19005: LD_INT 108
19007: PUSH
19008: LD_INT 112
19010: PUSH
19011: LD_INT 113
19013: PUSH
19014: LD_INT 114
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: ST_TO_ADDR
19031: GO 19626
19033: LD_INT 17
19035: DOUBLE
19036: EQUAL
19037: IFTRUE 19041
19039: GO 19253
19041: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
19042: LD_ADDR_VAR 0 1
19046: PUSH
19047: LD_INT 1
19049: PUSH
19050: LD_INT 2
19052: PUSH
19053: LD_INT 3
19055: PUSH
19056: LD_INT 4
19058: PUSH
19059: LD_INT 5
19061: PUSH
19062: LD_INT 6
19064: PUSH
19065: LD_INT 7
19067: PUSH
19068: LD_INT 8
19070: PUSH
19071: LD_INT 9
19073: PUSH
19074: LD_INT 10
19076: PUSH
19077: LD_INT 11
19079: PUSH
19080: LD_INT 12
19082: PUSH
19083: LD_INT 13
19085: PUSH
19086: LD_INT 14
19088: PUSH
19089: LD_INT 15
19091: PUSH
19092: LD_INT 16
19094: PUSH
19095: LD_INT 17
19097: PUSH
19098: LD_INT 18
19100: PUSH
19101: LD_INT 19
19103: PUSH
19104: LD_INT 20
19106: PUSH
19107: LD_INT 21
19109: PUSH
19110: LD_INT 22
19112: PUSH
19113: LD_INT 23
19115: PUSH
19116: LD_INT 24
19118: PUSH
19119: LD_INT 25
19121: PUSH
19122: LD_INT 26
19124: PUSH
19125: LD_INT 27
19127: PUSH
19128: LD_INT 28
19130: PUSH
19131: LD_INT 29
19133: PUSH
19134: LD_INT 30
19136: PUSH
19137: LD_INT 31
19139: PUSH
19140: LD_INT 32
19142: PUSH
19143: LD_INT 33
19145: PUSH
19146: LD_INT 34
19148: PUSH
19149: LD_INT 36
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: LIST
19159: LIST
19160: LIST
19161: LIST
19162: LIST
19163: LIST
19164: LIST
19165: LIST
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: LIST
19174: LIST
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: PUSH
19189: LD_INT 101
19191: PUSH
19192: LD_INT 102
19194: PUSH
19195: LD_INT 103
19197: PUSH
19198: LD_INT 104
19200: PUSH
19201: LD_INT 105
19203: PUSH
19204: LD_INT 106
19206: PUSH
19207: LD_INT 107
19209: PUSH
19210: LD_INT 108
19212: PUSH
19213: LD_INT 109
19215: PUSH
19216: LD_INT 110
19218: PUSH
19219: LD_INT 111
19221: PUSH
19222: LD_INT 112
19224: PUSH
19225: LD_INT 113
19227: PUSH
19228: LD_INT 114
19230: PUSH
19231: EMPTY
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: ST_TO_ADDR
19251: GO 19626
19253: LD_INT 18
19255: DOUBLE
19256: EQUAL
19257: IFTRUE 19261
19259: GO 19397
19261: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
19262: LD_ADDR_VAR 0 1
19266: PUSH
19267: LD_INT 2
19269: PUSH
19270: LD_INT 4
19272: PUSH
19273: LD_INT 5
19275: PUSH
19276: LD_INT 7
19278: PUSH
19279: LD_INT 11
19281: PUSH
19282: LD_INT 12
19284: PUSH
19285: LD_INT 15
19287: PUSH
19288: LD_INT 16
19290: PUSH
19291: LD_INT 20
19293: PUSH
19294: LD_INT 21
19296: PUSH
19297: LD_INT 22
19299: PUSH
19300: LD_INT 23
19302: PUSH
19303: LD_INT 25
19305: PUSH
19306: LD_INT 26
19308: PUSH
19309: LD_INT 30
19311: PUSH
19312: LD_INT 31
19314: PUSH
19315: LD_INT 32
19317: PUSH
19318: LD_INT 33
19320: PUSH
19321: LD_INT 34
19323: PUSH
19324: LD_INT 35
19326: PUSH
19327: LD_INT 36
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: LIST
19334: LIST
19335: LIST
19336: LIST
19337: LIST
19338: LIST
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 101
19355: PUSH
19356: LD_INT 102
19358: PUSH
19359: LD_INT 103
19361: PUSH
19362: LD_INT 106
19364: PUSH
19365: LD_INT 108
19367: PUSH
19368: LD_INT 112
19370: PUSH
19371: LD_INT 113
19373: PUSH
19374: LD_INT 114
19376: PUSH
19377: LD_INT 115
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: ST_TO_ADDR
19395: GO 19626
19397: LD_INT 19
19399: DOUBLE
19400: EQUAL
19401: IFTRUE 19405
19403: GO 19625
19405: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
19406: LD_ADDR_VAR 0 1
19410: PUSH
19411: LD_INT 1
19413: PUSH
19414: LD_INT 2
19416: PUSH
19417: LD_INT 3
19419: PUSH
19420: LD_INT 4
19422: PUSH
19423: LD_INT 5
19425: PUSH
19426: LD_INT 6
19428: PUSH
19429: LD_INT 7
19431: PUSH
19432: LD_INT 8
19434: PUSH
19435: LD_INT 9
19437: PUSH
19438: LD_INT 10
19440: PUSH
19441: LD_INT 11
19443: PUSH
19444: LD_INT 12
19446: PUSH
19447: LD_INT 13
19449: PUSH
19450: LD_INT 14
19452: PUSH
19453: LD_INT 15
19455: PUSH
19456: LD_INT 16
19458: PUSH
19459: LD_INT 17
19461: PUSH
19462: LD_INT 18
19464: PUSH
19465: LD_INT 19
19467: PUSH
19468: LD_INT 20
19470: PUSH
19471: LD_INT 21
19473: PUSH
19474: LD_INT 22
19476: PUSH
19477: LD_INT 23
19479: PUSH
19480: LD_INT 24
19482: PUSH
19483: LD_INT 25
19485: PUSH
19486: LD_INT 26
19488: PUSH
19489: LD_INT 27
19491: PUSH
19492: LD_INT 28
19494: PUSH
19495: LD_INT 29
19497: PUSH
19498: LD_INT 30
19500: PUSH
19501: LD_INT 31
19503: PUSH
19504: LD_INT 32
19506: PUSH
19507: LD_INT 33
19509: PUSH
19510: LD_INT 34
19512: PUSH
19513: LD_INT 35
19515: PUSH
19516: LD_INT 36
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: LIST
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: LIST
19528: LIST
19529: LIST
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: PUSH
19557: LD_INT 101
19559: PUSH
19560: LD_INT 102
19562: PUSH
19563: LD_INT 103
19565: PUSH
19566: LD_INT 104
19568: PUSH
19569: LD_INT 105
19571: PUSH
19572: LD_INT 106
19574: PUSH
19575: LD_INT 107
19577: PUSH
19578: LD_INT 108
19580: PUSH
19581: LD_INT 109
19583: PUSH
19584: LD_INT 110
19586: PUSH
19587: LD_INT 111
19589: PUSH
19590: LD_INT 112
19592: PUSH
19593: LD_INT 113
19595: PUSH
19596: LD_INT 114
19598: PUSH
19599: LD_INT 115
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: ST_TO_ADDR
19623: GO 19626
19625: POP
// end else
19626: GO 19845
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
19628: LD_ADDR_VAR 0 1
19632: PUSH
19633: LD_INT 1
19635: PUSH
19636: LD_INT 2
19638: PUSH
19639: LD_INT 3
19641: PUSH
19642: LD_INT 4
19644: PUSH
19645: LD_INT 5
19647: PUSH
19648: LD_INT 6
19650: PUSH
19651: LD_INT 7
19653: PUSH
19654: LD_INT 8
19656: PUSH
19657: LD_INT 9
19659: PUSH
19660: LD_INT 10
19662: PUSH
19663: LD_INT 11
19665: PUSH
19666: LD_INT 12
19668: PUSH
19669: LD_INT 13
19671: PUSH
19672: LD_INT 14
19674: PUSH
19675: LD_INT 15
19677: PUSH
19678: LD_INT 16
19680: PUSH
19681: LD_INT 17
19683: PUSH
19684: LD_INT 18
19686: PUSH
19687: LD_INT 19
19689: PUSH
19690: LD_INT 20
19692: PUSH
19693: LD_INT 21
19695: PUSH
19696: LD_INT 22
19698: PUSH
19699: LD_INT 23
19701: PUSH
19702: LD_INT 24
19704: PUSH
19705: LD_INT 25
19707: PUSH
19708: LD_INT 26
19710: PUSH
19711: LD_INT 27
19713: PUSH
19714: LD_INT 28
19716: PUSH
19717: LD_INT 29
19719: PUSH
19720: LD_INT 30
19722: PUSH
19723: LD_INT 31
19725: PUSH
19726: LD_INT 32
19728: PUSH
19729: LD_INT 33
19731: PUSH
19732: LD_INT 34
19734: PUSH
19735: LD_INT 35
19737: PUSH
19738: LD_INT 36
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 101
19781: PUSH
19782: LD_INT 102
19784: PUSH
19785: LD_INT 103
19787: PUSH
19788: LD_INT 104
19790: PUSH
19791: LD_INT 105
19793: PUSH
19794: LD_INT 106
19796: PUSH
19797: LD_INT 107
19799: PUSH
19800: LD_INT 108
19802: PUSH
19803: LD_INT 109
19805: PUSH
19806: LD_INT 110
19808: PUSH
19809: LD_INT 111
19811: PUSH
19812: LD_INT 112
19814: PUSH
19815: LD_INT 113
19817: PUSH
19818: LD_INT 114
19820: PUSH
19821: LD_INT 115
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: ST_TO_ADDR
// if result then
19845: LD_VAR 0 1
19849: IFFALSE 20138
// begin normal :=  ;
19851: LD_ADDR_VAR 0 3
19855: PUSH
19856: LD_STRING 
19858: ST_TO_ADDR
// hardcore :=  ;
19859: LD_ADDR_VAR 0 4
19863: PUSH
19864: LD_STRING 
19866: ST_TO_ADDR
// for i = 1 to normalCounter do
19867: LD_ADDR_VAR 0 5
19871: PUSH
19872: DOUBLE
19873: LD_INT 1
19875: DEC
19876: ST_TO_ADDR
19877: LD_EXP 55
19881: PUSH
19882: FOR_TO
19883: IFFALSE 19984
// begin tmp := 0 ;
19885: LD_ADDR_VAR 0 2
19889: PUSH
19890: LD_STRING 0
19892: ST_TO_ADDR
// if result [ 1 ] then
19893: LD_VAR 0 1
19897: PUSH
19898: LD_INT 1
19900: ARRAY
19901: IFFALSE 19966
// if result [ 1 ] [ 1 ] = i then
19903: LD_VAR 0 1
19907: PUSH
19908: LD_INT 1
19910: ARRAY
19911: PUSH
19912: LD_INT 1
19914: ARRAY
19915: PUSH
19916: LD_VAR 0 5
19920: EQUAL
19921: IFFALSE 19966
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19923: LD_ADDR_VAR 0 1
19927: PUSH
19928: LD_VAR 0 1
19932: PPUSH
19933: LD_INT 1
19935: PPUSH
19936: LD_VAR 0 1
19940: PUSH
19941: LD_INT 1
19943: ARRAY
19944: PPUSH
19945: LD_INT 1
19947: PPUSH
19948: CALL_OW 3
19952: PPUSH
19953: CALL_OW 1
19957: ST_TO_ADDR
// tmp := 1 ;
19958: LD_ADDR_VAR 0 2
19962: PUSH
19963: LD_STRING 1
19965: ST_TO_ADDR
// end ; normal := normal & tmp ;
19966: LD_ADDR_VAR 0 3
19970: PUSH
19971: LD_VAR 0 3
19975: PUSH
19976: LD_VAR 0 2
19980: STR
19981: ST_TO_ADDR
// end ;
19982: GO 19882
19984: POP
19985: POP
// for i = 1 to hardcoreCounter do
19986: LD_ADDR_VAR 0 5
19990: PUSH
19991: DOUBLE
19992: LD_INT 1
19994: DEC
19995: ST_TO_ADDR
19996: LD_EXP 56
20000: PUSH
20001: FOR_TO
20002: IFFALSE 20107
// begin tmp := 0 ;
20004: LD_ADDR_VAR 0 2
20008: PUSH
20009: LD_STRING 0
20011: ST_TO_ADDR
// if result [ 2 ] then
20012: LD_VAR 0 1
20016: PUSH
20017: LD_INT 2
20019: ARRAY
20020: IFFALSE 20089
// if result [ 2 ] [ 1 ] = 100 + i then
20022: LD_VAR 0 1
20026: PUSH
20027: LD_INT 2
20029: ARRAY
20030: PUSH
20031: LD_INT 1
20033: ARRAY
20034: PUSH
20035: LD_INT 100
20037: PUSH
20038: LD_VAR 0 5
20042: PLUS
20043: EQUAL
20044: IFFALSE 20089
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20046: LD_ADDR_VAR 0 1
20050: PUSH
20051: LD_VAR 0 1
20055: PPUSH
20056: LD_INT 2
20058: PPUSH
20059: LD_VAR 0 1
20063: PUSH
20064: LD_INT 2
20066: ARRAY
20067: PPUSH
20068: LD_INT 1
20070: PPUSH
20071: CALL_OW 3
20075: PPUSH
20076: CALL_OW 1
20080: ST_TO_ADDR
// tmp := 1 ;
20081: LD_ADDR_VAR 0 2
20085: PUSH
20086: LD_STRING 1
20088: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20089: LD_ADDR_VAR 0 4
20093: PUSH
20094: LD_VAR 0 4
20098: PUSH
20099: LD_VAR 0 2
20103: STR
20104: ST_TO_ADDR
// end ;
20105: GO 20001
20107: POP
20108: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
20109: LD_STRING getStreamItemsFromMission("
20111: PUSH
20112: LD_VAR 0 3
20116: STR
20117: PUSH
20118: LD_STRING ","
20120: STR
20121: PUSH
20122: LD_VAR 0 4
20126: STR
20127: PUSH
20128: LD_STRING ")
20130: STR
20131: PPUSH
20132: CALL_OW 559
// end else
20136: GO 20145
// ToLua ( getStreamItemsFromMission("","") ) ;
20138: LD_STRING getStreamItemsFromMission("","")
20140: PPUSH
20141: CALL_OW 559
// end ;
20145: LD_VAR 0 1
20149: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20150: LD_EXP 54
20154: PUSH
20155: LD_EXP 59
20159: AND
20160: IFFALSE 20284
20162: GO 20164
20164: DISABLE
20165: LD_INT 0
20167: PPUSH
20168: PPUSH
// begin enable ;
20169: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20170: LD_ADDR_VAR 0 2
20174: PUSH
20175: LD_INT 22
20177: PUSH
20178: LD_OWVAR 2
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 2
20189: PUSH
20190: LD_INT 34
20192: PUSH
20193: LD_INT 7
20195: PUSH
20196: EMPTY
20197: LIST
20198: LIST
20199: PUSH
20200: LD_INT 34
20202: PUSH
20203: LD_INT 45
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 34
20212: PUSH
20213: LD_INT 28
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: LD_INT 34
20222: PUSH
20223: LD_INT 47
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PPUSH
20241: CALL_OW 69
20245: ST_TO_ADDR
// if not tmp then
20246: LD_VAR 0 2
20250: NOT
20251: IFFALSE 20255
// exit ;
20253: GO 20284
// for i in tmp do
20255: LD_ADDR_VAR 0 1
20259: PUSH
20260: LD_VAR 0 2
20264: PUSH
20265: FOR_IN
20266: IFFALSE 20282
// begin SetLives ( i , 0 ) ;
20268: LD_VAR 0 1
20272: PPUSH
20273: LD_INT 0
20275: PPUSH
20276: CALL_OW 234
// end ;
20280: GO 20265
20282: POP
20283: POP
// end ;
20284: PPOPN 2
20286: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20287: LD_EXP 54
20291: PUSH
20292: LD_EXP 60
20296: AND
20297: IFFALSE 20381
20299: GO 20301
20301: DISABLE
20302: LD_INT 0
20304: PPUSH
20305: PPUSH
// begin enable ;
20306: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20307: LD_ADDR_VAR 0 2
20311: PUSH
20312: LD_INT 22
20314: PUSH
20315: LD_OWVAR 2
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 32
20326: PUSH
20327: LD_INT 3
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PPUSH
20338: CALL_OW 69
20342: ST_TO_ADDR
// if not tmp then
20343: LD_VAR 0 2
20347: NOT
20348: IFFALSE 20352
// exit ;
20350: GO 20381
// for i in tmp do
20352: LD_ADDR_VAR 0 1
20356: PUSH
20357: LD_VAR 0 2
20361: PUSH
20362: FOR_IN
20363: IFFALSE 20379
// begin SetLives ( i , 0 ) ;
20365: LD_VAR 0 1
20369: PPUSH
20370: LD_INT 0
20372: PPUSH
20373: CALL_OW 234
// end ;
20377: GO 20362
20379: POP
20380: POP
// end ;
20381: PPOPN 2
20383: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20384: LD_EXP 54
20388: PUSH
20389: LD_EXP 57
20393: AND
20394: IFFALSE 20487
20396: GO 20398
20398: DISABLE
20399: LD_INT 0
20401: PPUSH
// begin enable ;
20402: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20403: LD_ADDR_VAR 0 1
20407: PUSH
20408: LD_INT 22
20410: PUSH
20411: LD_OWVAR 2
20415: PUSH
20416: EMPTY
20417: LIST
20418: LIST
20419: PUSH
20420: LD_INT 2
20422: PUSH
20423: LD_INT 25
20425: PUSH
20426: LD_INT 5
20428: PUSH
20429: EMPTY
20430: LIST
20431: LIST
20432: PUSH
20433: LD_INT 25
20435: PUSH
20436: LD_INT 9
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 25
20445: PUSH
20446: LD_INT 8
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PPUSH
20463: CALL_OW 69
20467: PUSH
20468: FOR_IN
20469: IFFALSE 20485
// begin SetClass ( i , 1 ) ;
20471: LD_VAR 0 1
20475: PPUSH
20476: LD_INT 1
20478: PPUSH
20479: CALL_OW 336
// end ;
20483: GO 20468
20485: POP
20486: POP
// end ;
20487: PPOPN 1
20489: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20490: LD_EXP 54
20494: PUSH
20495: LD_EXP 58
20499: AND
20500: PUSH
20501: LD_OWVAR 65
20505: PUSH
20506: LD_INT 7
20508: LESS
20509: AND
20510: IFFALSE 20524
20512: GO 20514
20514: DISABLE
// begin enable ;
20515: ENABLE
// game_speed := 7 ;
20516: LD_ADDR_OWVAR 65
20520: PUSH
20521: LD_INT 7
20523: ST_TO_ADDR
// end ;
20524: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20525: LD_EXP 54
20529: PUSH
20530: LD_EXP 61
20534: AND
20535: IFFALSE 20737
20537: GO 20539
20539: DISABLE
20540: LD_INT 0
20542: PPUSH
20543: PPUSH
20544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20545: LD_ADDR_VAR 0 3
20549: PUSH
20550: LD_INT 81
20552: PUSH
20553: LD_OWVAR 2
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: LD_INT 21
20564: PUSH
20565: LD_INT 1
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PPUSH
20576: CALL_OW 69
20580: ST_TO_ADDR
// if not tmp then
20581: LD_VAR 0 3
20585: NOT
20586: IFFALSE 20590
// exit ;
20588: GO 20737
// if tmp > 5 then
20590: LD_VAR 0 3
20594: PUSH
20595: LD_INT 5
20597: GREATER
20598: IFFALSE 20610
// k := 5 else
20600: LD_ADDR_VAR 0 2
20604: PUSH
20605: LD_INT 5
20607: ST_TO_ADDR
20608: GO 20620
// k := tmp ;
20610: LD_ADDR_VAR 0 2
20614: PUSH
20615: LD_VAR 0 3
20619: ST_TO_ADDR
// for i := 1 to k do
20620: LD_ADDR_VAR 0 1
20624: PUSH
20625: DOUBLE
20626: LD_INT 1
20628: DEC
20629: ST_TO_ADDR
20630: LD_VAR 0 2
20634: PUSH
20635: FOR_TO
20636: IFFALSE 20735
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20638: LD_VAR 0 3
20642: PUSH
20643: LD_VAR 0 1
20647: ARRAY
20648: PPUSH
20649: LD_VAR 0 1
20653: PUSH
20654: LD_INT 4
20656: MOD
20657: PUSH
20658: LD_INT 1
20660: PLUS
20661: PPUSH
20662: CALL_OW 259
20666: PUSH
20667: LD_INT 10
20669: LESS
20670: IFFALSE 20733
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20672: LD_VAR 0 3
20676: PUSH
20677: LD_VAR 0 1
20681: ARRAY
20682: PPUSH
20683: LD_VAR 0 1
20687: PUSH
20688: LD_INT 4
20690: MOD
20691: PUSH
20692: LD_INT 1
20694: PLUS
20695: PPUSH
20696: LD_VAR 0 3
20700: PUSH
20701: LD_VAR 0 1
20705: ARRAY
20706: PPUSH
20707: LD_VAR 0 1
20711: PUSH
20712: LD_INT 4
20714: MOD
20715: PUSH
20716: LD_INT 1
20718: PLUS
20719: PPUSH
20720: CALL_OW 259
20724: PUSH
20725: LD_INT 1
20727: PLUS
20728: PPUSH
20729: CALL_OW 237
20733: GO 20635
20735: POP
20736: POP
// end ;
20737: PPOPN 3
20739: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20740: LD_EXP 54
20744: PUSH
20745: LD_EXP 62
20749: AND
20750: IFFALSE 20770
20752: GO 20754
20754: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20755: LD_INT 4
20757: PPUSH
20758: LD_OWVAR 2
20762: PPUSH
20763: LD_INT 0
20765: PPUSH
20766: CALL_OW 324
20770: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20771: LD_EXP 54
20775: PUSH
20776: LD_EXP 91
20780: AND
20781: IFFALSE 20801
20783: GO 20785
20785: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20786: LD_INT 19
20788: PPUSH
20789: LD_OWVAR 2
20793: PPUSH
20794: LD_INT 0
20796: PPUSH
20797: CALL_OW 324
20801: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20802: LD_EXP 54
20806: PUSH
20807: LD_EXP 63
20811: AND
20812: IFFALSE 20914
20814: GO 20816
20816: DISABLE
20817: LD_INT 0
20819: PPUSH
20820: PPUSH
// begin enable ;
20821: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20822: LD_ADDR_VAR 0 2
20826: PUSH
20827: LD_INT 22
20829: PUSH
20830: LD_OWVAR 2
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 2
20841: PUSH
20842: LD_INT 34
20844: PUSH
20845: LD_INT 11
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: LD_INT 34
20854: PUSH
20855: LD_INT 30
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: LIST
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PPUSH
20871: CALL_OW 69
20875: ST_TO_ADDR
// if not tmp then
20876: LD_VAR 0 2
20880: NOT
20881: IFFALSE 20885
// exit ;
20883: GO 20914
// for i in tmp do
20885: LD_ADDR_VAR 0 1
20889: PUSH
20890: LD_VAR 0 2
20894: PUSH
20895: FOR_IN
20896: IFFALSE 20912
// begin SetLives ( i , 0 ) ;
20898: LD_VAR 0 1
20902: PPUSH
20903: LD_INT 0
20905: PPUSH
20906: CALL_OW 234
// end ;
20910: GO 20895
20912: POP
20913: POP
// end ;
20914: PPOPN 2
20916: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20917: LD_EXP 54
20921: PUSH
20922: LD_EXP 64
20926: AND
20927: IFFALSE 20947
20929: GO 20931
20931: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20932: LD_INT 32
20934: PPUSH
20935: LD_OWVAR 2
20939: PPUSH
20940: LD_INT 0
20942: PPUSH
20943: CALL_OW 324
20947: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20948: LD_EXP 54
20952: PUSH
20953: LD_EXP 65
20957: AND
20958: IFFALSE 21139
20960: GO 20962
20962: DISABLE
20963: LD_INT 0
20965: PPUSH
20966: PPUSH
20967: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20968: LD_ADDR_VAR 0 2
20972: PUSH
20973: LD_INT 22
20975: PUSH
20976: LD_OWVAR 2
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 33
20987: PUSH
20988: LD_INT 3
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: PPUSH
20999: CALL_OW 69
21003: ST_TO_ADDR
// if not tmp then
21004: LD_VAR 0 2
21008: NOT
21009: IFFALSE 21013
// exit ;
21011: GO 21139
// side := 0 ;
21013: LD_ADDR_VAR 0 3
21017: PUSH
21018: LD_INT 0
21020: ST_TO_ADDR
// for i := 1 to 8 do
21021: LD_ADDR_VAR 0 1
21025: PUSH
21026: DOUBLE
21027: LD_INT 1
21029: DEC
21030: ST_TO_ADDR
21031: LD_INT 8
21033: PUSH
21034: FOR_TO
21035: IFFALSE 21083
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21037: LD_OWVAR 2
21041: PUSH
21042: LD_VAR 0 1
21046: NONEQUAL
21047: PUSH
21048: LD_OWVAR 2
21052: PPUSH
21053: LD_VAR 0 1
21057: PPUSH
21058: CALL_OW 81
21062: PUSH
21063: LD_INT 2
21065: EQUAL
21066: AND
21067: IFFALSE 21081
// begin side := i ;
21069: LD_ADDR_VAR 0 3
21073: PUSH
21074: LD_VAR 0 1
21078: ST_TO_ADDR
// break ;
21079: GO 21083
// end ;
21081: GO 21034
21083: POP
21084: POP
// if not side then
21085: LD_VAR 0 3
21089: NOT
21090: IFFALSE 21094
// exit ;
21092: GO 21139
// for i := 1 to tmp do
21094: LD_ADDR_VAR 0 1
21098: PUSH
21099: DOUBLE
21100: LD_INT 1
21102: DEC
21103: ST_TO_ADDR
21104: LD_VAR 0 2
21108: PUSH
21109: FOR_TO
21110: IFFALSE 21137
// if Prob ( 60 ) then
21112: LD_INT 60
21114: PPUSH
21115: CALL_OW 13
21119: IFFALSE 21135
// SetSide ( i , side ) ;
21121: LD_VAR 0 1
21125: PPUSH
21126: LD_VAR 0 3
21130: PPUSH
21131: CALL_OW 235
21135: GO 21109
21137: POP
21138: POP
// end ;
21139: PPOPN 3
21141: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21142: LD_EXP 54
21146: PUSH
21147: LD_EXP 67
21151: AND
21152: IFFALSE 21271
21154: GO 21156
21156: DISABLE
21157: LD_INT 0
21159: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21160: LD_ADDR_VAR 0 1
21164: PUSH
21165: LD_INT 22
21167: PUSH
21168: LD_OWVAR 2
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 21
21179: PUSH
21180: LD_INT 1
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 3
21189: PUSH
21190: LD_INT 23
21192: PUSH
21193: LD_INT 0
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: PUSH
21204: EMPTY
21205: LIST
21206: LIST
21207: LIST
21208: PPUSH
21209: CALL_OW 69
21213: PUSH
21214: FOR_IN
21215: IFFALSE 21269
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21217: LD_VAR 0 1
21221: PPUSH
21222: CALL_OW 257
21226: PUSH
21227: LD_INT 1
21229: PUSH
21230: LD_INT 2
21232: PUSH
21233: LD_INT 3
21235: PUSH
21236: LD_INT 4
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: IN
21245: IFFALSE 21267
// SetClass ( un , rand ( 1 , 4 ) ) ;
21247: LD_VAR 0 1
21251: PPUSH
21252: LD_INT 1
21254: PPUSH
21255: LD_INT 4
21257: PPUSH
21258: CALL_OW 12
21262: PPUSH
21263: CALL_OW 336
21267: GO 21214
21269: POP
21270: POP
// end ;
21271: PPOPN 1
21273: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21274: LD_EXP 54
21278: PUSH
21279: LD_EXP 66
21283: AND
21284: IFFALSE 21363
21286: GO 21288
21288: DISABLE
21289: LD_INT 0
21291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21292: LD_ADDR_VAR 0 1
21296: PUSH
21297: LD_INT 22
21299: PUSH
21300: LD_OWVAR 2
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: PUSH
21309: LD_INT 21
21311: PUSH
21312: LD_INT 3
21314: PUSH
21315: EMPTY
21316: LIST
21317: LIST
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PPUSH
21323: CALL_OW 69
21327: ST_TO_ADDR
// if not tmp then
21328: LD_VAR 0 1
21332: NOT
21333: IFFALSE 21337
// exit ;
21335: GO 21363
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21337: LD_VAR 0 1
21341: PUSH
21342: LD_INT 1
21344: PPUSH
21345: LD_VAR 0 1
21349: PPUSH
21350: CALL_OW 12
21354: ARRAY
21355: PPUSH
21356: LD_INT 100
21358: PPUSH
21359: CALL_OW 234
// end ;
21363: PPOPN 1
21365: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21366: LD_EXP 54
21370: PUSH
21371: LD_EXP 68
21375: AND
21376: IFFALSE 21474
21378: GO 21380
21380: DISABLE
21381: LD_INT 0
21383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21384: LD_ADDR_VAR 0 1
21388: PUSH
21389: LD_INT 22
21391: PUSH
21392: LD_OWVAR 2
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 21
21403: PUSH
21404: LD_INT 1
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PPUSH
21415: CALL_OW 69
21419: ST_TO_ADDR
// if not tmp then
21420: LD_VAR 0 1
21424: NOT
21425: IFFALSE 21429
// exit ;
21427: GO 21474
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21429: LD_VAR 0 1
21433: PUSH
21434: LD_INT 1
21436: PPUSH
21437: LD_VAR 0 1
21441: PPUSH
21442: CALL_OW 12
21446: ARRAY
21447: PPUSH
21448: LD_INT 1
21450: PPUSH
21451: LD_INT 4
21453: PPUSH
21454: CALL_OW 12
21458: PPUSH
21459: LD_INT 3000
21461: PPUSH
21462: LD_INT 9000
21464: PPUSH
21465: CALL_OW 12
21469: PPUSH
21470: CALL_OW 492
// end ;
21474: PPOPN 1
21476: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21477: LD_EXP 54
21481: PUSH
21482: LD_EXP 69
21486: AND
21487: IFFALSE 21507
21489: GO 21491
21491: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21492: LD_INT 1
21494: PPUSH
21495: LD_OWVAR 2
21499: PPUSH
21500: LD_INT 0
21502: PPUSH
21503: CALL_OW 324
21507: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21508: LD_EXP 54
21512: PUSH
21513: LD_EXP 70
21517: AND
21518: IFFALSE 21601
21520: GO 21522
21522: DISABLE
21523: LD_INT 0
21525: PPUSH
21526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21527: LD_ADDR_VAR 0 2
21531: PUSH
21532: LD_INT 22
21534: PUSH
21535: LD_OWVAR 2
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 21
21546: PUSH
21547: LD_INT 3
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PPUSH
21558: CALL_OW 69
21562: ST_TO_ADDR
// if not tmp then
21563: LD_VAR 0 2
21567: NOT
21568: IFFALSE 21572
// exit ;
21570: GO 21601
// for i in tmp do
21572: LD_ADDR_VAR 0 1
21576: PUSH
21577: LD_VAR 0 2
21581: PUSH
21582: FOR_IN
21583: IFFALSE 21599
// SetBLevel ( i , 10 ) ;
21585: LD_VAR 0 1
21589: PPUSH
21590: LD_INT 10
21592: PPUSH
21593: CALL_OW 241
21597: GO 21582
21599: POP
21600: POP
// end ;
21601: PPOPN 2
21603: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21604: LD_EXP 54
21608: PUSH
21609: LD_EXP 71
21613: AND
21614: IFFALSE 21725
21616: GO 21618
21618: DISABLE
21619: LD_INT 0
21621: PPUSH
21622: PPUSH
21623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21624: LD_ADDR_VAR 0 3
21628: PUSH
21629: LD_INT 22
21631: PUSH
21632: LD_OWVAR 2
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: PUSH
21641: LD_INT 25
21643: PUSH
21644: LD_INT 1
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: EMPTY
21652: LIST
21653: LIST
21654: PPUSH
21655: CALL_OW 69
21659: ST_TO_ADDR
// if not tmp then
21660: LD_VAR 0 3
21664: NOT
21665: IFFALSE 21669
// exit ;
21667: GO 21725
// un := tmp [ rand ( 1 , tmp ) ] ;
21669: LD_ADDR_VAR 0 2
21673: PUSH
21674: LD_VAR 0 3
21678: PUSH
21679: LD_INT 1
21681: PPUSH
21682: LD_VAR 0 3
21686: PPUSH
21687: CALL_OW 12
21691: ARRAY
21692: ST_TO_ADDR
// if Crawls ( un ) then
21693: LD_VAR 0 2
21697: PPUSH
21698: CALL_OW 318
21702: IFFALSE 21713
// ComWalk ( un ) ;
21704: LD_VAR 0 2
21708: PPUSH
21709: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21713: LD_VAR 0 2
21717: PPUSH
21718: LD_INT 5
21720: PPUSH
21721: CALL_OW 336
// end ;
21725: PPOPN 3
21727: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
21728: LD_EXP 54
21732: PUSH
21733: LD_EXP 72
21737: AND
21738: PUSH
21739: LD_OWVAR 67
21743: PUSH
21744: LD_INT 3
21746: LESS
21747: AND
21748: IFFALSE 21767
21750: GO 21752
21752: DISABLE
// Difficulty := Difficulty + 1 ;
21753: LD_ADDR_OWVAR 67
21757: PUSH
21758: LD_OWVAR 67
21762: PUSH
21763: LD_INT 1
21765: PLUS
21766: ST_TO_ADDR
21767: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21768: LD_EXP 54
21772: PUSH
21773: LD_EXP 73
21777: AND
21778: IFFALSE 21881
21780: GO 21782
21782: DISABLE
21783: LD_INT 0
21785: PPUSH
// begin for i := 1 to 5 do
21786: LD_ADDR_VAR 0 1
21790: PUSH
21791: DOUBLE
21792: LD_INT 1
21794: DEC
21795: ST_TO_ADDR
21796: LD_INT 5
21798: PUSH
21799: FOR_TO
21800: IFFALSE 21879
// begin uc_nation := nation_nature ;
21802: LD_ADDR_OWVAR 21
21806: PUSH
21807: LD_INT 0
21809: ST_TO_ADDR
// uc_side := 0 ;
21810: LD_ADDR_OWVAR 20
21814: PUSH
21815: LD_INT 0
21817: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21818: LD_ADDR_OWVAR 29
21822: PUSH
21823: LD_INT 12
21825: PUSH
21826: LD_INT 12
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: ST_TO_ADDR
// hc_agressivity := 20 ;
21833: LD_ADDR_OWVAR 35
21837: PUSH
21838: LD_INT 20
21840: ST_TO_ADDR
// hc_class := class_tiger ;
21841: LD_ADDR_OWVAR 28
21845: PUSH
21846: LD_INT 14
21848: ST_TO_ADDR
// hc_gallery :=  ;
21849: LD_ADDR_OWVAR 33
21853: PUSH
21854: LD_STRING 
21856: ST_TO_ADDR
// hc_name :=  ;
21857: LD_ADDR_OWVAR 26
21861: PUSH
21862: LD_STRING 
21864: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21865: CALL_OW 44
21869: PPUSH
21870: LD_INT 0
21872: PPUSH
21873: CALL_OW 51
// end ;
21877: GO 21799
21879: POP
21880: POP
// end ;
21881: PPOPN 1
21883: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21884: LD_EXP 54
21888: PUSH
21889: LD_EXP 74
21893: AND
21894: IFFALSE 21903
21896: GO 21898
21898: DISABLE
// StreamSibBomb ;
21899: CALL 21904 0 0
21903: END
// export function StreamSibBomb ; var i , x , y ; begin
21904: LD_INT 0
21906: PPUSH
21907: PPUSH
21908: PPUSH
21909: PPUSH
// result := false ;
21910: LD_ADDR_VAR 0 1
21914: PUSH
21915: LD_INT 0
21917: ST_TO_ADDR
// for i := 1 to 16 do
21918: LD_ADDR_VAR 0 2
21922: PUSH
21923: DOUBLE
21924: LD_INT 1
21926: DEC
21927: ST_TO_ADDR
21928: LD_INT 16
21930: PUSH
21931: FOR_TO
21932: IFFALSE 22131
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21934: LD_ADDR_VAR 0 3
21938: PUSH
21939: LD_INT 10
21941: PUSH
21942: LD_INT 20
21944: PUSH
21945: LD_INT 30
21947: PUSH
21948: LD_INT 40
21950: PUSH
21951: LD_INT 50
21953: PUSH
21954: LD_INT 60
21956: PUSH
21957: LD_INT 70
21959: PUSH
21960: LD_INT 80
21962: PUSH
21963: LD_INT 90
21965: PUSH
21966: LD_INT 100
21968: PUSH
21969: LD_INT 110
21971: PUSH
21972: LD_INT 120
21974: PUSH
21975: LD_INT 130
21977: PUSH
21978: LD_INT 140
21980: PUSH
21981: LD_INT 150
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: PUSH
22001: LD_INT 1
22003: PPUSH
22004: LD_INT 15
22006: PPUSH
22007: CALL_OW 12
22011: ARRAY
22012: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22013: LD_ADDR_VAR 0 4
22017: PUSH
22018: LD_INT 10
22020: PUSH
22021: LD_INT 20
22023: PUSH
22024: LD_INT 30
22026: PUSH
22027: LD_INT 40
22029: PUSH
22030: LD_INT 50
22032: PUSH
22033: LD_INT 60
22035: PUSH
22036: LD_INT 70
22038: PUSH
22039: LD_INT 80
22041: PUSH
22042: LD_INT 90
22044: PUSH
22045: LD_INT 100
22047: PUSH
22048: LD_INT 110
22050: PUSH
22051: LD_INT 120
22053: PUSH
22054: LD_INT 130
22056: PUSH
22057: LD_INT 140
22059: PUSH
22060: LD_INT 150
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: PUSH
22080: LD_INT 1
22082: PPUSH
22083: LD_INT 15
22085: PPUSH
22086: CALL_OW 12
22090: ARRAY
22091: ST_TO_ADDR
// if ValidHex ( x , y ) then
22092: LD_VAR 0 3
22096: PPUSH
22097: LD_VAR 0 4
22101: PPUSH
22102: CALL_OW 488
22106: IFFALSE 22129
// begin result := [ x , y ] ;
22108: LD_ADDR_VAR 0 1
22112: PUSH
22113: LD_VAR 0 3
22117: PUSH
22118: LD_VAR 0 4
22122: PUSH
22123: EMPTY
22124: LIST
22125: LIST
22126: ST_TO_ADDR
// break ;
22127: GO 22131
// end ; end ;
22129: GO 21931
22131: POP
22132: POP
// if result then
22133: LD_VAR 0 1
22137: IFFALSE 22197
// begin ToLua ( playSibBomb() ) ;
22139: LD_STRING playSibBomb()
22141: PPUSH
22142: CALL_OW 559
// wait ( 0 0$14 ) ;
22146: LD_INT 490
22148: PPUSH
22149: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22153: LD_VAR 0 1
22157: PUSH
22158: LD_INT 1
22160: ARRAY
22161: PPUSH
22162: LD_VAR 0 1
22166: PUSH
22167: LD_INT 2
22169: ARRAY
22170: PPUSH
22171: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22175: LD_VAR 0 1
22179: PUSH
22180: LD_INT 1
22182: ARRAY
22183: PPUSH
22184: LD_VAR 0 1
22188: PUSH
22189: LD_INT 2
22191: ARRAY
22192: PPUSH
22193: CALL_OW 429
// end ; end ;
22197: LD_VAR 0 1
22201: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22202: LD_EXP 54
22206: PUSH
22207: LD_EXP 76
22211: AND
22212: IFFALSE 22224
22214: GO 22216
22216: DISABLE
// YouLost (  ) ;
22217: LD_STRING 
22219: PPUSH
22220: CALL_OW 104
22224: END
// every 0 0$1 trigger StreamModeActive and sFog do
22225: LD_EXP 54
22229: PUSH
22230: LD_EXP 75
22234: AND
22235: IFFALSE 22249
22237: GO 22239
22239: DISABLE
// FogOff ( your_side ) ;
22240: LD_OWVAR 2
22244: PPUSH
22245: CALL_OW 344
22249: END
// every 0 0$1 trigger StreamModeActive and sSun do
22250: LD_EXP 54
22254: PUSH
22255: LD_EXP 77
22259: AND
22260: IFFALSE 22288
22262: GO 22264
22264: DISABLE
// begin solar_recharge_percent := 0 ;
22265: LD_ADDR_OWVAR 79
22269: PUSH
22270: LD_INT 0
22272: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22273: LD_INT 10500
22275: PPUSH
22276: CALL_OW 67
// solar_recharge_percent := 100 ;
22280: LD_ADDR_OWVAR 79
22284: PUSH
22285: LD_INT 100
22287: ST_TO_ADDR
// end ;
22288: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22289: LD_EXP 54
22293: PUSH
22294: LD_EXP 78
22298: AND
22299: IFFALSE 22538
22301: GO 22303
22303: DISABLE
22304: LD_INT 0
22306: PPUSH
22307: PPUSH
22308: PPUSH
// begin tmp := [ ] ;
22309: LD_ADDR_VAR 0 3
22313: PUSH
22314: EMPTY
22315: ST_TO_ADDR
// for i := 1 to 6 do
22316: LD_ADDR_VAR 0 1
22320: PUSH
22321: DOUBLE
22322: LD_INT 1
22324: DEC
22325: ST_TO_ADDR
22326: LD_INT 6
22328: PUSH
22329: FOR_TO
22330: IFFALSE 22435
// begin uc_nation := nation_nature ;
22332: LD_ADDR_OWVAR 21
22336: PUSH
22337: LD_INT 0
22339: ST_TO_ADDR
// uc_side := 0 ;
22340: LD_ADDR_OWVAR 20
22344: PUSH
22345: LD_INT 0
22347: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22348: LD_ADDR_OWVAR 29
22352: PUSH
22353: LD_INT 12
22355: PUSH
22356: LD_INT 12
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: ST_TO_ADDR
// hc_agressivity := 20 ;
22363: LD_ADDR_OWVAR 35
22367: PUSH
22368: LD_INT 20
22370: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22371: LD_ADDR_OWVAR 28
22375: PUSH
22376: LD_INT 17
22378: ST_TO_ADDR
// hc_gallery :=  ;
22379: LD_ADDR_OWVAR 33
22383: PUSH
22384: LD_STRING 
22386: ST_TO_ADDR
// hc_name :=  ;
22387: LD_ADDR_OWVAR 26
22391: PUSH
22392: LD_STRING 
22394: ST_TO_ADDR
// un := CreateHuman ;
22395: LD_ADDR_VAR 0 2
22399: PUSH
22400: CALL_OW 44
22404: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22405: LD_VAR 0 2
22409: PPUSH
22410: LD_INT 1
22412: PPUSH
22413: CALL_OW 51
// tmp := tmp ^ un ;
22417: LD_ADDR_VAR 0 3
22421: PUSH
22422: LD_VAR 0 3
22426: PUSH
22427: LD_VAR 0 2
22431: ADD
22432: ST_TO_ADDR
// end ;
22433: GO 22329
22435: POP
22436: POP
// repeat wait ( 0 0$1 ) ;
22437: LD_INT 35
22439: PPUSH
22440: CALL_OW 67
// for un in tmp do
22444: LD_ADDR_VAR 0 2
22448: PUSH
22449: LD_VAR 0 3
22453: PUSH
22454: FOR_IN
22455: IFFALSE 22529
// begin if IsDead ( un ) then
22457: LD_VAR 0 2
22461: PPUSH
22462: CALL_OW 301
22466: IFFALSE 22486
// begin tmp := tmp diff un ;
22468: LD_ADDR_VAR 0 3
22472: PUSH
22473: LD_VAR 0 3
22477: PUSH
22478: LD_VAR 0 2
22482: DIFF
22483: ST_TO_ADDR
// continue ;
22484: GO 22454
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22486: LD_VAR 0 2
22490: PPUSH
22491: LD_INT 3
22493: PUSH
22494: LD_INT 22
22496: PUSH
22497: LD_INT 0
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PPUSH
22508: CALL_OW 69
22512: PPUSH
22513: LD_VAR 0 2
22517: PPUSH
22518: CALL_OW 74
22522: PPUSH
22523: CALL_OW 115
// end ;
22527: GO 22454
22529: POP
22530: POP
// until not tmp ;
22531: LD_VAR 0 3
22535: NOT
22536: IFFALSE 22437
// end ;
22538: PPOPN 3
22540: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22541: LD_EXP 54
22545: PUSH
22546: LD_EXP 79
22550: AND
22551: IFFALSE 22605
22553: GO 22555
22555: DISABLE
// begin ToLua ( displayTroll(); ) ;
22556: LD_STRING displayTroll();
22558: PPUSH
22559: CALL_OW 559
// wait ( 3 3$00 ) ;
22563: LD_INT 6300
22565: PPUSH
22566: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22570: LD_STRING hideTroll();
22572: PPUSH
22573: CALL_OW 559
// wait ( 1 1$00 ) ;
22577: LD_INT 2100
22579: PPUSH
22580: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22584: LD_STRING displayTroll();
22586: PPUSH
22587: CALL_OW 559
// wait ( 1 1$00 ) ;
22591: LD_INT 2100
22593: PPUSH
22594: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22598: LD_STRING hideTroll();
22600: PPUSH
22601: CALL_OW 559
// end ;
22605: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22606: LD_EXP 54
22610: PUSH
22611: LD_EXP 80
22615: AND
22616: IFFALSE 22679
22618: GO 22620
22620: DISABLE
22621: LD_INT 0
22623: PPUSH
// begin p := 0 ;
22624: LD_ADDR_VAR 0 1
22628: PUSH
22629: LD_INT 0
22631: ST_TO_ADDR
// repeat game_speed := 1 ;
22632: LD_ADDR_OWVAR 65
22636: PUSH
22637: LD_INT 1
22639: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22640: LD_INT 35
22642: PPUSH
22643: CALL_OW 67
// p := p + 1 ;
22647: LD_ADDR_VAR 0 1
22651: PUSH
22652: LD_VAR 0 1
22656: PUSH
22657: LD_INT 1
22659: PLUS
22660: ST_TO_ADDR
// until p >= 60 ;
22661: LD_VAR 0 1
22665: PUSH
22666: LD_INT 60
22668: GREATEREQUAL
22669: IFFALSE 22632
// game_speed := 4 ;
22671: LD_ADDR_OWVAR 65
22675: PUSH
22676: LD_INT 4
22678: ST_TO_ADDR
// end ;
22679: PPOPN 1
22681: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22682: LD_EXP 54
22686: PUSH
22687: LD_EXP 81
22691: AND
22692: IFFALSE 22838
22694: GO 22696
22696: DISABLE
22697: LD_INT 0
22699: PPUSH
22700: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22701: LD_ADDR_VAR 0 1
22705: PUSH
22706: LD_INT 22
22708: PUSH
22709: LD_OWVAR 2
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 2
22720: PUSH
22721: LD_INT 30
22723: PUSH
22724: LD_INT 0
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: PUSH
22731: LD_INT 30
22733: PUSH
22734: LD_INT 1
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: EMPTY
22742: LIST
22743: LIST
22744: LIST
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PPUSH
22750: CALL_OW 69
22754: ST_TO_ADDR
// if not depot then
22755: LD_VAR 0 1
22759: NOT
22760: IFFALSE 22764
// exit ;
22762: GO 22838
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22764: LD_ADDR_VAR 0 2
22768: PUSH
22769: LD_VAR 0 1
22773: PUSH
22774: LD_INT 1
22776: PPUSH
22777: LD_VAR 0 1
22781: PPUSH
22782: CALL_OW 12
22786: ARRAY
22787: PPUSH
22788: CALL_OW 274
22792: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22793: LD_VAR 0 2
22797: PPUSH
22798: LD_INT 1
22800: PPUSH
22801: LD_INT 0
22803: PPUSH
22804: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22808: LD_VAR 0 2
22812: PPUSH
22813: LD_INT 2
22815: PPUSH
22816: LD_INT 0
22818: PPUSH
22819: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22823: LD_VAR 0 2
22827: PPUSH
22828: LD_INT 3
22830: PPUSH
22831: LD_INT 0
22833: PPUSH
22834: CALL_OW 277
// end ;
22838: PPOPN 2
22840: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22841: LD_EXP 54
22845: PUSH
22846: LD_EXP 82
22850: AND
22851: IFFALSE 22948
22853: GO 22855
22855: DISABLE
22856: LD_INT 0
22858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22859: LD_ADDR_VAR 0 1
22863: PUSH
22864: LD_INT 22
22866: PUSH
22867: LD_OWVAR 2
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PUSH
22876: LD_INT 21
22878: PUSH
22879: LD_INT 1
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 3
22888: PUSH
22889: LD_INT 23
22891: PUSH
22892: LD_INT 0
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: LIST
22907: PPUSH
22908: CALL_OW 69
22912: ST_TO_ADDR
// if not tmp then
22913: LD_VAR 0 1
22917: NOT
22918: IFFALSE 22922
// exit ;
22920: GO 22948
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22922: LD_VAR 0 1
22926: PUSH
22927: LD_INT 1
22929: PPUSH
22930: LD_VAR 0 1
22934: PPUSH
22935: CALL_OW 12
22939: ARRAY
22940: PPUSH
22941: LD_INT 200
22943: PPUSH
22944: CALL_OW 234
// end ;
22948: PPOPN 1
22950: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22951: LD_EXP 54
22955: PUSH
22956: LD_EXP 83
22960: AND
22961: IFFALSE 23040
22963: GO 22965
22965: DISABLE
22966: LD_INT 0
22968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22969: LD_ADDR_VAR 0 1
22973: PUSH
22974: LD_INT 22
22976: PUSH
22977: LD_OWVAR 2
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 21
22988: PUSH
22989: LD_INT 2
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PPUSH
23000: CALL_OW 69
23004: ST_TO_ADDR
// if not tmp then
23005: LD_VAR 0 1
23009: NOT
23010: IFFALSE 23014
// exit ;
23012: GO 23040
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23014: LD_VAR 0 1
23018: PUSH
23019: LD_INT 1
23021: PPUSH
23022: LD_VAR 0 1
23026: PPUSH
23027: CALL_OW 12
23031: ARRAY
23032: PPUSH
23033: LD_INT 60
23035: PPUSH
23036: CALL_OW 234
// end ;
23040: PPOPN 1
23042: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23043: LD_EXP 54
23047: PUSH
23048: LD_EXP 84
23052: AND
23053: IFFALSE 23152
23055: GO 23057
23057: DISABLE
23058: LD_INT 0
23060: PPUSH
23061: PPUSH
// begin enable ;
23062: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23063: LD_ADDR_VAR 0 1
23067: PUSH
23068: LD_INT 22
23070: PUSH
23071: LD_OWVAR 2
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 61
23082: PUSH
23083: EMPTY
23084: LIST
23085: PUSH
23086: LD_INT 33
23088: PUSH
23089: LD_INT 2
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: LIST
23100: PPUSH
23101: CALL_OW 69
23105: ST_TO_ADDR
// if not tmp then
23106: LD_VAR 0 1
23110: NOT
23111: IFFALSE 23115
// exit ;
23113: GO 23152
// for i in tmp do
23115: LD_ADDR_VAR 0 2
23119: PUSH
23120: LD_VAR 0 1
23124: PUSH
23125: FOR_IN
23126: IFFALSE 23150
// if IsControledBy ( i ) then
23128: LD_VAR 0 2
23132: PPUSH
23133: CALL_OW 312
23137: IFFALSE 23148
// ComUnlink ( i ) ;
23139: LD_VAR 0 2
23143: PPUSH
23144: CALL_OW 136
23148: GO 23125
23150: POP
23151: POP
// end ;
23152: PPOPN 2
23154: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23155: LD_EXP 54
23159: PUSH
23160: LD_EXP 85
23164: AND
23165: IFFALSE 23305
23167: GO 23169
23169: DISABLE
23170: LD_INT 0
23172: PPUSH
23173: PPUSH
// begin ToLua ( displayPowell(); ) ;
23174: LD_STRING displayPowell();
23176: PPUSH
23177: CALL_OW 559
// uc_side := 0 ;
23181: LD_ADDR_OWVAR 20
23185: PUSH
23186: LD_INT 0
23188: ST_TO_ADDR
// uc_nation := 2 ;
23189: LD_ADDR_OWVAR 21
23193: PUSH
23194: LD_INT 2
23196: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23197: LD_ADDR_OWVAR 37
23201: PUSH
23202: LD_INT 14
23204: ST_TO_ADDR
// vc_engine := engine_siberite ;
23205: LD_ADDR_OWVAR 39
23209: PUSH
23210: LD_INT 3
23212: ST_TO_ADDR
// vc_control := control_apeman ;
23213: LD_ADDR_OWVAR 38
23217: PUSH
23218: LD_INT 5
23220: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23221: LD_ADDR_OWVAR 40
23225: PUSH
23226: LD_INT 29
23228: ST_TO_ADDR
// un := CreateVehicle ;
23229: LD_ADDR_VAR 0 2
23233: PUSH
23234: CALL_OW 45
23238: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23239: LD_VAR 0 2
23243: PPUSH
23244: LD_INT 1
23246: PPUSH
23247: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23251: LD_INT 35
23253: PPUSH
23254: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23258: LD_VAR 0 2
23262: PPUSH
23263: LD_INT 22
23265: PUSH
23266: LD_OWVAR 2
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PPUSH
23275: CALL_OW 69
23279: PPUSH
23280: LD_VAR 0 2
23284: PPUSH
23285: CALL_OW 74
23289: PPUSH
23290: CALL_OW 115
// until IsDead ( un ) ;
23294: LD_VAR 0 2
23298: PPUSH
23299: CALL_OW 301
23303: IFFALSE 23251
// end ;
23305: PPOPN 2
23307: END
// every 0 0$1 trigger StreamModeActive and sStu do
23308: LD_EXP 54
23312: PUSH
23313: LD_EXP 93
23317: AND
23318: IFFALSE 23334
23320: GO 23322
23322: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23323: LD_STRING displayStucuk();
23325: PPUSH
23326: CALL_OW 559
// ResetFog ;
23330: CALL_OW 335
// end ;
23334: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23335: LD_EXP 54
23339: PUSH
23340: LD_EXP 86
23344: AND
23345: IFFALSE 23486
23347: GO 23349
23349: DISABLE
23350: LD_INT 0
23352: PPUSH
23353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23354: LD_ADDR_VAR 0 2
23358: PUSH
23359: LD_INT 22
23361: PUSH
23362: LD_OWVAR 2
23366: PUSH
23367: EMPTY
23368: LIST
23369: LIST
23370: PUSH
23371: LD_INT 21
23373: PUSH
23374: LD_INT 1
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PPUSH
23385: CALL_OW 69
23389: ST_TO_ADDR
// if not tmp then
23390: LD_VAR 0 2
23394: NOT
23395: IFFALSE 23399
// exit ;
23397: GO 23486
// un := tmp [ rand ( 1 , tmp ) ] ;
23399: LD_ADDR_VAR 0 1
23403: PUSH
23404: LD_VAR 0 2
23408: PUSH
23409: LD_INT 1
23411: PPUSH
23412: LD_VAR 0 2
23416: PPUSH
23417: CALL_OW 12
23421: ARRAY
23422: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23423: LD_VAR 0 1
23427: PPUSH
23428: LD_INT 0
23430: PPUSH
23431: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23435: LD_VAR 0 1
23439: PPUSH
23440: LD_OWVAR 3
23444: PUSH
23445: LD_VAR 0 1
23449: DIFF
23450: PPUSH
23451: LD_VAR 0 1
23455: PPUSH
23456: CALL_OW 74
23460: PPUSH
23461: CALL_OW 115
// wait ( 0 0$20 ) ;
23465: LD_INT 700
23467: PPUSH
23468: CALL_OW 67
// SetSide ( un , your_side ) ;
23472: LD_VAR 0 1
23476: PPUSH
23477: LD_OWVAR 2
23481: PPUSH
23482: CALL_OW 235
// end ;
23486: PPOPN 2
23488: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23489: LD_EXP 54
23493: PUSH
23494: LD_EXP 87
23498: AND
23499: IFFALSE 23605
23501: GO 23503
23503: DISABLE
23504: LD_INT 0
23506: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23507: LD_ADDR_VAR 0 1
23511: PUSH
23512: LD_INT 22
23514: PUSH
23515: LD_OWVAR 2
23519: PUSH
23520: EMPTY
23521: LIST
23522: LIST
23523: PUSH
23524: LD_INT 2
23526: PUSH
23527: LD_INT 30
23529: PUSH
23530: LD_INT 0
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 30
23539: PUSH
23540: LD_INT 1
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: LIST
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PPUSH
23556: CALL_OW 69
23560: ST_TO_ADDR
// if not depot then
23561: LD_VAR 0 1
23565: NOT
23566: IFFALSE 23570
// exit ;
23568: GO 23605
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23570: LD_VAR 0 1
23574: PUSH
23575: LD_INT 1
23577: ARRAY
23578: PPUSH
23579: CALL_OW 250
23583: PPUSH
23584: LD_VAR 0 1
23588: PUSH
23589: LD_INT 1
23591: ARRAY
23592: PPUSH
23593: CALL_OW 251
23597: PPUSH
23598: LD_INT 70
23600: PPUSH
23601: CALL_OW 495
// end ;
23605: PPOPN 1
23607: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23608: LD_EXP 54
23612: PUSH
23613: LD_EXP 88
23617: AND
23618: IFFALSE 23829
23620: GO 23622
23622: DISABLE
23623: LD_INT 0
23625: PPUSH
23626: PPUSH
23627: PPUSH
23628: PPUSH
23629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23630: LD_ADDR_VAR 0 5
23634: PUSH
23635: LD_INT 22
23637: PUSH
23638: LD_OWVAR 2
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 21
23649: PUSH
23650: LD_INT 1
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: EMPTY
23658: LIST
23659: LIST
23660: PPUSH
23661: CALL_OW 69
23665: ST_TO_ADDR
// if not tmp then
23666: LD_VAR 0 5
23670: NOT
23671: IFFALSE 23675
// exit ;
23673: GO 23829
// for i in tmp do
23675: LD_ADDR_VAR 0 1
23679: PUSH
23680: LD_VAR 0 5
23684: PUSH
23685: FOR_IN
23686: IFFALSE 23827
// begin d := rand ( 0 , 5 ) ;
23688: LD_ADDR_VAR 0 4
23692: PUSH
23693: LD_INT 0
23695: PPUSH
23696: LD_INT 5
23698: PPUSH
23699: CALL_OW 12
23703: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23704: LD_ADDR_VAR 0 2
23708: PUSH
23709: LD_VAR 0 1
23713: PPUSH
23714: CALL_OW 250
23718: PPUSH
23719: LD_VAR 0 4
23723: PPUSH
23724: LD_INT 3
23726: PPUSH
23727: LD_INT 12
23729: PPUSH
23730: CALL_OW 12
23734: PPUSH
23735: CALL_OW 272
23739: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23740: LD_ADDR_VAR 0 3
23744: PUSH
23745: LD_VAR 0 1
23749: PPUSH
23750: CALL_OW 251
23754: PPUSH
23755: LD_VAR 0 4
23759: PPUSH
23760: LD_INT 3
23762: PPUSH
23763: LD_INT 12
23765: PPUSH
23766: CALL_OW 12
23770: PPUSH
23771: CALL_OW 273
23775: ST_TO_ADDR
// if ValidHex ( x , y ) then
23776: LD_VAR 0 2
23780: PPUSH
23781: LD_VAR 0 3
23785: PPUSH
23786: CALL_OW 488
23790: IFFALSE 23825
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23792: LD_VAR 0 1
23796: PPUSH
23797: LD_VAR 0 2
23801: PPUSH
23802: LD_VAR 0 3
23806: PPUSH
23807: LD_INT 3
23809: PPUSH
23810: LD_INT 6
23812: PPUSH
23813: CALL_OW 12
23817: PPUSH
23818: LD_INT 1
23820: PPUSH
23821: CALL_OW 483
// end ;
23825: GO 23685
23827: POP
23828: POP
// end ;
23829: PPOPN 5
23831: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23832: LD_EXP 54
23836: PUSH
23837: LD_EXP 89
23841: AND
23842: IFFALSE 23936
23844: GO 23846
23846: DISABLE
23847: LD_INT 0
23849: PPUSH
23850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23851: LD_ADDR_VAR 0 2
23855: PUSH
23856: LD_INT 22
23858: PUSH
23859: LD_OWVAR 2
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: LD_INT 32
23870: PUSH
23871: LD_INT 1
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: PUSH
23878: LD_INT 21
23880: PUSH
23881: LD_INT 2
23883: PUSH
23884: EMPTY
23885: LIST
23886: LIST
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: LIST
23892: PPUSH
23893: CALL_OW 69
23897: ST_TO_ADDR
// if not tmp then
23898: LD_VAR 0 2
23902: NOT
23903: IFFALSE 23907
// exit ;
23905: GO 23936
// for i in tmp do
23907: LD_ADDR_VAR 0 1
23911: PUSH
23912: LD_VAR 0 2
23916: PUSH
23917: FOR_IN
23918: IFFALSE 23934
// SetFuel ( i , 0 ) ;
23920: LD_VAR 0 1
23924: PPUSH
23925: LD_INT 0
23927: PPUSH
23928: CALL_OW 240
23932: GO 23917
23934: POP
23935: POP
// end ;
23936: PPOPN 2
23938: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23939: LD_EXP 54
23943: PUSH
23944: LD_EXP 90
23948: AND
23949: IFFALSE 24015
23951: GO 23953
23953: DISABLE
23954: LD_INT 0
23956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23957: LD_ADDR_VAR 0 1
23961: PUSH
23962: LD_INT 22
23964: PUSH
23965: LD_OWVAR 2
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 30
23976: PUSH
23977: LD_INT 29
23979: PUSH
23980: EMPTY
23981: LIST
23982: LIST
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: PPUSH
23988: CALL_OW 69
23992: ST_TO_ADDR
// if not tmp then
23993: LD_VAR 0 1
23997: NOT
23998: IFFALSE 24002
// exit ;
24000: GO 24015
// DestroyUnit ( tmp [ 1 ] ) ;
24002: LD_VAR 0 1
24006: PUSH
24007: LD_INT 1
24009: ARRAY
24010: PPUSH
24011: CALL_OW 65
// end ;
24015: PPOPN 1
24017: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24018: LD_EXP 54
24022: PUSH
24023: LD_EXP 92
24027: AND
24028: IFFALSE 24157
24030: GO 24032
24032: DISABLE
24033: LD_INT 0
24035: PPUSH
// begin uc_side := 0 ;
24036: LD_ADDR_OWVAR 20
24040: PUSH
24041: LD_INT 0
24043: ST_TO_ADDR
// uc_nation := nation_arabian ;
24044: LD_ADDR_OWVAR 21
24048: PUSH
24049: LD_INT 2
24051: ST_TO_ADDR
// hc_gallery :=  ;
24052: LD_ADDR_OWVAR 33
24056: PUSH
24057: LD_STRING 
24059: ST_TO_ADDR
// hc_name :=  ;
24060: LD_ADDR_OWVAR 26
24064: PUSH
24065: LD_STRING 
24067: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24068: LD_INT 1
24070: PPUSH
24071: LD_INT 11
24073: PPUSH
24074: LD_INT 10
24076: PPUSH
24077: CALL_OW 380
// un := CreateHuman ;
24081: LD_ADDR_VAR 0 1
24085: PUSH
24086: CALL_OW 44
24090: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24091: LD_VAR 0 1
24095: PPUSH
24096: LD_INT 1
24098: PPUSH
24099: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24103: LD_INT 35
24105: PPUSH
24106: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24110: LD_VAR 0 1
24114: PPUSH
24115: LD_INT 22
24117: PUSH
24118: LD_OWVAR 2
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PPUSH
24127: CALL_OW 69
24131: PPUSH
24132: LD_VAR 0 1
24136: PPUSH
24137: CALL_OW 74
24141: PPUSH
24142: CALL_OW 115
// until IsDead ( un ) ;
24146: LD_VAR 0 1
24150: PPUSH
24151: CALL_OW 301
24155: IFFALSE 24103
// end ;
24157: PPOPN 1
24159: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24160: LD_EXP 54
24164: PUSH
24165: LD_EXP 94
24169: AND
24170: IFFALSE 24182
24172: GO 24174
24174: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24175: LD_STRING earthquake(getX(game), 0, 32)
24177: PPUSH
24178: CALL_OW 559
24182: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24183: LD_EXP 54
24187: PUSH
24188: LD_EXP 95
24192: AND
24193: IFFALSE 24284
24195: GO 24197
24197: DISABLE
24198: LD_INT 0
24200: PPUSH
// begin enable ;
24201: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24202: LD_ADDR_VAR 0 1
24206: PUSH
24207: LD_INT 22
24209: PUSH
24210: LD_OWVAR 2
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 21
24221: PUSH
24222: LD_INT 2
24224: PUSH
24225: EMPTY
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 33
24231: PUSH
24232: LD_INT 3
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: LIST
24243: PPUSH
24244: CALL_OW 69
24248: ST_TO_ADDR
// if not tmp then
24249: LD_VAR 0 1
24253: NOT
24254: IFFALSE 24258
// exit ;
24256: GO 24284
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24258: LD_VAR 0 1
24262: PUSH
24263: LD_INT 1
24265: PPUSH
24266: LD_VAR 0 1
24270: PPUSH
24271: CALL_OW 12
24275: ARRAY
24276: PPUSH
24277: LD_INT 1
24279: PPUSH
24280: CALL_OW 234
// end ;
24284: PPOPN 1
24286: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24287: LD_EXP 54
24291: PUSH
24292: LD_EXP 96
24296: AND
24297: IFFALSE 24438
24299: GO 24301
24301: DISABLE
24302: LD_INT 0
24304: PPUSH
24305: PPUSH
24306: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24307: LD_ADDR_VAR 0 3
24311: PUSH
24312: LD_INT 22
24314: PUSH
24315: LD_OWVAR 2
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: PUSH
24324: LD_INT 25
24326: PUSH
24327: LD_INT 1
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: PPUSH
24338: CALL_OW 69
24342: ST_TO_ADDR
// if not tmp then
24343: LD_VAR 0 3
24347: NOT
24348: IFFALSE 24352
// exit ;
24350: GO 24438
// un := tmp [ rand ( 1 , tmp ) ] ;
24352: LD_ADDR_VAR 0 2
24356: PUSH
24357: LD_VAR 0 3
24361: PUSH
24362: LD_INT 1
24364: PPUSH
24365: LD_VAR 0 3
24369: PPUSH
24370: CALL_OW 12
24374: ARRAY
24375: ST_TO_ADDR
// if Crawls ( un ) then
24376: LD_VAR 0 2
24380: PPUSH
24381: CALL_OW 318
24385: IFFALSE 24396
// ComWalk ( un ) ;
24387: LD_VAR 0 2
24391: PPUSH
24392: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24396: LD_VAR 0 2
24400: PPUSH
24401: LD_INT 9
24403: PPUSH
24404: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24408: LD_INT 28
24410: PPUSH
24411: LD_OWVAR 2
24415: PPUSH
24416: LD_INT 2
24418: PPUSH
24419: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24423: LD_INT 29
24425: PPUSH
24426: LD_OWVAR 2
24430: PPUSH
24431: LD_INT 2
24433: PPUSH
24434: CALL_OW 322
// end ;
24438: PPOPN 3
24440: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24441: LD_EXP 54
24445: PUSH
24446: LD_EXP 97
24450: AND
24451: IFFALSE 24562
24453: GO 24455
24455: DISABLE
24456: LD_INT 0
24458: PPUSH
24459: PPUSH
24460: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24461: LD_ADDR_VAR 0 3
24465: PUSH
24466: LD_INT 22
24468: PUSH
24469: LD_OWVAR 2
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 25
24480: PUSH
24481: LD_INT 1
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PPUSH
24492: CALL_OW 69
24496: ST_TO_ADDR
// if not tmp then
24497: LD_VAR 0 3
24501: NOT
24502: IFFALSE 24506
// exit ;
24504: GO 24562
// un := tmp [ rand ( 1 , tmp ) ] ;
24506: LD_ADDR_VAR 0 2
24510: PUSH
24511: LD_VAR 0 3
24515: PUSH
24516: LD_INT 1
24518: PPUSH
24519: LD_VAR 0 3
24523: PPUSH
24524: CALL_OW 12
24528: ARRAY
24529: ST_TO_ADDR
// if Crawls ( un ) then
24530: LD_VAR 0 2
24534: PPUSH
24535: CALL_OW 318
24539: IFFALSE 24550
// ComWalk ( un ) ;
24541: LD_VAR 0 2
24545: PPUSH
24546: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24550: LD_VAR 0 2
24554: PPUSH
24555: LD_INT 8
24557: PPUSH
24558: CALL_OW 336
// end ;
24562: PPOPN 3
24564: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24565: LD_EXP 54
24569: PUSH
24570: LD_EXP 98
24574: AND
24575: IFFALSE 24719
24577: GO 24579
24579: DISABLE
24580: LD_INT 0
24582: PPUSH
24583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24584: LD_ADDR_VAR 0 2
24588: PUSH
24589: LD_INT 22
24591: PUSH
24592: LD_OWVAR 2
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 21
24603: PUSH
24604: LD_INT 2
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 2
24613: PUSH
24614: LD_INT 34
24616: PUSH
24617: LD_INT 12
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PUSH
24624: LD_INT 34
24626: PUSH
24627: LD_INT 51
24629: PUSH
24630: EMPTY
24631: LIST
24632: LIST
24633: PUSH
24634: LD_INT 34
24636: PUSH
24637: LD_INT 32
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: EMPTY
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: LIST
24654: PPUSH
24655: CALL_OW 69
24659: ST_TO_ADDR
// if not tmp then
24660: LD_VAR 0 2
24664: NOT
24665: IFFALSE 24669
// exit ;
24667: GO 24719
// for i in tmp do
24669: LD_ADDR_VAR 0 1
24673: PUSH
24674: LD_VAR 0 2
24678: PUSH
24679: FOR_IN
24680: IFFALSE 24717
// if GetCargo ( i , mat_artifact ) = 0 then
24682: LD_VAR 0 1
24686: PPUSH
24687: LD_INT 4
24689: PPUSH
24690: CALL_OW 289
24694: PUSH
24695: LD_INT 0
24697: EQUAL
24698: IFFALSE 24715
// SetCargo ( i , mat_siberit , 100 ) ;
24700: LD_VAR 0 1
24704: PPUSH
24705: LD_INT 3
24707: PPUSH
24708: LD_INT 100
24710: PPUSH
24711: CALL_OW 290
24715: GO 24679
24717: POP
24718: POP
// end ;
24719: PPOPN 2
24721: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24722: LD_EXP 54
24726: PUSH
24727: LD_EXP 99
24731: AND
24732: IFFALSE 24915
24734: GO 24736
24736: DISABLE
24737: LD_INT 0
24739: PPUSH
24740: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24741: LD_ADDR_VAR 0 2
24745: PUSH
24746: LD_INT 22
24748: PUSH
24749: LD_OWVAR 2
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PPUSH
24758: CALL_OW 69
24762: ST_TO_ADDR
// if not tmp then
24763: LD_VAR 0 2
24767: NOT
24768: IFFALSE 24772
// exit ;
24770: GO 24915
// for i := 1 to 2 do
24772: LD_ADDR_VAR 0 1
24776: PUSH
24777: DOUBLE
24778: LD_INT 1
24780: DEC
24781: ST_TO_ADDR
24782: LD_INT 2
24784: PUSH
24785: FOR_TO
24786: IFFALSE 24913
// begin uc_side := your_side ;
24788: LD_ADDR_OWVAR 20
24792: PUSH
24793: LD_OWVAR 2
24797: ST_TO_ADDR
// uc_nation := nation_american ;
24798: LD_ADDR_OWVAR 21
24802: PUSH
24803: LD_INT 1
24805: ST_TO_ADDR
// vc_chassis := us_morphling ;
24806: LD_ADDR_OWVAR 37
24810: PUSH
24811: LD_INT 5
24813: ST_TO_ADDR
// vc_engine := engine_siberite ;
24814: LD_ADDR_OWVAR 39
24818: PUSH
24819: LD_INT 3
24821: ST_TO_ADDR
// vc_control := control_computer ;
24822: LD_ADDR_OWVAR 38
24826: PUSH
24827: LD_INT 3
24829: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24830: LD_ADDR_OWVAR 40
24834: PUSH
24835: LD_INT 10
24837: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24838: LD_VAR 0 2
24842: PUSH
24843: LD_INT 1
24845: ARRAY
24846: PPUSH
24847: CALL_OW 310
24851: NOT
24852: IFFALSE 24899
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24854: CALL_OW 45
24858: PPUSH
24859: LD_VAR 0 2
24863: PUSH
24864: LD_INT 1
24866: ARRAY
24867: PPUSH
24868: CALL_OW 250
24872: PPUSH
24873: LD_VAR 0 2
24877: PUSH
24878: LD_INT 1
24880: ARRAY
24881: PPUSH
24882: CALL_OW 251
24886: PPUSH
24887: LD_INT 12
24889: PPUSH
24890: LD_INT 1
24892: PPUSH
24893: CALL_OW 50
24897: GO 24911
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24899: CALL_OW 45
24903: PPUSH
24904: LD_INT 1
24906: PPUSH
24907: CALL_OW 51
// end ;
24911: GO 24785
24913: POP
24914: POP
// end ;
24915: PPOPN 2
24917: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24918: LD_EXP 54
24922: PUSH
24923: LD_EXP 100
24927: AND
24928: IFFALSE 25150
24930: GO 24932
24932: DISABLE
24933: LD_INT 0
24935: PPUSH
24936: PPUSH
24937: PPUSH
24938: PPUSH
24939: PPUSH
24940: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24941: LD_ADDR_VAR 0 6
24945: PUSH
24946: LD_INT 22
24948: PUSH
24949: LD_OWVAR 2
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 21
24960: PUSH
24961: LD_INT 1
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 3
24970: PUSH
24971: LD_INT 23
24973: PUSH
24974: LD_INT 0
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: LIST
24989: PPUSH
24990: CALL_OW 69
24994: ST_TO_ADDR
// if not tmp then
24995: LD_VAR 0 6
24999: NOT
25000: IFFALSE 25004
// exit ;
25002: GO 25150
// s1 := rand ( 1 , 4 ) ;
25004: LD_ADDR_VAR 0 2
25008: PUSH
25009: LD_INT 1
25011: PPUSH
25012: LD_INT 4
25014: PPUSH
25015: CALL_OW 12
25019: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25020: LD_ADDR_VAR 0 4
25024: PUSH
25025: LD_VAR 0 6
25029: PUSH
25030: LD_INT 1
25032: ARRAY
25033: PPUSH
25034: LD_VAR 0 2
25038: PPUSH
25039: CALL_OW 259
25043: ST_TO_ADDR
// if s1 = 1 then
25044: LD_VAR 0 2
25048: PUSH
25049: LD_INT 1
25051: EQUAL
25052: IFFALSE 25072
// s2 := rand ( 2 , 4 ) else
25054: LD_ADDR_VAR 0 3
25058: PUSH
25059: LD_INT 2
25061: PPUSH
25062: LD_INT 4
25064: PPUSH
25065: CALL_OW 12
25069: ST_TO_ADDR
25070: GO 25080
// s2 := 1 ;
25072: LD_ADDR_VAR 0 3
25076: PUSH
25077: LD_INT 1
25079: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25080: LD_ADDR_VAR 0 5
25084: PUSH
25085: LD_VAR 0 6
25089: PUSH
25090: LD_INT 1
25092: ARRAY
25093: PPUSH
25094: LD_VAR 0 3
25098: PPUSH
25099: CALL_OW 259
25103: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25104: LD_VAR 0 6
25108: PUSH
25109: LD_INT 1
25111: ARRAY
25112: PPUSH
25113: LD_VAR 0 2
25117: PPUSH
25118: LD_VAR 0 5
25122: PPUSH
25123: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25127: LD_VAR 0 6
25131: PUSH
25132: LD_INT 1
25134: ARRAY
25135: PPUSH
25136: LD_VAR 0 3
25140: PPUSH
25141: LD_VAR 0 4
25145: PPUSH
25146: CALL_OW 237
// end ;
25150: PPOPN 6
25152: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25153: LD_EXP 54
25157: PUSH
25158: LD_EXP 101
25162: AND
25163: IFFALSE 25242
25165: GO 25167
25167: DISABLE
25168: LD_INT 0
25170: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25171: LD_ADDR_VAR 0 1
25175: PUSH
25176: LD_INT 22
25178: PUSH
25179: LD_OWVAR 2
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 30
25190: PUSH
25191: LD_INT 3
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PPUSH
25202: CALL_OW 69
25206: ST_TO_ADDR
// if not tmp then
25207: LD_VAR 0 1
25211: NOT
25212: IFFALSE 25216
// exit ;
25214: GO 25242
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25216: LD_VAR 0 1
25220: PUSH
25221: LD_INT 1
25223: PPUSH
25224: LD_VAR 0 1
25228: PPUSH
25229: CALL_OW 12
25233: ARRAY
25234: PPUSH
25235: LD_INT 1
25237: PPUSH
25238: CALL_OW 234
// end ;
25242: PPOPN 1
25244: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25245: LD_EXP 54
25249: PUSH
25250: LD_EXP 102
25254: AND
25255: IFFALSE 25367
25257: GO 25259
25259: DISABLE
25260: LD_INT 0
25262: PPUSH
25263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25264: LD_ADDR_VAR 0 2
25268: PUSH
25269: LD_INT 22
25271: PUSH
25272: LD_OWVAR 2
25276: PUSH
25277: EMPTY
25278: LIST
25279: LIST
25280: PUSH
25281: LD_INT 2
25283: PUSH
25284: LD_INT 30
25286: PUSH
25287: LD_INT 27
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 30
25296: PUSH
25297: LD_INT 26
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: PUSH
25304: LD_INT 30
25306: PUSH
25307: LD_INT 28
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: PPUSH
25324: CALL_OW 69
25328: ST_TO_ADDR
// if not tmp then
25329: LD_VAR 0 2
25333: NOT
25334: IFFALSE 25338
// exit ;
25336: GO 25367
// for i in tmp do
25338: LD_ADDR_VAR 0 1
25342: PUSH
25343: LD_VAR 0 2
25347: PUSH
25348: FOR_IN
25349: IFFALSE 25365
// SetLives ( i , 1 ) ;
25351: LD_VAR 0 1
25355: PPUSH
25356: LD_INT 1
25358: PPUSH
25359: CALL_OW 234
25363: GO 25348
25365: POP
25366: POP
// end ;
25367: PPOPN 2
25369: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25370: LD_EXP 54
25374: PUSH
25375: LD_EXP 103
25379: AND
25380: IFFALSE 25654
25382: GO 25384
25384: DISABLE
25385: LD_INT 0
25387: PPUSH
25388: PPUSH
25389: PPUSH
// begin i := rand ( 1 , 7 ) ;
25390: LD_ADDR_VAR 0 1
25394: PUSH
25395: LD_INT 1
25397: PPUSH
25398: LD_INT 7
25400: PPUSH
25401: CALL_OW 12
25405: ST_TO_ADDR
// case i of 1 :
25406: LD_VAR 0 1
25410: PUSH
25411: LD_INT 1
25413: DOUBLE
25414: EQUAL
25415: IFTRUE 25419
25417: GO 25429
25419: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25420: LD_STRING earthquake(getX(game), 0, 32)
25422: PPUSH
25423: CALL_OW 559
25427: GO 25654
25429: LD_INT 2
25431: DOUBLE
25432: EQUAL
25433: IFTRUE 25437
25435: GO 25451
25437: POP
// begin ToLua ( displayStucuk(); ) ;
25438: LD_STRING displayStucuk();
25440: PPUSH
25441: CALL_OW 559
// ResetFog ;
25445: CALL_OW 335
// end ; 3 :
25449: GO 25654
25451: LD_INT 3
25453: DOUBLE
25454: EQUAL
25455: IFTRUE 25459
25457: GO 25563
25459: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25460: LD_ADDR_VAR 0 2
25464: PUSH
25465: LD_INT 22
25467: PUSH
25468: LD_OWVAR 2
25472: PUSH
25473: EMPTY
25474: LIST
25475: LIST
25476: PUSH
25477: LD_INT 25
25479: PUSH
25480: LD_INT 1
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PPUSH
25491: CALL_OW 69
25495: ST_TO_ADDR
// if not tmp then
25496: LD_VAR 0 2
25500: NOT
25501: IFFALSE 25505
// exit ;
25503: GO 25654
// un := tmp [ rand ( 1 , tmp ) ] ;
25505: LD_ADDR_VAR 0 3
25509: PUSH
25510: LD_VAR 0 2
25514: PUSH
25515: LD_INT 1
25517: PPUSH
25518: LD_VAR 0 2
25522: PPUSH
25523: CALL_OW 12
25527: ARRAY
25528: ST_TO_ADDR
// if Crawls ( un ) then
25529: LD_VAR 0 3
25533: PPUSH
25534: CALL_OW 318
25538: IFFALSE 25549
// ComWalk ( un ) ;
25540: LD_VAR 0 3
25544: PPUSH
25545: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25549: LD_VAR 0 3
25553: PPUSH
25554: LD_INT 8
25556: PPUSH
25557: CALL_OW 336
// end ; 4 :
25561: GO 25654
25563: LD_INT 4
25565: DOUBLE
25566: EQUAL
25567: IFTRUE 25571
25569: GO 25632
25571: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25572: LD_ADDR_VAR 0 2
25576: PUSH
25577: LD_INT 22
25579: PUSH
25580: LD_OWVAR 2
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 30
25591: PUSH
25592: LD_INT 29
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PPUSH
25603: CALL_OW 69
25607: ST_TO_ADDR
// if not tmp then
25608: LD_VAR 0 2
25612: NOT
25613: IFFALSE 25617
// exit ;
25615: GO 25654
// DestroyUnit ( tmp [ 1 ] ) ;
25617: LD_VAR 0 2
25621: PUSH
25622: LD_INT 1
25624: ARRAY
25625: PPUSH
25626: CALL_OW 65
// end ; 5 .. 7 :
25630: GO 25654
25632: LD_INT 5
25634: DOUBLE
25635: GREATEREQUAL
25636: IFFALSE 25644
25638: LD_INT 7
25640: DOUBLE
25641: LESSEQUAL
25642: IFTRUE 25646
25644: GO 25653
25646: POP
// StreamSibBomb ; end ;
25647: CALL 21904 0 0
25651: GO 25654
25653: POP
// end ;
25654: PPOPN 3
25656: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25657: LD_EXP 54
25661: PUSH
25662: LD_EXP 104
25666: AND
25667: IFFALSE 25823
25669: GO 25671
25671: DISABLE
25672: LD_INT 0
25674: PPUSH
25675: PPUSH
25676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25677: LD_ADDR_VAR 0 2
25681: PUSH
25682: LD_INT 81
25684: PUSH
25685: LD_OWVAR 2
25689: PUSH
25690: EMPTY
25691: LIST
25692: LIST
25693: PUSH
25694: LD_INT 2
25696: PUSH
25697: LD_INT 21
25699: PUSH
25700: LD_INT 1
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 21
25709: PUSH
25710: LD_INT 2
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: LIST
25721: PUSH
25722: EMPTY
25723: LIST
25724: LIST
25725: PPUSH
25726: CALL_OW 69
25730: ST_TO_ADDR
// if not tmp then
25731: LD_VAR 0 2
25735: NOT
25736: IFFALSE 25740
// exit ;
25738: GO 25823
// p := 0 ;
25740: LD_ADDR_VAR 0 3
25744: PUSH
25745: LD_INT 0
25747: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25748: LD_INT 35
25750: PPUSH
25751: CALL_OW 67
// p := p + 1 ;
25755: LD_ADDR_VAR 0 3
25759: PUSH
25760: LD_VAR 0 3
25764: PUSH
25765: LD_INT 1
25767: PLUS
25768: ST_TO_ADDR
// for i in tmp do
25769: LD_ADDR_VAR 0 1
25773: PUSH
25774: LD_VAR 0 2
25778: PUSH
25779: FOR_IN
25780: IFFALSE 25811
// if GetLives ( i ) < 1000 then
25782: LD_VAR 0 1
25786: PPUSH
25787: CALL_OW 256
25791: PUSH
25792: LD_INT 1000
25794: LESS
25795: IFFALSE 25809
// SetLives ( i , 1000 ) ;
25797: LD_VAR 0 1
25801: PPUSH
25802: LD_INT 1000
25804: PPUSH
25805: CALL_OW 234
25809: GO 25779
25811: POP
25812: POP
// until p > 20 ;
25813: LD_VAR 0 3
25817: PUSH
25818: LD_INT 20
25820: GREATER
25821: IFFALSE 25748
// end ;
25823: PPOPN 3
25825: END
// every 0 0$1 trigger StreamModeActive and sTime do
25826: LD_EXP 54
25830: PUSH
25831: LD_EXP 105
25835: AND
25836: IFFALSE 25871
25838: GO 25840
25840: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25841: LD_INT 28
25843: PPUSH
25844: LD_OWVAR 2
25848: PPUSH
25849: LD_INT 2
25851: PPUSH
25852: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25856: LD_INT 30
25858: PPUSH
25859: LD_OWVAR 2
25863: PPUSH
25864: LD_INT 2
25866: PPUSH
25867: CALL_OW 322
// end ;
25871: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25872: LD_EXP 54
25876: PUSH
25877: LD_EXP 106
25881: AND
25882: IFFALSE 26003
25884: GO 25886
25886: DISABLE
25887: LD_INT 0
25889: PPUSH
25890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25891: LD_ADDR_VAR 0 2
25895: PUSH
25896: LD_INT 22
25898: PUSH
25899: LD_OWVAR 2
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 21
25910: PUSH
25911: LD_INT 1
25913: PUSH
25914: EMPTY
25915: LIST
25916: LIST
25917: PUSH
25918: LD_INT 3
25920: PUSH
25921: LD_INT 23
25923: PUSH
25924: LD_INT 0
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: EMPTY
25936: LIST
25937: LIST
25938: LIST
25939: PPUSH
25940: CALL_OW 69
25944: ST_TO_ADDR
// if not tmp then
25945: LD_VAR 0 2
25949: NOT
25950: IFFALSE 25954
// exit ;
25952: GO 26003
// for i in tmp do
25954: LD_ADDR_VAR 0 1
25958: PUSH
25959: LD_VAR 0 2
25963: PUSH
25964: FOR_IN
25965: IFFALSE 26001
// begin if Crawls ( i ) then
25967: LD_VAR 0 1
25971: PPUSH
25972: CALL_OW 318
25976: IFFALSE 25987
// ComWalk ( i ) ;
25978: LD_VAR 0 1
25982: PPUSH
25983: CALL_OW 138
// SetClass ( i , 2 ) ;
25987: LD_VAR 0 1
25991: PPUSH
25992: LD_INT 2
25994: PPUSH
25995: CALL_OW 336
// end ;
25999: GO 25964
26001: POP
26002: POP
// end ;
26003: PPOPN 2
26005: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26006: LD_EXP 54
26010: PUSH
26011: LD_EXP 107
26015: AND
26016: IFFALSE 26297
26018: GO 26020
26020: DISABLE
26021: LD_INT 0
26023: PPUSH
26024: PPUSH
26025: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26026: LD_OWVAR 2
26030: PPUSH
26031: LD_INT 9
26033: PPUSH
26034: LD_INT 1
26036: PPUSH
26037: LD_INT 1
26039: PPUSH
26040: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26044: LD_INT 9
26046: PPUSH
26047: LD_OWVAR 2
26051: PPUSH
26052: CALL_OW 343
// uc_side := 9 ;
26056: LD_ADDR_OWVAR 20
26060: PUSH
26061: LD_INT 9
26063: ST_TO_ADDR
// uc_nation := 2 ;
26064: LD_ADDR_OWVAR 21
26068: PUSH
26069: LD_INT 2
26071: ST_TO_ADDR
// hc_name := Dark Warrior ;
26072: LD_ADDR_OWVAR 26
26076: PUSH
26077: LD_STRING Dark Warrior
26079: ST_TO_ADDR
// hc_gallery :=  ;
26080: LD_ADDR_OWVAR 33
26084: PUSH
26085: LD_STRING 
26087: ST_TO_ADDR
// hc_noskilllimit := true ;
26088: LD_ADDR_OWVAR 76
26092: PUSH
26093: LD_INT 1
26095: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26096: LD_ADDR_OWVAR 31
26100: PUSH
26101: LD_INT 30
26103: PUSH
26104: LD_INT 30
26106: PUSH
26107: LD_INT 30
26109: PUSH
26110: LD_INT 30
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: ST_TO_ADDR
// un := CreateHuman ;
26119: LD_ADDR_VAR 0 3
26123: PUSH
26124: CALL_OW 44
26128: ST_TO_ADDR
// hc_noskilllimit := false ;
26129: LD_ADDR_OWVAR 76
26133: PUSH
26134: LD_INT 0
26136: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26137: LD_VAR 0 3
26141: PPUSH
26142: LD_INT 1
26144: PPUSH
26145: CALL_OW 51
// p := 0 ;
26149: LD_ADDR_VAR 0 2
26153: PUSH
26154: LD_INT 0
26156: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26157: LD_INT 35
26159: PPUSH
26160: CALL_OW 67
// p := p + 1 ;
26164: LD_ADDR_VAR 0 2
26168: PUSH
26169: LD_VAR 0 2
26173: PUSH
26174: LD_INT 1
26176: PLUS
26177: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26178: LD_VAR 0 3
26182: PPUSH
26183: CALL_OW 256
26187: PUSH
26188: LD_INT 1000
26190: LESS
26191: IFFALSE 26205
// SetLives ( un , 1000 ) ;
26193: LD_VAR 0 3
26197: PPUSH
26198: LD_INT 1000
26200: PPUSH
26201: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26205: LD_VAR 0 3
26209: PPUSH
26210: LD_INT 81
26212: PUSH
26213: LD_OWVAR 2
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PUSH
26222: LD_INT 91
26224: PUSH
26225: LD_VAR 0 3
26229: PUSH
26230: LD_INT 30
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: LIST
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: PPUSH
26242: CALL_OW 69
26246: PPUSH
26247: LD_VAR 0 3
26251: PPUSH
26252: CALL_OW 74
26256: PPUSH
26257: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
26261: LD_VAR 0 2
26265: PUSH
26266: LD_INT 60
26268: GREATER
26269: PUSH
26270: LD_VAR 0 3
26274: PPUSH
26275: CALL_OW 301
26279: OR
26280: IFFALSE 26157
// if un then
26282: LD_VAR 0 3
26286: IFFALSE 26297
// RemoveUnit ( un ) ;
26288: LD_VAR 0 3
26292: PPUSH
26293: CALL_OW 64
// end ;
26297: PPOPN 3
26299: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26300: LD_INT 0
26302: PPUSH
// case cmd of 301 :
26303: LD_VAR 0 1
26307: PUSH
26308: LD_INT 301
26310: DOUBLE
26311: EQUAL
26312: IFTRUE 26316
26314: GO 26348
26316: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26317: LD_VAR 0 6
26321: PPUSH
26322: LD_VAR 0 7
26326: PPUSH
26327: LD_VAR 0 8
26331: PPUSH
26332: LD_VAR 0 4
26336: PPUSH
26337: LD_VAR 0 5
26341: PPUSH
26342: CALL 27549 0 5
26346: GO 26469
26348: LD_INT 302
26350: DOUBLE
26351: EQUAL
26352: IFTRUE 26356
26354: GO 26393
26356: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26357: LD_VAR 0 6
26361: PPUSH
26362: LD_VAR 0 7
26366: PPUSH
26367: LD_VAR 0 8
26371: PPUSH
26372: LD_VAR 0 9
26376: PPUSH
26377: LD_VAR 0 4
26381: PPUSH
26382: LD_VAR 0 5
26386: PPUSH
26387: CALL 27640 0 6
26391: GO 26469
26393: LD_INT 303
26395: DOUBLE
26396: EQUAL
26397: IFTRUE 26401
26399: GO 26438
26401: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26402: LD_VAR 0 6
26406: PPUSH
26407: LD_VAR 0 7
26411: PPUSH
26412: LD_VAR 0 8
26416: PPUSH
26417: LD_VAR 0 9
26421: PPUSH
26422: LD_VAR 0 4
26426: PPUSH
26427: LD_VAR 0 5
26431: PPUSH
26432: CALL 26474 0 6
26436: GO 26469
26438: LD_INT 304
26440: DOUBLE
26441: EQUAL
26442: IFTRUE 26446
26444: GO 26468
26446: POP
// hHackTeleport ( unit , x , y ) ; end ;
26447: LD_VAR 0 2
26451: PPUSH
26452: LD_VAR 0 4
26456: PPUSH
26457: LD_VAR 0 5
26461: PPUSH
26462: CALL 28233 0 3
26466: GO 26469
26468: POP
// end ;
26469: LD_VAR 0 12
26473: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
26474: LD_INT 0
26476: PPUSH
26477: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
26478: LD_VAR 0 1
26482: PUSH
26483: LD_INT 1
26485: LESS
26486: PUSH
26487: LD_VAR 0 1
26491: PUSH
26492: LD_INT 3
26494: GREATER
26495: OR
26496: PUSH
26497: LD_VAR 0 5
26501: PPUSH
26502: LD_VAR 0 6
26506: PPUSH
26507: CALL_OW 428
26511: OR
26512: IFFALSE 26516
// exit ;
26514: GO 27236
// uc_side := your_side ;
26516: LD_ADDR_OWVAR 20
26520: PUSH
26521: LD_OWVAR 2
26525: ST_TO_ADDR
// uc_nation := nation ;
26526: LD_ADDR_OWVAR 21
26530: PUSH
26531: LD_VAR 0 1
26535: ST_TO_ADDR
// bc_level = 1 ;
26536: LD_ADDR_OWVAR 43
26540: PUSH
26541: LD_INT 1
26543: ST_TO_ADDR
// case btype of 1 :
26544: LD_VAR 0 2
26548: PUSH
26549: LD_INT 1
26551: DOUBLE
26552: EQUAL
26553: IFTRUE 26557
26555: GO 26568
26557: POP
// bc_type := b_depot ; 2 :
26558: LD_ADDR_OWVAR 42
26562: PUSH
26563: LD_INT 0
26565: ST_TO_ADDR
26566: GO 27180
26568: LD_INT 2
26570: DOUBLE
26571: EQUAL
26572: IFTRUE 26576
26574: GO 26587
26576: POP
// bc_type := b_warehouse ; 3 :
26577: LD_ADDR_OWVAR 42
26581: PUSH
26582: LD_INT 1
26584: ST_TO_ADDR
26585: GO 27180
26587: LD_INT 3
26589: DOUBLE
26590: EQUAL
26591: IFTRUE 26595
26593: GO 26606
26595: POP
// bc_type := b_lab ; 4 .. 9 :
26596: LD_ADDR_OWVAR 42
26600: PUSH
26601: LD_INT 6
26603: ST_TO_ADDR
26604: GO 27180
26606: LD_INT 4
26608: DOUBLE
26609: GREATEREQUAL
26610: IFFALSE 26618
26612: LD_INT 9
26614: DOUBLE
26615: LESSEQUAL
26616: IFTRUE 26620
26618: GO 26672
26620: POP
// begin bc_type := b_lab_half ;
26621: LD_ADDR_OWVAR 42
26625: PUSH
26626: LD_INT 7
26628: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26629: LD_ADDR_OWVAR 44
26633: PUSH
26634: LD_INT 10
26636: PUSH
26637: LD_INT 11
26639: PUSH
26640: LD_INT 12
26642: PUSH
26643: LD_INT 15
26645: PUSH
26646: LD_INT 14
26648: PUSH
26649: LD_INT 13
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: PUSH
26660: LD_VAR 0 2
26664: PUSH
26665: LD_INT 3
26667: MINUS
26668: ARRAY
26669: ST_TO_ADDR
// end ; 10 .. 13 :
26670: GO 27180
26672: LD_INT 10
26674: DOUBLE
26675: GREATEREQUAL
26676: IFFALSE 26684
26678: LD_INT 13
26680: DOUBLE
26681: LESSEQUAL
26682: IFTRUE 26686
26684: GO 26763
26686: POP
// begin bc_type := b_lab_full ;
26687: LD_ADDR_OWVAR 42
26691: PUSH
26692: LD_INT 8
26694: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
26695: LD_ADDR_OWVAR 44
26699: PUSH
26700: LD_INT 10
26702: PUSH
26703: LD_INT 12
26705: PUSH
26706: LD_INT 14
26708: PUSH
26709: LD_INT 13
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: PUSH
26718: LD_VAR 0 2
26722: PUSH
26723: LD_INT 9
26725: MINUS
26726: ARRAY
26727: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
26728: LD_ADDR_OWVAR 45
26732: PUSH
26733: LD_INT 11
26735: PUSH
26736: LD_INT 15
26738: PUSH
26739: LD_INT 12
26741: PUSH
26742: LD_INT 15
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: PUSH
26751: LD_VAR 0 2
26755: PUSH
26756: LD_INT 9
26758: MINUS
26759: ARRAY
26760: ST_TO_ADDR
// end ; 14 :
26761: GO 27180
26763: LD_INT 14
26765: DOUBLE
26766: EQUAL
26767: IFTRUE 26771
26769: GO 26782
26771: POP
// bc_type := b_workshop ; 15 :
26772: LD_ADDR_OWVAR 42
26776: PUSH
26777: LD_INT 2
26779: ST_TO_ADDR
26780: GO 27180
26782: LD_INT 15
26784: DOUBLE
26785: EQUAL
26786: IFTRUE 26790
26788: GO 26801
26790: POP
// bc_type := b_factory ; 16 :
26791: LD_ADDR_OWVAR 42
26795: PUSH
26796: LD_INT 3
26798: ST_TO_ADDR
26799: GO 27180
26801: LD_INT 16
26803: DOUBLE
26804: EQUAL
26805: IFTRUE 26809
26807: GO 26820
26809: POP
// bc_type := b_ext_gun ; 17 :
26810: LD_ADDR_OWVAR 42
26814: PUSH
26815: LD_INT 17
26817: ST_TO_ADDR
26818: GO 27180
26820: LD_INT 17
26822: DOUBLE
26823: EQUAL
26824: IFTRUE 26828
26826: GO 26856
26828: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26829: LD_ADDR_OWVAR 42
26833: PUSH
26834: LD_INT 19
26836: PUSH
26837: LD_INT 23
26839: PUSH
26840: LD_INT 19
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: LIST
26847: PUSH
26848: LD_VAR 0 1
26852: ARRAY
26853: ST_TO_ADDR
26854: GO 27180
26856: LD_INT 18
26858: DOUBLE
26859: EQUAL
26860: IFTRUE 26864
26862: GO 26875
26864: POP
// bc_type := b_ext_radar ; 19 :
26865: LD_ADDR_OWVAR 42
26869: PUSH
26870: LD_INT 20
26872: ST_TO_ADDR
26873: GO 27180
26875: LD_INT 19
26877: DOUBLE
26878: EQUAL
26879: IFTRUE 26883
26881: GO 26894
26883: POP
// bc_type := b_ext_radio ; 20 :
26884: LD_ADDR_OWVAR 42
26888: PUSH
26889: LD_INT 22
26891: ST_TO_ADDR
26892: GO 27180
26894: LD_INT 20
26896: DOUBLE
26897: EQUAL
26898: IFTRUE 26902
26900: GO 26913
26902: POP
// bc_type := b_ext_siberium ; 21 :
26903: LD_ADDR_OWVAR 42
26907: PUSH
26908: LD_INT 21
26910: ST_TO_ADDR
26911: GO 27180
26913: LD_INT 21
26915: DOUBLE
26916: EQUAL
26917: IFTRUE 26921
26919: GO 26932
26921: POP
// bc_type := b_ext_computer ; 22 :
26922: LD_ADDR_OWVAR 42
26926: PUSH
26927: LD_INT 24
26929: ST_TO_ADDR
26930: GO 27180
26932: LD_INT 22
26934: DOUBLE
26935: EQUAL
26936: IFTRUE 26940
26938: GO 26951
26940: POP
// bc_type := b_ext_track ; 23 :
26941: LD_ADDR_OWVAR 42
26945: PUSH
26946: LD_INT 16
26948: ST_TO_ADDR
26949: GO 27180
26951: LD_INT 23
26953: DOUBLE
26954: EQUAL
26955: IFTRUE 26959
26957: GO 26970
26959: POP
// bc_type := b_ext_laser ; 24 :
26960: LD_ADDR_OWVAR 42
26964: PUSH
26965: LD_INT 25
26967: ST_TO_ADDR
26968: GO 27180
26970: LD_INT 24
26972: DOUBLE
26973: EQUAL
26974: IFTRUE 26978
26976: GO 26989
26978: POP
// bc_type := b_control_tower ; 25 :
26979: LD_ADDR_OWVAR 42
26983: PUSH
26984: LD_INT 36
26986: ST_TO_ADDR
26987: GO 27180
26989: LD_INT 25
26991: DOUBLE
26992: EQUAL
26993: IFTRUE 26997
26995: GO 27008
26997: POP
// bc_type := b_breastwork ; 26 :
26998: LD_ADDR_OWVAR 42
27002: PUSH
27003: LD_INT 31
27005: ST_TO_ADDR
27006: GO 27180
27008: LD_INT 26
27010: DOUBLE
27011: EQUAL
27012: IFTRUE 27016
27014: GO 27027
27016: POP
// bc_type := b_bunker ; 27 :
27017: LD_ADDR_OWVAR 42
27021: PUSH
27022: LD_INT 32
27024: ST_TO_ADDR
27025: GO 27180
27027: LD_INT 27
27029: DOUBLE
27030: EQUAL
27031: IFTRUE 27035
27033: GO 27046
27035: POP
// bc_type := b_turret ; 28 :
27036: LD_ADDR_OWVAR 42
27040: PUSH
27041: LD_INT 33
27043: ST_TO_ADDR
27044: GO 27180
27046: LD_INT 28
27048: DOUBLE
27049: EQUAL
27050: IFTRUE 27054
27052: GO 27065
27054: POP
// bc_type := b_armoury ; 29 :
27055: LD_ADDR_OWVAR 42
27059: PUSH
27060: LD_INT 4
27062: ST_TO_ADDR
27063: GO 27180
27065: LD_INT 29
27067: DOUBLE
27068: EQUAL
27069: IFTRUE 27073
27071: GO 27084
27073: POP
// bc_type := b_barracks ; 30 :
27074: LD_ADDR_OWVAR 42
27078: PUSH
27079: LD_INT 5
27081: ST_TO_ADDR
27082: GO 27180
27084: LD_INT 30
27086: DOUBLE
27087: EQUAL
27088: IFTRUE 27092
27090: GO 27103
27092: POP
// bc_type := b_solar_power ; 31 :
27093: LD_ADDR_OWVAR 42
27097: PUSH
27098: LD_INT 27
27100: ST_TO_ADDR
27101: GO 27180
27103: LD_INT 31
27105: DOUBLE
27106: EQUAL
27107: IFTRUE 27111
27109: GO 27122
27111: POP
// bc_type := b_oil_power ; 32 :
27112: LD_ADDR_OWVAR 42
27116: PUSH
27117: LD_INT 26
27119: ST_TO_ADDR
27120: GO 27180
27122: LD_INT 32
27124: DOUBLE
27125: EQUAL
27126: IFTRUE 27130
27128: GO 27141
27130: POP
// bc_type := b_siberite_power ; 33 :
27131: LD_ADDR_OWVAR 42
27135: PUSH
27136: LD_INT 28
27138: ST_TO_ADDR
27139: GO 27180
27141: LD_INT 33
27143: DOUBLE
27144: EQUAL
27145: IFTRUE 27149
27147: GO 27160
27149: POP
// bc_type := b_oil_mine ; 34 :
27150: LD_ADDR_OWVAR 42
27154: PUSH
27155: LD_INT 29
27157: ST_TO_ADDR
27158: GO 27180
27160: LD_INT 34
27162: DOUBLE
27163: EQUAL
27164: IFTRUE 27168
27166: GO 27179
27168: POP
// bc_type := b_siberite_mine ; end ;
27169: LD_ADDR_OWVAR 42
27173: PUSH
27174: LD_INT 30
27176: ST_TO_ADDR
27177: GO 27180
27179: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27180: LD_ADDR_VAR 0 8
27184: PUSH
27185: LD_VAR 0 5
27189: PPUSH
27190: LD_VAR 0 6
27194: PPUSH
27195: LD_VAR 0 3
27199: PPUSH
27200: CALL_OW 47
27204: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27205: LD_OWVAR 42
27209: PUSH
27210: LD_INT 32
27212: PUSH
27213: LD_INT 33
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: IN
27220: IFFALSE 27236
// PlaceWeaponTurret ( b , weapon ) ;
27222: LD_VAR 0 8
27226: PPUSH
27227: LD_VAR 0 4
27231: PPUSH
27232: CALL_OW 431
// end ;
27236: LD_VAR 0 7
27240: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27241: LD_INT 0
27243: PPUSH
27244: PPUSH
27245: PPUSH
27246: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27247: LD_ADDR_VAR 0 4
27251: PUSH
27252: LD_INT 22
27254: PUSH
27255: LD_OWVAR 2
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: PUSH
27264: LD_INT 2
27266: PUSH
27267: LD_INT 30
27269: PUSH
27270: LD_INT 0
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: PUSH
27277: LD_INT 30
27279: PUSH
27280: LD_INT 1
27282: PUSH
27283: EMPTY
27284: LIST
27285: LIST
27286: PUSH
27287: EMPTY
27288: LIST
27289: LIST
27290: LIST
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PPUSH
27296: CALL_OW 69
27300: ST_TO_ADDR
// if not tmp then
27301: LD_VAR 0 4
27305: NOT
27306: IFFALSE 27310
// exit ;
27308: GO 27369
// for i in tmp do
27310: LD_ADDR_VAR 0 2
27314: PUSH
27315: LD_VAR 0 4
27319: PUSH
27320: FOR_IN
27321: IFFALSE 27367
// for j = 1 to 3 do
27323: LD_ADDR_VAR 0 3
27327: PUSH
27328: DOUBLE
27329: LD_INT 1
27331: DEC
27332: ST_TO_ADDR
27333: LD_INT 3
27335: PUSH
27336: FOR_TO
27337: IFFALSE 27363
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27339: LD_VAR 0 2
27343: PPUSH
27344: CALL_OW 274
27348: PPUSH
27349: LD_VAR 0 3
27353: PPUSH
27354: LD_INT 99999
27356: PPUSH
27357: CALL_OW 277
27361: GO 27336
27363: POP
27364: POP
27365: GO 27320
27367: POP
27368: POP
// end ;
27369: LD_VAR 0 1
27373: RET
// export function hHackSetLevel10 ; var i , j ; begin
27374: LD_INT 0
27376: PPUSH
27377: PPUSH
27378: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27379: LD_ADDR_VAR 0 2
27383: PUSH
27384: LD_INT 21
27386: PUSH
27387: LD_INT 1
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: PPUSH
27394: CALL_OW 69
27398: PUSH
27399: FOR_IN
27400: IFFALSE 27452
// if IsSelected ( i ) then
27402: LD_VAR 0 2
27406: PPUSH
27407: CALL_OW 306
27411: IFFALSE 27450
// begin for j := 1 to 4 do
27413: LD_ADDR_VAR 0 3
27417: PUSH
27418: DOUBLE
27419: LD_INT 1
27421: DEC
27422: ST_TO_ADDR
27423: LD_INT 4
27425: PUSH
27426: FOR_TO
27427: IFFALSE 27448
// SetSkill ( i , j , 10 ) ;
27429: LD_VAR 0 2
27433: PPUSH
27434: LD_VAR 0 3
27438: PPUSH
27439: LD_INT 10
27441: PPUSH
27442: CALL_OW 237
27446: GO 27426
27448: POP
27449: POP
// end ;
27450: GO 27399
27452: POP
27453: POP
// end ;
27454: LD_VAR 0 1
27458: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27459: LD_INT 0
27461: PPUSH
27462: PPUSH
27463: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27464: LD_ADDR_VAR 0 2
27468: PUSH
27469: LD_INT 22
27471: PUSH
27472: LD_OWVAR 2
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 21
27483: PUSH
27484: LD_INT 1
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PPUSH
27495: CALL_OW 69
27499: PUSH
27500: FOR_IN
27501: IFFALSE 27542
// begin for j := 1 to 4 do
27503: LD_ADDR_VAR 0 3
27507: PUSH
27508: DOUBLE
27509: LD_INT 1
27511: DEC
27512: ST_TO_ADDR
27513: LD_INT 4
27515: PUSH
27516: FOR_TO
27517: IFFALSE 27538
// SetSkill ( i , j , 10 ) ;
27519: LD_VAR 0 2
27523: PPUSH
27524: LD_VAR 0 3
27528: PPUSH
27529: LD_INT 10
27531: PPUSH
27532: CALL_OW 237
27536: GO 27516
27538: POP
27539: POP
// end ;
27540: GO 27500
27542: POP
27543: POP
// end ;
27544: LD_VAR 0 1
27548: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27549: LD_INT 0
27551: PPUSH
// uc_side := your_side ;
27552: LD_ADDR_OWVAR 20
27556: PUSH
27557: LD_OWVAR 2
27561: ST_TO_ADDR
// uc_nation := nation ;
27562: LD_ADDR_OWVAR 21
27566: PUSH
27567: LD_VAR 0 1
27571: ST_TO_ADDR
// InitHc ;
27572: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27576: LD_INT 0
27578: PPUSH
27579: LD_VAR 0 2
27583: PPUSH
27584: LD_VAR 0 3
27588: PPUSH
27589: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
27593: LD_VAR 0 4
27597: PPUSH
27598: LD_VAR 0 5
27602: PPUSH
27603: CALL_OW 428
27607: PUSH
27608: LD_INT 0
27610: EQUAL
27611: IFFALSE 27635
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
27613: CALL_OW 44
27617: PPUSH
27618: LD_VAR 0 4
27622: PPUSH
27623: LD_VAR 0 5
27627: PPUSH
27628: LD_INT 1
27630: PPUSH
27631: CALL_OW 48
// end ;
27635: LD_VAR 0 6
27639: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
27640: LD_INT 0
27642: PPUSH
27643: PPUSH
// uc_side := your_side ;
27644: LD_ADDR_OWVAR 20
27648: PUSH
27649: LD_OWVAR 2
27653: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
27654: LD_VAR 0 1
27658: PUSH
27659: LD_INT 1
27661: PUSH
27662: LD_INT 2
27664: PUSH
27665: LD_INT 3
27667: PUSH
27668: LD_INT 4
27670: PUSH
27671: LD_INT 5
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: IN
27681: IFFALSE 27693
// uc_nation := nation_american else
27683: LD_ADDR_OWVAR 21
27687: PUSH
27688: LD_INT 1
27690: ST_TO_ADDR
27691: GO 27736
// if chassis in [ 11 , 12 , 13 , 14 ] then
27693: LD_VAR 0 1
27697: PUSH
27698: LD_INT 11
27700: PUSH
27701: LD_INT 12
27703: PUSH
27704: LD_INT 13
27706: PUSH
27707: LD_INT 14
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: LIST
27714: LIST
27715: IN
27716: IFFALSE 27728
// uc_nation := nation_arabian else
27718: LD_ADDR_OWVAR 21
27722: PUSH
27723: LD_INT 2
27725: ST_TO_ADDR
27726: GO 27736
// uc_nation := nation_russian ;
27728: LD_ADDR_OWVAR 21
27732: PUSH
27733: LD_INT 3
27735: ST_TO_ADDR
// vc_chassis := chassis ;
27736: LD_ADDR_OWVAR 37
27740: PUSH
27741: LD_VAR 0 1
27745: ST_TO_ADDR
// vc_engine := engine ;
27746: LD_ADDR_OWVAR 39
27750: PUSH
27751: LD_VAR 0 2
27755: ST_TO_ADDR
// vc_control := control ;
27756: LD_ADDR_OWVAR 38
27760: PUSH
27761: LD_VAR 0 3
27765: ST_TO_ADDR
// vc_weapon := weapon ;
27766: LD_ADDR_OWVAR 40
27770: PUSH
27771: LD_VAR 0 4
27775: ST_TO_ADDR
// un := CreateVehicle ;
27776: LD_ADDR_VAR 0 8
27780: PUSH
27781: CALL_OW 45
27785: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27786: LD_VAR 0 8
27790: PPUSH
27791: LD_INT 0
27793: PPUSH
27794: LD_INT 5
27796: PPUSH
27797: CALL_OW 12
27801: PPUSH
27802: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
27806: LD_VAR 0 8
27810: PPUSH
27811: LD_VAR 0 5
27815: PPUSH
27816: LD_VAR 0 6
27820: PPUSH
27821: LD_INT 1
27823: PPUSH
27824: CALL_OW 48
// end ;
27828: LD_VAR 0 7
27832: RET
// export hInvincible ; every 1 do
27833: GO 27835
27835: DISABLE
// hInvincible := [ ] ;
27836: LD_ADDR_EXP 108
27840: PUSH
27841: EMPTY
27842: ST_TO_ADDR
27843: END
// every 10 do var i ;
27844: GO 27846
27846: DISABLE
27847: LD_INT 0
27849: PPUSH
// begin enable ;
27850: ENABLE
// if not hInvincible then
27851: LD_EXP 108
27855: NOT
27856: IFFALSE 27860
// exit ;
27858: GO 27904
// for i in hInvincible do
27860: LD_ADDR_VAR 0 1
27864: PUSH
27865: LD_EXP 108
27869: PUSH
27870: FOR_IN
27871: IFFALSE 27902
// if GetLives ( i ) < 1000 then
27873: LD_VAR 0 1
27877: PPUSH
27878: CALL_OW 256
27882: PUSH
27883: LD_INT 1000
27885: LESS
27886: IFFALSE 27900
// SetLives ( i , 1000 ) ;
27888: LD_VAR 0 1
27892: PPUSH
27893: LD_INT 1000
27895: PPUSH
27896: CALL_OW 234
27900: GO 27870
27902: POP
27903: POP
// end ;
27904: PPOPN 1
27906: END
// export function hHackInvincible ; var i ; begin
27907: LD_INT 0
27909: PPUSH
27910: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27911: LD_ADDR_VAR 0 2
27915: PUSH
27916: LD_INT 2
27918: PUSH
27919: LD_INT 21
27921: PUSH
27922: LD_INT 1
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PUSH
27929: LD_INT 21
27931: PUSH
27932: LD_INT 2
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: LIST
27943: PPUSH
27944: CALL_OW 69
27948: PUSH
27949: FOR_IN
27950: IFFALSE 28011
// if IsSelected ( i ) then
27952: LD_VAR 0 2
27956: PPUSH
27957: CALL_OW 306
27961: IFFALSE 28009
// begin if i in hInvincible then
27963: LD_VAR 0 2
27967: PUSH
27968: LD_EXP 108
27972: IN
27973: IFFALSE 27993
// hInvincible := hInvincible diff i else
27975: LD_ADDR_EXP 108
27979: PUSH
27980: LD_EXP 108
27984: PUSH
27985: LD_VAR 0 2
27989: DIFF
27990: ST_TO_ADDR
27991: GO 28009
// hInvincible := hInvincible union i ;
27993: LD_ADDR_EXP 108
27997: PUSH
27998: LD_EXP 108
28002: PUSH
28003: LD_VAR 0 2
28007: UNION
28008: ST_TO_ADDR
// end ;
28009: GO 27949
28011: POP
28012: POP
// end ;
28013: LD_VAR 0 1
28017: RET
// export function hHackInvisible ; var i , j ; begin
28018: LD_INT 0
28020: PPUSH
28021: PPUSH
28022: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28023: LD_ADDR_VAR 0 2
28027: PUSH
28028: LD_INT 21
28030: PUSH
28031: LD_INT 1
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PPUSH
28038: CALL_OW 69
28042: PUSH
28043: FOR_IN
28044: IFFALSE 28068
// if IsSelected ( i ) then
28046: LD_VAR 0 2
28050: PPUSH
28051: CALL_OW 306
28055: IFFALSE 28066
// ComForceInvisible ( i ) ;
28057: LD_VAR 0 2
28061: PPUSH
28062: CALL_OW 496
28066: GO 28043
28068: POP
28069: POP
// end ;
28070: LD_VAR 0 1
28074: RET
// export function hHackChangeYourSide ; begin
28075: LD_INT 0
28077: PPUSH
// if your_side = 8 then
28078: LD_OWVAR 2
28082: PUSH
28083: LD_INT 8
28085: EQUAL
28086: IFFALSE 28098
// your_side := 0 else
28088: LD_ADDR_OWVAR 2
28092: PUSH
28093: LD_INT 0
28095: ST_TO_ADDR
28096: GO 28112
// your_side := your_side + 1 ;
28098: LD_ADDR_OWVAR 2
28102: PUSH
28103: LD_OWVAR 2
28107: PUSH
28108: LD_INT 1
28110: PLUS
28111: ST_TO_ADDR
// end ;
28112: LD_VAR 0 1
28116: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28117: LD_INT 0
28119: PPUSH
28120: PPUSH
28121: PPUSH
// for i in all_units do
28122: LD_ADDR_VAR 0 2
28126: PUSH
28127: LD_OWVAR 3
28131: PUSH
28132: FOR_IN
28133: IFFALSE 28211
// if IsSelected ( i ) then
28135: LD_VAR 0 2
28139: PPUSH
28140: CALL_OW 306
28144: IFFALSE 28209
// begin j := GetSide ( i ) ;
28146: LD_ADDR_VAR 0 3
28150: PUSH
28151: LD_VAR 0 2
28155: PPUSH
28156: CALL_OW 255
28160: ST_TO_ADDR
// if j = 8 then
28161: LD_VAR 0 3
28165: PUSH
28166: LD_INT 8
28168: EQUAL
28169: IFFALSE 28181
// j := 0 else
28171: LD_ADDR_VAR 0 3
28175: PUSH
28176: LD_INT 0
28178: ST_TO_ADDR
28179: GO 28195
// j := j + 1 ;
28181: LD_ADDR_VAR 0 3
28185: PUSH
28186: LD_VAR 0 3
28190: PUSH
28191: LD_INT 1
28193: PLUS
28194: ST_TO_ADDR
// SetSide ( i , j ) ;
28195: LD_VAR 0 2
28199: PPUSH
28200: LD_VAR 0 3
28204: PPUSH
28205: CALL_OW 235
// end ;
28209: GO 28132
28211: POP
28212: POP
// end ;
28213: LD_VAR 0 1
28217: RET
// export function hHackFog ; begin
28218: LD_INT 0
28220: PPUSH
// FogOff ( true ) ;
28221: LD_INT 1
28223: PPUSH
28224: CALL_OW 344
// end ;
28228: LD_VAR 0 1
28232: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28233: LD_INT 0
28235: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28236: LD_VAR 0 1
28240: PPUSH
28241: LD_VAR 0 2
28245: PPUSH
28246: LD_VAR 0 3
28250: PPUSH
28251: LD_INT 1
28253: PPUSH
28254: LD_INT 1
28256: PPUSH
28257: CALL_OW 483
// CenterOnXY ( x , y ) ;
28261: LD_VAR 0 2
28265: PPUSH
28266: LD_VAR 0 3
28270: PPUSH
28271: CALL_OW 84
// end ; end_of_file
28275: LD_VAR 0 4
28279: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28280: LD_INT 0
28282: PPUSH
28283: PPUSH
28284: PPUSH
28285: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28286: LD_VAR 0 1
28290: PPUSH
28291: CALL_OW 264
28295: PUSH
28296: LD_EXP 42
28300: EQUAL
28301: IFFALSE 28373
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28303: LD_INT 68
28305: PPUSH
28306: LD_VAR 0 1
28310: PPUSH
28311: CALL_OW 255
28315: PPUSH
28316: CALL_OW 321
28320: PUSH
28321: LD_INT 2
28323: EQUAL
28324: IFFALSE 28336
// eff := 70 else
28326: LD_ADDR_VAR 0 4
28330: PUSH
28331: LD_INT 70
28333: ST_TO_ADDR
28334: GO 28344
// eff := 30 ;
28336: LD_ADDR_VAR 0 4
28340: PUSH
28341: LD_INT 30
28343: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28344: LD_VAR 0 1
28348: PPUSH
28349: CALL_OW 250
28353: PPUSH
28354: LD_VAR 0 1
28358: PPUSH
28359: CALL_OW 251
28363: PPUSH
28364: LD_VAR 0 4
28368: PPUSH
28369: CALL_OW 495
// end ; end ;
28373: LD_VAR 0 2
28377: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28378: LD_INT 0
28380: PPUSH
// end ;
28381: LD_VAR 0 4
28385: RET
// export function SOS_Command ( cmd ) ; begin
28386: LD_INT 0
28388: PPUSH
// end ;
28389: LD_VAR 0 2
28393: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28394: LD_INT 0
28396: PPUSH
// if cmd = 121 then
28397: LD_VAR 0 1
28401: PUSH
28402: LD_INT 121
28404: EQUAL
28405: IFFALSE 28407
// end ;
28407: LD_VAR 0 6
28411: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28412: LD_INT 0
28414: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28415: LD_VAR 0 1
28419: PUSH
28420: LD_INT 250
28422: EQUAL
28423: PUSH
28424: LD_VAR 0 2
28428: PPUSH
28429: CALL_OW 264
28433: PUSH
28434: LD_EXP 45
28438: EQUAL
28439: AND
28440: IFFALSE 28461
// MinerPlaceMine ( unit , x , y ) ;
28442: LD_VAR 0 2
28446: PPUSH
28447: LD_VAR 0 4
28451: PPUSH
28452: LD_VAR 0 5
28456: PPUSH
28457: CALL 30810 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28461: LD_VAR 0 1
28465: PUSH
28466: LD_INT 251
28468: EQUAL
28469: PUSH
28470: LD_VAR 0 2
28474: PPUSH
28475: CALL_OW 264
28479: PUSH
28480: LD_EXP 45
28484: EQUAL
28485: AND
28486: IFFALSE 28507
// MinerDetonateMine ( unit , x , y ) ;
28488: LD_VAR 0 2
28492: PPUSH
28493: LD_VAR 0 4
28497: PPUSH
28498: LD_VAR 0 5
28502: PPUSH
28503: CALL 31087 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28507: LD_VAR 0 1
28511: PUSH
28512: LD_INT 252
28514: EQUAL
28515: PUSH
28516: LD_VAR 0 2
28520: PPUSH
28521: CALL_OW 264
28525: PUSH
28526: LD_EXP 45
28530: EQUAL
28531: AND
28532: IFFALSE 28553
// MinerCreateMinefield ( unit , x , y ) ;
28534: LD_VAR 0 2
28538: PPUSH
28539: LD_VAR 0 4
28543: PPUSH
28544: LD_VAR 0 5
28548: PPUSH
28549: CALL 31504 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28553: LD_VAR 0 1
28557: PUSH
28558: LD_INT 253
28560: EQUAL
28561: PUSH
28562: LD_VAR 0 2
28566: PPUSH
28567: CALL_OW 257
28571: PUSH
28572: LD_INT 5
28574: EQUAL
28575: AND
28576: IFFALSE 28597
// ComBinocular ( unit , x , y ) ;
28578: LD_VAR 0 2
28582: PPUSH
28583: LD_VAR 0 4
28587: PPUSH
28588: LD_VAR 0 5
28592: PPUSH
28593: CALL 31875 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28597: LD_VAR 0 1
28601: PUSH
28602: LD_INT 254
28604: EQUAL
28605: PUSH
28606: LD_VAR 0 2
28610: PPUSH
28611: CALL_OW 264
28615: PUSH
28616: LD_EXP 40
28620: EQUAL
28621: AND
28622: PUSH
28623: LD_VAR 0 3
28627: PPUSH
28628: CALL_OW 263
28632: PUSH
28633: LD_INT 3
28635: EQUAL
28636: AND
28637: IFFALSE 28653
// HackDestroyVehicle ( unit , selectedUnit ) ;
28639: LD_VAR 0 2
28643: PPUSH
28644: LD_VAR 0 3
28648: PPUSH
28649: CALL 30170 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28653: LD_VAR 0 1
28657: PUSH
28658: LD_INT 255
28660: EQUAL
28661: PUSH
28662: LD_VAR 0 2
28666: PPUSH
28667: CALL_OW 264
28671: PUSH
28672: LD_INT 14
28674: PUSH
28675: LD_INT 53
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: IN
28682: AND
28683: PUSH
28684: LD_VAR 0 4
28688: PPUSH
28689: LD_VAR 0 5
28693: PPUSH
28694: CALL_OW 488
28698: AND
28699: IFFALSE 28723
// CutTreeXYR ( unit , x , y , 12 ) ;
28701: LD_VAR 0 2
28705: PPUSH
28706: LD_VAR 0 4
28710: PPUSH
28711: LD_VAR 0 5
28715: PPUSH
28716: LD_INT 12
28718: PPUSH
28719: CALL 28736 0 4
// end ;
28723: LD_VAR 0 6
28727: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
28728: LD_INT 0
28730: PPUSH
// end ;
28731: LD_VAR 0 4
28735: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28736: LD_INT 0
28738: PPUSH
28739: PPUSH
28740: PPUSH
28741: PPUSH
28742: PPUSH
28743: PPUSH
28744: PPUSH
28745: PPUSH
28746: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28747: LD_VAR 0 1
28751: NOT
28752: PUSH
28753: LD_VAR 0 2
28757: PPUSH
28758: LD_VAR 0 3
28762: PPUSH
28763: CALL_OW 488
28767: NOT
28768: OR
28769: PUSH
28770: LD_VAR 0 4
28774: NOT
28775: OR
28776: IFFALSE 28780
// exit ;
28778: GO 29120
// list := [ ] ;
28780: LD_ADDR_VAR 0 13
28784: PUSH
28785: EMPTY
28786: ST_TO_ADDR
// if x - r < 0 then
28787: LD_VAR 0 2
28791: PUSH
28792: LD_VAR 0 4
28796: MINUS
28797: PUSH
28798: LD_INT 0
28800: LESS
28801: IFFALSE 28813
// min_x := 0 else
28803: LD_ADDR_VAR 0 7
28807: PUSH
28808: LD_INT 0
28810: ST_TO_ADDR
28811: GO 28829
// min_x := x - r ;
28813: LD_ADDR_VAR 0 7
28817: PUSH
28818: LD_VAR 0 2
28822: PUSH
28823: LD_VAR 0 4
28827: MINUS
28828: ST_TO_ADDR
// if y - r < 0 then
28829: LD_VAR 0 3
28833: PUSH
28834: LD_VAR 0 4
28838: MINUS
28839: PUSH
28840: LD_INT 0
28842: LESS
28843: IFFALSE 28855
// min_y := 0 else
28845: LD_ADDR_VAR 0 8
28849: PUSH
28850: LD_INT 0
28852: ST_TO_ADDR
28853: GO 28871
// min_y := y - r ;
28855: LD_ADDR_VAR 0 8
28859: PUSH
28860: LD_VAR 0 3
28864: PUSH
28865: LD_VAR 0 4
28869: MINUS
28870: ST_TO_ADDR
// max_x := x + r ;
28871: LD_ADDR_VAR 0 9
28875: PUSH
28876: LD_VAR 0 2
28880: PUSH
28881: LD_VAR 0 4
28885: PLUS
28886: ST_TO_ADDR
// max_y := y + r ;
28887: LD_ADDR_VAR 0 10
28891: PUSH
28892: LD_VAR 0 3
28896: PUSH
28897: LD_VAR 0 4
28901: PLUS
28902: ST_TO_ADDR
// for _x = min_x to max_x do
28903: LD_ADDR_VAR 0 11
28907: PUSH
28908: DOUBLE
28909: LD_VAR 0 7
28913: DEC
28914: ST_TO_ADDR
28915: LD_VAR 0 9
28919: PUSH
28920: FOR_TO
28921: IFFALSE 29038
// for _y = min_y to max_y do
28923: LD_ADDR_VAR 0 12
28927: PUSH
28928: DOUBLE
28929: LD_VAR 0 8
28933: DEC
28934: ST_TO_ADDR
28935: LD_VAR 0 10
28939: PUSH
28940: FOR_TO
28941: IFFALSE 29034
// begin if not ValidHex ( _x , _y ) then
28943: LD_VAR 0 11
28947: PPUSH
28948: LD_VAR 0 12
28952: PPUSH
28953: CALL_OW 488
28957: NOT
28958: IFFALSE 28962
// continue ;
28960: GO 28940
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28962: LD_VAR 0 11
28966: PPUSH
28967: LD_VAR 0 12
28971: PPUSH
28972: CALL_OW 351
28976: PUSH
28977: LD_VAR 0 11
28981: PPUSH
28982: LD_VAR 0 12
28986: PPUSH
28987: CALL_OW 554
28991: AND
28992: IFFALSE 29032
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28994: LD_ADDR_VAR 0 13
28998: PUSH
28999: LD_VAR 0 13
29003: PPUSH
29004: LD_VAR 0 13
29008: PUSH
29009: LD_INT 1
29011: PLUS
29012: PPUSH
29013: LD_VAR 0 11
29017: PUSH
29018: LD_VAR 0 12
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PPUSH
29027: CALL_OW 2
29031: ST_TO_ADDR
// end ;
29032: GO 28940
29034: POP
29035: POP
29036: GO 28920
29038: POP
29039: POP
// if not list then
29040: LD_VAR 0 13
29044: NOT
29045: IFFALSE 29049
// exit ;
29047: GO 29120
// for i in list do
29049: LD_ADDR_VAR 0 6
29053: PUSH
29054: LD_VAR 0 13
29058: PUSH
29059: FOR_IN
29060: IFFALSE 29118
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29062: LD_VAR 0 1
29066: PPUSH
29067: LD_STRING M
29069: PUSH
29070: LD_VAR 0 6
29074: PUSH
29075: LD_INT 1
29077: ARRAY
29078: PUSH
29079: LD_VAR 0 6
29083: PUSH
29084: LD_INT 2
29086: ARRAY
29087: PUSH
29088: LD_INT 0
29090: PUSH
29091: LD_INT 0
29093: PUSH
29094: LD_INT 0
29096: PUSH
29097: LD_INT 0
29099: PUSH
29100: EMPTY
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: PUSH
29109: EMPTY
29110: LIST
29111: PPUSH
29112: CALL_OW 447
29116: GO 29059
29118: POP
29119: POP
// end ;
29120: LD_VAR 0 5
29124: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29125: LD_EXP 111
29129: NOT
29130: IFFALSE 29180
29132: GO 29134
29134: DISABLE
// begin initHack := true ;
29135: LD_ADDR_EXP 111
29139: PUSH
29140: LD_INT 1
29142: ST_TO_ADDR
// hackTanks := [ ] ;
29143: LD_ADDR_EXP 112
29147: PUSH
29148: EMPTY
29149: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29150: LD_ADDR_EXP 113
29154: PUSH
29155: EMPTY
29156: ST_TO_ADDR
// hackLimit := 3 ;
29157: LD_ADDR_EXP 114
29161: PUSH
29162: LD_INT 3
29164: ST_TO_ADDR
// hackDist := 12 ;
29165: LD_ADDR_EXP 115
29169: PUSH
29170: LD_INT 12
29172: ST_TO_ADDR
// hackCounter := [ ] ;
29173: LD_ADDR_EXP 116
29177: PUSH
29178: EMPTY
29179: ST_TO_ADDR
// end ;
29180: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29181: LD_EXP 111
29185: PUSH
29186: LD_INT 34
29188: PUSH
29189: LD_EXP 40
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PPUSH
29198: CALL_OW 69
29202: AND
29203: IFFALSE 29458
29205: GO 29207
29207: DISABLE
29208: LD_INT 0
29210: PPUSH
29211: PPUSH
// begin enable ;
29212: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29213: LD_ADDR_VAR 0 1
29217: PUSH
29218: LD_INT 34
29220: PUSH
29221: LD_EXP 40
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PPUSH
29230: CALL_OW 69
29234: PUSH
29235: FOR_IN
29236: IFFALSE 29456
// begin if not i in hackTanks then
29238: LD_VAR 0 1
29242: PUSH
29243: LD_EXP 112
29247: IN
29248: NOT
29249: IFFALSE 29332
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29251: LD_ADDR_EXP 112
29255: PUSH
29256: LD_EXP 112
29260: PPUSH
29261: LD_EXP 112
29265: PUSH
29266: LD_INT 1
29268: PLUS
29269: PPUSH
29270: LD_VAR 0 1
29274: PPUSH
29275: CALL_OW 1
29279: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29280: LD_ADDR_EXP 113
29284: PUSH
29285: LD_EXP 113
29289: PPUSH
29290: LD_EXP 113
29294: PUSH
29295: LD_INT 1
29297: PLUS
29298: PPUSH
29299: EMPTY
29300: PPUSH
29301: CALL_OW 1
29305: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29306: LD_ADDR_EXP 116
29310: PUSH
29311: LD_EXP 116
29315: PPUSH
29316: LD_EXP 116
29320: PUSH
29321: LD_INT 1
29323: PLUS
29324: PPUSH
29325: EMPTY
29326: PPUSH
29327: CALL_OW 1
29331: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29332: LD_VAR 0 1
29336: PPUSH
29337: CALL_OW 302
29341: NOT
29342: IFFALSE 29355
// begin HackUnlinkAll ( i ) ;
29344: LD_VAR 0 1
29348: PPUSH
29349: CALL 29461 0 1
// continue ;
29353: GO 29235
// end ; HackCheckCapturedStatus ( i ) ;
29355: LD_VAR 0 1
29359: PPUSH
29360: CALL 29904 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29364: LD_ADDR_VAR 0 2
29368: PUSH
29369: LD_INT 81
29371: PUSH
29372: LD_VAR 0 1
29376: PPUSH
29377: CALL_OW 255
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 33
29388: PUSH
29389: LD_INT 3
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 91
29398: PUSH
29399: LD_VAR 0 1
29403: PUSH
29404: LD_EXP 115
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: LIST
29413: PUSH
29414: LD_INT 50
29416: PUSH
29417: EMPTY
29418: LIST
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: LIST
29424: LIST
29425: PPUSH
29426: CALL_OW 69
29430: ST_TO_ADDR
// if not tmp then
29431: LD_VAR 0 2
29435: NOT
29436: IFFALSE 29440
// continue ;
29438: GO 29235
// HackLink ( i , tmp ) ;
29440: LD_VAR 0 1
29444: PPUSH
29445: LD_VAR 0 2
29449: PPUSH
29450: CALL 29597 0 2
// end ;
29454: GO 29235
29456: POP
29457: POP
// end ;
29458: PPOPN 2
29460: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29461: LD_INT 0
29463: PPUSH
29464: PPUSH
29465: PPUSH
// if not hack in hackTanks then
29466: LD_VAR 0 1
29470: PUSH
29471: LD_EXP 112
29475: IN
29476: NOT
29477: IFFALSE 29481
// exit ;
29479: GO 29592
// index := GetElementIndex ( hackTanks , hack ) ;
29481: LD_ADDR_VAR 0 4
29485: PUSH
29486: LD_EXP 112
29490: PPUSH
29491: LD_VAR 0 1
29495: PPUSH
29496: CALL 37026 0 2
29500: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29501: LD_EXP 113
29505: PUSH
29506: LD_VAR 0 4
29510: ARRAY
29511: IFFALSE 29592
// begin for i in hackTanksCaptured [ index ] do
29513: LD_ADDR_VAR 0 3
29517: PUSH
29518: LD_EXP 113
29522: PUSH
29523: LD_VAR 0 4
29527: ARRAY
29528: PUSH
29529: FOR_IN
29530: IFFALSE 29556
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29532: LD_VAR 0 3
29536: PUSH
29537: LD_INT 1
29539: ARRAY
29540: PPUSH
29541: LD_VAR 0 3
29545: PUSH
29546: LD_INT 2
29548: ARRAY
29549: PPUSH
29550: CALL_OW 235
29554: GO 29529
29556: POP
29557: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29558: LD_ADDR_EXP 113
29562: PUSH
29563: LD_EXP 113
29567: PPUSH
29568: LD_VAR 0 4
29572: PPUSH
29573: EMPTY
29574: PPUSH
29575: CALL_OW 1
29579: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29580: LD_VAR 0 1
29584: PPUSH
29585: LD_INT 0
29587: PPUSH
29588: CALL_OW 505
// end ; end ;
29592: LD_VAR 0 2
29596: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29597: LD_INT 0
29599: PPUSH
29600: PPUSH
29601: PPUSH
// if not hack in hackTanks or not vehicles then
29602: LD_VAR 0 1
29606: PUSH
29607: LD_EXP 112
29611: IN
29612: NOT
29613: PUSH
29614: LD_VAR 0 2
29618: NOT
29619: OR
29620: IFFALSE 29624
// exit ;
29622: GO 29899
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29624: LD_ADDR_VAR 0 2
29628: PUSH
29629: LD_VAR 0 1
29633: PPUSH
29634: LD_VAR 0 2
29638: PPUSH
29639: LD_INT 1
29641: PPUSH
29642: LD_INT 1
29644: PPUSH
29645: CALL 37676 0 4
29649: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29650: LD_ADDR_VAR 0 5
29654: PUSH
29655: LD_EXP 112
29659: PPUSH
29660: LD_VAR 0 1
29664: PPUSH
29665: CALL 37026 0 2
29669: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29670: LD_EXP 113
29674: PUSH
29675: LD_VAR 0 5
29679: ARRAY
29680: PUSH
29681: LD_EXP 114
29685: LESS
29686: IFFALSE 29875
// begin for i := 1 to vehicles do
29688: LD_ADDR_VAR 0 4
29692: PUSH
29693: DOUBLE
29694: LD_INT 1
29696: DEC
29697: ST_TO_ADDR
29698: LD_VAR 0 2
29702: PUSH
29703: FOR_TO
29704: IFFALSE 29873
// begin if hackTanksCaptured [ index ] = hackLimit then
29706: LD_EXP 113
29710: PUSH
29711: LD_VAR 0 5
29715: ARRAY
29716: PUSH
29717: LD_EXP 114
29721: EQUAL
29722: IFFALSE 29726
// break ;
29724: GO 29873
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29726: LD_ADDR_EXP 116
29730: PUSH
29731: LD_EXP 116
29735: PPUSH
29736: LD_VAR 0 5
29740: PPUSH
29741: LD_EXP 116
29745: PUSH
29746: LD_VAR 0 5
29750: ARRAY
29751: PUSH
29752: LD_INT 1
29754: PLUS
29755: PPUSH
29756: CALL_OW 1
29760: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29761: LD_ADDR_EXP 113
29765: PUSH
29766: LD_EXP 113
29770: PPUSH
29771: LD_VAR 0 5
29775: PUSH
29776: LD_EXP 113
29780: PUSH
29781: LD_VAR 0 5
29785: ARRAY
29786: PUSH
29787: LD_INT 1
29789: PLUS
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PPUSH
29795: LD_VAR 0 2
29799: PUSH
29800: LD_VAR 0 4
29804: ARRAY
29805: PUSH
29806: LD_VAR 0 2
29810: PUSH
29811: LD_VAR 0 4
29815: ARRAY
29816: PPUSH
29817: CALL_OW 255
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: PPUSH
29826: CALL 37241 0 3
29830: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29831: LD_VAR 0 2
29835: PUSH
29836: LD_VAR 0 4
29840: ARRAY
29841: PPUSH
29842: LD_VAR 0 1
29846: PPUSH
29847: CALL_OW 255
29851: PPUSH
29852: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29856: LD_VAR 0 2
29860: PUSH
29861: LD_VAR 0 4
29865: ARRAY
29866: PPUSH
29867: CALL_OW 141
// end ;
29871: GO 29703
29873: POP
29874: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29875: LD_VAR 0 1
29879: PPUSH
29880: LD_EXP 113
29884: PUSH
29885: LD_VAR 0 5
29889: ARRAY
29890: PUSH
29891: LD_INT 0
29893: PLUS
29894: PPUSH
29895: CALL_OW 505
// end ;
29899: LD_VAR 0 3
29903: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29904: LD_INT 0
29906: PPUSH
29907: PPUSH
29908: PPUSH
29909: PPUSH
// if not hack in hackTanks then
29910: LD_VAR 0 1
29914: PUSH
29915: LD_EXP 112
29919: IN
29920: NOT
29921: IFFALSE 29925
// exit ;
29923: GO 30165
// index := GetElementIndex ( hackTanks , hack ) ;
29925: LD_ADDR_VAR 0 4
29929: PUSH
29930: LD_EXP 112
29934: PPUSH
29935: LD_VAR 0 1
29939: PPUSH
29940: CALL 37026 0 2
29944: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29945: LD_ADDR_VAR 0 3
29949: PUSH
29950: DOUBLE
29951: LD_EXP 113
29955: PUSH
29956: LD_VAR 0 4
29960: ARRAY
29961: INC
29962: ST_TO_ADDR
29963: LD_INT 1
29965: PUSH
29966: FOR_DOWNTO
29967: IFFALSE 30139
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29969: LD_ADDR_VAR 0 5
29973: PUSH
29974: LD_EXP 113
29978: PUSH
29979: LD_VAR 0 4
29983: ARRAY
29984: PUSH
29985: LD_VAR 0 3
29989: ARRAY
29990: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29991: LD_VAR 0 5
29995: PUSH
29996: LD_INT 1
29998: ARRAY
29999: PPUSH
30000: CALL_OW 302
30004: NOT
30005: PUSH
30006: LD_VAR 0 5
30010: PUSH
30011: LD_INT 1
30013: ARRAY
30014: PPUSH
30015: CALL_OW 255
30019: PUSH
30020: LD_VAR 0 1
30024: PPUSH
30025: CALL_OW 255
30029: NONEQUAL
30030: OR
30031: IFFALSE 30137
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30033: LD_VAR 0 5
30037: PUSH
30038: LD_INT 1
30040: ARRAY
30041: PPUSH
30042: CALL_OW 305
30046: PUSH
30047: LD_VAR 0 5
30051: PUSH
30052: LD_INT 1
30054: ARRAY
30055: PPUSH
30056: CALL_OW 255
30060: PUSH
30061: LD_VAR 0 1
30065: PPUSH
30066: CALL_OW 255
30070: EQUAL
30071: AND
30072: IFFALSE 30096
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30074: LD_VAR 0 5
30078: PUSH
30079: LD_INT 1
30081: ARRAY
30082: PPUSH
30083: LD_VAR 0 5
30087: PUSH
30088: LD_INT 2
30090: ARRAY
30091: PPUSH
30092: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30096: LD_ADDR_EXP 113
30100: PUSH
30101: LD_EXP 113
30105: PPUSH
30106: LD_VAR 0 4
30110: PPUSH
30111: LD_EXP 113
30115: PUSH
30116: LD_VAR 0 4
30120: ARRAY
30121: PPUSH
30122: LD_VAR 0 3
30126: PPUSH
30127: CALL_OW 3
30131: PPUSH
30132: CALL_OW 1
30136: ST_TO_ADDR
// end ; end ;
30137: GO 29966
30139: POP
30140: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30141: LD_VAR 0 1
30145: PPUSH
30146: LD_EXP 113
30150: PUSH
30151: LD_VAR 0 4
30155: ARRAY
30156: PUSH
30157: LD_INT 0
30159: PLUS
30160: PPUSH
30161: CALL_OW 505
// end ;
30165: LD_VAR 0 2
30169: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30170: LD_INT 0
30172: PPUSH
30173: PPUSH
30174: PPUSH
30175: PPUSH
// if not hack in hackTanks then
30176: LD_VAR 0 1
30180: PUSH
30181: LD_EXP 112
30185: IN
30186: NOT
30187: IFFALSE 30191
// exit ;
30189: GO 30276
// index := GetElementIndex ( hackTanks , hack ) ;
30191: LD_ADDR_VAR 0 5
30195: PUSH
30196: LD_EXP 112
30200: PPUSH
30201: LD_VAR 0 1
30205: PPUSH
30206: CALL 37026 0 2
30210: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30211: LD_ADDR_VAR 0 4
30215: PUSH
30216: DOUBLE
30217: LD_INT 1
30219: DEC
30220: ST_TO_ADDR
30221: LD_EXP 113
30225: PUSH
30226: LD_VAR 0 5
30230: ARRAY
30231: PUSH
30232: FOR_TO
30233: IFFALSE 30274
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30235: LD_EXP 113
30239: PUSH
30240: LD_VAR 0 5
30244: ARRAY
30245: PUSH
30246: LD_VAR 0 4
30250: ARRAY
30251: PUSH
30252: LD_INT 1
30254: ARRAY
30255: PUSH
30256: LD_VAR 0 2
30260: EQUAL
30261: IFFALSE 30272
// KillUnit ( vehicle ) ;
30263: LD_VAR 0 2
30267: PPUSH
30268: CALL_OW 66
30272: GO 30232
30274: POP
30275: POP
// end ;
30276: LD_VAR 0 3
30280: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30281: LD_EXP 117
30285: NOT
30286: IFFALSE 30321
30288: GO 30290
30290: DISABLE
// begin initMiner := true ;
30291: LD_ADDR_EXP 117
30295: PUSH
30296: LD_INT 1
30298: ST_TO_ADDR
// minersList := [ ] ;
30299: LD_ADDR_EXP 118
30303: PUSH
30304: EMPTY
30305: ST_TO_ADDR
// minerMinesList := [ ] ;
30306: LD_ADDR_EXP 119
30310: PUSH
30311: EMPTY
30312: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30313: LD_ADDR_EXP 120
30317: PUSH
30318: LD_INT 5
30320: ST_TO_ADDR
// end ;
30321: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30322: LD_EXP 117
30326: PUSH
30327: LD_INT 34
30329: PUSH
30330: LD_EXP 45
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PPUSH
30339: CALL_OW 69
30343: AND
30344: IFFALSE 30807
30346: GO 30348
30348: DISABLE
30349: LD_INT 0
30351: PPUSH
30352: PPUSH
30353: PPUSH
30354: PPUSH
// begin enable ;
30355: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30356: LD_ADDR_VAR 0 1
30360: PUSH
30361: LD_INT 34
30363: PUSH
30364: LD_EXP 45
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PPUSH
30373: CALL_OW 69
30377: PUSH
30378: FOR_IN
30379: IFFALSE 30451
// begin if not i in minersList then
30381: LD_VAR 0 1
30385: PUSH
30386: LD_EXP 118
30390: IN
30391: NOT
30392: IFFALSE 30449
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30394: LD_ADDR_EXP 118
30398: PUSH
30399: LD_EXP 118
30403: PPUSH
30404: LD_EXP 118
30408: PUSH
30409: LD_INT 1
30411: PLUS
30412: PPUSH
30413: LD_VAR 0 1
30417: PPUSH
30418: CALL_OW 1
30422: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30423: LD_ADDR_EXP 119
30427: PUSH
30428: LD_EXP 119
30432: PPUSH
30433: LD_EXP 119
30437: PUSH
30438: LD_INT 1
30440: PLUS
30441: PPUSH
30442: EMPTY
30443: PPUSH
30444: CALL_OW 1
30448: ST_TO_ADDR
// end end ;
30449: GO 30378
30451: POP
30452: POP
// for i := minerMinesList downto 1 do
30453: LD_ADDR_VAR 0 1
30457: PUSH
30458: DOUBLE
30459: LD_EXP 119
30463: INC
30464: ST_TO_ADDR
30465: LD_INT 1
30467: PUSH
30468: FOR_DOWNTO
30469: IFFALSE 30805
// begin if IsLive ( minersList [ i ] ) then
30471: LD_EXP 118
30475: PUSH
30476: LD_VAR 0 1
30480: ARRAY
30481: PPUSH
30482: CALL_OW 300
30486: IFFALSE 30514
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30488: LD_EXP 118
30492: PUSH
30493: LD_VAR 0 1
30497: ARRAY
30498: PPUSH
30499: LD_EXP 119
30503: PUSH
30504: LD_VAR 0 1
30508: ARRAY
30509: PPUSH
30510: CALL_OW 505
// if not minerMinesList [ i ] then
30514: LD_EXP 119
30518: PUSH
30519: LD_VAR 0 1
30523: ARRAY
30524: NOT
30525: IFFALSE 30529
// continue ;
30527: GO 30468
// for j := minerMinesList [ i ] downto 1 do
30529: LD_ADDR_VAR 0 2
30533: PUSH
30534: DOUBLE
30535: LD_EXP 119
30539: PUSH
30540: LD_VAR 0 1
30544: ARRAY
30545: INC
30546: ST_TO_ADDR
30547: LD_INT 1
30549: PUSH
30550: FOR_DOWNTO
30551: IFFALSE 30801
// begin side := GetSide ( minersList [ i ] ) ;
30553: LD_ADDR_VAR 0 3
30557: PUSH
30558: LD_EXP 118
30562: PUSH
30563: LD_VAR 0 1
30567: ARRAY
30568: PPUSH
30569: CALL_OW 255
30573: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30574: LD_ADDR_VAR 0 4
30578: PUSH
30579: LD_EXP 119
30583: PUSH
30584: LD_VAR 0 1
30588: ARRAY
30589: PUSH
30590: LD_VAR 0 2
30594: ARRAY
30595: PUSH
30596: LD_INT 1
30598: ARRAY
30599: PPUSH
30600: LD_EXP 119
30604: PUSH
30605: LD_VAR 0 1
30609: ARRAY
30610: PUSH
30611: LD_VAR 0 2
30615: ARRAY
30616: PUSH
30617: LD_INT 2
30619: ARRAY
30620: PPUSH
30621: CALL_OW 428
30625: ST_TO_ADDR
// if not tmp then
30626: LD_VAR 0 4
30630: NOT
30631: IFFALSE 30635
// continue ;
30633: GO 30550
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30635: LD_VAR 0 4
30639: PUSH
30640: LD_INT 81
30642: PUSH
30643: LD_VAR 0 3
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PPUSH
30652: CALL_OW 69
30656: IN
30657: PUSH
30658: LD_EXP 119
30662: PUSH
30663: LD_VAR 0 1
30667: ARRAY
30668: PUSH
30669: LD_VAR 0 2
30673: ARRAY
30674: PUSH
30675: LD_INT 1
30677: ARRAY
30678: PPUSH
30679: LD_EXP 119
30683: PUSH
30684: LD_VAR 0 1
30688: ARRAY
30689: PUSH
30690: LD_VAR 0 2
30694: ARRAY
30695: PUSH
30696: LD_INT 2
30698: ARRAY
30699: PPUSH
30700: CALL_OW 458
30704: AND
30705: IFFALSE 30799
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30707: LD_EXP 119
30711: PUSH
30712: LD_VAR 0 1
30716: ARRAY
30717: PUSH
30718: LD_VAR 0 2
30722: ARRAY
30723: PUSH
30724: LD_INT 1
30726: ARRAY
30727: PPUSH
30728: LD_EXP 119
30732: PUSH
30733: LD_VAR 0 1
30737: ARRAY
30738: PUSH
30739: LD_VAR 0 2
30743: ARRAY
30744: PUSH
30745: LD_INT 2
30747: ARRAY
30748: PPUSH
30749: LD_VAR 0 3
30753: PPUSH
30754: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30758: LD_ADDR_EXP 119
30762: PUSH
30763: LD_EXP 119
30767: PPUSH
30768: LD_VAR 0 1
30772: PPUSH
30773: LD_EXP 119
30777: PUSH
30778: LD_VAR 0 1
30782: ARRAY
30783: PPUSH
30784: LD_VAR 0 2
30788: PPUSH
30789: CALL_OW 3
30793: PPUSH
30794: CALL_OW 1
30798: ST_TO_ADDR
// end ; end ;
30799: GO 30550
30801: POP
30802: POP
// end ;
30803: GO 30468
30805: POP
30806: POP
// end ;
30807: PPOPN 4
30809: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30810: LD_INT 0
30812: PPUSH
30813: PPUSH
// result := false ;
30814: LD_ADDR_VAR 0 4
30818: PUSH
30819: LD_INT 0
30821: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30822: LD_VAR 0 1
30826: PPUSH
30827: CALL_OW 264
30831: PUSH
30832: LD_EXP 45
30836: EQUAL
30837: NOT
30838: IFFALSE 30842
// exit ;
30840: GO 31082
// index := GetElementIndex ( minersList , unit ) ;
30842: LD_ADDR_VAR 0 5
30846: PUSH
30847: LD_EXP 118
30851: PPUSH
30852: LD_VAR 0 1
30856: PPUSH
30857: CALL 37026 0 2
30861: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30862: LD_EXP 119
30866: PUSH
30867: LD_VAR 0 5
30871: ARRAY
30872: PUSH
30873: LD_EXP 120
30877: GREATEREQUAL
30878: IFFALSE 30882
// exit ;
30880: GO 31082
// ComMoveXY ( unit , x , y ) ;
30882: LD_VAR 0 1
30886: PPUSH
30887: LD_VAR 0 2
30891: PPUSH
30892: LD_VAR 0 3
30896: PPUSH
30897: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30901: LD_INT 35
30903: PPUSH
30904: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30908: LD_VAR 0 1
30912: PPUSH
30913: LD_VAR 0 2
30917: PPUSH
30918: LD_VAR 0 3
30922: PPUSH
30923: CALL 67090 0 3
30927: NOT
30928: PUSH
30929: LD_VAR 0 1
30933: PPUSH
30934: CALL_OW 314
30938: AND
30939: IFFALSE 30943
// exit ;
30941: GO 31082
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30943: LD_VAR 0 2
30947: PPUSH
30948: LD_VAR 0 3
30952: PPUSH
30953: CALL_OW 428
30957: PUSH
30958: LD_VAR 0 1
30962: EQUAL
30963: PUSH
30964: LD_VAR 0 1
30968: PPUSH
30969: CALL_OW 314
30973: NOT
30974: AND
30975: IFFALSE 30901
// PlaySoundXY ( x , y , PlantMine ) ;
30977: LD_VAR 0 2
30981: PPUSH
30982: LD_VAR 0 3
30986: PPUSH
30987: LD_STRING PlantMine
30989: PPUSH
30990: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30994: LD_VAR 0 2
30998: PPUSH
30999: LD_VAR 0 3
31003: PPUSH
31004: LD_VAR 0 1
31008: PPUSH
31009: CALL_OW 255
31013: PPUSH
31014: LD_INT 0
31016: PPUSH
31017: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31021: LD_ADDR_EXP 119
31025: PUSH
31026: LD_EXP 119
31030: PPUSH
31031: LD_VAR 0 5
31035: PUSH
31036: LD_EXP 119
31040: PUSH
31041: LD_VAR 0 5
31045: ARRAY
31046: PUSH
31047: LD_INT 1
31049: PLUS
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PPUSH
31055: LD_VAR 0 2
31059: PUSH
31060: LD_VAR 0 3
31064: PUSH
31065: EMPTY
31066: LIST
31067: LIST
31068: PPUSH
31069: CALL 37241 0 3
31073: ST_TO_ADDR
// result := true ;
31074: LD_ADDR_VAR 0 4
31078: PUSH
31079: LD_INT 1
31081: ST_TO_ADDR
// end ;
31082: LD_VAR 0 4
31086: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31087: LD_INT 0
31089: PPUSH
31090: PPUSH
31091: PPUSH
// if not unit in minersList then
31092: LD_VAR 0 1
31096: PUSH
31097: LD_EXP 118
31101: IN
31102: NOT
31103: IFFALSE 31107
// exit ;
31105: GO 31499
// index := GetElementIndex ( minersList , unit ) ;
31107: LD_ADDR_VAR 0 6
31111: PUSH
31112: LD_EXP 118
31116: PPUSH
31117: LD_VAR 0 1
31121: PPUSH
31122: CALL 37026 0 2
31126: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31127: LD_ADDR_VAR 0 5
31131: PUSH
31132: DOUBLE
31133: LD_EXP 119
31137: PUSH
31138: LD_VAR 0 6
31142: ARRAY
31143: INC
31144: ST_TO_ADDR
31145: LD_INT 1
31147: PUSH
31148: FOR_DOWNTO
31149: IFFALSE 31310
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31151: LD_EXP 119
31155: PUSH
31156: LD_VAR 0 6
31160: ARRAY
31161: PUSH
31162: LD_VAR 0 5
31166: ARRAY
31167: PUSH
31168: LD_INT 1
31170: ARRAY
31171: PUSH
31172: LD_VAR 0 2
31176: EQUAL
31177: PUSH
31178: LD_EXP 119
31182: PUSH
31183: LD_VAR 0 6
31187: ARRAY
31188: PUSH
31189: LD_VAR 0 5
31193: ARRAY
31194: PUSH
31195: LD_INT 2
31197: ARRAY
31198: PUSH
31199: LD_VAR 0 3
31203: EQUAL
31204: AND
31205: IFFALSE 31308
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31207: LD_EXP 119
31211: PUSH
31212: LD_VAR 0 6
31216: ARRAY
31217: PUSH
31218: LD_VAR 0 5
31222: ARRAY
31223: PUSH
31224: LD_INT 1
31226: ARRAY
31227: PPUSH
31228: LD_EXP 119
31232: PUSH
31233: LD_VAR 0 6
31237: ARRAY
31238: PUSH
31239: LD_VAR 0 5
31243: ARRAY
31244: PUSH
31245: LD_INT 2
31247: ARRAY
31248: PPUSH
31249: LD_VAR 0 1
31253: PPUSH
31254: CALL_OW 255
31258: PPUSH
31259: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31263: LD_ADDR_EXP 119
31267: PUSH
31268: LD_EXP 119
31272: PPUSH
31273: LD_VAR 0 6
31277: PPUSH
31278: LD_EXP 119
31282: PUSH
31283: LD_VAR 0 6
31287: ARRAY
31288: PPUSH
31289: LD_VAR 0 5
31293: PPUSH
31294: CALL_OW 3
31298: PPUSH
31299: CALL_OW 1
31303: ST_TO_ADDR
// exit ;
31304: POP
31305: POP
31306: GO 31499
// end ; end ;
31308: GO 31148
31310: POP
31311: POP
// for i := minerMinesList [ index ] downto 1 do
31312: LD_ADDR_VAR 0 5
31316: PUSH
31317: DOUBLE
31318: LD_EXP 119
31322: PUSH
31323: LD_VAR 0 6
31327: ARRAY
31328: INC
31329: ST_TO_ADDR
31330: LD_INT 1
31332: PUSH
31333: FOR_DOWNTO
31334: IFFALSE 31497
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31336: LD_EXP 119
31340: PUSH
31341: LD_VAR 0 6
31345: ARRAY
31346: PUSH
31347: LD_VAR 0 5
31351: ARRAY
31352: PUSH
31353: LD_INT 1
31355: ARRAY
31356: PPUSH
31357: LD_EXP 119
31361: PUSH
31362: LD_VAR 0 6
31366: ARRAY
31367: PUSH
31368: LD_VAR 0 5
31372: ARRAY
31373: PUSH
31374: LD_INT 2
31376: ARRAY
31377: PPUSH
31378: LD_VAR 0 2
31382: PPUSH
31383: LD_VAR 0 3
31387: PPUSH
31388: CALL_OW 298
31392: PUSH
31393: LD_INT 6
31395: LESS
31396: IFFALSE 31495
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31398: LD_EXP 119
31402: PUSH
31403: LD_VAR 0 6
31407: ARRAY
31408: PUSH
31409: LD_VAR 0 5
31413: ARRAY
31414: PUSH
31415: LD_INT 1
31417: ARRAY
31418: PPUSH
31419: LD_EXP 119
31423: PUSH
31424: LD_VAR 0 6
31428: ARRAY
31429: PUSH
31430: LD_VAR 0 5
31434: ARRAY
31435: PUSH
31436: LD_INT 2
31438: ARRAY
31439: PPUSH
31440: LD_VAR 0 1
31444: PPUSH
31445: CALL_OW 255
31449: PPUSH
31450: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31454: LD_ADDR_EXP 119
31458: PUSH
31459: LD_EXP 119
31463: PPUSH
31464: LD_VAR 0 6
31468: PPUSH
31469: LD_EXP 119
31473: PUSH
31474: LD_VAR 0 6
31478: ARRAY
31479: PPUSH
31480: LD_VAR 0 5
31484: PPUSH
31485: CALL_OW 3
31489: PPUSH
31490: CALL_OW 1
31494: ST_TO_ADDR
// end ; end ;
31495: GO 31333
31497: POP
31498: POP
// end ;
31499: LD_VAR 0 4
31503: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31504: LD_INT 0
31506: PPUSH
31507: PPUSH
31508: PPUSH
31509: PPUSH
31510: PPUSH
31511: PPUSH
31512: PPUSH
31513: PPUSH
31514: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31515: LD_VAR 0 1
31519: PPUSH
31520: CALL_OW 264
31524: PUSH
31525: LD_EXP 45
31529: EQUAL
31530: NOT
31531: PUSH
31532: LD_VAR 0 1
31536: PUSH
31537: LD_EXP 118
31541: IN
31542: NOT
31543: OR
31544: IFFALSE 31548
// exit ;
31546: GO 31870
// index := GetElementIndex ( minersList , unit ) ;
31548: LD_ADDR_VAR 0 6
31552: PUSH
31553: LD_EXP 118
31557: PPUSH
31558: LD_VAR 0 1
31562: PPUSH
31563: CALL 37026 0 2
31567: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31568: LD_ADDR_VAR 0 8
31572: PUSH
31573: LD_EXP 120
31577: PUSH
31578: LD_EXP 119
31582: PUSH
31583: LD_VAR 0 6
31587: ARRAY
31588: MINUS
31589: ST_TO_ADDR
// if not minesFreeAmount then
31590: LD_VAR 0 8
31594: NOT
31595: IFFALSE 31599
// exit ;
31597: GO 31870
// tmp := [ ] ;
31599: LD_ADDR_VAR 0 7
31603: PUSH
31604: EMPTY
31605: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31606: LD_ADDR_VAR 0 5
31610: PUSH
31611: DOUBLE
31612: LD_INT 1
31614: DEC
31615: ST_TO_ADDR
31616: LD_VAR 0 8
31620: PUSH
31621: FOR_TO
31622: IFFALSE 31817
// begin _d := rand ( 0 , 5 ) ;
31624: LD_ADDR_VAR 0 11
31628: PUSH
31629: LD_INT 0
31631: PPUSH
31632: LD_INT 5
31634: PPUSH
31635: CALL_OW 12
31639: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31640: LD_ADDR_VAR 0 12
31644: PUSH
31645: LD_INT 2
31647: PPUSH
31648: LD_INT 6
31650: PPUSH
31651: CALL_OW 12
31655: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31656: LD_ADDR_VAR 0 9
31660: PUSH
31661: LD_VAR 0 2
31665: PPUSH
31666: LD_VAR 0 11
31670: PPUSH
31671: LD_VAR 0 12
31675: PPUSH
31676: CALL_OW 272
31680: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31681: LD_ADDR_VAR 0 10
31685: PUSH
31686: LD_VAR 0 3
31690: PPUSH
31691: LD_VAR 0 11
31695: PPUSH
31696: LD_VAR 0 12
31700: PPUSH
31701: CALL_OW 273
31705: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31706: LD_VAR 0 9
31710: PPUSH
31711: LD_VAR 0 10
31715: PPUSH
31716: CALL_OW 488
31720: PUSH
31721: LD_VAR 0 9
31725: PUSH
31726: LD_VAR 0 10
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: PUSH
31735: LD_VAR 0 7
31739: IN
31740: NOT
31741: AND
31742: PUSH
31743: LD_VAR 0 9
31747: PPUSH
31748: LD_VAR 0 10
31752: PPUSH
31753: CALL_OW 458
31757: NOT
31758: AND
31759: IFFALSE 31801
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31761: LD_ADDR_VAR 0 7
31765: PUSH
31766: LD_VAR 0 7
31770: PPUSH
31771: LD_VAR 0 7
31775: PUSH
31776: LD_INT 1
31778: PLUS
31779: PPUSH
31780: LD_VAR 0 9
31784: PUSH
31785: LD_VAR 0 10
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PPUSH
31794: CALL_OW 1
31798: ST_TO_ADDR
31799: GO 31815
// i := i - 1 ;
31801: LD_ADDR_VAR 0 5
31805: PUSH
31806: LD_VAR 0 5
31810: PUSH
31811: LD_INT 1
31813: MINUS
31814: ST_TO_ADDR
// end ;
31815: GO 31621
31817: POP
31818: POP
// for i in tmp do
31819: LD_ADDR_VAR 0 5
31823: PUSH
31824: LD_VAR 0 7
31828: PUSH
31829: FOR_IN
31830: IFFALSE 31868
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31832: LD_VAR 0 1
31836: PPUSH
31837: LD_VAR 0 5
31841: PUSH
31842: LD_INT 1
31844: ARRAY
31845: PPUSH
31846: LD_VAR 0 5
31850: PUSH
31851: LD_INT 2
31853: ARRAY
31854: PPUSH
31855: CALL 30810 0 3
31859: NOT
31860: IFFALSE 31866
// exit ;
31862: POP
31863: POP
31864: GO 31870
31866: GO 31829
31868: POP
31869: POP
// end ;
31870: LD_VAR 0 4
31874: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31875: LD_INT 0
31877: PPUSH
31878: PPUSH
31879: PPUSH
31880: PPUSH
31881: PPUSH
31882: PPUSH
31883: PPUSH
// if not GetClass ( unit ) = class_sniper then
31884: LD_VAR 0 1
31888: PPUSH
31889: CALL_OW 257
31893: PUSH
31894: LD_INT 5
31896: EQUAL
31897: NOT
31898: IFFALSE 31902
// exit ;
31900: GO 32290
// dist := 8 ;
31902: LD_ADDR_VAR 0 5
31906: PUSH
31907: LD_INT 8
31909: ST_TO_ADDR
// viewRange := 12 ;
31910: LD_ADDR_VAR 0 7
31914: PUSH
31915: LD_INT 12
31917: ST_TO_ADDR
// side := GetSide ( unit ) ;
31918: LD_ADDR_VAR 0 6
31922: PUSH
31923: LD_VAR 0 1
31927: PPUSH
31928: CALL_OW 255
31932: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31933: LD_INT 61
31935: PPUSH
31936: LD_VAR 0 6
31940: PPUSH
31941: CALL_OW 321
31945: PUSH
31946: LD_INT 2
31948: EQUAL
31949: IFFALSE 31959
// viewRange := 16 ;
31951: LD_ADDR_VAR 0 7
31955: PUSH
31956: LD_INT 16
31958: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31959: LD_VAR 0 1
31963: PPUSH
31964: LD_VAR 0 2
31968: PPUSH
31969: LD_VAR 0 3
31973: PPUSH
31974: CALL_OW 297
31978: PUSH
31979: LD_VAR 0 5
31983: GREATER
31984: IFFALSE 32063
// begin ComMoveXY ( unit , x , y ) ;
31986: LD_VAR 0 1
31990: PPUSH
31991: LD_VAR 0 2
31995: PPUSH
31996: LD_VAR 0 3
32000: PPUSH
32001: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32005: LD_INT 35
32007: PPUSH
32008: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32012: LD_VAR 0 1
32016: PPUSH
32017: LD_VAR 0 2
32021: PPUSH
32022: LD_VAR 0 3
32026: PPUSH
32027: CALL 67090 0 3
32031: NOT
32032: IFFALSE 32036
// exit ;
32034: GO 32290
// until GetDistUnitXY ( unit , x , y ) < dist ;
32036: LD_VAR 0 1
32040: PPUSH
32041: LD_VAR 0 2
32045: PPUSH
32046: LD_VAR 0 3
32050: PPUSH
32051: CALL_OW 297
32055: PUSH
32056: LD_VAR 0 5
32060: LESS
32061: IFFALSE 32005
// end ; ComTurnXY ( unit , x , y ) ;
32063: LD_VAR 0 1
32067: PPUSH
32068: LD_VAR 0 2
32072: PPUSH
32073: LD_VAR 0 3
32077: PPUSH
32078: CALL_OW 118
// wait ( 5 ) ;
32082: LD_INT 5
32084: PPUSH
32085: CALL_OW 67
// _d := GetDir ( unit ) ;
32089: LD_ADDR_VAR 0 10
32093: PUSH
32094: LD_VAR 0 1
32098: PPUSH
32099: CALL_OW 254
32103: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32104: LD_ADDR_VAR 0 8
32108: PUSH
32109: LD_VAR 0 1
32113: PPUSH
32114: CALL_OW 250
32118: PPUSH
32119: LD_VAR 0 10
32123: PPUSH
32124: LD_VAR 0 5
32128: PPUSH
32129: CALL_OW 272
32133: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32134: LD_ADDR_VAR 0 9
32138: PUSH
32139: LD_VAR 0 1
32143: PPUSH
32144: CALL_OW 251
32148: PPUSH
32149: LD_VAR 0 10
32153: PPUSH
32154: LD_VAR 0 5
32158: PPUSH
32159: CALL_OW 273
32163: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32164: LD_VAR 0 8
32168: PPUSH
32169: LD_VAR 0 9
32173: PPUSH
32174: CALL_OW 488
32178: NOT
32179: IFFALSE 32183
// exit ;
32181: GO 32290
// ComAnimCustom ( unit , 1 ) ;
32183: LD_VAR 0 1
32187: PPUSH
32188: LD_INT 1
32190: PPUSH
32191: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32195: LD_VAR 0 8
32199: PPUSH
32200: LD_VAR 0 9
32204: PPUSH
32205: LD_VAR 0 6
32209: PPUSH
32210: LD_VAR 0 7
32214: PPUSH
32215: CALL_OW 330
// repeat wait ( 1 ) ;
32219: LD_INT 1
32221: PPUSH
32222: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32226: LD_VAR 0 1
32230: PPUSH
32231: CALL_OW 316
32235: PUSH
32236: LD_VAR 0 1
32240: PPUSH
32241: CALL_OW 314
32245: OR
32246: PUSH
32247: LD_VAR 0 1
32251: PPUSH
32252: CALL_OW 302
32256: NOT
32257: OR
32258: PUSH
32259: LD_VAR 0 1
32263: PPUSH
32264: CALL_OW 301
32268: OR
32269: IFFALSE 32219
// RemoveSeeing ( _x , _y , side ) ;
32271: LD_VAR 0 8
32275: PPUSH
32276: LD_VAR 0 9
32280: PPUSH
32281: LD_VAR 0 6
32285: PPUSH
32286: CALL_OW 331
// end ; end_of_file
32290: LD_VAR 0 4
32294: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32295: LD_INT 0
32297: PPUSH
32298: PPUSH
// if exist_mode then
32299: LD_VAR 0 2
32303: IFFALSE 32328
// unit := CreateCharacter ( prefix & ident ) else
32305: LD_ADDR_VAR 0 5
32309: PUSH
32310: LD_VAR 0 3
32314: PUSH
32315: LD_VAR 0 1
32319: STR
32320: PPUSH
32321: CALL_OW 34
32325: ST_TO_ADDR
32326: GO 32343
// unit := NewCharacter ( ident ) ;
32328: LD_ADDR_VAR 0 5
32332: PUSH
32333: LD_VAR 0 1
32337: PPUSH
32338: CALL_OW 25
32342: ST_TO_ADDR
// result := unit ;
32343: LD_ADDR_VAR 0 4
32347: PUSH
32348: LD_VAR 0 5
32352: ST_TO_ADDR
// end ;
32353: LD_VAR 0 4
32357: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32358: LD_INT 0
32360: PPUSH
32361: PPUSH
// if not side or not nation then
32362: LD_VAR 0 1
32366: NOT
32367: PUSH
32368: LD_VAR 0 2
32372: NOT
32373: OR
32374: IFFALSE 32378
// exit ;
32376: GO 33142
// case nation of nation_american :
32378: LD_VAR 0 2
32382: PUSH
32383: LD_INT 1
32385: DOUBLE
32386: EQUAL
32387: IFTRUE 32391
32389: GO 32605
32391: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32392: LD_ADDR_VAR 0 4
32396: PUSH
32397: LD_INT 35
32399: PUSH
32400: LD_INT 45
32402: PUSH
32403: LD_INT 46
32405: PUSH
32406: LD_INT 47
32408: PUSH
32409: LD_INT 82
32411: PUSH
32412: LD_INT 83
32414: PUSH
32415: LD_INT 84
32417: PUSH
32418: LD_INT 85
32420: PUSH
32421: LD_INT 86
32423: PUSH
32424: LD_INT 1
32426: PUSH
32427: LD_INT 2
32429: PUSH
32430: LD_INT 6
32432: PUSH
32433: LD_INT 15
32435: PUSH
32436: LD_INT 16
32438: PUSH
32439: LD_INT 7
32441: PUSH
32442: LD_INT 12
32444: PUSH
32445: LD_INT 13
32447: PUSH
32448: LD_INT 10
32450: PUSH
32451: LD_INT 14
32453: PUSH
32454: LD_INT 20
32456: PUSH
32457: LD_INT 21
32459: PUSH
32460: LD_INT 22
32462: PUSH
32463: LD_INT 25
32465: PUSH
32466: LD_INT 32
32468: PUSH
32469: LD_INT 27
32471: PUSH
32472: LD_INT 36
32474: PUSH
32475: LD_INT 69
32477: PUSH
32478: LD_INT 39
32480: PUSH
32481: LD_INT 34
32483: PUSH
32484: LD_INT 40
32486: PUSH
32487: LD_INT 48
32489: PUSH
32490: LD_INT 49
32492: PUSH
32493: LD_INT 50
32495: PUSH
32496: LD_INT 51
32498: PUSH
32499: LD_INT 52
32501: PUSH
32502: LD_INT 53
32504: PUSH
32505: LD_INT 54
32507: PUSH
32508: LD_INT 55
32510: PUSH
32511: LD_INT 56
32513: PUSH
32514: LD_INT 57
32516: PUSH
32517: LD_INT 58
32519: PUSH
32520: LD_INT 59
32522: PUSH
32523: LD_INT 60
32525: PUSH
32526: LD_INT 61
32528: PUSH
32529: LD_INT 62
32531: PUSH
32532: LD_INT 80
32534: PUSH
32535: LD_INT 82
32537: PUSH
32538: LD_INT 83
32540: PUSH
32541: LD_INT 84
32543: PUSH
32544: LD_INT 85
32546: PUSH
32547: LD_INT 86
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: ST_TO_ADDR
32603: GO 33066
32605: LD_INT 2
32607: DOUBLE
32608: EQUAL
32609: IFTRUE 32613
32611: GO 32835
32613: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
32614: LD_ADDR_VAR 0 4
32618: PUSH
32619: LD_INT 35
32621: PUSH
32622: LD_INT 45
32624: PUSH
32625: LD_INT 46
32627: PUSH
32628: LD_INT 47
32630: PUSH
32631: LD_INT 82
32633: PUSH
32634: LD_INT 83
32636: PUSH
32637: LD_INT 84
32639: PUSH
32640: LD_INT 85
32642: PUSH
32643: LD_INT 87
32645: PUSH
32646: LD_INT 70
32648: PUSH
32649: LD_INT 1
32651: PUSH
32652: LD_INT 11
32654: PUSH
32655: LD_INT 3
32657: PUSH
32658: LD_INT 4
32660: PUSH
32661: LD_INT 5
32663: PUSH
32664: LD_INT 6
32666: PUSH
32667: LD_INT 15
32669: PUSH
32670: LD_INT 18
32672: PUSH
32673: LD_INT 7
32675: PUSH
32676: LD_INT 17
32678: PUSH
32679: LD_INT 8
32681: PUSH
32682: LD_INT 20
32684: PUSH
32685: LD_INT 21
32687: PUSH
32688: LD_INT 22
32690: PUSH
32691: LD_INT 72
32693: PUSH
32694: LD_INT 26
32696: PUSH
32697: LD_INT 69
32699: PUSH
32700: LD_INT 39
32702: PUSH
32703: LD_INT 40
32705: PUSH
32706: LD_INT 41
32708: PUSH
32709: LD_INT 42
32711: PUSH
32712: LD_INT 43
32714: PUSH
32715: LD_INT 48
32717: PUSH
32718: LD_INT 49
32720: PUSH
32721: LD_INT 50
32723: PUSH
32724: LD_INT 51
32726: PUSH
32727: LD_INT 52
32729: PUSH
32730: LD_INT 53
32732: PUSH
32733: LD_INT 54
32735: PUSH
32736: LD_INT 55
32738: PUSH
32739: LD_INT 56
32741: PUSH
32742: LD_INT 60
32744: PUSH
32745: LD_INT 61
32747: PUSH
32748: LD_INT 62
32750: PUSH
32751: LD_INT 66
32753: PUSH
32754: LD_INT 67
32756: PUSH
32757: LD_INT 68
32759: PUSH
32760: LD_INT 81
32762: PUSH
32763: LD_INT 82
32765: PUSH
32766: LD_INT 83
32768: PUSH
32769: LD_INT 84
32771: PUSH
32772: LD_INT 85
32774: PUSH
32775: LD_INT 87
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: ST_TO_ADDR
32833: GO 33066
32835: LD_INT 3
32837: DOUBLE
32838: EQUAL
32839: IFTRUE 32843
32841: GO 33065
32843: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32844: LD_ADDR_VAR 0 4
32848: PUSH
32849: LD_INT 46
32851: PUSH
32852: LD_INT 47
32854: PUSH
32855: LD_INT 1
32857: PUSH
32858: LD_INT 2
32860: PUSH
32861: LD_INT 82
32863: PUSH
32864: LD_INT 83
32866: PUSH
32867: LD_INT 84
32869: PUSH
32870: LD_INT 85
32872: PUSH
32873: LD_INT 86
32875: PUSH
32876: LD_INT 11
32878: PUSH
32879: LD_INT 9
32881: PUSH
32882: LD_INT 20
32884: PUSH
32885: LD_INT 19
32887: PUSH
32888: LD_INT 21
32890: PUSH
32891: LD_INT 24
32893: PUSH
32894: LD_INT 22
32896: PUSH
32897: LD_INT 25
32899: PUSH
32900: LD_INT 28
32902: PUSH
32903: LD_INT 29
32905: PUSH
32906: LD_INT 30
32908: PUSH
32909: LD_INT 31
32911: PUSH
32912: LD_INT 37
32914: PUSH
32915: LD_INT 38
32917: PUSH
32918: LD_INT 32
32920: PUSH
32921: LD_INT 27
32923: PUSH
32924: LD_INT 33
32926: PUSH
32927: LD_INT 69
32929: PUSH
32930: LD_INT 39
32932: PUSH
32933: LD_INT 34
32935: PUSH
32936: LD_INT 40
32938: PUSH
32939: LD_INT 71
32941: PUSH
32942: LD_INT 23
32944: PUSH
32945: LD_INT 44
32947: PUSH
32948: LD_INT 48
32950: PUSH
32951: LD_INT 49
32953: PUSH
32954: LD_INT 50
32956: PUSH
32957: LD_INT 51
32959: PUSH
32960: LD_INT 52
32962: PUSH
32963: LD_INT 53
32965: PUSH
32966: LD_INT 54
32968: PUSH
32969: LD_INT 55
32971: PUSH
32972: LD_INT 56
32974: PUSH
32975: LD_INT 57
32977: PUSH
32978: LD_INT 58
32980: PUSH
32981: LD_INT 59
32983: PUSH
32984: LD_INT 63
32986: PUSH
32987: LD_INT 64
32989: PUSH
32990: LD_INT 65
32992: PUSH
32993: LD_INT 82
32995: PUSH
32996: LD_INT 83
32998: PUSH
32999: LD_INT 84
33001: PUSH
33002: LD_INT 85
33004: PUSH
33005: LD_INT 86
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: ST_TO_ADDR
33063: GO 33066
33065: POP
// if state > - 1 and state < 3 then
33066: LD_VAR 0 3
33070: PUSH
33071: LD_INT 1
33073: NEG
33074: GREATER
33075: PUSH
33076: LD_VAR 0 3
33080: PUSH
33081: LD_INT 3
33083: LESS
33084: AND
33085: IFFALSE 33142
// for i in result do
33087: LD_ADDR_VAR 0 5
33091: PUSH
33092: LD_VAR 0 4
33096: PUSH
33097: FOR_IN
33098: IFFALSE 33140
// if GetTech ( i , side ) <> state then
33100: LD_VAR 0 5
33104: PPUSH
33105: LD_VAR 0 1
33109: PPUSH
33110: CALL_OW 321
33114: PUSH
33115: LD_VAR 0 3
33119: NONEQUAL
33120: IFFALSE 33138
// result := result diff i ;
33122: LD_ADDR_VAR 0 4
33126: PUSH
33127: LD_VAR 0 4
33131: PUSH
33132: LD_VAR 0 5
33136: DIFF
33137: ST_TO_ADDR
33138: GO 33097
33140: POP
33141: POP
// end ;
33142: LD_VAR 0 4
33146: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33147: LD_INT 0
33149: PPUSH
33150: PPUSH
33151: PPUSH
// result := true ;
33152: LD_ADDR_VAR 0 3
33156: PUSH
33157: LD_INT 1
33159: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33160: LD_ADDR_VAR 0 5
33164: PUSH
33165: LD_VAR 0 2
33169: PPUSH
33170: CALL_OW 480
33174: ST_TO_ADDR
// if not tmp then
33175: LD_VAR 0 5
33179: NOT
33180: IFFALSE 33184
// exit ;
33182: GO 33233
// for i in tmp do
33184: LD_ADDR_VAR 0 4
33188: PUSH
33189: LD_VAR 0 5
33193: PUSH
33194: FOR_IN
33195: IFFALSE 33231
// if GetTech ( i , side ) <> state_researched then
33197: LD_VAR 0 4
33201: PPUSH
33202: LD_VAR 0 1
33206: PPUSH
33207: CALL_OW 321
33211: PUSH
33212: LD_INT 2
33214: NONEQUAL
33215: IFFALSE 33229
// begin result := false ;
33217: LD_ADDR_VAR 0 3
33221: PUSH
33222: LD_INT 0
33224: ST_TO_ADDR
// exit ;
33225: POP
33226: POP
33227: GO 33233
// end ;
33229: GO 33194
33231: POP
33232: POP
// end ;
33233: LD_VAR 0 3
33237: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33238: LD_INT 0
33240: PPUSH
33241: PPUSH
33242: PPUSH
33243: PPUSH
33244: PPUSH
33245: PPUSH
33246: PPUSH
33247: PPUSH
33248: PPUSH
33249: PPUSH
33250: PPUSH
33251: PPUSH
33252: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33253: LD_VAR 0 1
33257: NOT
33258: PUSH
33259: LD_VAR 0 1
33263: PPUSH
33264: CALL_OW 257
33268: PUSH
33269: LD_INT 9
33271: NONEQUAL
33272: OR
33273: IFFALSE 33277
// exit ;
33275: GO 33850
// side := GetSide ( unit ) ;
33277: LD_ADDR_VAR 0 9
33281: PUSH
33282: LD_VAR 0 1
33286: PPUSH
33287: CALL_OW 255
33291: ST_TO_ADDR
// tech_space := tech_spacanom ;
33292: LD_ADDR_VAR 0 12
33296: PUSH
33297: LD_INT 29
33299: ST_TO_ADDR
// tech_time := tech_taurad ;
33300: LD_ADDR_VAR 0 13
33304: PUSH
33305: LD_INT 28
33307: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33308: LD_ADDR_VAR 0 11
33312: PUSH
33313: LD_VAR 0 1
33317: PPUSH
33318: CALL_OW 310
33322: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33323: LD_VAR 0 11
33327: PPUSH
33328: CALL_OW 247
33332: PUSH
33333: LD_INT 2
33335: EQUAL
33336: IFFALSE 33340
// exit ;
33338: GO 33850
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33340: LD_ADDR_VAR 0 8
33344: PUSH
33345: LD_INT 81
33347: PUSH
33348: LD_VAR 0 9
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 3
33359: PUSH
33360: LD_INT 21
33362: PUSH
33363: LD_INT 3
33365: PUSH
33366: EMPTY
33367: LIST
33368: LIST
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PPUSH
33378: CALL_OW 69
33382: ST_TO_ADDR
// if not tmp then
33383: LD_VAR 0 8
33387: NOT
33388: IFFALSE 33392
// exit ;
33390: GO 33850
// if in_unit then
33392: LD_VAR 0 11
33396: IFFALSE 33420
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33398: LD_ADDR_VAR 0 10
33402: PUSH
33403: LD_VAR 0 8
33407: PPUSH
33408: LD_VAR 0 11
33412: PPUSH
33413: CALL_OW 74
33417: ST_TO_ADDR
33418: GO 33440
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33420: LD_ADDR_VAR 0 10
33424: PUSH
33425: LD_VAR 0 8
33429: PPUSH
33430: LD_VAR 0 1
33434: PPUSH
33435: CALL_OW 74
33439: ST_TO_ADDR
// if not enemy then
33440: LD_VAR 0 10
33444: NOT
33445: IFFALSE 33449
// exit ;
33447: GO 33850
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33449: LD_VAR 0 11
33453: PUSH
33454: LD_VAR 0 11
33458: PPUSH
33459: LD_VAR 0 10
33463: PPUSH
33464: CALL_OW 296
33468: PUSH
33469: LD_INT 13
33471: GREATER
33472: AND
33473: PUSH
33474: LD_VAR 0 1
33478: PPUSH
33479: LD_VAR 0 10
33483: PPUSH
33484: CALL_OW 296
33488: PUSH
33489: LD_INT 12
33491: GREATER
33492: OR
33493: IFFALSE 33497
// exit ;
33495: GO 33850
// missile := [ 1 ] ;
33497: LD_ADDR_VAR 0 14
33501: PUSH
33502: LD_INT 1
33504: PUSH
33505: EMPTY
33506: LIST
33507: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33508: LD_VAR 0 9
33512: PPUSH
33513: LD_VAR 0 12
33517: PPUSH
33518: CALL_OW 325
33522: IFFALSE 33551
// missile := Insert ( missile , missile + 1 , 2 ) ;
33524: LD_ADDR_VAR 0 14
33528: PUSH
33529: LD_VAR 0 14
33533: PPUSH
33534: LD_VAR 0 14
33538: PUSH
33539: LD_INT 1
33541: PLUS
33542: PPUSH
33543: LD_INT 2
33545: PPUSH
33546: CALL_OW 2
33550: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33551: LD_VAR 0 9
33555: PPUSH
33556: LD_VAR 0 13
33560: PPUSH
33561: CALL_OW 325
33565: PUSH
33566: LD_VAR 0 10
33570: PPUSH
33571: CALL_OW 255
33575: PPUSH
33576: LD_VAR 0 13
33580: PPUSH
33581: CALL_OW 325
33585: NOT
33586: AND
33587: IFFALSE 33616
// missile := Insert ( missile , missile + 1 , 3 ) ;
33589: LD_ADDR_VAR 0 14
33593: PUSH
33594: LD_VAR 0 14
33598: PPUSH
33599: LD_VAR 0 14
33603: PUSH
33604: LD_INT 1
33606: PLUS
33607: PPUSH
33608: LD_INT 3
33610: PPUSH
33611: CALL_OW 2
33615: ST_TO_ADDR
// if missile < 2 then
33616: LD_VAR 0 14
33620: PUSH
33621: LD_INT 2
33623: LESS
33624: IFFALSE 33628
// exit ;
33626: GO 33850
// x := GetX ( enemy ) ;
33628: LD_ADDR_VAR 0 4
33632: PUSH
33633: LD_VAR 0 10
33637: PPUSH
33638: CALL_OW 250
33642: ST_TO_ADDR
// y := GetY ( enemy ) ;
33643: LD_ADDR_VAR 0 5
33647: PUSH
33648: LD_VAR 0 10
33652: PPUSH
33653: CALL_OW 251
33657: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33658: LD_ADDR_VAR 0 6
33662: PUSH
33663: LD_VAR 0 4
33667: PUSH
33668: LD_INT 1
33670: NEG
33671: PPUSH
33672: LD_INT 1
33674: PPUSH
33675: CALL_OW 12
33679: PLUS
33680: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33681: LD_ADDR_VAR 0 7
33685: PUSH
33686: LD_VAR 0 5
33690: PUSH
33691: LD_INT 1
33693: NEG
33694: PPUSH
33695: LD_INT 1
33697: PPUSH
33698: CALL_OW 12
33702: PLUS
33703: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33704: LD_VAR 0 6
33708: PPUSH
33709: LD_VAR 0 7
33713: PPUSH
33714: CALL_OW 488
33718: NOT
33719: IFFALSE 33741
// begin _x := x ;
33721: LD_ADDR_VAR 0 6
33725: PUSH
33726: LD_VAR 0 4
33730: ST_TO_ADDR
// _y := y ;
33731: LD_ADDR_VAR 0 7
33735: PUSH
33736: LD_VAR 0 5
33740: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33741: LD_ADDR_VAR 0 3
33745: PUSH
33746: LD_INT 1
33748: PPUSH
33749: LD_VAR 0 14
33753: PPUSH
33754: CALL_OW 12
33758: ST_TO_ADDR
// case i of 1 :
33759: LD_VAR 0 3
33763: PUSH
33764: LD_INT 1
33766: DOUBLE
33767: EQUAL
33768: IFTRUE 33772
33770: GO 33789
33772: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33773: LD_VAR 0 1
33777: PPUSH
33778: LD_VAR 0 10
33782: PPUSH
33783: CALL_OW 115
33787: GO 33850
33789: LD_INT 2
33791: DOUBLE
33792: EQUAL
33793: IFTRUE 33797
33795: GO 33819
33797: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33798: LD_VAR 0 1
33802: PPUSH
33803: LD_VAR 0 6
33807: PPUSH
33808: LD_VAR 0 7
33812: PPUSH
33813: CALL_OW 153
33817: GO 33850
33819: LD_INT 3
33821: DOUBLE
33822: EQUAL
33823: IFTRUE 33827
33825: GO 33849
33827: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33828: LD_VAR 0 1
33832: PPUSH
33833: LD_VAR 0 6
33837: PPUSH
33838: LD_VAR 0 7
33842: PPUSH
33843: CALL_OW 154
33847: GO 33850
33849: POP
// end ;
33850: LD_VAR 0 2
33854: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33855: LD_INT 0
33857: PPUSH
33858: PPUSH
33859: PPUSH
33860: PPUSH
33861: PPUSH
33862: PPUSH
// if not unit or not building then
33863: LD_VAR 0 1
33867: NOT
33868: PUSH
33869: LD_VAR 0 2
33873: NOT
33874: OR
33875: IFFALSE 33879
// exit ;
33877: GO 34037
// x := GetX ( building ) ;
33879: LD_ADDR_VAR 0 5
33883: PUSH
33884: LD_VAR 0 2
33888: PPUSH
33889: CALL_OW 250
33893: ST_TO_ADDR
// y := GetY ( building ) ;
33894: LD_ADDR_VAR 0 6
33898: PUSH
33899: LD_VAR 0 2
33903: PPUSH
33904: CALL_OW 251
33908: ST_TO_ADDR
// for i = 0 to 5 do
33909: LD_ADDR_VAR 0 4
33913: PUSH
33914: DOUBLE
33915: LD_INT 0
33917: DEC
33918: ST_TO_ADDR
33919: LD_INT 5
33921: PUSH
33922: FOR_TO
33923: IFFALSE 34035
// begin _x := ShiftX ( x , i , 3 ) ;
33925: LD_ADDR_VAR 0 7
33929: PUSH
33930: LD_VAR 0 5
33934: PPUSH
33935: LD_VAR 0 4
33939: PPUSH
33940: LD_INT 3
33942: PPUSH
33943: CALL_OW 272
33947: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33948: LD_ADDR_VAR 0 8
33952: PUSH
33953: LD_VAR 0 6
33957: PPUSH
33958: LD_VAR 0 4
33962: PPUSH
33963: LD_INT 3
33965: PPUSH
33966: CALL_OW 273
33970: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33971: LD_VAR 0 7
33975: PPUSH
33976: LD_VAR 0 8
33980: PPUSH
33981: CALL_OW 488
33985: NOT
33986: IFFALSE 33990
// continue ;
33988: GO 33922
// if HexInfo ( _x , _y ) = 0 then
33990: LD_VAR 0 7
33994: PPUSH
33995: LD_VAR 0 8
33999: PPUSH
34000: CALL_OW 428
34004: PUSH
34005: LD_INT 0
34007: EQUAL
34008: IFFALSE 34033
// begin ComMoveXY ( unit , _x , _y ) ;
34010: LD_VAR 0 1
34014: PPUSH
34015: LD_VAR 0 7
34019: PPUSH
34020: LD_VAR 0 8
34024: PPUSH
34025: CALL_OW 111
// exit ;
34029: POP
34030: POP
34031: GO 34037
// end ; end ;
34033: GO 33922
34035: POP
34036: POP
// end ;
34037: LD_VAR 0 3
34041: RET
// export function ScanBase ( side , base_area ) ; begin
34042: LD_INT 0
34044: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34045: LD_ADDR_VAR 0 3
34049: PUSH
34050: LD_VAR 0 2
34054: PPUSH
34055: LD_INT 81
34057: PUSH
34058: LD_VAR 0 1
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PPUSH
34067: CALL_OW 70
34071: ST_TO_ADDR
// end ;
34072: LD_VAR 0 3
34076: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34077: LD_INT 0
34079: PPUSH
34080: PPUSH
34081: PPUSH
34082: PPUSH
// result := false ;
34083: LD_ADDR_VAR 0 2
34087: PUSH
34088: LD_INT 0
34090: ST_TO_ADDR
// side := GetSide ( unit ) ;
34091: LD_ADDR_VAR 0 3
34095: PUSH
34096: LD_VAR 0 1
34100: PPUSH
34101: CALL_OW 255
34105: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34106: LD_ADDR_VAR 0 4
34110: PUSH
34111: LD_VAR 0 1
34115: PPUSH
34116: CALL_OW 248
34120: ST_TO_ADDR
// case nat of 1 :
34121: LD_VAR 0 4
34125: PUSH
34126: LD_INT 1
34128: DOUBLE
34129: EQUAL
34130: IFTRUE 34134
34132: GO 34145
34134: POP
// tech := tech_lassight ; 2 :
34135: LD_ADDR_VAR 0 5
34139: PUSH
34140: LD_INT 12
34142: ST_TO_ADDR
34143: GO 34184
34145: LD_INT 2
34147: DOUBLE
34148: EQUAL
34149: IFTRUE 34153
34151: GO 34164
34153: POP
// tech := tech_mortar ; 3 :
34154: LD_ADDR_VAR 0 5
34158: PUSH
34159: LD_INT 41
34161: ST_TO_ADDR
34162: GO 34184
34164: LD_INT 3
34166: DOUBLE
34167: EQUAL
34168: IFTRUE 34172
34170: GO 34183
34172: POP
// tech := tech_bazooka ; end ;
34173: LD_ADDR_VAR 0 5
34177: PUSH
34178: LD_INT 44
34180: ST_TO_ADDR
34181: GO 34184
34183: POP
// if Researched ( side , tech ) then
34184: LD_VAR 0 3
34188: PPUSH
34189: LD_VAR 0 5
34193: PPUSH
34194: CALL_OW 325
34198: IFFALSE 34225
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34200: LD_ADDR_VAR 0 2
34204: PUSH
34205: LD_INT 5
34207: PUSH
34208: LD_INT 8
34210: PUSH
34211: LD_INT 9
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: LIST
34218: PUSH
34219: LD_VAR 0 4
34223: ARRAY
34224: ST_TO_ADDR
// end ;
34225: LD_VAR 0 2
34229: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34230: LD_INT 0
34232: PPUSH
34233: PPUSH
34234: PPUSH
// if not mines then
34235: LD_VAR 0 2
34239: NOT
34240: IFFALSE 34244
// exit ;
34242: GO 34388
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34244: LD_ADDR_VAR 0 5
34248: PUSH
34249: LD_INT 81
34251: PUSH
34252: LD_VAR 0 1
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 3
34263: PUSH
34264: LD_INT 21
34266: PUSH
34267: LD_INT 3
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PPUSH
34282: CALL_OW 69
34286: ST_TO_ADDR
// for i in mines do
34287: LD_ADDR_VAR 0 4
34291: PUSH
34292: LD_VAR 0 2
34296: PUSH
34297: FOR_IN
34298: IFFALSE 34386
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34300: LD_VAR 0 4
34304: PUSH
34305: LD_INT 1
34307: ARRAY
34308: PPUSH
34309: LD_VAR 0 4
34313: PUSH
34314: LD_INT 2
34316: ARRAY
34317: PPUSH
34318: CALL_OW 458
34322: NOT
34323: IFFALSE 34327
// continue ;
34325: GO 34297
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34327: LD_VAR 0 4
34331: PUSH
34332: LD_INT 1
34334: ARRAY
34335: PPUSH
34336: LD_VAR 0 4
34340: PUSH
34341: LD_INT 2
34343: ARRAY
34344: PPUSH
34345: CALL_OW 428
34349: PUSH
34350: LD_VAR 0 5
34354: IN
34355: IFFALSE 34384
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34357: LD_VAR 0 4
34361: PUSH
34362: LD_INT 1
34364: ARRAY
34365: PPUSH
34366: LD_VAR 0 4
34370: PUSH
34371: LD_INT 2
34373: ARRAY
34374: PPUSH
34375: LD_VAR 0 1
34379: PPUSH
34380: CALL_OW 456
// end ;
34384: GO 34297
34386: POP
34387: POP
// end ;
34388: LD_VAR 0 3
34392: RET
// export function Count ( array ) ; var i ; begin
34393: LD_INT 0
34395: PPUSH
34396: PPUSH
// result := 0 ;
34397: LD_ADDR_VAR 0 2
34401: PUSH
34402: LD_INT 0
34404: ST_TO_ADDR
// for i in array do
34405: LD_ADDR_VAR 0 3
34409: PUSH
34410: LD_VAR 0 1
34414: PUSH
34415: FOR_IN
34416: IFFALSE 34440
// if i then
34418: LD_VAR 0 3
34422: IFFALSE 34438
// result := result + 1 ;
34424: LD_ADDR_VAR 0 2
34428: PUSH
34429: LD_VAR 0 2
34433: PUSH
34434: LD_INT 1
34436: PLUS
34437: ST_TO_ADDR
34438: GO 34415
34440: POP
34441: POP
// end ;
34442: LD_VAR 0 2
34446: RET
// export function IsEmpty ( building ) ; begin
34447: LD_INT 0
34449: PPUSH
// if not building then
34450: LD_VAR 0 1
34454: NOT
34455: IFFALSE 34459
// exit ;
34457: GO 34502
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34459: LD_ADDR_VAR 0 2
34463: PUSH
34464: LD_VAR 0 1
34468: PUSH
34469: LD_INT 22
34471: PUSH
34472: LD_VAR 0 1
34476: PPUSH
34477: CALL_OW 255
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 58
34488: PUSH
34489: EMPTY
34490: LIST
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PPUSH
34496: CALL_OW 69
34500: IN
34501: ST_TO_ADDR
// end ;
34502: LD_VAR 0 2
34506: RET
// export function IsNotFull ( building ) ; begin
34507: LD_INT 0
34509: PPUSH
// if not building then
34510: LD_VAR 0 1
34514: NOT
34515: IFFALSE 34519
// exit ;
34517: GO 34538
// result := UnitsInside ( building ) < 6 ;
34519: LD_ADDR_VAR 0 2
34523: PUSH
34524: LD_VAR 0 1
34528: PPUSH
34529: CALL_OW 313
34533: PUSH
34534: LD_INT 6
34536: LESS
34537: ST_TO_ADDR
// end ;
34538: LD_VAR 0 2
34542: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34543: LD_INT 0
34545: PPUSH
34546: PPUSH
34547: PPUSH
34548: PPUSH
// tmp := [ ] ;
34549: LD_ADDR_VAR 0 3
34553: PUSH
34554: EMPTY
34555: ST_TO_ADDR
// list := [ ] ;
34556: LD_ADDR_VAR 0 5
34560: PUSH
34561: EMPTY
34562: ST_TO_ADDR
// for i = 16 to 25 do
34563: LD_ADDR_VAR 0 4
34567: PUSH
34568: DOUBLE
34569: LD_INT 16
34571: DEC
34572: ST_TO_ADDR
34573: LD_INT 25
34575: PUSH
34576: FOR_TO
34577: IFFALSE 34650
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34579: LD_ADDR_VAR 0 3
34583: PUSH
34584: LD_VAR 0 3
34588: PUSH
34589: LD_INT 22
34591: PUSH
34592: LD_VAR 0 1
34596: PPUSH
34597: CALL_OW 255
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 91
34608: PUSH
34609: LD_VAR 0 1
34613: PUSH
34614: LD_INT 6
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 30
34624: PUSH
34625: LD_VAR 0 4
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: LIST
34638: PUSH
34639: EMPTY
34640: LIST
34641: PPUSH
34642: CALL_OW 69
34646: ADD
34647: ST_TO_ADDR
34648: GO 34576
34650: POP
34651: POP
// for i = 1 to tmp do
34652: LD_ADDR_VAR 0 4
34656: PUSH
34657: DOUBLE
34658: LD_INT 1
34660: DEC
34661: ST_TO_ADDR
34662: LD_VAR 0 3
34666: PUSH
34667: FOR_TO
34668: IFFALSE 34756
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34670: LD_ADDR_VAR 0 5
34674: PUSH
34675: LD_VAR 0 5
34679: PUSH
34680: LD_VAR 0 3
34684: PUSH
34685: LD_VAR 0 4
34689: ARRAY
34690: PPUSH
34691: CALL_OW 266
34695: PUSH
34696: LD_VAR 0 3
34700: PUSH
34701: LD_VAR 0 4
34705: ARRAY
34706: PPUSH
34707: CALL_OW 250
34711: PUSH
34712: LD_VAR 0 3
34716: PUSH
34717: LD_VAR 0 4
34721: ARRAY
34722: PPUSH
34723: CALL_OW 251
34727: PUSH
34728: LD_VAR 0 3
34732: PUSH
34733: LD_VAR 0 4
34737: ARRAY
34738: PPUSH
34739: CALL_OW 254
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: PUSH
34750: EMPTY
34751: LIST
34752: ADD
34753: ST_TO_ADDR
34754: GO 34667
34756: POP
34757: POP
// result := list ;
34758: LD_ADDR_VAR 0 2
34762: PUSH
34763: LD_VAR 0 5
34767: ST_TO_ADDR
// end ;
34768: LD_VAR 0 2
34772: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34773: LD_INT 0
34775: PPUSH
34776: PPUSH
34777: PPUSH
34778: PPUSH
34779: PPUSH
34780: PPUSH
34781: PPUSH
// if not factory then
34782: LD_VAR 0 1
34786: NOT
34787: IFFALSE 34791
// exit ;
34789: GO 35384
// if control = control_apeman then
34791: LD_VAR 0 4
34795: PUSH
34796: LD_INT 5
34798: EQUAL
34799: IFFALSE 34908
// begin tmp := UnitsInside ( factory ) ;
34801: LD_ADDR_VAR 0 8
34805: PUSH
34806: LD_VAR 0 1
34810: PPUSH
34811: CALL_OW 313
34815: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34816: LD_VAR 0 8
34820: PPUSH
34821: LD_INT 25
34823: PUSH
34824: LD_INT 12
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PPUSH
34831: CALL_OW 72
34835: NOT
34836: IFFALSE 34846
// control := control_manual ;
34838: LD_ADDR_VAR 0 4
34842: PUSH
34843: LD_INT 1
34845: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34846: LD_ADDR_VAR 0 8
34850: PUSH
34851: LD_VAR 0 1
34855: PPUSH
34856: CALL 34543 0 1
34860: ST_TO_ADDR
// if tmp then
34861: LD_VAR 0 8
34865: IFFALSE 34908
// begin for i in tmp do
34867: LD_ADDR_VAR 0 7
34871: PUSH
34872: LD_VAR 0 8
34876: PUSH
34877: FOR_IN
34878: IFFALSE 34906
// if i [ 1 ] = b_ext_radio then
34880: LD_VAR 0 7
34884: PUSH
34885: LD_INT 1
34887: ARRAY
34888: PUSH
34889: LD_INT 22
34891: EQUAL
34892: IFFALSE 34904
// begin control := control_remote ;
34894: LD_ADDR_VAR 0 4
34898: PUSH
34899: LD_INT 2
34901: ST_TO_ADDR
// break ;
34902: GO 34906
// end ;
34904: GO 34877
34906: POP
34907: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34908: LD_VAR 0 1
34912: PPUSH
34913: LD_VAR 0 2
34917: PPUSH
34918: LD_VAR 0 3
34922: PPUSH
34923: LD_VAR 0 4
34927: PPUSH
34928: LD_VAR 0 5
34932: PPUSH
34933: CALL_OW 448
34937: IFFALSE 34972
// begin result := [ chassis , engine , control , weapon ] ;
34939: LD_ADDR_VAR 0 6
34943: PUSH
34944: LD_VAR 0 2
34948: PUSH
34949: LD_VAR 0 3
34953: PUSH
34954: LD_VAR 0 4
34958: PUSH
34959: LD_VAR 0 5
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: ST_TO_ADDR
// exit ;
34970: GO 35384
// end ; _chassis := AvailableChassisList ( factory ) ;
34972: LD_ADDR_VAR 0 9
34976: PUSH
34977: LD_VAR 0 1
34981: PPUSH
34982: CALL_OW 475
34986: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34987: LD_ADDR_VAR 0 11
34991: PUSH
34992: LD_VAR 0 1
34996: PPUSH
34997: CALL_OW 476
35001: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35002: LD_ADDR_VAR 0 12
35006: PUSH
35007: LD_VAR 0 1
35011: PPUSH
35012: CALL_OW 477
35016: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35017: LD_ADDR_VAR 0 10
35021: PUSH
35022: LD_VAR 0 1
35026: PPUSH
35027: CALL_OW 478
35031: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35032: LD_VAR 0 9
35036: NOT
35037: PUSH
35038: LD_VAR 0 11
35042: NOT
35043: OR
35044: PUSH
35045: LD_VAR 0 12
35049: NOT
35050: OR
35051: PUSH
35052: LD_VAR 0 10
35056: NOT
35057: OR
35058: IFFALSE 35093
// begin result := [ chassis , engine , control , weapon ] ;
35060: LD_ADDR_VAR 0 6
35064: PUSH
35065: LD_VAR 0 2
35069: PUSH
35070: LD_VAR 0 3
35074: PUSH
35075: LD_VAR 0 4
35079: PUSH
35080: LD_VAR 0 5
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: ST_TO_ADDR
// exit ;
35091: GO 35384
// end ; if not chassis in _chassis then
35093: LD_VAR 0 2
35097: PUSH
35098: LD_VAR 0 9
35102: IN
35103: NOT
35104: IFFALSE 35130
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35106: LD_ADDR_VAR 0 2
35110: PUSH
35111: LD_VAR 0 9
35115: PUSH
35116: LD_INT 1
35118: PPUSH
35119: LD_VAR 0 9
35123: PPUSH
35124: CALL_OW 12
35128: ARRAY
35129: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35130: LD_VAR 0 2
35134: PPUSH
35135: LD_VAR 0 3
35139: PPUSH
35140: CALL 35389 0 2
35144: NOT
35145: IFFALSE 35204
// repeat engine := _engine [ 1 ] ;
35147: LD_ADDR_VAR 0 3
35151: PUSH
35152: LD_VAR 0 11
35156: PUSH
35157: LD_INT 1
35159: ARRAY
35160: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35161: LD_ADDR_VAR 0 11
35165: PUSH
35166: LD_VAR 0 11
35170: PPUSH
35171: LD_INT 1
35173: PPUSH
35174: CALL_OW 3
35178: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35179: LD_VAR 0 2
35183: PPUSH
35184: LD_VAR 0 3
35188: PPUSH
35189: CALL 35389 0 2
35193: PUSH
35194: LD_VAR 0 11
35198: PUSH
35199: EMPTY
35200: EQUAL
35201: OR
35202: IFFALSE 35147
// if not control in _control then
35204: LD_VAR 0 4
35208: PUSH
35209: LD_VAR 0 12
35213: IN
35214: NOT
35215: IFFALSE 35241
// control := _control [ rand ( 1 , _control ) ] ;
35217: LD_ADDR_VAR 0 4
35221: PUSH
35222: LD_VAR 0 12
35226: PUSH
35227: LD_INT 1
35229: PPUSH
35230: LD_VAR 0 12
35234: PPUSH
35235: CALL_OW 12
35239: ARRAY
35240: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35241: LD_VAR 0 2
35245: PPUSH
35246: LD_VAR 0 5
35250: PPUSH
35251: CALL 35609 0 2
35255: NOT
35256: IFFALSE 35315
// repeat weapon := _weapon [ 1 ] ;
35258: LD_ADDR_VAR 0 5
35262: PUSH
35263: LD_VAR 0 10
35267: PUSH
35268: LD_INT 1
35270: ARRAY
35271: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35272: LD_ADDR_VAR 0 10
35276: PUSH
35277: LD_VAR 0 10
35281: PPUSH
35282: LD_INT 1
35284: PPUSH
35285: CALL_OW 3
35289: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35290: LD_VAR 0 2
35294: PPUSH
35295: LD_VAR 0 5
35299: PPUSH
35300: CALL 35609 0 2
35304: PUSH
35305: LD_VAR 0 10
35309: PUSH
35310: EMPTY
35311: EQUAL
35312: OR
35313: IFFALSE 35258
// result := [ ] ;
35315: LD_ADDR_VAR 0 6
35319: PUSH
35320: EMPTY
35321: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35322: LD_VAR 0 1
35326: PPUSH
35327: LD_VAR 0 2
35331: PPUSH
35332: LD_VAR 0 3
35336: PPUSH
35337: LD_VAR 0 4
35341: PPUSH
35342: LD_VAR 0 5
35346: PPUSH
35347: CALL_OW 448
35351: IFFALSE 35384
// result := [ chassis , engine , control , weapon ] ;
35353: LD_ADDR_VAR 0 6
35357: PUSH
35358: LD_VAR 0 2
35362: PUSH
35363: LD_VAR 0 3
35367: PUSH
35368: LD_VAR 0 4
35372: PUSH
35373: LD_VAR 0 5
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: ST_TO_ADDR
// end ;
35384: LD_VAR 0 6
35388: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35389: LD_INT 0
35391: PPUSH
// if not chassis or not engine then
35392: LD_VAR 0 1
35396: NOT
35397: PUSH
35398: LD_VAR 0 2
35402: NOT
35403: OR
35404: IFFALSE 35408
// exit ;
35406: GO 35604
// case engine of engine_solar :
35408: LD_VAR 0 2
35412: PUSH
35413: LD_INT 2
35415: DOUBLE
35416: EQUAL
35417: IFTRUE 35421
35419: GO 35459
35421: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35422: LD_ADDR_VAR 0 3
35426: PUSH
35427: LD_INT 11
35429: PUSH
35430: LD_INT 12
35432: PUSH
35433: LD_INT 13
35435: PUSH
35436: LD_INT 14
35438: PUSH
35439: LD_INT 1
35441: PUSH
35442: LD_INT 2
35444: PUSH
35445: LD_INT 3
35447: PUSH
35448: EMPTY
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: ST_TO_ADDR
35457: GO 35588
35459: LD_INT 1
35461: DOUBLE
35462: EQUAL
35463: IFTRUE 35467
35465: GO 35529
35467: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35468: LD_ADDR_VAR 0 3
35472: PUSH
35473: LD_INT 11
35475: PUSH
35476: LD_INT 12
35478: PUSH
35479: LD_INT 13
35481: PUSH
35482: LD_INT 14
35484: PUSH
35485: LD_INT 1
35487: PUSH
35488: LD_INT 2
35490: PUSH
35491: LD_INT 3
35493: PUSH
35494: LD_INT 4
35496: PUSH
35497: LD_INT 5
35499: PUSH
35500: LD_INT 21
35502: PUSH
35503: LD_INT 23
35505: PUSH
35506: LD_INT 22
35508: PUSH
35509: LD_INT 24
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: ST_TO_ADDR
35527: GO 35588
35529: LD_INT 3
35531: DOUBLE
35532: EQUAL
35533: IFTRUE 35537
35535: GO 35587
35537: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35538: LD_ADDR_VAR 0 3
35542: PUSH
35543: LD_INT 13
35545: PUSH
35546: LD_INT 14
35548: PUSH
35549: LD_INT 2
35551: PUSH
35552: LD_INT 3
35554: PUSH
35555: LD_INT 4
35557: PUSH
35558: LD_INT 5
35560: PUSH
35561: LD_INT 21
35563: PUSH
35564: LD_INT 22
35566: PUSH
35567: LD_INT 23
35569: PUSH
35570: LD_INT 24
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: ST_TO_ADDR
35585: GO 35588
35587: POP
// result := ( chassis in result ) ;
35588: LD_ADDR_VAR 0 3
35592: PUSH
35593: LD_VAR 0 1
35597: PUSH
35598: LD_VAR 0 3
35602: IN
35603: ST_TO_ADDR
// end ;
35604: LD_VAR 0 3
35608: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35609: LD_INT 0
35611: PPUSH
// if not chassis or not weapon then
35612: LD_VAR 0 1
35616: NOT
35617: PUSH
35618: LD_VAR 0 2
35622: NOT
35623: OR
35624: IFFALSE 35628
// exit ;
35626: GO 36654
// case weapon of us_machine_gun :
35628: LD_VAR 0 2
35632: PUSH
35633: LD_INT 2
35635: DOUBLE
35636: EQUAL
35637: IFTRUE 35641
35639: GO 35671
35641: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35642: LD_ADDR_VAR 0 3
35646: PUSH
35647: LD_INT 1
35649: PUSH
35650: LD_INT 2
35652: PUSH
35653: LD_INT 3
35655: PUSH
35656: LD_INT 4
35658: PUSH
35659: LD_INT 5
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: ST_TO_ADDR
35669: GO 36638
35671: LD_INT 3
35673: DOUBLE
35674: EQUAL
35675: IFTRUE 35679
35677: GO 35709
35679: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35680: LD_ADDR_VAR 0 3
35684: PUSH
35685: LD_INT 1
35687: PUSH
35688: LD_INT 2
35690: PUSH
35691: LD_INT 3
35693: PUSH
35694: LD_INT 4
35696: PUSH
35697: LD_INT 5
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: ST_TO_ADDR
35707: GO 36638
35709: LD_INT 11
35711: DOUBLE
35712: EQUAL
35713: IFTRUE 35717
35715: GO 35747
35717: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35718: LD_ADDR_VAR 0 3
35722: PUSH
35723: LD_INT 1
35725: PUSH
35726: LD_INT 2
35728: PUSH
35729: LD_INT 3
35731: PUSH
35732: LD_INT 4
35734: PUSH
35735: LD_INT 5
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: LIST
35742: LIST
35743: LIST
35744: ST_TO_ADDR
35745: GO 36638
35747: LD_INT 4
35749: DOUBLE
35750: EQUAL
35751: IFTRUE 35755
35753: GO 35781
35755: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35756: LD_ADDR_VAR 0 3
35760: PUSH
35761: LD_INT 2
35763: PUSH
35764: LD_INT 3
35766: PUSH
35767: LD_INT 4
35769: PUSH
35770: LD_INT 5
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: ST_TO_ADDR
35779: GO 36638
35781: LD_INT 5
35783: DOUBLE
35784: EQUAL
35785: IFTRUE 35789
35787: GO 35815
35789: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35790: LD_ADDR_VAR 0 3
35794: PUSH
35795: LD_INT 2
35797: PUSH
35798: LD_INT 3
35800: PUSH
35801: LD_INT 4
35803: PUSH
35804: LD_INT 5
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: ST_TO_ADDR
35813: GO 36638
35815: LD_INT 9
35817: DOUBLE
35818: EQUAL
35819: IFTRUE 35823
35821: GO 35849
35823: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35824: LD_ADDR_VAR 0 3
35828: PUSH
35829: LD_INT 2
35831: PUSH
35832: LD_INT 3
35834: PUSH
35835: LD_INT 4
35837: PUSH
35838: LD_INT 5
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: ST_TO_ADDR
35847: GO 36638
35849: LD_INT 7
35851: DOUBLE
35852: EQUAL
35853: IFTRUE 35857
35855: GO 35883
35857: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35858: LD_ADDR_VAR 0 3
35862: PUSH
35863: LD_INT 2
35865: PUSH
35866: LD_INT 3
35868: PUSH
35869: LD_INT 4
35871: PUSH
35872: LD_INT 5
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: ST_TO_ADDR
35881: GO 36638
35883: LD_INT 12
35885: DOUBLE
35886: EQUAL
35887: IFTRUE 35891
35889: GO 35917
35891: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35892: LD_ADDR_VAR 0 3
35896: PUSH
35897: LD_INT 2
35899: PUSH
35900: LD_INT 3
35902: PUSH
35903: LD_INT 4
35905: PUSH
35906: LD_INT 5
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: ST_TO_ADDR
35915: GO 36638
35917: LD_INT 13
35919: DOUBLE
35920: EQUAL
35921: IFTRUE 35925
35923: GO 35951
35925: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35926: LD_ADDR_VAR 0 3
35930: PUSH
35931: LD_INT 2
35933: PUSH
35934: LD_INT 3
35936: PUSH
35937: LD_INT 4
35939: PUSH
35940: LD_INT 5
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: ST_TO_ADDR
35949: GO 36638
35951: LD_INT 14
35953: DOUBLE
35954: EQUAL
35955: IFTRUE 35959
35957: GO 35977
35959: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35960: LD_ADDR_VAR 0 3
35964: PUSH
35965: LD_INT 4
35967: PUSH
35968: LD_INT 5
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: ST_TO_ADDR
35975: GO 36638
35977: LD_INT 6
35979: DOUBLE
35980: EQUAL
35981: IFTRUE 35985
35983: GO 36003
35985: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35986: LD_ADDR_VAR 0 3
35990: PUSH
35991: LD_INT 4
35993: PUSH
35994: LD_INT 5
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: ST_TO_ADDR
36001: GO 36638
36003: LD_INT 10
36005: DOUBLE
36006: EQUAL
36007: IFTRUE 36011
36009: GO 36029
36011: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36012: LD_ADDR_VAR 0 3
36016: PUSH
36017: LD_INT 4
36019: PUSH
36020: LD_INT 5
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: ST_TO_ADDR
36027: GO 36638
36029: LD_INT 22
36031: DOUBLE
36032: EQUAL
36033: IFTRUE 36037
36035: GO 36063
36037: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36038: LD_ADDR_VAR 0 3
36042: PUSH
36043: LD_INT 11
36045: PUSH
36046: LD_INT 12
36048: PUSH
36049: LD_INT 13
36051: PUSH
36052: LD_INT 14
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: ST_TO_ADDR
36061: GO 36638
36063: LD_INT 23
36065: DOUBLE
36066: EQUAL
36067: IFTRUE 36071
36069: GO 36097
36071: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36072: LD_ADDR_VAR 0 3
36076: PUSH
36077: LD_INT 11
36079: PUSH
36080: LD_INT 12
36082: PUSH
36083: LD_INT 13
36085: PUSH
36086: LD_INT 14
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: ST_TO_ADDR
36095: GO 36638
36097: LD_INT 24
36099: DOUBLE
36100: EQUAL
36101: IFTRUE 36105
36103: GO 36131
36105: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36106: LD_ADDR_VAR 0 3
36110: PUSH
36111: LD_INT 11
36113: PUSH
36114: LD_INT 12
36116: PUSH
36117: LD_INT 13
36119: PUSH
36120: LD_INT 14
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: ST_TO_ADDR
36129: GO 36638
36131: LD_INT 30
36133: DOUBLE
36134: EQUAL
36135: IFTRUE 36139
36137: GO 36165
36139: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36140: LD_ADDR_VAR 0 3
36144: PUSH
36145: LD_INT 11
36147: PUSH
36148: LD_INT 12
36150: PUSH
36151: LD_INT 13
36153: PUSH
36154: LD_INT 14
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: ST_TO_ADDR
36163: GO 36638
36165: LD_INT 25
36167: DOUBLE
36168: EQUAL
36169: IFTRUE 36173
36171: GO 36191
36173: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36174: LD_ADDR_VAR 0 3
36178: PUSH
36179: LD_INT 13
36181: PUSH
36182: LD_INT 14
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: ST_TO_ADDR
36189: GO 36638
36191: LD_INT 27
36193: DOUBLE
36194: EQUAL
36195: IFTRUE 36199
36197: GO 36217
36199: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36200: LD_ADDR_VAR 0 3
36204: PUSH
36205: LD_INT 13
36207: PUSH
36208: LD_INT 14
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: ST_TO_ADDR
36215: GO 36638
36217: LD_INT 28
36219: DOUBLE
36220: EQUAL
36221: IFTRUE 36225
36223: GO 36243
36225: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36226: LD_ADDR_VAR 0 3
36230: PUSH
36231: LD_INT 13
36233: PUSH
36234: LD_INT 14
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: ST_TO_ADDR
36241: GO 36638
36243: LD_INT 29
36245: DOUBLE
36246: EQUAL
36247: IFTRUE 36251
36249: GO 36269
36251: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36252: LD_ADDR_VAR 0 3
36256: PUSH
36257: LD_INT 13
36259: PUSH
36260: LD_INT 14
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: ST_TO_ADDR
36267: GO 36638
36269: LD_INT 31
36271: DOUBLE
36272: EQUAL
36273: IFTRUE 36277
36275: GO 36295
36277: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36278: LD_ADDR_VAR 0 3
36282: PUSH
36283: LD_INT 13
36285: PUSH
36286: LD_INT 14
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: ST_TO_ADDR
36293: GO 36638
36295: LD_INT 26
36297: DOUBLE
36298: EQUAL
36299: IFTRUE 36303
36301: GO 36321
36303: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36304: LD_ADDR_VAR 0 3
36308: PUSH
36309: LD_INT 13
36311: PUSH
36312: LD_INT 14
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: ST_TO_ADDR
36319: GO 36638
36321: LD_INT 42
36323: DOUBLE
36324: EQUAL
36325: IFTRUE 36329
36327: GO 36355
36329: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36330: LD_ADDR_VAR 0 3
36334: PUSH
36335: LD_INT 21
36337: PUSH
36338: LD_INT 22
36340: PUSH
36341: LD_INT 23
36343: PUSH
36344: LD_INT 24
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: ST_TO_ADDR
36353: GO 36638
36355: LD_INT 43
36357: DOUBLE
36358: EQUAL
36359: IFTRUE 36363
36361: GO 36389
36363: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36364: LD_ADDR_VAR 0 3
36368: PUSH
36369: LD_INT 21
36371: PUSH
36372: LD_INT 22
36374: PUSH
36375: LD_INT 23
36377: PUSH
36378: LD_INT 24
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: ST_TO_ADDR
36387: GO 36638
36389: LD_INT 44
36391: DOUBLE
36392: EQUAL
36393: IFTRUE 36397
36395: GO 36423
36397: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36398: LD_ADDR_VAR 0 3
36402: PUSH
36403: LD_INT 21
36405: PUSH
36406: LD_INT 22
36408: PUSH
36409: LD_INT 23
36411: PUSH
36412: LD_INT 24
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: ST_TO_ADDR
36421: GO 36638
36423: LD_INT 45
36425: DOUBLE
36426: EQUAL
36427: IFTRUE 36431
36429: GO 36457
36431: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36432: LD_ADDR_VAR 0 3
36436: PUSH
36437: LD_INT 21
36439: PUSH
36440: LD_INT 22
36442: PUSH
36443: LD_INT 23
36445: PUSH
36446: LD_INT 24
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: ST_TO_ADDR
36455: GO 36638
36457: LD_INT 49
36459: DOUBLE
36460: EQUAL
36461: IFTRUE 36465
36463: GO 36491
36465: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36466: LD_ADDR_VAR 0 3
36470: PUSH
36471: LD_INT 21
36473: PUSH
36474: LD_INT 22
36476: PUSH
36477: LD_INT 23
36479: PUSH
36480: LD_INT 24
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: ST_TO_ADDR
36489: GO 36638
36491: LD_INT 51
36493: DOUBLE
36494: EQUAL
36495: IFTRUE 36499
36497: GO 36525
36499: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36500: LD_ADDR_VAR 0 3
36504: PUSH
36505: LD_INT 21
36507: PUSH
36508: LD_INT 22
36510: PUSH
36511: LD_INT 23
36513: PUSH
36514: LD_INT 24
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: ST_TO_ADDR
36523: GO 36638
36525: LD_INT 52
36527: DOUBLE
36528: EQUAL
36529: IFTRUE 36533
36531: GO 36559
36533: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36534: LD_ADDR_VAR 0 3
36538: PUSH
36539: LD_INT 21
36541: PUSH
36542: LD_INT 22
36544: PUSH
36545: LD_INT 23
36547: PUSH
36548: LD_INT 24
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: ST_TO_ADDR
36557: GO 36638
36559: LD_INT 53
36561: DOUBLE
36562: EQUAL
36563: IFTRUE 36567
36565: GO 36585
36567: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36568: LD_ADDR_VAR 0 3
36572: PUSH
36573: LD_INT 23
36575: PUSH
36576: LD_INT 24
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: ST_TO_ADDR
36583: GO 36638
36585: LD_INT 46
36587: DOUBLE
36588: EQUAL
36589: IFTRUE 36593
36591: GO 36611
36593: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36594: LD_ADDR_VAR 0 3
36598: PUSH
36599: LD_INT 23
36601: PUSH
36602: LD_INT 24
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: ST_TO_ADDR
36609: GO 36638
36611: LD_INT 47
36613: DOUBLE
36614: EQUAL
36615: IFTRUE 36619
36617: GO 36637
36619: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36620: LD_ADDR_VAR 0 3
36624: PUSH
36625: LD_INT 23
36627: PUSH
36628: LD_INT 24
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: ST_TO_ADDR
36635: GO 36638
36637: POP
// result := ( chassis in result ) ;
36638: LD_ADDR_VAR 0 3
36642: PUSH
36643: LD_VAR 0 1
36647: PUSH
36648: LD_VAR 0 3
36652: IN
36653: ST_TO_ADDR
// end ;
36654: LD_VAR 0 3
36658: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36659: LD_INT 0
36661: PPUSH
36662: PPUSH
36663: PPUSH
36664: PPUSH
36665: PPUSH
36666: PPUSH
36667: PPUSH
// result := array ;
36668: LD_ADDR_VAR 0 5
36672: PUSH
36673: LD_VAR 0 1
36677: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36678: LD_VAR 0 1
36682: NOT
36683: PUSH
36684: LD_VAR 0 2
36688: NOT
36689: OR
36690: PUSH
36691: LD_VAR 0 3
36695: NOT
36696: OR
36697: PUSH
36698: LD_VAR 0 2
36702: PUSH
36703: LD_VAR 0 1
36707: GREATER
36708: OR
36709: PUSH
36710: LD_VAR 0 3
36714: PUSH
36715: LD_VAR 0 1
36719: GREATER
36720: OR
36721: IFFALSE 36725
// exit ;
36723: GO 37021
// if direction then
36725: LD_VAR 0 4
36729: IFFALSE 36793
// begin d := 1 ;
36731: LD_ADDR_VAR 0 9
36735: PUSH
36736: LD_INT 1
36738: ST_TO_ADDR
// if i_from > i_to then
36739: LD_VAR 0 2
36743: PUSH
36744: LD_VAR 0 3
36748: GREATER
36749: IFFALSE 36775
// length := ( array - i_from ) + i_to else
36751: LD_ADDR_VAR 0 11
36755: PUSH
36756: LD_VAR 0 1
36760: PUSH
36761: LD_VAR 0 2
36765: MINUS
36766: PUSH
36767: LD_VAR 0 3
36771: PLUS
36772: ST_TO_ADDR
36773: GO 36791
// length := i_to - i_from ;
36775: LD_ADDR_VAR 0 11
36779: PUSH
36780: LD_VAR 0 3
36784: PUSH
36785: LD_VAR 0 2
36789: MINUS
36790: ST_TO_ADDR
// end else
36791: GO 36854
// begin d := - 1 ;
36793: LD_ADDR_VAR 0 9
36797: PUSH
36798: LD_INT 1
36800: NEG
36801: ST_TO_ADDR
// if i_from > i_to then
36802: LD_VAR 0 2
36806: PUSH
36807: LD_VAR 0 3
36811: GREATER
36812: IFFALSE 36832
// length := i_from - i_to else
36814: LD_ADDR_VAR 0 11
36818: PUSH
36819: LD_VAR 0 2
36823: PUSH
36824: LD_VAR 0 3
36828: MINUS
36829: ST_TO_ADDR
36830: GO 36854
// length := ( array - i_to ) + i_from ;
36832: LD_ADDR_VAR 0 11
36836: PUSH
36837: LD_VAR 0 1
36841: PUSH
36842: LD_VAR 0 3
36846: MINUS
36847: PUSH
36848: LD_VAR 0 2
36852: PLUS
36853: ST_TO_ADDR
// end ; if not length then
36854: LD_VAR 0 11
36858: NOT
36859: IFFALSE 36863
// exit ;
36861: GO 37021
// tmp := array ;
36863: LD_ADDR_VAR 0 10
36867: PUSH
36868: LD_VAR 0 1
36872: ST_TO_ADDR
// for i = 1 to length do
36873: LD_ADDR_VAR 0 6
36877: PUSH
36878: DOUBLE
36879: LD_INT 1
36881: DEC
36882: ST_TO_ADDR
36883: LD_VAR 0 11
36887: PUSH
36888: FOR_TO
36889: IFFALSE 37009
// begin for j = 1 to array do
36891: LD_ADDR_VAR 0 7
36895: PUSH
36896: DOUBLE
36897: LD_INT 1
36899: DEC
36900: ST_TO_ADDR
36901: LD_VAR 0 1
36905: PUSH
36906: FOR_TO
36907: IFFALSE 36995
// begin k := j + d ;
36909: LD_ADDR_VAR 0 8
36913: PUSH
36914: LD_VAR 0 7
36918: PUSH
36919: LD_VAR 0 9
36923: PLUS
36924: ST_TO_ADDR
// if k > array then
36925: LD_VAR 0 8
36929: PUSH
36930: LD_VAR 0 1
36934: GREATER
36935: IFFALSE 36945
// k := 1 ;
36937: LD_ADDR_VAR 0 8
36941: PUSH
36942: LD_INT 1
36944: ST_TO_ADDR
// if not k then
36945: LD_VAR 0 8
36949: NOT
36950: IFFALSE 36962
// k := array ;
36952: LD_ADDR_VAR 0 8
36956: PUSH
36957: LD_VAR 0 1
36961: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36962: LD_ADDR_VAR 0 10
36966: PUSH
36967: LD_VAR 0 10
36971: PPUSH
36972: LD_VAR 0 8
36976: PPUSH
36977: LD_VAR 0 1
36981: PUSH
36982: LD_VAR 0 7
36986: ARRAY
36987: PPUSH
36988: CALL_OW 1
36992: ST_TO_ADDR
// end ;
36993: GO 36906
36995: POP
36996: POP
// array := tmp ;
36997: LD_ADDR_VAR 0 1
37001: PUSH
37002: LD_VAR 0 10
37006: ST_TO_ADDR
// end ;
37007: GO 36888
37009: POP
37010: POP
// result := array ;
37011: LD_ADDR_VAR 0 5
37015: PUSH
37016: LD_VAR 0 1
37020: ST_TO_ADDR
// end ;
37021: LD_VAR 0 5
37025: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37026: LD_INT 0
37028: PPUSH
37029: PPUSH
// result := 0 ;
37030: LD_ADDR_VAR 0 3
37034: PUSH
37035: LD_INT 0
37037: ST_TO_ADDR
// if not array or not value in array then
37038: LD_VAR 0 1
37042: NOT
37043: PUSH
37044: LD_VAR 0 2
37048: PUSH
37049: LD_VAR 0 1
37053: IN
37054: NOT
37055: OR
37056: IFFALSE 37060
// exit ;
37058: GO 37114
// for i = 1 to array do
37060: LD_ADDR_VAR 0 4
37064: PUSH
37065: DOUBLE
37066: LD_INT 1
37068: DEC
37069: ST_TO_ADDR
37070: LD_VAR 0 1
37074: PUSH
37075: FOR_TO
37076: IFFALSE 37112
// if value = array [ i ] then
37078: LD_VAR 0 2
37082: PUSH
37083: LD_VAR 0 1
37087: PUSH
37088: LD_VAR 0 4
37092: ARRAY
37093: EQUAL
37094: IFFALSE 37110
// begin result := i ;
37096: LD_ADDR_VAR 0 3
37100: PUSH
37101: LD_VAR 0 4
37105: ST_TO_ADDR
// exit ;
37106: POP
37107: POP
37108: GO 37114
// end ;
37110: GO 37075
37112: POP
37113: POP
// end ;
37114: LD_VAR 0 3
37118: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37119: LD_INT 0
37121: PPUSH
// vc_chassis := chassis ;
37122: LD_ADDR_OWVAR 37
37126: PUSH
37127: LD_VAR 0 1
37131: ST_TO_ADDR
// vc_engine := engine ;
37132: LD_ADDR_OWVAR 39
37136: PUSH
37137: LD_VAR 0 2
37141: ST_TO_ADDR
// vc_control := control ;
37142: LD_ADDR_OWVAR 38
37146: PUSH
37147: LD_VAR 0 3
37151: ST_TO_ADDR
// vc_weapon := weapon ;
37152: LD_ADDR_OWVAR 40
37156: PUSH
37157: LD_VAR 0 4
37161: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37162: LD_ADDR_OWVAR 41
37166: PUSH
37167: LD_VAR 0 5
37171: ST_TO_ADDR
// end ;
37172: LD_VAR 0 6
37176: RET
// export function WantPlant ( unit ) ; var task ; begin
37177: LD_INT 0
37179: PPUSH
37180: PPUSH
// result := false ;
37181: LD_ADDR_VAR 0 2
37185: PUSH
37186: LD_INT 0
37188: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37189: LD_ADDR_VAR 0 3
37193: PUSH
37194: LD_VAR 0 1
37198: PPUSH
37199: CALL_OW 437
37203: ST_TO_ADDR
// if task then
37204: LD_VAR 0 3
37208: IFFALSE 37236
// if task [ 1 ] [ 1 ] = p then
37210: LD_VAR 0 3
37214: PUSH
37215: LD_INT 1
37217: ARRAY
37218: PUSH
37219: LD_INT 1
37221: ARRAY
37222: PUSH
37223: LD_STRING p
37225: EQUAL
37226: IFFALSE 37236
// result := true ;
37228: LD_ADDR_VAR 0 2
37232: PUSH
37233: LD_INT 1
37235: ST_TO_ADDR
// end ;
37236: LD_VAR 0 2
37240: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37241: LD_INT 0
37243: PPUSH
37244: PPUSH
37245: PPUSH
37246: PPUSH
// if pos < 1 then
37247: LD_VAR 0 2
37251: PUSH
37252: LD_INT 1
37254: LESS
37255: IFFALSE 37259
// exit ;
37257: GO 37562
// if pos = 1 then
37259: LD_VAR 0 2
37263: PUSH
37264: LD_INT 1
37266: EQUAL
37267: IFFALSE 37300
// result := Replace ( arr , pos [ 1 ] , value ) else
37269: LD_ADDR_VAR 0 4
37273: PUSH
37274: LD_VAR 0 1
37278: PPUSH
37279: LD_VAR 0 2
37283: PUSH
37284: LD_INT 1
37286: ARRAY
37287: PPUSH
37288: LD_VAR 0 3
37292: PPUSH
37293: CALL_OW 1
37297: ST_TO_ADDR
37298: GO 37562
// begin tmp := arr ;
37300: LD_ADDR_VAR 0 6
37304: PUSH
37305: LD_VAR 0 1
37309: ST_TO_ADDR
// s_arr := [ tmp ] ;
37310: LD_ADDR_VAR 0 7
37314: PUSH
37315: LD_VAR 0 6
37319: PUSH
37320: EMPTY
37321: LIST
37322: ST_TO_ADDR
// for i = 1 to pos - 1 do
37323: LD_ADDR_VAR 0 5
37327: PUSH
37328: DOUBLE
37329: LD_INT 1
37331: DEC
37332: ST_TO_ADDR
37333: LD_VAR 0 2
37337: PUSH
37338: LD_INT 1
37340: MINUS
37341: PUSH
37342: FOR_TO
37343: IFFALSE 37388
// begin tmp := tmp [ pos [ i ] ] ;
37345: LD_ADDR_VAR 0 6
37349: PUSH
37350: LD_VAR 0 6
37354: PUSH
37355: LD_VAR 0 2
37359: PUSH
37360: LD_VAR 0 5
37364: ARRAY
37365: ARRAY
37366: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37367: LD_ADDR_VAR 0 7
37371: PUSH
37372: LD_VAR 0 7
37376: PUSH
37377: LD_VAR 0 6
37381: PUSH
37382: EMPTY
37383: LIST
37384: ADD
37385: ST_TO_ADDR
// end ;
37386: GO 37342
37388: POP
37389: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37390: LD_ADDR_VAR 0 6
37394: PUSH
37395: LD_VAR 0 6
37399: PPUSH
37400: LD_VAR 0 2
37404: PUSH
37405: LD_VAR 0 2
37409: ARRAY
37410: PPUSH
37411: LD_VAR 0 3
37415: PPUSH
37416: CALL_OW 1
37420: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37421: LD_ADDR_VAR 0 7
37425: PUSH
37426: LD_VAR 0 7
37430: PPUSH
37431: LD_VAR 0 7
37435: PPUSH
37436: LD_VAR 0 6
37440: PPUSH
37441: CALL_OW 1
37445: ST_TO_ADDR
// for i = s_arr downto 2 do
37446: LD_ADDR_VAR 0 5
37450: PUSH
37451: DOUBLE
37452: LD_VAR 0 7
37456: INC
37457: ST_TO_ADDR
37458: LD_INT 2
37460: PUSH
37461: FOR_DOWNTO
37462: IFFALSE 37546
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37464: LD_ADDR_VAR 0 6
37468: PUSH
37469: LD_VAR 0 7
37473: PUSH
37474: LD_VAR 0 5
37478: PUSH
37479: LD_INT 1
37481: MINUS
37482: ARRAY
37483: PPUSH
37484: LD_VAR 0 2
37488: PUSH
37489: LD_VAR 0 5
37493: PUSH
37494: LD_INT 1
37496: MINUS
37497: ARRAY
37498: PPUSH
37499: LD_VAR 0 7
37503: PUSH
37504: LD_VAR 0 5
37508: ARRAY
37509: PPUSH
37510: CALL_OW 1
37514: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37515: LD_ADDR_VAR 0 7
37519: PUSH
37520: LD_VAR 0 7
37524: PPUSH
37525: LD_VAR 0 5
37529: PUSH
37530: LD_INT 1
37532: MINUS
37533: PPUSH
37534: LD_VAR 0 6
37538: PPUSH
37539: CALL_OW 1
37543: ST_TO_ADDR
// end ;
37544: GO 37461
37546: POP
37547: POP
// result := s_arr [ 1 ] ;
37548: LD_ADDR_VAR 0 4
37552: PUSH
37553: LD_VAR 0 7
37557: PUSH
37558: LD_INT 1
37560: ARRAY
37561: ST_TO_ADDR
// end ; end ;
37562: LD_VAR 0 4
37566: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37567: LD_INT 0
37569: PPUSH
37570: PPUSH
// if not list then
37571: LD_VAR 0 1
37575: NOT
37576: IFFALSE 37580
// exit ;
37578: GO 37671
// i := list [ pos1 ] ;
37580: LD_ADDR_VAR 0 5
37584: PUSH
37585: LD_VAR 0 1
37589: PUSH
37590: LD_VAR 0 2
37594: ARRAY
37595: ST_TO_ADDR
// if not i then
37596: LD_VAR 0 5
37600: NOT
37601: IFFALSE 37605
// exit ;
37603: GO 37671
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37605: LD_ADDR_VAR 0 1
37609: PUSH
37610: LD_VAR 0 1
37614: PPUSH
37615: LD_VAR 0 2
37619: PPUSH
37620: LD_VAR 0 1
37624: PUSH
37625: LD_VAR 0 3
37629: ARRAY
37630: PPUSH
37631: CALL_OW 1
37635: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37636: LD_ADDR_VAR 0 1
37640: PUSH
37641: LD_VAR 0 1
37645: PPUSH
37646: LD_VAR 0 3
37650: PPUSH
37651: LD_VAR 0 5
37655: PPUSH
37656: CALL_OW 1
37660: ST_TO_ADDR
// result := list ;
37661: LD_ADDR_VAR 0 4
37665: PUSH
37666: LD_VAR 0 1
37670: ST_TO_ADDR
// end ;
37671: LD_VAR 0 4
37675: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37676: LD_INT 0
37678: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37679: LD_ADDR_VAR 0 5
37683: PUSH
37684: LD_VAR 0 1
37688: PPUSH
37689: CALL_OW 250
37693: PPUSH
37694: LD_VAR 0 1
37698: PPUSH
37699: CALL_OW 251
37703: PPUSH
37704: LD_VAR 0 2
37708: PPUSH
37709: LD_VAR 0 3
37713: PPUSH
37714: LD_VAR 0 4
37718: PPUSH
37719: CALL 37729 0 5
37723: ST_TO_ADDR
// end ;
37724: LD_VAR 0 5
37728: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37729: LD_INT 0
37731: PPUSH
37732: PPUSH
37733: PPUSH
37734: PPUSH
// if not list then
37735: LD_VAR 0 3
37739: NOT
37740: IFFALSE 37744
// exit ;
37742: GO 38132
// result := [ ] ;
37744: LD_ADDR_VAR 0 6
37748: PUSH
37749: EMPTY
37750: ST_TO_ADDR
// for i in list do
37751: LD_ADDR_VAR 0 7
37755: PUSH
37756: LD_VAR 0 3
37760: PUSH
37761: FOR_IN
37762: IFFALSE 37964
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37764: LD_ADDR_VAR 0 9
37768: PUSH
37769: LD_VAR 0 7
37773: PPUSH
37774: LD_VAR 0 1
37778: PPUSH
37779: LD_VAR 0 2
37783: PPUSH
37784: CALL_OW 297
37788: ST_TO_ADDR
// if not result then
37789: LD_VAR 0 6
37793: NOT
37794: IFFALSE 37820
// result := [ [ i , tmp ] ] else
37796: LD_ADDR_VAR 0 6
37800: PUSH
37801: LD_VAR 0 7
37805: PUSH
37806: LD_VAR 0 9
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: EMPTY
37816: LIST
37817: ST_TO_ADDR
37818: GO 37962
// begin if result [ result ] [ 2 ] < tmp then
37820: LD_VAR 0 6
37824: PUSH
37825: LD_VAR 0 6
37829: ARRAY
37830: PUSH
37831: LD_INT 2
37833: ARRAY
37834: PUSH
37835: LD_VAR 0 9
37839: LESS
37840: IFFALSE 37882
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37842: LD_ADDR_VAR 0 6
37846: PUSH
37847: LD_VAR 0 6
37851: PPUSH
37852: LD_VAR 0 6
37856: PUSH
37857: LD_INT 1
37859: PLUS
37860: PPUSH
37861: LD_VAR 0 7
37865: PUSH
37866: LD_VAR 0 9
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PPUSH
37875: CALL_OW 2
37879: ST_TO_ADDR
37880: GO 37962
// for j = 1 to result do
37882: LD_ADDR_VAR 0 8
37886: PUSH
37887: DOUBLE
37888: LD_INT 1
37890: DEC
37891: ST_TO_ADDR
37892: LD_VAR 0 6
37896: PUSH
37897: FOR_TO
37898: IFFALSE 37960
// begin if tmp < result [ j ] [ 2 ] then
37900: LD_VAR 0 9
37904: PUSH
37905: LD_VAR 0 6
37909: PUSH
37910: LD_VAR 0 8
37914: ARRAY
37915: PUSH
37916: LD_INT 2
37918: ARRAY
37919: LESS
37920: IFFALSE 37958
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37922: LD_ADDR_VAR 0 6
37926: PUSH
37927: LD_VAR 0 6
37931: PPUSH
37932: LD_VAR 0 8
37936: PPUSH
37937: LD_VAR 0 7
37941: PUSH
37942: LD_VAR 0 9
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PPUSH
37951: CALL_OW 2
37955: ST_TO_ADDR
// break ;
37956: GO 37960
// end ; end ;
37958: GO 37897
37960: POP
37961: POP
// end ; end ;
37962: GO 37761
37964: POP
37965: POP
// if result and not asc then
37966: LD_VAR 0 6
37970: PUSH
37971: LD_VAR 0 4
37975: NOT
37976: AND
37977: IFFALSE 38052
// begin tmp := result ;
37979: LD_ADDR_VAR 0 9
37983: PUSH
37984: LD_VAR 0 6
37988: ST_TO_ADDR
// for i = tmp downto 1 do
37989: LD_ADDR_VAR 0 7
37993: PUSH
37994: DOUBLE
37995: LD_VAR 0 9
37999: INC
38000: ST_TO_ADDR
38001: LD_INT 1
38003: PUSH
38004: FOR_DOWNTO
38005: IFFALSE 38050
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38007: LD_ADDR_VAR 0 6
38011: PUSH
38012: LD_VAR 0 6
38016: PPUSH
38017: LD_VAR 0 9
38021: PUSH
38022: LD_VAR 0 7
38026: MINUS
38027: PUSH
38028: LD_INT 1
38030: PLUS
38031: PPUSH
38032: LD_VAR 0 9
38036: PUSH
38037: LD_VAR 0 7
38041: ARRAY
38042: PPUSH
38043: CALL_OW 1
38047: ST_TO_ADDR
38048: GO 38004
38050: POP
38051: POP
// end ; tmp := [ ] ;
38052: LD_ADDR_VAR 0 9
38056: PUSH
38057: EMPTY
38058: ST_TO_ADDR
// if mode then
38059: LD_VAR 0 5
38063: IFFALSE 38132
// begin for i = 1 to result do
38065: LD_ADDR_VAR 0 7
38069: PUSH
38070: DOUBLE
38071: LD_INT 1
38073: DEC
38074: ST_TO_ADDR
38075: LD_VAR 0 6
38079: PUSH
38080: FOR_TO
38081: IFFALSE 38120
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38083: LD_ADDR_VAR 0 9
38087: PUSH
38088: LD_VAR 0 9
38092: PPUSH
38093: LD_VAR 0 7
38097: PPUSH
38098: LD_VAR 0 6
38102: PUSH
38103: LD_VAR 0 7
38107: ARRAY
38108: PUSH
38109: LD_INT 1
38111: ARRAY
38112: PPUSH
38113: CALL_OW 1
38117: ST_TO_ADDR
38118: GO 38080
38120: POP
38121: POP
// result := tmp ;
38122: LD_ADDR_VAR 0 6
38126: PUSH
38127: LD_VAR 0 9
38131: ST_TO_ADDR
// end ; end ;
38132: LD_VAR 0 6
38136: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38137: LD_INT 0
38139: PPUSH
38140: PPUSH
38141: PPUSH
38142: PPUSH
38143: PPUSH
38144: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38145: LD_ADDR_VAR 0 5
38149: PUSH
38150: LD_INT 0
38152: PUSH
38153: LD_INT 0
38155: PUSH
38156: LD_INT 0
38158: PUSH
38159: EMPTY
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: ST_TO_ADDR
// if not x or not y then
38167: LD_VAR 0 2
38171: NOT
38172: PUSH
38173: LD_VAR 0 3
38177: NOT
38178: OR
38179: IFFALSE 38183
// exit ;
38181: GO 39829
// if not range then
38183: LD_VAR 0 4
38187: NOT
38188: IFFALSE 38198
// range := 10 ;
38190: LD_ADDR_VAR 0 4
38194: PUSH
38195: LD_INT 10
38197: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38198: LD_ADDR_VAR 0 8
38202: PUSH
38203: LD_INT 81
38205: PUSH
38206: LD_VAR 0 1
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 92
38217: PUSH
38218: LD_VAR 0 2
38222: PUSH
38223: LD_VAR 0 3
38227: PUSH
38228: LD_VAR 0 4
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 3
38241: PUSH
38242: LD_INT 21
38244: PUSH
38245: LD_INT 3
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: LIST
38260: PPUSH
38261: CALL_OW 69
38265: ST_TO_ADDR
// if not tmp then
38266: LD_VAR 0 8
38270: NOT
38271: IFFALSE 38275
// exit ;
38273: GO 39829
// for i in tmp do
38275: LD_ADDR_VAR 0 6
38279: PUSH
38280: LD_VAR 0 8
38284: PUSH
38285: FOR_IN
38286: IFFALSE 39804
// begin points := [ 0 , 0 , 0 ] ;
38288: LD_ADDR_VAR 0 9
38292: PUSH
38293: LD_INT 0
38295: PUSH
38296: LD_INT 0
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: LIST
38306: ST_TO_ADDR
// bpoints := 1 ;
38307: LD_ADDR_VAR 0 10
38311: PUSH
38312: LD_INT 1
38314: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38315: LD_VAR 0 6
38319: PPUSH
38320: CALL_OW 247
38324: PUSH
38325: LD_INT 1
38327: DOUBLE
38328: EQUAL
38329: IFTRUE 38333
38331: GO 38911
38333: POP
// begin if GetClass ( i ) = 1 then
38334: LD_VAR 0 6
38338: PPUSH
38339: CALL_OW 257
38343: PUSH
38344: LD_INT 1
38346: EQUAL
38347: IFFALSE 38368
// points := [ 10 , 5 , 3 ] ;
38349: LD_ADDR_VAR 0 9
38353: PUSH
38354: LD_INT 10
38356: PUSH
38357: LD_INT 5
38359: PUSH
38360: LD_INT 3
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: LIST
38367: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38368: LD_VAR 0 6
38372: PPUSH
38373: CALL_OW 257
38377: PUSH
38378: LD_INT 2
38380: PUSH
38381: LD_INT 3
38383: PUSH
38384: LD_INT 4
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: LIST
38391: IN
38392: IFFALSE 38413
// points := [ 3 , 2 , 1 ] ;
38394: LD_ADDR_VAR 0 9
38398: PUSH
38399: LD_INT 3
38401: PUSH
38402: LD_INT 2
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: LIST
38412: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38413: LD_VAR 0 6
38417: PPUSH
38418: CALL_OW 257
38422: PUSH
38423: LD_INT 5
38425: EQUAL
38426: IFFALSE 38447
// points := [ 130 , 5 , 2 ] ;
38428: LD_ADDR_VAR 0 9
38432: PUSH
38433: LD_INT 130
38435: PUSH
38436: LD_INT 5
38438: PUSH
38439: LD_INT 2
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: LIST
38446: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38447: LD_VAR 0 6
38451: PPUSH
38452: CALL_OW 257
38456: PUSH
38457: LD_INT 8
38459: EQUAL
38460: IFFALSE 38481
// points := [ 35 , 35 , 30 ] ;
38462: LD_ADDR_VAR 0 9
38466: PUSH
38467: LD_INT 35
38469: PUSH
38470: LD_INT 35
38472: PUSH
38473: LD_INT 30
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: LIST
38480: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38481: LD_VAR 0 6
38485: PPUSH
38486: CALL_OW 257
38490: PUSH
38491: LD_INT 9
38493: EQUAL
38494: IFFALSE 38515
// points := [ 20 , 55 , 40 ] ;
38496: LD_ADDR_VAR 0 9
38500: PUSH
38501: LD_INT 20
38503: PUSH
38504: LD_INT 55
38506: PUSH
38507: LD_INT 40
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: LIST
38514: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38515: LD_VAR 0 6
38519: PPUSH
38520: CALL_OW 257
38524: PUSH
38525: LD_INT 12
38527: PUSH
38528: LD_INT 16
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: IN
38535: IFFALSE 38556
// points := [ 5 , 3 , 2 ] ;
38537: LD_ADDR_VAR 0 9
38541: PUSH
38542: LD_INT 5
38544: PUSH
38545: LD_INT 3
38547: PUSH
38548: LD_INT 2
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: LIST
38555: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38556: LD_VAR 0 6
38560: PPUSH
38561: CALL_OW 257
38565: PUSH
38566: LD_INT 17
38568: EQUAL
38569: IFFALSE 38590
// points := [ 100 , 50 , 75 ] ;
38571: LD_ADDR_VAR 0 9
38575: PUSH
38576: LD_INT 100
38578: PUSH
38579: LD_INT 50
38581: PUSH
38582: LD_INT 75
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: LIST
38589: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38590: LD_VAR 0 6
38594: PPUSH
38595: CALL_OW 257
38599: PUSH
38600: LD_INT 15
38602: EQUAL
38603: IFFALSE 38624
// points := [ 10 , 5 , 3 ] ;
38605: LD_ADDR_VAR 0 9
38609: PUSH
38610: LD_INT 10
38612: PUSH
38613: LD_INT 5
38615: PUSH
38616: LD_INT 3
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: LIST
38623: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38624: LD_VAR 0 6
38628: PPUSH
38629: CALL_OW 257
38633: PUSH
38634: LD_INT 14
38636: EQUAL
38637: IFFALSE 38658
// points := [ 10 , 0 , 0 ] ;
38639: LD_ADDR_VAR 0 9
38643: PUSH
38644: LD_INT 10
38646: PUSH
38647: LD_INT 0
38649: PUSH
38650: LD_INT 0
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: LIST
38657: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38658: LD_VAR 0 6
38662: PPUSH
38663: CALL_OW 257
38667: PUSH
38668: LD_INT 11
38670: EQUAL
38671: IFFALSE 38692
// points := [ 30 , 10 , 5 ] ;
38673: LD_ADDR_VAR 0 9
38677: PUSH
38678: LD_INT 30
38680: PUSH
38681: LD_INT 10
38683: PUSH
38684: LD_INT 5
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: LIST
38691: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38692: LD_VAR 0 1
38696: PPUSH
38697: LD_INT 5
38699: PPUSH
38700: CALL_OW 321
38704: PUSH
38705: LD_INT 2
38707: EQUAL
38708: IFFALSE 38725
// bpoints := bpoints * 1.8 ;
38710: LD_ADDR_VAR 0 10
38714: PUSH
38715: LD_VAR 0 10
38719: PUSH
38720: LD_REAL  1.80000000000000E+0000
38723: MUL
38724: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38725: LD_VAR 0 6
38729: PPUSH
38730: CALL_OW 257
38734: PUSH
38735: LD_INT 1
38737: PUSH
38738: LD_INT 2
38740: PUSH
38741: LD_INT 3
38743: PUSH
38744: LD_INT 4
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: IN
38753: PUSH
38754: LD_VAR 0 1
38758: PPUSH
38759: LD_INT 51
38761: PPUSH
38762: CALL_OW 321
38766: PUSH
38767: LD_INT 2
38769: EQUAL
38770: AND
38771: IFFALSE 38788
// bpoints := bpoints * 1.2 ;
38773: LD_ADDR_VAR 0 10
38777: PUSH
38778: LD_VAR 0 10
38782: PUSH
38783: LD_REAL  1.20000000000000E+0000
38786: MUL
38787: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38788: LD_VAR 0 6
38792: PPUSH
38793: CALL_OW 257
38797: PUSH
38798: LD_INT 5
38800: PUSH
38801: LD_INT 7
38803: PUSH
38804: LD_INT 9
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: LIST
38811: IN
38812: PUSH
38813: LD_VAR 0 1
38817: PPUSH
38818: LD_INT 52
38820: PPUSH
38821: CALL_OW 321
38825: PUSH
38826: LD_INT 2
38828: EQUAL
38829: AND
38830: IFFALSE 38847
// bpoints := bpoints * 1.5 ;
38832: LD_ADDR_VAR 0 10
38836: PUSH
38837: LD_VAR 0 10
38841: PUSH
38842: LD_REAL  1.50000000000000E+0000
38845: MUL
38846: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38847: LD_VAR 0 1
38851: PPUSH
38852: LD_INT 66
38854: PPUSH
38855: CALL_OW 321
38859: PUSH
38860: LD_INT 2
38862: EQUAL
38863: IFFALSE 38880
// bpoints := bpoints * 1.1 ;
38865: LD_ADDR_VAR 0 10
38869: PUSH
38870: LD_VAR 0 10
38874: PUSH
38875: LD_REAL  1.10000000000000E+0000
38878: MUL
38879: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38880: LD_ADDR_VAR 0 10
38884: PUSH
38885: LD_VAR 0 10
38889: PUSH
38890: LD_VAR 0 6
38894: PPUSH
38895: LD_INT 1
38897: PPUSH
38898: CALL_OW 259
38902: PUSH
38903: LD_REAL  1.15000000000000E+0000
38906: MUL
38907: MUL
38908: ST_TO_ADDR
// end ; unit_vehicle :
38909: GO 39733
38911: LD_INT 2
38913: DOUBLE
38914: EQUAL
38915: IFTRUE 38919
38917: GO 39721
38919: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38920: LD_VAR 0 6
38924: PPUSH
38925: CALL_OW 264
38929: PUSH
38930: LD_INT 2
38932: PUSH
38933: LD_INT 42
38935: PUSH
38936: LD_INT 24
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: LIST
38943: IN
38944: IFFALSE 38965
// points := [ 25 , 5 , 3 ] ;
38946: LD_ADDR_VAR 0 9
38950: PUSH
38951: LD_INT 25
38953: PUSH
38954: LD_INT 5
38956: PUSH
38957: LD_INT 3
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: LIST
38964: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38965: LD_VAR 0 6
38969: PPUSH
38970: CALL_OW 264
38974: PUSH
38975: LD_INT 4
38977: PUSH
38978: LD_INT 43
38980: PUSH
38981: LD_INT 25
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: LIST
38988: IN
38989: IFFALSE 39010
// points := [ 40 , 15 , 5 ] ;
38991: LD_ADDR_VAR 0 9
38995: PUSH
38996: LD_INT 40
38998: PUSH
38999: LD_INT 15
39001: PUSH
39002: LD_INT 5
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: LIST
39009: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39010: LD_VAR 0 6
39014: PPUSH
39015: CALL_OW 264
39019: PUSH
39020: LD_INT 3
39022: PUSH
39023: LD_INT 23
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: IN
39030: IFFALSE 39051
// points := [ 7 , 25 , 8 ] ;
39032: LD_ADDR_VAR 0 9
39036: PUSH
39037: LD_INT 7
39039: PUSH
39040: LD_INT 25
39042: PUSH
39043: LD_INT 8
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: LIST
39050: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39051: LD_VAR 0 6
39055: PPUSH
39056: CALL_OW 264
39060: PUSH
39061: LD_INT 5
39063: PUSH
39064: LD_INT 27
39066: PUSH
39067: LD_INT 44
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: LIST
39074: IN
39075: IFFALSE 39096
// points := [ 14 , 50 , 16 ] ;
39077: LD_ADDR_VAR 0 9
39081: PUSH
39082: LD_INT 14
39084: PUSH
39085: LD_INT 50
39087: PUSH
39088: LD_INT 16
39090: PUSH
39091: EMPTY
39092: LIST
39093: LIST
39094: LIST
39095: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39096: LD_VAR 0 6
39100: PPUSH
39101: CALL_OW 264
39105: PUSH
39106: LD_INT 6
39108: PUSH
39109: LD_INT 46
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: IN
39116: IFFALSE 39137
// points := [ 32 , 120 , 70 ] ;
39118: LD_ADDR_VAR 0 9
39122: PUSH
39123: LD_INT 32
39125: PUSH
39126: LD_INT 120
39128: PUSH
39129: LD_INT 70
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: LIST
39136: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
39137: LD_VAR 0 6
39141: PPUSH
39142: CALL_OW 264
39146: PUSH
39147: LD_INT 7
39149: PUSH
39150: LD_INT 28
39152: PUSH
39153: LD_INT 45
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: LIST
39160: IN
39161: IFFALSE 39182
// points := [ 35 , 20 , 45 ] ;
39163: LD_ADDR_VAR 0 9
39167: PUSH
39168: LD_INT 35
39170: PUSH
39171: LD_INT 20
39173: PUSH
39174: LD_INT 45
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: LIST
39181: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39182: LD_VAR 0 6
39186: PPUSH
39187: CALL_OW 264
39191: PUSH
39192: LD_INT 47
39194: PUSH
39195: EMPTY
39196: LIST
39197: IN
39198: IFFALSE 39219
// points := [ 67 , 45 , 75 ] ;
39200: LD_ADDR_VAR 0 9
39204: PUSH
39205: LD_INT 67
39207: PUSH
39208: LD_INT 45
39210: PUSH
39211: LD_INT 75
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: LIST
39218: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39219: LD_VAR 0 6
39223: PPUSH
39224: CALL_OW 264
39228: PUSH
39229: LD_INT 26
39231: PUSH
39232: EMPTY
39233: LIST
39234: IN
39235: IFFALSE 39256
// points := [ 120 , 30 , 80 ] ;
39237: LD_ADDR_VAR 0 9
39241: PUSH
39242: LD_INT 120
39244: PUSH
39245: LD_INT 30
39247: PUSH
39248: LD_INT 80
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: LIST
39255: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39256: LD_VAR 0 6
39260: PPUSH
39261: CALL_OW 264
39265: PUSH
39266: LD_INT 22
39268: PUSH
39269: EMPTY
39270: LIST
39271: IN
39272: IFFALSE 39293
// points := [ 40 , 1 , 1 ] ;
39274: LD_ADDR_VAR 0 9
39278: PUSH
39279: LD_INT 40
39281: PUSH
39282: LD_INT 1
39284: PUSH
39285: LD_INT 1
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: LIST
39292: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39293: LD_VAR 0 6
39297: PPUSH
39298: CALL_OW 264
39302: PUSH
39303: LD_INT 29
39305: PUSH
39306: EMPTY
39307: LIST
39308: IN
39309: IFFALSE 39330
// points := [ 70 , 200 , 400 ] ;
39311: LD_ADDR_VAR 0 9
39315: PUSH
39316: LD_INT 70
39318: PUSH
39319: LD_INT 200
39321: PUSH
39322: LD_INT 400
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: LIST
39329: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39330: LD_VAR 0 6
39334: PPUSH
39335: CALL_OW 264
39339: PUSH
39340: LD_INT 14
39342: PUSH
39343: LD_INT 53
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: IN
39350: IFFALSE 39371
// points := [ 40 , 10 , 20 ] ;
39352: LD_ADDR_VAR 0 9
39356: PUSH
39357: LD_INT 40
39359: PUSH
39360: LD_INT 10
39362: PUSH
39363: LD_INT 20
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: LIST
39370: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39371: LD_VAR 0 6
39375: PPUSH
39376: CALL_OW 264
39380: PUSH
39381: LD_INT 9
39383: PUSH
39384: EMPTY
39385: LIST
39386: IN
39387: IFFALSE 39408
// points := [ 5 , 70 , 20 ] ;
39389: LD_ADDR_VAR 0 9
39393: PUSH
39394: LD_INT 5
39396: PUSH
39397: LD_INT 70
39399: PUSH
39400: LD_INT 20
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: LIST
39407: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39408: LD_VAR 0 6
39412: PPUSH
39413: CALL_OW 264
39417: PUSH
39418: LD_INT 10
39420: PUSH
39421: EMPTY
39422: LIST
39423: IN
39424: IFFALSE 39445
// points := [ 35 , 110 , 70 ] ;
39426: LD_ADDR_VAR 0 9
39430: PUSH
39431: LD_INT 35
39433: PUSH
39434: LD_INT 110
39436: PUSH
39437: LD_INT 70
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: LIST
39444: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39445: LD_VAR 0 6
39449: PPUSH
39450: CALL_OW 265
39454: PUSH
39455: LD_INT 25
39457: EQUAL
39458: IFFALSE 39479
// points := [ 80 , 65 , 100 ] ;
39460: LD_ADDR_VAR 0 9
39464: PUSH
39465: LD_INT 80
39467: PUSH
39468: LD_INT 65
39470: PUSH
39471: LD_INT 100
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: LIST
39478: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39479: LD_VAR 0 6
39483: PPUSH
39484: CALL_OW 263
39488: PUSH
39489: LD_INT 1
39491: EQUAL
39492: IFFALSE 39527
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39494: LD_ADDR_VAR 0 10
39498: PUSH
39499: LD_VAR 0 10
39503: PUSH
39504: LD_VAR 0 6
39508: PPUSH
39509: CALL_OW 311
39513: PPUSH
39514: LD_INT 3
39516: PPUSH
39517: CALL_OW 259
39521: PUSH
39522: LD_INT 4
39524: MUL
39525: MUL
39526: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39527: LD_VAR 0 6
39531: PPUSH
39532: CALL_OW 263
39536: PUSH
39537: LD_INT 2
39539: EQUAL
39540: IFFALSE 39591
// begin j := IsControledBy ( i ) ;
39542: LD_ADDR_VAR 0 7
39546: PUSH
39547: LD_VAR 0 6
39551: PPUSH
39552: CALL_OW 312
39556: ST_TO_ADDR
// if j then
39557: LD_VAR 0 7
39561: IFFALSE 39591
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39563: LD_ADDR_VAR 0 10
39567: PUSH
39568: LD_VAR 0 10
39572: PUSH
39573: LD_VAR 0 7
39577: PPUSH
39578: LD_INT 3
39580: PPUSH
39581: CALL_OW 259
39585: PUSH
39586: LD_INT 3
39588: MUL
39589: MUL
39590: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39591: LD_VAR 0 6
39595: PPUSH
39596: CALL_OW 264
39600: PUSH
39601: LD_INT 5
39603: PUSH
39604: LD_INT 6
39606: PUSH
39607: LD_INT 46
39609: PUSH
39610: LD_INT 44
39612: PUSH
39613: LD_INT 47
39615: PUSH
39616: LD_INT 45
39618: PUSH
39619: LD_INT 28
39621: PUSH
39622: LD_INT 7
39624: PUSH
39625: LD_INT 27
39627: PUSH
39628: LD_INT 29
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: IN
39643: PUSH
39644: LD_VAR 0 1
39648: PPUSH
39649: LD_INT 52
39651: PPUSH
39652: CALL_OW 321
39656: PUSH
39657: LD_INT 2
39659: EQUAL
39660: AND
39661: IFFALSE 39678
// bpoints := bpoints * 1.2 ;
39663: LD_ADDR_VAR 0 10
39667: PUSH
39668: LD_VAR 0 10
39672: PUSH
39673: LD_REAL  1.20000000000000E+0000
39676: MUL
39677: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39678: LD_VAR 0 6
39682: PPUSH
39683: CALL_OW 264
39687: PUSH
39688: LD_INT 6
39690: PUSH
39691: LD_INT 46
39693: PUSH
39694: LD_INT 47
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: LIST
39701: IN
39702: IFFALSE 39719
// bpoints := bpoints * 1.2 ;
39704: LD_ADDR_VAR 0 10
39708: PUSH
39709: LD_VAR 0 10
39713: PUSH
39714: LD_REAL  1.20000000000000E+0000
39717: MUL
39718: ST_TO_ADDR
// end ; unit_building :
39719: GO 39733
39721: LD_INT 3
39723: DOUBLE
39724: EQUAL
39725: IFTRUE 39729
39727: GO 39732
39729: POP
// ; end ;
39730: GO 39733
39732: POP
// for j = 1 to 3 do
39733: LD_ADDR_VAR 0 7
39737: PUSH
39738: DOUBLE
39739: LD_INT 1
39741: DEC
39742: ST_TO_ADDR
39743: LD_INT 3
39745: PUSH
39746: FOR_TO
39747: IFFALSE 39800
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39749: LD_ADDR_VAR 0 5
39753: PUSH
39754: LD_VAR 0 5
39758: PPUSH
39759: LD_VAR 0 7
39763: PPUSH
39764: LD_VAR 0 5
39768: PUSH
39769: LD_VAR 0 7
39773: ARRAY
39774: PUSH
39775: LD_VAR 0 9
39779: PUSH
39780: LD_VAR 0 7
39784: ARRAY
39785: PUSH
39786: LD_VAR 0 10
39790: MUL
39791: PLUS
39792: PPUSH
39793: CALL_OW 1
39797: ST_TO_ADDR
39798: GO 39746
39800: POP
39801: POP
// end ;
39802: GO 38285
39804: POP
39805: POP
// result := Replace ( result , 4 , tmp ) ;
39806: LD_ADDR_VAR 0 5
39810: PUSH
39811: LD_VAR 0 5
39815: PPUSH
39816: LD_INT 4
39818: PPUSH
39819: LD_VAR 0 8
39823: PPUSH
39824: CALL_OW 1
39828: ST_TO_ADDR
// end ;
39829: LD_VAR 0 5
39833: RET
// export function DangerAtRange ( unit , range ) ; begin
39834: LD_INT 0
39836: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39837: LD_ADDR_VAR 0 3
39841: PUSH
39842: LD_VAR 0 1
39846: PPUSH
39847: CALL_OW 255
39851: PPUSH
39852: LD_VAR 0 1
39856: PPUSH
39857: CALL_OW 250
39861: PPUSH
39862: LD_VAR 0 1
39866: PPUSH
39867: CALL_OW 251
39871: PPUSH
39872: LD_VAR 0 2
39876: PPUSH
39877: CALL 38137 0 4
39881: ST_TO_ADDR
// end ;
39882: LD_VAR 0 3
39886: RET
// export function DangerInArea ( side , area ) ; begin
39887: LD_INT 0
39889: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39890: LD_ADDR_VAR 0 3
39894: PUSH
39895: LD_VAR 0 2
39899: PPUSH
39900: LD_INT 81
39902: PUSH
39903: LD_VAR 0 1
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PPUSH
39912: CALL_OW 70
39916: ST_TO_ADDR
// end ;
39917: LD_VAR 0 3
39921: RET
// export function IsExtension ( b ) ; begin
39922: LD_INT 0
39924: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39925: LD_ADDR_VAR 0 2
39929: PUSH
39930: LD_VAR 0 1
39934: PUSH
39935: LD_INT 23
39937: PUSH
39938: LD_INT 20
39940: PUSH
39941: LD_INT 22
39943: PUSH
39944: LD_INT 17
39946: PUSH
39947: LD_INT 24
39949: PUSH
39950: LD_INT 21
39952: PUSH
39953: LD_INT 19
39955: PUSH
39956: LD_INT 16
39958: PUSH
39959: LD_INT 25
39961: PUSH
39962: LD_INT 18
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: IN
39977: ST_TO_ADDR
// end ;
39978: LD_VAR 0 2
39982: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
39983: LD_INT 0
39985: PPUSH
39986: PPUSH
39987: PPUSH
// result := [ ] ;
39988: LD_ADDR_VAR 0 3
39992: PUSH
39993: EMPTY
39994: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39995: LD_ADDR_VAR 0 4
39999: PUSH
40000: LD_VAR 0 2
40004: PPUSH
40005: LD_INT 21
40007: PUSH
40008: LD_INT 3
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PPUSH
40015: CALL_OW 70
40019: ST_TO_ADDR
// if not tmp then
40020: LD_VAR 0 4
40024: NOT
40025: IFFALSE 40029
// exit ;
40027: GO 40087
// for i in tmp do
40029: LD_ADDR_VAR 0 5
40033: PUSH
40034: LD_VAR 0 4
40038: PUSH
40039: FOR_IN
40040: IFFALSE 40075
// if GetBase ( i ) <> base then
40042: LD_VAR 0 5
40046: PPUSH
40047: CALL_OW 274
40051: PUSH
40052: LD_VAR 0 1
40056: NONEQUAL
40057: IFFALSE 40073
// ComLinkToBase ( base , i ) ;
40059: LD_VAR 0 1
40063: PPUSH
40064: LD_VAR 0 5
40068: PPUSH
40069: CALL_OW 169
40073: GO 40039
40075: POP
40076: POP
// result := tmp ;
40077: LD_ADDR_VAR 0 3
40081: PUSH
40082: LD_VAR 0 4
40086: ST_TO_ADDR
// end ;
40087: LD_VAR 0 3
40091: RET
// export function ComComplete ( unit , b ) ; var i ; begin
40092: LD_INT 0
40094: PPUSH
40095: PPUSH
// if BuildingStatus ( b ) = bs_build then
40096: LD_VAR 0 2
40100: PPUSH
40101: CALL_OW 461
40105: PUSH
40106: LD_INT 1
40108: EQUAL
40109: IFFALSE 40169
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40111: LD_VAR 0 1
40115: PPUSH
40116: LD_STRING h
40118: PUSH
40119: LD_VAR 0 2
40123: PPUSH
40124: CALL_OW 250
40128: PUSH
40129: LD_VAR 0 2
40133: PPUSH
40134: CALL_OW 251
40138: PUSH
40139: LD_VAR 0 2
40143: PUSH
40144: LD_INT 0
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: LD_INT 0
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: PUSH
40162: EMPTY
40163: LIST
40164: PPUSH
40165: CALL_OW 446
// end ;
40169: LD_VAR 0 3
40173: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40174: LD_INT 0
40176: PPUSH
40177: PPUSH
40178: PPUSH
40179: PPUSH
40180: PPUSH
40181: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
40182: LD_VAR 0 1
40186: NOT
40187: PUSH
40188: LD_VAR 0 1
40192: PPUSH
40193: CALL_OW 263
40197: PUSH
40198: LD_INT 2
40200: EQUAL
40201: NOT
40202: OR
40203: IFFALSE 40207
// exit ;
40205: GO 40523
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40207: LD_ADDR_VAR 0 6
40211: PUSH
40212: LD_INT 22
40214: PUSH
40215: LD_VAR 0 1
40219: PPUSH
40220: CALL_OW 255
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 2
40231: PUSH
40232: LD_INT 30
40234: PUSH
40235: LD_INT 36
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 34
40244: PUSH
40245: LD_INT 31
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: LIST
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PPUSH
40261: CALL_OW 69
40265: ST_TO_ADDR
// if not tmp then
40266: LD_VAR 0 6
40270: NOT
40271: IFFALSE 40275
// exit ;
40273: GO 40523
// result := [ ] ;
40275: LD_ADDR_VAR 0 2
40279: PUSH
40280: EMPTY
40281: ST_TO_ADDR
// for i in tmp do
40282: LD_ADDR_VAR 0 3
40286: PUSH
40287: LD_VAR 0 6
40291: PUSH
40292: FOR_IN
40293: IFFALSE 40364
// begin t := UnitsInside ( i ) ;
40295: LD_ADDR_VAR 0 4
40299: PUSH
40300: LD_VAR 0 3
40304: PPUSH
40305: CALL_OW 313
40309: ST_TO_ADDR
// if t then
40310: LD_VAR 0 4
40314: IFFALSE 40362
// for j in t do
40316: LD_ADDR_VAR 0 7
40320: PUSH
40321: LD_VAR 0 4
40325: PUSH
40326: FOR_IN
40327: IFFALSE 40360
// result := Insert ( result , result + 1 , j ) ;
40329: LD_ADDR_VAR 0 2
40333: PUSH
40334: LD_VAR 0 2
40338: PPUSH
40339: LD_VAR 0 2
40343: PUSH
40344: LD_INT 1
40346: PLUS
40347: PPUSH
40348: LD_VAR 0 7
40352: PPUSH
40353: CALL_OW 2
40357: ST_TO_ADDR
40358: GO 40326
40360: POP
40361: POP
// end ;
40362: GO 40292
40364: POP
40365: POP
// if not result then
40366: LD_VAR 0 2
40370: NOT
40371: IFFALSE 40375
// exit ;
40373: GO 40523
// mech := result [ 1 ] ;
40375: LD_ADDR_VAR 0 5
40379: PUSH
40380: LD_VAR 0 2
40384: PUSH
40385: LD_INT 1
40387: ARRAY
40388: ST_TO_ADDR
// if result > 1 then
40389: LD_VAR 0 2
40393: PUSH
40394: LD_INT 1
40396: GREATER
40397: IFFALSE 40509
// for i = 2 to result do
40399: LD_ADDR_VAR 0 3
40403: PUSH
40404: DOUBLE
40405: LD_INT 2
40407: DEC
40408: ST_TO_ADDR
40409: LD_VAR 0 2
40413: PUSH
40414: FOR_TO
40415: IFFALSE 40507
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40417: LD_ADDR_VAR 0 4
40421: PUSH
40422: LD_VAR 0 2
40426: PUSH
40427: LD_VAR 0 3
40431: ARRAY
40432: PPUSH
40433: LD_INT 3
40435: PPUSH
40436: CALL_OW 259
40440: PUSH
40441: LD_VAR 0 2
40445: PUSH
40446: LD_VAR 0 3
40450: ARRAY
40451: PPUSH
40452: CALL_OW 432
40456: MINUS
40457: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40458: LD_VAR 0 4
40462: PUSH
40463: LD_VAR 0 5
40467: PPUSH
40468: LD_INT 3
40470: PPUSH
40471: CALL_OW 259
40475: PUSH
40476: LD_VAR 0 5
40480: PPUSH
40481: CALL_OW 432
40485: MINUS
40486: GREATEREQUAL
40487: IFFALSE 40505
// mech := result [ i ] ;
40489: LD_ADDR_VAR 0 5
40493: PUSH
40494: LD_VAR 0 2
40498: PUSH
40499: LD_VAR 0 3
40503: ARRAY
40504: ST_TO_ADDR
// end ;
40505: GO 40414
40507: POP
40508: POP
// ComLinkTo ( vehicle , mech ) ;
40509: LD_VAR 0 1
40513: PPUSH
40514: LD_VAR 0 5
40518: PPUSH
40519: CALL_OW 135
// end ;
40523: LD_VAR 0 2
40527: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40528: LD_INT 0
40530: PPUSH
40531: PPUSH
40532: PPUSH
40533: PPUSH
40534: PPUSH
40535: PPUSH
40536: PPUSH
40537: PPUSH
40538: PPUSH
40539: PPUSH
40540: PPUSH
40541: PPUSH
40542: PPUSH
// result := [ ] ;
40543: LD_ADDR_VAR 0 7
40547: PUSH
40548: EMPTY
40549: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40550: LD_VAR 0 1
40554: PPUSH
40555: CALL_OW 266
40559: PUSH
40560: LD_INT 0
40562: PUSH
40563: LD_INT 1
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: IN
40570: NOT
40571: IFFALSE 40575
// exit ;
40573: GO 42206
// if name then
40575: LD_VAR 0 3
40579: IFFALSE 40595
// SetBName ( base_dep , name ) ;
40581: LD_VAR 0 1
40585: PPUSH
40586: LD_VAR 0 3
40590: PPUSH
40591: CALL_OW 500
// base := GetBase ( base_dep ) ;
40595: LD_ADDR_VAR 0 15
40599: PUSH
40600: LD_VAR 0 1
40604: PPUSH
40605: CALL_OW 274
40609: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40610: LD_ADDR_VAR 0 16
40614: PUSH
40615: LD_VAR 0 1
40619: PPUSH
40620: CALL_OW 255
40624: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40625: LD_ADDR_VAR 0 17
40629: PUSH
40630: LD_VAR 0 1
40634: PPUSH
40635: CALL_OW 248
40639: ST_TO_ADDR
// if sources then
40640: LD_VAR 0 5
40644: IFFALSE 40691
// for i = 1 to 3 do
40646: LD_ADDR_VAR 0 8
40650: PUSH
40651: DOUBLE
40652: LD_INT 1
40654: DEC
40655: ST_TO_ADDR
40656: LD_INT 3
40658: PUSH
40659: FOR_TO
40660: IFFALSE 40689
// AddResourceType ( base , i , sources [ i ] ) ;
40662: LD_VAR 0 15
40666: PPUSH
40667: LD_VAR 0 8
40671: PPUSH
40672: LD_VAR 0 5
40676: PUSH
40677: LD_VAR 0 8
40681: ARRAY
40682: PPUSH
40683: CALL_OW 276
40687: GO 40659
40689: POP
40690: POP
// buildings := GetBaseBuildings ( base , area ) ;
40691: LD_ADDR_VAR 0 18
40695: PUSH
40696: LD_VAR 0 15
40700: PPUSH
40701: LD_VAR 0 2
40705: PPUSH
40706: CALL 39983 0 2
40710: ST_TO_ADDR
// InitHc ;
40711: CALL_OW 19
// InitUc ;
40715: CALL_OW 18
// uc_side := side ;
40719: LD_ADDR_OWVAR 20
40723: PUSH
40724: LD_VAR 0 16
40728: ST_TO_ADDR
// uc_nation := nation ;
40729: LD_ADDR_OWVAR 21
40733: PUSH
40734: LD_VAR 0 17
40738: ST_TO_ADDR
// if buildings then
40739: LD_VAR 0 18
40743: IFFALSE 42065
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40745: LD_ADDR_VAR 0 19
40749: PUSH
40750: LD_VAR 0 18
40754: PPUSH
40755: LD_INT 2
40757: PUSH
40758: LD_INT 30
40760: PUSH
40761: LD_INT 29
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 30
40770: PUSH
40771: LD_INT 30
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: LIST
40782: PPUSH
40783: CALL_OW 72
40787: ST_TO_ADDR
// if tmp then
40788: LD_VAR 0 19
40792: IFFALSE 40840
// for i in tmp do
40794: LD_ADDR_VAR 0 8
40798: PUSH
40799: LD_VAR 0 19
40803: PUSH
40804: FOR_IN
40805: IFFALSE 40838
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40807: LD_VAR 0 8
40811: PPUSH
40812: CALL_OW 250
40816: PPUSH
40817: LD_VAR 0 8
40821: PPUSH
40822: CALL_OW 251
40826: PPUSH
40827: LD_VAR 0 16
40831: PPUSH
40832: CALL_OW 441
40836: GO 40804
40838: POP
40839: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40840: LD_VAR 0 18
40844: PPUSH
40845: LD_INT 2
40847: PUSH
40848: LD_INT 30
40850: PUSH
40851: LD_INT 32
40853: PUSH
40854: EMPTY
40855: LIST
40856: LIST
40857: PUSH
40858: LD_INT 30
40860: PUSH
40861: LD_INT 33
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: LIST
40872: PPUSH
40873: CALL_OW 72
40877: IFFALSE 40965
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40879: LD_ADDR_VAR 0 8
40883: PUSH
40884: LD_VAR 0 18
40888: PPUSH
40889: LD_INT 2
40891: PUSH
40892: LD_INT 30
40894: PUSH
40895: LD_INT 32
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 30
40904: PUSH
40905: LD_INT 33
40907: PUSH
40908: EMPTY
40909: LIST
40910: LIST
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: LIST
40916: PPUSH
40917: CALL_OW 72
40921: PUSH
40922: FOR_IN
40923: IFFALSE 40963
// begin if not GetBWeapon ( i ) then
40925: LD_VAR 0 8
40929: PPUSH
40930: CALL_OW 269
40934: NOT
40935: IFFALSE 40961
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40937: LD_VAR 0 8
40941: PPUSH
40942: LD_VAR 0 8
40946: PPUSH
40947: LD_VAR 0 2
40951: PPUSH
40952: CALL 42211 0 2
40956: PPUSH
40957: CALL_OW 431
// end ;
40961: GO 40922
40963: POP
40964: POP
// end ; for i = 1 to personel do
40965: LD_ADDR_VAR 0 8
40969: PUSH
40970: DOUBLE
40971: LD_INT 1
40973: DEC
40974: ST_TO_ADDR
40975: LD_VAR 0 6
40979: PUSH
40980: FOR_TO
40981: IFFALSE 42045
// begin if i > 4 then
40983: LD_VAR 0 8
40987: PUSH
40988: LD_INT 4
40990: GREATER
40991: IFFALSE 40995
// break ;
40993: GO 42045
// case i of 1 :
40995: LD_VAR 0 8
40999: PUSH
41000: LD_INT 1
41002: DOUBLE
41003: EQUAL
41004: IFTRUE 41008
41006: GO 41088
41008: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41009: LD_ADDR_VAR 0 12
41013: PUSH
41014: LD_VAR 0 18
41018: PPUSH
41019: LD_INT 22
41021: PUSH
41022: LD_VAR 0 16
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 58
41033: PUSH
41034: EMPTY
41035: LIST
41036: PUSH
41037: LD_INT 2
41039: PUSH
41040: LD_INT 30
41042: PUSH
41043: LD_INT 32
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 30
41052: PUSH
41053: LD_INT 4
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 30
41062: PUSH
41063: LD_INT 5
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: LIST
41080: PPUSH
41081: CALL_OW 72
41085: ST_TO_ADDR
41086: GO 41310
41088: LD_INT 2
41090: DOUBLE
41091: EQUAL
41092: IFTRUE 41096
41094: GO 41158
41096: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41097: LD_ADDR_VAR 0 12
41101: PUSH
41102: LD_VAR 0 18
41106: PPUSH
41107: LD_INT 22
41109: PUSH
41110: LD_VAR 0 16
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 2
41121: PUSH
41122: LD_INT 30
41124: PUSH
41125: LD_INT 0
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: LD_INT 30
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: LIST
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PPUSH
41151: CALL_OW 72
41155: ST_TO_ADDR
41156: GO 41310
41158: LD_INT 3
41160: DOUBLE
41161: EQUAL
41162: IFTRUE 41166
41164: GO 41228
41166: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41167: LD_ADDR_VAR 0 12
41171: PUSH
41172: LD_VAR 0 18
41176: PPUSH
41177: LD_INT 22
41179: PUSH
41180: LD_VAR 0 16
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 2
41191: PUSH
41192: LD_INT 30
41194: PUSH
41195: LD_INT 2
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 30
41204: PUSH
41205: LD_INT 3
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: LIST
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PPUSH
41221: CALL_OW 72
41225: ST_TO_ADDR
41226: GO 41310
41228: LD_INT 4
41230: DOUBLE
41231: EQUAL
41232: IFTRUE 41236
41234: GO 41309
41236: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41237: LD_ADDR_VAR 0 12
41241: PUSH
41242: LD_VAR 0 18
41246: PPUSH
41247: LD_INT 22
41249: PUSH
41250: LD_VAR 0 16
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 2
41261: PUSH
41262: LD_INT 30
41264: PUSH
41265: LD_INT 6
41267: PUSH
41268: EMPTY
41269: LIST
41270: LIST
41271: PUSH
41272: LD_INT 30
41274: PUSH
41275: LD_INT 7
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 30
41284: PUSH
41285: LD_INT 8
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PPUSH
41302: CALL_OW 72
41306: ST_TO_ADDR
41307: GO 41310
41309: POP
// if i = 1 then
41310: LD_VAR 0 8
41314: PUSH
41315: LD_INT 1
41317: EQUAL
41318: IFFALSE 41429
// begin tmp := [ ] ;
41320: LD_ADDR_VAR 0 19
41324: PUSH
41325: EMPTY
41326: ST_TO_ADDR
// for j in f do
41327: LD_ADDR_VAR 0 9
41331: PUSH
41332: LD_VAR 0 12
41336: PUSH
41337: FOR_IN
41338: IFFALSE 41411
// if GetBType ( j ) = b_bunker then
41340: LD_VAR 0 9
41344: PPUSH
41345: CALL_OW 266
41349: PUSH
41350: LD_INT 32
41352: EQUAL
41353: IFFALSE 41380
// tmp := Insert ( tmp , 1 , j ) else
41355: LD_ADDR_VAR 0 19
41359: PUSH
41360: LD_VAR 0 19
41364: PPUSH
41365: LD_INT 1
41367: PPUSH
41368: LD_VAR 0 9
41372: PPUSH
41373: CALL_OW 2
41377: ST_TO_ADDR
41378: GO 41409
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41380: LD_ADDR_VAR 0 19
41384: PUSH
41385: LD_VAR 0 19
41389: PPUSH
41390: LD_VAR 0 19
41394: PUSH
41395: LD_INT 1
41397: PLUS
41398: PPUSH
41399: LD_VAR 0 9
41403: PPUSH
41404: CALL_OW 2
41408: ST_TO_ADDR
41409: GO 41337
41411: POP
41412: POP
// if tmp then
41413: LD_VAR 0 19
41417: IFFALSE 41429
// f := tmp ;
41419: LD_ADDR_VAR 0 12
41423: PUSH
41424: LD_VAR 0 19
41428: ST_TO_ADDR
// end ; x := personel [ i ] ;
41429: LD_ADDR_VAR 0 13
41433: PUSH
41434: LD_VAR 0 6
41438: PUSH
41439: LD_VAR 0 8
41443: ARRAY
41444: ST_TO_ADDR
// if x = - 1 then
41445: LD_VAR 0 13
41449: PUSH
41450: LD_INT 1
41452: NEG
41453: EQUAL
41454: IFFALSE 41663
// begin for j in f do
41456: LD_ADDR_VAR 0 9
41460: PUSH
41461: LD_VAR 0 12
41465: PUSH
41466: FOR_IN
41467: IFFALSE 41659
// repeat InitHc ;
41469: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41473: LD_VAR 0 9
41477: PPUSH
41478: CALL_OW 266
41482: PUSH
41483: LD_INT 5
41485: EQUAL
41486: IFFALSE 41556
// begin if UnitsInside ( j ) < 3 then
41488: LD_VAR 0 9
41492: PPUSH
41493: CALL_OW 313
41497: PUSH
41498: LD_INT 3
41500: LESS
41501: IFFALSE 41537
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41503: LD_INT 0
41505: PPUSH
41506: LD_INT 5
41508: PUSH
41509: LD_INT 8
41511: PUSH
41512: LD_INT 9
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: LIST
41519: PUSH
41520: LD_VAR 0 17
41524: ARRAY
41525: PPUSH
41526: LD_VAR 0 4
41530: PPUSH
41531: CALL_OW 380
41535: GO 41554
// PrepareHuman ( false , i , skill ) ;
41537: LD_INT 0
41539: PPUSH
41540: LD_VAR 0 8
41544: PPUSH
41545: LD_VAR 0 4
41549: PPUSH
41550: CALL_OW 380
// end else
41554: GO 41573
// PrepareHuman ( false , i , skill ) ;
41556: LD_INT 0
41558: PPUSH
41559: LD_VAR 0 8
41563: PPUSH
41564: LD_VAR 0 4
41568: PPUSH
41569: CALL_OW 380
// un := CreateHuman ;
41573: LD_ADDR_VAR 0 14
41577: PUSH
41578: CALL_OW 44
41582: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41583: LD_ADDR_VAR 0 7
41587: PUSH
41588: LD_VAR 0 7
41592: PPUSH
41593: LD_INT 1
41595: PPUSH
41596: LD_VAR 0 14
41600: PPUSH
41601: CALL_OW 2
41605: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41606: LD_VAR 0 14
41610: PPUSH
41611: LD_VAR 0 9
41615: PPUSH
41616: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41620: LD_VAR 0 9
41624: PPUSH
41625: CALL_OW 313
41629: PUSH
41630: LD_INT 6
41632: EQUAL
41633: PUSH
41634: LD_VAR 0 9
41638: PPUSH
41639: CALL_OW 266
41643: PUSH
41644: LD_INT 32
41646: PUSH
41647: LD_INT 31
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: IN
41654: OR
41655: IFFALSE 41469
41657: GO 41466
41659: POP
41660: POP
// end else
41661: GO 42043
// for j = 1 to x do
41663: LD_ADDR_VAR 0 9
41667: PUSH
41668: DOUBLE
41669: LD_INT 1
41671: DEC
41672: ST_TO_ADDR
41673: LD_VAR 0 13
41677: PUSH
41678: FOR_TO
41679: IFFALSE 42041
// begin InitHc ;
41681: CALL_OW 19
// if not f then
41685: LD_VAR 0 12
41689: NOT
41690: IFFALSE 41779
// begin PrepareHuman ( false , i , skill ) ;
41692: LD_INT 0
41694: PPUSH
41695: LD_VAR 0 8
41699: PPUSH
41700: LD_VAR 0 4
41704: PPUSH
41705: CALL_OW 380
// un := CreateHuman ;
41709: LD_ADDR_VAR 0 14
41713: PUSH
41714: CALL_OW 44
41718: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41719: LD_ADDR_VAR 0 7
41723: PUSH
41724: LD_VAR 0 7
41728: PPUSH
41729: LD_INT 1
41731: PPUSH
41732: LD_VAR 0 14
41736: PPUSH
41737: CALL_OW 2
41741: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41742: LD_VAR 0 14
41746: PPUSH
41747: LD_VAR 0 1
41751: PPUSH
41752: CALL_OW 250
41756: PPUSH
41757: LD_VAR 0 1
41761: PPUSH
41762: CALL_OW 251
41766: PPUSH
41767: LD_INT 10
41769: PPUSH
41770: LD_INT 0
41772: PPUSH
41773: CALL_OW 50
// continue ;
41777: GO 41678
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41779: LD_VAR 0 12
41783: PUSH
41784: LD_INT 1
41786: ARRAY
41787: PPUSH
41788: CALL_OW 313
41792: PUSH
41793: LD_VAR 0 12
41797: PUSH
41798: LD_INT 1
41800: ARRAY
41801: PPUSH
41802: CALL_OW 266
41806: PUSH
41807: LD_INT 32
41809: PUSH
41810: LD_INT 31
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: IN
41817: AND
41818: PUSH
41819: LD_VAR 0 12
41823: PUSH
41824: LD_INT 1
41826: ARRAY
41827: PPUSH
41828: CALL_OW 313
41832: PUSH
41833: LD_INT 6
41835: EQUAL
41836: OR
41837: IFFALSE 41857
// f := Delete ( f , 1 ) ;
41839: LD_ADDR_VAR 0 12
41843: PUSH
41844: LD_VAR 0 12
41848: PPUSH
41849: LD_INT 1
41851: PPUSH
41852: CALL_OW 3
41856: ST_TO_ADDR
// if not f then
41857: LD_VAR 0 12
41861: NOT
41862: IFFALSE 41880
// begin x := x + 2 ;
41864: LD_ADDR_VAR 0 13
41868: PUSH
41869: LD_VAR 0 13
41873: PUSH
41874: LD_INT 2
41876: PLUS
41877: ST_TO_ADDR
// continue ;
41878: GO 41678
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41880: LD_VAR 0 12
41884: PUSH
41885: LD_INT 1
41887: ARRAY
41888: PPUSH
41889: CALL_OW 266
41893: PUSH
41894: LD_INT 5
41896: EQUAL
41897: IFFALSE 41971
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41899: LD_VAR 0 12
41903: PUSH
41904: LD_INT 1
41906: ARRAY
41907: PPUSH
41908: CALL_OW 313
41912: PUSH
41913: LD_INT 3
41915: LESS
41916: IFFALSE 41952
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41918: LD_INT 0
41920: PPUSH
41921: LD_INT 5
41923: PUSH
41924: LD_INT 8
41926: PUSH
41927: LD_INT 9
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: LIST
41934: PUSH
41935: LD_VAR 0 17
41939: ARRAY
41940: PPUSH
41941: LD_VAR 0 4
41945: PPUSH
41946: CALL_OW 380
41950: GO 41969
// PrepareHuman ( false , i , skill ) ;
41952: LD_INT 0
41954: PPUSH
41955: LD_VAR 0 8
41959: PPUSH
41960: LD_VAR 0 4
41964: PPUSH
41965: CALL_OW 380
// end else
41969: GO 41988
// PrepareHuman ( false , i , skill ) ;
41971: LD_INT 0
41973: PPUSH
41974: LD_VAR 0 8
41978: PPUSH
41979: LD_VAR 0 4
41983: PPUSH
41984: CALL_OW 380
// un := CreateHuman ;
41988: LD_ADDR_VAR 0 14
41992: PUSH
41993: CALL_OW 44
41997: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41998: LD_ADDR_VAR 0 7
42002: PUSH
42003: LD_VAR 0 7
42007: PPUSH
42008: LD_INT 1
42010: PPUSH
42011: LD_VAR 0 14
42015: PPUSH
42016: CALL_OW 2
42020: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42021: LD_VAR 0 14
42025: PPUSH
42026: LD_VAR 0 12
42030: PUSH
42031: LD_INT 1
42033: ARRAY
42034: PPUSH
42035: CALL_OW 52
// end ;
42039: GO 41678
42041: POP
42042: POP
// end ;
42043: GO 40980
42045: POP
42046: POP
// result := result ^ buildings ;
42047: LD_ADDR_VAR 0 7
42051: PUSH
42052: LD_VAR 0 7
42056: PUSH
42057: LD_VAR 0 18
42061: ADD
42062: ST_TO_ADDR
// end else
42063: GO 42206
// begin for i = 1 to personel do
42065: LD_ADDR_VAR 0 8
42069: PUSH
42070: DOUBLE
42071: LD_INT 1
42073: DEC
42074: ST_TO_ADDR
42075: LD_VAR 0 6
42079: PUSH
42080: FOR_TO
42081: IFFALSE 42204
// begin if i > 4 then
42083: LD_VAR 0 8
42087: PUSH
42088: LD_INT 4
42090: GREATER
42091: IFFALSE 42095
// break ;
42093: GO 42204
// x := personel [ i ] ;
42095: LD_ADDR_VAR 0 13
42099: PUSH
42100: LD_VAR 0 6
42104: PUSH
42105: LD_VAR 0 8
42109: ARRAY
42110: ST_TO_ADDR
// if x = - 1 then
42111: LD_VAR 0 13
42115: PUSH
42116: LD_INT 1
42118: NEG
42119: EQUAL
42120: IFFALSE 42124
// continue ;
42122: GO 42080
// PrepareHuman ( false , i , skill ) ;
42124: LD_INT 0
42126: PPUSH
42127: LD_VAR 0 8
42131: PPUSH
42132: LD_VAR 0 4
42136: PPUSH
42137: CALL_OW 380
// un := CreateHuman ;
42141: LD_ADDR_VAR 0 14
42145: PUSH
42146: CALL_OW 44
42150: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42151: LD_VAR 0 14
42155: PPUSH
42156: LD_VAR 0 1
42160: PPUSH
42161: CALL_OW 250
42165: PPUSH
42166: LD_VAR 0 1
42170: PPUSH
42171: CALL_OW 251
42175: PPUSH
42176: LD_INT 10
42178: PPUSH
42179: LD_INT 0
42181: PPUSH
42182: CALL_OW 50
// result := result ^ un ;
42186: LD_ADDR_VAR 0 7
42190: PUSH
42191: LD_VAR 0 7
42195: PUSH
42196: LD_VAR 0 14
42200: ADD
42201: ST_TO_ADDR
// end ;
42202: GO 42080
42204: POP
42205: POP
// end ; end ;
42206: LD_VAR 0 7
42210: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42211: LD_INT 0
42213: PPUSH
42214: PPUSH
42215: PPUSH
42216: PPUSH
42217: PPUSH
42218: PPUSH
42219: PPUSH
42220: PPUSH
42221: PPUSH
42222: PPUSH
42223: PPUSH
42224: PPUSH
42225: PPUSH
42226: PPUSH
42227: PPUSH
42228: PPUSH
// result := false ;
42229: LD_ADDR_VAR 0 3
42233: PUSH
42234: LD_INT 0
42236: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42237: LD_VAR 0 1
42241: NOT
42242: PUSH
42243: LD_VAR 0 1
42247: PPUSH
42248: CALL_OW 266
42252: PUSH
42253: LD_INT 32
42255: PUSH
42256: LD_INT 33
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: IN
42263: NOT
42264: OR
42265: IFFALSE 42269
// exit ;
42267: GO 43405
// nat := GetNation ( tower ) ;
42269: LD_ADDR_VAR 0 12
42273: PUSH
42274: LD_VAR 0 1
42278: PPUSH
42279: CALL_OW 248
42283: ST_TO_ADDR
// side := GetSide ( tower ) ;
42284: LD_ADDR_VAR 0 16
42288: PUSH
42289: LD_VAR 0 1
42293: PPUSH
42294: CALL_OW 255
42298: ST_TO_ADDR
// x := GetX ( tower ) ;
42299: LD_ADDR_VAR 0 10
42303: PUSH
42304: LD_VAR 0 1
42308: PPUSH
42309: CALL_OW 250
42313: ST_TO_ADDR
// y := GetY ( tower ) ;
42314: LD_ADDR_VAR 0 11
42318: PUSH
42319: LD_VAR 0 1
42323: PPUSH
42324: CALL_OW 251
42328: ST_TO_ADDR
// if not x or not y then
42329: LD_VAR 0 10
42333: NOT
42334: PUSH
42335: LD_VAR 0 11
42339: NOT
42340: OR
42341: IFFALSE 42345
// exit ;
42343: GO 43405
// weapon := 0 ;
42345: LD_ADDR_VAR 0 18
42349: PUSH
42350: LD_INT 0
42352: ST_TO_ADDR
// fac_list := [ ] ;
42353: LD_ADDR_VAR 0 17
42357: PUSH
42358: EMPTY
42359: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
42360: LD_ADDR_VAR 0 6
42364: PUSH
42365: LD_VAR 0 1
42369: PPUSH
42370: CALL_OW 274
42374: PPUSH
42375: LD_VAR 0 2
42379: PPUSH
42380: CALL 39983 0 2
42384: PPUSH
42385: LD_INT 30
42387: PUSH
42388: LD_INT 3
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PPUSH
42395: CALL_OW 72
42399: ST_TO_ADDR
// if not factories then
42400: LD_VAR 0 6
42404: NOT
42405: IFFALSE 42409
// exit ;
42407: GO 43405
// for i in factories do
42409: LD_ADDR_VAR 0 8
42413: PUSH
42414: LD_VAR 0 6
42418: PUSH
42419: FOR_IN
42420: IFFALSE 42445
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42422: LD_ADDR_VAR 0 17
42426: PUSH
42427: LD_VAR 0 17
42431: PUSH
42432: LD_VAR 0 8
42436: PPUSH
42437: CALL_OW 478
42441: UNION
42442: ST_TO_ADDR
42443: GO 42419
42445: POP
42446: POP
// if not fac_list then
42447: LD_VAR 0 17
42451: NOT
42452: IFFALSE 42456
// exit ;
42454: GO 43405
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42456: LD_ADDR_VAR 0 5
42460: PUSH
42461: LD_INT 4
42463: PUSH
42464: LD_INT 5
42466: PUSH
42467: LD_INT 9
42469: PUSH
42470: LD_INT 10
42472: PUSH
42473: LD_INT 6
42475: PUSH
42476: LD_INT 7
42478: PUSH
42479: LD_INT 11
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 27
42493: PUSH
42494: LD_INT 28
42496: PUSH
42497: LD_INT 26
42499: PUSH
42500: LD_INT 30
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 43
42511: PUSH
42512: LD_INT 44
42514: PUSH
42515: LD_INT 46
42517: PUSH
42518: LD_INT 45
42520: PUSH
42521: LD_INT 47
42523: PUSH
42524: LD_INT 49
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: LIST
42539: PUSH
42540: LD_VAR 0 12
42544: ARRAY
42545: ST_TO_ADDR
// for i in list do
42546: LD_ADDR_VAR 0 8
42550: PUSH
42551: LD_VAR 0 5
42555: PUSH
42556: FOR_IN
42557: IFFALSE 42590
// if not i in fac_list then
42559: LD_VAR 0 8
42563: PUSH
42564: LD_VAR 0 17
42568: IN
42569: NOT
42570: IFFALSE 42588
// list := list diff i ;
42572: LD_ADDR_VAR 0 5
42576: PUSH
42577: LD_VAR 0 5
42581: PUSH
42582: LD_VAR 0 8
42586: DIFF
42587: ST_TO_ADDR
42588: GO 42556
42590: POP
42591: POP
// if not list then
42592: LD_VAR 0 5
42596: NOT
42597: IFFALSE 42601
// exit ;
42599: GO 43405
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42601: LD_VAR 0 12
42605: PUSH
42606: LD_INT 3
42608: EQUAL
42609: PUSH
42610: LD_INT 49
42612: PUSH
42613: LD_VAR 0 5
42617: IN
42618: AND
42619: PUSH
42620: LD_INT 31
42622: PPUSH
42623: LD_VAR 0 16
42627: PPUSH
42628: CALL_OW 321
42632: PUSH
42633: LD_INT 2
42635: EQUAL
42636: AND
42637: IFFALSE 42697
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42639: LD_INT 22
42641: PUSH
42642: LD_VAR 0 16
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 35
42653: PUSH
42654: LD_INT 49
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 91
42663: PUSH
42664: LD_VAR 0 1
42668: PUSH
42669: LD_INT 10
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: LIST
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: LIST
42681: PPUSH
42682: CALL_OW 69
42686: NOT
42687: IFFALSE 42697
// weapon := ru_time_lapser ;
42689: LD_ADDR_VAR 0 18
42693: PUSH
42694: LD_INT 49
42696: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42697: LD_VAR 0 12
42701: PUSH
42702: LD_INT 1
42704: PUSH
42705: LD_INT 2
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: IN
42712: PUSH
42713: LD_INT 11
42715: PUSH
42716: LD_VAR 0 5
42720: IN
42721: PUSH
42722: LD_INT 30
42724: PUSH
42725: LD_VAR 0 5
42729: IN
42730: OR
42731: AND
42732: PUSH
42733: LD_INT 6
42735: PPUSH
42736: LD_VAR 0 16
42740: PPUSH
42741: CALL_OW 321
42745: PUSH
42746: LD_INT 2
42748: EQUAL
42749: AND
42750: IFFALSE 42915
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42752: LD_INT 22
42754: PUSH
42755: LD_VAR 0 16
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 2
42766: PUSH
42767: LD_INT 35
42769: PUSH
42770: LD_INT 11
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 35
42779: PUSH
42780: LD_INT 30
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: LIST
42791: PUSH
42792: LD_INT 91
42794: PUSH
42795: LD_VAR 0 1
42799: PUSH
42800: LD_INT 18
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: LIST
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: LIST
42812: PPUSH
42813: CALL_OW 69
42817: NOT
42818: PUSH
42819: LD_INT 22
42821: PUSH
42822: LD_VAR 0 16
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 2
42833: PUSH
42834: LD_INT 30
42836: PUSH
42837: LD_INT 32
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 30
42846: PUSH
42847: LD_INT 33
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 91
42861: PUSH
42862: LD_VAR 0 1
42866: PUSH
42867: LD_INT 12
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: LIST
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: LIST
42879: PUSH
42880: EMPTY
42881: LIST
42882: PPUSH
42883: CALL_OW 69
42887: PUSH
42888: LD_INT 2
42890: GREATER
42891: AND
42892: IFFALSE 42915
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42894: LD_ADDR_VAR 0 18
42898: PUSH
42899: LD_INT 11
42901: PUSH
42902: LD_INT 30
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_VAR 0 12
42913: ARRAY
42914: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42915: LD_VAR 0 18
42919: NOT
42920: PUSH
42921: LD_INT 40
42923: PPUSH
42924: LD_VAR 0 16
42928: PPUSH
42929: CALL_OW 321
42933: PUSH
42934: LD_INT 2
42936: EQUAL
42937: AND
42938: PUSH
42939: LD_INT 7
42941: PUSH
42942: LD_VAR 0 5
42946: IN
42947: PUSH
42948: LD_INT 28
42950: PUSH
42951: LD_VAR 0 5
42955: IN
42956: OR
42957: PUSH
42958: LD_INT 45
42960: PUSH
42961: LD_VAR 0 5
42965: IN
42966: OR
42967: AND
42968: IFFALSE 43222
// begin hex := GetHexInfo ( x , y ) ;
42970: LD_ADDR_VAR 0 4
42974: PUSH
42975: LD_VAR 0 10
42979: PPUSH
42980: LD_VAR 0 11
42984: PPUSH
42985: CALL_OW 546
42989: ST_TO_ADDR
// if hex [ 1 ] then
42990: LD_VAR 0 4
42994: PUSH
42995: LD_INT 1
42997: ARRAY
42998: IFFALSE 43002
// exit ;
43000: GO 43405
// height := hex [ 2 ] ;
43002: LD_ADDR_VAR 0 15
43006: PUSH
43007: LD_VAR 0 4
43011: PUSH
43012: LD_INT 2
43014: ARRAY
43015: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43016: LD_ADDR_VAR 0 14
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: LD_INT 2
43026: PUSH
43027: LD_INT 3
43029: PUSH
43030: LD_INT 5
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: ST_TO_ADDR
// for i in tmp do
43039: LD_ADDR_VAR 0 8
43043: PUSH
43044: LD_VAR 0 14
43048: PUSH
43049: FOR_IN
43050: IFFALSE 43220
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43052: LD_ADDR_VAR 0 9
43056: PUSH
43057: LD_VAR 0 10
43061: PPUSH
43062: LD_VAR 0 8
43066: PPUSH
43067: LD_INT 5
43069: PPUSH
43070: CALL_OW 272
43074: PUSH
43075: LD_VAR 0 11
43079: PPUSH
43080: LD_VAR 0 8
43084: PPUSH
43085: LD_INT 5
43087: PPUSH
43088: CALL_OW 273
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43097: LD_VAR 0 9
43101: PUSH
43102: LD_INT 1
43104: ARRAY
43105: PPUSH
43106: LD_VAR 0 9
43110: PUSH
43111: LD_INT 2
43113: ARRAY
43114: PPUSH
43115: CALL_OW 488
43119: IFFALSE 43218
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43121: LD_ADDR_VAR 0 4
43125: PUSH
43126: LD_VAR 0 9
43130: PUSH
43131: LD_INT 1
43133: ARRAY
43134: PPUSH
43135: LD_VAR 0 9
43139: PUSH
43140: LD_INT 2
43142: ARRAY
43143: PPUSH
43144: CALL_OW 546
43148: ST_TO_ADDR
// if hex [ 1 ] then
43149: LD_VAR 0 4
43153: PUSH
43154: LD_INT 1
43156: ARRAY
43157: IFFALSE 43161
// continue ;
43159: GO 43049
// h := hex [ 2 ] ;
43161: LD_ADDR_VAR 0 13
43165: PUSH
43166: LD_VAR 0 4
43170: PUSH
43171: LD_INT 2
43173: ARRAY
43174: ST_TO_ADDR
// if h + 7 < height then
43175: LD_VAR 0 13
43179: PUSH
43180: LD_INT 7
43182: PLUS
43183: PUSH
43184: LD_VAR 0 15
43188: LESS
43189: IFFALSE 43218
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43191: LD_ADDR_VAR 0 18
43195: PUSH
43196: LD_INT 7
43198: PUSH
43199: LD_INT 28
43201: PUSH
43202: LD_INT 45
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: LIST
43209: PUSH
43210: LD_VAR 0 12
43214: ARRAY
43215: ST_TO_ADDR
// break ;
43216: GO 43220
// end ; end ; end ;
43218: GO 43049
43220: POP
43221: POP
// end ; if not weapon then
43222: LD_VAR 0 18
43226: NOT
43227: IFFALSE 43287
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43229: LD_ADDR_VAR 0 5
43233: PUSH
43234: LD_VAR 0 5
43238: PUSH
43239: LD_INT 11
43241: PUSH
43242: LD_INT 30
43244: PUSH
43245: LD_INT 49
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: LIST
43252: DIFF
43253: ST_TO_ADDR
// if not list then
43254: LD_VAR 0 5
43258: NOT
43259: IFFALSE 43263
// exit ;
43261: GO 43405
// weapon := list [ rand ( 1 , list ) ] ;
43263: LD_ADDR_VAR 0 18
43267: PUSH
43268: LD_VAR 0 5
43272: PUSH
43273: LD_INT 1
43275: PPUSH
43276: LD_VAR 0 5
43280: PPUSH
43281: CALL_OW 12
43285: ARRAY
43286: ST_TO_ADDR
// end ; if weapon then
43287: LD_VAR 0 18
43291: IFFALSE 43405
// begin tmp := CostOfWeapon ( weapon ) ;
43293: LD_ADDR_VAR 0 14
43297: PUSH
43298: LD_VAR 0 18
43302: PPUSH
43303: CALL_OW 451
43307: ST_TO_ADDR
// j := GetBase ( tower ) ;
43308: LD_ADDR_VAR 0 9
43312: PUSH
43313: LD_VAR 0 1
43317: PPUSH
43318: CALL_OW 274
43322: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43323: LD_VAR 0 9
43327: PPUSH
43328: LD_INT 1
43330: PPUSH
43331: CALL_OW 275
43335: PUSH
43336: LD_VAR 0 14
43340: PUSH
43341: LD_INT 1
43343: ARRAY
43344: GREATEREQUAL
43345: PUSH
43346: LD_VAR 0 9
43350: PPUSH
43351: LD_INT 2
43353: PPUSH
43354: CALL_OW 275
43358: PUSH
43359: LD_VAR 0 14
43363: PUSH
43364: LD_INT 2
43366: ARRAY
43367: GREATEREQUAL
43368: AND
43369: PUSH
43370: LD_VAR 0 9
43374: PPUSH
43375: LD_INT 3
43377: PPUSH
43378: CALL_OW 275
43382: PUSH
43383: LD_VAR 0 14
43387: PUSH
43388: LD_INT 3
43390: ARRAY
43391: GREATEREQUAL
43392: AND
43393: IFFALSE 43405
// result := weapon ;
43395: LD_ADDR_VAR 0 3
43399: PUSH
43400: LD_VAR 0 18
43404: ST_TO_ADDR
// end ; end ;
43405: LD_VAR 0 3
43409: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43410: LD_INT 0
43412: PPUSH
43413: PPUSH
// result := true ;
43414: LD_ADDR_VAR 0 3
43418: PUSH
43419: LD_INT 1
43421: ST_TO_ADDR
// if array1 = array2 then
43422: LD_VAR 0 1
43426: PUSH
43427: LD_VAR 0 2
43431: EQUAL
43432: IFFALSE 43492
// begin for i = 1 to array1 do
43434: LD_ADDR_VAR 0 4
43438: PUSH
43439: DOUBLE
43440: LD_INT 1
43442: DEC
43443: ST_TO_ADDR
43444: LD_VAR 0 1
43448: PUSH
43449: FOR_TO
43450: IFFALSE 43488
// if array1 [ i ] <> array2 [ i ] then
43452: LD_VAR 0 1
43456: PUSH
43457: LD_VAR 0 4
43461: ARRAY
43462: PUSH
43463: LD_VAR 0 2
43467: PUSH
43468: LD_VAR 0 4
43472: ARRAY
43473: NONEQUAL
43474: IFFALSE 43486
// begin result := false ;
43476: LD_ADDR_VAR 0 3
43480: PUSH
43481: LD_INT 0
43483: ST_TO_ADDR
// break ;
43484: GO 43488
// end ;
43486: GO 43449
43488: POP
43489: POP
// end else
43490: GO 43500
// result := false ;
43492: LD_ADDR_VAR 0 3
43496: PUSH
43497: LD_INT 0
43499: ST_TO_ADDR
// end ;
43500: LD_VAR 0 3
43504: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43505: LD_INT 0
43507: PPUSH
43508: PPUSH
43509: PPUSH
// pom := GetBase ( fac ) ;
43510: LD_ADDR_VAR 0 5
43514: PUSH
43515: LD_VAR 0 1
43519: PPUSH
43520: CALL_OW 274
43524: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43525: LD_ADDR_VAR 0 4
43529: PUSH
43530: LD_VAR 0 2
43534: PUSH
43535: LD_INT 1
43537: ARRAY
43538: PPUSH
43539: LD_VAR 0 2
43543: PUSH
43544: LD_INT 2
43546: ARRAY
43547: PPUSH
43548: LD_VAR 0 2
43552: PUSH
43553: LD_INT 3
43555: ARRAY
43556: PPUSH
43557: LD_VAR 0 2
43561: PUSH
43562: LD_INT 4
43564: ARRAY
43565: PPUSH
43566: CALL_OW 449
43570: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43571: LD_ADDR_VAR 0 3
43575: PUSH
43576: LD_VAR 0 5
43580: PPUSH
43581: LD_INT 1
43583: PPUSH
43584: CALL_OW 275
43588: PUSH
43589: LD_VAR 0 4
43593: PUSH
43594: LD_INT 1
43596: ARRAY
43597: GREATEREQUAL
43598: PUSH
43599: LD_VAR 0 5
43603: PPUSH
43604: LD_INT 2
43606: PPUSH
43607: CALL_OW 275
43611: PUSH
43612: LD_VAR 0 4
43616: PUSH
43617: LD_INT 2
43619: ARRAY
43620: GREATEREQUAL
43621: AND
43622: PUSH
43623: LD_VAR 0 5
43627: PPUSH
43628: LD_INT 3
43630: PPUSH
43631: CALL_OW 275
43635: PUSH
43636: LD_VAR 0 4
43640: PUSH
43641: LD_INT 3
43643: ARRAY
43644: GREATEREQUAL
43645: AND
43646: ST_TO_ADDR
// end ;
43647: LD_VAR 0 3
43651: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43652: LD_INT 0
43654: PPUSH
43655: PPUSH
43656: PPUSH
43657: PPUSH
// pom := GetBase ( building ) ;
43658: LD_ADDR_VAR 0 3
43662: PUSH
43663: LD_VAR 0 1
43667: PPUSH
43668: CALL_OW 274
43672: ST_TO_ADDR
// if not pom then
43673: LD_VAR 0 3
43677: NOT
43678: IFFALSE 43682
// exit ;
43680: GO 43852
// btype := GetBType ( building ) ;
43682: LD_ADDR_VAR 0 5
43686: PUSH
43687: LD_VAR 0 1
43691: PPUSH
43692: CALL_OW 266
43696: ST_TO_ADDR
// if btype = b_armoury then
43697: LD_VAR 0 5
43701: PUSH
43702: LD_INT 4
43704: EQUAL
43705: IFFALSE 43715
// btype := b_barracks ;
43707: LD_ADDR_VAR 0 5
43711: PUSH
43712: LD_INT 5
43714: ST_TO_ADDR
// if btype = b_depot then
43715: LD_VAR 0 5
43719: PUSH
43720: LD_INT 0
43722: EQUAL
43723: IFFALSE 43733
// btype := b_warehouse ;
43725: LD_ADDR_VAR 0 5
43729: PUSH
43730: LD_INT 1
43732: ST_TO_ADDR
// if btype = b_workshop then
43733: LD_VAR 0 5
43737: PUSH
43738: LD_INT 2
43740: EQUAL
43741: IFFALSE 43751
// btype := b_factory ;
43743: LD_ADDR_VAR 0 5
43747: PUSH
43748: LD_INT 3
43750: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43751: LD_ADDR_VAR 0 4
43755: PUSH
43756: LD_VAR 0 5
43760: PPUSH
43761: LD_VAR 0 1
43765: PPUSH
43766: CALL_OW 248
43770: PPUSH
43771: CALL_OW 450
43775: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43776: LD_ADDR_VAR 0 2
43780: PUSH
43781: LD_VAR 0 3
43785: PPUSH
43786: LD_INT 1
43788: PPUSH
43789: CALL_OW 275
43793: PUSH
43794: LD_VAR 0 4
43798: PUSH
43799: LD_INT 1
43801: ARRAY
43802: GREATEREQUAL
43803: PUSH
43804: LD_VAR 0 3
43808: PPUSH
43809: LD_INT 2
43811: PPUSH
43812: CALL_OW 275
43816: PUSH
43817: LD_VAR 0 4
43821: PUSH
43822: LD_INT 2
43824: ARRAY
43825: GREATEREQUAL
43826: AND
43827: PUSH
43828: LD_VAR 0 3
43832: PPUSH
43833: LD_INT 3
43835: PPUSH
43836: CALL_OW 275
43840: PUSH
43841: LD_VAR 0 4
43845: PUSH
43846: LD_INT 3
43848: ARRAY
43849: GREATEREQUAL
43850: AND
43851: ST_TO_ADDR
// end ;
43852: LD_VAR 0 2
43856: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43857: LD_INT 0
43859: PPUSH
43860: PPUSH
43861: PPUSH
// pom := GetBase ( building ) ;
43862: LD_ADDR_VAR 0 4
43866: PUSH
43867: LD_VAR 0 1
43871: PPUSH
43872: CALL_OW 274
43876: ST_TO_ADDR
// if not pom then
43877: LD_VAR 0 4
43881: NOT
43882: IFFALSE 43886
// exit ;
43884: GO 43987
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43886: LD_ADDR_VAR 0 5
43890: PUSH
43891: LD_VAR 0 2
43895: PPUSH
43896: LD_VAR 0 1
43900: PPUSH
43901: CALL_OW 248
43905: PPUSH
43906: CALL_OW 450
43910: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43911: LD_ADDR_VAR 0 3
43915: PUSH
43916: LD_VAR 0 4
43920: PPUSH
43921: LD_INT 1
43923: PPUSH
43924: CALL_OW 275
43928: PUSH
43929: LD_VAR 0 5
43933: PUSH
43934: LD_INT 1
43936: ARRAY
43937: GREATEREQUAL
43938: PUSH
43939: LD_VAR 0 4
43943: PPUSH
43944: LD_INT 2
43946: PPUSH
43947: CALL_OW 275
43951: PUSH
43952: LD_VAR 0 5
43956: PUSH
43957: LD_INT 2
43959: ARRAY
43960: GREATEREQUAL
43961: AND
43962: PUSH
43963: LD_VAR 0 4
43967: PPUSH
43968: LD_INT 3
43970: PPUSH
43971: CALL_OW 275
43975: PUSH
43976: LD_VAR 0 5
43980: PUSH
43981: LD_INT 3
43983: ARRAY
43984: GREATEREQUAL
43985: AND
43986: ST_TO_ADDR
// end ;
43987: LD_VAR 0 3
43991: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
43992: LD_INT 0
43994: PPUSH
43995: PPUSH
43996: PPUSH
43997: PPUSH
43998: PPUSH
43999: PPUSH
44000: PPUSH
44001: PPUSH
44002: PPUSH
44003: PPUSH
// result := false ;
44004: LD_ADDR_VAR 0 6
44008: PUSH
44009: LD_INT 0
44011: ST_TO_ADDR
// if not base or not btype or not x or not y then
44012: LD_VAR 0 1
44016: NOT
44017: PUSH
44018: LD_VAR 0 2
44022: NOT
44023: OR
44024: PUSH
44025: LD_VAR 0 3
44029: NOT
44030: OR
44031: PUSH
44032: LD_VAR 0 4
44036: NOT
44037: OR
44038: IFFALSE 44042
// exit ;
44040: GO 44651
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
44042: LD_ADDR_VAR 0 12
44046: PUSH
44047: LD_VAR 0 2
44051: PPUSH
44052: LD_VAR 0 3
44056: PPUSH
44057: LD_VAR 0 4
44061: PPUSH
44062: LD_VAR 0 5
44066: PPUSH
44067: LD_VAR 0 1
44071: PUSH
44072: LD_INT 1
44074: ARRAY
44075: PPUSH
44076: CALL_OW 248
44080: PPUSH
44081: LD_INT 0
44083: PPUSH
44084: CALL 45488 0 6
44088: ST_TO_ADDR
// if not hexes then
44089: LD_VAR 0 12
44093: NOT
44094: IFFALSE 44098
// exit ;
44096: GO 44651
// for i = 1 to hexes do
44098: LD_ADDR_VAR 0 7
44102: PUSH
44103: DOUBLE
44104: LD_INT 1
44106: DEC
44107: ST_TO_ADDR
44108: LD_VAR 0 12
44112: PUSH
44113: FOR_TO
44114: IFFALSE 44649
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44116: LD_ADDR_VAR 0 11
44120: PUSH
44121: LD_VAR 0 12
44125: PUSH
44126: LD_VAR 0 7
44130: ARRAY
44131: PUSH
44132: LD_INT 1
44134: ARRAY
44135: PPUSH
44136: LD_VAR 0 12
44140: PUSH
44141: LD_VAR 0 7
44145: ARRAY
44146: PUSH
44147: LD_INT 2
44149: ARRAY
44150: PPUSH
44151: CALL_OW 428
44155: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44156: LD_VAR 0 12
44160: PUSH
44161: LD_VAR 0 7
44165: ARRAY
44166: PUSH
44167: LD_INT 1
44169: ARRAY
44170: PPUSH
44171: LD_VAR 0 12
44175: PUSH
44176: LD_VAR 0 7
44180: ARRAY
44181: PUSH
44182: LD_INT 2
44184: ARRAY
44185: PPUSH
44186: CALL_OW 351
44190: PUSH
44191: LD_VAR 0 12
44195: PUSH
44196: LD_VAR 0 7
44200: ARRAY
44201: PUSH
44202: LD_INT 1
44204: ARRAY
44205: PPUSH
44206: LD_VAR 0 12
44210: PUSH
44211: LD_VAR 0 7
44215: ARRAY
44216: PUSH
44217: LD_INT 2
44219: ARRAY
44220: PPUSH
44221: CALL_OW 488
44225: NOT
44226: OR
44227: PUSH
44228: LD_VAR 0 11
44232: PPUSH
44233: CALL_OW 247
44237: PUSH
44238: LD_INT 3
44240: EQUAL
44241: OR
44242: IFFALSE 44248
// exit ;
44244: POP
44245: POP
44246: GO 44651
// if not tmp or not tmp in base then
44248: LD_VAR 0 11
44252: NOT
44253: PUSH
44254: LD_VAR 0 11
44258: PUSH
44259: LD_VAR 0 1
44263: IN
44264: NOT
44265: OR
44266: IFFALSE 44270
// continue ;
44268: GO 44113
// result := true ;
44270: LD_ADDR_VAR 0 6
44274: PUSH
44275: LD_INT 1
44277: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44278: LD_ADDR_VAR 0 15
44282: PUSH
44283: LD_VAR 0 1
44287: PPUSH
44288: LD_INT 22
44290: PUSH
44291: LD_VAR 0 11
44295: PPUSH
44296: CALL_OW 255
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 2
44307: PUSH
44308: LD_INT 30
44310: PUSH
44311: LD_INT 0
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 30
44320: PUSH
44321: LD_INT 1
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: LIST
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PPUSH
44337: CALL_OW 72
44341: ST_TO_ADDR
// if dep then
44342: LD_VAR 0 15
44346: IFFALSE 44482
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44348: LD_ADDR_VAR 0 14
44352: PUSH
44353: LD_VAR 0 15
44357: PUSH
44358: LD_INT 1
44360: ARRAY
44361: PPUSH
44362: CALL_OW 250
44366: PPUSH
44367: LD_VAR 0 15
44371: PUSH
44372: LD_INT 1
44374: ARRAY
44375: PPUSH
44376: CALL_OW 254
44380: PPUSH
44381: LD_INT 5
44383: PPUSH
44384: CALL_OW 272
44388: PUSH
44389: LD_VAR 0 15
44393: PUSH
44394: LD_INT 1
44396: ARRAY
44397: PPUSH
44398: CALL_OW 251
44402: PPUSH
44403: LD_VAR 0 15
44407: PUSH
44408: LD_INT 1
44410: ARRAY
44411: PPUSH
44412: CALL_OW 254
44416: PPUSH
44417: LD_INT 5
44419: PPUSH
44420: CALL_OW 273
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44429: LD_VAR 0 14
44433: PUSH
44434: LD_INT 1
44436: ARRAY
44437: PPUSH
44438: LD_VAR 0 14
44442: PUSH
44443: LD_INT 2
44445: ARRAY
44446: PPUSH
44447: CALL_OW 488
44451: IFFALSE 44482
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44453: LD_VAR 0 11
44457: PPUSH
44458: LD_VAR 0 14
44462: PUSH
44463: LD_INT 1
44465: ARRAY
44466: PPUSH
44467: LD_VAR 0 14
44471: PUSH
44472: LD_INT 2
44474: ARRAY
44475: PPUSH
44476: CALL_OW 111
// continue ;
44480: GO 44113
// end ; end ; r := GetDir ( tmp ) ;
44482: LD_ADDR_VAR 0 13
44486: PUSH
44487: LD_VAR 0 11
44491: PPUSH
44492: CALL_OW 254
44496: ST_TO_ADDR
// if r = 5 then
44497: LD_VAR 0 13
44501: PUSH
44502: LD_INT 5
44504: EQUAL
44505: IFFALSE 44515
// r := 0 ;
44507: LD_ADDR_VAR 0 13
44511: PUSH
44512: LD_INT 0
44514: ST_TO_ADDR
// for j = r to 5 do
44515: LD_ADDR_VAR 0 8
44519: PUSH
44520: DOUBLE
44521: LD_VAR 0 13
44525: DEC
44526: ST_TO_ADDR
44527: LD_INT 5
44529: PUSH
44530: FOR_TO
44531: IFFALSE 44645
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44533: LD_ADDR_VAR 0 9
44537: PUSH
44538: LD_VAR 0 11
44542: PPUSH
44543: CALL_OW 250
44547: PPUSH
44548: LD_VAR 0 8
44552: PPUSH
44553: LD_INT 2
44555: PPUSH
44556: CALL_OW 272
44560: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44561: LD_ADDR_VAR 0 10
44565: PUSH
44566: LD_VAR 0 11
44570: PPUSH
44571: CALL_OW 251
44575: PPUSH
44576: LD_VAR 0 8
44580: PPUSH
44581: LD_INT 2
44583: PPUSH
44584: CALL_OW 273
44588: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44589: LD_VAR 0 9
44593: PPUSH
44594: LD_VAR 0 10
44598: PPUSH
44599: CALL_OW 488
44603: PUSH
44604: LD_VAR 0 9
44608: PPUSH
44609: LD_VAR 0 10
44613: PPUSH
44614: CALL_OW 428
44618: NOT
44619: AND
44620: IFFALSE 44643
// begin ComMoveXY ( tmp , _x , _y ) ;
44622: LD_VAR 0 11
44626: PPUSH
44627: LD_VAR 0 9
44631: PPUSH
44632: LD_VAR 0 10
44636: PPUSH
44637: CALL_OW 111
// break ;
44641: GO 44645
// end ; end ;
44643: GO 44530
44645: POP
44646: POP
// end ;
44647: GO 44113
44649: POP
44650: POP
// end ;
44651: LD_VAR 0 6
44655: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
44656: LD_INT 0
44658: PPUSH
44659: PPUSH
44660: PPUSH
44661: PPUSH
44662: PPUSH
44663: PPUSH
44664: PPUSH
44665: PPUSH
44666: PPUSH
44667: PPUSH
// result := false ;
44668: LD_ADDR_VAR 0 6
44672: PUSH
44673: LD_INT 0
44675: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44676: LD_VAR 0 1
44680: NOT
44681: PUSH
44682: LD_VAR 0 1
44686: PPUSH
44687: CALL_OW 266
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: IN
44702: NOT
44703: OR
44704: PUSH
44705: LD_VAR 0 2
44709: NOT
44710: OR
44711: PUSH
44712: LD_VAR 0 5
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: LD_INT 1
44722: PUSH
44723: LD_INT 2
44725: PUSH
44726: LD_INT 3
44728: PUSH
44729: LD_INT 4
44731: PUSH
44732: LD_INT 5
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: IN
44743: NOT
44744: OR
44745: PUSH
44746: LD_VAR 0 3
44750: PPUSH
44751: LD_VAR 0 4
44755: PPUSH
44756: CALL_OW 488
44760: NOT
44761: OR
44762: IFFALSE 44766
// exit ;
44764: GO 45483
// pom := GetBase ( depot ) ;
44766: LD_ADDR_VAR 0 10
44770: PUSH
44771: LD_VAR 0 1
44775: PPUSH
44776: CALL_OW 274
44780: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44781: LD_ADDR_VAR 0 11
44785: PUSH
44786: LD_VAR 0 2
44790: PPUSH
44791: LD_VAR 0 1
44795: PPUSH
44796: CALL_OW 248
44800: PPUSH
44801: CALL_OW 450
44805: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44806: LD_VAR 0 10
44810: PPUSH
44811: LD_INT 1
44813: PPUSH
44814: CALL_OW 275
44818: PUSH
44819: LD_VAR 0 11
44823: PUSH
44824: LD_INT 1
44826: ARRAY
44827: GREATEREQUAL
44828: PUSH
44829: LD_VAR 0 10
44833: PPUSH
44834: LD_INT 2
44836: PPUSH
44837: CALL_OW 275
44841: PUSH
44842: LD_VAR 0 11
44846: PUSH
44847: LD_INT 2
44849: ARRAY
44850: GREATEREQUAL
44851: AND
44852: PUSH
44853: LD_VAR 0 10
44857: PPUSH
44858: LD_INT 3
44860: PPUSH
44861: CALL_OW 275
44865: PUSH
44866: LD_VAR 0 11
44870: PUSH
44871: LD_INT 3
44873: ARRAY
44874: GREATEREQUAL
44875: AND
44876: NOT
44877: IFFALSE 44881
// exit ;
44879: GO 45483
// if GetBType ( depot ) = b_depot then
44881: LD_VAR 0 1
44885: PPUSH
44886: CALL_OW 266
44890: PUSH
44891: LD_INT 0
44893: EQUAL
44894: IFFALSE 44906
// dist := 28 else
44896: LD_ADDR_VAR 0 14
44900: PUSH
44901: LD_INT 28
44903: ST_TO_ADDR
44904: GO 44914
// dist := 36 ;
44906: LD_ADDR_VAR 0 14
44910: PUSH
44911: LD_INT 36
44913: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44914: LD_VAR 0 1
44918: PPUSH
44919: LD_VAR 0 3
44923: PPUSH
44924: LD_VAR 0 4
44928: PPUSH
44929: CALL_OW 297
44933: PUSH
44934: LD_VAR 0 14
44938: GREATER
44939: IFFALSE 44943
// exit ;
44941: GO 45483
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44943: LD_ADDR_VAR 0 12
44947: PUSH
44948: LD_VAR 0 2
44952: PPUSH
44953: LD_VAR 0 3
44957: PPUSH
44958: LD_VAR 0 4
44962: PPUSH
44963: LD_VAR 0 5
44967: PPUSH
44968: LD_VAR 0 1
44972: PPUSH
44973: CALL_OW 248
44977: PPUSH
44978: LD_INT 0
44980: PPUSH
44981: CALL 45488 0 6
44985: ST_TO_ADDR
// if not hexes then
44986: LD_VAR 0 12
44990: NOT
44991: IFFALSE 44995
// exit ;
44993: GO 45483
// hex := GetHexInfo ( x , y ) ;
44995: LD_ADDR_VAR 0 15
44999: PUSH
45000: LD_VAR 0 3
45004: PPUSH
45005: LD_VAR 0 4
45009: PPUSH
45010: CALL_OW 546
45014: ST_TO_ADDR
// if hex [ 1 ] then
45015: LD_VAR 0 15
45019: PUSH
45020: LD_INT 1
45022: ARRAY
45023: IFFALSE 45027
// exit ;
45025: GO 45483
// height := hex [ 2 ] ;
45027: LD_ADDR_VAR 0 13
45031: PUSH
45032: LD_VAR 0 15
45036: PUSH
45037: LD_INT 2
45039: ARRAY
45040: ST_TO_ADDR
// for i = 1 to hexes do
45041: LD_ADDR_VAR 0 7
45045: PUSH
45046: DOUBLE
45047: LD_INT 1
45049: DEC
45050: ST_TO_ADDR
45051: LD_VAR 0 12
45055: PUSH
45056: FOR_TO
45057: IFFALSE 45387
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45059: LD_VAR 0 12
45063: PUSH
45064: LD_VAR 0 7
45068: ARRAY
45069: PUSH
45070: LD_INT 1
45072: ARRAY
45073: PPUSH
45074: LD_VAR 0 12
45078: PUSH
45079: LD_VAR 0 7
45083: ARRAY
45084: PUSH
45085: LD_INT 2
45087: ARRAY
45088: PPUSH
45089: CALL_OW 488
45093: NOT
45094: PUSH
45095: LD_VAR 0 12
45099: PUSH
45100: LD_VAR 0 7
45104: ARRAY
45105: PUSH
45106: LD_INT 1
45108: ARRAY
45109: PPUSH
45110: LD_VAR 0 12
45114: PUSH
45115: LD_VAR 0 7
45119: ARRAY
45120: PUSH
45121: LD_INT 2
45123: ARRAY
45124: PPUSH
45125: CALL_OW 428
45129: PUSH
45130: LD_INT 0
45132: GREATER
45133: OR
45134: PUSH
45135: LD_VAR 0 12
45139: PUSH
45140: LD_VAR 0 7
45144: ARRAY
45145: PUSH
45146: LD_INT 1
45148: ARRAY
45149: PPUSH
45150: LD_VAR 0 12
45154: PUSH
45155: LD_VAR 0 7
45159: ARRAY
45160: PUSH
45161: LD_INT 2
45163: ARRAY
45164: PPUSH
45165: CALL_OW 351
45169: OR
45170: IFFALSE 45176
// exit ;
45172: POP
45173: POP
45174: GO 45483
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45176: LD_ADDR_VAR 0 8
45180: PUSH
45181: LD_VAR 0 12
45185: PUSH
45186: LD_VAR 0 7
45190: ARRAY
45191: PUSH
45192: LD_INT 1
45194: ARRAY
45195: PPUSH
45196: LD_VAR 0 12
45200: PUSH
45201: LD_VAR 0 7
45205: ARRAY
45206: PUSH
45207: LD_INT 2
45209: ARRAY
45210: PPUSH
45211: CALL_OW 546
45215: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45216: LD_VAR 0 8
45220: PUSH
45221: LD_INT 1
45223: ARRAY
45224: PUSH
45225: LD_VAR 0 8
45229: PUSH
45230: LD_INT 2
45232: ARRAY
45233: PUSH
45234: LD_VAR 0 13
45238: PUSH
45239: LD_INT 2
45241: PLUS
45242: GREATER
45243: OR
45244: PUSH
45245: LD_VAR 0 8
45249: PUSH
45250: LD_INT 2
45252: ARRAY
45253: PUSH
45254: LD_VAR 0 13
45258: PUSH
45259: LD_INT 2
45261: MINUS
45262: LESS
45263: OR
45264: PUSH
45265: LD_VAR 0 8
45269: PUSH
45270: LD_INT 3
45272: ARRAY
45273: PUSH
45274: LD_INT 0
45276: PUSH
45277: LD_INT 8
45279: PUSH
45280: LD_INT 9
45282: PUSH
45283: LD_INT 10
45285: PUSH
45286: LD_INT 11
45288: PUSH
45289: LD_INT 12
45291: PUSH
45292: LD_INT 13
45294: PUSH
45295: LD_INT 16
45297: PUSH
45298: LD_INT 17
45300: PUSH
45301: LD_INT 18
45303: PUSH
45304: LD_INT 19
45306: PUSH
45307: LD_INT 20
45309: PUSH
45310: LD_INT 21
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: IN
45328: NOT
45329: OR
45330: PUSH
45331: LD_VAR 0 8
45335: PUSH
45336: LD_INT 5
45338: ARRAY
45339: NOT
45340: OR
45341: PUSH
45342: LD_VAR 0 8
45346: PUSH
45347: LD_INT 6
45349: ARRAY
45350: PUSH
45351: LD_INT 1
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: LD_INT 7
45359: PUSH
45360: LD_INT 9
45362: PUSH
45363: LD_INT 10
45365: PUSH
45366: LD_INT 11
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: IN
45377: NOT
45378: OR
45379: IFFALSE 45385
// exit ;
45381: POP
45382: POP
45383: GO 45483
// end ;
45385: GO 45056
45387: POP
45388: POP
// side := GetSide ( depot ) ;
45389: LD_ADDR_VAR 0 9
45393: PUSH
45394: LD_VAR 0 1
45398: PPUSH
45399: CALL_OW 255
45403: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45404: LD_VAR 0 9
45408: PPUSH
45409: LD_VAR 0 3
45413: PPUSH
45414: LD_VAR 0 4
45418: PPUSH
45419: LD_INT 20
45421: PPUSH
45422: CALL 38137 0 4
45426: PUSH
45427: LD_INT 4
45429: ARRAY
45430: IFFALSE 45434
// exit ;
45432: GO 45483
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45434: LD_VAR 0 2
45438: PUSH
45439: LD_INT 29
45441: PUSH
45442: LD_INT 30
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: IN
45449: PUSH
45450: LD_VAR 0 3
45454: PPUSH
45455: LD_VAR 0 4
45459: PPUSH
45460: LD_VAR 0 9
45464: PPUSH
45465: CALL_OW 440
45469: NOT
45470: AND
45471: IFFALSE 45475
// exit ;
45473: GO 45483
// result := true ;
45475: LD_ADDR_VAR 0 6
45479: PUSH
45480: LD_INT 1
45482: ST_TO_ADDR
// end ;
45483: LD_VAR 0 6
45487: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45488: LD_INT 0
45490: PPUSH
45491: PPUSH
45492: PPUSH
45493: PPUSH
45494: PPUSH
45495: PPUSH
45496: PPUSH
45497: PPUSH
45498: PPUSH
45499: PPUSH
45500: PPUSH
45501: PPUSH
45502: PPUSH
45503: PPUSH
45504: PPUSH
45505: PPUSH
45506: PPUSH
45507: PPUSH
45508: PPUSH
45509: PPUSH
45510: PPUSH
45511: PPUSH
45512: PPUSH
45513: PPUSH
45514: PPUSH
45515: PPUSH
45516: PPUSH
45517: PPUSH
45518: PPUSH
45519: PPUSH
45520: PPUSH
45521: PPUSH
45522: PPUSH
45523: PPUSH
45524: PPUSH
45525: PPUSH
45526: PPUSH
45527: PPUSH
45528: PPUSH
45529: PPUSH
45530: PPUSH
45531: PPUSH
45532: PPUSH
45533: PPUSH
45534: PPUSH
45535: PPUSH
45536: PPUSH
45537: PPUSH
45538: PPUSH
45539: PPUSH
45540: PPUSH
45541: PPUSH
45542: PPUSH
45543: PPUSH
45544: PPUSH
45545: PPUSH
45546: PPUSH
45547: PPUSH
// result = [ ] ;
45548: LD_ADDR_VAR 0 7
45552: PUSH
45553: EMPTY
45554: ST_TO_ADDR
// temp_list = [ ] ;
45555: LD_ADDR_VAR 0 9
45559: PUSH
45560: EMPTY
45561: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45562: LD_VAR 0 4
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: LD_INT 3
45578: PUSH
45579: LD_INT 4
45581: PUSH
45582: LD_INT 5
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: IN
45593: NOT
45594: PUSH
45595: LD_VAR 0 1
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: IN
45610: PUSH
45611: LD_VAR 0 5
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: LD_INT 2
45621: PUSH
45622: LD_INT 3
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: LIST
45629: IN
45630: NOT
45631: AND
45632: OR
45633: IFFALSE 45637
// exit ;
45635: GO 64028
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45637: LD_VAR 0 1
45641: PUSH
45642: LD_INT 6
45644: PUSH
45645: LD_INT 7
45647: PUSH
45648: LD_INT 8
45650: PUSH
45651: LD_INT 13
45653: PUSH
45654: LD_INT 12
45656: PUSH
45657: LD_INT 15
45659: PUSH
45660: LD_INT 11
45662: PUSH
45663: LD_INT 14
45665: PUSH
45666: LD_INT 10
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: IN
45680: IFFALSE 45690
// btype = b_lab ;
45682: LD_ADDR_VAR 0 1
45686: PUSH
45687: LD_INT 6
45689: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45690: LD_VAR 0 6
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: LD_INT 2
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: LIST
45708: IN
45709: NOT
45710: PUSH
45711: LD_VAR 0 1
45715: PUSH
45716: LD_INT 0
45718: PUSH
45719: LD_INT 1
45721: PUSH
45722: LD_INT 2
45724: PUSH
45725: LD_INT 3
45727: PUSH
45728: LD_INT 6
45730: PUSH
45731: LD_INT 36
45733: PUSH
45734: LD_INT 4
45736: PUSH
45737: LD_INT 5
45739: PUSH
45740: LD_INT 31
45742: PUSH
45743: LD_INT 32
45745: PUSH
45746: LD_INT 33
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: IN
45762: NOT
45763: PUSH
45764: LD_VAR 0 6
45768: PUSH
45769: LD_INT 1
45771: EQUAL
45772: AND
45773: OR
45774: PUSH
45775: LD_VAR 0 1
45779: PUSH
45780: LD_INT 2
45782: PUSH
45783: LD_INT 3
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: IN
45790: NOT
45791: PUSH
45792: LD_VAR 0 6
45796: PUSH
45797: LD_INT 2
45799: EQUAL
45800: AND
45801: OR
45802: IFFALSE 45812
// mode = 0 ;
45804: LD_ADDR_VAR 0 6
45808: PUSH
45809: LD_INT 0
45811: ST_TO_ADDR
// case mode of 0 :
45812: LD_VAR 0 6
45816: PUSH
45817: LD_INT 0
45819: DOUBLE
45820: EQUAL
45821: IFTRUE 45825
45823: GO 57278
45825: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45826: LD_ADDR_VAR 0 11
45830: PUSH
45831: LD_INT 0
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: LD_INT 1
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 1
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: LD_INT 1
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: NEG
45885: PUSH
45886: LD_INT 0
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: LD_INT 2
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: LD_INT 2
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 1
45930: PUSH
45931: LD_INT 1
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: LD_INT 2
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 0
45951: PUSH
45952: LD_INT 2
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 1
45961: NEG
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: LD_INT 3
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: LD_INT 3
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: NEG
45993: PUSH
45994: LD_INT 2
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46019: LD_ADDR_VAR 0 12
46023: PUSH
46024: LD_INT 0
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: PUSH
46058: LD_INT 1
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: LD_INT 1
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: NEG
46089: PUSH
46090: LD_INT 1
46092: NEG
46093: PUSH
46094: EMPTY
46095: LIST
46096: LIST
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: LD_INT 1
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: LD_INT 0
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 2
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 2
46142: NEG
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 2
46153: NEG
46154: PUSH
46155: LD_INT 1
46157: NEG
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: PUSH
46163: LD_INT 2
46165: NEG
46166: PUSH
46167: LD_INT 1
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 3
46176: NEG
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 3
46187: NEG
46188: PUSH
46189: LD_INT 1
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46215: LD_ADDR_VAR 0 13
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 0
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: LD_INT 0
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 0
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: LD_INT 0
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: LD_INT 2
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 2
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: PUSH
46316: LD_INT 2
46318: PUSH
46319: LD_INT 2
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 2
46338: NEG
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 2
46350: NEG
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 2
46362: NEG
46363: PUSH
46364: LD_INT 3
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 3
46374: NEG
46375: PUSH
46376: LD_INT 2
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 3
46386: NEG
46387: PUSH
46388: LD_INT 3
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46414: LD_ADDR_VAR 0 14
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 0
46431: PUSH
46432: LD_INT 1
46434: NEG
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: LD_INT 0
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: LD_INT 1
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 0
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: NEG
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: LD_INT 2
46499: NEG
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 2
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: LD_INT 2
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: NEG
46550: PUSH
46551: LD_INT 1
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: LD_INT 3
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: LD_INT 3
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: LD_INT 2
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46610: LD_ADDR_VAR 0 15
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 0
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 2
46712: PUSH
46713: LD_INT 1
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 1
46722: NEG
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 2
46744: NEG
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 2
46756: PUSH
46757: LD_INT 1
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 3
46767: PUSH
46768: LD_INT 0
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 3
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46803: LD_ADDR_VAR 0 16
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 0
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: LD_INT 1
46876: NEG
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: LD_INT 2
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 2
46896: PUSH
46897: LD_INT 1
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: LD_INT 2
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: NEG
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 2
46938: NEG
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 3
46950: PUSH
46951: LD_INT 2
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 3
46960: PUSH
46961: LD_INT 3
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 2
46970: PUSH
46971: LD_INT 3
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46996: LD_ADDR_VAR 0 17
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 0
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: LD_INT 1
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: LD_INT 0
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: LD_INT 1
47069: NEG
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: NEG
47078: PUSH
47079: LD_INT 2
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 0
47089: PUSH
47090: LD_INT 2
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 1
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 2
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: LD_INT 2
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 2
47131: PUSH
47132: LD_INT 2
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: LD_INT 2
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: LD_INT 2
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 1
47161: NEG
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 2
47172: NEG
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 2
47183: NEG
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 2
47195: NEG
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: LIST
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47226: LD_ADDR_VAR 0 18
47230: PUSH
47231: LD_INT 0
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 0
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 1
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: PUSH
47265: LD_INT 1
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 0
47274: PUSH
47275: LD_INT 1
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 1
47295: NEG
47296: PUSH
47297: LD_INT 1
47299: NEG
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 1
47307: NEG
47308: PUSH
47309: LD_INT 2
47311: NEG
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 0
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 2
47341: PUSH
47342: LD_INT 0
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: PUSH
47349: LD_INT 2
47351: PUSH
47352: LD_INT 1
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 2
47361: PUSH
47362: LD_INT 2
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: LD_INT 2
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 0
47381: PUSH
47382: LD_INT 2
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: LD_INT 1
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 2
47402: NEG
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 2
47413: NEG
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 2
47425: NEG
47426: PUSH
47427: LD_INT 2
47429: NEG
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47456: LD_ADDR_VAR 0 19
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: LD_INT 0
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 0
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: PUSH
47485: LD_INT 0
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 1
47494: PUSH
47495: LD_INT 1
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 0
47504: PUSH
47505: LD_INT 1
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 1
47514: NEG
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: LD_INT 1
47529: NEG
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: LD_INT 2
47541: NEG
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: LD_INT 2
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 1
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 2
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 2
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 2
47591: PUSH
47592: LD_INT 2
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: LD_INT 2
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: LD_INT 2
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: LD_INT 1
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 2
47632: NEG
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 2
47643: NEG
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 2
47655: NEG
47656: PUSH
47657: LD_INT 2
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47686: LD_ADDR_VAR 0 20
47690: PUSH
47691: LD_INT 0
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 0
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: LD_INT 0
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: LD_INT 1
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 0
47734: PUSH
47735: LD_INT 1
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: PUSH
47742: LD_INT 1
47744: NEG
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 2
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 2
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 2
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: LD_INT 2
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: LD_INT 1
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 2
47862: NEG
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 2
47873: NEG
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 2
47885: NEG
47886: PUSH
47887: LD_INT 2
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47916: LD_ADDR_VAR 0 21
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 0
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 1
47954: PUSH
47955: LD_INT 1
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 0
47964: PUSH
47965: LD_INT 1
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: NEG
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: LD_INT 1
47989: NEG
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: LD_INT 2
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: LD_INT 2
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 2
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 2
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 2
48051: PUSH
48052: LD_INT 2
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: LD_INT 2
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: LD_INT 2
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 2
48092: NEG
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 2
48103: NEG
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48146: LD_ADDR_VAR 0 22
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: LD_INT 1
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: LD_INT 2
48231: NEG
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 0
48239: PUSH
48240: LD_INT 2
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 2
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 2
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 2
48281: PUSH
48282: LD_INT 2
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: PUSH
48292: LD_INT 2
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: LD_INT 2
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 2
48322: NEG
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 2
48333: NEG
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: NEG
48346: PUSH
48347: LD_INT 2
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48376: LD_ADDR_VAR 0 23
48380: PUSH
48381: LD_INT 0
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: LD_INT 1
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: LD_INT 1
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: NEG
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: LD_INT 2
48461: NEG
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 2
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 1
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 2
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 2
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 2
48511: PUSH
48512: LD_INT 2
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: PUSH
48522: LD_INT 2
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: LD_INT 2
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: LD_INT 1
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 2
48552: NEG
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 2
48563: NEG
48564: PUSH
48565: LD_INT 1
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: NEG
48576: PUSH
48577: LD_INT 2
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 2
48587: NEG
48588: PUSH
48589: LD_INT 3
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 1
48599: NEG
48600: PUSH
48601: LD_INT 3
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: LD_INT 2
48614: NEG
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48656: LD_ADDR_VAR 0 24
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: NEG
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: NEG
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: LD_INT 2
48741: NEG
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 2
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 2
48771: PUSH
48772: LD_INT 0
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 2
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 2
48791: PUSH
48792: LD_INT 2
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: LD_INT 2
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: NEG
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 2
48832: NEG
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 2
48843: NEG
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 2
48855: NEG
48856: PUSH
48857: LD_INT 2
48859: NEG
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 1
48867: PUSH
48868: LD_INT 2
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 2
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 3
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 3
48899: PUSH
48900: LD_INT 2
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48932: LD_ADDR_VAR 0 25
48936: PUSH
48937: LD_INT 0
48939: PUSH
48940: LD_INT 0
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 0
48949: PUSH
48950: LD_INT 1
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: LD_INT 0
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: LD_INT 1
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: LD_INT 1
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: LD_INT 2
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 0
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: PUSH
49037: LD_INT 1
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 2
49047: PUSH
49048: LD_INT 0
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 2
49057: PUSH
49058: LD_INT 1
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 2
49067: PUSH
49068: LD_INT 2
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 1
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: LD_INT 2
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: LD_INT 1
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 2
49108: NEG
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 2
49131: NEG
49132: PUSH
49133: LD_INT 2
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 3
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 3
49153: PUSH
49154: LD_INT 2
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 2
49163: PUSH
49164: LD_INT 3
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 1
49173: PUSH
49174: LD_INT 3
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49206: LD_ADDR_VAR 0 26
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: LD_INT 1
49244: PUSH
49245: LD_INT 1
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: NEG
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: LD_INT 1
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: LD_INT 2
49291: NEG
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: LD_INT 2
49302: NEG
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: LD_INT 1
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 2
49321: PUSH
49322: LD_INT 0
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 2
49341: PUSH
49342: LD_INT 2
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 1
49351: PUSH
49352: LD_INT 2
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: NEG
49372: PUSH
49373: LD_INT 1
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 2
49382: NEG
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 2
49393: NEG
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 2
49405: NEG
49406: PUSH
49407: LD_INT 2
49409: NEG
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 2
49417: PUSH
49418: LD_INT 3
49420: PUSH
49421: EMPTY
49422: LIST
49423: LIST
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: LD_INT 3
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: LD_INT 2
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 2
49448: NEG
49449: PUSH
49450: LD_INT 1
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49482: LD_ADDR_VAR 0 27
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: LD_INT 0
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: LD_INT 2
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 2
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 2
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 2
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 2
49617: PUSH
49618: LD_INT 2
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: LD_INT 2
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 1
49647: NEG
49648: PUSH
49649: LD_INT 1
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 2
49658: NEG
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 2
49669: NEG
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 2
49681: NEG
49682: PUSH
49683: LD_INT 2
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: NEG
49694: PUSH
49695: LD_INT 2
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 2
49704: NEG
49705: PUSH
49706: LD_INT 1
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 3
49715: NEG
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 3
49727: NEG
49728: PUSH
49729: LD_INT 2
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49762: LD_ADDR_VAR 0 28
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: LD_INT 1
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 1
49820: NEG
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: LD_INT 1
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: LD_INT 2
49847: NEG
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: LD_INT 2
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 1
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 2
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 2
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 2
49897: PUSH
49898: LD_INT 2
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 1
49907: PUSH
49908: LD_INT 2
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: LD_INT 2
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 2
49938: NEG
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 2
49949: NEG
49950: PUSH
49951: LD_INT 1
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 2
49961: NEG
49962: PUSH
49963: LD_INT 2
49965: NEG
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 2
49973: NEG
49974: PUSH
49975: LD_INT 3
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: LD_INT 3
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 3
49997: NEG
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 3
50009: NEG
50010: PUSH
50011: LD_INT 2
50013: NEG
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50044: LD_ADDR_VAR 0 29
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 0
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: PUSH
50073: LD_INT 0
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: LD_INT 1
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: PUSH
50104: LD_INT 0
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: NEG
50126: PUSH
50127: LD_INT 2
50129: NEG
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: LD_INT 2
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 2
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 2
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: LD_INT 2
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: LD_INT 2
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: LD_INT 1
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 2
50210: NEG
50211: PUSH
50212: LD_INT 1
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 2
50222: NEG
50223: PUSH
50224: LD_INT 2
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 2
50234: NEG
50235: PUSH
50236: LD_INT 3
50238: NEG
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 2
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 3
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: PUSH
50268: LD_INT 3
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: NEG
50278: PUSH
50279: LD_INT 2
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 3
50288: NEG
50289: PUSH
50290: LD_INT 2
50292: NEG
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50323: LD_ADDR_VAR 0 30
50327: PUSH
50328: LD_INT 0
50330: PUSH
50331: LD_INT 0
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: LD_INT 1
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: LD_INT 0
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: PUSH
50359: LD_INT 1
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: LD_INT 1
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 1
50381: NEG
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: NEG
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 0
50416: PUSH
50417: LD_INT 2
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 1
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 2
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 2
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: PUSH
50459: LD_INT 2
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: LD_INT 2
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: NEG
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 2
50489: NEG
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 2
50500: NEG
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: LD_INT 3
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 1
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 3
50535: PUSH
50536: LD_INT 2
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 2
50545: PUSH
50546: LD_INT 3
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 2
50555: NEG
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 3
50566: NEG
50567: PUSH
50568: LD_INT 1
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50601: LD_ADDR_VAR 0 31
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: LD_INT 1
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: LD_INT 2
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: LD_INT 1
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 2
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: LD_INT 2
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: LD_INT 2
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 1
50755: NEG
50756: PUSH
50757: LD_INT 1
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 2
50766: NEG
50767: PUSH
50768: LD_INT 1
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 2
50778: NEG
50779: PUSH
50780: LD_INT 2
50782: NEG
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: LD_INT 3
50794: NEG
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 2
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 3
50813: PUSH
50814: LD_INT 1
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: PUSH
50824: LD_INT 3
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 1
50833: NEG
50834: PUSH
50835: LD_INT 2
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 3
50844: NEG
50845: PUSH
50846: LD_INT 2
50848: NEG
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50879: LD_ADDR_VAR 0 32
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 0
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 1
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: LD_INT 1
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: NEG
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: LD_INT 1
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: LD_INT 2
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 0
50972: PUSH
50973: LD_INT 2
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 1
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 2
50994: PUSH
50995: LD_INT 1
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 2
51004: PUSH
51005: LD_INT 2
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: LD_INT 2
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: LD_INT 2
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 1
51034: NEG
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 2
51045: NEG
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 2
51056: NEG
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 3
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: LD_INT 2
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 3
51091: PUSH
51092: LD_INT 2
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 2
51101: PUSH
51102: LD_INT 3
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: NEG
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 3
51122: NEG
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51157: LD_ADDR_VAR 0 33
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: LD_INT 1
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 0
51205: PUSH
51206: LD_INT 1
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: LD_INT 1
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: LD_INT 2
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: LD_INT 1
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 2
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 2
51271: PUSH
51272: LD_INT 1
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: LD_INT 2
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: LD_INT 2
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: LD_INT 1
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: LD_INT 1
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 2
51335: NEG
51336: PUSH
51337: LD_INT 2
51339: NEG
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 2
51347: NEG
51348: PUSH
51349: LD_INT 3
51351: NEG
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 2
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 3
51370: PUSH
51371: LD_INT 1
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: LD_INT 3
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: LD_INT 2
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 3
51401: NEG
51402: PUSH
51403: LD_INT 2
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51436: LD_ADDR_VAR 0 34
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: LD_INT 0
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: LD_INT 1
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 1
51494: NEG
51495: PUSH
51496: LD_INT 0
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: LD_INT 1
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 1
51517: NEG
51518: PUSH
51519: LD_INT 2
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: LD_INT 2
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: PUSH
51541: LD_INT 1
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 2
51561: PUSH
51562: LD_INT 2
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: LD_INT 2
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: NEG
51582: PUSH
51583: LD_INT 1
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 2
51592: NEG
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 2
51603: NEG
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 2
51615: NEG
51616: PUSH
51617: LD_INT 2
51619: NEG
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: LD_INT 3
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: PUSH
51640: LD_INT 2
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 3
51650: PUSH
51651: LD_INT 2
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 2
51660: PUSH
51661: LD_INT 3
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 2
51670: NEG
51671: PUSH
51672: LD_INT 1
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 3
51681: NEG
51682: PUSH
51683: LD_INT 1
51685: NEG
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: LIST
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51716: LD_ADDR_VAR 0 35
51720: PUSH
51721: LD_INT 0
51723: PUSH
51724: LD_INT 0
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: LD_INT 1
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: LD_INT 0
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 1
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 1
51774: NEG
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 2
51797: PUSH
51798: LD_INT 1
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 2
51807: NEG
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51828: LD_ADDR_VAR 0 36
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 1
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: LD_INT 1
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 1
51909: NEG
51910: PUSH
51911: LD_INT 2
51913: NEG
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: LD_INT 2
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51940: LD_ADDR_VAR 0 37
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: LD_INT 1
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: NEG
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52052: LD_ADDR_VAR 0 38
52056: PUSH
52057: LD_INT 0
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 1
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: LD_INT 1
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 1
52110: NEG
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 2
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 2
52143: NEG
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52164: LD_ADDR_VAR 0 39
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: LD_INT 1
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: LD_INT 0
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: LD_INT 1
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 1
52222: NEG
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: LD_INT 1
52237: NEG
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: LD_INT 2
52249: NEG
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: LD_INT 2
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52276: LD_ADDR_VAR 0 40
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 0
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: LD_INT 0
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52388: LD_ADDR_VAR 0 41
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: LD_INT 0
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: LD_INT 1
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: LD_INT 2
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 2
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 2
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 2
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: LD_INT 2
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 2
52543: NEG
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 2
52554: NEG
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: NEG
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 2
52578: NEG
52579: PUSH
52580: LD_INT 3
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 2
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 3
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 3
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 3
52621: PUSH
52622: LD_INT 2
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 3
52631: PUSH
52632: LD_INT 3
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: LD_INT 3
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 2
52651: NEG
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 3
52662: NEG
52663: PUSH
52664: LD_INT 0
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 3
52673: NEG
52674: PUSH
52675: LD_INT 1
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 3
52685: NEG
52686: PUSH
52687: LD_INT 2
52689: NEG
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 3
52697: NEG
52698: PUSH
52699: LD_INT 3
52701: NEG
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52738: LD_ADDR_VAR 0 42
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 0
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 1
52796: NEG
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: LD_INT 1
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: LD_INT 2
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: LD_INT 2
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 1
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 2
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 2
52863: PUSH
52864: LD_INT 2
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 1
52873: PUSH
52874: LD_INT 2
52876: PUSH
52877: EMPTY
52878: LIST
52879: LIST
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 2
52904: NEG
52905: PUSH
52906: LD_INT 1
52908: NEG
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 2
52916: NEG
52917: PUSH
52918: LD_INT 2
52920: NEG
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 2
52928: NEG
52929: PUSH
52930: LD_INT 3
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: LD_INT 3
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: LD_INT 3
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 1
52963: PUSH
52964: LD_INT 2
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 3
52974: PUSH
52975: LD_INT 2
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 3
52984: PUSH
52985: LD_INT 3
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 2
52994: PUSH
52995: LD_INT 3
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: PUSH
53005: LD_INT 3
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: LD_INT 3
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: LD_INT 2
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 3
53035: NEG
53036: PUSH
53037: LD_INT 2
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 3
53047: NEG
53048: PUSH
53049: LD_INT 3
53051: NEG
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53088: LD_ADDR_VAR 0 43
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: LD_INT 2
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: LD_INT 2
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 2
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 2
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: LD_INT 2
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: LD_INT 2
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 2
53254: NEG
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: NEG
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: LD_INT 3
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 0
53289: PUSH
53290: LD_INT 3
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: LD_INT 2
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 2
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 3
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 3
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: LD_INT 3
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: LD_INT 3
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: LD_INT 2
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: LD_INT 1
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 3
53384: NEG
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 3
53395: NEG
53396: PUSH
53397: LD_INT 1
53399: NEG
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: LIST
53411: LIST
53412: LIST
53413: LIST
53414: LIST
53415: LIST
53416: LIST
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53436: LD_ADDR_VAR 0 44
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 0
53453: PUSH
53454: LD_INT 1
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 1
53474: PUSH
53475: LD_INT 1
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: LD_INT 1
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: NEG
53518: PUSH
53519: LD_INT 2
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 2
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 2
53560: PUSH
53561: LD_INT 2
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 1
53570: PUSH
53571: LD_INT 2
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 2
53591: NEG
53592: PUSH
53593: LD_INT 0
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: LD_INT 1
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 2
53614: NEG
53615: PUSH
53616: LD_INT 2
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 2
53626: NEG
53627: PUSH
53628: LD_INT 3
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 2
53638: PUSH
53639: LD_INT 1
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 3
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 3
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 3
53669: PUSH
53670: LD_INT 2
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 3
53679: PUSH
53680: LD_INT 3
53682: PUSH
53683: EMPTY
53684: LIST
53685: LIST
53686: PUSH
53687: LD_INT 2
53689: PUSH
53690: LD_INT 3
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 2
53699: NEG
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 3
53710: NEG
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 3
53721: NEG
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 3
53733: NEG
53734: PUSH
53735: LD_INT 2
53737: NEG
53738: PUSH
53739: EMPTY
53740: LIST
53741: LIST
53742: PUSH
53743: LD_INT 3
53745: NEG
53746: PUSH
53747: LD_INT 3
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53786: LD_ADDR_VAR 0 45
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: LD_INT 1
53806: NEG
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: PUSH
53815: LD_INT 0
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: LD_INT 1
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 0
53834: PUSH
53835: LD_INT 1
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 1
53844: NEG
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 1
53855: NEG
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: LD_INT 2
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: LD_INT 2
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: LD_INT 1
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 2
53901: PUSH
53902: LD_INT 1
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 2
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: LD_INT 2
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: LD_INT 2
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 2
53952: NEG
53953: PUSH
53954: LD_INT 1
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: LD_INT 2
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 2
53976: NEG
53977: PUSH
53978: LD_INT 3
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: LD_INT 3
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 0
54000: PUSH
54001: LD_INT 3
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 1
54011: PUSH
54012: LD_INT 2
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 3
54022: PUSH
54023: LD_INT 2
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 3
54032: PUSH
54033: LD_INT 3
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 2
54042: PUSH
54043: LD_INT 3
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 1
54052: PUSH
54053: LD_INT 3
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: LD_INT 3
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 3
54083: NEG
54084: PUSH
54085: LD_INT 2
54087: NEG
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 3
54095: NEG
54096: PUSH
54097: LD_INT 3
54099: NEG
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54136: LD_ADDR_VAR 0 46
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: LD_INT 0
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 0
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: LD_INT 1
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: LD_INT 2
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: LD_INT 1
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 2
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 2
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: LD_INT 2
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 2
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 2
54302: NEG
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 2
54313: NEG
54314: PUSH
54315: LD_INT 1
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: LD_INT 3
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 3
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: LD_INT 2
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 2
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 3
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 3
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: LD_INT 3
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: LD_INT 3
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: NEG
54411: PUSH
54412: LD_INT 2
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 2
54421: NEG
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 3
54432: NEG
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 3
54443: NEG
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54484: LD_ADDR_VAR 0 47
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 0
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 0
54532: PUSH
54533: LD_INT 1
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 1
54565: NEG
54566: PUSH
54567: LD_INT 2
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: LD_INT 2
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: LD_INT 1
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 2
54599: NEG
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 2
54611: NEG
54612: PUSH
54613: LD_INT 2
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54635: LD_ADDR_VAR 0 48
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 0
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: NEG
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: LD_INT 1
54708: NEG
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: LD_INT 2
54720: NEG
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: LD_INT 2
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 2
54760: PUSH
54761: LD_INT 1
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54782: LD_ADDR_VAR 0 49
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: LD_INT 1
54802: NEG
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 1
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 1
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 2
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 2
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 2
54894: PUSH
54895: LD_INT 2
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: LD_INT 2
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54926: LD_ADDR_VAR 0 50
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: LD_INT 1
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: LD_INT 1
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 2
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 2
55017: PUSH
55018: LD_INT 2
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: PUSH
55025: LD_INT 1
55027: PUSH
55028: LD_INT 2
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 0
55037: PUSH
55038: LD_INT 2
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55070: LD_ADDR_VAR 0 51
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: PUSH
55099: LD_INT 0
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 0
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: LD_INT 0
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: LD_INT 1
55143: NEG
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: LD_INT 2
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 0
55161: PUSH
55162: LD_INT 2
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 1
55171: NEG
55172: PUSH
55173: LD_INT 1
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: NEG
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 2
55193: NEG
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55217: LD_ADDR_VAR 0 52
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: LD_INT 1
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 1
55275: NEG
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 1
55298: NEG
55299: PUSH
55300: LD_INT 2
55302: NEG
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: LD_INT 1
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 2
55321: NEG
55322: PUSH
55323: LD_INT 0
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 2
55332: NEG
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: LD_INT 2
55348: NEG
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55368: LD_ADDR_VAR 0 53
55372: PUSH
55373: LD_INT 0
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: LD_INT 0
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: LD_INT 1
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: LD_INT 1
55441: NEG
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 1
55449: NEG
55450: PUSH
55451: LD_INT 2
55453: NEG
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: LD_INT 2
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 1
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 2
55503: PUSH
55504: LD_INT 2
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: LD_INT 2
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: LD_INT 2
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 2
55544: NEG
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 2
55555: NEG
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 2
55567: NEG
55568: PUSH
55569: LD_INT 2
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55598: LD_ADDR_VAR 0 54
55602: PUSH
55603: LD_INT 0
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 1
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: NEG
55657: PUSH
55658: LD_INT 0
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: LD_INT 1
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 1
55679: NEG
55680: PUSH
55681: LD_INT 2
55683: NEG
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: LD_INT 2
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 1
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 2
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: LD_INT 1
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 2
55733: PUSH
55734: LD_INT 2
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 1
55743: PUSH
55744: LD_INT 2
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 0
55753: PUSH
55754: LD_INT 2
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 1
55763: NEG
55764: PUSH
55765: LD_INT 1
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 2
55774: NEG
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 2
55785: NEG
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 2
55797: NEG
55798: PUSH
55799: LD_INT 2
55801: NEG
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55828: LD_ADDR_VAR 0 55
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: LD_INT 1
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: LD_INT 0
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 1
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 0
55876: PUSH
55877: LD_INT 1
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: LD_INT 1
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: LD_INT 2
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: LD_INT 2
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 1
55932: PUSH
55933: LD_INT 1
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 2
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 2
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 2
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: LD_INT 2
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: LD_INT 2
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 1
55993: NEG
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 2
56004: NEG
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 2
56015: NEG
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 2
56027: NEG
56028: PUSH
56029: LD_INT 2
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56058: LD_ADDR_VAR 0 56
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: LD_INT 1
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 1
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: LD_INT 1
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: LD_INT 1
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: NEG
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: NEG
56140: PUSH
56141: LD_INT 2
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 0
56151: PUSH
56152: LD_INT 2
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 2
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 2
56183: PUSH
56184: LD_INT 1
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 2
56193: PUSH
56194: LD_INT 2
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 1
56203: PUSH
56204: LD_INT 2
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: LD_INT 2
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: NEG
56224: PUSH
56225: LD_INT 1
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 2
56234: NEG
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 2
56245: NEG
56246: PUSH
56247: LD_INT 1
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 2
56257: NEG
56258: PUSH
56259: LD_INT 2
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56288: LD_ADDR_VAR 0 57
56292: PUSH
56293: LD_INT 0
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 0
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 1
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 1
56326: PUSH
56327: LD_INT 1
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 0
56336: PUSH
56337: LD_INT 1
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: LD_INT 0
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 1
56357: NEG
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: NEG
56370: PUSH
56371: LD_INT 2
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: LD_INT 2
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 2
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 2
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 2
56423: PUSH
56424: LD_INT 2
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: PUSH
56434: LD_INT 2
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: LD_INT 2
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: LD_INT 1
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 2
56464: NEG
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 2
56475: NEG
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 2
56487: NEG
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56518: LD_ADDR_VAR 0 58
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 1
56576: NEG
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: LD_INT 2
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 2
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 2
56643: PUSH
56644: LD_INT 1
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 2
56653: PUSH
56654: LD_INT 2
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: LD_INT 2
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: LD_INT 2
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 2
56694: NEG
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 2
56705: NEG
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 2
56717: NEG
56718: PUSH
56719: LD_INT 2
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56748: LD_ADDR_VAR 0 59
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 0
56796: PUSH
56797: LD_INT 1
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: LD_INT 1
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56836: LD_ADDR_VAR 0 60
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 0
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 1
56874: PUSH
56875: LD_INT 1
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: LD_INT 1
56909: NEG
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56924: LD_ADDR_VAR 0 61
56928: PUSH
56929: LD_INT 0
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 0
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: LD_INT 0
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: LD_INT 0
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: LD_INT 1
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57012: LD_ADDR_VAR 0 62
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 1
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: LD_INT 1
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 1
57070: NEG
57071: PUSH
57072: LD_INT 0
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: NEG
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57100: LD_ADDR_VAR 0 63
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 1
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 0
57148: PUSH
57149: LD_INT 1
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: LD_INT 0
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: LD_INT 1
57173: NEG
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57188: LD_ADDR_VAR 0 64
57192: PUSH
57193: LD_INT 0
57195: PUSH
57196: LD_INT 0
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: LD_INT 1
57208: NEG
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: PUSH
57227: LD_INT 1
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 0
57236: PUSH
57237: LD_INT 1
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 1
57246: NEG
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: LD_INT 1
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: ST_TO_ADDR
// end ; 1 :
57276: GO 63173
57278: LD_INT 1
57280: DOUBLE
57281: EQUAL
57282: IFTRUE 57286
57284: GO 59909
57286: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57287: LD_ADDR_VAR 0 11
57291: PUSH
57292: LD_INT 1
57294: NEG
57295: PUSH
57296: LD_INT 3
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: LD_INT 3
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 1
57317: PUSH
57318: LD_INT 2
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: LIST
57330: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57331: LD_ADDR_VAR 0 12
57335: PUSH
57336: LD_INT 2
57338: PUSH
57339: LD_INT 1
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 3
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 3
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: LIST
57371: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57372: LD_ADDR_VAR 0 13
57376: PUSH
57377: LD_INT 3
57379: PUSH
57380: LD_INT 2
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 3
57389: PUSH
57390: LD_INT 3
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 2
57399: PUSH
57400: LD_INT 3
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: LIST
57411: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57412: LD_ADDR_VAR 0 14
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: LD_INT 3
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 0
57429: PUSH
57430: LD_INT 3
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 1
57439: NEG
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: LIST
57452: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57453: LD_ADDR_VAR 0 15
57457: PUSH
57458: LD_INT 2
57460: NEG
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 3
57471: NEG
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 3
57482: NEG
57483: PUSH
57484: LD_INT 1
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: LIST
57496: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57497: LD_ADDR_VAR 0 16
57501: PUSH
57502: LD_INT 2
57504: NEG
57505: PUSH
57506: LD_INT 3
57508: NEG
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 3
57516: NEG
57517: PUSH
57518: LD_INT 2
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 3
57528: NEG
57529: PUSH
57530: LD_INT 3
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: LIST
57542: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57543: LD_ADDR_VAR 0 17
57547: PUSH
57548: LD_INT 1
57550: NEG
57551: PUSH
57552: LD_INT 3
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 0
57562: PUSH
57563: LD_INT 3
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: LD_INT 2
57576: NEG
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: LIST
57586: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57587: LD_ADDR_VAR 0 18
57591: PUSH
57592: LD_INT 2
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 3
57605: PUSH
57606: LD_INT 0
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 3
57615: PUSH
57616: LD_INT 1
57618: PUSH
57619: EMPTY
57620: LIST
57621: LIST
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: LIST
57627: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57628: LD_ADDR_VAR 0 19
57632: PUSH
57633: LD_INT 3
57635: PUSH
57636: LD_INT 2
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 3
57645: PUSH
57646: LD_INT 3
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 2
57655: PUSH
57656: LD_INT 3
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: LIST
57667: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57668: LD_ADDR_VAR 0 20
57672: PUSH
57673: LD_INT 1
57675: PUSH
57676: LD_INT 3
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 0
57685: PUSH
57686: LD_INT 3
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 1
57695: NEG
57696: PUSH
57697: LD_INT 2
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: LIST
57708: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57709: LD_ADDR_VAR 0 21
57713: PUSH
57714: LD_INT 2
57716: NEG
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 3
57727: NEG
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 3
57738: NEG
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: LIST
57752: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57753: LD_ADDR_VAR 0 22
57757: PUSH
57758: LD_INT 2
57760: NEG
57761: PUSH
57762: LD_INT 3
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 3
57772: NEG
57773: PUSH
57774: LD_INT 2
57776: NEG
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 3
57784: NEG
57785: PUSH
57786: LD_INT 3
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: LIST
57798: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57799: LD_ADDR_VAR 0 23
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: LD_INT 3
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: NEG
57818: PUSH
57819: LD_INT 4
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: LD_INT 3
57832: NEG
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: LIST
57842: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57843: LD_ADDR_VAR 0 24
57847: PUSH
57848: LD_INT 3
57850: PUSH
57851: LD_INT 0
57853: PUSH
57854: EMPTY
57855: LIST
57856: LIST
57857: PUSH
57858: LD_INT 3
57860: PUSH
57861: LD_INT 1
57863: NEG
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 4
57871: PUSH
57872: LD_INT 1
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: LIST
57883: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57884: LD_ADDR_VAR 0 25
57888: PUSH
57889: LD_INT 3
57891: PUSH
57892: LD_INT 3
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 4
57901: PUSH
57902: LD_INT 3
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 3
57911: PUSH
57912: LD_INT 4
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: LIST
57923: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57924: LD_ADDR_VAR 0 26
57928: PUSH
57929: LD_INT 0
57931: PUSH
57932: LD_INT 3
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 1
57941: PUSH
57942: LD_INT 4
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: LD_INT 3
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: LIST
57964: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57965: LD_ADDR_VAR 0 27
57969: PUSH
57970: LD_INT 3
57972: NEG
57973: PUSH
57974: LD_INT 0
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 3
57983: NEG
57984: PUSH
57985: LD_INT 1
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 4
57994: NEG
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: LIST
58008: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58009: LD_ADDR_VAR 0 28
58013: PUSH
58014: LD_INT 3
58016: NEG
58017: PUSH
58018: LD_INT 3
58020: NEG
58021: PUSH
58022: EMPTY
58023: LIST
58024: LIST
58025: PUSH
58026: LD_INT 3
58028: NEG
58029: PUSH
58030: LD_INT 4
58032: NEG
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 4
58040: NEG
58041: PUSH
58042: LD_INT 3
58044: NEG
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: LIST
58054: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58055: LD_ADDR_VAR 0 29
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: LD_INT 3
58066: NEG
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: LD_INT 3
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 1
58085: PUSH
58086: LD_INT 2
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 1
58096: NEG
58097: PUSH
58098: LD_INT 4
58100: NEG
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: LD_INT 4
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 1
58119: PUSH
58120: LD_INT 3
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 1
58130: NEG
58131: PUSH
58132: LD_INT 5
58134: NEG
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: LD_INT 5
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: LD_INT 4
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: LD_INT 6
58168: NEG
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 0
58176: PUSH
58177: LD_INT 6
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 1
58187: PUSH
58188: LD_INT 5
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58210: LD_ADDR_VAR 0 30
58214: PUSH
58215: LD_INT 2
58217: PUSH
58218: LD_INT 1
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 3
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 3
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 3
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 4
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 4
58269: PUSH
58270: LD_INT 1
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 4
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 5
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 5
58300: PUSH
58301: LD_INT 1
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 5
58310: PUSH
58311: LD_INT 1
58313: NEG
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 6
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 6
58331: PUSH
58332: LD_INT 1
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58353: LD_ADDR_VAR 0 31
58357: PUSH
58358: LD_INT 3
58360: PUSH
58361: LD_INT 2
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 3
58370: PUSH
58371: LD_INT 3
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 2
58380: PUSH
58381: LD_INT 3
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 4
58390: PUSH
58391: LD_INT 3
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 4
58400: PUSH
58401: LD_INT 4
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 3
58410: PUSH
58411: LD_INT 4
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 5
58420: PUSH
58421: LD_INT 4
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 5
58430: PUSH
58431: LD_INT 5
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 4
58440: PUSH
58441: LD_INT 5
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 6
58450: PUSH
58451: LD_INT 5
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 6
58460: PUSH
58461: LD_INT 6
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 5
58470: PUSH
58471: LD_INT 6
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58492: LD_ADDR_VAR 0 32
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: LD_INT 3
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: LD_INT 3
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: LD_INT 2
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 1
58530: PUSH
58531: LD_INT 4
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 0
58540: PUSH
58541: LD_INT 4
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 1
58550: NEG
58551: PUSH
58552: LD_INT 3
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 1
58561: PUSH
58562: LD_INT 5
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: LD_INT 5
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 1
58581: NEG
58582: PUSH
58583: LD_INT 4
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: LD_INT 6
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: LD_INT 6
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: LD_INT 5
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58635: LD_ADDR_VAR 0 33
58639: PUSH
58640: LD_INT 2
58642: NEG
58643: PUSH
58644: LD_INT 1
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 3
58653: NEG
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 3
58664: NEG
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 3
58676: NEG
58677: PUSH
58678: LD_INT 1
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 4
58687: NEG
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 4
58698: NEG
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 4
58710: NEG
58711: PUSH
58712: LD_INT 1
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 5
58721: NEG
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 5
58732: NEG
58733: PUSH
58734: LD_INT 1
58736: NEG
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: LD_INT 5
58744: NEG
58745: PUSH
58746: LD_INT 1
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 6
58755: NEG
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 6
58766: NEG
58767: PUSH
58768: LD_INT 1
58770: NEG
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58790: LD_ADDR_VAR 0 34
58794: PUSH
58795: LD_INT 2
58797: NEG
58798: PUSH
58799: LD_INT 3
58801: NEG
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 3
58809: NEG
58810: PUSH
58811: LD_INT 2
58813: NEG
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 3
58821: NEG
58822: PUSH
58823: LD_INT 3
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 3
58833: NEG
58834: PUSH
58835: LD_INT 4
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 4
58845: NEG
58846: PUSH
58847: LD_INT 3
58849: NEG
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 4
58857: NEG
58858: PUSH
58859: LD_INT 4
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 4
58869: NEG
58870: PUSH
58871: LD_INT 5
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 5
58881: NEG
58882: PUSH
58883: LD_INT 4
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 5
58893: NEG
58894: PUSH
58895: LD_INT 5
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 5
58905: NEG
58906: PUSH
58907: LD_INT 6
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 6
58917: NEG
58918: PUSH
58919: LD_INT 5
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 6
58929: NEG
58930: PUSH
58931: LD_INT 6
58933: NEG
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58953: LD_ADDR_VAR 0 41
58957: PUSH
58958: LD_INT 0
58960: PUSH
58961: LD_INT 2
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: LD_INT 3
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 1
58983: PUSH
58984: LD_INT 2
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: LIST
58996: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58997: LD_ADDR_VAR 0 42
59001: PUSH
59002: LD_INT 2
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 2
59014: PUSH
59015: LD_INT 1
59017: NEG
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 3
59025: PUSH
59026: LD_INT 1
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: LIST
59037: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59038: LD_ADDR_VAR 0 43
59042: PUSH
59043: LD_INT 2
59045: PUSH
59046: LD_INT 2
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 3
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 2
59065: PUSH
59066: LD_INT 3
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: LIST
59077: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59078: LD_ADDR_VAR 0 44
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: LD_INT 2
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: PUSH
59093: LD_INT 1
59095: PUSH
59096: LD_INT 3
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: LD_INT 2
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: LIST
59118: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59119: LD_ADDR_VAR 0 45
59123: PUSH
59124: LD_INT 2
59126: NEG
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 2
59137: NEG
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 3
59148: NEG
59149: PUSH
59150: LD_INT 1
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: LIST
59162: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59163: LD_ADDR_VAR 0 46
59167: PUSH
59168: LD_INT 2
59170: NEG
59171: PUSH
59172: LD_INT 2
59174: NEG
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: LD_INT 2
59182: NEG
59183: PUSH
59184: LD_INT 3
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 3
59194: NEG
59195: PUSH
59196: LD_INT 2
59198: NEG
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: LIST
59208: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59209: LD_ADDR_VAR 0 47
59213: PUSH
59214: LD_INT 2
59216: NEG
59217: PUSH
59218: LD_INT 3
59220: NEG
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: LD_INT 3
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59242: LD_ADDR_VAR 0 48
59246: PUSH
59247: LD_INT 1
59249: PUSH
59250: LD_INT 2
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 2
59260: PUSH
59261: LD_INT 1
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59273: LD_ADDR_VAR 0 49
59277: PUSH
59278: LD_INT 3
59280: PUSH
59281: LD_INT 1
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 3
59290: PUSH
59291: LD_INT 2
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59302: LD_ADDR_VAR 0 50
59306: PUSH
59307: LD_INT 2
59309: PUSH
59310: LD_INT 3
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 1
59319: PUSH
59320: LD_INT 3
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59331: LD_ADDR_VAR 0 51
59335: PUSH
59336: LD_INT 1
59338: NEG
59339: PUSH
59340: LD_INT 2
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: LD_INT 2
59349: NEG
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59362: LD_ADDR_VAR 0 52
59366: PUSH
59367: LD_INT 3
59369: NEG
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 3
59381: NEG
59382: PUSH
59383: LD_INT 2
59385: NEG
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59395: LD_ADDR_VAR 0 53
59399: PUSH
59400: LD_INT 1
59402: NEG
59403: PUSH
59404: LD_INT 3
59406: NEG
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: PUSH
59412: LD_INT 0
59414: PUSH
59415: LD_INT 3
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 1
59425: PUSH
59426: LD_INT 2
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: LIST
59438: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59439: LD_ADDR_VAR 0 54
59443: PUSH
59444: LD_INT 2
59446: PUSH
59447: LD_INT 1
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 3
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 3
59467: PUSH
59468: LD_INT 1
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: LIST
59479: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59480: LD_ADDR_VAR 0 55
59484: PUSH
59485: LD_INT 3
59487: PUSH
59488: LD_INT 2
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 3
59497: PUSH
59498: LD_INT 3
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 2
59507: PUSH
59508: LD_INT 3
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: LIST
59519: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59520: LD_ADDR_VAR 0 56
59524: PUSH
59525: LD_INT 1
59527: PUSH
59528: LD_INT 3
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 0
59537: PUSH
59538: LD_INT 3
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 1
59547: NEG
59548: PUSH
59549: LD_INT 2
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: LIST
59560: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59561: LD_ADDR_VAR 0 57
59565: PUSH
59566: LD_INT 2
59568: NEG
59569: PUSH
59570: LD_INT 1
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 3
59579: NEG
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 3
59590: NEG
59591: PUSH
59592: LD_INT 1
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: LIST
59604: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59605: LD_ADDR_VAR 0 58
59609: PUSH
59610: LD_INT 2
59612: NEG
59613: PUSH
59614: LD_INT 3
59616: NEG
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: LD_INT 3
59624: NEG
59625: PUSH
59626: LD_INT 2
59628: NEG
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 3
59636: NEG
59637: PUSH
59638: LD_INT 3
59640: NEG
59641: PUSH
59642: EMPTY
59643: LIST
59644: LIST
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: LIST
59650: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59651: LD_ADDR_VAR 0 59
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: LD_INT 2
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: LD_INT 2
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 1
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: LIST
59694: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59695: LD_ADDR_VAR 0 60
59699: PUSH
59700: LD_INT 1
59702: PUSH
59703: LD_INT 1
59705: NEG
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 2
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 2
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: LIST
59735: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59736: LD_ADDR_VAR 0 61
59740: PUSH
59741: LD_INT 2
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 2
59753: PUSH
59754: LD_INT 2
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 1
59763: PUSH
59764: LD_INT 2
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: LIST
59775: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59776: LD_ADDR_VAR 0 62
59780: PUSH
59781: LD_INT 1
59783: PUSH
59784: LD_INT 2
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: LD_INT 2
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: NEG
59804: PUSH
59805: LD_INT 1
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: LIST
59816: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59817: LD_ADDR_VAR 0 63
59821: PUSH
59822: LD_INT 1
59824: NEG
59825: PUSH
59826: LD_INT 1
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 2
59835: NEG
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 2
59846: NEG
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: LIST
59860: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59861: LD_ADDR_VAR 0 64
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: LD_INT 2
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 2
59880: NEG
59881: PUSH
59882: LD_INT 1
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 2
59892: NEG
59893: PUSH
59894: LD_INT 2
59896: NEG
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: LIST
59906: ST_TO_ADDR
// end ; 2 :
59907: GO 63173
59909: LD_INT 2
59911: DOUBLE
59912: EQUAL
59913: IFTRUE 59917
59915: GO 63172
59917: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59918: LD_ADDR_VAR 0 29
59922: PUSH
59923: LD_INT 4
59925: PUSH
59926: LD_INT 0
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 4
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 5
59946: PUSH
59947: LD_INT 0
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 5
59956: PUSH
59957: LD_INT 1
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 4
59966: PUSH
59967: LD_INT 1
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 3
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 3
59986: PUSH
59987: LD_INT 1
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 3
59997: PUSH
59998: LD_INT 2
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 5
60008: PUSH
60009: LD_INT 2
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 3
60018: PUSH
60019: LD_INT 3
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 3
60028: PUSH
60029: LD_INT 2
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 4
60038: PUSH
60039: LD_INT 3
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 4
60048: PUSH
60049: LD_INT 4
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 3
60058: PUSH
60059: LD_INT 4
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 2
60068: PUSH
60069: LD_INT 3
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 2
60078: PUSH
60079: LD_INT 2
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 4
60088: PUSH
60089: LD_INT 2
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 2
60098: PUSH
60099: LD_INT 4
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 0
60108: PUSH
60109: LD_INT 4
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 0
60118: PUSH
60119: LD_INT 3
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 1
60128: PUSH
60129: LD_INT 4
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: LD_INT 5
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 0
60148: PUSH
60149: LD_INT 5
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: LD_INT 4
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: LD_INT 3
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 2
60180: PUSH
60181: LD_INT 5
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 2
60190: NEG
60191: PUSH
60192: LD_INT 3
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 3
60201: NEG
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 3
60212: NEG
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 2
60224: NEG
60225: PUSH
60226: LD_INT 0
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 2
60235: NEG
60236: PUSH
60237: LD_INT 1
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 3
60246: NEG
60247: PUSH
60248: LD_INT 1
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 4
60257: NEG
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 4
60268: NEG
60269: PUSH
60270: LD_INT 1
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 4
60280: NEG
60281: PUSH
60282: LD_INT 2
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 2
60292: NEG
60293: PUSH
60294: LD_INT 2
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 4
60303: NEG
60304: PUSH
60305: LD_INT 4
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 4
60315: NEG
60316: PUSH
60317: LD_INT 5
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 3
60327: NEG
60328: PUSH
60329: LD_INT 4
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 3
60339: NEG
60340: PUSH
60341: LD_INT 3
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 4
60351: NEG
60352: PUSH
60353: LD_INT 3
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 5
60363: NEG
60364: PUSH
60365: LD_INT 4
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 5
60375: NEG
60376: PUSH
60377: LD_INT 5
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 3
60387: NEG
60388: PUSH
60389: LD_INT 5
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 5
60399: NEG
60400: PUSH
60401: LD_INT 3
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60456: LD_ADDR_VAR 0 30
60460: PUSH
60461: LD_INT 4
60463: PUSH
60464: LD_INT 4
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 4
60473: PUSH
60474: LD_INT 3
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 5
60483: PUSH
60484: LD_INT 4
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 5
60493: PUSH
60494: LD_INT 5
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 4
60503: PUSH
60504: LD_INT 5
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 3
60513: PUSH
60514: LD_INT 4
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 3
60523: PUSH
60524: LD_INT 3
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 5
60533: PUSH
60534: LD_INT 3
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 3
60543: PUSH
60544: LD_INT 5
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 0
60553: PUSH
60554: LD_INT 3
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 0
60563: PUSH
60564: LD_INT 2
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 1
60573: PUSH
60574: LD_INT 3
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 1
60583: PUSH
60584: LD_INT 4
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: LD_INT 4
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: LD_INT 3
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 1
60614: NEG
60615: PUSH
60616: LD_INT 2
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 2
60625: PUSH
60626: LD_INT 4
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 2
60635: NEG
60636: PUSH
60637: LD_INT 2
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 4
60646: NEG
60647: PUSH
60648: LD_INT 0
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 4
60657: NEG
60658: PUSH
60659: LD_INT 1
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 3
60669: NEG
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 3
60680: NEG
60681: PUSH
60682: LD_INT 1
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 4
60691: NEG
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 5
60702: NEG
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 5
60713: NEG
60714: PUSH
60715: LD_INT 1
60717: NEG
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 5
60725: NEG
60726: PUSH
60727: LD_INT 2
60729: NEG
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 3
60737: NEG
60738: PUSH
60739: LD_INT 2
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 3
60748: NEG
60749: PUSH
60750: LD_INT 3
60752: NEG
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: PUSH
60758: LD_INT 3
60760: NEG
60761: PUSH
60762: LD_INT 4
60764: NEG
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 2
60772: NEG
60773: PUSH
60774: LD_INT 3
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 2
60784: NEG
60785: PUSH
60786: LD_INT 2
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 3
60796: NEG
60797: PUSH
60798: LD_INT 2
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 4
60808: NEG
60809: PUSH
60810: LD_INT 3
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 4
60820: NEG
60821: PUSH
60822: LD_INT 4
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 2
60832: NEG
60833: PUSH
60834: LD_INT 4
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 4
60844: NEG
60845: PUSH
60846: LD_INT 2
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: LD_INT 4
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: LD_INT 5
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 1
60878: PUSH
60879: LD_INT 4
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: LD_INT 3
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 0
60900: PUSH
60901: LD_INT 3
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: LD_INT 4
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: NEG
60924: PUSH
60925: LD_INT 5
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 2
60935: PUSH
60936: LD_INT 3
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 2
60946: NEG
60947: PUSH
60948: LD_INT 5
60950: NEG
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: LIST
60960: LIST
60961: LIST
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61003: LD_ADDR_VAR 0 31
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: LD_INT 4
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: LD_INT 3
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 1
61030: PUSH
61031: LD_INT 4
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 1
61040: PUSH
61041: LD_INT 5
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: LD_INT 5
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 1
61060: NEG
61061: PUSH
61062: LD_INT 4
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 1
61071: NEG
61072: PUSH
61073: LD_INT 3
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 2
61082: PUSH
61083: LD_INT 5
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 2
61092: NEG
61093: PUSH
61094: LD_INT 3
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 3
61103: NEG
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 3
61114: NEG
61115: PUSH
61116: LD_INT 1
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 2
61126: NEG
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 2
61137: NEG
61138: PUSH
61139: LD_INT 1
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 3
61148: NEG
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 4
61159: NEG
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 4
61170: NEG
61171: PUSH
61172: LD_INT 1
61174: NEG
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 4
61182: NEG
61183: PUSH
61184: LD_INT 2
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 2
61194: NEG
61195: PUSH
61196: LD_INT 2
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 4
61205: NEG
61206: PUSH
61207: LD_INT 4
61209: NEG
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 4
61217: NEG
61218: PUSH
61219: LD_INT 5
61221: NEG
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 3
61229: NEG
61230: PUSH
61231: LD_INT 4
61233: NEG
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 3
61241: NEG
61242: PUSH
61243: LD_INT 3
61245: NEG
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 4
61253: NEG
61254: PUSH
61255: LD_INT 3
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 5
61265: NEG
61266: PUSH
61267: LD_INT 4
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 5
61277: NEG
61278: PUSH
61279: LD_INT 5
61281: NEG
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 3
61289: NEG
61290: PUSH
61291: LD_INT 5
61293: NEG
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 5
61301: NEG
61302: PUSH
61303: LD_INT 3
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: LD_INT 3
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 0
61324: PUSH
61325: LD_INT 4
61327: NEG
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 1
61335: PUSH
61336: LD_INT 3
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: PUSH
61347: LD_INT 2
61349: NEG
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 0
61357: PUSH
61358: LD_INT 2
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 1
61368: NEG
61369: PUSH
61370: LD_INT 3
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: LD_INT 4
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 2
61392: PUSH
61393: LD_INT 2
61395: NEG
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 2
61403: NEG
61404: PUSH
61405: LD_INT 4
61407: NEG
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 4
61415: PUSH
61416: LD_INT 0
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 4
61425: PUSH
61426: LD_INT 1
61428: NEG
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 5
61436: PUSH
61437: LD_INT 0
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 5
61446: PUSH
61447: LD_INT 1
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 4
61456: PUSH
61457: LD_INT 1
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 3
61466: PUSH
61467: LD_INT 0
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 3
61476: PUSH
61477: LD_INT 1
61479: NEG
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 3
61487: PUSH
61488: LD_INT 2
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 5
61498: PUSH
61499: LD_INT 2
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61553: LD_ADDR_VAR 0 32
61557: PUSH
61558: LD_INT 4
61560: NEG
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 4
61571: NEG
61572: PUSH
61573: LD_INT 1
61575: NEG
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 3
61583: NEG
61584: PUSH
61585: LD_INT 0
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 3
61594: NEG
61595: PUSH
61596: LD_INT 1
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 4
61605: NEG
61606: PUSH
61607: LD_INT 1
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 5
61616: NEG
61617: PUSH
61618: LD_INT 0
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 5
61627: NEG
61628: PUSH
61629: LD_INT 1
61631: NEG
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 5
61639: NEG
61640: PUSH
61641: LD_INT 2
61643: NEG
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 3
61651: NEG
61652: PUSH
61653: LD_INT 2
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 3
61662: NEG
61663: PUSH
61664: LD_INT 3
61666: NEG
61667: PUSH
61668: EMPTY
61669: LIST
61670: LIST
61671: PUSH
61672: LD_INT 3
61674: NEG
61675: PUSH
61676: LD_INT 4
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 2
61686: NEG
61687: PUSH
61688: LD_INT 3
61690: NEG
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 2
61698: NEG
61699: PUSH
61700: LD_INT 2
61702: NEG
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 3
61710: NEG
61711: PUSH
61712: LD_INT 2
61714: NEG
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 4
61722: NEG
61723: PUSH
61724: LD_INT 3
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 4
61734: NEG
61735: PUSH
61736: LD_INT 4
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 2
61746: NEG
61747: PUSH
61748: LD_INT 4
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 4
61758: NEG
61759: PUSH
61760: LD_INT 2
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: LD_INT 4
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 0
61781: PUSH
61782: LD_INT 5
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 1
61792: PUSH
61793: LD_INT 4
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: LD_INT 3
61806: NEG
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 0
61814: PUSH
61815: LD_INT 3
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 1
61825: NEG
61826: PUSH
61827: LD_INT 4
61829: NEG
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 1
61837: NEG
61838: PUSH
61839: LD_INT 5
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 2
61849: PUSH
61850: LD_INT 3
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 2
61860: NEG
61861: PUSH
61862: LD_INT 5
61864: NEG
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 3
61872: PUSH
61873: LD_INT 0
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 3
61882: PUSH
61883: LD_INT 1
61885: NEG
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 4
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 4
61903: PUSH
61904: LD_INT 1
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 3
61913: PUSH
61914: LD_INT 1
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 2
61923: PUSH
61924: LD_INT 0
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 2
61933: PUSH
61934: LD_INT 1
61936: NEG
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 2
61944: PUSH
61945: LD_INT 2
61947: NEG
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 4
61955: PUSH
61956: LD_INT 2
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 4
61965: PUSH
61966: LD_INT 4
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 4
61975: PUSH
61976: LD_INT 3
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 5
61985: PUSH
61986: LD_INT 4
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 5
61995: PUSH
61996: LD_INT 5
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 4
62005: PUSH
62006: LD_INT 5
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 3
62015: PUSH
62016: LD_INT 4
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 3
62025: PUSH
62026: LD_INT 3
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 5
62035: PUSH
62036: LD_INT 3
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: PUSH
62043: LD_INT 3
62045: PUSH
62046: LD_INT 5
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62100: LD_ADDR_VAR 0 33
62104: PUSH
62105: LD_INT 4
62107: NEG
62108: PUSH
62109: LD_INT 4
62111: NEG
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 4
62119: NEG
62120: PUSH
62121: LD_INT 5
62123: NEG
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: PUSH
62129: LD_INT 3
62131: NEG
62132: PUSH
62133: LD_INT 4
62135: NEG
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 3
62143: NEG
62144: PUSH
62145: LD_INT 3
62147: NEG
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 4
62155: NEG
62156: PUSH
62157: LD_INT 3
62159: NEG
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 5
62167: NEG
62168: PUSH
62169: LD_INT 4
62171: NEG
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 5
62179: NEG
62180: PUSH
62181: LD_INT 5
62183: NEG
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 3
62191: NEG
62192: PUSH
62193: LD_INT 5
62195: NEG
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 5
62203: NEG
62204: PUSH
62205: LD_INT 3
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: LD_INT 3
62218: NEG
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: LD_INT 4
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 1
62237: PUSH
62238: LD_INT 3
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: LD_INT 2
62251: NEG
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: LD_INT 2
62262: NEG
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 1
62270: NEG
62271: PUSH
62272: LD_INT 3
62274: NEG
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 1
62282: NEG
62283: PUSH
62284: LD_INT 4
62286: NEG
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 2
62294: PUSH
62295: LD_INT 2
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 2
62305: NEG
62306: PUSH
62307: LD_INT 4
62309: NEG
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 4
62317: PUSH
62318: LD_INT 0
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 4
62327: PUSH
62328: LD_INT 1
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 5
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 5
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 4
62358: PUSH
62359: LD_INT 1
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 3
62368: PUSH
62369: LD_INT 0
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 3
62378: PUSH
62379: LD_INT 1
62381: NEG
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 3
62389: PUSH
62390: LD_INT 2
62392: NEG
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 5
62400: PUSH
62401: LD_INT 2
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 3
62410: PUSH
62411: LD_INT 3
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 3
62420: PUSH
62421: LD_INT 2
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 4
62430: PUSH
62431: LD_INT 3
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 4
62440: PUSH
62441: LD_INT 4
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 3
62450: PUSH
62451: LD_INT 4
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 2
62460: PUSH
62461: LD_INT 3
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 2
62470: PUSH
62471: LD_INT 2
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 4
62480: PUSH
62481: LD_INT 2
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 2
62490: PUSH
62491: LD_INT 4
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 0
62500: PUSH
62501: LD_INT 4
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 0
62510: PUSH
62511: LD_INT 3
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 1
62520: PUSH
62521: LD_INT 4
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 1
62530: PUSH
62531: LD_INT 5
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 0
62540: PUSH
62541: LD_INT 5
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 1
62550: NEG
62551: PUSH
62552: LD_INT 4
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 1
62561: NEG
62562: PUSH
62563: LD_INT 3
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 2
62572: PUSH
62573: LD_INT 5
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 2
62582: NEG
62583: PUSH
62584: LD_INT 3
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62638: LD_ADDR_VAR 0 34
62642: PUSH
62643: LD_INT 0
62645: PUSH
62646: LD_INT 4
62648: NEG
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: LD_INT 5
62659: NEG
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 1
62667: PUSH
62668: LD_INT 4
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: LD_INT 3
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: LD_INT 3
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 1
62700: NEG
62701: PUSH
62702: LD_INT 4
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 1
62712: NEG
62713: PUSH
62714: LD_INT 5
62716: NEG
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 2
62724: PUSH
62725: LD_INT 3
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 2
62735: NEG
62736: PUSH
62737: LD_INT 5
62739: NEG
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 3
62747: PUSH
62748: LD_INT 0
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 3
62757: PUSH
62758: LD_INT 1
62760: NEG
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 4
62768: PUSH
62769: LD_INT 0
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 4
62778: PUSH
62779: LD_INT 1
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 3
62788: PUSH
62789: LD_INT 1
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 2
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 2
62808: PUSH
62809: LD_INT 1
62811: NEG
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 2
62819: PUSH
62820: LD_INT 2
62822: NEG
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 4
62830: PUSH
62831: LD_INT 2
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 4
62840: PUSH
62841: LD_INT 4
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 4
62850: PUSH
62851: LD_INT 3
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 5
62860: PUSH
62861: LD_INT 4
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 5
62870: PUSH
62871: LD_INT 5
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 4
62880: PUSH
62881: LD_INT 5
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 3
62890: PUSH
62891: LD_INT 4
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 3
62900: PUSH
62901: LD_INT 3
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 5
62910: PUSH
62911: LD_INT 3
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 3
62920: PUSH
62921: LD_INT 5
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 0
62930: PUSH
62931: LD_INT 3
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 0
62940: PUSH
62941: LD_INT 2
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 1
62950: PUSH
62951: LD_INT 3
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 1
62960: PUSH
62961: LD_INT 4
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 0
62970: PUSH
62971: LD_INT 4
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 1
62980: NEG
62981: PUSH
62982: LD_INT 3
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 1
62991: NEG
62992: PUSH
62993: LD_INT 2
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 2
63002: PUSH
63003: LD_INT 4
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 2
63012: NEG
63013: PUSH
63014: LD_INT 2
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 4
63023: NEG
63024: PUSH
63025: LD_INT 0
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 4
63034: NEG
63035: PUSH
63036: LD_INT 1
63038: NEG
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 3
63046: NEG
63047: PUSH
63048: LD_INT 0
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 3
63057: NEG
63058: PUSH
63059: LD_INT 1
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 4
63068: NEG
63069: PUSH
63070: LD_INT 1
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 5
63079: NEG
63080: PUSH
63081: LD_INT 0
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 5
63090: NEG
63091: PUSH
63092: LD_INT 1
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 5
63102: NEG
63103: PUSH
63104: LD_INT 2
63106: NEG
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 3
63114: NEG
63115: PUSH
63116: LD_INT 2
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: ST_TO_ADDR
// end ; end ;
63170: GO 63173
63172: POP
// case btype of b_depot , b_warehouse :
63173: LD_VAR 0 1
63177: PUSH
63178: LD_INT 0
63180: DOUBLE
63181: EQUAL
63182: IFTRUE 63192
63184: LD_INT 1
63186: DOUBLE
63187: EQUAL
63188: IFTRUE 63192
63190: GO 63393
63192: POP
// case nation of nation_american :
63193: LD_VAR 0 5
63197: PUSH
63198: LD_INT 1
63200: DOUBLE
63201: EQUAL
63202: IFTRUE 63206
63204: GO 63262
63206: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63207: LD_ADDR_VAR 0 9
63211: PUSH
63212: LD_VAR 0 11
63216: PUSH
63217: LD_VAR 0 12
63221: PUSH
63222: LD_VAR 0 13
63226: PUSH
63227: LD_VAR 0 14
63231: PUSH
63232: LD_VAR 0 15
63236: PUSH
63237: LD_VAR 0 16
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: LIST
63249: PUSH
63250: LD_VAR 0 4
63254: PUSH
63255: LD_INT 1
63257: PLUS
63258: ARRAY
63259: ST_TO_ADDR
63260: GO 63391
63262: LD_INT 2
63264: DOUBLE
63265: EQUAL
63266: IFTRUE 63270
63268: GO 63326
63270: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63271: LD_ADDR_VAR 0 9
63275: PUSH
63276: LD_VAR 0 17
63280: PUSH
63281: LD_VAR 0 18
63285: PUSH
63286: LD_VAR 0 19
63290: PUSH
63291: LD_VAR 0 20
63295: PUSH
63296: LD_VAR 0 21
63300: PUSH
63301: LD_VAR 0 22
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: PUSH
63314: LD_VAR 0 4
63318: PUSH
63319: LD_INT 1
63321: PLUS
63322: ARRAY
63323: ST_TO_ADDR
63324: GO 63391
63326: LD_INT 3
63328: DOUBLE
63329: EQUAL
63330: IFTRUE 63334
63332: GO 63390
63334: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63335: LD_ADDR_VAR 0 9
63339: PUSH
63340: LD_VAR 0 23
63344: PUSH
63345: LD_VAR 0 24
63349: PUSH
63350: LD_VAR 0 25
63354: PUSH
63355: LD_VAR 0 26
63359: PUSH
63360: LD_VAR 0 27
63364: PUSH
63365: LD_VAR 0 28
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: PUSH
63378: LD_VAR 0 4
63382: PUSH
63383: LD_INT 1
63385: PLUS
63386: ARRAY
63387: ST_TO_ADDR
63388: GO 63391
63390: POP
63391: GO 63946
63393: LD_INT 2
63395: DOUBLE
63396: EQUAL
63397: IFTRUE 63407
63399: LD_INT 3
63401: DOUBLE
63402: EQUAL
63403: IFTRUE 63407
63405: GO 63463
63407: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63408: LD_ADDR_VAR 0 9
63412: PUSH
63413: LD_VAR 0 29
63417: PUSH
63418: LD_VAR 0 30
63422: PUSH
63423: LD_VAR 0 31
63427: PUSH
63428: LD_VAR 0 32
63432: PUSH
63433: LD_VAR 0 33
63437: PUSH
63438: LD_VAR 0 34
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: PUSH
63451: LD_VAR 0 4
63455: PUSH
63456: LD_INT 1
63458: PLUS
63459: ARRAY
63460: ST_TO_ADDR
63461: GO 63946
63463: LD_INT 16
63465: DOUBLE
63466: EQUAL
63467: IFTRUE 63525
63469: LD_INT 17
63471: DOUBLE
63472: EQUAL
63473: IFTRUE 63525
63475: LD_INT 18
63477: DOUBLE
63478: EQUAL
63479: IFTRUE 63525
63481: LD_INT 19
63483: DOUBLE
63484: EQUAL
63485: IFTRUE 63525
63487: LD_INT 22
63489: DOUBLE
63490: EQUAL
63491: IFTRUE 63525
63493: LD_INT 20
63495: DOUBLE
63496: EQUAL
63497: IFTRUE 63525
63499: LD_INT 21
63501: DOUBLE
63502: EQUAL
63503: IFTRUE 63525
63505: LD_INT 23
63507: DOUBLE
63508: EQUAL
63509: IFTRUE 63525
63511: LD_INT 24
63513: DOUBLE
63514: EQUAL
63515: IFTRUE 63525
63517: LD_INT 25
63519: DOUBLE
63520: EQUAL
63521: IFTRUE 63525
63523: GO 63581
63525: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63526: LD_ADDR_VAR 0 9
63530: PUSH
63531: LD_VAR 0 35
63535: PUSH
63536: LD_VAR 0 36
63540: PUSH
63541: LD_VAR 0 37
63545: PUSH
63546: LD_VAR 0 38
63550: PUSH
63551: LD_VAR 0 39
63555: PUSH
63556: LD_VAR 0 40
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: PUSH
63569: LD_VAR 0 4
63573: PUSH
63574: LD_INT 1
63576: PLUS
63577: ARRAY
63578: ST_TO_ADDR
63579: GO 63946
63581: LD_INT 6
63583: DOUBLE
63584: EQUAL
63585: IFTRUE 63637
63587: LD_INT 7
63589: DOUBLE
63590: EQUAL
63591: IFTRUE 63637
63593: LD_INT 8
63595: DOUBLE
63596: EQUAL
63597: IFTRUE 63637
63599: LD_INT 13
63601: DOUBLE
63602: EQUAL
63603: IFTRUE 63637
63605: LD_INT 12
63607: DOUBLE
63608: EQUAL
63609: IFTRUE 63637
63611: LD_INT 15
63613: DOUBLE
63614: EQUAL
63615: IFTRUE 63637
63617: LD_INT 11
63619: DOUBLE
63620: EQUAL
63621: IFTRUE 63637
63623: LD_INT 14
63625: DOUBLE
63626: EQUAL
63627: IFTRUE 63637
63629: LD_INT 10
63631: DOUBLE
63632: EQUAL
63633: IFTRUE 63637
63635: GO 63693
63637: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63638: LD_ADDR_VAR 0 9
63642: PUSH
63643: LD_VAR 0 41
63647: PUSH
63648: LD_VAR 0 42
63652: PUSH
63653: LD_VAR 0 43
63657: PUSH
63658: LD_VAR 0 44
63662: PUSH
63663: LD_VAR 0 45
63667: PUSH
63668: LD_VAR 0 46
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: PUSH
63681: LD_VAR 0 4
63685: PUSH
63686: LD_INT 1
63688: PLUS
63689: ARRAY
63690: ST_TO_ADDR
63691: GO 63946
63693: LD_INT 36
63695: DOUBLE
63696: EQUAL
63697: IFTRUE 63701
63699: GO 63757
63701: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63702: LD_ADDR_VAR 0 9
63706: PUSH
63707: LD_VAR 0 47
63711: PUSH
63712: LD_VAR 0 48
63716: PUSH
63717: LD_VAR 0 49
63721: PUSH
63722: LD_VAR 0 50
63726: PUSH
63727: LD_VAR 0 51
63731: PUSH
63732: LD_VAR 0 52
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: PUSH
63745: LD_VAR 0 4
63749: PUSH
63750: LD_INT 1
63752: PLUS
63753: ARRAY
63754: ST_TO_ADDR
63755: GO 63946
63757: LD_INT 4
63759: DOUBLE
63760: EQUAL
63761: IFTRUE 63783
63763: LD_INT 5
63765: DOUBLE
63766: EQUAL
63767: IFTRUE 63783
63769: LD_INT 34
63771: DOUBLE
63772: EQUAL
63773: IFTRUE 63783
63775: LD_INT 37
63777: DOUBLE
63778: EQUAL
63779: IFTRUE 63783
63781: GO 63839
63783: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63784: LD_ADDR_VAR 0 9
63788: PUSH
63789: LD_VAR 0 53
63793: PUSH
63794: LD_VAR 0 54
63798: PUSH
63799: LD_VAR 0 55
63803: PUSH
63804: LD_VAR 0 56
63808: PUSH
63809: LD_VAR 0 57
63813: PUSH
63814: LD_VAR 0 58
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: PUSH
63827: LD_VAR 0 4
63831: PUSH
63832: LD_INT 1
63834: PLUS
63835: ARRAY
63836: ST_TO_ADDR
63837: GO 63946
63839: LD_INT 31
63841: DOUBLE
63842: EQUAL
63843: IFTRUE 63889
63845: LD_INT 32
63847: DOUBLE
63848: EQUAL
63849: IFTRUE 63889
63851: LD_INT 33
63853: DOUBLE
63854: EQUAL
63855: IFTRUE 63889
63857: LD_INT 27
63859: DOUBLE
63860: EQUAL
63861: IFTRUE 63889
63863: LD_INT 26
63865: DOUBLE
63866: EQUAL
63867: IFTRUE 63889
63869: LD_INT 28
63871: DOUBLE
63872: EQUAL
63873: IFTRUE 63889
63875: LD_INT 29
63877: DOUBLE
63878: EQUAL
63879: IFTRUE 63889
63881: LD_INT 30
63883: DOUBLE
63884: EQUAL
63885: IFTRUE 63889
63887: GO 63945
63889: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63890: LD_ADDR_VAR 0 9
63894: PUSH
63895: LD_VAR 0 59
63899: PUSH
63900: LD_VAR 0 60
63904: PUSH
63905: LD_VAR 0 61
63909: PUSH
63910: LD_VAR 0 62
63914: PUSH
63915: LD_VAR 0 63
63919: PUSH
63920: LD_VAR 0 64
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: PUSH
63933: LD_VAR 0 4
63937: PUSH
63938: LD_INT 1
63940: PLUS
63941: ARRAY
63942: ST_TO_ADDR
63943: GO 63946
63945: POP
// temp_list2 = [ ] ;
63946: LD_ADDR_VAR 0 10
63950: PUSH
63951: EMPTY
63952: ST_TO_ADDR
// for i in temp_list do
63953: LD_ADDR_VAR 0 8
63957: PUSH
63958: LD_VAR 0 9
63962: PUSH
63963: FOR_IN
63964: IFFALSE 64016
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63966: LD_ADDR_VAR 0 10
63970: PUSH
63971: LD_VAR 0 10
63975: PUSH
63976: LD_VAR 0 8
63980: PUSH
63981: LD_INT 1
63983: ARRAY
63984: PUSH
63985: LD_VAR 0 2
63989: PLUS
63990: PUSH
63991: LD_VAR 0 8
63995: PUSH
63996: LD_INT 2
63998: ARRAY
63999: PUSH
64000: LD_VAR 0 3
64004: PLUS
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: EMPTY
64011: LIST
64012: ADD
64013: ST_TO_ADDR
64014: GO 63963
64016: POP
64017: POP
// result = temp_list2 ;
64018: LD_ADDR_VAR 0 7
64022: PUSH
64023: LD_VAR 0 10
64027: ST_TO_ADDR
// end ;
64028: LD_VAR 0 7
64032: RET
// export function EnemyInRange ( unit , dist ) ; begin
64033: LD_INT 0
64035: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64036: LD_ADDR_VAR 0 3
64040: PUSH
64041: LD_VAR 0 1
64045: PPUSH
64046: CALL_OW 255
64050: PPUSH
64051: LD_VAR 0 1
64055: PPUSH
64056: CALL_OW 250
64060: PPUSH
64061: LD_VAR 0 1
64065: PPUSH
64066: CALL_OW 251
64070: PPUSH
64071: LD_VAR 0 2
64075: PPUSH
64076: CALL 38137 0 4
64080: PUSH
64081: LD_INT 4
64083: ARRAY
64084: ST_TO_ADDR
// end ;
64085: LD_VAR 0 3
64089: RET
// export function PlayerSeeMe ( unit ) ; begin
64090: LD_INT 0
64092: PPUSH
// result := See ( your_side , unit ) ;
64093: LD_ADDR_VAR 0 2
64097: PUSH
64098: LD_OWVAR 2
64102: PPUSH
64103: LD_VAR 0 1
64107: PPUSH
64108: CALL_OW 292
64112: ST_TO_ADDR
// end ;
64113: LD_VAR 0 2
64117: RET
// export function ReverseDir ( unit ) ; begin
64118: LD_INT 0
64120: PPUSH
// if not unit then
64121: LD_VAR 0 1
64125: NOT
64126: IFFALSE 64130
// exit ;
64128: GO 64153
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64130: LD_ADDR_VAR 0 2
64134: PUSH
64135: LD_VAR 0 1
64139: PPUSH
64140: CALL_OW 254
64144: PUSH
64145: LD_INT 3
64147: PLUS
64148: PUSH
64149: LD_INT 6
64151: MOD
64152: ST_TO_ADDR
// end ;
64153: LD_VAR 0 2
64157: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64158: LD_INT 0
64160: PPUSH
64161: PPUSH
64162: PPUSH
64163: PPUSH
64164: PPUSH
// if not hexes then
64165: LD_VAR 0 2
64169: NOT
64170: IFFALSE 64174
// exit ;
64172: GO 64322
// dist := 9999 ;
64174: LD_ADDR_VAR 0 5
64178: PUSH
64179: LD_INT 9999
64181: ST_TO_ADDR
// for i = 1 to hexes do
64182: LD_ADDR_VAR 0 4
64186: PUSH
64187: DOUBLE
64188: LD_INT 1
64190: DEC
64191: ST_TO_ADDR
64192: LD_VAR 0 2
64196: PUSH
64197: FOR_TO
64198: IFFALSE 64310
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64200: LD_VAR 0 1
64204: PPUSH
64205: LD_VAR 0 2
64209: PUSH
64210: LD_VAR 0 4
64214: ARRAY
64215: PUSH
64216: LD_INT 1
64218: ARRAY
64219: PPUSH
64220: LD_VAR 0 2
64224: PUSH
64225: LD_VAR 0 4
64229: ARRAY
64230: PUSH
64231: LD_INT 2
64233: ARRAY
64234: PPUSH
64235: CALL_OW 297
64239: PUSH
64240: LD_VAR 0 5
64244: LESS
64245: IFFALSE 64308
// begin hex := hexes [ i ] ;
64247: LD_ADDR_VAR 0 7
64251: PUSH
64252: LD_VAR 0 2
64256: PUSH
64257: LD_VAR 0 4
64261: ARRAY
64262: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64263: LD_ADDR_VAR 0 5
64267: PUSH
64268: LD_VAR 0 1
64272: PPUSH
64273: LD_VAR 0 2
64277: PUSH
64278: LD_VAR 0 4
64282: ARRAY
64283: PUSH
64284: LD_INT 1
64286: ARRAY
64287: PPUSH
64288: LD_VAR 0 2
64292: PUSH
64293: LD_VAR 0 4
64297: ARRAY
64298: PUSH
64299: LD_INT 2
64301: ARRAY
64302: PPUSH
64303: CALL_OW 297
64307: ST_TO_ADDR
// end ; end ;
64308: GO 64197
64310: POP
64311: POP
// result := hex ;
64312: LD_ADDR_VAR 0 3
64316: PUSH
64317: LD_VAR 0 7
64321: ST_TO_ADDR
// end ;
64322: LD_VAR 0 3
64326: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64327: LD_INT 0
64329: PPUSH
64330: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64331: LD_VAR 0 1
64335: NOT
64336: PUSH
64337: LD_VAR 0 1
64341: PUSH
64342: LD_INT 21
64344: PUSH
64345: LD_INT 2
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 23
64354: PUSH
64355: LD_INT 2
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PPUSH
64366: CALL_OW 69
64370: IN
64371: NOT
64372: OR
64373: IFFALSE 64377
// exit ;
64375: GO 64424
// for i = 1 to 3 do
64377: LD_ADDR_VAR 0 3
64381: PUSH
64382: DOUBLE
64383: LD_INT 1
64385: DEC
64386: ST_TO_ADDR
64387: LD_INT 3
64389: PUSH
64390: FOR_TO
64391: IFFALSE 64422
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64393: LD_VAR 0 1
64397: PPUSH
64398: CALL_OW 250
64402: PPUSH
64403: LD_VAR 0 1
64407: PPUSH
64408: CALL_OW 251
64412: PPUSH
64413: LD_INT 1
64415: PPUSH
64416: CALL_OW 453
64420: GO 64390
64422: POP
64423: POP
// end ;
64424: LD_VAR 0 2
64428: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64429: LD_INT 0
64431: PPUSH
64432: PPUSH
64433: PPUSH
64434: PPUSH
64435: PPUSH
64436: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64437: LD_VAR 0 1
64441: NOT
64442: PUSH
64443: LD_VAR 0 2
64447: NOT
64448: OR
64449: PUSH
64450: LD_VAR 0 1
64454: PPUSH
64455: CALL_OW 314
64459: OR
64460: IFFALSE 64464
// exit ;
64462: GO 64905
// x := GetX ( enemy_unit ) ;
64464: LD_ADDR_VAR 0 7
64468: PUSH
64469: LD_VAR 0 2
64473: PPUSH
64474: CALL_OW 250
64478: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64479: LD_ADDR_VAR 0 8
64483: PUSH
64484: LD_VAR 0 2
64488: PPUSH
64489: CALL_OW 251
64493: ST_TO_ADDR
// if not x or not y then
64494: LD_VAR 0 7
64498: NOT
64499: PUSH
64500: LD_VAR 0 8
64504: NOT
64505: OR
64506: IFFALSE 64510
// exit ;
64508: GO 64905
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64510: LD_ADDR_VAR 0 6
64514: PUSH
64515: LD_VAR 0 7
64519: PPUSH
64520: LD_INT 0
64522: PPUSH
64523: LD_INT 4
64525: PPUSH
64526: CALL_OW 272
64530: PUSH
64531: LD_VAR 0 8
64535: PPUSH
64536: LD_INT 0
64538: PPUSH
64539: LD_INT 4
64541: PPUSH
64542: CALL_OW 273
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_VAR 0 7
64555: PPUSH
64556: LD_INT 1
64558: PPUSH
64559: LD_INT 4
64561: PPUSH
64562: CALL_OW 272
64566: PUSH
64567: LD_VAR 0 8
64571: PPUSH
64572: LD_INT 1
64574: PPUSH
64575: LD_INT 4
64577: PPUSH
64578: CALL_OW 273
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: LD_VAR 0 7
64591: PPUSH
64592: LD_INT 2
64594: PPUSH
64595: LD_INT 4
64597: PPUSH
64598: CALL_OW 272
64602: PUSH
64603: LD_VAR 0 8
64607: PPUSH
64608: LD_INT 2
64610: PPUSH
64611: LD_INT 4
64613: PPUSH
64614: CALL_OW 273
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_VAR 0 7
64627: PPUSH
64628: LD_INT 3
64630: PPUSH
64631: LD_INT 4
64633: PPUSH
64634: CALL_OW 272
64638: PUSH
64639: LD_VAR 0 8
64643: PPUSH
64644: LD_INT 3
64646: PPUSH
64647: LD_INT 4
64649: PPUSH
64650: CALL_OW 273
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_VAR 0 7
64663: PPUSH
64664: LD_INT 4
64666: PPUSH
64667: LD_INT 4
64669: PPUSH
64670: CALL_OW 272
64674: PUSH
64675: LD_VAR 0 8
64679: PPUSH
64680: LD_INT 4
64682: PPUSH
64683: LD_INT 4
64685: PPUSH
64686: CALL_OW 273
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_VAR 0 7
64699: PPUSH
64700: LD_INT 5
64702: PPUSH
64703: LD_INT 4
64705: PPUSH
64706: CALL_OW 272
64710: PUSH
64711: LD_VAR 0 8
64715: PPUSH
64716: LD_INT 5
64718: PPUSH
64719: LD_INT 4
64721: PPUSH
64722: CALL_OW 273
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: ST_TO_ADDR
// for i = tmp downto 1 do
64739: LD_ADDR_VAR 0 4
64743: PUSH
64744: DOUBLE
64745: LD_VAR 0 6
64749: INC
64750: ST_TO_ADDR
64751: LD_INT 1
64753: PUSH
64754: FOR_DOWNTO
64755: IFFALSE 64856
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64757: LD_VAR 0 6
64761: PUSH
64762: LD_VAR 0 4
64766: ARRAY
64767: PUSH
64768: LD_INT 1
64770: ARRAY
64771: PPUSH
64772: LD_VAR 0 6
64776: PUSH
64777: LD_VAR 0 4
64781: ARRAY
64782: PUSH
64783: LD_INT 2
64785: ARRAY
64786: PPUSH
64787: CALL_OW 488
64791: NOT
64792: PUSH
64793: LD_VAR 0 6
64797: PUSH
64798: LD_VAR 0 4
64802: ARRAY
64803: PUSH
64804: LD_INT 1
64806: ARRAY
64807: PPUSH
64808: LD_VAR 0 6
64812: PUSH
64813: LD_VAR 0 4
64817: ARRAY
64818: PUSH
64819: LD_INT 2
64821: ARRAY
64822: PPUSH
64823: CALL_OW 428
64827: PUSH
64828: LD_INT 0
64830: NONEQUAL
64831: OR
64832: IFFALSE 64854
// tmp := Delete ( tmp , i ) ;
64834: LD_ADDR_VAR 0 6
64838: PUSH
64839: LD_VAR 0 6
64843: PPUSH
64844: LD_VAR 0 4
64848: PPUSH
64849: CALL_OW 3
64853: ST_TO_ADDR
64854: GO 64754
64856: POP
64857: POP
// j := GetClosestHex ( unit , tmp ) ;
64858: LD_ADDR_VAR 0 5
64862: PUSH
64863: LD_VAR 0 1
64867: PPUSH
64868: LD_VAR 0 6
64872: PPUSH
64873: CALL 64158 0 2
64877: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64878: LD_VAR 0 1
64882: PPUSH
64883: LD_VAR 0 5
64887: PUSH
64888: LD_INT 1
64890: ARRAY
64891: PPUSH
64892: LD_VAR 0 5
64896: PUSH
64897: LD_INT 2
64899: ARRAY
64900: PPUSH
64901: CALL_OW 111
// end ;
64905: LD_VAR 0 3
64909: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64910: LD_INT 0
64912: PPUSH
64913: PPUSH
64914: PPUSH
// uc_side = 0 ;
64915: LD_ADDR_OWVAR 20
64919: PUSH
64920: LD_INT 0
64922: ST_TO_ADDR
// uc_nation = 0 ;
64923: LD_ADDR_OWVAR 21
64927: PUSH
64928: LD_INT 0
64930: ST_TO_ADDR
// InitHc_All ( ) ;
64931: CALL_OW 584
// InitVc ;
64935: CALL_OW 20
// if mastodonts then
64939: LD_VAR 0 6
64943: IFFALSE 65010
// for i = 1 to mastodonts do
64945: LD_ADDR_VAR 0 11
64949: PUSH
64950: DOUBLE
64951: LD_INT 1
64953: DEC
64954: ST_TO_ADDR
64955: LD_VAR 0 6
64959: PUSH
64960: FOR_TO
64961: IFFALSE 65008
// begin vc_chassis := 31 ;
64963: LD_ADDR_OWVAR 37
64967: PUSH
64968: LD_INT 31
64970: ST_TO_ADDR
// vc_control := control_rider ;
64971: LD_ADDR_OWVAR 38
64975: PUSH
64976: LD_INT 4
64978: ST_TO_ADDR
// animal := CreateVehicle ;
64979: LD_ADDR_VAR 0 12
64983: PUSH
64984: CALL_OW 45
64988: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64989: LD_VAR 0 12
64993: PPUSH
64994: LD_VAR 0 8
64998: PPUSH
64999: LD_INT 0
65001: PPUSH
65002: CALL 67198 0 3
// end ;
65006: GO 64960
65008: POP
65009: POP
// if horses then
65010: LD_VAR 0 5
65014: IFFALSE 65081
// for i = 1 to horses do
65016: LD_ADDR_VAR 0 11
65020: PUSH
65021: DOUBLE
65022: LD_INT 1
65024: DEC
65025: ST_TO_ADDR
65026: LD_VAR 0 5
65030: PUSH
65031: FOR_TO
65032: IFFALSE 65079
// begin hc_class := 21 ;
65034: LD_ADDR_OWVAR 28
65038: PUSH
65039: LD_INT 21
65041: ST_TO_ADDR
// hc_gallery :=  ;
65042: LD_ADDR_OWVAR 33
65046: PUSH
65047: LD_STRING 
65049: ST_TO_ADDR
// animal := CreateHuman ;
65050: LD_ADDR_VAR 0 12
65054: PUSH
65055: CALL_OW 44
65059: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65060: LD_VAR 0 12
65064: PPUSH
65065: LD_VAR 0 8
65069: PPUSH
65070: LD_INT 0
65072: PPUSH
65073: CALL 67198 0 3
// end ;
65077: GO 65031
65079: POP
65080: POP
// if birds then
65081: LD_VAR 0 1
65085: IFFALSE 65152
// for i = 1 to birds do
65087: LD_ADDR_VAR 0 11
65091: PUSH
65092: DOUBLE
65093: LD_INT 1
65095: DEC
65096: ST_TO_ADDR
65097: LD_VAR 0 1
65101: PUSH
65102: FOR_TO
65103: IFFALSE 65150
// begin hc_class = 18 ;
65105: LD_ADDR_OWVAR 28
65109: PUSH
65110: LD_INT 18
65112: ST_TO_ADDR
// hc_gallery =  ;
65113: LD_ADDR_OWVAR 33
65117: PUSH
65118: LD_STRING 
65120: ST_TO_ADDR
// animal := CreateHuman ;
65121: LD_ADDR_VAR 0 12
65125: PUSH
65126: CALL_OW 44
65130: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65131: LD_VAR 0 12
65135: PPUSH
65136: LD_VAR 0 8
65140: PPUSH
65141: LD_INT 0
65143: PPUSH
65144: CALL 67198 0 3
// end ;
65148: GO 65102
65150: POP
65151: POP
// if tigers then
65152: LD_VAR 0 2
65156: IFFALSE 65240
// for i = 1 to tigers do
65158: LD_ADDR_VAR 0 11
65162: PUSH
65163: DOUBLE
65164: LD_INT 1
65166: DEC
65167: ST_TO_ADDR
65168: LD_VAR 0 2
65172: PUSH
65173: FOR_TO
65174: IFFALSE 65238
// begin hc_class = class_tiger ;
65176: LD_ADDR_OWVAR 28
65180: PUSH
65181: LD_INT 14
65183: ST_TO_ADDR
// hc_gallery =  ;
65184: LD_ADDR_OWVAR 33
65188: PUSH
65189: LD_STRING 
65191: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65192: LD_ADDR_OWVAR 35
65196: PUSH
65197: LD_INT 7
65199: NEG
65200: PPUSH
65201: LD_INT 7
65203: PPUSH
65204: CALL_OW 12
65208: ST_TO_ADDR
// animal := CreateHuman ;
65209: LD_ADDR_VAR 0 12
65213: PUSH
65214: CALL_OW 44
65218: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65219: LD_VAR 0 12
65223: PPUSH
65224: LD_VAR 0 8
65228: PPUSH
65229: LD_INT 0
65231: PPUSH
65232: CALL 67198 0 3
// end ;
65236: GO 65173
65238: POP
65239: POP
// if apemans then
65240: LD_VAR 0 3
65244: IFFALSE 65367
// for i = 1 to apemans do
65246: LD_ADDR_VAR 0 11
65250: PUSH
65251: DOUBLE
65252: LD_INT 1
65254: DEC
65255: ST_TO_ADDR
65256: LD_VAR 0 3
65260: PUSH
65261: FOR_TO
65262: IFFALSE 65365
// begin hc_class = class_apeman ;
65264: LD_ADDR_OWVAR 28
65268: PUSH
65269: LD_INT 12
65271: ST_TO_ADDR
// hc_gallery =  ;
65272: LD_ADDR_OWVAR 33
65276: PUSH
65277: LD_STRING 
65279: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
65280: LD_ADDR_OWVAR 35
65284: PUSH
65285: LD_INT 5
65287: NEG
65288: PPUSH
65289: LD_INT 5
65291: PPUSH
65292: CALL_OW 12
65296: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65297: LD_ADDR_OWVAR 31
65301: PUSH
65302: LD_INT 1
65304: PPUSH
65305: LD_INT 3
65307: PPUSH
65308: CALL_OW 12
65312: PUSH
65313: LD_INT 1
65315: PPUSH
65316: LD_INT 3
65318: PPUSH
65319: CALL_OW 12
65323: PUSH
65324: LD_INT 0
65326: PUSH
65327: LD_INT 0
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: LIST
65334: LIST
65335: ST_TO_ADDR
// animal := CreateHuman ;
65336: LD_ADDR_VAR 0 12
65340: PUSH
65341: CALL_OW 44
65345: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65346: LD_VAR 0 12
65350: PPUSH
65351: LD_VAR 0 8
65355: PPUSH
65356: LD_INT 0
65358: PPUSH
65359: CALL 67198 0 3
// end ;
65363: GO 65261
65365: POP
65366: POP
// if enchidnas then
65367: LD_VAR 0 4
65371: IFFALSE 65438
// for i = 1 to enchidnas do
65373: LD_ADDR_VAR 0 11
65377: PUSH
65378: DOUBLE
65379: LD_INT 1
65381: DEC
65382: ST_TO_ADDR
65383: LD_VAR 0 4
65387: PUSH
65388: FOR_TO
65389: IFFALSE 65436
// begin hc_class = 13 ;
65391: LD_ADDR_OWVAR 28
65395: PUSH
65396: LD_INT 13
65398: ST_TO_ADDR
// hc_gallery =  ;
65399: LD_ADDR_OWVAR 33
65403: PUSH
65404: LD_STRING 
65406: ST_TO_ADDR
// animal := CreateHuman ;
65407: LD_ADDR_VAR 0 12
65411: PUSH
65412: CALL_OW 44
65416: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65417: LD_VAR 0 12
65421: PPUSH
65422: LD_VAR 0 8
65426: PPUSH
65427: LD_INT 0
65429: PPUSH
65430: CALL 67198 0 3
// end ;
65434: GO 65388
65436: POP
65437: POP
// if fishes then
65438: LD_VAR 0 7
65442: IFFALSE 65509
// for i = 1 to fishes do
65444: LD_ADDR_VAR 0 11
65448: PUSH
65449: DOUBLE
65450: LD_INT 1
65452: DEC
65453: ST_TO_ADDR
65454: LD_VAR 0 7
65458: PUSH
65459: FOR_TO
65460: IFFALSE 65507
// begin hc_class = 20 ;
65462: LD_ADDR_OWVAR 28
65466: PUSH
65467: LD_INT 20
65469: ST_TO_ADDR
// hc_gallery =  ;
65470: LD_ADDR_OWVAR 33
65474: PUSH
65475: LD_STRING 
65477: ST_TO_ADDR
// animal := CreateHuman ;
65478: LD_ADDR_VAR 0 12
65482: PUSH
65483: CALL_OW 44
65487: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65488: LD_VAR 0 12
65492: PPUSH
65493: LD_VAR 0 9
65497: PPUSH
65498: LD_INT 0
65500: PPUSH
65501: CALL 67198 0 3
// end ;
65505: GO 65459
65507: POP
65508: POP
// end ;
65509: LD_VAR 0 10
65513: RET
// export function WantHeal ( sci , unit ) ; begin
65514: LD_INT 0
65516: PPUSH
// if GetTaskList ( sci ) > 0 then
65517: LD_VAR 0 1
65521: PPUSH
65522: CALL_OW 437
65526: PUSH
65527: LD_INT 0
65529: GREATER
65530: IFFALSE 65600
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65532: LD_VAR 0 1
65536: PPUSH
65537: CALL_OW 437
65541: PUSH
65542: LD_INT 1
65544: ARRAY
65545: PUSH
65546: LD_INT 1
65548: ARRAY
65549: PUSH
65550: LD_STRING l
65552: EQUAL
65553: PUSH
65554: LD_VAR 0 1
65558: PPUSH
65559: CALL_OW 437
65563: PUSH
65564: LD_INT 1
65566: ARRAY
65567: PUSH
65568: LD_INT 4
65570: ARRAY
65571: PUSH
65572: LD_VAR 0 2
65576: EQUAL
65577: AND
65578: IFFALSE 65590
// result := true else
65580: LD_ADDR_VAR 0 3
65584: PUSH
65585: LD_INT 1
65587: ST_TO_ADDR
65588: GO 65598
// result := false ;
65590: LD_ADDR_VAR 0 3
65594: PUSH
65595: LD_INT 0
65597: ST_TO_ADDR
// end else
65598: GO 65608
// result := false ;
65600: LD_ADDR_VAR 0 3
65604: PUSH
65605: LD_INT 0
65607: ST_TO_ADDR
// end ;
65608: LD_VAR 0 3
65612: RET
// export function HealTarget ( sci ) ; begin
65613: LD_INT 0
65615: PPUSH
// if not sci then
65616: LD_VAR 0 1
65620: NOT
65621: IFFALSE 65625
// exit ;
65623: GO 65690
// result := 0 ;
65625: LD_ADDR_VAR 0 2
65629: PUSH
65630: LD_INT 0
65632: ST_TO_ADDR
// if GetTaskList ( sci ) then
65633: LD_VAR 0 1
65637: PPUSH
65638: CALL_OW 437
65642: IFFALSE 65690
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65644: LD_VAR 0 1
65648: PPUSH
65649: CALL_OW 437
65653: PUSH
65654: LD_INT 1
65656: ARRAY
65657: PUSH
65658: LD_INT 1
65660: ARRAY
65661: PUSH
65662: LD_STRING l
65664: EQUAL
65665: IFFALSE 65690
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65667: LD_ADDR_VAR 0 2
65671: PUSH
65672: LD_VAR 0 1
65676: PPUSH
65677: CALL_OW 437
65681: PUSH
65682: LD_INT 1
65684: ARRAY
65685: PUSH
65686: LD_INT 4
65688: ARRAY
65689: ST_TO_ADDR
// end ;
65690: LD_VAR 0 2
65694: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65695: LD_INT 0
65697: PPUSH
65698: PPUSH
65699: PPUSH
65700: PPUSH
// if not base_units then
65701: LD_VAR 0 1
65705: NOT
65706: IFFALSE 65710
// exit ;
65708: GO 65797
// result := false ;
65710: LD_ADDR_VAR 0 2
65714: PUSH
65715: LD_INT 0
65717: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65718: LD_ADDR_VAR 0 5
65722: PUSH
65723: LD_VAR 0 1
65727: PPUSH
65728: LD_INT 21
65730: PUSH
65731: LD_INT 3
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PPUSH
65738: CALL_OW 72
65742: ST_TO_ADDR
// if not tmp then
65743: LD_VAR 0 5
65747: NOT
65748: IFFALSE 65752
// exit ;
65750: GO 65797
// for i in tmp do
65752: LD_ADDR_VAR 0 3
65756: PUSH
65757: LD_VAR 0 5
65761: PUSH
65762: FOR_IN
65763: IFFALSE 65795
// begin result := EnemyInRange ( i , 22 ) ;
65765: LD_ADDR_VAR 0 2
65769: PUSH
65770: LD_VAR 0 3
65774: PPUSH
65775: LD_INT 22
65777: PPUSH
65778: CALL 64033 0 2
65782: ST_TO_ADDR
// if result then
65783: LD_VAR 0 2
65787: IFFALSE 65793
// exit ;
65789: POP
65790: POP
65791: GO 65797
// end ;
65793: GO 65762
65795: POP
65796: POP
// end ;
65797: LD_VAR 0 2
65801: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
65802: LD_INT 0
65804: PPUSH
65805: PPUSH
// if not units then
65806: LD_VAR 0 1
65810: NOT
65811: IFFALSE 65815
// exit ;
65813: GO 65885
// result := [ ] ;
65815: LD_ADDR_VAR 0 3
65819: PUSH
65820: EMPTY
65821: ST_TO_ADDR
// for i in units do
65822: LD_ADDR_VAR 0 4
65826: PUSH
65827: LD_VAR 0 1
65831: PUSH
65832: FOR_IN
65833: IFFALSE 65883
// if GetTag ( i ) = tag then
65835: LD_VAR 0 4
65839: PPUSH
65840: CALL_OW 110
65844: PUSH
65845: LD_VAR 0 2
65849: EQUAL
65850: IFFALSE 65881
// result := Insert ( result , result + 1 , i ) ;
65852: LD_ADDR_VAR 0 3
65856: PUSH
65857: LD_VAR 0 3
65861: PPUSH
65862: LD_VAR 0 3
65866: PUSH
65867: LD_INT 1
65869: PLUS
65870: PPUSH
65871: LD_VAR 0 4
65875: PPUSH
65876: CALL_OW 2
65880: ST_TO_ADDR
65881: GO 65832
65883: POP
65884: POP
// end ;
65885: LD_VAR 0 3
65889: RET
// export function IsDriver ( un ) ; begin
65890: LD_INT 0
65892: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65893: LD_ADDR_VAR 0 2
65897: PUSH
65898: LD_VAR 0 1
65902: PUSH
65903: LD_INT 55
65905: PUSH
65906: EMPTY
65907: LIST
65908: PPUSH
65909: CALL_OW 69
65913: IN
65914: ST_TO_ADDR
// end ;
65915: LD_VAR 0 2
65919: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65920: LD_INT 0
65922: PPUSH
65923: PPUSH
// list := [ ] ;
65924: LD_ADDR_VAR 0 5
65928: PUSH
65929: EMPTY
65930: ST_TO_ADDR
// case d of 0 :
65931: LD_VAR 0 3
65935: PUSH
65936: LD_INT 0
65938: DOUBLE
65939: EQUAL
65940: IFTRUE 65944
65942: GO 66077
65944: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65945: LD_ADDR_VAR 0 5
65949: PUSH
65950: LD_VAR 0 1
65954: PUSH
65955: LD_INT 4
65957: MINUS
65958: PUSH
65959: LD_VAR 0 2
65963: PUSH
65964: LD_INT 4
65966: MINUS
65967: PUSH
65968: LD_INT 2
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: LIST
65975: PUSH
65976: LD_VAR 0 1
65980: PUSH
65981: LD_INT 3
65983: MINUS
65984: PUSH
65985: LD_VAR 0 2
65989: PUSH
65990: LD_INT 1
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: LIST
65997: PUSH
65998: LD_VAR 0 1
66002: PUSH
66003: LD_INT 4
66005: PLUS
66006: PUSH
66007: LD_VAR 0 2
66011: PUSH
66012: LD_INT 4
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: LIST
66019: PUSH
66020: LD_VAR 0 1
66024: PUSH
66025: LD_INT 3
66027: PLUS
66028: PUSH
66029: LD_VAR 0 2
66033: PUSH
66034: LD_INT 3
66036: PLUS
66037: PUSH
66038: LD_INT 5
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: LIST
66045: PUSH
66046: LD_VAR 0 1
66050: PUSH
66051: LD_VAR 0 2
66055: PUSH
66056: LD_INT 4
66058: PLUS
66059: PUSH
66060: LD_INT 0
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: LIST
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: ST_TO_ADDR
// end ; 1 :
66075: GO 66775
66077: LD_INT 1
66079: DOUBLE
66080: EQUAL
66081: IFTRUE 66085
66083: GO 66218
66085: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66086: LD_ADDR_VAR 0 5
66090: PUSH
66091: LD_VAR 0 1
66095: PUSH
66096: LD_VAR 0 2
66100: PUSH
66101: LD_INT 4
66103: MINUS
66104: PUSH
66105: LD_INT 3
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: LIST
66112: PUSH
66113: LD_VAR 0 1
66117: PUSH
66118: LD_INT 3
66120: MINUS
66121: PUSH
66122: LD_VAR 0 2
66126: PUSH
66127: LD_INT 3
66129: MINUS
66130: PUSH
66131: LD_INT 2
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: LIST
66138: PUSH
66139: LD_VAR 0 1
66143: PUSH
66144: LD_INT 4
66146: MINUS
66147: PUSH
66148: LD_VAR 0 2
66152: PUSH
66153: LD_INT 1
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: LIST
66160: PUSH
66161: LD_VAR 0 1
66165: PUSH
66166: LD_VAR 0 2
66170: PUSH
66171: LD_INT 3
66173: PLUS
66174: PUSH
66175: LD_INT 0
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: LIST
66182: PUSH
66183: LD_VAR 0 1
66187: PUSH
66188: LD_INT 4
66190: PLUS
66191: PUSH
66192: LD_VAR 0 2
66196: PUSH
66197: LD_INT 4
66199: PLUS
66200: PUSH
66201: LD_INT 5
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: LIST
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: ST_TO_ADDR
// end ; 2 :
66216: GO 66775
66218: LD_INT 2
66220: DOUBLE
66221: EQUAL
66222: IFTRUE 66226
66224: GO 66355
66226: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66227: LD_ADDR_VAR 0 5
66231: PUSH
66232: LD_VAR 0 1
66236: PUSH
66237: LD_VAR 0 2
66241: PUSH
66242: LD_INT 3
66244: MINUS
66245: PUSH
66246: LD_INT 3
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: LIST
66253: PUSH
66254: LD_VAR 0 1
66258: PUSH
66259: LD_INT 4
66261: PLUS
66262: PUSH
66263: LD_VAR 0 2
66267: PUSH
66268: LD_INT 4
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: LIST
66275: PUSH
66276: LD_VAR 0 1
66280: PUSH
66281: LD_VAR 0 2
66285: PUSH
66286: LD_INT 4
66288: PLUS
66289: PUSH
66290: LD_INT 0
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: LIST
66297: PUSH
66298: LD_VAR 0 1
66302: PUSH
66303: LD_INT 3
66305: MINUS
66306: PUSH
66307: LD_VAR 0 2
66311: PUSH
66312: LD_INT 1
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: LIST
66319: PUSH
66320: LD_VAR 0 1
66324: PUSH
66325: LD_INT 4
66327: MINUS
66328: PUSH
66329: LD_VAR 0 2
66333: PUSH
66334: LD_INT 4
66336: MINUS
66337: PUSH
66338: LD_INT 2
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: LIST
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: ST_TO_ADDR
// end ; 3 :
66353: GO 66775
66355: LD_INT 3
66357: DOUBLE
66358: EQUAL
66359: IFTRUE 66363
66361: GO 66496
66363: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66364: LD_ADDR_VAR 0 5
66368: PUSH
66369: LD_VAR 0 1
66373: PUSH
66374: LD_INT 3
66376: PLUS
66377: PUSH
66378: LD_VAR 0 2
66382: PUSH
66383: LD_INT 4
66385: PUSH
66386: EMPTY
66387: LIST
66388: LIST
66389: LIST
66390: PUSH
66391: LD_VAR 0 1
66395: PUSH
66396: LD_INT 4
66398: PLUS
66399: PUSH
66400: LD_VAR 0 2
66404: PUSH
66405: LD_INT 4
66407: PLUS
66408: PUSH
66409: LD_INT 5
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: LIST
66416: PUSH
66417: LD_VAR 0 1
66421: PUSH
66422: LD_INT 4
66424: MINUS
66425: PUSH
66426: LD_VAR 0 2
66430: PUSH
66431: LD_INT 1
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: LIST
66438: PUSH
66439: LD_VAR 0 1
66443: PUSH
66444: LD_VAR 0 2
66448: PUSH
66449: LD_INT 4
66451: MINUS
66452: PUSH
66453: LD_INT 3
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: LIST
66460: PUSH
66461: LD_VAR 0 1
66465: PUSH
66466: LD_INT 3
66468: MINUS
66469: PUSH
66470: LD_VAR 0 2
66474: PUSH
66475: LD_INT 3
66477: MINUS
66478: PUSH
66479: LD_INT 2
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: LIST
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: LIST
66491: LIST
66492: LIST
66493: ST_TO_ADDR
// end ; 4 :
66494: GO 66775
66496: LD_INT 4
66498: DOUBLE
66499: EQUAL
66500: IFTRUE 66504
66502: GO 66637
66504: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66505: LD_ADDR_VAR 0 5
66509: PUSH
66510: LD_VAR 0 1
66514: PUSH
66515: LD_VAR 0 2
66519: PUSH
66520: LD_INT 4
66522: PLUS
66523: PUSH
66524: LD_INT 0
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: LIST
66531: PUSH
66532: LD_VAR 0 1
66536: PUSH
66537: LD_INT 3
66539: PLUS
66540: PUSH
66541: LD_VAR 0 2
66545: PUSH
66546: LD_INT 3
66548: PLUS
66549: PUSH
66550: LD_INT 5
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: LIST
66557: PUSH
66558: LD_VAR 0 1
66562: PUSH
66563: LD_INT 4
66565: PLUS
66566: PUSH
66567: LD_VAR 0 2
66571: PUSH
66572: LD_INT 4
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: LIST
66579: PUSH
66580: LD_VAR 0 1
66584: PUSH
66585: LD_VAR 0 2
66589: PUSH
66590: LD_INT 3
66592: MINUS
66593: PUSH
66594: LD_INT 3
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: LIST
66601: PUSH
66602: LD_VAR 0 1
66606: PUSH
66607: LD_INT 4
66609: MINUS
66610: PUSH
66611: LD_VAR 0 2
66615: PUSH
66616: LD_INT 4
66618: MINUS
66619: PUSH
66620: LD_INT 2
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: LIST
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: ST_TO_ADDR
// end ; 5 :
66635: GO 66775
66637: LD_INT 5
66639: DOUBLE
66640: EQUAL
66641: IFTRUE 66645
66643: GO 66774
66645: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66646: LD_ADDR_VAR 0 5
66650: PUSH
66651: LD_VAR 0 1
66655: PUSH
66656: LD_INT 4
66658: MINUS
66659: PUSH
66660: LD_VAR 0 2
66664: PUSH
66665: LD_INT 1
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: LIST
66672: PUSH
66673: LD_VAR 0 1
66677: PUSH
66678: LD_VAR 0 2
66682: PUSH
66683: LD_INT 4
66685: MINUS
66686: PUSH
66687: LD_INT 3
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: LIST
66694: PUSH
66695: LD_VAR 0 1
66699: PUSH
66700: LD_INT 4
66702: PLUS
66703: PUSH
66704: LD_VAR 0 2
66708: PUSH
66709: LD_INT 4
66711: PLUS
66712: PUSH
66713: LD_INT 5
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: LIST
66720: PUSH
66721: LD_VAR 0 1
66725: PUSH
66726: LD_INT 3
66728: PLUS
66729: PUSH
66730: LD_VAR 0 2
66734: PUSH
66735: LD_INT 4
66737: PUSH
66738: EMPTY
66739: LIST
66740: LIST
66741: LIST
66742: PUSH
66743: LD_VAR 0 1
66747: PUSH
66748: LD_VAR 0 2
66752: PUSH
66753: LD_INT 3
66755: PLUS
66756: PUSH
66757: LD_INT 0
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: LIST
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: ST_TO_ADDR
// end ; end ;
66772: GO 66775
66774: POP
// result := list ;
66775: LD_ADDR_VAR 0 4
66779: PUSH
66780: LD_VAR 0 5
66784: ST_TO_ADDR
// end ;
66785: LD_VAR 0 4
66789: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66790: LD_INT 0
66792: PPUSH
66793: PPUSH
66794: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66795: LD_VAR 0 1
66799: NOT
66800: PUSH
66801: LD_VAR 0 2
66805: PUSH
66806: LD_INT 1
66808: PUSH
66809: LD_INT 2
66811: PUSH
66812: LD_INT 3
66814: PUSH
66815: LD_INT 4
66817: PUSH
66818: EMPTY
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: IN
66824: NOT
66825: OR
66826: IFFALSE 66830
// exit ;
66828: GO 66922
// tmp := [ ] ;
66830: LD_ADDR_VAR 0 5
66834: PUSH
66835: EMPTY
66836: ST_TO_ADDR
// for i in units do
66837: LD_ADDR_VAR 0 4
66841: PUSH
66842: LD_VAR 0 1
66846: PUSH
66847: FOR_IN
66848: IFFALSE 66891
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66850: LD_ADDR_VAR 0 5
66854: PUSH
66855: LD_VAR 0 5
66859: PPUSH
66860: LD_VAR 0 5
66864: PUSH
66865: LD_INT 1
66867: PLUS
66868: PPUSH
66869: LD_VAR 0 4
66873: PPUSH
66874: LD_VAR 0 2
66878: PPUSH
66879: CALL_OW 259
66883: PPUSH
66884: CALL_OW 2
66888: ST_TO_ADDR
66889: GO 66847
66891: POP
66892: POP
// if not tmp then
66893: LD_VAR 0 5
66897: NOT
66898: IFFALSE 66902
// exit ;
66900: GO 66922
// result := SortListByListDesc ( units , tmp ) ;
66902: LD_ADDR_VAR 0 3
66906: PUSH
66907: LD_VAR 0 1
66911: PPUSH
66912: LD_VAR 0 5
66916: PPUSH
66917: CALL_OW 77
66921: ST_TO_ADDR
// end ;
66922: LD_VAR 0 3
66926: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66927: LD_INT 0
66929: PPUSH
66930: PPUSH
66931: PPUSH
// result := false ;
66932: LD_ADDR_VAR 0 3
66936: PUSH
66937: LD_INT 0
66939: ST_TO_ADDR
// x := GetX ( building ) ;
66940: LD_ADDR_VAR 0 4
66944: PUSH
66945: LD_VAR 0 2
66949: PPUSH
66950: CALL_OW 250
66954: ST_TO_ADDR
// y := GetY ( building ) ;
66955: LD_ADDR_VAR 0 5
66959: PUSH
66960: LD_VAR 0 2
66964: PPUSH
66965: CALL_OW 251
66969: ST_TO_ADDR
// if not building or not x or not y then
66970: LD_VAR 0 2
66974: NOT
66975: PUSH
66976: LD_VAR 0 4
66980: NOT
66981: OR
66982: PUSH
66983: LD_VAR 0 5
66987: NOT
66988: OR
66989: IFFALSE 66993
// exit ;
66991: GO 67085
// if GetTaskList ( unit ) then
66993: LD_VAR 0 1
66997: PPUSH
66998: CALL_OW 437
67002: IFFALSE 67085
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67004: LD_STRING e
67006: PUSH
67007: LD_VAR 0 1
67011: PPUSH
67012: CALL_OW 437
67016: PUSH
67017: LD_INT 1
67019: ARRAY
67020: PUSH
67021: LD_INT 1
67023: ARRAY
67024: EQUAL
67025: PUSH
67026: LD_VAR 0 4
67030: PUSH
67031: LD_VAR 0 1
67035: PPUSH
67036: CALL_OW 437
67040: PUSH
67041: LD_INT 1
67043: ARRAY
67044: PUSH
67045: LD_INT 2
67047: ARRAY
67048: EQUAL
67049: AND
67050: PUSH
67051: LD_VAR 0 5
67055: PUSH
67056: LD_VAR 0 1
67060: PPUSH
67061: CALL_OW 437
67065: PUSH
67066: LD_INT 1
67068: ARRAY
67069: PUSH
67070: LD_INT 3
67072: ARRAY
67073: EQUAL
67074: AND
67075: IFFALSE 67085
// result := true end ;
67077: LD_ADDR_VAR 0 3
67081: PUSH
67082: LD_INT 1
67084: ST_TO_ADDR
// end ;
67085: LD_VAR 0 3
67089: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67090: LD_INT 0
67092: PPUSH
// result := false ;
67093: LD_ADDR_VAR 0 4
67097: PUSH
67098: LD_INT 0
67100: ST_TO_ADDR
// if GetTaskList ( unit ) then
67101: LD_VAR 0 1
67105: PPUSH
67106: CALL_OW 437
67110: IFFALSE 67193
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67112: LD_STRING M
67114: PUSH
67115: LD_VAR 0 1
67119: PPUSH
67120: CALL_OW 437
67124: PUSH
67125: LD_INT 1
67127: ARRAY
67128: PUSH
67129: LD_INT 1
67131: ARRAY
67132: EQUAL
67133: PUSH
67134: LD_VAR 0 2
67138: PUSH
67139: LD_VAR 0 1
67143: PPUSH
67144: CALL_OW 437
67148: PUSH
67149: LD_INT 1
67151: ARRAY
67152: PUSH
67153: LD_INT 2
67155: ARRAY
67156: EQUAL
67157: AND
67158: PUSH
67159: LD_VAR 0 3
67163: PUSH
67164: LD_VAR 0 1
67168: PPUSH
67169: CALL_OW 437
67173: PUSH
67174: LD_INT 1
67176: ARRAY
67177: PUSH
67178: LD_INT 3
67180: ARRAY
67181: EQUAL
67182: AND
67183: IFFALSE 67193
// result := true ;
67185: LD_ADDR_VAR 0 4
67189: PUSH
67190: LD_INT 1
67192: ST_TO_ADDR
// end ; end ;
67193: LD_VAR 0 4
67197: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67198: LD_INT 0
67200: PPUSH
67201: PPUSH
67202: PPUSH
67203: PPUSH
// if not unit or not area then
67204: LD_VAR 0 1
67208: NOT
67209: PUSH
67210: LD_VAR 0 2
67214: NOT
67215: OR
67216: IFFALSE 67220
// exit ;
67218: GO 67384
// tmp := AreaToList ( area , i ) ;
67220: LD_ADDR_VAR 0 6
67224: PUSH
67225: LD_VAR 0 2
67229: PPUSH
67230: LD_VAR 0 5
67234: PPUSH
67235: CALL_OW 517
67239: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67240: LD_ADDR_VAR 0 5
67244: PUSH
67245: DOUBLE
67246: LD_INT 1
67248: DEC
67249: ST_TO_ADDR
67250: LD_VAR 0 6
67254: PUSH
67255: LD_INT 1
67257: ARRAY
67258: PUSH
67259: FOR_TO
67260: IFFALSE 67382
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67262: LD_ADDR_VAR 0 7
67266: PUSH
67267: LD_VAR 0 6
67271: PUSH
67272: LD_INT 1
67274: ARRAY
67275: PUSH
67276: LD_VAR 0 5
67280: ARRAY
67281: PUSH
67282: LD_VAR 0 6
67286: PUSH
67287: LD_INT 2
67289: ARRAY
67290: PUSH
67291: LD_VAR 0 5
67295: ARRAY
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67301: LD_VAR 0 7
67305: PUSH
67306: LD_INT 1
67308: ARRAY
67309: PPUSH
67310: LD_VAR 0 7
67314: PUSH
67315: LD_INT 2
67317: ARRAY
67318: PPUSH
67319: CALL_OW 428
67323: PUSH
67324: LD_INT 0
67326: EQUAL
67327: IFFALSE 67380
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67329: LD_VAR 0 1
67333: PPUSH
67334: LD_VAR 0 7
67338: PUSH
67339: LD_INT 1
67341: ARRAY
67342: PPUSH
67343: LD_VAR 0 7
67347: PUSH
67348: LD_INT 2
67350: ARRAY
67351: PPUSH
67352: LD_VAR 0 3
67356: PPUSH
67357: CALL_OW 48
// result := IsPlaced ( unit ) ;
67361: LD_ADDR_VAR 0 4
67365: PUSH
67366: LD_VAR 0 1
67370: PPUSH
67371: CALL_OW 305
67375: ST_TO_ADDR
// exit ;
67376: POP
67377: POP
67378: GO 67384
// end ; end ;
67380: GO 67259
67382: POP
67383: POP
// end ;
67384: LD_VAR 0 4
67388: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67389: LD_INT 0
67391: PPUSH
67392: PPUSH
67393: PPUSH
// if not side or side > 8 then
67394: LD_VAR 0 1
67398: NOT
67399: PUSH
67400: LD_VAR 0 1
67404: PUSH
67405: LD_INT 8
67407: GREATER
67408: OR
67409: IFFALSE 67413
// exit ;
67411: GO 67600
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67413: LD_ADDR_VAR 0 4
67417: PUSH
67418: LD_INT 22
67420: PUSH
67421: LD_VAR 0 1
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 21
67432: PUSH
67433: LD_INT 3
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PPUSH
67444: CALL_OW 69
67448: ST_TO_ADDR
// if not tmp then
67449: LD_VAR 0 4
67453: NOT
67454: IFFALSE 67458
// exit ;
67456: GO 67600
// enable_addtolog := true ;
67458: LD_ADDR_OWVAR 81
67462: PUSH
67463: LD_INT 1
67465: ST_TO_ADDR
// AddToLog ( [ ) ;
67466: LD_STRING [
67468: PPUSH
67469: CALL_OW 561
// for i in tmp do
67473: LD_ADDR_VAR 0 3
67477: PUSH
67478: LD_VAR 0 4
67482: PUSH
67483: FOR_IN
67484: IFFALSE 67591
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67486: LD_STRING [
67488: PUSH
67489: LD_VAR 0 3
67493: PPUSH
67494: CALL_OW 266
67498: STR
67499: PUSH
67500: LD_STRING , 
67502: STR
67503: PUSH
67504: LD_VAR 0 3
67508: PPUSH
67509: CALL_OW 250
67513: STR
67514: PUSH
67515: LD_STRING , 
67517: STR
67518: PUSH
67519: LD_VAR 0 3
67523: PPUSH
67524: CALL_OW 251
67528: STR
67529: PUSH
67530: LD_STRING , 
67532: STR
67533: PUSH
67534: LD_VAR 0 3
67538: PPUSH
67539: CALL_OW 254
67543: STR
67544: PUSH
67545: LD_STRING , 
67547: STR
67548: PUSH
67549: LD_VAR 0 3
67553: PPUSH
67554: LD_INT 1
67556: PPUSH
67557: CALL_OW 268
67561: STR
67562: PUSH
67563: LD_STRING , 
67565: STR
67566: PUSH
67567: LD_VAR 0 3
67571: PPUSH
67572: LD_INT 2
67574: PPUSH
67575: CALL_OW 268
67579: STR
67580: PUSH
67581: LD_STRING ],
67583: STR
67584: PPUSH
67585: CALL_OW 561
// end ;
67589: GO 67483
67591: POP
67592: POP
// AddToLog ( ]; ) ;
67593: LD_STRING ];
67595: PPUSH
67596: CALL_OW 561
// end ;
67600: LD_VAR 0 2
67604: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67605: LD_INT 0
67607: PPUSH
67608: PPUSH
67609: PPUSH
67610: PPUSH
67611: PPUSH
// if not area or not rate or not max then
67612: LD_VAR 0 1
67616: NOT
67617: PUSH
67618: LD_VAR 0 2
67622: NOT
67623: OR
67624: PUSH
67625: LD_VAR 0 4
67629: NOT
67630: OR
67631: IFFALSE 67635
// exit ;
67633: GO 67827
// while 1 do
67635: LD_INT 1
67637: IFFALSE 67827
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67639: LD_ADDR_VAR 0 9
67643: PUSH
67644: LD_VAR 0 1
67648: PPUSH
67649: LD_INT 1
67651: PPUSH
67652: CALL_OW 287
67656: PUSH
67657: LD_INT 10
67659: MUL
67660: ST_TO_ADDR
// r := rate / 10 ;
67661: LD_ADDR_VAR 0 7
67665: PUSH
67666: LD_VAR 0 2
67670: PUSH
67671: LD_INT 10
67673: DIVREAL
67674: ST_TO_ADDR
// time := 1 1$00 ;
67675: LD_ADDR_VAR 0 8
67679: PUSH
67680: LD_INT 2100
67682: ST_TO_ADDR
// if amount < min then
67683: LD_VAR 0 9
67687: PUSH
67688: LD_VAR 0 3
67692: LESS
67693: IFFALSE 67711
// r := r * 2 else
67695: LD_ADDR_VAR 0 7
67699: PUSH
67700: LD_VAR 0 7
67704: PUSH
67705: LD_INT 2
67707: MUL
67708: ST_TO_ADDR
67709: GO 67737
// if amount > max then
67711: LD_VAR 0 9
67715: PUSH
67716: LD_VAR 0 4
67720: GREATER
67721: IFFALSE 67737
// r := r / 2 ;
67723: LD_ADDR_VAR 0 7
67727: PUSH
67728: LD_VAR 0 7
67732: PUSH
67733: LD_INT 2
67735: DIVREAL
67736: ST_TO_ADDR
// time := time / r ;
67737: LD_ADDR_VAR 0 8
67741: PUSH
67742: LD_VAR 0 8
67746: PUSH
67747: LD_VAR 0 7
67751: DIVREAL
67752: ST_TO_ADDR
// if time < 0 then
67753: LD_VAR 0 8
67757: PUSH
67758: LD_INT 0
67760: LESS
67761: IFFALSE 67778
// time := time * - 1 ;
67763: LD_ADDR_VAR 0 8
67767: PUSH
67768: LD_VAR 0 8
67772: PUSH
67773: LD_INT 1
67775: NEG
67776: MUL
67777: ST_TO_ADDR
// wait ( time ) ;
67778: LD_VAR 0 8
67782: PPUSH
67783: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
67787: LD_INT 35
67789: PPUSH
67790: LD_INT 875
67792: PPUSH
67793: CALL_OW 12
67797: PPUSH
67798: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67802: LD_INT 1
67804: PPUSH
67805: LD_INT 5
67807: PPUSH
67808: CALL_OW 12
67812: PPUSH
67813: LD_VAR 0 1
67817: PPUSH
67818: LD_INT 1
67820: PPUSH
67821: CALL_OW 55
// end ;
67825: GO 67635
// end ;
67827: LD_VAR 0 5
67831: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67832: LD_INT 0
67834: PPUSH
67835: PPUSH
67836: PPUSH
67837: PPUSH
67838: PPUSH
67839: PPUSH
67840: PPUSH
67841: PPUSH
// if not turrets or not factories then
67842: LD_VAR 0 1
67846: NOT
67847: PUSH
67848: LD_VAR 0 2
67852: NOT
67853: OR
67854: IFFALSE 67858
// exit ;
67856: GO 68165
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67858: LD_ADDR_VAR 0 10
67862: PUSH
67863: LD_INT 5
67865: PUSH
67866: LD_INT 6
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 2
67875: PUSH
67876: LD_INT 4
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 3
67885: PUSH
67886: LD_INT 5
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 24
67900: PUSH
67901: LD_INT 25
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 23
67910: PUSH
67911: LD_INT 27
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 42
67924: PUSH
67925: LD_INT 43
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 44
67934: PUSH
67935: LD_INT 46
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 45
67944: PUSH
67945: LD_INT 47
67947: PUSH
67948: EMPTY
67949: LIST
67950: LIST
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: LIST
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: LIST
67961: ST_TO_ADDR
// result := [ ] ;
67962: LD_ADDR_VAR 0 3
67966: PUSH
67967: EMPTY
67968: ST_TO_ADDR
// for i in turrets do
67969: LD_ADDR_VAR 0 4
67973: PUSH
67974: LD_VAR 0 1
67978: PUSH
67979: FOR_IN
67980: IFFALSE 68163
// begin nat := GetNation ( i ) ;
67982: LD_ADDR_VAR 0 7
67986: PUSH
67987: LD_VAR 0 4
67991: PPUSH
67992: CALL_OW 248
67996: ST_TO_ADDR
// weapon := 0 ;
67997: LD_ADDR_VAR 0 8
68001: PUSH
68002: LD_INT 0
68004: ST_TO_ADDR
// if not nat then
68005: LD_VAR 0 7
68009: NOT
68010: IFFALSE 68014
// continue ;
68012: GO 67979
// for j in list [ nat ] do
68014: LD_ADDR_VAR 0 5
68018: PUSH
68019: LD_VAR 0 10
68023: PUSH
68024: LD_VAR 0 7
68028: ARRAY
68029: PUSH
68030: FOR_IN
68031: IFFALSE 68072
// if GetBWeapon ( i ) = j [ 1 ] then
68033: LD_VAR 0 4
68037: PPUSH
68038: CALL_OW 269
68042: PUSH
68043: LD_VAR 0 5
68047: PUSH
68048: LD_INT 1
68050: ARRAY
68051: EQUAL
68052: IFFALSE 68070
// begin weapon := j [ 2 ] ;
68054: LD_ADDR_VAR 0 8
68058: PUSH
68059: LD_VAR 0 5
68063: PUSH
68064: LD_INT 2
68066: ARRAY
68067: ST_TO_ADDR
// break ;
68068: GO 68072
// end ;
68070: GO 68030
68072: POP
68073: POP
// if not weapon then
68074: LD_VAR 0 8
68078: NOT
68079: IFFALSE 68083
// continue ;
68081: GO 67979
// for k in factories do
68083: LD_ADDR_VAR 0 6
68087: PUSH
68088: LD_VAR 0 2
68092: PUSH
68093: FOR_IN
68094: IFFALSE 68159
// begin weapons := AvailableWeaponList ( k ) ;
68096: LD_ADDR_VAR 0 9
68100: PUSH
68101: LD_VAR 0 6
68105: PPUSH
68106: CALL_OW 478
68110: ST_TO_ADDR
// if not weapons then
68111: LD_VAR 0 9
68115: NOT
68116: IFFALSE 68120
// continue ;
68118: GO 68093
// if weapon in weapons then
68120: LD_VAR 0 8
68124: PUSH
68125: LD_VAR 0 9
68129: IN
68130: IFFALSE 68157
// begin result := [ i , weapon ] ;
68132: LD_ADDR_VAR 0 3
68136: PUSH
68137: LD_VAR 0 4
68141: PUSH
68142: LD_VAR 0 8
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: ST_TO_ADDR
// exit ;
68151: POP
68152: POP
68153: POP
68154: POP
68155: GO 68165
// end ; end ;
68157: GO 68093
68159: POP
68160: POP
// end ;
68161: GO 67979
68163: POP
68164: POP
// end ;
68165: LD_VAR 0 3
68169: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68170: LD_INT 0
68172: PPUSH
// if not side or side > 8 then
68173: LD_VAR 0 3
68177: NOT
68178: PUSH
68179: LD_VAR 0 3
68183: PUSH
68184: LD_INT 8
68186: GREATER
68187: OR
68188: IFFALSE 68192
// exit ;
68190: GO 68251
// if not range then
68192: LD_VAR 0 4
68196: NOT
68197: IFFALSE 68208
// range := - 12 ;
68199: LD_ADDR_VAR 0 4
68203: PUSH
68204: LD_INT 12
68206: NEG
68207: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68208: LD_VAR 0 1
68212: PPUSH
68213: LD_VAR 0 2
68217: PPUSH
68218: LD_VAR 0 3
68222: PPUSH
68223: LD_VAR 0 4
68227: PPUSH
68228: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68232: LD_VAR 0 1
68236: PPUSH
68237: LD_VAR 0 2
68241: PPUSH
68242: LD_VAR 0 3
68246: PPUSH
68247: CALL_OW 331
// end ;
68251: LD_VAR 0 5
68255: RET
// export function Video ( mode ) ; begin
68256: LD_INT 0
68258: PPUSH
// ingame_video = mode ;
68259: LD_ADDR_OWVAR 52
68263: PUSH
68264: LD_VAR 0 1
68268: ST_TO_ADDR
// interface_hidden = mode ;
68269: LD_ADDR_OWVAR 54
68273: PUSH
68274: LD_VAR 0 1
68278: ST_TO_ADDR
// end ;
68279: LD_VAR 0 2
68283: RET
// export function Join ( array , element ) ; begin
68284: LD_INT 0
68286: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68287: LD_ADDR_VAR 0 3
68291: PUSH
68292: LD_VAR 0 1
68296: PPUSH
68297: LD_VAR 0 1
68301: PUSH
68302: LD_INT 1
68304: PLUS
68305: PPUSH
68306: LD_VAR 0 2
68310: PPUSH
68311: CALL_OW 1
68315: ST_TO_ADDR
// end ;
68316: LD_VAR 0 3
68320: RET
// export function JoinUnion ( array , element ) ; begin
68321: LD_INT 0
68323: PPUSH
// result := array union element ;
68324: LD_ADDR_VAR 0 3
68328: PUSH
68329: LD_VAR 0 1
68333: PUSH
68334: LD_VAR 0 2
68338: UNION
68339: ST_TO_ADDR
// end ;
68340: LD_VAR 0 3
68344: RET
// export function GetBehemoths ( side ) ; begin
68345: LD_INT 0
68347: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
68348: LD_ADDR_VAR 0 2
68352: PUSH
68353: LD_INT 22
68355: PUSH
68356: LD_VAR 0 1
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: PUSH
68365: LD_INT 31
68367: PUSH
68368: LD_INT 25
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PPUSH
68379: CALL_OW 69
68383: ST_TO_ADDR
// end ;
68384: LD_VAR 0 2
68388: RET
// export function Shuffle ( array ) ; var i , index ; begin
68389: LD_INT 0
68391: PPUSH
68392: PPUSH
68393: PPUSH
// result := [ ] ;
68394: LD_ADDR_VAR 0 2
68398: PUSH
68399: EMPTY
68400: ST_TO_ADDR
// if not array then
68401: LD_VAR 0 1
68405: NOT
68406: IFFALSE 68410
// exit ;
68408: GO 68509
// Randomize ;
68410: CALL_OW 10
// for i = array downto 1 do
68414: LD_ADDR_VAR 0 3
68418: PUSH
68419: DOUBLE
68420: LD_VAR 0 1
68424: INC
68425: ST_TO_ADDR
68426: LD_INT 1
68428: PUSH
68429: FOR_DOWNTO
68430: IFFALSE 68507
// begin index := rand ( 1 , array ) ;
68432: LD_ADDR_VAR 0 4
68436: PUSH
68437: LD_INT 1
68439: PPUSH
68440: LD_VAR 0 1
68444: PPUSH
68445: CALL_OW 12
68449: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68450: LD_ADDR_VAR 0 2
68454: PUSH
68455: LD_VAR 0 2
68459: PPUSH
68460: LD_VAR 0 2
68464: PUSH
68465: LD_INT 1
68467: PLUS
68468: PPUSH
68469: LD_VAR 0 1
68473: PUSH
68474: LD_VAR 0 4
68478: ARRAY
68479: PPUSH
68480: CALL_OW 2
68484: ST_TO_ADDR
// array := Delete ( array , index ) ;
68485: LD_ADDR_VAR 0 1
68489: PUSH
68490: LD_VAR 0 1
68494: PPUSH
68495: LD_VAR 0 4
68499: PPUSH
68500: CALL_OW 3
68504: ST_TO_ADDR
// end ;
68505: GO 68429
68507: POP
68508: POP
// end ;
68509: LD_VAR 0 2
68513: RET
// export function GetBaseMaterials ( base ) ; begin
68514: LD_INT 0
68516: PPUSH
// result := [ 0 , 0 , 0 ] ;
68517: LD_ADDR_VAR 0 2
68521: PUSH
68522: LD_INT 0
68524: PUSH
68525: LD_INT 0
68527: PUSH
68528: LD_INT 0
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: LIST
68535: ST_TO_ADDR
// if not base then
68536: LD_VAR 0 1
68540: NOT
68541: IFFALSE 68545
// exit ;
68543: GO 68594
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68545: LD_ADDR_VAR 0 2
68549: PUSH
68550: LD_VAR 0 1
68554: PPUSH
68555: LD_INT 1
68557: PPUSH
68558: CALL_OW 275
68562: PUSH
68563: LD_VAR 0 1
68567: PPUSH
68568: LD_INT 2
68570: PPUSH
68571: CALL_OW 275
68575: PUSH
68576: LD_VAR 0 1
68580: PPUSH
68581: LD_INT 3
68583: PPUSH
68584: CALL_OW 275
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: LIST
68593: ST_TO_ADDR
// end ;
68594: LD_VAR 0 2
68598: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68599: LD_INT 0
68601: PPUSH
68602: PPUSH
// result := array ;
68603: LD_ADDR_VAR 0 3
68607: PUSH
68608: LD_VAR 0 1
68612: ST_TO_ADDR
// if size > 0 then
68613: LD_VAR 0 2
68617: PUSH
68618: LD_INT 0
68620: GREATER
68621: IFFALSE 68667
// for i := array downto size do
68623: LD_ADDR_VAR 0 4
68627: PUSH
68628: DOUBLE
68629: LD_VAR 0 1
68633: INC
68634: ST_TO_ADDR
68635: LD_VAR 0 2
68639: PUSH
68640: FOR_DOWNTO
68641: IFFALSE 68665
// result := Delete ( result , result ) ;
68643: LD_ADDR_VAR 0 3
68647: PUSH
68648: LD_VAR 0 3
68652: PPUSH
68653: LD_VAR 0 3
68657: PPUSH
68658: CALL_OW 3
68662: ST_TO_ADDR
68663: GO 68640
68665: POP
68666: POP
// end ;
68667: LD_VAR 0 3
68671: RET
// export function ComExit ( unit ) ; var tmp ; begin
68672: LD_INT 0
68674: PPUSH
68675: PPUSH
// if not IsInUnit ( unit ) then
68676: LD_VAR 0 1
68680: PPUSH
68681: CALL_OW 310
68685: NOT
68686: IFFALSE 68690
// exit ;
68688: GO 68750
// tmp := IsInUnit ( unit ) ;
68690: LD_ADDR_VAR 0 3
68694: PUSH
68695: LD_VAR 0 1
68699: PPUSH
68700: CALL_OW 310
68704: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68705: LD_VAR 0 3
68709: PPUSH
68710: CALL_OW 247
68714: PUSH
68715: LD_INT 2
68717: EQUAL
68718: IFFALSE 68731
// ComExitVehicle ( unit ) else
68720: LD_VAR 0 1
68724: PPUSH
68725: CALL_OW 121
68729: GO 68740
// ComExitBuilding ( unit ) ;
68731: LD_VAR 0 1
68735: PPUSH
68736: CALL_OW 122
// result := tmp ;
68740: LD_ADDR_VAR 0 2
68744: PUSH
68745: LD_VAR 0 3
68749: ST_TO_ADDR
// end ;
68750: LD_VAR 0 2
68754: RET
// export function ResetHc ; begin
68755: LD_INT 0
68757: PPUSH
// InitHc ;
68758: CALL_OW 19
// hc_importance := 0 ;
68762: LD_ADDR_OWVAR 32
68766: PUSH
68767: LD_INT 0
68769: ST_TO_ADDR
// end ;
68770: LD_VAR 0 1
68774: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68775: LD_INT 0
68777: PPUSH
68778: PPUSH
68779: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68780: LD_ADDR_VAR 0 6
68784: PUSH
68785: LD_VAR 0 1
68789: PUSH
68790: LD_VAR 0 3
68794: PLUS
68795: PUSH
68796: LD_INT 2
68798: DIV
68799: ST_TO_ADDR
// if _x < 0 then
68800: LD_VAR 0 6
68804: PUSH
68805: LD_INT 0
68807: LESS
68808: IFFALSE 68825
// _x := _x * - 1 ;
68810: LD_ADDR_VAR 0 6
68814: PUSH
68815: LD_VAR 0 6
68819: PUSH
68820: LD_INT 1
68822: NEG
68823: MUL
68824: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68825: LD_ADDR_VAR 0 7
68829: PUSH
68830: LD_VAR 0 2
68834: PUSH
68835: LD_VAR 0 4
68839: PLUS
68840: PUSH
68841: LD_INT 2
68843: DIV
68844: ST_TO_ADDR
// if _y < 0 then
68845: LD_VAR 0 7
68849: PUSH
68850: LD_INT 0
68852: LESS
68853: IFFALSE 68870
// _y := _y * - 1 ;
68855: LD_ADDR_VAR 0 7
68859: PUSH
68860: LD_VAR 0 7
68864: PUSH
68865: LD_INT 1
68867: NEG
68868: MUL
68869: ST_TO_ADDR
// result := [ _x , _y ] ;
68870: LD_ADDR_VAR 0 5
68874: PUSH
68875: LD_VAR 0 6
68879: PUSH
68880: LD_VAR 0 7
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: ST_TO_ADDR
// end ;
68889: LD_VAR 0 5
68893: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68894: LD_INT 0
68896: PPUSH
68897: PPUSH
68898: PPUSH
68899: PPUSH
// task := GetTaskList ( unit ) ;
68900: LD_ADDR_VAR 0 7
68904: PUSH
68905: LD_VAR 0 1
68909: PPUSH
68910: CALL_OW 437
68914: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68915: LD_VAR 0 7
68919: NOT
68920: PUSH
68921: LD_VAR 0 1
68925: PPUSH
68926: LD_VAR 0 2
68930: PPUSH
68931: CALL_OW 308
68935: NOT
68936: AND
68937: IFFALSE 68941
// exit ;
68939: GO 69059
// if IsInArea ( unit , area ) then
68941: LD_VAR 0 1
68945: PPUSH
68946: LD_VAR 0 2
68950: PPUSH
68951: CALL_OW 308
68955: IFFALSE 68973
// begin ComMoveToArea ( unit , goAway ) ;
68957: LD_VAR 0 1
68961: PPUSH
68962: LD_VAR 0 3
68966: PPUSH
68967: CALL_OW 113
// exit ;
68971: GO 69059
// end ; if task [ 1 ] [ 1 ] <> M then
68973: LD_VAR 0 7
68977: PUSH
68978: LD_INT 1
68980: ARRAY
68981: PUSH
68982: LD_INT 1
68984: ARRAY
68985: PUSH
68986: LD_STRING M
68988: NONEQUAL
68989: IFFALSE 68993
// exit ;
68991: GO 69059
// x := task [ 1 ] [ 2 ] ;
68993: LD_ADDR_VAR 0 5
68997: PUSH
68998: LD_VAR 0 7
69002: PUSH
69003: LD_INT 1
69005: ARRAY
69006: PUSH
69007: LD_INT 2
69009: ARRAY
69010: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69011: LD_ADDR_VAR 0 6
69015: PUSH
69016: LD_VAR 0 7
69020: PUSH
69021: LD_INT 1
69023: ARRAY
69024: PUSH
69025: LD_INT 3
69027: ARRAY
69028: ST_TO_ADDR
// if InArea ( x , y , area ) then
69029: LD_VAR 0 5
69033: PPUSH
69034: LD_VAR 0 6
69038: PPUSH
69039: LD_VAR 0 2
69043: PPUSH
69044: CALL_OW 309
69048: IFFALSE 69059
// ComStop ( unit ) ;
69050: LD_VAR 0 1
69054: PPUSH
69055: CALL_OW 141
// end ;
69059: LD_VAR 0 4
69063: RET
// export function Abs ( value ) ; begin
69064: LD_INT 0
69066: PPUSH
// result := value ;
69067: LD_ADDR_VAR 0 2
69071: PUSH
69072: LD_VAR 0 1
69076: ST_TO_ADDR
// if value < 0 then
69077: LD_VAR 0 1
69081: PUSH
69082: LD_INT 0
69084: LESS
69085: IFFALSE 69102
// result := value * - 1 ;
69087: LD_ADDR_VAR 0 2
69091: PUSH
69092: LD_VAR 0 1
69096: PUSH
69097: LD_INT 1
69099: NEG
69100: MUL
69101: ST_TO_ADDR
// end ;
69102: LD_VAR 0 2
69106: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69107: LD_INT 0
69109: PPUSH
69110: PPUSH
69111: PPUSH
69112: PPUSH
69113: PPUSH
69114: PPUSH
69115: PPUSH
69116: PPUSH
// if not unit or not building then
69117: LD_VAR 0 1
69121: NOT
69122: PUSH
69123: LD_VAR 0 2
69127: NOT
69128: OR
69129: IFFALSE 69133
// exit ;
69131: GO 69359
// x := GetX ( building ) ;
69133: LD_ADDR_VAR 0 4
69137: PUSH
69138: LD_VAR 0 2
69142: PPUSH
69143: CALL_OW 250
69147: ST_TO_ADDR
// y := GetY ( building ) ;
69148: LD_ADDR_VAR 0 6
69152: PUSH
69153: LD_VAR 0 2
69157: PPUSH
69158: CALL_OW 251
69162: ST_TO_ADDR
// d := GetDir ( building ) ;
69163: LD_ADDR_VAR 0 8
69167: PUSH
69168: LD_VAR 0 2
69172: PPUSH
69173: CALL_OW 254
69177: ST_TO_ADDR
// r := 4 ;
69178: LD_ADDR_VAR 0 9
69182: PUSH
69183: LD_INT 4
69185: ST_TO_ADDR
// for i := 1 to 5 do
69186: LD_ADDR_VAR 0 10
69190: PUSH
69191: DOUBLE
69192: LD_INT 1
69194: DEC
69195: ST_TO_ADDR
69196: LD_INT 5
69198: PUSH
69199: FOR_TO
69200: IFFALSE 69357
// begin _x := ShiftX ( x , d , r + i ) ;
69202: LD_ADDR_VAR 0 5
69206: PUSH
69207: LD_VAR 0 4
69211: PPUSH
69212: LD_VAR 0 8
69216: PPUSH
69217: LD_VAR 0 9
69221: PUSH
69222: LD_VAR 0 10
69226: PLUS
69227: PPUSH
69228: CALL_OW 272
69232: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69233: LD_ADDR_VAR 0 7
69237: PUSH
69238: LD_VAR 0 6
69242: PPUSH
69243: LD_VAR 0 8
69247: PPUSH
69248: LD_VAR 0 9
69252: PUSH
69253: LD_VAR 0 10
69257: PLUS
69258: PPUSH
69259: CALL_OW 273
69263: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69264: LD_VAR 0 5
69268: PPUSH
69269: LD_VAR 0 7
69273: PPUSH
69274: CALL_OW 488
69278: PUSH
69279: LD_VAR 0 5
69283: PPUSH
69284: LD_VAR 0 7
69288: PPUSH
69289: CALL_OW 428
69293: PPUSH
69294: CALL_OW 247
69298: PUSH
69299: LD_INT 3
69301: PUSH
69302: LD_INT 2
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: IN
69309: NOT
69310: AND
69311: IFFALSE 69355
// begin ComMoveXY ( unit , _x , _y ) ;
69313: LD_VAR 0 1
69317: PPUSH
69318: LD_VAR 0 5
69322: PPUSH
69323: LD_VAR 0 7
69327: PPUSH
69328: CALL_OW 111
// result := [ _x , _y ] ;
69332: LD_ADDR_VAR 0 3
69336: PUSH
69337: LD_VAR 0 5
69341: PUSH
69342: LD_VAR 0 7
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: ST_TO_ADDR
// exit ;
69351: POP
69352: POP
69353: GO 69359
// end ; end ;
69355: GO 69199
69357: POP
69358: POP
// end ;
69359: LD_VAR 0 3
69363: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69364: LD_INT 0
69366: PPUSH
69367: PPUSH
69368: PPUSH
// result := 0 ;
69369: LD_ADDR_VAR 0 3
69373: PUSH
69374: LD_INT 0
69376: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69377: LD_VAR 0 1
69381: PUSH
69382: LD_INT 0
69384: LESS
69385: PUSH
69386: LD_VAR 0 1
69390: PUSH
69391: LD_INT 8
69393: GREATER
69394: OR
69395: PUSH
69396: LD_VAR 0 2
69400: PUSH
69401: LD_INT 0
69403: LESS
69404: OR
69405: PUSH
69406: LD_VAR 0 2
69410: PUSH
69411: LD_INT 8
69413: GREATER
69414: OR
69415: IFFALSE 69419
// exit ;
69417: GO 69494
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69419: LD_ADDR_VAR 0 4
69423: PUSH
69424: LD_INT 22
69426: PUSH
69427: LD_VAR 0 2
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PPUSH
69436: CALL_OW 69
69440: PUSH
69441: FOR_IN
69442: IFFALSE 69492
// begin un := UnitShoot ( i ) ;
69444: LD_ADDR_VAR 0 5
69448: PUSH
69449: LD_VAR 0 4
69453: PPUSH
69454: CALL_OW 504
69458: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69459: LD_VAR 0 5
69463: PPUSH
69464: CALL_OW 255
69468: PUSH
69469: LD_VAR 0 1
69473: EQUAL
69474: IFFALSE 69490
// begin result := un ;
69476: LD_ADDR_VAR 0 3
69480: PUSH
69481: LD_VAR 0 5
69485: ST_TO_ADDR
// exit ;
69486: POP
69487: POP
69488: GO 69494
// end ; end ;
69490: GO 69441
69492: POP
69493: POP
// end ;
69494: LD_VAR 0 3
69498: RET
// export function GetCargoBay ( units ) ; begin
69499: LD_INT 0
69501: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69502: LD_ADDR_VAR 0 2
69506: PUSH
69507: LD_VAR 0 1
69511: PPUSH
69512: LD_INT 2
69514: PUSH
69515: LD_INT 34
69517: PUSH
69518: LD_INT 12
69520: PUSH
69521: EMPTY
69522: LIST
69523: LIST
69524: PUSH
69525: LD_INT 34
69527: PUSH
69528: LD_INT 51
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: LD_INT 34
69537: PUSH
69538: LD_INT 32
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 34
69547: PUSH
69548: LD_EXP 39
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: PPUSH
69564: CALL_OW 72
69568: ST_TO_ADDR
// end ; end_of_file
69569: LD_VAR 0 2
69573: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69574: LD_VAR 0 1
69578: PUSH
69579: LD_INT 200
69581: DOUBLE
69582: GREATEREQUAL
69583: IFFALSE 69591
69585: LD_INT 299
69587: DOUBLE
69588: LESSEQUAL
69589: IFTRUE 69593
69591: GO 69625
69593: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; end ;
69594: LD_VAR 0 1
69598: PPUSH
69599: LD_VAR 0 2
69603: PPUSH
69604: LD_VAR 0 3
69608: PPUSH
69609: LD_VAR 0 4
69613: PPUSH
69614: LD_VAR 0 5
69618: PPUSH
69619: CALL 28412 0 5
69623: GO 69626
69625: POP
// end ;
69626: PPOPN 11
69628: END
