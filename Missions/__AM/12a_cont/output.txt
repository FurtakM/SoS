// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 123 0 0
// PrepareNature ;
  15: CALL 30593 0 0
// PrepareAlliance ;
  19: CALL 337 0 0
// PrepareFriends ;
  23: CALL 3635 0 0
// PrepareAmerican ;
  27: CALL 774 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 106
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 16
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 14
  99: PPUSH
 100: CALL_OW 471
// end else
 104: GO 110
// Action ;
 106: CALL 30929 0 0
// PreparePatrol ;
 110: CALL 1239 0 0
// game := true ;
 114: LD_ADDR_EXP 2
 118: PUSH
 119: LD_INT 1
 121: ST_TO_ADDR
// end ;
 122: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert ; export function InitVariables ; begin
 123: LD_INT 0
 125: PPUSH
// debug := false ;
 126: LD_ADDR_EXP 1
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// friends := [ ] ;
 134: LD_ADDR_EXP 4
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// selected := [ ] ;
 141: LD_ADDR_EXP 3
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// reached_lab := false ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// can_escape := false ;
 156: LD_ADDR_EXP 6
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// game := false ;
 164: LD_ADDR_EXP 2
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 2 ) ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_STRING GammaCommander
 179: PPUSH
 180: LD_INT 2
 182: PPUSH
 183: CALL_OW 30
 187: ST_TO_ADDR
// friends_kill_counter := 0 ;
 188: LD_ADDR_EXP 8
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// team_kill_counter := 0 ;
 196: LD_ADDR_EXP 9
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// extra_patrol := true ;
 204: LD_ADDR_EXP 11
 208: PUSH
 209: LD_INT 1
 211: ST_TO_ADDR
// on_hill := false ;
 212: LD_ADDR_EXP 7
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// invis_used := false ;
 220: LD_ADDR_EXP 12
 224: PUSH
 225: LD_INT 0
 227: ST_TO_ADDR
// alert := false ;
 228: LD_ADDR_EXP 13
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// end ;
 236: LD_VAR 0 1
 240: RET
// every 0 0$1 trigger on_hill do
 241: LD_EXP 7
 245: IFFALSE 257
 247: GO 249
 249: DISABLE
// SetAchievement ( ACH_EYE ) ;
 250: LD_STRING ACH_EYE
 252: PPUSH
 253: CALL_OW 543
 257: END
// every 0 0$1 trigger not invis_used do var i ;
 258: LD_EXP 12
 262: NOT
 263: IFFALSE 334
 265: GO 267
 267: DISABLE
 268: LD_INT 0
 270: PPUSH
// begin enable ;
 271: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 272: LD_ADDR_VAR 0 1
 276: PUSH
 277: LD_INT 22
 279: PUSH
 280: LD_INT 7
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 21
 289: PUSH
 290: LD_INT 1
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: PPUSH
 301: CALL_OW 69
 305: PUSH
 306: FOR_IN
 307: IFFALSE 332
// if IsInvisible ( i ) then
 309: LD_VAR 0 1
 313: PPUSH
 314: CALL_OW 571
 318: IFFALSE 330
// begin invis_used := true ;
 320: LD_ADDR_EXP 12
 324: PUSH
 325: LD_INT 1
 327: ST_TO_ADDR
// break ;
 328: GO 332
// end ;
 330: GO 306
 332: POP
 333: POP
// end ; end_of_file
 334: PPOPN 1
 336: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 337: LD_INT 0
 339: PPUSH
 340: PPUSH
// uc_side := 7 ;
 341: LD_ADDR_OWVAR 20
 345: PUSH
 346: LD_INT 7
 348: ST_TO_ADDR
// uc_nation := 1 ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_INT 1
 356: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 357: LD_ADDR_EXP 14
 361: PUSH
 362: LD_STRING JMM
 364: PPUSH
 365: LD_EXP 1
 369: NOT
 370: PPUSH
 371: LD_STRING 11_
 373: PPUSH
 374: CALL 6017 0 3
 378: ST_TO_ADDR
// uc_side := 4 ;
 379: LD_ADDR_OWVAR 20
 383: PUSH
 384: LD_INT 4
 386: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 387: LD_ADDR_EXP 15
 391: PUSH
 392: LD_STRING Roth
 394: PPUSH
 395: CALL_OW 25
 399: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 400: LD_EXP 14
 404: PPUSH
 405: LD_INT 1
 407: PPUSH
 408: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 412: LD_EXP 14
 416: PPUSH
 417: LD_INT 1
 419: PPUSH
 420: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 424: LD_EXP 14
 428: PPUSH
 429: LD_INT 105
 431: PPUSH
 432: LD_INT 10
 434: PPUSH
 435: LD_INT 0
 437: PPUSH
 438: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 442: LD_EXP 15
 446: PPUSH
 447: LD_INT 4
 449: PPUSH
 450: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 454: LD_EXP 15
 458: PPUSH
 459: LD_INT 109
 461: PPUSH
 462: LD_INT 10
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 472: LD_EXP 14
 476: PPUSH
 477: LD_EXP 15
 481: PPUSH
 482: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 486: LD_EXP 15
 490: PPUSH
 491: LD_EXP 14
 495: PPUSH
 496: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 500: LD_INT 3
 502: PPUSH
 503: LD_INT 3
 505: PPUSH
 506: LD_INT 3
 508: PPUSH
 509: LD_INT 12
 511: PPUSH
 512: LD_INT 100
 514: PPUSH
 515: CALL 6080 0 5
// cargo := CreateVehicle ;
 519: LD_ADDR_VAR 0 2
 523: PUSH
 524: CALL_OW 45
 528: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 529: LD_VAR 0 2
 533: PPUSH
 534: LD_INT 1
 536: PPUSH
 537: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 541: LD_VAR 0 2
 545: PPUSH
 546: LD_INT 179
 548: PPUSH
 549: LD_INT 45
 551: PPUSH
 552: LD_INT 0
 554: PPUSH
 555: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 559: LD_VAR 0 2
 563: PPUSH
 564: LD_INT 4
 566: PPUSH
 567: LD_INT 30
 569: PPUSH
 570: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 574: LD_STRING 11_artifact_captured
 576: PPUSH
 577: LD_INT 0
 579: PPUSH
 580: CALL_OW 30
 584: IFFALSE 641
// begin cargo := CreateVehicle ;
 586: LD_ADDR_VAR 0 2
 590: PUSH
 591: CALL_OW 45
 595: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 596: LD_VAR 0 2
 600: PPUSH
 601: LD_INT 0
 603: PPUSH
 604: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 608: LD_VAR 0 2
 612: PPUSH
 613: LD_INT 171
 615: PPUSH
 616: LD_INT 85
 618: PPUSH
 619: LD_INT 0
 621: PPUSH
 622: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 626: LD_VAR 0 2
 630: PPUSH
 631: LD_INT 4
 633: PPUSH
 634: LD_INT 50
 636: PPUSH
 637: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 641: LD_INT 47
 643: PPUSH
 644: LD_INT 7
 646: PPUSH
 647: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 651: LD_INT 1
 653: PPUSH
 654: LD_INT 47
 656: PPUSH
 657: CALL_OW 471
// end ;
 661: LD_VAR 0 1
 665: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 666: LD_INT 38
 668: PPUSH
 669: LD_INT 22
 671: PUSH
 672: LD_INT 7
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: PPUSH
 679: CALL_OW 70
 683: PUSH
 684: LD_EXP 7
 688: NOT
 689: AND
 690: IFFALSE 721
 692: GO 694
 694: DISABLE
// begin enable ;
 695: ENABLE
// on_hill := true ;
 696: LD_ADDR_EXP 7
 700: PUSH
 701: LD_INT 1
 703: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 704: LD_INT 126
 706: PPUSH
 707: LD_INT 13
 709: PPUSH
 710: LD_INT 7
 712: PPUSH
 713: LD_INT 90
 715: NEG
 716: PPUSH
 717: CALL_OW 330
// end ;
 721: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 722: LD_INT 38
 724: PPUSH
 725: LD_INT 22
 727: PUSH
 728: LD_INT 7
 730: PUSH
 731: EMPTY
 732: LIST
 733: LIST
 734: PPUSH
 735: CALL_OW 70
 739: NOT
 740: PUSH
 741: LD_EXP 7
 745: AND
 746: IFFALSE 773
 748: GO 750
 750: DISABLE
// begin enable ;
 751: ENABLE
// on_hill := false ;
 752: LD_ADDR_EXP 7
 756: PUSH
 757: LD_INT 0
 759: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 760: LD_INT 126
 762: PPUSH
 763: LD_INT 13
 765: PPUSH
 766: LD_INT 7
 768: PPUSH
 769: CALL_OW 331
// end ; end_of_file
 773: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 774: LD_INT 0
 776: PPUSH
 777: PPUSH
 778: PPUSH
 779: PPUSH
 780: PPUSH
 781: PPUSH
// if Difficulty = 1 then
 782: LD_OWVAR 67
 786: PUSH
 787: LD_INT 1
 789: EQUAL
 790: IFFALSE 898
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 792: LD_ADDR_VAR 0 6
 796: PUSH
 797: LD_INT 155
 799: PUSH
 800: LD_INT 77
 802: PUSH
 803: EMPTY
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 193
 809: PUSH
 810: LD_INT 93
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 188
 819: PUSH
 820: LD_INT 81
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: LD_INT 56
 829: PUSH
 830: LD_INT 85
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: PUSH
 837: LD_INT 98
 839: PUSH
 840: LD_INT 87
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: LIST
 851: LIST
 852: LIST
 853: ST_TO_ADDR
// for i in tmp do
 854: LD_ADDR_VAR 0 2
 858: PUSH
 859: LD_VAR 0 6
 863: PUSH
 864: FOR_IN
 865: IFFALSE 896
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 867: LD_VAR 0 2
 871: PUSH
 872: LD_INT 1
 874: ARRAY
 875: PPUSH
 876: LD_VAR 0 2
 880: PUSH
 881: LD_INT 2
 883: ARRAY
 884: PPUSH
 885: CALL_OW 428
 889: PPUSH
 890: CALL_OW 64
 894: GO 864
 896: POP
 897: POP
// end ; defcon := 0 ;
 898: LD_ADDR_EXP 21
 902: PUSH
 903: LD_INT 0
 905: ST_TO_ADDR
// defcon_wave := 0 ;
 906: LD_ADDR_EXP 22
 910: PUSH
 911: LD_INT 0
 913: ST_TO_ADDR
// defenders := [ ] ;
 914: LD_ADDR_EXP 20
 918: PUSH
 919: EMPTY
 920: ST_TO_ADDR
// SetBName ( alfa , alpha ) ;
 921: LD_INT 5
 923: PPUSH
 924: LD_STRING alpha
 926: PPUSH
 927: CALL_OW 500
// uc_side := 1 ;
 931: LD_ADDR_OWVAR 20
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
// uc_nation := 1 ;
 939: LD_ADDR_OWVAR 21
 943: PUSH
 944: LD_INT 1
 946: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 947: LD_ADDR_EXP 16
 951: PUSH
 952: LD_STRING Powell
 954: PPUSH
 955: CALL_OW 25
 959: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 960: LD_EXP 16
 964: PPUSH
 965: LD_INT 110
 967: PPUSH
 968: LD_INT 26
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL_OW 48
// ComHold ( Powell ) ;
 978: LD_EXP 16
 982: PPUSH
 983: CALL_OW 140
// for i = 1 to 5 do
 987: LD_ADDR_VAR 0 2
 991: PUSH
 992: DOUBLE
 993: LD_INT 1
 995: DEC
 996: ST_TO_ADDR
 997: LD_INT 5
 999: PUSH
1000: FOR_TO
1001: IFFALSE 1057
// begin PrepareHuman ( false , 1 , 10 ) ;
1003: LD_INT 0
1005: PPUSH
1006: LD_INT 1
1008: PPUSH
1009: LD_INT 10
1011: PPUSH
1012: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1016: LD_ADDR_EXP 19
1020: PUSH
1021: LD_EXP 19
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: CALL_OW 44
1033: PPUSH
1034: CALL_OW 2
1038: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1039: LD_EXP 19
1043: PUSH
1044: LD_INT 1
1046: ARRAY
1047: PPUSH
1048: LD_INT 18
1050: PPUSH
1051: CALL_OW 52
// end ;
1055: GO 1000
1057: POP
1058: POP
// if Difficulty > 2 then
1059: LD_OWVAR 67
1063: PUSH
1064: LD_INT 2
1066: GREATER
1067: IFFALSE 1116
// begin bc_type := b_turret ;
1069: LD_ADDR_OWVAR 42
1073: PUSH
1074: LD_INT 33
1076: ST_TO_ADDR
// bc_level := 7 ;
1077: LD_ADDR_OWVAR 43
1081: PUSH
1082: LD_INT 7
1084: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1085: LD_ADDR_VAR 0 4
1089: PUSH
1090: LD_INT 107
1092: PPUSH
1093: LD_INT 55
1095: PPUSH
1096: LD_INT 5
1098: PPUSH
1099: CALL_OW 47
1103: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1104: LD_VAR 0 4
1108: PPUSH
1109: LD_INT 7
1111: PPUSH
1112: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1116: LD_ADDR_VAR 0 2
1120: PUSH
1121: LD_INT 22
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: LD_INT 30
1133: PUSH
1134: LD_INT 3
1136: PUSH
1137: EMPTY
1138: LIST
1139: LIST
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: PPUSH
1145: CALL_OW 69
1149: PUSH
1150: LD_INT 22
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PUSH
1160: LD_INT 30
1162: PUSH
1163: LD_INT 36
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PPUSH
1174: CALL_OW 69
1178: ADD
1179: PUSH
1180: FOR_IN
1181: IFFALSE 1232
// for j = 1 to 3 do
1183: LD_ADDR_VAR 0 3
1187: PUSH
1188: DOUBLE
1189: LD_INT 1
1191: DEC
1192: ST_TO_ADDR
1193: LD_INT 3
1195: PUSH
1196: FOR_TO
1197: IFFALSE 1228
// begin PrepareHuman ( false , 3 , 6 ) ;
1199: LD_INT 0
1201: PPUSH
1202: LD_INT 3
1204: PPUSH
1205: LD_INT 6
1207: PPUSH
1208: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1212: CALL_OW 44
1216: PPUSH
1217: LD_VAR 0 2
1221: PPUSH
1222: CALL_OW 52
// end ;
1226: GO 1196
1228: POP
1229: POP
1230: GO 1180
1232: POP
1233: POP
// end ;
1234: LD_VAR 0 1
1238: RET
// export function PreparePatrol ; var i , un ; begin
1239: LD_INT 0
1241: PPUSH
1242: PPUSH
1243: PPUSH
// uc_side := 1 ;
1244: LD_ADDR_OWVAR 20
1248: PUSH
1249: LD_INT 1
1251: ST_TO_ADDR
// uc_nation := 1 ;
1252: LD_ADDR_OWVAR 21
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1260: LD_ADDR_EXP 18
1264: PUSH
1265: LD_INT 99
1267: PUSH
1268: LD_INT 55
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 113
1277: PUSH
1278: LD_INT 67
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 129
1287: PUSH
1288: LD_INT 68
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: LD_INT 135
1297: PUSH
1298: LD_INT 62
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 103
1307: PUSH
1308: LD_INT 41
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: PUSH
1322: LD_INT 27
1324: PUSH
1325: LD_INT 49
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: LD_INT 46
1334: PUSH
1335: LD_INT 49
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: PUSH
1342: LD_INT 87
1344: PUSH
1345: LD_INT 70
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 99
1354: PUSH
1355: LD_INT 79
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: LD_INT 118
1364: PUSH
1365: LD_INT 111
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PUSH
1372: LD_INT 99
1374: PUSH
1375: LD_INT 79
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 87
1384: PUSH
1385: LD_INT 70
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 46
1394: PUSH
1395: LD_INT 49
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_INT 200
1414: PUSH
1415: LD_INT 88
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 175
1424: PUSH
1425: LD_INT 80
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: LD_INT 135
1434: PUSH
1435: LD_INT 62
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: PUSH
1442: LD_INT 117
1444: PUSH
1445: LD_INT 53
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: PUSH
1452: LD_INT 103
1454: PUSH
1455: LD_INT 41
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: LD_INT 99
1464: PUSH
1465: LD_INT 24
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 85
1474: PUSH
1475: LD_INT 3
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PUSH
1482: LD_INT 99
1484: PUSH
1485: LD_INT 24
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PUSH
1492: LD_INT 103
1494: PUSH
1495: LD_INT 41
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: PUSH
1502: LD_INT 98
1504: PUSH
1505: LD_INT 47
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 99
1514: PUSH
1515: LD_INT 56
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: LD_INT 96
1524: PUSH
1525: LD_INT 66
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: PUSH
1532: LD_INT 99
1534: PUSH
1535: LD_INT 56
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: PUSH
1542: LD_INT 112
1544: PUSH
1545: LD_INT 66
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: PUSH
1552: LD_INT 129
1554: PUSH
1555: LD_INT 68
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: PUSH
1562: LD_INT 135
1564: PUSH
1565: LD_INT 62
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 156
1574: PUSH
1575: LD_INT 71
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 168
1584: PUSH
1585: LD_INT 76
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: PUSH
1592: LD_INT 168
1594: PUSH
1595: LD_INT 61
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 168
1604: PUSH
1605: LD_INT 75
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 185
1614: PUSH
1615: LD_INT 85
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: LIST
1649: ST_TO_ADDR
// mobile_patrol := [ ] ;
1650: LD_ADDR_EXP 17
1654: PUSH
1655: EMPTY
1656: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1657: LD_INT 3
1659: PPUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 3
1665: PPUSH
1666: LD_INT 4
1668: PPUSH
1669: LD_INT 100
1671: PPUSH
1672: CALL 6080 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1676: LD_ADDR_EXP 17
1680: PUSH
1681: LD_EXP 17
1685: PPUSH
1686: LD_INT 1
1688: PPUSH
1689: CALL_OW 45
1693: PPUSH
1694: CALL_OW 2
1698: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1699: LD_EXP 17
1703: PUSH
1704: LD_INT 1
1706: ARRAY
1707: PPUSH
1708: LD_INT 99
1710: PPUSH
1711: LD_INT 55
1713: PPUSH
1714: LD_INT 0
1716: PPUSH
1717: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1721: LD_INT 2
1723: PPUSH
1724: LD_INT 1
1726: PPUSH
1727: LD_INT 3
1729: PPUSH
1730: LD_INT 4
1732: PPUSH
1733: LD_INT 100
1735: PPUSH
1736: CALL 6080 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1740: LD_ADDR_EXP 17
1744: PUSH
1745: LD_EXP 17
1749: PPUSH
1750: LD_INT 2
1752: PPUSH
1753: CALL_OW 45
1757: PPUSH
1758: CALL_OW 2
1762: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1763: LD_EXP 17
1767: PUSH
1768: LD_INT 2
1770: ARRAY
1771: PPUSH
1772: LD_INT 27
1774: PPUSH
1775: LD_INT 49
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1785: LD_INT 3
1787: PPUSH
1788: LD_INT 1
1790: PPUSH
1791: LD_INT 3
1793: PPUSH
1794: LD_INT 9
1796: PUSH
1797: LD_INT 7
1799: PUSH
1800: LD_INT 7
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: LIST
1807: PUSH
1808: LD_OWVAR 67
1812: ARRAY
1813: PPUSH
1814: LD_INT 100
1816: PPUSH
1817: CALL 6080 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1821: LD_ADDR_EXP 17
1825: PUSH
1826: LD_EXP 17
1830: PPUSH
1831: LD_INT 3
1833: PPUSH
1834: CALL_OW 45
1838: PPUSH
1839: CALL_OW 2
1843: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
1844: LD_EXP 17
1848: PUSH
1849: LD_INT 3
1851: ARRAY
1852: PPUSH
1853: LD_INT 200
1855: PPUSH
1856: LD_INT 88
1858: PPUSH
1859: LD_INT 0
1861: PPUSH
1862: CALL_OW 48
// for i = mobile_patrol downto 1 do
1866: LD_ADDR_VAR 0 2
1870: PUSH
1871: DOUBLE
1872: LD_EXP 17
1876: INC
1877: ST_TO_ADDR
1878: LD_INT 1
1880: PUSH
1881: FOR_DOWNTO
1882: IFFALSE 1893
// RaiseSailEvent ( 1 ) ;
1884: LD_INT 1
1886: PPUSH
1887: CALL_OW 427
1891: GO 1881
1893: POP
1894: POP
// end ;
1895: LD_VAR 0 1
1899: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
1900: LD_INT 0
1902: PPUSH
1903: PPUSH
1904: PPUSH
1905: PPUSH
1906: PPUSH
1907: PPUSH
1908: PPUSH
1909: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
1910: LD_ADDR_VAR 0 5
1914: PUSH
1915: LD_INT 20
1917: PUSH
1918: LD_INT 4
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: LD_INT 21
1927: PUSH
1928: LD_INT 5
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 22
1937: PUSH
1938: LD_INT 1
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: LIST
1949: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
1950: LD_ADDR_VAR 0 6
1954: PUSH
1955: LD_INT 176
1957: PUSH
1958: LD_INT 81
1960: PUSH
1961: LD_INT 135
1963: PUSH
1964: LD_INT 62
1966: PUSH
1967: LD_INT 114
1969: PUSH
1970: LD_INT 67
1972: PUSH
1973: LD_INT 93
1975: PUSH
1976: LD_INT 71
1978: PUSH
1979: LD_INT 76
1981: PUSH
1982: LD_INT 67
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 107
1999: PUSH
2000: LD_INT 92
2002: PUSH
2003: LD_INT 92
2005: PUSH
2006: LD_INT 72
2008: PUSH
2009: LD_INT 77
2011: PUSH
2012: LD_INT 68
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 45
2025: PUSH
2026: LD_INT 49
2028: PUSH
2029: LD_INT 67
2031: PUSH
2032: LD_INT 59
2034: PUSH
2035: LD_INT 77
2037: PUSH
2038: LD_INT 68
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2054: LD_ADDR_VAR 0 4
2058: PUSH
2059: LD_INT 1
2061: PPUSH
2062: LD_VAR 0 5
2066: PPUSH
2067: CALL_OW 12
2071: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2072: LD_ADDR_VAR 0 3
2076: PUSH
2077: LD_INT 1
2079: PPUSH
2080: LD_INT 2
2082: PPUSH
2083: CALL_OW 12
2087: ST_TO_ADDR
// uc_side := 1 ;
2088: LD_ADDR_OWVAR 20
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// uc_nation := 1 ;
2096: LD_ADDR_OWVAR 21
2100: PUSH
2101: LD_INT 1
2103: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2104: LD_INT 2
2106: PPUSH
2107: LD_INT 3
2109: PPUSH
2110: LD_INT 3
2112: PPUSH
2113: LD_INT 12
2115: PPUSH
2116: LD_INT 100
2118: PPUSH
2119: CALL 6080 0 5
// veh := CreateVehicle ;
2123: LD_ADDR_VAR 0 8
2127: PUSH
2128: CALL_OW 45
2132: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2133: LD_VAR 0 8
2137: PPUSH
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 4
2147: ARRAY
2148: PUSH
2149: LD_INT 2
2151: ARRAY
2152: PPUSH
2153: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2157: LD_VAR 0 8
2161: PPUSH
2162: LD_VAR 0 5
2166: PUSH
2167: LD_VAR 0 4
2171: ARRAY
2172: PUSH
2173: LD_INT 1
2175: ARRAY
2176: PPUSH
2177: LD_INT 0
2179: PPUSH
2180: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2184: LD_VAR 0 8
2188: PPUSH
2189: LD_INT 1
2191: PUSH
2192: LD_INT 3
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: PUSH
2199: LD_VAR 0 3
2203: ARRAY
2204: PPUSH
2205: LD_INT 100
2207: PPUSH
2208: CALL_OW 290
// tmp := road [ k ] ;
2212: LD_ADDR_VAR 0 7
2216: PUSH
2217: LD_VAR 0 6
2221: PUSH
2222: LD_VAR 0 4
2226: ARRAY
2227: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2228: LD_ADDR_VAR 0 2
2232: PUSH
2233: DOUBLE
2234: LD_INT 1
2236: DEC
2237: ST_TO_ADDR
2238: LD_VAR 0 7
2242: PUSH
2243: LD_INT 2
2245: DIV
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2295
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2250: LD_VAR 0 8
2254: PPUSH
2255: LD_VAR 0 7
2259: PUSH
2260: LD_VAR 0 2
2264: PUSH
2265: LD_INT 2
2267: MUL
2268: PUSH
2269: LD_INT 1
2271: MINUS
2272: ARRAY
2273: PPUSH
2274: LD_VAR 0 7
2278: PUSH
2279: LD_VAR 0 2
2283: PUSH
2284: LD_INT 2
2286: MUL
2287: ARRAY
2288: PPUSH
2289: CALL_OW 171
2293: GO 2247
2295: POP
2296: POP
// AddComGive ( veh , alfa ) ;
2297: LD_VAR 0 8
2301: PPUSH
2302: LD_INT 5
2304: PPUSH
2305: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2309: LD_VAR 0 8
2313: PPUSH
2314: LD_INT 70
2316: PPUSH
2317: CALL_OW 202
// for i = tmp div 2 downto 1 do
2321: LD_ADDR_VAR 0 2
2325: PUSH
2326: DOUBLE
2327: LD_VAR 0 7
2331: PUSH
2332: LD_INT 2
2334: DIV
2335: INC
2336: ST_TO_ADDR
2337: LD_INT 1
2339: PUSH
2340: FOR_DOWNTO
2341: IFFALSE 2388
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2343: LD_VAR 0 8
2347: PPUSH
2348: LD_VAR 0 7
2352: PUSH
2353: LD_VAR 0 2
2357: PUSH
2358: LD_INT 2
2360: MUL
2361: PUSH
2362: LD_INT 1
2364: MINUS
2365: ARRAY
2366: PPUSH
2367: LD_VAR 0 7
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_INT 2
2379: MUL
2380: ARRAY
2381: PPUSH
2382: CALL_OW 171
2386: GO 2340
2388: POP
2389: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2390: LD_VAR 0 8
2394: PPUSH
2395: LD_VAR 0 5
2399: PUSH
2400: LD_VAR 0 4
2404: ARRAY
2405: PUSH
2406: LD_INT 1
2408: ARRAY
2409: PPUSH
2410: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2414: LD_INT 35
2416: PPUSH
2417: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2421: LD_VAR 0 8
2425: PPUSH
2426: LD_VAR 0 5
2430: PUSH
2431: LD_VAR 0 4
2435: ARRAY
2436: PUSH
2437: LD_INT 1
2439: ARRAY
2440: PPUSH
2441: CALL_OW 308
2445: PUSH
2446: LD_VAR 0 8
2450: PPUSH
2451: LD_VAR 0 3
2455: PPUSH
2456: CALL_OW 289
2460: PUSH
2461: LD_INT 0
2463: EQUAL
2464: AND
2465: IFFALSE 2414
// RemoveUnit ( veh ) ;
2467: LD_VAR 0 8
2471: PPUSH
2472: CALL_OW 64
// end ;
2476: LD_VAR 0 1
2480: RET
// every 3 3$00 do
2481: GO 2483
2483: DISABLE
// begin enable ;
2484: ENABLE
// SpawnCargo ;
2485: CALL 1900 0 0
// end ;
2489: END
// export function PrepareDefenders ; var i , tmp ; begin
2490: LD_INT 0
2492: PPUSH
2493: PPUSH
2494: PPUSH
// if defenders then
2495: LD_EXP 20
2499: IFFALSE 2503
// exit ;
2501: GO 2767
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2503: LD_ADDR_VAR 0 2
2507: PUSH
2508: DOUBLE
2509: LD_INT 1
2511: DEC
2512: ST_TO_ADDR
2513: LD_INT 4
2515: PUSH
2516: LD_INT 5
2518: PUSH
2519: LD_INT 6
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: LIST
2526: PUSH
2527: LD_OWVAR 67
2531: ARRAY
2532: PUSH
2533: FOR_TO
2534: IFFALSE 2673
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2536: LD_ADDR_VAR 0 3
2540: PUSH
2541: LD_INT 6
2543: PPUSH
2544: LD_INT 2
2546: PUSH
2547: LD_INT 3
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: PUSH
2554: LD_INT 1
2556: PPUSH
2557: LD_INT 2
2559: PPUSH
2560: CALL_OW 12
2564: ARRAY
2565: PPUSH
2566: LD_INT 1
2568: PUSH
2569: LD_INT 3
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 1
2578: PPUSH
2579: LD_INT 2
2581: PPUSH
2582: CALL_OW 12
2586: ARRAY
2587: PPUSH
2588: LD_INT 2
2590: PPUSH
2591: LD_INT 4
2593: PUSH
2594: LD_INT 5
2596: PUSH
2597: LD_INT 9
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 1
2607: PPUSH
2608: LD_INT 3
2610: PPUSH
2611: CALL_OW 12
2615: ARRAY
2616: PPUSH
2617: CALL 28775 0 5
2621: ST_TO_ADDR
// if tmp then
2622: LD_VAR 0 3
2626: IFFALSE 2671
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2628: LD_INT 6
2630: PPUSH
2631: LD_VAR 0 3
2635: PUSH
2636: LD_INT 1
2638: ARRAY
2639: PPUSH
2640: LD_VAR 0 3
2644: PUSH
2645: LD_INT 2
2647: ARRAY
2648: PPUSH
2649: LD_VAR 0 3
2653: PUSH
2654: LD_INT 3
2656: ARRAY
2657: PPUSH
2658: LD_VAR 0 3
2662: PUSH
2663: LD_INT 4
2665: ARRAY
2666: PPUSH
2667: CALL_OW 185
// end ;
2671: GO 2533
2673: POP
2674: POP
// repeat wait ( 0 0$1 ) ;
2675: LD_INT 35
2677: PPUSH
2678: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 ] [ Difficulty ] ;
2682: LD_INT 22
2684: PUSH
2685: LD_INT 1
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: PUSH
2692: LD_INT 33
2694: PUSH
2695: LD_INT 2
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: PUSH
2711: LD_INT 4
2713: PUSH
2714: LD_INT 5
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: PUSH
2725: LD_OWVAR 67
2729: ARRAY
2730: GREATEREQUAL
2731: IFFALSE 2675
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2733: LD_ADDR_EXP 20
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 1
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 33
2750: PUSH
2751: LD_INT 2
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: PPUSH
2762: CALL_OW 69
2766: ST_TO_ADDR
// end ;
2767: LD_VAR 0 1
2771: RET
// export function Defend ; var i , un , veh , tmp ; begin
2772: LD_INT 0
2774: PPUSH
2775: PPUSH
2776: PPUSH
2777: PPUSH
2778: PPUSH
// defcon_wave := defcon_wave + 1 ;
2779: LD_ADDR_EXP 22
2783: PUSH
2784: LD_EXP 22
2788: PUSH
2789: LD_INT 1
2791: PLUS
2792: ST_TO_ADDR
// if not defenders then
2793: LD_EXP 20
2797: NOT
2798: IFFALSE 2804
// PrepareDefenders ;
2800: CALL 2490 0 0
// if defcon_wave > 1 then
2804: LD_EXP 22
2808: PUSH
2809: LD_INT 1
2811: GREATER
2812: IFFALSE 3070
// begin for i = 1 to defcon_wave + 2 do
2814: LD_ADDR_VAR 0 2
2818: PUSH
2819: DOUBLE
2820: LD_INT 1
2822: DEC
2823: ST_TO_ADDR
2824: LD_EXP 22
2828: PUSH
2829: LD_INT 2
2831: PLUS
2832: PUSH
2833: FOR_TO
2834: IFFALSE 2976
// begin uc_side := 1 ;
2836: LD_ADDR_OWVAR 20
2840: PUSH
2841: LD_INT 1
2843: ST_TO_ADDR
// uc_nation := 1 ;
2844: LD_ADDR_OWVAR 21
2848: PUSH
2849: LD_INT 1
2851: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
2852: LD_INT 4
2854: PPUSH
2855: LD_INT 3
2857: PPUSH
2858: LD_INT 1
2860: PPUSH
2861: LD_INT 4
2863: PUSH
2864: LD_INT 6
2866: PUSH
2867: LD_INT 7
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: LIST
2874: PUSH
2875: LD_INT 1
2877: PPUSH
2878: LD_INT 3
2880: PPUSH
2881: CALL_OW 12
2885: ARRAY
2886: PPUSH
2887: LD_INT 100
2889: PPUSH
2890: CALL 6080 0 5
// veh := CreateVehicle ;
2894: LD_ADDR_VAR 0 4
2898: PUSH
2899: CALL_OW 45
2903: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2904: LD_VAR 0 4
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: CALL_OW 233
// defenders := defenders ^ veh ;
2916: LD_ADDR_EXP 20
2920: PUSH
2921: LD_EXP 20
2925: PUSH
2926: LD_VAR 0 4
2930: ADD
2931: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
2932: LD_INT 0
2934: PPUSH
2935: LD_INT 3
2937: PPUSH
2938: LD_INT 9
2940: PPUSH
2941: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2945: CALL_OW 44
2949: PPUSH
2950: LD_VAR 0 4
2954: PPUSH
2955: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
2959: LD_VAR 0 4
2963: PPUSH
2964: LD_INT 25
2966: PPUSH
2967: LD_INT 0
2969: PPUSH
2970: CALL_OW 49
// end ;
2974: GO 2833
2976: POP
2977: POP
// for i = 1 to defcon_wave do
2978: LD_ADDR_VAR 0 2
2982: PUSH
2983: DOUBLE
2984: LD_INT 1
2986: DEC
2987: ST_TO_ADDR
2988: LD_EXP 22
2992: PUSH
2993: FOR_TO
2994: IFFALSE 3068
// begin uc_side := 1 ;
2996: LD_ADDR_OWVAR 20
3000: PUSH
3001: LD_INT 1
3003: ST_TO_ADDR
// uc_nation := 1 ;
3004: LD_ADDR_OWVAR 21
3008: PUSH
3009: LD_INT 1
3011: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3012: LD_INT 0
3014: PPUSH
3015: LD_INT 5
3017: PPUSH
3018: LD_INT 9
3020: PPUSH
3021: CALL_OW 380
// un := CreateHuman ;
3025: LD_ADDR_VAR 0 3
3029: PUSH
3030: CALL_OW 44
3034: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3035: LD_VAR 0 3
3039: PPUSH
3040: LD_INT 25
3042: PPUSH
3043: LD_INT 0
3045: PPUSH
3046: CALL_OW 49
// defenders := defenders ^ un ;
3050: LD_ADDR_EXP 20
3054: PUSH
3055: LD_EXP 20
3059: PUSH
3060: LD_VAR 0 3
3064: ADD
3065: ST_TO_ADDR
// end ;
3066: GO 2993
3068: POP
3069: POP
// end ; repeat wait ( 0 0$1 ) ;
3070: LD_INT 35
3072: PPUSH
3073: CALL_OW 67
// for i in defenders do
3077: LD_ADDR_VAR 0 2
3081: PUSH
3082: LD_EXP 20
3086: PUSH
3087: FOR_IN
3088: IFFALSE 3170
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3090: LD_EXP 21
3094: PUSH
3095: LD_VAR 0 2
3099: PPUSH
3100: LD_EXP 21
3104: PUSH
3105: LD_INT 1
3107: ARRAY
3108: PPUSH
3109: LD_EXP 21
3113: PUSH
3114: LD_INT 2
3116: ARRAY
3117: PPUSH
3118: CALL_OW 297
3122: PUSH
3123: LD_INT 10
3125: GREATER
3126: AND
3127: PUSH
3128: LD_VAR 0 2
3132: PPUSH
3133: CALL_OW 314
3137: NOT
3138: AND
3139: IFFALSE 3168
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3141: LD_VAR 0 2
3145: PPUSH
3146: LD_EXP 21
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: LD_EXP 21
3159: PUSH
3160: LD_INT 2
3162: ARRAY
3163: PPUSH
3164: CALL_OW 114
// end ;
3168: GO 3087
3170: POP
3171: POP
// until not defenders ;
3172: LD_EXP 20
3176: NOT
3177: IFFALSE 3070
// end ;
3179: LD_VAR 0 1
3183: RET
// every 0 0$1 do var radar , i ;
3184: GO 3186
3186: DISABLE
3187: LD_INT 0
3189: PPUSH
3190: PPUSH
// begin uc_side := 1 ;
3191: LD_ADDR_OWVAR 20
3195: PUSH
3196: LD_INT 1
3198: ST_TO_ADDR
// uc_nation := 1 ;
3199: LD_ADDR_OWVAR 21
3203: PUSH
3204: LD_INT 1
3206: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3207: LD_INT 1
3209: PPUSH
3210: LD_INT 2
3212: PPUSH
3213: LD_INT 3
3215: PPUSH
3216: LD_INT 11
3218: PPUSH
3219: LD_INT 100
3221: PPUSH
3222: CALL 6080 0 5
// radar := CreateVehicle ;
3226: LD_ADDR_VAR 0 1
3230: PUSH
3231: CALL_OW 45
3235: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3236: LD_VAR 0 1
3240: PPUSH
3241: LD_INT 4
3243: PPUSH
3244: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3248: LD_VAR 0 1
3252: PPUSH
3253: LD_INT 51
3255: PPUSH
3256: LD_INT 45
3258: PPUSH
3259: LD_INT 0
3261: PPUSH
3262: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3266: LD_VAR 0 1
3270: PPUSH
3271: LD_INT 700
3273: PPUSH
3274: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3278: LD_VAR 0 1
3282: PPUSH
3283: LD_INT 65
3285: PPUSH
3286: LD_INT 75
3288: PPUSH
3289: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3293: LD_VAR 0 1
3297: PPUSH
3298: LD_INT 350
3300: PPUSH
3301: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3305: LD_VAR 0 1
3309: PPUSH
3310: LD_INT 83
3312: PPUSH
3313: LD_INT 87
3315: PPUSH
3316: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3320: LD_VAR 0 1
3324: PPUSH
3325: LD_INT 525
3327: PPUSH
3328: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3332: LD_VAR 0 1
3336: PPUSH
3337: LD_INT 94
3339: PPUSH
3340: LD_INT 81
3342: PPUSH
3343: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3347: LD_VAR 0 1
3351: PPUSH
3352: LD_INT 350
3354: PPUSH
3355: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3359: LD_VAR 0 1
3363: PPUSH
3364: LD_INT 55
3366: PPUSH
3367: LD_INT 48
3369: PPUSH
3370: CALL_OW 171
// wait ( 1 1$00 ) ;
3374: LD_INT 2100
3376: PPUSH
3377: CALL_OW 67
// until not IsOk ( radar ) ;
3381: LD_VAR 0 1
3385: PPUSH
3386: CALL_OW 302
3390: NOT
3391: IFFALSE 3266
// end ;
3393: PPOPN 2
3395: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3396: LD_OWVAR 67
3400: PUSH
3401: LD_INT 1
3403: GREATER
3404: PUSH
3405: LD_EXP 11
3409: AND
3410: IFFALSE 3632
3412: GO 3414
3414: DISABLE
3415: LD_INT 0
3417: PPUSH
// begin enable ;
3418: ENABLE
// uc_side := 1 ;
3419: LD_ADDR_OWVAR 20
3423: PUSH
3424: LD_INT 1
3426: ST_TO_ADDR
// uc_nation := 1 ;
3427: LD_ADDR_OWVAR 21
3431: PUSH
3432: LD_INT 1
3434: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3435: LD_INT 5
3437: PPUSH
3438: LD_INT 3
3440: PPUSH
3441: LD_INT 3
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: LD_INT 100
3449: PPUSH
3450: CALL 6080 0 5
// un := CreateVehicle ;
3454: LD_ADDR_VAR 0 1
3458: PUSH
3459: CALL_OW 45
3463: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3464: LD_VAR 0 1
3468: PPUSH
3469: LD_INT 3
3471: PPUSH
3472: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3476: LD_VAR 0 1
3480: PPUSH
3481: LD_INT 155
3483: PPUSH
3484: LD_INT 2
3486: PPUSH
3487: LD_INT 0
3489: PPUSH
3490: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: LD_INT 169
3501: PPUSH
3502: LD_INT 77
3504: PPUSH
3505: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3509: LD_VAR 0 1
3513: PPUSH
3514: LD_INT 70
3516: PPUSH
3517: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3521: LD_VAR 0 1
3525: PPUSH
3526: LD_INT 134
3528: PPUSH
3529: LD_INT 62
3531: PPUSH
3532: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3536: LD_VAR 0 1
3540: PPUSH
3541: LD_INT 103
3543: PPUSH
3544: LD_INT 42
3546: PPUSH
3547: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3551: LD_VAR 0 1
3555: PPUSH
3556: LD_INT 70
3558: PPUSH
3559: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3563: LD_VAR 0 1
3567: PPUSH
3568: LD_INT 84
3570: PPUSH
3571: LD_INT 2
3573: PPUSH
3574: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3578: LD_INT 35
3580: PPUSH
3581: CALL_OW 67
// if IsDead ( un ) then
3585: LD_VAR 0 1
3589: PPUSH
3590: CALL_OW 301
3594: IFFALSE 3606
// begin extra_patrol := false ;
3596: LD_ADDR_EXP 11
3600: PUSH
3601: LD_INT 0
3603: ST_TO_ADDR
// exit ;
3604: GO 3632
// end ; until IsAt ( un , 84 , 2 ) ;
3606: LD_VAR 0 1
3610: PPUSH
3611: LD_INT 84
3613: PPUSH
3614: LD_INT 2
3616: PPUSH
3617: CALL_OW 307
3621: IFFALSE 3578
// RemoveUnit ( un ) ;
3623: LD_VAR 0 1
3627: PPUSH
3628: CALL_OW 64
// end ; end_of_file
3632: PPOPN 1
3634: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl ; begin
3635: LD_INT 0
3637: PPUSH
3638: PPUSH
3639: PPUSH
3640: PPUSH
3641: PPUSH
3642: PPUSH
3643: PPUSH
// uc_side := 4 ;
3644: LD_ADDR_OWVAR 20
3648: PUSH
3649: LD_INT 4
3651: ST_TO_ADDR
// uc_nation := 1 ;
3652: LD_ADDR_OWVAR 21
3656: PUSH
3657: LD_INT 1
3659: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3660: LD_ADDR_EXP 37
3664: PUSH
3665: LD_STRING DeltaDoctor
3667: PPUSH
3668: LD_EXP 1
3672: NOT
3673: PPUSH
3674: LD_STRING 10c_
3676: PPUSH
3677: CALL 6017 0 3
3681: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3682: LD_ADDR_EXP 36
3686: PUSH
3687: LD_STRING Joan
3689: PPUSH
3690: LD_EXP 1
3694: NOT
3695: PPUSH
3696: LD_STRING 10c_
3698: PPUSH
3699: CALL 6017 0 3
3703: ST_TO_ADDR
// if Joan then
3704: LD_EXP 36
3708: IFFALSE 3739
// friends := Insert ( friends , friends + 1 , Joan ) ;
3710: LD_ADDR_EXP 4
3714: PUSH
3715: LD_EXP 4
3719: PPUSH
3720: LD_EXP 4
3724: PUSH
3725: LD_INT 1
3727: PLUS
3728: PPUSH
3729: LD_EXP 36
3733: PPUSH
3734: CALL_OW 2
3738: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3739: LD_ADDR_EXP 35
3743: PUSH
3744: LD_STRING Simms
3746: PPUSH
3747: LD_EXP 1
3751: NOT
3752: PPUSH
3753: LD_STRING 10c_
3755: PPUSH
3756: CALL 6017 0 3
3760: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3761: LD_ADDR_EXP 34
3765: PUSH
3766: LD_STRING Kikuchi
3768: PPUSH
3769: LD_EXP 1
3773: NOT
3774: PPUSH
3775: LD_STRING 11_
3777: PPUSH
3778: CALL 6017 0 3
3782: ST_TO_ADDR
// if Kikuchi then
3783: LD_EXP 34
3787: IFFALSE 3818
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3789: LD_ADDR_EXP 4
3793: PUSH
3794: LD_EXP 4
3798: PPUSH
3799: LD_EXP 4
3803: PUSH
3804: LD_INT 1
3806: PLUS
3807: PPUSH
3808: LD_EXP 34
3812: PPUSH
3813: CALL_OW 2
3817: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
3818: LD_ADDR_EXP 33
3822: PUSH
3823: LD_STRING Frank
3825: PPUSH
3826: LD_EXP 1
3830: NOT
3831: PPUSH
3832: LD_STRING 11_
3834: PPUSH
3835: CALL 6017 0 3
3839: ST_TO_ADDR
// if Frank then
3840: LD_EXP 33
3844: IFFALSE 3875
// friends := Insert ( friends , friends + 1 , Frank ) ;
3846: LD_ADDR_EXP 4
3850: PUSH
3851: LD_EXP 4
3855: PPUSH
3856: LD_EXP 4
3860: PUSH
3861: LD_INT 1
3863: PLUS
3864: PPUSH
3865: LD_EXP 33
3869: PPUSH
3870: CALL_OW 2
3874: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
3875: LD_ADDR_EXP 32
3879: PUSH
3880: LD_STRING Gary
3882: PPUSH
3883: LD_EXP 1
3887: NOT
3888: PPUSH
3889: LD_STRING 11_
3891: PPUSH
3892: CALL 6017 0 3
3896: ST_TO_ADDR
// if Gary then
3897: LD_EXP 32
3901: IFFALSE 3932
// friends := Insert ( friends , friends + 1 , Gary ) ;
3903: LD_ADDR_EXP 4
3907: PUSH
3908: LD_EXP 4
3912: PPUSH
3913: LD_EXP 4
3917: PUSH
3918: LD_INT 1
3920: PLUS
3921: PPUSH
3922: LD_EXP 32
3926: PPUSH
3927: CALL_OW 2
3931: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
3932: LD_ADDR_EXP 31
3936: PUSH
3937: LD_STRING Cornell
3939: PPUSH
3940: LD_EXP 1
3944: NOT
3945: PPUSH
3946: LD_STRING 11_
3948: PPUSH
3949: CALL 6017 0 3
3953: ST_TO_ADDR
// if Cornel then
3954: LD_EXP 31
3958: IFFALSE 3989
// friends := Insert ( friends , friends + 1 , Cornel ) ;
3960: LD_ADDR_EXP 4
3964: PUSH
3965: LD_EXP 4
3969: PPUSH
3970: LD_EXP 4
3974: PUSH
3975: LD_INT 1
3977: PLUS
3978: PPUSH
3979: LD_EXP 31
3983: PPUSH
3984: CALL_OW 2
3988: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
3989: LD_ADDR_EXP 30
3993: PUSH
3994: LD_STRING Houten
3996: PPUSH
3997: LD_EXP 1
4001: NOT
4002: PPUSH
4003: LD_STRING 11_
4005: PPUSH
4006: CALL 6017 0 3
4010: ST_TO_ADDR
// if Houten then
4011: LD_EXP 30
4015: IFFALSE 4046
// friends := Insert ( friends , friends + 1 , Houten ) ;
4017: LD_ADDR_EXP 4
4021: PUSH
4022: LD_EXP 4
4026: PPUSH
4027: LD_EXP 4
4031: PUSH
4032: LD_INT 1
4034: PLUS
4035: PPUSH
4036: LD_EXP 30
4040: PPUSH
4041: CALL_OW 2
4045: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4046: LD_ADDR_EXP 29
4050: PUSH
4051: LD_STRING Gladstone
4053: PPUSH
4054: LD_EXP 1
4058: NOT
4059: PPUSH
4060: LD_STRING 11_
4062: PPUSH
4063: CALL 6017 0 3
4067: ST_TO_ADDR
// if Gladstone then
4068: LD_EXP 29
4072: IFFALSE 4103
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4074: LD_ADDR_EXP 4
4078: PUSH
4079: LD_EXP 4
4083: PPUSH
4084: LD_EXP 4
4088: PUSH
4089: LD_INT 1
4091: PLUS
4092: PPUSH
4093: LD_EXP 29
4097: PPUSH
4098: CALL_OW 2
4102: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4103: LD_ADDR_EXP 23
4107: PUSH
4108: LD_STRING Lisa
4110: PPUSH
4111: LD_EXP 1
4115: NOT
4116: PPUSH
4117: LD_STRING 11_
4119: PPUSH
4120: CALL 6017 0 3
4124: ST_TO_ADDR
// if Lisa then
4125: LD_EXP 23
4129: IFFALSE 4154
// friends := Insert ( friends , 1 , Lisa ) ;
4131: LD_ADDR_EXP 4
4135: PUSH
4136: LD_EXP 4
4140: PPUSH
4141: LD_INT 1
4143: PPUSH
4144: LD_EXP 23
4148: PPUSH
4149: CALL_OW 2
4153: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4154: LD_ADDR_EXP 24
4158: PUSH
4159: LD_STRING Donaldson
4161: PPUSH
4162: LD_EXP 1
4166: NOT
4167: PPUSH
4168: LD_STRING 11_
4170: PPUSH
4171: CALL 6017 0 3
4175: ST_TO_ADDR
// if Donaldson then
4176: LD_EXP 24
4180: IFFALSE 4211
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4182: LD_ADDR_EXP 4
4186: PUSH
4187: LD_EXP 4
4191: PPUSH
4192: LD_EXP 4
4196: PUSH
4197: LD_INT 1
4199: PLUS
4200: PPUSH
4201: LD_EXP 24
4205: PPUSH
4206: CALL_OW 2
4210: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4211: LD_ADDR_EXP 25
4215: PUSH
4216: LD_STRING Bobby
4218: PPUSH
4219: LD_EXP 1
4223: NOT
4224: PPUSH
4225: LD_STRING 11_
4227: PPUSH
4228: CALL 6017 0 3
4232: ST_TO_ADDR
// if Bobby then
4233: LD_EXP 25
4237: IFFALSE 4268
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4239: LD_ADDR_EXP 4
4243: PUSH
4244: LD_EXP 4
4248: PPUSH
4249: LD_EXP 4
4253: PUSH
4254: LD_INT 1
4256: PLUS
4257: PPUSH
4258: LD_EXP 25
4262: PPUSH
4263: CALL_OW 2
4267: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4268: LD_ADDR_EXP 26
4272: PUSH
4273: LD_STRING Cyrus
4275: PPUSH
4276: LD_EXP 1
4280: NOT
4281: PPUSH
4282: LD_STRING 11_
4284: PPUSH
4285: CALL 6017 0 3
4289: ST_TO_ADDR
// if Cyrus then
4290: LD_EXP 26
4294: IFFALSE 4325
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4296: LD_ADDR_EXP 4
4300: PUSH
4301: LD_EXP 4
4305: PPUSH
4306: LD_EXP 4
4310: PUSH
4311: LD_INT 1
4313: PLUS
4314: PPUSH
4315: LD_EXP 26
4319: PPUSH
4320: CALL_OW 2
4324: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4325: LD_ADDR_EXP 27
4329: PUSH
4330: LD_STRING Denis
4332: PPUSH
4333: LD_EXP 1
4337: NOT
4338: PPUSH
4339: LD_STRING 11_
4341: PPUSH
4342: CALL 6017 0 3
4346: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4347: LD_ADDR_EXP 28
4351: PUSH
4352: LD_STRING Brown
4354: PPUSH
4355: LD_EXP 1
4359: NOT
4360: PPUSH
4361: LD_STRING 11_
4363: PPUSH
4364: CALL 6017 0 3
4368: ST_TO_ADDR
// if Brown then
4369: LD_EXP 28
4373: IFFALSE 4404
// friends := Insert ( friends , friends + 1 , Brown ) ;
4375: LD_ADDR_EXP 4
4379: PUSH
4380: LD_EXP 4
4384: PPUSH
4385: LD_EXP 4
4389: PUSH
4390: LD_INT 1
4392: PLUS
4393: PPUSH
4394: LD_EXP 28
4398: PPUSH
4399: CALL_OW 2
4403: ST_TO_ADDR
// friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4404: LD_ADDR_EXP 4
4408: PUSH
4409: LD_EXP 4
4413: PUSH
4414: LD_STRING 11c_others
4416: PPUSH
4417: CALL_OW 31
4421: ADD
4422: PUSH
4423: LD_STRING 11_others
4425: PPUSH
4426: CALL_OW 31
4430: ADD
4431: ST_TO_ADDR
// if friends < 18 then
4432: LD_EXP 4
4436: PUSH
4437: LD_INT 18
4439: LESS
4440: IFFALSE 4512
// for i = 1 to 18 do
4442: LD_ADDR_VAR 0 2
4446: PUSH
4447: DOUBLE
4448: LD_INT 1
4450: DEC
4451: ST_TO_ADDR
4452: LD_INT 18
4454: PUSH
4455: FOR_TO
4456: IFFALSE 4510
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4458: LD_INT 0
4460: PPUSH
4461: LD_INT 1
4463: PPUSH
4464: LD_INT 4
4466: PPUSH
4467: CALL_OW 12
4471: PPUSH
4472: LD_INT 7
4474: PPUSH
4475: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4479: LD_ADDR_EXP 4
4483: PUSH
4484: LD_EXP 4
4488: PPUSH
4489: LD_EXP 4
4493: PUSH
4494: LD_INT 1
4496: PLUS
4497: PPUSH
4498: CALL_OW 44
4502: PPUSH
4503: CALL_OW 2
4507: ST_TO_ADDR
// end ;
4508: GO 4455
4510: POP
4511: POP
// for i in friends do
4512: LD_ADDR_VAR 0 2
4516: PUSH
4517: LD_EXP 4
4521: PUSH
4522: FOR_IN
4523: IFFALSE 4581
// if GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4525: LD_VAR 0 2
4529: PPUSH
4530: LD_INT 1
4532: PPUSH
4533: CALL_OW 259
4537: PUSH
4538: LD_VAR 0 2
4542: PPUSH
4543: LD_INT 4
4545: PPUSH
4546: CALL_OW 259
4550: GREATEREQUAL
4551: IFFALSE 4567
// SetClass ( i , class_soldier ) else
4553: LD_VAR 0 2
4557: PPUSH
4558: LD_INT 1
4560: PPUSH
4561: CALL_OW 336
4565: GO 4579
// SetClass ( i , class_scientistic ) ;
4567: LD_VAR 0 2
4571: PPUSH
4572: LD_INT 4
4574: PPUSH
4575: CALL_OW 336
4579: GO 4522
4581: POP
4582: POP
// if Frank then
4583: LD_EXP 33
4587: IFFALSE 4601
// SetClass ( Frank , class_sniper ) ;
4589: LD_EXP 33
4593: PPUSH
4594: LD_INT 5
4596: PPUSH
4597: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4601: LD_EXP 36
4605: PUSH
4606: LD_EXP 27
4610: PUSH
4611: LD_EXP 37
4615: PUSH
4616: LD_EXP 35
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: PPUSH
4627: LD_INT 4
4629: PPUSH
4630: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4634: LD_ADDR_EXP 3
4638: PUSH
4639: LD_STRING 
4641: PPUSH
4642: LD_INT 7
4644: PPUSH
4645: LD_INT 7
4647: PPUSH
4648: LD_INT -6
4650: PUSH
4651: LD_EXP 14
4655: PUSH
4656: LD_EXP 15
4660: PUSH
4661: LD_EXP 35
4665: PUSH
4666: LD_EXP 27
4670: PUSH
4671: LD_EXP 37
4675: PUSH
4676: LD_INT -2
4678: PUSH
4679: LD_INT -3
4681: PUSH
4682: LD_INT -5
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: PUSH
4696: LD_EXP 4
4700: ADD
4701: PPUSH
4702: LD_INT 1
4704: PUSH
4705: LD_INT 4
4707: PUSH
4708: LD_INT 2
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: PUSH
4715: LD_INT 5
4717: PUSH
4718: LD_INT 0
4720: PUSH
4721: LD_INT 3
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: LIST
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: LIST
4733: PPUSH
4734: CALL_OW 42
4738: ST_TO_ADDR
// if Simms then
4739: LD_EXP 35
4743: IFFALSE 4761
// selected := selected ^ Simms ;
4745: LD_ADDR_EXP 3
4749: PUSH
4750: LD_EXP 3
4754: PUSH
4755: LD_EXP 35
4759: ADD
4760: ST_TO_ADDR
// if Denis then
4761: LD_EXP 27
4765: IFFALSE 4783
// selected := selected ^ Denis ;
4767: LD_ADDR_EXP 3
4771: PUSH
4772: LD_EXP 3
4776: PUSH
4777: LD_EXP 27
4781: ADD
4782: ST_TO_ADDR
// if DeltaDoctor then
4783: LD_EXP 37
4787: IFFALSE 4805
// selected := selected ^ DeltaDoctor ;
4789: LD_ADDR_EXP 3
4793: PUSH
4794: LD_EXP 3
4798: PUSH
4799: LD_EXP 37
4803: ADD
4804: ST_TO_ADDR
// friends := friends diff selected ;
4805: LD_ADDR_EXP 4
4809: PUSH
4810: LD_EXP 4
4814: PUSH
4815: LD_EXP 3
4819: DIFF
4820: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
4821: LD_ADDR_VAR 0 4
4825: PUSH
4826: LD_INT 111
4828: PUSH
4829: LD_INT 137
4831: PUSH
4832: LD_INT 51
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: PUSH
4840: LD_INT 147
4842: PUSH
4843: LD_INT 129
4845: PUSH
4846: LD_INT 25
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
4858: LD_ADDR_VAR 0 5
4862: PUSH
4863: LD_INT 5
4865: PUSH
4866: LD_INT 6
4868: PUSH
4869: LD_INT 7
4871: PUSH
4872: LD_INT 8
4874: PUSH
4875: LD_INT 17
4877: PUSH
4878: LD_INT 18
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: ST_TO_ADDR
// for i in buildings do
4889: LD_ADDR_VAR 0 2
4893: PUSH
4894: LD_VAR 0 4
4898: PUSH
4899: FOR_IN
4900: IFFALSE 4916
// SetSide ( i , 4 ) ;
4902: LD_VAR 0 2
4906: PPUSH
4907: LD_INT 4
4909: PPUSH
4910: CALL_OW 235
4914: GO 4899
4916: POP
4917: POP
// for i in selected do
4918: LD_ADDR_VAR 0 2
4922: PUSH
4923: LD_EXP 3
4927: PUSH
4928: FOR_IN
4929: IFFALSE 5269
// begin if GetClass ( i ) in [ 1 , 5 ] then
4931: LD_VAR 0 2
4935: PPUSH
4936: CALL_OW 257
4940: PUSH
4941: LD_INT 1
4943: PUSH
4944: LD_INT 5
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: IN
4951: IFFALSE 5111
// begin if buildings [ 1 ] then
4953: LD_VAR 0 4
4957: PUSH
4958: LD_INT 1
4960: ARRAY
4961: IFFALSE 5022
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
4963: LD_VAR 0 2
4967: PPUSH
4968: LD_VAR 0 4
4972: PUSH
4973: LD_INT 1
4975: ARRAY
4976: PUSH
4977: LD_INT 1
4979: ARRAY
4980: PPUSH
4981: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
4985: LD_ADDR_VAR 0 4
4989: PUSH
4990: LD_VAR 0 4
4994: PPUSH
4995: LD_INT 1
4997: PPUSH
4998: LD_VAR 0 4
5002: PUSH
5003: LD_INT 1
5005: ARRAY
5006: PPUSH
5007: LD_INT 1
5009: PPUSH
5010: CALL_OW 3
5014: PPUSH
5015: CALL_OW 1
5019: ST_TO_ADDR
// end else
5020: GO 5109
// begin if not areas then
5022: LD_VAR 0 5
5026: NOT
5027: IFFALSE 5061
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5029: LD_VAR 0 2
5033: PPUSH
5034: LD_INT 87
5036: PPUSH
5037: LD_INT 68
5039: PPUSH
5040: LD_INT 8
5042: PPUSH
5043: LD_INT 0
5045: PPUSH
5046: CALL_OW 50
// ComHold ( i ) ;
5050: LD_VAR 0 2
5054: PPUSH
5055: CALL_OW 140
// end else
5059: GO 5109
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5061: LD_VAR 0 2
5065: PPUSH
5066: LD_VAR 0 5
5070: PUSH
5071: LD_INT 1
5073: ARRAY
5074: PPUSH
5075: LD_INT 0
5077: PPUSH
5078: CALL_OW 49
// ComHold ( i ) ;
5082: LD_VAR 0 2
5086: PPUSH
5087: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5091: LD_ADDR_VAR 0 5
5095: PUSH
5096: LD_VAR 0 5
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: CALL_OW 3
5108: ST_TO_ADDR
// end ; end ; end else
5109: GO 5267
// begin if buildings [ 2 ] then
5111: LD_VAR 0 4
5115: PUSH
5116: LD_INT 2
5118: ARRAY
5119: IFFALSE 5180
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5121: LD_VAR 0 2
5125: PPUSH
5126: LD_VAR 0 4
5130: PUSH
5131: LD_INT 2
5133: ARRAY
5134: PUSH
5135: LD_INT 1
5137: ARRAY
5138: PPUSH
5139: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5143: LD_ADDR_VAR 0 4
5147: PUSH
5148: LD_VAR 0 4
5152: PPUSH
5153: LD_INT 2
5155: PPUSH
5156: LD_VAR 0 4
5160: PUSH
5161: LD_INT 2
5163: ARRAY
5164: PPUSH
5165: LD_INT 1
5167: PPUSH
5168: CALL_OW 3
5172: PPUSH
5173: CALL_OW 1
5177: ST_TO_ADDR
// end else
5178: GO 5267
// begin if not areas then
5180: LD_VAR 0 5
5184: NOT
5185: IFFALSE 5219
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5187: LD_VAR 0 2
5191: PPUSH
5192: LD_INT 87
5194: PPUSH
5195: LD_INT 68
5197: PPUSH
5198: LD_INT 8
5200: PPUSH
5201: LD_INT 0
5203: PPUSH
5204: CALL_OW 50
// ComHold ( i ) ;
5208: LD_VAR 0 2
5212: PPUSH
5213: CALL_OW 140
// end else
5217: GO 5267
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5219: LD_VAR 0 2
5223: PPUSH
5224: LD_VAR 0 5
5228: PUSH
5229: LD_INT 1
5231: ARRAY
5232: PPUSH
5233: LD_INT 0
5235: PPUSH
5236: CALL_OW 49
// ComHold ( i ) ;
5240: LD_VAR 0 2
5244: PPUSH
5245: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5249: LD_ADDR_VAR 0 5
5253: PUSH
5254: LD_VAR 0 5
5258: PPUSH
5259: LD_INT 1
5261: PPUSH
5262: CALL_OW 3
5266: ST_TO_ADDR
// end ; end ; end ; end ;
5267: GO 4928
5269: POP
5270: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5271: LD_ADDR_VAR 0 6
5275: PUSH
5276: LD_INT 22
5278: PUSH
5279: LD_INT 1
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: PUSH
5286: LD_INT 30
5288: PUSH
5289: LD_INT 32
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: PPUSH
5300: CALL_OW 69
5304: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5305: LD_ADDR_VAR 0 2
5309: PUSH
5310: DOUBLE
5311: LD_VAR 0 6
5315: PUSH
5316: LD_EXP 4
5320: MINUS
5321: INC
5322: ST_TO_ADDR
5323: LD_INT 1
5325: PUSH
5326: FOR_DOWNTO
5327: IFFALSE 5390
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 ] [ Difficulty ] ) ;
5329: LD_INT 0
5331: PPUSH
5332: LD_INT 1
5334: PPUSH
5335: LD_INT 7
5337: PUSH
5338: LD_INT 8
5340: PUSH
5341: LD_INT 9
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: LIST
5348: PUSH
5349: LD_OWVAR 67
5353: ARRAY
5354: PPUSH
5355: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5359: LD_ADDR_EXP 4
5363: PUSH
5364: LD_EXP 4
5368: PPUSH
5369: LD_EXP 4
5373: PUSH
5374: LD_INT 1
5376: PLUS
5377: PPUSH
5378: CALL_OW 44
5382: PPUSH
5383: CALL_OW 2
5387: ST_TO_ADDR
// end ;
5388: GO 5326
5390: POP
5391: POP
// if friends then
5392: LD_EXP 4
5396: IFFALSE 5512
// begin tmp := friends ;
5398: LD_ADDR_VAR 0 3
5402: PUSH
5403: LD_EXP 4
5407: ST_TO_ADDR
// for i = 1 to bunkers do
5408: LD_ADDR_VAR 0 2
5412: PUSH
5413: DOUBLE
5414: LD_INT 1
5416: DEC
5417: ST_TO_ADDR
5418: LD_VAR 0 6
5422: PUSH
5423: FOR_TO
5424: IFFALSE 5510
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5426: LD_VAR 0 3
5430: PUSH
5431: LD_VAR 0 3
5435: ARRAY
5436: PPUSH
5437: LD_INT 1
5439: PPUSH
5440: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5444: LD_VAR 0 3
5448: PUSH
5449: LD_VAR 0 3
5453: ARRAY
5454: PPUSH
5455: LD_INT 1
5457: PPUSH
5458: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5462: LD_VAR 0 3
5466: PUSH
5467: LD_VAR 0 3
5471: ARRAY
5472: PPUSH
5473: LD_VAR 0 6
5477: PUSH
5478: LD_VAR 0 2
5482: ARRAY
5483: PPUSH
5484: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5488: LD_ADDR_VAR 0 3
5492: PUSH
5493: LD_VAR 0 3
5497: PPUSH
5498: LD_VAR 0 3
5502: PPUSH
5503: CALL_OW 3
5507: ST_TO_ADDR
// end ;
5508: GO 5423
5510: POP
5511: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5512: LD_ADDR_VAR 0 5
5516: PUSH
5517: LD_VAR 0 5
5521: PUSH
5522: LD_INT 9
5524: PUSH
5525: LD_INT 10
5527: PUSH
5528: LD_INT 11
5530: PUSH
5531: LD_INT 12
5533: PUSH
5534: LD_INT 13
5536: PUSH
5537: LD_INT 14
5539: PUSH
5540: LD_INT 15
5542: PUSH
5543: LD_INT 16
5545: PUSH
5546: LD_INT 26
5548: PUSH
5549: LD_INT 27
5551: PUSH
5552: LD_INT 28
5554: PUSH
5555: LD_INT 29
5557: PUSH
5558: LD_INT 30
5560: PUSH
5561: LD_INT 31
5563: PUSH
5564: LD_INT 32
5566: PUSH
5567: LD_INT 33
5569: PUSH
5570: LD_INT 34
5572: PUSH
5573: LD_INT 35
5575: PUSH
5576: LD_INT 36
5578: PUSH
5579: LD_INT 37
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: UNION
5604: ST_TO_ADDR
// for i in friends do
5605: LD_ADDR_VAR 0 2
5609: PUSH
5610: LD_EXP 4
5614: PUSH
5615: FOR_IN
5616: IFFALSE 5903
// begin SetTag ( i , 2 ) ;
5618: LD_VAR 0 2
5622: PPUSH
5623: LD_INT 2
5625: PPUSH
5626: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_scientistic , class_sniper ] then
5630: LD_VAR 0 2
5634: PPUSH
5635: CALL_OW 257
5639: PUSH
5640: LD_INT 1
5642: PUSH
5643: LD_INT 4
5645: PUSH
5646: LD_INT 5
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: LIST
5653: IN
5654: NOT
5655: IFFALSE 5669
// SetClass ( i , 1 ) ;
5657: LD_VAR 0 2
5661: PPUSH
5662: LD_INT 1
5664: PPUSH
5665: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
5669: LD_VAR 0 2
5673: PPUSH
5674: CALL_OW 257
5678: PUSH
5679: LD_INT 1
5681: PUSH
5682: LD_INT 5
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: IN
5689: PUSH
5690: LD_VAR 0 4
5694: PUSH
5695: LD_INT 1
5697: ARRAY
5698: AND
5699: IFFALSE 5760
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5701: LD_VAR 0 2
5705: PPUSH
5706: LD_VAR 0 4
5710: PUSH
5711: LD_INT 1
5713: ARRAY
5714: PUSH
5715: LD_INT 1
5717: ARRAY
5718: PPUSH
5719: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5723: LD_ADDR_VAR 0 4
5727: PUSH
5728: LD_VAR 0 4
5732: PPUSH
5733: LD_INT 1
5735: PPUSH
5736: LD_VAR 0 4
5740: PUSH
5741: LD_INT 1
5743: ARRAY
5744: PPUSH
5745: LD_INT 1
5747: PPUSH
5748: CALL_OW 3
5752: PPUSH
5753: CALL_OW 1
5757: ST_TO_ADDR
// continue ;
5758: GO 5615
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
5760: LD_VAR 0 2
5764: PPUSH
5765: CALL_OW 257
5769: PUSH
5770: LD_INT 4
5772: EQUAL
5773: PUSH
5774: LD_VAR 0 4
5778: PUSH
5779: LD_INT 2
5781: ARRAY
5782: AND
5783: IFFALSE 5844
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5785: LD_VAR 0 2
5789: PPUSH
5790: LD_VAR 0 4
5794: PUSH
5795: LD_INT 2
5797: ARRAY
5798: PUSH
5799: LD_INT 1
5801: ARRAY
5802: PPUSH
5803: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5807: LD_ADDR_VAR 0 4
5811: PUSH
5812: LD_VAR 0 4
5816: PPUSH
5817: LD_INT 2
5819: PPUSH
5820: LD_VAR 0 4
5824: PUSH
5825: LD_INT 2
5827: ARRAY
5828: PPUSH
5829: LD_INT 1
5831: PPUSH
5832: CALL_OW 3
5836: PPUSH
5837: CALL_OW 1
5841: ST_TO_ADDR
// continue ;
5842: GO 5615
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5844: LD_VAR 0 2
5848: PPUSH
5849: LD_VAR 0 5
5853: PUSH
5854: LD_INT 1
5856: ARRAY
5857: PPUSH
5858: LD_INT 0
5860: PPUSH
5861: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
5865: LD_ADDR_VAR 0 5
5869: PUSH
5870: LD_VAR 0 5
5874: PPUSH
5875: LD_INT 1
5877: PPUSH
5878: CALL_OW 3
5882: ST_TO_ADDR
// ComHold ( i ) ;
5883: LD_VAR 0 2
5887: PPUSH
5888: CALL_OW 140
// if not areas then
5892: LD_VAR 0 5
5896: NOT
5897: IFFALSE 5901
// break ;
5899: GO 5903
// end ;
5901: GO 5615
5903: POP
5904: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
5905: LD_EXP 4
5909: PPUSH
5910: LD_INT 3
5912: PUSH
5913: LD_INT 52
5915: PUSH
5916: EMPTY
5917: LIST
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PPUSH
5923: CALL_OW 72
5927: IFFALSE 5994
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
5929: LD_ADDR_VAR 0 2
5933: PUSH
5934: LD_EXP 4
5938: PPUSH
5939: LD_INT 3
5941: PUSH
5942: LD_INT 52
5944: PUSH
5945: EMPTY
5946: LIST
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PPUSH
5952: CALL_OW 72
5956: PUSH
5957: FOR_IN
5958: IFFALSE 5992
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
5960: LD_VAR 0 2
5964: PPUSH
5965: LD_INT 65
5967: PPUSH
5968: LD_INT 58
5970: PPUSH
5971: LD_INT 7
5973: PPUSH
5974: LD_INT 0
5976: PPUSH
5977: CALL_OW 50
// ComHold ( i ) ;
5981: LD_VAR 0 2
5985: PPUSH
5986: CALL_OW 140
// end ;
5990: GO 5957
5992: POP
5993: POP
// if Frank then
5994: LD_EXP 33
5998: IFFALSE 6012
// SetClass ( Frank , class_sniper ) ;
6000: LD_EXP 33
6004: PPUSH
6005: LD_INT 5
6007: PPUSH
6008: CALL_OW 336
// end ; end_of_file
6012: LD_VAR 0 1
6016: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
6017: LD_INT 0
6019: PPUSH
6020: PPUSH
// if exist_mode then
6021: LD_VAR 0 2
6025: IFFALSE 6050
// unit := CreateCharacter ( prefix & ident ) else
6027: LD_ADDR_VAR 0 5
6031: PUSH
6032: LD_VAR 0 3
6036: PUSH
6037: LD_VAR 0 1
6041: STR
6042: PPUSH
6043: CALL_OW 34
6047: ST_TO_ADDR
6048: GO 6065
// unit := NewCharacter ( ident ) ;
6050: LD_ADDR_VAR 0 5
6054: PUSH
6055: LD_VAR 0 1
6059: PPUSH
6060: CALL_OW 25
6064: ST_TO_ADDR
// result := unit ;
6065: LD_ADDR_VAR 0 4
6069: PUSH
6070: LD_VAR 0 5
6074: ST_TO_ADDR
// end ;
6075: LD_VAR 0 4
6079: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6080: LD_INT 0
6082: PPUSH
// vc_chassis := chassis ;
6083: LD_ADDR_OWVAR 37
6087: PUSH
6088: LD_VAR 0 1
6092: ST_TO_ADDR
// vc_engine := engine ;
6093: LD_ADDR_OWVAR 39
6097: PUSH
6098: LD_VAR 0 2
6102: ST_TO_ADDR
// vc_control := control ;
6103: LD_ADDR_OWVAR 38
6107: PUSH
6108: LD_VAR 0 3
6112: ST_TO_ADDR
// vc_weapon := weapon ;
6113: LD_ADDR_OWVAR 40
6117: PUSH
6118: LD_VAR 0 4
6122: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6123: LD_ADDR_OWVAR 41
6127: PUSH
6128: LD_VAR 0 5
6132: ST_TO_ADDR
// end ;
6133: LD_VAR 0 6
6137: RET
// export function CanSayRand ( side ) ; begin
6138: LD_INT 0
6140: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6141: LD_ADDR_VAR 0 2
6145: PUSH
6146: LD_INT 52
6148: PUSH
6149: EMPTY
6150: LIST
6151: PUSH
6152: LD_INT 22
6154: PUSH
6155: LD_VAR 0 1
6159: PUSH
6160: EMPTY
6161: LIST
6162: LIST
6163: PUSH
6164: LD_INT 2
6166: PUSH
6167: LD_INT 25
6169: PUSH
6170: LD_INT 1
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: PUSH
6177: LD_INT 25
6179: PUSH
6180: LD_INT 2
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: PUSH
6187: LD_INT 25
6189: PUSH
6190: LD_INT 3
6192: PUSH
6193: EMPTY
6194: LIST
6195: LIST
6196: PUSH
6197: LD_INT 25
6199: PUSH
6200: LD_INT 4
6202: PUSH
6203: EMPTY
6204: LIST
6205: LIST
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: LIST
6218: PPUSH
6219: CALL_OW 69
6223: PUSH
6224: LD_EXP 14
6228: PUSH
6229: LD_EXP 33
6233: PUSH
6234: LD_EXP 23
6238: PUSH
6239: LD_EXP 24
6243: PUSH
6244: LD_EXP 25
6248: PUSH
6249: LD_EXP 26
6253: PUSH
6254: LD_EXP 27
6258: PUSH
6259: LD_EXP 28
6263: PUSH
6264: LD_EXP 29
6268: PUSH
6269: LD_EXP 30
6273: PUSH
6274: LD_EXP 16
6278: PUSH
6279: LD_EXP 31
6283: PUSH
6284: LD_EXP 32
6288: PUSH
6289: LD_EXP 34
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: LIST
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: DIFF
6310: ST_TO_ADDR
// end ;
6311: LD_VAR 0 2
6315: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
6316: LD_INT 0
6318: PPUSH
6319: PPUSH
6320: PPUSH
6321: PPUSH
6322: PPUSH
6323: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
6324: LD_VAR 0 1
6328: NOT
6329: PUSH
6330: LD_VAR 0 1
6334: PPUSH
6335: CALL_OW 263
6339: PUSH
6340: LD_INT 2
6342: EQUAL
6343: NOT
6344: OR
6345: IFFALSE 6349
// exit ;
6347: GO 6665
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
6349: LD_ADDR_VAR 0 6
6353: PUSH
6354: LD_INT 22
6356: PUSH
6357: LD_VAR 0 1
6361: PPUSH
6362: CALL_OW 255
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PUSH
6371: LD_INT 2
6373: PUSH
6374: LD_INT 30
6376: PUSH
6377: LD_INT 36
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: PUSH
6384: LD_INT 34
6386: PUSH
6387: LD_INT 31
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PUSH
6394: EMPTY
6395: LIST
6396: LIST
6397: LIST
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: PPUSH
6403: CALL_OW 69
6407: ST_TO_ADDR
// if not tmp then
6408: LD_VAR 0 6
6412: NOT
6413: IFFALSE 6417
// exit ;
6415: GO 6665
// result := [ ] ;
6417: LD_ADDR_VAR 0 2
6421: PUSH
6422: EMPTY
6423: ST_TO_ADDR
// for i in tmp do
6424: LD_ADDR_VAR 0 3
6428: PUSH
6429: LD_VAR 0 6
6433: PUSH
6434: FOR_IN
6435: IFFALSE 6506
// begin t := UnitsInside ( i ) ;
6437: LD_ADDR_VAR 0 4
6441: PUSH
6442: LD_VAR 0 3
6446: PPUSH
6447: CALL_OW 313
6451: ST_TO_ADDR
// if t then
6452: LD_VAR 0 4
6456: IFFALSE 6504
// for j in t do
6458: LD_ADDR_VAR 0 7
6462: PUSH
6463: LD_VAR 0 4
6467: PUSH
6468: FOR_IN
6469: IFFALSE 6502
// result := Insert ( result , result + 1 , j ) ;
6471: LD_ADDR_VAR 0 2
6475: PUSH
6476: LD_VAR 0 2
6480: PPUSH
6481: LD_VAR 0 2
6485: PUSH
6486: LD_INT 1
6488: PLUS
6489: PPUSH
6490: LD_VAR 0 7
6494: PPUSH
6495: CALL_OW 2
6499: ST_TO_ADDR
6500: GO 6468
6502: POP
6503: POP
// end ;
6504: GO 6434
6506: POP
6507: POP
// if not result then
6508: LD_VAR 0 2
6512: NOT
6513: IFFALSE 6517
// exit ;
6515: GO 6665
// mech := result [ 1 ] ;
6517: LD_ADDR_VAR 0 5
6521: PUSH
6522: LD_VAR 0 2
6526: PUSH
6527: LD_INT 1
6529: ARRAY
6530: ST_TO_ADDR
// if result > 1 then
6531: LD_VAR 0 2
6535: PUSH
6536: LD_INT 1
6538: GREATER
6539: IFFALSE 6651
// for i = 2 to result do
6541: LD_ADDR_VAR 0 3
6545: PUSH
6546: DOUBLE
6547: LD_INT 2
6549: DEC
6550: ST_TO_ADDR
6551: LD_VAR 0 2
6555: PUSH
6556: FOR_TO
6557: IFFALSE 6649
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
6559: LD_ADDR_VAR 0 4
6563: PUSH
6564: LD_VAR 0 2
6568: PUSH
6569: LD_VAR 0 3
6573: ARRAY
6574: PPUSH
6575: LD_INT 3
6577: PPUSH
6578: CALL_OW 259
6582: PUSH
6583: LD_VAR 0 2
6587: PUSH
6588: LD_VAR 0 3
6592: ARRAY
6593: PPUSH
6594: CALL_OW 432
6598: MINUS
6599: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
6600: LD_VAR 0 4
6604: PUSH
6605: LD_VAR 0 5
6609: PPUSH
6610: LD_INT 3
6612: PPUSH
6613: CALL_OW 259
6617: PUSH
6618: LD_VAR 0 5
6622: PPUSH
6623: CALL_OW 432
6627: MINUS
6628: GREATEREQUAL
6629: IFFALSE 6647
// mech := result [ i ] ;
6631: LD_ADDR_VAR 0 5
6635: PUSH
6636: LD_VAR 0 2
6640: PUSH
6641: LD_VAR 0 3
6645: ARRAY
6646: ST_TO_ADDR
// end ;
6647: GO 6556
6649: POP
6650: POP
// ComLinkTo ( vehicle , mech ) ;
6651: LD_VAR 0 1
6655: PPUSH
6656: LD_VAR 0 5
6660: PPUSH
6661: CALL_OW 135
// end ;
6665: LD_VAR 0 2
6669: RET
// export function SayRand ( sex , dial ) ; begin
6670: LD_INT 0
6672: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6673: LD_ADDR_VAR 0 3
6677: PUSH
6678: LD_INT 52
6680: PUSH
6681: EMPTY
6682: LIST
6683: PUSH
6684: LD_INT 22
6686: PUSH
6687: LD_INT 1
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: PUSH
6694: LD_INT 26
6696: PUSH
6697: LD_VAR 0 1
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PUSH
6706: LD_INT 2
6708: PUSH
6709: LD_INT 25
6711: PUSH
6712: LD_INT 1
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: PUSH
6719: LD_INT 25
6721: PUSH
6722: LD_INT 2
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: LD_INT 25
6731: PUSH
6732: LD_INT 3
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: LD_INT 25
6741: PUSH
6742: LD_INT 4
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: PPUSH
6762: CALL_OW 69
6766: PUSH
6767: LD_EXP 14
6771: PUSH
6772: LD_EXP 33
6776: PUSH
6777: LD_EXP 23
6781: PUSH
6782: LD_EXP 24
6786: PUSH
6787: LD_EXP 25
6791: PUSH
6792: LD_EXP 26
6796: PUSH
6797: LD_EXP 27
6801: PUSH
6802: LD_EXP 28
6806: PUSH
6807: LD_EXP 29
6811: PUSH
6812: LD_EXP 30
6816: PUSH
6817: LD_EXP 16
6821: PUSH
6822: LD_EXP 31
6826: PUSH
6827: LD_EXP 32
6831: PUSH
6832: LD_EXP 34
6836: PUSH
6837: EMPTY
6838: LIST
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: DIFF
6853: ST_TO_ADDR
// if not result then
6854: LD_VAR 0 3
6858: NOT
6859: IFFALSE 6863
// exit ;
6861: GO 6891
// result := result [ 1 ] ;
6863: LD_ADDR_VAR 0 3
6867: PUSH
6868: LD_VAR 0 3
6872: PUSH
6873: LD_INT 1
6875: ARRAY
6876: ST_TO_ADDR
// Say ( result , dial ) ;
6877: LD_VAR 0 3
6881: PPUSH
6882: LD_VAR 0 2
6886: PPUSH
6887: CALL_OW 88
// end ;
6891: LD_VAR 0 3
6895: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6896: LD_INT 0
6898: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6899: LD_ADDR_VAR 0 4
6903: PUSH
6904: LD_INT 22
6906: PUSH
6907: LD_INT 1
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: LD_INT 26
6916: PUSH
6917: LD_VAR 0 1
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: PUSH
6926: LD_INT 2
6928: PUSH
6929: LD_INT 25
6931: PUSH
6932: LD_INT 1
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 25
6941: PUSH
6942: LD_INT 2
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: LD_INT 25
6951: PUSH
6952: LD_INT 3
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: PUSH
6959: LD_INT 25
6961: PUSH
6962: LD_INT 4
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: PPUSH
6981: CALL_OW 69
6985: PUSH
6986: LD_EXP 14
6990: PUSH
6991: LD_EXP 33
6995: PUSH
6996: LD_EXP 23
7000: PUSH
7001: LD_EXP 24
7005: PUSH
7006: LD_EXP 25
7010: PUSH
7011: LD_EXP 26
7015: PUSH
7016: LD_EXP 27
7020: PUSH
7021: LD_EXP 28
7025: PUSH
7026: LD_EXP 29
7030: PUSH
7031: LD_EXP 30
7035: PUSH
7036: LD_EXP 16
7040: PUSH
7041: LD_EXP 31
7045: PUSH
7046: LD_EXP 32
7050: PUSH
7051: LD_EXP 34
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: LIST
7069: LIST
7070: LIST
7071: PUSH
7072: LD_VAR 0 3
7076: ADD
7077: DIFF
7078: ST_TO_ADDR
// if not result then
7079: LD_VAR 0 4
7083: NOT
7084: IFFALSE 7088
// exit ;
7086: GO 7116
// result := result [ 1 ] ;
7088: LD_ADDR_VAR 0 4
7092: PUSH
7093: LD_VAR 0 4
7097: PUSH
7098: LD_INT 1
7100: ARRAY
7101: ST_TO_ADDR
// Say ( result , dial ) ;
7102: LD_VAR 0 4
7106: PPUSH
7107: LD_VAR 0 2
7111: PPUSH
7112: CALL_OW 88
// end ;
7116: LD_VAR 0 4
7120: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
7121: LD_INT 0
7123: PPUSH
7124: PPUSH
7125: PPUSH
7126: PPUSH
7127: PPUSH
7128: PPUSH
7129: PPUSH
7130: PPUSH
7131: PPUSH
7132: PPUSH
7133: PPUSH
7134: PPUSH
7135: PPUSH
7136: PPUSH
7137: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
7138: LD_VAR 0 1
7142: NOT
7143: PUSH
7144: LD_VAR 0 2
7148: NOT
7149: OR
7150: PUSH
7151: LD_VAR 0 1
7155: PPUSH
7156: CALL_OW 247
7160: PUSH
7161: LD_INT 3
7163: EQUAL
7164: OR
7165: IFFALSE 7169
// exit ;
7167: GO 8708
// for i = path downto 1 do
7169: LD_ADDR_VAR 0 5
7173: PUSH
7174: DOUBLE
7175: LD_VAR 0 2
7179: INC
7180: ST_TO_ADDR
7181: LD_INT 1
7183: PUSH
7184: FOR_DOWNTO
7185: IFFALSE 7246
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
7187: LD_VAR 0 2
7191: PUSH
7192: LD_VAR 0 5
7196: ARRAY
7197: PUSH
7198: LD_INT 1
7200: ARRAY
7201: PPUSH
7202: LD_VAR 0 2
7206: PUSH
7207: LD_VAR 0 5
7211: ARRAY
7212: PUSH
7213: LD_INT 2
7215: ARRAY
7216: PPUSH
7217: CALL_OW 488
7221: NOT
7222: IFFALSE 7244
// path = Delete ( path , i ) ;
7224: LD_ADDR_VAR 0 2
7228: PUSH
7229: LD_VAR 0 2
7233: PPUSH
7234: LD_VAR 0 5
7238: PPUSH
7239: CALL_OW 3
7243: ST_TO_ADDR
// end ;
7244: GO 7184
7246: POP
7247: POP
// if not path then
7248: LD_VAR 0 2
7252: NOT
7253: IFFALSE 7257
// exit ;
7255: GO 8708
// tmp_path := [ ] ;
7257: LD_ADDR_VAR 0 11
7261: PUSH
7262: EMPTY
7263: ST_TO_ADDR
// if flags then
7264: LD_VAR 0 3
7268: IFFALSE 7342
// begin if flags [ 1 ] then
7270: LD_VAR 0 3
7274: PUSH
7275: LD_INT 1
7277: ARRAY
7278: IFFALSE 7294
// safe_place = flags [ 1 ] ;
7280: LD_ADDR_VAR 0 16
7284: PUSH
7285: LD_VAR 0 3
7289: PUSH
7290: LD_INT 1
7292: ARRAY
7293: ST_TO_ADDR
// if flags [ 2 ] then
7294: LD_VAR 0 3
7298: PUSH
7299: LD_INT 2
7301: ARRAY
7302: IFFALSE 7318
// spot_dist = flags [ 2 ] ;
7304: LD_ADDR_VAR 0 15
7308: PUSH
7309: LD_VAR 0 3
7313: PUSH
7314: LD_INT 2
7316: ARRAY
7317: ST_TO_ADDR
// if flags [ 3 ] then
7318: LD_VAR 0 3
7322: PUSH
7323: LD_INT 3
7325: ARRAY
7326: IFFALSE 7342
// chase_range = flags [ 3 ] ;
7328: LD_ADDR_VAR 0 17
7332: PUSH
7333: LD_VAR 0 3
7337: PUSH
7338: LD_INT 3
7340: ARRAY
7341: ST_TO_ADDR
// end ; if not chase_range then
7342: LD_VAR 0 17
7346: NOT
7347: IFFALSE 7357
// chase_range = 8 ;
7349: LD_ADDR_VAR 0 17
7353: PUSH
7354: LD_INT 8
7356: ST_TO_ADDR
// if not spot_dist then
7357: LD_VAR 0 15
7361: NOT
7362: IFFALSE 7372
// spot_dist := 8 ;
7364: LD_ADDR_VAR 0 15
7368: PUSH
7369: LD_INT 8
7371: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
7372: LD_ADDR_VAR 0 18
7376: PUSH
7377: LD_VAR 0 1
7381: PPUSH
7382: CALL_OW 247
7386: PUSH
7387: LD_INT 2
7389: EQUAL
7390: PUSH
7391: LD_VAR 0 1
7395: PPUSH
7396: CALL_OW 262
7400: PUSH
7401: LD_INT 3
7403: NONEQUAL
7404: AND
7405: ST_TO_ADDR
// status = 1 ;
7406: LD_ADDR_VAR 0 12
7410: PUSH
7411: LD_INT 1
7413: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
7414: LD_ADDR_VAR 0 11
7418: PUSH
7419: LD_INT 1
7421: PUSH
7422: LD_VAR 0 2
7426: PUSH
7427: LD_INT 1
7429: ARRAY
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7435: LD_INT 35
7437: PPUSH
7438: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
7442: LD_VAR 0 18
7446: PUSH
7447: LD_VAR 0 1
7451: PPUSH
7452: CALL_OW 261
7456: PUSH
7457: LD_INT 20
7459: LESS
7460: AND
7461: IFFALSE 7654
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7463: LD_ADDR_VAR 0 10
7467: PUSH
7468: LD_INT 22
7470: PUSH
7471: LD_VAR 0 1
7475: PPUSH
7476: CALL_OW 255
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: LD_INT 2
7487: PUSH
7488: LD_INT 30
7490: PUSH
7491: LD_INT 0
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PUSH
7498: LD_INT 30
7500: PUSH
7501: LD_INT 1
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: LD_INT 30
7510: PUSH
7511: LD_INT 29
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: PUSH
7518: LD_INT 30
7520: PUSH
7521: LD_INT 3
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PPUSH
7539: CALL_OW 69
7543: ST_TO_ADDR
// if not station then
7544: LD_VAR 0 10
7548: NOT
7549: IFFALSE 7565
// begin SetFuel ( unit , 40 ) ;
7551: LD_VAR 0 1
7555: PPUSH
7556: LD_INT 40
7558: PPUSH
7559: CALL_OW 240
// continue ;
7563: GO 7435
// end ; status := 6 ;
7565: LD_ADDR_VAR 0 12
7569: PUSH
7570: LD_INT 6
7572: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7573: LD_ADDR_VAR 0 10
7577: PUSH
7578: LD_VAR 0 10
7582: PPUSH
7583: LD_VAR 0 1
7587: PPUSH
7588: CALL_OW 74
7592: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7593: LD_INT 35
7595: PPUSH
7596: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7600: LD_VAR 0 1
7604: PPUSH
7605: LD_VAR 0 10
7609: PPUSH
7610: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7614: LD_VAR 0 1
7618: PPUSH
7619: LD_VAR 0 10
7623: PPUSH
7624: CALL_OW 296
7628: PUSH
7629: LD_INT 6
7631: LESS
7632: IFFALSE 7593
// SetFuel ( unit , 100 ) ;
7634: LD_VAR 0 1
7638: PPUSH
7639: LD_INT 100
7641: PPUSH
7642: CALL_OW 240
// status := 5 ;
7646: LD_ADDR_VAR 0 12
7650: PUSH
7651: LD_INT 5
7653: ST_TO_ADDR
// end ; if status = 1 then
7654: LD_VAR 0 12
7658: PUSH
7659: LD_INT 1
7661: EQUAL
7662: IFFALSE 8038
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7664: LD_ADDR_VAR 0 13
7668: PUSH
7669: LD_INT 81
7671: PUSH
7672: LD_VAR 0 1
7676: PPUSH
7677: CALL_OW 255
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: PUSH
7686: LD_INT 3
7688: PUSH
7689: LD_INT 21
7691: PUSH
7692: LD_INT 3
7694: PUSH
7695: EMPTY
7696: LIST
7697: LIST
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: PUSH
7703: LD_INT 91
7705: PUSH
7706: LD_VAR 0 1
7710: PUSH
7711: LD_VAR 0 15
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: LIST
7720: PUSH
7721: LD_INT 101
7723: PUSH
7724: LD_INT 1
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: PPUSH
7737: CALL_OW 69
7741: ST_TO_ADDR
// for i in enemy do
7742: LD_ADDR_VAR 0 5
7746: PUSH
7747: LD_VAR 0 13
7751: PUSH
7752: FOR_IN
7753: IFFALSE 7784
// if IsInvisible ( i ) then
7755: LD_VAR 0 5
7759: PPUSH
7760: CALL_OW 571
7764: IFFALSE 7782
// enemy := enemy diff i ;
7766: LD_ADDR_VAR 0 13
7770: PUSH
7771: LD_VAR 0 13
7775: PUSH
7776: LD_VAR 0 5
7780: DIFF
7781: ST_TO_ADDR
7782: GO 7752
7784: POP
7785: POP
// if enemy then
7786: LD_VAR 0 13
7790: IFFALSE 7840
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7792: LD_VAR 0 1
7796: PPUSH
7797: LD_VAR 0 1
7801: PPUSH
7802: CALL_OW 250
7806: PPUSH
7807: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7811: LD_VAR 0 1
7815: PPUSH
7816: LD_VAR 0 1
7820: PPUSH
7821: CALL_OW 251
7825: PPUSH
7826: CALL_OW 232
// status = 2 ;
7830: LD_ADDR_VAR 0 12
7834: PUSH
7835: LD_INT 2
7837: ST_TO_ADDR
// end else
7838: GO 8038
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7840: LD_VAR 0 1
7844: PPUSH
7845: LD_VAR 0 11
7849: PUSH
7850: LD_INT 2
7852: ARRAY
7853: PUSH
7854: LD_INT 1
7856: ARRAY
7857: PPUSH
7858: LD_VAR 0 11
7862: PUSH
7863: LD_INT 2
7865: ARRAY
7866: PUSH
7867: LD_INT 2
7869: ARRAY
7870: PPUSH
7871: CALL_OW 307
7875: PUSH
7876: LD_VAR 0 1
7880: PPUSH
7881: CALL_OW 314
7885: NOT
7886: OR
7887: IFFALSE 8038
// begin wait ( 0 0$2 ) ;
7889: LD_INT 70
7891: PPUSH
7892: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7896: LD_VAR 0 11
7900: PUSH
7901: LD_INT 1
7903: ARRAY
7904: PUSH
7905: LD_INT 1
7907: PLUS
7908: PUSH
7909: LD_VAR 0 2
7913: GREATER
7914: IFFALSE 7939
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7916: LD_ADDR_VAR 0 11
7920: PUSH
7921: LD_VAR 0 11
7925: PPUSH
7926: LD_INT 1
7928: PPUSH
7929: LD_INT 1
7931: PPUSH
7932: CALL_OW 1
7936: ST_TO_ADDR
7937: GO 7970
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7939: LD_ADDR_VAR 0 11
7943: PUSH
7944: LD_VAR 0 11
7948: PPUSH
7949: LD_INT 1
7951: PPUSH
7952: LD_VAR 0 11
7956: PUSH
7957: LD_INT 1
7959: ARRAY
7960: PUSH
7961: LD_INT 1
7963: PLUS
7964: PPUSH
7965: CALL_OW 1
7969: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7970: LD_ADDR_VAR 0 11
7974: PUSH
7975: LD_VAR 0 11
7979: PPUSH
7980: LD_INT 2
7982: PPUSH
7983: LD_VAR 0 2
7987: PUSH
7988: LD_VAR 0 11
7992: PUSH
7993: LD_INT 1
7995: ARRAY
7996: ARRAY
7997: PPUSH
7998: CALL_OW 1
8002: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
8003: LD_VAR 0 1
8007: PPUSH
8008: LD_VAR 0 11
8012: PUSH
8013: LD_INT 2
8015: ARRAY
8016: PUSH
8017: LD_INT 1
8019: ARRAY
8020: PPUSH
8021: LD_VAR 0 11
8025: PUSH
8026: LD_INT 2
8028: ARRAY
8029: PUSH
8030: LD_INT 2
8032: ARRAY
8033: PPUSH
8034: CALL_OW 114
// end ; end ; end ; if status = 2 then
8038: LD_VAR 0 12
8042: PUSH
8043: LD_INT 2
8045: EQUAL
8046: IFFALSE 8267
// begin if GetLives ( unit ) < 650 and safe_place then
8048: LD_VAR 0 1
8052: PPUSH
8053: CALL_OW 256
8057: PUSH
8058: LD_INT 650
8060: LESS
8061: PUSH
8062: LD_VAR 0 16
8066: AND
8067: IFFALSE 8079
// begin status = 3 ;
8069: LD_ADDR_VAR 0 12
8073: PUSH
8074: LD_INT 3
8076: ST_TO_ADDR
// continue ;
8077: GO 7435
// end ; x := GetRememberedX ( unit ) ;
8079: LD_ADDR_VAR 0 6
8083: PUSH
8084: LD_VAR 0 1
8088: PPUSH
8089: CALL_OW 252
8093: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
8094: LD_ADDR_VAR 0 7
8098: PUSH
8099: LD_VAR 0 1
8103: PPUSH
8104: CALL_OW 253
8108: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
8109: LD_ADDR_VAR 0 13
8113: PUSH
8114: LD_INT 81
8116: PUSH
8117: LD_VAR 0 1
8121: PPUSH
8122: CALL_OW 255
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: LD_INT 92
8133: PUSH
8134: LD_VAR 0 6
8138: PUSH
8139: LD_VAR 0 7
8143: PUSH
8144: LD_VAR 0 15
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: PUSH
8155: LD_INT 101
8157: PUSH
8158: LD_INT 1
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: PUSH
8165: EMPTY
8166: LIST
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 69
8174: ST_TO_ADDR
// if enemy then
8175: LD_VAR 0 13
8179: IFFALSE 8250
// begin e := NearestUnitToUnit ( enemy , unit ) ;
8181: LD_ADDR_VAR 0 14
8185: PUSH
8186: LD_VAR 0 13
8190: PPUSH
8191: LD_VAR 0 1
8195: PPUSH
8196: CALL_OW 74
8200: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
8201: LD_VAR 0 14
8205: PPUSH
8206: LD_VAR 0 6
8210: PPUSH
8211: LD_VAR 0 7
8215: PPUSH
8216: CALL_OW 297
8220: PUSH
8221: LD_VAR 0 15
8225: PUSH
8226: LD_VAR 0 17
8230: PLUS
8231: LESS
8232: IFFALSE 8248
// ComAttackUnit ( unit , e ) ;
8234: LD_VAR 0 1
8238: PPUSH
8239: LD_VAR 0 14
8243: PPUSH
8244: CALL_OW 115
// end else
8248: GO 8267
// begin ComStop ( unit ) ;
8250: LD_VAR 0 1
8254: PPUSH
8255: CALL_OW 141
// status = 5 ;
8259: LD_ADDR_VAR 0 12
8263: PUSH
8264: LD_INT 5
8266: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
8267: LD_VAR 0 12
8271: PUSH
8272: LD_INT 3
8274: EQUAL
8275: PUSH
8276: LD_VAR 0 16
8280: AND
8281: IFFALSE 8367
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
8283: LD_VAR 0 1
8287: PPUSH
8288: LD_VAR 0 16
8292: PUSH
8293: LD_INT 1
8295: ARRAY
8296: PPUSH
8297: LD_VAR 0 16
8301: PUSH
8302: LD_INT 2
8304: ARRAY
8305: PPUSH
8306: CALL_OW 111
// wait ( 0 0$1 ) ;
8310: LD_INT 35
8312: PPUSH
8313: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
8317: LD_VAR 0 1
8321: PPUSH
8322: LD_VAR 0 16
8326: PUSH
8327: LD_INT 1
8329: ARRAY
8330: PPUSH
8331: LD_VAR 0 16
8335: PUSH
8336: LD_INT 2
8338: ARRAY
8339: PPUSH
8340: CALL_OW 297
8344: PUSH
8345: LD_INT 4
8347: LESS
8348: IFFALSE 8283
// ComStop ( unit ) ;
8350: LD_VAR 0 1
8354: PPUSH
8355: CALL_OW 141
// status = 4 ;
8359: LD_ADDR_VAR 0 12
8363: PUSH
8364: LD_INT 4
8366: ST_TO_ADDR
// end ; if status = 4 then
8367: LD_VAR 0 12
8371: PUSH
8372: LD_INT 4
8374: EQUAL
8375: IFFALSE 8407
// begin repeat wait ( 0 0$1 ) ;
8377: LD_INT 35
8379: PPUSH
8380: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
8384: LD_VAR 0 1
8388: PPUSH
8389: CALL_OW 256
8393: PUSH
8394: LD_INT 1000
8396: EQUAL
8397: IFFALSE 8377
// status = 5 ;
8399: LD_ADDR_VAR 0 12
8403: PUSH
8404: LD_INT 5
8406: ST_TO_ADDR
// end ; if status = 5 then
8407: LD_VAR 0 12
8411: PUSH
8412: LD_INT 5
8414: EQUAL
8415: IFFALSE 8697
// begin p := 999 ;
8417: LD_ADDR_VAR 0 9
8421: PUSH
8422: LD_INT 999
8424: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
8425: LD_ADDR_VAR 0 14
8429: PUSH
8430: LD_VAR 0 11
8434: PUSH
8435: LD_INT 2
8437: ARRAY
8438: PUSH
8439: LD_INT 1
8441: ARRAY
8442: PUSH
8443: LD_VAR 0 11
8447: PUSH
8448: LD_INT 2
8450: ARRAY
8451: PUSH
8452: LD_INT 2
8454: ARRAY
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: ST_TO_ADDR
// c := 1 ;
8460: LD_ADDR_VAR 0 8
8464: PUSH
8465: LD_INT 1
8467: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8468: LD_ADDR_VAR 0 5
8472: PUSH
8473: DOUBLE
8474: LD_INT 1
8476: DEC
8477: ST_TO_ADDR
8478: LD_VAR 0 11
8482: PUSH
8483: LD_INT 2
8485: ARRAY
8486: PUSH
8487: LD_INT 2
8489: DIV
8490: PUSH
8491: FOR_TO
8492: IFFALSE 8624
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8494: LD_ADDR_VAR 0 6
8498: PUSH
8499: LD_VAR 0 1
8503: PPUSH
8504: LD_VAR 0 11
8508: PUSH
8509: LD_INT 2
8511: ARRAY
8512: PUSH
8513: LD_VAR 0 8
8517: ARRAY
8518: PPUSH
8519: LD_VAR 0 11
8523: PUSH
8524: LD_INT 2
8526: ARRAY
8527: PUSH
8528: LD_VAR 0 8
8532: PUSH
8533: LD_INT 1
8535: PLUS
8536: ARRAY
8537: PPUSH
8538: CALL_OW 297
8542: ST_TO_ADDR
// if x < p then
8543: LD_VAR 0 6
8547: PUSH
8548: LD_VAR 0 9
8552: LESS
8553: IFFALSE 8608
// begin p := x ;
8555: LD_ADDR_VAR 0 9
8559: PUSH
8560: LD_VAR 0 6
8564: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8565: LD_ADDR_VAR 0 14
8569: PUSH
8570: LD_VAR 0 11
8574: PUSH
8575: LD_INT 2
8577: ARRAY
8578: PUSH
8579: LD_VAR 0 8
8583: ARRAY
8584: PUSH
8585: LD_VAR 0 11
8589: PUSH
8590: LD_INT 2
8592: ARRAY
8593: PUSH
8594: LD_VAR 0 8
8598: PUSH
8599: LD_INT 1
8601: PLUS
8602: ARRAY
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: ST_TO_ADDR
// end ; c = c + 2 ;
8608: LD_ADDR_VAR 0 8
8612: PUSH
8613: LD_VAR 0 8
8617: PUSH
8618: LD_INT 2
8620: PLUS
8621: ST_TO_ADDR
// end ;
8622: GO 8491
8624: POP
8625: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8626: LD_VAR 0 1
8630: PPUSH
8631: LD_VAR 0 14
8635: PUSH
8636: LD_INT 1
8638: ARRAY
8639: PPUSH
8640: LD_VAR 0 14
8644: PUSH
8645: LD_INT 2
8647: ARRAY
8648: PPUSH
8649: CALL_OW 111
// wait ( 0 0$1 ) ;
8653: LD_INT 35
8655: PPUSH
8656: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8660: LD_VAR 0 1
8664: PPUSH
8665: LD_VAR 0 14
8669: PUSH
8670: LD_INT 1
8672: ARRAY
8673: PPUSH
8674: LD_VAR 0 14
8678: PUSH
8679: LD_INT 2
8681: ARRAY
8682: PPUSH
8683: CALL_OW 307
8687: IFFALSE 8626
// status = 1 ;
8689: LD_ADDR_VAR 0 12
8693: PUSH
8694: LD_INT 1
8696: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8697: LD_VAR 0 1
8701: PPUSH
8702: CALL_OW 301
8706: IFFALSE 7435
// end ;
8708: LD_VAR 0 4
8712: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8713: LD_INT 0
8715: PPUSH
8716: PPUSH
8717: PPUSH
8718: PPUSH
8719: PPUSH
8720: PPUSH
8721: PPUSH
8722: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8723: LD_VAR 0 1
8727: NOT
8728: PUSH
8729: LD_VAR 0 3
8733: NOT
8734: OR
8735: PUSH
8736: LD_VAR 0 4
8740: PUSH
8741: LD_INT 1
8743: PUSH
8744: LD_INT 2
8746: PUSH
8747: LD_INT 0
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: LIST
8754: IN
8755: NOT
8756: OR
8757: PUSH
8758: LD_VAR 0 6
8762: NOT
8763: OR
8764: PUSH
8765: LD_VAR 0 7
8769: NOT
8770: OR
8771: IFFALSE 8775
// exit ;
8773: GO 9166
// sex_id :=  ;
8775: LD_ADDR_VAR 0 14
8779: PUSH
8780: LD_STRING 
8782: ST_TO_ADDR
// case class of 1 :
8783: LD_VAR 0 5
8787: PUSH
8788: LD_INT 1
8790: DOUBLE
8791: EQUAL
8792: IFTRUE 8796
8794: GO 8807
8796: POP
// class_id := Sol ; 2 :
8797: LD_ADDR_VAR 0 15
8801: PUSH
8802: LD_STRING Sol
8804: ST_TO_ADDR
8805: GO 8865
8807: LD_INT 2
8809: DOUBLE
8810: EQUAL
8811: IFTRUE 8815
8813: GO 8826
8815: POP
// class_id := Eng ; 3 :
8816: LD_ADDR_VAR 0 15
8820: PUSH
8821: LD_STRING Eng
8823: ST_TO_ADDR
8824: GO 8865
8826: LD_INT 3
8828: DOUBLE
8829: EQUAL
8830: IFTRUE 8834
8832: GO 8845
8834: POP
// class_id := Mech ; 4 :
8835: LD_ADDR_VAR 0 15
8839: PUSH
8840: LD_STRING Mech
8842: ST_TO_ADDR
8843: GO 8865
8845: LD_INT 4
8847: DOUBLE
8848: EQUAL
8849: IFTRUE 8853
8851: GO 8864
8853: POP
// class_id := Sci ; end ;
8854: LD_ADDR_VAR 0 15
8858: PUSH
8859: LD_STRING Sci
8861: ST_TO_ADDR
8862: GO 8865
8864: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8865: LD_ADDR_VAR 0 11
8869: PUSH
8870: LD_VAR 0 1
8874: PPUSH
8875: LD_INT 25
8877: PUSH
8878: LD_VAR 0 5
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PPUSH
8887: CALL_OW 72
8891: ST_TO_ADDR
// if tmp then
8892: LD_VAR 0 11
8896: IFFALSE 8908
// units := tmp ;
8898: LD_ADDR_VAR 0 1
8902: PUSH
8903: LD_VAR 0 11
8907: ST_TO_ADDR
// if sex then
8908: LD_VAR 0 4
8912: IFFALSE 8968
// begin if sex = sex_female then
8914: LD_VAR 0 4
8918: PUSH
8919: LD_INT 2
8921: EQUAL
8922: IFFALSE 8932
// sex_id := F ;
8924: LD_ADDR_VAR 0 14
8928: PUSH
8929: LD_STRING F
8931: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8932: LD_ADDR_VAR 0 1
8936: PUSH
8937: LD_VAR 0 1
8941: PPUSH
8942: LD_INT 26
8944: PUSH
8945: LD_VAR 0 4
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PPUSH
8954: CALL_OW 72
8958: ST_TO_ADDR
// if not units then
8959: LD_VAR 0 1
8963: NOT
8964: IFFALSE 8968
// exit ;
8966: GO 9166
// end ; unit_id := id ;
8968: LD_ADDR_VAR 0 12
8972: PUSH
8973: LD_VAR 0 6
8977: ST_TO_ADDR
// if unit_id > units then
8978: LD_VAR 0 12
8982: PUSH
8983: LD_VAR 0 1
8987: GREATER
8988: IFFALSE 8998
// unit_id := 1 ;
8990: LD_ADDR_VAR 0 12
8994: PUSH
8995: LD_INT 1
8997: ST_TO_ADDR
// if not units [ unit_id ] then
8998: LD_VAR 0 1
9002: PUSH
9003: LD_VAR 0 12
9007: ARRAY
9008: NOT
9009: IFFALSE 9013
// exit ;
9011: GO 9166
// unit := units [ unit_id ] ;
9013: LD_ADDR_VAR 0 10
9017: PUSH
9018: LD_VAR 0 1
9022: PUSH
9023: LD_VAR 0 12
9027: ARRAY
9028: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
9029: LD_ADDR_VAR 0 13
9033: PUSH
9034: LD_STRING D
9036: PUSH
9037: LD_VAR 0 3
9041: STR
9042: PUSH
9043: LD_STRING -
9045: STR
9046: PUSH
9047: LD_VAR 0 14
9051: STR
9052: PUSH
9053: LD_VAR 0 15
9057: STR
9058: PUSH
9059: LD_VAR 0 6
9063: STR
9064: PUSH
9065: LD_STRING -
9067: STR
9068: PUSH
9069: LD_VAR 0 7
9073: STR
9074: ST_TO_ADDR
// case type of 0 :
9075: LD_VAR 0 2
9079: PUSH
9080: LD_INT 0
9082: DOUBLE
9083: EQUAL
9084: IFTRUE 9088
9086: GO 9105
9088: POP
// Say ( unit , dialog_id ) ; 1 :
9089: LD_VAR 0 10
9093: PPUSH
9094: LD_VAR 0 13
9098: PPUSH
9099: CALL_OW 88
9103: GO 9156
9105: LD_INT 1
9107: DOUBLE
9108: EQUAL
9109: IFTRUE 9113
9111: GO 9130
9113: POP
// SayRadio ( unit , dialog_id ) ; 2 :
9114: LD_VAR 0 10
9118: PPUSH
9119: LD_VAR 0 13
9123: PPUSH
9124: CALL_OW 94
9128: GO 9156
9130: LD_INT 2
9132: DOUBLE
9133: EQUAL
9134: IFTRUE 9138
9136: GO 9155
9138: POP
// ForceSay ( unit , dialog_id ) ; end ;
9139: LD_VAR 0 10
9143: PPUSH
9144: LD_VAR 0 13
9148: PPUSH
9149: CALL_OW 91
9153: GO 9156
9155: POP
// result := unit ;
9156: LD_ADDR_VAR 0 8
9160: PUSH
9161: LD_VAR 0 10
9165: ST_TO_ADDR
// end ;
9166: LD_VAR 0 8
9170: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
9171: LD_INT 0
9173: PPUSH
9174: PPUSH
9175: PPUSH
9176: PPUSH
9177: PPUSH
9178: PPUSH
9179: PPUSH
// result := array ;
9180: LD_ADDR_VAR 0 5
9184: PUSH
9185: LD_VAR 0 1
9189: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
9190: LD_VAR 0 1
9194: NOT
9195: PUSH
9196: LD_VAR 0 2
9200: NOT
9201: OR
9202: PUSH
9203: LD_VAR 0 3
9207: NOT
9208: OR
9209: PUSH
9210: LD_VAR 0 2
9214: PUSH
9215: LD_VAR 0 1
9219: GREATER
9220: OR
9221: PUSH
9222: LD_VAR 0 3
9226: PUSH
9227: LD_VAR 0 1
9231: GREATER
9232: OR
9233: IFFALSE 9237
// exit ;
9235: GO 9533
// if direction then
9237: LD_VAR 0 4
9241: IFFALSE 9305
// begin d := 1 ;
9243: LD_ADDR_VAR 0 9
9247: PUSH
9248: LD_INT 1
9250: ST_TO_ADDR
// if i_from > i_to then
9251: LD_VAR 0 2
9255: PUSH
9256: LD_VAR 0 3
9260: GREATER
9261: IFFALSE 9287
// length := ( array - i_from ) + i_to else
9263: LD_ADDR_VAR 0 11
9267: PUSH
9268: LD_VAR 0 1
9272: PUSH
9273: LD_VAR 0 2
9277: MINUS
9278: PUSH
9279: LD_VAR 0 3
9283: PLUS
9284: ST_TO_ADDR
9285: GO 9303
// length := i_to - i_from ;
9287: LD_ADDR_VAR 0 11
9291: PUSH
9292: LD_VAR 0 3
9296: PUSH
9297: LD_VAR 0 2
9301: MINUS
9302: ST_TO_ADDR
// end else
9303: GO 9366
// begin d := - 1 ;
9305: LD_ADDR_VAR 0 9
9309: PUSH
9310: LD_INT 1
9312: NEG
9313: ST_TO_ADDR
// if i_from > i_to then
9314: LD_VAR 0 2
9318: PUSH
9319: LD_VAR 0 3
9323: GREATER
9324: IFFALSE 9344
// length := i_from - i_to else
9326: LD_ADDR_VAR 0 11
9330: PUSH
9331: LD_VAR 0 2
9335: PUSH
9336: LD_VAR 0 3
9340: MINUS
9341: ST_TO_ADDR
9342: GO 9366
// length := ( array - i_to ) + i_from ;
9344: LD_ADDR_VAR 0 11
9348: PUSH
9349: LD_VAR 0 1
9353: PUSH
9354: LD_VAR 0 3
9358: MINUS
9359: PUSH
9360: LD_VAR 0 2
9364: PLUS
9365: ST_TO_ADDR
// end ; if not length then
9366: LD_VAR 0 11
9370: NOT
9371: IFFALSE 9375
// exit ;
9373: GO 9533
// tmp := array ;
9375: LD_ADDR_VAR 0 10
9379: PUSH
9380: LD_VAR 0 1
9384: ST_TO_ADDR
// for i = 1 to length do
9385: LD_ADDR_VAR 0 6
9389: PUSH
9390: DOUBLE
9391: LD_INT 1
9393: DEC
9394: ST_TO_ADDR
9395: LD_VAR 0 11
9399: PUSH
9400: FOR_TO
9401: IFFALSE 9521
// begin for j = 1 to array do
9403: LD_ADDR_VAR 0 7
9407: PUSH
9408: DOUBLE
9409: LD_INT 1
9411: DEC
9412: ST_TO_ADDR
9413: LD_VAR 0 1
9417: PUSH
9418: FOR_TO
9419: IFFALSE 9507
// begin k := j + d ;
9421: LD_ADDR_VAR 0 8
9425: PUSH
9426: LD_VAR 0 7
9430: PUSH
9431: LD_VAR 0 9
9435: PLUS
9436: ST_TO_ADDR
// if k > array then
9437: LD_VAR 0 8
9441: PUSH
9442: LD_VAR 0 1
9446: GREATER
9447: IFFALSE 9457
// k := 1 ;
9449: LD_ADDR_VAR 0 8
9453: PUSH
9454: LD_INT 1
9456: ST_TO_ADDR
// if not k then
9457: LD_VAR 0 8
9461: NOT
9462: IFFALSE 9474
// k := array ;
9464: LD_ADDR_VAR 0 8
9468: PUSH
9469: LD_VAR 0 1
9473: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
9474: LD_ADDR_VAR 0 10
9478: PUSH
9479: LD_VAR 0 10
9483: PPUSH
9484: LD_VAR 0 8
9488: PPUSH
9489: LD_VAR 0 1
9493: PUSH
9494: LD_VAR 0 7
9498: ARRAY
9499: PPUSH
9500: CALL_OW 1
9504: ST_TO_ADDR
// end ;
9505: GO 9418
9507: POP
9508: POP
// array := tmp ;
9509: LD_ADDR_VAR 0 1
9513: PUSH
9514: LD_VAR 0 10
9518: ST_TO_ADDR
// end ;
9519: GO 9400
9521: POP
9522: POP
// result := array ;
9523: LD_ADDR_VAR 0 5
9527: PUSH
9528: LD_VAR 0 1
9532: ST_TO_ADDR
// end ;
9533: LD_VAR 0 5
9537: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
9538: LD_INT 0
9540: PPUSH
9541: PPUSH
9542: PPUSH
9543: PPUSH
9544: PPUSH
9545: PPUSH
9546: PPUSH
9547: PPUSH
9548: PPUSH
9549: PPUSH
9550: PPUSH
9551: PPUSH
9552: PPUSH
9553: PPUSH
9554: PPUSH
9555: PPUSH
9556: PPUSH
9557: PPUSH
9558: PPUSH
9559: PPUSH
9560: PPUSH
9561: PPUSH
9562: PPUSH
9563: PPUSH
9564: PPUSH
9565: PPUSH
9566: PPUSH
9567: PPUSH
9568: PPUSH
9569: PPUSH
9570: PPUSH
9571: PPUSH
9572: PPUSH
9573: PPUSH
9574: PPUSH
9575: PPUSH
9576: PPUSH
9577: PPUSH
9578: PPUSH
9579: PPUSH
9580: PPUSH
9581: PPUSH
9582: PPUSH
9583: PPUSH
9584: PPUSH
9585: PPUSH
9586: PPUSH
9587: PPUSH
9588: PPUSH
9589: PPUSH
9590: PPUSH
9591: PPUSH
9592: PPUSH
9593: PPUSH
9594: PPUSH
9595: PPUSH
9596: PPUSH
9597: PPUSH
// result = [ ] ;
9598: LD_ADDR_VAR 0 7
9602: PUSH
9603: EMPTY
9604: ST_TO_ADDR
// temp_list = [ ] ;
9605: LD_ADDR_VAR 0 9
9609: PUSH
9610: EMPTY
9611: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
9612: LD_VAR 0 4
9616: PUSH
9617: LD_INT 0
9619: PUSH
9620: LD_INT 1
9622: PUSH
9623: LD_INT 2
9625: PUSH
9626: LD_INT 3
9628: PUSH
9629: LD_INT 4
9631: PUSH
9632: LD_INT 5
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: IN
9643: NOT
9644: PUSH
9645: LD_VAR 0 1
9649: PUSH
9650: LD_INT 0
9652: PUSH
9653: LD_INT 1
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: IN
9660: PUSH
9661: LD_VAR 0 5
9665: PUSH
9666: LD_INT 1
9668: PUSH
9669: LD_INT 2
9671: PUSH
9672: LD_INT 3
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: LIST
9679: IN
9680: NOT
9681: AND
9682: OR
9683: IFFALSE 9687
// exit ;
9685: GO 28072
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
9687: LD_VAR 0 1
9691: PUSH
9692: LD_INT 6
9694: PUSH
9695: LD_INT 7
9697: PUSH
9698: LD_INT 8
9700: PUSH
9701: LD_INT 13
9703: PUSH
9704: LD_INT 12
9706: PUSH
9707: LD_INT 15
9709: PUSH
9710: LD_INT 11
9712: PUSH
9713: LD_INT 14
9715: PUSH
9716: LD_INT 10
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: IN
9730: IFFALSE 9740
// btype = b_lab ;
9732: LD_ADDR_VAR 0 1
9736: PUSH
9737: LD_INT 6
9739: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
9740: LD_VAR 0 6
9744: PUSH
9745: LD_INT 0
9747: PUSH
9748: LD_INT 1
9750: PUSH
9751: LD_INT 2
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: IN
9759: NOT
9760: PUSH
9761: LD_VAR 0 1
9765: PUSH
9766: LD_INT 0
9768: PUSH
9769: LD_INT 1
9771: PUSH
9772: LD_INT 2
9774: PUSH
9775: LD_INT 3
9777: PUSH
9778: LD_INT 6
9780: PUSH
9781: LD_INT 36
9783: PUSH
9784: LD_INT 4
9786: PUSH
9787: LD_INT 5
9789: PUSH
9790: LD_INT 31
9792: PUSH
9793: LD_INT 32
9795: PUSH
9796: LD_INT 33
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: IN
9812: NOT
9813: PUSH
9814: LD_VAR 0 6
9818: PUSH
9819: LD_INT 1
9821: EQUAL
9822: AND
9823: OR
9824: PUSH
9825: LD_VAR 0 1
9829: PUSH
9830: LD_INT 2
9832: PUSH
9833: LD_INT 3
9835: PUSH
9836: EMPTY
9837: LIST
9838: LIST
9839: IN
9840: NOT
9841: PUSH
9842: LD_VAR 0 6
9846: PUSH
9847: LD_INT 2
9849: EQUAL
9850: AND
9851: OR
9852: IFFALSE 9862
// mode = 0 ;
9854: LD_ADDR_VAR 0 6
9858: PUSH
9859: LD_INT 0
9861: ST_TO_ADDR
// case mode of 0 :
9862: LD_VAR 0 6
9866: PUSH
9867: LD_INT 0
9869: DOUBLE
9870: EQUAL
9871: IFTRUE 9875
9873: GO 21328
9875: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
9876: LD_ADDR_VAR 0 11
9880: PUSH
9881: LD_INT 0
9883: PUSH
9884: LD_INT 0
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: PUSH
9891: LD_INT 0
9893: PUSH
9894: LD_INT 1
9896: NEG
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: LD_INT 1
9904: PUSH
9905: LD_INT 0
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: PUSH
9912: LD_INT 1
9914: PUSH
9915: LD_INT 1
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: PUSH
9922: LD_INT 0
9924: PUSH
9925: LD_INT 1
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PUSH
9932: LD_INT 1
9934: NEG
9935: PUSH
9936: LD_INT 0
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PUSH
9943: LD_INT 1
9945: NEG
9946: PUSH
9947: LD_INT 1
9949: NEG
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PUSH
9955: LD_INT 1
9957: NEG
9958: PUSH
9959: LD_INT 2
9961: NEG
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 0
9969: PUSH
9970: LD_INT 2
9972: NEG
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: PUSH
9978: LD_INT 1
9980: PUSH
9981: LD_INT 1
9983: NEG
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 1
9991: PUSH
9992: LD_INT 2
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: LD_INT 0
10001: PUSH
10002: LD_INT 2
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: PUSH
10009: LD_INT 1
10011: NEG
10012: PUSH
10013: LD_INT 1
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: PUSH
10020: LD_INT 1
10022: PUSH
10023: LD_INT 3
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: PUSH
10030: LD_INT 0
10032: PUSH
10033: LD_INT 3
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: PUSH
10040: LD_INT 1
10042: NEG
10043: PUSH
10044: LD_INT 2
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
10069: LD_ADDR_VAR 0 12
10073: PUSH
10074: LD_INT 0
10076: PUSH
10077: LD_INT 0
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: PUSH
10084: LD_INT 0
10086: PUSH
10087: LD_INT 1
10089: NEG
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PUSH
10095: LD_INT 1
10097: PUSH
10098: LD_INT 0
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: PUSH
10105: LD_INT 1
10107: PUSH
10108: LD_INT 1
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: PUSH
10115: LD_INT 0
10117: PUSH
10118: LD_INT 1
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: PUSH
10125: LD_INT 1
10127: NEG
10128: PUSH
10129: LD_INT 0
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: PUSH
10136: LD_INT 1
10138: NEG
10139: PUSH
10140: LD_INT 1
10142: NEG
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 1
10150: PUSH
10151: LD_INT 1
10153: NEG
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 2
10161: PUSH
10162: LD_INT 0
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: PUSH
10169: LD_INT 2
10171: PUSH
10172: LD_INT 1
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: PUSH
10179: LD_INT 1
10181: NEG
10182: PUSH
10183: LD_INT 1
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: PUSH
10190: LD_INT 2
10192: NEG
10193: PUSH
10194: LD_INT 0
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PUSH
10201: LD_INT 2
10203: NEG
10204: PUSH
10205: LD_INT 1
10207: NEG
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: PUSH
10213: LD_INT 2
10215: NEG
10216: PUSH
10217: LD_INT 1
10219: PUSH
10220: EMPTY
10221: LIST
10222: LIST
10223: PUSH
10224: LD_INT 3
10226: NEG
10227: PUSH
10228: LD_INT 0
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: PUSH
10235: LD_INT 3
10237: NEG
10238: PUSH
10239: LD_INT 1
10241: NEG
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
10265: LD_ADDR_VAR 0 13
10269: PUSH
10270: LD_INT 0
10272: PUSH
10273: LD_INT 0
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: LD_INT 0
10282: PUSH
10283: LD_INT 1
10285: NEG
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PUSH
10291: LD_INT 1
10293: PUSH
10294: LD_INT 0
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PUSH
10301: LD_INT 1
10303: PUSH
10304: LD_INT 1
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: LD_INT 0
10313: PUSH
10314: LD_INT 1
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 1
10323: NEG
10324: PUSH
10325: LD_INT 0
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PUSH
10332: LD_INT 1
10334: NEG
10335: PUSH
10336: LD_INT 1
10338: NEG
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 1
10346: NEG
10347: PUSH
10348: LD_INT 2
10350: NEG
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: LD_INT 2
10358: PUSH
10359: LD_INT 1
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: PUSH
10366: LD_INT 2
10368: PUSH
10369: LD_INT 2
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 1
10378: PUSH
10379: LD_INT 2
10381: PUSH
10382: EMPTY
10383: LIST
10384: LIST
10385: PUSH
10386: LD_INT 2
10388: NEG
10389: PUSH
10390: LD_INT 1
10392: NEG
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 2
10400: NEG
10401: PUSH
10402: LD_INT 2
10404: NEG
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: PUSH
10410: LD_INT 2
10412: NEG
10413: PUSH
10414: LD_INT 3
10416: NEG
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: LD_INT 3
10424: NEG
10425: PUSH
10426: LD_INT 2
10428: NEG
10429: PUSH
10430: EMPTY
10431: LIST
10432: LIST
10433: PUSH
10434: LD_INT 3
10436: NEG
10437: PUSH
10438: LD_INT 3
10440: NEG
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: PUSH
10446: EMPTY
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
10464: LD_ADDR_VAR 0 14
10468: PUSH
10469: LD_INT 0
10471: PUSH
10472: LD_INT 0
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: PUSH
10479: LD_INT 0
10481: PUSH
10482: LD_INT 1
10484: NEG
10485: PUSH
10486: EMPTY
10487: LIST
10488: LIST
10489: PUSH
10490: LD_INT 1
10492: PUSH
10493: LD_INT 0
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: PUSH
10500: LD_INT 1
10502: PUSH
10503: LD_INT 1
10505: PUSH
10506: EMPTY
10507: LIST
10508: LIST
10509: PUSH
10510: LD_INT 0
10512: PUSH
10513: LD_INT 1
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PUSH
10520: LD_INT 1
10522: NEG
10523: PUSH
10524: LD_INT 0
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 1
10533: NEG
10534: PUSH
10535: LD_INT 1
10537: NEG
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PUSH
10543: LD_INT 1
10545: NEG
10546: PUSH
10547: LD_INT 2
10549: NEG
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 0
10557: PUSH
10558: LD_INT 2
10560: NEG
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PUSH
10566: LD_INT 1
10568: PUSH
10569: LD_INT 1
10571: NEG
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: PUSH
10577: LD_INT 1
10579: PUSH
10580: LD_INT 2
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: PUSH
10587: LD_INT 0
10589: PUSH
10590: LD_INT 2
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PUSH
10597: LD_INT 1
10599: NEG
10600: PUSH
10601: LD_INT 1
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: PUSH
10608: LD_INT 1
10610: NEG
10611: PUSH
10612: LD_INT 3
10614: NEG
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: PUSH
10620: LD_INT 0
10622: PUSH
10623: LD_INT 3
10625: NEG
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PUSH
10631: LD_INT 1
10633: PUSH
10634: LD_INT 2
10636: NEG
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
10660: LD_ADDR_VAR 0 15
10664: PUSH
10665: LD_INT 0
10667: PUSH
10668: LD_INT 0
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: PUSH
10675: LD_INT 0
10677: PUSH
10678: LD_INT 1
10680: NEG
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: PUSH
10686: LD_INT 1
10688: PUSH
10689: LD_INT 0
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: LD_INT 1
10698: PUSH
10699: LD_INT 1
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: PUSH
10706: LD_INT 0
10708: PUSH
10709: LD_INT 1
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: PUSH
10716: LD_INT 1
10718: NEG
10719: PUSH
10720: LD_INT 0
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: PUSH
10727: LD_INT 1
10729: NEG
10730: PUSH
10731: LD_INT 1
10733: NEG
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: PUSH
10739: LD_INT 1
10741: PUSH
10742: LD_INT 1
10744: NEG
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: PUSH
10750: LD_INT 2
10752: PUSH
10753: LD_INT 0
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: PUSH
10760: LD_INT 2
10762: PUSH
10763: LD_INT 1
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: PUSH
10770: LD_INT 1
10772: NEG
10773: PUSH
10774: LD_INT 1
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 2
10783: NEG
10784: PUSH
10785: LD_INT 0
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 2
10794: NEG
10795: PUSH
10796: LD_INT 1
10798: NEG
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: PUSH
10804: LD_INT 2
10806: PUSH
10807: LD_INT 1
10809: NEG
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: PUSH
10815: LD_INT 3
10817: PUSH
10818: LD_INT 0
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: PUSH
10825: LD_INT 3
10827: PUSH
10828: LD_INT 1
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
10853: LD_ADDR_VAR 0 16
10857: PUSH
10858: LD_INT 0
10860: PUSH
10861: LD_INT 0
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: PUSH
10868: LD_INT 0
10870: PUSH
10871: LD_INT 1
10873: NEG
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: PUSH
10879: LD_INT 1
10881: PUSH
10882: LD_INT 0
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 1
10891: PUSH
10892: LD_INT 1
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 0
10901: PUSH
10902: LD_INT 1
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 1
10911: NEG
10912: PUSH
10913: LD_INT 0
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PUSH
10920: LD_INT 1
10922: NEG
10923: PUSH
10924: LD_INT 1
10926: NEG
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: LD_INT 1
10934: NEG
10935: PUSH
10936: LD_INT 2
10938: NEG
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PUSH
10944: LD_INT 2
10946: PUSH
10947: LD_INT 1
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PUSH
10954: LD_INT 2
10956: PUSH
10957: LD_INT 2
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: LD_INT 1
10966: PUSH
10967: LD_INT 2
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 2
10976: NEG
10977: PUSH
10978: LD_INT 1
10980: NEG
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: PUSH
10986: LD_INT 2
10988: NEG
10989: PUSH
10990: LD_INT 2
10992: NEG
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: PUSH
10998: LD_INT 3
11000: PUSH
11001: LD_INT 2
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: LD_INT 3
11010: PUSH
11011: LD_INT 3
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: LD_INT 2
11020: PUSH
11021: LD_INT 3
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11046: LD_ADDR_VAR 0 17
11050: PUSH
11051: LD_INT 0
11053: PUSH
11054: LD_INT 0
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PUSH
11061: LD_INT 0
11063: PUSH
11064: LD_INT 1
11066: NEG
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: PUSH
11072: LD_INT 1
11074: PUSH
11075: LD_INT 0
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PUSH
11082: LD_INT 1
11084: PUSH
11085: LD_INT 1
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PUSH
11092: LD_INT 0
11094: PUSH
11095: LD_INT 1
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: LD_INT 1
11104: NEG
11105: PUSH
11106: LD_INT 0
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: PUSH
11113: LD_INT 1
11115: NEG
11116: PUSH
11117: LD_INT 1
11119: NEG
11120: PUSH
11121: EMPTY
11122: LIST
11123: LIST
11124: PUSH
11125: LD_INT 1
11127: NEG
11128: PUSH
11129: LD_INT 2
11131: NEG
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 0
11139: PUSH
11140: LD_INT 2
11142: NEG
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: PUSH
11148: LD_INT 1
11150: PUSH
11151: LD_INT 1
11153: NEG
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: PUSH
11159: LD_INT 2
11161: PUSH
11162: LD_INT 0
11164: PUSH
11165: EMPTY
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 2
11171: PUSH
11172: LD_INT 1
11174: PUSH
11175: EMPTY
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 2
11181: PUSH
11182: LD_INT 2
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PUSH
11189: LD_INT 1
11191: PUSH
11192: LD_INT 2
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PUSH
11199: LD_INT 0
11201: PUSH
11202: LD_INT 2
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: LD_INT 1
11211: NEG
11212: PUSH
11213: LD_INT 1
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 2
11222: NEG
11223: PUSH
11224: LD_INT 0
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: PUSH
11231: LD_INT 2
11233: NEG
11234: PUSH
11235: LD_INT 1
11237: NEG
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PUSH
11243: LD_INT 2
11245: NEG
11246: PUSH
11247: LD_INT 2
11249: NEG
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11276: LD_ADDR_VAR 0 18
11280: PUSH
11281: LD_INT 0
11283: PUSH
11284: LD_INT 0
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: LD_INT 0
11293: PUSH
11294: LD_INT 1
11296: NEG
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PUSH
11302: LD_INT 1
11304: PUSH
11305: LD_INT 0
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PUSH
11312: LD_INT 1
11314: PUSH
11315: LD_INT 1
11317: PUSH
11318: EMPTY
11319: LIST
11320: LIST
11321: PUSH
11322: LD_INT 0
11324: PUSH
11325: LD_INT 1
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: PUSH
11332: LD_INT 1
11334: NEG
11335: PUSH
11336: LD_INT 0
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: PUSH
11343: LD_INT 1
11345: NEG
11346: PUSH
11347: LD_INT 1
11349: NEG
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: PUSH
11355: LD_INT 1
11357: NEG
11358: PUSH
11359: LD_INT 2
11361: NEG
11362: PUSH
11363: EMPTY
11364: LIST
11365: LIST
11366: PUSH
11367: LD_INT 0
11369: PUSH
11370: LD_INT 2
11372: NEG
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: LD_INT 1
11380: PUSH
11381: LD_INT 1
11383: NEG
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 2
11391: PUSH
11392: LD_INT 0
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 2
11401: PUSH
11402: LD_INT 1
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: PUSH
11409: LD_INT 2
11411: PUSH
11412: LD_INT 2
11414: PUSH
11415: EMPTY
11416: LIST
11417: LIST
11418: PUSH
11419: LD_INT 1
11421: PUSH
11422: LD_INT 2
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 0
11431: PUSH
11432: LD_INT 2
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: PUSH
11439: LD_INT 1
11441: NEG
11442: PUSH
11443: LD_INT 1
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PUSH
11450: LD_INT 2
11452: NEG
11453: PUSH
11454: LD_INT 0
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PUSH
11461: LD_INT 2
11463: NEG
11464: PUSH
11465: LD_INT 1
11467: NEG
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: PUSH
11473: LD_INT 2
11475: NEG
11476: PUSH
11477: LD_INT 2
11479: NEG
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11506: LD_ADDR_VAR 0 19
11510: PUSH
11511: LD_INT 0
11513: PUSH
11514: LD_INT 0
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: LD_INT 0
11523: PUSH
11524: LD_INT 1
11526: NEG
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PUSH
11532: LD_INT 1
11534: PUSH
11535: LD_INT 0
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: PUSH
11542: LD_INT 1
11544: PUSH
11545: LD_INT 1
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 0
11554: PUSH
11555: LD_INT 1
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: LD_INT 1
11564: NEG
11565: PUSH
11566: LD_INT 0
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: LD_INT 1
11575: NEG
11576: PUSH
11577: LD_INT 1
11579: NEG
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 1
11587: NEG
11588: PUSH
11589: LD_INT 2
11591: NEG
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 0
11599: PUSH
11600: LD_INT 2
11602: NEG
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 1
11610: PUSH
11611: LD_INT 1
11613: NEG
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: PUSH
11619: LD_INT 2
11621: PUSH
11622: LD_INT 0
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 2
11631: PUSH
11632: LD_INT 1
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: LD_INT 2
11641: PUSH
11642: LD_INT 2
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: LD_INT 1
11651: PUSH
11652: LD_INT 2
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PUSH
11659: LD_INT 0
11661: PUSH
11662: LD_INT 2
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 1
11671: NEG
11672: PUSH
11673: LD_INT 1
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: LD_INT 2
11682: NEG
11683: PUSH
11684: LD_INT 0
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PUSH
11691: LD_INT 2
11693: NEG
11694: PUSH
11695: LD_INT 1
11697: NEG
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: PUSH
11703: LD_INT 2
11705: NEG
11706: PUSH
11707: LD_INT 2
11709: NEG
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11736: LD_ADDR_VAR 0 20
11740: PUSH
11741: LD_INT 0
11743: PUSH
11744: LD_INT 0
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: LD_INT 0
11753: PUSH
11754: LD_INT 1
11756: NEG
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: PUSH
11762: LD_INT 1
11764: PUSH
11765: LD_INT 0
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 1
11774: PUSH
11775: LD_INT 1
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: LD_INT 0
11784: PUSH
11785: LD_INT 1
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PUSH
11792: LD_INT 1
11794: NEG
11795: PUSH
11796: LD_INT 0
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: PUSH
11803: LD_INT 1
11805: NEG
11806: PUSH
11807: LD_INT 1
11809: NEG
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PUSH
11815: LD_INT 1
11817: NEG
11818: PUSH
11819: LD_INT 2
11821: NEG
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PUSH
11827: LD_INT 0
11829: PUSH
11830: LD_INT 2
11832: NEG
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 1
11840: PUSH
11841: LD_INT 1
11843: NEG
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: PUSH
11849: LD_INT 2
11851: PUSH
11852: LD_INT 0
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: PUSH
11859: LD_INT 2
11861: PUSH
11862: LD_INT 1
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: PUSH
11869: LD_INT 2
11871: PUSH
11872: LD_INT 2
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: PUSH
11879: LD_INT 1
11881: PUSH
11882: LD_INT 2
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: PUSH
11889: LD_INT 0
11891: PUSH
11892: LD_INT 2
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: LD_INT 1
11901: NEG
11902: PUSH
11903: LD_INT 1
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PUSH
11910: LD_INT 2
11912: NEG
11913: PUSH
11914: LD_INT 0
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PUSH
11921: LD_INT 2
11923: NEG
11924: PUSH
11925: LD_INT 1
11927: NEG
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: PUSH
11933: LD_INT 2
11935: NEG
11936: PUSH
11937: LD_INT 2
11939: NEG
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11966: LD_ADDR_VAR 0 21
11970: PUSH
11971: LD_INT 0
11973: PUSH
11974: LD_INT 0
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PUSH
11981: LD_INT 0
11983: PUSH
11984: LD_INT 1
11986: NEG
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: LD_INT 1
11994: PUSH
11995: LD_INT 0
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: LD_INT 1
12004: PUSH
12005: LD_INT 1
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: PUSH
12012: LD_INT 0
12014: PUSH
12015: LD_INT 1
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: PUSH
12022: LD_INT 1
12024: NEG
12025: PUSH
12026: LD_INT 0
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 1
12035: NEG
12036: PUSH
12037: LD_INT 1
12039: NEG
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 1
12047: NEG
12048: PUSH
12049: LD_INT 2
12051: NEG
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PUSH
12057: LD_INT 0
12059: PUSH
12060: LD_INT 2
12062: NEG
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PUSH
12068: LD_INT 1
12070: PUSH
12071: LD_INT 1
12073: NEG
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: PUSH
12079: LD_INT 2
12081: PUSH
12082: LD_INT 0
12084: PUSH
12085: EMPTY
12086: LIST
12087: LIST
12088: PUSH
12089: LD_INT 2
12091: PUSH
12092: LD_INT 1
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 2
12101: PUSH
12102: LD_INT 2
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 1
12111: PUSH
12112: LD_INT 2
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: LD_INT 0
12121: PUSH
12122: LD_INT 2
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: LD_INT 1
12131: NEG
12132: PUSH
12133: LD_INT 1
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PUSH
12140: LD_INT 2
12142: NEG
12143: PUSH
12144: LD_INT 0
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PUSH
12151: LD_INT 2
12153: NEG
12154: PUSH
12155: LD_INT 1
12157: NEG
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: LD_INT 2
12165: NEG
12166: PUSH
12167: LD_INT 2
12169: NEG
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
12196: LD_ADDR_VAR 0 22
12200: PUSH
12201: LD_INT 0
12203: PUSH
12204: LD_INT 0
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 0
12213: PUSH
12214: LD_INT 1
12216: NEG
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PUSH
12222: LD_INT 1
12224: PUSH
12225: LD_INT 0
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PUSH
12232: LD_INT 1
12234: PUSH
12235: LD_INT 1
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PUSH
12242: LD_INT 0
12244: PUSH
12245: LD_INT 1
12247: PUSH
12248: EMPTY
12249: LIST
12250: LIST
12251: PUSH
12252: LD_INT 1
12254: NEG
12255: PUSH
12256: LD_INT 0
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: LD_INT 1
12265: NEG
12266: PUSH
12267: LD_INT 1
12269: NEG
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: PUSH
12275: LD_INT 1
12277: NEG
12278: PUSH
12279: LD_INT 2
12281: NEG
12282: PUSH
12283: EMPTY
12284: LIST
12285: LIST
12286: PUSH
12287: LD_INT 0
12289: PUSH
12290: LD_INT 2
12292: NEG
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: PUSH
12298: LD_INT 1
12300: PUSH
12301: LD_INT 1
12303: NEG
12304: PUSH
12305: EMPTY
12306: LIST
12307: LIST
12308: PUSH
12309: LD_INT 2
12311: PUSH
12312: LD_INT 0
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 2
12321: PUSH
12322: LD_INT 1
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: PUSH
12329: LD_INT 2
12331: PUSH
12332: LD_INT 2
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: PUSH
12339: LD_INT 1
12341: PUSH
12342: LD_INT 2
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: PUSH
12349: LD_INT 0
12351: PUSH
12352: LD_INT 2
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: PUSH
12359: LD_INT 1
12361: NEG
12362: PUSH
12363: LD_INT 1
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: LD_INT 2
12372: NEG
12373: PUSH
12374: LD_INT 0
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PUSH
12381: LD_INT 2
12383: NEG
12384: PUSH
12385: LD_INT 1
12387: NEG
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: LD_INT 2
12395: NEG
12396: PUSH
12397: LD_INT 2
12399: NEG
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
12426: LD_ADDR_VAR 0 23
12430: PUSH
12431: LD_INT 0
12433: PUSH
12434: LD_INT 0
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: PUSH
12441: LD_INT 0
12443: PUSH
12444: LD_INT 1
12446: NEG
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: PUSH
12452: LD_INT 1
12454: PUSH
12455: LD_INT 0
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 1
12464: PUSH
12465: LD_INT 1
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 0
12474: PUSH
12475: LD_INT 1
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 1
12484: NEG
12485: PUSH
12486: LD_INT 0
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: LD_INT 1
12495: NEG
12496: PUSH
12497: LD_INT 1
12499: NEG
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: LD_INT 1
12507: NEG
12508: PUSH
12509: LD_INT 2
12511: NEG
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: PUSH
12517: LD_INT 0
12519: PUSH
12520: LD_INT 2
12522: NEG
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PUSH
12528: LD_INT 1
12530: PUSH
12531: LD_INT 1
12533: NEG
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PUSH
12539: LD_INT 2
12541: PUSH
12542: LD_INT 0
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PUSH
12549: LD_INT 2
12551: PUSH
12552: LD_INT 1
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: PUSH
12559: LD_INT 2
12561: PUSH
12562: LD_INT 2
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PUSH
12569: LD_INT 1
12571: PUSH
12572: LD_INT 2
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: LD_INT 0
12581: PUSH
12582: LD_INT 2
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: LD_INT 1
12591: NEG
12592: PUSH
12593: LD_INT 1
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: LD_INT 2
12602: NEG
12603: PUSH
12604: LD_INT 0
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: LD_INT 2
12613: NEG
12614: PUSH
12615: LD_INT 1
12617: NEG
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PUSH
12623: LD_INT 2
12625: NEG
12626: PUSH
12627: LD_INT 2
12629: NEG
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: PUSH
12635: LD_INT 2
12637: NEG
12638: PUSH
12639: LD_INT 3
12641: NEG
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: PUSH
12647: LD_INT 1
12649: NEG
12650: PUSH
12651: LD_INT 3
12653: NEG
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PUSH
12659: LD_INT 1
12661: PUSH
12662: LD_INT 2
12664: NEG
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: PUSH
12670: LD_INT 2
12672: PUSH
12673: LD_INT 1
12675: NEG
12676: PUSH
12677: EMPTY
12678: LIST
12679: LIST
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
12706: LD_ADDR_VAR 0 24
12710: PUSH
12711: LD_INT 0
12713: PUSH
12714: LD_INT 0
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: PUSH
12721: LD_INT 0
12723: PUSH
12724: LD_INT 1
12726: NEG
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: LD_INT 1
12734: PUSH
12735: LD_INT 0
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PUSH
12742: LD_INT 1
12744: PUSH
12745: LD_INT 1
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PUSH
12752: LD_INT 0
12754: PUSH
12755: LD_INT 1
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: PUSH
12762: LD_INT 1
12764: NEG
12765: PUSH
12766: LD_INT 0
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PUSH
12773: LD_INT 1
12775: NEG
12776: PUSH
12777: LD_INT 1
12779: NEG
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: LD_INT 1
12787: NEG
12788: PUSH
12789: LD_INT 2
12791: NEG
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: PUSH
12797: LD_INT 0
12799: PUSH
12800: LD_INT 2
12802: NEG
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PUSH
12808: LD_INT 1
12810: PUSH
12811: LD_INT 1
12813: NEG
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PUSH
12819: LD_INT 2
12821: PUSH
12822: LD_INT 0
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PUSH
12829: LD_INT 2
12831: PUSH
12832: LD_INT 1
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: PUSH
12839: LD_INT 2
12841: PUSH
12842: LD_INT 2
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: PUSH
12849: LD_INT 1
12851: PUSH
12852: LD_INT 2
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: PUSH
12859: LD_INT 0
12861: PUSH
12862: LD_INT 2
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: PUSH
12869: LD_INT 1
12871: NEG
12872: PUSH
12873: LD_INT 1
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PUSH
12880: LD_INT 2
12882: NEG
12883: PUSH
12884: LD_INT 0
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: PUSH
12891: LD_INT 2
12893: NEG
12894: PUSH
12895: LD_INT 1
12897: NEG
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: PUSH
12903: LD_INT 2
12905: NEG
12906: PUSH
12907: LD_INT 2
12909: NEG
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: LD_INT 1
12917: PUSH
12918: LD_INT 2
12920: NEG
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 2
12928: PUSH
12929: LD_INT 1
12931: NEG
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PUSH
12937: LD_INT 3
12939: PUSH
12940: LD_INT 1
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PUSH
12947: LD_INT 3
12949: PUSH
12950: LD_INT 2
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: PUSH
12957: EMPTY
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
12982: LD_ADDR_VAR 0 25
12986: PUSH
12987: LD_INT 0
12989: PUSH
12990: LD_INT 0
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: PUSH
12997: LD_INT 0
12999: PUSH
13000: LD_INT 1
13002: NEG
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: PUSH
13008: LD_INT 1
13010: PUSH
13011: LD_INT 0
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: LD_INT 1
13020: PUSH
13021: LD_INT 1
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: PUSH
13028: LD_INT 0
13030: PUSH
13031: LD_INT 1
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PUSH
13038: LD_INT 1
13040: NEG
13041: PUSH
13042: LD_INT 0
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PUSH
13049: LD_INT 1
13051: NEG
13052: PUSH
13053: LD_INT 1
13055: NEG
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: LD_INT 1
13063: NEG
13064: PUSH
13065: LD_INT 2
13067: NEG
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: PUSH
13073: LD_INT 0
13075: PUSH
13076: LD_INT 2
13078: NEG
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PUSH
13084: LD_INT 1
13086: PUSH
13087: LD_INT 1
13089: NEG
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: LD_INT 2
13097: PUSH
13098: LD_INT 0
13100: PUSH
13101: EMPTY
13102: LIST
13103: LIST
13104: PUSH
13105: LD_INT 2
13107: PUSH
13108: LD_INT 1
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PUSH
13115: LD_INT 2
13117: PUSH
13118: LD_INT 2
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: LD_INT 1
13127: PUSH
13128: LD_INT 2
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: LD_INT 0
13137: PUSH
13138: LD_INT 2
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: PUSH
13145: LD_INT 1
13147: NEG
13148: PUSH
13149: LD_INT 1
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: LD_INT 2
13158: NEG
13159: PUSH
13160: LD_INT 0
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: PUSH
13167: LD_INT 2
13169: NEG
13170: PUSH
13171: LD_INT 1
13173: NEG
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PUSH
13179: LD_INT 2
13181: NEG
13182: PUSH
13183: LD_INT 2
13185: NEG
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: PUSH
13191: LD_INT 3
13193: PUSH
13194: LD_INT 1
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: PUSH
13201: LD_INT 3
13203: PUSH
13204: LD_INT 2
13206: PUSH
13207: EMPTY
13208: LIST
13209: LIST
13210: PUSH
13211: LD_INT 2
13213: PUSH
13214: LD_INT 3
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 1
13223: PUSH
13224: LD_INT 3
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
13256: LD_ADDR_VAR 0 26
13260: PUSH
13261: LD_INT 0
13263: PUSH
13264: LD_INT 0
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PUSH
13271: LD_INT 0
13273: PUSH
13274: LD_INT 1
13276: NEG
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: LD_INT 1
13284: PUSH
13285: LD_INT 0
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: LD_INT 1
13294: PUSH
13295: LD_INT 1
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 0
13304: PUSH
13305: LD_INT 1
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PUSH
13312: LD_INT 1
13314: NEG
13315: PUSH
13316: LD_INT 0
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PUSH
13323: LD_INT 1
13325: NEG
13326: PUSH
13327: LD_INT 1
13329: NEG
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: PUSH
13335: LD_INT 1
13337: NEG
13338: PUSH
13339: LD_INT 2
13341: NEG
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PUSH
13347: LD_INT 0
13349: PUSH
13350: LD_INT 2
13352: NEG
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 1
13360: PUSH
13361: LD_INT 1
13363: NEG
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 2
13371: PUSH
13372: LD_INT 0
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 2
13381: PUSH
13382: LD_INT 1
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 2
13391: PUSH
13392: LD_INT 2
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: LD_INT 1
13401: PUSH
13402: LD_INT 2
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PUSH
13409: LD_INT 0
13411: PUSH
13412: LD_INT 2
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: PUSH
13419: LD_INT 1
13421: NEG
13422: PUSH
13423: LD_INT 1
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 2
13432: NEG
13433: PUSH
13434: LD_INT 0
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: LD_INT 2
13443: NEG
13444: PUSH
13445: LD_INT 1
13447: NEG
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: LD_INT 2
13455: NEG
13456: PUSH
13457: LD_INT 2
13459: NEG
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PUSH
13465: LD_INT 2
13467: PUSH
13468: LD_INT 3
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: PUSH
13475: LD_INT 1
13477: PUSH
13478: LD_INT 3
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: PUSH
13485: LD_INT 1
13487: NEG
13488: PUSH
13489: LD_INT 2
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PUSH
13496: LD_INT 2
13498: NEG
13499: PUSH
13500: LD_INT 1
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13532: LD_ADDR_VAR 0 27
13536: PUSH
13537: LD_INT 0
13539: PUSH
13540: LD_INT 0
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 0
13549: PUSH
13550: LD_INT 1
13552: NEG
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PUSH
13558: LD_INT 1
13560: PUSH
13561: LD_INT 0
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: LD_INT 1
13570: PUSH
13571: LD_INT 1
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 0
13580: PUSH
13581: LD_INT 1
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: LD_INT 1
13590: NEG
13591: PUSH
13592: LD_INT 0
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: PUSH
13599: LD_INT 1
13601: NEG
13602: PUSH
13603: LD_INT 1
13605: NEG
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PUSH
13611: LD_INT 1
13613: NEG
13614: PUSH
13615: LD_INT 2
13617: NEG
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PUSH
13623: LD_INT 0
13625: PUSH
13626: LD_INT 2
13628: NEG
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 1
13636: PUSH
13637: LD_INT 1
13639: NEG
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: PUSH
13645: LD_INT 2
13647: PUSH
13648: LD_INT 0
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PUSH
13655: LD_INT 2
13657: PUSH
13658: LD_INT 1
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: LD_INT 2
13667: PUSH
13668: LD_INT 2
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 1
13677: PUSH
13678: LD_INT 2
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: LD_INT 0
13687: PUSH
13688: LD_INT 2
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: PUSH
13695: LD_INT 1
13697: NEG
13698: PUSH
13699: LD_INT 1
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: PUSH
13706: LD_INT 2
13708: NEG
13709: PUSH
13710: LD_INT 0
13712: PUSH
13713: EMPTY
13714: LIST
13715: LIST
13716: PUSH
13717: LD_INT 2
13719: NEG
13720: PUSH
13721: LD_INT 1
13723: NEG
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: PUSH
13729: LD_INT 2
13731: NEG
13732: PUSH
13733: LD_INT 2
13735: NEG
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: PUSH
13741: LD_INT 1
13743: NEG
13744: PUSH
13745: LD_INT 2
13747: PUSH
13748: EMPTY
13749: LIST
13750: LIST
13751: PUSH
13752: LD_INT 2
13754: NEG
13755: PUSH
13756: LD_INT 1
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 3
13765: NEG
13766: PUSH
13767: LD_INT 1
13769: NEG
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: PUSH
13775: LD_INT 3
13777: NEG
13778: PUSH
13779: LD_INT 2
13781: NEG
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13812: LD_ADDR_VAR 0 28
13816: PUSH
13817: LD_INT 0
13819: PUSH
13820: LD_INT 0
13822: PUSH
13823: EMPTY
13824: LIST
13825: LIST
13826: PUSH
13827: LD_INT 0
13829: PUSH
13830: LD_INT 1
13832: NEG
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: LD_INT 1
13840: PUSH
13841: LD_INT 0
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PUSH
13848: LD_INT 1
13850: PUSH
13851: LD_INT 1
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PUSH
13858: LD_INT 0
13860: PUSH
13861: LD_INT 1
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: PUSH
13868: LD_INT 1
13870: NEG
13871: PUSH
13872: LD_INT 0
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PUSH
13879: LD_INT 1
13881: NEG
13882: PUSH
13883: LD_INT 1
13885: NEG
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 1
13893: NEG
13894: PUSH
13895: LD_INT 2
13897: NEG
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 0
13905: PUSH
13906: LD_INT 2
13908: NEG
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PUSH
13914: LD_INT 1
13916: PUSH
13917: LD_INT 1
13919: NEG
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: PUSH
13925: LD_INT 2
13927: PUSH
13928: LD_INT 0
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PUSH
13935: LD_INT 2
13937: PUSH
13938: LD_INT 1
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: PUSH
13945: LD_INT 2
13947: PUSH
13948: LD_INT 2
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: LD_INT 1
13957: PUSH
13958: LD_INT 2
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: PUSH
13965: LD_INT 0
13967: PUSH
13968: LD_INT 2
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: PUSH
13975: LD_INT 1
13977: NEG
13978: PUSH
13979: LD_INT 1
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PUSH
13986: LD_INT 2
13988: NEG
13989: PUSH
13990: LD_INT 0
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 2
13999: NEG
14000: PUSH
14001: LD_INT 1
14003: NEG
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: LD_INT 2
14011: NEG
14012: PUSH
14013: LD_INT 2
14015: NEG
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PUSH
14021: LD_INT 2
14023: NEG
14024: PUSH
14025: LD_INT 3
14027: NEG
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: PUSH
14033: LD_INT 1
14035: NEG
14036: PUSH
14037: LD_INT 3
14039: NEG
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: PUSH
14045: LD_INT 3
14047: NEG
14048: PUSH
14049: LD_INT 1
14051: NEG
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PUSH
14057: LD_INT 3
14059: NEG
14060: PUSH
14061: LD_INT 2
14063: NEG
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14094: LD_ADDR_VAR 0 29
14098: PUSH
14099: LD_INT 0
14101: PUSH
14102: LD_INT 0
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: PUSH
14109: LD_INT 0
14111: PUSH
14112: LD_INT 1
14114: NEG
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: LD_INT 1
14122: PUSH
14123: LD_INT 0
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PUSH
14130: LD_INT 1
14132: PUSH
14133: LD_INT 1
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PUSH
14140: LD_INT 0
14142: PUSH
14143: LD_INT 1
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PUSH
14150: LD_INT 1
14152: NEG
14153: PUSH
14154: LD_INT 0
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: PUSH
14161: LD_INT 1
14163: NEG
14164: PUSH
14165: LD_INT 1
14167: NEG
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PUSH
14173: LD_INT 1
14175: NEG
14176: PUSH
14177: LD_INT 2
14179: NEG
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: PUSH
14185: LD_INT 0
14187: PUSH
14188: LD_INT 2
14190: NEG
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PUSH
14196: LD_INT 1
14198: PUSH
14199: LD_INT 1
14201: NEG
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 2
14209: PUSH
14210: LD_INT 0
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: LD_INT 2
14219: PUSH
14220: LD_INT 1
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: LD_INT 1
14229: PUSH
14230: LD_INT 2
14232: PUSH
14233: EMPTY
14234: LIST
14235: LIST
14236: PUSH
14237: LD_INT 0
14239: PUSH
14240: LD_INT 2
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 1
14249: NEG
14250: PUSH
14251: LD_INT 1
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 2
14260: NEG
14261: PUSH
14262: LD_INT 1
14264: NEG
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 2
14272: NEG
14273: PUSH
14274: LD_INT 2
14276: NEG
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: LD_INT 2
14284: NEG
14285: PUSH
14286: LD_INT 3
14288: NEG
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PUSH
14294: LD_INT 2
14296: PUSH
14297: LD_INT 1
14299: NEG
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: PUSH
14305: LD_INT 3
14307: PUSH
14308: LD_INT 1
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PUSH
14315: LD_INT 1
14317: PUSH
14318: LD_INT 3
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 1
14327: NEG
14328: PUSH
14329: LD_INT 2
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: LD_INT 3
14338: NEG
14339: PUSH
14340: LD_INT 2
14342: NEG
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14373: LD_ADDR_VAR 0 30
14377: PUSH
14378: LD_INT 0
14380: PUSH
14381: LD_INT 0
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PUSH
14388: LD_INT 0
14390: PUSH
14391: LD_INT 1
14393: NEG
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 1
14401: PUSH
14402: LD_INT 0
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: LD_INT 1
14411: PUSH
14412: LD_INT 1
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: LD_INT 0
14421: PUSH
14422: LD_INT 1
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PUSH
14429: LD_INT 1
14431: NEG
14432: PUSH
14433: LD_INT 0
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: LD_INT 1
14442: NEG
14443: PUSH
14444: LD_INT 1
14446: NEG
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: LD_INT 1
14454: NEG
14455: PUSH
14456: LD_INT 2
14458: NEG
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: LD_INT 0
14466: PUSH
14467: LD_INT 2
14469: NEG
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PUSH
14475: LD_INT 1
14477: PUSH
14478: LD_INT 1
14480: NEG
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: PUSH
14486: LD_INT 2
14488: PUSH
14489: LD_INT 0
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: PUSH
14496: LD_INT 2
14498: PUSH
14499: LD_INT 1
14501: PUSH
14502: EMPTY
14503: LIST
14504: LIST
14505: PUSH
14506: LD_INT 2
14508: PUSH
14509: LD_INT 2
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: LD_INT 1
14518: PUSH
14519: LD_INT 2
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PUSH
14526: LD_INT 1
14528: NEG
14529: PUSH
14530: LD_INT 1
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PUSH
14537: LD_INT 2
14539: NEG
14540: PUSH
14541: LD_INT 0
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: PUSH
14548: LD_INT 2
14550: NEG
14551: PUSH
14552: LD_INT 1
14554: NEG
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: PUSH
14560: LD_INT 1
14562: NEG
14563: PUSH
14564: LD_INT 3
14566: NEG
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: PUSH
14572: LD_INT 1
14574: PUSH
14575: LD_INT 2
14577: NEG
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 3
14585: PUSH
14586: LD_INT 2
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: PUSH
14593: LD_INT 2
14595: PUSH
14596: LD_INT 3
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PUSH
14603: LD_INT 2
14605: NEG
14606: PUSH
14607: LD_INT 1
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: LD_INT 3
14616: NEG
14617: PUSH
14618: LD_INT 1
14620: NEG
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14651: LD_ADDR_VAR 0 31
14655: PUSH
14656: LD_INT 0
14658: PUSH
14659: LD_INT 0
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: PUSH
14666: LD_INT 0
14668: PUSH
14669: LD_INT 1
14671: NEG
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: PUSH
14677: LD_INT 1
14679: PUSH
14680: LD_INT 0
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 1
14689: PUSH
14690: LD_INT 1
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 0
14699: PUSH
14700: LD_INT 1
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: LD_INT 1
14709: NEG
14710: PUSH
14711: LD_INT 0
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: PUSH
14718: LD_INT 1
14720: NEG
14721: PUSH
14722: LD_INT 1
14724: NEG
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PUSH
14730: LD_INT 1
14732: NEG
14733: PUSH
14734: LD_INT 2
14736: NEG
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PUSH
14742: LD_INT 1
14744: PUSH
14745: LD_INT 1
14747: NEG
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: LD_INT 2
14755: PUSH
14756: LD_INT 0
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: LD_INT 2
14765: PUSH
14766: LD_INT 1
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PUSH
14773: LD_INT 2
14775: PUSH
14776: LD_INT 2
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PUSH
14783: LD_INT 1
14785: PUSH
14786: LD_INT 2
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: PUSH
14793: LD_INT 0
14795: PUSH
14796: LD_INT 2
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: PUSH
14803: LD_INT 1
14805: NEG
14806: PUSH
14807: LD_INT 1
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PUSH
14814: LD_INT 2
14816: NEG
14817: PUSH
14818: LD_INT 1
14820: NEG
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: LD_INT 2
14828: NEG
14829: PUSH
14830: LD_INT 2
14832: NEG
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PUSH
14838: LD_INT 2
14840: NEG
14841: PUSH
14842: LD_INT 3
14844: NEG
14845: PUSH
14846: EMPTY
14847: LIST
14848: LIST
14849: PUSH
14850: LD_INT 2
14852: PUSH
14853: LD_INT 1
14855: NEG
14856: PUSH
14857: EMPTY
14858: LIST
14859: LIST
14860: PUSH
14861: LD_INT 3
14863: PUSH
14864: LD_INT 1
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: LD_INT 1
14873: PUSH
14874: LD_INT 3
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: LD_INT 1
14883: NEG
14884: PUSH
14885: LD_INT 2
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PUSH
14892: LD_INT 3
14894: NEG
14895: PUSH
14896: LD_INT 2
14898: NEG
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14929: LD_ADDR_VAR 0 32
14933: PUSH
14934: LD_INT 0
14936: PUSH
14937: LD_INT 0
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PUSH
14944: LD_INT 0
14946: PUSH
14947: LD_INT 1
14949: NEG
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: LD_INT 1
14957: PUSH
14958: LD_INT 0
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: LD_INT 1
14967: PUSH
14968: LD_INT 1
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: PUSH
14975: LD_INT 0
14977: PUSH
14978: LD_INT 1
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PUSH
14985: LD_INT 1
14987: NEG
14988: PUSH
14989: LD_INT 0
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: LD_INT 1
14998: NEG
14999: PUSH
15000: LD_INT 1
15002: NEG
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PUSH
15008: LD_INT 1
15010: NEG
15011: PUSH
15012: LD_INT 2
15014: NEG
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: PUSH
15020: LD_INT 0
15022: PUSH
15023: LD_INT 2
15025: NEG
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: LD_INT 1
15033: PUSH
15034: LD_INT 1
15036: NEG
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: PUSH
15042: LD_INT 2
15044: PUSH
15045: LD_INT 1
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PUSH
15052: LD_INT 2
15054: PUSH
15055: LD_INT 2
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PUSH
15062: LD_INT 1
15064: PUSH
15065: LD_INT 2
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: PUSH
15072: LD_INT 0
15074: PUSH
15075: LD_INT 2
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: PUSH
15082: LD_INT 1
15084: NEG
15085: PUSH
15086: LD_INT 1
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: LD_INT 2
15095: NEG
15096: PUSH
15097: LD_INT 0
15099: PUSH
15100: EMPTY
15101: LIST
15102: LIST
15103: PUSH
15104: LD_INT 2
15106: NEG
15107: PUSH
15108: LD_INT 1
15110: NEG
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: PUSH
15116: LD_INT 1
15118: NEG
15119: PUSH
15120: LD_INT 3
15122: NEG
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 1
15130: PUSH
15131: LD_INT 2
15133: NEG
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: LD_INT 3
15141: PUSH
15142: LD_INT 2
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: LD_INT 2
15151: PUSH
15152: LD_INT 3
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PUSH
15159: LD_INT 2
15161: NEG
15162: PUSH
15163: LD_INT 1
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PUSH
15170: LD_INT 3
15172: NEG
15173: PUSH
15174: LD_INT 1
15176: NEG
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: PUSH
15182: EMPTY
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
15207: LD_ADDR_VAR 0 33
15211: PUSH
15212: LD_INT 0
15214: PUSH
15215: LD_INT 0
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: LD_INT 0
15224: PUSH
15225: LD_INT 1
15227: NEG
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: PUSH
15233: LD_INT 1
15235: PUSH
15236: LD_INT 0
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: PUSH
15243: LD_INT 1
15245: PUSH
15246: LD_INT 1
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: PUSH
15253: LD_INT 0
15255: PUSH
15256: LD_INT 1
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: PUSH
15263: LD_INT 1
15265: NEG
15266: PUSH
15267: LD_INT 0
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 1
15276: NEG
15277: PUSH
15278: LD_INT 1
15280: NEG
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: LD_INT 1
15288: NEG
15289: PUSH
15290: LD_INT 2
15292: NEG
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 1
15300: PUSH
15301: LD_INT 1
15303: NEG
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PUSH
15309: LD_INT 2
15311: PUSH
15312: LD_INT 0
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: LD_INT 2
15321: PUSH
15322: LD_INT 1
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: LD_INT 1
15331: PUSH
15332: LD_INT 2
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: LD_INT 0
15341: PUSH
15342: LD_INT 2
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: LD_INT 1
15351: NEG
15352: PUSH
15353: LD_INT 1
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PUSH
15360: LD_INT 2
15362: NEG
15363: PUSH
15364: LD_INT 0
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: LD_INT 2
15373: NEG
15374: PUSH
15375: LD_INT 1
15377: NEG
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: PUSH
15383: LD_INT 2
15385: NEG
15386: PUSH
15387: LD_INT 2
15389: NEG
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: PUSH
15395: LD_INT 2
15397: NEG
15398: PUSH
15399: LD_INT 3
15401: NEG
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PUSH
15407: LD_INT 2
15409: PUSH
15410: LD_INT 1
15412: NEG
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: LD_INT 3
15420: PUSH
15421: LD_INT 1
15423: PUSH
15424: EMPTY
15425: LIST
15426: LIST
15427: PUSH
15428: LD_INT 1
15430: PUSH
15431: LD_INT 3
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: PUSH
15438: LD_INT 1
15440: NEG
15441: PUSH
15442: LD_INT 2
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: LD_INT 3
15451: NEG
15452: PUSH
15453: LD_INT 2
15455: NEG
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
15486: LD_ADDR_VAR 0 34
15490: PUSH
15491: LD_INT 0
15493: PUSH
15494: LD_INT 0
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 0
15503: PUSH
15504: LD_INT 1
15506: NEG
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: PUSH
15512: LD_INT 1
15514: PUSH
15515: LD_INT 0
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: PUSH
15522: LD_INT 1
15524: PUSH
15525: LD_INT 1
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: LD_INT 0
15534: PUSH
15535: LD_INT 1
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 1
15544: NEG
15545: PUSH
15546: LD_INT 0
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PUSH
15553: LD_INT 1
15555: NEG
15556: PUSH
15557: LD_INT 1
15559: NEG
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 1
15567: NEG
15568: PUSH
15569: LD_INT 2
15571: NEG
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 0
15579: PUSH
15580: LD_INT 2
15582: NEG
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: LD_INT 1
15590: PUSH
15591: LD_INT 1
15593: NEG
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PUSH
15599: LD_INT 2
15601: PUSH
15602: LD_INT 1
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: PUSH
15609: LD_INT 2
15611: PUSH
15612: LD_INT 2
15614: PUSH
15615: EMPTY
15616: LIST
15617: LIST
15618: PUSH
15619: LD_INT 1
15621: PUSH
15622: LD_INT 2
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PUSH
15629: LD_INT 1
15631: NEG
15632: PUSH
15633: LD_INT 1
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 2
15642: NEG
15643: PUSH
15644: LD_INT 0
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 2
15653: NEG
15654: PUSH
15655: LD_INT 1
15657: NEG
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: PUSH
15663: LD_INT 2
15665: NEG
15666: PUSH
15667: LD_INT 2
15669: NEG
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: PUSH
15675: LD_INT 1
15677: NEG
15678: PUSH
15679: LD_INT 3
15681: NEG
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PUSH
15687: LD_INT 1
15689: PUSH
15690: LD_INT 2
15692: NEG
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: LD_INT 3
15700: PUSH
15701: LD_INT 2
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: LD_INT 2
15710: PUSH
15711: LD_INT 3
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PUSH
15718: LD_INT 2
15720: NEG
15721: PUSH
15722: LD_INT 1
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: LD_INT 3
15731: NEG
15732: PUSH
15733: LD_INT 1
15735: NEG
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
15766: LD_ADDR_VAR 0 35
15770: PUSH
15771: LD_INT 0
15773: PUSH
15774: LD_INT 0
15776: PUSH
15777: EMPTY
15778: LIST
15779: LIST
15780: PUSH
15781: LD_INT 0
15783: PUSH
15784: LD_INT 1
15786: NEG
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: PUSH
15792: LD_INT 1
15794: PUSH
15795: LD_INT 0
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: PUSH
15802: LD_INT 1
15804: PUSH
15805: LD_INT 1
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: LD_INT 0
15814: PUSH
15815: LD_INT 1
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 1
15824: NEG
15825: PUSH
15826: LD_INT 0
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 1
15835: NEG
15836: PUSH
15837: LD_INT 1
15839: NEG
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: PUSH
15845: LD_INT 2
15847: PUSH
15848: LD_INT 1
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PUSH
15855: LD_INT 2
15857: NEG
15858: PUSH
15859: LD_INT 1
15861: NEG
15862: PUSH
15863: EMPTY
15864: LIST
15865: LIST
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
15878: LD_ADDR_VAR 0 36
15882: PUSH
15883: LD_INT 0
15885: PUSH
15886: LD_INT 0
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PUSH
15893: LD_INT 0
15895: PUSH
15896: LD_INT 1
15898: NEG
15899: PUSH
15900: EMPTY
15901: LIST
15902: LIST
15903: PUSH
15904: LD_INT 1
15906: PUSH
15907: LD_INT 0
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 1
15916: PUSH
15917: LD_INT 1
15919: PUSH
15920: EMPTY
15921: LIST
15922: LIST
15923: PUSH
15924: LD_INT 0
15926: PUSH
15927: LD_INT 1
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PUSH
15934: LD_INT 1
15936: NEG
15937: PUSH
15938: LD_INT 0
15940: PUSH
15941: EMPTY
15942: LIST
15943: LIST
15944: PUSH
15945: LD_INT 1
15947: NEG
15948: PUSH
15949: LD_INT 1
15951: NEG
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 1
15959: NEG
15960: PUSH
15961: LD_INT 2
15963: NEG
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: LD_INT 1
15971: PUSH
15972: LD_INT 2
15974: PUSH
15975: EMPTY
15976: LIST
15977: LIST
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
15990: LD_ADDR_VAR 0 37
15994: PUSH
15995: LD_INT 0
15997: PUSH
15998: LD_INT 0
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: PUSH
16005: LD_INT 0
16007: PUSH
16008: LD_INT 1
16010: NEG
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PUSH
16016: LD_INT 1
16018: PUSH
16019: LD_INT 0
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PUSH
16026: LD_INT 1
16028: PUSH
16029: LD_INT 1
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: LD_INT 0
16038: PUSH
16039: LD_INT 1
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: LD_INT 1
16048: NEG
16049: PUSH
16050: LD_INT 0
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: LD_INT 1
16059: NEG
16060: PUSH
16061: LD_INT 1
16063: NEG
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: LD_INT 1
16071: PUSH
16072: LD_INT 1
16074: NEG
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 1
16082: NEG
16083: PUSH
16084: LD_INT 1
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
16102: LD_ADDR_VAR 0 38
16106: PUSH
16107: LD_INT 0
16109: PUSH
16110: LD_INT 0
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: LD_INT 0
16119: PUSH
16120: LD_INT 1
16122: NEG
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: PUSH
16128: LD_INT 1
16130: PUSH
16131: LD_INT 0
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PUSH
16138: LD_INT 1
16140: PUSH
16141: LD_INT 1
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 0
16150: PUSH
16151: LD_INT 1
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: LD_INT 1
16160: NEG
16161: PUSH
16162: LD_INT 0
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: LD_INT 1
16171: NEG
16172: PUSH
16173: LD_INT 1
16175: NEG
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: LD_INT 2
16183: PUSH
16184: LD_INT 1
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PUSH
16191: LD_INT 2
16193: NEG
16194: PUSH
16195: LD_INT 1
16197: NEG
16198: PUSH
16199: EMPTY
16200: LIST
16201: LIST
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
16214: LD_ADDR_VAR 0 39
16218: PUSH
16219: LD_INT 0
16221: PUSH
16222: LD_INT 0
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 0
16231: PUSH
16232: LD_INT 1
16234: NEG
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 1
16242: PUSH
16243: LD_INT 0
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 1
16252: PUSH
16253: LD_INT 1
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: LD_INT 0
16262: PUSH
16263: LD_INT 1
16265: PUSH
16266: EMPTY
16267: LIST
16268: LIST
16269: PUSH
16270: LD_INT 1
16272: NEG
16273: PUSH
16274: LD_INT 0
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PUSH
16281: LD_INT 1
16283: NEG
16284: PUSH
16285: LD_INT 1
16287: NEG
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: PUSH
16293: LD_INT 1
16295: NEG
16296: PUSH
16297: LD_INT 2
16299: NEG
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: LD_INT 1
16307: PUSH
16308: LD_INT 2
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: PUSH
16315: EMPTY
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
16326: LD_ADDR_VAR 0 40
16330: PUSH
16331: LD_INT 0
16333: PUSH
16334: LD_INT 0
16336: PUSH
16337: EMPTY
16338: LIST
16339: LIST
16340: PUSH
16341: LD_INT 0
16343: PUSH
16344: LD_INT 1
16346: NEG
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PUSH
16352: LD_INT 1
16354: PUSH
16355: LD_INT 0
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 1
16364: PUSH
16365: LD_INT 1
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: LD_INT 0
16374: PUSH
16375: LD_INT 1
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: PUSH
16382: LD_INT 1
16384: NEG
16385: PUSH
16386: LD_INT 0
16388: PUSH
16389: EMPTY
16390: LIST
16391: LIST
16392: PUSH
16393: LD_INT 1
16395: NEG
16396: PUSH
16397: LD_INT 1
16399: NEG
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: PUSH
16405: LD_INT 1
16407: PUSH
16408: LD_INT 1
16410: NEG
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: LD_INT 1
16418: NEG
16419: PUSH
16420: LD_INT 1
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16438: LD_ADDR_VAR 0 41
16442: PUSH
16443: LD_INT 0
16445: PUSH
16446: LD_INT 0
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 0
16455: PUSH
16456: LD_INT 1
16458: NEG
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: PUSH
16464: LD_INT 1
16466: PUSH
16467: LD_INT 0
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: LD_INT 1
16476: PUSH
16477: LD_INT 1
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: LD_INT 0
16486: PUSH
16487: LD_INT 1
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: LD_INT 1
16496: NEG
16497: PUSH
16498: LD_INT 0
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 1
16507: NEG
16508: PUSH
16509: LD_INT 1
16511: NEG
16512: PUSH
16513: EMPTY
16514: LIST
16515: LIST
16516: PUSH
16517: LD_INT 1
16519: NEG
16520: PUSH
16521: LD_INT 2
16523: NEG
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: PUSH
16529: LD_INT 1
16531: PUSH
16532: LD_INT 1
16534: NEG
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 2
16542: PUSH
16543: LD_INT 0
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 2
16552: PUSH
16553: LD_INT 1
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 2
16562: PUSH
16563: LD_INT 2
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: LD_INT 1
16572: PUSH
16573: LD_INT 2
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: PUSH
16580: LD_INT 1
16582: NEG
16583: PUSH
16584: LD_INT 1
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 2
16593: NEG
16594: PUSH
16595: LD_INT 0
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 2
16604: NEG
16605: PUSH
16606: LD_INT 1
16608: NEG
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PUSH
16614: LD_INT 2
16616: NEG
16617: PUSH
16618: LD_INT 2
16620: NEG
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: PUSH
16626: LD_INT 2
16628: NEG
16629: PUSH
16630: LD_INT 3
16632: NEG
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 2
16640: PUSH
16641: LD_INT 1
16643: NEG
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 3
16651: PUSH
16652: LD_INT 0
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PUSH
16659: LD_INT 3
16661: PUSH
16662: LD_INT 1
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: LD_INT 3
16671: PUSH
16672: LD_INT 2
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: PUSH
16679: LD_INT 3
16681: PUSH
16682: LD_INT 3
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 2
16691: PUSH
16692: LD_INT 3
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: PUSH
16699: LD_INT 2
16701: NEG
16702: PUSH
16703: LD_INT 1
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: LD_INT 3
16712: NEG
16713: PUSH
16714: LD_INT 0
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PUSH
16721: LD_INT 3
16723: NEG
16724: PUSH
16725: LD_INT 1
16727: NEG
16728: PUSH
16729: EMPTY
16730: LIST
16731: LIST
16732: PUSH
16733: LD_INT 3
16735: NEG
16736: PUSH
16737: LD_INT 2
16739: NEG
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PUSH
16745: LD_INT 3
16747: NEG
16748: PUSH
16749: LD_INT 3
16751: NEG
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16788: LD_ADDR_VAR 0 42
16792: PUSH
16793: LD_INT 0
16795: PUSH
16796: LD_INT 0
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 0
16805: PUSH
16806: LD_INT 1
16808: NEG
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 1
16816: PUSH
16817: LD_INT 0
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: LD_INT 1
16826: PUSH
16827: LD_INT 1
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PUSH
16834: LD_INT 0
16836: PUSH
16837: LD_INT 1
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: LD_INT 1
16846: NEG
16847: PUSH
16848: LD_INT 0
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PUSH
16855: LD_INT 1
16857: NEG
16858: PUSH
16859: LD_INT 1
16861: NEG
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 1
16869: NEG
16870: PUSH
16871: LD_INT 2
16873: NEG
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: LD_INT 0
16881: PUSH
16882: LD_INT 2
16884: NEG
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: LD_INT 1
16892: PUSH
16893: LD_INT 1
16895: NEG
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: LD_INT 2
16903: PUSH
16904: LD_INT 1
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: PUSH
16911: LD_INT 2
16913: PUSH
16914: LD_INT 2
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 1
16923: PUSH
16924: LD_INT 2
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 0
16933: PUSH
16934: LD_INT 2
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 1
16943: NEG
16944: PUSH
16945: LD_INT 1
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: LD_INT 2
16954: NEG
16955: PUSH
16956: LD_INT 1
16958: NEG
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: LD_INT 2
16966: NEG
16967: PUSH
16968: LD_INT 2
16970: NEG
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 2
16978: NEG
16979: PUSH
16980: LD_INT 3
16982: NEG
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 1
16990: NEG
16991: PUSH
16992: LD_INT 3
16994: NEG
16995: PUSH
16996: EMPTY
16997: LIST
16998: LIST
16999: PUSH
17000: LD_INT 0
17002: PUSH
17003: LD_INT 3
17005: NEG
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: LD_INT 1
17013: PUSH
17014: LD_INT 2
17016: NEG
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PUSH
17022: LD_INT 3
17024: PUSH
17025: LD_INT 2
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PUSH
17032: LD_INT 3
17034: PUSH
17035: LD_INT 3
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: PUSH
17042: LD_INT 2
17044: PUSH
17045: LD_INT 3
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: PUSH
17052: LD_INT 1
17054: PUSH
17055: LD_INT 3
17057: PUSH
17058: EMPTY
17059: LIST
17060: LIST
17061: PUSH
17062: LD_INT 0
17064: PUSH
17065: LD_INT 3
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: PUSH
17072: LD_INT 1
17074: NEG
17075: PUSH
17076: LD_INT 2
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: LD_INT 3
17085: NEG
17086: PUSH
17087: LD_INT 2
17089: NEG
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 3
17097: NEG
17098: PUSH
17099: LD_INT 3
17101: NEG
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17138: LD_ADDR_VAR 0 43
17142: PUSH
17143: LD_INT 0
17145: PUSH
17146: LD_INT 0
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PUSH
17153: LD_INT 0
17155: PUSH
17156: LD_INT 1
17158: NEG
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 1
17166: PUSH
17167: LD_INT 0
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 1
17176: PUSH
17177: LD_INT 1
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: LD_INT 0
17186: PUSH
17187: LD_INT 1
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: LD_INT 1
17196: NEG
17197: PUSH
17198: LD_INT 0
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: LD_INT 1
17207: NEG
17208: PUSH
17209: LD_INT 1
17211: NEG
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 1
17219: NEG
17220: PUSH
17221: LD_INT 2
17223: NEG
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PUSH
17229: LD_INT 0
17231: PUSH
17232: LD_INT 2
17234: NEG
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 1
17242: PUSH
17243: LD_INT 1
17245: NEG
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: LD_INT 2
17253: PUSH
17254: LD_INT 0
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 2
17263: PUSH
17264: LD_INT 1
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: PUSH
17271: LD_INT 1
17273: PUSH
17274: LD_INT 2
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: LD_INT 0
17283: PUSH
17284: LD_INT 2
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 1
17293: NEG
17294: PUSH
17295: LD_INT 1
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 2
17304: NEG
17305: PUSH
17306: LD_INT 0
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PUSH
17313: LD_INT 2
17315: NEG
17316: PUSH
17317: LD_INT 1
17319: NEG
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: LD_INT 1
17327: NEG
17328: PUSH
17329: LD_INT 3
17331: NEG
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 0
17339: PUSH
17340: LD_INT 3
17342: NEG
17343: PUSH
17344: EMPTY
17345: LIST
17346: LIST
17347: PUSH
17348: LD_INT 1
17350: PUSH
17351: LD_INT 2
17353: NEG
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 2
17361: PUSH
17362: LD_INT 1
17364: NEG
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 3
17372: PUSH
17373: LD_INT 0
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 3
17382: PUSH
17383: LD_INT 1
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: LD_INT 1
17392: PUSH
17393: LD_INT 3
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PUSH
17400: LD_INT 0
17402: PUSH
17403: LD_INT 3
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: PUSH
17410: LD_INT 1
17412: NEG
17413: PUSH
17414: LD_INT 2
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: LD_INT 2
17423: NEG
17424: PUSH
17425: LD_INT 1
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 3
17434: NEG
17435: PUSH
17436: LD_INT 0
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: LD_INT 3
17445: NEG
17446: PUSH
17447: LD_INT 1
17449: NEG
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17486: LD_ADDR_VAR 0 44
17490: PUSH
17491: LD_INT 0
17493: PUSH
17494: LD_INT 0
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PUSH
17501: LD_INT 0
17503: PUSH
17504: LD_INT 1
17506: NEG
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PUSH
17512: LD_INT 1
17514: PUSH
17515: LD_INT 0
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 1
17524: PUSH
17525: LD_INT 1
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 0
17534: PUSH
17535: LD_INT 1
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 1
17544: NEG
17545: PUSH
17546: LD_INT 0
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: LD_INT 1
17555: NEG
17556: PUSH
17557: LD_INT 1
17559: NEG
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: PUSH
17565: LD_INT 1
17567: NEG
17568: PUSH
17569: LD_INT 2
17571: NEG
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PUSH
17577: LD_INT 1
17579: PUSH
17580: LD_INT 1
17582: NEG
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 2
17590: PUSH
17591: LD_INT 0
17593: PUSH
17594: EMPTY
17595: LIST
17596: LIST
17597: PUSH
17598: LD_INT 2
17600: PUSH
17601: LD_INT 1
17603: PUSH
17604: EMPTY
17605: LIST
17606: LIST
17607: PUSH
17608: LD_INT 2
17610: PUSH
17611: LD_INT 2
17613: PUSH
17614: EMPTY
17615: LIST
17616: LIST
17617: PUSH
17618: LD_INT 1
17620: PUSH
17621: LD_INT 2
17623: PUSH
17624: EMPTY
17625: LIST
17626: LIST
17627: PUSH
17628: LD_INT 1
17630: NEG
17631: PUSH
17632: LD_INT 1
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: LD_INT 2
17641: NEG
17642: PUSH
17643: LD_INT 0
17645: PUSH
17646: EMPTY
17647: LIST
17648: LIST
17649: PUSH
17650: LD_INT 2
17652: NEG
17653: PUSH
17654: LD_INT 1
17656: NEG
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: LD_INT 2
17664: NEG
17665: PUSH
17666: LD_INT 2
17668: NEG
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PUSH
17674: LD_INT 2
17676: NEG
17677: PUSH
17678: LD_INT 3
17680: NEG
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: LD_INT 2
17688: PUSH
17689: LD_INT 1
17691: NEG
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 3
17699: PUSH
17700: LD_INT 0
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: LD_INT 3
17709: PUSH
17710: LD_INT 1
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 3
17719: PUSH
17720: LD_INT 2
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 3
17729: PUSH
17730: LD_INT 3
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 2
17739: PUSH
17740: LD_INT 3
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 2
17749: NEG
17750: PUSH
17751: LD_INT 1
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 3
17760: NEG
17761: PUSH
17762: LD_INT 0
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 3
17771: NEG
17772: PUSH
17773: LD_INT 1
17775: NEG
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 3
17783: NEG
17784: PUSH
17785: LD_INT 2
17787: NEG
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: PUSH
17793: LD_INT 3
17795: NEG
17796: PUSH
17797: LD_INT 3
17799: NEG
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17836: LD_ADDR_VAR 0 45
17840: PUSH
17841: LD_INT 0
17843: PUSH
17844: LD_INT 0
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 0
17853: PUSH
17854: LD_INT 1
17856: NEG
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PUSH
17862: LD_INT 1
17864: PUSH
17865: LD_INT 0
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: PUSH
17872: LD_INT 1
17874: PUSH
17875: LD_INT 1
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 0
17884: PUSH
17885: LD_INT 1
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PUSH
17892: LD_INT 1
17894: NEG
17895: PUSH
17896: LD_INT 0
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PUSH
17903: LD_INT 1
17905: NEG
17906: PUSH
17907: LD_INT 1
17909: NEG
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 1
17917: NEG
17918: PUSH
17919: LD_INT 2
17921: NEG
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 0
17929: PUSH
17930: LD_INT 2
17932: NEG
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 1
17940: PUSH
17941: LD_INT 1
17943: NEG
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 2
17951: PUSH
17952: LD_INT 1
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: LD_INT 2
17961: PUSH
17962: LD_INT 2
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 1
17971: PUSH
17972: LD_INT 2
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 0
17981: PUSH
17982: LD_INT 2
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 1
17991: NEG
17992: PUSH
17993: LD_INT 1
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: LD_INT 2
18002: NEG
18003: PUSH
18004: LD_INT 1
18006: NEG
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: LD_INT 2
18014: NEG
18015: PUSH
18016: LD_INT 2
18018: NEG
18019: PUSH
18020: EMPTY
18021: LIST
18022: LIST
18023: PUSH
18024: LD_INT 2
18026: NEG
18027: PUSH
18028: LD_INT 3
18030: NEG
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PUSH
18036: LD_INT 1
18038: NEG
18039: PUSH
18040: LD_INT 3
18042: NEG
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 0
18050: PUSH
18051: LD_INT 3
18053: NEG
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 1
18061: PUSH
18062: LD_INT 2
18064: NEG
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 3
18072: PUSH
18073: LD_INT 2
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: LD_INT 3
18082: PUSH
18083: LD_INT 3
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: LD_INT 2
18092: PUSH
18093: LD_INT 3
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: PUSH
18100: LD_INT 1
18102: PUSH
18103: LD_INT 3
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 0
18112: PUSH
18113: LD_INT 3
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: LD_INT 1
18122: NEG
18123: PUSH
18124: LD_INT 2
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 3
18133: NEG
18134: PUSH
18135: LD_INT 2
18137: NEG
18138: PUSH
18139: EMPTY
18140: LIST
18141: LIST
18142: PUSH
18143: LD_INT 3
18145: NEG
18146: PUSH
18147: LD_INT 3
18149: NEG
18150: PUSH
18151: EMPTY
18152: LIST
18153: LIST
18154: PUSH
18155: EMPTY
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18186: LD_ADDR_VAR 0 46
18190: PUSH
18191: LD_INT 0
18193: PUSH
18194: LD_INT 0
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 0
18203: PUSH
18204: LD_INT 1
18206: NEG
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: LD_INT 1
18214: PUSH
18215: LD_INT 0
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: PUSH
18222: LD_INT 1
18224: PUSH
18225: LD_INT 1
18227: PUSH
18228: EMPTY
18229: LIST
18230: LIST
18231: PUSH
18232: LD_INT 0
18234: PUSH
18235: LD_INT 1
18237: PUSH
18238: EMPTY
18239: LIST
18240: LIST
18241: PUSH
18242: LD_INT 1
18244: NEG
18245: PUSH
18246: LD_INT 0
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 1
18255: NEG
18256: PUSH
18257: LD_INT 1
18259: NEG
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: LD_INT 1
18267: NEG
18268: PUSH
18269: LD_INT 2
18271: NEG
18272: PUSH
18273: EMPTY
18274: LIST
18275: LIST
18276: PUSH
18277: LD_INT 0
18279: PUSH
18280: LD_INT 2
18282: NEG
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 1
18290: PUSH
18291: LD_INT 1
18293: NEG
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 2
18301: PUSH
18302: LD_INT 0
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 2
18311: PUSH
18312: LD_INT 1
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: LD_INT 1
18321: PUSH
18322: LD_INT 2
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PUSH
18329: LD_INT 0
18331: PUSH
18332: LD_INT 2
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: LD_INT 1
18341: NEG
18342: PUSH
18343: LD_INT 1
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: LD_INT 2
18352: NEG
18353: PUSH
18354: LD_INT 0
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 2
18363: NEG
18364: PUSH
18365: LD_INT 1
18367: NEG
18368: PUSH
18369: EMPTY
18370: LIST
18371: LIST
18372: PUSH
18373: LD_INT 1
18375: NEG
18376: PUSH
18377: LD_INT 3
18379: NEG
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: LD_INT 0
18387: PUSH
18388: LD_INT 3
18390: NEG
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: LD_INT 1
18398: PUSH
18399: LD_INT 2
18401: NEG
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: LD_INT 2
18409: PUSH
18410: LD_INT 1
18412: NEG
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 3
18420: PUSH
18421: LD_INT 0
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 3
18430: PUSH
18431: LD_INT 1
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PUSH
18438: LD_INT 1
18440: PUSH
18441: LD_INT 3
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: PUSH
18448: LD_INT 0
18450: PUSH
18451: LD_INT 3
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: PUSH
18458: LD_INT 1
18460: NEG
18461: PUSH
18462: LD_INT 2
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 2
18471: NEG
18472: PUSH
18473: LD_INT 1
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PUSH
18480: LD_INT 3
18482: NEG
18483: PUSH
18484: LD_INT 0
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: LD_INT 3
18493: NEG
18494: PUSH
18495: LD_INT 1
18497: NEG
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18534: LD_ADDR_VAR 0 47
18538: PUSH
18539: LD_INT 0
18541: PUSH
18542: LD_INT 0
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PUSH
18549: LD_INT 0
18551: PUSH
18552: LD_INT 1
18554: NEG
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 1
18562: PUSH
18563: LD_INT 0
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: LD_INT 1
18572: PUSH
18573: LD_INT 1
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PUSH
18580: LD_INT 0
18582: PUSH
18583: LD_INT 1
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 1
18592: NEG
18593: PUSH
18594: LD_INT 0
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 1
18603: NEG
18604: PUSH
18605: LD_INT 1
18607: NEG
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: LD_INT 1
18615: NEG
18616: PUSH
18617: LD_INT 2
18619: NEG
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 0
18627: PUSH
18628: LD_INT 2
18630: NEG
18631: PUSH
18632: EMPTY
18633: LIST
18634: LIST
18635: PUSH
18636: LD_INT 1
18638: PUSH
18639: LD_INT 1
18641: NEG
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PUSH
18647: LD_INT 2
18649: NEG
18650: PUSH
18651: LD_INT 1
18653: NEG
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 2
18661: NEG
18662: PUSH
18663: LD_INT 2
18665: NEG
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: LIST
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
18685: LD_ADDR_VAR 0 48
18689: PUSH
18690: LD_INT 0
18692: PUSH
18693: LD_INT 0
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 0
18702: PUSH
18703: LD_INT 1
18705: NEG
18706: PUSH
18707: EMPTY
18708: LIST
18709: LIST
18710: PUSH
18711: LD_INT 1
18713: PUSH
18714: LD_INT 0
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 1
18723: PUSH
18724: LD_INT 1
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 0
18733: PUSH
18734: LD_INT 1
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 1
18743: NEG
18744: PUSH
18745: LD_INT 0
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 1
18754: NEG
18755: PUSH
18756: LD_INT 1
18758: NEG
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 1
18766: NEG
18767: PUSH
18768: LD_INT 2
18770: NEG
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 0
18778: PUSH
18779: LD_INT 2
18781: NEG
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 1
18789: PUSH
18790: LD_INT 1
18792: NEG
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 2
18800: PUSH
18801: LD_INT 0
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 2
18810: PUSH
18811: LD_INT 1
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
18832: LD_ADDR_VAR 0 49
18836: PUSH
18837: LD_INT 0
18839: PUSH
18840: LD_INT 0
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 0
18849: PUSH
18850: LD_INT 1
18852: NEG
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 1
18860: PUSH
18861: LD_INT 0
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 1
18870: PUSH
18871: LD_INT 1
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 0
18880: PUSH
18881: LD_INT 1
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 1
18890: NEG
18891: PUSH
18892: LD_INT 0
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 1
18901: NEG
18902: PUSH
18903: LD_INT 1
18905: NEG
18906: PUSH
18907: EMPTY
18908: LIST
18909: LIST
18910: PUSH
18911: LD_INT 1
18913: PUSH
18914: LD_INT 1
18916: NEG
18917: PUSH
18918: EMPTY
18919: LIST
18920: LIST
18921: PUSH
18922: LD_INT 2
18924: PUSH
18925: LD_INT 0
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: PUSH
18932: LD_INT 2
18934: PUSH
18935: LD_INT 1
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 2
18944: PUSH
18945: LD_INT 2
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 1
18954: PUSH
18955: LD_INT 2
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
18976: LD_ADDR_VAR 0 50
18980: PUSH
18981: LD_INT 0
18983: PUSH
18984: LD_INT 0
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 0
18993: PUSH
18994: LD_INT 1
18996: NEG
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: LD_INT 1
19004: PUSH
19005: LD_INT 0
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 1
19014: PUSH
19015: LD_INT 1
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 0
19024: PUSH
19025: LD_INT 1
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PUSH
19032: LD_INT 1
19034: NEG
19035: PUSH
19036: LD_INT 0
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 1
19045: NEG
19046: PUSH
19047: LD_INT 1
19049: NEG
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 2
19057: PUSH
19058: LD_INT 1
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 2
19067: PUSH
19068: LD_INT 2
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 1
19077: PUSH
19078: LD_INT 2
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 0
19087: PUSH
19088: LD_INT 2
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: LD_INT 1
19097: NEG
19098: PUSH
19099: LD_INT 1
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: EMPTY
19107: LIST
19108: LIST
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
19120: LD_ADDR_VAR 0 51
19124: PUSH
19125: LD_INT 0
19127: PUSH
19128: LD_INT 0
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 0
19137: PUSH
19138: LD_INT 1
19140: NEG
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 1
19148: PUSH
19149: LD_INT 0
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: LD_INT 1
19158: PUSH
19159: LD_INT 1
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: LD_INT 0
19168: PUSH
19169: LD_INT 1
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 1
19178: NEG
19179: PUSH
19180: LD_INT 0
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 1
19189: NEG
19190: PUSH
19191: LD_INT 1
19193: NEG
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: LD_INT 1
19201: PUSH
19202: LD_INT 2
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 0
19211: PUSH
19212: LD_INT 2
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 1
19221: NEG
19222: PUSH
19223: LD_INT 1
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 2
19232: NEG
19233: PUSH
19234: LD_INT 0
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 2
19243: NEG
19244: PUSH
19245: LD_INT 1
19247: NEG
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: LIST
19265: LIST
19266: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19267: LD_ADDR_VAR 0 52
19271: PUSH
19272: LD_INT 0
19274: PUSH
19275: LD_INT 0
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 0
19284: PUSH
19285: LD_INT 1
19287: NEG
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 1
19295: PUSH
19296: LD_INT 0
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 1
19305: PUSH
19306: LD_INT 1
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 0
19315: PUSH
19316: LD_INT 1
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 1
19325: NEG
19326: PUSH
19327: LD_INT 0
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 1
19336: NEG
19337: PUSH
19338: LD_INT 1
19340: NEG
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 1
19348: NEG
19349: PUSH
19350: LD_INT 2
19352: NEG
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 1
19360: NEG
19361: PUSH
19362: LD_INT 1
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 2
19371: NEG
19372: PUSH
19373: LD_INT 0
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 2
19382: NEG
19383: PUSH
19384: LD_INT 1
19386: NEG
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PUSH
19392: LD_INT 2
19394: NEG
19395: PUSH
19396: LD_INT 2
19398: NEG
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: LIST
19417: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19418: LD_ADDR_VAR 0 53
19422: PUSH
19423: LD_INT 0
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 0
19435: PUSH
19436: LD_INT 1
19438: NEG
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: LD_INT 1
19446: PUSH
19447: LD_INT 0
19449: PUSH
19450: EMPTY
19451: LIST
19452: LIST
19453: PUSH
19454: LD_INT 1
19456: PUSH
19457: LD_INT 1
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 0
19466: PUSH
19467: LD_INT 1
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: LD_INT 1
19476: NEG
19477: PUSH
19478: LD_INT 0
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 1
19487: NEG
19488: PUSH
19489: LD_INT 1
19491: NEG
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 1
19499: NEG
19500: PUSH
19501: LD_INT 2
19503: NEG
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 0
19511: PUSH
19512: LD_INT 2
19514: NEG
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 1
19522: PUSH
19523: LD_INT 1
19525: NEG
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 2
19533: PUSH
19534: LD_INT 0
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 2
19543: PUSH
19544: LD_INT 1
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 2
19553: PUSH
19554: LD_INT 2
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 1
19563: PUSH
19564: LD_INT 2
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 0
19573: PUSH
19574: LD_INT 2
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 1
19583: NEG
19584: PUSH
19585: LD_INT 1
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 2
19594: NEG
19595: PUSH
19596: LD_INT 0
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: LD_INT 2
19605: NEG
19606: PUSH
19607: LD_INT 1
19609: NEG
19610: PUSH
19611: EMPTY
19612: LIST
19613: LIST
19614: PUSH
19615: LD_INT 2
19617: NEG
19618: PUSH
19619: LD_INT 2
19621: NEG
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19648: LD_ADDR_VAR 0 54
19652: PUSH
19653: LD_INT 0
19655: PUSH
19656: LD_INT 0
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 0
19665: PUSH
19666: LD_INT 1
19668: NEG
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 1
19676: PUSH
19677: LD_INT 0
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 1
19686: PUSH
19687: LD_INT 1
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 0
19696: PUSH
19697: LD_INT 1
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: LD_INT 1
19706: NEG
19707: PUSH
19708: LD_INT 0
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 1
19717: NEG
19718: PUSH
19719: LD_INT 1
19721: NEG
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 1
19729: NEG
19730: PUSH
19731: LD_INT 2
19733: NEG
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 0
19741: PUSH
19742: LD_INT 2
19744: NEG
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 1
19752: PUSH
19753: LD_INT 1
19755: NEG
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: LD_INT 2
19763: PUSH
19764: LD_INT 0
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 2
19773: PUSH
19774: LD_INT 1
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 2
19783: PUSH
19784: LD_INT 2
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 1
19793: PUSH
19794: LD_INT 2
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PUSH
19801: LD_INT 0
19803: PUSH
19804: LD_INT 2
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PUSH
19811: LD_INT 1
19813: NEG
19814: PUSH
19815: LD_INT 1
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: LD_INT 2
19824: NEG
19825: PUSH
19826: LD_INT 0
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PUSH
19833: LD_INT 2
19835: NEG
19836: PUSH
19837: LD_INT 1
19839: NEG
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: PUSH
19845: LD_INT 2
19847: NEG
19848: PUSH
19849: LD_INT 2
19851: NEG
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: LIST
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19878: LD_ADDR_VAR 0 55
19882: PUSH
19883: LD_INT 0
19885: PUSH
19886: LD_INT 0
19888: PUSH
19889: EMPTY
19890: LIST
19891: LIST
19892: PUSH
19893: LD_INT 0
19895: PUSH
19896: LD_INT 1
19898: NEG
19899: PUSH
19900: EMPTY
19901: LIST
19902: LIST
19903: PUSH
19904: LD_INT 1
19906: PUSH
19907: LD_INT 0
19909: PUSH
19910: EMPTY
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 1
19916: PUSH
19917: LD_INT 1
19919: PUSH
19920: EMPTY
19921: LIST
19922: LIST
19923: PUSH
19924: LD_INT 0
19926: PUSH
19927: LD_INT 1
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: PUSH
19934: LD_INT 1
19936: NEG
19937: PUSH
19938: LD_INT 0
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 1
19947: NEG
19948: PUSH
19949: LD_INT 1
19951: NEG
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: PUSH
19957: LD_INT 1
19959: NEG
19960: PUSH
19961: LD_INT 2
19963: NEG
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: PUSH
19969: LD_INT 0
19971: PUSH
19972: LD_INT 2
19974: NEG
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 1
19982: PUSH
19983: LD_INT 1
19985: NEG
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 2
19993: PUSH
19994: LD_INT 0
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 2
20003: PUSH
20004: LD_INT 1
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 2
20013: PUSH
20014: LD_INT 2
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: LD_INT 1
20023: PUSH
20024: LD_INT 2
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 0
20033: PUSH
20034: LD_INT 2
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 1
20043: NEG
20044: PUSH
20045: LD_INT 1
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 2
20054: NEG
20055: PUSH
20056: LD_INT 0
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: LD_INT 2
20065: NEG
20066: PUSH
20067: LD_INT 1
20069: NEG
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: LD_INT 2
20077: NEG
20078: PUSH
20079: LD_INT 2
20081: NEG
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: LIST
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20108: LD_ADDR_VAR 0 56
20112: PUSH
20113: LD_INT 0
20115: PUSH
20116: LD_INT 0
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 0
20125: PUSH
20126: LD_INT 1
20128: NEG
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 1
20136: PUSH
20137: LD_INT 0
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 1
20146: PUSH
20147: LD_INT 1
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 0
20156: PUSH
20157: LD_INT 1
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: PUSH
20164: LD_INT 1
20166: NEG
20167: PUSH
20168: LD_INT 0
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: LD_INT 1
20177: NEG
20178: PUSH
20179: LD_INT 1
20181: NEG
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 1
20189: NEG
20190: PUSH
20191: LD_INT 2
20193: NEG
20194: PUSH
20195: EMPTY
20196: LIST
20197: LIST
20198: PUSH
20199: LD_INT 0
20201: PUSH
20202: LD_INT 2
20204: NEG
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 1
20212: PUSH
20213: LD_INT 1
20215: NEG
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: PUSH
20221: LD_INT 2
20223: PUSH
20224: LD_INT 0
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 2
20233: PUSH
20234: LD_INT 1
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 2
20243: PUSH
20244: LD_INT 2
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 1
20253: PUSH
20254: LD_INT 2
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 0
20263: PUSH
20264: LD_INT 2
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 1
20273: NEG
20274: PUSH
20275: LD_INT 1
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 2
20284: NEG
20285: PUSH
20286: LD_INT 0
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 2
20295: NEG
20296: PUSH
20297: LD_INT 1
20299: NEG
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 2
20307: NEG
20308: PUSH
20309: LD_INT 2
20311: NEG
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: EMPTY
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20338: LD_ADDR_VAR 0 57
20342: PUSH
20343: LD_INT 0
20345: PUSH
20346: LD_INT 0
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PUSH
20353: LD_INT 0
20355: PUSH
20356: LD_INT 1
20358: NEG
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 1
20366: PUSH
20367: LD_INT 0
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: LD_INT 1
20376: PUSH
20377: LD_INT 1
20379: PUSH
20380: EMPTY
20381: LIST
20382: LIST
20383: PUSH
20384: LD_INT 0
20386: PUSH
20387: LD_INT 1
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: PUSH
20394: LD_INT 1
20396: NEG
20397: PUSH
20398: LD_INT 0
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: LD_INT 1
20407: NEG
20408: PUSH
20409: LD_INT 1
20411: NEG
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: PUSH
20417: LD_INT 1
20419: NEG
20420: PUSH
20421: LD_INT 2
20423: NEG
20424: PUSH
20425: EMPTY
20426: LIST
20427: LIST
20428: PUSH
20429: LD_INT 0
20431: PUSH
20432: LD_INT 2
20434: NEG
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: PUSH
20440: LD_INT 1
20442: PUSH
20443: LD_INT 1
20445: NEG
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: LD_INT 2
20453: PUSH
20454: LD_INT 0
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PUSH
20461: LD_INT 2
20463: PUSH
20464: LD_INT 1
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PUSH
20471: LD_INT 2
20473: PUSH
20474: LD_INT 2
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 1
20483: PUSH
20484: LD_INT 2
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: LD_INT 0
20493: PUSH
20494: LD_INT 2
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: LD_INT 1
20503: NEG
20504: PUSH
20505: LD_INT 1
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PUSH
20512: LD_INT 2
20514: NEG
20515: PUSH
20516: LD_INT 0
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: LD_INT 2
20525: NEG
20526: PUSH
20527: LD_INT 1
20529: NEG
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 2
20537: NEG
20538: PUSH
20539: LD_INT 2
20541: NEG
20542: PUSH
20543: EMPTY
20544: LIST
20545: LIST
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20568: LD_ADDR_VAR 0 58
20572: PUSH
20573: LD_INT 0
20575: PUSH
20576: LD_INT 0
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: LD_INT 0
20585: PUSH
20586: LD_INT 1
20588: NEG
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: PUSH
20594: LD_INT 1
20596: PUSH
20597: LD_INT 0
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 1
20606: PUSH
20607: LD_INT 1
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: LD_INT 0
20616: PUSH
20617: LD_INT 1
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PUSH
20624: LD_INT 1
20626: NEG
20627: PUSH
20628: LD_INT 0
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: LD_INT 1
20637: NEG
20638: PUSH
20639: LD_INT 1
20641: NEG
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: LD_INT 1
20649: NEG
20650: PUSH
20651: LD_INT 2
20653: NEG
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: LD_INT 0
20661: PUSH
20662: LD_INT 2
20664: NEG
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: LD_INT 1
20672: PUSH
20673: LD_INT 1
20675: NEG
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 2
20683: PUSH
20684: LD_INT 0
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: LD_INT 2
20693: PUSH
20694: LD_INT 1
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 2
20703: PUSH
20704: LD_INT 2
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 1
20713: PUSH
20714: LD_INT 2
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 0
20723: PUSH
20724: LD_INT 2
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: LD_INT 1
20733: NEG
20734: PUSH
20735: LD_INT 1
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PUSH
20742: LD_INT 2
20744: NEG
20745: PUSH
20746: LD_INT 0
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 2
20755: NEG
20756: PUSH
20757: LD_INT 1
20759: NEG
20760: PUSH
20761: EMPTY
20762: LIST
20763: LIST
20764: PUSH
20765: LD_INT 2
20767: NEG
20768: PUSH
20769: LD_INT 2
20771: NEG
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: LIST
20787: LIST
20788: LIST
20789: LIST
20790: LIST
20791: LIST
20792: LIST
20793: LIST
20794: LIST
20795: LIST
20796: LIST
20797: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20798: LD_ADDR_VAR 0 59
20802: PUSH
20803: LD_INT 0
20805: PUSH
20806: LD_INT 0
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 0
20815: PUSH
20816: LD_INT 1
20818: NEG
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 1
20826: PUSH
20827: LD_INT 0
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: LD_INT 1
20836: PUSH
20837: LD_INT 1
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: LD_INT 0
20846: PUSH
20847: LD_INT 1
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 1
20856: NEG
20857: PUSH
20858: LD_INT 0
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 1
20867: NEG
20868: PUSH
20869: LD_INT 1
20871: NEG
20872: PUSH
20873: EMPTY
20874: LIST
20875: LIST
20876: PUSH
20877: EMPTY
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20886: LD_ADDR_VAR 0 60
20890: PUSH
20891: LD_INT 0
20893: PUSH
20894: LD_INT 0
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 0
20903: PUSH
20904: LD_INT 1
20906: NEG
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: LD_INT 1
20914: PUSH
20915: LD_INT 0
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PUSH
20922: LD_INT 1
20924: PUSH
20925: LD_INT 1
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 0
20934: PUSH
20935: LD_INT 1
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: LD_INT 1
20944: NEG
20945: PUSH
20946: LD_INT 0
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 1
20955: NEG
20956: PUSH
20957: LD_INT 1
20959: NEG
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20974: LD_ADDR_VAR 0 61
20978: PUSH
20979: LD_INT 0
20981: PUSH
20982: LD_INT 0
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: PUSH
20989: LD_INT 0
20991: PUSH
20992: LD_INT 1
20994: NEG
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 1
21002: PUSH
21003: LD_INT 0
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: LD_INT 1
21012: PUSH
21013: LD_INT 1
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 0
21022: PUSH
21023: LD_INT 1
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 1
21032: NEG
21033: PUSH
21034: LD_INT 0
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 1
21043: NEG
21044: PUSH
21045: LD_INT 1
21047: NEG
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: LIST
21059: LIST
21060: LIST
21061: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21062: LD_ADDR_VAR 0 62
21066: PUSH
21067: LD_INT 0
21069: PUSH
21070: LD_INT 0
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: LD_INT 0
21079: PUSH
21080: LD_INT 1
21082: NEG
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 1
21090: PUSH
21091: LD_INT 0
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: LD_INT 1
21100: PUSH
21101: LD_INT 1
21103: PUSH
21104: EMPTY
21105: LIST
21106: LIST
21107: PUSH
21108: LD_INT 0
21110: PUSH
21111: LD_INT 1
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: PUSH
21118: LD_INT 1
21120: NEG
21121: PUSH
21122: LD_INT 0
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: LD_INT 1
21131: NEG
21132: PUSH
21133: LD_INT 1
21135: NEG
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21150: LD_ADDR_VAR 0 63
21154: PUSH
21155: LD_INT 0
21157: PUSH
21158: LD_INT 0
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 0
21167: PUSH
21168: LD_INT 1
21170: NEG
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: LD_INT 1
21178: PUSH
21179: LD_INT 0
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: PUSH
21186: LD_INT 1
21188: PUSH
21189: LD_INT 1
21191: PUSH
21192: EMPTY
21193: LIST
21194: LIST
21195: PUSH
21196: LD_INT 0
21198: PUSH
21199: LD_INT 1
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 1
21208: NEG
21209: PUSH
21210: LD_INT 0
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: PUSH
21217: LD_INT 1
21219: NEG
21220: PUSH
21221: LD_INT 1
21223: NEG
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21238: LD_ADDR_VAR 0 64
21242: PUSH
21243: LD_INT 0
21245: PUSH
21246: LD_INT 0
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: PUSH
21253: LD_INT 0
21255: PUSH
21256: LD_INT 1
21258: NEG
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: LD_INT 1
21266: PUSH
21267: LD_INT 0
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 1
21276: PUSH
21277: LD_INT 1
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 0
21286: PUSH
21287: LD_INT 1
21289: PUSH
21290: EMPTY
21291: LIST
21292: LIST
21293: PUSH
21294: LD_INT 1
21296: NEG
21297: PUSH
21298: LD_INT 0
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: LD_INT 1
21307: NEG
21308: PUSH
21309: LD_INT 1
21311: NEG
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: EMPTY
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: ST_TO_ADDR
// end ; 1 :
21326: GO 27223
21328: LD_INT 1
21330: DOUBLE
21331: EQUAL
21332: IFTRUE 21336
21334: GO 23959
21336: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21337: LD_ADDR_VAR 0 11
21341: PUSH
21342: LD_INT 1
21344: NEG
21345: PUSH
21346: LD_INT 3
21348: NEG
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 0
21356: PUSH
21357: LD_INT 3
21359: NEG
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: LD_INT 1
21367: PUSH
21368: LD_INT 2
21370: NEG
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: LIST
21380: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21381: LD_ADDR_VAR 0 12
21385: PUSH
21386: LD_INT 2
21388: PUSH
21389: LD_INT 1
21391: NEG
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: LD_INT 3
21399: PUSH
21400: LD_INT 0
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PUSH
21407: LD_INT 3
21409: PUSH
21410: LD_INT 1
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: LIST
21421: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21422: LD_ADDR_VAR 0 13
21426: PUSH
21427: LD_INT 3
21429: PUSH
21430: LD_INT 2
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 3
21439: PUSH
21440: LD_INT 3
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 2
21449: PUSH
21450: LD_INT 3
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: LIST
21461: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21462: LD_ADDR_VAR 0 14
21466: PUSH
21467: LD_INT 1
21469: PUSH
21470: LD_INT 3
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 0
21479: PUSH
21480: LD_INT 3
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: LD_INT 1
21489: NEG
21490: PUSH
21491: LD_INT 2
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: LIST
21502: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21503: LD_ADDR_VAR 0 15
21507: PUSH
21508: LD_INT 2
21510: NEG
21511: PUSH
21512: LD_INT 1
21514: PUSH
21515: EMPTY
21516: LIST
21517: LIST
21518: PUSH
21519: LD_INT 3
21521: NEG
21522: PUSH
21523: LD_INT 0
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: PUSH
21530: LD_INT 3
21532: NEG
21533: PUSH
21534: LD_INT 1
21536: NEG
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: LIST
21546: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21547: LD_ADDR_VAR 0 16
21551: PUSH
21552: LD_INT 2
21554: NEG
21555: PUSH
21556: LD_INT 3
21558: NEG
21559: PUSH
21560: EMPTY
21561: LIST
21562: LIST
21563: PUSH
21564: LD_INT 3
21566: NEG
21567: PUSH
21568: LD_INT 2
21570: NEG
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PUSH
21576: LD_INT 3
21578: NEG
21579: PUSH
21580: LD_INT 3
21582: NEG
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: LIST
21592: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21593: LD_ADDR_VAR 0 17
21597: PUSH
21598: LD_INT 1
21600: NEG
21601: PUSH
21602: LD_INT 3
21604: NEG
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: PUSH
21610: LD_INT 0
21612: PUSH
21613: LD_INT 3
21615: NEG
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 1
21623: PUSH
21624: LD_INT 2
21626: NEG
21627: PUSH
21628: EMPTY
21629: LIST
21630: LIST
21631: PUSH
21632: EMPTY
21633: LIST
21634: LIST
21635: LIST
21636: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21637: LD_ADDR_VAR 0 18
21641: PUSH
21642: LD_INT 2
21644: PUSH
21645: LD_INT 1
21647: NEG
21648: PUSH
21649: EMPTY
21650: LIST
21651: LIST
21652: PUSH
21653: LD_INT 3
21655: PUSH
21656: LD_INT 0
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: PUSH
21663: LD_INT 3
21665: PUSH
21666: LD_INT 1
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PUSH
21673: EMPTY
21674: LIST
21675: LIST
21676: LIST
21677: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21678: LD_ADDR_VAR 0 19
21682: PUSH
21683: LD_INT 3
21685: PUSH
21686: LD_INT 2
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PUSH
21693: LD_INT 3
21695: PUSH
21696: LD_INT 3
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 2
21705: PUSH
21706: LD_INT 3
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: PUSH
21713: EMPTY
21714: LIST
21715: LIST
21716: LIST
21717: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21718: LD_ADDR_VAR 0 20
21722: PUSH
21723: LD_INT 1
21725: PUSH
21726: LD_INT 3
21728: PUSH
21729: EMPTY
21730: LIST
21731: LIST
21732: PUSH
21733: LD_INT 0
21735: PUSH
21736: LD_INT 3
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PUSH
21743: LD_INT 1
21745: NEG
21746: PUSH
21747: LD_INT 2
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: LIST
21758: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21759: LD_ADDR_VAR 0 21
21763: PUSH
21764: LD_INT 2
21766: NEG
21767: PUSH
21768: LD_INT 1
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: LD_INT 3
21777: NEG
21778: PUSH
21779: LD_INT 0
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 3
21788: NEG
21789: PUSH
21790: LD_INT 1
21792: NEG
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: LIST
21802: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21803: LD_ADDR_VAR 0 22
21807: PUSH
21808: LD_INT 2
21810: NEG
21811: PUSH
21812: LD_INT 3
21814: NEG
21815: PUSH
21816: EMPTY
21817: LIST
21818: LIST
21819: PUSH
21820: LD_INT 3
21822: NEG
21823: PUSH
21824: LD_INT 2
21826: NEG
21827: PUSH
21828: EMPTY
21829: LIST
21830: LIST
21831: PUSH
21832: LD_INT 3
21834: NEG
21835: PUSH
21836: LD_INT 3
21838: NEG
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: LIST
21848: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
21849: LD_ADDR_VAR 0 23
21853: PUSH
21854: LD_INT 0
21856: PUSH
21857: LD_INT 3
21859: NEG
21860: PUSH
21861: EMPTY
21862: LIST
21863: LIST
21864: PUSH
21865: LD_INT 1
21867: NEG
21868: PUSH
21869: LD_INT 4
21871: NEG
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PUSH
21877: LD_INT 1
21879: PUSH
21880: LD_INT 3
21882: NEG
21883: PUSH
21884: EMPTY
21885: LIST
21886: LIST
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: LIST
21892: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
21893: LD_ADDR_VAR 0 24
21897: PUSH
21898: LD_INT 3
21900: PUSH
21901: LD_INT 0
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PUSH
21908: LD_INT 3
21910: PUSH
21911: LD_INT 1
21913: NEG
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 4
21921: PUSH
21922: LD_INT 1
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: LIST
21933: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
21934: LD_ADDR_VAR 0 25
21938: PUSH
21939: LD_INT 3
21941: PUSH
21942: LD_INT 3
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 4
21951: PUSH
21952: LD_INT 3
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 3
21961: PUSH
21962: LD_INT 4
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: LIST
21973: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
21974: LD_ADDR_VAR 0 26
21978: PUSH
21979: LD_INT 0
21981: PUSH
21982: LD_INT 3
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 1
21991: PUSH
21992: LD_INT 4
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: LD_INT 1
22001: NEG
22002: PUSH
22003: LD_INT 3
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: LIST
22014: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
22015: LD_ADDR_VAR 0 27
22019: PUSH
22020: LD_INT 3
22022: NEG
22023: PUSH
22024: LD_INT 0
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 3
22033: NEG
22034: PUSH
22035: LD_INT 1
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: PUSH
22042: LD_INT 4
22044: NEG
22045: PUSH
22046: LD_INT 1
22048: NEG
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: LIST
22058: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
22059: LD_ADDR_VAR 0 28
22063: PUSH
22064: LD_INT 3
22066: NEG
22067: PUSH
22068: LD_INT 3
22070: NEG
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PUSH
22076: LD_INT 3
22078: NEG
22079: PUSH
22080: LD_INT 4
22082: NEG
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 4
22090: NEG
22091: PUSH
22092: LD_INT 3
22094: NEG
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: LIST
22104: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
22105: LD_ADDR_VAR 0 29
22109: PUSH
22110: LD_INT 1
22112: NEG
22113: PUSH
22114: LD_INT 3
22116: NEG
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 0
22124: PUSH
22125: LD_INT 3
22127: NEG
22128: PUSH
22129: EMPTY
22130: LIST
22131: LIST
22132: PUSH
22133: LD_INT 1
22135: PUSH
22136: LD_INT 2
22138: NEG
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: LD_INT 1
22146: NEG
22147: PUSH
22148: LD_INT 4
22150: NEG
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 0
22158: PUSH
22159: LD_INT 4
22161: NEG
22162: PUSH
22163: EMPTY
22164: LIST
22165: LIST
22166: PUSH
22167: LD_INT 1
22169: PUSH
22170: LD_INT 3
22172: NEG
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 1
22180: NEG
22181: PUSH
22182: LD_INT 5
22184: NEG
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: PUSH
22190: LD_INT 0
22192: PUSH
22193: LD_INT 5
22195: NEG
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 1
22203: PUSH
22204: LD_INT 4
22206: NEG
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: PUSH
22212: LD_INT 1
22214: NEG
22215: PUSH
22216: LD_INT 6
22218: NEG
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PUSH
22224: LD_INT 0
22226: PUSH
22227: LD_INT 6
22229: NEG
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 1
22237: PUSH
22238: LD_INT 5
22240: NEG
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: EMPTY
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
22260: LD_ADDR_VAR 0 30
22264: PUSH
22265: LD_INT 2
22267: PUSH
22268: LD_INT 1
22270: NEG
22271: PUSH
22272: EMPTY
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 3
22278: PUSH
22279: LD_INT 0
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 3
22288: PUSH
22289: LD_INT 1
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 3
22298: PUSH
22299: LD_INT 1
22301: NEG
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PUSH
22307: LD_INT 4
22309: PUSH
22310: LD_INT 0
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 4
22319: PUSH
22320: LD_INT 1
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 4
22329: PUSH
22330: LD_INT 1
22332: NEG
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 5
22340: PUSH
22341: LD_INT 0
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 5
22350: PUSH
22351: LD_INT 1
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 5
22360: PUSH
22361: LD_INT 1
22363: NEG
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 6
22371: PUSH
22372: LD_INT 0
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 6
22381: PUSH
22382: LD_INT 1
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: LIST
22401: LIST
22402: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
22403: LD_ADDR_VAR 0 31
22407: PUSH
22408: LD_INT 3
22410: PUSH
22411: LD_INT 2
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 3
22420: PUSH
22421: LD_INT 3
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 2
22430: PUSH
22431: LD_INT 3
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: LD_INT 4
22440: PUSH
22441: LD_INT 3
22443: PUSH
22444: EMPTY
22445: LIST
22446: LIST
22447: PUSH
22448: LD_INT 4
22450: PUSH
22451: LD_INT 4
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PUSH
22458: LD_INT 3
22460: PUSH
22461: LD_INT 4
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: PUSH
22468: LD_INT 5
22470: PUSH
22471: LD_INT 4
22473: PUSH
22474: EMPTY
22475: LIST
22476: LIST
22477: PUSH
22478: LD_INT 5
22480: PUSH
22481: LD_INT 5
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 4
22490: PUSH
22491: LD_INT 5
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 6
22500: PUSH
22501: LD_INT 5
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: PUSH
22508: LD_INT 6
22510: PUSH
22511: LD_INT 6
22513: PUSH
22514: EMPTY
22515: LIST
22516: LIST
22517: PUSH
22518: LD_INT 5
22520: PUSH
22521: LD_INT 6
22523: PUSH
22524: EMPTY
22525: LIST
22526: LIST
22527: PUSH
22528: EMPTY
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
22542: LD_ADDR_VAR 0 32
22546: PUSH
22547: LD_INT 1
22549: PUSH
22550: LD_INT 3
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 0
22559: PUSH
22560: LD_INT 3
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: LD_INT 1
22569: NEG
22570: PUSH
22571: LD_INT 2
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 1
22580: PUSH
22581: LD_INT 4
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: LD_INT 0
22590: PUSH
22591: LD_INT 4
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 1
22600: NEG
22601: PUSH
22602: LD_INT 3
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 1
22611: PUSH
22612: LD_INT 5
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 0
22621: PUSH
22622: LD_INT 5
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 1
22631: NEG
22632: PUSH
22633: LD_INT 4
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: LD_INT 6
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: LD_INT 0
22652: PUSH
22653: LD_INT 6
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: PUSH
22660: LD_INT 1
22662: NEG
22663: PUSH
22664: LD_INT 5
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
22685: LD_ADDR_VAR 0 33
22689: PUSH
22690: LD_INT 2
22692: NEG
22693: PUSH
22694: LD_INT 1
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PUSH
22701: LD_INT 3
22703: NEG
22704: PUSH
22705: LD_INT 0
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: LD_INT 3
22714: NEG
22715: PUSH
22716: LD_INT 1
22718: NEG
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 3
22726: NEG
22727: PUSH
22728: LD_INT 1
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: PUSH
22735: LD_INT 4
22737: NEG
22738: PUSH
22739: LD_INT 0
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: LD_INT 4
22748: NEG
22749: PUSH
22750: LD_INT 1
22752: NEG
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 4
22760: NEG
22761: PUSH
22762: LD_INT 1
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 5
22771: NEG
22772: PUSH
22773: LD_INT 0
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 5
22782: NEG
22783: PUSH
22784: LD_INT 1
22786: NEG
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 5
22794: NEG
22795: PUSH
22796: LD_INT 1
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: LD_INT 6
22805: NEG
22806: PUSH
22807: LD_INT 0
22809: PUSH
22810: EMPTY
22811: LIST
22812: LIST
22813: PUSH
22814: LD_INT 6
22816: NEG
22817: PUSH
22818: LD_INT 1
22820: NEG
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
22840: LD_ADDR_VAR 0 34
22844: PUSH
22845: LD_INT 2
22847: NEG
22848: PUSH
22849: LD_INT 3
22851: NEG
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 3
22859: NEG
22860: PUSH
22861: LD_INT 2
22863: NEG
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 3
22871: NEG
22872: PUSH
22873: LD_INT 3
22875: NEG
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 3
22883: NEG
22884: PUSH
22885: LD_INT 4
22887: NEG
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 4
22895: NEG
22896: PUSH
22897: LD_INT 3
22899: NEG
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: PUSH
22905: LD_INT 4
22907: NEG
22908: PUSH
22909: LD_INT 4
22911: NEG
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 4
22919: NEG
22920: PUSH
22921: LD_INT 5
22923: NEG
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 5
22931: NEG
22932: PUSH
22933: LD_INT 4
22935: NEG
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: PUSH
22941: LD_INT 5
22943: NEG
22944: PUSH
22945: LD_INT 5
22947: NEG
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: PUSH
22953: LD_INT 5
22955: NEG
22956: PUSH
22957: LD_INT 6
22959: NEG
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 6
22967: NEG
22968: PUSH
22969: LD_INT 5
22971: NEG
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 6
22979: NEG
22980: PUSH
22981: LD_INT 6
22983: NEG
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
23003: LD_ADDR_VAR 0 41
23007: PUSH
23008: LD_INT 0
23010: PUSH
23011: LD_INT 2
23013: NEG
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 1
23021: NEG
23022: PUSH
23023: LD_INT 3
23025: NEG
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: LD_INT 1
23033: PUSH
23034: LD_INT 2
23036: NEG
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: LIST
23046: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
23047: LD_ADDR_VAR 0 42
23051: PUSH
23052: LD_INT 2
23054: PUSH
23055: LD_INT 0
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 2
23064: PUSH
23065: LD_INT 1
23067: NEG
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 3
23075: PUSH
23076: LD_INT 1
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: LIST
23087: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
23088: LD_ADDR_VAR 0 43
23092: PUSH
23093: LD_INT 2
23095: PUSH
23096: LD_INT 2
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 3
23105: PUSH
23106: LD_INT 2
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 2
23115: PUSH
23116: LD_INT 3
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: LIST
23127: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
23128: LD_ADDR_VAR 0 44
23132: PUSH
23133: LD_INT 0
23135: PUSH
23136: LD_INT 2
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 1
23145: PUSH
23146: LD_INT 3
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 1
23155: NEG
23156: PUSH
23157: LD_INT 2
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: LIST
23168: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23169: LD_ADDR_VAR 0 45
23173: PUSH
23174: LD_INT 2
23176: NEG
23177: PUSH
23178: LD_INT 0
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 2
23187: NEG
23188: PUSH
23189: LD_INT 1
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: LD_INT 3
23198: NEG
23199: PUSH
23200: LD_INT 1
23202: NEG
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: LIST
23212: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
23213: LD_ADDR_VAR 0 46
23217: PUSH
23218: LD_INT 2
23220: NEG
23221: PUSH
23222: LD_INT 2
23224: NEG
23225: PUSH
23226: EMPTY
23227: LIST
23228: LIST
23229: PUSH
23230: LD_INT 2
23232: NEG
23233: PUSH
23234: LD_INT 3
23236: NEG
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 3
23244: NEG
23245: PUSH
23246: LD_INT 2
23248: NEG
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: LIST
23258: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
23259: LD_ADDR_VAR 0 47
23263: PUSH
23264: LD_INT 2
23266: NEG
23267: PUSH
23268: LD_INT 3
23270: NEG
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 1
23278: NEG
23279: PUSH
23280: LD_INT 3
23282: NEG
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: EMPTY
23289: LIST
23290: LIST
23291: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23292: LD_ADDR_VAR 0 48
23296: PUSH
23297: LD_INT 1
23299: PUSH
23300: LD_INT 2
23302: NEG
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PUSH
23308: LD_INT 2
23310: PUSH
23311: LD_INT 1
23313: NEG
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
23323: LD_ADDR_VAR 0 49
23327: PUSH
23328: LD_INT 3
23330: PUSH
23331: LD_INT 1
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: PUSH
23338: LD_INT 3
23340: PUSH
23341: LD_INT 2
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: EMPTY
23349: LIST
23350: LIST
23351: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
23352: LD_ADDR_VAR 0 50
23356: PUSH
23357: LD_INT 2
23359: PUSH
23360: LD_INT 3
23362: PUSH
23363: EMPTY
23364: LIST
23365: LIST
23366: PUSH
23367: LD_INT 1
23369: PUSH
23370: LD_INT 3
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: PUSH
23377: EMPTY
23378: LIST
23379: LIST
23380: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
23381: LD_ADDR_VAR 0 51
23385: PUSH
23386: LD_INT 1
23388: NEG
23389: PUSH
23390: LD_INT 2
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: PUSH
23397: LD_INT 2
23399: NEG
23400: PUSH
23401: LD_INT 1
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: EMPTY
23409: LIST
23410: LIST
23411: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23412: LD_ADDR_VAR 0 52
23416: PUSH
23417: LD_INT 3
23419: NEG
23420: PUSH
23421: LD_INT 1
23423: NEG
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: PUSH
23429: LD_INT 3
23431: NEG
23432: PUSH
23433: LD_INT 2
23435: NEG
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23445: LD_ADDR_VAR 0 53
23449: PUSH
23450: LD_INT 1
23452: NEG
23453: PUSH
23454: LD_INT 3
23456: NEG
23457: PUSH
23458: EMPTY
23459: LIST
23460: LIST
23461: PUSH
23462: LD_INT 0
23464: PUSH
23465: LD_INT 3
23467: NEG
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 1
23475: PUSH
23476: LD_INT 2
23478: NEG
23479: PUSH
23480: EMPTY
23481: LIST
23482: LIST
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: LIST
23488: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23489: LD_ADDR_VAR 0 54
23493: PUSH
23494: LD_INT 2
23496: PUSH
23497: LD_INT 1
23499: NEG
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PUSH
23505: LD_INT 3
23507: PUSH
23508: LD_INT 0
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 3
23517: PUSH
23518: LD_INT 1
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: LIST
23529: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23530: LD_ADDR_VAR 0 55
23534: PUSH
23535: LD_INT 3
23537: PUSH
23538: LD_INT 2
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: LD_INT 3
23547: PUSH
23548: LD_INT 3
23550: PUSH
23551: EMPTY
23552: LIST
23553: LIST
23554: PUSH
23555: LD_INT 2
23557: PUSH
23558: LD_INT 3
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: LIST
23569: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23570: LD_ADDR_VAR 0 56
23574: PUSH
23575: LD_INT 1
23577: PUSH
23578: LD_INT 3
23580: PUSH
23581: EMPTY
23582: LIST
23583: LIST
23584: PUSH
23585: LD_INT 0
23587: PUSH
23588: LD_INT 3
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 1
23597: NEG
23598: PUSH
23599: LD_INT 2
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: LIST
23610: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23611: LD_ADDR_VAR 0 57
23615: PUSH
23616: LD_INT 2
23618: NEG
23619: PUSH
23620: LD_INT 1
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 3
23629: NEG
23630: PUSH
23631: LD_INT 0
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PUSH
23638: LD_INT 3
23640: NEG
23641: PUSH
23642: LD_INT 1
23644: NEG
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: LIST
23654: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23655: LD_ADDR_VAR 0 58
23659: PUSH
23660: LD_INT 2
23662: NEG
23663: PUSH
23664: LD_INT 3
23666: NEG
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: LD_INT 3
23674: NEG
23675: PUSH
23676: LD_INT 2
23678: NEG
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: PUSH
23684: LD_INT 3
23686: NEG
23687: PUSH
23688: LD_INT 3
23690: NEG
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: LIST
23700: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
23701: LD_ADDR_VAR 0 59
23705: PUSH
23706: LD_INT 1
23708: NEG
23709: PUSH
23710: LD_INT 2
23712: NEG
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 0
23720: PUSH
23721: LD_INT 2
23723: NEG
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: PUSH
23732: LD_INT 1
23734: NEG
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: LIST
23744: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23745: LD_ADDR_VAR 0 60
23749: PUSH
23750: LD_INT 1
23752: PUSH
23753: LD_INT 1
23755: NEG
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: LD_INT 2
23763: PUSH
23764: LD_INT 0
23766: PUSH
23767: EMPTY
23768: LIST
23769: LIST
23770: PUSH
23771: LD_INT 2
23773: PUSH
23774: LD_INT 1
23776: PUSH
23777: EMPTY
23778: LIST
23779: LIST
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: LIST
23785: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23786: LD_ADDR_VAR 0 61
23790: PUSH
23791: LD_INT 2
23793: PUSH
23794: LD_INT 1
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PUSH
23801: LD_INT 2
23803: PUSH
23804: LD_INT 2
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: PUSH
23811: LD_INT 1
23813: PUSH
23814: LD_INT 2
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: LIST
23825: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23826: LD_ADDR_VAR 0 62
23830: PUSH
23831: LD_INT 1
23833: PUSH
23834: LD_INT 2
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: PUSH
23841: LD_INT 0
23843: PUSH
23844: LD_INT 2
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: PUSH
23851: LD_INT 1
23853: NEG
23854: PUSH
23855: LD_INT 1
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: LIST
23866: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23867: LD_ADDR_VAR 0 63
23871: PUSH
23872: LD_INT 1
23874: NEG
23875: PUSH
23876: LD_INT 1
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: LD_INT 2
23885: NEG
23886: PUSH
23887: LD_INT 0
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: LD_INT 2
23896: NEG
23897: PUSH
23898: LD_INT 1
23900: NEG
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: LIST
23910: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23911: LD_ADDR_VAR 0 64
23915: PUSH
23916: LD_INT 1
23918: NEG
23919: PUSH
23920: LD_INT 2
23922: NEG
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: LD_INT 2
23930: NEG
23931: PUSH
23932: LD_INT 1
23934: NEG
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 2
23942: NEG
23943: PUSH
23944: LD_INT 2
23946: NEG
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: LIST
23956: ST_TO_ADDR
// end ; 2 :
23957: GO 27223
23959: LD_INT 2
23961: DOUBLE
23962: EQUAL
23963: IFTRUE 23967
23965: GO 27222
23967: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
23968: LD_ADDR_VAR 0 29
23972: PUSH
23973: LD_INT 4
23975: PUSH
23976: LD_INT 0
23978: PUSH
23979: EMPTY
23980: LIST
23981: LIST
23982: PUSH
23983: LD_INT 4
23985: PUSH
23986: LD_INT 1
23988: NEG
23989: PUSH
23990: EMPTY
23991: LIST
23992: LIST
23993: PUSH
23994: LD_INT 5
23996: PUSH
23997: LD_INT 0
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 5
24006: PUSH
24007: LD_INT 1
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 4
24016: PUSH
24017: LD_INT 1
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 3
24026: PUSH
24027: LD_INT 0
24029: PUSH
24030: EMPTY
24031: LIST
24032: LIST
24033: PUSH
24034: LD_INT 3
24036: PUSH
24037: LD_INT 1
24039: NEG
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 3
24047: PUSH
24048: LD_INT 2
24050: NEG
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 5
24058: PUSH
24059: LD_INT 2
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 3
24068: PUSH
24069: LD_INT 3
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 3
24078: PUSH
24079: LD_INT 2
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 4
24088: PUSH
24089: LD_INT 3
24091: PUSH
24092: EMPTY
24093: LIST
24094: LIST
24095: PUSH
24096: LD_INT 4
24098: PUSH
24099: LD_INT 4
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: LD_INT 3
24108: PUSH
24109: LD_INT 4
24111: PUSH
24112: EMPTY
24113: LIST
24114: LIST
24115: PUSH
24116: LD_INT 2
24118: PUSH
24119: LD_INT 3
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 2
24128: PUSH
24129: LD_INT 2
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: LD_INT 4
24138: PUSH
24139: LD_INT 2
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 2
24148: PUSH
24149: LD_INT 4
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: PUSH
24156: LD_INT 0
24158: PUSH
24159: LD_INT 4
24161: PUSH
24162: EMPTY
24163: LIST
24164: LIST
24165: PUSH
24166: LD_INT 0
24168: PUSH
24169: LD_INT 3
24171: PUSH
24172: EMPTY
24173: LIST
24174: LIST
24175: PUSH
24176: LD_INT 1
24178: PUSH
24179: LD_INT 4
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: PUSH
24186: LD_INT 1
24188: PUSH
24189: LD_INT 5
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 0
24198: PUSH
24199: LD_INT 5
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: PUSH
24206: LD_INT 1
24208: NEG
24209: PUSH
24210: LD_INT 4
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: LD_INT 1
24219: NEG
24220: PUSH
24221: LD_INT 3
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 2
24230: PUSH
24231: LD_INT 5
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 2
24240: NEG
24241: PUSH
24242: LD_INT 3
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: PUSH
24249: LD_INT 3
24251: NEG
24252: PUSH
24253: LD_INT 0
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: LD_INT 3
24262: NEG
24263: PUSH
24264: LD_INT 1
24266: NEG
24267: PUSH
24268: EMPTY
24269: LIST
24270: LIST
24271: PUSH
24272: LD_INT 2
24274: NEG
24275: PUSH
24276: LD_INT 0
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: PUSH
24283: LD_INT 2
24285: NEG
24286: PUSH
24287: LD_INT 1
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PUSH
24294: LD_INT 3
24296: NEG
24297: PUSH
24298: LD_INT 1
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: PUSH
24305: LD_INT 4
24307: NEG
24308: PUSH
24309: LD_INT 0
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: PUSH
24316: LD_INT 4
24318: NEG
24319: PUSH
24320: LD_INT 1
24322: NEG
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PUSH
24328: LD_INT 4
24330: NEG
24331: PUSH
24332: LD_INT 2
24334: NEG
24335: PUSH
24336: EMPTY
24337: LIST
24338: LIST
24339: PUSH
24340: LD_INT 2
24342: NEG
24343: PUSH
24344: LD_INT 2
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 4
24353: NEG
24354: PUSH
24355: LD_INT 4
24357: NEG
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: PUSH
24363: LD_INT 4
24365: NEG
24366: PUSH
24367: LD_INT 5
24369: NEG
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 3
24377: NEG
24378: PUSH
24379: LD_INT 4
24381: NEG
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 3
24389: NEG
24390: PUSH
24391: LD_INT 3
24393: NEG
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PUSH
24399: LD_INT 4
24401: NEG
24402: PUSH
24403: LD_INT 3
24405: NEG
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: LD_INT 5
24413: NEG
24414: PUSH
24415: LD_INT 4
24417: NEG
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 5
24425: NEG
24426: PUSH
24427: LD_INT 5
24429: NEG
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 3
24437: NEG
24438: PUSH
24439: LD_INT 5
24441: NEG
24442: PUSH
24443: EMPTY
24444: LIST
24445: LIST
24446: PUSH
24447: LD_INT 5
24449: NEG
24450: PUSH
24451: LD_INT 3
24453: NEG
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
24506: LD_ADDR_VAR 0 30
24510: PUSH
24511: LD_INT 4
24513: PUSH
24514: LD_INT 4
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 4
24523: PUSH
24524: LD_INT 3
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 5
24533: PUSH
24534: LD_INT 4
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 5
24543: PUSH
24544: LD_INT 5
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: PUSH
24551: LD_INT 4
24553: PUSH
24554: LD_INT 5
24556: PUSH
24557: EMPTY
24558: LIST
24559: LIST
24560: PUSH
24561: LD_INT 3
24563: PUSH
24564: LD_INT 4
24566: PUSH
24567: EMPTY
24568: LIST
24569: LIST
24570: PUSH
24571: LD_INT 3
24573: PUSH
24574: LD_INT 3
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 5
24583: PUSH
24584: LD_INT 3
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 3
24593: PUSH
24594: LD_INT 5
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 0
24603: PUSH
24604: LD_INT 3
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 0
24613: PUSH
24614: LD_INT 2
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 1
24623: PUSH
24624: LD_INT 3
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 1
24633: PUSH
24634: LD_INT 4
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 0
24643: PUSH
24644: LD_INT 4
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 1
24653: NEG
24654: PUSH
24655: LD_INT 3
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PUSH
24662: LD_INT 1
24664: NEG
24665: PUSH
24666: LD_INT 2
24668: PUSH
24669: EMPTY
24670: LIST
24671: LIST
24672: PUSH
24673: LD_INT 2
24675: PUSH
24676: LD_INT 4
24678: PUSH
24679: EMPTY
24680: LIST
24681: LIST
24682: PUSH
24683: LD_INT 2
24685: NEG
24686: PUSH
24687: LD_INT 2
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PUSH
24694: LD_INT 4
24696: NEG
24697: PUSH
24698: LD_INT 0
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 4
24707: NEG
24708: PUSH
24709: LD_INT 1
24711: NEG
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PUSH
24717: LD_INT 3
24719: NEG
24720: PUSH
24721: LD_INT 0
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: LD_INT 3
24730: NEG
24731: PUSH
24732: LD_INT 1
24734: PUSH
24735: EMPTY
24736: LIST
24737: LIST
24738: PUSH
24739: LD_INT 4
24741: NEG
24742: PUSH
24743: LD_INT 1
24745: PUSH
24746: EMPTY
24747: LIST
24748: LIST
24749: PUSH
24750: LD_INT 5
24752: NEG
24753: PUSH
24754: LD_INT 0
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 5
24763: NEG
24764: PUSH
24765: LD_INT 1
24767: NEG
24768: PUSH
24769: EMPTY
24770: LIST
24771: LIST
24772: PUSH
24773: LD_INT 5
24775: NEG
24776: PUSH
24777: LD_INT 2
24779: NEG
24780: PUSH
24781: EMPTY
24782: LIST
24783: LIST
24784: PUSH
24785: LD_INT 3
24787: NEG
24788: PUSH
24789: LD_INT 2
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: PUSH
24796: LD_INT 3
24798: NEG
24799: PUSH
24800: LD_INT 3
24802: NEG
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: LD_INT 3
24810: NEG
24811: PUSH
24812: LD_INT 4
24814: NEG
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 2
24822: NEG
24823: PUSH
24824: LD_INT 3
24826: NEG
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 2
24834: NEG
24835: PUSH
24836: LD_INT 2
24838: NEG
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 3
24846: NEG
24847: PUSH
24848: LD_INT 2
24850: NEG
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: PUSH
24856: LD_INT 4
24858: NEG
24859: PUSH
24860: LD_INT 3
24862: NEG
24863: PUSH
24864: EMPTY
24865: LIST
24866: LIST
24867: PUSH
24868: LD_INT 4
24870: NEG
24871: PUSH
24872: LD_INT 4
24874: NEG
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: PUSH
24880: LD_INT 2
24882: NEG
24883: PUSH
24884: LD_INT 4
24886: NEG
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PUSH
24892: LD_INT 4
24894: NEG
24895: PUSH
24896: LD_INT 2
24898: NEG
24899: PUSH
24900: EMPTY
24901: LIST
24902: LIST
24903: PUSH
24904: LD_INT 0
24906: PUSH
24907: LD_INT 4
24909: NEG
24910: PUSH
24911: EMPTY
24912: LIST
24913: LIST
24914: PUSH
24915: LD_INT 0
24917: PUSH
24918: LD_INT 5
24920: NEG
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 1
24928: PUSH
24929: LD_INT 4
24931: NEG
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: LD_INT 1
24939: PUSH
24940: LD_INT 3
24942: NEG
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 0
24950: PUSH
24951: LD_INT 3
24953: NEG
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: PUSH
24959: LD_INT 1
24961: NEG
24962: PUSH
24963: LD_INT 4
24965: NEG
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: LD_INT 1
24973: NEG
24974: PUSH
24975: LD_INT 5
24977: NEG
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 2
24985: PUSH
24986: LD_INT 3
24988: NEG
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 2
24996: NEG
24997: PUSH
24998: LD_INT 5
25000: NEG
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
25053: LD_ADDR_VAR 0 31
25057: PUSH
25058: LD_INT 0
25060: PUSH
25061: LD_INT 4
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: PUSH
25068: LD_INT 0
25070: PUSH
25071: LD_INT 3
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 1
25080: PUSH
25081: LD_INT 4
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: LD_INT 1
25090: PUSH
25091: LD_INT 5
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: PUSH
25098: LD_INT 0
25100: PUSH
25101: LD_INT 5
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PUSH
25108: LD_INT 1
25110: NEG
25111: PUSH
25112: LD_INT 4
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 1
25121: NEG
25122: PUSH
25123: LD_INT 3
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: LD_INT 2
25132: PUSH
25133: LD_INT 5
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 2
25142: NEG
25143: PUSH
25144: LD_INT 3
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 3
25153: NEG
25154: PUSH
25155: LD_INT 0
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 3
25164: NEG
25165: PUSH
25166: LD_INT 1
25168: NEG
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: LD_INT 2
25176: NEG
25177: PUSH
25178: LD_INT 0
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: LD_INT 2
25187: NEG
25188: PUSH
25189: LD_INT 1
25191: PUSH
25192: EMPTY
25193: LIST
25194: LIST
25195: PUSH
25196: LD_INT 3
25198: NEG
25199: PUSH
25200: LD_INT 1
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 4
25209: NEG
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 4
25220: NEG
25221: PUSH
25222: LD_INT 1
25224: NEG
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PUSH
25230: LD_INT 4
25232: NEG
25233: PUSH
25234: LD_INT 2
25236: NEG
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 2
25244: NEG
25245: PUSH
25246: LD_INT 2
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 4
25255: NEG
25256: PUSH
25257: LD_INT 4
25259: NEG
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 4
25267: NEG
25268: PUSH
25269: LD_INT 5
25271: NEG
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 3
25279: NEG
25280: PUSH
25281: LD_INT 4
25283: NEG
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 3
25291: NEG
25292: PUSH
25293: LD_INT 3
25295: NEG
25296: PUSH
25297: EMPTY
25298: LIST
25299: LIST
25300: PUSH
25301: LD_INT 4
25303: NEG
25304: PUSH
25305: LD_INT 3
25307: NEG
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 5
25315: NEG
25316: PUSH
25317: LD_INT 4
25319: NEG
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 5
25327: NEG
25328: PUSH
25329: LD_INT 5
25331: NEG
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 3
25339: NEG
25340: PUSH
25341: LD_INT 5
25343: NEG
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 5
25351: NEG
25352: PUSH
25353: LD_INT 3
25355: NEG
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 0
25363: PUSH
25364: LD_INT 3
25366: NEG
25367: PUSH
25368: EMPTY
25369: LIST
25370: LIST
25371: PUSH
25372: LD_INT 0
25374: PUSH
25375: LD_INT 4
25377: NEG
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 1
25385: PUSH
25386: LD_INT 3
25388: NEG
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: LD_INT 1
25396: PUSH
25397: LD_INT 2
25399: NEG
25400: PUSH
25401: EMPTY
25402: LIST
25403: LIST
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: LD_INT 2
25410: NEG
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 1
25418: NEG
25419: PUSH
25420: LD_INT 3
25422: NEG
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 1
25430: NEG
25431: PUSH
25432: LD_INT 4
25434: NEG
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: LD_INT 2
25442: PUSH
25443: LD_INT 2
25445: NEG
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 2
25453: NEG
25454: PUSH
25455: LD_INT 4
25457: NEG
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 4
25465: PUSH
25466: LD_INT 0
25468: PUSH
25469: EMPTY
25470: LIST
25471: LIST
25472: PUSH
25473: LD_INT 4
25475: PUSH
25476: LD_INT 1
25478: NEG
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: LD_INT 5
25486: PUSH
25487: LD_INT 0
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: PUSH
25494: LD_INT 5
25496: PUSH
25497: LD_INT 1
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 4
25506: PUSH
25507: LD_INT 1
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 3
25516: PUSH
25517: LD_INT 0
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 3
25526: PUSH
25527: LD_INT 1
25529: NEG
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 3
25537: PUSH
25538: LD_INT 2
25540: NEG
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 5
25548: PUSH
25549: LD_INT 2
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
25603: LD_ADDR_VAR 0 32
25607: PUSH
25608: LD_INT 4
25610: NEG
25611: PUSH
25612: LD_INT 0
25614: PUSH
25615: EMPTY
25616: LIST
25617: LIST
25618: PUSH
25619: LD_INT 4
25621: NEG
25622: PUSH
25623: LD_INT 1
25625: NEG
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PUSH
25631: LD_INT 3
25633: NEG
25634: PUSH
25635: LD_INT 0
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: PUSH
25642: LD_INT 3
25644: NEG
25645: PUSH
25646: LD_INT 1
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: LD_INT 4
25655: NEG
25656: PUSH
25657: LD_INT 1
25659: PUSH
25660: EMPTY
25661: LIST
25662: LIST
25663: PUSH
25664: LD_INT 5
25666: NEG
25667: PUSH
25668: LD_INT 0
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 5
25677: NEG
25678: PUSH
25679: LD_INT 1
25681: NEG
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 5
25689: NEG
25690: PUSH
25691: LD_INT 2
25693: NEG
25694: PUSH
25695: EMPTY
25696: LIST
25697: LIST
25698: PUSH
25699: LD_INT 3
25701: NEG
25702: PUSH
25703: LD_INT 2
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 3
25712: NEG
25713: PUSH
25714: LD_INT 3
25716: NEG
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 3
25724: NEG
25725: PUSH
25726: LD_INT 4
25728: NEG
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 2
25736: NEG
25737: PUSH
25738: LD_INT 3
25740: NEG
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PUSH
25746: LD_INT 2
25748: NEG
25749: PUSH
25750: LD_INT 2
25752: NEG
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 3
25760: NEG
25761: PUSH
25762: LD_INT 2
25764: NEG
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 4
25772: NEG
25773: PUSH
25774: LD_INT 3
25776: NEG
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: LD_INT 4
25784: NEG
25785: PUSH
25786: LD_INT 4
25788: NEG
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 2
25796: NEG
25797: PUSH
25798: LD_INT 4
25800: NEG
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 4
25808: NEG
25809: PUSH
25810: LD_INT 2
25812: NEG
25813: PUSH
25814: EMPTY
25815: LIST
25816: LIST
25817: PUSH
25818: LD_INT 0
25820: PUSH
25821: LD_INT 4
25823: NEG
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 0
25831: PUSH
25832: LD_INT 5
25834: NEG
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 1
25842: PUSH
25843: LD_INT 4
25845: NEG
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 1
25853: PUSH
25854: LD_INT 3
25856: NEG
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: LD_INT 0
25864: PUSH
25865: LD_INT 3
25867: NEG
25868: PUSH
25869: EMPTY
25870: LIST
25871: LIST
25872: PUSH
25873: LD_INT 1
25875: NEG
25876: PUSH
25877: LD_INT 4
25879: NEG
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: PUSH
25885: LD_INT 1
25887: NEG
25888: PUSH
25889: LD_INT 5
25891: NEG
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 2
25899: PUSH
25900: LD_INT 3
25902: NEG
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: PUSH
25908: LD_INT 2
25910: NEG
25911: PUSH
25912: LD_INT 5
25914: NEG
25915: PUSH
25916: EMPTY
25917: LIST
25918: LIST
25919: PUSH
25920: LD_INT 3
25922: PUSH
25923: LD_INT 0
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 3
25932: PUSH
25933: LD_INT 1
25935: NEG
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 4
25943: PUSH
25944: LD_INT 0
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: PUSH
25951: LD_INT 4
25953: PUSH
25954: LD_INT 1
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 3
25963: PUSH
25964: LD_INT 1
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 2
25973: PUSH
25974: LD_INT 0
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 2
25983: PUSH
25984: LD_INT 1
25986: NEG
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 2
25994: PUSH
25995: LD_INT 2
25997: NEG
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: LD_INT 4
26005: PUSH
26006: LD_INT 2
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 4
26015: PUSH
26016: LD_INT 4
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: LD_INT 4
26025: PUSH
26026: LD_INT 3
26028: PUSH
26029: EMPTY
26030: LIST
26031: LIST
26032: PUSH
26033: LD_INT 5
26035: PUSH
26036: LD_INT 4
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 5
26045: PUSH
26046: LD_INT 5
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 4
26055: PUSH
26056: LD_INT 5
26058: PUSH
26059: EMPTY
26060: LIST
26061: LIST
26062: PUSH
26063: LD_INT 3
26065: PUSH
26066: LD_INT 4
26068: PUSH
26069: EMPTY
26070: LIST
26071: LIST
26072: PUSH
26073: LD_INT 3
26075: PUSH
26076: LD_INT 3
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 5
26085: PUSH
26086: LD_INT 3
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 3
26095: PUSH
26096: LD_INT 5
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
26150: LD_ADDR_VAR 0 33
26154: PUSH
26155: LD_INT 4
26157: NEG
26158: PUSH
26159: LD_INT 4
26161: NEG
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 4
26169: NEG
26170: PUSH
26171: LD_INT 5
26173: NEG
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 3
26181: NEG
26182: PUSH
26183: LD_INT 4
26185: NEG
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 3
26193: NEG
26194: PUSH
26195: LD_INT 3
26197: NEG
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 4
26205: NEG
26206: PUSH
26207: LD_INT 3
26209: NEG
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 5
26217: NEG
26218: PUSH
26219: LD_INT 4
26221: NEG
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PUSH
26227: LD_INT 5
26229: NEG
26230: PUSH
26231: LD_INT 5
26233: NEG
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 3
26241: NEG
26242: PUSH
26243: LD_INT 5
26245: NEG
26246: PUSH
26247: EMPTY
26248: LIST
26249: LIST
26250: PUSH
26251: LD_INT 5
26253: NEG
26254: PUSH
26255: LD_INT 3
26257: NEG
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PUSH
26263: LD_INT 0
26265: PUSH
26266: LD_INT 3
26268: NEG
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: LD_INT 0
26276: PUSH
26277: LD_INT 4
26279: NEG
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 1
26287: PUSH
26288: LD_INT 3
26290: NEG
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 1
26298: PUSH
26299: LD_INT 2
26301: NEG
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 0
26309: PUSH
26310: LD_INT 2
26312: NEG
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 1
26320: NEG
26321: PUSH
26322: LD_INT 3
26324: NEG
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 1
26332: NEG
26333: PUSH
26334: LD_INT 4
26336: NEG
26337: PUSH
26338: EMPTY
26339: LIST
26340: LIST
26341: PUSH
26342: LD_INT 2
26344: PUSH
26345: LD_INT 2
26347: NEG
26348: PUSH
26349: EMPTY
26350: LIST
26351: LIST
26352: PUSH
26353: LD_INT 2
26355: NEG
26356: PUSH
26357: LD_INT 4
26359: NEG
26360: PUSH
26361: EMPTY
26362: LIST
26363: LIST
26364: PUSH
26365: LD_INT 4
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PUSH
26375: LD_INT 4
26377: PUSH
26378: LD_INT 1
26380: NEG
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 5
26388: PUSH
26389: LD_INT 0
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: LD_INT 5
26398: PUSH
26399: LD_INT 1
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 4
26408: PUSH
26409: LD_INT 1
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 3
26418: PUSH
26419: LD_INT 0
26421: PUSH
26422: EMPTY
26423: LIST
26424: LIST
26425: PUSH
26426: LD_INT 3
26428: PUSH
26429: LD_INT 1
26431: NEG
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 3
26439: PUSH
26440: LD_INT 2
26442: NEG
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 5
26450: PUSH
26451: LD_INT 2
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 3
26460: PUSH
26461: LD_INT 3
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 3
26470: PUSH
26471: LD_INT 2
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 4
26480: PUSH
26481: LD_INT 3
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 4
26490: PUSH
26491: LD_INT 4
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 3
26500: PUSH
26501: LD_INT 4
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 2
26510: PUSH
26511: LD_INT 3
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 2
26520: PUSH
26521: LD_INT 2
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 4
26530: PUSH
26531: LD_INT 2
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 2
26540: PUSH
26541: LD_INT 4
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 0
26550: PUSH
26551: LD_INT 4
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: LD_INT 0
26560: PUSH
26561: LD_INT 3
26563: PUSH
26564: EMPTY
26565: LIST
26566: LIST
26567: PUSH
26568: LD_INT 1
26570: PUSH
26571: LD_INT 4
26573: PUSH
26574: EMPTY
26575: LIST
26576: LIST
26577: PUSH
26578: LD_INT 1
26580: PUSH
26581: LD_INT 5
26583: PUSH
26584: EMPTY
26585: LIST
26586: LIST
26587: PUSH
26588: LD_INT 0
26590: PUSH
26591: LD_INT 5
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 1
26600: NEG
26601: PUSH
26602: LD_INT 4
26604: PUSH
26605: EMPTY
26606: LIST
26607: LIST
26608: PUSH
26609: LD_INT 1
26611: NEG
26612: PUSH
26613: LD_INT 3
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 2
26622: PUSH
26623: LD_INT 5
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 2
26632: NEG
26633: PUSH
26634: LD_INT 3
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
26688: LD_ADDR_VAR 0 34
26692: PUSH
26693: LD_INT 0
26695: PUSH
26696: LD_INT 4
26698: NEG
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 0
26706: PUSH
26707: LD_INT 5
26709: NEG
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 1
26717: PUSH
26718: LD_INT 4
26720: NEG
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: LD_INT 1
26728: PUSH
26729: LD_INT 3
26731: NEG
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: LD_INT 3
26742: NEG
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 1
26750: NEG
26751: PUSH
26752: LD_INT 4
26754: NEG
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 1
26762: NEG
26763: PUSH
26764: LD_INT 5
26766: NEG
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 2
26774: PUSH
26775: LD_INT 3
26777: NEG
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 2
26785: NEG
26786: PUSH
26787: LD_INT 5
26789: NEG
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 3
26797: PUSH
26798: LD_INT 0
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 3
26807: PUSH
26808: LD_INT 1
26810: NEG
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 4
26818: PUSH
26819: LD_INT 0
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 4
26828: PUSH
26829: LD_INT 1
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 3
26838: PUSH
26839: LD_INT 1
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: PUSH
26846: LD_INT 2
26848: PUSH
26849: LD_INT 0
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 2
26858: PUSH
26859: LD_INT 1
26861: NEG
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 2
26869: PUSH
26870: LD_INT 2
26872: NEG
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 4
26880: PUSH
26881: LD_INT 2
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 4
26890: PUSH
26891: LD_INT 4
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 4
26900: PUSH
26901: LD_INT 3
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 5
26910: PUSH
26911: LD_INT 4
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 5
26920: PUSH
26921: LD_INT 5
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 4
26930: PUSH
26931: LD_INT 5
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 3
26940: PUSH
26941: LD_INT 4
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: LD_INT 3
26950: PUSH
26951: LD_INT 3
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PUSH
26958: LD_INT 5
26960: PUSH
26961: LD_INT 3
26963: PUSH
26964: EMPTY
26965: LIST
26966: LIST
26967: PUSH
26968: LD_INT 3
26970: PUSH
26971: LD_INT 5
26973: PUSH
26974: EMPTY
26975: LIST
26976: LIST
26977: PUSH
26978: LD_INT 0
26980: PUSH
26981: LD_INT 3
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: PUSH
26988: LD_INT 0
26990: PUSH
26991: LD_INT 2
26993: PUSH
26994: EMPTY
26995: LIST
26996: LIST
26997: PUSH
26998: LD_INT 1
27000: PUSH
27001: LD_INT 3
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: LD_INT 4
27013: PUSH
27014: EMPTY
27015: LIST
27016: LIST
27017: PUSH
27018: LD_INT 0
27020: PUSH
27021: LD_INT 4
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 1
27030: NEG
27031: PUSH
27032: LD_INT 3
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 1
27041: NEG
27042: PUSH
27043: LD_INT 2
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PUSH
27050: LD_INT 2
27052: PUSH
27053: LD_INT 4
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PUSH
27060: LD_INT 2
27062: NEG
27063: PUSH
27064: LD_INT 2
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: LD_INT 4
27073: NEG
27074: PUSH
27075: LD_INT 0
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: PUSH
27082: LD_INT 4
27084: NEG
27085: PUSH
27086: LD_INT 1
27088: NEG
27089: PUSH
27090: EMPTY
27091: LIST
27092: LIST
27093: PUSH
27094: LD_INT 3
27096: NEG
27097: PUSH
27098: LD_INT 0
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PUSH
27105: LD_INT 3
27107: NEG
27108: PUSH
27109: LD_INT 1
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 4
27118: NEG
27119: PUSH
27120: LD_INT 1
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 5
27129: NEG
27130: PUSH
27131: LD_INT 0
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 5
27140: NEG
27141: PUSH
27142: LD_INT 1
27144: NEG
27145: PUSH
27146: EMPTY
27147: LIST
27148: LIST
27149: PUSH
27150: LD_INT 5
27152: NEG
27153: PUSH
27154: LD_INT 2
27156: NEG
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: LD_INT 3
27164: NEG
27165: PUSH
27166: LD_INT 2
27168: PUSH
27169: EMPTY
27170: LIST
27171: LIST
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: ST_TO_ADDR
// end ; end ;
27220: GO 27223
27222: POP
// case btype of b_depot , b_warehouse :
27223: LD_VAR 0 1
27227: PUSH
27228: LD_INT 0
27230: DOUBLE
27231: EQUAL
27232: IFTRUE 27242
27234: LD_INT 1
27236: DOUBLE
27237: EQUAL
27238: IFTRUE 27242
27240: GO 27443
27242: POP
// case nation of nation_american :
27243: LD_VAR 0 5
27247: PUSH
27248: LD_INT 1
27250: DOUBLE
27251: EQUAL
27252: IFTRUE 27256
27254: GO 27312
27256: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
27257: LD_ADDR_VAR 0 9
27261: PUSH
27262: LD_VAR 0 11
27266: PUSH
27267: LD_VAR 0 12
27271: PUSH
27272: LD_VAR 0 13
27276: PUSH
27277: LD_VAR 0 14
27281: PUSH
27282: LD_VAR 0 15
27286: PUSH
27287: LD_VAR 0 16
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: PUSH
27300: LD_VAR 0 4
27304: PUSH
27305: LD_INT 1
27307: PLUS
27308: ARRAY
27309: ST_TO_ADDR
27310: GO 27441
27312: LD_INT 2
27314: DOUBLE
27315: EQUAL
27316: IFTRUE 27320
27318: GO 27376
27320: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
27321: LD_ADDR_VAR 0 9
27325: PUSH
27326: LD_VAR 0 17
27330: PUSH
27331: LD_VAR 0 18
27335: PUSH
27336: LD_VAR 0 19
27340: PUSH
27341: LD_VAR 0 20
27345: PUSH
27346: LD_VAR 0 21
27350: PUSH
27351: LD_VAR 0 22
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: PUSH
27364: LD_VAR 0 4
27368: PUSH
27369: LD_INT 1
27371: PLUS
27372: ARRAY
27373: ST_TO_ADDR
27374: GO 27441
27376: LD_INT 3
27378: DOUBLE
27379: EQUAL
27380: IFTRUE 27384
27382: GO 27440
27384: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
27385: LD_ADDR_VAR 0 9
27389: PUSH
27390: LD_VAR 0 23
27394: PUSH
27395: LD_VAR 0 24
27399: PUSH
27400: LD_VAR 0 25
27404: PUSH
27405: LD_VAR 0 26
27409: PUSH
27410: LD_VAR 0 27
27414: PUSH
27415: LD_VAR 0 28
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: PUSH
27428: LD_VAR 0 4
27432: PUSH
27433: LD_INT 1
27435: PLUS
27436: ARRAY
27437: ST_TO_ADDR
27438: GO 27441
27440: POP
27441: GO 27990
27443: LD_INT 2
27445: DOUBLE
27446: EQUAL
27447: IFTRUE 27457
27449: LD_INT 3
27451: DOUBLE
27452: EQUAL
27453: IFTRUE 27457
27455: GO 27513
27457: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
27458: LD_ADDR_VAR 0 9
27462: PUSH
27463: LD_VAR 0 29
27467: PUSH
27468: LD_VAR 0 30
27472: PUSH
27473: LD_VAR 0 31
27477: PUSH
27478: LD_VAR 0 32
27482: PUSH
27483: LD_VAR 0 33
27487: PUSH
27488: LD_VAR 0 34
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: PUSH
27501: LD_VAR 0 4
27505: PUSH
27506: LD_INT 1
27508: PLUS
27509: ARRAY
27510: ST_TO_ADDR
27511: GO 27990
27513: LD_INT 16
27515: DOUBLE
27516: EQUAL
27517: IFTRUE 27569
27519: LD_INT 17
27521: DOUBLE
27522: EQUAL
27523: IFTRUE 27569
27525: LD_INT 18
27527: DOUBLE
27528: EQUAL
27529: IFTRUE 27569
27531: LD_INT 19
27533: DOUBLE
27534: EQUAL
27535: IFTRUE 27569
27537: LD_INT 20
27539: DOUBLE
27540: EQUAL
27541: IFTRUE 27569
27543: LD_INT 21
27545: DOUBLE
27546: EQUAL
27547: IFTRUE 27569
27549: LD_INT 23
27551: DOUBLE
27552: EQUAL
27553: IFTRUE 27569
27555: LD_INT 24
27557: DOUBLE
27558: EQUAL
27559: IFTRUE 27569
27561: LD_INT 25
27563: DOUBLE
27564: EQUAL
27565: IFTRUE 27569
27567: GO 27625
27569: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
27570: LD_ADDR_VAR 0 9
27574: PUSH
27575: LD_VAR 0 35
27579: PUSH
27580: LD_VAR 0 36
27584: PUSH
27585: LD_VAR 0 37
27589: PUSH
27590: LD_VAR 0 38
27594: PUSH
27595: LD_VAR 0 39
27599: PUSH
27600: LD_VAR 0 40
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: PUSH
27613: LD_VAR 0 4
27617: PUSH
27618: LD_INT 1
27620: PLUS
27621: ARRAY
27622: ST_TO_ADDR
27623: GO 27990
27625: LD_INT 6
27627: DOUBLE
27628: EQUAL
27629: IFTRUE 27681
27631: LD_INT 7
27633: DOUBLE
27634: EQUAL
27635: IFTRUE 27681
27637: LD_INT 8
27639: DOUBLE
27640: EQUAL
27641: IFTRUE 27681
27643: LD_INT 13
27645: DOUBLE
27646: EQUAL
27647: IFTRUE 27681
27649: LD_INT 12
27651: DOUBLE
27652: EQUAL
27653: IFTRUE 27681
27655: LD_INT 15
27657: DOUBLE
27658: EQUAL
27659: IFTRUE 27681
27661: LD_INT 11
27663: DOUBLE
27664: EQUAL
27665: IFTRUE 27681
27667: LD_INT 14
27669: DOUBLE
27670: EQUAL
27671: IFTRUE 27681
27673: LD_INT 10
27675: DOUBLE
27676: EQUAL
27677: IFTRUE 27681
27679: GO 27737
27681: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
27682: LD_ADDR_VAR 0 9
27686: PUSH
27687: LD_VAR 0 41
27691: PUSH
27692: LD_VAR 0 42
27696: PUSH
27697: LD_VAR 0 43
27701: PUSH
27702: LD_VAR 0 44
27706: PUSH
27707: LD_VAR 0 45
27711: PUSH
27712: LD_VAR 0 46
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: PUSH
27725: LD_VAR 0 4
27729: PUSH
27730: LD_INT 1
27732: PLUS
27733: ARRAY
27734: ST_TO_ADDR
27735: GO 27990
27737: LD_INT 36
27739: DOUBLE
27740: EQUAL
27741: IFTRUE 27745
27743: GO 27801
27745: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
27746: LD_ADDR_VAR 0 9
27750: PUSH
27751: LD_VAR 0 47
27755: PUSH
27756: LD_VAR 0 48
27760: PUSH
27761: LD_VAR 0 49
27765: PUSH
27766: LD_VAR 0 50
27770: PUSH
27771: LD_VAR 0 51
27775: PUSH
27776: LD_VAR 0 52
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: PUSH
27789: LD_VAR 0 4
27793: PUSH
27794: LD_INT 1
27796: PLUS
27797: ARRAY
27798: ST_TO_ADDR
27799: GO 27990
27801: LD_INT 4
27803: DOUBLE
27804: EQUAL
27805: IFTRUE 27827
27807: LD_INT 5
27809: DOUBLE
27810: EQUAL
27811: IFTRUE 27827
27813: LD_INT 34
27815: DOUBLE
27816: EQUAL
27817: IFTRUE 27827
27819: LD_INT 37
27821: DOUBLE
27822: EQUAL
27823: IFTRUE 27827
27825: GO 27883
27827: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
27828: LD_ADDR_VAR 0 9
27832: PUSH
27833: LD_VAR 0 53
27837: PUSH
27838: LD_VAR 0 54
27842: PUSH
27843: LD_VAR 0 55
27847: PUSH
27848: LD_VAR 0 56
27852: PUSH
27853: LD_VAR 0 57
27857: PUSH
27858: LD_VAR 0 58
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: LIST
27867: LIST
27868: LIST
27869: LIST
27870: PUSH
27871: LD_VAR 0 4
27875: PUSH
27876: LD_INT 1
27878: PLUS
27879: ARRAY
27880: ST_TO_ADDR
27881: GO 27990
27883: LD_INT 31
27885: DOUBLE
27886: EQUAL
27887: IFTRUE 27933
27889: LD_INT 32
27891: DOUBLE
27892: EQUAL
27893: IFTRUE 27933
27895: LD_INT 33
27897: DOUBLE
27898: EQUAL
27899: IFTRUE 27933
27901: LD_INT 27
27903: DOUBLE
27904: EQUAL
27905: IFTRUE 27933
27907: LD_INT 26
27909: DOUBLE
27910: EQUAL
27911: IFTRUE 27933
27913: LD_INT 28
27915: DOUBLE
27916: EQUAL
27917: IFTRUE 27933
27919: LD_INT 29
27921: DOUBLE
27922: EQUAL
27923: IFTRUE 27933
27925: LD_INT 30
27927: DOUBLE
27928: EQUAL
27929: IFTRUE 27933
27931: GO 27989
27933: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
27934: LD_ADDR_VAR 0 9
27938: PUSH
27939: LD_VAR 0 59
27943: PUSH
27944: LD_VAR 0 60
27948: PUSH
27949: LD_VAR 0 61
27953: PUSH
27954: LD_VAR 0 62
27958: PUSH
27959: LD_VAR 0 63
27963: PUSH
27964: LD_VAR 0 64
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: LIST
27975: LIST
27976: PUSH
27977: LD_VAR 0 4
27981: PUSH
27982: LD_INT 1
27984: PLUS
27985: ARRAY
27986: ST_TO_ADDR
27987: GO 27990
27989: POP
// temp_list2 = [ ] ;
27990: LD_ADDR_VAR 0 10
27994: PUSH
27995: EMPTY
27996: ST_TO_ADDR
// for i in temp_list do
27997: LD_ADDR_VAR 0 8
28001: PUSH
28002: LD_VAR 0 9
28006: PUSH
28007: FOR_IN
28008: IFFALSE 28060
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
28010: LD_ADDR_VAR 0 10
28014: PUSH
28015: LD_VAR 0 10
28019: PUSH
28020: LD_VAR 0 8
28024: PUSH
28025: LD_INT 1
28027: ARRAY
28028: PUSH
28029: LD_VAR 0 2
28033: PLUS
28034: PUSH
28035: LD_VAR 0 8
28039: PUSH
28040: LD_INT 2
28042: ARRAY
28043: PUSH
28044: LD_VAR 0 3
28048: PLUS
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: PUSH
28054: EMPTY
28055: LIST
28056: ADD
28057: ST_TO_ADDR
28058: GO 28007
28060: POP
28061: POP
// result = temp_list2 ;
28062: LD_ADDR_VAR 0 7
28066: PUSH
28067: LD_VAR 0 10
28071: ST_TO_ADDR
// end ;
28072: LD_VAR 0 7
28076: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
28077: LD_INT 0
28079: PPUSH
28080: PPUSH
28081: PPUSH
// result := false ;
28082: LD_ADDR_VAR 0 4
28086: PUSH
28087: LD_INT 0
28089: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
28090: LD_VAR 0 1
28094: NOT
28095: PUSH
28096: LD_VAR 0 2
28100: NOT
28101: OR
28102: PUSH
28103: LD_VAR 0 1
28107: PPUSH
28108: CALL_OW 310
28112: OR
28113: IFFALSE 28117
// exit ;
28115: GO 28321
// if distance < 0 then
28117: LD_VAR 0 3
28121: PUSH
28122: LD_INT 0
28124: LESS
28125: IFFALSE 28135
// distance := 0 ;
28127: LD_ADDR_VAR 0 3
28131: PUSH
28132: LD_INT 0
28134: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
28135: LD_ADDR_VAR 0 6
28139: PUSH
28140: LD_VAR 0 2
28144: PPUSH
28145: CALL_OW 266
28149: PPUSH
28150: LD_VAR 0 2
28154: PPUSH
28155: CALL_OW 250
28159: PPUSH
28160: LD_VAR 0 2
28164: PPUSH
28165: CALL_OW 251
28169: PPUSH
28170: LD_VAR 0 2
28174: PPUSH
28175: CALL_OW 254
28179: PPUSH
28180: LD_VAR 0 2
28184: PPUSH
28185: CALL_OW 248
28189: PPUSH
28190: LD_INT 1
28192: PPUSH
28193: CALL 9538 0 6
28197: ST_TO_ADDR
// if not entrance then
28198: LD_VAR 0 6
28202: NOT
28203: IFFALSE 28207
// exit ;
28205: GO 28321
// for i in entrance do
28207: LD_ADDR_VAR 0 5
28211: PUSH
28212: LD_VAR 0 6
28216: PUSH
28217: FOR_IN
28218: IFFALSE 28319
// begin if not distance then
28220: LD_VAR 0 3
28224: NOT
28225: IFFALSE 28270
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
28227: LD_VAR 0 1
28231: PPUSH
28232: LD_VAR 0 5
28236: PUSH
28237: LD_INT 1
28239: ARRAY
28240: PPUSH
28241: LD_VAR 0 5
28245: PUSH
28246: LD_INT 2
28248: ARRAY
28249: PPUSH
28250: CALL_OW 307
28254: IFFALSE 28268
// begin result := true ;
28256: LD_ADDR_VAR 0 4
28260: PUSH
28261: LD_INT 1
28263: ST_TO_ADDR
// exit ;
28264: POP
28265: POP
28266: GO 28321
// end ; end else
28268: GO 28317
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
28270: LD_VAR 0 1
28274: PPUSH
28275: LD_VAR 0 5
28279: PUSH
28280: LD_INT 1
28282: ARRAY
28283: PPUSH
28284: LD_VAR 0 5
28288: PUSH
28289: LD_INT 2
28291: ARRAY
28292: PPUSH
28293: CALL_OW 297
28297: PUSH
28298: LD_VAR 0 3
28302: LESSEQUAL
28303: IFFALSE 28317
// begin result := true ;
28305: LD_ADDR_VAR 0 4
28309: PUSH
28310: LD_INT 1
28312: ST_TO_ADDR
// exit ;
28313: POP
28314: POP
28315: GO 28321
// end ; end ; end ;
28317: GO 28217
28319: POP
28320: POP
// end ;
28321: LD_VAR 0 4
28325: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
28326: LD_INT 0
28328: PPUSH
28329: PPUSH
28330: PPUSH
// result := false ;
28331: LD_ADDR_VAR 0 3
28335: PUSH
28336: LD_INT 0
28338: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
28339: LD_VAR 0 1
28343: NOT
28344: PUSH
28345: LD_VAR 0 2
28349: NOT
28350: OR
28351: PUSH
28352: LD_VAR 0 1
28356: PPUSH
28357: CALL_OW 302
28361: NOT
28362: OR
28363: PUSH
28364: LD_VAR 0 2
28368: PPUSH
28369: CALL_OW 302
28373: NOT
28374: OR
28375: IFFALSE 28379
// exit ;
28377: GO 28540
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
28379: LD_VAR 0 1
28383: PPUSH
28384: LD_INT 81
28386: PUSH
28387: LD_VAR 0 1
28391: PPUSH
28392: CALL_OW 255
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PUSH
28401: LD_INT 3
28403: PUSH
28404: LD_INT 21
28406: PUSH
28407: LD_INT 3
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: EMPTY
28419: LIST
28420: LIST
28421: PPUSH
28422: CALL_OW 69
28426: PPUSH
28427: LD_VAR 0 1
28431: PPUSH
28432: CALL_OW 74
28436: PPUSH
28437: CALL_OW 296
28441: PUSH
28442: LD_INT 8
28444: LESS
28445: IFFALSE 28449
// exit ;
28447: GO 28540
// building := IsInUnit ( unit2 ) ;
28449: LD_ADDR_VAR 0 5
28453: PUSH
28454: LD_VAR 0 2
28458: PPUSH
28459: CALL_OW 310
28463: ST_TO_ADDR
// if building then
28464: LD_VAR 0 5
28468: IFFALSE 28495
// result := IsNearbyEntrance ( unit , building , 2 ) else
28470: LD_ADDR_VAR 0 3
28474: PUSH
28475: LD_VAR 0 1
28479: PPUSH
28480: LD_VAR 0 5
28484: PPUSH
28485: LD_INT 2
28487: PPUSH
28488: CALL 28077 0 3
28492: ST_TO_ADDR
28493: GO 28540
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
28495: LD_ADDR_VAR 0 3
28499: PUSH
28500: LD_VAR 0 1
28504: PPUSH
28505: LD_VAR 0 2
28509: PPUSH
28510: CALL_OW 296
28514: PUSH
28515: LD_INT 6
28517: LESS
28518: PUSH
28519: LD_VAR 0 2
28523: PPUSH
28524: CALL_OW 255
28528: PPUSH
28529: LD_VAR 0 1
28533: PPUSH
28534: CALL_OW 292
28538: AND
28539: ST_TO_ADDR
// end ;
28540: LD_VAR 0 3
28544: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28545: LD_INT 0
28547: PPUSH
28548: PPUSH
28549: PPUSH
28550: PPUSH
// tmp := [ ] ;
28551: LD_ADDR_VAR 0 3
28555: PUSH
28556: EMPTY
28557: ST_TO_ADDR
// list := [ ] ;
28558: LD_ADDR_VAR 0 5
28562: PUSH
28563: EMPTY
28564: ST_TO_ADDR
// for i = 16 to 25 do
28565: LD_ADDR_VAR 0 4
28569: PUSH
28570: DOUBLE
28571: LD_INT 16
28573: DEC
28574: ST_TO_ADDR
28575: LD_INT 25
28577: PUSH
28578: FOR_TO
28579: IFFALSE 28652
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28581: LD_ADDR_VAR 0 3
28585: PUSH
28586: LD_VAR 0 3
28590: PUSH
28591: LD_INT 22
28593: PUSH
28594: LD_VAR 0 1
28598: PPUSH
28599: CALL_OW 255
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 91
28610: PUSH
28611: LD_VAR 0 1
28615: PUSH
28616: LD_INT 6
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: LIST
28623: PUSH
28624: LD_INT 30
28626: PUSH
28627: LD_VAR 0 4
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: EMPTY
28637: LIST
28638: LIST
28639: LIST
28640: PUSH
28641: EMPTY
28642: LIST
28643: PPUSH
28644: CALL_OW 69
28648: ADD
28649: ST_TO_ADDR
28650: GO 28578
28652: POP
28653: POP
// for i = 1 to tmp do
28654: LD_ADDR_VAR 0 4
28658: PUSH
28659: DOUBLE
28660: LD_INT 1
28662: DEC
28663: ST_TO_ADDR
28664: LD_VAR 0 3
28668: PUSH
28669: FOR_TO
28670: IFFALSE 28758
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28672: LD_ADDR_VAR 0 5
28676: PUSH
28677: LD_VAR 0 5
28681: PUSH
28682: LD_VAR 0 3
28686: PUSH
28687: LD_VAR 0 4
28691: ARRAY
28692: PPUSH
28693: CALL_OW 266
28697: PUSH
28698: LD_VAR 0 3
28702: PUSH
28703: LD_VAR 0 4
28707: ARRAY
28708: PPUSH
28709: CALL_OW 250
28713: PUSH
28714: LD_VAR 0 3
28718: PUSH
28719: LD_VAR 0 4
28723: ARRAY
28724: PPUSH
28725: CALL_OW 251
28729: PUSH
28730: LD_VAR 0 3
28734: PUSH
28735: LD_VAR 0 4
28739: ARRAY
28740: PPUSH
28741: CALL_OW 254
28745: PUSH
28746: EMPTY
28747: LIST
28748: LIST
28749: LIST
28750: LIST
28751: PUSH
28752: EMPTY
28753: LIST
28754: ADD
28755: ST_TO_ADDR
28756: GO 28669
28758: POP
28759: POP
// result := list ;
28760: LD_ADDR_VAR 0 2
28764: PUSH
28765: LD_VAR 0 5
28769: ST_TO_ADDR
// end ;
28770: LD_VAR 0 2
28774: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28775: LD_INT 0
28777: PPUSH
28778: PPUSH
28779: PPUSH
28780: PPUSH
28781: PPUSH
28782: PPUSH
28783: PPUSH
// if not factory then
28784: LD_VAR 0 1
28788: NOT
28789: IFFALSE 28793
// exit ;
28791: GO 29318
// if control = control_apeman then
28793: LD_VAR 0 4
28797: PUSH
28798: LD_INT 5
28800: EQUAL
28801: IFFALSE 28910
// begin tmp := UnitsInside ( factory ) ;
28803: LD_ADDR_VAR 0 8
28807: PUSH
28808: LD_VAR 0 1
28812: PPUSH
28813: CALL_OW 313
28817: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28818: LD_VAR 0 8
28822: PPUSH
28823: LD_INT 25
28825: PUSH
28826: LD_INT 12
28828: PUSH
28829: EMPTY
28830: LIST
28831: LIST
28832: PPUSH
28833: CALL_OW 72
28837: NOT
28838: IFFALSE 28848
// control := control_manual ;
28840: LD_ADDR_VAR 0 4
28844: PUSH
28845: LD_INT 1
28847: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28848: LD_ADDR_VAR 0 8
28852: PUSH
28853: LD_VAR 0 1
28857: PPUSH
28858: CALL 28545 0 1
28862: ST_TO_ADDR
// if tmp then
28863: LD_VAR 0 8
28867: IFFALSE 28910
// begin for i in tmp do
28869: LD_ADDR_VAR 0 7
28873: PUSH
28874: LD_VAR 0 8
28878: PUSH
28879: FOR_IN
28880: IFFALSE 28908
// if i [ 1 ] = b_ext_radar then
28882: LD_VAR 0 7
28886: PUSH
28887: LD_INT 1
28889: ARRAY
28890: PUSH
28891: LD_INT 20
28893: EQUAL
28894: IFFALSE 28906
// begin control := control_remote ;
28896: LD_ADDR_VAR 0 4
28900: PUSH
28901: LD_INT 2
28903: ST_TO_ADDR
// break ;
28904: GO 28908
// end ;
28906: GO 28879
28908: POP
28909: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28910: LD_VAR 0 1
28914: PPUSH
28915: LD_VAR 0 2
28919: PPUSH
28920: LD_VAR 0 3
28924: PPUSH
28925: LD_VAR 0 4
28929: PPUSH
28930: LD_VAR 0 5
28934: PPUSH
28935: CALL_OW 448
28939: IFFALSE 28974
// begin result := [ chassis , engine , control , weapon ] ;
28941: LD_ADDR_VAR 0 6
28945: PUSH
28946: LD_VAR 0 2
28950: PUSH
28951: LD_VAR 0 3
28955: PUSH
28956: LD_VAR 0 4
28960: PUSH
28961: LD_VAR 0 5
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: LIST
28970: LIST
28971: ST_TO_ADDR
// exit ;
28972: GO 29318
// end ; _chassis := AvailableChassisList ( factory ) ;
28974: LD_ADDR_VAR 0 9
28978: PUSH
28979: LD_VAR 0 1
28983: PPUSH
28984: CALL_OW 475
28988: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28989: LD_ADDR_VAR 0 11
28993: PUSH
28994: LD_VAR 0 1
28998: PPUSH
28999: CALL_OW 476
29003: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29004: LD_ADDR_VAR 0 12
29008: PUSH
29009: LD_VAR 0 1
29013: PPUSH
29014: CALL_OW 477
29018: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29019: LD_ADDR_VAR 0 10
29023: PUSH
29024: LD_VAR 0 1
29028: PPUSH
29029: CALL_OW 478
29033: ST_TO_ADDR
// if not chassis in _chassis then
29034: LD_VAR 0 2
29038: PUSH
29039: LD_VAR 0 9
29043: IN
29044: NOT
29045: IFFALSE 29071
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29047: LD_ADDR_VAR 0 2
29051: PUSH
29052: LD_VAR 0 9
29056: PUSH
29057: LD_INT 1
29059: PPUSH
29060: LD_VAR 0 9
29064: PPUSH
29065: CALL_OW 12
29069: ARRAY
29070: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29071: LD_VAR 0 2
29075: PPUSH
29076: LD_VAR 0 3
29080: PPUSH
29081: CALL 29323 0 2
29085: NOT
29086: IFFALSE 29145
// repeat engine := _engine [ 1 ] ;
29088: LD_ADDR_VAR 0 3
29092: PUSH
29093: LD_VAR 0 11
29097: PUSH
29098: LD_INT 1
29100: ARRAY
29101: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29102: LD_ADDR_VAR 0 11
29106: PUSH
29107: LD_VAR 0 11
29111: PPUSH
29112: LD_INT 1
29114: PPUSH
29115: CALL_OW 3
29119: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29120: LD_VAR 0 2
29124: PPUSH
29125: LD_VAR 0 3
29129: PPUSH
29130: CALL 29323 0 2
29134: PUSH
29135: LD_VAR 0 11
29139: PUSH
29140: EMPTY
29141: EQUAL
29142: OR
29143: IFFALSE 29088
// if not control in _control then
29145: LD_VAR 0 4
29149: PUSH
29150: LD_VAR 0 12
29154: IN
29155: NOT
29156: IFFALSE 29182
// control := _control [ rand ( 1 , _control ) ] ;
29158: LD_ADDR_VAR 0 4
29162: PUSH
29163: LD_VAR 0 12
29167: PUSH
29168: LD_INT 1
29170: PPUSH
29171: LD_VAR 0 12
29175: PPUSH
29176: CALL_OW 12
29180: ARRAY
29181: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29182: LD_VAR 0 2
29186: PPUSH
29187: LD_VAR 0 5
29191: PPUSH
29192: CALL 29543 0 2
29196: NOT
29197: IFFALSE 29256
// repeat weapon := _weapon [ 1 ] ;
29199: LD_ADDR_VAR 0 5
29203: PUSH
29204: LD_VAR 0 10
29208: PUSH
29209: LD_INT 1
29211: ARRAY
29212: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29213: LD_ADDR_VAR 0 10
29217: PUSH
29218: LD_VAR 0 10
29222: PPUSH
29223: LD_INT 1
29225: PPUSH
29226: CALL_OW 3
29230: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29231: LD_VAR 0 2
29235: PPUSH
29236: LD_VAR 0 5
29240: PPUSH
29241: CALL 29543 0 2
29245: PUSH
29246: LD_VAR 0 10
29250: PUSH
29251: EMPTY
29252: EQUAL
29253: OR
29254: IFFALSE 29199
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29256: LD_VAR 0 1
29260: PPUSH
29261: LD_VAR 0 2
29265: PPUSH
29266: LD_VAR 0 3
29270: PPUSH
29271: LD_VAR 0 4
29275: PPUSH
29276: LD_VAR 0 5
29280: PPUSH
29281: CALL_OW 448
29285: IFFALSE 29318
// result := [ chassis , engine , control , weapon ] ;
29287: LD_ADDR_VAR 0 6
29291: PUSH
29292: LD_VAR 0 2
29296: PUSH
29297: LD_VAR 0 3
29301: PUSH
29302: LD_VAR 0 4
29306: PUSH
29307: LD_VAR 0 5
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: ST_TO_ADDR
// end ;
29318: LD_VAR 0 6
29322: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29323: LD_INT 0
29325: PPUSH
// if not chassis or not engine then
29326: LD_VAR 0 1
29330: NOT
29331: PUSH
29332: LD_VAR 0 2
29336: NOT
29337: OR
29338: IFFALSE 29342
// exit ;
29340: GO 29538
// case engine of engine_solar :
29342: LD_VAR 0 2
29346: PUSH
29347: LD_INT 2
29349: DOUBLE
29350: EQUAL
29351: IFTRUE 29355
29353: GO 29393
29355: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29356: LD_ADDR_VAR 0 3
29360: PUSH
29361: LD_INT 11
29363: PUSH
29364: LD_INT 12
29366: PUSH
29367: LD_INT 13
29369: PUSH
29370: LD_INT 14
29372: PUSH
29373: LD_INT 1
29375: PUSH
29376: LD_INT 2
29378: PUSH
29379: LD_INT 3
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: ST_TO_ADDR
29391: GO 29522
29393: LD_INT 1
29395: DOUBLE
29396: EQUAL
29397: IFTRUE 29401
29399: GO 29463
29401: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29402: LD_ADDR_VAR 0 3
29406: PUSH
29407: LD_INT 11
29409: PUSH
29410: LD_INT 12
29412: PUSH
29413: LD_INT 13
29415: PUSH
29416: LD_INT 14
29418: PUSH
29419: LD_INT 1
29421: PUSH
29422: LD_INT 2
29424: PUSH
29425: LD_INT 3
29427: PUSH
29428: LD_INT 4
29430: PUSH
29431: LD_INT 5
29433: PUSH
29434: LD_INT 21
29436: PUSH
29437: LD_INT 23
29439: PUSH
29440: LD_INT 22
29442: PUSH
29443: LD_INT 24
29445: PUSH
29446: EMPTY
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: ST_TO_ADDR
29461: GO 29522
29463: LD_INT 3
29465: DOUBLE
29466: EQUAL
29467: IFTRUE 29471
29469: GO 29521
29471: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29472: LD_ADDR_VAR 0 3
29476: PUSH
29477: LD_INT 13
29479: PUSH
29480: LD_INT 14
29482: PUSH
29483: LD_INT 2
29485: PUSH
29486: LD_INT 3
29488: PUSH
29489: LD_INT 4
29491: PUSH
29492: LD_INT 5
29494: PUSH
29495: LD_INT 21
29497: PUSH
29498: LD_INT 22
29500: PUSH
29501: LD_INT 23
29503: PUSH
29504: LD_INT 24
29506: PUSH
29507: EMPTY
29508: LIST
29509: LIST
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: LIST
29518: ST_TO_ADDR
29519: GO 29522
29521: POP
// result := ( chassis in result ) ;
29522: LD_ADDR_VAR 0 3
29526: PUSH
29527: LD_VAR 0 1
29531: PUSH
29532: LD_VAR 0 3
29536: IN
29537: ST_TO_ADDR
// end ;
29538: LD_VAR 0 3
29542: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29543: LD_INT 0
29545: PPUSH
// if not chassis or not weapon then
29546: LD_VAR 0 1
29550: NOT
29551: PUSH
29552: LD_VAR 0 2
29556: NOT
29557: OR
29558: IFFALSE 29562
// exit ;
29560: GO 30588
// case weapon of us_machine_gun :
29562: LD_VAR 0 2
29566: PUSH
29567: LD_INT 2
29569: DOUBLE
29570: EQUAL
29571: IFTRUE 29575
29573: GO 29605
29575: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29576: LD_ADDR_VAR 0 3
29580: PUSH
29581: LD_INT 1
29583: PUSH
29584: LD_INT 2
29586: PUSH
29587: LD_INT 3
29589: PUSH
29590: LD_INT 4
29592: PUSH
29593: LD_INT 5
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: LIST
29600: LIST
29601: LIST
29602: ST_TO_ADDR
29603: GO 30572
29605: LD_INT 3
29607: DOUBLE
29608: EQUAL
29609: IFTRUE 29613
29611: GO 29643
29613: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29614: LD_ADDR_VAR 0 3
29618: PUSH
29619: LD_INT 1
29621: PUSH
29622: LD_INT 2
29624: PUSH
29625: LD_INT 3
29627: PUSH
29628: LD_INT 4
29630: PUSH
29631: LD_INT 5
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: ST_TO_ADDR
29641: GO 30572
29643: LD_INT 11
29645: DOUBLE
29646: EQUAL
29647: IFTRUE 29651
29649: GO 29681
29651: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29652: LD_ADDR_VAR 0 3
29656: PUSH
29657: LD_INT 1
29659: PUSH
29660: LD_INT 2
29662: PUSH
29663: LD_INT 3
29665: PUSH
29666: LD_INT 4
29668: PUSH
29669: LD_INT 5
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: LIST
29676: LIST
29677: LIST
29678: ST_TO_ADDR
29679: GO 30572
29681: LD_INT 4
29683: DOUBLE
29684: EQUAL
29685: IFTRUE 29689
29687: GO 29715
29689: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29690: LD_ADDR_VAR 0 3
29694: PUSH
29695: LD_INT 2
29697: PUSH
29698: LD_INT 3
29700: PUSH
29701: LD_INT 4
29703: PUSH
29704: LD_INT 5
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: LIST
29711: LIST
29712: ST_TO_ADDR
29713: GO 30572
29715: LD_INT 5
29717: DOUBLE
29718: EQUAL
29719: IFTRUE 29723
29721: GO 29749
29723: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29724: LD_ADDR_VAR 0 3
29728: PUSH
29729: LD_INT 2
29731: PUSH
29732: LD_INT 3
29734: PUSH
29735: LD_INT 4
29737: PUSH
29738: LD_INT 5
29740: PUSH
29741: EMPTY
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: ST_TO_ADDR
29747: GO 30572
29749: LD_INT 9
29751: DOUBLE
29752: EQUAL
29753: IFTRUE 29757
29755: GO 29783
29757: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29758: LD_ADDR_VAR 0 3
29762: PUSH
29763: LD_INT 2
29765: PUSH
29766: LD_INT 3
29768: PUSH
29769: LD_INT 4
29771: PUSH
29772: LD_INT 5
29774: PUSH
29775: EMPTY
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: ST_TO_ADDR
29781: GO 30572
29783: LD_INT 7
29785: DOUBLE
29786: EQUAL
29787: IFTRUE 29791
29789: GO 29817
29791: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29792: LD_ADDR_VAR 0 3
29796: PUSH
29797: LD_INT 2
29799: PUSH
29800: LD_INT 3
29802: PUSH
29803: LD_INT 4
29805: PUSH
29806: LD_INT 5
29808: PUSH
29809: EMPTY
29810: LIST
29811: LIST
29812: LIST
29813: LIST
29814: ST_TO_ADDR
29815: GO 30572
29817: LD_INT 12
29819: DOUBLE
29820: EQUAL
29821: IFTRUE 29825
29823: GO 29851
29825: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29826: LD_ADDR_VAR 0 3
29830: PUSH
29831: LD_INT 2
29833: PUSH
29834: LD_INT 3
29836: PUSH
29837: LD_INT 4
29839: PUSH
29840: LD_INT 5
29842: PUSH
29843: EMPTY
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: ST_TO_ADDR
29849: GO 30572
29851: LD_INT 13
29853: DOUBLE
29854: EQUAL
29855: IFTRUE 29859
29857: GO 29885
29859: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29860: LD_ADDR_VAR 0 3
29864: PUSH
29865: LD_INT 2
29867: PUSH
29868: LD_INT 3
29870: PUSH
29871: LD_INT 4
29873: PUSH
29874: LD_INT 5
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: ST_TO_ADDR
29883: GO 30572
29885: LD_INT 14
29887: DOUBLE
29888: EQUAL
29889: IFTRUE 29893
29891: GO 29911
29893: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29894: LD_ADDR_VAR 0 3
29898: PUSH
29899: LD_INT 4
29901: PUSH
29902: LD_INT 5
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: ST_TO_ADDR
29909: GO 30572
29911: LD_INT 6
29913: DOUBLE
29914: EQUAL
29915: IFTRUE 29919
29917: GO 29937
29919: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29920: LD_ADDR_VAR 0 3
29924: PUSH
29925: LD_INT 4
29927: PUSH
29928: LD_INT 5
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: ST_TO_ADDR
29935: GO 30572
29937: LD_INT 10
29939: DOUBLE
29940: EQUAL
29941: IFTRUE 29945
29943: GO 29963
29945: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29946: LD_ADDR_VAR 0 3
29950: PUSH
29951: LD_INT 4
29953: PUSH
29954: LD_INT 5
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: ST_TO_ADDR
29961: GO 30572
29963: LD_INT 22
29965: DOUBLE
29966: EQUAL
29967: IFTRUE 29971
29969: GO 29997
29971: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29972: LD_ADDR_VAR 0 3
29976: PUSH
29977: LD_INT 11
29979: PUSH
29980: LD_INT 12
29982: PUSH
29983: LD_INT 13
29985: PUSH
29986: LD_INT 14
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: ST_TO_ADDR
29995: GO 30572
29997: LD_INT 23
29999: DOUBLE
30000: EQUAL
30001: IFTRUE 30005
30003: GO 30031
30005: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30006: LD_ADDR_VAR 0 3
30010: PUSH
30011: LD_INT 11
30013: PUSH
30014: LD_INT 12
30016: PUSH
30017: LD_INT 13
30019: PUSH
30020: LD_INT 14
30022: PUSH
30023: EMPTY
30024: LIST
30025: LIST
30026: LIST
30027: LIST
30028: ST_TO_ADDR
30029: GO 30572
30031: LD_INT 24
30033: DOUBLE
30034: EQUAL
30035: IFTRUE 30039
30037: GO 30065
30039: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30040: LD_ADDR_VAR 0 3
30044: PUSH
30045: LD_INT 11
30047: PUSH
30048: LD_INT 12
30050: PUSH
30051: LD_INT 13
30053: PUSH
30054: LD_INT 14
30056: PUSH
30057: EMPTY
30058: LIST
30059: LIST
30060: LIST
30061: LIST
30062: ST_TO_ADDR
30063: GO 30572
30065: LD_INT 30
30067: DOUBLE
30068: EQUAL
30069: IFTRUE 30073
30071: GO 30099
30073: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30074: LD_ADDR_VAR 0 3
30078: PUSH
30079: LD_INT 11
30081: PUSH
30082: LD_INT 12
30084: PUSH
30085: LD_INT 13
30087: PUSH
30088: LD_INT 14
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: LIST
30095: LIST
30096: ST_TO_ADDR
30097: GO 30572
30099: LD_INT 25
30101: DOUBLE
30102: EQUAL
30103: IFTRUE 30107
30105: GO 30125
30107: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30108: LD_ADDR_VAR 0 3
30112: PUSH
30113: LD_INT 13
30115: PUSH
30116: LD_INT 14
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: ST_TO_ADDR
30123: GO 30572
30125: LD_INT 27
30127: DOUBLE
30128: EQUAL
30129: IFTRUE 30133
30131: GO 30151
30133: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30134: LD_ADDR_VAR 0 3
30138: PUSH
30139: LD_INT 13
30141: PUSH
30142: LD_INT 14
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: ST_TO_ADDR
30149: GO 30572
30151: LD_INT 28
30153: DOUBLE
30154: EQUAL
30155: IFTRUE 30159
30157: GO 30177
30159: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30160: LD_ADDR_VAR 0 3
30164: PUSH
30165: LD_INT 13
30167: PUSH
30168: LD_INT 14
30170: PUSH
30171: EMPTY
30172: LIST
30173: LIST
30174: ST_TO_ADDR
30175: GO 30572
30177: LD_INT 29
30179: DOUBLE
30180: EQUAL
30181: IFTRUE 30185
30183: GO 30203
30185: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30186: LD_ADDR_VAR 0 3
30190: PUSH
30191: LD_INT 13
30193: PUSH
30194: LD_INT 14
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: ST_TO_ADDR
30201: GO 30572
30203: LD_INT 31
30205: DOUBLE
30206: EQUAL
30207: IFTRUE 30211
30209: GO 30229
30211: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30212: LD_ADDR_VAR 0 3
30216: PUSH
30217: LD_INT 13
30219: PUSH
30220: LD_INT 14
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: ST_TO_ADDR
30227: GO 30572
30229: LD_INT 26
30231: DOUBLE
30232: EQUAL
30233: IFTRUE 30237
30235: GO 30255
30237: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30238: LD_ADDR_VAR 0 3
30242: PUSH
30243: LD_INT 13
30245: PUSH
30246: LD_INT 14
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: ST_TO_ADDR
30253: GO 30572
30255: LD_INT 42
30257: DOUBLE
30258: EQUAL
30259: IFTRUE 30263
30261: GO 30289
30263: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30264: LD_ADDR_VAR 0 3
30268: PUSH
30269: LD_INT 21
30271: PUSH
30272: LD_INT 22
30274: PUSH
30275: LD_INT 23
30277: PUSH
30278: LD_INT 24
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: ST_TO_ADDR
30287: GO 30572
30289: LD_INT 43
30291: DOUBLE
30292: EQUAL
30293: IFTRUE 30297
30295: GO 30323
30297: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30298: LD_ADDR_VAR 0 3
30302: PUSH
30303: LD_INT 21
30305: PUSH
30306: LD_INT 22
30308: PUSH
30309: LD_INT 23
30311: PUSH
30312: LD_INT 24
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: ST_TO_ADDR
30321: GO 30572
30323: LD_INT 44
30325: DOUBLE
30326: EQUAL
30327: IFTRUE 30331
30329: GO 30357
30331: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30332: LD_ADDR_VAR 0 3
30336: PUSH
30337: LD_INT 21
30339: PUSH
30340: LD_INT 22
30342: PUSH
30343: LD_INT 23
30345: PUSH
30346: LD_INT 24
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: LIST
30353: LIST
30354: ST_TO_ADDR
30355: GO 30572
30357: LD_INT 45
30359: DOUBLE
30360: EQUAL
30361: IFTRUE 30365
30363: GO 30391
30365: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30366: LD_ADDR_VAR 0 3
30370: PUSH
30371: LD_INT 21
30373: PUSH
30374: LD_INT 22
30376: PUSH
30377: LD_INT 23
30379: PUSH
30380: LD_INT 24
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: ST_TO_ADDR
30389: GO 30572
30391: LD_INT 49
30393: DOUBLE
30394: EQUAL
30395: IFTRUE 30399
30397: GO 30425
30399: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30400: LD_ADDR_VAR 0 3
30404: PUSH
30405: LD_INT 21
30407: PUSH
30408: LD_INT 22
30410: PUSH
30411: LD_INT 23
30413: PUSH
30414: LD_INT 24
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: LIST
30421: LIST
30422: ST_TO_ADDR
30423: GO 30572
30425: LD_INT 51
30427: DOUBLE
30428: EQUAL
30429: IFTRUE 30433
30431: GO 30459
30433: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30434: LD_ADDR_VAR 0 3
30438: PUSH
30439: LD_INT 21
30441: PUSH
30442: LD_INT 22
30444: PUSH
30445: LD_INT 23
30447: PUSH
30448: LD_INT 24
30450: PUSH
30451: EMPTY
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: ST_TO_ADDR
30457: GO 30572
30459: LD_INT 52
30461: DOUBLE
30462: EQUAL
30463: IFTRUE 30467
30465: GO 30493
30467: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30468: LD_ADDR_VAR 0 3
30472: PUSH
30473: LD_INT 21
30475: PUSH
30476: LD_INT 22
30478: PUSH
30479: LD_INT 23
30481: PUSH
30482: LD_INT 24
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: LIST
30489: LIST
30490: ST_TO_ADDR
30491: GO 30572
30493: LD_INT 53
30495: DOUBLE
30496: EQUAL
30497: IFTRUE 30501
30499: GO 30519
30501: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30502: LD_ADDR_VAR 0 3
30506: PUSH
30507: LD_INT 23
30509: PUSH
30510: LD_INT 24
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: ST_TO_ADDR
30517: GO 30572
30519: LD_INT 46
30521: DOUBLE
30522: EQUAL
30523: IFTRUE 30527
30525: GO 30545
30527: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30528: LD_ADDR_VAR 0 3
30532: PUSH
30533: LD_INT 23
30535: PUSH
30536: LD_INT 24
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: ST_TO_ADDR
30543: GO 30572
30545: LD_INT 47
30547: DOUBLE
30548: EQUAL
30549: IFTRUE 30553
30551: GO 30571
30553: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30554: LD_ADDR_VAR 0 3
30558: PUSH
30559: LD_INT 23
30561: PUSH
30562: LD_INT 24
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: ST_TO_ADDR
30569: GO 30572
30571: POP
// result := ( chassis in result ) ;
30572: LD_ADDR_VAR 0 3
30576: PUSH
30577: LD_VAR 0 1
30581: PUSH
30582: LD_VAR 0 3
30586: IN
30587: ST_TO_ADDR
// end ;
30588: LD_VAR 0 3
30592: RET
// export function PrepareNature ; var i , animal , nat_area ; begin
30593: LD_INT 0
30595: PPUSH
30596: PPUSH
30597: PPUSH
30598: PPUSH
// uc_side = 0 ;
30599: LD_ADDR_OWVAR 20
30603: PUSH
30604: LD_INT 0
30606: ST_TO_ADDR
// uc_nation = 0 ;
30607: LD_ADDR_OWVAR 21
30611: PUSH
30612: LD_INT 0
30614: ST_TO_ADDR
// nat_area := nature_area ;
30615: LD_ADDR_VAR 0 4
30619: PUSH
30620: LD_INT 24
30622: ST_TO_ADDR
// InitHc ;
30623: CALL_OW 19
// for i = 1 to 4 do
30627: LD_ADDR_VAR 0 2
30631: PUSH
30632: DOUBLE
30633: LD_INT 1
30635: DEC
30636: ST_TO_ADDR
30637: LD_INT 4
30639: PUSH
30640: FOR_TO
30641: IFFALSE 30688
// begin hc_class = 18 ;
30643: LD_ADDR_OWVAR 28
30647: PUSH
30648: LD_INT 18
30650: ST_TO_ADDR
// hc_gallery =  ;
30651: LD_ADDR_OWVAR 33
30655: PUSH
30656: LD_STRING 
30658: ST_TO_ADDR
// animal := CreateHuman ;
30659: LD_ADDR_VAR 0 3
30663: PUSH
30664: CALL_OW 44
30668: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
30669: LD_VAR 0 3
30673: PPUSH
30674: LD_VAR 0 4
30678: PPUSH
30679: LD_INT 0
30681: PPUSH
30682: CALL_OW 49
// end ;
30686: GO 30640
30688: POP
30689: POP
// for i = 1 to 3 do
30690: LD_ADDR_VAR 0 2
30694: PUSH
30695: DOUBLE
30696: LD_INT 1
30698: DEC
30699: ST_TO_ADDR
30700: LD_INT 3
30702: PUSH
30703: FOR_TO
30704: IFFALSE 30798
// begin hc_class = class_apeman ;
30706: LD_ADDR_OWVAR 28
30710: PUSH
30711: LD_INT 12
30713: ST_TO_ADDR
// hc_gallery =  ;
30714: LD_ADDR_OWVAR 33
30718: PUSH
30719: LD_STRING 
30721: ST_TO_ADDR
// hc_agressivity = 0 ;
30722: LD_ADDR_OWVAR 35
30726: PUSH
30727: LD_INT 0
30729: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
30730: LD_ADDR_OWVAR 31
30734: PUSH
30735: LD_INT 1
30737: PPUSH
30738: LD_INT 3
30740: PPUSH
30741: CALL_OW 12
30745: PUSH
30746: LD_INT 1
30748: PPUSH
30749: LD_INT 3
30751: PPUSH
30752: CALL_OW 12
30756: PUSH
30757: LD_INT 0
30759: PUSH
30760: LD_INT 0
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: ST_TO_ADDR
// animal := CreateHuman ;
30769: LD_ADDR_VAR 0 3
30773: PUSH
30774: CALL_OW 44
30778: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
30779: LD_VAR 0 3
30783: PPUSH
30784: LD_VAR 0 4
30788: PPUSH
30789: LD_INT 0
30791: PPUSH
30792: CALL_OW 49
// end ;
30796: GO 30703
30798: POP
30799: POP
// for i = 1 to 3 do
30800: LD_ADDR_VAR 0 2
30804: PUSH
30805: DOUBLE
30806: LD_INT 1
30808: DEC
30809: ST_TO_ADDR
30810: LD_INT 3
30812: PUSH
30813: FOR_TO
30814: IFFALSE 30861
// begin hc_class = 13 ;
30816: LD_ADDR_OWVAR 28
30820: PUSH
30821: LD_INT 13
30823: ST_TO_ADDR
// hc_gallery =  ;
30824: LD_ADDR_OWVAR 33
30828: PUSH
30829: LD_STRING 
30831: ST_TO_ADDR
// animal := CreateHuman ;
30832: LD_ADDR_VAR 0 3
30836: PUSH
30837: CALL_OW 44
30841: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
30842: LD_VAR 0 3
30846: PPUSH
30847: LD_VAR 0 4
30851: PPUSH
30852: LD_INT 0
30854: PPUSH
30855: CALL_OW 49
// end ;
30859: GO 30813
30861: POP
30862: POP
// for i = 1 to 3 do
30863: LD_ADDR_VAR 0 2
30867: PUSH
30868: DOUBLE
30869: LD_INT 1
30871: DEC
30872: ST_TO_ADDR
30873: LD_INT 3
30875: PUSH
30876: FOR_TO
30877: IFFALSE 30922
// begin hc_class = 20 ;
30879: LD_ADDR_OWVAR 28
30883: PUSH
30884: LD_INT 20
30886: ST_TO_ADDR
// hc_gallery =  ;
30887: LD_ADDR_OWVAR 33
30891: PUSH
30892: LD_STRING 
30894: ST_TO_ADDR
// animal := CreateHuman ;
30895: LD_ADDR_VAR 0 3
30899: PUSH
30900: CALL_OW 44
30904: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
30905: LD_VAR 0 3
30909: PPUSH
30910: LD_INT 4
30912: PPUSH
30913: LD_INT 0
30915: PPUSH
30916: CALL_OW 49
// end ;
30920: GO 30876
30922: POP
30923: POP
// end ; end_of_file
30924: LD_VAR 0 1
30928: RET
// export function Action ; begin
30929: LD_INT 0
30931: PPUSH
// InGameOn ;
30932: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
30936: LD_EXP 14
30940: PPUSH
30941: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
30945: LD_EXP 14
30949: PPUSH
30950: LD_STRING D1-JMM-1
30952: PPUSH
30953: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
30957: LD_EXP 15
30961: PPUSH
30962: LD_STRING D1-Roth-1
30964: PPUSH
30965: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
30969: LD_EXP 14
30973: PPUSH
30974: LD_STRING D1-JMM-2
30976: PPUSH
30977: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
30981: LD_EXP 15
30985: PPUSH
30986: LD_STRING D1-Roth-2
30988: PPUSH
30989: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
30993: LD_EXP 14
30997: PPUSH
30998: LD_STRING D1-JMM-3
31000: PPUSH
31001: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
31005: LD_EXP 15
31009: PPUSH
31010: LD_STRING D1-Roth-3
31012: PPUSH
31013: CALL_OW 88
// ComInvisible ( Roth ) ;
31017: LD_EXP 15
31021: PPUSH
31022: CALL_OW 152
// wait ( 0 0$1.3 ) ;
31026: LD_INT 46
31028: PPUSH
31029: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
31033: LD_EXP 14
31037: PPUSH
31038: LD_STRING D1-JMM-4
31040: PPUSH
31041: CALL_OW 88
// wait ( 0 0$0.3 ) ;
31045: LD_INT 10
31047: PPUSH
31048: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
31052: LD_EXP 15
31056: PPUSH
31057: LD_EXP 14
31061: PPUSH
31062: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
31066: LD_EXP 14
31070: PPUSH
31071: LD_STRING D1-JMM-4a
31073: PPUSH
31074: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
31078: LD_EXP 15
31082: PPUSH
31083: LD_STRING D1-Roth-4
31085: PPUSH
31086: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
31090: LD_EXP 14
31094: PPUSH
31095: LD_STRING D1-JMM-5
31097: PPUSH
31098: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
31102: LD_EXP 15
31106: PPUSH
31107: LD_STRING D1-Roth-5
31109: PPUSH
31110: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
31114: LD_EXP 14
31118: PPUSH
31119: LD_STRING D1-JMM-6
31121: PPUSH
31122: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
31126: LD_EXP 15
31130: PPUSH
31131: LD_STRING D1-Roth-6
31133: PPUSH
31134: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
31138: LD_EXP 14
31142: PPUSH
31143: LD_STRING D1-JMM-7
31145: PPUSH
31146: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
31150: LD_EXP 16
31154: PPUSH
31155: LD_EXP 14
31159: PPUSH
31160: CALL_OW 250
31164: PPUSH
31165: LD_EXP 14
31169: PPUSH
31170: CALL_OW 251
31174: PPUSH
31175: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
31179: LD_EXP 15
31183: PPUSH
31184: LD_STRING D1-Roth-7
31186: PPUSH
31187: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
31191: LD_INT 10
31193: PPUSH
31194: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
31198: LD_EXP 16
31202: PPUSH
31203: LD_EXP 14
31207: PPUSH
31208: CALL_OW 296
31212: PUSH
31213: LD_INT 6
31215: LESS
31216: IFFALSE 31191
// ComTurnUnit ( Powell , JMM ) ;
31218: LD_EXP 16
31222: PPUSH
31223: LD_EXP 14
31227: PPUSH
31228: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
31232: LD_EXP 16
31236: PPUSH
31237: LD_STRING D1-Pow-7
31239: PPUSH
31240: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
31244: LD_EXP 14
31248: PPUSH
31249: LD_EXP 16
31253: PPUSH
31254: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
31258: LD_EXP 15
31262: PPUSH
31263: LD_EXP 16
31267: PPUSH
31268: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
31272: LD_EXP 14
31276: PPUSH
31277: LD_STRING D1-JMM-8
31279: PPUSH
31280: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
31284: LD_EXP 16
31288: PPUSH
31289: LD_STRING D1-Pow-8
31291: PPUSH
31292: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
31296: LD_EXP 14
31300: PPUSH
31301: LD_STRING D1-JMM-9
31303: PPUSH
31304: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
31308: LD_EXP 16
31312: PPUSH
31313: LD_INT 124
31315: PPUSH
31316: LD_INT 61
31318: PPUSH
31319: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31323: LD_INT 35
31325: PPUSH
31326: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
31330: LD_EXP 14
31334: PPUSH
31335: LD_EXP 16
31339: PPUSH
31340: CALL_OW 296
31344: PUSH
31345: LD_INT 6
31347: GREATER
31348: IFFALSE 31323
// SayRadio ( Powell , D1-Pow-9 ) ;
31350: LD_EXP 16
31354: PPUSH
31355: LD_STRING D1-Pow-9
31357: PPUSH
31358: CALL_OW 94
// RemoveUnit ( Powell ) ;
31362: LD_EXP 16
31366: PPUSH
31367: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
31371: LD_EXP 16
31375: PPUSH
31376: LD_INT 18
31378: PPUSH
31379: CALL_OW 52
// if Joan and not Joan in selected then
31383: LD_EXP 36
31387: PUSH
31388: LD_EXP 36
31392: PUSH
31393: LD_EXP 3
31397: IN
31398: NOT
31399: AND
31400: IFFALSE 31414
// SayRadio ( Joan , D1-Joan-9 ) ;
31402: LD_EXP 36
31406: PPUSH
31407: LD_STRING D1-Joan-9
31409: PPUSH
31410: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
31414: LD_EXP 15
31418: PPUSH
31419: LD_EXP 14
31423: PPUSH
31424: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
31428: LD_EXP 14
31432: PPUSH
31433: LD_EXP 15
31437: PPUSH
31438: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
31442: LD_EXP 15
31446: PPUSH
31447: LD_STRING D1-Roth-9
31449: PPUSH
31450: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
31454: LD_EXP 14
31458: PPUSH
31459: LD_STRING D1-JMM-10
31461: PPUSH
31462: CALL_OW 88
// InGameOff ;
31466: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
31470: LD_STRING M1
31472: PPUSH
31473: CALL_OW 337
// if Difficulty < 3 then
31477: LD_OWVAR 67
31481: PUSH
31482: LD_INT 3
31484: LESS
31485: IFFALSE 31497
// ChangeSideFog ( 4 , 7 ) ;
31487: LD_INT 4
31489: PPUSH
31490: LD_INT 7
31492: PPUSH
31493: CALL_OW 343
// SaveForQuickRestart ;
31497: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
31501: LD_INT 7
31503: PPUSH
31504: LD_INT 1
31506: PPUSH
31507: LD_INT 2
31509: PPUSH
31510: LD_INT 1
31512: PPUSH
31513: CALL_OW 80
// wait ( 0 0$3 ) ;
31517: LD_INT 105
31519: PPUSH
31520: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
31524: LD_EXP 15
31528: PPUSH
31529: LD_INT 124
31531: PPUSH
31532: LD_INT 18
31534: PPUSH
31535: CALL_OW 111
// AddComInvisible ( Roth ) ;
31539: LD_EXP 15
31543: PPUSH
31544: CALL_OW 212
// wait ( 0 0$30 ) ;
31548: LD_INT 1050
31550: PPUSH
31551: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
31555: LD_EXP 15
31559: PPUSH
31560: LD_INT 2100
31562: PPUSH
31563: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
31567: LD_EXP 15
31571: PPUSH
31572: LD_INT 156
31574: PPUSH
31575: LD_INT 20
31577: PPUSH
31578: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
31582: LD_EXP 15
31586: PPUSH
31587: LD_INT 178
31589: PPUSH
31590: LD_INT 42
31592: PPUSH
31593: CALL_OW 171
// AddComInvisible ( Roth ) ;
31597: LD_EXP 15
31601: PPUSH
31602: CALL_OW 212
// end ;
31606: LD_VAR 0 1
31610: RET
// every 0 0$1 do var i , tmp ;
31611: GO 31613
31613: DISABLE
31614: LD_INT 0
31616: PPUSH
31617: PPUSH
// begin tmp := selected union friends ;
31618: LD_ADDR_VAR 0 2
31622: PUSH
31623: LD_EXP 3
31627: PUSH
31628: LD_EXP 4
31632: UNION
31633: ST_TO_ADDR
// if not tmp then
31634: LD_VAR 0 2
31638: NOT
31639: IFFALSE 31643
// exit ;
31641: GO 31715
// repeat wait ( 0 0$1 ) ;
31643: LD_INT 35
31645: PPUSH
31646: CALL_OW 67
// for i in tmp do
31650: LD_ADDR_VAR 0 1
31654: PUSH
31655: LD_VAR 0 2
31659: PUSH
31660: FOR_IN
31661: IFFALSE 31706
// if CanSpot ( JMM , i ) then
31663: LD_EXP 14
31667: PPUSH
31668: LD_VAR 0 1
31672: PPUSH
31673: CALL 28326 0 2
31677: IFFALSE 31704
// begin tmp := tmp diff i ;
31679: LD_ADDR_VAR 0 2
31683: PUSH
31684: LD_VAR 0 2
31688: PUSH
31689: LD_VAR 0 1
31693: DIFF
31694: ST_TO_ADDR
// Spot ( i ) ;
31695: LD_VAR 0 1
31699: PPUSH
31700: CALL 31718 0 1
// end ;
31704: GO 31660
31706: POP
31707: POP
// until not tmp ;
31708: LD_VAR 0 2
31712: NOT
31713: IFFALSE 31643
// end ;
31715: PPOPN 2
31717: END
// export function Spot ( unit ) ; var building , side , joined ; begin
31718: LD_INT 0
31720: PPUSH
31721: PPUSH
31722: PPUSH
31723: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
31724: LD_VAR 0 1
31728: NOT
31729: PUSH
31730: LD_VAR 0 1
31734: PPUSH
31735: CALL_OW 255
31739: PUSH
31740: LD_INT 4
31742: NONEQUAL
31743: OR
31744: PUSH
31745: LD_VAR 0 1
31749: PPUSH
31750: CALL_OW 555
31754: OR
31755: PUSH
31756: LD_VAR 0 1
31760: PPUSH
31761: CALL_OW 302
31765: NOT
31766: OR
31767: IFFALSE 31771
// exit ;
31769: GO 33660
// InGameOn ;
31771: CALL_OW 8
// side := GetSide ( JMM ) ;
31775: LD_ADDR_VAR 0 4
31779: PUSH
31780: LD_EXP 14
31784: PPUSH
31785: CALL_OW 255
31789: ST_TO_ADDR
// joined := false ;
31790: LD_ADDR_VAR 0 5
31794: PUSH
31795: LD_INT 0
31797: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
31798: LD_ADDR_VAR 0 3
31802: PUSH
31803: LD_VAR 0 1
31807: PPUSH
31808: CALL_OW 310
31812: ST_TO_ADDR
// if building then
31813: LD_VAR 0 3
31817: IFFALSE 31876
// begin SetSide ( JMM , GetSide ( unit ) ) ;
31819: LD_EXP 14
31823: PPUSH
31824: LD_VAR 0 1
31828: PPUSH
31829: CALL_OW 255
31833: PPUSH
31834: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
31838: LD_EXP 14
31842: PPUSH
31843: LD_VAR 0 3
31847: PPUSH
31848: CALL_OW 120
// repeat wait ( 3 ) ;
31852: LD_INT 3
31854: PPUSH
31855: CALL_OW 67
// until IsInUnit ( JMM ) ;
31859: LD_EXP 14
31863: PPUSH
31864: CALL_OW 310
31868: IFFALSE 31852
// DialogueOn ;
31870: CALL_OW 6
// end else
31874: GO 31908
// begin ComTurnUnit ( JMM , unit ) ;
31876: LD_EXP 14
31880: PPUSH
31881: LD_VAR 0 1
31885: PPUSH
31886: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
31890: LD_VAR 0 1
31894: PPUSH
31895: LD_EXP 14
31899: PPUSH
31900: CALL_OW 119
// DialogueOn ;
31904: CALL_OW 6
// end ; if unit = Joan then
31908: LD_VAR 0 1
31912: PUSH
31913: LD_EXP 36
31917: EQUAL
31918: IFFALSE 32028
// begin joined := true ;
31920: LD_ADDR_VAR 0 5
31924: PUSH
31925: LD_INT 1
31927: ST_TO_ADDR
// if Joan in selected then
31928: LD_EXP 36
31932: PUSH
31933: LD_EXP 3
31937: IN
31938: IFFALSE 31966
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
31940: LD_EXP 36
31944: PPUSH
31945: LD_STRING D3-Joan-Joan-1
31947: PPUSH
31948: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
31952: LD_EXP 14
31956: PPUSH
31957: LD_STRING D3-Joan-JMM-1
31959: PPUSH
31960: CALL_OW 88
// end else
31964: GO 32026
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
31966: LD_EXP 36
31970: PPUSH
31971: LD_STRING D4-Joan-Joan-1
31973: PPUSH
31974: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
31978: LD_EXP 14
31982: PPUSH
31983: LD_STRING D4-Joan-JMM-1
31985: PPUSH
31986: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
31990: LD_EXP 36
31994: PPUSH
31995: LD_STRING D4-Joan-Joan-2
31997: PPUSH
31998: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
32002: LD_EXP 14
32006: PPUSH
32007: LD_STRING D4-Joan-JMM-2
32009: PPUSH
32010: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
32014: LD_EXP 36
32018: PPUSH
32019: LD_STRING D4-Joan-Joan-3
32021: PPUSH
32022: CALL_OW 88
// end ; end else
32026: GO 33468
// if unit = Lisa then
32028: LD_VAR 0 1
32032: PUSH
32033: LD_EXP 23
32037: EQUAL
32038: IFFALSE 32230
// begin if Lisa in selected then
32040: LD_EXP 23
32044: PUSH
32045: LD_EXP 3
32049: IN
32050: IFFALSE 32163
// begin if GetSide ( Joan ) = 7 then
32052: LD_EXP 36
32056: PPUSH
32057: CALL_OW 255
32061: PUSH
32062: LD_INT 7
32064: EQUAL
32065: IFFALSE 32129
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
32067: LD_EXP 23
32071: PPUSH
32072: LD_STRING D3-LisaJ-Lisa-1
32074: PPUSH
32075: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
32079: LD_EXP 14
32083: PPUSH
32084: LD_STRING D3-LisaJ-JMM-1
32086: PPUSH
32087: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
32091: LD_EXP 23
32095: PPUSH
32096: LD_STRING D3-LisaJ-Lisa-2
32098: PPUSH
32099: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
32103: LD_EXP 14
32107: PPUSH
32108: LD_STRING D3-LisaJ-JMM-2
32110: PPUSH
32111: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
32115: LD_EXP 23
32119: PPUSH
32120: LD_STRING D3-LisaJ-Lisa-3
32122: PPUSH
32123: CALL_OW 88
// end else
32127: GO 32161
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
32129: LD_EXP 23
32133: PPUSH
32134: LD_STRING D3-LisaL-Lisa-1
32136: PPUSH
32137: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
32141: LD_EXP 14
32145: PPUSH
32146: LD_STRING D3-LisaL-JMM-1
32148: PPUSH
32149: CALL_OW 88
// joined := true ;
32153: LD_ADDR_VAR 0 5
32157: PUSH
32158: LD_INT 1
32160: ST_TO_ADDR
// end ; end else
32161: GO 32228
// begin if GetSide ( Joan ) = 7 then
32163: LD_EXP 36
32167: PPUSH
32168: CALL_OW 255
32172: PUSH
32173: LD_INT 7
32175: EQUAL
32176: IFFALSE 32216
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
32178: LD_EXP 23
32182: PPUSH
32183: LD_STRING D4-LisaJ-Lisa-1
32185: PPUSH
32186: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
32190: LD_EXP 14
32194: PPUSH
32195: LD_STRING D4-LisaJ-JMM-1
32197: PPUSH
32198: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
32202: LD_EXP 23
32206: PPUSH
32207: LD_STRING D4-LisaJ-Lisa-2
32209: PPUSH
32210: CALL_OW 88
// end else
32214: GO 32228
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
32216: LD_EXP 23
32220: PPUSH
32221: LD_STRING D4-LisaL-Lisa-1
32223: PPUSH
32224: CALL_OW 88
// end ; end ; end else
32228: GO 33468
// if unit = Frank then
32230: LD_VAR 0 1
32234: PUSH
32235: LD_EXP 33
32239: EQUAL
32240: IFFALSE 32380
// begin joined := true ;
32242: LD_ADDR_VAR 0 5
32246: PUSH
32247: LD_INT 1
32249: ST_TO_ADDR
// if Frank in selected then
32250: LD_EXP 33
32254: PUSH
32255: LD_EXP 3
32259: IN
32260: IFFALSE 32330
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
32262: LD_EXP 33
32266: PPUSH
32267: LD_STRING D3-Frank-Frank-1
32269: PPUSH
32270: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
32274: LD_EXP 14
32278: PPUSH
32279: LD_STRING D3-Frank-JMM-1
32281: PPUSH
32282: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
32286: LD_EXP 33
32290: PPUSH
32291: LD_STRING D3-Frank-Frank-2
32293: PPUSH
32294: CALL_OW 88
// if reached_lab then
32298: LD_EXP 5
32302: IFFALSE 32328
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
32304: LD_EXP 14
32308: PPUSH
32309: LD_STRING D3-Frank-JMM-2
32311: PPUSH
32312: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
32316: LD_EXP 33
32320: PPUSH
32321: LD_STRING D3-Frank-Frank-3
32323: PPUSH
32324: CALL_OW 88
// end ; end else
32328: GO 32378
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
32330: LD_EXP 33
32334: PPUSH
32335: LD_STRING D4-Frank-Frank-1
32337: PPUSH
32338: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
32342: LD_EXP 14
32346: PPUSH
32347: LD_STRING D4-Frank-JMM-1
32349: PPUSH
32350: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
32354: LD_EXP 33
32358: PPUSH
32359: LD_STRING D4-Frank-Frank-2
32361: PPUSH
32362: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
32366: LD_EXP 14
32370: PPUSH
32371: LD_STRING D4-Frank-JMM-2
32373: PPUSH
32374: CALL_OW 88
// end ; end else
32378: GO 33468
// if unit = Brown then
32380: LD_VAR 0 1
32384: PUSH
32385: LD_EXP 28
32389: EQUAL
32390: IFFALSE 32486
// begin if Brown in selected or gamma_commander = 2 then
32392: LD_EXP 28
32396: PUSH
32397: LD_EXP 3
32401: IN
32402: PUSH
32403: LD_EXP 10
32407: PUSH
32408: LD_INT 2
32410: EQUAL
32411: OR
32412: IFFALSE 32448
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
32414: LD_EXP 28
32418: PPUSH
32419: LD_STRING D3-Soldier1-Sol1-1
32421: PPUSH
32422: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
32426: LD_EXP 14
32430: PPUSH
32431: LD_STRING D3-Soldier1-JMM-1
32433: PPUSH
32434: CALL_OW 88
// joined := true ;
32438: LD_ADDR_VAR 0 5
32442: PUSH
32443: LD_INT 1
32445: ST_TO_ADDR
// end else
32446: GO 32484
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
32448: LD_EXP 28
32452: PPUSH
32453: LD_STRING D4-Soldier2-Sol1-1
32455: PPUSH
32456: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
32460: LD_EXP 14
32464: PPUSH
32465: LD_STRING D4-Soldier1-JMM-1
32467: PPUSH
32468: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
32472: LD_EXP 28
32476: PPUSH
32477: LD_STRING D4-Soldier2-Sol1-2
32479: PPUSH
32480: CALL_OW 88
// end ; end else
32484: GO 33468
// if unit = Donaldson then
32486: LD_VAR 0 1
32490: PUSH
32491: LD_EXP 24
32495: EQUAL
32496: IFFALSE 32592
// begin if Donaldson in selected or gamma_commander = 1 then
32498: LD_EXP 24
32502: PUSH
32503: LD_EXP 3
32507: IN
32508: PUSH
32509: LD_EXP 10
32513: PUSH
32514: LD_INT 1
32516: EQUAL
32517: OR
32518: IFFALSE 32554
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
32520: LD_EXP 24
32524: PPUSH
32525: LD_STRING D3-Soldier2-FSol2-1
32527: PPUSH
32528: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
32532: LD_EXP 14
32536: PPUSH
32537: LD_STRING D3-Soldier2-JMM-1
32539: PPUSH
32540: CALL_OW 88
// joined := true ;
32544: LD_ADDR_VAR 0 5
32548: PUSH
32549: LD_INT 1
32551: ST_TO_ADDR
// end else
32552: GO 32590
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
32554: LD_VAR 0 1
32558: PPUSH
32559: LD_STRING D4-Soldier1-FSol1-1
32561: PPUSH
32562: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
32566: LD_EXP 14
32570: PPUSH
32571: LD_STRING D4-Soldier1-JMM-1
32573: PPUSH
32574: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
32578: LD_VAR 0 1
32582: PPUSH
32583: LD_STRING D4-Soldier1-FSol1-2
32585: PPUSH
32586: CALL_OW 88
// end ; end else
32590: GO 33468
// if unit = Cyrus then
32592: LD_VAR 0 1
32596: PUSH
32597: LD_EXP 26
32601: EQUAL
32602: IFFALSE 32676
// begin if Cyrus in selected then
32604: LD_EXP 26
32608: PUSH
32609: LD_EXP 3
32613: IN
32614: IFFALSE 32650
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
32616: LD_EXP 26
32620: PPUSH
32621: LD_STRING D3-Cyrus-Cyrus-1
32623: PPUSH
32624: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
32628: LD_EXP 14
32632: PPUSH
32633: LD_STRING D3-Cyrus-JMM-1
32635: PPUSH
32636: CALL_OW 88
// joined := true ;
32640: LD_ADDR_VAR 0 5
32644: PUSH
32645: LD_INT 1
32647: ST_TO_ADDR
// end else
32648: GO 32674
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
32650: LD_EXP 26
32654: PPUSH
32655: LD_STRING D4-Cyrus-Cyrus-1
32657: PPUSH
32658: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
32662: LD_EXP 14
32666: PPUSH
32667: LD_STRING D4-Cyrus-JMM-1
32669: PPUSH
32670: CALL_OW 88
// end ; end else
32674: GO 33468
// if unit = Bobby then
32676: LD_VAR 0 1
32680: PUSH
32681: LD_EXP 25
32685: EQUAL
32686: IFFALSE 32772
// begin if Bobby in selected then
32688: LD_EXP 25
32692: PUSH
32693: LD_EXP 3
32697: IN
32698: IFFALSE 32734
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
32700: LD_EXP 25
32704: PPUSH
32705: LD_STRING D3-Bobby-Bobby-1
32707: PPUSH
32708: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
32712: LD_EXP 14
32716: PPUSH
32717: LD_STRING D3-Bobby-JMM-1
32719: PPUSH
32720: CALL_OW 88
// joined := true ;
32724: LD_ADDR_VAR 0 5
32728: PUSH
32729: LD_INT 1
32731: ST_TO_ADDR
// end else
32732: GO 32770
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
32734: LD_EXP 25
32738: PPUSH
32739: LD_STRING D4-Bobby-Bobby-1
32741: PPUSH
32742: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
32746: LD_EXP 14
32750: PPUSH
32751: LD_STRING D4-Bobby-JMM-1
32753: PPUSH
32754: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
32758: LD_EXP 25
32762: PPUSH
32763: LD_STRING D4-Bobby-Bobby-2
32765: PPUSH
32766: CALL_OW 88
// end ; end else
32770: GO 33468
// if unit = Cornel then
32772: LD_VAR 0 1
32776: PUSH
32777: LD_EXP 31
32781: EQUAL
32782: IFFALSE 32880
// begin if Cornel in selected then
32784: LD_EXP 31
32788: PUSH
32789: LD_EXP 3
32793: IN
32794: IFFALSE 32842
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
32796: LD_EXP 31
32800: PPUSH
32801: LD_STRING D3-Mark-Corn-1
32803: PPUSH
32804: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
32808: LD_EXP 14
32812: PPUSH
32813: LD_STRING D3-Mark-JMM-1
32815: PPUSH
32816: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
32820: LD_EXP 31
32824: PPUSH
32825: LD_STRING D3-Mark-Corn-2
32827: PPUSH
32828: CALL_OW 88
// joined := true ;
32832: LD_ADDR_VAR 0 5
32836: PUSH
32837: LD_INT 1
32839: ST_TO_ADDR
// end else
32840: GO 32878
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
32842: LD_EXP 31
32846: PPUSH
32847: LD_STRING D4-Mark-Corn-1
32849: PPUSH
32850: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
32854: LD_EXP 14
32858: PPUSH
32859: LD_STRING D3-Joan-JMM-1
32861: PPUSH
32862: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
32866: LD_EXP 31
32870: PPUSH
32871: LD_STRING D4-Mark-Corn-2
32873: PPUSH
32874: CALL_OW 88
// end ; end else
32878: GO 33468
// if unit = Gary then
32880: LD_VAR 0 1
32884: PUSH
32885: LD_EXP 32
32889: EQUAL
32890: IFFALSE 32974
// begin if Gary in selected then
32892: LD_EXP 32
32896: PUSH
32897: LD_EXP 3
32901: IN
32902: IFFALSE 32938
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
32904: LD_EXP 32
32908: PPUSH
32909: LD_STRING D3-Gary-Gary-1
32911: PPUSH
32912: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
32916: LD_EXP 14
32920: PPUSH
32921: LD_STRING D3-Gary-JMM-1
32923: PPUSH
32924: CALL_OW 88
// joined := true ;
32928: LD_ADDR_VAR 0 5
32932: PUSH
32933: LD_INT 1
32935: ST_TO_ADDR
// end else
32936: GO 32972
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
32938: LD_EXP 32
32942: PPUSH
32943: LD_STRING D4-Gary-Gary-1
32945: PPUSH
32946: CALL_OW 88
// SetSide ( Gary , 1 ) ;
32950: LD_EXP 32
32954: PPUSH
32955: LD_INT 1
32957: PPUSH
32958: CALL_OW 235
// DialogueOff ;
32962: CALL_OW 7
// InGameOff ;
32966: CALL_OW 9
// exit ;
32970: GO 33660
// end ; end else
32972: GO 33468
// if unit = Kikuchi then
32974: LD_VAR 0 1
32978: PUSH
32979: LD_EXP 34
32983: EQUAL
32984: IFFALSE 33068
// begin if Kikuchi in selected then
32986: LD_EXP 34
32990: PUSH
32991: LD_EXP 3
32995: IN
32996: IFFALSE 33032
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
32998: LD_EXP 34
33002: PPUSH
33003: LD_STRING D3-Yamako-Yam-1
33005: PPUSH
33006: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
33010: LD_EXP 14
33014: PPUSH
33015: LD_STRING D3-Soldier2-JMM-1
33017: PPUSH
33018: CALL_OW 88
// joined := true ;
33022: LD_ADDR_VAR 0 5
33026: PUSH
33027: LD_INT 1
33029: ST_TO_ADDR
// end else
33030: GO 33066
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
33032: LD_EXP 34
33036: PPUSH
33037: LD_STRING D4-Yamako-Yam-1
33039: PPUSH
33040: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
33044: LD_EXP 34
33048: PPUSH
33049: LD_INT 1
33051: PPUSH
33052: CALL_OW 235
// DialogueOff ;
33056: CALL_OW 7
// InGameOff ;
33060: CALL_OW 9
// exit ;
33064: GO 33660
// end ; end else
33066: GO 33468
// if unit = Gladstone then
33068: LD_VAR 0 1
33072: PUSH
33073: LD_EXP 29
33077: EQUAL
33078: IFFALSE 33152
// begin if Gladstone in selected then
33080: LD_EXP 29
33084: PUSH
33085: LD_EXP 3
33089: IN
33090: IFFALSE 33126
// begin joined := true ;
33092: LD_ADDR_VAR 0 5
33096: PUSH
33097: LD_INT 1
33099: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
33100: LD_EXP 14
33104: PPUSH
33105: LD_STRING D3-Tim-JMM-1
33107: PPUSH
33108: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
33112: LD_EXP 29
33116: PPUSH
33117: LD_STRING D3-Tim-Glad-1
33119: PPUSH
33120: CALL_OW 88
// end else
33124: GO 33150
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
33126: LD_EXP 14
33130: PPUSH
33131: LD_STRING D4-Tim-JMM-1
33133: PPUSH
33134: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
33138: LD_EXP 29
33142: PPUSH
33143: LD_STRING D4-Tim-Glad-1
33145: PPUSH
33146: CALL_OW 88
// end ; end else
33150: GO 33468
// if unit = Denis then
33152: LD_VAR 0 1
33156: PUSH
33157: LD_EXP 27
33161: EQUAL
33162: IFFALSE 33198
// begin joined := true ;
33164: LD_ADDR_VAR 0 5
33168: PUSH
33169: LD_INT 1
33171: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
33172: LD_EXP 27
33176: PPUSH
33177: LD_STRING D3-Denis-Den-1
33179: PPUSH
33180: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
33184: LD_EXP 14
33188: PPUSH
33189: LD_STRING D3-Denis-JMM-1
33191: PPUSH
33192: CALL_OW 88
// end else
33196: GO 33468
// if unit = Simms then
33198: LD_VAR 0 1
33202: PUSH
33203: LD_EXP 35
33207: EQUAL
33208: IFFALSE 33244
// begin joined := true ;
33210: LD_ADDR_VAR 0 5
33214: PUSH
33215: LD_INT 1
33217: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
33218: LD_EXP 35
33222: PPUSH
33223: LD_STRING D3-Simms-Sim-1
33225: PPUSH
33226: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
33230: LD_EXP 14
33234: PPUSH
33235: LD_STRING D3-Simms-JMM-1
33237: PPUSH
33238: CALL_OW 88
// end else
33242: GO 33468
// if unit = DeltaDoctor then
33244: LD_VAR 0 1
33248: PUSH
33249: LD_EXP 37
33253: EQUAL
33254: IFFALSE 33290
// begin joined := true ;
33256: LD_ADDR_VAR 0 5
33260: PUSH
33261: LD_INT 1
33263: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
33264: LD_EXP 37
33268: PPUSH
33269: LD_STRING D3-Soldier1-Sol1-1
33271: PPUSH
33272: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
33276: LD_EXP 14
33280: PPUSH
33281: LD_STRING D3-Soldier1-JMM-1
33283: PPUSH
33284: CALL_OW 88
// end else
33288: GO 33468
// begin joined := unit in selected ;
33290: LD_ADDR_VAR 0 5
33294: PUSH
33295: LD_VAR 0 1
33299: PUSH
33300: LD_EXP 3
33304: IN
33305: ST_TO_ADDR
// if joined then
33306: LD_VAR 0 5
33310: IFFALSE 33379
// begin if GetSex ( unit ) = sex_male then
33312: LD_VAR 0 1
33316: PPUSH
33317: CALL_OW 258
33321: PUSH
33322: LD_INT 1
33324: EQUAL
33325: IFFALSE 33353
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
33327: LD_VAR 0 1
33331: PPUSH
33332: LD_STRING D3-Soldier1-Sol1-1
33334: PPUSH
33335: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
33339: LD_EXP 14
33343: PPUSH
33344: LD_STRING D3-Soldier1-JMM-1
33346: PPUSH
33347: CALL_OW 88
// end else
33351: GO 33377
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
33353: LD_VAR 0 1
33357: PPUSH
33358: LD_STRING D3-Soldier2-FSol2-1
33360: PPUSH
33361: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
33365: LD_EXP 14
33369: PPUSH
33370: LD_STRING D3-Soldier2-JMM-1
33372: PPUSH
33373: CALL_OW 88
// end ; end else
33377: GO 33468
// begin if GetSex ( unit ) = sex_male then
33379: LD_VAR 0 1
33383: PPUSH
33384: CALL_OW 258
33388: PUSH
33389: LD_INT 1
33391: EQUAL
33392: IFFALSE 33432
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
33394: LD_VAR 0 1
33398: PPUSH
33399: LD_STRING D4-Soldier2-Sol1-1
33401: PPUSH
33402: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
33406: LD_EXP 14
33410: PPUSH
33411: LD_STRING D4-Soldier2-JMM-1
33413: PPUSH
33414: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
33418: LD_VAR 0 1
33422: PPUSH
33423: LD_STRING D4-Soldier2-Sol2-1
33425: PPUSH
33426: CALL_OW 88
// end else
33430: GO 33468
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
33432: LD_VAR 0 1
33436: PPUSH
33437: LD_STRING D4-Soldier1-FSol1-1
33439: PPUSH
33440: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
33444: LD_EXP 14
33448: PPUSH
33449: LD_STRING D4-Soldier1-JMM-1
33451: PPUSH
33452: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
33456: LD_VAR 0 1
33460: PPUSH
33461: LD_STRING D4-Soldier1-FSol1-2
33463: PPUSH
33464: CALL_OW 88
// end ; end ; end ; DialogueOff ;
33468: CALL_OW 7
// InGameOff ;
33472: CALL_OW 9
// if building then
33476: LD_VAR 0 3
33480: IFFALSE 33581
// begin SetSide ( JMM , side ) ;
33482: LD_EXP 14
33486: PPUSH
33487: LD_VAR 0 4
33491: PPUSH
33492: CALL_OW 235
// ComExitBuilding ( JMM ) ;
33496: LD_EXP 14
33500: PPUSH
33501: CALL_OW 122
// if joined then
33505: LD_VAR 0 5
33509: IFFALSE 33548
// begin SetSide ( unit , side ) ;
33511: LD_VAR 0 1
33515: PPUSH
33516: LD_VAR 0 4
33520: PPUSH
33521: CALL_OW 235
// SetSide ( building , 1 ) ;
33525: LD_VAR 0 3
33529: PPUSH
33530: LD_INT 1
33532: PPUSH
33533: CALL_OW 235
// ComExitBuilding ( unit ) ;
33537: LD_VAR 0 1
33541: PPUSH
33542: CALL_OW 122
// end else
33546: GO 33579
// begin wait ( 0 0$10 ) ;
33548: LD_INT 350
33550: PPUSH
33551: CALL_OW 67
// SetSide ( unit , 1 ) ;
33555: LD_VAR 0 1
33559: PPUSH
33560: LD_INT 1
33562: PPUSH
33563: CALL_OW 235
// SetSide ( building , 1 ) ;
33567: LD_VAR 0 3
33571: PPUSH
33572: LD_INT 1
33574: PPUSH
33575: CALL_OW 235
// end ; end else
33579: GO 33660
// begin ComStop ( [ JMM , unit ] ) ;
33581: LD_EXP 14
33585: PUSH
33586: LD_VAR 0 1
33590: PUSH
33591: EMPTY
33592: LIST
33593: LIST
33594: PPUSH
33595: CALL_OW 141
// if joined then
33599: LD_VAR 0 5
33603: IFFALSE 33621
// SetSide ( unit , side ) else
33605: LD_VAR 0 1
33609: PPUSH
33610: LD_VAR 0 4
33614: PPUSH
33615: CALL_OW 235
33619: GO 33660
// begin repeat wait ( 0 0$1 ) ;
33621: LD_INT 35
33623: PPUSH
33624: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
33628: LD_EXP 14
33632: PPUSH
33633: LD_VAR 0 1
33637: PPUSH
33638: CALL_OW 296
33642: PUSH
33643: LD_INT 11
33645: GREATER
33646: IFFALSE 33621
// SetSide ( unit , 1 ) ;
33648: LD_VAR 0 1
33652: PPUSH
33653: LD_INT 1
33655: PPUSH
33656: CALL_OW 235
// end ; end ; end ;
33660: LD_VAR 0 2
33664: RET
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
33665: LD_EXP 14
33669: PPUSH
33670: CALL_OW 310
33674: PUSH
33675: LD_INT 47
33677: EQUAL
33678: IFFALSE 33746
33680: GO 33682
33682: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
33683: LD_STRING M1a
33685: PPUSH
33686: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
33690: LD_INT 13
33692: PPUSH
33693: LD_INT 7
33695: PPUSH
33696: LD_INT 2
33698: PPUSH
33699: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
33703: LD_INT 29
33705: PPUSH
33706: LD_INT 7
33708: PPUSH
33709: LD_INT 2
33711: PPUSH
33712: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
33716: LD_EXP 14
33720: PPUSH
33721: LD_INT 9
33723: PPUSH
33724: CALL_OW 336
// can_escape := true ;
33728: LD_ADDR_EXP 6
33732: PUSH
33733: LD_INT 1
33735: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
33736: LD_INT 19
33738: PPUSH
33739: LD_INT 1
33741: PPUSH
33742: CALL_OW 424
// end ;
33746: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
33747: LD_EXP 16
33751: PPUSH
33752: CALL_OW 256
33756: PUSH
33757: LD_INT 999
33759: LESS
33760: IFFALSE 33811
33762: GO 33764
33764: DISABLE
// begin enable ;
33765: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
33766: LD_INT 25
33768: PPUSH
33769: LD_INT 48
33771: PPUSH
33772: CALL_OW 428
33776: PUSH
33777: LD_EXP 16
33781: EQUAL
33782: IFFALSE 33796
// begin RemoveUnit ( Powell ) ;
33784: LD_EXP 16
33788: PPUSH
33789: CALL_OW 64
// disable ;
33793: DISABLE
// end else
33794: GO 33811
// ComMoveXY ( Powell , 25 , 48 ) ;
33796: LD_EXP 16
33800: PPUSH
33801: LD_INT 25
33803: PPUSH
33804: LD_INT 48
33806: PPUSH
33807: CALL_OW 111
// end ;
33811: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
33812: LD_INT 22
33814: PUSH
33815: LD_INT 4
33817: PUSH
33818: EMPTY
33819: LIST
33820: LIST
33821: PUSH
33822: LD_INT 21
33824: PUSH
33825: LD_INT 1
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: PUSH
33832: LD_INT 3
33834: PUSH
33835: LD_INT 24
33837: PUSH
33838: LD_INT 990
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: EMPTY
33850: LIST
33851: LIST
33852: LIST
33853: PPUSH
33854: CALL_OW 69
33858: PUSH
33859: LD_EXP 15
33863: DIFF
33864: IFFALSE 34008
33866: GO 33868
33868: DISABLE
33869: LD_INT 0
33871: PPUSH
// begin enable ;
33872: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
33873: LD_ADDR_VAR 0 1
33877: PUSH
33878: LD_INT 22
33880: PUSH
33881: LD_INT 4
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 21
33890: PUSH
33891: LD_INT 1
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 3
33900: PUSH
33901: LD_INT 24
33903: PUSH
33904: LD_INT 990
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: EMPTY
33912: LIST
33913: LIST
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: LIST
33919: PPUSH
33920: CALL_OW 69
33924: PUSH
33925: LD_EXP 15
33929: DIFF
33930: PUSH
33931: FOR_IN
33932: IFFALSE 34006
// begin ComFree ( i ) ;
33934: LD_VAR 0 1
33938: PPUSH
33939: CALL_OW 139
// SetSide ( i , 1 ) ;
33943: LD_VAR 0 1
33947: PPUSH
33948: LD_INT 1
33950: PPUSH
33951: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
33955: LD_VAR 0 1
33959: PPUSH
33960: LD_EXP 14
33964: PPUSH
33965: CALL_OW 296
33969: PUSH
33970: LD_INT 14
33972: LESS
33973: IFFALSE 34004
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
33975: LD_VAR 0 1
33979: PPUSH
33980: LD_EXP 14
33984: PPUSH
33985: CALL_OW 250
33989: PPUSH
33990: LD_EXP 14
33994: PPUSH
33995: CALL_OW 251
33999: PPUSH
34000: CALL_OW 114
// end ;
34004: GO 33931
34006: POP
34007: POP
// end ;
34008: PPOPN 1
34010: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
34011: LD_INT 22
34013: PUSH
34014: LD_INT 4
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 34
34023: PUSH
34024: LD_INT 12
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PPUSH
34035: CALL_OW 69
34039: IFFALSE 34121
34041: GO 34043
34043: DISABLE
34044: LD_INT 0
34046: PPUSH
// begin enable ;
34047: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
34048: LD_ADDR_VAR 0 1
34052: PUSH
34053: LD_INT 22
34055: PUSH
34056: LD_INT 4
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 34
34065: PUSH
34066: LD_INT 12
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PPUSH
34077: CALL_OW 69
34081: PUSH
34082: FOR_IN
34083: IFFALSE 34119
// if GetDistUnits ( i , JMM ) < 6 then
34085: LD_VAR 0 1
34089: PPUSH
34090: LD_EXP 14
34094: PPUSH
34095: CALL_OW 296
34099: PUSH
34100: LD_INT 6
34102: LESS
34103: IFFALSE 34117
// SetSide ( i , 7 ) ;
34105: LD_VAR 0 1
34109: PPUSH
34110: LD_INT 7
34112: PPUSH
34113: CALL_OW 235
34117: GO 34082
34119: POP
34120: POP
// end ;
34121: PPOPN 1
34123: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
34124: LD_EXP 6
34128: PUSH
34129: LD_INT 19
34131: PPUSH
34132: LD_INT 22
34134: PUSH
34135: LD_INT 7
34137: PUSH
34138: EMPTY
34139: LIST
34140: LIST
34141: PUSH
34142: LD_INT 21
34144: PUSH
34145: LD_INT 1
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PPUSH
34156: CALL_OW 71
34160: NOT
34161: AND
34162: PUSH
34163: LD_INT 3
34165: PPUSH
34166: CALL_OW 469
34170: NOT
34171: AND
34172: PUSH
34173: LD_INT 5
34175: PPUSH
34176: CALL_OW 469
34180: NOT
34181: AND
34182: IFFALSE 35804
34184: GO 34186
34186: DISABLE
34187: LD_INT 0
34189: PPUSH
34190: PPUSH
34191: PPUSH
34192: PPUSH
34193: PPUSH
// begin m1 := false ;
34194: LD_ADDR_VAR 0 3
34198: PUSH
34199: LD_INT 0
34201: ST_TO_ADDR
// m2 := false ;
34202: LD_ADDR_VAR 0 4
34206: PUSH
34207: LD_INT 0
34209: ST_TO_ADDR
// m3 := false ;
34210: LD_ADDR_VAR 0 5
34214: PUSH
34215: LD_INT 0
34217: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
34218: LD_ADDR_VAR 0 1
34222: PUSH
34223: LD_EXP 3
34227: PPUSH
34228: LD_INT 22
34230: PUSH
34231: LD_INT 4
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: PUSH
34238: LD_INT 21
34240: PUSH
34241: LD_INT 1
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PPUSH
34252: CALL_OW 72
34256: PUSH
34257: LD_INT 0
34259: EQUAL
34260: ST_TO_ADDR
// if not all_taken then
34261: LD_VAR 0 1
34265: NOT
34266: IFFALSE 34407
// case query ( Q1 ) of 1 :
34268: LD_STRING Q1
34270: PPUSH
34271: CALL_OW 97
34275: PUSH
34276: LD_INT 1
34278: DOUBLE
34279: EQUAL
34280: IFTRUE 34284
34282: GO 34395
34284: POP
// begin repeat wait ( 0 0$1 ) ;
34285: LD_INT 35
34287: PPUSH
34288: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
34292: LD_EXP 3
34296: PPUSH
34297: LD_INT 22
34299: PUSH
34300: LD_INT 4
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 21
34309: PUSH
34310: LD_INT 1
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PPUSH
34321: CALL_OW 72
34325: PUSH
34326: LD_INT 0
34328: EQUAL
34329: PUSH
34330: LD_INT 19
34332: PPUSH
34333: LD_INT 22
34335: PUSH
34336: LD_INT 7
34338: PUSH
34339: EMPTY
34340: LIST
34341: LIST
34342: PUSH
34343: LD_INT 21
34345: PUSH
34346: LD_INT 1
34348: PUSH
34349: EMPTY
34350: LIST
34351: LIST
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PPUSH
34357: CALL_OW 71
34361: NOT
34362: AND
34363: PUSH
34364: LD_INT 3
34366: PPUSH
34367: CALL_OW 469
34371: NOT
34372: AND
34373: PUSH
34374: LD_INT 5
34376: PPUSH
34377: CALL_OW 469
34381: NOT
34382: AND
34383: IFFALSE 34285
// all_taken := true ;
34385: LD_ADDR_VAR 0 1
34389: PUSH
34390: LD_INT 1
34392: ST_TO_ADDR
// end ; 2 :
34393: GO 34407
34395: LD_INT 2
34397: DOUBLE
34398: EQUAL
34399: IFTRUE 34403
34401: GO 34406
34403: POP
// ; end ;
34404: GO 34407
34406: POP
// if team_kill_counter then
34407: LD_EXP 9
34411: IFFALSE 34427
// Say ( JMM , D5-JMM-1 ) else
34413: LD_EXP 14
34417: PPUSH
34418: LD_STRING D5-JMM-1
34420: PPUSH
34421: CALL_OW 88
34425: GO 34439
// Say ( JMM , D5-JMM-1a ) ;
34427: LD_EXP 14
34431: PPUSH
34432: LD_STRING D5-JMM-1a
34434: PPUSH
34435: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
34439: LD_INT 22
34441: PUSH
34442: LD_INT 7
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 21
34451: PUSH
34452: LD_INT 1
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 23
34461: PUSH
34462: LD_INT 1
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: LIST
34473: PPUSH
34474: CALL_OW 69
34478: PUSH
34479: LD_EXP 14
34483: PUSH
34484: LD_EXP 15
34488: PUSH
34489: EMPTY
34490: LIST
34491: LIST
34492: DIFF
34493: PUSH
34494: LD_INT 10
34496: GREATEREQUAL
34497: IFFALSE 34506
// SetAchievement ( ACH_TEAM ) ;
34499: LD_STRING ACH_TEAM
34501: PPUSH
34502: CALL_OW 543
// if not invis_used then
34506: LD_EXP 12
34510: NOT
34511: IFFALSE 34527
// begin wait ( 3 ) ;
34513: LD_INT 3
34515: PPUSH
34516: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
34520: LD_STRING ACH_NOINVIS
34522: PPUSH
34523: CALL_OW 543
// end ; if not alert then
34527: LD_EXP 13
34531: NOT
34532: IFFALSE 34548
// begin wait ( 3 ) ;
34534: LD_INT 3
34536: PPUSH
34537: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
34541: LD_STRING ACH_ALARM
34543: PPUSH
34544: CALL_OW 543
// end ; if tick < 15 15$00 then
34548: LD_OWVAR 1
34552: PUSH
34553: LD_INT 31500
34555: LESS
34556: IFFALSE 34572
// begin wait ( 3 ) ;
34558: LD_INT 3
34560: PPUSH
34561: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
34565: LD_STRING ACH_ASPEED_16
34567: PPUSH
34568: CALL_OW 543
// end ; if all_taken then
34572: LD_VAR 0 1
34576: IFFALSE 34598
// begin AddMedal ( All , 1 ) ;
34578: LD_STRING All
34580: PPUSH
34581: LD_INT 1
34583: PPUSH
34584: CALL_OW 101
// m1 := true ;
34588: LD_ADDR_VAR 0 3
34592: PUSH
34593: LD_INT 1
34595: ST_TO_ADDR
// end else
34596: GO 34609
// AddMedal ( All , - 1 ) ;
34598: LD_STRING All
34600: PPUSH
34601: LD_INT 1
34603: NEG
34604: PPUSH
34605: CALL_OW 101
// if team_kill_counter then
34609: LD_EXP 9
34613: IFFALSE 34628
// AddMedal ( Save , - 1 ) else
34615: LD_STRING Save
34617: PPUSH
34618: LD_INT 1
34620: NEG
34621: PPUSH
34622: CALL_OW 101
34626: GO 34646
// begin AddMedal ( Save , 1 ) ;
34628: LD_STRING Save
34630: PPUSH
34631: LD_INT 1
34633: PPUSH
34634: CALL_OW 101
// m2 := true ;
34638: LD_ADDR_VAR 0 4
34642: PUSH
34643: LD_INT 1
34645: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 1 , 1 ] [ Difficulty ] then
34646: LD_EXP 8
34650: PUSH
34651: LD_INT 2
34653: PUSH
34654: LD_INT 1
34656: PUSH
34657: LD_INT 1
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: LIST
34664: PUSH
34665: LD_OWVAR 67
34669: ARRAY
34670: GREATEREQUAL
34671: IFFALSE 34686
// AddMedal ( Friendship , - 1 ) else
34673: LD_STRING Friendship
34675: PPUSH
34676: LD_INT 1
34678: NEG
34679: PPUSH
34680: CALL_OW 101
34684: GO 34704
// begin AddMedal ( Friendship , 1 ) ;
34686: LD_STRING Friendship
34688: PPUSH
34689: LD_INT 1
34691: PPUSH
34692: CALL_OW 101
// m3 := true ;
34696: LD_ADDR_VAR 0 5
34700: PUSH
34701: LD_INT 1
34703: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty = 3 then
34704: LD_VAR 0 3
34708: PUSH
34709: LD_VAR 0 4
34713: AND
34714: PUSH
34715: LD_VAR 0 5
34719: AND
34720: PUSH
34721: LD_OWVAR 67
34725: PUSH
34726: LD_INT 3
34728: EQUAL
34729: AND
34730: IFFALSE 34742
// SetAchievementEX ( ACH_AMER , 16 ) ;
34732: LD_STRING ACH_AMER
34734: PPUSH
34735: LD_INT 16
34737: PPUSH
34738: CALL_OW 564
// GiveMedals ( MAIN ) ;
34742: LD_STRING MAIN
34744: PPUSH
34745: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ] ) ;
34749: LD_ADDR_VAR 0 2
34753: PUSH
34754: LD_INT 22
34756: PUSH
34757: LD_INT 7
34759: PUSH
34760: EMPTY
34761: LIST
34762: LIST
34763: PUSH
34764: LD_INT 2
34766: PUSH
34767: LD_INT 25
34769: PUSH
34770: LD_INT 1
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 25
34779: PUSH
34780: LD_INT 2
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 25
34789: PUSH
34790: LD_INT 3
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 25
34799: PUSH
34800: LD_INT 4
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 25
34809: PUSH
34810: LD_INT 5
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 25
34819: PUSH
34820: LD_INT 8
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 25
34829: PUSH
34830: LD_INT 9
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: EMPTY
34852: LIST
34853: PPUSH
34854: CALL_OW 69
34858: ST_TO_ADDR
// RewardPeople ( tmp ^ Roth ) ;
34859: LD_VAR 0 2
34863: PUSH
34864: LD_EXP 15
34868: ADD
34869: PPUSH
34870: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
34874: LD_EXP 14
34878: PPUSH
34879: LD_STRING 12a_JMM
34881: PPUSH
34882: CALL_OW 38
// if IsLive ( Roth ) then
34886: LD_EXP 15
34890: PPUSH
34891: CALL_OW 300
34895: IFFALSE 34909
// SaveCharacters ( Roth , 12a_Roth ) ;
34897: LD_EXP 15
34901: PPUSH
34902: LD_STRING 12a_Roth
34904: PPUSH
34905: CALL_OW 38
// if Lisa in tmp then
34909: LD_EXP 23
34913: PUSH
34914: LD_VAR 0 2
34918: IN
34919: IFFALSE 34935
// SaveCharacters ( Lisa , 12a_Lisa ) else
34921: LD_EXP 23
34925: PPUSH
34926: LD_STRING 12a_Lisa
34928: PPUSH
34929: CALL_OW 38
34933: GO 34953
// if Lisa then
34935: LD_EXP 23
34939: IFFALSE 34953
// SaveCharacters ( Lisa , 12p_Lisa ) ;
34941: LD_EXP 23
34945: PPUSH
34946: LD_STRING 12p_Lisa
34948: PPUSH
34949: CALL_OW 38
// if Donaldson in tmp then
34953: LD_EXP 24
34957: PUSH
34958: LD_VAR 0 2
34962: IN
34963: IFFALSE 34979
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
34965: LD_EXP 24
34969: PPUSH
34970: LD_STRING 12a_Donaldson
34972: PPUSH
34973: CALL_OW 38
34977: GO 34997
// if Donaldson then
34979: LD_EXP 24
34983: IFFALSE 34997
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
34985: LD_EXP 24
34989: PPUSH
34990: LD_STRING 12p_Donaldson
34992: PPUSH
34993: CALL_OW 38
// if Bobby in tmp then
34997: LD_EXP 25
35001: PUSH
35002: LD_VAR 0 2
35006: IN
35007: IFFALSE 35023
// SaveCharacters ( Bobby , 12a_Bobby ) else
35009: LD_EXP 25
35013: PPUSH
35014: LD_STRING 12a_Bobby
35016: PPUSH
35017: CALL_OW 38
35021: GO 35041
// if Bobby then
35023: LD_EXP 25
35027: IFFALSE 35041
// SaveCharacters ( Bobby , 12p_Bobby ) ;
35029: LD_EXP 25
35033: PPUSH
35034: LD_STRING 12p_Bobby
35036: PPUSH
35037: CALL_OW 38
// if Cyrus in tmp then
35041: LD_EXP 26
35045: PUSH
35046: LD_VAR 0 2
35050: IN
35051: IFFALSE 35067
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
35053: LD_EXP 26
35057: PPUSH
35058: LD_STRING 12a_Cyrus
35060: PPUSH
35061: CALL_OW 38
35065: GO 35085
// if Cyrus then
35067: LD_EXP 26
35071: IFFALSE 35085
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
35073: LD_EXP 26
35077: PPUSH
35078: LD_STRING 12p_Cyrus
35080: PPUSH
35081: CALL_OW 38
// if Denis in tmp then
35085: LD_EXP 27
35089: PUSH
35090: LD_VAR 0 2
35094: IN
35095: IFFALSE 35109
// SaveCharacters ( Denis , 12a_Denis ) ;
35097: LD_EXP 27
35101: PPUSH
35102: LD_STRING 12a_Denis
35104: PPUSH
35105: CALL_OW 38
// if Brown in tmp then
35109: LD_EXP 28
35113: PUSH
35114: LD_VAR 0 2
35118: IN
35119: IFFALSE 35135
// SaveCharacters ( Brown , 12a_Brown ) else
35121: LD_EXP 28
35125: PPUSH
35126: LD_STRING 12a_Brown
35128: PPUSH
35129: CALL_OW 38
35133: GO 35159
// if Brown in tmp then
35135: LD_EXP 28
35139: PUSH
35140: LD_VAR 0 2
35144: IN
35145: IFFALSE 35159
// SaveCharacters ( Brown , 12p_Brown ) ;
35147: LD_EXP 28
35151: PPUSH
35152: LD_STRING 12p_Brown
35154: PPUSH
35155: CALL_OW 38
// if Gladstone in tmp then
35159: LD_EXP 29
35163: PUSH
35164: LD_VAR 0 2
35168: IN
35169: IFFALSE 35185
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
35171: LD_EXP 29
35175: PPUSH
35176: LD_STRING 12a_Gladstone
35178: PPUSH
35179: CALL_OW 38
35183: GO 35203
// if Gladstone then
35185: LD_EXP 29
35189: IFFALSE 35203
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
35191: LD_EXP 29
35195: PPUSH
35196: LD_STRING 12p_Gladstone
35198: PPUSH
35199: CALL_OW 38
// if Houten in tmp then
35203: LD_EXP 30
35207: PUSH
35208: LD_VAR 0 2
35212: IN
35213: IFFALSE 35229
// SaveCharacters ( Houten , 12a_Houten ) else
35215: LD_EXP 30
35219: PPUSH
35220: LD_STRING 12a_Houten
35222: PPUSH
35223: CALL_OW 38
35227: GO 35247
// if Houten then
35229: LD_EXP 30
35233: IFFALSE 35247
// SaveCharacters ( Houten , 12p_Houten ) ;
35235: LD_EXP 30
35239: PPUSH
35240: LD_STRING 12p_Houten
35242: PPUSH
35243: CALL_OW 38
// if Cornel in tmp then
35247: LD_EXP 31
35251: PUSH
35252: LD_VAR 0 2
35256: IN
35257: IFFALSE 35273
// SaveCharacters ( Cornel , 12a_Cornell ) else
35259: LD_EXP 31
35263: PPUSH
35264: LD_STRING 12a_Cornell
35266: PPUSH
35267: CALL_OW 38
35271: GO 35291
// if Cornel then
35273: LD_EXP 31
35277: IFFALSE 35291
// SaveCharacters ( Cornel , 12p_Cornell ) ;
35279: LD_EXP 31
35283: PPUSH
35284: LD_STRING 12p_Cornell
35286: PPUSH
35287: CALL_OW 38
// if Gary in tmp then
35291: LD_EXP 32
35295: PUSH
35296: LD_VAR 0 2
35300: IN
35301: IFFALSE 35317
// SaveCharacters ( Gary , 12a_Gary ) else
35303: LD_EXP 32
35307: PPUSH
35308: LD_STRING 12a_Gary
35310: PPUSH
35311: CALL_OW 38
35315: GO 35335
// if Gary then
35317: LD_EXP 32
35321: IFFALSE 35335
// SaveCharacters ( Gary , 12p_Gary ) ;
35323: LD_EXP 32
35327: PPUSH
35328: LD_STRING 12p_Gary
35330: PPUSH
35331: CALL_OW 38
// if Frank in tmp then
35335: LD_EXP 33
35339: PUSH
35340: LD_VAR 0 2
35344: IN
35345: IFFALSE 35359
// SaveCharacters ( Frank , 12a_Frank ) ;
35347: LD_EXP 33
35351: PPUSH
35352: LD_STRING 12a_Frank
35354: PPUSH
35355: CALL_OW 38
// if Kikuchi in tmp then
35359: LD_EXP 34
35363: PUSH
35364: LD_VAR 0 2
35368: IN
35369: IFFALSE 35385
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
35371: LD_EXP 34
35375: PPUSH
35376: LD_STRING 12a_Kikuchi
35378: PPUSH
35379: CALL_OW 38
35383: GO 35403
// if Kikuchi then
35385: LD_EXP 34
35389: IFFALSE 35403
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
35391: LD_EXP 34
35395: PPUSH
35396: LD_STRING 12p_Kikuchi
35398: PPUSH
35399: CALL_OW 38
// if Simms in tmp then
35403: LD_EXP 35
35407: PUSH
35408: LD_VAR 0 2
35412: IN
35413: IFFALSE 35427
// SaveCharacters ( Simms , 12a_Simms ) ;
35415: LD_EXP 35
35419: PPUSH
35420: LD_STRING 12a_Simms
35422: PPUSH
35423: CALL_OW 38
// if Joan in tmp then
35427: LD_EXP 36
35431: PUSH
35432: LD_VAR 0 2
35436: IN
35437: IFFALSE 35451
// SaveCharacters ( Joan , 12a_Joan ) ;
35439: LD_EXP 36
35443: PPUSH
35444: LD_STRING 12a_Joan
35446: PPUSH
35447: CALL_OW 38
// if DeltaDoctor in tmp then
35451: LD_EXP 37
35455: PUSH
35456: LD_VAR 0 2
35460: IN
35461: IFFALSE 35475
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
35463: LD_EXP 37
35467: PPUSH
35468: LD_STRING 12a_DeltaDoctor
35470: PPUSH
35471: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ] ;
35475: LD_ADDR_VAR 0 2
35479: PUSH
35480: LD_VAR 0 2
35484: PUSH
35485: LD_EXP 14
35489: PUSH
35490: LD_EXP 15
35494: PUSH
35495: LD_EXP 23
35499: PUSH
35500: LD_EXP 24
35504: PUSH
35505: LD_EXP 25
35509: PUSH
35510: LD_EXP 26
35514: PUSH
35515: LD_EXP 27
35519: PUSH
35520: LD_EXP 28
35524: PUSH
35525: LD_EXP 29
35529: PUSH
35530: LD_EXP 30
35534: PUSH
35535: LD_EXP 31
35539: PUSH
35540: LD_EXP 32
35544: PUSH
35545: LD_EXP 33
35549: PUSH
35550: LD_EXP 34
35554: PUSH
35555: LD_EXP 35
35559: PUSH
35560: LD_EXP 36
35564: PUSH
35565: LD_EXP 37
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: DIFF
35589: ST_TO_ADDR
// if tmp then
35590: LD_VAR 0 2
35594: IFFALSE 35608
// SaveCharacters ( tmp , 12a_others ) ;
35596: LD_VAR 0 2
35600: PPUSH
35601: LD_STRING 12a_others
35603: PPUSH
35604: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell ] ;
35608: LD_ADDR_VAR 0 2
35612: PUSH
35613: LD_INT 21
35615: PUSH
35616: LD_INT 1
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 23
35625: PUSH
35626: LD_INT 1
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 2
35635: PUSH
35636: LD_INT 22
35638: PUSH
35639: LD_INT 1
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 22
35648: PUSH
35649: LD_INT 4
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: LIST
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: LIST
35665: PPUSH
35666: CALL_OW 69
35670: PUSH
35671: LD_EXP 14
35675: PUSH
35676: LD_EXP 15
35680: PUSH
35681: LD_EXP 23
35685: PUSH
35686: LD_EXP 24
35690: PUSH
35691: LD_EXP 25
35695: PUSH
35696: LD_EXP 26
35700: PUSH
35701: LD_EXP 27
35705: PUSH
35706: LD_EXP 28
35710: PUSH
35711: LD_EXP 29
35715: PUSH
35716: LD_EXP 30
35720: PUSH
35721: LD_EXP 31
35725: PUSH
35726: LD_EXP 32
35730: PUSH
35731: LD_EXP 33
35735: PUSH
35736: LD_EXP 34
35740: PUSH
35741: LD_EXP 35
35745: PUSH
35746: LD_EXP 36
35750: PUSH
35751: LD_EXP 37
35755: PUSH
35756: LD_EXP 16
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: DIFF
35781: ST_TO_ADDR
// if tmp then
35782: LD_VAR 0 2
35786: IFFALSE 35800
// SaveCharacters ( tmp , 12p_others ) ;
35788: LD_VAR 0 2
35792: PPUSH
35793: LD_STRING 12p_others
35795: PPUSH
35796: CALL_OW 38
// YouWin ;
35800: CALL_OW 103
// end ; end_of_file
35804: PPOPN 5
35806: END
// on SailEvent ( event ) do var tmp ;
35807: LD_INT 0
35809: PPUSH
// begin if event = 1 then
35810: LD_VAR 0 1
35814: PUSH
35815: LD_INT 1
35817: EQUAL
35818: IFFALSE 35891
// begin if not mobile_patrol then
35820: LD_EXP 17
35824: NOT
35825: IFFALSE 35829
// exit ;
35827: GO 35891
// tmp := mobile_patrol [ mobile_patrol ] ;
35829: LD_ADDR_VAR 0 2
35833: PUSH
35834: LD_EXP 17
35838: PUSH
35839: LD_EXP 17
35843: ARRAY
35844: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
35845: LD_ADDR_EXP 17
35849: PUSH
35850: LD_EXP 17
35854: PPUSH
35855: LD_EXP 17
35859: PPUSH
35860: CALL_OW 3
35864: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
35865: LD_VAR 0 2
35869: PPUSH
35870: LD_EXP 18
35874: PUSH
35875: LD_EXP 17
35879: PUSH
35880: LD_INT 1
35882: PLUS
35883: ARRAY
35884: PPUSH
35885: EMPTY
35886: PPUSH
35887: CALL 7121 0 3
// end ; end ;
35891: PPOPN 2
35893: END
// on UnitDestroyed ( un ) do begin if un = JMM then
35894: LD_VAR 0 1
35898: PUSH
35899: LD_EXP 14
35903: EQUAL
35904: IFFALSE 35913
// YouLost ( JMM ) ;
35906: LD_STRING JMM
35908: PPUSH
35909: CALL_OW 104
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
35913: LD_VAR 0 1
35917: PPUSH
35918: CALL_OW 255
35922: PUSH
35923: LD_INT 7
35925: EQUAL
35926: PUSH
35927: LD_VAR 0 1
35931: PPUSH
35932: CALL_OW 264
35936: PUSH
35937: LD_INT 12
35939: EQUAL
35940: AND
35941: IFFALSE 35950
// YouLost ( Artifact ) ;
35943: LD_STRING Artifact
35945: PPUSH
35946: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
35950: LD_VAR 0 1
35954: PPUSH
35955: CALL_OW 255
35959: PUSH
35960: LD_INT 7
35962: EQUAL
35963: PUSH
35964: LD_VAR 0 1
35968: PPUSH
35969: CALL_OW 247
35973: PUSH
35974: LD_INT 1
35976: EQUAL
35977: AND
35978: PUSH
35979: LD_VAR 0 1
35983: PUSH
35984: LD_EXP 15
35988: EQUAL
35989: OR
35990: IFFALSE 36006
// team_kill_counter := team_kill_counter + 1 ;
35992: LD_ADDR_EXP 9
35996: PUSH
35997: LD_EXP 9
36001: PUSH
36002: LD_INT 1
36004: PLUS
36005: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
36006: LD_VAR 0 1
36010: PPUSH
36011: CALL_OW 255
36015: PUSH
36016: LD_INT 1
36018: EQUAL
36019: PUSH
36020: LD_VAR 0 1
36024: PPUSH
36025: CALL_OW 247
36029: PUSH
36030: LD_INT 1
36032: EQUAL
36033: AND
36034: IFFALSE 36050
// friends_kill_counter := friends_kill_counter + 1 ;
36036: LD_ADDR_EXP 8
36040: PUSH
36041: LD_EXP 8
36045: PUSH
36046: LD_INT 1
36048: PLUS
36049: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
36050: LD_VAR 0 1
36054: PPUSH
36055: CALL_OW 255
36059: PUSH
36060: LD_INT 1
36062: NONEQUAL
36063: IFFALSE 36067
// exit ;
36065: GO 36144
// if GetControl ( un ) = control_remote then
36067: LD_VAR 0 1
36071: PPUSH
36072: CALL_OW 263
36076: PUSH
36077: LD_INT 2
36079: EQUAL
36080: IFFALSE 36098
// defenders := defenders diff un ;
36082: LD_ADDR_EXP 20
36086: PUSH
36087: LD_EXP 20
36091: PUSH
36092: LD_VAR 0 1
36096: DIFF
36097: ST_TO_ADDR
// if not un in defenders then
36098: LD_VAR 0 1
36102: PUSH
36103: LD_EXP 20
36107: IN
36108: NOT
36109: IFFALSE 36144
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
36111: LD_ADDR_EXP 21
36115: PUSH
36116: LD_VAR 0 1
36120: PPUSH
36121: CALL_OW 250
36125: PUSH
36126: LD_VAR 0 1
36130: PPUSH
36131: CALL_OW 251
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: ST_TO_ADDR
// Defend ;
36140: CALL 2772 0 0
// end ; end ;
36144: PPOPN 1
36146: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) <> 1 then
36147: LD_VAR 0 1
36151: PPUSH
36152: CALL_OW 255
36156: PUSH
36157: LD_INT 1
36159: NONEQUAL
36160: IFFALSE 36164
// exit ;
36162: GO 36188
// if GetControl ( veh ) = control_remote then
36164: LD_VAR 0 1
36168: PPUSH
36169: CALL_OW 263
36173: PUSH
36174: LD_INT 2
36176: EQUAL
36177: IFFALSE 36188
// Connect ( veh ) ;
36179: LD_VAR 0 1
36183: PPUSH
36184: CALL 6316 0 1
// end ;
36188: PPOPN 2
36190: END
// on UnitGoesToRed ( un ) do var i , veh ;
36191: LD_INT 0
36193: PPUSH
36194: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
36195: LD_VAR 0 1
36199: PPUSH
36200: CALL_OW 255
36204: PUSH
36205: LD_INT 1
36207: EQUAL
36208: PUSH
36209: LD_VAR 0 1
36213: PPUSH
36214: CALL_OW 263
36218: PUSH
36219: LD_INT 2
36221: EQUAL
36222: AND
36223: IFFALSE 36234
// ComUnlink ( un ) ;
36225: LD_VAR 0 1
36229: PPUSH
36230: CALL_OW 136
// if un = ambar0 then
36234: LD_VAR 0 1
36238: PUSH
36239: LD_INT 18
36241: EQUAL
36242: IFFALSE 36352
// begin uc_side := 1 ;
36244: LD_ADDR_OWVAR 20
36248: PUSH
36249: LD_INT 1
36251: ST_TO_ADDR
// uc_nation := 1 ;
36252: LD_ADDR_OWVAR 21
36256: PUSH
36257: LD_INT 1
36259: ST_TO_ADDR
// for i = 1 to 6 do
36260: LD_ADDR_VAR 0 2
36264: PUSH
36265: DOUBLE
36266: LD_INT 1
36268: DEC
36269: ST_TO_ADDR
36270: LD_INT 6
36272: PUSH
36273: FOR_TO
36274: IFFALSE 36350
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
36276: LD_INT 3
36278: PPUSH
36279: LD_INT 1
36281: PPUSH
36282: LD_INT 3
36284: PPUSH
36285: LD_INT 4
36287: PPUSH
36288: LD_INT 100
36290: PPUSH
36291: CALL 6080 0 5
// veh := CreateVehicle ;
36295: LD_ADDR_VAR 0 3
36299: PUSH
36300: CALL_OW 45
36304: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
36305: LD_VAR 0 3
36309: PPUSH
36310: LD_INT 1
36312: PPUSH
36313: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
36317: LD_VAR 0 3
36321: PPUSH
36322: LD_INT 25
36324: PPUSH
36325: LD_INT 0
36327: PPUSH
36328: CALL_OW 49
// defenders := defenders ^ veh ;
36332: LD_ADDR_EXP 20
36336: PUSH
36337: LD_EXP 20
36341: PUSH
36342: LD_VAR 0 3
36346: ADD
36347: ST_TO_ADDR
// end ;
36348: GO 36273
36350: POP
36351: POP
// end ; end ;
36352: PPOPN 3
36354: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
36355: LD_VAR 0 2
36359: PUSH
36360: LD_EXP 16
36364: EQUAL
36365: IFFALSE 36376
// RemoveUnit ( Powell ) ;
36367: LD_EXP 16
36371: PPUSH
36372: CALL_OW 64
// end ;
36376: PPOPN 2
36378: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
36379: LD_VAR 0 1
36383: PPUSH
36384: CALL 47626 0 1
// end ; end_of_file
36388: PPOPN 1
36390: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
36391: GO 36393
36393: DISABLE
// begin ru_radar := 98 ;
36394: LD_ADDR_EXP 38
36398: PUSH
36399: LD_INT 98
36401: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
36402: LD_ADDR_EXP 39
36406: PUSH
36407: LD_INT 89
36409: ST_TO_ADDR
// us_hack := 99 ;
36410: LD_ADDR_EXP 40
36414: PUSH
36415: LD_INT 99
36417: ST_TO_ADDR
// us_artillery := 97 ;
36418: LD_ADDR_EXP 41
36422: PUSH
36423: LD_INT 97
36425: ST_TO_ADDR
// ar_bio_bomb := 91 ;
36426: LD_ADDR_EXP 42
36430: PUSH
36431: LD_INT 91
36433: ST_TO_ADDR
// tech_Artillery := 80 ;
36434: LD_ADDR_EXP 43
36438: PUSH
36439: LD_INT 80
36441: ST_TO_ADDR
// tech_RadMat := 81 ;
36442: LD_ADDR_EXP 44
36446: PUSH
36447: LD_INT 81
36449: ST_TO_ADDR
// tech_BasicTools := 82 ;
36450: LD_ADDR_EXP 45
36454: PUSH
36455: LD_INT 82
36457: ST_TO_ADDR
// tech_Cargo := 83 ;
36458: LD_ADDR_EXP 46
36462: PUSH
36463: LD_INT 83
36465: ST_TO_ADDR
// tech_Track := 84 ;
36466: LD_ADDR_EXP 47
36470: PUSH
36471: LD_INT 84
36473: ST_TO_ADDR
// tech_Crane := 85 ;
36474: LD_ADDR_EXP 48
36478: PUSH
36479: LD_INT 85
36481: ST_TO_ADDR
// tech_Bulldozer := 86 ;
36482: LD_ADDR_EXP 49
36486: PUSH
36487: LD_INT 86
36489: ST_TO_ADDR
// tech_Hovercraft := 87 ;
36490: LD_ADDR_EXP 50
36494: PUSH
36495: LD_INT 87
36497: ST_TO_ADDR
// end ; end_of_file end_of_file
36498: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
36499: GO 36501
36501: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
36502: LD_STRING initStreamRollete();
36504: PPUSH
36505: CALL_OW 559
// InitStreamMode ;
36509: CALL 36518 0 0
// DefineStreamItems ( ) ;
36513: CALL 36958 0 0
// end ;
36517: END
// function InitStreamMode ; begin
36518: LD_INT 0
36520: PPUSH
// streamModeActive := false ;
36521: LD_ADDR_EXP 51
36525: PUSH
36526: LD_INT 0
36528: ST_TO_ADDR
// normalCounter := 36 ;
36529: LD_ADDR_EXP 52
36533: PUSH
36534: LD_INT 36
36536: ST_TO_ADDR
// hardcoreCounter := 16 ;
36537: LD_ADDR_EXP 53
36541: PUSH
36542: LD_INT 16
36544: ST_TO_ADDR
// sRocket := false ;
36545: LD_ADDR_EXP 56
36549: PUSH
36550: LD_INT 0
36552: ST_TO_ADDR
// sSpeed := false ;
36553: LD_ADDR_EXP 55
36557: PUSH
36558: LD_INT 0
36560: ST_TO_ADDR
// sEngine := false ;
36561: LD_ADDR_EXP 57
36565: PUSH
36566: LD_INT 0
36568: ST_TO_ADDR
// sSpec := false ;
36569: LD_ADDR_EXP 54
36573: PUSH
36574: LD_INT 0
36576: ST_TO_ADDR
// sLevel := false ;
36577: LD_ADDR_EXP 58
36581: PUSH
36582: LD_INT 0
36584: ST_TO_ADDR
// sArmoury := false ;
36585: LD_ADDR_EXP 59
36589: PUSH
36590: LD_INT 0
36592: ST_TO_ADDR
// sRadar := false ;
36593: LD_ADDR_EXP 60
36597: PUSH
36598: LD_INT 0
36600: ST_TO_ADDR
// sBunker := false ;
36601: LD_ADDR_EXP 61
36605: PUSH
36606: LD_INT 0
36608: ST_TO_ADDR
// sHack := false ;
36609: LD_ADDR_EXP 62
36613: PUSH
36614: LD_INT 0
36616: ST_TO_ADDR
// sFire := false ;
36617: LD_ADDR_EXP 63
36621: PUSH
36622: LD_INT 0
36624: ST_TO_ADDR
// sRefresh := false ;
36625: LD_ADDR_EXP 64
36629: PUSH
36630: LD_INT 0
36632: ST_TO_ADDR
// sExp := false ;
36633: LD_ADDR_EXP 65
36637: PUSH
36638: LD_INT 0
36640: ST_TO_ADDR
// sDepot := false ;
36641: LD_ADDR_EXP 66
36645: PUSH
36646: LD_INT 0
36648: ST_TO_ADDR
// sFlag := false ;
36649: LD_ADDR_EXP 67
36653: PUSH
36654: LD_INT 0
36656: ST_TO_ADDR
// sKamikadze := false ;
36657: LD_ADDR_EXP 75
36661: PUSH
36662: LD_INT 0
36664: ST_TO_ADDR
// sTroll := false ;
36665: LD_ADDR_EXP 76
36669: PUSH
36670: LD_INT 0
36672: ST_TO_ADDR
// sSlow := false ;
36673: LD_ADDR_EXP 77
36677: PUSH
36678: LD_INT 0
36680: ST_TO_ADDR
// sLack := false ;
36681: LD_ADDR_EXP 78
36685: PUSH
36686: LD_INT 0
36688: ST_TO_ADDR
// sTank := false ;
36689: LD_ADDR_EXP 80
36693: PUSH
36694: LD_INT 0
36696: ST_TO_ADDR
// sRemote := false ;
36697: LD_ADDR_EXP 81
36701: PUSH
36702: LD_INT 0
36704: ST_TO_ADDR
// sPowell := false ;
36705: LD_ADDR_EXP 82
36709: PUSH
36710: LD_INT 0
36712: ST_TO_ADDR
// sTeleport := false ;
36713: LD_ADDR_EXP 85
36717: PUSH
36718: LD_INT 0
36720: ST_TO_ADDR
// sOilTower := false ;
36721: LD_ADDR_EXP 87
36725: PUSH
36726: LD_INT 0
36728: ST_TO_ADDR
// sShovel := false ;
36729: LD_ADDR_EXP 88
36733: PUSH
36734: LD_INT 0
36736: ST_TO_ADDR
// sSheik := false ;
36737: LD_ADDR_EXP 89
36741: PUSH
36742: LD_INT 0
36744: ST_TO_ADDR
// sEarthquake := false ;
36745: LD_ADDR_EXP 91
36749: PUSH
36750: LD_INT 0
36752: ST_TO_ADDR
// sAI := false ;
36753: LD_ADDR_EXP 92
36757: PUSH
36758: LD_INT 0
36760: ST_TO_ADDR
// sCargo := false ;
36761: LD_ADDR_EXP 95
36765: PUSH
36766: LD_INT 0
36768: ST_TO_ADDR
// sDLaser := false ;
36769: LD_ADDR_EXP 96
36773: PUSH
36774: LD_INT 0
36776: ST_TO_ADDR
// sExchange := false ;
36777: LD_ADDR_EXP 97
36781: PUSH
36782: LD_INT 0
36784: ST_TO_ADDR
// sFac := false ;
36785: LD_ADDR_EXP 98
36789: PUSH
36790: LD_INT 0
36792: ST_TO_ADDR
// sPower := false ;
36793: LD_ADDR_EXP 99
36797: PUSH
36798: LD_INT 0
36800: ST_TO_ADDR
// sRandom := false ;
36801: LD_ADDR_EXP 100
36805: PUSH
36806: LD_INT 0
36808: ST_TO_ADDR
// sShield := false ;
36809: LD_ADDR_EXP 101
36813: PUSH
36814: LD_INT 0
36816: ST_TO_ADDR
// sTime := false ;
36817: LD_ADDR_EXP 102
36821: PUSH
36822: LD_INT 0
36824: ST_TO_ADDR
// sTools := false ;
36825: LD_ADDR_EXP 103
36829: PUSH
36830: LD_INT 0
36832: ST_TO_ADDR
// sSold := false ;
36833: LD_ADDR_EXP 68
36837: PUSH
36838: LD_INT 0
36840: ST_TO_ADDR
// sDiff := false ;
36841: LD_ADDR_EXP 69
36845: PUSH
36846: LD_INT 0
36848: ST_TO_ADDR
// sFog := false ;
36849: LD_ADDR_EXP 72
36853: PUSH
36854: LD_INT 0
36856: ST_TO_ADDR
// sReset := false ;
36857: LD_ADDR_EXP 73
36861: PUSH
36862: LD_INT 0
36864: ST_TO_ADDR
// sSun := false ;
36865: LD_ADDR_EXP 74
36869: PUSH
36870: LD_INT 0
36872: ST_TO_ADDR
// sTiger := false ;
36873: LD_ADDR_EXP 70
36877: PUSH
36878: LD_INT 0
36880: ST_TO_ADDR
// sBomb := false ;
36881: LD_ADDR_EXP 71
36885: PUSH
36886: LD_INT 0
36888: ST_TO_ADDR
// sWound := false ;
36889: LD_ADDR_EXP 79
36893: PUSH
36894: LD_INT 0
36896: ST_TO_ADDR
// sBetray := false ;
36897: LD_ADDR_EXP 83
36901: PUSH
36902: LD_INT 0
36904: ST_TO_ADDR
// sContamin := false ;
36905: LD_ADDR_EXP 84
36909: PUSH
36910: LD_INT 0
36912: ST_TO_ADDR
// sOil := false ;
36913: LD_ADDR_EXP 86
36917: PUSH
36918: LD_INT 0
36920: ST_TO_ADDR
// sStu := false ;
36921: LD_ADDR_EXP 90
36925: PUSH
36926: LD_INT 0
36928: ST_TO_ADDR
// sBazooka := false ;
36929: LD_ADDR_EXP 93
36933: PUSH
36934: LD_INT 0
36936: ST_TO_ADDR
// sMortar := false ;
36937: LD_ADDR_EXP 94
36941: PUSH
36942: LD_INT 0
36944: ST_TO_ADDR
// sRanger := false ;
36945: LD_ADDR_EXP 104
36949: PUSH
36950: LD_INT 0
36952: ST_TO_ADDR
// end ;
36953: LD_VAR 0 1
36957: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
36958: LD_INT 0
36960: PPUSH
36961: PPUSH
36962: PPUSH
36963: PPUSH
36964: PPUSH
// result := [ ] ;
36965: LD_ADDR_VAR 0 1
36969: PUSH
36970: EMPTY
36971: ST_TO_ADDR
// if campaign_id = 1 then
36972: LD_OWVAR 69
36976: PUSH
36977: LD_INT 1
36979: EQUAL
36980: IFFALSE 39918
// begin case mission_number of 1 :
36982: LD_OWVAR 70
36986: PUSH
36987: LD_INT 1
36989: DOUBLE
36990: EQUAL
36991: IFTRUE 36995
36993: GO 37059
36995: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
36996: LD_ADDR_VAR 0 1
37000: PUSH
37001: LD_INT 2
37003: PUSH
37004: LD_INT 4
37006: PUSH
37007: LD_INT 11
37009: PUSH
37010: LD_INT 12
37012: PUSH
37013: LD_INT 15
37015: PUSH
37016: LD_INT 16
37018: PUSH
37019: LD_INT 22
37021: PUSH
37022: LD_INT 23
37024: PUSH
37025: LD_INT 26
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 101
37041: PUSH
37042: LD_INT 102
37044: PUSH
37045: LD_INT 106
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: LIST
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: ST_TO_ADDR
37057: GO 39916
37059: LD_INT 2
37061: DOUBLE
37062: EQUAL
37063: IFTRUE 37067
37065: GO 37139
37067: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
37068: LD_ADDR_VAR 0 1
37072: PUSH
37073: LD_INT 2
37075: PUSH
37076: LD_INT 4
37078: PUSH
37079: LD_INT 11
37081: PUSH
37082: LD_INT 12
37084: PUSH
37085: LD_INT 15
37087: PUSH
37088: LD_INT 16
37090: PUSH
37091: LD_INT 22
37093: PUSH
37094: LD_INT 23
37096: PUSH
37097: LD_INT 26
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 101
37113: PUSH
37114: LD_INT 102
37116: PUSH
37117: LD_INT 105
37119: PUSH
37120: LD_INT 106
37122: PUSH
37123: LD_INT 108
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: ST_TO_ADDR
37137: GO 39916
37139: LD_INT 3
37141: DOUBLE
37142: EQUAL
37143: IFTRUE 37147
37145: GO 37223
37147: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
37148: LD_ADDR_VAR 0 1
37152: PUSH
37153: LD_INT 2
37155: PUSH
37156: LD_INT 4
37158: PUSH
37159: LD_INT 5
37161: PUSH
37162: LD_INT 11
37164: PUSH
37165: LD_INT 12
37167: PUSH
37168: LD_INT 15
37170: PUSH
37171: LD_INT 16
37173: PUSH
37174: LD_INT 22
37176: PUSH
37177: LD_INT 26
37179: PUSH
37180: LD_INT 36
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: LIST
37191: LIST
37192: LIST
37193: LIST
37194: PUSH
37195: LD_INT 101
37197: PUSH
37198: LD_INT 102
37200: PUSH
37201: LD_INT 105
37203: PUSH
37204: LD_INT 106
37206: PUSH
37207: LD_INT 108
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: ST_TO_ADDR
37221: GO 39916
37223: LD_INT 4
37225: DOUBLE
37226: EQUAL
37227: IFTRUE 37231
37229: GO 37315
37231: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
37232: LD_ADDR_VAR 0 1
37236: PUSH
37237: LD_INT 2
37239: PUSH
37240: LD_INT 4
37242: PUSH
37243: LD_INT 5
37245: PUSH
37246: LD_INT 8
37248: PUSH
37249: LD_INT 11
37251: PUSH
37252: LD_INT 12
37254: PUSH
37255: LD_INT 15
37257: PUSH
37258: LD_INT 16
37260: PUSH
37261: LD_INT 22
37263: PUSH
37264: LD_INT 23
37266: PUSH
37267: LD_INT 26
37269: PUSH
37270: LD_INT 36
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 101
37289: PUSH
37290: LD_INT 102
37292: PUSH
37293: LD_INT 105
37295: PUSH
37296: LD_INT 106
37298: PUSH
37299: LD_INT 108
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: ST_TO_ADDR
37313: GO 39916
37315: LD_INT 5
37317: DOUBLE
37318: EQUAL
37319: IFTRUE 37323
37321: GO 37423
37323: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
37324: LD_ADDR_VAR 0 1
37328: PUSH
37329: LD_INT 2
37331: PUSH
37332: LD_INT 4
37334: PUSH
37335: LD_INT 5
37337: PUSH
37338: LD_INT 6
37340: PUSH
37341: LD_INT 8
37343: PUSH
37344: LD_INT 11
37346: PUSH
37347: LD_INT 12
37349: PUSH
37350: LD_INT 15
37352: PUSH
37353: LD_INT 16
37355: PUSH
37356: LD_INT 22
37358: PUSH
37359: LD_INT 23
37361: PUSH
37362: LD_INT 25
37364: PUSH
37365: LD_INT 26
37367: PUSH
37368: LD_INT 36
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 101
37389: PUSH
37390: LD_INT 102
37392: PUSH
37393: LD_INT 105
37395: PUSH
37396: LD_INT 106
37398: PUSH
37399: LD_INT 108
37401: PUSH
37402: LD_INT 109
37404: PUSH
37405: LD_INT 112
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: ST_TO_ADDR
37421: GO 39916
37423: LD_INT 6
37425: DOUBLE
37426: EQUAL
37427: IFTRUE 37431
37429: GO 37551
37431: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
37432: LD_ADDR_VAR 0 1
37436: PUSH
37437: LD_INT 2
37439: PUSH
37440: LD_INT 4
37442: PUSH
37443: LD_INT 5
37445: PUSH
37446: LD_INT 6
37448: PUSH
37449: LD_INT 8
37451: PUSH
37452: LD_INT 11
37454: PUSH
37455: LD_INT 12
37457: PUSH
37458: LD_INT 15
37460: PUSH
37461: LD_INT 16
37463: PUSH
37464: LD_INT 20
37466: PUSH
37467: LD_INT 21
37469: PUSH
37470: LD_INT 22
37472: PUSH
37473: LD_INT 23
37475: PUSH
37476: LD_INT 25
37478: PUSH
37479: LD_INT 26
37481: PUSH
37482: LD_INT 30
37484: PUSH
37485: LD_INT 31
37487: PUSH
37488: LD_INT 32
37490: PUSH
37491: LD_INT 36
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 101
37517: PUSH
37518: LD_INT 102
37520: PUSH
37521: LD_INT 105
37523: PUSH
37524: LD_INT 106
37526: PUSH
37527: LD_INT 108
37529: PUSH
37530: LD_INT 109
37532: PUSH
37533: LD_INT 112
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: ST_TO_ADDR
37549: GO 39916
37551: LD_INT 7
37553: DOUBLE
37554: EQUAL
37555: IFTRUE 37559
37557: GO 37659
37559: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
37560: LD_ADDR_VAR 0 1
37564: PUSH
37565: LD_INT 2
37567: PUSH
37568: LD_INT 4
37570: PUSH
37571: LD_INT 5
37573: PUSH
37574: LD_INT 7
37576: PUSH
37577: LD_INT 11
37579: PUSH
37580: LD_INT 12
37582: PUSH
37583: LD_INT 15
37585: PUSH
37586: LD_INT 16
37588: PUSH
37589: LD_INT 20
37591: PUSH
37592: LD_INT 21
37594: PUSH
37595: LD_INT 22
37597: PUSH
37598: LD_INT 23
37600: PUSH
37601: LD_INT 25
37603: PUSH
37604: LD_INT 26
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 101
37625: PUSH
37626: LD_INT 102
37628: PUSH
37629: LD_INT 103
37631: PUSH
37632: LD_INT 105
37634: PUSH
37635: LD_INT 106
37637: PUSH
37638: LD_INT 108
37640: PUSH
37641: LD_INT 112
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: ST_TO_ADDR
37657: GO 39916
37659: LD_INT 8
37661: DOUBLE
37662: EQUAL
37663: IFTRUE 37667
37665: GO 37795
37667: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
37668: LD_ADDR_VAR 0 1
37672: PUSH
37673: LD_INT 2
37675: PUSH
37676: LD_INT 4
37678: PUSH
37679: LD_INT 5
37681: PUSH
37682: LD_INT 6
37684: PUSH
37685: LD_INT 7
37687: PUSH
37688: LD_INT 8
37690: PUSH
37691: LD_INT 11
37693: PUSH
37694: LD_INT 12
37696: PUSH
37697: LD_INT 15
37699: PUSH
37700: LD_INT 16
37702: PUSH
37703: LD_INT 20
37705: PUSH
37706: LD_INT 21
37708: PUSH
37709: LD_INT 22
37711: PUSH
37712: LD_INT 23
37714: PUSH
37715: LD_INT 25
37717: PUSH
37718: LD_INT 26
37720: PUSH
37721: LD_INT 30
37723: PUSH
37724: LD_INT 31
37726: PUSH
37727: LD_INT 32
37729: PUSH
37730: LD_INT 36
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 101
37757: PUSH
37758: LD_INT 102
37760: PUSH
37761: LD_INT 103
37763: PUSH
37764: LD_INT 105
37766: PUSH
37767: LD_INT 106
37769: PUSH
37770: LD_INT 108
37772: PUSH
37773: LD_INT 109
37775: PUSH
37776: LD_INT 112
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: ST_TO_ADDR
37793: GO 39916
37795: LD_INT 9
37797: DOUBLE
37798: EQUAL
37799: IFTRUE 37803
37801: GO 37939
37803: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
37804: LD_ADDR_VAR 0 1
37808: PUSH
37809: LD_INT 2
37811: PUSH
37812: LD_INT 4
37814: PUSH
37815: LD_INT 5
37817: PUSH
37818: LD_INT 6
37820: PUSH
37821: LD_INT 7
37823: PUSH
37824: LD_INT 8
37826: PUSH
37827: LD_INT 11
37829: PUSH
37830: LD_INT 12
37832: PUSH
37833: LD_INT 15
37835: PUSH
37836: LD_INT 16
37838: PUSH
37839: LD_INT 20
37841: PUSH
37842: LD_INT 21
37844: PUSH
37845: LD_INT 22
37847: PUSH
37848: LD_INT 23
37850: PUSH
37851: LD_INT 25
37853: PUSH
37854: LD_INT 26
37856: PUSH
37857: LD_INT 28
37859: PUSH
37860: LD_INT 30
37862: PUSH
37863: LD_INT 31
37865: PUSH
37866: LD_INT 32
37868: PUSH
37869: LD_INT 36
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: PUSH
37895: LD_INT 101
37897: PUSH
37898: LD_INT 102
37900: PUSH
37901: LD_INT 103
37903: PUSH
37904: LD_INT 105
37906: PUSH
37907: LD_INT 106
37909: PUSH
37910: LD_INT 108
37912: PUSH
37913: LD_INT 109
37915: PUSH
37916: LD_INT 112
37918: PUSH
37919: LD_INT 114
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: ST_TO_ADDR
37937: GO 39916
37939: LD_INT 10
37941: DOUBLE
37942: EQUAL
37943: IFTRUE 37947
37945: GO 38131
37947: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
37948: LD_ADDR_VAR 0 1
37952: PUSH
37953: LD_INT 2
37955: PUSH
37956: LD_INT 4
37958: PUSH
37959: LD_INT 5
37961: PUSH
37962: LD_INT 6
37964: PUSH
37965: LD_INT 7
37967: PUSH
37968: LD_INT 8
37970: PUSH
37971: LD_INT 9
37973: PUSH
37974: LD_INT 10
37976: PUSH
37977: LD_INT 11
37979: PUSH
37980: LD_INT 12
37982: PUSH
37983: LD_INT 13
37985: PUSH
37986: LD_INT 14
37988: PUSH
37989: LD_INT 15
37991: PUSH
37992: LD_INT 16
37994: PUSH
37995: LD_INT 17
37997: PUSH
37998: LD_INT 18
38000: PUSH
38001: LD_INT 19
38003: PUSH
38004: LD_INT 20
38006: PUSH
38007: LD_INT 21
38009: PUSH
38010: LD_INT 22
38012: PUSH
38013: LD_INT 23
38015: PUSH
38016: LD_INT 24
38018: PUSH
38019: LD_INT 25
38021: PUSH
38022: LD_INT 26
38024: PUSH
38025: LD_INT 28
38027: PUSH
38028: LD_INT 30
38030: PUSH
38031: LD_INT 31
38033: PUSH
38034: LD_INT 32
38036: PUSH
38037: LD_INT 36
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: LIST
38044: LIST
38045: LIST
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 101
38073: PUSH
38074: LD_INT 102
38076: PUSH
38077: LD_INT 103
38079: PUSH
38080: LD_INT 104
38082: PUSH
38083: LD_INT 105
38085: PUSH
38086: LD_INT 106
38088: PUSH
38089: LD_INT 107
38091: PUSH
38092: LD_INT 108
38094: PUSH
38095: LD_INT 109
38097: PUSH
38098: LD_INT 110
38100: PUSH
38101: LD_INT 111
38103: PUSH
38104: LD_INT 112
38106: PUSH
38107: LD_INT 114
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: ST_TO_ADDR
38129: GO 39916
38131: LD_INT 11
38133: DOUBLE
38134: EQUAL
38135: IFTRUE 38139
38137: GO 38331
38139: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
38140: LD_ADDR_VAR 0 1
38144: PUSH
38145: LD_INT 2
38147: PUSH
38148: LD_INT 3
38150: PUSH
38151: LD_INT 4
38153: PUSH
38154: LD_INT 5
38156: PUSH
38157: LD_INT 6
38159: PUSH
38160: LD_INT 7
38162: PUSH
38163: LD_INT 8
38165: PUSH
38166: LD_INT 9
38168: PUSH
38169: LD_INT 10
38171: PUSH
38172: LD_INT 11
38174: PUSH
38175: LD_INT 12
38177: PUSH
38178: LD_INT 13
38180: PUSH
38181: LD_INT 14
38183: PUSH
38184: LD_INT 15
38186: PUSH
38187: LD_INT 16
38189: PUSH
38190: LD_INT 17
38192: PUSH
38193: LD_INT 18
38195: PUSH
38196: LD_INT 19
38198: PUSH
38199: LD_INT 20
38201: PUSH
38202: LD_INT 21
38204: PUSH
38205: LD_INT 22
38207: PUSH
38208: LD_INT 23
38210: PUSH
38211: LD_INT 24
38213: PUSH
38214: LD_INT 25
38216: PUSH
38217: LD_INT 26
38219: PUSH
38220: LD_INT 28
38222: PUSH
38223: LD_INT 30
38225: PUSH
38226: LD_INT 31
38228: PUSH
38229: LD_INT 32
38231: PUSH
38232: LD_INT 34
38234: PUSH
38235: LD_INT 36
38237: PUSH
38238: EMPTY
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 101
38273: PUSH
38274: LD_INT 102
38276: PUSH
38277: LD_INT 103
38279: PUSH
38280: LD_INT 104
38282: PUSH
38283: LD_INT 105
38285: PUSH
38286: LD_INT 106
38288: PUSH
38289: LD_INT 107
38291: PUSH
38292: LD_INT 108
38294: PUSH
38295: LD_INT 109
38297: PUSH
38298: LD_INT 110
38300: PUSH
38301: LD_INT 111
38303: PUSH
38304: LD_INT 112
38306: PUSH
38307: LD_INT 114
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: ST_TO_ADDR
38329: GO 39916
38331: LD_INT 12
38333: DOUBLE
38334: EQUAL
38335: IFTRUE 38339
38337: GO 38547
38339: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
38340: LD_ADDR_VAR 0 1
38344: PUSH
38345: LD_INT 1
38347: PUSH
38348: LD_INT 2
38350: PUSH
38351: LD_INT 3
38353: PUSH
38354: LD_INT 4
38356: PUSH
38357: LD_INT 5
38359: PUSH
38360: LD_INT 6
38362: PUSH
38363: LD_INT 7
38365: PUSH
38366: LD_INT 8
38368: PUSH
38369: LD_INT 9
38371: PUSH
38372: LD_INT 10
38374: PUSH
38375: LD_INT 11
38377: PUSH
38378: LD_INT 12
38380: PUSH
38381: LD_INT 13
38383: PUSH
38384: LD_INT 14
38386: PUSH
38387: LD_INT 15
38389: PUSH
38390: LD_INT 16
38392: PUSH
38393: LD_INT 17
38395: PUSH
38396: LD_INT 18
38398: PUSH
38399: LD_INT 19
38401: PUSH
38402: LD_INT 20
38404: PUSH
38405: LD_INT 21
38407: PUSH
38408: LD_INT 22
38410: PUSH
38411: LD_INT 23
38413: PUSH
38414: LD_INT 24
38416: PUSH
38417: LD_INT 25
38419: PUSH
38420: LD_INT 26
38422: PUSH
38423: LD_INT 27
38425: PUSH
38426: LD_INT 28
38428: PUSH
38429: LD_INT 30
38431: PUSH
38432: LD_INT 31
38434: PUSH
38435: LD_INT 32
38437: PUSH
38438: LD_INT 33
38440: PUSH
38441: LD_INT 34
38443: PUSH
38444: LD_INT 36
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 101
38485: PUSH
38486: LD_INT 102
38488: PUSH
38489: LD_INT 103
38491: PUSH
38492: LD_INT 104
38494: PUSH
38495: LD_INT 105
38497: PUSH
38498: LD_INT 106
38500: PUSH
38501: LD_INT 107
38503: PUSH
38504: LD_INT 108
38506: PUSH
38507: LD_INT 109
38509: PUSH
38510: LD_INT 110
38512: PUSH
38513: LD_INT 111
38515: PUSH
38516: LD_INT 112
38518: PUSH
38519: LD_INT 113
38521: PUSH
38522: LD_INT 114
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: ST_TO_ADDR
38545: GO 39916
38547: LD_INT 13
38549: DOUBLE
38550: EQUAL
38551: IFTRUE 38555
38553: GO 38751
38555: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
38556: LD_ADDR_VAR 0 1
38560: PUSH
38561: LD_INT 1
38563: PUSH
38564: LD_INT 2
38566: PUSH
38567: LD_INT 3
38569: PUSH
38570: LD_INT 4
38572: PUSH
38573: LD_INT 5
38575: PUSH
38576: LD_INT 8
38578: PUSH
38579: LD_INT 9
38581: PUSH
38582: LD_INT 10
38584: PUSH
38585: LD_INT 11
38587: PUSH
38588: LD_INT 12
38590: PUSH
38591: LD_INT 14
38593: PUSH
38594: LD_INT 15
38596: PUSH
38597: LD_INT 16
38599: PUSH
38600: LD_INT 17
38602: PUSH
38603: LD_INT 18
38605: PUSH
38606: LD_INT 19
38608: PUSH
38609: LD_INT 20
38611: PUSH
38612: LD_INT 21
38614: PUSH
38615: LD_INT 22
38617: PUSH
38618: LD_INT 23
38620: PUSH
38621: LD_INT 24
38623: PUSH
38624: LD_INT 25
38626: PUSH
38627: LD_INT 26
38629: PUSH
38630: LD_INT 27
38632: PUSH
38633: LD_INT 28
38635: PUSH
38636: LD_INT 30
38638: PUSH
38639: LD_INT 31
38641: PUSH
38642: LD_INT 32
38644: PUSH
38645: LD_INT 33
38647: PUSH
38648: LD_INT 34
38650: PUSH
38651: LD_INT 36
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: LIST
38670: LIST
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: PUSH
38687: LD_INT 101
38689: PUSH
38690: LD_INT 102
38692: PUSH
38693: LD_INT 103
38695: PUSH
38696: LD_INT 104
38698: PUSH
38699: LD_INT 105
38701: PUSH
38702: LD_INT 106
38704: PUSH
38705: LD_INT 107
38707: PUSH
38708: LD_INT 108
38710: PUSH
38711: LD_INT 109
38713: PUSH
38714: LD_INT 110
38716: PUSH
38717: LD_INT 111
38719: PUSH
38720: LD_INT 112
38722: PUSH
38723: LD_INT 113
38725: PUSH
38726: LD_INT 114
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: ST_TO_ADDR
38749: GO 39916
38751: LD_INT 14
38753: DOUBLE
38754: EQUAL
38755: IFTRUE 38759
38757: GO 38971
38759: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
38760: LD_ADDR_VAR 0 1
38764: PUSH
38765: LD_INT 1
38767: PUSH
38768: LD_INT 2
38770: PUSH
38771: LD_INT 3
38773: PUSH
38774: LD_INT 4
38776: PUSH
38777: LD_INT 5
38779: PUSH
38780: LD_INT 6
38782: PUSH
38783: LD_INT 7
38785: PUSH
38786: LD_INT 8
38788: PUSH
38789: LD_INT 9
38791: PUSH
38792: LD_INT 10
38794: PUSH
38795: LD_INT 11
38797: PUSH
38798: LD_INT 12
38800: PUSH
38801: LD_INT 13
38803: PUSH
38804: LD_INT 14
38806: PUSH
38807: LD_INT 15
38809: PUSH
38810: LD_INT 16
38812: PUSH
38813: LD_INT 17
38815: PUSH
38816: LD_INT 18
38818: PUSH
38819: LD_INT 19
38821: PUSH
38822: LD_INT 20
38824: PUSH
38825: LD_INT 21
38827: PUSH
38828: LD_INT 22
38830: PUSH
38831: LD_INT 23
38833: PUSH
38834: LD_INT 24
38836: PUSH
38837: LD_INT 25
38839: PUSH
38840: LD_INT 26
38842: PUSH
38843: LD_INT 27
38845: PUSH
38846: LD_INT 28
38848: PUSH
38849: LD_INT 29
38851: PUSH
38852: LD_INT 30
38854: PUSH
38855: LD_INT 31
38857: PUSH
38858: LD_INT 32
38860: PUSH
38861: LD_INT 33
38863: PUSH
38864: LD_INT 34
38866: PUSH
38867: LD_INT 36
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 101
38909: PUSH
38910: LD_INT 102
38912: PUSH
38913: LD_INT 103
38915: PUSH
38916: LD_INT 104
38918: PUSH
38919: LD_INT 105
38921: PUSH
38922: LD_INT 106
38924: PUSH
38925: LD_INT 107
38927: PUSH
38928: LD_INT 108
38930: PUSH
38931: LD_INT 109
38933: PUSH
38934: LD_INT 110
38936: PUSH
38937: LD_INT 111
38939: PUSH
38940: LD_INT 112
38942: PUSH
38943: LD_INT 113
38945: PUSH
38946: LD_INT 114
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: LIST
38953: LIST
38954: LIST
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: ST_TO_ADDR
38969: GO 39916
38971: LD_INT 15
38973: DOUBLE
38974: EQUAL
38975: IFTRUE 38979
38977: GO 39191
38979: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
38980: LD_ADDR_VAR 0 1
38984: PUSH
38985: LD_INT 1
38987: PUSH
38988: LD_INT 2
38990: PUSH
38991: LD_INT 3
38993: PUSH
38994: LD_INT 4
38996: PUSH
38997: LD_INT 5
38999: PUSH
39000: LD_INT 6
39002: PUSH
39003: LD_INT 7
39005: PUSH
39006: LD_INT 8
39008: PUSH
39009: LD_INT 9
39011: PUSH
39012: LD_INT 10
39014: PUSH
39015: LD_INT 11
39017: PUSH
39018: LD_INT 12
39020: PUSH
39021: LD_INT 13
39023: PUSH
39024: LD_INT 14
39026: PUSH
39027: LD_INT 15
39029: PUSH
39030: LD_INT 16
39032: PUSH
39033: LD_INT 17
39035: PUSH
39036: LD_INT 18
39038: PUSH
39039: LD_INT 19
39041: PUSH
39042: LD_INT 20
39044: PUSH
39045: LD_INT 21
39047: PUSH
39048: LD_INT 22
39050: PUSH
39051: LD_INT 23
39053: PUSH
39054: LD_INT 24
39056: PUSH
39057: LD_INT 25
39059: PUSH
39060: LD_INT 26
39062: PUSH
39063: LD_INT 27
39065: PUSH
39066: LD_INT 28
39068: PUSH
39069: LD_INT 29
39071: PUSH
39072: LD_INT 30
39074: PUSH
39075: LD_INT 31
39077: PUSH
39078: LD_INT 32
39080: PUSH
39081: LD_INT 33
39083: PUSH
39084: LD_INT 34
39086: PUSH
39087: LD_INT 36
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 101
39129: PUSH
39130: LD_INT 102
39132: PUSH
39133: LD_INT 103
39135: PUSH
39136: LD_INT 104
39138: PUSH
39139: LD_INT 105
39141: PUSH
39142: LD_INT 106
39144: PUSH
39145: LD_INT 107
39147: PUSH
39148: LD_INT 108
39150: PUSH
39151: LD_INT 109
39153: PUSH
39154: LD_INT 110
39156: PUSH
39157: LD_INT 111
39159: PUSH
39160: LD_INT 112
39162: PUSH
39163: LD_INT 113
39165: PUSH
39166: LD_INT 114
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: LIST
39182: LIST
39183: LIST
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: ST_TO_ADDR
39189: GO 39916
39191: LD_INT 16
39193: DOUBLE
39194: EQUAL
39195: IFTRUE 39199
39197: GO 39323
39199: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
39200: LD_ADDR_VAR 0 1
39204: PUSH
39205: LD_INT 2
39207: PUSH
39208: LD_INT 4
39210: PUSH
39211: LD_INT 5
39213: PUSH
39214: LD_INT 7
39216: PUSH
39217: LD_INT 11
39219: PUSH
39220: LD_INT 12
39222: PUSH
39223: LD_INT 15
39225: PUSH
39226: LD_INT 16
39228: PUSH
39229: LD_INT 20
39231: PUSH
39232: LD_INT 21
39234: PUSH
39235: LD_INT 22
39237: PUSH
39238: LD_INT 23
39240: PUSH
39241: LD_INT 25
39243: PUSH
39244: LD_INT 26
39246: PUSH
39247: LD_INT 30
39249: PUSH
39250: LD_INT 31
39252: PUSH
39253: LD_INT 32
39255: PUSH
39256: LD_INT 33
39258: PUSH
39259: LD_INT 34
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 101
39285: PUSH
39286: LD_INT 102
39288: PUSH
39289: LD_INT 103
39291: PUSH
39292: LD_INT 106
39294: PUSH
39295: LD_INT 108
39297: PUSH
39298: LD_INT 112
39300: PUSH
39301: LD_INT 113
39303: PUSH
39304: LD_INT 114
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: ST_TO_ADDR
39321: GO 39916
39323: LD_INT 17
39325: DOUBLE
39326: EQUAL
39327: IFTRUE 39331
39329: GO 39543
39331: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
39332: LD_ADDR_VAR 0 1
39336: PUSH
39337: LD_INT 1
39339: PUSH
39340: LD_INT 2
39342: PUSH
39343: LD_INT 3
39345: PUSH
39346: LD_INT 4
39348: PUSH
39349: LD_INT 5
39351: PUSH
39352: LD_INT 6
39354: PUSH
39355: LD_INT 7
39357: PUSH
39358: LD_INT 8
39360: PUSH
39361: LD_INT 9
39363: PUSH
39364: LD_INT 10
39366: PUSH
39367: LD_INT 11
39369: PUSH
39370: LD_INT 12
39372: PUSH
39373: LD_INT 13
39375: PUSH
39376: LD_INT 14
39378: PUSH
39379: LD_INT 15
39381: PUSH
39382: LD_INT 16
39384: PUSH
39385: LD_INT 17
39387: PUSH
39388: LD_INT 18
39390: PUSH
39391: LD_INT 19
39393: PUSH
39394: LD_INT 20
39396: PUSH
39397: LD_INT 21
39399: PUSH
39400: LD_INT 22
39402: PUSH
39403: LD_INT 23
39405: PUSH
39406: LD_INT 24
39408: PUSH
39409: LD_INT 25
39411: PUSH
39412: LD_INT 26
39414: PUSH
39415: LD_INT 27
39417: PUSH
39418: LD_INT 28
39420: PUSH
39421: LD_INT 29
39423: PUSH
39424: LD_INT 30
39426: PUSH
39427: LD_INT 31
39429: PUSH
39430: LD_INT 32
39432: PUSH
39433: LD_INT 33
39435: PUSH
39436: LD_INT 34
39438: PUSH
39439: LD_INT 36
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 101
39481: PUSH
39482: LD_INT 102
39484: PUSH
39485: LD_INT 103
39487: PUSH
39488: LD_INT 104
39490: PUSH
39491: LD_INT 105
39493: PUSH
39494: LD_INT 106
39496: PUSH
39497: LD_INT 107
39499: PUSH
39500: LD_INT 108
39502: PUSH
39503: LD_INT 109
39505: PUSH
39506: LD_INT 110
39508: PUSH
39509: LD_INT 111
39511: PUSH
39512: LD_INT 112
39514: PUSH
39515: LD_INT 113
39517: PUSH
39518: LD_INT 114
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: ST_TO_ADDR
39541: GO 39916
39543: LD_INT 18
39545: DOUBLE
39546: EQUAL
39547: IFTRUE 39551
39549: GO 39687
39551: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
39552: LD_ADDR_VAR 0 1
39556: PUSH
39557: LD_INT 2
39559: PUSH
39560: LD_INT 4
39562: PUSH
39563: LD_INT 5
39565: PUSH
39566: LD_INT 7
39568: PUSH
39569: LD_INT 11
39571: PUSH
39572: LD_INT 12
39574: PUSH
39575: LD_INT 15
39577: PUSH
39578: LD_INT 16
39580: PUSH
39581: LD_INT 20
39583: PUSH
39584: LD_INT 21
39586: PUSH
39587: LD_INT 22
39589: PUSH
39590: LD_INT 23
39592: PUSH
39593: LD_INT 25
39595: PUSH
39596: LD_INT 26
39598: PUSH
39599: LD_INT 30
39601: PUSH
39602: LD_INT 31
39604: PUSH
39605: LD_INT 32
39607: PUSH
39608: LD_INT 33
39610: PUSH
39611: LD_INT 34
39613: PUSH
39614: LD_INT 35
39616: PUSH
39617: LD_INT 36
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 101
39645: PUSH
39646: LD_INT 102
39648: PUSH
39649: LD_INT 103
39651: PUSH
39652: LD_INT 106
39654: PUSH
39655: LD_INT 108
39657: PUSH
39658: LD_INT 112
39660: PUSH
39661: LD_INT 113
39663: PUSH
39664: LD_INT 114
39666: PUSH
39667: LD_INT 115
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: ST_TO_ADDR
39685: GO 39916
39687: LD_INT 19
39689: DOUBLE
39690: EQUAL
39691: IFTRUE 39695
39693: GO 39915
39695: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
39696: LD_ADDR_VAR 0 1
39700: PUSH
39701: LD_INT 1
39703: PUSH
39704: LD_INT 2
39706: PUSH
39707: LD_INT 3
39709: PUSH
39710: LD_INT 4
39712: PUSH
39713: LD_INT 5
39715: PUSH
39716: LD_INT 6
39718: PUSH
39719: LD_INT 7
39721: PUSH
39722: LD_INT 8
39724: PUSH
39725: LD_INT 9
39727: PUSH
39728: LD_INT 10
39730: PUSH
39731: LD_INT 11
39733: PUSH
39734: LD_INT 12
39736: PUSH
39737: LD_INT 13
39739: PUSH
39740: LD_INT 14
39742: PUSH
39743: LD_INT 15
39745: PUSH
39746: LD_INT 16
39748: PUSH
39749: LD_INT 17
39751: PUSH
39752: LD_INT 18
39754: PUSH
39755: LD_INT 19
39757: PUSH
39758: LD_INT 20
39760: PUSH
39761: LD_INT 21
39763: PUSH
39764: LD_INT 22
39766: PUSH
39767: LD_INT 23
39769: PUSH
39770: LD_INT 24
39772: PUSH
39773: LD_INT 25
39775: PUSH
39776: LD_INT 26
39778: PUSH
39779: LD_INT 27
39781: PUSH
39782: LD_INT 28
39784: PUSH
39785: LD_INT 29
39787: PUSH
39788: LD_INT 30
39790: PUSH
39791: LD_INT 31
39793: PUSH
39794: LD_INT 32
39796: PUSH
39797: LD_INT 33
39799: PUSH
39800: LD_INT 34
39802: PUSH
39803: LD_INT 35
39805: PUSH
39806: LD_INT 36
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 101
39849: PUSH
39850: LD_INT 102
39852: PUSH
39853: LD_INT 103
39855: PUSH
39856: LD_INT 104
39858: PUSH
39859: LD_INT 105
39861: PUSH
39862: LD_INT 106
39864: PUSH
39865: LD_INT 107
39867: PUSH
39868: LD_INT 108
39870: PUSH
39871: LD_INT 109
39873: PUSH
39874: LD_INT 110
39876: PUSH
39877: LD_INT 111
39879: PUSH
39880: LD_INT 112
39882: PUSH
39883: LD_INT 113
39885: PUSH
39886: LD_INT 114
39888: PUSH
39889: LD_INT 115
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: LIST
39901: LIST
39902: LIST
39903: LIST
39904: LIST
39905: LIST
39906: LIST
39907: LIST
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: ST_TO_ADDR
39913: GO 39916
39915: POP
// end else
39916: GO 40135
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
39918: LD_ADDR_VAR 0 1
39922: PUSH
39923: LD_INT 1
39925: PUSH
39926: LD_INT 2
39928: PUSH
39929: LD_INT 3
39931: PUSH
39932: LD_INT 4
39934: PUSH
39935: LD_INT 5
39937: PUSH
39938: LD_INT 6
39940: PUSH
39941: LD_INT 7
39943: PUSH
39944: LD_INT 8
39946: PUSH
39947: LD_INT 9
39949: PUSH
39950: LD_INT 10
39952: PUSH
39953: LD_INT 11
39955: PUSH
39956: LD_INT 12
39958: PUSH
39959: LD_INT 13
39961: PUSH
39962: LD_INT 14
39964: PUSH
39965: LD_INT 15
39967: PUSH
39968: LD_INT 16
39970: PUSH
39971: LD_INT 17
39973: PUSH
39974: LD_INT 18
39976: PUSH
39977: LD_INT 19
39979: PUSH
39980: LD_INT 20
39982: PUSH
39983: LD_INT 21
39985: PUSH
39986: LD_INT 22
39988: PUSH
39989: LD_INT 23
39991: PUSH
39992: LD_INT 24
39994: PUSH
39995: LD_INT 25
39997: PUSH
39998: LD_INT 26
40000: PUSH
40001: LD_INT 27
40003: PUSH
40004: LD_INT 28
40006: PUSH
40007: LD_INT 29
40009: PUSH
40010: LD_INT 30
40012: PUSH
40013: LD_INT 31
40015: PUSH
40016: LD_INT 32
40018: PUSH
40019: LD_INT 33
40021: PUSH
40022: LD_INT 34
40024: PUSH
40025: LD_INT 35
40027: PUSH
40028: LD_INT 36
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 101
40071: PUSH
40072: LD_INT 102
40074: PUSH
40075: LD_INT 103
40077: PUSH
40078: LD_INT 104
40080: PUSH
40081: LD_INT 105
40083: PUSH
40084: LD_INT 106
40086: PUSH
40087: LD_INT 107
40089: PUSH
40090: LD_INT 108
40092: PUSH
40093: LD_INT 109
40095: PUSH
40096: LD_INT 110
40098: PUSH
40099: LD_INT 111
40101: PUSH
40102: LD_INT 112
40104: PUSH
40105: LD_INT 113
40107: PUSH
40108: LD_INT 114
40110: PUSH
40111: LD_INT 115
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: ST_TO_ADDR
// if result then
40135: LD_VAR 0 1
40139: IFFALSE 40428
// begin normal :=  ;
40141: LD_ADDR_VAR 0 3
40145: PUSH
40146: LD_STRING 
40148: ST_TO_ADDR
// hardcore :=  ;
40149: LD_ADDR_VAR 0 4
40153: PUSH
40154: LD_STRING 
40156: ST_TO_ADDR
// for i = 1 to normalCounter do
40157: LD_ADDR_VAR 0 5
40161: PUSH
40162: DOUBLE
40163: LD_INT 1
40165: DEC
40166: ST_TO_ADDR
40167: LD_EXP 52
40171: PUSH
40172: FOR_TO
40173: IFFALSE 40274
// begin tmp := 0 ;
40175: LD_ADDR_VAR 0 2
40179: PUSH
40180: LD_STRING 0
40182: ST_TO_ADDR
// if result [ 1 ] then
40183: LD_VAR 0 1
40187: PUSH
40188: LD_INT 1
40190: ARRAY
40191: IFFALSE 40256
// if result [ 1 ] [ 1 ] = i then
40193: LD_VAR 0 1
40197: PUSH
40198: LD_INT 1
40200: ARRAY
40201: PUSH
40202: LD_INT 1
40204: ARRAY
40205: PUSH
40206: LD_VAR 0 5
40210: EQUAL
40211: IFFALSE 40256
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
40213: LD_ADDR_VAR 0 1
40217: PUSH
40218: LD_VAR 0 1
40222: PPUSH
40223: LD_INT 1
40225: PPUSH
40226: LD_VAR 0 1
40230: PUSH
40231: LD_INT 1
40233: ARRAY
40234: PPUSH
40235: LD_INT 1
40237: PPUSH
40238: CALL_OW 3
40242: PPUSH
40243: CALL_OW 1
40247: ST_TO_ADDR
// tmp := 1 ;
40248: LD_ADDR_VAR 0 2
40252: PUSH
40253: LD_STRING 1
40255: ST_TO_ADDR
// end ; normal := normal & tmp ;
40256: LD_ADDR_VAR 0 3
40260: PUSH
40261: LD_VAR 0 3
40265: PUSH
40266: LD_VAR 0 2
40270: STR
40271: ST_TO_ADDR
// end ;
40272: GO 40172
40274: POP
40275: POP
// for i = 1 to hardcoreCounter do
40276: LD_ADDR_VAR 0 5
40280: PUSH
40281: DOUBLE
40282: LD_INT 1
40284: DEC
40285: ST_TO_ADDR
40286: LD_EXP 53
40290: PUSH
40291: FOR_TO
40292: IFFALSE 40397
// begin tmp := 0 ;
40294: LD_ADDR_VAR 0 2
40298: PUSH
40299: LD_STRING 0
40301: ST_TO_ADDR
// if result [ 2 ] then
40302: LD_VAR 0 1
40306: PUSH
40307: LD_INT 2
40309: ARRAY
40310: IFFALSE 40379
// if result [ 2 ] [ 1 ] = 100 + i then
40312: LD_VAR 0 1
40316: PUSH
40317: LD_INT 2
40319: ARRAY
40320: PUSH
40321: LD_INT 1
40323: ARRAY
40324: PUSH
40325: LD_INT 100
40327: PUSH
40328: LD_VAR 0 5
40332: PLUS
40333: EQUAL
40334: IFFALSE 40379
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
40336: LD_ADDR_VAR 0 1
40340: PUSH
40341: LD_VAR 0 1
40345: PPUSH
40346: LD_INT 2
40348: PPUSH
40349: LD_VAR 0 1
40353: PUSH
40354: LD_INT 2
40356: ARRAY
40357: PPUSH
40358: LD_INT 1
40360: PPUSH
40361: CALL_OW 3
40365: PPUSH
40366: CALL_OW 1
40370: ST_TO_ADDR
// tmp := 1 ;
40371: LD_ADDR_VAR 0 2
40375: PUSH
40376: LD_STRING 1
40378: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
40379: LD_ADDR_VAR 0 4
40383: PUSH
40384: LD_VAR 0 4
40388: PUSH
40389: LD_VAR 0 2
40393: STR
40394: ST_TO_ADDR
// end ;
40395: GO 40291
40397: POP
40398: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
40399: LD_STRING getStreamItemsFromMission("
40401: PUSH
40402: LD_VAR 0 3
40406: STR
40407: PUSH
40408: LD_STRING ","
40410: STR
40411: PUSH
40412: LD_VAR 0 4
40416: STR
40417: PUSH
40418: LD_STRING ")
40420: STR
40421: PPUSH
40422: CALL_OW 559
// end else
40426: GO 40435
// ToLua ( getStreamItemsFromMission("","") ) ;
40428: LD_STRING getStreamItemsFromMission("","")
40430: PPUSH
40431: CALL_OW 559
// end ;
40435: LD_VAR 0 1
40439: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
40440: LD_VAR 0 2
40444: PUSH
40445: LD_INT 100
40447: EQUAL
40448: IFFALSE 41397
// begin if not StreamModeActive then
40450: LD_EXP 51
40454: NOT
40455: IFFALSE 40465
// StreamModeActive := true ;
40457: LD_ADDR_EXP 51
40461: PUSH
40462: LD_INT 1
40464: ST_TO_ADDR
// if p3 = 0 then
40465: LD_VAR 0 3
40469: PUSH
40470: LD_INT 0
40472: EQUAL
40473: IFFALSE 40479
// InitStreamMode ;
40475: CALL 36518 0 0
// if p3 = 1 then
40479: LD_VAR 0 3
40483: PUSH
40484: LD_INT 1
40486: EQUAL
40487: IFFALSE 40497
// sRocket := true ;
40489: LD_ADDR_EXP 56
40493: PUSH
40494: LD_INT 1
40496: ST_TO_ADDR
// if p3 = 2 then
40497: LD_VAR 0 3
40501: PUSH
40502: LD_INT 2
40504: EQUAL
40505: IFFALSE 40515
// sSpeed := true ;
40507: LD_ADDR_EXP 55
40511: PUSH
40512: LD_INT 1
40514: ST_TO_ADDR
// if p3 = 3 then
40515: LD_VAR 0 3
40519: PUSH
40520: LD_INT 3
40522: EQUAL
40523: IFFALSE 40533
// sEngine := true ;
40525: LD_ADDR_EXP 57
40529: PUSH
40530: LD_INT 1
40532: ST_TO_ADDR
// if p3 = 4 then
40533: LD_VAR 0 3
40537: PUSH
40538: LD_INT 4
40540: EQUAL
40541: IFFALSE 40551
// sSpec := true ;
40543: LD_ADDR_EXP 54
40547: PUSH
40548: LD_INT 1
40550: ST_TO_ADDR
// if p3 = 5 then
40551: LD_VAR 0 3
40555: PUSH
40556: LD_INT 5
40558: EQUAL
40559: IFFALSE 40569
// sLevel := true ;
40561: LD_ADDR_EXP 58
40565: PUSH
40566: LD_INT 1
40568: ST_TO_ADDR
// if p3 = 6 then
40569: LD_VAR 0 3
40573: PUSH
40574: LD_INT 6
40576: EQUAL
40577: IFFALSE 40587
// sArmoury := true ;
40579: LD_ADDR_EXP 59
40583: PUSH
40584: LD_INT 1
40586: ST_TO_ADDR
// if p3 = 7 then
40587: LD_VAR 0 3
40591: PUSH
40592: LD_INT 7
40594: EQUAL
40595: IFFALSE 40605
// sRadar := true ;
40597: LD_ADDR_EXP 60
40601: PUSH
40602: LD_INT 1
40604: ST_TO_ADDR
// if p3 = 8 then
40605: LD_VAR 0 3
40609: PUSH
40610: LD_INT 8
40612: EQUAL
40613: IFFALSE 40623
// sBunker := true ;
40615: LD_ADDR_EXP 61
40619: PUSH
40620: LD_INT 1
40622: ST_TO_ADDR
// if p3 = 9 then
40623: LD_VAR 0 3
40627: PUSH
40628: LD_INT 9
40630: EQUAL
40631: IFFALSE 40641
// sHack := true ;
40633: LD_ADDR_EXP 62
40637: PUSH
40638: LD_INT 1
40640: ST_TO_ADDR
// if p3 = 10 then
40641: LD_VAR 0 3
40645: PUSH
40646: LD_INT 10
40648: EQUAL
40649: IFFALSE 40659
// sFire := true ;
40651: LD_ADDR_EXP 63
40655: PUSH
40656: LD_INT 1
40658: ST_TO_ADDR
// if p3 = 11 then
40659: LD_VAR 0 3
40663: PUSH
40664: LD_INT 11
40666: EQUAL
40667: IFFALSE 40677
// sRefresh := true ;
40669: LD_ADDR_EXP 64
40673: PUSH
40674: LD_INT 1
40676: ST_TO_ADDR
// if p3 = 12 then
40677: LD_VAR 0 3
40681: PUSH
40682: LD_INT 12
40684: EQUAL
40685: IFFALSE 40695
// sExp := true ;
40687: LD_ADDR_EXP 65
40691: PUSH
40692: LD_INT 1
40694: ST_TO_ADDR
// if p3 = 13 then
40695: LD_VAR 0 3
40699: PUSH
40700: LD_INT 13
40702: EQUAL
40703: IFFALSE 40713
// sDepot := true ;
40705: LD_ADDR_EXP 66
40709: PUSH
40710: LD_INT 1
40712: ST_TO_ADDR
// if p3 = 14 then
40713: LD_VAR 0 3
40717: PUSH
40718: LD_INT 14
40720: EQUAL
40721: IFFALSE 40731
// sFlag := true ;
40723: LD_ADDR_EXP 67
40727: PUSH
40728: LD_INT 1
40730: ST_TO_ADDR
// if p3 = 15 then
40731: LD_VAR 0 3
40735: PUSH
40736: LD_INT 15
40738: EQUAL
40739: IFFALSE 40749
// sKamikadze := true ;
40741: LD_ADDR_EXP 75
40745: PUSH
40746: LD_INT 1
40748: ST_TO_ADDR
// if p3 = 16 then
40749: LD_VAR 0 3
40753: PUSH
40754: LD_INT 16
40756: EQUAL
40757: IFFALSE 40767
// sTroll := true ;
40759: LD_ADDR_EXP 76
40763: PUSH
40764: LD_INT 1
40766: ST_TO_ADDR
// if p3 = 17 then
40767: LD_VAR 0 3
40771: PUSH
40772: LD_INT 17
40774: EQUAL
40775: IFFALSE 40785
// sSlow := true ;
40777: LD_ADDR_EXP 77
40781: PUSH
40782: LD_INT 1
40784: ST_TO_ADDR
// if p3 = 18 then
40785: LD_VAR 0 3
40789: PUSH
40790: LD_INT 18
40792: EQUAL
40793: IFFALSE 40803
// sLack := true ;
40795: LD_ADDR_EXP 78
40799: PUSH
40800: LD_INT 1
40802: ST_TO_ADDR
// if p3 = 19 then
40803: LD_VAR 0 3
40807: PUSH
40808: LD_INT 19
40810: EQUAL
40811: IFFALSE 40821
// sTank := true ;
40813: LD_ADDR_EXP 80
40817: PUSH
40818: LD_INT 1
40820: ST_TO_ADDR
// if p3 = 20 then
40821: LD_VAR 0 3
40825: PUSH
40826: LD_INT 20
40828: EQUAL
40829: IFFALSE 40839
// sRemote := true ;
40831: LD_ADDR_EXP 81
40835: PUSH
40836: LD_INT 1
40838: ST_TO_ADDR
// if p3 = 21 then
40839: LD_VAR 0 3
40843: PUSH
40844: LD_INT 21
40846: EQUAL
40847: IFFALSE 40857
// sPowell := true ;
40849: LD_ADDR_EXP 82
40853: PUSH
40854: LD_INT 1
40856: ST_TO_ADDR
// if p3 = 22 then
40857: LD_VAR 0 3
40861: PUSH
40862: LD_INT 22
40864: EQUAL
40865: IFFALSE 40875
// sTeleport := true ;
40867: LD_ADDR_EXP 85
40871: PUSH
40872: LD_INT 1
40874: ST_TO_ADDR
// if p3 = 23 then
40875: LD_VAR 0 3
40879: PUSH
40880: LD_INT 23
40882: EQUAL
40883: IFFALSE 40893
// sOilTower := true ;
40885: LD_ADDR_EXP 87
40889: PUSH
40890: LD_INT 1
40892: ST_TO_ADDR
// if p3 = 24 then
40893: LD_VAR 0 3
40897: PUSH
40898: LD_INT 24
40900: EQUAL
40901: IFFALSE 40911
// sShovel := true ;
40903: LD_ADDR_EXP 88
40907: PUSH
40908: LD_INT 1
40910: ST_TO_ADDR
// if p3 = 25 then
40911: LD_VAR 0 3
40915: PUSH
40916: LD_INT 25
40918: EQUAL
40919: IFFALSE 40929
// sSheik := true ;
40921: LD_ADDR_EXP 89
40925: PUSH
40926: LD_INT 1
40928: ST_TO_ADDR
// if p3 = 26 then
40929: LD_VAR 0 3
40933: PUSH
40934: LD_INT 26
40936: EQUAL
40937: IFFALSE 40947
// sEarthquake := true ;
40939: LD_ADDR_EXP 91
40943: PUSH
40944: LD_INT 1
40946: ST_TO_ADDR
// if p3 = 27 then
40947: LD_VAR 0 3
40951: PUSH
40952: LD_INT 27
40954: EQUAL
40955: IFFALSE 40965
// sAI := true ;
40957: LD_ADDR_EXP 92
40961: PUSH
40962: LD_INT 1
40964: ST_TO_ADDR
// if p3 = 28 then
40965: LD_VAR 0 3
40969: PUSH
40970: LD_INT 28
40972: EQUAL
40973: IFFALSE 40983
// sCargo := true ;
40975: LD_ADDR_EXP 95
40979: PUSH
40980: LD_INT 1
40982: ST_TO_ADDR
// if p3 = 29 then
40983: LD_VAR 0 3
40987: PUSH
40988: LD_INT 29
40990: EQUAL
40991: IFFALSE 41001
// sDLaser := true ;
40993: LD_ADDR_EXP 96
40997: PUSH
40998: LD_INT 1
41000: ST_TO_ADDR
// if p3 = 30 then
41001: LD_VAR 0 3
41005: PUSH
41006: LD_INT 30
41008: EQUAL
41009: IFFALSE 41019
// sExchange := true ;
41011: LD_ADDR_EXP 97
41015: PUSH
41016: LD_INT 1
41018: ST_TO_ADDR
// if p3 = 31 then
41019: LD_VAR 0 3
41023: PUSH
41024: LD_INT 31
41026: EQUAL
41027: IFFALSE 41037
// sFac := true ;
41029: LD_ADDR_EXP 98
41033: PUSH
41034: LD_INT 1
41036: ST_TO_ADDR
// if p3 = 32 then
41037: LD_VAR 0 3
41041: PUSH
41042: LD_INT 32
41044: EQUAL
41045: IFFALSE 41055
// sPower := true ;
41047: LD_ADDR_EXP 99
41051: PUSH
41052: LD_INT 1
41054: ST_TO_ADDR
// if p3 = 33 then
41055: LD_VAR 0 3
41059: PUSH
41060: LD_INT 33
41062: EQUAL
41063: IFFALSE 41073
// sRandom := true ;
41065: LD_ADDR_EXP 100
41069: PUSH
41070: LD_INT 1
41072: ST_TO_ADDR
// if p3 = 34 then
41073: LD_VAR 0 3
41077: PUSH
41078: LD_INT 34
41080: EQUAL
41081: IFFALSE 41091
// sShield := true ;
41083: LD_ADDR_EXP 101
41087: PUSH
41088: LD_INT 1
41090: ST_TO_ADDR
// if p3 = 35 then
41091: LD_VAR 0 3
41095: PUSH
41096: LD_INT 35
41098: EQUAL
41099: IFFALSE 41109
// sTime := true ;
41101: LD_ADDR_EXP 102
41105: PUSH
41106: LD_INT 1
41108: ST_TO_ADDR
// if p3 = 36 then
41109: LD_VAR 0 3
41113: PUSH
41114: LD_INT 36
41116: EQUAL
41117: IFFALSE 41127
// sTools := true ;
41119: LD_ADDR_EXP 103
41123: PUSH
41124: LD_INT 1
41126: ST_TO_ADDR
// if p3 = 101 then
41127: LD_VAR 0 3
41131: PUSH
41132: LD_INT 101
41134: EQUAL
41135: IFFALSE 41145
// sSold := true ;
41137: LD_ADDR_EXP 68
41141: PUSH
41142: LD_INT 1
41144: ST_TO_ADDR
// if p3 = 102 then
41145: LD_VAR 0 3
41149: PUSH
41150: LD_INT 102
41152: EQUAL
41153: IFFALSE 41163
// sDiff := true ;
41155: LD_ADDR_EXP 69
41159: PUSH
41160: LD_INT 1
41162: ST_TO_ADDR
// if p3 = 103 then
41163: LD_VAR 0 3
41167: PUSH
41168: LD_INT 103
41170: EQUAL
41171: IFFALSE 41181
// sFog := true ;
41173: LD_ADDR_EXP 72
41177: PUSH
41178: LD_INT 1
41180: ST_TO_ADDR
// if p3 = 104 then
41181: LD_VAR 0 3
41185: PUSH
41186: LD_INT 104
41188: EQUAL
41189: IFFALSE 41199
// sReset := true ;
41191: LD_ADDR_EXP 73
41195: PUSH
41196: LD_INT 1
41198: ST_TO_ADDR
// if p3 = 105 then
41199: LD_VAR 0 3
41203: PUSH
41204: LD_INT 105
41206: EQUAL
41207: IFFALSE 41217
// sSun := true ;
41209: LD_ADDR_EXP 74
41213: PUSH
41214: LD_INT 1
41216: ST_TO_ADDR
// if p3 = 106 then
41217: LD_VAR 0 3
41221: PUSH
41222: LD_INT 106
41224: EQUAL
41225: IFFALSE 41235
// sTiger := true ;
41227: LD_ADDR_EXP 70
41231: PUSH
41232: LD_INT 1
41234: ST_TO_ADDR
// if p3 = 107 then
41235: LD_VAR 0 3
41239: PUSH
41240: LD_INT 107
41242: EQUAL
41243: IFFALSE 41253
// sBomb := true ;
41245: LD_ADDR_EXP 71
41249: PUSH
41250: LD_INT 1
41252: ST_TO_ADDR
// if p3 = 108 then
41253: LD_VAR 0 3
41257: PUSH
41258: LD_INT 108
41260: EQUAL
41261: IFFALSE 41271
// sWound := true ;
41263: LD_ADDR_EXP 79
41267: PUSH
41268: LD_INT 1
41270: ST_TO_ADDR
// if p3 = 109 then
41271: LD_VAR 0 3
41275: PUSH
41276: LD_INT 109
41278: EQUAL
41279: IFFALSE 41289
// sBetray := true ;
41281: LD_ADDR_EXP 83
41285: PUSH
41286: LD_INT 1
41288: ST_TO_ADDR
// if p3 = 110 then
41289: LD_VAR 0 3
41293: PUSH
41294: LD_INT 110
41296: EQUAL
41297: IFFALSE 41307
// sContamin := true ;
41299: LD_ADDR_EXP 84
41303: PUSH
41304: LD_INT 1
41306: ST_TO_ADDR
// if p3 = 111 then
41307: LD_VAR 0 3
41311: PUSH
41312: LD_INT 111
41314: EQUAL
41315: IFFALSE 41325
// sOil := true ;
41317: LD_ADDR_EXP 86
41321: PUSH
41322: LD_INT 1
41324: ST_TO_ADDR
// if p3 = 112 then
41325: LD_VAR 0 3
41329: PUSH
41330: LD_INT 112
41332: EQUAL
41333: IFFALSE 41343
// sStu := true ;
41335: LD_ADDR_EXP 90
41339: PUSH
41340: LD_INT 1
41342: ST_TO_ADDR
// if p3 = 113 then
41343: LD_VAR 0 3
41347: PUSH
41348: LD_INT 113
41350: EQUAL
41351: IFFALSE 41361
// sBazooka := true ;
41353: LD_ADDR_EXP 93
41357: PUSH
41358: LD_INT 1
41360: ST_TO_ADDR
// if p3 = 114 then
41361: LD_VAR 0 3
41365: PUSH
41366: LD_INT 114
41368: EQUAL
41369: IFFALSE 41379
// sMortar := true ;
41371: LD_ADDR_EXP 94
41375: PUSH
41376: LD_INT 1
41378: ST_TO_ADDR
// if p3 = 115 then
41379: LD_VAR 0 3
41383: PUSH
41384: LD_INT 115
41386: EQUAL
41387: IFFALSE 41397
// sRanger := true ;
41389: LD_ADDR_EXP 104
41393: PUSH
41394: LD_INT 1
41396: ST_TO_ADDR
// end ; end ;
41397: PPOPN 6
41399: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
41400: LD_EXP 51
41404: PUSH
41405: LD_EXP 56
41409: AND
41410: IFFALSE 41534
41412: GO 41414
41414: DISABLE
41415: LD_INT 0
41417: PPUSH
41418: PPUSH
// begin enable ;
41419: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
41420: LD_ADDR_VAR 0 2
41424: PUSH
41425: LD_INT 22
41427: PUSH
41428: LD_OWVAR 2
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 2
41439: PUSH
41440: LD_INT 34
41442: PUSH
41443: LD_INT 7
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 34
41452: PUSH
41453: LD_INT 45
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 34
41462: PUSH
41463: LD_INT 28
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 34
41472: PUSH
41473: LD_INT 47
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PPUSH
41491: CALL_OW 69
41495: ST_TO_ADDR
// if not tmp then
41496: LD_VAR 0 2
41500: NOT
41501: IFFALSE 41505
// exit ;
41503: GO 41534
// for i in tmp do
41505: LD_ADDR_VAR 0 1
41509: PUSH
41510: LD_VAR 0 2
41514: PUSH
41515: FOR_IN
41516: IFFALSE 41532
// begin SetLives ( i , 0 ) ;
41518: LD_VAR 0 1
41522: PPUSH
41523: LD_INT 0
41525: PPUSH
41526: CALL_OW 234
// end ;
41530: GO 41515
41532: POP
41533: POP
// end ;
41534: PPOPN 2
41536: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
41537: LD_EXP 51
41541: PUSH
41542: LD_EXP 57
41546: AND
41547: IFFALSE 41631
41549: GO 41551
41551: DISABLE
41552: LD_INT 0
41554: PPUSH
41555: PPUSH
// begin enable ;
41556: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
41557: LD_ADDR_VAR 0 2
41561: PUSH
41562: LD_INT 22
41564: PUSH
41565: LD_OWVAR 2
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 32
41576: PUSH
41577: LD_INT 3
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PPUSH
41588: CALL_OW 69
41592: ST_TO_ADDR
// if not tmp then
41593: LD_VAR 0 2
41597: NOT
41598: IFFALSE 41602
// exit ;
41600: GO 41631
// for i in tmp do
41602: LD_ADDR_VAR 0 1
41606: PUSH
41607: LD_VAR 0 2
41611: PUSH
41612: FOR_IN
41613: IFFALSE 41629
// begin SetLives ( i , 0 ) ;
41615: LD_VAR 0 1
41619: PPUSH
41620: LD_INT 0
41622: PPUSH
41623: CALL_OW 234
// end ;
41627: GO 41612
41629: POP
41630: POP
// end ;
41631: PPOPN 2
41633: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
41634: LD_EXP 51
41638: PUSH
41639: LD_EXP 54
41643: AND
41644: IFFALSE 41737
41646: GO 41648
41648: DISABLE
41649: LD_INT 0
41651: PPUSH
// begin enable ;
41652: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
41653: LD_ADDR_VAR 0 1
41657: PUSH
41658: LD_INT 22
41660: PUSH
41661: LD_OWVAR 2
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 2
41672: PUSH
41673: LD_INT 25
41675: PUSH
41676: LD_INT 5
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 25
41685: PUSH
41686: LD_INT 9
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 25
41695: PUSH
41696: LD_INT 8
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: LIST
41707: LIST
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: PPUSH
41713: CALL_OW 69
41717: PUSH
41718: FOR_IN
41719: IFFALSE 41735
// begin SetClass ( i , 1 ) ;
41721: LD_VAR 0 1
41725: PPUSH
41726: LD_INT 1
41728: PPUSH
41729: CALL_OW 336
// end ;
41733: GO 41718
41735: POP
41736: POP
// end ;
41737: PPOPN 1
41739: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
41740: LD_EXP 51
41744: PUSH
41745: LD_EXP 55
41749: AND
41750: PUSH
41751: LD_OWVAR 65
41755: PUSH
41756: LD_INT 7
41758: LESS
41759: AND
41760: IFFALSE 41774
41762: GO 41764
41764: DISABLE
// begin enable ;
41765: ENABLE
// game_speed := 7 ;
41766: LD_ADDR_OWVAR 65
41770: PUSH
41771: LD_INT 7
41773: ST_TO_ADDR
// end ;
41774: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
41775: LD_EXP 51
41779: PUSH
41780: LD_EXP 58
41784: AND
41785: IFFALSE 41987
41787: GO 41789
41789: DISABLE
41790: LD_INT 0
41792: PPUSH
41793: PPUSH
41794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
41795: LD_ADDR_VAR 0 3
41799: PUSH
41800: LD_INT 81
41802: PUSH
41803: LD_OWVAR 2
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 21
41814: PUSH
41815: LD_INT 1
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PPUSH
41826: CALL_OW 69
41830: ST_TO_ADDR
// if not tmp then
41831: LD_VAR 0 3
41835: NOT
41836: IFFALSE 41840
// exit ;
41838: GO 41987
// if tmp > 5 then
41840: LD_VAR 0 3
41844: PUSH
41845: LD_INT 5
41847: GREATER
41848: IFFALSE 41860
// k := 5 else
41850: LD_ADDR_VAR 0 2
41854: PUSH
41855: LD_INT 5
41857: ST_TO_ADDR
41858: GO 41870
// k := tmp ;
41860: LD_ADDR_VAR 0 2
41864: PUSH
41865: LD_VAR 0 3
41869: ST_TO_ADDR
// for i := 1 to k do
41870: LD_ADDR_VAR 0 1
41874: PUSH
41875: DOUBLE
41876: LD_INT 1
41878: DEC
41879: ST_TO_ADDR
41880: LD_VAR 0 2
41884: PUSH
41885: FOR_TO
41886: IFFALSE 41985
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
41888: LD_VAR 0 3
41892: PUSH
41893: LD_VAR 0 1
41897: ARRAY
41898: PPUSH
41899: LD_VAR 0 1
41903: PUSH
41904: LD_INT 4
41906: MOD
41907: PUSH
41908: LD_INT 1
41910: PLUS
41911: PPUSH
41912: CALL_OW 259
41916: PUSH
41917: LD_INT 10
41919: LESS
41920: IFFALSE 41983
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
41922: LD_VAR 0 3
41926: PUSH
41927: LD_VAR 0 1
41931: ARRAY
41932: PPUSH
41933: LD_VAR 0 1
41937: PUSH
41938: LD_INT 4
41940: MOD
41941: PUSH
41942: LD_INT 1
41944: PLUS
41945: PPUSH
41946: LD_VAR 0 3
41950: PUSH
41951: LD_VAR 0 1
41955: ARRAY
41956: PPUSH
41957: LD_VAR 0 1
41961: PUSH
41962: LD_INT 4
41964: MOD
41965: PUSH
41966: LD_INT 1
41968: PLUS
41969: PPUSH
41970: CALL_OW 259
41974: PUSH
41975: LD_INT 1
41977: PLUS
41978: PPUSH
41979: CALL_OW 237
41983: GO 41885
41985: POP
41986: POP
// end ;
41987: PPOPN 3
41989: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
41990: LD_EXP 51
41994: PUSH
41995: LD_EXP 59
41999: AND
42000: IFFALSE 42020
42002: GO 42004
42004: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
42005: LD_INT 4
42007: PPUSH
42008: LD_OWVAR 2
42012: PPUSH
42013: LD_INT 0
42015: PPUSH
42016: CALL_OW 324
42020: END
// every 0 0$1 trigger StreamModeActive and sShovel do
42021: LD_EXP 51
42025: PUSH
42026: LD_EXP 88
42030: AND
42031: IFFALSE 42051
42033: GO 42035
42035: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
42036: LD_INT 19
42038: PPUSH
42039: LD_OWVAR 2
42043: PPUSH
42044: LD_INT 0
42046: PPUSH
42047: CALL_OW 324
42051: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
42052: LD_EXP 51
42056: PUSH
42057: LD_EXP 60
42061: AND
42062: IFFALSE 42164
42064: GO 42066
42066: DISABLE
42067: LD_INT 0
42069: PPUSH
42070: PPUSH
// begin enable ;
42071: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
42072: LD_ADDR_VAR 0 2
42076: PUSH
42077: LD_INT 22
42079: PUSH
42080: LD_OWVAR 2
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 2
42091: PUSH
42092: LD_INT 34
42094: PUSH
42095: LD_INT 11
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 34
42104: PUSH
42105: LD_INT 30
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: LIST
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PPUSH
42121: CALL_OW 69
42125: ST_TO_ADDR
// if not tmp then
42126: LD_VAR 0 2
42130: NOT
42131: IFFALSE 42135
// exit ;
42133: GO 42164
// for i in tmp do
42135: LD_ADDR_VAR 0 1
42139: PUSH
42140: LD_VAR 0 2
42144: PUSH
42145: FOR_IN
42146: IFFALSE 42162
// begin SetLives ( i , 0 ) ;
42148: LD_VAR 0 1
42152: PPUSH
42153: LD_INT 0
42155: PPUSH
42156: CALL_OW 234
// end ;
42160: GO 42145
42162: POP
42163: POP
// end ;
42164: PPOPN 2
42166: END
// every 0 0$1 trigger StreamModeActive and sBunker do
42167: LD_EXP 51
42171: PUSH
42172: LD_EXP 61
42176: AND
42177: IFFALSE 42197
42179: GO 42181
42181: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
42182: LD_INT 32
42184: PPUSH
42185: LD_OWVAR 2
42189: PPUSH
42190: LD_INT 0
42192: PPUSH
42193: CALL_OW 324
42197: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
42198: LD_EXP 51
42202: PUSH
42203: LD_EXP 62
42207: AND
42208: IFFALSE 42389
42210: GO 42212
42212: DISABLE
42213: LD_INT 0
42215: PPUSH
42216: PPUSH
42217: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
42218: LD_ADDR_VAR 0 2
42222: PUSH
42223: LD_INT 22
42225: PUSH
42226: LD_OWVAR 2
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 33
42237: PUSH
42238: LD_INT 3
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PPUSH
42249: CALL_OW 69
42253: ST_TO_ADDR
// if not tmp then
42254: LD_VAR 0 2
42258: NOT
42259: IFFALSE 42263
// exit ;
42261: GO 42389
// side := 0 ;
42263: LD_ADDR_VAR 0 3
42267: PUSH
42268: LD_INT 0
42270: ST_TO_ADDR
// for i := 1 to 8 do
42271: LD_ADDR_VAR 0 1
42275: PUSH
42276: DOUBLE
42277: LD_INT 1
42279: DEC
42280: ST_TO_ADDR
42281: LD_INT 8
42283: PUSH
42284: FOR_TO
42285: IFFALSE 42333
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
42287: LD_OWVAR 2
42291: PUSH
42292: LD_VAR 0 1
42296: NONEQUAL
42297: PUSH
42298: LD_OWVAR 2
42302: PPUSH
42303: LD_VAR 0 1
42307: PPUSH
42308: CALL_OW 81
42312: PUSH
42313: LD_INT 2
42315: EQUAL
42316: AND
42317: IFFALSE 42331
// begin side := i ;
42319: LD_ADDR_VAR 0 3
42323: PUSH
42324: LD_VAR 0 1
42328: ST_TO_ADDR
// break ;
42329: GO 42333
// end ;
42331: GO 42284
42333: POP
42334: POP
// if not side then
42335: LD_VAR 0 3
42339: NOT
42340: IFFALSE 42344
// exit ;
42342: GO 42389
// for i := 1 to tmp do
42344: LD_ADDR_VAR 0 1
42348: PUSH
42349: DOUBLE
42350: LD_INT 1
42352: DEC
42353: ST_TO_ADDR
42354: LD_VAR 0 2
42358: PUSH
42359: FOR_TO
42360: IFFALSE 42387
// if Prob ( 60 ) then
42362: LD_INT 60
42364: PPUSH
42365: CALL_OW 13
42369: IFFALSE 42385
// SetSide ( i , side ) ;
42371: LD_VAR 0 1
42375: PPUSH
42376: LD_VAR 0 3
42380: PPUSH
42381: CALL_OW 235
42385: GO 42359
42387: POP
42388: POP
// end ;
42389: PPOPN 3
42391: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
42392: LD_EXP 51
42396: PUSH
42397: LD_EXP 64
42401: AND
42402: IFFALSE 42521
42404: GO 42406
42406: DISABLE
42407: LD_INT 0
42409: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
42410: LD_ADDR_VAR 0 1
42414: PUSH
42415: LD_INT 22
42417: PUSH
42418: LD_OWVAR 2
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 21
42429: PUSH
42430: LD_INT 1
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 3
42439: PUSH
42440: LD_INT 23
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: LIST
42458: PPUSH
42459: CALL_OW 69
42463: PUSH
42464: FOR_IN
42465: IFFALSE 42519
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
42467: LD_VAR 0 1
42471: PPUSH
42472: CALL_OW 257
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: LD_INT 3
42485: PUSH
42486: LD_INT 4
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: IN
42495: IFFALSE 42517
// SetClass ( un , rand ( 1 , 4 ) ) ;
42497: LD_VAR 0 1
42501: PPUSH
42502: LD_INT 1
42504: PPUSH
42505: LD_INT 4
42507: PPUSH
42508: CALL_OW 12
42512: PPUSH
42513: CALL_OW 336
42517: GO 42464
42519: POP
42520: POP
// end ;
42521: PPOPN 1
42523: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
42524: LD_EXP 51
42528: PUSH
42529: LD_EXP 63
42533: AND
42534: IFFALSE 42613
42536: GO 42538
42538: DISABLE
42539: LD_INT 0
42541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
42542: LD_ADDR_VAR 0 1
42546: PUSH
42547: LD_INT 22
42549: PUSH
42550: LD_OWVAR 2
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 21
42561: PUSH
42562: LD_INT 3
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PPUSH
42573: CALL_OW 69
42577: ST_TO_ADDR
// if not tmp then
42578: LD_VAR 0 1
42582: NOT
42583: IFFALSE 42587
// exit ;
42585: GO 42613
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
42587: LD_VAR 0 1
42591: PUSH
42592: LD_INT 1
42594: PPUSH
42595: LD_VAR 0 1
42599: PPUSH
42600: CALL_OW 12
42604: ARRAY
42605: PPUSH
42606: LD_INT 100
42608: PPUSH
42609: CALL_OW 234
// end ;
42613: PPOPN 1
42615: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
42616: LD_EXP 51
42620: PUSH
42621: LD_EXP 65
42625: AND
42626: IFFALSE 42724
42628: GO 42630
42630: DISABLE
42631: LD_INT 0
42633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
42634: LD_ADDR_VAR 0 1
42638: PUSH
42639: LD_INT 22
42641: PUSH
42642: LD_OWVAR 2
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 21
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PPUSH
42665: CALL_OW 69
42669: ST_TO_ADDR
// if not tmp then
42670: LD_VAR 0 1
42674: NOT
42675: IFFALSE 42679
// exit ;
42677: GO 42724
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
42679: LD_VAR 0 1
42683: PUSH
42684: LD_INT 1
42686: PPUSH
42687: LD_VAR 0 1
42691: PPUSH
42692: CALL_OW 12
42696: ARRAY
42697: PPUSH
42698: LD_INT 1
42700: PPUSH
42701: LD_INT 4
42703: PPUSH
42704: CALL_OW 12
42708: PPUSH
42709: LD_INT 3000
42711: PPUSH
42712: LD_INT 9000
42714: PPUSH
42715: CALL_OW 12
42719: PPUSH
42720: CALL_OW 492
// end ;
42724: PPOPN 1
42726: END
// every 0 0$1 trigger StreamModeActive and sDepot do
42727: LD_EXP 51
42731: PUSH
42732: LD_EXP 66
42736: AND
42737: IFFALSE 42757
42739: GO 42741
42741: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
42742: LD_INT 1
42744: PPUSH
42745: LD_OWVAR 2
42749: PPUSH
42750: LD_INT 0
42752: PPUSH
42753: CALL_OW 324
42757: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
42758: LD_EXP 51
42762: PUSH
42763: LD_EXP 67
42767: AND
42768: IFFALSE 42851
42770: GO 42772
42772: DISABLE
42773: LD_INT 0
42775: PPUSH
42776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
42777: LD_ADDR_VAR 0 2
42781: PUSH
42782: LD_INT 22
42784: PUSH
42785: LD_OWVAR 2
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 21
42796: PUSH
42797: LD_INT 3
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PPUSH
42808: CALL_OW 69
42812: ST_TO_ADDR
// if not tmp then
42813: LD_VAR 0 2
42817: NOT
42818: IFFALSE 42822
// exit ;
42820: GO 42851
// for i in tmp do
42822: LD_ADDR_VAR 0 1
42826: PUSH
42827: LD_VAR 0 2
42831: PUSH
42832: FOR_IN
42833: IFFALSE 42849
// SetBLevel ( i , 10 ) ;
42835: LD_VAR 0 1
42839: PPUSH
42840: LD_INT 10
42842: PPUSH
42843: CALL_OW 241
42847: GO 42832
42849: POP
42850: POP
// end ;
42851: PPOPN 2
42853: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
42854: LD_EXP 51
42858: PUSH
42859: LD_EXP 68
42863: AND
42864: IFFALSE 42975
42866: GO 42868
42868: DISABLE
42869: LD_INT 0
42871: PPUSH
42872: PPUSH
42873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
42874: LD_ADDR_VAR 0 3
42878: PUSH
42879: LD_INT 22
42881: PUSH
42882: LD_OWVAR 2
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 25
42893: PUSH
42894: LD_INT 1
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PPUSH
42905: CALL_OW 69
42909: ST_TO_ADDR
// if not tmp then
42910: LD_VAR 0 3
42914: NOT
42915: IFFALSE 42919
// exit ;
42917: GO 42975
// un := tmp [ rand ( 1 , tmp ) ] ;
42919: LD_ADDR_VAR 0 2
42923: PUSH
42924: LD_VAR 0 3
42928: PUSH
42929: LD_INT 1
42931: PPUSH
42932: LD_VAR 0 3
42936: PPUSH
42937: CALL_OW 12
42941: ARRAY
42942: ST_TO_ADDR
// if Crawls ( un ) then
42943: LD_VAR 0 2
42947: PPUSH
42948: CALL_OW 318
42952: IFFALSE 42963
// ComWalk ( un ) ;
42954: LD_VAR 0 2
42958: PPUSH
42959: CALL_OW 138
// SetClass ( un , class_sniper ) ;
42963: LD_VAR 0 2
42967: PPUSH
42968: LD_INT 5
42970: PPUSH
42971: CALL_OW 336
// end ;
42975: PPOPN 3
42977: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
42978: LD_EXP 51
42982: PUSH
42983: LD_EXP 69
42987: AND
42988: PUSH
42989: LD_OWVAR 67
42993: PUSH
42994: LD_INT 3
42996: LESS
42997: AND
42998: IFFALSE 43017
43000: GO 43002
43002: DISABLE
// Difficulty := Difficulty + 1 ;
43003: LD_ADDR_OWVAR 67
43007: PUSH
43008: LD_OWVAR 67
43012: PUSH
43013: LD_INT 1
43015: PLUS
43016: ST_TO_ADDR
43017: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
43018: LD_EXP 51
43022: PUSH
43023: LD_EXP 70
43027: AND
43028: IFFALSE 43131
43030: GO 43032
43032: DISABLE
43033: LD_INT 0
43035: PPUSH
// begin for i := 1 to 5 do
43036: LD_ADDR_VAR 0 1
43040: PUSH
43041: DOUBLE
43042: LD_INT 1
43044: DEC
43045: ST_TO_ADDR
43046: LD_INT 5
43048: PUSH
43049: FOR_TO
43050: IFFALSE 43129
// begin uc_nation := nation_nature ;
43052: LD_ADDR_OWVAR 21
43056: PUSH
43057: LD_INT 0
43059: ST_TO_ADDR
// uc_side := 0 ;
43060: LD_ADDR_OWVAR 20
43064: PUSH
43065: LD_INT 0
43067: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
43068: LD_ADDR_OWVAR 29
43072: PUSH
43073: LD_INT 12
43075: PUSH
43076: LD_INT 12
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: ST_TO_ADDR
// hc_agressivity := 20 ;
43083: LD_ADDR_OWVAR 35
43087: PUSH
43088: LD_INT 20
43090: ST_TO_ADDR
// hc_class := class_tiger ;
43091: LD_ADDR_OWVAR 28
43095: PUSH
43096: LD_INT 14
43098: ST_TO_ADDR
// hc_gallery :=  ;
43099: LD_ADDR_OWVAR 33
43103: PUSH
43104: LD_STRING 
43106: ST_TO_ADDR
// hc_name :=  ;
43107: LD_ADDR_OWVAR 26
43111: PUSH
43112: LD_STRING 
43114: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
43115: CALL_OW 44
43119: PPUSH
43120: LD_INT 0
43122: PPUSH
43123: CALL_OW 51
// end ;
43127: GO 43049
43129: POP
43130: POP
// end ;
43131: PPOPN 1
43133: END
// every 0 0$1 trigger StreamModeActive and sBomb do
43134: LD_EXP 51
43138: PUSH
43139: LD_EXP 71
43143: AND
43144: IFFALSE 43153
43146: GO 43148
43148: DISABLE
// StreamSibBomb ;
43149: CALL 43154 0 0
43153: END
// export function StreamSibBomb ; var i , x , y ; begin
43154: LD_INT 0
43156: PPUSH
43157: PPUSH
43158: PPUSH
43159: PPUSH
// result := false ;
43160: LD_ADDR_VAR 0 1
43164: PUSH
43165: LD_INT 0
43167: ST_TO_ADDR
// for i := 1 to 16 do
43168: LD_ADDR_VAR 0 2
43172: PUSH
43173: DOUBLE
43174: LD_INT 1
43176: DEC
43177: ST_TO_ADDR
43178: LD_INT 16
43180: PUSH
43181: FOR_TO
43182: IFFALSE 43381
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
43184: LD_ADDR_VAR 0 3
43188: PUSH
43189: LD_INT 10
43191: PUSH
43192: LD_INT 20
43194: PUSH
43195: LD_INT 30
43197: PUSH
43198: LD_INT 40
43200: PUSH
43201: LD_INT 50
43203: PUSH
43204: LD_INT 60
43206: PUSH
43207: LD_INT 70
43209: PUSH
43210: LD_INT 80
43212: PUSH
43213: LD_INT 90
43215: PUSH
43216: LD_INT 100
43218: PUSH
43219: LD_INT 110
43221: PUSH
43222: LD_INT 120
43224: PUSH
43225: LD_INT 130
43227: PUSH
43228: LD_INT 140
43230: PUSH
43231: LD_INT 150
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 1
43253: PPUSH
43254: LD_INT 15
43256: PPUSH
43257: CALL_OW 12
43261: ARRAY
43262: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
43263: LD_ADDR_VAR 0 4
43267: PUSH
43268: LD_INT 10
43270: PUSH
43271: LD_INT 20
43273: PUSH
43274: LD_INT 30
43276: PUSH
43277: LD_INT 40
43279: PUSH
43280: LD_INT 50
43282: PUSH
43283: LD_INT 60
43285: PUSH
43286: LD_INT 70
43288: PUSH
43289: LD_INT 80
43291: PUSH
43292: LD_INT 90
43294: PUSH
43295: LD_INT 100
43297: PUSH
43298: LD_INT 110
43300: PUSH
43301: LD_INT 120
43303: PUSH
43304: LD_INT 130
43306: PUSH
43307: LD_INT 140
43309: PUSH
43310: LD_INT 150
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: PPUSH
43333: LD_INT 15
43335: PPUSH
43336: CALL_OW 12
43340: ARRAY
43341: ST_TO_ADDR
// if ValidHex ( x , y ) then
43342: LD_VAR 0 3
43346: PPUSH
43347: LD_VAR 0 4
43351: PPUSH
43352: CALL_OW 488
43356: IFFALSE 43379
// begin result := [ x , y ] ;
43358: LD_ADDR_VAR 0 1
43362: PUSH
43363: LD_VAR 0 3
43367: PUSH
43368: LD_VAR 0 4
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: ST_TO_ADDR
// break ;
43377: GO 43381
// end ; end ;
43379: GO 43181
43381: POP
43382: POP
// if result then
43383: LD_VAR 0 1
43387: IFFALSE 43447
// begin ToLua ( playSibBomb() ) ;
43389: LD_STRING playSibBomb()
43391: PPUSH
43392: CALL_OW 559
// wait ( 0 0$14 ) ;
43396: LD_INT 490
43398: PPUSH
43399: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
43403: LD_VAR 0 1
43407: PUSH
43408: LD_INT 1
43410: ARRAY
43411: PPUSH
43412: LD_VAR 0 1
43416: PUSH
43417: LD_INT 2
43419: ARRAY
43420: PPUSH
43421: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
43425: LD_VAR 0 1
43429: PUSH
43430: LD_INT 1
43432: ARRAY
43433: PPUSH
43434: LD_VAR 0 1
43438: PUSH
43439: LD_INT 2
43441: ARRAY
43442: PPUSH
43443: CALL_OW 429
// end ; end ;
43447: LD_VAR 0 1
43451: RET
// every 0 0$1 trigger StreamModeActive and sReset do
43452: LD_EXP 51
43456: PUSH
43457: LD_EXP 73
43461: AND
43462: IFFALSE 43474
43464: GO 43466
43466: DISABLE
// YouLost (  ) ;
43467: LD_STRING 
43469: PPUSH
43470: CALL_OW 104
43474: END
// every 0 0$1 trigger StreamModeActive and sFog do
43475: LD_EXP 51
43479: PUSH
43480: LD_EXP 72
43484: AND
43485: IFFALSE 43499
43487: GO 43489
43489: DISABLE
// FogOff ( your_side ) ;
43490: LD_OWVAR 2
43494: PPUSH
43495: CALL_OW 344
43499: END
// every 0 0$1 trigger StreamModeActive and sSun do
43500: LD_EXP 51
43504: PUSH
43505: LD_EXP 74
43509: AND
43510: IFFALSE 43538
43512: GO 43514
43514: DISABLE
// begin solar_recharge_percent := 0 ;
43515: LD_ADDR_OWVAR 79
43519: PUSH
43520: LD_INT 0
43522: ST_TO_ADDR
// wait ( 5 5$00 ) ;
43523: LD_INT 10500
43525: PPUSH
43526: CALL_OW 67
// solar_recharge_percent := 100 ;
43530: LD_ADDR_OWVAR 79
43534: PUSH
43535: LD_INT 100
43537: ST_TO_ADDR
// end ;
43538: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
43539: LD_EXP 51
43543: PUSH
43544: LD_EXP 75
43548: AND
43549: IFFALSE 43788
43551: GO 43553
43553: DISABLE
43554: LD_INT 0
43556: PPUSH
43557: PPUSH
43558: PPUSH
// begin tmp := [ ] ;
43559: LD_ADDR_VAR 0 3
43563: PUSH
43564: EMPTY
43565: ST_TO_ADDR
// for i := 1 to 6 do
43566: LD_ADDR_VAR 0 1
43570: PUSH
43571: DOUBLE
43572: LD_INT 1
43574: DEC
43575: ST_TO_ADDR
43576: LD_INT 6
43578: PUSH
43579: FOR_TO
43580: IFFALSE 43685
// begin uc_nation := nation_nature ;
43582: LD_ADDR_OWVAR 21
43586: PUSH
43587: LD_INT 0
43589: ST_TO_ADDR
// uc_side := 0 ;
43590: LD_ADDR_OWVAR 20
43594: PUSH
43595: LD_INT 0
43597: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
43598: LD_ADDR_OWVAR 29
43602: PUSH
43603: LD_INT 12
43605: PUSH
43606: LD_INT 12
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: ST_TO_ADDR
// hc_agressivity := 20 ;
43613: LD_ADDR_OWVAR 35
43617: PUSH
43618: LD_INT 20
43620: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
43621: LD_ADDR_OWVAR 28
43625: PUSH
43626: LD_INT 17
43628: ST_TO_ADDR
// hc_gallery :=  ;
43629: LD_ADDR_OWVAR 33
43633: PUSH
43634: LD_STRING 
43636: ST_TO_ADDR
// hc_name :=  ;
43637: LD_ADDR_OWVAR 26
43641: PUSH
43642: LD_STRING 
43644: ST_TO_ADDR
// un := CreateHuman ;
43645: LD_ADDR_VAR 0 2
43649: PUSH
43650: CALL_OW 44
43654: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
43655: LD_VAR 0 2
43659: PPUSH
43660: LD_INT 1
43662: PPUSH
43663: CALL_OW 51
// tmp := tmp ^ un ;
43667: LD_ADDR_VAR 0 3
43671: PUSH
43672: LD_VAR 0 3
43676: PUSH
43677: LD_VAR 0 2
43681: ADD
43682: ST_TO_ADDR
// end ;
43683: GO 43579
43685: POP
43686: POP
// repeat wait ( 0 0$1 ) ;
43687: LD_INT 35
43689: PPUSH
43690: CALL_OW 67
// for un in tmp do
43694: LD_ADDR_VAR 0 2
43698: PUSH
43699: LD_VAR 0 3
43703: PUSH
43704: FOR_IN
43705: IFFALSE 43779
// begin if IsDead ( un ) then
43707: LD_VAR 0 2
43711: PPUSH
43712: CALL_OW 301
43716: IFFALSE 43736
// begin tmp := tmp diff un ;
43718: LD_ADDR_VAR 0 3
43722: PUSH
43723: LD_VAR 0 3
43727: PUSH
43728: LD_VAR 0 2
43732: DIFF
43733: ST_TO_ADDR
// continue ;
43734: GO 43704
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
43736: LD_VAR 0 2
43740: PPUSH
43741: LD_INT 3
43743: PUSH
43744: LD_INT 22
43746: PUSH
43747: LD_INT 0
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PPUSH
43758: CALL_OW 69
43762: PPUSH
43763: LD_VAR 0 2
43767: PPUSH
43768: CALL_OW 74
43772: PPUSH
43773: CALL_OW 115
// end ;
43777: GO 43704
43779: POP
43780: POP
// until not tmp ;
43781: LD_VAR 0 3
43785: NOT
43786: IFFALSE 43687
// end ;
43788: PPOPN 3
43790: END
// every 0 0$1 trigger StreamModeActive and sTroll do
43791: LD_EXP 51
43795: PUSH
43796: LD_EXP 76
43800: AND
43801: IFFALSE 43855
43803: GO 43805
43805: DISABLE
// begin ToLua ( displayTroll(); ) ;
43806: LD_STRING displayTroll();
43808: PPUSH
43809: CALL_OW 559
// wait ( 3 3$00 ) ;
43813: LD_INT 6300
43815: PPUSH
43816: CALL_OW 67
// ToLua ( hideTroll(); ) ;
43820: LD_STRING hideTroll();
43822: PPUSH
43823: CALL_OW 559
// wait ( 1 1$00 ) ;
43827: LD_INT 2100
43829: PPUSH
43830: CALL_OW 67
// ToLua ( displayTroll(); ) ;
43834: LD_STRING displayTroll();
43836: PPUSH
43837: CALL_OW 559
// wait ( 1 1$00 ) ;
43841: LD_INT 2100
43843: PPUSH
43844: CALL_OW 67
// ToLua ( hideTroll(); ) ;
43848: LD_STRING hideTroll();
43850: PPUSH
43851: CALL_OW 559
// end ;
43855: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
43856: LD_EXP 51
43860: PUSH
43861: LD_EXP 77
43865: AND
43866: IFFALSE 43929
43868: GO 43870
43870: DISABLE
43871: LD_INT 0
43873: PPUSH
// begin p := 0 ;
43874: LD_ADDR_VAR 0 1
43878: PUSH
43879: LD_INT 0
43881: ST_TO_ADDR
// repeat game_speed := 1 ;
43882: LD_ADDR_OWVAR 65
43886: PUSH
43887: LD_INT 1
43889: ST_TO_ADDR
// wait ( 0 0$1 ) ;
43890: LD_INT 35
43892: PPUSH
43893: CALL_OW 67
// p := p + 1 ;
43897: LD_ADDR_VAR 0 1
43901: PUSH
43902: LD_VAR 0 1
43906: PUSH
43907: LD_INT 1
43909: PLUS
43910: ST_TO_ADDR
// until p >= 60 ;
43911: LD_VAR 0 1
43915: PUSH
43916: LD_INT 60
43918: GREATEREQUAL
43919: IFFALSE 43882
// game_speed := 4 ;
43921: LD_ADDR_OWVAR 65
43925: PUSH
43926: LD_INT 4
43928: ST_TO_ADDR
// end ;
43929: PPOPN 1
43931: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
43932: LD_EXP 51
43936: PUSH
43937: LD_EXP 78
43941: AND
43942: IFFALSE 44088
43944: GO 43946
43946: DISABLE
43947: LD_INT 0
43949: PPUSH
43950: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43951: LD_ADDR_VAR 0 1
43955: PUSH
43956: LD_INT 22
43958: PUSH
43959: LD_OWVAR 2
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 2
43970: PUSH
43971: LD_INT 30
43973: PUSH
43974: LD_INT 0
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 30
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: LIST
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PPUSH
44000: CALL_OW 69
44004: ST_TO_ADDR
// if not depot then
44005: LD_VAR 0 1
44009: NOT
44010: IFFALSE 44014
// exit ;
44012: GO 44088
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
44014: LD_ADDR_VAR 0 2
44018: PUSH
44019: LD_VAR 0 1
44023: PUSH
44024: LD_INT 1
44026: PPUSH
44027: LD_VAR 0 1
44031: PPUSH
44032: CALL_OW 12
44036: ARRAY
44037: PPUSH
44038: CALL_OW 274
44042: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
44043: LD_VAR 0 2
44047: PPUSH
44048: LD_INT 1
44050: PPUSH
44051: LD_INT 0
44053: PPUSH
44054: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
44058: LD_VAR 0 2
44062: PPUSH
44063: LD_INT 2
44065: PPUSH
44066: LD_INT 0
44068: PPUSH
44069: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
44073: LD_VAR 0 2
44077: PPUSH
44078: LD_INT 3
44080: PPUSH
44081: LD_INT 0
44083: PPUSH
44084: CALL_OW 277
// end ;
44088: PPOPN 2
44090: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
44091: LD_EXP 51
44095: PUSH
44096: LD_EXP 79
44100: AND
44101: IFFALSE 44198
44103: GO 44105
44105: DISABLE
44106: LD_INT 0
44108: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
44109: LD_ADDR_VAR 0 1
44113: PUSH
44114: LD_INT 22
44116: PUSH
44117: LD_OWVAR 2
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 21
44128: PUSH
44129: LD_INT 1
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 3
44138: PUSH
44139: LD_INT 23
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: LIST
44157: PPUSH
44158: CALL_OW 69
44162: ST_TO_ADDR
// if not tmp then
44163: LD_VAR 0 1
44167: NOT
44168: IFFALSE 44172
// exit ;
44170: GO 44198
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
44172: LD_VAR 0 1
44176: PUSH
44177: LD_INT 1
44179: PPUSH
44180: LD_VAR 0 1
44184: PPUSH
44185: CALL_OW 12
44189: ARRAY
44190: PPUSH
44191: LD_INT 200
44193: PPUSH
44194: CALL_OW 234
// end ;
44198: PPOPN 1
44200: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
44201: LD_EXP 51
44205: PUSH
44206: LD_EXP 80
44210: AND
44211: IFFALSE 44290
44213: GO 44215
44215: DISABLE
44216: LD_INT 0
44218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
44219: LD_ADDR_VAR 0 1
44223: PUSH
44224: LD_INT 22
44226: PUSH
44227: LD_OWVAR 2
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 21
44238: PUSH
44239: LD_INT 2
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PPUSH
44250: CALL_OW 69
44254: ST_TO_ADDR
// if not tmp then
44255: LD_VAR 0 1
44259: NOT
44260: IFFALSE 44264
// exit ;
44262: GO 44290
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
44264: LD_VAR 0 1
44268: PUSH
44269: LD_INT 1
44271: PPUSH
44272: LD_VAR 0 1
44276: PPUSH
44277: CALL_OW 12
44281: ARRAY
44282: PPUSH
44283: LD_INT 60
44285: PPUSH
44286: CALL_OW 234
// end ;
44290: PPOPN 1
44292: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
44293: LD_EXP 51
44297: PUSH
44298: LD_EXP 81
44302: AND
44303: IFFALSE 44402
44305: GO 44307
44307: DISABLE
44308: LD_INT 0
44310: PPUSH
44311: PPUSH
// begin enable ;
44312: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
44313: LD_ADDR_VAR 0 1
44317: PUSH
44318: LD_INT 22
44320: PUSH
44321: LD_OWVAR 2
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 61
44332: PUSH
44333: EMPTY
44334: LIST
44335: PUSH
44336: LD_INT 33
44338: PUSH
44339: LD_INT 2
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: LIST
44350: PPUSH
44351: CALL_OW 69
44355: ST_TO_ADDR
// if not tmp then
44356: LD_VAR 0 1
44360: NOT
44361: IFFALSE 44365
// exit ;
44363: GO 44402
// for i in tmp do
44365: LD_ADDR_VAR 0 2
44369: PUSH
44370: LD_VAR 0 1
44374: PUSH
44375: FOR_IN
44376: IFFALSE 44400
// if IsControledBy ( i ) then
44378: LD_VAR 0 2
44382: PPUSH
44383: CALL_OW 312
44387: IFFALSE 44398
// ComUnlink ( i ) ;
44389: LD_VAR 0 2
44393: PPUSH
44394: CALL_OW 136
44398: GO 44375
44400: POP
44401: POP
// end ;
44402: PPOPN 2
44404: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
44405: LD_EXP 51
44409: PUSH
44410: LD_EXP 82
44414: AND
44415: IFFALSE 44555
44417: GO 44419
44419: DISABLE
44420: LD_INT 0
44422: PPUSH
44423: PPUSH
// begin ToLua ( displayPowell(); ) ;
44424: LD_STRING displayPowell();
44426: PPUSH
44427: CALL_OW 559
// uc_side := 0 ;
44431: LD_ADDR_OWVAR 20
44435: PUSH
44436: LD_INT 0
44438: ST_TO_ADDR
// uc_nation := 2 ;
44439: LD_ADDR_OWVAR 21
44443: PUSH
44444: LD_INT 2
44446: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
44447: LD_ADDR_OWVAR 37
44451: PUSH
44452: LD_INT 14
44454: ST_TO_ADDR
// vc_engine := engine_siberite ;
44455: LD_ADDR_OWVAR 39
44459: PUSH
44460: LD_INT 3
44462: ST_TO_ADDR
// vc_control := control_apeman ;
44463: LD_ADDR_OWVAR 38
44467: PUSH
44468: LD_INT 5
44470: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
44471: LD_ADDR_OWVAR 40
44475: PUSH
44476: LD_INT 29
44478: ST_TO_ADDR
// un := CreateVehicle ;
44479: LD_ADDR_VAR 0 2
44483: PUSH
44484: CALL_OW 45
44488: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
44489: LD_VAR 0 2
44493: PPUSH
44494: LD_INT 1
44496: PPUSH
44497: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
44501: LD_INT 35
44503: PPUSH
44504: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
44508: LD_VAR 0 2
44512: PPUSH
44513: LD_INT 22
44515: PUSH
44516: LD_OWVAR 2
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PPUSH
44525: CALL_OW 69
44529: PPUSH
44530: LD_VAR 0 2
44534: PPUSH
44535: CALL_OW 74
44539: PPUSH
44540: CALL_OW 115
// until IsDead ( un ) ;
44544: LD_VAR 0 2
44548: PPUSH
44549: CALL_OW 301
44553: IFFALSE 44501
// end ;
44555: PPOPN 2
44557: END
// every 0 0$1 trigger StreamModeActive and sStu do
44558: LD_EXP 51
44562: PUSH
44563: LD_EXP 90
44567: AND
44568: IFFALSE 44584
44570: GO 44572
44572: DISABLE
// begin ToLua ( displayStucuk(); ) ;
44573: LD_STRING displayStucuk();
44575: PPUSH
44576: CALL_OW 559
// ResetFog ;
44580: CALL_OW 335
// end ;
44584: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
44585: LD_EXP 51
44589: PUSH
44590: LD_EXP 83
44594: AND
44595: IFFALSE 44736
44597: GO 44599
44599: DISABLE
44600: LD_INT 0
44602: PPUSH
44603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
44604: LD_ADDR_VAR 0 2
44608: PUSH
44609: LD_INT 22
44611: PUSH
44612: LD_OWVAR 2
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 21
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PPUSH
44635: CALL_OW 69
44639: ST_TO_ADDR
// if not tmp then
44640: LD_VAR 0 2
44644: NOT
44645: IFFALSE 44649
// exit ;
44647: GO 44736
// un := tmp [ rand ( 1 , tmp ) ] ;
44649: LD_ADDR_VAR 0 1
44653: PUSH
44654: LD_VAR 0 2
44658: PUSH
44659: LD_INT 1
44661: PPUSH
44662: LD_VAR 0 2
44666: PPUSH
44667: CALL_OW 12
44671: ARRAY
44672: ST_TO_ADDR
// SetSide ( un , 0 ) ;
44673: LD_VAR 0 1
44677: PPUSH
44678: LD_INT 0
44680: PPUSH
44681: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
44685: LD_VAR 0 1
44689: PPUSH
44690: LD_OWVAR 3
44694: PUSH
44695: LD_VAR 0 1
44699: DIFF
44700: PPUSH
44701: LD_VAR 0 1
44705: PPUSH
44706: CALL_OW 74
44710: PPUSH
44711: CALL_OW 115
// wait ( 0 0$20 ) ;
44715: LD_INT 700
44717: PPUSH
44718: CALL_OW 67
// SetSide ( un , your_side ) ;
44722: LD_VAR 0 1
44726: PPUSH
44727: LD_OWVAR 2
44731: PPUSH
44732: CALL_OW 235
// end ;
44736: PPOPN 2
44738: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
44739: LD_EXP 51
44743: PUSH
44744: LD_EXP 84
44748: AND
44749: IFFALSE 44855
44751: GO 44753
44753: DISABLE
44754: LD_INT 0
44756: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44757: LD_ADDR_VAR 0 1
44761: PUSH
44762: LD_INT 22
44764: PUSH
44765: LD_OWVAR 2
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: LD_INT 30
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 30
44789: PUSH
44790: LD_INT 1
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: LIST
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PPUSH
44806: CALL_OW 69
44810: ST_TO_ADDR
// if not depot then
44811: LD_VAR 0 1
44815: NOT
44816: IFFALSE 44820
// exit ;
44818: GO 44855
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
44820: LD_VAR 0 1
44824: PUSH
44825: LD_INT 1
44827: ARRAY
44828: PPUSH
44829: CALL_OW 250
44833: PPUSH
44834: LD_VAR 0 1
44838: PUSH
44839: LD_INT 1
44841: ARRAY
44842: PPUSH
44843: CALL_OW 251
44847: PPUSH
44848: LD_INT 70
44850: PPUSH
44851: CALL_OW 495
// end ;
44855: PPOPN 1
44857: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
44858: LD_EXP 51
44862: PUSH
44863: LD_EXP 85
44867: AND
44868: IFFALSE 45079
44870: GO 44872
44872: DISABLE
44873: LD_INT 0
44875: PPUSH
44876: PPUSH
44877: PPUSH
44878: PPUSH
44879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
44880: LD_ADDR_VAR 0 5
44884: PUSH
44885: LD_INT 22
44887: PUSH
44888: LD_OWVAR 2
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 21
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PPUSH
44911: CALL_OW 69
44915: ST_TO_ADDR
// if not tmp then
44916: LD_VAR 0 5
44920: NOT
44921: IFFALSE 44925
// exit ;
44923: GO 45079
// for i in tmp do
44925: LD_ADDR_VAR 0 1
44929: PUSH
44930: LD_VAR 0 5
44934: PUSH
44935: FOR_IN
44936: IFFALSE 45077
// begin d := rand ( 0 , 5 ) ;
44938: LD_ADDR_VAR 0 4
44942: PUSH
44943: LD_INT 0
44945: PPUSH
44946: LD_INT 5
44948: PPUSH
44949: CALL_OW 12
44953: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
44954: LD_ADDR_VAR 0 2
44958: PUSH
44959: LD_VAR 0 1
44963: PPUSH
44964: CALL_OW 250
44968: PPUSH
44969: LD_VAR 0 4
44973: PPUSH
44974: LD_INT 3
44976: PPUSH
44977: LD_INT 12
44979: PPUSH
44980: CALL_OW 12
44984: PPUSH
44985: CALL_OW 272
44989: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
44990: LD_ADDR_VAR 0 3
44994: PUSH
44995: LD_VAR 0 1
44999: PPUSH
45000: CALL_OW 251
45004: PPUSH
45005: LD_VAR 0 4
45009: PPUSH
45010: LD_INT 3
45012: PPUSH
45013: LD_INT 12
45015: PPUSH
45016: CALL_OW 12
45020: PPUSH
45021: CALL_OW 273
45025: ST_TO_ADDR
// if ValidHex ( x , y ) then
45026: LD_VAR 0 2
45030: PPUSH
45031: LD_VAR 0 3
45035: PPUSH
45036: CALL_OW 488
45040: IFFALSE 45075
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
45042: LD_VAR 0 1
45046: PPUSH
45047: LD_VAR 0 2
45051: PPUSH
45052: LD_VAR 0 3
45056: PPUSH
45057: LD_INT 3
45059: PPUSH
45060: LD_INT 6
45062: PPUSH
45063: CALL_OW 12
45067: PPUSH
45068: LD_INT 1
45070: PPUSH
45071: CALL_OW 483
// end ;
45075: GO 44935
45077: POP
45078: POP
// end ;
45079: PPOPN 5
45081: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
45082: LD_EXP 51
45086: PUSH
45087: LD_EXP 86
45091: AND
45092: IFFALSE 45186
45094: GO 45096
45096: DISABLE
45097: LD_INT 0
45099: PPUSH
45100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
45101: LD_ADDR_VAR 0 2
45105: PUSH
45106: LD_INT 22
45108: PUSH
45109: LD_OWVAR 2
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 32
45120: PUSH
45121: LD_INT 1
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 21
45130: PUSH
45131: LD_INT 2
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: LIST
45142: PPUSH
45143: CALL_OW 69
45147: ST_TO_ADDR
// if not tmp then
45148: LD_VAR 0 2
45152: NOT
45153: IFFALSE 45157
// exit ;
45155: GO 45186
// for i in tmp do
45157: LD_ADDR_VAR 0 1
45161: PUSH
45162: LD_VAR 0 2
45166: PUSH
45167: FOR_IN
45168: IFFALSE 45184
// SetFuel ( i , 0 ) ;
45170: LD_VAR 0 1
45174: PPUSH
45175: LD_INT 0
45177: PPUSH
45178: CALL_OW 240
45182: GO 45167
45184: POP
45185: POP
// end ;
45186: PPOPN 2
45188: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
45189: LD_EXP 51
45193: PUSH
45194: LD_EXP 87
45198: AND
45199: IFFALSE 45265
45201: GO 45203
45203: DISABLE
45204: LD_INT 0
45206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
45207: LD_ADDR_VAR 0 1
45211: PUSH
45212: LD_INT 22
45214: PUSH
45215: LD_OWVAR 2
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 30
45226: PUSH
45227: LD_INT 29
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PPUSH
45238: CALL_OW 69
45242: ST_TO_ADDR
// if not tmp then
45243: LD_VAR 0 1
45247: NOT
45248: IFFALSE 45252
// exit ;
45250: GO 45265
// DestroyUnit ( tmp [ 1 ] ) ;
45252: LD_VAR 0 1
45256: PUSH
45257: LD_INT 1
45259: ARRAY
45260: PPUSH
45261: CALL_OW 65
// end ;
45265: PPOPN 1
45267: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
45268: LD_EXP 51
45272: PUSH
45273: LD_EXP 89
45277: AND
45278: IFFALSE 45407
45280: GO 45282
45282: DISABLE
45283: LD_INT 0
45285: PPUSH
// begin uc_side := 0 ;
45286: LD_ADDR_OWVAR 20
45290: PUSH
45291: LD_INT 0
45293: ST_TO_ADDR
// uc_nation := nation_arabian ;
45294: LD_ADDR_OWVAR 21
45298: PUSH
45299: LD_INT 2
45301: ST_TO_ADDR
// hc_gallery :=  ;
45302: LD_ADDR_OWVAR 33
45306: PUSH
45307: LD_STRING 
45309: ST_TO_ADDR
// hc_name :=  ;
45310: LD_ADDR_OWVAR 26
45314: PUSH
45315: LD_STRING 
45317: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
45318: LD_INT 1
45320: PPUSH
45321: LD_INT 11
45323: PPUSH
45324: LD_INT 10
45326: PPUSH
45327: CALL_OW 380
// un := CreateHuman ;
45331: LD_ADDR_VAR 0 1
45335: PUSH
45336: CALL_OW 44
45340: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
45341: LD_VAR 0 1
45345: PPUSH
45346: LD_INT 1
45348: PPUSH
45349: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
45353: LD_INT 35
45355: PPUSH
45356: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
45360: LD_VAR 0 1
45364: PPUSH
45365: LD_INT 22
45367: PUSH
45368: LD_OWVAR 2
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PPUSH
45377: CALL_OW 69
45381: PPUSH
45382: LD_VAR 0 1
45386: PPUSH
45387: CALL_OW 74
45391: PPUSH
45392: CALL_OW 115
// until IsDead ( un ) ;
45396: LD_VAR 0 1
45400: PPUSH
45401: CALL_OW 301
45405: IFFALSE 45353
// end ;
45407: PPOPN 1
45409: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
45410: LD_EXP 51
45414: PUSH
45415: LD_EXP 91
45419: AND
45420: IFFALSE 45432
45422: GO 45424
45424: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
45425: LD_STRING earthquake(getX(game), 0, 32)
45427: PPUSH
45428: CALL_OW 559
45432: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
45433: LD_EXP 51
45437: PUSH
45438: LD_EXP 92
45442: AND
45443: IFFALSE 45534
45445: GO 45447
45447: DISABLE
45448: LD_INT 0
45450: PPUSH
// begin enable ;
45451: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
45452: LD_ADDR_VAR 0 1
45456: PUSH
45457: LD_INT 22
45459: PUSH
45460: LD_OWVAR 2
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 21
45471: PUSH
45472: LD_INT 2
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 33
45481: PUSH
45482: LD_INT 3
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: LIST
45493: PPUSH
45494: CALL_OW 69
45498: ST_TO_ADDR
// if not tmp then
45499: LD_VAR 0 1
45503: NOT
45504: IFFALSE 45508
// exit ;
45506: GO 45534
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
45508: LD_VAR 0 1
45512: PUSH
45513: LD_INT 1
45515: PPUSH
45516: LD_VAR 0 1
45520: PPUSH
45521: CALL_OW 12
45525: ARRAY
45526: PPUSH
45527: LD_INT 1
45529: PPUSH
45530: CALL_OW 234
// end ;
45534: PPOPN 1
45536: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
45537: LD_EXP 51
45541: PUSH
45542: LD_EXP 93
45546: AND
45547: IFFALSE 45688
45549: GO 45551
45551: DISABLE
45552: LD_INT 0
45554: PPUSH
45555: PPUSH
45556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
45557: LD_ADDR_VAR 0 3
45561: PUSH
45562: LD_INT 22
45564: PUSH
45565: LD_OWVAR 2
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 25
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PPUSH
45588: CALL_OW 69
45592: ST_TO_ADDR
// if not tmp then
45593: LD_VAR 0 3
45597: NOT
45598: IFFALSE 45602
// exit ;
45600: GO 45688
// un := tmp [ rand ( 1 , tmp ) ] ;
45602: LD_ADDR_VAR 0 2
45606: PUSH
45607: LD_VAR 0 3
45611: PUSH
45612: LD_INT 1
45614: PPUSH
45615: LD_VAR 0 3
45619: PPUSH
45620: CALL_OW 12
45624: ARRAY
45625: ST_TO_ADDR
// if Crawls ( un ) then
45626: LD_VAR 0 2
45630: PPUSH
45631: CALL_OW 318
45635: IFFALSE 45646
// ComWalk ( un ) ;
45637: LD_VAR 0 2
45641: PPUSH
45642: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
45646: LD_VAR 0 2
45650: PPUSH
45651: LD_INT 9
45653: PPUSH
45654: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
45658: LD_INT 28
45660: PPUSH
45661: LD_OWVAR 2
45665: PPUSH
45666: LD_INT 2
45668: PPUSH
45669: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
45673: LD_INT 29
45675: PPUSH
45676: LD_OWVAR 2
45680: PPUSH
45681: LD_INT 2
45683: PPUSH
45684: CALL_OW 322
// end ;
45688: PPOPN 3
45690: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
45691: LD_EXP 51
45695: PUSH
45696: LD_EXP 94
45700: AND
45701: IFFALSE 45812
45703: GO 45705
45705: DISABLE
45706: LD_INT 0
45708: PPUSH
45709: PPUSH
45710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
45711: LD_ADDR_VAR 0 3
45715: PUSH
45716: LD_INT 22
45718: PUSH
45719: LD_OWVAR 2
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 25
45730: PUSH
45731: LD_INT 1
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PPUSH
45742: CALL_OW 69
45746: ST_TO_ADDR
// if not tmp then
45747: LD_VAR 0 3
45751: NOT
45752: IFFALSE 45756
// exit ;
45754: GO 45812
// un := tmp [ rand ( 1 , tmp ) ] ;
45756: LD_ADDR_VAR 0 2
45760: PUSH
45761: LD_VAR 0 3
45765: PUSH
45766: LD_INT 1
45768: PPUSH
45769: LD_VAR 0 3
45773: PPUSH
45774: CALL_OW 12
45778: ARRAY
45779: ST_TO_ADDR
// if Crawls ( un ) then
45780: LD_VAR 0 2
45784: PPUSH
45785: CALL_OW 318
45789: IFFALSE 45800
// ComWalk ( un ) ;
45791: LD_VAR 0 2
45795: PPUSH
45796: CALL_OW 138
// SetClass ( un , class_mortar ) ;
45800: LD_VAR 0 2
45804: PPUSH
45805: LD_INT 8
45807: PPUSH
45808: CALL_OW 336
// end ;
45812: PPOPN 3
45814: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
45815: LD_EXP 51
45819: PUSH
45820: LD_EXP 95
45824: AND
45825: IFFALSE 45969
45827: GO 45829
45829: DISABLE
45830: LD_INT 0
45832: PPUSH
45833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
45834: LD_ADDR_VAR 0 2
45838: PUSH
45839: LD_INT 22
45841: PUSH
45842: LD_OWVAR 2
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 21
45853: PUSH
45854: LD_INT 2
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 2
45863: PUSH
45864: LD_INT 34
45866: PUSH
45867: LD_INT 12
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 34
45876: PUSH
45877: LD_INT 51
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 34
45886: PUSH
45887: LD_INT 32
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: LIST
45904: PPUSH
45905: CALL_OW 69
45909: ST_TO_ADDR
// if not tmp then
45910: LD_VAR 0 2
45914: NOT
45915: IFFALSE 45919
// exit ;
45917: GO 45969
// for i in tmp do
45919: LD_ADDR_VAR 0 1
45923: PUSH
45924: LD_VAR 0 2
45928: PUSH
45929: FOR_IN
45930: IFFALSE 45967
// if GetCargo ( i , mat_artifact ) = 0 then
45932: LD_VAR 0 1
45936: PPUSH
45937: LD_INT 4
45939: PPUSH
45940: CALL_OW 289
45944: PUSH
45945: LD_INT 0
45947: EQUAL
45948: IFFALSE 45965
// SetCargo ( i , mat_siberit , 100 ) ;
45950: LD_VAR 0 1
45954: PPUSH
45955: LD_INT 3
45957: PPUSH
45958: LD_INT 100
45960: PPUSH
45961: CALL_OW 290
45965: GO 45929
45967: POP
45968: POP
// end ;
45969: PPOPN 2
45971: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
45972: LD_EXP 51
45976: PUSH
45977: LD_EXP 96
45981: AND
45982: IFFALSE 46135
45984: GO 45986
45986: DISABLE
45987: LD_INT 0
45989: PPUSH
45990: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
45991: LD_ADDR_VAR 0 2
45995: PUSH
45996: LD_INT 22
45998: PUSH
45999: LD_OWVAR 2
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PPUSH
46008: CALL_OW 69
46012: ST_TO_ADDR
// if not tmp then
46013: LD_VAR 0 2
46017: NOT
46018: IFFALSE 46022
// exit ;
46020: GO 46135
// for i := 1 to 2 do
46022: LD_ADDR_VAR 0 1
46026: PUSH
46027: DOUBLE
46028: LD_INT 1
46030: DEC
46031: ST_TO_ADDR
46032: LD_INT 2
46034: PUSH
46035: FOR_TO
46036: IFFALSE 46133
// begin uc_side := your_side ;
46038: LD_ADDR_OWVAR 20
46042: PUSH
46043: LD_OWVAR 2
46047: ST_TO_ADDR
// uc_nation := nation_american ;
46048: LD_ADDR_OWVAR 21
46052: PUSH
46053: LD_INT 1
46055: ST_TO_ADDR
// vc_chassis := us_morphling ;
46056: LD_ADDR_OWVAR 37
46060: PUSH
46061: LD_INT 5
46063: ST_TO_ADDR
// vc_engine := engine_siberite ;
46064: LD_ADDR_OWVAR 39
46068: PUSH
46069: LD_INT 3
46071: ST_TO_ADDR
// vc_control := control_computer ;
46072: LD_ADDR_OWVAR 38
46076: PUSH
46077: LD_INT 3
46079: ST_TO_ADDR
// vc_weapon := us_double_laser ;
46080: LD_ADDR_OWVAR 40
46084: PUSH
46085: LD_INT 10
46087: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
46088: CALL_OW 45
46092: PPUSH
46093: LD_VAR 0 2
46097: PUSH
46098: LD_INT 1
46100: ARRAY
46101: PPUSH
46102: CALL_OW 250
46106: PPUSH
46107: LD_VAR 0 2
46111: PUSH
46112: LD_INT 1
46114: ARRAY
46115: PPUSH
46116: CALL_OW 251
46120: PPUSH
46121: LD_INT 12
46123: PPUSH
46124: LD_INT 1
46126: PPUSH
46127: CALL_OW 50
// end ;
46131: GO 46035
46133: POP
46134: POP
// end ;
46135: PPOPN 2
46137: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
46138: LD_EXP 51
46142: PUSH
46143: LD_EXP 97
46147: AND
46148: IFFALSE 46370
46150: GO 46152
46152: DISABLE
46153: LD_INT 0
46155: PPUSH
46156: PPUSH
46157: PPUSH
46158: PPUSH
46159: PPUSH
46160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
46161: LD_ADDR_VAR 0 6
46165: PUSH
46166: LD_INT 22
46168: PUSH
46169: LD_OWVAR 2
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 21
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: LD_INT 3
46190: PUSH
46191: LD_INT 23
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: LIST
46209: PPUSH
46210: CALL_OW 69
46214: ST_TO_ADDR
// if not tmp then
46215: LD_VAR 0 6
46219: NOT
46220: IFFALSE 46224
// exit ;
46222: GO 46370
// s1 := rand ( 1 , 4 ) ;
46224: LD_ADDR_VAR 0 2
46228: PUSH
46229: LD_INT 1
46231: PPUSH
46232: LD_INT 4
46234: PPUSH
46235: CALL_OW 12
46239: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
46240: LD_ADDR_VAR 0 4
46244: PUSH
46245: LD_VAR 0 6
46249: PUSH
46250: LD_INT 1
46252: ARRAY
46253: PPUSH
46254: LD_VAR 0 2
46258: PPUSH
46259: CALL_OW 259
46263: ST_TO_ADDR
// if s1 = 1 then
46264: LD_VAR 0 2
46268: PUSH
46269: LD_INT 1
46271: EQUAL
46272: IFFALSE 46292
// s2 := rand ( 2 , 4 ) else
46274: LD_ADDR_VAR 0 3
46278: PUSH
46279: LD_INT 2
46281: PPUSH
46282: LD_INT 4
46284: PPUSH
46285: CALL_OW 12
46289: ST_TO_ADDR
46290: GO 46300
// s2 := 1 ;
46292: LD_ADDR_VAR 0 3
46296: PUSH
46297: LD_INT 1
46299: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
46300: LD_ADDR_VAR 0 5
46304: PUSH
46305: LD_VAR 0 6
46309: PUSH
46310: LD_INT 1
46312: ARRAY
46313: PPUSH
46314: LD_VAR 0 3
46318: PPUSH
46319: CALL_OW 259
46323: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
46324: LD_VAR 0 6
46328: PUSH
46329: LD_INT 1
46331: ARRAY
46332: PPUSH
46333: LD_VAR 0 2
46337: PPUSH
46338: LD_VAR 0 5
46342: PPUSH
46343: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
46347: LD_VAR 0 6
46351: PUSH
46352: LD_INT 1
46354: ARRAY
46355: PPUSH
46356: LD_VAR 0 3
46360: PPUSH
46361: LD_VAR 0 4
46365: PPUSH
46366: CALL_OW 237
// end ;
46370: PPOPN 6
46372: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
46373: LD_EXP 51
46377: PUSH
46378: LD_EXP 98
46382: AND
46383: IFFALSE 46462
46385: GO 46387
46387: DISABLE
46388: LD_INT 0
46390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
46391: LD_ADDR_VAR 0 1
46395: PUSH
46396: LD_INT 22
46398: PUSH
46399: LD_OWVAR 2
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 30
46410: PUSH
46411: LD_INT 3
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PPUSH
46422: CALL_OW 69
46426: ST_TO_ADDR
// if not tmp then
46427: LD_VAR 0 1
46431: NOT
46432: IFFALSE 46436
// exit ;
46434: GO 46462
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
46436: LD_VAR 0 1
46440: PUSH
46441: LD_INT 1
46443: PPUSH
46444: LD_VAR 0 1
46448: PPUSH
46449: CALL_OW 12
46453: ARRAY
46454: PPUSH
46455: LD_INT 1
46457: PPUSH
46458: CALL_OW 234
// end ;
46462: PPOPN 1
46464: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
46465: LD_EXP 51
46469: PUSH
46470: LD_EXP 99
46474: AND
46475: IFFALSE 46587
46477: GO 46479
46479: DISABLE
46480: LD_INT 0
46482: PPUSH
46483: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
46484: LD_ADDR_VAR 0 2
46488: PUSH
46489: LD_INT 22
46491: PUSH
46492: LD_OWVAR 2
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 2
46503: PUSH
46504: LD_INT 30
46506: PUSH
46507: LD_INT 27
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 30
46516: PUSH
46517: LD_INT 26
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 30
46526: PUSH
46527: LD_INT 28
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PPUSH
46544: CALL_OW 69
46548: ST_TO_ADDR
// if not tmp then
46549: LD_VAR 0 2
46553: NOT
46554: IFFALSE 46558
// exit ;
46556: GO 46587
// for i in tmp do
46558: LD_ADDR_VAR 0 1
46562: PUSH
46563: LD_VAR 0 2
46567: PUSH
46568: FOR_IN
46569: IFFALSE 46585
// SetLives ( i , 1 ) ;
46571: LD_VAR 0 1
46575: PPUSH
46576: LD_INT 1
46578: PPUSH
46579: CALL_OW 234
46583: GO 46568
46585: POP
46586: POP
// end ;
46587: PPOPN 2
46589: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
46590: LD_EXP 51
46594: PUSH
46595: LD_EXP 100
46599: AND
46600: IFFALSE 46874
46602: GO 46604
46604: DISABLE
46605: LD_INT 0
46607: PPUSH
46608: PPUSH
46609: PPUSH
// begin i := rand ( 1 , 7 ) ;
46610: LD_ADDR_VAR 0 1
46614: PUSH
46615: LD_INT 1
46617: PPUSH
46618: LD_INT 7
46620: PPUSH
46621: CALL_OW 12
46625: ST_TO_ADDR
// case i of 1 :
46626: LD_VAR 0 1
46630: PUSH
46631: LD_INT 1
46633: DOUBLE
46634: EQUAL
46635: IFTRUE 46639
46637: GO 46649
46639: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
46640: LD_STRING earthquake(getX(game), 0, 32)
46642: PPUSH
46643: CALL_OW 559
46647: GO 46874
46649: LD_INT 2
46651: DOUBLE
46652: EQUAL
46653: IFTRUE 46657
46655: GO 46671
46657: POP
// begin ToLua ( displayStucuk(); ) ;
46658: LD_STRING displayStucuk();
46660: PPUSH
46661: CALL_OW 559
// ResetFog ;
46665: CALL_OW 335
// end ; 3 :
46669: GO 46874
46671: LD_INT 3
46673: DOUBLE
46674: EQUAL
46675: IFTRUE 46679
46677: GO 46783
46679: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
46680: LD_ADDR_VAR 0 2
46684: PUSH
46685: LD_INT 22
46687: PUSH
46688: LD_OWVAR 2
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 25
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PPUSH
46711: CALL_OW 69
46715: ST_TO_ADDR
// if not tmp then
46716: LD_VAR 0 2
46720: NOT
46721: IFFALSE 46725
// exit ;
46723: GO 46874
// un := tmp [ rand ( 1 , tmp ) ] ;
46725: LD_ADDR_VAR 0 3
46729: PUSH
46730: LD_VAR 0 2
46734: PUSH
46735: LD_INT 1
46737: PPUSH
46738: LD_VAR 0 2
46742: PPUSH
46743: CALL_OW 12
46747: ARRAY
46748: ST_TO_ADDR
// if Crawls ( un ) then
46749: LD_VAR 0 3
46753: PPUSH
46754: CALL_OW 318
46758: IFFALSE 46769
// ComWalk ( un ) ;
46760: LD_VAR 0 3
46764: PPUSH
46765: CALL_OW 138
// SetClass ( un , class_mortar ) ;
46769: LD_VAR 0 3
46773: PPUSH
46774: LD_INT 8
46776: PPUSH
46777: CALL_OW 336
// end ; 4 :
46781: GO 46874
46783: LD_INT 4
46785: DOUBLE
46786: EQUAL
46787: IFTRUE 46791
46789: GO 46852
46791: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
46792: LD_ADDR_VAR 0 2
46796: PUSH
46797: LD_INT 22
46799: PUSH
46800: LD_OWVAR 2
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 30
46811: PUSH
46812: LD_INT 29
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PPUSH
46823: CALL_OW 69
46827: ST_TO_ADDR
// if not tmp then
46828: LD_VAR 0 2
46832: NOT
46833: IFFALSE 46837
// exit ;
46835: GO 46874
// DestroyUnit ( tmp [ 1 ] ) ;
46837: LD_VAR 0 2
46841: PUSH
46842: LD_INT 1
46844: ARRAY
46845: PPUSH
46846: CALL_OW 65
// end ; 5 .. 7 :
46850: GO 46874
46852: LD_INT 5
46854: DOUBLE
46855: GREATEREQUAL
46856: IFFALSE 46864
46858: LD_INT 7
46860: DOUBLE
46861: LESSEQUAL
46862: IFTRUE 46866
46864: GO 46873
46866: POP
// StreamSibBomb ; end ;
46867: CALL 43154 0 0
46871: GO 46874
46873: POP
// end ;
46874: PPOPN 3
46876: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
46877: LD_EXP 51
46881: PUSH
46882: LD_EXP 101
46886: AND
46887: IFFALSE 47043
46889: GO 46891
46891: DISABLE
46892: LD_INT 0
46894: PPUSH
46895: PPUSH
46896: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
46897: LD_ADDR_VAR 0 2
46901: PUSH
46902: LD_INT 81
46904: PUSH
46905: LD_OWVAR 2
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 2
46916: PUSH
46917: LD_INT 21
46919: PUSH
46920: LD_INT 1
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 21
46929: PUSH
46930: LD_INT 2
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: LIST
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PPUSH
46946: CALL_OW 69
46950: ST_TO_ADDR
// if not tmp then
46951: LD_VAR 0 2
46955: NOT
46956: IFFALSE 46960
// exit ;
46958: GO 47043
// p := 0 ;
46960: LD_ADDR_VAR 0 3
46964: PUSH
46965: LD_INT 0
46967: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
46968: LD_INT 35
46970: PPUSH
46971: CALL_OW 67
// p := p + 1 ;
46975: LD_ADDR_VAR 0 3
46979: PUSH
46980: LD_VAR 0 3
46984: PUSH
46985: LD_INT 1
46987: PLUS
46988: ST_TO_ADDR
// for i in tmp do
46989: LD_ADDR_VAR 0 1
46993: PUSH
46994: LD_VAR 0 2
46998: PUSH
46999: FOR_IN
47000: IFFALSE 47031
// if GetLives ( i ) < 1000 then
47002: LD_VAR 0 1
47006: PPUSH
47007: CALL_OW 256
47011: PUSH
47012: LD_INT 1000
47014: LESS
47015: IFFALSE 47029
// SetLives ( i , 1000 ) ;
47017: LD_VAR 0 1
47021: PPUSH
47022: LD_INT 1000
47024: PPUSH
47025: CALL_OW 234
47029: GO 46999
47031: POP
47032: POP
// until p > 20 ;
47033: LD_VAR 0 3
47037: PUSH
47038: LD_INT 20
47040: GREATER
47041: IFFALSE 46968
// end ;
47043: PPOPN 3
47045: END
// every 0 0$1 trigger StreamModeActive and sTime do
47046: LD_EXP 51
47050: PUSH
47051: LD_EXP 102
47055: AND
47056: IFFALSE 47091
47058: GO 47060
47060: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
47061: LD_INT 28
47063: PPUSH
47064: LD_OWVAR 2
47068: PPUSH
47069: LD_INT 2
47071: PPUSH
47072: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
47076: LD_INT 30
47078: PPUSH
47079: LD_OWVAR 2
47083: PPUSH
47084: LD_INT 2
47086: PPUSH
47087: CALL_OW 322
// end ;
47091: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
47092: LD_EXP 51
47096: PUSH
47097: LD_EXP 103
47101: AND
47102: IFFALSE 47223
47104: GO 47106
47106: DISABLE
47107: LD_INT 0
47109: PPUSH
47110: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
47111: LD_ADDR_VAR 0 2
47115: PUSH
47116: LD_INT 22
47118: PUSH
47119: LD_OWVAR 2
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 21
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 3
47140: PUSH
47141: LD_INT 23
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: LIST
47159: PPUSH
47160: CALL_OW 69
47164: ST_TO_ADDR
// if not tmp then
47165: LD_VAR 0 2
47169: NOT
47170: IFFALSE 47174
// exit ;
47172: GO 47223
// for i in tmp do
47174: LD_ADDR_VAR 0 1
47178: PUSH
47179: LD_VAR 0 2
47183: PUSH
47184: FOR_IN
47185: IFFALSE 47221
// begin if Crawls ( i ) then
47187: LD_VAR 0 1
47191: PPUSH
47192: CALL_OW 318
47196: IFFALSE 47207
// ComWalk ( i ) ;
47198: LD_VAR 0 1
47202: PPUSH
47203: CALL_OW 138
// SetClass ( i , 2 ) ;
47207: LD_VAR 0 1
47211: PPUSH
47212: LD_INT 2
47214: PPUSH
47215: CALL_OW 336
// end ;
47219: GO 47184
47221: POP
47222: POP
// end ;
47223: PPOPN 2
47225: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
47226: LD_EXP 51
47230: PUSH
47231: LD_EXP 104
47235: AND
47236: IFFALSE 47517
47238: GO 47240
47240: DISABLE
47241: LD_INT 0
47243: PPUSH
47244: PPUSH
47245: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
47246: LD_OWVAR 2
47250: PPUSH
47251: LD_INT 9
47253: PPUSH
47254: LD_INT 1
47256: PPUSH
47257: LD_INT 1
47259: PPUSH
47260: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
47264: LD_INT 9
47266: PPUSH
47267: LD_OWVAR 2
47271: PPUSH
47272: CALL_OW 343
// uc_side := 9 ;
47276: LD_ADDR_OWVAR 20
47280: PUSH
47281: LD_INT 9
47283: ST_TO_ADDR
// uc_nation := 2 ;
47284: LD_ADDR_OWVAR 21
47288: PUSH
47289: LD_INT 2
47291: ST_TO_ADDR
// hc_name := Dark Warrior ;
47292: LD_ADDR_OWVAR 26
47296: PUSH
47297: LD_STRING Dark Warrior
47299: ST_TO_ADDR
// hc_gallery :=  ;
47300: LD_ADDR_OWVAR 33
47304: PUSH
47305: LD_STRING 
47307: ST_TO_ADDR
// hc_noskilllimit := true ;
47308: LD_ADDR_OWVAR 76
47312: PUSH
47313: LD_INT 1
47315: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
47316: LD_ADDR_OWVAR 31
47320: PUSH
47321: LD_INT 30
47323: PUSH
47324: LD_INT 30
47326: PUSH
47327: LD_INT 30
47329: PUSH
47330: LD_INT 30
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: ST_TO_ADDR
// un := CreateHuman ;
47339: LD_ADDR_VAR 0 3
47343: PUSH
47344: CALL_OW 44
47348: ST_TO_ADDR
// hc_noskilllimit := false ;
47349: LD_ADDR_OWVAR 76
47353: PUSH
47354: LD_INT 0
47356: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
47357: LD_VAR 0 3
47361: PPUSH
47362: LD_INT 1
47364: PPUSH
47365: CALL_OW 51
// p := 0 ;
47369: LD_ADDR_VAR 0 2
47373: PUSH
47374: LD_INT 0
47376: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
47377: LD_INT 35
47379: PPUSH
47380: CALL_OW 67
// p := p + 1 ;
47384: LD_ADDR_VAR 0 2
47388: PUSH
47389: LD_VAR 0 2
47393: PUSH
47394: LD_INT 1
47396: PLUS
47397: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
47398: LD_VAR 0 3
47402: PPUSH
47403: CALL_OW 256
47407: PUSH
47408: LD_INT 1000
47410: LESS
47411: IFFALSE 47425
// SetLives ( un , 1000 ) ;
47413: LD_VAR 0 3
47417: PPUSH
47418: LD_INT 1000
47420: PPUSH
47421: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
47425: LD_VAR 0 3
47429: PPUSH
47430: LD_INT 81
47432: PUSH
47433: LD_OWVAR 2
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 91
47444: PUSH
47445: LD_VAR 0 3
47449: PUSH
47450: LD_INT 30
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: LIST
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PPUSH
47462: CALL_OW 69
47466: PPUSH
47467: LD_VAR 0 3
47471: PPUSH
47472: CALL_OW 74
47476: PPUSH
47477: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
47481: LD_VAR 0 2
47485: PUSH
47486: LD_INT 60
47488: GREATER
47489: PUSH
47490: LD_VAR 0 3
47494: PPUSH
47495: CALL_OW 301
47499: OR
47500: IFFALSE 47377
// if un then
47502: LD_VAR 0 3
47506: IFFALSE 47517
// RemoveUnit ( un ) ;
47508: LD_VAR 0 3
47512: PPUSH
47513: CALL_OW 64
// end ; end_of_file
47517: PPOPN 3
47519: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
47520: LD_INT 0
47522: PPUSH
47523: PPUSH
47524: PPUSH
47525: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
47526: LD_VAR 0 1
47530: PPUSH
47531: CALL_OW 264
47535: PUSH
47536: LD_EXP 42
47540: EQUAL
47541: IFFALSE 47613
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
47543: LD_INT 68
47545: PPUSH
47546: LD_VAR 0 1
47550: PPUSH
47551: CALL_OW 255
47555: PPUSH
47556: CALL_OW 321
47560: PUSH
47561: LD_INT 2
47563: EQUAL
47564: IFFALSE 47576
// eff := 70 else
47566: LD_ADDR_VAR 0 4
47570: PUSH
47571: LD_INT 70
47573: ST_TO_ADDR
47574: GO 47584
// eff := 30 ;
47576: LD_ADDR_VAR 0 4
47580: PUSH
47581: LD_INT 30
47583: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
47584: LD_VAR 0 1
47588: PPUSH
47589: CALL_OW 250
47593: PPUSH
47594: LD_VAR 0 1
47598: PPUSH
47599: CALL_OW 251
47603: PPUSH
47604: LD_VAR 0 4
47608: PPUSH
47609: CALL_OW 495
// end ; end ;
47613: LD_VAR 0 2
47617: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
47618: LD_INT 0
47620: PPUSH
// end ;
47621: LD_VAR 0 4
47625: RET
// export function SOS_Command ( cmd ) ; begin
47626: LD_INT 0
47628: PPUSH
// end ;
47629: LD_VAR 0 2
47633: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
47634: LD_VAR 0 1
47638: PUSH
47639: LD_INT 255
47641: EQUAL
47642: PUSH
47643: LD_VAR 0 2
47647: PPUSH
47648: CALL_OW 264
47652: PUSH
47653: LD_INT 14
47655: PUSH
47656: LD_INT 53
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: IN
47663: AND
47664: PUSH
47665: LD_VAR 0 4
47669: PPUSH
47670: LD_VAR 0 5
47674: PPUSH
47675: CALL_OW 488
47679: AND
47680: IFFALSE 47704
// CutTreeXYR ( unit , x , y , 12 ) ;
47682: LD_VAR 0 2
47686: PPUSH
47687: LD_VAR 0 4
47691: PPUSH
47692: LD_VAR 0 5
47696: PPUSH
47697: LD_INT 12
47699: PPUSH
47700: CALL 47707 0 4
// end ;
47704: PPOPN 5
47706: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
47707: LD_INT 0
47709: PPUSH
47710: PPUSH
47711: PPUSH
47712: PPUSH
47713: PPUSH
47714: PPUSH
47715: PPUSH
47716: PPUSH
47717: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
47718: LD_VAR 0 1
47722: NOT
47723: PUSH
47724: LD_VAR 0 2
47728: PPUSH
47729: LD_VAR 0 3
47733: PPUSH
47734: CALL_OW 488
47738: NOT
47739: OR
47740: PUSH
47741: LD_VAR 0 4
47745: NOT
47746: OR
47747: IFFALSE 47751
// exit ;
47749: GO 48091
// list := [ ] ;
47751: LD_ADDR_VAR 0 13
47755: PUSH
47756: EMPTY
47757: ST_TO_ADDR
// if x - r < 0 then
47758: LD_VAR 0 2
47762: PUSH
47763: LD_VAR 0 4
47767: MINUS
47768: PUSH
47769: LD_INT 0
47771: LESS
47772: IFFALSE 47784
// min_x := 0 else
47774: LD_ADDR_VAR 0 7
47778: PUSH
47779: LD_INT 0
47781: ST_TO_ADDR
47782: GO 47800
// min_x := x - r ;
47784: LD_ADDR_VAR 0 7
47788: PUSH
47789: LD_VAR 0 2
47793: PUSH
47794: LD_VAR 0 4
47798: MINUS
47799: ST_TO_ADDR
// if y - r < 0 then
47800: LD_VAR 0 3
47804: PUSH
47805: LD_VAR 0 4
47809: MINUS
47810: PUSH
47811: LD_INT 0
47813: LESS
47814: IFFALSE 47826
// min_y := 0 else
47816: LD_ADDR_VAR 0 8
47820: PUSH
47821: LD_INT 0
47823: ST_TO_ADDR
47824: GO 47842
// min_y := y - r ;
47826: LD_ADDR_VAR 0 8
47830: PUSH
47831: LD_VAR 0 3
47835: PUSH
47836: LD_VAR 0 4
47840: MINUS
47841: ST_TO_ADDR
// max_x := x + r ;
47842: LD_ADDR_VAR 0 9
47846: PUSH
47847: LD_VAR 0 2
47851: PUSH
47852: LD_VAR 0 4
47856: PLUS
47857: ST_TO_ADDR
// max_y := y + r ;
47858: LD_ADDR_VAR 0 10
47862: PUSH
47863: LD_VAR 0 3
47867: PUSH
47868: LD_VAR 0 4
47872: PLUS
47873: ST_TO_ADDR
// for _x = min_x to max_x do
47874: LD_ADDR_VAR 0 11
47878: PUSH
47879: DOUBLE
47880: LD_VAR 0 7
47884: DEC
47885: ST_TO_ADDR
47886: LD_VAR 0 9
47890: PUSH
47891: FOR_TO
47892: IFFALSE 48009
// for _y = min_y to max_y do
47894: LD_ADDR_VAR 0 12
47898: PUSH
47899: DOUBLE
47900: LD_VAR 0 8
47904: DEC
47905: ST_TO_ADDR
47906: LD_VAR 0 10
47910: PUSH
47911: FOR_TO
47912: IFFALSE 48005
// begin if not ValidHex ( _x , _y ) then
47914: LD_VAR 0 11
47918: PPUSH
47919: LD_VAR 0 12
47923: PPUSH
47924: CALL_OW 488
47928: NOT
47929: IFFALSE 47933
// continue ;
47931: GO 47911
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
47933: LD_VAR 0 11
47937: PPUSH
47938: LD_VAR 0 12
47942: PPUSH
47943: CALL_OW 351
47947: PUSH
47948: LD_VAR 0 11
47952: PPUSH
47953: LD_VAR 0 12
47957: PPUSH
47958: CALL_OW 554
47962: AND
47963: IFFALSE 48003
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
47965: LD_ADDR_VAR 0 13
47969: PUSH
47970: LD_VAR 0 13
47974: PPUSH
47975: LD_VAR 0 13
47979: PUSH
47980: LD_INT 1
47982: PLUS
47983: PPUSH
47984: LD_VAR 0 11
47988: PUSH
47989: LD_VAR 0 12
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PPUSH
47998: CALL_OW 2
48002: ST_TO_ADDR
// end ;
48003: GO 47911
48005: POP
48006: POP
48007: GO 47891
48009: POP
48010: POP
// if not list then
48011: LD_VAR 0 13
48015: NOT
48016: IFFALSE 48020
// exit ;
48018: GO 48091
// for i in list do
48020: LD_ADDR_VAR 0 6
48024: PUSH
48025: LD_VAR 0 13
48029: PUSH
48030: FOR_IN
48031: IFFALSE 48089
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
48033: LD_VAR 0 1
48037: PPUSH
48038: LD_STRING M
48040: PUSH
48041: LD_VAR 0 6
48045: PUSH
48046: LD_INT 1
48048: ARRAY
48049: PUSH
48050: LD_VAR 0 6
48054: PUSH
48055: LD_INT 2
48057: ARRAY
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: LD_INT 0
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: LD_INT 0
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: PUSH
48080: EMPTY
48081: LIST
48082: PPUSH
48083: CALL_OW 447
48087: GO 48030
48089: POP
48090: POP
// end ;
48091: LD_VAR 0 5
48095: RET
