// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9187 0 0
// PrepareAlliance ;
  19: CALL 344 0 0
// PrepareFriends ;
  23: CALL 3654 0 0
// PrepareAmerican ;
  27: CALL 781 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 16
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 14
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9523 0 0
// PreparePatrol ;
 117: CALL 1246 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 2 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 2
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// end ;
 243: LD_VAR 0 1
 247: RET
// every 0 0$1 trigger on_hill do
 248: LD_EXP 7
 252: IFFALSE 264
 254: GO 256
 256: DISABLE
// SetAchievement ( ACH_EYE ) ;
 257: LD_STRING ACH_EYE
 259: PPUSH
 260: CALL_OW 543
 264: END
// every 0 0$1 trigger not invis_used do var i ;
 265: LD_EXP 12
 269: NOT
 270: IFFALSE 341
 272: GO 274
 274: DISABLE
 275: LD_INT 0
 277: PPUSH
// begin enable ;
 278: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 279: LD_ADDR_VAR 0 1
 283: PUSH
 284: LD_INT 22
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 21
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PPUSH
 308: CALL_OW 69
 312: PUSH
 313: FOR_IN
 314: IFFALSE 339
// if IsInvisible ( i ) then
 316: LD_VAR 0 1
 320: PPUSH
 321: CALL_OW 571
 325: IFFALSE 337
// begin invis_used := true ;
 327: LD_ADDR_EXP 12
 331: PUSH
 332: LD_INT 1
 334: ST_TO_ADDR
// break ;
 335: GO 339
// end ;
 337: GO 313
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 344: LD_INT 0
 346: PPUSH
 347: PPUSH
// uc_side := 7 ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_INT 7
 355: ST_TO_ADDR
// uc_nation := 1 ;
 356: LD_ADDR_OWVAR 21
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 364: LD_ADDR_EXP 14
 368: PUSH
 369: LD_STRING JMM
 371: PPUSH
 372: LD_EXP 1
 376: NOT
 377: PPUSH
 378: LD_STRING 11_
 380: PPUSH
 381: CALL 34947 0 3
 385: ST_TO_ADDR
// uc_side := 4 ;
 386: LD_ADDR_OWVAR 20
 390: PUSH
 391: LD_INT 4
 393: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 394: LD_ADDR_EXP 15
 398: PUSH
 399: LD_STRING Roth
 401: PPUSH
 402: CALL_OW 25
 406: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 407: LD_EXP 14
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 419: LD_EXP 14
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 431: LD_EXP 14
 435: PPUSH
 436: LD_INT 105
 438: PPUSH
 439: LD_INT 10
 441: PPUSH
 442: LD_INT 0
 444: PPUSH
 445: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 449: LD_EXP 15
 453: PPUSH
 454: LD_INT 4
 456: PPUSH
 457: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 461: LD_EXP 15
 465: PPUSH
 466: LD_INT 109
 468: PPUSH
 469: LD_INT 10
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 479: LD_EXP 14
 483: PPUSH
 484: LD_EXP 15
 488: PPUSH
 489: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 493: LD_EXP 15
 497: PPUSH
 498: LD_EXP 14
 502: PPUSH
 503: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 507: LD_INT 3
 509: PPUSH
 510: LD_INT 3
 512: PPUSH
 513: LD_INT 3
 515: PPUSH
 516: LD_INT 12
 518: PPUSH
 519: LD_INT 100
 521: PPUSH
 522: CALL 39962 0 5
// cargo := CreateVehicle ;
 526: LD_ADDR_VAR 0 2
 530: PUSH
 531: CALL_OW 45
 535: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 536: LD_VAR 0 2
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 548: LD_VAR 0 2
 552: PPUSH
 553: LD_INT 179
 555: PPUSH
 556: LD_INT 45
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 566: LD_VAR 0 2
 570: PPUSH
 571: LD_INT 4
 573: PPUSH
 574: LD_INT 30
 576: PPUSH
 577: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 581: LD_STRING 11_artifact_captured
 583: PPUSH
 584: LD_INT 0
 586: PPUSH
 587: CALL_OW 30
 591: IFFALSE 648
// begin cargo := CreateVehicle ;
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 603: LD_VAR 0 2
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 615: LD_VAR 0 2
 619: PPUSH
 620: LD_INT 171
 622: PPUSH
 623: LD_INT 85
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 633: LD_VAR 0 2
 637: PPUSH
 638: LD_INT 4
 640: PPUSH
 641: LD_INT 50
 643: PPUSH
 644: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 648: LD_INT 47
 650: PPUSH
 651: LD_INT 7
 653: PPUSH
 654: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 658: LD_INT 1
 660: PPUSH
 661: LD_INT 47
 663: PPUSH
 664: CALL_OW 471
// end ;
 668: LD_VAR 0 1
 672: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 673: LD_INT 38
 675: PPUSH
 676: LD_INT 22
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PPUSH
 686: CALL_OW 70
 690: PUSH
 691: LD_EXP 7
 695: NOT
 696: AND
 697: IFFALSE 728
 699: GO 701
 701: DISABLE
// begin enable ;
 702: ENABLE
// on_hill := true ;
 703: LD_ADDR_EXP 7
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 711: LD_INT 126
 713: PPUSH
 714: LD_INT 13
 716: PPUSH
 717: LD_INT 7
 719: PPUSH
 720: LD_INT 90
 722: NEG
 723: PPUSH
 724: CALL_OW 330
// end ;
 728: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 729: LD_INT 38
 731: PPUSH
 732: LD_INT 22
 734: PUSH
 735: LD_INT 7
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 70
 746: NOT
 747: PUSH
 748: LD_EXP 7
 752: AND
 753: IFFALSE 780
 755: GO 757
 757: DISABLE
// begin enable ;
 758: ENABLE
// on_hill := false ;
 759: LD_ADDR_EXP 7
 763: PUSH
 764: LD_INT 0
 766: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 767: LD_INT 126
 769: PPUSH
 770: LD_INT 13
 772: PPUSH
 773: LD_INT 7
 775: PPUSH
 776: CALL_OW 331
// end ; end_of_file
 780: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
 786: PPUSH
 787: PPUSH
 788: PPUSH
// if Difficulty = 1 then
 789: LD_OWVAR 67
 793: PUSH
 794: LD_INT 1
 796: EQUAL
 797: IFFALSE 905
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 799: LD_ADDR_VAR 0 6
 803: PUSH
 804: LD_INT 155
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 193
 816: PUSH
 817: LD_INT 93
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 188
 826: PUSH
 827: LD_INT 81
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 56
 836: PUSH
 837: LD_INT 85
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 98
 846: PUSH
 847: LD_INT 87
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: ST_TO_ADDR
// for i in tmp do
 861: LD_ADDR_VAR 0 2
 865: PUSH
 866: LD_VAR 0 6
 870: PUSH
 871: FOR_IN
 872: IFFALSE 903
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: LD_VAR 0 2
 887: PUSH
 888: LD_INT 2
 890: ARRAY
 891: PPUSH
 892: CALL_OW 428
 896: PPUSH
 897: CALL_OW 64
 901: GO 871
 903: POP
 904: POP
// end ; defcon := 0 ;
 905: LD_ADDR_EXP 21
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// defcon_wave := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defenders := [ ] ;
 921: LD_ADDR_EXP 20
 925: PUSH
 926: EMPTY
 927: ST_TO_ADDR
// SetBName ( alfa , alpha ) ;
 928: LD_INT 5
 930: PPUSH
 931: LD_STRING alpha
 933: PPUSH
 934: CALL_OW 500
// uc_side := 1 ;
 938: LD_ADDR_OWVAR 20
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// uc_nation := 1 ;
 946: LD_ADDR_OWVAR 21
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 954: LD_ADDR_EXP 16
 958: PUSH
 959: LD_STRING Powell
 961: PPUSH
 962: CALL_OW 25
 966: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 967: LD_EXP 16
 971: PPUSH
 972: LD_INT 110
 974: PPUSH
 975: LD_INT 26
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 48
// ComHold ( Powell ) ;
 985: LD_EXP 16
 989: PPUSH
 990: CALL_OW 140
// for i = 1 to 5 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 5
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1064
// begin PrepareHuman ( false , 1 , 10 ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_INT 1
1015: PPUSH
1016: LD_INT 10
1018: PPUSH
1019: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1023: LD_ADDR_EXP 19
1027: PUSH
1028: LD_EXP 19
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: CALL_OW 44
1040: PPUSH
1041: CALL_OW 2
1045: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1046: LD_EXP 19
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_INT 18
1057: PPUSH
1058: CALL_OW 52
// end ;
1062: GO 1007
1064: POP
1065: POP
// if Difficulty > 2 then
1066: LD_OWVAR 67
1070: PUSH
1071: LD_INT 2
1073: GREATER
1074: IFFALSE 1123
// begin bc_type := b_turret ;
1076: LD_ADDR_OWVAR 42
1080: PUSH
1081: LD_INT 33
1083: ST_TO_ADDR
// bc_level := 7 ;
1084: LD_ADDR_OWVAR 43
1088: PUSH
1089: LD_INT 7
1091: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_INT 107
1099: PPUSH
1100: LD_INT 55
1102: PPUSH
1103: LD_INT 5
1105: PPUSH
1106: CALL_OW 47
1110: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1111: LD_VAR 0 4
1115: PPUSH
1116: LD_INT 7
1118: PPUSH
1119: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1123: LD_ADDR_VAR 0 2
1127: PUSH
1128: LD_INT 22
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: LD_INT 30
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 69
1156: PUSH
1157: LD_INT 22
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 30
1169: PUSH
1170: LD_INT 36
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PPUSH
1181: CALL_OW 69
1185: ADD
1186: PUSH
1187: FOR_IN
1188: IFFALSE 1239
// for j = 1 to 3 do
1190: LD_ADDR_VAR 0 3
1194: PUSH
1195: DOUBLE
1196: LD_INT 1
1198: DEC
1199: ST_TO_ADDR
1200: LD_INT 3
1202: PUSH
1203: FOR_TO
1204: IFFALSE 1235
// begin PrepareHuman ( false , 3 , 6 ) ;
1206: LD_INT 0
1208: PPUSH
1209: LD_INT 3
1211: PPUSH
1212: LD_INT 6
1214: PPUSH
1215: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1219: CALL_OW 44
1223: PPUSH
1224: LD_VAR 0 2
1228: PPUSH
1229: CALL_OW 52
// end ;
1233: GO 1203
1235: POP
1236: POP
1237: GO 1187
1239: POP
1240: POP
// end ;
1241: LD_VAR 0 1
1245: RET
// export function PreparePatrol ; var i , un ; begin
1246: LD_INT 0
1248: PPUSH
1249: PPUSH
1250: PPUSH
// uc_side := 1 ;
1251: LD_ADDR_OWVAR 20
1255: PUSH
1256: LD_INT 1
1258: ST_TO_ADDR
// uc_nation := 1 ;
1259: LD_ADDR_OWVAR 21
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1267: LD_ADDR_EXP 18
1271: PUSH
1272: LD_INT 99
1274: PUSH
1275: LD_INT 55
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: LD_INT 113
1284: PUSH
1285: LD_INT 67
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PUSH
1292: LD_INT 129
1294: PUSH
1295: LD_INT 68
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 135
1304: PUSH
1305: LD_INT 62
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: PUSH
1312: LD_INT 103
1314: PUSH
1315: LD_INT 41
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: PUSH
1329: LD_INT 27
1331: PUSH
1332: LD_INT 49
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 46
1341: PUSH
1342: LD_INT 49
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 87
1351: PUSH
1352: LD_INT 70
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 99
1361: PUSH
1362: LD_INT 79
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 118
1371: PUSH
1372: LD_INT 111
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 99
1381: PUSH
1382: LD_INT 79
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 87
1391: PUSH
1392: LD_INT 70
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 46
1401: PUSH
1402: LD_INT 49
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: LD_INT 200
1421: PUSH
1422: LD_INT 88
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PUSH
1429: LD_INT 175
1431: PUSH
1432: LD_INT 80
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 135
1441: PUSH
1442: LD_INT 62
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 117
1451: PUSH
1452: LD_INT 53
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 103
1461: PUSH
1462: LD_INT 41
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: LD_INT 99
1471: PUSH
1472: LD_INT 24
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 85
1481: PUSH
1482: LD_INT 3
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: LD_INT 99
1491: PUSH
1492: LD_INT 24
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 103
1501: PUSH
1502: LD_INT 41
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: PUSH
1509: LD_INT 98
1511: PUSH
1512: LD_INT 47
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PUSH
1519: LD_INT 99
1521: PUSH
1522: LD_INT 56
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 96
1531: PUSH
1532: LD_INT 66
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 99
1541: PUSH
1542: LD_INT 56
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 112
1551: PUSH
1552: LD_INT 66
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 129
1561: PUSH
1562: LD_INT 68
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 135
1571: PUSH
1572: LD_INT 62
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 156
1581: PUSH
1582: LD_INT 71
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 168
1591: PUSH
1592: LD_INT 76
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 168
1601: PUSH
1602: LD_INT 61
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 168
1611: PUSH
1612: LD_INT 75
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 185
1621: PUSH
1622: LD_INT 85
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: ST_TO_ADDR
// mobile_patrol := [ ] ;
1657: LD_ADDR_EXP 17
1661: PUSH
1662: EMPTY
1663: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1664: LD_INT 3
1666: PPUSH
1667: LD_INT 1
1669: PPUSH
1670: LD_INT 3
1672: PPUSH
1673: LD_INT 4
1675: PPUSH
1676: LD_INT 100
1678: PPUSH
1679: CALL 39962 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1683: LD_ADDR_EXP 17
1687: PUSH
1688: LD_EXP 17
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: CALL_OW 45
1700: PPUSH
1701: CALL_OW 2
1705: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1706: LD_EXP 17
1710: PUSH
1711: LD_INT 1
1713: ARRAY
1714: PPUSH
1715: LD_INT 99
1717: PPUSH
1718: LD_INT 55
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1728: LD_INT 2
1730: PPUSH
1731: LD_INT 1
1733: PPUSH
1734: LD_INT 3
1736: PPUSH
1737: LD_INT 4
1739: PPUSH
1740: LD_INT 100
1742: PPUSH
1743: CALL 39962 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1747: LD_ADDR_EXP 17
1751: PUSH
1752: LD_EXP 17
1756: PPUSH
1757: LD_INT 2
1759: PPUSH
1760: CALL_OW 45
1764: PPUSH
1765: CALL_OW 2
1769: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1770: LD_EXP 17
1774: PUSH
1775: LD_INT 2
1777: ARRAY
1778: PPUSH
1779: LD_INT 27
1781: PPUSH
1782: LD_INT 49
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 1
1797: PPUSH
1798: LD_INT 3
1800: PPUSH
1801: LD_INT 9
1803: PUSH
1804: LD_INT 7
1806: PUSH
1807: LD_INT 7
1809: PUSH
1810: LD_INT 7
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_OWVAR 67
1823: ARRAY
1824: PPUSH
1825: LD_INT 100
1827: PPUSH
1828: CALL 39962 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1832: LD_ADDR_EXP 17
1836: PUSH
1837: LD_EXP 17
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: CALL_OW 45
1849: PPUSH
1850: CALL_OW 2
1854: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
1855: LD_EXP 17
1859: PUSH
1860: LD_INT 3
1862: ARRAY
1863: PPUSH
1864: LD_INT 200
1866: PPUSH
1867: LD_INT 88
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 48
// for i = mobile_patrol downto 1 do
1877: LD_ADDR_VAR 0 2
1881: PUSH
1882: DOUBLE
1883: LD_EXP 17
1887: INC
1888: ST_TO_ADDR
1889: LD_INT 1
1891: PUSH
1892: FOR_DOWNTO
1893: IFFALSE 1904
// RaiseSailEvent ( 1 ) ;
1895: LD_INT 1
1897: PPUSH
1898: CALL_OW 427
1902: GO 1892
1904: POP
1905: POP
// end ;
1906: LD_VAR 0 1
1910: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
1911: LD_INT 0
1913: PPUSH
1914: PPUSH
1915: PPUSH
1916: PPUSH
1917: PPUSH
1918: PPUSH
1919: PPUSH
1920: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
1921: LD_ADDR_VAR 0 5
1925: PUSH
1926: LD_INT 20
1928: PUSH
1929: LD_INT 4
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 21
1938: PUSH
1939: LD_INT 5
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 22
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
1961: LD_ADDR_VAR 0 6
1965: PUSH
1966: LD_INT 176
1968: PUSH
1969: LD_INT 81
1971: PUSH
1972: LD_INT 135
1974: PUSH
1975: LD_INT 62
1977: PUSH
1978: LD_INT 114
1980: PUSH
1981: LD_INT 67
1983: PUSH
1984: LD_INT 93
1986: PUSH
1987: LD_INT 71
1989: PUSH
1990: LD_INT 76
1992: PUSH
1993: LD_INT 67
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 107
2010: PUSH
2011: LD_INT 92
2013: PUSH
2014: LD_INT 92
2016: PUSH
2017: LD_INT 72
2019: PUSH
2020: LD_INT 77
2022: PUSH
2023: LD_INT 68
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 45
2036: PUSH
2037: LD_INT 49
2039: PUSH
2040: LD_INT 67
2042: PUSH
2043: LD_INT 59
2045: PUSH
2046: LD_INT 77
2048: PUSH
2049: LD_INT 68
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2065: LD_ADDR_VAR 0 4
2069: PUSH
2070: LD_INT 1
2072: PPUSH
2073: LD_VAR 0 5
2077: PPUSH
2078: CALL_OW 12
2082: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2083: LD_ADDR_VAR 0 3
2087: PUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_INT 2
2093: PPUSH
2094: CALL_OW 12
2098: ST_TO_ADDR
// uc_side := 1 ;
2099: LD_ADDR_OWVAR 20
2103: PUSH
2104: LD_INT 1
2106: ST_TO_ADDR
// uc_nation := 1 ;
2107: LD_ADDR_OWVAR 21
2111: PUSH
2112: LD_INT 1
2114: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2115: LD_INT 2
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: LD_INT 3
2123: PPUSH
2124: LD_INT 12
2126: PPUSH
2127: LD_INT 100
2129: PPUSH
2130: CALL 39962 0 5
// veh := CreateVehicle ;
2134: LD_ADDR_VAR 0 8
2138: PUSH
2139: CALL_OW 45
2143: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2144: LD_VAR 0 8
2148: PPUSH
2149: LD_VAR 0 5
2153: PUSH
2154: LD_VAR 0 4
2158: ARRAY
2159: PUSH
2160: LD_INT 2
2162: ARRAY
2163: PPUSH
2164: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2168: LD_VAR 0 8
2172: PPUSH
2173: LD_VAR 0 5
2177: PUSH
2178: LD_VAR 0 4
2182: ARRAY
2183: PUSH
2184: LD_INT 1
2186: ARRAY
2187: PPUSH
2188: LD_INT 0
2190: PPUSH
2191: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2195: LD_VAR 0 8
2199: PPUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 3
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PUSH
2210: LD_VAR 0 3
2214: ARRAY
2215: PPUSH
2216: LD_INT 100
2218: PPUSH
2219: CALL_OW 290
// tmp := road [ k ] ;
2223: LD_ADDR_VAR 0 7
2227: PUSH
2228: LD_VAR 0 6
2232: PUSH
2233: LD_VAR 0 4
2237: ARRAY
2238: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2239: LD_ADDR_VAR 0 2
2243: PUSH
2244: DOUBLE
2245: LD_INT 1
2247: DEC
2248: ST_TO_ADDR
2249: LD_VAR 0 7
2253: PUSH
2254: LD_INT 2
2256: DIV
2257: PUSH
2258: FOR_TO
2259: IFFALSE 2306
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2261: LD_VAR 0 8
2265: PPUSH
2266: LD_VAR 0 7
2270: PUSH
2271: LD_VAR 0 2
2275: PUSH
2276: LD_INT 2
2278: MUL
2279: PUSH
2280: LD_INT 1
2282: MINUS
2283: ARRAY
2284: PPUSH
2285: LD_VAR 0 7
2289: PUSH
2290: LD_VAR 0 2
2294: PUSH
2295: LD_INT 2
2297: MUL
2298: ARRAY
2299: PPUSH
2300: CALL_OW 171
2304: GO 2258
2306: POP
2307: POP
// AddComGive ( veh , alfa ) ;
2308: LD_VAR 0 8
2312: PPUSH
2313: LD_INT 5
2315: PPUSH
2316: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2320: LD_VAR 0 8
2324: PPUSH
2325: LD_INT 70
2327: PPUSH
2328: CALL_OW 202
// for i = tmp div 2 downto 1 do
2332: LD_ADDR_VAR 0 2
2336: PUSH
2337: DOUBLE
2338: LD_VAR 0 7
2342: PUSH
2343: LD_INT 2
2345: DIV
2346: INC
2347: ST_TO_ADDR
2348: LD_INT 1
2350: PUSH
2351: FOR_DOWNTO
2352: IFFALSE 2399
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2354: LD_VAR 0 8
2358: PPUSH
2359: LD_VAR 0 7
2363: PUSH
2364: LD_VAR 0 2
2368: PUSH
2369: LD_INT 2
2371: MUL
2372: PUSH
2373: LD_INT 1
2375: MINUS
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 7
2382: PUSH
2383: LD_VAR 0 2
2387: PUSH
2388: LD_INT 2
2390: MUL
2391: ARRAY
2392: PPUSH
2393: CALL_OW 171
2397: GO 2351
2399: POP
2400: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2401: LD_VAR 0 8
2405: PPUSH
2406: LD_VAR 0 5
2410: PUSH
2411: LD_VAR 0 4
2415: ARRAY
2416: PUSH
2417: LD_INT 1
2419: ARRAY
2420: PPUSH
2421: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2425: LD_INT 35
2427: PPUSH
2428: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2432: LD_VAR 0 8
2436: PPUSH
2437: LD_VAR 0 5
2441: PUSH
2442: LD_VAR 0 4
2446: ARRAY
2447: PUSH
2448: LD_INT 1
2450: ARRAY
2451: PPUSH
2452: CALL_OW 308
2456: PUSH
2457: LD_VAR 0 8
2461: PPUSH
2462: LD_VAR 0 3
2466: PPUSH
2467: CALL_OW 289
2471: PUSH
2472: LD_INT 0
2474: EQUAL
2475: AND
2476: IFFALSE 2425
// RemoveUnit ( veh ) ;
2478: LD_VAR 0 8
2482: PPUSH
2483: CALL_OW 64
// end ;
2487: LD_VAR 0 1
2491: RET
// every 3 3$00 do
2492: GO 2494
2494: DISABLE
// begin enable ;
2495: ENABLE
// SpawnCargo ;
2496: CALL 1911 0 0
// end ;
2500: END
// export function PrepareDefenders ; var i , tmp ; begin
2501: LD_INT 0
2503: PPUSH
2504: PPUSH
2505: PPUSH
// if defenders then
2506: LD_EXP 20
2510: IFFALSE 2514
// exit ;
2512: GO 2786
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2514: LD_ADDR_VAR 0 2
2518: PUSH
2519: DOUBLE
2520: LD_INT 1
2522: DEC
2523: ST_TO_ADDR
2524: LD_INT 4
2526: PUSH
2527: LD_INT 5
2529: PUSH
2530: LD_INT 6
2532: PUSH
2533: LD_INT 7
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: PUSH
2542: LD_OWVAR 67
2546: ARRAY
2547: PUSH
2548: FOR_TO
2549: IFFALSE 2688
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2551: LD_ADDR_VAR 0 3
2555: PUSH
2556: LD_INT 6
2558: PPUSH
2559: LD_INT 2
2561: PUSH
2562: LD_INT 3
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_INT 2
2574: PPUSH
2575: CALL_OW 12
2579: ARRAY
2580: PPUSH
2581: LD_INT 1
2583: PUSH
2584: LD_INT 3
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 1
2593: PPUSH
2594: LD_INT 2
2596: PPUSH
2597: CALL_OW 12
2601: ARRAY
2602: PPUSH
2603: LD_INT 2
2605: PPUSH
2606: LD_INT 4
2608: PUSH
2609: LD_INT 5
2611: PUSH
2612: LD_INT 9
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 1
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: CALL_OW 12
2630: ARRAY
2631: PPUSH
2632: CALL 37582 0 5
2636: ST_TO_ADDR
// if tmp then
2637: LD_VAR 0 3
2641: IFFALSE 2686
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2643: LD_INT 6
2645: PPUSH
2646: LD_VAR 0 3
2650: PUSH
2651: LD_INT 1
2653: ARRAY
2654: PPUSH
2655: LD_VAR 0 3
2659: PUSH
2660: LD_INT 2
2662: ARRAY
2663: PPUSH
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 3
2671: ARRAY
2672: PPUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 4
2680: ARRAY
2681: PPUSH
2682: CALL_OW 185
// end ;
2686: GO 2548
2688: POP
2689: POP
// repeat wait ( 0 0$1 ) ;
2690: LD_INT 35
2692: PPUSH
2693: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2697: LD_INT 22
2699: PUSH
2700: LD_INT 1
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 33
2709: PUSH
2710: LD_INT 2
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PPUSH
2721: CALL_OW 69
2725: PUSH
2726: LD_INT 4
2728: PUSH
2729: LD_INT 5
2731: PUSH
2732: LD_INT 6
2734: PUSH
2735: LD_INT 7
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: PUSH
2744: LD_OWVAR 67
2748: ARRAY
2749: GREATEREQUAL
2750: IFFALSE 2690
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2752: LD_ADDR_EXP 20
2756: PUSH
2757: LD_INT 22
2759: PUSH
2760: LD_INT 1
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 33
2769: PUSH
2770: LD_INT 2
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 69
2785: ST_TO_ADDR
// end ;
2786: LD_VAR 0 1
2790: RET
// export function Defend ; var i , un , veh , tmp ; begin
2791: LD_INT 0
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
// defcon_wave := defcon_wave + 1 ;
2798: LD_ADDR_EXP 22
2802: PUSH
2803: LD_EXP 22
2807: PUSH
2808: LD_INT 1
2810: PLUS
2811: ST_TO_ADDR
// if not defenders then
2812: LD_EXP 20
2816: NOT
2817: IFFALSE 2823
// PrepareDefenders ;
2819: CALL 2501 0 0
// if defcon_wave > 1 then
2823: LD_EXP 22
2827: PUSH
2828: LD_INT 1
2830: GREATER
2831: IFFALSE 3089
// begin for i = 1 to defcon_wave + 2 do
2833: LD_ADDR_VAR 0 2
2837: PUSH
2838: DOUBLE
2839: LD_INT 1
2841: DEC
2842: ST_TO_ADDR
2843: LD_EXP 22
2847: PUSH
2848: LD_INT 2
2850: PLUS
2851: PUSH
2852: FOR_TO
2853: IFFALSE 2995
// begin uc_side := 1 ;
2855: LD_ADDR_OWVAR 20
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
// uc_nation := 1 ;
2863: LD_ADDR_OWVAR 21
2867: PUSH
2868: LD_INT 1
2870: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
2871: LD_INT 4
2873: PPUSH
2874: LD_INT 3
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_INT 4
2882: PUSH
2883: LD_INT 6
2885: PUSH
2886: LD_INT 7
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: PUSH
2894: LD_INT 1
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: CALL_OW 12
2904: ARRAY
2905: PPUSH
2906: LD_INT 100
2908: PPUSH
2909: CALL 39962 0 5
// veh := CreateVehicle ;
2913: LD_ADDR_VAR 0 4
2917: PUSH
2918: CALL_OW 45
2922: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2923: LD_VAR 0 4
2927: PPUSH
2928: LD_INT 1
2930: PPUSH
2931: CALL_OW 233
// defenders := defenders ^ veh ;
2935: LD_ADDR_EXP 20
2939: PUSH
2940: LD_EXP 20
2944: PUSH
2945: LD_VAR 0 4
2949: ADD
2950: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
2951: LD_INT 0
2953: PPUSH
2954: LD_INT 3
2956: PPUSH
2957: LD_INT 9
2959: PPUSH
2960: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2964: CALL_OW 44
2968: PPUSH
2969: LD_VAR 0 4
2973: PPUSH
2974: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
2978: LD_VAR 0 4
2982: PPUSH
2983: LD_INT 25
2985: PPUSH
2986: LD_INT 0
2988: PPUSH
2989: CALL_OW 49
// end ;
2993: GO 2852
2995: POP
2996: POP
// for i = 1 to defcon_wave do
2997: LD_ADDR_VAR 0 2
3001: PUSH
3002: DOUBLE
3003: LD_INT 1
3005: DEC
3006: ST_TO_ADDR
3007: LD_EXP 22
3011: PUSH
3012: FOR_TO
3013: IFFALSE 3087
// begin uc_side := 1 ;
3015: LD_ADDR_OWVAR 20
3019: PUSH
3020: LD_INT 1
3022: ST_TO_ADDR
// uc_nation := 1 ;
3023: LD_ADDR_OWVAR 21
3027: PUSH
3028: LD_INT 1
3030: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3031: LD_INT 0
3033: PPUSH
3034: LD_INT 5
3036: PPUSH
3037: LD_INT 9
3039: PPUSH
3040: CALL_OW 380
// un := CreateHuman ;
3044: LD_ADDR_VAR 0 3
3048: PUSH
3049: CALL_OW 44
3053: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3054: LD_VAR 0 3
3058: PPUSH
3059: LD_INT 25
3061: PPUSH
3062: LD_INT 0
3064: PPUSH
3065: CALL_OW 49
// defenders := defenders ^ un ;
3069: LD_ADDR_EXP 20
3073: PUSH
3074: LD_EXP 20
3078: PUSH
3079: LD_VAR 0 3
3083: ADD
3084: ST_TO_ADDR
// end ;
3085: GO 3012
3087: POP
3088: POP
// end ; repeat wait ( 0 0$1 ) ;
3089: LD_INT 35
3091: PPUSH
3092: CALL_OW 67
// for i in defenders do
3096: LD_ADDR_VAR 0 2
3100: PUSH
3101: LD_EXP 20
3105: PUSH
3106: FOR_IN
3107: IFFALSE 3189
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3109: LD_EXP 21
3113: PUSH
3114: LD_VAR 0 2
3118: PPUSH
3119: LD_EXP 21
3123: PUSH
3124: LD_INT 1
3126: ARRAY
3127: PPUSH
3128: LD_EXP 21
3132: PUSH
3133: LD_INT 2
3135: ARRAY
3136: PPUSH
3137: CALL_OW 297
3141: PUSH
3142: LD_INT 10
3144: GREATER
3145: AND
3146: PUSH
3147: LD_VAR 0 2
3151: PPUSH
3152: CALL_OW 314
3156: NOT
3157: AND
3158: IFFALSE 3187
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3160: LD_VAR 0 2
3164: PPUSH
3165: LD_EXP 21
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_EXP 21
3178: PUSH
3179: LD_INT 2
3181: ARRAY
3182: PPUSH
3183: CALL_OW 114
// end ;
3187: GO 3106
3189: POP
3190: POP
// until not defenders ;
3191: LD_EXP 20
3195: NOT
3196: IFFALSE 3089
// end ;
3198: LD_VAR 0 1
3202: RET
// every 0 0$1 do var radar , i ;
3203: GO 3205
3205: DISABLE
3206: LD_INT 0
3208: PPUSH
3209: PPUSH
// begin uc_side := 1 ;
3210: LD_ADDR_OWVAR 20
3214: PUSH
3215: LD_INT 1
3217: ST_TO_ADDR
// uc_nation := 1 ;
3218: LD_ADDR_OWVAR 21
3222: PUSH
3223: LD_INT 1
3225: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3226: LD_INT 1
3228: PPUSH
3229: LD_INT 2
3231: PPUSH
3232: LD_INT 3
3234: PPUSH
3235: LD_INT 11
3237: PPUSH
3238: LD_INT 100
3240: PPUSH
3241: CALL 39962 0 5
// radar := CreateVehicle ;
3245: LD_ADDR_VAR 0 1
3249: PUSH
3250: CALL_OW 45
3254: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3255: LD_VAR 0 1
3259: PPUSH
3260: LD_INT 4
3262: PPUSH
3263: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3267: LD_VAR 0 1
3271: PPUSH
3272: LD_INT 51
3274: PPUSH
3275: LD_INT 45
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3285: LD_VAR 0 1
3289: PPUSH
3290: LD_INT 700
3292: PPUSH
3293: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3297: LD_VAR 0 1
3301: PPUSH
3302: LD_INT 65
3304: PPUSH
3305: LD_INT 75
3307: PPUSH
3308: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3312: LD_VAR 0 1
3316: PPUSH
3317: LD_INT 350
3319: PPUSH
3320: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3324: LD_VAR 0 1
3328: PPUSH
3329: LD_INT 83
3331: PPUSH
3332: LD_INT 87
3334: PPUSH
3335: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3339: LD_VAR 0 1
3343: PPUSH
3344: LD_INT 525
3346: PPUSH
3347: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3351: LD_VAR 0 1
3355: PPUSH
3356: LD_INT 94
3358: PPUSH
3359: LD_INT 81
3361: PPUSH
3362: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3366: LD_VAR 0 1
3370: PPUSH
3371: LD_INT 350
3373: PPUSH
3374: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3378: LD_VAR 0 1
3382: PPUSH
3383: LD_INT 55
3385: PPUSH
3386: LD_INT 48
3388: PPUSH
3389: CALL_OW 171
// wait ( 1 1$00 ) ;
3393: LD_INT 2100
3395: PPUSH
3396: CALL_OW 67
// until not IsOk ( radar ) ;
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 302
3409: NOT
3410: IFFALSE 3285
// end ;
3412: PPOPN 2
3414: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3415: LD_OWVAR 67
3419: PUSH
3420: LD_INT 1
3422: GREATER
3423: PUSH
3424: LD_EXP 11
3428: AND
3429: IFFALSE 3651
3431: GO 3433
3433: DISABLE
3434: LD_INT 0
3436: PPUSH
// begin enable ;
3437: ENABLE
// uc_side := 1 ;
3438: LD_ADDR_OWVAR 20
3442: PUSH
3443: LD_INT 1
3445: ST_TO_ADDR
// uc_nation := 1 ;
3446: LD_ADDR_OWVAR 21
3450: PUSH
3451: LD_INT 1
3453: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3454: LD_INT 5
3456: PPUSH
3457: LD_INT 3
3459: PPUSH
3460: LD_INT 3
3462: PPUSH
3463: LD_INT 4
3465: PPUSH
3466: LD_INT 100
3468: PPUSH
3469: CALL 39962 0 5
// un := CreateVehicle ;
3473: LD_ADDR_VAR 0 1
3477: PUSH
3478: CALL_OW 45
3482: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3483: LD_VAR 0 1
3487: PPUSH
3488: LD_INT 3
3490: PPUSH
3491: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3495: LD_VAR 0 1
3499: PPUSH
3500: LD_INT 155
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 0
3508: PPUSH
3509: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3513: LD_VAR 0 1
3517: PPUSH
3518: LD_INT 169
3520: PPUSH
3521: LD_INT 77
3523: PPUSH
3524: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_INT 70
3535: PPUSH
3536: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3540: LD_VAR 0 1
3544: PPUSH
3545: LD_INT 134
3547: PPUSH
3548: LD_INT 62
3550: PPUSH
3551: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_INT 103
3562: PPUSH
3563: LD_INT 42
3565: PPUSH
3566: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: LD_INT 70
3577: PPUSH
3578: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3582: LD_VAR 0 1
3586: PPUSH
3587: LD_INT 84
3589: PPUSH
3590: LD_INT 2
3592: PPUSH
3593: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3597: LD_INT 35
3599: PPUSH
3600: CALL_OW 67
// if IsDead ( un ) then
3604: LD_VAR 0 1
3608: PPUSH
3609: CALL_OW 301
3613: IFFALSE 3625
// begin extra_patrol := false ;
3615: LD_ADDR_EXP 11
3619: PUSH
3620: LD_INT 0
3622: ST_TO_ADDR
// exit ;
3623: GO 3651
// end ; until IsAt ( un , 84 , 2 ) ;
3625: LD_VAR 0 1
3629: PPUSH
3630: LD_INT 84
3632: PPUSH
3633: LD_INT 2
3635: PPUSH
3636: CALL_OW 307
3640: IFFALSE 3597
// RemoveUnit ( un ) ;
3642: LD_VAR 0 1
3646: PPUSH
3647: CALL_OW 64
// end ; end_of_file
3651: PPOPN 1
3653: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl ; begin
3654: LD_INT 0
3656: PPUSH
3657: PPUSH
3658: PPUSH
3659: PPUSH
3660: PPUSH
3661: PPUSH
3662: PPUSH
// uc_side := 4 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 4
3670: ST_TO_ADDR
// uc_nation := 1 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 1
3678: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3679: LD_ADDR_EXP 37
3683: PUSH
3684: LD_STRING DeltaDoctor
3686: PPUSH
3687: LD_EXP 1
3691: NOT
3692: PPUSH
3693: LD_STRING 10c_
3695: PPUSH
3696: CALL 34947 0 3
3700: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3701: LD_ADDR_EXP 36
3705: PUSH
3706: LD_STRING Joan
3708: PPUSH
3709: LD_EXP 1
3713: NOT
3714: PPUSH
3715: LD_STRING 10c_
3717: PPUSH
3718: CALL 34947 0 3
3722: ST_TO_ADDR
// if Joan then
3723: LD_EXP 36
3727: IFFALSE 3758
// friends := Insert ( friends , friends + 1 , Joan ) ;
3729: LD_ADDR_EXP 4
3733: PUSH
3734: LD_EXP 4
3738: PPUSH
3739: LD_EXP 4
3743: PUSH
3744: LD_INT 1
3746: PLUS
3747: PPUSH
3748: LD_EXP 36
3752: PPUSH
3753: CALL_OW 2
3757: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3758: LD_ADDR_EXP 35
3762: PUSH
3763: LD_STRING Simms
3765: PPUSH
3766: LD_EXP 1
3770: NOT
3771: PPUSH
3772: LD_STRING 10c_
3774: PPUSH
3775: CALL 34947 0 3
3779: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3780: LD_ADDR_EXP 34
3784: PUSH
3785: LD_STRING Kikuchi
3787: PPUSH
3788: LD_EXP 1
3792: NOT
3793: PPUSH
3794: LD_STRING 11_
3796: PPUSH
3797: CALL 34947 0 3
3801: ST_TO_ADDR
// if Kikuchi then
3802: LD_EXP 34
3806: IFFALSE 3837
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3808: LD_ADDR_EXP 4
3812: PUSH
3813: LD_EXP 4
3817: PPUSH
3818: LD_EXP 4
3822: PUSH
3823: LD_INT 1
3825: PLUS
3826: PPUSH
3827: LD_EXP 34
3831: PPUSH
3832: CALL_OW 2
3836: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
3837: LD_ADDR_EXP 33
3841: PUSH
3842: LD_STRING Frank
3844: PPUSH
3845: LD_EXP 1
3849: NOT
3850: PPUSH
3851: LD_STRING 11_
3853: PPUSH
3854: CALL 34947 0 3
3858: ST_TO_ADDR
// if Frank then
3859: LD_EXP 33
3863: IFFALSE 3894
// friends := Insert ( friends , friends + 1 , Frank ) ;
3865: LD_ADDR_EXP 4
3869: PUSH
3870: LD_EXP 4
3874: PPUSH
3875: LD_EXP 4
3879: PUSH
3880: LD_INT 1
3882: PLUS
3883: PPUSH
3884: LD_EXP 33
3888: PPUSH
3889: CALL_OW 2
3893: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
3894: LD_ADDR_EXP 32
3898: PUSH
3899: LD_STRING Gary
3901: PPUSH
3902: LD_EXP 1
3906: NOT
3907: PPUSH
3908: LD_STRING 11_
3910: PPUSH
3911: CALL 34947 0 3
3915: ST_TO_ADDR
// if Gary then
3916: LD_EXP 32
3920: IFFALSE 3951
// friends := Insert ( friends , friends + 1 , Gary ) ;
3922: LD_ADDR_EXP 4
3926: PUSH
3927: LD_EXP 4
3931: PPUSH
3932: LD_EXP 4
3936: PUSH
3937: LD_INT 1
3939: PLUS
3940: PPUSH
3941: LD_EXP 32
3945: PPUSH
3946: CALL_OW 2
3950: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
3951: LD_ADDR_EXP 31
3955: PUSH
3956: LD_STRING Cornell
3958: PPUSH
3959: LD_EXP 1
3963: NOT
3964: PPUSH
3965: LD_STRING 11_
3967: PPUSH
3968: CALL 34947 0 3
3972: ST_TO_ADDR
// if Cornel then
3973: LD_EXP 31
3977: IFFALSE 4008
// friends := Insert ( friends , friends + 1 , Cornel ) ;
3979: LD_ADDR_EXP 4
3983: PUSH
3984: LD_EXP 4
3988: PPUSH
3989: LD_EXP 4
3993: PUSH
3994: LD_INT 1
3996: PLUS
3997: PPUSH
3998: LD_EXP 31
4002: PPUSH
4003: CALL_OW 2
4007: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4008: LD_ADDR_EXP 30
4012: PUSH
4013: LD_STRING Houten
4015: PPUSH
4016: LD_EXP 1
4020: NOT
4021: PPUSH
4022: LD_STRING 11_
4024: PPUSH
4025: CALL 34947 0 3
4029: ST_TO_ADDR
// if Houten then
4030: LD_EXP 30
4034: IFFALSE 4065
// friends := Insert ( friends , friends + 1 , Houten ) ;
4036: LD_ADDR_EXP 4
4040: PUSH
4041: LD_EXP 4
4045: PPUSH
4046: LD_EXP 4
4050: PUSH
4051: LD_INT 1
4053: PLUS
4054: PPUSH
4055: LD_EXP 30
4059: PPUSH
4060: CALL_OW 2
4064: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4065: LD_ADDR_EXP 29
4069: PUSH
4070: LD_STRING Gladstone
4072: PPUSH
4073: LD_EXP 1
4077: NOT
4078: PPUSH
4079: LD_STRING 11_
4081: PPUSH
4082: CALL 34947 0 3
4086: ST_TO_ADDR
// if Gladstone then
4087: LD_EXP 29
4091: IFFALSE 4122
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4093: LD_ADDR_EXP 4
4097: PUSH
4098: LD_EXP 4
4102: PPUSH
4103: LD_EXP 4
4107: PUSH
4108: LD_INT 1
4110: PLUS
4111: PPUSH
4112: LD_EXP 29
4116: PPUSH
4117: CALL_OW 2
4121: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4122: LD_ADDR_EXP 23
4126: PUSH
4127: LD_STRING Lisa
4129: PPUSH
4130: LD_EXP 1
4134: NOT
4135: PPUSH
4136: LD_STRING 11_
4138: PPUSH
4139: CALL 34947 0 3
4143: ST_TO_ADDR
// if Lisa then
4144: LD_EXP 23
4148: IFFALSE 4173
// friends := Insert ( friends , 1 , Lisa ) ;
4150: LD_ADDR_EXP 4
4154: PUSH
4155: LD_EXP 4
4159: PPUSH
4160: LD_INT 1
4162: PPUSH
4163: LD_EXP 23
4167: PPUSH
4168: CALL_OW 2
4172: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4173: LD_ADDR_EXP 24
4177: PUSH
4178: LD_STRING Donaldson
4180: PPUSH
4181: LD_EXP 1
4185: NOT
4186: PPUSH
4187: LD_STRING 11_
4189: PPUSH
4190: CALL 34947 0 3
4194: ST_TO_ADDR
// if Donaldson then
4195: LD_EXP 24
4199: IFFALSE 4230
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4201: LD_ADDR_EXP 4
4205: PUSH
4206: LD_EXP 4
4210: PPUSH
4211: LD_EXP 4
4215: PUSH
4216: LD_INT 1
4218: PLUS
4219: PPUSH
4220: LD_EXP 24
4224: PPUSH
4225: CALL_OW 2
4229: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4230: LD_ADDR_EXP 25
4234: PUSH
4235: LD_STRING Bobby
4237: PPUSH
4238: LD_EXP 1
4242: NOT
4243: PPUSH
4244: LD_STRING 11_
4246: PPUSH
4247: CALL 34947 0 3
4251: ST_TO_ADDR
// if Bobby then
4252: LD_EXP 25
4256: IFFALSE 4287
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4258: LD_ADDR_EXP 4
4262: PUSH
4263: LD_EXP 4
4267: PPUSH
4268: LD_EXP 4
4272: PUSH
4273: LD_INT 1
4275: PLUS
4276: PPUSH
4277: LD_EXP 25
4281: PPUSH
4282: CALL_OW 2
4286: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4287: LD_ADDR_EXP 26
4291: PUSH
4292: LD_STRING Cyrus
4294: PPUSH
4295: LD_EXP 1
4299: NOT
4300: PPUSH
4301: LD_STRING 11_
4303: PPUSH
4304: CALL 34947 0 3
4308: ST_TO_ADDR
// if Cyrus then
4309: LD_EXP 26
4313: IFFALSE 4344
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4315: LD_ADDR_EXP 4
4319: PUSH
4320: LD_EXP 4
4324: PPUSH
4325: LD_EXP 4
4329: PUSH
4330: LD_INT 1
4332: PLUS
4333: PPUSH
4334: LD_EXP 26
4338: PPUSH
4339: CALL_OW 2
4343: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4344: LD_ADDR_EXP 27
4348: PUSH
4349: LD_STRING Denis
4351: PPUSH
4352: LD_EXP 1
4356: NOT
4357: PPUSH
4358: LD_STRING 11_
4360: PPUSH
4361: CALL 34947 0 3
4365: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4366: LD_ADDR_EXP 28
4370: PUSH
4371: LD_STRING Brown
4373: PPUSH
4374: LD_EXP 1
4378: NOT
4379: PPUSH
4380: LD_STRING 11_
4382: PPUSH
4383: CALL 34947 0 3
4387: ST_TO_ADDR
// if Brown then
4388: LD_EXP 28
4392: IFFALSE 4423
// friends := Insert ( friends , friends + 1 , Brown ) ;
4394: LD_ADDR_EXP 4
4398: PUSH
4399: LD_EXP 4
4403: PPUSH
4404: LD_EXP 4
4408: PUSH
4409: LD_INT 1
4411: PLUS
4412: PPUSH
4413: LD_EXP 28
4417: PPUSH
4418: CALL_OW 2
4422: ST_TO_ADDR
// friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4423: LD_ADDR_EXP 4
4427: PUSH
4428: LD_EXP 4
4432: PUSH
4433: LD_STRING 11c_others
4435: PPUSH
4436: CALL_OW 31
4440: ADD
4441: PUSH
4442: LD_STRING 11_others
4444: PPUSH
4445: CALL_OW 31
4449: ADD
4450: ST_TO_ADDR
// if friends < 18 then
4451: LD_EXP 4
4455: PUSH
4456: LD_INT 18
4458: LESS
4459: IFFALSE 4531
// for i = 1 to 18 do
4461: LD_ADDR_VAR 0 2
4465: PUSH
4466: DOUBLE
4467: LD_INT 1
4469: DEC
4470: ST_TO_ADDR
4471: LD_INT 18
4473: PUSH
4474: FOR_TO
4475: IFFALSE 4529
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4477: LD_INT 0
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: LD_INT 4
4485: PPUSH
4486: CALL_OW 12
4490: PPUSH
4491: LD_INT 7
4493: PPUSH
4494: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4498: LD_ADDR_EXP 4
4502: PUSH
4503: LD_EXP 4
4507: PPUSH
4508: LD_EXP 4
4512: PUSH
4513: LD_INT 1
4515: PLUS
4516: PPUSH
4517: CALL_OW 44
4521: PPUSH
4522: CALL_OW 2
4526: ST_TO_ADDR
// end ;
4527: GO 4474
4529: POP
4530: POP
// for i in friends do
4531: LD_ADDR_VAR 0 2
4535: PUSH
4536: LD_EXP 4
4540: PUSH
4541: FOR_IN
4542: IFFALSE 4600
// if GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4544: LD_VAR 0 2
4548: PPUSH
4549: LD_INT 1
4551: PPUSH
4552: CALL_OW 259
4556: PUSH
4557: LD_VAR 0 2
4561: PPUSH
4562: LD_INT 4
4564: PPUSH
4565: CALL_OW 259
4569: GREATEREQUAL
4570: IFFALSE 4586
// SetClass ( i , class_soldier ) else
4572: LD_VAR 0 2
4576: PPUSH
4577: LD_INT 1
4579: PPUSH
4580: CALL_OW 336
4584: GO 4598
// SetClass ( i , class_scientistic ) ;
4586: LD_VAR 0 2
4590: PPUSH
4591: LD_INT 4
4593: PPUSH
4594: CALL_OW 336
4598: GO 4541
4600: POP
4601: POP
// if Frank then
4602: LD_EXP 33
4606: IFFALSE 4620
// SetClass ( Frank , class_sniper ) ;
4608: LD_EXP 33
4612: PPUSH
4613: LD_INT 5
4615: PPUSH
4616: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4620: LD_EXP 36
4624: PUSH
4625: LD_EXP 27
4629: PUSH
4630: LD_EXP 37
4634: PUSH
4635: LD_EXP 35
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: PPUSH
4646: LD_INT 4
4648: PPUSH
4649: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4653: LD_ADDR_EXP 3
4657: PUSH
4658: LD_STRING 
4660: PPUSH
4661: LD_INT 7
4663: PPUSH
4664: LD_INT 7
4666: PPUSH
4667: LD_INT -6
4669: PUSH
4670: LD_EXP 14
4674: PUSH
4675: LD_EXP 15
4679: PUSH
4680: LD_EXP 35
4684: PUSH
4685: LD_EXP 27
4689: PUSH
4690: LD_EXP 37
4694: PUSH
4695: LD_INT -2
4697: PUSH
4698: LD_INT -3
4700: PUSH
4701: LD_INT -5
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: PUSH
4715: LD_EXP 4
4719: ADD
4720: PPUSH
4721: LD_INT 1
4723: PUSH
4724: LD_INT 4
4726: PUSH
4727: LD_INT 2
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: LD_INT 5
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: LIST
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: LIST
4752: PPUSH
4753: CALL_OW 42
4757: ST_TO_ADDR
// if Simms then
4758: LD_EXP 35
4762: IFFALSE 4780
// selected := selected ^ Simms ;
4764: LD_ADDR_EXP 3
4768: PUSH
4769: LD_EXP 3
4773: PUSH
4774: LD_EXP 35
4778: ADD
4779: ST_TO_ADDR
// if Denis then
4780: LD_EXP 27
4784: IFFALSE 4802
// selected := selected ^ Denis ;
4786: LD_ADDR_EXP 3
4790: PUSH
4791: LD_EXP 3
4795: PUSH
4796: LD_EXP 27
4800: ADD
4801: ST_TO_ADDR
// if DeltaDoctor then
4802: LD_EXP 37
4806: IFFALSE 4824
// selected := selected ^ DeltaDoctor ;
4808: LD_ADDR_EXP 3
4812: PUSH
4813: LD_EXP 3
4817: PUSH
4818: LD_EXP 37
4822: ADD
4823: ST_TO_ADDR
// friends := friends diff selected ;
4824: LD_ADDR_EXP 4
4828: PUSH
4829: LD_EXP 4
4833: PUSH
4834: LD_EXP 3
4838: DIFF
4839: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
4840: LD_ADDR_VAR 0 4
4844: PUSH
4845: LD_INT 111
4847: PUSH
4848: LD_INT 137
4850: PUSH
4851: LD_INT 51
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 147
4861: PUSH
4862: LD_INT 129
4864: PUSH
4865: LD_INT 25
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
4877: LD_ADDR_VAR 0 5
4881: PUSH
4882: LD_INT 5
4884: PUSH
4885: LD_INT 6
4887: PUSH
4888: LD_INT 7
4890: PUSH
4891: LD_INT 8
4893: PUSH
4894: LD_INT 17
4896: PUSH
4897: LD_INT 18
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: ST_TO_ADDR
// for i in buildings do
4908: LD_ADDR_VAR 0 2
4912: PUSH
4913: LD_VAR 0 4
4917: PUSH
4918: FOR_IN
4919: IFFALSE 4935
// SetSide ( i , 4 ) ;
4921: LD_VAR 0 2
4925: PPUSH
4926: LD_INT 4
4928: PPUSH
4929: CALL_OW 235
4933: GO 4918
4935: POP
4936: POP
// for i in selected do
4937: LD_ADDR_VAR 0 2
4941: PUSH
4942: LD_EXP 3
4946: PUSH
4947: FOR_IN
4948: IFFALSE 5288
// begin if GetClass ( i ) in [ 1 , 5 ] then
4950: LD_VAR 0 2
4954: PPUSH
4955: CALL_OW 257
4959: PUSH
4960: LD_INT 1
4962: PUSH
4963: LD_INT 5
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: IN
4970: IFFALSE 5130
// begin if buildings [ 1 ] then
4972: LD_VAR 0 4
4976: PUSH
4977: LD_INT 1
4979: ARRAY
4980: IFFALSE 5041
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
4982: LD_VAR 0 2
4986: PPUSH
4987: LD_VAR 0 4
4991: PUSH
4992: LD_INT 1
4994: ARRAY
4995: PUSH
4996: LD_INT 1
4998: ARRAY
4999: PPUSH
5000: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5004: LD_ADDR_VAR 0 4
5008: PUSH
5009: LD_VAR 0 4
5013: PPUSH
5014: LD_INT 1
5016: PPUSH
5017: LD_VAR 0 4
5021: PUSH
5022: LD_INT 1
5024: ARRAY
5025: PPUSH
5026: LD_INT 1
5028: PPUSH
5029: CALL_OW 3
5033: PPUSH
5034: CALL_OW 1
5038: ST_TO_ADDR
// end else
5039: GO 5128
// begin if not areas then
5041: LD_VAR 0 5
5045: NOT
5046: IFFALSE 5080
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5048: LD_VAR 0 2
5052: PPUSH
5053: LD_INT 87
5055: PPUSH
5056: LD_INT 68
5058: PPUSH
5059: LD_INT 8
5061: PPUSH
5062: LD_INT 0
5064: PPUSH
5065: CALL_OW 50
// ComHold ( i ) ;
5069: LD_VAR 0 2
5073: PPUSH
5074: CALL_OW 140
// end else
5078: GO 5128
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5080: LD_VAR 0 2
5084: PPUSH
5085: LD_VAR 0 5
5089: PUSH
5090: LD_INT 1
5092: ARRAY
5093: PPUSH
5094: LD_INT 0
5096: PPUSH
5097: CALL_OW 49
// ComHold ( i ) ;
5101: LD_VAR 0 2
5105: PPUSH
5106: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5110: LD_ADDR_VAR 0 5
5114: PUSH
5115: LD_VAR 0 5
5119: PPUSH
5120: LD_INT 1
5122: PPUSH
5123: CALL_OW 3
5127: ST_TO_ADDR
// end ; end ; end else
5128: GO 5286
// begin if buildings [ 2 ] then
5130: LD_VAR 0 4
5134: PUSH
5135: LD_INT 2
5137: ARRAY
5138: IFFALSE 5199
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5140: LD_VAR 0 2
5144: PPUSH
5145: LD_VAR 0 4
5149: PUSH
5150: LD_INT 2
5152: ARRAY
5153: PUSH
5154: LD_INT 1
5156: ARRAY
5157: PPUSH
5158: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5162: LD_ADDR_VAR 0 4
5166: PUSH
5167: LD_VAR 0 4
5171: PPUSH
5172: LD_INT 2
5174: PPUSH
5175: LD_VAR 0 4
5179: PUSH
5180: LD_INT 2
5182: ARRAY
5183: PPUSH
5184: LD_INT 1
5186: PPUSH
5187: CALL_OW 3
5191: PPUSH
5192: CALL_OW 1
5196: ST_TO_ADDR
// end else
5197: GO 5286
// begin if not areas then
5199: LD_VAR 0 5
5203: NOT
5204: IFFALSE 5238
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5206: LD_VAR 0 2
5210: PPUSH
5211: LD_INT 87
5213: PPUSH
5214: LD_INT 68
5216: PPUSH
5217: LD_INT 8
5219: PPUSH
5220: LD_INT 0
5222: PPUSH
5223: CALL_OW 50
// ComHold ( i ) ;
5227: LD_VAR 0 2
5231: PPUSH
5232: CALL_OW 140
// end else
5236: GO 5286
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5238: LD_VAR 0 2
5242: PPUSH
5243: LD_VAR 0 5
5247: PUSH
5248: LD_INT 1
5250: ARRAY
5251: PPUSH
5252: LD_INT 0
5254: PPUSH
5255: CALL_OW 49
// ComHold ( i ) ;
5259: LD_VAR 0 2
5263: PPUSH
5264: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5268: LD_ADDR_VAR 0 5
5272: PUSH
5273: LD_VAR 0 5
5277: PPUSH
5278: LD_INT 1
5280: PPUSH
5281: CALL_OW 3
5285: ST_TO_ADDR
// end ; end ; end ; end ;
5286: GO 4947
5288: POP
5289: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5290: LD_ADDR_VAR 0 6
5294: PUSH
5295: LD_INT 22
5297: PUSH
5298: LD_INT 1
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: PUSH
5305: LD_INT 30
5307: PUSH
5308: LD_INT 32
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PPUSH
5319: CALL_OW 69
5323: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5324: LD_ADDR_VAR 0 2
5328: PUSH
5329: DOUBLE
5330: LD_VAR 0 6
5334: PUSH
5335: LD_EXP 4
5339: MINUS
5340: INC
5341: ST_TO_ADDR
5342: LD_INT 1
5344: PUSH
5345: FOR_DOWNTO
5346: IFFALSE 5413
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5348: LD_INT 0
5350: PPUSH
5351: LD_INT 1
5353: PPUSH
5354: LD_INT 7
5356: PUSH
5357: LD_INT 8
5359: PUSH
5360: LD_INT 9
5362: PUSH
5363: LD_INT 10
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: PUSH
5372: LD_OWVAR 67
5376: ARRAY
5377: PPUSH
5378: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5382: LD_ADDR_EXP 4
5386: PUSH
5387: LD_EXP 4
5391: PPUSH
5392: LD_EXP 4
5396: PUSH
5397: LD_INT 1
5399: PLUS
5400: PPUSH
5401: CALL_OW 44
5405: PPUSH
5406: CALL_OW 2
5410: ST_TO_ADDR
// end ;
5411: GO 5345
5413: POP
5414: POP
// if friends then
5415: LD_EXP 4
5419: IFFALSE 5535
// begin tmp := friends ;
5421: LD_ADDR_VAR 0 3
5425: PUSH
5426: LD_EXP 4
5430: ST_TO_ADDR
// for i = 1 to bunkers do
5431: LD_ADDR_VAR 0 2
5435: PUSH
5436: DOUBLE
5437: LD_INT 1
5439: DEC
5440: ST_TO_ADDR
5441: LD_VAR 0 6
5445: PUSH
5446: FOR_TO
5447: IFFALSE 5533
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5449: LD_VAR 0 3
5453: PUSH
5454: LD_VAR 0 3
5458: ARRAY
5459: PPUSH
5460: LD_INT 1
5462: PPUSH
5463: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5467: LD_VAR 0 3
5471: PUSH
5472: LD_VAR 0 3
5476: ARRAY
5477: PPUSH
5478: LD_INT 1
5480: PPUSH
5481: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5485: LD_VAR 0 3
5489: PUSH
5490: LD_VAR 0 3
5494: ARRAY
5495: PPUSH
5496: LD_VAR 0 6
5500: PUSH
5501: LD_VAR 0 2
5505: ARRAY
5506: PPUSH
5507: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5511: LD_ADDR_VAR 0 3
5515: PUSH
5516: LD_VAR 0 3
5520: PPUSH
5521: LD_VAR 0 3
5525: PPUSH
5526: CALL_OW 3
5530: ST_TO_ADDR
// end ;
5531: GO 5446
5533: POP
5534: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5535: LD_ADDR_VAR 0 5
5539: PUSH
5540: LD_VAR 0 5
5544: PUSH
5545: LD_INT 9
5547: PUSH
5548: LD_INT 10
5550: PUSH
5551: LD_INT 11
5553: PUSH
5554: LD_INT 12
5556: PUSH
5557: LD_INT 13
5559: PUSH
5560: LD_INT 14
5562: PUSH
5563: LD_INT 15
5565: PUSH
5566: LD_INT 16
5568: PUSH
5569: LD_INT 26
5571: PUSH
5572: LD_INT 27
5574: PUSH
5575: LD_INT 28
5577: PUSH
5578: LD_INT 29
5580: PUSH
5581: LD_INT 30
5583: PUSH
5584: LD_INT 31
5586: PUSH
5587: LD_INT 32
5589: PUSH
5590: LD_INT 33
5592: PUSH
5593: LD_INT 34
5595: PUSH
5596: LD_INT 35
5598: PUSH
5599: LD_INT 36
5601: PUSH
5602: LD_INT 37
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: UNION
5627: ST_TO_ADDR
// for i in friends do
5628: LD_ADDR_VAR 0 2
5632: PUSH
5633: LD_EXP 4
5637: PUSH
5638: FOR_IN
5639: IFFALSE 5926
// begin SetTag ( i , 2 ) ;
5641: LD_VAR 0 2
5645: PPUSH
5646: LD_INT 2
5648: PPUSH
5649: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_scientistic , class_sniper ] then
5653: LD_VAR 0 2
5657: PPUSH
5658: CALL_OW 257
5662: PUSH
5663: LD_INT 1
5665: PUSH
5666: LD_INT 4
5668: PUSH
5669: LD_INT 5
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: LIST
5676: IN
5677: NOT
5678: IFFALSE 5692
// SetClass ( i , 1 ) ;
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_INT 1
5687: PPUSH
5688: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
5692: LD_VAR 0 2
5696: PPUSH
5697: CALL_OW 257
5701: PUSH
5702: LD_INT 1
5704: PUSH
5705: LD_INT 5
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: IN
5712: PUSH
5713: LD_VAR 0 4
5717: PUSH
5718: LD_INT 1
5720: ARRAY
5721: AND
5722: IFFALSE 5783
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5724: LD_VAR 0 2
5728: PPUSH
5729: LD_VAR 0 4
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PUSH
5738: LD_INT 1
5740: ARRAY
5741: PPUSH
5742: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5746: LD_ADDR_VAR 0 4
5750: PUSH
5751: LD_VAR 0 4
5755: PPUSH
5756: LD_INT 1
5758: PPUSH
5759: LD_VAR 0 4
5763: PUSH
5764: LD_INT 1
5766: ARRAY
5767: PPUSH
5768: LD_INT 1
5770: PPUSH
5771: CALL_OW 3
5775: PPUSH
5776: CALL_OW 1
5780: ST_TO_ADDR
// continue ;
5781: GO 5638
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
5783: LD_VAR 0 2
5787: PPUSH
5788: CALL_OW 257
5792: PUSH
5793: LD_INT 4
5795: EQUAL
5796: PUSH
5797: LD_VAR 0 4
5801: PUSH
5802: LD_INT 2
5804: ARRAY
5805: AND
5806: IFFALSE 5867
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5808: LD_VAR 0 2
5812: PPUSH
5813: LD_VAR 0 4
5817: PUSH
5818: LD_INT 2
5820: ARRAY
5821: PUSH
5822: LD_INT 1
5824: ARRAY
5825: PPUSH
5826: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: LD_VAR 0 4
5839: PPUSH
5840: LD_INT 2
5842: PPUSH
5843: LD_VAR 0 4
5847: PUSH
5848: LD_INT 2
5850: ARRAY
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 3
5859: PPUSH
5860: CALL_OW 1
5864: ST_TO_ADDR
// continue ;
5865: GO 5638
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5867: LD_VAR 0 2
5871: PPUSH
5872: LD_VAR 0 5
5876: PUSH
5877: LD_INT 1
5879: ARRAY
5880: PPUSH
5881: LD_INT 0
5883: PPUSH
5884: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
5888: LD_ADDR_VAR 0 5
5892: PUSH
5893: LD_VAR 0 5
5897: PPUSH
5898: LD_INT 1
5900: PPUSH
5901: CALL_OW 3
5905: ST_TO_ADDR
// ComHold ( i ) ;
5906: LD_VAR 0 2
5910: PPUSH
5911: CALL_OW 140
// if not areas then
5915: LD_VAR 0 5
5919: NOT
5920: IFFALSE 5924
// break ;
5922: GO 5926
// end ;
5924: GO 5638
5926: POP
5927: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
5928: LD_EXP 4
5932: PPUSH
5933: LD_INT 3
5935: PUSH
5936: LD_INT 52
5938: PUSH
5939: EMPTY
5940: LIST
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PPUSH
5946: CALL_OW 72
5950: IFFALSE 6017
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_EXP 4
5961: PPUSH
5962: LD_INT 3
5964: PUSH
5965: LD_INT 52
5967: PUSH
5968: EMPTY
5969: LIST
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: PPUSH
5975: CALL_OW 72
5979: PUSH
5980: FOR_IN
5981: IFFALSE 6015
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
5983: LD_VAR 0 2
5987: PPUSH
5988: LD_INT 65
5990: PPUSH
5991: LD_INT 58
5993: PPUSH
5994: LD_INT 7
5996: PPUSH
5997: LD_INT 0
5999: PPUSH
6000: CALL_OW 50
// ComHold ( i ) ;
6004: LD_VAR 0 2
6008: PPUSH
6009: CALL_OW 140
// end ;
6013: GO 5980
6015: POP
6016: POP
// if Frank then
6017: LD_EXP 33
6021: IFFALSE 6035
// SetClass ( Frank , class_sniper ) ;
6023: LD_EXP 33
6027: PPUSH
6028: LD_INT 5
6030: PPUSH
6031: CALL_OW 336
// end ; end_of_file
6035: LD_VAR 0 1
6039: RET
// export function CanSayRand ( side ) ; begin
6040: LD_INT 0
6042: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6043: LD_ADDR_VAR 0 2
6047: PUSH
6048: LD_INT 52
6050: PUSH
6051: EMPTY
6052: LIST
6053: PUSH
6054: LD_INT 22
6056: PUSH
6057: LD_VAR 0 1
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: LD_INT 2
6068: PUSH
6069: LD_INT 25
6071: PUSH
6072: LD_INT 1
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 25
6081: PUSH
6082: LD_INT 2
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: PUSH
6089: LD_INT 25
6091: PUSH
6092: LD_INT 3
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 25
6101: PUSH
6102: LD_INT 4
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PPUSH
6121: CALL_OW 69
6125: PUSH
6126: LD_EXP 14
6130: PUSH
6131: LD_EXP 33
6135: PUSH
6136: LD_EXP 23
6140: PUSH
6141: LD_EXP 24
6145: PUSH
6146: LD_EXP 25
6150: PUSH
6151: LD_EXP 26
6155: PUSH
6156: LD_EXP 27
6160: PUSH
6161: LD_EXP 28
6165: PUSH
6166: LD_EXP 29
6170: PUSH
6171: LD_EXP 30
6175: PUSH
6176: LD_EXP 16
6180: PUSH
6181: LD_EXP 31
6185: PUSH
6186: LD_EXP 32
6190: PUSH
6191: LD_EXP 34
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: DIFF
6212: ST_TO_ADDR
// end ;
6213: LD_VAR 0 2
6217: RET
// export function SayRand ( sex , dial ) ; begin
6218: LD_INT 0
6220: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6221: LD_ADDR_VAR 0 3
6225: PUSH
6226: LD_INT 52
6228: PUSH
6229: EMPTY
6230: LIST
6231: PUSH
6232: LD_INT 22
6234: PUSH
6235: LD_INT 1
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: PUSH
6242: LD_INT 26
6244: PUSH
6245: LD_VAR 0 1
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PUSH
6254: LD_INT 2
6256: PUSH
6257: LD_INT 25
6259: PUSH
6260: LD_INT 1
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 25
6269: PUSH
6270: LD_INT 2
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: PUSH
6277: LD_INT 25
6279: PUSH
6280: LD_INT 3
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 25
6289: PUSH
6290: LD_INT 4
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: PPUSH
6310: CALL_OW 69
6314: PUSH
6315: LD_EXP 14
6319: PUSH
6320: LD_EXP 33
6324: PUSH
6325: LD_EXP 23
6329: PUSH
6330: LD_EXP 24
6334: PUSH
6335: LD_EXP 25
6339: PUSH
6340: LD_EXP 26
6344: PUSH
6345: LD_EXP 27
6349: PUSH
6350: LD_EXP 28
6354: PUSH
6355: LD_EXP 29
6359: PUSH
6360: LD_EXP 30
6364: PUSH
6365: LD_EXP 16
6369: PUSH
6370: LD_EXP 31
6374: PUSH
6375: LD_EXP 32
6379: PUSH
6380: LD_EXP 34
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: DIFF
6401: ST_TO_ADDR
// if not result then
6402: LD_VAR 0 3
6406: NOT
6407: IFFALSE 6411
// exit ;
6409: GO 6439
// result := result [ 1 ] ;
6411: LD_ADDR_VAR 0 3
6415: PUSH
6416: LD_VAR 0 3
6420: PUSH
6421: LD_INT 1
6423: ARRAY
6424: ST_TO_ADDR
// Say ( result , dial ) ;
6425: LD_VAR 0 3
6429: PPUSH
6430: LD_VAR 0 2
6434: PPUSH
6435: CALL_OW 88
// end ;
6439: LD_VAR 0 3
6443: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6444: LD_INT 0
6446: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6447: LD_ADDR_VAR 0 4
6451: PUSH
6452: LD_INT 22
6454: PUSH
6455: LD_INT 1
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: LD_INT 26
6464: PUSH
6465: LD_VAR 0 1
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: LD_INT 25
6479: PUSH
6480: LD_INT 1
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: LD_INT 25
6489: PUSH
6490: LD_INT 2
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: LD_INT 25
6499: PUSH
6500: LD_INT 3
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PUSH
6507: LD_INT 25
6509: PUSH
6510: LD_INT 4
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: LIST
6528: PPUSH
6529: CALL_OW 69
6533: PUSH
6534: LD_EXP 14
6538: PUSH
6539: LD_EXP 33
6543: PUSH
6544: LD_EXP 23
6548: PUSH
6549: LD_EXP 24
6553: PUSH
6554: LD_EXP 25
6558: PUSH
6559: LD_EXP 26
6563: PUSH
6564: LD_EXP 27
6568: PUSH
6569: LD_EXP 28
6573: PUSH
6574: LD_EXP 29
6578: PUSH
6579: LD_EXP 30
6583: PUSH
6584: LD_EXP 16
6588: PUSH
6589: LD_EXP 31
6593: PUSH
6594: LD_EXP 32
6598: PUSH
6599: LD_EXP 34
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: PUSH
6620: LD_VAR 0 3
6624: ADD
6625: DIFF
6626: ST_TO_ADDR
// if not result then
6627: LD_VAR 0 4
6631: NOT
6632: IFFALSE 6636
// exit ;
6634: GO 6664
// result := result [ 1 ] ;
6636: LD_ADDR_VAR 0 4
6640: PUSH
6641: LD_VAR 0 4
6645: PUSH
6646: LD_INT 1
6648: ARRAY
6649: ST_TO_ADDR
// Say ( result , dial ) ;
6650: LD_VAR 0 4
6654: PPUSH
6655: LD_VAR 0 2
6659: PPUSH
6660: CALL_OW 88
// end ;
6664: LD_VAR 0 4
6668: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
6669: LD_INT 0
6671: PPUSH
6672: PPUSH
6673: PPUSH
6674: PPUSH
6675: PPUSH
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
6680: PPUSH
6681: PPUSH
6682: PPUSH
6683: PPUSH
6684: PPUSH
6685: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
6686: LD_VAR 0 1
6690: NOT
6691: PUSH
6692: LD_VAR 0 2
6696: NOT
6697: OR
6698: PUSH
6699: LD_VAR 0 1
6703: PPUSH
6704: CALL_OW 247
6708: PUSH
6709: LD_INT 3
6711: EQUAL
6712: OR
6713: IFFALSE 6717
// exit ;
6715: GO 8256
// for i = path downto 1 do
6717: LD_ADDR_VAR 0 5
6721: PUSH
6722: DOUBLE
6723: LD_VAR 0 2
6727: INC
6728: ST_TO_ADDR
6729: LD_INT 1
6731: PUSH
6732: FOR_DOWNTO
6733: IFFALSE 6794
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
6735: LD_VAR 0 2
6739: PUSH
6740: LD_VAR 0 5
6744: ARRAY
6745: PUSH
6746: LD_INT 1
6748: ARRAY
6749: PPUSH
6750: LD_VAR 0 2
6754: PUSH
6755: LD_VAR 0 5
6759: ARRAY
6760: PUSH
6761: LD_INT 2
6763: ARRAY
6764: PPUSH
6765: CALL_OW 488
6769: NOT
6770: IFFALSE 6792
// path = Delete ( path , i ) ;
6772: LD_ADDR_VAR 0 2
6776: PUSH
6777: LD_VAR 0 2
6781: PPUSH
6782: LD_VAR 0 5
6786: PPUSH
6787: CALL_OW 3
6791: ST_TO_ADDR
// end ;
6792: GO 6732
6794: POP
6795: POP
// if not path then
6796: LD_VAR 0 2
6800: NOT
6801: IFFALSE 6805
// exit ;
6803: GO 8256
// tmp_path := [ ] ;
6805: LD_ADDR_VAR 0 11
6809: PUSH
6810: EMPTY
6811: ST_TO_ADDR
// if flags then
6812: LD_VAR 0 3
6816: IFFALSE 6890
// begin if flags [ 1 ] then
6818: LD_VAR 0 3
6822: PUSH
6823: LD_INT 1
6825: ARRAY
6826: IFFALSE 6842
// safe_place = flags [ 1 ] ;
6828: LD_ADDR_VAR 0 16
6832: PUSH
6833: LD_VAR 0 3
6837: PUSH
6838: LD_INT 1
6840: ARRAY
6841: ST_TO_ADDR
// if flags [ 2 ] then
6842: LD_VAR 0 3
6846: PUSH
6847: LD_INT 2
6849: ARRAY
6850: IFFALSE 6866
// spot_dist = flags [ 2 ] ;
6852: LD_ADDR_VAR 0 15
6856: PUSH
6857: LD_VAR 0 3
6861: PUSH
6862: LD_INT 2
6864: ARRAY
6865: ST_TO_ADDR
// if flags [ 3 ] then
6866: LD_VAR 0 3
6870: PUSH
6871: LD_INT 3
6873: ARRAY
6874: IFFALSE 6890
// chase_range = flags [ 3 ] ;
6876: LD_ADDR_VAR 0 17
6880: PUSH
6881: LD_VAR 0 3
6885: PUSH
6886: LD_INT 3
6888: ARRAY
6889: ST_TO_ADDR
// end ; if not chase_range then
6890: LD_VAR 0 17
6894: NOT
6895: IFFALSE 6905
// chase_range = 8 ;
6897: LD_ADDR_VAR 0 17
6901: PUSH
6902: LD_INT 8
6904: ST_TO_ADDR
// if not spot_dist then
6905: LD_VAR 0 15
6909: NOT
6910: IFFALSE 6920
// spot_dist := 8 ;
6912: LD_ADDR_VAR 0 15
6916: PUSH
6917: LD_INT 8
6919: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
6920: LD_ADDR_VAR 0 18
6924: PUSH
6925: LD_VAR 0 1
6929: PPUSH
6930: CALL_OW 247
6934: PUSH
6935: LD_INT 2
6937: EQUAL
6938: PUSH
6939: LD_VAR 0 1
6943: PPUSH
6944: CALL_OW 262
6948: PUSH
6949: LD_INT 3
6951: NONEQUAL
6952: AND
6953: ST_TO_ADDR
// status = 1 ;
6954: LD_ADDR_VAR 0 12
6958: PUSH
6959: LD_INT 1
6961: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
6962: LD_ADDR_VAR 0 11
6966: PUSH
6967: LD_INT 1
6969: PUSH
6970: LD_VAR 0 2
6974: PUSH
6975: LD_INT 1
6977: ARRAY
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6983: LD_INT 35
6985: PPUSH
6986: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
6990: LD_VAR 0 18
6994: PUSH
6995: LD_VAR 0 1
6999: PPUSH
7000: CALL_OW 261
7004: PUSH
7005: LD_INT 20
7007: LESS
7008: AND
7009: IFFALSE 7202
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7011: LD_ADDR_VAR 0 10
7015: PUSH
7016: LD_INT 22
7018: PUSH
7019: LD_VAR 0 1
7023: PPUSH
7024: CALL_OW 255
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 2
7035: PUSH
7036: LD_INT 30
7038: PUSH
7039: LD_INT 0
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: LD_INT 30
7048: PUSH
7049: LD_INT 1
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 30
7058: PUSH
7059: LD_INT 29
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 30
7068: PUSH
7069: LD_INT 3
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: ST_TO_ADDR
// if not station then
7092: LD_VAR 0 10
7096: NOT
7097: IFFALSE 7113
// begin SetFuel ( unit , 40 ) ;
7099: LD_VAR 0 1
7103: PPUSH
7104: LD_INT 40
7106: PPUSH
7107: CALL_OW 240
// continue ;
7111: GO 6983
// end ; status := 6 ;
7113: LD_ADDR_VAR 0 12
7117: PUSH
7118: LD_INT 6
7120: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7121: LD_ADDR_VAR 0 10
7125: PUSH
7126: LD_VAR 0 10
7130: PPUSH
7131: LD_VAR 0 1
7135: PPUSH
7136: CALL_OW 74
7140: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7141: LD_INT 35
7143: PPUSH
7144: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7148: LD_VAR 0 1
7152: PPUSH
7153: LD_VAR 0 10
7157: PPUSH
7158: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7162: LD_VAR 0 1
7166: PPUSH
7167: LD_VAR 0 10
7171: PPUSH
7172: CALL_OW 296
7176: PUSH
7177: LD_INT 6
7179: LESS
7180: IFFALSE 7141
// SetFuel ( unit , 100 ) ;
7182: LD_VAR 0 1
7186: PPUSH
7187: LD_INT 100
7189: PPUSH
7190: CALL_OW 240
// status := 5 ;
7194: LD_ADDR_VAR 0 12
7198: PUSH
7199: LD_INT 5
7201: ST_TO_ADDR
// end ; if status = 1 then
7202: LD_VAR 0 12
7206: PUSH
7207: LD_INT 1
7209: EQUAL
7210: IFFALSE 7586
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7212: LD_ADDR_VAR 0 13
7216: PUSH
7217: LD_INT 81
7219: PUSH
7220: LD_VAR 0 1
7224: PPUSH
7225: CALL_OW 255
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 3
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 3
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 91
7253: PUSH
7254: LD_VAR 0 1
7258: PUSH
7259: LD_VAR 0 15
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: PUSH
7269: LD_INT 101
7271: PUSH
7272: LD_INT 1
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: PPUSH
7285: CALL_OW 69
7289: ST_TO_ADDR
// for i in enemy do
7290: LD_ADDR_VAR 0 5
7294: PUSH
7295: LD_VAR 0 13
7299: PUSH
7300: FOR_IN
7301: IFFALSE 7332
// if IsInvisible ( i ) then
7303: LD_VAR 0 5
7307: PPUSH
7308: CALL_OW 571
7312: IFFALSE 7330
// enemy := enemy diff i ;
7314: LD_ADDR_VAR 0 13
7318: PUSH
7319: LD_VAR 0 13
7323: PUSH
7324: LD_VAR 0 5
7328: DIFF
7329: ST_TO_ADDR
7330: GO 7300
7332: POP
7333: POP
// if enemy then
7334: LD_VAR 0 13
7338: IFFALSE 7388
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7340: LD_VAR 0 1
7344: PPUSH
7345: LD_VAR 0 1
7349: PPUSH
7350: CALL_OW 250
7354: PPUSH
7355: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7359: LD_VAR 0 1
7363: PPUSH
7364: LD_VAR 0 1
7368: PPUSH
7369: CALL_OW 251
7373: PPUSH
7374: CALL_OW 232
// status = 2 ;
7378: LD_ADDR_VAR 0 12
7382: PUSH
7383: LD_INT 2
7385: ST_TO_ADDR
// end else
7386: GO 7586
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7388: LD_VAR 0 1
7392: PPUSH
7393: LD_VAR 0 11
7397: PUSH
7398: LD_INT 2
7400: ARRAY
7401: PUSH
7402: LD_INT 1
7404: ARRAY
7405: PPUSH
7406: LD_VAR 0 11
7410: PUSH
7411: LD_INT 2
7413: ARRAY
7414: PUSH
7415: LD_INT 2
7417: ARRAY
7418: PPUSH
7419: CALL_OW 307
7423: PUSH
7424: LD_VAR 0 1
7428: PPUSH
7429: CALL_OW 314
7433: NOT
7434: OR
7435: IFFALSE 7586
// begin wait ( 0 0$2 ) ;
7437: LD_INT 70
7439: PPUSH
7440: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7444: LD_VAR 0 11
7448: PUSH
7449: LD_INT 1
7451: ARRAY
7452: PUSH
7453: LD_INT 1
7455: PLUS
7456: PUSH
7457: LD_VAR 0 2
7461: GREATER
7462: IFFALSE 7487
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7464: LD_ADDR_VAR 0 11
7468: PUSH
7469: LD_VAR 0 11
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_INT 1
7479: PPUSH
7480: CALL_OW 1
7484: ST_TO_ADDR
7485: GO 7518
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7487: LD_ADDR_VAR 0 11
7491: PUSH
7492: LD_VAR 0 11
7496: PPUSH
7497: LD_INT 1
7499: PPUSH
7500: LD_VAR 0 11
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PUSH
7509: LD_INT 1
7511: PLUS
7512: PPUSH
7513: CALL_OW 1
7517: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7518: LD_ADDR_VAR 0 11
7522: PUSH
7523: LD_VAR 0 11
7527: PPUSH
7528: LD_INT 2
7530: PPUSH
7531: LD_VAR 0 2
7535: PUSH
7536: LD_VAR 0 11
7540: PUSH
7541: LD_INT 1
7543: ARRAY
7544: ARRAY
7545: PPUSH
7546: CALL_OW 1
7550: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7551: LD_VAR 0 1
7555: PPUSH
7556: LD_VAR 0 11
7560: PUSH
7561: LD_INT 2
7563: ARRAY
7564: PUSH
7565: LD_INT 1
7567: ARRAY
7568: PPUSH
7569: LD_VAR 0 11
7573: PUSH
7574: LD_INT 2
7576: ARRAY
7577: PUSH
7578: LD_INT 2
7580: ARRAY
7581: PPUSH
7582: CALL_OW 114
// end ; end ; end ; if status = 2 then
7586: LD_VAR 0 12
7590: PUSH
7591: LD_INT 2
7593: EQUAL
7594: IFFALSE 7815
// begin if GetLives ( unit ) < 650 and safe_place then
7596: LD_VAR 0 1
7600: PPUSH
7601: CALL_OW 256
7605: PUSH
7606: LD_INT 650
7608: LESS
7609: PUSH
7610: LD_VAR 0 16
7614: AND
7615: IFFALSE 7627
// begin status = 3 ;
7617: LD_ADDR_VAR 0 12
7621: PUSH
7622: LD_INT 3
7624: ST_TO_ADDR
// continue ;
7625: GO 6983
// end ; x := GetRememberedX ( unit ) ;
7627: LD_ADDR_VAR 0 6
7631: PUSH
7632: LD_VAR 0 1
7636: PPUSH
7637: CALL_OW 252
7641: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7642: LD_ADDR_VAR 0 7
7646: PUSH
7647: LD_VAR 0 1
7651: PPUSH
7652: CALL_OW 253
7656: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
7657: LD_ADDR_VAR 0 13
7661: PUSH
7662: LD_INT 81
7664: PUSH
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 255
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PUSH
7679: LD_INT 92
7681: PUSH
7682: LD_VAR 0 6
7686: PUSH
7687: LD_VAR 0 7
7691: PUSH
7692: LD_VAR 0 15
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_INT 101
7705: PUSH
7706: LD_INT 1
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: LIST
7717: PPUSH
7718: CALL_OW 69
7722: ST_TO_ADDR
// if enemy then
7723: LD_VAR 0 13
7727: IFFALSE 7798
// begin e := NearestUnitToUnit ( enemy , unit ) ;
7729: LD_ADDR_VAR 0 14
7733: PUSH
7734: LD_VAR 0 13
7738: PPUSH
7739: LD_VAR 0 1
7743: PPUSH
7744: CALL_OW 74
7748: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
7749: LD_VAR 0 14
7753: PPUSH
7754: LD_VAR 0 6
7758: PPUSH
7759: LD_VAR 0 7
7763: PPUSH
7764: CALL_OW 297
7768: PUSH
7769: LD_VAR 0 15
7773: PUSH
7774: LD_VAR 0 17
7778: PLUS
7779: LESS
7780: IFFALSE 7796
// ComAttackUnit ( unit , e ) ;
7782: LD_VAR 0 1
7786: PPUSH
7787: LD_VAR 0 14
7791: PPUSH
7792: CALL_OW 115
// end else
7796: GO 7815
// begin ComStop ( unit ) ;
7798: LD_VAR 0 1
7802: PPUSH
7803: CALL_OW 141
// status = 5 ;
7807: LD_ADDR_VAR 0 12
7811: PUSH
7812: LD_INT 5
7814: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
7815: LD_VAR 0 12
7819: PUSH
7820: LD_INT 3
7822: EQUAL
7823: PUSH
7824: LD_VAR 0 16
7828: AND
7829: IFFALSE 7915
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
7831: LD_VAR 0 1
7835: PPUSH
7836: LD_VAR 0 16
7840: PUSH
7841: LD_INT 1
7843: ARRAY
7844: PPUSH
7845: LD_VAR 0 16
7849: PUSH
7850: LD_INT 2
7852: ARRAY
7853: PPUSH
7854: CALL_OW 111
// wait ( 0 0$1 ) ;
7858: LD_INT 35
7860: PPUSH
7861: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
7865: LD_VAR 0 1
7869: PPUSH
7870: LD_VAR 0 16
7874: PUSH
7875: LD_INT 1
7877: ARRAY
7878: PPUSH
7879: LD_VAR 0 16
7883: PUSH
7884: LD_INT 2
7886: ARRAY
7887: PPUSH
7888: CALL_OW 297
7892: PUSH
7893: LD_INT 4
7895: LESS
7896: IFFALSE 7831
// ComStop ( unit ) ;
7898: LD_VAR 0 1
7902: PPUSH
7903: CALL_OW 141
// status = 4 ;
7907: LD_ADDR_VAR 0 12
7911: PUSH
7912: LD_INT 4
7914: ST_TO_ADDR
// end ; if status = 4 then
7915: LD_VAR 0 12
7919: PUSH
7920: LD_INT 4
7922: EQUAL
7923: IFFALSE 7955
// begin repeat wait ( 0 0$1 ) ;
7925: LD_INT 35
7927: PPUSH
7928: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
7932: LD_VAR 0 1
7936: PPUSH
7937: CALL_OW 256
7941: PUSH
7942: LD_INT 1000
7944: EQUAL
7945: IFFALSE 7925
// status = 5 ;
7947: LD_ADDR_VAR 0 12
7951: PUSH
7952: LD_INT 5
7954: ST_TO_ADDR
// end ; if status = 5 then
7955: LD_VAR 0 12
7959: PUSH
7960: LD_INT 5
7962: EQUAL
7963: IFFALSE 8245
// begin p := 999 ;
7965: LD_ADDR_VAR 0 9
7969: PUSH
7970: LD_INT 999
7972: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
7973: LD_ADDR_VAR 0 14
7977: PUSH
7978: LD_VAR 0 11
7982: PUSH
7983: LD_INT 2
7985: ARRAY
7986: PUSH
7987: LD_INT 1
7989: ARRAY
7990: PUSH
7991: LD_VAR 0 11
7995: PUSH
7996: LD_INT 2
7998: ARRAY
7999: PUSH
8000: LD_INT 2
8002: ARRAY
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: ST_TO_ADDR
// c := 1 ;
8008: LD_ADDR_VAR 0 8
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8016: LD_ADDR_VAR 0 5
8020: PUSH
8021: DOUBLE
8022: LD_INT 1
8024: DEC
8025: ST_TO_ADDR
8026: LD_VAR 0 11
8030: PUSH
8031: LD_INT 2
8033: ARRAY
8034: PUSH
8035: LD_INT 2
8037: DIV
8038: PUSH
8039: FOR_TO
8040: IFFALSE 8172
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8042: LD_ADDR_VAR 0 6
8046: PUSH
8047: LD_VAR 0 1
8051: PPUSH
8052: LD_VAR 0 11
8056: PUSH
8057: LD_INT 2
8059: ARRAY
8060: PUSH
8061: LD_VAR 0 8
8065: ARRAY
8066: PPUSH
8067: LD_VAR 0 11
8071: PUSH
8072: LD_INT 2
8074: ARRAY
8075: PUSH
8076: LD_VAR 0 8
8080: PUSH
8081: LD_INT 1
8083: PLUS
8084: ARRAY
8085: PPUSH
8086: CALL_OW 297
8090: ST_TO_ADDR
// if x < p then
8091: LD_VAR 0 6
8095: PUSH
8096: LD_VAR 0 9
8100: LESS
8101: IFFALSE 8156
// begin p := x ;
8103: LD_ADDR_VAR 0 9
8107: PUSH
8108: LD_VAR 0 6
8112: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8113: LD_ADDR_VAR 0 14
8117: PUSH
8118: LD_VAR 0 11
8122: PUSH
8123: LD_INT 2
8125: ARRAY
8126: PUSH
8127: LD_VAR 0 8
8131: ARRAY
8132: PUSH
8133: LD_VAR 0 11
8137: PUSH
8138: LD_INT 2
8140: ARRAY
8141: PUSH
8142: LD_VAR 0 8
8146: PUSH
8147: LD_INT 1
8149: PLUS
8150: ARRAY
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: ST_TO_ADDR
// end ; c = c + 2 ;
8156: LD_ADDR_VAR 0 8
8160: PUSH
8161: LD_VAR 0 8
8165: PUSH
8166: LD_INT 2
8168: PLUS
8169: ST_TO_ADDR
// end ;
8170: GO 8039
8172: POP
8173: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8174: LD_VAR 0 1
8178: PPUSH
8179: LD_VAR 0 14
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PPUSH
8188: LD_VAR 0 14
8192: PUSH
8193: LD_INT 2
8195: ARRAY
8196: PPUSH
8197: CALL_OW 111
// wait ( 0 0$1 ) ;
8201: LD_INT 35
8203: PPUSH
8204: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8208: LD_VAR 0 1
8212: PPUSH
8213: LD_VAR 0 14
8217: PUSH
8218: LD_INT 1
8220: ARRAY
8221: PPUSH
8222: LD_VAR 0 14
8226: PUSH
8227: LD_INT 2
8229: ARRAY
8230: PPUSH
8231: CALL_OW 307
8235: IFFALSE 8174
// status = 1 ;
8237: LD_ADDR_VAR 0 12
8241: PUSH
8242: LD_INT 1
8244: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8245: LD_VAR 0 1
8249: PPUSH
8250: CALL_OW 301
8254: IFFALSE 6983
// end ;
8256: LD_VAR 0 4
8260: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8261: LD_INT 0
8263: PPUSH
8264: PPUSH
8265: PPUSH
8266: PPUSH
8267: PPUSH
8268: PPUSH
8269: PPUSH
8270: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8271: LD_VAR 0 1
8275: NOT
8276: PUSH
8277: LD_VAR 0 3
8281: NOT
8282: OR
8283: PUSH
8284: LD_VAR 0 4
8288: PUSH
8289: LD_INT 1
8291: PUSH
8292: LD_INT 2
8294: PUSH
8295: LD_INT 0
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: LIST
8302: IN
8303: NOT
8304: OR
8305: PUSH
8306: LD_VAR 0 6
8310: NOT
8311: OR
8312: PUSH
8313: LD_VAR 0 7
8317: NOT
8318: OR
8319: IFFALSE 8323
// exit ;
8321: GO 8714
// sex_id :=  ;
8323: LD_ADDR_VAR 0 14
8327: PUSH
8328: LD_STRING 
8330: ST_TO_ADDR
// case class of 1 :
8331: LD_VAR 0 5
8335: PUSH
8336: LD_INT 1
8338: DOUBLE
8339: EQUAL
8340: IFTRUE 8344
8342: GO 8355
8344: POP
// class_id := Sol ; 2 :
8345: LD_ADDR_VAR 0 15
8349: PUSH
8350: LD_STRING Sol
8352: ST_TO_ADDR
8353: GO 8413
8355: LD_INT 2
8357: DOUBLE
8358: EQUAL
8359: IFTRUE 8363
8361: GO 8374
8363: POP
// class_id := Eng ; 3 :
8364: LD_ADDR_VAR 0 15
8368: PUSH
8369: LD_STRING Eng
8371: ST_TO_ADDR
8372: GO 8413
8374: LD_INT 3
8376: DOUBLE
8377: EQUAL
8378: IFTRUE 8382
8380: GO 8393
8382: POP
// class_id := Mech ; 4 :
8383: LD_ADDR_VAR 0 15
8387: PUSH
8388: LD_STRING Mech
8390: ST_TO_ADDR
8391: GO 8413
8393: LD_INT 4
8395: DOUBLE
8396: EQUAL
8397: IFTRUE 8401
8399: GO 8412
8401: POP
// class_id := Sci ; end ;
8402: LD_ADDR_VAR 0 15
8406: PUSH
8407: LD_STRING Sci
8409: ST_TO_ADDR
8410: GO 8413
8412: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8413: LD_ADDR_VAR 0 11
8417: PUSH
8418: LD_VAR 0 1
8422: PPUSH
8423: LD_INT 25
8425: PUSH
8426: LD_VAR 0 5
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PPUSH
8435: CALL_OW 72
8439: ST_TO_ADDR
// if tmp then
8440: LD_VAR 0 11
8444: IFFALSE 8456
// units := tmp ;
8446: LD_ADDR_VAR 0 1
8450: PUSH
8451: LD_VAR 0 11
8455: ST_TO_ADDR
// if sex then
8456: LD_VAR 0 4
8460: IFFALSE 8516
// begin if sex = sex_female then
8462: LD_VAR 0 4
8466: PUSH
8467: LD_INT 2
8469: EQUAL
8470: IFFALSE 8480
// sex_id := F ;
8472: LD_ADDR_VAR 0 14
8476: PUSH
8477: LD_STRING F
8479: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8480: LD_ADDR_VAR 0 1
8484: PUSH
8485: LD_VAR 0 1
8489: PPUSH
8490: LD_INT 26
8492: PUSH
8493: LD_VAR 0 4
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PPUSH
8502: CALL_OW 72
8506: ST_TO_ADDR
// if not units then
8507: LD_VAR 0 1
8511: NOT
8512: IFFALSE 8516
// exit ;
8514: GO 8714
// end ; unit_id := id ;
8516: LD_ADDR_VAR 0 12
8520: PUSH
8521: LD_VAR 0 6
8525: ST_TO_ADDR
// if unit_id > units then
8526: LD_VAR 0 12
8530: PUSH
8531: LD_VAR 0 1
8535: GREATER
8536: IFFALSE 8546
// unit_id := 1 ;
8538: LD_ADDR_VAR 0 12
8542: PUSH
8543: LD_INT 1
8545: ST_TO_ADDR
// if not units [ unit_id ] then
8546: LD_VAR 0 1
8550: PUSH
8551: LD_VAR 0 12
8555: ARRAY
8556: NOT
8557: IFFALSE 8561
// exit ;
8559: GO 8714
// unit := units [ unit_id ] ;
8561: LD_ADDR_VAR 0 10
8565: PUSH
8566: LD_VAR 0 1
8570: PUSH
8571: LD_VAR 0 12
8575: ARRAY
8576: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8577: LD_ADDR_VAR 0 13
8581: PUSH
8582: LD_STRING D
8584: PUSH
8585: LD_VAR 0 3
8589: STR
8590: PUSH
8591: LD_STRING -
8593: STR
8594: PUSH
8595: LD_VAR 0 14
8599: STR
8600: PUSH
8601: LD_VAR 0 15
8605: STR
8606: PUSH
8607: LD_VAR 0 6
8611: STR
8612: PUSH
8613: LD_STRING -
8615: STR
8616: PUSH
8617: LD_VAR 0 7
8621: STR
8622: ST_TO_ADDR
// case type of 0 :
8623: LD_VAR 0 2
8627: PUSH
8628: LD_INT 0
8630: DOUBLE
8631: EQUAL
8632: IFTRUE 8636
8634: GO 8653
8636: POP
// Say ( unit , dialog_id ) ; 1 :
8637: LD_VAR 0 10
8641: PPUSH
8642: LD_VAR 0 13
8646: PPUSH
8647: CALL_OW 88
8651: GO 8704
8653: LD_INT 1
8655: DOUBLE
8656: EQUAL
8657: IFTRUE 8661
8659: GO 8678
8661: POP
// SayRadio ( unit , dialog_id ) ; 2 :
8662: LD_VAR 0 10
8666: PPUSH
8667: LD_VAR 0 13
8671: PPUSH
8672: CALL_OW 94
8676: GO 8704
8678: LD_INT 2
8680: DOUBLE
8681: EQUAL
8682: IFTRUE 8686
8684: GO 8703
8686: POP
// ForceSay ( unit , dialog_id ) ; end ;
8687: LD_VAR 0 10
8691: PPUSH
8692: LD_VAR 0 13
8696: PPUSH
8697: CALL_OW 91
8701: GO 8704
8703: POP
// result := unit ;
8704: LD_ADDR_VAR 0 8
8708: PUSH
8709: LD_VAR 0 10
8713: ST_TO_ADDR
// end ;
8714: LD_VAR 0 8
8718: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
8719: LD_INT 0
8721: PPUSH
8722: PPUSH
8723: PPUSH
// result := false ;
8724: LD_ADDR_VAR 0 4
8728: PUSH
8729: LD_INT 0
8731: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
8732: LD_VAR 0 1
8736: NOT
8737: PUSH
8738: LD_VAR 0 2
8742: NOT
8743: OR
8744: PUSH
8745: LD_VAR 0 1
8749: PPUSH
8750: CALL_OW 310
8754: OR
8755: IFFALSE 8759
// exit ;
8757: GO 8963
// if distance < 0 then
8759: LD_VAR 0 3
8763: PUSH
8764: LD_INT 0
8766: LESS
8767: IFFALSE 8777
// distance := 0 ;
8769: LD_ADDR_VAR 0 3
8773: PUSH
8774: LD_INT 0
8776: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
8777: LD_ADDR_VAR 0 6
8781: PUSH
8782: LD_VAR 0 2
8786: PPUSH
8787: CALL_OW 266
8791: PPUSH
8792: LD_VAR 0 2
8796: PPUSH
8797: CALL_OW 250
8801: PPUSH
8802: LD_VAR 0 2
8806: PPUSH
8807: CALL_OW 251
8811: PPUSH
8812: LD_VAR 0 2
8816: PPUSH
8817: CALL_OW 254
8821: PPUSH
8822: LD_VAR 0 2
8826: PPUSH
8827: CALL_OW 248
8831: PPUSH
8832: LD_INT 1
8834: PPUSH
8835: CALL 49033 0 6
8839: ST_TO_ADDR
// if not entrance then
8840: LD_VAR 0 6
8844: NOT
8845: IFFALSE 8849
// exit ;
8847: GO 8963
// for i in entrance do
8849: LD_ADDR_VAR 0 5
8853: PUSH
8854: LD_VAR 0 6
8858: PUSH
8859: FOR_IN
8860: IFFALSE 8961
// begin if not distance then
8862: LD_VAR 0 3
8866: NOT
8867: IFFALSE 8912
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
8869: LD_VAR 0 1
8873: PPUSH
8874: LD_VAR 0 5
8878: PUSH
8879: LD_INT 1
8881: ARRAY
8882: PPUSH
8883: LD_VAR 0 5
8887: PUSH
8888: LD_INT 2
8890: ARRAY
8891: PPUSH
8892: CALL_OW 307
8896: IFFALSE 8910
// begin result := true ;
8898: LD_ADDR_VAR 0 4
8902: PUSH
8903: LD_INT 1
8905: ST_TO_ADDR
// exit ;
8906: POP
8907: POP
8908: GO 8963
// end ; end else
8910: GO 8959
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
8912: LD_VAR 0 1
8916: PPUSH
8917: LD_VAR 0 5
8921: PUSH
8922: LD_INT 1
8924: ARRAY
8925: PPUSH
8926: LD_VAR 0 5
8930: PUSH
8931: LD_INT 2
8933: ARRAY
8934: PPUSH
8935: CALL_OW 297
8939: PUSH
8940: LD_VAR 0 3
8944: LESSEQUAL
8945: IFFALSE 8959
// begin result := true ;
8947: LD_ADDR_VAR 0 4
8951: PUSH
8952: LD_INT 1
8954: ST_TO_ADDR
// exit ;
8955: POP
8956: POP
8957: GO 8963
// end ; end ; end ;
8959: GO 8859
8961: POP
8962: POP
// end ;
8963: LD_VAR 0 4
8967: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
8968: LD_INT 0
8970: PPUSH
8971: PPUSH
8972: PPUSH
// result := false ;
8973: LD_ADDR_VAR 0 3
8977: PUSH
8978: LD_INT 0
8980: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
8981: LD_VAR 0 1
8985: NOT
8986: PUSH
8987: LD_VAR 0 2
8991: NOT
8992: OR
8993: PUSH
8994: LD_VAR 0 1
8998: PPUSH
8999: CALL_OW 302
9003: NOT
9004: OR
9005: PUSH
9006: LD_VAR 0 2
9010: PPUSH
9011: CALL_OW 302
9015: NOT
9016: OR
9017: IFFALSE 9021
// exit ;
9019: GO 9182
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9021: LD_VAR 0 1
9025: PPUSH
9026: LD_INT 81
9028: PUSH
9029: LD_VAR 0 1
9033: PPUSH
9034: CALL_OW 255
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PUSH
9043: LD_INT 3
9045: PUSH
9046: LD_INT 21
9048: PUSH
9049: LD_INT 3
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PPUSH
9064: CALL_OW 69
9068: PPUSH
9069: LD_VAR 0 1
9073: PPUSH
9074: CALL_OW 74
9078: PPUSH
9079: CALL_OW 296
9083: PUSH
9084: LD_INT 8
9086: LESS
9087: IFFALSE 9091
// exit ;
9089: GO 9182
// building := IsInUnit ( unit2 ) ;
9091: LD_ADDR_VAR 0 5
9095: PUSH
9096: LD_VAR 0 2
9100: PPUSH
9101: CALL_OW 310
9105: ST_TO_ADDR
// if building then
9106: LD_VAR 0 5
9110: IFFALSE 9137
// result := IsNearbyEntrance ( unit , building , 2 ) else
9112: LD_ADDR_VAR 0 3
9116: PUSH
9117: LD_VAR 0 1
9121: PPUSH
9122: LD_VAR 0 5
9126: PPUSH
9127: LD_INT 2
9129: PPUSH
9130: CALL 8719 0 3
9134: ST_TO_ADDR
9135: GO 9182
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9137: LD_ADDR_VAR 0 3
9141: PUSH
9142: LD_VAR 0 1
9146: PPUSH
9147: LD_VAR 0 2
9151: PPUSH
9152: CALL_OW 296
9156: PUSH
9157: LD_INT 6
9159: LESS
9160: PUSH
9161: LD_VAR 0 2
9165: PPUSH
9166: CALL_OW 255
9170: PPUSH
9171: LD_VAR 0 1
9175: PPUSH
9176: CALL_OW 292
9180: AND
9181: ST_TO_ADDR
// end ;
9182: LD_VAR 0 3
9186: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9187: LD_INT 0
9189: PPUSH
9190: PPUSH
9191: PPUSH
9192: PPUSH
// uc_side = 0 ;
9193: LD_ADDR_OWVAR 20
9197: PUSH
9198: LD_INT 0
9200: ST_TO_ADDR
// uc_nation = 0 ;
9201: LD_ADDR_OWVAR 21
9205: PUSH
9206: LD_INT 0
9208: ST_TO_ADDR
// nat_area := nature_area ;
9209: LD_ADDR_VAR 0 4
9213: PUSH
9214: LD_INT 24
9216: ST_TO_ADDR
// InitHc ;
9217: CALL_OW 19
// for i = 1 to 4 do
9221: LD_ADDR_VAR 0 2
9225: PUSH
9226: DOUBLE
9227: LD_INT 1
9229: DEC
9230: ST_TO_ADDR
9231: LD_INT 4
9233: PUSH
9234: FOR_TO
9235: IFFALSE 9282
// begin hc_class = 18 ;
9237: LD_ADDR_OWVAR 28
9241: PUSH
9242: LD_INT 18
9244: ST_TO_ADDR
// hc_gallery =  ;
9245: LD_ADDR_OWVAR 33
9249: PUSH
9250: LD_STRING 
9252: ST_TO_ADDR
// animal := CreateHuman ;
9253: LD_ADDR_VAR 0 3
9257: PUSH
9258: CALL_OW 44
9262: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9263: LD_VAR 0 3
9267: PPUSH
9268: LD_VAR 0 4
9272: PPUSH
9273: LD_INT 0
9275: PPUSH
9276: CALL_OW 49
// end ;
9280: GO 9234
9282: POP
9283: POP
// for i = 1 to 3 do
9284: LD_ADDR_VAR 0 2
9288: PUSH
9289: DOUBLE
9290: LD_INT 1
9292: DEC
9293: ST_TO_ADDR
9294: LD_INT 3
9296: PUSH
9297: FOR_TO
9298: IFFALSE 9392
// begin hc_class = class_apeman ;
9300: LD_ADDR_OWVAR 28
9304: PUSH
9305: LD_INT 12
9307: ST_TO_ADDR
// hc_gallery =  ;
9308: LD_ADDR_OWVAR 33
9312: PUSH
9313: LD_STRING 
9315: ST_TO_ADDR
// hc_agressivity = 0 ;
9316: LD_ADDR_OWVAR 35
9320: PUSH
9321: LD_INT 0
9323: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9324: LD_ADDR_OWVAR 31
9328: PUSH
9329: LD_INT 1
9331: PPUSH
9332: LD_INT 3
9334: PPUSH
9335: CALL_OW 12
9339: PUSH
9340: LD_INT 1
9342: PPUSH
9343: LD_INT 3
9345: PPUSH
9346: CALL_OW 12
9350: PUSH
9351: LD_INT 0
9353: PUSH
9354: LD_INT 0
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: ST_TO_ADDR
// animal := CreateHuman ;
9363: LD_ADDR_VAR 0 3
9367: PUSH
9368: CALL_OW 44
9372: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9373: LD_VAR 0 3
9377: PPUSH
9378: LD_VAR 0 4
9382: PPUSH
9383: LD_INT 0
9385: PPUSH
9386: CALL_OW 49
// end ;
9390: GO 9297
9392: POP
9393: POP
// for i = 1 to 3 do
9394: LD_ADDR_VAR 0 2
9398: PUSH
9399: DOUBLE
9400: LD_INT 1
9402: DEC
9403: ST_TO_ADDR
9404: LD_INT 3
9406: PUSH
9407: FOR_TO
9408: IFFALSE 9455
// begin hc_class = 13 ;
9410: LD_ADDR_OWVAR 28
9414: PUSH
9415: LD_INT 13
9417: ST_TO_ADDR
// hc_gallery =  ;
9418: LD_ADDR_OWVAR 33
9422: PUSH
9423: LD_STRING 
9425: ST_TO_ADDR
// animal := CreateHuman ;
9426: LD_ADDR_VAR 0 3
9430: PUSH
9431: CALL_OW 44
9435: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9436: LD_VAR 0 3
9440: PPUSH
9441: LD_VAR 0 4
9445: PPUSH
9446: LD_INT 0
9448: PPUSH
9449: CALL_OW 49
// end ;
9453: GO 9407
9455: POP
9456: POP
// for i = 1 to 3 do
9457: LD_ADDR_VAR 0 2
9461: PUSH
9462: DOUBLE
9463: LD_INT 1
9465: DEC
9466: ST_TO_ADDR
9467: LD_INT 3
9469: PUSH
9470: FOR_TO
9471: IFFALSE 9516
// begin hc_class = 20 ;
9473: LD_ADDR_OWVAR 28
9477: PUSH
9478: LD_INT 20
9480: ST_TO_ADDR
// hc_gallery =  ;
9481: LD_ADDR_OWVAR 33
9485: PUSH
9486: LD_STRING 
9488: ST_TO_ADDR
// animal := CreateHuman ;
9489: LD_ADDR_VAR 0 3
9493: PUSH
9494: CALL_OW 44
9498: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9499: LD_VAR 0 3
9503: PPUSH
9504: LD_INT 4
9506: PPUSH
9507: LD_INT 0
9509: PPUSH
9510: CALL_OW 49
// end ;
9514: GO 9470
9516: POP
9517: POP
// end ; end_of_file
9518: LD_VAR 0 1
9522: RET
// export function Action ; begin
9523: LD_INT 0
9525: PPUSH
// InGameOn ;
9526: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9530: LD_EXP 14
9534: PPUSH
9535: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9539: LD_EXP 14
9543: PPUSH
9544: LD_STRING D1-JMM-1
9546: PPUSH
9547: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9551: LD_EXP 15
9555: PPUSH
9556: LD_STRING D1-Roth-1
9558: PPUSH
9559: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9563: LD_EXP 14
9567: PPUSH
9568: LD_STRING D1-JMM-2
9570: PPUSH
9571: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9575: LD_EXP 15
9579: PPUSH
9580: LD_STRING D1-Roth-2
9582: PPUSH
9583: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9587: LD_EXP 14
9591: PPUSH
9592: LD_STRING D1-JMM-3
9594: PPUSH
9595: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9599: LD_EXP 15
9603: PPUSH
9604: LD_STRING D1-Roth-3
9606: PPUSH
9607: CALL_OW 88
// ComInvisible ( Roth ) ;
9611: LD_EXP 15
9615: PPUSH
9616: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9620: LD_INT 46
9622: PPUSH
9623: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9627: LD_EXP 14
9631: PPUSH
9632: LD_STRING D1-JMM-4
9634: PPUSH
9635: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9639: LD_INT 10
9641: PPUSH
9642: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9646: LD_EXP 15
9650: PPUSH
9651: LD_EXP 14
9655: PPUSH
9656: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
9660: LD_EXP 14
9664: PPUSH
9665: LD_STRING D1-JMM-4a
9667: PPUSH
9668: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
9672: LD_EXP 15
9676: PPUSH
9677: LD_STRING D1-Roth-4
9679: PPUSH
9680: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
9684: LD_EXP 14
9688: PPUSH
9689: LD_STRING D1-JMM-5
9691: PPUSH
9692: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
9696: LD_EXP 15
9700: PPUSH
9701: LD_STRING D1-Roth-5
9703: PPUSH
9704: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
9708: LD_EXP 14
9712: PPUSH
9713: LD_STRING D1-JMM-6
9715: PPUSH
9716: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
9720: LD_EXP 15
9724: PPUSH
9725: LD_STRING D1-Roth-6
9727: PPUSH
9728: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
9732: LD_EXP 14
9736: PPUSH
9737: LD_STRING D1-JMM-7
9739: PPUSH
9740: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
9744: LD_EXP 16
9748: PPUSH
9749: LD_EXP 14
9753: PPUSH
9754: CALL_OW 250
9758: PPUSH
9759: LD_EXP 14
9763: PPUSH
9764: CALL_OW 251
9768: PPUSH
9769: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
9773: LD_EXP 15
9777: PPUSH
9778: LD_STRING D1-Roth-7
9780: PPUSH
9781: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
9785: LD_INT 10
9787: PPUSH
9788: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
9792: LD_EXP 16
9796: PPUSH
9797: LD_EXP 14
9801: PPUSH
9802: CALL_OW 296
9806: PUSH
9807: LD_INT 6
9809: LESS
9810: IFFALSE 9785
// ComTurnUnit ( Powell , JMM ) ;
9812: LD_EXP 16
9816: PPUSH
9817: LD_EXP 14
9821: PPUSH
9822: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
9826: LD_EXP 16
9830: PPUSH
9831: LD_STRING D1-Pow-7
9833: PPUSH
9834: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
9838: LD_EXP 14
9842: PPUSH
9843: LD_EXP 16
9847: PPUSH
9848: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
9852: LD_EXP 15
9856: PPUSH
9857: LD_EXP 16
9861: PPUSH
9862: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
9866: LD_EXP 14
9870: PPUSH
9871: LD_STRING D1-JMM-8
9873: PPUSH
9874: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
9878: LD_EXP 16
9882: PPUSH
9883: LD_STRING D1-Pow-8
9885: PPUSH
9886: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
9890: LD_EXP 14
9894: PPUSH
9895: LD_STRING D1-JMM-9
9897: PPUSH
9898: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
9902: LD_EXP 16
9906: PPUSH
9907: LD_INT 124
9909: PPUSH
9910: LD_INT 61
9912: PPUSH
9913: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9917: LD_INT 35
9919: PPUSH
9920: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
9924: LD_EXP 14
9928: PPUSH
9929: LD_EXP 16
9933: PPUSH
9934: CALL_OW 296
9938: PUSH
9939: LD_INT 6
9941: GREATER
9942: IFFALSE 9917
// SayRadio ( Powell , D1-Pow-9 ) ;
9944: LD_EXP 16
9948: PPUSH
9949: LD_STRING D1-Pow-9
9951: PPUSH
9952: CALL_OW 94
// RemoveUnit ( Powell ) ;
9956: LD_EXP 16
9960: PPUSH
9961: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
9965: LD_EXP 16
9969: PPUSH
9970: LD_INT 18
9972: PPUSH
9973: CALL_OW 52
// if Joan and not Joan in selected then
9977: LD_EXP 36
9981: PUSH
9982: LD_EXP 36
9986: PUSH
9987: LD_EXP 3
9991: IN
9992: NOT
9993: AND
9994: IFFALSE 10008
// SayRadio ( Joan , D1-Joan-9 ) ;
9996: LD_EXP 36
10000: PPUSH
10001: LD_STRING D1-Joan-9
10003: PPUSH
10004: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10008: LD_EXP 15
10012: PPUSH
10013: LD_EXP 14
10017: PPUSH
10018: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10022: LD_EXP 14
10026: PPUSH
10027: LD_EXP 15
10031: PPUSH
10032: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10036: LD_EXP 15
10040: PPUSH
10041: LD_STRING D1-Roth-9
10043: PPUSH
10044: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10048: LD_EXP 14
10052: PPUSH
10053: LD_STRING D1-JMM-10
10055: PPUSH
10056: CALL_OW 88
// InGameOff ;
10060: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10064: LD_STRING M1
10066: PPUSH
10067: CALL_OW 337
// if Difficulty < 3 then
10071: LD_OWVAR 67
10075: PUSH
10076: LD_INT 3
10078: LESS
10079: IFFALSE 10091
// ChangeSideFog ( 4 , 7 ) ;
10081: LD_INT 4
10083: PPUSH
10084: LD_INT 7
10086: PPUSH
10087: CALL_OW 343
// SaveForQuickRestart ;
10091: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10095: LD_INT 7
10097: PPUSH
10098: LD_INT 1
10100: PPUSH
10101: LD_INT 2
10103: PPUSH
10104: LD_INT 1
10106: PPUSH
10107: CALL_OW 80
// wait ( 0 0$3 ) ;
10111: LD_INT 105
10113: PPUSH
10114: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10118: LD_EXP 15
10122: PPUSH
10123: LD_INT 124
10125: PPUSH
10126: LD_INT 18
10128: PPUSH
10129: CALL_OW 111
// AddComInvisible ( Roth ) ;
10133: LD_EXP 15
10137: PPUSH
10138: CALL_OW 212
// wait ( 0 0$30 ) ;
10142: LD_INT 1050
10144: PPUSH
10145: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10149: LD_EXP 15
10153: PPUSH
10154: LD_INT 2100
10156: PPUSH
10157: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10161: LD_EXP 15
10165: PPUSH
10166: LD_INT 156
10168: PPUSH
10169: LD_INT 20
10171: PPUSH
10172: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10176: LD_EXP 15
10180: PPUSH
10181: LD_INT 178
10183: PPUSH
10184: LD_INT 42
10186: PPUSH
10187: CALL_OW 171
// AddComInvisible ( Roth ) ;
10191: LD_EXP 15
10195: PPUSH
10196: CALL_OW 212
// end ;
10200: LD_VAR 0 1
10204: RET
// every 0 0$1 do var i , tmp ;
10205: GO 10207
10207: DISABLE
10208: LD_INT 0
10210: PPUSH
10211: PPUSH
// begin tmp := selected union friends ;
10212: LD_ADDR_VAR 0 2
10216: PUSH
10217: LD_EXP 3
10221: PUSH
10222: LD_EXP 4
10226: UNION
10227: ST_TO_ADDR
// if not tmp then
10228: LD_VAR 0 2
10232: NOT
10233: IFFALSE 10237
// exit ;
10235: GO 10309
// repeat wait ( 0 0$1 ) ;
10237: LD_INT 35
10239: PPUSH
10240: CALL_OW 67
// for i in tmp do
10244: LD_ADDR_VAR 0 1
10248: PUSH
10249: LD_VAR 0 2
10253: PUSH
10254: FOR_IN
10255: IFFALSE 10300
// if CanSpot ( JMM , i ) then
10257: LD_EXP 14
10261: PPUSH
10262: LD_VAR 0 1
10266: PPUSH
10267: CALL 8968 0 2
10271: IFFALSE 10298
// begin tmp := tmp diff i ;
10273: LD_ADDR_VAR 0 2
10277: PUSH
10278: LD_VAR 0 2
10282: PUSH
10283: LD_VAR 0 1
10287: DIFF
10288: ST_TO_ADDR
// Spot ( i ) ;
10289: LD_VAR 0 1
10293: PPUSH
10294: CALL 10312 0 1
// end ;
10298: GO 10254
10300: POP
10301: POP
// until not tmp ;
10302: LD_VAR 0 2
10306: NOT
10307: IFFALSE 10237
// end ;
10309: PPOPN 2
10311: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10312: LD_INT 0
10314: PPUSH
10315: PPUSH
10316: PPUSH
10317: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10318: LD_VAR 0 1
10322: NOT
10323: PUSH
10324: LD_VAR 0 1
10328: PPUSH
10329: CALL_OW 255
10333: PUSH
10334: LD_INT 4
10336: NONEQUAL
10337: OR
10338: PUSH
10339: LD_VAR 0 1
10343: PPUSH
10344: CALL_OW 555
10348: OR
10349: PUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 302
10359: NOT
10360: OR
10361: IFFALSE 10365
// exit ;
10363: GO 12247
// InGameOn ;
10365: CALL_OW 8
// side := 7 ;
10369: LD_ADDR_VAR 0 4
10373: PUSH
10374: LD_INT 7
10376: ST_TO_ADDR
// joined := false ;
10377: LD_ADDR_VAR 0 5
10381: PUSH
10382: LD_INT 0
10384: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10385: LD_ADDR_VAR 0 3
10389: PUSH
10390: LD_VAR 0 1
10394: PPUSH
10395: CALL_OW 310
10399: ST_TO_ADDR
// if building then
10400: LD_VAR 0 3
10404: IFFALSE 10463
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10406: LD_EXP 14
10410: PPUSH
10411: LD_VAR 0 1
10415: PPUSH
10416: CALL_OW 255
10420: PPUSH
10421: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10425: LD_EXP 14
10429: PPUSH
10430: LD_VAR 0 3
10434: PPUSH
10435: CALL_OW 120
// repeat wait ( 3 ) ;
10439: LD_INT 3
10441: PPUSH
10442: CALL_OW 67
// until IsInUnit ( JMM ) ;
10446: LD_EXP 14
10450: PPUSH
10451: CALL_OW 310
10455: IFFALSE 10439
// DialogueOn ;
10457: CALL_OW 6
// end else
10461: GO 10495
// begin ComTurnUnit ( JMM , unit ) ;
10463: LD_EXP 14
10467: PPUSH
10468: LD_VAR 0 1
10472: PPUSH
10473: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10477: LD_VAR 0 1
10481: PPUSH
10482: LD_EXP 14
10486: PPUSH
10487: CALL_OW 119
// DialogueOn ;
10491: CALL_OW 6
// end ; if unit = Joan then
10495: LD_VAR 0 1
10499: PUSH
10500: LD_EXP 36
10504: EQUAL
10505: IFFALSE 10615
// begin joined := true ;
10507: LD_ADDR_VAR 0 5
10511: PUSH
10512: LD_INT 1
10514: ST_TO_ADDR
// if Joan in selected then
10515: LD_EXP 36
10519: PUSH
10520: LD_EXP 3
10524: IN
10525: IFFALSE 10553
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10527: LD_EXP 36
10531: PPUSH
10532: LD_STRING D3-Joan-Joan-1
10534: PPUSH
10535: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10539: LD_EXP 14
10543: PPUSH
10544: LD_STRING D3-Joan-JMM-1
10546: PPUSH
10547: CALL_OW 88
// end else
10551: GO 10613
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10553: LD_EXP 36
10557: PPUSH
10558: LD_STRING D4-Joan-Joan-1
10560: PPUSH
10561: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10565: LD_EXP 14
10569: PPUSH
10570: LD_STRING D4-Joan-JMM-1
10572: PPUSH
10573: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10577: LD_EXP 36
10581: PPUSH
10582: LD_STRING D4-Joan-Joan-2
10584: PPUSH
10585: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
10589: LD_EXP 14
10593: PPUSH
10594: LD_STRING D4-Joan-JMM-2
10596: PPUSH
10597: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
10601: LD_EXP 36
10605: PPUSH
10606: LD_STRING D4-Joan-Joan-3
10608: PPUSH
10609: CALL_OW 88
// end ; end else
10613: GO 12055
// if unit = Lisa then
10615: LD_VAR 0 1
10619: PUSH
10620: LD_EXP 23
10624: EQUAL
10625: IFFALSE 10817
// begin if Lisa in selected then
10627: LD_EXP 23
10631: PUSH
10632: LD_EXP 3
10636: IN
10637: IFFALSE 10750
// begin if GetSide ( Joan ) = 7 then
10639: LD_EXP 36
10643: PPUSH
10644: CALL_OW 255
10648: PUSH
10649: LD_INT 7
10651: EQUAL
10652: IFFALSE 10716
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
10654: LD_EXP 23
10658: PPUSH
10659: LD_STRING D3-LisaJ-Lisa-1
10661: PPUSH
10662: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
10666: LD_EXP 14
10670: PPUSH
10671: LD_STRING D3-LisaJ-JMM-1
10673: PPUSH
10674: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
10678: LD_EXP 23
10682: PPUSH
10683: LD_STRING D3-LisaJ-Lisa-2
10685: PPUSH
10686: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
10690: LD_EXP 14
10694: PPUSH
10695: LD_STRING D3-LisaJ-JMM-2
10697: PPUSH
10698: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
10702: LD_EXP 23
10706: PPUSH
10707: LD_STRING D3-LisaJ-Lisa-3
10709: PPUSH
10710: CALL_OW 88
// end else
10714: GO 10748
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
10716: LD_EXP 23
10720: PPUSH
10721: LD_STRING D3-LisaL-Lisa-1
10723: PPUSH
10724: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
10728: LD_EXP 14
10732: PPUSH
10733: LD_STRING D3-LisaL-JMM-1
10735: PPUSH
10736: CALL_OW 88
// joined := true ;
10740: LD_ADDR_VAR 0 5
10744: PUSH
10745: LD_INT 1
10747: ST_TO_ADDR
// end ; end else
10748: GO 10815
// begin if GetSide ( Joan ) = 7 then
10750: LD_EXP 36
10754: PPUSH
10755: CALL_OW 255
10759: PUSH
10760: LD_INT 7
10762: EQUAL
10763: IFFALSE 10803
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
10765: LD_EXP 23
10769: PPUSH
10770: LD_STRING D4-LisaJ-Lisa-1
10772: PPUSH
10773: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
10777: LD_EXP 14
10781: PPUSH
10782: LD_STRING D4-LisaJ-JMM-1
10784: PPUSH
10785: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
10789: LD_EXP 23
10793: PPUSH
10794: LD_STRING D4-LisaJ-Lisa-2
10796: PPUSH
10797: CALL_OW 88
// end else
10801: GO 10815
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
10803: LD_EXP 23
10807: PPUSH
10808: LD_STRING D4-LisaL-Lisa-1
10810: PPUSH
10811: CALL_OW 88
// end ; end ; end else
10815: GO 12055
// if unit = Frank then
10817: LD_VAR 0 1
10821: PUSH
10822: LD_EXP 33
10826: EQUAL
10827: IFFALSE 10967
// begin joined := true ;
10829: LD_ADDR_VAR 0 5
10833: PUSH
10834: LD_INT 1
10836: ST_TO_ADDR
// if Frank in selected then
10837: LD_EXP 33
10841: PUSH
10842: LD_EXP 3
10846: IN
10847: IFFALSE 10917
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
10849: LD_EXP 33
10853: PPUSH
10854: LD_STRING D3-Frank-Frank-1
10856: PPUSH
10857: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
10861: LD_EXP 14
10865: PPUSH
10866: LD_STRING D3-Frank-JMM-1
10868: PPUSH
10869: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
10873: LD_EXP 33
10877: PPUSH
10878: LD_STRING D3-Frank-Frank-2
10880: PPUSH
10881: CALL_OW 88
// if reached_lab then
10885: LD_EXP 5
10889: IFFALSE 10915
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
10891: LD_EXP 14
10895: PPUSH
10896: LD_STRING D3-Frank-JMM-2
10898: PPUSH
10899: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
10903: LD_EXP 33
10907: PPUSH
10908: LD_STRING D3-Frank-Frank-3
10910: PPUSH
10911: CALL_OW 88
// end ; end else
10915: GO 10965
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
10917: LD_EXP 33
10921: PPUSH
10922: LD_STRING D4-Frank-Frank-1
10924: PPUSH
10925: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
10929: LD_EXP 14
10933: PPUSH
10934: LD_STRING D4-Frank-JMM-1
10936: PPUSH
10937: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
10941: LD_EXP 33
10945: PPUSH
10946: LD_STRING D4-Frank-Frank-2
10948: PPUSH
10949: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
10953: LD_EXP 14
10957: PPUSH
10958: LD_STRING D4-Frank-JMM-2
10960: PPUSH
10961: CALL_OW 88
// end ; end else
10965: GO 12055
// if unit = Brown then
10967: LD_VAR 0 1
10971: PUSH
10972: LD_EXP 28
10976: EQUAL
10977: IFFALSE 11073
// begin if Brown in selected or gamma_commander = 2 then
10979: LD_EXP 28
10983: PUSH
10984: LD_EXP 3
10988: IN
10989: PUSH
10990: LD_EXP 10
10994: PUSH
10995: LD_INT 2
10997: EQUAL
10998: OR
10999: IFFALSE 11035
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11001: LD_EXP 28
11005: PPUSH
11006: LD_STRING D3-Soldier1-Sol1-1
11008: PPUSH
11009: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11013: LD_EXP 14
11017: PPUSH
11018: LD_STRING D3-Soldier1-JMM-1
11020: PPUSH
11021: CALL_OW 88
// joined := true ;
11025: LD_ADDR_VAR 0 5
11029: PUSH
11030: LD_INT 1
11032: ST_TO_ADDR
// end else
11033: GO 11071
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11035: LD_EXP 28
11039: PPUSH
11040: LD_STRING D4-Soldier2-Sol1-1
11042: PPUSH
11043: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11047: LD_EXP 14
11051: PPUSH
11052: LD_STRING D4-Soldier1-JMM-1
11054: PPUSH
11055: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11059: LD_EXP 28
11063: PPUSH
11064: LD_STRING D4-Soldier2-Sol1-2
11066: PPUSH
11067: CALL_OW 88
// end ; end else
11071: GO 12055
// if unit = Donaldson then
11073: LD_VAR 0 1
11077: PUSH
11078: LD_EXP 24
11082: EQUAL
11083: IFFALSE 11179
// begin if Donaldson in selected or gamma_commander = 1 then
11085: LD_EXP 24
11089: PUSH
11090: LD_EXP 3
11094: IN
11095: PUSH
11096: LD_EXP 10
11100: PUSH
11101: LD_INT 1
11103: EQUAL
11104: OR
11105: IFFALSE 11141
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11107: LD_EXP 24
11111: PPUSH
11112: LD_STRING D3-Soldier2-FSol2-1
11114: PPUSH
11115: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11119: LD_EXP 14
11123: PPUSH
11124: LD_STRING D3-Soldier2-JMM-1
11126: PPUSH
11127: CALL_OW 88
// joined := true ;
11131: LD_ADDR_VAR 0 5
11135: PUSH
11136: LD_INT 1
11138: ST_TO_ADDR
// end else
11139: GO 11177
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
11141: LD_VAR 0 1
11145: PPUSH
11146: LD_STRING D4-Soldier1-FSol1-1
11148: PPUSH
11149: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11153: LD_EXP 14
11157: PPUSH
11158: LD_STRING D4-Soldier1-JMM-1
11160: PPUSH
11161: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
11165: LD_VAR 0 1
11169: PPUSH
11170: LD_STRING D4-Soldier1-FSol1-2
11172: PPUSH
11173: CALL_OW 88
// end ; end else
11177: GO 12055
// if unit = Cyrus then
11179: LD_VAR 0 1
11183: PUSH
11184: LD_EXP 26
11188: EQUAL
11189: IFFALSE 11263
// begin if Cyrus in selected then
11191: LD_EXP 26
11195: PUSH
11196: LD_EXP 3
11200: IN
11201: IFFALSE 11237
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11203: LD_EXP 26
11207: PPUSH
11208: LD_STRING D3-Cyrus-Cyrus-1
11210: PPUSH
11211: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11215: LD_EXP 14
11219: PPUSH
11220: LD_STRING D3-Cyrus-JMM-1
11222: PPUSH
11223: CALL_OW 88
// joined := true ;
11227: LD_ADDR_VAR 0 5
11231: PUSH
11232: LD_INT 1
11234: ST_TO_ADDR
// end else
11235: GO 11261
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11237: LD_EXP 26
11241: PPUSH
11242: LD_STRING D4-Cyrus-Cyrus-1
11244: PPUSH
11245: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11249: LD_EXP 14
11253: PPUSH
11254: LD_STRING D4-Cyrus-JMM-1
11256: PPUSH
11257: CALL_OW 88
// end ; end else
11261: GO 12055
// if unit = Bobby then
11263: LD_VAR 0 1
11267: PUSH
11268: LD_EXP 25
11272: EQUAL
11273: IFFALSE 11359
// begin if Bobby in selected then
11275: LD_EXP 25
11279: PUSH
11280: LD_EXP 3
11284: IN
11285: IFFALSE 11321
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11287: LD_EXP 25
11291: PPUSH
11292: LD_STRING D3-Bobby-Bobby-1
11294: PPUSH
11295: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11299: LD_EXP 14
11303: PPUSH
11304: LD_STRING D3-Bobby-JMM-1
11306: PPUSH
11307: CALL_OW 88
// joined := true ;
11311: LD_ADDR_VAR 0 5
11315: PUSH
11316: LD_INT 1
11318: ST_TO_ADDR
// end else
11319: GO 11357
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11321: LD_EXP 25
11325: PPUSH
11326: LD_STRING D4-Bobby-Bobby-1
11328: PPUSH
11329: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11333: LD_EXP 14
11337: PPUSH
11338: LD_STRING D4-Bobby-JMM-1
11340: PPUSH
11341: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11345: LD_EXP 25
11349: PPUSH
11350: LD_STRING D4-Bobby-Bobby-2
11352: PPUSH
11353: CALL_OW 88
// end ; end else
11357: GO 12055
// if unit = Cornel then
11359: LD_VAR 0 1
11363: PUSH
11364: LD_EXP 31
11368: EQUAL
11369: IFFALSE 11467
// begin if Cornel in selected then
11371: LD_EXP 31
11375: PUSH
11376: LD_EXP 3
11380: IN
11381: IFFALSE 11429
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11383: LD_EXP 31
11387: PPUSH
11388: LD_STRING D3-Mark-Corn-1
11390: PPUSH
11391: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11395: LD_EXP 14
11399: PPUSH
11400: LD_STRING D3-Mark-JMM-1
11402: PPUSH
11403: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11407: LD_EXP 31
11411: PPUSH
11412: LD_STRING D3-Mark-Corn-2
11414: PPUSH
11415: CALL_OW 88
// joined := true ;
11419: LD_ADDR_VAR 0 5
11423: PUSH
11424: LD_INT 1
11426: ST_TO_ADDR
// end else
11427: GO 11465
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11429: LD_EXP 31
11433: PPUSH
11434: LD_STRING D4-Mark-Corn-1
11436: PPUSH
11437: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
11441: LD_EXP 14
11445: PPUSH
11446: LD_STRING D3-Joan-JMM-1
11448: PPUSH
11449: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11453: LD_EXP 31
11457: PPUSH
11458: LD_STRING D4-Mark-Corn-2
11460: PPUSH
11461: CALL_OW 88
// end ; end else
11465: GO 12055
// if unit = Gary then
11467: LD_VAR 0 1
11471: PUSH
11472: LD_EXP 32
11476: EQUAL
11477: IFFALSE 11561
// begin if Gary in selected then
11479: LD_EXP 32
11483: PUSH
11484: LD_EXP 3
11488: IN
11489: IFFALSE 11525
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11491: LD_EXP 32
11495: PPUSH
11496: LD_STRING D3-Gary-Gary-1
11498: PPUSH
11499: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11503: LD_EXP 14
11507: PPUSH
11508: LD_STRING D3-Gary-JMM-1
11510: PPUSH
11511: CALL_OW 88
// joined := true ;
11515: LD_ADDR_VAR 0 5
11519: PUSH
11520: LD_INT 1
11522: ST_TO_ADDR
// end else
11523: GO 11559
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11525: LD_EXP 32
11529: PPUSH
11530: LD_STRING D4-Gary-Gary-1
11532: PPUSH
11533: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11537: LD_EXP 32
11541: PPUSH
11542: LD_INT 1
11544: PPUSH
11545: CALL_OW 235
// DialogueOff ;
11549: CALL_OW 7
// InGameOff ;
11553: CALL_OW 9
// exit ;
11557: GO 12247
// end ; end else
11559: GO 12055
// if unit = Kikuchi then
11561: LD_VAR 0 1
11565: PUSH
11566: LD_EXP 34
11570: EQUAL
11571: IFFALSE 11655
// begin if Kikuchi in selected then
11573: LD_EXP 34
11577: PUSH
11578: LD_EXP 3
11582: IN
11583: IFFALSE 11619
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
11585: LD_EXP 34
11589: PPUSH
11590: LD_STRING D3-Yamako-Yam-1
11592: PPUSH
11593: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11597: LD_EXP 14
11601: PPUSH
11602: LD_STRING D3-Soldier2-JMM-1
11604: PPUSH
11605: CALL_OW 88
// joined := true ;
11609: LD_ADDR_VAR 0 5
11613: PUSH
11614: LD_INT 1
11616: ST_TO_ADDR
// end else
11617: GO 11653
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
11619: LD_EXP 34
11623: PPUSH
11624: LD_STRING D4-Yamako-Yam-1
11626: PPUSH
11627: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
11631: LD_EXP 34
11635: PPUSH
11636: LD_INT 1
11638: PPUSH
11639: CALL_OW 235
// DialogueOff ;
11643: CALL_OW 7
// InGameOff ;
11647: CALL_OW 9
// exit ;
11651: GO 12247
// end ; end else
11653: GO 12055
// if unit = Gladstone then
11655: LD_VAR 0 1
11659: PUSH
11660: LD_EXP 29
11664: EQUAL
11665: IFFALSE 11739
// begin if Gladstone in selected then
11667: LD_EXP 29
11671: PUSH
11672: LD_EXP 3
11676: IN
11677: IFFALSE 11713
// begin joined := true ;
11679: LD_ADDR_VAR 0 5
11683: PUSH
11684: LD_INT 1
11686: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
11687: LD_EXP 14
11691: PPUSH
11692: LD_STRING D3-Tim-JMM-1
11694: PPUSH
11695: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
11699: LD_EXP 29
11703: PPUSH
11704: LD_STRING D3-Tim-Glad-1
11706: PPUSH
11707: CALL_OW 88
// end else
11711: GO 11737
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
11713: LD_EXP 14
11717: PPUSH
11718: LD_STRING D4-Tim-JMM-1
11720: PPUSH
11721: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
11725: LD_EXP 29
11729: PPUSH
11730: LD_STRING D4-Tim-Glad-1
11732: PPUSH
11733: CALL_OW 88
// end ; end else
11737: GO 12055
// if unit = Denis then
11739: LD_VAR 0 1
11743: PUSH
11744: LD_EXP 27
11748: EQUAL
11749: IFFALSE 11785
// begin joined := true ;
11751: LD_ADDR_VAR 0 5
11755: PUSH
11756: LD_INT 1
11758: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
11759: LD_EXP 27
11763: PPUSH
11764: LD_STRING D3-Denis-Den-1
11766: PPUSH
11767: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
11771: LD_EXP 14
11775: PPUSH
11776: LD_STRING D3-Denis-JMM-1
11778: PPUSH
11779: CALL_OW 88
// end else
11783: GO 12055
// if unit = Simms then
11785: LD_VAR 0 1
11789: PUSH
11790: LD_EXP 35
11794: EQUAL
11795: IFFALSE 11831
// begin joined := true ;
11797: LD_ADDR_VAR 0 5
11801: PUSH
11802: LD_INT 1
11804: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
11805: LD_EXP 35
11809: PPUSH
11810: LD_STRING D3-Simms-Sim-1
11812: PPUSH
11813: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
11817: LD_EXP 14
11821: PPUSH
11822: LD_STRING D3-Simms-JMM-1
11824: PPUSH
11825: CALL_OW 88
// end else
11829: GO 12055
// if unit = DeltaDoctor then
11831: LD_VAR 0 1
11835: PUSH
11836: LD_EXP 37
11840: EQUAL
11841: IFFALSE 11877
// begin joined := true ;
11843: LD_ADDR_VAR 0 5
11847: PUSH
11848: LD_INT 1
11850: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
11851: LD_EXP 37
11855: PPUSH
11856: LD_STRING D3-Soldier1-Sol1-1
11858: PPUSH
11859: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11863: LD_EXP 14
11867: PPUSH
11868: LD_STRING D3-Soldier1-JMM-1
11870: PPUSH
11871: CALL_OW 88
// end else
11875: GO 12055
// begin joined := unit in selected ;
11877: LD_ADDR_VAR 0 5
11881: PUSH
11882: LD_VAR 0 1
11886: PUSH
11887: LD_EXP 3
11891: IN
11892: ST_TO_ADDR
// if joined then
11893: LD_VAR 0 5
11897: IFFALSE 11966
// begin if GetSex ( unit ) = sex_male then
11899: LD_VAR 0 1
11903: PPUSH
11904: CALL_OW 258
11908: PUSH
11909: LD_INT 1
11911: EQUAL
11912: IFFALSE 11940
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
11914: LD_VAR 0 1
11918: PPUSH
11919: LD_STRING D3-Soldier1-Sol1-1
11921: PPUSH
11922: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11926: LD_EXP 14
11930: PPUSH
11931: LD_STRING D3-Soldier1-JMM-1
11933: PPUSH
11934: CALL_OW 88
// end else
11938: GO 11964
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
11940: LD_VAR 0 1
11944: PPUSH
11945: LD_STRING D3-Soldier2-FSol2-1
11947: PPUSH
11948: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11952: LD_EXP 14
11956: PPUSH
11957: LD_STRING D3-Soldier2-JMM-1
11959: PPUSH
11960: CALL_OW 88
// end ; end else
11964: GO 12055
// begin if GetSex ( unit ) = sex_male then
11966: LD_VAR 0 1
11970: PPUSH
11971: CALL_OW 258
11975: PUSH
11976: LD_INT 1
11978: EQUAL
11979: IFFALSE 12019
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
11981: LD_VAR 0 1
11985: PPUSH
11986: LD_STRING D4-Soldier2-Sol1-1
11988: PPUSH
11989: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
11993: LD_EXP 14
11997: PPUSH
11998: LD_STRING D4-Soldier2-JMM-1
12000: PPUSH
12001: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12005: LD_VAR 0 1
12009: PPUSH
12010: LD_STRING D4-Soldier2-Sol2-1
12012: PPUSH
12013: CALL_OW 88
// end else
12017: GO 12055
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12019: LD_VAR 0 1
12023: PPUSH
12024: LD_STRING D4-Soldier1-FSol1-1
12026: PPUSH
12027: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12031: LD_EXP 14
12035: PPUSH
12036: LD_STRING D4-Soldier1-JMM-1
12038: PPUSH
12039: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12043: LD_VAR 0 1
12047: PPUSH
12048: LD_STRING D4-Soldier1-FSol1-2
12050: PPUSH
12051: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12055: CALL_OW 7
// InGameOff ;
12059: CALL_OW 9
// if building then
12063: LD_VAR 0 3
12067: IFFALSE 12168
// begin SetSide ( JMM , side ) ;
12069: LD_EXP 14
12073: PPUSH
12074: LD_VAR 0 4
12078: PPUSH
12079: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12083: LD_EXP 14
12087: PPUSH
12088: CALL_OW 122
// if joined then
12092: LD_VAR 0 5
12096: IFFALSE 12135
// begin SetSide ( unit , side ) ;
12098: LD_VAR 0 1
12102: PPUSH
12103: LD_VAR 0 4
12107: PPUSH
12108: CALL_OW 235
// SetSide ( building , 1 ) ;
12112: LD_VAR 0 3
12116: PPUSH
12117: LD_INT 1
12119: PPUSH
12120: CALL_OW 235
// ComExitBuilding ( unit ) ;
12124: LD_VAR 0 1
12128: PPUSH
12129: CALL_OW 122
// end else
12133: GO 12166
// begin wait ( 0 0$10 ) ;
12135: LD_INT 350
12137: PPUSH
12138: CALL_OW 67
// SetSide ( unit , 1 ) ;
12142: LD_VAR 0 1
12146: PPUSH
12147: LD_INT 1
12149: PPUSH
12150: CALL_OW 235
// SetSide ( building , 1 ) ;
12154: LD_VAR 0 3
12158: PPUSH
12159: LD_INT 1
12161: PPUSH
12162: CALL_OW 235
// end ; end else
12166: GO 12247
// begin ComStop ( [ JMM , unit ] ) ;
12168: LD_EXP 14
12172: PUSH
12173: LD_VAR 0 1
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PPUSH
12182: CALL_OW 141
// if joined then
12186: LD_VAR 0 5
12190: IFFALSE 12208
// SetSide ( unit , side ) else
12192: LD_VAR 0 1
12196: PPUSH
12197: LD_VAR 0 4
12201: PPUSH
12202: CALL_OW 235
12206: GO 12247
// begin repeat wait ( 0 0$1 ) ;
12208: LD_INT 35
12210: PPUSH
12211: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12215: LD_EXP 14
12219: PPUSH
12220: LD_VAR 0 1
12224: PPUSH
12225: CALL_OW 296
12229: PUSH
12230: LD_INT 11
12232: GREATER
12233: IFFALSE 12208
// SetSide ( unit , 1 ) ;
12235: LD_VAR 0 1
12239: PPUSH
12240: LD_INT 1
12242: PPUSH
12243: CALL_OW 235
// end ; end ; end ;
12247: LD_VAR 0 2
12251: RET
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12252: LD_EXP 14
12256: PPUSH
12257: CALL_OW 310
12261: PUSH
12262: LD_INT 47
12264: EQUAL
12265: IFFALSE 12333
12267: GO 12269
12269: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12270: LD_STRING M1a
12272: PPUSH
12273: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12277: LD_INT 13
12279: PPUSH
12280: LD_INT 7
12282: PPUSH
12283: LD_INT 2
12285: PPUSH
12286: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12290: LD_INT 29
12292: PPUSH
12293: LD_INT 7
12295: PPUSH
12296: LD_INT 2
12298: PPUSH
12299: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12303: LD_EXP 14
12307: PPUSH
12308: LD_INT 9
12310: PPUSH
12311: CALL_OW 336
// can_escape := true ;
12315: LD_ADDR_EXP 6
12319: PUSH
12320: LD_INT 1
12322: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12323: LD_INT 19
12325: PPUSH
12326: LD_INT 1
12328: PPUSH
12329: CALL_OW 424
// end ;
12333: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12334: LD_EXP 16
12338: PPUSH
12339: CALL_OW 256
12343: PUSH
12344: LD_INT 999
12346: LESS
12347: IFFALSE 12398
12349: GO 12351
12351: DISABLE
// begin enable ;
12352: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12353: LD_INT 25
12355: PPUSH
12356: LD_INT 48
12358: PPUSH
12359: CALL_OW 428
12363: PUSH
12364: LD_EXP 16
12368: EQUAL
12369: IFFALSE 12383
// begin RemoveUnit ( Powell ) ;
12371: LD_EXP 16
12375: PPUSH
12376: CALL_OW 64
// disable ;
12380: DISABLE
// end else
12381: GO 12398
// ComMoveXY ( Powell , 25 , 48 ) ;
12383: LD_EXP 16
12387: PPUSH
12388: LD_INT 25
12390: PPUSH
12391: LD_INT 48
12393: PPUSH
12394: CALL_OW 111
// end ;
12398: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12399: LD_INT 22
12401: PUSH
12402: LD_INT 4
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PUSH
12409: LD_INT 21
12411: PUSH
12412: LD_INT 1
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PUSH
12419: LD_INT 3
12421: PUSH
12422: LD_INT 24
12424: PUSH
12425: LD_INT 990
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: LIST
12440: PPUSH
12441: CALL_OW 69
12445: PUSH
12446: LD_EXP 15
12450: DIFF
12451: IFFALSE 12595
12453: GO 12455
12455: DISABLE
12456: LD_INT 0
12458: PPUSH
// begin enable ;
12459: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12460: LD_ADDR_VAR 0 1
12464: PUSH
12465: LD_INT 22
12467: PUSH
12468: LD_INT 4
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 21
12477: PUSH
12478: LD_INT 1
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PUSH
12485: LD_INT 3
12487: PUSH
12488: LD_INT 24
12490: PUSH
12491: LD_INT 990
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: LIST
12506: PPUSH
12507: CALL_OW 69
12511: PUSH
12512: LD_EXP 15
12516: DIFF
12517: PUSH
12518: FOR_IN
12519: IFFALSE 12593
// begin ComFree ( i ) ;
12521: LD_VAR 0 1
12525: PPUSH
12526: CALL_OW 139
// SetSide ( i , 1 ) ;
12530: LD_VAR 0 1
12534: PPUSH
12535: LD_INT 1
12537: PPUSH
12538: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
12542: LD_VAR 0 1
12546: PPUSH
12547: LD_EXP 14
12551: PPUSH
12552: CALL_OW 296
12556: PUSH
12557: LD_INT 14
12559: LESS
12560: IFFALSE 12591
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
12562: LD_VAR 0 1
12566: PPUSH
12567: LD_EXP 14
12571: PPUSH
12572: CALL_OW 250
12576: PPUSH
12577: LD_EXP 14
12581: PPUSH
12582: CALL_OW 251
12586: PPUSH
12587: CALL_OW 114
// end ;
12591: GO 12518
12593: POP
12594: POP
// end ;
12595: PPOPN 1
12597: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
12598: LD_INT 22
12600: PUSH
12601: LD_INT 4
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: PUSH
12608: LD_INT 34
12610: PUSH
12611: LD_INT 12
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PPUSH
12622: CALL_OW 69
12626: IFFALSE 12708
12628: GO 12630
12630: DISABLE
12631: LD_INT 0
12633: PPUSH
// begin enable ;
12634: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
12635: LD_ADDR_VAR 0 1
12639: PUSH
12640: LD_INT 22
12642: PUSH
12643: LD_INT 4
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 34
12652: PUSH
12653: LD_INT 12
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: PPUSH
12664: CALL_OW 69
12668: PUSH
12669: FOR_IN
12670: IFFALSE 12706
// if GetDistUnits ( i , JMM ) < 6 then
12672: LD_VAR 0 1
12676: PPUSH
12677: LD_EXP 14
12681: PPUSH
12682: CALL_OW 296
12686: PUSH
12687: LD_INT 6
12689: LESS
12690: IFFALSE 12704
// SetSide ( i , 7 ) ;
12692: LD_VAR 0 1
12696: PPUSH
12697: LD_INT 7
12699: PPUSH
12700: CALL_OW 235
12704: GO 12669
12706: POP
12707: POP
// end ;
12708: PPOPN 1
12710: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
12711: LD_EXP 6
12715: PUSH
12716: LD_INT 19
12718: PPUSH
12719: LD_INT 22
12721: PUSH
12722: LD_INT 7
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: LD_INT 21
12731: PUSH
12732: LD_INT 1
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PPUSH
12743: CALL_OW 71
12747: NOT
12748: AND
12749: PUSH
12750: LD_INT 3
12752: PPUSH
12753: CALL_OW 469
12757: NOT
12758: AND
12759: PUSH
12760: LD_INT 5
12762: PPUSH
12763: CALL_OW 469
12767: NOT
12768: AND
12769: IFFALSE 14399
12771: GO 12773
12773: DISABLE
12774: LD_INT 0
12776: PPUSH
12777: PPUSH
12778: PPUSH
12779: PPUSH
12780: PPUSH
// begin m1 := false ;
12781: LD_ADDR_VAR 0 3
12785: PUSH
12786: LD_INT 0
12788: ST_TO_ADDR
// m2 := false ;
12789: LD_ADDR_VAR 0 4
12793: PUSH
12794: LD_INT 0
12796: ST_TO_ADDR
// m3 := false ;
12797: LD_ADDR_VAR 0 5
12801: PUSH
12802: LD_INT 0
12804: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
12805: LD_ADDR_VAR 0 1
12809: PUSH
12810: LD_EXP 3
12814: PPUSH
12815: LD_INT 22
12817: PUSH
12818: LD_INT 4
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: LD_INT 21
12827: PUSH
12828: LD_INT 1
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: PPUSH
12839: CALL_OW 72
12843: PUSH
12844: LD_INT 0
12846: EQUAL
12847: ST_TO_ADDR
// if not all_taken then
12848: LD_VAR 0 1
12852: NOT
12853: IFFALSE 12994
// case query ( Q1 ) of 1 :
12855: LD_STRING Q1
12857: PPUSH
12858: CALL_OW 97
12862: PUSH
12863: LD_INT 1
12865: DOUBLE
12866: EQUAL
12867: IFTRUE 12871
12869: GO 12982
12871: POP
// begin repeat wait ( 0 0$1 ) ;
12872: LD_INT 35
12874: PPUSH
12875: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
12879: LD_EXP 3
12883: PPUSH
12884: LD_INT 22
12886: PUSH
12887: LD_INT 4
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PUSH
12894: LD_INT 21
12896: PUSH
12897: LD_INT 1
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: PPUSH
12908: CALL_OW 72
12912: PUSH
12913: LD_INT 0
12915: EQUAL
12916: PUSH
12917: LD_INT 19
12919: PPUSH
12920: LD_INT 22
12922: PUSH
12923: LD_INT 7
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 21
12932: PUSH
12933: LD_INT 1
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PPUSH
12944: CALL_OW 71
12948: NOT
12949: AND
12950: PUSH
12951: LD_INT 3
12953: PPUSH
12954: CALL_OW 469
12958: NOT
12959: AND
12960: PUSH
12961: LD_INT 5
12963: PPUSH
12964: CALL_OW 469
12968: NOT
12969: AND
12970: IFFALSE 12872
// all_taken := true ;
12972: LD_ADDR_VAR 0 1
12976: PUSH
12977: LD_INT 1
12979: ST_TO_ADDR
// end ; 2 :
12980: GO 12994
12982: LD_INT 2
12984: DOUBLE
12985: EQUAL
12986: IFTRUE 12990
12988: GO 12993
12990: POP
// ; end ;
12991: GO 12994
12993: POP
// if team_kill_counter = 0 then
12994: LD_EXP 9
12998: PUSH
12999: LD_INT 0
13001: EQUAL
13002: IFFALSE 13018
// Say ( JMM , D5-JMM-1 ) else
13004: LD_EXP 14
13008: PPUSH
13009: LD_STRING D5-JMM-1
13011: PPUSH
13012: CALL_OW 88
13016: GO 13030
// Say ( JMM , D5-JMM-1a ) ;
13018: LD_EXP 14
13022: PPUSH
13023: LD_STRING D5-JMM-1a
13025: PPUSH
13026: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13030: LD_INT 22
13032: PUSH
13033: LD_INT 7
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: PUSH
13040: LD_INT 21
13042: PUSH
13043: LD_INT 1
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PUSH
13050: LD_INT 23
13052: PUSH
13053: LD_INT 1
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: LIST
13064: PPUSH
13065: CALL_OW 69
13069: PUSH
13070: LD_EXP 14
13074: PUSH
13075: LD_EXP 15
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: DIFF
13084: PUSH
13085: LD_INT 10
13087: GREATEREQUAL
13088: IFFALSE 13097
// SetAchievement ( ACH_TEAM ) ;
13090: LD_STRING ACH_TEAM
13092: PPUSH
13093: CALL_OW 543
// if not invis_used then
13097: LD_EXP 12
13101: NOT
13102: IFFALSE 13118
// begin wait ( 3 ) ;
13104: LD_INT 3
13106: PPUSH
13107: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13111: LD_STRING ACH_NOINVIS
13113: PPUSH
13114: CALL_OW 543
// end ; if not alert then
13118: LD_EXP 13
13122: NOT
13123: IFFALSE 13139
// begin wait ( 3 ) ;
13125: LD_INT 3
13127: PPUSH
13128: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13132: LD_STRING ACH_ALARM
13134: PPUSH
13135: CALL_OW 543
// end ; if tick < 15 15$00 then
13139: LD_OWVAR 1
13143: PUSH
13144: LD_INT 31500
13146: LESS
13147: IFFALSE 13163
// begin wait ( 3 ) ;
13149: LD_INT 3
13151: PPUSH
13152: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13156: LD_STRING ACH_ASPEED_16
13158: PPUSH
13159: CALL_OW 543
// end ; if all_taken then
13163: LD_VAR 0 1
13167: IFFALSE 13189
// begin AddMedal ( All , 1 ) ;
13169: LD_STRING All
13171: PPUSH
13172: LD_INT 1
13174: PPUSH
13175: CALL_OW 101
// m1 := true ;
13179: LD_ADDR_VAR 0 3
13183: PUSH
13184: LD_INT 1
13186: ST_TO_ADDR
// end else
13187: GO 13200
// AddMedal ( All , - 1 ) ;
13189: LD_STRING All
13191: PPUSH
13192: LD_INT 1
13194: NEG
13195: PPUSH
13196: CALL_OW 101
// if team_kill_counter then
13200: LD_EXP 9
13204: IFFALSE 13219
// AddMedal ( Save , - 1 ) else
13206: LD_STRING Save
13208: PPUSH
13209: LD_INT 1
13211: NEG
13212: PPUSH
13213: CALL_OW 101
13217: GO 13237
// begin AddMedal ( Save , 1 ) ;
13219: LD_STRING Save
13221: PPUSH
13222: LD_INT 1
13224: PPUSH
13225: CALL_OW 101
// m2 := true ;
13229: LD_ADDR_VAR 0 4
13233: PUSH
13234: LD_INT 1
13236: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13237: LD_EXP 8
13241: PUSH
13242: LD_INT 2
13244: PUSH
13245: LD_INT 2
13247: PUSH
13248: LD_INT 1
13250: PUSH
13251: LD_INT 1
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: PUSH
13260: LD_OWVAR 67
13264: ARRAY
13265: GREATEREQUAL
13266: IFFALSE 13281
// AddMedal ( Friendship , - 1 ) else
13268: LD_STRING Friendship
13270: PPUSH
13271: LD_INT 1
13273: NEG
13274: PPUSH
13275: CALL_OW 101
13279: GO 13299
// begin AddMedal ( Friendship , 1 ) ;
13281: LD_STRING Friendship
13283: PPUSH
13284: LD_INT 1
13286: PPUSH
13287: CALL_OW 101
// m3 := true ;
13291: LD_ADDR_VAR 0 5
13295: PUSH
13296: LD_INT 1
13298: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13299: LD_VAR 0 3
13303: PUSH
13304: LD_VAR 0 4
13308: AND
13309: PUSH
13310: LD_VAR 0 5
13314: AND
13315: PUSH
13316: LD_OWVAR 67
13320: PUSH
13321: LD_INT 3
13323: GREATEREQUAL
13324: AND
13325: IFFALSE 13337
// SetAchievementEX ( ACH_AMER , 16 ) ;
13327: LD_STRING ACH_AMER
13329: PPUSH
13330: LD_INT 16
13332: PPUSH
13333: CALL_OW 564
// GiveMedals ( MAIN ) ;
13337: LD_STRING MAIN
13339: PPUSH
13340: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ] ) ;
13344: LD_ADDR_VAR 0 2
13348: PUSH
13349: LD_INT 22
13351: PUSH
13352: LD_INT 7
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 2
13361: PUSH
13362: LD_INT 25
13364: PUSH
13365: LD_INT 1
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: LD_INT 25
13374: PUSH
13375: LD_INT 2
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PUSH
13382: LD_INT 25
13384: PUSH
13385: LD_INT 3
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 25
13394: PUSH
13395: LD_INT 4
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: LD_INT 25
13404: PUSH
13405: LD_INT 5
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 25
13414: PUSH
13415: LD_INT 8
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 25
13424: PUSH
13425: LD_INT 9
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: EMPTY
13447: LIST
13448: PPUSH
13449: CALL_OW 69
13453: ST_TO_ADDR
// RewardPeople ( tmp ^ Roth ) ;
13454: LD_VAR 0 2
13458: PUSH
13459: LD_EXP 15
13463: ADD
13464: PPUSH
13465: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
13469: LD_EXP 14
13473: PPUSH
13474: LD_STRING 12a_JMM
13476: PPUSH
13477: CALL_OW 38
// if IsLive ( Roth ) then
13481: LD_EXP 15
13485: PPUSH
13486: CALL_OW 300
13490: IFFALSE 13504
// SaveCharacters ( Roth , 12a_Roth ) ;
13492: LD_EXP 15
13496: PPUSH
13497: LD_STRING 12a_Roth
13499: PPUSH
13500: CALL_OW 38
// if Lisa in tmp then
13504: LD_EXP 23
13508: PUSH
13509: LD_VAR 0 2
13513: IN
13514: IFFALSE 13530
// SaveCharacters ( Lisa , 12a_Lisa ) else
13516: LD_EXP 23
13520: PPUSH
13521: LD_STRING 12a_Lisa
13523: PPUSH
13524: CALL_OW 38
13528: GO 13548
// if Lisa then
13530: LD_EXP 23
13534: IFFALSE 13548
// SaveCharacters ( Lisa , 12p_Lisa ) ;
13536: LD_EXP 23
13540: PPUSH
13541: LD_STRING 12p_Lisa
13543: PPUSH
13544: CALL_OW 38
// if Donaldson in tmp then
13548: LD_EXP 24
13552: PUSH
13553: LD_VAR 0 2
13557: IN
13558: IFFALSE 13574
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
13560: LD_EXP 24
13564: PPUSH
13565: LD_STRING 12a_Donaldson
13567: PPUSH
13568: CALL_OW 38
13572: GO 13592
// if Donaldson then
13574: LD_EXP 24
13578: IFFALSE 13592
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
13580: LD_EXP 24
13584: PPUSH
13585: LD_STRING 12p_Donaldson
13587: PPUSH
13588: CALL_OW 38
// if Bobby in tmp then
13592: LD_EXP 25
13596: PUSH
13597: LD_VAR 0 2
13601: IN
13602: IFFALSE 13618
// SaveCharacters ( Bobby , 12a_Bobby ) else
13604: LD_EXP 25
13608: PPUSH
13609: LD_STRING 12a_Bobby
13611: PPUSH
13612: CALL_OW 38
13616: GO 13636
// if Bobby then
13618: LD_EXP 25
13622: IFFALSE 13636
// SaveCharacters ( Bobby , 12p_Bobby ) ;
13624: LD_EXP 25
13628: PPUSH
13629: LD_STRING 12p_Bobby
13631: PPUSH
13632: CALL_OW 38
// if Cyrus in tmp then
13636: LD_EXP 26
13640: PUSH
13641: LD_VAR 0 2
13645: IN
13646: IFFALSE 13662
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
13648: LD_EXP 26
13652: PPUSH
13653: LD_STRING 12a_Cyrus
13655: PPUSH
13656: CALL_OW 38
13660: GO 13680
// if Cyrus then
13662: LD_EXP 26
13666: IFFALSE 13680
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
13668: LD_EXP 26
13672: PPUSH
13673: LD_STRING 12p_Cyrus
13675: PPUSH
13676: CALL_OW 38
// if Denis in tmp then
13680: LD_EXP 27
13684: PUSH
13685: LD_VAR 0 2
13689: IN
13690: IFFALSE 13704
// SaveCharacters ( Denis , 12a_Denis ) ;
13692: LD_EXP 27
13696: PPUSH
13697: LD_STRING 12a_Denis
13699: PPUSH
13700: CALL_OW 38
// if Brown in tmp then
13704: LD_EXP 28
13708: PUSH
13709: LD_VAR 0 2
13713: IN
13714: IFFALSE 13730
// SaveCharacters ( Brown , 12a_Brown ) else
13716: LD_EXP 28
13720: PPUSH
13721: LD_STRING 12a_Brown
13723: PPUSH
13724: CALL_OW 38
13728: GO 13754
// if Brown in tmp then
13730: LD_EXP 28
13734: PUSH
13735: LD_VAR 0 2
13739: IN
13740: IFFALSE 13754
// SaveCharacters ( Brown , 12p_Brown ) ;
13742: LD_EXP 28
13746: PPUSH
13747: LD_STRING 12p_Brown
13749: PPUSH
13750: CALL_OW 38
// if Gladstone in tmp then
13754: LD_EXP 29
13758: PUSH
13759: LD_VAR 0 2
13763: IN
13764: IFFALSE 13780
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
13766: LD_EXP 29
13770: PPUSH
13771: LD_STRING 12a_Gladstone
13773: PPUSH
13774: CALL_OW 38
13778: GO 13798
// if Gladstone then
13780: LD_EXP 29
13784: IFFALSE 13798
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
13786: LD_EXP 29
13790: PPUSH
13791: LD_STRING 12p_Gladstone
13793: PPUSH
13794: CALL_OW 38
// if Houten in tmp then
13798: LD_EXP 30
13802: PUSH
13803: LD_VAR 0 2
13807: IN
13808: IFFALSE 13824
// SaveCharacters ( Houten , 12a_Houten ) else
13810: LD_EXP 30
13814: PPUSH
13815: LD_STRING 12a_Houten
13817: PPUSH
13818: CALL_OW 38
13822: GO 13842
// if Houten then
13824: LD_EXP 30
13828: IFFALSE 13842
// SaveCharacters ( Houten , 12p_Houten ) ;
13830: LD_EXP 30
13834: PPUSH
13835: LD_STRING 12p_Houten
13837: PPUSH
13838: CALL_OW 38
// if Cornel in tmp then
13842: LD_EXP 31
13846: PUSH
13847: LD_VAR 0 2
13851: IN
13852: IFFALSE 13868
// SaveCharacters ( Cornel , 12a_Cornell ) else
13854: LD_EXP 31
13858: PPUSH
13859: LD_STRING 12a_Cornell
13861: PPUSH
13862: CALL_OW 38
13866: GO 13886
// if Cornel then
13868: LD_EXP 31
13872: IFFALSE 13886
// SaveCharacters ( Cornel , 12p_Cornell ) ;
13874: LD_EXP 31
13878: PPUSH
13879: LD_STRING 12p_Cornell
13881: PPUSH
13882: CALL_OW 38
// if Gary in tmp then
13886: LD_EXP 32
13890: PUSH
13891: LD_VAR 0 2
13895: IN
13896: IFFALSE 13912
// SaveCharacters ( Gary , 12a_Gary ) else
13898: LD_EXP 32
13902: PPUSH
13903: LD_STRING 12a_Gary
13905: PPUSH
13906: CALL_OW 38
13910: GO 13930
// if Gary then
13912: LD_EXP 32
13916: IFFALSE 13930
// SaveCharacters ( Gary , 12p_Gary ) ;
13918: LD_EXP 32
13922: PPUSH
13923: LD_STRING 12p_Gary
13925: PPUSH
13926: CALL_OW 38
// if Frank in tmp then
13930: LD_EXP 33
13934: PUSH
13935: LD_VAR 0 2
13939: IN
13940: IFFALSE 13954
// SaveCharacters ( Frank , 12a_Frank ) ;
13942: LD_EXP 33
13946: PPUSH
13947: LD_STRING 12a_Frank
13949: PPUSH
13950: CALL_OW 38
// if Kikuchi in tmp then
13954: LD_EXP 34
13958: PUSH
13959: LD_VAR 0 2
13963: IN
13964: IFFALSE 13980
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
13966: LD_EXP 34
13970: PPUSH
13971: LD_STRING 12a_Kikuchi
13973: PPUSH
13974: CALL_OW 38
13978: GO 13998
// if Kikuchi then
13980: LD_EXP 34
13984: IFFALSE 13998
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
13986: LD_EXP 34
13990: PPUSH
13991: LD_STRING 12p_Kikuchi
13993: PPUSH
13994: CALL_OW 38
// if Simms in tmp then
13998: LD_EXP 35
14002: PUSH
14003: LD_VAR 0 2
14007: IN
14008: IFFALSE 14022
// SaveCharacters ( Simms , 12a_Simms ) ;
14010: LD_EXP 35
14014: PPUSH
14015: LD_STRING 12a_Simms
14017: PPUSH
14018: CALL_OW 38
// if Joan in tmp then
14022: LD_EXP 36
14026: PUSH
14027: LD_VAR 0 2
14031: IN
14032: IFFALSE 14046
// SaveCharacters ( Joan , 12a_Joan ) ;
14034: LD_EXP 36
14038: PPUSH
14039: LD_STRING 12a_Joan
14041: PPUSH
14042: CALL_OW 38
// if DeltaDoctor in tmp then
14046: LD_EXP 37
14050: PUSH
14051: LD_VAR 0 2
14055: IN
14056: IFFALSE 14070
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14058: LD_EXP 37
14062: PPUSH
14063: LD_STRING 12a_DeltaDoctor
14065: PPUSH
14066: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ] ;
14070: LD_ADDR_VAR 0 2
14074: PUSH
14075: LD_VAR 0 2
14079: PUSH
14080: LD_EXP 14
14084: PUSH
14085: LD_EXP 15
14089: PUSH
14090: LD_EXP 23
14094: PUSH
14095: LD_EXP 24
14099: PUSH
14100: LD_EXP 25
14104: PUSH
14105: LD_EXP 26
14109: PUSH
14110: LD_EXP 27
14114: PUSH
14115: LD_EXP 28
14119: PUSH
14120: LD_EXP 29
14124: PUSH
14125: LD_EXP 30
14129: PUSH
14130: LD_EXP 31
14134: PUSH
14135: LD_EXP 32
14139: PUSH
14140: LD_EXP 33
14144: PUSH
14145: LD_EXP 34
14149: PUSH
14150: LD_EXP 35
14154: PUSH
14155: LD_EXP 36
14159: PUSH
14160: LD_EXP 37
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: DIFF
14184: ST_TO_ADDR
// if tmp then
14185: LD_VAR 0 2
14189: IFFALSE 14203
// SaveCharacters ( tmp , 12a_others ) ;
14191: LD_VAR 0 2
14195: PPUSH
14196: LD_STRING 12a_others
14198: PPUSH
14199: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell ] ;
14203: LD_ADDR_VAR 0 2
14207: PUSH
14208: LD_INT 21
14210: PUSH
14211: LD_INT 1
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PUSH
14218: LD_INT 23
14220: PUSH
14221: LD_INT 1
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PUSH
14228: LD_INT 2
14230: PUSH
14231: LD_INT 22
14233: PUSH
14234: LD_INT 1
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PUSH
14241: LD_INT 22
14243: PUSH
14244: LD_INT 4
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: LIST
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: LIST
14260: PPUSH
14261: CALL_OW 69
14265: PUSH
14266: LD_EXP 14
14270: PUSH
14271: LD_EXP 15
14275: PUSH
14276: LD_EXP 23
14280: PUSH
14281: LD_EXP 24
14285: PUSH
14286: LD_EXP 25
14290: PUSH
14291: LD_EXP 26
14295: PUSH
14296: LD_EXP 27
14300: PUSH
14301: LD_EXP 28
14305: PUSH
14306: LD_EXP 29
14310: PUSH
14311: LD_EXP 30
14315: PUSH
14316: LD_EXP 31
14320: PUSH
14321: LD_EXP 32
14325: PUSH
14326: LD_EXP 33
14330: PUSH
14331: LD_EXP 34
14335: PUSH
14336: LD_EXP 35
14340: PUSH
14341: LD_EXP 36
14345: PUSH
14346: LD_EXP 37
14350: PUSH
14351: LD_EXP 16
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: DIFF
14376: ST_TO_ADDR
// if tmp then
14377: LD_VAR 0 2
14381: IFFALSE 14395
// SaveCharacters ( tmp , 12p_others ) ;
14383: LD_VAR 0 2
14387: PPUSH
14388: LD_STRING 12p_others
14390: PPUSH
14391: CALL_OW 38
// YouWin ;
14395: CALL_OW 103
// end ; end_of_file
14399: PPOPN 5
14401: END
// on SailEvent ( event ) do var tmp ;
14402: LD_INT 0
14404: PPUSH
// begin if event = 1 then
14405: LD_VAR 0 1
14409: PUSH
14410: LD_INT 1
14412: EQUAL
14413: IFFALSE 14486
// begin if not mobile_patrol then
14415: LD_EXP 17
14419: NOT
14420: IFFALSE 14424
// exit ;
14422: GO 14486
// tmp := mobile_patrol [ mobile_patrol ] ;
14424: LD_ADDR_VAR 0 2
14428: PUSH
14429: LD_EXP 17
14433: PUSH
14434: LD_EXP 17
14438: ARRAY
14439: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
14440: LD_ADDR_EXP 17
14444: PUSH
14445: LD_EXP 17
14449: PPUSH
14450: LD_EXP 17
14454: PPUSH
14455: CALL_OW 3
14459: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
14460: LD_VAR 0 2
14464: PPUSH
14465: LD_EXP 18
14469: PUSH
14470: LD_EXP 17
14474: PUSH
14475: LD_INT 1
14477: PLUS
14478: ARRAY
14479: PPUSH
14480: EMPTY
14481: PPUSH
14482: CALL 6669 0 3
// end ; end ;
14486: PPOPN 2
14488: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
14489: LD_VAR 0 1
14493: PPUSH
14494: CALL 30658 0 1
// if un = JMM then
14498: LD_VAR 0 1
14502: PUSH
14503: LD_EXP 14
14507: EQUAL
14508: IFFALSE 14517
// YouLost ( JMM ) ;
14510: LD_STRING JMM
14512: PPUSH
14513: CALL_OW 104
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
14517: LD_VAR 0 1
14521: PPUSH
14522: CALL_OW 255
14526: PUSH
14527: LD_INT 7
14529: EQUAL
14530: PUSH
14531: LD_VAR 0 1
14535: PPUSH
14536: CALL_OW 264
14540: PUSH
14541: LD_INT 12
14543: EQUAL
14544: AND
14545: IFFALSE 14554
// YouLost ( Artifact ) ;
14547: LD_STRING Artifact
14549: PPUSH
14550: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
14554: LD_VAR 0 1
14558: PPUSH
14559: CALL_OW 255
14563: PUSH
14564: LD_INT 7
14566: EQUAL
14567: PUSH
14568: LD_VAR 0 1
14572: PPUSH
14573: CALL_OW 247
14577: PUSH
14578: LD_INT 1
14580: EQUAL
14581: AND
14582: PUSH
14583: LD_VAR 0 1
14587: PUSH
14588: LD_EXP 15
14592: EQUAL
14593: OR
14594: IFFALSE 14610
// team_kill_counter := team_kill_counter + 1 ;
14596: LD_ADDR_EXP 9
14600: PUSH
14601: LD_EXP 9
14605: PUSH
14606: LD_INT 1
14608: PLUS
14609: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
14610: LD_VAR 0 1
14614: PPUSH
14615: CALL_OW 255
14619: PUSH
14620: LD_INT 1
14622: EQUAL
14623: PUSH
14624: LD_VAR 0 1
14628: PPUSH
14629: CALL_OW 247
14633: PUSH
14634: LD_INT 1
14636: EQUAL
14637: AND
14638: IFFALSE 14654
// friends_kill_counter := friends_kill_counter + 1 ;
14640: LD_ADDR_EXP 8
14644: PUSH
14645: LD_EXP 8
14649: PUSH
14650: LD_INT 1
14652: PLUS
14653: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
14654: LD_VAR 0 1
14658: PPUSH
14659: CALL_OW 255
14663: PUSH
14664: LD_INT 1
14666: NONEQUAL
14667: IFFALSE 14671
// exit ;
14669: GO 14748
// if GetControl ( un ) = control_remote then
14671: LD_VAR 0 1
14675: PPUSH
14676: CALL_OW 263
14680: PUSH
14681: LD_INT 2
14683: EQUAL
14684: IFFALSE 14702
// defenders := defenders diff un ;
14686: LD_ADDR_EXP 20
14690: PUSH
14691: LD_EXP 20
14695: PUSH
14696: LD_VAR 0 1
14700: DIFF
14701: ST_TO_ADDR
// if not un in defenders then
14702: LD_VAR 0 1
14706: PUSH
14707: LD_EXP 20
14711: IN
14712: NOT
14713: IFFALSE 14748
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
14715: LD_ADDR_EXP 21
14719: PUSH
14720: LD_VAR 0 1
14724: PPUSH
14725: CALL_OW 250
14729: PUSH
14730: LD_VAR 0 1
14734: PPUSH
14735: CALL_OW 251
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: ST_TO_ADDR
// Defend ;
14744: CALL 2791 0 0
// end ; end ;
14748: PPOPN 1
14750: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
14751: LD_VAR 0 1
14755: PPUSH
14756: LD_VAR 0 2
14760: PPUSH
14761: CALL 30778 0 2
// if GetSide ( veh ) <> 1 then
14765: LD_VAR 0 1
14769: PPUSH
14770: CALL_OW 255
14774: PUSH
14775: LD_INT 1
14777: NONEQUAL
14778: IFFALSE 14782
// exit ;
14780: GO 14806
// if GetControl ( veh ) = control_remote then
14782: LD_VAR 0 1
14786: PPUSH
14787: CALL_OW 263
14791: PUSH
14792: LD_INT 2
14794: EQUAL
14795: IFFALSE 14806
// Connect ( veh ) ;
14797: LD_VAR 0 1
14801: PPUSH
14802: CALL 43053 0 1
// end ;
14806: PPOPN 2
14808: END
// on UnitGoesToRed ( un ) do var i , veh ;
14809: LD_INT 0
14811: PPUSH
14812: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
14813: LD_VAR 0 1
14817: PPUSH
14818: CALL_OW 255
14822: PUSH
14823: LD_INT 1
14825: EQUAL
14826: PUSH
14827: LD_VAR 0 1
14831: PPUSH
14832: CALL_OW 263
14836: PUSH
14837: LD_INT 2
14839: EQUAL
14840: AND
14841: IFFALSE 14852
// ComUnlink ( un ) ;
14843: LD_VAR 0 1
14847: PPUSH
14848: CALL_OW 136
// if un = ambar0 then
14852: LD_VAR 0 1
14856: PUSH
14857: LD_INT 18
14859: EQUAL
14860: IFFALSE 14970
// begin uc_side := 1 ;
14862: LD_ADDR_OWVAR 20
14866: PUSH
14867: LD_INT 1
14869: ST_TO_ADDR
// uc_nation := 1 ;
14870: LD_ADDR_OWVAR 21
14874: PUSH
14875: LD_INT 1
14877: ST_TO_ADDR
// for i = 1 to 6 do
14878: LD_ADDR_VAR 0 2
14882: PUSH
14883: DOUBLE
14884: LD_INT 1
14886: DEC
14887: ST_TO_ADDR
14888: LD_INT 6
14890: PUSH
14891: FOR_TO
14892: IFFALSE 14968
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
14894: LD_INT 3
14896: PPUSH
14897: LD_INT 1
14899: PPUSH
14900: LD_INT 3
14902: PPUSH
14903: LD_INT 4
14905: PPUSH
14906: LD_INT 100
14908: PPUSH
14909: CALL 39962 0 5
// veh := CreateVehicle ;
14913: LD_ADDR_VAR 0 3
14917: PUSH
14918: CALL_OW 45
14922: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
14923: LD_VAR 0 3
14927: PPUSH
14928: LD_INT 1
14930: PPUSH
14931: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
14935: LD_VAR 0 3
14939: PPUSH
14940: LD_INT 25
14942: PPUSH
14943: LD_INT 0
14945: PPUSH
14946: CALL_OW 49
// defenders := defenders ^ veh ;
14950: LD_ADDR_EXP 20
14954: PUSH
14955: LD_EXP 20
14959: PUSH
14960: LD_VAR 0 3
14964: ADD
14965: ST_TO_ADDR
// end ;
14966: GO 14891
14968: POP
14969: POP
// end ; end ;
14970: PPOPN 3
14972: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
14973: LD_VAR 0 2
14977: PUSH
14978: LD_EXP 16
14982: EQUAL
14983: IFFALSE 14994
// RemoveUnit ( Powell ) ;
14985: LD_EXP 16
14989: PPUSH
14990: CALL_OW 64
// end ;
14994: PPOPN 2
14996: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
14997: LD_VAR 0 1
15001: PPUSH
15002: CALL 30762 0 1
// end ; end_of_file end_of_file
15006: PPOPN 1
15008: END
// every 0 0$1 do
15009: GO 15011
15011: DISABLE
// begin enable ;
15012: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15013: LD_STRING updateTimer(
15015: PUSH
15016: LD_OWVAR 1
15020: STR
15021: PUSH
15022: LD_STRING );
15024: STR
15025: PPUSH
15026: CALL_OW 559
// end ;
15030: END
// export function SOS_MapStart ( ) ; begin
15031: LD_INT 0
15033: PPUSH
// if streamModeActive then
15034: LD_EXP 38
15038: IFFALSE 15047
// DefineStreamItems ( true ) ;
15040: LD_INT 1
15042: PPUSH
15043: CALL 16701 0 1
// UpdateFactoryWaypoints ( ) ;
15047: CALL 29562 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15051: CALL 29819 0 0
// end ;
15055: LD_VAR 0 1
15059: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15060: LD_INT 0
15062: PPUSH
// if p2 = 100 then
15063: LD_VAR 0 2
15067: PUSH
15068: LD_INT 100
15070: EQUAL
15071: IFFALSE 16074
// begin if not StreamModeActive then
15073: LD_EXP 38
15077: NOT
15078: IFFALSE 15088
// StreamModeActive := true ;
15080: LD_ADDR_EXP 38
15084: PUSH
15085: LD_INT 1
15087: ST_TO_ADDR
// if p3 = 0 then
15088: LD_VAR 0 3
15092: PUSH
15093: LD_INT 0
15095: EQUAL
15096: IFFALSE 15102
// InitStreamMode ;
15098: CALL 16237 0 0
// if p3 = 1 then
15102: LD_VAR 0 3
15106: PUSH
15107: LD_INT 1
15109: EQUAL
15110: IFFALSE 15120
// sRocket := true ;
15112: LD_ADDR_EXP 43
15116: PUSH
15117: LD_INT 1
15119: ST_TO_ADDR
// if p3 = 2 then
15120: LD_VAR 0 3
15124: PUSH
15125: LD_INT 2
15127: EQUAL
15128: IFFALSE 15138
// sSpeed := true ;
15130: LD_ADDR_EXP 42
15134: PUSH
15135: LD_INT 1
15137: ST_TO_ADDR
// if p3 = 3 then
15138: LD_VAR 0 3
15142: PUSH
15143: LD_INT 3
15145: EQUAL
15146: IFFALSE 15156
// sEngine := true ;
15148: LD_ADDR_EXP 44
15152: PUSH
15153: LD_INT 1
15155: ST_TO_ADDR
// if p3 = 4 then
15156: LD_VAR 0 3
15160: PUSH
15161: LD_INT 4
15163: EQUAL
15164: IFFALSE 15174
// sSpec := true ;
15166: LD_ADDR_EXP 41
15170: PUSH
15171: LD_INT 1
15173: ST_TO_ADDR
// if p3 = 5 then
15174: LD_VAR 0 3
15178: PUSH
15179: LD_INT 5
15181: EQUAL
15182: IFFALSE 15192
// sLevel := true ;
15184: LD_ADDR_EXP 45
15188: PUSH
15189: LD_INT 1
15191: ST_TO_ADDR
// if p3 = 6 then
15192: LD_VAR 0 3
15196: PUSH
15197: LD_INT 6
15199: EQUAL
15200: IFFALSE 15210
// sArmoury := true ;
15202: LD_ADDR_EXP 46
15206: PUSH
15207: LD_INT 1
15209: ST_TO_ADDR
// if p3 = 7 then
15210: LD_VAR 0 3
15214: PUSH
15215: LD_INT 7
15217: EQUAL
15218: IFFALSE 15228
// sRadar := true ;
15220: LD_ADDR_EXP 47
15224: PUSH
15225: LD_INT 1
15227: ST_TO_ADDR
// if p3 = 8 then
15228: LD_VAR 0 3
15232: PUSH
15233: LD_INT 8
15235: EQUAL
15236: IFFALSE 15246
// sBunker := true ;
15238: LD_ADDR_EXP 48
15242: PUSH
15243: LD_INT 1
15245: ST_TO_ADDR
// if p3 = 9 then
15246: LD_VAR 0 3
15250: PUSH
15251: LD_INT 9
15253: EQUAL
15254: IFFALSE 15264
// sHack := true ;
15256: LD_ADDR_EXP 49
15260: PUSH
15261: LD_INT 1
15263: ST_TO_ADDR
// if p3 = 10 then
15264: LD_VAR 0 3
15268: PUSH
15269: LD_INT 10
15271: EQUAL
15272: IFFALSE 15282
// sFire := true ;
15274: LD_ADDR_EXP 50
15278: PUSH
15279: LD_INT 1
15281: ST_TO_ADDR
// if p3 = 11 then
15282: LD_VAR 0 3
15286: PUSH
15287: LD_INT 11
15289: EQUAL
15290: IFFALSE 15300
// sRefresh := true ;
15292: LD_ADDR_EXP 51
15296: PUSH
15297: LD_INT 1
15299: ST_TO_ADDR
// if p3 = 12 then
15300: LD_VAR 0 3
15304: PUSH
15305: LD_INT 12
15307: EQUAL
15308: IFFALSE 15318
// sExp := true ;
15310: LD_ADDR_EXP 52
15314: PUSH
15315: LD_INT 1
15317: ST_TO_ADDR
// if p3 = 13 then
15318: LD_VAR 0 3
15322: PUSH
15323: LD_INT 13
15325: EQUAL
15326: IFFALSE 15336
// sDepot := true ;
15328: LD_ADDR_EXP 53
15332: PUSH
15333: LD_INT 1
15335: ST_TO_ADDR
// if p3 = 14 then
15336: LD_VAR 0 3
15340: PUSH
15341: LD_INT 14
15343: EQUAL
15344: IFFALSE 15354
// sFlag := true ;
15346: LD_ADDR_EXP 54
15350: PUSH
15351: LD_INT 1
15353: ST_TO_ADDR
// if p3 = 15 then
15354: LD_VAR 0 3
15358: PUSH
15359: LD_INT 15
15361: EQUAL
15362: IFFALSE 15372
// sKamikadze := true ;
15364: LD_ADDR_EXP 62
15368: PUSH
15369: LD_INT 1
15371: ST_TO_ADDR
// if p3 = 16 then
15372: LD_VAR 0 3
15376: PUSH
15377: LD_INT 16
15379: EQUAL
15380: IFFALSE 15390
// sTroll := true ;
15382: LD_ADDR_EXP 63
15386: PUSH
15387: LD_INT 1
15389: ST_TO_ADDR
// if p3 = 17 then
15390: LD_VAR 0 3
15394: PUSH
15395: LD_INT 17
15397: EQUAL
15398: IFFALSE 15408
// sSlow := true ;
15400: LD_ADDR_EXP 64
15404: PUSH
15405: LD_INT 1
15407: ST_TO_ADDR
// if p3 = 18 then
15408: LD_VAR 0 3
15412: PUSH
15413: LD_INT 18
15415: EQUAL
15416: IFFALSE 15426
// sLack := true ;
15418: LD_ADDR_EXP 65
15422: PUSH
15423: LD_INT 1
15425: ST_TO_ADDR
// if p3 = 19 then
15426: LD_VAR 0 3
15430: PUSH
15431: LD_INT 19
15433: EQUAL
15434: IFFALSE 15444
// sTank := true ;
15436: LD_ADDR_EXP 67
15440: PUSH
15441: LD_INT 1
15443: ST_TO_ADDR
// if p3 = 20 then
15444: LD_VAR 0 3
15448: PUSH
15449: LD_INT 20
15451: EQUAL
15452: IFFALSE 15462
// sRemote := true ;
15454: LD_ADDR_EXP 68
15458: PUSH
15459: LD_INT 1
15461: ST_TO_ADDR
// if p3 = 21 then
15462: LD_VAR 0 3
15466: PUSH
15467: LD_INT 21
15469: EQUAL
15470: IFFALSE 15480
// sPowell := true ;
15472: LD_ADDR_EXP 69
15476: PUSH
15477: LD_INT 1
15479: ST_TO_ADDR
// if p3 = 22 then
15480: LD_VAR 0 3
15484: PUSH
15485: LD_INT 22
15487: EQUAL
15488: IFFALSE 15498
// sTeleport := true ;
15490: LD_ADDR_EXP 72
15494: PUSH
15495: LD_INT 1
15497: ST_TO_ADDR
// if p3 = 23 then
15498: LD_VAR 0 3
15502: PUSH
15503: LD_INT 23
15505: EQUAL
15506: IFFALSE 15516
// sOilTower := true ;
15508: LD_ADDR_EXP 74
15512: PUSH
15513: LD_INT 1
15515: ST_TO_ADDR
// if p3 = 24 then
15516: LD_VAR 0 3
15520: PUSH
15521: LD_INT 24
15523: EQUAL
15524: IFFALSE 15534
// sShovel := true ;
15526: LD_ADDR_EXP 75
15530: PUSH
15531: LD_INT 1
15533: ST_TO_ADDR
// if p3 = 25 then
15534: LD_VAR 0 3
15538: PUSH
15539: LD_INT 25
15541: EQUAL
15542: IFFALSE 15552
// sSheik := true ;
15544: LD_ADDR_EXP 76
15548: PUSH
15549: LD_INT 1
15551: ST_TO_ADDR
// if p3 = 26 then
15552: LD_VAR 0 3
15556: PUSH
15557: LD_INT 26
15559: EQUAL
15560: IFFALSE 15570
// sEarthquake := true ;
15562: LD_ADDR_EXP 78
15566: PUSH
15567: LD_INT 1
15569: ST_TO_ADDR
// if p3 = 27 then
15570: LD_VAR 0 3
15574: PUSH
15575: LD_INT 27
15577: EQUAL
15578: IFFALSE 15588
// sAI := true ;
15580: LD_ADDR_EXP 79
15584: PUSH
15585: LD_INT 1
15587: ST_TO_ADDR
// if p3 = 28 then
15588: LD_VAR 0 3
15592: PUSH
15593: LD_INT 28
15595: EQUAL
15596: IFFALSE 15606
// sCargo := true ;
15598: LD_ADDR_EXP 82
15602: PUSH
15603: LD_INT 1
15605: ST_TO_ADDR
// if p3 = 29 then
15606: LD_VAR 0 3
15610: PUSH
15611: LD_INT 29
15613: EQUAL
15614: IFFALSE 15624
// sDLaser := true ;
15616: LD_ADDR_EXP 83
15620: PUSH
15621: LD_INT 1
15623: ST_TO_ADDR
// if p3 = 30 then
15624: LD_VAR 0 3
15628: PUSH
15629: LD_INT 30
15631: EQUAL
15632: IFFALSE 15642
// sExchange := true ;
15634: LD_ADDR_EXP 84
15638: PUSH
15639: LD_INT 1
15641: ST_TO_ADDR
// if p3 = 31 then
15642: LD_VAR 0 3
15646: PUSH
15647: LD_INT 31
15649: EQUAL
15650: IFFALSE 15660
// sFac := true ;
15652: LD_ADDR_EXP 85
15656: PUSH
15657: LD_INT 1
15659: ST_TO_ADDR
// if p3 = 32 then
15660: LD_VAR 0 3
15664: PUSH
15665: LD_INT 32
15667: EQUAL
15668: IFFALSE 15678
// sPower := true ;
15670: LD_ADDR_EXP 86
15674: PUSH
15675: LD_INT 1
15677: ST_TO_ADDR
// if p3 = 33 then
15678: LD_VAR 0 3
15682: PUSH
15683: LD_INT 33
15685: EQUAL
15686: IFFALSE 15696
// sRandom := true ;
15688: LD_ADDR_EXP 87
15692: PUSH
15693: LD_INT 1
15695: ST_TO_ADDR
// if p3 = 34 then
15696: LD_VAR 0 3
15700: PUSH
15701: LD_INT 34
15703: EQUAL
15704: IFFALSE 15714
// sShield := true ;
15706: LD_ADDR_EXP 88
15710: PUSH
15711: LD_INT 1
15713: ST_TO_ADDR
// if p3 = 35 then
15714: LD_VAR 0 3
15718: PUSH
15719: LD_INT 35
15721: EQUAL
15722: IFFALSE 15732
// sTime := true ;
15724: LD_ADDR_EXP 89
15728: PUSH
15729: LD_INT 1
15731: ST_TO_ADDR
// if p3 = 36 then
15732: LD_VAR 0 3
15736: PUSH
15737: LD_INT 36
15739: EQUAL
15740: IFFALSE 15750
// sTools := true ;
15742: LD_ADDR_EXP 90
15746: PUSH
15747: LD_INT 1
15749: ST_TO_ADDR
// if p3 = 101 then
15750: LD_VAR 0 3
15754: PUSH
15755: LD_INT 101
15757: EQUAL
15758: IFFALSE 15768
// sSold := true ;
15760: LD_ADDR_EXP 55
15764: PUSH
15765: LD_INT 1
15767: ST_TO_ADDR
// if p3 = 102 then
15768: LD_VAR 0 3
15772: PUSH
15773: LD_INT 102
15775: EQUAL
15776: IFFALSE 15786
// sDiff := true ;
15778: LD_ADDR_EXP 56
15782: PUSH
15783: LD_INT 1
15785: ST_TO_ADDR
// if p3 = 103 then
15786: LD_VAR 0 3
15790: PUSH
15791: LD_INT 103
15793: EQUAL
15794: IFFALSE 15804
// sFog := true ;
15796: LD_ADDR_EXP 59
15800: PUSH
15801: LD_INT 1
15803: ST_TO_ADDR
// if p3 = 104 then
15804: LD_VAR 0 3
15808: PUSH
15809: LD_INT 104
15811: EQUAL
15812: IFFALSE 15822
// sReset := true ;
15814: LD_ADDR_EXP 60
15818: PUSH
15819: LD_INT 1
15821: ST_TO_ADDR
// if p3 = 105 then
15822: LD_VAR 0 3
15826: PUSH
15827: LD_INT 105
15829: EQUAL
15830: IFFALSE 15840
// sSun := true ;
15832: LD_ADDR_EXP 61
15836: PUSH
15837: LD_INT 1
15839: ST_TO_ADDR
// if p3 = 106 then
15840: LD_VAR 0 3
15844: PUSH
15845: LD_INT 106
15847: EQUAL
15848: IFFALSE 15858
// sTiger := true ;
15850: LD_ADDR_EXP 57
15854: PUSH
15855: LD_INT 1
15857: ST_TO_ADDR
// if p3 = 107 then
15858: LD_VAR 0 3
15862: PUSH
15863: LD_INT 107
15865: EQUAL
15866: IFFALSE 15876
// sBomb := true ;
15868: LD_ADDR_EXP 58
15872: PUSH
15873: LD_INT 1
15875: ST_TO_ADDR
// if p3 = 108 then
15876: LD_VAR 0 3
15880: PUSH
15881: LD_INT 108
15883: EQUAL
15884: IFFALSE 15894
// sWound := true ;
15886: LD_ADDR_EXP 66
15890: PUSH
15891: LD_INT 1
15893: ST_TO_ADDR
// if p3 = 109 then
15894: LD_VAR 0 3
15898: PUSH
15899: LD_INT 109
15901: EQUAL
15902: IFFALSE 15912
// sBetray := true ;
15904: LD_ADDR_EXP 70
15908: PUSH
15909: LD_INT 1
15911: ST_TO_ADDR
// if p3 = 110 then
15912: LD_VAR 0 3
15916: PUSH
15917: LD_INT 110
15919: EQUAL
15920: IFFALSE 15930
// sContamin := true ;
15922: LD_ADDR_EXP 71
15926: PUSH
15927: LD_INT 1
15929: ST_TO_ADDR
// if p3 = 111 then
15930: LD_VAR 0 3
15934: PUSH
15935: LD_INT 111
15937: EQUAL
15938: IFFALSE 15948
// sOil := true ;
15940: LD_ADDR_EXP 73
15944: PUSH
15945: LD_INT 1
15947: ST_TO_ADDR
// if p3 = 112 then
15948: LD_VAR 0 3
15952: PUSH
15953: LD_INT 112
15955: EQUAL
15956: IFFALSE 15966
// sStu := true ;
15958: LD_ADDR_EXP 77
15962: PUSH
15963: LD_INT 1
15965: ST_TO_ADDR
// if p3 = 113 then
15966: LD_VAR 0 3
15970: PUSH
15971: LD_INT 113
15973: EQUAL
15974: IFFALSE 15984
// sBazooka := true ;
15976: LD_ADDR_EXP 80
15980: PUSH
15981: LD_INT 1
15983: ST_TO_ADDR
// if p3 = 114 then
15984: LD_VAR 0 3
15988: PUSH
15989: LD_INT 114
15991: EQUAL
15992: IFFALSE 16002
// sMortar := true ;
15994: LD_ADDR_EXP 81
15998: PUSH
15999: LD_INT 1
16001: ST_TO_ADDR
// if p3 = 115 then
16002: LD_VAR 0 3
16006: PUSH
16007: LD_INT 115
16009: EQUAL
16010: IFFALSE 16020
// sRanger := true ;
16012: LD_ADDR_EXP 91
16016: PUSH
16017: LD_INT 1
16019: ST_TO_ADDR
// if p3 = 116 then
16020: LD_VAR 0 3
16024: PUSH
16025: LD_INT 116
16027: EQUAL
16028: IFFALSE 16038
// sComputer := true ;
16030: LD_ADDR_EXP 92
16034: PUSH
16035: LD_INT 1
16037: ST_TO_ADDR
// if p3 = 117 then
16038: LD_VAR 0 3
16042: PUSH
16043: LD_INT 117
16045: EQUAL
16046: IFFALSE 16056
// s30 := true ;
16048: LD_ADDR_EXP 93
16052: PUSH
16053: LD_INT 1
16055: ST_TO_ADDR
// if p3 = 118 then
16056: LD_VAR 0 3
16060: PUSH
16061: LD_INT 118
16063: EQUAL
16064: IFFALSE 16074
// s60 := true ;
16066: LD_ADDR_EXP 94
16070: PUSH
16071: LD_INT 1
16073: ST_TO_ADDR
// end ; if p2 = 101 then
16074: LD_VAR 0 2
16078: PUSH
16079: LD_INT 101
16081: EQUAL
16082: IFFALSE 16210
// begin case p3 of 1 :
16084: LD_VAR 0 3
16088: PUSH
16089: LD_INT 1
16091: DOUBLE
16092: EQUAL
16093: IFTRUE 16097
16095: GO 16104
16097: POP
// hHackUnlimitedResources ; 2 :
16098: CALL 28308 0 0
16102: GO 16210
16104: LD_INT 2
16106: DOUBLE
16107: EQUAL
16108: IFTRUE 16112
16110: GO 16119
16112: POP
// hHackSetLevel10 ; 3 :
16113: CALL 28441 0 0
16117: GO 16210
16119: LD_INT 3
16121: DOUBLE
16122: EQUAL
16123: IFTRUE 16127
16125: GO 16134
16127: POP
// hHackSetLevel10YourUnits ; 4 :
16128: CALL 28526 0 0
16132: GO 16210
16134: LD_INT 4
16136: DOUBLE
16137: EQUAL
16138: IFTRUE 16142
16140: GO 16149
16142: POP
// hHackInvincible ; 5 :
16143: CALL 28974 0 0
16147: GO 16210
16149: LD_INT 5
16151: DOUBLE
16152: EQUAL
16153: IFTRUE 16157
16155: GO 16164
16157: POP
// hHackInvisible ; 6 :
16158: CALL 29085 0 0
16162: GO 16210
16164: LD_INT 6
16166: DOUBLE
16167: EQUAL
16168: IFTRUE 16172
16170: GO 16179
16172: POP
// hHackChangeYourSide ; 7 :
16173: CALL 29142 0 0
16177: GO 16210
16179: LD_INT 7
16181: DOUBLE
16182: EQUAL
16183: IFTRUE 16187
16185: GO 16194
16187: POP
// hHackChangeUnitSide ; 8 :
16188: CALL 29184 0 0
16192: GO 16210
16194: LD_INT 8
16196: DOUBLE
16197: EQUAL
16198: IFTRUE 16202
16200: GO 16209
16202: POP
// hHackFog ; end ;
16203: CALL 29285 0 0
16207: GO 16210
16209: POP
// end ; end ;
16210: LD_VAR 0 7
16214: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16215: GO 16217
16217: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16218: LD_STRING initStreamRollete();
16220: PPUSH
16221: CALL_OW 559
// InitStreamMode ;
16225: CALL 16237 0 0
// DefineStreamItems ( false ) ;
16229: LD_INT 0
16231: PPUSH
16232: CALL 16701 0 1
// end ;
16236: END
// function InitStreamMode ; begin
16237: LD_INT 0
16239: PPUSH
// streamModeActive := false ;
16240: LD_ADDR_EXP 38
16244: PUSH
16245: LD_INT 0
16247: ST_TO_ADDR
// normalCounter := 36 ;
16248: LD_ADDR_EXP 39
16252: PUSH
16253: LD_INT 36
16255: ST_TO_ADDR
// hardcoreCounter := 18 ;
16256: LD_ADDR_EXP 40
16260: PUSH
16261: LD_INT 18
16263: ST_TO_ADDR
// sRocket := false ;
16264: LD_ADDR_EXP 43
16268: PUSH
16269: LD_INT 0
16271: ST_TO_ADDR
// sSpeed := false ;
16272: LD_ADDR_EXP 42
16276: PUSH
16277: LD_INT 0
16279: ST_TO_ADDR
// sEngine := false ;
16280: LD_ADDR_EXP 44
16284: PUSH
16285: LD_INT 0
16287: ST_TO_ADDR
// sSpec := false ;
16288: LD_ADDR_EXP 41
16292: PUSH
16293: LD_INT 0
16295: ST_TO_ADDR
// sLevel := false ;
16296: LD_ADDR_EXP 45
16300: PUSH
16301: LD_INT 0
16303: ST_TO_ADDR
// sArmoury := false ;
16304: LD_ADDR_EXP 46
16308: PUSH
16309: LD_INT 0
16311: ST_TO_ADDR
// sRadar := false ;
16312: LD_ADDR_EXP 47
16316: PUSH
16317: LD_INT 0
16319: ST_TO_ADDR
// sBunker := false ;
16320: LD_ADDR_EXP 48
16324: PUSH
16325: LD_INT 0
16327: ST_TO_ADDR
// sHack := false ;
16328: LD_ADDR_EXP 49
16332: PUSH
16333: LD_INT 0
16335: ST_TO_ADDR
// sFire := false ;
16336: LD_ADDR_EXP 50
16340: PUSH
16341: LD_INT 0
16343: ST_TO_ADDR
// sRefresh := false ;
16344: LD_ADDR_EXP 51
16348: PUSH
16349: LD_INT 0
16351: ST_TO_ADDR
// sExp := false ;
16352: LD_ADDR_EXP 52
16356: PUSH
16357: LD_INT 0
16359: ST_TO_ADDR
// sDepot := false ;
16360: LD_ADDR_EXP 53
16364: PUSH
16365: LD_INT 0
16367: ST_TO_ADDR
// sFlag := false ;
16368: LD_ADDR_EXP 54
16372: PUSH
16373: LD_INT 0
16375: ST_TO_ADDR
// sKamikadze := false ;
16376: LD_ADDR_EXP 62
16380: PUSH
16381: LD_INT 0
16383: ST_TO_ADDR
// sTroll := false ;
16384: LD_ADDR_EXP 63
16388: PUSH
16389: LD_INT 0
16391: ST_TO_ADDR
// sSlow := false ;
16392: LD_ADDR_EXP 64
16396: PUSH
16397: LD_INT 0
16399: ST_TO_ADDR
// sLack := false ;
16400: LD_ADDR_EXP 65
16404: PUSH
16405: LD_INT 0
16407: ST_TO_ADDR
// sTank := false ;
16408: LD_ADDR_EXP 67
16412: PUSH
16413: LD_INT 0
16415: ST_TO_ADDR
// sRemote := false ;
16416: LD_ADDR_EXP 68
16420: PUSH
16421: LD_INT 0
16423: ST_TO_ADDR
// sPowell := false ;
16424: LD_ADDR_EXP 69
16428: PUSH
16429: LD_INT 0
16431: ST_TO_ADDR
// sTeleport := false ;
16432: LD_ADDR_EXP 72
16436: PUSH
16437: LD_INT 0
16439: ST_TO_ADDR
// sOilTower := false ;
16440: LD_ADDR_EXP 74
16444: PUSH
16445: LD_INT 0
16447: ST_TO_ADDR
// sShovel := false ;
16448: LD_ADDR_EXP 75
16452: PUSH
16453: LD_INT 0
16455: ST_TO_ADDR
// sSheik := false ;
16456: LD_ADDR_EXP 76
16460: PUSH
16461: LD_INT 0
16463: ST_TO_ADDR
// sEarthquake := false ;
16464: LD_ADDR_EXP 78
16468: PUSH
16469: LD_INT 0
16471: ST_TO_ADDR
// sAI := false ;
16472: LD_ADDR_EXP 79
16476: PUSH
16477: LD_INT 0
16479: ST_TO_ADDR
// sCargo := false ;
16480: LD_ADDR_EXP 82
16484: PUSH
16485: LD_INT 0
16487: ST_TO_ADDR
// sDLaser := false ;
16488: LD_ADDR_EXP 83
16492: PUSH
16493: LD_INT 0
16495: ST_TO_ADDR
// sExchange := false ;
16496: LD_ADDR_EXP 84
16500: PUSH
16501: LD_INT 0
16503: ST_TO_ADDR
// sFac := false ;
16504: LD_ADDR_EXP 85
16508: PUSH
16509: LD_INT 0
16511: ST_TO_ADDR
// sPower := false ;
16512: LD_ADDR_EXP 86
16516: PUSH
16517: LD_INT 0
16519: ST_TO_ADDR
// sRandom := false ;
16520: LD_ADDR_EXP 87
16524: PUSH
16525: LD_INT 0
16527: ST_TO_ADDR
// sShield := false ;
16528: LD_ADDR_EXP 88
16532: PUSH
16533: LD_INT 0
16535: ST_TO_ADDR
// sTime := false ;
16536: LD_ADDR_EXP 89
16540: PUSH
16541: LD_INT 0
16543: ST_TO_ADDR
// sTools := false ;
16544: LD_ADDR_EXP 90
16548: PUSH
16549: LD_INT 0
16551: ST_TO_ADDR
// sSold := false ;
16552: LD_ADDR_EXP 55
16556: PUSH
16557: LD_INT 0
16559: ST_TO_ADDR
// sDiff := false ;
16560: LD_ADDR_EXP 56
16564: PUSH
16565: LD_INT 0
16567: ST_TO_ADDR
// sFog := false ;
16568: LD_ADDR_EXP 59
16572: PUSH
16573: LD_INT 0
16575: ST_TO_ADDR
// sReset := false ;
16576: LD_ADDR_EXP 60
16580: PUSH
16581: LD_INT 0
16583: ST_TO_ADDR
// sSun := false ;
16584: LD_ADDR_EXP 61
16588: PUSH
16589: LD_INT 0
16591: ST_TO_ADDR
// sTiger := false ;
16592: LD_ADDR_EXP 57
16596: PUSH
16597: LD_INT 0
16599: ST_TO_ADDR
// sBomb := false ;
16600: LD_ADDR_EXP 58
16604: PUSH
16605: LD_INT 0
16607: ST_TO_ADDR
// sWound := false ;
16608: LD_ADDR_EXP 66
16612: PUSH
16613: LD_INT 0
16615: ST_TO_ADDR
// sBetray := false ;
16616: LD_ADDR_EXP 70
16620: PUSH
16621: LD_INT 0
16623: ST_TO_ADDR
// sContamin := false ;
16624: LD_ADDR_EXP 71
16628: PUSH
16629: LD_INT 0
16631: ST_TO_ADDR
// sOil := false ;
16632: LD_ADDR_EXP 73
16636: PUSH
16637: LD_INT 0
16639: ST_TO_ADDR
// sStu := false ;
16640: LD_ADDR_EXP 77
16644: PUSH
16645: LD_INT 0
16647: ST_TO_ADDR
// sBazooka := false ;
16648: LD_ADDR_EXP 80
16652: PUSH
16653: LD_INT 0
16655: ST_TO_ADDR
// sMortar := false ;
16656: LD_ADDR_EXP 81
16660: PUSH
16661: LD_INT 0
16663: ST_TO_ADDR
// sRanger := false ;
16664: LD_ADDR_EXP 91
16668: PUSH
16669: LD_INT 0
16671: ST_TO_ADDR
// sComputer := false ;
16672: LD_ADDR_EXP 92
16676: PUSH
16677: LD_INT 0
16679: ST_TO_ADDR
// s30 := false ;
16680: LD_ADDR_EXP 93
16684: PUSH
16685: LD_INT 0
16687: ST_TO_ADDR
// s60 := false ;
16688: LD_ADDR_EXP 94
16692: PUSH
16693: LD_INT 0
16695: ST_TO_ADDR
// end ;
16696: LD_VAR 0 1
16700: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16701: LD_INT 0
16703: PPUSH
16704: PPUSH
16705: PPUSH
16706: PPUSH
16707: PPUSH
16708: PPUSH
16709: PPUSH
// result := [ ] ;
16710: LD_ADDR_VAR 0 2
16714: PUSH
16715: EMPTY
16716: ST_TO_ADDR
// if campaign_id = 1 then
16717: LD_OWVAR 69
16721: PUSH
16722: LD_INT 1
16724: EQUAL
16725: IFFALSE 19891
// begin case mission_number of 1 :
16727: LD_OWVAR 70
16731: PUSH
16732: LD_INT 1
16734: DOUBLE
16735: EQUAL
16736: IFTRUE 16740
16738: GO 16816
16740: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16741: LD_ADDR_VAR 0 2
16745: PUSH
16746: LD_INT 2
16748: PUSH
16749: LD_INT 4
16751: PUSH
16752: LD_INT 11
16754: PUSH
16755: LD_INT 12
16757: PUSH
16758: LD_INT 15
16760: PUSH
16761: LD_INT 16
16763: PUSH
16764: LD_INT 22
16766: PUSH
16767: LD_INT 23
16769: PUSH
16770: LD_INT 26
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: PUSH
16784: LD_INT 101
16786: PUSH
16787: LD_INT 102
16789: PUSH
16790: LD_INT 106
16792: PUSH
16793: LD_INT 116
16795: PUSH
16796: LD_INT 117
16798: PUSH
16799: LD_INT 118
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: ST_TO_ADDR
16814: GO 19889
16816: LD_INT 2
16818: DOUBLE
16819: EQUAL
16820: IFTRUE 16824
16822: GO 16908
16824: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16825: LD_ADDR_VAR 0 2
16829: PUSH
16830: LD_INT 2
16832: PUSH
16833: LD_INT 4
16835: PUSH
16836: LD_INT 11
16838: PUSH
16839: LD_INT 12
16841: PUSH
16842: LD_INT 15
16844: PUSH
16845: LD_INT 16
16847: PUSH
16848: LD_INT 22
16850: PUSH
16851: LD_INT 23
16853: PUSH
16854: LD_INT 26
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: PUSH
16868: LD_INT 101
16870: PUSH
16871: LD_INT 102
16873: PUSH
16874: LD_INT 105
16876: PUSH
16877: LD_INT 106
16879: PUSH
16880: LD_INT 108
16882: PUSH
16883: LD_INT 116
16885: PUSH
16886: LD_INT 117
16888: PUSH
16889: LD_INT 118
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: PUSH
16902: EMPTY
16903: LIST
16904: LIST
16905: ST_TO_ADDR
16906: GO 19889
16908: LD_INT 3
16910: DOUBLE
16911: EQUAL
16912: IFTRUE 16916
16914: GO 17004
16916: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16917: LD_ADDR_VAR 0 2
16921: PUSH
16922: LD_INT 2
16924: PUSH
16925: LD_INT 4
16927: PUSH
16928: LD_INT 5
16930: PUSH
16931: LD_INT 11
16933: PUSH
16934: LD_INT 12
16936: PUSH
16937: LD_INT 15
16939: PUSH
16940: LD_INT 16
16942: PUSH
16943: LD_INT 22
16945: PUSH
16946: LD_INT 26
16948: PUSH
16949: LD_INT 36
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: PUSH
16964: LD_INT 101
16966: PUSH
16967: LD_INT 102
16969: PUSH
16970: LD_INT 105
16972: PUSH
16973: LD_INT 106
16975: PUSH
16976: LD_INT 108
16978: PUSH
16979: LD_INT 116
16981: PUSH
16982: LD_INT 117
16984: PUSH
16985: LD_INT 118
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: ST_TO_ADDR
17002: GO 19889
17004: LD_INT 4
17006: DOUBLE
17007: EQUAL
17008: IFTRUE 17012
17010: GO 17108
17012: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17013: LD_ADDR_VAR 0 2
17017: PUSH
17018: LD_INT 2
17020: PUSH
17021: LD_INT 4
17023: PUSH
17024: LD_INT 5
17026: PUSH
17027: LD_INT 8
17029: PUSH
17030: LD_INT 11
17032: PUSH
17033: LD_INT 12
17035: PUSH
17036: LD_INT 15
17038: PUSH
17039: LD_INT 16
17041: PUSH
17042: LD_INT 22
17044: PUSH
17045: LD_INT 23
17047: PUSH
17048: LD_INT 26
17050: PUSH
17051: LD_INT 36
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 101
17070: PUSH
17071: LD_INT 102
17073: PUSH
17074: LD_INT 105
17076: PUSH
17077: LD_INT 106
17079: PUSH
17080: LD_INT 108
17082: PUSH
17083: LD_INT 116
17085: PUSH
17086: LD_INT 117
17088: PUSH
17089: LD_INT 118
17091: PUSH
17092: EMPTY
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: ST_TO_ADDR
17106: GO 19889
17108: LD_INT 5
17110: DOUBLE
17111: EQUAL
17112: IFTRUE 17116
17114: GO 17228
17116: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17117: LD_ADDR_VAR 0 2
17121: PUSH
17122: LD_INT 2
17124: PUSH
17125: LD_INT 4
17127: PUSH
17128: LD_INT 5
17130: PUSH
17131: LD_INT 6
17133: PUSH
17134: LD_INT 8
17136: PUSH
17137: LD_INT 11
17139: PUSH
17140: LD_INT 12
17142: PUSH
17143: LD_INT 15
17145: PUSH
17146: LD_INT 16
17148: PUSH
17149: LD_INT 22
17151: PUSH
17152: LD_INT 23
17154: PUSH
17155: LD_INT 25
17157: PUSH
17158: LD_INT 26
17160: PUSH
17161: LD_INT 36
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 101
17182: PUSH
17183: LD_INT 102
17185: PUSH
17186: LD_INT 105
17188: PUSH
17189: LD_INT 106
17191: PUSH
17192: LD_INT 108
17194: PUSH
17195: LD_INT 109
17197: PUSH
17198: LD_INT 112
17200: PUSH
17201: LD_INT 116
17203: PUSH
17204: LD_INT 117
17206: PUSH
17207: LD_INT 118
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: ST_TO_ADDR
17226: GO 19889
17228: LD_INT 6
17230: DOUBLE
17231: EQUAL
17232: IFTRUE 17236
17234: GO 17368
17236: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17237: LD_ADDR_VAR 0 2
17241: PUSH
17242: LD_INT 2
17244: PUSH
17245: LD_INT 4
17247: PUSH
17248: LD_INT 5
17250: PUSH
17251: LD_INT 6
17253: PUSH
17254: LD_INT 8
17256: PUSH
17257: LD_INT 11
17259: PUSH
17260: LD_INT 12
17262: PUSH
17263: LD_INT 15
17265: PUSH
17266: LD_INT 16
17268: PUSH
17269: LD_INT 20
17271: PUSH
17272: LD_INT 21
17274: PUSH
17275: LD_INT 22
17277: PUSH
17278: LD_INT 23
17280: PUSH
17281: LD_INT 25
17283: PUSH
17284: LD_INT 26
17286: PUSH
17287: LD_INT 30
17289: PUSH
17290: LD_INT 31
17292: PUSH
17293: LD_INT 32
17295: PUSH
17296: LD_INT 36
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: PUSH
17320: LD_INT 101
17322: PUSH
17323: LD_INT 102
17325: PUSH
17326: LD_INT 105
17328: PUSH
17329: LD_INT 106
17331: PUSH
17332: LD_INT 108
17334: PUSH
17335: LD_INT 109
17337: PUSH
17338: LD_INT 112
17340: PUSH
17341: LD_INT 116
17343: PUSH
17344: LD_INT 117
17346: PUSH
17347: LD_INT 118
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: ST_TO_ADDR
17366: GO 19889
17368: LD_INT 7
17370: DOUBLE
17371: EQUAL
17372: IFTRUE 17376
17374: GO 17488
17376: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17377: LD_ADDR_VAR 0 2
17381: PUSH
17382: LD_INT 2
17384: PUSH
17385: LD_INT 4
17387: PUSH
17388: LD_INT 5
17390: PUSH
17391: LD_INT 7
17393: PUSH
17394: LD_INT 11
17396: PUSH
17397: LD_INT 12
17399: PUSH
17400: LD_INT 15
17402: PUSH
17403: LD_INT 16
17405: PUSH
17406: LD_INT 20
17408: PUSH
17409: LD_INT 21
17411: PUSH
17412: LD_INT 22
17414: PUSH
17415: LD_INT 23
17417: PUSH
17418: LD_INT 25
17420: PUSH
17421: LD_INT 26
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 101
17442: PUSH
17443: LD_INT 102
17445: PUSH
17446: LD_INT 103
17448: PUSH
17449: LD_INT 105
17451: PUSH
17452: LD_INT 106
17454: PUSH
17455: LD_INT 108
17457: PUSH
17458: LD_INT 112
17460: PUSH
17461: LD_INT 116
17463: PUSH
17464: LD_INT 117
17466: PUSH
17467: LD_INT 118
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: ST_TO_ADDR
17486: GO 19889
17488: LD_INT 8
17490: DOUBLE
17491: EQUAL
17492: IFTRUE 17496
17494: GO 17636
17496: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17497: LD_ADDR_VAR 0 2
17501: PUSH
17502: LD_INT 2
17504: PUSH
17505: LD_INT 4
17507: PUSH
17508: LD_INT 5
17510: PUSH
17511: LD_INT 6
17513: PUSH
17514: LD_INT 7
17516: PUSH
17517: LD_INT 8
17519: PUSH
17520: LD_INT 11
17522: PUSH
17523: LD_INT 12
17525: PUSH
17526: LD_INT 15
17528: PUSH
17529: LD_INT 16
17531: PUSH
17532: LD_INT 20
17534: PUSH
17535: LD_INT 21
17537: PUSH
17538: LD_INT 22
17540: PUSH
17541: LD_INT 23
17543: PUSH
17544: LD_INT 25
17546: PUSH
17547: LD_INT 26
17549: PUSH
17550: LD_INT 30
17552: PUSH
17553: LD_INT 31
17555: PUSH
17556: LD_INT 32
17558: PUSH
17559: LD_INT 36
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: PUSH
17584: LD_INT 101
17586: PUSH
17587: LD_INT 102
17589: PUSH
17590: LD_INT 103
17592: PUSH
17593: LD_INT 105
17595: PUSH
17596: LD_INT 106
17598: PUSH
17599: LD_INT 108
17601: PUSH
17602: LD_INT 109
17604: PUSH
17605: LD_INT 112
17607: PUSH
17608: LD_INT 116
17610: PUSH
17611: LD_INT 117
17613: PUSH
17614: LD_INT 118
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: ST_TO_ADDR
17634: GO 19889
17636: LD_INT 9
17638: DOUBLE
17639: EQUAL
17640: IFTRUE 17644
17642: GO 17792
17644: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17645: LD_ADDR_VAR 0 2
17649: PUSH
17650: LD_INT 2
17652: PUSH
17653: LD_INT 4
17655: PUSH
17656: LD_INT 5
17658: PUSH
17659: LD_INT 6
17661: PUSH
17662: LD_INT 7
17664: PUSH
17665: LD_INT 8
17667: PUSH
17668: LD_INT 11
17670: PUSH
17671: LD_INT 12
17673: PUSH
17674: LD_INT 15
17676: PUSH
17677: LD_INT 16
17679: PUSH
17680: LD_INT 20
17682: PUSH
17683: LD_INT 21
17685: PUSH
17686: LD_INT 22
17688: PUSH
17689: LD_INT 23
17691: PUSH
17692: LD_INT 25
17694: PUSH
17695: LD_INT 26
17697: PUSH
17698: LD_INT 28
17700: PUSH
17701: LD_INT 30
17703: PUSH
17704: LD_INT 31
17706: PUSH
17707: LD_INT 32
17709: PUSH
17710: LD_INT 36
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: PUSH
17736: LD_INT 101
17738: PUSH
17739: LD_INT 102
17741: PUSH
17742: LD_INT 103
17744: PUSH
17745: LD_INT 105
17747: PUSH
17748: LD_INT 106
17750: PUSH
17751: LD_INT 108
17753: PUSH
17754: LD_INT 109
17756: PUSH
17757: LD_INT 112
17759: PUSH
17760: LD_INT 114
17762: PUSH
17763: LD_INT 116
17765: PUSH
17766: LD_INT 117
17768: PUSH
17769: LD_INT 118
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: ST_TO_ADDR
17790: GO 19889
17792: LD_INT 10
17794: DOUBLE
17795: EQUAL
17796: IFTRUE 17800
17798: GO 17996
17800: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17801: LD_ADDR_VAR 0 2
17805: PUSH
17806: LD_INT 2
17808: PUSH
17809: LD_INT 4
17811: PUSH
17812: LD_INT 5
17814: PUSH
17815: LD_INT 6
17817: PUSH
17818: LD_INT 7
17820: PUSH
17821: LD_INT 8
17823: PUSH
17824: LD_INT 9
17826: PUSH
17827: LD_INT 10
17829: PUSH
17830: LD_INT 11
17832: PUSH
17833: LD_INT 12
17835: PUSH
17836: LD_INT 13
17838: PUSH
17839: LD_INT 14
17841: PUSH
17842: LD_INT 15
17844: PUSH
17845: LD_INT 16
17847: PUSH
17848: LD_INT 17
17850: PUSH
17851: LD_INT 18
17853: PUSH
17854: LD_INT 19
17856: PUSH
17857: LD_INT 20
17859: PUSH
17860: LD_INT 21
17862: PUSH
17863: LD_INT 22
17865: PUSH
17866: LD_INT 23
17868: PUSH
17869: LD_INT 24
17871: PUSH
17872: LD_INT 25
17874: PUSH
17875: LD_INT 26
17877: PUSH
17878: LD_INT 28
17880: PUSH
17881: LD_INT 30
17883: PUSH
17884: LD_INT 31
17886: PUSH
17887: LD_INT 32
17889: PUSH
17890: LD_INT 36
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 101
17926: PUSH
17927: LD_INT 102
17929: PUSH
17930: LD_INT 103
17932: PUSH
17933: LD_INT 104
17935: PUSH
17936: LD_INT 105
17938: PUSH
17939: LD_INT 106
17941: PUSH
17942: LD_INT 107
17944: PUSH
17945: LD_INT 108
17947: PUSH
17948: LD_INT 109
17950: PUSH
17951: LD_INT 110
17953: PUSH
17954: LD_INT 111
17956: PUSH
17957: LD_INT 112
17959: PUSH
17960: LD_INT 114
17962: PUSH
17963: LD_INT 116
17965: PUSH
17966: LD_INT 117
17968: PUSH
17969: LD_INT 118
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: ST_TO_ADDR
17994: GO 19889
17996: LD_INT 11
17998: DOUBLE
17999: EQUAL
18000: IFTRUE 18004
18002: GO 18208
18004: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18005: LD_ADDR_VAR 0 2
18009: PUSH
18010: LD_INT 2
18012: PUSH
18013: LD_INT 3
18015: PUSH
18016: LD_INT 4
18018: PUSH
18019: LD_INT 5
18021: PUSH
18022: LD_INT 6
18024: PUSH
18025: LD_INT 7
18027: PUSH
18028: LD_INT 8
18030: PUSH
18031: LD_INT 9
18033: PUSH
18034: LD_INT 10
18036: PUSH
18037: LD_INT 11
18039: PUSH
18040: LD_INT 12
18042: PUSH
18043: LD_INT 13
18045: PUSH
18046: LD_INT 14
18048: PUSH
18049: LD_INT 15
18051: PUSH
18052: LD_INT 16
18054: PUSH
18055: LD_INT 17
18057: PUSH
18058: LD_INT 18
18060: PUSH
18061: LD_INT 19
18063: PUSH
18064: LD_INT 20
18066: PUSH
18067: LD_INT 21
18069: PUSH
18070: LD_INT 22
18072: PUSH
18073: LD_INT 23
18075: PUSH
18076: LD_INT 24
18078: PUSH
18079: LD_INT 25
18081: PUSH
18082: LD_INT 26
18084: PUSH
18085: LD_INT 28
18087: PUSH
18088: LD_INT 30
18090: PUSH
18091: LD_INT 31
18093: PUSH
18094: LD_INT 32
18096: PUSH
18097: LD_INT 34
18099: PUSH
18100: LD_INT 36
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: PUSH
18136: LD_INT 101
18138: PUSH
18139: LD_INT 102
18141: PUSH
18142: LD_INT 103
18144: PUSH
18145: LD_INT 104
18147: PUSH
18148: LD_INT 105
18150: PUSH
18151: LD_INT 106
18153: PUSH
18154: LD_INT 107
18156: PUSH
18157: LD_INT 108
18159: PUSH
18160: LD_INT 109
18162: PUSH
18163: LD_INT 110
18165: PUSH
18166: LD_INT 111
18168: PUSH
18169: LD_INT 112
18171: PUSH
18172: LD_INT 114
18174: PUSH
18175: LD_INT 116
18177: PUSH
18178: LD_INT 117
18180: PUSH
18181: LD_INT 118
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: ST_TO_ADDR
18206: GO 19889
18208: LD_INT 12
18210: DOUBLE
18211: EQUAL
18212: IFTRUE 18216
18214: GO 18436
18216: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18217: LD_ADDR_VAR 0 2
18221: PUSH
18222: LD_INT 1
18224: PUSH
18225: LD_INT 2
18227: PUSH
18228: LD_INT 3
18230: PUSH
18231: LD_INT 4
18233: PUSH
18234: LD_INT 5
18236: PUSH
18237: LD_INT 6
18239: PUSH
18240: LD_INT 7
18242: PUSH
18243: LD_INT 8
18245: PUSH
18246: LD_INT 9
18248: PUSH
18249: LD_INT 10
18251: PUSH
18252: LD_INT 11
18254: PUSH
18255: LD_INT 12
18257: PUSH
18258: LD_INT 13
18260: PUSH
18261: LD_INT 14
18263: PUSH
18264: LD_INT 15
18266: PUSH
18267: LD_INT 16
18269: PUSH
18270: LD_INT 17
18272: PUSH
18273: LD_INT 18
18275: PUSH
18276: LD_INT 19
18278: PUSH
18279: LD_INT 20
18281: PUSH
18282: LD_INT 21
18284: PUSH
18285: LD_INT 22
18287: PUSH
18288: LD_INT 23
18290: PUSH
18291: LD_INT 24
18293: PUSH
18294: LD_INT 25
18296: PUSH
18297: LD_INT 26
18299: PUSH
18300: LD_INT 27
18302: PUSH
18303: LD_INT 28
18305: PUSH
18306: LD_INT 30
18308: PUSH
18309: LD_INT 31
18311: PUSH
18312: LD_INT 32
18314: PUSH
18315: LD_INT 33
18317: PUSH
18318: LD_INT 34
18320: PUSH
18321: LD_INT 36
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: PUSH
18360: LD_INT 101
18362: PUSH
18363: LD_INT 102
18365: PUSH
18366: LD_INT 103
18368: PUSH
18369: LD_INT 104
18371: PUSH
18372: LD_INT 105
18374: PUSH
18375: LD_INT 106
18377: PUSH
18378: LD_INT 107
18380: PUSH
18381: LD_INT 108
18383: PUSH
18384: LD_INT 109
18386: PUSH
18387: LD_INT 110
18389: PUSH
18390: LD_INT 111
18392: PUSH
18393: LD_INT 112
18395: PUSH
18396: LD_INT 113
18398: PUSH
18399: LD_INT 114
18401: PUSH
18402: LD_INT 116
18404: PUSH
18405: LD_INT 117
18407: PUSH
18408: LD_INT 118
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: ST_TO_ADDR
18434: GO 19889
18436: LD_INT 13
18438: DOUBLE
18439: EQUAL
18440: IFTRUE 18444
18442: GO 18652
18444: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18445: LD_ADDR_VAR 0 2
18449: PUSH
18450: LD_INT 1
18452: PUSH
18453: LD_INT 2
18455: PUSH
18456: LD_INT 3
18458: PUSH
18459: LD_INT 4
18461: PUSH
18462: LD_INT 5
18464: PUSH
18465: LD_INT 8
18467: PUSH
18468: LD_INT 9
18470: PUSH
18471: LD_INT 10
18473: PUSH
18474: LD_INT 11
18476: PUSH
18477: LD_INT 12
18479: PUSH
18480: LD_INT 14
18482: PUSH
18483: LD_INT 15
18485: PUSH
18486: LD_INT 16
18488: PUSH
18489: LD_INT 17
18491: PUSH
18492: LD_INT 18
18494: PUSH
18495: LD_INT 19
18497: PUSH
18498: LD_INT 20
18500: PUSH
18501: LD_INT 21
18503: PUSH
18504: LD_INT 22
18506: PUSH
18507: LD_INT 23
18509: PUSH
18510: LD_INT 24
18512: PUSH
18513: LD_INT 25
18515: PUSH
18516: LD_INT 26
18518: PUSH
18519: LD_INT 27
18521: PUSH
18522: LD_INT 28
18524: PUSH
18525: LD_INT 30
18527: PUSH
18528: LD_INT 31
18530: PUSH
18531: LD_INT 32
18533: PUSH
18534: LD_INT 33
18536: PUSH
18537: LD_INT 34
18539: PUSH
18540: LD_INT 36
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: PUSH
18576: LD_INT 101
18578: PUSH
18579: LD_INT 102
18581: PUSH
18582: LD_INT 103
18584: PUSH
18585: LD_INT 104
18587: PUSH
18588: LD_INT 105
18590: PUSH
18591: LD_INT 106
18593: PUSH
18594: LD_INT 107
18596: PUSH
18597: LD_INT 108
18599: PUSH
18600: LD_INT 109
18602: PUSH
18603: LD_INT 110
18605: PUSH
18606: LD_INT 111
18608: PUSH
18609: LD_INT 112
18611: PUSH
18612: LD_INT 113
18614: PUSH
18615: LD_INT 114
18617: PUSH
18618: LD_INT 116
18620: PUSH
18621: LD_INT 117
18623: PUSH
18624: LD_INT 118
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: ST_TO_ADDR
18650: GO 19889
18652: LD_INT 14
18654: DOUBLE
18655: EQUAL
18656: IFTRUE 18660
18658: GO 18884
18660: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18661: LD_ADDR_VAR 0 2
18665: PUSH
18666: LD_INT 1
18668: PUSH
18669: LD_INT 2
18671: PUSH
18672: LD_INT 3
18674: PUSH
18675: LD_INT 4
18677: PUSH
18678: LD_INT 5
18680: PUSH
18681: LD_INT 6
18683: PUSH
18684: LD_INT 7
18686: PUSH
18687: LD_INT 8
18689: PUSH
18690: LD_INT 9
18692: PUSH
18693: LD_INT 10
18695: PUSH
18696: LD_INT 11
18698: PUSH
18699: LD_INT 12
18701: PUSH
18702: LD_INT 13
18704: PUSH
18705: LD_INT 14
18707: PUSH
18708: LD_INT 15
18710: PUSH
18711: LD_INT 16
18713: PUSH
18714: LD_INT 17
18716: PUSH
18717: LD_INT 18
18719: PUSH
18720: LD_INT 19
18722: PUSH
18723: LD_INT 20
18725: PUSH
18726: LD_INT 21
18728: PUSH
18729: LD_INT 22
18731: PUSH
18732: LD_INT 23
18734: PUSH
18735: LD_INT 24
18737: PUSH
18738: LD_INT 25
18740: PUSH
18741: LD_INT 26
18743: PUSH
18744: LD_INT 27
18746: PUSH
18747: LD_INT 28
18749: PUSH
18750: LD_INT 29
18752: PUSH
18753: LD_INT 30
18755: PUSH
18756: LD_INT 31
18758: PUSH
18759: LD_INT 32
18761: PUSH
18762: LD_INT 33
18764: PUSH
18765: LD_INT 34
18767: PUSH
18768: LD_INT 36
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 101
18810: PUSH
18811: LD_INT 102
18813: PUSH
18814: LD_INT 103
18816: PUSH
18817: LD_INT 104
18819: PUSH
18820: LD_INT 105
18822: PUSH
18823: LD_INT 106
18825: PUSH
18826: LD_INT 107
18828: PUSH
18829: LD_INT 108
18831: PUSH
18832: LD_INT 109
18834: PUSH
18835: LD_INT 110
18837: PUSH
18838: LD_INT 111
18840: PUSH
18841: LD_INT 112
18843: PUSH
18844: LD_INT 113
18846: PUSH
18847: LD_INT 114
18849: PUSH
18850: LD_INT 116
18852: PUSH
18853: LD_INT 117
18855: PUSH
18856: LD_INT 118
18858: PUSH
18859: EMPTY
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: ST_TO_ADDR
18882: GO 19889
18884: LD_INT 15
18886: DOUBLE
18887: EQUAL
18888: IFTRUE 18892
18890: GO 19116
18892: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18893: LD_ADDR_VAR 0 2
18897: PUSH
18898: LD_INT 1
18900: PUSH
18901: LD_INT 2
18903: PUSH
18904: LD_INT 3
18906: PUSH
18907: LD_INT 4
18909: PUSH
18910: LD_INT 5
18912: PUSH
18913: LD_INT 6
18915: PUSH
18916: LD_INT 7
18918: PUSH
18919: LD_INT 8
18921: PUSH
18922: LD_INT 9
18924: PUSH
18925: LD_INT 10
18927: PUSH
18928: LD_INT 11
18930: PUSH
18931: LD_INT 12
18933: PUSH
18934: LD_INT 13
18936: PUSH
18937: LD_INT 14
18939: PUSH
18940: LD_INT 15
18942: PUSH
18943: LD_INT 16
18945: PUSH
18946: LD_INT 17
18948: PUSH
18949: LD_INT 18
18951: PUSH
18952: LD_INT 19
18954: PUSH
18955: LD_INT 20
18957: PUSH
18958: LD_INT 21
18960: PUSH
18961: LD_INT 22
18963: PUSH
18964: LD_INT 23
18966: PUSH
18967: LD_INT 24
18969: PUSH
18970: LD_INT 25
18972: PUSH
18973: LD_INT 26
18975: PUSH
18976: LD_INT 27
18978: PUSH
18979: LD_INT 28
18981: PUSH
18982: LD_INT 29
18984: PUSH
18985: LD_INT 30
18987: PUSH
18988: LD_INT 31
18990: PUSH
18991: LD_INT 32
18993: PUSH
18994: LD_INT 33
18996: PUSH
18997: LD_INT 34
18999: PUSH
19000: LD_INT 36
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 101
19042: PUSH
19043: LD_INT 102
19045: PUSH
19046: LD_INT 103
19048: PUSH
19049: LD_INT 104
19051: PUSH
19052: LD_INT 105
19054: PUSH
19055: LD_INT 106
19057: PUSH
19058: LD_INT 107
19060: PUSH
19061: LD_INT 108
19063: PUSH
19064: LD_INT 109
19066: PUSH
19067: LD_INT 110
19069: PUSH
19070: LD_INT 111
19072: PUSH
19073: LD_INT 112
19075: PUSH
19076: LD_INT 113
19078: PUSH
19079: LD_INT 114
19081: PUSH
19082: LD_INT 116
19084: PUSH
19085: LD_INT 117
19087: PUSH
19088: LD_INT 118
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: ST_TO_ADDR
19114: GO 19889
19116: LD_INT 16
19118: DOUBLE
19119: EQUAL
19120: IFTRUE 19124
19122: GO 19260
19124: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19125: LD_ADDR_VAR 0 2
19129: PUSH
19130: LD_INT 2
19132: PUSH
19133: LD_INT 4
19135: PUSH
19136: LD_INT 5
19138: PUSH
19139: LD_INT 7
19141: PUSH
19142: LD_INT 11
19144: PUSH
19145: LD_INT 12
19147: PUSH
19148: LD_INT 15
19150: PUSH
19151: LD_INT 16
19153: PUSH
19154: LD_INT 20
19156: PUSH
19157: LD_INT 21
19159: PUSH
19160: LD_INT 22
19162: PUSH
19163: LD_INT 23
19165: PUSH
19166: LD_INT 25
19168: PUSH
19169: LD_INT 26
19171: PUSH
19172: LD_INT 30
19174: PUSH
19175: LD_INT 31
19177: PUSH
19178: LD_INT 32
19180: PUSH
19181: LD_INT 33
19183: PUSH
19184: LD_INT 34
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 101
19210: PUSH
19211: LD_INT 102
19213: PUSH
19214: LD_INT 103
19216: PUSH
19217: LD_INT 106
19219: PUSH
19220: LD_INT 108
19222: PUSH
19223: LD_INT 112
19225: PUSH
19226: LD_INT 113
19228: PUSH
19229: LD_INT 114
19231: PUSH
19232: LD_INT 116
19234: PUSH
19235: LD_INT 117
19237: PUSH
19238: LD_INT 118
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: ST_TO_ADDR
19258: GO 19889
19260: LD_INT 17
19262: DOUBLE
19263: EQUAL
19264: IFTRUE 19268
19266: GO 19492
19268: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19269: LD_ADDR_VAR 0 2
19273: PUSH
19274: LD_INT 1
19276: PUSH
19277: LD_INT 2
19279: PUSH
19280: LD_INT 3
19282: PUSH
19283: LD_INT 4
19285: PUSH
19286: LD_INT 5
19288: PUSH
19289: LD_INT 6
19291: PUSH
19292: LD_INT 7
19294: PUSH
19295: LD_INT 8
19297: PUSH
19298: LD_INT 9
19300: PUSH
19301: LD_INT 10
19303: PUSH
19304: LD_INT 11
19306: PUSH
19307: LD_INT 12
19309: PUSH
19310: LD_INT 13
19312: PUSH
19313: LD_INT 14
19315: PUSH
19316: LD_INT 15
19318: PUSH
19319: LD_INT 16
19321: PUSH
19322: LD_INT 17
19324: PUSH
19325: LD_INT 18
19327: PUSH
19328: LD_INT 19
19330: PUSH
19331: LD_INT 20
19333: PUSH
19334: LD_INT 21
19336: PUSH
19337: LD_INT 22
19339: PUSH
19340: LD_INT 23
19342: PUSH
19343: LD_INT 24
19345: PUSH
19346: LD_INT 25
19348: PUSH
19349: LD_INT 26
19351: PUSH
19352: LD_INT 27
19354: PUSH
19355: LD_INT 28
19357: PUSH
19358: LD_INT 29
19360: PUSH
19361: LD_INT 30
19363: PUSH
19364: LD_INT 31
19366: PUSH
19367: LD_INT 32
19369: PUSH
19370: LD_INT 33
19372: PUSH
19373: LD_INT 34
19375: PUSH
19376: LD_INT 36
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 101
19418: PUSH
19419: LD_INT 102
19421: PUSH
19422: LD_INT 103
19424: PUSH
19425: LD_INT 104
19427: PUSH
19428: LD_INT 105
19430: PUSH
19431: LD_INT 106
19433: PUSH
19434: LD_INT 107
19436: PUSH
19437: LD_INT 108
19439: PUSH
19440: LD_INT 109
19442: PUSH
19443: LD_INT 110
19445: PUSH
19446: LD_INT 111
19448: PUSH
19449: LD_INT 112
19451: PUSH
19452: LD_INT 113
19454: PUSH
19455: LD_INT 114
19457: PUSH
19458: LD_INT 116
19460: PUSH
19461: LD_INT 117
19463: PUSH
19464: LD_INT 118
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: ST_TO_ADDR
19490: GO 19889
19492: LD_INT 18
19494: DOUBLE
19495: EQUAL
19496: IFTRUE 19500
19498: GO 19648
19500: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19501: LD_ADDR_VAR 0 2
19505: PUSH
19506: LD_INT 2
19508: PUSH
19509: LD_INT 4
19511: PUSH
19512: LD_INT 5
19514: PUSH
19515: LD_INT 7
19517: PUSH
19518: LD_INT 11
19520: PUSH
19521: LD_INT 12
19523: PUSH
19524: LD_INT 15
19526: PUSH
19527: LD_INT 16
19529: PUSH
19530: LD_INT 20
19532: PUSH
19533: LD_INT 21
19535: PUSH
19536: LD_INT 22
19538: PUSH
19539: LD_INT 23
19541: PUSH
19542: LD_INT 25
19544: PUSH
19545: LD_INT 26
19547: PUSH
19548: LD_INT 30
19550: PUSH
19551: LD_INT 31
19553: PUSH
19554: LD_INT 32
19556: PUSH
19557: LD_INT 33
19559: PUSH
19560: LD_INT 34
19562: PUSH
19563: LD_INT 35
19565: PUSH
19566: LD_INT 36
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 101
19594: PUSH
19595: LD_INT 102
19597: PUSH
19598: LD_INT 103
19600: PUSH
19601: LD_INT 106
19603: PUSH
19604: LD_INT 108
19606: PUSH
19607: LD_INT 112
19609: PUSH
19610: LD_INT 113
19612: PUSH
19613: LD_INT 114
19615: PUSH
19616: LD_INT 115
19618: PUSH
19619: LD_INT 116
19621: PUSH
19622: LD_INT 117
19624: PUSH
19625: LD_INT 118
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: ST_TO_ADDR
19646: GO 19889
19648: LD_INT 19
19650: DOUBLE
19651: EQUAL
19652: IFTRUE 19656
19654: GO 19888
19656: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19657: LD_ADDR_VAR 0 2
19661: PUSH
19662: LD_INT 1
19664: PUSH
19665: LD_INT 2
19667: PUSH
19668: LD_INT 3
19670: PUSH
19671: LD_INT 4
19673: PUSH
19674: LD_INT 5
19676: PUSH
19677: LD_INT 6
19679: PUSH
19680: LD_INT 7
19682: PUSH
19683: LD_INT 8
19685: PUSH
19686: LD_INT 9
19688: PUSH
19689: LD_INT 10
19691: PUSH
19692: LD_INT 11
19694: PUSH
19695: LD_INT 12
19697: PUSH
19698: LD_INT 13
19700: PUSH
19701: LD_INT 14
19703: PUSH
19704: LD_INT 15
19706: PUSH
19707: LD_INT 16
19709: PUSH
19710: LD_INT 17
19712: PUSH
19713: LD_INT 18
19715: PUSH
19716: LD_INT 19
19718: PUSH
19719: LD_INT 20
19721: PUSH
19722: LD_INT 21
19724: PUSH
19725: LD_INT 22
19727: PUSH
19728: LD_INT 23
19730: PUSH
19731: LD_INT 24
19733: PUSH
19734: LD_INT 25
19736: PUSH
19737: LD_INT 26
19739: PUSH
19740: LD_INT 27
19742: PUSH
19743: LD_INT 28
19745: PUSH
19746: LD_INT 29
19748: PUSH
19749: LD_INT 30
19751: PUSH
19752: LD_INT 31
19754: PUSH
19755: LD_INT 32
19757: PUSH
19758: LD_INT 33
19760: PUSH
19761: LD_INT 34
19763: PUSH
19764: LD_INT 35
19766: PUSH
19767: LD_INT 36
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: PUSH
19808: LD_INT 101
19810: PUSH
19811: LD_INT 102
19813: PUSH
19814: LD_INT 103
19816: PUSH
19817: LD_INT 104
19819: PUSH
19820: LD_INT 105
19822: PUSH
19823: LD_INT 106
19825: PUSH
19826: LD_INT 107
19828: PUSH
19829: LD_INT 108
19831: PUSH
19832: LD_INT 109
19834: PUSH
19835: LD_INT 110
19837: PUSH
19838: LD_INT 111
19840: PUSH
19841: LD_INT 112
19843: PUSH
19844: LD_INT 113
19846: PUSH
19847: LD_INT 114
19849: PUSH
19850: LD_INT 115
19852: PUSH
19853: LD_INT 116
19855: PUSH
19856: LD_INT 117
19858: PUSH
19859: LD_INT 118
19861: PUSH
19862: EMPTY
19863: LIST
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: ST_TO_ADDR
19886: GO 19889
19888: POP
// end else
19889: GO 20120
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19891: LD_ADDR_VAR 0 2
19895: PUSH
19896: LD_INT 1
19898: PUSH
19899: LD_INT 2
19901: PUSH
19902: LD_INT 3
19904: PUSH
19905: LD_INT 4
19907: PUSH
19908: LD_INT 5
19910: PUSH
19911: LD_INT 6
19913: PUSH
19914: LD_INT 7
19916: PUSH
19917: LD_INT 8
19919: PUSH
19920: LD_INT 9
19922: PUSH
19923: LD_INT 10
19925: PUSH
19926: LD_INT 11
19928: PUSH
19929: LD_INT 12
19931: PUSH
19932: LD_INT 13
19934: PUSH
19935: LD_INT 14
19937: PUSH
19938: LD_INT 15
19940: PUSH
19941: LD_INT 16
19943: PUSH
19944: LD_INT 17
19946: PUSH
19947: LD_INT 18
19949: PUSH
19950: LD_INT 19
19952: PUSH
19953: LD_INT 20
19955: PUSH
19956: LD_INT 21
19958: PUSH
19959: LD_INT 22
19961: PUSH
19962: LD_INT 23
19964: PUSH
19965: LD_INT 24
19967: PUSH
19968: LD_INT 25
19970: PUSH
19971: LD_INT 26
19973: PUSH
19974: LD_INT 27
19976: PUSH
19977: LD_INT 28
19979: PUSH
19980: LD_INT 29
19982: PUSH
19983: LD_INT 30
19985: PUSH
19986: LD_INT 31
19988: PUSH
19989: LD_INT 32
19991: PUSH
19992: LD_INT 33
19994: PUSH
19995: LD_INT 34
19997: PUSH
19998: LD_INT 35
20000: PUSH
20001: LD_INT 36
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 101
20044: PUSH
20045: LD_INT 102
20047: PUSH
20048: LD_INT 103
20050: PUSH
20051: LD_INT 104
20053: PUSH
20054: LD_INT 105
20056: PUSH
20057: LD_INT 106
20059: PUSH
20060: LD_INT 107
20062: PUSH
20063: LD_INT 108
20065: PUSH
20066: LD_INT 109
20068: PUSH
20069: LD_INT 110
20071: PUSH
20072: LD_INT 111
20074: PUSH
20075: LD_INT 112
20077: PUSH
20078: LD_INT 113
20080: PUSH
20081: LD_INT 114
20083: PUSH
20084: LD_INT 115
20086: PUSH
20087: LD_INT 116
20089: PUSH
20090: LD_INT 117
20092: PUSH
20093: LD_INT 118
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: ST_TO_ADDR
// if result then
20120: LD_VAR 0 2
20124: IFFALSE 20910
// begin normal :=  ;
20126: LD_ADDR_VAR 0 5
20130: PUSH
20131: LD_STRING 
20133: ST_TO_ADDR
// hardcore :=  ;
20134: LD_ADDR_VAR 0 6
20138: PUSH
20139: LD_STRING 
20141: ST_TO_ADDR
// active :=  ;
20142: LD_ADDR_VAR 0 7
20146: PUSH
20147: LD_STRING 
20149: ST_TO_ADDR
// for i = 1 to normalCounter do
20150: LD_ADDR_VAR 0 8
20154: PUSH
20155: DOUBLE
20156: LD_INT 1
20158: DEC
20159: ST_TO_ADDR
20160: LD_EXP 39
20164: PUSH
20165: FOR_TO
20166: IFFALSE 20267
// begin tmp := 0 ;
20168: LD_ADDR_VAR 0 3
20172: PUSH
20173: LD_STRING 0
20175: ST_TO_ADDR
// if result [ 1 ] then
20176: LD_VAR 0 2
20180: PUSH
20181: LD_INT 1
20183: ARRAY
20184: IFFALSE 20249
// if result [ 1 ] [ 1 ] = i then
20186: LD_VAR 0 2
20190: PUSH
20191: LD_INT 1
20193: ARRAY
20194: PUSH
20195: LD_INT 1
20197: ARRAY
20198: PUSH
20199: LD_VAR 0 8
20203: EQUAL
20204: IFFALSE 20249
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20206: LD_ADDR_VAR 0 2
20210: PUSH
20211: LD_VAR 0 2
20215: PPUSH
20216: LD_INT 1
20218: PPUSH
20219: LD_VAR 0 2
20223: PUSH
20224: LD_INT 1
20226: ARRAY
20227: PPUSH
20228: LD_INT 1
20230: PPUSH
20231: CALL_OW 3
20235: PPUSH
20236: CALL_OW 1
20240: ST_TO_ADDR
// tmp := 1 ;
20241: LD_ADDR_VAR 0 3
20245: PUSH
20246: LD_STRING 1
20248: ST_TO_ADDR
// end ; normal := normal & tmp ;
20249: LD_ADDR_VAR 0 5
20253: PUSH
20254: LD_VAR 0 5
20258: PUSH
20259: LD_VAR 0 3
20263: STR
20264: ST_TO_ADDR
// end ;
20265: GO 20165
20267: POP
20268: POP
// for i = 1 to hardcoreCounter do
20269: LD_ADDR_VAR 0 8
20273: PUSH
20274: DOUBLE
20275: LD_INT 1
20277: DEC
20278: ST_TO_ADDR
20279: LD_EXP 40
20283: PUSH
20284: FOR_TO
20285: IFFALSE 20390
// begin tmp := 0 ;
20287: LD_ADDR_VAR 0 3
20291: PUSH
20292: LD_STRING 0
20294: ST_TO_ADDR
// if result [ 2 ] then
20295: LD_VAR 0 2
20299: PUSH
20300: LD_INT 2
20302: ARRAY
20303: IFFALSE 20372
// if result [ 2 ] [ 1 ] = 100 + i then
20305: LD_VAR 0 2
20309: PUSH
20310: LD_INT 2
20312: ARRAY
20313: PUSH
20314: LD_INT 1
20316: ARRAY
20317: PUSH
20318: LD_INT 100
20320: PUSH
20321: LD_VAR 0 8
20325: PLUS
20326: EQUAL
20327: IFFALSE 20372
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20329: LD_ADDR_VAR 0 2
20333: PUSH
20334: LD_VAR 0 2
20338: PPUSH
20339: LD_INT 2
20341: PPUSH
20342: LD_VAR 0 2
20346: PUSH
20347: LD_INT 2
20349: ARRAY
20350: PPUSH
20351: LD_INT 1
20353: PPUSH
20354: CALL_OW 3
20358: PPUSH
20359: CALL_OW 1
20363: ST_TO_ADDR
// tmp := 1 ;
20364: LD_ADDR_VAR 0 3
20368: PUSH
20369: LD_STRING 1
20371: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20372: LD_ADDR_VAR 0 6
20376: PUSH
20377: LD_VAR 0 6
20381: PUSH
20382: LD_VAR 0 3
20386: STR
20387: ST_TO_ADDR
// end ;
20388: GO 20284
20390: POP
20391: POP
// if isGameLoad then
20392: LD_VAR 0 1
20396: IFFALSE 20871
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20398: LD_ADDR_VAR 0 4
20402: PUSH
20403: LD_EXP 43
20407: PUSH
20408: LD_EXP 42
20412: PUSH
20413: LD_EXP 44
20417: PUSH
20418: LD_EXP 41
20422: PUSH
20423: LD_EXP 45
20427: PUSH
20428: LD_EXP 46
20432: PUSH
20433: LD_EXP 47
20437: PUSH
20438: LD_EXP 48
20442: PUSH
20443: LD_EXP 49
20447: PUSH
20448: LD_EXP 50
20452: PUSH
20453: LD_EXP 51
20457: PUSH
20458: LD_EXP 52
20462: PUSH
20463: LD_EXP 53
20467: PUSH
20468: LD_EXP 54
20472: PUSH
20473: LD_EXP 62
20477: PUSH
20478: LD_EXP 63
20482: PUSH
20483: LD_EXP 64
20487: PUSH
20488: LD_EXP 65
20492: PUSH
20493: LD_EXP 67
20497: PUSH
20498: LD_EXP 68
20502: PUSH
20503: LD_EXP 69
20507: PUSH
20508: LD_EXP 72
20512: PUSH
20513: LD_EXP 74
20517: PUSH
20518: LD_EXP 75
20522: PUSH
20523: LD_EXP 76
20527: PUSH
20528: LD_EXP 78
20532: PUSH
20533: LD_EXP 79
20537: PUSH
20538: LD_EXP 82
20542: PUSH
20543: LD_EXP 83
20547: PUSH
20548: LD_EXP 84
20552: PUSH
20553: LD_EXP 85
20557: PUSH
20558: LD_EXP 86
20562: PUSH
20563: LD_EXP 87
20567: PUSH
20568: LD_EXP 88
20572: PUSH
20573: LD_EXP 89
20577: PUSH
20578: LD_EXP 90
20582: PUSH
20583: LD_EXP 55
20587: PUSH
20588: LD_EXP 56
20592: PUSH
20593: LD_EXP 59
20597: PUSH
20598: LD_EXP 60
20602: PUSH
20603: LD_EXP 61
20607: PUSH
20608: LD_EXP 57
20612: PUSH
20613: LD_EXP 58
20617: PUSH
20618: LD_EXP 66
20622: PUSH
20623: LD_EXP 70
20627: PUSH
20628: LD_EXP 71
20632: PUSH
20633: LD_EXP 73
20637: PUSH
20638: LD_EXP 77
20642: PUSH
20643: LD_EXP 80
20647: PUSH
20648: LD_EXP 81
20652: PUSH
20653: LD_EXP 91
20657: PUSH
20658: LD_EXP 92
20662: PUSH
20663: LD_EXP 93
20667: PUSH
20668: LD_EXP 94
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: ST_TO_ADDR
// tmp :=  ;
20729: LD_ADDR_VAR 0 3
20733: PUSH
20734: LD_STRING 
20736: ST_TO_ADDR
// for i = 1 to normalCounter do
20737: LD_ADDR_VAR 0 8
20741: PUSH
20742: DOUBLE
20743: LD_INT 1
20745: DEC
20746: ST_TO_ADDR
20747: LD_EXP 39
20751: PUSH
20752: FOR_TO
20753: IFFALSE 20789
// begin if flags [ i ] then
20755: LD_VAR 0 4
20759: PUSH
20760: LD_VAR 0 8
20764: ARRAY
20765: IFFALSE 20787
// tmp := tmp & i & ; ;
20767: LD_ADDR_VAR 0 3
20771: PUSH
20772: LD_VAR 0 3
20776: PUSH
20777: LD_VAR 0 8
20781: STR
20782: PUSH
20783: LD_STRING ;
20785: STR
20786: ST_TO_ADDR
// end ;
20787: GO 20752
20789: POP
20790: POP
// for i = 1 to hardcoreCounter do
20791: LD_ADDR_VAR 0 8
20795: PUSH
20796: DOUBLE
20797: LD_INT 1
20799: DEC
20800: ST_TO_ADDR
20801: LD_EXP 40
20805: PUSH
20806: FOR_TO
20807: IFFALSE 20853
// begin if flags [ normalCounter + i ] then
20809: LD_VAR 0 4
20813: PUSH
20814: LD_EXP 39
20818: PUSH
20819: LD_VAR 0 8
20823: PLUS
20824: ARRAY
20825: IFFALSE 20851
// tmp := tmp & ( 100 + i ) & ; ;
20827: LD_ADDR_VAR 0 3
20831: PUSH
20832: LD_VAR 0 3
20836: PUSH
20837: LD_INT 100
20839: PUSH
20840: LD_VAR 0 8
20844: PLUS
20845: STR
20846: PUSH
20847: LD_STRING ;
20849: STR
20850: ST_TO_ADDR
// end ;
20851: GO 20806
20853: POP
20854: POP
// if tmp then
20855: LD_VAR 0 3
20859: IFFALSE 20871
// active := tmp ;
20861: LD_ADDR_VAR 0 7
20865: PUSH
20866: LD_VAR 0 3
20870: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
20871: LD_STRING getStreamItemsFromMission("
20873: PUSH
20874: LD_VAR 0 5
20878: STR
20879: PUSH
20880: LD_STRING ","
20882: STR
20883: PUSH
20884: LD_VAR 0 6
20888: STR
20889: PUSH
20890: LD_STRING ","
20892: STR
20893: PUSH
20894: LD_VAR 0 7
20898: STR
20899: PUSH
20900: LD_STRING ")
20902: STR
20903: PPUSH
20904: CALL_OW 559
// end else
20908: GO 20917
// ToLua ( getStreamItemsFromMission("","","") ) ;
20910: LD_STRING getStreamItemsFromMission("","","")
20912: PPUSH
20913: CALL_OW 559
// end ;
20917: LD_VAR 0 2
20921: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20922: LD_EXP 38
20926: PUSH
20927: LD_EXP 43
20931: AND
20932: IFFALSE 21056
20934: GO 20936
20936: DISABLE
20937: LD_INT 0
20939: PPUSH
20940: PPUSH
// begin enable ;
20941: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20942: LD_ADDR_VAR 0 2
20946: PUSH
20947: LD_INT 22
20949: PUSH
20950: LD_OWVAR 2
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PUSH
20959: LD_INT 2
20961: PUSH
20962: LD_INT 34
20964: PUSH
20965: LD_INT 7
20967: PUSH
20968: EMPTY
20969: LIST
20970: LIST
20971: PUSH
20972: LD_INT 34
20974: PUSH
20975: LD_INT 45
20977: PUSH
20978: EMPTY
20979: LIST
20980: LIST
20981: PUSH
20982: LD_INT 34
20984: PUSH
20985: LD_INT 28
20987: PUSH
20988: EMPTY
20989: LIST
20990: LIST
20991: PUSH
20992: LD_INT 34
20994: PUSH
20995: LD_INT 47
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PPUSH
21013: CALL_OW 69
21017: ST_TO_ADDR
// if not tmp then
21018: LD_VAR 0 2
21022: NOT
21023: IFFALSE 21027
// exit ;
21025: GO 21056
// for i in tmp do
21027: LD_ADDR_VAR 0 1
21031: PUSH
21032: LD_VAR 0 2
21036: PUSH
21037: FOR_IN
21038: IFFALSE 21054
// begin SetLives ( i , 0 ) ;
21040: LD_VAR 0 1
21044: PPUSH
21045: LD_INT 0
21047: PPUSH
21048: CALL_OW 234
// end ;
21052: GO 21037
21054: POP
21055: POP
// end ;
21056: PPOPN 2
21058: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21059: LD_EXP 38
21063: PUSH
21064: LD_EXP 44
21068: AND
21069: IFFALSE 21153
21071: GO 21073
21073: DISABLE
21074: LD_INT 0
21076: PPUSH
21077: PPUSH
// begin enable ;
21078: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21079: LD_ADDR_VAR 0 2
21083: PUSH
21084: LD_INT 22
21086: PUSH
21087: LD_OWVAR 2
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 32
21098: PUSH
21099: LD_INT 3
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PPUSH
21110: CALL_OW 69
21114: ST_TO_ADDR
// if not tmp then
21115: LD_VAR 0 2
21119: NOT
21120: IFFALSE 21124
// exit ;
21122: GO 21153
// for i in tmp do
21124: LD_ADDR_VAR 0 1
21128: PUSH
21129: LD_VAR 0 2
21133: PUSH
21134: FOR_IN
21135: IFFALSE 21151
// begin SetLives ( i , 0 ) ;
21137: LD_VAR 0 1
21141: PPUSH
21142: LD_INT 0
21144: PPUSH
21145: CALL_OW 234
// end ;
21149: GO 21134
21151: POP
21152: POP
// end ;
21153: PPOPN 2
21155: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21156: LD_EXP 38
21160: PUSH
21161: LD_EXP 41
21165: AND
21166: IFFALSE 21259
21168: GO 21170
21170: DISABLE
21171: LD_INT 0
21173: PPUSH
// begin enable ;
21174: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21175: LD_ADDR_VAR 0 1
21179: PUSH
21180: LD_INT 22
21182: PUSH
21183: LD_OWVAR 2
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: PUSH
21192: LD_INT 2
21194: PUSH
21195: LD_INT 25
21197: PUSH
21198: LD_INT 5
21200: PUSH
21201: EMPTY
21202: LIST
21203: LIST
21204: PUSH
21205: LD_INT 25
21207: PUSH
21208: LD_INT 9
21210: PUSH
21211: EMPTY
21212: LIST
21213: LIST
21214: PUSH
21215: LD_INT 25
21217: PUSH
21218: LD_INT 8
21220: PUSH
21221: EMPTY
21222: LIST
21223: LIST
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PPUSH
21235: CALL_OW 69
21239: PUSH
21240: FOR_IN
21241: IFFALSE 21257
// begin SetClass ( i , 1 ) ;
21243: LD_VAR 0 1
21247: PPUSH
21248: LD_INT 1
21250: PPUSH
21251: CALL_OW 336
// end ;
21255: GO 21240
21257: POP
21258: POP
// end ;
21259: PPOPN 1
21261: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21262: LD_EXP 38
21266: PUSH
21267: LD_EXP 42
21271: AND
21272: PUSH
21273: LD_OWVAR 65
21277: PUSH
21278: LD_INT 7
21280: LESS
21281: AND
21282: IFFALSE 21296
21284: GO 21286
21286: DISABLE
// begin enable ;
21287: ENABLE
// game_speed := 7 ;
21288: LD_ADDR_OWVAR 65
21292: PUSH
21293: LD_INT 7
21295: ST_TO_ADDR
// end ;
21296: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21297: LD_EXP 38
21301: PUSH
21302: LD_EXP 45
21306: AND
21307: IFFALSE 21509
21309: GO 21311
21311: DISABLE
21312: LD_INT 0
21314: PPUSH
21315: PPUSH
21316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21317: LD_ADDR_VAR 0 3
21321: PUSH
21322: LD_INT 81
21324: PUSH
21325: LD_OWVAR 2
21329: PUSH
21330: EMPTY
21331: LIST
21332: LIST
21333: PUSH
21334: LD_INT 21
21336: PUSH
21337: LD_INT 1
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: PUSH
21344: EMPTY
21345: LIST
21346: LIST
21347: PPUSH
21348: CALL_OW 69
21352: ST_TO_ADDR
// if not tmp then
21353: LD_VAR 0 3
21357: NOT
21358: IFFALSE 21362
// exit ;
21360: GO 21509
// if tmp > 5 then
21362: LD_VAR 0 3
21366: PUSH
21367: LD_INT 5
21369: GREATER
21370: IFFALSE 21382
// k := 5 else
21372: LD_ADDR_VAR 0 2
21376: PUSH
21377: LD_INT 5
21379: ST_TO_ADDR
21380: GO 21392
// k := tmp ;
21382: LD_ADDR_VAR 0 2
21386: PUSH
21387: LD_VAR 0 3
21391: ST_TO_ADDR
// for i := 1 to k do
21392: LD_ADDR_VAR 0 1
21396: PUSH
21397: DOUBLE
21398: LD_INT 1
21400: DEC
21401: ST_TO_ADDR
21402: LD_VAR 0 2
21406: PUSH
21407: FOR_TO
21408: IFFALSE 21507
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21410: LD_VAR 0 3
21414: PUSH
21415: LD_VAR 0 1
21419: ARRAY
21420: PPUSH
21421: LD_VAR 0 1
21425: PUSH
21426: LD_INT 4
21428: MOD
21429: PUSH
21430: LD_INT 1
21432: PLUS
21433: PPUSH
21434: CALL_OW 259
21438: PUSH
21439: LD_INT 10
21441: LESS
21442: IFFALSE 21505
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21444: LD_VAR 0 3
21448: PUSH
21449: LD_VAR 0 1
21453: ARRAY
21454: PPUSH
21455: LD_VAR 0 1
21459: PUSH
21460: LD_INT 4
21462: MOD
21463: PUSH
21464: LD_INT 1
21466: PLUS
21467: PPUSH
21468: LD_VAR 0 3
21472: PUSH
21473: LD_VAR 0 1
21477: ARRAY
21478: PPUSH
21479: LD_VAR 0 1
21483: PUSH
21484: LD_INT 4
21486: MOD
21487: PUSH
21488: LD_INT 1
21490: PLUS
21491: PPUSH
21492: CALL_OW 259
21496: PUSH
21497: LD_INT 1
21499: PLUS
21500: PPUSH
21501: CALL_OW 237
21505: GO 21407
21507: POP
21508: POP
// end ;
21509: PPOPN 3
21511: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21512: LD_EXP 38
21516: PUSH
21517: LD_EXP 46
21521: AND
21522: IFFALSE 21542
21524: GO 21526
21526: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21527: LD_INT 4
21529: PPUSH
21530: LD_OWVAR 2
21534: PPUSH
21535: LD_INT 0
21537: PPUSH
21538: CALL_OW 324
21542: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21543: LD_EXP 38
21547: PUSH
21548: LD_EXP 75
21552: AND
21553: IFFALSE 21573
21555: GO 21557
21557: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21558: LD_INT 19
21560: PPUSH
21561: LD_OWVAR 2
21565: PPUSH
21566: LD_INT 0
21568: PPUSH
21569: CALL_OW 324
21573: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21574: LD_EXP 38
21578: PUSH
21579: LD_EXP 47
21583: AND
21584: IFFALSE 21686
21586: GO 21588
21588: DISABLE
21589: LD_INT 0
21591: PPUSH
21592: PPUSH
// begin enable ;
21593: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21594: LD_ADDR_VAR 0 2
21598: PUSH
21599: LD_INT 22
21601: PUSH
21602: LD_OWVAR 2
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 2
21613: PUSH
21614: LD_INT 34
21616: PUSH
21617: LD_INT 11
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 34
21626: PUSH
21627: LD_INT 30
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: LIST
21638: PUSH
21639: EMPTY
21640: LIST
21641: LIST
21642: PPUSH
21643: CALL_OW 69
21647: ST_TO_ADDR
// if not tmp then
21648: LD_VAR 0 2
21652: NOT
21653: IFFALSE 21657
// exit ;
21655: GO 21686
// for i in tmp do
21657: LD_ADDR_VAR 0 1
21661: PUSH
21662: LD_VAR 0 2
21666: PUSH
21667: FOR_IN
21668: IFFALSE 21684
// begin SetLives ( i , 0 ) ;
21670: LD_VAR 0 1
21674: PPUSH
21675: LD_INT 0
21677: PPUSH
21678: CALL_OW 234
// end ;
21682: GO 21667
21684: POP
21685: POP
// end ;
21686: PPOPN 2
21688: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21689: LD_EXP 38
21693: PUSH
21694: LD_EXP 48
21698: AND
21699: IFFALSE 21719
21701: GO 21703
21703: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21704: LD_INT 32
21706: PPUSH
21707: LD_OWVAR 2
21711: PPUSH
21712: LD_INT 0
21714: PPUSH
21715: CALL_OW 324
21719: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21720: LD_EXP 38
21724: PUSH
21725: LD_EXP 49
21729: AND
21730: IFFALSE 21911
21732: GO 21734
21734: DISABLE
21735: LD_INT 0
21737: PPUSH
21738: PPUSH
21739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21740: LD_ADDR_VAR 0 2
21744: PUSH
21745: LD_INT 22
21747: PUSH
21748: LD_OWVAR 2
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 33
21759: PUSH
21760: LD_INT 3
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: PPUSH
21771: CALL_OW 69
21775: ST_TO_ADDR
// if not tmp then
21776: LD_VAR 0 2
21780: NOT
21781: IFFALSE 21785
// exit ;
21783: GO 21911
// side := 0 ;
21785: LD_ADDR_VAR 0 3
21789: PUSH
21790: LD_INT 0
21792: ST_TO_ADDR
// for i := 1 to 8 do
21793: LD_ADDR_VAR 0 1
21797: PUSH
21798: DOUBLE
21799: LD_INT 1
21801: DEC
21802: ST_TO_ADDR
21803: LD_INT 8
21805: PUSH
21806: FOR_TO
21807: IFFALSE 21855
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21809: LD_OWVAR 2
21813: PUSH
21814: LD_VAR 0 1
21818: NONEQUAL
21819: PUSH
21820: LD_OWVAR 2
21824: PPUSH
21825: LD_VAR 0 1
21829: PPUSH
21830: CALL_OW 81
21834: PUSH
21835: LD_INT 2
21837: EQUAL
21838: AND
21839: IFFALSE 21853
// begin side := i ;
21841: LD_ADDR_VAR 0 3
21845: PUSH
21846: LD_VAR 0 1
21850: ST_TO_ADDR
// break ;
21851: GO 21855
// end ;
21853: GO 21806
21855: POP
21856: POP
// if not side then
21857: LD_VAR 0 3
21861: NOT
21862: IFFALSE 21866
// exit ;
21864: GO 21911
// for i := 1 to tmp do
21866: LD_ADDR_VAR 0 1
21870: PUSH
21871: DOUBLE
21872: LD_INT 1
21874: DEC
21875: ST_TO_ADDR
21876: LD_VAR 0 2
21880: PUSH
21881: FOR_TO
21882: IFFALSE 21909
// if Prob ( 60 ) then
21884: LD_INT 60
21886: PPUSH
21887: CALL_OW 13
21891: IFFALSE 21907
// SetSide ( i , side ) ;
21893: LD_VAR 0 1
21897: PPUSH
21898: LD_VAR 0 3
21902: PPUSH
21903: CALL_OW 235
21907: GO 21881
21909: POP
21910: POP
// end ;
21911: PPOPN 3
21913: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21914: LD_EXP 38
21918: PUSH
21919: LD_EXP 51
21923: AND
21924: IFFALSE 22043
21926: GO 21928
21928: DISABLE
21929: LD_INT 0
21931: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21932: LD_ADDR_VAR 0 1
21936: PUSH
21937: LD_INT 22
21939: PUSH
21940: LD_OWVAR 2
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: LD_INT 21
21951: PUSH
21952: LD_INT 1
21954: PUSH
21955: EMPTY
21956: LIST
21957: LIST
21958: PUSH
21959: LD_INT 3
21961: PUSH
21962: LD_INT 23
21964: PUSH
21965: LD_INT 0
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: EMPTY
21973: LIST
21974: LIST
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: LIST
21980: PPUSH
21981: CALL_OW 69
21985: PUSH
21986: FOR_IN
21987: IFFALSE 22041
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21989: LD_VAR 0 1
21993: PPUSH
21994: CALL_OW 257
21998: PUSH
21999: LD_INT 1
22001: PUSH
22002: LD_INT 2
22004: PUSH
22005: LD_INT 3
22007: PUSH
22008: LD_INT 4
22010: PUSH
22011: EMPTY
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: IN
22017: IFFALSE 22039
// SetClass ( un , rand ( 1 , 4 ) ) ;
22019: LD_VAR 0 1
22023: PPUSH
22024: LD_INT 1
22026: PPUSH
22027: LD_INT 4
22029: PPUSH
22030: CALL_OW 12
22034: PPUSH
22035: CALL_OW 336
22039: GO 21986
22041: POP
22042: POP
// end ;
22043: PPOPN 1
22045: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22046: LD_EXP 38
22050: PUSH
22051: LD_EXP 50
22055: AND
22056: IFFALSE 22135
22058: GO 22060
22060: DISABLE
22061: LD_INT 0
22063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22064: LD_ADDR_VAR 0 1
22068: PUSH
22069: LD_INT 22
22071: PUSH
22072: LD_OWVAR 2
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 21
22083: PUSH
22084: LD_INT 3
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PPUSH
22095: CALL_OW 69
22099: ST_TO_ADDR
// if not tmp then
22100: LD_VAR 0 1
22104: NOT
22105: IFFALSE 22109
// exit ;
22107: GO 22135
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22109: LD_VAR 0 1
22113: PUSH
22114: LD_INT 1
22116: PPUSH
22117: LD_VAR 0 1
22121: PPUSH
22122: CALL_OW 12
22126: ARRAY
22127: PPUSH
22128: LD_INT 100
22130: PPUSH
22131: CALL_OW 234
// end ;
22135: PPOPN 1
22137: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22138: LD_EXP 38
22142: PUSH
22143: LD_EXP 52
22147: AND
22148: IFFALSE 22246
22150: GO 22152
22152: DISABLE
22153: LD_INT 0
22155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22156: LD_ADDR_VAR 0 1
22160: PUSH
22161: LD_INT 22
22163: PUSH
22164: LD_OWVAR 2
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 21
22175: PUSH
22176: LD_INT 1
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PPUSH
22187: CALL_OW 69
22191: ST_TO_ADDR
// if not tmp then
22192: LD_VAR 0 1
22196: NOT
22197: IFFALSE 22201
// exit ;
22199: GO 22246
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22201: LD_VAR 0 1
22205: PUSH
22206: LD_INT 1
22208: PPUSH
22209: LD_VAR 0 1
22213: PPUSH
22214: CALL_OW 12
22218: ARRAY
22219: PPUSH
22220: LD_INT 1
22222: PPUSH
22223: LD_INT 4
22225: PPUSH
22226: CALL_OW 12
22230: PPUSH
22231: LD_INT 3000
22233: PPUSH
22234: LD_INT 9000
22236: PPUSH
22237: CALL_OW 12
22241: PPUSH
22242: CALL_OW 492
// end ;
22246: PPOPN 1
22248: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22249: LD_EXP 38
22253: PUSH
22254: LD_EXP 53
22258: AND
22259: IFFALSE 22279
22261: GO 22263
22263: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22264: LD_INT 1
22266: PPUSH
22267: LD_OWVAR 2
22271: PPUSH
22272: LD_INT 0
22274: PPUSH
22275: CALL_OW 324
22279: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22280: LD_EXP 38
22284: PUSH
22285: LD_EXP 54
22289: AND
22290: IFFALSE 22373
22292: GO 22294
22294: DISABLE
22295: LD_INT 0
22297: PPUSH
22298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22299: LD_ADDR_VAR 0 2
22303: PUSH
22304: LD_INT 22
22306: PUSH
22307: LD_OWVAR 2
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 21
22318: PUSH
22319: LD_INT 3
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PPUSH
22330: CALL_OW 69
22334: ST_TO_ADDR
// if not tmp then
22335: LD_VAR 0 2
22339: NOT
22340: IFFALSE 22344
// exit ;
22342: GO 22373
// for i in tmp do
22344: LD_ADDR_VAR 0 1
22348: PUSH
22349: LD_VAR 0 2
22353: PUSH
22354: FOR_IN
22355: IFFALSE 22371
// SetBLevel ( i , 10 ) ;
22357: LD_VAR 0 1
22361: PPUSH
22362: LD_INT 10
22364: PPUSH
22365: CALL_OW 241
22369: GO 22354
22371: POP
22372: POP
// end ;
22373: PPOPN 2
22375: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22376: LD_EXP 38
22380: PUSH
22381: LD_EXP 55
22385: AND
22386: IFFALSE 22497
22388: GO 22390
22390: DISABLE
22391: LD_INT 0
22393: PPUSH
22394: PPUSH
22395: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22396: LD_ADDR_VAR 0 3
22400: PUSH
22401: LD_INT 22
22403: PUSH
22404: LD_OWVAR 2
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PUSH
22413: LD_INT 25
22415: PUSH
22416: LD_INT 1
22418: PUSH
22419: EMPTY
22420: LIST
22421: LIST
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PPUSH
22427: CALL_OW 69
22431: ST_TO_ADDR
// if not tmp then
22432: LD_VAR 0 3
22436: NOT
22437: IFFALSE 22441
// exit ;
22439: GO 22497
// un := tmp [ rand ( 1 , tmp ) ] ;
22441: LD_ADDR_VAR 0 2
22445: PUSH
22446: LD_VAR 0 3
22450: PUSH
22451: LD_INT 1
22453: PPUSH
22454: LD_VAR 0 3
22458: PPUSH
22459: CALL_OW 12
22463: ARRAY
22464: ST_TO_ADDR
// if Crawls ( un ) then
22465: LD_VAR 0 2
22469: PPUSH
22470: CALL_OW 318
22474: IFFALSE 22485
// ComWalk ( un ) ;
22476: LD_VAR 0 2
22480: PPUSH
22481: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22485: LD_VAR 0 2
22489: PPUSH
22490: LD_INT 5
22492: PPUSH
22493: CALL_OW 336
// end ;
22497: PPOPN 3
22499: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22500: LD_EXP 38
22504: PUSH
22505: LD_EXP 56
22509: AND
22510: PUSH
22511: LD_OWVAR 67
22515: PUSH
22516: LD_INT 4
22518: LESS
22519: AND
22520: IFFALSE 22539
22522: GO 22524
22524: DISABLE
// begin Difficulty := Difficulty + 1 ;
22525: LD_ADDR_OWVAR 67
22529: PUSH
22530: LD_OWVAR 67
22534: PUSH
22535: LD_INT 1
22537: PLUS
22538: ST_TO_ADDR
// end ;
22539: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22540: LD_EXP 38
22544: PUSH
22545: LD_EXP 57
22549: AND
22550: IFFALSE 22653
22552: GO 22554
22554: DISABLE
22555: LD_INT 0
22557: PPUSH
// begin for i := 1 to 5 do
22558: LD_ADDR_VAR 0 1
22562: PUSH
22563: DOUBLE
22564: LD_INT 1
22566: DEC
22567: ST_TO_ADDR
22568: LD_INT 5
22570: PUSH
22571: FOR_TO
22572: IFFALSE 22651
// begin uc_nation := nation_nature ;
22574: LD_ADDR_OWVAR 21
22578: PUSH
22579: LD_INT 0
22581: ST_TO_ADDR
// uc_side := 0 ;
22582: LD_ADDR_OWVAR 20
22586: PUSH
22587: LD_INT 0
22589: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22590: LD_ADDR_OWVAR 29
22594: PUSH
22595: LD_INT 12
22597: PUSH
22598: LD_INT 12
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: ST_TO_ADDR
// hc_agressivity := 20 ;
22605: LD_ADDR_OWVAR 35
22609: PUSH
22610: LD_INT 20
22612: ST_TO_ADDR
// hc_class := class_tiger ;
22613: LD_ADDR_OWVAR 28
22617: PUSH
22618: LD_INT 14
22620: ST_TO_ADDR
// hc_gallery :=  ;
22621: LD_ADDR_OWVAR 33
22625: PUSH
22626: LD_STRING 
22628: ST_TO_ADDR
// hc_name :=  ;
22629: LD_ADDR_OWVAR 26
22633: PUSH
22634: LD_STRING 
22636: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22637: CALL_OW 44
22641: PPUSH
22642: LD_INT 0
22644: PPUSH
22645: CALL_OW 51
// end ;
22649: GO 22571
22651: POP
22652: POP
// end ;
22653: PPOPN 1
22655: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22656: LD_EXP 38
22660: PUSH
22661: LD_EXP 58
22665: AND
22666: IFFALSE 22675
22668: GO 22670
22670: DISABLE
// StreamSibBomb ;
22671: CALL 22676 0 0
22675: END
// export function StreamSibBomb ; var i , x , y ; begin
22676: LD_INT 0
22678: PPUSH
22679: PPUSH
22680: PPUSH
22681: PPUSH
// result := false ;
22682: LD_ADDR_VAR 0 1
22686: PUSH
22687: LD_INT 0
22689: ST_TO_ADDR
// for i := 1 to 16 do
22690: LD_ADDR_VAR 0 2
22694: PUSH
22695: DOUBLE
22696: LD_INT 1
22698: DEC
22699: ST_TO_ADDR
22700: LD_INT 16
22702: PUSH
22703: FOR_TO
22704: IFFALSE 22903
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22706: LD_ADDR_VAR 0 3
22710: PUSH
22711: LD_INT 10
22713: PUSH
22714: LD_INT 20
22716: PUSH
22717: LD_INT 30
22719: PUSH
22720: LD_INT 40
22722: PUSH
22723: LD_INT 50
22725: PUSH
22726: LD_INT 60
22728: PUSH
22729: LD_INT 70
22731: PUSH
22732: LD_INT 80
22734: PUSH
22735: LD_INT 90
22737: PUSH
22738: LD_INT 100
22740: PUSH
22741: LD_INT 110
22743: PUSH
22744: LD_INT 120
22746: PUSH
22747: LD_INT 130
22749: PUSH
22750: LD_INT 140
22752: PUSH
22753: LD_INT 150
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 1
22775: PPUSH
22776: LD_INT 15
22778: PPUSH
22779: CALL_OW 12
22783: ARRAY
22784: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22785: LD_ADDR_VAR 0 4
22789: PUSH
22790: LD_INT 10
22792: PUSH
22793: LD_INT 20
22795: PUSH
22796: LD_INT 30
22798: PUSH
22799: LD_INT 40
22801: PUSH
22802: LD_INT 50
22804: PUSH
22805: LD_INT 60
22807: PUSH
22808: LD_INT 70
22810: PUSH
22811: LD_INT 80
22813: PUSH
22814: LD_INT 90
22816: PUSH
22817: LD_INT 100
22819: PUSH
22820: LD_INT 110
22822: PUSH
22823: LD_INT 120
22825: PUSH
22826: LD_INT 130
22828: PUSH
22829: LD_INT 140
22831: PUSH
22832: LD_INT 150
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: PUSH
22852: LD_INT 1
22854: PPUSH
22855: LD_INT 15
22857: PPUSH
22858: CALL_OW 12
22862: ARRAY
22863: ST_TO_ADDR
// if ValidHex ( x , y ) then
22864: LD_VAR 0 3
22868: PPUSH
22869: LD_VAR 0 4
22873: PPUSH
22874: CALL_OW 488
22878: IFFALSE 22901
// begin result := [ x , y ] ;
22880: LD_ADDR_VAR 0 1
22884: PUSH
22885: LD_VAR 0 3
22889: PUSH
22890: LD_VAR 0 4
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: ST_TO_ADDR
// break ;
22899: GO 22903
// end ; end ;
22901: GO 22703
22903: POP
22904: POP
// if result then
22905: LD_VAR 0 1
22909: IFFALSE 22969
// begin ToLua ( playSibBomb() ) ;
22911: LD_STRING playSibBomb()
22913: PPUSH
22914: CALL_OW 559
// wait ( 0 0$14 ) ;
22918: LD_INT 490
22920: PPUSH
22921: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22925: LD_VAR 0 1
22929: PUSH
22930: LD_INT 1
22932: ARRAY
22933: PPUSH
22934: LD_VAR 0 1
22938: PUSH
22939: LD_INT 2
22941: ARRAY
22942: PPUSH
22943: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22947: LD_VAR 0 1
22951: PUSH
22952: LD_INT 1
22954: ARRAY
22955: PPUSH
22956: LD_VAR 0 1
22960: PUSH
22961: LD_INT 2
22963: ARRAY
22964: PPUSH
22965: CALL_OW 429
// end ; end ;
22969: LD_VAR 0 1
22973: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22974: LD_EXP 38
22978: PUSH
22979: LD_EXP 60
22983: AND
22984: IFFALSE 22996
22986: GO 22988
22988: DISABLE
// YouLost (  ) ;
22989: LD_STRING 
22991: PPUSH
22992: CALL_OW 104
22996: END
// every 0 0$1 trigger StreamModeActive and sFog do
22997: LD_EXP 38
23001: PUSH
23002: LD_EXP 59
23006: AND
23007: IFFALSE 23021
23009: GO 23011
23011: DISABLE
// FogOff ( your_side ) ;
23012: LD_OWVAR 2
23016: PPUSH
23017: CALL_OW 344
23021: END
// every 0 0$1 trigger StreamModeActive and sSun do
23022: LD_EXP 38
23026: PUSH
23027: LD_EXP 61
23031: AND
23032: IFFALSE 23060
23034: GO 23036
23036: DISABLE
// begin solar_recharge_percent := 0 ;
23037: LD_ADDR_OWVAR 79
23041: PUSH
23042: LD_INT 0
23044: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23045: LD_INT 10500
23047: PPUSH
23048: CALL_OW 67
// solar_recharge_percent := 100 ;
23052: LD_ADDR_OWVAR 79
23056: PUSH
23057: LD_INT 100
23059: ST_TO_ADDR
// end ;
23060: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23061: LD_EXP 38
23065: PUSH
23066: LD_EXP 62
23070: AND
23071: IFFALSE 23310
23073: GO 23075
23075: DISABLE
23076: LD_INT 0
23078: PPUSH
23079: PPUSH
23080: PPUSH
// begin tmp := [ ] ;
23081: LD_ADDR_VAR 0 3
23085: PUSH
23086: EMPTY
23087: ST_TO_ADDR
// for i := 1 to 6 do
23088: LD_ADDR_VAR 0 1
23092: PUSH
23093: DOUBLE
23094: LD_INT 1
23096: DEC
23097: ST_TO_ADDR
23098: LD_INT 6
23100: PUSH
23101: FOR_TO
23102: IFFALSE 23207
// begin uc_nation := nation_nature ;
23104: LD_ADDR_OWVAR 21
23108: PUSH
23109: LD_INT 0
23111: ST_TO_ADDR
// uc_side := 0 ;
23112: LD_ADDR_OWVAR 20
23116: PUSH
23117: LD_INT 0
23119: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23120: LD_ADDR_OWVAR 29
23124: PUSH
23125: LD_INT 12
23127: PUSH
23128: LD_INT 12
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: ST_TO_ADDR
// hc_agressivity := 20 ;
23135: LD_ADDR_OWVAR 35
23139: PUSH
23140: LD_INT 20
23142: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23143: LD_ADDR_OWVAR 28
23147: PUSH
23148: LD_INT 17
23150: ST_TO_ADDR
// hc_gallery :=  ;
23151: LD_ADDR_OWVAR 33
23155: PUSH
23156: LD_STRING 
23158: ST_TO_ADDR
// hc_name :=  ;
23159: LD_ADDR_OWVAR 26
23163: PUSH
23164: LD_STRING 
23166: ST_TO_ADDR
// un := CreateHuman ;
23167: LD_ADDR_VAR 0 2
23171: PUSH
23172: CALL_OW 44
23176: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23177: LD_VAR 0 2
23181: PPUSH
23182: LD_INT 1
23184: PPUSH
23185: CALL_OW 51
// tmp := tmp ^ un ;
23189: LD_ADDR_VAR 0 3
23193: PUSH
23194: LD_VAR 0 3
23198: PUSH
23199: LD_VAR 0 2
23203: ADD
23204: ST_TO_ADDR
// end ;
23205: GO 23101
23207: POP
23208: POP
// repeat wait ( 0 0$1 ) ;
23209: LD_INT 35
23211: PPUSH
23212: CALL_OW 67
// for un in tmp do
23216: LD_ADDR_VAR 0 2
23220: PUSH
23221: LD_VAR 0 3
23225: PUSH
23226: FOR_IN
23227: IFFALSE 23301
// begin if IsDead ( un ) then
23229: LD_VAR 0 2
23233: PPUSH
23234: CALL_OW 301
23238: IFFALSE 23258
// begin tmp := tmp diff un ;
23240: LD_ADDR_VAR 0 3
23244: PUSH
23245: LD_VAR 0 3
23249: PUSH
23250: LD_VAR 0 2
23254: DIFF
23255: ST_TO_ADDR
// continue ;
23256: GO 23226
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23258: LD_VAR 0 2
23262: PPUSH
23263: LD_INT 3
23265: PUSH
23266: LD_INT 22
23268: PUSH
23269: LD_INT 0
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PPUSH
23280: CALL_OW 69
23284: PPUSH
23285: LD_VAR 0 2
23289: PPUSH
23290: CALL_OW 74
23294: PPUSH
23295: CALL_OW 115
// end ;
23299: GO 23226
23301: POP
23302: POP
// until not tmp ;
23303: LD_VAR 0 3
23307: NOT
23308: IFFALSE 23209
// end ;
23310: PPOPN 3
23312: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23313: LD_EXP 38
23317: PUSH
23318: LD_EXP 63
23322: AND
23323: IFFALSE 23377
23325: GO 23327
23327: DISABLE
// begin ToLua ( displayTroll(); ) ;
23328: LD_STRING displayTroll();
23330: PPUSH
23331: CALL_OW 559
// wait ( 3 3$00 ) ;
23335: LD_INT 6300
23337: PPUSH
23338: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23342: LD_STRING hideTroll();
23344: PPUSH
23345: CALL_OW 559
// wait ( 1 1$00 ) ;
23349: LD_INT 2100
23351: PPUSH
23352: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23356: LD_STRING displayTroll();
23358: PPUSH
23359: CALL_OW 559
// wait ( 1 1$00 ) ;
23363: LD_INT 2100
23365: PPUSH
23366: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23370: LD_STRING hideTroll();
23372: PPUSH
23373: CALL_OW 559
// end ;
23377: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23378: LD_EXP 38
23382: PUSH
23383: LD_EXP 64
23387: AND
23388: IFFALSE 23451
23390: GO 23392
23392: DISABLE
23393: LD_INT 0
23395: PPUSH
// begin p := 0 ;
23396: LD_ADDR_VAR 0 1
23400: PUSH
23401: LD_INT 0
23403: ST_TO_ADDR
// repeat game_speed := 1 ;
23404: LD_ADDR_OWVAR 65
23408: PUSH
23409: LD_INT 1
23411: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23412: LD_INT 35
23414: PPUSH
23415: CALL_OW 67
// p := p + 1 ;
23419: LD_ADDR_VAR 0 1
23423: PUSH
23424: LD_VAR 0 1
23428: PUSH
23429: LD_INT 1
23431: PLUS
23432: ST_TO_ADDR
// until p >= 60 ;
23433: LD_VAR 0 1
23437: PUSH
23438: LD_INT 60
23440: GREATEREQUAL
23441: IFFALSE 23404
// game_speed := 4 ;
23443: LD_ADDR_OWVAR 65
23447: PUSH
23448: LD_INT 4
23450: ST_TO_ADDR
// end ;
23451: PPOPN 1
23453: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23454: LD_EXP 38
23458: PUSH
23459: LD_EXP 65
23463: AND
23464: IFFALSE 23610
23466: GO 23468
23468: DISABLE
23469: LD_INT 0
23471: PPUSH
23472: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23473: LD_ADDR_VAR 0 1
23477: PUSH
23478: LD_INT 22
23480: PUSH
23481: LD_OWVAR 2
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 2
23492: PUSH
23493: LD_INT 30
23495: PUSH
23496: LD_INT 0
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 30
23505: PUSH
23506: LD_INT 1
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: LIST
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: PPUSH
23522: CALL_OW 69
23526: ST_TO_ADDR
// if not depot then
23527: LD_VAR 0 1
23531: NOT
23532: IFFALSE 23536
// exit ;
23534: GO 23610
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23536: LD_ADDR_VAR 0 2
23540: PUSH
23541: LD_VAR 0 1
23545: PUSH
23546: LD_INT 1
23548: PPUSH
23549: LD_VAR 0 1
23553: PPUSH
23554: CALL_OW 12
23558: ARRAY
23559: PPUSH
23560: CALL_OW 274
23564: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23565: LD_VAR 0 2
23569: PPUSH
23570: LD_INT 1
23572: PPUSH
23573: LD_INT 0
23575: PPUSH
23576: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23580: LD_VAR 0 2
23584: PPUSH
23585: LD_INT 2
23587: PPUSH
23588: LD_INT 0
23590: PPUSH
23591: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23595: LD_VAR 0 2
23599: PPUSH
23600: LD_INT 3
23602: PPUSH
23603: LD_INT 0
23605: PPUSH
23606: CALL_OW 277
// end ;
23610: PPOPN 2
23612: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23613: LD_EXP 38
23617: PUSH
23618: LD_EXP 66
23622: AND
23623: IFFALSE 23720
23625: GO 23627
23627: DISABLE
23628: LD_INT 0
23630: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23631: LD_ADDR_VAR 0 1
23635: PUSH
23636: LD_INT 22
23638: PUSH
23639: LD_OWVAR 2
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: PUSH
23648: LD_INT 21
23650: PUSH
23651: LD_INT 1
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PUSH
23658: LD_INT 3
23660: PUSH
23661: LD_INT 23
23663: PUSH
23664: LD_INT 0
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: LIST
23679: PPUSH
23680: CALL_OW 69
23684: ST_TO_ADDR
// if not tmp then
23685: LD_VAR 0 1
23689: NOT
23690: IFFALSE 23694
// exit ;
23692: GO 23720
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23694: LD_VAR 0 1
23698: PUSH
23699: LD_INT 1
23701: PPUSH
23702: LD_VAR 0 1
23706: PPUSH
23707: CALL_OW 12
23711: ARRAY
23712: PPUSH
23713: LD_INT 200
23715: PPUSH
23716: CALL_OW 234
// end ;
23720: PPOPN 1
23722: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23723: LD_EXP 38
23727: PUSH
23728: LD_EXP 67
23732: AND
23733: IFFALSE 23812
23735: GO 23737
23737: DISABLE
23738: LD_INT 0
23740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23741: LD_ADDR_VAR 0 1
23745: PUSH
23746: LD_INT 22
23748: PUSH
23749: LD_OWVAR 2
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 21
23760: PUSH
23761: LD_INT 2
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: PPUSH
23772: CALL_OW 69
23776: ST_TO_ADDR
// if not tmp then
23777: LD_VAR 0 1
23781: NOT
23782: IFFALSE 23786
// exit ;
23784: GO 23812
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23786: LD_VAR 0 1
23790: PUSH
23791: LD_INT 1
23793: PPUSH
23794: LD_VAR 0 1
23798: PPUSH
23799: CALL_OW 12
23803: ARRAY
23804: PPUSH
23805: LD_INT 60
23807: PPUSH
23808: CALL_OW 234
// end ;
23812: PPOPN 1
23814: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23815: LD_EXP 38
23819: PUSH
23820: LD_EXP 68
23824: AND
23825: IFFALSE 23924
23827: GO 23829
23829: DISABLE
23830: LD_INT 0
23832: PPUSH
23833: PPUSH
// begin enable ;
23834: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23835: LD_ADDR_VAR 0 1
23839: PUSH
23840: LD_INT 22
23842: PUSH
23843: LD_OWVAR 2
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PUSH
23852: LD_INT 61
23854: PUSH
23855: EMPTY
23856: LIST
23857: PUSH
23858: LD_INT 33
23860: PUSH
23861: LD_INT 2
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: LIST
23872: PPUSH
23873: CALL_OW 69
23877: ST_TO_ADDR
// if not tmp then
23878: LD_VAR 0 1
23882: NOT
23883: IFFALSE 23887
// exit ;
23885: GO 23924
// for i in tmp do
23887: LD_ADDR_VAR 0 2
23891: PUSH
23892: LD_VAR 0 1
23896: PUSH
23897: FOR_IN
23898: IFFALSE 23922
// if IsControledBy ( i ) then
23900: LD_VAR 0 2
23904: PPUSH
23905: CALL_OW 312
23909: IFFALSE 23920
// ComUnlink ( i ) ;
23911: LD_VAR 0 2
23915: PPUSH
23916: CALL_OW 136
23920: GO 23897
23922: POP
23923: POP
// end ;
23924: PPOPN 2
23926: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23927: LD_EXP 38
23931: PUSH
23932: LD_EXP 69
23936: AND
23937: IFFALSE 24077
23939: GO 23941
23941: DISABLE
23942: LD_INT 0
23944: PPUSH
23945: PPUSH
// begin ToLua ( displayPowell(); ) ;
23946: LD_STRING displayPowell();
23948: PPUSH
23949: CALL_OW 559
// uc_side := 0 ;
23953: LD_ADDR_OWVAR 20
23957: PUSH
23958: LD_INT 0
23960: ST_TO_ADDR
// uc_nation := 2 ;
23961: LD_ADDR_OWVAR 21
23965: PUSH
23966: LD_INT 2
23968: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23969: LD_ADDR_OWVAR 37
23973: PUSH
23974: LD_INT 14
23976: ST_TO_ADDR
// vc_engine := engine_siberite ;
23977: LD_ADDR_OWVAR 39
23981: PUSH
23982: LD_INT 3
23984: ST_TO_ADDR
// vc_control := control_apeman ;
23985: LD_ADDR_OWVAR 38
23989: PUSH
23990: LD_INT 5
23992: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23993: LD_ADDR_OWVAR 40
23997: PUSH
23998: LD_INT 29
24000: ST_TO_ADDR
// un := CreateVehicle ;
24001: LD_ADDR_VAR 0 2
24005: PUSH
24006: CALL_OW 45
24010: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24011: LD_VAR 0 2
24015: PPUSH
24016: LD_INT 1
24018: PPUSH
24019: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24023: LD_INT 35
24025: PPUSH
24026: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24030: LD_VAR 0 2
24034: PPUSH
24035: LD_INT 22
24037: PUSH
24038: LD_OWVAR 2
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PPUSH
24047: CALL_OW 69
24051: PPUSH
24052: LD_VAR 0 2
24056: PPUSH
24057: CALL_OW 74
24061: PPUSH
24062: CALL_OW 115
// until IsDead ( un ) ;
24066: LD_VAR 0 2
24070: PPUSH
24071: CALL_OW 301
24075: IFFALSE 24023
// end ;
24077: PPOPN 2
24079: END
// every 0 0$1 trigger StreamModeActive and sStu do
24080: LD_EXP 38
24084: PUSH
24085: LD_EXP 77
24089: AND
24090: IFFALSE 24106
24092: GO 24094
24094: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24095: LD_STRING displayStucuk();
24097: PPUSH
24098: CALL_OW 559
// ResetFog ;
24102: CALL_OW 335
// end ;
24106: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24107: LD_EXP 38
24111: PUSH
24112: LD_EXP 70
24116: AND
24117: IFFALSE 24258
24119: GO 24121
24121: DISABLE
24122: LD_INT 0
24124: PPUSH
24125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24126: LD_ADDR_VAR 0 2
24130: PUSH
24131: LD_INT 22
24133: PUSH
24134: LD_OWVAR 2
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 21
24145: PUSH
24146: LD_INT 1
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PPUSH
24157: CALL_OW 69
24161: ST_TO_ADDR
// if not tmp then
24162: LD_VAR 0 2
24166: NOT
24167: IFFALSE 24171
// exit ;
24169: GO 24258
// un := tmp [ rand ( 1 , tmp ) ] ;
24171: LD_ADDR_VAR 0 1
24175: PUSH
24176: LD_VAR 0 2
24180: PUSH
24181: LD_INT 1
24183: PPUSH
24184: LD_VAR 0 2
24188: PPUSH
24189: CALL_OW 12
24193: ARRAY
24194: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24195: LD_VAR 0 1
24199: PPUSH
24200: LD_INT 0
24202: PPUSH
24203: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24207: LD_VAR 0 1
24211: PPUSH
24212: LD_OWVAR 3
24216: PUSH
24217: LD_VAR 0 1
24221: DIFF
24222: PPUSH
24223: LD_VAR 0 1
24227: PPUSH
24228: CALL_OW 74
24232: PPUSH
24233: CALL_OW 115
// wait ( 0 0$20 ) ;
24237: LD_INT 700
24239: PPUSH
24240: CALL_OW 67
// SetSide ( un , your_side ) ;
24244: LD_VAR 0 1
24248: PPUSH
24249: LD_OWVAR 2
24253: PPUSH
24254: CALL_OW 235
// end ;
24258: PPOPN 2
24260: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24261: LD_EXP 38
24265: PUSH
24266: LD_EXP 71
24270: AND
24271: IFFALSE 24377
24273: GO 24275
24275: DISABLE
24276: LD_INT 0
24278: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24279: LD_ADDR_VAR 0 1
24283: PUSH
24284: LD_INT 22
24286: PUSH
24287: LD_OWVAR 2
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: PUSH
24296: LD_INT 2
24298: PUSH
24299: LD_INT 30
24301: PUSH
24302: LD_INT 0
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 30
24311: PUSH
24312: LD_INT 1
24314: PUSH
24315: EMPTY
24316: LIST
24317: LIST
24318: PUSH
24319: EMPTY
24320: LIST
24321: LIST
24322: LIST
24323: PUSH
24324: EMPTY
24325: LIST
24326: LIST
24327: PPUSH
24328: CALL_OW 69
24332: ST_TO_ADDR
// if not depot then
24333: LD_VAR 0 1
24337: NOT
24338: IFFALSE 24342
// exit ;
24340: GO 24377
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24342: LD_VAR 0 1
24346: PUSH
24347: LD_INT 1
24349: ARRAY
24350: PPUSH
24351: CALL_OW 250
24355: PPUSH
24356: LD_VAR 0 1
24360: PUSH
24361: LD_INT 1
24363: ARRAY
24364: PPUSH
24365: CALL_OW 251
24369: PPUSH
24370: LD_INT 70
24372: PPUSH
24373: CALL_OW 495
// end ;
24377: PPOPN 1
24379: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24380: LD_EXP 38
24384: PUSH
24385: LD_EXP 72
24389: AND
24390: IFFALSE 24601
24392: GO 24394
24394: DISABLE
24395: LD_INT 0
24397: PPUSH
24398: PPUSH
24399: PPUSH
24400: PPUSH
24401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24402: LD_ADDR_VAR 0 5
24406: PUSH
24407: LD_INT 22
24409: PUSH
24410: LD_OWVAR 2
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PUSH
24419: LD_INT 21
24421: PUSH
24422: LD_INT 1
24424: PUSH
24425: EMPTY
24426: LIST
24427: LIST
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PPUSH
24433: CALL_OW 69
24437: ST_TO_ADDR
// if not tmp then
24438: LD_VAR 0 5
24442: NOT
24443: IFFALSE 24447
// exit ;
24445: GO 24601
// for i in tmp do
24447: LD_ADDR_VAR 0 1
24451: PUSH
24452: LD_VAR 0 5
24456: PUSH
24457: FOR_IN
24458: IFFALSE 24599
// begin d := rand ( 0 , 5 ) ;
24460: LD_ADDR_VAR 0 4
24464: PUSH
24465: LD_INT 0
24467: PPUSH
24468: LD_INT 5
24470: PPUSH
24471: CALL_OW 12
24475: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24476: LD_ADDR_VAR 0 2
24480: PUSH
24481: LD_VAR 0 1
24485: PPUSH
24486: CALL_OW 250
24490: PPUSH
24491: LD_VAR 0 4
24495: PPUSH
24496: LD_INT 3
24498: PPUSH
24499: LD_INT 12
24501: PPUSH
24502: CALL_OW 12
24506: PPUSH
24507: CALL_OW 272
24511: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24512: LD_ADDR_VAR 0 3
24516: PUSH
24517: LD_VAR 0 1
24521: PPUSH
24522: CALL_OW 251
24526: PPUSH
24527: LD_VAR 0 4
24531: PPUSH
24532: LD_INT 3
24534: PPUSH
24535: LD_INT 12
24537: PPUSH
24538: CALL_OW 12
24542: PPUSH
24543: CALL_OW 273
24547: ST_TO_ADDR
// if ValidHex ( x , y ) then
24548: LD_VAR 0 2
24552: PPUSH
24553: LD_VAR 0 3
24557: PPUSH
24558: CALL_OW 488
24562: IFFALSE 24597
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24564: LD_VAR 0 1
24568: PPUSH
24569: LD_VAR 0 2
24573: PPUSH
24574: LD_VAR 0 3
24578: PPUSH
24579: LD_INT 3
24581: PPUSH
24582: LD_INT 6
24584: PPUSH
24585: CALL_OW 12
24589: PPUSH
24590: LD_INT 1
24592: PPUSH
24593: CALL_OW 483
// end ;
24597: GO 24457
24599: POP
24600: POP
// end ;
24601: PPOPN 5
24603: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24604: LD_EXP 38
24608: PUSH
24609: LD_EXP 73
24613: AND
24614: IFFALSE 24708
24616: GO 24618
24618: DISABLE
24619: LD_INT 0
24621: PPUSH
24622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24623: LD_ADDR_VAR 0 2
24627: PUSH
24628: LD_INT 22
24630: PUSH
24631: LD_OWVAR 2
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 32
24642: PUSH
24643: LD_INT 1
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 21
24652: PUSH
24653: LD_INT 2
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: LIST
24664: PPUSH
24665: CALL_OW 69
24669: ST_TO_ADDR
// if not tmp then
24670: LD_VAR 0 2
24674: NOT
24675: IFFALSE 24679
// exit ;
24677: GO 24708
// for i in tmp do
24679: LD_ADDR_VAR 0 1
24683: PUSH
24684: LD_VAR 0 2
24688: PUSH
24689: FOR_IN
24690: IFFALSE 24706
// SetFuel ( i , 0 ) ;
24692: LD_VAR 0 1
24696: PPUSH
24697: LD_INT 0
24699: PPUSH
24700: CALL_OW 240
24704: GO 24689
24706: POP
24707: POP
// end ;
24708: PPOPN 2
24710: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24711: LD_EXP 38
24715: PUSH
24716: LD_EXP 74
24720: AND
24721: IFFALSE 24787
24723: GO 24725
24725: DISABLE
24726: LD_INT 0
24728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24729: LD_ADDR_VAR 0 1
24733: PUSH
24734: LD_INT 22
24736: PUSH
24737: LD_OWVAR 2
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: PUSH
24746: LD_INT 30
24748: PUSH
24749: LD_INT 29
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: PPUSH
24760: CALL_OW 69
24764: ST_TO_ADDR
// if not tmp then
24765: LD_VAR 0 1
24769: NOT
24770: IFFALSE 24774
// exit ;
24772: GO 24787
// DestroyUnit ( tmp [ 1 ] ) ;
24774: LD_VAR 0 1
24778: PUSH
24779: LD_INT 1
24781: ARRAY
24782: PPUSH
24783: CALL_OW 65
// end ;
24787: PPOPN 1
24789: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24790: LD_EXP 38
24794: PUSH
24795: LD_EXP 76
24799: AND
24800: IFFALSE 24929
24802: GO 24804
24804: DISABLE
24805: LD_INT 0
24807: PPUSH
// begin uc_side := 0 ;
24808: LD_ADDR_OWVAR 20
24812: PUSH
24813: LD_INT 0
24815: ST_TO_ADDR
// uc_nation := nation_arabian ;
24816: LD_ADDR_OWVAR 21
24820: PUSH
24821: LD_INT 2
24823: ST_TO_ADDR
// hc_gallery :=  ;
24824: LD_ADDR_OWVAR 33
24828: PUSH
24829: LD_STRING 
24831: ST_TO_ADDR
// hc_name :=  ;
24832: LD_ADDR_OWVAR 26
24836: PUSH
24837: LD_STRING 
24839: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24840: LD_INT 1
24842: PPUSH
24843: LD_INT 11
24845: PPUSH
24846: LD_INT 10
24848: PPUSH
24849: CALL_OW 380
// un := CreateHuman ;
24853: LD_ADDR_VAR 0 1
24857: PUSH
24858: CALL_OW 44
24862: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24863: LD_VAR 0 1
24867: PPUSH
24868: LD_INT 1
24870: PPUSH
24871: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24875: LD_INT 35
24877: PPUSH
24878: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24882: LD_VAR 0 1
24886: PPUSH
24887: LD_INT 22
24889: PUSH
24890: LD_OWVAR 2
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PPUSH
24899: CALL_OW 69
24903: PPUSH
24904: LD_VAR 0 1
24908: PPUSH
24909: CALL_OW 74
24913: PPUSH
24914: CALL_OW 115
// until IsDead ( un ) ;
24918: LD_VAR 0 1
24922: PPUSH
24923: CALL_OW 301
24927: IFFALSE 24875
// end ;
24929: PPOPN 1
24931: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24932: LD_EXP 38
24936: PUSH
24937: LD_EXP 78
24941: AND
24942: IFFALSE 24954
24944: GO 24946
24946: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24947: LD_STRING earthquake(getX(game), 0, 32)
24949: PPUSH
24950: CALL_OW 559
24954: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24955: LD_EXP 38
24959: PUSH
24960: LD_EXP 79
24964: AND
24965: IFFALSE 25056
24967: GO 24969
24969: DISABLE
24970: LD_INT 0
24972: PPUSH
// begin enable ;
24973: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24974: LD_ADDR_VAR 0 1
24978: PUSH
24979: LD_INT 22
24981: PUSH
24982: LD_OWVAR 2
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 21
24993: PUSH
24994: LD_INT 2
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 33
25003: PUSH
25004: LD_INT 3
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: LIST
25015: PPUSH
25016: CALL_OW 69
25020: ST_TO_ADDR
// if not tmp then
25021: LD_VAR 0 1
25025: NOT
25026: IFFALSE 25030
// exit ;
25028: GO 25056
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25030: LD_VAR 0 1
25034: PUSH
25035: LD_INT 1
25037: PPUSH
25038: LD_VAR 0 1
25042: PPUSH
25043: CALL_OW 12
25047: ARRAY
25048: PPUSH
25049: LD_INT 1
25051: PPUSH
25052: CALL_OW 234
// end ;
25056: PPOPN 1
25058: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25059: LD_EXP 38
25063: PUSH
25064: LD_EXP 80
25068: AND
25069: IFFALSE 25210
25071: GO 25073
25073: DISABLE
25074: LD_INT 0
25076: PPUSH
25077: PPUSH
25078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25079: LD_ADDR_VAR 0 3
25083: PUSH
25084: LD_INT 22
25086: PUSH
25087: LD_OWVAR 2
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 25
25098: PUSH
25099: LD_INT 1
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PPUSH
25110: CALL_OW 69
25114: ST_TO_ADDR
// if not tmp then
25115: LD_VAR 0 3
25119: NOT
25120: IFFALSE 25124
// exit ;
25122: GO 25210
// un := tmp [ rand ( 1 , tmp ) ] ;
25124: LD_ADDR_VAR 0 2
25128: PUSH
25129: LD_VAR 0 3
25133: PUSH
25134: LD_INT 1
25136: PPUSH
25137: LD_VAR 0 3
25141: PPUSH
25142: CALL_OW 12
25146: ARRAY
25147: ST_TO_ADDR
// if Crawls ( un ) then
25148: LD_VAR 0 2
25152: PPUSH
25153: CALL_OW 318
25157: IFFALSE 25168
// ComWalk ( un ) ;
25159: LD_VAR 0 2
25163: PPUSH
25164: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25168: LD_VAR 0 2
25172: PPUSH
25173: LD_INT 9
25175: PPUSH
25176: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25180: LD_INT 28
25182: PPUSH
25183: LD_OWVAR 2
25187: PPUSH
25188: LD_INT 2
25190: PPUSH
25191: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25195: LD_INT 29
25197: PPUSH
25198: LD_OWVAR 2
25202: PPUSH
25203: LD_INT 2
25205: PPUSH
25206: CALL_OW 322
// end ;
25210: PPOPN 3
25212: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25213: LD_EXP 38
25217: PUSH
25218: LD_EXP 81
25222: AND
25223: IFFALSE 25334
25225: GO 25227
25227: DISABLE
25228: LD_INT 0
25230: PPUSH
25231: PPUSH
25232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25233: LD_ADDR_VAR 0 3
25237: PUSH
25238: LD_INT 22
25240: PUSH
25241: LD_OWVAR 2
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PUSH
25250: LD_INT 25
25252: PUSH
25253: LD_INT 1
25255: PUSH
25256: EMPTY
25257: LIST
25258: LIST
25259: PUSH
25260: EMPTY
25261: LIST
25262: LIST
25263: PPUSH
25264: CALL_OW 69
25268: ST_TO_ADDR
// if not tmp then
25269: LD_VAR 0 3
25273: NOT
25274: IFFALSE 25278
// exit ;
25276: GO 25334
// un := tmp [ rand ( 1 , tmp ) ] ;
25278: LD_ADDR_VAR 0 2
25282: PUSH
25283: LD_VAR 0 3
25287: PUSH
25288: LD_INT 1
25290: PPUSH
25291: LD_VAR 0 3
25295: PPUSH
25296: CALL_OW 12
25300: ARRAY
25301: ST_TO_ADDR
// if Crawls ( un ) then
25302: LD_VAR 0 2
25306: PPUSH
25307: CALL_OW 318
25311: IFFALSE 25322
// ComWalk ( un ) ;
25313: LD_VAR 0 2
25317: PPUSH
25318: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25322: LD_VAR 0 2
25326: PPUSH
25327: LD_INT 8
25329: PPUSH
25330: CALL_OW 336
// end ;
25334: PPOPN 3
25336: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25337: LD_EXP 38
25341: PUSH
25342: LD_EXP 82
25346: AND
25347: IFFALSE 25491
25349: GO 25351
25351: DISABLE
25352: LD_INT 0
25354: PPUSH
25355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25356: LD_ADDR_VAR 0 2
25360: PUSH
25361: LD_INT 22
25363: PUSH
25364: LD_OWVAR 2
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: LD_INT 21
25375: PUSH
25376: LD_INT 2
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: PUSH
25383: LD_INT 2
25385: PUSH
25386: LD_INT 34
25388: PUSH
25389: LD_INT 12
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 34
25398: PUSH
25399: LD_INT 51
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 34
25408: PUSH
25409: LD_INT 32
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: LIST
25426: PPUSH
25427: CALL_OW 69
25431: ST_TO_ADDR
// if not tmp then
25432: LD_VAR 0 2
25436: NOT
25437: IFFALSE 25441
// exit ;
25439: GO 25491
// for i in tmp do
25441: LD_ADDR_VAR 0 1
25445: PUSH
25446: LD_VAR 0 2
25450: PUSH
25451: FOR_IN
25452: IFFALSE 25489
// if GetCargo ( i , mat_artifact ) = 0 then
25454: LD_VAR 0 1
25458: PPUSH
25459: LD_INT 4
25461: PPUSH
25462: CALL_OW 289
25466: PUSH
25467: LD_INT 0
25469: EQUAL
25470: IFFALSE 25487
// SetCargo ( i , mat_siberit , 100 ) ;
25472: LD_VAR 0 1
25476: PPUSH
25477: LD_INT 3
25479: PPUSH
25480: LD_INT 100
25482: PPUSH
25483: CALL_OW 290
25487: GO 25451
25489: POP
25490: POP
// end ;
25491: PPOPN 2
25493: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25494: LD_EXP 38
25498: PUSH
25499: LD_EXP 83
25503: AND
25504: IFFALSE 25687
25506: GO 25508
25508: DISABLE
25509: LD_INT 0
25511: PPUSH
25512: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25513: LD_ADDR_VAR 0 2
25517: PUSH
25518: LD_INT 22
25520: PUSH
25521: LD_OWVAR 2
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PPUSH
25530: CALL_OW 69
25534: ST_TO_ADDR
// if not tmp then
25535: LD_VAR 0 2
25539: NOT
25540: IFFALSE 25544
// exit ;
25542: GO 25687
// for i := 1 to 2 do
25544: LD_ADDR_VAR 0 1
25548: PUSH
25549: DOUBLE
25550: LD_INT 1
25552: DEC
25553: ST_TO_ADDR
25554: LD_INT 2
25556: PUSH
25557: FOR_TO
25558: IFFALSE 25685
// begin uc_side := your_side ;
25560: LD_ADDR_OWVAR 20
25564: PUSH
25565: LD_OWVAR 2
25569: ST_TO_ADDR
// uc_nation := nation_american ;
25570: LD_ADDR_OWVAR 21
25574: PUSH
25575: LD_INT 1
25577: ST_TO_ADDR
// vc_chassis := us_morphling ;
25578: LD_ADDR_OWVAR 37
25582: PUSH
25583: LD_INT 5
25585: ST_TO_ADDR
// vc_engine := engine_siberite ;
25586: LD_ADDR_OWVAR 39
25590: PUSH
25591: LD_INT 3
25593: ST_TO_ADDR
// vc_control := control_computer ;
25594: LD_ADDR_OWVAR 38
25598: PUSH
25599: LD_INT 3
25601: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25602: LD_ADDR_OWVAR 40
25606: PUSH
25607: LD_INT 10
25609: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25610: LD_VAR 0 2
25614: PUSH
25615: LD_INT 1
25617: ARRAY
25618: PPUSH
25619: CALL_OW 310
25623: NOT
25624: IFFALSE 25671
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25626: CALL_OW 45
25630: PPUSH
25631: LD_VAR 0 2
25635: PUSH
25636: LD_INT 1
25638: ARRAY
25639: PPUSH
25640: CALL_OW 250
25644: PPUSH
25645: LD_VAR 0 2
25649: PUSH
25650: LD_INT 1
25652: ARRAY
25653: PPUSH
25654: CALL_OW 251
25658: PPUSH
25659: LD_INT 12
25661: PPUSH
25662: LD_INT 1
25664: PPUSH
25665: CALL_OW 50
25669: GO 25683
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25671: CALL_OW 45
25675: PPUSH
25676: LD_INT 1
25678: PPUSH
25679: CALL_OW 51
// end ;
25683: GO 25557
25685: POP
25686: POP
// end ;
25687: PPOPN 2
25689: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25690: LD_EXP 38
25694: PUSH
25695: LD_EXP 84
25699: AND
25700: IFFALSE 25922
25702: GO 25704
25704: DISABLE
25705: LD_INT 0
25707: PPUSH
25708: PPUSH
25709: PPUSH
25710: PPUSH
25711: PPUSH
25712: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25713: LD_ADDR_VAR 0 6
25717: PUSH
25718: LD_INT 22
25720: PUSH
25721: LD_OWVAR 2
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 21
25732: PUSH
25733: LD_INT 1
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 3
25742: PUSH
25743: LD_INT 23
25745: PUSH
25746: LD_INT 0
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: LIST
25761: PPUSH
25762: CALL_OW 69
25766: ST_TO_ADDR
// if not tmp then
25767: LD_VAR 0 6
25771: NOT
25772: IFFALSE 25776
// exit ;
25774: GO 25922
// s1 := rand ( 1 , 4 ) ;
25776: LD_ADDR_VAR 0 2
25780: PUSH
25781: LD_INT 1
25783: PPUSH
25784: LD_INT 4
25786: PPUSH
25787: CALL_OW 12
25791: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25792: LD_ADDR_VAR 0 4
25796: PUSH
25797: LD_VAR 0 6
25801: PUSH
25802: LD_INT 1
25804: ARRAY
25805: PPUSH
25806: LD_VAR 0 2
25810: PPUSH
25811: CALL_OW 259
25815: ST_TO_ADDR
// if s1 = 1 then
25816: LD_VAR 0 2
25820: PUSH
25821: LD_INT 1
25823: EQUAL
25824: IFFALSE 25844
// s2 := rand ( 2 , 4 ) else
25826: LD_ADDR_VAR 0 3
25830: PUSH
25831: LD_INT 2
25833: PPUSH
25834: LD_INT 4
25836: PPUSH
25837: CALL_OW 12
25841: ST_TO_ADDR
25842: GO 25852
// s2 := 1 ;
25844: LD_ADDR_VAR 0 3
25848: PUSH
25849: LD_INT 1
25851: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25852: LD_ADDR_VAR 0 5
25856: PUSH
25857: LD_VAR 0 6
25861: PUSH
25862: LD_INT 1
25864: ARRAY
25865: PPUSH
25866: LD_VAR 0 3
25870: PPUSH
25871: CALL_OW 259
25875: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25876: LD_VAR 0 6
25880: PUSH
25881: LD_INT 1
25883: ARRAY
25884: PPUSH
25885: LD_VAR 0 2
25889: PPUSH
25890: LD_VAR 0 5
25894: PPUSH
25895: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25899: LD_VAR 0 6
25903: PUSH
25904: LD_INT 1
25906: ARRAY
25907: PPUSH
25908: LD_VAR 0 3
25912: PPUSH
25913: LD_VAR 0 4
25917: PPUSH
25918: CALL_OW 237
// end ;
25922: PPOPN 6
25924: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25925: LD_EXP 38
25929: PUSH
25930: LD_EXP 85
25934: AND
25935: IFFALSE 26014
25937: GO 25939
25939: DISABLE
25940: LD_INT 0
25942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25943: LD_ADDR_VAR 0 1
25947: PUSH
25948: LD_INT 22
25950: PUSH
25951: LD_OWVAR 2
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PUSH
25960: LD_INT 30
25962: PUSH
25963: LD_INT 3
25965: PUSH
25966: EMPTY
25967: LIST
25968: LIST
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PPUSH
25974: CALL_OW 69
25978: ST_TO_ADDR
// if not tmp then
25979: LD_VAR 0 1
25983: NOT
25984: IFFALSE 25988
// exit ;
25986: GO 26014
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25988: LD_VAR 0 1
25992: PUSH
25993: LD_INT 1
25995: PPUSH
25996: LD_VAR 0 1
26000: PPUSH
26001: CALL_OW 12
26005: ARRAY
26006: PPUSH
26007: LD_INT 1
26009: PPUSH
26010: CALL_OW 234
// end ;
26014: PPOPN 1
26016: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26017: LD_EXP 38
26021: PUSH
26022: LD_EXP 86
26026: AND
26027: IFFALSE 26139
26029: GO 26031
26031: DISABLE
26032: LD_INT 0
26034: PPUSH
26035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26036: LD_ADDR_VAR 0 2
26040: PUSH
26041: LD_INT 22
26043: PUSH
26044: LD_OWVAR 2
26048: PUSH
26049: EMPTY
26050: LIST
26051: LIST
26052: PUSH
26053: LD_INT 2
26055: PUSH
26056: LD_INT 30
26058: PUSH
26059: LD_INT 27
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 30
26068: PUSH
26069: LD_INT 26
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 30
26078: PUSH
26079: LD_INT 28
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PPUSH
26096: CALL_OW 69
26100: ST_TO_ADDR
// if not tmp then
26101: LD_VAR 0 2
26105: NOT
26106: IFFALSE 26110
// exit ;
26108: GO 26139
// for i in tmp do
26110: LD_ADDR_VAR 0 1
26114: PUSH
26115: LD_VAR 0 2
26119: PUSH
26120: FOR_IN
26121: IFFALSE 26137
// SetLives ( i , 1 ) ;
26123: LD_VAR 0 1
26127: PPUSH
26128: LD_INT 1
26130: PPUSH
26131: CALL_OW 234
26135: GO 26120
26137: POP
26138: POP
// end ;
26139: PPOPN 2
26141: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26142: LD_EXP 38
26146: PUSH
26147: LD_EXP 87
26151: AND
26152: IFFALSE 26439
26154: GO 26156
26156: DISABLE
26157: LD_INT 0
26159: PPUSH
26160: PPUSH
26161: PPUSH
// begin i := rand ( 1 , 7 ) ;
26162: LD_ADDR_VAR 0 1
26166: PUSH
26167: LD_INT 1
26169: PPUSH
26170: LD_INT 7
26172: PPUSH
26173: CALL_OW 12
26177: ST_TO_ADDR
// case i of 1 :
26178: LD_VAR 0 1
26182: PUSH
26183: LD_INT 1
26185: DOUBLE
26186: EQUAL
26187: IFTRUE 26191
26189: GO 26201
26191: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26192: LD_STRING earthquake(getX(game), 0, 32)
26194: PPUSH
26195: CALL_OW 559
26199: GO 26439
26201: LD_INT 2
26203: DOUBLE
26204: EQUAL
26205: IFTRUE 26209
26207: GO 26223
26209: POP
// begin ToLua ( displayStucuk(); ) ;
26210: LD_STRING displayStucuk();
26212: PPUSH
26213: CALL_OW 559
// ResetFog ;
26217: CALL_OW 335
// end ; 3 :
26221: GO 26439
26223: LD_INT 3
26225: DOUBLE
26226: EQUAL
26227: IFTRUE 26231
26229: GO 26335
26231: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26232: LD_ADDR_VAR 0 2
26236: PUSH
26237: LD_INT 22
26239: PUSH
26240: LD_OWVAR 2
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 25
26251: PUSH
26252: LD_INT 1
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: PPUSH
26263: CALL_OW 69
26267: ST_TO_ADDR
// if not tmp then
26268: LD_VAR 0 2
26272: NOT
26273: IFFALSE 26277
// exit ;
26275: GO 26439
// un := tmp [ rand ( 1 , tmp ) ] ;
26277: LD_ADDR_VAR 0 3
26281: PUSH
26282: LD_VAR 0 2
26286: PUSH
26287: LD_INT 1
26289: PPUSH
26290: LD_VAR 0 2
26294: PPUSH
26295: CALL_OW 12
26299: ARRAY
26300: ST_TO_ADDR
// if Crawls ( un ) then
26301: LD_VAR 0 3
26305: PPUSH
26306: CALL_OW 318
26310: IFFALSE 26321
// ComWalk ( un ) ;
26312: LD_VAR 0 3
26316: PPUSH
26317: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26321: LD_VAR 0 3
26325: PPUSH
26326: LD_INT 8
26328: PPUSH
26329: CALL_OW 336
// end ; 4 :
26333: GO 26439
26335: LD_INT 4
26337: DOUBLE
26338: EQUAL
26339: IFTRUE 26343
26341: GO 26417
26343: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26344: LD_ADDR_VAR 0 2
26348: PUSH
26349: LD_INT 22
26351: PUSH
26352: LD_OWVAR 2
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 30
26363: PUSH
26364: LD_INT 29
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: EMPTY
26372: LIST
26373: LIST
26374: PPUSH
26375: CALL_OW 69
26379: ST_TO_ADDR
// if not tmp then
26380: LD_VAR 0 2
26384: NOT
26385: IFFALSE 26389
// exit ;
26387: GO 26439
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26389: LD_VAR 0 2
26393: PUSH
26394: LD_INT 1
26396: ARRAY
26397: PPUSH
26398: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26402: LD_VAR 0 2
26406: PUSH
26407: LD_INT 1
26409: ARRAY
26410: PPUSH
26411: CALL_OW 65
// end ; 5 .. 7 :
26415: GO 26439
26417: LD_INT 5
26419: DOUBLE
26420: GREATEREQUAL
26421: IFFALSE 26429
26423: LD_INT 7
26425: DOUBLE
26426: LESSEQUAL
26427: IFTRUE 26431
26429: GO 26438
26431: POP
// StreamSibBomb ; end ;
26432: CALL 22676 0 0
26436: GO 26439
26438: POP
// end ;
26439: PPOPN 3
26441: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26442: LD_EXP 38
26446: PUSH
26447: LD_EXP 88
26451: AND
26452: IFFALSE 26608
26454: GO 26456
26456: DISABLE
26457: LD_INT 0
26459: PPUSH
26460: PPUSH
26461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26462: LD_ADDR_VAR 0 2
26466: PUSH
26467: LD_INT 81
26469: PUSH
26470: LD_OWVAR 2
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 2
26481: PUSH
26482: LD_INT 21
26484: PUSH
26485: LD_INT 1
26487: PUSH
26488: EMPTY
26489: LIST
26490: LIST
26491: PUSH
26492: LD_INT 21
26494: PUSH
26495: LD_INT 2
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: EMPTY
26503: LIST
26504: LIST
26505: LIST
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PPUSH
26511: CALL_OW 69
26515: ST_TO_ADDR
// if not tmp then
26516: LD_VAR 0 2
26520: NOT
26521: IFFALSE 26525
// exit ;
26523: GO 26608
// p := 0 ;
26525: LD_ADDR_VAR 0 3
26529: PUSH
26530: LD_INT 0
26532: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26533: LD_INT 35
26535: PPUSH
26536: CALL_OW 67
// p := p + 1 ;
26540: LD_ADDR_VAR 0 3
26544: PUSH
26545: LD_VAR 0 3
26549: PUSH
26550: LD_INT 1
26552: PLUS
26553: ST_TO_ADDR
// for i in tmp do
26554: LD_ADDR_VAR 0 1
26558: PUSH
26559: LD_VAR 0 2
26563: PUSH
26564: FOR_IN
26565: IFFALSE 26596
// if GetLives ( i ) < 1000 then
26567: LD_VAR 0 1
26571: PPUSH
26572: CALL_OW 256
26576: PUSH
26577: LD_INT 1000
26579: LESS
26580: IFFALSE 26594
// SetLives ( i , 1000 ) ;
26582: LD_VAR 0 1
26586: PPUSH
26587: LD_INT 1000
26589: PPUSH
26590: CALL_OW 234
26594: GO 26564
26596: POP
26597: POP
// until p > 20 ;
26598: LD_VAR 0 3
26602: PUSH
26603: LD_INT 20
26605: GREATER
26606: IFFALSE 26533
// end ;
26608: PPOPN 3
26610: END
// every 0 0$1 trigger StreamModeActive and sTime do
26611: LD_EXP 38
26615: PUSH
26616: LD_EXP 89
26620: AND
26621: IFFALSE 26656
26623: GO 26625
26625: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26626: LD_INT 28
26628: PPUSH
26629: LD_OWVAR 2
26633: PPUSH
26634: LD_INT 2
26636: PPUSH
26637: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26641: LD_INT 30
26643: PPUSH
26644: LD_OWVAR 2
26648: PPUSH
26649: LD_INT 2
26651: PPUSH
26652: CALL_OW 322
// end ;
26656: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26657: LD_EXP 38
26661: PUSH
26662: LD_EXP 90
26666: AND
26667: IFFALSE 26788
26669: GO 26671
26671: DISABLE
26672: LD_INT 0
26674: PPUSH
26675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26676: LD_ADDR_VAR 0 2
26680: PUSH
26681: LD_INT 22
26683: PUSH
26684: LD_OWVAR 2
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: LD_INT 21
26695: PUSH
26696: LD_INT 1
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 3
26705: PUSH
26706: LD_INT 23
26708: PUSH
26709: LD_INT 0
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: EMPTY
26717: LIST
26718: LIST
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: LIST
26724: PPUSH
26725: CALL_OW 69
26729: ST_TO_ADDR
// if not tmp then
26730: LD_VAR 0 2
26734: NOT
26735: IFFALSE 26739
// exit ;
26737: GO 26788
// for i in tmp do
26739: LD_ADDR_VAR 0 1
26743: PUSH
26744: LD_VAR 0 2
26748: PUSH
26749: FOR_IN
26750: IFFALSE 26786
// begin if Crawls ( i ) then
26752: LD_VAR 0 1
26756: PPUSH
26757: CALL_OW 318
26761: IFFALSE 26772
// ComWalk ( i ) ;
26763: LD_VAR 0 1
26767: PPUSH
26768: CALL_OW 138
// SetClass ( i , 2 ) ;
26772: LD_VAR 0 1
26776: PPUSH
26777: LD_INT 2
26779: PPUSH
26780: CALL_OW 336
// end ;
26784: GO 26749
26786: POP
26787: POP
// end ;
26788: PPOPN 2
26790: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26791: LD_EXP 38
26795: PUSH
26796: LD_EXP 91
26800: AND
26801: IFFALSE 27089
26803: GO 26805
26805: DISABLE
26806: LD_INT 0
26808: PPUSH
26809: PPUSH
26810: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26811: LD_OWVAR 2
26815: PPUSH
26816: LD_INT 9
26818: PPUSH
26819: LD_INT 1
26821: PPUSH
26822: LD_INT 1
26824: PPUSH
26825: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26829: LD_INT 9
26831: PPUSH
26832: LD_OWVAR 2
26836: PPUSH
26837: CALL_OW 343
// uc_side := 9 ;
26841: LD_ADDR_OWVAR 20
26845: PUSH
26846: LD_INT 9
26848: ST_TO_ADDR
// uc_nation := 2 ;
26849: LD_ADDR_OWVAR 21
26853: PUSH
26854: LD_INT 2
26856: ST_TO_ADDR
// hc_name := Dark Warrior ;
26857: LD_ADDR_OWVAR 26
26861: PUSH
26862: LD_STRING Dark Warrior
26864: ST_TO_ADDR
// hc_gallery :=  ;
26865: LD_ADDR_OWVAR 33
26869: PUSH
26870: LD_STRING 
26872: ST_TO_ADDR
// hc_noskilllimit := true ;
26873: LD_ADDR_OWVAR 76
26877: PUSH
26878: LD_INT 1
26880: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26881: LD_ADDR_OWVAR 31
26885: PUSH
26886: LD_INT 30
26888: PUSH
26889: LD_INT 30
26891: PUSH
26892: LD_INT 30
26894: PUSH
26895: LD_INT 30
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: ST_TO_ADDR
// un := CreateHuman ;
26904: LD_ADDR_VAR 0 3
26908: PUSH
26909: CALL_OW 44
26913: ST_TO_ADDR
// hc_noskilllimit := false ;
26914: LD_ADDR_OWVAR 76
26918: PUSH
26919: LD_INT 0
26921: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26922: LD_VAR 0 3
26926: PPUSH
26927: LD_INT 1
26929: PPUSH
26930: CALL_OW 51
// ToLua ( playRanger() ) ;
26934: LD_STRING playRanger()
26936: PPUSH
26937: CALL_OW 559
// p := 0 ;
26941: LD_ADDR_VAR 0 2
26945: PUSH
26946: LD_INT 0
26948: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26949: LD_INT 35
26951: PPUSH
26952: CALL_OW 67
// p := p + 1 ;
26956: LD_ADDR_VAR 0 2
26960: PUSH
26961: LD_VAR 0 2
26965: PUSH
26966: LD_INT 1
26968: PLUS
26969: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26970: LD_VAR 0 3
26974: PPUSH
26975: CALL_OW 256
26979: PUSH
26980: LD_INT 1000
26982: LESS
26983: IFFALSE 26997
// SetLives ( un , 1000 ) ;
26985: LD_VAR 0 3
26989: PPUSH
26990: LD_INT 1000
26992: PPUSH
26993: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26997: LD_VAR 0 3
27001: PPUSH
27002: LD_INT 81
27004: PUSH
27005: LD_OWVAR 2
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: PUSH
27014: LD_INT 91
27016: PUSH
27017: LD_VAR 0 3
27021: PUSH
27022: LD_INT 30
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: LIST
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: PPUSH
27034: CALL_OW 69
27038: PPUSH
27039: LD_VAR 0 3
27043: PPUSH
27044: CALL_OW 74
27048: PPUSH
27049: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27053: LD_VAR 0 2
27057: PUSH
27058: LD_INT 80
27060: GREATER
27061: PUSH
27062: LD_VAR 0 3
27066: PPUSH
27067: CALL_OW 301
27071: OR
27072: IFFALSE 26949
// if un then
27074: LD_VAR 0 3
27078: IFFALSE 27089
// RemoveUnit ( un ) ;
27080: LD_VAR 0 3
27084: PPUSH
27085: CALL_OW 64
// end ;
27089: PPOPN 3
27091: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27092: LD_EXP 92
27096: IFFALSE 27212
27098: GO 27100
27100: DISABLE
27101: LD_INT 0
27103: PPUSH
27104: PPUSH
27105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27106: LD_ADDR_VAR 0 2
27110: PUSH
27111: LD_INT 81
27113: PUSH
27114: LD_OWVAR 2
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: PUSH
27123: LD_INT 21
27125: PUSH
27126: LD_INT 1
27128: PUSH
27129: EMPTY
27130: LIST
27131: LIST
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PPUSH
27137: CALL_OW 69
27141: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27142: LD_STRING playComputer()
27144: PPUSH
27145: CALL_OW 559
// if not tmp then
27149: LD_VAR 0 2
27153: NOT
27154: IFFALSE 27158
// exit ;
27156: GO 27212
// for i in tmp do
27158: LD_ADDR_VAR 0 1
27162: PUSH
27163: LD_VAR 0 2
27167: PUSH
27168: FOR_IN
27169: IFFALSE 27210
// for j := 1 to 4 do
27171: LD_ADDR_VAR 0 3
27175: PUSH
27176: DOUBLE
27177: LD_INT 1
27179: DEC
27180: ST_TO_ADDR
27181: LD_INT 4
27183: PUSH
27184: FOR_TO
27185: IFFALSE 27206
// SetSkill ( i , j , 10 ) ;
27187: LD_VAR 0 1
27191: PPUSH
27192: LD_VAR 0 3
27196: PPUSH
27197: LD_INT 10
27199: PPUSH
27200: CALL_OW 237
27204: GO 27184
27206: POP
27207: POP
27208: GO 27168
27210: POP
27211: POP
// end ;
27212: PPOPN 3
27214: END
// every 0 0$1 trigger s30 do var i , tmp ;
27215: LD_EXP 93
27219: IFFALSE 27288
27221: GO 27223
27223: DISABLE
27224: LD_INT 0
27226: PPUSH
27227: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27228: LD_ADDR_VAR 0 2
27232: PUSH
27233: LD_INT 22
27235: PUSH
27236: LD_OWVAR 2
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PPUSH
27245: CALL_OW 69
27249: ST_TO_ADDR
// if not tmp then
27250: LD_VAR 0 2
27254: NOT
27255: IFFALSE 27259
// exit ;
27257: GO 27288
// for i in tmp do
27259: LD_ADDR_VAR 0 1
27263: PUSH
27264: LD_VAR 0 2
27268: PUSH
27269: FOR_IN
27270: IFFALSE 27286
// SetLives ( i , 300 ) ;
27272: LD_VAR 0 1
27276: PPUSH
27277: LD_INT 300
27279: PPUSH
27280: CALL_OW 234
27284: GO 27269
27286: POP
27287: POP
// end ;
27288: PPOPN 2
27290: END
// every 0 0$1 trigger s60 do var i , tmp ;
27291: LD_EXP 94
27295: IFFALSE 27364
27297: GO 27299
27299: DISABLE
27300: LD_INT 0
27302: PPUSH
27303: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27304: LD_ADDR_VAR 0 2
27308: PUSH
27309: LD_INT 22
27311: PUSH
27312: LD_OWVAR 2
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PPUSH
27321: CALL_OW 69
27325: ST_TO_ADDR
// if not tmp then
27326: LD_VAR 0 2
27330: NOT
27331: IFFALSE 27335
// exit ;
27333: GO 27364
// for i in tmp do
27335: LD_ADDR_VAR 0 1
27339: PUSH
27340: LD_VAR 0 2
27344: PUSH
27345: FOR_IN
27346: IFFALSE 27362
// SetLives ( i , 600 ) ;
27348: LD_VAR 0 1
27352: PPUSH
27353: LD_INT 600
27355: PPUSH
27356: CALL_OW 234
27360: GO 27345
27362: POP
27363: POP
// end ;
27364: PPOPN 2
27366: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27367: LD_INT 0
27369: PPUSH
// case cmd of 301 :
27370: LD_VAR 0 1
27374: PUSH
27375: LD_INT 301
27377: DOUBLE
27378: EQUAL
27379: IFTRUE 27383
27381: GO 27415
27383: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27384: LD_VAR 0 6
27388: PPUSH
27389: LD_VAR 0 7
27393: PPUSH
27394: LD_VAR 0 8
27398: PPUSH
27399: LD_VAR 0 4
27403: PPUSH
27404: LD_VAR 0 5
27408: PPUSH
27409: CALL 28616 0 5
27413: GO 27536
27415: LD_INT 302
27417: DOUBLE
27418: EQUAL
27419: IFTRUE 27423
27421: GO 27460
27423: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27424: LD_VAR 0 6
27428: PPUSH
27429: LD_VAR 0 7
27433: PPUSH
27434: LD_VAR 0 8
27438: PPUSH
27439: LD_VAR 0 9
27443: PPUSH
27444: LD_VAR 0 4
27448: PPUSH
27449: LD_VAR 0 5
27453: PPUSH
27454: CALL 28707 0 6
27458: GO 27536
27460: LD_INT 303
27462: DOUBLE
27463: EQUAL
27464: IFTRUE 27468
27466: GO 27505
27468: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27469: LD_VAR 0 6
27473: PPUSH
27474: LD_VAR 0 7
27478: PPUSH
27479: LD_VAR 0 8
27483: PPUSH
27484: LD_VAR 0 9
27488: PPUSH
27489: LD_VAR 0 4
27493: PPUSH
27494: LD_VAR 0 5
27498: PPUSH
27499: CALL 27541 0 6
27503: GO 27536
27505: LD_INT 304
27507: DOUBLE
27508: EQUAL
27509: IFTRUE 27513
27511: GO 27535
27513: POP
// hHackTeleport ( unit , x , y ) ; end ;
27514: LD_VAR 0 2
27518: PPUSH
27519: LD_VAR 0 4
27523: PPUSH
27524: LD_VAR 0 5
27528: PPUSH
27529: CALL 29300 0 3
27533: GO 27536
27535: POP
// end ;
27536: LD_VAR 0 12
27540: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27541: LD_INT 0
27543: PPUSH
27544: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27545: LD_VAR 0 1
27549: PUSH
27550: LD_INT 1
27552: LESS
27553: PUSH
27554: LD_VAR 0 1
27558: PUSH
27559: LD_INT 3
27561: GREATER
27562: OR
27563: PUSH
27564: LD_VAR 0 5
27568: PPUSH
27569: LD_VAR 0 6
27573: PPUSH
27574: CALL_OW 428
27578: OR
27579: IFFALSE 27583
// exit ;
27581: GO 28303
// uc_side := your_side ;
27583: LD_ADDR_OWVAR 20
27587: PUSH
27588: LD_OWVAR 2
27592: ST_TO_ADDR
// uc_nation := nation ;
27593: LD_ADDR_OWVAR 21
27597: PUSH
27598: LD_VAR 0 1
27602: ST_TO_ADDR
// bc_level = 1 ;
27603: LD_ADDR_OWVAR 43
27607: PUSH
27608: LD_INT 1
27610: ST_TO_ADDR
// case btype of 1 :
27611: LD_VAR 0 2
27615: PUSH
27616: LD_INT 1
27618: DOUBLE
27619: EQUAL
27620: IFTRUE 27624
27622: GO 27635
27624: POP
// bc_type := b_depot ; 2 :
27625: LD_ADDR_OWVAR 42
27629: PUSH
27630: LD_INT 0
27632: ST_TO_ADDR
27633: GO 28247
27635: LD_INT 2
27637: DOUBLE
27638: EQUAL
27639: IFTRUE 27643
27641: GO 27654
27643: POP
// bc_type := b_warehouse ; 3 :
27644: LD_ADDR_OWVAR 42
27648: PUSH
27649: LD_INT 1
27651: ST_TO_ADDR
27652: GO 28247
27654: LD_INT 3
27656: DOUBLE
27657: EQUAL
27658: IFTRUE 27662
27660: GO 27673
27662: POP
// bc_type := b_lab ; 4 .. 9 :
27663: LD_ADDR_OWVAR 42
27667: PUSH
27668: LD_INT 6
27670: ST_TO_ADDR
27671: GO 28247
27673: LD_INT 4
27675: DOUBLE
27676: GREATEREQUAL
27677: IFFALSE 27685
27679: LD_INT 9
27681: DOUBLE
27682: LESSEQUAL
27683: IFTRUE 27687
27685: GO 27739
27687: POP
// begin bc_type := b_lab_half ;
27688: LD_ADDR_OWVAR 42
27692: PUSH
27693: LD_INT 7
27695: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27696: LD_ADDR_OWVAR 44
27700: PUSH
27701: LD_INT 10
27703: PUSH
27704: LD_INT 11
27706: PUSH
27707: LD_INT 12
27709: PUSH
27710: LD_INT 15
27712: PUSH
27713: LD_INT 14
27715: PUSH
27716: LD_INT 13
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: PUSH
27727: LD_VAR 0 2
27731: PUSH
27732: LD_INT 3
27734: MINUS
27735: ARRAY
27736: ST_TO_ADDR
// end ; 10 .. 13 :
27737: GO 28247
27739: LD_INT 10
27741: DOUBLE
27742: GREATEREQUAL
27743: IFFALSE 27751
27745: LD_INT 13
27747: DOUBLE
27748: LESSEQUAL
27749: IFTRUE 27753
27751: GO 27830
27753: POP
// begin bc_type := b_lab_full ;
27754: LD_ADDR_OWVAR 42
27758: PUSH
27759: LD_INT 8
27761: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27762: LD_ADDR_OWVAR 44
27766: PUSH
27767: LD_INT 10
27769: PUSH
27770: LD_INT 12
27772: PUSH
27773: LD_INT 14
27775: PUSH
27776: LD_INT 13
27778: PUSH
27779: EMPTY
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: PUSH
27785: LD_VAR 0 2
27789: PUSH
27790: LD_INT 9
27792: MINUS
27793: ARRAY
27794: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27795: LD_ADDR_OWVAR 45
27799: PUSH
27800: LD_INT 11
27802: PUSH
27803: LD_INT 15
27805: PUSH
27806: LD_INT 12
27808: PUSH
27809: LD_INT 15
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: PUSH
27818: LD_VAR 0 2
27822: PUSH
27823: LD_INT 9
27825: MINUS
27826: ARRAY
27827: ST_TO_ADDR
// end ; 14 :
27828: GO 28247
27830: LD_INT 14
27832: DOUBLE
27833: EQUAL
27834: IFTRUE 27838
27836: GO 27849
27838: POP
// bc_type := b_workshop ; 15 :
27839: LD_ADDR_OWVAR 42
27843: PUSH
27844: LD_INT 2
27846: ST_TO_ADDR
27847: GO 28247
27849: LD_INT 15
27851: DOUBLE
27852: EQUAL
27853: IFTRUE 27857
27855: GO 27868
27857: POP
// bc_type := b_factory ; 16 :
27858: LD_ADDR_OWVAR 42
27862: PUSH
27863: LD_INT 3
27865: ST_TO_ADDR
27866: GO 28247
27868: LD_INT 16
27870: DOUBLE
27871: EQUAL
27872: IFTRUE 27876
27874: GO 27887
27876: POP
// bc_type := b_ext_gun ; 17 :
27877: LD_ADDR_OWVAR 42
27881: PUSH
27882: LD_INT 17
27884: ST_TO_ADDR
27885: GO 28247
27887: LD_INT 17
27889: DOUBLE
27890: EQUAL
27891: IFTRUE 27895
27893: GO 27923
27895: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27896: LD_ADDR_OWVAR 42
27900: PUSH
27901: LD_INT 19
27903: PUSH
27904: LD_INT 23
27906: PUSH
27907: LD_INT 19
27909: PUSH
27910: EMPTY
27911: LIST
27912: LIST
27913: LIST
27914: PUSH
27915: LD_VAR 0 1
27919: ARRAY
27920: ST_TO_ADDR
27921: GO 28247
27923: LD_INT 18
27925: DOUBLE
27926: EQUAL
27927: IFTRUE 27931
27929: GO 27942
27931: POP
// bc_type := b_ext_radar ; 19 :
27932: LD_ADDR_OWVAR 42
27936: PUSH
27937: LD_INT 20
27939: ST_TO_ADDR
27940: GO 28247
27942: LD_INT 19
27944: DOUBLE
27945: EQUAL
27946: IFTRUE 27950
27948: GO 27961
27950: POP
// bc_type := b_ext_radio ; 20 :
27951: LD_ADDR_OWVAR 42
27955: PUSH
27956: LD_INT 22
27958: ST_TO_ADDR
27959: GO 28247
27961: LD_INT 20
27963: DOUBLE
27964: EQUAL
27965: IFTRUE 27969
27967: GO 27980
27969: POP
// bc_type := b_ext_siberium ; 21 :
27970: LD_ADDR_OWVAR 42
27974: PUSH
27975: LD_INT 21
27977: ST_TO_ADDR
27978: GO 28247
27980: LD_INT 21
27982: DOUBLE
27983: EQUAL
27984: IFTRUE 27988
27986: GO 27999
27988: POP
// bc_type := b_ext_computer ; 22 :
27989: LD_ADDR_OWVAR 42
27993: PUSH
27994: LD_INT 24
27996: ST_TO_ADDR
27997: GO 28247
27999: LD_INT 22
28001: DOUBLE
28002: EQUAL
28003: IFTRUE 28007
28005: GO 28018
28007: POP
// bc_type := b_ext_track ; 23 :
28008: LD_ADDR_OWVAR 42
28012: PUSH
28013: LD_INT 16
28015: ST_TO_ADDR
28016: GO 28247
28018: LD_INT 23
28020: DOUBLE
28021: EQUAL
28022: IFTRUE 28026
28024: GO 28037
28026: POP
// bc_type := b_ext_laser ; 24 :
28027: LD_ADDR_OWVAR 42
28031: PUSH
28032: LD_INT 25
28034: ST_TO_ADDR
28035: GO 28247
28037: LD_INT 24
28039: DOUBLE
28040: EQUAL
28041: IFTRUE 28045
28043: GO 28056
28045: POP
// bc_type := b_control_tower ; 25 :
28046: LD_ADDR_OWVAR 42
28050: PUSH
28051: LD_INT 36
28053: ST_TO_ADDR
28054: GO 28247
28056: LD_INT 25
28058: DOUBLE
28059: EQUAL
28060: IFTRUE 28064
28062: GO 28075
28064: POP
// bc_type := b_breastwork ; 26 :
28065: LD_ADDR_OWVAR 42
28069: PUSH
28070: LD_INT 31
28072: ST_TO_ADDR
28073: GO 28247
28075: LD_INT 26
28077: DOUBLE
28078: EQUAL
28079: IFTRUE 28083
28081: GO 28094
28083: POP
// bc_type := b_bunker ; 27 :
28084: LD_ADDR_OWVAR 42
28088: PUSH
28089: LD_INT 32
28091: ST_TO_ADDR
28092: GO 28247
28094: LD_INT 27
28096: DOUBLE
28097: EQUAL
28098: IFTRUE 28102
28100: GO 28113
28102: POP
// bc_type := b_turret ; 28 :
28103: LD_ADDR_OWVAR 42
28107: PUSH
28108: LD_INT 33
28110: ST_TO_ADDR
28111: GO 28247
28113: LD_INT 28
28115: DOUBLE
28116: EQUAL
28117: IFTRUE 28121
28119: GO 28132
28121: POP
// bc_type := b_armoury ; 29 :
28122: LD_ADDR_OWVAR 42
28126: PUSH
28127: LD_INT 4
28129: ST_TO_ADDR
28130: GO 28247
28132: LD_INT 29
28134: DOUBLE
28135: EQUAL
28136: IFTRUE 28140
28138: GO 28151
28140: POP
// bc_type := b_barracks ; 30 :
28141: LD_ADDR_OWVAR 42
28145: PUSH
28146: LD_INT 5
28148: ST_TO_ADDR
28149: GO 28247
28151: LD_INT 30
28153: DOUBLE
28154: EQUAL
28155: IFTRUE 28159
28157: GO 28170
28159: POP
// bc_type := b_solar_power ; 31 :
28160: LD_ADDR_OWVAR 42
28164: PUSH
28165: LD_INT 27
28167: ST_TO_ADDR
28168: GO 28247
28170: LD_INT 31
28172: DOUBLE
28173: EQUAL
28174: IFTRUE 28178
28176: GO 28189
28178: POP
// bc_type := b_oil_power ; 32 :
28179: LD_ADDR_OWVAR 42
28183: PUSH
28184: LD_INT 26
28186: ST_TO_ADDR
28187: GO 28247
28189: LD_INT 32
28191: DOUBLE
28192: EQUAL
28193: IFTRUE 28197
28195: GO 28208
28197: POP
// bc_type := b_siberite_power ; 33 :
28198: LD_ADDR_OWVAR 42
28202: PUSH
28203: LD_INT 28
28205: ST_TO_ADDR
28206: GO 28247
28208: LD_INT 33
28210: DOUBLE
28211: EQUAL
28212: IFTRUE 28216
28214: GO 28227
28216: POP
// bc_type := b_oil_mine ; 34 :
28217: LD_ADDR_OWVAR 42
28221: PUSH
28222: LD_INT 29
28224: ST_TO_ADDR
28225: GO 28247
28227: LD_INT 34
28229: DOUBLE
28230: EQUAL
28231: IFTRUE 28235
28233: GO 28246
28235: POP
// bc_type := b_siberite_mine ; end ;
28236: LD_ADDR_OWVAR 42
28240: PUSH
28241: LD_INT 30
28243: ST_TO_ADDR
28244: GO 28247
28246: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28247: LD_ADDR_VAR 0 8
28251: PUSH
28252: LD_VAR 0 5
28256: PPUSH
28257: LD_VAR 0 6
28261: PPUSH
28262: LD_VAR 0 3
28266: PPUSH
28267: CALL_OW 47
28271: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28272: LD_OWVAR 42
28276: PUSH
28277: LD_INT 32
28279: PUSH
28280: LD_INT 33
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: IN
28287: IFFALSE 28303
// PlaceWeaponTurret ( b , weapon ) ;
28289: LD_VAR 0 8
28293: PPUSH
28294: LD_VAR 0 4
28298: PPUSH
28299: CALL_OW 431
// end ;
28303: LD_VAR 0 7
28307: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28308: LD_INT 0
28310: PPUSH
28311: PPUSH
28312: PPUSH
28313: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28314: LD_ADDR_VAR 0 4
28318: PUSH
28319: LD_INT 22
28321: PUSH
28322: LD_OWVAR 2
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PUSH
28331: LD_INT 2
28333: PUSH
28334: LD_INT 30
28336: PUSH
28337: LD_INT 0
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 30
28346: PUSH
28347: LD_INT 1
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: EMPTY
28355: LIST
28356: LIST
28357: LIST
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PPUSH
28363: CALL_OW 69
28367: ST_TO_ADDR
// if not tmp then
28368: LD_VAR 0 4
28372: NOT
28373: IFFALSE 28377
// exit ;
28375: GO 28436
// for i in tmp do
28377: LD_ADDR_VAR 0 2
28381: PUSH
28382: LD_VAR 0 4
28386: PUSH
28387: FOR_IN
28388: IFFALSE 28434
// for j = 1 to 3 do
28390: LD_ADDR_VAR 0 3
28394: PUSH
28395: DOUBLE
28396: LD_INT 1
28398: DEC
28399: ST_TO_ADDR
28400: LD_INT 3
28402: PUSH
28403: FOR_TO
28404: IFFALSE 28430
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28406: LD_VAR 0 2
28410: PPUSH
28411: CALL_OW 274
28415: PPUSH
28416: LD_VAR 0 3
28420: PPUSH
28421: LD_INT 99999
28423: PPUSH
28424: CALL_OW 277
28428: GO 28403
28430: POP
28431: POP
28432: GO 28387
28434: POP
28435: POP
// end ;
28436: LD_VAR 0 1
28440: RET
// export function hHackSetLevel10 ; var i , j ; begin
28441: LD_INT 0
28443: PPUSH
28444: PPUSH
28445: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28446: LD_ADDR_VAR 0 2
28450: PUSH
28451: LD_INT 21
28453: PUSH
28454: LD_INT 1
28456: PUSH
28457: EMPTY
28458: LIST
28459: LIST
28460: PPUSH
28461: CALL_OW 69
28465: PUSH
28466: FOR_IN
28467: IFFALSE 28519
// if IsSelected ( i ) then
28469: LD_VAR 0 2
28473: PPUSH
28474: CALL_OW 306
28478: IFFALSE 28517
// begin for j := 1 to 4 do
28480: LD_ADDR_VAR 0 3
28484: PUSH
28485: DOUBLE
28486: LD_INT 1
28488: DEC
28489: ST_TO_ADDR
28490: LD_INT 4
28492: PUSH
28493: FOR_TO
28494: IFFALSE 28515
// SetSkill ( i , j , 10 ) ;
28496: LD_VAR 0 2
28500: PPUSH
28501: LD_VAR 0 3
28505: PPUSH
28506: LD_INT 10
28508: PPUSH
28509: CALL_OW 237
28513: GO 28493
28515: POP
28516: POP
// end ;
28517: GO 28466
28519: POP
28520: POP
// end ;
28521: LD_VAR 0 1
28525: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28526: LD_INT 0
28528: PPUSH
28529: PPUSH
28530: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28531: LD_ADDR_VAR 0 2
28535: PUSH
28536: LD_INT 22
28538: PUSH
28539: LD_OWVAR 2
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 21
28550: PUSH
28551: LD_INT 1
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: PPUSH
28562: CALL_OW 69
28566: PUSH
28567: FOR_IN
28568: IFFALSE 28609
// begin for j := 1 to 4 do
28570: LD_ADDR_VAR 0 3
28574: PUSH
28575: DOUBLE
28576: LD_INT 1
28578: DEC
28579: ST_TO_ADDR
28580: LD_INT 4
28582: PUSH
28583: FOR_TO
28584: IFFALSE 28605
// SetSkill ( i , j , 10 ) ;
28586: LD_VAR 0 2
28590: PPUSH
28591: LD_VAR 0 3
28595: PPUSH
28596: LD_INT 10
28598: PPUSH
28599: CALL_OW 237
28603: GO 28583
28605: POP
28606: POP
// end ;
28607: GO 28567
28609: POP
28610: POP
// end ;
28611: LD_VAR 0 1
28615: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28616: LD_INT 0
28618: PPUSH
// uc_side := your_side ;
28619: LD_ADDR_OWVAR 20
28623: PUSH
28624: LD_OWVAR 2
28628: ST_TO_ADDR
// uc_nation := nation ;
28629: LD_ADDR_OWVAR 21
28633: PUSH
28634: LD_VAR 0 1
28638: ST_TO_ADDR
// InitHc ;
28639: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28643: LD_INT 0
28645: PPUSH
28646: LD_VAR 0 2
28650: PPUSH
28651: LD_VAR 0 3
28655: PPUSH
28656: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28660: LD_VAR 0 4
28664: PPUSH
28665: LD_VAR 0 5
28669: PPUSH
28670: CALL_OW 428
28674: PUSH
28675: LD_INT 0
28677: EQUAL
28678: IFFALSE 28702
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28680: CALL_OW 44
28684: PPUSH
28685: LD_VAR 0 4
28689: PPUSH
28690: LD_VAR 0 5
28694: PPUSH
28695: LD_INT 1
28697: PPUSH
28698: CALL_OW 48
// end ;
28702: LD_VAR 0 6
28706: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28707: LD_INT 0
28709: PPUSH
28710: PPUSH
// uc_side := your_side ;
28711: LD_ADDR_OWVAR 20
28715: PUSH
28716: LD_OWVAR 2
28720: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28721: LD_VAR 0 1
28725: PUSH
28726: LD_INT 1
28728: PUSH
28729: LD_INT 2
28731: PUSH
28732: LD_INT 3
28734: PUSH
28735: LD_INT 4
28737: PUSH
28738: LD_INT 5
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: IN
28748: IFFALSE 28760
// uc_nation := nation_american else
28750: LD_ADDR_OWVAR 21
28754: PUSH
28755: LD_INT 1
28757: ST_TO_ADDR
28758: GO 28803
// if chassis in [ 11 , 12 , 13 , 14 ] then
28760: LD_VAR 0 1
28764: PUSH
28765: LD_INT 11
28767: PUSH
28768: LD_INT 12
28770: PUSH
28771: LD_INT 13
28773: PUSH
28774: LD_INT 14
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: IN
28783: IFFALSE 28795
// uc_nation := nation_arabian else
28785: LD_ADDR_OWVAR 21
28789: PUSH
28790: LD_INT 2
28792: ST_TO_ADDR
28793: GO 28803
// uc_nation := nation_russian ;
28795: LD_ADDR_OWVAR 21
28799: PUSH
28800: LD_INT 3
28802: ST_TO_ADDR
// vc_chassis := chassis ;
28803: LD_ADDR_OWVAR 37
28807: PUSH
28808: LD_VAR 0 1
28812: ST_TO_ADDR
// vc_engine := engine ;
28813: LD_ADDR_OWVAR 39
28817: PUSH
28818: LD_VAR 0 2
28822: ST_TO_ADDR
// vc_control := control ;
28823: LD_ADDR_OWVAR 38
28827: PUSH
28828: LD_VAR 0 3
28832: ST_TO_ADDR
// vc_weapon := weapon ;
28833: LD_ADDR_OWVAR 40
28837: PUSH
28838: LD_VAR 0 4
28842: ST_TO_ADDR
// un := CreateVehicle ;
28843: LD_ADDR_VAR 0 8
28847: PUSH
28848: CALL_OW 45
28852: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28853: LD_VAR 0 8
28857: PPUSH
28858: LD_INT 0
28860: PPUSH
28861: LD_INT 5
28863: PPUSH
28864: CALL_OW 12
28868: PPUSH
28869: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28873: LD_VAR 0 8
28877: PPUSH
28878: LD_VAR 0 5
28882: PPUSH
28883: LD_VAR 0 6
28887: PPUSH
28888: LD_INT 1
28890: PPUSH
28891: CALL_OW 48
// end ;
28895: LD_VAR 0 7
28899: RET
// export hInvincible ; every 1 do
28900: GO 28902
28902: DISABLE
// hInvincible := [ ] ;
28903: LD_ADDR_EXP 95
28907: PUSH
28908: EMPTY
28909: ST_TO_ADDR
28910: END
// every 10 do var i ;
28911: GO 28913
28913: DISABLE
28914: LD_INT 0
28916: PPUSH
// begin enable ;
28917: ENABLE
// if not hInvincible then
28918: LD_EXP 95
28922: NOT
28923: IFFALSE 28927
// exit ;
28925: GO 28971
// for i in hInvincible do
28927: LD_ADDR_VAR 0 1
28931: PUSH
28932: LD_EXP 95
28936: PUSH
28937: FOR_IN
28938: IFFALSE 28969
// if GetLives ( i ) < 1000 then
28940: LD_VAR 0 1
28944: PPUSH
28945: CALL_OW 256
28949: PUSH
28950: LD_INT 1000
28952: LESS
28953: IFFALSE 28967
// SetLives ( i , 1000 ) ;
28955: LD_VAR 0 1
28959: PPUSH
28960: LD_INT 1000
28962: PPUSH
28963: CALL_OW 234
28967: GO 28937
28969: POP
28970: POP
// end ;
28971: PPOPN 1
28973: END
// export function hHackInvincible ; var i ; begin
28974: LD_INT 0
28976: PPUSH
28977: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28978: LD_ADDR_VAR 0 2
28982: PUSH
28983: LD_INT 2
28985: PUSH
28986: LD_INT 21
28988: PUSH
28989: LD_INT 1
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 21
28998: PUSH
28999: LD_INT 2
29001: PUSH
29002: EMPTY
29003: LIST
29004: LIST
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: LIST
29010: PPUSH
29011: CALL_OW 69
29015: PUSH
29016: FOR_IN
29017: IFFALSE 29078
// if IsSelected ( i ) then
29019: LD_VAR 0 2
29023: PPUSH
29024: CALL_OW 306
29028: IFFALSE 29076
// begin if i in hInvincible then
29030: LD_VAR 0 2
29034: PUSH
29035: LD_EXP 95
29039: IN
29040: IFFALSE 29060
// hInvincible := hInvincible diff i else
29042: LD_ADDR_EXP 95
29046: PUSH
29047: LD_EXP 95
29051: PUSH
29052: LD_VAR 0 2
29056: DIFF
29057: ST_TO_ADDR
29058: GO 29076
// hInvincible := hInvincible union i ;
29060: LD_ADDR_EXP 95
29064: PUSH
29065: LD_EXP 95
29069: PUSH
29070: LD_VAR 0 2
29074: UNION
29075: ST_TO_ADDR
// end ;
29076: GO 29016
29078: POP
29079: POP
// end ;
29080: LD_VAR 0 1
29084: RET
// export function hHackInvisible ; var i , j ; begin
29085: LD_INT 0
29087: PPUSH
29088: PPUSH
29089: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29090: LD_ADDR_VAR 0 2
29094: PUSH
29095: LD_INT 21
29097: PUSH
29098: LD_INT 1
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PPUSH
29105: CALL_OW 69
29109: PUSH
29110: FOR_IN
29111: IFFALSE 29135
// if IsSelected ( i ) then
29113: LD_VAR 0 2
29117: PPUSH
29118: CALL_OW 306
29122: IFFALSE 29133
// ComForceInvisible ( i ) ;
29124: LD_VAR 0 2
29128: PPUSH
29129: CALL_OW 496
29133: GO 29110
29135: POP
29136: POP
// end ;
29137: LD_VAR 0 1
29141: RET
// export function hHackChangeYourSide ; begin
29142: LD_INT 0
29144: PPUSH
// if your_side = 8 then
29145: LD_OWVAR 2
29149: PUSH
29150: LD_INT 8
29152: EQUAL
29153: IFFALSE 29165
// your_side := 0 else
29155: LD_ADDR_OWVAR 2
29159: PUSH
29160: LD_INT 0
29162: ST_TO_ADDR
29163: GO 29179
// your_side := your_side + 1 ;
29165: LD_ADDR_OWVAR 2
29169: PUSH
29170: LD_OWVAR 2
29174: PUSH
29175: LD_INT 1
29177: PLUS
29178: ST_TO_ADDR
// end ;
29179: LD_VAR 0 1
29183: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29184: LD_INT 0
29186: PPUSH
29187: PPUSH
29188: PPUSH
// for i in all_units do
29189: LD_ADDR_VAR 0 2
29193: PUSH
29194: LD_OWVAR 3
29198: PUSH
29199: FOR_IN
29200: IFFALSE 29278
// if IsSelected ( i ) then
29202: LD_VAR 0 2
29206: PPUSH
29207: CALL_OW 306
29211: IFFALSE 29276
// begin j := GetSide ( i ) ;
29213: LD_ADDR_VAR 0 3
29217: PUSH
29218: LD_VAR 0 2
29222: PPUSH
29223: CALL_OW 255
29227: ST_TO_ADDR
// if j = 8 then
29228: LD_VAR 0 3
29232: PUSH
29233: LD_INT 8
29235: EQUAL
29236: IFFALSE 29248
// j := 0 else
29238: LD_ADDR_VAR 0 3
29242: PUSH
29243: LD_INT 0
29245: ST_TO_ADDR
29246: GO 29262
// j := j + 1 ;
29248: LD_ADDR_VAR 0 3
29252: PUSH
29253: LD_VAR 0 3
29257: PUSH
29258: LD_INT 1
29260: PLUS
29261: ST_TO_ADDR
// SetSide ( i , j ) ;
29262: LD_VAR 0 2
29266: PPUSH
29267: LD_VAR 0 3
29271: PPUSH
29272: CALL_OW 235
// end ;
29276: GO 29199
29278: POP
29279: POP
// end ;
29280: LD_VAR 0 1
29284: RET
// export function hHackFog ; begin
29285: LD_INT 0
29287: PPUSH
// FogOff ( true ) ;
29288: LD_INT 1
29290: PPUSH
29291: CALL_OW 344
// end ;
29295: LD_VAR 0 1
29299: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29300: LD_INT 0
29302: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29303: LD_VAR 0 1
29307: PPUSH
29308: LD_VAR 0 2
29312: PPUSH
29313: LD_VAR 0 3
29317: PPUSH
29318: LD_INT 1
29320: PPUSH
29321: LD_INT 1
29323: PPUSH
29324: CALL_OW 483
// CenterOnXY ( x , y ) ;
29328: LD_VAR 0 2
29332: PPUSH
29333: LD_VAR 0 3
29337: PPUSH
29338: CALL_OW 84
// end ;
29342: LD_VAR 0 4
29346: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
29347: LD_INT 0
29349: PPUSH
29350: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
29351: LD_VAR 0 1
29355: NOT
29356: PUSH
29357: LD_VAR 0 2
29361: PPUSH
29362: LD_VAR 0 3
29366: PPUSH
29367: CALL_OW 488
29371: NOT
29372: OR
29373: PUSH
29374: LD_VAR 0 1
29378: PPUSH
29379: CALL_OW 266
29383: PUSH
29384: LD_INT 3
29386: NONEQUAL
29387: PUSH
29388: LD_VAR 0 1
29392: PPUSH
29393: CALL_OW 247
29397: PUSH
29398: LD_INT 1
29400: EQUAL
29401: NOT
29402: AND
29403: OR
29404: IFFALSE 29408
// exit ;
29406: GO 29557
// if GetType ( factory ) = unit_human then
29408: LD_VAR 0 1
29412: PPUSH
29413: CALL_OW 247
29417: PUSH
29418: LD_INT 1
29420: EQUAL
29421: IFFALSE 29438
// factory := IsInUnit ( factory ) ;
29423: LD_ADDR_VAR 0 1
29427: PUSH
29428: LD_VAR 0 1
29432: PPUSH
29433: CALL_OW 310
29437: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
29438: LD_VAR 0 1
29442: PPUSH
29443: CALL_OW 266
29447: PUSH
29448: LD_INT 3
29450: NONEQUAL
29451: IFFALSE 29455
// exit ;
29453: GO 29557
// if HexInfo ( x , y ) = factory then
29455: LD_VAR 0 2
29459: PPUSH
29460: LD_VAR 0 3
29464: PPUSH
29465: CALL_OW 428
29469: PUSH
29470: LD_VAR 0 1
29474: EQUAL
29475: IFFALSE 29502
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
29477: LD_ADDR_EXP 96
29481: PUSH
29482: LD_EXP 96
29486: PPUSH
29487: LD_VAR 0 1
29491: PPUSH
29492: LD_INT 0
29494: PPUSH
29495: CALL_OW 1
29499: ST_TO_ADDR
29500: GO 29553
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
29502: LD_ADDR_EXP 96
29506: PUSH
29507: LD_EXP 96
29511: PPUSH
29512: LD_VAR 0 1
29516: PPUSH
29517: LD_VAR 0 1
29521: PPUSH
29522: CALL_OW 255
29526: PUSH
29527: LD_VAR 0 1
29531: PUSH
29532: LD_VAR 0 2
29536: PUSH
29537: LD_VAR 0 3
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: PPUSH
29548: CALL_OW 1
29552: ST_TO_ADDR
// UpdateFactoryWaypoints ;
29553: CALL 29562 0 0
// end ;
29557: LD_VAR 0 4
29561: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
29562: LD_INT 0
29564: PPUSH
29565: PPUSH
29566: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
29567: LD_STRING resetFactoryWaypoint();
29569: PPUSH
29570: CALL_OW 559
// if factoryWaypoints then
29574: LD_EXP 96
29578: IFFALSE 29704
// begin list := PrepareArray ( factoryWaypoints ) ;
29580: LD_ADDR_VAR 0 3
29584: PUSH
29585: LD_EXP 96
29589: PPUSH
29590: CALL 76081 0 1
29594: ST_TO_ADDR
// for i := 1 to list do
29595: LD_ADDR_VAR 0 2
29599: PUSH
29600: DOUBLE
29601: LD_INT 1
29603: DEC
29604: ST_TO_ADDR
29605: LD_VAR 0 3
29609: PUSH
29610: FOR_TO
29611: IFFALSE 29702
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29613: LD_STRING setFactoryWaypointXY(
29615: PUSH
29616: LD_VAR 0 3
29620: PUSH
29621: LD_VAR 0 2
29625: ARRAY
29626: PUSH
29627: LD_INT 1
29629: ARRAY
29630: STR
29631: PUSH
29632: LD_STRING ,
29634: STR
29635: PUSH
29636: LD_VAR 0 3
29640: PUSH
29641: LD_VAR 0 2
29645: ARRAY
29646: PUSH
29647: LD_INT 2
29649: ARRAY
29650: STR
29651: PUSH
29652: LD_STRING ,
29654: STR
29655: PUSH
29656: LD_VAR 0 3
29660: PUSH
29661: LD_VAR 0 2
29665: ARRAY
29666: PUSH
29667: LD_INT 3
29669: ARRAY
29670: STR
29671: PUSH
29672: LD_STRING ,
29674: STR
29675: PUSH
29676: LD_VAR 0 3
29680: PUSH
29681: LD_VAR 0 2
29685: ARRAY
29686: PUSH
29687: LD_INT 4
29689: ARRAY
29690: STR
29691: PUSH
29692: LD_STRING )
29694: STR
29695: PPUSH
29696: CALL_OW 559
29700: GO 29610
29702: POP
29703: POP
// end ; end ;
29704: LD_VAR 0 1
29708: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
29709: LD_INT 0
29711: PPUSH
// if HexInfo ( x , y ) = warehouse then
29712: LD_VAR 0 2
29716: PPUSH
29717: LD_VAR 0 3
29721: PPUSH
29722: CALL_OW 428
29726: PUSH
29727: LD_VAR 0 1
29731: EQUAL
29732: IFFALSE 29759
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
29734: LD_ADDR_EXP 97
29738: PUSH
29739: LD_EXP 97
29743: PPUSH
29744: LD_VAR 0 1
29748: PPUSH
29749: LD_INT 0
29751: PPUSH
29752: CALL_OW 1
29756: ST_TO_ADDR
29757: GO 29810
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
29759: LD_ADDR_EXP 97
29763: PUSH
29764: LD_EXP 97
29768: PPUSH
29769: LD_VAR 0 1
29773: PPUSH
29774: LD_VAR 0 1
29778: PPUSH
29779: CALL_OW 255
29783: PUSH
29784: LD_VAR 0 1
29788: PUSH
29789: LD_VAR 0 2
29793: PUSH
29794: LD_VAR 0 3
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: PPUSH
29805: CALL_OW 1
29809: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
29810: CALL 29819 0 0
// end ;
29814: LD_VAR 0 4
29818: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
29819: LD_INT 0
29821: PPUSH
29822: PPUSH
29823: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
29824: LD_STRING resetWarehouseGatheringPoints();
29826: PPUSH
29827: CALL_OW 559
// if warehouseGatheringPoints then
29831: LD_EXP 97
29835: IFFALSE 29961
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
29837: LD_ADDR_VAR 0 3
29841: PUSH
29842: LD_EXP 97
29846: PPUSH
29847: CALL 76081 0 1
29851: ST_TO_ADDR
// for i := 1 to list do
29852: LD_ADDR_VAR 0 2
29856: PUSH
29857: DOUBLE
29858: LD_INT 1
29860: DEC
29861: ST_TO_ADDR
29862: LD_VAR 0 3
29866: PUSH
29867: FOR_TO
29868: IFFALSE 29959
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29870: LD_STRING setWarehouseGatheringPointXY(
29872: PUSH
29873: LD_VAR 0 3
29877: PUSH
29878: LD_VAR 0 2
29882: ARRAY
29883: PUSH
29884: LD_INT 1
29886: ARRAY
29887: STR
29888: PUSH
29889: LD_STRING ,
29891: STR
29892: PUSH
29893: LD_VAR 0 3
29897: PUSH
29898: LD_VAR 0 2
29902: ARRAY
29903: PUSH
29904: LD_INT 2
29906: ARRAY
29907: STR
29908: PUSH
29909: LD_STRING ,
29911: STR
29912: PUSH
29913: LD_VAR 0 3
29917: PUSH
29918: LD_VAR 0 2
29922: ARRAY
29923: PUSH
29924: LD_INT 3
29926: ARRAY
29927: STR
29928: PUSH
29929: LD_STRING ,
29931: STR
29932: PUSH
29933: LD_VAR 0 3
29937: PUSH
29938: LD_VAR 0 2
29942: ARRAY
29943: PUSH
29944: LD_INT 4
29946: ARRAY
29947: STR
29948: PUSH
29949: LD_STRING )
29951: STR
29952: PPUSH
29953: CALL_OW 559
29957: GO 29867
29959: POP
29960: POP
// end ; end ;
29961: LD_VAR 0 1
29965: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
29966: LD_EXP 97
29970: IFFALSE 30655
29972: GO 29974
29974: DISABLE
29975: LD_INT 0
29977: PPUSH
29978: PPUSH
29979: PPUSH
29980: PPUSH
29981: PPUSH
29982: PPUSH
29983: PPUSH
29984: PPUSH
29985: PPUSH
// begin enable ;
29986: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
29987: LD_ADDR_VAR 0 3
29991: PUSH
29992: LD_EXP 97
29996: PPUSH
29997: CALL 76081 0 1
30001: ST_TO_ADDR
// if not list then
30002: LD_VAR 0 3
30006: NOT
30007: IFFALSE 30011
// exit ;
30009: GO 30655
// for i := 1 to list do
30011: LD_ADDR_VAR 0 1
30015: PUSH
30016: DOUBLE
30017: LD_INT 1
30019: DEC
30020: ST_TO_ADDR
30021: LD_VAR 0 3
30025: PUSH
30026: FOR_TO
30027: IFFALSE 30653
// begin depot := list [ i ] [ 2 ] ;
30029: LD_ADDR_VAR 0 8
30033: PUSH
30034: LD_VAR 0 3
30038: PUSH
30039: LD_VAR 0 1
30043: ARRAY
30044: PUSH
30045: LD_INT 2
30047: ARRAY
30048: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30049: LD_ADDR_VAR 0 5
30053: PUSH
30054: LD_VAR 0 3
30058: PUSH
30059: LD_VAR 0 1
30063: ARRAY
30064: PUSH
30065: LD_INT 1
30067: ARRAY
30068: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30069: LD_VAR 0 8
30073: PPUSH
30074: CALL_OW 301
30078: PUSH
30079: LD_VAR 0 5
30083: PUSH
30084: LD_VAR 0 8
30088: PPUSH
30089: CALL_OW 255
30093: NONEQUAL
30094: OR
30095: IFFALSE 30124
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30097: LD_ADDR_EXP 97
30101: PUSH
30102: LD_EXP 97
30106: PPUSH
30107: LD_VAR 0 8
30111: PPUSH
30112: LD_INT 0
30114: PPUSH
30115: CALL_OW 1
30119: ST_TO_ADDR
// exit ;
30120: POP
30121: POP
30122: GO 30655
// end ; x := list [ i ] [ 3 ] ;
30124: LD_ADDR_VAR 0 6
30128: PUSH
30129: LD_VAR 0 3
30133: PUSH
30134: LD_VAR 0 1
30138: ARRAY
30139: PUSH
30140: LD_INT 3
30142: ARRAY
30143: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30144: LD_ADDR_VAR 0 7
30148: PUSH
30149: LD_VAR 0 3
30153: PUSH
30154: LD_VAR 0 1
30158: ARRAY
30159: PUSH
30160: LD_INT 4
30162: ARRAY
30163: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
30164: LD_ADDR_VAR 0 9
30168: PUSH
30169: LD_VAR 0 6
30173: PPUSH
30174: LD_VAR 0 7
30178: PPUSH
30179: LD_INT 16
30181: PPUSH
30182: CALL 74669 0 3
30186: ST_TO_ADDR
// if not cratesNearbyPoint then
30187: LD_VAR 0 9
30191: NOT
30192: IFFALSE 30198
// exit ;
30194: POP
30195: POP
30196: GO 30655
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
30198: LD_ADDR_VAR 0 4
30202: PUSH
30203: LD_INT 22
30205: PUSH
30206: LD_VAR 0 5
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: PUSH
30215: LD_INT 3
30217: PUSH
30218: LD_INT 60
30220: PUSH
30221: EMPTY
30222: LIST
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 91
30230: PUSH
30231: LD_VAR 0 8
30235: PUSH
30236: LD_INT 6
30238: PUSH
30239: EMPTY
30240: LIST
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 2
30246: PUSH
30247: LD_INT 25
30249: PUSH
30250: LD_INT 2
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 25
30259: PUSH
30260: LD_INT 16
30262: PUSH
30263: EMPTY
30264: LIST
30265: LIST
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: LIST
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: PPUSH
30278: CALL_OW 69
30282: PUSH
30283: LD_VAR 0 8
30287: PPUSH
30288: CALL_OW 313
30292: PPUSH
30293: LD_INT 3
30295: PUSH
30296: LD_INT 60
30298: PUSH
30299: EMPTY
30300: LIST
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 2
30308: PUSH
30309: LD_INT 25
30311: PUSH
30312: LD_INT 2
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 25
30321: PUSH
30322: LD_INT 16
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: LIST
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PPUSH
30338: CALL_OW 72
30342: UNION
30343: ST_TO_ADDR
// if tmp then
30344: LD_VAR 0 4
30348: IFFALSE 30428
// begin tmp := ShrinkArray ( tmp , 3 ) ;
30350: LD_ADDR_VAR 0 4
30354: PUSH
30355: LD_VAR 0 4
30359: PPUSH
30360: LD_INT 3
30362: PPUSH
30363: CALL 72638 0 2
30367: ST_TO_ADDR
// for j in tmp do
30368: LD_ADDR_VAR 0 2
30372: PUSH
30373: LD_VAR 0 4
30377: PUSH
30378: FOR_IN
30379: IFFALSE 30422
// begin if IsInUnit ( j ) then
30381: LD_VAR 0 2
30385: PPUSH
30386: CALL_OW 310
30390: IFFALSE 30401
// ComExit ( j ) ;
30392: LD_VAR 0 2
30396: PPUSH
30397: CALL 72721 0 1
// AddComCollect ( j , x , y ) ;
30401: LD_VAR 0 2
30405: PPUSH
30406: LD_VAR 0 6
30410: PPUSH
30411: LD_VAR 0 7
30415: PPUSH
30416: CALL_OW 177
// end ;
30420: GO 30378
30422: POP
30423: POP
// exit ;
30424: POP
30425: POP
30426: GO 30655
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
30428: LD_ADDR_VAR 0 4
30432: PUSH
30433: LD_INT 22
30435: PUSH
30436: LD_VAR 0 5
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 91
30447: PUSH
30448: LD_VAR 0 8
30452: PUSH
30453: LD_INT 8
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: LIST
30460: PUSH
30461: LD_INT 2
30463: PUSH
30464: LD_INT 34
30466: PUSH
30467: LD_INT 12
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 34
30476: PUSH
30477: LD_INT 51
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: PUSH
30484: LD_INT 34
30486: PUSH
30487: LD_INT 32
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: PUSH
30494: LD_INT 34
30496: PUSH
30497: LD_INT 89
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: LIST
30515: PPUSH
30516: CALL_OW 69
30520: ST_TO_ADDR
// if tmp then
30521: LD_VAR 0 4
30525: IFFALSE 30651
// begin for j in tmp do
30527: LD_ADDR_VAR 0 2
30531: PUSH
30532: LD_VAR 0 4
30536: PUSH
30537: FOR_IN
30538: IFFALSE 30649
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
30540: LD_VAR 0 2
30544: PPUSH
30545: CALL_OW 262
30549: PUSH
30550: LD_INT 3
30552: EQUAL
30553: PUSH
30554: LD_VAR 0 2
30558: PPUSH
30559: CALL_OW 261
30563: PUSH
30564: LD_INT 20
30566: GREATER
30567: OR
30568: PUSH
30569: LD_VAR 0 2
30573: PPUSH
30574: CALL_OW 314
30578: NOT
30579: AND
30580: PUSH
30581: LD_VAR 0 2
30585: PPUSH
30586: CALL_OW 263
30590: PUSH
30591: LD_INT 1
30593: NONEQUAL
30594: PUSH
30595: LD_VAR 0 2
30599: PPUSH
30600: CALL_OW 311
30604: OR
30605: AND
30606: IFFALSE 30647
// begin ComCollect ( j , x , y ) ;
30608: LD_VAR 0 2
30612: PPUSH
30613: LD_VAR 0 6
30617: PPUSH
30618: LD_VAR 0 7
30622: PPUSH
30623: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
30627: LD_VAR 0 2
30631: PPUSH
30632: LD_VAR 0 8
30636: PPUSH
30637: CALL_OW 172
// exit ;
30641: POP
30642: POP
30643: POP
30644: POP
30645: GO 30655
// end ;
30647: GO 30537
30649: POP
30650: POP
// end ; end ;
30651: GO 30026
30653: POP
30654: POP
// end ; end_of_file
30655: PPOPN 9
30657: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
30658: LD_INT 0
30660: PPUSH
30661: PPUSH
30662: PPUSH
30663: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
30664: LD_VAR 0 1
30668: PPUSH
30669: CALL_OW 264
30673: PUSH
30674: LD_INT 91
30676: EQUAL
30677: IFFALSE 30749
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
30679: LD_INT 68
30681: PPUSH
30682: LD_VAR 0 1
30686: PPUSH
30687: CALL_OW 255
30691: PPUSH
30692: CALL_OW 321
30696: PUSH
30697: LD_INT 2
30699: EQUAL
30700: IFFALSE 30712
// eff := 70 else
30702: LD_ADDR_VAR 0 4
30706: PUSH
30707: LD_INT 70
30709: ST_TO_ADDR
30710: GO 30720
// eff := 30 ;
30712: LD_ADDR_VAR 0 4
30716: PUSH
30717: LD_INT 30
30719: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
30720: LD_VAR 0 1
30724: PPUSH
30725: CALL_OW 250
30729: PPUSH
30730: LD_VAR 0 1
30734: PPUSH
30735: CALL_OW 251
30739: PPUSH
30740: LD_VAR 0 4
30744: PPUSH
30745: CALL_OW 495
// end ; end ;
30749: LD_VAR 0 2
30753: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
30754: LD_INT 0
30756: PPUSH
// end ;
30757: LD_VAR 0 4
30761: RET
// export function SOS_Command ( cmd ) ; begin
30762: LD_INT 0
30764: PPUSH
// end ;
30765: LD_VAR 0 2
30769: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
30770: LD_INT 0
30772: PPUSH
// end ;
30773: LD_VAR 0 6
30777: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
30778: LD_INT 0
30780: PPUSH
30781: PPUSH
// if not vehicle or not factory then
30782: LD_VAR 0 1
30786: NOT
30787: PUSH
30788: LD_VAR 0 2
30792: NOT
30793: OR
30794: IFFALSE 30798
// exit ;
30796: GO 31029
// if factoryWaypoints >= factory then
30798: LD_EXP 96
30802: PUSH
30803: LD_VAR 0 2
30807: GREATEREQUAL
30808: IFFALSE 31029
// if factoryWaypoints [ factory ] then
30810: LD_EXP 96
30814: PUSH
30815: LD_VAR 0 2
30819: ARRAY
30820: IFFALSE 31029
// begin if GetControl ( vehicle ) = control_manual then
30822: LD_VAR 0 1
30826: PPUSH
30827: CALL_OW 263
30831: PUSH
30832: LD_INT 1
30834: EQUAL
30835: IFFALSE 30916
// begin driver := IsDrivenBy ( vehicle ) ;
30837: LD_ADDR_VAR 0 4
30841: PUSH
30842: LD_VAR 0 1
30846: PPUSH
30847: CALL_OW 311
30851: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
30852: LD_VAR 0 4
30856: PPUSH
30857: LD_EXP 96
30861: PUSH
30862: LD_VAR 0 2
30866: ARRAY
30867: PUSH
30868: LD_INT 3
30870: ARRAY
30871: PPUSH
30872: LD_EXP 96
30876: PUSH
30877: LD_VAR 0 2
30881: ARRAY
30882: PUSH
30883: LD_INT 4
30885: ARRAY
30886: PPUSH
30887: CALL_OW 171
// AddComExitVehicle ( driver ) ;
30891: LD_VAR 0 4
30895: PPUSH
30896: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
30900: LD_VAR 0 4
30904: PPUSH
30905: LD_VAR 0 2
30909: PPUSH
30910: CALL_OW 180
// end else
30914: GO 31029
// if GetControl ( vehicle ) = control_remote then
30916: LD_VAR 0 1
30920: PPUSH
30921: CALL_OW 263
30925: PUSH
30926: LD_INT 2
30928: EQUAL
30929: IFFALSE 30990
// begin wait ( 0 0$2 ) ;
30931: LD_INT 70
30933: PPUSH
30934: CALL_OW 67
// if Connect ( vehicle ) then
30938: LD_VAR 0 1
30942: PPUSH
30943: CALL 43053 0 1
30947: IFFALSE 30988
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
30949: LD_VAR 0 1
30953: PPUSH
30954: LD_EXP 96
30958: PUSH
30959: LD_VAR 0 2
30963: ARRAY
30964: PUSH
30965: LD_INT 3
30967: ARRAY
30968: PPUSH
30969: LD_EXP 96
30973: PUSH
30974: LD_VAR 0 2
30978: ARRAY
30979: PUSH
30980: LD_INT 4
30982: ARRAY
30983: PPUSH
30984: CALL_OW 171
// end else
30988: GO 31029
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
30990: LD_VAR 0 1
30994: PPUSH
30995: LD_EXP 96
30999: PUSH
31000: LD_VAR 0 2
31004: ARRAY
31005: PUSH
31006: LD_INT 3
31008: ARRAY
31009: PPUSH
31010: LD_EXP 96
31014: PUSH
31015: LD_VAR 0 2
31019: ARRAY
31020: PUSH
31021: LD_INT 4
31023: ARRAY
31024: PPUSH
31025: CALL_OW 171
// end ; end ;
31029: LD_VAR 0 3
31033: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31034: LD_INT 0
31036: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31037: LD_VAR 0 1
31041: PUSH
31042: LD_INT 250
31044: EQUAL
31045: PUSH
31046: LD_VAR 0 2
31050: PPUSH
31051: CALL_OW 264
31055: PUSH
31056: LD_INT 81
31058: EQUAL
31059: AND
31060: IFFALSE 31081
// MinerPlaceMine ( unit , x , y ) ;
31062: LD_VAR 0 2
31066: PPUSH
31067: LD_VAR 0 4
31071: PPUSH
31072: LD_VAR 0 5
31076: PPUSH
31077: CALL 33466 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31081: LD_VAR 0 1
31085: PUSH
31086: LD_INT 251
31088: EQUAL
31089: PUSH
31090: LD_VAR 0 2
31094: PPUSH
31095: CALL_OW 264
31099: PUSH
31100: LD_INT 81
31102: EQUAL
31103: AND
31104: IFFALSE 31125
// MinerDetonateMine ( unit , x , y ) ;
31106: LD_VAR 0 2
31110: PPUSH
31111: LD_VAR 0 4
31115: PPUSH
31116: LD_VAR 0 5
31120: PPUSH
31121: CALL 33741 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31125: LD_VAR 0 1
31129: PUSH
31130: LD_INT 252
31132: EQUAL
31133: PUSH
31134: LD_VAR 0 2
31138: PPUSH
31139: CALL_OW 264
31143: PUSH
31144: LD_INT 81
31146: EQUAL
31147: AND
31148: IFFALSE 31169
// MinerCreateMinefield ( unit , x , y ) ;
31150: LD_VAR 0 2
31154: PPUSH
31155: LD_VAR 0 4
31159: PPUSH
31160: LD_VAR 0 5
31164: PPUSH
31165: CALL 34158 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
31169: LD_VAR 0 1
31173: PUSH
31174: LD_INT 253
31176: EQUAL
31177: PUSH
31178: LD_VAR 0 2
31182: PPUSH
31183: CALL_OW 257
31187: PUSH
31188: LD_INT 5
31190: EQUAL
31191: AND
31192: IFFALSE 31213
// ComBinocular ( unit , x , y ) ;
31194: LD_VAR 0 2
31198: PPUSH
31199: LD_VAR 0 4
31203: PPUSH
31204: LD_VAR 0 5
31208: PPUSH
31209: CALL 34527 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31213: LD_VAR 0 1
31217: PUSH
31218: LD_INT 254
31220: EQUAL
31221: PUSH
31222: LD_VAR 0 2
31226: PPUSH
31227: CALL_OW 264
31231: PUSH
31232: LD_INT 99
31234: EQUAL
31235: AND
31236: PUSH
31237: LD_VAR 0 3
31241: PPUSH
31242: CALL_OW 263
31246: PUSH
31247: LD_INT 3
31249: EQUAL
31250: AND
31251: IFFALSE 31267
// HackDestroyVehicle ( unit , selectedUnit ) ;
31253: LD_VAR 0 2
31257: PPUSH
31258: LD_VAR 0 3
31262: PPUSH
31263: CALL 32830 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
31267: LD_VAR 0 1
31271: PUSH
31272: LD_INT 255
31274: EQUAL
31275: PUSH
31276: LD_VAR 0 2
31280: PPUSH
31281: CALL_OW 264
31285: PUSH
31286: LD_INT 14
31288: PUSH
31289: LD_INT 53
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: IN
31296: AND
31297: PUSH
31298: LD_VAR 0 4
31302: PPUSH
31303: LD_VAR 0 5
31307: PPUSH
31308: CALL_OW 488
31312: AND
31313: IFFALSE 31337
// CutTreeXYR ( unit , x , y , 12 ) ;
31315: LD_VAR 0 2
31319: PPUSH
31320: LD_VAR 0 4
31324: PPUSH
31325: LD_VAR 0 5
31329: PPUSH
31330: LD_INT 12
31332: PPUSH
31333: CALL 31400 0 4
// if cmd = 256 then
31337: LD_VAR 0 1
31341: PUSH
31342: LD_INT 256
31344: EQUAL
31345: IFFALSE 31366
// SetFactoryWaypoint ( unit , x , y ) ;
31347: LD_VAR 0 2
31351: PPUSH
31352: LD_VAR 0 4
31356: PPUSH
31357: LD_VAR 0 5
31361: PPUSH
31362: CALL 29347 0 3
// if cmd = 257 then
31366: LD_VAR 0 1
31370: PUSH
31371: LD_INT 257
31373: EQUAL
31374: IFFALSE 31395
// SetWarehouseGatheringPoint ( unit , x , y ) ;
31376: LD_VAR 0 2
31380: PPUSH
31381: LD_VAR 0 4
31385: PPUSH
31386: LD_VAR 0 5
31390: PPUSH
31391: CALL 29709 0 3
// end ;
31395: LD_VAR 0 6
31399: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
31400: LD_INT 0
31402: PPUSH
31403: PPUSH
31404: PPUSH
31405: PPUSH
31406: PPUSH
31407: PPUSH
31408: PPUSH
31409: PPUSH
31410: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
31411: LD_VAR 0 1
31415: NOT
31416: PUSH
31417: LD_VAR 0 2
31421: PPUSH
31422: LD_VAR 0 3
31426: PPUSH
31427: CALL_OW 488
31431: NOT
31432: OR
31433: PUSH
31434: LD_VAR 0 4
31438: NOT
31439: OR
31440: IFFALSE 31444
// exit ;
31442: GO 31784
// list := [ ] ;
31444: LD_ADDR_VAR 0 13
31448: PUSH
31449: EMPTY
31450: ST_TO_ADDR
// if x - r < 0 then
31451: LD_VAR 0 2
31455: PUSH
31456: LD_VAR 0 4
31460: MINUS
31461: PUSH
31462: LD_INT 0
31464: LESS
31465: IFFALSE 31477
// min_x := 0 else
31467: LD_ADDR_VAR 0 7
31471: PUSH
31472: LD_INT 0
31474: ST_TO_ADDR
31475: GO 31493
// min_x := x - r ;
31477: LD_ADDR_VAR 0 7
31481: PUSH
31482: LD_VAR 0 2
31486: PUSH
31487: LD_VAR 0 4
31491: MINUS
31492: ST_TO_ADDR
// if y - r < 0 then
31493: LD_VAR 0 3
31497: PUSH
31498: LD_VAR 0 4
31502: MINUS
31503: PUSH
31504: LD_INT 0
31506: LESS
31507: IFFALSE 31519
// min_y := 0 else
31509: LD_ADDR_VAR 0 8
31513: PUSH
31514: LD_INT 0
31516: ST_TO_ADDR
31517: GO 31535
// min_y := y - r ;
31519: LD_ADDR_VAR 0 8
31523: PUSH
31524: LD_VAR 0 3
31528: PUSH
31529: LD_VAR 0 4
31533: MINUS
31534: ST_TO_ADDR
// max_x := x + r ;
31535: LD_ADDR_VAR 0 9
31539: PUSH
31540: LD_VAR 0 2
31544: PUSH
31545: LD_VAR 0 4
31549: PLUS
31550: ST_TO_ADDR
// max_y := y + r ;
31551: LD_ADDR_VAR 0 10
31555: PUSH
31556: LD_VAR 0 3
31560: PUSH
31561: LD_VAR 0 4
31565: PLUS
31566: ST_TO_ADDR
// for _x = min_x to max_x do
31567: LD_ADDR_VAR 0 11
31571: PUSH
31572: DOUBLE
31573: LD_VAR 0 7
31577: DEC
31578: ST_TO_ADDR
31579: LD_VAR 0 9
31583: PUSH
31584: FOR_TO
31585: IFFALSE 31702
// for _y = min_y to max_y do
31587: LD_ADDR_VAR 0 12
31591: PUSH
31592: DOUBLE
31593: LD_VAR 0 8
31597: DEC
31598: ST_TO_ADDR
31599: LD_VAR 0 10
31603: PUSH
31604: FOR_TO
31605: IFFALSE 31698
// begin if not ValidHex ( _x , _y ) then
31607: LD_VAR 0 11
31611: PPUSH
31612: LD_VAR 0 12
31616: PPUSH
31617: CALL_OW 488
31621: NOT
31622: IFFALSE 31626
// continue ;
31624: GO 31604
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
31626: LD_VAR 0 11
31630: PPUSH
31631: LD_VAR 0 12
31635: PPUSH
31636: CALL_OW 351
31640: PUSH
31641: LD_VAR 0 11
31645: PPUSH
31646: LD_VAR 0 12
31650: PPUSH
31651: CALL_OW 554
31655: AND
31656: IFFALSE 31696
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
31658: LD_ADDR_VAR 0 13
31662: PUSH
31663: LD_VAR 0 13
31667: PPUSH
31668: LD_VAR 0 13
31672: PUSH
31673: LD_INT 1
31675: PLUS
31676: PPUSH
31677: LD_VAR 0 11
31681: PUSH
31682: LD_VAR 0 12
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PPUSH
31691: CALL_OW 2
31695: ST_TO_ADDR
// end ;
31696: GO 31604
31698: POP
31699: POP
31700: GO 31584
31702: POP
31703: POP
// if not list then
31704: LD_VAR 0 13
31708: NOT
31709: IFFALSE 31713
// exit ;
31711: GO 31784
// for i in list do
31713: LD_ADDR_VAR 0 6
31717: PUSH
31718: LD_VAR 0 13
31722: PUSH
31723: FOR_IN
31724: IFFALSE 31782
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
31726: LD_VAR 0 1
31730: PPUSH
31731: LD_STRING M
31733: PUSH
31734: LD_VAR 0 6
31738: PUSH
31739: LD_INT 1
31741: ARRAY
31742: PUSH
31743: LD_VAR 0 6
31747: PUSH
31748: LD_INT 2
31750: ARRAY
31751: PUSH
31752: LD_INT 0
31754: PUSH
31755: LD_INT 0
31757: PUSH
31758: LD_INT 0
31760: PUSH
31761: LD_INT 0
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: PUSH
31773: EMPTY
31774: LIST
31775: PPUSH
31776: CALL_OW 447
31780: GO 31723
31782: POP
31783: POP
// end ;
31784: LD_VAR 0 5
31788: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
31789: LD_EXP 99
31793: NOT
31794: IFFALSE 31844
31796: GO 31798
31798: DISABLE
// begin initHack := true ;
31799: LD_ADDR_EXP 99
31803: PUSH
31804: LD_INT 1
31806: ST_TO_ADDR
// hackTanks := [ ] ;
31807: LD_ADDR_EXP 100
31811: PUSH
31812: EMPTY
31813: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
31814: LD_ADDR_EXP 101
31818: PUSH
31819: EMPTY
31820: ST_TO_ADDR
// hackLimit := 3 ;
31821: LD_ADDR_EXP 102
31825: PUSH
31826: LD_INT 3
31828: ST_TO_ADDR
// hackDist := 12 ;
31829: LD_ADDR_EXP 103
31833: PUSH
31834: LD_INT 12
31836: ST_TO_ADDR
// hackCounter := [ ] ;
31837: LD_ADDR_EXP 104
31841: PUSH
31842: EMPTY
31843: ST_TO_ADDR
// end ;
31844: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
31845: LD_EXP 99
31849: PUSH
31850: LD_INT 34
31852: PUSH
31853: LD_INT 99
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PPUSH
31860: CALL_OW 69
31864: AND
31865: IFFALSE 32118
31867: GO 31869
31869: DISABLE
31870: LD_INT 0
31872: PPUSH
31873: PPUSH
// begin enable ;
31874: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
31875: LD_ADDR_VAR 0 1
31879: PUSH
31880: LD_INT 34
31882: PUSH
31883: LD_INT 99
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PPUSH
31890: CALL_OW 69
31894: PUSH
31895: FOR_IN
31896: IFFALSE 32116
// begin if not i in hackTanks then
31898: LD_VAR 0 1
31902: PUSH
31903: LD_EXP 100
31907: IN
31908: NOT
31909: IFFALSE 31992
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
31911: LD_ADDR_EXP 100
31915: PUSH
31916: LD_EXP 100
31920: PPUSH
31921: LD_EXP 100
31925: PUSH
31926: LD_INT 1
31928: PLUS
31929: PPUSH
31930: LD_VAR 0 1
31934: PPUSH
31935: CALL_OW 1
31939: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
31940: LD_ADDR_EXP 101
31944: PUSH
31945: LD_EXP 101
31949: PPUSH
31950: LD_EXP 101
31954: PUSH
31955: LD_INT 1
31957: PLUS
31958: PPUSH
31959: EMPTY
31960: PPUSH
31961: CALL_OW 1
31965: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
31966: LD_ADDR_EXP 104
31970: PUSH
31971: LD_EXP 104
31975: PPUSH
31976: LD_EXP 104
31980: PUSH
31981: LD_INT 1
31983: PLUS
31984: PPUSH
31985: EMPTY
31986: PPUSH
31987: CALL_OW 1
31991: ST_TO_ADDR
// end ; if not IsOk ( i ) then
31992: LD_VAR 0 1
31996: PPUSH
31997: CALL_OW 302
32001: NOT
32002: IFFALSE 32015
// begin HackUnlinkAll ( i ) ;
32004: LD_VAR 0 1
32008: PPUSH
32009: CALL 32121 0 1
// continue ;
32013: GO 31895
// end ; HackCheckCapturedStatus ( i ) ;
32015: LD_VAR 0 1
32019: PPUSH
32020: CALL 32564 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32024: LD_ADDR_VAR 0 2
32028: PUSH
32029: LD_INT 81
32031: PUSH
32032: LD_VAR 0 1
32036: PPUSH
32037: CALL_OW 255
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 33
32048: PUSH
32049: LD_INT 3
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: PUSH
32056: LD_INT 91
32058: PUSH
32059: LD_VAR 0 1
32063: PUSH
32064: LD_EXP 103
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 50
32076: PUSH
32077: EMPTY
32078: LIST
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: PPUSH
32086: CALL_OW 69
32090: ST_TO_ADDR
// if not tmp then
32091: LD_VAR 0 2
32095: NOT
32096: IFFALSE 32100
// continue ;
32098: GO 31895
// HackLink ( i , tmp ) ;
32100: LD_VAR 0 1
32104: PPUSH
32105: LD_VAR 0 2
32109: PPUSH
32110: CALL 32257 0 2
// end ;
32114: GO 31895
32116: POP
32117: POP
// end ;
32118: PPOPN 2
32120: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32121: LD_INT 0
32123: PPUSH
32124: PPUSH
32125: PPUSH
// if not hack in hackTanks then
32126: LD_VAR 0 1
32130: PUSH
32131: LD_EXP 100
32135: IN
32136: NOT
32137: IFFALSE 32141
// exit ;
32139: GO 32252
// index := GetElementIndex ( hackTanks , hack ) ;
32141: LD_ADDR_VAR 0 4
32145: PUSH
32146: LD_EXP 100
32150: PPUSH
32151: LD_VAR 0 1
32155: PPUSH
32156: CALL 39869 0 2
32160: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32161: LD_EXP 101
32165: PUSH
32166: LD_VAR 0 4
32170: ARRAY
32171: IFFALSE 32252
// begin for i in hackTanksCaptured [ index ] do
32173: LD_ADDR_VAR 0 3
32177: PUSH
32178: LD_EXP 101
32182: PUSH
32183: LD_VAR 0 4
32187: ARRAY
32188: PUSH
32189: FOR_IN
32190: IFFALSE 32216
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32192: LD_VAR 0 3
32196: PUSH
32197: LD_INT 1
32199: ARRAY
32200: PPUSH
32201: LD_VAR 0 3
32205: PUSH
32206: LD_INT 2
32208: ARRAY
32209: PPUSH
32210: CALL_OW 235
32214: GO 32189
32216: POP
32217: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32218: LD_ADDR_EXP 101
32222: PUSH
32223: LD_EXP 101
32227: PPUSH
32228: LD_VAR 0 4
32232: PPUSH
32233: EMPTY
32234: PPUSH
32235: CALL_OW 1
32239: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
32240: LD_VAR 0 1
32244: PPUSH
32245: LD_INT 0
32247: PPUSH
32248: CALL_OW 505
// end ; end ;
32252: LD_VAR 0 2
32256: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
32257: LD_INT 0
32259: PPUSH
32260: PPUSH
32261: PPUSH
// if not hack in hackTanks or not vehicles then
32262: LD_VAR 0 1
32266: PUSH
32267: LD_EXP 100
32271: IN
32272: NOT
32273: PUSH
32274: LD_VAR 0 2
32278: NOT
32279: OR
32280: IFFALSE 32284
// exit ;
32282: GO 32559
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
32284: LD_ADDR_VAR 0 2
32288: PUSH
32289: LD_VAR 0 1
32293: PPUSH
32294: LD_VAR 0 2
32298: PPUSH
32299: LD_INT 1
32301: PPUSH
32302: LD_INT 1
32304: PPUSH
32305: CALL 40519 0 4
32309: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
32310: LD_ADDR_VAR 0 5
32314: PUSH
32315: LD_EXP 100
32319: PPUSH
32320: LD_VAR 0 1
32324: PPUSH
32325: CALL 39869 0 2
32329: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
32330: LD_EXP 101
32334: PUSH
32335: LD_VAR 0 5
32339: ARRAY
32340: PUSH
32341: LD_EXP 102
32345: LESS
32346: IFFALSE 32535
// begin for i := 1 to vehicles do
32348: LD_ADDR_VAR 0 4
32352: PUSH
32353: DOUBLE
32354: LD_INT 1
32356: DEC
32357: ST_TO_ADDR
32358: LD_VAR 0 2
32362: PUSH
32363: FOR_TO
32364: IFFALSE 32533
// begin if hackTanksCaptured [ index ] = hackLimit then
32366: LD_EXP 101
32370: PUSH
32371: LD_VAR 0 5
32375: ARRAY
32376: PUSH
32377: LD_EXP 102
32381: EQUAL
32382: IFFALSE 32386
// break ;
32384: GO 32533
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
32386: LD_ADDR_EXP 104
32390: PUSH
32391: LD_EXP 104
32395: PPUSH
32396: LD_VAR 0 5
32400: PPUSH
32401: LD_EXP 104
32405: PUSH
32406: LD_VAR 0 5
32410: ARRAY
32411: PUSH
32412: LD_INT 1
32414: PLUS
32415: PPUSH
32416: CALL_OW 1
32420: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
32421: LD_ADDR_EXP 101
32425: PUSH
32426: LD_EXP 101
32430: PPUSH
32431: LD_VAR 0 5
32435: PUSH
32436: LD_EXP 101
32440: PUSH
32441: LD_VAR 0 5
32445: ARRAY
32446: PUSH
32447: LD_INT 1
32449: PLUS
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PPUSH
32455: LD_VAR 0 2
32459: PUSH
32460: LD_VAR 0 4
32464: ARRAY
32465: PUSH
32466: LD_VAR 0 2
32470: PUSH
32471: LD_VAR 0 4
32475: ARRAY
32476: PPUSH
32477: CALL_OW 255
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PPUSH
32486: CALL 40084 0 3
32490: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
32491: LD_VAR 0 2
32495: PUSH
32496: LD_VAR 0 4
32500: ARRAY
32501: PPUSH
32502: LD_VAR 0 1
32506: PPUSH
32507: CALL_OW 255
32511: PPUSH
32512: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
32516: LD_VAR 0 2
32520: PUSH
32521: LD_VAR 0 4
32525: ARRAY
32526: PPUSH
32527: CALL_OW 141
// end ;
32531: GO 32363
32533: POP
32534: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32535: LD_VAR 0 1
32539: PPUSH
32540: LD_EXP 101
32544: PUSH
32545: LD_VAR 0 5
32549: ARRAY
32550: PUSH
32551: LD_INT 0
32553: PLUS
32554: PPUSH
32555: CALL_OW 505
// end ;
32559: LD_VAR 0 3
32563: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
32564: LD_INT 0
32566: PPUSH
32567: PPUSH
32568: PPUSH
32569: PPUSH
// if not hack in hackTanks then
32570: LD_VAR 0 1
32574: PUSH
32575: LD_EXP 100
32579: IN
32580: NOT
32581: IFFALSE 32585
// exit ;
32583: GO 32825
// index := GetElementIndex ( hackTanks , hack ) ;
32585: LD_ADDR_VAR 0 4
32589: PUSH
32590: LD_EXP 100
32594: PPUSH
32595: LD_VAR 0 1
32599: PPUSH
32600: CALL 39869 0 2
32604: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
32605: LD_ADDR_VAR 0 3
32609: PUSH
32610: DOUBLE
32611: LD_EXP 101
32615: PUSH
32616: LD_VAR 0 4
32620: ARRAY
32621: INC
32622: ST_TO_ADDR
32623: LD_INT 1
32625: PUSH
32626: FOR_DOWNTO
32627: IFFALSE 32799
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
32629: LD_ADDR_VAR 0 5
32633: PUSH
32634: LD_EXP 101
32638: PUSH
32639: LD_VAR 0 4
32643: ARRAY
32644: PUSH
32645: LD_VAR 0 3
32649: ARRAY
32650: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
32651: LD_VAR 0 5
32655: PUSH
32656: LD_INT 1
32658: ARRAY
32659: PPUSH
32660: CALL_OW 302
32664: NOT
32665: PUSH
32666: LD_VAR 0 5
32670: PUSH
32671: LD_INT 1
32673: ARRAY
32674: PPUSH
32675: CALL_OW 255
32679: PUSH
32680: LD_VAR 0 1
32684: PPUSH
32685: CALL_OW 255
32689: NONEQUAL
32690: OR
32691: IFFALSE 32797
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
32693: LD_VAR 0 5
32697: PUSH
32698: LD_INT 1
32700: ARRAY
32701: PPUSH
32702: CALL_OW 305
32706: PUSH
32707: LD_VAR 0 5
32711: PUSH
32712: LD_INT 1
32714: ARRAY
32715: PPUSH
32716: CALL_OW 255
32720: PUSH
32721: LD_VAR 0 1
32725: PPUSH
32726: CALL_OW 255
32730: EQUAL
32731: AND
32732: IFFALSE 32756
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
32734: LD_VAR 0 5
32738: PUSH
32739: LD_INT 1
32741: ARRAY
32742: PPUSH
32743: LD_VAR 0 5
32747: PUSH
32748: LD_INT 2
32750: ARRAY
32751: PPUSH
32752: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
32756: LD_ADDR_EXP 101
32760: PUSH
32761: LD_EXP 101
32765: PPUSH
32766: LD_VAR 0 4
32770: PPUSH
32771: LD_EXP 101
32775: PUSH
32776: LD_VAR 0 4
32780: ARRAY
32781: PPUSH
32782: LD_VAR 0 3
32786: PPUSH
32787: CALL_OW 3
32791: PPUSH
32792: CALL_OW 1
32796: ST_TO_ADDR
// end ; end ;
32797: GO 32626
32799: POP
32800: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32801: LD_VAR 0 1
32805: PPUSH
32806: LD_EXP 101
32810: PUSH
32811: LD_VAR 0 4
32815: ARRAY
32816: PUSH
32817: LD_INT 0
32819: PLUS
32820: PPUSH
32821: CALL_OW 505
// end ;
32825: LD_VAR 0 2
32829: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
32830: LD_INT 0
32832: PPUSH
32833: PPUSH
32834: PPUSH
32835: PPUSH
// if not hack in hackTanks then
32836: LD_VAR 0 1
32840: PUSH
32841: LD_EXP 100
32845: IN
32846: NOT
32847: IFFALSE 32851
// exit ;
32849: GO 32936
// index := GetElementIndex ( hackTanks , hack ) ;
32851: LD_ADDR_VAR 0 5
32855: PUSH
32856: LD_EXP 100
32860: PPUSH
32861: LD_VAR 0 1
32865: PPUSH
32866: CALL 39869 0 2
32870: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
32871: LD_ADDR_VAR 0 4
32875: PUSH
32876: DOUBLE
32877: LD_INT 1
32879: DEC
32880: ST_TO_ADDR
32881: LD_EXP 101
32885: PUSH
32886: LD_VAR 0 5
32890: ARRAY
32891: PUSH
32892: FOR_TO
32893: IFFALSE 32934
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
32895: LD_EXP 101
32899: PUSH
32900: LD_VAR 0 5
32904: ARRAY
32905: PUSH
32906: LD_VAR 0 4
32910: ARRAY
32911: PUSH
32912: LD_INT 1
32914: ARRAY
32915: PUSH
32916: LD_VAR 0 2
32920: EQUAL
32921: IFFALSE 32932
// KillUnit ( vehicle ) ;
32923: LD_VAR 0 2
32927: PPUSH
32928: CALL_OW 66
32932: GO 32892
32934: POP
32935: POP
// end ;
32936: LD_VAR 0 3
32940: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
32941: LD_EXP 105
32945: NOT
32946: IFFALSE 32981
32948: GO 32950
32950: DISABLE
// begin initMiner := true ;
32951: LD_ADDR_EXP 105
32955: PUSH
32956: LD_INT 1
32958: ST_TO_ADDR
// minersList := [ ] ;
32959: LD_ADDR_EXP 106
32963: PUSH
32964: EMPTY
32965: ST_TO_ADDR
// minerMinesList := [ ] ;
32966: LD_ADDR_EXP 107
32970: PUSH
32971: EMPTY
32972: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
32973: LD_ADDR_EXP 108
32977: PUSH
32978: LD_INT 5
32980: ST_TO_ADDR
// end ;
32981: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
32982: LD_EXP 105
32986: PUSH
32987: LD_INT 34
32989: PUSH
32990: LD_INT 81
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PPUSH
32997: CALL_OW 69
33001: AND
33002: IFFALSE 33463
33004: GO 33006
33006: DISABLE
33007: LD_INT 0
33009: PPUSH
33010: PPUSH
33011: PPUSH
33012: PPUSH
// begin enable ;
33013: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
33014: LD_ADDR_VAR 0 1
33018: PUSH
33019: LD_INT 34
33021: PUSH
33022: LD_INT 81
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PPUSH
33029: CALL_OW 69
33033: PUSH
33034: FOR_IN
33035: IFFALSE 33107
// begin if not i in minersList then
33037: LD_VAR 0 1
33041: PUSH
33042: LD_EXP 106
33046: IN
33047: NOT
33048: IFFALSE 33105
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
33050: LD_ADDR_EXP 106
33054: PUSH
33055: LD_EXP 106
33059: PPUSH
33060: LD_EXP 106
33064: PUSH
33065: LD_INT 1
33067: PLUS
33068: PPUSH
33069: LD_VAR 0 1
33073: PPUSH
33074: CALL_OW 1
33078: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
33079: LD_ADDR_EXP 107
33083: PUSH
33084: LD_EXP 107
33088: PPUSH
33089: LD_EXP 107
33093: PUSH
33094: LD_INT 1
33096: PLUS
33097: PPUSH
33098: EMPTY
33099: PPUSH
33100: CALL_OW 1
33104: ST_TO_ADDR
// end end ;
33105: GO 33034
33107: POP
33108: POP
// for i := minerMinesList downto 1 do
33109: LD_ADDR_VAR 0 1
33113: PUSH
33114: DOUBLE
33115: LD_EXP 107
33119: INC
33120: ST_TO_ADDR
33121: LD_INT 1
33123: PUSH
33124: FOR_DOWNTO
33125: IFFALSE 33461
// begin if IsLive ( minersList [ i ] ) then
33127: LD_EXP 106
33131: PUSH
33132: LD_VAR 0 1
33136: ARRAY
33137: PPUSH
33138: CALL_OW 300
33142: IFFALSE 33170
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
33144: LD_EXP 106
33148: PUSH
33149: LD_VAR 0 1
33153: ARRAY
33154: PPUSH
33155: LD_EXP 107
33159: PUSH
33160: LD_VAR 0 1
33164: ARRAY
33165: PPUSH
33166: CALL_OW 505
// if not minerMinesList [ i ] then
33170: LD_EXP 107
33174: PUSH
33175: LD_VAR 0 1
33179: ARRAY
33180: NOT
33181: IFFALSE 33185
// continue ;
33183: GO 33124
// for j := minerMinesList [ i ] downto 1 do
33185: LD_ADDR_VAR 0 2
33189: PUSH
33190: DOUBLE
33191: LD_EXP 107
33195: PUSH
33196: LD_VAR 0 1
33200: ARRAY
33201: INC
33202: ST_TO_ADDR
33203: LD_INT 1
33205: PUSH
33206: FOR_DOWNTO
33207: IFFALSE 33457
// begin side := GetSide ( minersList [ i ] ) ;
33209: LD_ADDR_VAR 0 3
33213: PUSH
33214: LD_EXP 106
33218: PUSH
33219: LD_VAR 0 1
33223: ARRAY
33224: PPUSH
33225: CALL_OW 255
33229: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
33230: LD_ADDR_VAR 0 4
33234: PUSH
33235: LD_EXP 107
33239: PUSH
33240: LD_VAR 0 1
33244: ARRAY
33245: PUSH
33246: LD_VAR 0 2
33250: ARRAY
33251: PUSH
33252: LD_INT 1
33254: ARRAY
33255: PPUSH
33256: LD_EXP 107
33260: PUSH
33261: LD_VAR 0 1
33265: ARRAY
33266: PUSH
33267: LD_VAR 0 2
33271: ARRAY
33272: PUSH
33273: LD_INT 2
33275: ARRAY
33276: PPUSH
33277: CALL_OW 428
33281: ST_TO_ADDR
// if not tmp then
33282: LD_VAR 0 4
33286: NOT
33287: IFFALSE 33291
// continue ;
33289: GO 33206
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
33291: LD_VAR 0 4
33295: PUSH
33296: LD_INT 81
33298: PUSH
33299: LD_VAR 0 3
33303: PUSH
33304: EMPTY
33305: LIST
33306: LIST
33307: PPUSH
33308: CALL_OW 69
33312: IN
33313: PUSH
33314: LD_EXP 107
33318: PUSH
33319: LD_VAR 0 1
33323: ARRAY
33324: PUSH
33325: LD_VAR 0 2
33329: ARRAY
33330: PUSH
33331: LD_INT 1
33333: ARRAY
33334: PPUSH
33335: LD_EXP 107
33339: PUSH
33340: LD_VAR 0 1
33344: ARRAY
33345: PUSH
33346: LD_VAR 0 2
33350: ARRAY
33351: PUSH
33352: LD_INT 2
33354: ARRAY
33355: PPUSH
33356: CALL_OW 458
33360: AND
33361: IFFALSE 33455
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
33363: LD_EXP 107
33367: PUSH
33368: LD_VAR 0 1
33372: ARRAY
33373: PUSH
33374: LD_VAR 0 2
33378: ARRAY
33379: PUSH
33380: LD_INT 1
33382: ARRAY
33383: PPUSH
33384: LD_EXP 107
33388: PUSH
33389: LD_VAR 0 1
33393: ARRAY
33394: PUSH
33395: LD_VAR 0 2
33399: ARRAY
33400: PUSH
33401: LD_INT 2
33403: ARRAY
33404: PPUSH
33405: LD_VAR 0 3
33409: PPUSH
33410: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
33414: LD_ADDR_EXP 107
33418: PUSH
33419: LD_EXP 107
33423: PPUSH
33424: LD_VAR 0 1
33428: PPUSH
33429: LD_EXP 107
33433: PUSH
33434: LD_VAR 0 1
33438: ARRAY
33439: PPUSH
33440: LD_VAR 0 2
33444: PPUSH
33445: CALL_OW 3
33449: PPUSH
33450: CALL_OW 1
33454: ST_TO_ADDR
// end ; end ;
33455: GO 33206
33457: POP
33458: POP
// end ;
33459: GO 33124
33461: POP
33462: POP
// end ;
33463: PPOPN 4
33465: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
33466: LD_INT 0
33468: PPUSH
33469: PPUSH
// result := false ;
33470: LD_ADDR_VAR 0 4
33474: PUSH
33475: LD_INT 0
33477: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
33478: LD_VAR 0 1
33482: PPUSH
33483: CALL_OW 264
33487: PUSH
33488: LD_INT 81
33490: EQUAL
33491: NOT
33492: IFFALSE 33496
// exit ;
33494: GO 33736
// index := GetElementIndex ( minersList , unit ) ;
33496: LD_ADDR_VAR 0 5
33500: PUSH
33501: LD_EXP 106
33505: PPUSH
33506: LD_VAR 0 1
33510: PPUSH
33511: CALL 39869 0 2
33515: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
33516: LD_EXP 107
33520: PUSH
33521: LD_VAR 0 5
33525: ARRAY
33526: PUSH
33527: LD_EXP 108
33531: GREATEREQUAL
33532: IFFALSE 33536
// exit ;
33534: GO 33736
// ComMoveXY ( unit , x , y ) ;
33536: LD_VAR 0 1
33540: PPUSH
33541: LD_VAR 0 2
33545: PPUSH
33546: LD_VAR 0 3
33550: PPUSH
33551: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33555: LD_INT 35
33557: PPUSH
33558: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
33562: LD_VAR 0 1
33566: PPUSH
33567: LD_VAR 0 2
33571: PPUSH
33572: LD_VAR 0 3
33576: PPUSH
33577: CALL 71132 0 3
33581: NOT
33582: PUSH
33583: LD_VAR 0 1
33587: PPUSH
33588: CALL_OW 314
33592: AND
33593: IFFALSE 33597
// exit ;
33595: GO 33736
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
33597: LD_VAR 0 2
33601: PPUSH
33602: LD_VAR 0 3
33606: PPUSH
33607: CALL_OW 428
33611: PUSH
33612: LD_VAR 0 1
33616: EQUAL
33617: PUSH
33618: LD_VAR 0 1
33622: PPUSH
33623: CALL_OW 314
33627: NOT
33628: AND
33629: IFFALSE 33555
// PlaySoundXY ( x , y , PlantMine ) ;
33631: LD_VAR 0 2
33635: PPUSH
33636: LD_VAR 0 3
33640: PPUSH
33641: LD_STRING PlantMine
33643: PPUSH
33644: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
33648: LD_VAR 0 2
33652: PPUSH
33653: LD_VAR 0 3
33657: PPUSH
33658: LD_VAR 0 1
33662: PPUSH
33663: CALL_OW 255
33667: PPUSH
33668: LD_INT 0
33670: PPUSH
33671: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
33675: LD_ADDR_EXP 107
33679: PUSH
33680: LD_EXP 107
33684: PPUSH
33685: LD_VAR 0 5
33689: PUSH
33690: LD_EXP 107
33694: PUSH
33695: LD_VAR 0 5
33699: ARRAY
33700: PUSH
33701: LD_INT 1
33703: PLUS
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PPUSH
33709: LD_VAR 0 2
33713: PUSH
33714: LD_VAR 0 3
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PPUSH
33723: CALL 40084 0 3
33727: ST_TO_ADDR
// result := true ;
33728: LD_ADDR_VAR 0 4
33732: PUSH
33733: LD_INT 1
33735: ST_TO_ADDR
// end ;
33736: LD_VAR 0 4
33740: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
33741: LD_INT 0
33743: PPUSH
33744: PPUSH
33745: PPUSH
// if not unit in minersList then
33746: LD_VAR 0 1
33750: PUSH
33751: LD_EXP 106
33755: IN
33756: NOT
33757: IFFALSE 33761
// exit ;
33759: GO 34153
// index := GetElementIndex ( minersList , unit ) ;
33761: LD_ADDR_VAR 0 6
33765: PUSH
33766: LD_EXP 106
33770: PPUSH
33771: LD_VAR 0 1
33775: PPUSH
33776: CALL 39869 0 2
33780: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
33781: LD_ADDR_VAR 0 5
33785: PUSH
33786: DOUBLE
33787: LD_EXP 107
33791: PUSH
33792: LD_VAR 0 6
33796: ARRAY
33797: INC
33798: ST_TO_ADDR
33799: LD_INT 1
33801: PUSH
33802: FOR_DOWNTO
33803: IFFALSE 33964
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
33805: LD_EXP 107
33809: PUSH
33810: LD_VAR 0 6
33814: ARRAY
33815: PUSH
33816: LD_VAR 0 5
33820: ARRAY
33821: PUSH
33822: LD_INT 1
33824: ARRAY
33825: PUSH
33826: LD_VAR 0 2
33830: EQUAL
33831: PUSH
33832: LD_EXP 107
33836: PUSH
33837: LD_VAR 0 6
33841: ARRAY
33842: PUSH
33843: LD_VAR 0 5
33847: ARRAY
33848: PUSH
33849: LD_INT 2
33851: ARRAY
33852: PUSH
33853: LD_VAR 0 3
33857: EQUAL
33858: AND
33859: IFFALSE 33962
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33861: LD_EXP 107
33865: PUSH
33866: LD_VAR 0 6
33870: ARRAY
33871: PUSH
33872: LD_VAR 0 5
33876: ARRAY
33877: PUSH
33878: LD_INT 1
33880: ARRAY
33881: PPUSH
33882: LD_EXP 107
33886: PUSH
33887: LD_VAR 0 6
33891: ARRAY
33892: PUSH
33893: LD_VAR 0 5
33897: ARRAY
33898: PUSH
33899: LD_INT 2
33901: ARRAY
33902: PPUSH
33903: LD_VAR 0 1
33907: PPUSH
33908: CALL_OW 255
33912: PPUSH
33913: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33917: LD_ADDR_EXP 107
33921: PUSH
33922: LD_EXP 107
33926: PPUSH
33927: LD_VAR 0 6
33931: PPUSH
33932: LD_EXP 107
33936: PUSH
33937: LD_VAR 0 6
33941: ARRAY
33942: PPUSH
33943: LD_VAR 0 5
33947: PPUSH
33948: CALL_OW 3
33952: PPUSH
33953: CALL_OW 1
33957: ST_TO_ADDR
// exit ;
33958: POP
33959: POP
33960: GO 34153
// end ; end ;
33962: GO 33802
33964: POP
33965: POP
// for i := minerMinesList [ index ] downto 1 do
33966: LD_ADDR_VAR 0 5
33970: PUSH
33971: DOUBLE
33972: LD_EXP 107
33976: PUSH
33977: LD_VAR 0 6
33981: ARRAY
33982: INC
33983: ST_TO_ADDR
33984: LD_INT 1
33986: PUSH
33987: FOR_DOWNTO
33988: IFFALSE 34151
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
33990: LD_EXP 107
33994: PUSH
33995: LD_VAR 0 6
33999: ARRAY
34000: PUSH
34001: LD_VAR 0 5
34005: ARRAY
34006: PUSH
34007: LD_INT 1
34009: ARRAY
34010: PPUSH
34011: LD_EXP 107
34015: PUSH
34016: LD_VAR 0 6
34020: ARRAY
34021: PUSH
34022: LD_VAR 0 5
34026: ARRAY
34027: PUSH
34028: LD_INT 2
34030: ARRAY
34031: PPUSH
34032: LD_VAR 0 2
34036: PPUSH
34037: LD_VAR 0 3
34041: PPUSH
34042: CALL_OW 298
34046: PUSH
34047: LD_INT 6
34049: LESS
34050: IFFALSE 34149
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34052: LD_EXP 107
34056: PUSH
34057: LD_VAR 0 6
34061: ARRAY
34062: PUSH
34063: LD_VAR 0 5
34067: ARRAY
34068: PUSH
34069: LD_INT 1
34071: ARRAY
34072: PPUSH
34073: LD_EXP 107
34077: PUSH
34078: LD_VAR 0 6
34082: ARRAY
34083: PUSH
34084: LD_VAR 0 5
34088: ARRAY
34089: PUSH
34090: LD_INT 2
34092: ARRAY
34093: PPUSH
34094: LD_VAR 0 1
34098: PPUSH
34099: CALL_OW 255
34103: PPUSH
34104: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34108: LD_ADDR_EXP 107
34112: PUSH
34113: LD_EXP 107
34117: PPUSH
34118: LD_VAR 0 6
34122: PPUSH
34123: LD_EXP 107
34127: PUSH
34128: LD_VAR 0 6
34132: ARRAY
34133: PPUSH
34134: LD_VAR 0 5
34138: PPUSH
34139: CALL_OW 3
34143: PPUSH
34144: CALL_OW 1
34148: ST_TO_ADDR
// end ; end ;
34149: GO 33987
34151: POP
34152: POP
// end ;
34153: LD_VAR 0 4
34157: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
34158: LD_INT 0
34160: PPUSH
34161: PPUSH
34162: PPUSH
34163: PPUSH
34164: PPUSH
34165: PPUSH
34166: PPUSH
34167: PPUSH
34168: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
34169: LD_VAR 0 1
34173: PPUSH
34174: CALL_OW 264
34178: PUSH
34179: LD_INT 81
34181: EQUAL
34182: NOT
34183: PUSH
34184: LD_VAR 0 1
34188: PUSH
34189: LD_EXP 106
34193: IN
34194: NOT
34195: OR
34196: IFFALSE 34200
// exit ;
34198: GO 34522
// index := GetElementIndex ( minersList , unit ) ;
34200: LD_ADDR_VAR 0 6
34204: PUSH
34205: LD_EXP 106
34209: PPUSH
34210: LD_VAR 0 1
34214: PPUSH
34215: CALL 39869 0 2
34219: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
34220: LD_ADDR_VAR 0 8
34224: PUSH
34225: LD_EXP 108
34229: PUSH
34230: LD_EXP 107
34234: PUSH
34235: LD_VAR 0 6
34239: ARRAY
34240: MINUS
34241: ST_TO_ADDR
// if not minesFreeAmount then
34242: LD_VAR 0 8
34246: NOT
34247: IFFALSE 34251
// exit ;
34249: GO 34522
// tmp := [ ] ;
34251: LD_ADDR_VAR 0 7
34255: PUSH
34256: EMPTY
34257: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
34258: LD_ADDR_VAR 0 5
34262: PUSH
34263: DOUBLE
34264: LD_INT 1
34266: DEC
34267: ST_TO_ADDR
34268: LD_VAR 0 8
34272: PUSH
34273: FOR_TO
34274: IFFALSE 34469
// begin _d := rand ( 0 , 5 ) ;
34276: LD_ADDR_VAR 0 11
34280: PUSH
34281: LD_INT 0
34283: PPUSH
34284: LD_INT 5
34286: PPUSH
34287: CALL_OW 12
34291: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
34292: LD_ADDR_VAR 0 12
34296: PUSH
34297: LD_INT 2
34299: PPUSH
34300: LD_INT 6
34302: PPUSH
34303: CALL_OW 12
34307: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
34308: LD_ADDR_VAR 0 9
34312: PUSH
34313: LD_VAR 0 2
34317: PPUSH
34318: LD_VAR 0 11
34322: PPUSH
34323: LD_VAR 0 12
34327: PPUSH
34328: CALL_OW 272
34332: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
34333: LD_ADDR_VAR 0 10
34337: PUSH
34338: LD_VAR 0 3
34342: PPUSH
34343: LD_VAR 0 11
34347: PPUSH
34348: LD_VAR 0 12
34352: PPUSH
34353: CALL_OW 273
34357: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
34358: LD_VAR 0 9
34362: PPUSH
34363: LD_VAR 0 10
34367: PPUSH
34368: CALL_OW 488
34372: PUSH
34373: LD_VAR 0 9
34377: PUSH
34378: LD_VAR 0 10
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_VAR 0 7
34391: IN
34392: NOT
34393: AND
34394: PUSH
34395: LD_VAR 0 9
34399: PPUSH
34400: LD_VAR 0 10
34404: PPUSH
34405: CALL_OW 458
34409: NOT
34410: AND
34411: IFFALSE 34453
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
34413: LD_ADDR_VAR 0 7
34417: PUSH
34418: LD_VAR 0 7
34422: PPUSH
34423: LD_VAR 0 7
34427: PUSH
34428: LD_INT 1
34430: PLUS
34431: PPUSH
34432: LD_VAR 0 9
34436: PUSH
34437: LD_VAR 0 10
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PPUSH
34446: CALL_OW 1
34450: ST_TO_ADDR
34451: GO 34467
// i := i - 1 ;
34453: LD_ADDR_VAR 0 5
34457: PUSH
34458: LD_VAR 0 5
34462: PUSH
34463: LD_INT 1
34465: MINUS
34466: ST_TO_ADDR
// end ;
34467: GO 34273
34469: POP
34470: POP
// for i in tmp do
34471: LD_ADDR_VAR 0 5
34475: PUSH
34476: LD_VAR 0 7
34480: PUSH
34481: FOR_IN
34482: IFFALSE 34520
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
34484: LD_VAR 0 1
34488: PPUSH
34489: LD_VAR 0 5
34493: PUSH
34494: LD_INT 1
34496: ARRAY
34497: PPUSH
34498: LD_VAR 0 5
34502: PUSH
34503: LD_INT 2
34505: ARRAY
34506: PPUSH
34507: CALL 33466 0 3
34511: NOT
34512: IFFALSE 34518
// exit ;
34514: POP
34515: POP
34516: GO 34522
34518: GO 34481
34520: POP
34521: POP
// end ;
34522: LD_VAR 0 4
34526: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
34527: LD_INT 0
34529: PPUSH
34530: PPUSH
34531: PPUSH
34532: PPUSH
34533: PPUSH
34534: PPUSH
34535: PPUSH
// if not GetClass ( unit ) = class_sniper then
34536: LD_VAR 0 1
34540: PPUSH
34541: CALL_OW 257
34545: PUSH
34546: LD_INT 5
34548: EQUAL
34549: NOT
34550: IFFALSE 34554
// exit ;
34552: GO 34942
// dist := 8 ;
34554: LD_ADDR_VAR 0 5
34558: PUSH
34559: LD_INT 8
34561: ST_TO_ADDR
// viewRange := 12 ;
34562: LD_ADDR_VAR 0 7
34566: PUSH
34567: LD_INT 12
34569: ST_TO_ADDR
// side := GetSide ( unit ) ;
34570: LD_ADDR_VAR 0 6
34574: PUSH
34575: LD_VAR 0 1
34579: PPUSH
34580: CALL_OW 255
34584: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
34585: LD_INT 61
34587: PPUSH
34588: LD_VAR 0 6
34592: PPUSH
34593: CALL_OW 321
34597: PUSH
34598: LD_INT 2
34600: EQUAL
34601: IFFALSE 34611
// viewRange := 16 ;
34603: LD_ADDR_VAR 0 7
34607: PUSH
34608: LD_INT 16
34610: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
34611: LD_VAR 0 1
34615: PPUSH
34616: LD_VAR 0 2
34620: PPUSH
34621: LD_VAR 0 3
34625: PPUSH
34626: CALL_OW 297
34630: PUSH
34631: LD_VAR 0 5
34635: GREATER
34636: IFFALSE 34715
// begin ComMoveXY ( unit , x , y ) ;
34638: LD_VAR 0 1
34642: PPUSH
34643: LD_VAR 0 2
34647: PPUSH
34648: LD_VAR 0 3
34652: PPUSH
34653: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34657: LD_INT 35
34659: PPUSH
34660: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
34664: LD_VAR 0 1
34668: PPUSH
34669: LD_VAR 0 2
34673: PPUSH
34674: LD_VAR 0 3
34678: PPUSH
34679: CALL 71132 0 3
34683: NOT
34684: IFFALSE 34688
// exit ;
34686: GO 34942
// until GetDistUnitXY ( unit , x , y ) < dist ;
34688: LD_VAR 0 1
34692: PPUSH
34693: LD_VAR 0 2
34697: PPUSH
34698: LD_VAR 0 3
34702: PPUSH
34703: CALL_OW 297
34707: PUSH
34708: LD_VAR 0 5
34712: LESS
34713: IFFALSE 34657
// end ; ComTurnXY ( unit , x , y ) ;
34715: LD_VAR 0 1
34719: PPUSH
34720: LD_VAR 0 2
34724: PPUSH
34725: LD_VAR 0 3
34729: PPUSH
34730: CALL_OW 118
// wait ( 5 ) ;
34734: LD_INT 5
34736: PPUSH
34737: CALL_OW 67
// _d := GetDir ( unit ) ;
34741: LD_ADDR_VAR 0 10
34745: PUSH
34746: LD_VAR 0 1
34750: PPUSH
34751: CALL_OW 254
34755: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
34756: LD_ADDR_VAR 0 8
34760: PUSH
34761: LD_VAR 0 1
34765: PPUSH
34766: CALL_OW 250
34770: PPUSH
34771: LD_VAR 0 10
34775: PPUSH
34776: LD_VAR 0 5
34780: PPUSH
34781: CALL_OW 272
34785: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
34786: LD_ADDR_VAR 0 9
34790: PUSH
34791: LD_VAR 0 1
34795: PPUSH
34796: CALL_OW 251
34800: PPUSH
34801: LD_VAR 0 10
34805: PPUSH
34806: LD_VAR 0 5
34810: PPUSH
34811: CALL_OW 273
34815: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34816: LD_VAR 0 8
34820: PPUSH
34821: LD_VAR 0 9
34825: PPUSH
34826: CALL_OW 488
34830: NOT
34831: IFFALSE 34835
// exit ;
34833: GO 34942
// ComAnimCustom ( unit , 1 ) ;
34835: LD_VAR 0 1
34839: PPUSH
34840: LD_INT 1
34842: PPUSH
34843: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
34847: LD_VAR 0 8
34851: PPUSH
34852: LD_VAR 0 9
34856: PPUSH
34857: LD_VAR 0 6
34861: PPUSH
34862: LD_VAR 0 7
34866: PPUSH
34867: CALL_OW 330
// repeat wait ( 1 ) ;
34871: LD_INT 1
34873: PPUSH
34874: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
34878: LD_VAR 0 1
34882: PPUSH
34883: CALL_OW 316
34887: PUSH
34888: LD_VAR 0 1
34892: PPUSH
34893: CALL_OW 314
34897: OR
34898: PUSH
34899: LD_VAR 0 1
34903: PPUSH
34904: CALL_OW 302
34908: NOT
34909: OR
34910: PUSH
34911: LD_VAR 0 1
34915: PPUSH
34916: CALL_OW 301
34920: OR
34921: IFFALSE 34871
// RemoveSeeing ( _x , _y , side ) ;
34923: LD_VAR 0 8
34927: PPUSH
34928: LD_VAR 0 9
34932: PPUSH
34933: LD_VAR 0 6
34937: PPUSH
34938: CALL_OW 331
// end ; end_of_file
34942: LD_VAR 0 4
34946: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34947: LD_INT 0
34949: PPUSH
34950: PPUSH
// if exist_mode then
34951: LD_VAR 0 2
34955: IFFALSE 34980
// unit := CreateCharacter ( prefix & ident ) else
34957: LD_ADDR_VAR 0 5
34961: PUSH
34962: LD_VAR 0 3
34966: PUSH
34967: LD_VAR 0 1
34971: STR
34972: PPUSH
34973: CALL_OW 34
34977: ST_TO_ADDR
34978: GO 34995
// unit := NewCharacter ( ident ) ;
34980: LD_ADDR_VAR 0 5
34984: PUSH
34985: LD_VAR 0 1
34989: PPUSH
34990: CALL_OW 25
34994: ST_TO_ADDR
// result := unit ;
34995: LD_ADDR_VAR 0 4
34999: PUSH
35000: LD_VAR 0 5
35004: ST_TO_ADDR
// end ;
35005: LD_VAR 0 4
35009: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35010: LD_INT 0
35012: PPUSH
35013: PPUSH
// if not side or not nation then
35014: LD_VAR 0 1
35018: NOT
35019: PUSH
35020: LD_VAR 0 2
35024: NOT
35025: OR
35026: IFFALSE 35030
// exit ;
35028: GO 35798
// case nation of nation_american :
35030: LD_VAR 0 2
35034: PUSH
35035: LD_INT 1
35037: DOUBLE
35038: EQUAL
35039: IFTRUE 35043
35041: GO 35257
35043: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35044: LD_ADDR_VAR 0 4
35048: PUSH
35049: LD_INT 35
35051: PUSH
35052: LD_INT 45
35054: PUSH
35055: LD_INT 46
35057: PUSH
35058: LD_INT 47
35060: PUSH
35061: LD_INT 82
35063: PUSH
35064: LD_INT 83
35066: PUSH
35067: LD_INT 84
35069: PUSH
35070: LD_INT 85
35072: PUSH
35073: LD_INT 86
35075: PUSH
35076: LD_INT 1
35078: PUSH
35079: LD_INT 2
35081: PUSH
35082: LD_INT 6
35084: PUSH
35085: LD_INT 15
35087: PUSH
35088: LD_INT 16
35090: PUSH
35091: LD_INT 7
35093: PUSH
35094: LD_INT 12
35096: PUSH
35097: LD_INT 13
35099: PUSH
35100: LD_INT 10
35102: PUSH
35103: LD_INT 14
35105: PUSH
35106: LD_INT 20
35108: PUSH
35109: LD_INT 21
35111: PUSH
35112: LD_INT 22
35114: PUSH
35115: LD_INT 25
35117: PUSH
35118: LD_INT 32
35120: PUSH
35121: LD_INT 27
35123: PUSH
35124: LD_INT 36
35126: PUSH
35127: LD_INT 69
35129: PUSH
35130: LD_INT 39
35132: PUSH
35133: LD_INT 34
35135: PUSH
35136: LD_INT 40
35138: PUSH
35139: LD_INT 48
35141: PUSH
35142: LD_INT 49
35144: PUSH
35145: LD_INT 50
35147: PUSH
35148: LD_INT 51
35150: PUSH
35151: LD_INT 52
35153: PUSH
35154: LD_INT 53
35156: PUSH
35157: LD_INT 54
35159: PUSH
35160: LD_INT 55
35162: PUSH
35163: LD_INT 56
35165: PUSH
35166: LD_INT 57
35168: PUSH
35169: LD_INT 58
35171: PUSH
35172: LD_INT 59
35174: PUSH
35175: LD_INT 60
35177: PUSH
35178: LD_INT 61
35180: PUSH
35181: LD_INT 62
35183: PUSH
35184: LD_INT 80
35186: PUSH
35187: LD_INT 82
35189: PUSH
35190: LD_INT 83
35192: PUSH
35193: LD_INT 84
35195: PUSH
35196: LD_INT 85
35198: PUSH
35199: LD_INT 86
35201: PUSH
35202: EMPTY
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: LIST
35213: LIST
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: ST_TO_ADDR
35255: GO 35722
35257: LD_INT 2
35259: DOUBLE
35260: EQUAL
35261: IFTRUE 35265
35263: GO 35491
35265: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35266: LD_ADDR_VAR 0 4
35270: PUSH
35271: LD_INT 35
35273: PUSH
35274: LD_INT 45
35276: PUSH
35277: LD_INT 46
35279: PUSH
35280: LD_INT 47
35282: PUSH
35283: LD_INT 82
35285: PUSH
35286: LD_INT 83
35288: PUSH
35289: LD_INT 84
35291: PUSH
35292: LD_INT 85
35294: PUSH
35295: LD_INT 87
35297: PUSH
35298: LD_INT 70
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: LD_INT 11
35306: PUSH
35307: LD_INT 3
35309: PUSH
35310: LD_INT 4
35312: PUSH
35313: LD_INT 5
35315: PUSH
35316: LD_INT 6
35318: PUSH
35319: LD_INT 15
35321: PUSH
35322: LD_INT 18
35324: PUSH
35325: LD_INT 7
35327: PUSH
35328: LD_INT 17
35330: PUSH
35331: LD_INT 8
35333: PUSH
35334: LD_INT 20
35336: PUSH
35337: LD_INT 21
35339: PUSH
35340: LD_INT 22
35342: PUSH
35343: LD_INT 72
35345: PUSH
35346: LD_INT 26
35348: PUSH
35349: LD_INT 69
35351: PUSH
35352: LD_INT 39
35354: PUSH
35355: LD_INT 40
35357: PUSH
35358: LD_INT 41
35360: PUSH
35361: LD_INT 42
35363: PUSH
35364: LD_INT 43
35366: PUSH
35367: LD_INT 48
35369: PUSH
35370: LD_INT 49
35372: PUSH
35373: LD_INT 50
35375: PUSH
35376: LD_INT 51
35378: PUSH
35379: LD_INT 52
35381: PUSH
35382: LD_INT 53
35384: PUSH
35385: LD_INT 54
35387: PUSH
35388: LD_INT 55
35390: PUSH
35391: LD_INT 56
35393: PUSH
35394: LD_INT 60
35396: PUSH
35397: LD_INT 61
35399: PUSH
35400: LD_INT 62
35402: PUSH
35403: LD_INT 66
35405: PUSH
35406: LD_INT 67
35408: PUSH
35409: LD_INT 68
35411: PUSH
35412: LD_INT 81
35414: PUSH
35415: LD_INT 82
35417: PUSH
35418: LD_INT 83
35420: PUSH
35421: LD_INT 84
35423: PUSH
35424: LD_INT 85
35426: PUSH
35427: LD_INT 87
35429: PUSH
35430: LD_INT 88
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: LIST
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: ST_TO_ADDR
35489: GO 35722
35491: LD_INT 3
35493: DOUBLE
35494: EQUAL
35495: IFTRUE 35499
35497: GO 35721
35499: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
35500: LD_ADDR_VAR 0 4
35504: PUSH
35505: LD_INT 46
35507: PUSH
35508: LD_INT 47
35510: PUSH
35511: LD_INT 1
35513: PUSH
35514: LD_INT 2
35516: PUSH
35517: LD_INT 82
35519: PUSH
35520: LD_INT 83
35522: PUSH
35523: LD_INT 84
35525: PUSH
35526: LD_INT 85
35528: PUSH
35529: LD_INT 86
35531: PUSH
35532: LD_INT 11
35534: PUSH
35535: LD_INT 9
35537: PUSH
35538: LD_INT 20
35540: PUSH
35541: LD_INT 19
35543: PUSH
35544: LD_INT 21
35546: PUSH
35547: LD_INT 24
35549: PUSH
35550: LD_INT 22
35552: PUSH
35553: LD_INT 25
35555: PUSH
35556: LD_INT 28
35558: PUSH
35559: LD_INT 29
35561: PUSH
35562: LD_INT 30
35564: PUSH
35565: LD_INT 31
35567: PUSH
35568: LD_INT 37
35570: PUSH
35571: LD_INT 38
35573: PUSH
35574: LD_INT 32
35576: PUSH
35577: LD_INT 27
35579: PUSH
35580: LD_INT 33
35582: PUSH
35583: LD_INT 69
35585: PUSH
35586: LD_INT 39
35588: PUSH
35589: LD_INT 34
35591: PUSH
35592: LD_INT 40
35594: PUSH
35595: LD_INT 71
35597: PUSH
35598: LD_INT 23
35600: PUSH
35601: LD_INT 44
35603: PUSH
35604: LD_INT 48
35606: PUSH
35607: LD_INT 49
35609: PUSH
35610: LD_INT 50
35612: PUSH
35613: LD_INT 51
35615: PUSH
35616: LD_INT 52
35618: PUSH
35619: LD_INT 53
35621: PUSH
35622: LD_INT 54
35624: PUSH
35625: LD_INT 55
35627: PUSH
35628: LD_INT 56
35630: PUSH
35631: LD_INT 57
35633: PUSH
35634: LD_INT 58
35636: PUSH
35637: LD_INT 59
35639: PUSH
35640: LD_INT 63
35642: PUSH
35643: LD_INT 64
35645: PUSH
35646: LD_INT 65
35648: PUSH
35649: LD_INT 82
35651: PUSH
35652: LD_INT 83
35654: PUSH
35655: LD_INT 84
35657: PUSH
35658: LD_INT 85
35660: PUSH
35661: LD_INT 86
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: ST_TO_ADDR
35719: GO 35722
35721: POP
// if state > - 1 and state < 3 then
35722: LD_VAR 0 3
35726: PUSH
35727: LD_INT 1
35729: NEG
35730: GREATER
35731: PUSH
35732: LD_VAR 0 3
35736: PUSH
35737: LD_INT 3
35739: LESS
35740: AND
35741: IFFALSE 35798
// for i in result do
35743: LD_ADDR_VAR 0 5
35747: PUSH
35748: LD_VAR 0 4
35752: PUSH
35753: FOR_IN
35754: IFFALSE 35796
// if GetTech ( i , side ) <> state then
35756: LD_VAR 0 5
35760: PPUSH
35761: LD_VAR 0 1
35765: PPUSH
35766: CALL_OW 321
35770: PUSH
35771: LD_VAR 0 3
35775: NONEQUAL
35776: IFFALSE 35794
// result := result diff i ;
35778: LD_ADDR_VAR 0 4
35782: PUSH
35783: LD_VAR 0 4
35787: PUSH
35788: LD_VAR 0 5
35792: DIFF
35793: ST_TO_ADDR
35794: GO 35753
35796: POP
35797: POP
// end ;
35798: LD_VAR 0 4
35802: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35803: LD_INT 0
35805: PPUSH
35806: PPUSH
35807: PPUSH
// result := true ;
35808: LD_ADDR_VAR 0 3
35812: PUSH
35813: LD_INT 1
35815: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35816: LD_ADDR_VAR 0 5
35820: PUSH
35821: LD_VAR 0 2
35825: PPUSH
35826: CALL_OW 480
35830: ST_TO_ADDR
// if not tmp then
35831: LD_VAR 0 5
35835: NOT
35836: IFFALSE 35840
// exit ;
35838: GO 35889
// for i in tmp do
35840: LD_ADDR_VAR 0 4
35844: PUSH
35845: LD_VAR 0 5
35849: PUSH
35850: FOR_IN
35851: IFFALSE 35887
// if GetTech ( i , side ) <> state_researched then
35853: LD_VAR 0 4
35857: PPUSH
35858: LD_VAR 0 1
35862: PPUSH
35863: CALL_OW 321
35867: PUSH
35868: LD_INT 2
35870: NONEQUAL
35871: IFFALSE 35885
// begin result := false ;
35873: LD_ADDR_VAR 0 3
35877: PUSH
35878: LD_INT 0
35880: ST_TO_ADDR
// exit ;
35881: POP
35882: POP
35883: GO 35889
// end ;
35885: GO 35850
35887: POP
35888: POP
// end ;
35889: LD_VAR 0 3
35893: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35894: LD_INT 0
35896: PPUSH
35897: PPUSH
35898: PPUSH
35899: PPUSH
35900: PPUSH
35901: PPUSH
35902: PPUSH
35903: PPUSH
35904: PPUSH
35905: PPUSH
35906: PPUSH
35907: PPUSH
35908: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35909: LD_VAR 0 1
35913: NOT
35914: PUSH
35915: LD_VAR 0 1
35919: PPUSH
35920: CALL_OW 257
35924: PUSH
35925: LD_INT 9
35927: NONEQUAL
35928: OR
35929: IFFALSE 35933
// exit ;
35931: GO 36506
// side := GetSide ( unit ) ;
35933: LD_ADDR_VAR 0 9
35937: PUSH
35938: LD_VAR 0 1
35942: PPUSH
35943: CALL_OW 255
35947: ST_TO_ADDR
// tech_space := tech_spacanom ;
35948: LD_ADDR_VAR 0 12
35952: PUSH
35953: LD_INT 29
35955: ST_TO_ADDR
// tech_time := tech_taurad ;
35956: LD_ADDR_VAR 0 13
35960: PUSH
35961: LD_INT 28
35963: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35964: LD_ADDR_VAR 0 11
35968: PUSH
35969: LD_VAR 0 1
35973: PPUSH
35974: CALL_OW 310
35978: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35979: LD_VAR 0 11
35983: PPUSH
35984: CALL_OW 247
35988: PUSH
35989: LD_INT 2
35991: EQUAL
35992: IFFALSE 35996
// exit ;
35994: GO 36506
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35996: LD_ADDR_VAR 0 8
36000: PUSH
36001: LD_INT 81
36003: PUSH
36004: LD_VAR 0 9
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 3
36015: PUSH
36016: LD_INT 21
36018: PUSH
36019: LD_INT 3
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PPUSH
36034: CALL_OW 69
36038: ST_TO_ADDR
// if not tmp then
36039: LD_VAR 0 8
36043: NOT
36044: IFFALSE 36048
// exit ;
36046: GO 36506
// if in_unit then
36048: LD_VAR 0 11
36052: IFFALSE 36076
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36054: LD_ADDR_VAR 0 10
36058: PUSH
36059: LD_VAR 0 8
36063: PPUSH
36064: LD_VAR 0 11
36068: PPUSH
36069: CALL_OW 74
36073: ST_TO_ADDR
36074: GO 36096
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36076: LD_ADDR_VAR 0 10
36080: PUSH
36081: LD_VAR 0 8
36085: PPUSH
36086: LD_VAR 0 1
36090: PPUSH
36091: CALL_OW 74
36095: ST_TO_ADDR
// if not enemy then
36096: LD_VAR 0 10
36100: NOT
36101: IFFALSE 36105
// exit ;
36103: GO 36506
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36105: LD_VAR 0 11
36109: PUSH
36110: LD_VAR 0 11
36114: PPUSH
36115: LD_VAR 0 10
36119: PPUSH
36120: CALL_OW 296
36124: PUSH
36125: LD_INT 13
36127: GREATER
36128: AND
36129: PUSH
36130: LD_VAR 0 1
36134: PPUSH
36135: LD_VAR 0 10
36139: PPUSH
36140: CALL_OW 296
36144: PUSH
36145: LD_INT 12
36147: GREATER
36148: OR
36149: IFFALSE 36153
// exit ;
36151: GO 36506
// missile := [ 1 ] ;
36153: LD_ADDR_VAR 0 14
36157: PUSH
36158: LD_INT 1
36160: PUSH
36161: EMPTY
36162: LIST
36163: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36164: LD_VAR 0 9
36168: PPUSH
36169: LD_VAR 0 12
36173: PPUSH
36174: CALL_OW 325
36178: IFFALSE 36207
// missile := Replace ( missile , missile + 1 , 2 ) ;
36180: LD_ADDR_VAR 0 14
36184: PUSH
36185: LD_VAR 0 14
36189: PPUSH
36190: LD_VAR 0 14
36194: PUSH
36195: LD_INT 1
36197: PLUS
36198: PPUSH
36199: LD_INT 2
36201: PPUSH
36202: CALL_OW 1
36206: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36207: LD_VAR 0 9
36211: PPUSH
36212: LD_VAR 0 13
36216: PPUSH
36217: CALL_OW 325
36221: PUSH
36222: LD_VAR 0 10
36226: PPUSH
36227: CALL_OW 255
36231: PPUSH
36232: LD_VAR 0 13
36236: PPUSH
36237: CALL_OW 325
36241: NOT
36242: AND
36243: IFFALSE 36272
// missile := Replace ( missile , missile + 1 , 3 ) ;
36245: LD_ADDR_VAR 0 14
36249: PUSH
36250: LD_VAR 0 14
36254: PPUSH
36255: LD_VAR 0 14
36259: PUSH
36260: LD_INT 1
36262: PLUS
36263: PPUSH
36264: LD_INT 3
36266: PPUSH
36267: CALL_OW 1
36271: ST_TO_ADDR
// if missile < 2 then
36272: LD_VAR 0 14
36276: PUSH
36277: LD_INT 2
36279: LESS
36280: IFFALSE 36284
// exit ;
36282: GO 36506
// x := GetX ( enemy ) ;
36284: LD_ADDR_VAR 0 4
36288: PUSH
36289: LD_VAR 0 10
36293: PPUSH
36294: CALL_OW 250
36298: ST_TO_ADDR
// y := GetY ( enemy ) ;
36299: LD_ADDR_VAR 0 5
36303: PUSH
36304: LD_VAR 0 10
36308: PPUSH
36309: CALL_OW 251
36313: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36314: LD_ADDR_VAR 0 6
36318: PUSH
36319: LD_VAR 0 4
36323: PUSH
36324: LD_INT 1
36326: NEG
36327: PPUSH
36328: LD_INT 1
36330: PPUSH
36331: CALL_OW 12
36335: PLUS
36336: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36337: LD_ADDR_VAR 0 7
36341: PUSH
36342: LD_VAR 0 5
36346: PUSH
36347: LD_INT 1
36349: NEG
36350: PPUSH
36351: LD_INT 1
36353: PPUSH
36354: CALL_OW 12
36358: PLUS
36359: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36360: LD_VAR 0 6
36364: PPUSH
36365: LD_VAR 0 7
36369: PPUSH
36370: CALL_OW 488
36374: NOT
36375: IFFALSE 36397
// begin _x := x ;
36377: LD_ADDR_VAR 0 6
36381: PUSH
36382: LD_VAR 0 4
36386: ST_TO_ADDR
// _y := y ;
36387: LD_ADDR_VAR 0 7
36391: PUSH
36392: LD_VAR 0 5
36396: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36397: LD_ADDR_VAR 0 3
36401: PUSH
36402: LD_INT 1
36404: PPUSH
36405: LD_VAR 0 14
36409: PPUSH
36410: CALL_OW 12
36414: ST_TO_ADDR
// case i of 1 :
36415: LD_VAR 0 3
36419: PUSH
36420: LD_INT 1
36422: DOUBLE
36423: EQUAL
36424: IFTRUE 36428
36426: GO 36445
36428: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36429: LD_VAR 0 1
36433: PPUSH
36434: LD_VAR 0 10
36438: PPUSH
36439: CALL_OW 115
36443: GO 36506
36445: LD_INT 2
36447: DOUBLE
36448: EQUAL
36449: IFTRUE 36453
36451: GO 36475
36453: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
36454: LD_VAR 0 1
36458: PPUSH
36459: LD_VAR 0 6
36463: PPUSH
36464: LD_VAR 0 7
36468: PPUSH
36469: CALL_OW 153
36473: GO 36506
36475: LD_INT 3
36477: DOUBLE
36478: EQUAL
36479: IFTRUE 36483
36481: GO 36505
36483: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36484: LD_VAR 0 1
36488: PPUSH
36489: LD_VAR 0 6
36493: PPUSH
36494: LD_VAR 0 7
36498: PPUSH
36499: CALL_OW 154
36503: GO 36506
36505: POP
// end ;
36506: LD_VAR 0 2
36510: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36511: LD_INT 0
36513: PPUSH
36514: PPUSH
36515: PPUSH
36516: PPUSH
36517: PPUSH
36518: PPUSH
// if not unit or not building then
36519: LD_VAR 0 1
36523: NOT
36524: PUSH
36525: LD_VAR 0 2
36529: NOT
36530: OR
36531: IFFALSE 36535
// exit ;
36533: GO 36693
// x := GetX ( building ) ;
36535: LD_ADDR_VAR 0 5
36539: PUSH
36540: LD_VAR 0 2
36544: PPUSH
36545: CALL_OW 250
36549: ST_TO_ADDR
// y := GetY ( building ) ;
36550: LD_ADDR_VAR 0 6
36554: PUSH
36555: LD_VAR 0 2
36559: PPUSH
36560: CALL_OW 251
36564: ST_TO_ADDR
// for i = 0 to 5 do
36565: LD_ADDR_VAR 0 4
36569: PUSH
36570: DOUBLE
36571: LD_INT 0
36573: DEC
36574: ST_TO_ADDR
36575: LD_INT 5
36577: PUSH
36578: FOR_TO
36579: IFFALSE 36691
// begin _x := ShiftX ( x , i , 3 ) ;
36581: LD_ADDR_VAR 0 7
36585: PUSH
36586: LD_VAR 0 5
36590: PPUSH
36591: LD_VAR 0 4
36595: PPUSH
36596: LD_INT 3
36598: PPUSH
36599: CALL_OW 272
36603: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36604: LD_ADDR_VAR 0 8
36608: PUSH
36609: LD_VAR 0 6
36613: PPUSH
36614: LD_VAR 0 4
36618: PPUSH
36619: LD_INT 3
36621: PPUSH
36622: CALL_OW 273
36626: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36627: LD_VAR 0 7
36631: PPUSH
36632: LD_VAR 0 8
36636: PPUSH
36637: CALL_OW 488
36641: NOT
36642: IFFALSE 36646
// continue ;
36644: GO 36578
// if HexInfo ( _x , _y ) = 0 then
36646: LD_VAR 0 7
36650: PPUSH
36651: LD_VAR 0 8
36655: PPUSH
36656: CALL_OW 428
36660: PUSH
36661: LD_INT 0
36663: EQUAL
36664: IFFALSE 36689
// begin ComMoveXY ( unit , _x , _y ) ;
36666: LD_VAR 0 1
36670: PPUSH
36671: LD_VAR 0 7
36675: PPUSH
36676: LD_VAR 0 8
36680: PPUSH
36681: CALL_OW 111
// exit ;
36685: POP
36686: POP
36687: GO 36693
// end ; end ;
36689: GO 36578
36691: POP
36692: POP
// end ;
36693: LD_VAR 0 3
36697: RET
// export function ScanBase ( side , base_area ) ; begin
36698: LD_INT 0
36700: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36701: LD_ADDR_VAR 0 3
36705: PUSH
36706: LD_VAR 0 2
36710: PPUSH
36711: LD_INT 81
36713: PUSH
36714: LD_VAR 0 1
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PPUSH
36723: CALL_OW 70
36727: ST_TO_ADDR
// end ;
36728: LD_VAR 0 3
36732: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36733: LD_INT 0
36735: PPUSH
36736: PPUSH
36737: PPUSH
36738: PPUSH
// result := false ;
36739: LD_ADDR_VAR 0 2
36743: PUSH
36744: LD_INT 0
36746: ST_TO_ADDR
// side := GetSide ( unit ) ;
36747: LD_ADDR_VAR 0 3
36751: PUSH
36752: LD_VAR 0 1
36756: PPUSH
36757: CALL_OW 255
36761: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36762: LD_ADDR_VAR 0 4
36766: PUSH
36767: LD_VAR 0 1
36771: PPUSH
36772: CALL_OW 248
36776: ST_TO_ADDR
// case nat of 1 :
36777: LD_VAR 0 4
36781: PUSH
36782: LD_INT 1
36784: DOUBLE
36785: EQUAL
36786: IFTRUE 36790
36788: GO 36801
36790: POP
// tech := tech_lassight ; 2 :
36791: LD_ADDR_VAR 0 5
36795: PUSH
36796: LD_INT 12
36798: ST_TO_ADDR
36799: GO 36840
36801: LD_INT 2
36803: DOUBLE
36804: EQUAL
36805: IFTRUE 36809
36807: GO 36820
36809: POP
// tech := tech_mortar ; 3 :
36810: LD_ADDR_VAR 0 5
36814: PUSH
36815: LD_INT 41
36817: ST_TO_ADDR
36818: GO 36840
36820: LD_INT 3
36822: DOUBLE
36823: EQUAL
36824: IFTRUE 36828
36826: GO 36839
36828: POP
// tech := tech_bazooka ; end ;
36829: LD_ADDR_VAR 0 5
36833: PUSH
36834: LD_INT 44
36836: ST_TO_ADDR
36837: GO 36840
36839: POP
// if Researched ( side , tech ) then
36840: LD_VAR 0 3
36844: PPUSH
36845: LD_VAR 0 5
36849: PPUSH
36850: CALL_OW 325
36854: IFFALSE 36881
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36856: LD_ADDR_VAR 0 2
36860: PUSH
36861: LD_INT 5
36863: PUSH
36864: LD_INT 8
36866: PUSH
36867: LD_INT 9
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: LIST
36874: PUSH
36875: LD_VAR 0 4
36879: ARRAY
36880: ST_TO_ADDR
// end ;
36881: LD_VAR 0 2
36885: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36886: LD_INT 0
36888: PPUSH
36889: PPUSH
36890: PPUSH
// if not mines then
36891: LD_VAR 0 2
36895: NOT
36896: IFFALSE 36900
// exit ;
36898: GO 37044
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36900: LD_ADDR_VAR 0 5
36904: PUSH
36905: LD_INT 81
36907: PUSH
36908: LD_VAR 0 1
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 3
36919: PUSH
36920: LD_INT 21
36922: PUSH
36923: LD_INT 3
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: EMPTY
36935: LIST
36936: LIST
36937: PPUSH
36938: CALL_OW 69
36942: ST_TO_ADDR
// for i in mines do
36943: LD_ADDR_VAR 0 4
36947: PUSH
36948: LD_VAR 0 2
36952: PUSH
36953: FOR_IN
36954: IFFALSE 37042
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36956: LD_VAR 0 4
36960: PUSH
36961: LD_INT 1
36963: ARRAY
36964: PPUSH
36965: LD_VAR 0 4
36969: PUSH
36970: LD_INT 2
36972: ARRAY
36973: PPUSH
36974: CALL_OW 458
36978: NOT
36979: IFFALSE 36983
// continue ;
36981: GO 36953
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36983: LD_VAR 0 4
36987: PUSH
36988: LD_INT 1
36990: ARRAY
36991: PPUSH
36992: LD_VAR 0 4
36996: PUSH
36997: LD_INT 2
36999: ARRAY
37000: PPUSH
37001: CALL_OW 428
37005: PUSH
37006: LD_VAR 0 5
37010: IN
37011: IFFALSE 37040
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37013: LD_VAR 0 4
37017: PUSH
37018: LD_INT 1
37020: ARRAY
37021: PPUSH
37022: LD_VAR 0 4
37026: PUSH
37027: LD_INT 2
37029: ARRAY
37030: PPUSH
37031: LD_VAR 0 1
37035: PPUSH
37036: CALL_OW 456
// end ;
37040: GO 36953
37042: POP
37043: POP
// end ;
37044: LD_VAR 0 3
37048: RET
// export function Count ( array ) ; var i ; begin
37049: LD_INT 0
37051: PPUSH
37052: PPUSH
// result := 0 ;
37053: LD_ADDR_VAR 0 2
37057: PUSH
37058: LD_INT 0
37060: ST_TO_ADDR
// for i in array do
37061: LD_ADDR_VAR 0 3
37065: PUSH
37066: LD_VAR 0 1
37070: PUSH
37071: FOR_IN
37072: IFFALSE 37096
// if i then
37074: LD_VAR 0 3
37078: IFFALSE 37094
// result := result + 1 ;
37080: LD_ADDR_VAR 0 2
37084: PUSH
37085: LD_VAR 0 2
37089: PUSH
37090: LD_INT 1
37092: PLUS
37093: ST_TO_ADDR
37094: GO 37071
37096: POP
37097: POP
// end ;
37098: LD_VAR 0 2
37102: RET
// export function IsEmpty ( building ) ; begin
37103: LD_INT 0
37105: PPUSH
// if not building then
37106: LD_VAR 0 1
37110: NOT
37111: IFFALSE 37115
// exit ;
37113: GO 37158
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37115: LD_ADDR_VAR 0 2
37119: PUSH
37120: LD_VAR 0 1
37124: PUSH
37125: LD_INT 22
37127: PUSH
37128: LD_VAR 0 1
37132: PPUSH
37133: CALL_OW 255
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 58
37144: PUSH
37145: EMPTY
37146: LIST
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PPUSH
37152: CALL_OW 69
37156: IN
37157: ST_TO_ADDR
// end ;
37158: LD_VAR 0 2
37162: RET
// export function IsNotFull ( building ) ; var places ; begin
37163: LD_INT 0
37165: PPUSH
37166: PPUSH
// if not building then
37167: LD_VAR 0 1
37171: NOT
37172: IFFALSE 37176
// exit ;
37174: GO 37347
// result := false ;
37176: LD_ADDR_VAR 0 2
37180: PUSH
37181: LD_INT 0
37183: ST_TO_ADDR
// places := 0 ;
37184: LD_ADDR_VAR 0 3
37188: PUSH
37189: LD_INT 0
37191: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
37192: LD_VAR 0 1
37196: PPUSH
37197: CALL_OW 266
37201: PUSH
37202: LD_INT 0
37204: DOUBLE
37205: EQUAL
37206: IFTRUE 37264
37208: LD_INT 1
37210: DOUBLE
37211: EQUAL
37212: IFTRUE 37264
37214: LD_INT 6
37216: DOUBLE
37217: EQUAL
37218: IFTRUE 37264
37220: LD_INT 7
37222: DOUBLE
37223: EQUAL
37224: IFTRUE 37264
37226: LD_INT 8
37228: DOUBLE
37229: EQUAL
37230: IFTRUE 37264
37232: LD_INT 4
37234: DOUBLE
37235: EQUAL
37236: IFTRUE 37264
37238: LD_INT 5
37240: DOUBLE
37241: EQUAL
37242: IFTRUE 37264
37244: LD_INT 2
37246: DOUBLE
37247: EQUAL
37248: IFTRUE 37264
37250: LD_INT 3
37252: DOUBLE
37253: EQUAL
37254: IFTRUE 37264
37256: LD_INT 35
37258: DOUBLE
37259: EQUAL
37260: IFTRUE 37264
37262: GO 37275
37264: POP
// places := 6 ; b_bunker , b_breastwork :
37265: LD_ADDR_VAR 0 3
37269: PUSH
37270: LD_INT 6
37272: ST_TO_ADDR
37273: GO 37320
37275: LD_INT 32
37277: DOUBLE
37278: EQUAL
37279: IFTRUE 37289
37281: LD_INT 31
37283: DOUBLE
37284: EQUAL
37285: IFTRUE 37289
37287: GO 37300
37289: POP
// places := 1 ; b_control_tower :
37290: LD_ADDR_VAR 0 3
37294: PUSH
37295: LD_INT 1
37297: ST_TO_ADDR
37298: GO 37320
37300: LD_INT 36
37302: DOUBLE
37303: EQUAL
37304: IFTRUE 37308
37306: GO 37319
37308: POP
// places := 3 ; end ;
37309: LD_ADDR_VAR 0 3
37313: PUSH
37314: LD_INT 3
37316: ST_TO_ADDR
37317: GO 37320
37319: POP
// if places then
37320: LD_VAR 0 3
37324: IFFALSE 37347
// result := UnitsInside ( building ) < places ;
37326: LD_ADDR_VAR 0 2
37330: PUSH
37331: LD_VAR 0 1
37335: PPUSH
37336: CALL_OW 313
37340: PUSH
37341: LD_VAR 0 3
37345: LESS
37346: ST_TO_ADDR
// end ;
37347: LD_VAR 0 2
37351: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37352: LD_INT 0
37354: PPUSH
37355: PPUSH
37356: PPUSH
37357: PPUSH
// tmp := [ ] ;
37358: LD_ADDR_VAR 0 3
37362: PUSH
37363: EMPTY
37364: ST_TO_ADDR
// list := [ ] ;
37365: LD_ADDR_VAR 0 5
37369: PUSH
37370: EMPTY
37371: ST_TO_ADDR
// for i = 16 to 25 do
37372: LD_ADDR_VAR 0 4
37376: PUSH
37377: DOUBLE
37378: LD_INT 16
37380: DEC
37381: ST_TO_ADDR
37382: LD_INT 25
37384: PUSH
37385: FOR_TO
37386: IFFALSE 37459
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37388: LD_ADDR_VAR 0 3
37392: PUSH
37393: LD_VAR 0 3
37397: PUSH
37398: LD_INT 22
37400: PUSH
37401: LD_VAR 0 1
37405: PPUSH
37406: CALL_OW 255
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 91
37417: PUSH
37418: LD_VAR 0 1
37422: PUSH
37423: LD_INT 6
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: LIST
37430: PUSH
37431: LD_INT 30
37433: PUSH
37434: LD_VAR 0 4
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: LIST
37447: PUSH
37448: EMPTY
37449: LIST
37450: PPUSH
37451: CALL_OW 69
37455: ADD
37456: ST_TO_ADDR
37457: GO 37385
37459: POP
37460: POP
// for i = 1 to tmp do
37461: LD_ADDR_VAR 0 4
37465: PUSH
37466: DOUBLE
37467: LD_INT 1
37469: DEC
37470: ST_TO_ADDR
37471: LD_VAR 0 3
37475: PUSH
37476: FOR_TO
37477: IFFALSE 37565
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37479: LD_ADDR_VAR 0 5
37483: PUSH
37484: LD_VAR 0 5
37488: PUSH
37489: LD_VAR 0 3
37493: PUSH
37494: LD_VAR 0 4
37498: ARRAY
37499: PPUSH
37500: CALL_OW 266
37504: PUSH
37505: LD_VAR 0 3
37509: PUSH
37510: LD_VAR 0 4
37514: ARRAY
37515: PPUSH
37516: CALL_OW 250
37520: PUSH
37521: LD_VAR 0 3
37525: PUSH
37526: LD_VAR 0 4
37530: ARRAY
37531: PPUSH
37532: CALL_OW 251
37536: PUSH
37537: LD_VAR 0 3
37541: PUSH
37542: LD_VAR 0 4
37546: ARRAY
37547: PPUSH
37548: CALL_OW 254
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: PUSH
37559: EMPTY
37560: LIST
37561: ADD
37562: ST_TO_ADDR
37563: GO 37476
37565: POP
37566: POP
// result := list ;
37567: LD_ADDR_VAR 0 2
37571: PUSH
37572: LD_VAR 0 5
37576: ST_TO_ADDR
// end ;
37577: LD_VAR 0 2
37581: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37582: LD_INT 0
37584: PPUSH
37585: PPUSH
37586: PPUSH
37587: PPUSH
37588: PPUSH
37589: PPUSH
37590: PPUSH
// if not factory then
37591: LD_VAR 0 1
37595: NOT
37596: IFFALSE 37600
// exit ;
37598: GO 38193
// if control = control_apeman then
37600: LD_VAR 0 4
37604: PUSH
37605: LD_INT 5
37607: EQUAL
37608: IFFALSE 37717
// begin tmp := UnitsInside ( factory ) ;
37610: LD_ADDR_VAR 0 8
37614: PUSH
37615: LD_VAR 0 1
37619: PPUSH
37620: CALL_OW 313
37624: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
37625: LD_VAR 0 8
37629: PPUSH
37630: LD_INT 25
37632: PUSH
37633: LD_INT 12
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PPUSH
37640: CALL_OW 72
37644: NOT
37645: IFFALSE 37655
// control := control_manual ;
37647: LD_ADDR_VAR 0 4
37651: PUSH
37652: LD_INT 1
37654: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
37655: LD_ADDR_VAR 0 8
37659: PUSH
37660: LD_VAR 0 1
37664: PPUSH
37665: CALL 37352 0 1
37669: ST_TO_ADDR
// if tmp then
37670: LD_VAR 0 8
37674: IFFALSE 37717
// begin for i in tmp do
37676: LD_ADDR_VAR 0 7
37680: PUSH
37681: LD_VAR 0 8
37685: PUSH
37686: FOR_IN
37687: IFFALSE 37715
// if i [ 1 ] = b_ext_radio then
37689: LD_VAR 0 7
37693: PUSH
37694: LD_INT 1
37696: ARRAY
37697: PUSH
37698: LD_INT 22
37700: EQUAL
37701: IFFALSE 37713
// begin control := control_remote ;
37703: LD_ADDR_VAR 0 4
37707: PUSH
37708: LD_INT 2
37710: ST_TO_ADDR
// break ;
37711: GO 37715
// end ;
37713: GO 37686
37715: POP
37716: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37717: LD_VAR 0 1
37721: PPUSH
37722: LD_VAR 0 2
37726: PPUSH
37727: LD_VAR 0 3
37731: PPUSH
37732: LD_VAR 0 4
37736: PPUSH
37737: LD_VAR 0 5
37741: PPUSH
37742: CALL_OW 448
37746: IFFALSE 37781
// begin result := [ chassis , engine , control , weapon ] ;
37748: LD_ADDR_VAR 0 6
37752: PUSH
37753: LD_VAR 0 2
37757: PUSH
37758: LD_VAR 0 3
37762: PUSH
37763: LD_VAR 0 4
37767: PUSH
37768: LD_VAR 0 5
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: ST_TO_ADDR
// exit ;
37779: GO 38193
// end ; _chassis := AvailableChassisList ( factory ) ;
37781: LD_ADDR_VAR 0 9
37785: PUSH
37786: LD_VAR 0 1
37790: PPUSH
37791: CALL_OW 475
37795: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37796: LD_ADDR_VAR 0 11
37800: PUSH
37801: LD_VAR 0 1
37805: PPUSH
37806: CALL_OW 476
37810: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37811: LD_ADDR_VAR 0 12
37815: PUSH
37816: LD_VAR 0 1
37820: PPUSH
37821: CALL_OW 477
37825: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37826: LD_ADDR_VAR 0 10
37830: PUSH
37831: LD_VAR 0 1
37835: PPUSH
37836: CALL_OW 478
37840: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37841: LD_VAR 0 9
37845: NOT
37846: PUSH
37847: LD_VAR 0 11
37851: NOT
37852: OR
37853: PUSH
37854: LD_VAR 0 12
37858: NOT
37859: OR
37860: PUSH
37861: LD_VAR 0 10
37865: NOT
37866: OR
37867: IFFALSE 37902
// begin result := [ chassis , engine , control , weapon ] ;
37869: LD_ADDR_VAR 0 6
37873: PUSH
37874: LD_VAR 0 2
37878: PUSH
37879: LD_VAR 0 3
37883: PUSH
37884: LD_VAR 0 4
37888: PUSH
37889: LD_VAR 0 5
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: ST_TO_ADDR
// exit ;
37900: GO 38193
// end ; if not chassis in _chassis then
37902: LD_VAR 0 2
37906: PUSH
37907: LD_VAR 0 9
37911: IN
37912: NOT
37913: IFFALSE 37939
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37915: LD_ADDR_VAR 0 2
37919: PUSH
37920: LD_VAR 0 9
37924: PUSH
37925: LD_INT 1
37927: PPUSH
37928: LD_VAR 0 9
37932: PPUSH
37933: CALL_OW 12
37937: ARRAY
37938: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37939: LD_VAR 0 2
37943: PPUSH
37944: LD_VAR 0 3
37948: PPUSH
37949: CALL 38198 0 2
37953: NOT
37954: IFFALSE 38013
// repeat engine := _engine [ 1 ] ;
37956: LD_ADDR_VAR 0 3
37960: PUSH
37961: LD_VAR 0 11
37965: PUSH
37966: LD_INT 1
37968: ARRAY
37969: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37970: LD_ADDR_VAR 0 11
37974: PUSH
37975: LD_VAR 0 11
37979: PPUSH
37980: LD_INT 1
37982: PPUSH
37983: CALL_OW 3
37987: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37988: LD_VAR 0 2
37992: PPUSH
37993: LD_VAR 0 3
37997: PPUSH
37998: CALL 38198 0 2
38002: PUSH
38003: LD_VAR 0 11
38007: PUSH
38008: EMPTY
38009: EQUAL
38010: OR
38011: IFFALSE 37956
// if not control in _control then
38013: LD_VAR 0 4
38017: PUSH
38018: LD_VAR 0 12
38022: IN
38023: NOT
38024: IFFALSE 38050
// control := _control [ rand ( 1 , _control ) ] ;
38026: LD_ADDR_VAR 0 4
38030: PUSH
38031: LD_VAR 0 12
38035: PUSH
38036: LD_INT 1
38038: PPUSH
38039: LD_VAR 0 12
38043: PPUSH
38044: CALL_OW 12
38048: ARRAY
38049: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38050: LD_VAR 0 2
38054: PPUSH
38055: LD_VAR 0 5
38059: PPUSH
38060: CALL 38418 0 2
38064: NOT
38065: IFFALSE 38124
// repeat weapon := _weapon [ 1 ] ;
38067: LD_ADDR_VAR 0 5
38071: PUSH
38072: LD_VAR 0 10
38076: PUSH
38077: LD_INT 1
38079: ARRAY
38080: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38081: LD_ADDR_VAR 0 10
38085: PUSH
38086: LD_VAR 0 10
38090: PPUSH
38091: LD_INT 1
38093: PPUSH
38094: CALL_OW 3
38098: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38099: LD_VAR 0 2
38103: PPUSH
38104: LD_VAR 0 5
38108: PPUSH
38109: CALL 38418 0 2
38113: PUSH
38114: LD_VAR 0 10
38118: PUSH
38119: EMPTY
38120: EQUAL
38121: OR
38122: IFFALSE 38067
// result := [ ] ;
38124: LD_ADDR_VAR 0 6
38128: PUSH
38129: EMPTY
38130: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38131: LD_VAR 0 1
38135: PPUSH
38136: LD_VAR 0 2
38140: PPUSH
38141: LD_VAR 0 3
38145: PPUSH
38146: LD_VAR 0 4
38150: PPUSH
38151: LD_VAR 0 5
38155: PPUSH
38156: CALL_OW 448
38160: IFFALSE 38193
// result := [ chassis , engine , control , weapon ] ;
38162: LD_ADDR_VAR 0 6
38166: PUSH
38167: LD_VAR 0 2
38171: PUSH
38172: LD_VAR 0 3
38176: PUSH
38177: LD_VAR 0 4
38181: PUSH
38182: LD_VAR 0 5
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: ST_TO_ADDR
// end ;
38193: LD_VAR 0 6
38197: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38198: LD_INT 0
38200: PPUSH
// if not chassis or not engine then
38201: LD_VAR 0 1
38205: NOT
38206: PUSH
38207: LD_VAR 0 2
38211: NOT
38212: OR
38213: IFFALSE 38217
// exit ;
38215: GO 38413
// case engine of engine_solar :
38217: LD_VAR 0 2
38221: PUSH
38222: LD_INT 2
38224: DOUBLE
38225: EQUAL
38226: IFTRUE 38230
38228: GO 38268
38230: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38231: LD_ADDR_VAR 0 3
38235: PUSH
38236: LD_INT 11
38238: PUSH
38239: LD_INT 12
38241: PUSH
38242: LD_INT 13
38244: PUSH
38245: LD_INT 14
38247: PUSH
38248: LD_INT 1
38250: PUSH
38251: LD_INT 2
38253: PUSH
38254: LD_INT 3
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: ST_TO_ADDR
38266: GO 38397
38268: LD_INT 1
38270: DOUBLE
38271: EQUAL
38272: IFTRUE 38276
38274: GO 38338
38276: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38277: LD_ADDR_VAR 0 3
38281: PUSH
38282: LD_INT 11
38284: PUSH
38285: LD_INT 12
38287: PUSH
38288: LD_INT 13
38290: PUSH
38291: LD_INT 14
38293: PUSH
38294: LD_INT 1
38296: PUSH
38297: LD_INT 2
38299: PUSH
38300: LD_INT 3
38302: PUSH
38303: LD_INT 4
38305: PUSH
38306: LD_INT 5
38308: PUSH
38309: LD_INT 21
38311: PUSH
38312: LD_INT 23
38314: PUSH
38315: LD_INT 22
38317: PUSH
38318: LD_INT 24
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: ST_TO_ADDR
38336: GO 38397
38338: LD_INT 3
38340: DOUBLE
38341: EQUAL
38342: IFTRUE 38346
38344: GO 38396
38346: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38347: LD_ADDR_VAR 0 3
38351: PUSH
38352: LD_INT 13
38354: PUSH
38355: LD_INT 14
38357: PUSH
38358: LD_INT 2
38360: PUSH
38361: LD_INT 3
38363: PUSH
38364: LD_INT 4
38366: PUSH
38367: LD_INT 5
38369: PUSH
38370: LD_INT 21
38372: PUSH
38373: LD_INT 22
38375: PUSH
38376: LD_INT 23
38378: PUSH
38379: LD_INT 24
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: ST_TO_ADDR
38394: GO 38397
38396: POP
// result := ( chassis in result ) ;
38397: LD_ADDR_VAR 0 3
38401: PUSH
38402: LD_VAR 0 1
38406: PUSH
38407: LD_VAR 0 3
38411: IN
38412: ST_TO_ADDR
// end ;
38413: LD_VAR 0 3
38417: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38418: LD_INT 0
38420: PPUSH
// if not chassis or not weapon then
38421: LD_VAR 0 1
38425: NOT
38426: PUSH
38427: LD_VAR 0 2
38431: NOT
38432: OR
38433: IFFALSE 38437
// exit ;
38435: GO 39497
// case weapon of us_machine_gun :
38437: LD_VAR 0 2
38441: PUSH
38442: LD_INT 2
38444: DOUBLE
38445: EQUAL
38446: IFTRUE 38450
38448: GO 38480
38450: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38451: LD_ADDR_VAR 0 3
38455: PUSH
38456: LD_INT 1
38458: PUSH
38459: LD_INT 2
38461: PUSH
38462: LD_INT 3
38464: PUSH
38465: LD_INT 4
38467: PUSH
38468: LD_INT 5
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: ST_TO_ADDR
38478: GO 39481
38480: LD_INT 3
38482: DOUBLE
38483: EQUAL
38484: IFTRUE 38488
38486: GO 38518
38488: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38489: LD_ADDR_VAR 0 3
38493: PUSH
38494: LD_INT 1
38496: PUSH
38497: LD_INT 2
38499: PUSH
38500: LD_INT 3
38502: PUSH
38503: LD_INT 4
38505: PUSH
38506: LD_INT 5
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: ST_TO_ADDR
38516: GO 39481
38518: LD_INT 11
38520: DOUBLE
38521: EQUAL
38522: IFTRUE 38526
38524: GO 38556
38526: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38527: LD_ADDR_VAR 0 3
38531: PUSH
38532: LD_INT 1
38534: PUSH
38535: LD_INT 2
38537: PUSH
38538: LD_INT 3
38540: PUSH
38541: LD_INT 4
38543: PUSH
38544: LD_INT 5
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: ST_TO_ADDR
38554: GO 39481
38556: LD_INT 4
38558: DOUBLE
38559: EQUAL
38560: IFTRUE 38564
38562: GO 38590
38564: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38565: LD_ADDR_VAR 0 3
38569: PUSH
38570: LD_INT 2
38572: PUSH
38573: LD_INT 3
38575: PUSH
38576: LD_INT 4
38578: PUSH
38579: LD_INT 5
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: ST_TO_ADDR
38588: GO 39481
38590: LD_INT 5
38592: DOUBLE
38593: EQUAL
38594: IFTRUE 38598
38596: GO 38624
38598: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38599: LD_ADDR_VAR 0 3
38603: PUSH
38604: LD_INT 2
38606: PUSH
38607: LD_INT 3
38609: PUSH
38610: LD_INT 4
38612: PUSH
38613: LD_INT 5
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: ST_TO_ADDR
38622: GO 39481
38624: LD_INT 9
38626: DOUBLE
38627: EQUAL
38628: IFTRUE 38632
38630: GO 38658
38632: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
38633: LD_ADDR_VAR 0 3
38637: PUSH
38638: LD_INT 2
38640: PUSH
38641: LD_INT 3
38643: PUSH
38644: LD_INT 4
38646: PUSH
38647: LD_INT 5
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: ST_TO_ADDR
38656: GO 39481
38658: LD_INT 7
38660: DOUBLE
38661: EQUAL
38662: IFTRUE 38666
38664: GO 38692
38666: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
38667: LD_ADDR_VAR 0 3
38671: PUSH
38672: LD_INT 2
38674: PUSH
38675: LD_INT 3
38677: PUSH
38678: LD_INT 4
38680: PUSH
38681: LD_INT 5
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: ST_TO_ADDR
38690: GO 39481
38692: LD_INT 12
38694: DOUBLE
38695: EQUAL
38696: IFTRUE 38700
38698: GO 38726
38700: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38701: LD_ADDR_VAR 0 3
38705: PUSH
38706: LD_INT 2
38708: PUSH
38709: LD_INT 3
38711: PUSH
38712: LD_INT 4
38714: PUSH
38715: LD_INT 5
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: ST_TO_ADDR
38724: GO 39481
38726: LD_INT 13
38728: DOUBLE
38729: EQUAL
38730: IFTRUE 38734
38732: GO 38760
38734: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38735: LD_ADDR_VAR 0 3
38739: PUSH
38740: LD_INT 2
38742: PUSH
38743: LD_INT 3
38745: PUSH
38746: LD_INT 4
38748: PUSH
38749: LD_INT 5
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: ST_TO_ADDR
38758: GO 39481
38760: LD_INT 14
38762: DOUBLE
38763: EQUAL
38764: IFTRUE 38768
38766: GO 38786
38768: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38769: LD_ADDR_VAR 0 3
38773: PUSH
38774: LD_INT 4
38776: PUSH
38777: LD_INT 5
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: ST_TO_ADDR
38784: GO 39481
38786: LD_INT 6
38788: DOUBLE
38789: EQUAL
38790: IFTRUE 38794
38792: GO 38812
38794: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38795: LD_ADDR_VAR 0 3
38799: PUSH
38800: LD_INT 4
38802: PUSH
38803: LD_INT 5
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: ST_TO_ADDR
38810: GO 39481
38812: LD_INT 10
38814: DOUBLE
38815: EQUAL
38816: IFTRUE 38820
38818: GO 38838
38820: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38821: LD_ADDR_VAR 0 3
38825: PUSH
38826: LD_INT 4
38828: PUSH
38829: LD_INT 5
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: ST_TO_ADDR
38836: GO 39481
38838: LD_INT 22
38840: DOUBLE
38841: EQUAL
38842: IFTRUE 38846
38844: GO 38872
38846: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38847: LD_ADDR_VAR 0 3
38851: PUSH
38852: LD_INT 11
38854: PUSH
38855: LD_INT 12
38857: PUSH
38858: LD_INT 13
38860: PUSH
38861: LD_INT 14
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: ST_TO_ADDR
38870: GO 39481
38872: LD_INT 23
38874: DOUBLE
38875: EQUAL
38876: IFTRUE 38880
38878: GO 38906
38880: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38881: LD_ADDR_VAR 0 3
38885: PUSH
38886: LD_INT 11
38888: PUSH
38889: LD_INT 12
38891: PUSH
38892: LD_INT 13
38894: PUSH
38895: LD_INT 14
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: ST_TO_ADDR
38904: GO 39481
38906: LD_INT 24
38908: DOUBLE
38909: EQUAL
38910: IFTRUE 38914
38912: GO 38940
38914: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38915: LD_ADDR_VAR 0 3
38919: PUSH
38920: LD_INT 11
38922: PUSH
38923: LD_INT 12
38925: PUSH
38926: LD_INT 13
38928: PUSH
38929: LD_INT 14
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: ST_TO_ADDR
38938: GO 39481
38940: LD_INT 30
38942: DOUBLE
38943: EQUAL
38944: IFTRUE 38948
38946: GO 38974
38948: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38949: LD_ADDR_VAR 0 3
38953: PUSH
38954: LD_INT 11
38956: PUSH
38957: LD_INT 12
38959: PUSH
38960: LD_INT 13
38962: PUSH
38963: LD_INT 14
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: ST_TO_ADDR
38972: GO 39481
38974: LD_INT 25
38976: DOUBLE
38977: EQUAL
38978: IFTRUE 38982
38980: GO 39000
38982: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38983: LD_ADDR_VAR 0 3
38987: PUSH
38988: LD_INT 13
38990: PUSH
38991: LD_INT 14
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: ST_TO_ADDR
38998: GO 39481
39000: LD_INT 27
39002: DOUBLE
39003: EQUAL
39004: IFTRUE 39008
39006: GO 39026
39008: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39009: LD_ADDR_VAR 0 3
39013: PUSH
39014: LD_INT 13
39016: PUSH
39017: LD_INT 14
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: ST_TO_ADDR
39024: GO 39481
39026: LD_INT 92
39028: DOUBLE
39029: EQUAL
39030: IFTRUE 39034
39032: GO 39060
39034: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39035: LD_ADDR_VAR 0 3
39039: PUSH
39040: LD_INT 11
39042: PUSH
39043: LD_INT 12
39045: PUSH
39046: LD_INT 13
39048: PUSH
39049: LD_INT 14
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: ST_TO_ADDR
39058: GO 39481
39060: LD_INT 28
39062: DOUBLE
39063: EQUAL
39064: IFTRUE 39068
39066: GO 39086
39068: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39069: LD_ADDR_VAR 0 3
39073: PUSH
39074: LD_INT 13
39076: PUSH
39077: LD_INT 14
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: ST_TO_ADDR
39084: GO 39481
39086: LD_INT 29
39088: DOUBLE
39089: EQUAL
39090: IFTRUE 39094
39092: GO 39112
39094: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39095: LD_ADDR_VAR 0 3
39099: PUSH
39100: LD_INT 13
39102: PUSH
39103: LD_INT 14
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: ST_TO_ADDR
39110: GO 39481
39112: LD_INT 31
39114: DOUBLE
39115: EQUAL
39116: IFTRUE 39120
39118: GO 39138
39120: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39121: LD_ADDR_VAR 0 3
39125: PUSH
39126: LD_INT 13
39128: PUSH
39129: LD_INT 14
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: ST_TO_ADDR
39136: GO 39481
39138: LD_INT 26
39140: DOUBLE
39141: EQUAL
39142: IFTRUE 39146
39144: GO 39164
39146: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39147: LD_ADDR_VAR 0 3
39151: PUSH
39152: LD_INT 13
39154: PUSH
39155: LD_INT 14
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: ST_TO_ADDR
39162: GO 39481
39164: LD_INT 42
39166: DOUBLE
39167: EQUAL
39168: IFTRUE 39172
39170: GO 39198
39172: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39173: LD_ADDR_VAR 0 3
39177: PUSH
39178: LD_INT 21
39180: PUSH
39181: LD_INT 22
39183: PUSH
39184: LD_INT 23
39186: PUSH
39187: LD_INT 24
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: LIST
39194: LIST
39195: ST_TO_ADDR
39196: GO 39481
39198: LD_INT 43
39200: DOUBLE
39201: EQUAL
39202: IFTRUE 39206
39204: GO 39232
39206: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39207: LD_ADDR_VAR 0 3
39211: PUSH
39212: LD_INT 21
39214: PUSH
39215: LD_INT 22
39217: PUSH
39218: LD_INT 23
39220: PUSH
39221: LD_INT 24
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: ST_TO_ADDR
39230: GO 39481
39232: LD_INT 44
39234: DOUBLE
39235: EQUAL
39236: IFTRUE 39240
39238: GO 39266
39240: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39241: LD_ADDR_VAR 0 3
39245: PUSH
39246: LD_INT 21
39248: PUSH
39249: LD_INT 22
39251: PUSH
39252: LD_INT 23
39254: PUSH
39255: LD_INT 24
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: ST_TO_ADDR
39264: GO 39481
39266: LD_INT 45
39268: DOUBLE
39269: EQUAL
39270: IFTRUE 39274
39272: GO 39300
39274: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39275: LD_ADDR_VAR 0 3
39279: PUSH
39280: LD_INT 21
39282: PUSH
39283: LD_INT 22
39285: PUSH
39286: LD_INT 23
39288: PUSH
39289: LD_INT 24
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: ST_TO_ADDR
39298: GO 39481
39300: LD_INT 49
39302: DOUBLE
39303: EQUAL
39304: IFTRUE 39308
39306: GO 39334
39308: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39309: LD_ADDR_VAR 0 3
39313: PUSH
39314: LD_INT 21
39316: PUSH
39317: LD_INT 22
39319: PUSH
39320: LD_INT 23
39322: PUSH
39323: LD_INT 24
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: ST_TO_ADDR
39332: GO 39481
39334: LD_INT 51
39336: DOUBLE
39337: EQUAL
39338: IFTRUE 39342
39340: GO 39368
39342: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39343: LD_ADDR_VAR 0 3
39347: PUSH
39348: LD_INT 21
39350: PUSH
39351: LD_INT 22
39353: PUSH
39354: LD_INT 23
39356: PUSH
39357: LD_INT 24
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: ST_TO_ADDR
39366: GO 39481
39368: LD_INT 52
39370: DOUBLE
39371: EQUAL
39372: IFTRUE 39376
39374: GO 39402
39376: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39377: LD_ADDR_VAR 0 3
39381: PUSH
39382: LD_INT 21
39384: PUSH
39385: LD_INT 22
39387: PUSH
39388: LD_INT 23
39390: PUSH
39391: LD_INT 24
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: ST_TO_ADDR
39400: GO 39481
39402: LD_INT 53
39404: DOUBLE
39405: EQUAL
39406: IFTRUE 39410
39408: GO 39428
39410: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39411: LD_ADDR_VAR 0 3
39415: PUSH
39416: LD_INT 23
39418: PUSH
39419: LD_INT 24
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: ST_TO_ADDR
39426: GO 39481
39428: LD_INT 46
39430: DOUBLE
39431: EQUAL
39432: IFTRUE 39436
39434: GO 39454
39436: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39437: LD_ADDR_VAR 0 3
39441: PUSH
39442: LD_INT 23
39444: PUSH
39445: LD_INT 24
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: ST_TO_ADDR
39452: GO 39481
39454: LD_INT 47
39456: DOUBLE
39457: EQUAL
39458: IFTRUE 39462
39460: GO 39480
39462: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39463: LD_ADDR_VAR 0 3
39467: PUSH
39468: LD_INT 23
39470: PUSH
39471: LD_INT 24
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: ST_TO_ADDR
39478: GO 39481
39480: POP
// result := ( chassis in result ) ;
39481: LD_ADDR_VAR 0 3
39485: PUSH
39486: LD_VAR 0 1
39490: PUSH
39491: LD_VAR 0 3
39495: IN
39496: ST_TO_ADDR
// end ;
39497: LD_VAR 0 3
39501: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39502: LD_INT 0
39504: PPUSH
39505: PPUSH
39506: PPUSH
39507: PPUSH
39508: PPUSH
39509: PPUSH
39510: PPUSH
// result := array ;
39511: LD_ADDR_VAR 0 5
39515: PUSH
39516: LD_VAR 0 1
39520: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39521: LD_VAR 0 1
39525: NOT
39526: PUSH
39527: LD_VAR 0 2
39531: NOT
39532: OR
39533: PUSH
39534: LD_VAR 0 3
39538: NOT
39539: OR
39540: PUSH
39541: LD_VAR 0 2
39545: PUSH
39546: LD_VAR 0 1
39550: GREATER
39551: OR
39552: PUSH
39553: LD_VAR 0 3
39557: PUSH
39558: LD_VAR 0 1
39562: GREATER
39563: OR
39564: IFFALSE 39568
// exit ;
39566: GO 39864
// if direction then
39568: LD_VAR 0 4
39572: IFFALSE 39636
// begin d := 1 ;
39574: LD_ADDR_VAR 0 9
39578: PUSH
39579: LD_INT 1
39581: ST_TO_ADDR
// if i_from > i_to then
39582: LD_VAR 0 2
39586: PUSH
39587: LD_VAR 0 3
39591: GREATER
39592: IFFALSE 39618
// length := ( array - i_from ) + i_to else
39594: LD_ADDR_VAR 0 11
39598: PUSH
39599: LD_VAR 0 1
39603: PUSH
39604: LD_VAR 0 2
39608: MINUS
39609: PUSH
39610: LD_VAR 0 3
39614: PLUS
39615: ST_TO_ADDR
39616: GO 39634
// length := i_to - i_from ;
39618: LD_ADDR_VAR 0 11
39622: PUSH
39623: LD_VAR 0 3
39627: PUSH
39628: LD_VAR 0 2
39632: MINUS
39633: ST_TO_ADDR
// end else
39634: GO 39697
// begin d := - 1 ;
39636: LD_ADDR_VAR 0 9
39640: PUSH
39641: LD_INT 1
39643: NEG
39644: ST_TO_ADDR
// if i_from > i_to then
39645: LD_VAR 0 2
39649: PUSH
39650: LD_VAR 0 3
39654: GREATER
39655: IFFALSE 39675
// length := i_from - i_to else
39657: LD_ADDR_VAR 0 11
39661: PUSH
39662: LD_VAR 0 2
39666: PUSH
39667: LD_VAR 0 3
39671: MINUS
39672: ST_TO_ADDR
39673: GO 39697
// length := ( array - i_to ) + i_from ;
39675: LD_ADDR_VAR 0 11
39679: PUSH
39680: LD_VAR 0 1
39684: PUSH
39685: LD_VAR 0 3
39689: MINUS
39690: PUSH
39691: LD_VAR 0 2
39695: PLUS
39696: ST_TO_ADDR
// end ; if not length then
39697: LD_VAR 0 11
39701: NOT
39702: IFFALSE 39706
// exit ;
39704: GO 39864
// tmp := array ;
39706: LD_ADDR_VAR 0 10
39710: PUSH
39711: LD_VAR 0 1
39715: ST_TO_ADDR
// for i = 1 to length do
39716: LD_ADDR_VAR 0 6
39720: PUSH
39721: DOUBLE
39722: LD_INT 1
39724: DEC
39725: ST_TO_ADDR
39726: LD_VAR 0 11
39730: PUSH
39731: FOR_TO
39732: IFFALSE 39852
// begin for j = 1 to array do
39734: LD_ADDR_VAR 0 7
39738: PUSH
39739: DOUBLE
39740: LD_INT 1
39742: DEC
39743: ST_TO_ADDR
39744: LD_VAR 0 1
39748: PUSH
39749: FOR_TO
39750: IFFALSE 39838
// begin k := j + d ;
39752: LD_ADDR_VAR 0 8
39756: PUSH
39757: LD_VAR 0 7
39761: PUSH
39762: LD_VAR 0 9
39766: PLUS
39767: ST_TO_ADDR
// if k > array then
39768: LD_VAR 0 8
39772: PUSH
39773: LD_VAR 0 1
39777: GREATER
39778: IFFALSE 39788
// k := 1 ;
39780: LD_ADDR_VAR 0 8
39784: PUSH
39785: LD_INT 1
39787: ST_TO_ADDR
// if not k then
39788: LD_VAR 0 8
39792: NOT
39793: IFFALSE 39805
// k := array ;
39795: LD_ADDR_VAR 0 8
39799: PUSH
39800: LD_VAR 0 1
39804: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39805: LD_ADDR_VAR 0 10
39809: PUSH
39810: LD_VAR 0 10
39814: PPUSH
39815: LD_VAR 0 8
39819: PPUSH
39820: LD_VAR 0 1
39824: PUSH
39825: LD_VAR 0 7
39829: ARRAY
39830: PPUSH
39831: CALL_OW 1
39835: ST_TO_ADDR
// end ;
39836: GO 39749
39838: POP
39839: POP
// array := tmp ;
39840: LD_ADDR_VAR 0 1
39844: PUSH
39845: LD_VAR 0 10
39849: ST_TO_ADDR
// end ;
39850: GO 39731
39852: POP
39853: POP
// result := array ;
39854: LD_ADDR_VAR 0 5
39858: PUSH
39859: LD_VAR 0 1
39863: ST_TO_ADDR
// end ;
39864: LD_VAR 0 5
39868: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39869: LD_INT 0
39871: PPUSH
39872: PPUSH
// result := 0 ;
39873: LD_ADDR_VAR 0 3
39877: PUSH
39878: LD_INT 0
39880: ST_TO_ADDR
// if not array or not value in array then
39881: LD_VAR 0 1
39885: NOT
39886: PUSH
39887: LD_VAR 0 2
39891: PUSH
39892: LD_VAR 0 1
39896: IN
39897: NOT
39898: OR
39899: IFFALSE 39903
// exit ;
39901: GO 39957
// for i = 1 to array do
39903: LD_ADDR_VAR 0 4
39907: PUSH
39908: DOUBLE
39909: LD_INT 1
39911: DEC
39912: ST_TO_ADDR
39913: LD_VAR 0 1
39917: PUSH
39918: FOR_TO
39919: IFFALSE 39955
// if value = array [ i ] then
39921: LD_VAR 0 2
39925: PUSH
39926: LD_VAR 0 1
39930: PUSH
39931: LD_VAR 0 4
39935: ARRAY
39936: EQUAL
39937: IFFALSE 39953
// begin result := i ;
39939: LD_ADDR_VAR 0 3
39943: PUSH
39944: LD_VAR 0 4
39948: ST_TO_ADDR
// exit ;
39949: POP
39950: POP
39951: GO 39957
// end ;
39953: GO 39918
39955: POP
39956: POP
// end ;
39957: LD_VAR 0 3
39961: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39962: LD_INT 0
39964: PPUSH
// vc_chassis := chassis ;
39965: LD_ADDR_OWVAR 37
39969: PUSH
39970: LD_VAR 0 1
39974: ST_TO_ADDR
// vc_engine := engine ;
39975: LD_ADDR_OWVAR 39
39979: PUSH
39980: LD_VAR 0 2
39984: ST_TO_ADDR
// vc_control := control ;
39985: LD_ADDR_OWVAR 38
39989: PUSH
39990: LD_VAR 0 3
39994: ST_TO_ADDR
// vc_weapon := weapon ;
39995: LD_ADDR_OWVAR 40
39999: PUSH
40000: LD_VAR 0 4
40004: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40005: LD_ADDR_OWVAR 41
40009: PUSH
40010: LD_VAR 0 5
40014: ST_TO_ADDR
// end ;
40015: LD_VAR 0 6
40019: RET
// export function WantPlant ( unit ) ; var task ; begin
40020: LD_INT 0
40022: PPUSH
40023: PPUSH
// result := false ;
40024: LD_ADDR_VAR 0 2
40028: PUSH
40029: LD_INT 0
40031: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40032: LD_ADDR_VAR 0 3
40036: PUSH
40037: LD_VAR 0 1
40041: PPUSH
40042: CALL_OW 437
40046: ST_TO_ADDR
// if task then
40047: LD_VAR 0 3
40051: IFFALSE 40079
// if task [ 1 ] [ 1 ] = p then
40053: LD_VAR 0 3
40057: PUSH
40058: LD_INT 1
40060: ARRAY
40061: PUSH
40062: LD_INT 1
40064: ARRAY
40065: PUSH
40066: LD_STRING p
40068: EQUAL
40069: IFFALSE 40079
// result := true ;
40071: LD_ADDR_VAR 0 2
40075: PUSH
40076: LD_INT 1
40078: ST_TO_ADDR
// end ;
40079: LD_VAR 0 2
40083: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40084: LD_INT 0
40086: PPUSH
40087: PPUSH
40088: PPUSH
40089: PPUSH
// if pos < 1 then
40090: LD_VAR 0 2
40094: PUSH
40095: LD_INT 1
40097: LESS
40098: IFFALSE 40102
// exit ;
40100: GO 40405
// if pos = 1 then
40102: LD_VAR 0 2
40106: PUSH
40107: LD_INT 1
40109: EQUAL
40110: IFFALSE 40143
// result := Replace ( arr , pos [ 1 ] , value ) else
40112: LD_ADDR_VAR 0 4
40116: PUSH
40117: LD_VAR 0 1
40121: PPUSH
40122: LD_VAR 0 2
40126: PUSH
40127: LD_INT 1
40129: ARRAY
40130: PPUSH
40131: LD_VAR 0 3
40135: PPUSH
40136: CALL_OW 1
40140: ST_TO_ADDR
40141: GO 40405
// begin tmp := arr ;
40143: LD_ADDR_VAR 0 6
40147: PUSH
40148: LD_VAR 0 1
40152: ST_TO_ADDR
// s_arr := [ tmp ] ;
40153: LD_ADDR_VAR 0 7
40157: PUSH
40158: LD_VAR 0 6
40162: PUSH
40163: EMPTY
40164: LIST
40165: ST_TO_ADDR
// for i = 1 to pos - 1 do
40166: LD_ADDR_VAR 0 5
40170: PUSH
40171: DOUBLE
40172: LD_INT 1
40174: DEC
40175: ST_TO_ADDR
40176: LD_VAR 0 2
40180: PUSH
40181: LD_INT 1
40183: MINUS
40184: PUSH
40185: FOR_TO
40186: IFFALSE 40231
// begin tmp := tmp [ pos [ i ] ] ;
40188: LD_ADDR_VAR 0 6
40192: PUSH
40193: LD_VAR 0 6
40197: PUSH
40198: LD_VAR 0 2
40202: PUSH
40203: LD_VAR 0 5
40207: ARRAY
40208: ARRAY
40209: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40210: LD_ADDR_VAR 0 7
40214: PUSH
40215: LD_VAR 0 7
40219: PUSH
40220: LD_VAR 0 6
40224: PUSH
40225: EMPTY
40226: LIST
40227: ADD
40228: ST_TO_ADDR
// end ;
40229: GO 40185
40231: POP
40232: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40233: LD_ADDR_VAR 0 6
40237: PUSH
40238: LD_VAR 0 6
40242: PPUSH
40243: LD_VAR 0 2
40247: PUSH
40248: LD_VAR 0 2
40252: ARRAY
40253: PPUSH
40254: LD_VAR 0 3
40258: PPUSH
40259: CALL_OW 1
40263: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40264: LD_ADDR_VAR 0 7
40268: PUSH
40269: LD_VAR 0 7
40273: PPUSH
40274: LD_VAR 0 7
40278: PPUSH
40279: LD_VAR 0 6
40283: PPUSH
40284: CALL_OW 1
40288: ST_TO_ADDR
// for i = s_arr downto 2 do
40289: LD_ADDR_VAR 0 5
40293: PUSH
40294: DOUBLE
40295: LD_VAR 0 7
40299: INC
40300: ST_TO_ADDR
40301: LD_INT 2
40303: PUSH
40304: FOR_DOWNTO
40305: IFFALSE 40389
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40307: LD_ADDR_VAR 0 6
40311: PUSH
40312: LD_VAR 0 7
40316: PUSH
40317: LD_VAR 0 5
40321: PUSH
40322: LD_INT 1
40324: MINUS
40325: ARRAY
40326: PPUSH
40327: LD_VAR 0 2
40331: PUSH
40332: LD_VAR 0 5
40336: PUSH
40337: LD_INT 1
40339: MINUS
40340: ARRAY
40341: PPUSH
40342: LD_VAR 0 7
40346: PUSH
40347: LD_VAR 0 5
40351: ARRAY
40352: PPUSH
40353: CALL_OW 1
40357: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40358: LD_ADDR_VAR 0 7
40362: PUSH
40363: LD_VAR 0 7
40367: PPUSH
40368: LD_VAR 0 5
40372: PUSH
40373: LD_INT 1
40375: MINUS
40376: PPUSH
40377: LD_VAR 0 6
40381: PPUSH
40382: CALL_OW 1
40386: ST_TO_ADDR
// end ;
40387: GO 40304
40389: POP
40390: POP
// result := s_arr [ 1 ] ;
40391: LD_ADDR_VAR 0 4
40395: PUSH
40396: LD_VAR 0 7
40400: PUSH
40401: LD_INT 1
40403: ARRAY
40404: ST_TO_ADDR
// end ; end ;
40405: LD_VAR 0 4
40409: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40410: LD_INT 0
40412: PPUSH
40413: PPUSH
// if not list then
40414: LD_VAR 0 1
40418: NOT
40419: IFFALSE 40423
// exit ;
40421: GO 40514
// i := list [ pos1 ] ;
40423: LD_ADDR_VAR 0 5
40427: PUSH
40428: LD_VAR 0 1
40432: PUSH
40433: LD_VAR 0 2
40437: ARRAY
40438: ST_TO_ADDR
// if not i then
40439: LD_VAR 0 5
40443: NOT
40444: IFFALSE 40448
// exit ;
40446: GO 40514
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40448: LD_ADDR_VAR 0 1
40452: PUSH
40453: LD_VAR 0 1
40457: PPUSH
40458: LD_VAR 0 2
40462: PPUSH
40463: LD_VAR 0 1
40467: PUSH
40468: LD_VAR 0 3
40472: ARRAY
40473: PPUSH
40474: CALL_OW 1
40478: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40479: LD_ADDR_VAR 0 1
40483: PUSH
40484: LD_VAR 0 1
40488: PPUSH
40489: LD_VAR 0 3
40493: PPUSH
40494: LD_VAR 0 5
40498: PPUSH
40499: CALL_OW 1
40503: ST_TO_ADDR
// result := list ;
40504: LD_ADDR_VAR 0 4
40508: PUSH
40509: LD_VAR 0 1
40513: ST_TO_ADDR
// end ;
40514: LD_VAR 0 4
40518: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40519: LD_INT 0
40521: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40522: LD_ADDR_VAR 0 5
40526: PUSH
40527: LD_VAR 0 1
40531: PPUSH
40532: CALL_OW 250
40536: PPUSH
40537: LD_VAR 0 1
40541: PPUSH
40542: CALL_OW 251
40546: PPUSH
40547: LD_VAR 0 2
40551: PPUSH
40552: LD_VAR 0 3
40556: PPUSH
40557: LD_VAR 0 4
40561: PPUSH
40562: CALL 40572 0 5
40566: ST_TO_ADDR
// end ;
40567: LD_VAR 0 5
40571: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40572: LD_INT 0
40574: PPUSH
40575: PPUSH
40576: PPUSH
40577: PPUSH
// if not list then
40578: LD_VAR 0 3
40582: NOT
40583: IFFALSE 40587
// exit ;
40585: GO 40975
// result := [ ] ;
40587: LD_ADDR_VAR 0 6
40591: PUSH
40592: EMPTY
40593: ST_TO_ADDR
// for i in list do
40594: LD_ADDR_VAR 0 7
40598: PUSH
40599: LD_VAR 0 3
40603: PUSH
40604: FOR_IN
40605: IFFALSE 40807
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40607: LD_ADDR_VAR 0 9
40611: PUSH
40612: LD_VAR 0 7
40616: PPUSH
40617: LD_VAR 0 1
40621: PPUSH
40622: LD_VAR 0 2
40626: PPUSH
40627: CALL_OW 297
40631: ST_TO_ADDR
// if not result then
40632: LD_VAR 0 6
40636: NOT
40637: IFFALSE 40663
// result := [ [ i , tmp ] ] else
40639: LD_ADDR_VAR 0 6
40643: PUSH
40644: LD_VAR 0 7
40648: PUSH
40649: LD_VAR 0 9
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: EMPTY
40659: LIST
40660: ST_TO_ADDR
40661: GO 40805
// begin if result [ result ] [ 2 ] < tmp then
40663: LD_VAR 0 6
40667: PUSH
40668: LD_VAR 0 6
40672: ARRAY
40673: PUSH
40674: LD_INT 2
40676: ARRAY
40677: PUSH
40678: LD_VAR 0 9
40682: LESS
40683: IFFALSE 40725
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40685: LD_ADDR_VAR 0 6
40689: PUSH
40690: LD_VAR 0 6
40694: PPUSH
40695: LD_VAR 0 6
40699: PUSH
40700: LD_INT 1
40702: PLUS
40703: PPUSH
40704: LD_VAR 0 7
40708: PUSH
40709: LD_VAR 0 9
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PPUSH
40718: CALL_OW 2
40722: ST_TO_ADDR
40723: GO 40805
// for j = 1 to result do
40725: LD_ADDR_VAR 0 8
40729: PUSH
40730: DOUBLE
40731: LD_INT 1
40733: DEC
40734: ST_TO_ADDR
40735: LD_VAR 0 6
40739: PUSH
40740: FOR_TO
40741: IFFALSE 40803
// begin if tmp < result [ j ] [ 2 ] then
40743: LD_VAR 0 9
40747: PUSH
40748: LD_VAR 0 6
40752: PUSH
40753: LD_VAR 0 8
40757: ARRAY
40758: PUSH
40759: LD_INT 2
40761: ARRAY
40762: LESS
40763: IFFALSE 40801
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40765: LD_ADDR_VAR 0 6
40769: PUSH
40770: LD_VAR 0 6
40774: PPUSH
40775: LD_VAR 0 8
40779: PPUSH
40780: LD_VAR 0 7
40784: PUSH
40785: LD_VAR 0 9
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PPUSH
40794: CALL_OW 2
40798: ST_TO_ADDR
// break ;
40799: GO 40803
// end ; end ;
40801: GO 40740
40803: POP
40804: POP
// end ; end ;
40805: GO 40604
40807: POP
40808: POP
// if result and not asc then
40809: LD_VAR 0 6
40813: PUSH
40814: LD_VAR 0 4
40818: NOT
40819: AND
40820: IFFALSE 40895
// begin tmp := result ;
40822: LD_ADDR_VAR 0 9
40826: PUSH
40827: LD_VAR 0 6
40831: ST_TO_ADDR
// for i = tmp downto 1 do
40832: LD_ADDR_VAR 0 7
40836: PUSH
40837: DOUBLE
40838: LD_VAR 0 9
40842: INC
40843: ST_TO_ADDR
40844: LD_INT 1
40846: PUSH
40847: FOR_DOWNTO
40848: IFFALSE 40893
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40850: LD_ADDR_VAR 0 6
40854: PUSH
40855: LD_VAR 0 6
40859: PPUSH
40860: LD_VAR 0 9
40864: PUSH
40865: LD_VAR 0 7
40869: MINUS
40870: PUSH
40871: LD_INT 1
40873: PLUS
40874: PPUSH
40875: LD_VAR 0 9
40879: PUSH
40880: LD_VAR 0 7
40884: ARRAY
40885: PPUSH
40886: CALL_OW 1
40890: ST_TO_ADDR
40891: GO 40847
40893: POP
40894: POP
// end ; tmp := [ ] ;
40895: LD_ADDR_VAR 0 9
40899: PUSH
40900: EMPTY
40901: ST_TO_ADDR
// if mode then
40902: LD_VAR 0 5
40906: IFFALSE 40975
// begin for i = 1 to result do
40908: LD_ADDR_VAR 0 7
40912: PUSH
40913: DOUBLE
40914: LD_INT 1
40916: DEC
40917: ST_TO_ADDR
40918: LD_VAR 0 6
40922: PUSH
40923: FOR_TO
40924: IFFALSE 40963
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40926: LD_ADDR_VAR 0 9
40930: PUSH
40931: LD_VAR 0 9
40935: PPUSH
40936: LD_VAR 0 7
40940: PPUSH
40941: LD_VAR 0 6
40945: PUSH
40946: LD_VAR 0 7
40950: ARRAY
40951: PUSH
40952: LD_INT 1
40954: ARRAY
40955: PPUSH
40956: CALL_OW 1
40960: ST_TO_ADDR
40961: GO 40923
40963: POP
40964: POP
// result := tmp ;
40965: LD_ADDR_VAR 0 6
40969: PUSH
40970: LD_VAR 0 9
40974: ST_TO_ADDR
// end ; end ;
40975: LD_VAR 0 6
40979: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40980: LD_INT 0
40982: PPUSH
40983: PPUSH
40984: PPUSH
40985: PPUSH
40986: PPUSH
40987: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40988: LD_ADDR_VAR 0 5
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: EMPTY
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: ST_TO_ADDR
// if not x or not y then
41010: LD_VAR 0 2
41014: NOT
41015: PUSH
41016: LD_VAR 0 3
41020: NOT
41021: OR
41022: IFFALSE 41026
// exit ;
41024: GO 42676
// if not range then
41026: LD_VAR 0 4
41030: NOT
41031: IFFALSE 41041
// range := 10 ;
41033: LD_ADDR_VAR 0 4
41037: PUSH
41038: LD_INT 10
41040: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41041: LD_ADDR_VAR 0 8
41045: PUSH
41046: LD_INT 81
41048: PUSH
41049: LD_VAR 0 1
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 92
41060: PUSH
41061: LD_VAR 0 2
41065: PUSH
41066: LD_VAR 0 3
41070: PUSH
41071: LD_VAR 0 4
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 3
41084: PUSH
41085: LD_INT 21
41087: PUSH
41088: LD_INT 3
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: LIST
41103: PPUSH
41104: CALL_OW 69
41108: ST_TO_ADDR
// if not tmp then
41109: LD_VAR 0 8
41113: NOT
41114: IFFALSE 41118
// exit ;
41116: GO 42676
// for i in tmp do
41118: LD_ADDR_VAR 0 6
41122: PUSH
41123: LD_VAR 0 8
41127: PUSH
41128: FOR_IN
41129: IFFALSE 42651
// begin points := [ 0 , 0 , 0 ] ;
41131: LD_ADDR_VAR 0 9
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: LIST
41149: ST_TO_ADDR
// bpoints := 1 ;
41150: LD_ADDR_VAR 0 10
41154: PUSH
41155: LD_INT 1
41157: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41158: LD_VAR 0 6
41162: PPUSH
41163: CALL_OW 247
41167: PUSH
41168: LD_INT 1
41170: DOUBLE
41171: EQUAL
41172: IFTRUE 41176
41174: GO 41754
41176: POP
// begin if GetClass ( i ) = 1 then
41177: LD_VAR 0 6
41181: PPUSH
41182: CALL_OW 257
41186: PUSH
41187: LD_INT 1
41189: EQUAL
41190: IFFALSE 41211
// points := [ 10 , 5 , 3 ] ;
41192: LD_ADDR_VAR 0 9
41196: PUSH
41197: LD_INT 10
41199: PUSH
41200: LD_INT 5
41202: PUSH
41203: LD_INT 3
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: LIST
41210: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41211: LD_VAR 0 6
41215: PPUSH
41216: CALL_OW 257
41220: PUSH
41221: LD_INT 2
41223: PUSH
41224: LD_INT 3
41226: PUSH
41227: LD_INT 4
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: LIST
41234: IN
41235: IFFALSE 41256
// points := [ 3 , 2 , 1 ] ;
41237: LD_ADDR_VAR 0 9
41241: PUSH
41242: LD_INT 3
41244: PUSH
41245: LD_INT 2
41247: PUSH
41248: LD_INT 1
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: LIST
41255: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41256: LD_VAR 0 6
41260: PPUSH
41261: CALL_OW 257
41265: PUSH
41266: LD_INT 5
41268: EQUAL
41269: IFFALSE 41290
// points := [ 130 , 5 , 2 ] ;
41271: LD_ADDR_VAR 0 9
41275: PUSH
41276: LD_INT 130
41278: PUSH
41279: LD_INT 5
41281: PUSH
41282: LD_INT 2
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: LIST
41289: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41290: LD_VAR 0 6
41294: PPUSH
41295: CALL_OW 257
41299: PUSH
41300: LD_INT 8
41302: EQUAL
41303: IFFALSE 41324
// points := [ 35 , 35 , 30 ] ;
41305: LD_ADDR_VAR 0 9
41309: PUSH
41310: LD_INT 35
41312: PUSH
41313: LD_INT 35
41315: PUSH
41316: LD_INT 30
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: LIST
41323: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41324: LD_VAR 0 6
41328: PPUSH
41329: CALL_OW 257
41333: PUSH
41334: LD_INT 9
41336: EQUAL
41337: IFFALSE 41358
// points := [ 20 , 55 , 40 ] ;
41339: LD_ADDR_VAR 0 9
41343: PUSH
41344: LD_INT 20
41346: PUSH
41347: LD_INT 55
41349: PUSH
41350: LD_INT 40
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: LIST
41357: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41358: LD_VAR 0 6
41362: PPUSH
41363: CALL_OW 257
41367: PUSH
41368: LD_INT 12
41370: PUSH
41371: LD_INT 16
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: IN
41378: IFFALSE 41399
// points := [ 5 , 3 , 2 ] ;
41380: LD_ADDR_VAR 0 9
41384: PUSH
41385: LD_INT 5
41387: PUSH
41388: LD_INT 3
41390: PUSH
41391: LD_INT 2
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: LIST
41398: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41399: LD_VAR 0 6
41403: PPUSH
41404: CALL_OW 257
41408: PUSH
41409: LD_INT 17
41411: EQUAL
41412: IFFALSE 41433
// points := [ 100 , 50 , 75 ] ;
41414: LD_ADDR_VAR 0 9
41418: PUSH
41419: LD_INT 100
41421: PUSH
41422: LD_INT 50
41424: PUSH
41425: LD_INT 75
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: LIST
41432: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41433: LD_VAR 0 6
41437: PPUSH
41438: CALL_OW 257
41442: PUSH
41443: LD_INT 15
41445: EQUAL
41446: IFFALSE 41467
// points := [ 10 , 5 , 3 ] ;
41448: LD_ADDR_VAR 0 9
41452: PUSH
41453: LD_INT 10
41455: PUSH
41456: LD_INT 5
41458: PUSH
41459: LD_INT 3
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: LIST
41466: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41467: LD_VAR 0 6
41471: PPUSH
41472: CALL_OW 257
41476: PUSH
41477: LD_INT 14
41479: EQUAL
41480: IFFALSE 41501
// points := [ 10 , 0 , 0 ] ;
41482: LD_ADDR_VAR 0 9
41486: PUSH
41487: LD_INT 10
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: LIST
41500: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41501: LD_VAR 0 6
41505: PPUSH
41506: CALL_OW 257
41510: PUSH
41511: LD_INT 11
41513: EQUAL
41514: IFFALSE 41535
// points := [ 30 , 10 , 5 ] ;
41516: LD_ADDR_VAR 0 9
41520: PUSH
41521: LD_INT 30
41523: PUSH
41524: LD_INT 10
41526: PUSH
41527: LD_INT 5
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: LIST
41534: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41535: LD_VAR 0 1
41539: PPUSH
41540: LD_INT 5
41542: PPUSH
41543: CALL_OW 321
41547: PUSH
41548: LD_INT 2
41550: EQUAL
41551: IFFALSE 41568
// bpoints := bpoints * 1.8 ;
41553: LD_ADDR_VAR 0 10
41557: PUSH
41558: LD_VAR 0 10
41562: PUSH
41563: LD_REAL  1.80000000000000E+0000
41566: MUL
41567: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41568: LD_VAR 0 6
41572: PPUSH
41573: CALL_OW 257
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: LD_INT 2
41583: PUSH
41584: LD_INT 3
41586: PUSH
41587: LD_INT 4
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: IN
41596: PUSH
41597: LD_VAR 0 1
41601: PPUSH
41602: LD_INT 51
41604: PPUSH
41605: CALL_OW 321
41609: PUSH
41610: LD_INT 2
41612: EQUAL
41613: AND
41614: IFFALSE 41631
// bpoints := bpoints * 1.2 ;
41616: LD_ADDR_VAR 0 10
41620: PUSH
41621: LD_VAR 0 10
41625: PUSH
41626: LD_REAL  1.20000000000000E+0000
41629: MUL
41630: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
41631: LD_VAR 0 6
41635: PPUSH
41636: CALL_OW 257
41640: PUSH
41641: LD_INT 5
41643: PUSH
41644: LD_INT 7
41646: PUSH
41647: LD_INT 9
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: LIST
41654: IN
41655: PUSH
41656: LD_VAR 0 1
41660: PPUSH
41661: LD_INT 52
41663: PPUSH
41664: CALL_OW 321
41668: PUSH
41669: LD_INT 2
41671: EQUAL
41672: AND
41673: IFFALSE 41690
// bpoints := bpoints * 1.5 ;
41675: LD_ADDR_VAR 0 10
41679: PUSH
41680: LD_VAR 0 10
41684: PUSH
41685: LD_REAL  1.50000000000000E+0000
41688: MUL
41689: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41690: LD_VAR 0 1
41694: PPUSH
41695: LD_INT 66
41697: PPUSH
41698: CALL_OW 321
41702: PUSH
41703: LD_INT 2
41705: EQUAL
41706: IFFALSE 41723
// bpoints := bpoints * 1.1 ;
41708: LD_ADDR_VAR 0 10
41712: PUSH
41713: LD_VAR 0 10
41717: PUSH
41718: LD_REAL  1.10000000000000E+0000
41721: MUL
41722: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41723: LD_ADDR_VAR 0 10
41727: PUSH
41728: LD_VAR 0 10
41732: PUSH
41733: LD_VAR 0 6
41737: PPUSH
41738: LD_INT 1
41740: PPUSH
41741: CALL_OW 259
41745: PUSH
41746: LD_REAL  1.15000000000000E+0000
41749: MUL
41750: MUL
41751: ST_TO_ADDR
// end ; unit_vehicle :
41752: GO 42580
41754: LD_INT 2
41756: DOUBLE
41757: EQUAL
41758: IFTRUE 41762
41760: GO 42568
41762: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41763: LD_VAR 0 6
41767: PPUSH
41768: CALL_OW 264
41772: PUSH
41773: LD_INT 2
41775: PUSH
41776: LD_INT 42
41778: PUSH
41779: LD_INT 24
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: LIST
41786: IN
41787: IFFALSE 41808
// points := [ 25 , 5 , 3 ] ;
41789: LD_ADDR_VAR 0 9
41793: PUSH
41794: LD_INT 25
41796: PUSH
41797: LD_INT 5
41799: PUSH
41800: LD_INT 3
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: LIST
41807: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41808: LD_VAR 0 6
41812: PPUSH
41813: CALL_OW 264
41817: PUSH
41818: LD_INT 4
41820: PUSH
41821: LD_INT 43
41823: PUSH
41824: LD_INT 25
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: LIST
41831: IN
41832: IFFALSE 41853
// points := [ 40 , 15 , 5 ] ;
41834: LD_ADDR_VAR 0 9
41838: PUSH
41839: LD_INT 40
41841: PUSH
41842: LD_INT 15
41844: PUSH
41845: LD_INT 5
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: LIST
41852: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41853: LD_VAR 0 6
41857: PPUSH
41858: CALL_OW 264
41862: PUSH
41863: LD_INT 3
41865: PUSH
41866: LD_INT 23
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: IN
41873: IFFALSE 41894
// points := [ 7 , 25 , 8 ] ;
41875: LD_ADDR_VAR 0 9
41879: PUSH
41880: LD_INT 7
41882: PUSH
41883: LD_INT 25
41885: PUSH
41886: LD_INT 8
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: LIST
41893: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41894: LD_VAR 0 6
41898: PPUSH
41899: CALL_OW 264
41903: PUSH
41904: LD_INT 5
41906: PUSH
41907: LD_INT 27
41909: PUSH
41910: LD_INT 44
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: LIST
41917: IN
41918: IFFALSE 41939
// points := [ 14 , 50 , 16 ] ;
41920: LD_ADDR_VAR 0 9
41924: PUSH
41925: LD_INT 14
41927: PUSH
41928: LD_INT 50
41930: PUSH
41931: LD_INT 16
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: LIST
41938: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41939: LD_VAR 0 6
41943: PPUSH
41944: CALL_OW 264
41948: PUSH
41949: LD_INT 6
41951: PUSH
41952: LD_INT 46
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: IN
41959: IFFALSE 41980
// points := [ 32 , 120 , 70 ] ;
41961: LD_ADDR_VAR 0 9
41965: PUSH
41966: LD_INT 32
41968: PUSH
41969: LD_INT 120
41971: PUSH
41972: LD_INT 70
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: LIST
41979: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41980: LD_VAR 0 6
41984: PPUSH
41985: CALL_OW 264
41989: PUSH
41990: LD_INT 7
41992: PUSH
41993: LD_INT 28
41995: PUSH
41996: LD_INT 45
41998: PUSH
41999: LD_INT 92
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: IN
42008: IFFALSE 42029
// points := [ 35 , 20 , 45 ] ;
42010: LD_ADDR_VAR 0 9
42014: PUSH
42015: LD_INT 35
42017: PUSH
42018: LD_INT 20
42020: PUSH
42021: LD_INT 45
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: LIST
42028: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42029: LD_VAR 0 6
42033: PPUSH
42034: CALL_OW 264
42038: PUSH
42039: LD_INT 47
42041: PUSH
42042: EMPTY
42043: LIST
42044: IN
42045: IFFALSE 42066
// points := [ 67 , 45 , 75 ] ;
42047: LD_ADDR_VAR 0 9
42051: PUSH
42052: LD_INT 67
42054: PUSH
42055: LD_INT 45
42057: PUSH
42058: LD_INT 75
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: LIST
42065: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42066: LD_VAR 0 6
42070: PPUSH
42071: CALL_OW 264
42075: PUSH
42076: LD_INT 26
42078: PUSH
42079: EMPTY
42080: LIST
42081: IN
42082: IFFALSE 42103
// points := [ 120 , 30 , 80 ] ;
42084: LD_ADDR_VAR 0 9
42088: PUSH
42089: LD_INT 120
42091: PUSH
42092: LD_INT 30
42094: PUSH
42095: LD_INT 80
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: LIST
42102: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42103: LD_VAR 0 6
42107: PPUSH
42108: CALL_OW 264
42112: PUSH
42113: LD_INT 22
42115: PUSH
42116: EMPTY
42117: LIST
42118: IN
42119: IFFALSE 42140
// points := [ 40 , 1 , 1 ] ;
42121: LD_ADDR_VAR 0 9
42125: PUSH
42126: LD_INT 40
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: LD_INT 1
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: LIST
42139: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42140: LD_VAR 0 6
42144: PPUSH
42145: CALL_OW 264
42149: PUSH
42150: LD_INT 29
42152: PUSH
42153: EMPTY
42154: LIST
42155: IN
42156: IFFALSE 42177
// points := [ 70 , 200 , 400 ] ;
42158: LD_ADDR_VAR 0 9
42162: PUSH
42163: LD_INT 70
42165: PUSH
42166: LD_INT 200
42168: PUSH
42169: LD_INT 400
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: LIST
42176: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42177: LD_VAR 0 6
42181: PPUSH
42182: CALL_OW 264
42186: PUSH
42187: LD_INT 14
42189: PUSH
42190: LD_INT 53
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: IN
42197: IFFALSE 42218
// points := [ 40 , 10 , 20 ] ;
42199: LD_ADDR_VAR 0 9
42203: PUSH
42204: LD_INT 40
42206: PUSH
42207: LD_INT 10
42209: PUSH
42210: LD_INT 20
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: LIST
42217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42218: LD_VAR 0 6
42222: PPUSH
42223: CALL_OW 264
42227: PUSH
42228: LD_INT 9
42230: PUSH
42231: EMPTY
42232: LIST
42233: IN
42234: IFFALSE 42255
// points := [ 5 , 70 , 20 ] ;
42236: LD_ADDR_VAR 0 9
42240: PUSH
42241: LD_INT 5
42243: PUSH
42244: LD_INT 70
42246: PUSH
42247: LD_INT 20
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: LIST
42254: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42255: LD_VAR 0 6
42259: PPUSH
42260: CALL_OW 264
42264: PUSH
42265: LD_INT 10
42267: PUSH
42268: EMPTY
42269: LIST
42270: IN
42271: IFFALSE 42292
// points := [ 35 , 110 , 70 ] ;
42273: LD_ADDR_VAR 0 9
42277: PUSH
42278: LD_INT 35
42280: PUSH
42281: LD_INT 110
42283: PUSH
42284: LD_INT 70
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: LIST
42291: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42292: LD_VAR 0 6
42296: PPUSH
42297: CALL_OW 265
42301: PUSH
42302: LD_INT 25
42304: EQUAL
42305: IFFALSE 42326
// points := [ 80 , 65 , 100 ] ;
42307: LD_ADDR_VAR 0 9
42311: PUSH
42312: LD_INT 80
42314: PUSH
42315: LD_INT 65
42317: PUSH
42318: LD_INT 100
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: LIST
42325: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42326: LD_VAR 0 6
42330: PPUSH
42331: CALL_OW 263
42335: PUSH
42336: LD_INT 1
42338: EQUAL
42339: IFFALSE 42374
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42341: LD_ADDR_VAR 0 10
42345: PUSH
42346: LD_VAR 0 10
42350: PUSH
42351: LD_VAR 0 6
42355: PPUSH
42356: CALL_OW 311
42360: PPUSH
42361: LD_INT 3
42363: PPUSH
42364: CALL_OW 259
42368: PUSH
42369: LD_INT 4
42371: MUL
42372: MUL
42373: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42374: LD_VAR 0 6
42378: PPUSH
42379: CALL_OW 263
42383: PUSH
42384: LD_INT 2
42386: EQUAL
42387: IFFALSE 42438
// begin j := IsControledBy ( i ) ;
42389: LD_ADDR_VAR 0 7
42393: PUSH
42394: LD_VAR 0 6
42398: PPUSH
42399: CALL_OW 312
42403: ST_TO_ADDR
// if j then
42404: LD_VAR 0 7
42408: IFFALSE 42438
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42410: LD_ADDR_VAR 0 10
42414: PUSH
42415: LD_VAR 0 10
42419: PUSH
42420: LD_VAR 0 7
42424: PPUSH
42425: LD_INT 3
42427: PPUSH
42428: CALL_OW 259
42432: PUSH
42433: LD_INT 3
42435: MUL
42436: MUL
42437: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42438: LD_VAR 0 6
42442: PPUSH
42443: CALL_OW 264
42447: PUSH
42448: LD_INT 5
42450: PUSH
42451: LD_INT 6
42453: PUSH
42454: LD_INT 46
42456: PUSH
42457: LD_INT 44
42459: PUSH
42460: LD_INT 47
42462: PUSH
42463: LD_INT 45
42465: PUSH
42466: LD_INT 28
42468: PUSH
42469: LD_INT 7
42471: PUSH
42472: LD_INT 27
42474: PUSH
42475: LD_INT 29
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: IN
42490: PUSH
42491: LD_VAR 0 1
42495: PPUSH
42496: LD_INT 52
42498: PPUSH
42499: CALL_OW 321
42503: PUSH
42504: LD_INT 2
42506: EQUAL
42507: AND
42508: IFFALSE 42525
// bpoints := bpoints * 1.2 ;
42510: LD_ADDR_VAR 0 10
42514: PUSH
42515: LD_VAR 0 10
42519: PUSH
42520: LD_REAL  1.20000000000000E+0000
42523: MUL
42524: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42525: LD_VAR 0 6
42529: PPUSH
42530: CALL_OW 264
42534: PUSH
42535: LD_INT 6
42537: PUSH
42538: LD_INT 46
42540: PUSH
42541: LD_INT 47
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: LIST
42548: IN
42549: IFFALSE 42566
// bpoints := bpoints * 1.2 ;
42551: LD_ADDR_VAR 0 10
42555: PUSH
42556: LD_VAR 0 10
42560: PUSH
42561: LD_REAL  1.20000000000000E+0000
42564: MUL
42565: ST_TO_ADDR
// end ; unit_building :
42566: GO 42580
42568: LD_INT 3
42570: DOUBLE
42571: EQUAL
42572: IFTRUE 42576
42574: GO 42579
42576: POP
// ; end ;
42577: GO 42580
42579: POP
// for j = 1 to 3 do
42580: LD_ADDR_VAR 0 7
42584: PUSH
42585: DOUBLE
42586: LD_INT 1
42588: DEC
42589: ST_TO_ADDR
42590: LD_INT 3
42592: PUSH
42593: FOR_TO
42594: IFFALSE 42647
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42596: LD_ADDR_VAR 0 5
42600: PUSH
42601: LD_VAR 0 5
42605: PPUSH
42606: LD_VAR 0 7
42610: PPUSH
42611: LD_VAR 0 5
42615: PUSH
42616: LD_VAR 0 7
42620: ARRAY
42621: PUSH
42622: LD_VAR 0 9
42626: PUSH
42627: LD_VAR 0 7
42631: ARRAY
42632: PUSH
42633: LD_VAR 0 10
42637: MUL
42638: PLUS
42639: PPUSH
42640: CALL_OW 1
42644: ST_TO_ADDR
42645: GO 42593
42647: POP
42648: POP
// end ;
42649: GO 41128
42651: POP
42652: POP
// result := Replace ( result , 4 , tmp ) ;
42653: LD_ADDR_VAR 0 5
42657: PUSH
42658: LD_VAR 0 5
42662: PPUSH
42663: LD_INT 4
42665: PPUSH
42666: LD_VAR 0 8
42670: PPUSH
42671: CALL_OW 1
42675: ST_TO_ADDR
// end ;
42676: LD_VAR 0 5
42680: RET
// export function DangerAtRange ( unit , range ) ; begin
42681: LD_INT 0
42683: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42684: LD_ADDR_VAR 0 3
42688: PUSH
42689: LD_VAR 0 1
42693: PPUSH
42694: CALL_OW 255
42698: PPUSH
42699: LD_VAR 0 1
42703: PPUSH
42704: CALL_OW 250
42708: PPUSH
42709: LD_VAR 0 1
42713: PPUSH
42714: CALL_OW 251
42718: PPUSH
42719: LD_VAR 0 2
42723: PPUSH
42724: CALL 40980 0 4
42728: ST_TO_ADDR
// end ;
42729: LD_VAR 0 3
42733: RET
// export function DangerInArea ( side , area ) ; begin
42734: LD_INT 0
42736: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42737: LD_ADDR_VAR 0 3
42741: PUSH
42742: LD_VAR 0 2
42746: PPUSH
42747: LD_INT 81
42749: PUSH
42750: LD_VAR 0 1
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PPUSH
42759: CALL_OW 70
42763: ST_TO_ADDR
// end ;
42764: LD_VAR 0 3
42768: RET
// export function IsExtension ( b ) ; begin
42769: LD_INT 0
42771: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42772: LD_ADDR_VAR 0 2
42776: PUSH
42777: LD_VAR 0 1
42781: PUSH
42782: LD_INT 23
42784: PUSH
42785: LD_INT 20
42787: PUSH
42788: LD_INT 22
42790: PUSH
42791: LD_INT 17
42793: PUSH
42794: LD_INT 24
42796: PUSH
42797: LD_INT 21
42799: PUSH
42800: LD_INT 19
42802: PUSH
42803: LD_INT 16
42805: PUSH
42806: LD_INT 25
42808: PUSH
42809: LD_INT 18
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: IN
42824: ST_TO_ADDR
// end ;
42825: LD_VAR 0 2
42829: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42830: LD_INT 0
42832: PPUSH
42833: PPUSH
42834: PPUSH
// result := [ ] ;
42835: LD_ADDR_VAR 0 4
42839: PUSH
42840: EMPTY
42841: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42842: LD_ADDR_VAR 0 5
42846: PUSH
42847: LD_VAR 0 2
42851: PPUSH
42852: LD_INT 21
42854: PUSH
42855: LD_INT 3
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PPUSH
42862: CALL_OW 70
42866: ST_TO_ADDR
// if not tmp then
42867: LD_VAR 0 5
42871: NOT
42872: IFFALSE 42876
// exit ;
42874: GO 42940
// if checkLink then
42876: LD_VAR 0 3
42880: IFFALSE 42930
// begin for i in tmp do
42882: LD_ADDR_VAR 0 6
42886: PUSH
42887: LD_VAR 0 5
42891: PUSH
42892: FOR_IN
42893: IFFALSE 42928
// if GetBase ( i ) <> base then
42895: LD_VAR 0 6
42899: PPUSH
42900: CALL_OW 274
42904: PUSH
42905: LD_VAR 0 1
42909: NONEQUAL
42910: IFFALSE 42926
// ComLinkToBase ( base , i ) ;
42912: LD_VAR 0 1
42916: PPUSH
42917: LD_VAR 0 6
42921: PPUSH
42922: CALL_OW 169
42926: GO 42892
42928: POP
42929: POP
// end ; result := tmp ;
42930: LD_ADDR_VAR 0 4
42934: PUSH
42935: LD_VAR 0 5
42939: ST_TO_ADDR
// end ;
42940: LD_VAR 0 4
42944: RET
// export function ComComplete ( units , b ) ; var i ; begin
42945: LD_INT 0
42947: PPUSH
42948: PPUSH
// if not units then
42949: LD_VAR 0 1
42953: NOT
42954: IFFALSE 42958
// exit ;
42956: GO 43048
// for i in units do
42958: LD_ADDR_VAR 0 4
42962: PUSH
42963: LD_VAR 0 1
42967: PUSH
42968: FOR_IN
42969: IFFALSE 43046
// if BuildingStatus ( b ) = bs_build then
42971: LD_VAR 0 2
42975: PPUSH
42976: CALL_OW 461
42980: PUSH
42981: LD_INT 1
42983: EQUAL
42984: IFFALSE 43044
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42986: LD_VAR 0 4
42990: PPUSH
42991: LD_STRING h
42993: PUSH
42994: LD_VAR 0 2
42998: PPUSH
42999: CALL_OW 250
43003: PUSH
43004: LD_VAR 0 2
43008: PPUSH
43009: CALL_OW 251
43013: PUSH
43014: LD_VAR 0 2
43018: PUSH
43019: LD_INT 0
43021: PUSH
43022: LD_INT 0
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: PUSH
43037: EMPTY
43038: LIST
43039: PPUSH
43040: CALL_OW 446
43044: GO 42968
43046: POP
43047: POP
// end ;
43048: LD_VAR 0 3
43052: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43053: LD_INT 0
43055: PPUSH
43056: PPUSH
43057: PPUSH
43058: PPUSH
43059: PPUSH
43060: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43061: LD_VAR 0 1
43065: NOT
43066: PUSH
43067: LD_VAR 0 1
43071: PPUSH
43072: CALL_OW 263
43076: PUSH
43077: LD_INT 2
43079: NONEQUAL
43080: OR
43081: IFFALSE 43085
// exit ;
43083: GO 43401
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43085: LD_ADDR_VAR 0 6
43089: PUSH
43090: LD_INT 22
43092: PUSH
43093: LD_VAR 0 1
43097: PPUSH
43098: CALL_OW 255
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 2
43109: PUSH
43110: LD_INT 30
43112: PUSH
43113: LD_INT 36
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 34
43122: PUSH
43123: LD_INT 31
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: LIST
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: PPUSH
43139: CALL_OW 69
43143: ST_TO_ADDR
// if not tmp then
43144: LD_VAR 0 6
43148: NOT
43149: IFFALSE 43153
// exit ;
43151: GO 43401
// result := [ ] ;
43153: LD_ADDR_VAR 0 2
43157: PUSH
43158: EMPTY
43159: ST_TO_ADDR
// for i in tmp do
43160: LD_ADDR_VAR 0 3
43164: PUSH
43165: LD_VAR 0 6
43169: PUSH
43170: FOR_IN
43171: IFFALSE 43242
// begin t := UnitsInside ( i ) ;
43173: LD_ADDR_VAR 0 4
43177: PUSH
43178: LD_VAR 0 3
43182: PPUSH
43183: CALL_OW 313
43187: ST_TO_ADDR
// if t then
43188: LD_VAR 0 4
43192: IFFALSE 43240
// for j in t do
43194: LD_ADDR_VAR 0 7
43198: PUSH
43199: LD_VAR 0 4
43203: PUSH
43204: FOR_IN
43205: IFFALSE 43238
// result := Replace ( result , result + 1 , j ) ;
43207: LD_ADDR_VAR 0 2
43211: PUSH
43212: LD_VAR 0 2
43216: PPUSH
43217: LD_VAR 0 2
43221: PUSH
43222: LD_INT 1
43224: PLUS
43225: PPUSH
43226: LD_VAR 0 7
43230: PPUSH
43231: CALL_OW 1
43235: ST_TO_ADDR
43236: GO 43204
43238: POP
43239: POP
// end ;
43240: GO 43170
43242: POP
43243: POP
// if not result then
43244: LD_VAR 0 2
43248: NOT
43249: IFFALSE 43253
// exit ;
43251: GO 43401
// mech := result [ 1 ] ;
43253: LD_ADDR_VAR 0 5
43257: PUSH
43258: LD_VAR 0 2
43262: PUSH
43263: LD_INT 1
43265: ARRAY
43266: ST_TO_ADDR
// if result > 1 then
43267: LD_VAR 0 2
43271: PUSH
43272: LD_INT 1
43274: GREATER
43275: IFFALSE 43387
// begin for i = 2 to result do
43277: LD_ADDR_VAR 0 3
43281: PUSH
43282: DOUBLE
43283: LD_INT 2
43285: DEC
43286: ST_TO_ADDR
43287: LD_VAR 0 2
43291: PUSH
43292: FOR_TO
43293: IFFALSE 43385
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43295: LD_ADDR_VAR 0 4
43299: PUSH
43300: LD_VAR 0 2
43304: PUSH
43305: LD_VAR 0 3
43309: ARRAY
43310: PPUSH
43311: LD_INT 3
43313: PPUSH
43314: CALL_OW 259
43318: PUSH
43319: LD_VAR 0 2
43323: PUSH
43324: LD_VAR 0 3
43328: ARRAY
43329: PPUSH
43330: CALL_OW 432
43334: MINUS
43335: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43336: LD_VAR 0 4
43340: PUSH
43341: LD_VAR 0 5
43345: PPUSH
43346: LD_INT 3
43348: PPUSH
43349: CALL_OW 259
43353: PUSH
43354: LD_VAR 0 5
43358: PPUSH
43359: CALL_OW 432
43363: MINUS
43364: GREATEREQUAL
43365: IFFALSE 43383
// mech := result [ i ] ;
43367: LD_ADDR_VAR 0 5
43371: PUSH
43372: LD_VAR 0 2
43376: PUSH
43377: LD_VAR 0 3
43381: ARRAY
43382: ST_TO_ADDR
// end ;
43383: GO 43292
43385: POP
43386: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43387: LD_VAR 0 1
43391: PPUSH
43392: LD_VAR 0 5
43396: PPUSH
43397: CALL_OW 135
// end ;
43401: LD_VAR 0 2
43405: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43406: LD_INT 0
43408: PPUSH
43409: PPUSH
43410: PPUSH
43411: PPUSH
43412: PPUSH
43413: PPUSH
43414: PPUSH
43415: PPUSH
43416: PPUSH
43417: PPUSH
43418: PPUSH
43419: PPUSH
43420: PPUSH
// result := [ ] ;
43421: LD_ADDR_VAR 0 7
43425: PUSH
43426: EMPTY
43427: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43428: LD_VAR 0 1
43432: PPUSH
43433: CALL_OW 266
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: LD_INT 1
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: IN
43448: NOT
43449: IFFALSE 43453
// exit ;
43451: GO 45087
// if name then
43453: LD_VAR 0 3
43457: IFFALSE 43473
// SetBName ( base_dep , name ) ;
43459: LD_VAR 0 1
43463: PPUSH
43464: LD_VAR 0 3
43468: PPUSH
43469: CALL_OW 500
// base := GetBase ( base_dep ) ;
43473: LD_ADDR_VAR 0 15
43477: PUSH
43478: LD_VAR 0 1
43482: PPUSH
43483: CALL_OW 274
43487: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43488: LD_ADDR_VAR 0 16
43492: PUSH
43493: LD_VAR 0 1
43497: PPUSH
43498: CALL_OW 255
43502: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43503: LD_ADDR_VAR 0 17
43507: PUSH
43508: LD_VAR 0 1
43512: PPUSH
43513: CALL_OW 248
43517: ST_TO_ADDR
// if sources then
43518: LD_VAR 0 5
43522: IFFALSE 43569
// for i = 1 to 3 do
43524: LD_ADDR_VAR 0 8
43528: PUSH
43529: DOUBLE
43530: LD_INT 1
43532: DEC
43533: ST_TO_ADDR
43534: LD_INT 3
43536: PUSH
43537: FOR_TO
43538: IFFALSE 43567
// AddResourceType ( base , i , sources [ i ] ) ;
43540: LD_VAR 0 15
43544: PPUSH
43545: LD_VAR 0 8
43549: PPUSH
43550: LD_VAR 0 5
43554: PUSH
43555: LD_VAR 0 8
43559: ARRAY
43560: PPUSH
43561: CALL_OW 276
43565: GO 43537
43567: POP
43568: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43569: LD_ADDR_VAR 0 18
43573: PUSH
43574: LD_VAR 0 15
43578: PPUSH
43579: LD_VAR 0 2
43583: PPUSH
43584: LD_INT 1
43586: PPUSH
43587: CALL 42830 0 3
43591: ST_TO_ADDR
// InitHc ;
43592: CALL_OW 19
// InitUc ;
43596: CALL_OW 18
// uc_side := side ;
43600: LD_ADDR_OWVAR 20
43604: PUSH
43605: LD_VAR 0 16
43609: ST_TO_ADDR
// uc_nation := nation ;
43610: LD_ADDR_OWVAR 21
43614: PUSH
43615: LD_VAR 0 17
43619: ST_TO_ADDR
// if buildings then
43620: LD_VAR 0 18
43624: IFFALSE 44946
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
43626: LD_ADDR_VAR 0 19
43630: PUSH
43631: LD_VAR 0 18
43635: PPUSH
43636: LD_INT 2
43638: PUSH
43639: LD_INT 30
43641: PUSH
43642: LD_INT 29
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 30
43651: PUSH
43652: LD_INT 30
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: LIST
43663: PPUSH
43664: CALL_OW 72
43668: ST_TO_ADDR
// if tmp then
43669: LD_VAR 0 19
43673: IFFALSE 43721
// for i in tmp do
43675: LD_ADDR_VAR 0 8
43679: PUSH
43680: LD_VAR 0 19
43684: PUSH
43685: FOR_IN
43686: IFFALSE 43719
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43688: LD_VAR 0 8
43692: PPUSH
43693: CALL_OW 250
43697: PPUSH
43698: LD_VAR 0 8
43702: PPUSH
43703: CALL_OW 251
43707: PPUSH
43708: LD_VAR 0 16
43712: PPUSH
43713: CALL_OW 441
43717: GO 43685
43719: POP
43720: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43721: LD_VAR 0 18
43725: PPUSH
43726: LD_INT 2
43728: PUSH
43729: LD_INT 30
43731: PUSH
43732: LD_INT 32
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 30
43741: PUSH
43742: LD_INT 33
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: LIST
43753: PPUSH
43754: CALL_OW 72
43758: IFFALSE 43846
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43760: LD_ADDR_VAR 0 8
43764: PUSH
43765: LD_VAR 0 18
43769: PPUSH
43770: LD_INT 2
43772: PUSH
43773: LD_INT 30
43775: PUSH
43776: LD_INT 32
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 30
43785: PUSH
43786: LD_INT 33
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: LIST
43797: PPUSH
43798: CALL_OW 72
43802: PUSH
43803: FOR_IN
43804: IFFALSE 43844
// begin if not GetBWeapon ( i ) then
43806: LD_VAR 0 8
43810: PPUSH
43811: CALL_OW 269
43815: NOT
43816: IFFALSE 43842
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43818: LD_VAR 0 8
43822: PPUSH
43823: LD_VAR 0 8
43827: PPUSH
43828: LD_VAR 0 2
43832: PPUSH
43833: CALL 45092 0 2
43837: PPUSH
43838: CALL_OW 431
// end ;
43842: GO 43803
43844: POP
43845: POP
// end ; for i = 1 to personel do
43846: LD_ADDR_VAR 0 8
43850: PUSH
43851: DOUBLE
43852: LD_INT 1
43854: DEC
43855: ST_TO_ADDR
43856: LD_VAR 0 6
43860: PUSH
43861: FOR_TO
43862: IFFALSE 44926
// begin if i > 4 then
43864: LD_VAR 0 8
43868: PUSH
43869: LD_INT 4
43871: GREATER
43872: IFFALSE 43876
// break ;
43874: GO 44926
// case i of 1 :
43876: LD_VAR 0 8
43880: PUSH
43881: LD_INT 1
43883: DOUBLE
43884: EQUAL
43885: IFTRUE 43889
43887: GO 43969
43889: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43890: LD_ADDR_VAR 0 12
43894: PUSH
43895: LD_VAR 0 18
43899: PPUSH
43900: LD_INT 22
43902: PUSH
43903: LD_VAR 0 16
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 58
43914: PUSH
43915: EMPTY
43916: LIST
43917: PUSH
43918: LD_INT 2
43920: PUSH
43921: LD_INT 30
43923: PUSH
43924: LD_INT 32
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 30
43933: PUSH
43934: LD_INT 4
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 30
43943: PUSH
43944: LD_INT 5
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: LIST
43961: PPUSH
43962: CALL_OW 72
43966: ST_TO_ADDR
43967: GO 44191
43969: LD_INT 2
43971: DOUBLE
43972: EQUAL
43973: IFTRUE 43977
43975: GO 44039
43977: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43978: LD_ADDR_VAR 0 12
43982: PUSH
43983: LD_VAR 0 18
43987: PPUSH
43988: LD_INT 22
43990: PUSH
43991: LD_VAR 0 16
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 2
44002: PUSH
44003: LD_INT 30
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 30
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: LIST
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PPUSH
44032: CALL_OW 72
44036: ST_TO_ADDR
44037: GO 44191
44039: LD_INT 3
44041: DOUBLE
44042: EQUAL
44043: IFTRUE 44047
44045: GO 44109
44047: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44048: LD_ADDR_VAR 0 12
44052: PUSH
44053: LD_VAR 0 18
44057: PPUSH
44058: LD_INT 22
44060: PUSH
44061: LD_VAR 0 16
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 2
44072: PUSH
44073: LD_INT 30
44075: PUSH
44076: LD_INT 2
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: LD_INT 30
44085: PUSH
44086: LD_INT 3
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: LIST
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PPUSH
44102: CALL_OW 72
44106: ST_TO_ADDR
44107: GO 44191
44109: LD_INT 4
44111: DOUBLE
44112: EQUAL
44113: IFTRUE 44117
44115: GO 44190
44117: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44118: LD_ADDR_VAR 0 12
44122: PUSH
44123: LD_VAR 0 18
44127: PPUSH
44128: LD_INT 22
44130: PUSH
44131: LD_VAR 0 16
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: LD_INT 30
44145: PUSH
44146: LD_INT 6
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 30
44155: PUSH
44156: LD_INT 7
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 30
44165: PUSH
44166: LD_INT 8
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PPUSH
44183: CALL_OW 72
44187: ST_TO_ADDR
44188: GO 44191
44190: POP
// if i = 1 then
44191: LD_VAR 0 8
44195: PUSH
44196: LD_INT 1
44198: EQUAL
44199: IFFALSE 44310
// begin tmp := [ ] ;
44201: LD_ADDR_VAR 0 19
44205: PUSH
44206: EMPTY
44207: ST_TO_ADDR
// for j in f do
44208: LD_ADDR_VAR 0 9
44212: PUSH
44213: LD_VAR 0 12
44217: PUSH
44218: FOR_IN
44219: IFFALSE 44292
// if GetBType ( j ) = b_bunker then
44221: LD_VAR 0 9
44225: PPUSH
44226: CALL_OW 266
44230: PUSH
44231: LD_INT 32
44233: EQUAL
44234: IFFALSE 44261
// tmp := Insert ( tmp , 1 , j ) else
44236: LD_ADDR_VAR 0 19
44240: PUSH
44241: LD_VAR 0 19
44245: PPUSH
44246: LD_INT 1
44248: PPUSH
44249: LD_VAR 0 9
44253: PPUSH
44254: CALL_OW 2
44258: ST_TO_ADDR
44259: GO 44290
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44261: LD_ADDR_VAR 0 19
44265: PUSH
44266: LD_VAR 0 19
44270: PPUSH
44271: LD_VAR 0 19
44275: PUSH
44276: LD_INT 1
44278: PLUS
44279: PPUSH
44280: LD_VAR 0 9
44284: PPUSH
44285: CALL_OW 2
44289: ST_TO_ADDR
44290: GO 44218
44292: POP
44293: POP
// if tmp then
44294: LD_VAR 0 19
44298: IFFALSE 44310
// f := tmp ;
44300: LD_ADDR_VAR 0 12
44304: PUSH
44305: LD_VAR 0 19
44309: ST_TO_ADDR
// end ; x := personel [ i ] ;
44310: LD_ADDR_VAR 0 13
44314: PUSH
44315: LD_VAR 0 6
44319: PUSH
44320: LD_VAR 0 8
44324: ARRAY
44325: ST_TO_ADDR
// if x = - 1 then
44326: LD_VAR 0 13
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: EQUAL
44335: IFFALSE 44544
// begin for j in f do
44337: LD_ADDR_VAR 0 9
44341: PUSH
44342: LD_VAR 0 12
44346: PUSH
44347: FOR_IN
44348: IFFALSE 44540
// repeat InitHc ;
44350: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44354: LD_VAR 0 9
44358: PPUSH
44359: CALL_OW 266
44363: PUSH
44364: LD_INT 5
44366: EQUAL
44367: IFFALSE 44437
// begin if UnitsInside ( j ) < 3 then
44369: LD_VAR 0 9
44373: PPUSH
44374: CALL_OW 313
44378: PUSH
44379: LD_INT 3
44381: LESS
44382: IFFALSE 44418
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44384: LD_INT 0
44386: PPUSH
44387: LD_INT 5
44389: PUSH
44390: LD_INT 8
44392: PUSH
44393: LD_INT 9
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: LIST
44400: PUSH
44401: LD_VAR 0 17
44405: ARRAY
44406: PPUSH
44407: LD_VAR 0 4
44411: PPUSH
44412: CALL_OW 380
44416: GO 44435
// PrepareHuman ( false , i , skill ) ;
44418: LD_INT 0
44420: PPUSH
44421: LD_VAR 0 8
44425: PPUSH
44426: LD_VAR 0 4
44430: PPUSH
44431: CALL_OW 380
// end else
44435: GO 44454
// PrepareHuman ( false , i , skill ) ;
44437: LD_INT 0
44439: PPUSH
44440: LD_VAR 0 8
44444: PPUSH
44445: LD_VAR 0 4
44449: PPUSH
44450: CALL_OW 380
// un := CreateHuman ;
44454: LD_ADDR_VAR 0 14
44458: PUSH
44459: CALL_OW 44
44463: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44464: LD_ADDR_VAR 0 7
44468: PUSH
44469: LD_VAR 0 7
44473: PPUSH
44474: LD_INT 1
44476: PPUSH
44477: LD_VAR 0 14
44481: PPUSH
44482: CALL_OW 2
44486: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44487: LD_VAR 0 14
44491: PPUSH
44492: LD_VAR 0 9
44496: PPUSH
44497: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44501: LD_VAR 0 9
44505: PPUSH
44506: CALL_OW 313
44510: PUSH
44511: LD_INT 6
44513: EQUAL
44514: PUSH
44515: LD_VAR 0 9
44519: PPUSH
44520: CALL_OW 266
44524: PUSH
44525: LD_INT 32
44527: PUSH
44528: LD_INT 31
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: IN
44535: OR
44536: IFFALSE 44350
44538: GO 44347
44540: POP
44541: POP
// end else
44542: GO 44924
// for j = 1 to x do
44544: LD_ADDR_VAR 0 9
44548: PUSH
44549: DOUBLE
44550: LD_INT 1
44552: DEC
44553: ST_TO_ADDR
44554: LD_VAR 0 13
44558: PUSH
44559: FOR_TO
44560: IFFALSE 44922
// begin InitHc ;
44562: CALL_OW 19
// if not f then
44566: LD_VAR 0 12
44570: NOT
44571: IFFALSE 44660
// begin PrepareHuman ( false , i , skill ) ;
44573: LD_INT 0
44575: PPUSH
44576: LD_VAR 0 8
44580: PPUSH
44581: LD_VAR 0 4
44585: PPUSH
44586: CALL_OW 380
// un := CreateHuman ;
44590: LD_ADDR_VAR 0 14
44594: PUSH
44595: CALL_OW 44
44599: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44600: LD_ADDR_VAR 0 7
44604: PUSH
44605: LD_VAR 0 7
44609: PPUSH
44610: LD_INT 1
44612: PPUSH
44613: LD_VAR 0 14
44617: PPUSH
44618: CALL_OW 2
44622: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44623: LD_VAR 0 14
44627: PPUSH
44628: LD_VAR 0 1
44632: PPUSH
44633: CALL_OW 250
44637: PPUSH
44638: LD_VAR 0 1
44642: PPUSH
44643: CALL_OW 251
44647: PPUSH
44648: LD_INT 10
44650: PPUSH
44651: LD_INT 0
44653: PPUSH
44654: CALL_OW 50
// continue ;
44658: GO 44559
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
44660: LD_VAR 0 12
44664: PUSH
44665: LD_INT 1
44667: ARRAY
44668: PPUSH
44669: CALL_OW 313
44673: PUSH
44674: LD_VAR 0 12
44678: PUSH
44679: LD_INT 1
44681: ARRAY
44682: PPUSH
44683: CALL_OW 266
44687: PUSH
44688: LD_INT 32
44690: PUSH
44691: LD_INT 31
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: IN
44698: AND
44699: PUSH
44700: LD_VAR 0 12
44704: PUSH
44705: LD_INT 1
44707: ARRAY
44708: PPUSH
44709: CALL_OW 313
44713: PUSH
44714: LD_INT 6
44716: EQUAL
44717: OR
44718: IFFALSE 44738
// f := Delete ( f , 1 ) ;
44720: LD_ADDR_VAR 0 12
44724: PUSH
44725: LD_VAR 0 12
44729: PPUSH
44730: LD_INT 1
44732: PPUSH
44733: CALL_OW 3
44737: ST_TO_ADDR
// if not f then
44738: LD_VAR 0 12
44742: NOT
44743: IFFALSE 44761
// begin x := x + 2 ;
44745: LD_ADDR_VAR 0 13
44749: PUSH
44750: LD_VAR 0 13
44754: PUSH
44755: LD_INT 2
44757: PLUS
44758: ST_TO_ADDR
// continue ;
44759: GO 44559
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44761: LD_VAR 0 12
44765: PUSH
44766: LD_INT 1
44768: ARRAY
44769: PPUSH
44770: CALL_OW 266
44774: PUSH
44775: LD_INT 5
44777: EQUAL
44778: IFFALSE 44852
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44780: LD_VAR 0 12
44784: PUSH
44785: LD_INT 1
44787: ARRAY
44788: PPUSH
44789: CALL_OW 313
44793: PUSH
44794: LD_INT 3
44796: LESS
44797: IFFALSE 44833
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44799: LD_INT 0
44801: PPUSH
44802: LD_INT 5
44804: PUSH
44805: LD_INT 8
44807: PUSH
44808: LD_INT 9
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: LIST
44815: PUSH
44816: LD_VAR 0 17
44820: ARRAY
44821: PPUSH
44822: LD_VAR 0 4
44826: PPUSH
44827: CALL_OW 380
44831: GO 44850
// PrepareHuman ( false , i , skill ) ;
44833: LD_INT 0
44835: PPUSH
44836: LD_VAR 0 8
44840: PPUSH
44841: LD_VAR 0 4
44845: PPUSH
44846: CALL_OW 380
// end else
44850: GO 44869
// PrepareHuman ( false , i , skill ) ;
44852: LD_INT 0
44854: PPUSH
44855: LD_VAR 0 8
44859: PPUSH
44860: LD_VAR 0 4
44864: PPUSH
44865: CALL_OW 380
// un := CreateHuman ;
44869: LD_ADDR_VAR 0 14
44873: PUSH
44874: CALL_OW 44
44878: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44879: LD_ADDR_VAR 0 7
44883: PUSH
44884: LD_VAR 0 7
44888: PPUSH
44889: LD_INT 1
44891: PPUSH
44892: LD_VAR 0 14
44896: PPUSH
44897: CALL_OW 2
44901: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44902: LD_VAR 0 14
44906: PPUSH
44907: LD_VAR 0 12
44911: PUSH
44912: LD_INT 1
44914: ARRAY
44915: PPUSH
44916: CALL_OW 52
// end ;
44920: GO 44559
44922: POP
44923: POP
// end ;
44924: GO 43861
44926: POP
44927: POP
// result := result ^ buildings ;
44928: LD_ADDR_VAR 0 7
44932: PUSH
44933: LD_VAR 0 7
44937: PUSH
44938: LD_VAR 0 18
44942: ADD
44943: ST_TO_ADDR
// end else
44944: GO 45087
// begin for i = 1 to personel do
44946: LD_ADDR_VAR 0 8
44950: PUSH
44951: DOUBLE
44952: LD_INT 1
44954: DEC
44955: ST_TO_ADDR
44956: LD_VAR 0 6
44960: PUSH
44961: FOR_TO
44962: IFFALSE 45085
// begin if i > 4 then
44964: LD_VAR 0 8
44968: PUSH
44969: LD_INT 4
44971: GREATER
44972: IFFALSE 44976
// break ;
44974: GO 45085
// x := personel [ i ] ;
44976: LD_ADDR_VAR 0 13
44980: PUSH
44981: LD_VAR 0 6
44985: PUSH
44986: LD_VAR 0 8
44990: ARRAY
44991: ST_TO_ADDR
// if x = - 1 then
44992: LD_VAR 0 13
44996: PUSH
44997: LD_INT 1
44999: NEG
45000: EQUAL
45001: IFFALSE 45005
// continue ;
45003: GO 44961
// PrepareHuman ( false , i , skill ) ;
45005: LD_INT 0
45007: PPUSH
45008: LD_VAR 0 8
45012: PPUSH
45013: LD_VAR 0 4
45017: PPUSH
45018: CALL_OW 380
// un := CreateHuman ;
45022: LD_ADDR_VAR 0 14
45026: PUSH
45027: CALL_OW 44
45031: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45032: LD_VAR 0 14
45036: PPUSH
45037: LD_VAR 0 1
45041: PPUSH
45042: CALL_OW 250
45046: PPUSH
45047: LD_VAR 0 1
45051: PPUSH
45052: CALL_OW 251
45056: PPUSH
45057: LD_INT 10
45059: PPUSH
45060: LD_INT 0
45062: PPUSH
45063: CALL_OW 50
// result := result ^ un ;
45067: LD_ADDR_VAR 0 7
45071: PUSH
45072: LD_VAR 0 7
45076: PUSH
45077: LD_VAR 0 14
45081: ADD
45082: ST_TO_ADDR
// end ;
45083: GO 44961
45085: POP
45086: POP
// end ; end ;
45087: LD_VAR 0 7
45091: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45092: LD_INT 0
45094: PPUSH
45095: PPUSH
45096: PPUSH
45097: PPUSH
45098: PPUSH
45099: PPUSH
45100: PPUSH
45101: PPUSH
45102: PPUSH
45103: PPUSH
45104: PPUSH
45105: PPUSH
45106: PPUSH
45107: PPUSH
45108: PPUSH
45109: PPUSH
// result := false ;
45110: LD_ADDR_VAR 0 3
45114: PUSH
45115: LD_INT 0
45117: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45118: LD_VAR 0 1
45122: NOT
45123: PUSH
45124: LD_VAR 0 1
45128: PPUSH
45129: CALL_OW 266
45133: PUSH
45134: LD_INT 32
45136: PUSH
45137: LD_INT 33
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: IN
45144: NOT
45145: OR
45146: IFFALSE 45150
// exit ;
45148: GO 46259
// nat := GetNation ( tower ) ;
45150: LD_ADDR_VAR 0 12
45154: PUSH
45155: LD_VAR 0 1
45159: PPUSH
45160: CALL_OW 248
45164: ST_TO_ADDR
// side := GetSide ( tower ) ;
45165: LD_ADDR_VAR 0 16
45169: PUSH
45170: LD_VAR 0 1
45174: PPUSH
45175: CALL_OW 255
45179: ST_TO_ADDR
// x := GetX ( tower ) ;
45180: LD_ADDR_VAR 0 10
45184: PUSH
45185: LD_VAR 0 1
45189: PPUSH
45190: CALL_OW 250
45194: ST_TO_ADDR
// y := GetY ( tower ) ;
45195: LD_ADDR_VAR 0 11
45199: PUSH
45200: LD_VAR 0 1
45204: PPUSH
45205: CALL_OW 251
45209: ST_TO_ADDR
// if not x or not y then
45210: LD_VAR 0 10
45214: NOT
45215: PUSH
45216: LD_VAR 0 11
45220: NOT
45221: OR
45222: IFFALSE 45226
// exit ;
45224: GO 46259
// weapon := 0 ;
45226: LD_ADDR_VAR 0 18
45230: PUSH
45231: LD_INT 0
45233: ST_TO_ADDR
// fac_list := [ ] ;
45234: LD_ADDR_VAR 0 17
45238: PUSH
45239: EMPTY
45240: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45241: LD_ADDR_VAR 0 6
45245: PUSH
45246: LD_VAR 0 1
45250: PPUSH
45251: CALL_OW 274
45255: PPUSH
45256: LD_VAR 0 2
45260: PPUSH
45261: LD_INT 0
45263: PPUSH
45264: CALL 42830 0 3
45268: PPUSH
45269: LD_INT 30
45271: PUSH
45272: LD_INT 3
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PPUSH
45279: CALL_OW 72
45283: ST_TO_ADDR
// if not factories then
45284: LD_VAR 0 6
45288: NOT
45289: IFFALSE 45293
// exit ;
45291: GO 46259
// for i in factories do
45293: LD_ADDR_VAR 0 8
45297: PUSH
45298: LD_VAR 0 6
45302: PUSH
45303: FOR_IN
45304: IFFALSE 45329
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45306: LD_ADDR_VAR 0 17
45310: PUSH
45311: LD_VAR 0 17
45315: PUSH
45316: LD_VAR 0 8
45320: PPUSH
45321: CALL_OW 478
45325: UNION
45326: ST_TO_ADDR
45327: GO 45303
45329: POP
45330: POP
// if not fac_list then
45331: LD_VAR 0 17
45335: NOT
45336: IFFALSE 45340
// exit ;
45338: GO 46259
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45340: LD_ADDR_VAR 0 5
45344: PUSH
45345: LD_INT 4
45347: PUSH
45348: LD_INT 5
45350: PUSH
45351: LD_INT 9
45353: PUSH
45354: LD_INT 10
45356: PUSH
45357: LD_INT 6
45359: PUSH
45360: LD_INT 7
45362: PUSH
45363: LD_INT 11
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 27
45377: PUSH
45378: LD_INT 28
45380: PUSH
45381: LD_INT 26
45383: PUSH
45384: LD_INT 30
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 43
45395: PUSH
45396: LD_INT 44
45398: PUSH
45399: LD_INT 46
45401: PUSH
45402: LD_INT 45
45404: PUSH
45405: LD_INT 47
45407: PUSH
45408: LD_INT 49
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: LIST
45423: PUSH
45424: LD_VAR 0 12
45428: ARRAY
45429: ST_TO_ADDR
// list := list isect fac_list ;
45430: LD_ADDR_VAR 0 5
45434: PUSH
45435: LD_VAR 0 5
45439: PUSH
45440: LD_VAR 0 17
45444: ISECT
45445: ST_TO_ADDR
// if not list then
45446: LD_VAR 0 5
45450: NOT
45451: IFFALSE 45455
// exit ;
45453: GO 46259
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45455: LD_VAR 0 12
45459: PUSH
45460: LD_INT 3
45462: EQUAL
45463: PUSH
45464: LD_INT 49
45466: PUSH
45467: LD_VAR 0 5
45471: IN
45472: AND
45473: PUSH
45474: LD_INT 31
45476: PPUSH
45477: LD_VAR 0 16
45481: PPUSH
45482: CALL_OW 321
45486: PUSH
45487: LD_INT 2
45489: EQUAL
45490: AND
45491: IFFALSE 45551
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45493: LD_INT 22
45495: PUSH
45496: LD_VAR 0 16
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 35
45507: PUSH
45508: LD_INT 49
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 91
45517: PUSH
45518: LD_VAR 0 1
45522: PUSH
45523: LD_INT 10
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: LIST
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: LIST
45535: PPUSH
45536: CALL_OW 69
45540: NOT
45541: IFFALSE 45551
// weapon := ru_time_lapser ;
45543: LD_ADDR_VAR 0 18
45547: PUSH
45548: LD_INT 49
45550: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45551: LD_VAR 0 12
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: IN
45566: PUSH
45567: LD_INT 11
45569: PUSH
45570: LD_VAR 0 5
45574: IN
45575: PUSH
45576: LD_INT 30
45578: PUSH
45579: LD_VAR 0 5
45583: IN
45584: OR
45585: AND
45586: PUSH
45587: LD_INT 6
45589: PPUSH
45590: LD_VAR 0 16
45594: PPUSH
45595: CALL_OW 321
45599: PUSH
45600: LD_INT 2
45602: EQUAL
45603: AND
45604: IFFALSE 45769
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45606: LD_INT 22
45608: PUSH
45609: LD_VAR 0 16
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 2
45620: PUSH
45621: LD_INT 35
45623: PUSH
45624: LD_INT 11
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 35
45633: PUSH
45634: LD_INT 30
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 91
45648: PUSH
45649: LD_VAR 0 1
45653: PUSH
45654: LD_INT 18
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: LIST
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: LIST
45666: PPUSH
45667: CALL_OW 69
45671: NOT
45672: PUSH
45673: LD_INT 22
45675: PUSH
45676: LD_VAR 0 16
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 2
45687: PUSH
45688: LD_INT 30
45690: PUSH
45691: LD_INT 32
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 30
45700: PUSH
45701: LD_INT 33
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 91
45715: PUSH
45716: LD_VAR 0 1
45720: PUSH
45721: LD_INT 12
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: LIST
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: LIST
45733: PUSH
45734: EMPTY
45735: LIST
45736: PPUSH
45737: CALL_OW 69
45741: PUSH
45742: LD_INT 2
45744: GREATER
45745: AND
45746: IFFALSE 45769
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45748: LD_ADDR_VAR 0 18
45752: PUSH
45753: LD_INT 11
45755: PUSH
45756: LD_INT 30
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_VAR 0 12
45767: ARRAY
45768: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45769: LD_VAR 0 18
45773: NOT
45774: PUSH
45775: LD_INT 40
45777: PPUSH
45778: LD_VAR 0 16
45782: PPUSH
45783: CALL_OW 321
45787: PUSH
45788: LD_INT 2
45790: EQUAL
45791: AND
45792: PUSH
45793: LD_INT 7
45795: PUSH
45796: LD_VAR 0 5
45800: IN
45801: PUSH
45802: LD_INT 28
45804: PUSH
45805: LD_VAR 0 5
45809: IN
45810: OR
45811: PUSH
45812: LD_INT 45
45814: PUSH
45815: LD_VAR 0 5
45819: IN
45820: OR
45821: AND
45822: IFFALSE 46076
// begin hex := GetHexInfo ( x , y ) ;
45824: LD_ADDR_VAR 0 4
45828: PUSH
45829: LD_VAR 0 10
45833: PPUSH
45834: LD_VAR 0 11
45838: PPUSH
45839: CALL_OW 546
45843: ST_TO_ADDR
// if hex [ 1 ] then
45844: LD_VAR 0 4
45848: PUSH
45849: LD_INT 1
45851: ARRAY
45852: IFFALSE 45856
// exit ;
45854: GO 46259
// height := hex [ 2 ] ;
45856: LD_ADDR_VAR 0 15
45860: PUSH
45861: LD_VAR 0 4
45865: PUSH
45866: LD_INT 2
45868: ARRAY
45869: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45870: LD_ADDR_VAR 0 14
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: LD_INT 2
45880: PUSH
45881: LD_INT 3
45883: PUSH
45884: LD_INT 5
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: ST_TO_ADDR
// for i in tmp do
45893: LD_ADDR_VAR 0 8
45897: PUSH
45898: LD_VAR 0 14
45902: PUSH
45903: FOR_IN
45904: IFFALSE 46074
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45906: LD_ADDR_VAR 0 9
45910: PUSH
45911: LD_VAR 0 10
45915: PPUSH
45916: LD_VAR 0 8
45920: PPUSH
45921: LD_INT 5
45923: PPUSH
45924: CALL_OW 272
45928: PUSH
45929: LD_VAR 0 11
45933: PPUSH
45934: LD_VAR 0 8
45938: PPUSH
45939: LD_INT 5
45941: PPUSH
45942: CALL_OW 273
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45951: LD_VAR 0 9
45955: PUSH
45956: LD_INT 1
45958: ARRAY
45959: PPUSH
45960: LD_VAR 0 9
45964: PUSH
45965: LD_INT 2
45967: ARRAY
45968: PPUSH
45969: CALL_OW 488
45973: IFFALSE 46072
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45975: LD_ADDR_VAR 0 4
45979: PUSH
45980: LD_VAR 0 9
45984: PUSH
45985: LD_INT 1
45987: ARRAY
45988: PPUSH
45989: LD_VAR 0 9
45993: PUSH
45994: LD_INT 2
45996: ARRAY
45997: PPUSH
45998: CALL_OW 546
46002: ST_TO_ADDR
// if hex [ 1 ] then
46003: LD_VAR 0 4
46007: PUSH
46008: LD_INT 1
46010: ARRAY
46011: IFFALSE 46015
// continue ;
46013: GO 45903
// h := hex [ 2 ] ;
46015: LD_ADDR_VAR 0 13
46019: PUSH
46020: LD_VAR 0 4
46024: PUSH
46025: LD_INT 2
46027: ARRAY
46028: ST_TO_ADDR
// if h + 7 < height then
46029: LD_VAR 0 13
46033: PUSH
46034: LD_INT 7
46036: PLUS
46037: PUSH
46038: LD_VAR 0 15
46042: LESS
46043: IFFALSE 46072
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46045: LD_ADDR_VAR 0 18
46049: PUSH
46050: LD_INT 7
46052: PUSH
46053: LD_INT 28
46055: PUSH
46056: LD_INT 45
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: LIST
46063: PUSH
46064: LD_VAR 0 12
46068: ARRAY
46069: ST_TO_ADDR
// break ;
46070: GO 46074
// end ; end ; end ;
46072: GO 45903
46074: POP
46075: POP
// end ; if not weapon then
46076: LD_VAR 0 18
46080: NOT
46081: IFFALSE 46141
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46083: LD_ADDR_VAR 0 5
46087: PUSH
46088: LD_VAR 0 5
46092: PUSH
46093: LD_INT 11
46095: PUSH
46096: LD_INT 30
46098: PUSH
46099: LD_INT 49
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: LIST
46106: DIFF
46107: ST_TO_ADDR
// if not list then
46108: LD_VAR 0 5
46112: NOT
46113: IFFALSE 46117
// exit ;
46115: GO 46259
// weapon := list [ rand ( 1 , list ) ] ;
46117: LD_ADDR_VAR 0 18
46121: PUSH
46122: LD_VAR 0 5
46126: PUSH
46127: LD_INT 1
46129: PPUSH
46130: LD_VAR 0 5
46134: PPUSH
46135: CALL_OW 12
46139: ARRAY
46140: ST_TO_ADDR
// end ; if weapon then
46141: LD_VAR 0 18
46145: IFFALSE 46259
// begin tmp := CostOfWeapon ( weapon ) ;
46147: LD_ADDR_VAR 0 14
46151: PUSH
46152: LD_VAR 0 18
46156: PPUSH
46157: CALL_OW 451
46161: ST_TO_ADDR
// j := GetBase ( tower ) ;
46162: LD_ADDR_VAR 0 9
46166: PUSH
46167: LD_VAR 0 1
46171: PPUSH
46172: CALL_OW 274
46176: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46177: LD_VAR 0 9
46181: PPUSH
46182: LD_INT 1
46184: PPUSH
46185: CALL_OW 275
46189: PUSH
46190: LD_VAR 0 14
46194: PUSH
46195: LD_INT 1
46197: ARRAY
46198: GREATEREQUAL
46199: PUSH
46200: LD_VAR 0 9
46204: PPUSH
46205: LD_INT 2
46207: PPUSH
46208: CALL_OW 275
46212: PUSH
46213: LD_VAR 0 14
46217: PUSH
46218: LD_INT 2
46220: ARRAY
46221: GREATEREQUAL
46222: AND
46223: PUSH
46224: LD_VAR 0 9
46228: PPUSH
46229: LD_INT 3
46231: PPUSH
46232: CALL_OW 275
46236: PUSH
46237: LD_VAR 0 14
46241: PUSH
46242: LD_INT 3
46244: ARRAY
46245: GREATEREQUAL
46246: AND
46247: IFFALSE 46259
// result := weapon ;
46249: LD_ADDR_VAR 0 3
46253: PUSH
46254: LD_VAR 0 18
46258: ST_TO_ADDR
// end ; end ;
46259: LD_VAR 0 3
46263: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46264: LD_INT 0
46266: PPUSH
46267: PPUSH
// result := true ;
46268: LD_ADDR_VAR 0 3
46272: PUSH
46273: LD_INT 1
46275: ST_TO_ADDR
// if array1 = array2 then
46276: LD_VAR 0 1
46280: PUSH
46281: LD_VAR 0 2
46285: EQUAL
46286: IFFALSE 46346
// begin for i = 1 to array1 do
46288: LD_ADDR_VAR 0 4
46292: PUSH
46293: DOUBLE
46294: LD_INT 1
46296: DEC
46297: ST_TO_ADDR
46298: LD_VAR 0 1
46302: PUSH
46303: FOR_TO
46304: IFFALSE 46342
// if array1 [ i ] <> array2 [ i ] then
46306: LD_VAR 0 1
46310: PUSH
46311: LD_VAR 0 4
46315: ARRAY
46316: PUSH
46317: LD_VAR 0 2
46321: PUSH
46322: LD_VAR 0 4
46326: ARRAY
46327: NONEQUAL
46328: IFFALSE 46340
// begin result := false ;
46330: LD_ADDR_VAR 0 3
46334: PUSH
46335: LD_INT 0
46337: ST_TO_ADDR
// break ;
46338: GO 46342
// end ;
46340: GO 46303
46342: POP
46343: POP
// end else
46344: GO 46354
// result := false ;
46346: LD_ADDR_VAR 0 3
46350: PUSH
46351: LD_INT 0
46353: ST_TO_ADDR
// end ;
46354: LD_VAR 0 3
46358: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46359: LD_INT 0
46361: PPUSH
46362: PPUSH
// if not array1 or not array2 then
46363: LD_VAR 0 1
46367: NOT
46368: PUSH
46369: LD_VAR 0 2
46373: NOT
46374: OR
46375: IFFALSE 46379
// exit ;
46377: GO 46443
// result := true ;
46379: LD_ADDR_VAR 0 3
46383: PUSH
46384: LD_INT 1
46386: ST_TO_ADDR
// for i = 1 to array1 do
46387: LD_ADDR_VAR 0 4
46391: PUSH
46392: DOUBLE
46393: LD_INT 1
46395: DEC
46396: ST_TO_ADDR
46397: LD_VAR 0 1
46401: PUSH
46402: FOR_TO
46403: IFFALSE 46441
// if array1 [ i ] <> array2 [ i ] then
46405: LD_VAR 0 1
46409: PUSH
46410: LD_VAR 0 4
46414: ARRAY
46415: PUSH
46416: LD_VAR 0 2
46420: PUSH
46421: LD_VAR 0 4
46425: ARRAY
46426: NONEQUAL
46427: IFFALSE 46439
// begin result := false ;
46429: LD_ADDR_VAR 0 3
46433: PUSH
46434: LD_INT 0
46436: ST_TO_ADDR
// break ;
46437: GO 46441
// end ;
46439: GO 46402
46441: POP
46442: POP
// end ;
46443: LD_VAR 0 3
46447: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46448: LD_INT 0
46450: PPUSH
46451: PPUSH
46452: PPUSH
// pom := GetBase ( fac ) ;
46453: LD_ADDR_VAR 0 5
46457: PUSH
46458: LD_VAR 0 1
46462: PPUSH
46463: CALL_OW 274
46467: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46468: LD_ADDR_VAR 0 4
46472: PUSH
46473: LD_VAR 0 2
46477: PUSH
46478: LD_INT 1
46480: ARRAY
46481: PPUSH
46482: LD_VAR 0 2
46486: PUSH
46487: LD_INT 2
46489: ARRAY
46490: PPUSH
46491: LD_VAR 0 2
46495: PUSH
46496: LD_INT 3
46498: ARRAY
46499: PPUSH
46500: LD_VAR 0 2
46504: PUSH
46505: LD_INT 4
46507: ARRAY
46508: PPUSH
46509: CALL_OW 449
46513: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46514: LD_ADDR_VAR 0 3
46518: PUSH
46519: LD_VAR 0 5
46523: PPUSH
46524: LD_INT 1
46526: PPUSH
46527: CALL_OW 275
46531: PUSH
46532: LD_VAR 0 4
46536: PUSH
46537: LD_INT 1
46539: ARRAY
46540: GREATEREQUAL
46541: PUSH
46542: LD_VAR 0 5
46546: PPUSH
46547: LD_INT 2
46549: PPUSH
46550: CALL_OW 275
46554: PUSH
46555: LD_VAR 0 4
46559: PUSH
46560: LD_INT 2
46562: ARRAY
46563: GREATEREQUAL
46564: AND
46565: PUSH
46566: LD_VAR 0 5
46570: PPUSH
46571: LD_INT 3
46573: PPUSH
46574: CALL_OW 275
46578: PUSH
46579: LD_VAR 0 4
46583: PUSH
46584: LD_INT 3
46586: ARRAY
46587: GREATEREQUAL
46588: AND
46589: ST_TO_ADDR
// end ;
46590: LD_VAR 0 3
46594: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46595: LD_INT 0
46597: PPUSH
46598: PPUSH
46599: PPUSH
46600: PPUSH
// pom := GetBase ( building ) ;
46601: LD_ADDR_VAR 0 3
46605: PUSH
46606: LD_VAR 0 1
46610: PPUSH
46611: CALL_OW 274
46615: ST_TO_ADDR
// if not pom then
46616: LD_VAR 0 3
46620: NOT
46621: IFFALSE 46625
// exit ;
46623: GO 46795
// btype := GetBType ( building ) ;
46625: LD_ADDR_VAR 0 5
46629: PUSH
46630: LD_VAR 0 1
46634: PPUSH
46635: CALL_OW 266
46639: ST_TO_ADDR
// if btype = b_armoury then
46640: LD_VAR 0 5
46644: PUSH
46645: LD_INT 4
46647: EQUAL
46648: IFFALSE 46658
// btype := b_barracks ;
46650: LD_ADDR_VAR 0 5
46654: PUSH
46655: LD_INT 5
46657: ST_TO_ADDR
// if btype = b_depot then
46658: LD_VAR 0 5
46662: PUSH
46663: LD_INT 0
46665: EQUAL
46666: IFFALSE 46676
// btype := b_warehouse ;
46668: LD_ADDR_VAR 0 5
46672: PUSH
46673: LD_INT 1
46675: ST_TO_ADDR
// if btype = b_workshop then
46676: LD_VAR 0 5
46680: PUSH
46681: LD_INT 2
46683: EQUAL
46684: IFFALSE 46694
// btype := b_factory ;
46686: LD_ADDR_VAR 0 5
46690: PUSH
46691: LD_INT 3
46693: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46694: LD_ADDR_VAR 0 4
46698: PUSH
46699: LD_VAR 0 5
46703: PPUSH
46704: LD_VAR 0 1
46708: PPUSH
46709: CALL_OW 248
46713: PPUSH
46714: CALL_OW 450
46718: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46719: LD_ADDR_VAR 0 2
46723: PUSH
46724: LD_VAR 0 3
46728: PPUSH
46729: LD_INT 1
46731: PPUSH
46732: CALL_OW 275
46736: PUSH
46737: LD_VAR 0 4
46741: PUSH
46742: LD_INT 1
46744: ARRAY
46745: GREATEREQUAL
46746: PUSH
46747: LD_VAR 0 3
46751: PPUSH
46752: LD_INT 2
46754: PPUSH
46755: CALL_OW 275
46759: PUSH
46760: LD_VAR 0 4
46764: PUSH
46765: LD_INT 2
46767: ARRAY
46768: GREATEREQUAL
46769: AND
46770: PUSH
46771: LD_VAR 0 3
46775: PPUSH
46776: LD_INT 3
46778: PPUSH
46779: CALL_OW 275
46783: PUSH
46784: LD_VAR 0 4
46788: PUSH
46789: LD_INT 3
46791: ARRAY
46792: GREATEREQUAL
46793: AND
46794: ST_TO_ADDR
// end ;
46795: LD_VAR 0 2
46799: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46800: LD_INT 0
46802: PPUSH
46803: PPUSH
46804: PPUSH
// pom := GetBase ( building ) ;
46805: LD_ADDR_VAR 0 4
46809: PUSH
46810: LD_VAR 0 1
46814: PPUSH
46815: CALL_OW 274
46819: ST_TO_ADDR
// if not pom then
46820: LD_VAR 0 4
46824: NOT
46825: IFFALSE 46829
// exit ;
46827: GO 46930
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46829: LD_ADDR_VAR 0 5
46833: PUSH
46834: LD_VAR 0 2
46838: PPUSH
46839: LD_VAR 0 1
46843: PPUSH
46844: CALL_OW 248
46848: PPUSH
46849: CALL_OW 450
46853: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46854: LD_ADDR_VAR 0 3
46858: PUSH
46859: LD_VAR 0 4
46863: PPUSH
46864: LD_INT 1
46866: PPUSH
46867: CALL_OW 275
46871: PUSH
46872: LD_VAR 0 5
46876: PUSH
46877: LD_INT 1
46879: ARRAY
46880: GREATEREQUAL
46881: PUSH
46882: LD_VAR 0 4
46886: PPUSH
46887: LD_INT 2
46889: PPUSH
46890: CALL_OW 275
46894: PUSH
46895: LD_VAR 0 5
46899: PUSH
46900: LD_INT 2
46902: ARRAY
46903: GREATEREQUAL
46904: AND
46905: PUSH
46906: LD_VAR 0 4
46910: PPUSH
46911: LD_INT 3
46913: PPUSH
46914: CALL_OW 275
46918: PUSH
46919: LD_VAR 0 5
46923: PUSH
46924: LD_INT 3
46926: ARRAY
46927: GREATEREQUAL
46928: AND
46929: ST_TO_ADDR
// end ;
46930: LD_VAR 0 3
46934: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46935: LD_INT 0
46937: PPUSH
46938: PPUSH
46939: PPUSH
46940: PPUSH
46941: PPUSH
46942: PPUSH
46943: PPUSH
46944: PPUSH
46945: PPUSH
46946: PPUSH
46947: PPUSH
// result := false ;
46948: LD_ADDR_VAR 0 8
46952: PUSH
46953: LD_INT 0
46955: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46956: LD_VAR 0 5
46960: NOT
46961: PUSH
46962: LD_VAR 0 1
46966: NOT
46967: OR
46968: PUSH
46969: LD_VAR 0 2
46973: NOT
46974: OR
46975: PUSH
46976: LD_VAR 0 3
46980: NOT
46981: OR
46982: IFFALSE 46986
// exit ;
46984: GO 47800
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46986: LD_ADDR_VAR 0 14
46990: PUSH
46991: LD_VAR 0 1
46995: PPUSH
46996: LD_VAR 0 2
47000: PPUSH
47001: LD_VAR 0 3
47005: PPUSH
47006: LD_VAR 0 4
47010: PPUSH
47011: LD_VAR 0 5
47015: PUSH
47016: LD_INT 1
47018: ARRAY
47019: PPUSH
47020: CALL_OW 248
47024: PPUSH
47025: LD_INT 0
47027: PPUSH
47028: CALL 49033 0 6
47032: ST_TO_ADDR
// if not hexes then
47033: LD_VAR 0 14
47037: NOT
47038: IFFALSE 47042
// exit ;
47040: GO 47800
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47042: LD_ADDR_VAR 0 17
47046: PUSH
47047: LD_VAR 0 5
47051: PPUSH
47052: LD_INT 22
47054: PUSH
47055: LD_VAR 0 13
47059: PPUSH
47060: CALL_OW 255
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: LD_INT 30
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 30
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: LIST
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PPUSH
47101: CALL_OW 72
47105: ST_TO_ADDR
// for i = 1 to hexes do
47106: LD_ADDR_VAR 0 9
47110: PUSH
47111: DOUBLE
47112: LD_INT 1
47114: DEC
47115: ST_TO_ADDR
47116: LD_VAR 0 14
47120: PUSH
47121: FOR_TO
47122: IFFALSE 47798
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47124: LD_ADDR_VAR 0 13
47128: PUSH
47129: LD_VAR 0 14
47133: PUSH
47134: LD_VAR 0 9
47138: ARRAY
47139: PUSH
47140: LD_INT 1
47142: ARRAY
47143: PPUSH
47144: LD_VAR 0 14
47148: PUSH
47149: LD_VAR 0 9
47153: ARRAY
47154: PUSH
47155: LD_INT 2
47157: ARRAY
47158: PPUSH
47159: CALL_OW 428
47163: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47164: LD_VAR 0 14
47168: PUSH
47169: LD_VAR 0 9
47173: ARRAY
47174: PUSH
47175: LD_INT 1
47177: ARRAY
47178: PPUSH
47179: LD_VAR 0 14
47183: PUSH
47184: LD_VAR 0 9
47188: ARRAY
47189: PUSH
47190: LD_INT 2
47192: ARRAY
47193: PPUSH
47194: CALL_OW 351
47198: PUSH
47199: LD_VAR 0 14
47203: PUSH
47204: LD_VAR 0 9
47208: ARRAY
47209: PUSH
47210: LD_INT 1
47212: ARRAY
47213: PPUSH
47214: LD_VAR 0 14
47218: PUSH
47219: LD_VAR 0 9
47223: ARRAY
47224: PUSH
47225: LD_INT 2
47227: ARRAY
47228: PPUSH
47229: CALL_OW 488
47233: NOT
47234: OR
47235: PUSH
47236: LD_VAR 0 13
47240: PPUSH
47241: CALL_OW 247
47245: PUSH
47246: LD_INT 3
47248: EQUAL
47249: OR
47250: IFFALSE 47256
// exit ;
47252: POP
47253: POP
47254: GO 47800
// if not tmp then
47256: LD_VAR 0 13
47260: NOT
47261: IFFALSE 47265
// continue ;
47263: GO 47121
// result := true ;
47265: LD_ADDR_VAR 0 8
47269: PUSH
47270: LD_INT 1
47272: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47273: LD_VAR 0 6
47277: PUSH
47278: LD_VAR 0 13
47282: PPUSH
47283: CALL_OW 247
47287: PUSH
47288: LD_INT 2
47290: EQUAL
47291: AND
47292: PUSH
47293: LD_VAR 0 13
47297: PPUSH
47298: CALL_OW 263
47302: PUSH
47303: LD_INT 1
47305: EQUAL
47306: AND
47307: IFFALSE 47471
// begin if IsDrivenBy ( tmp ) then
47309: LD_VAR 0 13
47313: PPUSH
47314: CALL_OW 311
47318: IFFALSE 47322
// continue ;
47320: GO 47121
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47322: LD_VAR 0 6
47326: PPUSH
47327: LD_INT 3
47329: PUSH
47330: LD_INT 60
47332: PUSH
47333: EMPTY
47334: LIST
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 3
47342: PUSH
47343: LD_INT 55
47345: PUSH
47346: EMPTY
47347: LIST
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PPUSH
47357: CALL_OW 72
47361: IFFALSE 47469
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47363: LD_ADDR_VAR 0 18
47367: PUSH
47368: LD_VAR 0 6
47372: PPUSH
47373: LD_INT 3
47375: PUSH
47376: LD_INT 60
47378: PUSH
47379: EMPTY
47380: LIST
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 3
47388: PUSH
47389: LD_INT 55
47391: PUSH
47392: EMPTY
47393: LIST
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PPUSH
47403: CALL_OW 72
47407: PUSH
47408: LD_INT 1
47410: ARRAY
47411: ST_TO_ADDR
// if IsInUnit ( driver ) then
47412: LD_VAR 0 18
47416: PPUSH
47417: CALL_OW 310
47421: IFFALSE 47432
// ComExit ( driver ) ;
47423: LD_VAR 0 18
47427: PPUSH
47428: CALL 72721 0 1
// AddComEnterUnit ( driver , tmp ) ;
47432: LD_VAR 0 18
47436: PPUSH
47437: LD_VAR 0 13
47441: PPUSH
47442: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47446: LD_VAR 0 18
47450: PPUSH
47451: LD_VAR 0 7
47455: PPUSH
47456: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47460: LD_VAR 0 18
47464: PPUSH
47465: CALL_OW 181
// end ; continue ;
47469: GO 47121
// end ; if not cleaners or not tmp in cleaners then
47471: LD_VAR 0 6
47475: NOT
47476: PUSH
47477: LD_VAR 0 13
47481: PUSH
47482: LD_VAR 0 6
47486: IN
47487: NOT
47488: OR
47489: IFFALSE 47796
// begin if dep then
47491: LD_VAR 0 17
47495: IFFALSE 47631
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47497: LD_ADDR_VAR 0 16
47501: PUSH
47502: LD_VAR 0 17
47506: PUSH
47507: LD_INT 1
47509: ARRAY
47510: PPUSH
47511: CALL_OW 250
47515: PPUSH
47516: LD_VAR 0 17
47520: PUSH
47521: LD_INT 1
47523: ARRAY
47524: PPUSH
47525: CALL_OW 254
47529: PPUSH
47530: LD_INT 5
47532: PPUSH
47533: CALL_OW 272
47537: PUSH
47538: LD_VAR 0 17
47542: PUSH
47543: LD_INT 1
47545: ARRAY
47546: PPUSH
47547: CALL_OW 251
47551: PPUSH
47552: LD_VAR 0 17
47556: PUSH
47557: LD_INT 1
47559: ARRAY
47560: PPUSH
47561: CALL_OW 254
47565: PPUSH
47566: LD_INT 5
47568: PPUSH
47569: CALL_OW 273
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47578: LD_VAR 0 16
47582: PUSH
47583: LD_INT 1
47585: ARRAY
47586: PPUSH
47587: LD_VAR 0 16
47591: PUSH
47592: LD_INT 2
47594: ARRAY
47595: PPUSH
47596: CALL_OW 488
47600: IFFALSE 47631
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47602: LD_VAR 0 13
47606: PPUSH
47607: LD_VAR 0 16
47611: PUSH
47612: LD_INT 1
47614: ARRAY
47615: PPUSH
47616: LD_VAR 0 16
47620: PUSH
47621: LD_INT 2
47623: ARRAY
47624: PPUSH
47625: CALL_OW 111
// continue ;
47629: GO 47121
// end ; end ; r := GetDir ( tmp ) ;
47631: LD_ADDR_VAR 0 15
47635: PUSH
47636: LD_VAR 0 13
47640: PPUSH
47641: CALL_OW 254
47645: ST_TO_ADDR
// if r = 5 then
47646: LD_VAR 0 15
47650: PUSH
47651: LD_INT 5
47653: EQUAL
47654: IFFALSE 47664
// r := 0 ;
47656: LD_ADDR_VAR 0 15
47660: PUSH
47661: LD_INT 0
47663: ST_TO_ADDR
// for j = r to 5 do
47664: LD_ADDR_VAR 0 10
47668: PUSH
47669: DOUBLE
47670: LD_VAR 0 15
47674: DEC
47675: ST_TO_ADDR
47676: LD_INT 5
47678: PUSH
47679: FOR_TO
47680: IFFALSE 47794
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47682: LD_ADDR_VAR 0 11
47686: PUSH
47687: LD_VAR 0 13
47691: PPUSH
47692: CALL_OW 250
47696: PPUSH
47697: LD_VAR 0 10
47701: PPUSH
47702: LD_INT 2
47704: PPUSH
47705: CALL_OW 272
47709: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47710: LD_ADDR_VAR 0 12
47714: PUSH
47715: LD_VAR 0 13
47719: PPUSH
47720: CALL_OW 251
47724: PPUSH
47725: LD_VAR 0 10
47729: PPUSH
47730: LD_INT 2
47732: PPUSH
47733: CALL_OW 273
47737: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47738: LD_VAR 0 11
47742: PPUSH
47743: LD_VAR 0 12
47747: PPUSH
47748: CALL_OW 488
47752: PUSH
47753: LD_VAR 0 11
47757: PPUSH
47758: LD_VAR 0 12
47762: PPUSH
47763: CALL_OW 428
47767: NOT
47768: AND
47769: IFFALSE 47792
// begin ComMoveXY ( tmp , _x , _y ) ;
47771: LD_VAR 0 13
47775: PPUSH
47776: LD_VAR 0 11
47780: PPUSH
47781: LD_VAR 0 12
47785: PPUSH
47786: CALL_OW 111
// break ;
47790: GO 47794
// end ; end ;
47792: GO 47679
47794: POP
47795: POP
// end ; end ;
47796: GO 47121
47798: POP
47799: POP
// end ;
47800: LD_VAR 0 8
47804: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47805: LD_INT 0
47807: PPUSH
// result := true ;
47808: LD_ADDR_VAR 0 3
47812: PUSH
47813: LD_INT 1
47815: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47816: LD_VAR 0 2
47820: PUSH
47821: LD_INT 24
47823: DOUBLE
47824: EQUAL
47825: IFTRUE 47835
47827: LD_INT 33
47829: DOUBLE
47830: EQUAL
47831: IFTRUE 47835
47833: GO 47860
47835: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47836: LD_ADDR_VAR 0 3
47840: PUSH
47841: LD_INT 32
47843: PPUSH
47844: LD_VAR 0 1
47848: PPUSH
47849: CALL_OW 321
47853: PUSH
47854: LD_INT 2
47856: EQUAL
47857: ST_TO_ADDR
47858: GO 48176
47860: LD_INT 20
47862: DOUBLE
47863: EQUAL
47864: IFTRUE 47868
47866: GO 47893
47868: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47869: LD_ADDR_VAR 0 3
47873: PUSH
47874: LD_INT 6
47876: PPUSH
47877: LD_VAR 0 1
47881: PPUSH
47882: CALL_OW 321
47886: PUSH
47887: LD_INT 2
47889: EQUAL
47890: ST_TO_ADDR
47891: GO 48176
47893: LD_INT 22
47895: DOUBLE
47896: EQUAL
47897: IFTRUE 47907
47899: LD_INT 36
47901: DOUBLE
47902: EQUAL
47903: IFTRUE 47907
47905: GO 47932
47907: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47908: LD_ADDR_VAR 0 3
47912: PUSH
47913: LD_INT 15
47915: PPUSH
47916: LD_VAR 0 1
47920: PPUSH
47921: CALL_OW 321
47925: PUSH
47926: LD_INT 2
47928: EQUAL
47929: ST_TO_ADDR
47930: GO 48176
47932: LD_INT 30
47934: DOUBLE
47935: EQUAL
47936: IFTRUE 47940
47938: GO 47965
47940: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47941: LD_ADDR_VAR 0 3
47945: PUSH
47946: LD_INT 20
47948: PPUSH
47949: LD_VAR 0 1
47953: PPUSH
47954: CALL_OW 321
47958: PUSH
47959: LD_INT 2
47961: EQUAL
47962: ST_TO_ADDR
47963: GO 48176
47965: LD_INT 28
47967: DOUBLE
47968: EQUAL
47969: IFTRUE 47979
47971: LD_INT 21
47973: DOUBLE
47974: EQUAL
47975: IFTRUE 47979
47977: GO 48004
47979: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47980: LD_ADDR_VAR 0 3
47984: PUSH
47985: LD_INT 21
47987: PPUSH
47988: LD_VAR 0 1
47992: PPUSH
47993: CALL_OW 321
47997: PUSH
47998: LD_INT 2
48000: EQUAL
48001: ST_TO_ADDR
48002: GO 48176
48004: LD_INT 16
48006: DOUBLE
48007: EQUAL
48008: IFTRUE 48012
48010: GO 48037
48012: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48013: LD_ADDR_VAR 0 3
48017: PUSH
48018: LD_INT 84
48020: PPUSH
48021: LD_VAR 0 1
48025: PPUSH
48026: CALL_OW 321
48030: PUSH
48031: LD_INT 2
48033: EQUAL
48034: ST_TO_ADDR
48035: GO 48176
48037: LD_INT 19
48039: DOUBLE
48040: EQUAL
48041: IFTRUE 48051
48043: LD_INT 23
48045: DOUBLE
48046: EQUAL
48047: IFTRUE 48051
48049: GO 48076
48051: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48052: LD_ADDR_VAR 0 3
48056: PUSH
48057: LD_INT 83
48059: PPUSH
48060: LD_VAR 0 1
48064: PPUSH
48065: CALL_OW 321
48069: PUSH
48070: LD_INT 2
48072: EQUAL
48073: ST_TO_ADDR
48074: GO 48176
48076: LD_INT 17
48078: DOUBLE
48079: EQUAL
48080: IFTRUE 48084
48082: GO 48109
48084: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48085: LD_ADDR_VAR 0 3
48089: PUSH
48090: LD_INT 39
48092: PPUSH
48093: LD_VAR 0 1
48097: PPUSH
48098: CALL_OW 321
48102: PUSH
48103: LD_INT 2
48105: EQUAL
48106: ST_TO_ADDR
48107: GO 48176
48109: LD_INT 18
48111: DOUBLE
48112: EQUAL
48113: IFTRUE 48117
48115: GO 48142
48117: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48118: LD_ADDR_VAR 0 3
48122: PUSH
48123: LD_INT 40
48125: PPUSH
48126: LD_VAR 0 1
48130: PPUSH
48131: CALL_OW 321
48135: PUSH
48136: LD_INT 2
48138: EQUAL
48139: ST_TO_ADDR
48140: GO 48176
48142: LD_INT 27
48144: DOUBLE
48145: EQUAL
48146: IFTRUE 48150
48148: GO 48175
48150: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48151: LD_ADDR_VAR 0 3
48155: PUSH
48156: LD_INT 35
48158: PPUSH
48159: LD_VAR 0 1
48163: PPUSH
48164: CALL_OW 321
48168: PUSH
48169: LD_INT 2
48171: EQUAL
48172: ST_TO_ADDR
48173: GO 48176
48175: POP
// end ;
48176: LD_VAR 0 3
48180: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48181: LD_INT 0
48183: PPUSH
48184: PPUSH
48185: PPUSH
48186: PPUSH
48187: PPUSH
48188: PPUSH
48189: PPUSH
48190: PPUSH
48191: PPUSH
48192: PPUSH
48193: PPUSH
// result := false ;
48194: LD_ADDR_VAR 0 6
48198: PUSH
48199: LD_INT 0
48201: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48202: LD_VAR 0 1
48206: NOT
48207: PUSH
48208: LD_VAR 0 1
48212: PPUSH
48213: CALL_OW 266
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: IN
48228: NOT
48229: OR
48230: PUSH
48231: LD_VAR 0 2
48235: NOT
48236: OR
48237: PUSH
48238: LD_VAR 0 5
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: LD_INT 1
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: LD_INT 3
48254: PUSH
48255: LD_INT 4
48257: PUSH
48258: LD_INT 5
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: IN
48269: NOT
48270: OR
48271: PUSH
48272: LD_VAR 0 3
48276: PPUSH
48277: LD_VAR 0 4
48281: PPUSH
48282: CALL_OW 488
48286: NOT
48287: OR
48288: IFFALSE 48292
// exit ;
48290: GO 49028
// side := GetSide ( depot ) ;
48292: LD_ADDR_VAR 0 9
48296: PUSH
48297: LD_VAR 0 1
48301: PPUSH
48302: CALL_OW 255
48306: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48307: LD_VAR 0 9
48311: PPUSH
48312: LD_VAR 0 2
48316: PPUSH
48317: CALL 47805 0 2
48321: NOT
48322: IFFALSE 48326
// exit ;
48324: GO 49028
// pom := GetBase ( depot ) ;
48326: LD_ADDR_VAR 0 10
48330: PUSH
48331: LD_VAR 0 1
48335: PPUSH
48336: CALL_OW 274
48340: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48341: LD_ADDR_VAR 0 11
48345: PUSH
48346: LD_VAR 0 2
48350: PPUSH
48351: LD_VAR 0 1
48355: PPUSH
48356: CALL_OW 248
48360: PPUSH
48361: CALL_OW 450
48365: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48366: LD_VAR 0 10
48370: PPUSH
48371: LD_INT 1
48373: PPUSH
48374: CALL_OW 275
48378: PUSH
48379: LD_VAR 0 11
48383: PUSH
48384: LD_INT 1
48386: ARRAY
48387: GREATEREQUAL
48388: PUSH
48389: LD_VAR 0 10
48393: PPUSH
48394: LD_INT 2
48396: PPUSH
48397: CALL_OW 275
48401: PUSH
48402: LD_VAR 0 11
48406: PUSH
48407: LD_INT 2
48409: ARRAY
48410: GREATEREQUAL
48411: AND
48412: PUSH
48413: LD_VAR 0 10
48417: PPUSH
48418: LD_INT 3
48420: PPUSH
48421: CALL_OW 275
48425: PUSH
48426: LD_VAR 0 11
48430: PUSH
48431: LD_INT 3
48433: ARRAY
48434: GREATEREQUAL
48435: AND
48436: NOT
48437: IFFALSE 48441
// exit ;
48439: GO 49028
// if GetBType ( depot ) = b_depot then
48441: LD_VAR 0 1
48445: PPUSH
48446: CALL_OW 266
48450: PUSH
48451: LD_INT 0
48453: EQUAL
48454: IFFALSE 48466
// dist := 28 else
48456: LD_ADDR_VAR 0 14
48460: PUSH
48461: LD_INT 28
48463: ST_TO_ADDR
48464: GO 48474
// dist := 36 ;
48466: LD_ADDR_VAR 0 14
48470: PUSH
48471: LD_INT 36
48473: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48474: LD_VAR 0 1
48478: PPUSH
48479: LD_VAR 0 3
48483: PPUSH
48484: LD_VAR 0 4
48488: PPUSH
48489: CALL_OW 297
48493: PUSH
48494: LD_VAR 0 14
48498: GREATER
48499: IFFALSE 48503
// exit ;
48501: GO 49028
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48503: LD_ADDR_VAR 0 12
48507: PUSH
48508: LD_VAR 0 2
48512: PPUSH
48513: LD_VAR 0 3
48517: PPUSH
48518: LD_VAR 0 4
48522: PPUSH
48523: LD_VAR 0 5
48527: PPUSH
48528: LD_VAR 0 1
48532: PPUSH
48533: CALL_OW 248
48537: PPUSH
48538: LD_INT 0
48540: PPUSH
48541: CALL 49033 0 6
48545: ST_TO_ADDR
// if not hexes then
48546: LD_VAR 0 12
48550: NOT
48551: IFFALSE 48555
// exit ;
48553: GO 49028
// hex := GetHexInfo ( x , y ) ;
48555: LD_ADDR_VAR 0 15
48559: PUSH
48560: LD_VAR 0 3
48564: PPUSH
48565: LD_VAR 0 4
48569: PPUSH
48570: CALL_OW 546
48574: ST_TO_ADDR
// if hex [ 1 ] then
48575: LD_VAR 0 15
48579: PUSH
48580: LD_INT 1
48582: ARRAY
48583: IFFALSE 48587
// exit ;
48585: GO 49028
// height := hex [ 2 ] ;
48587: LD_ADDR_VAR 0 13
48591: PUSH
48592: LD_VAR 0 15
48596: PUSH
48597: LD_INT 2
48599: ARRAY
48600: ST_TO_ADDR
// for i = 1 to hexes do
48601: LD_ADDR_VAR 0 7
48605: PUSH
48606: DOUBLE
48607: LD_INT 1
48609: DEC
48610: ST_TO_ADDR
48611: LD_VAR 0 12
48615: PUSH
48616: FOR_TO
48617: IFFALSE 48947
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48619: LD_VAR 0 12
48623: PUSH
48624: LD_VAR 0 7
48628: ARRAY
48629: PUSH
48630: LD_INT 1
48632: ARRAY
48633: PPUSH
48634: LD_VAR 0 12
48638: PUSH
48639: LD_VAR 0 7
48643: ARRAY
48644: PUSH
48645: LD_INT 2
48647: ARRAY
48648: PPUSH
48649: CALL_OW 488
48653: NOT
48654: PUSH
48655: LD_VAR 0 12
48659: PUSH
48660: LD_VAR 0 7
48664: ARRAY
48665: PUSH
48666: LD_INT 1
48668: ARRAY
48669: PPUSH
48670: LD_VAR 0 12
48674: PUSH
48675: LD_VAR 0 7
48679: ARRAY
48680: PUSH
48681: LD_INT 2
48683: ARRAY
48684: PPUSH
48685: CALL_OW 428
48689: PUSH
48690: LD_INT 0
48692: GREATER
48693: OR
48694: PUSH
48695: LD_VAR 0 12
48699: PUSH
48700: LD_VAR 0 7
48704: ARRAY
48705: PUSH
48706: LD_INT 1
48708: ARRAY
48709: PPUSH
48710: LD_VAR 0 12
48714: PUSH
48715: LD_VAR 0 7
48719: ARRAY
48720: PUSH
48721: LD_INT 2
48723: ARRAY
48724: PPUSH
48725: CALL_OW 351
48729: OR
48730: IFFALSE 48736
// exit ;
48732: POP
48733: POP
48734: GO 49028
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48736: LD_ADDR_VAR 0 8
48740: PUSH
48741: LD_VAR 0 12
48745: PUSH
48746: LD_VAR 0 7
48750: ARRAY
48751: PUSH
48752: LD_INT 1
48754: ARRAY
48755: PPUSH
48756: LD_VAR 0 12
48760: PUSH
48761: LD_VAR 0 7
48765: ARRAY
48766: PUSH
48767: LD_INT 2
48769: ARRAY
48770: PPUSH
48771: CALL_OW 546
48775: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48776: LD_VAR 0 8
48780: PUSH
48781: LD_INT 1
48783: ARRAY
48784: PUSH
48785: LD_VAR 0 8
48789: PUSH
48790: LD_INT 2
48792: ARRAY
48793: PUSH
48794: LD_VAR 0 13
48798: PUSH
48799: LD_INT 2
48801: PLUS
48802: GREATER
48803: OR
48804: PUSH
48805: LD_VAR 0 8
48809: PUSH
48810: LD_INT 2
48812: ARRAY
48813: PUSH
48814: LD_VAR 0 13
48818: PUSH
48819: LD_INT 2
48821: MINUS
48822: LESS
48823: OR
48824: PUSH
48825: LD_VAR 0 8
48829: PUSH
48830: LD_INT 3
48832: ARRAY
48833: PUSH
48834: LD_INT 0
48836: PUSH
48837: LD_INT 8
48839: PUSH
48840: LD_INT 9
48842: PUSH
48843: LD_INT 10
48845: PUSH
48846: LD_INT 11
48848: PUSH
48849: LD_INT 12
48851: PUSH
48852: LD_INT 13
48854: PUSH
48855: LD_INT 16
48857: PUSH
48858: LD_INT 17
48860: PUSH
48861: LD_INT 18
48863: PUSH
48864: LD_INT 19
48866: PUSH
48867: LD_INT 20
48869: PUSH
48870: LD_INT 21
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: IN
48888: NOT
48889: OR
48890: PUSH
48891: LD_VAR 0 8
48895: PUSH
48896: LD_INT 5
48898: ARRAY
48899: NOT
48900: OR
48901: PUSH
48902: LD_VAR 0 8
48906: PUSH
48907: LD_INT 6
48909: ARRAY
48910: PUSH
48911: LD_INT 1
48913: PUSH
48914: LD_INT 2
48916: PUSH
48917: LD_INT 7
48919: PUSH
48920: LD_INT 9
48922: PUSH
48923: LD_INT 10
48925: PUSH
48926: LD_INT 11
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: IN
48937: NOT
48938: OR
48939: IFFALSE 48945
// exit ;
48941: POP
48942: POP
48943: GO 49028
// end ;
48945: GO 48616
48947: POP
48948: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48949: LD_VAR 0 9
48953: PPUSH
48954: LD_VAR 0 3
48958: PPUSH
48959: LD_VAR 0 4
48963: PPUSH
48964: LD_INT 20
48966: PPUSH
48967: CALL 40980 0 4
48971: PUSH
48972: LD_INT 4
48974: ARRAY
48975: IFFALSE 48979
// exit ;
48977: GO 49028
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48979: LD_VAR 0 2
48983: PUSH
48984: LD_INT 29
48986: PUSH
48987: LD_INT 30
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: IN
48994: PUSH
48995: LD_VAR 0 3
48999: PPUSH
49000: LD_VAR 0 4
49004: PPUSH
49005: LD_VAR 0 9
49009: PPUSH
49010: CALL_OW 440
49014: NOT
49015: AND
49016: IFFALSE 49020
// exit ;
49018: GO 49028
// result := true ;
49020: LD_ADDR_VAR 0 6
49024: PUSH
49025: LD_INT 1
49027: ST_TO_ADDR
// end ;
49028: LD_VAR 0 6
49032: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49033: LD_INT 0
49035: PPUSH
49036: PPUSH
49037: PPUSH
49038: PPUSH
49039: PPUSH
49040: PPUSH
49041: PPUSH
49042: PPUSH
49043: PPUSH
49044: PPUSH
49045: PPUSH
49046: PPUSH
49047: PPUSH
49048: PPUSH
49049: PPUSH
49050: PPUSH
49051: PPUSH
49052: PPUSH
49053: PPUSH
49054: PPUSH
49055: PPUSH
49056: PPUSH
49057: PPUSH
49058: PPUSH
49059: PPUSH
49060: PPUSH
49061: PPUSH
49062: PPUSH
49063: PPUSH
49064: PPUSH
49065: PPUSH
49066: PPUSH
49067: PPUSH
49068: PPUSH
49069: PPUSH
49070: PPUSH
49071: PPUSH
49072: PPUSH
49073: PPUSH
49074: PPUSH
49075: PPUSH
49076: PPUSH
49077: PPUSH
49078: PPUSH
49079: PPUSH
49080: PPUSH
49081: PPUSH
49082: PPUSH
49083: PPUSH
49084: PPUSH
49085: PPUSH
49086: PPUSH
49087: PPUSH
49088: PPUSH
49089: PPUSH
49090: PPUSH
49091: PPUSH
49092: PPUSH
// result = [ ] ;
49093: LD_ADDR_VAR 0 7
49097: PUSH
49098: EMPTY
49099: ST_TO_ADDR
// temp_list = [ ] ;
49100: LD_ADDR_VAR 0 9
49104: PUSH
49105: EMPTY
49106: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49107: LD_VAR 0 4
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: LD_INT 2
49120: PUSH
49121: LD_INT 3
49123: PUSH
49124: LD_INT 4
49126: PUSH
49127: LD_INT 5
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: IN
49138: NOT
49139: PUSH
49140: LD_VAR 0 1
49144: PUSH
49145: LD_INT 0
49147: PUSH
49148: LD_INT 1
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: IN
49155: PUSH
49156: LD_VAR 0 5
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: LD_INT 2
49166: PUSH
49167: LD_INT 3
49169: PUSH
49170: EMPTY
49171: LIST
49172: LIST
49173: LIST
49174: IN
49175: NOT
49176: AND
49177: OR
49178: IFFALSE 49182
// exit ;
49180: GO 67573
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49182: LD_VAR 0 1
49186: PUSH
49187: LD_INT 6
49189: PUSH
49190: LD_INT 7
49192: PUSH
49193: LD_INT 8
49195: PUSH
49196: LD_INT 13
49198: PUSH
49199: LD_INT 12
49201: PUSH
49202: LD_INT 15
49204: PUSH
49205: LD_INT 11
49207: PUSH
49208: LD_INT 14
49210: PUSH
49211: LD_INT 10
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: IN
49225: IFFALSE 49235
// btype = b_lab ;
49227: LD_ADDR_VAR 0 1
49231: PUSH
49232: LD_INT 6
49234: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49235: LD_VAR 0 6
49239: PUSH
49240: LD_INT 0
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: LD_INT 2
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: LIST
49253: IN
49254: NOT
49255: PUSH
49256: LD_VAR 0 1
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: LD_INT 2
49269: PUSH
49270: LD_INT 3
49272: PUSH
49273: LD_INT 6
49275: PUSH
49276: LD_INT 36
49278: PUSH
49279: LD_INT 4
49281: PUSH
49282: LD_INT 5
49284: PUSH
49285: LD_INT 31
49287: PUSH
49288: LD_INT 32
49290: PUSH
49291: LD_INT 33
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: IN
49307: NOT
49308: PUSH
49309: LD_VAR 0 6
49313: PUSH
49314: LD_INT 1
49316: EQUAL
49317: AND
49318: OR
49319: PUSH
49320: LD_VAR 0 1
49324: PUSH
49325: LD_INT 2
49327: PUSH
49328: LD_INT 3
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: IN
49335: NOT
49336: PUSH
49337: LD_VAR 0 6
49341: PUSH
49342: LD_INT 2
49344: EQUAL
49345: AND
49346: OR
49347: IFFALSE 49357
// mode = 0 ;
49349: LD_ADDR_VAR 0 6
49353: PUSH
49354: LD_INT 0
49356: ST_TO_ADDR
// case mode of 0 :
49357: LD_VAR 0 6
49361: PUSH
49362: LD_INT 0
49364: DOUBLE
49365: EQUAL
49366: IFTRUE 49370
49368: GO 60823
49370: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49371: LD_ADDR_VAR 0 11
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: LD_INT 0
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: LD_INT 1
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 1
49440: NEG
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: LD_INT 1
49452: NEG
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 1
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: PUSH
49487: LD_INT 2
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: LD_INT 2
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: NEG
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: LD_INT 3
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: LD_INT 3
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49564: LD_ADDR_VAR 0 12
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: LD_INT 0
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 2
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 2
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 1
49676: NEG
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 2
49687: NEG
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 2
49698: NEG
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 2
49710: NEG
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 3
49721: NEG
49722: PUSH
49723: LD_INT 0
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 3
49732: NEG
49733: PUSH
49734: LD_INT 1
49736: NEG
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49760: LD_ADDR_VAR 0 13
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: LD_INT 1
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: LD_INT 1
49833: NEG
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 1
49841: NEG
49842: PUSH
49843: LD_INT 2
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 2
49895: NEG
49896: PUSH
49897: LD_INT 2
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 2
49907: NEG
49908: PUSH
49909: LD_INT 3
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 3
49919: NEG
49920: PUSH
49921: LD_INT 2
49923: NEG
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 3
49931: NEG
49932: PUSH
49933: LD_INT 3
49935: NEG
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49959: LD_ADDR_VAR 0 14
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: LD_INT 1
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: LD_INT 2
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: LD_INT 2
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: LD_INT 2
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: LD_INT 2
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: NEG
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: LD_INT 3
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: LD_INT 3
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: LD_INT 2
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50155: LD_ADDR_VAR 0 15
50159: PUSH
50160: LD_INT 0
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: LD_INT 1
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: LD_INT 0
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: LD_INT 1
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 2
50247: PUSH
50248: LD_INT 0
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 2
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 2
50289: NEG
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 2
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 3
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 3
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50348: LD_ADDR_VAR 0 16
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: LD_INT 1
50406: NEG
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 2
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 2
50451: PUSH
50452: LD_INT 2
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: LD_INT 2
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 2
50471: NEG
50472: PUSH
50473: LD_INT 1
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 2
50483: NEG
50484: PUSH
50485: LD_INT 2
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 3
50495: PUSH
50496: LD_INT 2
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 3
50505: PUSH
50506: LD_INT 3
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 2
50515: PUSH
50516: LD_INT 3
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50541: LD_ADDR_VAR 0 17
50545: PUSH
50546: LD_INT 0
50548: PUSH
50549: LD_INT 0
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: LD_INT 1
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 1
50569: PUSH
50570: LD_INT 0
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: LD_INT 1
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: LD_INT 1
50592: PUSH
50593: EMPTY
50594: LIST
50595: LIST
50596: PUSH
50597: LD_INT 1
50599: NEG
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: LD_INT 1
50614: NEG
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: LD_INT 2
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 2
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 2
50676: PUSH
50677: LD_INT 2
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: PUSH
50687: LD_INT 2
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: LD_INT 2
50699: PUSH
50700: EMPTY
50701: LIST
50702: LIST
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 2
50717: NEG
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 2
50728: NEG
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 2
50740: NEG
50741: PUSH
50742: LD_INT 2
50744: NEG
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50771: LD_ADDR_VAR 0 18
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: LD_INT 1
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 1
50840: NEG
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: NEG
50853: PUSH
50854: LD_INT 2
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 2
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: PUSH
50876: LD_INT 1
50878: NEG
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 2
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 2
50896: PUSH
50897: LD_INT 1
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 2
50906: PUSH
50907: LD_INT 2
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: PUSH
50917: LD_INT 2
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: LD_INT 2
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 2
50947: NEG
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 2
50958: NEG
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: LD_INT 2
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51001: LD_ADDR_VAR 0 19
51005: PUSH
51006: LD_INT 0
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 1
51029: PUSH
51030: LD_INT 0
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: LD_INT 1
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: LD_INT 1
51059: NEG
51060: PUSH
51061: LD_INT 0
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: LD_INT 2
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 2
51097: NEG
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 2
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 2
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 2
51136: PUSH
51137: LD_INT 2
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: LD_INT 2
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 0
51156: PUSH
51157: LD_INT 2
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: NEG
51178: PUSH
51179: LD_INT 0
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 2
51188: NEG
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 2
51200: NEG
51201: PUSH
51202: LD_INT 2
51204: NEG
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51231: LD_ADDR_VAR 0 20
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: LD_INT 0
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: LD_INT 1
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: LD_INT 1
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: LD_INT 2
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 2
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 2
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 2
51356: PUSH
51357: LD_INT 1
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 2
51366: PUSH
51367: LD_INT 2
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: LD_INT 2
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 0
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 1
51396: NEG
51397: PUSH
51398: LD_INT 1
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 2
51407: NEG
51408: PUSH
51409: LD_INT 0
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 2
51418: NEG
51419: PUSH
51420: LD_INT 1
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 2
51430: NEG
51431: PUSH
51432: LD_INT 2
51434: NEG
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51461: LD_ADDR_VAR 0 21
51465: PUSH
51466: LD_INT 0
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: LD_INT 0
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 2
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 0
51554: PUSH
51555: LD_INT 2
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 2
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 2
51596: PUSH
51597: LD_INT 2
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: LD_INT 2
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: LD_INT 2
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 2
51637: NEG
51638: PUSH
51639: LD_INT 0
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 2
51648: NEG
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 2
51660: NEG
51661: PUSH
51662: LD_INT 2
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51691: LD_ADDR_VAR 0 22
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: LD_INT 1
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 1
51719: PUSH
51720: LD_INT 0
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: PUSH
51730: LD_INT 1
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: LD_INT 1
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: LD_INT 0
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: LD_INT 1
51764: NEG
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: LD_INT 2
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 2
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 2
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: LD_INT 2
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: LD_INT 2
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: LD_INT 1
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 2
51867: NEG
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 2
51878: NEG
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 2
51890: NEG
51891: PUSH
51892: LD_INT 2
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51921: LD_ADDR_VAR 0 23
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: LD_INT 1
51941: NEG
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 1
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: NEG
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: LD_INT 2
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: LD_INT 2
52017: NEG
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 1
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 2
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 2
52046: PUSH
52047: LD_INT 1
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 2
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: LD_INT 2
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 2
52097: NEG
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 2
52108: NEG
52109: PUSH
52110: LD_INT 1
52112: NEG
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 2
52120: NEG
52121: PUSH
52122: LD_INT 2
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: NEG
52133: PUSH
52134: LD_INT 3
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: NEG
52145: PUSH
52146: LD_INT 3
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: LD_INT 2
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 2
52167: PUSH
52168: LD_INT 1
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52201: LD_ADDR_VAR 0 24
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: LD_INT 0
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: LD_INT 1
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 1
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: PUSH
52240: LD_INT 1
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 0
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: NEG
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: LD_INT 2
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: LD_INT 2
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 2
52316: PUSH
52317: LD_INT 0
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 2
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: LD_INT 2
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: LD_INT 2
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: LD_INT 2
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 2
52377: NEG
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 2
52400: NEG
52401: PUSH
52402: LD_INT 2
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: LD_INT 2
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 2
52423: PUSH
52424: LD_INT 1
52426: NEG
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 3
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 3
52444: PUSH
52445: LD_INT 2
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52477: LD_ADDR_VAR 0 25
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: LD_INT 0
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: LD_INT 0
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: PUSH
52506: LD_INT 0
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: LD_INT 1
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 0
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: LD_INT 0
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 1
52546: NEG
52547: PUSH
52548: LD_INT 1
52550: NEG
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: LD_INT 2
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 2
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 2
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 2
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 2
52612: PUSH
52613: LD_INT 2
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: PUSH
52623: LD_INT 2
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: LD_INT 2
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 2
52653: NEG
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 2
52664: NEG
52665: PUSH
52666: LD_INT 1
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 2
52676: NEG
52677: PUSH
52678: LD_INT 2
52680: NEG
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 3
52688: PUSH
52689: LD_INT 1
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 3
52698: PUSH
52699: LD_INT 2
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 2
52708: PUSH
52709: LD_INT 3
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: LD_INT 3
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52751: LD_ADDR_VAR 0 26
52755: PUSH
52756: LD_INT 0
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 1
52779: PUSH
52780: LD_INT 0
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: NEG
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: LD_INT 1
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: LD_INT 2
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 0
52844: PUSH
52845: LD_INT 2
52847: NEG
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 2
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 2
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: LD_INT 2
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: LD_INT 2
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: LD_INT 2
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 1
52916: NEG
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 2
52927: NEG
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 2
52938: NEG
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 2
52950: NEG
52951: PUSH
52952: LD_INT 2
52954: NEG
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 2
52962: PUSH
52963: LD_INT 3
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: LD_INT 3
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: LD_INT 2
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 2
52993: NEG
52994: PUSH
52995: LD_INT 1
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53027: LD_ADDR_VAR 0 27
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 1
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: LD_INT 1
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: LD_INT 2
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 0
53120: PUSH
53121: LD_INT 2
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 2
53142: PUSH
53143: LD_INT 0
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 2
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 2
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: PUSH
53173: LD_INT 2
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: LD_INT 2
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 2
53203: NEG
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 2
53214: NEG
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 2
53226: NEG
53227: PUSH
53228: LD_INT 2
53230: NEG
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 1
53238: NEG
53239: PUSH
53240: LD_INT 2
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 2
53249: NEG
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 3
53260: NEG
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 3
53272: NEG
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53307: LD_ADDR_VAR 0 28
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: LD_INT 0
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 1
53365: NEG
53366: PUSH
53367: LD_INT 0
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 1
53376: NEG
53377: PUSH
53378: LD_INT 1
53380: NEG
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: LD_INT 2
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: LD_INT 2
53403: NEG
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 2
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 2
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: LD_INT 2
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 2
53494: NEG
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: LD_INT 2
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 2
53518: NEG
53519: PUSH
53520: LD_INT 3
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 1
53530: NEG
53531: PUSH
53532: LD_INT 3
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 3
53542: NEG
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 3
53554: NEG
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53589: LD_ADDR_VAR 0 29
53593: PUSH
53594: LD_INT 0
53596: PUSH
53597: LD_INT 0
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: LD_INT 1
53609: NEG
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 0
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: LD_INT 2
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 2
53704: PUSH
53705: LD_INT 0
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 2
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: LD_INT 2
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 2
53755: NEG
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 2
53767: NEG
53768: PUSH
53769: LD_INT 2
53771: NEG
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 2
53779: NEG
53780: PUSH
53781: LD_INT 3
53783: NEG
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 3
53802: PUSH
53803: LD_INT 1
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 1
53812: PUSH
53813: LD_INT 3
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: LD_INT 2
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 3
53833: NEG
53834: PUSH
53835: LD_INT 2
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53868: LD_ADDR_VAR 0 30
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: LD_INT 1
53888: NEG
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: LD_INT 0
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: LD_INT 1
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 1
53926: NEG
53927: PUSH
53928: LD_INT 0
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: LD_INT 1
53941: NEG
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: LD_INT 2
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 0
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: LD_INT 1
53975: NEG
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 2
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 2
54003: PUSH
54004: LD_INT 2
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: LD_INT 2
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 2
54034: NEG
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 2
54045: NEG
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 1
54057: NEG
54058: PUSH
54059: LD_INT 3
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: LD_INT 2
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 3
54080: PUSH
54081: LD_INT 2
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 2
54090: PUSH
54091: LD_INT 3
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 2
54100: NEG
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 3
54111: NEG
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54146: LD_ADDR_VAR 0 31
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: LD_INT 1
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: LD_INT 0
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: LD_INT 1
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 0
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 1
54204: NEG
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 1
54215: NEG
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 1
54227: NEG
54228: PUSH
54229: LD_INT 2
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 2
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: LD_INT 2
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: LD_INT 2
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: LD_INT 2
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: NEG
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 2
54311: NEG
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 2
54323: NEG
54324: PUSH
54325: LD_INT 2
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 2
54335: NEG
54336: PUSH
54337: LD_INT 3
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 2
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 3
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: LD_INT 3
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: LD_INT 2
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 3
54389: NEG
54390: PUSH
54391: LD_INT 2
54393: NEG
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: LIST
54420: LIST
54421: LIST
54422: LIST
54423: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54424: LD_ADDR_VAR 0 32
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: LD_INT 0
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 1
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: PUSH
54463: LD_INT 1
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: LD_INT 0
54472: PUSH
54473: LD_INT 1
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 1
54482: NEG
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: LD_INT 2
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: LD_INT 2
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 2
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 2
54549: PUSH
54550: LD_INT 2
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: LD_INT 2
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: LD_INT 2
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 2
54590: NEG
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 2
54601: NEG
54602: PUSH
54603: LD_INT 1
54605: NEG
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: LD_INT 3
54617: NEG
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 1
54625: PUSH
54626: LD_INT 2
54628: NEG
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 3
54636: PUSH
54637: LD_INT 2
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: LD_INT 3
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 2
54656: NEG
54657: PUSH
54658: LD_INT 1
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 3
54667: NEG
54668: PUSH
54669: LD_INT 1
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54702: LD_ADDR_VAR 0 33
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 1
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 0
54750: PUSH
54751: LD_INT 1
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: LD_INT 1
54775: NEG
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: LD_INT 2
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: LD_INT 1
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: LD_INT 2
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 2
54857: NEG
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 2
54868: NEG
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 2
54880: NEG
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 2
54892: NEG
54893: PUSH
54894: LD_INT 3
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 2
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 3
54915: PUSH
54916: LD_INT 1
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: LD_INT 3
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: LD_INT 2
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 3
54946: NEG
54947: PUSH
54948: LD_INT 2
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54981: LD_ADDR_VAR 0 34
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: NEG
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 2
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 2
55106: PUSH
55107: LD_INT 2
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: LD_INT 2
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 2
55148: NEG
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 2
55160: NEG
55161: PUSH
55162: LD_INT 2
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 1
55172: NEG
55173: PUSH
55174: LD_INT 3
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 1
55184: PUSH
55185: LD_INT 2
55187: NEG
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 3
55195: PUSH
55196: LD_INT 2
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: LD_INT 3
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 2
55215: NEG
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 3
55226: NEG
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55261: LD_ADDR_VAR 0 35
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: NEG
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 2
55342: PUSH
55343: LD_INT 1
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55373: LD_ADDR_VAR 0 36
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 2
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: LD_INT 2
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55485: LD_ADDR_VAR 0 37
55489: PUSH
55490: LD_INT 0
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: PUSH
55514: LD_INT 0
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 1
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: NEG
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 1
55554: NEG
55555: PUSH
55556: LD_INT 1
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: NEG
55578: PUSH
55579: LD_INT 1
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55597: LD_ADDR_VAR 0 38
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 0
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: LD_INT 1
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: NEG
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: NEG
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 2
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55709: LD_ADDR_VAR 0 39
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 0
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: NEG
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: LD_INT 2
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55821: LD_ADDR_VAR 0 40
55825: PUSH
55826: LD_INT 0
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 1
55841: NEG
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 1
55879: NEG
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 1
55890: NEG
55891: PUSH
55892: LD_INT 1
55894: NEG
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: LD_INT 1
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55933: LD_ADDR_VAR 0 41
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: LD_INT 0
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: LD_INT 1
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 1
56002: NEG
56003: PUSH
56004: LD_INT 1
56006: NEG
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 2
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 2
56057: PUSH
56058: LD_INT 2
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: LD_INT 2
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 2
56088: NEG
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 2
56099: NEG
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 2
56111: NEG
56112: PUSH
56113: LD_INT 2
56115: NEG
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 2
56123: NEG
56124: PUSH
56125: LD_INT 3
56127: NEG
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 2
56135: PUSH
56136: LD_INT 1
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 3
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 3
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 3
56166: PUSH
56167: LD_INT 2
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 3
56176: PUSH
56177: LD_INT 3
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 2
56186: PUSH
56187: LD_INT 3
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: LD_INT 1
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 3
56207: NEG
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 3
56218: NEG
56219: PUSH
56220: LD_INT 1
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 3
56230: NEG
56231: PUSH
56232: LD_INT 2
56234: NEG
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 3
56242: NEG
56243: PUSH
56244: LD_INT 3
56246: NEG
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56283: LD_ADDR_VAR 0 42
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: LD_INT 1
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 1
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: NEG
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: LD_INT 2
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: LD_INT 2
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 2
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 2
56408: PUSH
56409: LD_INT 2
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: PUSH
56419: LD_INT 2
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 0
56428: PUSH
56429: LD_INT 2
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 1
56438: NEG
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 2
56449: NEG
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 2
56461: NEG
56462: PUSH
56463: LD_INT 2
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 2
56473: NEG
56474: PUSH
56475: LD_INT 3
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: LD_INT 3
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 0
56497: PUSH
56498: LD_INT 3
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 3
56519: PUSH
56520: LD_INT 2
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 3
56529: PUSH
56530: LD_INT 3
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 2
56539: PUSH
56540: LD_INT 3
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: PUSH
56550: LD_INT 3
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: LD_INT 3
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 1
56569: NEG
56570: PUSH
56571: LD_INT 2
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 3
56580: NEG
56581: PUSH
56582: LD_INT 2
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 3
56592: NEG
56593: PUSH
56594: LD_INT 3
56596: NEG
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56633: LD_ADDR_VAR 0 43
56637: PUSH
56638: LD_INT 0
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: LD_INT 1
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 1
56661: PUSH
56662: LD_INT 0
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: LD_INT 1
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: LD_INT 2
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 0
56726: PUSH
56727: LD_INT 2
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 1
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 2
56748: PUSH
56749: LD_INT 0
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 2
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: PUSH
56769: LD_INT 2
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 0
56778: PUSH
56779: LD_INT 2
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: LD_INT 1
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 2
56799: NEG
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 2
56810: NEG
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: LD_INT 3
56826: NEG
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: LD_INT 3
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: LD_INT 2
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 2
56856: PUSH
56857: LD_INT 1
56859: NEG
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 3
56867: PUSH
56868: LD_INT 0
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 3
56877: PUSH
56878: LD_INT 1
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: LD_INT 3
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: LD_INT 3
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: LD_INT 2
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 2
56918: NEG
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 3
56929: NEG
56930: PUSH
56931: LD_INT 0
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 3
56940: NEG
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56981: LD_ADDR_VAR 0 44
56985: PUSH
56986: LD_INT 0
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: LD_INT 0
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 1
57019: PUSH
57020: LD_INT 1
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 0
57029: PUSH
57030: LD_INT 1
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: LD_INT 1
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: NEG
57063: PUSH
57064: LD_INT 2
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: LD_INT 1
57077: NEG
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 2
57085: PUSH
57086: LD_INT 0
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 2
57095: PUSH
57096: LD_INT 1
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 2
57105: PUSH
57106: LD_INT 2
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 1
57115: PUSH
57116: LD_INT 2
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: NEG
57126: PUSH
57127: LD_INT 1
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 2
57136: NEG
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 2
57147: NEG
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: LD_INT 2
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: LD_INT 3
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 3
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 3
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 3
57214: PUSH
57215: LD_INT 2
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 3
57224: PUSH
57225: LD_INT 3
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 2
57234: PUSH
57235: LD_INT 3
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 2
57244: NEG
57245: PUSH
57246: LD_INT 1
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 3
57255: NEG
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 3
57266: NEG
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PUSH
57276: LD_INT 3
57278: NEG
57279: PUSH
57280: LD_INT 2
57282: NEG
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 3
57290: NEG
57291: PUSH
57292: LD_INT 3
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57331: LD_ADDR_VAR 0 45
57335: PUSH
57336: LD_INT 0
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: LD_INT 1
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: PUSH
57360: LD_INT 0
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 1
57369: PUSH
57370: LD_INT 1
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: LD_INT 0
57379: PUSH
57380: LD_INT 1
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 1
57400: NEG
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: LD_INT 2
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 0
57424: PUSH
57425: LD_INT 2
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 1
57435: PUSH
57436: LD_INT 1
57438: NEG
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 2
57446: PUSH
57447: LD_INT 1
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 2
57456: PUSH
57457: LD_INT 2
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 1
57466: PUSH
57467: LD_INT 2
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: LD_INT 2
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 1
57486: NEG
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 2
57497: NEG
57498: PUSH
57499: LD_INT 1
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 2
57509: NEG
57510: PUSH
57511: LD_INT 2
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 2
57521: NEG
57522: PUSH
57523: LD_INT 3
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: NEG
57534: PUSH
57535: LD_INT 3
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: LD_INT 3
57548: NEG
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: LD_INT 2
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 3
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 3
57577: PUSH
57578: LD_INT 3
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 2
57587: PUSH
57588: LD_INT 3
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: LD_INT 3
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: LD_INT 3
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 1
57617: NEG
57618: PUSH
57619: LD_INT 2
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 3
57628: NEG
57629: PUSH
57630: LD_INT 2
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 3
57640: NEG
57641: PUSH
57642: LD_INT 3
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57681: LD_ADDR_VAR 0 46
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 1
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 0
57729: PUSH
57730: LD_INT 1
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 1
57739: NEG
57740: PUSH
57741: LD_INT 0
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 1
57750: NEG
57751: PUSH
57752: LD_INT 1
57754: NEG
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: PUSH
57760: LD_INT 1
57762: NEG
57763: PUSH
57764: LD_INT 2
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: LD_INT 2
57777: NEG
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 2
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 2
57806: PUSH
57807: LD_INT 1
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: LD_INT 2
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: LD_INT 2
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 1
57836: NEG
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 2
57847: NEG
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 2
57858: NEG
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 1
57870: NEG
57871: PUSH
57872: LD_INT 3
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 0
57882: PUSH
57883: LD_INT 3
57885: NEG
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 1
57893: PUSH
57894: LD_INT 2
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 2
57904: PUSH
57905: LD_INT 1
57907: NEG
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 3
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 3
57925: PUSH
57926: LD_INT 1
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: LD_INT 3
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: LD_INT 3
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: LD_INT 2
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 2
57966: NEG
57967: PUSH
57968: LD_INT 1
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 3
57977: NEG
57978: PUSH
57979: LD_INT 0
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 3
57988: NEG
57989: PUSH
57990: LD_INT 1
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58029: LD_ADDR_VAR 0 47
58033: PUSH
58034: LD_INT 0
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: LD_INT 1
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: LD_INT 0
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: LD_INT 1
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 0
58077: PUSH
58078: LD_INT 1
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: NEG
58088: PUSH
58089: LD_INT 0
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 1
58098: NEG
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: LD_INT 2
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 0
58122: PUSH
58123: LD_INT 2
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 2
58144: NEG
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 2
58156: NEG
58157: PUSH
58158: LD_INT 2
58160: NEG
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58180: LD_ADDR_VAR 0 48
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: LD_INT 0
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: LD_INT 1
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: PUSH
58209: LD_INT 0
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 0
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 1
58249: NEG
58250: PUSH
58251: LD_INT 1
58253: NEG
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: PUSH
58259: LD_INT 1
58261: NEG
58262: PUSH
58263: LD_INT 2
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: LD_INT 2
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 2
58295: PUSH
58296: LD_INT 0
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 2
58305: PUSH
58306: LD_INT 1
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58327: LD_ADDR_VAR 0 49
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: PUSH
58366: LD_INT 1
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: LD_INT 1
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 1
58385: NEG
58386: PUSH
58387: LD_INT 0
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: LD_INT 1
58400: NEG
58401: PUSH
58402: EMPTY
58403: LIST
58404: LIST
58405: PUSH
58406: LD_INT 1
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 2
58419: PUSH
58420: LD_INT 0
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 2
58429: PUSH
58430: LD_INT 1
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: LD_INT 2
58439: PUSH
58440: LD_INT 2
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: LD_INT 2
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58471: LD_ADDR_VAR 0 50
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: LD_INT 1
58491: NEG
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 1
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 1
58509: PUSH
58510: LD_INT 1
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: LD_INT 1
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: LD_INT 0
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 1
58540: NEG
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 2
58552: PUSH
58553: LD_INT 1
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 2
58562: PUSH
58563: LD_INT 2
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: LD_INT 2
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 0
58582: PUSH
58583: LD_INT 2
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: NEG
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58615: LD_ADDR_VAR 0 51
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: LD_INT 0
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 0
58632: PUSH
58633: LD_INT 1
58635: NEG
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: LD_INT 1
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 0
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: NEG
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: LD_INT 1
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: LD_INT 2
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 0
58706: PUSH
58707: LD_INT 2
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 1
58716: NEG
58717: PUSH
58718: LD_INT 1
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 2
58727: NEG
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 2
58738: NEG
58739: PUSH
58740: LD_INT 1
58742: NEG
58743: PUSH
58744: EMPTY
58745: LIST
58746: LIST
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58762: LD_ADDR_VAR 0 52
58766: PUSH
58767: LD_INT 0
58769: PUSH
58770: LD_INT 0
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 0
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 1
58790: PUSH
58791: LD_INT 0
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: PUSH
58801: LD_INT 1
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: LD_INT 1
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: NEG
58821: PUSH
58822: LD_INT 0
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: LD_INT 1
58835: NEG
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: LD_INT 2
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 1
58855: NEG
58856: PUSH
58857: LD_INT 1
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 2
58866: NEG
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 2
58877: NEG
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: PUSH
58887: LD_INT 2
58889: NEG
58890: PUSH
58891: LD_INT 2
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58913: LD_ADDR_VAR 0 53
58917: PUSH
58918: LD_INT 0
58920: PUSH
58921: LD_INT 0
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 0
58930: PUSH
58931: LD_INT 1
58933: NEG
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 1
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: LD_INT 1
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: LD_INT 1
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 1
58994: NEG
58995: PUSH
58996: LD_INT 2
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: LD_INT 2
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: LD_INT 1
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 2
59028: PUSH
59029: LD_INT 0
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 2
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 2
59048: PUSH
59049: LD_INT 2
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: LD_INT 2
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 0
59068: PUSH
59069: LD_INT 2
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 2
59089: NEG
59090: PUSH
59091: LD_INT 0
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: LD_INT 2
59100: NEG
59101: PUSH
59102: LD_INT 1
59104: NEG
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 2
59112: NEG
59113: PUSH
59114: LD_INT 2
59116: NEG
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59143: LD_ADDR_VAR 0 54
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: LD_INT 0
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 0
59191: PUSH
59192: LD_INT 1
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 1
59201: NEG
59202: PUSH
59203: LD_INT 0
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 1
59212: NEG
59213: PUSH
59214: LD_INT 1
59216: NEG
59217: PUSH
59218: EMPTY
59219: LIST
59220: LIST
59221: PUSH
59222: LD_INT 1
59224: NEG
59225: PUSH
59226: LD_INT 2
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: LD_INT 2
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: PUSH
59248: LD_INT 1
59250: NEG
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: LD_INT 0
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 2
59268: PUSH
59269: LD_INT 1
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 2
59278: PUSH
59279: LD_INT 2
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: PUSH
59289: LD_INT 2
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: LD_INT 2
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 1
59308: NEG
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 2
59319: NEG
59320: PUSH
59321: LD_INT 0
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 2
59330: NEG
59331: PUSH
59332: LD_INT 1
59334: NEG
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 2
59342: NEG
59343: PUSH
59344: LD_INT 2
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59373: LD_ADDR_VAR 0 55
59377: PUSH
59378: LD_INT 0
59380: PUSH
59381: LD_INT 0
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: LD_INT 1
59393: NEG
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 1
59401: PUSH
59402: LD_INT 0
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 1
59411: PUSH
59412: LD_INT 1
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 0
59421: PUSH
59422: LD_INT 1
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 1
59431: NEG
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 1
59442: NEG
59443: PUSH
59444: LD_INT 1
59446: NEG
59447: PUSH
59448: EMPTY
59449: LIST
59450: LIST
59451: PUSH
59452: LD_INT 1
59454: NEG
59455: PUSH
59456: LD_INT 2
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 0
59466: PUSH
59467: LD_INT 2
59469: NEG
59470: PUSH
59471: EMPTY
59472: LIST
59473: LIST
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 2
59488: PUSH
59489: LD_INT 0
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 2
59498: PUSH
59499: LD_INT 1
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 2
59508: PUSH
59509: LD_INT 2
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: LD_INT 2
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: LD_INT 2
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 1
59538: NEG
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 2
59549: NEG
59550: PUSH
59551: LD_INT 0
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 2
59560: NEG
59561: PUSH
59562: LD_INT 1
59564: NEG
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 2
59572: NEG
59573: PUSH
59574: LD_INT 2
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59603: LD_ADDR_VAR 0 56
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: LD_INT 1
59623: NEG
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 1
59631: PUSH
59632: LD_INT 0
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: LD_INT 1
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: LD_INT 1
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 1
59661: NEG
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 1
59672: NEG
59673: PUSH
59674: LD_INT 1
59676: NEG
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: PUSH
59686: LD_INT 2
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: LD_INT 2
59699: NEG
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 2
59718: PUSH
59719: LD_INT 0
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 2
59728: PUSH
59729: LD_INT 1
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 2
59738: PUSH
59739: LD_INT 2
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: PUSH
59749: LD_INT 2
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 0
59758: PUSH
59759: LD_INT 2
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 2
59779: NEG
59780: PUSH
59781: LD_INT 0
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: PUSH
59788: LD_INT 2
59790: NEG
59791: PUSH
59792: LD_INT 1
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 2
59802: NEG
59803: PUSH
59804: LD_INT 2
59806: NEG
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59833: LD_ADDR_VAR 0 57
59837: PUSH
59838: LD_INT 0
59840: PUSH
59841: LD_INT 0
59843: PUSH
59844: EMPTY
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: LD_INT 1
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 1
59861: PUSH
59862: LD_INT 0
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: LD_INT 1
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: LD_INT 1
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 1
59891: NEG
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 1
59902: NEG
59903: PUSH
59904: LD_INT 1
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 1
59914: NEG
59915: PUSH
59916: LD_INT 2
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 0
59926: PUSH
59927: LD_INT 2
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 1
59937: PUSH
59938: LD_INT 1
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 2
59948: PUSH
59949: LD_INT 0
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 2
59958: PUSH
59959: LD_INT 1
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 2
59968: PUSH
59969: LD_INT 2
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: PUSH
59979: LD_INT 2
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: LD_INT 2
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 1
59998: NEG
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 2
60009: NEG
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 2
60020: NEG
60021: PUSH
60022: LD_INT 1
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 2
60032: NEG
60033: PUSH
60034: LD_INT 2
60036: NEG
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60063: LD_ADDR_VAR 0 58
60067: PUSH
60068: LD_INT 0
60070: PUSH
60071: LD_INT 0
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: LD_INT 1
60083: NEG
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: LD_INT 0
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: PUSH
60102: LD_INT 1
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 0
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 1
60121: NEG
60122: PUSH
60123: LD_INT 0
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 1
60132: NEG
60133: PUSH
60134: LD_INT 1
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: LD_INT 2
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 0
60156: PUSH
60157: LD_INT 2
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 2
60178: PUSH
60179: LD_INT 0
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 2
60188: PUSH
60189: LD_INT 1
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 2
60198: PUSH
60199: LD_INT 2
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 1
60208: PUSH
60209: LD_INT 2
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 0
60218: PUSH
60219: LD_INT 2
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: NEG
60229: PUSH
60230: LD_INT 1
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 2
60239: NEG
60240: PUSH
60241: LD_INT 0
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 2
60250: NEG
60251: PUSH
60252: LD_INT 1
60254: NEG
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 2
60262: NEG
60263: PUSH
60264: LD_INT 2
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: LIST
60290: LIST
60291: LIST
60292: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60293: LD_ADDR_VAR 0 59
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: LD_INT 0
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: LD_INT 1
60313: NEG
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: LD_INT 0
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: LD_INT 1
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: LD_INT 1
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 1
60351: NEG
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: LD_INT 1
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60381: LD_ADDR_VAR 0 60
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: LD_INT 0
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: PUSH
60420: LD_INT 1
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 0
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 1
60439: NEG
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 1
60450: NEG
60451: PUSH
60452: LD_INT 1
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60469: LD_ADDR_VAR 0 61
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: LD_INT 0
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: LD_INT 1
60489: NEG
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 1
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 1
60507: PUSH
60508: LD_INT 1
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 0
60517: PUSH
60518: LD_INT 1
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 1
60527: NEG
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 1
60538: NEG
60539: PUSH
60540: LD_INT 1
60542: NEG
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60557: LD_ADDR_VAR 0 62
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 0
60574: PUSH
60575: LD_INT 1
60577: NEG
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 1
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 1
60595: PUSH
60596: LD_INT 1
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 1
60615: NEG
60616: PUSH
60617: LD_INT 0
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: LD_INT 1
60626: NEG
60627: PUSH
60628: LD_INT 1
60630: NEG
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60645: LD_ADDR_VAR 0 63
60649: PUSH
60650: LD_INT 0
60652: PUSH
60653: LD_INT 0
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 0
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 1
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 1
60683: PUSH
60684: LD_INT 1
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 0
60693: PUSH
60694: LD_INT 1
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: NEG
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 1
60714: NEG
60715: PUSH
60716: LD_INT 1
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60733: LD_ADDR_VAR 0 64
60737: PUSH
60738: LD_INT 0
60740: PUSH
60741: LD_INT 0
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: LD_INT 1
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: LD_INT 0
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 1
60771: PUSH
60772: LD_INT 1
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: LD_INT 0
60781: PUSH
60782: LD_INT 1
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 1
60791: NEG
60792: PUSH
60793: LD_INT 0
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 1
60802: NEG
60803: PUSH
60804: LD_INT 1
60806: NEG
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: ST_TO_ADDR
// end ; 1 :
60821: GO 66718
60823: LD_INT 1
60825: DOUBLE
60826: EQUAL
60827: IFTRUE 60831
60829: GO 63454
60831: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60832: LD_ADDR_VAR 0 11
60836: PUSH
60837: LD_INT 1
60839: NEG
60840: PUSH
60841: LD_INT 3
60843: NEG
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 0
60851: PUSH
60852: LD_INT 3
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: LD_INT 2
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: LIST
60875: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60876: LD_ADDR_VAR 0 12
60880: PUSH
60881: LD_INT 2
60883: PUSH
60884: LD_INT 1
60886: NEG
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 3
60894: PUSH
60895: LD_INT 0
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 3
60904: PUSH
60905: LD_INT 1
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: LIST
60916: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60917: LD_ADDR_VAR 0 13
60921: PUSH
60922: LD_INT 3
60924: PUSH
60925: LD_INT 2
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 3
60934: PUSH
60935: LD_INT 3
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: PUSH
60942: LD_INT 2
60944: PUSH
60945: LD_INT 3
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: LIST
60956: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60957: LD_ADDR_VAR 0 14
60961: PUSH
60962: LD_INT 1
60964: PUSH
60965: LD_INT 3
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: LD_INT 3
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 1
60984: NEG
60985: PUSH
60986: LD_INT 2
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: LIST
60997: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60998: LD_ADDR_VAR 0 15
61002: PUSH
61003: LD_INT 2
61005: NEG
61006: PUSH
61007: LD_INT 1
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 3
61016: NEG
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 3
61027: NEG
61028: PUSH
61029: LD_INT 1
61031: NEG
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: LIST
61041: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61042: LD_ADDR_VAR 0 16
61046: PUSH
61047: LD_INT 2
61049: NEG
61050: PUSH
61051: LD_INT 3
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 3
61061: NEG
61062: PUSH
61063: LD_INT 2
61065: NEG
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 3
61073: NEG
61074: PUSH
61075: LD_INT 3
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: LIST
61087: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61088: LD_ADDR_VAR 0 17
61092: PUSH
61093: LD_INT 1
61095: NEG
61096: PUSH
61097: LD_INT 3
61099: NEG
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: LD_INT 3
61110: NEG
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 1
61118: PUSH
61119: LD_INT 2
61121: NEG
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: LIST
61131: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61132: LD_ADDR_VAR 0 18
61136: PUSH
61137: LD_INT 2
61139: PUSH
61140: LD_INT 1
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 3
61150: PUSH
61151: LD_INT 0
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 3
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: LIST
61172: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61173: LD_ADDR_VAR 0 19
61177: PUSH
61178: LD_INT 3
61180: PUSH
61181: LD_INT 2
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 3
61190: PUSH
61191: LD_INT 3
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 2
61200: PUSH
61201: LD_INT 3
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: LIST
61212: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61213: LD_ADDR_VAR 0 20
61217: PUSH
61218: LD_INT 1
61220: PUSH
61221: LD_INT 3
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 0
61230: PUSH
61231: LD_INT 3
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 1
61240: NEG
61241: PUSH
61242: LD_INT 2
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: LIST
61253: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61254: LD_ADDR_VAR 0 21
61258: PUSH
61259: LD_INT 2
61261: NEG
61262: PUSH
61263: LD_INT 1
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 3
61272: NEG
61273: PUSH
61274: LD_INT 0
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 3
61283: NEG
61284: PUSH
61285: LD_INT 1
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: LIST
61297: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61298: LD_ADDR_VAR 0 22
61302: PUSH
61303: LD_INT 2
61305: NEG
61306: PUSH
61307: LD_INT 3
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 3
61317: NEG
61318: PUSH
61319: LD_INT 2
61321: NEG
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: PUSH
61327: LD_INT 3
61329: NEG
61330: PUSH
61331: LD_INT 3
61333: NEG
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: LIST
61343: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61344: LD_ADDR_VAR 0 23
61348: PUSH
61349: LD_INT 0
61351: PUSH
61352: LD_INT 3
61354: NEG
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 1
61362: NEG
61363: PUSH
61364: LD_INT 4
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 1
61374: PUSH
61375: LD_INT 3
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: LIST
61387: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61388: LD_ADDR_VAR 0 24
61392: PUSH
61393: LD_INT 3
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 3
61405: PUSH
61406: LD_INT 1
61408: NEG
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 4
61416: PUSH
61417: LD_INT 1
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: LIST
61428: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61429: LD_ADDR_VAR 0 25
61433: PUSH
61434: LD_INT 3
61436: PUSH
61437: LD_INT 3
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 4
61446: PUSH
61447: LD_INT 3
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 3
61456: PUSH
61457: LD_INT 4
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: LIST
61468: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61469: LD_ADDR_VAR 0 26
61473: PUSH
61474: LD_INT 0
61476: PUSH
61477: LD_INT 3
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 1
61486: PUSH
61487: LD_INT 4
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 1
61496: NEG
61497: PUSH
61498: LD_INT 3
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: LIST
61509: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61510: LD_ADDR_VAR 0 27
61514: PUSH
61515: LD_INT 3
61517: NEG
61518: PUSH
61519: LD_INT 0
61521: PUSH
61522: EMPTY
61523: LIST
61524: LIST
61525: PUSH
61526: LD_INT 3
61528: NEG
61529: PUSH
61530: LD_INT 1
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 4
61539: NEG
61540: PUSH
61541: LD_INT 1
61543: NEG
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: LIST
61553: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61554: LD_ADDR_VAR 0 28
61558: PUSH
61559: LD_INT 3
61561: NEG
61562: PUSH
61563: LD_INT 3
61565: NEG
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 3
61573: NEG
61574: PUSH
61575: LD_INT 4
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 4
61585: NEG
61586: PUSH
61587: LD_INT 3
61589: NEG
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: LIST
61599: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61600: LD_ADDR_VAR 0 29
61604: PUSH
61605: LD_INT 1
61607: NEG
61608: PUSH
61609: LD_INT 3
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 0
61619: PUSH
61620: LD_INT 3
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: LD_INT 2
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: NEG
61642: PUSH
61643: LD_INT 4
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 0
61653: PUSH
61654: LD_INT 4
61656: NEG
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 1
61664: PUSH
61665: LD_INT 3
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 1
61675: NEG
61676: PUSH
61677: LD_INT 5
61679: NEG
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: LD_INT 5
61690: NEG
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 1
61698: PUSH
61699: LD_INT 4
61701: NEG
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 1
61709: NEG
61710: PUSH
61711: LD_INT 6
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 0
61721: PUSH
61722: LD_INT 6
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 1
61732: PUSH
61733: LD_INT 5
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61755: LD_ADDR_VAR 0 30
61759: PUSH
61760: LD_INT 2
61762: PUSH
61763: LD_INT 1
61765: NEG
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 3
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 3
61783: PUSH
61784: LD_INT 1
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 3
61793: PUSH
61794: LD_INT 1
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 4
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 4
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: EMPTY
61819: LIST
61820: LIST
61821: PUSH
61822: LD_INT 4
61824: PUSH
61825: LD_INT 1
61827: NEG
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 5
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 5
61845: PUSH
61846: LD_INT 1
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 5
61855: PUSH
61856: LD_INT 1
61858: NEG
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: LD_INT 6
61866: PUSH
61867: LD_INT 0
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 6
61876: PUSH
61877: LD_INT 1
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61898: LD_ADDR_VAR 0 31
61902: PUSH
61903: LD_INT 3
61905: PUSH
61906: LD_INT 2
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 3
61915: PUSH
61916: LD_INT 3
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 2
61925: PUSH
61926: LD_INT 3
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 4
61935: PUSH
61936: LD_INT 3
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 4
61945: PUSH
61946: LD_INT 4
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 3
61955: PUSH
61956: LD_INT 4
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 5
61965: PUSH
61966: LD_INT 4
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 5
61975: PUSH
61976: LD_INT 5
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 4
61985: PUSH
61986: LD_INT 5
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 6
61995: PUSH
61996: LD_INT 5
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 6
62005: PUSH
62006: LD_INT 6
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 5
62015: PUSH
62016: LD_INT 6
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62037: LD_ADDR_VAR 0 32
62041: PUSH
62042: LD_INT 1
62044: PUSH
62045: LD_INT 3
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 0
62054: PUSH
62055: LD_INT 3
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 1
62064: NEG
62065: PUSH
62066: LD_INT 2
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 1
62075: PUSH
62076: LD_INT 4
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 0
62085: PUSH
62086: LD_INT 4
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 1
62095: NEG
62096: PUSH
62097: LD_INT 3
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: LD_INT 5
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 0
62116: PUSH
62117: LD_INT 5
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 1
62126: NEG
62127: PUSH
62128: LD_INT 4
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 1
62137: PUSH
62138: LD_INT 6
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 0
62147: PUSH
62148: LD_INT 6
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 1
62157: NEG
62158: PUSH
62159: LD_INT 5
62161: PUSH
62162: EMPTY
62163: LIST
62164: LIST
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62180: LD_ADDR_VAR 0 33
62184: PUSH
62185: LD_INT 2
62187: NEG
62188: PUSH
62189: LD_INT 1
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: PUSH
62196: LD_INT 3
62198: NEG
62199: PUSH
62200: LD_INT 0
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 3
62209: NEG
62210: PUSH
62211: LD_INT 1
62213: NEG
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 3
62221: NEG
62222: PUSH
62223: LD_INT 1
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 4
62232: NEG
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 4
62243: NEG
62244: PUSH
62245: LD_INT 1
62247: NEG
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 4
62255: NEG
62256: PUSH
62257: LD_INT 1
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 5
62266: NEG
62267: PUSH
62268: LD_INT 0
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 5
62277: NEG
62278: PUSH
62279: LD_INT 1
62281: NEG
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 5
62289: NEG
62290: PUSH
62291: LD_INT 1
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 6
62300: NEG
62301: PUSH
62302: LD_INT 0
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 6
62311: NEG
62312: PUSH
62313: LD_INT 1
62315: NEG
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62335: LD_ADDR_VAR 0 34
62339: PUSH
62340: LD_INT 2
62342: NEG
62343: PUSH
62344: LD_INT 3
62346: NEG
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 3
62354: NEG
62355: PUSH
62356: LD_INT 2
62358: NEG
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: LD_INT 3
62366: NEG
62367: PUSH
62368: LD_INT 3
62370: NEG
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 3
62378: NEG
62379: PUSH
62380: LD_INT 4
62382: NEG
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 4
62390: NEG
62391: PUSH
62392: LD_INT 3
62394: NEG
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 4
62402: NEG
62403: PUSH
62404: LD_INT 4
62406: NEG
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 4
62414: NEG
62415: PUSH
62416: LD_INT 5
62418: NEG
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 5
62426: NEG
62427: PUSH
62428: LD_INT 4
62430: NEG
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 5
62438: NEG
62439: PUSH
62440: LD_INT 5
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 5
62450: NEG
62451: PUSH
62452: LD_INT 6
62454: NEG
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 6
62462: NEG
62463: PUSH
62464: LD_INT 5
62466: NEG
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 6
62474: NEG
62475: PUSH
62476: LD_INT 6
62478: NEG
62479: PUSH
62480: EMPTY
62481: LIST
62482: LIST
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62498: LD_ADDR_VAR 0 41
62502: PUSH
62503: LD_INT 0
62505: PUSH
62506: LD_INT 2
62508: NEG
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 1
62516: NEG
62517: PUSH
62518: LD_INT 3
62520: NEG
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: PUSH
62529: LD_INT 2
62531: NEG
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: LIST
62541: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62542: LD_ADDR_VAR 0 42
62546: PUSH
62547: LD_INT 2
62549: PUSH
62550: LD_INT 0
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 2
62559: PUSH
62560: LD_INT 1
62562: NEG
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 3
62570: PUSH
62571: LD_INT 1
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: LIST
62582: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62583: LD_ADDR_VAR 0 43
62587: PUSH
62588: LD_INT 2
62590: PUSH
62591: LD_INT 2
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 3
62600: PUSH
62601: LD_INT 2
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 2
62610: PUSH
62611: LD_INT 3
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: LIST
62622: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62623: LD_ADDR_VAR 0 44
62627: PUSH
62628: LD_INT 0
62630: PUSH
62631: LD_INT 2
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 1
62640: PUSH
62641: LD_INT 3
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 1
62650: NEG
62651: PUSH
62652: LD_INT 2
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: LIST
62663: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62664: LD_ADDR_VAR 0 45
62668: PUSH
62669: LD_INT 2
62671: NEG
62672: PUSH
62673: LD_INT 0
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 2
62682: NEG
62683: PUSH
62684: LD_INT 1
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 3
62693: NEG
62694: PUSH
62695: LD_INT 1
62697: NEG
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: LIST
62707: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62708: LD_ADDR_VAR 0 46
62712: PUSH
62713: LD_INT 2
62715: NEG
62716: PUSH
62717: LD_INT 2
62719: NEG
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: PUSH
62725: LD_INT 2
62727: NEG
62728: PUSH
62729: LD_INT 3
62731: NEG
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 3
62739: NEG
62740: PUSH
62741: LD_INT 2
62743: NEG
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: LIST
62753: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62754: LD_ADDR_VAR 0 47
62758: PUSH
62759: LD_INT 2
62761: NEG
62762: PUSH
62763: LD_INT 3
62765: NEG
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 1
62773: NEG
62774: PUSH
62775: LD_INT 3
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62787: LD_ADDR_VAR 0 48
62791: PUSH
62792: LD_INT 1
62794: PUSH
62795: LD_INT 2
62797: NEG
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 2
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62818: LD_ADDR_VAR 0 49
62822: PUSH
62823: LD_INT 3
62825: PUSH
62826: LD_INT 1
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 3
62835: PUSH
62836: LD_INT 2
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62847: LD_ADDR_VAR 0 50
62851: PUSH
62852: LD_INT 2
62854: PUSH
62855: LD_INT 3
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 1
62864: PUSH
62865: LD_INT 3
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62876: LD_ADDR_VAR 0 51
62880: PUSH
62881: LD_INT 1
62883: NEG
62884: PUSH
62885: LD_INT 2
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 2
62894: NEG
62895: PUSH
62896: LD_INT 1
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: EMPTY
62904: LIST
62905: LIST
62906: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62907: LD_ADDR_VAR 0 52
62911: PUSH
62912: LD_INT 3
62914: NEG
62915: PUSH
62916: LD_INT 1
62918: NEG
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 3
62926: NEG
62927: PUSH
62928: LD_INT 2
62930: NEG
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62940: LD_ADDR_VAR 0 53
62944: PUSH
62945: LD_INT 1
62947: NEG
62948: PUSH
62949: LD_INT 3
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: LD_INT 3
62962: NEG
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 1
62970: PUSH
62971: LD_INT 2
62973: NEG
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: LIST
62983: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62984: LD_ADDR_VAR 0 54
62988: PUSH
62989: LD_INT 2
62991: PUSH
62992: LD_INT 1
62994: NEG
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 3
63002: PUSH
63003: LD_INT 0
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 3
63012: PUSH
63013: LD_INT 1
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: LIST
63024: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63025: LD_ADDR_VAR 0 55
63029: PUSH
63030: LD_INT 3
63032: PUSH
63033: LD_INT 2
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 3
63042: PUSH
63043: LD_INT 3
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: PUSH
63050: LD_INT 2
63052: PUSH
63053: LD_INT 3
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: LIST
63064: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63065: LD_ADDR_VAR 0 56
63069: PUSH
63070: LD_INT 1
63072: PUSH
63073: LD_INT 3
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 0
63082: PUSH
63083: LD_INT 3
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 1
63092: NEG
63093: PUSH
63094: LD_INT 2
63096: PUSH
63097: EMPTY
63098: LIST
63099: LIST
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: LIST
63105: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63106: LD_ADDR_VAR 0 57
63110: PUSH
63111: LD_INT 2
63113: NEG
63114: PUSH
63115: LD_INT 1
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 3
63124: NEG
63125: PUSH
63126: LD_INT 0
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 3
63135: NEG
63136: PUSH
63137: LD_INT 1
63139: NEG
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: LIST
63149: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63150: LD_ADDR_VAR 0 58
63154: PUSH
63155: LD_INT 2
63157: NEG
63158: PUSH
63159: LD_INT 3
63161: NEG
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 3
63169: NEG
63170: PUSH
63171: LD_INT 2
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 3
63181: NEG
63182: PUSH
63183: LD_INT 3
63185: NEG
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: LIST
63195: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63196: LD_ADDR_VAR 0 59
63200: PUSH
63201: LD_INT 1
63203: NEG
63204: PUSH
63205: LD_INT 2
63207: NEG
63208: PUSH
63209: EMPTY
63210: LIST
63211: LIST
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: LD_INT 2
63218: NEG
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 1
63226: PUSH
63227: LD_INT 1
63229: NEG
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: LIST
63239: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63240: LD_ADDR_VAR 0 60
63244: PUSH
63245: LD_INT 1
63247: PUSH
63248: LD_INT 1
63250: NEG
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 2
63258: PUSH
63259: LD_INT 0
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 2
63268: PUSH
63269: LD_INT 1
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: LIST
63280: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63281: LD_ADDR_VAR 0 61
63285: PUSH
63286: LD_INT 2
63288: PUSH
63289: LD_INT 1
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 2
63298: PUSH
63299: LD_INT 2
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 1
63308: PUSH
63309: LD_INT 2
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: EMPTY
63317: LIST
63318: LIST
63319: LIST
63320: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63321: LD_ADDR_VAR 0 62
63325: PUSH
63326: LD_INT 1
63328: PUSH
63329: LD_INT 2
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 0
63338: PUSH
63339: LD_INT 2
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 1
63348: NEG
63349: PUSH
63350: LD_INT 1
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: LIST
63361: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63362: LD_ADDR_VAR 0 63
63366: PUSH
63367: LD_INT 1
63369: NEG
63370: PUSH
63371: LD_INT 1
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 2
63380: NEG
63381: PUSH
63382: LD_INT 0
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 2
63391: NEG
63392: PUSH
63393: LD_INT 1
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: LIST
63405: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63406: LD_ADDR_VAR 0 64
63410: PUSH
63411: LD_INT 1
63413: NEG
63414: PUSH
63415: LD_INT 2
63417: NEG
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 2
63425: NEG
63426: PUSH
63427: LD_INT 1
63429: NEG
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 2
63437: NEG
63438: PUSH
63439: LD_INT 2
63441: NEG
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: LIST
63451: ST_TO_ADDR
// end ; 2 :
63452: GO 66718
63454: LD_INT 2
63456: DOUBLE
63457: EQUAL
63458: IFTRUE 63462
63460: GO 66717
63462: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63463: LD_ADDR_VAR 0 29
63467: PUSH
63468: LD_INT 4
63470: PUSH
63471: LD_INT 0
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 4
63480: PUSH
63481: LD_INT 1
63483: NEG
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 5
63491: PUSH
63492: LD_INT 0
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 5
63501: PUSH
63502: LD_INT 1
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 4
63511: PUSH
63512: LD_INT 1
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 3
63521: PUSH
63522: LD_INT 0
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 3
63531: PUSH
63532: LD_INT 1
63534: NEG
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 3
63542: PUSH
63543: LD_INT 2
63545: NEG
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 5
63553: PUSH
63554: LD_INT 2
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 3
63563: PUSH
63564: LD_INT 3
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 3
63573: PUSH
63574: LD_INT 2
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 4
63583: PUSH
63584: LD_INT 3
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 4
63593: PUSH
63594: LD_INT 4
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 3
63603: PUSH
63604: LD_INT 4
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 2
63613: PUSH
63614: LD_INT 3
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 2
63623: PUSH
63624: LD_INT 2
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 4
63633: PUSH
63634: LD_INT 2
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 2
63643: PUSH
63644: LD_INT 4
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 0
63653: PUSH
63654: LD_INT 4
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 0
63663: PUSH
63664: LD_INT 3
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: LD_INT 4
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: PUSH
63684: LD_INT 5
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: LD_INT 5
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 1
63703: NEG
63704: PUSH
63705: LD_INT 4
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 1
63714: NEG
63715: PUSH
63716: LD_INT 3
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 2
63725: PUSH
63726: LD_INT 5
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 2
63735: NEG
63736: PUSH
63737: LD_INT 3
63739: PUSH
63740: EMPTY
63741: LIST
63742: LIST
63743: PUSH
63744: LD_INT 3
63746: NEG
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 3
63757: NEG
63758: PUSH
63759: LD_INT 1
63761: NEG
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 2
63769: NEG
63770: PUSH
63771: LD_INT 0
63773: PUSH
63774: EMPTY
63775: LIST
63776: LIST
63777: PUSH
63778: LD_INT 2
63780: NEG
63781: PUSH
63782: LD_INT 1
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 3
63791: NEG
63792: PUSH
63793: LD_INT 1
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: PUSH
63800: LD_INT 4
63802: NEG
63803: PUSH
63804: LD_INT 0
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 4
63813: NEG
63814: PUSH
63815: LD_INT 1
63817: NEG
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 4
63825: NEG
63826: PUSH
63827: LD_INT 2
63829: NEG
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 2
63837: NEG
63838: PUSH
63839: LD_INT 2
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 4
63848: NEG
63849: PUSH
63850: LD_INT 4
63852: NEG
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 4
63860: NEG
63861: PUSH
63862: LD_INT 5
63864: NEG
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 3
63872: NEG
63873: PUSH
63874: LD_INT 4
63876: NEG
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 3
63884: NEG
63885: PUSH
63886: LD_INT 3
63888: NEG
63889: PUSH
63890: EMPTY
63891: LIST
63892: LIST
63893: PUSH
63894: LD_INT 4
63896: NEG
63897: PUSH
63898: LD_INT 3
63900: NEG
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 5
63908: NEG
63909: PUSH
63910: LD_INT 4
63912: NEG
63913: PUSH
63914: EMPTY
63915: LIST
63916: LIST
63917: PUSH
63918: LD_INT 5
63920: NEG
63921: PUSH
63922: LD_INT 5
63924: NEG
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 3
63932: NEG
63933: PUSH
63934: LD_INT 5
63936: NEG
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 5
63944: NEG
63945: PUSH
63946: LD_INT 3
63948: NEG
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64001: LD_ADDR_VAR 0 30
64005: PUSH
64006: LD_INT 4
64008: PUSH
64009: LD_INT 4
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 4
64018: PUSH
64019: LD_INT 3
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 5
64028: PUSH
64029: LD_INT 4
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 5
64038: PUSH
64039: LD_INT 5
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 4
64048: PUSH
64049: LD_INT 5
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 3
64058: PUSH
64059: LD_INT 4
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 3
64068: PUSH
64069: LD_INT 3
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 5
64078: PUSH
64079: LD_INT 3
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 3
64088: PUSH
64089: LD_INT 5
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 0
64098: PUSH
64099: LD_INT 3
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 0
64108: PUSH
64109: LD_INT 2
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 1
64118: PUSH
64119: LD_INT 3
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 1
64128: PUSH
64129: LD_INT 4
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 0
64138: PUSH
64139: LD_INT 4
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: LD_INT 1
64148: NEG
64149: PUSH
64150: LD_INT 3
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 1
64159: NEG
64160: PUSH
64161: LD_INT 2
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 2
64170: PUSH
64171: LD_INT 4
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 2
64180: NEG
64181: PUSH
64182: LD_INT 2
64184: PUSH
64185: EMPTY
64186: LIST
64187: LIST
64188: PUSH
64189: LD_INT 4
64191: NEG
64192: PUSH
64193: LD_INT 0
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 4
64202: NEG
64203: PUSH
64204: LD_INT 1
64206: NEG
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 3
64214: NEG
64215: PUSH
64216: LD_INT 0
64218: PUSH
64219: EMPTY
64220: LIST
64221: LIST
64222: PUSH
64223: LD_INT 3
64225: NEG
64226: PUSH
64227: LD_INT 1
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: LD_INT 4
64236: NEG
64237: PUSH
64238: LD_INT 1
64240: PUSH
64241: EMPTY
64242: LIST
64243: LIST
64244: PUSH
64245: LD_INT 5
64247: NEG
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 5
64258: NEG
64259: PUSH
64260: LD_INT 1
64262: NEG
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 5
64270: NEG
64271: PUSH
64272: LD_INT 2
64274: NEG
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 3
64282: NEG
64283: PUSH
64284: LD_INT 2
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 3
64293: NEG
64294: PUSH
64295: LD_INT 3
64297: NEG
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 3
64305: NEG
64306: PUSH
64307: LD_INT 4
64309: NEG
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 2
64317: NEG
64318: PUSH
64319: LD_INT 3
64321: NEG
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 2
64329: NEG
64330: PUSH
64331: LD_INT 2
64333: NEG
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 3
64341: NEG
64342: PUSH
64343: LD_INT 2
64345: NEG
64346: PUSH
64347: EMPTY
64348: LIST
64349: LIST
64350: PUSH
64351: LD_INT 4
64353: NEG
64354: PUSH
64355: LD_INT 3
64357: NEG
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 4
64365: NEG
64366: PUSH
64367: LD_INT 4
64369: NEG
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 2
64377: NEG
64378: PUSH
64379: LD_INT 4
64381: NEG
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 4
64389: NEG
64390: PUSH
64391: LD_INT 2
64393: NEG
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 0
64401: PUSH
64402: LD_INT 4
64404: NEG
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 0
64412: PUSH
64413: LD_INT 5
64415: NEG
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 1
64423: PUSH
64424: LD_INT 4
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 1
64434: PUSH
64435: LD_INT 3
64437: NEG
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 0
64445: PUSH
64446: LD_INT 3
64448: NEG
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 1
64456: NEG
64457: PUSH
64458: LD_INT 4
64460: NEG
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: PUSH
64466: LD_INT 1
64468: NEG
64469: PUSH
64470: LD_INT 5
64472: NEG
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 2
64480: PUSH
64481: LD_INT 3
64483: NEG
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 2
64491: NEG
64492: PUSH
64493: LD_INT 5
64495: NEG
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64548: LD_ADDR_VAR 0 31
64552: PUSH
64553: LD_INT 0
64555: PUSH
64556: LD_INT 4
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: LD_INT 3
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 1
64575: PUSH
64576: LD_INT 4
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 1
64585: PUSH
64586: LD_INT 5
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 0
64595: PUSH
64596: LD_INT 5
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 1
64605: NEG
64606: PUSH
64607: LD_INT 4
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 1
64616: NEG
64617: PUSH
64618: LD_INT 3
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 2
64627: PUSH
64628: LD_INT 5
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 2
64637: NEG
64638: PUSH
64639: LD_INT 3
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 3
64648: NEG
64649: PUSH
64650: LD_INT 0
64652: PUSH
64653: EMPTY
64654: LIST
64655: LIST
64656: PUSH
64657: LD_INT 3
64659: NEG
64660: PUSH
64661: LD_INT 1
64663: NEG
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 2
64671: NEG
64672: PUSH
64673: LD_INT 0
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 2
64682: NEG
64683: PUSH
64684: LD_INT 1
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 3
64693: NEG
64694: PUSH
64695: LD_INT 1
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 4
64704: NEG
64705: PUSH
64706: LD_INT 0
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 4
64715: NEG
64716: PUSH
64717: LD_INT 1
64719: NEG
64720: PUSH
64721: EMPTY
64722: LIST
64723: LIST
64724: PUSH
64725: LD_INT 4
64727: NEG
64728: PUSH
64729: LD_INT 2
64731: NEG
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 2
64739: NEG
64740: PUSH
64741: LD_INT 2
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 4
64750: NEG
64751: PUSH
64752: LD_INT 4
64754: NEG
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 4
64762: NEG
64763: PUSH
64764: LD_INT 5
64766: NEG
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 3
64774: NEG
64775: PUSH
64776: LD_INT 4
64778: NEG
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 3
64786: NEG
64787: PUSH
64788: LD_INT 3
64790: NEG
64791: PUSH
64792: EMPTY
64793: LIST
64794: LIST
64795: PUSH
64796: LD_INT 4
64798: NEG
64799: PUSH
64800: LD_INT 3
64802: NEG
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 5
64810: NEG
64811: PUSH
64812: LD_INT 4
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 5
64822: NEG
64823: PUSH
64824: LD_INT 5
64826: NEG
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 3
64834: NEG
64835: PUSH
64836: LD_INT 5
64838: NEG
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 5
64846: NEG
64847: PUSH
64848: LD_INT 3
64850: NEG
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 0
64858: PUSH
64859: LD_INT 3
64861: NEG
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 0
64869: PUSH
64870: LD_INT 4
64872: NEG
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 1
64880: PUSH
64881: LD_INT 3
64883: NEG
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 1
64891: PUSH
64892: LD_INT 2
64894: NEG
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 0
64902: PUSH
64903: LD_INT 2
64905: NEG
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 1
64913: NEG
64914: PUSH
64915: LD_INT 3
64917: NEG
64918: PUSH
64919: EMPTY
64920: LIST
64921: LIST
64922: PUSH
64923: LD_INT 1
64925: NEG
64926: PUSH
64927: LD_INT 4
64929: NEG
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 2
64937: PUSH
64938: LD_INT 2
64940: NEG
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 2
64948: NEG
64949: PUSH
64950: LD_INT 4
64952: NEG
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 4
64960: PUSH
64961: LD_INT 0
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 4
64970: PUSH
64971: LD_INT 1
64973: NEG
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 5
64981: PUSH
64982: LD_INT 0
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 5
64991: PUSH
64992: LD_INT 1
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 4
65001: PUSH
65002: LD_INT 1
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 3
65011: PUSH
65012: LD_INT 0
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 3
65021: PUSH
65022: LD_INT 1
65024: NEG
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 3
65032: PUSH
65033: LD_INT 2
65035: NEG
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 5
65043: PUSH
65044: LD_INT 2
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65098: LD_ADDR_VAR 0 32
65102: PUSH
65103: LD_INT 4
65105: NEG
65106: PUSH
65107: LD_INT 0
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: LD_INT 4
65116: NEG
65117: PUSH
65118: LD_INT 1
65120: NEG
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 3
65128: NEG
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 3
65139: NEG
65140: PUSH
65141: LD_INT 1
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 4
65150: NEG
65151: PUSH
65152: LD_INT 1
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 5
65161: NEG
65162: PUSH
65163: LD_INT 0
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 5
65172: NEG
65173: PUSH
65174: LD_INT 1
65176: NEG
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 5
65184: NEG
65185: PUSH
65186: LD_INT 2
65188: NEG
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 3
65196: NEG
65197: PUSH
65198: LD_INT 2
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 3
65207: NEG
65208: PUSH
65209: LD_INT 3
65211: NEG
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 3
65219: NEG
65220: PUSH
65221: LD_INT 4
65223: NEG
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 2
65231: NEG
65232: PUSH
65233: LD_INT 3
65235: NEG
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 2
65243: NEG
65244: PUSH
65245: LD_INT 2
65247: NEG
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 3
65255: NEG
65256: PUSH
65257: LD_INT 2
65259: NEG
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 4
65267: NEG
65268: PUSH
65269: LD_INT 3
65271: NEG
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 4
65279: NEG
65280: PUSH
65281: LD_INT 4
65283: NEG
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 2
65291: NEG
65292: PUSH
65293: LD_INT 4
65295: NEG
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 4
65303: NEG
65304: PUSH
65305: LD_INT 2
65307: NEG
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 0
65315: PUSH
65316: LD_INT 4
65318: NEG
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 0
65326: PUSH
65327: LD_INT 5
65329: NEG
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 1
65337: PUSH
65338: LD_INT 4
65340: NEG
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 1
65348: PUSH
65349: LD_INT 3
65351: NEG
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 0
65359: PUSH
65360: LD_INT 3
65362: NEG
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 1
65370: NEG
65371: PUSH
65372: LD_INT 4
65374: NEG
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 1
65382: NEG
65383: PUSH
65384: LD_INT 5
65386: NEG
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 2
65394: PUSH
65395: LD_INT 3
65397: NEG
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 2
65405: NEG
65406: PUSH
65407: LD_INT 5
65409: NEG
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 3
65417: PUSH
65418: LD_INT 0
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 3
65427: PUSH
65428: LD_INT 1
65430: NEG
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 4
65438: PUSH
65439: LD_INT 0
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 4
65448: PUSH
65449: LD_INT 1
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 3
65458: PUSH
65459: LD_INT 1
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 2
65468: PUSH
65469: LD_INT 0
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 2
65478: PUSH
65479: LD_INT 1
65481: NEG
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 2
65489: PUSH
65490: LD_INT 2
65492: NEG
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 4
65500: PUSH
65501: LD_INT 2
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 4
65510: PUSH
65511: LD_INT 4
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 4
65520: PUSH
65521: LD_INT 3
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 5
65530: PUSH
65531: LD_INT 4
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 5
65540: PUSH
65541: LD_INT 5
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 4
65550: PUSH
65551: LD_INT 5
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 3
65560: PUSH
65561: LD_INT 4
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 3
65570: PUSH
65571: LD_INT 3
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 5
65580: PUSH
65581: LD_INT 3
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PUSH
65588: LD_INT 3
65590: PUSH
65591: LD_INT 5
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65645: LD_ADDR_VAR 0 33
65649: PUSH
65650: LD_INT 4
65652: NEG
65653: PUSH
65654: LD_INT 4
65656: NEG
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 4
65664: NEG
65665: PUSH
65666: LD_INT 5
65668: NEG
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 3
65676: NEG
65677: PUSH
65678: LD_INT 4
65680: NEG
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: LD_INT 3
65688: NEG
65689: PUSH
65690: LD_INT 3
65692: NEG
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 4
65700: NEG
65701: PUSH
65702: LD_INT 3
65704: NEG
65705: PUSH
65706: EMPTY
65707: LIST
65708: LIST
65709: PUSH
65710: LD_INT 5
65712: NEG
65713: PUSH
65714: LD_INT 4
65716: NEG
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 5
65724: NEG
65725: PUSH
65726: LD_INT 5
65728: NEG
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 3
65736: NEG
65737: PUSH
65738: LD_INT 5
65740: NEG
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 5
65748: NEG
65749: PUSH
65750: LD_INT 3
65752: NEG
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 0
65760: PUSH
65761: LD_INT 3
65763: NEG
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 0
65771: PUSH
65772: LD_INT 4
65774: NEG
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 1
65782: PUSH
65783: LD_INT 3
65785: NEG
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 1
65793: PUSH
65794: LD_INT 2
65796: NEG
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 0
65804: PUSH
65805: LD_INT 2
65807: NEG
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 1
65815: NEG
65816: PUSH
65817: LD_INT 3
65819: NEG
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 1
65827: NEG
65828: PUSH
65829: LD_INT 4
65831: NEG
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 2
65839: PUSH
65840: LD_INT 2
65842: NEG
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 2
65850: NEG
65851: PUSH
65852: LD_INT 4
65854: NEG
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 4
65862: PUSH
65863: LD_INT 0
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 4
65872: PUSH
65873: LD_INT 1
65875: NEG
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 5
65883: PUSH
65884: LD_INT 0
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 5
65893: PUSH
65894: LD_INT 1
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 4
65903: PUSH
65904: LD_INT 1
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 3
65913: PUSH
65914: LD_INT 0
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 3
65923: PUSH
65924: LD_INT 1
65926: NEG
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 3
65934: PUSH
65935: LD_INT 2
65937: NEG
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 5
65945: PUSH
65946: LD_INT 2
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 3
65955: PUSH
65956: LD_INT 3
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 3
65965: PUSH
65966: LD_INT 2
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 4
65975: PUSH
65976: LD_INT 3
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 4
65985: PUSH
65986: LD_INT 4
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 3
65995: PUSH
65996: LD_INT 4
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 2
66005: PUSH
66006: LD_INT 3
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 2
66015: PUSH
66016: LD_INT 2
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 4
66025: PUSH
66026: LD_INT 2
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 2
66035: PUSH
66036: LD_INT 4
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 0
66045: PUSH
66046: LD_INT 4
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 0
66055: PUSH
66056: LD_INT 3
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 1
66065: PUSH
66066: LD_INT 4
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 1
66075: PUSH
66076: LD_INT 5
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 0
66085: PUSH
66086: LD_INT 5
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 1
66095: NEG
66096: PUSH
66097: LD_INT 4
66099: PUSH
66100: EMPTY
66101: LIST
66102: LIST
66103: PUSH
66104: LD_INT 1
66106: NEG
66107: PUSH
66108: LD_INT 3
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 2
66117: PUSH
66118: LD_INT 5
66120: PUSH
66121: EMPTY
66122: LIST
66123: LIST
66124: PUSH
66125: LD_INT 2
66127: NEG
66128: PUSH
66129: LD_INT 3
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66183: LD_ADDR_VAR 0 34
66187: PUSH
66188: LD_INT 0
66190: PUSH
66191: LD_INT 4
66193: NEG
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: PUSH
66199: LD_INT 0
66201: PUSH
66202: LD_INT 5
66204: NEG
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 1
66212: PUSH
66213: LD_INT 4
66215: NEG
66216: PUSH
66217: EMPTY
66218: LIST
66219: LIST
66220: PUSH
66221: LD_INT 1
66223: PUSH
66224: LD_INT 3
66226: NEG
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 0
66234: PUSH
66235: LD_INT 3
66237: NEG
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 1
66245: NEG
66246: PUSH
66247: LD_INT 4
66249: NEG
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 1
66257: NEG
66258: PUSH
66259: LD_INT 5
66261: NEG
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: LD_INT 2
66269: PUSH
66270: LD_INT 3
66272: NEG
66273: PUSH
66274: EMPTY
66275: LIST
66276: LIST
66277: PUSH
66278: LD_INT 2
66280: NEG
66281: PUSH
66282: LD_INT 5
66284: NEG
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 3
66292: PUSH
66293: LD_INT 0
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 3
66302: PUSH
66303: LD_INT 1
66305: NEG
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 4
66313: PUSH
66314: LD_INT 0
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 4
66323: PUSH
66324: LD_INT 1
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 3
66333: PUSH
66334: LD_INT 1
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 2
66343: PUSH
66344: LD_INT 0
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 2
66353: PUSH
66354: LD_INT 1
66356: NEG
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: LD_INT 2
66364: PUSH
66365: LD_INT 2
66367: NEG
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 4
66375: PUSH
66376: LD_INT 2
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 4
66385: PUSH
66386: LD_INT 4
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 4
66395: PUSH
66396: LD_INT 3
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 5
66405: PUSH
66406: LD_INT 4
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 5
66415: PUSH
66416: LD_INT 5
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 4
66425: PUSH
66426: LD_INT 5
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 3
66435: PUSH
66436: LD_INT 4
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 3
66445: PUSH
66446: LD_INT 3
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 5
66455: PUSH
66456: LD_INT 3
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 3
66465: PUSH
66466: LD_INT 5
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 0
66475: PUSH
66476: LD_INT 3
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 0
66485: PUSH
66486: LD_INT 2
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 1
66495: PUSH
66496: LD_INT 3
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 1
66505: PUSH
66506: LD_INT 4
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 0
66515: PUSH
66516: LD_INT 4
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 1
66525: NEG
66526: PUSH
66527: LD_INT 3
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 1
66536: NEG
66537: PUSH
66538: LD_INT 2
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: LD_INT 2
66547: PUSH
66548: LD_INT 4
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 2
66557: NEG
66558: PUSH
66559: LD_INT 2
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PUSH
66566: LD_INT 4
66568: NEG
66569: PUSH
66570: LD_INT 0
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 4
66579: NEG
66580: PUSH
66581: LD_INT 1
66583: NEG
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: PUSH
66589: LD_INT 3
66591: NEG
66592: PUSH
66593: LD_INT 0
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 3
66602: NEG
66603: PUSH
66604: LD_INT 1
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 4
66613: NEG
66614: PUSH
66615: LD_INT 1
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: LD_INT 5
66624: NEG
66625: PUSH
66626: LD_INT 0
66628: PUSH
66629: EMPTY
66630: LIST
66631: LIST
66632: PUSH
66633: LD_INT 5
66635: NEG
66636: PUSH
66637: LD_INT 1
66639: NEG
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 5
66647: NEG
66648: PUSH
66649: LD_INT 2
66651: NEG
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 3
66659: NEG
66660: PUSH
66661: LD_INT 2
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: ST_TO_ADDR
// end ; end ;
66715: GO 66718
66717: POP
// case btype of b_depot , b_warehouse :
66718: LD_VAR 0 1
66722: PUSH
66723: LD_INT 0
66725: DOUBLE
66726: EQUAL
66727: IFTRUE 66737
66729: LD_INT 1
66731: DOUBLE
66732: EQUAL
66733: IFTRUE 66737
66735: GO 66938
66737: POP
// case nation of nation_american :
66738: LD_VAR 0 5
66742: PUSH
66743: LD_INT 1
66745: DOUBLE
66746: EQUAL
66747: IFTRUE 66751
66749: GO 66807
66751: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66752: LD_ADDR_VAR 0 9
66756: PUSH
66757: LD_VAR 0 11
66761: PUSH
66762: LD_VAR 0 12
66766: PUSH
66767: LD_VAR 0 13
66771: PUSH
66772: LD_VAR 0 14
66776: PUSH
66777: LD_VAR 0 15
66781: PUSH
66782: LD_VAR 0 16
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: LIST
66791: LIST
66792: LIST
66793: LIST
66794: PUSH
66795: LD_VAR 0 4
66799: PUSH
66800: LD_INT 1
66802: PLUS
66803: ARRAY
66804: ST_TO_ADDR
66805: GO 66936
66807: LD_INT 2
66809: DOUBLE
66810: EQUAL
66811: IFTRUE 66815
66813: GO 66871
66815: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66816: LD_ADDR_VAR 0 9
66820: PUSH
66821: LD_VAR 0 17
66825: PUSH
66826: LD_VAR 0 18
66830: PUSH
66831: LD_VAR 0 19
66835: PUSH
66836: LD_VAR 0 20
66840: PUSH
66841: LD_VAR 0 21
66845: PUSH
66846: LD_VAR 0 22
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: PUSH
66859: LD_VAR 0 4
66863: PUSH
66864: LD_INT 1
66866: PLUS
66867: ARRAY
66868: ST_TO_ADDR
66869: GO 66936
66871: LD_INT 3
66873: DOUBLE
66874: EQUAL
66875: IFTRUE 66879
66877: GO 66935
66879: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66880: LD_ADDR_VAR 0 9
66884: PUSH
66885: LD_VAR 0 23
66889: PUSH
66890: LD_VAR 0 24
66894: PUSH
66895: LD_VAR 0 25
66899: PUSH
66900: LD_VAR 0 26
66904: PUSH
66905: LD_VAR 0 27
66909: PUSH
66910: LD_VAR 0 28
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: PUSH
66923: LD_VAR 0 4
66927: PUSH
66928: LD_INT 1
66930: PLUS
66931: ARRAY
66932: ST_TO_ADDR
66933: GO 66936
66935: POP
66936: GO 67491
66938: LD_INT 2
66940: DOUBLE
66941: EQUAL
66942: IFTRUE 66952
66944: LD_INT 3
66946: DOUBLE
66947: EQUAL
66948: IFTRUE 66952
66950: GO 67008
66952: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66953: LD_ADDR_VAR 0 9
66957: PUSH
66958: LD_VAR 0 29
66962: PUSH
66963: LD_VAR 0 30
66967: PUSH
66968: LD_VAR 0 31
66972: PUSH
66973: LD_VAR 0 32
66977: PUSH
66978: LD_VAR 0 33
66982: PUSH
66983: LD_VAR 0 34
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: LIST
66992: LIST
66993: LIST
66994: LIST
66995: PUSH
66996: LD_VAR 0 4
67000: PUSH
67001: LD_INT 1
67003: PLUS
67004: ARRAY
67005: ST_TO_ADDR
67006: GO 67491
67008: LD_INT 16
67010: DOUBLE
67011: EQUAL
67012: IFTRUE 67070
67014: LD_INT 17
67016: DOUBLE
67017: EQUAL
67018: IFTRUE 67070
67020: LD_INT 18
67022: DOUBLE
67023: EQUAL
67024: IFTRUE 67070
67026: LD_INT 19
67028: DOUBLE
67029: EQUAL
67030: IFTRUE 67070
67032: LD_INT 22
67034: DOUBLE
67035: EQUAL
67036: IFTRUE 67070
67038: LD_INT 20
67040: DOUBLE
67041: EQUAL
67042: IFTRUE 67070
67044: LD_INT 21
67046: DOUBLE
67047: EQUAL
67048: IFTRUE 67070
67050: LD_INT 23
67052: DOUBLE
67053: EQUAL
67054: IFTRUE 67070
67056: LD_INT 24
67058: DOUBLE
67059: EQUAL
67060: IFTRUE 67070
67062: LD_INT 25
67064: DOUBLE
67065: EQUAL
67066: IFTRUE 67070
67068: GO 67126
67070: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67071: LD_ADDR_VAR 0 9
67075: PUSH
67076: LD_VAR 0 35
67080: PUSH
67081: LD_VAR 0 36
67085: PUSH
67086: LD_VAR 0 37
67090: PUSH
67091: LD_VAR 0 38
67095: PUSH
67096: LD_VAR 0 39
67100: PUSH
67101: LD_VAR 0 40
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: LIST
67110: LIST
67111: LIST
67112: LIST
67113: PUSH
67114: LD_VAR 0 4
67118: PUSH
67119: LD_INT 1
67121: PLUS
67122: ARRAY
67123: ST_TO_ADDR
67124: GO 67491
67126: LD_INT 6
67128: DOUBLE
67129: EQUAL
67130: IFTRUE 67182
67132: LD_INT 7
67134: DOUBLE
67135: EQUAL
67136: IFTRUE 67182
67138: LD_INT 8
67140: DOUBLE
67141: EQUAL
67142: IFTRUE 67182
67144: LD_INT 13
67146: DOUBLE
67147: EQUAL
67148: IFTRUE 67182
67150: LD_INT 12
67152: DOUBLE
67153: EQUAL
67154: IFTRUE 67182
67156: LD_INT 15
67158: DOUBLE
67159: EQUAL
67160: IFTRUE 67182
67162: LD_INT 11
67164: DOUBLE
67165: EQUAL
67166: IFTRUE 67182
67168: LD_INT 14
67170: DOUBLE
67171: EQUAL
67172: IFTRUE 67182
67174: LD_INT 10
67176: DOUBLE
67177: EQUAL
67178: IFTRUE 67182
67180: GO 67238
67182: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67183: LD_ADDR_VAR 0 9
67187: PUSH
67188: LD_VAR 0 41
67192: PUSH
67193: LD_VAR 0 42
67197: PUSH
67198: LD_VAR 0 43
67202: PUSH
67203: LD_VAR 0 44
67207: PUSH
67208: LD_VAR 0 45
67212: PUSH
67213: LD_VAR 0 46
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: PUSH
67226: LD_VAR 0 4
67230: PUSH
67231: LD_INT 1
67233: PLUS
67234: ARRAY
67235: ST_TO_ADDR
67236: GO 67491
67238: LD_INT 36
67240: DOUBLE
67241: EQUAL
67242: IFTRUE 67246
67244: GO 67302
67246: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67247: LD_ADDR_VAR 0 9
67251: PUSH
67252: LD_VAR 0 47
67256: PUSH
67257: LD_VAR 0 48
67261: PUSH
67262: LD_VAR 0 49
67266: PUSH
67267: LD_VAR 0 50
67271: PUSH
67272: LD_VAR 0 51
67276: PUSH
67277: LD_VAR 0 52
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: PUSH
67290: LD_VAR 0 4
67294: PUSH
67295: LD_INT 1
67297: PLUS
67298: ARRAY
67299: ST_TO_ADDR
67300: GO 67491
67302: LD_INT 4
67304: DOUBLE
67305: EQUAL
67306: IFTRUE 67328
67308: LD_INT 5
67310: DOUBLE
67311: EQUAL
67312: IFTRUE 67328
67314: LD_INT 34
67316: DOUBLE
67317: EQUAL
67318: IFTRUE 67328
67320: LD_INT 37
67322: DOUBLE
67323: EQUAL
67324: IFTRUE 67328
67326: GO 67384
67328: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67329: LD_ADDR_VAR 0 9
67333: PUSH
67334: LD_VAR 0 53
67338: PUSH
67339: LD_VAR 0 54
67343: PUSH
67344: LD_VAR 0 55
67348: PUSH
67349: LD_VAR 0 56
67353: PUSH
67354: LD_VAR 0 57
67358: PUSH
67359: LD_VAR 0 58
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: PUSH
67372: LD_VAR 0 4
67376: PUSH
67377: LD_INT 1
67379: PLUS
67380: ARRAY
67381: ST_TO_ADDR
67382: GO 67491
67384: LD_INT 31
67386: DOUBLE
67387: EQUAL
67388: IFTRUE 67434
67390: LD_INT 32
67392: DOUBLE
67393: EQUAL
67394: IFTRUE 67434
67396: LD_INT 33
67398: DOUBLE
67399: EQUAL
67400: IFTRUE 67434
67402: LD_INT 27
67404: DOUBLE
67405: EQUAL
67406: IFTRUE 67434
67408: LD_INT 26
67410: DOUBLE
67411: EQUAL
67412: IFTRUE 67434
67414: LD_INT 28
67416: DOUBLE
67417: EQUAL
67418: IFTRUE 67434
67420: LD_INT 29
67422: DOUBLE
67423: EQUAL
67424: IFTRUE 67434
67426: LD_INT 30
67428: DOUBLE
67429: EQUAL
67430: IFTRUE 67434
67432: GO 67490
67434: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67435: LD_ADDR_VAR 0 9
67439: PUSH
67440: LD_VAR 0 59
67444: PUSH
67445: LD_VAR 0 60
67449: PUSH
67450: LD_VAR 0 61
67454: PUSH
67455: LD_VAR 0 62
67459: PUSH
67460: LD_VAR 0 63
67464: PUSH
67465: LD_VAR 0 64
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: PUSH
67478: LD_VAR 0 4
67482: PUSH
67483: LD_INT 1
67485: PLUS
67486: ARRAY
67487: ST_TO_ADDR
67488: GO 67491
67490: POP
// temp_list2 = [ ] ;
67491: LD_ADDR_VAR 0 10
67495: PUSH
67496: EMPTY
67497: ST_TO_ADDR
// for i in temp_list do
67498: LD_ADDR_VAR 0 8
67502: PUSH
67503: LD_VAR 0 9
67507: PUSH
67508: FOR_IN
67509: IFFALSE 67561
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67511: LD_ADDR_VAR 0 10
67515: PUSH
67516: LD_VAR 0 10
67520: PUSH
67521: LD_VAR 0 8
67525: PUSH
67526: LD_INT 1
67528: ARRAY
67529: PUSH
67530: LD_VAR 0 2
67534: PLUS
67535: PUSH
67536: LD_VAR 0 8
67540: PUSH
67541: LD_INT 2
67543: ARRAY
67544: PUSH
67545: LD_VAR 0 3
67549: PLUS
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: EMPTY
67556: LIST
67557: ADD
67558: ST_TO_ADDR
67559: GO 67508
67561: POP
67562: POP
// result = temp_list2 ;
67563: LD_ADDR_VAR 0 7
67567: PUSH
67568: LD_VAR 0 10
67572: ST_TO_ADDR
// end ;
67573: LD_VAR 0 7
67577: RET
// export function EnemyInRange ( unit , dist ) ; begin
67578: LD_INT 0
67580: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67581: LD_ADDR_VAR 0 3
67585: PUSH
67586: LD_VAR 0 1
67590: PPUSH
67591: CALL_OW 255
67595: PPUSH
67596: LD_VAR 0 1
67600: PPUSH
67601: CALL_OW 250
67605: PPUSH
67606: LD_VAR 0 1
67610: PPUSH
67611: CALL_OW 251
67615: PPUSH
67616: LD_VAR 0 2
67620: PPUSH
67621: CALL 40980 0 4
67625: PUSH
67626: LD_INT 4
67628: ARRAY
67629: ST_TO_ADDR
// end ;
67630: LD_VAR 0 3
67634: RET
// export function PlayerSeeMe ( unit ) ; begin
67635: LD_INT 0
67637: PPUSH
// result := See ( your_side , unit ) ;
67638: LD_ADDR_VAR 0 2
67642: PUSH
67643: LD_OWVAR 2
67647: PPUSH
67648: LD_VAR 0 1
67652: PPUSH
67653: CALL_OW 292
67657: ST_TO_ADDR
// end ;
67658: LD_VAR 0 2
67662: RET
// export function ReverseDir ( unit ) ; begin
67663: LD_INT 0
67665: PPUSH
// if not unit then
67666: LD_VAR 0 1
67670: NOT
67671: IFFALSE 67675
// exit ;
67673: GO 67698
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67675: LD_ADDR_VAR 0 2
67679: PUSH
67680: LD_VAR 0 1
67684: PPUSH
67685: CALL_OW 254
67689: PUSH
67690: LD_INT 3
67692: PLUS
67693: PUSH
67694: LD_INT 6
67696: MOD
67697: ST_TO_ADDR
// end ;
67698: LD_VAR 0 2
67702: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
67703: LD_INT 0
67705: PPUSH
67706: PPUSH
67707: PPUSH
67708: PPUSH
67709: PPUSH
67710: PPUSH
// if not unit or not hexes then
67711: LD_VAR 0 1
67715: NOT
67716: PUSH
67717: LD_VAR 0 2
67721: NOT
67722: OR
67723: IFFALSE 67727
// exit ;
67725: GO 67850
// dist := 9999 ;
67727: LD_ADDR_VAR 0 5
67731: PUSH
67732: LD_INT 9999
67734: ST_TO_ADDR
// for i = 1 to hexes do
67735: LD_ADDR_VAR 0 4
67739: PUSH
67740: DOUBLE
67741: LD_INT 1
67743: DEC
67744: ST_TO_ADDR
67745: LD_VAR 0 2
67749: PUSH
67750: FOR_TO
67751: IFFALSE 67838
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67753: LD_ADDR_VAR 0 6
67757: PUSH
67758: LD_VAR 0 1
67762: PPUSH
67763: LD_VAR 0 2
67767: PUSH
67768: LD_VAR 0 4
67772: ARRAY
67773: PUSH
67774: LD_INT 1
67776: ARRAY
67777: PPUSH
67778: LD_VAR 0 2
67782: PUSH
67783: LD_VAR 0 4
67787: ARRAY
67788: PUSH
67789: LD_INT 2
67791: ARRAY
67792: PPUSH
67793: CALL_OW 297
67797: ST_TO_ADDR
// if tdist < dist then
67798: LD_VAR 0 6
67802: PUSH
67803: LD_VAR 0 5
67807: LESS
67808: IFFALSE 67836
// begin hex := hexes [ i ] ;
67810: LD_ADDR_VAR 0 8
67814: PUSH
67815: LD_VAR 0 2
67819: PUSH
67820: LD_VAR 0 4
67824: ARRAY
67825: ST_TO_ADDR
// dist := tdist ;
67826: LD_ADDR_VAR 0 5
67830: PUSH
67831: LD_VAR 0 6
67835: ST_TO_ADDR
// end ; end ;
67836: GO 67750
67838: POP
67839: POP
// result := hex ;
67840: LD_ADDR_VAR 0 3
67844: PUSH
67845: LD_VAR 0 8
67849: ST_TO_ADDR
// end ;
67850: LD_VAR 0 3
67854: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67855: LD_INT 0
67857: PPUSH
67858: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67859: LD_VAR 0 1
67863: NOT
67864: PUSH
67865: LD_VAR 0 1
67869: PUSH
67870: LD_INT 21
67872: PUSH
67873: LD_INT 2
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 23
67882: PUSH
67883: LD_INT 2
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PPUSH
67894: CALL_OW 69
67898: IN
67899: NOT
67900: OR
67901: IFFALSE 67905
// exit ;
67903: GO 67952
// for i = 1 to 3 do
67905: LD_ADDR_VAR 0 3
67909: PUSH
67910: DOUBLE
67911: LD_INT 1
67913: DEC
67914: ST_TO_ADDR
67915: LD_INT 3
67917: PUSH
67918: FOR_TO
67919: IFFALSE 67950
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67921: LD_VAR 0 1
67925: PPUSH
67926: CALL_OW 250
67930: PPUSH
67931: LD_VAR 0 1
67935: PPUSH
67936: CALL_OW 251
67940: PPUSH
67941: LD_INT 1
67943: PPUSH
67944: CALL_OW 453
67948: GO 67918
67950: POP
67951: POP
// end ;
67952: LD_VAR 0 2
67956: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67957: LD_INT 0
67959: PPUSH
67960: PPUSH
67961: PPUSH
67962: PPUSH
67963: PPUSH
67964: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67965: LD_VAR 0 1
67969: NOT
67970: PUSH
67971: LD_VAR 0 2
67975: NOT
67976: OR
67977: PUSH
67978: LD_VAR 0 1
67982: PPUSH
67983: CALL_OW 314
67987: OR
67988: IFFALSE 67992
// exit ;
67990: GO 68433
// x := GetX ( enemy_unit ) ;
67992: LD_ADDR_VAR 0 7
67996: PUSH
67997: LD_VAR 0 2
68001: PPUSH
68002: CALL_OW 250
68006: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68007: LD_ADDR_VAR 0 8
68011: PUSH
68012: LD_VAR 0 2
68016: PPUSH
68017: CALL_OW 251
68021: ST_TO_ADDR
// if not x or not y then
68022: LD_VAR 0 7
68026: NOT
68027: PUSH
68028: LD_VAR 0 8
68032: NOT
68033: OR
68034: IFFALSE 68038
// exit ;
68036: GO 68433
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68038: LD_ADDR_VAR 0 6
68042: PUSH
68043: LD_VAR 0 7
68047: PPUSH
68048: LD_INT 0
68050: PPUSH
68051: LD_INT 4
68053: PPUSH
68054: CALL_OW 272
68058: PUSH
68059: LD_VAR 0 8
68063: PPUSH
68064: LD_INT 0
68066: PPUSH
68067: LD_INT 4
68069: PPUSH
68070: CALL_OW 273
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: LD_VAR 0 7
68083: PPUSH
68084: LD_INT 1
68086: PPUSH
68087: LD_INT 4
68089: PPUSH
68090: CALL_OW 272
68094: PUSH
68095: LD_VAR 0 8
68099: PPUSH
68100: LD_INT 1
68102: PPUSH
68103: LD_INT 4
68105: PPUSH
68106: CALL_OW 273
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_VAR 0 7
68119: PPUSH
68120: LD_INT 2
68122: PPUSH
68123: LD_INT 4
68125: PPUSH
68126: CALL_OW 272
68130: PUSH
68131: LD_VAR 0 8
68135: PPUSH
68136: LD_INT 2
68138: PPUSH
68139: LD_INT 4
68141: PPUSH
68142: CALL_OW 273
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_VAR 0 7
68155: PPUSH
68156: LD_INT 3
68158: PPUSH
68159: LD_INT 4
68161: PPUSH
68162: CALL_OW 272
68166: PUSH
68167: LD_VAR 0 8
68171: PPUSH
68172: LD_INT 3
68174: PPUSH
68175: LD_INT 4
68177: PPUSH
68178: CALL_OW 273
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_VAR 0 7
68191: PPUSH
68192: LD_INT 4
68194: PPUSH
68195: LD_INT 4
68197: PPUSH
68198: CALL_OW 272
68202: PUSH
68203: LD_VAR 0 8
68207: PPUSH
68208: LD_INT 4
68210: PPUSH
68211: LD_INT 4
68213: PPUSH
68214: CALL_OW 273
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_VAR 0 7
68227: PPUSH
68228: LD_INT 5
68230: PPUSH
68231: LD_INT 4
68233: PPUSH
68234: CALL_OW 272
68238: PUSH
68239: LD_VAR 0 8
68243: PPUSH
68244: LD_INT 5
68246: PPUSH
68247: LD_INT 4
68249: PPUSH
68250: CALL_OW 273
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: EMPTY
68260: LIST
68261: LIST
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: ST_TO_ADDR
// for i = tmp downto 1 do
68267: LD_ADDR_VAR 0 4
68271: PUSH
68272: DOUBLE
68273: LD_VAR 0 6
68277: INC
68278: ST_TO_ADDR
68279: LD_INT 1
68281: PUSH
68282: FOR_DOWNTO
68283: IFFALSE 68384
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68285: LD_VAR 0 6
68289: PUSH
68290: LD_VAR 0 4
68294: ARRAY
68295: PUSH
68296: LD_INT 1
68298: ARRAY
68299: PPUSH
68300: LD_VAR 0 6
68304: PUSH
68305: LD_VAR 0 4
68309: ARRAY
68310: PUSH
68311: LD_INT 2
68313: ARRAY
68314: PPUSH
68315: CALL_OW 488
68319: NOT
68320: PUSH
68321: LD_VAR 0 6
68325: PUSH
68326: LD_VAR 0 4
68330: ARRAY
68331: PUSH
68332: LD_INT 1
68334: ARRAY
68335: PPUSH
68336: LD_VAR 0 6
68340: PUSH
68341: LD_VAR 0 4
68345: ARRAY
68346: PUSH
68347: LD_INT 2
68349: ARRAY
68350: PPUSH
68351: CALL_OW 428
68355: PUSH
68356: LD_INT 0
68358: NONEQUAL
68359: OR
68360: IFFALSE 68382
// tmp := Delete ( tmp , i ) ;
68362: LD_ADDR_VAR 0 6
68366: PUSH
68367: LD_VAR 0 6
68371: PPUSH
68372: LD_VAR 0 4
68376: PPUSH
68377: CALL_OW 3
68381: ST_TO_ADDR
68382: GO 68282
68384: POP
68385: POP
// j := GetClosestHex ( unit , tmp ) ;
68386: LD_ADDR_VAR 0 5
68390: PUSH
68391: LD_VAR 0 1
68395: PPUSH
68396: LD_VAR 0 6
68400: PPUSH
68401: CALL 67703 0 2
68405: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68406: LD_VAR 0 1
68410: PPUSH
68411: LD_VAR 0 5
68415: PUSH
68416: LD_INT 1
68418: ARRAY
68419: PPUSH
68420: LD_VAR 0 5
68424: PUSH
68425: LD_INT 2
68427: ARRAY
68428: PPUSH
68429: CALL_OW 111
// end ;
68433: LD_VAR 0 3
68437: RET
// export function PrepareApemanSoldier ( ) ; begin
68438: LD_INT 0
68440: PPUSH
// uc_nation := 0 ;
68441: LD_ADDR_OWVAR 21
68445: PUSH
68446: LD_INT 0
68448: ST_TO_ADDR
// hc_sex := sex_male ;
68449: LD_ADDR_OWVAR 27
68453: PUSH
68454: LD_INT 1
68456: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
68457: LD_ADDR_OWVAR 28
68461: PUSH
68462: LD_INT 15
68464: ST_TO_ADDR
// hc_gallery :=  ;
68465: LD_ADDR_OWVAR 33
68469: PUSH
68470: LD_STRING 
68472: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68473: LD_ADDR_OWVAR 31
68477: PUSH
68478: LD_INT 0
68480: PPUSH
68481: LD_INT 3
68483: PPUSH
68484: CALL_OW 12
68488: PUSH
68489: LD_INT 0
68491: PPUSH
68492: LD_INT 3
68494: PPUSH
68495: CALL_OW 12
68499: PUSH
68500: LD_INT 0
68502: PUSH
68503: LD_INT 0
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: LIST
68510: LIST
68511: ST_TO_ADDR
// end ;
68512: LD_VAR 0 1
68516: RET
// export function PrepareApemanEngineer ( ) ; begin
68517: LD_INT 0
68519: PPUSH
// uc_nation := 0 ;
68520: LD_ADDR_OWVAR 21
68524: PUSH
68525: LD_INT 0
68527: ST_TO_ADDR
// hc_sex := sex_male ;
68528: LD_ADDR_OWVAR 27
68532: PUSH
68533: LD_INT 1
68535: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
68536: LD_ADDR_OWVAR 28
68540: PUSH
68541: LD_INT 16
68543: ST_TO_ADDR
// hc_gallery :=  ;
68544: LD_ADDR_OWVAR 33
68548: PUSH
68549: LD_STRING 
68551: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68552: LD_ADDR_OWVAR 31
68556: PUSH
68557: LD_INT 0
68559: PPUSH
68560: LD_INT 3
68562: PPUSH
68563: CALL_OW 12
68567: PUSH
68568: LD_INT 0
68570: PPUSH
68571: LD_INT 3
68573: PPUSH
68574: CALL_OW 12
68578: PUSH
68579: LD_INT 0
68581: PUSH
68582: LD_INT 0
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: ST_TO_ADDR
// end ;
68591: LD_VAR 0 1
68595: RET
// export function PrepareApeman ( agressivity ) ; begin
68596: LD_INT 0
68598: PPUSH
// uc_side := 0 ;
68599: LD_ADDR_OWVAR 20
68603: PUSH
68604: LD_INT 0
68606: ST_TO_ADDR
// uc_nation := 0 ;
68607: LD_ADDR_OWVAR 21
68611: PUSH
68612: LD_INT 0
68614: ST_TO_ADDR
// hc_sex := sex_male ;
68615: LD_ADDR_OWVAR 27
68619: PUSH
68620: LD_INT 1
68622: ST_TO_ADDR
// hc_class := class_apeman ;
68623: LD_ADDR_OWVAR 28
68627: PUSH
68628: LD_INT 12
68630: ST_TO_ADDR
// hc_gallery :=  ;
68631: LD_ADDR_OWVAR 33
68635: PUSH
68636: LD_STRING 
68638: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68639: LD_ADDR_OWVAR 35
68643: PUSH
68644: LD_VAR 0 1
68648: NEG
68649: PPUSH
68650: LD_VAR 0 1
68654: PPUSH
68655: CALL_OW 12
68659: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68660: LD_ADDR_OWVAR 31
68664: PUSH
68665: LD_INT 0
68667: PPUSH
68668: LD_INT 3
68670: PPUSH
68671: CALL_OW 12
68675: PUSH
68676: LD_INT 0
68678: PPUSH
68679: LD_INT 3
68681: PPUSH
68682: CALL_OW 12
68686: PUSH
68687: LD_INT 0
68689: PUSH
68690: LD_INT 0
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: LIST
68697: LIST
68698: ST_TO_ADDR
// end ;
68699: LD_VAR 0 2
68703: RET
// export function PrepareTiger ( agressivity ) ; begin
68704: LD_INT 0
68706: PPUSH
// uc_side := 0 ;
68707: LD_ADDR_OWVAR 20
68711: PUSH
68712: LD_INT 0
68714: ST_TO_ADDR
// uc_nation := 0 ;
68715: LD_ADDR_OWVAR 21
68719: PUSH
68720: LD_INT 0
68722: ST_TO_ADDR
// hc_class := class_tiger ;
68723: LD_ADDR_OWVAR 28
68727: PUSH
68728: LD_INT 14
68730: ST_TO_ADDR
// hc_gallery :=  ;
68731: LD_ADDR_OWVAR 33
68735: PUSH
68736: LD_STRING 
68738: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68739: LD_ADDR_OWVAR 35
68743: PUSH
68744: LD_VAR 0 1
68748: NEG
68749: PPUSH
68750: LD_VAR 0 1
68754: PPUSH
68755: CALL_OW 12
68759: ST_TO_ADDR
// end ;
68760: LD_VAR 0 2
68764: RET
// export function PrepareEnchidna ( ) ; begin
68765: LD_INT 0
68767: PPUSH
// uc_side := 0 ;
68768: LD_ADDR_OWVAR 20
68772: PUSH
68773: LD_INT 0
68775: ST_TO_ADDR
// uc_nation := 0 ;
68776: LD_ADDR_OWVAR 21
68780: PUSH
68781: LD_INT 0
68783: ST_TO_ADDR
// hc_class := class_baggie ;
68784: LD_ADDR_OWVAR 28
68788: PUSH
68789: LD_INT 13
68791: ST_TO_ADDR
// hc_gallery :=  ;
68792: LD_ADDR_OWVAR 33
68796: PUSH
68797: LD_STRING 
68799: ST_TO_ADDR
// end ;
68800: LD_VAR 0 1
68804: RET
// export function PrepareFrog ( ) ; begin
68805: LD_INT 0
68807: PPUSH
// uc_side := 0 ;
68808: LD_ADDR_OWVAR 20
68812: PUSH
68813: LD_INT 0
68815: ST_TO_ADDR
// uc_nation := 0 ;
68816: LD_ADDR_OWVAR 21
68820: PUSH
68821: LD_INT 0
68823: ST_TO_ADDR
// hc_class := class_frog ;
68824: LD_ADDR_OWVAR 28
68828: PUSH
68829: LD_INT 19
68831: ST_TO_ADDR
// hc_gallery :=  ;
68832: LD_ADDR_OWVAR 33
68836: PUSH
68837: LD_STRING 
68839: ST_TO_ADDR
// end ;
68840: LD_VAR 0 1
68844: RET
// export function PrepareFish ( ) ; begin
68845: LD_INT 0
68847: PPUSH
// uc_side := 0 ;
68848: LD_ADDR_OWVAR 20
68852: PUSH
68853: LD_INT 0
68855: ST_TO_ADDR
// uc_nation := 0 ;
68856: LD_ADDR_OWVAR 21
68860: PUSH
68861: LD_INT 0
68863: ST_TO_ADDR
// hc_class := class_fish ;
68864: LD_ADDR_OWVAR 28
68868: PUSH
68869: LD_INT 20
68871: ST_TO_ADDR
// hc_gallery :=  ;
68872: LD_ADDR_OWVAR 33
68876: PUSH
68877: LD_STRING 
68879: ST_TO_ADDR
// end ;
68880: LD_VAR 0 1
68884: RET
// export function PrepareBird ( ) ; begin
68885: LD_INT 0
68887: PPUSH
// uc_side := 0 ;
68888: LD_ADDR_OWVAR 20
68892: PUSH
68893: LD_INT 0
68895: ST_TO_ADDR
// uc_nation := 0 ;
68896: LD_ADDR_OWVAR 21
68900: PUSH
68901: LD_INT 0
68903: ST_TO_ADDR
// hc_class := class_phororhacos ;
68904: LD_ADDR_OWVAR 28
68908: PUSH
68909: LD_INT 18
68911: ST_TO_ADDR
// hc_gallery :=  ;
68912: LD_ADDR_OWVAR 33
68916: PUSH
68917: LD_STRING 
68919: ST_TO_ADDR
// end ;
68920: LD_VAR 0 1
68924: RET
// export function PrepareHorse ( ) ; begin
68925: LD_INT 0
68927: PPUSH
// uc_side := 0 ;
68928: LD_ADDR_OWVAR 20
68932: PUSH
68933: LD_INT 0
68935: ST_TO_ADDR
// uc_nation := 0 ;
68936: LD_ADDR_OWVAR 21
68940: PUSH
68941: LD_INT 0
68943: ST_TO_ADDR
// hc_class := class_horse ;
68944: LD_ADDR_OWVAR 28
68948: PUSH
68949: LD_INT 21
68951: ST_TO_ADDR
// hc_gallery :=  ;
68952: LD_ADDR_OWVAR 33
68956: PUSH
68957: LD_STRING 
68959: ST_TO_ADDR
// end ;
68960: LD_VAR 0 1
68964: RET
// export function PrepareMastodont ( ) ; begin
68965: LD_INT 0
68967: PPUSH
// uc_side := 0 ;
68968: LD_ADDR_OWVAR 20
68972: PUSH
68973: LD_INT 0
68975: ST_TO_ADDR
// uc_nation := 0 ;
68976: LD_ADDR_OWVAR 21
68980: PUSH
68981: LD_INT 0
68983: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68984: LD_ADDR_OWVAR 37
68988: PUSH
68989: LD_INT 31
68991: ST_TO_ADDR
// vc_control := control_rider ;
68992: LD_ADDR_OWVAR 38
68996: PUSH
68997: LD_INT 4
68999: ST_TO_ADDR
// end ;
69000: LD_VAR 0 1
69004: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69005: LD_INT 0
69007: PPUSH
69008: PPUSH
69009: PPUSH
// uc_side = 0 ;
69010: LD_ADDR_OWVAR 20
69014: PUSH
69015: LD_INT 0
69017: ST_TO_ADDR
// uc_nation = 0 ;
69018: LD_ADDR_OWVAR 21
69022: PUSH
69023: LD_INT 0
69025: ST_TO_ADDR
// InitHc_All ( ) ;
69026: CALL_OW 584
// InitVc ;
69030: CALL_OW 20
// if mastodonts then
69034: LD_VAR 0 6
69038: IFFALSE 69105
// for i = 1 to mastodonts do
69040: LD_ADDR_VAR 0 11
69044: PUSH
69045: DOUBLE
69046: LD_INT 1
69048: DEC
69049: ST_TO_ADDR
69050: LD_VAR 0 6
69054: PUSH
69055: FOR_TO
69056: IFFALSE 69103
// begin vc_chassis := 31 ;
69058: LD_ADDR_OWVAR 37
69062: PUSH
69063: LD_INT 31
69065: ST_TO_ADDR
// vc_control := control_rider ;
69066: LD_ADDR_OWVAR 38
69070: PUSH
69071: LD_INT 4
69073: ST_TO_ADDR
// animal := CreateVehicle ;
69074: LD_ADDR_VAR 0 12
69078: PUSH
69079: CALL_OW 45
69083: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69084: LD_VAR 0 12
69088: PPUSH
69089: LD_VAR 0 8
69093: PPUSH
69094: LD_INT 0
69096: PPUSH
69097: CALL 71240 0 3
// end ;
69101: GO 69055
69103: POP
69104: POP
// if horses then
69105: LD_VAR 0 5
69109: IFFALSE 69176
// for i = 1 to horses do
69111: LD_ADDR_VAR 0 11
69115: PUSH
69116: DOUBLE
69117: LD_INT 1
69119: DEC
69120: ST_TO_ADDR
69121: LD_VAR 0 5
69125: PUSH
69126: FOR_TO
69127: IFFALSE 69174
// begin hc_class := 21 ;
69129: LD_ADDR_OWVAR 28
69133: PUSH
69134: LD_INT 21
69136: ST_TO_ADDR
// hc_gallery :=  ;
69137: LD_ADDR_OWVAR 33
69141: PUSH
69142: LD_STRING 
69144: ST_TO_ADDR
// animal := CreateHuman ;
69145: LD_ADDR_VAR 0 12
69149: PUSH
69150: CALL_OW 44
69154: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69155: LD_VAR 0 12
69159: PPUSH
69160: LD_VAR 0 8
69164: PPUSH
69165: LD_INT 0
69167: PPUSH
69168: CALL 71240 0 3
// end ;
69172: GO 69126
69174: POP
69175: POP
// if birds then
69176: LD_VAR 0 1
69180: IFFALSE 69247
// for i = 1 to birds do
69182: LD_ADDR_VAR 0 11
69186: PUSH
69187: DOUBLE
69188: LD_INT 1
69190: DEC
69191: ST_TO_ADDR
69192: LD_VAR 0 1
69196: PUSH
69197: FOR_TO
69198: IFFALSE 69245
// begin hc_class = 18 ;
69200: LD_ADDR_OWVAR 28
69204: PUSH
69205: LD_INT 18
69207: ST_TO_ADDR
// hc_gallery =  ;
69208: LD_ADDR_OWVAR 33
69212: PUSH
69213: LD_STRING 
69215: ST_TO_ADDR
// animal := CreateHuman ;
69216: LD_ADDR_VAR 0 12
69220: PUSH
69221: CALL_OW 44
69225: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69226: LD_VAR 0 12
69230: PPUSH
69231: LD_VAR 0 8
69235: PPUSH
69236: LD_INT 0
69238: PPUSH
69239: CALL 71240 0 3
// end ;
69243: GO 69197
69245: POP
69246: POP
// if tigers then
69247: LD_VAR 0 2
69251: IFFALSE 69335
// for i = 1 to tigers do
69253: LD_ADDR_VAR 0 11
69257: PUSH
69258: DOUBLE
69259: LD_INT 1
69261: DEC
69262: ST_TO_ADDR
69263: LD_VAR 0 2
69267: PUSH
69268: FOR_TO
69269: IFFALSE 69333
// begin hc_class = class_tiger ;
69271: LD_ADDR_OWVAR 28
69275: PUSH
69276: LD_INT 14
69278: ST_TO_ADDR
// hc_gallery =  ;
69279: LD_ADDR_OWVAR 33
69283: PUSH
69284: LD_STRING 
69286: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69287: LD_ADDR_OWVAR 35
69291: PUSH
69292: LD_INT 7
69294: NEG
69295: PPUSH
69296: LD_INT 7
69298: PPUSH
69299: CALL_OW 12
69303: ST_TO_ADDR
// animal := CreateHuman ;
69304: LD_ADDR_VAR 0 12
69308: PUSH
69309: CALL_OW 44
69313: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69314: LD_VAR 0 12
69318: PPUSH
69319: LD_VAR 0 8
69323: PPUSH
69324: LD_INT 0
69326: PPUSH
69327: CALL 71240 0 3
// end ;
69331: GO 69268
69333: POP
69334: POP
// if apemans then
69335: LD_VAR 0 3
69339: IFFALSE 69462
// for i = 1 to apemans do
69341: LD_ADDR_VAR 0 11
69345: PUSH
69346: DOUBLE
69347: LD_INT 1
69349: DEC
69350: ST_TO_ADDR
69351: LD_VAR 0 3
69355: PUSH
69356: FOR_TO
69357: IFFALSE 69460
// begin hc_class = class_apeman ;
69359: LD_ADDR_OWVAR 28
69363: PUSH
69364: LD_INT 12
69366: ST_TO_ADDR
// hc_gallery =  ;
69367: LD_ADDR_OWVAR 33
69371: PUSH
69372: LD_STRING 
69374: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69375: LD_ADDR_OWVAR 35
69379: PUSH
69380: LD_INT 2
69382: NEG
69383: PPUSH
69384: LD_INT 2
69386: PPUSH
69387: CALL_OW 12
69391: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69392: LD_ADDR_OWVAR 31
69396: PUSH
69397: LD_INT 1
69399: PPUSH
69400: LD_INT 3
69402: PPUSH
69403: CALL_OW 12
69407: PUSH
69408: LD_INT 1
69410: PPUSH
69411: LD_INT 3
69413: PPUSH
69414: CALL_OW 12
69418: PUSH
69419: LD_INT 0
69421: PUSH
69422: LD_INT 0
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: ST_TO_ADDR
// animal := CreateHuman ;
69431: LD_ADDR_VAR 0 12
69435: PUSH
69436: CALL_OW 44
69440: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69441: LD_VAR 0 12
69445: PPUSH
69446: LD_VAR 0 8
69450: PPUSH
69451: LD_INT 0
69453: PPUSH
69454: CALL 71240 0 3
// end ;
69458: GO 69356
69460: POP
69461: POP
// if enchidnas then
69462: LD_VAR 0 4
69466: IFFALSE 69533
// for i = 1 to enchidnas do
69468: LD_ADDR_VAR 0 11
69472: PUSH
69473: DOUBLE
69474: LD_INT 1
69476: DEC
69477: ST_TO_ADDR
69478: LD_VAR 0 4
69482: PUSH
69483: FOR_TO
69484: IFFALSE 69531
// begin hc_class = 13 ;
69486: LD_ADDR_OWVAR 28
69490: PUSH
69491: LD_INT 13
69493: ST_TO_ADDR
// hc_gallery =  ;
69494: LD_ADDR_OWVAR 33
69498: PUSH
69499: LD_STRING 
69501: ST_TO_ADDR
// animal := CreateHuman ;
69502: LD_ADDR_VAR 0 12
69506: PUSH
69507: CALL_OW 44
69511: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69512: LD_VAR 0 12
69516: PPUSH
69517: LD_VAR 0 8
69521: PPUSH
69522: LD_INT 0
69524: PPUSH
69525: CALL 71240 0 3
// end ;
69529: GO 69483
69531: POP
69532: POP
// if fishes then
69533: LD_VAR 0 7
69537: IFFALSE 69604
// for i = 1 to fishes do
69539: LD_ADDR_VAR 0 11
69543: PUSH
69544: DOUBLE
69545: LD_INT 1
69547: DEC
69548: ST_TO_ADDR
69549: LD_VAR 0 7
69553: PUSH
69554: FOR_TO
69555: IFFALSE 69602
// begin hc_class = 20 ;
69557: LD_ADDR_OWVAR 28
69561: PUSH
69562: LD_INT 20
69564: ST_TO_ADDR
// hc_gallery =  ;
69565: LD_ADDR_OWVAR 33
69569: PUSH
69570: LD_STRING 
69572: ST_TO_ADDR
// animal := CreateHuman ;
69573: LD_ADDR_VAR 0 12
69577: PUSH
69578: CALL_OW 44
69582: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69583: LD_VAR 0 12
69587: PPUSH
69588: LD_VAR 0 9
69592: PPUSH
69593: LD_INT 0
69595: PPUSH
69596: CALL 71240 0 3
// end ;
69600: GO 69554
69602: POP
69603: POP
// end ;
69604: LD_VAR 0 10
69608: RET
// export function WantHeal ( sci , unit ) ; begin
69609: LD_INT 0
69611: PPUSH
// if GetTaskList ( sci ) > 0 then
69612: LD_VAR 0 1
69616: PPUSH
69617: CALL_OW 437
69621: PUSH
69622: LD_INT 0
69624: GREATER
69625: IFFALSE 69695
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69627: LD_VAR 0 1
69631: PPUSH
69632: CALL_OW 437
69636: PUSH
69637: LD_INT 1
69639: ARRAY
69640: PUSH
69641: LD_INT 1
69643: ARRAY
69644: PUSH
69645: LD_STRING l
69647: EQUAL
69648: PUSH
69649: LD_VAR 0 1
69653: PPUSH
69654: CALL_OW 437
69658: PUSH
69659: LD_INT 1
69661: ARRAY
69662: PUSH
69663: LD_INT 4
69665: ARRAY
69666: PUSH
69667: LD_VAR 0 2
69671: EQUAL
69672: AND
69673: IFFALSE 69685
// result := true else
69675: LD_ADDR_VAR 0 3
69679: PUSH
69680: LD_INT 1
69682: ST_TO_ADDR
69683: GO 69693
// result := false ;
69685: LD_ADDR_VAR 0 3
69689: PUSH
69690: LD_INT 0
69692: ST_TO_ADDR
// end else
69693: GO 69703
// result := false ;
69695: LD_ADDR_VAR 0 3
69699: PUSH
69700: LD_INT 0
69702: ST_TO_ADDR
// end ;
69703: LD_VAR 0 3
69707: RET
// export function HealTarget ( sci ) ; begin
69708: LD_INT 0
69710: PPUSH
// if not sci then
69711: LD_VAR 0 1
69715: NOT
69716: IFFALSE 69720
// exit ;
69718: GO 69785
// result := 0 ;
69720: LD_ADDR_VAR 0 2
69724: PUSH
69725: LD_INT 0
69727: ST_TO_ADDR
// if GetTaskList ( sci ) then
69728: LD_VAR 0 1
69732: PPUSH
69733: CALL_OW 437
69737: IFFALSE 69785
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69739: LD_VAR 0 1
69743: PPUSH
69744: CALL_OW 437
69748: PUSH
69749: LD_INT 1
69751: ARRAY
69752: PUSH
69753: LD_INT 1
69755: ARRAY
69756: PUSH
69757: LD_STRING l
69759: EQUAL
69760: IFFALSE 69785
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69762: LD_ADDR_VAR 0 2
69766: PUSH
69767: LD_VAR 0 1
69771: PPUSH
69772: CALL_OW 437
69776: PUSH
69777: LD_INT 1
69779: ARRAY
69780: PUSH
69781: LD_INT 4
69783: ARRAY
69784: ST_TO_ADDR
// end ;
69785: LD_VAR 0 2
69789: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69790: LD_INT 0
69792: PPUSH
69793: PPUSH
69794: PPUSH
69795: PPUSH
// if not base_units then
69796: LD_VAR 0 1
69800: NOT
69801: IFFALSE 69805
// exit ;
69803: GO 69892
// result := false ;
69805: LD_ADDR_VAR 0 2
69809: PUSH
69810: LD_INT 0
69812: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69813: LD_ADDR_VAR 0 5
69817: PUSH
69818: LD_VAR 0 1
69822: PPUSH
69823: LD_INT 21
69825: PUSH
69826: LD_INT 3
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PPUSH
69833: CALL_OW 72
69837: ST_TO_ADDR
// if not tmp then
69838: LD_VAR 0 5
69842: NOT
69843: IFFALSE 69847
// exit ;
69845: GO 69892
// for i in tmp do
69847: LD_ADDR_VAR 0 3
69851: PUSH
69852: LD_VAR 0 5
69856: PUSH
69857: FOR_IN
69858: IFFALSE 69890
// begin result := EnemyInRange ( i , 22 ) ;
69860: LD_ADDR_VAR 0 2
69864: PUSH
69865: LD_VAR 0 3
69869: PPUSH
69870: LD_INT 22
69872: PPUSH
69873: CALL 67578 0 2
69877: ST_TO_ADDR
// if result then
69878: LD_VAR 0 2
69882: IFFALSE 69888
// exit ;
69884: POP
69885: POP
69886: GO 69892
// end ;
69888: GO 69857
69890: POP
69891: POP
// end ;
69892: LD_VAR 0 2
69896: RET
// export function FilterByTag ( units , tag ) ; begin
69897: LD_INT 0
69899: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
69900: LD_ADDR_VAR 0 3
69904: PUSH
69905: LD_VAR 0 1
69909: PPUSH
69910: LD_INT 120
69912: PUSH
69913: LD_VAR 0 2
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PPUSH
69922: CALL_OW 72
69926: ST_TO_ADDR
// end ;
69927: LD_VAR 0 3
69931: RET
// export function IsDriver ( un ) ; begin
69932: LD_INT 0
69934: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69935: LD_ADDR_VAR 0 2
69939: PUSH
69940: LD_VAR 0 1
69944: PUSH
69945: LD_INT 55
69947: PUSH
69948: EMPTY
69949: LIST
69950: PPUSH
69951: CALL_OW 69
69955: IN
69956: ST_TO_ADDR
// end ;
69957: LD_VAR 0 2
69961: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69962: LD_INT 0
69964: PPUSH
69965: PPUSH
// list := [ ] ;
69966: LD_ADDR_VAR 0 5
69970: PUSH
69971: EMPTY
69972: ST_TO_ADDR
// case d of 0 :
69973: LD_VAR 0 3
69977: PUSH
69978: LD_INT 0
69980: DOUBLE
69981: EQUAL
69982: IFTRUE 69986
69984: GO 70119
69986: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69987: LD_ADDR_VAR 0 5
69991: PUSH
69992: LD_VAR 0 1
69996: PUSH
69997: LD_INT 4
69999: MINUS
70000: PUSH
70001: LD_VAR 0 2
70005: PUSH
70006: LD_INT 4
70008: MINUS
70009: PUSH
70010: LD_INT 2
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: LIST
70017: PUSH
70018: LD_VAR 0 1
70022: PUSH
70023: LD_INT 3
70025: MINUS
70026: PUSH
70027: LD_VAR 0 2
70031: PUSH
70032: LD_INT 1
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: LIST
70039: PUSH
70040: LD_VAR 0 1
70044: PUSH
70045: LD_INT 4
70047: PLUS
70048: PUSH
70049: LD_VAR 0 2
70053: PUSH
70054: LD_INT 4
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: LIST
70061: PUSH
70062: LD_VAR 0 1
70066: PUSH
70067: LD_INT 3
70069: PLUS
70070: PUSH
70071: LD_VAR 0 2
70075: PUSH
70076: LD_INT 3
70078: PLUS
70079: PUSH
70080: LD_INT 5
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: LIST
70087: PUSH
70088: LD_VAR 0 1
70092: PUSH
70093: LD_VAR 0 2
70097: PUSH
70098: LD_INT 4
70100: PLUS
70101: PUSH
70102: LD_INT 0
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: LIST
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: ST_TO_ADDR
// end ; 1 :
70117: GO 70817
70119: LD_INT 1
70121: DOUBLE
70122: EQUAL
70123: IFTRUE 70127
70125: GO 70260
70127: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70128: LD_ADDR_VAR 0 5
70132: PUSH
70133: LD_VAR 0 1
70137: PUSH
70138: LD_VAR 0 2
70142: PUSH
70143: LD_INT 4
70145: MINUS
70146: PUSH
70147: LD_INT 3
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: LIST
70154: PUSH
70155: LD_VAR 0 1
70159: PUSH
70160: LD_INT 3
70162: MINUS
70163: PUSH
70164: LD_VAR 0 2
70168: PUSH
70169: LD_INT 3
70171: MINUS
70172: PUSH
70173: LD_INT 2
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: LIST
70180: PUSH
70181: LD_VAR 0 1
70185: PUSH
70186: LD_INT 4
70188: MINUS
70189: PUSH
70190: LD_VAR 0 2
70194: PUSH
70195: LD_INT 1
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: LIST
70202: PUSH
70203: LD_VAR 0 1
70207: PUSH
70208: LD_VAR 0 2
70212: PUSH
70213: LD_INT 3
70215: PLUS
70216: PUSH
70217: LD_INT 0
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: LIST
70224: PUSH
70225: LD_VAR 0 1
70229: PUSH
70230: LD_INT 4
70232: PLUS
70233: PUSH
70234: LD_VAR 0 2
70238: PUSH
70239: LD_INT 4
70241: PLUS
70242: PUSH
70243: LD_INT 5
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: LIST
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: ST_TO_ADDR
// end ; 2 :
70258: GO 70817
70260: LD_INT 2
70262: DOUBLE
70263: EQUAL
70264: IFTRUE 70268
70266: GO 70397
70268: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70269: LD_ADDR_VAR 0 5
70273: PUSH
70274: LD_VAR 0 1
70278: PUSH
70279: LD_VAR 0 2
70283: PUSH
70284: LD_INT 3
70286: MINUS
70287: PUSH
70288: LD_INT 3
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: LIST
70295: PUSH
70296: LD_VAR 0 1
70300: PUSH
70301: LD_INT 4
70303: PLUS
70304: PUSH
70305: LD_VAR 0 2
70309: PUSH
70310: LD_INT 4
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: LIST
70317: PUSH
70318: LD_VAR 0 1
70322: PUSH
70323: LD_VAR 0 2
70327: PUSH
70328: LD_INT 4
70330: PLUS
70331: PUSH
70332: LD_INT 0
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: LIST
70339: PUSH
70340: LD_VAR 0 1
70344: PUSH
70345: LD_INT 3
70347: MINUS
70348: PUSH
70349: LD_VAR 0 2
70353: PUSH
70354: LD_INT 1
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: LIST
70361: PUSH
70362: LD_VAR 0 1
70366: PUSH
70367: LD_INT 4
70369: MINUS
70370: PUSH
70371: LD_VAR 0 2
70375: PUSH
70376: LD_INT 4
70378: MINUS
70379: PUSH
70380: LD_INT 2
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: LIST
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: LIST
70392: LIST
70393: LIST
70394: ST_TO_ADDR
// end ; 3 :
70395: GO 70817
70397: LD_INT 3
70399: DOUBLE
70400: EQUAL
70401: IFTRUE 70405
70403: GO 70538
70405: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70406: LD_ADDR_VAR 0 5
70410: PUSH
70411: LD_VAR 0 1
70415: PUSH
70416: LD_INT 3
70418: PLUS
70419: PUSH
70420: LD_VAR 0 2
70424: PUSH
70425: LD_INT 4
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: LIST
70432: PUSH
70433: LD_VAR 0 1
70437: PUSH
70438: LD_INT 4
70440: PLUS
70441: PUSH
70442: LD_VAR 0 2
70446: PUSH
70447: LD_INT 4
70449: PLUS
70450: PUSH
70451: LD_INT 5
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: LIST
70458: PUSH
70459: LD_VAR 0 1
70463: PUSH
70464: LD_INT 4
70466: MINUS
70467: PUSH
70468: LD_VAR 0 2
70472: PUSH
70473: LD_INT 1
70475: PUSH
70476: EMPTY
70477: LIST
70478: LIST
70479: LIST
70480: PUSH
70481: LD_VAR 0 1
70485: PUSH
70486: LD_VAR 0 2
70490: PUSH
70491: LD_INT 4
70493: MINUS
70494: PUSH
70495: LD_INT 3
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: LIST
70502: PUSH
70503: LD_VAR 0 1
70507: PUSH
70508: LD_INT 3
70510: MINUS
70511: PUSH
70512: LD_VAR 0 2
70516: PUSH
70517: LD_INT 3
70519: MINUS
70520: PUSH
70521: LD_INT 2
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: LIST
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: ST_TO_ADDR
// end ; 4 :
70536: GO 70817
70538: LD_INT 4
70540: DOUBLE
70541: EQUAL
70542: IFTRUE 70546
70544: GO 70679
70546: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70547: LD_ADDR_VAR 0 5
70551: PUSH
70552: LD_VAR 0 1
70556: PUSH
70557: LD_VAR 0 2
70561: PUSH
70562: LD_INT 4
70564: PLUS
70565: PUSH
70566: LD_INT 0
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: LIST
70573: PUSH
70574: LD_VAR 0 1
70578: PUSH
70579: LD_INT 3
70581: PLUS
70582: PUSH
70583: LD_VAR 0 2
70587: PUSH
70588: LD_INT 3
70590: PLUS
70591: PUSH
70592: LD_INT 5
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: LIST
70599: PUSH
70600: LD_VAR 0 1
70604: PUSH
70605: LD_INT 4
70607: PLUS
70608: PUSH
70609: LD_VAR 0 2
70613: PUSH
70614: LD_INT 4
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: LIST
70621: PUSH
70622: LD_VAR 0 1
70626: PUSH
70627: LD_VAR 0 2
70631: PUSH
70632: LD_INT 3
70634: MINUS
70635: PUSH
70636: LD_INT 3
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: LIST
70643: PUSH
70644: LD_VAR 0 1
70648: PUSH
70649: LD_INT 4
70651: MINUS
70652: PUSH
70653: LD_VAR 0 2
70657: PUSH
70658: LD_INT 4
70660: MINUS
70661: PUSH
70662: LD_INT 2
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: LIST
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: LIST
70676: ST_TO_ADDR
// end ; 5 :
70677: GO 70817
70679: LD_INT 5
70681: DOUBLE
70682: EQUAL
70683: IFTRUE 70687
70685: GO 70816
70687: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70688: LD_ADDR_VAR 0 5
70692: PUSH
70693: LD_VAR 0 1
70697: PUSH
70698: LD_INT 4
70700: MINUS
70701: PUSH
70702: LD_VAR 0 2
70706: PUSH
70707: LD_INT 1
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: LIST
70714: PUSH
70715: LD_VAR 0 1
70719: PUSH
70720: LD_VAR 0 2
70724: PUSH
70725: LD_INT 4
70727: MINUS
70728: PUSH
70729: LD_INT 3
70731: PUSH
70732: EMPTY
70733: LIST
70734: LIST
70735: LIST
70736: PUSH
70737: LD_VAR 0 1
70741: PUSH
70742: LD_INT 4
70744: PLUS
70745: PUSH
70746: LD_VAR 0 2
70750: PUSH
70751: LD_INT 4
70753: PLUS
70754: PUSH
70755: LD_INT 5
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: LIST
70762: PUSH
70763: LD_VAR 0 1
70767: PUSH
70768: LD_INT 3
70770: PLUS
70771: PUSH
70772: LD_VAR 0 2
70776: PUSH
70777: LD_INT 4
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: LIST
70784: PUSH
70785: LD_VAR 0 1
70789: PUSH
70790: LD_VAR 0 2
70794: PUSH
70795: LD_INT 3
70797: PLUS
70798: PUSH
70799: LD_INT 0
70801: PUSH
70802: EMPTY
70803: LIST
70804: LIST
70805: LIST
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: ST_TO_ADDR
// end ; end ;
70814: GO 70817
70816: POP
// result := list ;
70817: LD_ADDR_VAR 0 4
70821: PUSH
70822: LD_VAR 0 5
70826: ST_TO_ADDR
// end ;
70827: LD_VAR 0 4
70831: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70832: LD_INT 0
70834: PPUSH
70835: PPUSH
70836: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70837: LD_VAR 0 1
70841: NOT
70842: PUSH
70843: LD_VAR 0 2
70847: PUSH
70848: LD_INT 1
70850: PUSH
70851: LD_INT 2
70853: PUSH
70854: LD_INT 3
70856: PUSH
70857: LD_INT 4
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: LIST
70864: LIST
70865: IN
70866: NOT
70867: OR
70868: IFFALSE 70872
// exit ;
70870: GO 70964
// tmp := [ ] ;
70872: LD_ADDR_VAR 0 5
70876: PUSH
70877: EMPTY
70878: ST_TO_ADDR
// for i in units do
70879: LD_ADDR_VAR 0 4
70883: PUSH
70884: LD_VAR 0 1
70888: PUSH
70889: FOR_IN
70890: IFFALSE 70933
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70892: LD_ADDR_VAR 0 5
70896: PUSH
70897: LD_VAR 0 5
70901: PPUSH
70902: LD_VAR 0 5
70906: PUSH
70907: LD_INT 1
70909: PLUS
70910: PPUSH
70911: LD_VAR 0 4
70915: PPUSH
70916: LD_VAR 0 2
70920: PPUSH
70921: CALL_OW 259
70925: PPUSH
70926: CALL_OW 2
70930: ST_TO_ADDR
70931: GO 70889
70933: POP
70934: POP
// if not tmp then
70935: LD_VAR 0 5
70939: NOT
70940: IFFALSE 70944
// exit ;
70942: GO 70964
// result := SortListByListDesc ( units , tmp ) ;
70944: LD_ADDR_VAR 0 3
70948: PUSH
70949: LD_VAR 0 1
70953: PPUSH
70954: LD_VAR 0 5
70958: PPUSH
70959: CALL_OW 77
70963: ST_TO_ADDR
// end ;
70964: LD_VAR 0 3
70968: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70969: LD_INT 0
70971: PPUSH
70972: PPUSH
70973: PPUSH
// result := false ;
70974: LD_ADDR_VAR 0 3
70978: PUSH
70979: LD_INT 0
70981: ST_TO_ADDR
// x := GetX ( building ) ;
70982: LD_ADDR_VAR 0 4
70986: PUSH
70987: LD_VAR 0 2
70991: PPUSH
70992: CALL_OW 250
70996: ST_TO_ADDR
// y := GetY ( building ) ;
70997: LD_ADDR_VAR 0 5
71001: PUSH
71002: LD_VAR 0 2
71006: PPUSH
71007: CALL_OW 251
71011: ST_TO_ADDR
// if not building or not x or not y then
71012: LD_VAR 0 2
71016: NOT
71017: PUSH
71018: LD_VAR 0 4
71022: NOT
71023: OR
71024: PUSH
71025: LD_VAR 0 5
71029: NOT
71030: OR
71031: IFFALSE 71035
// exit ;
71033: GO 71127
// if GetTaskList ( unit ) then
71035: LD_VAR 0 1
71039: PPUSH
71040: CALL_OW 437
71044: IFFALSE 71127
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71046: LD_STRING e
71048: PUSH
71049: LD_VAR 0 1
71053: PPUSH
71054: CALL_OW 437
71058: PUSH
71059: LD_INT 1
71061: ARRAY
71062: PUSH
71063: LD_INT 1
71065: ARRAY
71066: EQUAL
71067: PUSH
71068: LD_VAR 0 4
71072: PUSH
71073: LD_VAR 0 1
71077: PPUSH
71078: CALL_OW 437
71082: PUSH
71083: LD_INT 1
71085: ARRAY
71086: PUSH
71087: LD_INT 2
71089: ARRAY
71090: EQUAL
71091: AND
71092: PUSH
71093: LD_VAR 0 5
71097: PUSH
71098: LD_VAR 0 1
71102: PPUSH
71103: CALL_OW 437
71107: PUSH
71108: LD_INT 1
71110: ARRAY
71111: PUSH
71112: LD_INT 3
71114: ARRAY
71115: EQUAL
71116: AND
71117: IFFALSE 71127
// result := true end ;
71119: LD_ADDR_VAR 0 3
71123: PUSH
71124: LD_INT 1
71126: ST_TO_ADDR
// end ;
71127: LD_VAR 0 3
71131: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71132: LD_INT 0
71134: PPUSH
// result := false ;
71135: LD_ADDR_VAR 0 4
71139: PUSH
71140: LD_INT 0
71142: ST_TO_ADDR
// if GetTaskList ( unit ) then
71143: LD_VAR 0 1
71147: PPUSH
71148: CALL_OW 437
71152: IFFALSE 71235
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71154: LD_STRING M
71156: PUSH
71157: LD_VAR 0 1
71161: PPUSH
71162: CALL_OW 437
71166: PUSH
71167: LD_INT 1
71169: ARRAY
71170: PUSH
71171: LD_INT 1
71173: ARRAY
71174: EQUAL
71175: PUSH
71176: LD_VAR 0 2
71180: PUSH
71181: LD_VAR 0 1
71185: PPUSH
71186: CALL_OW 437
71190: PUSH
71191: LD_INT 1
71193: ARRAY
71194: PUSH
71195: LD_INT 2
71197: ARRAY
71198: EQUAL
71199: AND
71200: PUSH
71201: LD_VAR 0 3
71205: PUSH
71206: LD_VAR 0 1
71210: PPUSH
71211: CALL_OW 437
71215: PUSH
71216: LD_INT 1
71218: ARRAY
71219: PUSH
71220: LD_INT 3
71222: ARRAY
71223: EQUAL
71224: AND
71225: IFFALSE 71235
// result := true ;
71227: LD_ADDR_VAR 0 4
71231: PUSH
71232: LD_INT 1
71234: ST_TO_ADDR
// end ; end ;
71235: LD_VAR 0 4
71239: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71240: LD_INT 0
71242: PPUSH
71243: PPUSH
71244: PPUSH
71245: PPUSH
// if not unit or not area then
71246: LD_VAR 0 1
71250: NOT
71251: PUSH
71252: LD_VAR 0 2
71256: NOT
71257: OR
71258: IFFALSE 71262
// exit ;
71260: GO 71426
// tmp := AreaToList ( area , i ) ;
71262: LD_ADDR_VAR 0 6
71266: PUSH
71267: LD_VAR 0 2
71271: PPUSH
71272: LD_VAR 0 5
71276: PPUSH
71277: CALL_OW 517
71281: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71282: LD_ADDR_VAR 0 5
71286: PUSH
71287: DOUBLE
71288: LD_INT 1
71290: DEC
71291: ST_TO_ADDR
71292: LD_VAR 0 6
71296: PUSH
71297: LD_INT 1
71299: ARRAY
71300: PUSH
71301: FOR_TO
71302: IFFALSE 71424
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71304: LD_ADDR_VAR 0 7
71308: PUSH
71309: LD_VAR 0 6
71313: PUSH
71314: LD_INT 1
71316: ARRAY
71317: PUSH
71318: LD_VAR 0 5
71322: ARRAY
71323: PUSH
71324: LD_VAR 0 6
71328: PUSH
71329: LD_INT 2
71331: ARRAY
71332: PUSH
71333: LD_VAR 0 5
71337: ARRAY
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71343: LD_VAR 0 7
71347: PUSH
71348: LD_INT 1
71350: ARRAY
71351: PPUSH
71352: LD_VAR 0 7
71356: PUSH
71357: LD_INT 2
71359: ARRAY
71360: PPUSH
71361: CALL_OW 428
71365: PUSH
71366: LD_INT 0
71368: EQUAL
71369: IFFALSE 71422
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71371: LD_VAR 0 1
71375: PPUSH
71376: LD_VAR 0 7
71380: PUSH
71381: LD_INT 1
71383: ARRAY
71384: PPUSH
71385: LD_VAR 0 7
71389: PUSH
71390: LD_INT 2
71392: ARRAY
71393: PPUSH
71394: LD_VAR 0 3
71398: PPUSH
71399: CALL_OW 48
// result := IsPlaced ( unit ) ;
71403: LD_ADDR_VAR 0 4
71407: PUSH
71408: LD_VAR 0 1
71412: PPUSH
71413: CALL_OW 305
71417: ST_TO_ADDR
// exit ;
71418: POP
71419: POP
71420: GO 71426
// end ; end ;
71422: GO 71301
71424: POP
71425: POP
// end ;
71426: LD_VAR 0 4
71430: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71431: LD_INT 0
71433: PPUSH
71434: PPUSH
71435: PPUSH
// if not side or side > 8 then
71436: LD_VAR 0 1
71440: NOT
71441: PUSH
71442: LD_VAR 0 1
71446: PUSH
71447: LD_INT 8
71449: GREATER
71450: OR
71451: IFFALSE 71455
// exit ;
71453: GO 71642
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71455: LD_ADDR_VAR 0 4
71459: PUSH
71460: LD_INT 22
71462: PUSH
71463: LD_VAR 0 1
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: PUSH
71472: LD_INT 21
71474: PUSH
71475: LD_INT 3
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PPUSH
71486: CALL_OW 69
71490: ST_TO_ADDR
// if not tmp then
71491: LD_VAR 0 4
71495: NOT
71496: IFFALSE 71500
// exit ;
71498: GO 71642
// enable_addtolog := true ;
71500: LD_ADDR_OWVAR 81
71504: PUSH
71505: LD_INT 1
71507: ST_TO_ADDR
// AddToLog ( [ ) ;
71508: LD_STRING [
71510: PPUSH
71511: CALL_OW 561
// for i in tmp do
71515: LD_ADDR_VAR 0 3
71519: PUSH
71520: LD_VAR 0 4
71524: PUSH
71525: FOR_IN
71526: IFFALSE 71633
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71528: LD_STRING [
71530: PUSH
71531: LD_VAR 0 3
71535: PPUSH
71536: CALL_OW 266
71540: STR
71541: PUSH
71542: LD_STRING , 
71544: STR
71545: PUSH
71546: LD_VAR 0 3
71550: PPUSH
71551: CALL_OW 250
71555: STR
71556: PUSH
71557: LD_STRING , 
71559: STR
71560: PUSH
71561: LD_VAR 0 3
71565: PPUSH
71566: CALL_OW 251
71570: STR
71571: PUSH
71572: LD_STRING , 
71574: STR
71575: PUSH
71576: LD_VAR 0 3
71580: PPUSH
71581: CALL_OW 254
71585: STR
71586: PUSH
71587: LD_STRING , 
71589: STR
71590: PUSH
71591: LD_VAR 0 3
71595: PPUSH
71596: LD_INT 1
71598: PPUSH
71599: CALL_OW 268
71603: STR
71604: PUSH
71605: LD_STRING , 
71607: STR
71608: PUSH
71609: LD_VAR 0 3
71613: PPUSH
71614: LD_INT 2
71616: PPUSH
71617: CALL_OW 268
71621: STR
71622: PUSH
71623: LD_STRING ],
71625: STR
71626: PPUSH
71627: CALL_OW 561
// end ;
71631: GO 71525
71633: POP
71634: POP
// AddToLog ( ]; ) ;
71635: LD_STRING ];
71637: PPUSH
71638: CALL_OW 561
// end ;
71642: LD_VAR 0 2
71646: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71647: LD_INT 0
71649: PPUSH
71650: PPUSH
71651: PPUSH
71652: PPUSH
71653: PPUSH
// if not area or not rate or not max then
71654: LD_VAR 0 1
71658: NOT
71659: PUSH
71660: LD_VAR 0 2
71664: NOT
71665: OR
71666: PUSH
71667: LD_VAR 0 4
71671: NOT
71672: OR
71673: IFFALSE 71677
// exit ;
71675: GO 71866
// while 1 do
71677: LD_INT 1
71679: IFFALSE 71866
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71681: LD_ADDR_VAR 0 9
71685: PUSH
71686: LD_VAR 0 1
71690: PPUSH
71691: LD_INT 1
71693: PPUSH
71694: CALL_OW 287
71698: PUSH
71699: LD_INT 10
71701: MUL
71702: ST_TO_ADDR
// r := rate / 10 ;
71703: LD_ADDR_VAR 0 7
71707: PUSH
71708: LD_VAR 0 2
71712: PUSH
71713: LD_INT 10
71715: DIVREAL
71716: ST_TO_ADDR
// time := 1 1$00 ;
71717: LD_ADDR_VAR 0 8
71721: PUSH
71722: LD_INT 2100
71724: ST_TO_ADDR
// if amount < min then
71725: LD_VAR 0 9
71729: PUSH
71730: LD_VAR 0 3
71734: LESS
71735: IFFALSE 71753
// r := r * 2 else
71737: LD_ADDR_VAR 0 7
71741: PUSH
71742: LD_VAR 0 7
71746: PUSH
71747: LD_INT 2
71749: MUL
71750: ST_TO_ADDR
71751: GO 71779
// if amount > max then
71753: LD_VAR 0 9
71757: PUSH
71758: LD_VAR 0 4
71762: GREATER
71763: IFFALSE 71779
// r := r / 2 ;
71765: LD_ADDR_VAR 0 7
71769: PUSH
71770: LD_VAR 0 7
71774: PUSH
71775: LD_INT 2
71777: DIVREAL
71778: ST_TO_ADDR
// time := time / r ;
71779: LD_ADDR_VAR 0 8
71783: PUSH
71784: LD_VAR 0 8
71788: PUSH
71789: LD_VAR 0 7
71793: DIVREAL
71794: ST_TO_ADDR
// if time < 0 then
71795: LD_VAR 0 8
71799: PUSH
71800: LD_INT 0
71802: LESS
71803: IFFALSE 71820
// time := time * - 1 ;
71805: LD_ADDR_VAR 0 8
71809: PUSH
71810: LD_VAR 0 8
71814: PUSH
71815: LD_INT 1
71817: NEG
71818: MUL
71819: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71820: LD_VAR 0 8
71824: PUSH
71825: LD_INT 35
71827: PPUSH
71828: LD_INT 875
71830: PPUSH
71831: CALL_OW 12
71835: PLUS
71836: PPUSH
71837: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71841: LD_INT 1
71843: PPUSH
71844: LD_INT 5
71846: PPUSH
71847: CALL_OW 12
71851: PPUSH
71852: LD_VAR 0 1
71856: PPUSH
71857: LD_INT 1
71859: PPUSH
71860: CALL_OW 55
// end ;
71864: GO 71677
// end ;
71866: LD_VAR 0 5
71870: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71871: LD_INT 0
71873: PPUSH
71874: PPUSH
71875: PPUSH
71876: PPUSH
71877: PPUSH
71878: PPUSH
71879: PPUSH
71880: PPUSH
// if not turrets or not factories then
71881: LD_VAR 0 1
71885: NOT
71886: PUSH
71887: LD_VAR 0 2
71891: NOT
71892: OR
71893: IFFALSE 71897
// exit ;
71895: GO 72204
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71897: LD_ADDR_VAR 0 10
71901: PUSH
71902: LD_INT 5
71904: PUSH
71905: LD_INT 6
71907: PUSH
71908: EMPTY
71909: LIST
71910: LIST
71911: PUSH
71912: LD_INT 2
71914: PUSH
71915: LD_INT 4
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: PUSH
71922: LD_INT 3
71924: PUSH
71925: LD_INT 5
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 24
71939: PUSH
71940: LD_INT 25
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: PUSH
71947: LD_INT 23
71949: PUSH
71950: LD_INT 27
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: EMPTY
71958: LIST
71959: LIST
71960: PUSH
71961: LD_INT 42
71963: PUSH
71964: LD_INT 43
71966: PUSH
71967: EMPTY
71968: LIST
71969: LIST
71970: PUSH
71971: LD_INT 44
71973: PUSH
71974: LD_INT 46
71976: PUSH
71977: EMPTY
71978: LIST
71979: LIST
71980: PUSH
71981: LD_INT 45
71983: PUSH
71984: LD_INT 47
71986: PUSH
71987: EMPTY
71988: LIST
71989: LIST
71990: PUSH
71991: EMPTY
71992: LIST
71993: LIST
71994: LIST
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: LIST
72000: ST_TO_ADDR
// result := [ ] ;
72001: LD_ADDR_VAR 0 3
72005: PUSH
72006: EMPTY
72007: ST_TO_ADDR
// for i in turrets do
72008: LD_ADDR_VAR 0 4
72012: PUSH
72013: LD_VAR 0 1
72017: PUSH
72018: FOR_IN
72019: IFFALSE 72202
// begin nat := GetNation ( i ) ;
72021: LD_ADDR_VAR 0 7
72025: PUSH
72026: LD_VAR 0 4
72030: PPUSH
72031: CALL_OW 248
72035: ST_TO_ADDR
// weapon := 0 ;
72036: LD_ADDR_VAR 0 8
72040: PUSH
72041: LD_INT 0
72043: ST_TO_ADDR
// if not nat then
72044: LD_VAR 0 7
72048: NOT
72049: IFFALSE 72053
// continue ;
72051: GO 72018
// for j in list [ nat ] do
72053: LD_ADDR_VAR 0 5
72057: PUSH
72058: LD_VAR 0 10
72062: PUSH
72063: LD_VAR 0 7
72067: ARRAY
72068: PUSH
72069: FOR_IN
72070: IFFALSE 72111
// if GetBWeapon ( i ) = j [ 1 ] then
72072: LD_VAR 0 4
72076: PPUSH
72077: CALL_OW 269
72081: PUSH
72082: LD_VAR 0 5
72086: PUSH
72087: LD_INT 1
72089: ARRAY
72090: EQUAL
72091: IFFALSE 72109
// begin weapon := j [ 2 ] ;
72093: LD_ADDR_VAR 0 8
72097: PUSH
72098: LD_VAR 0 5
72102: PUSH
72103: LD_INT 2
72105: ARRAY
72106: ST_TO_ADDR
// break ;
72107: GO 72111
// end ;
72109: GO 72069
72111: POP
72112: POP
// if not weapon then
72113: LD_VAR 0 8
72117: NOT
72118: IFFALSE 72122
// continue ;
72120: GO 72018
// for k in factories do
72122: LD_ADDR_VAR 0 6
72126: PUSH
72127: LD_VAR 0 2
72131: PUSH
72132: FOR_IN
72133: IFFALSE 72198
// begin weapons := AvailableWeaponList ( k ) ;
72135: LD_ADDR_VAR 0 9
72139: PUSH
72140: LD_VAR 0 6
72144: PPUSH
72145: CALL_OW 478
72149: ST_TO_ADDR
// if not weapons then
72150: LD_VAR 0 9
72154: NOT
72155: IFFALSE 72159
// continue ;
72157: GO 72132
// if weapon in weapons then
72159: LD_VAR 0 8
72163: PUSH
72164: LD_VAR 0 9
72168: IN
72169: IFFALSE 72196
// begin result := [ i , weapon ] ;
72171: LD_ADDR_VAR 0 3
72175: PUSH
72176: LD_VAR 0 4
72180: PUSH
72181: LD_VAR 0 8
72185: PUSH
72186: EMPTY
72187: LIST
72188: LIST
72189: ST_TO_ADDR
// exit ;
72190: POP
72191: POP
72192: POP
72193: POP
72194: GO 72204
// end ; end ;
72196: GO 72132
72198: POP
72199: POP
// end ;
72200: GO 72018
72202: POP
72203: POP
// end ;
72204: LD_VAR 0 3
72208: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72209: LD_INT 0
72211: PPUSH
// if not side or side > 8 then
72212: LD_VAR 0 3
72216: NOT
72217: PUSH
72218: LD_VAR 0 3
72222: PUSH
72223: LD_INT 8
72225: GREATER
72226: OR
72227: IFFALSE 72231
// exit ;
72229: GO 72290
// if not range then
72231: LD_VAR 0 4
72235: NOT
72236: IFFALSE 72247
// range := - 12 ;
72238: LD_ADDR_VAR 0 4
72242: PUSH
72243: LD_INT 12
72245: NEG
72246: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72247: LD_VAR 0 1
72251: PPUSH
72252: LD_VAR 0 2
72256: PPUSH
72257: LD_VAR 0 3
72261: PPUSH
72262: LD_VAR 0 4
72266: PPUSH
72267: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72271: LD_VAR 0 1
72275: PPUSH
72276: LD_VAR 0 2
72280: PPUSH
72281: LD_VAR 0 3
72285: PPUSH
72286: CALL_OW 331
// end ;
72290: LD_VAR 0 5
72294: RET
// export function Video ( mode ) ; begin
72295: LD_INT 0
72297: PPUSH
// ingame_video = mode ;
72298: LD_ADDR_OWVAR 52
72302: PUSH
72303: LD_VAR 0 1
72307: ST_TO_ADDR
// interface_hidden = mode ;
72308: LD_ADDR_OWVAR 54
72312: PUSH
72313: LD_VAR 0 1
72317: ST_TO_ADDR
// end ;
72318: LD_VAR 0 2
72322: RET
// export function Join ( array , element ) ; begin
72323: LD_INT 0
72325: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72326: LD_ADDR_VAR 0 3
72330: PUSH
72331: LD_VAR 0 1
72335: PPUSH
72336: LD_VAR 0 1
72340: PUSH
72341: LD_INT 1
72343: PLUS
72344: PPUSH
72345: LD_VAR 0 2
72349: PPUSH
72350: CALL_OW 1
72354: ST_TO_ADDR
// end ;
72355: LD_VAR 0 3
72359: RET
// export function JoinUnion ( array , element ) ; begin
72360: LD_INT 0
72362: PPUSH
// result := array union element ;
72363: LD_ADDR_VAR 0 3
72367: PUSH
72368: LD_VAR 0 1
72372: PUSH
72373: LD_VAR 0 2
72377: UNION
72378: ST_TO_ADDR
// end ;
72379: LD_VAR 0 3
72383: RET
// export function GetBehemoths ( side ) ; begin
72384: LD_INT 0
72386: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
72387: LD_ADDR_VAR 0 2
72391: PUSH
72392: LD_INT 22
72394: PUSH
72395: LD_VAR 0 1
72399: PUSH
72400: EMPTY
72401: LIST
72402: LIST
72403: PUSH
72404: LD_INT 31
72406: PUSH
72407: LD_INT 25
72409: PUSH
72410: EMPTY
72411: LIST
72412: LIST
72413: PUSH
72414: EMPTY
72415: LIST
72416: LIST
72417: PPUSH
72418: CALL_OW 69
72422: ST_TO_ADDR
// end ;
72423: LD_VAR 0 2
72427: RET
// export function Shuffle ( array ) ; var i , index ; begin
72428: LD_INT 0
72430: PPUSH
72431: PPUSH
72432: PPUSH
// result := [ ] ;
72433: LD_ADDR_VAR 0 2
72437: PUSH
72438: EMPTY
72439: ST_TO_ADDR
// if not array then
72440: LD_VAR 0 1
72444: NOT
72445: IFFALSE 72449
// exit ;
72447: GO 72548
// Randomize ;
72449: CALL_OW 10
// for i = array downto 1 do
72453: LD_ADDR_VAR 0 3
72457: PUSH
72458: DOUBLE
72459: LD_VAR 0 1
72463: INC
72464: ST_TO_ADDR
72465: LD_INT 1
72467: PUSH
72468: FOR_DOWNTO
72469: IFFALSE 72546
// begin index := rand ( 1 , array ) ;
72471: LD_ADDR_VAR 0 4
72475: PUSH
72476: LD_INT 1
72478: PPUSH
72479: LD_VAR 0 1
72483: PPUSH
72484: CALL_OW 12
72488: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72489: LD_ADDR_VAR 0 2
72493: PUSH
72494: LD_VAR 0 2
72498: PPUSH
72499: LD_VAR 0 2
72503: PUSH
72504: LD_INT 1
72506: PLUS
72507: PPUSH
72508: LD_VAR 0 1
72512: PUSH
72513: LD_VAR 0 4
72517: ARRAY
72518: PPUSH
72519: CALL_OW 2
72523: ST_TO_ADDR
// array := Delete ( array , index ) ;
72524: LD_ADDR_VAR 0 1
72528: PUSH
72529: LD_VAR 0 1
72533: PPUSH
72534: LD_VAR 0 4
72538: PPUSH
72539: CALL_OW 3
72543: ST_TO_ADDR
// end ;
72544: GO 72468
72546: POP
72547: POP
// end ;
72548: LD_VAR 0 2
72552: RET
// export function GetBaseMaterials ( base ) ; begin
72553: LD_INT 0
72555: PPUSH
// result := [ 0 , 0 , 0 ] ;
72556: LD_ADDR_VAR 0 2
72560: PUSH
72561: LD_INT 0
72563: PUSH
72564: LD_INT 0
72566: PUSH
72567: LD_INT 0
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: LIST
72574: ST_TO_ADDR
// if not base then
72575: LD_VAR 0 1
72579: NOT
72580: IFFALSE 72584
// exit ;
72582: GO 72633
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72584: LD_ADDR_VAR 0 2
72588: PUSH
72589: LD_VAR 0 1
72593: PPUSH
72594: LD_INT 1
72596: PPUSH
72597: CALL_OW 275
72601: PUSH
72602: LD_VAR 0 1
72606: PPUSH
72607: LD_INT 2
72609: PPUSH
72610: CALL_OW 275
72614: PUSH
72615: LD_VAR 0 1
72619: PPUSH
72620: LD_INT 3
72622: PPUSH
72623: CALL_OW 275
72627: PUSH
72628: EMPTY
72629: LIST
72630: LIST
72631: LIST
72632: ST_TO_ADDR
// end ;
72633: LD_VAR 0 2
72637: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72638: LD_INT 0
72640: PPUSH
72641: PPUSH
// result := array ;
72642: LD_ADDR_VAR 0 3
72646: PUSH
72647: LD_VAR 0 1
72651: ST_TO_ADDR
// if size >= result then
72652: LD_VAR 0 2
72656: PUSH
72657: LD_VAR 0 3
72661: GREATEREQUAL
72662: IFFALSE 72666
// exit ;
72664: GO 72716
// if size then
72666: LD_VAR 0 2
72670: IFFALSE 72716
// for i := array downto size do
72672: LD_ADDR_VAR 0 4
72676: PUSH
72677: DOUBLE
72678: LD_VAR 0 1
72682: INC
72683: ST_TO_ADDR
72684: LD_VAR 0 2
72688: PUSH
72689: FOR_DOWNTO
72690: IFFALSE 72714
// result := Delete ( result , result ) ;
72692: LD_ADDR_VAR 0 3
72696: PUSH
72697: LD_VAR 0 3
72701: PPUSH
72702: LD_VAR 0 3
72706: PPUSH
72707: CALL_OW 3
72711: ST_TO_ADDR
72712: GO 72689
72714: POP
72715: POP
// end ;
72716: LD_VAR 0 3
72720: RET
// export function ComExit ( unit ) ; var tmp ; begin
72721: LD_INT 0
72723: PPUSH
72724: PPUSH
// if not IsInUnit ( unit ) then
72725: LD_VAR 0 1
72729: PPUSH
72730: CALL_OW 310
72734: NOT
72735: IFFALSE 72739
// exit ;
72737: GO 72799
// tmp := IsInUnit ( unit ) ;
72739: LD_ADDR_VAR 0 3
72743: PUSH
72744: LD_VAR 0 1
72748: PPUSH
72749: CALL_OW 310
72753: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72754: LD_VAR 0 3
72758: PPUSH
72759: CALL_OW 247
72763: PUSH
72764: LD_INT 2
72766: EQUAL
72767: IFFALSE 72780
// ComExitVehicle ( unit ) else
72769: LD_VAR 0 1
72773: PPUSH
72774: CALL_OW 121
72778: GO 72789
// ComExitBuilding ( unit ) ;
72780: LD_VAR 0 1
72784: PPUSH
72785: CALL_OW 122
// result := tmp ;
72789: LD_ADDR_VAR 0 2
72793: PUSH
72794: LD_VAR 0 3
72798: ST_TO_ADDR
// end ;
72799: LD_VAR 0 2
72803: RET
// export function ComExitAll ( units ) ; var i ; begin
72804: LD_INT 0
72806: PPUSH
72807: PPUSH
// if not units then
72808: LD_VAR 0 1
72812: NOT
72813: IFFALSE 72817
// exit ;
72815: GO 72843
// for i in units do
72817: LD_ADDR_VAR 0 3
72821: PUSH
72822: LD_VAR 0 1
72826: PUSH
72827: FOR_IN
72828: IFFALSE 72841
// ComExit ( i ) ;
72830: LD_VAR 0 3
72834: PPUSH
72835: CALL 72721 0 1
72839: GO 72827
72841: POP
72842: POP
// end ;
72843: LD_VAR 0 2
72847: RET
// export function ResetHc ; begin
72848: LD_INT 0
72850: PPUSH
// InitHc ;
72851: CALL_OW 19
// hc_importance := 0 ;
72855: LD_ADDR_OWVAR 32
72859: PUSH
72860: LD_INT 0
72862: ST_TO_ADDR
// end ;
72863: LD_VAR 0 1
72867: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72868: LD_INT 0
72870: PPUSH
72871: PPUSH
72872: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72873: LD_ADDR_VAR 0 6
72877: PUSH
72878: LD_VAR 0 1
72882: PUSH
72883: LD_VAR 0 3
72887: PLUS
72888: PUSH
72889: LD_INT 2
72891: DIV
72892: ST_TO_ADDR
// if _x < 0 then
72893: LD_VAR 0 6
72897: PUSH
72898: LD_INT 0
72900: LESS
72901: IFFALSE 72918
// _x := _x * - 1 ;
72903: LD_ADDR_VAR 0 6
72907: PUSH
72908: LD_VAR 0 6
72912: PUSH
72913: LD_INT 1
72915: NEG
72916: MUL
72917: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72918: LD_ADDR_VAR 0 7
72922: PUSH
72923: LD_VAR 0 2
72927: PUSH
72928: LD_VAR 0 4
72932: PLUS
72933: PUSH
72934: LD_INT 2
72936: DIV
72937: ST_TO_ADDR
// if _y < 0 then
72938: LD_VAR 0 7
72942: PUSH
72943: LD_INT 0
72945: LESS
72946: IFFALSE 72963
// _y := _y * - 1 ;
72948: LD_ADDR_VAR 0 7
72952: PUSH
72953: LD_VAR 0 7
72957: PUSH
72958: LD_INT 1
72960: NEG
72961: MUL
72962: ST_TO_ADDR
// result := [ _x , _y ] ;
72963: LD_ADDR_VAR 0 5
72967: PUSH
72968: LD_VAR 0 6
72972: PUSH
72973: LD_VAR 0 7
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: ST_TO_ADDR
// end ;
72982: LD_VAR 0 5
72986: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72987: LD_INT 0
72989: PPUSH
72990: PPUSH
72991: PPUSH
72992: PPUSH
// task := GetTaskList ( unit ) ;
72993: LD_ADDR_VAR 0 7
72997: PUSH
72998: LD_VAR 0 1
73002: PPUSH
73003: CALL_OW 437
73007: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73008: LD_VAR 0 7
73012: NOT
73013: PUSH
73014: LD_VAR 0 1
73018: PPUSH
73019: LD_VAR 0 2
73023: PPUSH
73024: CALL_OW 308
73028: NOT
73029: AND
73030: IFFALSE 73034
// exit ;
73032: GO 73152
// if IsInArea ( unit , area ) then
73034: LD_VAR 0 1
73038: PPUSH
73039: LD_VAR 0 2
73043: PPUSH
73044: CALL_OW 308
73048: IFFALSE 73066
// begin ComMoveToArea ( unit , goAway ) ;
73050: LD_VAR 0 1
73054: PPUSH
73055: LD_VAR 0 3
73059: PPUSH
73060: CALL_OW 113
// exit ;
73064: GO 73152
// end ; if task [ 1 ] [ 1 ] <> M then
73066: LD_VAR 0 7
73070: PUSH
73071: LD_INT 1
73073: ARRAY
73074: PUSH
73075: LD_INT 1
73077: ARRAY
73078: PUSH
73079: LD_STRING M
73081: NONEQUAL
73082: IFFALSE 73086
// exit ;
73084: GO 73152
// x := task [ 1 ] [ 2 ] ;
73086: LD_ADDR_VAR 0 5
73090: PUSH
73091: LD_VAR 0 7
73095: PUSH
73096: LD_INT 1
73098: ARRAY
73099: PUSH
73100: LD_INT 2
73102: ARRAY
73103: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73104: LD_ADDR_VAR 0 6
73108: PUSH
73109: LD_VAR 0 7
73113: PUSH
73114: LD_INT 1
73116: ARRAY
73117: PUSH
73118: LD_INT 3
73120: ARRAY
73121: ST_TO_ADDR
// if InArea ( x , y , area ) then
73122: LD_VAR 0 5
73126: PPUSH
73127: LD_VAR 0 6
73131: PPUSH
73132: LD_VAR 0 2
73136: PPUSH
73137: CALL_OW 309
73141: IFFALSE 73152
// ComStop ( unit ) ;
73143: LD_VAR 0 1
73147: PPUSH
73148: CALL_OW 141
// end ;
73152: LD_VAR 0 4
73156: RET
// export function Abs ( value ) ; begin
73157: LD_INT 0
73159: PPUSH
// result := value ;
73160: LD_ADDR_VAR 0 2
73164: PUSH
73165: LD_VAR 0 1
73169: ST_TO_ADDR
// if value < 0 then
73170: LD_VAR 0 1
73174: PUSH
73175: LD_INT 0
73177: LESS
73178: IFFALSE 73195
// result := value * - 1 ;
73180: LD_ADDR_VAR 0 2
73184: PUSH
73185: LD_VAR 0 1
73189: PUSH
73190: LD_INT 1
73192: NEG
73193: MUL
73194: ST_TO_ADDR
// end ;
73195: LD_VAR 0 2
73199: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73200: LD_INT 0
73202: PPUSH
73203: PPUSH
73204: PPUSH
73205: PPUSH
73206: PPUSH
73207: PPUSH
73208: PPUSH
73209: PPUSH
// if not unit or not building then
73210: LD_VAR 0 1
73214: NOT
73215: PUSH
73216: LD_VAR 0 2
73220: NOT
73221: OR
73222: IFFALSE 73226
// exit ;
73224: GO 73452
// x := GetX ( building ) ;
73226: LD_ADDR_VAR 0 4
73230: PUSH
73231: LD_VAR 0 2
73235: PPUSH
73236: CALL_OW 250
73240: ST_TO_ADDR
// y := GetY ( building ) ;
73241: LD_ADDR_VAR 0 6
73245: PUSH
73246: LD_VAR 0 2
73250: PPUSH
73251: CALL_OW 251
73255: ST_TO_ADDR
// d := GetDir ( building ) ;
73256: LD_ADDR_VAR 0 8
73260: PUSH
73261: LD_VAR 0 2
73265: PPUSH
73266: CALL_OW 254
73270: ST_TO_ADDR
// r := 4 ;
73271: LD_ADDR_VAR 0 9
73275: PUSH
73276: LD_INT 4
73278: ST_TO_ADDR
// for i := 1 to 5 do
73279: LD_ADDR_VAR 0 10
73283: PUSH
73284: DOUBLE
73285: LD_INT 1
73287: DEC
73288: ST_TO_ADDR
73289: LD_INT 5
73291: PUSH
73292: FOR_TO
73293: IFFALSE 73450
// begin _x := ShiftX ( x , d , r + i ) ;
73295: LD_ADDR_VAR 0 5
73299: PUSH
73300: LD_VAR 0 4
73304: PPUSH
73305: LD_VAR 0 8
73309: PPUSH
73310: LD_VAR 0 9
73314: PUSH
73315: LD_VAR 0 10
73319: PLUS
73320: PPUSH
73321: CALL_OW 272
73325: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73326: LD_ADDR_VAR 0 7
73330: PUSH
73331: LD_VAR 0 6
73335: PPUSH
73336: LD_VAR 0 8
73340: PPUSH
73341: LD_VAR 0 9
73345: PUSH
73346: LD_VAR 0 10
73350: PLUS
73351: PPUSH
73352: CALL_OW 273
73356: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73357: LD_VAR 0 5
73361: PPUSH
73362: LD_VAR 0 7
73366: PPUSH
73367: CALL_OW 488
73371: PUSH
73372: LD_VAR 0 5
73376: PPUSH
73377: LD_VAR 0 7
73381: PPUSH
73382: CALL_OW 428
73386: PPUSH
73387: CALL_OW 247
73391: PUSH
73392: LD_INT 3
73394: PUSH
73395: LD_INT 2
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: IN
73402: NOT
73403: AND
73404: IFFALSE 73448
// begin ComMoveXY ( unit , _x , _y ) ;
73406: LD_VAR 0 1
73410: PPUSH
73411: LD_VAR 0 5
73415: PPUSH
73416: LD_VAR 0 7
73420: PPUSH
73421: CALL_OW 111
// result := [ _x , _y ] ;
73425: LD_ADDR_VAR 0 3
73429: PUSH
73430: LD_VAR 0 5
73434: PUSH
73435: LD_VAR 0 7
73439: PUSH
73440: EMPTY
73441: LIST
73442: LIST
73443: ST_TO_ADDR
// exit ;
73444: POP
73445: POP
73446: GO 73452
// end ; end ;
73448: GO 73292
73450: POP
73451: POP
// end ;
73452: LD_VAR 0 3
73456: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73457: LD_INT 0
73459: PPUSH
73460: PPUSH
73461: PPUSH
// result := 0 ;
73462: LD_ADDR_VAR 0 3
73466: PUSH
73467: LD_INT 0
73469: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73470: LD_VAR 0 1
73474: PUSH
73475: LD_INT 0
73477: LESS
73478: PUSH
73479: LD_VAR 0 1
73483: PUSH
73484: LD_INT 8
73486: GREATER
73487: OR
73488: PUSH
73489: LD_VAR 0 2
73493: PUSH
73494: LD_INT 0
73496: LESS
73497: OR
73498: PUSH
73499: LD_VAR 0 2
73503: PUSH
73504: LD_INT 8
73506: GREATER
73507: OR
73508: IFFALSE 73512
// exit ;
73510: GO 73587
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73512: LD_ADDR_VAR 0 4
73516: PUSH
73517: LD_INT 22
73519: PUSH
73520: LD_VAR 0 2
73524: PUSH
73525: EMPTY
73526: LIST
73527: LIST
73528: PPUSH
73529: CALL_OW 69
73533: PUSH
73534: FOR_IN
73535: IFFALSE 73585
// begin un := UnitShoot ( i ) ;
73537: LD_ADDR_VAR 0 5
73541: PUSH
73542: LD_VAR 0 4
73546: PPUSH
73547: CALL_OW 504
73551: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73552: LD_VAR 0 5
73556: PPUSH
73557: CALL_OW 255
73561: PUSH
73562: LD_VAR 0 1
73566: EQUAL
73567: IFFALSE 73583
// begin result := un ;
73569: LD_ADDR_VAR 0 3
73573: PUSH
73574: LD_VAR 0 5
73578: ST_TO_ADDR
// exit ;
73579: POP
73580: POP
73581: GO 73587
// end ; end ;
73583: GO 73534
73585: POP
73586: POP
// end ;
73587: LD_VAR 0 3
73591: RET
// export function GetCargoBay ( units ) ; begin
73592: LD_INT 0
73594: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73595: LD_ADDR_VAR 0 2
73599: PUSH
73600: LD_VAR 0 1
73604: PPUSH
73605: LD_INT 2
73607: PUSH
73608: LD_INT 34
73610: PUSH
73611: LD_INT 12
73613: PUSH
73614: EMPTY
73615: LIST
73616: LIST
73617: PUSH
73618: LD_INT 34
73620: PUSH
73621: LD_INT 51
73623: PUSH
73624: EMPTY
73625: LIST
73626: LIST
73627: PUSH
73628: LD_INT 34
73630: PUSH
73631: LD_INT 32
73633: PUSH
73634: EMPTY
73635: LIST
73636: LIST
73637: PUSH
73638: LD_INT 34
73640: PUSH
73641: LD_INT 89
73643: PUSH
73644: EMPTY
73645: LIST
73646: LIST
73647: PUSH
73648: EMPTY
73649: LIST
73650: LIST
73651: LIST
73652: LIST
73653: LIST
73654: PPUSH
73655: CALL_OW 72
73659: ST_TO_ADDR
// end ;
73660: LD_VAR 0 2
73664: RET
// export function Negate ( value ) ; begin
73665: LD_INT 0
73667: PPUSH
// result := not value ;
73668: LD_ADDR_VAR 0 2
73672: PUSH
73673: LD_VAR 0 1
73677: NOT
73678: ST_TO_ADDR
// end ;
73679: LD_VAR 0 2
73683: RET
// export function Inc ( value ) ; begin
73684: LD_INT 0
73686: PPUSH
// result := value + 1 ;
73687: LD_ADDR_VAR 0 2
73691: PUSH
73692: LD_VAR 0 1
73696: PUSH
73697: LD_INT 1
73699: PLUS
73700: ST_TO_ADDR
// end ;
73701: LD_VAR 0 2
73705: RET
// export function Dec ( value ) ; begin
73706: LD_INT 0
73708: PPUSH
// result := value - 1 ;
73709: LD_ADDR_VAR 0 2
73713: PUSH
73714: LD_VAR 0 1
73718: PUSH
73719: LD_INT 1
73721: MINUS
73722: ST_TO_ADDR
// end ;
73723: LD_VAR 0 2
73727: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73728: LD_INT 0
73730: PPUSH
73731: PPUSH
73732: PPUSH
73733: PPUSH
73734: PPUSH
73735: PPUSH
73736: PPUSH
73737: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73738: LD_VAR 0 1
73742: PPUSH
73743: LD_VAR 0 2
73747: PPUSH
73748: CALL_OW 488
73752: NOT
73753: PUSH
73754: LD_VAR 0 3
73758: PPUSH
73759: LD_VAR 0 4
73763: PPUSH
73764: CALL_OW 488
73768: NOT
73769: OR
73770: IFFALSE 73783
// begin result := - 1 ;
73772: LD_ADDR_VAR 0 5
73776: PUSH
73777: LD_INT 1
73779: NEG
73780: ST_TO_ADDR
// exit ;
73781: GO 74018
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73783: LD_ADDR_VAR 0 12
73787: PUSH
73788: LD_VAR 0 1
73792: PPUSH
73793: LD_VAR 0 2
73797: PPUSH
73798: LD_VAR 0 3
73802: PPUSH
73803: LD_VAR 0 4
73807: PPUSH
73808: CALL 72868 0 4
73812: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73813: LD_ADDR_VAR 0 11
73817: PUSH
73818: LD_VAR 0 1
73822: PPUSH
73823: LD_VAR 0 2
73827: PPUSH
73828: LD_VAR 0 12
73832: PUSH
73833: LD_INT 1
73835: ARRAY
73836: PPUSH
73837: LD_VAR 0 12
73841: PUSH
73842: LD_INT 2
73844: ARRAY
73845: PPUSH
73846: CALL_OW 298
73850: ST_TO_ADDR
// distance := 9999 ;
73851: LD_ADDR_VAR 0 10
73855: PUSH
73856: LD_INT 9999
73858: ST_TO_ADDR
// for i := 0 to 5 do
73859: LD_ADDR_VAR 0 6
73863: PUSH
73864: DOUBLE
73865: LD_INT 0
73867: DEC
73868: ST_TO_ADDR
73869: LD_INT 5
73871: PUSH
73872: FOR_TO
73873: IFFALSE 74016
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73875: LD_ADDR_VAR 0 7
73879: PUSH
73880: LD_VAR 0 1
73884: PPUSH
73885: LD_VAR 0 6
73889: PPUSH
73890: LD_VAR 0 11
73894: PPUSH
73895: CALL_OW 272
73899: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
73900: LD_ADDR_VAR 0 8
73904: PUSH
73905: LD_VAR 0 2
73909: PPUSH
73910: LD_VAR 0 6
73914: PPUSH
73915: LD_VAR 0 11
73919: PPUSH
73920: CALL_OW 273
73924: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73925: LD_VAR 0 7
73929: PPUSH
73930: LD_VAR 0 8
73934: PPUSH
73935: CALL_OW 488
73939: NOT
73940: IFFALSE 73944
// continue ;
73942: GO 73872
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73944: LD_ADDR_VAR 0 9
73948: PUSH
73949: LD_VAR 0 12
73953: PUSH
73954: LD_INT 1
73956: ARRAY
73957: PPUSH
73958: LD_VAR 0 12
73962: PUSH
73963: LD_INT 2
73965: ARRAY
73966: PPUSH
73967: LD_VAR 0 7
73971: PPUSH
73972: LD_VAR 0 8
73976: PPUSH
73977: CALL_OW 298
73981: ST_TO_ADDR
// if tmp < distance then
73982: LD_VAR 0 9
73986: PUSH
73987: LD_VAR 0 10
73991: LESS
73992: IFFALSE 74014
// begin result := i ;
73994: LD_ADDR_VAR 0 5
73998: PUSH
73999: LD_VAR 0 6
74003: ST_TO_ADDR
// distance := tmp ;
74004: LD_ADDR_VAR 0 10
74008: PUSH
74009: LD_VAR 0 9
74013: ST_TO_ADDR
// end ; end ;
74014: GO 73872
74016: POP
74017: POP
// end ;
74018: LD_VAR 0 5
74022: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74023: LD_INT 0
74025: PPUSH
74026: PPUSH
// if not driver or not IsInUnit ( driver ) then
74027: LD_VAR 0 1
74031: NOT
74032: PUSH
74033: LD_VAR 0 1
74037: PPUSH
74038: CALL_OW 310
74042: NOT
74043: OR
74044: IFFALSE 74048
// exit ;
74046: GO 74138
// vehicle := IsInUnit ( driver ) ;
74048: LD_ADDR_VAR 0 3
74052: PUSH
74053: LD_VAR 0 1
74057: PPUSH
74058: CALL_OW 310
74062: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74063: LD_VAR 0 1
74067: PPUSH
74068: LD_STRING \
74070: PUSH
74071: LD_INT 0
74073: PUSH
74074: LD_INT 0
74076: PUSH
74077: LD_INT 0
74079: PUSH
74080: LD_INT 0
74082: PUSH
74083: LD_INT 0
74085: PUSH
74086: LD_INT 0
74088: PUSH
74089: EMPTY
74090: LIST
74091: LIST
74092: LIST
74093: LIST
74094: LIST
74095: LIST
74096: LIST
74097: PUSH
74098: LD_STRING E
74100: PUSH
74101: LD_INT 0
74103: PUSH
74104: LD_INT 0
74106: PUSH
74107: LD_VAR 0 3
74111: PUSH
74112: LD_INT 0
74114: PUSH
74115: LD_INT 0
74117: PUSH
74118: LD_INT 0
74120: PUSH
74121: EMPTY
74122: LIST
74123: LIST
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: PUSH
74130: EMPTY
74131: LIST
74132: LIST
74133: PPUSH
74134: CALL_OW 446
// end ;
74138: LD_VAR 0 2
74142: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74143: LD_INT 0
74145: PPUSH
74146: PPUSH
// if not driver or not IsInUnit ( driver ) then
74147: LD_VAR 0 1
74151: NOT
74152: PUSH
74153: LD_VAR 0 1
74157: PPUSH
74158: CALL_OW 310
74162: NOT
74163: OR
74164: IFFALSE 74168
// exit ;
74166: GO 74258
// vehicle := IsInUnit ( driver ) ;
74168: LD_ADDR_VAR 0 3
74172: PUSH
74173: LD_VAR 0 1
74177: PPUSH
74178: CALL_OW 310
74182: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74183: LD_VAR 0 1
74187: PPUSH
74188: LD_STRING \
74190: PUSH
74191: LD_INT 0
74193: PUSH
74194: LD_INT 0
74196: PUSH
74197: LD_INT 0
74199: PUSH
74200: LD_INT 0
74202: PUSH
74203: LD_INT 0
74205: PUSH
74206: LD_INT 0
74208: PUSH
74209: EMPTY
74210: LIST
74211: LIST
74212: LIST
74213: LIST
74214: LIST
74215: LIST
74216: LIST
74217: PUSH
74218: LD_STRING E
74220: PUSH
74221: LD_INT 0
74223: PUSH
74224: LD_INT 0
74226: PUSH
74227: LD_VAR 0 3
74231: PUSH
74232: LD_INT 0
74234: PUSH
74235: LD_INT 0
74237: PUSH
74238: LD_INT 0
74240: PUSH
74241: EMPTY
74242: LIST
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: PUSH
74250: EMPTY
74251: LIST
74252: LIST
74253: PPUSH
74254: CALL_OW 447
// end ;
74258: LD_VAR 0 2
74262: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74263: LD_INT 0
74265: PPUSH
74266: PPUSH
74267: PPUSH
// tmp := [ ] ;
74268: LD_ADDR_VAR 0 5
74272: PUSH
74273: EMPTY
74274: ST_TO_ADDR
// for i in units do
74275: LD_ADDR_VAR 0 4
74279: PUSH
74280: LD_VAR 0 1
74284: PUSH
74285: FOR_IN
74286: IFFALSE 74324
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74288: LD_ADDR_VAR 0 5
74292: PUSH
74293: LD_VAR 0 5
74297: PPUSH
74298: LD_VAR 0 5
74302: PUSH
74303: LD_INT 1
74305: PLUS
74306: PPUSH
74307: LD_VAR 0 4
74311: PPUSH
74312: CALL_OW 256
74316: PPUSH
74317: CALL_OW 2
74321: ST_TO_ADDR
74322: GO 74285
74324: POP
74325: POP
// if not tmp then
74326: LD_VAR 0 5
74330: NOT
74331: IFFALSE 74335
// exit ;
74333: GO 74383
// if asc then
74335: LD_VAR 0 2
74339: IFFALSE 74363
// result := SortListByListAsc ( units , tmp ) else
74341: LD_ADDR_VAR 0 3
74345: PUSH
74346: LD_VAR 0 1
74350: PPUSH
74351: LD_VAR 0 5
74355: PPUSH
74356: CALL_OW 76
74360: ST_TO_ADDR
74361: GO 74383
// result := SortListByListDesc ( units , tmp ) ;
74363: LD_ADDR_VAR 0 3
74367: PUSH
74368: LD_VAR 0 1
74372: PPUSH
74373: LD_VAR 0 5
74377: PPUSH
74378: CALL_OW 77
74382: ST_TO_ADDR
// end ;
74383: LD_VAR 0 3
74387: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74388: LD_INT 0
74390: PPUSH
74391: PPUSH
// task := GetTaskList ( mech ) ;
74392: LD_ADDR_VAR 0 4
74396: PUSH
74397: LD_VAR 0 1
74401: PPUSH
74402: CALL_OW 437
74406: ST_TO_ADDR
// if not task then
74407: LD_VAR 0 4
74411: NOT
74412: IFFALSE 74416
// exit ;
74414: GO 74458
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74416: LD_ADDR_VAR 0 3
74420: PUSH
74421: LD_VAR 0 4
74425: PUSH
74426: LD_INT 1
74428: ARRAY
74429: PUSH
74430: LD_INT 1
74432: ARRAY
74433: PUSH
74434: LD_STRING r
74436: EQUAL
74437: PUSH
74438: LD_VAR 0 4
74442: PUSH
74443: LD_INT 1
74445: ARRAY
74446: PUSH
74447: LD_INT 4
74449: ARRAY
74450: PUSH
74451: LD_VAR 0 2
74455: EQUAL
74456: AND
74457: ST_TO_ADDR
// end ;
74458: LD_VAR 0 3
74462: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74463: LD_INT 0
74465: PPUSH
// SetDir ( unit , d ) ;
74466: LD_VAR 0 1
74470: PPUSH
74471: LD_VAR 0 4
74475: PPUSH
74476: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74480: LD_VAR 0 1
74484: PPUSH
74485: LD_VAR 0 2
74489: PPUSH
74490: LD_VAR 0 3
74494: PPUSH
74495: LD_VAR 0 5
74499: PPUSH
74500: CALL_OW 48
// end ;
74504: LD_VAR 0 6
74508: RET
// export function ToNaturalNumber ( number ) ; begin
74509: LD_INT 0
74511: PPUSH
// result := number div 1 ;
74512: LD_ADDR_VAR 0 2
74516: PUSH
74517: LD_VAR 0 1
74521: PUSH
74522: LD_INT 1
74524: DIV
74525: ST_TO_ADDR
// if number < 0 then
74526: LD_VAR 0 1
74530: PUSH
74531: LD_INT 0
74533: LESS
74534: IFFALSE 74544
// result := 0 ;
74536: LD_ADDR_VAR 0 2
74540: PUSH
74541: LD_INT 0
74543: ST_TO_ADDR
// end ;
74544: LD_VAR 0 2
74548: RET
// export function SortByClass ( units , class ) ; var un ; begin
74549: LD_INT 0
74551: PPUSH
74552: PPUSH
// if not units or not class then
74553: LD_VAR 0 1
74557: NOT
74558: PUSH
74559: LD_VAR 0 2
74563: NOT
74564: OR
74565: IFFALSE 74569
// exit ;
74567: GO 74664
// result := [ ] ;
74569: LD_ADDR_VAR 0 3
74573: PUSH
74574: EMPTY
74575: ST_TO_ADDR
// for un in units do
74576: LD_ADDR_VAR 0 4
74580: PUSH
74581: LD_VAR 0 1
74585: PUSH
74586: FOR_IN
74587: IFFALSE 74662
// if GetClass ( un ) = class then
74589: LD_VAR 0 4
74593: PPUSH
74594: CALL_OW 257
74598: PUSH
74599: LD_VAR 0 2
74603: EQUAL
74604: IFFALSE 74631
// result := Insert ( result , 1 , un ) else
74606: LD_ADDR_VAR 0 3
74610: PUSH
74611: LD_VAR 0 3
74615: PPUSH
74616: LD_INT 1
74618: PPUSH
74619: LD_VAR 0 4
74623: PPUSH
74624: CALL_OW 2
74628: ST_TO_ADDR
74629: GO 74660
// result := Replace ( result , result + 1 , un ) ;
74631: LD_ADDR_VAR 0 3
74635: PUSH
74636: LD_VAR 0 3
74640: PPUSH
74641: LD_VAR 0 3
74645: PUSH
74646: LD_INT 1
74648: PLUS
74649: PPUSH
74650: LD_VAR 0 4
74654: PPUSH
74655: CALL_OW 1
74659: ST_TO_ADDR
74660: GO 74586
74662: POP
74663: POP
// end ;
74664: LD_VAR 0 3
74668: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74669: LD_INT 0
74671: PPUSH
74672: PPUSH
74673: PPUSH
74674: PPUSH
74675: PPUSH
74676: PPUSH
74677: PPUSH
// result := [ ] ;
74678: LD_ADDR_VAR 0 4
74682: PUSH
74683: EMPTY
74684: ST_TO_ADDR
// if x - r < 0 then
74685: LD_VAR 0 1
74689: PUSH
74690: LD_VAR 0 3
74694: MINUS
74695: PUSH
74696: LD_INT 0
74698: LESS
74699: IFFALSE 74711
// min_x := 0 else
74701: LD_ADDR_VAR 0 8
74705: PUSH
74706: LD_INT 0
74708: ST_TO_ADDR
74709: GO 74727
// min_x := x - r ;
74711: LD_ADDR_VAR 0 8
74715: PUSH
74716: LD_VAR 0 1
74720: PUSH
74721: LD_VAR 0 3
74725: MINUS
74726: ST_TO_ADDR
// if y - r < 0 then
74727: LD_VAR 0 2
74731: PUSH
74732: LD_VAR 0 3
74736: MINUS
74737: PUSH
74738: LD_INT 0
74740: LESS
74741: IFFALSE 74753
// min_y := 0 else
74743: LD_ADDR_VAR 0 7
74747: PUSH
74748: LD_INT 0
74750: ST_TO_ADDR
74751: GO 74769
// min_y := y - r ;
74753: LD_ADDR_VAR 0 7
74757: PUSH
74758: LD_VAR 0 2
74762: PUSH
74763: LD_VAR 0 3
74767: MINUS
74768: ST_TO_ADDR
// max_x := x + r ;
74769: LD_ADDR_VAR 0 9
74773: PUSH
74774: LD_VAR 0 1
74778: PUSH
74779: LD_VAR 0 3
74783: PLUS
74784: ST_TO_ADDR
// max_y := y + r ;
74785: LD_ADDR_VAR 0 10
74789: PUSH
74790: LD_VAR 0 2
74794: PUSH
74795: LD_VAR 0 3
74799: PLUS
74800: ST_TO_ADDR
// for _x = min_x to max_x do
74801: LD_ADDR_VAR 0 5
74805: PUSH
74806: DOUBLE
74807: LD_VAR 0 8
74811: DEC
74812: ST_TO_ADDR
74813: LD_VAR 0 9
74817: PUSH
74818: FOR_TO
74819: IFFALSE 74920
// for _y = min_y to max_y do
74821: LD_ADDR_VAR 0 6
74825: PUSH
74826: DOUBLE
74827: LD_VAR 0 7
74831: DEC
74832: ST_TO_ADDR
74833: LD_VAR 0 10
74837: PUSH
74838: FOR_TO
74839: IFFALSE 74916
// begin if not ValidHex ( _x , _y ) then
74841: LD_VAR 0 5
74845: PPUSH
74846: LD_VAR 0 6
74850: PPUSH
74851: CALL_OW 488
74855: NOT
74856: IFFALSE 74860
// continue ;
74858: GO 74838
// if GetResourceTypeXY ( _x , _y ) then
74860: LD_VAR 0 5
74864: PPUSH
74865: LD_VAR 0 6
74869: PPUSH
74870: CALL_OW 283
74874: IFFALSE 74914
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74876: LD_ADDR_VAR 0 4
74880: PUSH
74881: LD_VAR 0 4
74885: PPUSH
74886: LD_VAR 0 4
74890: PUSH
74891: LD_INT 1
74893: PLUS
74894: PPUSH
74895: LD_VAR 0 5
74899: PUSH
74900: LD_VAR 0 6
74904: PUSH
74905: EMPTY
74906: LIST
74907: LIST
74908: PPUSH
74909: CALL_OW 1
74913: ST_TO_ADDR
// end ;
74914: GO 74838
74916: POP
74917: POP
74918: GO 74818
74920: POP
74921: POP
// end ;
74922: LD_VAR 0 4
74926: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74927: LD_INT 0
74929: PPUSH
74930: PPUSH
74931: PPUSH
74932: PPUSH
74933: PPUSH
74934: PPUSH
74935: PPUSH
74936: PPUSH
// if not units then
74937: LD_VAR 0 1
74941: NOT
74942: IFFALSE 74946
// exit ;
74944: GO 75470
// result := UnitFilter ( units , [ f_ok ] ) ;
74946: LD_ADDR_VAR 0 3
74950: PUSH
74951: LD_VAR 0 1
74955: PPUSH
74956: LD_INT 50
74958: PUSH
74959: EMPTY
74960: LIST
74961: PPUSH
74962: CALL_OW 72
74966: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74967: LD_ADDR_VAR 0 8
74971: PUSH
74972: LD_VAR 0 1
74976: PUSH
74977: LD_INT 1
74979: ARRAY
74980: PPUSH
74981: CALL_OW 255
74985: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74986: LD_ADDR_VAR 0 10
74990: PUSH
74991: LD_INT 29
74993: PUSH
74994: LD_INT 91
74996: PUSH
74997: LD_INT 49
74999: PUSH
75000: EMPTY
75001: LIST
75002: LIST
75003: LIST
75004: ST_TO_ADDR
// if not result then
75005: LD_VAR 0 3
75009: NOT
75010: IFFALSE 75014
// exit ;
75012: GO 75470
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75014: LD_ADDR_VAR 0 5
75018: PUSH
75019: LD_INT 81
75021: PUSH
75022: LD_VAR 0 8
75026: PUSH
75027: EMPTY
75028: LIST
75029: LIST
75030: PPUSH
75031: CALL_OW 69
75035: ST_TO_ADDR
// for i in result do
75036: LD_ADDR_VAR 0 4
75040: PUSH
75041: LD_VAR 0 3
75045: PUSH
75046: FOR_IN
75047: IFFALSE 75468
// begin tag := GetTag ( i ) + 1 ;
75049: LD_ADDR_VAR 0 9
75053: PUSH
75054: LD_VAR 0 4
75058: PPUSH
75059: CALL_OW 110
75063: PUSH
75064: LD_INT 1
75066: PLUS
75067: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75068: LD_ADDR_VAR 0 7
75072: PUSH
75073: LD_VAR 0 4
75077: PPUSH
75078: CALL_OW 250
75082: PPUSH
75083: LD_VAR 0 4
75087: PPUSH
75088: CALL_OW 251
75092: PPUSH
75093: LD_INT 6
75095: PPUSH
75096: CALL 74669 0 3
75100: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
75101: LD_VAR 0 4
75105: PPUSH
75106: CALL_OW 247
75110: PUSH
75111: LD_INT 2
75113: EQUAL
75114: PUSH
75115: LD_VAR 0 7
75119: AND
75120: PUSH
75121: LD_VAR 0 4
75125: PPUSH
75126: CALL_OW 264
75130: PUSH
75131: LD_VAR 0 10
75135: IN
75136: NOT
75137: AND
75138: IFFALSE 75177
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75140: LD_VAR 0 4
75144: PPUSH
75145: LD_VAR 0 7
75149: PUSH
75150: LD_INT 1
75152: ARRAY
75153: PUSH
75154: LD_INT 1
75156: ARRAY
75157: PPUSH
75158: LD_VAR 0 7
75162: PUSH
75163: LD_INT 1
75165: ARRAY
75166: PUSH
75167: LD_INT 2
75169: ARRAY
75170: PPUSH
75171: CALL_OW 116
75175: GO 75466
// if path > tag then
75177: LD_VAR 0 2
75181: PUSH
75182: LD_VAR 0 9
75186: GREATER
75187: IFFALSE 75395
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
75189: LD_ADDR_VAR 0 6
75193: PUSH
75194: LD_VAR 0 5
75198: PPUSH
75199: LD_INT 91
75201: PUSH
75202: LD_VAR 0 4
75206: PUSH
75207: LD_INT 8
75209: PUSH
75210: EMPTY
75211: LIST
75212: LIST
75213: LIST
75214: PPUSH
75215: CALL_OW 72
75219: ST_TO_ADDR
// if nearEnemy then
75220: LD_VAR 0 6
75224: IFFALSE 75293
// begin if GetWeapon ( i ) = ru_time_lapser then
75226: LD_VAR 0 4
75230: PPUSH
75231: CALL_OW 264
75235: PUSH
75236: LD_INT 49
75238: EQUAL
75239: IFFALSE 75267
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75241: LD_VAR 0 4
75245: PPUSH
75246: LD_VAR 0 6
75250: PPUSH
75251: LD_VAR 0 4
75255: PPUSH
75256: CALL_OW 74
75260: PPUSH
75261: CALL_OW 112
75265: GO 75291
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75267: LD_VAR 0 4
75271: PPUSH
75272: LD_VAR 0 6
75276: PPUSH
75277: LD_VAR 0 4
75281: PPUSH
75282: CALL_OW 74
75286: PPUSH
75287: CALL_OW 115
// end else
75291: GO 75393
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75293: LD_VAR 0 4
75297: PPUSH
75298: LD_VAR 0 2
75302: PUSH
75303: LD_VAR 0 9
75307: ARRAY
75308: PUSH
75309: LD_INT 1
75311: ARRAY
75312: PPUSH
75313: LD_VAR 0 2
75317: PUSH
75318: LD_VAR 0 9
75322: ARRAY
75323: PUSH
75324: LD_INT 2
75326: ARRAY
75327: PPUSH
75328: CALL_OW 297
75332: PUSH
75333: LD_INT 6
75335: GREATER
75336: IFFALSE 75379
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75338: LD_VAR 0 4
75342: PPUSH
75343: LD_VAR 0 2
75347: PUSH
75348: LD_VAR 0 9
75352: ARRAY
75353: PUSH
75354: LD_INT 1
75356: ARRAY
75357: PPUSH
75358: LD_VAR 0 2
75362: PUSH
75363: LD_VAR 0 9
75367: ARRAY
75368: PUSH
75369: LD_INT 2
75371: ARRAY
75372: PPUSH
75373: CALL_OW 114
75377: GO 75393
// SetTag ( i , tag ) ;
75379: LD_VAR 0 4
75383: PPUSH
75384: LD_VAR 0 9
75388: PPUSH
75389: CALL_OW 109
// end else
75393: GO 75466
// if enemy then
75395: LD_VAR 0 5
75399: IFFALSE 75466
// begin if GetWeapon ( i ) = ru_time_lapser then
75401: LD_VAR 0 4
75405: PPUSH
75406: CALL_OW 264
75410: PUSH
75411: LD_INT 49
75413: EQUAL
75414: IFFALSE 75442
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75416: LD_VAR 0 4
75420: PPUSH
75421: LD_VAR 0 5
75425: PPUSH
75426: LD_VAR 0 4
75430: PPUSH
75431: CALL_OW 74
75435: PPUSH
75436: CALL_OW 112
75440: GO 75466
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75442: LD_VAR 0 4
75446: PPUSH
75447: LD_VAR 0 5
75451: PPUSH
75452: LD_VAR 0 4
75456: PPUSH
75457: CALL_OW 74
75461: PPUSH
75462: CALL_OW 115
// end ; end ;
75466: GO 75046
75468: POP
75469: POP
// end ;
75470: LD_VAR 0 3
75474: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75475: LD_INT 0
75477: PPUSH
75478: PPUSH
75479: PPUSH
// if not unit or IsInUnit ( unit ) then
75480: LD_VAR 0 1
75484: NOT
75485: PUSH
75486: LD_VAR 0 1
75490: PPUSH
75491: CALL_OW 310
75495: OR
75496: IFFALSE 75500
// exit ;
75498: GO 75591
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75500: LD_ADDR_VAR 0 4
75504: PUSH
75505: LD_VAR 0 1
75509: PPUSH
75510: CALL_OW 250
75514: PPUSH
75515: LD_VAR 0 2
75519: PPUSH
75520: LD_INT 1
75522: PPUSH
75523: CALL_OW 272
75527: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75528: LD_ADDR_VAR 0 5
75532: PUSH
75533: LD_VAR 0 1
75537: PPUSH
75538: CALL_OW 251
75542: PPUSH
75543: LD_VAR 0 2
75547: PPUSH
75548: LD_INT 1
75550: PPUSH
75551: CALL_OW 273
75555: ST_TO_ADDR
// if ValidHex ( x , y ) then
75556: LD_VAR 0 4
75560: PPUSH
75561: LD_VAR 0 5
75565: PPUSH
75566: CALL_OW 488
75570: IFFALSE 75591
// ComTurnXY ( unit , x , y ) ;
75572: LD_VAR 0 1
75576: PPUSH
75577: LD_VAR 0 4
75581: PPUSH
75582: LD_VAR 0 5
75586: PPUSH
75587: CALL_OW 118
// end ;
75591: LD_VAR 0 3
75595: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75596: LD_INT 0
75598: PPUSH
75599: PPUSH
// result := false ;
75600: LD_ADDR_VAR 0 3
75604: PUSH
75605: LD_INT 0
75607: ST_TO_ADDR
// if not units then
75608: LD_VAR 0 2
75612: NOT
75613: IFFALSE 75617
// exit ;
75615: GO 75662
// for i in units do
75617: LD_ADDR_VAR 0 4
75621: PUSH
75622: LD_VAR 0 2
75626: PUSH
75627: FOR_IN
75628: IFFALSE 75660
// if See ( side , i ) then
75630: LD_VAR 0 1
75634: PPUSH
75635: LD_VAR 0 4
75639: PPUSH
75640: CALL_OW 292
75644: IFFALSE 75658
// begin result := true ;
75646: LD_ADDR_VAR 0 3
75650: PUSH
75651: LD_INT 1
75653: ST_TO_ADDR
// exit ;
75654: POP
75655: POP
75656: GO 75662
// end ;
75658: GO 75627
75660: POP
75661: POP
// end ;
75662: LD_VAR 0 3
75666: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75667: LD_INT 0
75669: PPUSH
75670: PPUSH
75671: PPUSH
75672: PPUSH
// if not unit or not points then
75673: LD_VAR 0 1
75677: NOT
75678: PUSH
75679: LD_VAR 0 2
75683: NOT
75684: OR
75685: IFFALSE 75689
// exit ;
75687: GO 75779
// dist := 99999 ;
75689: LD_ADDR_VAR 0 5
75693: PUSH
75694: LD_INT 99999
75696: ST_TO_ADDR
// for i in points do
75697: LD_ADDR_VAR 0 4
75701: PUSH
75702: LD_VAR 0 2
75706: PUSH
75707: FOR_IN
75708: IFFALSE 75777
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75710: LD_ADDR_VAR 0 6
75714: PUSH
75715: LD_VAR 0 1
75719: PPUSH
75720: LD_VAR 0 4
75724: PUSH
75725: LD_INT 1
75727: ARRAY
75728: PPUSH
75729: LD_VAR 0 4
75733: PUSH
75734: LD_INT 2
75736: ARRAY
75737: PPUSH
75738: CALL_OW 297
75742: ST_TO_ADDR
// if tmpDist < dist then
75743: LD_VAR 0 6
75747: PUSH
75748: LD_VAR 0 5
75752: LESS
75753: IFFALSE 75775
// begin result := i ;
75755: LD_ADDR_VAR 0 3
75759: PUSH
75760: LD_VAR 0 4
75764: ST_TO_ADDR
// dist := tmpDist ;
75765: LD_ADDR_VAR 0 5
75769: PUSH
75770: LD_VAR 0 6
75774: ST_TO_ADDR
// end ; end ;
75775: GO 75707
75777: POP
75778: POP
// end ;
75779: LD_VAR 0 3
75783: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75784: LD_INT 0
75786: PPUSH
// uc_side := side ;
75787: LD_ADDR_OWVAR 20
75791: PUSH
75792: LD_VAR 0 1
75796: ST_TO_ADDR
// uc_nation := 3 ;
75797: LD_ADDR_OWVAR 21
75801: PUSH
75802: LD_INT 3
75804: ST_TO_ADDR
// vc_chassis := 25 ;
75805: LD_ADDR_OWVAR 37
75809: PUSH
75810: LD_INT 25
75812: ST_TO_ADDR
// vc_engine := engine_siberite ;
75813: LD_ADDR_OWVAR 39
75817: PUSH
75818: LD_INT 3
75820: ST_TO_ADDR
// vc_control := control_computer ;
75821: LD_ADDR_OWVAR 38
75825: PUSH
75826: LD_INT 3
75828: ST_TO_ADDR
// vc_weapon := 59 ;
75829: LD_ADDR_OWVAR 40
75833: PUSH
75834: LD_INT 59
75836: ST_TO_ADDR
// result := CreateVehicle ;
75837: LD_ADDR_VAR 0 5
75841: PUSH
75842: CALL_OW 45
75846: ST_TO_ADDR
// SetDir ( result , d ) ;
75847: LD_VAR 0 5
75851: PPUSH
75852: LD_VAR 0 4
75856: PPUSH
75857: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75861: LD_VAR 0 5
75865: PPUSH
75866: LD_VAR 0 2
75870: PPUSH
75871: LD_VAR 0 3
75875: PPUSH
75876: LD_INT 0
75878: PPUSH
75879: CALL_OW 48
// end ;
75883: LD_VAR 0 5
75887: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
75888: LD_INT 0
75890: PPUSH
75891: PPUSH
75892: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
75893: LD_ADDR_VAR 0 2
75897: PUSH
75898: LD_INT 0
75900: PUSH
75901: LD_INT 0
75903: PUSH
75904: LD_INT 0
75906: PUSH
75907: LD_INT 0
75909: PUSH
75910: EMPTY
75911: LIST
75912: LIST
75913: LIST
75914: LIST
75915: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75916: LD_VAR 0 1
75920: NOT
75921: PUSH
75922: LD_VAR 0 1
75926: PPUSH
75927: CALL_OW 264
75931: PUSH
75932: LD_INT 12
75934: PUSH
75935: LD_INT 51
75937: PUSH
75938: LD_INT 32
75940: PUSH
75941: LD_INT 89
75943: PUSH
75944: EMPTY
75945: LIST
75946: LIST
75947: LIST
75948: LIST
75949: IN
75950: NOT
75951: OR
75952: IFFALSE 75956
// exit ;
75954: GO 76054
// for i := 1 to 3 do
75956: LD_ADDR_VAR 0 3
75960: PUSH
75961: DOUBLE
75962: LD_INT 1
75964: DEC
75965: ST_TO_ADDR
75966: LD_INT 3
75968: PUSH
75969: FOR_TO
75970: IFFALSE 76052
// begin tmp := GetCargo ( cargo , i ) ;
75972: LD_ADDR_VAR 0 4
75976: PUSH
75977: LD_VAR 0 1
75981: PPUSH
75982: LD_VAR 0 3
75986: PPUSH
75987: CALL_OW 289
75991: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75992: LD_ADDR_VAR 0 2
75996: PUSH
75997: LD_VAR 0 2
76001: PPUSH
76002: LD_VAR 0 3
76006: PPUSH
76007: LD_VAR 0 4
76011: PPUSH
76012: CALL_OW 1
76016: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
76017: LD_ADDR_VAR 0 2
76021: PUSH
76022: LD_VAR 0 2
76026: PPUSH
76027: LD_INT 4
76029: PPUSH
76030: LD_VAR 0 2
76034: PUSH
76035: LD_INT 4
76037: ARRAY
76038: PUSH
76039: LD_VAR 0 4
76043: PLUS
76044: PPUSH
76045: CALL_OW 1
76049: ST_TO_ADDR
// end ;
76050: GO 75969
76052: POP
76053: POP
// end ;
76054: LD_VAR 0 2
76058: RET
// export function Length ( array ) ; begin
76059: LD_INT 0
76061: PPUSH
// result := array + 0 ;
76062: LD_ADDR_VAR 0 2
76066: PUSH
76067: LD_VAR 0 1
76071: PUSH
76072: LD_INT 0
76074: PLUS
76075: ST_TO_ADDR
// end ;
76076: LD_VAR 0 2
76080: RET
// export function PrepareArray ( array ) ; begin
76081: LD_INT 0
76083: PPUSH
// result := array diff 0 ;
76084: LD_ADDR_VAR 0 2
76088: PUSH
76089: LD_VAR 0 1
76093: PUSH
76094: LD_INT 0
76096: DIFF
76097: ST_TO_ADDR
// if not result [ 1 ] then
76098: LD_VAR 0 2
76102: PUSH
76103: LD_INT 1
76105: ARRAY
76106: NOT
76107: IFFALSE 76127
// result := Delete ( result , 1 ) ;
76109: LD_ADDR_VAR 0 2
76113: PUSH
76114: LD_VAR 0 2
76118: PPUSH
76119: LD_INT 1
76121: PPUSH
76122: CALL_OW 3
76126: ST_TO_ADDR
// end ; end_of_file
76127: LD_VAR 0 2
76131: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76132: LD_VAR 0 1
76136: PUSH
76137: LD_INT 200
76139: DOUBLE
76140: GREATEREQUAL
76141: IFFALSE 76149
76143: LD_INT 299
76145: DOUBLE
76146: LESSEQUAL
76147: IFTRUE 76151
76149: GO 76183
76151: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76152: LD_VAR 0 1
76156: PPUSH
76157: LD_VAR 0 2
76161: PPUSH
76162: LD_VAR 0 3
76166: PPUSH
76167: LD_VAR 0 4
76171: PPUSH
76172: LD_VAR 0 5
76176: PPUSH
76177: CALL 31034 0 5
76181: GO 76260
76183: LD_INT 300
76185: DOUBLE
76186: GREATEREQUAL
76187: IFFALSE 76195
76189: LD_INT 399
76191: DOUBLE
76192: LESSEQUAL
76193: IFTRUE 76197
76195: GO 76259
76197: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76198: LD_VAR 0 1
76202: PPUSH
76203: LD_VAR 0 2
76207: PPUSH
76208: LD_VAR 0 3
76212: PPUSH
76213: LD_VAR 0 4
76217: PPUSH
76218: LD_VAR 0 5
76222: PPUSH
76223: LD_VAR 0 6
76227: PPUSH
76228: LD_VAR 0 7
76232: PPUSH
76233: LD_VAR 0 8
76237: PPUSH
76238: LD_VAR 0 9
76242: PPUSH
76243: LD_VAR 0 10
76247: PPUSH
76248: LD_VAR 0 11
76252: PPUSH
76253: CALL 27367 0 11
76257: GO 76260
76259: POP
// end ;
76260: PPOPN 11
76262: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76263: LD_VAR 0 1
76267: PPUSH
76268: LD_VAR 0 2
76272: PPUSH
76273: LD_VAR 0 3
76277: PPUSH
76278: LD_VAR 0 4
76282: PPUSH
76283: LD_VAR 0 5
76287: PPUSH
76288: CALL 30770 0 5
// end ; end_of_file
76292: PPOPN 5
76294: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76295: LD_VAR 0 1
76299: PPUSH
76300: LD_VAR 0 2
76304: PPUSH
76305: LD_VAR 0 3
76309: PPUSH
76310: LD_VAR 0 4
76314: PPUSH
76315: LD_VAR 0 5
76319: PPUSH
76320: LD_VAR 0 6
76324: PPUSH
76325: CALL 15060 0 6
// end ;
76329: PPOPN 6
76331: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76332: LD_INT 0
76334: PPUSH
// begin if not units then
76335: LD_VAR 0 1
76339: NOT
76340: IFFALSE 76344
// exit ;
76342: GO 76344
// end ;
76344: PPOPN 7
76346: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76347: CALL 15031 0 0
// end ;
76351: PPOPN 1
76353: END
