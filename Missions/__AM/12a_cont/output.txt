// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 123 0 0
// PrepareNature ;
  15: CALL 30574 0 0
// PrepareAlliance ;
  19: CALL 337 0 0
// PrepareFriends ;
  23: CALL 3635 0 0
// PrepareAmerican ;
  27: CALL 774 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 106
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 16
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 14
  99: PPUSH
 100: CALL_OW 471
// end else
 104: GO 110
// Action ;
 106: CALL 30910 0 0
// PreparePatrol ;
 110: CALL 1239 0 0
// game := true ;
 114: LD_ADDR_EXP 2
 118: PUSH
 119: LD_INT 1
 121: ST_TO_ADDR
// end ;
 122: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert ; export function InitVariables ; begin
 123: LD_INT 0
 125: PPUSH
// debug := 0 ;
 126: LD_ADDR_EXP 1
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// friends := [ ] ;
 134: LD_ADDR_EXP 4
 138: PUSH
 139: EMPTY
 140: ST_TO_ADDR
// selected := [ ] ;
 141: LD_ADDR_EXP 3
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// reached_lab := false ;
 148: LD_ADDR_EXP 5
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// can_escape := false ;
 156: LD_ADDR_EXP 6
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// game := false ;
 164: LD_ADDR_EXP 2
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 2 ) ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_STRING GammaCommander
 179: PPUSH
 180: LD_INT 2
 182: PPUSH
 183: CALL_OW 30
 187: ST_TO_ADDR
// friends_kill_counter := 0 ;
 188: LD_ADDR_EXP 8
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// team_kill_counter := 0 ;
 196: LD_ADDR_EXP 9
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// extra_patrol := true ;
 204: LD_ADDR_EXP 11
 208: PUSH
 209: LD_INT 1
 211: ST_TO_ADDR
// on_hill := false ;
 212: LD_ADDR_EXP 7
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// invis_used := false ;
 220: LD_ADDR_EXP 12
 224: PUSH
 225: LD_INT 0
 227: ST_TO_ADDR
// alert := false ;
 228: LD_ADDR_EXP 13
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// end ;
 236: LD_VAR 0 1
 240: RET
// every 0 0$1 trigger on_hill do
 241: LD_EXP 7
 245: IFFALSE 257
 247: GO 249
 249: DISABLE
// SetAchievement ( ACH_EYE ) ;
 250: LD_STRING ACH_EYE
 252: PPUSH
 253: CALL_OW 543
 257: END
// every 0 0$1 trigger not invis_used do var i ;
 258: LD_EXP 12
 262: NOT
 263: IFFALSE 334
 265: GO 267
 267: DISABLE
 268: LD_INT 0
 270: PPUSH
// begin enable ;
 271: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 272: LD_ADDR_VAR 0 1
 276: PUSH
 277: LD_INT 22
 279: PUSH
 280: LD_INT 7
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 21
 289: PUSH
 290: LD_INT 1
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: EMPTY
 298: LIST
 299: LIST
 300: PPUSH
 301: CALL_OW 69
 305: PUSH
 306: FOR_IN
 307: IFFALSE 332
// if IsInvisible ( i ) then
 309: LD_VAR 0 1
 313: PPUSH
 314: CALL_OW 571
 318: IFFALSE 330
// begin invis_used := true ;
 320: LD_ADDR_EXP 12
 324: PUSH
 325: LD_INT 1
 327: ST_TO_ADDR
// break ;
 328: GO 332
// end ;
 330: GO 306
 332: POP
 333: POP
// end ; end_of_file
 334: PPOPN 1
 336: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 337: LD_INT 0
 339: PPUSH
 340: PPUSH
// uc_side := 7 ;
 341: LD_ADDR_OWVAR 20
 345: PUSH
 346: LD_INT 7
 348: ST_TO_ADDR
// uc_nation := 1 ;
 349: LD_ADDR_OWVAR 21
 353: PUSH
 354: LD_INT 1
 356: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 357: LD_ADDR_EXP 14
 361: PUSH
 362: LD_STRING JMM
 364: PPUSH
 365: LD_EXP 1
 369: NOT
 370: PPUSH
 371: LD_STRING 11_
 373: PPUSH
 374: CALL 5998 0 3
 378: ST_TO_ADDR
// uc_side := 4 ;
 379: LD_ADDR_OWVAR 20
 383: PUSH
 384: LD_INT 4
 386: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 387: LD_ADDR_EXP 15
 391: PUSH
 392: LD_STRING Roth
 394: PPUSH
 395: CALL_OW 25
 399: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 400: LD_EXP 14
 404: PPUSH
 405: LD_INT 1
 407: PPUSH
 408: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 412: LD_EXP 14
 416: PPUSH
 417: LD_INT 1
 419: PPUSH
 420: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 424: LD_EXP 14
 428: PPUSH
 429: LD_INT 105
 431: PPUSH
 432: LD_INT 10
 434: PPUSH
 435: LD_INT 0
 437: PPUSH
 438: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 442: LD_EXP 15
 446: PPUSH
 447: LD_INT 4
 449: PPUSH
 450: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 454: LD_EXP 15
 458: PPUSH
 459: LD_INT 109
 461: PPUSH
 462: LD_INT 10
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 472: LD_EXP 14
 476: PPUSH
 477: LD_EXP 15
 481: PPUSH
 482: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 486: LD_EXP 15
 490: PPUSH
 491: LD_EXP 14
 495: PPUSH
 496: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 500: LD_INT 3
 502: PPUSH
 503: LD_INT 3
 505: PPUSH
 506: LD_INT 3
 508: PPUSH
 509: LD_INT 12
 511: PPUSH
 512: LD_INT 100
 514: PPUSH
 515: CALL 6061 0 5
// cargo := CreateVehicle ;
 519: LD_ADDR_VAR 0 2
 523: PUSH
 524: CALL_OW 45
 528: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 529: LD_VAR 0 2
 533: PPUSH
 534: LD_INT 1
 536: PPUSH
 537: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 541: LD_VAR 0 2
 545: PPUSH
 546: LD_INT 179
 548: PPUSH
 549: LD_INT 45
 551: PPUSH
 552: LD_INT 0
 554: PPUSH
 555: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 559: LD_VAR 0 2
 563: PPUSH
 564: LD_INT 4
 566: PPUSH
 567: LD_INT 30
 569: PPUSH
 570: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 574: LD_STRING 11_artifact_captured
 576: PPUSH
 577: LD_INT 0
 579: PPUSH
 580: CALL_OW 30
 584: IFFALSE 641
// begin cargo := CreateVehicle ;
 586: LD_ADDR_VAR 0 2
 590: PUSH
 591: CALL_OW 45
 595: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 596: LD_VAR 0 2
 600: PPUSH
 601: LD_INT 0
 603: PPUSH
 604: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 608: LD_VAR 0 2
 612: PPUSH
 613: LD_INT 171
 615: PPUSH
 616: LD_INT 85
 618: PPUSH
 619: LD_INT 0
 621: PPUSH
 622: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 626: LD_VAR 0 2
 630: PPUSH
 631: LD_INT 4
 633: PPUSH
 634: LD_INT 50
 636: PPUSH
 637: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 641: LD_INT 47
 643: PPUSH
 644: LD_INT 7
 646: PPUSH
 647: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 651: LD_INT 1
 653: PPUSH
 654: LD_INT 47
 656: PPUSH
 657: CALL_OW 471
// end ;
 661: LD_VAR 0 1
 665: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 666: LD_INT 38
 668: PPUSH
 669: LD_INT 22
 671: PUSH
 672: LD_INT 7
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: PPUSH
 679: CALL_OW 70
 683: PUSH
 684: LD_EXP 7
 688: NOT
 689: AND
 690: IFFALSE 721
 692: GO 694
 694: DISABLE
// begin enable ;
 695: ENABLE
// on_hill := true ;
 696: LD_ADDR_EXP 7
 700: PUSH
 701: LD_INT 1
 703: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 704: LD_INT 126
 706: PPUSH
 707: LD_INT 13
 709: PPUSH
 710: LD_INT 7
 712: PPUSH
 713: LD_INT 90
 715: NEG
 716: PPUSH
 717: CALL_OW 330
// end ;
 721: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 722: LD_INT 38
 724: PPUSH
 725: LD_INT 22
 727: PUSH
 728: LD_INT 7
 730: PUSH
 731: EMPTY
 732: LIST
 733: LIST
 734: PPUSH
 735: CALL_OW 70
 739: NOT
 740: PUSH
 741: LD_EXP 7
 745: AND
 746: IFFALSE 773
 748: GO 750
 750: DISABLE
// begin enable ;
 751: ENABLE
// on_hill := false ;
 752: LD_ADDR_EXP 7
 756: PUSH
 757: LD_INT 0
 759: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 760: LD_INT 126
 762: PPUSH
 763: LD_INT 13
 765: PPUSH
 766: LD_INT 7
 768: PPUSH
 769: CALL_OW 331
// end ; end_of_file
 773: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 774: LD_INT 0
 776: PPUSH
 777: PPUSH
 778: PPUSH
 779: PPUSH
 780: PPUSH
 781: PPUSH
// if Difficulty = 1 then
 782: LD_OWVAR 67
 786: PUSH
 787: LD_INT 1
 789: EQUAL
 790: IFFALSE 898
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 792: LD_ADDR_VAR 0 6
 796: PUSH
 797: LD_INT 155
 799: PUSH
 800: LD_INT 77
 802: PUSH
 803: EMPTY
 804: LIST
 805: LIST
 806: PUSH
 807: LD_INT 193
 809: PUSH
 810: LD_INT 93
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 188
 819: PUSH
 820: LD_INT 81
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: LD_INT 56
 829: PUSH
 830: LD_INT 85
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: PUSH
 837: LD_INT 98
 839: PUSH
 840: LD_INT 87
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: LIST
 851: LIST
 852: LIST
 853: ST_TO_ADDR
// for i in tmp do
 854: LD_ADDR_VAR 0 2
 858: PUSH
 859: LD_VAR 0 6
 863: PUSH
 864: FOR_IN
 865: IFFALSE 896
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 867: LD_VAR 0 2
 871: PUSH
 872: LD_INT 1
 874: ARRAY
 875: PPUSH
 876: LD_VAR 0 2
 880: PUSH
 881: LD_INT 2
 883: ARRAY
 884: PPUSH
 885: CALL_OW 428
 889: PPUSH
 890: CALL_OW 64
 894: GO 864
 896: POP
 897: POP
// end ; defcon := 0 ;
 898: LD_ADDR_EXP 21
 902: PUSH
 903: LD_INT 0
 905: ST_TO_ADDR
// defcon_wave := 0 ;
 906: LD_ADDR_EXP 22
 910: PUSH
 911: LD_INT 0
 913: ST_TO_ADDR
// defenders := [ ] ;
 914: LD_ADDR_EXP 20
 918: PUSH
 919: EMPTY
 920: ST_TO_ADDR
// SetBName ( alfa , alpha ) ;
 921: LD_INT 5
 923: PPUSH
 924: LD_STRING alpha
 926: PPUSH
 927: CALL_OW 500
// uc_side := 1 ;
 931: LD_ADDR_OWVAR 20
 935: PUSH
 936: LD_INT 1
 938: ST_TO_ADDR
// uc_nation := 1 ;
 939: LD_ADDR_OWVAR 21
 943: PUSH
 944: LD_INT 1
 946: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 947: LD_ADDR_EXP 16
 951: PUSH
 952: LD_STRING Powell
 954: PPUSH
 955: CALL_OW 25
 959: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 960: LD_EXP 16
 964: PPUSH
 965: LD_INT 110
 967: PPUSH
 968: LD_INT 26
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL_OW 48
// ComHold ( Powell ) ;
 978: LD_EXP 16
 982: PPUSH
 983: CALL_OW 140
// for i = 1 to 5 do
 987: LD_ADDR_VAR 0 2
 991: PUSH
 992: DOUBLE
 993: LD_INT 1
 995: DEC
 996: ST_TO_ADDR
 997: LD_INT 5
 999: PUSH
1000: FOR_TO
1001: IFFALSE 1057
// begin PrepareHuman ( false , 1 , 10 ) ;
1003: LD_INT 0
1005: PPUSH
1006: LD_INT 1
1008: PPUSH
1009: LD_INT 10
1011: PPUSH
1012: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1016: LD_ADDR_EXP 19
1020: PUSH
1021: LD_EXP 19
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: CALL_OW 44
1033: PPUSH
1034: CALL_OW 2
1038: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1039: LD_EXP 19
1043: PUSH
1044: LD_INT 1
1046: ARRAY
1047: PPUSH
1048: LD_INT 18
1050: PPUSH
1051: CALL_OW 52
// end ;
1055: GO 1000
1057: POP
1058: POP
// if Difficulty > 2 then
1059: LD_OWVAR 67
1063: PUSH
1064: LD_INT 2
1066: GREATER
1067: IFFALSE 1116
// begin bc_type := b_turret ;
1069: LD_ADDR_OWVAR 42
1073: PUSH
1074: LD_INT 33
1076: ST_TO_ADDR
// bc_level := 7 ;
1077: LD_ADDR_OWVAR 43
1081: PUSH
1082: LD_INT 7
1084: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1085: LD_ADDR_VAR 0 4
1089: PUSH
1090: LD_INT 107
1092: PPUSH
1093: LD_INT 55
1095: PPUSH
1096: LD_INT 5
1098: PPUSH
1099: CALL_OW 47
1103: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1104: LD_VAR 0 4
1108: PPUSH
1109: LD_INT 7
1111: PPUSH
1112: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1116: LD_ADDR_VAR 0 2
1120: PUSH
1121: LD_INT 22
1123: PUSH
1124: LD_INT 1
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: LD_INT 30
1133: PUSH
1134: LD_INT 3
1136: PUSH
1137: EMPTY
1138: LIST
1139: LIST
1140: PUSH
1141: EMPTY
1142: LIST
1143: LIST
1144: PPUSH
1145: CALL_OW 69
1149: PUSH
1150: LD_INT 22
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PUSH
1160: LD_INT 30
1162: PUSH
1163: LD_INT 36
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PPUSH
1174: CALL_OW 69
1178: ADD
1179: PUSH
1180: FOR_IN
1181: IFFALSE 1232
// for j = 1 to 3 do
1183: LD_ADDR_VAR 0 3
1187: PUSH
1188: DOUBLE
1189: LD_INT 1
1191: DEC
1192: ST_TO_ADDR
1193: LD_INT 3
1195: PUSH
1196: FOR_TO
1197: IFFALSE 1228
// begin PrepareHuman ( false , 3 , 6 ) ;
1199: LD_INT 0
1201: PPUSH
1202: LD_INT 3
1204: PPUSH
1205: LD_INT 6
1207: PPUSH
1208: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1212: CALL_OW 44
1216: PPUSH
1217: LD_VAR 0 2
1221: PPUSH
1222: CALL_OW 52
// end ;
1226: GO 1196
1228: POP
1229: POP
1230: GO 1180
1232: POP
1233: POP
// end ;
1234: LD_VAR 0 1
1238: RET
// export function PreparePatrol ; var i , un ; begin
1239: LD_INT 0
1241: PPUSH
1242: PPUSH
1243: PPUSH
// uc_side := 1 ;
1244: LD_ADDR_OWVAR 20
1248: PUSH
1249: LD_INT 1
1251: ST_TO_ADDR
// uc_nation := 1 ;
1252: LD_ADDR_OWVAR 21
1256: PUSH
1257: LD_INT 1
1259: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1260: LD_ADDR_EXP 18
1264: PUSH
1265: LD_INT 99
1267: PUSH
1268: LD_INT 55
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 113
1277: PUSH
1278: LD_INT 67
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: LD_INT 129
1287: PUSH
1288: LD_INT 68
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: LD_INT 135
1297: PUSH
1298: LD_INT 62
1300: PUSH
1301: EMPTY
1302: LIST
1303: LIST
1304: PUSH
1305: LD_INT 103
1307: PUSH
1308: LD_INT 41
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: PUSH
1322: LD_INT 27
1324: PUSH
1325: LD_INT 49
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: LD_INT 46
1334: PUSH
1335: LD_INT 49
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: PUSH
1342: LD_INT 87
1344: PUSH
1345: LD_INT 70
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 99
1354: PUSH
1355: LD_INT 79
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: LD_INT 118
1364: PUSH
1365: LD_INT 111
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PUSH
1372: LD_INT 99
1374: PUSH
1375: LD_INT 79
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: PUSH
1382: LD_INT 87
1384: PUSH
1385: LD_INT 70
1387: PUSH
1388: EMPTY
1389: LIST
1390: LIST
1391: PUSH
1392: LD_INT 46
1394: PUSH
1395: LD_INT 49
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_INT 200
1414: PUSH
1415: LD_INT 88
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: PUSH
1422: LD_INT 175
1424: PUSH
1425: LD_INT 80
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: PUSH
1432: LD_INT 135
1434: PUSH
1435: LD_INT 62
1437: PUSH
1438: EMPTY
1439: LIST
1440: LIST
1441: PUSH
1442: LD_INT 117
1444: PUSH
1445: LD_INT 53
1447: PUSH
1448: EMPTY
1449: LIST
1450: LIST
1451: PUSH
1452: LD_INT 103
1454: PUSH
1455: LD_INT 41
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: LD_INT 99
1464: PUSH
1465: LD_INT 24
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 85
1474: PUSH
1475: LD_INT 3
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PUSH
1482: LD_INT 99
1484: PUSH
1485: LD_INT 24
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PUSH
1492: LD_INT 103
1494: PUSH
1495: LD_INT 41
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: PUSH
1502: LD_INT 98
1504: PUSH
1505: LD_INT 47
1507: PUSH
1508: EMPTY
1509: LIST
1510: LIST
1511: PUSH
1512: LD_INT 99
1514: PUSH
1515: LD_INT 56
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: LD_INT 96
1524: PUSH
1525: LD_INT 66
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: PUSH
1532: LD_INT 99
1534: PUSH
1535: LD_INT 56
1537: PUSH
1538: EMPTY
1539: LIST
1540: LIST
1541: PUSH
1542: LD_INT 112
1544: PUSH
1545: LD_INT 66
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: PUSH
1552: LD_INT 129
1554: PUSH
1555: LD_INT 68
1557: PUSH
1558: EMPTY
1559: LIST
1560: LIST
1561: PUSH
1562: LD_INT 135
1564: PUSH
1565: LD_INT 62
1567: PUSH
1568: EMPTY
1569: LIST
1570: LIST
1571: PUSH
1572: LD_INT 156
1574: PUSH
1575: LD_INT 71
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: PUSH
1582: LD_INT 168
1584: PUSH
1585: LD_INT 76
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: PUSH
1592: LD_INT 168
1594: PUSH
1595: LD_INT 61
1597: PUSH
1598: EMPTY
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 168
1604: PUSH
1605: LD_INT 75
1607: PUSH
1608: EMPTY
1609: LIST
1610: LIST
1611: PUSH
1612: LD_INT 185
1614: PUSH
1615: LD_INT 85
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: LIST
1626: LIST
1627: LIST
1628: LIST
1629: LIST
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: LIST
1649: ST_TO_ADDR
// mobile_patrol := [ ] ;
1650: LD_ADDR_EXP 17
1654: PUSH
1655: EMPTY
1656: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1657: LD_INT 3
1659: PPUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 3
1665: PPUSH
1666: LD_INT 4
1668: PPUSH
1669: LD_INT 100
1671: PPUSH
1672: CALL 6061 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1676: LD_ADDR_EXP 17
1680: PUSH
1681: LD_EXP 17
1685: PPUSH
1686: LD_INT 1
1688: PPUSH
1689: CALL_OW 45
1693: PPUSH
1694: CALL_OW 2
1698: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1699: LD_EXP 17
1703: PUSH
1704: LD_INT 1
1706: ARRAY
1707: PPUSH
1708: LD_INT 99
1710: PPUSH
1711: LD_INT 55
1713: PPUSH
1714: LD_INT 0
1716: PPUSH
1717: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1721: LD_INT 2
1723: PPUSH
1724: LD_INT 1
1726: PPUSH
1727: LD_INT 3
1729: PPUSH
1730: LD_INT 4
1732: PPUSH
1733: LD_INT 100
1735: PPUSH
1736: CALL 6061 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1740: LD_ADDR_EXP 17
1744: PUSH
1745: LD_EXP 17
1749: PPUSH
1750: LD_INT 2
1752: PPUSH
1753: CALL_OW 45
1757: PPUSH
1758: CALL_OW 2
1762: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1763: LD_EXP 17
1767: PUSH
1768: LD_INT 2
1770: ARRAY
1771: PPUSH
1772: LD_INT 27
1774: PPUSH
1775: LD_INT 49
1777: PPUSH
1778: LD_INT 0
1780: PPUSH
1781: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1785: LD_INT 3
1787: PPUSH
1788: LD_INT 1
1790: PPUSH
1791: LD_INT 3
1793: PPUSH
1794: LD_INT 9
1796: PUSH
1797: LD_INT 7
1799: PUSH
1800: LD_INT 7
1802: PUSH
1803: EMPTY
1804: LIST
1805: LIST
1806: LIST
1807: PUSH
1808: LD_OWVAR 67
1812: ARRAY
1813: PPUSH
1814: LD_INT 100
1816: PPUSH
1817: CALL 6061 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1821: LD_ADDR_EXP 17
1825: PUSH
1826: LD_EXP 17
1830: PPUSH
1831: LD_INT 3
1833: PPUSH
1834: CALL_OW 45
1838: PPUSH
1839: CALL_OW 2
1843: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
1844: LD_EXP 17
1848: PUSH
1849: LD_INT 3
1851: ARRAY
1852: PPUSH
1853: LD_INT 200
1855: PPUSH
1856: LD_INT 88
1858: PPUSH
1859: LD_INT 0
1861: PPUSH
1862: CALL_OW 48
// for i = mobile_patrol downto 1 do
1866: LD_ADDR_VAR 0 2
1870: PUSH
1871: DOUBLE
1872: LD_EXP 17
1876: INC
1877: ST_TO_ADDR
1878: LD_INT 1
1880: PUSH
1881: FOR_DOWNTO
1882: IFFALSE 1893
// RaiseSailEvent ( 1 ) ;
1884: LD_INT 1
1886: PPUSH
1887: CALL_OW 427
1891: GO 1881
1893: POP
1894: POP
// end ;
1895: LD_VAR 0 1
1899: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
1900: LD_INT 0
1902: PPUSH
1903: PPUSH
1904: PPUSH
1905: PPUSH
1906: PPUSH
1907: PPUSH
1908: PPUSH
1909: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
1910: LD_ADDR_VAR 0 5
1914: PUSH
1915: LD_INT 20
1917: PUSH
1918: LD_INT 4
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: LD_INT 21
1927: PUSH
1928: LD_INT 5
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: PUSH
1935: LD_INT 22
1937: PUSH
1938: LD_INT 1
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: LIST
1949: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
1950: LD_ADDR_VAR 0 6
1954: PUSH
1955: LD_INT 176
1957: PUSH
1958: LD_INT 81
1960: PUSH
1961: LD_INT 135
1963: PUSH
1964: LD_INT 62
1966: PUSH
1967: LD_INT 114
1969: PUSH
1970: LD_INT 67
1972: PUSH
1973: LD_INT 93
1975: PUSH
1976: LD_INT 71
1978: PUSH
1979: LD_INT 76
1981: PUSH
1982: LD_INT 67
1984: PUSH
1985: EMPTY
1986: LIST
1987: LIST
1988: LIST
1989: LIST
1990: LIST
1991: LIST
1992: LIST
1993: LIST
1994: LIST
1995: LIST
1996: PUSH
1997: LD_INT 107
1999: PUSH
2000: LD_INT 92
2002: PUSH
2003: LD_INT 92
2005: PUSH
2006: LD_INT 72
2008: PUSH
2009: LD_INT 77
2011: PUSH
2012: LD_INT 68
2014: PUSH
2015: EMPTY
2016: LIST
2017: LIST
2018: LIST
2019: LIST
2020: LIST
2021: LIST
2022: PUSH
2023: LD_INT 45
2025: PUSH
2026: LD_INT 49
2028: PUSH
2029: LD_INT 67
2031: PUSH
2032: LD_INT 59
2034: PUSH
2035: LD_INT 77
2037: PUSH
2038: LD_INT 68
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: LIST
2053: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2054: LD_ADDR_VAR 0 4
2058: PUSH
2059: LD_INT 1
2061: PPUSH
2062: LD_VAR 0 5
2066: PPUSH
2067: CALL_OW 12
2071: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2072: LD_ADDR_VAR 0 3
2076: PUSH
2077: LD_INT 1
2079: PPUSH
2080: LD_INT 2
2082: PPUSH
2083: CALL_OW 12
2087: ST_TO_ADDR
// uc_side := 1 ;
2088: LD_ADDR_OWVAR 20
2092: PUSH
2093: LD_INT 1
2095: ST_TO_ADDR
// uc_nation := 1 ;
2096: LD_ADDR_OWVAR 21
2100: PUSH
2101: LD_INT 1
2103: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2104: LD_INT 2
2106: PPUSH
2107: LD_INT 3
2109: PPUSH
2110: LD_INT 3
2112: PPUSH
2113: LD_INT 12
2115: PPUSH
2116: LD_INT 100
2118: PPUSH
2119: CALL 6061 0 5
// veh := CreateVehicle ;
2123: LD_ADDR_VAR 0 8
2127: PUSH
2128: CALL_OW 45
2132: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2133: LD_VAR 0 8
2137: PPUSH
2138: LD_VAR 0 5
2142: PUSH
2143: LD_VAR 0 4
2147: ARRAY
2148: PUSH
2149: LD_INT 2
2151: ARRAY
2152: PPUSH
2153: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2157: LD_VAR 0 8
2161: PPUSH
2162: LD_VAR 0 5
2166: PUSH
2167: LD_VAR 0 4
2171: ARRAY
2172: PUSH
2173: LD_INT 1
2175: ARRAY
2176: PPUSH
2177: LD_INT 0
2179: PPUSH
2180: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2184: LD_VAR 0 8
2188: PPUSH
2189: LD_INT 1
2191: PUSH
2192: LD_INT 3
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: PUSH
2199: LD_VAR 0 3
2203: ARRAY
2204: PPUSH
2205: LD_INT 100
2207: PPUSH
2208: CALL_OW 290
// tmp := road [ k ] ;
2212: LD_ADDR_VAR 0 7
2216: PUSH
2217: LD_VAR 0 6
2221: PUSH
2222: LD_VAR 0 4
2226: ARRAY
2227: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2228: LD_ADDR_VAR 0 2
2232: PUSH
2233: DOUBLE
2234: LD_INT 1
2236: DEC
2237: ST_TO_ADDR
2238: LD_VAR 0 7
2242: PUSH
2243: LD_INT 2
2245: DIV
2246: PUSH
2247: FOR_TO
2248: IFFALSE 2295
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2250: LD_VAR 0 8
2254: PPUSH
2255: LD_VAR 0 7
2259: PUSH
2260: LD_VAR 0 2
2264: PUSH
2265: LD_INT 2
2267: MUL
2268: PUSH
2269: LD_INT 1
2271: MINUS
2272: ARRAY
2273: PPUSH
2274: LD_VAR 0 7
2278: PUSH
2279: LD_VAR 0 2
2283: PUSH
2284: LD_INT 2
2286: MUL
2287: ARRAY
2288: PPUSH
2289: CALL_OW 171
2293: GO 2247
2295: POP
2296: POP
// AddComGive ( veh , alfa ) ;
2297: LD_VAR 0 8
2301: PPUSH
2302: LD_INT 5
2304: PPUSH
2305: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2309: LD_VAR 0 8
2313: PPUSH
2314: LD_INT 70
2316: PPUSH
2317: CALL_OW 202
// for i = tmp div 2 downto 1 do
2321: LD_ADDR_VAR 0 2
2325: PUSH
2326: DOUBLE
2327: LD_VAR 0 7
2331: PUSH
2332: LD_INT 2
2334: DIV
2335: INC
2336: ST_TO_ADDR
2337: LD_INT 1
2339: PUSH
2340: FOR_DOWNTO
2341: IFFALSE 2388
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2343: LD_VAR 0 8
2347: PPUSH
2348: LD_VAR 0 7
2352: PUSH
2353: LD_VAR 0 2
2357: PUSH
2358: LD_INT 2
2360: MUL
2361: PUSH
2362: LD_INT 1
2364: MINUS
2365: ARRAY
2366: PPUSH
2367: LD_VAR 0 7
2371: PUSH
2372: LD_VAR 0 2
2376: PUSH
2377: LD_INT 2
2379: MUL
2380: ARRAY
2381: PPUSH
2382: CALL_OW 171
2386: GO 2340
2388: POP
2389: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2390: LD_VAR 0 8
2394: PPUSH
2395: LD_VAR 0 5
2399: PUSH
2400: LD_VAR 0 4
2404: ARRAY
2405: PUSH
2406: LD_INT 1
2408: ARRAY
2409: PPUSH
2410: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2414: LD_INT 35
2416: PPUSH
2417: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2421: LD_VAR 0 8
2425: PPUSH
2426: LD_VAR 0 5
2430: PUSH
2431: LD_VAR 0 4
2435: ARRAY
2436: PUSH
2437: LD_INT 1
2439: ARRAY
2440: PPUSH
2441: CALL_OW 308
2445: PUSH
2446: LD_VAR 0 8
2450: PPUSH
2451: LD_VAR 0 3
2455: PPUSH
2456: CALL_OW 289
2460: PUSH
2461: LD_INT 0
2463: EQUAL
2464: AND
2465: IFFALSE 2414
// RemoveUnit ( veh ) ;
2467: LD_VAR 0 8
2471: PPUSH
2472: CALL_OW 64
// end ;
2476: LD_VAR 0 1
2480: RET
// every 3 3$00 do
2481: GO 2483
2483: DISABLE
// begin enable ;
2484: ENABLE
// SpawnCargo ;
2485: CALL 1900 0 0
// end ;
2489: END
// export function PrepareDefenders ; var i , tmp ; begin
2490: LD_INT 0
2492: PPUSH
2493: PPUSH
2494: PPUSH
// if defenders then
2495: LD_EXP 20
2499: IFFALSE 2503
// exit ;
2501: GO 2767
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
2503: LD_ADDR_VAR 0 2
2507: PUSH
2508: DOUBLE
2509: LD_INT 1
2511: DEC
2512: ST_TO_ADDR
2513: LD_INT 4
2515: PUSH
2516: LD_INT 5
2518: PUSH
2519: LD_INT 6
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: LIST
2526: PUSH
2527: LD_OWVAR 67
2531: ARRAY
2532: PUSH
2533: FOR_TO
2534: IFFALSE 2673
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2536: LD_ADDR_VAR 0 3
2540: PUSH
2541: LD_INT 6
2543: PPUSH
2544: LD_INT 2
2546: PUSH
2547: LD_INT 3
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: PUSH
2554: LD_INT 1
2556: PPUSH
2557: LD_INT 2
2559: PPUSH
2560: CALL_OW 12
2564: ARRAY
2565: PPUSH
2566: LD_INT 1
2568: PUSH
2569: LD_INT 3
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 1
2578: PPUSH
2579: LD_INT 2
2581: PPUSH
2582: CALL_OW 12
2586: ARRAY
2587: PPUSH
2588: LD_INT 2
2590: PPUSH
2591: LD_INT 4
2593: PUSH
2594: LD_INT 5
2596: PUSH
2597: LD_INT 9
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 1
2607: PPUSH
2608: LD_INT 3
2610: PPUSH
2611: CALL_OW 12
2615: ARRAY
2616: PPUSH
2617: CALL 28756 0 5
2621: ST_TO_ADDR
// if tmp then
2622: LD_VAR 0 3
2626: IFFALSE 2671
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2628: LD_INT 6
2630: PPUSH
2631: LD_VAR 0 3
2635: PUSH
2636: LD_INT 1
2638: ARRAY
2639: PPUSH
2640: LD_VAR 0 3
2644: PUSH
2645: LD_INT 2
2647: ARRAY
2648: PPUSH
2649: LD_VAR 0 3
2653: PUSH
2654: LD_INT 3
2656: ARRAY
2657: PPUSH
2658: LD_VAR 0 3
2662: PUSH
2663: LD_INT 4
2665: ARRAY
2666: PPUSH
2667: CALL_OW 185
// end ;
2671: GO 2533
2673: POP
2674: POP
// repeat wait ( 0 0$1 ) ;
2675: LD_INT 35
2677: PPUSH
2678: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 ] [ Difficulty ] ;
2682: LD_INT 22
2684: PUSH
2685: LD_INT 1
2687: PUSH
2688: EMPTY
2689: LIST
2690: LIST
2691: PUSH
2692: LD_INT 33
2694: PUSH
2695: LD_INT 2
2697: PUSH
2698: EMPTY
2699: LIST
2700: LIST
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: PPUSH
2706: CALL_OW 69
2710: PUSH
2711: LD_INT 4
2713: PUSH
2714: LD_INT 5
2716: PUSH
2717: LD_INT 6
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: PUSH
2725: LD_OWVAR 67
2729: ARRAY
2730: GREATEREQUAL
2731: IFFALSE 2675
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2733: LD_ADDR_EXP 20
2737: PUSH
2738: LD_INT 22
2740: PUSH
2741: LD_INT 1
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 33
2750: PUSH
2751: LD_INT 2
2753: PUSH
2754: EMPTY
2755: LIST
2756: LIST
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: PPUSH
2762: CALL_OW 69
2766: ST_TO_ADDR
// end ;
2767: LD_VAR 0 1
2771: RET
// export function Defend ; var i , un , veh , tmp ; begin
2772: LD_INT 0
2774: PPUSH
2775: PPUSH
2776: PPUSH
2777: PPUSH
2778: PPUSH
// defcon_wave := defcon_wave + 1 ;
2779: LD_ADDR_EXP 22
2783: PUSH
2784: LD_EXP 22
2788: PUSH
2789: LD_INT 1
2791: PLUS
2792: ST_TO_ADDR
// if not defenders then
2793: LD_EXP 20
2797: NOT
2798: IFFALSE 2804
// PrepareDefenders ;
2800: CALL 2490 0 0
// if defcon_wave > 1 then
2804: LD_EXP 22
2808: PUSH
2809: LD_INT 1
2811: GREATER
2812: IFFALSE 3070
// begin for i = 1 to defcon_wave + 2 do
2814: LD_ADDR_VAR 0 2
2818: PUSH
2819: DOUBLE
2820: LD_INT 1
2822: DEC
2823: ST_TO_ADDR
2824: LD_EXP 22
2828: PUSH
2829: LD_INT 2
2831: PLUS
2832: PUSH
2833: FOR_TO
2834: IFFALSE 2976
// begin uc_side := 1 ;
2836: LD_ADDR_OWVAR 20
2840: PUSH
2841: LD_INT 1
2843: ST_TO_ADDR
// uc_nation := 1 ;
2844: LD_ADDR_OWVAR 21
2848: PUSH
2849: LD_INT 1
2851: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
2852: LD_INT 4
2854: PPUSH
2855: LD_INT 3
2857: PPUSH
2858: LD_INT 1
2860: PPUSH
2861: LD_INT 4
2863: PUSH
2864: LD_INT 6
2866: PUSH
2867: LD_INT 7
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: LIST
2874: PUSH
2875: LD_INT 1
2877: PPUSH
2878: LD_INT 3
2880: PPUSH
2881: CALL_OW 12
2885: ARRAY
2886: PPUSH
2887: LD_INT 100
2889: PPUSH
2890: CALL 6061 0 5
// veh := CreateVehicle ;
2894: LD_ADDR_VAR 0 4
2898: PUSH
2899: CALL_OW 45
2903: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2904: LD_VAR 0 4
2908: PPUSH
2909: LD_INT 1
2911: PPUSH
2912: CALL_OW 233
// defenders := defenders ^ veh ;
2916: LD_ADDR_EXP 20
2920: PUSH
2921: LD_EXP 20
2925: PUSH
2926: LD_VAR 0 4
2930: ADD
2931: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
2932: LD_INT 0
2934: PPUSH
2935: LD_INT 3
2937: PPUSH
2938: LD_INT 9
2940: PPUSH
2941: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2945: CALL_OW 44
2949: PPUSH
2950: LD_VAR 0 4
2954: PPUSH
2955: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
2959: LD_VAR 0 4
2963: PPUSH
2964: LD_INT 25
2966: PPUSH
2967: LD_INT 0
2969: PPUSH
2970: CALL_OW 49
// end ;
2974: GO 2833
2976: POP
2977: POP
// for i = 1 to defcon_wave do
2978: LD_ADDR_VAR 0 2
2982: PUSH
2983: DOUBLE
2984: LD_INT 1
2986: DEC
2987: ST_TO_ADDR
2988: LD_EXP 22
2992: PUSH
2993: FOR_TO
2994: IFFALSE 3068
// begin uc_side := 1 ;
2996: LD_ADDR_OWVAR 20
3000: PUSH
3001: LD_INT 1
3003: ST_TO_ADDR
// uc_nation := 1 ;
3004: LD_ADDR_OWVAR 21
3008: PUSH
3009: LD_INT 1
3011: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3012: LD_INT 0
3014: PPUSH
3015: LD_INT 5
3017: PPUSH
3018: LD_INT 9
3020: PPUSH
3021: CALL_OW 380
// un := CreateHuman ;
3025: LD_ADDR_VAR 0 3
3029: PUSH
3030: CALL_OW 44
3034: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3035: LD_VAR 0 3
3039: PPUSH
3040: LD_INT 25
3042: PPUSH
3043: LD_INT 0
3045: PPUSH
3046: CALL_OW 49
// defenders := defenders ^ un ;
3050: LD_ADDR_EXP 20
3054: PUSH
3055: LD_EXP 20
3059: PUSH
3060: LD_VAR 0 3
3064: ADD
3065: ST_TO_ADDR
// end ;
3066: GO 2993
3068: POP
3069: POP
// end ; repeat wait ( 0 0$1 ) ;
3070: LD_INT 35
3072: PPUSH
3073: CALL_OW 67
// for i in defenders do
3077: LD_ADDR_VAR 0 2
3081: PUSH
3082: LD_EXP 20
3086: PUSH
3087: FOR_IN
3088: IFFALSE 3170
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3090: LD_EXP 21
3094: PUSH
3095: LD_VAR 0 2
3099: PPUSH
3100: LD_EXP 21
3104: PUSH
3105: LD_INT 1
3107: ARRAY
3108: PPUSH
3109: LD_EXP 21
3113: PUSH
3114: LD_INT 2
3116: ARRAY
3117: PPUSH
3118: CALL_OW 297
3122: PUSH
3123: LD_INT 10
3125: GREATER
3126: AND
3127: PUSH
3128: LD_VAR 0 2
3132: PPUSH
3133: CALL_OW 314
3137: NOT
3138: AND
3139: IFFALSE 3168
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3141: LD_VAR 0 2
3145: PPUSH
3146: LD_EXP 21
3150: PUSH
3151: LD_INT 1
3153: ARRAY
3154: PPUSH
3155: LD_EXP 21
3159: PUSH
3160: LD_INT 2
3162: ARRAY
3163: PPUSH
3164: CALL_OW 114
// end ;
3168: GO 3087
3170: POP
3171: POP
// until not defenders ;
3172: LD_EXP 20
3176: NOT
3177: IFFALSE 3070
// end ;
3179: LD_VAR 0 1
3183: RET
// every 0 0$1 do var radar , i ;
3184: GO 3186
3186: DISABLE
3187: LD_INT 0
3189: PPUSH
3190: PPUSH
// begin uc_side := 1 ;
3191: LD_ADDR_OWVAR 20
3195: PUSH
3196: LD_INT 1
3198: ST_TO_ADDR
// uc_nation := 1 ;
3199: LD_ADDR_OWVAR 21
3203: PUSH
3204: LD_INT 1
3206: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3207: LD_INT 1
3209: PPUSH
3210: LD_INT 2
3212: PPUSH
3213: LD_INT 3
3215: PPUSH
3216: LD_INT 11
3218: PPUSH
3219: LD_INT 100
3221: PPUSH
3222: CALL 6061 0 5
// radar := CreateVehicle ;
3226: LD_ADDR_VAR 0 1
3230: PUSH
3231: CALL_OW 45
3235: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3236: LD_VAR 0 1
3240: PPUSH
3241: LD_INT 4
3243: PPUSH
3244: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3248: LD_VAR 0 1
3252: PPUSH
3253: LD_INT 51
3255: PPUSH
3256: LD_INT 45
3258: PPUSH
3259: LD_INT 0
3261: PPUSH
3262: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3266: LD_VAR 0 1
3270: PPUSH
3271: LD_INT 700
3273: PPUSH
3274: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3278: LD_VAR 0 1
3282: PPUSH
3283: LD_INT 65
3285: PPUSH
3286: LD_INT 75
3288: PPUSH
3289: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3293: LD_VAR 0 1
3297: PPUSH
3298: LD_INT 350
3300: PPUSH
3301: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3305: LD_VAR 0 1
3309: PPUSH
3310: LD_INT 83
3312: PPUSH
3313: LD_INT 87
3315: PPUSH
3316: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3320: LD_VAR 0 1
3324: PPUSH
3325: LD_INT 525
3327: PPUSH
3328: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3332: LD_VAR 0 1
3336: PPUSH
3337: LD_INT 94
3339: PPUSH
3340: LD_INT 81
3342: PPUSH
3343: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3347: LD_VAR 0 1
3351: PPUSH
3352: LD_INT 350
3354: PPUSH
3355: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3359: LD_VAR 0 1
3363: PPUSH
3364: LD_INT 55
3366: PPUSH
3367: LD_INT 48
3369: PPUSH
3370: CALL_OW 171
// wait ( 1 1$00 ) ;
3374: LD_INT 2100
3376: PPUSH
3377: CALL_OW 67
// until not IsOk ( radar ) ;
3381: LD_VAR 0 1
3385: PPUSH
3386: CALL_OW 302
3390: NOT
3391: IFFALSE 3266
// end ;
3393: PPOPN 2
3395: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3396: LD_OWVAR 67
3400: PUSH
3401: LD_INT 1
3403: GREATER
3404: PUSH
3405: LD_EXP 11
3409: AND
3410: IFFALSE 3632
3412: GO 3414
3414: DISABLE
3415: LD_INT 0
3417: PPUSH
// begin enable ;
3418: ENABLE
// uc_side := 1 ;
3419: LD_ADDR_OWVAR 20
3423: PUSH
3424: LD_INT 1
3426: ST_TO_ADDR
// uc_nation := 1 ;
3427: LD_ADDR_OWVAR 21
3431: PUSH
3432: LD_INT 1
3434: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3435: LD_INT 5
3437: PPUSH
3438: LD_INT 3
3440: PPUSH
3441: LD_INT 3
3443: PPUSH
3444: LD_INT 4
3446: PPUSH
3447: LD_INT 100
3449: PPUSH
3450: CALL 6061 0 5
// un := CreateVehicle ;
3454: LD_ADDR_VAR 0 1
3458: PUSH
3459: CALL_OW 45
3463: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3464: LD_VAR 0 1
3468: PPUSH
3469: LD_INT 3
3471: PPUSH
3472: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3476: LD_VAR 0 1
3480: PPUSH
3481: LD_INT 155
3483: PPUSH
3484: LD_INT 2
3486: PPUSH
3487: LD_INT 0
3489: PPUSH
3490: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: LD_INT 169
3501: PPUSH
3502: LD_INT 77
3504: PPUSH
3505: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3509: LD_VAR 0 1
3513: PPUSH
3514: LD_INT 70
3516: PPUSH
3517: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3521: LD_VAR 0 1
3525: PPUSH
3526: LD_INT 134
3528: PPUSH
3529: LD_INT 62
3531: PPUSH
3532: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3536: LD_VAR 0 1
3540: PPUSH
3541: LD_INT 103
3543: PPUSH
3544: LD_INT 42
3546: PPUSH
3547: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3551: LD_VAR 0 1
3555: PPUSH
3556: LD_INT 70
3558: PPUSH
3559: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3563: LD_VAR 0 1
3567: PPUSH
3568: LD_INT 84
3570: PPUSH
3571: LD_INT 2
3573: PPUSH
3574: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3578: LD_INT 35
3580: PPUSH
3581: CALL_OW 67
// if IsDead ( un ) then
3585: LD_VAR 0 1
3589: PPUSH
3590: CALL_OW 301
3594: IFFALSE 3606
// begin extra_patrol := false ;
3596: LD_ADDR_EXP 11
3600: PUSH
3601: LD_INT 0
3603: ST_TO_ADDR
// exit ;
3604: GO 3632
// end ; until IsAt ( un , 84 , 2 ) ;
3606: LD_VAR 0 1
3610: PPUSH
3611: LD_INT 84
3613: PPUSH
3614: LD_INT 2
3616: PPUSH
3617: CALL_OW 307
3621: IFFALSE 3578
// RemoveUnit ( un ) ;
3623: LD_VAR 0 1
3627: PPUSH
3628: CALL_OW 64
// end ; end_of_file
3632: PPOPN 1
3634: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl ; begin
3635: LD_INT 0
3637: PPUSH
3638: PPUSH
3639: PPUSH
3640: PPUSH
3641: PPUSH
3642: PPUSH
3643: PPUSH
// uc_side := 4 ;
3644: LD_ADDR_OWVAR 20
3648: PUSH
3649: LD_INT 4
3651: ST_TO_ADDR
// uc_nation := 1 ;
3652: LD_ADDR_OWVAR 21
3656: PUSH
3657: LD_INT 1
3659: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3660: LD_ADDR_EXP 37
3664: PUSH
3665: LD_STRING DeltaDoctor
3667: PPUSH
3668: LD_EXP 1
3672: NOT
3673: PPUSH
3674: LD_STRING 10c_
3676: PPUSH
3677: CALL 5998 0 3
3681: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3682: LD_ADDR_EXP 36
3686: PUSH
3687: LD_STRING Joan
3689: PPUSH
3690: LD_EXP 1
3694: NOT
3695: PPUSH
3696: LD_STRING 10c_
3698: PPUSH
3699: CALL 5998 0 3
3703: ST_TO_ADDR
// if Joan then
3704: LD_EXP 36
3708: IFFALSE 3739
// friends := Insert ( friends , friends + 1 , Joan ) ;
3710: LD_ADDR_EXP 4
3714: PUSH
3715: LD_EXP 4
3719: PPUSH
3720: LD_EXP 4
3724: PUSH
3725: LD_INT 1
3727: PLUS
3728: PPUSH
3729: LD_EXP 36
3733: PPUSH
3734: CALL_OW 2
3738: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3739: LD_ADDR_EXP 35
3743: PUSH
3744: LD_STRING Simms
3746: PPUSH
3747: LD_EXP 1
3751: NOT
3752: PPUSH
3753: LD_STRING 10c_
3755: PPUSH
3756: CALL 5998 0 3
3760: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3761: LD_ADDR_EXP 34
3765: PUSH
3766: LD_STRING Kikuchi
3768: PPUSH
3769: LD_EXP 1
3773: NOT
3774: PPUSH
3775: LD_STRING 11_
3777: PPUSH
3778: CALL 5998 0 3
3782: ST_TO_ADDR
// if Kikuchi then
3783: LD_EXP 34
3787: IFFALSE 3818
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3789: LD_ADDR_EXP 4
3793: PUSH
3794: LD_EXP 4
3798: PPUSH
3799: LD_EXP 4
3803: PUSH
3804: LD_INT 1
3806: PLUS
3807: PPUSH
3808: LD_EXP 34
3812: PPUSH
3813: CALL_OW 2
3817: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
3818: LD_ADDR_EXP 33
3822: PUSH
3823: LD_STRING Frank
3825: PPUSH
3826: LD_EXP 1
3830: NOT
3831: PPUSH
3832: LD_STRING 11_
3834: PPUSH
3835: CALL 5998 0 3
3839: ST_TO_ADDR
// if Frank then
3840: LD_EXP 33
3844: IFFALSE 3875
// friends := Insert ( friends , friends + 1 , Frank ) ;
3846: LD_ADDR_EXP 4
3850: PUSH
3851: LD_EXP 4
3855: PPUSH
3856: LD_EXP 4
3860: PUSH
3861: LD_INT 1
3863: PLUS
3864: PPUSH
3865: LD_EXP 33
3869: PPUSH
3870: CALL_OW 2
3874: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
3875: LD_ADDR_EXP 32
3879: PUSH
3880: LD_STRING Gary
3882: PPUSH
3883: LD_EXP 1
3887: NOT
3888: PPUSH
3889: LD_STRING 11_
3891: PPUSH
3892: CALL 5998 0 3
3896: ST_TO_ADDR
// if Gary then
3897: LD_EXP 32
3901: IFFALSE 3932
// friends := Insert ( friends , friends + 1 , Gary ) ;
3903: LD_ADDR_EXP 4
3907: PUSH
3908: LD_EXP 4
3912: PPUSH
3913: LD_EXP 4
3917: PUSH
3918: LD_INT 1
3920: PLUS
3921: PPUSH
3922: LD_EXP 32
3926: PPUSH
3927: CALL_OW 2
3931: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
3932: LD_ADDR_EXP 31
3936: PUSH
3937: LD_STRING Cornell
3939: PPUSH
3940: LD_EXP 1
3944: NOT
3945: PPUSH
3946: LD_STRING 11_
3948: PPUSH
3949: CALL 5998 0 3
3953: ST_TO_ADDR
// if Cornel then
3954: LD_EXP 31
3958: IFFALSE 3989
// friends := Insert ( friends , friends + 1 , Cornel ) ;
3960: LD_ADDR_EXP 4
3964: PUSH
3965: LD_EXP 4
3969: PPUSH
3970: LD_EXP 4
3974: PUSH
3975: LD_INT 1
3977: PLUS
3978: PPUSH
3979: LD_EXP 31
3983: PPUSH
3984: CALL_OW 2
3988: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
3989: LD_ADDR_EXP 30
3993: PUSH
3994: LD_STRING Houten
3996: PPUSH
3997: LD_EXP 1
4001: NOT
4002: PPUSH
4003: LD_STRING 11_
4005: PPUSH
4006: CALL 5998 0 3
4010: ST_TO_ADDR
// if Houten then
4011: LD_EXP 30
4015: IFFALSE 4046
// friends := Insert ( friends , friends + 1 , Houten ) ;
4017: LD_ADDR_EXP 4
4021: PUSH
4022: LD_EXP 4
4026: PPUSH
4027: LD_EXP 4
4031: PUSH
4032: LD_INT 1
4034: PLUS
4035: PPUSH
4036: LD_EXP 30
4040: PPUSH
4041: CALL_OW 2
4045: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4046: LD_ADDR_EXP 29
4050: PUSH
4051: LD_STRING Gladstone
4053: PPUSH
4054: LD_EXP 1
4058: NOT
4059: PPUSH
4060: LD_STRING 11_
4062: PPUSH
4063: CALL 5998 0 3
4067: ST_TO_ADDR
// if Gladstone then
4068: LD_EXP 29
4072: IFFALSE 4103
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4074: LD_ADDR_EXP 4
4078: PUSH
4079: LD_EXP 4
4083: PPUSH
4084: LD_EXP 4
4088: PUSH
4089: LD_INT 1
4091: PLUS
4092: PPUSH
4093: LD_EXP 29
4097: PPUSH
4098: CALL_OW 2
4102: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4103: LD_ADDR_EXP 23
4107: PUSH
4108: LD_STRING Lisa
4110: PPUSH
4111: LD_EXP 1
4115: NOT
4116: PPUSH
4117: LD_STRING 11_
4119: PPUSH
4120: CALL 5998 0 3
4124: ST_TO_ADDR
// if Lisa then
4125: LD_EXP 23
4129: IFFALSE 4154
// friends := Insert ( friends , 1 , Lisa ) ;
4131: LD_ADDR_EXP 4
4135: PUSH
4136: LD_EXP 4
4140: PPUSH
4141: LD_INT 1
4143: PPUSH
4144: LD_EXP 23
4148: PPUSH
4149: CALL_OW 2
4153: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4154: LD_ADDR_EXP 24
4158: PUSH
4159: LD_STRING Donaldson
4161: PPUSH
4162: LD_EXP 1
4166: NOT
4167: PPUSH
4168: LD_STRING 11_
4170: PPUSH
4171: CALL 5998 0 3
4175: ST_TO_ADDR
// if Donaldson then
4176: LD_EXP 24
4180: IFFALSE 4211
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4182: LD_ADDR_EXP 4
4186: PUSH
4187: LD_EXP 4
4191: PPUSH
4192: LD_EXP 4
4196: PUSH
4197: LD_INT 1
4199: PLUS
4200: PPUSH
4201: LD_EXP 24
4205: PPUSH
4206: CALL_OW 2
4210: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4211: LD_ADDR_EXP 25
4215: PUSH
4216: LD_STRING Bobby
4218: PPUSH
4219: LD_EXP 1
4223: NOT
4224: PPUSH
4225: LD_STRING 11_
4227: PPUSH
4228: CALL 5998 0 3
4232: ST_TO_ADDR
// if Bobby then
4233: LD_EXP 25
4237: IFFALSE 4268
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4239: LD_ADDR_EXP 4
4243: PUSH
4244: LD_EXP 4
4248: PPUSH
4249: LD_EXP 4
4253: PUSH
4254: LD_INT 1
4256: PLUS
4257: PPUSH
4258: LD_EXP 25
4262: PPUSH
4263: CALL_OW 2
4267: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4268: LD_ADDR_EXP 26
4272: PUSH
4273: LD_STRING Cyrus
4275: PPUSH
4276: LD_EXP 1
4280: NOT
4281: PPUSH
4282: LD_STRING 11_
4284: PPUSH
4285: CALL 5998 0 3
4289: ST_TO_ADDR
// if Cyrus then
4290: LD_EXP 26
4294: IFFALSE 4325
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4296: LD_ADDR_EXP 4
4300: PUSH
4301: LD_EXP 4
4305: PPUSH
4306: LD_EXP 4
4310: PUSH
4311: LD_INT 1
4313: PLUS
4314: PPUSH
4315: LD_EXP 26
4319: PPUSH
4320: CALL_OW 2
4324: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4325: LD_ADDR_EXP 27
4329: PUSH
4330: LD_STRING Denis
4332: PPUSH
4333: LD_EXP 1
4337: NOT
4338: PPUSH
4339: LD_STRING 11_
4341: PPUSH
4342: CALL 5998 0 3
4346: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4347: LD_ADDR_EXP 28
4351: PUSH
4352: LD_STRING Brown
4354: PPUSH
4355: LD_EXP 1
4359: NOT
4360: PPUSH
4361: LD_STRING 11_
4363: PPUSH
4364: CALL 5998 0 3
4368: ST_TO_ADDR
// if Brown then
4369: LD_EXP 28
4373: IFFALSE 4404
// friends := Insert ( friends , friends + 1 , Brown ) ;
4375: LD_ADDR_EXP 4
4379: PUSH
4380: LD_EXP 4
4384: PPUSH
4385: LD_EXP 4
4389: PUSH
4390: LD_INT 1
4392: PLUS
4393: PPUSH
4394: LD_EXP 28
4398: PPUSH
4399: CALL_OW 2
4403: ST_TO_ADDR
// friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4404: LD_ADDR_EXP 4
4408: PUSH
4409: LD_EXP 4
4413: PUSH
4414: LD_STRING 11c_others
4416: PPUSH
4417: CALL_OW 31
4421: ADD
4422: PUSH
4423: LD_STRING 11_others
4425: PPUSH
4426: CALL_OW 31
4430: ADD
4431: ST_TO_ADDR
// if friends < 18 then
4432: LD_EXP 4
4436: PUSH
4437: LD_INT 18
4439: LESS
4440: IFFALSE 4512
// for i = 1 to 18 do
4442: LD_ADDR_VAR 0 2
4446: PUSH
4447: DOUBLE
4448: LD_INT 1
4450: DEC
4451: ST_TO_ADDR
4452: LD_INT 18
4454: PUSH
4455: FOR_TO
4456: IFFALSE 4510
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4458: LD_INT 0
4460: PPUSH
4461: LD_INT 1
4463: PPUSH
4464: LD_INT 4
4466: PPUSH
4467: CALL_OW 12
4471: PPUSH
4472: LD_INT 7
4474: PPUSH
4475: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4479: LD_ADDR_EXP 4
4483: PUSH
4484: LD_EXP 4
4488: PPUSH
4489: LD_EXP 4
4493: PUSH
4494: LD_INT 1
4496: PLUS
4497: PPUSH
4498: CALL_OW 44
4502: PPUSH
4503: CALL_OW 2
4507: ST_TO_ADDR
// end ;
4508: GO 4455
4510: POP
4511: POP
// for i in friends do
4512: LD_ADDR_VAR 0 2
4516: PUSH
4517: LD_EXP 4
4521: PUSH
4522: FOR_IN
4523: IFFALSE 4581
// if GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4525: LD_VAR 0 2
4529: PPUSH
4530: LD_INT 1
4532: PPUSH
4533: CALL_OW 259
4537: PUSH
4538: LD_VAR 0 2
4542: PPUSH
4543: LD_INT 4
4545: PPUSH
4546: CALL_OW 259
4550: GREATEREQUAL
4551: IFFALSE 4567
// SetClass ( i , class_soldier ) else
4553: LD_VAR 0 2
4557: PPUSH
4558: LD_INT 1
4560: PPUSH
4561: CALL_OW 336
4565: GO 4579
// SetClass ( i , class_scientistic ) ;
4567: LD_VAR 0 2
4571: PPUSH
4572: LD_INT 4
4574: PPUSH
4575: CALL_OW 336
4579: GO 4522
4581: POP
4582: POP
// if Frank then
4583: LD_EXP 33
4587: IFFALSE 4601
// SetClass ( Frank , class_sniper ) ;
4589: LD_EXP 33
4593: PPUSH
4594: LD_INT 5
4596: PPUSH
4597: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4601: LD_EXP 36
4605: PUSH
4606: LD_EXP 27
4610: PUSH
4611: LD_EXP 37
4615: PUSH
4616: LD_EXP 35
4620: PUSH
4621: EMPTY
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: PPUSH
4627: LD_INT 4
4629: PPUSH
4630: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4634: LD_ADDR_EXP 3
4638: PUSH
4639: LD_STRING 
4641: PPUSH
4642: LD_INT 7
4644: PPUSH
4645: LD_INT 7
4647: PPUSH
4648: LD_INT -6
4650: PUSH
4651: LD_EXP 14
4655: PUSH
4656: LD_EXP 15
4660: PUSH
4661: LD_EXP 35
4665: PUSH
4666: LD_EXP 27
4670: PUSH
4671: LD_EXP 37
4675: PUSH
4676: LD_INT -2
4678: PUSH
4679: LD_INT -3
4681: PUSH
4682: LD_INT -5
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: PUSH
4696: LD_EXP 4
4700: ADD
4701: PPUSH
4702: LD_INT 1
4704: PUSH
4705: LD_INT 4
4707: PUSH
4708: LD_INT 2
4710: PUSH
4711: EMPTY
4712: LIST
4713: LIST
4714: PUSH
4715: LD_INT 5
4717: PUSH
4718: LD_INT 0
4720: PUSH
4721: LD_INT 3
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: LIST
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: LIST
4733: PPUSH
4734: CALL_OW 42
4738: ST_TO_ADDR
// if Simms then
4739: LD_EXP 35
4743: IFFALSE 4761
// selected := selected ^ Simms ;
4745: LD_ADDR_EXP 3
4749: PUSH
4750: LD_EXP 3
4754: PUSH
4755: LD_EXP 35
4759: ADD
4760: ST_TO_ADDR
// if Denis then
4761: LD_EXP 27
4765: IFFALSE 4783
// selected := selected ^ Denis ;
4767: LD_ADDR_EXP 3
4771: PUSH
4772: LD_EXP 3
4776: PUSH
4777: LD_EXP 27
4781: ADD
4782: ST_TO_ADDR
// if DeltaDoctor then
4783: LD_EXP 37
4787: IFFALSE 4805
// selected := selected ^ DeltaDoctor ;
4789: LD_ADDR_EXP 3
4793: PUSH
4794: LD_EXP 3
4798: PUSH
4799: LD_EXP 37
4803: ADD
4804: ST_TO_ADDR
// friends := friends diff selected ;
4805: LD_ADDR_EXP 4
4809: PUSH
4810: LD_EXP 4
4814: PUSH
4815: LD_EXP 3
4819: DIFF
4820: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
4821: LD_ADDR_VAR 0 4
4825: PUSH
4826: LD_INT 111
4828: PUSH
4829: LD_INT 137
4831: PUSH
4832: LD_INT 51
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: PUSH
4840: LD_INT 147
4842: PUSH
4843: LD_INT 129
4845: PUSH
4846: LD_INT 25
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
4858: LD_ADDR_VAR 0 5
4862: PUSH
4863: LD_INT 5
4865: PUSH
4866: LD_INT 6
4868: PUSH
4869: LD_INT 7
4871: PUSH
4872: LD_INT 8
4874: PUSH
4875: LD_INT 17
4877: PUSH
4878: LD_INT 18
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: ST_TO_ADDR
// for i in buildings do
4889: LD_ADDR_VAR 0 2
4893: PUSH
4894: LD_VAR 0 4
4898: PUSH
4899: FOR_IN
4900: IFFALSE 4916
// SetSide ( i , 4 ) ;
4902: LD_VAR 0 2
4906: PPUSH
4907: LD_INT 4
4909: PPUSH
4910: CALL_OW 235
4914: GO 4899
4916: POP
4917: POP
// for i in selected do
4918: LD_ADDR_VAR 0 2
4922: PUSH
4923: LD_EXP 3
4927: PUSH
4928: FOR_IN
4929: IFFALSE 5269
// begin if GetClass ( i ) in [ 1 , 5 ] then
4931: LD_VAR 0 2
4935: PPUSH
4936: CALL_OW 257
4940: PUSH
4941: LD_INT 1
4943: PUSH
4944: LD_INT 5
4946: PUSH
4947: EMPTY
4948: LIST
4949: LIST
4950: IN
4951: IFFALSE 5111
// begin if buildings [ 1 ] then
4953: LD_VAR 0 4
4957: PUSH
4958: LD_INT 1
4960: ARRAY
4961: IFFALSE 5022
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
4963: LD_VAR 0 2
4967: PPUSH
4968: LD_VAR 0 4
4972: PUSH
4973: LD_INT 1
4975: ARRAY
4976: PUSH
4977: LD_INT 1
4979: ARRAY
4980: PPUSH
4981: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
4985: LD_ADDR_VAR 0 4
4989: PUSH
4990: LD_VAR 0 4
4994: PPUSH
4995: LD_INT 1
4997: PPUSH
4998: LD_VAR 0 4
5002: PUSH
5003: LD_INT 1
5005: ARRAY
5006: PPUSH
5007: LD_INT 1
5009: PPUSH
5010: CALL_OW 3
5014: PPUSH
5015: CALL_OW 1
5019: ST_TO_ADDR
// end else
5020: GO 5109
// begin if not areas then
5022: LD_VAR 0 5
5026: NOT
5027: IFFALSE 5061
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5029: LD_VAR 0 2
5033: PPUSH
5034: LD_INT 87
5036: PPUSH
5037: LD_INT 68
5039: PPUSH
5040: LD_INT 8
5042: PPUSH
5043: LD_INT 0
5045: PPUSH
5046: CALL_OW 50
// ComHold ( i ) ;
5050: LD_VAR 0 2
5054: PPUSH
5055: CALL_OW 140
// end else
5059: GO 5109
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5061: LD_VAR 0 2
5065: PPUSH
5066: LD_VAR 0 5
5070: PUSH
5071: LD_INT 1
5073: ARRAY
5074: PPUSH
5075: LD_INT 0
5077: PPUSH
5078: CALL_OW 49
// ComHold ( i ) ;
5082: LD_VAR 0 2
5086: PPUSH
5087: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5091: LD_ADDR_VAR 0 5
5095: PUSH
5096: LD_VAR 0 5
5100: PPUSH
5101: LD_INT 1
5103: PPUSH
5104: CALL_OW 3
5108: ST_TO_ADDR
// end ; end ; end else
5109: GO 5267
// begin if buildings [ 2 ] then
5111: LD_VAR 0 4
5115: PUSH
5116: LD_INT 2
5118: ARRAY
5119: IFFALSE 5180
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5121: LD_VAR 0 2
5125: PPUSH
5126: LD_VAR 0 4
5130: PUSH
5131: LD_INT 2
5133: ARRAY
5134: PUSH
5135: LD_INT 1
5137: ARRAY
5138: PPUSH
5139: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5143: LD_ADDR_VAR 0 4
5147: PUSH
5148: LD_VAR 0 4
5152: PPUSH
5153: LD_INT 2
5155: PPUSH
5156: LD_VAR 0 4
5160: PUSH
5161: LD_INT 2
5163: ARRAY
5164: PPUSH
5165: LD_INT 1
5167: PPUSH
5168: CALL_OW 3
5172: PPUSH
5173: CALL_OW 1
5177: ST_TO_ADDR
// end else
5178: GO 5267
// begin if not areas then
5180: LD_VAR 0 5
5184: NOT
5185: IFFALSE 5219
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5187: LD_VAR 0 2
5191: PPUSH
5192: LD_INT 87
5194: PPUSH
5195: LD_INT 68
5197: PPUSH
5198: LD_INT 8
5200: PPUSH
5201: LD_INT 0
5203: PPUSH
5204: CALL_OW 50
// ComHold ( i ) ;
5208: LD_VAR 0 2
5212: PPUSH
5213: CALL_OW 140
// end else
5217: GO 5267
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5219: LD_VAR 0 2
5223: PPUSH
5224: LD_VAR 0 5
5228: PUSH
5229: LD_INT 1
5231: ARRAY
5232: PPUSH
5233: LD_INT 0
5235: PPUSH
5236: CALL_OW 49
// ComHold ( i ) ;
5240: LD_VAR 0 2
5244: PPUSH
5245: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5249: LD_ADDR_VAR 0 5
5253: PUSH
5254: LD_VAR 0 5
5258: PPUSH
5259: LD_INT 1
5261: PPUSH
5262: CALL_OW 3
5266: ST_TO_ADDR
// end ; end ; end ; end ;
5267: GO 4928
5269: POP
5270: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5271: LD_ADDR_VAR 0 6
5275: PUSH
5276: LD_INT 22
5278: PUSH
5279: LD_INT 1
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: PUSH
5286: LD_INT 30
5288: PUSH
5289: LD_INT 32
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: PPUSH
5300: CALL_OW 69
5304: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5305: LD_ADDR_VAR 0 2
5309: PUSH
5310: DOUBLE
5311: LD_VAR 0 6
5315: PUSH
5316: LD_EXP 4
5320: MINUS
5321: INC
5322: ST_TO_ADDR
5323: LD_INT 1
5325: PUSH
5326: FOR_DOWNTO
5327: IFFALSE 5390
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 ] [ Difficulty ] ) ;
5329: LD_INT 0
5331: PPUSH
5332: LD_INT 1
5334: PPUSH
5335: LD_INT 7
5337: PUSH
5338: LD_INT 8
5340: PUSH
5341: LD_INT 9
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: LIST
5348: PUSH
5349: LD_OWVAR 67
5353: ARRAY
5354: PPUSH
5355: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5359: LD_ADDR_EXP 4
5363: PUSH
5364: LD_EXP 4
5368: PPUSH
5369: LD_EXP 4
5373: PUSH
5374: LD_INT 1
5376: PLUS
5377: PPUSH
5378: CALL_OW 44
5382: PPUSH
5383: CALL_OW 2
5387: ST_TO_ADDR
// end ;
5388: GO 5326
5390: POP
5391: POP
// if friends then
5392: LD_EXP 4
5396: IFFALSE 5512
// begin tmp := friends ;
5398: LD_ADDR_VAR 0 3
5402: PUSH
5403: LD_EXP 4
5407: ST_TO_ADDR
// for i = 1 to bunkers do
5408: LD_ADDR_VAR 0 2
5412: PUSH
5413: DOUBLE
5414: LD_INT 1
5416: DEC
5417: ST_TO_ADDR
5418: LD_VAR 0 6
5422: PUSH
5423: FOR_TO
5424: IFFALSE 5510
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5426: LD_VAR 0 3
5430: PUSH
5431: LD_VAR 0 3
5435: ARRAY
5436: PPUSH
5437: LD_INT 1
5439: PPUSH
5440: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5444: LD_VAR 0 3
5448: PUSH
5449: LD_VAR 0 3
5453: ARRAY
5454: PPUSH
5455: LD_INT 1
5457: PPUSH
5458: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5462: LD_VAR 0 3
5466: PUSH
5467: LD_VAR 0 3
5471: ARRAY
5472: PPUSH
5473: LD_VAR 0 6
5477: PUSH
5478: LD_VAR 0 2
5482: ARRAY
5483: PPUSH
5484: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5488: LD_ADDR_VAR 0 3
5492: PUSH
5493: LD_VAR 0 3
5497: PPUSH
5498: LD_VAR 0 3
5502: PPUSH
5503: CALL_OW 3
5507: ST_TO_ADDR
// end ;
5508: GO 5423
5510: POP
5511: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5512: LD_ADDR_VAR 0 5
5516: PUSH
5517: LD_VAR 0 5
5521: PUSH
5522: LD_INT 9
5524: PUSH
5525: LD_INT 10
5527: PUSH
5528: LD_INT 11
5530: PUSH
5531: LD_INT 12
5533: PUSH
5534: LD_INT 13
5536: PUSH
5537: LD_INT 14
5539: PUSH
5540: LD_INT 15
5542: PUSH
5543: LD_INT 16
5545: PUSH
5546: LD_INT 26
5548: PUSH
5549: LD_INT 27
5551: PUSH
5552: LD_INT 28
5554: PUSH
5555: LD_INT 29
5557: PUSH
5558: LD_INT 30
5560: PUSH
5561: LD_INT 31
5563: PUSH
5564: LD_INT 32
5566: PUSH
5567: LD_INT 33
5569: PUSH
5570: LD_INT 34
5572: PUSH
5573: LD_INT 35
5575: PUSH
5576: LD_INT 36
5578: PUSH
5579: LD_INT 37
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: LIST
5601: LIST
5602: LIST
5603: UNION
5604: ST_TO_ADDR
// for i in friends do
5605: LD_ADDR_VAR 0 2
5609: PUSH
5610: LD_EXP 4
5614: PUSH
5615: FOR_IN
5616: IFFALSE 5884
// begin SetTag ( i , 2 ) ;
5618: LD_VAR 0 2
5622: PPUSH
5623: LD_INT 2
5625: PPUSH
5626: CALL_OW 109
// if GetClass ( i ) = 1 and buildings [ 1 ] then
5630: LD_VAR 0 2
5634: PPUSH
5635: CALL_OW 257
5639: PUSH
5640: LD_INT 1
5642: EQUAL
5643: PUSH
5644: LD_VAR 0 4
5648: PUSH
5649: LD_INT 1
5651: ARRAY
5652: AND
5653: IFFALSE 5714
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5655: LD_VAR 0 2
5659: PPUSH
5660: LD_VAR 0 4
5664: PUSH
5665: LD_INT 1
5667: ARRAY
5668: PUSH
5669: LD_INT 1
5671: ARRAY
5672: PPUSH
5673: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5677: LD_ADDR_VAR 0 4
5681: PUSH
5682: LD_VAR 0 4
5686: PPUSH
5687: LD_INT 1
5689: PPUSH
5690: LD_VAR 0 4
5694: PUSH
5695: LD_INT 1
5697: ARRAY
5698: PPUSH
5699: LD_INT 1
5701: PPUSH
5702: CALL_OW 3
5706: PPUSH
5707: CALL_OW 1
5711: ST_TO_ADDR
// continue ;
5712: GO 5615
// end ; if GetClass ( i ) = 4 and buildings [ 2 ] then
5714: LD_VAR 0 2
5718: PPUSH
5719: CALL_OW 257
5723: PUSH
5724: LD_INT 4
5726: EQUAL
5727: PUSH
5728: LD_VAR 0 4
5732: PUSH
5733: LD_INT 2
5735: ARRAY
5736: AND
5737: IFFALSE 5798
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5739: LD_VAR 0 2
5743: PPUSH
5744: LD_VAR 0 4
5748: PUSH
5749: LD_INT 2
5751: ARRAY
5752: PUSH
5753: LD_INT 1
5755: ARRAY
5756: PPUSH
5757: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5761: LD_ADDR_VAR 0 4
5765: PUSH
5766: LD_VAR 0 4
5770: PPUSH
5771: LD_INT 2
5773: PPUSH
5774: LD_VAR 0 4
5778: PUSH
5779: LD_INT 2
5781: ARRAY
5782: PPUSH
5783: LD_INT 1
5785: PPUSH
5786: CALL_OW 3
5790: PPUSH
5791: CALL_OW 1
5795: ST_TO_ADDR
// continue ;
5796: GO 5615
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5798: LD_VAR 0 2
5802: PPUSH
5803: LD_VAR 0 5
5807: PUSH
5808: LD_INT 1
5810: ARRAY
5811: PPUSH
5812: LD_INT 0
5814: PPUSH
5815: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
5819: LD_ADDR_VAR 0 5
5823: PUSH
5824: LD_VAR 0 5
5828: PPUSH
5829: LD_INT 1
5831: PPUSH
5832: CALL_OW 3
5836: ST_TO_ADDR
// if GetClass ( i ) <> 1 then
5837: LD_VAR 0 2
5841: PPUSH
5842: CALL_OW 257
5846: PUSH
5847: LD_INT 1
5849: NONEQUAL
5850: IFFALSE 5864
// SetClass ( i , 1 ) ;
5852: LD_VAR 0 2
5856: PPUSH
5857: LD_INT 1
5859: PPUSH
5860: CALL_OW 336
// ComHold ( i ) ;
5864: LD_VAR 0 2
5868: PPUSH
5869: CALL_OW 140
// if not areas then
5873: LD_VAR 0 5
5877: NOT
5878: IFFALSE 5882
// break ;
5880: GO 5884
// end ;
5882: GO 5615
5884: POP
5885: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
5886: LD_EXP 4
5890: PPUSH
5891: LD_INT 3
5893: PUSH
5894: LD_INT 52
5896: PUSH
5897: EMPTY
5898: LIST
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PPUSH
5904: CALL_OW 72
5908: IFFALSE 5975
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
5910: LD_ADDR_VAR 0 2
5914: PUSH
5915: LD_EXP 4
5919: PPUSH
5920: LD_INT 3
5922: PUSH
5923: LD_INT 52
5925: PUSH
5926: EMPTY
5927: LIST
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: PPUSH
5933: CALL_OW 72
5937: PUSH
5938: FOR_IN
5939: IFFALSE 5973
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
5941: LD_VAR 0 2
5945: PPUSH
5946: LD_INT 65
5948: PPUSH
5949: LD_INT 58
5951: PPUSH
5952: LD_INT 7
5954: PPUSH
5955: LD_INT 0
5957: PPUSH
5958: CALL_OW 50
// ComHold ( i ) ;
5962: LD_VAR 0 2
5966: PPUSH
5967: CALL_OW 140
// end ;
5971: GO 5938
5973: POP
5974: POP
// if Frank then
5975: LD_EXP 33
5979: IFFALSE 5993
// SetClass ( Frank , class_sniper ) ;
5981: LD_EXP 33
5985: PPUSH
5986: LD_INT 5
5988: PPUSH
5989: CALL_OW 336
// end ; end_of_file
5993: LD_VAR 0 1
5997: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
5998: LD_INT 0
6000: PPUSH
6001: PPUSH
// if exist_mode then
6002: LD_VAR 0 2
6006: IFFALSE 6031
// unit := CreateCharacter ( prefix & ident ) else
6008: LD_ADDR_VAR 0 5
6012: PUSH
6013: LD_VAR 0 3
6017: PUSH
6018: LD_VAR 0 1
6022: STR
6023: PPUSH
6024: CALL_OW 34
6028: ST_TO_ADDR
6029: GO 6046
// unit := NewCharacter ( ident ) ;
6031: LD_ADDR_VAR 0 5
6035: PUSH
6036: LD_VAR 0 1
6040: PPUSH
6041: CALL_OW 25
6045: ST_TO_ADDR
// result := unit ;
6046: LD_ADDR_VAR 0 4
6050: PUSH
6051: LD_VAR 0 5
6055: ST_TO_ADDR
// end ;
6056: LD_VAR 0 4
6060: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
6061: LD_INT 0
6063: PPUSH
// vc_chassis := chassis ;
6064: LD_ADDR_OWVAR 37
6068: PUSH
6069: LD_VAR 0 1
6073: ST_TO_ADDR
// vc_engine := engine ;
6074: LD_ADDR_OWVAR 39
6078: PUSH
6079: LD_VAR 0 2
6083: ST_TO_ADDR
// vc_control := control ;
6084: LD_ADDR_OWVAR 38
6088: PUSH
6089: LD_VAR 0 3
6093: ST_TO_ADDR
// vc_weapon := weapon ;
6094: LD_ADDR_OWVAR 40
6098: PUSH
6099: LD_VAR 0 4
6103: ST_TO_ADDR
// vc_fuel_battery := fuel ;
6104: LD_ADDR_OWVAR 41
6108: PUSH
6109: LD_VAR 0 5
6113: ST_TO_ADDR
// end ;
6114: LD_VAR 0 6
6118: RET
// export function CanSayRand ( side ) ; begin
6119: LD_INT 0
6121: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6122: LD_ADDR_VAR 0 2
6126: PUSH
6127: LD_INT 52
6129: PUSH
6130: EMPTY
6131: LIST
6132: PUSH
6133: LD_INT 22
6135: PUSH
6136: LD_VAR 0 1
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: LD_INT 2
6147: PUSH
6148: LD_INT 25
6150: PUSH
6151: LD_INT 1
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 25
6160: PUSH
6161: LD_INT 2
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: LD_INT 25
6170: PUSH
6171: LD_INT 3
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: PUSH
6178: LD_INT 25
6180: PUSH
6181: LD_INT 4
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: LIST
6199: PPUSH
6200: CALL_OW 69
6204: PUSH
6205: LD_EXP 14
6209: PUSH
6210: LD_EXP 33
6214: PUSH
6215: LD_EXP 23
6219: PUSH
6220: LD_EXP 24
6224: PUSH
6225: LD_EXP 25
6229: PUSH
6230: LD_EXP 26
6234: PUSH
6235: LD_EXP 27
6239: PUSH
6240: LD_EXP 28
6244: PUSH
6245: LD_EXP 29
6249: PUSH
6250: LD_EXP 30
6254: PUSH
6255: LD_EXP 16
6259: PUSH
6260: LD_EXP 31
6264: PUSH
6265: LD_EXP 32
6269: PUSH
6270: LD_EXP 34
6274: PUSH
6275: EMPTY
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: LIST
6281: LIST
6282: LIST
6283: LIST
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: DIFF
6291: ST_TO_ADDR
// end ;
6292: LD_VAR 0 2
6296: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
6297: LD_INT 0
6299: PPUSH
6300: PPUSH
6301: PPUSH
6302: PPUSH
6303: PPUSH
6304: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
6305: LD_VAR 0 1
6309: NOT
6310: PUSH
6311: LD_VAR 0 1
6315: PPUSH
6316: CALL_OW 263
6320: PUSH
6321: LD_INT 2
6323: EQUAL
6324: NOT
6325: OR
6326: IFFALSE 6330
// exit ;
6328: GO 6646
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
6330: LD_ADDR_VAR 0 6
6334: PUSH
6335: LD_INT 22
6337: PUSH
6338: LD_VAR 0 1
6342: PPUSH
6343: CALL_OW 255
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 2
6354: PUSH
6355: LD_INT 30
6357: PUSH
6358: LD_INT 36
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 34
6367: PUSH
6368: LD_INT 31
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: LIST
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: PPUSH
6384: CALL_OW 69
6388: ST_TO_ADDR
// if not tmp then
6389: LD_VAR 0 6
6393: NOT
6394: IFFALSE 6398
// exit ;
6396: GO 6646
// result := [ ] ;
6398: LD_ADDR_VAR 0 2
6402: PUSH
6403: EMPTY
6404: ST_TO_ADDR
// for i in tmp do
6405: LD_ADDR_VAR 0 3
6409: PUSH
6410: LD_VAR 0 6
6414: PUSH
6415: FOR_IN
6416: IFFALSE 6487
// begin t := UnitsInside ( i ) ;
6418: LD_ADDR_VAR 0 4
6422: PUSH
6423: LD_VAR 0 3
6427: PPUSH
6428: CALL_OW 313
6432: ST_TO_ADDR
// if t then
6433: LD_VAR 0 4
6437: IFFALSE 6485
// for j in t do
6439: LD_ADDR_VAR 0 7
6443: PUSH
6444: LD_VAR 0 4
6448: PUSH
6449: FOR_IN
6450: IFFALSE 6483
// result := Insert ( result , result + 1 , j ) ;
6452: LD_ADDR_VAR 0 2
6456: PUSH
6457: LD_VAR 0 2
6461: PPUSH
6462: LD_VAR 0 2
6466: PUSH
6467: LD_INT 1
6469: PLUS
6470: PPUSH
6471: LD_VAR 0 7
6475: PPUSH
6476: CALL_OW 2
6480: ST_TO_ADDR
6481: GO 6449
6483: POP
6484: POP
// end ;
6485: GO 6415
6487: POP
6488: POP
// if not result then
6489: LD_VAR 0 2
6493: NOT
6494: IFFALSE 6498
// exit ;
6496: GO 6646
// mech := result [ 1 ] ;
6498: LD_ADDR_VAR 0 5
6502: PUSH
6503: LD_VAR 0 2
6507: PUSH
6508: LD_INT 1
6510: ARRAY
6511: ST_TO_ADDR
// if result > 1 then
6512: LD_VAR 0 2
6516: PUSH
6517: LD_INT 1
6519: GREATER
6520: IFFALSE 6632
// for i = 2 to result do
6522: LD_ADDR_VAR 0 3
6526: PUSH
6527: DOUBLE
6528: LD_INT 2
6530: DEC
6531: ST_TO_ADDR
6532: LD_VAR 0 2
6536: PUSH
6537: FOR_TO
6538: IFFALSE 6630
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
6540: LD_ADDR_VAR 0 4
6544: PUSH
6545: LD_VAR 0 2
6549: PUSH
6550: LD_VAR 0 3
6554: ARRAY
6555: PPUSH
6556: LD_INT 3
6558: PPUSH
6559: CALL_OW 259
6563: PUSH
6564: LD_VAR 0 2
6568: PUSH
6569: LD_VAR 0 3
6573: ARRAY
6574: PPUSH
6575: CALL_OW 432
6579: MINUS
6580: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
6581: LD_VAR 0 4
6585: PUSH
6586: LD_VAR 0 5
6590: PPUSH
6591: LD_INT 3
6593: PPUSH
6594: CALL_OW 259
6598: PUSH
6599: LD_VAR 0 5
6603: PPUSH
6604: CALL_OW 432
6608: MINUS
6609: GREATEREQUAL
6610: IFFALSE 6628
// mech := result [ i ] ;
6612: LD_ADDR_VAR 0 5
6616: PUSH
6617: LD_VAR 0 2
6621: PUSH
6622: LD_VAR 0 3
6626: ARRAY
6627: ST_TO_ADDR
// end ;
6628: GO 6537
6630: POP
6631: POP
// ComLinkTo ( vehicle , mech ) ;
6632: LD_VAR 0 1
6636: PPUSH
6637: LD_VAR 0 5
6641: PPUSH
6642: CALL_OW 135
// end ;
6646: LD_VAR 0 2
6650: RET
// export function SayRand ( sex , dial ) ; begin
6651: LD_INT 0
6653: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6654: LD_ADDR_VAR 0 3
6658: PUSH
6659: LD_INT 52
6661: PUSH
6662: EMPTY
6663: LIST
6664: PUSH
6665: LD_INT 22
6667: PUSH
6668: LD_INT 1
6670: PUSH
6671: EMPTY
6672: LIST
6673: LIST
6674: PUSH
6675: LD_INT 26
6677: PUSH
6678: LD_VAR 0 1
6682: PUSH
6683: EMPTY
6684: LIST
6685: LIST
6686: PUSH
6687: LD_INT 2
6689: PUSH
6690: LD_INT 25
6692: PUSH
6693: LD_INT 1
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: PUSH
6700: LD_INT 25
6702: PUSH
6703: LD_INT 2
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: PUSH
6710: LD_INT 25
6712: PUSH
6713: LD_INT 3
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PUSH
6720: LD_INT 25
6722: PUSH
6723: LD_INT 4
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: PPUSH
6743: CALL_OW 69
6747: PUSH
6748: LD_EXP 14
6752: PUSH
6753: LD_EXP 33
6757: PUSH
6758: LD_EXP 23
6762: PUSH
6763: LD_EXP 24
6767: PUSH
6768: LD_EXP 25
6772: PUSH
6773: LD_EXP 26
6777: PUSH
6778: LD_EXP 27
6782: PUSH
6783: LD_EXP 28
6787: PUSH
6788: LD_EXP 29
6792: PUSH
6793: LD_EXP 30
6797: PUSH
6798: LD_EXP 16
6802: PUSH
6803: LD_EXP 31
6807: PUSH
6808: LD_EXP 32
6812: PUSH
6813: LD_EXP 34
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: DIFF
6834: ST_TO_ADDR
// if not result then
6835: LD_VAR 0 3
6839: NOT
6840: IFFALSE 6844
// exit ;
6842: GO 6872
// result := result [ 1 ] ;
6844: LD_ADDR_VAR 0 3
6848: PUSH
6849: LD_VAR 0 3
6853: PUSH
6854: LD_INT 1
6856: ARRAY
6857: ST_TO_ADDR
// Say ( result , dial ) ;
6858: LD_VAR 0 3
6862: PPUSH
6863: LD_VAR 0 2
6867: PPUSH
6868: CALL_OW 88
// end ;
6872: LD_VAR 0 3
6876: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6877: LD_INT 0
6879: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6880: LD_ADDR_VAR 0 4
6884: PUSH
6885: LD_INT 22
6887: PUSH
6888: LD_INT 1
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: PUSH
6895: LD_INT 26
6897: PUSH
6898: LD_VAR 0 1
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PUSH
6907: LD_INT 2
6909: PUSH
6910: LD_INT 25
6912: PUSH
6913: LD_INT 1
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PUSH
6920: LD_INT 25
6922: PUSH
6923: LD_INT 2
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 25
6932: PUSH
6933: LD_INT 3
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 25
6942: PUSH
6943: LD_INT 4
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: LIST
6961: PPUSH
6962: CALL_OW 69
6966: PUSH
6967: LD_EXP 14
6971: PUSH
6972: LD_EXP 33
6976: PUSH
6977: LD_EXP 23
6981: PUSH
6982: LD_EXP 24
6986: PUSH
6987: LD_EXP 25
6991: PUSH
6992: LD_EXP 26
6996: PUSH
6997: LD_EXP 27
7001: PUSH
7002: LD_EXP 28
7006: PUSH
7007: LD_EXP 29
7011: PUSH
7012: LD_EXP 30
7016: PUSH
7017: LD_EXP 16
7021: PUSH
7022: LD_EXP 31
7026: PUSH
7027: LD_EXP 32
7031: PUSH
7032: LD_EXP 34
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: PUSH
7053: LD_VAR 0 3
7057: ADD
7058: DIFF
7059: ST_TO_ADDR
// if not result then
7060: LD_VAR 0 4
7064: NOT
7065: IFFALSE 7069
// exit ;
7067: GO 7097
// result := result [ 1 ] ;
7069: LD_ADDR_VAR 0 4
7073: PUSH
7074: LD_VAR 0 4
7078: PUSH
7079: LD_INT 1
7081: ARRAY
7082: ST_TO_ADDR
// Say ( result , dial ) ;
7083: LD_VAR 0 4
7087: PPUSH
7088: LD_VAR 0 2
7092: PPUSH
7093: CALL_OW 88
// end ;
7097: LD_VAR 0 4
7101: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
7102: LD_INT 0
7104: PPUSH
7105: PPUSH
7106: PPUSH
7107: PPUSH
7108: PPUSH
7109: PPUSH
7110: PPUSH
7111: PPUSH
7112: PPUSH
7113: PPUSH
7114: PPUSH
7115: PPUSH
7116: PPUSH
7117: PPUSH
7118: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
7119: LD_VAR 0 1
7123: NOT
7124: PUSH
7125: LD_VAR 0 2
7129: NOT
7130: OR
7131: PUSH
7132: LD_VAR 0 1
7136: PPUSH
7137: CALL_OW 247
7141: PUSH
7142: LD_INT 3
7144: EQUAL
7145: OR
7146: IFFALSE 7150
// exit ;
7148: GO 8689
// for i = path downto 1 do
7150: LD_ADDR_VAR 0 5
7154: PUSH
7155: DOUBLE
7156: LD_VAR 0 2
7160: INC
7161: ST_TO_ADDR
7162: LD_INT 1
7164: PUSH
7165: FOR_DOWNTO
7166: IFFALSE 7227
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
7168: LD_VAR 0 2
7172: PUSH
7173: LD_VAR 0 5
7177: ARRAY
7178: PUSH
7179: LD_INT 1
7181: ARRAY
7182: PPUSH
7183: LD_VAR 0 2
7187: PUSH
7188: LD_VAR 0 5
7192: ARRAY
7193: PUSH
7194: LD_INT 2
7196: ARRAY
7197: PPUSH
7198: CALL_OW 488
7202: NOT
7203: IFFALSE 7225
// path = Delete ( path , i ) ;
7205: LD_ADDR_VAR 0 2
7209: PUSH
7210: LD_VAR 0 2
7214: PPUSH
7215: LD_VAR 0 5
7219: PPUSH
7220: CALL_OW 3
7224: ST_TO_ADDR
// end ;
7225: GO 7165
7227: POP
7228: POP
// if not path then
7229: LD_VAR 0 2
7233: NOT
7234: IFFALSE 7238
// exit ;
7236: GO 8689
// tmp_path := [ ] ;
7238: LD_ADDR_VAR 0 11
7242: PUSH
7243: EMPTY
7244: ST_TO_ADDR
// if flags then
7245: LD_VAR 0 3
7249: IFFALSE 7323
// begin if flags [ 1 ] then
7251: LD_VAR 0 3
7255: PUSH
7256: LD_INT 1
7258: ARRAY
7259: IFFALSE 7275
// safe_place = flags [ 1 ] ;
7261: LD_ADDR_VAR 0 16
7265: PUSH
7266: LD_VAR 0 3
7270: PUSH
7271: LD_INT 1
7273: ARRAY
7274: ST_TO_ADDR
// if flags [ 2 ] then
7275: LD_VAR 0 3
7279: PUSH
7280: LD_INT 2
7282: ARRAY
7283: IFFALSE 7299
// spot_dist = flags [ 2 ] ;
7285: LD_ADDR_VAR 0 15
7289: PUSH
7290: LD_VAR 0 3
7294: PUSH
7295: LD_INT 2
7297: ARRAY
7298: ST_TO_ADDR
// if flags [ 3 ] then
7299: LD_VAR 0 3
7303: PUSH
7304: LD_INT 3
7306: ARRAY
7307: IFFALSE 7323
// chase_range = flags [ 3 ] ;
7309: LD_ADDR_VAR 0 17
7313: PUSH
7314: LD_VAR 0 3
7318: PUSH
7319: LD_INT 3
7321: ARRAY
7322: ST_TO_ADDR
// end ; if not chase_range then
7323: LD_VAR 0 17
7327: NOT
7328: IFFALSE 7338
// chase_range = 8 ;
7330: LD_ADDR_VAR 0 17
7334: PUSH
7335: LD_INT 8
7337: ST_TO_ADDR
// if not spot_dist then
7338: LD_VAR 0 15
7342: NOT
7343: IFFALSE 7353
// spot_dist := 8 ;
7345: LD_ADDR_VAR 0 15
7349: PUSH
7350: LD_INT 8
7352: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
7353: LD_ADDR_VAR 0 18
7357: PUSH
7358: LD_VAR 0 1
7362: PPUSH
7363: CALL_OW 247
7367: PUSH
7368: LD_INT 2
7370: EQUAL
7371: PUSH
7372: LD_VAR 0 1
7376: PPUSH
7377: CALL_OW 262
7381: PUSH
7382: LD_INT 3
7384: NONEQUAL
7385: AND
7386: ST_TO_ADDR
// status = 1 ;
7387: LD_ADDR_VAR 0 12
7391: PUSH
7392: LD_INT 1
7394: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
7395: LD_ADDR_VAR 0 11
7399: PUSH
7400: LD_INT 1
7402: PUSH
7403: LD_VAR 0 2
7407: PUSH
7408: LD_INT 1
7410: ARRAY
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7416: LD_INT 35
7418: PPUSH
7419: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
7423: LD_VAR 0 18
7427: PUSH
7428: LD_VAR 0 1
7432: PPUSH
7433: CALL_OW 261
7437: PUSH
7438: LD_INT 20
7440: LESS
7441: AND
7442: IFFALSE 7635
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7444: LD_ADDR_VAR 0 10
7448: PUSH
7449: LD_INT 22
7451: PUSH
7452: LD_VAR 0 1
7456: PPUSH
7457: CALL_OW 255
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PUSH
7466: LD_INT 2
7468: PUSH
7469: LD_INT 30
7471: PUSH
7472: LD_INT 0
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 30
7481: PUSH
7482: LD_INT 1
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PUSH
7489: LD_INT 30
7491: PUSH
7492: LD_INT 29
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: PUSH
7499: LD_INT 30
7501: PUSH
7502: LD_INT 3
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: LIST
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: PPUSH
7520: CALL_OW 69
7524: ST_TO_ADDR
// if not station then
7525: LD_VAR 0 10
7529: NOT
7530: IFFALSE 7546
// begin SetFuel ( unit , 40 ) ;
7532: LD_VAR 0 1
7536: PPUSH
7537: LD_INT 40
7539: PPUSH
7540: CALL_OW 240
// continue ;
7544: GO 7416
// end ; status := 6 ;
7546: LD_ADDR_VAR 0 12
7550: PUSH
7551: LD_INT 6
7553: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7554: LD_ADDR_VAR 0 10
7558: PUSH
7559: LD_VAR 0 10
7563: PPUSH
7564: LD_VAR 0 1
7568: PPUSH
7569: CALL_OW 74
7573: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7574: LD_INT 35
7576: PPUSH
7577: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7581: LD_VAR 0 1
7585: PPUSH
7586: LD_VAR 0 10
7590: PPUSH
7591: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7595: LD_VAR 0 1
7599: PPUSH
7600: LD_VAR 0 10
7604: PPUSH
7605: CALL_OW 296
7609: PUSH
7610: LD_INT 6
7612: LESS
7613: IFFALSE 7574
// SetFuel ( unit , 100 ) ;
7615: LD_VAR 0 1
7619: PPUSH
7620: LD_INT 100
7622: PPUSH
7623: CALL_OW 240
// status := 5 ;
7627: LD_ADDR_VAR 0 12
7631: PUSH
7632: LD_INT 5
7634: ST_TO_ADDR
// end ; if status = 1 then
7635: LD_VAR 0 12
7639: PUSH
7640: LD_INT 1
7642: EQUAL
7643: IFFALSE 8019
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7645: LD_ADDR_VAR 0 13
7649: PUSH
7650: LD_INT 81
7652: PUSH
7653: LD_VAR 0 1
7657: PPUSH
7658: CALL_OW 255
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PUSH
7667: LD_INT 3
7669: PUSH
7670: LD_INT 21
7672: PUSH
7673: LD_INT 3
7675: PUSH
7676: EMPTY
7677: LIST
7678: LIST
7679: PUSH
7680: EMPTY
7681: LIST
7682: LIST
7683: PUSH
7684: LD_INT 91
7686: PUSH
7687: LD_VAR 0 1
7691: PUSH
7692: LD_VAR 0 15
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: PUSH
7702: LD_INT 101
7704: PUSH
7705: LD_INT 1
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: PPUSH
7718: CALL_OW 69
7722: ST_TO_ADDR
// for i in enemy do
7723: LD_ADDR_VAR 0 5
7727: PUSH
7728: LD_VAR 0 13
7732: PUSH
7733: FOR_IN
7734: IFFALSE 7765
// if IsInvisible ( i ) then
7736: LD_VAR 0 5
7740: PPUSH
7741: CALL_OW 571
7745: IFFALSE 7763
// enemy := enemy diff i ;
7747: LD_ADDR_VAR 0 13
7751: PUSH
7752: LD_VAR 0 13
7756: PUSH
7757: LD_VAR 0 5
7761: DIFF
7762: ST_TO_ADDR
7763: GO 7733
7765: POP
7766: POP
// if enemy then
7767: LD_VAR 0 13
7771: IFFALSE 7821
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7773: LD_VAR 0 1
7777: PPUSH
7778: LD_VAR 0 1
7782: PPUSH
7783: CALL_OW 250
7787: PPUSH
7788: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7792: LD_VAR 0 1
7796: PPUSH
7797: LD_VAR 0 1
7801: PPUSH
7802: CALL_OW 251
7806: PPUSH
7807: CALL_OW 232
// status = 2 ;
7811: LD_ADDR_VAR 0 12
7815: PUSH
7816: LD_INT 2
7818: ST_TO_ADDR
// end else
7819: GO 8019
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7821: LD_VAR 0 1
7825: PPUSH
7826: LD_VAR 0 11
7830: PUSH
7831: LD_INT 2
7833: ARRAY
7834: PUSH
7835: LD_INT 1
7837: ARRAY
7838: PPUSH
7839: LD_VAR 0 11
7843: PUSH
7844: LD_INT 2
7846: ARRAY
7847: PUSH
7848: LD_INT 2
7850: ARRAY
7851: PPUSH
7852: CALL_OW 307
7856: PUSH
7857: LD_VAR 0 1
7861: PPUSH
7862: CALL_OW 314
7866: NOT
7867: OR
7868: IFFALSE 8019
// begin wait ( 0 0$2 ) ;
7870: LD_INT 70
7872: PPUSH
7873: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7877: LD_VAR 0 11
7881: PUSH
7882: LD_INT 1
7884: ARRAY
7885: PUSH
7886: LD_INT 1
7888: PLUS
7889: PUSH
7890: LD_VAR 0 2
7894: GREATER
7895: IFFALSE 7920
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7897: LD_ADDR_VAR 0 11
7901: PUSH
7902: LD_VAR 0 11
7906: PPUSH
7907: LD_INT 1
7909: PPUSH
7910: LD_INT 1
7912: PPUSH
7913: CALL_OW 1
7917: ST_TO_ADDR
7918: GO 7951
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7920: LD_ADDR_VAR 0 11
7924: PUSH
7925: LD_VAR 0 11
7929: PPUSH
7930: LD_INT 1
7932: PPUSH
7933: LD_VAR 0 11
7937: PUSH
7938: LD_INT 1
7940: ARRAY
7941: PUSH
7942: LD_INT 1
7944: PLUS
7945: PPUSH
7946: CALL_OW 1
7950: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7951: LD_ADDR_VAR 0 11
7955: PUSH
7956: LD_VAR 0 11
7960: PPUSH
7961: LD_INT 2
7963: PPUSH
7964: LD_VAR 0 2
7968: PUSH
7969: LD_VAR 0 11
7973: PUSH
7974: LD_INT 1
7976: ARRAY
7977: ARRAY
7978: PPUSH
7979: CALL_OW 1
7983: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7984: LD_VAR 0 1
7988: PPUSH
7989: LD_VAR 0 11
7993: PUSH
7994: LD_INT 2
7996: ARRAY
7997: PUSH
7998: LD_INT 1
8000: ARRAY
8001: PPUSH
8002: LD_VAR 0 11
8006: PUSH
8007: LD_INT 2
8009: ARRAY
8010: PUSH
8011: LD_INT 2
8013: ARRAY
8014: PPUSH
8015: CALL_OW 114
// end ; end ; end ; if status = 2 then
8019: LD_VAR 0 12
8023: PUSH
8024: LD_INT 2
8026: EQUAL
8027: IFFALSE 8248
// begin if GetLives ( unit ) < 650 and safe_place then
8029: LD_VAR 0 1
8033: PPUSH
8034: CALL_OW 256
8038: PUSH
8039: LD_INT 650
8041: LESS
8042: PUSH
8043: LD_VAR 0 16
8047: AND
8048: IFFALSE 8060
// begin status = 3 ;
8050: LD_ADDR_VAR 0 12
8054: PUSH
8055: LD_INT 3
8057: ST_TO_ADDR
// continue ;
8058: GO 7416
// end ; x := GetRememberedX ( unit ) ;
8060: LD_ADDR_VAR 0 6
8064: PUSH
8065: LD_VAR 0 1
8069: PPUSH
8070: CALL_OW 252
8074: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
8075: LD_ADDR_VAR 0 7
8079: PUSH
8080: LD_VAR 0 1
8084: PPUSH
8085: CALL_OW 253
8089: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
8090: LD_ADDR_VAR 0 13
8094: PUSH
8095: LD_INT 81
8097: PUSH
8098: LD_VAR 0 1
8102: PPUSH
8103: CALL_OW 255
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: LD_INT 92
8114: PUSH
8115: LD_VAR 0 6
8119: PUSH
8120: LD_VAR 0 7
8124: PUSH
8125: LD_VAR 0 15
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: PUSH
8136: LD_INT 101
8138: PUSH
8139: LD_INT 1
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: LIST
8150: PPUSH
8151: CALL_OW 69
8155: ST_TO_ADDR
// if enemy then
8156: LD_VAR 0 13
8160: IFFALSE 8231
// begin e := NearestUnitToUnit ( enemy , unit ) ;
8162: LD_ADDR_VAR 0 14
8166: PUSH
8167: LD_VAR 0 13
8171: PPUSH
8172: LD_VAR 0 1
8176: PPUSH
8177: CALL_OW 74
8181: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
8182: LD_VAR 0 14
8186: PPUSH
8187: LD_VAR 0 6
8191: PPUSH
8192: LD_VAR 0 7
8196: PPUSH
8197: CALL_OW 297
8201: PUSH
8202: LD_VAR 0 15
8206: PUSH
8207: LD_VAR 0 17
8211: PLUS
8212: LESS
8213: IFFALSE 8229
// ComAttackUnit ( unit , e ) ;
8215: LD_VAR 0 1
8219: PPUSH
8220: LD_VAR 0 14
8224: PPUSH
8225: CALL_OW 115
// end else
8229: GO 8248
// begin ComStop ( unit ) ;
8231: LD_VAR 0 1
8235: PPUSH
8236: CALL_OW 141
// status = 5 ;
8240: LD_ADDR_VAR 0 12
8244: PUSH
8245: LD_INT 5
8247: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
8248: LD_VAR 0 12
8252: PUSH
8253: LD_INT 3
8255: EQUAL
8256: PUSH
8257: LD_VAR 0 16
8261: AND
8262: IFFALSE 8348
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
8264: LD_VAR 0 1
8268: PPUSH
8269: LD_VAR 0 16
8273: PUSH
8274: LD_INT 1
8276: ARRAY
8277: PPUSH
8278: LD_VAR 0 16
8282: PUSH
8283: LD_INT 2
8285: ARRAY
8286: PPUSH
8287: CALL_OW 111
// wait ( 0 0$1 ) ;
8291: LD_INT 35
8293: PPUSH
8294: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
8298: LD_VAR 0 1
8302: PPUSH
8303: LD_VAR 0 16
8307: PUSH
8308: LD_INT 1
8310: ARRAY
8311: PPUSH
8312: LD_VAR 0 16
8316: PUSH
8317: LD_INT 2
8319: ARRAY
8320: PPUSH
8321: CALL_OW 297
8325: PUSH
8326: LD_INT 4
8328: LESS
8329: IFFALSE 8264
// ComStop ( unit ) ;
8331: LD_VAR 0 1
8335: PPUSH
8336: CALL_OW 141
// status = 4 ;
8340: LD_ADDR_VAR 0 12
8344: PUSH
8345: LD_INT 4
8347: ST_TO_ADDR
// end ; if status = 4 then
8348: LD_VAR 0 12
8352: PUSH
8353: LD_INT 4
8355: EQUAL
8356: IFFALSE 8388
// begin repeat wait ( 0 0$1 ) ;
8358: LD_INT 35
8360: PPUSH
8361: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
8365: LD_VAR 0 1
8369: PPUSH
8370: CALL_OW 256
8374: PUSH
8375: LD_INT 1000
8377: EQUAL
8378: IFFALSE 8358
// status = 5 ;
8380: LD_ADDR_VAR 0 12
8384: PUSH
8385: LD_INT 5
8387: ST_TO_ADDR
// end ; if status = 5 then
8388: LD_VAR 0 12
8392: PUSH
8393: LD_INT 5
8395: EQUAL
8396: IFFALSE 8678
// begin p := 999 ;
8398: LD_ADDR_VAR 0 9
8402: PUSH
8403: LD_INT 999
8405: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
8406: LD_ADDR_VAR 0 14
8410: PUSH
8411: LD_VAR 0 11
8415: PUSH
8416: LD_INT 2
8418: ARRAY
8419: PUSH
8420: LD_INT 1
8422: ARRAY
8423: PUSH
8424: LD_VAR 0 11
8428: PUSH
8429: LD_INT 2
8431: ARRAY
8432: PUSH
8433: LD_INT 2
8435: ARRAY
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: ST_TO_ADDR
// c := 1 ;
8441: LD_ADDR_VAR 0 8
8445: PUSH
8446: LD_INT 1
8448: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8449: LD_ADDR_VAR 0 5
8453: PUSH
8454: DOUBLE
8455: LD_INT 1
8457: DEC
8458: ST_TO_ADDR
8459: LD_VAR 0 11
8463: PUSH
8464: LD_INT 2
8466: ARRAY
8467: PUSH
8468: LD_INT 2
8470: DIV
8471: PUSH
8472: FOR_TO
8473: IFFALSE 8605
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8475: LD_ADDR_VAR 0 6
8479: PUSH
8480: LD_VAR 0 1
8484: PPUSH
8485: LD_VAR 0 11
8489: PUSH
8490: LD_INT 2
8492: ARRAY
8493: PUSH
8494: LD_VAR 0 8
8498: ARRAY
8499: PPUSH
8500: LD_VAR 0 11
8504: PUSH
8505: LD_INT 2
8507: ARRAY
8508: PUSH
8509: LD_VAR 0 8
8513: PUSH
8514: LD_INT 1
8516: PLUS
8517: ARRAY
8518: PPUSH
8519: CALL_OW 297
8523: ST_TO_ADDR
// if x < p then
8524: LD_VAR 0 6
8528: PUSH
8529: LD_VAR 0 9
8533: LESS
8534: IFFALSE 8589
// begin p := x ;
8536: LD_ADDR_VAR 0 9
8540: PUSH
8541: LD_VAR 0 6
8545: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8546: LD_ADDR_VAR 0 14
8550: PUSH
8551: LD_VAR 0 11
8555: PUSH
8556: LD_INT 2
8558: ARRAY
8559: PUSH
8560: LD_VAR 0 8
8564: ARRAY
8565: PUSH
8566: LD_VAR 0 11
8570: PUSH
8571: LD_INT 2
8573: ARRAY
8574: PUSH
8575: LD_VAR 0 8
8579: PUSH
8580: LD_INT 1
8582: PLUS
8583: ARRAY
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: ST_TO_ADDR
// end ; c = c + 2 ;
8589: LD_ADDR_VAR 0 8
8593: PUSH
8594: LD_VAR 0 8
8598: PUSH
8599: LD_INT 2
8601: PLUS
8602: ST_TO_ADDR
// end ;
8603: GO 8472
8605: POP
8606: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8607: LD_VAR 0 1
8611: PPUSH
8612: LD_VAR 0 14
8616: PUSH
8617: LD_INT 1
8619: ARRAY
8620: PPUSH
8621: LD_VAR 0 14
8625: PUSH
8626: LD_INT 2
8628: ARRAY
8629: PPUSH
8630: CALL_OW 111
// wait ( 0 0$1 ) ;
8634: LD_INT 35
8636: PPUSH
8637: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8641: LD_VAR 0 1
8645: PPUSH
8646: LD_VAR 0 14
8650: PUSH
8651: LD_INT 1
8653: ARRAY
8654: PPUSH
8655: LD_VAR 0 14
8659: PUSH
8660: LD_INT 2
8662: ARRAY
8663: PPUSH
8664: CALL_OW 307
8668: IFFALSE 8607
// status = 1 ;
8670: LD_ADDR_VAR 0 12
8674: PUSH
8675: LD_INT 1
8677: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8678: LD_VAR 0 1
8682: PPUSH
8683: CALL_OW 301
8687: IFFALSE 7416
// end ;
8689: LD_VAR 0 4
8693: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8694: LD_INT 0
8696: PPUSH
8697: PPUSH
8698: PPUSH
8699: PPUSH
8700: PPUSH
8701: PPUSH
8702: PPUSH
8703: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8704: LD_VAR 0 1
8708: NOT
8709: PUSH
8710: LD_VAR 0 3
8714: NOT
8715: OR
8716: PUSH
8717: LD_VAR 0 4
8721: PUSH
8722: LD_INT 1
8724: PUSH
8725: LD_INT 2
8727: PUSH
8728: LD_INT 0
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: LIST
8735: IN
8736: NOT
8737: OR
8738: PUSH
8739: LD_VAR 0 6
8743: NOT
8744: OR
8745: PUSH
8746: LD_VAR 0 7
8750: NOT
8751: OR
8752: IFFALSE 8756
// exit ;
8754: GO 9147
// sex_id :=  ;
8756: LD_ADDR_VAR 0 14
8760: PUSH
8761: LD_STRING 
8763: ST_TO_ADDR
// case class of 1 :
8764: LD_VAR 0 5
8768: PUSH
8769: LD_INT 1
8771: DOUBLE
8772: EQUAL
8773: IFTRUE 8777
8775: GO 8788
8777: POP
// class_id := Sol ; 2 :
8778: LD_ADDR_VAR 0 15
8782: PUSH
8783: LD_STRING Sol
8785: ST_TO_ADDR
8786: GO 8846
8788: LD_INT 2
8790: DOUBLE
8791: EQUAL
8792: IFTRUE 8796
8794: GO 8807
8796: POP
// class_id := Eng ; 3 :
8797: LD_ADDR_VAR 0 15
8801: PUSH
8802: LD_STRING Eng
8804: ST_TO_ADDR
8805: GO 8846
8807: LD_INT 3
8809: DOUBLE
8810: EQUAL
8811: IFTRUE 8815
8813: GO 8826
8815: POP
// class_id := Mech ; 4 :
8816: LD_ADDR_VAR 0 15
8820: PUSH
8821: LD_STRING Mech
8823: ST_TO_ADDR
8824: GO 8846
8826: LD_INT 4
8828: DOUBLE
8829: EQUAL
8830: IFTRUE 8834
8832: GO 8845
8834: POP
// class_id := Sci ; end ;
8835: LD_ADDR_VAR 0 15
8839: PUSH
8840: LD_STRING Sci
8842: ST_TO_ADDR
8843: GO 8846
8845: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8846: LD_ADDR_VAR 0 11
8850: PUSH
8851: LD_VAR 0 1
8855: PPUSH
8856: LD_INT 25
8858: PUSH
8859: LD_VAR 0 5
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: PPUSH
8868: CALL_OW 72
8872: ST_TO_ADDR
// if tmp then
8873: LD_VAR 0 11
8877: IFFALSE 8889
// units := tmp ;
8879: LD_ADDR_VAR 0 1
8883: PUSH
8884: LD_VAR 0 11
8888: ST_TO_ADDR
// if sex then
8889: LD_VAR 0 4
8893: IFFALSE 8949
// begin if sex = sex_female then
8895: LD_VAR 0 4
8899: PUSH
8900: LD_INT 2
8902: EQUAL
8903: IFFALSE 8913
// sex_id := F ;
8905: LD_ADDR_VAR 0 14
8909: PUSH
8910: LD_STRING F
8912: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8913: LD_ADDR_VAR 0 1
8917: PUSH
8918: LD_VAR 0 1
8922: PPUSH
8923: LD_INT 26
8925: PUSH
8926: LD_VAR 0 4
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PPUSH
8935: CALL_OW 72
8939: ST_TO_ADDR
// if not units then
8940: LD_VAR 0 1
8944: NOT
8945: IFFALSE 8949
// exit ;
8947: GO 9147
// end ; unit_id := id ;
8949: LD_ADDR_VAR 0 12
8953: PUSH
8954: LD_VAR 0 6
8958: ST_TO_ADDR
// if unit_id > units then
8959: LD_VAR 0 12
8963: PUSH
8964: LD_VAR 0 1
8968: GREATER
8969: IFFALSE 8979
// unit_id := 1 ;
8971: LD_ADDR_VAR 0 12
8975: PUSH
8976: LD_INT 1
8978: ST_TO_ADDR
// if not units [ unit_id ] then
8979: LD_VAR 0 1
8983: PUSH
8984: LD_VAR 0 12
8988: ARRAY
8989: NOT
8990: IFFALSE 8994
// exit ;
8992: GO 9147
// unit := units [ unit_id ] ;
8994: LD_ADDR_VAR 0 10
8998: PUSH
8999: LD_VAR 0 1
9003: PUSH
9004: LD_VAR 0 12
9008: ARRAY
9009: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
9010: LD_ADDR_VAR 0 13
9014: PUSH
9015: LD_STRING D
9017: PUSH
9018: LD_VAR 0 3
9022: STR
9023: PUSH
9024: LD_STRING -
9026: STR
9027: PUSH
9028: LD_VAR 0 14
9032: STR
9033: PUSH
9034: LD_VAR 0 15
9038: STR
9039: PUSH
9040: LD_VAR 0 6
9044: STR
9045: PUSH
9046: LD_STRING -
9048: STR
9049: PUSH
9050: LD_VAR 0 7
9054: STR
9055: ST_TO_ADDR
// case type of 0 :
9056: LD_VAR 0 2
9060: PUSH
9061: LD_INT 0
9063: DOUBLE
9064: EQUAL
9065: IFTRUE 9069
9067: GO 9086
9069: POP
// Say ( unit , dialog_id ) ; 1 :
9070: LD_VAR 0 10
9074: PPUSH
9075: LD_VAR 0 13
9079: PPUSH
9080: CALL_OW 88
9084: GO 9137
9086: LD_INT 1
9088: DOUBLE
9089: EQUAL
9090: IFTRUE 9094
9092: GO 9111
9094: POP
// SayRadio ( unit , dialog_id ) ; 2 :
9095: LD_VAR 0 10
9099: PPUSH
9100: LD_VAR 0 13
9104: PPUSH
9105: CALL_OW 94
9109: GO 9137
9111: LD_INT 2
9113: DOUBLE
9114: EQUAL
9115: IFTRUE 9119
9117: GO 9136
9119: POP
// ForceSay ( unit , dialog_id ) ; end ;
9120: LD_VAR 0 10
9124: PPUSH
9125: LD_VAR 0 13
9129: PPUSH
9130: CALL_OW 91
9134: GO 9137
9136: POP
// result := unit ;
9137: LD_ADDR_VAR 0 8
9141: PUSH
9142: LD_VAR 0 10
9146: ST_TO_ADDR
// end ;
9147: LD_VAR 0 8
9151: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
9152: LD_INT 0
9154: PPUSH
9155: PPUSH
9156: PPUSH
9157: PPUSH
9158: PPUSH
9159: PPUSH
9160: PPUSH
// result := array ;
9161: LD_ADDR_VAR 0 5
9165: PUSH
9166: LD_VAR 0 1
9170: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
9171: LD_VAR 0 1
9175: NOT
9176: PUSH
9177: LD_VAR 0 2
9181: NOT
9182: OR
9183: PUSH
9184: LD_VAR 0 3
9188: NOT
9189: OR
9190: PUSH
9191: LD_VAR 0 2
9195: PUSH
9196: LD_VAR 0 1
9200: GREATER
9201: OR
9202: PUSH
9203: LD_VAR 0 3
9207: PUSH
9208: LD_VAR 0 1
9212: GREATER
9213: OR
9214: IFFALSE 9218
// exit ;
9216: GO 9514
// if direction then
9218: LD_VAR 0 4
9222: IFFALSE 9286
// begin d := 1 ;
9224: LD_ADDR_VAR 0 9
9228: PUSH
9229: LD_INT 1
9231: ST_TO_ADDR
// if i_from > i_to then
9232: LD_VAR 0 2
9236: PUSH
9237: LD_VAR 0 3
9241: GREATER
9242: IFFALSE 9268
// length := ( array - i_from ) + i_to else
9244: LD_ADDR_VAR 0 11
9248: PUSH
9249: LD_VAR 0 1
9253: PUSH
9254: LD_VAR 0 2
9258: MINUS
9259: PUSH
9260: LD_VAR 0 3
9264: PLUS
9265: ST_TO_ADDR
9266: GO 9284
// length := i_to - i_from ;
9268: LD_ADDR_VAR 0 11
9272: PUSH
9273: LD_VAR 0 3
9277: PUSH
9278: LD_VAR 0 2
9282: MINUS
9283: ST_TO_ADDR
// end else
9284: GO 9347
// begin d := - 1 ;
9286: LD_ADDR_VAR 0 9
9290: PUSH
9291: LD_INT 1
9293: NEG
9294: ST_TO_ADDR
// if i_from > i_to then
9295: LD_VAR 0 2
9299: PUSH
9300: LD_VAR 0 3
9304: GREATER
9305: IFFALSE 9325
// length := i_from - i_to else
9307: LD_ADDR_VAR 0 11
9311: PUSH
9312: LD_VAR 0 2
9316: PUSH
9317: LD_VAR 0 3
9321: MINUS
9322: ST_TO_ADDR
9323: GO 9347
// length := ( array - i_to ) + i_from ;
9325: LD_ADDR_VAR 0 11
9329: PUSH
9330: LD_VAR 0 1
9334: PUSH
9335: LD_VAR 0 3
9339: MINUS
9340: PUSH
9341: LD_VAR 0 2
9345: PLUS
9346: ST_TO_ADDR
// end ; if not length then
9347: LD_VAR 0 11
9351: NOT
9352: IFFALSE 9356
// exit ;
9354: GO 9514
// tmp := array ;
9356: LD_ADDR_VAR 0 10
9360: PUSH
9361: LD_VAR 0 1
9365: ST_TO_ADDR
// for i = 1 to length do
9366: LD_ADDR_VAR 0 6
9370: PUSH
9371: DOUBLE
9372: LD_INT 1
9374: DEC
9375: ST_TO_ADDR
9376: LD_VAR 0 11
9380: PUSH
9381: FOR_TO
9382: IFFALSE 9502
// begin for j = 1 to array do
9384: LD_ADDR_VAR 0 7
9388: PUSH
9389: DOUBLE
9390: LD_INT 1
9392: DEC
9393: ST_TO_ADDR
9394: LD_VAR 0 1
9398: PUSH
9399: FOR_TO
9400: IFFALSE 9488
// begin k := j + d ;
9402: LD_ADDR_VAR 0 8
9406: PUSH
9407: LD_VAR 0 7
9411: PUSH
9412: LD_VAR 0 9
9416: PLUS
9417: ST_TO_ADDR
// if k > array then
9418: LD_VAR 0 8
9422: PUSH
9423: LD_VAR 0 1
9427: GREATER
9428: IFFALSE 9438
// k := 1 ;
9430: LD_ADDR_VAR 0 8
9434: PUSH
9435: LD_INT 1
9437: ST_TO_ADDR
// if not k then
9438: LD_VAR 0 8
9442: NOT
9443: IFFALSE 9455
// k := array ;
9445: LD_ADDR_VAR 0 8
9449: PUSH
9450: LD_VAR 0 1
9454: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
9455: LD_ADDR_VAR 0 10
9459: PUSH
9460: LD_VAR 0 10
9464: PPUSH
9465: LD_VAR 0 8
9469: PPUSH
9470: LD_VAR 0 1
9474: PUSH
9475: LD_VAR 0 7
9479: ARRAY
9480: PPUSH
9481: CALL_OW 1
9485: ST_TO_ADDR
// end ;
9486: GO 9399
9488: POP
9489: POP
// array := tmp ;
9490: LD_ADDR_VAR 0 1
9494: PUSH
9495: LD_VAR 0 10
9499: ST_TO_ADDR
// end ;
9500: GO 9381
9502: POP
9503: POP
// result := array ;
9504: LD_ADDR_VAR 0 5
9508: PUSH
9509: LD_VAR 0 1
9513: ST_TO_ADDR
// end ;
9514: LD_VAR 0 5
9518: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
9519: LD_INT 0
9521: PPUSH
9522: PPUSH
9523: PPUSH
9524: PPUSH
9525: PPUSH
9526: PPUSH
9527: PPUSH
9528: PPUSH
9529: PPUSH
9530: PPUSH
9531: PPUSH
9532: PPUSH
9533: PPUSH
9534: PPUSH
9535: PPUSH
9536: PPUSH
9537: PPUSH
9538: PPUSH
9539: PPUSH
9540: PPUSH
9541: PPUSH
9542: PPUSH
9543: PPUSH
9544: PPUSH
9545: PPUSH
9546: PPUSH
9547: PPUSH
9548: PPUSH
9549: PPUSH
9550: PPUSH
9551: PPUSH
9552: PPUSH
9553: PPUSH
9554: PPUSH
9555: PPUSH
9556: PPUSH
9557: PPUSH
9558: PPUSH
9559: PPUSH
9560: PPUSH
9561: PPUSH
9562: PPUSH
9563: PPUSH
9564: PPUSH
9565: PPUSH
9566: PPUSH
9567: PPUSH
9568: PPUSH
9569: PPUSH
9570: PPUSH
9571: PPUSH
9572: PPUSH
9573: PPUSH
9574: PPUSH
9575: PPUSH
9576: PPUSH
9577: PPUSH
9578: PPUSH
// result = [ ] ;
9579: LD_ADDR_VAR 0 7
9583: PUSH
9584: EMPTY
9585: ST_TO_ADDR
// temp_list = [ ] ;
9586: LD_ADDR_VAR 0 9
9590: PUSH
9591: EMPTY
9592: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
9593: LD_VAR 0 4
9597: PUSH
9598: LD_INT 0
9600: PUSH
9601: LD_INT 1
9603: PUSH
9604: LD_INT 2
9606: PUSH
9607: LD_INT 3
9609: PUSH
9610: LD_INT 4
9612: PUSH
9613: LD_INT 5
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: IN
9624: NOT
9625: PUSH
9626: LD_VAR 0 1
9630: PUSH
9631: LD_INT 0
9633: PUSH
9634: LD_INT 1
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: IN
9641: PUSH
9642: LD_VAR 0 5
9646: PUSH
9647: LD_INT 1
9649: PUSH
9650: LD_INT 2
9652: PUSH
9653: LD_INT 3
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: LIST
9660: IN
9661: NOT
9662: AND
9663: OR
9664: IFFALSE 9668
// exit ;
9666: GO 28053
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
9668: LD_VAR 0 1
9672: PUSH
9673: LD_INT 6
9675: PUSH
9676: LD_INT 7
9678: PUSH
9679: LD_INT 8
9681: PUSH
9682: LD_INT 13
9684: PUSH
9685: LD_INT 12
9687: PUSH
9688: LD_INT 15
9690: PUSH
9691: LD_INT 11
9693: PUSH
9694: LD_INT 14
9696: PUSH
9697: LD_INT 10
9699: PUSH
9700: EMPTY
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: IN
9711: IFFALSE 9721
// btype = b_lab ;
9713: LD_ADDR_VAR 0 1
9717: PUSH
9718: LD_INT 6
9720: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
9721: LD_VAR 0 6
9725: PUSH
9726: LD_INT 0
9728: PUSH
9729: LD_INT 1
9731: PUSH
9732: LD_INT 2
9734: PUSH
9735: EMPTY
9736: LIST
9737: LIST
9738: LIST
9739: IN
9740: NOT
9741: PUSH
9742: LD_VAR 0 1
9746: PUSH
9747: LD_INT 0
9749: PUSH
9750: LD_INT 1
9752: PUSH
9753: LD_INT 2
9755: PUSH
9756: LD_INT 3
9758: PUSH
9759: LD_INT 6
9761: PUSH
9762: LD_INT 36
9764: PUSH
9765: LD_INT 4
9767: PUSH
9768: LD_INT 5
9770: PUSH
9771: LD_INT 31
9773: PUSH
9774: LD_INT 32
9776: PUSH
9777: LD_INT 33
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: IN
9793: NOT
9794: PUSH
9795: LD_VAR 0 6
9799: PUSH
9800: LD_INT 1
9802: EQUAL
9803: AND
9804: OR
9805: PUSH
9806: LD_VAR 0 1
9810: PUSH
9811: LD_INT 2
9813: PUSH
9814: LD_INT 3
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: IN
9821: NOT
9822: PUSH
9823: LD_VAR 0 6
9827: PUSH
9828: LD_INT 2
9830: EQUAL
9831: AND
9832: OR
9833: IFFALSE 9843
// mode = 0 ;
9835: LD_ADDR_VAR 0 6
9839: PUSH
9840: LD_INT 0
9842: ST_TO_ADDR
// case mode of 0 :
9843: LD_VAR 0 6
9847: PUSH
9848: LD_INT 0
9850: DOUBLE
9851: EQUAL
9852: IFTRUE 9856
9854: GO 21309
9856: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
9857: LD_ADDR_VAR 0 11
9861: PUSH
9862: LD_INT 0
9864: PUSH
9865: LD_INT 0
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PUSH
9872: LD_INT 0
9874: PUSH
9875: LD_INT 1
9877: NEG
9878: PUSH
9879: EMPTY
9880: LIST
9881: LIST
9882: PUSH
9883: LD_INT 1
9885: PUSH
9886: LD_INT 0
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PUSH
9893: LD_INT 1
9895: PUSH
9896: LD_INT 1
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PUSH
9903: LD_INT 0
9905: PUSH
9906: LD_INT 1
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: PUSH
9913: LD_INT 1
9915: NEG
9916: PUSH
9917: LD_INT 0
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 1
9926: NEG
9927: PUSH
9928: LD_INT 1
9930: NEG
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: PUSH
9936: LD_INT 1
9938: NEG
9939: PUSH
9940: LD_INT 2
9942: NEG
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PUSH
9948: LD_INT 0
9950: PUSH
9951: LD_INT 2
9953: NEG
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: LD_INT 1
9961: PUSH
9962: LD_INT 1
9964: NEG
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 1
9972: PUSH
9973: LD_INT 2
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 0
9982: PUSH
9983: LD_INT 2
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: PUSH
9990: LD_INT 1
9992: NEG
9993: PUSH
9994: LD_INT 1
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: PUSH
10001: LD_INT 1
10003: PUSH
10004: LD_INT 3
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PUSH
10011: LD_INT 0
10013: PUSH
10014: LD_INT 3
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: PUSH
10021: LD_INT 1
10023: NEG
10024: PUSH
10025: LD_INT 2
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: PUSH
10032: EMPTY
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
10050: LD_ADDR_VAR 0 12
10054: PUSH
10055: LD_INT 0
10057: PUSH
10058: LD_INT 0
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: LD_INT 0
10067: PUSH
10068: LD_INT 1
10070: NEG
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PUSH
10076: LD_INT 1
10078: PUSH
10079: LD_INT 0
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PUSH
10086: LD_INT 1
10088: PUSH
10089: LD_INT 1
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: LD_INT 0
10098: PUSH
10099: LD_INT 1
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 1
10108: NEG
10109: PUSH
10110: LD_INT 0
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: LD_INT 1
10119: NEG
10120: PUSH
10121: LD_INT 1
10123: NEG
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: PUSH
10129: LD_INT 1
10131: PUSH
10132: LD_INT 1
10134: NEG
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: LD_INT 2
10142: PUSH
10143: LD_INT 0
10145: PUSH
10146: EMPTY
10147: LIST
10148: LIST
10149: PUSH
10150: LD_INT 2
10152: PUSH
10153: LD_INT 1
10155: PUSH
10156: EMPTY
10157: LIST
10158: LIST
10159: PUSH
10160: LD_INT 1
10162: NEG
10163: PUSH
10164: LD_INT 1
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PUSH
10171: LD_INT 2
10173: NEG
10174: PUSH
10175: LD_INT 0
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PUSH
10182: LD_INT 2
10184: NEG
10185: PUSH
10186: LD_INT 1
10188: NEG
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PUSH
10194: LD_INT 2
10196: NEG
10197: PUSH
10198: LD_INT 1
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: PUSH
10205: LD_INT 3
10207: NEG
10208: PUSH
10209: LD_INT 0
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: PUSH
10216: LD_INT 3
10218: NEG
10219: PUSH
10220: LD_INT 1
10222: NEG
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
10246: LD_ADDR_VAR 0 13
10250: PUSH
10251: LD_INT 0
10253: PUSH
10254: LD_INT 0
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PUSH
10261: LD_INT 0
10263: PUSH
10264: LD_INT 1
10266: NEG
10267: PUSH
10268: EMPTY
10269: LIST
10270: LIST
10271: PUSH
10272: LD_INT 1
10274: PUSH
10275: LD_INT 0
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: PUSH
10282: LD_INT 1
10284: PUSH
10285: LD_INT 1
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 0
10294: PUSH
10295: LD_INT 1
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: LD_INT 1
10304: NEG
10305: PUSH
10306: LD_INT 0
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PUSH
10313: LD_INT 1
10315: NEG
10316: PUSH
10317: LD_INT 1
10319: NEG
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PUSH
10325: LD_INT 1
10327: NEG
10328: PUSH
10329: LD_INT 2
10331: NEG
10332: PUSH
10333: EMPTY
10334: LIST
10335: LIST
10336: PUSH
10337: LD_INT 2
10339: PUSH
10340: LD_INT 1
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: LD_INT 2
10349: PUSH
10350: LD_INT 2
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: PUSH
10357: LD_INT 1
10359: PUSH
10360: LD_INT 2
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 2
10369: NEG
10370: PUSH
10371: LD_INT 1
10373: NEG
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PUSH
10379: LD_INT 2
10381: NEG
10382: PUSH
10383: LD_INT 2
10385: NEG
10386: PUSH
10387: EMPTY
10388: LIST
10389: LIST
10390: PUSH
10391: LD_INT 2
10393: NEG
10394: PUSH
10395: LD_INT 3
10397: NEG
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: PUSH
10403: LD_INT 3
10405: NEG
10406: PUSH
10407: LD_INT 2
10409: NEG
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: PUSH
10415: LD_INT 3
10417: NEG
10418: PUSH
10419: LD_INT 3
10421: NEG
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
10445: LD_ADDR_VAR 0 14
10449: PUSH
10450: LD_INT 0
10452: PUSH
10453: LD_INT 0
10455: PUSH
10456: EMPTY
10457: LIST
10458: LIST
10459: PUSH
10460: LD_INT 0
10462: PUSH
10463: LD_INT 1
10465: NEG
10466: PUSH
10467: EMPTY
10468: LIST
10469: LIST
10470: PUSH
10471: LD_INT 1
10473: PUSH
10474: LD_INT 0
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: PUSH
10481: LD_INT 1
10483: PUSH
10484: LD_INT 1
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: PUSH
10491: LD_INT 0
10493: PUSH
10494: LD_INT 1
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PUSH
10501: LD_INT 1
10503: NEG
10504: PUSH
10505: LD_INT 0
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: PUSH
10512: LD_INT 1
10514: NEG
10515: PUSH
10516: LD_INT 1
10518: NEG
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PUSH
10524: LD_INT 1
10526: NEG
10527: PUSH
10528: LD_INT 2
10530: NEG
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 0
10538: PUSH
10539: LD_INT 2
10541: NEG
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: PUSH
10547: LD_INT 1
10549: PUSH
10550: LD_INT 1
10552: NEG
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PUSH
10558: LD_INT 1
10560: PUSH
10561: LD_INT 2
10563: PUSH
10564: EMPTY
10565: LIST
10566: LIST
10567: PUSH
10568: LD_INT 0
10570: PUSH
10571: LD_INT 2
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: LD_INT 1
10580: NEG
10581: PUSH
10582: LD_INT 1
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PUSH
10589: LD_INT 1
10591: NEG
10592: PUSH
10593: LD_INT 3
10595: NEG
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PUSH
10601: LD_INT 0
10603: PUSH
10604: LD_INT 3
10606: NEG
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PUSH
10612: LD_INT 1
10614: PUSH
10615: LD_INT 2
10617: NEG
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
10641: LD_ADDR_VAR 0 15
10645: PUSH
10646: LD_INT 0
10648: PUSH
10649: LD_INT 0
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: LD_INT 0
10658: PUSH
10659: LD_INT 1
10661: NEG
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: PUSH
10667: LD_INT 1
10669: PUSH
10670: LD_INT 0
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: PUSH
10677: LD_INT 1
10679: PUSH
10680: LD_INT 1
10682: PUSH
10683: EMPTY
10684: LIST
10685: LIST
10686: PUSH
10687: LD_INT 0
10689: PUSH
10690: LD_INT 1
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 1
10699: NEG
10700: PUSH
10701: LD_INT 0
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: PUSH
10708: LD_INT 1
10710: NEG
10711: PUSH
10712: LD_INT 1
10714: NEG
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 1
10722: PUSH
10723: LD_INT 1
10725: NEG
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PUSH
10731: LD_INT 2
10733: PUSH
10734: LD_INT 0
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: PUSH
10741: LD_INT 2
10743: PUSH
10744: LD_INT 1
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 1
10753: NEG
10754: PUSH
10755: LD_INT 1
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: PUSH
10762: LD_INT 2
10764: NEG
10765: PUSH
10766: LD_INT 0
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: LD_INT 2
10775: NEG
10776: PUSH
10777: LD_INT 1
10779: NEG
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: PUSH
10785: LD_INT 2
10787: PUSH
10788: LD_INT 1
10790: NEG
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PUSH
10796: LD_INT 3
10798: PUSH
10799: LD_INT 0
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PUSH
10806: LD_INT 3
10808: PUSH
10809: LD_INT 1
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
10834: LD_ADDR_VAR 0 16
10838: PUSH
10839: LD_INT 0
10841: PUSH
10842: LD_INT 0
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: LD_INT 0
10851: PUSH
10852: LD_INT 1
10854: NEG
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: PUSH
10860: LD_INT 1
10862: PUSH
10863: LD_INT 0
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_INT 1
10872: PUSH
10873: LD_INT 1
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PUSH
10880: LD_INT 0
10882: PUSH
10883: LD_INT 1
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PUSH
10890: LD_INT 1
10892: NEG
10893: PUSH
10894: LD_INT 0
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PUSH
10901: LD_INT 1
10903: NEG
10904: PUSH
10905: LD_INT 1
10907: NEG
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 1
10915: NEG
10916: PUSH
10917: LD_INT 2
10919: NEG
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PUSH
10925: LD_INT 2
10927: PUSH
10928: LD_INT 1
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 2
10937: PUSH
10938: LD_INT 2
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: PUSH
10945: LD_INT 1
10947: PUSH
10948: LD_INT 2
10950: PUSH
10951: EMPTY
10952: LIST
10953: LIST
10954: PUSH
10955: LD_INT 2
10957: NEG
10958: PUSH
10959: LD_INT 1
10961: NEG
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: PUSH
10967: LD_INT 2
10969: NEG
10970: PUSH
10971: LD_INT 2
10973: NEG
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PUSH
10979: LD_INT 3
10981: PUSH
10982: LD_INT 2
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 3
10991: PUSH
10992: LD_INT 3
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: LD_INT 2
11001: PUSH
11002: LD_INT 3
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11027: LD_ADDR_VAR 0 17
11031: PUSH
11032: LD_INT 0
11034: PUSH
11035: LD_INT 0
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: PUSH
11042: LD_INT 0
11044: PUSH
11045: LD_INT 1
11047: NEG
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: LD_INT 1
11055: PUSH
11056: LD_INT 0
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 1
11065: PUSH
11066: LD_INT 1
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: LD_INT 0
11075: PUSH
11076: LD_INT 1
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: PUSH
11083: LD_INT 1
11085: NEG
11086: PUSH
11087: LD_INT 0
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: PUSH
11094: LD_INT 1
11096: NEG
11097: PUSH
11098: LD_INT 1
11100: NEG
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 1
11108: NEG
11109: PUSH
11110: LD_INT 2
11112: NEG
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: PUSH
11118: LD_INT 0
11120: PUSH
11121: LD_INT 2
11123: NEG
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 1
11131: PUSH
11132: LD_INT 1
11134: NEG
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: LD_INT 2
11142: PUSH
11143: LD_INT 0
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 2
11152: PUSH
11153: LD_INT 1
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: LD_INT 2
11162: PUSH
11163: LD_INT 2
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: LD_INT 1
11172: PUSH
11173: LD_INT 2
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: PUSH
11180: LD_INT 0
11182: PUSH
11183: LD_INT 2
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: PUSH
11190: LD_INT 1
11192: NEG
11193: PUSH
11194: LD_INT 1
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: PUSH
11201: LD_INT 2
11203: NEG
11204: PUSH
11205: LD_INT 0
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: PUSH
11212: LD_INT 2
11214: NEG
11215: PUSH
11216: LD_INT 1
11218: NEG
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: PUSH
11224: LD_INT 2
11226: NEG
11227: PUSH
11228: LD_INT 2
11230: NEG
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11257: LD_ADDR_VAR 0 18
11261: PUSH
11262: LD_INT 0
11264: PUSH
11265: LD_INT 0
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PUSH
11272: LD_INT 0
11274: PUSH
11275: LD_INT 1
11277: NEG
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PUSH
11283: LD_INT 1
11285: PUSH
11286: LD_INT 0
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PUSH
11293: LD_INT 1
11295: PUSH
11296: LD_INT 1
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PUSH
11303: LD_INT 0
11305: PUSH
11306: LD_INT 1
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: LD_INT 1
11315: NEG
11316: PUSH
11317: LD_INT 0
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PUSH
11324: LD_INT 1
11326: NEG
11327: PUSH
11328: LD_INT 1
11330: NEG
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PUSH
11336: LD_INT 1
11338: NEG
11339: PUSH
11340: LD_INT 2
11342: NEG
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: LD_INT 0
11350: PUSH
11351: LD_INT 2
11353: NEG
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PUSH
11359: LD_INT 1
11361: PUSH
11362: LD_INT 1
11364: NEG
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PUSH
11370: LD_INT 2
11372: PUSH
11373: LD_INT 0
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PUSH
11380: LD_INT 2
11382: PUSH
11383: LD_INT 1
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PUSH
11390: LD_INT 2
11392: PUSH
11393: LD_INT 2
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: LD_INT 1
11402: PUSH
11403: LD_INT 2
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: PUSH
11410: LD_INT 0
11412: PUSH
11413: LD_INT 2
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PUSH
11420: LD_INT 1
11422: NEG
11423: PUSH
11424: LD_INT 1
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: PUSH
11431: LD_INT 2
11433: NEG
11434: PUSH
11435: LD_INT 0
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PUSH
11442: LD_INT 2
11444: NEG
11445: PUSH
11446: LD_INT 1
11448: NEG
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: PUSH
11454: LD_INT 2
11456: NEG
11457: PUSH
11458: LD_INT 2
11460: NEG
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11487: LD_ADDR_VAR 0 19
11491: PUSH
11492: LD_INT 0
11494: PUSH
11495: LD_INT 0
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PUSH
11502: LD_INT 0
11504: PUSH
11505: LD_INT 1
11507: NEG
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 1
11515: PUSH
11516: LD_INT 0
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 1
11525: PUSH
11526: LD_INT 1
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: PUSH
11533: LD_INT 0
11535: PUSH
11536: LD_INT 1
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 1
11545: NEG
11546: PUSH
11547: LD_INT 0
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PUSH
11554: LD_INT 1
11556: NEG
11557: PUSH
11558: LD_INT 1
11560: NEG
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PUSH
11566: LD_INT 1
11568: NEG
11569: PUSH
11570: LD_INT 2
11572: NEG
11573: PUSH
11574: EMPTY
11575: LIST
11576: LIST
11577: PUSH
11578: LD_INT 0
11580: PUSH
11581: LD_INT 2
11583: NEG
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: PUSH
11589: LD_INT 1
11591: PUSH
11592: LD_INT 1
11594: NEG
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: PUSH
11600: LD_INT 2
11602: PUSH
11603: LD_INT 0
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 2
11612: PUSH
11613: LD_INT 1
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 2
11622: PUSH
11623: LD_INT 2
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: LD_INT 1
11632: PUSH
11633: LD_INT 2
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 0
11642: PUSH
11643: LD_INT 2
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 1
11652: NEG
11653: PUSH
11654: LD_INT 1
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 2
11663: NEG
11664: PUSH
11665: LD_INT 0
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: PUSH
11672: LD_INT 2
11674: NEG
11675: PUSH
11676: LD_INT 1
11678: NEG
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: LD_INT 2
11686: NEG
11687: PUSH
11688: LD_INT 2
11690: NEG
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: PUSH
11696: EMPTY
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11717: LD_ADDR_VAR 0 20
11721: PUSH
11722: LD_INT 0
11724: PUSH
11725: LD_INT 0
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: PUSH
11732: LD_INT 0
11734: PUSH
11735: LD_INT 1
11737: NEG
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PUSH
11743: LD_INT 1
11745: PUSH
11746: LD_INT 0
11748: PUSH
11749: EMPTY
11750: LIST
11751: LIST
11752: PUSH
11753: LD_INT 1
11755: PUSH
11756: LD_INT 1
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PUSH
11763: LD_INT 0
11765: PUSH
11766: LD_INT 1
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PUSH
11773: LD_INT 1
11775: NEG
11776: PUSH
11777: LD_INT 0
11779: PUSH
11780: EMPTY
11781: LIST
11782: LIST
11783: PUSH
11784: LD_INT 1
11786: NEG
11787: PUSH
11788: LD_INT 1
11790: NEG
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: LD_INT 1
11798: NEG
11799: PUSH
11800: LD_INT 2
11802: NEG
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: PUSH
11808: LD_INT 0
11810: PUSH
11811: LD_INT 2
11813: NEG
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PUSH
11819: LD_INT 1
11821: PUSH
11822: LD_INT 1
11824: NEG
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: PUSH
11830: LD_INT 2
11832: PUSH
11833: LD_INT 0
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PUSH
11840: LD_INT 2
11842: PUSH
11843: LD_INT 1
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PUSH
11850: LD_INT 2
11852: PUSH
11853: LD_INT 2
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: LD_INT 1
11862: PUSH
11863: LD_INT 2
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PUSH
11870: LD_INT 0
11872: PUSH
11873: LD_INT 2
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PUSH
11880: LD_INT 1
11882: NEG
11883: PUSH
11884: LD_INT 1
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: LD_INT 2
11893: NEG
11894: PUSH
11895: LD_INT 0
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PUSH
11902: LD_INT 2
11904: NEG
11905: PUSH
11906: LD_INT 1
11908: NEG
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PUSH
11914: LD_INT 2
11916: NEG
11917: PUSH
11918: LD_INT 2
11920: NEG
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
11947: LD_ADDR_VAR 0 21
11951: PUSH
11952: LD_INT 0
11954: PUSH
11955: LD_INT 0
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 0
11964: PUSH
11965: LD_INT 1
11967: NEG
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 1
11975: PUSH
11976: LD_INT 0
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: PUSH
11983: LD_INT 1
11985: PUSH
11986: LD_INT 1
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: PUSH
11993: LD_INT 0
11995: PUSH
11996: LD_INT 1
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: LD_INT 1
12005: NEG
12006: PUSH
12007: LD_INT 0
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 1
12016: NEG
12017: PUSH
12018: LD_INT 1
12020: NEG
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: LD_INT 1
12028: NEG
12029: PUSH
12030: LD_INT 2
12032: NEG
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PUSH
12038: LD_INT 0
12040: PUSH
12041: LD_INT 2
12043: NEG
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: LD_INT 1
12051: PUSH
12052: LD_INT 1
12054: NEG
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: LD_INT 2
12062: PUSH
12063: LD_INT 0
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: PUSH
12070: LD_INT 2
12072: PUSH
12073: LD_INT 1
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PUSH
12080: LD_INT 2
12082: PUSH
12083: LD_INT 2
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: PUSH
12090: LD_INT 1
12092: PUSH
12093: LD_INT 2
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 0
12102: PUSH
12103: LD_INT 2
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 1
12112: NEG
12113: PUSH
12114: LD_INT 1
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 2
12123: NEG
12124: PUSH
12125: LD_INT 0
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 2
12134: NEG
12135: PUSH
12136: LD_INT 1
12138: NEG
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: PUSH
12144: LD_INT 2
12146: NEG
12147: PUSH
12148: LD_INT 2
12150: NEG
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
12177: LD_ADDR_VAR 0 22
12181: PUSH
12182: LD_INT 0
12184: PUSH
12185: LD_INT 0
12187: PUSH
12188: EMPTY
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 0
12194: PUSH
12195: LD_INT 1
12197: NEG
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: LD_INT 0
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PUSH
12213: LD_INT 1
12215: PUSH
12216: LD_INT 1
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: PUSH
12223: LD_INT 0
12225: PUSH
12226: LD_INT 1
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 1
12235: NEG
12236: PUSH
12237: LD_INT 0
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 1
12246: NEG
12247: PUSH
12248: LD_INT 1
12250: NEG
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: PUSH
12256: LD_INT 1
12258: NEG
12259: PUSH
12260: LD_INT 2
12262: NEG
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 0
12270: PUSH
12271: LD_INT 2
12273: NEG
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: PUSH
12279: LD_INT 1
12281: PUSH
12282: LD_INT 1
12284: NEG
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: LD_INT 2
12292: PUSH
12293: LD_INT 0
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 2
12302: PUSH
12303: LD_INT 1
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 2
12312: PUSH
12313: LD_INT 2
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PUSH
12320: LD_INT 1
12322: PUSH
12323: LD_INT 2
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PUSH
12330: LD_INT 0
12332: PUSH
12333: LD_INT 2
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: PUSH
12340: LD_INT 1
12342: NEG
12343: PUSH
12344: LD_INT 1
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 2
12353: NEG
12354: PUSH
12355: LD_INT 0
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: PUSH
12362: LD_INT 2
12364: NEG
12365: PUSH
12366: LD_INT 1
12368: NEG
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: PUSH
12374: LD_INT 2
12376: NEG
12377: PUSH
12378: LD_INT 2
12380: NEG
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: EMPTY
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
12407: LD_ADDR_VAR 0 23
12411: PUSH
12412: LD_INT 0
12414: PUSH
12415: LD_INT 0
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: PUSH
12422: LD_INT 0
12424: PUSH
12425: LD_INT 1
12427: NEG
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: PUSH
12433: LD_INT 1
12435: PUSH
12436: LD_INT 0
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: PUSH
12443: LD_INT 1
12445: PUSH
12446: LD_INT 1
12448: PUSH
12449: EMPTY
12450: LIST
12451: LIST
12452: PUSH
12453: LD_INT 0
12455: PUSH
12456: LD_INT 1
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PUSH
12463: LD_INT 1
12465: NEG
12466: PUSH
12467: LD_INT 0
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PUSH
12474: LD_INT 1
12476: NEG
12477: PUSH
12478: LD_INT 1
12480: NEG
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PUSH
12486: LD_INT 1
12488: NEG
12489: PUSH
12490: LD_INT 2
12492: NEG
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 0
12500: PUSH
12501: LD_INT 2
12503: NEG
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PUSH
12509: LD_INT 1
12511: PUSH
12512: LD_INT 1
12514: NEG
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PUSH
12520: LD_INT 2
12522: PUSH
12523: LD_INT 0
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 2
12532: PUSH
12533: LD_INT 1
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: PUSH
12540: LD_INT 2
12542: PUSH
12543: LD_INT 2
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: PUSH
12550: LD_INT 1
12552: PUSH
12553: LD_INT 2
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 0
12562: PUSH
12563: LD_INT 2
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 1
12572: NEG
12573: PUSH
12574: LD_INT 1
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: PUSH
12581: LD_INT 2
12583: NEG
12584: PUSH
12585: LD_INT 0
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: PUSH
12592: LD_INT 2
12594: NEG
12595: PUSH
12596: LD_INT 1
12598: NEG
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: PUSH
12604: LD_INT 2
12606: NEG
12607: PUSH
12608: LD_INT 2
12610: NEG
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: LD_INT 2
12618: NEG
12619: PUSH
12620: LD_INT 3
12622: NEG
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: PUSH
12628: LD_INT 1
12630: NEG
12631: PUSH
12632: LD_INT 3
12634: NEG
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: LD_INT 1
12642: PUSH
12643: LD_INT 2
12645: NEG
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PUSH
12651: LD_INT 2
12653: PUSH
12654: LD_INT 1
12656: NEG
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
12687: LD_ADDR_VAR 0 24
12691: PUSH
12692: LD_INT 0
12694: PUSH
12695: LD_INT 0
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: LD_INT 0
12704: PUSH
12705: LD_INT 1
12707: NEG
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: PUSH
12713: LD_INT 1
12715: PUSH
12716: LD_INT 0
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: PUSH
12723: LD_INT 1
12725: PUSH
12726: LD_INT 1
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PUSH
12733: LD_INT 0
12735: PUSH
12736: LD_INT 1
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PUSH
12743: LD_INT 1
12745: NEG
12746: PUSH
12747: LD_INT 0
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: LD_INT 1
12756: NEG
12757: PUSH
12758: LD_INT 1
12760: NEG
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: PUSH
12766: LD_INT 1
12768: NEG
12769: PUSH
12770: LD_INT 2
12772: NEG
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: PUSH
12778: LD_INT 0
12780: PUSH
12781: LD_INT 2
12783: NEG
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: PUSH
12789: LD_INT 1
12791: PUSH
12792: LD_INT 1
12794: NEG
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: PUSH
12800: LD_INT 2
12802: PUSH
12803: LD_INT 0
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: PUSH
12810: LD_INT 2
12812: PUSH
12813: LD_INT 1
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: PUSH
12820: LD_INT 2
12822: PUSH
12823: LD_INT 2
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PUSH
12830: LD_INT 1
12832: PUSH
12833: LD_INT 2
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PUSH
12840: LD_INT 0
12842: PUSH
12843: LD_INT 2
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PUSH
12850: LD_INT 1
12852: NEG
12853: PUSH
12854: LD_INT 1
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: PUSH
12861: LD_INT 2
12863: NEG
12864: PUSH
12865: LD_INT 0
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PUSH
12872: LD_INT 2
12874: NEG
12875: PUSH
12876: LD_INT 1
12878: NEG
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: PUSH
12884: LD_INT 2
12886: NEG
12887: PUSH
12888: LD_INT 2
12890: NEG
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 1
12898: PUSH
12899: LD_INT 2
12901: NEG
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PUSH
12907: LD_INT 2
12909: PUSH
12910: LD_INT 1
12912: NEG
12913: PUSH
12914: EMPTY
12915: LIST
12916: LIST
12917: PUSH
12918: LD_INT 3
12920: PUSH
12921: LD_INT 1
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PUSH
12928: LD_INT 3
12930: PUSH
12931: LD_INT 2
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
12963: LD_ADDR_VAR 0 25
12967: PUSH
12968: LD_INT 0
12970: PUSH
12971: LD_INT 0
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: PUSH
12978: LD_INT 0
12980: PUSH
12981: LD_INT 1
12983: NEG
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: PUSH
12989: LD_INT 1
12991: PUSH
12992: LD_INT 0
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PUSH
12999: LD_INT 1
13001: PUSH
13002: LD_INT 1
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: PUSH
13009: LD_INT 0
13011: PUSH
13012: LD_INT 1
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PUSH
13019: LD_INT 1
13021: NEG
13022: PUSH
13023: LD_INT 0
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: LD_INT 1
13032: NEG
13033: PUSH
13034: LD_INT 1
13036: NEG
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: LD_INT 1
13044: NEG
13045: PUSH
13046: LD_INT 2
13048: NEG
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: PUSH
13054: LD_INT 0
13056: PUSH
13057: LD_INT 2
13059: NEG
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PUSH
13065: LD_INT 1
13067: PUSH
13068: LD_INT 1
13070: NEG
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: PUSH
13076: LD_INT 2
13078: PUSH
13079: LD_INT 0
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: PUSH
13086: LD_INT 2
13088: PUSH
13089: LD_INT 1
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: PUSH
13096: LD_INT 2
13098: PUSH
13099: LD_INT 2
13101: PUSH
13102: EMPTY
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 1
13108: PUSH
13109: LD_INT 2
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PUSH
13116: LD_INT 0
13118: PUSH
13119: LD_INT 2
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: PUSH
13126: LD_INT 1
13128: NEG
13129: PUSH
13130: LD_INT 1
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 2
13139: NEG
13140: PUSH
13141: LD_INT 0
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: LD_INT 2
13150: NEG
13151: PUSH
13152: LD_INT 1
13154: NEG
13155: PUSH
13156: EMPTY
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 2
13162: NEG
13163: PUSH
13164: LD_INT 2
13166: NEG
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: PUSH
13172: LD_INT 3
13174: PUSH
13175: LD_INT 1
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: PUSH
13182: LD_INT 3
13184: PUSH
13185: LD_INT 2
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PUSH
13192: LD_INT 2
13194: PUSH
13195: LD_INT 3
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: PUSH
13202: LD_INT 1
13204: PUSH
13205: LD_INT 3
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
13237: LD_ADDR_VAR 0 26
13241: PUSH
13242: LD_INT 0
13244: PUSH
13245: LD_INT 0
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PUSH
13252: LD_INT 0
13254: PUSH
13255: LD_INT 1
13257: NEG
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: LD_INT 1
13265: PUSH
13266: LD_INT 0
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PUSH
13273: LD_INT 1
13275: PUSH
13276: LD_INT 1
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: PUSH
13283: LD_INT 0
13285: PUSH
13286: LD_INT 1
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: PUSH
13293: LD_INT 1
13295: NEG
13296: PUSH
13297: LD_INT 0
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PUSH
13304: LD_INT 1
13306: NEG
13307: PUSH
13308: LD_INT 1
13310: NEG
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PUSH
13316: LD_INT 1
13318: NEG
13319: PUSH
13320: LD_INT 2
13322: NEG
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: LD_INT 0
13330: PUSH
13331: LD_INT 2
13333: NEG
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PUSH
13339: LD_INT 1
13341: PUSH
13342: LD_INT 1
13344: NEG
13345: PUSH
13346: EMPTY
13347: LIST
13348: LIST
13349: PUSH
13350: LD_INT 2
13352: PUSH
13353: LD_INT 0
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: PUSH
13360: LD_INT 2
13362: PUSH
13363: LD_INT 1
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PUSH
13370: LD_INT 2
13372: PUSH
13373: LD_INT 2
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: LD_INT 1
13382: PUSH
13383: LD_INT 2
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PUSH
13390: LD_INT 0
13392: PUSH
13393: LD_INT 2
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: LD_INT 1
13402: NEG
13403: PUSH
13404: LD_INT 1
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 2
13413: NEG
13414: PUSH
13415: LD_INT 0
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 2
13424: NEG
13425: PUSH
13426: LD_INT 1
13428: NEG
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 2
13436: NEG
13437: PUSH
13438: LD_INT 2
13440: NEG
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 2
13448: PUSH
13449: LD_INT 3
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 1
13458: PUSH
13459: LD_INT 3
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 1
13468: NEG
13469: PUSH
13470: LD_INT 2
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PUSH
13477: LD_INT 2
13479: NEG
13480: PUSH
13481: LD_INT 1
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: EMPTY
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13513: LD_ADDR_VAR 0 27
13517: PUSH
13518: LD_INT 0
13520: PUSH
13521: LD_INT 0
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 0
13530: PUSH
13531: LD_INT 1
13533: NEG
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PUSH
13539: LD_INT 1
13541: PUSH
13542: LD_INT 0
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: PUSH
13549: LD_INT 1
13551: PUSH
13552: LD_INT 1
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: PUSH
13559: LD_INT 0
13561: PUSH
13562: LD_INT 1
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PUSH
13569: LD_INT 1
13571: NEG
13572: PUSH
13573: LD_INT 0
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 1
13582: NEG
13583: PUSH
13584: LD_INT 1
13586: NEG
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 1
13594: NEG
13595: PUSH
13596: LD_INT 2
13598: NEG
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: LD_INT 0
13606: PUSH
13607: LD_INT 2
13609: NEG
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: PUSH
13615: LD_INT 1
13617: PUSH
13618: LD_INT 1
13620: NEG
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 2
13628: PUSH
13629: LD_INT 0
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: LD_INT 2
13638: PUSH
13639: LD_INT 1
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PUSH
13646: LD_INT 2
13648: PUSH
13649: LD_INT 2
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: PUSH
13656: LD_INT 1
13658: PUSH
13659: LD_INT 2
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PUSH
13666: LD_INT 0
13668: PUSH
13669: LD_INT 2
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: LD_INT 1
13678: NEG
13679: PUSH
13680: LD_INT 1
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: LD_INT 2
13689: NEG
13690: PUSH
13691: LD_INT 0
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: LD_INT 2
13700: NEG
13701: PUSH
13702: LD_INT 1
13704: NEG
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: LD_INT 2
13712: NEG
13713: PUSH
13714: LD_INT 2
13716: NEG
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 1
13724: NEG
13725: PUSH
13726: LD_INT 2
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PUSH
13733: LD_INT 2
13735: NEG
13736: PUSH
13737: LD_INT 1
13739: PUSH
13740: EMPTY
13741: LIST
13742: LIST
13743: PUSH
13744: LD_INT 3
13746: NEG
13747: PUSH
13748: LD_INT 1
13750: NEG
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: PUSH
13756: LD_INT 3
13758: NEG
13759: PUSH
13760: LD_INT 2
13762: NEG
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
13793: LD_ADDR_VAR 0 28
13797: PUSH
13798: LD_INT 0
13800: PUSH
13801: LD_INT 0
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PUSH
13808: LD_INT 0
13810: PUSH
13811: LD_INT 1
13813: NEG
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: PUSH
13819: LD_INT 1
13821: PUSH
13822: LD_INT 0
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PUSH
13829: LD_INT 1
13831: PUSH
13832: LD_INT 1
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PUSH
13839: LD_INT 0
13841: PUSH
13842: LD_INT 1
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 1
13851: NEG
13852: PUSH
13853: LD_INT 0
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PUSH
13860: LD_INT 1
13862: NEG
13863: PUSH
13864: LD_INT 1
13866: NEG
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PUSH
13872: LD_INT 1
13874: NEG
13875: PUSH
13876: LD_INT 2
13878: NEG
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: PUSH
13884: LD_INT 0
13886: PUSH
13887: LD_INT 2
13889: NEG
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 1
13897: PUSH
13898: LD_INT 1
13900: NEG
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PUSH
13906: LD_INT 2
13908: PUSH
13909: LD_INT 0
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PUSH
13916: LD_INT 2
13918: PUSH
13919: LD_INT 1
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: LD_INT 2
13928: PUSH
13929: LD_INT 2
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PUSH
13936: LD_INT 1
13938: PUSH
13939: LD_INT 2
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PUSH
13946: LD_INT 0
13948: PUSH
13949: LD_INT 2
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: PUSH
13956: LD_INT 1
13958: NEG
13959: PUSH
13960: LD_INT 1
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PUSH
13967: LD_INT 2
13969: NEG
13970: PUSH
13971: LD_INT 0
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PUSH
13978: LD_INT 2
13980: NEG
13981: PUSH
13982: LD_INT 1
13984: NEG
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PUSH
13990: LD_INT 2
13992: NEG
13993: PUSH
13994: LD_INT 2
13996: NEG
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PUSH
14002: LD_INT 2
14004: NEG
14005: PUSH
14006: LD_INT 3
14008: NEG
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: PUSH
14014: LD_INT 1
14016: NEG
14017: PUSH
14018: LD_INT 3
14020: NEG
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PUSH
14026: LD_INT 3
14028: NEG
14029: PUSH
14030: LD_INT 1
14032: NEG
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: PUSH
14038: LD_INT 3
14040: NEG
14041: PUSH
14042: LD_INT 2
14044: NEG
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14075: LD_ADDR_VAR 0 29
14079: PUSH
14080: LD_INT 0
14082: PUSH
14083: LD_INT 0
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 0
14092: PUSH
14093: LD_INT 1
14095: NEG
14096: PUSH
14097: EMPTY
14098: LIST
14099: LIST
14100: PUSH
14101: LD_INT 1
14103: PUSH
14104: LD_INT 0
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 1
14113: PUSH
14114: LD_INT 1
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: LD_INT 0
14123: PUSH
14124: LD_INT 1
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: PUSH
14131: LD_INT 1
14133: NEG
14134: PUSH
14135: LD_INT 0
14137: PUSH
14138: EMPTY
14139: LIST
14140: LIST
14141: PUSH
14142: LD_INT 1
14144: NEG
14145: PUSH
14146: LD_INT 1
14148: NEG
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 1
14156: NEG
14157: PUSH
14158: LD_INT 2
14160: NEG
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: LD_INT 0
14168: PUSH
14169: LD_INT 2
14171: NEG
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: PUSH
14177: LD_INT 1
14179: PUSH
14180: LD_INT 1
14182: NEG
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PUSH
14188: LD_INT 2
14190: PUSH
14191: LD_INT 0
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: LD_INT 2
14200: PUSH
14201: LD_INT 1
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: LD_INT 1
14210: PUSH
14211: LD_INT 2
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PUSH
14218: LD_INT 0
14220: PUSH
14221: LD_INT 2
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PUSH
14228: LD_INT 1
14230: NEG
14231: PUSH
14232: LD_INT 1
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PUSH
14239: LD_INT 2
14241: NEG
14242: PUSH
14243: LD_INT 1
14245: NEG
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: PUSH
14251: LD_INT 2
14253: NEG
14254: PUSH
14255: LD_INT 2
14257: NEG
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PUSH
14263: LD_INT 2
14265: NEG
14266: PUSH
14267: LD_INT 3
14269: NEG
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: LD_INT 2
14277: PUSH
14278: LD_INT 1
14280: NEG
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 3
14288: PUSH
14289: LD_INT 1
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 1
14298: PUSH
14299: LD_INT 3
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: LD_INT 1
14308: NEG
14309: PUSH
14310: LD_INT 2
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PUSH
14317: LD_INT 3
14319: NEG
14320: PUSH
14321: LD_INT 2
14323: NEG
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14354: LD_ADDR_VAR 0 30
14358: PUSH
14359: LD_INT 0
14361: PUSH
14362: LD_INT 0
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: PUSH
14369: LD_INT 0
14371: PUSH
14372: LD_INT 1
14374: NEG
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: LD_INT 1
14382: PUSH
14383: LD_INT 0
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: LD_INT 1
14392: PUSH
14393: LD_INT 1
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: PUSH
14400: LD_INT 0
14402: PUSH
14403: LD_INT 1
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: LD_INT 1
14412: NEG
14413: PUSH
14414: LD_INT 0
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PUSH
14421: LD_INT 1
14423: NEG
14424: PUSH
14425: LD_INT 1
14427: NEG
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: LD_INT 1
14435: NEG
14436: PUSH
14437: LD_INT 2
14439: NEG
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: LD_INT 0
14447: PUSH
14448: LD_INT 2
14450: NEG
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PUSH
14456: LD_INT 1
14458: PUSH
14459: LD_INT 1
14461: NEG
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PUSH
14467: LD_INT 2
14469: PUSH
14470: LD_INT 0
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PUSH
14477: LD_INT 2
14479: PUSH
14480: LD_INT 1
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: PUSH
14487: LD_INT 2
14489: PUSH
14490: LD_INT 2
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: PUSH
14497: LD_INT 1
14499: PUSH
14500: LD_INT 2
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PUSH
14507: LD_INT 1
14509: NEG
14510: PUSH
14511: LD_INT 1
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 2
14520: NEG
14521: PUSH
14522: LD_INT 0
14524: PUSH
14525: EMPTY
14526: LIST
14527: LIST
14528: PUSH
14529: LD_INT 2
14531: NEG
14532: PUSH
14533: LD_INT 1
14535: NEG
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: LD_INT 1
14543: NEG
14544: PUSH
14545: LD_INT 3
14547: NEG
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: PUSH
14553: LD_INT 1
14555: PUSH
14556: LD_INT 2
14558: NEG
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: PUSH
14564: LD_INT 3
14566: PUSH
14567: LD_INT 2
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: PUSH
14574: LD_INT 2
14576: PUSH
14577: LD_INT 3
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: PUSH
14584: LD_INT 2
14586: NEG
14587: PUSH
14588: LD_INT 1
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PUSH
14595: LD_INT 3
14597: NEG
14598: PUSH
14599: LD_INT 1
14601: NEG
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: LIST
14616: LIST
14617: LIST
14618: LIST
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
14632: LD_ADDR_VAR 0 31
14636: PUSH
14637: LD_INT 0
14639: PUSH
14640: LD_INT 0
14642: PUSH
14643: EMPTY
14644: LIST
14645: LIST
14646: PUSH
14647: LD_INT 0
14649: PUSH
14650: LD_INT 1
14652: NEG
14653: PUSH
14654: EMPTY
14655: LIST
14656: LIST
14657: PUSH
14658: LD_INT 1
14660: PUSH
14661: LD_INT 0
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: LD_INT 1
14670: PUSH
14671: LD_INT 1
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: PUSH
14678: LD_INT 0
14680: PUSH
14681: LD_INT 1
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PUSH
14688: LD_INT 1
14690: NEG
14691: PUSH
14692: LD_INT 0
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PUSH
14699: LD_INT 1
14701: NEG
14702: PUSH
14703: LD_INT 1
14705: NEG
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: LD_INT 1
14713: NEG
14714: PUSH
14715: LD_INT 2
14717: NEG
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PUSH
14723: LD_INT 1
14725: PUSH
14726: LD_INT 1
14728: NEG
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PUSH
14734: LD_INT 2
14736: PUSH
14737: LD_INT 0
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PUSH
14744: LD_INT 2
14746: PUSH
14747: LD_INT 1
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PUSH
14754: LD_INT 2
14756: PUSH
14757: LD_INT 2
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: LD_INT 1
14766: PUSH
14767: LD_INT 2
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 0
14776: PUSH
14777: LD_INT 2
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: LD_INT 1
14786: NEG
14787: PUSH
14788: LD_INT 1
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: PUSH
14795: LD_INT 2
14797: NEG
14798: PUSH
14799: LD_INT 1
14801: NEG
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: LD_INT 2
14809: NEG
14810: PUSH
14811: LD_INT 2
14813: NEG
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PUSH
14819: LD_INT 2
14821: NEG
14822: PUSH
14823: LD_INT 3
14825: NEG
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: LD_INT 2
14833: PUSH
14834: LD_INT 1
14836: NEG
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PUSH
14842: LD_INT 3
14844: PUSH
14845: LD_INT 1
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: PUSH
14852: LD_INT 1
14854: PUSH
14855: LD_INT 3
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: PUSH
14862: LD_INT 1
14864: NEG
14865: PUSH
14866: LD_INT 2
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PUSH
14873: LD_INT 3
14875: NEG
14876: PUSH
14877: LD_INT 2
14879: NEG
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
14910: LD_ADDR_VAR 0 32
14914: PUSH
14915: LD_INT 0
14917: PUSH
14918: LD_INT 0
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PUSH
14925: LD_INT 0
14927: PUSH
14928: LD_INT 1
14930: NEG
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PUSH
14936: LD_INT 1
14938: PUSH
14939: LD_INT 0
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: LD_INT 1
14948: PUSH
14949: LD_INT 1
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PUSH
14956: LD_INT 0
14958: PUSH
14959: LD_INT 1
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PUSH
14966: LD_INT 1
14968: NEG
14969: PUSH
14970: LD_INT 0
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 1
14979: NEG
14980: PUSH
14981: LD_INT 1
14983: NEG
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PUSH
14989: LD_INT 1
14991: NEG
14992: PUSH
14993: LD_INT 2
14995: NEG
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 0
15003: PUSH
15004: LD_INT 2
15006: NEG
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: LD_INT 1
15014: PUSH
15015: LD_INT 1
15017: NEG
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PUSH
15023: LD_INT 2
15025: PUSH
15026: LD_INT 1
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: PUSH
15033: LD_INT 2
15035: PUSH
15036: LD_INT 2
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 1
15045: PUSH
15046: LD_INT 2
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: LD_INT 0
15055: PUSH
15056: LD_INT 2
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 1
15065: NEG
15066: PUSH
15067: LD_INT 1
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: LD_INT 2
15076: NEG
15077: PUSH
15078: LD_INT 0
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: PUSH
15085: LD_INT 2
15087: NEG
15088: PUSH
15089: LD_INT 1
15091: NEG
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 1
15099: NEG
15100: PUSH
15101: LD_INT 3
15103: NEG
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PUSH
15109: LD_INT 1
15111: PUSH
15112: LD_INT 2
15114: NEG
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PUSH
15120: LD_INT 3
15122: PUSH
15123: LD_INT 2
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: LD_INT 2
15132: PUSH
15133: LD_INT 3
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: PUSH
15140: LD_INT 2
15142: NEG
15143: PUSH
15144: LD_INT 1
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: PUSH
15151: LD_INT 3
15153: NEG
15154: PUSH
15155: LD_INT 1
15157: NEG
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
15188: LD_ADDR_VAR 0 33
15192: PUSH
15193: LD_INT 0
15195: PUSH
15196: LD_INT 0
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PUSH
15203: LD_INT 0
15205: PUSH
15206: LD_INT 1
15208: NEG
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: LD_INT 1
15216: PUSH
15217: LD_INT 0
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: PUSH
15224: LD_INT 1
15226: PUSH
15227: LD_INT 1
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: PUSH
15234: LD_INT 0
15236: PUSH
15237: LD_INT 1
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PUSH
15244: LD_INT 1
15246: NEG
15247: PUSH
15248: LD_INT 0
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PUSH
15255: LD_INT 1
15257: NEG
15258: PUSH
15259: LD_INT 1
15261: NEG
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: PUSH
15267: LD_INT 1
15269: NEG
15270: PUSH
15271: LD_INT 2
15273: NEG
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PUSH
15279: LD_INT 1
15281: PUSH
15282: LD_INT 1
15284: NEG
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PUSH
15290: LD_INT 2
15292: PUSH
15293: LD_INT 0
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: PUSH
15300: LD_INT 2
15302: PUSH
15303: LD_INT 1
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: PUSH
15310: LD_INT 1
15312: PUSH
15313: LD_INT 2
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: PUSH
15320: LD_INT 0
15322: PUSH
15323: LD_INT 2
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: PUSH
15330: LD_INT 1
15332: NEG
15333: PUSH
15334: LD_INT 1
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 2
15343: NEG
15344: PUSH
15345: LD_INT 0
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: LD_INT 2
15354: NEG
15355: PUSH
15356: LD_INT 1
15358: NEG
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: PUSH
15364: LD_INT 2
15366: NEG
15367: PUSH
15368: LD_INT 2
15370: NEG
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 2
15378: NEG
15379: PUSH
15380: LD_INT 3
15382: NEG
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: LD_INT 2
15390: PUSH
15391: LD_INT 1
15393: NEG
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: LD_INT 3
15401: PUSH
15402: LD_INT 1
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: PUSH
15409: LD_INT 1
15411: PUSH
15412: LD_INT 3
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PUSH
15419: LD_INT 1
15421: NEG
15422: PUSH
15423: LD_INT 2
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: PUSH
15430: LD_INT 3
15432: NEG
15433: PUSH
15434: LD_INT 2
15436: NEG
15437: PUSH
15438: EMPTY
15439: LIST
15440: LIST
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
15467: LD_ADDR_VAR 0 34
15471: PUSH
15472: LD_INT 0
15474: PUSH
15475: LD_INT 0
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: LD_INT 0
15484: PUSH
15485: LD_INT 1
15487: NEG
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: PUSH
15493: LD_INT 1
15495: PUSH
15496: LD_INT 0
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: PUSH
15503: LD_INT 1
15505: PUSH
15506: LD_INT 1
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PUSH
15513: LD_INT 0
15515: PUSH
15516: LD_INT 1
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PUSH
15523: LD_INT 1
15525: NEG
15526: PUSH
15527: LD_INT 0
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: LD_INT 1
15536: NEG
15537: PUSH
15538: LD_INT 1
15540: NEG
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: PUSH
15546: LD_INT 1
15548: NEG
15549: PUSH
15550: LD_INT 2
15552: NEG
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PUSH
15558: LD_INT 0
15560: PUSH
15561: LD_INT 2
15563: NEG
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: PUSH
15569: LD_INT 1
15571: PUSH
15572: LD_INT 1
15574: NEG
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: LD_INT 2
15582: PUSH
15583: LD_INT 1
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 2
15592: PUSH
15593: LD_INT 2
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: LD_INT 1
15602: PUSH
15603: LD_INT 2
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 1
15612: NEG
15613: PUSH
15614: LD_INT 1
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: LD_INT 2
15623: NEG
15624: PUSH
15625: LD_INT 0
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: LD_INT 2
15634: NEG
15635: PUSH
15636: LD_INT 1
15638: NEG
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PUSH
15644: LD_INT 2
15646: NEG
15647: PUSH
15648: LD_INT 2
15650: NEG
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: LD_INT 1
15658: NEG
15659: PUSH
15660: LD_INT 3
15662: NEG
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PUSH
15668: LD_INT 1
15670: PUSH
15671: LD_INT 2
15673: NEG
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: LD_INT 3
15681: PUSH
15682: LD_INT 2
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: LD_INT 2
15691: PUSH
15692: LD_INT 3
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: PUSH
15699: LD_INT 2
15701: NEG
15702: PUSH
15703: LD_INT 1
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: PUSH
15710: LD_INT 3
15712: NEG
15713: PUSH
15714: LD_INT 1
15716: NEG
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
15747: LD_ADDR_VAR 0 35
15751: PUSH
15752: LD_INT 0
15754: PUSH
15755: LD_INT 0
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: PUSH
15762: LD_INT 0
15764: PUSH
15765: LD_INT 1
15767: NEG
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: PUSH
15773: LD_INT 1
15775: PUSH
15776: LD_INT 0
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 1
15785: PUSH
15786: LD_INT 1
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PUSH
15793: LD_INT 0
15795: PUSH
15796: LD_INT 1
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: LD_INT 1
15805: NEG
15806: PUSH
15807: LD_INT 0
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 1
15816: NEG
15817: PUSH
15818: LD_INT 1
15820: NEG
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: LD_INT 2
15828: PUSH
15829: LD_INT 1
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: PUSH
15836: LD_INT 2
15838: NEG
15839: PUSH
15840: LD_INT 1
15842: NEG
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
15859: LD_ADDR_VAR 0 36
15863: PUSH
15864: LD_INT 0
15866: PUSH
15867: LD_INT 0
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PUSH
15874: LD_INT 0
15876: PUSH
15877: LD_INT 1
15879: NEG
15880: PUSH
15881: EMPTY
15882: LIST
15883: LIST
15884: PUSH
15885: LD_INT 1
15887: PUSH
15888: LD_INT 0
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: PUSH
15895: LD_INT 1
15897: PUSH
15898: LD_INT 1
15900: PUSH
15901: EMPTY
15902: LIST
15903: LIST
15904: PUSH
15905: LD_INT 0
15907: PUSH
15908: LD_INT 1
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PUSH
15915: LD_INT 1
15917: NEG
15918: PUSH
15919: LD_INT 0
15921: PUSH
15922: EMPTY
15923: LIST
15924: LIST
15925: PUSH
15926: LD_INT 1
15928: NEG
15929: PUSH
15930: LD_INT 1
15932: NEG
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: LD_INT 1
15940: NEG
15941: PUSH
15942: LD_INT 2
15944: NEG
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 1
15952: PUSH
15953: LD_INT 2
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
15971: LD_ADDR_VAR 0 37
15975: PUSH
15976: LD_INT 0
15978: PUSH
15979: LD_INT 0
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PUSH
15986: LD_INT 0
15988: PUSH
15989: LD_INT 1
15991: NEG
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PUSH
15997: LD_INT 1
15999: PUSH
16000: LD_INT 0
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: LD_INT 1
16009: PUSH
16010: LD_INT 1
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: PUSH
16017: LD_INT 0
16019: PUSH
16020: LD_INT 1
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: PUSH
16027: LD_INT 1
16029: NEG
16030: PUSH
16031: LD_INT 0
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PUSH
16038: LD_INT 1
16040: NEG
16041: PUSH
16042: LD_INT 1
16044: NEG
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PUSH
16050: LD_INT 1
16052: PUSH
16053: LD_INT 1
16055: NEG
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: LD_INT 1
16063: NEG
16064: PUSH
16065: LD_INT 1
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
16083: LD_ADDR_VAR 0 38
16087: PUSH
16088: LD_INT 0
16090: PUSH
16091: LD_INT 0
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 0
16100: PUSH
16101: LD_INT 1
16103: NEG
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: PUSH
16109: LD_INT 1
16111: PUSH
16112: LD_INT 0
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: PUSH
16119: LD_INT 1
16121: PUSH
16122: LD_INT 1
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PUSH
16129: LD_INT 0
16131: PUSH
16132: LD_INT 1
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 1
16141: NEG
16142: PUSH
16143: LD_INT 0
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 1
16152: NEG
16153: PUSH
16154: LD_INT 1
16156: NEG
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: LD_INT 2
16164: PUSH
16165: LD_INT 1
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: LD_INT 2
16174: NEG
16175: PUSH
16176: LD_INT 1
16178: NEG
16179: PUSH
16180: EMPTY
16181: LIST
16182: LIST
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
16195: LD_ADDR_VAR 0 39
16199: PUSH
16200: LD_INT 0
16202: PUSH
16203: LD_INT 0
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: LD_INT 0
16212: PUSH
16213: LD_INT 1
16215: NEG
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: LD_INT 1
16223: PUSH
16224: LD_INT 0
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 1
16233: PUSH
16234: LD_INT 1
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: PUSH
16241: LD_INT 0
16243: PUSH
16244: LD_INT 1
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: LD_INT 1
16253: NEG
16254: PUSH
16255: LD_INT 0
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 1
16264: NEG
16265: PUSH
16266: LD_INT 1
16268: NEG
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: LD_INT 1
16276: NEG
16277: PUSH
16278: LD_INT 2
16280: NEG
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: LD_INT 1
16288: PUSH
16289: LD_INT 2
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
16307: LD_ADDR_VAR 0 40
16311: PUSH
16312: LD_INT 0
16314: PUSH
16315: LD_INT 0
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: PUSH
16322: LD_INT 0
16324: PUSH
16325: LD_INT 1
16327: NEG
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: LD_INT 1
16335: PUSH
16336: LD_INT 0
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: LD_INT 1
16345: PUSH
16346: LD_INT 1
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: LD_INT 0
16355: PUSH
16356: LD_INT 1
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PUSH
16363: LD_INT 1
16365: NEG
16366: PUSH
16367: LD_INT 0
16369: PUSH
16370: EMPTY
16371: LIST
16372: LIST
16373: PUSH
16374: LD_INT 1
16376: NEG
16377: PUSH
16378: LD_INT 1
16380: NEG
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 1
16388: PUSH
16389: LD_INT 1
16391: NEG
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PUSH
16397: LD_INT 1
16399: NEG
16400: PUSH
16401: LD_INT 1
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16419: LD_ADDR_VAR 0 41
16423: PUSH
16424: LD_INT 0
16426: PUSH
16427: LD_INT 0
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: LD_INT 0
16436: PUSH
16437: LD_INT 1
16439: NEG
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 1
16447: PUSH
16448: LD_INT 0
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 1
16457: PUSH
16458: LD_INT 1
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: LD_INT 0
16467: PUSH
16468: LD_INT 1
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: LD_INT 1
16477: NEG
16478: PUSH
16479: LD_INT 0
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 1
16488: NEG
16489: PUSH
16490: LD_INT 1
16492: NEG
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: LD_INT 1
16500: NEG
16501: PUSH
16502: LD_INT 2
16504: NEG
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 1
16512: PUSH
16513: LD_INT 1
16515: NEG
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 2
16523: PUSH
16524: LD_INT 0
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 2
16533: PUSH
16534: LD_INT 1
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 2
16543: PUSH
16544: LD_INT 2
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: LD_INT 1
16553: PUSH
16554: LD_INT 2
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: PUSH
16561: LD_INT 1
16563: NEG
16564: PUSH
16565: LD_INT 1
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: PUSH
16572: LD_INT 2
16574: NEG
16575: PUSH
16576: LD_INT 0
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 2
16585: NEG
16586: PUSH
16587: LD_INT 1
16589: NEG
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: LD_INT 2
16597: NEG
16598: PUSH
16599: LD_INT 2
16601: NEG
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PUSH
16607: LD_INT 2
16609: NEG
16610: PUSH
16611: LD_INT 3
16613: NEG
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: LD_INT 2
16621: PUSH
16622: LD_INT 1
16624: NEG
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: LD_INT 3
16632: PUSH
16633: LD_INT 0
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: PUSH
16640: LD_INT 3
16642: PUSH
16643: LD_INT 1
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: PUSH
16650: LD_INT 3
16652: PUSH
16653: LD_INT 2
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 3
16662: PUSH
16663: LD_INT 3
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: LD_INT 2
16672: PUSH
16673: LD_INT 3
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: PUSH
16680: LD_INT 2
16682: NEG
16683: PUSH
16684: LD_INT 1
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PUSH
16691: LD_INT 3
16693: NEG
16694: PUSH
16695: LD_INT 0
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 3
16704: NEG
16705: PUSH
16706: LD_INT 1
16708: NEG
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 3
16716: NEG
16717: PUSH
16718: LD_INT 2
16720: NEG
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: PUSH
16726: LD_INT 3
16728: NEG
16729: PUSH
16730: LD_INT 3
16732: NEG
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
16769: LD_ADDR_VAR 0 42
16773: PUSH
16774: LD_INT 0
16776: PUSH
16777: LD_INT 0
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: PUSH
16784: LD_INT 0
16786: PUSH
16787: LD_INT 1
16789: NEG
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: LD_INT 1
16797: PUSH
16798: LD_INT 0
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: PUSH
16805: LD_INT 1
16807: PUSH
16808: LD_INT 1
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: PUSH
16815: LD_INT 0
16817: PUSH
16818: LD_INT 1
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PUSH
16825: LD_INT 1
16827: NEG
16828: PUSH
16829: LD_INT 0
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 1
16838: NEG
16839: PUSH
16840: LD_INT 1
16842: NEG
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 1
16850: NEG
16851: PUSH
16852: LD_INT 2
16854: NEG
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PUSH
16860: LD_INT 0
16862: PUSH
16863: LD_INT 2
16865: NEG
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 1
16873: PUSH
16874: LD_INT 1
16876: NEG
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PUSH
16882: LD_INT 2
16884: PUSH
16885: LD_INT 1
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: LD_INT 2
16894: PUSH
16895: LD_INT 2
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PUSH
16902: LD_INT 1
16904: PUSH
16905: LD_INT 2
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 0
16914: PUSH
16915: LD_INT 2
16917: PUSH
16918: EMPTY
16919: LIST
16920: LIST
16921: PUSH
16922: LD_INT 1
16924: NEG
16925: PUSH
16926: LD_INT 1
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PUSH
16933: LD_INT 2
16935: NEG
16936: PUSH
16937: LD_INT 1
16939: NEG
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: LD_INT 2
16947: NEG
16948: PUSH
16949: LD_INT 2
16951: NEG
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PUSH
16957: LD_INT 2
16959: NEG
16960: PUSH
16961: LD_INT 3
16963: NEG
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 1
16971: NEG
16972: PUSH
16973: LD_INT 3
16975: NEG
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PUSH
16981: LD_INT 0
16983: PUSH
16984: LD_INT 3
16986: NEG
16987: PUSH
16988: EMPTY
16989: LIST
16990: LIST
16991: PUSH
16992: LD_INT 1
16994: PUSH
16995: LD_INT 2
16997: NEG
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: LD_INT 3
17005: PUSH
17006: LD_INT 2
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PUSH
17013: LD_INT 3
17015: PUSH
17016: LD_INT 3
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: LD_INT 2
17025: PUSH
17026: LD_INT 3
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: LD_INT 1
17035: PUSH
17036: LD_INT 3
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: LD_INT 0
17045: PUSH
17046: LD_INT 3
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 1
17055: NEG
17056: PUSH
17057: LD_INT 2
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 3
17066: NEG
17067: PUSH
17068: LD_INT 2
17070: NEG
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: PUSH
17076: LD_INT 3
17078: NEG
17079: PUSH
17080: LD_INT 3
17082: NEG
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: EMPTY
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
17119: LD_ADDR_VAR 0 43
17123: PUSH
17124: LD_INT 0
17126: PUSH
17127: LD_INT 0
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: LD_INT 0
17136: PUSH
17137: LD_INT 1
17139: NEG
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 1
17147: PUSH
17148: LD_INT 0
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: LD_INT 1
17157: PUSH
17158: LD_INT 1
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 0
17167: PUSH
17168: LD_INT 1
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 1
17177: NEG
17178: PUSH
17179: LD_INT 0
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: PUSH
17186: LD_INT 1
17188: NEG
17189: PUSH
17190: LD_INT 1
17192: NEG
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: PUSH
17198: LD_INT 1
17200: NEG
17201: PUSH
17202: LD_INT 2
17204: NEG
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: LD_INT 0
17212: PUSH
17213: LD_INT 2
17215: NEG
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: LD_INT 1
17223: PUSH
17224: LD_INT 1
17226: NEG
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 2
17234: PUSH
17235: LD_INT 0
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: LD_INT 2
17244: PUSH
17245: LD_INT 1
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: LD_INT 1
17254: PUSH
17255: LD_INT 2
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PUSH
17262: LD_INT 0
17264: PUSH
17265: LD_INT 2
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 1
17274: NEG
17275: PUSH
17276: LD_INT 1
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PUSH
17283: LD_INT 2
17285: NEG
17286: PUSH
17287: LD_INT 0
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 2
17296: NEG
17297: PUSH
17298: LD_INT 1
17300: NEG
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: PUSH
17306: LD_INT 1
17308: NEG
17309: PUSH
17310: LD_INT 3
17312: NEG
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: LD_INT 0
17320: PUSH
17321: LD_INT 3
17323: NEG
17324: PUSH
17325: EMPTY
17326: LIST
17327: LIST
17328: PUSH
17329: LD_INT 1
17331: PUSH
17332: LD_INT 2
17334: NEG
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: PUSH
17340: LD_INT 2
17342: PUSH
17343: LD_INT 1
17345: NEG
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: PUSH
17351: LD_INT 3
17353: PUSH
17354: LD_INT 0
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: LD_INT 3
17363: PUSH
17364: LD_INT 1
17366: PUSH
17367: EMPTY
17368: LIST
17369: LIST
17370: PUSH
17371: LD_INT 1
17373: PUSH
17374: LD_INT 3
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 0
17383: PUSH
17384: LD_INT 3
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: LD_INT 1
17393: NEG
17394: PUSH
17395: LD_INT 2
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: LD_INT 2
17404: NEG
17405: PUSH
17406: LD_INT 1
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: LD_INT 3
17415: NEG
17416: PUSH
17417: LD_INT 0
17419: PUSH
17420: EMPTY
17421: LIST
17422: LIST
17423: PUSH
17424: LD_INT 3
17426: NEG
17427: PUSH
17428: LD_INT 1
17430: NEG
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17467: LD_ADDR_VAR 0 44
17471: PUSH
17472: LD_INT 0
17474: PUSH
17475: LD_INT 0
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: LD_INT 0
17484: PUSH
17485: LD_INT 1
17487: NEG
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 1
17495: PUSH
17496: LD_INT 0
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 1
17505: PUSH
17506: LD_INT 1
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: LD_INT 0
17515: PUSH
17516: LD_INT 1
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PUSH
17523: LD_INT 1
17525: NEG
17526: PUSH
17527: LD_INT 0
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 1
17536: NEG
17537: PUSH
17538: LD_INT 1
17540: NEG
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 1
17548: NEG
17549: PUSH
17550: LD_INT 2
17552: NEG
17553: PUSH
17554: EMPTY
17555: LIST
17556: LIST
17557: PUSH
17558: LD_INT 1
17560: PUSH
17561: LD_INT 1
17563: NEG
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 2
17571: PUSH
17572: LD_INT 0
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PUSH
17579: LD_INT 2
17581: PUSH
17582: LD_INT 1
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: PUSH
17589: LD_INT 2
17591: PUSH
17592: LD_INT 2
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: PUSH
17599: LD_INT 1
17601: PUSH
17602: LD_INT 2
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 1
17611: NEG
17612: PUSH
17613: LD_INT 1
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 2
17622: NEG
17623: PUSH
17624: LD_INT 0
17626: PUSH
17627: EMPTY
17628: LIST
17629: LIST
17630: PUSH
17631: LD_INT 2
17633: NEG
17634: PUSH
17635: LD_INT 1
17637: NEG
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 2
17645: NEG
17646: PUSH
17647: LD_INT 2
17649: NEG
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 2
17657: NEG
17658: PUSH
17659: LD_INT 3
17661: NEG
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: LD_INT 2
17669: PUSH
17670: LD_INT 1
17672: NEG
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: LD_INT 3
17680: PUSH
17681: LD_INT 0
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 3
17690: PUSH
17691: LD_INT 1
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PUSH
17698: LD_INT 3
17700: PUSH
17701: LD_INT 2
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: PUSH
17708: LD_INT 3
17710: PUSH
17711: LD_INT 3
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 2
17720: PUSH
17721: LD_INT 3
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 2
17730: NEG
17731: PUSH
17732: LD_INT 1
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 3
17741: NEG
17742: PUSH
17743: LD_INT 0
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: LD_INT 3
17752: NEG
17753: PUSH
17754: LD_INT 1
17756: NEG
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 3
17764: NEG
17765: PUSH
17766: LD_INT 2
17768: NEG
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 3
17776: NEG
17777: PUSH
17778: LD_INT 3
17780: NEG
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
17817: LD_ADDR_VAR 0 45
17821: PUSH
17822: LD_INT 0
17824: PUSH
17825: LD_INT 0
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 0
17834: PUSH
17835: LD_INT 1
17837: NEG
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 1
17845: PUSH
17846: LD_INT 0
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: LD_INT 1
17855: PUSH
17856: LD_INT 1
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PUSH
17863: LD_INT 0
17865: PUSH
17866: LD_INT 1
17868: PUSH
17869: EMPTY
17870: LIST
17871: LIST
17872: PUSH
17873: LD_INT 1
17875: NEG
17876: PUSH
17877: LD_INT 0
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 1
17886: NEG
17887: PUSH
17888: LD_INT 1
17890: NEG
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 1
17898: NEG
17899: PUSH
17900: LD_INT 2
17902: NEG
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 0
17910: PUSH
17911: LD_INT 2
17913: NEG
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 1
17921: PUSH
17922: LD_INT 1
17924: NEG
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 2
17932: PUSH
17933: LD_INT 1
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 2
17942: PUSH
17943: LD_INT 2
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: LD_INT 1
17952: PUSH
17953: LD_INT 2
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: PUSH
17960: LD_INT 0
17962: PUSH
17963: LD_INT 2
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 1
17972: NEG
17973: PUSH
17974: LD_INT 1
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 2
17983: NEG
17984: PUSH
17985: LD_INT 1
17987: NEG
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 2
17995: NEG
17996: PUSH
17997: LD_INT 2
17999: NEG
18000: PUSH
18001: EMPTY
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 2
18007: NEG
18008: PUSH
18009: LD_INT 3
18011: NEG
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 1
18019: NEG
18020: PUSH
18021: LD_INT 3
18023: NEG
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 0
18031: PUSH
18032: LD_INT 3
18034: NEG
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 1
18042: PUSH
18043: LD_INT 2
18045: NEG
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: PUSH
18051: LD_INT 3
18053: PUSH
18054: LD_INT 2
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 3
18063: PUSH
18064: LD_INT 3
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 2
18073: PUSH
18074: LD_INT 3
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: PUSH
18081: LD_INT 1
18083: PUSH
18084: LD_INT 3
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 0
18093: PUSH
18094: LD_INT 3
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: PUSH
18101: LD_INT 1
18103: NEG
18104: PUSH
18105: LD_INT 2
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 3
18114: NEG
18115: PUSH
18116: LD_INT 2
18118: NEG
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 3
18126: NEG
18127: PUSH
18128: LD_INT 3
18130: NEG
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
18167: LD_ADDR_VAR 0 46
18171: PUSH
18172: LD_INT 0
18174: PUSH
18175: LD_INT 0
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 0
18184: PUSH
18185: LD_INT 1
18187: NEG
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 1
18195: PUSH
18196: LD_INT 0
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: LD_INT 1
18205: PUSH
18206: LD_INT 1
18208: PUSH
18209: EMPTY
18210: LIST
18211: LIST
18212: PUSH
18213: LD_INT 0
18215: PUSH
18216: LD_INT 1
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 1
18225: NEG
18226: PUSH
18227: LD_INT 0
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 1
18236: NEG
18237: PUSH
18238: LD_INT 1
18240: NEG
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 1
18248: NEG
18249: PUSH
18250: LD_INT 2
18252: NEG
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: LD_INT 0
18260: PUSH
18261: LD_INT 2
18263: NEG
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PUSH
18269: LD_INT 1
18271: PUSH
18272: LD_INT 1
18274: NEG
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: LD_INT 2
18282: PUSH
18283: LD_INT 0
18285: PUSH
18286: EMPTY
18287: LIST
18288: LIST
18289: PUSH
18290: LD_INT 2
18292: PUSH
18293: LD_INT 1
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 1
18302: PUSH
18303: LD_INT 2
18305: PUSH
18306: EMPTY
18307: LIST
18308: LIST
18309: PUSH
18310: LD_INT 0
18312: PUSH
18313: LD_INT 2
18315: PUSH
18316: EMPTY
18317: LIST
18318: LIST
18319: PUSH
18320: LD_INT 1
18322: NEG
18323: PUSH
18324: LD_INT 1
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 2
18333: NEG
18334: PUSH
18335: LD_INT 0
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 2
18344: NEG
18345: PUSH
18346: LD_INT 1
18348: NEG
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 1
18356: NEG
18357: PUSH
18358: LD_INT 3
18360: NEG
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 0
18368: PUSH
18369: LD_INT 3
18371: NEG
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 1
18379: PUSH
18380: LD_INT 2
18382: NEG
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 2
18390: PUSH
18391: LD_INT 1
18393: NEG
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: LD_INT 3
18401: PUSH
18402: LD_INT 0
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PUSH
18409: LD_INT 3
18411: PUSH
18412: LD_INT 1
18414: PUSH
18415: EMPTY
18416: LIST
18417: LIST
18418: PUSH
18419: LD_INT 1
18421: PUSH
18422: LD_INT 3
18424: PUSH
18425: EMPTY
18426: LIST
18427: LIST
18428: PUSH
18429: LD_INT 0
18431: PUSH
18432: LD_INT 3
18434: PUSH
18435: EMPTY
18436: LIST
18437: LIST
18438: PUSH
18439: LD_INT 1
18441: NEG
18442: PUSH
18443: LD_INT 2
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 2
18452: NEG
18453: PUSH
18454: LD_INT 1
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 3
18463: NEG
18464: PUSH
18465: LD_INT 0
18467: PUSH
18468: EMPTY
18469: LIST
18470: LIST
18471: PUSH
18472: LD_INT 3
18474: NEG
18475: PUSH
18476: LD_INT 1
18478: NEG
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
18515: LD_ADDR_VAR 0 47
18519: PUSH
18520: LD_INT 0
18522: PUSH
18523: LD_INT 0
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 0
18532: PUSH
18533: LD_INT 1
18535: NEG
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: LD_INT 1
18543: PUSH
18544: LD_INT 0
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 1
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 0
18563: PUSH
18564: LD_INT 1
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 1
18573: NEG
18574: PUSH
18575: LD_INT 0
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 1
18584: NEG
18585: PUSH
18586: LD_INT 1
18588: NEG
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 1
18596: NEG
18597: PUSH
18598: LD_INT 2
18600: NEG
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: LD_INT 0
18608: PUSH
18609: LD_INT 2
18611: NEG
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: LD_INT 1
18619: PUSH
18620: LD_INT 1
18622: NEG
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 2
18630: NEG
18631: PUSH
18632: LD_INT 1
18634: NEG
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 2
18642: NEG
18643: PUSH
18644: LD_INT 2
18646: NEG
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
18666: LD_ADDR_VAR 0 48
18670: PUSH
18671: LD_INT 0
18673: PUSH
18674: LD_INT 0
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: LD_INT 0
18683: PUSH
18684: LD_INT 1
18686: NEG
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 1
18694: PUSH
18695: LD_INT 0
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 1
18704: PUSH
18705: LD_INT 1
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: LD_INT 0
18714: PUSH
18715: LD_INT 1
18717: PUSH
18718: EMPTY
18719: LIST
18720: LIST
18721: PUSH
18722: LD_INT 1
18724: NEG
18725: PUSH
18726: LD_INT 0
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: PUSH
18733: LD_INT 1
18735: NEG
18736: PUSH
18737: LD_INT 1
18739: NEG
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 1
18747: NEG
18748: PUSH
18749: LD_INT 2
18751: NEG
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: LD_INT 0
18759: PUSH
18760: LD_INT 2
18762: NEG
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PUSH
18768: LD_INT 1
18770: PUSH
18771: LD_INT 1
18773: NEG
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 2
18781: PUSH
18782: LD_INT 0
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 2
18791: PUSH
18792: LD_INT 1
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
18813: LD_ADDR_VAR 0 49
18817: PUSH
18818: LD_INT 0
18820: PUSH
18821: LD_INT 0
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: LD_INT 0
18830: PUSH
18831: LD_INT 1
18833: NEG
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 1
18841: PUSH
18842: LD_INT 0
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: LD_INT 1
18851: PUSH
18852: LD_INT 1
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 0
18861: PUSH
18862: LD_INT 1
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 1
18871: NEG
18872: PUSH
18873: LD_INT 0
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 1
18882: NEG
18883: PUSH
18884: LD_INT 1
18886: NEG
18887: PUSH
18888: EMPTY
18889: LIST
18890: LIST
18891: PUSH
18892: LD_INT 1
18894: PUSH
18895: LD_INT 1
18897: NEG
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 2
18905: PUSH
18906: LD_INT 0
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: LD_INT 2
18915: PUSH
18916: LD_INT 1
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 2
18925: PUSH
18926: LD_INT 2
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: LD_INT 1
18935: PUSH
18936: LD_INT 2
18938: PUSH
18939: EMPTY
18940: LIST
18941: LIST
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
18957: LD_ADDR_VAR 0 50
18961: PUSH
18962: LD_INT 0
18964: PUSH
18965: LD_INT 0
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: LD_INT 0
18974: PUSH
18975: LD_INT 1
18977: NEG
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 1
18985: PUSH
18986: LD_INT 0
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PUSH
18993: LD_INT 1
18995: PUSH
18996: LD_INT 1
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PUSH
19003: LD_INT 0
19005: PUSH
19006: LD_INT 1
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 1
19015: NEG
19016: PUSH
19017: LD_INT 0
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: LD_INT 1
19026: NEG
19027: PUSH
19028: LD_INT 1
19030: NEG
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 2
19038: PUSH
19039: LD_INT 1
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 2
19048: PUSH
19049: LD_INT 2
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: LD_INT 1
19058: PUSH
19059: LD_INT 2
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 0
19068: PUSH
19069: LD_INT 2
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 1
19078: NEG
19079: PUSH
19080: LD_INT 1
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
19101: LD_ADDR_VAR 0 51
19105: PUSH
19106: LD_INT 0
19108: PUSH
19109: LD_INT 0
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 0
19118: PUSH
19119: LD_INT 1
19121: NEG
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 1
19129: PUSH
19130: LD_INT 0
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 1
19139: PUSH
19140: LD_INT 1
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 0
19149: PUSH
19150: LD_INT 1
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 1
19159: NEG
19160: PUSH
19161: LD_INT 0
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: LD_INT 1
19170: NEG
19171: PUSH
19172: LD_INT 1
19174: NEG
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 1
19182: PUSH
19183: LD_INT 2
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 0
19192: PUSH
19193: LD_INT 2
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 1
19202: NEG
19203: PUSH
19204: LD_INT 1
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 2
19213: NEG
19214: PUSH
19215: LD_INT 0
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PUSH
19222: LD_INT 2
19224: NEG
19225: PUSH
19226: LD_INT 1
19228: NEG
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19248: LD_ADDR_VAR 0 52
19252: PUSH
19253: LD_INT 0
19255: PUSH
19256: LD_INT 0
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 0
19265: PUSH
19266: LD_INT 1
19268: NEG
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 1
19276: PUSH
19277: LD_INT 0
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 1
19286: PUSH
19287: LD_INT 1
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 0
19296: PUSH
19297: LD_INT 1
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 1
19306: NEG
19307: PUSH
19308: LD_INT 0
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 1
19317: NEG
19318: PUSH
19319: LD_INT 1
19321: NEG
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PUSH
19327: LD_INT 1
19329: NEG
19330: PUSH
19331: LD_INT 2
19333: NEG
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: LD_INT 1
19341: NEG
19342: PUSH
19343: LD_INT 1
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: LD_INT 2
19352: NEG
19353: PUSH
19354: LD_INT 0
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 2
19363: NEG
19364: PUSH
19365: LD_INT 1
19367: NEG
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 2
19375: NEG
19376: PUSH
19377: LD_INT 2
19379: NEG
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19399: LD_ADDR_VAR 0 53
19403: PUSH
19404: LD_INT 0
19406: PUSH
19407: LD_INT 0
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 0
19416: PUSH
19417: LD_INT 1
19419: NEG
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 1
19427: PUSH
19428: LD_INT 0
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 1
19437: PUSH
19438: LD_INT 1
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 0
19447: PUSH
19448: LD_INT 1
19450: PUSH
19451: EMPTY
19452: LIST
19453: LIST
19454: PUSH
19455: LD_INT 1
19457: NEG
19458: PUSH
19459: LD_INT 0
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: PUSH
19466: LD_INT 1
19468: NEG
19469: PUSH
19470: LD_INT 1
19472: NEG
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PUSH
19478: LD_INT 1
19480: NEG
19481: PUSH
19482: LD_INT 2
19484: NEG
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 0
19492: PUSH
19493: LD_INT 2
19495: NEG
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 1
19503: PUSH
19504: LD_INT 1
19506: NEG
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 2
19514: PUSH
19515: LD_INT 0
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: LD_INT 2
19524: PUSH
19525: LD_INT 1
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 2
19534: PUSH
19535: LD_INT 2
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 1
19544: PUSH
19545: LD_INT 2
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 0
19554: PUSH
19555: LD_INT 2
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 1
19564: NEG
19565: PUSH
19566: LD_INT 1
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 2
19575: NEG
19576: PUSH
19577: LD_INT 0
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 2
19586: NEG
19587: PUSH
19588: LD_INT 1
19590: NEG
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 2
19598: NEG
19599: PUSH
19600: LD_INT 2
19602: NEG
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19629: LD_ADDR_VAR 0 54
19633: PUSH
19634: LD_INT 0
19636: PUSH
19637: LD_INT 0
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: LD_INT 0
19646: PUSH
19647: LD_INT 1
19649: NEG
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: LD_INT 1
19657: PUSH
19658: LD_INT 0
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 1
19667: PUSH
19668: LD_INT 1
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 0
19677: PUSH
19678: LD_INT 1
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: LD_INT 1
19687: NEG
19688: PUSH
19689: LD_INT 0
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 1
19698: NEG
19699: PUSH
19700: LD_INT 1
19702: NEG
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 1
19710: NEG
19711: PUSH
19712: LD_INT 2
19714: NEG
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 0
19722: PUSH
19723: LD_INT 2
19725: NEG
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 1
19733: PUSH
19734: LD_INT 1
19736: NEG
19737: PUSH
19738: EMPTY
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 2
19744: PUSH
19745: LD_INT 0
19747: PUSH
19748: EMPTY
19749: LIST
19750: LIST
19751: PUSH
19752: LD_INT 2
19754: PUSH
19755: LD_INT 1
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 2
19764: PUSH
19765: LD_INT 2
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 1
19774: PUSH
19775: LD_INT 2
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 0
19784: PUSH
19785: LD_INT 2
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: LD_INT 1
19794: NEG
19795: PUSH
19796: LD_INT 1
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 2
19805: NEG
19806: PUSH
19807: LD_INT 0
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 2
19816: NEG
19817: PUSH
19818: LD_INT 1
19820: NEG
19821: PUSH
19822: EMPTY
19823: LIST
19824: LIST
19825: PUSH
19826: LD_INT 2
19828: NEG
19829: PUSH
19830: LD_INT 2
19832: NEG
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
19859: LD_ADDR_VAR 0 55
19863: PUSH
19864: LD_INT 0
19866: PUSH
19867: LD_INT 0
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 0
19876: PUSH
19877: LD_INT 1
19879: NEG
19880: PUSH
19881: EMPTY
19882: LIST
19883: LIST
19884: PUSH
19885: LD_INT 1
19887: PUSH
19888: LD_INT 0
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 1
19897: PUSH
19898: LD_INT 1
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 0
19907: PUSH
19908: LD_INT 1
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 1
19917: NEG
19918: PUSH
19919: LD_INT 0
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 1
19928: NEG
19929: PUSH
19930: LD_INT 1
19932: NEG
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PUSH
19938: LD_INT 1
19940: NEG
19941: PUSH
19942: LD_INT 2
19944: NEG
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 0
19952: PUSH
19953: LD_INT 2
19955: NEG
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 1
19963: PUSH
19964: LD_INT 1
19966: NEG
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 2
19974: PUSH
19975: LD_INT 0
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 2
19984: PUSH
19985: LD_INT 1
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 2
19994: PUSH
19995: LD_INT 2
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 1
20004: PUSH
20005: LD_INT 2
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: LD_INT 0
20014: PUSH
20015: LD_INT 2
20017: PUSH
20018: EMPTY
20019: LIST
20020: LIST
20021: PUSH
20022: LD_INT 1
20024: NEG
20025: PUSH
20026: LD_INT 1
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: PUSH
20033: LD_INT 2
20035: NEG
20036: PUSH
20037: LD_INT 0
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: LD_INT 2
20046: NEG
20047: PUSH
20048: LD_INT 1
20050: NEG
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PUSH
20056: LD_INT 2
20058: NEG
20059: PUSH
20060: LD_INT 2
20062: NEG
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: PUSH
20068: EMPTY
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20089: LD_ADDR_VAR 0 56
20093: PUSH
20094: LD_INT 0
20096: PUSH
20097: LD_INT 0
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: PUSH
20104: LD_INT 0
20106: PUSH
20107: LD_INT 1
20109: NEG
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: LD_INT 1
20117: PUSH
20118: LD_INT 0
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: LD_INT 1
20127: PUSH
20128: LD_INT 1
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 0
20137: PUSH
20138: LD_INT 1
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 1
20147: NEG
20148: PUSH
20149: LD_INT 0
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 1
20158: NEG
20159: PUSH
20160: LD_INT 1
20162: NEG
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 1
20170: NEG
20171: PUSH
20172: LD_INT 2
20174: NEG
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PUSH
20180: LD_INT 0
20182: PUSH
20183: LD_INT 2
20185: NEG
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: PUSH
20191: LD_INT 1
20193: PUSH
20194: LD_INT 1
20196: NEG
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 2
20204: PUSH
20205: LD_INT 0
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 2
20214: PUSH
20215: LD_INT 1
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: LD_INT 2
20224: PUSH
20225: LD_INT 2
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: LD_INT 1
20234: PUSH
20235: LD_INT 2
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 0
20244: PUSH
20245: LD_INT 2
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 1
20254: NEG
20255: PUSH
20256: LD_INT 1
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PUSH
20263: LD_INT 2
20265: NEG
20266: PUSH
20267: LD_INT 0
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PUSH
20274: LD_INT 2
20276: NEG
20277: PUSH
20278: LD_INT 1
20280: NEG
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: PUSH
20286: LD_INT 2
20288: NEG
20289: PUSH
20290: LD_INT 2
20292: NEG
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20319: LD_ADDR_VAR 0 57
20323: PUSH
20324: LD_INT 0
20326: PUSH
20327: LD_INT 0
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 0
20336: PUSH
20337: LD_INT 1
20339: NEG
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: LD_INT 1
20347: PUSH
20348: LD_INT 0
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: LD_INT 1
20357: PUSH
20358: LD_INT 1
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 0
20367: PUSH
20368: LD_INT 1
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: LD_INT 1
20377: NEG
20378: PUSH
20379: LD_INT 0
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: LD_INT 1
20388: NEG
20389: PUSH
20390: LD_INT 1
20392: NEG
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 1
20400: NEG
20401: PUSH
20402: LD_INT 2
20404: NEG
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: PUSH
20410: LD_INT 0
20412: PUSH
20413: LD_INT 2
20415: NEG
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 1
20423: PUSH
20424: LD_INT 1
20426: NEG
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 2
20434: PUSH
20435: LD_INT 0
20437: PUSH
20438: EMPTY
20439: LIST
20440: LIST
20441: PUSH
20442: LD_INT 2
20444: PUSH
20445: LD_INT 1
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PUSH
20452: LD_INT 2
20454: PUSH
20455: LD_INT 2
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: PUSH
20462: LD_INT 1
20464: PUSH
20465: LD_INT 2
20467: PUSH
20468: EMPTY
20469: LIST
20470: LIST
20471: PUSH
20472: LD_INT 0
20474: PUSH
20475: LD_INT 2
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 1
20484: NEG
20485: PUSH
20486: LD_INT 1
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: PUSH
20493: LD_INT 2
20495: NEG
20496: PUSH
20497: LD_INT 0
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 2
20506: NEG
20507: PUSH
20508: LD_INT 1
20510: NEG
20511: PUSH
20512: EMPTY
20513: LIST
20514: LIST
20515: PUSH
20516: LD_INT 2
20518: NEG
20519: PUSH
20520: LD_INT 2
20522: NEG
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
20549: LD_ADDR_VAR 0 58
20553: PUSH
20554: LD_INT 0
20556: PUSH
20557: LD_INT 0
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 0
20566: PUSH
20567: LD_INT 1
20569: NEG
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: LD_INT 1
20577: PUSH
20578: LD_INT 0
20580: PUSH
20581: EMPTY
20582: LIST
20583: LIST
20584: PUSH
20585: LD_INT 1
20587: PUSH
20588: LD_INT 1
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 0
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 1
20607: NEG
20608: PUSH
20609: LD_INT 0
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 1
20618: NEG
20619: PUSH
20620: LD_INT 1
20622: NEG
20623: PUSH
20624: EMPTY
20625: LIST
20626: LIST
20627: PUSH
20628: LD_INT 1
20630: NEG
20631: PUSH
20632: LD_INT 2
20634: NEG
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 0
20642: PUSH
20643: LD_INT 2
20645: NEG
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PUSH
20651: LD_INT 1
20653: PUSH
20654: LD_INT 1
20656: NEG
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 2
20664: PUSH
20665: LD_INT 0
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 2
20674: PUSH
20675: LD_INT 1
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: LD_INT 2
20684: PUSH
20685: LD_INT 2
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: PUSH
20692: LD_INT 1
20694: PUSH
20695: LD_INT 2
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 0
20704: PUSH
20705: LD_INT 2
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: LD_INT 1
20714: NEG
20715: PUSH
20716: LD_INT 1
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 2
20725: NEG
20726: PUSH
20727: LD_INT 0
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 2
20736: NEG
20737: PUSH
20738: LD_INT 1
20740: NEG
20741: PUSH
20742: EMPTY
20743: LIST
20744: LIST
20745: PUSH
20746: LD_INT 2
20748: NEG
20749: PUSH
20750: LD_INT 2
20752: NEG
20753: PUSH
20754: EMPTY
20755: LIST
20756: LIST
20757: PUSH
20758: EMPTY
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: LIST
20772: LIST
20773: LIST
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20779: LD_ADDR_VAR 0 59
20783: PUSH
20784: LD_INT 0
20786: PUSH
20787: LD_INT 0
20789: PUSH
20790: EMPTY
20791: LIST
20792: LIST
20793: PUSH
20794: LD_INT 0
20796: PUSH
20797: LD_INT 1
20799: NEG
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 1
20807: PUSH
20808: LD_INT 0
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: LD_INT 1
20817: PUSH
20818: LD_INT 1
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: PUSH
20825: LD_INT 0
20827: PUSH
20828: LD_INT 1
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: LD_INT 1
20837: NEG
20838: PUSH
20839: LD_INT 0
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: PUSH
20846: LD_INT 1
20848: NEG
20849: PUSH
20850: LD_INT 1
20852: NEG
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PUSH
20858: EMPTY
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20867: LD_ADDR_VAR 0 60
20871: PUSH
20872: LD_INT 0
20874: PUSH
20875: LD_INT 0
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: PUSH
20882: LD_INT 0
20884: PUSH
20885: LD_INT 1
20887: NEG
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 1
20895: PUSH
20896: LD_INT 0
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: LD_INT 1
20905: PUSH
20906: LD_INT 1
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 0
20915: PUSH
20916: LD_INT 1
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 1
20925: NEG
20926: PUSH
20927: LD_INT 0
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 1
20936: NEG
20937: PUSH
20938: LD_INT 1
20940: NEG
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
20955: LD_ADDR_VAR 0 61
20959: PUSH
20960: LD_INT 0
20962: PUSH
20963: LD_INT 0
20965: PUSH
20966: EMPTY
20967: LIST
20968: LIST
20969: PUSH
20970: LD_INT 0
20972: PUSH
20973: LD_INT 1
20975: NEG
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 1
20983: PUSH
20984: LD_INT 0
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 1
20993: PUSH
20994: LD_INT 1
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: LD_INT 0
21003: PUSH
21004: LD_INT 1
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: LD_INT 1
21013: NEG
21014: PUSH
21015: LD_INT 0
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: LD_INT 1
21024: NEG
21025: PUSH
21026: LD_INT 1
21028: NEG
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21043: LD_ADDR_VAR 0 62
21047: PUSH
21048: LD_INT 0
21050: PUSH
21051: LD_INT 0
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 0
21060: PUSH
21061: LD_INT 1
21063: NEG
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: PUSH
21069: LD_INT 1
21071: PUSH
21072: LD_INT 0
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 1
21081: PUSH
21082: LD_INT 1
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 0
21091: PUSH
21092: LD_INT 1
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: LD_INT 1
21101: NEG
21102: PUSH
21103: LD_INT 0
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 1
21112: NEG
21113: PUSH
21114: LD_INT 1
21116: NEG
21117: PUSH
21118: EMPTY
21119: LIST
21120: LIST
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21131: LD_ADDR_VAR 0 63
21135: PUSH
21136: LD_INT 0
21138: PUSH
21139: LD_INT 0
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: LD_INT 0
21148: PUSH
21149: LD_INT 1
21151: NEG
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: LD_INT 1
21159: PUSH
21160: LD_INT 0
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PUSH
21167: LD_INT 1
21169: PUSH
21170: LD_INT 1
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: PUSH
21177: LD_INT 0
21179: PUSH
21180: LD_INT 1
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: PUSH
21187: LD_INT 1
21189: NEG
21190: PUSH
21191: LD_INT 0
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: PUSH
21198: LD_INT 1
21200: NEG
21201: PUSH
21202: LD_INT 1
21204: NEG
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
21219: LD_ADDR_VAR 0 64
21223: PUSH
21224: LD_INT 0
21226: PUSH
21227: LD_INT 0
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 0
21236: PUSH
21237: LD_INT 1
21239: NEG
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: LD_INT 1
21247: PUSH
21248: LD_INT 0
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 1
21257: PUSH
21258: LD_INT 1
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: LD_INT 0
21267: PUSH
21268: LD_INT 1
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: LD_INT 1
21277: NEG
21278: PUSH
21279: LD_INT 0
21281: PUSH
21282: EMPTY
21283: LIST
21284: LIST
21285: PUSH
21286: LD_INT 1
21288: NEG
21289: PUSH
21290: LD_INT 1
21292: NEG
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: ST_TO_ADDR
// end ; 1 :
21307: GO 27204
21309: LD_INT 1
21311: DOUBLE
21312: EQUAL
21313: IFTRUE 21317
21315: GO 23940
21317: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21318: LD_ADDR_VAR 0 11
21322: PUSH
21323: LD_INT 1
21325: NEG
21326: PUSH
21327: LD_INT 3
21329: NEG
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 0
21337: PUSH
21338: LD_INT 3
21340: NEG
21341: PUSH
21342: EMPTY
21343: LIST
21344: LIST
21345: PUSH
21346: LD_INT 1
21348: PUSH
21349: LD_INT 2
21351: NEG
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: LIST
21361: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21362: LD_ADDR_VAR 0 12
21366: PUSH
21367: LD_INT 2
21369: PUSH
21370: LD_INT 1
21372: NEG
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: PUSH
21378: LD_INT 3
21380: PUSH
21381: LD_INT 0
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: PUSH
21388: LD_INT 3
21390: PUSH
21391: LD_INT 1
21393: PUSH
21394: EMPTY
21395: LIST
21396: LIST
21397: PUSH
21398: EMPTY
21399: LIST
21400: LIST
21401: LIST
21402: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21403: LD_ADDR_VAR 0 13
21407: PUSH
21408: LD_INT 3
21410: PUSH
21411: LD_INT 2
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 3
21420: PUSH
21421: LD_INT 3
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 2
21430: PUSH
21431: LD_INT 3
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: LIST
21442: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21443: LD_ADDR_VAR 0 14
21447: PUSH
21448: LD_INT 1
21450: PUSH
21451: LD_INT 3
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PUSH
21458: LD_INT 0
21460: PUSH
21461: LD_INT 3
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PUSH
21468: LD_INT 1
21470: NEG
21471: PUSH
21472: LD_INT 2
21474: PUSH
21475: EMPTY
21476: LIST
21477: LIST
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: LIST
21483: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21484: LD_ADDR_VAR 0 15
21488: PUSH
21489: LD_INT 2
21491: NEG
21492: PUSH
21493: LD_INT 1
21495: PUSH
21496: EMPTY
21497: LIST
21498: LIST
21499: PUSH
21500: LD_INT 3
21502: NEG
21503: PUSH
21504: LD_INT 0
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 3
21513: NEG
21514: PUSH
21515: LD_INT 1
21517: NEG
21518: PUSH
21519: EMPTY
21520: LIST
21521: LIST
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: LIST
21527: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21528: LD_ADDR_VAR 0 16
21532: PUSH
21533: LD_INT 2
21535: NEG
21536: PUSH
21537: LD_INT 3
21539: NEG
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: PUSH
21545: LD_INT 3
21547: NEG
21548: PUSH
21549: LD_INT 2
21551: NEG
21552: PUSH
21553: EMPTY
21554: LIST
21555: LIST
21556: PUSH
21557: LD_INT 3
21559: NEG
21560: PUSH
21561: LD_INT 3
21563: NEG
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: LIST
21573: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
21574: LD_ADDR_VAR 0 17
21578: PUSH
21579: LD_INT 1
21581: NEG
21582: PUSH
21583: LD_INT 3
21585: NEG
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: LD_INT 0
21593: PUSH
21594: LD_INT 3
21596: NEG
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: PUSH
21602: LD_INT 1
21604: PUSH
21605: LD_INT 2
21607: NEG
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: LIST
21617: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
21618: LD_ADDR_VAR 0 18
21622: PUSH
21623: LD_INT 2
21625: PUSH
21626: LD_INT 1
21628: NEG
21629: PUSH
21630: EMPTY
21631: LIST
21632: LIST
21633: PUSH
21634: LD_INT 3
21636: PUSH
21637: LD_INT 0
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PUSH
21644: LD_INT 3
21646: PUSH
21647: LD_INT 1
21649: PUSH
21650: EMPTY
21651: LIST
21652: LIST
21653: PUSH
21654: EMPTY
21655: LIST
21656: LIST
21657: LIST
21658: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
21659: LD_ADDR_VAR 0 19
21663: PUSH
21664: LD_INT 3
21666: PUSH
21667: LD_INT 2
21669: PUSH
21670: EMPTY
21671: LIST
21672: LIST
21673: PUSH
21674: LD_INT 3
21676: PUSH
21677: LD_INT 3
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: PUSH
21684: LD_INT 2
21686: PUSH
21687: LD_INT 3
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: LIST
21698: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
21699: LD_ADDR_VAR 0 20
21703: PUSH
21704: LD_INT 1
21706: PUSH
21707: LD_INT 3
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 0
21716: PUSH
21717: LD_INT 3
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 1
21726: NEG
21727: PUSH
21728: LD_INT 2
21730: PUSH
21731: EMPTY
21732: LIST
21733: LIST
21734: PUSH
21735: EMPTY
21736: LIST
21737: LIST
21738: LIST
21739: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
21740: LD_ADDR_VAR 0 21
21744: PUSH
21745: LD_INT 2
21747: NEG
21748: PUSH
21749: LD_INT 1
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: LD_INT 3
21758: NEG
21759: PUSH
21760: LD_INT 0
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 3
21769: NEG
21770: PUSH
21771: LD_INT 1
21773: NEG
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: LIST
21783: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
21784: LD_ADDR_VAR 0 22
21788: PUSH
21789: LD_INT 2
21791: NEG
21792: PUSH
21793: LD_INT 3
21795: NEG
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 3
21803: NEG
21804: PUSH
21805: LD_INT 2
21807: NEG
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: LD_INT 3
21815: NEG
21816: PUSH
21817: LD_INT 3
21819: NEG
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: LIST
21829: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
21830: LD_ADDR_VAR 0 23
21834: PUSH
21835: LD_INT 0
21837: PUSH
21838: LD_INT 3
21840: NEG
21841: PUSH
21842: EMPTY
21843: LIST
21844: LIST
21845: PUSH
21846: LD_INT 1
21848: NEG
21849: PUSH
21850: LD_INT 4
21852: NEG
21853: PUSH
21854: EMPTY
21855: LIST
21856: LIST
21857: PUSH
21858: LD_INT 1
21860: PUSH
21861: LD_INT 3
21863: NEG
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: LIST
21873: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
21874: LD_ADDR_VAR 0 24
21878: PUSH
21879: LD_INT 3
21881: PUSH
21882: LD_INT 0
21884: PUSH
21885: EMPTY
21886: LIST
21887: LIST
21888: PUSH
21889: LD_INT 3
21891: PUSH
21892: LD_INT 1
21894: NEG
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: PUSH
21900: LD_INT 4
21902: PUSH
21903: LD_INT 1
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: LIST
21914: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
21915: LD_ADDR_VAR 0 25
21919: PUSH
21920: LD_INT 3
21922: PUSH
21923: LD_INT 3
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PUSH
21930: LD_INT 4
21932: PUSH
21933: LD_INT 3
21935: PUSH
21936: EMPTY
21937: LIST
21938: LIST
21939: PUSH
21940: LD_INT 3
21942: PUSH
21943: LD_INT 4
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: LIST
21954: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
21955: LD_ADDR_VAR 0 26
21959: PUSH
21960: LD_INT 0
21962: PUSH
21963: LD_INT 3
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 1
21972: PUSH
21973: LD_INT 4
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 1
21982: NEG
21983: PUSH
21984: LD_INT 3
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: LIST
21995: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
21996: LD_ADDR_VAR 0 27
22000: PUSH
22001: LD_INT 3
22003: NEG
22004: PUSH
22005: LD_INT 0
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: PUSH
22012: LD_INT 3
22014: NEG
22015: PUSH
22016: LD_INT 1
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 4
22025: NEG
22026: PUSH
22027: LD_INT 1
22029: NEG
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: EMPTY
22036: LIST
22037: LIST
22038: LIST
22039: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
22040: LD_ADDR_VAR 0 28
22044: PUSH
22045: LD_INT 3
22047: NEG
22048: PUSH
22049: LD_INT 3
22051: NEG
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: LD_INT 3
22059: NEG
22060: PUSH
22061: LD_INT 4
22063: NEG
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 4
22071: NEG
22072: PUSH
22073: LD_INT 3
22075: NEG
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: LIST
22085: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
22086: LD_ADDR_VAR 0 29
22090: PUSH
22091: LD_INT 1
22093: NEG
22094: PUSH
22095: LD_INT 3
22097: NEG
22098: PUSH
22099: EMPTY
22100: LIST
22101: LIST
22102: PUSH
22103: LD_INT 0
22105: PUSH
22106: LD_INT 3
22108: NEG
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 1
22116: PUSH
22117: LD_INT 2
22119: NEG
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: PUSH
22125: LD_INT 1
22127: NEG
22128: PUSH
22129: LD_INT 4
22131: NEG
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 0
22139: PUSH
22140: LD_INT 4
22142: NEG
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 1
22150: PUSH
22151: LD_INT 3
22153: NEG
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 1
22161: NEG
22162: PUSH
22163: LD_INT 5
22165: NEG
22166: PUSH
22167: EMPTY
22168: LIST
22169: LIST
22170: PUSH
22171: LD_INT 0
22173: PUSH
22174: LD_INT 5
22176: NEG
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: PUSH
22182: LD_INT 1
22184: PUSH
22185: LD_INT 4
22187: NEG
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 1
22195: NEG
22196: PUSH
22197: LD_INT 6
22199: NEG
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: LD_INT 0
22207: PUSH
22208: LD_INT 6
22210: NEG
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: LD_INT 1
22218: PUSH
22219: LD_INT 5
22221: NEG
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
22241: LD_ADDR_VAR 0 30
22245: PUSH
22246: LD_INT 2
22248: PUSH
22249: LD_INT 1
22251: NEG
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: LD_INT 3
22259: PUSH
22260: LD_INT 0
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 3
22269: PUSH
22270: LD_INT 1
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 3
22279: PUSH
22280: LD_INT 1
22282: NEG
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PUSH
22288: LD_INT 4
22290: PUSH
22291: LD_INT 0
22293: PUSH
22294: EMPTY
22295: LIST
22296: LIST
22297: PUSH
22298: LD_INT 4
22300: PUSH
22301: LD_INT 1
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 4
22310: PUSH
22311: LD_INT 1
22313: NEG
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: PUSH
22319: LD_INT 5
22321: PUSH
22322: LD_INT 0
22324: PUSH
22325: EMPTY
22326: LIST
22327: LIST
22328: PUSH
22329: LD_INT 5
22331: PUSH
22332: LD_INT 1
22334: PUSH
22335: EMPTY
22336: LIST
22337: LIST
22338: PUSH
22339: LD_INT 5
22341: PUSH
22342: LD_INT 1
22344: NEG
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 6
22352: PUSH
22353: LD_INT 0
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 6
22362: PUSH
22363: LD_INT 1
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
22384: LD_ADDR_VAR 0 31
22388: PUSH
22389: LD_INT 3
22391: PUSH
22392: LD_INT 2
22394: PUSH
22395: EMPTY
22396: LIST
22397: LIST
22398: PUSH
22399: LD_INT 3
22401: PUSH
22402: LD_INT 3
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 2
22411: PUSH
22412: LD_INT 3
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 4
22421: PUSH
22422: LD_INT 3
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: LD_INT 4
22431: PUSH
22432: LD_INT 4
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: LD_INT 3
22441: PUSH
22442: LD_INT 4
22444: PUSH
22445: EMPTY
22446: LIST
22447: LIST
22448: PUSH
22449: LD_INT 5
22451: PUSH
22452: LD_INT 4
22454: PUSH
22455: EMPTY
22456: LIST
22457: LIST
22458: PUSH
22459: LD_INT 5
22461: PUSH
22462: LD_INT 5
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: PUSH
22469: LD_INT 4
22471: PUSH
22472: LD_INT 5
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 6
22481: PUSH
22482: LD_INT 5
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 6
22491: PUSH
22492: LD_INT 6
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 5
22501: PUSH
22502: LD_INT 6
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
22523: LD_ADDR_VAR 0 32
22527: PUSH
22528: LD_INT 1
22530: PUSH
22531: LD_INT 3
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 0
22540: PUSH
22541: LD_INT 3
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 1
22550: NEG
22551: PUSH
22552: LD_INT 2
22554: PUSH
22555: EMPTY
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 1
22561: PUSH
22562: LD_INT 4
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 0
22571: PUSH
22572: LD_INT 4
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PUSH
22579: LD_INT 1
22581: NEG
22582: PUSH
22583: LD_INT 3
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: LD_INT 1
22592: PUSH
22593: LD_INT 5
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: PUSH
22600: LD_INT 0
22602: PUSH
22603: LD_INT 5
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 1
22612: NEG
22613: PUSH
22614: LD_INT 4
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 1
22623: PUSH
22624: LD_INT 6
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 0
22633: PUSH
22634: LD_INT 6
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: LD_INT 1
22643: NEG
22644: PUSH
22645: LD_INT 5
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: LIST
22656: LIST
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
22666: LD_ADDR_VAR 0 33
22670: PUSH
22671: LD_INT 2
22673: NEG
22674: PUSH
22675: LD_INT 1
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 3
22684: NEG
22685: PUSH
22686: LD_INT 0
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 3
22695: NEG
22696: PUSH
22697: LD_INT 1
22699: NEG
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 3
22707: NEG
22708: PUSH
22709: LD_INT 1
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 4
22718: NEG
22719: PUSH
22720: LD_INT 0
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 4
22729: NEG
22730: PUSH
22731: LD_INT 1
22733: NEG
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 4
22741: NEG
22742: PUSH
22743: LD_INT 1
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 5
22752: NEG
22753: PUSH
22754: LD_INT 0
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 5
22763: NEG
22764: PUSH
22765: LD_INT 1
22767: NEG
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 5
22775: NEG
22776: PUSH
22777: LD_INT 1
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 6
22786: NEG
22787: PUSH
22788: LD_INT 0
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: LD_INT 6
22797: NEG
22798: PUSH
22799: LD_INT 1
22801: NEG
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
22821: LD_ADDR_VAR 0 34
22825: PUSH
22826: LD_INT 2
22828: NEG
22829: PUSH
22830: LD_INT 3
22832: NEG
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 3
22840: NEG
22841: PUSH
22842: LD_INT 2
22844: NEG
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 3
22852: NEG
22853: PUSH
22854: LD_INT 3
22856: NEG
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: PUSH
22862: LD_INT 3
22864: NEG
22865: PUSH
22866: LD_INT 4
22868: NEG
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: PUSH
22874: LD_INT 4
22876: NEG
22877: PUSH
22878: LD_INT 3
22880: NEG
22881: PUSH
22882: EMPTY
22883: LIST
22884: LIST
22885: PUSH
22886: LD_INT 4
22888: NEG
22889: PUSH
22890: LD_INT 4
22892: NEG
22893: PUSH
22894: EMPTY
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 4
22900: NEG
22901: PUSH
22902: LD_INT 5
22904: NEG
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PUSH
22910: LD_INT 5
22912: NEG
22913: PUSH
22914: LD_INT 4
22916: NEG
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: LD_INT 5
22924: NEG
22925: PUSH
22926: LD_INT 5
22928: NEG
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PUSH
22934: LD_INT 5
22936: NEG
22937: PUSH
22938: LD_INT 6
22940: NEG
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PUSH
22946: LD_INT 6
22948: NEG
22949: PUSH
22950: LD_INT 5
22952: NEG
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 6
22960: NEG
22961: PUSH
22962: LD_INT 6
22964: NEG
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
22984: LD_ADDR_VAR 0 41
22988: PUSH
22989: LD_INT 0
22991: PUSH
22992: LD_INT 2
22994: NEG
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 1
23002: NEG
23003: PUSH
23004: LD_INT 3
23006: NEG
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: PUSH
23012: LD_INT 1
23014: PUSH
23015: LD_INT 2
23017: NEG
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: LIST
23027: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
23028: LD_ADDR_VAR 0 42
23032: PUSH
23033: LD_INT 2
23035: PUSH
23036: LD_INT 0
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 2
23045: PUSH
23046: LD_INT 1
23048: NEG
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: PUSH
23054: LD_INT 3
23056: PUSH
23057: LD_INT 1
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: LIST
23068: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
23069: LD_ADDR_VAR 0 43
23073: PUSH
23074: LD_INT 2
23076: PUSH
23077: LD_INT 2
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PUSH
23084: LD_INT 3
23086: PUSH
23087: LD_INT 2
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PUSH
23094: LD_INT 2
23096: PUSH
23097: LD_INT 3
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: LIST
23108: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
23109: LD_ADDR_VAR 0 44
23113: PUSH
23114: LD_INT 0
23116: PUSH
23117: LD_INT 2
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 1
23126: PUSH
23127: LD_INT 3
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 1
23136: NEG
23137: PUSH
23138: LD_INT 2
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: LIST
23149: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
23150: LD_ADDR_VAR 0 45
23154: PUSH
23155: LD_INT 2
23157: NEG
23158: PUSH
23159: LD_INT 0
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 2
23168: NEG
23169: PUSH
23170: LD_INT 1
23172: PUSH
23173: EMPTY
23174: LIST
23175: LIST
23176: PUSH
23177: LD_INT 3
23179: NEG
23180: PUSH
23181: LD_INT 1
23183: NEG
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: LIST
23193: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
23194: LD_ADDR_VAR 0 46
23198: PUSH
23199: LD_INT 2
23201: NEG
23202: PUSH
23203: LD_INT 2
23205: NEG
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 2
23213: NEG
23214: PUSH
23215: LD_INT 3
23217: NEG
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: LD_INT 3
23225: NEG
23226: PUSH
23227: LD_INT 2
23229: NEG
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: LIST
23239: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
23240: LD_ADDR_VAR 0 47
23244: PUSH
23245: LD_INT 2
23247: NEG
23248: PUSH
23249: LD_INT 3
23251: NEG
23252: PUSH
23253: EMPTY
23254: LIST
23255: LIST
23256: PUSH
23257: LD_INT 1
23259: NEG
23260: PUSH
23261: LD_INT 3
23263: NEG
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
23273: LD_ADDR_VAR 0 48
23277: PUSH
23278: LD_INT 1
23280: PUSH
23281: LD_INT 2
23283: NEG
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PUSH
23289: LD_INT 2
23291: PUSH
23292: LD_INT 1
23294: NEG
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
23304: LD_ADDR_VAR 0 49
23308: PUSH
23309: LD_INT 3
23311: PUSH
23312: LD_INT 1
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: LD_INT 3
23321: PUSH
23322: LD_INT 2
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
23333: LD_ADDR_VAR 0 50
23337: PUSH
23338: LD_INT 2
23340: PUSH
23341: LD_INT 3
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 1
23350: PUSH
23351: LD_INT 3
23353: PUSH
23354: EMPTY
23355: LIST
23356: LIST
23357: PUSH
23358: EMPTY
23359: LIST
23360: LIST
23361: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
23362: LD_ADDR_VAR 0 51
23366: PUSH
23367: LD_INT 1
23369: NEG
23370: PUSH
23371: LD_INT 2
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: PUSH
23378: LD_INT 2
23380: NEG
23381: PUSH
23382: LD_INT 1
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PUSH
23389: EMPTY
23390: LIST
23391: LIST
23392: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
23393: LD_ADDR_VAR 0 52
23397: PUSH
23398: LD_INT 3
23400: NEG
23401: PUSH
23402: LD_INT 1
23404: NEG
23405: PUSH
23406: EMPTY
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 3
23412: NEG
23413: PUSH
23414: LD_INT 2
23416: NEG
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
23426: LD_ADDR_VAR 0 53
23430: PUSH
23431: LD_INT 1
23433: NEG
23434: PUSH
23435: LD_INT 3
23437: NEG
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 0
23445: PUSH
23446: LD_INT 3
23448: NEG
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 1
23456: PUSH
23457: LD_INT 2
23459: NEG
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: LIST
23469: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
23470: LD_ADDR_VAR 0 54
23474: PUSH
23475: LD_INT 2
23477: PUSH
23478: LD_INT 1
23480: NEG
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 3
23488: PUSH
23489: LD_INT 0
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: LD_INT 3
23498: PUSH
23499: LD_INT 1
23501: PUSH
23502: EMPTY
23503: LIST
23504: LIST
23505: PUSH
23506: EMPTY
23507: LIST
23508: LIST
23509: LIST
23510: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
23511: LD_ADDR_VAR 0 55
23515: PUSH
23516: LD_INT 3
23518: PUSH
23519: LD_INT 2
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 3
23528: PUSH
23529: LD_INT 3
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 2
23538: PUSH
23539: LD_INT 3
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: LIST
23550: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23551: LD_ADDR_VAR 0 56
23555: PUSH
23556: LD_INT 1
23558: PUSH
23559: LD_INT 3
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: LD_INT 0
23568: PUSH
23569: LD_INT 3
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: PUSH
23576: LD_INT 1
23578: NEG
23579: PUSH
23580: LD_INT 2
23582: PUSH
23583: EMPTY
23584: LIST
23585: LIST
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: LIST
23591: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23592: LD_ADDR_VAR 0 57
23596: PUSH
23597: LD_INT 2
23599: NEG
23600: PUSH
23601: LD_INT 1
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 3
23610: NEG
23611: PUSH
23612: LD_INT 0
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 3
23621: NEG
23622: PUSH
23623: LD_INT 1
23625: NEG
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: LIST
23635: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23636: LD_ADDR_VAR 0 58
23640: PUSH
23641: LD_INT 2
23643: NEG
23644: PUSH
23645: LD_INT 3
23647: NEG
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: LD_INT 3
23655: NEG
23656: PUSH
23657: LD_INT 2
23659: NEG
23660: PUSH
23661: EMPTY
23662: LIST
23663: LIST
23664: PUSH
23665: LD_INT 3
23667: NEG
23668: PUSH
23669: LD_INT 3
23671: NEG
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: LIST
23681: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
23682: LD_ADDR_VAR 0 59
23686: PUSH
23687: LD_INT 1
23689: NEG
23690: PUSH
23691: LD_INT 2
23693: NEG
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 0
23701: PUSH
23702: LD_INT 2
23704: NEG
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 1
23712: PUSH
23713: LD_INT 1
23715: NEG
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: LIST
23725: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
23726: LD_ADDR_VAR 0 60
23730: PUSH
23731: LD_INT 1
23733: PUSH
23734: LD_INT 1
23736: NEG
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: LD_INT 2
23744: PUSH
23745: LD_INT 0
23747: PUSH
23748: EMPTY
23749: LIST
23750: LIST
23751: PUSH
23752: LD_INT 2
23754: PUSH
23755: LD_INT 1
23757: PUSH
23758: EMPTY
23759: LIST
23760: LIST
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: LIST
23766: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
23767: LD_ADDR_VAR 0 61
23771: PUSH
23772: LD_INT 2
23774: PUSH
23775: LD_INT 1
23777: PUSH
23778: EMPTY
23779: LIST
23780: LIST
23781: PUSH
23782: LD_INT 2
23784: PUSH
23785: LD_INT 2
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PUSH
23792: LD_INT 1
23794: PUSH
23795: LD_INT 2
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: LIST
23806: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
23807: LD_ADDR_VAR 0 62
23811: PUSH
23812: LD_INT 1
23814: PUSH
23815: LD_INT 2
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 0
23824: PUSH
23825: LD_INT 2
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: LD_INT 1
23834: NEG
23835: PUSH
23836: LD_INT 1
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: LIST
23847: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
23848: LD_ADDR_VAR 0 63
23852: PUSH
23853: LD_INT 1
23855: NEG
23856: PUSH
23857: LD_INT 1
23859: PUSH
23860: EMPTY
23861: LIST
23862: LIST
23863: PUSH
23864: LD_INT 2
23866: NEG
23867: PUSH
23868: LD_INT 0
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 2
23877: NEG
23878: PUSH
23879: LD_INT 1
23881: NEG
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PUSH
23887: EMPTY
23888: LIST
23889: LIST
23890: LIST
23891: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
23892: LD_ADDR_VAR 0 64
23896: PUSH
23897: LD_INT 1
23899: NEG
23900: PUSH
23901: LD_INT 2
23903: NEG
23904: PUSH
23905: EMPTY
23906: LIST
23907: LIST
23908: PUSH
23909: LD_INT 2
23911: NEG
23912: PUSH
23913: LD_INT 1
23915: NEG
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: PUSH
23921: LD_INT 2
23923: NEG
23924: PUSH
23925: LD_INT 2
23927: NEG
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: EMPTY
23934: LIST
23935: LIST
23936: LIST
23937: ST_TO_ADDR
// end ; 2 :
23938: GO 27204
23940: LD_INT 2
23942: DOUBLE
23943: EQUAL
23944: IFTRUE 23948
23946: GO 27203
23948: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
23949: LD_ADDR_VAR 0 29
23953: PUSH
23954: LD_INT 4
23956: PUSH
23957: LD_INT 0
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 4
23966: PUSH
23967: LD_INT 1
23969: NEG
23970: PUSH
23971: EMPTY
23972: LIST
23973: LIST
23974: PUSH
23975: LD_INT 5
23977: PUSH
23978: LD_INT 0
23980: PUSH
23981: EMPTY
23982: LIST
23983: LIST
23984: PUSH
23985: LD_INT 5
23987: PUSH
23988: LD_INT 1
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 4
23997: PUSH
23998: LD_INT 1
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 3
24007: PUSH
24008: LD_INT 0
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 3
24017: PUSH
24018: LD_INT 1
24020: NEG
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: PUSH
24026: LD_INT 3
24028: PUSH
24029: LD_INT 2
24031: NEG
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 5
24039: PUSH
24040: LD_INT 2
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: LD_INT 3
24049: PUSH
24050: LD_INT 3
24052: PUSH
24053: EMPTY
24054: LIST
24055: LIST
24056: PUSH
24057: LD_INT 3
24059: PUSH
24060: LD_INT 2
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 4
24069: PUSH
24070: LD_INT 3
24072: PUSH
24073: EMPTY
24074: LIST
24075: LIST
24076: PUSH
24077: LD_INT 4
24079: PUSH
24080: LD_INT 4
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: PUSH
24087: LD_INT 3
24089: PUSH
24090: LD_INT 4
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: PUSH
24097: LD_INT 2
24099: PUSH
24100: LD_INT 3
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: PUSH
24107: LD_INT 2
24109: PUSH
24110: LD_INT 2
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 4
24119: PUSH
24120: LD_INT 2
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 2
24129: PUSH
24130: LD_INT 4
24132: PUSH
24133: EMPTY
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 0
24139: PUSH
24140: LD_INT 4
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 0
24149: PUSH
24150: LD_INT 3
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: LD_INT 4
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 1
24169: PUSH
24170: LD_INT 5
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 0
24179: PUSH
24180: LD_INT 5
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 1
24189: NEG
24190: PUSH
24191: LD_INT 4
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 1
24200: NEG
24201: PUSH
24202: LD_INT 3
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: PUSH
24209: LD_INT 2
24211: PUSH
24212: LD_INT 5
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PUSH
24219: LD_INT 2
24221: NEG
24222: PUSH
24223: LD_INT 3
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: LD_INT 3
24232: NEG
24233: PUSH
24234: LD_INT 0
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 3
24243: NEG
24244: PUSH
24245: LD_INT 1
24247: NEG
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PUSH
24253: LD_INT 2
24255: NEG
24256: PUSH
24257: LD_INT 0
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 2
24266: NEG
24267: PUSH
24268: LD_INT 1
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 3
24277: NEG
24278: PUSH
24279: LD_INT 1
24281: PUSH
24282: EMPTY
24283: LIST
24284: LIST
24285: PUSH
24286: LD_INT 4
24288: NEG
24289: PUSH
24290: LD_INT 0
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 4
24299: NEG
24300: PUSH
24301: LD_INT 1
24303: NEG
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: PUSH
24309: LD_INT 4
24311: NEG
24312: PUSH
24313: LD_INT 2
24315: NEG
24316: PUSH
24317: EMPTY
24318: LIST
24319: LIST
24320: PUSH
24321: LD_INT 2
24323: NEG
24324: PUSH
24325: LD_INT 2
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 4
24334: NEG
24335: PUSH
24336: LD_INT 4
24338: NEG
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: LD_INT 4
24346: NEG
24347: PUSH
24348: LD_INT 5
24350: NEG
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 3
24358: NEG
24359: PUSH
24360: LD_INT 4
24362: NEG
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PUSH
24368: LD_INT 3
24370: NEG
24371: PUSH
24372: LD_INT 3
24374: NEG
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 4
24382: NEG
24383: PUSH
24384: LD_INT 3
24386: NEG
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: LD_INT 5
24394: NEG
24395: PUSH
24396: LD_INT 4
24398: NEG
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 5
24406: NEG
24407: PUSH
24408: LD_INT 5
24410: NEG
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 3
24418: NEG
24419: PUSH
24420: LD_INT 5
24422: NEG
24423: PUSH
24424: EMPTY
24425: LIST
24426: LIST
24427: PUSH
24428: LD_INT 5
24430: NEG
24431: PUSH
24432: LD_INT 3
24434: NEG
24435: PUSH
24436: EMPTY
24437: LIST
24438: LIST
24439: PUSH
24440: EMPTY
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
24487: LD_ADDR_VAR 0 30
24491: PUSH
24492: LD_INT 4
24494: PUSH
24495: LD_INT 4
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PUSH
24502: LD_INT 4
24504: PUSH
24505: LD_INT 3
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PUSH
24512: LD_INT 5
24514: PUSH
24515: LD_INT 4
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: PUSH
24522: LD_INT 5
24524: PUSH
24525: LD_INT 5
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 4
24534: PUSH
24535: LD_INT 5
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: PUSH
24542: LD_INT 3
24544: PUSH
24545: LD_INT 4
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 3
24554: PUSH
24555: LD_INT 3
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 5
24564: PUSH
24565: LD_INT 3
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 3
24574: PUSH
24575: LD_INT 5
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 0
24584: PUSH
24585: LD_INT 3
24587: PUSH
24588: EMPTY
24589: LIST
24590: LIST
24591: PUSH
24592: LD_INT 0
24594: PUSH
24595: LD_INT 2
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: PUSH
24602: LD_INT 1
24604: PUSH
24605: LD_INT 3
24607: PUSH
24608: EMPTY
24609: LIST
24610: LIST
24611: PUSH
24612: LD_INT 1
24614: PUSH
24615: LD_INT 4
24617: PUSH
24618: EMPTY
24619: LIST
24620: LIST
24621: PUSH
24622: LD_INT 0
24624: PUSH
24625: LD_INT 4
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 1
24634: NEG
24635: PUSH
24636: LD_INT 3
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 1
24645: NEG
24646: PUSH
24647: LD_INT 2
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 2
24656: PUSH
24657: LD_INT 4
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 2
24666: NEG
24667: PUSH
24668: LD_INT 2
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 4
24677: NEG
24678: PUSH
24679: LD_INT 0
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 4
24688: NEG
24689: PUSH
24690: LD_INT 1
24692: NEG
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 3
24700: NEG
24701: PUSH
24702: LD_INT 0
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 3
24711: NEG
24712: PUSH
24713: LD_INT 1
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PUSH
24720: LD_INT 4
24722: NEG
24723: PUSH
24724: LD_INT 1
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 5
24733: NEG
24734: PUSH
24735: LD_INT 0
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 5
24744: NEG
24745: PUSH
24746: LD_INT 1
24748: NEG
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 5
24756: NEG
24757: PUSH
24758: LD_INT 2
24760: NEG
24761: PUSH
24762: EMPTY
24763: LIST
24764: LIST
24765: PUSH
24766: LD_INT 3
24768: NEG
24769: PUSH
24770: LD_INT 2
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 3
24779: NEG
24780: PUSH
24781: LD_INT 3
24783: NEG
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 3
24791: NEG
24792: PUSH
24793: LD_INT 4
24795: NEG
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 2
24803: NEG
24804: PUSH
24805: LD_INT 3
24807: NEG
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 2
24815: NEG
24816: PUSH
24817: LD_INT 2
24819: NEG
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 3
24827: NEG
24828: PUSH
24829: LD_INT 2
24831: NEG
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 4
24839: NEG
24840: PUSH
24841: LD_INT 3
24843: NEG
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 4
24851: NEG
24852: PUSH
24853: LD_INT 4
24855: NEG
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: PUSH
24861: LD_INT 2
24863: NEG
24864: PUSH
24865: LD_INT 4
24867: NEG
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 4
24875: NEG
24876: PUSH
24877: LD_INT 2
24879: NEG
24880: PUSH
24881: EMPTY
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 0
24887: PUSH
24888: LD_INT 4
24890: NEG
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 0
24898: PUSH
24899: LD_INT 5
24901: NEG
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 1
24909: PUSH
24910: LD_INT 4
24912: NEG
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 1
24920: PUSH
24921: LD_INT 3
24923: NEG
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: PUSH
24929: LD_INT 0
24931: PUSH
24932: LD_INT 3
24934: NEG
24935: PUSH
24936: EMPTY
24937: LIST
24938: LIST
24939: PUSH
24940: LD_INT 1
24942: NEG
24943: PUSH
24944: LD_INT 4
24946: NEG
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: LD_INT 1
24954: NEG
24955: PUSH
24956: LD_INT 5
24958: NEG
24959: PUSH
24960: EMPTY
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 2
24966: PUSH
24967: LD_INT 3
24969: NEG
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 2
24977: NEG
24978: PUSH
24979: LD_INT 5
24981: NEG
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: LIST
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: LIST
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
25034: LD_ADDR_VAR 0 31
25038: PUSH
25039: LD_INT 0
25041: PUSH
25042: LD_INT 4
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 0
25051: PUSH
25052: LD_INT 3
25054: PUSH
25055: EMPTY
25056: LIST
25057: LIST
25058: PUSH
25059: LD_INT 1
25061: PUSH
25062: LD_INT 4
25064: PUSH
25065: EMPTY
25066: LIST
25067: LIST
25068: PUSH
25069: LD_INT 1
25071: PUSH
25072: LD_INT 5
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: PUSH
25079: LD_INT 0
25081: PUSH
25082: LD_INT 5
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 1
25091: NEG
25092: PUSH
25093: LD_INT 4
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 1
25102: NEG
25103: PUSH
25104: LD_INT 3
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 2
25113: PUSH
25114: LD_INT 5
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: LD_INT 2
25123: NEG
25124: PUSH
25125: LD_INT 3
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 3
25134: NEG
25135: PUSH
25136: LD_INT 0
25138: PUSH
25139: EMPTY
25140: LIST
25141: LIST
25142: PUSH
25143: LD_INT 3
25145: NEG
25146: PUSH
25147: LD_INT 1
25149: NEG
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 2
25157: NEG
25158: PUSH
25159: LD_INT 0
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 2
25168: NEG
25169: PUSH
25170: LD_INT 1
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: PUSH
25177: LD_INT 3
25179: NEG
25180: PUSH
25181: LD_INT 1
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 4
25190: NEG
25191: PUSH
25192: LD_INT 0
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: PUSH
25199: LD_INT 4
25201: NEG
25202: PUSH
25203: LD_INT 1
25205: NEG
25206: PUSH
25207: EMPTY
25208: LIST
25209: LIST
25210: PUSH
25211: LD_INT 4
25213: NEG
25214: PUSH
25215: LD_INT 2
25217: NEG
25218: PUSH
25219: EMPTY
25220: LIST
25221: LIST
25222: PUSH
25223: LD_INT 2
25225: NEG
25226: PUSH
25227: LD_INT 2
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 4
25236: NEG
25237: PUSH
25238: LD_INT 4
25240: NEG
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 4
25248: NEG
25249: PUSH
25250: LD_INT 5
25252: NEG
25253: PUSH
25254: EMPTY
25255: LIST
25256: LIST
25257: PUSH
25258: LD_INT 3
25260: NEG
25261: PUSH
25262: LD_INT 4
25264: NEG
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 3
25272: NEG
25273: PUSH
25274: LD_INT 3
25276: NEG
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 4
25284: NEG
25285: PUSH
25286: LD_INT 3
25288: NEG
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: LD_INT 5
25296: NEG
25297: PUSH
25298: LD_INT 4
25300: NEG
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: LD_INT 5
25308: NEG
25309: PUSH
25310: LD_INT 5
25312: NEG
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: PUSH
25318: LD_INT 3
25320: NEG
25321: PUSH
25322: LD_INT 5
25324: NEG
25325: PUSH
25326: EMPTY
25327: LIST
25328: LIST
25329: PUSH
25330: LD_INT 5
25332: NEG
25333: PUSH
25334: LD_INT 3
25336: NEG
25337: PUSH
25338: EMPTY
25339: LIST
25340: LIST
25341: PUSH
25342: LD_INT 0
25344: PUSH
25345: LD_INT 3
25347: NEG
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 0
25355: PUSH
25356: LD_INT 4
25358: NEG
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 1
25366: PUSH
25367: LD_INT 3
25369: NEG
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 1
25377: PUSH
25378: LD_INT 2
25380: NEG
25381: PUSH
25382: EMPTY
25383: LIST
25384: LIST
25385: PUSH
25386: LD_INT 0
25388: PUSH
25389: LD_INT 2
25391: NEG
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 1
25399: NEG
25400: PUSH
25401: LD_INT 3
25403: NEG
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PUSH
25409: LD_INT 1
25411: NEG
25412: PUSH
25413: LD_INT 4
25415: NEG
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PUSH
25421: LD_INT 2
25423: PUSH
25424: LD_INT 2
25426: NEG
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 2
25434: NEG
25435: PUSH
25436: LD_INT 4
25438: NEG
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 4
25446: PUSH
25447: LD_INT 0
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 4
25456: PUSH
25457: LD_INT 1
25459: NEG
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 5
25467: PUSH
25468: LD_INT 0
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 5
25477: PUSH
25478: LD_INT 1
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 4
25487: PUSH
25488: LD_INT 1
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 3
25497: PUSH
25498: LD_INT 0
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 3
25507: PUSH
25508: LD_INT 1
25510: NEG
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: LD_INT 3
25518: PUSH
25519: LD_INT 2
25521: NEG
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 5
25529: PUSH
25530: LD_INT 2
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
25584: LD_ADDR_VAR 0 32
25588: PUSH
25589: LD_INT 4
25591: NEG
25592: PUSH
25593: LD_INT 0
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 4
25602: NEG
25603: PUSH
25604: LD_INT 1
25606: NEG
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: LD_INT 3
25614: NEG
25615: PUSH
25616: LD_INT 0
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 3
25625: NEG
25626: PUSH
25627: LD_INT 1
25629: PUSH
25630: EMPTY
25631: LIST
25632: LIST
25633: PUSH
25634: LD_INT 4
25636: NEG
25637: PUSH
25638: LD_INT 1
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: LD_INT 5
25647: NEG
25648: PUSH
25649: LD_INT 0
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 5
25658: NEG
25659: PUSH
25660: LD_INT 1
25662: NEG
25663: PUSH
25664: EMPTY
25665: LIST
25666: LIST
25667: PUSH
25668: LD_INT 5
25670: NEG
25671: PUSH
25672: LD_INT 2
25674: NEG
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PUSH
25680: LD_INT 3
25682: NEG
25683: PUSH
25684: LD_INT 2
25686: PUSH
25687: EMPTY
25688: LIST
25689: LIST
25690: PUSH
25691: LD_INT 3
25693: NEG
25694: PUSH
25695: LD_INT 3
25697: NEG
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 3
25705: NEG
25706: PUSH
25707: LD_INT 4
25709: NEG
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 2
25717: NEG
25718: PUSH
25719: LD_INT 3
25721: NEG
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 2
25729: NEG
25730: PUSH
25731: LD_INT 2
25733: NEG
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 3
25741: NEG
25742: PUSH
25743: LD_INT 2
25745: NEG
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 4
25753: NEG
25754: PUSH
25755: LD_INT 3
25757: NEG
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 4
25765: NEG
25766: PUSH
25767: LD_INT 4
25769: NEG
25770: PUSH
25771: EMPTY
25772: LIST
25773: LIST
25774: PUSH
25775: LD_INT 2
25777: NEG
25778: PUSH
25779: LD_INT 4
25781: NEG
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 4
25789: NEG
25790: PUSH
25791: LD_INT 2
25793: NEG
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 0
25801: PUSH
25802: LD_INT 4
25804: NEG
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 0
25812: PUSH
25813: LD_INT 5
25815: NEG
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 1
25823: PUSH
25824: LD_INT 4
25826: NEG
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PUSH
25832: LD_INT 1
25834: PUSH
25835: LD_INT 3
25837: NEG
25838: PUSH
25839: EMPTY
25840: LIST
25841: LIST
25842: PUSH
25843: LD_INT 0
25845: PUSH
25846: LD_INT 3
25848: NEG
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 1
25856: NEG
25857: PUSH
25858: LD_INT 4
25860: NEG
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 1
25868: NEG
25869: PUSH
25870: LD_INT 5
25872: NEG
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 2
25880: PUSH
25881: LD_INT 3
25883: NEG
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 2
25891: NEG
25892: PUSH
25893: LD_INT 5
25895: NEG
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 3
25903: PUSH
25904: LD_INT 0
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 3
25913: PUSH
25914: LD_INT 1
25916: NEG
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 4
25924: PUSH
25925: LD_INT 0
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 4
25934: PUSH
25935: LD_INT 1
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 3
25944: PUSH
25945: LD_INT 1
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 2
25954: PUSH
25955: LD_INT 0
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PUSH
25962: LD_INT 2
25964: PUSH
25965: LD_INT 1
25967: NEG
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 2
25975: PUSH
25976: LD_INT 2
25978: NEG
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 4
25986: PUSH
25987: LD_INT 2
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 4
25996: PUSH
25997: LD_INT 4
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: LD_INT 4
26006: PUSH
26007: LD_INT 3
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PUSH
26014: LD_INT 5
26016: PUSH
26017: LD_INT 4
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 5
26026: PUSH
26027: LD_INT 5
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PUSH
26034: LD_INT 4
26036: PUSH
26037: LD_INT 5
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 3
26046: PUSH
26047: LD_INT 4
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 3
26056: PUSH
26057: LD_INT 3
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 5
26066: PUSH
26067: LD_INT 3
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 3
26076: PUSH
26077: LD_INT 5
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: LIST
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
26131: LD_ADDR_VAR 0 33
26135: PUSH
26136: LD_INT 4
26138: NEG
26139: PUSH
26140: LD_INT 4
26142: NEG
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 4
26150: NEG
26151: PUSH
26152: LD_INT 5
26154: NEG
26155: PUSH
26156: EMPTY
26157: LIST
26158: LIST
26159: PUSH
26160: LD_INT 3
26162: NEG
26163: PUSH
26164: LD_INT 4
26166: NEG
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 3
26174: NEG
26175: PUSH
26176: LD_INT 3
26178: NEG
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 4
26186: NEG
26187: PUSH
26188: LD_INT 3
26190: NEG
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 5
26198: NEG
26199: PUSH
26200: LD_INT 4
26202: NEG
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 5
26210: NEG
26211: PUSH
26212: LD_INT 5
26214: NEG
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: LD_INT 3
26222: NEG
26223: PUSH
26224: LD_INT 5
26226: NEG
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PUSH
26232: LD_INT 5
26234: NEG
26235: PUSH
26236: LD_INT 3
26238: NEG
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 0
26246: PUSH
26247: LD_INT 3
26249: NEG
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 0
26257: PUSH
26258: LD_INT 4
26260: NEG
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 1
26268: PUSH
26269: LD_INT 3
26271: NEG
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 1
26279: PUSH
26280: LD_INT 2
26282: NEG
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: PUSH
26288: LD_INT 0
26290: PUSH
26291: LD_INT 2
26293: NEG
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 1
26301: NEG
26302: PUSH
26303: LD_INT 3
26305: NEG
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 1
26313: NEG
26314: PUSH
26315: LD_INT 4
26317: NEG
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 2
26325: PUSH
26326: LD_INT 2
26328: NEG
26329: PUSH
26330: EMPTY
26331: LIST
26332: LIST
26333: PUSH
26334: LD_INT 2
26336: NEG
26337: PUSH
26338: LD_INT 4
26340: NEG
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 4
26348: PUSH
26349: LD_INT 0
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 4
26358: PUSH
26359: LD_INT 1
26361: NEG
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: LD_INT 5
26369: PUSH
26370: LD_INT 0
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 5
26379: PUSH
26380: LD_INT 1
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 4
26389: PUSH
26390: LD_INT 1
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 3
26399: PUSH
26400: LD_INT 0
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 3
26409: PUSH
26410: LD_INT 1
26412: NEG
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PUSH
26418: LD_INT 3
26420: PUSH
26421: LD_INT 2
26423: NEG
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: PUSH
26429: LD_INT 5
26431: PUSH
26432: LD_INT 2
26434: PUSH
26435: EMPTY
26436: LIST
26437: LIST
26438: PUSH
26439: LD_INT 3
26441: PUSH
26442: LD_INT 3
26444: PUSH
26445: EMPTY
26446: LIST
26447: LIST
26448: PUSH
26449: LD_INT 3
26451: PUSH
26452: LD_INT 2
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 4
26461: PUSH
26462: LD_INT 3
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 4
26471: PUSH
26472: LD_INT 4
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 3
26481: PUSH
26482: LD_INT 4
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 2
26491: PUSH
26492: LD_INT 3
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 2
26501: PUSH
26502: LD_INT 2
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 4
26511: PUSH
26512: LD_INT 2
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 2
26521: PUSH
26522: LD_INT 4
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 0
26531: PUSH
26532: LD_INT 4
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 0
26541: PUSH
26542: LD_INT 3
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 1
26551: PUSH
26552: LD_INT 4
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 1
26561: PUSH
26562: LD_INT 5
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 0
26571: PUSH
26572: LD_INT 5
26574: PUSH
26575: EMPTY
26576: LIST
26577: LIST
26578: PUSH
26579: LD_INT 1
26581: NEG
26582: PUSH
26583: LD_INT 4
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 1
26592: NEG
26593: PUSH
26594: LD_INT 3
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PUSH
26601: LD_INT 2
26603: PUSH
26604: LD_INT 5
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: PUSH
26611: LD_INT 2
26613: NEG
26614: PUSH
26615: LD_INT 3
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
26669: LD_ADDR_VAR 0 34
26673: PUSH
26674: LD_INT 0
26676: PUSH
26677: LD_INT 4
26679: NEG
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 0
26687: PUSH
26688: LD_INT 5
26690: NEG
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 1
26698: PUSH
26699: LD_INT 4
26701: NEG
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: LD_INT 1
26709: PUSH
26710: LD_INT 3
26712: NEG
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 0
26720: PUSH
26721: LD_INT 3
26723: NEG
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: PUSH
26729: LD_INT 1
26731: NEG
26732: PUSH
26733: LD_INT 4
26735: NEG
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: LD_INT 1
26743: NEG
26744: PUSH
26745: LD_INT 5
26747: NEG
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 2
26755: PUSH
26756: LD_INT 3
26758: NEG
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: PUSH
26764: LD_INT 2
26766: NEG
26767: PUSH
26768: LD_INT 5
26770: NEG
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 3
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 3
26788: PUSH
26789: LD_INT 1
26791: NEG
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 4
26799: PUSH
26800: LD_INT 0
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 4
26809: PUSH
26810: LD_INT 1
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: LD_INT 3
26819: PUSH
26820: LD_INT 1
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: PUSH
26827: LD_INT 2
26829: PUSH
26830: LD_INT 0
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 2
26839: PUSH
26840: LD_INT 1
26842: NEG
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 2
26850: PUSH
26851: LD_INT 2
26853: NEG
26854: PUSH
26855: EMPTY
26856: LIST
26857: LIST
26858: PUSH
26859: LD_INT 4
26861: PUSH
26862: LD_INT 2
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 4
26871: PUSH
26872: LD_INT 4
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 4
26881: PUSH
26882: LD_INT 3
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 5
26891: PUSH
26892: LD_INT 4
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: PUSH
26899: LD_INT 5
26901: PUSH
26902: LD_INT 5
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PUSH
26909: LD_INT 4
26911: PUSH
26912: LD_INT 5
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 3
26921: PUSH
26922: LD_INT 4
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 3
26931: PUSH
26932: LD_INT 3
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 5
26941: PUSH
26942: LD_INT 3
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 3
26951: PUSH
26952: LD_INT 5
26954: PUSH
26955: EMPTY
26956: LIST
26957: LIST
26958: PUSH
26959: LD_INT 0
26961: PUSH
26962: LD_INT 3
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: PUSH
26969: LD_INT 0
26971: PUSH
26972: LD_INT 2
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: PUSH
26979: LD_INT 1
26981: PUSH
26982: LD_INT 3
26984: PUSH
26985: EMPTY
26986: LIST
26987: LIST
26988: PUSH
26989: LD_INT 1
26991: PUSH
26992: LD_INT 4
26994: PUSH
26995: EMPTY
26996: LIST
26997: LIST
26998: PUSH
26999: LD_INT 0
27001: PUSH
27002: LD_INT 4
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: PUSH
27009: LD_INT 1
27011: NEG
27012: PUSH
27013: LD_INT 3
27015: PUSH
27016: EMPTY
27017: LIST
27018: LIST
27019: PUSH
27020: LD_INT 1
27022: NEG
27023: PUSH
27024: LD_INT 2
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 2
27033: PUSH
27034: LD_INT 4
27036: PUSH
27037: EMPTY
27038: LIST
27039: LIST
27040: PUSH
27041: LD_INT 2
27043: NEG
27044: PUSH
27045: LD_INT 2
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: PUSH
27052: LD_INT 4
27054: NEG
27055: PUSH
27056: LD_INT 0
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: PUSH
27063: LD_INT 4
27065: NEG
27066: PUSH
27067: LD_INT 1
27069: NEG
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 3
27077: NEG
27078: PUSH
27079: LD_INT 0
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: PUSH
27086: LD_INT 3
27088: NEG
27089: PUSH
27090: LD_INT 1
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 4
27099: NEG
27100: PUSH
27101: LD_INT 1
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 5
27110: NEG
27111: PUSH
27112: LD_INT 0
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 5
27121: NEG
27122: PUSH
27123: LD_INT 1
27125: NEG
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: PUSH
27131: LD_INT 5
27133: NEG
27134: PUSH
27135: LD_INT 2
27137: NEG
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 3
27145: NEG
27146: PUSH
27147: LD_INT 2
27149: PUSH
27150: EMPTY
27151: LIST
27152: LIST
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: ST_TO_ADDR
// end ; end ;
27201: GO 27204
27203: POP
// case btype of b_depot , b_warehouse :
27204: LD_VAR 0 1
27208: PUSH
27209: LD_INT 0
27211: DOUBLE
27212: EQUAL
27213: IFTRUE 27223
27215: LD_INT 1
27217: DOUBLE
27218: EQUAL
27219: IFTRUE 27223
27221: GO 27424
27223: POP
// case nation of nation_american :
27224: LD_VAR 0 5
27228: PUSH
27229: LD_INT 1
27231: DOUBLE
27232: EQUAL
27233: IFTRUE 27237
27235: GO 27293
27237: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
27238: LD_ADDR_VAR 0 9
27242: PUSH
27243: LD_VAR 0 11
27247: PUSH
27248: LD_VAR 0 12
27252: PUSH
27253: LD_VAR 0 13
27257: PUSH
27258: LD_VAR 0 14
27262: PUSH
27263: LD_VAR 0 15
27267: PUSH
27268: LD_VAR 0 16
27272: PUSH
27273: EMPTY
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: PUSH
27281: LD_VAR 0 4
27285: PUSH
27286: LD_INT 1
27288: PLUS
27289: ARRAY
27290: ST_TO_ADDR
27291: GO 27422
27293: LD_INT 2
27295: DOUBLE
27296: EQUAL
27297: IFTRUE 27301
27299: GO 27357
27301: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
27302: LD_ADDR_VAR 0 9
27306: PUSH
27307: LD_VAR 0 17
27311: PUSH
27312: LD_VAR 0 18
27316: PUSH
27317: LD_VAR 0 19
27321: PUSH
27322: LD_VAR 0 20
27326: PUSH
27327: LD_VAR 0 21
27331: PUSH
27332: LD_VAR 0 22
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: PUSH
27345: LD_VAR 0 4
27349: PUSH
27350: LD_INT 1
27352: PLUS
27353: ARRAY
27354: ST_TO_ADDR
27355: GO 27422
27357: LD_INT 3
27359: DOUBLE
27360: EQUAL
27361: IFTRUE 27365
27363: GO 27421
27365: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
27366: LD_ADDR_VAR 0 9
27370: PUSH
27371: LD_VAR 0 23
27375: PUSH
27376: LD_VAR 0 24
27380: PUSH
27381: LD_VAR 0 25
27385: PUSH
27386: LD_VAR 0 26
27390: PUSH
27391: LD_VAR 0 27
27395: PUSH
27396: LD_VAR 0 28
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: LIST
27405: LIST
27406: LIST
27407: LIST
27408: PUSH
27409: LD_VAR 0 4
27413: PUSH
27414: LD_INT 1
27416: PLUS
27417: ARRAY
27418: ST_TO_ADDR
27419: GO 27422
27421: POP
27422: GO 27971
27424: LD_INT 2
27426: DOUBLE
27427: EQUAL
27428: IFTRUE 27438
27430: LD_INT 3
27432: DOUBLE
27433: EQUAL
27434: IFTRUE 27438
27436: GO 27494
27438: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
27439: LD_ADDR_VAR 0 9
27443: PUSH
27444: LD_VAR 0 29
27448: PUSH
27449: LD_VAR 0 30
27453: PUSH
27454: LD_VAR 0 31
27458: PUSH
27459: LD_VAR 0 32
27463: PUSH
27464: LD_VAR 0 33
27468: PUSH
27469: LD_VAR 0 34
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: PUSH
27482: LD_VAR 0 4
27486: PUSH
27487: LD_INT 1
27489: PLUS
27490: ARRAY
27491: ST_TO_ADDR
27492: GO 27971
27494: LD_INT 16
27496: DOUBLE
27497: EQUAL
27498: IFTRUE 27550
27500: LD_INT 17
27502: DOUBLE
27503: EQUAL
27504: IFTRUE 27550
27506: LD_INT 18
27508: DOUBLE
27509: EQUAL
27510: IFTRUE 27550
27512: LD_INT 19
27514: DOUBLE
27515: EQUAL
27516: IFTRUE 27550
27518: LD_INT 20
27520: DOUBLE
27521: EQUAL
27522: IFTRUE 27550
27524: LD_INT 21
27526: DOUBLE
27527: EQUAL
27528: IFTRUE 27550
27530: LD_INT 23
27532: DOUBLE
27533: EQUAL
27534: IFTRUE 27550
27536: LD_INT 24
27538: DOUBLE
27539: EQUAL
27540: IFTRUE 27550
27542: LD_INT 25
27544: DOUBLE
27545: EQUAL
27546: IFTRUE 27550
27548: GO 27606
27550: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
27551: LD_ADDR_VAR 0 9
27555: PUSH
27556: LD_VAR 0 35
27560: PUSH
27561: LD_VAR 0 36
27565: PUSH
27566: LD_VAR 0 37
27570: PUSH
27571: LD_VAR 0 38
27575: PUSH
27576: LD_VAR 0 39
27580: PUSH
27581: LD_VAR 0 40
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: PUSH
27594: LD_VAR 0 4
27598: PUSH
27599: LD_INT 1
27601: PLUS
27602: ARRAY
27603: ST_TO_ADDR
27604: GO 27971
27606: LD_INT 6
27608: DOUBLE
27609: EQUAL
27610: IFTRUE 27662
27612: LD_INT 7
27614: DOUBLE
27615: EQUAL
27616: IFTRUE 27662
27618: LD_INT 8
27620: DOUBLE
27621: EQUAL
27622: IFTRUE 27662
27624: LD_INT 13
27626: DOUBLE
27627: EQUAL
27628: IFTRUE 27662
27630: LD_INT 12
27632: DOUBLE
27633: EQUAL
27634: IFTRUE 27662
27636: LD_INT 15
27638: DOUBLE
27639: EQUAL
27640: IFTRUE 27662
27642: LD_INT 11
27644: DOUBLE
27645: EQUAL
27646: IFTRUE 27662
27648: LD_INT 14
27650: DOUBLE
27651: EQUAL
27652: IFTRUE 27662
27654: LD_INT 10
27656: DOUBLE
27657: EQUAL
27658: IFTRUE 27662
27660: GO 27718
27662: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
27663: LD_ADDR_VAR 0 9
27667: PUSH
27668: LD_VAR 0 41
27672: PUSH
27673: LD_VAR 0 42
27677: PUSH
27678: LD_VAR 0 43
27682: PUSH
27683: LD_VAR 0 44
27687: PUSH
27688: LD_VAR 0 45
27692: PUSH
27693: LD_VAR 0 46
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: PUSH
27706: LD_VAR 0 4
27710: PUSH
27711: LD_INT 1
27713: PLUS
27714: ARRAY
27715: ST_TO_ADDR
27716: GO 27971
27718: LD_INT 36
27720: DOUBLE
27721: EQUAL
27722: IFTRUE 27726
27724: GO 27782
27726: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
27727: LD_ADDR_VAR 0 9
27731: PUSH
27732: LD_VAR 0 47
27736: PUSH
27737: LD_VAR 0 48
27741: PUSH
27742: LD_VAR 0 49
27746: PUSH
27747: LD_VAR 0 50
27751: PUSH
27752: LD_VAR 0 51
27756: PUSH
27757: LD_VAR 0 52
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: PUSH
27770: LD_VAR 0 4
27774: PUSH
27775: LD_INT 1
27777: PLUS
27778: ARRAY
27779: ST_TO_ADDR
27780: GO 27971
27782: LD_INT 4
27784: DOUBLE
27785: EQUAL
27786: IFTRUE 27808
27788: LD_INT 5
27790: DOUBLE
27791: EQUAL
27792: IFTRUE 27808
27794: LD_INT 34
27796: DOUBLE
27797: EQUAL
27798: IFTRUE 27808
27800: LD_INT 37
27802: DOUBLE
27803: EQUAL
27804: IFTRUE 27808
27806: GO 27864
27808: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
27809: LD_ADDR_VAR 0 9
27813: PUSH
27814: LD_VAR 0 53
27818: PUSH
27819: LD_VAR 0 54
27823: PUSH
27824: LD_VAR 0 55
27828: PUSH
27829: LD_VAR 0 56
27833: PUSH
27834: LD_VAR 0 57
27838: PUSH
27839: LD_VAR 0 58
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: PUSH
27852: LD_VAR 0 4
27856: PUSH
27857: LD_INT 1
27859: PLUS
27860: ARRAY
27861: ST_TO_ADDR
27862: GO 27971
27864: LD_INT 31
27866: DOUBLE
27867: EQUAL
27868: IFTRUE 27914
27870: LD_INT 32
27872: DOUBLE
27873: EQUAL
27874: IFTRUE 27914
27876: LD_INT 33
27878: DOUBLE
27879: EQUAL
27880: IFTRUE 27914
27882: LD_INT 27
27884: DOUBLE
27885: EQUAL
27886: IFTRUE 27914
27888: LD_INT 26
27890: DOUBLE
27891: EQUAL
27892: IFTRUE 27914
27894: LD_INT 28
27896: DOUBLE
27897: EQUAL
27898: IFTRUE 27914
27900: LD_INT 29
27902: DOUBLE
27903: EQUAL
27904: IFTRUE 27914
27906: LD_INT 30
27908: DOUBLE
27909: EQUAL
27910: IFTRUE 27914
27912: GO 27970
27914: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
27915: LD_ADDR_VAR 0 9
27919: PUSH
27920: LD_VAR 0 59
27924: PUSH
27925: LD_VAR 0 60
27929: PUSH
27930: LD_VAR 0 61
27934: PUSH
27935: LD_VAR 0 62
27939: PUSH
27940: LD_VAR 0 63
27944: PUSH
27945: LD_VAR 0 64
27949: PUSH
27950: EMPTY
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: PUSH
27958: LD_VAR 0 4
27962: PUSH
27963: LD_INT 1
27965: PLUS
27966: ARRAY
27967: ST_TO_ADDR
27968: GO 27971
27970: POP
// temp_list2 = [ ] ;
27971: LD_ADDR_VAR 0 10
27975: PUSH
27976: EMPTY
27977: ST_TO_ADDR
// for i in temp_list do
27978: LD_ADDR_VAR 0 8
27982: PUSH
27983: LD_VAR 0 9
27987: PUSH
27988: FOR_IN
27989: IFFALSE 28041
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
27991: LD_ADDR_VAR 0 10
27995: PUSH
27996: LD_VAR 0 10
28000: PUSH
28001: LD_VAR 0 8
28005: PUSH
28006: LD_INT 1
28008: ARRAY
28009: PUSH
28010: LD_VAR 0 2
28014: PLUS
28015: PUSH
28016: LD_VAR 0 8
28020: PUSH
28021: LD_INT 2
28023: ARRAY
28024: PUSH
28025: LD_VAR 0 3
28029: PLUS
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: EMPTY
28036: LIST
28037: ADD
28038: ST_TO_ADDR
28039: GO 27988
28041: POP
28042: POP
// result = temp_list2 ;
28043: LD_ADDR_VAR 0 7
28047: PUSH
28048: LD_VAR 0 10
28052: ST_TO_ADDR
// end ;
28053: LD_VAR 0 7
28057: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
28058: LD_INT 0
28060: PPUSH
28061: PPUSH
28062: PPUSH
// result := false ;
28063: LD_ADDR_VAR 0 4
28067: PUSH
28068: LD_INT 0
28070: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
28071: LD_VAR 0 1
28075: NOT
28076: PUSH
28077: LD_VAR 0 2
28081: NOT
28082: OR
28083: PUSH
28084: LD_VAR 0 1
28088: PPUSH
28089: CALL_OW 310
28093: OR
28094: IFFALSE 28098
// exit ;
28096: GO 28302
// if distance < 0 then
28098: LD_VAR 0 3
28102: PUSH
28103: LD_INT 0
28105: LESS
28106: IFFALSE 28116
// distance := 0 ;
28108: LD_ADDR_VAR 0 3
28112: PUSH
28113: LD_INT 0
28115: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
28116: LD_ADDR_VAR 0 6
28120: PUSH
28121: LD_VAR 0 2
28125: PPUSH
28126: CALL_OW 266
28130: PPUSH
28131: LD_VAR 0 2
28135: PPUSH
28136: CALL_OW 250
28140: PPUSH
28141: LD_VAR 0 2
28145: PPUSH
28146: CALL_OW 251
28150: PPUSH
28151: LD_VAR 0 2
28155: PPUSH
28156: CALL_OW 254
28160: PPUSH
28161: LD_VAR 0 2
28165: PPUSH
28166: CALL_OW 248
28170: PPUSH
28171: LD_INT 1
28173: PPUSH
28174: CALL 9519 0 6
28178: ST_TO_ADDR
// if not entrance then
28179: LD_VAR 0 6
28183: NOT
28184: IFFALSE 28188
// exit ;
28186: GO 28302
// for i in entrance do
28188: LD_ADDR_VAR 0 5
28192: PUSH
28193: LD_VAR 0 6
28197: PUSH
28198: FOR_IN
28199: IFFALSE 28300
// begin if not distance then
28201: LD_VAR 0 3
28205: NOT
28206: IFFALSE 28251
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
28208: LD_VAR 0 1
28212: PPUSH
28213: LD_VAR 0 5
28217: PUSH
28218: LD_INT 1
28220: ARRAY
28221: PPUSH
28222: LD_VAR 0 5
28226: PUSH
28227: LD_INT 2
28229: ARRAY
28230: PPUSH
28231: CALL_OW 307
28235: IFFALSE 28249
// begin result := true ;
28237: LD_ADDR_VAR 0 4
28241: PUSH
28242: LD_INT 1
28244: ST_TO_ADDR
// exit ;
28245: POP
28246: POP
28247: GO 28302
// end ; end else
28249: GO 28298
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
28251: LD_VAR 0 1
28255: PPUSH
28256: LD_VAR 0 5
28260: PUSH
28261: LD_INT 1
28263: ARRAY
28264: PPUSH
28265: LD_VAR 0 5
28269: PUSH
28270: LD_INT 2
28272: ARRAY
28273: PPUSH
28274: CALL_OW 297
28278: PUSH
28279: LD_VAR 0 3
28283: LESSEQUAL
28284: IFFALSE 28298
// begin result := true ;
28286: LD_ADDR_VAR 0 4
28290: PUSH
28291: LD_INT 1
28293: ST_TO_ADDR
// exit ;
28294: POP
28295: POP
28296: GO 28302
// end ; end ; end ;
28298: GO 28198
28300: POP
28301: POP
// end ;
28302: LD_VAR 0 4
28306: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
28307: LD_INT 0
28309: PPUSH
28310: PPUSH
28311: PPUSH
// result := false ;
28312: LD_ADDR_VAR 0 3
28316: PUSH
28317: LD_INT 0
28319: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
28320: LD_VAR 0 1
28324: NOT
28325: PUSH
28326: LD_VAR 0 2
28330: NOT
28331: OR
28332: PUSH
28333: LD_VAR 0 1
28337: PPUSH
28338: CALL_OW 302
28342: NOT
28343: OR
28344: PUSH
28345: LD_VAR 0 2
28349: PPUSH
28350: CALL_OW 302
28354: NOT
28355: OR
28356: IFFALSE 28360
// exit ;
28358: GO 28521
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
28360: LD_VAR 0 1
28364: PPUSH
28365: LD_INT 81
28367: PUSH
28368: LD_VAR 0 1
28372: PPUSH
28373: CALL_OW 255
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 3
28384: PUSH
28385: LD_INT 21
28387: PUSH
28388: LD_INT 3
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: EMPTY
28396: LIST
28397: LIST
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PPUSH
28403: CALL_OW 69
28407: PPUSH
28408: LD_VAR 0 1
28412: PPUSH
28413: CALL_OW 74
28417: PPUSH
28418: CALL_OW 296
28422: PUSH
28423: LD_INT 8
28425: LESS
28426: IFFALSE 28430
// exit ;
28428: GO 28521
// building := IsInUnit ( unit2 ) ;
28430: LD_ADDR_VAR 0 5
28434: PUSH
28435: LD_VAR 0 2
28439: PPUSH
28440: CALL_OW 310
28444: ST_TO_ADDR
// if building then
28445: LD_VAR 0 5
28449: IFFALSE 28476
// result := IsNearbyEntrance ( unit , building , 2 ) else
28451: LD_ADDR_VAR 0 3
28455: PUSH
28456: LD_VAR 0 1
28460: PPUSH
28461: LD_VAR 0 5
28465: PPUSH
28466: LD_INT 2
28468: PPUSH
28469: CALL 28058 0 3
28473: ST_TO_ADDR
28474: GO 28521
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
28476: LD_ADDR_VAR 0 3
28480: PUSH
28481: LD_VAR 0 1
28485: PPUSH
28486: LD_VAR 0 2
28490: PPUSH
28491: CALL_OW 296
28495: PUSH
28496: LD_INT 6
28498: LESS
28499: PUSH
28500: LD_VAR 0 2
28504: PPUSH
28505: CALL_OW 255
28509: PPUSH
28510: LD_VAR 0 1
28514: PPUSH
28515: CALL_OW 292
28519: AND
28520: ST_TO_ADDR
// end ;
28521: LD_VAR 0 3
28525: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28526: LD_INT 0
28528: PPUSH
28529: PPUSH
28530: PPUSH
28531: PPUSH
// tmp := [ ] ;
28532: LD_ADDR_VAR 0 3
28536: PUSH
28537: EMPTY
28538: ST_TO_ADDR
// list := [ ] ;
28539: LD_ADDR_VAR 0 5
28543: PUSH
28544: EMPTY
28545: ST_TO_ADDR
// for i = 16 to 25 do
28546: LD_ADDR_VAR 0 4
28550: PUSH
28551: DOUBLE
28552: LD_INT 16
28554: DEC
28555: ST_TO_ADDR
28556: LD_INT 25
28558: PUSH
28559: FOR_TO
28560: IFFALSE 28633
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28562: LD_ADDR_VAR 0 3
28566: PUSH
28567: LD_VAR 0 3
28571: PUSH
28572: LD_INT 22
28574: PUSH
28575: LD_VAR 0 1
28579: PPUSH
28580: CALL_OW 255
28584: PUSH
28585: EMPTY
28586: LIST
28587: LIST
28588: PUSH
28589: LD_INT 91
28591: PUSH
28592: LD_VAR 0 1
28596: PUSH
28597: LD_INT 6
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: LIST
28604: PUSH
28605: LD_INT 30
28607: PUSH
28608: LD_VAR 0 4
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: LIST
28621: PUSH
28622: EMPTY
28623: LIST
28624: PPUSH
28625: CALL_OW 69
28629: ADD
28630: ST_TO_ADDR
28631: GO 28559
28633: POP
28634: POP
// for i = 1 to tmp do
28635: LD_ADDR_VAR 0 4
28639: PUSH
28640: DOUBLE
28641: LD_INT 1
28643: DEC
28644: ST_TO_ADDR
28645: LD_VAR 0 3
28649: PUSH
28650: FOR_TO
28651: IFFALSE 28739
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28653: LD_ADDR_VAR 0 5
28657: PUSH
28658: LD_VAR 0 5
28662: PUSH
28663: LD_VAR 0 3
28667: PUSH
28668: LD_VAR 0 4
28672: ARRAY
28673: PPUSH
28674: CALL_OW 266
28678: PUSH
28679: LD_VAR 0 3
28683: PUSH
28684: LD_VAR 0 4
28688: ARRAY
28689: PPUSH
28690: CALL_OW 250
28694: PUSH
28695: LD_VAR 0 3
28699: PUSH
28700: LD_VAR 0 4
28704: ARRAY
28705: PPUSH
28706: CALL_OW 251
28710: PUSH
28711: LD_VAR 0 3
28715: PUSH
28716: LD_VAR 0 4
28720: ARRAY
28721: PPUSH
28722: CALL_OW 254
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: PUSH
28733: EMPTY
28734: LIST
28735: ADD
28736: ST_TO_ADDR
28737: GO 28650
28739: POP
28740: POP
// result := list ;
28741: LD_ADDR_VAR 0 2
28745: PUSH
28746: LD_VAR 0 5
28750: ST_TO_ADDR
// end ;
28751: LD_VAR 0 2
28755: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28756: LD_INT 0
28758: PPUSH
28759: PPUSH
28760: PPUSH
28761: PPUSH
28762: PPUSH
28763: PPUSH
28764: PPUSH
// if not factory then
28765: LD_VAR 0 1
28769: NOT
28770: IFFALSE 28774
// exit ;
28772: GO 29299
// if control = control_apeman then
28774: LD_VAR 0 4
28778: PUSH
28779: LD_INT 5
28781: EQUAL
28782: IFFALSE 28891
// begin tmp := UnitsInside ( factory ) ;
28784: LD_ADDR_VAR 0 8
28788: PUSH
28789: LD_VAR 0 1
28793: PPUSH
28794: CALL_OW 313
28798: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28799: LD_VAR 0 8
28803: PPUSH
28804: LD_INT 25
28806: PUSH
28807: LD_INT 12
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PPUSH
28814: CALL_OW 72
28818: NOT
28819: IFFALSE 28829
// control := control_manual ;
28821: LD_ADDR_VAR 0 4
28825: PUSH
28826: LD_INT 1
28828: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28829: LD_ADDR_VAR 0 8
28833: PUSH
28834: LD_VAR 0 1
28838: PPUSH
28839: CALL 28526 0 1
28843: ST_TO_ADDR
// if tmp then
28844: LD_VAR 0 8
28848: IFFALSE 28891
// begin for i in tmp do
28850: LD_ADDR_VAR 0 7
28854: PUSH
28855: LD_VAR 0 8
28859: PUSH
28860: FOR_IN
28861: IFFALSE 28889
// if i [ 1 ] = b_ext_radar then
28863: LD_VAR 0 7
28867: PUSH
28868: LD_INT 1
28870: ARRAY
28871: PUSH
28872: LD_INT 20
28874: EQUAL
28875: IFFALSE 28887
// begin control := control_remote ;
28877: LD_ADDR_VAR 0 4
28881: PUSH
28882: LD_INT 2
28884: ST_TO_ADDR
// break ;
28885: GO 28889
// end ;
28887: GO 28860
28889: POP
28890: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28891: LD_VAR 0 1
28895: PPUSH
28896: LD_VAR 0 2
28900: PPUSH
28901: LD_VAR 0 3
28905: PPUSH
28906: LD_VAR 0 4
28910: PPUSH
28911: LD_VAR 0 5
28915: PPUSH
28916: CALL_OW 448
28920: IFFALSE 28955
// begin result := [ chassis , engine , control , weapon ] ;
28922: LD_ADDR_VAR 0 6
28926: PUSH
28927: LD_VAR 0 2
28931: PUSH
28932: LD_VAR 0 3
28936: PUSH
28937: LD_VAR 0 4
28941: PUSH
28942: LD_VAR 0 5
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: ST_TO_ADDR
// exit ;
28953: GO 29299
// end ; _chassis := AvailableChassisList ( factory ) ;
28955: LD_ADDR_VAR 0 9
28959: PUSH
28960: LD_VAR 0 1
28964: PPUSH
28965: CALL_OW 475
28969: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
28970: LD_ADDR_VAR 0 11
28974: PUSH
28975: LD_VAR 0 1
28979: PPUSH
28980: CALL_OW 476
28984: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
28985: LD_ADDR_VAR 0 12
28989: PUSH
28990: LD_VAR 0 1
28994: PPUSH
28995: CALL_OW 477
28999: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29000: LD_ADDR_VAR 0 10
29004: PUSH
29005: LD_VAR 0 1
29009: PPUSH
29010: CALL_OW 478
29014: ST_TO_ADDR
// if not chassis in _chassis then
29015: LD_VAR 0 2
29019: PUSH
29020: LD_VAR 0 9
29024: IN
29025: NOT
29026: IFFALSE 29052
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29028: LD_ADDR_VAR 0 2
29032: PUSH
29033: LD_VAR 0 9
29037: PUSH
29038: LD_INT 1
29040: PPUSH
29041: LD_VAR 0 9
29045: PPUSH
29046: CALL_OW 12
29050: ARRAY
29051: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29052: LD_VAR 0 2
29056: PPUSH
29057: LD_VAR 0 3
29061: PPUSH
29062: CALL 29304 0 2
29066: NOT
29067: IFFALSE 29126
// repeat engine := _engine [ 1 ] ;
29069: LD_ADDR_VAR 0 3
29073: PUSH
29074: LD_VAR 0 11
29078: PUSH
29079: LD_INT 1
29081: ARRAY
29082: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29083: LD_ADDR_VAR 0 11
29087: PUSH
29088: LD_VAR 0 11
29092: PPUSH
29093: LD_INT 1
29095: PPUSH
29096: CALL_OW 3
29100: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29101: LD_VAR 0 2
29105: PPUSH
29106: LD_VAR 0 3
29110: PPUSH
29111: CALL 29304 0 2
29115: PUSH
29116: LD_VAR 0 11
29120: PUSH
29121: EMPTY
29122: EQUAL
29123: OR
29124: IFFALSE 29069
// if not control in _control then
29126: LD_VAR 0 4
29130: PUSH
29131: LD_VAR 0 12
29135: IN
29136: NOT
29137: IFFALSE 29163
// control := _control [ rand ( 1 , _control ) ] ;
29139: LD_ADDR_VAR 0 4
29143: PUSH
29144: LD_VAR 0 12
29148: PUSH
29149: LD_INT 1
29151: PPUSH
29152: LD_VAR 0 12
29156: PPUSH
29157: CALL_OW 12
29161: ARRAY
29162: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29163: LD_VAR 0 2
29167: PPUSH
29168: LD_VAR 0 5
29172: PPUSH
29173: CALL 29524 0 2
29177: NOT
29178: IFFALSE 29237
// repeat weapon := _weapon [ 1 ] ;
29180: LD_ADDR_VAR 0 5
29184: PUSH
29185: LD_VAR 0 10
29189: PUSH
29190: LD_INT 1
29192: ARRAY
29193: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29194: LD_ADDR_VAR 0 10
29198: PUSH
29199: LD_VAR 0 10
29203: PPUSH
29204: LD_INT 1
29206: PPUSH
29207: CALL_OW 3
29211: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29212: LD_VAR 0 2
29216: PPUSH
29217: LD_VAR 0 5
29221: PPUSH
29222: CALL 29524 0 2
29226: PUSH
29227: LD_VAR 0 10
29231: PUSH
29232: EMPTY
29233: EQUAL
29234: OR
29235: IFFALSE 29180
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29237: LD_VAR 0 1
29241: PPUSH
29242: LD_VAR 0 2
29246: PPUSH
29247: LD_VAR 0 3
29251: PPUSH
29252: LD_VAR 0 4
29256: PPUSH
29257: LD_VAR 0 5
29261: PPUSH
29262: CALL_OW 448
29266: IFFALSE 29299
// result := [ chassis , engine , control , weapon ] ;
29268: LD_ADDR_VAR 0 6
29272: PUSH
29273: LD_VAR 0 2
29277: PUSH
29278: LD_VAR 0 3
29282: PUSH
29283: LD_VAR 0 4
29287: PUSH
29288: LD_VAR 0 5
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: ST_TO_ADDR
// end ;
29299: LD_VAR 0 6
29303: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29304: LD_INT 0
29306: PPUSH
// if not chassis or not engine then
29307: LD_VAR 0 1
29311: NOT
29312: PUSH
29313: LD_VAR 0 2
29317: NOT
29318: OR
29319: IFFALSE 29323
// exit ;
29321: GO 29519
// case engine of engine_solar :
29323: LD_VAR 0 2
29327: PUSH
29328: LD_INT 2
29330: DOUBLE
29331: EQUAL
29332: IFTRUE 29336
29334: GO 29374
29336: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29337: LD_ADDR_VAR 0 3
29341: PUSH
29342: LD_INT 11
29344: PUSH
29345: LD_INT 12
29347: PUSH
29348: LD_INT 13
29350: PUSH
29351: LD_INT 14
29353: PUSH
29354: LD_INT 1
29356: PUSH
29357: LD_INT 2
29359: PUSH
29360: LD_INT 3
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: ST_TO_ADDR
29372: GO 29503
29374: LD_INT 1
29376: DOUBLE
29377: EQUAL
29378: IFTRUE 29382
29380: GO 29444
29382: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29383: LD_ADDR_VAR 0 3
29387: PUSH
29388: LD_INT 11
29390: PUSH
29391: LD_INT 12
29393: PUSH
29394: LD_INT 13
29396: PUSH
29397: LD_INT 14
29399: PUSH
29400: LD_INT 1
29402: PUSH
29403: LD_INT 2
29405: PUSH
29406: LD_INT 3
29408: PUSH
29409: LD_INT 4
29411: PUSH
29412: LD_INT 5
29414: PUSH
29415: LD_INT 21
29417: PUSH
29418: LD_INT 23
29420: PUSH
29421: LD_INT 22
29423: PUSH
29424: LD_INT 24
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: ST_TO_ADDR
29442: GO 29503
29444: LD_INT 3
29446: DOUBLE
29447: EQUAL
29448: IFTRUE 29452
29450: GO 29502
29452: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29453: LD_ADDR_VAR 0 3
29457: PUSH
29458: LD_INT 13
29460: PUSH
29461: LD_INT 14
29463: PUSH
29464: LD_INT 2
29466: PUSH
29467: LD_INT 3
29469: PUSH
29470: LD_INT 4
29472: PUSH
29473: LD_INT 5
29475: PUSH
29476: LD_INT 21
29478: PUSH
29479: LD_INT 22
29481: PUSH
29482: LD_INT 23
29484: PUSH
29485: LD_INT 24
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: LIST
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: LIST
29497: LIST
29498: LIST
29499: ST_TO_ADDR
29500: GO 29503
29502: POP
// result := ( chassis in result ) ;
29503: LD_ADDR_VAR 0 3
29507: PUSH
29508: LD_VAR 0 1
29512: PUSH
29513: LD_VAR 0 3
29517: IN
29518: ST_TO_ADDR
// end ;
29519: LD_VAR 0 3
29523: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29524: LD_INT 0
29526: PPUSH
// if not chassis or not weapon then
29527: LD_VAR 0 1
29531: NOT
29532: PUSH
29533: LD_VAR 0 2
29537: NOT
29538: OR
29539: IFFALSE 29543
// exit ;
29541: GO 30569
// case weapon of us_machine_gun :
29543: LD_VAR 0 2
29547: PUSH
29548: LD_INT 2
29550: DOUBLE
29551: EQUAL
29552: IFTRUE 29556
29554: GO 29586
29556: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29557: LD_ADDR_VAR 0 3
29561: PUSH
29562: LD_INT 1
29564: PUSH
29565: LD_INT 2
29567: PUSH
29568: LD_INT 3
29570: PUSH
29571: LD_INT 4
29573: PUSH
29574: LD_INT 5
29576: PUSH
29577: EMPTY
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: ST_TO_ADDR
29584: GO 30553
29586: LD_INT 3
29588: DOUBLE
29589: EQUAL
29590: IFTRUE 29594
29592: GO 29624
29594: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29595: LD_ADDR_VAR 0 3
29599: PUSH
29600: LD_INT 1
29602: PUSH
29603: LD_INT 2
29605: PUSH
29606: LD_INT 3
29608: PUSH
29609: LD_INT 4
29611: PUSH
29612: LD_INT 5
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: ST_TO_ADDR
29622: GO 30553
29624: LD_INT 11
29626: DOUBLE
29627: EQUAL
29628: IFTRUE 29632
29630: GO 29662
29632: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29633: LD_ADDR_VAR 0 3
29637: PUSH
29638: LD_INT 1
29640: PUSH
29641: LD_INT 2
29643: PUSH
29644: LD_INT 3
29646: PUSH
29647: LD_INT 4
29649: PUSH
29650: LD_INT 5
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: LIST
29657: LIST
29658: LIST
29659: ST_TO_ADDR
29660: GO 30553
29662: LD_INT 4
29664: DOUBLE
29665: EQUAL
29666: IFTRUE 29670
29668: GO 29696
29670: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29671: LD_ADDR_VAR 0 3
29675: PUSH
29676: LD_INT 2
29678: PUSH
29679: LD_INT 3
29681: PUSH
29682: LD_INT 4
29684: PUSH
29685: LD_INT 5
29687: PUSH
29688: EMPTY
29689: LIST
29690: LIST
29691: LIST
29692: LIST
29693: ST_TO_ADDR
29694: GO 30553
29696: LD_INT 5
29698: DOUBLE
29699: EQUAL
29700: IFTRUE 29704
29702: GO 29730
29704: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29705: LD_ADDR_VAR 0 3
29709: PUSH
29710: LD_INT 2
29712: PUSH
29713: LD_INT 3
29715: PUSH
29716: LD_INT 4
29718: PUSH
29719: LD_INT 5
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: LIST
29726: LIST
29727: ST_TO_ADDR
29728: GO 30553
29730: LD_INT 9
29732: DOUBLE
29733: EQUAL
29734: IFTRUE 29738
29736: GO 29764
29738: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29739: LD_ADDR_VAR 0 3
29743: PUSH
29744: LD_INT 2
29746: PUSH
29747: LD_INT 3
29749: PUSH
29750: LD_INT 4
29752: PUSH
29753: LD_INT 5
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: LIST
29760: LIST
29761: ST_TO_ADDR
29762: GO 30553
29764: LD_INT 7
29766: DOUBLE
29767: EQUAL
29768: IFTRUE 29772
29770: GO 29798
29772: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29773: LD_ADDR_VAR 0 3
29777: PUSH
29778: LD_INT 2
29780: PUSH
29781: LD_INT 3
29783: PUSH
29784: LD_INT 4
29786: PUSH
29787: LD_INT 5
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: ST_TO_ADDR
29796: GO 30553
29798: LD_INT 12
29800: DOUBLE
29801: EQUAL
29802: IFTRUE 29806
29804: GO 29832
29806: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29807: LD_ADDR_VAR 0 3
29811: PUSH
29812: LD_INT 2
29814: PUSH
29815: LD_INT 3
29817: PUSH
29818: LD_INT 4
29820: PUSH
29821: LD_INT 5
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: ST_TO_ADDR
29830: GO 30553
29832: LD_INT 13
29834: DOUBLE
29835: EQUAL
29836: IFTRUE 29840
29838: GO 29866
29840: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29841: LD_ADDR_VAR 0 3
29845: PUSH
29846: LD_INT 2
29848: PUSH
29849: LD_INT 3
29851: PUSH
29852: LD_INT 4
29854: PUSH
29855: LD_INT 5
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: ST_TO_ADDR
29864: GO 30553
29866: LD_INT 14
29868: DOUBLE
29869: EQUAL
29870: IFTRUE 29874
29872: GO 29892
29874: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
29875: LD_ADDR_VAR 0 3
29879: PUSH
29880: LD_INT 4
29882: PUSH
29883: LD_INT 5
29885: PUSH
29886: EMPTY
29887: LIST
29888: LIST
29889: ST_TO_ADDR
29890: GO 30553
29892: LD_INT 6
29894: DOUBLE
29895: EQUAL
29896: IFTRUE 29900
29898: GO 29918
29900: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
29901: LD_ADDR_VAR 0 3
29905: PUSH
29906: LD_INT 4
29908: PUSH
29909: LD_INT 5
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: ST_TO_ADDR
29916: GO 30553
29918: LD_INT 10
29920: DOUBLE
29921: EQUAL
29922: IFTRUE 29926
29924: GO 29944
29926: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
29927: LD_ADDR_VAR 0 3
29931: PUSH
29932: LD_INT 4
29934: PUSH
29935: LD_INT 5
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: ST_TO_ADDR
29942: GO 30553
29944: LD_INT 22
29946: DOUBLE
29947: EQUAL
29948: IFTRUE 29952
29950: GO 29978
29952: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
29953: LD_ADDR_VAR 0 3
29957: PUSH
29958: LD_INT 11
29960: PUSH
29961: LD_INT 12
29963: PUSH
29964: LD_INT 13
29966: PUSH
29967: LD_INT 14
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: ST_TO_ADDR
29976: GO 30553
29978: LD_INT 23
29980: DOUBLE
29981: EQUAL
29982: IFTRUE 29986
29984: GO 30012
29986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
29987: LD_ADDR_VAR 0 3
29991: PUSH
29992: LD_INT 11
29994: PUSH
29995: LD_INT 12
29997: PUSH
29998: LD_INT 13
30000: PUSH
30001: LD_INT 14
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: ST_TO_ADDR
30010: GO 30553
30012: LD_INT 24
30014: DOUBLE
30015: EQUAL
30016: IFTRUE 30020
30018: GO 30046
30020: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30021: LD_ADDR_VAR 0 3
30025: PUSH
30026: LD_INT 11
30028: PUSH
30029: LD_INT 12
30031: PUSH
30032: LD_INT 13
30034: PUSH
30035: LD_INT 14
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: ST_TO_ADDR
30044: GO 30553
30046: LD_INT 30
30048: DOUBLE
30049: EQUAL
30050: IFTRUE 30054
30052: GO 30080
30054: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30055: LD_ADDR_VAR 0 3
30059: PUSH
30060: LD_INT 11
30062: PUSH
30063: LD_INT 12
30065: PUSH
30066: LD_INT 13
30068: PUSH
30069: LD_INT 14
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: ST_TO_ADDR
30078: GO 30553
30080: LD_INT 25
30082: DOUBLE
30083: EQUAL
30084: IFTRUE 30088
30086: GO 30106
30088: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30089: LD_ADDR_VAR 0 3
30093: PUSH
30094: LD_INT 13
30096: PUSH
30097: LD_INT 14
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: ST_TO_ADDR
30104: GO 30553
30106: LD_INT 27
30108: DOUBLE
30109: EQUAL
30110: IFTRUE 30114
30112: GO 30132
30114: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30115: LD_ADDR_VAR 0 3
30119: PUSH
30120: LD_INT 13
30122: PUSH
30123: LD_INT 14
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: ST_TO_ADDR
30130: GO 30553
30132: LD_INT 28
30134: DOUBLE
30135: EQUAL
30136: IFTRUE 30140
30138: GO 30158
30140: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30141: LD_ADDR_VAR 0 3
30145: PUSH
30146: LD_INT 13
30148: PUSH
30149: LD_INT 14
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: ST_TO_ADDR
30156: GO 30553
30158: LD_INT 29
30160: DOUBLE
30161: EQUAL
30162: IFTRUE 30166
30164: GO 30184
30166: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30167: LD_ADDR_VAR 0 3
30171: PUSH
30172: LD_INT 13
30174: PUSH
30175: LD_INT 14
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: ST_TO_ADDR
30182: GO 30553
30184: LD_INT 31
30186: DOUBLE
30187: EQUAL
30188: IFTRUE 30192
30190: GO 30210
30192: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30193: LD_ADDR_VAR 0 3
30197: PUSH
30198: LD_INT 13
30200: PUSH
30201: LD_INT 14
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: ST_TO_ADDR
30208: GO 30553
30210: LD_INT 26
30212: DOUBLE
30213: EQUAL
30214: IFTRUE 30218
30216: GO 30236
30218: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30219: LD_ADDR_VAR 0 3
30223: PUSH
30224: LD_INT 13
30226: PUSH
30227: LD_INT 14
30229: PUSH
30230: EMPTY
30231: LIST
30232: LIST
30233: ST_TO_ADDR
30234: GO 30553
30236: LD_INT 42
30238: DOUBLE
30239: EQUAL
30240: IFTRUE 30244
30242: GO 30270
30244: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30245: LD_ADDR_VAR 0 3
30249: PUSH
30250: LD_INT 21
30252: PUSH
30253: LD_INT 22
30255: PUSH
30256: LD_INT 23
30258: PUSH
30259: LD_INT 24
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: ST_TO_ADDR
30268: GO 30553
30270: LD_INT 43
30272: DOUBLE
30273: EQUAL
30274: IFTRUE 30278
30276: GO 30304
30278: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30279: LD_ADDR_VAR 0 3
30283: PUSH
30284: LD_INT 21
30286: PUSH
30287: LD_INT 22
30289: PUSH
30290: LD_INT 23
30292: PUSH
30293: LD_INT 24
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: ST_TO_ADDR
30302: GO 30553
30304: LD_INT 44
30306: DOUBLE
30307: EQUAL
30308: IFTRUE 30312
30310: GO 30338
30312: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30313: LD_ADDR_VAR 0 3
30317: PUSH
30318: LD_INT 21
30320: PUSH
30321: LD_INT 22
30323: PUSH
30324: LD_INT 23
30326: PUSH
30327: LD_INT 24
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: LIST
30334: LIST
30335: ST_TO_ADDR
30336: GO 30553
30338: LD_INT 45
30340: DOUBLE
30341: EQUAL
30342: IFTRUE 30346
30344: GO 30372
30346: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30347: LD_ADDR_VAR 0 3
30351: PUSH
30352: LD_INT 21
30354: PUSH
30355: LD_INT 22
30357: PUSH
30358: LD_INT 23
30360: PUSH
30361: LD_INT 24
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: ST_TO_ADDR
30370: GO 30553
30372: LD_INT 49
30374: DOUBLE
30375: EQUAL
30376: IFTRUE 30380
30378: GO 30406
30380: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30381: LD_ADDR_VAR 0 3
30385: PUSH
30386: LD_INT 21
30388: PUSH
30389: LD_INT 22
30391: PUSH
30392: LD_INT 23
30394: PUSH
30395: LD_INT 24
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: ST_TO_ADDR
30404: GO 30553
30406: LD_INT 51
30408: DOUBLE
30409: EQUAL
30410: IFTRUE 30414
30412: GO 30440
30414: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30415: LD_ADDR_VAR 0 3
30419: PUSH
30420: LD_INT 21
30422: PUSH
30423: LD_INT 22
30425: PUSH
30426: LD_INT 23
30428: PUSH
30429: LD_INT 24
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: ST_TO_ADDR
30438: GO 30553
30440: LD_INT 52
30442: DOUBLE
30443: EQUAL
30444: IFTRUE 30448
30446: GO 30474
30448: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30449: LD_ADDR_VAR 0 3
30453: PUSH
30454: LD_INT 21
30456: PUSH
30457: LD_INT 22
30459: PUSH
30460: LD_INT 23
30462: PUSH
30463: LD_INT 24
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: ST_TO_ADDR
30472: GO 30553
30474: LD_INT 53
30476: DOUBLE
30477: EQUAL
30478: IFTRUE 30482
30480: GO 30500
30482: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30483: LD_ADDR_VAR 0 3
30487: PUSH
30488: LD_INT 23
30490: PUSH
30491: LD_INT 24
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: ST_TO_ADDR
30498: GO 30553
30500: LD_INT 46
30502: DOUBLE
30503: EQUAL
30504: IFTRUE 30508
30506: GO 30526
30508: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30509: LD_ADDR_VAR 0 3
30513: PUSH
30514: LD_INT 23
30516: PUSH
30517: LD_INT 24
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: ST_TO_ADDR
30524: GO 30553
30526: LD_INT 47
30528: DOUBLE
30529: EQUAL
30530: IFTRUE 30534
30532: GO 30552
30534: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30535: LD_ADDR_VAR 0 3
30539: PUSH
30540: LD_INT 23
30542: PUSH
30543: LD_INT 24
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: ST_TO_ADDR
30550: GO 30553
30552: POP
// result := ( chassis in result ) ;
30553: LD_ADDR_VAR 0 3
30557: PUSH
30558: LD_VAR 0 1
30562: PUSH
30563: LD_VAR 0 3
30567: IN
30568: ST_TO_ADDR
// end ;
30569: LD_VAR 0 3
30573: RET
// export function PrepareNature ; var i , animal , nat_area ; begin
30574: LD_INT 0
30576: PPUSH
30577: PPUSH
30578: PPUSH
30579: PPUSH
// uc_side = 0 ;
30580: LD_ADDR_OWVAR 20
30584: PUSH
30585: LD_INT 0
30587: ST_TO_ADDR
// uc_nation = 0 ;
30588: LD_ADDR_OWVAR 21
30592: PUSH
30593: LD_INT 0
30595: ST_TO_ADDR
// nat_area := nature_area ;
30596: LD_ADDR_VAR 0 4
30600: PUSH
30601: LD_INT 24
30603: ST_TO_ADDR
// InitHc ;
30604: CALL_OW 19
// for i = 1 to 4 do
30608: LD_ADDR_VAR 0 2
30612: PUSH
30613: DOUBLE
30614: LD_INT 1
30616: DEC
30617: ST_TO_ADDR
30618: LD_INT 4
30620: PUSH
30621: FOR_TO
30622: IFFALSE 30669
// begin hc_class = 18 ;
30624: LD_ADDR_OWVAR 28
30628: PUSH
30629: LD_INT 18
30631: ST_TO_ADDR
// hc_gallery =  ;
30632: LD_ADDR_OWVAR 33
30636: PUSH
30637: LD_STRING 
30639: ST_TO_ADDR
// animal := CreateHuman ;
30640: LD_ADDR_VAR 0 3
30644: PUSH
30645: CALL_OW 44
30649: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
30650: LD_VAR 0 3
30654: PPUSH
30655: LD_VAR 0 4
30659: PPUSH
30660: LD_INT 0
30662: PPUSH
30663: CALL_OW 49
// end ;
30667: GO 30621
30669: POP
30670: POP
// for i = 1 to 3 do
30671: LD_ADDR_VAR 0 2
30675: PUSH
30676: DOUBLE
30677: LD_INT 1
30679: DEC
30680: ST_TO_ADDR
30681: LD_INT 3
30683: PUSH
30684: FOR_TO
30685: IFFALSE 30779
// begin hc_class = class_apeman ;
30687: LD_ADDR_OWVAR 28
30691: PUSH
30692: LD_INT 12
30694: ST_TO_ADDR
// hc_gallery =  ;
30695: LD_ADDR_OWVAR 33
30699: PUSH
30700: LD_STRING 
30702: ST_TO_ADDR
// hc_agressivity = 0 ;
30703: LD_ADDR_OWVAR 35
30707: PUSH
30708: LD_INT 0
30710: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
30711: LD_ADDR_OWVAR 31
30715: PUSH
30716: LD_INT 1
30718: PPUSH
30719: LD_INT 3
30721: PPUSH
30722: CALL_OW 12
30726: PUSH
30727: LD_INT 1
30729: PPUSH
30730: LD_INT 3
30732: PPUSH
30733: CALL_OW 12
30737: PUSH
30738: LD_INT 0
30740: PUSH
30741: LD_INT 0
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: ST_TO_ADDR
// animal := CreateHuman ;
30750: LD_ADDR_VAR 0 3
30754: PUSH
30755: CALL_OW 44
30759: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
30760: LD_VAR 0 3
30764: PPUSH
30765: LD_VAR 0 4
30769: PPUSH
30770: LD_INT 0
30772: PPUSH
30773: CALL_OW 49
// end ;
30777: GO 30684
30779: POP
30780: POP
// for i = 1 to 3 do
30781: LD_ADDR_VAR 0 2
30785: PUSH
30786: DOUBLE
30787: LD_INT 1
30789: DEC
30790: ST_TO_ADDR
30791: LD_INT 3
30793: PUSH
30794: FOR_TO
30795: IFFALSE 30842
// begin hc_class = 13 ;
30797: LD_ADDR_OWVAR 28
30801: PUSH
30802: LD_INT 13
30804: ST_TO_ADDR
// hc_gallery =  ;
30805: LD_ADDR_OWVAR 33
30809: PUSH
30810: LD_STRING 
30812: ST_TO_ADDR
// animal := CreateHuman ;
30813: LD_ADDR_VAR 0 3
30817: PUSH
30818: CALL_OW 44
30822: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
30823: LD_VAR 0 3
30827: PPUSH
30828: LD_VAR 0 4
30832: PPUSH
30833: LD_INT 0
30835: PPUSH
30836: CALL_OW 49
// end ;
30840: GO 30794
30842: POP
30843: POP
// for i = 1 to 3 do
30844: LD_ADDR_VAR 0 2
30848: PUSH
30849: DOUBLE
30850: LD_INT 1
30852: DEC
30853: ST_TO_ADDR
30854: LD_INT 3
30856: PUSH
30857: FOR_TO
30858: IFFALSE 30903
// begin hc_class = 20 ;
30860: LD_ADDR_OWVAR 28
30864: PUSH
30865: LD_INT 20
30867: ST_TO_ADDR
// hc_gallery =  ;
30868: LD_ADDR_OWVAR 33
30872: PUSH
30873: LD_STRING 
30875: ST_TO_ADDR
// animal := CreateHuman ;
30876: LD_ADDR_VAR 0 3
30880: PUSH
30881: CALL_OW 44
30885: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
30886: LD_VAR 0 3
30890: PPUSH
30891: LD_INT 4
30893: PPUSH
30894: LD_INT 0
30896: PPUSH
30897: CALL_OW 49
// end ;
30901: GO 30857
30903: POP
30904: POP
// end ; end_of_file
30905: LD_VAR 0 1
30909: RET
// export function Action ; begin
30910: LD_INT 0
30912: PPUSH
// InGameOn ;
30913: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
30917: LD_EXP 14
30921: PPUSH
30922: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
30926: LD_EXP 14
30930: PPUSH
30931: LD_STRING D1-JMM-1
30933: PPUSH
30934: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
30938: LD_EXP 15
30942: PPUSH
30943: LD_STRING D1-Roth-1
30945: PPUSH
30946: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
30950: LD_EXP 14
30954: PPUSH
30955: LD_STRING D1-JMM-2
30957: PPUSH
30958: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
30962: LD_EXP 15
30966: PPUSH
30967: LD_STRING D1-Roth-2
30969: PPUSH
30970: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
30974: LD_EXP 14
30978: PPUSH
30979: LD_STRING D1-JMM-3
30981: PPUSH
30982: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
30986: LD_EXP 15
30990: PPUSH
30991: LD_STRING D1-Roth-3
30993: PPUSH
30994: CALL_OW 88
// ComInvisible ( Roth ) ;
30998: LD_EXP 15
31002: PPUSH
31003: CALL_OW 152
// wait ( 0 0$1.3 ) ;
31007: LD_INT 46
31009: PPUSH
31010: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
31014: LD_EXP 14
31018: PPUSH
31019: LD_STRING D1-JMM-4
31021: PPUSH
31022: CALL_OW 88
// wait ( 0 0$0.3 ) ;
31026: LD_INT 10
31028: PPUSH
31029: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
31033: LD_EXP 15
31037: PPUSH
31038: LD_EXP 14
31042: PPUSH
31043: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
31047: LD_EXP 14
31051: PPUSH
31052: LD_STRING D1-JMM-4a
31054: PPUSH
31055: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
31059: LD_EXP 15
31063: PPUSH
31064: LD_STRING D1-Roth-4
31066: PPUSH
31067: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
31071: LD_EXP 14
31075: PPUSH
31076: LD_STRING D1-JMM-5
31078: PPUSH
31079: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
31083: LD_EXP 15
31087: PPUSH
31088: LD_STRING D1-Roth-5
31090: PPUSH
31091: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
31095: LD_EXP 14
31099: PPUSH
31100: LD_STRING D1-JMM-6
31102: PPUSH
31103: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
31107: LD_EXP 15
31111: PPUSH
31112: LD_STRING D1-Roth-6
31114: PPUSH
31115: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
31119: LD_EXP 14
31123: PPUSH
31124: LD_STRING D1-JMM-7
31126: PPUSH
31127: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
31131: LD_EXP 16
31135: PPUSH
31136: LD_EXP 14
31140: PPUSH
31141: CALL_OW 250
31145: PPUSH
31146: LD_EXP 14
31150: PPUSH
31151: CALL_OW 251
31155: PPUSH
31156: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
31160: LD_EXP 15
31164: PPUSH
31165: LD_STRING D1-Roth-7
31167: PPUSH
31168: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
31172: LD_INT 10
31174: PPUSH
31175: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
31179: LD_EXP 16
31183: PPUSH
31184: LD_EXP 14
31188: PPUSH
31189: CALL_OW 296
31193: PUSH
31194: LD_INT 6
31196: LESS
31197: IFFALSE 31172
// ComTurnUnit ( Powell , JMM ) ;
31199: LD_EXP 16
31203: PPUSH
31204: LD_EXP 14
31208: PPUSH
31209: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
31213: LD_EXP 16
31217: PPUSH
31218: LD_STRING D1-Pow-7
31220: PPUSH
31221: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
31225: LD_EXP 14
31229: PPUSH
31230: LD_EXP 16
31234: PPUSH
31235: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
31239: LD_EXP 15
31243: PPUSH
31244: LD_EXP 16
31248: PPUSH
31249: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
31253: LD_EXP 14
31257: PPUSH
31258: LD_STRING D1-JMM-8
31260: PPUSH
31261: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
31265: LD_EXP 16
31269: PPUSH
31270: LD_STRING D1-Pow-8
31272: PPUSH
31273: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
31277: LD_EXP 14
31281: PPUSH
31282: LD_STRING D1-JMM-9
31284: PPUSH
31285: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
31289: LD_EXP 16
31293: PPUSH
31294: LD_INT 124
31296: PPUSH
31297: LD_INT 61
31299: PPUSH
31300: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31304: LD_INT 35
31306: PPUSH
31307: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
31311: LD_EXP 14
31315: PPUSH
31316: LD_EXP 16
31320: PPUSH
31321: CALL_OW 296
31325: PUSH
31326: LD_INT 6
31328: GREATER
31329: IFFALSE 31304
// SayRadio ( Powell , D1-Pow-9 ) ;
31331: LD_EXP 16
31335: PPUSH
31336: LD_STRING D1-Pow-9
31338: PPUSH
31339: CALL_OW 94
// RemoveUnit ( Powell ) ;
31343: LD_EXP 16
31347: PPUSH
31348: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
31352: LD_EXP 16
31356: PPUSH
31357: LD_INT 18
31359: PPUSH
31360: CALL_OW 52
// if Joan and not Joan in selected then
31364: LD_EXP 36
31368: PUSH
31369: LD_EXP 36
31373: PUSH
31374: LD_EXP 3
31378: IN
31379: NOT
31380: AND
31381: IFFALSE 31395
// SayRadio ( Joan , D1-Joan-9 ) ;
31383: LD_EXP 36
31387: PPUSH
31388: LD_STRING D1-Joan-9
31390: PPUSH
31391: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
31395: LD_EXP 15
31399: PPUSH
31400: LD_EXP 14
31404: PPUSH
31405: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
31409: LD_EXP 14
31413: PPUSH
31414: LD_EXP 15
31418: PPUSH
31419: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
31423: LD_EXP 15
31427: PPUSH
31428: LD_STRING D1-Roth-9
31430: PPUSH
31431: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
31435: LD_EXP 14
31439: PPUSH
31440: LD_STRING D1-JMM-10
31442: PPUSH
31443: CALL_OW 88
// InGameOff ;
31447: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
31451: LD_STRING M1
31453: PPUSH
31454: CALL_OW 337
// if Difficulty < 3 then
31458: LD_OWVAR 67
31462: PUSH
31463: LD_INT 3
31465: LESS
31466: IFFALSE 31478
// ChangeSideFog ( 4 , 7 ) ;
31468: LD_INT 4
31470: PPUSH
31471: LD_INT 7
31473: PPUSH
31474: CALL_OW 343
// SaveForQuickRestart ;
31478: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
31482: LD_INT 7
31484: PPUSH
31485: LD_INT 1
31487: PPUSH
31488: LD_INT 2
31490: PPUSH
31491: LD_INT 1
31493: PPUSH
31494: CALL_OW 80
// wait ( 0 0$3 ) ;
31498: LD_INT 105
31500: PPUSH
31501: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
31505: LD_EXP 15
31509: PPUSH
31510: LD_INT 124
31512: PPUSH
31513: LD_INT 18
31515: PPUSH
31516: CALL_OW 111
// AddComInvisible ( Roth ) ;
31520: LD_EXP 15
31524: PPUSH
31525: CALL_OW 212
// wait ( 0 0$30 ) ;
31529: LD_INT 1050
31531: PPUSH
31532: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
31536: LD_EXP 15
31540: PPUSH
31541: LD_INT 2100
31543: PPUSH
31544: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
31548: LD_EXP 15
31552: PPUSH
31553: LD_INT 156
31555: PPUSH
31556: LD_INT 20
31558: PPUSH
31559: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
31563: LD_EXP 15
31567: PPUSH
31568: LD_INT 178
31570: PPUSH
31571: LD_INT 42
31573: PPUSH
31574: CALL_OW 171
// AddComInvisible ( Roth ) ;
31578: LD_EXP 15
31582: PPUSH
31583: CALL_OW 212
// end ;
31587: LD_VAR 0 1
31591: RET
// every 0 0$1 do var i , tmp ;
31592: GO 31594
31594: DISABLE
31595: LD_INT 0
31597: PPUSH
31598: PPUSH
// begin tmp := selected union friends ;
31599: LD_ADDR_VAR 0 2
31603: PUSH
31604: LD_EXP 3
31608: PUSH
31609: LD_EXP 4
31613: UNION
31614: ST_TO_ADDR
// if not tmp then
31615: LD_VAR 0 2
31619: NOT
31620: IFFALSE 31624
// exit ;
31622: GO 31696
// repeat wait ( 0 0$1 ) ;
31624: LD_INT 35
31626: PPUSH
31627: CALL_OW 67
// for i in tmp do
31631: LD_ADDR_VAR 0 1
31635: PUSH
31636: LD_VAR 0 2
31640: PUSH
31641: FOR_IN
31642: IFFALSE 31687
// if CanSpot ( JMM , i ) then
31644: LD_EXP 14
31648: PPUSH
31649: LD_VAR 0 1
31653: PPUSH
31654: CALL 28307 0 2
31658: IFFALSE 31685
// begin tmp := tmp diff i ;
31660: LD_ADDR_VAR 0 2
31664: PUSH
31665: LD_VAR 0 2
31669: PUSH
31670: LD_VAR 0 1
31674: DIFF
31675: ST_TO_ADDR
// Spot ( i ) ;
31676: LD_VAR 0 1
31680: PPUSH
31681: CALL 31699 0 1
// end ;
31685: GO 31641
31687: POP
31688: POP
// until not tmp ;
31689: LD_VAR 0 2
31693: NOT
31694: IFFALSE 31624
// end ;
31696: PPOPN 2
31698: END
// export function Spot ( unit ) ; var building , side , joined ; begin
31699: LD_INT 0
31701: PPUSH
31702: PPUSH
31703: PPUSH
31704: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
31705: LD_VAR 0 1
31709: NOT
31710: PUSH
31711: LD_VAR 0 1
31715: PPUSH
31716: CALL_OW 255
31720: PUSH
31721: LD_INT 4
31723: NONEQUAL
31724: OR
31725: PUSH
31726: LD_VAR 0 1
31730: PPUSH
31731: CALL_OW 555
31735: OR
31736: PUSH
31737: LD_VAR 0 1
31741: PPUSH
31742: CALL_OW 302
31746: NOT
31747: OR
31748: IFFALSE 31752
// exit ;
31750: GO 33641
// InGameOn ;
31752: CALL_OW 8
// side := GetSide ( JMM ) ;
31756: LD_ADDR_VAR 0 4
31760: PUSH
31761: LD_EXP 14
31765: PPUSH
31766: CALL_OW 255
31770: ST_TO_ADDR
// joined := false ;
31771: LD_ADDR_VAR 0 5
31775: PUSH
31776: LD_INT 0
31778: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
31779: LD_ADDR_VAR 0 3
31783: PUSH
31784: LD_VAR 0 1
31788: PPUSH
31789: CALL_OW 310
31793: ST_TO_ADDR
// if building then
31794: LD_VAR 0 3
31798: IFFALSE 31857
// begin SetSide ( JMM , GetSide ( unit ) ) ;
31800: LD_EXP 14
31804: PPUSH
31805: LD_VAR 0 1
31809: PPUSH
31810: CALL_OW 255
31814: PPUSH
31815: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
31819: LD_EXP 14
31823: PPUSH
31824: LD_VAR 0 3
31828: PPUSH
31829: CALL_OW 120
// repeat wait ( 3 ) ;
31833: LD_INT 3
31835: PPUSH
31836: CALL_OW 67
// until IsInUnit ( JMM ) ;
31840: LD_EXP 14
31844: PPUSH
31845: CALL_OW 310
31849: IFFALSE 31833
// DialogueOn ;
31851: CALL_OW 6
// end else
31855: GO 31889
// begin ComTurnUnit ( JMM , unit ) ;
31857: LD_EXP 14
31861: PPUSH
31862: LD_VAR 0 1
31866: PPUSH
31867: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
31871: LD_VAR 0 1
31875: PPUSH
31876: LD_EXP 14
31880: PPUSH
31881: CALL_OW 119
// DialogueOn ;
31885: CALL_OW 6
// end ; if unit = Joan then
31889: LD_VAR 0 1
31893: PUSH
31894: LD_EXP 36
31898: EQUAL
31899: IFFALSE 32009
// begin joined := true ;
31901: LD_ADDR_VAR 0 5
31905: PUSH
31906: LD_INT 1
31908: ST_TO_ADDR
// if Joan in selected then
31909: LD_EXP 36
31913: PUSH
31914: LD_EXP 3
31918: IN
31919: IFFALSE 31947
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
31921: LD_EXP 36
31925: PPUSH
31926: LD_STRING D3-Joan-Joan-1
31928: PPUSH
31929: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
31933: LD_EXP 14
31937: PPUSH
31938: LD_STRING D3-Joan-JMM-1
31940: PPUSH
31941: CALL_OW 88
// end else
31945: GO 32007
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
31947: LD_EXP 36
31951: PPUSH
31952: LD_STRING D4-Joan-Joan-1
31954: PPUSH
31955: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
31959: LD_EXP 14
31963: PPUSH
31964: LD_STRING D4-Joan-JMM-1
31966: PPUSH
31967: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
31971: LD_EXP 36
31975: PPUSH
31976: LD_STRING D4-Joan-Joan-2
31978: PPUSH
31979: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
31983: LD_EXP 14
31987: PPUSH
31988: LD_STRING D4-Joan-JMM-2
31990: PPUSH
31991: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
31995: LD_EXP 36
31999: PPUSH
32000: LD_STRING D4-Joan-Joan-3
32002: PPUSH
32003: CALL_OW 88
// end ; end else
32007: GO 33449
// if unit = Lisa then
32009: LD_VAR 0 1
32013: PUSH
32014: LD_EXP 23
32018: EQUAL
32019: IFFALSE 32211
// begin if Lisa in selected then
32021: LD_EXP 23
32025: PUSH
32026: LD_EXP 3
32030: IN
32031: IFFALSE 32144
// begin if GetSide ( Joan ) = 7 then
32033: LD_EXP 36
32037: PPUSH
32038: CALL_OW 255
32042: PUSH
32043: LD_INT 7
32045: EQUAL
32046: IFFALSE 32110
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
32048: LD_EXP 23
32052: PPUSH
32053: LD_STRING D3-LisaJ-Lisa-1
32055: PPUSH
32056: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
32060: LD_EXP 14
32064: PPUSH
32065: LD_STRING D3-LisaJ-JMM-1
32067: PPUSH
32068: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
32072: LD_EXP 23
32076: PPUSH
32077: LD_STRING D3-LisaJ-Lisa-2
32079: PPUSH
32080: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
32084: LD_EXP 14
32088: PPUSH
32089: LD_STRING D3-LisaJ-JMM-2
32091: PPUSH
32092: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
32096: LD_EXP 23
32100: PPUSH
32101: LD_STRING D3-LisaJ-Lisa-3
32103: PPUSH
32104: CALL_OW 88
// end else
32108: GO 32142
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
32110: LD_EXP 23
32114: PPUSH
32115: LD_STRING D3-LisaL-Lisa-1
32117: PPUSH
32118: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
32122: LD_EXP 14
32126: PPUSH
32127: LD_STRING D3-LisaL-JMM-1
32129: PPUSH
32130: CALL_OW 88
// joined := true ;
32134: LD_ADDR_VAR 0 5
32138: PUSH
32139: LD_INT 1
32141: ST_TO_ADDR
// end ; end else
32142: GO 32209
// begin if GetSide ( Joan ) = 7 then
32144: LD_EXP 36
32148: PPUSH
32149: CALL_OW 255
32153: PUSH
32154: LD_INT 7
32156: EQUAL
32157: IFFALSE 32197
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
32159: LD_EXP 23
32163: PPUSH
32164: LD_STRING D4-LisaJ-Lisa-1
32166: PPUSH
32167: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
32171: LD_EXP 14
32175: PPUSH
32176: LD_STRING D4-LisaJ-JMM-1
32178: PPUSH
32179: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
32183: LD_EXP 23
32187: PPUSH
32188: LD_STRING D4-LisaJ-Lisa-2
32190: PPUSH
32191: CALL_OW 88
// end else
32195: GO 32209
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
32197: LD_EXP 23
32201: PPUSH
32202: LD_STRING D4-LisaL-Lisa-1
32204: PPUSH
32205: CALL_OW 88
// end ; end ; end else
32209: GO 33449
// if unit = Frank then
32211: LD_VAR 0 1
32215: PUSH
32216: LD_EXP 33
32220: EQUAL
32221: IFFALSE 32361
// begin joined := true ;
32223: LD_ADDR_VAR 0 5
32227: PUSH
32228: LD_INT 1
32230: ST_TO_ADDR
// if Frank in selected then
32231: LD_EXP 33
32235: PUSH
32236: LD_EXP 3
32240: IN
32241: IFFALSE 32311
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
32243: LD_EXP 33
32247: PPUSH
32248: LD_STRING D3-Frank-Frank-1
32250: PPUSH
32251: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
32255: LD_EXP 14
32259: PPUSH
32260: LD_STRING D3-Frank-JMM-1
32262: PPUSH
32263: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
32267: LD_EXP 33
32271: PPUSH
32272: LD_STRING D3-Frank-Frank-2
32274: PPUSH
32275: CALL_OW 88
// if reached_lab then
32279: LD_EXP 5
32283: IFFALSE 32309
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
32285: LD_EXP 14
32289: PPUSH
32290: LD_STRING D3-Frank-JMM-2
32292: PPUSH
32293: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
32297: LD_EXP 33
32301: PPUSH
32302: LD_STRING D3-Frank-Frank-3
32304: PPUSH
32305: CALL_OW 88
// end ; end else
32309: GO 32359
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
32311: LD_EXP 33
32315: PPUSH
32316: LD_STRING D4-Frank-Frank-1
32318: PPUSH
32319: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
32323: LD_EXP 14
32327: PPUSH
32328: LD_STRING D4-Frank-JMM-1
32330: PPUSH
32331: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
32335: LD_EXP 33
32339: PPUSH
32340: LD_STRING D4-Frank-Frank-2
32342: PPUSH
32343: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
32347: LD_EXP 14
32351: PPUSH
32352: LD_STRING D4-Frank-JMM-2
32354: PPUSH
32355: CALL_OW 88
// end ; end else
32359: GO 33449
// if unit = Brown then
32361: LD_VAR 0 1
32365: PUSH
32366: LD_EXP 28
32370: EQUAL
32371: IFFALSE 32467
// begin if Brown in selected or gamma_commander = 2 then
32373: LD_EXP 28
32377: PUSH
32378: LD_EXP 3
32382: IN
32383: PUSH
32384: LD_EXP 10
32388: PUSH
32389: LD_INT 2
32391: EQUAL
32392: OR
32393: IFFALSE 32429
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
32395: LD_EXP 28
32399: PPUSH
32400: LD_STRING D3-Soldier1-Sol1-1
32402: PPUSH
32403: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
32407: LD_EXP 14
32411: PPUSH
32412: LD_STRING D3-Soldier1-JMM-1
32414: PPUSH
32415: CALL_OW 88
// joined := true ;
32419: LD_ADDR_VAR 0 5
32423: PUSH
32424: LD_INT 1
32426: ST_TO_ADDR
// end else
32427: GO 32465
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
32429: LD_EXP 28
32433: PPUSH
32434: LD_STRING D4-Soldier2-Sol1-1
32436: PPUSH
32437: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
32441: LD_EXP 14
32445: PPUSH
32446: LD_STRING D4-Soldier1-JMM-1
32448: PPUSH
32449: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
32453: LD_EXP 28
32457: PPUSH
32458: LD_STRING D4-Soldier2-Sol1-2
32460: PPUSH
32461: CALL_OW 88
// end ; end else
32465: GO 33449
// if unit = Donaldson then
32467: LD_VAR 0 1
32471: PUSH
32472: LD_EXP 24
32476: EQUAL
32477: IFFALSE 32573
// begin if Donaldson in selected or gamma_commander = 1 then
32479: LD_EXP 24
32483: PUSH
32484: LD_EXP 3
32488: IN
32489: PUSH
32490: LD_EXP 10
32494: PUSH
32495: LD_INT 1
32497: EQUAL
32498: OR
32499: IFFALSE 32535
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
32501: LD_EXP 24
32505: PPUSH
32506: LD_STRING D3-Soldier2-FSol2-1
32508: PPUSH
32509: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
32513: LD_EXP 14
32517: PPUSH
32518: LD_STRING D3-Soldier2-JMM-1
32520: PPUSH
32521: CALL_OW 88
// joined := true ;
32525: LD_ADDR_VAR 0 5
32529: PUSH
32530: LD_INT 1
32532: ST_TO_ADDR
// end else
32533: GO 32571
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
32535: LD_VAR 0 1
32539: PPUSH
32540: LD_STRING D4-Soldier1-FSol1-1
32542: PPUSH
32543: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
32547: LD_EXP 14
32551: PPUSH
32552: LD_STRING D4-Soldier1-JMM-1
32554: PPUSH
32555: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
32559: LD_VAR 0 1
32563: PPUSH
32564: LD_STRING D4-Soldier1-FSol1-2
32566: PPUSH
32567: CALL_OW 88
// end ; end else
32571: GO 33449
// if unit = Cyrus then
32573: LD_VAR 0 1
32577: PUSH
32578: LD_EXP 26
32582: EQUAL
32583: IFFALSE 32657
// begin if Cyrus in selected then
32585: LD_EXP 26
32589: PUSH
32590: LD_EXP 3
32594: IN
32595: IFFALSE 32631
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
32597: LD_EXP 26
32601: PPUSH
32602: LD_STRING D3-Cyrus-Cyrus-1
32604: PPUSH
32605: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
32609: LD_EXP 14
32613: PPUSH
32614: LD_STRING D3-Cyrus-JMM-1
32616: PPUSH
32617: CALL_OW 88
// joined := true ;
32621: LD_ADDR_VAR 0 5
32625: PUSH
32626: LD_INT 1
32628: ST_TO_ADDR
// end else
32629: GO 32655
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
32631: LD_EXP 26
32635: PPUSH
32636: LD_STRING D4-Cyrus-Cyrus-1
32638: PPUSH
32639: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
32643: LD_EXP 14
32647: PPUSH
32648: LD_STRING D4-Cyrus-JMM-1
32650: PPUSH
32651: CALL_OW 88
// end ; end else
32655: GO 33449
// if unit = Bobby then
32657: LD_VAR 0 1
32661: PUSH
32662: LD_EXP 25
32666: EQUAL
32667: IFFALSE 32753
// begin if Bobby in selected then
32669: LD_EXP 25
32673: PUSH
32674: LD_EXP 3
32678: IN
32679: IFFALSE 32715
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
32681: LD_EXP 25
32685: PPUSH
32686: LD_STRING D3-Bobby-Bobby-1
32688: PPUSH
32689: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
32693: LD_EXP 14
32697: PPUSH
32698: LD_STRING D3-Bobby-JMM-1
32700: PPUSH
32701: CALL_OW 88
// joined := true ;
32705: LD_ADDR_VAR 0 5
32709: PUSH
32710: LD_INT 1
32712: ST_TO_ADDR
// end else
32713: GO 32751
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
32715: LD_EXP 25
32719: PPUSH
32720: LD_STRING D4-Bobby-Bobby-1
32722: PPUSH
32723: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
32727: LD_EXP 14
32731: PPUSH
32732: LD_STRING D4-Bobby-JMM-1
32734: PPUSH
32735: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
32739: LD_EXP 25
32743: PPUSH
32744: LD_STRING D4-Bobby-Bobby-2
32746: PPUSH
32747: CALL_OW 88
// end ; end else
32751: GO 33449
// if unit = Cornel then
32753: LD_VAR 0 1
32757: PUSH
32758: LD_EXP 31
32762: EQUAL
32763: IFFALSE 32861
// begin if Cornel in selected then
32765: LD_EXP 31
32769: PUSH
32770: LD_EXP 3
32774: IN
32775: IFFALSE 32823
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
32777: LD_EXP 31
32781: PPUSH
32782: LD_STRING D3-Mark-Corn-1
32784: PPUSH
32785: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
32789: LD_EXP 14
32793: PPUSH
32794: LD_STRING D3-Mark-JMM-1
32796: PPUSH
32797: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
32801: LD_EXP 31
32805: PPUSH
32806: LD_STRING D3-Mark-Corn-2
32808: PPUSH
32809: CALL_OW 88
// joined := true ;
32813: LD_ADDR_VAR 0 5
32817: PUSH
32818: LD_INT 1
32820: ST_TO_ADDR
// end else
32821: GO 32859
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
32823: LD_EXP 31
32827: PPUSH
32828: LD_STRING D4-Mark-Corn-1
32830: PPUSH
32831: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
32835: LD_EXP 14
32839: PPUSH
32840: LD_STRING D3-Joan-JMM-1
32842: PPUSH
32843: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
32847: LD_EXP 31
32851: PPUSH
32852: LD_STRING D4-Mark-Corn-2
32854: PPUSH
32855: CALL_OW 88
// end ; end else
32859: GO 33449
// if unit = Gary then
32861: LD_VAR 0 1
32865: PUSH
32866: LD_EXP 32
32870: EQUAL
32871: IFFALSE 32955
// begin if Gary in selected then
32873: LD_EXP 32
32877: PUSH
32878: LD_EXP 3
32882: IN
32883: IFFALSE 32919
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
32885: LD_EXP 32
32889: PPUSH
32890: LD_STRING D3-Gary-Gary-1
32892: PPUSH
32893: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
32897: LD_EXP 14
32901: PPUSH
32902: LD_STRING D3-Gary-JMM-1
32904: PPUSH
32905: CALL_OW 88
// joined := true ;
32909: LD_ADDR_VAR 0 5
32913: PUSH
32914: LD_INT 1
32916: ST_TO_ADDR
// end else
32917: GO 32953
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
32919: LD_EXP 32
32923: PPUSH
32924: LD_STRING D4-Gary-Gary-1
32926: PPUSH
32927: CALL_OW 88
// SetSide ( Gary , 1 ) ;
32931: LD_EXP 32
32935: PPUSH
32936: LD_INT 1
32938: PPUSH
32939: CALL_OW 235
// DialogueOff ;
32943: CALL_OW 7
// InGameOff ;
32947: CALL_OW 9
// exit ;
32951: GO 33641
// end ; end else
32953: GO 33449
// if unit = Kikuchi then
32955: LD_VAR 0 1
32959: PUSH
32960: LD_EXP 34
32964: EQUAL
32965: IFFALSE 33049
// begin if Kikuchi in selected then
32967: LD_EXP 34
32971: PUSH
32972: LD_EXP 3
32976: IN
32977: IFFALSE 33013
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
32979: LD_EXP 34
32983: PPUSH
32984: LD_STRING D3-Yamako-Yam-1
32986: PPUSH
32987: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
32991: LD_EXP 14
32995: PPUSH
32996: LD_STRING D3-Soldier2-JMM-1
32998: PPUSH
32999: CALL_OW 88
// joined := true ;
33003: LD_ADDR_VAR 0 5
33007: PUSH
33008: LD_INT 1
33010: ST_TO_ADDR
// end else
33011: GO 33047
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
33013: LD_EXP 34
33017: PPUSH
33018: LD_STRING D4-Yamako-Yam-1
33020: PPUSH
33021: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
33025: LD_EXP 34
33029: PPUSH
33030: LD_INT 1
33032: PPUSH
33033: CALL_OW 235
// DialogueOff ;
33037: CALL_OW 7
// InGameOff ;
33041: CALL_OW 9
// exit ;
33045: GO 33641
// end ; end else
33047: GO 33449
// if unit = Gladstone then
33049: LD_VAR 0 1
33053: PUSH
33054: LD_EXP 29
33058: EQUAL
33059: IFFALSE 33133
// begin if Gladstone in selected then
33061: LD_EXP 29
33065: PUSH
33066: LD_EXP 3
33070: IN
33071: IFFALSE 33107
// begin joined := true ;
33073: LD_ADDR_VAR 0 5
33077: PUSH
33078: LD_INT 1
33080: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
33081: LD_EXP 14
33085: PPUSH
33086: LD_STRING D3-Tim-JMM-1
33088: PPUSH
33089: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
33093: LD_EXP 29
33097: PPUSH
33098: LD_STRING D3-Tim-Glad-1
33100: PPUSH
33101: CALL_OW 88
// end else
33105: GO 33131
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
33107: LD_EXP 14
33111: PPUSH
33112: LD_STRING D4-Tim-JMM-1
33114: PPUSH
33115: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
33119: LD_EXP 29
33123: PPUSH
33124: LD_STRING D4-Tim-Glad-1
33126: PPUSH
33127: CALL_OW 88
// end ; end else
33131: GO 33449
// if unit = Denis then
33133: LD_VAR 0 1
33137: PUSH
33138: LD_EXP 27
33142: EQUAL
33143: IFFALSE 33179
// begin joined := true ;
33145: LD_ADDR_VAR 0 5
33149: PUSH
33150: LD_INT 1
33152: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
33153: LD_EXP 27
33157: PPUSH
33158: LD_STRING D3-Denis-Den-1
33160: PPUSH
33161: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
33165: LD_EXP 14
33169: PPUSH
33170: LD_STRING D3-Denis-JMM-1
33172: PPUSH
33173: CALL_OW 88
// end else
33177: GO 33449
// if unit = Simms then
33179: LD_VAR 0 1
33183: PUSH
33184: LD_EXP 35
33188: EQUAL
33189: IFFALSE 33225
// begin joined := true ;
33191: LD_ADDR_VAR 0 5
33195: PUSH
33196: LD_INT 1
33198: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
33199: LD_EXP 35
33203: PPUSH
33204: LD_STRING D3-Simms-Sim-1
33206: PPUSH
33207: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
33211: LD_EXP 14
33215: PPUSH
33216: LD_STRING D3-Simms-JMM-1
33218: PPUSH
33219: CALL_OW 88
// end else
33223: GO 33449
// if unit = DeltaDoctor then
33225: LD_VAR 0 1
33229: PUSH
33230: LD_EXP 37
33234: EQUAL
33235: IFFALSE 33271
// begin joined := true ;
33237: LD_ADDR_VAR 0 5
33241: PUSH
33242: LD_INT 1
33244: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
33245: LD_EXP 37
33249: PPUSH
33250: LD_STRING D3-Soldier1-Sol1-1
33252: PPUSH
33253: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
33257: LD_EXP 14
33261: PPUSH
33262: LD_STRING D3-Soldier1-JMM-1
33264: PPUSH
33265: CALL_OW 88
// end else
33269: GO 33449
// begin joined := unit in selected ;
33271: LD_ADDR_VAR 0 5
33275: PUSH
33276: LD_VAR 0 1
33280: PUSH
33281: LD_EXP 3
33285: IN
33286: ST_TO_ADDR
// if joined then
33287: LD_VAR 0 5
33291: IFFALSE 33360
// begin if GetSex ( unit ) = sex_male then
33293: LD_VAR 0 1
33297: PPUSH
33298: CALL_OW 258
33302: PUSH
33303: LD_INT 1
33305: EQUAL
33306: IFFALSE 33334
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
33308: LD_VAR 0 1
33312: PPUSH
33313: LD_STRING D3-Soldier1-Sol1-1
33315: PPUSH
33316: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
33320: LD_EXP 14
33324: PPUSH
33325: LD_STRING D3-Soldier1-JMM-1
33327: PPUSH
33328: CALL_OW 88
// end else
33332: GO 33358
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
33334: LD_VAR 0 1
33338: PPUSH
33339: LD_STRING D3-Soldier2-FSol2-1
33341: PPUSH
33342: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
33346: LD_EXP 14
33350: PPUSH
33351: LD_STRING D3-Soldier2-JMM-1
33353: PPUSH
33354: CALL_OW 88
// end ; end else
33358: GO 33449
// begin if GetSex ( unit ) = sex_male then
33360: LD_VAR 0 1
33364: PPUSH
33365: CALL_OW 258
33369: PUSH
33370: LD_INT 1
33372: EQUAL
33373: IFFALSE 33413
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
33375: LD_VAR 0 1
33379: PPUSH
33380: LD_STRING D4-Soldier2-Sol1-1
33382: PPUSH
33383: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
33387: LD_EXP 14
33391: PPUSH
33392: LD_STRING D4-Soldier2-JMM-1
33394: PPUSH
33395: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
33399: LD_VAR 0 1
33403: PPUSH
33404: LD_STRING D4-Soldier2-Sol2-1
33406: PPUSH
33407: CALL_OW 88
// end else
33411: GO 33449
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
33413: LD_VAR 0 1
33417: PPUSH
33418: LD_STRING D4-Soldier1-FSol1-1
33420: PPUSH
33421: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
33425: LD_EXP 14
33429: PPUSH
33430: LD_STRING D4-Soldier1-JMM-1
33432: PPUSH
33433: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
33437: LD_VAR 0 1
33441: PPUSH
33442: LD_STRING D4-Soldier1-FSol1-2
33444: PPUSH
33445: CALL_OW 88
// end ; end ; end ; DialogueOff ;
33449: CALL_OW 7
// InGameOff ;
33453: CALL_OW 9
// if building then
33457: LD_VAR 0 3
33461: IFFALSE 33562
// begin SetSide ( JMM , side ) ;
33463: LD_EXP 14
33467: PPUSH
33468: LD_VAR 0 4
33472: PPUSH
33473: CALL_OW 235
// ComExitBuilding ( JMM ) ;
33477: LD_EXP 14
33481: PPUSH
33482: CALL_OW 122
// if joined then
33486: LD_VAR 0 5
33490: IFFALSE 33529
// begin SetSide ( unit , side ) ;
33492: LD_VAR 0 1
33496: PPUSH
33497: LD_VAR 0 4
33501: PPUSH
33502: CALL_OW 235
// SetSide ( building , 1 ) ;
33506: LD_VAR 0 3
33510: PPUSH
33511: LD_INT 1
33513: PPUSH
33514: CALL_OW 235
// ComExitBuilding ( unit ) ;
33518: LD_VAR 0 1
33522: PPUSH
33523: CALL_OW 122
// end else
33527: GO 33560
// begin wait ( 0 0$10 ) ;
33529: LD_INT 350
33531: PPUSH
33532: CALL_OW 67
// SetSide ( unit , 1 ) ;
33536: LD_VAR 0 1
33540: PPUSH
33541: LD_INT 1
33543: PPUSH
33544: CALL_OW 235
// SetSide ( building , 1 ) ;
33548: LD_VAR 0 3
33552: PPUSH
33553: LD_INT 1
33555: PPUSH
33556: CALL_OW 235
// end ; end else
33560: GO 33641
// begin ComStop ( [ JMM , unit ] ) ;
33562: LD_EXP 14
33566: PUSH
33567: LD_VAR 0 1
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PPUSH
33576: CALL_OW 141
// if joined then
33580: LD_VAR 0 5
33584: IFFALSE 33602
// SetSide ( unit , side ) else
33586: LD_VAR 0 1
33590: PPUSH
33591: LD_VAR 0 4
33595: PPUSH
33596: CALL_OW 235
33600: GO 33641
// begin repeat wait ( 0 0$1 ) ;
33602: LD_INT 35
33604: PPUSH
33605: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
33609: LD_EXP 14
33613: PPUSH
33614: LD_VAR 0 1
33618: PPUSH
33619: CALL_OW 296
33623: PUSH
33624: LD_INT 11
33626: GREATER
33627: IFFALSE 33602
// SetSide ( unit , 1 ) ;
33629: LD_VAR 0 1
33633: PPUSH
33634: LD_INT 1
33636: PPUSH
33637: CALL_OW 235
// end ; end ; end ;
33641: LD_VAR 0 2
33645: RET
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
33646: LD_EXP 14
33650: PPUSH
33651: CALL_OW 310
33655: PUSH
33656: LD_INT 47
33658: EQUAL
33659: IFFALSE 33727
33661: GO 33663
33663: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
33664: LD_STRING M1a
33666: PPUSH
33667: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
33671: LD_INT 13
33673: PPUSH
33674: LD_INT 7
33676: PPUSH
33677: LD_INT 2
33679: PPUSH
33680: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
33684: LD_INT 29
33686: PPUSH
33687: LD_INT 7
33689: PPUSH
33690: LD_INT 2
33692: PPUSH
33693: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
33697: LD_EXP 14
33701: PPUSH
33702: LD_INT 9
33704: PPUSH
33705: CALL_OW 336
// can_escape := true ;
33709: LD_ADDR_EXP 6
33713: PUSH
33714: LD_INT 1
33716: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
33717: LD_INT 19
33719: PPUSH
33720: LD_INT 1
33722: PPUSH
33723: CALL_OW 424
// end ;
33727: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
33728: LD_EXP 16
33732: PPUSH
33733: CALL_OW 256
33737: PUSH
33738: LD_INT 999
33740: LESS
33741: IFFALSE 33792
33743: GO 33745
33745: DISABLE
// begin enable ;
33746: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
33747: LD_INT 25
33749: PPUSH
33750: LD_INT 48
33752: PPUSH
33753: CALL_OW 428
33757: PUSH
33758: LD_EXP 16
33762: EQUAL
33763: IFFALSE 33777
// begin RemoveUnit ( Powell ) ;
33765: LD_EXP 16
33769: PPUSH
33770: CALL_OW 64
// disable ;
33774: DISABLE
// end else
33775: GO 33792
// ComMoveXY ( Powell , 25 , 48 ) ;
33777: LD_EXP 16
33781: PPUSH
33782: LD_INT 25
33784: PPUSH
33785: LD_INT 48
33787: PPUSH
33788: CALL_OW 111
// end ;
33792: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
33793: LD_INT 22
33795: PUSH
33796: LD_INT 4
33798: PUSH
33799: EMPTY
33800: LIST
33801: LIST
33802: PUSH
33803: LD_INT 21
33805: PUSH
33806: LD_INT 1
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PUSH
33813: LD_INT 3
33815: PUSH
33816: LD_INT 24
33818: PUSH
33819: LD_INT 990
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: LIST
33834: PPUSH
33835: CALL_OW 69
33839: PUSH
33840: LD_EXP 15
33844: DIFF
33845: IFFALSE 33989
33847: GO 33849
33849: DISABLE
33850: LD_INT 0
33852: PPUSH
// begin enable ;
33853: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
33854: LD_ADDR_VAR 0 1
33858: PUSH
33859: LD_INT 22
33861: PUSH
33862: LD_INT 4
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 21
33871: PUSH
33872: LD_INT 1
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 3
33881: PUSH
33882: LD_INT 24
33884: PUSH
33885: LD_INT 990
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: LIST
33900: PPUSH
33901: CALL_OW 69
33905: PUSH
33906: LD_EXP 15
33910: DIFF
33911: PUSH
33912: FOR_IN
33913: IFFALSE 33987
// begin ComFree ( i ) ;
33915: LD_VAR 0 1
33919: PPUSH
33920: CALL_OW 139
// SetSide ( i , 1 ) ;
33924: LD_VAR 0 1
33928: PPUSH
33929: LD_INT 1
33931: PPUSH
33932: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
33936: LD_VAR 0 1
33940: PPUSH
33941: LD_EXP 14
33945: PPUSH
33946: CALL_OW 296
33950: PUSH
33951: LD_INT 14
33953: LESS
33954: IFFALSE 33985
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
33956: LD_VAR 0 1
33960: PPUSH
33961: LD_EXP 14
33965: PPUSH
33966: CALL_OW 250
33970: PPUSH
33971: LD_EXP 14
33975: PPUSH
33976: CALL_OW 251
33980: PPUSH
33981: CALL_OW 114
// end ;
33985: GO 33912
33987: POP
33988: POP
// end ;
33989: PPOPN 1
33991: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
33992: LD_INT 22
33994: PUSH
33995: LD_INT 4
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 34
34004: PUSH
34005: LD_INT 12
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: EMPTY
34013: LIST
34014: LIST
34015: PPUSH
34016: CALL_OW 69
34020: IFFALSE 34102
34022: GO 34024
34024: DISABLE
34025: LD_INT 0
34027: PPUSH
// begin enable ;
34028: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
34029: LD_ADDR_VAR 0 1
34033: PUSH
34034: LD_INT 22
34036: PUSH
34037: LD_INT 4
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 34
34046: PUSH
34047: LD_INT 12
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PUSH
34054: EMPTY
34055: LIST
34056: LIST
34057: PPUSH
34058: CALL_OW 69
34062: PUSH
34063: FOR_IN
34064: IFFALSE 34100
// if GetDistUnits ( i , JMM ) < 6 then
34066: LD_VAR 0 1
34070: PPUSH
34071: LD_EXP 14
34075: PPUSH
34076: CALL_OW 296
34080: PUSH
34081: LD_INT 6
34083: LESS
34084: IFFALSE 34098
// SetSide ( i , 7 ) ;
34086: LD_VAR 0 1
34090: PPUSH
34091: LD_INT 7
34093: PPUSH
34094: CALL_OW 235
34098: GO 34063
34100: POP
34101: POP
// end ;
34102: PPOPN 1
34104: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
34105: LD_EXP 6
34109: PUSH
34110: LD_INT 19
34112: PPUSH
34113: LD_INT 22
34115: PUSH
34116: LD_INT 7
34118: PUSH
34119: EMPTY
34120: LIST
34121: LIST
34122: PUSH
34123: LD_INT 21
34125: PUSH
34126: LD_INT 1
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PPUSH
34137: CALL_OW 71
34141: NOT
34142: AND
34143: PUSH
34144: LD_INT 3
34146: PPUSH
34147: CALL_OW 469
34151: NOT
34152: AND
34153: PUSH
34154: LD_INT 5
34156: PPUSH
34157: CALL_OW 469
34161: NOT
34162: AND
34163: IFFALSE 35785
34165: GO 34167
34167: DISABLE
34168: LD_INT 0
34170: PPUSH
34171: PPUSH
34172: PPUSH
34173: PPUSH
34174: PPUSH
// begin m1 := false ;
34175: LD_ADDR_VAR 0 3
34179: PUSH
34180: LD_INT 0
34182: ST_TO_ADDR
// m2 := false ;
34183: LD_ADDR_VAR 0 4
34187: PUSH
34188: LD_INT 0
34190: ST_TO_ADDR
// m3 := false ;
34191: LD_ADDR_VAR 0 5
34195: PUSH
34196: LD_INT 0
34198: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
34199: LD_ADDR_VAR 0 1
34203: PUSH
34204: LD_EXP 3
34208: PPUSH
34209: LD_INT 22
34211: PUSH
34212: LD_INT 4
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 21
34221: PUSH
34222: LD_INT 1
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PPUSH
34233: CALL_OW 72
34237: PUSH
34238: LD_INT 0
34240: EQUAL
34241: ST_TO_ADDR
// if not all_taken then
34242: LD_VAR 0 1
34246: NOT
34247: IFFALSE 34388
// case query ( Q1 ) of 1 :
34249: LD_STRING Q1
34251: PPUSH
34252: CALL_OW 97
34256: PUSH
34257: LD_INT 1
34259: DOUBLE
34260: EQUAL
34261: IFTRUE 34265
34263: GO 34376
34265: POP
// begin repeat wait ( 0 0$1 ) ;
34266: LD_INT 35
34268: PPUSH
34269: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
34273: LD_EXP 3
34277: PPUSH
34278: LD_INT 22
34280: PUSH
34281: LD_INT 4
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 21
34290: PUSH
34291: LD_INT 1
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: EMPTY
34299: LIST
34300: LIST
34301: PPUSH
34302: CALL_OW 72
34306: PUSH
34307: LD_INT 0
34309: EQUAL
34310: PUSH
34311: LD_INT 19
34313: PPUSH
34314: LD_INT 22
34316: PUSH
34317: LD_INT 7
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 21
34326: PUSH
34327: LD_INT 1
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PPUSH
34338: CALL_OW 71
34342: NOT
34343: AND
34344: PUSH
34345: LD_INT 3
34347: PPUSH
34348: CALL_OW 469
34352: NOT
34353: AND
34354: PUSH
34355: LD_INT 5
34357: PPUSH
34358: CALL_OW 469
34362: NOT
34363: AND
34364: IFFALSE 34266
// all_taken := true ;
34366: LD_ADDR_VAR 0 1
34370: PUSH
34371: LD_INT 1
34373: ST_TO_ADDR
// end ; 2 :
34374: GO 34388
34376: LD_INT 2
34378: DOUBLE
34379: EQUAL
34380: IFTRUE 34384
34382: GO 34387
34384: POP
// ; end ;
34385: GO 34388
34387: POP
// if team_kill_counter then
34388: LD_EXP 9
34392: IFFALSE 34408
// Say ( JMM , D5-JMM-1 ) else
34394: LD_EXP 14
34398: PPUSH
34399: LD_STRING D5-JMM-1
34401: PPUSH
34402: CALL_OW 88
34406: GO 34420
// Say ( JMM , D5-JMM-1a ) ;
34408: LD_EXP 14
34412: PPUSH
34413: LD_STRING D5-JMM-1a
34415: PPUSH
34416: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
34420: LD_INT 22
34422: PUSH
34423: LD_INT 7
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PUSH
34430: LD_INT 21
34432: PUSH
34433: LD_INT 1
34435: PUSH
34436: EMPTY
34437: LIST
34438: LIST
34439: PUSH
34440: LD_INT 23
34442: PUSH
34443: LD_INT 1
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: LIST
34454: PPUSH
34455: CALL_OW 69
34459: PUSH
34460: LD_EXP 14
34464: PUSH
34465: LD_EXP 15
34469: PUSH
34470: EMPTY
34471: LIST
34472: LIST
34473: DIFF
34474: PUSH
34475: LD_INT 10
34477: GREATEREQUAL
34478: IFFALSE 34487
// SetAchievement ( ACH_TEAM ) ;
34480: LD_STRING ACH_TEAM
34482: PPUSH
34483: CALL_OW 543
// if not invis_used then
34487: LD_EXP 12
34491: NOT
34492: IFFALSE 34508
// begin wait ( 3 ) ;
34494: LD_INT 3
34496: PPUSH
34497: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
34501: LD_STRING ACH_NOINVIS
34503: PPUSH
34504: CALL_OW 543
// end ; if not alert then
34508: LD_EXP 13
34512: NOT
34513: IFFALSE 34529
// begin wait ( 3 ) ;
34515: LD_INT 3
34517: PPUSH
34518: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
34522: LD_STRING ACH_ALARM
34524: PPUSH
34525: CALL_OW 543
// end ; if tick < 15 15$00 then
34529: LD_OWVAR 1
34533: PUSH
34534: LD_INT 31500
34536: LESS
34537: IFFALSE 34553
// begin wait ( 3 ) ;
34539: LD_INT 3
34541: PPUSH
34542: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
34546: LD_STRING ACH_ASPEED_16
34548: PPUSH
34549: CALL_OW 543
// end ; if all_taken then
34553: LD_VAR 0 1
34557: IFFALSE 34579
// begin AddMedal ( All , 1 ) ;
34559: LD_STRING All
34561: PPUSH
34562: LD_INT 1
34564: PPUSH
34565: CALL_OW 101
// m1 := true ;
34569: LD_ADDR_VAR 0 3
34573: PUSH
34574: LD_INT 1
34576: ST_TO_ADDR
// end else
34577: GO 34590
// AddMedal ( All , - 1 ) ;
34579: LD_STRING All
34581: PPUSH
34582: LD_INT 1
34584: NEG
34585: PPUSH
34586: CALL_OW 101
// if team_kill_counter then
34590: LD_EXP 9
34594: IFFALSE 34609
// AddMedal ( Save , - 1 ) else
34596: LD_STRING Save
34598: PPUSH
34599: LD_INT 1
34601: NEG
34602: PPUSH
34603: CALL_OW 101
34607: GO 34627
// begin AddMedal ( Save , 1 ) ;
34609: LD_STRING Save
34611: PPUSH
34612: LD_INT 1
34614: PPUSH
34615: CALL_OW 101
// m2 := true ;
34619: LD_ADDR_VAR 0 4
34623: PUSH
34624: LD_INT 1
34626: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 1 , 1 ] [ Difficulty ] then
34627: LD_EXP 8
34631: PUSH
34632: LD_INT 2
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: LD_INT 1
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: LIST
34645: PUSH
34646: LD_OWVAR 67
34650: ARRAY
34651: GREATEREQUAL
34652: IFFALSE 34667
// AddMedal ( Friendship , - 1 ) else
34654: LD_STRING Friendship
34656: PPUSH
34657: LD_INT 1
34659: NEG
34660: PPUSH
34661: CALL_OW 101
34665: GO 34685
// begin AddMedal ( Friendship , 1 ) ;
34667: LD_STRING Friendship
34669: PPUSH
34670: LD_INT 1
34672: PPUSH
34673: CALL_OW 101
// m3 := true ;
34677: LD_ADDR_VAR 0 5
34681: PUSH
34682: LD_INT 1
34684: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty = 3 then
34685: LD_VAR 0 3
34689: PUSH
34690: LD_VAR 0 4
34694: AND
34695: PUSH
34696: LD_VAR 0 5
34700: AND
34701: PUSH
34702: LD_OWVAR 67
34706: PUSH
34707: LD_INT 3
34709: EQUAL
34710: AND
34711: IFFALSE 34723
// SetAchievementEX ( ACH_AMER , 16 ) ;
34713: LD_STRING ACH_AMER
34715: PPUSH
34716: LD_INT 16
34718: PPUSH
34719: CALL_OW 564
// GiveMedals ( MAIN ) ;
34723: LD_STRING MAIN
34725: PPUSH
34726: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ] ) ;
34730: LD_ADDR_VAR 0 2
34734: PUSH
34735: LD_INT 22
34737: PUSH
34738: LD_INT 7
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 2
34747: PUSH
34748: LD_INT 25
34750: PUSH
34751: LD_INT 1
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 25
34760: PUSH
34761: LD_INT 2
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 25
34770: PUSH
34771: LD_INT 3
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 25
34780: PUSH
34781: LD_INT 4
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 25
34790: PUSH
34791: LD_INT 5
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 25
34800: PUSH
34801: LD_INT 8
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 25
34810: PUSH
34811: LD_INT 9
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: EMPTY
34833: LIST
34834: PPUSH
34835: CALL_OW 69
34839: ST_TO_ADDR
// RewardPeople ( tmp ^ Roth ) ;
34840: LD_VAR 0 2
34844: PUSH
34845: LD_EXP 15
34849: ADD
34850: PPUSH
34851: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
34855: LD_EXP 14
34859: PPUSH
34860: LD_STRING 12a_JMM
34862: PPUSH
34863: CALL_OW 38
// if IsLive ( Roth ) then
34867: LD_EXP 15
34871: PPUSH
34872: CALL_OW 300
34876: IFFALSE 34890
// SaveCharacters ( Roth , 12a_Roth ) ;
34878: LD_EXP 15
34882: PPUSH
34883: LD_STRING 12a_Roth
34885: PPUSH
34886: CALL_OW 38
// if Lisa in tmp then
34890: LD_EXP 23
34894: PUSH
34895: LD_VAR 0 2
34899: IN
34900: IFFALSE 34916
// SaveCharacters ( Lisa , 12a_Lisa ) else
34902: LD_EXP 23
34906: PPUSH
34907: LD_STRING 12a_Lisa
34909: PPUSH
34910: CALL_OW 38
34914: GO 34934
// if Lisa then
34916: LD_EXP 23
34920: IFFALSE 34934
// SaveCharacters ( Lisa , 12p_Lisa ) ;
34922: LD_EXP 23
34926: PPUSH
34927: LD_STRING 12p_Lisa
34929: PPUSH
34930: CALL_OW 38
// if Donaldson in tmp then
34934: LD_EXP 24
34938: PUSH
34939: LD_VAR 0 2
34943: IN
34944: IFFALSE 34960
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
34946: LD_EXP 24
34950: PPUSH
34951: LD_STRING 12a_Donaldson
34953: PPUSH
34954: CALL_OW 38
34958: GO 34978
// if Donaldson then
34960: LD_EXP 24
34964: IFFALSE 34978
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
34966: LD_EXP 24
34970: PPUSH
34971: LD_STRING 12p_Donaldson
34973: PPUSH
34974: CALL_OW 38
// if Bobby in tmp then
34978: LD_EXP 25
34982: PUSH
34983: LD_VAR 0 2
34987: IN
34988: IFFALSE 35004
// SaveCharacters ( Bobby , 12a_Bobby ) else
34990: LD_EXP 25
34994: PPUSH
34995: LD_STRING 12a_Bobby
34997: PPUSH
34998: CALL_OW 38
35002: GO 35022
// if Bobby then
35004: LD_EXP 25
35008: IFFALSE 35022
// SaveCharacters ( Bobby , 12p_Bobby ) ;
35010: LD_EXP 25
35014: PPUSH
35015: LD_STRING 12p_Bobby
35017: PPUSH
35018: CALL_OW 38
// if Cyrus in tmp then
35022: LD_EXP 26
35026: PUSH
35027: LD_VAR 0 2
35031: IN
35032: IFFALSE 35048
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
35034: LD_EXP 26
35038: PPUSH
35039: LD_STRING 12a_Cyrus
35041: PPUSH
35042: CALL_OW 38
35046: GO 35066
// if Cyrus then
35048: LD_EXP 26
35052: IFFALSE 35066
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
35054: LD_EXP 26
35058: PPUSH
35059: LD_STRING 12p_Cyrus
35061: PPUSH
35062: CALL_OW 38
// if Denis in tmp then
35066: LD_EXP 27
35070: PUSH
35071: LD_VAR 0 2
35075: IN
35076: IFFALSE 35090
// SaveCharacters ( Denis , 12a_Denis ) ;
35078: LD_EXP 27
35082: PPUSH
35083: LD_STRING 12a_Denis
35085: PPUSH
35086: CALL_OW 38
// if Brown in tmp then
35090: LD_EXP 28
35094: PUSH
35095: LD_VAR 0 2
35099: IN
35100: IFFALSE 35116
// SaveCharacters ( Brown , 12a_Brown ) else
35102: LD_EXP 28
35106: PPUSH
35107: LD_STRING 12a_Brown
35109: PPUSH
35110: CALL_OW 38
35114: GO 35140
// if Brown in tmp then
35116: LD_EXP 28
35120: PUSH
35121: LD_VAR 0 2
35125: IN
35126: IFFALSE 35140
// SaveCharacters ( Brown , 12p_Brown ) ;
35128: LD_EXP 28
35132: PPUSH
35133: LD_STRING 12p_Brown
35135: PPUSH
35136: CALL_OW 38
// if Gladstone in tmp then
35140: LD_EXP 29
35144: PUSH
35145: LD_VAR 0 2
35149: IN
35150: IFFALSE 35166
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
35152: LD_EXP 29
35156: PPUSH
35157: LD_STRING 12a_Gladstone
35159: PPUSH
35160: CALL_OW 38
35164: GO 35184
// if Gladstone then
35166: LD_EXP 29
35170: IFFALSE 35184
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
35172: LD_EXP 29
35176: PPUSH
35177: LD_STRING 12p_Gladstone
35179: PPUSH
35180: CALL_OW 38
// if Houten in tmp then
35184: LD_EXP 30
35188: PUSH
35189: LD_VAR 0 2
35193: IN
35194: IFFALSE 35210
// SaveCharacters ( Houten , 12a_Houten ) else
35196: LD_EXP 30
35200: PPUSH
35201: LD_STRING 12a_Houten
35203: PPUSH
35204: CALL_OW 38
35208: GO 35228
// if Houten then
35210: LD_EXP 30
35214: IFFALSE 35228
// SaveCharacters ( Houten , 12p_Houten ) ;
35216: LD_EXP 30
35220: PPUSH
35221: LD_STRING 12p_Houten
35223: PPUSH
35224: CALL_OW 38
// if Cornel in tmp then
35228: LD_EXP 31
35232: PUSH
35233: LD_VAR 0 2
35237: IN
35238: IFFALSE 35254
// SaveCharacters ( Cornel , 12a_Cornell ) else
35240: LD_EXP 31
35244: PPUSH
35245: LD_STRING 12a_Cornell
35247: PPUSH
35248: CALL_OW 38
35252: GO 35272
// if Cornel then
35254: LD_EXP 31
35258: IFFALSE 35272
// SaveCharacters ( Cornel , 12p_Cornell ) ;
35260: LD_EXP 31
35264: PPUSH
35265: LD_STRING 12p_Cornell
35267: PPUSH
35268: CALL_OW 38
// if Gary in tmp then
35272: LD_EXP 32
35276: PUSH
35277: LD_VAR 0 2
35281: IN
35282: IFFALSE 35298
// SaveCharacters ( Gary , 12a_Gary ) else
35284: LD_EXP 32
35288: PPUSH
35289: LD_STRING 12a_Gary
35291: PPUSH
35292: CALL_OW 38
35296: GO 35316
// if Gary then
35298: LD_EXP 32
35302: IFFALSE 35316
// SaveCharacters ( Gary , 12p_Gary ) ;
35304: LD_EXP 32
35308: PPUSH
35309: LD_STRING 12p_Gary
35311: PPUSH
35312: CALL_OW 38
// if Frank in tmp then
35316: LD_EXP 33
35320: PUSH
35321: LD_VAR 0 2
35325: IN
35326: IFFALSE 35340
// SaveCharacters ( Frank , 12a_Frank ) ;
35328: LD_EXP 33
35332: PPUSH
35333: LD_STRING 12a_Frank
35335: PPUSH
35336: CALL_OW 38
// if Kikuchi in tmp then
35340: LD_EXP 34
35344: PUSH
35345: LD_VAR 0 2
35349: IN
35350: IFFALSE 35366
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
35352: LD_EXP 34
35356: PPUSH
35357: LD_STRING 12a_Kikuchi
35359: PPUSH
35360: CALL_OW 38
35364: GO 35384
// if Kikuchi then
35366: LD_EXP 34
35370: IFFALSE 35384
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
35372: LD_EXP 34
35376: PPUSH
35377: LD_STRING 12p_Kikuchi
35379: PPUSH
35380: CALL_OW 38
// if Simms in tmp then
35384: LD_EXP 35
35388: PUSH
35389: LD_VAR 0 2
35393: IN
35394: IFFALSE 35408
// SaveCharacters ( Simms , 12a_Simms ) ;
35396: LD_EXP 35
35400: PPUSH
35401: LD_STRING 12a_Simms
35403: PPUSH
35404: CALL_OW 38
// if Joan in tmp then
35408: LD_EXP 36
35412: PUSH
35413: LD_VAR 0 2
35417: IN
35418: IFFALSE 35432
// SaveCharacters ( Joan , 12a_Joan ) ;
35420: LD_EXP 36
35424: PPUSH
35425: LD_STRING 12a_Joan
35427: PPUSH
35428: CALL_OW 38
// if DeltaDoctor in tmp then
35432: LD_EXP 37
35436: PUSH
35437: LD_VAR 0 2
35441: IN
35442: IFFALSE 35456
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
35444: LD_EXP 37
35448: PPUSH
35449: LD_STRING 12a_DeltaDoctor
35451: PPUSH
35452: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ] ;
35456: LD_ADDR_VAR 0 2
35460: PUSH
35461: LD_VAR 0 2
35465: PUSH
35466: LD_EXP 14
35470: PUSH
35471: LD_EXP 15
35475: PUSH
35476: LD_EXP 23
35480: PUSH
35481: LD_EXP 24
35485: PUSH
35486: LD_EXP 25
35490: PUSH
35491: LD_EXP 26
35495: PUSH
35496: LD_EXP 27
35500: PUSH
35501: LD_EXP 28
35505: PUSH
35506: LD_EXP 29
35510: PUSH
35511: LD_EXP 30
35515: PUSH
35516: LD_EXP 31
35520: PUSH
35521: LD_EXP 32
35525: PUSH
35526: LD_EXP 33
35530: PUSH
35531: LD_EXP 34
35535: PUSH
35536: LD_EXP 35
35540: PUSH
35541: LD_EXP 36
35545: PUSH
35546: LD_EXP 37
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: DIFF
35570: ST_TO_ADDR
// if tmp then
35571: LD_VAR 0 2
35575: IFFALSE 35589
// SaveCharacters ( tmp , 12a_others ) ;
35577: LD_VAR 0 2
35581: PPUSH
35582: LD_STRING 12a_others
35584: PPUSH
35585: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell ] ;
35589: LD_ADDR_VAR 0 2
35593: PUSH
35594: LD_INT 21
35596: PUSH
35597: LD_INT 1
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 23
35606: PUSH
35607: LD_INT 1
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 2
35616: PUSH
35617: LD_INT 22
35619: PUSH
35620: LD_INT 1
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 22
35629: PUSH
35630: LD_INT 4
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: LIST
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: LIST
35646: PPUSH
35647: CALL_OW 69
35651: PUSH
35652: LD_EXP 14
35656: PUSH
35657: LD_EXP 15
35661: PUSH
35662: LD_EXP 23
35666: PUSH
35667: LD_EXP 24
35671: PUSH
35672: LD_EXP 25
35676: PUSH
35677: LD_EXP 26
35681: PUSH
35682: LD_EXP 27
35686: PUSH
35687: LD_EXP 28
35691: PUSH
35692: LD_EXP 29
35696: PUSH
35697: LD_EXP 30
35701: PUSH
35702: LD_EXP 31
35706: PUSH
35707: LD_EXP 32
35711: PUSH
35712: LD_EXP 33
35716: PUSH
35717: LD_EXP 34
35721: PUSH
35722: LD_EXP 35
35726: PUSH
35727: LD_EXP 36
35731: PUSH
35732: LD_EXP 37
35736: PUSH
35737: LD_EXP 16
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: LIST
35748: LIST
35749: LIST
35750: LIST
35751: LIST
35752: LIST
35753: LIST
35754: LIST
35755: LIST
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: LIST
35761: DIFF
35762: ST_TO_ADDR
// if tmp then
35763: LD_VAR 0 2
35767: IFFALSE 35781
// SaveCharacters ( tmp , 12p_others ) ;
35769: LD_VAR 0 2
35773: PPUSH
35774: LD_STRING 12p_others
35776: PPUSH
35777: CALL_OW 38
// YouWin ;
35781: CALL_OW 103
// end ; end_of_file
35785: PPOPN 5
35787: END
// on SailEvent ( event ) do var tmp ;
35788: LD_INT 0
35790: PPUSH
// begin if event = 1 then
35791: LD_VAR 0 1
35795: PUSH
35796: LD_INT 1
35798: EQUAL
35799: IFFALSE 35872
// begin if not mobile_patrol then
35801: LD_EXP 17
35805: NOT
35806: IFFALSE 35810
// exit ;
35808: GO 35872
// tmp := mobile_patrol [ mobile_patrol ] ;
35810: LD_ADDR_VAR 0 2
35814: PUSH
35815: LD_EXP 17
35819: PUSH
35820: LD_EXP 17
35824: ARRAY
35825: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
35826: LD_ADDR_EXP 17
35830: PUSH
35831: LD_EXP 17
35835: PPUSH
35836: LD_EXP 17
35840: PPUSH
35841: CALL_OW 3
35845: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
35846: LD_VAR 0 2
35850: PPUSH
35851: LD_EXP 18
35855: PUSH
35856: LD_EXP 17
35860: PUSH
35861: LD_INT 1
35863: PLUS
35864: ARRAY
35865: PPUSH
35866: EMPTY
35867: PPUSH
35868: CALL 7102 0 3
// end ; end ;
35872: PPOPN 2
35874: END
// on UnitDestroyed ( un ) do begin if un = JMM then
35875: LD_VAR 0 1
35879: PUSH
35880: LD_EXP 14
35884: EQUAL
35885: IFFALSE 35894
// YouLost ( JMM ) ;
35887: LD_STRING JMM
35889: PPUSH
35890: CALL_OW 104
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
35894: LD_VAR 0 1
35898: PPUSH
35899: CALL_OW 255
35903: PUSH
35904: LD_INT 7
35906: EQUAL
35907: PUSH
35908: LD_VAR 0 1
35912: PPUSH
35913: CALL_OW 264
35917: PUSH
35918: LD_INT 12
35920: EQUAL
35921: AND
35922: IFFALSE 35931
// YouLost ( Artifact ) ;
35924: LD_STRING Artifact
35926: PPUSH
35927: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
35931: LD_VAR 0 1
35935: PPUSH
35936: CALL_OW 255
35940: PUSH
35941: LD_INT 7
35943: EQUAL
35944: PUSH
35945: LD_VAR 0 1
35949: PPUSH
35950: CALL_OW 247
35954: PUSH
35955: LD_INT 1
35957: EQUAL
35958: AND
35959: PUSH
35960: LD_VAR 0 1
35964: PUSH
35965: LD_EXP 15
35969: EQUAL
35970: OR
35971: IFFALSE 35987
// team_kill_counter := team_kill_counter + 1 ;
35973: LD_ADDR_EXP 9
35977: PUSH
35978: LD_EXP 9
35982: PUSH
35983: LD_INT 1
35985: PLUS
35986: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
35987: LD_VAR 0 1
35991: PPUSH
35992: CALL_OW 255
35996: PUSH
35997: LD_INT 1
35999: EQUAL
36000: PUSH
36001: LD_VAR 0 1
36005: PPUSH
36006: CALL_OW 247
36010: PUSH
36011: LD_INT 1
36013: EQUAL
36014: AND
36015: IFFALSE 36031
// friends_kill_counter := friends_kill_counter + 1 ;
36017: LD_ADDR_EXP 8
36021: PUSH
36022: LD_EXP 8
36026: PUSH
36027: LD_INT 1
36029: PLUS
36030: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
36031: LD_VAR 0 1
36035: PPUSH
36036: CALL_OW 255
36040: PUSH
36041: LD_INT 1
36043: NONEQUAL
36044: IFFALSE 36048
// exit ;
36046: GO 36125
// if GetControl ( un ) = control_remote then
36048: LD_VAR 0 1
36052: PPUSH
36053: CALL_OW 263
36057: PUSH
36058: LD_INT 2
36060: EQUAL
36061: IFFALSE 36079
// defenders := defenders diff un ;
36063: LD_ADDR_EXP 20
36067: PUSH
36068: LD_EXP 20
36072: PUSH
36073: LD_VAR 0 1
36077: DIFF
36078: ST_TO_ADDR
// if not un in defenders then
36079: LD_VAR 0 1
36083: PUSH
36084: LD_EXP 20
36088: IN
36089: NOT
36090: IFFALSE 36125
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
36092: LD_ADDR_EXP 21
36096: PUSH
36097: LD_VAR 0 1
36101: PPUSH
36102: CALL_OW 250
36106: PUSH
36107: LD_VAR 0 1
36111: PPUSH
36112: CALL_OW 251
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: ST_TO_ADDR
// Defend ;
36121: CALL 2772 0 0
// end ; end ;
36125: PPOPN 1
36127: END
// on VehicleConstructed ( veh , fac ) do begin if GetSide ( veh ) <> 1 then
36128: LD_VAR 0 1
36132: PPUSH
36133: CALL_OW 255
36137: PUSH
36138: LD_INT 1
36140: NONEQUAL
36141: IFFALSE 36145
// exit ;
36143: GO 36169
// if GetControl ( veh ) = control_remote then
36145: LD_VAR 0 1
36149: PPUSH
36150: CALL_OW 263
36154: PUSH
36155: LD_INT 2
36157: EQUAL
36158: IFFALSE 36169
// Connect ( veh ) ;
36160: LD_VAR 0 1
36164: PPUSH
36165: CALL 6297 0 1
// end ;
36169: PPOPN 2
36171: END
// on UnitGoesToRed ( un ) do var i , veh ;
36172: LD_INT 0
36174: PPUSH
36175: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
36176: LD_VAR 0 1
36180: PPUSH
36181: CALL_OW 255
36185: PUSH
36186: LD_INT 1
36188: EQUAL
36189: PUSH
36190: LD_VAR 0 1
36194: PPUSH
36195: CALL_OW 263
36199: PUSH
36200: LD_INT 2
36202: EQUAL
36203: AND
36204: IFFALSE 36215
// ComUnlink ( un ) ;
36206: LD_VAR 0 1
36210: PPUSH
36211: CALL_OW 136
// if un = ambar0 then
36215: LD_VAR 0 1
36219: PUSH
36220: LD_INT 18
36222: EQUAL
36223: IFFALSE 36333
// begin uc_side := 1 ;
36225: LD_ADDR_OWVAR 20
36229: PUSH
36230: LD_INT 1
36232: ST_TO_ADDR
// uc_nation := 1 ;
36233: LD_ADDR_OWVAR 21
36237: PUSH
36238: LD_INT 1
36240: ST_TO_ADDR
// for i = 1 to 6 do
36241: LD_ADDR_VAR 0 2
36245: PUSH
36246: DOUBLE
36247: LD_INT 1
36249: DEC
36250: ST_TO_ADDR
36251: LD_INT 6
36253: PUSH
36254: FOR_TO
36255: IFFALSE 36331
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
36257: LD_INT 3
36259: PPUSH
36260: LD_INT 1
36262: PPUSH
36263: LD_INT 3
36265: PPUSH
36266: LD_INT 4
36268: PPUSH
36269: LD_INT 100
36271: PPUSH
36272: CALL 6061 0 5
// veh := CreateVehicle ;
36276: LD_ADDR_VAR 0 3
36280: PUSH
36281: CALL_OW 45
36285: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
36286: LD_VAR 0 3
36290: PPUSH
36291: LD_INT 1
36293: PPUSH
36294: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
36298: LD_VAR 0 3
36302: PPUSH
36303: LD_INT 25
36305: PPUSH
36306: LD_INT 0
36308: PPUSH
36309: CALL_OW 49
// defenders := defenders ^ veh ;
36313: LD_ADDR_EXP 20
36317: PUSH
36318: LD_EXP 20
36322: PUSH
36323: LD_VAR 0 3
36327: ADD
36328: ST_TO_ADDR
// end ;
36329: GO 36254
36331: POP
36332: POP
// end ; end ;
36333: PPOPN 3
36335: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
36336: LD_VAR 0 2
36340: PUSH
36341: LD_EXP 16
36345: EQUAL
36346: IFFALSE 36357
// RemoveUnit ( Powell ) ;
36348: LD_EXP 16
36352: PPUSH
36353: CALL_OW 64
// end ;
36357: PPOPN 2
36359: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
36360: LD_VAR 0 1
36364: PPUSH
36365: CALL 38778 0 1
// end ; end_of_file
36369: PPOPN 1
36371: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
36372: GO 36374
36374: DISABLE
// begin ru_radar := 98 ;
36375: LD_ADDR_EXP 38
36379: PUSH
36380: LD_INT 98
36382: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
36383: LD_ADDR_EXP 39
36387: PUSH
36388: LD_INT 89
36390: ST_TO_ADDR
// us_hack := 99 ;
36391: LD_ADDR_EXP 40
36395: PUSH
36396: LD_INT 99
36398: ST_TO_ADDR
// us_artillery := 97 ;
36399: LD_ADDR_EXP 41
36403: PUSH
36404: LD_INT 97
36406: ST_TO_ADDR
// ar_bio_bomb := 91 ;
36407: LD_ADDR_EXP 42
36411: PUSH
36412: LD_INT 91
36414: ST_TO_ADDR
// end ; end_of_file end_of_file
36415: END
// export StreamModeActive , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun ; every 0 0$1 do
36416: GO 36418
36418: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
36419: LD_STRING initStreamRollete();
36421: PPUSH
36422: CALL_OW 559
// InitStreamMode ;
36426: CALL 36431 0 0
// end ;
36430: END
// function InitStreamMode ; begin
36431: LD_INT 0
36433: PPUSH
// streamModeActive := false ;
36434: LD_ADDR_EXP 43
36438: PUSH
36439: LD_INT 0
36441: ST_TO_ADDR
// sRocket := false ;
36442: LD_ADDR_EXP 46
36446: PUSH
36447: LD_INT 0
36449: ST_TO_ADDR
// sSpeed := false ;
36450: LD_ADDR_EXP 45
36454: PUSH
36455: LD_INT 0
36457: ST_TO_ADDR
// sEngine := false ;
36458: LD_ADDR_EXP 47
36462: PUSH
36463: LD_INT 0
36465: ST_TO_ADDR
// sSpec := false ;
36466: LD_ADDR_EXP 44
36470: PUSH
36471: LD_INT 0
36473: ST_TO_ADDR
// sLevel := false ;
36474: LD_ADDR_EXP 48
36478: PUSH
36479: LD_INT 0
36481: ST_TO_ADDR
// sArmoury := false ;
36482: LD_ADDR_EXP 49
36486: PUSH
36487: LD_INT 0
36489: ST_TO_ADDR
// sRadar := false ;
36490: LD_ADDR_EXP 50
36494: PUSH
36495: LD_INT 0
36497: ST_TO_ADDR
// sBunker := false ;
36498: LD_ADDR_EXP 51
36502: PUSH
36503: LD_INT 0
36505: ST_TO_ADDR
// sHack := false ;
36506: LD_ADDR_EXP 52
36510: PUSH
36511: LD_INT 0
36513: ST_TO_ADDR
// sFire := false ;
36514: LD_ADDR_EXP 53
36518: PUSH
36519: LD_INT 0
36521: ST_TO_ADDR
// sRefresh := false ;
36522: LD_ADDR_EXP 54
36526: PUSH
36527: LD_INT 0
36529: ST_TO_ADDR
// sExp := false ;
36530: LD_ADDR_EXP 55
36534: PUSH
36535: LD_INT 0
36537: ST_TO_ADDR
// sDepot := false ;
36538: LD_ADDR_EXP 56
36542: PUSH
36543: LD_INT 0
36545: ST_TO_ADDR
// sFlag := false ;
36546: LD_ADDR_EXP 57
36550: PUSH
36551: LD_INT 0
36553: ST_TO_ADDR
// sSold := false ;
36554: LD_ADDR_EXP 58
36558: PUSH
36559: LD_INT 0
36561: ST_TO_ADDR
// sDiff := false ;
36562: LD_ADDR_EXP 59
36566: PUSH
36567: LD_INT 0
36569: ST_TO_ADDR
// sTiger := false ;
36570: LD_ADDR_EXP 60
36574: PUSH
36575: LD_INT 0
36577: ST_TO_ADDR
// sBomb := false ;
36578: LD_ADDR_EXP 61
36582: PUSH
36583: LD_INT 0
36585: ST_TO_ADDR
// sFog := false ;
36586: LD_ADDR_EXP 62
36590: PUSH
36591: LD_INT 0
36593: ST_TO_ADDR
// sReset := false ;
36594: LD_ADDR_EXP 63
36598: PUSH
36599: LD_INT 0
36601: ST_TO_ADDR
// sSun := false ;
36602: LD_ADDR_EXP 64
36606: PUSH
36607: LD_INT 0
36609: ST_TO_ADDR
// end ;
36610: LD_VAR 0 1
36614: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
36615: LD_VAR 0 2
36619: PUSH
36620: LD_INT 100
36622: EQUAL
36623: IFFALSE 37032
// begin if not StreamModeActive then
36625: LD_EXP 43
36629: NOT
36630: IFFALSE 36640
// StreamModeActive := true ;
36632: LD_ADDR_EXP 43
36636: PUSH
36637: LD_INT 1
36639: ST_TO_ADDR
// if p3 = 0 then
36640: LD_VAR 0 3
36644: PUSH
36645: LD_INT 0
36647: EQUAL
36648: IFFALSE 36654
// InitStreamMode ;
36650: CALL 36431 0 0
// if p3 = 1 then
36654: LD_VAR 0 3
36658: PUSH
36659: LD_INT 1
36661: EQUAL
36662: IFFALSE 36672
// sRocket := true ;
36664: LD_ADDR_EXP 46
36668: PUSH
36669: LD_INT 1
36671: ST_TO_ADDR
// if p3 = 2 then
36672: LD_VAR 0 3
36676: PUSH
36677: LD_INT 2
36679: EQUAL
36680: IFFALSE 36690
// sSpeed := true ;
36682: LD_ADDR_EXP 45
36686: PUSH
36687: LD_INT 1
36689: ST_TO_ADDR
// if p3 = 3 then
36690: LD_VAR 0 3
36694: PUSH
36695: LD_INT 3
36697: EQUAL
36698: IFFALSE 36708
// sEngine := true ;
36700: LD_ADDR_EXP 47
36704: PUSH
36705: LD_INT 1
36707: ST_TO_ADDR
// if p3 = 4 then
36708: LD_VAR 0 3
36712: PUSH
36713: LD_INT 4
36715: EQUAL
36716: IFFALSE 36726
// sSpec := true ;
36718: LD_ADDR_EXP 44
36722: PUSH
36723: LD_INT 1
36725: ST_TO_ADDR
// if p3 = 5 then
36726: LD_VAR 0 3
36730: PUSH
36731: LD_INT 5
36733: EQUAL
36734: IFFALSE 36744
// sLevel := true ;
36736: LD_ADDR_EXP 48
36740: PUSH
36741: LD_INT 1
36743: ST_TO_ADDR
// if p3 = 6 then
36744: LD_VAR 0 3
36748: PUSH
36749: LD_INT 6
36751: EQUAL
36752: IFFALSE 36762
// sArmoury := true ;
36754: LD_ADDR_EXP 49
36758: PUSH
36759: LD_INT 1
36761: ST_TO_ADDR
// if p3 = 7 then
36762: LD_VAR 0 3
36766: PUSH
36767: LD_INT 7
36769: EQUAL
36770: IFFALSE 36780
// sRadar := true ;
36772: LD_ADDR_EXP 50
36776: PUSH
36777: LD_INT 1
36779: ST_TO_ADDR
// if p3 = 8 then
36780: LD_VAR 0 3
36784: PUSH
36785: LD_INT 8
36787: EQUAL
36788: IFFALSE 36798
// sBunker := true ;
36790: LD_ADDR_EXP 51
36794: PUSH
36795: LD_INT 1
36797: ST_TO_ADDR
// if p3 = 9 then
36798: LD_VAR 0 3
36802: PUSH
36803: LD_INT 9
36805: EQUAL
36806: IFFALSE 36816
// sHack := true ;
36808: LD_ADDR_EXP 52
36812: PUSH
36813: LD_INT 1
36815: ST_TO_ADDR
// if p3 = 10 then
36816: LD_VAR 0 3
36820: PUSH
36821: LD_INT 10
36823: EQUAL
36824: IFFALSE 36834
// sFire := true ;
36826: LD_ADDR_EXP 53
36830: PUSH
36831: LD_INT 1
36833: ST_TO_ADDR
// if p3 = 11 then
36834: LD_VAR 0 3
36838: PUSH
36839: LD_INT 11
36841: EQUAL
36842: IFFALSE 36852
// sRefresh := true ;
36844: LD_ADDR_EXP 54
36848: PUSH
36849: LD_INT 1
36851: ST_TO_ADDR
// if p3 = 12 then
36852: LD_VAR 0 3
36856: PUSH
36857: LD_INT 12
36859: EQUAL
36860: IFFALSE 36870
// sExp := true ;
36862: LD_ADDR_EXP 55
36866: PUSH
36867: LD_INT 1
36869: ST_TO_ADDR
// if p3 = 13 then
36870: LD_VAR 0 3
36874: PUSH
36875: LD_INT 13
36877: EQUAL
36878: IFFALSE 36888
// sDepot := true ;
36880: LD_ADDR_EXP 56
36884: PUSH
36885: LD_INT 1
36887: ST_TO_ADDR
// if p3 = 14 then
36888: LD_VAR 0 3
36892: PUSH
36893: LD_INT 14
36895: EQUAL
36896: IFFALSE 36906
// sFlag := true ;
36898: LD_ADDR_EXP 57
36902: PUSH
36903: LD_INT 1
36905: ST_TO_ADDR
// if p3 = 101 then
36906: LD_VAR 0 3
36910: PUSH
36911: LD_INT 101
36913: EQUAL
36914: IFFALSE 36924
// sSold := true ;
36916: LD_ADDR_EXP 58
36920: PUSH
36921: LD_INT 1
36923: ST_TO_ADDR
// if p3 = 102 then
36924: LD_VAR 0 3
36928: PUSH
36929: LD_INT 102
36931: EQUAL
36932: IFFALSE 36942
// sDiff := true ;
36934: LD_ADDR_EXP 59
36938: PUSH
36939: LD_INT 1
36941: ST_TO_ADDR
// if p3 = 103 then
36942: LD_VAR 0 3
36946: PUSH
36947: LD_INT 103
36949: EQUAL
36950: IFFALSE 36960
// sFog := true ;
36952: LD_ADDR_EXP 62
36956: PUSH
36957: LD_INT 1
36959: ST_TO_ADDR
// if p3 = 104 then
36960: LD_VAR 0 3
36964: PUSH
36965: LD_INT 104
36967: EQUAL
36968: IFFALSE 36978
// sReset := true ;
36970: LD_ADDR_EXP 63
36974: PUSH
36975: LD_INT 1
36977: ST_TO_ADDR
// if p3 = 105 then
36978: LD_VAR 0 3
36982: PUSH
36983: LD_INT 105
36985: EQUAL
36986: IFFALSE 36996
// sSun := true ;
36988: LD_ADDR_EXP 64
36992: PUSH
36993: LD_INT 1
36995: ST_TO_ADDR
// if p3 = 106 then
36996: LD_VAR 0 3
37000: PUSH
37001: LD_INT 106
37003: EQUAL
37004: IFFALSE 37014
// sTiger := true ;
37006: LD_ADDR_EXP 60
37010: PUSH
37011: LD_INT 1
37013: ST_TO_ADDR
// if p3 = 107 then
37014: LD_VAR 0 3
37018: PUSH
37019: LD_INT 107
37021: EQUAL
37022: IFFALSE 37032
// sBomb := true ;
37024: LD_ADDR_EXP 61
37028: PUSH
37029: LD_INT 1
37031: ST_TO_ADDR
// end ; end ;
37032: PPOPN 6
37034: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
37035: LD_EXP 43
37039: PUSH
37040: LD_EXP 46
37044: AND
37045: IFFALSE 37166
37047: GO 37049
37049: DISABLE
37050: LD_INT 0
37052: PPUSH
37053: PPUSH
// begin enable ;
37054: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
37055: LD_ADDR_VAR 0 2
37059: PUSH
37060: LD_INT 22
37062: PUSH
37063: LD_OWVAR 2
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 2
37074: PUSH
37075: LD_INT 34
37077: PUSH
37078: LD_INT 7
37080: PUSH
37081: EMPTY
37082: LIST
37083: LIST
37084: PUSH
37085: LD_INT 34
37087: PUSH
37088: LD_INT 45
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 34
37097: PUSH
37098: LD_INT 28
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 34
37107: PUSH
37108: LD_INT 47
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PPUSH
37126: CALL_OW 69
37130: ST_TO_ADDR
// if not tmp then
37131: LD_VAR 0 2
37135: NOT
37136: IFFALSE 37140
// exit ;
37138: GO 37166
// for i in tmp do
37140: LD_ADDR_VAR 0 1
37144: PUSH
37145: LD_VAR 0 2
37149: PUSH
37150: FOR_IN
37151: IFFALSE 37164
// begin DestroyUnit ( i ) ;
37153: LD_VAR 0 1
37157: PPUSH
37158: CALL_OW 65
// end ;
37162: GO 37150
37164: POP
37165: POP
// end ;
37166: PPOPN 2
37168: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
37169: LD_EXP 43
37173: PUSH
37174: LD_EXP 47
37178: AND
37179: IFFALSE 37260
37181: GO 37183
37183: DISABLE
37184: LD_INT 0
37186: PPUSH
37187: PPUSH
// begin enable ;
37188: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
37189: LD_ADDR_VAR 0 2
37193: PUSH
37194: LD_INT 22
37196: PUSH
37197: LD_OWVAR 2
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 32
37208: PUSH
37209: LD_INT 3
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PPUSH
37220: CALL_OW 69
37224: ST_TO_ADDR
// if not tmp then
37225: LD_VAR 0 2
37229: NOT
37230: IFFALSE 37234
// exit ;
37232: GO 37260
// for i in tmp do
37234: LD_ADDR_VAR 0 1
37238: PUSH
37239: LD_VAR 0 2
37243: PUSH
37244: FOR_IN
37245: IFFALSE 37258
// begin DestroyUnit ( i ) ;
37247: LD_VAR 0 1
37251: PPUSH
37252: CALL_OW 65
// end ;
37256: GO 37244
37258: POP
37259: POP
// end ;
37260: PPOPN 2
37262: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
37263: LD_EXP 43
37267: PUSH
37268: LD_EXP 44
37272: AND
37273: IFFALSE 37366
37275: GO 37277
37277: DISABLE
37278: LD_INT 0
37280: PPUSH
// begin enable ;
37281: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
37282: LD_ADDR_VAR 0 1
37286: PUSH
37287: LD_INT 22
37289: PUSH
37290: LD_OWVAR 2
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 2
37301: PUSH
37302: LD_INT 25
37304: PUSH
37305: LD_INT 5
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 25
37314: PUSH
37315: LD_INT 9
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 25
37324: PUSH
37325: LD_INT 8
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PPUSH
37342: CALL_OW 69
37346: PUSH
37347: FOR_IN
37348: IFFALSE 37364
// begin SetClass ( i , 1 ) ;
37350: LD_VAR 0 1
37354: PPUSH
37355: LD_INT 1
37357: PPUSH
37358: CALL_OW 336
// end ;
37362: GO 37347
37364: POP
37365: POP
// end ;
37366: PPOPN 1
37368: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
37369: LD_EXP 43
37373: PUSH
37374: LD_EXP 45
37378: AND
37379: PUSH
37380: LD_OWVAR 65
37384: PUSH
37385: LD_INT 7
37387: LESS
37388: AND
37389: IFFALSE 37403
37391: GO 37393
37393: DISABLE
// begin enable ;
37394: ENABLE
// game_speed := 7 ;
37395: LD_ADDR_OWVAR 65
37399: PUSH
37400: LD_INT 7
37402: ST_TO_ADDR
// end ;
37403: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
37404: LD_EXP 43
37408: PUSH
37409: LD_EXP 48
37413: AND
37414: IFFALSE 37616
37416: GO 37418
37418: DISABLE
37419: LD_INT 0
37421: PPUSH
37422: PPUSH
37423: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
37424: LD_ADDR_VAR 0 3
37428: PUSH
37429: LD_INT 81
37431: PUSH
37432: LD_OWVAR 2
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 21
37443: PUSH
37444: LD_INT 1
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PPUSH
37455: CALL_OW 69
37459: ST_TO_ADDR
// if not tmp then
37460: LD_VAR 0 3
37464: NOT
37465: IFFALSE 37469
// exit ;
37467: GO 37616
// if tmp > 5 then
37469: LD_VAR 0 3
37473: PUSH
37474: LD_INT 5
37476: GREATER
37477: IFFALSE 37489
// k := 5 else
37479: LD_ADDR_VAR 0 2
37483: PUSH
37484: LD_INT 5
37486: ST_TO_ADDR
37487: GO 37499
// k := tmp ;
37489: LD_ADDR_VAR 0 2
37493: PUSH
37494: LD_VAR 0 3
37498: ST_TO_ADDR
// for i := 1 to k do
37499: LD_ADDR_VAR 0 1
37503: PUSH
37504: DOUBLE
37505: LD_INT 1
37507: DEC
37508: ST_TO_ADDR
37509: LD_VAR 0 2
37513: PUSH
37514: FOR_TO
37515: IFFALSE 37614
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
37517: LD_VAR 0 3
37521: PUSH
37522: LD_VAR 0 1
37526: ARRAY
37527: PPUSH
37528: LD_VAR 0 1
37532: PUSH
37533: LD_INT 4
37535: MOD
37536: PUSH
37537: LD_INT 1
37539: PLUS
37540: PPUSH
37541: CALL_OW 259
37545: PUSH
37546: LD_INT 10
37548: LESS
37549: IFFALSE 37612
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
37551: LD_VAR 0 3
37555: PUSH
37556: LD_VAR 0 1
37560: ARRAY
37561: PPUSH
37562: LD_VAR 0 1
37566: PUSH
37567: LD_INT 4
37569: MOD
37570: PUSH
37571: LD_INT 1
37573: PLUS
37574: PPUSH
37575: LD_VAR 0 3
37579: PUSH
37580: LD_VAR 0 1
37584: ARRAY
37585: PPUSH
37586: LD_VAR 0 1
37590: PUSH
37591: LD_INT 4
37593: MOD
37594: PUSH
37595: LD_INT 1
37597: PLUS
37598: PPUSH
37599: CALL_OW 259
37603: PUSH
37604: LD_INT 1
37606: PLUS
37607: PPUSH
37608: CALL_OW 237
37612: GO 37514
37614: POP
37615: POP
// end ;
37616: PPOPN 3
37618: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
37619: LD_EXP 43
37623: PUSH
37624: LD_EXP 49
37628: AND
37629: IFFALSE 37649
37631: GO 37633
37633: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
37634: LD_INT 4
37636: PPUSH
37637: LD_OWVAR 2
37641: PPUSH
37642: LD_INT 0
37644: PPUSH
37645: CALL_OW 324
37649: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
37650: LD_EXP 43
37654: PUSH
37655: LD_EXP 50
37659: AND
37660: IFFALSE 37759
37662: GO 37664
37664: DISABLE
37665: LD_INT 0
37667: PPUSH
37668: PPUSH
// begin enable ;
37669: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
37670: LD_ADDR_VAR 0 2
37674: PUSH
37675: LD_INT 22
37677: PUSH
37678: LD_OWVAR 2
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 2
37689: PUSH
37690: LD_INT 34
37692: PUSH
37693: LD_INT 11
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 34
37702: PUSH
37703: LD_INT 30
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: LIST
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PPUSH
37719: CALL_OW 69
37723: ST_TO_ADDR
// if not tmp then
37724: LD_VAR 0 2
37728: NOT
37729: IFFALSE 37733
// exit ;
37731: GO 37759
// for i in tmp do
37733: LD_ADDR_VAR 0 1
37737: PUSH
37738: LD_VAR 0 2
37742: PUSH
37743: FOR_IN
37744: IFFALSE 37757
// begin DestroyUnit ( i ) ;
37746: LD_VAR 0 1
37750: PPUSH
37751: CALL_OW 65
// end ;
37755: GO 37743
37757: POP
37758: POP
// end ;
37759: PPOPN 2
37761: END
// every 0 0$1 trigger StreamModeActive and sBunker do
37762: LD_EXP 43
37766: PUSH
37767: LD_EXP 51
37771: AND
37772: IFFALSE 37792
37774: GO 37776
37776: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
37777: LD_INT 32
37779: PPUSH
37780: LD_OWVAR 2
37784: PPUSH
37785: LD_INT 0
37787: PPUSH
37788: CALL_OW 324
37792: END
// every 0 0$1 trigger StreamModeActive and sHack do
37793: LD_EXP 43
37797: PUSH
37798: LD_EXP 52
37802: AND
37803: IFFALSE 37823
37805: GO 37807
37807: DISABLE
// SetTech ( tech_Virus , your_side , state_disabled ) ;
37808: LD_INT 33
37810: PPUSH
37811: LD_OWVAR 2
37815: PPUSH
37816: LD_INT 0
37818: PPUSH
37819: CALL_OW 322
37823: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
37824: LD_EXP 43
37828: PUSH
37829: LD_EXP 53
37833: AND
37834: IFFALSE 37913
37836: GO 37838
37838: DISABLE
37839: LD_INT 0
37841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37842: LD_ADDR_VAR 0 1
37846: PUSH
37847: LD_INT 22
37849: PUSH
37850: LD_OWVAR 2
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 21
37861: PUSH
37862: LD_INT 3
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PPUSH
37873: CALL_OW 69
37877: ST_TO_ADDR
// if not tmp then
37878: LD_VAR 0 1
37882: NOT
37883: IFFALSE 37887
// exit ;
37885: GO 37913
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
37887: LD_VAR 0 1
37891: PUSH
37892: LD_INT 1
37894: PPUSH
37895: LD_VAR 0 1
37899: PPUSH
37900: CALL_OW 12
37904: ARRAY
37905: PPUSH
37906: LD_INT 100
37908: PPUSH
37909: CALL_OW 234
// end ;
37913: PPOPN 1
37915: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
37916: LD_EXP 43
37920: PUSH
37921: LD_EXP 55
37925: AND
37926: IFFALSE 38024
37928: GO 37930
37930: DISABLE
37931: LD_INT 0
37933: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37934: LD_ADDR_VAR 0 1
37938: PUSH
37939: LD_INT 22
37941: PUSH
37942: LD_OWVAR 2
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 21
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PPUSH
37965: CALL_OW 69
37969: ST_TO_ADDR
// if not tmp then
37970: LD_VAR 0 1
37974: NOT
37975: IFFALSE 37979
// exit ;
37977: GO 38024
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
37979: LD_VAR 0 1
37983: PUSH
37984: LD_INT 1
37986: PPUSH
37987: LD_VAR 0 1
37991: PPUSH
37992: CALL_OW 12
37996: ARRAY
37997: PPUSH
37998: LD_INT 1
38000: PPUSH
38001: LD_INT 4
38003: PPUSH
38004: CALL_OW 12
38008: PPUSH
38009: LD_INT 3000
38011: PPUSH
38012: LD_INT 9000
38014: PPUSH
38015: CALL_OW 12
38019: PPUSH
38020: CALL_OW 492
// end ;
38024: PPOPN 1
38026: END
// every 0 0$1 trigger StreamModeActive and sDepot do
38027: LD_EXP 43
38031: PUSH
38032: LD_EXP 56
38036: AND
38037: IFFALSE 38057
38039: GO 38041
38041: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
38042: LD_INT 1
38044: PPUSH
38045: LD_OWVAR 2
38049: PPUSH
38050: LD_INT 0
38052: PPUSH
38053: CALL_OW 324
38057: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
38058: LD_EXP 43
38062: PUSH
38063: LD_EXP 57
38067: AND
38068: IFFALSE 38151
38070: GO 38072
38072: DISABLE
38073: LD_INT 0
38075: PPUSH
38076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
38077: LD_ADDR_VAR 0 2
38081: PUSH
38082: LD_INT 22
38084: PUSH
38085: LD_OWVAR 2
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 21
38096: PUSH
38097: LD_INT 3
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PPUSH
38108: CALL_OW 69
38112: ST_TO_ADDR
// if not tmp then
38113: LD_VAR 0 2
38117: NOT
38118: IFFALSE 38122
// exit ;
38120: GO 38151
// for i in tmp do
38122: LD_ADDR_VAR 0 1
38126: PUSH
38127: LD_VAR 0 2
38131: PUSH
38132: FOR_IN
38133: IFFALSE 38149
// SetBLevel ( i , 10 ) ;
38135: LD_VAR 0 1
38139: PPUSH
38140: LD_INT 10
38142: PPUSH
38143: CALL_OW 241
38147: GO 38132
38149: POP
38150: POP
// end ;
38151: PPOPN 2
38153: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , tmp ;
38154: LD_EXP 43
38158: PUSH
38159: LD_EXP 58
38163: AND
38164: IFFALSE 38247
38166: GO 38168
38168: DISABLE
38169: LD_INT 0
38171: PPUSH
38172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38173: LD_ADDR_VAR 0 2
38177: PUSH
38178: LD_INT 22
38180: PUSH
38181: LD_OWVAR 2
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 25
38192: PUSH
38193: LD_INT 1
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PPUSH
38204: CALL_OW 69
38208: ST_TO_ADDR
// if not tmp then
38209: LD_VAR 0 2
38213: NOT
38214: IFFALSE 38218
// exit ;
38216: GO 38247
// for i in tmp do
38218: LD_ADDR_VAR 0 1
38222: PUSH
38223: LD_VAR 0 2
38227: PUSH
38228: FOR_IN
38229: IFFALSE 38245
// SetClass ( i , 4 ) ;
38231: LD_VAR 0 1
38235: PPUSH
38236: LD_INT 4
38238: PPUSH
38239: CALL_OW 336
38243: GO 38228
38245: POP
38246: POP
// end ;
38247: PPOPN 2
38249: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
38250: LD_EXP 43
38254: PUSH
38255: LD_EXP 59
38259: AND
38260: PUSH
38261: LD_OWVAR 67
38265: PUSH
38266: LD_INT 3
38268: LESS
38269: AND
38270: IFFALSE 38289
38272: GO 38274
38274: DISABLE
// Difficulty := Difficulty + 1 ;
38275: LD_ADDR_OWVAR 67
38279: PUSH
38280: LD_OWVAR 67
38284: PUSH
38285: LD_INT 1
38287: PLUS
38288: ST_TO_ADDR
38289: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
38290: LD_EXP 43
38294: PUSH
38295: LD_EXP 60
38299: AND
38300: IFFALSE 38403
38302: GO 38304
38304: DISABLE
38305: LD_INT 0
38307: PPUSH
// begin for i := 1 to 5 do
38308: LD_ADDR_VAR 0 1
38312: PUSH
38313: DOUBLE
38314: LD_INT 1
38316: DEC
38317: ST_TO_ADDR
38318: LD_INT 5
38320: PUSH
38321: FOR_TO
38322: IFFALSE 38401
// begin uc_nation := nation_nature ;
38324: LD_ADDR_OWVAR 21
38328: PUSH
38329: LD_INT 0
38331: ST_TO_ADDR
// uc_side := 0 ;
38332: LD_ADDR_OWVAR 20
38336: PUSH
38337: LD_INT 0
38339: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
38340: LD_ADDR_OWVAR 29
38344: PUSH
38345: LD_INT 12
38347: PUSH
38348: LD_INT 12
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: ST_TO_ADDR
// hc_agressivity := 20 ;
38355: LD_ADDR_OWVAR 35
38359: PUSH
38360: LD_INT 20
38362: ST_TO_ADDR
// hc_class := class_tiger ;
38363: LD_ADDR_OWVAR 28
38367: PUSH
38368: LD_INT 14
38370: ST_TO_ADDR
// hc_gallery :=  ;
38371: LD_ADDR_OWVAR 33
38375: PUSH
38376: LD_STRING 
38378: ST_TO_ADDR
// hc_name :=  ;
38379: LD_ADDR_OWVAR 26
38383: PUSH
38384: LD_STRING 
38386: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
38387: CALL_OW 44
38391: PPUSH
38392: LD_INT 0
38394: PPUSH
38395: CALL_OW 51
// end ;
38399: GO 38321
38401: POP
38402: POP
// end ;
38403: PPOPN 1
38405: END
// every 0 0$1 trigger StreamModeActive and sBomb do var i , x , y , result ;
38406: LD_EXP 43
38410: PUSH
38411: LD_EXP 61
38415: AND
38416: IFFALSE 38590
38418: GO 38420
38420: DISABLE
38421: LD_INT 0
38423: PPUSH
38424: PPUSH
38425: PPUSH
38426: PPUSH
// begin result := false ;
38427: LD_ADDR_VAR 0 4
38431: PUSH
38432: LD_INT 0
38434: ST_TO_ADDR
// for i := 1 to 8 do
38435: LD_ADDR_VAR 0 1
38439: PUSH
38440: DOUBLE
38441: LD_INT 1
38443: DEC
38444: ST_TO_ADDR
38445: LD_INT 8
38447: PUSH
38448: FOR_TO
38449: IFFALSE 38560
// begin x := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
38451: LD_ADDR_VAR 0 2
38455: PUSH
38456: LD_INT 10
38458: PUSH
38459: LD_INT 50
38461: PUSH
38462: LD_INT 90
38464: PUSH
38465: LD_INT 140
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 1
38476: PPUSH
38477: LD_INT 4
38479: PPUSH
38480: CALL_OW 12
38484: ARRAY
38485: ST_TO_ADDR
// y := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
38486: LD_ADDR_VAR 0 3
38490: PUSH
38491: LD_INT 10
38493: PUSH
38494: LD_INT 50
38496: PUSH
38497: LD_INT 90
38499: PUSH
38500: LD_INT 140
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 1
38511: PPUSH
38512: LD_INT 4
38514: PPUSH
38515: CALL_OW 12
38519: ARRAY
38520: ST_TO_ADDR
// if ValidHex ( x , y ) then
38521: LD_VAR 0 2
38525: PPUSH
38526: LD_VAR 0 3
38530: PPUSH
38531: CALL_OW 488
38535: IFFALSE 38558
// begin result := [ x , y ] ;
38537: LD_ADDR_VAR 0 4
38541: PUSH
38542: LD_VAR 0 2
38546: PUSH
38547: LD_VAR 0 3
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: ST_TO_ADDR
// break ;
38556: GO 38560
// end ; end ;
38558: GO 38448
38560: POP
38561: POP
// if result then
38562: LD_VAR 0 4
38566: IFFALSE 38590
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
38568: LD_VAR 0 4
38572: PUSH
38573: LD_INT 1
38575: ARRAY
38576: PPUSH
38577: LD_VAR 0 4
38581: PUSH
38582: LD_INT 2
38584: ARRAY
38585: PPUSH
38586: CALL_OW 429
// end ;
38590: PPOPN 4
38592: END
// every 0 0$1 trigger StreamModeActive and sReset do
38593: LD_EXP 43
38597: PUSH
38598: LD_EXP 63
38602: AND
38603: IFFALSE 38615
38605: GO 38607
38607: DISABLE
// YouLost (  ) ;
38608: LD_STRING 
38610: PPUSH
38611: CALL_OW 104
38615: END
// every 0 0$1 trigger StreamModeActive and sFog do
38616: LD_EXP 43
38620: PUSH
38621: LD_EXP 62
38625: AND
38626: IFFALSE 38640
38628: GO 38630
38630: DISABLE
// FogOff ( your_side ) ;
38631: LD_OWVAR 2
38635: PPUSH
38636: CALL_OW 344
38640: END
// every 0 0$1 trigger StreamModeActive and sSun do
38641: LD_EXP 43
38645: PUSH
38646: LD_EXP 64
38650: AND
38651: IFFALSE 38679
38653: GO 38655
38655: DISABLE
// begin solar_recharge_percent := 0 ;
38656: LD_ADDR_OWVAR 79
38660: PUSH
38661: LD_INT 0
38663: ST_TO_ADDR
// wait ( 5 5$00 ) ;
38664: LD_INT 10500
38666: PPUSH
38667: CALL_OW 67
// solar_recharge_percent := 100 ;
38671: LD_ADDR_OWVAR 79
38675: PUSH
38676: LD_INT 100
38678: ST_TO_ADDR
// end ; end_of_file
38679: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
38680: LD_INT 0
38682: PPUSH
38683: PPUSH
38684: PPUSH
38685: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
38686: LD_VAR 0 1
38690: PPUSH
38691: CALL_OW 264
38695: PUSH
38696: LD_EXP 42
38700: EQUAL
38701: IFFALSE 38773
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
38703: LD_INT 68
38705: PPUSH
38706: LD_VAR 0 1
38710: PPUSH
38711: CALL_OW 255
38715: PPUSH
38716: CALL_OW 321
38720: PUSH
38721: LD_INT 2
38723: EQUAL
38724: IFFALSE 38736
// eff := 70 else
38726: LD_ADDR_VAR 0 6
38730: PUSH
38731: LD_INT 70
38733: ST_TO_ADDR
38734: GO 38744
// eff := 30 ;
38736: LD_ADDR_VAR 0 6
38740: PUSH
38741: LD_INT 30
38743: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
38744: LD_VAR 0 1
38748: PPUSH
38749: CALL_OW 250
38753: PPUSH
38754: LD_VAR 0 1
38758: PPUSH
38759: CALL_OW 251
38763: PPUSH
38764: LD_VAR 0 6
38768: PPUSH
38769: CALL_OW 495
// end ; end ;
38773: LD_VAR 0 4
38777: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
38778: LD_INT 0
38780: PPUSH
38781: PPUSH
38782: PPUSH
38783: PPUSH
38784: PPUSH
38785: PPUSH
// if cmd = 124 then
38786: LD_VAR 0 1
38790: PUSH
38791: LD_INT 124
38793: EQUAL
38794: IFFALSE 39000
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
38796: LD_ADDR_VAR 0 5
38800: PUSH
38801: LD_INT 2
38803: PUSH
38804: LD_INT 34
38806: PUSH
38807: LD_INT 53
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 34
38816: PUSH
38817: LD_INT 14
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: LIST
38828: PPUSH
38829: CALL_OW 69
38833: ST_TO_ADDR
// if not tmp then
38834: LD_VAR 0 5
38838: NOT
38839: IFFALSE 38843
// exit ;
38841: GO 39000
// for i in tmp do
38843: LD_ADDR_VAR 0 3
38847: PUSH
38848: LD_VAR 0 5
38852: PUSH
38853: FOR_IN
38854: IFFALSE 38998
// begin taskList := GetTaskList ( i ) ;
38856: LD_ADDR_VAR 0 6
38860: PUSH
38861: LD_VAR 0 3
38865: PPUSH
38866: CALL_OW 437
38870: ST_TO_ADDR
// if not taskList then
38871: LD_VAR 0 6
38875: NOT
38876: IFFALSE 38880
// continue ;
38878: GO 38853
// for j = 1 to taskList do
38880: LD_ADDR_VAR 0 4
38884: PUSH
38885: DOUBLE
38886: LD_INT 1
38888: DEC
38889: ST_TO_ADDR
38890: LD_VAR 0 6
38894: PUSH
38895: FOR_TO
38896: IFFALSE 38994
// if taskList [ j ] [ 1 ] = | then
38898: LD_VAR 0 6
38902: PUSH
38903: LD_VAR 0 4
38907: ARRAY
38908: PUSH
38909: LD_INT 1
38911: ARRAY
38912: PUSH
38913: LD_STRING |
38915: EQUAL
38916: IFFALSE 38992
// begin _taskList := Delete ( taskList , 1 ) ;
38918: LD_ADDR_VAR 0 7
38922: PUSH
38923: LD_VAR 0 6
38927: PPUSH
38928: LD_INT 1
38930: PPUSH
38931: CALL_OW 3
38935: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
38936: LD_VAR 0 3
38940: PPUSH
38941: LD_VAR 0 7
38945: PPUSH
38946: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
38950: LD_VAR 0 3
38954: PPUSH
38955: LD_VAR 0 6
38959: PUSH
38960: LD_VAR 0 4
38964: ARRAY
38965: PUSH
38966: LD_INT 2
38968: ARRAY
38969: PPUSH
38970: LD_VAR 0 6
38974: PUSH
38975: LD_VAR 0 4
38979: ARRAY
38980: PUSH
38981: LD_INT 3
38983: ARRAY
38984: PPUSH
38985: LD_INT 8
38987: PPUSH
38988: CALL 39005 0 4
// end ;
38992: GO 38895
38994: POP
38995: POP
// end ;
38996: GO 38853
38998: POP
38999: POP
// end ; end ;
39000: LD_VAR 0 2
39004: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
39005: LD_INT 0
39007: PPUSH
39008: PPUSH
39009: PPUSH
39010: PPUSH
39011: PPUSH
39012: PPUSH
39013: PPUSH
39014: PPUSH
39015: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
39016: LD_VAR 0 1
39020: NOT
39021: PUSH
39022: LD_VAR 0 2
39026: PPUSH
39027: LD_VAR 0 3
39031: PPUSH
39032: CALL_OW 488
39036: NOT
39037: OR
39038: PUSH
39039: LD_VAR 0 4
39043: NOT
39044: OR
39045: IFFALSE 39049
// exit ;
39047: GO 39389
// list := [ ] ;
39049: LD_ADDR_VAR 0 13
39053: PUSH
39054: EMPTY
39055: ST_TO_ADDR
// if x - r < 0 then
39056: LD_VAR 0 2
39060: PUSH
39061: LD_VAR 0 4
39065: MINUS
39066: PUSH
39067: LD_INT 0
39069: LESS
39070: IFFALSE 39082
// min_x := 0 else
39072: LD_ADDR_VAR 0 7
39076: PUSH
39077: LD_INT 0
39079: ST_TO_ADDR
39080: GO 39098
// min_x := x - r ;
39082: LD_ADDR_VAR 0 7
39086: PUSH
39087: LD_VAR 0 2
39091: PUSH
39092: LD_VAR 0 4
39096: MINUS
39097: ST_TO_ADDR
// if y - r < 0 then
39098: LD_VAR 0 3
39102: PUSH
39103: LD_VAR 0 4
39107: MINUS
39108: PUSH
39109: LD_INT 0
39111: LESS
39112: IFFALSE 39124
// min_y := 0 else
39114: LD_ADDR_VAR 0 8
39118: PUSH
39119: LD_INT 0
39121: ST_TO_ADDR
39122: GO 39140
// min_y := y - r ;
39124: LD_ADDR_VAR 0 8
39128: PUSH
39129: LD_VAR 0 3
39133: PUSH
39134: LD_VAR 0 4
39138: MINUS
39139: ST_TO_ADDR
// max_x := x + r ;
39140: LD_ADDR_VAR 0 9
39144: PUSH
39145: LD_VAR 0 2
39149: PUSH
39150: LD_VAR 0 4
39154: PLUS
39155: ST_TO_ADDR
// max_y := y + r ;
39156: LD_ADDR_VAR 0 10
39160: PUSH
39161: LD_VAR 0 3
39165: PUSH
39166: LD_VAR 0 4
39170: PLUS
39171: ST_TO_ADDR
// for _x = min_x to max_x do
39172: LD_ADDR_VAR 0 11
39176: PUSH
39177: DOUBLE
39178: LD_VAR 0 7
39182: DEC
39183: ST_TO_ADDR
39184: LD_VAR 0 9
39188: PUSH
39189: FOR_TO
39190: IFFALSE 39307
// for _y = min_y to max_y do
39192: LD_ADDR_VAR 0 12
39196: PUSH
39197: DOUBLE
39198: LD_VAR 0 8
39202: DEC
39203: ST_TO_ADDR
39204: LD_VAR 0 10
39208: PUSH
39209: FOR_TO
39210: IFFALSE 39303
// begin if not ValidHex ( _x , _y ) then
39212: LD_VAR 0 11
39216: PPUSH
39217: LD_VAR 0 12
39221: PPUSH
39222: CALL_OW 488
39226: NOT
39227: IFFALSE 39231
// continue ;
39229: GO 39209
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
39231: LD_VAR 0 11
39235: PPUSH
39236: LD_VAR 0 12
39240: PPUSH
39241: CALL_OW 351
39245: PUSH
39246: LD_VAR 0 11
39250: PPUSH
39251: LD_VAR 0 12
39255: PPUSH
39256: CALL_OW 554
39260: AND
39261: IFFALSE 39301
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
39263: LD_ADDR_VAR 0 13
39267: PUSH
39268: LD_VAR 0 13
39272: PPUSH
39273: LD_VAR 0 13
39277: PUSH
39278: LD_INT 1
39280: PLUS
39281: PPUSH
39282: LD_VAR 0 11
39286: PUSH
39287: LD_VAR 0 12
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PPUSH
39296: CALL_OW 2
39300: ST_TO_ADDR
// end ;
39301: GO 39209
39303: POP
39304: POP
39305: GO 39189
39307: POP
39308: POP
// if not list then
39309: LD_VAR 0 13
39313: NOT
39314: IFFALSE 39318
// exit ;
39316: GO 39389
// for i in list do
39318: LD_ADDR_VAR 0 6
39322: PUSH
39323: LD_VAR 0 13
39327: PUSH
39328: FOR_IN
39329: IFFALSE 39387
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
39331: LD_VAR 0 1
39335: PPUSH
39336: LD_STRING M
39338: PUSH
39339: LD_VAR 0 6
39343: PUSH
39344: LD_INT 1
39346: ARRAY
39347: PUSH
39348: LD_VAR 0 6
39352: PUSH
39353: LD_INT 2
39355: ARRAY
39356: PUSH
39357: LD_INT 0
39359: PUSH
39360: LD_INT 0
39362: PUSH
39363: LD_INT 0
39365: PUSH
39366: LD_INT 0
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: PUSH
39378: EMPTY
39379: LIST
39380: PPUSH
39381: CALL_OW 447
39385: GO 39328
39387: POP
39388: POP
// end ;
39389: LD_VAR 0 5
39393: RET
