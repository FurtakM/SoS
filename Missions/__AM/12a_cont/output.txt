// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9344 0 0
// PrepareAlliance ;
  19: CALL 344 0 0
// PrepareFriends ;
  23: CALL 3654 0 0
// PrepareAmerican ;
  27: CALL 781 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 16
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 14
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9680 0 0
// PreparePatrol ;
 117: CALL 1246 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 2 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 2
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// end ;
 243: LD_VAR 0 1
 247: RET
// every 0 0$1 trigger on_hill do
 248: LD_EXP 7
 252: IFFALSE 264
 254: GO 256
 256: DISABLE
// SetAchievement ( ACH_EYE ) ;
 257: LD_STRING ACH_EYE
 259: PPUSH
 260: CALL_OW 543
 264: END
// every 0 0$1 trigger not invis_used do var i ;
 265: LD_EXP 12
 269: NOT
 270: IFFALSE 341
 272: GO 274
 274: DISABLE
 275: LD_INT 0
 277: PPUSH
// begin enable ;
 278: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 279: LD_ADDR_VAR 0 1
 283: PUSH
 284: LD_INT 22
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 21
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PPUSH
 308: CALL_OW 69
 312: PUSH
 313: FOR_IN
 314: IFFALSE 339
// if IsInvisible ( i ) then
 316: LD_VAR 0 1
 320: PPUSH
 321: CALL_OW 571
 325: IFFALSE 337
// begin invis_used := true ;
 327: LD_ADDR_EXP 12
 331: PUSH
 332: LD_INT 1
 334: ST_TO_ADDR
// break ;
 335: GO 339
// end ;
 337: GO 313
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 344: LD_INT 0
 346: PPUSH
 347: PPUSH
// uc_side := 7 ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_INT 7
 355: ST_TO_ADDR
// uc_nation := 1 ;
 356: LD_ADDR_OWVAR 21
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 364: LD_ADDR_EXP 14
 368: PUSH
 369: LD_STRING JMM
 371: PPUSH
 372: LD_EXP 1
 376: NOT
 377: PPUSH
 378: LD_STRING 11_
 380: PPUSH
 381: CALL 35393 0 3
 385: ST_TO_ADDR
// uc_side := 4 ;
 386: LD_ADDR_OWVAR 20
 390: PUSH
 391: LD_INT 4
 393: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 394: LD_ADDR_EXP 15
 398: PUSH
 399: LD_STRING Roth
 401: PPUSH
 402: CALL_OW 25
 406: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 407: LD_EXP 14
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 419: LD_EXP 14
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 431: LD_EXP 14
 435: PPUSH
 436: LD_INT 105
 438: PPUSH
 439: LD_INT 10
 441: PPUSH
 442: LD_INT 0
 444: PPUSH
 445: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 449: LD_EXP 15
 453: PPUSH
 454: LD_INT 4
 456: PPUSH
 457: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 461: LD_EXP 15
 465: PPUSH
 466: LD_INT 109
 468: PPUSH
 469: LD_INT 10
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 479: LD_EXP 14
 483: PPUSH
 484: LD_EXP 15
 488: PPUSH
 489: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 493: LD_EXP 15
 497: PPUSH
 498: LD_EXP 14
 502: PPUSH
 503: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 507: LD_INT 3
 509: PPUSH
 510: LD_INT 3
 512: PPUSH
 513: LD_INT 3
 515: PPUSH
 516: LD_INT 12
 518: PPUSH
 519: LD_INT 100
 521: PPUSH
 522: CALL 40408 0 5
// cargo := CreateVehicle ;
 526: LD_ADDR_VAR 0 2
 530: PUSH
 531: CALL_OW 45
 535: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 536: LD_VAR 0 2
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 548: LD_VAR 0 2
 552: PPUSH
 553: LD_INT 179
 555: PPUSH
 556: LD_INT 45
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 566: LD_VAR 0 2
 570: PPUSH
 571: LD_INT 4
 573: PPUSH
 574: LD_INT 30
 576: PPUSH
 577: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 581: LD_STRING 11_artifact_captured
 583: PPUSH
 584: LD_INT 0
 586: PPUSH
 587: CALL_OW 30
 591: IFFALSE 648
// begin cargo := CreateVehicle ;
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 603: LD_VAR 0 2
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 615: LD_VAR 0 2
 619: PPUSH
 620: LD_INT 171
 622: PPUSH
 623: LD_INT 85
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 633: LD_VAR 0 2
 637: PPUSH
 638: LD_INT 4
 640: PPUSH
 641: LD_INT 50
 643: PPUSH
 644: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 648: LD_INT 47
 650: PPUSH
 651: LD_INT 7
 653: PPUSH
 654: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 658: LD_INT 1
 660: PPUSH
 661: LD_INT 47
 663: PPUSH
 664: CALL_OW 471
// end ;
 668: LD_VAR 0 1
 672: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 673: LD_INT 38
 675: PPUSH
 676: LD_INT 22
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PPUSH
 686: CALL_OW 70
 690: PUSH
 691: LD_EXP 7
 695: NOT
 696: AND
 697: IFFALSE 728
 699: GO 701
 701: DISABLE
// begin enable ;
 702: ENABLE
// on_hill := true ;
 703: LD_ADDR_EXP 7
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 711: LD_INT 126
 713: PPUSH
 714: LD_INT 13
 716: PPUSH
 717: LD_INT 7
 719: PPUSH
 720: LD_INT 90
 722: NEG
 723: PPUSH
 724: CALL_OW 330
// end ;
 728: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 729: LD_INT 38
 731: PPUSH
 732: LD_INT 22
 734: PUSH
 735: LD_INT 7
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 70
 746: NOT
 747: PUSH
 748: LD_EXP 7
 752: AND
 753: IFFALSE 780
 755: GO 757
 757: DISABLE
// begin enable ;
 758: ENABLE
// on_hill := false ;
 759: LD_ADDR_EXP 7
 763: PUSH
 764: LD_INT 0
 766: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 767: LD_INT 126
 769: PPUSH
 770: LD_INT 13
 772: PPUSH
 773: LD_INT 7
 775: PPUSH
 776: CALL_OW 331
// end ; end_of_file
 780: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
 786: PPUSH
 787: PPUSH
 788: PPUSH
// if Difficulty = 1 then
 789: LD_OWVAR 67
 793: PUSH
 794: LD_INT 1
 796: EQUAL
 797: IFFALSE 905
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 799: LD_ADDR_VAR 0 6
 803: PUSH
 804: LD_INT 155
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 193
 816: PUSH
 817: LD_INT 93
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 188
 826: PUSH
 827: LD_INT 81
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 56
 836: PUSH
 837: LD_INT 85
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 98
 846: PUSH
 847: LD_INT 87
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: ST_TO_ADDR
// for i in tmp do
 861: LD_ADDR_VAR 0 2
 865: PUSH
 866: LD_VAR 0 6
 870: PUSH
 871: FOR_IN
 872: IFFALSE 903
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: LD_VAR 0 2
 887: PUSH
 888: LD_INT 2
 890: ARRAY
 891: PPUSH
 892: CALL_OW 428
 896: PPUSH
 897: CALL_OW 64
 901: GO 871
 903: POP
 904: POP
// end ; defcon := 0 ;
 905: LD_ADDR_EXP 21
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// defcon_wave := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defenders := [ ] ;
 921: LD_ADDR_EXP 20
 925: PUSH
 926: EMPTY
 927: ST_TO_ADDR
// SetBName ( alfa , alpha ) ;
 928: LD_INT 5
 930: PPUSH
 931: LD_STRING alpha
 933: PPUSH
 934: CALL_OW 500
// uc_side := 1 ;
 938: LD_ADDR_OWVAR 20
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// uc_nation := 1 ;
 946: LD_ADDR_OWVAR 21
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 954: LD_ADDR_EXP 16
 958: PUSH
 959: LD_STRING Powell
 961: PPUSH
 962: CALL_OW 25
 966: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 967: LD_EXP 16
 971: PPUSH
 972: LD_INT 110
 974: PPUSH
 975: LD_INT 26
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 48
// ComHold ( Powell ) ;
 985: LD_EXP 16
 989: PPUSH
 990: CALL_OW 140
// for i = 1 to 5 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 5
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1064
// begin PrepareHuman ( false , 1 , 10 ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_INT 1
1015: PPUSH
1016: LD_INT 10
1018: PPUSH
1019: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1023: LD_ADDR_EXP 19
1027: PUSH
1028: LD_EXP 19
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: CALL_OW 44
1040: PPUSH
1041: CALL_OW 2
1045: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1046: LD_EXP 19
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_INT 18
1057: PPUSH
1058: CALL_OW 52
// end ;
1062: GO 1007
1064: POP
1065: POP
// if Difficulty > 2 then
1066: LD_OWVAR 67
1070: PUSH
1071: LD_INT 2
1073: GREATER
1074: IFFALSE 1123
// begin bc_type := b_turret ;
1076: LD_ADDR_OWVAR 42
1080: PUSH
1081: LD_INT 33
1083: ST_TO_ADDR
// bc_level := 7 ;
1084: LD_ADDR_OWVAR 43
1088: PUSH
1089: LD_INT 7
1091: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_INT 107
1099: PPUSH
1100: LD_INT 55
1102: PPUSH
1103: LD_INT 5
1105: PPUSH
1106: CALL_OW 47
1110: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1111: LD_VAR 0 4
1115: PPUSH
1116: LD_INT 7
1118: PPUSH
1119: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1123: LD_ADDR_VAR 0 2
1127: PUSH
1128: LD_INT 22
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: LD_INT 30
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 69
1156: PUSH
1157: LD_INT 22
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 30
1169: PUSH
1170: LD_INT 36
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PPUSH
1181: CALL_OW 69
1185: ADD
1186: PUSH
1187: FOR_IN
1188: IFFALSE 1239
// for j = 1 to 3 do
1190: LD_ADDR_VAR 0 3
1194: PUSH
1195: DOUBLE
1196: LD_INT 1
1198: DEC
1199: ST_TO_ADDR
1200: LD_INT 3
1202: PUSH
1203: FOR_TO
1204: IFFALSE 1235
// begin PrepareHuman ( false , 3 , 6 ) ;
1206: LD_INT 0
1208: PPUSH
1209: LD_INT 3
1211: PPUSH
1212: LD_INT 6
1214: PPUSH
1215: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1219: CALL_OW 44
1223: PPUSH
1224: LD_VAR 0 2
1228: PPUSH
1229: CALL_OW 52
// end ;
1233: GO 1203
1235: POP
1236: POP
1237: GO 1187
1239: POP
1240: POP
// end ;
1241: LD_VAR 0 1
1245: RET
// export function PreparePatrol ; var i , un ; begin
1246: LD_INT 0
1248: PPUSH
1249: PPUSH
1250: PPUSH
// uc_side := 1 ;
1251: LD_ADDR_OWVAR 20
1255: PUSH
1256: LD_INT 1
1258: ST_TO_ADDR
// uc_nation := 1 ;
1259: LD_ADDR_OWVAR 21
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1267: LD_ADDR_EXP 18
1271: PUSH
1272: LD_INT 99
1274: PUSH
1275: LD_INT 55
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: LD_INT 113
1284: PUSH
1285: LD_INT 67
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PUSH
1292: LD_INT 129
1294: PUSH
1295: LD_INT 68
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 135
1304: PUSH
1305: LD_INT 62
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: PUSH
1312: LD_INT 103
1314: PUSH
1315: LD_INT 41
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: PUSH
1329: LD_INT 27
1331: PUSH
1332: LD_INT 49
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 46
1341: PUSH
1342: LD_INT 49
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 87
1351: PUSH
1352: LD_INT 70
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 99
1361: PUSH
1362: LD_INT 79
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 118
1371: PUSH
1372: LD_INT 111
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 99
1381: PUSH
1382: LD_INT 79
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 87
1391: PUSH
1392: LD_INT 70
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 46
1401: PUSH
1402: LD_INT 49
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: LD_INT 200
1421: PUSH
1422: LD_INT 88
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PUSH
1429: LD_INT 175
1431: PUSH
1432: LD_INT 80
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 135
1441: PUSH
1442: LD_INT 62
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 117
1451: PUSH
1452: LD_INT 53
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 103
1461: PUSH
1462: LD_INT 41
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: LD_INT 99
1471: PUSH
1472: LD_INT 24
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 85
1481: PUSH
1482: LD_INT 3
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: LD_INT 99
1491: PUSH
1492: LD_INT 24
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 103
1501: PUSH
1502: LD_INT 41
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: PUSH
1509: LD_INT 98
1511: PUSH
1512: LD_INT 47
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PUSH
1519: LD_INT 99
1521: PUSH
1522: LD_INT 56
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 96
1531: PUSH
1532: LD_INT 66
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 99
1541: PUSH
1542: LD_INT 56
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 112
1551: PUSH
1552: LD_INT 66
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 129
1561: PUSH
1562: LD_INT 68
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 135
1571: PUSH
1572: LD_INT 62
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 156
1581: PUSH
1582: LD_INT 71
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 168
1591: PUSH
1592: LD_INT 76
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 168
1601: PUSH
1602: LD_INT 61
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 168
1611: PUSH
1612: LD_INT 75
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 185
1621: PUSH
1622: LD_INT 85
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: ST_TO_ADDR
// mobile_patrol := [ ] ;
1657: LD_ADDR_EXP 17
1661: PUSH
1662: EMPTY
1663: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1664: LD_INT 3
1666: PPUSH
1667: LD_INT 1
1669: PPUSH
1670: LD_INT 3
1672: PPUSH
1673: LD_INT 4
1675: PPUSH
1676: LD_INT 100
1678: PPUSH
1679: CALL 40408 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1683: LD_ADDR_EXP 17
1687: PUSH
1688: LD_EXP 17
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: CALL_OW 45
1700: PPUSH
1701: CALL_OW 2
1705: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1706: LD_EXP 17
1710: PUSH
1711: LD_INT 1
1713: ARRAY
1714: PPUSH
1715: LD_INT 99
1717: PPUSH
1718: LD_INT 55
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1728: LD_INT 2
1730: PPUSH
1731: LD_INT 1
1733: PPUSH
1734: LD_INT 3
1736: PPUSH
1737: LD_INT 4
1739: PPUSH
1740: LD_INT 100
1742: PPUSH
1743: CALL 40408 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1747: LD_ADDR_EXP 17
1751: PUSH
1752: LD_EXP 17
1756: PPUSH
1757: LD_INT 2
1759: PPUSH
1760: CALL_OW 45
1764: PPUSH
1765: CALL_OW 2
1769: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1770: LD_EXP 17
1774: PUSH
1775: LD_INT 2
1777: ARRAY
1778: PPUSH
1779: LD_INT 27
1781: PPUSH
1782: LD_INT 49
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 1
1797: PPUSH
1798: LD_INT 3
1800: PPUSH
1801: LD_INT 9
1803: PUSH
1804: LD_INT 7
1806: PUSH
1807: LD_INT 7
1809: PUSH
1810: LD_INT 7
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_OWVAR 67
1823: ARRAY
1824: PPUSH
1825: LD_INT 100
1827: PPUSH
1828: CALL 40408 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1832: LD_ADDR_EXP 17
1836: PUSH
1837: LD_EXP 17
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: CALL_OW 45
1849: PPUSH
1850: CALL_OW 2
1854: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
1855: LD_EXP 17
1859: PUSH
1860: LD_INT 3
1862: ARRAY
1863: PPUSH
1864: LD_INT 200
1866: PPUSH
1867: LD_INT 88
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 48
// for i = mobile_patrol downto 1 do
1877: LD_ADDR_VAR 0 2
1881: PUSH
1882: DOUBLE
1883: LD_EXP 17
1887: INC
1888: ST_TO_ADDR
1889: LD_INT 1
1891: PUSH
1892: FOR_DOWNTO
1893: IFFALSE 1904
// RaiseSailEvent ( 1 ) ;
1895: LD_INT 1
1897: PPUSH
1898: CALL_OW 427
1902: GO 1892
1904: POP
1905: POP
// end ;
1906: LD_VAR 0 1
1910: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
1911: LD_INT 0
1913: PPUSH
1914: PPUSH
1915: PPUSH
1916: PPUSH
1917: PPUSH
1918: PPUSH
1919: PPUSH
1920: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
1921: LD_ADDR_VAR 0 5
1925: PUSH
1926: LD_INT 20
1928: PUSH
1929: LD_INT 4
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 21
1938: PUSH
1939: LD_INT 5
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 22
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
1961: LD_ADDR_VAR 0 6
1965: PUSH
1966: LD_INT 176
1968: PUSH
1969: LD_INT 81
1971: PUSH
1972: LD_INT 135
1974: PUSH
1975: LD_INT 62
1977: PUSH
1978: LD_INT 114
1980: PUSH
1981: LD_INT 67
1983: PUSH
1984: LD_INT 93
1986: PUSH
1987: LD_INT 71
1989: PUSH
1990: LD_INT 76
1992: PUSH
1993: LD_INT 67
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 107
2010: PUSH
2011: LD_INT 92
2013: PUSH
2014: LD_INT 92
2016: PUSH
2017: LD_INT 72
2019: PUSH
2020: LD_INT 77
2022: PUSH
2023: LD_INT 68
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 45
2036: PUSH
2037: LD_INT 49
2039: PUSH
2040: LD_INT 67
2042: PUSH
2043: LD_INT 59
2045: PUSH
2046: LD_INT 77
2048: PUSH
2049: LD_INT 68
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2065: LD_ADDR_VAR 0 4
2069: PUSH
2070: LD_INT 1
2072: PPUSH
2073: LD_VAR 0 5
2077: PPUSH
2078: CALL_OW 12
2082: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2083: LD_ADDR_VAR 0 3
2087: PUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_INT 2
2093: PPUSH
2094: CALL_OW 12
2098: ST_TO_ADDR
// uc_side := 1 ;
2099: LD_ADDR_OWVAR 20
2103: PUSH
2104: LD_INT 1
2106: ST_TO_ADDR
// uc_nation := 1 ;
2107: LD_ADDR_OWVAR 21
2111: PUSH
2112: LD_INT 1
2114: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2115: LD_INT 2
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: LD_INT 3
2123: PPUSH
2124: LD_INT 12
2126: PPUSH
2127: LD_INT 100
2129: PPUSH
2130: CALL 40408 0 5
// veh := CreateVehicle ;
2134: LD_ADDR_VAR 0 8
2138: PUSH
2139: CALL_OW 45
2143: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2144: LD_VAR 0 8
2148: PPUSH
2149: LD_VAR 0 5
2153: PUSH
2154: LD_VAR 0 4
2158: ARRAY
2159: PUSH
2160: LD_INT 2
2162: ARRAY
2163: PPUSH
2164: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2168: LD_VAR 0 8
2172: PPUSH
2173: LD_VAR 0 5
2177: PUSH
2178: LD_VAR 0 4
2182: ARRAY
2183: PUSH
2184: LD_INT 1
2186: ARRAY
2187: PPUSH
2188: LD_INT 0
2190: PPUSH
2191: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2195: LD_VAR 0 8
2199: PPUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 3
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PUSH
2210: LD_VAR 0 3
2214: ARRAY
2215: PPUSH
2216: LD_INT 100
2218: PPUSH
2219: CALL_OW 290
// tmp := road [ k ] ;
2223: LD_ADDR_VAR 0 7
2227: PUSH
2228: LD_VAR 0 6
2232: PUSH
2233: LD_VAR 0 4
2237: ARRAY
2238: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2239: LD_ADDR_VAR 0 2
2243: PUSH
2244: DOUBLE
2245: LD_INT 1
2247: DEC
2248: ST_TO_ADDR
2249: LD_VAR 0 7
2253: PUSH
2254: LD_INT 2
2256: DIV
2257: PUSH
2258: FOR_TO
2259: IFFALSE 2306
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2261: LD_VAR 0 8
2265: PPUSH
2266: LD_VAR 0 7
2270: PUSH
2271: LD_VAR 0 2
2275: PUSH
2276: LD_INT 2
2278: MUL
2279: PUSH
2280: LD_INT 1
2282: MINUS
2283: ARRAY
2284: PPUSH
2285: LD_VAR 0 7
2289: PUSH
2290: LD_VAR 0 2
2294: PUSH
2295: LD_INT 2
2297: MUL
2298: ARRAY
2299: PPUSH
2300: CALL_OW 171
2304: GO 2258
2306: POP
2307: POP
// AddComGive ( veh , alfa ) ;
2308: LD_VAR 0 8
2312: PPUSH
2313: LD_INT 5
2315: PPUSH
2316: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2320: LD_VAR 0 8
2324: PPUSH
2325: LD_INT 70
2327: PPUSH
2328: CALL_OW 202
// for i = tmp div 2 downto 1 do
2332: LD_ADDR_VAR 0 2
2336: PUSH
2337: DOUBLE
2338: LD_VAR 0 7
2342: PUSH
2343: LD_INT 2
2345: DIV
2346: INC
2347: ST_TO_ADDR
2348: LD_INT 1
2350: PUSH
2351: FOR_DOWNTO
2352: IFFALSE 2399
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2354: LD_VAR 0 8
2358: PPUSH
2359: LD_VAR 0 7
2363: PUSH
2364: LD_VAR 0 2
2368: PUSH
2369: LD_INT 2
2371: MUL
2372: PUSH
2373: LD_INT 1
2375: MINUS
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 7
2382: PUSH
2383: LD_VAR 0 2
2387: PUSH
2388: LD_INT 2
2390: MUL
2391: ARRAY
2392: PPUSH
2393: CALL_OW 171
2397: GO 2351
2399: POP
2400: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2401: LD_VAR 0 8
2405: PPUSH
2406: LD_VAR 0 5
2410: PUSH
2411: LD_VAR 0 4
2415: ARRAY
2416: PUSH
2417: LD_INT 1
2419: ARRAY
2420: PPUSH
2421: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2425: LD_INT 35
2427: PPUSH
2428: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2432: LD_VAR 0 8
2436: PPUSH
2437: LD_VAR 0 5
2441: PUSH
2442: LD_VAR 0 4
2446: ARRAY
2447: PUSH
2448: LD_INT 1
2450: ARRAY
2451: PPUSH
2452: CALL_OW 308
2456: PUSH
2457: LD_VAR 0 8
2461: PPUSH
2462: LD_VAR 0 3
2466: PPUSH
2467: CALL_OW 289
2471: PUSH
2472: LD_INT 0
2474: EQUAL
2475: AND
2476: IFFALSE 2425
// RemoveUnit ( veh ) ;
2478: LD_VAR 0 8
2482: PPUSH
2483: CALL_OW 64
// end ;
2487: LD_VAR 0 1
2491: RET
// every 3 3$00 do
2492: GO 2494
2494: DISABLE
// begin enable ;
2495: ENABLE
// SpawnCargo ;
2496: CALL 1911 0 0
// end ;
2500: END
// export function PrepareDefenders ; var i , tmp ; begin
2501: LD_INT 0
2503: PPUSH
2504: PPUSH
2505: PPUSH
// if defenders then
2506: LD_EXP 20
2510: IFFALSE 2514
// exit ;
2512: GO 2786
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2514: LD_ADDR_VAR 0 2
2518: PUSH
2519: DOUBLE
2520: LD_INT 1
2522: DEC
2523: ST_TO_ADDR
2524: LD_INT 4
2526: PUSH
2527: LD_INT 5
2529: PUSH
2530: LD_INT 6
2532: PUSH
2533: LD_INT 7
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: PUSH
2542: LD_OWVAR 67
2546: ARRAY
2547: PUSH
2548: FOR_TO
2549: IFFALSE 2688
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2551: LD_ADDR_VAR 0 3
2555: PUSH
2556: LD_INT 6
2558: PPUSH
2559: LD_INT 2
2561: PUSH
2562: LD_INT 3
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_INT 2
2574: PPUSH
2575: CALL_OW 12
2579: ARRAY
2580: PPUSH
2581: LD_INT 1
2583: PUSH
2584: LD_INT 3
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 1
2593: PPUSH
2594: LD_INT 2
2596: PPUSH
2597: CALL_OW 12
2601: ARRAY
2602: PPUSH
2603: LD_INT 2
2605: PPUSH
2606: LD_INT 4
2608: PUSH
2609: LD_INT 5
2611: PUSH
2612: LD_INT 9
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 1
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: CALL_OW 12
2630: ARRAY
2631: PPUSH
2632: CALL 38028 0 5
2636: ST_TO_ADDR
// if tmp then
2637: LD_VAR 0 3
2641: IFFALSE 2686
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2643: LD_INT 6
2645: PPUSH
2646: LD_VAR 0 3
2650: PUSH
2651: LD_INT 1
2653: ARRAY
2654: PPUSH
2655: LD_VAR 0 3
2659: PUSH
2660: LD_INT 2
2662: ARRAY
2663: PPUSH
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 3
2671: ARRAY
2672: PPUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 4
2680: ARRAY
2681: PPUSH
2682: CALL_OW 185
// end ;
2686: GO 2548
2688: POP
2689: POP
// repeat wait ( 0 0$1 ) ;
2690: LD_INT 35
2692: PPUSH
2693: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2697: LD_INT 22
2699: PUSH
2700: LD_INT 1
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 33
2709: PUSH
2710: LD_INT 2
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PPUSH
2721: CALL_OW 69
2725: PUSH
2726: LD_INT 4
2728: PUSH
2729: LD_INT 5
2731: PUSH
2732: LD_INT 6
2734: PUSH
2735: LD_INT 7
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: PUSH
2744: LD_OWVAR 67
2748: ARRAY
2749: GREATEREQUAL
2750: IFFALSE 2690
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2752: LD_ADDR_EXP 20
2756: PUSH
2757: LD_INT 22
2759: PUSH
2760: LD_INT 1
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 33
2769: PUSH
2770: LD_INT 2
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 69
2785: ST_TO_ADDR
// end ;
2786: LD_VAR 0 1
2790: RET
// export function Defend ; var i , un , veh , tmp ; begin
2791: LD_INT 0
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
// defcon_wave := defcon_wave + 1 ;
2798: LD_ADDR_EXP 22
2802: PUSH
2803: LD_EXP 22
2807: PUSH
2808: LD_INT 1
2810: PLUS
2811: ST_TO_ADDR
// if not defenders then
2812: LD_EXP 20
2816: NOT
2817: IFFALSE 2823
// PrepareDefenders ;
2819: CALL 2501 0 0
// if defcon_wave > 1 then
2823: LD_EXP 22
2827: PUSH
2828: LD_INT 1
2830: GREATER
2831: IFFALSE 3089
// begin for i = 1 to defcon_wave + 2 do
2833: LD_ADDR_VAR 0 2
2837: PUSH
2838: DOUBLE
2839: LD_INT 1
2841: DEC
2842: ST_TO_ADDR
2843: LD_EXP 22
2847: PUSH
2848: LD_INT 2
2850: PLUS
2851: PUSH
2852: FOR_TO
2853: IFFALSE 2995
// begin uc_side := 1 ;
2855: LD_ADDR_OWVAR 20
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
// uc_nation := 1 ;
2863: LD_ADDR_OWVAR 21
2867: PUSH
2868: LD_INT 1
2870: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
2871: LD_INT 4
2873: PPUSH
2874: LD_INT 3
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_INT 4
2882: PUSH
2883: LD_INT 6
2885: PUSH
2886: LD_INT 7
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: PUSH
2894: LD_INT 1
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: CALL_OW 12
2904: ARRAY
2905: PPUSH
2906: LD_INT 100
2908: PPUSH
2909: CALL 40408 0 5
// veh := CreateVehicle ;
2913: LD_ADDR_VAR 0 4
2917: PUSH
2918: CALL_OW 45
2922: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2923: LD_VAR 0 4
2927: PPUSH
2928: LD_INT 1
2930: PPUSH
2931: CALL_OW 233
// defenders := defenders ^ veh ;
2935: LD_ADDR_EXP 20
2939: PUSH
2940: LD_EXP 20
2944: PUSH
2945: LD_VAR 0 4
2949: ADD
2950: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
2951: LD_INT 0
2953: PPUSH
2954: LD_INT 3
2956: PPUSH
2957: LD_INT 9
2959: PPUSH
2960: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2964: CALL_OW 44
2968: PPUSH
2969: LD_VAR 0 4
2973: PPUSH
2974: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
2978: LD_VAR 0 4
2982: PPUSH
2983: LD_INT 25
2985: PPUSH
2986: LD_INT 0
2988: PPUSH
2989: CALL_OW 49
// end ;
2993: GO 2852
2995: POP
2996: POP
// for i = 1 to defcon_wave do
2997: LD_ADDR_VAR 0 2
3001: PUSH
3002: DOUBLE
3003: LD_INT 1
3005: DEC
3006: ST_TO_ADDR
3007: LD_EXP 22
3011: PUSH
3012: FOR_TO
3013: IFFALSE 3087
// begin uc_side := 1 ;
3015: LD_ADDR_OWVAR 20
3019: PUSH
3020: LD_INT 1
3022: ST_TO_ADDR
// uc_nation := 1 ;
3023: LD_ADDR_OWVAR 21
3027: PUSH
3028: LD_INT 1
3030: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3031: LD_INT 0
3033: PPUSH
3034: LD_INT 5
3036: PPUSH
3037: LD_INT 9
3039: PPUSH
3040: CALL_OW 380
// un := CreateHuman ;
3044: LD_ADDR_VAR 0 3
3048: PUSH
3049: CALL_OW 44
3053: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3054: LD_VAR 0 3
3058: PPUSH
3059: LD_INT 25
3061: PPUSH
3062: LD_INT 0
3064: PPUSH
3065: CALL_OW 49
// defenders := defenders ^ un ;
3069: LD_ADDR_EXP 20
3073: PUSH
3074: LD_EXP 20
3078: PUSH
3079: LD_VAR 0 3
3083: ADD
3084: ST_TO_ADDR
// end ;
3085: GO 3012
3087: POP
3088: POP
// end ; repeat wait ( 0 0$1 ) ;
3089: LD_INT 35
3091: PPUSH
3092: CALL_OW 67
// for i in defenders do
3096: LD_ADDR_VAR 0 2
3100: PUSH
3101: LD_EXP 20
3105: PUSH
3106: FOR_IN
3107: IFFALSE 3189
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3109: LD_EXP 21
3113: PUSH
3114: LD_VAR 0 2
3118: PPUSH
3119: LD_EXP 21
3123: PUSH
3124: LD_INT 1
3126: ARRAY
3127: PPUSH
3128: LD_EXP 21
3132: PUSH
3133: LD_INT 2
3135: ARRAY
3136: PPUSH
3137: CALL_OW 297
3141: PUSH
3142: LD_INT 10
3144: GREATER
3145: AND
3146: PUSH
3147: LD_VAR 0 2
3151: PPUSH
3152: CALL_OW 314
3156: NOT
3157: AND
3158: IFFALSE 3187
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3160: LD_VAR 0 2
3164: PPUSH
3165: LD_EXP 21
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_EXP 21
3178: PUSH
3179: LD_INT 2
3181: ARRAY
3182: PPUSH
3183: CALL_OW 114
// end ;
3187: GO 3106
3189: POP
3190: POP
// until not defenders ;
3191: LD_EXP 20
3195: NOT
3196: IFFALSE 3089
// end ;
3198: LD_VAR 0 1
3202: RET
// every 0 0$1 do var radar , i ;
3203: GO 3205
3205: DISABLE
3206: LD_INT 0
3208: PPUSH
3209: PPUSH
// begin uc_side := 1 ;
3210: LD_ADDR_OWVAR 20
3214: PUSH
3215: LD_INT 1
3217: ST_TO_ADDR
// uc_nation := 1 ;
3218: LD_ADDR_OWVAR 21
3222: PUSH
3223: LD_INT 1
3225: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3226: LD_INT 1
3228: PPUSH
3229: LD_INT 2
3231: PPUSH
3232: LD_INT 3
3234: PPUSH
3235: LD_INT 11
3237: PPUSH
3238: LD_INT 100
3240: PPUSH
3241: CALL 40408 0 5
// radar := CreateVehicle ;
3245: LD_ADDR_VAR 0 1
3249: PUSH
3250: CALL_OW 45
3254: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3255: LD_VAR 0 1
3259: PPUSH
3260: LD_INT 4
3262: PPUSH
3263: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3267: LD_VAR 0 1
3271: PPUSH
3272: LD_INT 51
3274: PPUSH
3275: LD_INT 45
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3285: LD_VAR 0 1
3289: PPUSH
3290: LD_INT 700
3292: PPUSH
3293: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3297: LD_VAR 0 1
3301: PPUSH
3302: LD_INT 65
3304: PPUSH
3305: LD_INT 75
3307: PPUSH
3308: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3312: LD_VAR 0 1
3316: PPUSH
3317: LD_INT 350
3319: PPUSH
3320: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3324: LD_VAR 0 1
3328: PPUSH
3329: LD_INT 83
3331: PPUSH
3332: LD_INT 87
3334: PPUSH
3335: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3339: LD_VAR 0 1
3343: PPUSH
3344: LD_INT 525
3346: PPUSH
3347: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3351: LD_VAR 0 1
3355: PPUSH
3356: LD_INT 94
3358: PPUSH
3359: LD_INT 81
3361: PPUSH
3362: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3366: LD_VAR 0 1
3370: PPUSH
3371: LD_INT 350
3373: PPUSH
3374: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3378: LD_VAR 0 1
3382: PPUSH
3383: LD_INT 55
3385: PPUSH
3386: LD_INT 48
3388: PPUSH
3389: CALL_OW 171
// wait ( 1 1$00 ) ;
3393: LD_INT 2100
3395: PPUSH
3396: CALL_OW 67
// until not IsOk ( radar ) ;
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 302
3409: NOT
3410: IFFALSE 3285
// end ;
3412: PPOPN 2
3414: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3415: LD_OWVAR 67
3419: PUSH
3420: LD_INT 1
3422: GREATER
3423: PUSH
3424: LD_EXP 11
3428: AND
3429: IFFALSE 3651
3431: GO 3433
3433: DISABLE
3434: LD_INT 0
3436: PPUSH
// begin enable ;
3437: ENABLE
// uc_side := 1 ;
3438: LD_ADDR_OWVAR 20
3442: PUSH
3443: LD_INT 1
3445: ST_TO_ADDR
// uc_nation := 1 ;
3446: LD_ADDR_OWVAR 21
3450: PUSH
3451: LD_INT 1
3453: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3454: LD_INT 5
3456: PPUSH
3457: LD_INT 3
3459: PPUSH
3460: LD_INT 3
3462: PPUSH
3463: LD_INT 4
3465: PPUSH
3466: LD_INT 100
3468: PPUSH
3469: CALL 40408 0 5
// un := CreateVehicle ;
3473: LD_ADDR_VAR 0 1
3477: PUSH
3478: CALL_OW 45
3482: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3483: LD_VAR 0 1
3487: PPUSH
3488: LD_INT 3
3490: PPUSH
3491: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3495: LD_VAR 0 1
3499: PPUSH
3500: LD_INT 155
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 0
3508: PPUSH
3509: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3513: LD_VAR 0 1
3517: PPUSH
3518: LD_INT 169
3520: PPUSH
3521: LD_INT 77
3523: PPUSH
3524: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_INT 70
3535: PPUSH
3536: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3540: LD_VAR 0 1
3544: PPUSH
3545: LD_INT 134
3547: PPUSH
3548: LD_INT 62
3550: PPUSH
3551: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_INT 103
3562: PPUSH
3563: LD_INT 42
3565: PPUSH
3566: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: LD_INT 70
3577: PPUSH
3578: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3582: LD_VAR 0 1
3586: PPUSH
3587: LD_INT 84
3589: PPUSH
3590: LD_INT 2
3592: PPUSH
3593: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3597: LD_INT 35
3599: PPUSH
3600: CALL_OW 67
// if IsDead ( un ) then
3604: LD_VAR 0 1
3608: PPUSH
3609: CALL_OW 301
3613: IFFALSE 3625
// begin extra_patrol := false ;
3615: LD_ADDR_EXP 11
3619: PUSH
3620: LD_INT 0
3622: ST_TO_ADDR
// exit ;
3623: GO 3651
// end ; until IsAt ( un , 84 , 2 ) ;
3625: LD_VAR 0 1
3629: PPUSH
3630: LD_INT 84
3632: PPUSH
3633: LD_INT 2
3635: PPUSH
3636: CALL_OW 307
3640: IFFALSE 3597
// RemoveUnit ( un ) ;
3642: LD_VAR 0 1
3646: PPUSH
3647: CALL_OW 64
// end ; end_of_file
3651: PPOPN 1
3653: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl , gammaCommander ; begin
3654: LD_INT 0
3656: PPUSH
3657: PPUSH
3658: PPUSH
3659: PPUSH
3660: PPUSH
3661: PPUSH
3662: PPUSH
3663: PPUSH
// uc_side := 4 ;
3664: LD_ADDR_OWVAR 20
3668: PUSH
3669: LD_INT 4
3671: ST_TO_ADDR
// uc_nation := 1 ;
3672: LD_ADDR_OWVAR 21
3676: PUSH
3677: LD_INT 1
3679: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3680: LD_ADDR_EXP 37
3684: PUSH
3685: LD_STRING DeltaDoctor
3687: PPUSH
3688: LD_EXP 1
3692: NOT
3693: PPUSH
3694: LD_STRING 10c_
3696: PPUSH
3697: CALL 35393 0 3
3701: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3702: LD_ADDR_EXP 36
3706: PUSH
3707: LD_STRING Joan
3709: PPUSH
3710: LD_EXP 1
3714: NOT
3715: PPUSH
3716: LD_STRING 10c_
3718: PPUSH
3719: CALL 35393 0 3
3723: ST_TO_ADDR
// if Joan then
3724: LD_EXP 36
3728: IFFALSE 3759
// friends := Insert ( friends , friends + 1 , Joan ) ;
3730: LD_ADDR_EXP 4
3734: PUSH
3735: LD_EXP 4
3739: PPUSH
3740: LD_EXP 4
3744: PUSH
3745: LD_INT 1
3747: PLUS
3748: PPUSH
3749: LD_EXP 36
3753: PPUSH
3754: CALL_OW 2
3758: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3759: LD_ADDR_EXP 35
3763: PUSH
3764: LD_STRING Simms
3766: PPUSH
3767: LD_EXP 1
3771: NOT
3772: PPUSH
3773: LD_STRING 10c_
3775: PPUSH
3776: CALL 35393 0 3
3780: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3781: LD_ADDR_EXP 34
3785: PUSH
3786: LD_STRING Kikuchi
3788: PPUSH
3789: LD_EXP 1
3793: NOT
3794: PPUSH
3795: LD_STRING 11_
3797: PPUSH
3798: CALL 35393 0 3
3802: ST_TO_ADDR
// if Kikuchi then
3803: LD_EXP 34
3807: IFFALSE 3838
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3809: LD_ADDR_EXP 4
3813: PUSH
3814: LD_EXP 4
3818: PPUSH
3819: LD_EXP 4
3823: PUSH
3824: LD_INT 1
3826: PLUS
3827: PPUSH
3828: LD_EXP 34
3832: PPUSH
3833: CALL_OW 2
3837: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
3838: LD_ADDR_EXP 33
3842: PUSH
3843: LD_STRING Frank
3845: PPUSH
3846: LD_EXP 1
3850: NOT
3851: PPUSH
3852: LD_STRING 11_
3854: PPUSH
3855: CALL 35393 0 3
3859: ST_TO_ADDR
// if Frank then
3860: LD_EXP 33
3864: IFFALSE 3895
// friends := Insert ( friends , friends + 1 , Frank ) ;
3866: LD_ADDR_EXP 4
3870: PUSH
3871: LD_EXP 4
3875: PPUSH
3876: LD_EXP 4
3880: PUSH
3881: LD_INT 1
3883: PLUS
3884: PPUSH
3885: LD_EXP 33
3889: PPUSH
3890: CALL_OW 2
3894: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
3895: LD_ADDR_EXP 32
3899: PUSH
3900: LD_STRING Gary
3902: PPUSH
3903: LD_EXP 1
3907: NOT
3908: PPUSH
3909: LD_STRING 11_
3911: PPUSH
3912: CALL 35393 0 3
3916: ST_TO_ADDR
// if Gary then
3917: LD_EXP 32
3921: IFFALSE 3952
// friends := Insert ( friends , friends + 1 , Gary ) ;
3923: LD_ADDR_EXP 4
3927: PUSH
3928: LD_EXP 4
3932: PPUSH
3933: LD_EXP 4
3937: PUSH
3938: LD_INT 1
3940: PLUS
3941: PPUSH
3942: LD_EXP 32
3946: PPUSH
3947: CALL_OW 2
3951: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
3952: LD_ADDR_EXP 31
3956: PUSH
3957: LD_STRING Cornell
3959: PPUSH
3960: LD_EXP 1
3964: NOT
3965: PPUSH
3966: LD_STRING 11_
3968: PPUSH
3969: CALL 35393 0 3
3973: ST_TO_ADDR
// if Cornel then
3974: LD_EXP 31
3978: IFFALSE 4009
// friends := Insert ( friends , friends + 1 , Cornel ) ;
3980: LD_ADDR_EXP 4
3984: PUSH
3985: LD_EXP 4
3989: PPUSH
3990: LD_EXP 4
3994: PUSH
3995: LD_INT 1
3997: PLUS
3998: PPUSH
3999: LD_EXP 31
4003: PPUSH
4004: CALL_OW 2
4008: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4009: LD_ADDR_EXP 30
4013: PUSH
4014: LD_STRING Houten
4016: PPUSH
4017: LD_EXP 1
4021: NOT
4022: PPUSH
4023: LD_STRING 11_
4025: PPUSH
4026: CALL 35393 0 3
4030: ST_TO_ADDR
// if Houten then
4031: LD_EXP 30
4035: IFFALSE 4066
// friends := Insert ( friends , friends + 1 , Houten ) ;
4037: LD_ADDR_EXP 4
4041: PUSH
4042: LD_EXP 4
4046: PPUSH
4047: LD_EXP 4
4051: PUSH
4052: LD_INT 1
4054: PLUS
4055: PPUSH
4056: LD_EXP 30
4060: PPUSH
4061: CALL_OW 2
4065: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4066: LD_ADDR_EXP 29
4070: PUSH
4071: LD_STRING Gladstone
4073: PPUSH
4074: LD_EXP 1
4078: NOT
4079: PPUSH
4080: LD_STRING 11_
4082: PPUSH
4083: CALL 35393 0 3
4087: ST_TO_ADDR
// if Gladstone then
4088: LD_EXP 29
4092: IFFALSE 4123
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4094: LD_ADDR_EXP 4
4098: PUSH
4099: LD_EXP 4
4103: PPUSH
4104: LD_EXP 4
4108: PUSH
4109: LD_INT 1
4111: PLUS
4112: PPUSH
4113: LD_EXP 29
4117: PPUSH
4118: CALL_OW 2
4122: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4123: LD_ADDR_EXP 23
4127: PUSH
4128: LD_STRING Lisa
4130: PPUSH
4131: LD_EXP 1
4135: NOT
4136: PPUSH
4137: LD_STRING 11_
4139: PPUSH
4140: CALL 35393 0 3
4144: ST_TO_ADDR
// if Lisa then
4145: LD_EXP 23
4149: IFFALSE 4174
// friends := Insert ( friends , 1 , Lisa ) ;
4151: LD_ADDR_EXP 4
4155: PUSH
4156: LD_EXP 4
4160: PPUSH
4161: LD_INT 1
4163: PPUSH
4164: LD_EXP 23
4168: PPUSH
4169: CALL_OW 2
4173: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4174: LD_ADDR_EXP 24
4178: PUSH
4179: LD_STRING Donaldson
4181: PPUSH
4182: LD_EXP 1
4186: NOT
4187: PPUSH
4188: LD_STRING 11_
4190: PPUSH
4191: CALL 35393 0 3
4195: ST_TO_ADDR
// if Donaldson then
4196: LD_EXP 24
4200: IFFALSE 4231
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4202: LD_ADDR_EXP 4
4206: PUSH
4207: LD_EXP 4
4211: PPUSH
4212: LD_EXP 4
4216: PUSH
4217: LD_INT 1
4219: PLUS
4220: PPUSH
4221: LD_EXP 24
4225: PPUSH
4226: CALL_OW 2
4230: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4231: LD_ADDR_EXP 25
4235: PUSH
4236: LD_STRING Bobby
4238: PPUSH
4239: LD_EXP 1
4243: NOT
4244: PPUSH
4245: LD_STRING 11_
4247: PPUSH
4248: CALL 35393 0 3
4252: ST_TO_ADDR
// if Bobby then
4253: LD_EXP 25
4257: IFFALSE 4288
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4259: LD_ADDR_EXP 4
4263: PUSH
4264: LD_EXP 4
4268: PPUSH
4269: LD_EXP 4
4273: PUSH
4274: LD_INT 1
4276: PLUS
4277: PPUSH
4278: LD_EXP 25
4282: PPUSH
4283: CALL_OW 2
4287: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4288: LD_ADDR_EXP 26
4292: PUSH
4293: LD_STRING Cyrus
4295: PPUSH
4296: LD_EXP 1
4300: NOT
4301: PPUSH
4302: LD_STRING 11_
4304: PPUSH
4305: CALL 35393 0 3
4309: ST_TO_ADDR
// if Cyrus then
4310: LD_EXP 26
4314: IFFALSE 4345
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4316: LD_ADDR_EXP 4
4320: PUSH
4321: LD_EXP 4
4325: PPUSH
4326: LD_EXP 4
4330: PUSH
4331: LD_INT 1
4333: PLUS
4334: PPUSH
4335: LD_EXP 26
4339: PPUSH
4340: CALL_OW 2
4344: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4345: LD_ADDR_EXP 27
4349: PUSH
4350: LD_STRING Denis
4352: PPUSH
4353: LD_EXP 1
4357: NOT
4358: PPUSH
4359: LD_STRING 11_
4361: PPUSH
4362: CALL 35393 0 3
4366: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4367: LD_ADDR_EXP 28
4371: PUSH
4372: LD_STRING Brown
4374: PPUSH
4375: LD_EXP 1
4379: NOT
4380: PPUSH
4381: LD_STRING 11_
4383: PPUSH
4384: CALL 35393 0 3
4388: ST_TO_ADDR
// if Brown then
4389: LD_EXP 28
4393: IFFALSE 4424
// friends := Insert ( friends , friends + 1 , Brown ) ;
4395: LD_ADDR_EXP 4
4399: PUSH
4400: LD_EXP 4
4404: PPUSH
4405: LD_EXP 4
4409: PUSH
4410: LD_INT 1
4412: PLUS
4413: PPUSH
4414: LD_EXP 28
4418: PPUSH
4419: CALL_OW 2
4423: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 10c_ ) ;
4424: LD_ADDR_EXP 38
4428: PUSH
4429: LD_STRING Mike
4431: PPUSH
4432: LD_EXP 1
4436: NOT
4437: PPUSH
4438: LD_STRING 10c_
4440: PPUSH
4441: CALL 35393 0 3
4445: ST_TO_ADDR
// if Mike then
4446: LD_EXP 38
4450: IFFALSE 4491
// begin SetClass ( Mike , class_apeman_engineer ) ;
4452: LD_EXP 38
4456: PPUSH
4457: LD_INT 16
4459: PPUSH
4460: CALL_OW 336
// PlaceUnitXY ( Mike , 180 , 87 , false ) ;
4464: LD_EXP 38
4468: PPUSH
4469: LD_INT 180
4471: PPUSH
4472: LD_INT 87
4474: PPUSH
4475: LD_INT 0
4477: PPUSH
4478: CALL_OW 48
// ComHold ( Mike ) ;
4482: LD_EXP 38
4486: PPUSH
4487: CALL_OW 140
// end ; friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4491: LD_ADDR_EXP 4
4495: PUSH
4496: LD_EXP 4
4500: PUSH
4501: LD_STRING 11c_others
4503: PPUSH
4504: CALL_OW 31
4508: ADD
4509: PUSH
4510: LD_STRING 11_others
4512: PPUSH
4513: CALL_OW 31
4517: ADD
4518: ST_TO_ADDR
// if friends < 18 then
4519: LD_EXP 4
4523: PUSH
4524: LD_INT 18
4526: LESS
4527: IFFALSE 4599
// for i = 1 to 18 do
4529: LD_ADDR_VAR 0 2
4533: PUSH
4534: DOUBLE
4535: LD_INT 1
4537: DEC
4538: ST_TO_ADDR
4539: LD_INT 18
4541: PUSH
4542: FOR_TO
4543: IFFALSE 4597
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4545: LD_INT 0
4547: PPUSH
4548: LD_INT 1
4550: PPUSH
4551: LD_INT 4
4553: PPUSH
4554: CALL_OW 12
4558: PPUSH
4559: LD_INT 7
4561: PPUSH
4562: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4566: LD_ADDR_EXP 4
4570: PUSH
4571: LD_EXP 4
4575: PPUSH
4576: LD_EXP 4
4580: PUSH
4581: LD_INT 1
4583: PLUS
4584: PPUSH
4585: CALL_OW 44
4589: PPUSH
4590: CALL_OW 2
4594: ST_TO_ADDR
// end ;
4595: GO 4542
4597: POP
4598: POP
// for i in friends do
4599: LD_ADDR_VAR 0 2
4603: PUSH
4604: LD_EXP 4
4608: PUSH
4609: FOR_IN
4610: IFFALSE 4683
// if GetNation ( i ) = nation_american and GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4612: LD_VAR 0 2
4616: PPUSH
4617: CALL_OW 248
4621: PUSH
4622: LD_INT 1
4624: EQUAL
4625: PUSH
4626: LD_VAR 0 2
4630: PPUSH
4631: LD_INT 1
4633: PPUSH
4634: CALL_OW 259
4638: PUSH
4639: LD_VAR 0 2
4643: PPUSH
4644: LD_INT 4
4646: PPUSH
4647: CALL_OW 259
4651: GREATEREQUAL
4652: AND
4653: IFFALSE 4669
// SetClass ( i , class_soldier ) else
4655: LD_VAR 0 2
4659: PPUSH
4660: LD_INT 1
4662: PPUSH
4663: CALL_OW 336
4667: GO 4681
// SetClass ( i , class_scientistic ) ;
4669: LD_VAR 0 2
4673: PPUSH
4674: LD_INT 4
4676: PPUSH
4677: CALL_OW 336
4681: GO 4609
4683: POP
4684: POP
// if Frank then
4685: LD_EXP 33
4689: IFFALSE 4703
// SetClass ( Frank , class_sniper ) ;
4691: LD_EXP 33
4695: PPUSH
4696: LD_INT 5
4698: PPUSH
4699: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4703: LD_EXP 36
4707: PUSH
4708: LD_EXP 27
4712: PUSH
4713: LD_EXP 37
4717: PUSH
4718: LD_EXP 35
4722: PUSH
4723: EMPTY
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: PPUSH
4729: LD_INT 4
4731: PPUSH
4732: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4736: LD_ADDR_EXP 3
4740: PUSH
4741: LD_STRING 
4743: PPUSH
4744: LD_INT 7
4746: PPUSH
4747: LD_INT 7
4749: PPUSH
4750: LD_INT -6
4752: PUSH
4753: LD_EXP 14
4757: PUSH
4758: LD_EXP 15
4762: PUSH
4763: LD_EXP 35
4767: PUSH
4768: LD_EXP 27
4772: PUSH
4773: LD_EXP 37
4777: PUSH
4778: LD_INT -2
4780: PUSH
4781: LD_INT -3
4783: PUSH
4784: LD_INT -5
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: LIST
4791: LIST
4792: LIST
4793: LIST
4794: LIST
4795: LIST
4796: LIST
4797: PUSH
4798: LD_EXP 4
4802: ADD
4803: PPUSH
4804: LD_INT 1
4806: PUSH
4807: LD_INT 4
4809: PUSH
4810: LD_INT 2
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: PUSH
4817: LD_INT 5
4819: PUSH
4820: LD_INT 0
4822: PUSH
4823: LD_INT 3
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: LIST
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PPUSH
4836: CALL_OW 42
4840: ST_TO_ADDR
// if Simms then
4841: LD_EXP 35
4845: IFFALSE 4863
// selected := selected ^ Simms ;
4847: LD_ADDR_EXP 3
4851: PUSH
4852: LD_EXP 3
4856: PUSH
4857: LD_EXP 35
4861: ADD
4862: ST_TO_ADDR
// if Denis then
4863: LD_EXP 27
4867: IFFALSE 4885
// selected := selected ^ Denis ;
4869: LD_ADDR_EXP 3
4873: PUSH
4874: LD_EXP 3
4878: PUSH
4879: LD_EXP 27
4883: ADD
4884: ST_TO_ADDR
// if DeltaDoctor then
4885: LD_EXP 37
4889: IFFALSE 4907
// selected := selected ^ DeltaDoctor ;
4891: LD_ADDR_EXP 3
4895: PUSH
4896: LD_EXP 3
4900: PUSH
4901: LD_EXP 37
4905: ADD
4906: ST_TO_ADDR
// if gamma_commander = 1 and Donaldson then
4907: LD_EXP 10
4911: PUSH
4912: LD_INT 1
4914: EQUAL
4915: PUSH
4916: LD_EXP 24
4920: AND
4921: IFFALSE 4933
// gammaCommander := Donaldson ;
4923: LD_ADDR_VAR 0 8
4927: PUSH
4928: LD_EXP 24
4932: ST_TO_ADDR
// if gamma_commander = 2 and Brown then
4933: LD_EXP 10
4937: PUSH
4938: LD_INT 2
4940: EQUAL
4941: PUSH
4942: LD_EXP 28
4946: AND
4947: IFFALSE 4959
// gammaCommander := Brown ;
4949: LD_ADDR_VAR 0 8
4953: PUSH
4954: LD_EXP 28
4958: ST_TO_ADDR
// friends := friends diff selected ;
4959: LD_ADDR_EXP 4
4963: PUSH
4964: LD_EXP 4
4968: PUSH
4969: LD_EXP 3
4973: DIFF
4974: ST_TO_ADDR
// friends := friends diff gammaCommander ;
4975: LD_ADDR_EXP 4
4979: PUSH
4980: LD_EXP 4
4984: PUSH
4985: LD_VAR 0 8
4989: DIFF
4990: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
4991: LD_ADDR_VAR 0 4
4995: PUSH
4996: LD_INT 111
4998: PUSH
4999: LD_INT 137
5001: PUSH
5002: LD_INT 51
5004: PUSH
5005: EMPTY
5006: LIST
5007: LIST
5008: LIST
5009: PUSH
5010: LD_INT 147
5012: PUSH
5013: LD_INT 129
5015: PUSH
5016: LD_INT 25
5018: PUSH
5019: EMPTY
5020: LIST
5021: LIST
5022: LIST
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
5028: LD_ADDR_VAR 0 5
5032: PUSH
5033: LD_INT 5
5035: PUSH
5036: LD_INT 6
5038: PUSH
5039: LD_INT 7
5041: PUSH
5042: LD_INT 8
5044: PUSH
5045: LD_INT 17
5047: PUSH
5048: LD_INT 18
5050: PUSH
5051: EMPTY
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: ST_TO_ADDR
// for i in buildings do
5059: LD_ADDR_VAR 0 2
5063: PUSH
5064: LD_VAR 0 4
5068: PUSH
5069: FOR_IN
5070: IFFALSE 5086
// SetSide ( i , 4 ) ;
5072: LD_VAR 0 2
5076: PPUSH
5077: LD_INT 4
5079: PPUSH
5080: CALL_OW 235
5084: GO 5069
5086: POP
5087: POP
// for i in selected union gammaCommander do
5088: LD_ADDR_VAR 0 2
5092: PUSH
5093: LD_EXP 3
5097: PUSH
5098: LD_VAR 0 8
5102: UNION
5103: PUSH
5104: FOR_IN
5105: IFFALSE 5445
// begin if GetClass ( i ) in [ 1 , 5 ] then
5107: LD_VAR 0 2
5111: PPUSH
5112: CALL_OW 257
5116: PUSH
5117: LD_INT 1
5119: PUSH
5120: LD_INT 5
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: IN
5127: IFFALSE 5287
// begin if buildings [ 1 ] then
5129: LD_VAR 0 4
5133: PUSH
5134: LD_INT 1
5136: ARRAY
5137: IFFALSE 5198
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5139: LD_VAR 0 2
5143: PPUSH
5144: LD_VAR 0 4
5148: PUSH
5149: LD_INT 1
5151: ARRAY
5152: PUSH
5153: LD_INT 1
5155: ARRAY
5156: PPUSH
5157: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5161: LD_ADDR_VAR 0 4
5165: PUSH
5166: LD_VAR 0 4
5170: PPUSH
5171: LD_INT 1
5173: PPUSH
5174: LD_VAR 0 4
5178: PUSH
5179: LD_INT 1
5181: ARRAY
5182: PPUSH
5183: LD_INT 1
5185: PPUSH
5186: CALL_OW 3
5190: PPUSH
5191: CALL_OW 1
5195: ST_TO_ADDR
// end else
5196: GO 5285
// begin if not areas then
5198: LD_VAR 0 5
5202: NOT
5203: IFFALSE 5237
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5205: LD_VAR 0 2
5209: PPUSH
5210: LD_INT 87
5212: PPUSH
5213: LD_INT 68
5215: PPUSH
5216: LD_INT 8
5218: PPUSH
5219: LD_INT 0
5221: PPUSH
5222: CALL_OW 50
// ComHold ( i ) ;
5226: LD_VAR 0 2
5230: PPUSH
5231: CALL_OW 140
// end else
5235: GO 5285
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5237: LD_VAR 0 2
5241: PPUSH
5242: LD_VAR 0 5
5246: PUSH
5247: LD_INT 1
5249: ARRAY
5250: PPUSH
5251: LD_INT 0
5253: PPUSH
5254: CALL_OW 49
// ComHold ( i ) ;
5258: LD_VAR 0 2
5262: PPUSH
5263: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5267: LD_ADDR_VAR 0 5
5271: PUSH
5272: LD_VAR 0 5
5276: PPUSH
5277: LD_INT 1
5279: PPUSH
5280: CALL_OW 3
5284: ST_TO_ADDR
// end ; end ; end else
5285: GO 5443
// begin if buildings [ 2 ] then
5287: LD_VAR 0 4
5291: PUSH
5292: LD_INT 2
5294: ARRAY
5295: IFFALSE 5356
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5297: LD_VAR 0 2
5301: PPUSH
5302: LD_VAR 0 4
5306: PUSH
5307: LD_INT 2
5309: ARRAY
5310: PUSH
5311: LD_INT 1
5313: ARRAY
5314: PPUSH
5315: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5319: LD_ADDR_VAR 0 4
5323: PUSH
5324: LD_VAR 0 4
5328: PPUSH
5329: LD_INT 2
5331: PPUSH
5332: LD_VAR 0 4
5336: PUSH
5337: LD_INT 2
5339: ARRAY
5340: PPUSH
5341: LD_INT 1
5343: PPUSH
5344: CALL_OW 3
5348: PPUSH
5349: CALL_OW 1
5353: ST_TO_ADDR
// end else
5354: GO 5443
// begin if not areas then
5356: LD_VAR 0 5
5360: NOT
5361: IFFALSE 5395
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5363: LD_VAR 0 2
5367: PPUSH
5368: LD_INT 87
5370: PPUSH
5371: LD_INT 68
5373: PPUSH
5374: LD_INT 8
5376: PPUSH
5377: LD_INT 0
5379: PPUSH
5380: CALL_OW 50
// ComHold ( i ) ;
5384: LD_VAR 0 2
5388: PPUSH
5389: CALL_OW 140
// end else
5393: GO 5443
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5395: LD_VAR 0 2
5399: PPUSH
5400: LD_VAR 0 5
5404: PUSH
5405: LD_INT 1
5407: ARRAY
5408: PPUSH
5409: LD_INT 0
5411: PPUSH
5412: CALL_OW 49
// ComHold ( i ) ;
5416: LD_VAR 0 2
5420: PPUSH
5421: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5425: LD_ADDR_VAR 0 5
5429: PUSH
5430: LD_VAR 0 5
5434: PPUSH
5435: LD_INT 1
5437: PPUSH
5438: CALL_OW 3
5442: ST_TO_ADDR
// end ; end ; end ; end ;
5443: GO 5104
5445: POP
5446: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5447: LD_ADDR_VAR 0 6
5451: PUSH
5452: LD_INT 22
5454: PUSH
5455: LD_INT 1
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: PUSH
5462: LD_INT 30
5464: PUSH
5465: LD_INT 32
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PPUSH
5476: CALL_OW 69
5480: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5481: LD_ADDR_VAR 0 2
5485: PUSH
5486: DOUBLE
5487: LD_VAR 0 6
5491: PUSH
5492: LD_EXP 4
5496: MINUS
5497: INC
5498: ST_TO_ADDR
5499: LD_INT 1
5501: PUSH
5502: FOR_DOWNTO
5503: IFFALSE 5570
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5505: LD_INT 0
5507: PPUSH
5508: LD_INT 1
5510: PPUSH
5511: LD_INT 7
5513: PUSH
5514: LD_INT 8
5516: PUSH
5517: LD_INT 9
5519: PUSH
5520: LD_INT 10
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: PUSH
5529: LD_OWVAR 67
5533: ARRAY
5534: PPUSH
5535: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5539: LD_ADDR_EXP 4
5543: PUSH
5544: LD_EXP 4
5548: PPUSH
5549: LD_EXP 4
5553: PUSH
5554: LD_INT 1
5556: PLUS
5557: PPUSH
5558: CALL_OW 44
5562: PPUSH
5563: CALL_OW 2
5567: ST_TO_ADDR
// end ;
5568: GO 5502
5570: POP
5571: POP
// if friends then
5572: LD_EXP 4
5576: IFFALSE 5692
// begin tmp := friends ;
5578: LD_ADDR_VAR 0 3
5582: PUSH
5583: LD_EXP 4
5587: ST_TO_ADDR
// for i = 1 to bunkers do
5588: LD_ADDR_VAR 0 2
5592: PUSH
5593: DOUBLE
5594: LD_INT 1
5596: DEC
5597: ST_TO_ADDR
5598: LD_VAR 0 6
5602: PUSH
5603: FOR_TO
5604: IFFALSE 5690
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5606: LD_VAR 0 3
5610: PUSH
5611: LD_VAR 0 3
5615: ARRAY
5616: PPUSH
5617: LD_INT 1
5619: PPUSH
5620: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5624: LD_VAR 0 3
5628: PUSH
5629: LD_VAR 0 3
5633: ARRAY
5634: PPUSH
5635: LD_INT 1
5637: PPUSH
5638: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5642: LD_VAR 0 3
5646: PUSH
5647: LD_VAR 0 3
5651: ARRAY
5652: PPUSH
5653: LD_VAR 0 6
5657: PUSH
5658: LD_VAR 0 2
5662: ARRAY
5663: PPUSH
5664: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5668: LD_ADDR_VAR 0 3
5672: PUSH
5673: LD_VAR 0 3
5677: PPUSH
5678: LD_VAR 0 3
5682: PPUSH
5683: CALL_OW 3
5687: ST_TO_ADDR
// end ;
5688: GO 5603
5690: POP
5691: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5692: LD_ADDR_VAR 0 5
5696: PUSH
5697: LD_VAR 0 5
5701: PUSH
5702: LD_INT 9
5704: PUSH
5705: LD_INT 10
5707: PUSH
5708: LD_INT 11
5710: PUSH
5711: LD_INT 12
5713: PUSH
5714: LD_INT 13
5716: PUSH
5717: LD_INT 14
5719: PUSH
5720: LD_INT 15
5722: PUSH
5723: LD_INT 16
5725: PUSH
5726: LD_INT 26
5728: PUSH
5729: LD_INT 27
5731: PUSH
5732: LD_INT 28
5734: PUSH
5735: LD_INT 29
5737: PUSH
5738: LD_INT 30
5740: PUSH
5741: LD_INT 31
5743: PUSH
5744: LD_INT 32
5746: PUSH
5747: LD_INT 33
5749: PUSH
5750: LD_INT 34
5752: PUSH
5753: LD_INT 35
5755: PUSH
5756: LD_INT 36
5758: PUSH
5759: LD_INT 37
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: LIST
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: LIST
5780: LIST
5781: LIST
5782: LIST
5783: UNION
5784: ST_TO_ADDR
// for i in friends do
5785: LD_ADDR_VAR 0 2
5789: PUSH
5790: LD_EXP 4
5794: PUSH
5795: FOR_IN
5796: IFFALSE 6083
// begin SetTag ( i , 2 ) ;
5798: LD_VAR 0 2
5802: PPUSH
5803: LD_INT 2
5805: PPUSH
5806: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_scientistic , class_sniper ] then
5810: LD_VAR 0 2
5814: PPUSH
5815: CALL_OW 257
5819: PUSH
5820: LD_INT 1
5822: PUSH
5823: LD_INT 4
5825: PUSH
5826: LD_INT 5
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: LIST
5833: IN
5834: NOT
5835: IFFALSE 5849
// SetClass ( i , 1 ) ;
5837: LD_VAR 0 2
5841: PPUSH
5842: LD_INT 1
5844: PPUSH
5845: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
5849: LD_VAR 0 2
5853: PPUSH
5854: CALL_OW 257
5858: PUSH
5859: LD_INT 1
5861: PUSH
5862: LD_INT 5
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: IN
5869: PUSH
5870: LD_VAR 0 4
5874: PUSH
5875: LD_INT 1
5877: ARRAY
5878: AND
5879: IFFALSE 5940
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5881: LD_VAR 0 2
5885: PPUSH
5886: LD_VAR 0 4
5890: PUSH
5891: LD_INT 1
5893: ARRAY
5894: PUSH
5895: LD_INT 1
5897: ARRAY
5898: PPUSH
5899: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5903: LD_ADDR_VAR 0 4
5907: PUSH
5908: LD_VAR 0 4
5912: PPUSH
5913: LD_INT 1
5915: PPUSH
5916: LD_VAR 0 4
5920: PUSH
5921: LD_INT 1
5923: ARRAY
5924: PPUSH
5925: LD_INT 1
5927: PPUSH
5928: CALL_OW 3
5932: PPUSH
5933: CALL_OW 1
5937: ST_TO_ADDR
// continue ;
5938: GO 5795
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
5940: LD_VAR 0 2
5944: PPUSH
5945: CALL_OW 257
5949: PUSH
5950: LD_INT 4
5952: EQUAL
5953: PUSH
5954: LD_VAR 0 4
5958: PUSH
5959: LD_INT 2
5961: ARRAY
5962: AND
5963: IFFALSE 6024
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5965: LD_VAR 0 2
5969: PPUSH
5970: LD_VAR 0 4
5974: PUSH
5975: LD_INT 2
5977: ARRAY
5978: PUSH
5979: LD_INT 1
5981: ARRAY
5982: PPUSH
5983: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5987: LD_ADDR_VAR 0 4
5991: PUSH
5992: LD_VAR 0 4
5996: PPUSH
5997: LD_INT 2
5999: PPUSH
6000: LD_VAR 0 4
6004: PUSH
6005: LD_INT 2
6007: ARRAY
6008: PPUSH
6009: LD_INT 1
6011: PPUSH
6012: CALL_OW 3
6016: PPUSH
6017: CALL_OW 1
6021: ST_TO_ADDR
// continue ;
6022: GO 5795
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
6024: LD_VAR 0 2
6028: PPUSH
6029: LD_VAR 0 5
6033: PUSH
6034: LD_INT 1
6036: ARRAY
6037: PPUSH
6038: LD_INT 0
6040: PPUSH
6041: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
6045: LD_ADDR_VAR 0 5
6049: PUSH
6050: LD_VAR 0 5
6054: PPUSH
6055: LD_INT 1
6057: PPUSH
6058: CALL_OW 3
6062: ST_TO_ADDR
// ComHold ( i ) ;
6063: LD_VAR 0 2
6067: PPUSH
6068: CALL_OW 140
// if not areas then
6072: LD_VAR 0 5
6076: NOT
6077: IFFALSE 6081
// break ;
6079: GO 6083
// end ;
6081: GO 5795
6083: POP
6084: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
6085: LD_EXP 4
6089: PPUSH
6090: LD_INT 3
6092: PUSH
6093: LD_INT 52
6095: PUSH
6096: EMPTY
6097: LIST
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PPUSH
6103: CALL_OW 72
6107: IFFALSE 6174
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
6109: LD_ADDR_VAR 0 2
6113: PUSH
6114: LD_EXP 4
6118: PPUSH
6119: LD_INT 3
6121: PUSH
6122: LD_INT 52
6124: PUSH
6125: EMPTY
6126: LIST
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: PPUSH
6132: CALL_OW 72
6136: PUSH
6137: FOR_IN
6138: IFFALSE 6172
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
6140: LD_VAR 0 2
6144: PPUSH
6145: LD_INT 65
6147: PPUSH
6148: LD_INT 58
6150: PPUSH
6151: LD_INT 7
6153: PPUSH
6154: LD_INT 0
6156: PPUSH
6157: CALL_OW 50
// ComHold ( i ) ;
6161: LD_VAR 0 2
6165: PPUSH
6166: CALL_OW 140
// end ;
6170: GO 6137
6172: POP
6173: POP
// if Frank then
6174: LD_EXP 33
6178: IFFALSE 6192
// SetClass ( Frank , class_sniper ) ;
6180: LD_EXP 33
6184: PPUSH
6185: LD_INT 5
6187: PPUSH
6188: CALL_OW 336
// end ; end_of_file
6192: LD_VAR 0 1
6196: RET
// export function CanSayRand ( side ) ; begin
6197: LD_INT 0
6199: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6200: LD_ADDR_VAR 0 2
6204: PUSH
6205: LD_INT 52
6207: PUSH
6208: EMPTY
6209: LIST
6210: PUSH
6211: LD_INT 22
6213: PUSH
6214: LD_VAR 0 1
6218: PUSH
6219: EMPTY
6220: LIST
6221: LIST
6222: PUSH
6223: LD_INT 2
6225: PUSH
6226: LD_INT 25
6228: PUSH
6229: LD_INT 1
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PUSH
6236: LD_INT 25
6238: PUSH
6239: LD_INT 2
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: PUSH
6246: LD_INT 25
6248: PUSH
6249: LD_INT 3
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PUSH
6256: LD_INT 25
6258: PUSH
6259: LD_INT 4
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: LIST
6277: PPUSH
6278: CALL_OW 69
6282: PUSH
6283: LD_EXP 14
6287: PUSH
6288: LD_EXP 33
6292: PUSH
6293: LD_EXP 23
6297: PUSH
6298: LD_EXP 24
6302: PUSH
6303: LD_EXP 25
6307: PUSH
6308: LD_EXP 26
6312: PUSH
6313: LD_EXP 27
6317: PUSH
6318: LD_EXP 28
6322: PUSH
6323: LD_EXP 29
6327: PUSH
6328: LD_EXP 30
6332: PUSH
6333: LD_EXP 16
6337: PUSH
6338: LD_EXP 31
6342: PUSH
6343: LD_EXP 32
6347: PUSH
6348: LD_EXP 34
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: DIFF
6369: ST_TO_ADDR
// end ;
6370: LD_VAR 0 2
6374: RET
// export function SayRand ( sex , dial ) ; begin
6375: LD_INT 0
6377: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6378: LD_ADDR_VAR 0 3
6382: PUSH
6383: LD_INT 52
6385: PUSH
6386: EMPTY
6387: LIST
6388: PUSH
6389: LD_INT 22
6391: PUSH
6392: LD_INT 1
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: LD_INT 26
6401: PUSH
6402: LD_VAR 0 1
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: LD_INT 2
6413: PUSH
6414: LD_INT 25
6416: PUSH
6417: LD_INT 1
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: PUSH
6424: LD_INT 25
6426: PUSH
6427: LD_INT 2
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 25
6436: PUSH
6437: LD_INT 3
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: PUSH
6444: LD_INT 25
6446: PUSH
6447: LD_INT 4
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: LIST
6465: LIST
6466: PPUSH
6467: CALL_OW 69
6471: PUSH
6472: LD_EXP 14
6476: PUSH
6477: LD_EXP 33
6481: PUSH
6482: LD_EXP 23
6486: PUSH
6487: LD_EXP 24
6491: PUSH
6492: LD_EXP 25
6496: PUSH
6497: LD_EXP 26
6501: PUSH
6502: LD_EXP 27
6506: PUSH
6507: LD_EXP 28
6511: PUSH
6512: LD_EXP 29
6516: PUSH
6517: LD_EXP 30
6521: PUSH
6522: LD_EXP 16
6526: PUSH
6527: LD_EXP 31
6531: PUSH
6532: LD_EXP 32
6536: PUSH
6537: LD_EXP 34
6541: PUSH
6542: EMPTY
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: DIFF
6558: ST_TO_ADDR
// if not result then
6559: LD_VAR 0 3
6563: NOT
6564: IFFALSE 6568
// exit ;
6566: GO 6596
// result := result [ 1 ] ;
6568: LD_ADDR_VAR 0 3
6572: PUSH
6573: LD_VAR 0 3
6577: PUSH
6578: LD_INT 1
6580: ARRAY
6581: ST_TO_ADDR
// Say ( result , dial ) ;
6582: LD_VAR 0 3
6586: PPUSH
6587: LD_VAR 0 2
6591: PPUSH
6592: CALL_OW 88
// end ;
6596: LD_VAR 0 3
6600: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6601: LD_INT 0
6603: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6604: LD_ADDR_VAR 0 4
6608: PUSH
6609: LD_INT 22
6611: PUSH
6612: LD_INT 1
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: LD_INT 26
6621: PUSH
6622: LD_VAR 0 1
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: PUSH
6631: LD_INT 2
6633: PUSH
6634: LD_INT 25
6636: PUSH
6637: LD_INT 1
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: LD_INT 25
6646: PUSH
6647: LD_INT 2
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: PUSH
6654: LD_INT 25
6656: PUSH
6657: LD_INT 3
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: PUSH
6664: LD_INT 25
6666: PUSH
6667: LD_INT 4
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: LIST
6685: PPUSH
6686: CALL_OW 69
6690: PUSH
6691: LD_EXP 14
6695: PUSH
6696: LD_EXP 33
6700: PUSH
6701: LD_EXP 23
6705: PUSH
6706: LD_EXP 24
6710: PUSH
6711: LD_EXP 25
6715: PUSH
6716: LD_EXP 26
6720: PUSH
6721: LD_EXP 27
6725: PUSH
6726: LD_EXP 28
6730: PUSH
6731: LD_EXP 29
6735: PUSH
6736: LD_EXP 30
6740: PUSH
6741: LD_EXP 16
6745: PUSH
6746: LD_EXP 31
6750: PUSH
6751: LD_EXP 32
6755: PUSH
6756: LD_EXP 34
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: PUSH
6777: LD_VAR 0 3
6781: ADD
6782: DIFF
6783: ST_TO_ADDR
// if not result then
6784: LD_VAR 0 4
6788: NOT
6789: IFFALSE 6793
// exit ;
6791: GO 6821
// result := result [ 1 ] ;
6793: LD_ADDR_VAR 0 4
6797: PUSH
6798: LD_VAR 0 4
6802: PUSH
6803: LD_INT 1
6805: ARRAY
6806: ST_TO_ADDR
// Say ( result , dial ) ;
6807: LD_VAR 0 4
6811: PPUSH
6812: LD_VAR 0 2
6816: PPUSH
6817: CALL_OW 88
// end ;
6821: LD_VAR 0 4
6825: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
6826: LD_INT 0
6828: PPUSH
6829: PPUSH
6830: PPUSH
6831: PPUSH
6832: PPUSH
6833: PPUSH
6834: PPUSH
6835: PPUSH
6836: PPUSH
6837: PPUSH
6838: PPUSH
6839: PPUSH
6840: PPUSH
6841: PPUSH
6842: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
6843: LD_VAR 0 1
6847: NOT
6848: PUSH
6849: LD_VAR 0 2
6853: NOT
6854: OR
6855: PUSH
6856: LD_VAR 0 1
6860: PPUSH
6861: CALL_OW 247
6865: PUSH
6866: LD_INT 3
6868: EQUAL
6869: OR
6870: IFFALSE 6874
// exit ;
6872: GO 8413
// for i = path downto 1 do
6874: LD_ADDR_VAR 0 5
6878: PUSH
6879: DOUBLE
6880: LD_VAR 0 2
6884: INC
6885: ST_TO_ADDR
6886: LD_INT 1
6888: PUSH
6889: FOR_DOWNTO
6890: IFFALSE 6951
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
6892: LD_VAR 0 2
6896: PUSH
6897: LD_VAR 0 5
6901: ARRAY
6902: PUSH
6903: LD_INT 1
6905: ARRAY
6906: PPUSH
6907: LD_VAR 0 2
6911: PUSH
6912: LD_VAR 0 5
6916: ARRAY
6917: PUSH
6918: LD_INT 2
6920: ARRAY
6921: PPUSH
6922: CALL_OW 488
6926: NOT
6927: IFFALSE 6949
// path = Delete ( path , i ) ;
6929: LD_ADDR_VAR 0 2
6933: PUSH
6934: LD_VAR 0 2
6938: PPUSH
6939: LD_VAR 0 5
6943: PPUSH
6944: CALL_OW 3
6948: ST_TO_ADDR
// end ;
6949: GO 6889
6951: POP
6952: POP
// if not path then
6953: LD_VAR 0 2
6957: NOT
6958: IFFALSE 6962
// exit ;
6960: GO 8413
// tmp_path := [ ] ;
6962: LD_ADDR_VAR 0 11
6966: PUSH
6967: EMPTY
6968: ST_TO_ADDR
// if flags then
6969: LD_VAR 0 3
6973: IFFALSE 7047
// begin if flags [ 1 ] then
6975: LD_VAR 0 3
6979: PUSH
6980: LD_INT 1
6982: ARRAY
6983: IFFALSE 6999
// safe_place = flags [ 1 ] ;
6985: LD_ADDR_VAR 0 16
6989: PUSH
6990: LD_VAR 0 3
6994: PUSH
6995: LD_INT 1
6997: ARRAY
6998: ST_TO_ADDR
// if flags [ 2 ] then
6999: LD_VAR 0 3
7003: PUSH
7004: LD_INT 2
7006: ARRAY
7007: IFFALSE 7023
// spot_dist = flags [ 2 ] ;
7009: LD_ADDR_VAR 0 15
7013: PUSH
7014: LD_VAR 0 3
7018: PUSH
7019: LD_INT 2
7021: ARRAY
7022: ST_TO_ADDR
// if flags [ 3 ] then
7023: LD_VAR 0 3
7027: PUSH
7028: LD_INT 3
7030: ARRAY
7031: IFFALSE 7047
// chase_range = flags [ 3 ] ;
7033: LD_ADDR_VAR 0 17
7037: PUSH
7038: LD_VAR 0 3
7042: PUSH
7043: LD_INT 3
7045: ARRAY
7046: ST_TO_ADDR
// end ; if not chase_range then
7047: LD_VAR 0 17
7051: NOT
7052: IFFALSE 7062
// chase_range = 8 ;
7054: LD_ADDR_VAR 0 17
7058: PUSH
7059: LD_INT 8
7061: ST_TO_ADDR
// if not spot_dist then
7062: LD_VAR 0 15
7066: NOT
7067: IFFALSE 7077
// spot_dist := 8 ;
7069: LD_ADDR_VAR 0 15
7073: PUSH
7074: LD_INT 8
7076: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
7077: LD_ADDR_VAR 0 18
7081: PUSH
7082: LD_VAR 0 1
7086: PPUSH
7087: CALL_OW 247
7091: PUSH
7092: LD_INT 2
7094: EQUAL
7095: PUSH
7096: LD_VAR 0 1
7100: PPUSH
7101: CALL_OW 262
7105: PUSH
7106: LD_INT 3
7108: NONEQUAL
7109: AND
7110: ST_TO_ADDR
// status = 1 ;
7111: LD_ADDR_VAR 0 12
7115: PUSH
7116: LD_INT 1
7118: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
7119: LD_ADDR_VAR 0 11
7123: PUSH
7124: LD_INT 1
7126: PUSH
7127: LD_VAR 0 2
7131: PUSH
7132: LD_INT 1
7134: ARRAY
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7140: LD_INT 35
7142: PPUSH
7143: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
7147: LD_VAR 0 18
7151: PUSH
7152: LD_VAR 0 1
7156: PPUSH
7157: CALL_OW 261
7161: PUSH
7162: LD_INT 20
7164: LESS
7165: AND
7166: IFFALSE 7359
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7168: LD_ADDR_VAR 0 10
7172: PUSH
7173: LD_INT 22
7175: PUSH
7176: LD_VAR 0 1
7180: PPUSH
7181: CALL_OW 255
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PUSH
7190: LD_INT 2
7192: PUSH
7193: LD_INT 30
7195: PUSH
7196: LD_INT 0
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 30
7205: PUSH
7206: LD_INT 1
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 30
7215: PUSH
7216: LD_INT 29
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 30
7225: PUSH
7226: LD_INT 3
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: PPUSH
7244: CALL_OW 69
7248: ST_TO_ADDR
// if not station then
7249: LD_VAR 0 10
7253: NOT
7254: IFFALSE 7270
// begin SetFuel ( unit , 40 ) ;
7256: LD_VAR 0 1
7260: PPUSH
7261: LD_INT 40
7263: PPUSH
7264: CALL_OW 240
// continue ;
7268: GO 7140
// end ; status := 6 ;
7270: LD_ADDR_VAR 0 12
7274: PUSH
7275: LD_INT 6
7277: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7278: LD_ADDR_VAR 0 10
7282: PUSH
7283: LD_VAR 0 10
7287: PPUSH
7288: LD_VAR 0 1
7292: PPUSH
7293: CALL_OW 74
7297: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7298: LD_INT 35
7300: PPUSH
7301: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7305: LD_VAR 0 1
7309: PPUSH
7310: LD_VAR 0 10
7314: PPUSH
7315: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7319: LD_VAR 0 1
7323: PPUSH
7324: LD_VAR 0 10
7328: PPUSH
7329: CALL_OW 296
7333: PUSH
7334: LD_INT 6
7336: LESS
7337: IFFALSE 7298
// SetFuel ( unit , 100 ) ;
7339: LD_VAR 0 1
7343: PPUSH
7344: LD_INT 100
7346: PPUSH
7347: CALL_OW 240
// status := 5 ;
7351: LD_ADDR_VAR 0 12
7355: PUSH
7356: LD_INT 5
7358: ST_TO_ADDR
// end ; if status = 1 then
7359: LD_VAR 0 12
7363: PUSH
7364: LD_INT 1
7366: EQUAL
7367: IFFALSE 7743
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7369: LD_ADDR_VAR 0 13
7373: PUSH
7374: LD_INT 81
7376: PUSH
7377: LD_VAR 0 1
7381: PPUSH
7382: CALL_OW 255
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: PUSH
7391: LD_INT 3
7393: PUSH
7394: LD_INT 21
7396: PUSH
7397: LD_INT 3
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: PUSH
7408: LD_INT 91
7410: PUSH
7411: LD_VAR 0 1
7415: PUSH
7416: LD_VAR 0 15
7420: PUSH
7421: EMPTY
7422: LIST
7423: LIST
7424: LIST
7425: PUSH
7426: LD_INT 101
7428: PUSH
7429: LD_INT 1
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: PPUSH
7442: CALL_OW 69
7446: ST_TO_ADDR
// for i in enemy do
7447: LD_ADDR_VAR 0 5
7451: PUSH
7452: LD_VAR 0 13
7456: PUSH
7457: FOR_IN
7458: IFFALSE 7489
// if IsInvisible ( i ) then
7460: LD_VAR 0 5
7464: PPUSH
7465: CALL_OW 571
7469: IFFALSE 7487
// enemy := enemy diff i ;
7471: LD_ADDR_VAR 0 13
7475: PUSH
7476: LD_VAR 0 13
7480: PUSH
7481: LD_VAR 0 5
7485: DIFF
7486: ST_TO_ADDR
7487: GO 7457
7489: POP
7490: POP
// if enemy then
7491: LD_VAR 0 13
7495: IFFALSE 7545
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7497: LD_VAR 0 1
7501: PPUSH
7502: LD_VAR 0 1
7506: PPUSH
7507: CALL_OW 250
7511: PPUSH
7512: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7516: LD_VAR 0 1
7520: PPUSH
7521: LD_VAR 0 1
7525: PPUSH
7526: CALL_OW 251
7530: PPUSH
7531: CALL_OW 232
// status = 2 ;
7535: LD_ADDR_VAR 0 12
7539: PUSH
7540: LD_INT 2
7542: ST_TO_ADDR
// end else
7543: GO 7743
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7545: LD_VAR 0 1
7549: PPUSH
7550: LD_VAR 0 11
7554: PUSH
7555: LD_INT 2
7557: ARRAY
7558: PUSH
7559: LD_INT 1
7561: ARRAY
7562: PPUSH
7563: LD_VAR 0 11
7567: PUSH
7568: LD_INT 2
7570: ARRAY
7571: PUSH
7572: LD_INT 2
7574: ARRAY
7575: PPUSH
7576: CALL_OW 307
7580: PUSH
7581: LD_VAR 0 1
7585: PPUSH
7586: CALL_OW 314
7590: NOT
7591: OR
7592: IFFALSE 7743
// begin wait ( 0 0$2 ) ;
7594: LD_INT 70
7596: PPUSH
7597: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7601: LD_VAR 0 11
7605: PUSH
7606: LD_INT 1
7608: ARRAY
7609: PUSH
7610: LD_INT 1
7612: PLUS
7613: PUSH
7614: LD_VAR 0 2
7618: GREATER
7619: IFFALSE 7644
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7621: LD_ADDR_VAR 0 11
7625: PUSH
7626: LD_VAR 0 11
7630: PPUSH
7631: LD_INT 1
7633: PPUSH
7634: LD_INT 1
7636: PPUSH
7637: CALL_OW 1
7641: ST_TO_ADDR
7642: GO 7675
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7644: LD_ADDR_VAR 0 11
7648: PUSH
7649: LD_VAR 0 11
7653: PPUSH
7654: LD_INT 1
7656: PPUSH
7657: LD_VAR 0 11
7661: PUSH
7662: LD_INT 1
7664: ARRAY
7665: PUSH
7666: LD_INT 1
7668: PLUS
7669: PPUSH
7670: CALL_OW 1
7674: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7675: LD_ADDR_VAR 0 11
7679: PUSH
7680: LD_VAR 0 11
7684: PPUSH
7685: LD_INT 2
7687: PPUSH
7688: LD_VAR 0 2
7692: PUSH
7693: LD_VAR 0 11
7697: PUSH
7698: LD_INT 1
7700: ARRAY
7701: ARRAY
7702: PPUSH
7703: CALL_OW 1
7707: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7708: LD_VAR 0 1
7712: PPUSH
7713: LD_VAR 0 11
7717: PUSH
7718: LD_INT 2
7720: ARRAY
7721: PUSH
7722: LD_INT 1
7724: ARRAY
7725: PPUSH
7726: LD_VAR 0 11
7730: PUSH
7731: LD_INT 2
7733: ARRAY
7734: PUSH
7735: LD_INT 2
7737: ARRAY
7738: PPUSH
7739: CALL_OW 114
// end ; end ; end ; if status = 2 then
7743: LD_VAR 0 12
7747: PUSH
7748: LD_INT 2
7750: EQUAL
7751: IFFALSE 7972
// begin if GetLives ( unit ) < 650 and safe_place then
7753: LD_VAR 0 1
7757: PPUSH
7758: CALL_OW 256
7762: PUSH
7763: LD_INT 650
7765: LESS
7766: PUSH
7767: LD_VAR 0 16
7771: AND
7772: IFFALSE 7784
// begin status = 3 ;
7774: LD_ADDR_VAR 0 12
7778: PUSH
7779: LD_INT 3
7781: ST_TO_ADDR
// continue ;
7782: GO 7140
// end ; x := GetRememberedX ( unit ) ;
7784: LD_ADDR_VAR 0 6
7788: PUSH
7789: LD_VAR 0 1
7793: PPUSH
7794: CALL_OW 252
7798: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7799: LD_ADDR_VAR 0 7
7803: PUSH
7804: LD_VAR 0 1
7808: PPUSH
7809: CALL_OW 253
7813: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
7814: LD_ADDR_VAR 0 13
7818: PUSH
7819: LD_INT 81
7821: PUSH
7822: LD_VAR 0 1
7826: PPUSH
7827: CALL_OW 255
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: PUSH
7836: LD_INT 92
7838: PUSH
7839: LD_VAR 0 6
7843: PUSH
7844: LD_VAR 0 7
7848: PUSH
7849: LD_VAR 0 15
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: PUSH
7860: LD_INT 101
7862: PUSH
7863: LD_INT 1
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: PUSH
7870: EMPTY
7871: LIST
7872: LIST
7873: LIST
7874: PPUSH
7875: CALL_OW 69
7879: ST_TO_ADDR
// if enemy then
7880: LD_VAR 0 13
7884: IFFALSE 7955
// begin e := NearestUnitToUnit ( enemy , unit ) ;
7886: LD_ADDR_VAR 0 14
7890: PUSH
7891: LD_VAR 0 13
7895: PPUSH
7896: LD_VAR 0 1
7900: PPUSH
7901: CALL_OW 74
7905: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
7906: LD_VAR 0 14
7910: PPUSH
7911: LD_VAR 0 6
7915: PPUSH
7916: LD_VAR 0 7
7920: PPUSH
7921: CALL_OW 297
7925: PUSH
7926: LD_VAR 0 15
7930: PUSH
7931: LD_VAR 0 17
7935: PLUS
7936: LESS
7937: IFFALSE 7953
// ComAttackUnit ( unit , e ) ;
7939: LD_VAR 0 1
7943: PPUSH
7944: LD_VAR 0 14
7948: PPUSH
7949: CALL_OW 115
// end else
7953: GO 7972
// begin ComStop ( unit ) ;
7955: LD_VAR 0 1
7959: PPUSH
7960: CALL_OW 141
// status = 5 ;
7964: LD_ADDR_VAR 0 12
7968: PUSH
7969: LD_INT 5
7971: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
7972: LD_VAR 0 12
7976: PUSH
7977: LD_INT 3
7979: EQUAL
7980: PUSH
7981: LD_VAR 0 16
7985: AND
7986: IFFALSE 8072
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
7988: LD_VAR 0 1
7992: PPUSH
7993: LD_VAR 0 16
7997: PUSH
7998: LD_INT 1
8000: ARRAY
8001: PPUSH
8002: LD_VAR 0 16
8006: PUSH
8007: LD_INT 2
8009: ARRAY
8010: PPUSH
8011: CALL_OW 111
// wait ( 0 0$1 ) ;
8015: LD_INT 35
8017: PPUSH
8018: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
8022: LD_VAR 0 1
8026: PPUSH
8027: LD_VAR 0 16
8031: PUSH
8032: LD_INT 1
8034: ARRAY
8035: PPUSH
8036: LD_VAR 0 16
8040: PUSH
8041: LD_INT 2
8043: ARRAY
8044: PPUSH
8045: CALL_OW 297
8049: PUSH
8050: LD_INT 4
8052: LESS
8053: IFFALSE 7988
// ComStop ( unit ) ;
8055: LD_VAR 0 1
8059: PPUSH
8060: CALL_OW 141
// status = 4 ;
8064: LD_ADDR_VAR 0 12
8068: PUSH
8069: LD_INT 4
8071: ST_TO_ADDR
// end ; if status = 4 then
8072: LD_VAR 0 12
8076: PUSH
8077: LD_INT 4
8079: EQUAL
8080: IFFALSE 8112
// begin repeat wait ( 0 0$1 ) ;
8082: LD_INT 35
8084: PPUSH
8085: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
8089: LD_VAR 0 1
8093: PPUSH
8094: CALL_OW 256
8098: PUSH
8099: LD_INT 1000
8101: EQUAL
8102: IFFALSE 8082
// status = 5 ;
8104: LD_ADDR_VAR 0 12
8108: PUSH
8109: LD_INT 5
8111: ST_TO_ADDR
// end ; if status = 5 then
8112: LD_VAR 0 12
8116: PUSH
8117: LD_INT 5
8119: EQUAL
8120: IFFALSE 8402
// begin p := 999 ;
8122: LD_ADDR_VAR 0 9
8126: PUSH
8127: LD_INT 999
8129: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
8130: LD_ADDR_VAR 0 14
8134: PUSH
8135: LD_VAR 0 11
8139: PUSH
8140: LD_INT 2
8142: ARRAY
8143: PUSH
8144: LD_INT 1
8146: ARRAY
8147: PUSH
8148: LD_VAR 0 11
8152: PUSH
8153: LD_INT 2
8155: ARRAY
8156: PUSH
8157: LD_INT 2
8159: ARRAY
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: ST_TO_ADDR
// c := 1 ;
8165: LD_ADDR_VAR 0 8
8169: PUSH
8170: LD_INT 1
8172: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8173: LD_ADDR_VAR 0 5
8177: PUSH
8178: DOUBLE
8179: LD_INT 1
8181: DEC
8182: ST_TO_ADDR
8183: LD_VAR 0 11
8187: PUSH
8188: LD_INT 2
8190: ARRAY
8191: PUSH
8192: LD_INT 2
8194: DIV
8195: PUSH
8196: FOR_TO
8197: IFFALSE 8329
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8199: LD_ADDR_VAR 0 6
8203: PUSH
8204: LD_VAR 0 1
8208: PPUSH
8209: LD_VAR 0 11
8213: PUSH
8214: LD_INT 2
8216: ARRAY
8217: PUSH
8218: LD_VAR 0 8
8222: ARRAY
8223: PPUSH
8224: LD_VAR 0 11
8228: PUSH
8229: LD_INT 2
8231: ARRAY
8232: PUSH
8233: LD_VAR 0 8
8237: PUSH
8238: LD_INT 1
8240: PLUS
8241: ARRAY
8242: PPUSH
8243: CALL_OW 297
8247: ST_TO_ADDR
// if x < p then
8248: LD_VAR 0 6
8252: PUSH
8253: LD_VAR 0 9
8257: LESS
8258: IFFALSE 8313
// begin p := x ;
8260: LD_ADDR_VAR 0 9
8264: PUSH
8265: LD_VAR 0 6
8269: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8270: LD_ADDR_VAR 0 14
8274: PUSH
8275: LD_VAR 0 11
8279: PUSH
8280: LD_INT 2
8282: ARRAY
8283: PUSH
8284: LD_VAR 0 8
8288: ARRAY
8289: PUSH
8290: LD_VAR 0 11
8294: PUSH
8295: LD_INT 2
8297: ARRAY
8298: PUSH
8299: LD_VAR 0 8
8303: PUSH
8304: LD_INT 1
8306: PLUS
8307: ARRAY
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: ST_TO_ADDR
// end ; c = c + 2 ;
8313: LD_ADDR_VAR 0 8
8317: PUSH
8318: LD_VAR 0 8
8322: PUSH
8323: LD_INT 2
8325: PLUS
8326: ST_TO_ADDR
// end ;
8327: GO 8196
8329: POP
8330: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8331: LD_VAR 0 1
8335: PPUSH
8336: LD_VAR 0 14
8340: PUSH
8341: LD_INT 1
8343: ARRAY
8344: PPUSH
8345: LD_VAR 0 14
8349: PUSH
8350: LD_INT 2
8352: ARRAY
8353: PPUSH
8354: CALL_OW 111
// wait ( 0 0$1 ) ;
8358: LD_INT 35
8360: PPUSH
8361: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8365: LD_VAR 0 1
8369: PPUSH
8370: LD_VAR 0 14
8374: PUSH
8375: LD_INT 1
8377: ARRAY
8378: PPUSH
8379: LD_VAR 0 14
8383: PUSH
8384: LD_INT 2
8386: ARRAY
8387: PPUSH
8388: CALL_OW 307
8392: IFFALSE 8331
// status = 1 ;
8394: LD_ADDR_VAR 0 12
8398: PUSH
8399: LD_INT 1
8401: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8402: LD_VAR 0 1
8406: PPUSH
8407: CALL_OW 301
8411: IFFALSE 7140
// end ;
8413: LD_VAR 0 4
8417: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8418: LD_INT 0
8420: PPUSH
8421: PPUSH
8422: PPUSH
8423: PPUSH
8424: PPUSH
8425: PPUSH
8426: PPUSH
8427: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8428: LD_VAR 0 1
8432: NOT
8433: PUSH
8434: LD_VAR 0 3
8438: NOT
8439: OR
8440: PUSH
8441: LD_VAR 0 4
8445: PUSH
8446: LD_INT 1
8448: PUSH
8449: LD_INT 2
8451: PUSH
8452: LD_INT 0
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: LIST
8459: IN
8460: NOT
8461: OR
8462: PUSH
8463: LD_VAR 0 6
8467: NOT
8468: OR
8469: PUSH
8470: LD_VAR 0 7
8474: NOT
8475: OR
8476: IFFALSE 8480
// exit ;
8478: GO 8871
// sex_id :=  ;
8480: LD_ADDR_VAR 0 14
8484: PUSH
8485: LD_STRING 
8487: ST_TO_ADDR
// case class of 1 :
8488: LD_VAR 0 5
8492: PUSH
8493: LD_INT 1
8495: DOUBLE
8496: EQUAL
8497: IFTRUE 8501
8499: GO 8512
8501: POP
// class_id := Sol ; 2 :
8502: LD_ADDR_VAR 0 15
8506: PUSH
8507: LD_STRING Sol
8509: ST_TO_ADDR
8510: GO 8570
8512: LD_INT 2
8514: DOUBLE
8515: EQUAL
8516: IFTRUE 8520
8518: GO 8531
8520: POP
// class_id := Eng ; 3 :
8521: LD_ADDR_VAR 0 15
8525: PUSH
8526: LD_STRING Eng
8528: ST_TO_ADDR
8529: GO 8570
8531: LD_INT 3
8533: DOUBLE
8534: EQUAL
8535: IFTRUE 8539
8537: GO 8550
8539: POP
// class_id := Mech ; 4 :
8540: LD_ADDR_VAR 0 15
8544: PUSH
8545: LD_STRING Mech
8547: ST_TO_ADDR
8548: GO 8570
8550: LD_INT 4
8552: DOUBLE
8553: EQUAL
8554: IFTRUE 8558
8556: GO 8569
8558: POP
// class_id := Sci ; end ;
8559: LD_ADDR_VAR 0 15
8563: PUSH
8564: LD_STRING Sci
8566: ST_TO_ADDR
8567: GO 8570
8569: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8570: LD_ADDR_VAR 0 11
8574: PUSH
8575: LD_VAR 0 1
8579: PPUSH
8580: LD_INT 25
8582: PUSH
8583: LD_VAR 0 5
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: PPUSH
8592: CALL_OW 72
8596: ST_TO_ADDR
// if tmp then
8597: LD_VAR 0 11
8601: IFFALSE 8613
// units := tmp ;
8603: LD_ADDR_VAR 0 1
8607: PUSH
8608: LD_VAR 0 11
8612: ST_TO_ADDR
// if sex then
8613: LD_VAR 0 4
8617: IFFALSE 8673
// begin if sex = sex_female then
8619: LD_VAR 0 4
8623: PUSH
8624: LD_INT 2
8626: EQUAL
8627: IFFALSE 8637
// sex_id := F ;
8629: LD_ADDR_VAR 0 14
8633: PUSH
8634: LD_STRING F
8636: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8637: LD_ADDR_VAR 0 1
8641: PUSH
8642: LD_VAR 0 1
8646: PPUSH
8647: LD_INT 26
8649: PUSH
8650: LD_VAR 0 4
8654: PUSH
8655: EMPTY
8656: LIST
8657: LIST
8658: PPUSH
8659: CALL_OW 72
8663: ST_TO_ADDR
// if not units then
8664: LD_VAR 0 1
8668: NOT
8669: IFFALSE 8673
// exit ;
8671: GO 8871
// end ; unit_id := id ;
8673: LD_ADDR_VAR 0 12
8677: PUSH
8678: LD_VAR 0 6
8682: ST_TO_ADDR
// if unit_id > units then
8683: LD_VAR 0 12
8687: PUSH
8688: LD_VAR 0 1
8692: GREATER
8693: IFFALSE 8703
// unit_id := 1 ;
8695: LD_ADDR_VAR 0 12
8699: PUSH
8700: LD_INT 1
8702: ST_TO_ADDR
// if not units [ unit_id ] then
8703: LD_VAR 0 1
8707: PUSH
8708: LD_VAR 0 12
8712: ARRAY
8713: NOT
8714: IFFALSE 8718
// exit ;
8716: GO 8871
// unit := units [ unit_id ] ;
8718: LD_ADDR_VAR 0 10
8722: PUSH
8723: LD_VAR 0 1
8727: PUSH
8728: LD_VAR 0 12
8732: ARRAY
8733: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8734: LD_ADDR_VAR 0 13
8738: PUSH
8739: LD_STRING D
8741: PUSH
8742: LD_VAR 0 3
8746: STR
8747: PUSH
8748: LD_STRING -
8750: STR
8751: PUSH
8752: LD_VAR 0 14
8756: STR
8757: PUSH
8758: LD_VAR 0 15
8762: STR
8763: PUSH
8764: LD_VAR 0 6
8768: STR
8769: PUSH
8770: LD_STRING -
8772: STR
8773: PUSH
8774: LD_VAR 0 7
8778: STR
8779: ST_TO_ADDR
// case type of 0 :
8780: LD_VAR 0 2
8784: PUSH
8785: LD_INT 0
8787: DOUBLE
8788: EQUAL
8789: IFTRUE 8793
8791: GO 8810
8793: POP
// Say ( unit , dialog_id ) ; 1 :
8794: LD_VAR 0 10
8798: PPUSH
8799: LD_VAR 0 13
8803: PPUSH
8804: CALL_OW 88
8808: GO 8861
8810: LD_INT 1
8812: DOUBLE
8813: EQUAL
8814: IFTRUE 8818
8816: GO 8835
8818: POP
// SayRadio ( unit , dialog_id ) ; 2 :
8819: LD_VAR 0 10
8823: PPUSH
8824: LD_VAR 0 13
8828: PPUSH
8829: CALL_OW 94
8833: GO 8861
8835: LD_INT 2
8837: DOUBLE
8838: EQUAL
8839: IFTRUE 8843
8841: GO 8860
8843: POP
// ForceSay ( unit , dialog_id ) ; end ;
8844: LD_VAR 0 10
8848: PPUSH
8849: LD_VAR 0 13
8853: PPUSH
8854: CALL_OW 91
8858: GO 8861
8860: POP
// result := unit ;
8861: LD_ADDR_VAR 0 8
8865: PUSH
8866: LD_VAR 0 10
8870: ST_TO_ADDR
// end ;
8871: LD_VAR 0 8
8875: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
8876: LD_INT 0
8878: PPUSH
8879: PPUSH
8880: PPUSH
// result := false ;
8881: LD_ADDR_VAR 0 4
8885: PUSH
8886: LD_INT 0
8888: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
8889: LD_VAR 0 1
8893: NOT
8894: PUSH
8895: LD_VAR 0 2
8899: NOT
8900: OR
8901: PUSH
8902: LD_VAR 0 1
8906: PPUSH
8907: CALL_OW 310
8911: OR
8912: IFFALSE 8916
// exit ;
8914: GO 9120
// if distance < 0 then
8916: LD_VAR 0 3
8920: PUSH
8921: LD_INT 0
8923: LESS
8924: IFFALSE 8934
// distance := 0 ;
8926: LD_ADDR_VAR 0 3
8930: PUSH
8931: LD_INT 0
8933: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
8934: LD_ADDR_VAR 0 6
8938: PUSH
8939: LD_VAR 0 2
8943: PPUSH
8944: CALL_OW 266
8948: PPUSH
8949: LD_VAR 0 2
8953: PPUSH
8954: CALL_OW 250
8958: PPUSH
8959: LD_VAR 0 2
8963: PPUSH
8964: CALL_OW 251
8968: PPUSH
8969: LD_VAR 0 2
8973: PPUSH
8974: CALL_OW 254
8978: PPUSH
8979: LD_VAR 0 2
8983: PPUSH
8984: CALL_OW 248
8988: PPUSH
8989: LD_INT 1
8991: PPUSH
8992: CALL 49479 0 6
8996: ST_TO_ADDR
// if not entrance then
8997: LD_VAR 0 6
9001: NOT
9002: IFFALSE 9006
// exit ;
9004: GO 9120
// for i in entrance do
9006: LD_ADDR_VAR 0 5
9010: PUSH
9011: LD_VAR 0 6
9015: PUSH
9016: FOR_IN
9017: IFFALSE 9118
// begin if not distance then
9019: LD_VAR 0 3
9023: NOT
9024: IFFALSE 9069
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
9026: LD_VAR 0 1
9030: PPUSH
9031: LD_VAR 0 5
9035: PUSH
9036: LD_INT 1
9038: ARRAY
9039: PPUSH
9040: LD_VAR 0 5
9044: PUSH
9045: LD_INT 2
9047: ARRAY
9048: PPUSH
9049: CALL_OW 307
9053: IFFALSE 9067
// begin result := true ;
9055: LD_ADDR_VAR 0 4
9059: PUSH
9060: LD_INT 1
9062: ST_TO_ADDR
// exit ;
9063: POP
9064: POP
9065: GO 9120
// end ; end else
9067: GO 9116
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
9069: LD_VAR 0 1
9073: PPUSH
9074: LD_VAR 0 5
9078: PUSH
9079: LD_INT 1
9081: ARRAY
9082: PPUSH
9083: LD_VAR 0 5
9087: PUSH
9088: LD_INT 2
9090: ARRAY
9091: PPUSH
9092: CALL_OW 297
9096: PUSH
9097: LD_VAR 0 3
9101: LESSEQUAL
9102: IFFALSE 9116
// begin result := true ;
9104: LD_ADDR_VAR 0 4
9108: PUSH
9109: LD_INT 1
9111: ST_TO_ADDR
// exit ;
9112: POP
9113: POP
9114: GO 9120
// end ; end ; end ;
9116: GO 9016
9118: POP
9119: POP
// end ;
9120: LD_VAR 0 4
9124: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
9125: LD_INT 0
9127: PPUSH
9128: PPUSH
9129: PPUSH
// result := false ;
9130: LD_ADDR_VAR 0 3
9134: PUSH
9135: LD_INT 0
9137: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
9138: LD_VAR 0 1
9142: NOT
9143: PUSH
9144: LD_VAR 0 2
9148: NOT
9149: OR
9150: PUSH
9151: LD_VAR 0 1
9155: PPUSH
9156: CALL_OW 302
9160: NOT
9161: OR
9162: PUSH
9163: LD_VAR 0 2
9167: PPUSH
9168: CALL_OW 302
9172: NOT
9173: OR
9174: IFFALSE 9178
// exit ;
9176: GO 9339
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9178: LD_VAR 0 1
9182: PPUSH
9183: LD_INT 81
9185: PUSH
9186: LD_VAR 0 1
9190: PPUSH
9191: CALL_OW 255
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: PUSH
9200: LD_INT 3
9202: PUSH
9203: LD_INT 21
9205: PUSH
9206: LD_INT 3
9208: PUSH
9209: EMPTY
9210: LIST
9211: LIST
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: PPUSH
9221: CALL_OW 69
9225: PPUSH
9226: LD_VAR 0 1
9230: PPUSH
9231: CALL_OW 74
9235: PPUSH
9236: CALL_OW 296
9240: PUSH
9241: LD_INT 8
9243: LESS
9244: IFFALSE 9248
// exit ;
9246: GO 9339
// building := IsInUnit ( unit2 ) ;
9248: LD_ADDR_VAR 0 5
9252: PUSH
9253: LD_VAR 0 2
9257: PPUSH
9258: CALL_OW 310
9262: ST_TO_ADDR
// if building then
9263: LD_VAR 0 5
9267: IFFALSE 9294
// result := IsNearbyEntrance ( unit , building , 2 ) else
9269: LD_ADDR_VAR 0 3
9273: PUSH
9274: LD_VAR 0 1
9278: PPUSH
9279: LD_VAR 0 5
9283: PPUSH
9284: LD_INT 2
9286: PPUSH
9287: CALL 8876 0 3
9291: ST_TO_ADDR
9292: GO 9339
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9294: LD_ADDR_VAR 0 3
9298: PUSH
9299: LD_VAR 0 1
9303: PPUSH
9304: LD_VAR 0 2
9308: PPUSH
9309: CALL_OW 296
9313: PUSH
9314: LD_INT 6
9316: LESS
9317: PUSH
9318: LD_VAR 0 2
9322: PPUSH
9323: CALL_OW 255
9327: PPUSH
9328: LD_VAR 0 1
9332: PPUSH
9333: CALL_OW 292
9337: AND
9338: ST_TO_ADDR
// end ;
9339: LD_VAR 0 3
9343: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9344: LD_INT 0
9346: PPUSH
9347: PPUSH
9348: PPUSH
9349: PPUSH
// uc_side = 0 ;
9350: LD_ADDR_OWVAR 20
9354: PUSH
9355: LD_INT 0
9357: ST_TO_ADDR
// uc_nation = 0 ;
9358: LD_ADDR_OWVAR 21
9362: PUSH
9363: LD_INT 0
9365: ST_TO_ADDR
// nat_area := nature_area ;
9366: LD_ADDR_VAR 0 4
9370: PUSH
9371: LD_INT 24
9373: ST_TO_ADDR
// InitHc ;
9374: CALL_OW 19
// for i = 1 to 4 do
9378: LD_ADDR_VAR 0 2
9382: PUSH
9383: DOUBLE
9384: LD_INT 1
9386: DEC
9387: ST_TO_ADDR
9388: LD_INT 4
9390: PUSH
9391: FOR_TO
9392: IFFALSE 9439
// begin hc_class = 18 ;
9394: LD_ADDR_OWVAR 28
9398: PUSH
9399: LD_INT 18
9401: ST_TO_ADDR
// hc_gallery =  ;
9402: LD_ADDR_OWVAR 33
9406: PUSH
9407: LD_STRING 
9409: ST_TO_ADDR
// animal := CreateHuman ;
9410: LD_ADDR_VAR 0 3
9414: PUSH
9415: CALL_OW 44
9419: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9420: LD_VAR 0 3
9424: PPUSH
9425: LD_VAR 0 4
9429: PPUSH
9430: LD_INT 0
9432: PPUSH
9433: CALL_OW 49
// end ;
9437: GO 9391
9439: POP
9440: POP
// for i = 1 to 3 do
9441: LD_ADDR_VAR 0 2
9445: PUSH
9446: DOUBLE
9447: LD_INT 1
9449: DEC
9450: ST_TO_ADDR
9451: LD_INT 3
9453: PUSH
9454: FOR_TO
9455: IFFALSE 9549
// begin hc_class = class_apeman ;
9457: LD_ADDR_OWVAR 28
9461: PUSH
9462: LD_INT 12
9464: ST_TO_ADDR
// hc_gallery =  ;
9465: LD_ADDR_OWVAR 33
9469: PUSH
9470: LD_STRING 
9472: ST_TO_ADDR
// hc_agressivity = 0 ;
9473: LD_ADDR_OWVAR 35
9477: PUSH
9478: LD_INT 0
9480: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9481: LD_ADDR_OWVAR 31
9485: PUSH
9486: LD_INT 1
9488: PPUSH
9489: LD_INT 3
9491: PPUSH
9492: CALL_OW 12
9496: PUSH
9497: LD_INT 1
9499: PPUSH
9500: LD_INT 3
9502: PPUSH
9503: CALL_OW 12
9507: PUSH
9508: LD_INT 0
9510: PUSH
9511: LD_INT 0
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: ST_TO_ADDR
// animal := CreateHuman ;
9520: LD_ADDR_VAR 0 3
9524: PUSH
9525: CALL_OW 44
9529: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9530: LD_VAR 0 3
9534: PPUSH
9535: LD_VAR 0 4
9539: PPUSH
9540: LD_INT 0
9542: PPUSH
9543: CALL_OW 49
// end ;
9547: GO 9454
9549: POP
9550: POP
// for i = 1 to 3 do
9551: LD_ADDR_VAR 0 2
9555: PUSH
9556: DOUBLE
9557: LD_INT 1
9559: DEC
9560: ST_TO_ADDR
9561: LD_INT 3
9563: PUSH
9564: FOR_TO
9565: IFFALSE 9612
// begin hc_class = 13 ;
9567: LD_ADDR_OWVAR 28
9571: PUSH
9572: LD_INT 13
9574: ST_TO_ADDR
// hc_gallery =  ;
9575: LD_ADDR_OWVAR 33
9579: PUSH
9580: LD_STRING 
9582: ST_TO_ADDR
// animal := CreateHuman ;
9583: LD_ADDR_VAR 0 3
9587: PUSH
9588: CALL_OW 44
9592: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9593: LD_VAR 0 3
9597: PPUSH
9598: LD_VAR 0 4
9602: PPUSH
9603: LD_INT 0
9605: PPUSH
9606: CALL_OW 49
// end ;
9610: GO 9564
9612: POP
9613: POP
// for i = 1 to 3 do
9614: LD_ADDR_VAR 0 2
9618: PUSH
9619: DOUBLE
9620: LD_INT 1
9622: DEC
9623: ST_TO_ADDR
9624: LD_INT 3
9626: PUSH
9627: FOR_TO
9628: IFFALSE 9673
// begin hc_class = 20 ;
9630: LD_ADDR_OWVAR 28
9634: PUSH
9635: LD_INT 20
9637: ST_TO_ADDR
// hc_gallery =  ;
9638: LD_ADDR_OWVAR 33
9642: PUSH
9643: LD_STRING 
9645: ST_TO_ADDR
// animal := CreateHuman ;
9646: LD_ADDR_VAR 0 3
9650: PUSH
9651: CALL_OW 44
9655: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9656: LD_VAR 0 3
9660: PPUSH
9661: LD_INT 4
9663: PPUSH
9664: LD_INT 0
9666: PPUSH
9667: CALL_OW 49
// end ;
9671: GO 9627
9673: POP
9674: POP
// end ; end_of_file
9675: LD_VAR 0 1
9679: RET
// export function Action ; begin
9680: LD_INT 0
9682: PPUSH
// InGameOn ;
9683: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9687: LD_EXP 14
9691: PPUSH
9692: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9696: LD_EXP 14
9700: PPUSH
9701: LD_STRING D1-JMM-1
9703: PPUSH
9704: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9708: LD_EXP 15
9712: PPUSH
9713: LD_STRING D1-Roth-1
9715: PPUSH
9716: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9720: LD_EXP 14
9724: PPUSH
9725: LD_STRING D1-JMM-2
9727: PPUSH
9728: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9732: LD_EXP 15
9736: PPUSH
9737: LD_STRING D1-Roth-2
9739: PPUSH
9740: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9744: LD_EXP 14
9748: PPUSH
9749: LD_STRING D1-JMM-3
9751: PPUSH
9752: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9756: LD_EXP 15
9760: PPUSH
9761: LD_STRING D1-Roth-3
9763: PPUSH
9764: CALL_OW 88
// ComInvisible ( Roth ) ;
9768: LD_EXP 15
9772: PPUSH
9773: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9777: LD_INT 46
9779: PPUSH
9780: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9784: LD_EXP 14
9788: PPUSH
9789: LD_STRING D1-JMM-4
9791: PPUSH
9792: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9796: LD_INT 10
9798: PPUSH
9799: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9803: LD_EXP 15
9807: PPUSH
9808: LD_EXP 14
9812: PPUSH
9813: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
9817: LD_EXP 14
9821: PPUSH
9822: LD_STRING D1-JMM-4a
9824: PPUSH
9825: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
9829: LD_EXP 15
9833: PPUSH
9834: LD_STRING D1-Roth-4
9836: PPUSH
9837: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
9841: LD_EXP 14
9845: PPUSH
9846: LD_STRING D1-JMM-5
9848: PPUSH
9849: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
9853: LD_EXP 15
9857: PPUSH
9858: LD_STRING D1-Roth-5
9860: PPUSH
9861: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
9865: LD_EXP 14
9869: PPUSH
9870: LD_STRING D1-JMM-6
9872: PPUSH
9873: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
9877: LD_EXP 15
9881: PPUSH
9882: LD_STRING D1-Roth-6
9884: PPUSH
9885: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
9889: LD_EXP 14
9893: PPUSH
9894: LD_STRING D1-JMM-7
9896: PPUSH
9897: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
9901: LD_EXP 16
9905: PPUSH
9906: LD_EXP 14
9910: PPUSH
9911: CALL_OW 250
9915: PPUSH
9916: LD_EXP 14
9920: PPUSH
9921: CALL_OW 251
9925: PPUSH
9926: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
9930: LD_EXP 15
9934: PPUSH
9935: LD_STRING D1-Roth-7
9937: PPUSH
9938: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
9942: LD_INT 10
9944: PPUSH
9945: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
9949: LD_EXP 16
9953: PPUSH
9954: LD_EXP 14
9958: PPUSH
9959: CALL_OW 296
9963: PUSH
9964: LD_INT 6
9966: LESS
9967: IFFALSE 9942
// ComTurnUnit ( Powell , JMM ) ;
9969: LD_EXP 16
9973: PPUSH
9974: LD_EXP 14
9978: PPUSH
9979: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
9983: LD_EXP 16
9987: PPUSH
9988: LD_STRING D1-Pow-7
9990: PPUSH
9991: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
9995: LD_EXP 14
9999: PPUSH
10000: LD_EXP 16
10004: PPUSH
10005: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
10009: LD_EXP 15
10013: PPUSH
10014: LD_EXP 16
10018: PPUSH
10019: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
10023: LD_EXP 14
10027: PPUSH
10028: LD_STRING D1-JMM-8
10030: PPUSH
10031: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
10035: LD_EXP 16
10039: PPUSH
10040: LD_STRING D1-Pow-8
10042: PPUSH
10043: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
10047: LD_EXP 14
10051: PPUSH
10052: LD_STRING D1-JMM-9
10054: PPUSH
10055: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
10059: LD_EXP 16
10063: PPUSH
10064: LD_INT 124
10066: PPUSH
10067: LD_INT 61
10069: PPUSH
10070: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10074: LD_INT 35
10076: PPUSH
10077: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
10081: LD_EXP 14
10085: PPUSH
10086: LD_EXP 16
10090: PPUSH
10091: CALL_OW 296
10095: PUSH
10096: LD_INT 6
10098: GREATER
10099: IFFALSE 10074
// SayRadio ( Powell , D1-Pow-9 ) ;
10101: LD_EXP 16
10105: PPUSH
10106: LD_STRING D1-Pow-9
10108: PPUSH
10109: CALL_OW 94
// RemoveUnit ( Powell ) ;
10113: LD_EXP 16
10117: PPUSH
10118: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
10122: LD_EXP 16
10126: PPUSH
10127: LD_INT 18
10129: PPUSH
10130: CALL_OW 52
// if Joan and not Joan in selected then
10134: LD_EXP 36
10138: PUSH
10139: LD_EXP 36
10143: PUSH
10144: LD_EXP 3
10148: IN
10149: NOT
10150: AND
10151: IFFALSE 10165
// SayRadio ( Joan , D1-Joan-9 ) ;
10153: LD_EXP 36
10157: PPUSH
10158: LD_STRING D1-Joan-9
10160: PPUSH
10161: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10165: LD_EXP 15
10169: PPUSH
10170: LD_EXP 14
10174: PPUSH
10175: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10179: LD_EXP 14
10183: PPUSH
10184: LD_EXP 15
10188: PPUSH
10189: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10193: LD_EXP 15
10197: PPUSH
10198: LD_STRING D1-Roth-9
10200: PPUSH
10201: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10205: LD_EXP 14
10209: PPUSH
10210: LD_STRING D1-JMM-10
10212: PPUSH
10213: CALL_OW 88
// InGameOff ;
10217: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10221: LD_STRING M1
10223: PPUSH
10224: CALL_OW 337
// if Difficulty < 3 then
10228: LD_OWVAR 67
10232: PUSH
10233: LD_INT 3
10235: LESS
10236: IFFALSE 10248
// ChangeSideFog ( 4 , 7 ) ;
10238: LD_INT 4
10240: PPUSH
10241: LD_INT 7
10243: PPUSH
10244: CALL_OW 343
// SaveForQuickRestart ;
10248: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10252: LD_INT 7
10254: PPUSH
10255: LD_INT 1
10257: PPUSH
10258: LD_INT 2
10260: PPUSH
10261: LD_INT 1
10263: PPUSH
10264: CALL_OW 80
// wait ( 0 0$3 ) ;
10268: LD_INT 105
10270: PPUSH
10271: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10275: LD_EXP 15
10279: PPUSH
10280: LD_INT 124
10282: PPUSH
10283: LD_INT 18
10285: PPUSH
10286: CALL_OW 111
// AddComInvisible ( Roth ) ;
10290: LD_EXP 15
10294: PPUSH
10295: CALL_OW 212
// wait ( 0 0$30 ) ;
10299: LD_INT 1050
10301: PPUSH
10302: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10306: LD_EXP 15
10310: PPUSH
10311: LD_INT 2100
10313: PPUSH
10314: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10318: LD_EXP 15
10322: PPUSH
10323: LD_INT 156
10325: PPUSH
10326: LD_INT 20
10328: PPUSH
10329: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10333: LD_EXP 15
10337: PPUSH
10338: LD_INT 178
10340: PPUSH
10341: LD_INT 42
10343: PPUSH
10344: CALL_OW 171
// AddComInvisible ( Roth ) ;
10348: LD_EXP 15
10352: PPUSH
10353: CALL_OW 212
// end ;
10357: LD_VAR 0 1
10361: RET
// every 0 0$1 do var i , tmp ;
10362: GO 10364
10364: DISABLE
10365: LD_INT 0
10367: PPUSH
10368: PPUSH
// begin tmp := selected union friends ;
10369: LD_ADDR_VAR 0 2
10373: PUSH
10374: LD_EXP 3
10378: PUSH
10379: LD_EXP 4
10383: UNION
10384: ST_TO_ADDR
// if not tmp then
10385: LD_VAR 0 2
10389: NOT
10390: IFFALSE 10394
// exit ;
10392: GO 10466
// repeat wait ( 0 0$1 ) ;
10394: LD_INT 35
10396: PPUSH
10397: CALL_OW 67
// for i in tmp do
10401: LD_ADDR_VAR 0 1
10405: PUSH
10406: LD_VAR 0 2
10410: PUSH
10411: FOR_IN
10412: IFFALSE 10457
// if CanSpot ( JMM , i ) then
10414: LD_EXP 14
10418: PPUSH
10419: LD_VAR 0 1
10423: PPUSH
10424: CALL 9125 0 2
10428: IFFALSE 10455
// begin tmp := tmp diff i ;
10430: LD_ADDR_VAR 0 2
10434: PUSH
10435: LD_VAR 0 2
10439: PUSH
10440: LD_VAR 0 1
10444: DIFF
10445: ST_TO_ADDR
// Spot ( i ) ;
10446: LD_VAR 0 1
10450: PPUSH
10451: CALL 10469 0 1
// end ;
10455: GO 10411
10457: POP
10458: POP
// until not tmp ;
10459: LD_VAR 0 2
10463: NOT
10464: IFFALSE 10394
// end ;
10466: PPOPN 2
10468: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10469: LD_INT 0
10471: PPUSH
10472: PPUSH
10473: PPUSH
10474: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10475: LD_VAR 0 1
10479: NOT
10480: PUSH
10481: LD_VAR 0 1
10485: PPUSH
10486: CALL_OW 255
10490: PUSH
10491: LD_INT 4
10493: NONEQUAL
10494: OR
10495: PUSH
10496: LD_VAR 0 1
10500: PPUSH
10501: CALL_OW 555
10505: OR
10506: PUSH
10507: LD_VAR 0 1
10511: PPUSH
10512: CALL_OW 302
10516: NOT
10517: OR
10518: IFFALSE 10522
// exit ;
10520: GO 12404
// InGameOn ;
10522: CALL_OW 8
// side := 7 ;
10526: LD_ADDR_VAR 0 4
10530: PUSH
10531: LD_INT 7
10533: ST_TO_ADDR
// joined := false ;
10534: LD_ADDR_VAR 0 5
10538: PUSH
10539: LD_INT 0
10541: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10542: LD_ADDR_VAR 0 3
10546: PUSH
10547: LD_VAR 0 1
10551: PPUSH
10552: CALL_OW 310
10556: ST_TO_ADDR
// if building then
10557: LD_VAR 0 3
10561: IFFALSE 10620
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10563: LD_EXP 14
10567: PPUSH
10568: LD_VAR 0 1
10572: PPUSH
10573: CALL_OW 255
10577: PPUSH
10578: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10582: LD_EXP 14
10586: PPUSH
10587: LD_VAR 0 3
10591: PPUSH
10592: CALL_OW 120
// repeat wait ( 3 ) ;
10596: LD_INT 3
10598: PPUSH
10599: CALL_OW 67
// until IsInUnit ( JMM ) ;
10603: LD_EXP 14
10607: PPUSH
10608: CALL_OW 310
10612: IFFALSE 10596
// DialogueOn ;
10614: CALL_OW 6
// end else
10618: GO 10652
// begin ComTurnUnit ( JMM , unit ) ;
10620: LD_EXP 14
10624: PPUSH
10625: LD_VAR 0 1
10629: PPUSH
10630: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10634: LD_VAR 0 1
10638: PPUSH
10639: LD_EXP 14
10643: PPUSH
10644: CALL_OW 119
// DialogueOn ;
10648: CALL_OW 6
// end ; if unit = Joan then
10652: LD_VAR 0 1
10656: PUSH
10657: LD_EXP 36
10661: EQUAL
10662: IFFALSE 10772
// begin joined := true ;
10664: LD_ADDR_VAR 0 5
10668: PUSH
10669: LD_INT 1
10671: ST_TO_ADDR
// if Joan in selected then
10672: LD_EXP 36
10676: PUSH
10677: LD_EXP 3
10681: IN
10682: IFFALSE 10710
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10684: LD_EXP 36
10688: PPUSH
10689: LD_STRING D3-Joan-Joan-1
10691: PPUSH
10692: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10696: LD_EXP 14
10700: PPUSH
10701: LD_STRING D3-Joan-JMM-1
10703: PPUSH
10704: CALL_OW 88
// end else
10708: GO 10770
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10710: LD_EXP 36
10714: PPUSH
10715: LD_STRING D4-Joan-Joan-1
10717: PPUSH
10718: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10722: LD_EXP 14
10726: PPUSH
10727: LD_STRING D4-Joan-JMM-1
10729: PPUSH
10730: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10734: LD_EXP 36
10738: PPUSH
10739: LD_STRING D4-Joan-Joan-2
10741: PPUSH
10742: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
10746: LD_EXP 14
10750: PPUSH
10751: LD_STRING D4-Joan-JMM-2
10753: PPUSH
10754: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
10758: LD_EXP 36
10762: PPUSH
10763: LD_STRING D4-Joan-Joan-3
10765: PPUSH
10766: CALL_OW 88
// end ; end else
10770: GO 12212
// if unit = Lisa then
10772: LD_VAR 0 1
10776: PUSH
10777: LD_EXP 23
10781: EQUAL
10782: IFFALSE 10974
// begin if Lisa in selected then
10784: LD_EXP 23
10788: PUSH
10789: LD_EXP 3
10793: IN
10794: IFFALSE 10907
// begin if GetSide ( Joan ) = 7 then
10796: LD_EXP 36
10800: PPUSH
10801: CALL_OW 255
10805: PUSH
10806: LD_INT 7
10808: EQUAL
10809: IFFALSE 10873
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
10811: LD_EXP 23
10815: PPUSH
10816: LD_STRING D3-LisaJ-Lisa-1
10818: PPUSH
10819: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
10823: LD_EXP 14
10827: PPUSH
10828: LD_STRING D3-LisaJ-JMM-1
10830: PPUSH
10831: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
10835: LD_EXP 23
10839: PPUSH
10840: LD_STRING D3-LisaJ-Lisa-2
10842: PPUSH
10843: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
10847: LD_EXP 14
10851: PPUSH
10852: LD_STRING D3-LisaJ-JMM-2
10854: PPUSH
10855: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
10859: LD_EXP 23
10863: PPUSH
10864: LD_STRING D3-LisaJ-Lisa-3
10866: PPUSH
10867: CALL_OW 88
// end else
10871: GO 10905
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
10873: LD_EXP 23
10877: PPUSH
10878: LD_STRING D3-LisaL-Lisa-1
10880: PPUSH
10881: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
10885: LD_EXP 14
10889: PPUSH
10890: LD_STRING D3-LisaL-JMM-1
10892: PPUSH
10893: CALL_OW 88
// joined := true ;
10897: LD_ADDR_VAR 0 5
10901: PUSH
10902: LD_INT 1
10904: ST_TO_ADDR
// end ; end else
10905: GO 10972
// begin if GetSide ( Joan ) = 7 then
10907: LD_EXP 36
10911: PPUSH
10912: CALL_OW 255
10916: PUSH
10917: LD_INT 7
10919: EQUAL
10920: IFFALSE 10960
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
10922: LD_EXP 23
10926: PPUSH
10927: LD_STRING D4-LisaJ-Lisa-1
10929: PPUSH
10930: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
10934: LD_EXP 14
10938: PPUSH
10939: LD_STRING D4-LisaJ-JMM-1
10941: PPUSH
10942: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
10946: LD_EXP 23
10950: PPUSH
10951: LD_STRING D4-LisaJ-Lisa-2
10953: PPUSH
10954: CALL_OW 88
// end else
10958: GO 10972
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
10960: LD_EXP 23
10964: PPUSH
10965: LD_STRING D4-LisaL-Lisa-1
10967: PPUSH
10968: CALL_OW 88
// end ; end ; end else
10972: GO 12212
// if unit = Frank then
10974: LD_VAR 0 1
10978: PUSH
10979: LD_EXP 33
10983: EQUAL
10984: IFFALSE 11124
// begin joined := true ;
10986: LD_ADDR_VAR 0 5
10990: PUSH
10991: LD_INT 1
10993: ST_TO_ADDR
// if Frank in selected then
10994: LD_EXP 33
10998: PUSH
10999: LD_EXP 3
11003: IN
11004: IFFALSE 11074
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
11006: LD_EXP 33
11010: PPUSH
11011: LD_STRING D3-Frank-Frank-1
11013: PPUSH
11014: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
11018: LD_EXP 14
11022: PPUSH
11023: LD_STRING D3-Frank-JMM-1
11025: PPUSH
11026: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
11030: LD_EXP 33
11034: PPUSH
11035: LD_STRING D3-Frank-Frank-2
11037: PPUSH
11038: CALL_OW 88
// if reached_lab then
11042: LD_EXP 5
11046: IFFALSE 11072
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
11048: LD_EXP 14
11052: PPUSH
11053: LD_STRING D3-Frank-JMM-2
11055: PPUSH
11056: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
11060: LD_EXP 33
11064: PPUSH
11065: LD_STRING D3-Frank-Frank-3
11067: PPUSH
11068: CALL_OW 88
// end ; end else
11072: GO 11122
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
11074: LD_EXP 33
11078: PPUSH
11079: LD_STRING D4-Frank-Frank-1
11081: PPUSH
11082: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
11086: LD_EXP 14
11090: PPUSH
11091: LD_STRING D4-Frank-JMM-1
11093: PPUSH
11094: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
11098: LD_EXP 33
11102: PPUSH
11103: LD_STRING D4-Frank-Frank-2
11105: PPUSH
11106: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
11110: LD_EXP 14
11114: PPUSH
11115: LD_STRING D4-Frank-JMM-2
11117: PPUSH
11118: CALL_OW 88
// end ; end else
11122: GO 12212
// if unit = Brown then
11124: LD_VAR 0 1
11128: PUSH
11129: LD_EXP 28
11133: EQUAL
11134: IFFALSE 11230
// begin if Brown in selected or gamma_commander = 2 then
11136: LD_EXP 28
11140: PUSH
11141: LD_EXP 3
11145: IN
11146: PUSH
11147: LD_EXP 10
11151: PUSH
11152: LD_INT 2
11154: EQUAL
11155: OR
11156: IFFALSE 11192
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11158: LD_EXP 28
11162: PPUSH
11163: LD_STRING D3-Soldier1-Sol1-1
11165: PPUSH
11166: CALL_OW 88
// Say ( JMM , D6-JMM-Brown-1 ) ;
11170: LD_EXP 14
11174: PPUSH
11175: LD_STRING D6-JMM-Brown-1
11177: PPUSH
11178: CALL_OW 88
// joined := true ;
11182: LD_ADDR_VAR 0 5
11186: PUSH
11187: LD_INT 1
11189: ST_TO_ADDR
// end else
11190: GO 11228
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11192: LD_EXP 28
11196: PPUSH
11197: LD_STRING D4-Soldier2-Sol1-1
11199: PPUSH
11200: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11204: LD_EXP 14
11208: PPUSH
11209: LD_STRING D4-Soldier1-JMM-1
11211: PPUSH
11212: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11216: LD_EXP 28
11220: PPUSH
11221: LD_STRING D4-Soldier2-Sol1-2
11223: PPUSH
11224: CALL_OW 88
// end ; end else
11228: GO 12212
// if unit = Donaldson then
11230: LD_VAR 0 1
11234: PUSH
11235: LD_EXP 24
11239: EQUAL
11240: IFFALSE 11336
// begin if Donaldson in selected or gamma_commander = 1 then
11242: LD_EXP 24
11246: PUSH
11247: LD_EXP 3
11251: IN
11252: PUSH
11253: LD_EXP 10
11257: PUSH
11258: LD_INT 1
11260: EQUAL
11261: OR
11262: IFFALSE 11298
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11264: LD_EXP 24
11268: PPUSH
11269: LD_STRING D3-Soldier2-FSol2-1
11271: PPUSH
11272: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11276: LD_EXP 14
11280: PPUSH
11281: LD_STRING D3-Soldier2-JMM-1
11283: PPUSH
11284: CALL_OW 88
// joined := true ;
11288: LD_ADDR_VAR 0 5
11292: PUSH
11293: LD_INT 1
11295: ST_TO_ADDR
// end else
11296: GO 11334
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
11298: LD_VAR 0 1
11302: PPUSH
11303: LD_STRING D4-Soldier1-FSol1-1
11305: PPUSH
11306: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11310: LD_EXP 14
11314: PPUSH
11315: LD_STRING D4-Soldier1-JMM-1
11317: PPUSH
11318: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
11322: LD_VAR 0 1
11326: PPUSH
11327: LD_STRING D4-Soldier1-FSol1-2
11329: PPUSH
11330: CALL_OW 88
// end ; end else
11334: GO 12212
// if unit = Cyrus then
11336: LD_VAR 0 1
11340: PUSH
11341: LD_EXP 26
11345: EQUAL
11346: IFFALSE 11420
// begin if Cyrus in selected then
11348: LD_EXP 26
11352: PUSH
11353: LD_EXP 3
11357: IN
11358: IFFALSE 11394
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11360: LD_EXP 26
11364: PPUSH
11365: LD_STRING D3-Cyrus-Cyrus-1
11367: PPUSH
11368: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11372: LD_EXP 14
11376: PPUSH
11377: LD_STRING D3-Cyrus-JMM-1
11379: PPUSH
11380: CALL_OW 88
// joined := true ;
11384: LD_ADDR_VAR 0 5
11388: PUSH
11389: LD_INT 1
11391: ST_TO_ADDR
// end else
11392: GO 11418
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11394: LD_EXP 26
11398: PPUSH
11399: LD_STRING D4-Cyrus-Cyrus-1
11401: PPUSH
11402: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11406: LD_EXP 14
11410: PPUSH
11411: LD_STRING D4-Cyrus-JMM-1
11413: PPUSH
11414: CALL_OW 88
// end ; end else
11418: GO 12212
// if unit = Bobby then
11420: LD_VAR 0 1
11424: PUSH
11425: LD_EXP 25
11429: EQUAL
11430: IFFALSE 11516
// begin if Bobby in selected then
11432: LD_EXP 25
11436: PUSH
11437: LD_EXP 3
11441: IN
11442: IFFALSE 11478
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11444: LD_EXP 25
11448: PPUSH
11449: LD_STRING D3-Bobby-Bobby-1
11451: PPUSH
11452: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11456: LD_EXP 14
11460: PPUSH
11461: LD_STRING D3-Bobby-JMM-1
11463: PPUSH
11464: CALL_OW 88
// joined := true ;
11468: LD_ADDR_VAR 0 5
11472: PUSH
11473: LD_INT 1
11475: ST_TO_ADDR
// end else
11476: GO 11514
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11478: LD_EXP 25
11482: PPUSH
11483: LD_STRING D4-Bobby-Bobby-1
11485: PPUSH
11486: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11490: LD_EXP 14
11494: PPUSH
11495: LD_STRING D4-Bobby-JMM-1
11497: PPUSH
11498: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11502: LD_EXP 25
11506: PPUSH
11507: LD_STRING D4-Bobby-Bobby-2
11509: PPUSH
11510: CALL_OW 88
// end ; end else
11514: GO 12212
// if unit = Cornel then
11516: LD_VAR 0 1
11520: PUSH
11521: LD_EXP 31
11525: EQUAL
11526: IFFALSE 11624
// begin if Cornel in selected then
11528: LD_EXP 31
11532: PUSH
11533: LD_EXP 3
11537: IN
11538: IFFALSE 11586
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11540: LD_EXP 31
11544: PPUSH
11545: LD_STRING D3-Mark-Corn-1
11547: PPUSH
11548: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11552: LD_EXP 14
11556: PPUSH
11557: LD_STRING D3-Mark-JMM-1
11559: PPUSH
11560: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11564: LD_EXP 31
11568: PPUSH
11569: LD_STRING D3-Mark-Corn-2
11571: PPUSH
11572: CALL_OW 88
// joined := true ;
11576: LD_ADDR_VAR 0 5
11580: PUSH
11581: LD_INT 1
11583: ST_TO_ADDR
// end else
11584: GO 11622
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11586: LD_EXP 31
11590: PPUSH
11591: LD_STRING D4-Mark-Corn-1
11593: PPUSH
11594: CALL_OW 88
// Say ( JMM , D4-Mark-JMM-1 ) ;
11598: LD_EXP 14
11602: PPUSH
11603: LD_STRING D4-Mark-JMM-1
11605: PPUSH
11606: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11610: LD_EXP 31
11614: PPUSH
11615: LD_STRING D4-Mark-Corn-2
11617: PPUSH
11618: CALL_OW 88
// end ; end else
11622: GO 12212
// if unit = Gary then
11624: LD_VAR 0 1
11628: PUSH
11629: LD_EXP 32
11633: EQUAL
11634: IFFALSE 11718
// begin if Gary in selected then
11636: LD_EXP 32
11640: PUSH
11641: LD_EXP 3
11645: IN
11646: IFFALSE 11682
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11648: LD_EXP 32
11652: PPUSH
11653: LD_STRING D3-Gary-Gary-1
11655: PPUSH
11656: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11660: LD_EXP 14
11664: PPUSH
11665: LD_STRING D3-Gary-JMM-1
11667: PPUSH
11668: CALL_OW 88
// joined := true ;
11672: LD_ADDR_VAR 0 5
11676: PUSH
11677: LD_INT 1
11679: ST_TO_ADDR
// end else
11680: GO 11716
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11682: LD_EXP 32
11686: PPUSH
11687: LD_STRING D4-Gary-Gary-1
11689: PPUSH
11690: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11694: LD_EXP 32
11698: PPUSH
11699: LD_INT 1
11701: PPUSH
11702: CALL_OW 235
// DialogueOff ;
11706: CALL_OW 7
// InGameOff ;
11710: CALL_OW 9
// exit ;
11714: GO 12404
// end ; end else
11716: GO 12212
// if unit = Kikuchi then
11718: LD_VAR 0 1
11722: PUSH
11723: LD_EXP 34
11727: EQUAL
11728: IFFALSE 11812
// begin if Kikuchi in selected then
11730: LD_EXP 34
11734: PUSH
11735: LD_EXP 3
11739: IN
11740: IFFALSE 11776
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
11742: LD_EXP 34
11746: PPUSH
11747: LD_STRING D3-Yamako-Yam-1
11749: PPUSH
11750: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11754: LD_EXP 14
11758: PPUSH
11759: LD_STRING D3-Soldier2-JMM-1
11761: PPUSH
11762: CALL_OW 88
// joined := true ;
11766: LD_ADDR_VAR 0 5
11770: PUSH
11771: LD_INT 1
11773: ST_TO_ADDR
// end else
11774: GO 11810
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
11776: LD_EXP 34
11780: PPUSH
11781: LD_STRING D4-Yamako-Yam-1
11783: PPUSH
11784: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
11788: LD_EXP 34
11792: PPUSH
11793: LD_INT 1
11795: PPUSH
11796: CALL_OW 235
// DialogueOff ;
11800: CALL_OW 7
// InGameOff ;
11804: CALL_OW 9
// exit ;
11808: GO 12404
// end ; end else
11810: GO 12212
// if unit = Gladstone then
11812: LD_VAR 0 1
11816: PUSH
11817: LD_EXP 29
11821: EQUAL
11822: IFFALSE 11896
// begin if Gladstone in selected then
11824: LD_EXP 29
11828: PUSH
11829: LD_EXP 3
11833: IN
11834: IFFALSE 11870
// begin joined := true ;
11836: LD_ADDR_VAR 0 5
11840: PUSH
11841: LD_INT 1
11843: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
11844: LD_EXP 14
11848: PPUSH
11849: LD_STRING D3-Tim-JMM-1
11851: PPUSH
11852: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
11856: LD_EXP 29
11860: PPUSH
11861: LD_STRING D3-Tim-Glad-1
11863: PPUSH
11864: CALL_OW 88
// end else
11868: GO 11894
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
11870: LD_EXP 14
11874: PPUSH
11875: LD_STRING D4-Tim-JMM-1
11877: PPUSH
11878: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
11882: LD_EXP 29
11886: PPUSH
11887: LD_STRING D4-Tim-Glad-1
11889: PPUSH
11890: CALL_OW 88
// end ; end else
11894: GO 12212
// if unit = Denis then
11896: LD_VAR 0 1
11900: PUSH
11901: LD_EXP 27
11905: EQUAL
11906: IFFALSE 11942
// begin joined := true ;
11908: LD_ADDR_VAR 0 5
11912: PUSH
11913: LD_INT 1
11915: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
11916: LD_EXP 27
11920: PPUSH
11921: LD_STRING D3-Denis-Den-1
11923: PPUSH
11924: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
11928: LD_EXP 14
11932: PPUSH
11933: LD_STRING D3-Denis-JMM-1
11935: PPUSH
11936: CALL_OW 88
// end else
11940: GO 12212
// if unit = Simms then
11942: LD_VAR 0 1
11946: PUSH
11947: LD_EXP 35
11951: EQUAL
11952: IFFALSE 11988
// begin joined := true ;
11954: LD_ADDR_VAR 0 5
11958: PUSH
11959: LD_INT 1
11961: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
11962: LD_EXP 35
11966: PPUSH
11967: LD_STRING D3-Simms-Sim-1
11969: PPUSH
11970: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
11974: LD_EXP 14
11978: PPUSH
11979: LD_STRING D3-Simms-JMM-1
11981: PPUSH
11982: CALL_OW 88
// end else
11986: GO 12212
// if unit = DeltaDoctor then
11988: LD_VAR 0 1
11992: PUSH
11993: LD_EXP 37
11997: EQUAL
11998: IFFALSE 12034
// begin joined := true ;
12000: LD_ADDR_VAR 0 5
12004: PUSH
12005: LD_INT 1
12007: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
12008: LD_EXP 37
12012: PPUSH
12013: LD_STRING D3-Soldier1-Sol1-1
12015: PPUSH
12016: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12020: LD_EXP 14
12024: PPUSH
12025: LD_STRING D3-Soldier1-JMM-1
12027: PPUSH
12028: CALL_OW 88
// end else
12032: GO 12212
// begin joined := unit in selected ;
12034: LD_ADDR_VAR 0 5
12038: PUSH
12039: LD_VAR 0 1
12043: PUSH
12044: LD_EXP 3
12048: IN
12049: ST_TO_ADDR
// if joined then
12050: LD_VAR 0 5
12054: IFFALSE 12123
// begin if GetSex ( unit ) = sex_male then
12056: LD_VAR 0 1
12060: PPUSH
12061: CALL_OW 258
12065: PUSH
12066: LD_INT 1
12068: EQUAL
12069: IFFALSE 12097
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
12071: LD_VAR 0 1
12075: PPUSH
12076: LD_STRING D3-Soldier1-Sol1-1
12078: PPUSH
12079: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
12083: LD_EXP 14
12087: PPUSH
12088: LD_STRING D3-Soldier1-JMM-1
12090: PPUSH
12091: CALL_OW 88
// end else
12095: GO 12121
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
12097: LD_VAR 0 1
12101: PPUSH
12102: LD_STRING D3-Soldier2-FSol2-1
12104: PPUSH
12105: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
12109: LD_EXP 14
12113: PPUSH
12114: LD_STRING D3-Soldier2-JMM-1
12116: PPUSH
12117: CALL_OW 88
// end ; end else
12121: GO 12212
// begin if GetSex ( unit ) = sex_male then
12123: LD_VAR 0 1
12127: PPUSH
12128: CALL_OW 258
12132: PUSH
12133: LD_INT 1
12135: EQUAL
12136: IFFALSE 12176
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
12138: LD_VAR 0 1
12142: PPUSH
12143: LD_STRING D4-Soldier2-Sol1-1
12145: PPUSH
12146: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
12150: LD_EXP 14
12154: PPUSH
12155: LD_STRING D4-Soldier2-JMM-1
12157: PPUSH
12158: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12162: LD_VAR 0 1
12166: PPUSH
12167: LD_STRING D4-Soldier2-Sol2-1
12169: PPUSH
12170: CALL_OW 88
// end else
12174: GO 12212
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12176: LD_VAR 0 1
12180: PPUSH
12181: LD_STRING D4-Soldier1-FSol1-1
12183: PPUSH
12184: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12188: LD_EXP 14
12192: PPUSH
12193: LD_STRING D4-Soldier1-JMM-1
12195: PPUSH
12196: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12200: LD_VAR 0 1
12204: PPUSH
12205: LD_STRING D4-Soldier1-FSol1-2
12207: PPUSH
12208: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12212: CALL_OW 7
// InGameOff ;
12216: CALL_OW 9
// if building then
12220: LD_VAR 0 3
12224: IFFALSE 12325
// begin SetSide ( JMM , side ) ;
12226: LD_EXP 14
12230: PPUSH
12231: LD_VAR 0 4
12235: PPUSH
12236: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12240: LD_EXP 14
12244: PPUSH
12245: CALL_OW 122
// if joined then
12249: LD_VAR 0 5
12253: IFFALSE 12292
// begin SetSide ( unit , side ) ;
12255: LD_VAR 0 1
12259: PPUSH
12260: LD_VAR 0 4
12264: PPUSH
12265: CALL_OW 235
// SetSide ( building , 1 ) ;
12269: LD_VAR 0 3
12273: PPUSH
12274: LD_INT 1
12276: PPUSH
12277: CALL_OW 235
// ComExitBuilding ( unit ) ;
12281: LD_VAR 0 1
12285: PPUSH
12286: CALL_OW 122
// end else
12290: GO 12323
// begin wait ( 0 0$10 ) ;
12292: LD_INT 350
12294: PPUSH
12295: CALL_OW 67
// SetSide ( unit , 1 ) ;
12299: LD_VAR 0 1
12303: PPUSH
12304: LD_INT 1
12306: PPUSH
12307: CALL_OW 235
// SetSide ( building , 1 ) ;
12311: LD_VAR 0 3
12315: PPUSH
12316: LD_INT 1
12318: PPUSH
12319: CALL_OW 235
// end ; end else
12323: GO 12404
// begin ComStop ( [ JMM , unit ] ) ;
12325: LD_EXP 14
12329: PUSH
12330: LD_VAR 0 1
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: PPUSH
12339: CALL_OW 141
// if joined then
12343: LD_VAR 0 5
12347: IFFALSE 12365
// SetSide ( unit , side ) else
12349: LD_VAR 0 1
12353: PPUSH
12354: LD_VAR 0 4
12358: PPUSH
12359: CALL_OW 235
12363: GO 12404
// begin repeat wait ( 0 0$1 ) ;
12365: LD_INT 35
12367: PPUSH
12368: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12372: LD_EXP 14
12376: PPUSH
12377: LD_VAR 0 1
12381: PPUSH
12382: CALL_OW 296
12386: PUSH
12387: LD_INT 11
12389: GREATER
12390: IFFALSE 12365
// SetSide ( unit , 1 ) ;
12392: LD_VAR 0 1
12396: PPUSH
12397: LD_INT 1
12399: PPUSH
12400: CALL_OW 235
// end ; end ; end ;
12404: LD_VAR 0 2
12408: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Mike ) < 6 and See ( 7 , Mike ) do
12409: LD_EXP 14
12413: PPUSH
12414: LD_EXP 38
12418: PPUSH
12419: CALL_OW 296
12423: PUSH
12424: LD_INT 6
12426: LESS
12427: PUSH
12428: LD_INT 7
12430: PPUSH
12431: LD_EXP 38
12435: PPUSH
12436: CALL_OW 292
12440: AND
12441: IFFALSE 12499
12443: GO 12445
12445: DISABLE
// begin DialogueOn ;
12446: CALL_OW 6
// CenterNowOnUnits ( Mike ) ;
12450: LD_EXP 38
12454: PPUSH
12455: CALL_OW 87
// Say ( JMM , D6-JMM-Mike-1 ) ;
12459: LD_EXP 14
12463: PPUSH
12464: LD_STRING D6-JMM-Mike-1
12466: PPUSH
12467: CALL_OW 88
// Say ( Mike , D6-Mike-1 ) ;
12471: LD_EXP 38
12475: PPUSH
12476: LD_STRING D6-Mike-1
12478: PPUSH
12479: CALL_OW 88
// SetSide ( Mike , 7 ) ;
12483: LD_EXP 38
12487: PPUSH
12488: LD_INT 7
12490: PPUSH
12491: CALL_OW 235
// DialogueOff ;
12495: CALL_OW 7
// end ;
12499: END
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12500: LD_EXP 14
12504: PPUSH
12505: CALL_OW 310
12509: PUSH
12510: LD_INT 47
12512: EQUAL
12513: IFFALSE 12581
12515: GO 12517
12517: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12518: LD_STRING M1a
12520: PPUSH
12521: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12525: LD_INT 13
12527: PPUSH
12528: LD_INT 7
12530: PPUSH
12531: LD_INT 2
12533: PPUSH
12534: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12538: LD_INT 29
12540: PPUSH
12541: LD_INT 7
12543: PPUSH
12544: LD_INT 2
12546: PPUSH
12547: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12551: LD_EXP 14
12555: PPUSH
12556: LD_INT 9
12558: PPUSH
12559: CALL_OW 336
// can_escape := true ;
12563: LD_ADDR_EXP 6
12567: PUSH
12568: LD_INT 1
12570: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12571: LD_INT 19
12573: PPUSH
12574: LD_INT 1
12576: PPUSH
12577: CALL_OW 424
// end ;
12581: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12582: LD_EXP 16
12586: PPUSH
12587: CALL_OW 256
12591: PUSH
12592: LD_INT 999
12594: LESS
12595: IFFALSE 12646
12597: GO 12599
12599: DISABLE
// begin enable ;
12600: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12601: LD_INT 25
12603: PPUSH
12604: LD_INT 48
12606: PPUSH
12607: CALL_OW 428
12611: PUSH
12612: LD_EXP 16
12616: EQUAL
12617: IFFALSE 12631
// begin RemoveUnit ( Powell ) ;
12619: LD_EXP 16
12623: PPUSH
12624: CALL_OW 64
// disable ;
12628: DISABLE
// end else
12629: GO 12646
// ComMoveXY ( Powell , 25 , 48 ) ;
12631: LD_EXP 16
12635: PPUSH
12636: LD_INT 25
12638: PPUSH
12639: LD_INT 48
12641: PPUSH
12642: CALL_OW 111
// end ;
12646: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12647: LD_INT 22
12649: PUSH
12650: LD_INT 4
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: LD_INT 21
12659: PUSH
12660: LD_INT 1
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: LD_INT 3
12669: PUSH
12670: LD_INT 24
12672: PUSH
12673: LD_INT 990
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: LIST
12688: PPUSH
12689: CALL_OW 69
12693: PUSH
12694: LD_EXP 15
12698: DIFF
12699: IFFALSE 12843
12701: GO 12703
12703: DISABLE
12704: LD_INT 0
12706: PPUSH
// begin enable ;
12707: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12708: LD_ADDR_VAR 0 1
12712: PUSH
12713: LD_INT 22
12715: PUSH
12716: LD_INT 4
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: PUSH
12723: LD_INT 21
12725: PUSH
12726: LD_INT 1
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PUSH
12733: LD_INT 3
12735: PUSH
12736: LD_INT 24
12738: PUSH
12739: LD_INT 990
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: EMPTY
12747: LIST
12748: LIST
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: LIST
12754: PPUSH
12755: CALL_OW 69
12759: PUSH
12760: LD_EXP 15
12764: DIFF
12765: PUSH
12766: FOR_IN
12767: IFFALSE 12841
// begin ComFree ( i ) ;
12769: LD_VAR 0 1
12773: PPUSH
12774: CALL_OW 139
// SetSide ( i , 1 ) ;
12778: LD_VAR 0 1
12782: PPUSH
12783: LD_INT 1
12785: PPUSH
12786: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
12790: LD_VAR 0 1
12794: PPUSH
12795: LD_EXP 14
12799: PPUSH
12800: CALL_OW 296
12804: PUSH
12805: LD_INT 14
12807: LESS
12808: IFFALSE 12839
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
12810: LD_VAR 0 1
12814: PPUSH
12815: LD_EXP 14
12819: PPUSH
12820: CALL_OW 250
12824: PPUSH
12825: LD_EXP 14
12829: PPUSH
12830: CALL_OW 251
12834: PPUSH
12835: CALL_OW 114
// end ;
12839: GO 12766
12841: POP
12842: POP
// end ;
12843: PPOPN 1
12845: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
12846: LD_INT 22
12848: PUSH
12849: LD_INT 4
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: LD_INT 34
12858: PUSH
12859: LD_INT 12
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: PPUSH
12870: CALL_OW 69
12874: IFFALSE 12956
12876: GO 12878
12878: DISABLE
12879: LD_INT 0
12881: PPUSH
// begin enable ;
12882: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
12883: LD_ADDR_VAR 0 1
12887: PUSH
12888: LD_INT 22
12890: PUSH
12891: LD_INT 4
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: PUSH
12898: LD_INT 34
12900: PUSH
12901: LD_INT 12
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PPUSH
12912: CALL_OW 69
12916: PUSH
12917: FOR_IN
12918: IFFALSE 12954
// if GetDistUnits ( i , JMM ) < 6 then
12920: LD_VAR 0 1
12924: PPUSH
12925: LD_EXP 14
12929: PPUSH
12930: CALL_OW 296
12934: PUSH
12935: LD_INT 6
12937: LESS
12938: IFFALSE 12952
// SetSide ( i , 7 ) ;
12940: LD_VAR 0 1
12944: PPUSH
12945: LD_INT 7
12947: PPUSH
12948: CALL_OW 235
12952: GO 12917
12954: POP
12955: POP
// end ;
12956: PPOPN 1
12958: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
12959: LD_EXP 6
12963: PUSH
12964: LD_INT 19
12966: PPUSH
12967: LD_INT 22
12969: PUSH
12970: LD_INT 7
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PUSH
12977: LD_INT 21
12979: PUSH
12980: LD_INT 1
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PPUSH
12991: CALL_OW 71
12995: NOT
12996: AND
12997: PUSH
12998: LD_INT 3
13000: PPUSH
13001: CALL_OW 469
13005: NOT
13006: AND
13007: PUSH
13008: LD_INT 5
13010: PPUSH
13011: CALL_OW 469
13015: NOT
13016: AND
13017: IFFALSE 14700
13019: GO 13021
13021: DISABLE
13022: LD_INT 0
13024: PPUSH
13025: PPUSH
13026: PPUSH
13027: PPUSH
13028: PPUSH
// begin m1 := false ;
13029: LD_ADDR_VAR 0 3
13033: PUSH
13034: LD_INT 0
13036: ST_TO_ADDR
// m2 := false ;
13037: LD_ADDR_VAR 0 4
13041: PUSH
13042: LD_INT 0
13044: ST_TO_ADDR
// m3 := false ;
13045: LD_ADDR_VAR 0 5
13049: PUSH
13050: LD_INT 0
13052: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
13053: LD_ADDR_VAR 0 1
13057: PUSH
13058: LD_EXP 3
13062: PPUSH
13063: LD_INT 22
13065: PUSH
13066: LD_INT 4
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: PUSH
13073: LD_INT 21
13075: PUSH
13076: LD_INT 1
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: PPUSH
13087: CALL_OW 72
13091: PUSH
13092: LD_INT 0
13094: EQUAL
13095: ST_TO_ADDR
// if not all_taken then
13096: LD_VAR 0 1
13100: NOT
13101: IFFALSE 13242
// case Query ( Q1 ) of 1 :
13103: LD_STRING Q1
13105: PPUSH
13106: CALL_OW 97
13110: PUSH
13111: LD_INT 1
13113: DOUBLE
13114: EQUAL
13115: IFTRUE 13119
13117: GO 13230
13119: POP
// begin repeat wait ( 0 0$1 ) ;
13120: LD_INT 35
13122: PPUSH
13123: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
13127: LD_EXP 3
13131: PPUSH
13132: LD_INT 22
13134: PUSH
13135: LD_INT 4
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 21
13144: PUSH
13145: LD_INT 1
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PPUSH
13156: CALL_OW 72
13160: PUSH
13161: LD_INT 0
13163: EQUAL
13164: PUSH
13165: LD_INT 19
13167: PPUSH
13168: LD_INT 22
13170: PUSH
13171: LD_INT 7
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 21
13180: PUSH
13181: LD_INT 1
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: PPUSH
13192: CALL_OW 71
13196: NOT
13197: AND
13198: PUSH
13199: LD_INT 3
13201: PPUSH
13202: CALL_OW 469
13206: NOT
13207: AND
13208: PUSH
13209: LD_INT 5
13211: PPUSH
13212: CALL_OW 469
13216: NOT
13217: AND
13218: IFFALSE 13120
// all_taken := true ;
13220: LD_ADDR_VAR 0 1
13224: PUSH
13225: LD_INT 1
13227: ST_TO_ADDR
// end ; 2 :
13228: GO 13242
13230: LD_INT 2
13232: DOUBLE
13233: EQUAL
13234: IFTRUE 13238
13236: GO 13241
13238: POP
// ; end ;
13239: GO 13242
13241: POP
// if team_kill_counter < 3 then
13242: LD_EXP 9
13246: PUSH
13247: LD_INT 3
13249: LESS
13250: IFFALSE 13266
// Say ( JMM , D5-JMM-1 ) else
13252: LD_EXP 14
13256: PPUSH
13257: LD_STRING D5-JMM-1
13259: PPUSH
13260: CALL_OW 88
13264: GO 13278
// Say ( JMM , D5-JMM-1a ) ;
13266: LD_EXP 14
13270: PPUSH
13271: LD_STRING D5-JMM-1a
13273: PPUSH
13274: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13278: LD_INT 22
13280: PUSH
13281: LD_INT 7
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: LD_INT 21
13290: PUSH
13291: LD_INT 1
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: LD_INT 23
13300: PUSH
13301: LD_INT 1
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: LIST
13312: PPUSH
13313: CALL_OW 69
13317: PUSH
13318: LD_EXP 14
13322: PUSH
13323: LD_EXP 15
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: DIFF
13332: PUSH
13333: LD_INT 10
13335: GREATEREQUAL
13336: IFFALSE 13345
// SetAchievement ( ACH_TEAM ) ;
13338: LD_STRING ACH_TEAM
13340: PPUSH
13341: CALL_OW 543
// if not invis_used then
13345: LD_EXP 12
13349: NOT
13350: IFFALSE 13366
// begin wait ( 3 ) ;
13352: LD_INT 3
13354: PPUSH
13355: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13359: LD_STRING ACH_NOINVIS
13361: PPUSH
13362: CALL_OW 543
// end ; if not alert then
13366: LD_EXP 13
13370: NOT
13371: IFFALSE 13387
// begin wait ( 3 ) ;
13373: LD_INT 3
13375: PPUSH
13376: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13380: LD_STRING ACH_ALARM
13382: PPUSH
13383: CALL_OW 543
// end ; if tick < 15 15$00 then
13387: LD_OWVAR 1
13391: PUSH
13392: LD_INT 31500
13394: LESS
13395: IFFALSE 13411
// begin wait ( 3 ) ;
13397: LD_INT 3
13399: PPUSH
13400: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13404: LD_STRING ACH_ASPEED_16
13406: PPUSH
13407: CALL_OW 543
// end ; if all_taken then
13411: LD_VAR 0 1
13415: IFFALSE 13437
// begin AddMedal ( All , 1 ) ;
13417: LD_STRING All
13419: PPUSH
13420: LD_INT 1
13422: PPUSH
13423: CALL_OW 101
// m1 := true ;
13427: LD_ADDR_VAR 0 3
13431: PUSH
13432: LD_INT 1
13434: ST_TO_ADDR
// end else
13435: GO 13448
// AddMedal ( All , - 1 ) ;
13437: LD_STRING All
13439: PPUSH
13440: LD_INT 1
13442: NEG
13443: PPUSH
13444: CALL_OW 101
// if team_kill_counter then
13448: LD_EXP 9
13452: IFFALSE 13467
// AddMedal ( Save , - 1 ) else
13454: LD_STRING Save
13456: PPUSH
13457: LD_INT 1
13459: NEG
13460: PPUSH
13461: CALL_OW 101
13465: GO 13485
// begin AddMedal ( Save , 1 ) ;
13467: LD_STRING Save
13469: PPUSH
13470: LD_INT 1
13472: PPUSH
13473: CALL_OW 101
// m2 := true ;
13477: LD_ADDR_VAR 0 4
13481: PUSH
13482: LD_INT 1
13484: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13485: LD_EXP 8
13489: PUSH
13490: LD_INT 2
13492: PUSH
13493: LD_INT 2
13495: PUSH
13496: LD_INT 1
13498: PUSH
13499: LD_INT 1
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: PUSH
13508: LD_OWVAR 67
13512: ARRAY
13513: GREATEREQUAL
13514: IFFALSE 13529
// AddMedal ( Friendship , - 1 ) else
13516: LD_STRING Friendship
13518: PPUSH
13519: LD_INT 1
13521: NEG
13522: PPUSH
13523: CALL_OW 101
13527: GO 13547
// begin AddMedal ( Friendship , 1 ) ;
13529: LD_STRING Friendship
13531: PPUSH
13532: LD_INT 1
13534: PPUSH
13535: CALL_OW 101
// m3 := true ;
13539: LD_ADDR_VAR 0 5
13543: PUSH
13544: LD_INT 1
13546: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13547: LD_VAR 0 3
13551: PUSH
13552: LD_VAR 0 4
13556: AND
13557: PUSH
13558: LD_VAR 0 5
13562: AND
13563: PUSH
13564: LD_OWVAR 67
13568: PUSH
13569: LD_INT 3
13571: GREATEREQUAL
13572: AND
13573: IFFALSE 13585
// SetAchievementEX ( ACH_AMER , 16 ) ;
13575: LD_STRING ACH_AMER
13577: PPUSH
13578: LD_INT 16
13580: PPUSH
13581: CALL_OW 564
// GiveMedals ( MAIN ) ;
13585: LD_STRING MAIN
13587: PPUSH
13588: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] , [ f_class , class_apeman_engineer ] ] ] ] ) ;
13592: LD_ADDR_VAR 0 2
13596: PUSH
13597: LD_INT 22
13599: PUSH
13600: LD_INT 7
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: LD_INT 2
13609: PUSH
13610: LD_INT 25
13612: PUSH
13613: LD_INT 1
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: LD_INT 25
13622: PUSH
13623: LD_INT 2
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: LD_INT 25
13632: PUSH
13633: LD_INT 3
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: PUSH
13640: LD_INT 25
13642: PUSH
13643: LD_INT 4
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: PUSH
13650: LD_INT 25
13652: PUSH
13653: LD_INT 5
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PUSH
13660: LD_INT 25
13662: PUSH
13663: LD_INT 8
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PUSH
13670: LD_INT 25
13672: PUSH
13673: LD_INT 9
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: PUSH
13680: LD_INT 25
13682: PUSH
13683: LD_INT 16
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: PUSH
13705: EMPTY
13706: LIST
13707: PPUSH
13708: CALL_OW 69
13712: ST_TO_ADDR
// RewardPeople ( tmp union Roth diff Mike ) ;
13713: LD_VAR 0 2
13717: PUSH
13718: LD_EXP 15
13722: UNION
13723: PUSH
13724: LD_EXP 38
13728: DIFF
13729: PPUSH
13730: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
13734: LD_EXP 14
13738: PPUSH
13739: LD_STRING 12a_JMM
13741: PPUSH
13742: CALL_OW 38
// if IsLive ( Roth ) then
13746: LD_EXP 15
13750: PPUSH
13751: CALL_OW 300
13755: IFFALSE 13769
// SaveCharacters ( Roth , 12a_Roth ) ;
13757: LD_EXP 15
13761: PPUSH
13762: LD_STRING 12a_Roth
13764: PPUSH
13765: CALL_OW 38
// if Lisa in tmp then
13769: LD_EXP 23
13773: PUSH
13774: LD_VAR 0 2
13778: IN
13779: IFFALSE 13795
// SaveCharacters ( Lisa , 12a_Lisa ) else
13781: LD_EXP 23
13785: PPUSH
13786: LD_STRING 12a_Lisa
13788: PPUSH
13789: CALL_OW 38
13793: GO 13813
// if Lisa then
13795: LD_EXP 23
13799: IFFALSE 13813
// SaveCharacters ( Lisa , 12p_Lisa ) ;
13801: LD_EXP 23
13805: PPUSH
13806: LD_STRING 12p_Lisa
13808: PPUSH
13809: CALL_OW 38
// if Mike in tmp then
13813: LD_EXP 38
13817: PUSH
13818: LD_VAR 0 2
13822: IN
13823: IFFALSE 13837
// SaveCharacters ( Mike , 12a_Mike ) ;
13825: LD_EXP 38
13829: PPUSH
13830: LD_STRING 12a_Mike
13832: PPUSH
13833: CALL_OW 38
// if Donaldson in tmp then
13837: LD_EXP 24
13841: PUSH
13842: LD_VAR 0 2
13846: IN
13847: IFFALSE 13863
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
13849: LD_EXP 24
13853: PPUSH
13854: LD_STRING 12a_Donaldson
13856: PPUSH
13857: CALL_OW 38
13861: GO 13881
// if Donaldson then
13863: LD_EXP 24
13867: IFFALSE 13881
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
13869: LD_EXP 24
13873: PPUSH
13874: LD_STRING 12p_Donaldson
13876: PPUSH
13877: CALL_OW 38
// if Bobby in tmp then
13881: LD_EXP 25
13885: PUSH
13886: LD_VAR 0 2
13890: IN
13891: IFFALSE 13907
// SaveCharacters ( Bobby , 12a_Bobby ) else
13893: LD_EXP 25
13897: PPUSH
13898: LD_STRING 12a_Bobby
13900: PPUSH
13901: CALL_OW 38
13905: GO 13925
// if Bobby then
13907: LD_EXP 25
13911: IFFALSE 13925
// SaveCharacters ( Bobby , 12p_Bobby ) ;
13913: LD_EXP 25
13917: PPUSH
13918: LD_STRING 12p_Bobby
13920: PPUSH
13921: CALL_OW 38
// if Cyrus in tmp then
13925: LD_EXP 26
13929: PUSH
13930: LD_VAR 0 2
13934: IN
13935: IFFALSE 13951
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
13937: LD_EXP 26
13941: PPUSH
13942: LD_STRING 12a_Cyrus
13944: PPUSH
13945: CALL_OW 38
13949: GO 13969
// if Cyrus then
13951: LD_EXP 26
13955: IFFALSE 13969
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
13957: LD_EXP 26
13961: PPUSH
13962: LD_STRING 12p_Cyrus
13964: PPUSH
13965: CALL_OW 38
// if Denis in tmp then
13969: LD_EXP 27
13973: PUSH
13974: LD_VAR 0 2
13978: IN
13979: IFFALSE 13993
// SaveCharacters ( Denis , 12a_Denis ) ;
13981: LD_EXP 27
13985: PPUSH
13986: LD_STRING 12a_Denis
13988: PPUSH
13989: CALL_OW 38
// if Brown in tmp then
13993: LD_EXP 28
13997: PUSH
13998: LD_VAR 0 2
14002: IN
14003: IFFALSE 14019
// SaveCharacters ( Brown , 12a_Brown ) else
14005: LD_EXP 28
14009: PPUSH
14010: LD_STRING 12a_Brown
14012: PPUSH
14013: CALL_OW 38
14017: GO 14043
// if Brown in tmp then
14019: LD_EXP 28
14023: PUSH
14024: LD_VAR 0 2
14028: IN
14029: IFFALSE 14043
// SaveCharacters ( Brown , 12p_Brown ) ;
14031: LD_EXP 28
14035: PPUSH
14036: LD_STRING 12p_Brown
14038: PPUSH
14039: CALL_OW 38
// if Gladstone in tmp then
14043: LD_EXP 29
14047: PUSH
14048: LD_VAR 0 2
14052: IN
14053: IFFALSE 14069
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
14055: LD_EXP 29
14059: PPUSH
14060: LD_STRING 12a_Gladstone
14062: PPUSH
14063: CALL_OW 38
14067: GO 14087
// if Gladstone then
14069: LD_EXP 29
14073: IFFALSE 14087
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
14075: LD_EXP 29
14079: PPUSH
14080: LD_STRING 12p_Gladstone
14082: PPUSH
14083: CALL_OW 38
// if Houten in tmp then
14087: LD_EXP 30
14091: PUSH
14092: LD_VAR 0 2
14096: IN
14097: IFFALSE 14113
// SaveCharacters ( Houten , 12a_Houten ) else
14099: LD_EXP 30
14103: PPUSH
14104: LD_STRING 12a_Houten
14106: PPUSH
14107: CALL_OW 38
14111: GO 14131
// if Houten then
14113: LD_EXP 30
14117: IFFALSE 14131
// SaveCharacters ( Houten , 12p_Houten ) ;
14119: LD_EXP 30
14123: PPUSH
14124: LD_STRING 12p_Houten
14126: PPUSH
14127: CALL_OW 38
// if Cornel in tmp then
14131: LD_EXP 31
14135: PUSH
14136: LD_VAR 0 2
14140: IN
14141: IFFALSE 14157
// SaveCharacters ( Cornel , 12a_Cornell ) else
14143: LD_EXP 31
14147: PPUSH
14148: LD_STRING 12a_Cornell
14150: PPUSH
14151: CALL_OW 38
14155: GO 14175
// if Cornel then
14157: LD_EXP 31
14161: IFFALSE 14175
// SaveCharacters ( Cornel , 12p_Cornell ) ;
14163: LD_EXP 31
14167: PPUSH
14168: LD_STRING 12p_Cornell
14170: PPUSH
14171: CALL_OW 38
// if Gary in tmp then
14175: LD_EXP 32
14179: PUSH
14180: LD_VAR 0 2
14184: IN
14185: IFFALSE 14201
// SaveCharacters ( Gary , 12a_Gary ) else
14187: LD_EXP 32
14191: PPUSH
14192: LD_STRING 12a_Gary
14194: PPUSH
14195: CALL_OW 38
14199: GO 14219
// if Gary then
14201: LD_EXP 32
14205: IFFALSE 14219
// SaveCharacters ( Gary , 12p_Gary ) ;
14207: LD_EXP 32
14211: PPUSH
14212: LD_STRING 12p_Gary
14214: PPUSH
14215: CALL_OW 38
// if Frank in tmp then
14219: LD_EXP 33
14223: PUSH
14224: LD_VAR 0 2
14228: IN
14229: IFFALSE 14243
// SaveCharacters ( Frank , 12a_Frank ) ;
14231: LD_EXP 33
14235: PPUSH
14236: LD_STRING 12a_Frank
14238: PPUSH
14239: CALL_OW 38
// if Kikuchi in tmp then
14243: LD_EXP 34
14247: PUSH
14248: LD_VAR 0 2
14252: IN
14253: IFFALSE 14269
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
14255: LD_EXP 34
14259: PPUSH
14260: LD_STRING 12a_Kikuchi
14262: PPUSH
14263: CALL_OW 38
14267: GO 14287
// if Kikuchi then
14269: LD_EXP 34
14273: IFFALSE 14287
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
14275: LD_EXP 34
14279: PPUSH
14280: LD_STRING 12p_Kikuchi
14282: PPUSH
14283: CALL_OW 38
// if Simms in tmp then
14287: LD_EXP 35
14291: PUSH
14292: LD_VAR 0 2
14296: IN
14297: IFFALSE 14311
// SaveCharacters ( Simms , 12a_Simms ) ;
14299: LD_EXP 35
14303: PPUSH
14304: LD_STRING 12a_Simms
14306: PPUSH
14307: CALL_OW 38
// if Joan in tmp then
14311: LD_EXP 36
14315: PUSH
14316: LD_VAR 0 2
14320: IN
14321: IFFALSE 14335
// SaveCharacters ( Joan , 12a_Joan ) ;
14323: LD_EXP 36
14327: PPUSH
14328: LD_STRING 12a_Joan
14330: PPUSH
14331: CALL_OW 38
// if DeltaDoctor in tmp then
14335: LD_EXP 37
14339: PUSH
14340: LD_VAR 0 2
14344: IN
14345: IFFALSE 14359
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14347: LD_EXP 37
14351: PPUSH
14352: LD_STRING 12a_DeltaDoctor
14354: PPUSH
14355: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Mike ] ;
14359: LD_ADDR_VAR 0 2
14363: PUSH
14364: LD_VAR 0 2
14368: PUSH
14369: LD_EXP 14
14373: PUSH
14374: LD_EXP 15
14378: PUSH
14379: LD_EXP 23
14383: PUSH
14384: LD_EXP 24
14388: PUSH
14389: LD_EXP 25
14393: PUSH
14394: LD_EXP 26
14398: PUSH
14399: LD_EXP 27
14403: PUSH
14404: LD_EXP 28
14408: PUSH
14409: LD_EXP 29
14413: PUSH
14414: LD_EXP 30
14418: PUSH
14419: LD_EXP 31
14423: PUSH
14424: LD_EXP 32
14428: PUSH
14429: LD_EXP 33
14433: PUSH
14434: LD_EXP 34
14438: PUSH
14439: LD_EXP 35
14443: PUSH
14444: LD_EXP 36
14448: PUSH
14449: LD_EXP 37
14453: PUSH
14454: LD_EXP 38
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: DIFF
14479: ST_TO_ADDR
// if tmp then
14480: LD_VAR 0 2
14484: IFFALSE 14498
// SaveCharacters ( tmp , 12a_others ) ;
14486: LD_VAR 0 2
14490: PPUSH
14491: LD_STRING 12a_others
14493: PPUSH
14494: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell , Mike ] ;
14498: LD_ADDR_VAR 0 2
14502: PUSH
14503: LD_INT 21
14505: PUSH
14506: LD_INT 1
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 23
14515: PUSH
14516: LD_INT 1
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PUSH
14523: LD_INT 2
14525: PUSH
14526: LD_INT 22
14528: PUSH
14529: LD_INT 1
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PUSH
14536: LD_INT 22
14538: PUSH
14539: LD_INT 4
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: LIST
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: LIST
14555: PPUSH
14556: CALL_OW 69
14560: PUSH
14561: LD_EXP 14
14565: PUSH
14566: LD_EXP 15
14570: PUSH
14571: LD_EXP 23
14575: PUSH
14576: LD_EXP 24
14580: PUSH
14581: LD_EXP 25
14585: PUSH
14586: LD_EXP 26
14590: PUSH
14591: LD_EXP 27
14595: PUSH
14596: LD_EXP 28
14600: PUSH
14601: LD_EXP 29
14605: PUSH
14606: LD_EXP 30
14610: PUSH
14611: LD_EXP 31
14615: PUSH
14616: LD_EXP 32
14620: PUSH
14621: LD_EXP 33
14625: PUSH
14626: LD_EXP 34
14630: PUSH
14631: LD_EXP 35
14635: PUSH
14636: LD_EXP 36
14640: PUSH
14641: LD_EXP 37
14645: PUSH
14646: LD_EXP 16
14650: PUSH
14651: LD_EXP 38
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: DIFF
14677: ST_TO_ADDR
// if tmp then
14678: LD_VAR 0 2
14682: IFFALSE 14696
// SaveCharacters ( tmp , 12p_others ) ;
14684: LD_VAR 0 2
14688: PPUSH
14689: LD_STRING 12p_others
14691: PPUSH
14692: CALL_OW 38
// YouWin ;
14696: CALL_OW 103
// end ; end_of_file
14700: PPOPN 5
14702: END
// on SailEvent ( event ) do var tmp ;
14703: LD_INT 0
14705: PPUSH
// begin if event = 1 then
14706: LD_VAR 0 1
14710: PUSH
14711: LD_INT 1
14713: EQUAL
14714: IFFALSE 14787
// begin if not mobile_patrol then
14716: LD_EXP 17
14720: NOT
14721: IFFALSE 14725
// exit ;
14723: GO 14787
// tmp := mobile_patrol [ mobile_patrol ] ;
14725: LD_ADDR_VAR 0 2
14729: PUSH
14730: LD_EXP 17
14734: PUSH
14735: LD_EXP 17
14739: ARRAY
14740: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
14741: LD_ADDR_EXP 17
14745: PUSH
14746: LD_EXP 17
14750: PPUSH
14751: LD_EXP 17
14755: PPUSH
14756: CALL_OW 3
14760: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
14761: LD_VAR 0 2
14765: PPUSH
14766: LD_EXP 18
14770: PUSH
14771: LD_EXP 17
14775: PUSH
14776: LD_INT 1
14778: PLUS
14779: ARRAY
14780: PPUSH
14781: EMPTY
14782: PPUSH
14783: CALL 6826 0 3
// end ; end ;
14787: PPOPN 2
14789: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
14790: LD_VAR 0 1
14794: PPUSH
14795: CALL 31104 0 1
// if un = JMM then
14799: LD_VAR 0 1
14803: PUSH
14804: LD_EXP 14
14808: EQUAL
14809: IFFALSE 14818
// YouLost ( JMM ) ;
14811: LD_STRING JMM
14813: PPUSH
14814: CALL_OW 104
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
14818: LD_VAR 0 1
14822: PPUSH
14823: CALL_OW 255
14827: PUSH
14828: LD_INT 7
14830: EQUAL
14831: PUSH
14832: LD_VAR 0 1
14836: PPUSH
14837: CALL_OW 264
14841: PUSH
14842: LD_INT 12
14844: EQUAL
14845: AND
14846: IFFALSE 14855
// YouLost ( Artifact ) ;
14848: LD_STRING Artifact
14850: PPUSH
14851: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
14855: LD_VAR 0 1
14859: PPUSH
14860: CALL_OW 255
14864: PUSH
14865: LD_INT 7
14867: EQUAL
14868: PUSH
14869: LD_VAR 0 1
14873: PPUSH
14874: CALL_OW 247
14878: PUSH
14879: LD_INT 1
14881: EQUAL
14882: AND
14883: PUSH
14884: LD_VAR 0 1
14888: PUSH
14889: LD_EXP 15
14893: EQUAL
14894: OR
14895: IFFALSE 14911
// team_kill_counter := team_kill_counter + 1 ;
14897: LD_ADDR_EXP 9
14901: PUSH
14902: LD_EXP 9
14906: PUSH
14907: LD_INT 1
14909: PLUS
14910: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
14911: LD_VAR 0 1
14915: PPUSH
14916: CALL_OW 255
14920: PUSH
14921: LD_INT 1
14923: EQUAL
14924: PUSH
14925: LD_VAR 0 1
14929: PPUSH
14930: CALL_OW 247
14934: PUSH
14935: LD_INT 1
14937: EQUAL
14938: AND
14939: IFFALSE 14955
// friends_kill_counter := friends_kill_counter + 1 ;
14941: LD_ADDR_EXP 8
14945: PUSH
14946: LD_EXP 8
14950: PUSH
14951: LD_INT 1
14953: PLUS
14954: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
14955: LD_VAR 0 1
14959: PPUSH
14960: CALL_OW 255
14964: PUSH
14965: LD_INT 1
14967: NONEQUAL
14968: IFFALSE 14972
// exit ;
14970: GO 15049
// if GetControl ( un ) = control_remote then
14972: LD_VAR 0 1
14976: PPUSH
14977: CALL_OW 263
14981: PUSH
14982: LD_INT 2
14984: EQUAL
14985: IFFALSE 15003
// defenders := defenders diff un ;
14987: LD_ADDR_EXP 20
14991: PUSH
14992: LD_EXP 20
14996: PUSH
14997: LD_VAR 0 1
15001: DIFF
15002: ST_TO_ADDR
// if not un in defenders then
15003: LD_VAR 0 1
15007: PUSH
15008: LD_EXP 20
15012: IN
15013: NOT
15014: IFFALSE 15049
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
15016: LD_ADDR_EXP 21
15020: PUSH
15021: LD_VAR 0 1
15025: PPUSH
15026: CALL_OW 250
15030: PUSH
15031: LD_VAR 0 1
15035: PPUSH
15036: CALL_OW 251
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: ST_TO_ADDR
// Defend ;
15045: CALL 2791 0 0
// end ; end ;
15049: PPOPN 1
15051: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
15052: LD_VAR 0 1
15056: PPUSH
15057: LD_VAR 0 2
15061: PPUSH
15062: CALL 31224 0 2
// if GetSide ( veh ) <> 1 then
15066: LD_VAR 0 1
15070: PPUSH
15071: CALL_OW 255
15075: PUSH
15076: LD_INT 1
15078: NONEQUAL
15079: IFFALSE 15083
// exit ;
15081: GO 15107
// if GetControl ( veh ) = control_remote then
15083: LD_VAR 0 1
15087: PPUSH
15088: CALL_OW 263
15092: PUSH
15093: LD_INT 2
15095: EQUAL
15096: IFFALSE 15107
// Connect ( veh ) ;
15098: LD_VAR 0 1
15102: PPUSH
15103: CALL 43499 0 1
// end ;
15107: PPOPN 2
15109: END
// on UnitGoesToRed ( un ) do var i , veh ;
15110: LD_INT 0
15112: PPUSH
15113: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
15114: LD_VAR 0 1
15118: PPUSH
15119: CALL_OW 255
15123: PUSH
15124: LD_INT 1
15126: EQUAL
15127: PUSH
15128: LD_VAR 0 1
15132: PPUSH
15133: CALL_OW 263
15137: PUSH
15138: LD_INT 2
15140: EQUAL
15141: AND
15142: IFFALSE 15153
// ComUnlink ( un ) ;
15144: LD_VAR 0 1
15148: PPUSH
15149: CALL_OW 136
// if un = ambar0 then
15153: LD_VAR 0 1
15157: PUSH
15158: LD_INT 18
15160: EQUAL
15161: IFFALSE 15271
// begin uc_side := 1 ;
15163: LD_ADDR_OWVAR 20
15167: PUSH
15168: LD_INT 1
15170: ST_TO_ADDR
// uc_nation := 1 ;
15171: LD_ADDR_OWVAR 21
15175: PUSH
15176: LD_INT 1
15178: ST_TO_ADDR
// for i = 1 to 6 do
15179: LD_ADDR_VAR 0 2
15183: PUSH
15184: DOUBLE
15185: LD_INT 1
15187: DEC
15188: ST_TO_ADDR
15189: LD_INT 6
15191: PUSH
15192: FOR_TO
15193: IFFALSE 15269
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
15195: LD_INT 3
15197: PPUSH
15198: LD_INT 1
15200: PPUSH
15201: LD_INT 3
15203: PPUSH
15204: LD_INT 4
15206: PPUSH
15207: LD_INT 100
15209: PPUSH
15210: CALL 40408 0 5
// veh := CreateVehicle ;
15214: LD_ADDR_VAR 0 3
15218: PUSH
15219: CALL_OW 45
15223: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
15224: LD_VAR 0 3
15228: PPUSH
15229: LD_INT 1
15231: PPUSH
15232: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
15236: LD_VAR 0 3
15240: PPUSH
15241: LD_INT 25
15243: PPUSH
15244: LD_INT 0
15246: PPUSH
15247: CALL_OW 49
// defenders := defenders ^ veh ;
15251: LD_ADDR_EXP 20
15255: PUSH
15256: LD_EXP 20
15260: PUSH
15261: LD_VAR 0 3
15265: ADD
15266: ST_TO_ADDR
// end ;
15267: GO 15192
15269: POP
15270: POP
// end ; end ;
15271: PPOPN 3
15273: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
15274: LD_VAR 0 2
15278: PUSH
15279: LD_EXP 16
15283: EQUAL
15284: IFFALSE 15295
// RemoveUnit ( Powell ) ;
15286: LD_EXP 16
15290: PPUSH
15291: CALL_OW 64
// end ;
15295: PPOPN 2
15297: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
15298: LD_VAR 0 1
15302: PPUSH
15303: CALL 31208 0 1
// end ; end_of_file end_of_file
15307: PPOPN 1
15309: END
// export globalGameSaveCounter ; every 0 0$1 do
15310: GO 15312
15312: DISABLE
// begin enable ;
15313: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15314: LD_STRING updateTimer(
15316: PUSH
15317: LD_OWVAR 1
15321: STR
15322: PUSH
15323: LD_STRING );
15325: STR
15326: PPUSH
15327: CALL_OW 559
// end ;
15331: END
// every 0 0$1 do
15332: GO 15334
15334: DISABLE
// begin globalGameSaveCounter := 0 ;
15335: LD_ADDR_EXP 39
15339: PUSH
15340: LD_INT 0
15342: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
15343: LD_STRING setGameSaveCounter(0)
15345: PPUSH
15346: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
15350: LD_STRING initStreamRollete();
15352: PPUSH
15353: CALL_OW 559
// InitStreamMode ;
15357: CALL 16683 0 0
// DefineStreamItems ( false ) ;
15361: LD_INT 0
15363: PPUSH
15364: CALL 17147 0 1
// end ;
15368: END
// export function SOS_MapStart ( ) ; begin
15369: LD_INT 0
15371: PPUSH
// if streamModeActive then
15372: LD_EXP 40
15376: IFFALSE 15385
// DefineStreamItems ( true ) ;
15378: LD_INT 1
15380: PPUSH
15381: CALL 17147 0 1
// UpdateLuaVariables ( ) ;
15385: CALL 15402 0 0
// UpdateFactoryWaypoints ( ) ;
15389: CALL 30008 0 0
// UpdateWarehouseGatheringPoints ( ) ;
15393: CALL 30265 0 0
// end ;
15397: LD_VAR 0 1
15401: RET
// function UpdateLuaVariables ( ) ; begin
15402: LD_INT 0
15404: PPUSH
// if globalGameSaveCounter then
15405: LD_EXP 39
15409: IFFALSE 15443
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
15411: LD_ADDR_EXP 39
15415: PUSH
15416: LD_EXP 39
15420: PPUSH
15421: CALL 74222 0 1
15425: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
15426: LD_STRING setGameSaveCounter(
15428: PUSH
15429: LD_EXP 39
15433: STR
15434: PUSH
15435: LD_STRING )
15437: STR
15438: PPUSH
15439: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
15443: LD_STRING setGameDifficulty(
15445: PUSH
15446: LD_OWVAR 67
15450: STR
15451: PUSH
15452: LD_STRING )
15454: STR
15455: PPUSH
15456: CALL_OW 559
// end ;
15460: LD_VAR 0 1
15464: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15465: LD_INT 0
15467: PPUSH
// if p2 = stream_mode then
15468: LD_VAR 0 2
15472: PUSH
15473: LD_INT 100
15475: EQUAL
15476: IFFALSE 16479
// begin if not StreamModeActive then
15478: LD_EXP 40
15482: NOT
15483: IFFALSE 15493
// StreamModeActive := true ;
15485: LD_ADDR_EXP 40
15489: PUSH
15490: LD_INT 1
15492: ST_TO_ADDR
// if p3 = 0 then
15493: LD_VAR 0 3
15497: PUSH
15498: LD_INT 0
15500: EQUAL
15501: IFFALSE 15507
// InitStreamMode ;
15503: CALL 16683 0 0
// if p3 = 1 then
15507: LD_VAR 0 3
15511: PUSH
15512: LD_INT 1
15514: EQUAL
15515: IFFALSE 15525
// sRocket := true ;
15517: LD_ADDR_EXP 45
15521: PUSH
15522: LD_INT 1
15524: ST_TO_ADDR
// if p3 = 2 then
15525: LD_VAR 0 3
15529: PUSH
15530: LD_INT 2
15532: EQUAL
15533: IFFALSE 15543
// sSpeed := true ;
15535: LD_ADDR_EXP 44
15539: PUSH
15540: LD_INT 1
15542: ST_TO_ADDR
// if p3 = 3 then
15543: LD_VAR 0 3
15547: PUSH
15548: LD_INT 3
15550: EQUAL
15551: IFFALSE 15561
// sEngine := true ;
15553: LD_ADDR_EXP 46
15557: PUSH
15558: LD_INT 1
15560: ST_TO_ADDR
// if p3 = 4 then
15561: LD_VAR 0 3
15565: PUSH
15566: LD_INT 4
15568: EQUAL
15569: IFFALSE 15579
// sSpec := true ;
15571: LD_ADDR_EXP 43
15575: PUSH
15576: LD_INT 1
15578: ST_TO_ADDR
// if p3 = 5 then
15579: LD_VAR 0 3
15583: PUSH
15584: LD_INT 5
15586: EQUAL
15587: IFFALSE 15597
// sLevel := true ;
15589: LD_ADDR_EXP 47
15593: PUSH
15594: LD_INT 1
15596: ST_TO_ADDR
// if p3 = 6 then
15597: LD_VAR 0 3
15601: PUSH
15602: LD_INT 6
15604: EQUAL
15605: IFFALSE 15615
// sArmoury := true ;
15607: LD_ADDR_EXP 48
15611: PUSH
15612: LD_INT 1
15614: ST_TO_ADDR
// if p3 = 7 then
15615: LD_VAR 0 3
15619: PUSH
15620: LD_INT 7
15622: EQUAL
15623: IFFALSE 15633
// sRadar := true ;
15625: LD_ADDR_EXP 49
15629: PUSH
15630: LD_INT 1
15632: ST_TO_ADDR
// if p3 = 8 then
15633: LD_VAR 0 3
15637: PUSH
15638: LD_INT 8
15640: EQUAL
15641: IFFALSE 15651
// sBunker := true ;
15643: LD_ADDR_EXP 50
15647: PUSH
15648: LD_INT 1
15650: ST_TO_ADDR
// if p3 = 9 then
15651: LD_VAR 0 3
15655: PUSH
15656: LD_INT 9
15658: EQUAL
15659: IFFALSE 15669
// sHack := true ;
15661: LD_ADDR_EXP 51
15665: PUSH
15666: LD_INT 1
15668: ST_TO_ADDR
// if p3 = 10 then
15669: LD_VAR 0 3
15673: PUSH
15674: LD_INT 10
15676: EQUAL
15677: IFFALSE 15687
// sFire := true ;
15679: LD_ADDR_EXP 52
15683: PUSH
15684: LD_INT 1
15686: ST_TO_ADDR
// if p3 = 11 then
15687: LD_VAR 0 3
15691: PUSH
15692: LD_INT 11
15694: EQUAL
15695: IFFALSE 15705
// sRefresh := true ;
15697: LD_ADDR_EXP 53
15701: PUSH
15702: LD_INT 1
15704: ST_TO_ADDR
// if p3 = 12 then
15705: LD_VAR 0 3
15709: PUSH
15710: LD_INT 12
15712: EQUAL
15713: IFFALSE 15723
// sExp := true ;
15715: LD_ADDR_EXP 54
15719: PUSH
15720: LD_INT 1
15722: ST_TO_ADDR
// if p3 = 13 then
15723: LD_VAR 0 3
15727: PUSH
15728: LD_INT 13
15730: EQUAL
15731: IFFALSE 15741
// sDepot := true ;
15733: LD_ADDR_EXP 55
15737: PUSH
15738: LD_INT 1
15740: ST_TO_ADDR
// if p3 = 14 then
15741: LD_VAR 0 3
15745: PUSH
15746: LD_INT 14
15748: EQUAL
15749: IFFALSE 15759
// sFlag := true ;
15751: LD_ADDR_EXP 56
15755: PUSH
15756: LD_INT 1
15758: ST_TO_ADDR
// if p3 = 15 then
15759: LD_VAR 0 3
15763: PUSH
15764: LD_INT 15
15766: EQUAL
15767: IFFALSE 15777
// sKamikadze := true ;
15769: LD_ADDR_EXP 64
15773: PUSH
15774: LD_INT 1
15776: ST_TO_ADDR
// if p3 = 16 then
15777: LD_VAR 0 3
15781: PUSH
15782: LD_INT 16
15784: EQUAL
15785: IFFALSE 15795
// sTroll := true ;
15787: LD_ADDR_EXP 65
15791: PUSH
15792: LD_INT 1
15794: ST_TO_ADDR
// if p3 = 17 then
15795: LD_VAR 0 3
15799: PUSH
15800: LD_INT 17
15802: EQUAL
15803: IFFALSE 15813
// sSlow := true ;
15805: LD_ADDR_EXP 66
15809: PUSH
15810: LD_INT 1
15812: ST_TO_ADDR
// if p3 = 18 then
15813: LD_VAR 0 3
15817: PUSH
15818: LD_INT 18
15820: EQUAL
15821: IFFALSE 15831
// sLack := true ;
15823: LD_ADDR_EXP 67
15827: PUSH
15828: LD_INT 1
15830: ST_TO_ADDR
// if p3 = 19 then
15831: LD_VAR 0 3
15835: PUSH
15836: LD_INT 19
15838: EQUAL
15839: IFFALSE 15849
// sTank := true ;
15841: LD_ADDR_EXP 69
15845: PUSH
15846: LD_INT 1
15848: ST_TO_ADDR
// if p3 = 20 then
15849: LD_VAR 0 3
15853: PUSH
15854: LD_INT 20
15856: EQUAL
15857: IFFALSE 15867
// sRemote := true ;
15859: LD_ADDR_EXP 70
15863: PUSH
15864: LD_INT 1
15866: ST_TO_ADDR
// if p3 = 21 then
15867: LD_VAR 0 3
15871: PUSH
15872: LD_INT 21
15874: EQUAL
15875: IFFALSE 15885
// sPowell := true ;
15877: LD_ADDR_EXP 71
15881: PUSH
15882: LD_INT 1
15884: ST_TO_ADDR
// if p3 = 22 then
15885: LD_VAR 0 3
15889: PUSH
15890: LD_INT 22
15892: EQUAL
15893: IFFALSE 15903
// sTeleport := true ;
15895: LD_ADDR_EXP 74
15899: PUSH
15900: LD_INT 1
15902: ST_TO_ADDR
// if p3 = 23 then
15903: LD_VAR 0 3
15907: PUSH
15908: LD_INT 23
15910: EQUAL
15911: IFFALSE 15921
// sOilTower := true ;
15913: LD_ADDR_EXP 76
15917: PUSH
15918: LD_INT 1
15920: ST_TO_ADDR
// if p3 = 24 then
15921: LD_VAR 0 3
15925: PUSH
15926: LD_INT 24
15928: EQUAL
15929: IFFALSE 15939
// sShovel := true ;
15931: LD_ADDR_EXP 77
15935: PUSH
15936: LD_INT 1
15938: ST_TO_ADDR
// if p3 = 25 then
15939: LD_VAR 0 3
15943: PUSH
15944: LD_INT 25
15946: EQUAL
15947: IFFALSE 15957
// sSheik := true ;
15949: LD_ADDR_EXP 78
15953: PUSH
15954: LD_INT 1
15956: ST_TO_ADDR
// if p3 = 26 then
15957: LD_VAR 0 3
15961: PUSH
15962: LD_INT 26
15964: EQUAL
15965: IFFALSE 15975
// sEarthquake := true ;
15967: LD_ADDR_EXP 80
15971: PUSH
15972: LD_INT 1
15974: ST_TO_ADDR
// if p3 = 27 then
15975: LD_VAR 0 3
15979: PUSH
15980: LD_INT 27
15982: EQUAL
15983: IFFALSE 15993
// sAI := true ;
15985: LD_ADDR_EXP 81
15989: PUSH
15990: LD_INT 1
15992: ST_TO_ADDR
// if p3 = 28 then
15993: LD_VAR 0 3
15997: PUSH
15998: LD_INT 28
16000: EQUAL
16001: IFFALSE 16011
// sCargo := true ;
16003: LD_ADDR_EXP 84
16007: PUSH
16008: LD_INT 1
16010: ST_TO_ADDR
// if p3 = 29 then
16011: LD_VAR 0 3
16015: PUSH
16016: LD_INT 29
16018: EQUAL
16019: IFFALSE 16029
// sDLaser := true ;
16021: LD_ADDR_EXP 85
16025: PUSH
16026: LD_INT 1
16028: ST_TO_ADDR
// if p3 = 30 then
16029: LD_VAR 0 3
16033: PUSH
16034: LD_INT 30
16036: EQUAL
16037: IFFALSE 16047
// sExchange := true ;
16039: LD_ADDR_EXP 86
16043: PUSH
16044: LD_INT 1
16046: ST_TO_ADDR
// if p3 = 31 then
16047: LD_VAR 0 3
16051: PUSH
16052: LD_INT 31
16054: EQUAL
16055: IFFALSE 16065
// sFac := true ;
16057: LD_ADDR_EXP 87
16061: PUSH
16062: LD_INT 1
16064: ST_TO_ADDR
// if p3 = 32 then
16065: LD_VAR 0 3
16069: PUSH
16070: LD_INT 32
16072: EQUAL
16073: IFFALSE 16083
// sPower := true ;
16075: LD_ADDR_EXP 88
16079: PUSH
16080: LD_INT 1
16082: ST_TO_ADDR
// if p3 = 33 then
16083: LD_VAR 0 3
16087: PUSH
16088: LD_INT 33
16090: EQUAL
16091: IFFALSE 16101
// sRandom := true ;
16093: LD_ADDR_EXP 89
16097: PUSH
16098: LD_INT 1
16100: ST_TO_ADDR
// if p3 = 34 then
16101: LD_VAR 0 3
16105: PUSH
16106: LD_INT 34
16108: EQUAL
16109: IFFALSE 16119
// sShield := true ;
16111: LD_ADDR_EXP 90
16115: PUSH
16116: LD_INT 1
16118: ST_TO_ADDR
// if p3 = 35 then
16119: LD_VAR 0 3
16123: PUSH
16124: LD_INT 35
16126: EQUAL
16127: IFFALSE 16137
// sTime := true ;
16129: LD_ADDR_EXP 91
16133: PUSH
16134: LD_INT 1
16136: ST_TO_ADDR
// if p3 = 36 then
16137: LD_VAR 0 3
16141: PUSH
16142: LD_INT 36
16144: EQUAL
16145: IFFALSE 16155
// sTools := true ;
16147: LD_ADDR_EXP 92
16151: PUSH
16152: LD_INT 1
16154: ST_TO_ADDR
// if p3 = 101 then
16155: LD_VAR 0 3
16159: PUSH
16160: LD_INT 101
16162: EQUAL
16163: IFFALSE 16173
// sSold := true ;
16165: LD_ADDR_EXP 57
16169: PUSH
16170: LD_INT 1
16172: ST_TO_ADDR
// if p3 = 102 then
16173: LD_VAR 0 3
16177: PUSH
16178: LD_INT 102
16180: EQUAL
16181: IFFALSE 16191
// sDiff := true ;
16183: LD_ADDR_EXP 58
16187: PUSH
16188: LD_INT 1
16190: ST_TO_ADDR
// if p3 = 103 then
16191: LD_VAR 0 3
16195: PUSH
16196: LD_INT 103
16198: EQUAL
16199: IFFALSE 16209
// sFog := true ;
16201: LD_ADDR_EXP 61
16205: PUSH
16206: LD_INT 1
16208: ST_TO_ADDR
// if p3 = 104 then
16209: LD_VAR 0 3
16213: PUSH
16214: LD_INT 104
16216: EQUAL
16217: IFFALSE 16227
// sReset := true ;
16219: LD_ADDR_EXP 62
16223: PUSH
16224: LD_INT 1
16226: ST_TO_ADDR
// if p3 = 105 then
16227: LD_VAR 0 3
16231: PUSH
16232: LD_INT 105
16234: EQUAL
16235: IFFALSE 16245
// sSun := true ;
16237: LD_ADDR_EXP 63
16241: PUSH
16242: LD_INT 1
16244: ST_TO_ADDR
// if p3 = 106 then
16245: LD_VAR 0 3
16249: PUSH
16250: LD_INT 106
16252: EQUAL
16253: IFFALSE 16263
// sTiger := true ;
16255: LD_ADDR_EXP 59
16259: PUSH
16260: LD_INT 1
16262: ST_TO_ADDR
// if p3 = 107 then
16263: LD_VAR 0 3
16267: PUSH
16268: LD_INT 107
16270: EQUAL
16271: IFFALSE 16281
// sBomb := true ;
16273: LD_ADDR_EXP 60
16277: PUSH
16278: LD_INT 1
16280: ST_TO_ADDR
// if p3 = 108 then
16281: LD_VAR 0 3
16285: PUSH
16286: LD_INT 108
16288: EQUAL
16289: IFFALSE 16299
// sWound := true ;
16291: LD_ADDR_EXP 68
16295: PUSH
16296: LD_INT 1
16298: ST_TO_ADDR
// if p3 = 109 then
16299: LD_VAR 0 3
16303: PUSH
16304: LD_INT 109
16306: EQUAL
16307: IFFALSE 16317
// sBetray := true ;
16309: LD_ADDR_EXP 72
16313: PUSH
16314: LD_INT 1
16316: ST_TO_ADDR
// if p3 = 110 then
16317: LD_VAR 0 3
16321: PUSH
16322: LD_INT 110
16324: EQUAL
16325: IFFALSE 16335
// sContamin := true ;
16327: LD_ADDR_EXP 73
16331: PUSH
16332: LD_INT 1
16334: ST_TO_ADDR
// if p3 = 111 then
16335: LD_VAR 0 3
16339: PUSH
16340: LD_INT 111
16342: EQUAL
16343: IFFALSE 16353
// sOil := true ;
16345: LD_ADDR_EXP 75
16349: PUSH
16350: LD_INT 1
16352: ST_TO_ADDR
// if p3 = 112 then
16353: LD_VAR 0 3
16357: PUSH
16358: LD_INT 112
16360: EQUAL
16361: IFFALSE 16371
// sStu := true ;
16363: LD_ADDR_EXP 79
16367: PUSH
16368: LD_INT 1
16370: ST_TO_ADDR
// if p3 = 113 then
16371: LD_VAR 0 3
16375: PUSH
16376: LD_INT 113
16378: EQUAL
16379: IFFALSE 16389
// sBazooka := true ;
16381: LD_ADDR_EXP 82
16385: PUSH
16386: LD_INT 1
16388: ST_TO_ADDR
// if p3 = 114 then
16389: LD_VAR 0 3
16393: PUSH
16394: LD_INT 114
16396: EQUAL
16397: IFFALSE 16407
// sMortar := true ;
16399: LD_ADDR_EXP 83
16403: PUSH
16404: LD_INT 1
16406: ST_TO_ADDR
// if p3 = 115 then
16407: LD_VAR 0 3
16411: PUSH
16412: LD_INT 115
16414: EQUAL
16415: IFFALSE 16425
// sRanger := true ;
16417: LD_ADDR_EXP 93
16421: PUSH
16422: LD_INT 1
16424: ST_TO_ADDR
// if p3 = 116 then
16425: LD_VAR 0 3
16429: PUSH
16430: LD_INT 116
16432: EQUAL
16433: IFFALSE 16443
// sComputer := true ;
16435: LD_ADDR_EXP 94
16439: PUSH
16440: LD_INT 1
16442: ST_TO_ADDR
// if p3 = 117 then
16443: LD_VAR 0 3
16447: PUSH
16448: LD_INT 117
16450: EQUAL
16451: IFFALSE 16461
// s30 := true ;
16453: LD_ADDR_EXP 95
16457: PUSH
16458: LD_INT 1
16460: ST_TO_ADDR
// if p3 = 118 then
16461: LD_VAR 0 3
16465: PUSH
16466: LD_INT 118
16468: EQUAL
16469: IFFALSE 16479
// s60 := true ;
16471: LD_ADDR_EXP 96
16475: PUSH
16476: LD_INT 1
16478: ST_TO_ADDR
// end ; if p2 = hack_mode then
16479: LD_VAR 0 2
16483: PUSH
16484: LD_INT 101
16486: EQUAL
16487: IFFALSE 16615
// begin case p3 of 1 :
16489: LD_VAR 0 3
16493: PUSH
16494: LD_INT 1
16496: DOUBLE
16497: EQUAL
16498: IFTRUE 16502
16500: GO 16509
16502: POP
// hHackUnlimitedResources ; 2 :
16503: CALL 28754 0 0
16507: GO 16615
16509: LD_INT 2
16511: DOUBLE
16512: EQUAL
16513: IFTRUE 16517
16515: GO 16524
16517: POP
// hHackSetLevel10 ; 3 :
16518: CALL 28887 0 0
16522: GO 16615
16524: LD_INT 3
16526: DOUBLE
16527: EQUAL
16528: IFTRUE 16532
16530: GO 16539
16532: POP
// hHackSetLevel10YourUnits ; 4 :
16533: CALL 28972 0 0
16537: GO 16615
16539: LD_INT 4
16541: DOUBLE
16542: EQUAL
16543: IFTRUE 16547
16545: GO 16554
16547: POP
// hHackInvincible ; 5 :
16548: CALL 29420 0 0
16552: GO 16615
16554: LD_INT 5
16556: DOUBLE
16557: EQUAL
16558: IFTRUE 16562
16560: GO 16569
16562: POP
// hHackInvisible ; 6 :
16563: CALL 29531 0 0
16567: GO 16615
16569: LD_INT 6
16571: DOUBLE
16572: EQUAL
16573: IFTRUE 16577
16575: GO 16584
16577: POP
// hHackChangeYourSide ; 7 :
16578: CALL 29588 0 0
16582: GO 16615
16584: LD_INT 7
16586: DOUBLE
16587: EQUAL
16588: IFTRUE 16592
16590: GO 16599
16592: POP
// hHackChangeUnitSide ; 8 :
16593: CALL 29630 0 0
16597: GO 16615
16599: LD_INT 8
16601: DOUBLE
16602: EQUAL
16603: IFTRUE 16607
16605: GO 16614
16607: POP
// hHackFog ; end ;
16608: CALL 29731 0 0
16612: GO 16615
16614: POP
// end ; if p2 = game_save_mode then
16615: LD_VAR 0 2
16619: PUSH
16620: LD_INT 102
16622: EQUAL
16623: IFFALSE 16678
// begin if p3 = 1 then
16625: LD_VAR 0 3
16629: PUSH
16630: LD_INT 1
16632: EQUAL
16633: IFFALSE 16645
// globalGameSaveCounter := p4 ;
16635: LD_ADDR_EXP 39
16639: PUSH
16640: LD_VAR 0 4
16644: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
16645: LD_VAR 0 3
16649: PUSH
16650: LD_INT 2
16652: EQUAL
16653: PUSH
16654: LD_EXP 39
16658: AND
16659: IFFALSE 16678
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16661: LD_STRING setGameSaveCounter(
16663: PUSH
16664: LD_EXP 39
16668: STR
16669: PUSH
16670: LD_STRING )
16672: STR
16673: PPUSH
16674: CALL_OW 559
// end ; end ;
16678: LD_VAR 0 7
16682: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
16683: LD_INT 0
16685: PPUSH
// streamModeActive := false ;
16686: LD_ADDR_EXP 40
16690: PUSH
16691: LD_INT 0
16693: ST_TO_ADDR
// normalCounter := 36 ;
16694: LD_ADDR_EXP 41
16698: PUSH
16699: LD_INT 36
16701: ST_TO_ADDR
// hardcoreCounter := 18 ;
16702: LD_ADDR_EXP 42
16706: PUSH
16707: LD_INT 18
16709: ST_TO_ADDR
// sRocket := false ;
16710: LD_ADDR_EXP 45
16714: PUSH
16715: LD_INT 0
16717: ST_TO_ADDR
// sSpeed := false ;
16718: LD_ADDR_EXP 44
16722: PUSH
16723: LD_INT 0
16725: ST_TO_ADDR
// sEngine := false ;
16726: LD_ADDR_EXP 46
16730: PUSH
16731: LD_INT 0
16733: ST_TO_ADDR
// sSpec := false ;
16734: LD_ADDR_EXP 43
16738: PUSH
16739: LD_INT 0
16741: ST_TO_ADDR
// sLevel := false ;
16742: LD_ADDR_EXP 47
16746: PUSH
16747: LD_INT 0
16749: ST_TO_ADDR
// sArmoury := false ;
16750: LD_ADDR_EXP 48
16754: PUSH
16755: LD_INT 0
16757: ST_TO_ADDR
// sRadar := false ;
16758: LD_ADDR_EXP 49
16762: PUSH
16763: LD_INT 0
16765: ST_TO_ADDR
// sBunker := false ;
16766: LD_ADDR_EXP 50
16770: PUSH
16771: LD_INT 0
16773: ST_TO_ADDR
// sHack := false ;
16774: LD_ADDR_EXP 51
16778: PUSH
16779: LD_INT 0
16781: ST_TO_ADDR
// sFire := false ;
16782: LD_ADDR_EXP 52
16786: PUSH
16787: LD_INT 0
16789: ST_TO_ADDR
// sRefresh := false ;
16790: LD_ADDR_EXP 53
16794: PUSH
16795: LD_INT 0
16797: ST_TO_ADDR
// sExp := false ;
16798: LD_ADDR_EXP 54
16802: PUSH
16803: LD_INT 0
16805: ST_TO_ADDR
// sDepot := false ;
16806: LD_ADDR_EXP 55
16810: PUSH
16811: LD_INT 0
16813: ST_TO_ADDR
// sFlag := false ;
16814: LD_ADDR_EXP 56
16818: PUSH
16819: LD_INT 0
16821: ST_TO_ADDR
// sKamikadze := false ;
16822: LD_ADDR_EXP 64
16826: PUSH
16827: LD_INT 0
16829: ST_TO_ADDR
// sTroll := false ;
16830: LD_ADDR_EXP 65
16834: PUSH
16835: LD_INT 0
16837: ST_TO_ADDR
// sSlow := false ;
16838: LD_ADDR_EXP 66
16842: PUSH
16843: LD_INT 0
16845: ST_TO_ADDR
// sLack := false ;
16846: LD_ADDR_EXP 67
16850: PUSH
16851: LD_INT 0
16853: ST_TO_ADDR
// sTank := false ;
16854: LD_ADDR_EXP 69
16858: PUSH
16859: LD_INT 0
16861: ST_TO_ADDR
// sRemote := false ;
16862: LD_ADDR_EXP 70
16866: PUSH
16867: LD_INT 0
16869: ST_TO_ADDR
// sPowell := false ;
16870: LD_ADDR_EXP 71
16874: PUSH
16875: LD_INT 0
16877: ST_TO_ADDR
// sTeleport := false ;
16878: LD_ADDR_EXP 74
16882: PUSH
16883: LD_INT 0
16885: ST_TO_ADDR
// sOilTower := false ;
16886: LD_ADDR_EXP 76
16890: PUSH
16891: LD_INT 0
16893: ST_TO_ADDR
// sShovel := false ;
16894: LD_ADDR_EXP 77
16898: PUSH
16899: LD_INT 0
16901: ST_TO_ADDR
// sSheik := false ;
16902: LD_ADDR_EXP 78
16906: PUSH
16907: LD_INT 0
16909: ST_TO_ADDR
// sEarthquake := false ;
16910: LD_ADDR_EXP 80
16914: PUSH
16915: LD_INT 0
16917: ST_TO_ADDR
// sAI := false ;
16918: LD_ADDR_EXP 81
16922: PUSH
16923: LD_INT 0
16925: ST_TO_ADDR
// sCargo := false ;
16926: LD_ADDR_EXP 84
16930: PUSH
16931: LD_INT 0
16933: ST_TO_ADDR
// sDLaser := false ;
16934: LD_ADDR_EXP 85
16938: PUSH
16939: LD_INT 0
16941: ST_TO_ADDR
// sExchange := false ;
16942: LD_ADDR_EXP 86
16946: PUSH
16947: LD_INT 0
16949: ST_TO_ADDR
// sFac := false ;
16950: LD_ADDR_EXP 87
16954: PUSH
16955: LD_INT 0
16957: ST_TO_ADDR
// sPower := false ;
16958: LD_ADDR_EXP 88
16962: PUSH
16963: LD_INT 0
16965: ST_TO_ADDR
// sRandom := false ;
16966: LD_ADDR_EXP 89
16970: PUSH
16971: LD_INT 0
16973: ST_TO_ADDR
// sShield := false ;
16974: LD_ADDR_EXP 90
16978: PUSH
16979: LD_INT 0
16981: ST_TO_ADDR
// sTime := false ;
16982: LD_ADDR_EXP 91
16986: PUSH
16987: LD_INT 0
16989: ST_TO_ADDR
// sTools := false ;
16990: LD_ADDR_EXP 92
16994: PUSH
16995: LD_INT 0
16997: ST_TO_ADDR
// sSold := false ;
16998: LD_ADDR_EXP 57
17002: PUSH
17003: LD_INT 0
17005: ST_TO_ADDR
// sDiff := false ;
17006: LD_ADDR_EXP 58
17010: PUSH
17011: LD_INT 0
17013: ST_TO_ADDR
// sFog := false ;
17014: LD_ADDR_EXP 61
17018: PUSH
17019: LD_INT 0
17021: ST_TO_ADDR
// sReset := false ;
17022: LD_ADDR_EXP 62
17026: PUSH
17027: LD_INT 0
17029: ST_TO_ADDR
// sSun := false ;
17030: LD_ADDR_EXP 63
17034: PUSH
17035: LD_INT 0
17037: ST_TO_ADDR
// sTiger := false ;
17038: LD_ADDR_EXP 59
17042: PUSH
17043: LD_INT 0
17045: ST_TO_ADDR
// sBomb := false ;
17046: LD_ADDR_EXP 60
17050: PUSH
17051: LD_INT 0
17053: ST_TO_ADDR
// sWound := false ;
17054: LD_ADDR_EXP 68
17058: PUSH
17059: LD_INT 0
17061: ST_TO_ADDR
// sBetray := false ;
17062: LD_ADDR_EXP 72
17066: PUSH
17067: LD_INT 0
17069: ST_TO_ADDR
// sContamin := false ;
17070: LD_ADDR_EXP 73
17074: PUSH
17075: LD_INT 0
17077: ST_TO_ADDR
// sOil := false ;
17078: LD_ADDR_EXP 75
17082: PUSH
17083: LD_INT 0
17085: ST_TO_ADDR
// sStu := false ;
17086: LD_ADDR_EXP 79
17090: PUSH
17091: LD_INT 0
17093: ST_TO_ADDR
// sBazooka := false ;
17094: LD_ADDR_EXP 82
17098: PUSH
17099: LD_INT 0
17101: ST_TO_ADDR
// sMortar := false ;
17102: LD_ADDR_EXP 83
17106: PUSH
17107: LD_INT 0
17109: ST_TO_ADDR
// sRanger := false ;
17110: LD_ADDR_EXP 93
17114: PUSH
17115: LD_INT 0
17117: ST_TO_ADDR
// sComputer := false ;
17118: LD_ADDR_EXP 94
17122: PUSH
17123: LD_INT 0
17125: ST_TO_ADDR
// s30 := false ;
17126: LD_ADDR_EXP 95
17130: PUSH
17131: LD_INT 0
17133: ST_TO_ADDR
// s60 := false ;
17134: LD_ADDR_EXP 96
17138: PUSH
17139: LD_INT 0
17141: ST_TO_ADDR
// end ;
17142: LD_VAR 0 1
17146: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
17147: LD_INT 0
17149: PPUSH
17150: PPUSH
17151: PPUSH
17152: PPUSH
17153: PPUSH
17154: PPUSH
17155: PPUSH
// result := [ ] ;
17156: LD_ADDR_VAR 0 2
17160: PUSH
17161: EMPTY
17162: ST_TO_ADDR
// if campaign_id = 1 then
17163: LD_OWVAR 69
17167: PUSH
17168: LD_INT 1
17170: EQUAL
17171: IFFALSE 20337
// begin case mission_number of 1 :
17173: LD_OWVAR 70
17177: PUSH
17178: LD_INT 1
17180: DOUBLE
17181: EQUAL
17182: IFTRUE 17186
17184: GO 17262
17186: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
17187: LD_ADDR_VAR 0 2
17191: PUSH
17192: LD_INT 2
17194: PUSH
17195: LD_INT 4
17197: PUSH
17198: LD_INT 11
17200: PUSH
17201: LD_INT 12
17203: PUSH
17204: LD_INT 15
17206: PUSH
17207: LD_INT 16
17209: PUSH
17210: LD_INT 22
17212: PUSH
17213: LD_INT 23
17215: PUSH
17216: LD_INT 26
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 101
17232: PUSH
17233: LD_INT 102
17235: PUSH
17236: LD_INT 106
17238: PUSH
17239: LD_INT 116
17241: PUSH
17242: LD_INT 117
17244: PUSH
17245: LD_INT 118
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: ST_TO_ADDR
17260: GO 20335
17262: LD_INT 2
17264: DOUBLE
17265: EQUAL
17266: IFTRUE 17270
17268: GO 17354
17270: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
17271: LD_ADDR_VAR 0 2
17275: PUSH
17276: LD_INT 2
17278: PUSH
17279: LD_INT 4
17281: PUSH
17282: LD_INT 11
17284: PUSH
17285: LD_INT 12
17287: PUSH
17288: LD_INT 15
17290: PUSH
17291: LD_INT 16
17293: PUSH
17294: LD_INT 22
17296: PUSH
17297: LD_INT 23
17299: PUSH
17300: LD_INT 26
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 101
17316: PUSH
17317: LD_INT 102
17319: PUSH
17320: LD_INT 105
17322: PUSH
17323: LD_INT 106
17325: PUSH
17326: LD_INT 108
17328: PUSH
17329: LD_INT 116
17331: PUSH
17332: LD_INT 117
17334: PUSH
17335: LD_INT 118
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: ST_TO_ADDR
17352: GO 20335
17354: LD_INT 3
17356: DOUBLE
17357: EQUAL
17358: IFTRUE 17362
17360: GO 17450
17362: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17363: LD_ADDR_VAR 0 2
17367: PUSH
17368: LD_INT 2
17370: PUSH
17371: LD_INT 4
17373: PUSH
17374: LD_INT 5
17376: PUSH
17377: LD_INT 11
17379: PUSH
17380: LD_INT 12
17382: PUSH
17383: LD_INT 15
17385: PUSH
17386: LD_INT 16
17388: PUSH
17389: LD_INT 22
17391: PUSH
17392: LD_INT 26
17394: PUSH
17395: LD_INT 36
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: PUSH
17410: LD_INT 101
17412: PUSH
17413: LD_INT 102
17415: PUSH
17416: LD_INT 105
17418: PUSH
17419: LD_INT 106
17421: PUSH
17422: LD_INT 108
17424: PUSH
17425: LD_INT 116
17427: PUSH
17428: LD_INT 117
17430: PUSH
17431: LD_INT 118
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: PUSH
17444: EMPTY
17445: LIST
17446: LIST
17447: ST_TO_ADDR
17448: GO 20335
17450: LD_INT 4
17452: DOUBLE
17453: EQUAL
17454: IFTRUE 17458
17456: GO 17554
17458: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17459: LD_ADDR_VAR 0 2
17463: PUSH
17464: LD_INT 2
17466: PUSH
17467: LD_INT 4
17469: PUSH
17470: LD_INT 5
17472: PUSH
17473: LD_INT 8
17475: PUSH
17476: LD_INT 11
17478: PUSH
17479: LD_INT 12
17481: PUSH
17482: LD_INT 15
17484: PUSH
17485: LD_INT 16
17487: PUSH
17488: LD_INT 22
17490: PUSH
17491: LD_INT 23
17493: PUSH
17494: LD_INT 26
17496: PUSH
17497: LD_INT 36
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 101
17516: PUSH
17517: LD_INT 102
17519: PUSH
17520: LD_INT 105
17522: PUSH
17523: LD_INT 106
17525: PUSH
17526: LD_INT 108
17528: PUSH
17529: LD_INT 116
17531: PUSH
17532: LD_INT 117
17534: PUSH
17535: LD_INT 118
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: ST_TO_ADDR
17552: GO 20335
17554: LD_INT 5
17556: DOUBLE
17557: EQUAL
17558: IFTRUE 17562
17560: GO 17674
17562: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17563: LD_ADDR_VAR 0 2
17567: PUSH
17568: LD_INT 2
17570: PUSH
17571: LD_INT 4
17573: PUSH
17574: LD_INT 5
17576: PUSH
17577: LD_INT 6
17579: PUSH
17580: LD_INT 8
17582: PUSH
17583: LD_INT 11
17585: PUSH
17586: LD_INT 12
17588: PUSH
17589: LD_INT 15
17591: PUSH
17592: LD_INT 16
17594: PUSH
17595: LD_INT 22
17597: PUSH
17598: LD_INT 23
17600: PUSH
17601: LD_INT 25
17603: PUSH
17604: LD_INT 26
17606: PUSH
17607: LD_INT 36
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: PUSH
17626: LD_INT 101
17628: PUSH
17629: LD_INT 102
17631: PUSH
17632: LD_INT 105
17634: PUSH
17635: LD_INT 106
17637: PUSH
17638: LD_INT 108
17640: PUSH
17641: LD_INT 109
17643: PUSH
17644: LD_INT 112
17646: PUSH
17647: LD_INT 116
17649: PUSH
17650: LD_INT 117
17652: PUSH
17653: LD_INT 118
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: PUSH
17668: EMPTY
17669: LIST
17670: LIST
17671: ST_TO_ADDR
17672: GO 20335
17674: LD_INT 6
17676: DOUBLE
17677: EQUAL
17678: IFTRUE 17682
17680: GO 17814
17682: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17683: LD_ADDR_VAR 0 2
17687: PUSH
17688: LD_INT 2
17690: PUSH
17691: LD_INT 4
17693: PUSH
17694: LD_INT 5
17696: PUSH
17697: LD_INT 6
17699: PUSH
17700: LD_INT 8
17702: PUSH
17703: LD_INT 11
17705: PUSH
17706: LD_INT 12
17708: PUSH
17709: LD_INT 15
17711: PUSH
17712: LD_INT 16
17714: PUSH
17715: LD_INT 20
17717: PUSH
17718: LD_INT 21
17720: PUSH
17721: LD_INT 22
17723: PUSH
17724: LD_INT 23
17726: PUSH
17727: LD_INT 25
17729: PUSH
17730: LD_INT 26
17732: PUSH
17733: LD_INT 30
17735: PUSH
17736: LD_INT 31
17738: PUSH
17739: LD_INT 32
17741: PUSH
17742: LD_INT 36
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: PUSH
17766: LD_INT 101
17768: PUSH
17769: LD_INT 102
17771: PUSH
17772: LD_INT 105
17774: PUSH
17775: LD_INT 106
17777: PUSH
17778: LD_INT 108
17780: PUSH
17781: LD_INT 109
17783: PUSH
17784: LD_INT 112
17786: PUSH
17787: LD_INT 116
17789: PUSH
17790: LD_INT 117
17792: PUSH
17793: LD_INT 118
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: ST_TO_ADDR
17812: GO 20335
17814: LD_INT 7
17816: DOUBLE
17817: EQUAL
17818: IFTRUE 17822
17820: GO 17934
17822: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17823: LD_ADDR_VAR 0 2
17827: PUSH
17828: LD_INT 2
17830: PUSH
17831: LD_INT 4
17833: PUSH
17834: LD_INT 5
17836: PUSH
17837: LD_INT 7
17839: PUSH
17840: LD_INT 11
17842: PUSH
17843: LD_INT 12
17845: PUSH
17846: LD_INT 15
17848: PUSH
17849: LD_INT 16
17851: PUSH
17852: LD_INT 20
17854: PUSH
17855: LD_INT 21
17857: PUSH
17858: LD_INT 22
17860: PUSH
17861: LD_INT 23
17863: PUSH
17864: LD_INT 25
17866: PUSH
17867: LD_INT 26
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: PUSH
17886: LD_INT 101
17888: PUSH
17889: LD_INT 102
17891: PUSH
17892: LD_INT 103
17894: PUSH
17895: LD_INT 105
17897: PUSH
17898: LD_INT 106
17900: PUSH
17901: LD_INT 108
17903: PUSH
17904: LD_INT 112
17906: PUSH
17907: LD_INT 116
17909: PUSH
17910: LD_INT 117
17912: PUSH
17913: LD_INT 118
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: ST_TO_ADDR
17932: GO 20335
17934: LD_INT 8
17936: DOUBLE
17937: EQUAL
17938: IFTRUE 17942
17940: GO 18082
17942: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17943: LD_ADDR_VAR 0 2
17947: PUSH
17948: LD_INT 2
17950: PUSH
17951: LD_INT 4
17953: PUSH
17954: LD_INT 5
17956: PUSH
17957: LD_INT 6
17959: PUSH
17960: LD_INT 7
17962: PUSH
17963: LD_INT 8
17965: PUSH
17966: LD_INT 11
17968: PUSH
17969: LD_INT 12
17971: PUSH
17972: LD_INT 15
17974: PUSH
17975: LD_INT 16
17977: PUSH
17978: LD_INT 20
17980: PUSH
17981: LD_INT 21
17983: PUSH
17984: LD_INT 22
17986: PUSH
17987: LD_INT 23
17989: PUSH
17990: LD_INT 25
17992: PUSH
17993: LD_INT 26
17995: PUSH
17996: LD_INT 30
17998: PUSH
17999: LD_INT 31
18001: PUSH
18002: LD_INT 32
18004: PUSH
18005: LD_INT 36
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: LIST
18029: PUSH
18030: LD_INT 101
18032: PUSH
18033: LD_INT 102
18035: PUSH
18036: LD_INT 103
18038: PUSH
18039: LD_INT 105
18041: PUSH
18042: LD_INT 106
18044: PUSH
18045: LD_INT 108
18047: PUSH
18048: LD_INT 109
18050: PUSH
18051: LD_INT 112
18053: PUSH
18054: LD_INT 116
18056: PUSH
18057: LD_INT 117
18059: PUSH
18060: LD_INT 118
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: ST_TO_ADDR
18080: GO 20335
18082: LD_INT 9
18084: DOUBLE
18085: EQUAL
18086: IFTRUE 18090
18088: GO 18238
18090: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
18091: LD_ADDR_VAR 0 2
18095: PUSH
18096: LD_INT 2
18098: PUSH
18099: LD_INT 4
18101: PUSH
18102: LD_INT 5
18104: PUSH
18105: LD_INT 6
18107: PUSH
18108: LD_INT 7
18110: PUSH
18111: LD_INT 8
18113: PUSH
18114: LD_INT 11
18116: PUSH
18117: LD_INT 12
18119: PUSH
18120: LD_INT 15
18122: PUSH
18123: LD_INT 16
18125: PUSH
18126: LD_INT 20
18128: PUSH
18129: LD_INT 21
18131: PUSH
18132: LD_INT 22
18134: PUSH
18135: LD_INT 23
18137: PUSH
18138: LD_INT 25
18140: PUSH
18141: LD_INT 26
18143: PUSH
18144: LD_INT 28
18146: PUSH
18147: LD_INT 30
18149: PUSH
18150: LD_INT 31
18152: PUSH
18153: LD_INT 32
18155: PUSH
18156: LD_INT 36
18158: PUSH
18159: EMPTY
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 101
18184: PUSH
18185: LD_INT 102
18187: PUSH
18188: LD_INT 103
18190: PUSH
18191: LD_INT 105
18193: PUSH
18194: LD_INT 106
18196: PUSH
18197: LD_INT 108
18199: PUSH
18200: LD_INT 109
18202: PUSH
18203: LD_INT 112
18205: PUSH
18206: LD_INT 114
18208: PUSH
18209: LD_INT 116
18211: PUSH
18212: LD_INT 117
18214: PUSH
18215: LD_INT 118
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: ST_TO_ADDR
18236: GO 20335
18238: LD_INT 10
18240: DOUBLE
18241: EQUAL
18242: IFTRUE 18246
18244: GO 18442
18246: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
18247: LD_ADDR_VAR 0 2
18251: PUSH
18252: LD_INT 2
18254: PUSH
18255: LD_INT 4
18257: PUSH
18258: LD_INT 5
18260: PUSH
18261: LD_INT 6
18263: PUSH
18264: LD_INT 7
18266: PUSH
18267: LD_INT 8
18269: PUSH
18270: LD_INT 9
18272: PUSH
18273: LD_INT 10
18275: PUSH
18276: LD_INT 11
18278: PUSH
18279: LD_INT 12
18281: PUSH
18282: LD_INT 13
18284: PUSH
18285: LD_INT 14
18287: PUSH
18288: LD_INT 15
18290: PUSH
18291: LD_INT 16
18293: PUSH
18294: LD_INT 17
18296: PUSH
18297: LD_INT 18
18299: PUSH
18300: LD_INT 19
18302: PUSH
18303: LD_INT 20
18305: PUSH
18306: LD_INT 21
18308: PUSH
18309: LD_INT 22
18311: PUSH
18312: LD_INT 23
18314: PUSH
18315: LD_INT 24
18317: PUSH
18318: LD_INT 25
18320: PUSH
18321: LD_INT 26
18323: PUSH
18324: LD_INT 28
18326: PUSH
18327: LD_INT 30
18329: PUSH
18330: LD_INT 31
18332: PUSH
18333: LD_INT 32
18335: PUSH
18336: LD_INT 36
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: PUSH
18370: LD_INT 101
18372: PUSH
18373: LD_INT 102
18375: PUSH
18376: LD_INT 103
18378: PUSH
18379: LD_INT 104
18381: PUSH
18382: LD_INT 105
18384: PUSH
18385: LD_INT 106
18387: PUSH
18388: LD_INT 107
18390: PUSH
18391: LD_INT 108
18393: PUSH
18394: LD_INT 109
18396: PUSH
18397: LD_INT 110
18399: PUSH
18400: LD_INT 111
18402: PUSH
18403: LD_INT 112
18405: PUSH
18406: LD_INT 114
18408: PUSH
18409: LD_INT 116
18411: PUSH
18412: LD_INT 117
18414: PUSH
18415: LD_INT 118
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: ST_TO_ADDR
18440: GO 20335
18442: LD_INT 11
18444: DOUBLE
18445: EQUAL
18446: IFTRUE 18450
18448: GO 18654
18450: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18451: LD_ADDR_VAR 0 2
18455: PUSH
18456: LD_INT 2
18458: PUSH
18459: LD_INT 3
18461: PUSH
18462: LD_INT 4
18464: PUSH
18465: LD_INT 5
18467: PUSH
18468: LD_INT 6
18470: PUSH
18471: LD_INT 7
18473: PUSH
18474: LD_INT 8
18476: PUSH
18477: LD_INT 9
18479: PUSH
18480: LD_INT 10
18482: PUSH
18483: LD_INT 11
18485: PUSH
18486: LD_INT 12
18488: PUSH
18489: LD_INT 13
18491: PUSH
18492: LD_INT 14
18494: PUSH
18495: LD_INT 15
18497: PUSH
18498: LD_INT 16
18500: PUSH
18501: LD_INT 17
18503: PUSH
18504: LD_INT 18
18506: PUSH
18507: LD_INT 19
18509: PUSH
18510: LD_INT 20
18512: PUSH
18513: LD_INT 21
18515: PUSH
18516: LD_INT 22
18518: PUSH
18519: LD_INT 23
18521: PUSH
18522: LD_INT 24
18524: PUSH
18525: LD_INT 25
18527: PUSH
18528: LD_INT 26
18530: PUSH
18531: LD_INT 28
18533: PUSH
18534: LD_INT 30
18536: PUSH
18537: LD_INT 31
18539: PUSH
18540: LD_INT 32
18542: PUSH
18543: LD_INT 34
18545: PUSH
18546: LD_INT 36
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 101
18584: PUSH
18585: LD_INT 102
18587: PUSH
18588: LD_INT 103
18590: PUSH
18591: LD_INT 104
18593: PUSH
18594: LD_INT 105
18596: PUSH
18597: LD_INT 106
18599: PUSH
18600: LD_INT 107
18602: PUSH
18603: LD_INT 108
18605: PUSH
18606: LD_INT 109
18608: PUSH
18609: LD_INT 110
18611: PUSH
18612: LD_INT 111
18614: PUSH
18615: LD_INT 112
18617: PUSH
18618: LD_INT 114
18620: PUSH
18621: LD_INT 116
18623: PUSH
18624: LD_INT 117
18626: PUSH
18627: LD_INT 118
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: ST_TO_ADDR
18652: GO 20335
18654: LD_INT 12
18656: DOUBLE
18657: EQUAL
18658: IFTRUE 18662
18660: GO 18882
18662: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18663: LD_ADDR_VAR 0 2
18667: PUSH
18668: LD_INT 1
18670: PUSH
18671: LD_INT 2
18673: PUSH
18674: LD_INT 3
18676: PUSH
18677: LD_INT 4
18679: PUSH
18680: LD_INT 5
18682: PUSH
18683: LD_INT 6
18685: PUSH
18686: LD_INT 7
18688: PUSH
18689: LD_INT 8
18691: PUSH
18692: LD_INT 9
18694: PUSH
18695: LD_INT 10
18697: PUSH
18698: LD_INT 11
18700: PUSH
18701: LD_INT 12
18703: PUSH
18704: LD_INT 13
18706: PUSH
18707: LD_INT 14
18709: PUSH
18710: LD_INT 15
18712: PUSH
18713: LD_INT 16
18715: PUSH
18716: LD_INT 17
18718: PUSH
18719: LD_INT 18
18721: PUSH
18722: LD_INT 19
18724: PUSH
18725: LD_INT 20
18727: PUSH
18728: LD_INT 21
18730: PUSH
18731: LD_INT 22
18733: PUSH
18734: LD_INT 23
18736: PUSH
18737: LD_INT 24
18739: PUSH
18740: LD_INT 25
18742: PUSH
18743: LD_INT 26
18745: PUSH
18746: LD_INT 27
18748: PUSH
18749: LD_INT 28
18751: PUSH
18752: LD_INT 30
18754: PUSH
18755: LD_INT 31
18757: PUSH
18758: LD_INT 32
18760: PUSH
18761: LD_INT 33
18763: PUSH
18764: LD_INT 34
18766: PUSH
18767: LD_INT 36
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 101
18808: PUSH
18809: LD_INT 102
18811: PUSH
18812: LD_INT 103
18814: PUSH
18815: LD_INT 104
18817: PUSH
18818: LD_INT 105
18820: PUSH
18821: LD_INT 106
18823: PUSH
18824: LD_INT 107
18826: PUSH
18827: LD_INT 108
18829: PUSH
18830: LD_INT 109
18832: PUSH
18833: LD_INT 110
18835: PUSH
18836: LD_INT 111
18838: PUSH
18839: LD_INT 112
18841: PUSH
18842: LD_INT 113
18844: PUSH
18845: LD_INT 114
18847: PUSH
18848: LD_INT 116
18850: PUSH
18851: LD_INT 117
18853: PUSH
18854: LD_INT 118
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: ST_TO_ADDR
18880: GO 20335
18882: LD_INT 13
18884: DOUBLE
18885: EQUAL
18886: IFTRUE 18890
18888: GO 19098
18890: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18891: LD_ADDR_VAR 0 2
18895: PUSH
18896: LD_INT 1
18898: PUSH
18899: LD_INT 2
18901: PUSH
18902: LD_INT 3
18904: PUSH
18905: LD_INT 4
18907: PUSH
18908: LD_INT 5
18910: PUSH
18911: LD_INT 8
18913: PUSH
18914: LD_INT 9
18916: PUSH
18917: LD_INT 10
18919: PUSH
18920: LD_INT 11
18922: PUSH
18923: LD_INT 12
18925: PUSH
18926: LD_INT 14
18928: PUSH
18929: LD_INT 15
18931: PUSH
18932: LD_INT 16
18934: PUSH
18935: LD_INT 17
18937: PUSH
18938: LD_INT 18
18940: PUSH
18941: LD_INT 19
18943: PUSH
18944: LD_INT 20
18946: PUSH
18947: LD_INT 21
18949: PUSH
18950: LD_INT 22
18952: PUSH
18953: LD_INT 23
18955: PUSH
18956: LD_INT 24
18958: PUSH
18959: LD_INT 25
18961: PUSH
18962: LD_INT 26
18964: PUSH
18965: LD_INT 27
18967: PUSH
18968: LD_INT 28
18970: PUSH
18971: LD_INT 30
18973: PUSH
18974: LD_INT 31
18976: PUSH
18977: LD_INT 32
18979: PUSH
18980: LD_INT 33
18982: PUSH
18983: LD_INT 34
18985: PUSH
18986: LD_INT 36
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 101
19024: PUSH
19025: LD_INT 102
19027: PUSH
19028: LD_INT 103
19030: PUSH
19031: LD_INT 104
19033: PUSH
19034: LD_INT 105
19036: PUSH
19037: LD_INT 106
19039: PUSH
19040: LD_INT 107
19042: PUSH
19043: LD_INT 108
19045: PUSH
19046: LD_INT 109
19048: PUSH
19049: LD_INT 110
19051: PUSH
19052: LD_INT 111
19054: PUSH
19055: LD_INT 112
19057: PUSH
19058: LD_INT 113
19060: PUSH
19061: LD_INT 114
19063: PUSH
19064: LD_INT 116
19066: PUSH
19067: LD_INT 117
19069: PUSH
19070: LD_INT 118
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: ST_TO_ADDR
19096: GO 20335
19098: LD_INT 14
19100: DOUBLE
19101: EQUAL
19102: IFTRUE 19106
19104: GO 19330
19106: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
19107: LD_ADDR_VAR 0 2
19111: PUSH
19112: LD_INT 1
19114: PUSH
19115: LD_INT 2
19117: PUSH
19118: LD_INT 3
19120: PUSH
19121: LD_INT 4
19123: PUSH
19124: LD_INT 5
19126: PUSH
19127: LD_INT 6
19129: PUSH
19130: LD_INT 7
19132: PUSH
19133: LD_INT 8
19135: PUSH
19136: LD_INT 9
19138: PUSH
19139: LD_INT 10
19141: PUSH
19142: LD_INT 11
19144: PUSH
19145: LD_INT 12
19147: PUSH
19148: LD_INT 13
19150: PUSH
19151: LD_INT 14
19153: PUSH
19154: LD_INT 15
19156: PUSH
19157: LD_INT 16
19159: PUSH
19160: LD_INT 17
19162: PUSH
19163: LD_INT 18
19165: PUSH
19166: LD_INT 19
19168: PUSH
19169: LD_INT 20
19171: PUSH
19172: LD_INT 21
19174: PUSH
19175: LD_INT 22
19177: PUSH
19178: LD_INT 23
19180: PUSH
19181: LD_INT 24
19183: PUSH
19184: LD_INT 25
19186: PUSH
19187: LD_INT 26
19189: PUSH
19190: LD_INT 27
19192: PUSH
19193: LD_INT 28
19195: PUSH
19196: LD_INT 29
19198: PUSH
19199: LD_INT 30
19201: PUSH
19202: LD_INT 31
19204: PUSH
19205: LD_INT 32
19207: PUSH
19208: LD_INT 33
19210: PUSH
19211: LD_INT 34
19213: PUSH
19214: LD_INT 36
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 101
19256: PUSH
19257: LD_INT 102
19259: PUSH
19260: LD_INT 103
19262: PUSH
19263: LD_INT 104
19265: PUSH
19266: LD_INT 105
19268: PUSH
19269: LD_INT 106
19271: PUSH
19272: LD_INT 107
19274: PUSH
19275: LD_INT 108
19277: PUSH
19278: LD_INT 109
19280: PUSH
19281: LD_INT 110
19283: PUSH
19284: LD_INT 111
19286: PUSH
19287: LD_INT 112
19289: PUSH
19290: LD_INT 113
19292: PUSH
19293: LD_INT 114
19295: PUSH
19296: LD_INT 116
19298: PUSH
19299: LD_INT 117
19301: PUSH
19302: LD_INT 118
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: LIST
19311: LIST
19312: LIST
19313: LIST
19314: LIST
19315: LIST
19316: LIST
19317: LIST
19318: LIST
19319: LIST
19320: LIST
19321: LIST
19322: LIST
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: ST_TO_ADDR
19328: GO 20335
19330: LD_INT 15
19332: DOUBLE
19333: EQUAL
19334: IFTRUE 19338
19336: GO 19562
19338: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19339: LD_ADDR_VAR 0 2
19343: PUSH
19344: LD_INT 1
19346: PUSH
19347: LD_INT 2
19349: PUSH
19350: LD_INT 3
19352: PUSH
19353: LD_INT 4
19355: PUSH
19356: LD_INT 5
19358: PUSH
19359: LD_INT 6
19361: PUSH
19362: LD_INT 7
19364: PUSH
19365: LD_INT 8
19367: PUSH
19368: LD_INT 9
19370: PUSH
19371: LD_INT 10
19373: PUSH
19374: LD_INT 11
19376: PUSH
19377: LD_INT 12
19379: PUSH
19380: LD_INT 13
19382: PUSH
19383: LD_INT 14
19385: PUSH
19386: LD_INT 15
19388: PUSH
19389: LD_INT 16
19391: PUSH
19392: LD_INT 17
19394: PUSH
19395: LD_INT 18
19397: PUSH
19398: LD_INT 19
19400: PUSH
19401: LD_INT 20
19403: PUSH
19404: LD_INT 21
19406: PUSH
19407: LD_INT 22
19409: PUSH
19410: LD_INT 23
19412: PUSH
19413: LD_INT 24
19415: PUSH
19416: LD_INT 25
19418: PUSH
19419: LD_INT 26
19421: PUSH
19422: LD_INT 27
19424: PUSH
19425: LD_INT 28
19427: PUSH
19428: LD_INT 29
19430: PUSH
19431: LD_INT 30
19433: PUSH
19434: LD_INT 31
19436: PUSH
19437: LD_INT 32
19439: PUSH
19440: LD_INT 33
19442: PUSH
19443: LD_INT 34
19445: PUSH
19446: LD_INT 36
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: LIST
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: PUSH
19486: LD_INT 101
19488: PUSH
19489: LD_INT 102
19491: PUSH
19492: LD_INT 103
19494: PUSH
19495: LD_INT 104
19497: PUSH
19498: LD_INT 105
19500: PUSH
19501: LD_INT 106
19503: PUSH
19504: LD_INT 107
19506: PUSH
19507: LD_INT 108
19509: PUSH
19510: LD_INT 109
19512: PUSH
19513: LD_INT 110
19515: PUSH
19516: LD_INT 111
19518: PUSH
19519: LD_INT 112
19521: PUSH
19522: LD_INT 113
19524: PUSH
19525: LD_INT 114
19527: PUSH
19528: LD_INT 116
19530: PUSH
19531: LD_INT 117
19533: PUSH
19534: LD_INT 118
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: LIST
19548: LIST
19549: LIST
19550: LIST
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: PUSH
19556: EMPTY
19557: LIST
19558: LIST
19559: ST_TO_ADDR
19560: GO 20335
19562: LD_INT 16
19564: DOUBLE
19565: EQUAL
19566: IFTRUE 19570
19568: GO 19706
19570: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19571: LD_ADDR_VAR 0 2
19575: PUSH
19576: LD_INT 2
19578: PUSH
19579: LD_INT 4
19581: PUSH
19582: LD_INT 5
19584: PUSH
19585: LD_INT 7
19587: PUSH
19588: LD_INT 11
19590: PUSH
19591: LD_INT 12
19593: PUSH
19594: LD_INT 15
19596: PUSH
19597: LD_INT 16
19599: PUSH
19600: LD_INT 20
19602: PUSH
19603: LD_INT 21
19605: PUSH
19606: LD_INT 22
19608: PUSH
19609: LD_INT 23
19611: PUSH
19612: LD_INT 25
19614: PUSH
19615: LD_INT 26
19617: PUSH
19618: LD_INT 30
19620: PUSH
19621: LD_INT 31
19623: PUSH
19624: LD_INT 32
19626: PUSH
19627: LD_INT 33
19629: PUSH
19630: LD_INT 34
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: PUSH
19654: LD_INT 101
19656: PUSH
19657: LD_INT 102
19659: PUSH
19660: LD_INT 103
19662: PUSH
19663: LD_INT 106
19665: PUSH
19666: LD_INT 108
19668: PUSH
19669: LD_INT 112
19671: PUSH
19672: LD_INT 113
19674: PUSH
19675: LD_INT 114
19677: PUSH
19678: LD_INT 116
19680: PUSH
19681: LD_INT 117
19683: PUSH
19684: LD_INT 118
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: ST_TO_ADDR
19704: GO 20335
19706: LD_INT 17
19708: DOUBLE
19709: EQUAL
19710: IFTRUE 19714
19712: GO 19938
19714: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19715: LD_ADDR_VAR 0 2
19719: PUSH
19720: LD_INT 1
19722: PUSH
19723: LD_INT 2
19725: PUSH
19726: LD_INT 3
19728: PUSH
19729: LD_INT 4
19731: PUSH
19732: LD_INT 5
19734: PUSH
19735: LD_INT 6
19737: PUSH
19738: LD_INT 7
19740: PUSH
19741: LD_INT 8
19743: PUSH
19744: LD_INT 9
19746: PUSH
19747: LD_INT 10
19749: PUSH
19750: LD_INT 11
19752: PUSH
19753: LD_INT 12
19755: PUSH
19756: LD_INT 13
19758: PUSH
19759: LD_INT 14
19761: PUSH
19762: LD_INT 15
19764: PUSH
19765: LD_INT 16
19767: PUSH
19768: LD_INT 17
19770: PUSH
19771: LD_INT 18
19773: PUSH
19774: LD_INT 19
19776: PUSH
19777: LD_INT 20
19779: PUSH
19780: LD_INT 21
19782: PUSH
19783: LD_INT 22
19785: PUSH
19786: LD_INT 23
19788: PUSH
19789: LD_INT 24
19791: PUSH
19792: LD_INT 25
19794: PUSH
19795: LD_INT 26
19797: PUSH
19798: LD_INT 27
19800: PUSH
19801: LD_INT 28
19803: PUSH
19804: LD_INT 29
19806: PUSH
19807: LD_INT 30
19809: PUSH
19810: LD_INT 31
19812: PUSH
19813: LD_INT 32
19815: PUSH
19816: LD_INT 33
19818: PUSH
19819: LD_INT 34
19821: PUSH
19822: LD_INT 36
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: PUSH
19862: LD_INT 101
19864: PUSH
19865: LD_INT 102
19867: PUSH
19868: LD_INT 103
19870: PUSH
19871: LD_INT 104
19873: PUSH
19874: LD_INT 105
19876: PUSH
19877: LD_INT 106
19879: PUSH
19880: LD_INT 107
19882: PUSH
19883: LD_INT 108
19885: PUSH
19886: LD_INT 109
19888: PUSH
19889: LD_INT 110
19891: PUSH
19892: LD_INT 111
19894: PUSH
19895: LD_INT 112
19897: PUSH
19898: LD_INT 113
19900: PUSH
19901: LD_INT 114
19903: PUSH
19904: LD_INT 116
19906: PUSH
19907: LD_INT 117
19909: PUSH
19910: LD_INT 118
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: ST_TO_ADDR
19936: GO 20335
19938: LD_INT 18
19940: DOUBLE
19941: EQUAL
19942: IFTRUE 19946
19944: GO 20094
19946: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19947: LD_ADDR_VAR 0 2
19951: PUSH
19952: LD_INT 2
19954: PUSH
19955: LD_INT 4
19957: PUSH
19958: LD_INT 5
19960: PUSH
19961: LD_INT 7
19963: PUSH
19964: LD_INT 11
19966: PUSH
19967: LD_INT 12
19969: PUSH
19970: LD_INT 15
19972: PUSH
19973: LD_INT 16
19975: PUSH
19976: LD_INT 20
19978: PUSH
19979: LD_INT 21
19981: PUSH
19982: LD_INT 22
19984: PUSH
19985: LD_INT 23
19987: PUSH
19988: LD_INT 25
19990: PUSH
19991: LD_INT 26
19993: PUSH
19994: LD_INT 30
19996: PUSH
19997: LD_INT 31
19999: PUSH
20000: LD_INT 32
20002: PUSH
20003: LD_INT 33
20005: PUSH
20006: LD_INT 34
20008: PUSH
20009: LD_INT 35
20011: PUSH
20012: LD_INT 36
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: PUSH
20038: LD_INT 101
20040: PUSH
20041: LD_INT 102
20043: PUSH
20044: LD_INT 103
20046: PUSH
20047: LD_INT 106
20049: PUSH
20050: LD_INT 108
20052: PUSH
20053: LD_INT 112
20055: PUSH
20056: LD_INT 113
20058: PUSH
20059: LD_INT 114
20061: PUSH
20062: LD_INT 115
20064: PUSH
20065: LD_INT 116
20067: PUSH
20068: LD_INT 117
20070: PUSH
20071: LD_INT 118
20073: PUSH
20074: EMPTY
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: LIST
20085: LIST
20086: LIST
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: ST_TO_ADDR
20092: GO 20335
20094: LD_INT 19
20096: DOUBLE
20097: EQUAL
20098: IFTRUE 20102
20100: GO 20334
20102: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
20103: LD_ADDR_VAR 0 2
20107: PUSH
20108: LD_INT 1
20110: PUSH
20111: LD_INT 2
20113: PUSH
20114: LD_INT 3
20116: PUSH
20117: LD_INT 4
20119: PUSH
20120: LD_INT 5
20122: PUSH
20123: LD_INT 6
20125: PUSH
20126: LD_INT 7
20128: PUSH
20129: LD_INT 8
20131: PUSH
20132: LD_INT 9
20134: PUSH
20135: LD_INT 10
20137: PUSH
20138: LD_INT 11
20140: PUSH
20141: LD_INT 12
20143: PUSH
20144: LD_INT 13
20146: PUSH
20147: LD_INT 14
20149: PUSH
20150: LD_INT 15
20152: PUSH
20153: LD_INT 16
20155: PUSH
20156: LD_INT 17
20158: PUSH
20159: LD_INT 18
20161: PUSH
20162: LD_INT 19
20164: PUSH
20165: LD_INT 20
20167: PUSH
20168: LD_INT 21
20170: PUSH
20171: LD_INT 22
20173: PUSH
20174: LD_INT 23
20176: PUSH
20177: LD_INT 24
20179: PUSH
20180: LD_INT 25
20182: PUSH
20183: LD_INT 26
20185: PUSH
20186: LD_INT 27
20188: PUSH
20189: LD_INT 28
20191: PUSH
20192: LD_INT 29
20194: PUSH
20195: LD_INT 30
20197: PUSH
20198: LD_INT 31
20200: PUSH
20201: LD_INT 32
20203: PUSH
20204: LD_INT 33
20206: PUSH
20207: LD_INT 34
20209: PUSH
20210: LD_INT 35
20212: PUSH
20213: LD_INT 36
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: LIST
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 101
20256: PUSH
20257: LD_INT 102
20259: PUSH
20260: LD_INT 103
20262: PUSH
20263: LD_INT 104
20265: PUSH
20266: LD_INT 105
20268: PUSH
20269: LD_INT 106
20271: PUSH
20272: LD_INT 107
20274: PUSH
20275: LD_INT 108
20277: PUSH
20278: LD_INT 109
20280: PUSH
20281: LD_INT 110
20283: PUSH
20284: LD_INT 111
20286: PUSH
20287: LD_INT 112
20289: PUSH
20290: LD_INT 113
20292: PUSH
20293: LD_INT 114
20295: PUSH
20296: LD_INT 115
20298: PUSH
20299: LD_INT 116
20301: PUSH
20302: LD_INT 117
20304: PUSH
20305: LD_INT 118
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: ST_TO_ADDR
20332: GO 20335
20334: POP
// end else
20335: GO 20566
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20337: LD_ADDR_VAR 0 2
20341: PUSH
20342: LD_INT 1
20344: PUSH
20345: LD_INT 2
20347: PUSH
20348: LD_INT 3
20350: PUSH
20351: LD_INT 4
20353: PUSH
20354: LD_INT 5
20356: PUSH
20357: LD_INT 6
20359: PUSH
20360: LD_INT 7
20362: PUSH
20363: LD_INT 8
20365: PUSH
20366: LD_INT 9
20368: PUSH
20369: LD_INT 10
20371: PUSH
20372: LD_INT 11
20374: PUSH
20375: LD_INT 12
20377: PUSH
20378: LD_INT 13
20380: PUSH
20381: LD_INT 14
20383: PUSH
20384: LD_INT 15
20386: PUSH
20387: LD_INT 16
20389: PUSH
20390: LD_INT 17
20392: PUSH
20393: LD_INT 18
20395: PUSH
20396: LD_INT 19
20398: PUSH
20399: LD_INT 20
20401: PUSH
20402: LD_INT 21
20404: PUSH
20405: LD_INT 22
20407: PUSH
20408: LD_INT 23
20410: PUSH
20411: LD_INT 24
20413: PUSH
20414: LD_INT 25
20416: PUSH
20417: LD_INT 26
20419: PUSH
20420: LD_INT 27
20422: PUSH
20423: LD_INT 28
20425: PUSH
20426: LD_INT 29
20428: PUSH
20429: LD_INT 30
20431: PUSH
20432: LD_INT 31
20434: PUSH
20435: LD_INT 32
20437: PUSH
20438: LD_INT 33
20440: PUSH
20441: LD_INT 34
20443: PUSH
20444: LD_INT 35
20446: PUSH
20447: LD_INT 36
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: LIST
20458: LIST
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: LIST
20465: LIST
20466: LIST
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 101
20490: PUSH
20491: LD_INT 102
20493: PUSH
20494: LD_INT 103
20496: PUSH
20497: LD_INT 104
20499: PUSH
20500: LD_INT 105
20502: PUSH
20503: LD_INT 106
20505: PUSH
20506: LD_INT 107
20508: PUSH
20509: LD_INT 108
20511: PUSH
20512: LD_INT 109
20514: PUSH
20515: LD_INT 110
20517: PUSH
20518: LD_INT 111
20520: PUSH
20521: LD_INT 112
20523: PUSH
20524: LD_INT 113
20526: PUSH
20527: LD_INT 114
20529: PUSH
20530: LD_INT 115
20532: PUSH
20533: LD_INT 116
20535: PUSH
20536: LD_INT 117
20538: PUSH
20539: LD_INT 118
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: LIST
20552: LIST
20553: LIST
20554: LIST
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: ST_TO_ADDR
// if result then
20566: LD_VAR 0 2
20570: IFFALSE 21356
// begin normal :=  ;
20572: LD_ADDR_VAR 0 5
20576: PUSH
20577: LD_STRING 
20579: ST_TO_ADDR
// hardcore :=  ;
20580: LD_ADDR_VAR 0 6
20584: PUSH
20585: LD_STRING 
20587: ST_TO_ADDR
// active :=  ;
20588: LD_ADDR_VAR 0 7
20592: PUSH
20593: LD_STRING 
20595: ST_TO_ADDR
// for i = 1 to normalCounter do
20596: LD_ADDR_VAR 0 8
20600: PUSH
20601: DOUBLE
20602: LD_INT 1
20604: DEC
20605: ST_TO_ADDR
20606: LD_EXP 41
20610: PUSH
20611: FOR_TO
20612: IFFALSE 20713
// begin tmp := 0 ;
20614: LD_ADDR_VAR 0 3
20618: PUSH
20619: LD_STRING 0
20621: ST_TO_ADDR
// if result [ 1 ] then
20622: LD_VAR 0 2
20626: PUSH
20627: LD_INT 1
20629: ARRAY
20630: IFFALSE 20695
// if result [ 1 ] [ 1 ] = i then
20632: LD_VAR 0 2
20636: PUSH
20637: LD_INT 1
20639: ARRAY
20640: PUSH
20641: LD_INT 1
20643: ARRAY
20644: PUSH
20645: LD_VAR 0 8
20649: EQUAL
20650: IFFALSE 20695
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20652: LD_ADDR_VAR 0 2
20656: PUSH
20657: LD_VAR 0 2
20661: PPUSH
20662: LD_INT 1
20664: PPUSH
20665: LD_VAR 0 2
20669: PUSH
20670: LD_INT 1
20672: ARRAY
20673: PPUSH
20674: LD_INT 1
20676: PPUSH
20677: CALL_OW 3
20681: PPUSH
20682: CALL_OW 1
20686: ST_TO_ADDR
// tmp := 1 ;
20687: LD_ADDR_VAR 0 3
20691: PUSH
20692: LD_STRING 1
20694: ST_TO_ADDR
// end ; normal := normal & tmp ;
20695: LD_ADDR_VAR 0 5
20699: PUSH
20700: LD_VAR 0 5
20704: PUSH
20705: LD_VAR 0 3
20709: STR
20710: ST_TO_ADDR
// end ;
20711: GO 20611
20713: POP
20714: POP
// for i = 1 to hardcoreCounter do
20715: LD_ADDR_VAR 0 8
20719: PUSH
20720: DOUBLE
20721: LD_INT 1
20723: DEC
20724: ST_TO_ADDR
20725: LD_EXP 42
20729: PUSH
20730: FOR_TO
20731: IFFALSE 20836
// begin tmp := 0 ;
20733: LD_ADDR_VAR 0 3
20737: PUSH
20738: LD_STRING 0
20740: ST_TO_ADDR
// if result [ 2 ] then
20741: LD_VAR 0 2
20745: PUSH
20746: LD_INT 2
20748: ARRAY
20749: IFFALSE 20818
// if result [ 2 ] [ 1 ] = 100 + i then
20751: LD_VAR 0 2
20755: PUSH
20756: LD_INT 2
20758: ARRAY
20759: PUSH
20760: LD_INT 1
20762: ARRAY
20763: PUSH
20764: LD_INT 100
20766: PUSH
20767: LD_VAR 0 8
20771: PLUS
20772: EQUAL
20773: IFFALSE 20818
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20775: LD_ADDR_VAR 0 2
20779: PUSH
20780: LD_VAR 0 2
20784: PPUSH
20785: LD_INT 2
20787: PPUSH
20788: LD_VAR 0 2
20792: PUSH
20793: LD_INT 2
20795: ARRAY
20796: PPUSH
20797: LD_INT 1
20799: PPUSH
20800: CALL_OW 3
20804: PPUSH
20805: CALL_OW 1
20809: ST_TO_ADDR
// tmp := 1 ;
20810: LD_ADDR_VAR 0 3
20814: PUSH
20815: LD_STRING 1
20817: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20818: LD_ADDR_VAR 0 6
20822: PUSH
20823: LD_VAR 0 6
20827: PUSH
20828: LD_VAR 0 3
20832: STR
20833: ST_TO_ADDR
// end ;
20834: GO 20730
20836: POP
20837: POP
// if isGameLoad then
20838: LD_VAR 0 1
20842: IFFALSE 21317
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20844: LD_ADDR_VAR 0 4
20848: PUSH
20849: LD_EXP 45
20853: PUSH
20854: LD_EXP 44
20858: PUSH
20859: LD_EXP 46
20863: PUSH
20864: LD_EXP 43
20868: PUSH
20869: LD_EXP 47
20873: PUSH
20874: LD_EXP 48
20878: PUSH
20879: LD_EXP 49
20883: PUSH
20884: LD_EXP 50
20888: PUSH
20889: LD_EXP 51
20893: PUSH
20894: LD_EXP 52
20898: PUSH
20899: LD_EXP 53
20903: PUSH
20904: LD_EXP 54
20908: PUSH
20909: LD_EXP 55
20913: PUSH
20914: LD_EXP 56
20918: PUSH
20919: LD_EXP 64
20923: PUSH
20924: LD_EXP 65
20928: PUSH
20929: LD_EXP 66
20933: PUSH
20934: LD_EXP 67
20938: PUSH
20939: LD_EXP 69
20943: PUSH
20944: LD_EXP 70
20948: PUSH
20949: LD_EXP 71
20953: PUSH
20954: LD_EXP 74
20958: PUSH
20959: LD_EXP 76
20963: PUSH
20964: LD_EXP 77
20968: PUSH
20969: LD_EXP 78
20973: PUSH
20974: LD_EXP 80
20978: PUSH
20979: LD_EXP 81
20983: PUSH
20984: LD_EXP 84
20988: PUSH
20989: LD_EXP 85
20993: PUSH
20994: LD_EXP 86
20998: PUSH
20999: LD_EXP 87
21003: PUSH
21004: LD_EXP 88
21008: PUSH
21009: LD_EXP 89
21013: PUSH
21014: LD_EXP 90
21018: PUSH
21019: LD_EXP 91
21023: PUSH
21024: LD_EXP 92
21028: PUSH
21029: LD_EXP 57
21033: PUSH
21034: LD_EXP 58
21038: PUSH
21039: LD_EXP 61
21043: PUSH
21044: LD_EXP 62
21048: PUSH
21049: LD_EXP 63
21053: PUSH
21054: LD_EXP 59
21058: PUSH
21059: LD_EXP 60
21063: PUSH
21064: LD_EXP 68
21068: PUSH
21069: LD_EXP 72
21073: PUSH
21074: LD_EXP 73
21078: PUSH
21079: LD_EXP 75
21083: PUSH
21084: LD_EXP 79
21088: PUSH
21089: LD_EXP 82
21093: PUSH
21094: LD_EXP 83
21098: PUSH
21099: LD_EXP 93
21103: PUSH
21104: LD_EXP 94
21108: PUSH
21109: LD_EXP 95
21113: PUSH
21114: LD_EXP 96
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: ST_TO_ADDR
// tmp :=  ;
21175: LD_ADDR_VAR 0 3
21179: PUSH
21180: LD_STRING 
21182: ST_TO_ADDR
// for i = 1 to normalCounter do
21183: LD_ADDR_VAR 0 8
21187: PUSH
21188: DOUBLE
21189: LD_INT 1
21191: DEC
21192: ST_TO_ADDR
21193: LD_EXP 41
21197: PUSH
21198: FOR_TO
21199: IFFALSE 21235
// begin if flags [ i ] then
21201: LD_VAR 0 4
21205: PUSH
21206: LD_VAR 0 8
21210: ARRAY
21211: IFFALSE 21233
// tmp := tmp & i & ; ;
21213: LD_ADDR_VAR 0 3
21217: PUSH
21218: LD_VAR 0 3
21222: PUSH
21223: LD_VAR 0 8
21227: STR
21228: PUSH
21229: LD_STRING ;
21231: STR
21232: ST_TO_ADDR
// end ;
21233: GO 21198
21235: POP
21236: POP
// for i = 1 to hardcoreCounter do
21237: LD_ADDR_VAR 0 8
21241: PUSH
21242: DOUBLE
21243: LD_INT 1
21245: DEC
21246: ST_TO_ADDR
21247: LD_EXP 42
21251: PUSH
21252: FOR_TO
21253: IFFALSE 21299
// begin if flags [ normalCounter + i ] then
21255: LD_VAR 0 4
21259: PUSH
21260: LD_EXP 41
21264: PUSH
21265: LD_VAR 0 8
21269: PLUS
21270: ARRAY
21271: IFFALSE 21297
// tmp := tmp & ( 100 + i ) & ; ;
21273: LD_ADDR_VAR 0 3
21277: PUSH
21278: LD_VAR 0 3
21282: PUSH
21283: LD_INT 100
21285: PUSH
21286: LD_VAR 0 8
21290: PLUS
21291: STR
21292: PUSH
21293: LD_STRING ;
21295: STR
21296: ST_TO_ADDR
// end ;
21297: GO 21252
21299: POP
21300: POP
// if tmp then
21301: LD_VAR 0 3
21305: IFFALSE 21317
// active := tmp ;
21307: LD_ADDR_VAR 0 7
21311: PUSH
21312: LD_VAR 0 3
21316: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21317: LD_STRING getStreamItemsFromMission("
21319: PUSH
21320: LD_VAR 0 5
21324: STR
21325: PUSH
21326: LD_STRING ","
21328: STR
21329: PUSH
21330: LD_VAR 0 6
21334: STR
21335: PUSH
21336: LD_STRING ","
21338: STR
21339: PUSH
21340: LD_VAR 0 7
21344: STR
21345: PUSH
21346: LD_STRING ")
21348: STR
21349: PPUSH
21350: CALL_OW 559
// end else
21354: GO 21363
// ToLua ( getStreamItemsFromMission("","","") ) ;
21356: LD_STRING getStreamItemsFromMission("","","")
21358: PPUSH
21359: CALL_OW 559
// end ;
21363: LD_VAR 0 2
21367: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21368: LD_EXP 40
21372: PUSH
21373: LD_EXP 45
21377: AND
21378: IFFALSE 21502
21380: GO 21382
21382: DISABLE
21383: LD_INT 0
21385: PPUSH
21386: PPUSH
// begin enable ;
21387: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21388: LD_ADDR_VAR 0 2
21392: PUSH
21393: LD_INT 22
21395: PUSH
21396: LD_OWVAR 2
21400: PUSH
21401: EMPTY
21402: LIST
21403: LIST
21404: PUSH
21405: LD_INT 2
21407: PUSH
21408: LD_INT 34
21410: PUSH
21411: LD_INT 7
21413: PUSH
21414: EMPTY
21415: LIST
21416: LIST
21417: PUSH
21418: LD_INT 34
21420: PUSH
21421: LD_INT 45
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: PUSH
21428: LD_INT 34
21430: PUSH
21431: LD_INT 28
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: PUSH
21438: LD_INT 34
21440: PUSH
21441: LD_INT 47
21443: PUSH
21444: EMPTY
21445: LIST
21446: LIST
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PPUSH
21459: CALL_OW 69
21463: ST_TO_ADDR
// if not tmp then
21464: LD_VAR 0 2
21468: NOT
21469: IFFALSE 21473
// exit ;
21471: GO 21502
// for i in tmp do
21473: LD_ADDR_VAR 0 1
21477: PUSH
21478: LD_VAR 0 2
21482: PUSH
21483: FOR_IN
21484: IFFALSE 21500
// begin SetLives ( i , 0 ) ;
21486: LD_VAR 0 1
21490: PPUSH
21491: LD_INT 0
21493: PPUSH
21494: CALL_OW 234
// end ;
21498: GO 21483
21500: POP
21501: POP
// end ;
21502: PPOPN 2
21504: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21505: LD_EXP 40
21509: PUSH
21510: LD_EXP 46
21514: AND
21515: IFFALSE 21599
21517: GO 21519
21519: DISABLE
21520: LD_INT 0
21522: PPUSH
21523: PPUSH
// begin enable ;
21524: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21525: LD_ADDR_VAR 0 2
21529: PUSH
21530: LD_INT 22
21532: PUSH
21533: LD_OWVAR 2
21537: PUSH
21538: EMPTY
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 32
21544: PUSH
21545: LD_INT 3
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PPUSH
21556: CALL_OW 69
21560: ST_TO_ADDR
// if not tmp then
21561: LD_VAR 0 2
21565: NOT
21566: IFFALSE 21570
// exit ;
21568: GO 21599
// for i in tmp do
21570: LD_ADDR_VAR 0 1
21574: PUSH
21575: LD_VAR 0 2
21579: PUSH
21580: FOR_IN
21581: IFFALSE 21597
// begin SetLives ( i , 0 ) ;
21583: LD_VAR 0 1
21587: PPUSH
21588: LD_INT 0
21590: PPUSH
21591: CALL_OW 234
// end ;
21595: GO 21580
21597: POP
21598: POP
// end ;
21599: PPOPN 2
21601: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21602: LD_EXP 40
21606: PUSH
21607: LD_EXP 43
21611: AND
21612: IFFALSE 21705
21614: GO 21616
21616: DISABLE
21617: LD_INT 0
21619: PPUSH
// begin enable ;
21620: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21621: LD_ADDR_VAR 0 1
21625: PUSH
21626: LD_INT 22
21628: PUSH
21629: LD_OWVAR 2
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: LD_INT 2
21640: PUSH
21641: LD_INT 25
21643: PUSH
21644: LD_INT 5
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 25
21653: PUSH
21654: LD_INT 9
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 25
21663: PUSH
21664: LD_INT 8
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PPUSH
21681: CALL_OW 69
21685: PUSH
21686: FOR_IN
21687: IFFALSE 21703
// begin SetClass ( i , 1 ) ;
21689: LD_VAR 0 1
21693: PPUSH
21694: LD_INT 1
21696: PPUSH
21697: CALL_OW 336
// end ;
21701: GO 21686
21703: POP
21704: POP
// end ;
21705: PPOPN 1
21707: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21708: LD_EXP 40
21712: PUSH
21713: LD_EXP 44
21717: AND
21718: PUSH
21719: LD_OWVAR 65
21723: PUSH
21724: LD_INT 7
21726: LESS
21727: AND
21728: IFFALSE 21742
21730: GO 21732
21732: DISABLE
// begin enable ;
21733: ENABLE
// game_speed := 7 ;
21734: LD_ADDR_OWVAR 65
21738: PUSH
21739: LD_INT 7
21741: ST_TO_ADDR
// end ;
21742: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21743: LD_EXP 40
21747: PUSH
21748: LD_EXP 47
21752: AND
21753: IFFALSE 21955
21755: GO 21757
21757: DISABLE
21758: LD_INT 0
21760: PPUSH
21761: PPUSH
21762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21763: LD_ADDR_VAR 0 3
21767: PUSH
21768: LD_INT 81
21770: PUSH
21771: LD_OWVAR 2
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 21
21782: PUSH
21783: LD_INT 1
21785: PUSH
21786: EMPTY
21787: LIST
21788: LIST
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PPUSH
21794: CALL_OW 69
21798: ST_TO_ADDR
// if not tmp then
21799: LD_VAR 0 3
21803: NOT
21804: IFFALSE 21808
// exit ;
21806: GO 21955
// if tmp > 5 then
21808: LD_VAR 0 3
21812: PUSH
21813: LD_INT 5
21815: GREATER
21816: IFFALSE 21828
// k := 5 else
21818: LD_ADDR_VAR 0 2
21822: PUSH
21823: LD_INT 5
21825: ST_TO_ADDR
21826: GO 21838
// k := tmp ;
21828: LD_ADDR_VAR 0 2
21832: PUSH
21833: LD_VAR 0 3
21837: ST_TO_ADDR
// for i := 1 to k do
21838: LD_ADDR_VAR 0 1
21842: PUSH
21843: DOUBLE
21844: LD_INT 1
21846: DEC
21847: ST_TO_ADDR
21848: LD_VAR 0 2
21852: PUSH
21853: FOR_TO
21854: IFFALSE 21953
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21856: LD_VAR 0 3
21860: PUSH
21861: LD_VAR 0 1
21865: ARRAY
21866: PPUSH
21867: LD_VAR 0 1
21871: PUSH
21872: LD_INT 4
21874: MOD
21875: PUSH
21876: LD_INT 1
21878: PLUS
21879: PPUSH
21880: CALL_OW 259
21884: PUSH
21885: LD_INT 10
21887: LESS
21888: IFFALSE 21951
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21890: LD_VAR 0 3
21894: PUSH
21895: LD_VAR 0 1
21899: ARRAY
21900: PPUSH
21901: LD_VAR 0 1
21905: PUSH
21906: LD_INT 4
21908: MOD
21909: PUSH
21910: LD_INT 1
21912: PLUS
21913: PPUSH
21914: LD_VAR 0 3
21918: PUSH
21919: LD_VAR 0 1
21923: ARRAY
21924: PPUSH
21925: LD_VAR 0 1
21929: PUSH
21930: LD_INT 4
21932: MOD
21933: PUSH
21934: LD_INT 1
21936: PLUS
21937: PPUSH
21938: CALL_OW 259
21942: PUSH
21943: LD_INT 1
21945: PLUS
21946: PPUSH
21947: CALL_OW 237
21951: GO 21853
21953: POP
21954: POP
// end ;
21955: PPOPN 3
21957: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21958: LD_EXP 40
21962: PUSH
21963: LD_EXP 48
21967: AND
21968: IFFALSE 21988
21970: GO 21972
21972: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21973: LD_INT 4
21975: PPUSH
21976: LD_OWVAR 2
21980: PPUSH
21981: LD_INT 0
21983: PPUSH
21984: CALL_OW 324
21988: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21989: LD_EXP 40
21993: PUSH
21994: LD_EXP 77
21998: AND
21999: IFFALSE 22019
22001: GO 22003
22003: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
22004: LD_INT 19
22006: PPUSH
22007: LD_OWVAR 2
22011: PPUSH
22012: LD_INT 0
22014: PPUSH
22015: CALL_OW 324
22019: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
22020: LD_EXP 40
22024: PUSH
22025: LD_EXP 49
22029: AND
22030: IFFALSE 22132
22032: GO 22034
22034: DISABLE
22035: LD_INT 0
22037: PPUSH
22038: PPUSH
// begin enable ;
22039: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
22040: LD_ADDR_VAR 0 2
22044: PUSH
22045: LD_INT 22
22047: PUSH
22048: LD_OWVAR 2
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: LD_INT 2
22059: PUSH
22060: LD_INT 34
22062: PUSH
22063: LD_INT 11
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 34
22072: PUSH
22073: LD_INT 30
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: LIST
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PPUSH
22089: CALL_OW 69
22093: ST_TO_ADDR
// if not tmp then
22094: LD_VAR 0 2
22098: NOT
22099: IFFALSE 22103
// exit ;
22101: GO 22132
// for i in tmp do
22103: LD_ADDR_VAR 0 1
22107: PUSH
22108: LD_VAR 0 2
22112: PUSH
22113: FOR_IN
22114: IFFALSE 22130
// begin SetLives ( i , 0 ) ;
22116: LD_VAR 0 1
22120: PPUSH
22121: LD_INT 0
22123: PPUSH
22124: CALL_OW 234
// end ;
22128: GO 22113
22130: POP
22131: POP
// end ;
22132: PPOPN 2
22134: END
// every 0 0$1 trigger StreamModeActive and sBunker do
22135: LD_EXP 40
22139: PUSH
22140: LD_EXP 50
22144: AND
22145: IFFALSE 22165
22147: GO 22149
22149: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
22150: LD_INT 32
22152: PPUSH
22153: LD_OWVAR 2
22157: PPUSH
22158: LD_INT 0
22160: PPUSH
22161: CALL_OW 324
22165: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
22166: LD_EXP 40
22170: PUSH
22171: LD_EXP 51
22175: AND
22176: IFFALSE 22357
22178: GO 22180
22180: DISABLE
22181: LD_INT 0
22183: PPUSH
22184: PPUSH
22185: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
22186: LD_ADDR_VAR 0 2
22190: PUSH
22191: LD_INT 22
22193: PUSH
22194: LD_OWVAR 2
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 33
22205: PUSH
22206: LD_INT 3
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PPUSH
22217: CALL_OW 69
22221: ST_TO_ADDR
// if not tmp then
22222: LD_VAR 0 2
22226: NOT
22227: IFFALSE 22231
// exit ;
22229: GO 22357
// side := 0 ;
22231: LD_ADDR_VAR 0 3
22235: PUSH
22236: LD_INT 0
22238: ST_TO_ADDR
// for i := 1 to 8 do
22239: LD_ADDR_VAR 0 1
22243: PUSH
22244: DOUBLE
22245: LD_INT 1
22247: DEC
22248: ST_TO_ADDR
22249: LD_INT 8
22251: PUSH
22252: FOR_TO
22253: IFFALSE 22301
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
22255: LD_OWVAR 2
22259: PUSH
22260: LD_VAR 0 1
22264: NONEQUAL
22265: PUSH
22266: LD_OWVAR 2
22270: PPUSH
22271: LD_VAR 0 1
22275: PPUSH
22276: CALL_OW 81
22280: PUSH
22281: LD_INT 2
22283: EQUAL
22284: AND
22285: IFFALSE 22299
// begin side := i ;
22287: LD_ADDR_VAR 0 3
22291: PUSH
22292: LD_VAR 0 1
22296: ST_TO_ADDR
// break ;
22297: GO 22301
// end ;
22299: GO 22252
22301: POP
22302: POP
// if not side then
22303: LD_VAR 0 3
22307: NOT
22308: IFFALSE 22312
// exit ;
22310: GO 22357
// for i := 1 to tmp do
22312: LD_ADDR_VAR 0 1
22316: PUSH
22317: DOUBLE
22318: LD_INT 1
22320: DEC
22321: ST_TO_ADDR
22322: LD_VAR 0 2
22326: PUSH
22327: FOR_TO
22328: IFFALSE 22355
// if Prob ( 60 ) then
22330: LD_INT 60
22332: PPUSH
22333: CALL_OW 13
22337: IFFALSE 22353
// SetSide ( i , side ) ;
22339: LD_VAR 0 1
22343: PPUSH
22344: LD_VAR 0 3
22348: PPUSH
22349: CALL_OW 235
22353: GO 22327
22355: POP
22356: POP
// end ;
22357: PPOPN 3
22359: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22360: LD_EXP 40
22364: PUSH
22365: LD_EXP 53
22369: AND
22370: IFFALSE 22489
22372: GO 22374
22374: DISABLE
22375: LD_INT 0
22377: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22378: LD_ADDR_VAR 0 1
22382: PUSH
22383: LD_INT 22
22385: PUSH
22386: LD_OWVAR 2
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 21
22397: PUSH
22398: LD_INT 1
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 3
22407: PUSH
22408: LD_INT 23
22410: PUSH
22411: LD_INT 0
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: LIST
22426: PPUSH
22427: CALL_OW 69
22431: PUSH
22432: FOR_IN
22433: IFFALSE 22487
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22435: LD_VAR 0 1
22439: PPUSH
22440: CALL_OW 257
22444: PUSH
22445: LD_INT 1
22447: PUSH
22448: LD_INT 2
22450: PUSH
22451: LD_INT 3
22453: PUSH
22454: LD_INT 4
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: IN
22463: IFFALSE 22485
// SetClass ( un , rand ( 1 , 4 ) ) ;
22465: LD_VAR 0 1
22469: PPUSH
22470: LD_INT 1
22472: PPUSH
22473: LD_INT 4
22475: PPUSH
22476: CALL_OW 12
22480: PPUSH
22481: CALL_OW 336
22485: GO 22432
22487: POP
22488: POP
// end ;
22489: PPOPN 1
22491: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22492: LD_EXP 40
22496: PUSH
22497: LD_EXP 52
22501: AND
22502: IFFALSE 22581
22504: GO 22506
22506: DISABLE
22507: LD_INT 0
22509: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22510: LD_ADDR_VAR 0 1
22514: PUSH
22515: LD_INT 22
22517: PUSH
22518: LD_OWVAR 2
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 21
22529: PUSH
22530: LD_INT 3
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: PPUSH
22541: CALL_OW 69
22545: ST_TO_ADDR
// if not tmp then
22546: LD_VAR 0 1
22550: NOT
22551: IFFALSE 22555
// exit ;
22553: GO 22581
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22555: LD_VAR 0 1
22559: PUSH
22560: LD_INT 1
22562: PPUSH
22563: LD_VAR 0 1
22567: PPUSH
22568: CALL_OW 12
22572: ARRAY
22573: PPUSH
22574: LD_INT 100
22576: PPUSH
22577: CALL_OW 234
// end ;
22581: PPOPN 1
22583: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22584: LD_EXP 40
22588: PUSH
22589: LD_EXP 54
22593: AND
22594: IFFALSE 22692
22596: GO 22598
22598: DISABLE
22599: LD_INT 0
22601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22602: LD_ADDR_VAR 0 1
22606: PUSH
22607: LD_INT 22
22609: PUSH
22610: LD_OWVAR 2
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 21
22621: PUSH
22622: LD_INT 1
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PPUSH
22633: CALL_OW 69
22637: ST_TO_ADDR
// if not tmp then
22638: LD_VAR 0 1
22642: NOT
22643: IFFALSE 22647
// exit ;
22645: GO 22692
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22647: LD_VAR 0 1
22651: PUSH
22652: LD_INT 1
22654: PPUSH
22655: LD_VAR 0 1
22659: PPUSH
22660: CALL_OW 12
22664: ARRAY
22665: PPUSH
22666: LD_INT 1
22668: PPUSH
22669: LD_INT 4
22671: PPUSH
22672: CALL_OW 12
22676: PPUSH
22677: LD_INT 3000
22679: PPUSH
22680: LD_INT 9000
22682: PPUSH
22683: CALL_OW 12
22687: PPUSH
22688: CALL_OW 492
// end ;
22692: PPOPN 1
22694: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22695: LD_EXP 40
22699: PUSH
22700: LD_EXP 55
22704: AND
22705: IFFALSE 22725
22707: GO 22709
22709: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22710: LD_INT 1
22712: PPUSH
22713: LD_OWVAR 2
22717: PPUSH
22718: LD_INT 0
22720: PPUSH
22721: CALL_OW 324
22725: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22726: LD_EXP 40
22730: PUSH
22731: LD_EXP 56
22735: AND
22736: IFFALSE 22819
22738: GO 22740
22740: DISABLE
22741: LD_INT 0
22743: PPUSH
22744: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22745: LD_ADDR_VAR 0 2
22749: PUSH
22750: LD_INT 22
22752: PUSH
22753: LD_OWVAR 2
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 21
22764: PUSH
22765: LD_INT 3
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: PPUSH
22776: CALL_OW 69
22780: ST_TO_ADDR
// if not tmp then
22781: LD_VAR 0 2
22785: NOT
22786: IFFALSE 22790
// exit ;
22788: GO 22819
// for i in tmp do
22790: LD_ADDR_VAR 0 1
22794: PUSH
22795: LD_VAR 0 2
22799: PUSH
22800: FOR_IN
22801: IFFALSE 22817
// SetBLevel ( i , 10 ) ;
22803: LD_VAR 0 1
22807: PPUSH
22808: LD_INT 10
22810: PPUSH
22811: CALL_OW 241
22815: GO 22800
22817: POP
22818: POP
// end ;
22819: PPOPN 2
22821: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22822: LD_EXP 40
22826: PUSH
22827: LD_EXP 57
22831: AND
22832: IFFALSE 22943
22834: GO 22836
22836: DISABLE
22837: LD_INT 0
22839: PPUSH
22840: PPUSH
22841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22842: LD_ADDR_VAR 0 3
22846: PUSH
22847: LD_INT 22
22849: PUSH
22850: LD_OWVAR 2
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: PUSH
22859: LD_INT 25
22861: PUSH
22862: LD_INT 1
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PPUSH
22873: CALL_OW 69
22877: ST_TO_ADDR
// if not tmp then
22878: LD_VAR 0 3
22882: NOT
22883: IFFALSE 22887
// exit ;
22885: GO 22943
// un := tmp [ rand ( 1 , tmp ) ] ;
22887: LD_ADDR_VAR 0 2
22891: PUSH
22892: LD_VAR 0 3
22896: PUSH
22897: LD_INT 1
22899: PPUSH
22900: LD_VAR 0 3
22904: PPUSH
22905: CALL_OW 12
22909: ARRAY
22910: ST_TO_ADDR
// if Crawls ( un ) then
22911: LD_VAR 0 2
22915: PPUSH
22916: CALL_OW 318
22920: IFFALSE 22931
// ComWalk ( un ) ;
22922: LD_VAR 0 2
22926: PPUSH
22927: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22931: LD_VAR 0 2
22935: PPUSH
22936: LD_INT 5
22938: PPUSH
22939: CALL_OW 336
// end ;
22943: PPOPN 3
22945: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22946: LD_EXP 40
22950: PUSH
22951: LD_EXP 58
22955: AND
22956: PUSH
22957: LD_OWVAR 67
22961: PUSH
22962: LD_INT 4
22964: LESS
22965: AND
22966: IFFALSE 22985
22968: GO 22970
22970: DISABLE
// begin Difficulty := Difficulty + 1 ;
22971: LD_ADDR_OWVAR 67
22975: PUSH
22976: LD_OWVAR 67
22980: PUSH
22981: LD_INT 1
22983: PLUS
22984: ST_TO_ADDR
// end ;
22985: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22986: LD_EXP 40
22990: PUSH
22991: LD_EXP 59
22995: AND
22996: IFFALSE 23099
22998: GO 23000
23000: DISABLE
23001: LD_INT 0
23003: PPUSH
// begin for i := 1 to 5 do
23004: LD_ADDR_VAR 0 1
23008: PUSH
23009: DOUBLE
23010: LD_INT 1
23012: DEC
23013: ST_TO_ADDR
23014: LD_INT 5
23016: PUSH
23017: FOR_TO
23018: IFFALSE 23097
// begin uc_nation := nation_nature ;
23020: LD_ADDR_OWVAR 21
23024: PUSH
23025: LD_INT 0
23027: ST_TO_ADDR
// uc_side := 0 ;
23028: LD_ADDR_OWVAR 20
23032: PUSH
23033: LD_INT 0
23035: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23036: LD_ADDR_OWVAR 29
23040: PUSH
23041: LD_INT 12
23043: PUSH
23044: LD_INT 12
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: ST_TO_ADDR
// hc_agressivity := 20 ;
23051: LD_ADDR_OWVAR 35
23055: PUSH
23056: LD_INT 20
23058: ST_TO_ADDR
// hc_class := class_tiger ;
23059: LD_ADDR_OWVAR 28
23063: PUSH
23064: LD_INT 14
23066: ST_TO_ADDR
// hc_gallery :=  ;
23067: LD_ADDR_OWVAR 33
23071: PUSH
23072: LD_STRING 
23074: ST_TO_ADDR
// hc_name :=  ;
23075: LD_ADDR_OWVAR 26
23079: PUSH
23080: LD_STRING 
23082: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
23083: CALL_OW 44
23087: PPUSH
23088: LD_INT 0
23090: PPUSH
23091: CALL_OW 51
// end ;
23095: GO 23017
23097: POP
23098: POP
// end ;
23099: PPOPN 1
23101: END
// every 0 0$1 trigger StreamModeActive and sBomb do
23102: LD_EXP 40
23106: PUSH
23107: LD_EXP 60
23111: AND
23112: IFFALSE 23121
23114: GO 23116
23116: DISABLE
// StreamSibBomb ;
23117: CALL 23122 0 0
23121: END
// export function StreamSibBomb ; var i , x , y ; begin
23122: LD_INT 0
23124: PPUSH
23125: PPUSH
23126: PPUSH
23127: PPUSH
// result := false ;
23128: LD_ADDR_VAR 0 1
23132: PUSH
23133: LD_INT 0
23135: ST_TO_ADDR
// for i := 1 to 16 do
23136: LD_ADDR_VAR 0 2
23140: PUSH
23141: DOUBLE
23142: LD_INT 1
23144: DEC
23145: ST_TO_ADDR
23146: LD_INT 16
23148: PUSH
23149: FOR_TO
23150: IFFALSE 23349
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23152: LD_ADDR_VAR 0 3
23156: PUSH
23157: LD_INT 10
23159: PUSH
23160: LD_INT 20
23162: PUSH
23163: LD_INT 30
23165: PUSH
23166: LD_INT 40
23168: PUSH
23169: LD_INT 50
23171: PUSH
23172: LD_INT 60
23174: PUSH
23175: LD_INT 70
23177: PUSH
23178: LD_INT 80
23180: PUSH
23181: LD_INT 90
23183: PUSH
23184: LD_INT 100
23186: PUSH
23187: LD_INT 110
23189: PUSH
23190: LD_INT 120
23192: PUSH
23193: LD_INT 130
23195: PUSH
23196: LD_INT 140
23198: PUSH
23199: LD_INT 150
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: PUSH
23219: LD_INT 1
23221: PPUSH
23222: LD_INT 15
23224: PPUSH
23225: CALL_OW 12
23229: ARRAY
23230: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
23231: LD_ADDR_VAR 0 4
23235: PUSH
23236: LD_INT 10
23238: PUSH
23239: LD_INT 20
23241: PUSH
23242: LD_INT 30
23244: PUSH
23245: LD_INT 40
23247: PUSH
23248: LD_INT 50
23250: PUSH
23251: LD_INT 60
23253: PUSH
23254: LD_INT 70
23256: PUSH
23257: LD_INT 80
23259: PUSH
23260: LD_INT 90
23262: PUSH
23263: LD_INT 100
23265: PUSH
23266: LD_INT 110
23268: PUSH
23269: LD_INT 120
23271: PUSH
23272: LD_INT 130
23274: PUSH
23275: LD_INT 140
23277: PUSH
23278: LD_INT 150
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 1
23300: PPUSH
23301: LD_INT 15
23303: PPUSH
23304: CALL_OW 12
23308: ARRAY
23309: ST_TO_ADDR
// if ValidHex ( x , y ) then
23310: LD_VAR 0 3
23314: PPUSH
23315: LD_VAR 0 4
23319: PPUSH
23320: CALL_OW 488
23324: IFFALSE 23347
// begin result := [ x , y ] ;
23326: LD_ADDR_VAR 0 1
23330: PUSH
23331: LD_VAR 0 3
23335: PUSH
23336: LD_VAR 0 4
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: ST_TO_ADDR
// break ;
23345: GO 23349
// end ; end ;
23347: GO 23149
23349: POP
23350: POP
// if result then
23351: LD_VAR 0 1
23355: IFFALSE 23415
// begin ToLua ( playSibBomb() ) ;
23357: LD_STRING playSibBomb()
23359: PPUSH
23360: CALL_OW 559
// wait ( 0 0$14 ) ;
23364: LD_INT 490
23366: PPUSH
23367: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23371: LD_VAR 0 1
23375: PUSH
23376: LD_INT 1
23378: ARRAY
23379: PPUSH
23380: LD_VAR 0 1
23384: PUSH
23385: LD_INT 2
23387: ARRAY
23388: PPUSH
23389: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23393: LD_VAR 0 1
23397: PUSH
23398: LD_INT 1
23400: ARRAY
23401: PPUSH
23402: LD_VAR 0 1
23406: PUSH
23407: LD_INT 2
23409: ARRAY
23410: PPUSH
23411: CALL_OW 429
// end ; end ;
23415: LD_VAR 0 1
23419: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23420: LD_EXP 40
23424: PUSH
23425: LD_EXP 62
23429: AND
23430: IFFALSE 23442
23432: GO 23434
23434: DISABLE
// YouLost (  ) ;
23435: LD_STRING 
23437: PPUSH
23438: CALL_OW 104
23442: END
// every 0 0$1 trigger StreamModeActive and sFog do
23443: LD_EXP 40
23447: PUSH
23448: LD_EXP 61
23452: AND
23453: IFFALSE 23467
23455: GO 23457
23457: DISABLE
// FogOff ( your_side ) ;
23458: LD_OWVAR 2
23462: PPUSH
23463: CALL_OW 344
23467: END
// every 0 0$1 trigger StreamModeActive and sSun do
23468: LD_EXP 40
23472: PUSH
23473: LD_EXP 63
23477: AND
23478: IFFALSE 23506
23480: GO 23482
23482: DISABLE
// begin solar_recharge_percent := 0 ;
23483: LD_ADDR_OWVAR 79
23487: PUSH
23488: LD_INT 0
23490: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23491: LD_INT 10500
23493: PPUSH
23494: CALL_OW 67
// solar_recharge_percent := 100 ;
23498: LD_ADDR_OWVAR 79
23502: PUSH
23503: LD_INT 100
23505: ST_TO_ADDR
// end ;
23506: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23507: LD_EXP 40
23511: PUSH
23512: LD_EXP 64
23516: AND
23517: IFFALSE 23756
23519: GO 23521
23521: DISABLE
23522: LD_INT 0
23524: PPUSH
23525: PPUSH
23526: PPUSH
// begin tmp := [ ] ;
23527: LD_ADDR_VAR 0 3
23531: PUSH
23532: EMPTY
23533: ST_TO_ADDR
// for i := 1 to 6 do
23534: LD_ADDR_VAR 0 1
23538: PUSH
23539: DOUBLE
23540: LD_INT 1
23542: DEC
23543: ST_TO_ADDR
23544: LD_INT 6
23546: PUSH
23547: FOR_TO
23548: IFFALSE 23653
// begin uc_nation := nation_nature ;
23550: LD_ADDR_OWVAR 21
23554: PUSH
23555: LD_INT 0
23557: ST_TO_ADDR
// uc_side := 0 ;
23558: LD_ADDR_OWVAR 20
23562: PUSH
23563: LD_INT 0
23565: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23566: LD_ADDR_OWVAR 29
23570: PUSH
23571: LD_INT 12
23573: PUSH
23574: LD_INT 12
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: ST_TO_ADDR
// hc_agressivity := 20 ;
23581: LD_ADDR_OWVAR 35
23585: PUSH
23586: LD_INT 20
23588: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23589: LD_ADDR_OWVAR 28
23593: PUSH
23594: LD_INT 17
23596: ST_TO_ADDR
// hc_gallery :=  ;
23597: LD_ADDR_OWVAR 33
23601: PUSH
23602: LD_STRING 
23604: ST_TO_ADDR
// hc_name :=  ;
23605: LD_ADDR_OWVAR 26
23609: PUSH
23610: LD_STRING 
23612: ST_TO_ADDR
// un := CreateHuman ;
23613: LD_ADDR_VAR 0 2
23617: PUSH
23618: CALL_OW 44
23622: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23623: LD_VAR 0 2
23627: PPUSH
23628: LD_INT 1
23630: PPUSH
23631: CALL_OW 51
// tmp := tmp ^ un ;
23635: LD_ADDR_VAR 0 3
23639: PUSH
23640: LD_VAR 0 3
23644: PUSH
23645: LD_VAR 0 2
23649: ADD
23650: ST_TO_ADDR
// end ;
23651: GO 23547
23653: POP
23654: POP
// repeat wait ( 0 0$1 ) ;
23655: LD_INT 35
23657: PPUSH
23658: CALL_OW 67
// for un in tmp do
23662: LD_ADDR_VAR 0 2
23666: PUSH
23667: LD_VAR 0 3
23671: PUSH
23672: FOR_IN
23673: IFFALSE 23747
// begin if IsDead ( un ) then
23675: LD_VAR 0 2
23679: PPUSH
23680: CALL_OW 301
23684: IFFALSE 23704
// begin tmp := tmp diff un ;
23686: LD_ADDR_VAR 0 3
23690: PUSH
23691: LD_VAR 0 3
23695: PUSH
23696: LD_VAR 0 2
23700: DIFF
23701: ST_TO_ADDR
// continue ;
23702: GO 23672
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23704: LD_VAR 0 2
23708: PPUSH
23709: LD_INT 3
23711: PUSH
23712: LD_INT 22
23714: PUSH
23715: LD_INT 0
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: PPUSH
23726: CALL_OW 69
23730: PPUSH
23731: LD_VAR 0 2
23735: PPUSH
23736: CALL_OW 74
23740: PPUSH
23741: CALL_OW 115
// end ;
23745: GO 23672
23747: POP
23748: POP
// until not tmp ;
23749: LD_VAR 0 3
23753: NOT
23754: IFFALSE 23655
// end ;
23756: PPOPN 3
23758: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23759: LD_EXP 40
23763: PUSH
23764: LD_EXP 65
23768: AND
23769: IFFALSE 23823
23771: GO 23773
23773: DISABLE
// begin ToLua ( displayTroll(); ) ;
23774: LD_STRING displayTroll();
23776: PPUSH
23777: CALL_OW 559
// wait ( 3 3$00 ) ;
23781: LD_INT 6300
23783: PPUSH
23784: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23788: LD_STRING hideTroll();
23790: PPUSH
23791: CALL_OW 559
// wait ( 1 1$00 ) ;
23795: LD_INT 2100
23797: PPUSH
23798: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23802: LD_STRING displayTroll();
23804: PPUSH
23805: CALL_OW 559
// wait ( 1 1$00 ) ;
23809: LD_INT 2100
23811: PPUSH
23812: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23816: LD_STRING hideTroll();
23818: PPUSH
23819: CALL_OW 559
// end ;
23823: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23824: LD_EXP 40
23828: PUSH
23829: LD_EXP 66
23833: AND
23834: IFFALSE 23897
23836: GO 23838
23838: DISABLE
23839: LD_INT 0
23841: PPUSH
// begin p := 0 ;
23842: LD_ADDR_VAR 0 1
23846: PUSH
23847: LD_INT 0
23849: ST_TO_ADDR
// repeat game_speed := 1 ;
23850: LD_ADDR_OWVAR 65
23854: PUSH
23855: LD_INT 1
23857: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23858: LD_INT 35
23860: PPUSH
23861: CALL_OW 67
// p := p + 1 ;
23865: LD_ADDR_VAR 0 1
23869: PUSH
23870: LD_VAR 0 1
23874: PUSH
23875: LD_INT 1
23877: PLUS
23878: ST_TO_ADDR
// until p >= 60 ;
23879: LD_VAR 0 1
23883: PUSH
23884: LD_INT 60
23886: GREATEREQUAL
23887: IFFALSE 23850
// game_speed := 4 ;
23889: LD_ADDR_OWVAR 65
23893: PUSH
23894: LD_INT 4
23896: ST_TO_ADDR
// end ;
23897: PPOPN 1
23899: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23900: LD_EXP 40
23904: PUSH
23905: LD_EXP 67
23909: AND
23910: IFFALSE 24056
23912: GO 23914
23914: DISABLE
23915: LD_INT 0
23917: PPUSH
23918: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23919: LD_ADDR_VAR 0 1
23923: PUSH
23924: LD_INT 22
23926: PUSH
23927: LD_OWVAR 2
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: PUSH
23936: LD_INT 2
23938: PUSH
23939: LD_INT 30
23941: PUSH
23942: LD_INT 0
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 30
23951: PUSH
23952: LD_INT 1
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: LIST
23963: PUSH
23964: EMPTY
23965: LIST
23966: LIST
23967: PPUSH
23968: CALL_OW 69
23972: ST_TO_ADDR
// if not depot then
23973: LD_VAR 0 1
23977: NOT
23978: IFFALSE 23982
// exit ;
23980: GO 24056
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23982: LD_ADDR_VAR 0 2
23986: PUSH
23987: LD_VAR 0 1
23991: PUSH
23992: LD_INT 1
23994: PPUSH
23995: LD_VAR 0 1
23999: PPUSH
24000: CALL_OW 12
24004: ARRAY
24005: PPUSH
24006: CALL_OW 274
24010: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
24011: LD_VAR 0 2
24015: PPUSH
24016: LD_INT 1
24018: PPUSH
24019: LD_INT 0
24021: PPUSH
24022: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
24026: LD_VAR 0 2
24030: PPUSH
24031: LD_INT 2
24033: PPUSH
24034: LD_INT 0
24036: PPUSH
24037: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
24041: LD_VAR 0 2
24045: PPUSH
24046: LD_INT 3
24048: PPUSH
24049: LD_INT 0
24051: PPUSH
24052: CALL_OW 277
// end ;
24056: PPOPN 2
24058: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
24059: LD_EXP 40
24063: PUSH
24064: LD_EXP 68
24068: AND
24069: IFFALSE 24166
24071: GO 24073
24073: DISABLE
24074: LD_INT 0
24076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24077: LD_ADDR_VAR 0 1
24081: PUSH
24082: LD_INT 22
24084: PUSH
24085: LD_OWVAR 2
24089: PUSH
24090: EMPTY
24091: LIST
24092: LIST
24093: PUSH
24094: LD_INT 21
24096: PUSH
24097: LD_INT 1
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: PUSH
24104: LD_INT 3
24106: PUSH
24107: LD_INT 23
24109: PUSH
24110: LD_INT 0
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: EMPTY
24118: LIST
24119: LIST
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: LIST
24125: PPUSH
24126: CALL_OW 69
24130: ST_TO_ADDR
// if not tmp then
24131: LD_VAR 0 1
24135: NOT
24136: IFFALSE 24140
// exit ;
24138: GO 24166
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
24140: LD_VAR 0 1
24144: PUSH
24145: LD_INT 1
24147: PPUSH
24148: LD_VAR 0 1
24152: PPUSH
24153: CALL_OW 12
24157: ARRAY
24158: PPUSH
24159: LD_INT 200
24161: PPUSH
24162: CALL_OW 234
// end ;
24166: PPOPN 1
24168: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
24169: LD_EXP 40
24173: PUSH
24174: LD_EXP 69
24178: AND
24179: IFFALSE 24258
24181: GO 24183
24183: DISABLE
24184: LD_INT 0
24186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
24187: LD_ADDR_VAR 0 1
24191: PUSH
24192: LD_INT 22
24194: PUSH
24195: LD_OWVAR 2
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: PUSH
24204: LD_INT 21
24206: PUSH
24207: LD_INT 2
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: PUSH
24214: EMPTY
24215: LIST
24216: LIST
24217: PPUSH
24218: CALL_OW 69
24222: ST_TO_ADDR
// if not tmp then
24223: LD_VAR 0 1
24227: NOT
24228: IFFALSE 24232
// exit ;
24230: GO 24258
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
24232: LD_VAR 0 1
24236: PUSH
24237: LD_INT 1
24239: PPUSH
24240: LD_VAR 0 1
24244: PPUSH
24245: CALL_OW 12
24249: ARRAY
24250: PPUSH
24251: LD_INT 60
24253: PPUSH
24254: CALL_OW 234
// end ;
24258: PPOPN 1
24260: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
24261: LD_EXP 40
24265: PUSH
24266: LD_EXP 70
24270: AND
24271: IFFALSE 24370
24273: GO 24275
24275: DISABLE
24276: LD_INT 0
24278: PPUSH
24279: PPUSH
// begin enable ;
24280: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24281: LD_ADDR_VAR 0 1
24285: PUSH
24286: LD_INT 22
24288: PUSH
24289: LD_OWVAR 2
24293: PUSH
24294: EMPTY
24295: LIST
24296: LIST
24297: PUSH
24298: LD_INT 61
24300: PUSH
24301: EMPTY
24302: LIST
24303: PUSH
24304: LD_INT 33
24306: PUSH
24307: LD_INT 2
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: LIST
24318: PPUSH
24319: CALL_OW 69
24323: ST_TO_ADDR
// if not tmp then
24324: LD_VAR 0 1
24328: NOT
24329: IFFALSE 24333
// exit ;
24331: GO 24370
// for i in tmp do
24333: LD_ADDR_VAR 0 2
24337: PUSH
24338: LD_VAR 0 1
24342: PUSH
24343: FOR_IN
24344: IFFALSE 24368
// if IsControledBy ( i ) then
24346: LD_VAR 0 2
24350: PPUSH
24351: CALL_OW 312
24355: IFFALSE 24366
// ComUnlink ( i ) ;
24357: LD_VAR 0 2
24361: PPUSH
24362: CALL_OW 136
24366: GO 24343
24368: POP
24369: POP
// end ;
24370: PPOPN 2
24372: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24373: LD_EXP 40
24377: PUSH
24378: LD_EXP 71
24382: AND
24383: IFFALSE 24523
24385: GO 24387
24387: DISABLE
24388: LD_INT 0
24390: PPUSH
24391: PPUSH
// begin ToLua ( displayPowell(); ) ;
24392: LD_STRING displayPowell();
24394: PPUSH
24395: CALL_OW 559
// uc_side := 0 ;
24399: LD_ADDR_OWVAR 20
24403: PUSH
24404: LD_INT 0
24406: ST_TO_ADDR
// uc_nation := 2 ;
24407: LD_ADDR_OWVAR 21
24411: PUSH
24412: LD_INT 2
24414: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24415: LD_ADDR_OWVAR 37
24419: PUSH
24420: LD_INT 14
24422: ST_TO_ADDR
// vc_engine := engine_siberite ;
24423: LD_ADDR_OWVAR 39
24427: PUSH
24428: LD_INT 3
24430: ST_TO_ADDR
// vc_control := control_apeman ;
24431: LD_ADDR_OWVAR 38
24435: PUSH
24436: LD_INT 5
24438: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24439: LD_ADDR_OWVAR 40
24443: PUSH
24444: LD_INT 29
24446: ST_TO_ADDR
// un := CreateVehicle ;
24447: LD_ADDR_VAR 0 2
24451: PUSH
24452: CALL_OW 45
24456: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24457: LD_VAR 0 2
24461: PPUSH
24462: LD_INT 1
24464: PPUSH
24465: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24469: LD_INT 35
24471: PPUSH
24472: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24476: LD_VAR 0 2
24480: PPUSH
24481: LD_INT 22
24483: PUSH
24484: LD_OWVAR 2
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PPUSH
24493: CALL_OW 69
24497: PPUSH
24498: LD_VAR 0 2
24502: PPUSH
24503: CALL_OW 74
24507: PPUSH
24508: CALL_OW 115
// until IsDead ( un ) ;
24512: LD_VAR 0 2
24516: PPUSH
24517: CALL_OW 301
24521: IFFALSE 24469
// end ;
24523: PPOPN 2
24525: END
// every 0 0$1 trigger StreamModeActive and sStu do
24526: LD_EXP 40
24530: PUSH
24531: LD_EXP 79
24535: AND
24536: IFFALSE 24552
24538: GO 24540
24540: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24541: LD_STRING displayStucuk();
24543: PPUSH
24544: CALL_OW 559
// ResetFog ;
24548: CALL_OW 335
// end ;
24552: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24553: LD_EXP 40
24557: PUSH
24558: LD_EXP 72
24562: AND
24563: IFFALSE 24704
24565: GO 24567
24567: DISABLE
24568: LD_INT 0
24570: PPUSH
24571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24572: LD_ADDR_VAR 0 2
24576: PUSH
24577: LD_INT 22
24579: PUSH
24580: LD_OWVAR 2
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 21
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: EMPTY
24600: LIST
24601: LIST
24602: PPUSH
24603: CALL_OW 69
24607: ST_TO_ADDR
// if not tmp then
24608: LD_VAR 0 2
24612: NOT
24613: IFFALSE 24617
// exit ;
24615: GO 24704
// un := tmp [ rand ( 1 , tmp ) ] ;
24617: LD_ADDR_VAR 0 1
24621: PUSH
24622: LD_VAR 0 2
24626: PUSH
24627: LD_INT 1
24629: PPUSH
24630: LD_VAR 0 2
24634: PPUSH
24635: CALL_OW 12
24639: ARRAY
24640: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24641: LD_VAR 0 1
24645: PPUSH
24646: LD_INT 0
24648: PPUSH
24649: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24653: LD_VAR 0 1
24657: PPUSH
24658: LD_OWVAR 3
24662: PUSH
24663: LD_VAR 0 1
24667: DIFF
24668: PPUSH
24669: LD_VAR 0 1
24673: PPUSH
24674: CALL_OW 74
24678: PPUSH
24679: CALL_OW 115
// wait ( 0 0$20 ) ;
24683: LD_INT 700
24685: PPUSH
24686: CALL_OW 67
// SetSide ( un , your_side ) ;
24690: LD_VAR 0 1
24694: PPUSH
24695: LD_OWVAR 2
24699: PPUSH
24700: CALL_OW 235
// end ;
24704: PPOPN 2
24706: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24707: LD_EXP 40
24711: PUSH
24712: LD_EXP 73
24716: AND
24717: IFFALSE 24823
24719: GO 24721
24721: DISABLE
24722: LD_INT 0
24724: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24725: LD_ADDR_VAR 0 1
24729: PUSH
24730: LD_INT 22
24732: PUSH
24733: LD_OWVAR 2
24737: PUSH
24738: EMPTY
24739: LIST
24740: LIST
24741: PUSH
24742: LD_INT 2
24744: PUSH
24745: LD_INT 30
24747: PUSH
24748: LD_INT 0
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 30
24757: PUSH
24758: LD_INT 1
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: EMPTY
24766: LIST
24767: LIST
24768: LIST
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PPUSH
24774: CALL_OW 69
24778: ST_TO_ADDR
// if not depot then
24779: LD_VAR 0 1
24783: NOT
24784: IFFALSE 24788
// exit ;
24786: GO 24823
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24788: LD_VAR 0 1
24792: PUSH
24793: LD_INT 1
24795: ARRAY
24796: PPUSH
24797: CALL_OW 250
24801: PPUSH
24802: LD_VAR 0 1
24806: PUSH
24807: LD_INT 1
24809: ARRAY
24810: PPUSH
24811: CALL_OW 251
24815: PPUSH
24816: LD_INT 70
24818: PPUSH
24819: CALL_OW 495
// end ;
24823: PPOPN 1
24825: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24826: LD_EXP 40
24830: PUSH
24831: LD_EXP 74
24835: AND
24836: IFFALSE 25047
24838: GO 24840
24840: DISABLE
24841: LD_INT 0
24843: PPUSH
24844: PPUSH
24845: PPUSH
24846: PPUSH
24847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24848: LD_ADDR_VAR 0 5
24852: PUSH
24853: LD_INT 22
24855: PUSH
24856: LD_OWVAR 2
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PUSH
24865: LD_INT 21
24867: PUSH
24868: LD_INT 1
24870: PUSH
24871: EMPTY
24872: LIST
24873: LIST
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PPUSH
24879: CALL_OW 69
24883: ST_TO_ADDR
// if not tmp then
24884: LD_VAR 0 5
24888: NOT
24889: IFFALSE 24893
// exit ;
24891: GO 25047
// for i in tmp do
24893: LD_ADDR_VAR 0 1
24897: PUSH
24898: LD_VAR 0 5
24902: PUSH
24903: FOR_IN
24904: IFFALSE 25045
// begin d := rand ( 0 , 5 ) ;
24906: LD_ADDR_VAR 0 4
24910: PUSH
24911: LD_INT 0
24913: PPUSH
24914: LD_INT 5
24916: PPUSH
24917: CALL_OW 12
24921: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24922: LD_ADDR_VAR 0 2
24926: PUSH
24927: LD_VAR 0 1
24931: PPUSH
24932: CALL_OW 250
24936: PPUSH
24937: LD_VAR 0 4
24941: PPUSH
24942: LD_INT 3
24944: PPUSH
24945: LD_INT 12
24947: PPUSH
24948: CALL_OW 12
24952: PPUSH
24953: CALL_OW 272
24957: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24958: LD_ADDR_VAR 0 3
24962: PUSH
24963: LD_VAR 0 1
24967: PPUSH
24968: CALL_OW 251
24972: PPUSH
24973: LD_VAR 0 4
24977: PPUSH
24978: LD_INT 3
24980: PPUSH
24981: LD_INT 12
24983: PPUSH
24984: CALL_OW 12
24988: PPUSH
24989: CALL_OW 273
24993: ST_TO_ADDR
// if ValidHex ( x , y ) then
24994: LD_VAR 0 2
24998: PPUSH
24999: LD_VAR 0 3
25003: PPUSH
25004: CALL_OW 488
25008: IFFALSE 25043
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
25010: LD_VAR 0 1
25014: PPUSH
25015: LD_VAR 0 2
25019: PPUSH
25020: LD_VAR 0 3
25024: PPUSH
25025: LD_INT 3
25027: PPUSH
25028: LD_INT 6
25030: PPUSH
25031: CALL_OW 12
25035: PPUSH
25036: LD_INT 1
25038: PPUSH
25039: CALL_OW 483
// end ;
25043: GO 24903
25045: POP
25046: POP
// end ;
25047: PPOPN 5
25049: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
25050: LD_EXP 40
25054: PUSH
25055: LD_EXP 75
25059: AND
25060: IFFALSE 25154
25062: GO 25064
25064: DISABLE
25065: LD_INT 0
25067: PPUSH
25068: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
25069: LD_ADDR_VAR 0 2
25073: PUSH
25074: LD_INT 22
25076: PUSH
25077: LD_OWVAR 2
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 32
25088: PUSH
25089: LD_INT 1
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 21
25098: PUSH
25099: LD_INT 2
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: LIST
25110: PPUSH
25111: CALL_OW 69
25115: ST_TO_ADDR
// if not tmp then
25116: LD_VAR 0 2
25120: NOT
25121: IFFALSE 25125
// exit ;
25123: GO 25154
// for i in tmp do
25125: LD_ADDR_VAR 0 1
25129: PUSH
25130: LD_VAR 0 2
25134: PUSH
25135: FOR_IN
25136: IFFALSE 25152
// SetFuel ( i , 0 ) ;
25138: LD_VAR 0 1
25142: PPUSH
25143: LD_INT 0
25145: PPUSH
25146: CALL_OW 240
25150: GO 25135
25152: POP
25153: POP
// end ;
25154: PPOPN 2
25156: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
25157: LD_EXP 40
25161: PUSH
25162: LD_EXP 76
25166: AND
25167: IFFALSE 25233
25169: GO 25171
25171: DISABLE
25172: LD_INT 0
25174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25175: LD_ADDR_VAR 0 1
25179: PUSH
25180: LD_INT 22
25182: PUSH
25183: LD_OWVAR 2
25187: PUSH
25188: EMPTY
25189: LIST
25190: LIST
25191: PUSH
25192: LD_INT 30
25194: PUSH
25195: LD_INT 29
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PPUSH
25206: CALL_OW 69
25210: ST_TO_ADDR
// if not tmp then
25211: LD_VAR 0 1
25215: NOT
25216: IFFALSE 25220
// exit ;
25218: GO 25233
// DestroyUnit ( tmp [ 1 ] ) ;
25220: LD_VAR 0 1
25224: PUSH
25225: LD_INT 1
25227: ARRAY
25228: PPUSH
25229: CALL_OW 65
// end ;
25233: PPOPN 1
25235: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
25236: LD_EXP 40
25240: PUSH
25241: LD_EXP 78
25245: AND
25246: IFFALSE 25375
25248: GO 25250
25250: DISABLE
25251: LD_INT 0
25253: PPUSH
// begin uc_side := 0 ;
25254: LD_ADDR_OWVAR 20
25258: PUSH
25259: LD_INT 0
25261: ST_TO_ADDR
// uc_nation := nation_arabian ;
25262: LD_ADDR_OWVAR 21
25266: PUSH
25267: LD_INT 2
25269: ST_TO_ADDR
// hc_gallery :=  ;
25270: LD_ADDR_OWVAR 33
25274: PUSH
25275: LD_STRING 
25277: ST_TO_ADDR
// hc_name :=  ;
25278: LD_ADDR_OWVAR 26
25282: PUSH
25283: LD_STRING 
25285: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25286: LD_INT 1
25288: PPUSH
25289: LD_INT 11
25291: PPUSH
25292: LD_INT 10
25294: PPUSH
25295: CALL_OW 380
// un := CreateHuman ;
25299: LD_ADDR_VAR 0 1
25303: PUSH
25304: CALL_OW 44
25308: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25309: LD_VAR 0 1
25313: PPUSH
25314: LD_INT 1
25316: PPUSH
25317: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25321: LD_INT 35
25323: PPUSH
25324: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25328: LD_VAR 0 1
25332: PPUSH
25333: LD_INT 22
25335: PUSH
25336: LD_OWVAR 2
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PPUSH
25345: CALL_OW 69
25349: PPUSH
25350: LD_VAR 0 1
25354: PPUSH
25355: CALL_OW 74
25359: PPUSH
25360: CALL_OW 115
// until IsDead ( un ) ;
25364: LD_VAR 0 1
25368: PPUSH
25369: CALL_OW 301
25373: IFFALSE 25321
// end ;
25375: PPOPN 1
25377: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25378: LD_EXP 40
25382: PUSH
25383: LD_EXP 80
25387: AND
25388: IFFALSE 25400
25390: GO 25392
25392: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25393: LD_STRING earthquake(getX(game), 0, 32)
25395: PPUSH
25396: CALL_OW 559
25400: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25401: LD_EXP 40
25405: PUSH
25406: LD_EXP 81
25410: AND
25411: IFFALSE 25502
25413: GO 25415
25415: DISABLE
25416: LD_INT 0
25418: PPUSH
// begin enable ;
25419: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25420: LD_ADDR_VAR 0 1
25424: PUSH
25425: LD_INT 22
25427: PUSH
25428: LD_OWVAR 2
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 21
25439: PUSH
25440: LD_INT 2
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 33
25449: PUSH
25450: LD_INT 3
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: LIST
25461: PPUSH
25462: CALL_OW 69
25466: ST_TO_ADDR
// if not tmp then
25467: LD_VAR 0 1
25471: NOT
25472: IFFALSE 25476
// exit ;
25474: GO 25502
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25476: LD_VAR 0 1
25480: PUSH
25481: LD_INT 1
25483: PPUSH
25484: LD_VAR 0 1
25488: PPUSH
25489: CALL_OW 12
25493: ARRAY
25494: PPUSH
25495: LD_INT 1
25497: PPUSH
25498: CALL_OW 234
// end ;
25502: PPOPN 1
25504: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25505: LD_EXP 40
25509: PUSH
25510: LD_EXP 82
25514: AND
25515: IFFALSE 25656
25517: GO 25519
25519: DISABLE
25520: LD_INT 0
25522: PPUSH
25523: PPUSH
25524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25525: LD_ADDR_VAR 0 3
25529: PUSH
25530: LD_INT 22
25532: PUSH
25533: LD_OWVAR 2
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 25
25544: PUSH
25545: LD_INT 1
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PPUSH
25556: CALL_OW 69
25560: ST_TO_ADDR
// if not tmp then
25561: LD_VAR 0 3
25565: NOT
25566: IFFALSE 25570
// exit ;
25568: GO 25656
// un := tmp [ rand ( 1 , tmp ) ] ;
25570: LD_ADDR_VAR 0 2
25574: PUSH
25575: LD_VAR 0 3
25579: PUSH
25580: LD_INT 1
25582: PPUSH
25583: LD_VAR 0 3
25587: PPUSH
25588: CALL_OW 12
25592: ARRAY
25593: ST_TO_ADDR
// if Crawls ( un ) then
25594: LD_VAR 0 2
25598: PPUSH
25599: CALL_OW 318
25603: IFFALSE 25614
// ComWalk ( un ) ;
25605: LD_VAR 0 2
25609: PPUSH
25610: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25614: LD_VAR 0 2
25618: PPUSH
25619: LD_INT 9
25621: PPUSH
25622: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25626: LD_INT 28
25628: PPUSH
25629: LD_OWVAR 2
25633: PPUSH
25634: LD_INT 2
25636: PPUSH
25637: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25641: LD_INT 29
25643: PPUSH
25644: LD_OWVAR 2
25648: PPUSH
25649: LD_INT 2
25651: PPUSH
25652: CALL_OW 322
// end ;
25656: PPOPN 3
25658: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25659: LD_EXP 40
25663: PUSH
25664: LD_EXP 83
25668: AND
25669: IFFALSE 25780
25671: GO 25673
25673: DISABLE
25674: LD_INT 0
25676: PPUSH
25677: PPUSH
25678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25679: LD_ADDR_VAR 0 3
25683: PUSH
25684: LD_INT 22
25686: PUSH
25687: LD_OWVAR 2
25691: PUSH
25692: EMPTY
25693: LIST
25694: LIST
25695: PUSH
25696: LD_INT 25
25698: PUSH
25699: LD_INT 1
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PPUSH
25710: CALL_OW 69
25714: ST_TO_ADDR
// if not tmp then
25715: LD_VAR 0 3
25719: NOT
25720: IFFALSE 25724
// exit ;
25722: GO 25780
// un := tmp [ rand ( 1 , tmp ) ] ;
25724: LD_ADDR_VAR 0 2
25728: PUSH
25729: LD_VAR 0 3
25733: PUSH
25734: LD_INT 1
25736: PPUSH
25737: LD_VAR 0 3
25741: PPUSH
25742: CALL_OW 12
25746: ARRAY
25747: ST_TO_ADDR
// if Crawls ( un ) then
25748: LD_VAR 0 2
25752: PPUSH
25753: CALL_OW 318
25757: IFFALSE 25768
// ComWalk ( un ) ;
25759: LD_VAR 0 2
25763: PPUSH
25764: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25768: LD_VAR 0 2
25772: PPUSH
25773: LD_INT 8
25775: PPUSH
25776: CALL_OW 336
// end ;
25780: PPOPN 3
25782: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25783: LD_EXP 40
25787: PUSH
25788: LD_EXP 84
25792: AND
25793: IFFALSE 25937
25795: GO 25797
25797: DISABLE
25798: LD_INT 0
25800: PPUSH
25801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25802: LD_ADDR_VAR 0 2
25806: PUSH
25807: LD_INT 22
25809: PUSH
25810: LD_OWVAR 2
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 21
25821: PUSH
25822: LD_INT 2
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 2
25831: PUSH
25832: LD_INT 34
25834: PUSH
25835: LD_INT 12
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 34
25844: PUSH
25845: LD_INT 51
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PUSH
25852: LD_INT 34
25854: PUSH
25855: LD_INT 32
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: LIST
25866: LIST
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: LIST
25872: PPUSH
25873: CALL_OW 69
25877: ST_TO_ADDR
// if not tmp then
25878: LD_VAR 0 2
25882: NOT
25883: IFFALSE 25887
// exit ;
25885: GO 25937
// for i in tmp do
25887: LD_ADDR_VAR 0 1
25891: PUSH
25892: LD_VAR 0 2
25896: PUSH
25897: FOR_IN
25898: IFFALSE 25935
// if GetCargo ( i , mat_artifact ) = 0 then
25900: LD_VAR 0 1
25904: PPUSH
25905: LD_INT 4
25907: PPUSH
25908: CALL_OW 289
25912: PUSH
25913: LD_INT 0
25915: EQUAL
25916: IFFALSE 25933
// SetCargo ( i , mat_siberit , 100 ) ;
25918: LD_VAR 0 1
25922: PPUSH
25923: LD_INT 3
25925: PPUSH
25926: LD_INT 100
25928: PPUSH
25929: CALL_OW 290
25933: GO 25897
25935: POP
25936: POP
// end ;
25937: PPOPN 2
25939: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25940: LD_EXP 40
25944: PUSH
25945: LD_EXP 85
25949: AND
25950: IFFALSE 26133
25952: GO 25954
25954: DISABLE
25955: LD_INT 0
25957: PPUSH
25958: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25959: LD_ADDR_VAR 0 2
25963: PUSH
25964: LD_INT 22
25966: PUSH
25967: LD_OWVAR 2
25971: PUSH
25972: EMPTY
25973: LIST
25974: LIST
25975: PPUSH
25976: CALL_OW 69
25980: ST_TO_ADDR
// if not tmp then
25981: LD_VAR 0 2
25985: NOT
25986: IFFALSE 25990
// exit ;
25988: GO 26133
// for i := 1 to 2 do
25990: LD_ADDR_VAR 0 1
25994: PUSH
25995: DOUBLE
25996: LD_INT 1
25998: DEC
25999: ST_TO_ADDR
26000: LD_INT 2
26002: PUSH
26003: FOR_TO
26004: IFFALSE 26131
// begin uc_side := your_side ;
26006: LD_ADDR_OWVAR 20
26010: PUSH
26011: LD_OWVAR 2
26015: ST_TO_ADDR
// uc_nation := nation_american ;
26016: LD_ADDR_OWVAR 21
26020: PUSH
26021: LD_INT 1
26023: ST_TO_ADDR
// vc_chassis := us_morphling ;
26024: LD_ADDR_OWVAR 37
26028: PUSH
26029: LD_INT 5
26031: ST_TO_ADDR
// vc_engine := engine_siberite ;
26032: LD_ADDR_OWVAR 39
26036: PUSH
26037: LD_INT 3
26039: ST_TO_ADDR
// vc_control := control_computer ;
26040: LD_ADDR_OWVAR 38
26044: PUSH
26045: LD_INT 3
26047: ST_TO_ADDR
// vc_weapon := us_double_laser ;
26048: LD_ADDR_OWVAR 40
26052: PUSH
26053: LD_INT 10
26055: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
26056: LD_VAR 0 2
26060: PUSH
26061: LD_INT 1
26063: ARRAY
26064: PPUSH
26065: CALL_OW 310
26069: NOT
26070: IFFALSE 26117
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
26072: CALL_OW 45
26076: PPUSH
26077: LD_VAR 0 2
26081: PUSH
26082: LD_INT 1
26084: ARRAY
26085: PPUSH
26086: CALL_OW 250
26090: PPUSH
26091: LD_VAR 0 2
26095: PUSH
26096: LD_INT 1
26098: ARRAY
26099: PPUSH
26100: CALL_OW 251
26104: PPUSH
26105: LD_INT 12
26107: PPUSH
26108: LD_INT 1
26110: PPUSH
26111: CALL_OW 50
26115: GO 26129
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26117: CALL_OW 45
26121: PPUSH
26122: LD_INT 1
26124: PPUSH
26125: CALL_OW 51
// end ;
26129: GO 26003
26131: POP
26132: POP
// end ;
26133: PPOPN 2
26135: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
26136: LD_EXP 40
26140: PUSH
26141: LD_EXP 86
26145: AND
26146: IFFALSE 26368
26148: GO 26150
26150: DISABLE
26151: LD_INT 0
26153: PPUSH
26154: PPUSH
26155: PPUSH
26156: PPUSH
26157: PPUSH
26158: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26159: LD_ADDR_VAR 0 6
26163: PUSH
26164: LD_INT 22
26166: PUSH
26167: LD_OWVAR 2
26171: PUSH
26172: EMPTY
26173: LIST
26174: LIST
26175: PUSH
26176: LD_INT 21
26178: PUSH
26179: LD_INT 1
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: PUSH
26186: LD_INT 3
26188: PUSH
26189: LD_INT 23
26191: PUSH
26192: LD_INT 0
26194: PUSH
26195: EMPTY
26196: LIST
26197: LIST
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: LIST
26207: PPUSH
26208: CALL_OW 69
26212: ST_TO_ADDR
// if not tmp then
26213: LD_VAR 0 6
26217: NOT
26218: IFFALSE 26222
// exit ;
26220: GO 26368
// s1 := rand ( 1 , 4 ) ;
26222: LD_ADDR_VAR 0 2
26226: PUSH
26227: LD_INT 1
26229: PPUSH
26230: LD_INT 4
26232: PPUSH
26233: CALL_OW 12
26237: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
26238: LD_ADDR_VAR 0 4
26242: PUSH
26243: LD_VAR 0 6
26247: PUSH
26248: LD_INT 1
26250: ARRAY
26251: PPUSH
26252: LD_VAR 0 2
26256: PPUSH
26257: CALL_OW 259
26261: ST_TO_ADDR
// if s1 = 1 then
26262: LD_VAR 0 2
26266: PUSH
26267: LD_INT 1
26269: EQUAL
26270: IFFALSE 26290
// s2 := rand ( 2 , 4 ) else
26272: LD_ADDR_VAR 0 3
26276: PUSH
26277: LD_INT 2
26279: PPUSH
26280: LD_INT 4
26282: PPUSH
26283: CALL_OW 12
26287: ST_TO_ADDR
26288: GO 26298
// s2 := 1 ;
26290: LD_ADDR_VAR 0 3
26294: PUSH
26295: LD_INT 1
26297: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26298: LD_ADDR_VAR 0 5
26302: PUSH
26303: LD_VAR 0 6
26307: PUSH
26308: LD_INT 1
26310: ARRAY
26311: PPUSH
26312: LD_VAR 0 3
26316: PPUSH
26317: CALL_OW 259
26321: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26322: LD_VAR 0 6
26326: PUSH
26327: LD_INT 1
26329: ARRAY
26330: PPUSH
26331: LD_VAR 0 2
26335: PPUSH
26336: LD_VAR 0 5
26340: PPUSH
26341: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26345: LD_VAR 0 6
26349: PUSH
26350: LD_INT 1
26352: ARRAY
26353: PPUSH
26354: LD_VAR 0 3
26358: PPUSH
26359: LD_VAR 0 4
26363: PPUSH
26364: CALL_OW 237
// end ;
26368: PPOPN 6
26370: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26371: LD_EXP 40
26375: PUSH
26376: LD_EXP 87
26380: AND
26381: IFFALSE 26460
26383: GO 26385
26385: DISABLE
26386: LD_INT 0
26388: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26389: LD_ADDR_VAR 0 1
26393: PUSH
26394: LD_INT 22
26396: PUSH
26397: LD_OWVAR 2
26401: PUSH
26402: EMPTY
26403: LIST
26404: LIST
26405: PUSH
26406: LD_INT 30
26408: PUSH
26409: LD_INT 3
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PPUSH
26420: CALL_OW 69
26424: ST_TO_ADDR
// if not tmp then
26425: LD_VAR 0 1
26429: NOT
26430: IFFALSE 26434
// exit ;
26432: GO 26460
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26434: LD_VAR 0 1
26438: PUSH
26439: LD_INT 1
26441: PPUSH
26442: LD_VAR 0 1
26446: PPUSH
26447: CALL_OW 12
26451: ARRAY
26452: PPUSH
26453: LD_INT 1
26455: PPUSH
26456: CALL_OW 234
// end ;
26460: PPOPN 1
26462: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26463: LD_EXP 40
26467: PUSH
26468: LD_EXP 88
26472: AND
26473: IFFALSE 26585
26475: GO 26477
26477: DISABLE
26478: LD_INT 0
26480: PPUSH
26481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26482: LD_ADDR_VAR 0 2
26486: PUSH
26487: LD_INT 22
26489: PUSH
26490: LD_OWVAR 2
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 2
26501: PUSH
26502: LD_INT 30
26504: PUSH
26505: LD_INT 27
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 30
26514: PUSH
26515: LD_INT 26
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 30
26524: PUSH
26525: LD_INT 28
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PPUSH
26542: CALL_OW 69
26546: ST_TO_ADDR
// if not tmp then
26547: LD_VAR 0 2
26551: NOT
26552: IFFALSE 26556
// exit ;
26554: GO 26585
// for i in tmp do
26556: LD_ADDR_VAR 0 1
26560: PUSH
26561: LD_VAR 0 2
26565: PUSH
26566: FOR_IN
26567: IFFALSE 26583
// SetLives ( i , 1 ) ;
26569: LD_VAR 0 1
26573: PPUSH
26574: LD_INT 1
26576: PPUSH
26577: CALL_OW 234
26581: GO 26566
26583: POP
26584: POP
// end ;
26585: PPOPN 2
26587: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26588: LD_EXP 40
26592: PUSH
26593: LD_EXP 89
26597: AND
26598: IFFALSE 26885
26600: GO 26602
26602: DISABLE
26603: LD_INT 0
26605: PPUSH
26606: PPUSH
26607: PPUSH
// begin i := rand ( 1 , 7 ) ;
26608: LD_ADDR_VAR 0 1
26612: PUSH
26613: LD_INT 1
26615: PPUSH
26616: LD_INT 7
26618: PPUSH
26619: CALL_OW 12
26623: ST_TO_ADDR
// case i of 1 :
26624: LD_VAR 0 1
26628: PUSH
26629: LD_INT 1
26631: DOUBLE
26632: EQUAL
26633: IFTRUE 26637
26635: GO 26647
26637: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26638: LD_STRING earthquake(getX(game), 0, 32)
26640: PPUSH
26641: CALL_OW 559
26645: GO 26885
26647: LD_INT 2
26649: DOUBLE
26650: EQUAL
26651: IFTRUE 26655
26653: GO 26669
26655: POP
// begin ToLua ( displayStucuk(); ) ;
26656: LD_STRING displayStucuk();
26658: PPUSH
26659: CALL_OW 559
// ResetFog ;
26663: CALL_OW 335
// end ; 3 :
26667: GO 26885
26669: LD_INT 3
26671: DOUBLE
26672: EQUAL
26673: IFTRUE 26677
26675: GO 26781
26677: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26678: LD_ADDR_VAR 0 2
26682: PUSH
26683: LD_INT 22
26685: PUSH
26686: LD_OWVAR 2
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 25
26697: PUSH
26698: LD_INT 1
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PPUSH
26709: CALL_OW 69
26713: ST_TO_ADDR
// if not tmp then
26714: LD_VAR 0 2
26718: NOT
26719: IFFALSE 26723
// exit ;
26721: GO 26885
// un := tmp [ rand ( 1 , tmp ) ] ;
26723: LD_ADDR_VAR 0 3
26727: PUSH
26728: LD_VAR 0 2
26732: PUSH
26733: LD_INT 1
26735: PPUSH
26736: LD_VAR 0 2
26740: PPUSH
26741: CALL_OW 12
26745: ARRAY
26746: ST_TO_ADDR
// if Crawls ( un ) then
26747: LD_VAR 0 3
26751: PPUSH
26752: CALL_OW 318
26756: IFFALSE 26767
// ComWalk ( un ) ;
26758: LD_VAR 0 3
26762: PPUSH
26763: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26767: LD_VAR 0 3
26771: PPUSH
26772: LD_INT 8
26774: PPUSH
26775: CALL_OW 336
// end ; 4 :
26779: GO 26885
26781: LD_INT 4
26783: DOUBLE
26784: EQUAL
26785: IFTRUE 26789
26787: GO 26863
26789: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26790: LD_ADDR_VAR 0 2
26794: PUSH
26795: LD_INT 22
26797: PUSH
26798: LD_OWVAR 2
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 30
26809: PUSH
26810: LD_INT 29
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PPUSH
26821: CALL_OW 69
26825: ST_TO_ADDR
// if not tmp then
26826: LD_VAR 0 2
26830: NOT
26831: IFFALSE 26835
// exit ;
26833: GO 26885
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26835: LD_VAR 0 2
26839: PUSH
26840: LD_INT 1
26842: ARRAY
26843: PPUSH
26844: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26848: LD_VAR 0 2
26852: PUSH
26853: LD_INT 1
26855: ARRAY
26856: PPUSH
26857: CALL_OW 65
// end ; 5 .. 7 :
26861: GO 26885
26863: LD_INT 5
26865: DOUBLE
26866: GREATEREQUAL
26867: IFFALSE 26875
26869: LD_INT 7
26871: DOUBLE
26872: LESSEQUAL
26873: IFTRUE 26877
26875: GO 26884
26877: POP
// StreamSibBomb ; end ;
26878: CALL 23122 0 0
26882: GO 26885
26884: POP
// end ;
26885: PPOPN 3
26887: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26888: LD_EXP 40
26892: PUSH
26893: LD_EXP 90
26897: AND
26898: IFFALSE 27054
26900: GO 26902
26902: DISABLE
26903: LD_INT 0
26905: PPUSH
26906: PPUSH
26907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26908: LD_ADDR_VAR 0 2
26912: PUSH
26913: LD_INT 81
26915: PUSH
26916: LD_OWVAR 2
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: PUSH
26925: LD_INT 2
26927: PUSH
26928: LD_INT 21
26930: PUSH
26931: LD_INT 1
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 21
26940: PUSH
26941: LD_INT 2
26943: PUSH
26944: EMPTY
26945: LIST
26946: LIST
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: LIST
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PPUSH
26957: CALL_OW 69
26961: ST_TO_ADDR
// if not tmp then
26962: LD_VAR 0 2
26966: NOT
26967: IFFALSE 26971
// exit ;
26969: GO 27054
// p := 0 ;
26971: LD_ADDR_VAR 0 3
26975: PUSH
26976: LD_INT 0
26978: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26979: LD_INT 35
26981: PPUSH
26982: CALL_OW 67
// p := p + 1 ;
26986: LD_ADDR_VAR 0 3
26990: PUSH
26991: LD_VAR 0 3
26995: PUSH
26996: LD_INT 1
26998: PLUS
26999: ST_TO_ADDR
// for i in tmp do
27000: LD_ADDR_VAR 0 1
27004: PUSH
27005: LD_VAR 0 2
27009: PUSH
27010: FOR_IN
27011: IFFALSE 27042
// if GetLives ( i ) < 1000 then
27013: LD_VAR 0 1
27017: PPUSH
27018: CALL_OW 256
27022: PUSH
27023: LD_INT 1000
27025: LESS
27026: IFFALSE 27040
// SetLives ( i , 1000 ) ;
27028: LD_VAR 0 1
27032: PPUSH
27033: LD_INT 1000
27035: PPUSH
27036: CALL_OW 234
27040: GO 27010
27042: POP
27043: POP
// until p > 20 ;
27044: LD_VAR 0 3
27048: PUSH
27049: LD_INT 20
27051: GREATER
27052: IFFALSE 26979
// end ;
27054: PPOPN 3
27056: END
// every 0 0$1 trigger StreamModeActive and sTime do
27057: LD_EXP 40
27061: PUSH
27062: LD_EXP 91
27066: AND
27067: IFFALSE 27102
27069: GO 27071
27071: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
27072: LD_INT 28
27074: PPUSH
27075: LD_OWVAR 2
27079: PPUSH
27080: LD_INT 2
27082: PPUSH
27083: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
27087: LD_INT 30
27089: PPUSH
27090: LD_OWVAR 2
27094: PPUSH
27095: LD_INT 2
27097: PPUSH
27098: CALL_OW 322
// end ;
27102: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
27103: LD_EXP 40
27107: PUSH
27108: LD_EXP 92
27112: AND
27113: IFFALSE 27234
27115: GO 27117
27117: DISABLE
27118: LD_INT 0
27120: PPUSH
27121: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27122: LD_ADDR_VAR 0 2
27126: PUSH
27127: LD_INT 22
27129: PUSH
27130: LD_OWVAR 2
27134: PUSH
27135: EMPTY
27136: LIST
27137: LIST
27138: PUSH
27139: LD_INT 21
27141: PUSH
27142: LD_INT 1
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 3
27151: PUSH
27152: LD_INT 23
27154: PUSH
27155: LD_INT 0
27157: PUSH
27158: EMPTY
27159: LIST
27160: LIST
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: EMPTY
27167: LIST
27168: LIST
27169: LIST
27170: PPUSH
27171: CALL_OW 69
27175: ST_TO_ADDR
// if not tmp then
27176: LD_VAR 0 2
27180: NOT
27181: IFFALSE 27185
// exit ;
27183: GO 27234
// for i in tmp do
27185: LD_ADDR_VAR 0 1
27189: PUSH
27190: LD_VAR 0 2
27194: PUSH
27195: FOR_IN
27196: IFFALSE 27232
// begin if Crawls ( i ) then
27198: LD_VAR 0 1
27202: PPUSH
27203: CALL_OW 318
27207: IFFALSE 27218
// ComWalk ( i ) ;
27209: LD_VAR 0 1
27213: PPUSH
27214: CALL_OW 138
// SetClass ( i , 2 ) ;
27218: LD_VAR 0 1
27222: PPUSH
27223: LD_INT 2
27225: PPUSH
27226: CALL_OW 336
// end ;
27230: GO 27195
27232: POP
27233: POP
// end ;
27234: PPOPN 2
27236: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
27237: LD_EXP 40
27241: PUSH
27242: LD_EXP 93
27246: AND
27247: IFFALSE 27535
27249: GO 27251
27251: DISABLE
27252: LD_INT 0
27254: PPUSH
27255: PPUSH
27256: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
27257: LD_OWVAR 2
27261: PPUSH
27262: LD_INT 9
27264: PPUSH
27265: LD_INT 1
27267: PPUSH
27268: LD_INT 1
27270: PPUSH
27271: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27275: LD_INT 9
27277: PPUSH
27278: LD_OWVAR 2
27282: PPUSH
27283: CALL_OW 343
// uc_side := 9 ;
27287: LD_ADDR_OWVAR 20
27291: PUSH
27292: LD_INT 9
27294: ST_TO_ADDR
// uc_nation := 2 ;
27295: LD_ADDR_OWVAR 21
27299: PUSH
27300: LD_INT 2
27302: ST_TO_ADDR
// hc_name := Dark Warrior ;
27303: LD_ADDR_OWVAR 26
27307: PUSH
27308: LD_STRING Dark Warrior
27310: ST_TO_ADDR
// hc_gallery :=  ;
27311: LD_ADDR_OWVAR 33
27315: PUSH
27316: LD_STRING 
27318: ST_TO_ADDR
// hc_noskilllimit := true ;
27319: LD_ADDR_OWVAR 76
27323: PUSH
27324: LD_INT 1
27326: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27327: LD_ADDR_OWVAR 31
27331: PUSH
27332: LD_INT 30
27334: PUSH
27335: LD_INT 30
27337: PUSH
27338: LD_INT 30
27340: PUSH
27341: LD_INT 30
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: ST_TO_ADDR
// un := CreateHuman ;
27350: LD_ADDR_VAR 0 3
27354: PUSH
27355: CALL_OW 44
27359: ST_TO_ADDR
// hc_noskilllimit := false ;
27360: LD_ADDR_OWVAR 76
27364: PUSH
27365: LD_INT 0
27367: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27368: LD_VAR 0 3
27372: PPUSH
27373: LD_INT 1
27375: PPUSH
27376: CALL_OW 51
// ToLua ( playRanger() ) ;
27380: LD_STRING playRanger()
27382: PPUSH
27383: CALL_OW 559
// p := 0 ;
27387: LD_ADDR_VAR 0 2
27391: PUSH
27392: LD_INT 0
27394: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27395: LD_INT 35
27397: PPUSH
27398: CALL_OW 67
// p := p + 1 ;
27402: LD_ADDR_VAR 0 2
27406: PUSH
27407: LD_VAR 0 2
27411: PUSH
27412: LD_INT 1
27414: PLUS
27415: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27416: LD_VAR 0 3
27420: PPUSH
27421: CALL_OW 256
27425: PUSH
27426: LD_INT 1000
27428: LESS
27429: IFFALSE 27443
// SetLives ( un , 1000 ) ;
27431: LD_VAR 0 3
27435: PPUSH
27436: LD_INT 1000
27438: PPUSH
27439: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27443: LD_VAR 0 3
27447: PPUSH
27448: LD_INT 81
27450: PUSH
27451: LD_OWVAR 2
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 91
27462: PUSH
27463: LD_VAR 0 3
27467: PUSH
27468: LD_INT 30
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: LIST
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: PPUSH
27480: CALL_OW 69
27484: PPUSH
27485: LD_VAR 0 3
27489: PPUSH
27490: CALL_OW 74
27494: PPUSH
27495: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27499: LD_VAR 0 2
27503: PUSH
27504: LD_INT 80
27506: GREATER
27507: PUSH
27508: LD_VAR 0 3
27512: PPUSH
27513: CALL_OW 301
27517: OR
27518: IFFALSE 27395
// if un then
27520: LD_VAR 0 3
27524: IFFALSE 27535
// RemoveUnit ( un ) ;
27526: LD_VAR 0 3
27530: PPUSH
27531: CALL_OW 64
// end ;
27535: PPOPN 3
27537: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27538: LD_EXP 94
27542: IFFALSE 27658
27544: GO 27546
27546: DISABLE
27547: LD_INT 0
27549: PPUSH
27550: PPUSH
27551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27552: LD_ADDR_VAR 0 2
27556: PUSH
27557: LD_INT 81
27559: PUSH
27560: LD_OWVAR 2
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: PUSH
27569: LD_INT 21
27571: PUSH
27572: LD_INT 1
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PPUSH
27583: CALL_OW 69
27587: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27588: LD_STRING playComputer()
27590: PPUSH
27591: CALL_OW 559
// if not tmp then
27595: LD_VAR 0 2
27599: NOT
27600: IFFALSE 27604
// exit ;
27602: GO 27658
// for i in tmp do
27604: LD_ADDR_VAR 0 1
27608: PUSH
27609: LD_VAR 0 2
27613: PUSH
27614: FOR_IN
27615: IFFALSE 27656
// for j := 1 to 4 do
27617: LD_ADDR_VAR 0 3
27621: PUSH
27622: DOUBLE
27623: LD_INT 1
27625: DEC
27626: ST_TO_ADDR
27627: LD_INT 4
27629: PUSH
27630: FOR_TO
27631: IFFALSE 27652
// SetSkill ( i , j , 10 ) ;
27633: LD_VAR 0 1
27637: PPUSH
27638: LD_VAR 0 3
27642: PPUSH
27643: LD_INT 10
27645: PPUSH
27646: CALL_OW 237
27650: GO 27630
27652: POP
27653: POP
27654: GO 27614
27656: POP
27657: POP
// end ;
27658: PPOPN 3
27660: END
// every 0 0$1 trigger s30 do var i , tmp ;
27661: LD_EXP 95
27665: IFFALSE 27734
27667: GO 27669
27669: DISABLE
27670: LD_INT 0
27672: PPUSH
27673: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27674: LD_ADDR_VAR 0 2
27678: PUSH
27679: LD_INT 22
27681: PUSH
27682: LD_OWVAR 2
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PPUSH
27691: CALL_OW 69
27695: ST_TO_ADDR
// if not tmp then
27696: LD_VAR 0 2
27700: NOT
27701: IFFALSE 27705
// exit ;
27703: GO 27734
// for i in tmp do
27705: LD_ADDR_VAR 0 1
27709: PUSH
27710: LD_VAR 0 2
27714: PUSH
27715: FOR_IN
27716: IFFALSE 27732
// SetLives ( i , 300 ) ;
27718: LD_VAR 0 1
27722: PPUSH
27723: LD_INT 300
27725: PPUSH
27726: CALL_OW 234
27730: GO 27715
27732: POP
27733: POP
// end ;
27734: PPOPN 2
27736: END
// every 0 0$1 trigger s60 do var i , tmp ;
27737: LD_EXP 96
27741: IFFALSE 27810
27743: GO 27745
27745: DISABLE
27746: LD_INT 0
27748: PPUSH
27749: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27750: LD_ADDR_VAR 0 2
27754: PUSH
27755: LD_INT 22
27757: PUSH
27758: LD_OWVAR 2
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PPUSH
27767: CALL_OW 69
27771: ST_TO_ADDR
// if not tmp then
27772: LD_VAR 0 2
27776: NOT
27777: IFFALSE 27781
// exit ;
27779: GO 27810
// for i in tmp do
27781: LD_ADDR_VAR 0 1
27785: PUSH
27786: LD_VAR 0 2
27790: PUSH
27791: FOR_IN
27792: IFFALSE 27808
// SetLives ( i , 600 ) ;
27794: LD_VAR 0 1
27798: PPUSH
27799: LD_INT 600
27801: PPUSH
27802: CALL_OW 234
27806: GO 27791
27808: POP
27809: POP
// end ;
27810: PPOPN 2
27812: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27813: LD_INT 0
27815: PPUSH
// case cmd of 301 :
27816: LD_VAR 0 1
27820: PUSH
27821: LD_INT 301
27823: DOUBLE
27824: EQUAL
27825: IFTRUE 27829
27827: GO 27861
27829: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27830: LD_VAR 0 6
27834: PPUSH
27835: LD_VAR 0 7
27839: PPUSH
27840: LD_VAR 0 8
27844: PPUSH
27845: LD_VAR 0 4
27849: PPUSH
27850: LD_VAR 0 5
27854: PPUSH
27855: CALL 29062 0 5
27859: GO 27982
27861: LD_INT 302
27863: DOUBLE
27864: EQUAL
27865: IFTRUE 27869
27867: GO 27906
27869: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27870: LD_VAR 0 6
27874: PPUSH
27875: LD_VAR 0 7
27879: PPUSH
27880: LD_VAR 0 8
27884: PPUSH
27885: LD_VAR 0 9
27889: PPUSH
27890: LD_VAR 0 4
27894: PPUSH
27895: LD_VAR 0 5
27899: PPUSH
27900: CALL 29153 0 6
27904: GO 27982
27906: LD_INT 303
27908: DOUBLE
27909: EQUAL
27910: IFTRUE 27914
27912: GO 27951
27914: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27915: LD_VAR 0 6
27919: PPUSH
27920: LD_VAR 0 7
27924: PPUSH
27925: LD_VAR 0 8
27929: PPUSH
27930: LD_VAR 0 9
27934: PPUSH
27935: LD_VAR 0 4
27939: PPUSH
27940: LD_VAR 0 5
27944: PPUSH
27945: CALL 27987 0 6
27949: GO 27982
27951: LD_INT 304
27953: DOUBLE
27954: EQUAL
27955: IFTRUE 27959
27957: GO 27981
27959: POP
// hHackTeleport ( unit , x , y ) ; end ;
27960: LD_VAR 0 2
27964: PPUSH
27965: LD_VAR 0 4
27969: PPUSH
27970: LD_VAR 0 5
27974: PPUSH
27975: CALL 29746 0 3
27979: GO 27982
27981: POP
// end ;
27982: LD_VAR 0 12
27986: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27987: LD_INT 0
27989: PPUSH
27990: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27991: LD_VAR 0 1
27995: PUSH
27996: LD_INT 1
27998: LESS
27999: PUSH
28000: LD_VAR 0 1
28004: PUSH
28005: LD_INT 3
28007: GREATER
28008: OR
28009: PUSH
28010: LD_VAR 0 5
28014: PPUSH
28015: LD_VAR 0 6
28019: PPUSH
28020: CALL_OW 428
28024: OR
28025: IFFALSE 28029
// exit ;
28027: GO 28749
// uc_side := your_side ;
28029: LD_ADDR_OWVAR 20
28033: PUSH
28034: LD_OWVAR 2
28038: ST_TO_ADDR
// uc_nation := nation ;
28039: LD_ADDR_OWVAR 21
28043: PUSH
28044: LD_VAR 0 1
28048: ST_TO_ADDR
// bc_level = 1 ;
28049: LD_ADDR_OWVAR 43
28053: PUSH
28054: LD_INT 1
28056: ST_TO_ADDR
// case btype of 1 :
28057: LD_VAR 0 2
28061: PUSH
28062: LD_INT 1
28064: DOUBLE
28065: EQUAL
28066: IFTRUE 28070
28068: GO 28081
28070: POP
// bc_type := b_depot ; 2 :
28071: LD_ADDR_OWVAR 42
28075: PUSH
28076: LD_INT 0
28078: ST_TO_ADDR
28079: GO 28693
28081: LD_INT 2
28083: DOUBLE
28084: EQUAL
28085: IFTRUE 28089
28087: GO 28100
28089: POP
// bc_type := b_warehouse ; 3 :
28090: LD_ADDR_OWVAR 42
28094: PUSH
28095: LD_INT 1
28097: ST_TO_ADDR
28098: GO 28693
28100: LD_INT 3
28102: DOUBLE
28103: EQUAL
28104: IFTRUE 28108
28106: GO 28119
28108: POP
// bc_type := b_lab ; 4 .. 9 :
28109: LD_ADDR_OWVAR 42
28113: PUSH
28114: LD_INT 6
28116: ST_TO_ADDR
28117: GO 28693
28119: LD_INT 4
28121: DOUBLE
28122: GREATEREQUAL
28123: IFFALSE 28131
28125: LD_INT 9
28127: DOUBLE
28128: LESSEQUAL
28129: IFTRUE 28133
28131: GO 28185
28133: POP
// begin bc_type := b_lab_half ;
28134: LD_ADDR_OWVAR 42
28138: PUSH
28139: LD_INT 7
28141: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
28142: LD_ADDR_OWVAR 44
28146: PUSH
28147: LD_INT 10
28149: PUSH
28150: LD_INT 11
28152: PUSH
28153: LD_INT 12
28155: PUSH
28156: LD_INT 15
28158: PUSH
28159: LD_INT 14
28161: PUSH
28162: LD_INT 13
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: PUSH
28173: LD_VAR 0 2
28177: PUSH
28178: LD_INT 3
28180: MINUS
28181: ARRAY
28182: ST_TO_ADDR
// end ; 10 .. 13 :
28183: GO 28693
28185: LD_INT 10
28187: DOUBLE
28188: GREATEREQUAL
28189: IFFALSE 28197
28191: LD_INT 13
28193: DOUBLE
28194: LESSEQUAL
28195: IFTRUE 28199
28197: GO 28276
28199: POP
// begin bc_type := b_lab_full ;
28200: LD_ADDR_OWVAR 42
28204: PUSH
28205: LD_INT 8
28207: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
28208: LD_ADDR_OWVAR 44
28212: PUSH
28213: LD_INT 10
28215: PUSH
28216: LD_INT 12
28218: PUSH
28219: LD_INT 14
28221: PUSH
28222: LD_INT 13
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: PUSH
28231: LD_VAR 0 2
28235: PUSH
28236: LD_INT 9
28238: MINUS
28239: ARRAY
28240: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
28241: LD_ADDR_OWVAR 45
28245: PUSH
28246: LD_INT 11
28248: PUSH
28249: LD_INT 15
28251: PUSH
28252: LD_INT 12
28254: PUSH
28255: LD_INT 15
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: LIST
28262: LIST
28263: PUSH
28264: LD_VAR 0 2
28268: PUSH
28269: LD_INT 9
28271: MINUS
28272: ARRAY
28273: ST_TO_ADDR
// end ; 14 :
28274: GO 28693
28276: LD_INT 14
28278: DOUBLE
28279: EQUAL
28280: IFTRUE 28284
28282: GO 28295
28284: POP
// bc_type := b_workshop ; 15 :
28285: LD_ADDR_OWVAR 42
28289: PUSH
28290: LD_INT 2
28292: ST_TO_ADDR
28293: GO 28693
28295: LD_INT 15
28297: DOUBLE
28298: EQUAL
28299: IFTRUE 28303
28301: GO 28314
28303: POP
// bc_type := b_factory ; 16 :
28304: LD_ADDR_OWVAR 42
28308: PUSH
28309: LD_INT 3
28311: ST_TO_ADDR
28312: GO 28693
28314: LD_INT 16
28316: DOUBLE
28317: EQUAL
28318: IFTRUE 28322
28320: GO 28333
28322: POP
// bc_type := b_ext_gun ; 17 :
28323: LD_ADDR_OWVAR 42
28327: PUSH
28328: LD_INT 17
28330: ST_TO_ADDR
28331: GO 28693
28333: LD_INT 17
28335: DOUBLE
28336: EQUAL
28337: IFTRUE 28341
28339: GO 28369
28341: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28342: LD_ADDR_OWVAR 42
28346: PUSH
28347: LD_INT 19
28349: PUSH
28350: LD_INT 23
28352: PUSH
28353: LD_INT 19
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: LIST
28360: PUSH
28361: LD_VAR 0 1
28365: ARRAY
28366: ST_TO_ADDR
28367: GO 28693
28369: LD_INT 18
28371: DOUBLE
28372: EQUAL
28373: IFTRUE 28377
28375: GO 28388
28377: POP
// bc_type := b_ext_radar ; 19 :
28378: LD_ADDR_OWVAR 42
28382: PUSH
28383: LD_INT 20
28385: ST_TO_ADDR
28386: GO 28693
28388: LD_INT 19
28390: DOUBLE
28391: EQUAL
28392: IFTRUE 28396
28394: GO 28407
28396: POP
// bc_type := b_ext_radio ; 20 :
28397: LD_ADDR_OWVAR 42
28401: PUSH
28402: LD_INT 22
28404: ST_TO_ADDR
28405: GO 28693
28407: LD_INT 20
28409: DOUBLE
28410: EQUAL
28411: IFTRUE 28415
28413: GO 28426
28415: POP
// bc_type := b_ext_siberium ; 21 :
28416: LD_ADDR_OWVAR 42
28420: PUSH
28421: LD_INT 21
28423: ST_TO_ADDR
28424: GO 28693
28426: LD_INT 21
28428: DOUBLE
28429: EQUAL
28430: IFTRUE 28434
28432: GO 28445
28434: POP
// bc_type := b_ext_computer ; 22 :
28435: LD_ADDR_OWVAR 42
28439: PUSH
28440: LD_INT 24
28442: ST_TO_ADDR
28443: GO 28693
28445: LD_INT 22
28447: DOUBLE
28448: EQUAL
28449: IFTRUE 28453
28451: GO 28464
28453: POP
// bc_type := b_ext_track ; 23 :
28454: LD_ADDR_OWVAR 42
28458: PUSH
28459: LD_INT 16
28461: ST_TO_ADDR
28462: GO 28693
28464: LD_INT 23
28466: DOUBLE
28467: EQUAL
28468: IFTRUE 28472
28470: GO 28483
28472: POP
// bc_type := b_ext_laser ; 24 :
28473: LD_ADDR_OWVAR 42
28477: PUSH
28478: LD_INT 25
28480: ST_TO_ADDR
28481: GO 28693
28483: LD_INT 24
28485: DOUBLE
28486: EQUAL
28487: IFTRUE 28491
28489: GO 28502
28491: POP
// bc_type := b_control_tower ; 25 :
28492: LD_ADDR_OWVAR 42
28496: PUSH
28497: LD_INT 36
28499: ST_TO_ADDR
28500: GO 28693
28502: LD_INT 25
28504: DOUBLE
28505: EQUAL
28506: IFTRUE 28510
28508: GO 28521
28510: POP
// bc_type := b_breastwork ; 26 :
28511: LD_ADDR_OWVAR 42
28515: PUSH
28516: LD_INT 31
28518: ST_TO_ADDR
28519: GO 28693
28521: LD_INT 26
28523: DOUBLE
28524: EQUAL
28525: IFTRUE 28529
28527: GO 28540
28529: POP
// bc_type := b_bunker ; 27 :
28530: LD_ADDR_OWVAR 42
28534: PUSH
28535: LD_INT 32
28537: ST_TO_ADDR
28538: GO 28693
28540: LD_INT 27
28542: DOUBLE
28543: EQUAL
28544: IFTRUE 28548
28546: GO 28559
28548: POP
// bc_type := b_turret ; 28 :
28549: LD_ADDR_OWVAR 42
28553: PUSH
28554: LD_INT 33
28556: ST_TO_ADDR
28557: GO 28693
28559: LD_INT 28
28561: DOUBLE
28562: EQUAL
28563: IFTRUE 28567
28565: GO 28578
28567: POP
// bc_type := b_armoury ; 29 :
28568: LD_ADDR_OWVAR 42
28572: PUSH
28573: LD_INT 4
28575: ST_TO_ADDR
28576: GO 28693
28578: LD_INT 29
28580: DOUBLE
28581: EQUAL
28582: IFTRUE 28586
28584: GO 28597
28586: POP
// bc_type := b_barracks ; 30 :
28587: LD_ADDR_OWVAR 42
28591: PUSH
28592: LD_INT 5
28594: ST_TO_ADDR
28595: GO 28693
28597: LD_INT 30
28599: DOUBLE
28600: EQUAL
28601: IFTRUE 28605
28603: GO 28616
28605: POP
// bc_type := b_solar_power ; 31 :
28606: LD_ADDR_OWVAR 42
28610: PUSH
28611: LD_INT 27
28613: ST_TO_ADDR
28614: GO 28693
28616: LD_INT 31
28618: DOUBLE
28619: EQUAL
28620: IFTRUE 28624
28622: GO 28635
28624: POP
// bc_type := b_oil_power ; 32 :
28625: LD_ADDR_OWVAR 42
28629: PUSH
28630: LD_INT 26
28632: ST_TO_ADDR
28633: GO 28693
28635: LD_INT 32
28637: DOUBLE
28638: EQUAL
28639: IFTRUE 28643
28641: GO 28654
28643: POP
// bc_type := b_siberite_power ; 33 :
28644: LD_ADDR_OWVAR 42
28648: PUSH
28649: LD_INT 28
28651: ST_TO_ADDR
28652: GO 28693
28654: LD_INT 33
28656: DOUBLE
28657: EQUAL
28658: IFTRUE 28662
28660: GO 28673
28662: POP
// bc_type := b_oil_mine ; 34 :
28663: LD_ADDR_OWVAR 42
28667: PUSH
28668: LD_INT 29
28670: ST_TO_ADDR
28671: GO 28693
28673: LD_INT 34
28675: DOUBLE
28676: EQUAL
28677: IFTRUE 28681
28679: GO 28692
28681: POP
// bc_type := b_siberite_mine ; end ;
28682: LD_ADDR_OWVAR 42
28686: PUSH
28687: LD_INT 30
28689: ST_TO_ADDR
28690: GO 28693
28692: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28693: LD_ADDR_VAR 0 8
28697: PUSH
28698: LD_VAR 0 5
28702: PPUSH
28703: LD_VAR 0 6
28707: PPUSH
28708: LD_VAR 0 3
28712: PPUSH
28713: CALL_OW 47
28717: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28718: LD_OWVAR 42
28722: PUSH
28723: LD_INT 32
28725: PUSH
28726: LD_INT 33
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: IN
28733: IFFALSE 28749
// PlaceWeaponTurret ( b , weapon ) ;
28735: LD_VAR 0 8
28739: PPUSH
28740: LD_VAR 0 4
28744: PPUSH
28745: CALL_OW 431
// end ;
28749: LD_VAR 0 7
28753: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28754: LD_INT 0
28756: PPUSH
28757: PPUSH
28758: PPUSH
28759: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28760: LD_ADDR_VAR 0 4
28764: PUSH
28765: LD_INT 22
28767: PUSH
28768: LD_OWVAR 2
28772: PUSH
28773: EMPTY
28774: LIST
28775: LIST
28776: PUSH
28777: LD_INT 2
28779: PUSH
28780: LD_INT 30
28782: PUSH
28783: LD_INT 0
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 30
28792: PUSH
28793: LD_INT 1
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: LIST
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PPUSH
28809: CALL_OW 69
28813: ST_TO_ADDR
// if not tmp then
28814: LD_VAR 0 4
28818: NOT
28819: IFFALSE 28823
// exit ;
28821: GO 28882
// for i in tmp do
28823: LD_ADDR_VAR 0 2
28827: PUSH
28828: LD_VAR 0 4
28832: PUSH
28833: FOR_IN
28834: IFFALSE 28880
// for j = 1 to 3 do
28836: LD_ADDR_VAR 0 3
28840: PUSH
28841: DOUBLE
28842: LD_INT 1
28844: DEC
28845: ST_TO_ADDR
28846: LD_INT 3
28848: PUSH
28849: FOR_TO
28850: IFFALSE 28876
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28852: LD_VAR 0 2
28856: PPUSH
28857: CALL_OW 274
28861: PPUSH
28862: LD_VAR 0 3
28866: PPUSH
28867: LD_INT 99999
28869: PPUSH
28870: CALL_OW 277
28874: GO 28849
28876: POP
28877: POP
28878: GO 28833
28880: POP
28881: POP
// end ;
28882: LD_VAR 0 1
28886: RET
// export function hHackSetLevel10 ; var i , j ; begin
28887: LD_INT 0
28889: PPUSH
28890: PPUSH
28891: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28892: LD_ADDR_VAR 0 2
28896: PUSH
28897: LD_INT 21
28899: PUSH
28900: LD_INT 1
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PPUSH
28907: CALL_OW 69
28911: PUSH
28912: FOR_IN
28913: IFFALSE 28965
// if IsSelected ( i ) then
28915: LD_VAR 0 2
28919: PPUSH
28920: CALL_OW 306
28924: IFFALSE 28963
// begin for j := 1 to 4 do
28926: LD_ADDR_VAR 0 3
28930: PUSH
28931: DOUBLE
28932: LD_INT 1
28934: DEC
28935: ST_TO_ADDR
28936: LD_INT 4
28938: PUSH
28939: FOR_TO
28940: IFFALSE 28961
// SetSkill ( i , j , 10 ) ;
28942: LD_VAR 0 2
28946: PPUSH
28947: LD_VAR 0 3
28951: PPUSH
28952: LD_INT 10
28954: PPUSH
28955: CALL_OW 237
28959: GO 28939
28961: POP
28962: POP
// end ;
28963: GO 28912
28965: POP
28966: POP
// end ;
28967: LD_VAR 0 1
28971: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28972: LD_INT 0
28974: PPUSH
28975: PPUSH
28976: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28977: LD_ADDR_VAR 0 2
28981: PUSH
28982: LD_INT 22
28984: PUSH
28985: LD_OWVAR 2
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 21
28996: PUSH
28997: LD_INT 1
28999: PUSH
29000: EMPTY
29001: LIST
29002: LIST
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PPUSH
29008: CALL_OW 69
29012: PUSH
29013: FOR_IN
29014: IFFALSE 29055
// begin for j := 1 to 4 do
29016: LD_ADDR_VAR 0 3
29020: PUSH
29021: DOUBLE
29022: LD_INT 1
29024: DEC
29025: ST_TO_ADDR
29026: LD_INT 4
29028: PUSH
29029: FOR_TO
29030: IFFALSE 29051
// SetSkill ( i , j , 10 ) ;
29032: LD_VAR 0 2
29036: PPUSH
29037: LD_VAR 0 3
29041: PPUSH
29042: LD_INT 10
29044: PPUSH
29045: CALL_OW 237
29049: GO 29029
29051: POP
29052: POP
// end ;
29053: GO 29013
29055: POP
29056: POP
// end ;
29057: LD_VAR 0 1
29061: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
29062: LD_INT 0
29064: PPUSH
// uc_side := your_side ;
29065: LD_ADDR_OWVAR 20
29069: PUSH
29070: LD_OWVAR 2
29074: ST_TO_ADDR
// uc_nation := nation ;
29075: LD_ADDR_OWVAR 21
29079: PUSH
29080: LD_VAR 0 1
29084: ST_TO_ADDR
// InitHc ;
29085: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
29089: LD_INT 0
29091: PPUSH
29092: LD_VAR 0 2
29096: PPUSH
29097: LD_VAR 0 3
29101: PPUSH
29102: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
29106: LD_VAR 0 4
29110: PPUSH
29111: LD_VAR 0 5
29115: PPUSH
29116: CALL_OW 428
29120: PUSH
29121: LD_INT 0
29123: EQUAL
29124: IFFALSE 29148
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
29126: CALL_OW 44
29130: PPUSH
29131: LD_VAR 0 4
29135: PPUSH
29136: LD_VAR 0 5
29140: PPUSH
29141: LD_INT 1
29143: PPUSH
29144: CALL_OW 48
// end ;
29148: LD_VAR 0 6
29152: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
29153: LD_INT 0
29155: PPUSH
29156: PPUSH
// uc_side := your_side ;
29157: LD_ADDR_OWVAR 20
29161: PUSH
29162: LD_OWVAR 2
29166: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
29167: LD_VAR 0 1
29171: PUSH
29172: LD_INT 1
29174: PUSH
29175: LD_INT 2
29177: PUSH
29178: LD_INT 3
29180: PUSH
29181: LD_INT 4
29183: PUSH
29184: LD_INT 5
29186: PUSH
29187: EMPTY
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: IN
29194: IFFALSE 29206
// uc_nation := nation_american else
29196: LD_ADDR_OWVAR 21
29200: PUSH
29201: LD_INT 1
29203: ST_TO_ADDR
29204: GO 29249
// if chassis in [ 11 , 12 , 13 , 14 ] then
29206: LD_VAR 0 1
29210: PUSH
29211: LD_INT 11
29213: PUSH
29214: LD_INT 12
29216: PUSH
29217: LD_INT 13
29219: PUSH
29220: LD_INT 14
29222: PUSH
29223: EMPTY
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: IN
29229: IFFALSE 29241
// uc_nation := nation_arabian else
29231: LD_ADDR_OWVAR 21
29235: PUSH
29236: LD_INT 2
29238: ST_TO_ADDR
29239: GO 29249
// uc_nation := nation_russian ;
29241: LD_ADDR_OWVAR 21
29245: PUSH
29246: LD_INT 3
29248: ST_TO_ADDR
// vc_chassis := chassis ;
29249: LD_ADDR_OWVAR 37
29253: PUSH
29254: LD_VAR 0 1
29258: ST_TO_ADDR
// vc_engine := engine ;
29259: LD_ADDR_OWVAR 39
29263: PUSH
29264: LD_VAR 0 2
29268: ST_TO_ADDR
// vc_control := control ;
29269: LD_ADDR_OWVAR 38
29273: PUSH
29274: LD_VAR 0 3
29278: ST_TO_ADDR
// vc_weapon := weapon ;
29279: LD_ADDR_OWVAR 40
29283: PUSH
29284: LD_VAR 0 4
29288: ST_TO_ADDR
// un := CreateVehicle ;
29289: LD_ADDR_VAR 0 8
29293: PUSH
29294: CALL_OW 45
29298: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29299: LD_VAR 0 8
29303: PPUSH
29304: LD_INT 0
29306: PPUSH
29307: LD_INT 5
29309: PPUSH
29310: CALL_OW 12
29314: PPUSH
29315: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29319: LD_VAR 0 8
29323: PPUSH
29324: LD_VAR 0 5
29328: PPUSH
29329: LD_VAR 0 6
29333: PPUSH
29334: LD_INT 1
29336: PPUSH
29337: CALL_OW 48
// end ;
29341: LD_VAR 0 7
29345: RET
// export hInvincible ; every 1 do
29346: GO 29348
29348: DISABLE
// hInvincible := [ ] ;
29349: LD_ADDR_EXP 97
29353: PUSH
29354: EMPTY
29355: ST_TO_ADDR
29356: END
// every 10 do var i ;
29357: GO 29359
29359: DISABLE
29360: LD_INT 0
29362: PPUSH
// begin enable ;
29363: ENABLE
// if not hInvincible then
29364: LD_EXP 97
29368: NOT
29369: IFFALSE 29373
// exit ;
29371: GO 29417
// for i in hInvincible do
29373: LD_ADDR_VAR 0 1
29377: PUSH
29378: LD_EXP 97
29382: PUSH
29383: FOR_IN
29384: IFFALSE 29415
// if GetLives ( i ) < 1000 then
29386: LD_VAR 0 1
29390: PPUSH
29391: CALL_OW 256
29395: PUSH
29396: LD_INT 1000
29398: LESS
29399: IFFALSE 29413
// SetLives ( i , 1000 ) ;
29401: LD_VAR 0 1
29405: PPUSH
29406: LD_INT 1000
29408: PPUSH
29409: CALL_OW 234
29413: GO 29383
29415: POP
29416: POP
// end ;
29417: PPOPN 1
29419: END
// export function hHackInvincible ; var i ; begin
29420: LD_INT 0
29422: PPUSH
29423: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29424: LD_ADDR_VAR 0 2
29428: PUSH
29429: LD_INT 2
29431: PUSH
29432: LD_INT 21
29434: PUSH
29435: LD_INT 1
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: LD_INT 21
29444: PUSH
29445: LD_INT 2
29447: PUSH
29448: EMPTY
29449: LIST
29450: LIST
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: LIST
29456: PPUSH
29457: CALL_OW 69
29461: PUSH
29462: FOR_IN
29463: IFFALSE 29524
// if IsSelected ( i ) then
29465: LD_VAR 0 2
29469: PPUSH
29470: CALL_OW 306
29474: IFFALSE 29522
// begin if i in hInvincible then
29476: LD_VAR 0 2
29480: PUSH
29481: LD_EXP 97
29485: IN
29486: IFFALSE 29506
// hInvincible := hInvincible diff i else
29488: LD_ADDR_EXP 97
29492: PUSH
29493: LD_EXP 97
29497: PUSH
29498: LD_VAR 0 2
29502: DIFF
29503: ST_TO_ADDR
29504: GO 29522
// hInvincible := hInvincible union i ;
29506: LD_ADDR_EXP 97
29510: PUSH
29511: LD_EXP 97
29515: PUSH
29516: LD_VAR 0 2
29520: UNION
29521: ST_TO_ADDR
// end ;
29522: GO 29462
29524: POP
29525: POP
// end ;
29526: LD_VAR 0 1
29530: RET
// export function hHackInvisible ; var i , j ; begin
29531: LD_INT 0
29533: PPUSH
29534: PPUSH
29535: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29536: LD_ADDR_VAR 0 2
29540: PUSH
29541: LD_INT 21
29543: PUSH
29544: LD_INT 1
29546: PUSH
29547: EMPTY
29548: LIST
29549: LIST
29550: PPUSH
29551: CALL_OW 69
29555: PUSH
29556: FOR_IN
29557: IFFALSE 29581
// if IsSelected ( i ) then
29559: LD_VAR 0 2
29563: PPUSH
29564: CALL_OW 306
29568: IFFALSE 29579
// ComForceInvisible ( i ) ;
29570: LD_VAR 0 2
29574: PPUSH
29575: CALL_OW 496
29579: GO 29556
29581: POP
29582: POP
// end ;
29583: LD_VAR 0 1
29587: RET
// export function hHackChangeYourSide ; begin
29588: LD_INT 0
29590: PPUSH
// if your_side = 8 then
29591: LD_OWVAR 2
29595: PUSH
29596: LD_INT 8
29598: EQUAL
29599: IFFALSE 29611
// your_side := 0 else
29601: LD_ADDR_OWVAR 2
29605: PUSH
29606: LD_INT 0
29608: ST_TO_ADDR
29609: GO 29625
// your_side := your_side + 1 ;
29611: LD_ADDR_OWVAR 2
29615: PUSH
29616: LD_OWVAR 2
29620: PUSH
29621: LD_INT 1
29623: PLUS
29624: ST_TO_ADDR
// end ;
29625: LD_VAR 0 1
29629: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29630: LD_INT 0
29632: PPUSH
29633: PPUSH
29634: PPUSH
// for i in all_units do
29635: LD_ADDR_VAR 0 2
29639: PUSH
29640: LD_OWVAR 3
29644: PUSH
29645: FOR_IN
29646: IFFALSE 29724
// if IsSelected ( i ) then
29648: LD_VAR 0 2
29652: PPUSH
29653: CALL_OW 306
29657: IFFALSE 29722
// begin j := GetSide ( i ) ;
29659: LD_ADDR_VAR 0 3
29663: PUSH
29664: LD_VAR 0 2
29668: PPUSH
29669: CALL_OW 255
29673: ST_TO_ADDR
// if j = 8 then
29674: LD_VAR 0 3
29678: PUSH
29679: LD_INT 8
29681: EQUAL
29682: IFFALSE 29694
// j := 0 else
29684: LD_ADDR_VAR 0 3
29688: PUSH
29689: LD_INT 0
29691: ST_TO_ADDR
29692: GO 29708
// j := j + 1 ;
29694: LD_ADDR_VAR 0 3
29698: PUSH
29699: LD_VAR 0 3
29703: PUSH
29704: LD_INT 1
29706: PLUS
29707: ST_TO_ADDR
// SetSide ( i , j ) ;
29708: LD_VAR 0 2
29712: PPUSH
29713: LD_VAR 0 3
29717: PPUSH
29718: CALL_OW 235
// end ;
29722: GO 29645
29724: POP
29725: POP
// end ;
29726: LD_VAR 0 1
29730: RET
// export function hHackFog ; begin
29731: LD_INT 0
29733: PPUSH
// FogOff ( true ) ;
29734: LD_INT 1
29736: PPUSH
29737: CALL_OW 344
// end ;
29741: LD_VAR 0 1
29745: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29746: LD_INT 0
29748: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29749: LD_VAR 0 1
29753: PPUSH
29754: LD_VAR 0 2
29758: PPUSH
29759: LD_VAR 0 3
29763: PPUSH
29764: LD_INT 1
29766: PPUSH
29767: LD_INT 1
29769: PPUSH
29770: CALL_OW 483
// CenterOnXY ( x , y ) ;
29774: LD_VAR 0 2
29778: PPUSH
29779: LD_VAR 0 3
29783: PPUSH
29784: CALL_OW 84
// end ;
29788: LD_VAR 0 4
29792: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
29793: LD_INT 0
29795: PPUSH
29796: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
29797: LD_VAR 0 1
29801: NOT
29802: PUSH
29803: LD_VAR 0 2
29807: PPUSH
29808: LD_VAR 0 3
29812: PPUSH
29813: CALL_OW 488
29817: NOT
29818: OR
29819: PUSH
29820: LD_VAR 0 1
29824: PPUSH
29825: CALL_OW 266
29829: PUSH
29830: LD_INT 3
29832: NONEQUAL
29833: PUSH
29834: LD_VAR 0 1
29838: PPUSH
29839: CALL_OW 247
29843: PUSH
29844: LD_INT 1
29846: EQUAL
29847: NOT
29848: AND
29849: OR
29850: IFFALSE 29854
// exit ;
29852: GO 30003
// if GetType ( factory ) = unit_human then
29854: LD_VAR 0 1
29858: PPUSH
29859: CALL_OW 247
29863: PUSH
29864: LD_INT 1
29866: EQUAL
29867: IFFALSE 29884
// factory := IsInUnit ( factory ) ;
29869: LD_ADDR_VAR 0 1
29873: PUSH
29874: LD_VAR 0 1
29878: PPUSH
29879: CALL_OW 310
29883: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
29884: LD_VAR 0 1
29888: PPUSH
29889: CALL_OW 266
29893: PUSH
29894: LD_INT 3
29896: NONEQUAL
29897: IFFALSE 29901
// exit ;
29899: GO 30003
// if HexInfo ( x , y ) = factory then
29901: LD_VAR 0 2
29905: PPUSH
29906: LD_VAR 0 3
29910: PPUSH
29911: CALL_OW 428
29915: PUSH
29916: LD_VAR 0 1
29920: EQUAL
29921: IFFALSE 29948
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
29923: LD_ADDR_EXP 98
29927: PUSH
29928: LD_EXP 98
29932: PPUSH
29933: LD_VAR 0 1
29937: PPUSH
29938: LD_INT 0
29940: PPUSH
29941: CALL_OW 1
29945: ST_TO_ADDR
29946: GO 29999
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
29948: LD_ADDR_EXP 98
29952: PUSH
29953: LD_EXP 98
29957: PPUSH
29958: LD_VAR 0 1
29962: PPUSH
29963: LD_VAR 0 1
29967: PPUSH
29968: CALL_OW 255
29972: PUSH
29973: LD_VAR 0 1
29977: PUSH
29978: LD_VAR 0 2
29982: PUSH
29983: LD_VAR 0 3
29987: PUSH
29988: EMPTY
29989: LIST
29990: LIST
29991: LIST
29992: LIST
29993: PPUSH
29994: CALL_OW 1
29998: ST_TO_ADDR
// UpdateFactoryWaypoints ;
29999: CALL 30008 0 0
// end ;
30003: LD_VAR 0 4
30007: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
30008: LD_INT 0
30010: PPUSH
30011: PPUSH
30012: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30013: LD_STRING resetFactoryWaypoint();
30015: PPUSH
30016: CALL_OW 559
// if factoryWaypoints then
30020: LD_EXP 98
30024: IFFALSE 30150
// begin list := PrepareArray ( factoryWaypoints ) ;
30026: LD_ADDR_VAR 0 3
30030: PUSH
30031: LD_EXP 98
30035: PPUSH
30036: CALL 76619 0 1
30040: ST_TO_ADDR
// for i := 1 to list do
30041: LD_ADDR_VAR 0 2
30045: PUSH
30046: DOUBLE
30047: LD_INT 1
30049: DEC
30050: ST_TO_ADDR
30051: LD_VAR 0 3
30055: PUSH
30056: FOR_TO
30057: IFFALSE 30148
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30059: LD_STRING setFactoryWaypointXY(
30061: PUSH
30062: LD_VAR 0 3
30066: PUSH
30067: LD_VAR 0 2
30071: ARRAY
30072: PUSH
30073: LD_INT 1
30075: ARRAY
30076: STR
30077: PUSH
30078: LD_STRING ,
30080: STR
30081: PUSH
30082: LD_VAR 0 3
30086: PUSH
30087: LD_VAR 0 2
30091: ARRAY
30092: PUSH
30093: LD_INT 2
30095: ARRAY
30096: STR
30097: PUSH
30098: LD_STRING ,
30100: STR
30101: PUSH
30102: LD_VAR 0 3
30106: PUSH
30107: LD_VAR 0 2
30111: ARRAY
30112: PUSH
30113: LD_INT 3
30115: ARRAY
30116: STR
30117: PUSH
30118: LD_STRING ,
30120: STR
30121: PUSH
30122: LD_VAR 0 3
30126: PUSH
30127: LD_VAR 0 2
30131: ARRAY
30132: PUSH
30133: LD_INT 4
30135: ARRAY
30136: STR
30137: PUSH
30138: LD_STRING )
30140: STR
30141: PPUSH
30142: CALL_OW 559
30146: GO 30056
30148: POP
30149: POP
// end ; end ;
30150: LD_VAR 0 1
30154: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
30155: LD_INT 0
30157: PPUSH
// if HexInfo ( x , y ) = warehouse then
30158: LD_VAR 0 2
30162: PPUSH
30163: LD_VAR 0 3
30167: PPUSH
30168: CALL_OW 428
30172: PUSH
30173: LD_VAR 0 1
30177: EQUAL
30178: IFFALSE 30205
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
30180: LD_ADDR_EXP 99
30184: PUSH
30185: LD_EXP 99
30189: PPUSH
30190: LD_VAR 0 1
30194: PPUSH
30195: LD_INT 0
30197: PPUSH
30198: CALL_OW 1
30202: ST_TO_ADDR
30203: GO 30256
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
30205: LD_ADDR_EXP 99
30209: PUSH
30210: LD_EXP 99
30214: PPUSH
30215: LD_VAR 0 1
30219: PPUSH
30220: LD_VAR 0 1
30224: PPUSH
30225: CALL_OW 255
30229: PUSH
30230: LD_VAR 0 1
30234: PUSH
30235: LD_VAR 0 2
30239: PUSH
30240: LD_VAR 0 3
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: PPUSH
30251: CALL_OW 1
30255: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
30256: CALL 30265 0 0
// end ;
30260: LD_VAR 0 4
30264: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
30265: LD_INT 0
30267: PPUSH
30268: PPUSH
30269: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
30270: LD_STRING resetWarehouseGatheringPoints();
30272: PPUSH
30273: CALL_OW 559
// if warehouseGatheringPoints then
30277: LD_EXP 99
30281: IFFALSE 30407
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
30283: LD_ADDR_VAR 0 3
30287: PUSH
30288: LD_EXP 99
30292: PPUSH
30293: CALL 76619 0 1
30297: ST_TO_ADDR
// for i := 1 to list do
30298: LD_ADDR_VAR 0 2
30302: PUSH
30303: DOUBLE
30304: LD_INT 1
30306: DEC
30307: ST_TO_ADDR
30308: LD_VAR 0 3
30312: PUSH
30313: FOR_TO
30314: IFFALSE 30405
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
30316: LD_STRING setWarehouseGatheringPointXY(
30318: PUSH
30319: LD_VAR 0 3
30323: PUSH
30324: LD_VAR 0 2
30328: ARRAY
30329: PUSH
30330: LD_INT 1
30332: ARRAY
30333: STR
30334: PUSH
30335: LD_STRING ,
30337: STR
30338: PUSH
30339: LD_VAR 0 3
30343: PUSH
30344: LD_VAR 0 2
30348: ARRAY
30349: PUSH
30350: LD_INT 2
30352: ARRAY
30353: STR
30354: PUSH
30355: LD_STRING ,
30357: STR
30358: PUSH
30359: LD_VAR 0 3
30363: PUSH
30364: LD_VAR 0 2
30368: ARRAY
30369: PUSH
30370: LD_INT 3
30372: ARRAY
30373: STR
30374: PUSH
30375: LD_STRING ,
30377: STR
30378: PUSH
30379: LD_VAR 0 3
30383: PUSH
30384: LD_VAR 0 2
30388: ARRAY
30389: PUSH
30390: LD_INT 4
30392: ARRAY
30393: STR
30394: PUSH
30395: LD_STRING )
30397: STR
30398: PPUSH
30399: CALL_OW 559
30403: GO 30313
30405: POP
30406: POP
// end ; end ;
30407: LD_VAR 0 1
30411: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
30412: LD_EXP 99
30416: IFFALSE 31101
30418: GO 30420
30420: DISABLE
30421: LD_INT 0
30423: PPUSH
30424: PPUSH
30425: PPUSH
30426: PPUSH
30427: PPUSH
30428: PPUSH
30429: PPUSH
30430: PPUSH
30431: PPUSH
// begin enable ;
30432: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
30433: LD_ADDR_VAR 0 3
30437: PUSH
30438: LD_EXP 99
30442: PPUSH
30443: CALL 76619 0 1
30447: ST_TO_ADDR
// if not list then
30448: LD_VAR 0 3
30452: NOT
30453: IFFALSE 30457
// exit ;
30455: GO 31101
// for i := 1 to list do
30457: LD_ADDR_VAR 0 1
30461: PUSH
30462: DOUBLE
30463: LD_INT 1
30465: DEC
30466: ST_TO_ADDR
30467: LD_VAR 0 3
30471: PUSH
30472: FOR_TO
30473: IFFALSE 31099
// begin depot := list [ i ] [ 2 ] ;
30475: LD_ADDR_VAR 0 8
30479: PUSH
30480: LD_VAR 0 3
30484: PUSH
30485: LD_VAR 0 1
30489: ARRAY
30490: PUSH
30491: LD_INT 2
30493: ARRAY
30494: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30495: LD_ADDR_VAR 0 5
30499: PUSH
30500: LD_VAR 0 3
30504: PUSH
30505: LD_VAR 0 1
30509: ARRAY
30510: PUSH
30511: LD_INT 1
30513: ARRAY
30514: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30515: LD_VAR 0 8
30519: PPUSH
30520: CALL_OW 301
30524: PUSH
30525: LD_VAR 0 5
30529: PUSH
30530: LD_VAR 0 8
30534: PPUSH
30535: CALL_OW 255
30539: NONEQUAL
30540: OR
30541: IFFALSE 30570
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30543: LD_ADDR_EXP 99
30547: PUSH
30548: LD_EXP 99
30552: PPUSH
30553: LD_VAR 0 8
30557: PPUSH
30558: LD_INT 0
30560: PPUSH
30561: CALL_OW 1
30565: ST_TO_ADDR
// exit ;
30566: POP
30567: POP
30568: GO 31101
// end ; x := list [ i ] [ 3 ] ;
30570: LD_ADDR_VAR 0 6
30574: PUSH
30575: LD_VAR 0 3
30579: PUSH
30580: LD_VAR 0 1
30584: ARRAY
30585: PUSH
30586: LD_INT 3
30588: ARRAY
30589: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30590: LD_ADDR_VAR 0 7
30594: PUSH
30595: LD_VAR 0 3
30599: PUSH
30600: LD_VAR 0 1
30604: ARRAY
30605: PUSH
30606: LD_INT 4
30608: ARRAY
30609: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
30610: LD_ADDR_VAR 0 9
30614: PUSH
30615: LD_VAR 0 6
30619: PPUSH
30620: LD_VAR 0 7
30624: PPUSH
30625: LD_INT 16
30627: PPUSH
30628: CALL 75207 0 3
30632: ST_TO_ADDR
// if not cratesNearbyPoint then
30633: LD_VAR 0 9
30637: NOT
30638: IFFALSE 30644
// exit ;
30640: POP
30641: POP
30642: GO 31101
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
30644: LD_ADDR_VAR 0 4
30648: PUSH
30649: LD_INT 22
30651: PUSH
30652: LD_VAR 0 5
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 3
30663: PUSH
30664: LD_INT 60
30666: PUSH
30667: EMPTY
30668: LIST
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 91
30676: PUSH
30677: LD_VAR 0 8
30681: PUSH
30682: LD_INT 6
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 2
30692: PUSH
30693: LD_INT 25
30695: PUSH
30696: LD_INT 2
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: PUSH
30703: LD_INT 25
30705: PUSH
30706: LD_INT 16
30708: PUSH
30709: EMPTY
30710: LIST
30711: LIST
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: LIST
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: LIST
30722: LIST
30723: PPUSH
30724: CALL_OW 69
30728: PUSH
30729: LD_VAR 0 8
30733: PPUSH
30734: CALL_OW 313
30738: PPUSH
30739: LD_INT 3
30741: PUSH
30742: LD_INT 60
30744: PUSH
30745: EMPTY
30746: LIST
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 2
30754: PUSH
30755: LD_INT 25
30757: PUSH
30758: LD_INT 2
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: PUSH
30765: LD_INT 25
30767: PUSH
30768: LD_INT 16
30770: PUSH
30771: EMPTY
30772: LIST
30773: LIST
30774: PUSH
30775: EMPTY
30776: LIST
30777: LIST
30778: LIST
30779: PUSH
30780: EMPTY
30781: LIST
30782: LIST
30783: PPUSH
30784: CALL_OW 72
30788: UNION
30789: ST_TO_ADDR
// if tmp then
30790: LD_VAR 0 4
30794: IFFALSE 30874
// begin tmp := ShrinkArray ( tmp , 3 ) ;
30796: LD_ADDR_VAR 0 4
30800: PUSH
30801: LD_VAR 0 4
30805: PPUSH
30806: LD_INT 3
30808: PPUSH
30809: CALL 73176 0 2
30813: ST_TO_ADDR
// for j in tmp do
30814: LD_ADDR_VAR 0 2
30818: PUSH
30819: LD_VAR 0 4
30823: PUSH
30824: FOR_IN
30825: IFFALSE 30868
// begin if IsInUnit ( j ) then
30827: LD_VAR 0 2
30831: PPUSH
30832: CALL_OW 310
30836: IFFALSE 30847
// ComExit ( j ) ;
30838: LD_VAR 0 2
30842: PPUSH
30843: CALL 73259 0 1
// AddComCollect ( j , x , y ) ;
30847: LD_VAR 0 2
30851: PPUSH
30852: LD_VAR 0 6
30856: PPUSH
30857: LD_VAR 0 7
30861: PPUSH
30862: CALL_OW 177
// end ;
30866: GO 30824
30868: POP
30869: POP
// exit ;
30870: POP
30871: POP
30872: GO 31101
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
30874: LD_ADDR_VAR 0 4
30878: PUSH
30879: LD_INT 22
30881: PUSH
30882: LD_VAR 0 5
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PUSH
30891: LD_INT 91
30893: PUSH
30894: LD_VAR 0 8
30898: PUSH
30899: LD_INT 8
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 2
30909: PUSH
30910: LD_INT 34
30912: PUSH
30913: LD_INT 12
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 34
30922: PUSH
30923: LD_INT 51
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: LD_INT 34
30932: PUSH
30933: LD_INT 32
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 34
30942: PUSH
30943: LD_INT 89
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: LIST
30954: LIST
30955: LIST
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: LIST
30961: PPUSH
30962: CALL_OW 69
30966: ST_TO_ADDR
// if tmp then
30967: LD_VAR 0 4
30971: IFFALSE 31097
// begin for j in tmp do
30973: LD_ADDR_VAR 0 2
30977: PUSH
30978: LD_VAR 0 4
30982: PUSH
30983: FOR_IN
30984: IFFALSE 31095
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
30986: LD_VAR 0 2
30990: PPUSH
30991: CALL_OW 262
30995: PUSH
30996: LD_INT 3
30998: EQUAL
30999: PUSH
31000: LD_VAR 0 2
31004: PPUSH
31005: CALL_OW 261
31009: PUSH
31010: LD_INT 20
31012: GREATER
31013: OR
31014: PUSH
31015: LD_VAR 0 2
31019: PPUSH
31020: CALL_OW 314
31024: NOT
31025: AND
31026: PUSH
31027: LD_VAR 0 2
31031: PPUSH
31032: CALL_OW 263
31036: PUSH
31037: LD_INT 1
31039: NONEQUAL
31040: PUSH
31041: LD_VAR 0 2
31045: PPUSH
31046: CALL_OW 311
31050: OR
31051: AND
31052: IFFALSE 31093
// begin ComCollect ( j , x , y ) ;
31054: LD_VAR 0 2
31058: PPUSH
31059: LD_VAR 0 6
31063: PPUSH
31064: LD_VAR 0 7
31068: PPUSH
31069: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
31073: LD_VAR 0 2
31077: PPUSH
31078: LD_VAR 0 8
31082: PPUSH
31083: CALL_OW 172
// exit ;
31087: POP
31088: POP
31089: POP
31090: POP
31091: GO 31101
// end ;
31093: GO 30983
31095: POP
31096: POP
// end ; end ;
31097: GO 30472
31099: POP
31100: POP
// end ; end_of_file
31101: PPOPN 9
31103: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
31104: LD_INT 0
31106: PPUSH
31107: PPUSH
31108: PPUSH
31109: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
31110: LD_VAR 0 1
31114: PPUSH
31115: CALL_OW 264
31119: PUSH
31120: LD_INT 91
31122: EQUAL
31123: IFFALSE 31195
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
31125: LD_INT 68
31127: PPUSH
31128: LD_VAR 0 1
31132: PPUSH
31133: CALL_OW 255
31137: PPUSH
31138: CALL_OW 321
31142: PUSH
31143: LD_INT 2
31145: EQUAL
31146: IFFALSE 31158
// eff := 70 else
31148: LD_ADDR_VAR 0 4
31152: PUSH
31153: LD_INT 70
31155: ST_TO_ADDR
31156: GO 31166
// eff := 30 ;
31158: LD_ADDR_VAR 0 4
31162: PUSH
31163: LD_INT 30
31165: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
31166: LD_VAR 0 1
31170: PPUSH
31171: CALL_OW 250
31175: PPUSH
31176: LD_VAR 0 1
31180: PPUSH
31181: CALL_OW 251
31185: PPUSH
31186: LD_VAR 0 4
31190: PPUSH
31191: CALL_OW 495
// end ; end ;
31195: LD_VAR 0 2
31199: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
31200: LD_INT 0
31202: PPUSH
// end ;
31203: LD_VAR 0 4
31207: RET
// export function SOS_Command ( cmd ) ; begin
31208: LD_INT 0
31210: PPUSH
// end ;
31211: LD_VAR 0 2
31215: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
31216: LD_INT 0
31218: PPUSH
// end ;
31219: LD_VAR 0 6
31223: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
31224: LD_INT 0
31226: PPUSH
31227: PPUSH
// if not vehicle or not factory then
31228: LD_VAR 0 1
31232: NOT
31233: PUSH
31234: LD_VAR 0 2
31238: NOT
31239: OR
31240: IFFALSE 31244
// exit ;
31242: GO 31475
// if factoryWaypoints >= factory then
31244: LD_EXP 98
31248: PUSH
31249: LD_VAR 0 2
31253: GREATEREQUAL
31254: IFFALSE 31475
// if factoryWaypoints [ factory ] then
31256: LD_EXP 98
31260: PUSH
31261: LD_VAR 0 2
31265: ARRAY
31266: IFFALSE 31475
// begin if GetControl ( vehicle ) = control_manual then
31268: LD_VAR 0 1
31272: PPUSH
31273: CALL_OW 263
31277: PUSH
31278: LD_INT 1
31280: EQUAL
31281: IFFALSE 31362
// begin driver := IsDrivenBy ( vehicle ) ;
31283: LD_ADDR_VAR 0 4
31287: PUSH
31288: LD_VAR 0 1
31292: PPUSH
31293: CALL_OW 311
31297: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31298: LD_VAR 0 4
31302: PPUSH
31303: LD_EXP 98
31307: PUSH
31308: LD_VAR 0 2
31312: ARRAY
31313: PUSH
31314: LD_INT 3
31316: ARRAY
31317: PPUSH
31318: LD_EXP 98
31322: PUSH
31323: LD_VAR 0 2
31327: ARRAY
31328: PUSH
31329: LD_INT 4
31331: ARRAY
31332: PPUSH
31333: CALL_OW 171
// AddComExitVehicle ( driver ) ;
31337: LD_VAR 0 4
31341: PPUSH
31342: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
31346: LD_VAR 0 4
31350: PPUSH
31351: LD_VAR 0 2
31355: PPUSH
31356: CALL_OW 180
// end else
31360: GO 31475
// if GetControl ( vehicle ) = control_remote then
31362: LD_VAR 0 1
31366: PPUSH
31367: CALL_OW 263
31371: PUSH
31372: LD_INT 2
31374: EQUAL
31375: IFFALSE 31436
// begin wait ( 0 0$2 ) ;
31377: LD_INT 70
31379: PPUSH
31380: CALL_OW 67
// if Connect ( vehicle ) then
31384: LD_VAR 0 1
31388: PPUSH
31389: CALL 43499 0 1
31393: IFFALSE 31434
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31395: LD_VAR 0 1
31399: PPUSH
31400: LD_EXP 98
31404: PUSH
31405: LD_VAR 0 2
31409: ARRAY
31410: PUSH
31411: LD_INT 3
31413: ARRAY
31414: PPUSH
31415: LD_EXP 98
31419: PUSH
31420: LD_VAR 0 2
31424: ARRAY
31425: PUSH
31426: LD_INT 4
31428: ARRAY
31429: PPUSH
31430: CALL_OW 171
// end else
31434: GO 31475
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
31436: LD_VAR 0 1
31440: PPUSH
31441: LD_EXP 98
31445: PUSH
31446: LD_VAR 0 2
31450: ARRAY
31451: PUSH
31452: LD_INT 3
31454: ARRAY
31455: PPUSH
31456: LD_EXP 98
31460: PUSH
31461: LD_VAR 0 2
31465: ARRAY
31466: PUSH
31467: LD_INT 4
31469: ARRAY
31470: PPUSH
31471: CALL_OW 171
// end ; end ;
31475: LD_VAR 0 3
31479: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31480: LD_INT 0
31482: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31483: LD_VAR 0 1
31487: PUSH
31488: LD_INT 250
31490: EQUAL
31491: PUSH
31492: LD_VAR 0 2
31496: PPUSH
31497: CALL_OW 264
31501: PUSH
31502: LD_INT 81
31504: EQUAL
31505: AND
31506: IFFALSE 31527
// MinerPlaceMine ( unit , x , y ) ;
31508: LD_VAR 0 2
31512: PPUSH
31513: LD_VAR 0 4
31517: PPUSH
31518: LD_VAR 0 5
31522: PPUSH
31523: CALL 33912 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31527: LD_VAR 0 1
31531: PUSH
31532: LD_INT 251
31534: EQUAL
31535: PUSH
31536: LD_VAR 0 2
31540: PPUSH
31541: CALL_OW 264
31545: PUSH
31546: LD_INT 81
31548: EQUAL
31549: AND
31550: IFFALSE 31571
// MinerDetonateMine ( unit , x , y ) ;
31552: LD_VAR 0 2
31556: PPUSH
31557: LD_VAR 0 4
31561: PPUSH
31562: LD_VAR 0 5
31566: PPUSH
31567: CALL 34187 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31571: LD_VAR 0 1
31575: PUSH
31576: LD_INT 252
31578: EQUAL
31579: PUSH
31580: LD_VAR 0 2
31584: PPUSH
31585: CALL_OW 264
31589: PUSH
31590: LD_INT 81
31592: EQUAL
31593: AND
31594: IFFALSE 31615
// MinerCreateMinefield ( unit , x , y ) ;
31596: LD_VAR 0 2
31600: PPUSH
31601: LD_VAR 0 4
31605: PPUSH
31606: LD_VAR 0 5
31610: PPUSH
31611: CALL 34604 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
31615: LD_VAR 0 1
31619: PUSH
31620: LD_INT 253
31622: EQUAL
31623: PUSH
31624: LD_VAR 0 2
31628: PPUSH
31629: CALL_OW 257
31633: PUSH
31634: LD_INT 5
31636: EQUAL
31637: AND
31638: IFFALSE 31659
// ComBinocular ( unit , x , y ) ;
31640: LD_VAR 0 2
31644: PPUSH
31645: LD_VAR 0 4
31649: PPUSH
31650: LD_VAR 0 5
31654: PPUSH
31655: CALL 34973 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31659: LD_VAR 0 1
31663: PUSH
31664: LD_INT 254
31666: EQUAL
31667: PUSH
31668: LD_VAR 0 2
31672: PPUSH
31673: CALL_OW 264
31677: PUSH
31678: LD_INT 99
31680: EQUAL
31681: AND
31682: PUSH
31683: LD_VAR 0 3
31687: PPUSH
31688: CALL_OW 263
31692: PUSH
31693: LD_INT 3
31695: EQUAL
31696: AND
31697: IFFALSE 31713
// HackDestroyVehicle ( unit , selectedUnit ) ;
31699: LD_VAR 0 2
31703: PPUSH
31704: LD_VAR 0 3
31708: PPUSH
31709: CALL 33276 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
31713: LD_VAR 0 1
31717: PUSH
31718: LD_INT 255
31720: EQUAL
31721: PUSH
31722: LD_VAR 0 2
31726: PPUSH
31727: CALL_OW 264
31731: PUSH
31732: LD_INT 14
31734: PUSH
31735: LD_INT 53
31737: PUSH
31738: EMPTY
31739: LIST
31740: LIST
31741: IN
31742: AND
31743: PUSH
31744: LD_VAR 0 4
31748: PPUSH
31749: LD_VAR 0 5
31753: PPUSH
31754: CALL_OW 488
31758: AND
31759: IFFALSE 31783
// CutTreeXYR ( unit , x , y , 12 ) ;
31761: LD_VAR 0 2
31765: PPUSH
31766: LD_VAR 0 4
31770: PPUSH
31771: LD_VAR 0 5
31775: PPUSH
31776: LD_INT 12
31778: PPUSH
31779: CALL 31846 0 4
// if cmd = 256 then
31783: LD_VAR 0 1
31787: PUSH
31788: LD_INT 256
31790: EQUAL
31791: IFFALSE 31812
// SetFactoryWaypoint ( unit , x , y ) ;
31793: LD_VAR 0 2
31797: PPUSH
31798: LD_VAR 0 4
31802: PPUSH
31803: LD_VAR 0 5
31807: PPUSH
31808: CALL 29793 0 3
// if cmd = 257 then
31812: LD_VAR 0 1
31816: PUSH
31817: LD_INT 257
31819: EQUAL
31820: IFFALSE 31841
// SetWarehouseGatheringPoint ( unit , x , y ) ;
31822: LD_VAR 0 2
31826: PPUSH
31827: LD_VAR 0 4
31831: PPUSH
31832: LD_VAR 0 5
31836: PPUSH
31837: CALL 30155 0 3
// end ;
31841: LD_VAR 0 6
31845: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
31846: LD_INT 0
31848: PPUSH
31849: PPUSH
31850: PPUSH
31851: PPUSH
31852: PPUSH
31853: PPUSH
31854: PPUSH
31855: PPUSH
31856: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
31857: LD_VAR 0 1
31861: NOT
31862: PUSH
31863: LD_VAR 0 2
31867: PPUSH
31868: LD_VAR 0 3
31872: PPUSH
31873: CALL_OW 488
31877: NOT
31878: OR
31879: PUSH
31880: LD_VAR 0 4
31884: NOT
31885: OR
31886: IFFALSE 31890
// exit ;
31888: GO 32230
// list := [ ] ;
31890: LD_ADDR_VAR 0 13
31894: PUSH
31895: EMPTY
31896: ST_TO_ADDR
// if x - r < 0 then
31897: LD_VAR 0 2
31901: PUSH
31902: LD_VAR 0 4
31906: MINUS
31907: PUSH
31908: LD_INT 0
31910: LESS
31911: IFFALSE 31923
// min_x := 0 else
31913: LD_ADDR_VAR 0 7
31917: PUSH
31918: LD_INT 0
31920: ST_TO_ADDR
31921: GO 31939
// min_x := x - r ;
31923: LD_ADDR_VAR 0 7
31927: PUSH
31928: LD_VAR 0 2
31932: PUSH
31933: LD_VAR 0 4
31937: MINUS
31938: ST_TO_ADDR
// if y - r < 0 then
31939: LD_VAR 0 3
31943: PUSH
31944: LD_VAR 0 4
31948: MINUS
31949: PUSH
31950: LD_INT 0
31952: LESS
31953: IFFALSE 31965
// min_y := 0 else
31955: LD_ADDR_VAR 0 8
31959: PUSH
31960: LD_INT 0
31962: ST_TO_ADDR
31963: GO 31981
// min_y := y - r ;
31965: LD_ADDR_VAR 0 8
31969: PUSH
31970: LD_VAR 0 3
31974: PUSH
31975: LD_VAR 0 4
31979: MINUS
31980: ST_TO_ADDR
// max_x := x + r ;
31981: LD_ADDR_VAR 0 9
31985: PUSH
31986: LD_VAR 0 2
31990: PUSH
31991: LD_VAR 0 4
31995: PLUS
31996: ST_TO_ADDR
// max_y := y + r ;
31997: LD_ADDR_VAR 0 10
32001: PUSH
32002: LD_VAR 0 3
32006: PUSH
32007: LD_VAR 0 4
32011: PLUS
32012: ST_TO_ADDR
// for _x = min_x to max_x do
32013: LD_ADDR_VAR 0 11
32017: PUSH
32018: DOUBLE
32019: LD_VAR 0 7
32023: DEC
32024: ST_TO_ADDR
32025: LD_VAR 0 9
32029: PUSH
32030: FOR_TO
32031: IFFALSE 32148
// for _y = min_y to max_y do
32033: LD_ADDR_VAR 0 12
32037: PUSH
32038: DOUBLE
32039: LD_VAR 0 8
32043: DEC
32044: ST_TO_ADDR
32045: LD_VAR 0 10
32049: PUSH
32050: FOR_TO
32051: IFFALSE 32144
// begin if not ValidHex ( _x , _y ) then
32053: LD_VAR 0 11
32057: PPUSH
32058: LD_VAR 0 12
32062: PPUSH
32063: CALL_OW 488
32067: NOT
32068: IFFALSE 32072
// continue ;
32070: GO 32050
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
32072: LD_VAR 0 11
32076: PPUSH
32077: LD_VAR 0 12
32081: PPUSH
32082: CALL_OW 351
32086: PUSH
32087: LD_VAR 0 11
32091: PPUSH
32092: LD_VAR 0 12
32096: PPUSH
32097: CALL_OW 554
32101: AND
32102: IFFALSE 32142
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
32104: LD_ADDR_VAR 0 13
32108: PUSH
32109: LD_VAR 0 13
32113: PPUSH
32114: LD_VAR 0 13
32118: PUSH
32119: LD_INT 1
32121: PLUS
32122: PPUSH
32123: LD_VAR 0 11
32127: PUSH
32128: LD_VAR 0 12
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: PPUSH
32137: CALL_OW 2
32141: ST_TO_ADDR
// end ;
32142: GO 32050
32144: POP
32145: POP
32146: GO 32030
32148: POP
32149: POP
// if not list then
32150: LD_VAR 0 13
32154: NOT
32155: IFFALSE 32159
// exit ;
32157: GO 32230
// for i in list do
32159: LD_ADDR_VAR 0 6
32163: PUSH
32164: LD_VAR 0 13
32168: PUSH
32169: FOR_IN
32170: IFFALSE 32228
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
32172: LD_VAR 0 1
32176: PPUSH
32177: LD_STRING M
32179: PUSH
32180: LD_VAR 0 6
32184: PUSH
32185: LD_INT 1
32187: ARRAY
32188: PUSH
32189: LD_VAR 0 6
32193: PUSH
32194: LD_INT 2
32196: ARRAY
32197: PUSH
32198: LD_INT 0
32200: PUSH
32201: LD_INT 0
32203: PUSH
32204: LD_INT 0
32206: PUSH
32207: LD_INT 0
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: PUSH
32219: EMPTY
32220: LIST
32221: PPUSH
32222: CALL_OW 447
32226: GO 32169
32228: POP
32229: POP
// end ;
32230: LD_VAR 0 5
32234: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
32235: LD_EXP 101
32239: NOT
32240: IFFALSE 32290
32242: GO 32244
32244: DISABLE
// begin initHack := true ;
32245: LD_ADDR_EXP 101
32249: PUSH
32250: LD_INT 1
32252: ST_TO_ADDR
// hackTanks := [ ] ;
32253: LD_ADDR_EXP 102
32257: PUSH
32258: EMPTY
32259: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
32260: LD_ADDR_EXP 103
32264: PUSH
32265: EMPTY
32266: ST_TO_ADDR
// hackLimit := 3 ;
32267: LD_ADDR_EXP 104
32271: PUSH
32272: LD_INT 3
32274: ST_TO_ADDR
// hackDist := 12 ;
32275: LD_ADDR_EXP 105
32279: PUSH
32280: LD_INT 12
32282: ST_TO_ADDR
// hackCounter := [ ] ;
32283: LD_ADDR_EXP 106
32287: PUSH
32288: EMPTY
32289: ST_TO_ADDR
// end ;
32290: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
32291: LD_EXP 101
32295: PUSH
32296: LD_INT 34
32298: PUSH
32299: LD_INT 99
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PPUSH
32306: CALL_OW 69
32310: AND
32311: IFFALSE 32564
32313: GO 32315
32315: DISABLE
32316: LD_INT 0
32318: PPUSH
32319: PPUSH
// begin enable ;
32320: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
32321: LD_ADDR_VAR 0 1
32325: PUSH
32326: LD_INT 34
32328: PUSH
32329: LD_INT 99
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PPUSH
32336: CALL_OW 69
32340: PUSH
32341: FOR_IN
32342: IFFALSE 32562
// begin if not i in hackTanks then
32344: LD_VAR 0 1
32348: PUSH
32349: LD_EXP 102
32353: IN
32354: NOT
32355: IFFALSE 32438
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
32357: LD_ADDR_EXP 102
32361: PUSH
32362: LD_EXP 102
32366: PPUSH
32367: LD_EXP 102
32371: PUSH
32372: LD_INT 1
32374: PLUS
32375: PPUSH
32376: LD_VAR 0 1
32380: PPUSH
32381: CALL_OW 1
32385: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
32386: LD_ADDR_EXP 103
32390: PUSH
32391: LD_EXP 103
32395: PPUSH
32396: LD_EXP 103
32400: PUSH
32401: LD_INT 1
32403: PLUS
32404: PPUSH
32405: EMPTY
32406: PPUSH
32407: CALL_OW 1
32411: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
32412: LD_ADDR_EXP 106
32416: PUSH
32417: LD_EXP 106
32421: PPUSH
32422: LD_EXP 106
32426: PUSH
32427: LD_INT 1
32429: PLUS
32430: PPUSH
32431: EMPTY
32432: PPUSH
32433: CALL_OW 1
32437: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32438: LD_VAR 0 1
32442: PPUSH
32443: CALL_OW 302
32447: NOT
32448: IFFALSE 32461
// begin HackUnlinkAll ( i ) ;
32450: LD_VAR 0 1
32454: PPUSH
32455: CALL 32567 0 1
// continue ;
32459: GO 32341
// end ; HackCheckCapturedStatus ( i ) ;
32461: LD_VAR 0 1
32465: PPUSH
32466: CALL 33010 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32470: LD_ADDR_VAR 0 2
32474: PUSH
32475: LD_INT 81
32477: PUSH
32478: LD_VAR 0 1
32482: PPUSH
32483: CALL_OW 255
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 33
32494: PUSH
32495: LD_INT 3
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 91
32504: PUSH
32505: LD_VAR 0 1
32509: PUSH
32510: LD_EXP 105
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 50
32522: PUSH
32523: EMPTY
32524: LIST
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: PPUSH
32532: CALL_OW 69
32536: ST_TO_ADDR
// if not tmp then
32537: LD_VAR 0 2
32541: NOT
32542: IFFALSE 32546
// continue ;
32544: GO 32341
// HackLink ( i , tmp ) ;
32546: LD_VAR 0 1
32550: PPUSH
32551: LD_VAR 0 2
32555: PPUSH
32556: CALL 32703 0 2
// end ;
32560: GO 32341
32562: POP
32563: POP
// end ;
32564: PPOPN 2
32566: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32567: LD_INT 0
32569: PPUSH
32570: PPUSH
32571: PPUSH
// if not hack in hackTanks then
32572: LD_VAR 0 1
32576: PUSH
32577: LD_EXP 102
32581: IN
32582: NOT
32583: IFFALSE 32587
// exit ;
32585: GO 32698
// index := GetElementIndex ( hackTanks , hack ) ;
32587: LD_ADDR_VAR 0 4
32591: PUSH
32592: LD_EXP 102
32596: PPUSH
32597: LD_VAR 0 1
32601: PPUSH
32602: CALL 40315 0 2
32606: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32607: LD_EXP 103
32611: PUSH
32612: LD_VAR 0 4
32616: ARRAY
32617: IFFALSE 32698
// begin for i in hackTanksCaptured [ index ] do
32619: LD_ADDR_VAR 0 3
32623: PUSH
32624: LD_EXP 103
32628: PUSH
32629: LD_VAR 0 4
32633: ARRAY
32634: PUSH
32635: FOR_IN
32636: IFFALSE 32662
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32638: LD_VAR 0 3
32642: PUSH
32643: LD_INT 1
32645: ARRAY
32646: PPUSH
32647: LD_VAR 0 3
32651: PUSH
32652: LD_INT 2
32654: ARRAY
32655: PPUSH
32656: CALL_OW 235
32660: GO 32635
32662: POP
32663: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32664: LD_ADDR_EXP 103
32668: PUSH
32669: LD_EXP 103
32673: PPUSH
32674: LD_VAR 0 4
32678: PPUSH
32679: EMPTY
32680: PPUSH
32681: CALL_OW 1
32685: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
32686: LD_VAR 0 1
32690: PPUSH
32691: LD_INT 0
32693: PPUSH
32694: CALL_OW 505
// end ; end ;
32698: LD_VAR 0 2
32702: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
32703: LD_INT 0
32705: PPUSH
32706: PPUSH
32707: PPUSH
// if not hack in hackTanks or not vehicles then
32708: LD_VAR 0 1
32712: PUSH
32713: LD_EXP 102
32717: IN
32718: NOT
32719: PUSH
32720: LD_VAR 0 2
32724: NOT
32725: OR
32726: IFFALSE 32730
// exit ;
32728: GO 33005
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
32730: LD_ADDR_VAR 0 2
32734: PUSH
32735: LD_VAR 0 1
32739: PPUSH
32740: LD_VAR 0 2
32744: PPUSH
32745: LD_INT 1
32747: PPUSH
32748: LD_INT 1
32750: PPUSH
32751: CALL 40965 0 4
32755: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
32756: LD_ADDR_VAR 0 5
32760: PUSH
32761: LD_EXP 102
32765: PPUSH
32766: LD_VAR 0 1
32770: PPUSH
32771: CALL 40315 0 2
32775: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
32776: LD_EXP 103
32780: PUSH
32781: LD_VAR 0 5
32785: ARRAY
32786: PUSH
32787: LD_EXP 104
32791: LESS
32792: IFFALSE 32981
// begin for i := 1 to vehicles do
32794: LD_ADDR_VAR 0 4
32798: PUSH
32799: DOUBLE
32800: LD_INT 1
32802: DEC
32803: ST_TO_ADDR
32804: LD_VAR 0 2
32808: PUSH
32809: FOR_TO
32810: IFFALSE 32979
// begin if hackTanksCaptured [ index ] = hackLimit then
32812: LD_EXP 103
32816: PUSH
32817: LD_VAR 0 5
32821: ARRAY
32822: PUSH
32823: LD_EXP 104
32827: EQUAL
32828: IFFALSE 32832
// break ;
32830: GO 32979
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
32832: LD_ADDR_EXP 106
32836: PUSH
32837: LD_EXP 106
32841: PPUSH
32842: LD_VAR 0 5
32846: PPUSH
32847: LD_EXP 106
32851: PUSH
32852: LD_VAR 0 5
32856: ARRAY
32857: PUSH
32858: LD_INT 1
32860: PLUS
32861: PPUSH
32862: CALL_OW 1
32866: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
32867: LD_ADDR_EXP 103
32871: PUSH
32872: LD_EXP 103
32876: PPUSH
32877: LD_VAR 0 5
32881: PUSH
32882: LD_EXP 103
32886: PUSH
32887: LD_VAR 0 5
32891: ARRAY
32892: PUSH
32893: LD_INT 1
32895: PLUS
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PPUSH
32901: LD_VAR 0 2
32905: PUSH
32906: LD_VAR 0 4
32910: ARRAY
32911: PUSH
32912: LD_VAR 0 2
32916: PUSH
32917: LD_VAR 0 4
32921: ARRAY
32922: PPUSH
32923: CALL_OW 255
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PPUSH
32932: CALL 40530 0 3
32936: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
32937: LD_VAR 0 2
32941: PUSH
32942: LD_VAR 0 4
32946: ARRAY
32947: PPUSH
32948: LD_VAR 0 1
32952: PPUSH
32953: CALL_OW 255
32957: PPUSH
32958: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
32962: LD_VAR 0 2
32966: PUSH
32967: LD_VAR 0 4
32971: ARRAY
32972: PPUSH
32973: CALL_OW 141
// end ;
32977: GO 32809
32979: POP
32980: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32981: LD_VAR 0 1
32985: PPUSH
32986: LD_EXP 103
32990: PUSH
32991: LD_VAR 0 5
32995: ARRAY
32996: PUSH
32997: LD_INT 0
32999: PLUS
33000: PPUSH
33001: CALL_OW 505
// end ;
33005: LD_VAR 0 3
33009: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
33010: LD_INT 0
33012: PPUSH
33013: PPUSH
33014: PPUSH
33015: PPUSH
// if not hack in hackTanks then
33016: LD_VAR 0 1
33020: PUSH
33021: LD_EXP 102
33025: IN
33026: NOT
33027: IFFALSE 33031
// exit ;
33029: GO 33271
// index := GetElementIndex ( hackTanks , hack ) ;
33031: LD_ADDR_VAR 0 4
33035: PUSH
33036: LD_EXP 102
33040: PPUSH
33041: LD_VAR 0 1
33045: PPUSH
33046: CALL 40315 0 2
33050: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
33051: LD_ADDR_VAR 0 3
33055: PUSH
33056: DOUBLE
33057: LD_EXP 103
33061: PUSH
33062: LD_VAR 0 4
33066: ARRAY
33067: INC
33068: ST_TO_ADDR
33069: LD_INT 1
33071: PUSH
33072: FOR_DOWNTO
33073: IFFALSE 33245
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
33075: LD_ADDR_VAR 0 5
33079: PUSH
33080: LD_EXP 103
33084: PUSH
33085: LD_VAR 0 4
33089: ARRAY
33090: PUSH
33091: LD_VAR 0 3
33095: ARRAY
33096: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
33097: LD_VAR 0 5
33101: PUSH
33102: LD_INT 1
33104: ARRAY
33105: PPUSH
33106: CALL_OW 302
33110: NOT
33111: PUSH
33112: LD_VAR 0 5
33116: PUSH
33117: LD_INT 1
33119: ARRAY
33120: PPUSH
33121: CALL_OW 255
33125: PUSH
33126: LD_VAR 0 1
33130: PPUSH
33131: CALL_OW 255
33135: NONEQUAL
33136: OR
33137: IFFALSE 33243
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
33139: LD_VAR 0 5
33143: PUSH
33144: LD_INT 1
33146: ARRAY
33147: PPUSH
33148: CALL_OW 305
33152: PUSH
33153: LD_VAR 0 5
33157: PUSH
33158: LD_INT 1
33160: ARRAY
33161: PPUSH
33162: CALL_OW 255
33166: PUSH
33167: LD_VAR 0 1
33171: PPUSH
33172: CALL_OW 255
33176: EQUAL
33177: AND
33178: IFFALSE 33202
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
33180: LD_VAR 0 5
33184: PUSH
33185: LD_INT 1
33187: ARRAY
33188: PPUSH
33189: LD_VAR 0 5
33193: PUSH
33194: LD_INT 2
33196: ARRAY
33197: PPUSH
33198: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
33202: LD_ADDR_EXP 103
33206: PUSH
33207: LD_EXP 103
33211: PPUSH
33212: LD_VAR 0 4
33216: PPUSH
33217: LD_EXP 103
33221: PUSH
33222: LD_VAR 0 4
33226: ARRAY
33227: PPUSH
33228: LD_VAR 0 3
33232: PPUSH
33233: CALL_OW 3
33237: PPUSH
33238: CALL_OW 1
33242: ST_TO_ADDR
// end ; end ;
33243: GO 33072
33245: POP
33246: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
33247: LD_VAR 0 1
33251: PPUSH
33252: LD_EXP 103
33256: PUSH
33257: LD_VAR 0 4
33261: ARRAY
33262: PUSH
33263: LD_INT 0
33265: PLUS
33266: PPUSH
33267: CALL_OW 505
// end ;
33271: LD_VAR 0 2
33275: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
33276: LD_INT 0
33278: PPUSH
33279: PPUSH
33280: PPUSH
33281: PPUSH
// if not hack in hackTanks then
33282: LD_VAR 0 1
33286: PUSH
33287: LD_EXP 102
33291: IN
33292: NOT
33293: IFFALSE 33297
// exit ;
33295: GO 33382
// index := GetElementIndex ( hackTanks , hack ) ;
33297: LD_ADDR_VAR 0 5
33301: PUSH
33302: LD_EXP 102
33306: PPUSH
33307: LD_VAR 0 1
33311: PPUSH
33312: CALL 40315 0 2
33316: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
33317: LD_ADDR_VAR 0 4
33321: PUSH
33322: DOUBLE
33323: LD_INT 1
33325: DEC
33326: ST_TO_ADDR
33327: LD_EXP 103
33331: PUSH
33332: LD_VAR 0 5
33336: ARRAY
33337: PUSH
33338: FOR_TO
33339: IFFALSE 33380
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
33341: LD_EXP 103
33345: PUSH
33346: LD_VAR 0 5
33350: ARRAY
33351: PUSH
33352: LD_VAR 0 4
33356: ARRAY
33357: PUSH
33358: LD_INT 1
33360: ARRAY
33361: PUSH
33362: LD_VAR 0 2
33366: EQUAL
33367: IFFALSE 33378
// KillUnit ( vehicle ) ;
33369: LD_VAR 0 2
33373: PPUSH
33374: CALL_OW 66
33378: GO 33338
33380: POP
33381: POP
// end ;
33382: LD_VAR 0 3
33386: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
33387: LD_EXP 107
33391: NOT
33392: IFFALSE 33427
33394: GO 33396
33396: DISABLE
// begin initMiner := true ;
33397: LD_ADDR_EXP 107
33401: PUSH
33402: LD_INT 1
33404: ST_TO_ADDR
// minersList := [ ] ;
33405: LD_ADDR_EXP 108
33409: PUSH
33410: EMPTY
33411: ST_TO_ADDR
// minerMinesList := [ ] ;
33412: LD_ADDR_EXP 109
33416: PUSH
33417: EMPTY
33418: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
33419: LD_ADDR_EXP 110
33423: PUSH
33424: LD_INT 5
33426: ST_TO_ADDR
// end ;
33427: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
33428: LD_EXP 107
33432: PUSH
33433: LD_INT 34
33435: PUSH
33436: LD_INT 81
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PPUSH
33443: CALL_OW 69
33447: AND
33448: IFFALSE 33909
33450: GO 33452
33452: DISABLE
33453: LD_INT 0
33455: PPUSH
33456: PPUSH
33457: PPUSH
33458: PPUSH
// begin enable ;
33459: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
33460: LD_ADDR_VAR 0 1
33464: PUSH
33465: LD_INT 34
33467: PUSH
33468: LD_INT 81
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PPUSH
33475: CALL_OW 69
33479: PUSH
33480: FOR_IN
33481: IFFALSE 33553
// begin if not i in minersList then
33483: LD_VAR 0 1
33487: PUSH
33488: LD_EXP 108
33492: IN
33493: NOT
33494: IFFALSE 33551
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
33496: LD_ADDR_EXP 108
33500: PUSH
33501: LD_EXP 108
33505: PPUSH
33506: LD_EXP 108
33510: PUSH
33511: LD_INT 1
33513: PLUS
33514: PPUSH
33515: LD_VAR 0 1
33519: PPUSH
33520: CALL_OW 1
33524: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
33525: LD_ADDR_EXP 109
33529: PUSH
33530: LD_EXP 109
33534: PPUSH
33535: LD_EXP 109
33539: PUSH
33540: LD_INT 1
33542: PLUS
33543: PPUSH
33544: EMPTY
33545: PPUSH
33546: CALL_OW 1
33550: ST_TO_ADDR
// end end ;
33551: GO 33480
33553: POP
33554: POP
// for i := minerMinesList downto 1 do
33555: LD_ADDR_VAR 0 1
33559: PUSH
33560: DOUBLE
33561: LD_EXP 109
33565: INC
33566: ST_TO_ADDR
33567: LD_INT 1
33569: PUSH
33570: FOR_DOWNTO
33571: IFFALSE 33907
// begin if IsLive ( minersList [ i ] ) then
33573: LD_EXP 108
33577: PUSH
33578: LD_VAR 0 1
33582: ARRAY
33583: PPUSH
33584: CALL_OW 300
33588: IFFALSE 33616
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
33590: LD_EXP 108
33594: PUSH
33595: LD_VAR 0 1
33599: ARRAY
33600: PPUSH
33601: LD_EXP 109
33605: PUSH
33606: LD_VAR 0 1
33610: ARRAY
33611: PPUSH
33612: CALL_OW 505
// if not minerMinesList [ i ] then
33616: LD_EXP 109
33620: PUSH
33621: LD_VAR 0 1
33625: ARRAY
33626: NOT
33627: IFFALSE 33631
// continue ;
33629: GO 33570
// for j := minerMinesList [ i ] downto 1 do
33631: LD_ADDR_VAR 0 2
33635: PUSH
33636: DOUBLE
33637: LD_EXP 109
33641: PUSH
33642: LD_VAR 0 1
33646: ARRAY
33647: INC
33648: ST_TO_ADDR
33649: LD_INT 1
33651: PUSH
33652: FOR_DOWNTO
33653: IFFALSE 33903
// begin side := GetSide ( minersList [ i ] ) ;
33655: LD_ADDR_VAR 0 3
33659: PUSH
33660: LD_EXP 108
33664: PUSH
33665: LD_VAR 0 1
33669: ARRAY
33670: PPUSH
33671: CALL_OW 255
33675: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
33676: LD_ADDR_VAR 0 4
33680: PUSH
33681: LD_EXP 109
33685: PUSH
33686: LD_VAR 0 1
33690: ARRAY
33691: PUSH
33692: LD_VAR 0 2
33696: ARRAY
33697: PUSH
33698: LD_INT 1
33700: ARRAY
33701: PPUSH
33702: LD_EXP 109
33706: PUSH
33707: LD_VAR 0 1
33711: ARRAY
33712: PUSH
33713: LD_VAR 0 2
33717: ARRAY
33718: PUSH
33719: LD_INT 2
33721: ARRAY
33722: PPUSH
33723: CALL_OW 428
33727: ST_TO_ADDR
// if not tmp then
33728: LD_VAR 0 4
33732: NOT
33733: IFFALSE 33737
// continue ;
33735: GO 33652
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
33737: LD_VAR 0 4
33741: PUSH
33742: LD_INT 81
33744: PUSH
33745: LD_VAR 0 3
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PPUSH
33754: CALL_OW 69
33758: IN
33759: PUSH
33760: LD_EXP 109
33764: PUSH
33765: LD_VAR 0 1
33769: ARRAY
33770: PUSH
33771: LD_VAR 0 2
33775: ARRAY
33776: PUSH
33777: LD_INT 1
33779: ARRAY
33780: PPUSH
33781: LD_EXP 109
33785: PUSH
33786: LD_VAR 0 1
33790: ARRAY
33791: PUSH
33792: LD_VAR 0 2
33796: ARRAY
33797: PUSH
33798: LD_INT 2
33800: ARRAY
33801: PPUSH
33802: CALL_OW 458
33806: AND
33807: IFFALSE 33901
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
33809: LD_EXP 109
33813: PUSH
33814: LD_VAR 0 1
33818: ARRAY
33819: PUSH
33820: LD_VAR 0 2
33824: ARRAY
33825: PUSH
33826: LD_INT 1
33828: ARRAY
33829: PPUSH
33830: LD_EXP 109
33834: PUSH
33835: LD_VAR 0 1
33839: ARRAY
33840: PUSH
33841: LD_VAR 0 2
33845: ARRAY
33846: PUSH
33847: LD_INT 2
33849: ARRAY
33850: PPUSH
33851: LD_VAR 0 3
33855: PPUSH
33856: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
33860: LD_ADDR_EXP 109
33864: PUSH
33865: LD_EXP 109
33869: PPUSH
33870: LD_VAR 0 1
33874: PPUSH
33875: LD_EXP 109
33879: PUSH
33880: LD_VAR 0 1
33884: ARRAY
33885: PPUSH
33886: LD_VAR 0 2
33890: PPUSH
33891: CALL_OW 3
33895: PPUSH
33896: CALL_OW 1
33900: ST_TO_ADDR
// end ; end ;
33901: GO 33652
33903: POP
33904: POP
// end ;
33905: GO 33570
33907: POP
33908: POP
// end ;
33909: PPOPN 4
33911: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
33912: LD_INT 0
33914: PPUSH
33915: PPUSH
// result := false ;
33916: LD_ADDR_VAR 0 4
33920: PUSH
33921: LD_INT 0
33923: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
33924: LD_VAR 0 1
33928: PPUSH
33929: CALL_OW 264
33933: PUSH
33934: LD_INT 81
33936: EQUAL
33937: NOT
33938: IFFALSE 33942
// exit ;
33940: GO 34182
// index := GetElementIndex ( minersList , unit ) ;
33942: LD_ADDR_VAR 0 5
33946: PUSH
33947: LD_EXP 108
33951: PPUSH
33952: LD_VAR 0 1
33956: PPUSH
33957: CALL 40315 0 2
33961: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
33962: LD_EXP 109
33966: PUSH
33967: LD_VAR 0 5
33971: ARRAY
33972: PUSH
33973: LD_EXP 110
33977: GREATEREQUAL
33978: IFFALSE 33982
// exit ;
33980: GO 34182
// ComMoveXY ( unit , x , y ) ;
33982: LD_VAR 0 1
33986: PPUSH
33987: LD_VAR 0 2
33991: PPUSH
33992: LD_VAR 0 3
33996: PPUSH
33997: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34001: LD_INT 35
34003: PPUSH
34004: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
34008: LD_VAR 0 1
34012: PPUSH
34013: LD_VAR 0 2
34017: PPUSH
34018: LD_VAR 0 3
34022: PPUSH
34023: CALL 71670 0 3
34027: NOT
34028: PUSH
34029: LD_VAR 0 1
34033: PPUSH
34034: CALL_OW 314
34038: AND
34039: IFFALSE 34043
// exit ;
34041: GO 34182
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
34043: LD_VAR 0 2
34047: PPUSH
34048: LD_VAR 0 3
34052: PPUSH
34053: CALL_OW 428
34057: PUSH
34058: LD_VAR 0 1
34062: EQUAL
34063: PUSH
34064: LD_VAR 0 1
34068: PPUSH
34069: CALL_OW 314
34073: NOT
34074: AND
34075: IFFALSE 34001
// PlaySoundXY ( x , y , PlantMine ) ;
34077: LD_VAR 0 2
34081: PPUSH
34082: LD_VAR 0 3
34086: PPUSH
34087: LD_STRING PlantMine
34089: PPUSH
34090: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
34094: LD_VAR 0 2
34098: PPUSH
34099: LD_VAR 0 3
34103: PPUSH
34104: LD_VAR 0 1
34108: PPUSH
34109: CALL_OW 255
34113: PPUSH
34114: LD_INT 0
34116: PPUSH
34117: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
34121: LD_ADDR_EXP 109
34125: PUSH
34126: LD_EXP 109
34130: PPUSH
34131: LD_VAR 0 5
34135: PUSH
34136: LD_EXP 109
34140: PUSH
34141: LD_VAR 0 5
34145: ARRAY
34146: PUSH
34147: LD_INT 1
34149: PLUS
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: PPUSH
34155: LD_VAR 0 2
34159: PUSH
34160: LD_VAR 0 3
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PPUSH
34169: CALL 40530 0 3
34173: ST_TO_ADDR
// result := true ;
34174: LD_ADDR_VAR 0 4
34178: PUSH
34179: LD_INT 1
34181: ST_TO_ADDR
// end ;
34182: LD_VAR 0 4
34186: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
34187: LD_INT 0
34189: PPUSH
34190: PPUSH
34191: PPUSH
// if not unit in minersList then
34192: LD_VAR 0 1
34196: PUSH
34197: LD_EXP 108
34201: IN
34202: NOT
34203: IFFALSE 34207
// exit ;
34205: GO 34599
// index := GetElementIndex ( minersList , unit ) ;
34207: LD_ADDR_VAR 0 6
34211: PUSH
34212: LD_EXP 108
34216: PPUSH
34217: LD_VAR 0 1
34221: PPUSH
34222: CALL 40315 0 2
34226: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
34227: LD_ADDR_VAR 0 5
34231: PUSH
34232: DOUBLE
34233: LD_EXP 109
34237: PUSH
34238: LD_VAR 0 6
34242: ARRAY
34243: INC
34244: ST_TO_ADDR
34245: LD_INT 1
34247: PUSH
34248: FOR_DOWNTO
34249: IFFALSE 34410
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
34251: LD_EXP 109
34255: PUSH
34256: LD_VAR 0 6
34260: ARRAY
34261: PUSH
34262: LD_VAR 0 5
34266: ARRAY
34267: PUSH
34268: LD_INT 1
34270: ARRAY
34271: PUSH
34272: LD_VAR 0 2
34276: EQUAL
34277: PUSH
34278: LD_EXP 109
34282: PUSH
34283: LD_VAR 0 6
34287: ARRAY
34288: PUSH
34289: LD_VAR 0 5
34293: ARRAY
34294: PUSH
34295: LD_INT 2
34297: ARRAY
34298: PUSH
34299: LD_VAR 0 3
34303: EQUAL
34304: AND
34305: IFFALSE 34408
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34307: LD_EXP 109
34311: PUSH
34312: LD_VAR 0 6
34316: ARRAY
34317: PUSH
34318: LD_VAR 0 5
34322: ARRAY
34323: PUSH
34324: LD_INT 1
34326: ARRAY
34327: PPUSH
34328: LD_EXP 109
34332: PUSH
34333: LD_VAR 0 6
34337: ARRAY
34338: PUSH
34339: LD_VAR 0 5
34343: ARRAY
34344: PUSH
34345: LD_INT 2
34347: ARRAY
34348: PPUSH
34349: LD_VAR 0 1
34353: PPUSH
34354: CALL_OW 255
34358: PPUSH
34359: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34363: LD_ADDR_EXP 109
34367: PUSH
34368: LD_EXP 109
34372: PPUSH
34373: LD_VAR 0 6
34377: PPUSH
34378: LD_EXP 109
34382: PUSH
34383: LD_VAR 0 6
34387: ARRAY
34388: PPUSH
34389: LD_VAR 0 5
34393: PPUSH
34394: CALL_OW 3
34398: PPUSH
34399: CALL_OW 1
34403: ST_TO_ADDR
// exit ;
34404: POP
34405: POP
34406: GO 34599
// end ; end ;
34408: GO 34248
34410: POP
34411: POP
// for i := minerMinesList [ index ] downto 1 do
34412: LD_ADDR_VAR 0 5
34416: PUSH
34417: DOUBLE
34418: LD_EXP 109
34422: PUSH
34423: LD_VAR 0 6
34427: ARRAY
34428: INC
34429: ST_TO_ADDR
34430: LD_INT 1
34432: PUSH
34433: FOR_DOWNTO
34434: IFFALSE 34597
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
34436: LD_EXP 109
34440: PUSH
34441: LD_VAR 0 6
34445: ARRAY
34446: PUSH
34447: LD_VAR 0 5
34451: ARRAY
34452: PUSH
34453: LD_INT 1
34455: ARRAY
34456: PPUSH
34457: LD_EXP 109
34461: PUSH
34462: LD_VAR 0 6
34466: ARRAY
34467: PUSH
34468: LD_VAR 0 5
34472: ARRAY
34473: PUSH
34474: LD_INT 2
34476: ARRAY
34477: PPUSH
34478: LD_VAR 0 2
34482: PPUSH
34483: LD_VAR 0 3
34487: PPUSH
34488: CALL_OW 298
34492: PUSH
34493: LD_INT 6
34495: LESS
34496: IFFALSE 34595
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34498: LD_EXP 109
34502: PUSH
34503: LD_VAR 0 6
34507: ARRAY
34508: PUSH
34509: LD_VAR 0 5
34513: ARRAY
34514: PUSH
34515: LD_INT 1
34517: ARRAY
34518: PPUSH
34519: LD_EXP 109
34523: PUSH
34524: LD_VAR 0 6
34528: ARRAY
34529: PUSH
34530: LD_VAR 0 5
34534: ARRAY
34535: PUSH
34536: LD_INT 2
34538: ARRAY
34539: PPUSH
34540: LD_VAR 0 1
34544: PPUSH
34545: CALL_OW 255
34549: PPUSH
34550: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34554: LD_ADDR_EXP 109
34558: PUSH
34559: LD_EXP 109
34563: PPUSH
34564: LD_VAR 0 6
34568: PPUSH
34569: LD_EXP 109
34573: PUSH
34574: LD_VAR 0 6
34578: ARRAY
34579: PPUSH
34580: LD_VAR 0 5
34584: PPUSH
34585: CALL_OW 3
34589: PPUSH
34590: CALL_OW 1
34594: ST_TO_ADDR
// end ; end ;
34595: GO 34433
34597: POP
34598: POP
// end ;
34599: LD_VAR 0 4
34603: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
34604: LD_INT 0
34606: PPUSH
34607: PPUSH
34608: PPUSH
34609: PPUSH
34610: PPUSH
34611: PPUSH
34612: PPUSH
34613: PPUSH
34614: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
34615: LD_VAR 0 1
34619: PPUSH
34620: CALL_OW 264
34624: PUSH
34625: LD_INT 81
34627: EQUAL
34628: NOT
34629: PUSH
34630: LD_VAR 0 1
34634: PUSH
34635: LD_EXP 108
34639: IN
34640: NOT
34641: OR
34642: IFFALSE 34646
// exit ;
34644: GO 34968
// index := GetElementIndex ( minersList , unit ) ;
34646: LD_ADDR_VAR 0 6
34650: PUSH
34651: LD_EXP 108
34655: PPUSH
34656: LD_VAR 0 1
34660: PPUSH
34661: CALL 40315 0 2
34665: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
34666: LD_ADDR_VAR 0 8
34670: PUSH
34671: LD_EXP 110
34675: PUSH
34676: LD_EXP 109
34680: PUSH
34681: LD_VAR 0 6
34685: ARRAY
34686: MINUS
34687: ST_TO_ADDR
// if not minesFreeAmount then
34688: LD_VAR 0 8
34692: NOT
34693: IFFALSE 34697
// exit ;
34695: GO 34968
// tmp := [ ] ;
34697: LD_ADDR_VAR 0 7
34701: PUSH
34702: EMPTY
34703: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
34704: LD_ADDR_VAR 0 5
34708: PUSH
34709: DOUBLE
34710: LD_INT 1
34712: DEC
34713: ST_TO_ADDR
34714: LD_VAR 0 8
34718: PUSH
34719: FOR_TO
34720: IFFALSE 34915
// begin _d := rand ( 0 , 5 ) ;
34722: LD_ADDR_VAR 0 11
34726: PUSH
34727: LD_INT 0
34729: PPUSH
34730: LD_INT 5
34732: PPUSH
34733: CALL_OW 12
34737: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
34738: LD_ADDR_VAR 0 12
34742: PUSH
34743: LD_INT 2
34745: PPUSH
34746: LD_INT 6
34748: PPUSH
34749: CALL_OW 12
34753: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
34754: LD_ADDR_VAR 0 9
34758: PUSH
34759: LD_VAR 0 2
34763: PPUSH
34764: LD_VAR 0 11
34768: PPUSH
34769: LD_VAR 0 12
34773: PPUSH
34774: CALL_OW 272
34778: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
34779: LD_ADDR_VAR 0 10
34783: PUSH
34784: LD_VAR 0 3
34788: PPUSH
34789: LD_VAR 0 11
34793: PPUSH
34794: LD_VAR 0 12
34798: PPUSH
34799: CALL_OW 273
34803: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
34804: LD_VAR 0 9
34808: PPUSH
34809: LD_VAR 0 10
34813: PPUSH
34814: CALL_OW 488
34818: PUSH
34819: LD_VAR 0 9
34823: PUSH
34824: LD_VAR 0 10
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_VAR 0 7
34837: IN
34838: NOT
34839: AND
34840: PUSH
34841: LD_VAR 0 9
34845: PPUSH
34846: LD_VAR 0 10
34850: PPUSH
34851: CALL_OW 458
34855: NOT
34856: AND
34857: IFFALSE 34899
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
34859: LD_ADDR_VAR 0 7
34863: PUSH
34864: LD_VAR 0 7
34868: PPUSH
34869: LD_VAR 0 7
34873: PUSH
34874: LD_INT 1
34876: PLUS
34877: PPUSH
34878: LD_VAR 0 9
34882: PUSH
34883: LD_VAR 0 10
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PPUSH
34892: CALL_OW 1
34896: ST_TO_ADDR
34897: GO 34913
// i := i - 1 ;
34899: LD_ADDR_VAR 0 5
34903: PUSH
34904: LD_VAR 0 5
34908: PUSH
34909: LD_INT 1
34911: MINUS
34912: ST_TO_ADDR
// end ;
34913: GO 34719
34915: POP
34916: POP
// for i in tmp do
34917: LD_ADDR_VAR 0 5
34921: PUSH
34922: LD_VAR 0 7
34926: PUSH
34927: FOR_IN
34928: IFFALSE 34966
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
34930: LD_VAR 0 1
34934: PPUSH
34935: LD_VAR 0 5
34939: PUSH
34940: LD_INT 1
34942: ARRAY
34943: PPUSH
34944: LD_VAR 0 5
34948: PUSH
34949: LD_INT 2
34951: ARRAY
34952: PPUSH
34953: CALL 33912 0 3
34957: NOT
34958: IFFALSE 34964
// exit ;
34960: POP
34961: POP
34962: GO 34968
34964: GO 34927
34966: POP
34967: POP
// end ;
34968: LD_VAR 0 4
34972: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
34973: LD_INT 0
34975: PPUSH
34976: PPUSH
34977: PPUSH
34978: PPUSH
34979: PPUSH
34980: PPUSH
34981: PPUSH
// if not GetClass ( unit ) = class_sniper then
34982: LD_VAR 0 1
34986: PPUSH
34987: CALL_OW 257
34991: PUSH
34992: LD_INT 5
34994: EQUAL
34995: NOT
34996: IFFALSE 35000
// exit ;
34998: GO 35388
// dist := 8 ;
35000: LD_ADDR_VAR 0 5
35004: PUSH
35005: LD_INT 8
35007: ST_TO_ADDR
// viewRange := 12 ;
35008: LD_ADDR_VAR 0 7
35012: PUSH
35013: LD_INT 12
35015: ST_TO_ADDR
// side := GetSide ( unit ) ;
35016: LD_ADDR_VAR 0 6
35020: PUSH
35021: LD_VAR 0 1
35025: PPUSH
35026: CALL_OW 255
35030: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
35031: LD_INT 61
35033: PPUSH
35034: LD_VAR 0 6
35038: PPUSH
35039: CALL_OW 321
35043: PUSH
35044: LD_INT 2
35046: EQUAL
35047: IFFALSE 35057
// viewRange := 16 ;
35049: LD_ADDR_VAR 0 7
35053: PUSH
35054: LD_INT 16
35056: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
35057: LD_VAR 0 1
35061: PPUSH
35062: LD_VAR 0 2
35066: PPUSH
35067: LD_VAR 0 3
35071: PPUSH
35072: CALL_OW 297
35076: PUSH
35077: LD_VAR 0 5
35081: GREATER
35082: IFFALSE 35161
// begin ComMoveXY ( unit , x , y ) ;
35084: LD_VAR 0 1
35088: PPUSH
35089: LD_VAR 0 2
35093: PPUSH
35094: LD_VAR 0 3
35098: PPUSH
35099: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
35103: LD_INT 35
35105: PPUSH
35106: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
35110: LD_VAR 0 1
35114: PPUSH
35115: LD_VAR 0 2
35119: PPUSH
35120: LD_VAR 0 3
35124: PPUSH
35125: CALL 71670 0 3
35129: NOT
35130: IFFALSE 35134
// exit ;
35132: GO 35388
// until GetDistUnitXY ( unit , x , y ) < dist ;
35134: LD_VAR 0 1
35138: PPUSH
35139: LD_VAR 0 2
35143: PPUSH
35144: LD_VAR 0 3
35148: PPUSH
35149: CALL_OW 297
35153: PUSH
35154: LD_VAR 0 5
35158: LESS
35159: IFFALSE 35103
// end ; ComTurnXY ( unit , x , y ) ;
35161: LD_VAR 0 1
35165: PPUSH
35166: LD_VAR 0 2
35170: PPUSH
35171: LD_VAR 0 3
35175: PPUSH
35176: CALL_OW 118
// wait ( 5 ) ;
35180: LD_INT 5
35182: PPUSH
35183: CALL_OW 67
// _d := GetDir ( unit ) ;
35187: LD_ADDR_VAR 0 10
35191: PUSH
35192: LD_VAR 0 1
35196: PPUSH
35197: CALL_OW 254
35201: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
35202: LD_ADDR_VAR 0 8
35206: PUSH
35207: LD_VAR 0 1
35211: PPUSH
35212: CALL_OW 250
35216: PPUSH
35217: LD_VAR 0 10
35221: PPUSH
35222: LD_VAR 0 5
35226: PPUSH
35227: CALL_OW 272
35231: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
35232: LD_ADDR_VAR 0 9
35236: PUSH
35237: LD_VAR 0 1
35241: PPUSH
35242: CALL_OW 251
35246: PPUSH
35247: LD_VAR 0 10
35251: PPUSH
35252: LD_VAR 0 5
35256: PPUSH
35257: CALL_OW 273
35261: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35262: LD_VAR 0 8
35266: PPUSH
35267: LD_VAR 0 9
35271: PPUSH
35272: CALL_OW 488
35276: NOT
35277: IFFALSE 35281
// exit ;
35279: GO 35388
// ComAnimCustom ( unit , 1 ) ;
35281: LD_VAR 0 1
35285: PPUSH
35286: LD_INT 1
35288: PPUSH
35289: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
35293: LD_VAR 0 8
35297: PPUSH
35298: LD_VAR 0 9
35302: PPUSH
35303: LD_VAR 0 6
35307: PPUSH
35308: LD_VAR 0 7
35312: PPUSH
35313: CALL_OW 330
// repeat wait ( 1 ) ;
35317: LD_INT 1
35319: PPUSH
35320: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
35324: LD_VAR 0 1
35328: PPUSH
35329: CALL_OW 316
35333: PUSH
35334: LD_VAR 0 1
35338: PPUSH
35339: CALL_OW 314
35343: OR
35344: PUSH
35345: LD_VAR 0 1
35349: PPUSH
35350: CALL_OW 302
35354: NOT
35355: OR
35356: PUSH
35357: LD_VAR 0 1
35361: PPUSH
35362: CALL_OW 301
35366: OR
35367: IFFALSE 35317
// RemoveSeeing ( _x , _y , side ) ;
35369: LD_VAR 0 8
35373: PPUSH
35374: LD_VAR 0 9
35378: PPUSH
35379: LD_VAR 0 6
35383: PPUSH
35384: CALL_OW 331
// end ; end_of_file
35388: LD_VAR 0 4
35392: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35393: LD_INT 0
35395: PPUSH
35396: PPUSH
// if exist_mode then
35397: LD_VAR 0 2
35401: IFFALSE 35426
// unit := CreateCharacter ( prefix & ident ) else
35403: LD_ADDR_VAR 0 5
35407: PUSH
35408: LD_VAR 0 3
35412: PUSH
35413: LD_VAR 0 1
35417: STR
35418: PPUSH
35419: CALL_OW 34
35423: ST_TO_ADDR
35424: GO 35441
// unit := NewCharacter ( ident ) ;
35426: LD_ADDR_VAR 0 5
35430: PUSH
35431: LD_VAR 0 1
35435: PPUSH
35436: CALL_OW 25
35440: ST_TO_ADDR
// result := unit ;
35441: LD_ADDR_VAR 0 4
35445: PUSH
35446: LD_VAR 0 5
35450: ST_TO_ADDR
// end ;
35451: LD_VAR 0 4
35455: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35456: LD_INT 0
35458: PPUSH
35459: PPUSH
// if not side or not nation then
35460: LD_VAR 0 1
35464: NOT
35465: PUSH
35466: LD_VAR 0 2
35470: NOT
35471: OR
35472: IFFALSE 35476
// exit ;
35474: GO 36244
// case nation of nation_american :
35476: LD_VAR 0 2
35480: PUSH
35481: LD_INT 1
35483: DOUBLE
35484: EQUAL
35485: IFTRUE 35489
35487: GO 35703
35489: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35490: LD_ADDR_VAR 0 4
35494: PUSH
35495: LD_INT 35
35497: PUSH
35498: LD_INT 45
35500: PUSH
35501: LD_INT 46
35503: PUSH
35504: LD_INT 47
35506: PUSH
35507: LD_INT 82
35509: PUSH
35510: LD_INT 83
35512: PUSH
35513: LD_INT 84
35515: PUSH
35516: LD_INT 85
35518: PUSH
35519: LD_INT 86
35521: PUSH
35522: LD_INT 1
35524: PUSH
35525: LD_INT 2
35527: PUSH
35528: LD_INT 6
35530: PUSH
35531: LD_INT 15
35533: PUSH
35534: LD_INT 16
35536: PUSH
35537: LD_INT 7
35539: PUSH
35540: LD_INT 12
35542: PUSH
35543: LD_INT 13
35545: PUSH
35546: LD_INT 10
35548: PUSH
35549: LD_INT 14
35551: PUSH
35552: LD_INT 20
35554: PUSH
35555: LD_INT 21
35557: PUSH
35558: LD_INT 22
35560: PUSH
35561: LD_INT 25
35563: PUSH
35564: LD_INT 32
35566: PUSH
35567: LD_INT 27
35569: PUSH
35570: LD_INT 36
35572: PUSH
35573: LD_INT 69
35575: PUSH
35576: LD_INT 39
35578: PUSH
35579: LD_INT 34
35581: PUSH
35582: LD_INT 40
35584: PUSH
35585: LD_INT 48
35587: PUSH
35588: LD_INT 49
35590: PUSH
35591: LD_INT 50
35593: PUSH
35594: LD_INT 51
35596: PUSH
35597: LD_INT 52
35599: PUSH
35600: LD_INT 53
35602: PUSH
35603: LD_INT 54
35605: PUSH
35606: LD_INT 55
35608: PUSH
35609: LD_INT 56
35611: PUSH
35612: LD_INT 57
35614: PUSH
35615: LD_INT 58
35617: PUSH
35618: LD_INT 59
35620: PUSH
35621: LD_INT 60
35623: PUSH
35624: LD_INT 61
35626: PUSH
35627: LD_INT 62
35629: PUSH
35630: LD_INT 80
35632: PUSH
35633: LD_INT 82
35635: PUSH
35636: LD_INT 83
35638: PUSH
35639: LD_INT 84
35641: PUSH
35642: LD_INT 85
35644: PUSH
35645: LD_INT 86
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: ST_TO_ADDR
35701: GO 36168
35703: LD_INT 2
35705: DOUBLE
35706: EQUAL
35707: IFTRUE 35711
35709: GO 35937
35711: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35712: LD_ADDR_VAR 0 4
35716: PUSH
35717: LD_INT 35
35719: PUSH
35720: LD_INT 45
35722: PUSH
35723: LD_INT 46
35725: PUSH
35726: LD_INT 47
35728: PUSH
35729: LD_INT 82
35731: PUSH
35732: LD_INT 83
35734: PUSH
35735: LD_INT 84
35737: PUSH
35738: LD_INT 85
35740: PUSH
35741: LD_INT 87
35743: PUSH
35744: LD_INT 70
35746: PUSH
35747: LD_INT 1
35749: PUSH
35750: LD_INT 11
35752: PUSH
35753: LD_INT 3
35755: PUSH
35756: LD_INT 4
35758: PUSH
35759: LD_INT 5
35761: PUSH
35762: LD_INT 6
35764: PUSH
35765: LD_INT 15
35767: PUSH
35768: LD_INT 18
35770: PUSH
35771: LD_INT 7
35773: PUSH
35774: LD_INT 17
35776: PUSH
35777: LD_INT 8
35779: PUSH
35780: LD_INT 20
35782: PUSH
35783: LD_INT 21
35785: PUSH
35786: LD_INT 22
35788: PUSH
35789: LD_INT 72
35791: PUSH
35792: LD_INT 26
35794: PUSH
35795: LD_INT 69
35797: PUSH
35798: LD_INT 39
35800: PUSH
35801: LD_INT 40
35803: PUSH
35804: LD_INT 41
35806: PUSH
35807: LD_INT 42
35809: PUSH
35810: LD_INT 43
35812: PUSH
35813: LD_INT 48
35815: PUSH
35816: LD_INT 49
35818: PUSH
35819: LD_INT 50
35821: PUSH
35822: LD_INT 51
35824: PUSH
35825: LD_INT 52
35827: PUSH
35828: LD_INT 53
35830: PUSH
35831: LD_INT 54
35833: PUSH
35834: LD_INT 55
35836: PUSH
35837: LD_INT 56
35839: PUSH
35840: LD_INT 60
35842: PUSH
35843: LD_INT 61
35845: PUSH
35846: LD_INT 62
35848: PUSH
35849: LD_INT 66
35851: PUSH
35852: LD_INT 67
35854: PUSH
35855: LD_INT 68
35857: PUSH
35858: LD_INT 81
35860: PUSH
35861: LD_INT 82
35863: PUSH
35864: LD_INT 83
35866: PUSH
35867: LD_INT 84
35869: PUSH
35870: LD_INT 85
35872: PUSH
35873: LD_INT 87
35875: PUSH
35876: LD_INT 88
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: ST_TO_ADDR
35935: GO 36168
35937: LD_INT 3
35939: DOUBLE
35940: EQUAL
35941: IFTRUE 35945
35943: GO 36167
35945: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
35946: LD_ADDR_VAR 0 4
35950: PUSH
35951: LD_INT 46
35953: PUSH
35954: LD_INT 47
35956: PUSH
35957: LD_INT 1
35959: PUSH
35960: LD_INT 2
35962: PUSH
35963: LD_INT 82
35965: PUSH
35966: LD_INT 83
35968: PUSH
35969: LD_INT 84
35971: PUSH
35972: LD_INT 85
35974: PUSH
35975: LD_INT 86
35977: PUSH
35978: LD_INT 11
35980: PUSH
35981: LD_INT 9
35983: PUSH
35984: LD_INT 20
35986: PUSH
35987: LD_INT 19
35989: PUSH
35990: LD_INT 21
35992: PUSH
35993: LD_INT 24
35995: PUSH
35996: LD_INT 22
35998: PUSH
35999: LD_INT 25
36001: PUSH
36002: LD_INT 28
36004: PUSH
36005: LD_INT 29
36007: PUSH
36008: LD_INT 30
36010: PUSH
36011: LD_INT 31
36013: PUSH
36014: LD_INT 37
36016: PUSH
36017: LD_INT 38
36019: PUSH
36020: LD_INT 32
36022: PUSH
36023: LD_INT 27
36025: PUSH
36026: LD_INT 33
36028: PUSH
36029: LD_INT 69
36031: PUSH
36032: LD_INT 39
36034: PUSH
36035: LD_INT 34
36037: PUSH
36038: LD_INT 40
36040: PUSH
36041: LD_INT 71
36043: PUSH
36044: LD_INT 23
36046: PUSH
36047: LD_INT 44
36049: PUSH
36050: LD_INT 48
36052: PUSH
36053: LD_INT 49
36055: PUSH
36056: LD_INT 50
36058: PUSH
36059: LD_INT 51
36061: PUSH
36062: LD_INT 52
36064: PUSH
36065: LD_INT 53
36067: PUSH
36068: LD_INT 54
36070: PUSH
36071: LD_INT 55
36073: PUSH
36074: LD_INT 56
36076: PUSH
36077: LD_INT 57
36079: PUSH
36080: LD_INT 58
36082: PUSH
36083: LD_INT 59
36085: PUSH
36086: LD_INT 63
36088: PUSH
36089: LD_INT 64
36091: PUSH
36092: LD_INT 65
36094: PUSH
36095: LD_INT 82
36097: PUSH
36098: LD_INT 83
36100: PUSH
36101: LD_INT 84
36103: PUSH
36104: LD_INT 85
36106: PUSH
36107: LD_INT 86
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: LIST
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: ST_TO_ADDR
36165: GO 36168
36167: POP
// if state > - 1 and state < 3 then
36168: LD_VAR 0 3
36172: PUSH
36173: LD_INT 1
36175: NEG
36176: GREATER
36177: PUSH
36178: LD_VAR 0 3
36182: PUSH
36183: LD_INT 3
36185: LESS
36186: AND
36187: IFFALSE 36244
// for i in result do
36189: LD_ADDR_VAR 0 5
36193: PUSH
36194: LD_VAR 0 4
36198: PUSH
36199: FOR_IN
36200: IFFALSE 36242
// if GetTech ( i , side ) <> state then
36202: LD_VAR 0 5
36206: PPUSH
36207: LD_VAR 0 1
36211: PPUSH
36212: CALL_OW 321
36216: PUSH
36217: LD_VAR 0 3
36221: NONEQUAL
36222: IFFALSE 36240
// result := result diff i ;
36224: LD_ADDR_VAR 0 4
36228: PUSH
36229: LD_VAR 0 4
36233: PUSH
36234: LD_VAR 0 5
36238: DIFF
36239: ST_TO_ADDR
36240: GO 36199
36242: POP
36243: POP
// end ;
36244: LD_VAR 0 4
36248: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36249: LD_INT 0
36251: PPUSH
36252: PPUSH
36253: PPUSH
// result := true ;
36254: LD_ADDR_VAR 0 3
36258: PUSH
36259: LD_INT 1
36261: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36262: LD_ADDR_VAR 0 5
36266: PUSH
36267: LD_VAR 0 2
36271: PPUSH
36272: CALL_OW 480
36276: ST_TO_ADDR
// if not tmp then
36277: LD_VAR 0 5
36281: NOT
36282: IFFALSE 36286
// exit ;
36284: GO 36335
// for i in tmp do
36286: LD_ADDR_VAR 0 4
36290: PUSH
36291: LD_VAR 0 5
36295: PUSH
36296: FOR_IN
36297: IFFALSE 36333
// if GetTech ( i , side ) <> state_researched then
36299: LD_VAR 0 4
36303: PPUSH
36304: LD_VAR 0 1
36308: PPUSH
36309: CALL_OW 321
36313: PUSH
36314: LD_INT 2
36316: NONEQUAL
36317: IFFALSE 36331
// begin result := false ;
36319: LD_ADDR_VAR 0 3
36323: PUSH
36324: LD_INT 0
36326: ST_TO_ADDR
// exit ;
36327: POP
36328: POP
36329: GO 36335
// end ;
36331: GO 36296
36333: POP
36334: POP
// end ;
36335: LD_VAR 0 3
36339: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36340: LD_INT 0
36342: PPUSH
36343: PPUSH
36344: PPUSH
36345: PPUSH
36346: PPUSH
36347: PPUSH
36348: PPUSH
36349: PPUSH
36350: PPUSH
36351: PPUSH
36352: PPUSH
36353: PPUSH
36354: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36355: LD_VAR 0 1
36359: NOT
36360: PUSH
36361: LD_VAR 0 1
36365: PPUSH
36366: CALL_OW 257
36370: PUSH
36371: LD_INT 9
36373: NONEQUAL
36374: OR
36375: IFFALSE 36379
// exit ;
36377: GO 36952
// side := GetSide ( unit ) ;
36379: LD_ADDR_VAR 0 9
36383: PUSH
36384: LD_VAR 0 1
36388: PPUSH
36389: CALL_OW 255
36393: ST_TO_ADDR
// tech_space := tech_spacanom ;
36394: LD_ADDR_VAR 0 12
36398: PUSH
36399: LD_INT 29
36401: ST_TO_ADDR
// tech_time := tech_taurad ;
36402: LD_ADDR_VAR 0 13
36406: PUSH
36407: LD_INT 28
36409: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36410: LD_ADDR_VAR 0 11
36414: PUSH
36415: LD_VAR 0 1
36419: PPUSH
36420: CALL_OW 310
36424: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36425: LD_VAR 0 11
36429: PPUSH
36430: CALL_OW 247
36434: PUSH
36435: LD_INT 2
36437: EQUAL
36438: IFFALSE 36442
// exit ;
36440: GO 36952
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36442: LD_ADDR_VAR 0 8
36446: PUSH
36447: LD_INT 81
36449: PUSH
36450: LD_VAR 0 9
36454: PUSH
36455: EMPTY
36456: LIST
36457: LIST
36458: PUSH
36459: LD_INT 3
36461: PUSH
36462: LD_INT 21
36464: PUSH
36465: LD_INT 3
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PPUSH
36480: CALL_OW 69
36484: ST_TO_ADDR
// if not tmp then
36485: LD_VAR 0 8
36489: NOT
36490: IFFALSE 36494
// exit ;
36492: GO 36952
// if in_unit then
36494: LD_VAR 0 11
36498: IFFALSE 36522
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36500: LD_ADDR_VAR 0 10
36504: PUSH
36505: LD_VAR 0 8
36509: PPUSH
36510: LD_VAR 0 11
36514: PPUSH
36515: CALL_OW 74
36519: ST_TO_ADDR
36520: GO 36542
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36522: LD_ADDR_VAR 0 10
36526: PUSH
36527: LD_VAR 0 8
36531: PPUSH
36532: LD_VAR 0 1
36536: PPUSH
36537: CALL_OW 74
36541: ST_TO_ADDR
// if not enemy then
36542: LD_VAR 0 10
36546: NOT
36547: IFFALSE 36551
// exit ;
36549: GO 36952
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36551: LD_VAR 0 11
36555: PUSH
36556: LD_VAR 0 11
36560: PPUSH
36561: LD_VAR 0 10
36565: PPUSH
36566: CALL_OW 296
36570: PUSH
36571: LD_INT 13
36573: GREATER
36574: AND
36575: PUSH
36576: LD_VAR 0 1
36580: PPUSH
36581: LD_VAR 0 10
36585: PPUSH
36586: CALL_OW 296
36590: PUSH
36591: LD_INT 12
36593: GREATER
36594: OR
36595: IFFALSE 36599
// exit ;
36597: GO 36952
// missile := [ 1 ] ;
36599: LD_ADDR_VAR 0 14
36603: PUSH
36604: LD_INT 1
36606: PUSH
36607: EMPTY
36608: LIST
36609: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36610: LD_VAR 0 9
36614: PPUSH
36615: LD_VAR 0 12
36619: PPUSH
36620: CALL_OW 325
36624: IFFALSE 36653
// missile := Replace ( missile , missile + 1 , 2 ) ;
36626: LD_ADDR_VAR 0 14
36630: PUSH
36631: LD_VAR 0 14
36635: PPUSH
36636: LD_VAR 0 14
36640: PUSH
36641: LD_INT 1
36643: PLUS
36644: PPUSH
36645: LD_INT 2
36647: PPUSH
36648: CALL_OW 1
36652: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36653: LD_VAR 0 9
36657: PPUSH
36658: LD_VAR 0 13
36662: PPUSH
36663: CALL_OW 325
36667: PUSH
36668: LD_VAR 0 10
36672: PPUSH
36673: CALL_OW 255
36677: PPUSH
36678: LD_VAR 0 13
36682: PPUSH
36683: CALL_OW 325
36687: NOT
36688: AND
36689: IFFALSE 36718
// missile := Replace ( missile , missile + 1 , 3 ) ;
36691: LD_ADDR_VAR 0 14
36695: PUSH
36696: LD_VAR 0 14
36700: PPUSH
36701: LD_VAR 0 14
36705: PUSH
36706: LD_INT 1
36708: PLUS
36709: PPUSH
36710: LD_INT 3
36712: PPUSH
36713: CALL_OW 1
36717: ST_TO_ADDR
// if missile < 2 then
36718: LD_VAR 0 14
36722: PUSH
36723: LD_INT 2
36725: LESS
36726: IFFALSE 36730
// exit ;
36728: GO 36952
// x := GetX ( enemy ) ;
36730: LD_ADDR_VAR 0 4
36734: PUSH
36735: LD_VAR 0 10
36739: PPUSH
36740: CALL_OW 250
36744: ST_TO_ADDR
// y := GetY ( enemy ) ;
36745: LD_ADDR_VAR 0 5
36749: PUSH
36750: LD_VAR 0 10
36754: PPUSH
36755: CALL_OW 251
36759: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36760: LD_ADDR_VAR 0 6
36764: PUSH
36765: LD_VAR 0 4
36769: PUSH
36770: LD_INT 1
36772: NEG
36773: PPUSH
36774: LD_INT 1
36776: PPUSH
36777: CALL_OW 12
36781: PLUS
36782: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36783: LD_ADDR_VAR 0 7
36787: PUSH
36788: LD_VAR 0 5
36792: PUSH
36793: LD_INT 1
36795: NEG
36796: PPUSH
36797: LD_INT 1
36799: PPUSH
36800: CALL_OW 12
36804: PLUS
36805: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36806: LD_VAR 0 6
36810: PPUSH
36811: LD_VAR 0 7
36815: PPUSH
36816: CALL_OW 488
36820: NOT
36821: IFFALSE 36843
// begin _x := x ;
36823: LD_ADDR_VAR 0 6
36827: PUSH
36828: LD_VAR 0 4
36832: ST_TO_ADDR
// _y := y ;
36833: LD_ADDR_VAR 0 7
36837: PUSH
36838: LD_VAR 0 5
36842: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36843: LD_ADDR_VAR 0 3
36847: PUSH
36848: LD_INT 1
36850: PPUSH
36851: LD_VAR 0 14
36855: PPUSH
36856: CALL_OW 12
36860: ST_TO_ADDR
// case i of 1 :
36861: LD_VAR 0 3
36865: PUSH
36866: LD_INT 1
36868: DOUBLE
36869: EQUAL
36870: IFTRUE 36874
36872: GO 36891
36874: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36875: LD_VAR 0 1
36879: PPUSH
36880: LD_VAR 0 10
36884: PPUSH
36885: CALL_OW 115
36889: GO 36952
36891: LD_INT 2
36893: DOUBLE
36894: EQUAL
36895: IFTRUE 36899
36897: GO 36921
36899: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
36900: LD_VAR 0 1
36904: PPUSH
36905: LD_VAR 0 6
36909: PPUSH
36910: LD_VAR 0 7
36914: PPUSH
36915: CALL_OW 153
36919: GO 36952
36921: LD_INT 3
36923: DOUBLE
36924: EQUAL
36925: IFTRUE 36929
36927: GO 36951
36929: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36930: LD_VAR 0 1
36934: PPUSH
36935: LD_VAR 0 6
36939: PPUSH
36940: LD_VAR 0 7
36944: PPUSH
36945: CALL_OW 154
36949: GO 36952
36951: POP
// end ;
36952: LD_VAR 0 2
36956: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36957: LD_INT 0
36959: PPUSH
36960: PPUSH
36961: PPUSH
36962: PPUSH
36963: PPUSH
36964: PPUSH
// if not unit or not building then
36965: LD_VAR 0 1
36969: NOT
36970: PUSH
36971: LD_VAR 0 2
36975: NOT
36976: OR
36977: IFFALSE 36981
// exit ;
36979: GO 37139
// x := GetX ( building ) ;
36981: LD_ADDR_VAR 0 5
36985: PUSH
36986: LD_VAR 0 2
36990: PPUSH
36991: CALL_OW 250
36995: ST_TO_ADDR
// y := GetY ( building ) ;
36996: LD_ADDR_VAR 0 6
37000: PUSH
37001: LD_VAR 0 2
37005: PPUSH
37006: CALL_OW 251
37010: ST_TO_ADDR
// for i = 0 to 5 do
37011: LD_ADDR_VAR 0 4
37015: PUSH
37016: DOUBLE
37017: LD_INT 0
37019: DEC
37020: ST_TO_ADDR
37021: LD_INT 5
37023: PUSH
37024: FOR_TO
37025: IFFALSE 37137
// begin _x := ShiftX ( x , i , 3 ) ;
37027: LD_ADDR_VAR 0 7
37031: PUSH
37032: LD_VAR 0 5
37036: PPUSH
37037: LD_VAR 0 4
37041: PPUSH
37042: LD_INT 3
37044: PPUSH
37045: CALL_OW 272
37049: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37050: LD_ADDR_VAR 0 8
37054: PUSH
37055: LD_VAR 0 6
37059: PPUSH
37060: LD_VAR 0 4
37064: PPUSH
37065: LD_INT 3
37067: PPUSH
37068: CALL_OW 273
37072: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37073: LD_VAR 0 7
37077: PPUSH
37078: LD_VAR 0 8
37082: PPUSH
37083: CALL_OW 488
37087: NOT
37088: IFFALSE 37092
// continue ;
37090: GO 37024
// if HexInfo ( _x , _y ) = 0 then
37092: LD_VAR 0 7
37096: PPUSH
37097: LD_VAR 0 8
37101: PPUSH
37102: CALL_OW 428
37106: PUSH
37107: LD_INT 0
37109: EQUAL
37110: IFFALSE 37135
// begin ComMoveXY ( unit , _x , _y ) ;
37112: LD_VAR 0 1
37116: PPUSH
37117: LD_VAR 0 7
37121: PPUSH
37122: LD_VAR 0 8
37126: PPUSH
37127: CALL_OW 111
// exit ;
37131: POP
37132: POP
37133: GO 37139
// end ; end ;
37135: GO 37024
37137: POP
37138: POP
// end ;
37139: LD_VAR 0 3
37143: RET
// export function ScanBase ( side , base_area ) ; begin
37144: LD_INT 0
37146: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37147: LD_ADDR_VAR 0 3
37151: PUSH
37152: LD_VAR 0 2
37156: PPUSH
37157: LD_INT 81
37159: PUSH
37160: LD_VAR 0 1
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PPUSH
37169: CALL_OW 70
37173: ST_TO_ADDR
// end ;
37174: LD_VAR 0 3
37178: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37179: LD_INT 0
37181: PPUSH
37182: PPUSH
37183: PPUSH
37184: PPUSH
// result := false ;
37185: LD_ADDR_VAR 0 2
37189: PUSH
37190: LD_INT 0
37192: ST_TO_ADDR
// side := GetSide ( unit ) ;
37193: LD_ADDR_VAR 0 3
37197: PUSH
37198: LD_VAR 0 1
37202: PPUSH
37203: CALL_OW 255
37207: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37208: LD_ADDR_VAR 0 4
37212: PUSH
37213: LD_VAR 0 1
37217: PPUSH
37218: CALL_OW 248
37222: ST_TO_ADDR
// case nat of 1 :
37223: LD_VAR 0 4
37227: PUSH
37228: LD_INT 1
37230: DOUBLE
37231: EQUAL
37232: IFTRUE 37236
37234: GO 37247
37236: POP
// tech := tech_lassight ; 2 :
37237: LD_ADDR_VAR 0 5
37241: PUSH
37242: LD_INT 12
37244: ST_TO_ADDR
37245: GO 37286
37247: LD_INT 2
37249: DOUBLE
37250: EQUAL
37251: IFTRUE 37255
37253: GO 37266
37255: POP
// tech := tech_mortar ; 3 :
37256: LD_ADDR_VAR 0 5
37260: PUSH
37261: LD_INT 41
37263: ST_TO_ADDR
37264: GO 37286
37266: LD_INT 3
37268: DOUBLE
37269: EQUAL
37270: IFTRUE 37274
37272: GO 37285
37274: POP
// tech := tech_bazooka ; end ;
37275: LD_ADDR_VAR 0 5
37279: PUSH
37280: LD_INT 44
37282: ST_TO_ADDR
37283: GO 37286
37285: POP
// if Researched ( side , tech ) then
37286: LD_VAR 0 3
37290: PPUSH
37291: LD_VAR 0 5
37295: PPUSH
37296: CALL_OW 325
37300: IFFALSE 37327
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37302: LD_ADDR_VAR 0 2
37306: PUSH
37307: LD_INT 5
37309: PUSH
37310: LD_INT 8
37312: PUSH
37313: LD_INT 9
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: LIST
37320: PUSH
37321: LD_VAR 0 4
37325: ARRAY
37326: ST_TO_ADDR
// end ;
37327: LD_VAR 0 2
37331: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37332: LD_INT 0
37334: PPUSH
37335: PPUSH
37336: PPUSH
// if not mines then
37337: LD_VAR 0 2
37341: NOT
37342: IFFALSE 37346
// exit ;
37344: GO 37490
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37346: LD_ADDR_VAR 0 5
37350: PUSH
37351: LD_INT 81
37353: PUSH
37354: LD_VAR 0 1
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: LD_INT 3
37365: PUSH
37366: LD_INT 21
37368: PUSH
37369: LD_INT 3
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PPUSH
37384: CALL_OW 69
37388: ST_TO_ADDR
// for i in mines do
37389: LD_ADDR_VAR 0 4
37393: PUSH
37394: LD_VAR 0 2
37398: PUSH
37399: FOR_IN
37400: IFFALSE 37488
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37402: LD_VAR 0 4
37406: PUSH
37407: LD_INT 1
37409: ARRAY
37410: PPUSH
37411: LD_VAR 0 4
37415: PUSH
37416: LD_INT 2
37418: ARRAY
37419: PPUSH
37420: CALL_OW 458
37424: NOT
37425: IFFALSE 37429
// continue ;
37427: GO 37399
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37429: LD_VAR 0 4
37433: PUSH
37434: LD_INT 1
37436: ARRAY
37437: PPUSH
37438: LD_VAR 0 4
37442: PUSH
37443: LD_INT 2
37445: ARRAY
37446: PPUSH
37447: CALL_OW 428
37451: PUSH
37452: LD_VAR 0 5
37456: IN
37457: IFFALSE 37486
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37459: LD_VAR 0 4
37463: PUSH
37464: LD_INT 1
37466: ARRAY
37467: PPUSH
37468: LD_VAR 0 4
37472: PUSH
37473: LD_INT 2
37475: ARRAY
37476: PPUSH
37477: LD_VAR 0 1
37481: PPUSH
37482: CALL_OW 456
// end ;
37486: GO 37399
37488: POP
37489: POP
// end ;
37490: LD_VAR 0 3
37494: RET
// export function Count ( array ) ; var i ; begin
37495: LD_INT 0
37497: PPUSH
37498: PPUSH
// result := 0 ;
37499: LD_ADDR_VAR 0 2
37503: PUSH
37504: LD_INT 0
37506: ST_TO_ADDR
// for i in array do
37507: LD_ADDR_VAR 0 3
37511: PUSH
37512: LD_VAR 0 1
37516: PUSH
37517: FOR_IN
37518: IFFALSE 37542
// if i then
37520: LD_VAR 0 3
37524: IFFALSE 37540
// result := result + 1 ;
37526: LD_ADDR_VAR 0 2
37530: PUSH
37531: LD_VAR 0 2
37535: PUSH
37536: LD_INT 1
37538: PLUS
37539: ST_TO_ADDR
37540: GO 37517
37542: POP
37543: POP
// end ;
37544: LD_VAR 0 2
37548: RET
// export function IsEmpty ( building ) ; begin
37549: LD_INT 0
37551: PPUSH
// if not building then
37552: LD_VAR 0 1
37556: NOT
37557: IFFALSE 37561
// exit ;
37559: GO 37604
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37561: LD_ADDR_VAR 0 2
37565: PUSH
37566: LD_VAR 0 1
37570: PUSH
37571: LD_INT 22
37573: PUSH
37574: LD_VAR 0 1
37578: PPUSH
37579: CALL_OW 255
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 58
37590: PUSH
37591: EMPTY
37592: LIST
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PPUSH
37598: CALL_OW 69
37602: IN
37603: ST_TO_ADDR
// end ;
37604: LD_VAR 0 2
37608: RET
// export function IsNotFull ( building ) ; var places ; begin
37609: LD_INT 0
37611: PPUSH
37612: PPUSH
// if not building then
37613: LD_VAR 0 1
37617: NOT
37618: IFFALSE 37622
// exit ;
37620: GO 37793
// result := false ;
37622: LD_ADDR_VAR 0 2
37626: PUSH
37627: LD_INT 0
37629: ST_TO_ADDR
// places := 0 ;
37630: LD_ADDR_VAR 0 3
37634: PUSH
37635: LD_INT 0
37637: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
37638: LD_VAR 0 1
37642: PPUSH
37643: CALL_OW 266
37647: PUSH
37648: LD_INT 0
37650: DOUBLE
37651: EQUAL
37652: IFTRUE 37710
37654: LD_INT 1
37656: DOUBLE
37657: EQUAL
37658: IFTRUE 37710
37660: LD_INT 6
37662: DOUBLE
37663: EQUAL
37664: IFTRUE 37710
37666: LD_INT 7
37668: DOUBLE
37669: EQUAL
37670: IFTRUE 37710
37672: LD_INT 8
37674: DOUBLE
37675: EQUAL
37676: IFTRUE 37710
37678: LD_INT 4
37680: DOUBLE
37681: EQUAL
37682: IFTRUE 37710
37684: LD_INT 5
37686: DOUBLE
37687: EQUAL
37688: IFTRUE 37710
37690: LD_INT 2
37692: DOUBLE
37693: EQUAL
37694: IFTRUE 37710
37696: LD_INT 3
37698: DOUBLE
37699: EQUAL
37700: IFTRUE 37710
37702: LD_INT 35
37704: DOUBLE
37705: EQUAL
37706: IFTRUE 37710
37708: GO 37721
37710: POP
// places := 6 ; b_bunker , b_breastwork :
37711: LD_ADDR_VAR 0 3
37715: PUSH
37716: LD_INT 6
37718: ST_TO_ADDR
37719: GO 37766
37721: LD_INT 32
37723: DOUBLE
37724: EQUAL
37725: IFTRUE 37735
37727: LD_INT 31
37729: DOUBLE
37730: EQUAL
37731: IFTRUE 37735
37733: GO 37746
37735: POP
// places := 1 ; b_control_tower :
37736: LD_ADDR_VAR 0 3
37740: PUSH
37741: LD_INT 1
37743: ST_TO_ADDR
37744: GO 37766
37746: LD_INT 36
37748: DOUBLE
37749: EQUAL
37750: IFTRUE 37754
37752: GO 37765
37754: POP
// places := 3 ; end ;
37755: LD_ADDR_VAR 0 3
37759: PUSH
37760: LD_INT 3
37762: ST_TO_ADDR
37763: GO 37766
37765: POP
// if places then
37766: LD_VAR 0 3
37770: IFFALSE 37793
// result := UnitsInside ( building ) < places ;
37772: LD_ADDR_VAR 0 2
37776: PUSH
37777: LD_VAR 0 1
37781: PPUSH
37782: CALL_OW 313
37786: PUSH
37787: LD_VAR 0 3
37791: LESS
37792: ST_TO_ADDR
// end ;
37793: LD_VAR 0 2
37797: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37798: LD_INT 0
37800: PPUSH
37801: PPUSH
37802: PPUSH
37803: PPUSH
// tmp := [ ] ;
37804: LD_ADDR_VAR 0 3
37808: PUSH
37809: EMPTY
37810: ST_TO_ADDR
// list := [ ] ;
37811: LD_ADDR_VAR 0 5
37815: PUSH
37816: EMPTY
37817: ST_TO_ADDR
// for i = 16 to 25 do
37818: LD_ADDR_VAR 0 4
37822: PUSH
37823: DOUBLE
37824: LD_INT 16
37826: DEC
37827: ST_TO_ADDR
37828: LD_INT 25
37830: PUSH
37831: FOR_TO
37832: IFFALSE 37905
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37834: LD_ADDR_VAR 0 3
37838: PUSH
37839: LD_VAR 0 3
37843: PUSH
37844: LD_INT 22
37846: PUSH
37847: LD_VAR 0 1
37851: PPUSH
37852: CALL_OW 255
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 91
37863: PUSH
37864: LD_VAR 0 1
37868: PUSH
37869: LD_INT 6
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 30
37879: PUSH
37880: LD_VAR 0 4
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: LIST
37893: PUSH
37894: EMPTY
37895: LIST
37896: PPUSH
37897: CALL_OW 69
37901: ADD
37902: ST_TO_ADDR
37903: GO 37831
37905: POP
37906: POP
// for i = 1 to tmp do
37907: LD_ADDR_VAR 0 4
37911: PUSH
37912: DOUBLE
37913: LD_INT 1
37915: DEC
37916: ST_TO_ADDR
37917: LD_VAR 0 3
37921: PUSH
37922: FOR_TO
37923: IFFALSE 38011
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37925: LD_ADDR_VAR 0 5
37929: PUSH
37930: LD_VAR 0 5
37934: PUSH
37935: LD_VAR 0 3
37939: PUSH
37940: LD_VAR 0 4
37944: ARRAY
37945: PPUSH
37946: CALL_OW 266
37950: PUSH
37951: LD_VAR 0 3
37955: PUSH
37956: LD_VAR 0 4
37960: ARRAY
37961: PPUSH
37962: CALL_OW 250
37966: PUSH
37967: LD_VAR 0 3
37971: PUSH
37972: LD_VAR 0 4
37976: ARRAY
37977: PPUSH
37978: CALL_OW 251
37982: PUSH
37983: LD_VAR 0 3
37987: PUSH
37988: LD_VAR 0 4
37992: ARRAY
37993: PPUSH
37994: CALL_OW 254
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: PUSH
38005: EMPTY
38006: LIST
38007: ADD
38008: ST_TO_ADDR
38009: GO 37922
38011: POP
38012: POP
// result := list ;
38013: LD_ADDR_VAR 0 2
38017: PUSH
38018: LD_VAR 0 5
38022: ST_TO_ADDR
// end ;
38023: LD_VAR 0 2
38027: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38028: LD_INT 0
38030: PPUSH
38031: PPUSH
38032: PPUSH
38033: PPUSH
38034: PPUSH
38035: PPUSH
38036: PPUSH
// if not factory then
38037: LD_VAR 0 1
38041: NOT
38042: IFFALSE 38046
// exit ;
38044: GO 38639
// if control = control_apeman then
38046: LD_VAR 0 4
38050: PUSH
38051: LD_INT 5
38053: EQUAL
38054: IFFALSE 38163
// begin tmp := UnitsInside ( factory ) ;
38056: LD_ADDR_VAR 0 8
38060: PUSH
38061: LD_VAR 0 1
38065: PPUSH
38066: CALL_OW 313
38070: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38071: LD_VAR 0 8
38075: PPUSH
38076: LD_INT 25
38078: PUSH
38079: LD_INT 12
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PPUSH
38086: CALL_OW 72
38090: NOT
38091: IFFALSE 38101
// control := control_manual ;
38093: LD_ADDR_VAR 0 4
38097: PUSH
38098: LD_INT 1
38100: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38101: LD_ADDR_VAR 0 8
38105: PUSH
38106: LD_VAR 0 1
38110: PPUSH
38111: CALL 37798 0 1
38115: ST_TO_ADDR
// if tmp then
38116: LD_VAR 0 8
38120: IFFALSE 38163
// begin for i in tmp do
38122: LD_ADDR_VAR 0 7
38126: PUSH
38127: LD_VAR 0 8
38131: PUSH
38132: FOR_IN
38133: IFFALSE 38161
// if i [ 1 ] = b_ext_radio then
38135: LD_VAR 0 7
38139: PUSH
38140: LD_INT 1
38142: ARRAY
38143: PUSH
38144: LD_INT 22
38146: EQUAL
38147: IFFALSE 38159
// begin control := control_remote ;
38149: LD_ADDR_VAR 0 4
38153: PUSH
38154: LD_INT 2
38156: ST_TO_ADDR
// break ;
38157: GO 38161
// end ;
38159: GO 38132
38161: POP
38162: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38163: LD_VAR 0 1
38167: PPUSH
38168: LD_VAR 0 2
38172: PPUSH
38173: LD_VAR 0 3
38177: PPUSH
38178: LD_VAR 0 4
38182: PPUSH
38183: LD_VAR 0 5
38187: PPUSH
38188: CALL_OW 448
38192: IFFALSE 38227
// begin result := [ chassis , engine , control , weapon ] ;
38194: LD_ADDR_VAR 0 6
38198: PUSH
38199: LD_VAR 0 2
38203: PUSH
38204: LD_VAR 0 3
38208: PUSH
38209: LD_VAR 0 4
38213: PUSH
38214: LD_VAR 0 5
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: ST_TO_ADDR
// exit ;
38225: GO 38639
// end ; _chassis := AvailableChassisList ( factory ) ;
38227: LD_ADDR_VAR 0 9
38231: PUSH
38232: LD_VAR 0 1
38236: PPUSH
38237: CALL_OW 475
38241: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38242: LD_ADDR_VAR 0 11
38246: PUSH
38247: LD_VAR 0 1
38251: PPUSH
38252: CALL_OW 476
38256: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38257: LD_ADDR_VAR 0 12
38261: PUSH
38262: LD_VAR 0 1
38266: PPUSH
38267: CALL_OW 477
38271: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38272: LD_ADDR_VAR 0 10
38276: PUSH
38277: LD_VAR 0 1
38281: PPUSH
38282: CALL_OW 478
38286: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38287: LD_VAR 0 9
38291: NOT
38292: PUSH
38293: LD_VAR 0 11
38297: NOT
38298: OR
38299: PUSH
38300: LD_VAR 0 12
38304: NOT
38305: OR
38306: PUSH
38307: LD_VAR 0 10
38311: NOT
38312: OR
38313: IFFALSE 38348
// begin result := [ chassis , engine , control , weapon ] ;
38315: LD_ADDR_VAR 0 6
38319: PUSH
38320: LD_VAR 0 2
38324: PUSH
38325: LD_VAR 0 3
38329: PUSH
38330: LD_VAR 0 4
38334: PUSH
38335: LD_VAR 0 5
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: ST_TO_ADDR
// exit ;
38346: GO 38639
// end ; if not chassis in _chassis then
38348: LD_VAR 0 2
38352: PUSH
38353: LD_VAR 0 9
38357: IN
38358: NOT
38359: IFFALSE 38385
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38361: LD_ADDR_VAR 0 2
38365: PUSH
38366: LD_VAR 0 9
38370: PUSH
38371: LD_INT 1
38373: PPUSH
38374: LD_VAR 0 9
38378: PPUSH
38379: CALL_OW 12
38383: ARRAY
38384: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38385: LD_VAR 0 2
38389: PPUSH
38390: LD_VAR 0 3
38394: PPUSH
38395: CALL 38644 0 2
38399: NOT
38400: IFFALSE 38459
// repeat engine := _engine [ 1 ] ;
38402: LD_ADDR_VAR 0 3
38406: PUSH
38407: LD_VAR 0 11
38411: PUSH
38412: LD_INT 1
38414: ARRAY
38415: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38416: LD_ADDR_VAR 0 11
38420: PUSH
38421: LD_VAR 0 11
38425: PPUSH
38426: LD_INT 1
38428: PPUSH
38429: CALL_OW 3
38433: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38434: LD_VAR 0 2
38438: PPUSH
38439: LD_VAR 0 3
38443: PPUSH
38444: CALL 38644 0 2
38448: PUSH
38449: LD_VAR 0 11
38453: PUSH
38454: EMPTY
38455: EQUAL
38456: OR
38457: IFFALSE 38402
// if not control in _control then
38459: LD_VAR 0 4
38463: PUSH
38464: LD_VAR 0 12
38468: IN
38469: NOT
38470: IFFALSE 38496
// control := _control [ rand ( 1 , _control ) ] ;
38472: LD_ADDR_VAR 0 4
38476: PUSH
38477: LD_VAR 0 12
38481: PUSH
38482: LD_INT 1
38484: PPUSH
38485: LD_VAR 0 12
38489: PPUSH
38490: CALL_OW 12
38494: ARRAY
38495: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38496: LD_VAR 0 2
38500: PPUSH
38501: LD_VAR 0 5
38505: PPUSH
38506: CALL 38864 0 2
38510: NOT
38511: IFFALSE 38570
// repeat weapon := _weapon [ 1 ] ;
38513: LD_ADDR_VAR 0 5
38517: PUSH
38518: LD_VAR 0 10
38522: PUSH
38523: LD_INT 1
38525: ARRAY
38526: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38527: LD_ADDR_VAR 0 10
38531: PUSH
38532: LD_VAR 0 10
38536: PPUSH
38537: LD_INT 1
38539: PPUSH
38540: CALL_OW 3
38544: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38545: LD_VAR 0 2
38549: PPUSH
38550: LD_VAR 0 5
38554: PPUSH
38555: CALL 38864 0 2
38559: PUSH
38560: LD_VAR 0 10
38564: PUSH
38565: EMPTY
38566: EQUAL
38567: OR
38568: IFFALSE 38513
// result := [ ] ;
38570: LD_ADDR_VAR 0 6
38574: PUSH
38575: EMPTY
38576: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38577: LD_VAR 0 1
38581: PPUSH
38582: LD_VAR 0 2
38586: PPUSH
38587: LD_VAR 0 3
38591: PPUSH
38592: LD_VAR 0 4
38596: PPUSH
38597: LD_VAR 0 5
38601: PPUSH
38602: CALL_OW 448
38606: IFFALSE 38639
// result := [ chassis , engine , control , weapon ] ;
38608: LD_ADDR_VAR 0 6
38612: PUSH
38613: LD_VAR 0 2
38617: PUSH
38618: LD_VAR 0 3
38622: PUSH
38623: LD_VAR 0 4
38627: PUSH
38628: LD_VAR 0 5
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: ST_TO_ADDR
// end ;
38639: LD_VAR 0 6
38643: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38644: LD_INT 0
38646: PPUSH
// if not chassis or not engine then
38647: LD_VAR 0 1
38651: NOT
38652: PUSH
38653: LD_VAR 0 2
38657: NOT
38658: OR
38659: IFFALSE 38663
// exit ;
38661: GO 38859
// case engine of engine_solar :
38663: LD_VAR 0 2
38667: PUSH
38668: LD_INT 2
38670: DOUBLE
38671: EQUAL
38672: IFTRUE 38676
38674: GO 38714
38676: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38677: LD_ADDR_VAR 0 3
38681: PUSH
38682: LD_INT 11
38684: PUSH
38685: LD_INT 12
38687: PUSH
38688: LD_INT 13
38690: PUSH
38691: LD_INT 14
38693: PUSH
38694: LD_INT 1
38696: PUSH
38697: LD_INT 2
38699: PUSH
38700: LD_INT 3
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: ST_TO_ADDR
38712: GO 38843
38714: LD_INT 1
38716: DOUBLE
38717: EQUAL
38718: IFTRUE 38722
38720: GO 38784
38722: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38723: LD_ADDR_VAR 0 3
38727: PUSH
38728: LD_INT 11
38730: PUSH
38731: LD_INT 12
38733: PUSH
38734: LD_INT 13
38736: PUSH
38737: LD_INT 14
38739: PUSH
38740: LD_INT 1
38742: PUSH
38743: LD_INT 2
38745: PUSH
38746: LD_INT 3
38748: PUSH
38749: LD_INT 4
38751: PUSH
38752: LD_INT 5
38754: PUSH
38755: LD_INT 21
38757: PUSH
38758: LD_INT 23
38760: PUSH
38761: LD_INT 22
38763: PUSH
38764: LD_INT 24
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: ST_TO_ADDR
38782: GO 38843
38784: LD_INT 3
38786: DOUBLE
38787: EQUAL
38788: IFTRUE 38792
38790: GO 38842
38792: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38793: LD_ADDR_VAR 0 3
38797: PUSH
38798: LD_INT 13
38800: PUSH
38801: LD_INT 14
38803: PUSH
38804: LD_INT 2
38806: PUSH
38807: LD_INT 3
38809: PUSH
38810: LD_INT 4
38812: PUSH
38813: LD_INT 5
38815: PUSH
38816: LD_INT 21
38818: PUSH
38819: LD_INT 22
38821: PUSH
38822: LD_INT 23
38824: PUSH
38825: LD_INT 24
38827: PUSH
38828: EMPTY
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: ST_TO_ADDR
38840: GO 38843
38842: POP
// result := ( chassis in result ) ;
38843: LD_ADDR_VAR 0 3
38847: PUSH
38848: LD_VAR 0 1
38852: PUSH
38853: LD_VAR 0 3
38857: IN
38858: ST_TO_ADDR
// end ;
38859: LD_VAR 0 3
38863: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38864: LD_INT 0
38866: PPUSH
// if not chassis or not weapon then
38867: LD_VAR 0 1
38871: NOT
38872: PUSH
38873: LD_VAR 0 2
38877: NOT
38878: OR
38879: IFFALSE 38883
// exit ;
38881: GO 39943
// case weapon of us_machine_gun :
38883: LD_VAR 0 2
38887: PUSH
38888: LD_INT 2
38890: DOUBLE
38891: EQUAL
38892: IFTRUE 38896
38894: GO 38926
38896: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38897: LD_ADDR_VAR 0 3
38901: PUSH
38902: LD_INT 1
38904: PUSH
38905: LD_INT 2
38907: PUSH
38908: LD_INT 3
38910: PUSH
38911: LD_INT 4
38913: PUSH
38914: LD_INT 5
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: ST_TO_ADDR
38924: GO 39927
38926: LD_INT 3
38928: DOUBLE
38929: EQUAL
38930: IFTRUE 38934
38932: GO 38964
38934: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38935: LD_ADDR_VAR 0 3
38939: PUSH
38940: LD_INT 1
38942: PUSH
38943: LD_INT 2
38945: PUSH
38946: LD_INT 3
38948: PUSH
38949: LD_INT 4
38951: PUSH
38952: LD_INT 5
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: ST_TO_ADDR
38962: GO 39927
38964: LD_INT 11
38966: DOUBLE
38967: EQUAL
38968: IFTRUE 38972
38970: GO 39002
38972: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38973: LD_ADDR_VAR 0 3
38977: PUSH
38978: LD_INT 1
38980: PUSH
38981: LD_INT 2
38983: PUSH
38984: LD_INT 3
38986: PUSH
38987: LD_INT 4
38989: PUSH
38990: LD_INT 5
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: ST_TO_ADDR
39000: GO 39927
39002: LD_INT 4
39004: DOUBLE
39005: EQUAL
39006: IFTRUE 39010
39008: GO 39036
39010: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39011: LD_ADDR_VAR 0 3
39015: PUSH
39016: LD_INT 2
39018: PUSH
39019: LD_INT 3
39021: PUSH
39022: LD_INT 4
39024: PUSH
39025: LD_INT 5
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: ST_TO_ADDR
39034: GO 39927
39036: LD_INT 5
39038: DOUBLE
39039: EQUAL
39040: IFTRUE 39044
39042: GO 39070
39044: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39045: LD_ADDR_VAR 0 3
39049: PUSH
39050: LD_INT 2
39052: PUSH
39053: LD_INT 3
39055: PUSH
39056: LD_INT 4
39058: PUSH
39059: LD_INT 5
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: ST_TO_ADDR
39068: GO 39927
39070: LD_INT 9
39072: DOUBLE
39073: EQUAL
39074: IFTRUE 39078
39076: GO 39104
39078: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39079: LD_ADDR_VAR 0 3
39083: PUSH
39084: LD_INT 2
39086: PUSH
39087: LD_INT 3
39089: PUSH
39090: LD_INT 4
39092: PUSH
39093: LD_INT 5
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: ST_TO_ADDR
39102: GO 39927
39104: LD_INT 7
39106: DOUBLE
39107: EQUAL
39108: IFTRUE 39112
39110: GO 39138
39112: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39113: LD_ADDR_VAR 0 3
39117: PUSH
39118: LD_INT 2
39120: PUSH
39121: LD_INT 3
39123: PUSH
39124: LD_INT 4
39126: PUSH
39127: LD_INT 5
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: ST_TO_ADDR
39136: GO 39927
39138: LD_INT 12
39140: DOUBLE
39141: EQUAL
39142: IFTRUE 39146
39144: GO 39172
39146: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39147: LD_ADDR_VAR 0 3
39151: PUSH
39152: LD_INT 2
39154: PUSH
39155: LD_INT 3
39157: PUSH
39158: LD_INT 4
39160: PUSH
39161: LD_INT 5
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: ST_TO_ADDR
39170: GO 39927
39172: LD_INT 13
39174: DOUBLE
39175: EQUAL
39176: IFTRUE 39180
39178: GO 39206
39180: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39181: LD_ADDR_VAR 0 3
39185: PUSH
39186: LD_INT 2
39188: PUSH
39189: LD_INT 3
39191: PUSH
39192: LD_INT 4
39194: PUSH
39195: LD_INT 5
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: ST_TO_ADDR
39204: GO 39927
39206: LD_INT 14
39208: DOUBLE
39209: EQUAL
39210: IFTRUE 39214
39212: GO 39232
39214: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39215: LD_ADDR_VAR 0 3
39219: PUSH
39220: LD_INT 4
39222: PUSH
39223: LD_INT 5
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: ST_TO_ADDR
39230: GO 39927
39232: LD_INT 6
39234: DOUBLE
39235: EQUAL
39236: IFTRUE 39240
39238: GO 39258
39240: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39241: LD_ADDR_VAR 0 3
39245: PUSH
39246: LD_INT 4
39248: PUSH
39249: LD_INT 5
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: ST_TO_ADDR
39256: GO 39927
39258: LD_INT 10
39260: DOUBLE
39261: EQUAL
39262: IFTRUE 39266
39264: GO 39284
39266: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39267: LD_ADDR_VAR 0 3
39271: PUSH
39272: LD_INT 4
39274: PUSH
39275: LD_INT 5
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: ST_TO_ADDR
39282: GO 39927
39284: LD_INT 22
39286: DOUBLE
39287: EQUAL
39288: IFTRUE 39292
39290: GO 39318
39292: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39293: LD_ADDR_VAR 0 3
39297: PUSH
39298: LD_INT 11
39300: PUSH
39301: LD_INT 12
39303: PUSH
39304: LD_INT 13
39306: PUSH
39307: LD_INT 14
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: ST_TO_ADDR
39316: GO 39927
39318: LD_INT 23
39320: DOUBLE
39321: EQUAL
39322: IFTRUE 39326
39324: GO 39352
39326: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39327: LD_ADDR_VAR 0 3
39331: PUSH
39332: LD_INT 11
39334: PUSH
39335: LD_INT 12
39337: PUSH
39338: LD_INT 13
39340: PUSH
39341: LD_INT 14
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: ST_TO_ADDR
39350: GO 39927
39352: LD_INT 24
39354: DOUBLE
39355: EQUAL
39356: IFTRUE 39360
39358: GO 39386
39360: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39361: LD_ADDR_VAR 0 3
39365: PUSH
39366: LD_INT 11
39368: PUSH
39369: LD_INT 12
39371: PUSH
39372: LD_INT 13
39374: PUSH
39375: LD_INT 14
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: ST_TO_ADDR
39384: GO 39927
39386: LD_INT 30
39388: DOUBLE
39389: EQUAL
39390: IFTRUE 39394
39392: GO 39420
39394: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39395: LD_ADDR_VAR 0 3
39399: PUSH
39400: LD_INT 11
39402: PUSH
39403: LD_INT 12
39405: PUSH
39406: LD_INT 13
39408: PUSH
39409: LD_INT 14
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: ST_TO_ADDR
39418: GO 39927
39420: LD_INT 25
39422: DOUBLE
39423: EQUAL
39424: IFTRUE 39428
39426: GO 39446
39428: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39429: LD_ADDR_VAR 0 3
39433: PUSH
39434: LD_INT 13
39436: PUSH
39437: LD_INT 14
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: ST_TO_ADDR
39444: GO 39927
39446: LD_INT 27
39448: DOUBLE
39449: EQUAL
39450: IFTRUE 39454
39452: GO 39472
39454: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39455: LD_ADDR_VAR 0 3
39459: PUSH
39460: LD_INT 13
39462: PUSH
39463: LD_INT 14
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: ST_TO_ADDR
39470: GO 39927
39472: LD_INT 92
39474: DOUBLE
39475: EQUAL
39476: IFTRUE 39480
39478: GO 39506
39480: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39481: LD_ADDR_VAR 0 3
39485: PUSH
39486: LD_INT 11
39488: PUSH
39489: LD_INT 12
39491: PUSH
39492: LD_INT 13
39494: PUSH
39495: LD_INT 14
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: ST_TO_ADDR
39504: GO 39927
39506: LD_INT 28
39508: DOUBLE
39509: EQUAL
39510: IFTRUE 39514
39512: GO 39532
39514: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39515: LD_ADDR_VAR 0 3
39519: PUSH
39520: LD_INT 13
39522: PUSH
39523: LD_INT 14
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: ST_TO_ADDR
39530: GO 39927
39532: LD_INT 29
39534: DOUBLE
39535: EQUAL
39536: IFTRUE 39540
39538: GO 39558
39540: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39541: LD_ADDR_VAR 0 3
39545: PUSH
39546: LD_INT 13
39548: PUSH
39549: LD_INT 14
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: ST_TO_ADDR
39556: GO 39927
39558: LD_INT 31
39560: DOUBLE
39561: EQUAL
39562: IFTRUE 39566
39564: GO 39584
39566: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39567: LD_ADDR_VAR 0 3
39571: PUSH
39572: LD_INT 13
39574: PUSH
39575: LD_INT 14
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: ST_TO_ADDR
39582: GO 39927
39584: LD_INT 26
39586: DOUBLE
39587: EQUAL
39588: IFTRUE 39592
39590: GO 39610
39592: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39593: LD_ADDR_VAR 0 3
39597: PUSH
39598: LD_INT 13
39600: PUSH
39601: LD_INT 14
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: ST_TO_ADDR
39608: GO 39927
39610: LD_INT 42
39612: DOUBLE
39613: EQUAL
39614: IFTRUE 39618
39616: GO 39644
39618: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39619: LD_ADDR_VAR 0 3
39623: PUSH
39624: LD_INT 21
39626: PUSH
39627: LD_INT 22
39629: PUSH
39630: LD_INT 23
39632: PUSH
39633: LD_INT 24
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: ST_TO_ADDR
39642: GO 39927
39644: LD_INT 43
39646: DOUBLE
39647: EQUAL
39648: IFTRUE 39652
39650: GO 39678
39652: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39653: LD_ADDR_VAR 0 3
39657: PUSH
39658: LD_INT 21
39660: PUSH
39661: LD_INT 22
39663: PUSH
39664: LD_INT 23
39666: PUSH
39667: LD_INT 24
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: ST_TO_ADDR
39676: GO 39927
39678: LD_INT 44
39680: DOUBLE
39681: EQUAL
39682: IFTRUE 39686
39684: GO 39712
39686: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39687: LD_ADDR_VAR 0 3
39691: PUSH
39692: LD_INT 21
39694: PUSH
39695: LD_INT 22
39697: PUSH
39698: LD_INT 23
39700: PUSH
39701: LD_INT 24
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: ST_TO_ADDR
39710: GO 39927
39712: LD_INT 45
39714: DOUBLE
39715: EQUAL
39716: IFTRUE 39720
39718: GO 39746
39720: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39721: LD_ADDR_VAR 0 3
39725: PUSH
39726: LD_INT 21
39728: PUSH
39729: LD_INT 22
39731: PUSH
39732: LD_INT 23
39734: PUSH
39735: LD_INT 24
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: ST_TO_ADDR
39744: GO 39927
39746: LD_INT 49
39748: DOUBLE
39749: EQUAL
39750: IFTRUE 39754
39752: GO 39780
39754: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39755: LD_ADDR_VAR 0 3
39759: PUSH
39760: LD_INT 21
39762: PUSH
39763: LD_INT 22
39765: PUSH
39766: LD_INT 23
39768: PUSH
39769: LD_INT 24
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: ST_TO_ADDR
39778: GO 39927
39780: LD_INT 51
39782: DOUBLE
39783: EQUAL
39784: IFTRUE 39788
39786: GO 39814
39788: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39789: LD_ADDR_VAR 0 3
39793: PUSH
39794: LD_INT 21
39796: PUSH
39797: LD_INT 22
39799: PUSH
39800: LD_INT 23
39802: PUSH
39803: LD_INT 24
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: ST_TO_ADDR
39812: GO 39927
39814: LD_INT 52
39816: DOUBLE
39817: EQUAL
39818: IFTRUE 39822
39820: GO 39848
39822: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39823: LD_ADDR_VAR 0 3
39827: PUSH
39828: LD_INT 21
39830: PUSH
39831: LD_INT 22
39833: PUSH
39834: LD_INT 23
39836: PUSH
39837: LD_INT 24
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: ST_TO_ADDR
39846: GO 39927
39848: LD_INT 53
39850: DOUBLE
39851: EQUAL
39852: IFTRUE 39856
39854: GO 39874
39856: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39857: LD_ADDR_VAR 0 3
39861: PUSH
39862: LD_INT 23
39864: PUSH
39865: LD_INT 24
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: ST_TO_ADDR
39872: GO 39927
39874: LD_INT 46
39876: DOUBLE
39877: EQUAL
39878: IFTRUE 39882
39880: GO 39900
39882: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39883: LD_ADDR_VAR 0 3
39887: PUSH
39888: LD_INT 23
39890: PUSH
39891: LD_INT 24
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: ST_TO_ADDR
39898: GO 39927
39900: LD_INT 47
39902: DOUBLE
39903: EQUAL
39904: IFTRUE 39908
39906: GO 39926
39908: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39909: LD_ADDR_VAR 0 3
39913: PUSH
39914: LD_INT 23
39916: PUSH
39917: LD_INT 24
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: ST_TO_ADDR
39924: GO 39927
39926: POP
// result := ( chassis in result ) ;
39927: LD_ADDR_VAR 0 3
39931: PUSH
39932: LD_VAR 0 1
39936: PUSH
39937: LD_VAR 0 3
39941: IN
39942: ST_TO_ADDR
// end ;
39943: LD_VAR 0 3
39947: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39948: LD_INT 0
39950: PPUSH
39951: PPUSH
39952: PPUSH
39953: PPUSH
39954: PPUSH
39955: PPUSH
39956: PPUSH
// result := array ;
39957: LD_ADDR_VAR 0 5
39961: PUSH
39962: LD_VAR 0 1
39966: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39967: LD_VAR 0 1
39971: NOT
39972: PUSH
39973: LD_VAR 0 2
39977: NOT
39978: OR
39979: PUSH
39980: LD_VAR 0 3
39984: NOT
39985: OR
39986: PUSH
39987: LD_VAR 0 2
39991: PUSH
39992: LD_VAR 0 1
39996: GREATER
39997: OR
39998: PUSH
39999: LD_VAR 0 3
40003: PUSH
40004: LD_VAR 0 1
40008: GREATER
40009: OR
40010: IFFALSE 40014
// exit ;
40012: GO 40310
// if direction then
40014: LD_VAR 0 4
40018: IFFALSE 40082
// begin d := 1 ;
40020: LD_ADDR_VAR 0 9
40024: PUSH
40025: LD_INT 1
40027: ST_TO_ADDR
// if i_from > i_to then
40028: LD_VAR 0 2
40032: PUSH
40033: LD_VAR 0 3
40037: GREATER
40038: IFFALSE 40064
// length := ( array - i_from ) + i_to else
40040: LD_ADDR_VAR 0 11
40044: PUSH
40045: LD_VAR 0 1
40049: PUSH
40050: LD_VAR 0 2
40054: MINUS
40055: PUSH
40056: LD_VAR 0 3
40060: PLUS
40061: ST_TO_ADDR
40062: GO 40080
// length := i_to - i_from ;
40064: LD_ADDR_VAR 0 11
40068: PUSH
40069: LD_VAR 0 3
40073: PUSH
40074: LD_VAR 0 2
40078: MINUS
40079: ST_TO_ADDR
// end else
40080: GO 40143
// begin d := - 1 ;
40082: LD_ADDR_VAR 0 9
40086: PUSH
40087: LD_INT 1
40089: NEG
40090: ST_TO_ADDR
// if i_from > i_to then
40091: LD_VAR 0 2
40095: PUSH
40096: LD_VAR 0 3
40100: GREATER
40101: IFFALSE 40121
// length := i_from - i_to else
40103: LD_ADDR_VAR 0 11
40107: PUSH
40108: LD_VAR 0 2
40112: PUSH
40113: LD_VAR 0 3
40117: MINUS
40118: ST_TO_ADDR
40119: GO 40143
// length := ( array - i_to ) + i_from ;
40121: LD_ADDR_VAR 0 11
40125: PUSH
40126: LD_VAR 0 1
40130: PUSH
40131: LD_VAR 0 3
40135: MINUS
40136: PUSH
40137: LD_VAR 0 2
40141: PLUS
40142: ST_TO_ADDR
// end ; if not length then
40143: LD_VAR 0 11
40147: NOT
40148: IFFALSE 40152
// exit ;
40150: GO 40310
// tmp := array ;
40152: LD_ADDR_VAR 0 10
40156: PUSH
40157: LD_VAR 0 1
40161: ST_TO_ADDR
// for i = 1 to length do
40162: LD_ADDR_VAR 0 6
40166: PUSH
40167: DOUBLE
40168: LD_INT 1
40170: DEC
40171: ST_TO_ADDR
40172: LD_VAR 0 11
40176: PUSH
40177: FOR_TO
40178: IFFALSE 40298
// begin for j = 1 to array do
40180: LD_ADDR_VAR 0 7
40184: PUSH
40185: DOUBLE
40186: LD_INT 1
40188: DEC
40189: ST_TO_ADDR
40190: LD_VAR 0 1
40194: PUSH
40195: FOR_TO
40196: IFFALSE 40284
// begin k := j + d ;
40198: LD_ADDR_VAR 0 8
40202: PUSH
40203: LD_VAR 0 7
40207: PUSH
40208: LD_VAR 0 9
40212: PLUS
40213: ST_TO_ADDR
// if k > array then
40214: LD_VAR 0 8
40218: PUSH
40219: LD_VAR 0 1
40223: GREATER
40224: IFFALSE 40234
// k := 1 ;
40226: LD_ADDR_VAR 0 8
40230: PUSH
40231: LD_INT 1
40233: ST_TO_ADDR
// if not k then
40234: LD_VAR 0 8
40238: NOT
40239: IFFALSE 40251
// k := array ;
40241: LD_ADDR_VAR 0 8
40245: PUSH
40246: LD_VAR 0 1
40250: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40251: LD_ADDR_VAR 0 10
40255: PUSH
40256: LD_VAR 0 10
40260: PPUSH
40261: LD_VAR 0 8
40265: PPUSH
40266: LD_VAR 0 1
40270: PUSH
40271: LD_VAR 0 7
40275: ARRAY
40276: PPUSH
40277: CALL_OW 1
40281: ST_TO_ADDR
// end ;
40282: GO 40195
40284: POP
40285: POP
// array := tmp ;
40286: LD_ADDR_VAR 0 1
40290: PUSH
40291: LD_VAR 0 10
40295: ST_TO_ADDR
// end ;
40296: GO 40177
40298: POP
40299: POP
// result := array ;
40300: LD_ADDR_VAR 0 5
40304: PUSH
40305: LD_VAR 0 1
40309: ST_TO_ADDR
// end ;
40310: LD_VAR 0 5
40314: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40315: LD_INT 0
40317: PPUSH
40318: PPUSH
// result := 0 ;
40319: LD_ADDR_VAR 0 3
40323: PUSH
40324: LD_INT 0
40326: ST_TO_ADDR
// if not array or not value in array then
40327: LD_VAR 0 1
40331: NOT
40332: PUSH
40333: LD_VAR 0 2
40337: PUSH
40338: LD_VAR 0 1
40342: IN
40343: NOT
40344: OR
40345: IFFALSE 40349
// exit ;
40347: GO 40403
// for i = 1 to array do
40349: LD_ADDR_VAR 0 4
40353: PUSH
40354: DOUBLE
40355: LD_INT 1
40357: DEC
40358: ST_TO_ADDR
40359: LD_VAR 0 1
40363: PUSH
40364: FOR_TO
40365: IFFALSE 40401
// if value = array [ i ] then
40367: LD_VAR 0 2
40371: PUSH
40372: LD_VAR 0 1
40376: PUSH
40377: LD_VAR 0 4
40381: ARRAY
40382: EQUAL
40383: IFFALSE 40399
// begin result := i ;
40385: LD_ADDR_VAR 0 3
40389: PUSH
40390: LD_VAR 0 4
40394: ST_TO_ADDR
// exit ;
40395: POP
40396: POP
40397: GO 40403
// end ;
40399: GO 40364
40401: POP
40402: POP
// end ;
40403: LD_VAR 0 3
40407: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40408: LD_INT 0
40410: PPUSH
// vc_chassis := chassis ;
40411: LD_ADDR_OWVAR 37
40415: PUSH
40416: LD_VAR 0 1
40420: ST_TO_ADDR
// vc_engine := engine ;
40421: LD_ADDR_OWVAR 39
40425: PUSH
40426: LD_VAR 0 2
40430: ST_TO_ADDR
// vc_control := control ;
40431: LD_ADDR_OWVAR 38
40435: PUSH
40436: LD_VAR 0 3
40440: ST_TO_ADDR
// vc_weapon := weapon ;
40441: LD_ADDR_OWVAR 40
40445: PUSH
40446: LD_VAR 0 4
40450: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40451: LD_ADDR_OWVAR 41
40455: PUSH
40456: LD_VAR 0 5
40460: ST_TO_ADDR
// end ;
40461: LD_VAR 0 6
40465: RET
// export function WantPlant ( unit ) ; var task ; begin
40466: LD_INT 0
40468: PPUSH
40469: PPUSH
// result := false ;
40470: LD_ADDR_VAR 0 2
40474: PUSH
40475: LD_INT 0
40477: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40478: LD_ADDR_VAR 0 3
40482: PUSH
40483: LD_VAR 0 1
40487: PPUSH
40488: CALL_OW 437
40492: ST_TO_ADDR
// if task then
40493: LD_VAR 0 3
40497: IFFALSE 40525
// if task [ 1 ] [ 1 ] = p then
40499: LD_VAR 0 3
40503: PUSH
40504: LD_INT 1
40506: ARRAY
40507: PUSH
40508: LD_INT 1
40510: ARRAY
40511: PUSH
40512: LD_STRING p
40514: EQUAL
40515: IFFALSE 40525
// result := true ;
40517: LD_ADDR_VAR 0 2
40521: PUSH
40522: LD_INT 1
40524: ST_TO_ADDR
// end ;
40525: LD_VAR 0 2
40529: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40530: LD_INT 0
40532: PPUSH
40533: PPUSH
40534: PPUSH
40535: PPUSH
// if pos < 1 then
40536: LD_VAR 0 2
40540: PUSH
40541: LD_INT 1
40543: LESS
40544: IFFALSE 40548
// exit ;
40546: GO 40851
// if pos = 1 then
40548: LD_VAR 0 2
40552: PUSH
40553: LD_INT 1
40555: EQUAL
40556: IFFALSE 40589
// result := Replace ( arr , pos [ 1 ] , value ) else
40558: LD_ADDR_VAR 0 4
40562: PUSH
40563: LD_VAR 0 1
40567: PPUSH
40568: LD_VAR 0 2
40572: PUSH
40573: LD_INT 1
40575: ARRAY
40576: PPUSH
40577: LD_VAR 0 3
40581: PPUSH
40582: CALL_OW 1
40586: ST_TO_ADDR
40587: GO 40851
// begin tmp := arr ;
40589: LD_ADDR_VAR 0 6
40593: PUSH
40594: LD_VAR 0 1
40598: ST_TO_ADDR
// s_arr := [ tmp ] ;
40599: LD_ADDR_VAR 0 7
40603: PUSH
40604: LD_VAR 0 6
40608: PUSH
40609: EMPTY
40610: LIST
40611: ST_TO_ADDR
// for i = 1 to pos - 1 do
40612: LD_ADDR_VAR 0 5
40616: PUSH
40617: DOUBLE
40618: LD_INT 1
40620: DEC
40621: ST_TO_ADDR
40622: LD_VAR 0 2
40626: PUSH
40627: LD_INT 1
40629: MINUS
40630: PUSH
40631: FOR_TO
40632: IFFALSE 40677
// begin tmp := tmp [ pos [ i ] ] ;
40634: LD_ADDR_VAR 0 6
40638: PUSH
40639: LD_VAR 0 6
40643: PUSH
40644: LD_VAR 0 2
40648: PUSH
40649: LD_VAR 0 5
40653: ARRAY
40654: ARRAY
40655: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40656: LD_ADDR_VAR 0 7
40660: PUSH
40661: LD_VAR 0 7
40665: PUSH
40666: LD_VAR 0 6
40670: PUSH
40671: EMPTY
40672: LIST
40673: ADD
40674: ST_TO_ADDR
// end ;
40675: GO 40631
40677: POP
40678: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40679: LD_ADDR_VAR 0 6
40683: PUSH
40684: LD_VAR 0 6
40688: PPUSH
40689: LD_VAR 0 2
40693: PUSH
40694: LD_VAR 0 2
40698: ARRAY
40699: PPUSH
40700: LD_VAR 0 3
40704: PPUSH
40705: CALL_OW 1
40709: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40710: LD_ADDR_VAR 0 7
40714: PUSH
40715: LD_VAR 0 7
40719: PPUSH
40720: LD_VAR 0 7
40724: PPUSH
40725: LD_VAR 0 6
40729: PPUSH
40730: CALL_OW 1
40734: ST_TO_ADDR
// for i = s_arr downto 2 do
40735: LD_ADDR_VAR 0 5
40739: PUSH
40740: DOUBLE
40741: LD_VAR 0 7
40745: INC
40746: ST_TO_ADDR
40747: LD_INT 2
40749: PUSH
40750: FOR_DOWNTO
40751: IFFALSE 40835
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40753: LD_ADDR_VAR 0 6
40757: PUSH
40758: LD_VAR 0 7
40762: PUSH
40763: LD_VAR 0 5
40767: PUSH
40768: LD_INT 1
40770: MINUS
40771: ARRAY
40772: PPUSH
40773: LD_VAR 0 2
40777: PUSH
40778: LD_VAR 0 5
40782: PUSH
40783: LD_INT 1
40785: MINUS
40786: ARRAY
40787: PPUSH
40788: LD_VAR 0 7
40792: PUSH
40793: LD_VAR 0 5
40797: ARRAY
40798: PPUSH
40799: CALL_OW 1
40803: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40804: LD_ADDR_VAR 0 7
40808: PUSH
40809: LD_VAR 0 7
40813: PPUSH
40814: LD_VAR 0 5
40818: PUSH
40819: LD_INT 1
40821: MINUS
40822: PPUSH
40823: LD_VAR 0 6
40827: PPUSH
40828: CALL_OW 1
40832: ST_TO_ADDR
// end ;
40833: GO 40750
40835: POP
40836: POP
// result := s_arr [ 1 ] ;
40837: LD_ADDR_VAR 0 4
40841: PUSH
40842: LD_VAR 0 7
40846: PUSH
40847: LD_INT 1
40849: ARRAY
40850: ST_TO_ADDR
// end ; end ;
40851: LD_VAR 0 4
40855: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40856: LD_INT 0
40858: PPUSH
40859: PPUSH
// if not list then
40860: LD_VAR 0 1
40864: NOT
40865: IFFALSE 40869
// exit ;
40867: GO 40960
// i := list [ pos1 ] ;
40869: LD_ADDR_VAR 0 5
40873: PUSH
40874: LD_VAR 0 1
40878: PUSH
40879: LD_VAR 0 2
40883: ARRAY
40884: ST_TO_ADDR
// if not i then
40885: LD_VAR 0 5
40889: NOT
40890: IFFALSE 40894
// exit ;
40892: GO 40960
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40894: LD_ADDR_VAR 0 1
40898: PUSH
40899: LD_VAR 0 1
40903: PPUSH
40904: LD_VAR 0 2
40908: PPUSH
40909: LD_VAR 0 1
40913: PUSH
40914: LD_VAR 0 3
40918: ARRAY
40919: PPUSH
40920: CALL_OW 1
40924: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40925: LD_ADDR_VAR 0 1
40929: PUSH
40930: LD_VAR 0 1
40934: PPUSH
40935: LD_VAR 0 3
40939: PPUSH
40940: LD_VAR 0 5
40944: PPUSH
40945: CALL_OW 1
40949: ST_TO_ADDR
// result := list ;
40950: LD_ADDR_VAR 0 4
40954: PUSH
40955: LD_VAR 0 1
40959: ST_TO_ADDR
// end ;
40960: LD_VAR 0 4
40964: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40965: LD_INT 0
40967: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40968: LD_ADDR_VAR 0 5
40972: PUSH
40973: LD_VAR 0 1
40977: PPUSH
40978: CALL_OW 250
40982: PPUSH
40983: LD_VAR 0 1
40987: PPUSH
40988: CALL_OW 251
40992: PPUSH
40993: LD_VAR 0 2
40997: PPUSH
40998: LD_VAR 0 3
41002: PPUSH
41003: LD_VAR 0 4
41007: PPUSH
41008: CALL 41018 0 5
41012: ST_TO_ADDR
// end ;
41013: LD_VAR 0 5
41017: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41018: LD_INT 0
41020: PPUSH
41021: PPUSH
41022: PPUSH
41023: PPUSH
// if not list then
41024: LD_VAR 0 3
41028: NOT
41029: IFFALSE 41033
// exit ;
41031: GO 41421
// result := [ ] ;
41033: LD_ADDR_VAR 0 6
41037: PUSH
41038: EMPTY
41039: ST_TO_ADDR
// for i in list do
41040: LD_ADDR_VAR 0 7
41044: PUSH
41045: LD_VAR 0 3
41049: PUSH
41050: FOR_IN
41051: IFFALSE 41253
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41053: LD_ADDR_VAR 0 9
41057: PUSH
41058: LD_VAR 0 7
41062: PPUSH
41063: LD_VAR 0 1
41067: PPUSH
41068: LD_VAR 0 2
41072: PPUSH
41073: CALL_OW 297
41077: ST_TO_ADDR
// if not result then
41078: LD_VAR 0 6
41082: NOT
41083: IFFALSE 41109
// result := [ [ i , tmp ] ] else
41085: LD_ADDR_VAR 0 6
41089: PUSH
41090: LD_VAR 0 7
41094: PUSH
41095: LD_VAR 0 9
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: EMPTY
41105: LIST
41106: ST_TO_ADDR
41107: GO 41251
// begin if result [ result ] [ 2 ] < tmp then
41109: LD_VAR 0 6
41113: PUSH
41114: LD_VAR 0 6
41118: ARRAY
41119: PUSH
41120: LD_INT 2
41122: ARRAY
41123: PUSH
41124: LD_VAR 0 9
41128: LESS
41129: IFFALSE 41171
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41131: LD_ADDR_VAR 0 6
41135: PUSH
41136: LD_VAR 0 6
41140: PPUSH
41141: LD_VAR 0 6
41145: PUSH
41146: LD_INT 1
41148: PLUS
41149: PPUSH
41150: LD_VAR 0 7
41154: PUSH
41155: LD_VAR 0 9
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PPUSH
41164: CALL_OW 2
41168: ST_TO_ADDR
41169: GO 41251
// for j = 1 to result do
41171: LD_ADDR_VAR 0 8
41175: PUSH
41176: DOUBLE
41177: LD_INT 1
41179: DEC
41180: ST_TO_ADDR
41181: LD_VAR 0 6
41185: PUSH
41186: FOR_TO
41187: IFFALSE 41249
// begin if tmp < result [ j ] [ 2 ] then
41189: LD_VAR 0 9
41193: PUSH
41194: LD_VAR 0 6
41198: PUSH
41199: LD_VAR 0 8
41203: ARRAY
41204: PUSH
41205: LD_INT 2
41207: ARRAY
41208: LESS
41209: IFFALSE 41247
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41211: LD_ADDR_VAR 0 6
41215: PUSH
41216: LD_VAR 0 6
41220: PPUSH
41221: LD_VAR 0 8
41225: PPUSH
41226: LD_VAR 0 7
41230: PUSH
41231: LD_VAR 0 9
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: PPUSH
41240: CALL_OW 2
41244: ST_TO_ADDR
// break ;
41245: GO 41249
// end ; end ;
41247: GO 41186
41249: POP
41250: POP
// end ; end ;
41251: GO 41050
41253: POP
41254: POP
// if result and not asc then
41255: LD_VAR 0 6
41259: PUSH
41260: LD_VAR 0 4
41264: NOT
41265: AND
41266: IFFALSE 41341
// begin tmp := result ;
41268: LD_ADDR_VAR 0 9
41272: PUSH
41273: LD_VAR 0 6
41277: ST_TO_ADDR
// for i = tmp downto 1 do
41278: LD_ADDR_VAR 0 7
41282: PUSH
41283: DOUBLE
41284: LD_VAR 0 9
41288: INC
41289: ST_TO_ADDR
41290: LD_INT 1
41292: PUSH
41293: FOR_DOWNTO
41294: IFFALSE 41339
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41296: LD_ADDR_VAR 0 6
41300: PUSH
41301: LD_VAR 0 6
41305: PPUSH
41306: LD_VAR 0 9
41310: PUSH
41311: LD_VAR 0 7
41315: MINUS
41316: PUSH
41317: LD_INT 1
41319: PLUS
41320: PPUSH
41321: LD_VAR 0 9
41325: PUSH
41326: LD_VAR 0 7
41330: ARRAY
41331: PPUSH
41332: CALL_OW 1
41336: ST_TO_ADDR
41337: GO 41293
41339: POP
41340: POP
// end ; tmp := [ ] ;
41341: LD_ADDR_VAR 0 9
41345: PUSH
41346: EMPTY
41347: ST_TO_ADDR
// if mode then
41348: LD_VAR 0 5
41352: IFFALSE 41421
// begin for i = 1 to result do
41354: LD_ADDR_VAR 0 7
41358: PUSH
41359: DOUBLE
41360: LD_INT 1
41362: DEC
41363: ST_TO_ADDR
41364: LD_VAR 0 6
41368: PUSH
41369: FOR_TO
41370: IFFALSE 41409
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41372: LD_ADDR_VAR 0 9
41376: PUSH
41377: LD_VAR 0 9
41381: PPUSH
41382: LD_VAR 0 7
41386: PPUSH
41387: LD_VAR 0 6
41391: PUSH
41392: LD_VAR 0 7
41396: ARRAY
41397: PUSH
41398: LD_INT 1
41400: ARRAY
41401: PPUSH
41402: CALL_OW 1
41406: ST_TO_ADDR
41407: GO 41369
41409: POP
41410: POP
// result := tmp ;
41411: LD_ADDR_VAR 0 6
41415: PUSH
41416: LD_VAR 0 9
41420: ST_TO_ADDR
// end ; end ;
41421: LD_VAR 0 6
41425: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41426: LD_INT 0
41428: PPUSH
41429: PPUSH
41430: PPUSH
41431: PPUSH
41432: PPUSH
41433: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41434: LD_ADDR_VAR 0 5
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: EMPTY
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: ST_TO_ADDR
// if not x or not y then
41456: LD_VAR 0 2
41460: NOT
41461: PUSH
41462: LD_VAR 0 3
41466: NOT
41467: OR
41468: IFFALSE 41472
// exit ;
41470: GO 43122
// if not range then
41472: LD_VAR 0 4
41476: NOT
41477: IFFALSE 41487
// range := 10 ;
41479: LD_ADDR_VAR 0 4
41483: PUSH
41484: LD_INT 10
41486: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41487: LD_ADDR_VAR 0 8
41491: PUSH
41492: LD_INT 81
41494: PUSH
41495: LD_VAR 0 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 92
41506: PUSH
41507: LD_VAR 0 2
41511: PUSH
41512: LD_VAR 0 3
41516: PUSH
41517: LD_VAR 0 4
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 3
41530: PUSH
41531: LD_INT 21
41533: PUSH
41534: LD_INT 3
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: LIST
41549: PPUSH
41550: CALL_OW 69
41554: ST_TO_ADDR
// if not tmp then
41555: LD_VAR 0 8
41559: NOT
41560: IFFALSE 41564
// exit ;
41562: GO 43122
// for i in tmp do
41564: LD_ADDR_VAR 0 6
41568: PUSH
41569: LD_VAR 0 8
41573: PUSH
41574: FOR_IN
41575: IFFALSE 43097
// begin points := [ 0 , 0 , 0 ] ;
41577: LD_ADDR_VAR 0 9
41581: PUSH
41582: LD_INT 0
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: LIST
41595: ST_TO_ADDR
// bpoints := 1 ;
41596: LD_ADDR_VAR 0 10
41600: PUSH
41601: LD_INT 1
41603: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41604: LD_VAR 0 6
41608: PPUSH
41609: CALL_OW 247
41613: PUSH
41614: LD_INT 1
41616: DOUBLE
41617: EQUAL
41618: IFTRUE 41622
41620: GO 42200
41622: POP
// begin if GetClass ( i ) = 1 then
41623: LD_VAR 0 6
41627: PPUSH
41628: CALL_OW 257
41632: PUSH
41633: LD_INT 1
41635: EQUAL
41636: IFFALSE 41657
// points := [ 10 , 5 , 3 ] ;
41638: LD_ADDR_VAR 0 9
41642: PUSH
41643: LD_INT 10
41645: PUSH
41646: LD_INT 5
41648: PUSH
41649: LD_INT 3
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: LIST
41656: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41657: LD_VAR 0 6
41661: PPUSH
41662: CALL_OW 257
41666: PUSH
41667: LD_INT 2
41669: PUSH
41670: LD_INT 3
41672: PUSH
41673: LD_INT 4
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: LIST
41680: IN
41681: IFFALSE 41702
// points := [ 3 , 2 , 1 ] ;
41683: LD_ADDR_VAR 0 9
41687: PUSH
41688: LD_INT 3
41690: PUSH
41691: LD_INT 2
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: LIST
41701: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41702: LD_VAR 0 6
41706: PPUSH
41707: CALL_OW 257
41711: PUSH
41712: LD_INT 5
41714: EQUAL
41715: IFFALSE 41736
// points := [ 130 , 5 , 2 ] ;
41717: LD_ADDR_VAR 0 9
41721: PUSH
41722: LD_INT 130
41724: PUSH
41725: LD_INT 5
41727: PUSH
41728: LD_INT 2
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: LIST
41735: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41736: LD_VAR 0 6
41740: PPUSH
41741: CALL_OW 257
41745: PUSH
41746: LD_INT 8
41748: EQUAL
41749: IFFALSE 41770
// points := [ 35 , 35 , 30 ] ;
41751: LD_ADDR_VAR 0 9
41755: PUSH
41756: LD_INT 35
41758: PUSH
41759: LD_INT 35
41761: PUSH
41762: LD_INT 30
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: LIST
41769: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41770: LD_VAR 0 6
41774: PPUSH
41775: CALL_OW 257
41779: PUSH
41780: LD_INT 9
41782: EQUAL
41783: IFFALSE 41804
// points := [ 20 , 55 , 40 ] ;
41785: LD_ADDR_VAR 0 9
41789: PUSH
41790: LD_INT 20
41792: PUSH
41793: LD_INT 55
41795: PUSH
41796: LD_INT 40
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: LIST
41803: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41804: LD_VAR 0 6
41808: PPUSH
41809: CALL_OW 257
41813: PUSH
41814: LD_INT 12
41816: PUSH
41817: LD_INT 16
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: IN
41824: IFFALSE 41845
// points := [ 5 , 3 , 2 ] ;
41826: LD_ADDR_VAR 0 9
41830: PUSH
41831: LD_INT 5
41833: PUSH
41834: LD_INT 3
41836: PUSH
41837: LD_INT 2
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: LIST
41844: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41845: LD_VAR 0 6
41849: PPUSH
41850: CALL_OW 257
41854: PUSH
41855: LD_INT 17
41857: EQUAL
41858: IFFALSE 41879
// points := [ 100 , 50 , 75 ] ;
41860: LD_ADDR_VAR 0 9
41864: PUSH
41865: LD_INT 100
41867: PUSH
41868: LD_INT 50
41870: PUSH
41871: LD_INT 75
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: LIST
41878: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41879: LD_VAR 0 6
41883: PPUSH
41884: CALL_OW 257
41888: PUSH
41889: LD_INT 15
41891: EQUAL
41892: IFFALSE 41913
// points := [ 10 , 5 , 3 ] ;
41894: LD_ADDR_VAR 0 9
41898: PUSH
41899: LD_INT 10
41901: PUSH
41902: LD_INT 5
41904: PUSH
41905: LD_INT 3
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: LIST
41912: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41913: LD_VAR 0 6
41917: PPUSH
41918: CALL_OW 257
41922: PUSH
41923: LD_INT 14
41925: EQUAL
41926: IFFALSE 41947
// points := [ 10 , 0 , 0 ] ;
41928: LD_ADDR_VAR 0 9
41932: PUSH
41933: LD_INT 10
41935: PUSH
41936: LD_INT 0
41938: PUSH
41939: LD_INT 0
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: LIST
41946: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41947: LD_VAR 0 6
41951: PPUSH
41952: CALL_OW 257
41956: PUSH
41957: LD_INT 11
41959: EQUAL
41960: IFFALSE 41981
// points := [ 30 , 10 , 5 ] ;
41962: LD_ADDR_VAR 0 9
41966: PUSH
41967: LD_INT 30
41969: PUSH
41970: LD_INT 10
41972: PUSH
41973: LD_INT 5
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: LIST
41980: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41981: LD_VAR 0 1
41985: PPUSH
41986: LD_INT 5
41988: PPUSH
41989: CALL_OW 321
41993: PUSH
41994: LD_INT 2
41996: EQUAL
41997: IFFALSE 42014
// bpoints := bpoints * 1.8 ;
41999: LD_ADDR_VAR 0 10
42003: PUSH
42004: LD_VAR 0 10
42008: PUSH
42009: LD_REAL  1.80000000000000E+0000
42012: MUL
42013: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42014: LD_VAR 0 6
42018: PPUSH
42019: CALL_OW 257
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: LD_INT 2
42029: PUSH
42030: LD_INT 3
42032: PUSH
42033: LD_INT 4
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: IN
42042: PUSH
42043: LD_VAR 0 1
42047: PPUSH
42048: LD_INT 51
42050: PPUSH
42051: CALL_OW 321
42055: PUSH
42056: LD_INT 2
42058: EQUAL
42059: AND
42060: IFFALSE 42077
// bpoints := bpoints * 1.2 ;
42062: LD_ADDR_VAR 0 10
42066: PUSH
42067: LD_VAR 0 10
42071: PUSH
42072: LD_REAL  1.20000000000000E+0000
42075: MUL
42076: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42077: LD_VAR 0 6
42081: PPUSH
42082: CALL_OW 257
42086: PUSH
42087: LD_INT 5
42089: PUSH
42090: LD_INT 7
42092: PUSH
42093: LD_INT 9
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: LIST
42100: IN
42101: PUSH
42102: LD_VAR 0 1
42106: PPUSH
42107: LD_INT 52
42109: PPUSH
42110: CALL_OW 321
42114: PUSH
42115: LD_INT 2
42117: EQUAL
42118: AND
42119: IFFALSE 42136
// bpoints := bpoints * 1.5 ;
42121: LD_ADDR_VAR 0 10
42125: PUSH
42126: LD_VAR 0 10
42130: PUSH
42131: LD_REAL  1.50000000000000E+0000
42134: MUL
42135: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42136: LD_VAR 0 1
42140: PPUSH
42141: LD_INT 66
42143: PPUSH
42144: CALL_OW 321
42148: PUSH
42149: LD_INT 2
42151: EQUAL
42152: IFFALSE 42169
// bpoints := bpoints * 1.1 ;
42154: LD_ADDR_VAR 0 10
42158: PUSH
42159: LD_VAR 0 10
42163: PUSH
42164: LD_REAL  1.10000000000000E+0000
42167: MUL
42168: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42169: LD_ADDR_VAR 0 10
42173: PUSH
42174: LD_VAR 0 10
42178: PUSH
42179: LD_VAR 0 6
42183: PPUSH
42184: LD_INT 1
42186: PPUSH
42187: CALL_OW 259
42191: PUSH
42192: LD_REAL  1.15000000000000E+0000
42195: MUL
42196: MUL
42197: ST_TO_ADDR
// end ; unit_vehicle :
42198: GO 43026
42200: LD_INT 2
42202: DOUBLE
42203: EQUAL
42204: IFTRUE 42208
42206: GO 43014
42208: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42209: LD_VAR 0 6
42213: PPUSH
42214: CALL_OW 264
42218: PUSH
42219: LD_INT 2
42221: PUSH
42222: LD_INT 42
42224: PUSH
42225: LD_INT 24
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: LIST
42232: IN
42233: IFFALSE 42254
// points := [ 25 , 5 , 3 ] ;
42235: LD_ADDR_VAR 0 9
42239: PUSH
42240: LD_INT 25
42242: PUSH
42243: LD_INT 5
42245: PUSH
42246: LD_INT 3
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: LIST
42253: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42254: LD_VAR 0 6
42258: PPUSH
42259: CALL_OW 264
42263: PUSH
42264: LD_INT 4
42266: PUSH
42267: LD_INT 43
42269: PUSH
42270: LD_INT 25
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: LIST
42277: IN
42278: IFFALSE 42299
// points := [ 40 , 15 , 5 ] ;
42280: LD_ADDR_VAR 0 9
42284: PUSH
42285: LD_INT 40
42287: PUSH
42288: LD_INT 15
42290: PUSH
42291: LD_INT 5
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: LIST
42298: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42299: LD_VAR 0 6
42303: PPUSH
42304: CALL_OW 264
42308: PUSH
42309: LD_INT 3
42311: PUSH
42312: LD_INT 23
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: IN
42319: IFFALSE 42340
// points := [ 7 , 25 , 8 ] ;
42321: LD_ADDR_VAR 0 9
42325: PUSH
42326: LD_INT 7
42328: PUSH
42329: LD_INT 25
42331: PUSH
42332: LD_INT 8
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: LIST
42339: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42340: LD_VAR 0 6
42344: PPUSH
42345: CALL_OW 264
42349: PUSH
42350: LD_INT 5
42352: PUSH
42353: LD_INT 27
42355: PUSH
42356: LD_INT 44
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: LIST
42363: IN
42364: IFFALSE 42385
// points := [ 14 , 50 , 16 ] ;
42366: LD_ADDR_VAR 0 9
42370: PUSH
42371: LD_INT 14
42373: PUSH
42374: LD_INT 50
42376: PUSH
42377: LD_INT 16
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: LIST
42384: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42385: LD_VAR 0 6
42389: PPUSH
42390: CALL_OW 264
42394: PUSH
42395: LD_INT 6
42397: PUSH
42398: LD_INT 46
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: IN
42405: IFFALSE 42426
// points := [ 32 , 120 , 70 ] ;
42407: LD_ADDR_VAR 0 9
42411: PUSH
42412: LD_INT 32
42414: PUSH
42415: LD_INT 120
42417: PUSH
42418: LD_INT 70
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: LIST
42425: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42426: LD_VAR 0 6
42430: PPUSH
42431: CALL_OW 264
42435: PUSH
42436: LD_INT 7
42438: PUSH
42439: LD_INT 28
42441: PUSH
42442: LD_INT 45
42444: PUSH
42445: LD_INT 92
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: IN
42454: IFFALSE 42475
// points := [ 35 , 20 , 45 ] ;
42456: LD_ADDR_VAR 0 9
42460: PUSH
42461: LD_INT 35
42463: PUSH
42464: LD_INT 20
42466: PUSH
42467: LD_INT 45
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: LIST
42474: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42475: LD_VAR 0 6
42479: PPUSH
42480: CALL_OW 264
42484: PUSH
42485: LD_INT 47
42487: PUSH
42488: EMPTY
42489: LIST
42490: IN
42491: IFFALSE 42512
// points := [ 67 , 45 , 75 ] ;
42493: LD_ADDR_VAR 0 9
42497: PUSH
42498: LD_INT 67
42500: PUSH
42501: LD_INT 45
42503: PUSH
42504: LD_INT 75
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: LIST
42511: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42512: LD_VAR 0 6
42516: PPUSH
42517: CALL_OW 264
42521: PUSH
42522: LD_INT 26
42524: PUSH
42525: EMPTY
42526: LIST
42527: IN
42528: IFFALSE 42549
// points := [ 120 , 30 , 80 ] ;
42530: LD_ADDR_VAR 0 9
42534: PUSH
42535: LD_INT 120
42537: PUSH
42538: LD_INT 30
42540: PUSH
42541: LD_INT 80
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: LIST
42548: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42549: LD_VAR 0 6
42553: PPUSH
42554: CALL_OW 264
42558: PUSH
42559: LD_INT 22
42561: PUSH
42562: EMPTY
42563: LIST
42564: IN
42565: IFFALSE 42586
// points := [ 40 , 1 , 1 ] ;
42567: LD_ADDR_VAR 0 9
42571: PUSH
42572: LD_INT 40
42574: PUSH
42575: LD_INT 1
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: LIST
42585: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42586: LD_VAR 0 6
42590: PPUSH
42591: CALL_OW 264
42595: PUSH
42596: LD_INT 29
42598: PUSH
42599: EMPTY
42600: LIST
42601: IN
42602: IFFALSE 42623
// points := [ 70 , 200 , 400 ] ;
42604: LD_ADDR_VAR 0 9
42608: PUSH
42609: LD_INT 70
42611: PUSH
42612: LD_INT 200
42614: PUSH
42615: LD_INT 400
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: LIST
42622: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42623: LD_VAR 0 6
42627: PPUSH
42628: CALL_OW 264
42632: PUSH
42633: LD_INT 14
42635: PUSH
42636: LD_INT 53
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: IN
42643: IFFALSE 42664
// points := [ 40 , 10 , 20 ] ;
42645: LD_ADDR_VAR 0 9
42649: PUSH
42650: LD_INT 40
42652: PUSH
42653: LD_INT 10
42655: PUSH
42656: LD_INT 20
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: LIST
42663: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42664: LD_VAR 0 6
42668: PPUSH
42669: CALL_OW 264
42673: PUSH
42674: LD_INT 9
42676: PUSH
42677: EMPTY
42678: LIST
42679: IN
42680: IFFALSE 42701
// points := [ 5 , 70 , 20 ] ;
42682: LD_ADDR_VAR 0 9
42686: PUSH
42687: LD_INT 5
42689: PUSH
42690: LD_INT 70
42692: PUSH
42693: LD_INT 20
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: LIST
42700: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42701: LD_VAR 0 6
42705: PPUSH
42706: CALL_OW 264
42710: PUSH
42711: LD_INT 10
42713: PUSH
42714: EMPTY
42715: LIST
42716: IN
42717: IFFALSE 42738
// points := [ 35 , 110 , 70 ] ;
42719: LD_ADDR_VAR 0 9
42723: PUSH
42724: LD_INT 35
42726: PUSH
42727: LD_INT 110
42729: PUSH
42730: LD_INT 70
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: LIST
42737: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42738: LD_VAR 0 6
42742: PPUSH
42743: CALL_OW 265
42747: PUSH
42748: LD_INT 25
42750: EQUAL
42751: IFFALSE 42772
// points := [ 80 , 65 , 100 ] ;
42753: LD_ADDR_VAR 0 9
42757: PUSH
42758: LD_INT 80
42760: PUSH
42761: LD_INT 65
42763: PUSH
42764: LD_INT 100
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: LIST
42771: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42772: LD_VAR 0 6
42776: PPUSH
42777: CALL_OW 263
42781: PUSH
42782: LD_INT 1
42784: EQUAL
42785: IFFALSE 42820
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42787: LD_ADDR_VAR 0 10
42791: PUSH
42792: LD_VAR 0 10
42796: PUSH
42797: LD_VAR 0 6
42801: PPUSH
42802: CALL_OW 311
42806: PPUSH
42807: LD_INT 3
42809: PPUSH
42810: CALL_OW 259
42814: PUSH
42815: LD_INT 4
42817: MUL
42818: MUL
42819: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42820: LD_VAR 0 6
42824: PPUSH
42825: CALL_OW 263
42829: PUSH
42830: LD_INT 2
42832: EQUAL
42833: IFFALSE 42884
// begin j := IsControledBy ( i ) ;
42835: LD_ADDR_VAR 0 7
42839: PUSH
42840: LD_VAR 0 6
42844: PPUSH
42845: CALL_OW 312
42849: ST_TO_ADDR
// if j then
42850: LD_VAR 0 7
42854: IFFALSE 42884
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42856: LD_ADDR_VAR 0 10
42860: PUSH
42861: LD_VAR 0 10
42865: PUSH
42866: LD_VAR 0 7
42870: PPUSH
42871: LD_INT 3
42873: PPUSH
42874: CALL_OW 259
42878: PUSH
42879: LD_INT 3
42881: MUL
42882: MUL
42883: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42884: LD_VAR 0 6
42888: PPUSH
42889: CALL_OW 264
42893: PUSH
42894: LD_INT 5
42896: PUSH
42897: LD_INT 6
42899: PUSH
42900: LD_INT 46
42902: PUSH
42903: LD_INT 44
42905: PUSH
42906: LD_INT 47
42908: PUSH
42909: LD_INT 45
42911: PUSH
42912: LD_INT 28
42914: PUSH
42915: LD_INT 7
42917: PUSH
42918: LD_INT 27
42920: PUSH
42921: LD_INT 29
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: IN
42936: PUSH
42937: LD_VAR 0 1
42941: PPUSH
42942: LD_INT 52
42944: PPUSH
42945: CALL_OW 321
42949: PUSH
42950: LD_INT 2
42952: EQUAL
42953: AND
42954: IFFALSE 42971
// bpoints := bpoints * 1.2 ;
42956: LD_ADDR_VAR 0 10
42960: PUSH
42961: LD_VAR 0 10
42965: PUSH
42966: LD_REAL  1.20000000000000E+0000
42969: MUL
42970: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42971: LD_VAR 0 6
42975: PPUSH
42976: CALL_OW 264
42980: PUSH
42981: LD_INT 6
42983: PUSH
42984: LD_INT 46
42986: PUSH
42987: LD_INT 47
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: LIST
42994: IN
42995: IFFALSE 43012
// bpoints := bpoints * 1.2 ;
42997: LD_ADDR_VAR 0 10
43001: PUSH
43002: LD_VAR 0 10
43006: PUSH
43007: LD_REAL  1.20000000000000E+0000
43010: MUL
43011: ST_TO_ADDR
// end ; unit_building :
43012: GO 43026
43014: LD_INT 3
43016: DOUBLE
43017: EQUAL
43018: IFTRUE 43022
43020: GO 43025
43022: POP
// ; end ;
43023: GO 43026
43025: POP
// for j = 1 to 3 do
43026: LD_ADDR_VAR 0 7
43030: PUSH
43031: DOUBLE
43032: LD_INT 1
43034: DEC
43035: ST_TO_ADDR
43036: LD_INT 3
43038: PUSH
43039: FOR_TO
43040: IFFALSE 43093
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43042: LD_ADDR_VAR 0 5
43046: PUSH
43047: LD_VAR 0 5
43051: PPUSH
43052: LD_VAR 0 7
43056: PPUSH
43057: LD_VAR 0 5
43061: PUSH
43062: LD_VAR 0 7
43066: ARRAY
43067: PUSH
43068: LD_VAR 0 9
43072: PUSH
43073: LD_VAR 0 7
43077: ARRAY
43078: PUSH
43079: LD_VAR 0 10
43083: MUL
43084: PLUS
43085: PPUSH
43086: CALL_OW 1
43090: ST_TO_ADDR
43091: GO 43039
43093: POP
43094: POP
// end ;
43095: GO 41574
43097: POP
43098: POP
// result := Replace ( result , 4 , tmp ) ;
43099: LD_ADDR_VAR 0 5
43103: PUSH
43104: LD_VAR 0 5
43108: PPUSH
43109: LD_INT 4
43111: PPUSH
43112: LD_VAR 0 8
43116: PPUSH
43117: CALL_OW 1
43121: ST_TO_ADDR
// end ;
43122: LD_VAR 0 5
43126: RET
// export function DangerAtRange ( unit , range ) ; begin
43127: LD_INT 0
43129: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43130: LD_ADDR_VAR 0 3
43134: PUSH
43135: LD_VAR 0 1
43139: PPUSH
43140: CALL_OW 255
43144: PPUSH
43145: LD_VAR 0 1
43149: PPUSH
43150: CALL_OW 250
43154: PPUSH
43155: LD_VAR 0 1
43159: PPUSH
43160: CALL_OW 251
43164: PPUSH
43165: LD_VAR 0 2
43169: PPUSH
43170: CALL 41426 0 4
43174: ST_TO_ADDR
// end ;
43175: LD_VAR 0 3
43179: RET
// export function DangerInArea ( side , area ) ; begin
43180: LD_INT 0
43182: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43183: LD_ADDR_VAR 0 3
43187: PUSH
43188: LD_VAR 0 2
43192: PPUSH
43193: LD_INT 81
43195: PUSH
43196: LD_VAR 0 1
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PPUSH
43205: CALL_OW 70
43209: ST_TO_ADDR
// end ;
43210: LD_VAR 0 3
43214: RET
// export function IsExtension ( b ) ; begin
43215: LD_INT 0
43217: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43218: LD_ADDR_VAR 0 2
43222: PUSH
43223: LD_VAR 0 1
43227: PUSH
43228: LD_INT 23
43230: PUSH
43231: LD_INT 20
43233: PUSH
43234: LD_INT 22
43236: PUSH
43237: LD_INT 17
43239: PUSH
43240: LD_INT 24
43242: PUSH
43243: LD_INT 21
43245: PUSH
43246: LD_INT 19
43248: PUSH
43249: LD_INT 16
43251: PUSH
43252: LD_INT 25
43254: PUSH
43255: LD_INT 18
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: IN
43270: ST_TO_ADDR
// end ;
43271: LD_VAR 0 2
43275: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
43276: LD_INT 0
43278: PPUSH
43279: PPUSH
43280: PPUSH
// result := [ ] ;
43281: LD_ADDR_VAR 0 4
43285: PUSH
43286: EMPTY
43287: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43288: LD_ADDR_VAR 0 5
43292: PUSH
43293: LD_VAR 0 2
43297: PPUSH
43298: LD_INT 21
43300: PUSH
43301: LD_INT 3
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PPUSH
43308: CALL_OW 70
43312: ST_TO_ADDR
// if not tmp then
43313: LD_VAR 0 5
43317: NOT
43318: IFFALSE 43322
// exit ;
43320: GO 43386
// if checkLink then
43322: LD_VAR 0 3
43326: IFFALSE 43376
// begin for i in tmp do
43328: LD_ADDR_VAR 0 6
43332: PUSH
43333: LD_VAR 0 5
43337: PUSH
43338: FOR_IN
43339: IFFALSE 43374
// if GetBase ( i ) <> base then
43341: LD_VAR 0 6
43345: PPUSH
43346: CALL_OW 274
43350: PUSH
43351: LD_VAR 0 1
43355: NONEQUAL
43356: IFFALSE 43372
// ComLinkToBase ( base , i ) ;
43358: LD_VAR 0 1
43362: PPUSH
43363: LD_VAR 0 6
43367: PPUSH
43368: CALL_OW 169
43372: GO 43338
43374: POP
43375: POP
// end ; result := tmp ;
43376: LD_ADDR_VAR 0 4
43380: PUSH
43381: LD_VAR 0 5
43385: ST_TO_ADDR
// end ;
43386: LD_VAR 0 4
43390: RET
// export function ComComplete ( units , b ) ; var i ; begin
43391: LD_INT 0
43393: PPUSH
43394: PPUSH
// if not units then
43395: LD_VAR 0 1
43399: NOT
43400: IFFALSE 43404
// exit ;
43402: GO 43494
// for i in units do
43404: LD_ADDR_VAR 0 4
43408: PUSH
43409: LD_VAR 0 1
43413: PUSH
43414: FOR_IN
43415: IFFALSE 43492
// if BuildingStatus ( b ) = bs_build then
43417: LD_VAR 0 2
43421: PPUSH
43422: CALL_OW 461
43426: PUSH
43427: LD_INT 1
43429: EQUAL
43430: IFFALSE 43490
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43432: LD_VAR 0 4
43436: PPUSH
43437: LD_STRING h
43439: PUSH
43440: LD_VAR 0 2
43444: PPUSH
43445: CALL_OW 250
43449: PUSH
43450: LD_VAR 0 2
43454: PPUSH
43455: CALL_OW 251
43459: PUSH
43460: LD_VAR 0 2
43464: PUSH
43465: LD_INT 0
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: LD_INT 0
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: PUSH
43483: EMPTY
43484: LIST
43485: PPUSH
43486: CALL_OW 446
43490: GO 43414
43492: POP
43493: POP
// end ;
43494: LD_VAR 0 3
43498: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43499: LD_INT 0
43501: PPUSH
43502: PPUSH
43503: PPUSH
43504: PPUSH
43505: PPUSH
43506: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43507: LD_VAR 0 1
43511: NOT
43512: PUSH
43513: LD_VAR 0 1
43517: PPUSH
43518: CALL_OW 263
43522: PUSH
43523: LD_INT 2
43525: NONEQUAL
43526: OR
43527: IFFALSE 43531
// exit ;
43529: GO 43847
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43531: LD_ADDR_VAR 0 6
43535: PUSH
43536: LD_INT 22
43538: PUSH
43539: LD_VAR 0 1
43543: PPUSH
43544: CALL_OW 255
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 2
43555: PUSH
43556: LD_INT 30
43558: PUSH
43559: LD_INT 36
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 34
43568: PUSH
43569: LD_INT 31
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: LIST
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PPUSH
43585: CALL_OW 69
43589: ST_TO_ADDR
// if not tmp then
43590: LD_VAR 0 6
43594: NOT
43595: IFFALSE 43599
// exit ;
43597: GO 43847
// result := [ ] ;
43599: LD_ADDR_VAR 0 2
43603: PUSH
43604: EMPTY
43605: ST_TO_ADDR
// for i in tmp do
43606: LD_ADDR_VAR 0 3
43610: PUSH
43611: LD_VAR 0 6
43615: PUSH
43616: FOR_IN
43617: IFFALSE 43688
// begin t := UnitsInside ( i ) ;
43619: LD_ADDR_VAR 0 4
43623: PUSH
43624: LD_VAR 0 3
43628: PPUSH
43629: CALL_OW 313
43633: ST_TO_ADDR
// if t then
43634: LD_VAR 0 4
43638: IFFALSE 43686
// for j in t do
43640: LD_ADDR_VAR 0 7
43644: PUSH
43645: LD_VAR 0 4
43649: PUSH
43650: FOR_IN
43651: IFFALSE 43684
// result := Replace ( result , result + 1 , j ) ;
43653: LD_ADDR_VAR 0 2
43657: PUSH
43658: LD_VAR 0 2
43662: PPUSH
43663: LD_VAR 0 2
43667: PUSH
43668: LD_INT 1
43670: PLUS
43671: PPUSH
43672: LD_VAR 0 7
43676: PPUSH
43677: CALL_OW 1
43681: ST_TO_ADDR
43682: GO 43650
43684: POP
43685: POP
// end ;
43686: GO 43616
43688: POP
43689: POP
// if not result then
43690: LD_VAR 0 2
43694: NOT
43695: IFFALSE 43699
// exit ;
43697: GO 43847
// mech := result [ 1 ] ;
43699: LD_ADDR_VAR 0 5
43703: PUSH
43704: LD_VAR 0 2
43708: PUSH
43709: LD_INT 1
43711: ARRAY
43712: ST_TO_ADDR
// if result > 1 then
43713: LD_VAR 0 2
43717: PUSH
43718: LD_INT 1
43720: GREATER
43721: IFFALSE 43833
// begin for i = 2 to result do
43723: LD_ADDR_VAR 0 3
43727: PUSH
43728: DOUBLE
43729: LD_INT 2
43731: DEC
43732: ST_TO_ADDR
43733: LD_VAR 0 2
43737: PUSH
43738: FOR_TO
43739: IFFALSE 43831
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43741: LD_ADDR_VAR 0 4
43745: PUSH
43746: LD_VAR 0 2
43750: PUSH
43751: LD_VAR 0 3
43755: ARRAY
43756: PPUSH
43757: LD_INT 3
43759: PPUSH
43760: CALL_OW 259
43764: PUSH
43765: LD_VAR 0 2
43769: PUSH
43770: LD_VAR 0 3
43774: ARRAY
43775: PPUSH
43776: CALL_OW 432
43780: MINUS
43781: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43782: LD_VAR 0 4
43786: PUSH
43787: LD_VAR 0 5
43791: PPUSH
43792: LD_INT 3
43794: PPUSH
43795: CALL_OW 259
43799: PUSH
43800: LD_VAR 0 5
43804: PPUSH
43805: CALL_OW 432
43809: MINUS
43810: GREATEREQUAL
43811: IFFALSE 43829
// mech := result [ i ] ;
43813: LD_ADDR_VAR 0 5
43817: PUSH
43818: LD_VAR 0 2
43822: PUSH
43823: LD_VAR 0 3
43827: ARRAY
43828: ST_TO_ADDR
// end ;
43829: GO 43738
43831: POP
43832: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43833: LD_VAR 0 1
43837: PPUSH
43838: LD_VAR 0 5
43842: PPUSH
43843: CALL_OW 135
// end ;
43847: LD_VAR 0 2
43851: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43852: LD_INT 0
43854: PPUSH
43855: PPUSH
43856: PPUSH
43857: PPUSH
43858: PPUSH
43859: PPUSH
43860: PPUSH
43861: PPUSH
43862: PPUSH
43863: PPUSH
43864: PPUSH
43865: PPUSH
43866: PPUSH
// result := [ ] ;
43867: LD_ADDR_VAR 0 7
43871: PUSH
43872: EMPTY
43873: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43874: LD_VAR 0 1
43878: PPUSH
43879: CALL_OW 266
43883: PUSH
43884: LD_INT 0
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: IN
43894: NOT
43895: IFFALSE 43899
// exit ;
43897: GO 45533
// if name then
43899: LD_VAR 0 3
43903: IFFALSE 43919
// SetBName ( base_dep , name ) ;
43905: LD_VAR 0 1
43909: PPUSH
43910: LD_VAR 0 3
43914: PPUSH
43915: CALL_OW 500
// base := GetBase ( base_dep ) ;
43919: LD_ADDR_VAR 0 15
43923: PUSH
43924: LD_VAR 0 1
43928: PPUSH
43929: CALL_OW 274
43933: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43934: LD_ADDR_VAR 0 16
43938: PUSH
43939: LD_VAR 0 1
43943: PPUSH
43944: CALL_OW 255
43948: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43949: LD_ADDR_VAR 0 17
43953: PUSH
43954: LD_VAR 0 1
43958: PPUSH
43959: CALL_OW 248
43963: ST_TO_ADDR
// if sources then
43964: LD_VAR 0 5
43968: IFFALSE 44015
// for i = 1 to 3 do
43970: LD_ADDR_VAR 0 8
43974: PUSH
43975: DOUBLE
43976: LD_INT 1
43978: DEC
43979: ST_TO_ADDR
43980: LD_INT 3
43982: PUSH
43983: FOR_TO
43984: IFFALSE 44013
// AddResourceType ( base , i , sources [ i ] ) ;
43986: LD_VAR 0 15
43990: PPUSH
43991: LD_VAR 0 8
43995: PPUSH
43996: LD_VAR 0 5
44000: PUSH
44001: LD_VAR 0 8
44005: ARRAY
44006: PPUSH
44007: CALL_OW 276
44011: GO 43983
44013: POP
44014: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
44015: LD_ADDR_VAR 0 18
44019: PUSH
44020: LD_VAR 0 15
44024: PPUSH
44025: LD_VAR 0 2
44029: PPUSH
44030: LD_INT 1
44032: PPUSH
44033: CALL 43276 0 3
44037: ST_TO_ADDR
// InitHc ;
44038: CALL_OW 19
// InitUc ;
44042: CALL_OW 18
// uc_side := side ;
44046: LD_ADDR_OWVAR 20
44050: PUSH
44051: LD_VAR 0 16
44055: ST_TO_ADDR
// uc_nation := nation ;
44056: LD_ADDR_OWVAR 21
44060: PUSH
44061: LD_VAR 0 17
44065: ST_TO_ADDR
// if buildings then
44066: LD_VAR 0 18
44070: IFFALSE 45392
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44072: LD_ADDR_VAR 0 19
44076: PUSH
44077: LD_VAR 0 18
44081: PPUSH
44082: LD_INT 2
44084: PUSH
44085: LD_INT 30
44087: PUSH
44088: LD_INT 29
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 30
44097: PUSH
44098: LD_INT 30
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: EMPTY
44106: LIST
44107: LIST
44108: LIST
44109: PPUSH
44110: CALL_OW 72
44114: ST_TO_ADDR
// if tmp then
44115: LD_VAR 0 19
44119: IFFALSE 44167
// for i in tmp do
44121: LD_ADDR_VAR 0 8
44125: PUSH
44126: LD_VAR 0 19
44130: PUSH
44131: FOR_IN
44132: IFFALSE 44165
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44134: LD_VAR 0 8
44138: PPUSH
44139: CALL_OW 250
44143: PPUSH
44144: LD_VAR 0 8
44148: PPUSH
44149: CALL_OW 251
44153: PPUSH
44154: LD_VAR 0 16
44158: PPUSH
44159: CALL_OW 441
44163: GO 44131
44165: POP
44166: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44167: LD_VAR 0 18
44171: PPUSH
44172: LD_INT 2
44174: PUSH
44175: LD_INT 30
44177: PUSH
44178: LD_INT 32
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 30
44187: PUSH
44188: LD_INT 33
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: LIST
44199: PPUSH
44200: CALL_OW 72
44204: IFFALSE 44292
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44206: LD_ADDR_VAR 0 8
44210: PUSH
44211: LD_VAR 0 18
44215: PPUSH
44216: LD_INT 2
44218: PUSH
44219: LD_INT 30
44221: PUSH
44222: LD_INT 32
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 30
44231: PUSH
44232: LD_INT 33
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: LIST
44243: PPUSH
44244: CALL_OW 72
44248: PUSH
44249: FOR_IN
44250: IFFALSE 44290
// begin if not GetBWeapon ( i ) then
44252: LD_VAR 0 8
44256: PPUSH
44257: CALL_OW 269
44261: NOT
44262: IFFALSE 44288
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44264: LD_VAR 0 8
44268: PPUSH
44269: LD_VAR 0 8
44273: PPUSH
44274: LD_VAR 0 2
44278: PPUSH
44279: CALL 45538 0 2
44283: PPUSH
44284: CALL_OW 431
// end ;
44288: GO 44249
44290: POP
44291: POP
// end ; for i = 1 to personel do
44292: LD_ADDR_VAR 0 8
44296: PUSH
44297: DOUBLE
44298: LD_INT 1
44300: DEC
44301: ST_TO_ADDR
44302: LD_VAR 0 6
44306: PUSH
44307: FOR_TO
44308: IFFALSE 45372
// begin if i > 4 then
44310: LD_VAR 0 8
44314: PUSH
44315: LD_INT 4
44317: GREATER
44318: IFFALSE 44322
// break ;
44320: GO 45372
// case i of 1 :
44322: LD_VAR 0 8
44326: PUSH
44327: LD_INT 1
44329: DOUBLE
44330: EQUAL
44331: IFTRUE 44335
44333: GO 44415
44335: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44336: LD_ADDR_VAR 0 12
44340: PUSH
44341: LD_VAR 0 18
44345: PPUSH
44346: LD_INT 22
44348: PUSH
44349: LD_VAR 0 16
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 58
44360: PUSH
44361: EMPTY
44362: LIST
44363: PUSH
44364: LD_INT 2
44366: PUSH
44367: LD_INT 30
44369: PUSH
44370: LD_INT 32
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 30
44379: PUSH
44380: LD_INT 4
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 30
44389: PUSH
44390: LD_INT 5
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: LIST
44407: PPUSH
44408: CALL_OW 72
44412: ST_TO_ADDR
44413: GO 44637
44415: LD_INT 2
44417: DOUBLE
44418: EQUAL
44419: IFTRUE 44423
44421: GO 44485
44423: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44424: LD_ADDR_VAR 0 12
44428: PUSH
44429: LD_VAR 0 18
44433: PPUSH
44434: LD_INT 22
44436: PUSH
44437: LD_VAR 0 16
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 2
44448: PUSH
44449: LD_INT 30
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 30
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: LIST
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PPUSH
44478: CALL_OW 72
44482: ST_TO_ADDR
44483: GO 44637
44485: LD_INT 3
44487: DOUBLE
44488: EQUAL
44489: IFTRUE 44493
44491: GO 44555
44493: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44494: LD_ADDR_VAR 0 12
44498: PUSH
44499: LD_VAR 0 18
44503: PPUSH
44504: LD_INT 22
44506: PUSH
44507: LD_VAR 0 16
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 2
44518: PUSH
44519: LD_INT 30
44521: PUSH
44522: LD_INT 2
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 30
44531: PUSH
44532: LD_INT 3
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: LIST
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PPUSH
44548: CALL_OW 72
44552: ST_TO_ADDR
44553: GO 44637
44555: LD_INT 4
44557: DOUBLE
44558: EQUAL
44559: IFTRUE 44563
44561: GO 44636
44563: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44564: LD_ADDR_VAR 0 12
44568: PUSH
44569: LD_VAR 0 18
44573: PPUSH
44574: LD_INT 22
44576: PUSH
44577: LD_VAR 0 16
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 2
44588: PUSH
44589: LD_INT 30
44591: PUSH
44592: LD_INT 6
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: LD_INT 30
44601: PUSH
44602: LD_INT 7
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 30
44611: PUSH
44612: LD_INT 8
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PPUSH
44629: CALL_OW 72
44633: ST_TO_ADDR
44634: GO 44637
44636: POP
// if i = 1 then
44637: LD_VAR 0 8
44641: PUSH
44642: LD_INT 1
44644: EQUAL
44645: IFFALSE 44756
// begin tmp := [ ] ;
44647: LD_ADDR_VAR 0 19
44651: PUSH
44652: EMPTY
44653: ST_TO_ADDR
// for j in f do
44654: LD_ADDR_VAR 0 9
44658: PUSH
44659: LD_VAR 0 12
44663: PUSH
44664: FOR_IN
44665: IFFALSE 44738
// if GetBType ( j ) = b_bunker then
44667: LD_VAR 0 9
44671: PPUSH
44672: CALL_OW 266
44676: PUSH
44677: LD_INT 32
44679: EQUAL
44680: IFFALSE 44707
// tmp := Insert ( tmp , 1 , j ) else
44682: LD_ADDR_VAR 0 19
44686: PUSH
44687: LD_VAR 0 19
44691: PPUSH
44692: LD_INT 1
44694: PPUSH
44695: LD_VAR 0 9
44699: PPUSH
44700: CALL_OW 2
44704: ST_TO_ADDR
44705: GO 44736
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44707: LD_ADDR_VAR 0 19
44711: PUSH
44712: LD_VAR 0 19
44716: PPUSH
44717: LD_VAR 0 19
44721: PUSH
44722: LD_INT 1
44724: PLUS
44725: PPUSH
44726: LD_VAR 0 9
44730: PPUSH
44731: CALL_OW 2
44735: ST_TO_ADDR
44736: GO 44664
44738: POP
44739: POP
// if tmp then
44740: LD_VAR 0 19
44744: IFFALSE 44756
// f := tmp ;
44746: LD_ADDR_VAR 0 12
44750: PUSH
44751: LD_VAR 0 19
44755: ST_TO_ADDR
// end ; x := personel [ i ] ;
44756: LD_ADDR_VAR 0 13
44760: PUSH
44761: LD_VAR 0 6
44765: PUSH
44766: LD_VAR 0 8
44770: ARRAY
44771: ST_TO_ADDR
// if x = - 1 then
44772: LD_VAR 0 13
44776: PUSH
44777: LD_INT 1
44779: NEG
44780: EQUAL
44781: IFFALSE 44990
// begin for j in f do
44783: LD_ADDR_VAR 0 9
44787: PUSH
44788: LD_VAR 0 12
44792: PUSH
44793: FOR_IN
44794: IFFALSE 44986
// repeat InitHc ;
44796: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44800: LD_VAR 0 9
44804: PPUSH
44805: CALL_OW 266
44809: PUSH
44810: LD_INT 5
44812: EQUAL
44813: IFFALSE 44883
// begin if UnitsInside ( j ) < 3 then
44815: LD_VAR 0 9
44819: PPUSH
44820: CALL_OW 313
44824: PUSH
44825: LD_INT 3
44827: LESS
44828: IFFALSE 44864
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44830: LD_INT 0
44832: PPUSH
44833: LD_INT 5
44835: PUSH
44836: LD_INT 8
44838: PUSH
44839: LD_INT 9
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: LIST
44846: PUSH
44847: LD_VAR 0 17
44851: ARRAY
44852: PPUSH
44853: LD_VAR 0 4
44857: PPUSH
44858: CALL_OW 380
44862: GO 44881
// PrepareHuman ( false , i , skill ) ;
44864: LD_INT 0
44866: PPUSH
44867: LD_VAR 0 8
44871: PPUSH
44872: LD_VAR 0 4
44876: PPUSH
44877: CALL_OW 380
// end else
44881: GO 44900
// PrepareHuman ( false , i , skill ) ;
44883: LD_INT 0
44885: PPUSH
44886: LD_VAR 0 8
44890: PPUSH
44891: LD_VAR 0 4
44895: PPUSH
44896: CALL_OW 380
// un := CreateHuman ;
44900: LD_ADDR_VAR 0 14
44904: PUSH
44905: CALL_OW 44
44909: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44910: LD_ADDR_VAR 0 7
44914: PUSH
44915: LD_VAR 0 7
44919: PPUSH
44920: LD_INT 1
44922: PPUSH
44923: LD_VAR 0 14
44927: PPUSH
44928: CALL_OW 2
44932: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44933: LD_VAR 0 14
44937: PPUSH
44938: LD_VAR 0 9
44942: PPUSH
44943: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44947: LD_VAR 0 9
44951: PPUSH
44952: CALL_OW 313
44956: PUSH
44957: LD_INT 6
44959: EQUAL
44960: PUSH
44961: LD_VAR 0 9
44965: PPUSH
44966: CALL_OW 266
44970: PUSH
44971: LD_INT 32
44973: PUSH
44974: LD_INT 31
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: IN
44981: OR
44982: IFFALSE 44796
44984: GO 44793
44986: POP
44987: POP
// end else
44988: GO 45370
// for j = 1 to x do
44990: LD_ADDR_VAR 0 9
44994: PUSH
44995: DOUBLE
44996: LD_INT 1
44998: DEC
44999: ST_TO_ADDR
45000: LD_VAR 0 13
45004: PUSH
45005: FOR_TO
45006: IFFALSE 45368
// begin InitHc ;
45008: CALL_OW 19
// if not f then
45012: LD_VAR 0 12
45016: NOT
45017: IFFALSE 45106
// begin PrepareHuman ( false , i , skill ) ;
45019: LD_INT 0
45021: PPUSH
45022: LD_VAR 0 8
45026: PPUSH
45027: LD_VAR 0 4
45031: PPUSH
45032: CALL_OW 380
// un := CreateHuman ;
45036: LD_ADDR_VAR 0 14
45040: PUSH
45041: CALL_OW 44
45045: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45046: LD_ADDR_VAR 0 7
45050: PUSH
45051: LD_VAR 0 7
45055: PPUSH
45056: LD_INT 1
45058: PPUSH
45059: LD_VAR 0 14
45063: PPUSH
45064: CALL_OW 2
45068: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45069: LD_VAR 0 14
45073: PPUSH
45074: LD_VAR 0 1
45078: PPUSH
45079: CALL_OW 250
45083: PPUSH
45084: LD_VAR 0 1
45088: PPUSH
45089: CALL_OW 251
45093: PPUSH
45094: LD_INT 10
45096: PPUSH
45097: LD_INT 0
45099: PPUSH
45100: CALL_OW 50
// continue ;
45104: GO 45005
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45106: LD_VAR 0 12
45110: PUSH
45111: LD_INT 1
45113: ARRAY
45114: PPUSH
45115: CALL_OW 313
45119: PUSH
45120: LD_VAR 0 12
45124: PUSH
45125: LD_INT 1
45127: ARRAY
45128: PPUSH
45129: CALL_OW 266
45133: PUSH
45134: LD_INT 32
45136: PUSH
45137: LD_INT 31
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: IN
45144: AND
45145: PUSH
45146: LD_VAR 0 12
45150: PUSH
45151: LD_INT 1
45153: ARRAY
45154: PPUSH
45155: CALL_OW 313
45159: PUSH
45160: LD_INT 6
45162: EQUAL
45163: OR
45164: IFFALSE 45184
// f := Delete ( f , 1 ) ;
45166: LD_ADDR_VAR 0 12
45170: PUSH
45171: LD_VAR 0 12
45175: PPUSH
45176: LD_INT 1
45178: PPUSH
45179: CALL_OW 3
45183: ST_TO_ADDR
// if not f then
45184: LD_VAR 0 12
45188: NOT
45189: IFFALSE 45207
// begin x := x + 2 ;
45191: LD_ADDR_VAR 0 13
45195: PUSH
45196: LD_VAR 0 13
45200: PUSH
45201: LD_INT 2
45203: PLUS
45204: ST_TO_ADDR
// continue ;
45205: GO 45005
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45207: LD_VAR 0 12
45211: PUSH
45212: LD_INT 1
45214: ARRAY
45215: PPUSH
45216: CALL_OW 266
45220: PUSH
45221: LD_INT 5
45223: EQUAL
45224: IFFALSE 45298
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45226: LD_VAR 0 12
45230: PUSH
45231: LD_INT 1
45233: ARRAY
45234: PPUSH
45235: CALL_OW 313
45239: PUSH
45240: LD_INT 3
45242: LESS
45243: IFFALSE 45279
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45245: LD_INT 0
45247: PPUSH
45248: LD_INT 5
45250: PUSH
45251: LD_INT 8
45253: PUSH
45254: LD_INT 9
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: LIST
45261: PUSH
45262: LD_VAR 0 17
45266: ARRAY
45267: PPUSH
45268: LD_VAR 0 4
45272: PPUSH
45273: CALL_OW 380
45277: GO 45296
// PrepareHuman ( false , i , skill ) ;
45279: LD_INT 0
45281: PPUSH
45282: LD_VAR 0 8
45286: PPUSH
45287: LD_VAR 0 4
45291: PPUSH
45292: CALL_OW 380
// end else
45296: GO 45315
// PrepareHuman ( false , i , skill ) ;
45298: LD_INT 0
45300: PPUSH
45301: LD_VAR 0 8
45305: PPUSH
45306: LD_VAR 0 4
45310: PPUSH
45311: CALL_OW 380
// un := CreateHuman ;
45315: LD_ADDR_VAR 0 14
45319: PUSH
45320: CALL_OW 44
45324: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45325: LD_ADDR_VAR 0 7
45329: PUSH
45330: LD_VAR 0 7
45334: PPUSH
45335: LD_INT 1
45337: PPUSH
45338: LD_VAR 0 14
45342: PPUSH
45343: CALL_OW 2
45347: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45348: LD_VAR 0 14
45352: PPUSH
45353: LD_VAR 0 12
45357: PUSH
45358: LD_INT 1
45360: ARRAY
45361: PPUSH
45362: CALL_OW 52
// end ;
45366: GO 45005
45368: POP
45369: POP
// end ;
45370: GO 44307
45372: POP
45373: POP
// result := result ^ buildings ;
45374: LD_ADDR_VAR 0 7
45378: PUSH
45379: LD_VAR 0 7
45383: PUSH
45384: LD_VAR 0 18
45388: ADD
45389: ST_TO_ADDR
// end else
45390: GO 45533
// begin for i = 1 to personel do
45392: LD_ADDR_VAR 0 8
45396: PUSH
45397: DOUBLE
45398: LD_INT 1
45400: DEC
45401: ST_TO_ADDR
45402: LD_VAR 0 6
45406: PUSH
45407: FOR_TO
45408: IFFALSE 45531
// begin if i > 4 then
45410: LD_VAR 0 8
45414: PUSH
45415: LD_INT 4
45417: GREATER
45418: IFFALSE 45422
// break ;
45420: GO 45531
// x := personel [ i ] ;
45422: LD_ADDR_VAR 0 13
45426: PUSH
45427: LD_VAR 0 6
45431: PUSH
45432: LD_VAR 0 8
45436: ARRAY
45437: ST_TO_ADDR
// if x = - 1 then
45438: LD_VAR 0 13
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: EQUAL
45447: IFFALSE 45451
// continue ;
45449: GO 45407
// PrepareHuman ( false , i , skill ) ;
45451: LD_INT 0
45453: PPUSH
45454: LD_VAR 0 8
45458: PPUSH
45459: LD_VAR 0 4
45463: PPUSH
45464: CALL_OW 380
// un := CreateHuman ;
45468: LD_ADDR_VAR 0 14
45472: PUSH
45473: CALL_OW 44
45477: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45478: LD_VAR 0 14
45482: PPUSH
45483: LD_VAR 0 1
45487: PPUSH
45488: CALL_OW 250
45492: PPUSH
45493: LD_VAR 0 1
45497: PPUSH
45498: CALL_OW 251
45502: PPUSH
45503: LD_INT 10
45505: PPUSH
45506: LD_INT 0
45508: PPUSH
45509: CALL_OW 50
// result := result ^ un ;
45513: LD_ADDR_VAR 0 7
45517: PUSH
45518: LD_VAR 0 7
45522: PUSH
45523: LD_VAR 0 14
45527: ADD
45528: ST_TO_ADDR
// end ;
45529: GO 45407
45531: POP
45532: POP
// end ; end ;
45533: LD_VAR 0 7
45537: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45538: LD_INT 0
45540: PPUSH
45541: PPUSH
45542: PPUSH
45543: PPUSH
45544: PPUSH
45545: PPUSH
45546: PPUSH
45547: PPUSH
45548: PPUSH
45549: PPUSH
45550: PPUSH
45551: PPUSH
45552: PPUSH
45553: PPUSH
45554: PPUSH
45555: PPUSH
// result := false ;
45556: LD_ADDR_VAR 0 3
45560: PUSH
45561: LD_INT 0
45563: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45564: LD_VAR 0 1
45568: NOT
45569: PUSH
45570: LD_VAR 0 1
45574: PPUSH
45575: CALL_OW 266
45579: PUSH
45580: LD_INT 32
45582: PUSH
45583: LD_INT 33
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: IN
45590: NOT
45591: OR
45592: IFFALSE 45596
// exit ;
45594: GO 46705
// nat := GetNation ( tower ) ;
45596: LD_ADDR_VAR 0 12
45600: PUSH
45601: LD_VAR 0 1
45605: PPUSH
45606: CALL_OW 248
45610: ST_TO_ADDR
// side := GetSide ( tower ) ;
45611: LD_ADDR_VAR 0 16
45615: PUSH
45616: LD_VAR 0 1
45620: PPUSH
45621: CALL_OW 255
45625: ST_TO_ADDR
// x := GetX ( tower ) ;
45626: LD_ADDR_VAR 0 10
45630: PUSH
45631: LD_VAR 0 1
45635: PPUSH
45636: CALL_OW 250
45640: ST_TO_ADDR
// y := GetY ( tower ) ;
45641: LD_ADDR_VAR 0 11
45645: PUSH
45646: LD_VAR 0 1
45650: PPUSH
45651: CALL_OW 251
45655: ST_TO_ADDR
// if not x or not y then
45656: LD_VAR 0 10
45660: NOT
45661: PUSH
45662: LD_VAR 0 11
45666: NOT
45667: OR
45668: IFFALSE 45672
// exit ;
45670: GO 46705
// weapon := 0 ;
45672: LD_ADDR_VAR 0 18
45676: PUSH
45677: LD_INT 0
45679: ST_TO_ADDR
// fac_list := [ ] ;
45680: LD_ADDR_VAR 0 17
45684: PUSH
45685: EMPTY
45686: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45687: LD_ADDR_VAR 0 6
45691: PUSH
45692: LD_VAR 0 1
45696: PPUSH
45697: CALL_OW 274
45701: PPUSH
45702: LD_VAR 0 2
45706: PPUSH
45707: LD_INT 0
45709: PPUSH
45710: CALL 43276 0 3
45714: PPUSH
45715: LD_INT 30
45717: PUSH
45718: LD_INT 3
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PPUSH
45725: CALL_OW 72
45729: ST_TO_ADDR
// if not factories then
45730: LD_VAR 0 6
45734: NOT
45735: IFFALSE 45739
// exit ;
45737: GO 46705
// for i in factories do
45739: LD_ADDR_VAR 0 8
45743: PUSH
45744: LD_VAR 0 6
45748: PUSH
45749: FOR_IN
45750: IFFALSE 45775
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45752: LD_ADDR_VAR 0 17
45756: PUSH
45757: LD_VAR 0 17
45761: PUSH
45762: LD_VAR 0 8
45766: PPUSH
45767: CALL_OW 478
45771: UNION
45772: ST_TO_ADDR
45773: GO 45749
45775: POP
45776: POP
// if not fac_list then
45777: LD_VAR 0 17
45781: NOT
45782: IFFALSE 45786
// exit ;
45784: GO 46705
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45786: LD_ADDR_VAR 0 5
45790: PUSH
45791: LD_INT 4
45793: PUSH
45794: LD_INT 5
45796: PUSH
45797: LD_INT 9
45799: PUSH
45800: LD_INT 10
45802: PUSH
45803: LD_INT 6
45805: PUSH
45806: LD_INT 7
45808: PUSH
45809: LD_INT 11
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 27
45823: PUSH
45824: LD_INT 28
45826: PUSH
45827: LD_INT 26
45829: PUSH
45830: LD_INT 30
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 43
45841: PUSH
45842: LD_INT 44
45844: PUSH
45845: LD_INT 46
45847: PUSH
45848: LD_INT 45
45850: PUSH
45851: LD_INT 47
45853: PUSH
45854: LD_INT 49
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: LIST
45869: PUSH
45870: LD_VAR 0 12
45874: ARRAY
45875: ST_TO_ADDR
// list := list isect fac_list ;
45876: LD_ADDR_VAR 0 5
45880: PUSH
45881: LD_VAR 0 5
45885: PUSH
45886: LD_VAR 0 17
45890: ISECT
45891: ST_TO_ADDR
// if not list then
45892: LD_VAR 0 5
45896: NOT
45897: IFFALSE 45901
// exit ;
45899: GO 46705
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45901: LD_VAR 0 12
45905: PUSH
45906: LD_INT 3
45908: EQUAL
45909: PUSH
45910: LD_INT 49
45912: PUSH
45913: LD_VAR 0 5
45917: IN
45918: AND
45919: PUSH
45920: LD_INT 31
45922: PPUSH
45923: LD_VAR 0 16
45927: PPUSH
45928: CALL_OW 321
45932: PUSH
45933: LD_INT 2
45935: EQUAL
45936: AND
45937: IFFALSE 45997
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45939: LD_INT 22
45941: PUSH
45942: LD_VAR 0 16
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 35
45953: PUSH
45954: LD_INT 49
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 91
45963: PUSH
45964: LD_VAR 0 1
45968: PUSH
45969: LD_INT 10
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: LIST
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: LIST
45981: PPUSH
45982: CALL_OW 69
45986: NOT
45987: IFFALSE 45997
// weapon := ru_time_lapser ;
45989: LD_ADDR_VAR 0 18
45993: PUSH
45994: LD_INT 49
45996: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45997: LD_VAR 0 12
46001: PUSH
46002: LD_INT 1
46004: PUSH
46005: LD_INT 2
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: IN
46012: PUSH
46013: LD_INT 11
46015: PUSH
46016: LD_VAR 0 5
46020: IN
46021: PUSH
46022: LD_INT 30
46024: PUSH
46025: LD_VAR 0 5
46029: IN
46030: OR
46031: AND
46032: PUSH
46033: LD_INT 6
46035: PPUSH
46036: LD_VAR 0 16
46040: PPUSH
46041: CALL_OW 321
46045: PUSH
46046: LD_INT 2
46048: EQUAL
46049: AND
46050: IFFALSE 46215
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46052: LD_INT 22
46054: PUSH
46055: LD_VAR 0 16
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 2
46066: PUSH
46067: LD_INT 35
46069: PUSH
46070: LD_INT 11
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 35
46079: PUSH
46080: LD_INT 30
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 91
46094: PUSH
46095: LD_VAR 0 1
46099: PUSH
46100: LD_INT 18
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: LIST
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: LIST
46112: PPUSH
46113: CALL_OW 69
46117: NOT
46118: PUSH
46119: LD_INT 22
46121: PUSH
46122: LD_VAR 0 16
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 2
46133: PUSH
46134: LD_INT 30
46136: PUSH
46137: LD_INT 32
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 30
46146: PUSH
46147: LD_INT 33
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 91
46161: PUSH
46162: LD_VAR 0 1
46166: PUSH
46167: LD_INT 12
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: LIST
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: LIST
46179: PUSH
46180: EMPTY
46181: LIST
46182: PPUSH
46183: CALL_OW 69
46187: PUSH
46188: LD_INT 2
46190: GREATER
46191: AND
46192: IFFALSE 46215
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46194: LD_ADDR_VAR 0 18
46198: PUSH
46199: LD_INT 11
46201: PUSH
46202: LD_INT 30
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_VAR 0 12
46213: ARRAY
46214: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46215: LD_VAR 0 18
46219: NOT
46220: PUSH
46221: LD_INT 40
46223: PPUSH
46224: LD_VAR 0 16
46228: PPUSH
46229: CALL_OW 321
46233: PUSH
46234: LD_INT 2
46236: EQUAL
46237: AND
46238: PUSH
46239: LD_INT 7
46241: PUSH
46242: LD_VAR 0 5
46246: IN
46247: PUSH
46248: LD_INT 28
46250: PUSH
46251: LD_VAR 0 5
46255: IN
46256: OR
46257: PUSH
46258: LD_INT 45
46260: PUSH
46261: LD_VAR 0 5
46265: IN
46266: OR
46267: AND
46268: IFFALSE 46522
// begin hex := GetHexInfo ( x , y ) ;
46270: LD_ADDR_VAR 0 4
46274: PUSH
46275: LD_VAR 0 10
46279: PPUSH
46280: LD_VAR 0 11
46284: PPUSH
46285: CALL_OW 546
46289: ST_TO_ADDR
// if hex [ 1 ] then
46290: LD_VAR 0 4
46294: PUSH
46295: LD_INT 1
46297: ARRAY
46298: IFFALSE 46302
// exit ;
46300: GO 46705
// height := hex [ 2 ] ;
46302: LD_ADDR_VAR 0 15
46306: PUSH
46307: LD_VAR 0 4
46311: PUSH
46312: LD_INT 2
46314: ARRAY
46315: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46316: LD_ADDR_VAR 0 14
46320: PUSH
46321: LD_INT 0
46323: PUSH
46324: LD_INT 2
46326: PUSH
46327: LD_INT 3
46329: PUSH
46330: LD_INT 5
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: ST_TO_ADDR
// for i in tmp do
46339: LD_ADDR_VAR 0 8
46343: PUSH
46344: LD_VAR 0 14
46348: PUSH
46349: FOR_IN
46350: IFFALSE 46520
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46352: LD_ADDR_VAR 0 9
46356: PUSH
46357: LD_VAR 0 10
46361: PPUSH
46362: LD_VAR 0 8
46366: PPUSH
46367: LD_INT 5
46369: PPUSH
46370: CALL_OW 272
46374: PUSH
46375: LD_VAR 0 11
46379: PPUSH
46380: LD_VAR 0 8
46384: PPUSH
46385: LD_INT 5
46387: PPUSH
46388: CALL_OW 273
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46397: LD_VAR 0 9
46401: PUSH
46402: LD_INT 1
46404: ARRAY
46405: PPUSH
46406: LD_VAR 0 9
46410: PUSH
46411: LD_INT 2
46413: ARRAY
46414: PPUSH
46415: CALL_OW 488
46419: IFFALSE 46518
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46421: LD_ADDR_VAR 0 4
46425: PUSH
46426: LD_VAR 0 9
46430: PUSH
46431: LD_INT 1
46433: ARRAY
46434: PPUSH
46435: LD_VAR 0 9
46439: PUSH
46440: LD_INT 2
46442: ARRAY
46443: PPUSH
46444: CALL_OW 546
46448: ST_TO_ADDR
// if hex [ 1 ] then
46449: LD_VAR 0 4
46453: PUSH
46454: LD_INT 1
46456: ARRAY
46457: IFFALSE 46461
// continue ;
46459: GO 46349
// h := hex [ 2 ] ;
46461: LD_ADDR_VAR 0 13
46465: PUSH
46466: LD_VAR 0 4
46470: PUSH
46471: LD_INT 2
46473: ARRAY
46474: ST_TO_ADDR
// if h + 7 < height then
46475: LD_VAR 0 13
46479: PUSH
46480: LD_INT 7
46482: PLUS
46483: PUSH
46484: LD_VAR 0 15
46488: LESS
46489: IFFALSE 46518
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46491: LD_ADDR_VAR 0 18
46495: PUSH
46496: LD_INT 7
46498: PUSH
46499: LD_INT 28
46501: PUSH
46502: LD_INT 45
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: LIST
46509: PUSH
46510: LD_VAR 0 12
46514: ARRAY
46515: ST_TO_ADDR
// break ;
46516: GO 46520
// end ; end ; end ;
46518: GO 46349
46520: POP
46521: POP
// end ; if not weapon then
46522: LD_VAR 0 18
46526: NOT
46527: IFFALSE 46587
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46529: LD_ADDR_VAR 0 5
46533: PUSH
46534: LD_VAR 0 5
46538: PUSH
46539: LD_INT 11
46541: PUSH
46542: LD_INT 30
46544: PUSH
46545: LD_INT 49
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: LIST
46552: DIFF
46553: ST_TO_ADDR
// if not list then
46554: LD_VAR 0 5
46558: NOT
46559: IFFALSE 46563
// exit ;
46561: GO 46705
// weapon := list [ rand ( 1 , list ) ] ;
46563: LD_ADDR_VAR 0 18
46567: PUSH
46568: LD_VAR 0 5
46572: PUSH
46573: LD_INT 1
46575: PPUSH
46576: LD_VAR 0 5
46580: PPUSH
46581: CALL_OW 12
46585: ARRAY
46586: ST_TO_ADDR
// end ; if weapon then
46587: LD_VAR 0 18
46591: IFFALSE 46705
// begin tmp := CostOfWeapon ( weapon ) ;
46593: LD_ADDR_VAR 0 14
46597: PUSH
46598: LD_VAR 0 18
46602: PPUSH
46603: CALL_OW 451
46607: ST_TO_ADDR
// j := GetBase ( tower ) ;
46608: LD_ADDR_VAR 0 9
46612: PUSH
46613: LD_VAR 0 1
46617: PPUSH
46618: CALL_OW 274
46622: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46623: LD_VAR 0 9
46627: PPUSH
46628: LD_INT 1
46630: PPUSH
46631: CALL_OW 275
46635: PUSH
46636: LD_VAR 0 14
46640: PUSH
46641: LD_INT 1
46643: ARRAY
46644: GREATEREQUAL
46645: PUSH
46646: LD_VAR 0 9
46650: PPUSH
46651: LD_INT 2
46653: PPUSH
46654: CALL_OW 275
46658: PUSH
46659: LD_VAR 0 14
46663: PUSH
46664: LD_INT 2
46666: ARRAY
46667: GREATEREQUAL
46668: AND
46669: PUSH
46670: LD_VAR 0 9
46674: PPUSH
46675: LD_INT 3
46677: PPUSH
46678: CALL_OW 275
46682: PUSH
46683: LD_VAR 0 14
46687: PUSH
46688: LD_INT 3
46690: ARRAY
46691: GREATEREQUAL
46692: AND
46693: IFFALSE 46705
// result := weapon ;
46695: LD_ADDR_VAR 0 3
46699: PUSH
46700: LD_VAR 0 18
46704: ST_TO_ADDR
// end ; end ;
46705: LD_VAR 0 3
46709: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46710: LD_INT 0
46712: PPUSH
46713: PPUSH
// result := true ;
46714: LD_ADDR_VAR 0 3
46718: PUSH
46719: LD_INT 1
46721: ST_TO_ADDR
// if array1 = array2 then
46722: LD_VAR 0 1
46726: PUSH
46727: LD_VAR 0 2
46731: EQUAL
46732: IFFALSE 46792
// begin for i = 1 to array1 do
46734: LD_ADDR_VAR 0 4
46738: PUSH
46739: DOUBLE
46740: LD_INT 1
46742: DEC
46743: ST_TO_ADDR
46744: LD_VAR 0 1
46748: PUSH
46749: FOR_TO
46750: IFFALSE 46788
// if array1 [ i ] <> array2 [ i ] then
46752: LD_VAR 0 1
46756: PUSH
46757: LD_VAR 0 4
46761: ARRAY
46762: PUSH
46763: LD_VAR 0 2
46767: PUSH
46768: LD_VAR 0 4
46772: ARRAY
46773: NONEQUAL
46774: IFFALSE 46786
// begin result := false ;
46776: LD_ADDR_VAR 0 3
46780: PUSH
46781: LD_INT 0
46783: ST_TO_ADDR
// break ;
46784: GO 46788
// end ;
46786: GO 46749
46788: POP
46789: POP
// end else
46790: GO 46800
// result := false ;
46792: LD_ADDR_VAR 0 3
46796: PUSH
46797: LD_INT 0
46799: ST_TO_ADDR
// end ;
46800: LD_VAR 0 3
46804: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46805: LD_INT 0
46807: PPUSH
46808: PPUSH
// if not array1 or not array2 then
46809: LD_VAR 0 1
46813: NOT
46814: PUSH
46815: LD_VAR 0 2
46819: NOT
46820: OR
46821: IFFALSE 46825
// exit ;
46823: GO 46889
// result := true ;
46825: LD_ADDR_VAR 0 3
46829: PUSH
46830: LD_INT 1
46832: ST_TO_ADDR
// for i = 1 to array1 do
46833: LD_ADDR_VAR 0 4
46837: PUSH
46838: DOUBLE
46839: LD_INT 1
46841: DEC
46842: ST_TO_ADDR
46843: LD_VAR 0 1
46847: PUSH
46848: FOR_TO
46849: IFFALSE 46887
// if array1 [ i ] <> array2 [ i ] then
46851: LD_VAR 0 1
46855: PUSH
46856: LD_VAR 0 4
46860: ARRAY
46861: PUSH
46862: LD_VAR 0 2
46866: PUSH
46867: LD_VAR 0 4
46871: ARRAY
46872: NONEQUAL
46873: IFFALSE 46885
// begin result := false ;
46875: LD_ADDR_VAR 0 3
46879: PUSH
46880: LD_INT 0
46882: ST_TO_ADDR
// break ;
46883: GO 46887
// end ;
46885: GO 46848
46887: POP
46888: POP
// end ;
46889: LD_VAR 0 3
46893: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46894: LD_INT 0
46896: PPUSH
46897: PPUSH
46898: PPUSH
// pom := GetBase ( fac ) ;
46899: LD_ADDR_VAR 0 5
46903: PUSH
46904: LD_VAR 0 1
46908: PPUSH
46909: CALL_OW 274
46913: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46914: LD_ADDR_VAR 0 4
46918: PUSH
46919: LD_VAR 0 2
46923: PUSH
46924: LD_INT 1
46926: ARRAY
46927: PPUSH
46928: LD_VAR 0 2
46932: PUSH
46933: LD_INT 2
46935: ARRAY
46936: PPUSH
46937: LD_VAR 0 2
46941: PUSH
46942: LD_INT 3
46944: ARRAY
46945: PPUSH
46946: LD_VAR 0 2
46950: PUSH
46951: LD_INT 4
46953: ARRAY
46954: PPUSH
46955: CALL_OW 449
46959: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46960: LD_ADDR_VAR 0 3
46964: PUSH
46965: LD_VAR 0 5
46969: PPUSH
46970: LD_INT 1
46972: PPUSH
46973: CALL_OW 275
46977: PUSH
46978: LD_VAR 0 4
46982: PUSH
46983: LD_INT 1
46985: ARRAY
46986: GREATEREQUAL
46987: PUSH
46988: LD_VAR 0 5
46992: PPUSH
46993: LD_INT 2
46995: PPUSH
46996: CALL_OW 275
47000: PUSH
47001: LD_VAR 0 4
47005: PUSH
47006: LD_INT 2
47008: ARRAY
47009: GREATEREQUAL
47010: AND
47011: PUSH
47012: LD_VAR 0 5
47016: PPUSH
47017: LD_INT 3
47019: PPUSH
47020: CALL_OW 275
47024: PUSH
47025: LD_VAR 0 4
47029: PUSH
47030: LD_INT 3
47032: ARRAY
47033: GREATEREQUAL
47034: AND
47035: ST_TO_ADDR
// end ;
47036: LD_VAR 0 3
47040: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47041: LD_INT 0
47043: PPUSH
47044: PPUSH
47045: PPUSH
47046: PPUSH
// pom := GetBase ( building ) ;
47047: LD_ADDR_VAR 0 3
47051: PUSH
47052: LD_VAR 0 1
47056: PPUSH
47057: CALL_OW 274
47061: ST_TO_ADDR
// if not pom then
47062: LD_VAR 0 3
47066: NOT
47067: IFFALSE 47071
// exit ;
47069: GO 47241
// btype := GetBType ( building ) ;
47071: LD_ADDR_VAR 0 5
47075: PUSH
47076: LD_VAR 0 1
47080: PPUSH
47081: CALL_OW 266
47085: ST_TO_ADDR
// if btype = b_armoury then
47086: LD_VAR 0 5
47090: PUSH
47091: LD_INT 4
47093: EQUAL
47094: IFFALSE 47104
// btype := b_barracks ;
47096: LD_ADDR_VAR 0 5
47100: PUSH
47101: LD_INT 5
47103: ST_TO_ADDR
// if btype = b_depot then
47104: LD_VAR 0 5
47108: PUSH
47109: LD_INT 0
47111: EQUAL
47112: IFFALSE 47122
// btype := b_warehouse ;
47114: LD_ADDR_VAR 0 5
47118: PUSH
47119: LD_INT 1
47121: ST_TO_ADDR
// if btype = b_workshop then
47122: LD_VAR 0 5
47126: PUSH
47127: LD_INT 2
47129: EQUAL
47130: IFFALSE 47140
// btype := b_factory ;
47132: LD_ADDR_VAR 0 5
47136: PUSH
47137: LD_INT 3
47139: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47140: LD_ADDR_VAR 0 4
47144: PUSH
47145: LD_VAR 0 5
47149: PPUSH
47150: LD_VAR 0 1
47154: PPUSH
47155: CALL_OW 248
47159: PPUSH
47160: CALL_OW 450
47164: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47165: LD_ADDR_VAR 0 2
47169: PUSH
47170: LD_VAR 0 3
47174: PPUSH
47175: LD_INT 1
47177: PPUSH
47178: CALL_OW 275
47182: PUSH
47183: LD_VAR 0 4
47187: PUSH
47188: LD_INT 1
47190: ARRAY
47191: GREATEREQUAL
47192: PUSH
47193: LD_VAR 0 3
47197: PPUSH
47198: LD_INT 2
47200: PPUSH
47201: CALL_OW 275
47205: PUSH
47206: LD_VAR 0 4
47210: PUSH
47211: LD_INT 2
47213: ARRAY
47214: GREATEREQUAL
47215: AND
47216: PUSH
47217: LD_VAR 0 3
47221: PPUSH
47222: LD_INT 3
47224: PPUSH
47225: CALL_OW 275
47229: PUSH
47230: LD_VAR 0 4
47234: PUSH
47235: LD_INT 3
47237: ARRAY
47238: GREATEREQUAL
47239: AND
47240: ST_TO_ADDR
// end ;
47241: LD_VAR 0 2
47245: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47246: LD_INT 0
47248: PPUSH
47249: PPUSH
47250: PPUSH
// pom := GetBase ( building ) ;
47251: LD_ADDR_VAR 0 4
47255: PUSH
47256: LD_VAR 0 1
47260: PPUSH
47261: CALL_OW 274
47265: ST_TO_ADDR
// if not pom then
47266: LD_VAR 0 4
47270: NOT
47271: IFFALSE 47275
// exit ;
47273: GO 47376
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47275: LD_ADDR_VAR 0 5
47279: PUSH
47280: LD_VAR 0 2
47284: PPUSH
47285: LD_VAR 0 1
47289: PPUSH
47290: CALL_OW 248
47294: PPUSH
47295: CALL_OW 450
47299: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47300: LD_ADDR_VAR 0 3
47304: PUSH
47305: LD_VAR 0 4
47309: PPUSH
47310: LD_INT 1
47312: PPUSH
47313: CALL_OW 275
47317: PUSH
47318: LD_VAR 0 5
47322: PUSH
47323: LD_INT 1
47325: ARRAY
47326: GREATEREQUAL
47327: PUSH
47328: LD_VAR 0 4
47332: PPUSH
47333: LD_INT 2
47335: PPUSH
47336: CALL_OW 275
47340: PUSH
47341: LD_VAR 0 5
47345: PUSH
47346: LD_INT 2
47348: ARRAY
47349: GREATEREQUAL
47350: AND
47351: PUSH
47352: LD_VAR 0 4
47356: PPUSH
47357: LD_INT 3
47359: PPUSH
47360: CALL_OW 275
47364: PUSH
47365: LD_VAR 0 5
47369: PUSH
47370: LD_INT 3
47372: ARRAY
47373: GREATEREQUAL
47374: AND
47375: ST_TO_ADDR
// end ;
47376: LD_VAR 0 3
47380: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47381: LD_INT 0
47383: PPUSH
47384: PPUSH
47385: PPUSH
47386: PPUSH
47387: PPUSH
47388: PPUSH
47389: PPUSH
47390: PPUSH
47391: PPUSH
47392: PPUSH
47393: PPUSH
// result := false ;
47394: LD_ADDR_VAR 0 8
47398: PUSH
47399: LD_INT 0
47401: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47402: LD_VAR 0 5
47406: NOT
47407: PUSH
47408: LD_VAR 0 1
47412: NOT
47413: OR
47414: PUSH
47415: LD_VAR 0 2
47419: NOT
47420: OR
47421: PUSH
47422: LD_VAR 0 3
47426: NOT
47427: OR
47428: IFFALSE 47432
// exit ;
47430: GO 48246
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47432: LD_ADDR_VAR 0 14
47436: PUSH
47437: LD_VAR 0 1
47441: PPUSH
47442: LD_VAR 0 2
47446: PPUSH
47447: LD_VAR 0 3
47451: PPUSH
47452: LD_VAR 0 4
47456: PPUSH
47457: LD_VAR 0 5
47461: PUSH
47462: LD_INT 1
47464: ARRAY
47465: PPUSH
47466: CALL_OW 248
47470: PPUSH
47471: LD_INT 0
47473: PPUSH
47474: CALL 49479 0 6
47478: ST_TO_ADDR
// if not hexes then
47479: LD_VAR 0 14
47483: NOT
47484: IFFALSE 47488
// exit ;
47486: GO 48246
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47488: LD_ADDR_VAR 0 17
47492: PUSH
47493: LD_VAR 0 5
47497: PPUSH
47498: LD_INT 22
47500: PUSH
47501: LD_VAR 0 13
47505: PPUSH
47506: CALL_OW 255
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 2
47517: PUSH
47518: LD_INT 30
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 30
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: LIST
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PPUSH
47547: CALL_OW 72
47551: ST_TO_ADDR
// for i = 1 to hexes do
47552: LD_ADDR_VAR 0 9
47556: PUSH
47557: DOUBLE
47558: LD_INT 1
47560: DEC
47561: ST_TO_ADDR
47562: LD_VAR 0 14
47566: PUSH
47567: FOR_TO
47568: IFFALSE 48244
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47570: LD_ADDR_VAR 0 13
47574: PUSH
47575: LD_VAR 0 14
47579: PUSH
47580: LD_VAR 0 9
47584: ARRAY
47585: PUSH
47586: LD_INT 1
47588: ARRAY
47589: PPUSH
47590: LD_VAR 0 14
47594: PUSH
47595: LD_VAR 0 9
47599: ARRAY
47600: PUSH
47601: LD_INT 2
47603: ARRAY
47604: PPUSH
47605: CALL_OW 428
47609: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47610: LD_VAR 0 14
47614: PUSH
47615: LD_VAR 0 9
47619: ARRAY
47620: PUSH
47621: LD_INT 1
47623: ARRAY
47624: PPUSH
47625: LD_VAR 0 14
47629: PUSH
47630: LD_VAR 0 9
47634: ARRAY
47635: PUSH
47636: LD_INT 2
47638: ARRAY
47639: PPUSH
47640: CALL_OW 351
47644: PUSH
47645: LD_VAR 0 14
47649: PUSH
47650: LD_VAR 0 9
47654: ARRAY
47655: PUSH
47656: LD_INT 1
47658: ARRAY
47659: PPUSH
47660: LD_VAR 0 14
47664: PUSH
47665: LD_VAR 0 9
47669: ARRAY
47670: PUSH
47671: LD_INT 2
47673: ARRAY
47674: PPUSH
47675: CALL_OW 488
47679: NOT
47680: OR
47681: PUSH
47682: LD_VAR 0 13
47686: PPUSH
47687: CALL_OW 247
47691: PUSH
47692: LD_INT 3
47694: EQUAL
47695: OR
47696: IFFALSE 47702
// exit ;
47698: POP
47699: POP
47700: GO 48246
// if not tmp then
47702: LD_VAR 0 13
47706: NOT
47707: IFFALSE 47711
// continue ;
47709: GO 47567
// result := true ;
47711: LD_ADDR_VAR 0 8
47715: PUSH
47716: LD_INT 1
47718: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47719: LD_VAR 0 6
47723: PUSH
47724: LD_VAR 0 13
47728: PPUSH
47729: CALL_OW 247
47733: PUSH
47734: LD_INT 2
47736: EQUAL
47737: AND
47738: PUSH
47739: LD_VAR 0 13
47743: PPUSH
47744: CALL_OW 263
47748: PUSH
47749: LD_INT 1
47751: EQUAL
47752: AND
47753: IFFALSE 47917
// begin if IsDrivenBy ( tmp ) then
47755: LD_VAR 0 13
47759: PPUSH
47760: CALL_OW 311
47764: IFFALSE 47768
// continue ;
47766: GO 47567
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47768: LD_VAR 0 6
47772: PPUSH
47773: LD_INT 3
47775: PUSH
47776: LD_INT 60
47778: PUSH
47779: EMPTY
47780: LIST
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 3
47788: PUSH
47789: LD_INT 55
47791: PUSH
47792: EMPTY
47793: LIST
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PPUSH
47803: CALL_OW 72
47807: IFFALSE 47915
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47809: LD_ADDR_VAR 0 18
47813: PUSH
47814: LD_VAR 0 6
47818: PPUSH
47819: LD_INT 3
47821: PUSH
47822: LD_INT 60
47824: PUSH
47825: EMPTY
47826: LIST
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 3
47834: PUSH
47835: LD_INT 55
47837: PUSH
47838: EMPTY
47839: LIST
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PPUSH
47849: CALL_OW 72
47853: PUSH
47854: LD_INT 1
47856: ARRAY
47857: ST_TO_ADDR
// if IsInUnit ( driver ) then
47858: LD_VAR 0 18
47862: PPUSH
47863: CALL_OW 310
47867: IFFALSE 47878
// ComExit ( driver ) ;
47869: LD_VAR 0 18
47873: PPUSH
47874: CALL 73259 0 1
// AddComEnterUnit ( driver , tmp ) ;
47878: LD_VAR 0 18
47882: PPUSH
47883: LD_VAR 0 13
47887: PPUSH
47888: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47892: LD_VAR 0 18
47896: PPUSH
47897: LD_VAR 0 7
47901: PPUSH
47902: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47906: LD_VAR 0 18
47910: PPUSH
47911: CALL_OW 181
// end ; continue ;
47915: GO 47567
// end ; if not cleaners or not tmp in cleaners then
47917: LD_VAR 0 6
47921: NOT
47922: PUSH
47923: LD_VAR 0 13
47927: PUSH
47928: LD_VAR 0 6
47932: IN
47933: NOT
47934: OR
47935: IFFALSE 48242
// begin if dep then
47937: LD_VAR 0 17
47941: IFFALSE 48077
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47943: LD_ADDR_VAR 0 16
47947: PUSH
47948: LD_VAR 0 17
47952: PUSH
47953: LD_INT 1
47955: ARRAY
47956: PPUSH
47957: CALL_OW 250
47961: PPUSH
47962: LD_VAR 0 17
47966: PUSH
47967: LD_INT 1
47969: ARRAY
47970: PPUSH
47971: CALL_OW 254
47975: PPUSH
47976: LD_INT 5
47978: PPUSH
47979: CALL_OW 272
47983: PUSH
47984: LD_VAR 0 17
47988: PUSH
47989: LD_INT 1
47991: ARRAY
47992: PPUSH
47993: CALL_OW 251
47997: PPUSH
47998: LD_VAR 0 17
48002: PUSH
48003: LD_INT 1
48005: ARRAY
48006: PPUSH
48007: CALL_OW 254
48011: PPUSH
48012: LD_INT 5
48014: PPUSH
48015: CALL_OW 273
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48024: LD_VAR 0 16
48028: PUSH
48029: LD_INT 1
48031: ARRAY
48032: PPUSH
48033: LD_VAR 0 16
48037: PUSH
48038: LD_INT 2
48040: ARRAY
48041: PPUSH
48042: CALL_OW 488
48046: IFFALSE 48077
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48048: LD_VAR 0 13
48052: PPUSH
48053: LD_VAR 0 16
48057: PUSH
48058: LD_INT 1
48060: ARRAY
48061: PPUSH
48062: LD_VAR 0 16
48066: PUSH
48067: LD_INT 2
48069: ARRAY
48070: PPUSH
48071: CALL_OW 111
// continue ;
48075: GO 47567
// end ; end ; r := GetDir ( tmp ) ;
48077: LD_ADDR_VAR 0 15
48081: PUSH
48082: LD_VAR 0 13
48086: PPUSH
48087: CALL_OW 254
48091: ST_TO_ADDR
// if r = 5 then
48092: LD_VAR 0 15
48096: PUSH
48097: LD_INT 5
48099: EQUAL
48100: IFFALSE 48110
// r := 0 ;
48102: LD_ADDR_VAR 0 15
48106: PUSH
48107: LD_INT 0
48109: ST_TO_ADDR
// for j = r to 5 do
48110: LD_ADDR_VAR 0 10
48114: PUSH
48115: DOUBLE
48116: LD_VAR 0 15
48120: DEC
48121: ST_TO_ADDR
48122: LD_INT 5
48124: PUSH
48125: FOR_TO
48126: IFFALSE 48240
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48128: LD_ADDR_VAR 0 11
48132: PUSH
48133: LD_VAR 0 13
48137: PPUSH
48138: CALL_OW 250
48142: PPUSH
48143: LD_VAR 0 10
48147: PPUSH
48148: LD_INT 2
48150: PPUSH
48151: CALL_OW 272
48155: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48156: LD_ADDR_VAR 0 12
48160: PUSH
48161: LD_VAR 0 13
48165: PPUSH
48166: CALL_OW 251
48170: PPUSH
48171: LD_VAR 0 10
48175: PPUSH
48176: LD_INT 2
48178: PPUSH
48179: CALL_OW 273
48183: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48184: LD_VAR 0 11
48188: PPUSH
48189: LD_VAR 0 12
48193: PPUSH
48194: CALL_OW 488
48198: PUSH
48199: LD_VAR 0 11
48203: PPUSH
48204: LD_VAR 0 12
48208: PPUSH
48209: CALL_OW 428
48213: NOT
48214: AND
48215: IFFALSE 48238
// begin ComMoveXY ( tmp , _x , _y ) ;
48217: LD_VAR 0 13
48221: PPUSH
48222: LD_VAR 0 11
48226: PPUSH
48227: LD_VAR 0 12
48231: PPUSH
48232: CALL_OW 111
// break ;
48236: GO 48240
// end ; end ;
48238: GO 48125
48240: POP
48241: POP
// end ; end ;
48242: GO 47567
48244: POP
48245: POP
// end ;
48246: LD_VAR 0 8
48250: RET
// export function BuildingTechInvented ( side , btype ) ; begin
48251: LD_INT 0
48253: PPUSH
// result := true ;
48254: LD_ADDR_VAR 0 3
48258: PUSH
48259: LD_INT 1
48261: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
48262: LD_VAR 0 2
48266: PUSH
48267: LD_INT 24
48269: DOUBLE
48270: EQUAL
48271: IFTRUE 48281
48273: LD_INT 33
48275: DOUBLE
48276: EQUAL
48277: IFTRUE 48281
48279: GO 48306
48281: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48282: LD_ADDR_VAR 0 3
48286: PUSH
48287: LD_INT 32
48289: PPUSH
48290: LD_VAR 0 1
48294: PPUSH
48295: CALL_OW 321
48299: PUSH
48300: LD_INT 2
48302: EQUAL
48303: ST_TO_ADDR
48304: GO 48622
48306: LD_INT 20
48308: DOUBLE
48309: EQUAL
48310: IFTRUE 48314
48312: GO 48339
48314: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48315: LD_ADDR_VAR 0 3
48319: PUSH
48320: LD_INT 6
48322: PPUSH
48323: LD_VAR 0 1
48327: PPUSH
48328: CALL_OW 321
48332: PUSH
48333: LD_INT 2
48335: EQUAL
48336: ST_TO_ADDR
48337: GO 48622
48339: LD_INT 22
48341: DOUBLE
48342: EQUAL
48343: IFTRUE 48353
48345: LD_INT 36
48347: DOUBLE
48348: EQUAL
48349: IFTRUE 48353
48351: GO 48378
48353: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48354: LD_ADDR_VAR 0 3
48358: PUSH
48359: LD_INT 15
48361: PPUSH
48362: LD_VAR 0 1
48366: PPUSH
48367: CALL_OW 321
48371: PUSH
48372: LD_INT 2
48374: EQUAL
48375: ST_TO_ADDR
48376: GO 48622
48378: LD_INT 30
48380: DOUBLE
48381: EQUAL
48382: IFTRUE 48386
48384: GO 48411
48386: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48387: LD_ADDR_VAR 0 3
48391: PUSH
48392: LD_INT 20
48394: PPUSH
48395: LD_VAR 0 1
48399: PPUSH
48400: CALL_OW 321
48404: PUSH
48405: LD_INT 2
48407: EQUAL
48408: ST_TO_ADDR
48409: GO 48622
48411: LD_INT 28
48413: DOUBLE
48414: EQUAL
48415: IFTRUE 48425
48417: LD_INT 21
48419: DOUBLE
48420: EQUAL
48421: IFTRUE 48425
48423: GO 48450
48425: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48426: LD_ADDR_VAR 0 3
48430: PUSH
48431: LD_INT 21
48433: PPUSH
48434: LD_VAR 0 1
48438: PPUSH
48439: CALL_OW 321
48443: PUSH
48444: LD_INT 2
48446: EQUAL
48447: ST_TO_ADDR
48448: GO 48622
48450: LD_INT 16
48452: DOUBLE
48453: EQUAL
48454: IFTRUE 48458
48456: GO 48483
48458: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48459: LD_ADDR_VAR 0 3
48463: PUSH
48464: LD_INT 84
48466: PPUSH
48467: LD_VAR 0 1
48471: PPUSH
48472: CALL_OW 321
48476: PUSH
48477: LD_INT 2
48479: EQUAL
48480: ST_TO_ADDR
48481: GO 48622
48483: LD_INT 19
48485: DOUBLE
48486: EQUAL
48487: IFTRUE 48497
48489: LD_INT 23
48491: DOUBLE
48492: EQUAL
48493: IFTRUE 48497
48495: GO 48522
48497: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48498: LD_ADDR_VAR 0 3
48502: PUSH
48503: LD_INT 83
48505: PPUSH
48506: LD_VAR 0 1
48510: PPUSH
48511: CALL_OW 321
48515: PUSH
48516: LD_INT 2
48518: EQUAL
48519: ST_TO_ADDR
48520: GO 48622
48522: LD_INT 17
48524: DOUBLE
48525: EQUAL
48526: IFTRUE 48530
48528: GO 48555
48530: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48531: LD_ADDR_VAR 0 3
48535: PUSH
48536: LD_INT 39
48538: PPUSH
48539: LD_VAR 0 1
48543: PPUSH
48544: CALL_OW 321
48548: PUSH
48549: LD_INT 2
48551: EQUAL
48552: ST_TO_ADDR
48553: GO 48622
48555: LD_INT 18
48557: DOUBLE
48558: EQUAL
48559: IFTRUE 48563
48561: GO 48588
48563: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48564: LD_ADDR_VAR 0 3
48568: PUSH
48569: LD_INT 40
48571: PPUSH
48572: LD_VAR 0 1
48576: PPUSH
48577: CALL_OW 321
48581: PUSH
48582: LD_INT 2
48584: EQUAL
48585: ST_TO_ADDR
48586: GO 48622
48588: LD_INT 27
48590: DOUBLE
48591: EQUAL
48592: IFTRUE 48596
48594: GO 48621
48596: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48597: LD_ADDR_VAR 0 3
48601: PUSH
48602: LD_INT 35
48604: PPUSH
48605: LD_VAR 0 1
48609: PPUSH
48610: CALL_OW 321
48614: PUSH
48615: LD_INT 2
48617: EQUAL
48618: ST_TO_ADDR
48619: GO 48622
48621: POP
// end ;
48622: LD_VAR 0 3
48626: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48627: LD_INT 0
48629: PPUSH
48630: PPUSH
48631: PPUSH
48632: PPUSH
48633: PPUSH
48634: PPUSH
48635: PPUSH
48636: PPUSH
48637: PPUSH
48638: PPUSH
48639: PPUSH
// result := false ;
48640: LD_ADDR_VAR 0 6
48644: PUSH
48645: LD_INT 0
48647: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48648: LD_VAR 0 1
48652: NOT
48653: PUSH
48654: LD_VAR 0 1
48658: PPUSH
48659: CALL_OW 266
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: LD_INT 1
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: IN
48674: NOT
48675: OR
48676: PUSH
48677: LD_VAR 0 2
48681: NOT
48682: OR
48683: PUSH
48684: LD_VAR 0 5
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: LD_INT 1
48694: PUSH
48695: LD_INT 2
48697: PUSH
48698: LD_INT 3
48700: PUSH
48701: LD_INT 4
48703: PUSH
48704: LD_INT 5
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: IN
48715: NOT
48716: OR
48717: PUSH
48718: LD_VAR 0 3
48722: PPUSH
48723: LD_VAR 0 4
48727: PPUSH
48728: CALL_OW 488
48732: NOT
48733: OR
48734: IFFALSE 48738
// exit ;
48736: GO 49474
// side := GetSide ( depot ) ;
48738: LD_ADDR_VAR 0 9
48742: PUSH
48743: LD_VAR 0 1
48747: PPUSH
48748: CALL_OW 255
48752: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48753: LD_VAR 0 9
48757: PPUSH
48758: LD_VAR 0 2
48762: PPUSH
48763: CALL 48251 0 2
48767: NOT
48768: IFFALSE 48772
// exit ;
48770: GO 49474
// pom := GetBase ( depot ) ;
48772: LD_ADDR_VAR 0 10
48776: PUSH
48777: LD_VAR 0 1
48781: PPUSH
48782: CALL_OW 274
48786: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48787: LD_ADDR_VAR 0 11
48791: PUSH
48792: LD_VAR 0 2
48796: PPUSH
48797: LD_VAR 0 1
48801: PPUSH
48802: CALL_OW 248
48806: PPUSH
48807: CALL_OW 450
48811: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48812: LD_VAR 0 10
48816: PPUSH
48817: LD_INT 1
48819: PPUSH
48820: CALL_OW 275
48824: PUSH
48825: LD_VAR 0 11
48829: PUSH
48830: LD_INT 1
48832: ARRAY
48833: GREATEREQUAL
48834: PUSH
48835: LD_VAR 0 10
48839: PPUSH
48840: LD_INT 2
48842: PPUSH
48843: CALL_OW 275
48847: PUSH
48848: LD_VAR 0 11
48852: PUSH
48853: LD_INT 2
48855: ARRAY
48856: GREATEREQUAL
48857: AND
48858: PUSH
48859: LD_VAR 0 10
48863: PPUSH
48864: LD_INT 3
48866: PPUSH
48867: CALL_OW 275
48871: PUSH
48872: LD_VAR 0 11
48876: PUSH
48877: LD_INT 3
48879: ARRAY
48880: GREATEREQUAL
48881: AND
48882: NOT
48883: IFFALSE 48887
// exit ;
48885: GO 49474
// if GetBType ( depot ) = b_depot then
48887: LD_VAR 0 1
48891: PPUSH
48892: CALL_OW 266
48896: PUSH
48897: LD_INT 0
48899: EQUAL
48900: IFFALSE 48912
// dist := 28 else
48902: LD_ADDR_VAR 0 14
48906: PUSH
48907: LD_INT 28
48909: ST_TO_ADDR
48910: GO 48920
// dist := 36 ;
48912: LD_ADDR_VAR 0 14
48916: PUSH
48917: LD_INT 36
48919: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48920: LD_VAR 0 1
48924: PPUSH
48925: LD_VAR 0 3
48929: PPUSH
48930: LD_VAR 0 4
48934: PPUSH
48935: CALL_OW 297
48939: PUSH
48940: LD_VAR 0 14
48944: GREATER
48945: IFFALSE 48949
// exit ;
48947: GO 49474
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48949: LD_ADDR_VAR 0 12
48953: PUSH
48954: LD_VAR 0 2
48958: PPUSH
48959: LD_VAR 0 3
48963: PPUSH
48964: LD_VAR 0 4
48968: PPUSH
48969: LD_VAR 0 5
48973: PPUSH
48974: LD_VAR 0 1
48978: PPUSH
48979: CALL_OW 248
48983: PPUSH
48984: LD_INT 0
48986: PPUSH
48987: CALL 49479 0 6
48991: ST_TO_ADDR
// if not hexes then
48992: LD_VAR 0 12
48996: NOT
48997: IFFALSE 49001
// exit ;
48999: GO 49474
// hex := GetHexInfo ( x , y ) ;
49001: LD_ADDR_VAR 0 15
49005: PUSH
49006: LD_VAR 0 3
49010: PPUSH
49011: LD_VAR 0 4
49015: PPUSH
49016: CALL_OW 546
49020: ST_TO_ADDR
// if hex [ 1 ] then
49021: LD_VAR 0 15
49025: PUSH
49026: LD_INT 1
49028: ARRAY
49029: IFFALSE 49033
// exit ;
49031: GO 49474
// height := hex [ 2 ] ;
49033: LD_ADDR_VAR 0 13
49037: PUSH
49038: LD_VAR 0 15
49042: PUSH
49043: LD_INT 2
49045: ARRAY
49046: ST_TO_ADDR
// for i = 1 to hexes do
49047: LD_ADDR_VAR 0 7
49051: PUSH
49052: DOUBLE
49053: LD_INT 1
49055: DEC
49056: ST_TO_ADDR
49057: LD_VAR 0 12
49061: PUSH
49062: FOR_TO
49063: IFFALSE 49393
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
49065: LD_VAR 0 12
49069: PUSH
49070: LD_VAR 0 7
49074: ARRAY
49075: PUSH
49076: LD_INT 1
49078: ARRAY
49079: PPUSH
49080: LD_VAR 0 12
49084: PUSH
49085: LD_VAR 0 7
49089: ARRAY
49090: PUSH
49091: LD_INT 2
49093: ARRAY
49094: PPUSH
49095: CALL_OW 488
49099: NOT
49100: PUSH
49101: LD_VAR 0 12
49105: PUSH
49106: LD_VAR 0 7
49110: ARRAY
49111: PUSH
49112: LD_INT 1
49114: ARRAY
49115: PPUSH
49116: LD_VAR 0 12
49120: PUSH
49121: LD_VAR 0 7
49125: ARRAY
49126: PUSH
49127: LD_INT 2
49129: ARRAY
49130: PPUSH
49131: CALL_OW 428
49135: PUSH
49136: LD_INT 0
49138: GREATER
49139: OR
49140: PUSH
49141: LD_VAR 0 12
49145: PUSH
49146: LD_VAR 0 7
49150: ARRAY
49151: PUSH
49152: LD_INT 1
49154: ARRAY
49155: PPUSH
49156: LD_VAR 0 12
49160: PUSH
49161: LD_VAR 0 7
49165: ARRAY
49166: PUSH
49167: LD_INT 2
49169: ARRAY
49170: PPUSH
49171: CALL_OW 351
49175: OR
49176: IFFALSE 49182
// exit ;
49178: POP
49179: POP
49180: GO 49474
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49182: LD_ADDR_VAR 0 8
49186: PUSH
49187: LD_VAR 0 12
49191: PUSH
49192: LD_VAR 0 7
49196: ARRAY
49197: PUSH
49198: LD_INT 1
49200: ARRAY
49201: PPUSH
49202: LD_VAR 0 12
49206: PUSH
49207: LD_VAR 0 7
49211: ARRAY
49212: PUSH
49213: LD_INT 2
49215: ARRAY
49216: PPUSH
49217: CALL_OW 546
49221: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
49222: LD_VAR 0 8
49226: PUSH
49227: LD_INT 1
49229: ARRAY
49230: PUSH
49231: LD_VAR 0 8
49235: PUSH
49236: LD_INT 2
49238: ARRAY
49239: PUSH
49240: LD_VAR 0 13
49244: PUSH
49245: LD_INT 2
49247: PLUS
49248: GREATER
49249: OR
49250: PUSH
49251: LD_VAR 0 8
49255: PUSH
49256: LD_INT 2
49258: ARRAY
49259: PUSH
49260: LD_VAR 0 13
49264: PUSH
49265: LD_INT 2
49267: MINUS
49268: LESS
49269: OR
49270: PUSH
49271: LD_VAR 0 8
49275: PUSH
49276: LD_INT 3
49278: ARRAY
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: LD_INT 8
49285: PUSH
49286: LD_INT 9
49288: PUSH
49289: LD_INT 10
49291: PUSH
49292: LD_INT 11
49294: PUSH
49295: LD_INT 12
49297: PUSH
49298: LD_INT 13
49300: PUSH
49301: LD_INT 16
49303: PUSH
49304: LD_INT 17
49306: PUSH
49307: LD_INT 18
49309: PUSH
49310: LD_INT 19
49312: PUSH
49313: LD_INT 20
49315: PUSH
49316: LD_INT 21
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: IN
49334: NOT
49335: OR
49336: PUSH
49337: LD_VAR 0 8
49341: PUSH
49342: LD_INT 5
49344: ARRAY
49345: NOT
49346: OR
49347: PUSH
49348: LD_VAR 0 8
49352: PUSH
49353: LD_INT 6
49355: ARRAY
49356: PUSH
49357: LD_INT 1
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: LD_INT 7
49365: PUSH
49366: LD_INT 9
49368: PUSH
49369: LD_INT 10
49371: PUSH
49372: LD_INT 11
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: IN
49383: NOT
49384: OR
49385: IFFALSE 49391
// exit ;
49387: POP
49388: POP
49389: GO 49474
// end ;
49391: GO 49062
49393: POP
49394: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49395: LD_VAR 0 9
49399: PPUSH
49400: LD_VAR 0 3
49404: PPUSH
49405: LD_VAR 0 4
49409: PPUSH
49410: LD_INT 20
49412: PPUSH
49413: CALL 41426 0 4
49417: PUSH
49418: LD_INT 4
49420: ARRAY
49421: IFFALSE 49425
// exit ;
49423: GO 49474
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49425: LD_VAR 0 2
49429: PUSH
49430: LD_INT 29
49432: PUSH
49433: LD_INT 30
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: IN
49440: PUSH
49441: LD_VAR 0 3
49445: PPUSH
49446: LD_VAR 0 4
49450: PPUSH
49451: LD_VAR 0 9
49455: PPUSH
49456: CALL_OW 440
49460: NOT
49461: AND
49462: IFFALSE 49466
// exit ;
49464: GO 49474
// result := true ;
49466: LD_ADDR_VAR 0 6
49470: PUSH
49471: LD_INT 1
49473: ST_TO_ADDR
// end ;
49474: LD_VAR 0 6
49478: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49479: LD_INT 0
49481: PPUSH
49482: PPUSH
49483: PPUSH
49484: PPUSH
49485: PPUSH
49486: PPUSH
49487: PPUSH
49488: PPUSH
49489: PPUSH
49490: PPUSH
49491: PPUSH
49492: PPUSH
49493: PPUSH
49494: PPUSH
49495: PPUSH
49496: PPUSH
49497: PPUSH
49498: PPUSH
49499: PPUSH
49500: PPUSH
49501: PPUSH
49502: PPUSH
49503: PPUSH
49504: PPUSH
49505: PPUSH
49506: PPUSH
49507: PPUSH
49508: PPUSH
49509: PPUSH
49510: PPUSH
49511: PPUSH
49512: PPUSH
49513: PPUSH
49514: PPUSH
49515: PPUSH
49516: PPUSH
49517: PPUSH
49518: PPUSH
49519: PPUSH
49520: PPUSH
49521: PPUSH
49522: PPUSH
49523: PPUSH
49524: PPUSH
49525: PPUSH
49526: PPUSH
49527: PPUSH
49528: PPUSH
49529: PPUSH
49530: PPUSH
49531: PPUSH
49532: PPUSH
49533: PPUSH
49534: PPUSH
49535: PPUSH
49536: PPUSH
49537: PPUSH
49538: PPUSH
// result = [ ] ;
49539: LD_ADDR_VAR 0 7
49543: PUSH
49544: EMPTY
49545: ST_TO_ADDR
// temp_list = [ ] ;
49546: LD_ADDR_VAR 0 9
49550: PUSH
49551: EMPTY
49552: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49553: LD_VAR 0 4
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: LD_INT 2
49566: PUSH
49567: LD_INT 3
49569: PUSH
49570: LD_INT 4
49572: PUSH
49573: LD_INT 5
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: IN
49584: NOT
49585: PUSH
49586: LD_VAR 0 1
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: IN
49601: PUSH
49602: LD_VAR 0 5
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: LD_INT 3
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: LIST
49620: IN
49621: NOT
49622: AND
49623: OR
49624: IFFALSE 49628
// exit ;
49626: GO 68019
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49628: LD_VAR 0 1
49632: PUSH
49633: LD_INT 6
49635: PUSH
49636: LD_INT 7
49638: PUSH
49639: LD_INT 8
49641: PUSH
49642: LD_INT 13
49644: PUSH
49645: LD_INT 12
49647: PUSH
49648: LD_INT 15
49650: PUSH
49651: LD_INT 11
49653: PUSH
49654: LD_INT 14
49656: PUSH
49657: LD_INT 10
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: IN
49671: IFFALSE 49681
// btype = b_lab ;
49673: LD_ADDR_VAR 0 1
49677: PUSH
49678: LD_INT 6
49680: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49681: LD_VAR 0 6
49685: PUSH
49686: LD_INT 0
49688: PUSH
49689: LD_INT 1
49691: PUSH
49692: LD_INT 2
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: LIST
49699: IN
49700: NOT
49701: PUSH
49702: LD_VAR 0 1
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: LD_INT 3
49718: PUSH
49719: LD_INT 6
49721: PUSH
49722: LD_INT 36
49724: PUSH
49725: LD_INT 4
49727: PUSH
49728: LD_INT 5
49730: PUSH
49731: LD_INT 31
49733: PUSH
49734: LD_INT 32
49736: PUSH
49737: LD_INT 33
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: IN
49753: NOT
49754: PUSH
49755: LD_VAR 0 6
49759: PUSH
49760: LD_INT 1
49762: EQUAL
49763: AND
49764: OR
49765: PUSH
49766: LD_VAR 0 1
49770: PUSH
49771: LD_INT 2
49773: PUSH
49774: LD_INT 3
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: IN
49781: NOT
49782: PUSH
49783: LD_VAR 0 6
49787: PUSH
49788: LD_INT 2
49790: EQUAL
49791: AND
49792: OR
49793: IFFALSE 49803
// mode = 0 ;
49795: LD_ADDR_VAR 0 6
49799: PUSH
49800: LD_INT 0
49802: ST_TO_ADDR
// case mode of 0 :
49803: LD_VAR 0 6
49807: PUSH
49808: LD_INT 0
49810: DOUBLE
49811: EQUAL
49812: IFTRUE 49816
49814: GO 61269
49816: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49817: LD_ADDR_VAR 0 11
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 0
49865: PUSH
49866: LD_INT 1
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 1
49886: NEG
49887: PUSH
49888: LD_INT 1
49890: NEG
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: LD_INT 2
49902: NEG
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: LD_INT 2
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: LD_INT 1
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: LD_INT 2
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 0
49942: PUSH
49943: LD_INT 2
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: LD_INT 3
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: LD_INT 3
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50010: LD_ADDR_VAR 0 12
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: PUSH
50049: LD_INT 1
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: LD_INT 1
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: NEG
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 1
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 2
50112: PUSH
50113: LD_INT 1
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 2
50133: NEG
50134: PUSH
50135: LD_INT 0
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 2
50144: NEG
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 2
50156: NEG
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 3
50167: NEG
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 3
50178: NEG
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50206: LD_ADDR_VAR 0 13
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 0
50254: PUSH
50255: LD_INT 1
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: LD_INT 0
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: NEG
50288: PUSH
50289: LD_INT 2
50291: NEG
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 2
50299: PUSH
50300: LD_INT 1
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 2
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 2
50329: NEG
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 2
50341: NEG
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 2
50353: NEG
50354: PUSH
50355: LD_INT 3
50357: NEG
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 3
50365: NEG
50366: PUSH
50367: LD_INT 2
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 3
50377: NEG
50378: PUSH
50379: LD_INT 3
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50405: LD_ADDR_VAR 0 14
50409: PUSH
50410: LD_INT 0
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: PUSH
50444: LD_INT 1
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: LD_INT 1
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 1
50463: NEG
50464: PUSH
50465: LD_INT 0
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: LD_INT 1
50478: NEG
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: LD_INT 2
50490: NEG
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: LD_INT 2
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: PUSH
50521: LD_INT 2
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 2
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: LD_INT 1
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: LD_INT 3
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 0
50563: PUSH
50564: LD_INT 3
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: LD_INT 2
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50601: LD_ADDR_VAR 0 15
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 1
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: PUSH
50640: LD_INT 1
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 0
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 1
50659: NEG
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: LD_INT 1
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 2
50693: PUSH
50694: LD_INT 0
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: LD_INT 1
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: LD_INT 0
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 2
50735: NEG
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 2
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 3
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 3
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50794: LD_ADDR_VAR 0 16
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: LD_INT 0
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 0
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: NEG
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 1
50863: NEG
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: LD_INT 2
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 2
50887: PUSH
50888: LD_INT 1
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 2
50897: PUSH
50898: LD_INT 2
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 1
50907: PUSH
50908: LD_INT 2
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 2
50917: NEG
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: NEG
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 3
50941: PUSH
50942: LD_INT 2
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 3
50951: PUSH
50952: LD_INT 3
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 2
50961: PUSH
50962: LD_INT 3
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50987: LD_ADDR_VAR 0 17
50991: PUSH
50992: LD_INT 0
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: LD_INT 1
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: LD_INT 0
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: NEG
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 2
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: LD_INT 2
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 2
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 2
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: PUSH
51123: LD_INT 2
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: LD_INT 2
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 2
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: EMPTY
51158: LIST
51159: LIST
51160: PUSH
51161: LD_INT 2
51163: NEG
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 2
51174: NEG
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: LD_INT 2
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51217: LD_ADDR_VAR 0 18
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: NEG
51299: PUSH
51300: LD_INT 2
51302: NEG
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: LD_INT 2
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 2
51332: PUSH
51333: LD_INT 0
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: PUSH
51363: LD_INT 2
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: LD_INT 2
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: LD_INT 1
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 2
51404: NEG
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 2
51416: NEG
51417: PUSH
51418: LD_INT 2
51420: NEG
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51447: LD_ADDR_VAR 0 19
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: NEG
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: LD_INT 2
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: LD_INT 2
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 2
51562: PUSH
51563: LD_INT 0
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 2
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 2
51582: PUSH
51583: LD_INT 2
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: LD_INT 2
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: LD_INT 2
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 2
51623: NEG
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: NEG
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 2
51646: NEG
51647: PUSH
51648: LD_INT 2
51650: NEG
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51677: LD_ADDR_VAR 0 20
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 0
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 1
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 1
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: LD_INT 1
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 1
51746: NEG
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: NEG
51759: PUSH
51760: LD_INT 2
51762: NEG
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 0
51770: PUSH
51771: LD_INT 2
51773: NEG
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: LD_INT 1
51784: NEG
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 2
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 2
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: LD_INT 2
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 1
51822: PUSH
51823: LD_INT 2
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: PUSH
51844: LD_INT 1
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 2
51864: NEG
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: NEG
51877: PUSH
51878: LD_INT 2
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51907: LD_ADDR_VAR 0 21
51911: PUSH
51912: LD_INT 0
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 0
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: LD_INT 0
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: LD_INT 1
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: LD_INT 2
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: LD_INT 2
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 1
52011: PUSH
52012: LD_INT 1
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 2
52032: PUSH
52033: LD_INT 1
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 2
52042: PUSH
52043: LD_INT 2
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 1
52052: PUSH
52053: LD_INT 2
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: LD_INT 2
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: LD_INT 1
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 2
52083: NEG
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 2
52094: NEG
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 2
52106: NEG
52107: PUSH
52108: LD_INT 2
52110: NEG
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: LIST
52120: LIST
52121: LIST
52122: LIST
52123: LIST
52124: LIST
52125: LIST
52126: LIST
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52137: LD_ADDR_VAR 0 22
52141: PUSH
52142: LD_INT 0
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 0
52154: PUSH
52155: LD_INT 1
52157: NEG
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 1
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 1
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: LD_INT 0
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: PUSH
52204: LD_INT 1
52206: NEG
52207: PUSH
52208: LD_INT 1
52210: NEG
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: LD_INT 2
52222: NEG
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: LD_INT 2
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 2
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 2
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 2
52272: PUSH
52273: LD_INT 2
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: PUSH
52283: LD_INT 2
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: LD_INT 2
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 2
52313: NEG
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 2
52324: NEG
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: NEG
52337: PUSH
52338: LD_INT 2
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52367: LD_ADDR_VAR 0 23
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 0
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: NEG
52437: PUSH
52438: LD_INT 1
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: NEG
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 0
52460: PUSH
52461: LD_INT 2
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: LD_INT 1
52474: NEG
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 2
52482: PUSH
52483: LD_INT 0
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 2
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: PUSH
52500: LD_INT 2
52502: PUSH
52503: LD_INT 2
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 1
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 0
52522: PUSH
52523: LD_INT 2
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 1
52532: NEG
52533: PUSH
52534: LD_INT 1
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 2
52543: NEG
52544: PUSH
52545: LD_INT 0
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 2
52554: NEG
52555: PUSH
52556: LD_INT 1
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 2
52566: NEG
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 2
52578: NEG
52579: PUSH
52580: LD_INT 3
52582: NEG
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: LD_INT 3
52594: NEG
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 2
52613: PUSH
52614: LD_INT 1
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52647: LD_ADDR_VAR 0 24
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 0
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 1
52675: PUSH
52676: LD_INT 0
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: LD_INT 2
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 0
52740: PUSH
52741: LD_INT 2
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: LD_INT 1
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 2
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 2
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 2
52782: PUSH
52783: LD_INT 2
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: LD_INT 2
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 0
52802: PUSH
52803: LD_INT 2
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 1
52812: NEG
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 2
52823: NEG
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: PUSH
52832: LD_INT 2
52834: NEG
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 2
52846: NEG
52847: PUSH
52848: LD_INT 2
52850: NEG
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: PUSH
52859: LD_INT 2
52861: NEG
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 2
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 3
52880: PUSH
52881: LD_INT 1
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 3
52890: PUSH
52891: LD_INT 2
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52923: LD_ADDR_VAR 0 25
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 0
52940: PUSH
52941: LD_INT 1
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: NEG
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 1
53004: NEG
53005: PUSH
53006: LD_INT 2
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: LD_INT 2
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: LD_INT 1
53030: NEG
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 2
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 2
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 2
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: LD_INT 2
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: LD_INT 2
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: LD_INT 1
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 2
53099: NEG
53100: PUSH
53101: LD_INT 0
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 2
53110: NEG
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 2
53122: NEG
53123: PUSH
53124: LD_INT 2
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 3
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 3
53144: PUSH
53145: LD_INT 2
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 2
53154: PUSH
53155: LD_INT 3
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 1
53164: PUSH
53165: LD_INT 3
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53197: LD_ADDR_VAR 0 26
53201: PUSH
53202: LD_INT 0
53204: PUSH
53205: LD_INT 0
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 1
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: LD_INT 1
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: LD_INT 1
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: LD_INT 0
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: LD_INT 1
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: LD_INT 2
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 0
53290: PUSH
53291: LD_INT 2
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 2
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 2
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 2
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: LD_INT 2
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 0
53352: PUSH
53353: LD_INT 2
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 2
53373: NEG
53374: PUSH
53375: LD_INT 0
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 2
53384: NEG
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 2
53396: NEG
53397: PUSH
53398: LD_INT 2
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 2
53408: PUSH
53409: LD_INT 3
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 1
53418: PUSH
53419: LD_INT 3
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: LD_INT 2
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 2
53439: NEG
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53473: LD_ADDR_VAR 0 27
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: LD_INT 1
53493: NEG
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: LD_INT 2
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 2
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 2
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 2
53608: PUSH
53609: LD_INT 2
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: LD_INT 2
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 2
53649: NEG
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 2
53660: NEG
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 2
53672: NEG
53673: PUSH
53674: LD_INT 2
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: LD_INT 2
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: PUSH
53693: LD_INT 2
53695: NEG
53696: PUSH
53697: LD_INT 1
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 3
53706: NEG
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 3
53718: NEG
53719: PUSH
53720: LD_INT 2
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53753: LD_ADDR_VAR 0 28
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: LD_INT 2
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: LD_INT 2
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 2
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 2
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: LD_INT 2
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: LD_INT 2
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 1
53918: NEG
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 2
53929: NEG
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 2
53940: NEG
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 2
53952: NEG
53953: PUSH
53954: LD_INT 2
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: LD_INT 3
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: LD_INT 3
53980: NEG
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 3
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 3
54000: NEG
54001: PUSH
54002: LD_INT 2
54004: NEG
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: EMPTY
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54035: LD_ADDR_VAR 0 29
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 0
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: LD_INT 1
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 0
54083: PUSH
54084: LD_INT 1
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: LD_INT 0
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: LD_INT 2
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 0
54128: PUSH
54129: LD_INT 2
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 2
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: LD_INT 2
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 2
54201: NEG
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 2
54213: NEG
54214: PUSH
54215: LD_INT 2
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 2
54225: NEG
54226: PUSH
54227: LD_INT 3
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 2
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 3
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: LD_INT 3
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: NEG
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 3
54279: NEG
54280: PUSH
54281: LD_INT 2
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54314: LD_ADDR_VAR 0 30
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: LD_INT 0
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 0
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: PUSH
54343: LD_INT 0
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: PUSH
54353: LD_INT 1
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 0
54362: PUSH
54363: LD_INT 1
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: LD_INT 0
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: LD_INT 1
54387: NEG
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 1
54395: NEG
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 0
54407: PUSH
54408: LD_INT 2
54410: NEG
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 2
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 2
54449: PUSH
54450: LD_INT 2
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: LD_INT 2
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: LD_INT 1
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 2
54491: NEG
54492: PUSH
54493: LD_INT 1
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: LD_INT 3
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: LD_INT 2
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 3
54526: PUSH
54527: LD_INT 2
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 2
54536: PUSH
54537: LD_INT 3
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 2
54546: NEG
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 3
54557: NEG
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54592: LD_ADDR_VAR 0 31
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: LD_INT 1
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: LD_INT 1
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: LD_INT 1
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: LD_INT 2
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 1
54685: PUSH
54686: LD_INT 1
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 2
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 2
54716: PUSH
54717: LD_INT 2
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: LD_INT 2
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: LD_INT 2
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 1
54746: NEG
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 2
54757: NEG
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 2
54769: NEG
54770: PUSH
54771: LD_INT 2
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 2
54781: NEG
54782: PUSH
54783: LD_INT 3
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 2
54793: PUSH
54794: LD_INT 1
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 3
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: PUSH
54815: LD_INT 3
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 1
54824: NEG
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 3
54835: NEG
54836: PUSH
54837: LD_INT 2
54839: NEG
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54870: LD_ADDR_VAR 0 32
54874: PUSH
54875: LD_INT 0
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 1
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: LD_INT 1
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 1
54928: NEG
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: NEG
54940: PUSH
54941: LD_INT 1
54943: NEG
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: LD_INT 2
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 0
54963: PUSH
54964: LD_INT 2
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 2
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 2
54995: PUSH
54996: LD_INT 2
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: LD_INT 2
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 1
55025: NEG
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: NEG
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 2
55047: NEG
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 1
55059: NEG
55060: PUSH
55061: LD_INT 3
55063: NEG
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: PUSH
55072: LD_INT 2
55074: NEG
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 3
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 2
55092: PUSH
55093: LD_INT 3
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 2
55102: NEG
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 3
55113: NEG
55114: PUSH
55115: LD_INT 1
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
55148: LD_ADDR_VAR 0 33
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 0
55165: PUSH
55166: LD_INT 1
55168: NEG
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: LD_INT 0
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: LD_INT 1
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: NEG
55230: PUSH
55231: LD_INT 2
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 2
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 2
55262: PUSH
55263: LD_INT 1
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: LD_INT 2
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 1
55292: NEG
55293: PUSH
55294: LD_INT 1
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 2
55303: NEG
55304: PUSH
55305: LD_INT 0
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 2
55314: NEG
55315: PUSH
55316: LD_INT 1
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 2
55326: NEG
55327: PUSH
55328: LD_INT 2
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 2
55338: NEG
55339: PUSH
55340: LD_INT 3
55342: NEG
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 2
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 3
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: LD_INT 3
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: LD_INT 2
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 3
55392: NEG
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55427: LD_ADDR_VAR 0 34
55431: PUSH
55432: LD_INT 0
55434: PUSH
55435: LD_INT 0
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 0
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 1
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: LD_INT 1
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 1
55508: NEG
55509: PUSH
55510: LD_INT 2
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: LD_INT 1
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 2
55552: PUSH
55553: LD_INT 2
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: LD_INT 2
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: NEG
55573: PUSH
55574: LD_INT 1
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 2
55583: NEG
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 2
55594: NEG
55595: PUSH
55596: LD_INT 1
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 2
55606: NEG
55607: PUSH
55608: LD_INT 2
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: LD_INT 3
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: LD_INT 2
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 3
55641: PUSH
55642: LD_INT 2
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 2
55651: PUSH
55652: LD_INT 3
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 2
55661: NEG
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 3
55672: NEG
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55707: LD_ADDR_VAR 0 35
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 1
55735: PUSH
55736: LD_INT 0
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 1
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: LD_INT 1
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 1
55765: NEG
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 1
55776: NEG
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 2
55798: NEG
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55819: LD_ADDR_VAR 0 36
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 1
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 1
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 0
55867: PUSH
55868: LD_INT 1
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: NEG
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: LD_INT 2
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: PUSH
55913: LD_INT 2
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: LIST
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55931: LD_ADDR_VAR 0 37
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: NEG
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: NEG
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: LIST
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
56043: LD_ADDR_VAR 0 38
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: LD_INT 0
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: LD_INT 0
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: LD_INT 1
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 1
56112: NEG
56113: PUSH
56114: LD_INT 1
56116: NEG
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: NEG
56135: PUSH
56136: LD_INT 1
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
56155: LD_ADDR_VAR 0 39
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: LD_INT 0
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: LD_INT 1
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: LD_INT 0
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: LD_INT 1
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: NEG
56214: PUSH
56215: LD_INT 0
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: LD_INT 1
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: NEG
56237: PUSH
56238: LD_INT 2
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 1
56248: PUSH
56249: LD_INT 2
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
56267: LD_ADDR_VAR 0 40
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: LD_INT 0
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 1
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: LD_INT 1
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 1
56325: NEG
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: PUSH
56349: LD_INT 1
56351: NEG
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 1
56359: NEG
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56379: LD_ADDR_VAR 0 41
56383: PUSH
56384: LD_INT 0
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: LD_INT 1
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: LD_INT 2
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: LD_INT 1
56475: NEG
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 2
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 2
56493: PUSH
56494: LD_INT 1
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: LD_INT 2
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: LD_INT 2
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 2
56545: NEG
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 2
56557: NEG
56558: PUSH
56559: LD_INT 2
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: LD_INT 2
56569: NEG
56570: PUSH
56571: LD_INT 3
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 2
56581: PUSH
56582: LD_INT 1
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 3
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 3
56602: PUSH
56603: LD_INT 1
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 3
56612: PUSH
56613: LD_INT 2
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 3
56622: PUSH
56623: LD_INT 3
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 2
56632: PUSH
56633: LD_INT 3
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 2
56642: NEG
56643: PUSH
56644: LD_INT 1
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 3
56653: NEG
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 3
56664: NEG
56665: PUSH
56666: LD_INT 1
56668: NEG
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 3
56676: NEG
56677: PUSH
56678: LD_INT 2
56680: NEG
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 3
56688: NEG
56689: PUSH
56690: LD_INT 3
56692: NEG
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56729: LD_ADDR_VAR 0 42
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: LD_INT 0
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: LD_INT 1
56749: NEG
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 1
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: PUSH
56768: LD_INT 1
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: LD_INT 1
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: NEG
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: LD_INT 2
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: LD_INT 2
56825: NEG
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: LD_INT 1
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 2
56844: PUSH
56845: LD_INT 1
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: PUSH
56852: LD_INT 2
56854: PUSH
56855: LD_INT 2
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 1
56864: PUSH
56865: LD_INT 2
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: LD_INT 2
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: LD_INT 1
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 2
56895: NEG
56896: PUSH
56897: LD_INT 1
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 2
56907: NEG
56908: PUSH
56909: LD_INT 2
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 2
56919: NEG
56920: PUSH
56921: LD_INT 3
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 1
56931: NEG
56932: PUSH
56933: LD_INT 3
56935: NEG
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 0
56943: PUSH
56944: LD_INT 3
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 1
56954: PUSH
56955: LD_INT 2
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 3
56965: PUSH
56966: LD_INT 2
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 3
56975: PUSH
56976: LD_INT 3
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 2
56985: PUSH
56986: LD_INT 3
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: LD_INT 3
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: LD_INT 3
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: LD_INT 2
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 3
57026: NEG
57027: PUSH
57028: LD_INT 2
57030: NEG
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 3
57038: NEG
57039: PUSH
57040: LD_INT 3
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57079: LD_ADDR_VAR 0 43
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: LD_INT 1
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: LD_INT 1
57152: NEG
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 1
57160: NEG
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: LD_INT 2
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 2
57194: PUSH
57195: LD_INT 0
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 2
57204: PUSH
57205: LD_INT 1
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: PUSH
57215: LD_INT 2
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: LD_INT 2
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 1
57234: NEG
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 2
57245: NEG
57246: PUSH
57247: LD_INT 0
57249: PUSH
57250: EMPTY
57251: LIST
57252: LIST
57253: PUSH
57254: LD_INT 2
57256: NEG
57257: PUSH
57258: LD_INT 1
57260: NEG
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: PUSH
57270: LD_INT 3
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: LD_INT 3
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: LD_INT 2
57294: NEG
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 2
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 3
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 3
57323: PUSH
57324: LD_INT 1
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: LD_INT 3
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: LD_INT 3
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: NEG
57354: PUSH
57355: LD_INT 2
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 2
57364: NEG
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 3
57375: NEG
57376: PUSH
57377: LD_INT 0
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 3
57386: NEG
57387: PUSH
57388: LD_INT 1
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57427: LD_ADDR_VAR 0 44
57431: PUSH
57432: LD_INT 0
57434: PUSH
57435: LD_INT 0
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: LD_INT 1
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: LD_INT 1
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: LD_INT 1
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: NEG
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: NEG
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: LD_INT 2
57512: NEG
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 1
57520: PUSH
57521: LD_INT 1
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 2
57531: PUSH
57532: LD_INT 0
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 2
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 2
57551: PUSH
57552: LD_INT 2
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: LD_INT 2
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 2
57582: NEG
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 2
57593: NEG
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 2
57605: NEG
57606: PUSH
57607: LD_INT 2
57609: NEG
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: LD_INT 2
57617: NEG
57618: PUSH
57619: LD_INT 3
57621: NEG
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 2
57629: PUSH
57630: LD_INT 1
57632: NEG
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 3
57640: PUSH
57641: LD_INT 0
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 3
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 3
57660: PUSH
57661: LD_INT 2
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 3
57670: PUSH
57671: LD_INT 3
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 2
57680: PUSH
57681: LD_INT 3
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 2
57690: NEG
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 3
57701: NEG
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 3
57712: NEG
57713: PUSH
57714: LD_INT 1
57716: NEG
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 3
57724: NEG
57725: PUSH
57726: LD_INT 2
57728: NEG
57729: PUSH
57730: EMPTY
57731: LIST
57732: LIST
57733: PUSH
57734: LD_INT 3
57736: NEG
57737: PUSH
57738: LD_INT 3
57740: NEG
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57777: LD_ADDR_VAR 0 45
57781: PUSH
57782: LD_INT 0
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: LD_INT 1
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 1
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: PUSH
57816: LD_INT 1
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 1
57835: NEG
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 1
57858: NEG
57859: PUSH
57860: LD_INT 2
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: LD_INT 2
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 2
57892: PUSH
57893: LD_INT 1
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: LD_INT 2
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 1
57912: PUSH
57913: LD_INT 2
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: LD_INT 2
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: NEG
57933: PUSH
57934: LD_INT 1
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 2
57943: NEG
57944: PUSH
57945: LD_INT 1
57947: NEG
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 2
57955: NEG
57956: PUSH
57957: LD_INT 2
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 2
57967: NEG
57968: PUSH
57969: LD_INT 3
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: NEG
57980: PUSH
57981: LD_INT 3
57983: NEG
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 0
57991: PUSH
57992: LD_INT 3
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 1
58002: PUSH
58003: LD_INT 2
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 3
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 3
58023: PUSH
58024: LD_INT 3
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 2
58033: PUSH
58034: LD_INT 3
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 1
58043: PUSH
58044: LD_INT 3
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 0
58053: PUSH
58054: LD_INT 3
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: LD_INT 2
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 3
58074: NEG
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 3
58086: NEG
58087: PUSH
58088: LD_INT 3
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58127: LD_ADDR_VAR 0 46
58131: PUSH
58132: LD_INT 0
58134: PUSH
58135: LD_INT 0
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 0
58144: PUSH
58145: LD_INT 1
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 1
58155: PUSH
58156: LD_INT 0
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: PUSH
58163: LD_INT 1
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 1
58185: NEG
58186: PUSH
58187: LD_INT 0
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 1
58196: NEG
58197: PUSH
58198: LD_INT 1
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: LD_INT 2
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 0
58220: PUSH
58221: LD_INT 2
58223: NEG
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 2
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 2
58252: PUSH
58253: LD_INT 1
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: PUSH
58263: LD_INT 2
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: LD_INT 2
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 2
58293: NEG
58294: PUSH
58295: LD_INT 0
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: PUSH
58302: LD_INT 2
58304: NEG
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 1
58316: NEG
58317: PUSH
58318: LD_INT 3
58320: NEG
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: LD_INT 3
58331: NEG
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 1
58339: PUSH
58340: LD_INT 2
58342: NEG
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 2
58350: PUSH
58351: LD_INT 1
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 3
58361: PUSH
58362: LD_INT 0
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 3
58371: PUSH
58372: LD_INT 1
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: LD_INT 3
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 0
58391: PUSH
58392: LD_INT 3
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: NEG
58402: PUSH
58403: LD_INT 2
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 2
58412: NEG
58413: PUSH
58414: LD_INT 1
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 3
58423: NEG
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 3
58434: NEG
58435: PUSH
58436: LD_INT 1
58438: NEG
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58475: LD_ADDR_VAR 0 47
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: LD_INT 0
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 0
58492: PUSH
58493: LD_INT 1
58495: NEG
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 1
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 0
58523: PUSH
58524: LD_INT 1
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 1
58533: NEG
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 1
58544: NEG
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 1
58556: NEG
58557: PUSH
58558: LD_INT 2
58560: NEG
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 0
58568: PUSH
58569: LD_INT 2
58571: NEG
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: LD_INT 1
58582: NEG
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 2
58590: NEG
58591: PUSH
58592: LD_INT 1
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 2
58602: NEG
58603: PUSH
58604: LD_INT 2
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58626: LD_ADDR_VAR 0 48
58630: PUSH
58631: LD_INT 0
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: LD_INT 1
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: LD_INT 0
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: PUSH
58693: LD_INT 1
58695: NEG
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: LD_INT 2
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 0
58719: PUSH
58720: LD_INT 2
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: LD_INT 1
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 2
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 2
58751: PUSH
58752: LD_INT 1
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58773: LD_ADDR_VAR 0 49
58777: PUSH
58778: LD_INT 0
58780: PUSH
58781: LD_INT 0
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: LD_INT 1
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 1
58801: PUSH
58802: LD_INT 0
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 1
58811: PUSH
58812: LD_INT 1
58814: PUSH
58815: EMPTY
58816: LIST
58817: LIST
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: LD_INT 1
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: LD_INT 0
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 1
58842: NEG
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 1
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 2
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 2
58875: PUSH
58876: LD_INT 1
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 2
58885: PUSH
58886: LD_INT 2
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 1
58895: PUSH
58896: LD_INT 2
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58917: LD_ADDR_VAR 0 50
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: LD_INT 0
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 0
58934: PUSH
58935: LD_INT 1
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 1
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: PUSH
58953: LD_INT 1
58955: PUSH
58956: LD_INT 1
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: LD_INT 1
58975: NEG
58976: PUSH
58977: LD_INT 0
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: LD_INT 1
58990: NEG
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 2
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 2
59008: PUSH
59009: LD_INT 2
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 1
59018: PUSH
59019: LD_INT 2
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: LD_INT 2
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: LD_INT 1
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59061: LD_ADDR_VAR 0 51
59065: PUSH
59066: LD_INT 0
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 0
59078: PUSH
59079: LD_INT 1
59081: NEG
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 1
59089: PUSH
59090: LD_INT 0
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 1
59099: PUSH
59100: LD_INT 1
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 0
59109: PUSH
59110: LD_INT 1
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 1
59119: NEG
59120: PUSH
59121: LD_INT 0
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 1
59130: NEG
59131: PUSH
59132: LD_INT 1
59134: NEG
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 1
59142: PUSH
59143: LD_INT 2
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: LD_INT 2
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 2
59173: NEG
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 2
59184: NEG
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59208: LD_ADDR_VAR 0 52
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: LD_INT 0
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 1
59236: PUSH
59237: LD_INT 0
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: LD_INT 1
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 1
59277: NEG
59278: PUSH
59279: LD_INT 1
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 1
59289: NEG
59290: PUSH
59291: LD_INT 2
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 1
59301: NEG
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 2
59312: NEG
59313: PUSH
59314: LD_INT 0
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 2
59323: NEG
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 2
59335: NEG
59336: PUSH
59337: LD_INT 2
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59359: LD_ADDR_VAR 0 53
59363: PUSH
59364: LD_INT 0
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: LD_INT 1
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: LD_INT 1
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: LD_INT 1
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 1
59417: NEG
59418: PUSH
59419: LD_INT 0
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: LD_INT 1
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: NEG
59441: PUSH
59442: LD_INT 2
59444: NEG
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: LD_INT 2
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 1
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 2
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 2
59484: PUSH
59485: LD_INT 1
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 2
59494: PUSH
59495: LD_INT 2
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 1
59504: PUSH
59505: LD_INT 2
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 0
59514: PUSH
59515: LD_INT 2
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 1
59524: NEG
59525: PUSH
59526: LD_INT 1
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 2
59535: NEG
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: EMPTY
59541: LIST
59542: LIST
59543: PUSH
59544: LD_INT 2
59546: NEG
59547: PUSH
59548: LD_INT 1
59550: NEG
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 2
59558: NEG
59559: PUSH
59560: LD_INT 2
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59589: LD_ADDR_VAR 0 54
59593: PUSH
59594: LD_INT 0
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 0
59606: PUSH
59607: LD_INT 1
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: LD_INT 0
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 1
59627: PUSH
59628: LD_INT 1
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 0
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: NEG
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: LD_INT 2
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 0
59682: PUSH
59683: LD_INT 2
59685: NEG
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: LD_INT 1
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 2
59704: PUSH
59705: LD_INT 0
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 2
59714: PUSH
59715: LD_INT 1
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 2
59724: PUSH
59725: LD_INT 2
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 1
59734: PUSH
59735: LD_INT 2
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: LD_INT 2
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: LD_INT 1
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 2
59765: NEG
59766: PUSH
59767: LD_INT 0
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 2
59776: NEG
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 2
59788: NEG
59789: PUSH
59790: LD_INT 2
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59819: LD_ADDR_VAR 0 55
59823: PUSH
59824: LD_INT 0
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 0
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 1
59857: PUSH
59858: LD_INT 1
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: LD_INT 1
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 1
59877: NEG
59878: PUSH
59879: LD_INT 0
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: NEG
59889: PUSH
59890: LD_INT 1
59892: NEG
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: NEG
59901: PUSH
59902: LD_INT 2
59904: NEG
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 0
59912: PUSH
59913: LD_INT 2
59915: NEG
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 1
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 2
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 2
59944: PUSH
59945: LD_INT 1
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 2
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: LD_INT 2
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: LD_INT 1
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 2
59995: NEG
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 2
60006: NEG
60007: PUSH
60008: LD_INT 1
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 2
60018: NEG
60019: PUSH
60020: LD_INT 2
60022: NEG
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60049: LD_ADDR_VAR 0 56
60053: PUSH
60054: LD_INT 0
60056: PUSH
60057: LD_INT 0
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 0
60066: PUSH
60067: LD_INT 1
60069: NEG
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 1
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 1
60087: PUSH
60088: LD_INT 1
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 0
60097: PUSH
60098: LD_INT 1
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 1
60107: NEG
60108: PUSH
60109: LD_INT 0
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 1
60118: NEG
60119: PUSH
60120: LD_INT 1
60122: NEG
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 1
60130: NEG
60131: PUSH
60132: LD_INT 2
60134: NEG
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 0
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 1
60153: PUSH
60154: LD_INT 1
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 2
60164: PUSH
60165: LD_INT 0
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 2
60174: PUSH
60175: LD_INT 1
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 2
60184: PUSH
60185: LD_INT 2
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: LD_INT 2
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 0
60204: PUSH
60205: LD_INT 2
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 1
60214: NEG
60215: PUSH
60216: LD_INT 1
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 2
60225: NEG
60226: PUSH
60227: LD_INT 0
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 2
60236: NEG
60237: PUSH
60238: LD_INT 1
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 2
60248: NEG
60249: PUSH
60250: LD_INT 2
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60279: LD_ADDR_VAR 0 57
60283: PUSH
60284: LD_INT 0
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 0
60296: PUSH
60297: LD_INT 1
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 1
60307: PUSH
60308: LD_INT 0
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: LD_INT 1
60317: PUSH
60318: LD_INT 1
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: LD_INT 1
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: NEG
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: NEG
60349: PUSH
60350: LD_INT 1
60352: NEG
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 1
60360: NEG
60361: PUSH
60362: LD_INT 2
60364: NEG
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 0
60372: PUSH
60373: LD_INT 2
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 1
60383: PUSH
60384: LD_INT 1
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 2
60394: PUSH
60395: LD_INT 0
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 2
60404: PUSH
60405: LD_INT 1
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 2
60414: PUSH
60415: LD_INT 2
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: LD_INT 2
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: LD_INT 2
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 1
60444: NEG
60445: PUSH
60446: LD_INT 1
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 2
60455: NEG
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 2
60466: NEG
60467: PUSH
60468: LD_INT 1
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 2
60478: NEG
60479: PUSH
60480: LD_INT 2
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60509: LD_ADDR_VAR 0 58
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: LD_INT 0
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: LD_INT 1
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 1
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: LD_INT 1
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 1
60567: NEG
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 1
60578: NEG
60579: PUSH
60580: LD_INT 1
60582: NEG
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 1
60590: NEG
60591: PUSH
60592: LD_INT 2
60594: NEG
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: PUSH
60600: LD_INT 0
60602: PUSH
60603: LD_INT 2
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 1
60613: PUSH
60614: LD_INT 1
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 2
60624: PUSH
60625: LD_INT 0
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 2
60634: PUSH
60635: LD_INT 1
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 2
60644: PUSH
60645: LD_INT 2
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: LD_INT 2
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 0
60664: PUSH
60665: LD_INT 2
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 2
60685: NEG
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 2
60696: NEG
60697: PUSH
60698: LD_INT 1
60700: NEG
60701: PUSH
60702: EMPTY
60703: LIST
60704: LIST
60705: PUSH
60706: LD_INT 2
60708: NEG
60709: PUSH
60710: LD_INT 2
60712: NEG
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: LIST
60733: LIST
60734: LIST
60735: LIST
60736: LIST
60737: LIST
60738: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60739: LD_ADDR_VAR 0 59
60743: PUSH
60744: LD_INT 0
60746: PUSH
60747: LD_INT 0
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 0
60756: PUSH
60757: LD_INT 1
60759: NEG
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 1
60767: PUSH
60768: LD_INT 0
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 1
60777: PUSH
60778: LD_INT 1
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 0
60787: PUSH
60788: LD_INT 1
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: NEG
60798: PUSH
60799: LD_INT 0
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 1
60808: NEG
60809: PUSH
60810: LD_INT 1
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60827: LD_ADDR_VAR 0 60
60831: PUSH
60832: LD_INT 0
60834: PUSH
60835: LD_INT 0
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 0
60844: PUSH
60845: LD_INT 1
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 1
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 1
60865: PUSH
60866: LD_INT 1
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 0
60875: PUSH
60876: LD_INT 1
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 1
60885: NEG
60886: PUSH
60887: LD_INT 0
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 1
60896: NEG
60897: PUSH
60898: LD_INT 1
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60915: LD_ADDR_VAR 0 61
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: LD_INT 0
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 1
60943: PUSH
60944: LD_INT 0
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: PUSH
60954: LD_INT 1
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 0
60963: PUSH
60964: LD_INT 1
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 1
60973: NEG
60974: PUSH
60975: LD_INT 0
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 1
60984: NEG
60985: PUSH
60986: LD_INT 1
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61003: LD_ADDR_VAR 0 62
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: LD_INT 1
61023: NEG
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 1
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: PUSH
61042: LD_INT 1
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 0
61051: PUSH
61052: LD_INT 1
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 1
61061: NEG
61062: PUSH
61063: LD_INT 0
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 1
61072: NEG
61073: PUSH
61074: LD_INT 1
61076: NEG
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61091: LD_ADDR_VAR 0 63
61095: PUSH
61096: LD_INT 0
61098: PUSH
61099: LD_INT 0
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 1
61129: PUSH
61130: LD_INT 1
61132: PUSH
61133: EMPTY
61134: LIST
61135: LIST
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: LD_INT 1
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 1
61149: NEG
61150: PUSH
61151: LD_INT 0
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 1
61160: NEG
61161: PUSH
61162: LD_INT 1
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
61179: LD_ADDR_VAR 0 64
61183: PUSH
61184: LD_INT 0
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 0
61196: PUSH
61197: LD_INT 1
61199: NEG
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 1
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: LD_INT 1
61217: PUSH
61218: LD_INT 1
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 0
61227: PUSH
61228: LD_INT 1
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 1
61237: NEG
61238: PUSH
61239: LD_INT 0
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 1
61248: NEG
61249: PUSH
61250: LD_INT 1
61252: NEG
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: ST_TO_ADDR
// end ; 1 :
61267: GO 67164
61269: LD_INT 1
61271: DOUBLE
61272: EQUAL
61273: IFTRUE 61277
61275: GO 63900
61277: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61278: LD_ADDR_VAR 0 11
61282: PUSH
61283: LD_INT 1
61285: NEG
61286: PUSH
61287: LD_INT 3
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 0
61297: PUSH
61298: LD_INT 3
61300: NEG
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 1
61308: PUSH
61309: LD_INT 2
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: LIST
61321: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61322: LD_ADDR_VAR 0 12
61326: PUSH
61327: LD_INT 2
61329: PUSH
61330: LD_INT 1
61332: NEG
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 3
61340: PUSH
61341: LD_INT 0
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 3
61350: PUSH
61351: LD_INT 1
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: LIST
61362: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61363: LD_ADDR_VAR 0 13
61367: PUSH
61368: LD_INT 3
61370: PUSH
61371: LD_INT 2
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 3
61380: PUSH
61381: LD_INT 3
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 2
61390: PUSH
61391: LD_INT 3
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: LIST
61402: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61403: LD_ADDR_VAR 0 14
61407: PUSH
61408: LD_INT 1
61410: PUSH
61411: LD_INT 3
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: LD_INT 3
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: NEG
61431: PUSH
61432: LD_INT 2
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: LIST
61443: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61444: LD_ADDR_VAR 0 15
61448: PUSH
61449: LD_INT 2
61451: NEG
61452: PUSH
61453: LD_INT 1
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 3
61462: NEG
61463: PUSH
61464: LD_INT 0
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 3
61473: NEG
61474: PUSH
61475: LD_INT 1
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: EMPTY
61484: LIST
61485: LIST
61486: LIST
61487: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61488: LD_ADDR_VAR 0 16
61492: PUSH
61493: LD_INT 2
61495: NEG
61496: PUSH
61497: LD_INT 3
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 3
61507: NEG
61508: PUSH
61509: LD_INT 2
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 3
61519: NEG
61520: PUSH
61521: LD_INT 3
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: LIST
61533: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61534: LD_ADDR_VAR 0 17
61538: PUSH
61539: LD_INT 1
61541: NEG
61542: PUSH
61543: LD_INT 3
61545: NEG
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: LD_INT 3
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 1
61564: PUSH
61565: LD_INT 2
61567: NEG
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: LIST
61577: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61578: LD_ADDR_VAR 0 18
61582: PUSH
61583: LD_INT 2
61585: PUSH
61586: LD_INT 1
61588: NEG
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 3
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 3
61606: PUSH
61607: LD_INT 1
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: LIST
61618: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61619: LD_ADDR_VAR 0 19
61623: PUSH
61624: LD_INT 3
61626: PUSH
61627: LD_INT 2
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 3
61636: PUSH
61637: LD_INT 3
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 2
61646: PUSH
61647: LD_INT 3
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: LIST
61658: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61659: LD_ADDR_VAR 0 20
61663: PUSH
61664: LD_INT 1
61666: PUSH
61667: LD_INT 3
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 0
61676: PUSH
61677: LD_INT 3
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 1
61686: NEG
61687: PUSH
61688: LD_INT 2
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: LIST
61699: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61700: LD_ADDR_VAR 0 21
61704: PUSH
61705: LD_INT 2
61707: NEG
61708: PUSH
61709: LD_INT 1
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 3
61718: NEG
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 3
61729: NEG
61730: PUSH
61731: LD_INT 1
61733: NEG
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: LIST
61743: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61744: LD_ADDR_VAR 0 22
61748: PUSH
61749: LD_INT 2
61751: NEG
61752: PUSH
61753: LD_INT 3
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 3
61763: NEG
61764: PUSH
61765: LD_INT 2
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 3
61775: NEG
61776: PUSH
61777: LD_INT 3
61779: NEG
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: LIST
61789: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61790: LD_ADDR_VAR 0 23
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: LD_INT 3
61800: NEG
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 1
61808: NEG
61809: PUSH
61810: LD_INT 4
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 1
61820: PUSH
61821: LD_INT 3
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: LIST
61833: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61834: LD_ADDR_VAR 0 24
61838: PUSH
61839: LD_INT 3
61841: PUSH
61842: LD_INT 0
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 3
61851: PUSH
61852: LD_INT 1
61854: NEG
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 4
61862: PUSH
61863: LD_INT 1
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: LIST
61874: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61875: LD_ADDR_VAR 0 25
61879: PUSH
61880: LD_INT 3
61882: PUSH
61883: LD_INT 3
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 4
61892: PUSH
61893: LD_INT 3
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 3
61902: PUSH
61903: LD_INT 4
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: LIST
61914: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61915: LD_ADDR_VAR 0 26
61919: PUSH
61920: LD_INT 0
61922: PUSH
61923: LD_INT 3
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 1
61932: PUSH
61933: LD_INT 4
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 1
61942: NEG
61943: PUSH
61944: LD_INT 3
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: LIST
61955: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61956: LD_ADDR_VAR 0 27
61960: PUSH
61961: LD_INT 3
61963: NEG
61964: PUSH
61965: LD_INT 0
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: LD_INT 3
61974: NEG
61975: PUSH
61976: LD_INT 1
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 4
61985: NEG
61986: PUSH
61987: LD_INT 1
61989: NEG
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: LIST
61999: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
62000: LD_ADDR_VAR 0 28
62004: PUSH
62005: LD_INT 3
62007: NEG
62008: PUSH
62009: LD_INT 3
62011: NEG
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 3
62019: NEG
62020: PUSH
62021: LD_INT 4
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 4
62031: NEG
62032: PUSH
62033: LD_INT 3
62035: NEG
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: LIST
62045: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
62046: LD_ADDR_VAR 0 29
62050: PUSH
62051: LD_INT 1
62053: NEG
62054: PUSH
62055: LD_INT 3
62057: NEG
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: LD_INT 3
62068: NEG
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 1
62076: PUSH
62077: LD_INT 2
62079: NEG
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: NEG
62088: PUSH
62089: LD_INT 4
62091: NEG
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 0
62099: PUSH
62100: LD_INT 4
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 1
62110: PUSH
62111: LD_INT 3
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 1
62121: NEG
62122: PUSH
62123: LD_INT 5
62125: NEG
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 0
62133: PUSH
62134: LD_INT 5
62136: NEG
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 1
62144: PUSH
62145: LD_INT 4
62147: NEG
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 1
62155: NEG
62156: PUSH
62157: LD_INT 6
62159: NEG
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 0
62167: PUSH
62168: LD_INT 6
62170: NEG
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 1
62178: PUSH
62179: LD_INT 5
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
62201: LD_ADDR_VAR 0 30
62205: PUSH
62206: LD_INT 2
62208: PUSH
62209: LD_INT 1
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 3
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 3
62229: PUSH
62230: LD_INT 1
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 3
62239: PUSH
62240: LD_INT 1
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 4
62250: PUSH
62251: LD_INT 0
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: LD_INT 4
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 4
62270: PUSH
62271: LD_INT 1
62273: NEG
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 5
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 5
62291: PUSH
62292: LD_INT 1
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 5
62301: PUSH
62302: LD_INT 1
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 6
62312: PUSH
62313: LD_INT 0
62315: PUSH
62316: EMPTY
62317: LIST
62318: LIST
62319: PUSH
62320: LD_INT 6
62322: PUSH
62323: LD_INT 1
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62344: LD_ADDR_VAR 0 31
62348: PUSH
62349: LD_INT 3
62351: PUSH
62352: LD_INT 2
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 3
62361: PUSH
62362: LD_INT 3
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 2
62371: PUSH
62372: LD_INT 3
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 4
62381: PUSH
62382: LD_INT 3
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 4
62391: PUSH
62392: LD_INT 4
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 3
62401: PUSH
62402: LD_INT 4
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 5
62411: PUSH
62412: LD_INT 4
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 5
62421: PUSH
62422: LD_INT 5
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 4
62431: PUSH
62432: LD_INT 5
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 6
62441: PUSH
62442: LD_INT 5
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 6
62451: PUSH
62452: LD_INT 6
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 5
62461: PUSH
62462: LD_INT 6
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62483: LD_ADDR_VAR 0 32
62487: PUSH
62488: LD_INT 1
62490: PUSH
62491: LD_INT 3
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 0
62500: PUSH
62501: LD_INT 3
62503: PUSH
62504: EMPTY
62505: LIST
62506: LIST
62507: PUSH
62508: LD_INT 1
62510: NEG
62511: PUSH
62512: LD_INT 2
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 1
62521: PUSH
62522: LD_INT 4
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: LD_INT 4
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 1
62541: NEG
62542: PUSH
62543: LD_INT 3
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 1
62552: PUSH
62553: LD_INT 5
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: LD_INT 5
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 1
62572: NEG
62573: PUSH
62574: LD_INT 4
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 1
62583: PUSH
62584: LD_INT 6
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: LD_INT 6
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 1
62603: NEG
62604: PUSH
62605: LD_INT 5
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62626: LD_ADDR_VAR 0 33
62630: PUSH
62631: LD_INT 2
62633: NEG
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 3
62644: NEG
62645: PUSH
62646: LD_INT 0
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 3
62655: NEG
62656: PUSH
62657: LD_INT 1
62659: NEG
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 3
62667: NEG
62668: PUSH
62669: LD_INT 1
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 4
62678: NEG
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 4
62689: NEG
62690: PUSH
62691: LD_INT 1
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 4
62701: NEG
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 5
62712: NEG
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 5
62723: NEG
62724: PUSH
62725: LD_INT 1
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 5
62735: NEG
62736: PUSH
62737: LD_INT 1
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 6
62746: NEG
62747: PUSH
62748: LD_INT 0
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 6
62757: NEG
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62781: LD_ADDR_VAR 0 34
62785: PUSH
62786: LD_INT 2
62788: NEG
62789: PUSH
62790: LD_INT 3
62792: NEG
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 3
62800: NEG
62801: PUSH
62802: LD_INT 2
62804: NEG
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 3
62812: NEG
62813: PUSH
62814: LD_INT 3
62816: NEG
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 3
62824: NEG
62825: PUSH
62826: LD_INT 4
62828: NEG
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 4
62836: NEG
62837: PUSH
62838: LD_INT 3
62840: NEG
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 4
62848: NEG
62849: PUSH
62850: LD_INT 4
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 4
62860: NEG
62861: PUSH
62862: LD_INT 5
62864: NEG
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 5
62872: NEG
62873: PUSH
62874: LD_INT 4
62876: NEG
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 5
62884: NEG
62885: PUSH
62886: LD_INT 5
62888: NEG
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 5
62896: NEG
62897: PUSH
62898: LD_INT 6
62900: NEG
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 6
62908: NEG
62909: PUSH
62910: LD_INT 5
62912: NEG
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 6
62920: NEG
62921: PUSH
62922: LD_INT 6
62924: NEG
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: EMPTY
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62944: LD_ADDR_VAR 0 41
62948: PUSH
62949: LD_INT 0
62951: PUSH
62952: LD_INT 2
62954: NEG
62955: PUSH
62956: EMPTY
62957: LIST
62958: LIST
62959: PUSH
62960: LD_INT 1
62962: NEG
62963: PUSH
62964: LD_INT 3
62966: NEG
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 1
62974: PUSH
62975: LD_INT 2
62977: NEG
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: LIST
62987: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62988: LD_ADDR_VAR 0 42
62992: PUSH
62993: LD_INT 2
62995: PUSH
62996: LD_INT 0
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: PUSH
63003: LD_INT 2
63005: PUSH
63006: LD_INT 1
63008: NEG
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 3
63016: PUSH
63017: LD_INT 1
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: LIST
63028: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
63029: LD_ADDR_VAR 0 43
63033: PUSH
63034: LD_INT 2
63036: PUSH
63037: LD_INT 2
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 3
63046: PUSH
63047: LD_INT 2
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 2
63056: PUSH
63057: LD_INT 3
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: LIST
63068: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
63069: LD_ADDR_VAR 0 44
63073: PUSH
63074: LD_INT 0
63076: PUSH
63077: LD_INT 2
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 1
63086: PUSH
63087: LD_INT 3
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 1
63096: NEG
63097: PUSH
63098: LD_INT 2
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: LIST
63109: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
63110: LD_ADDR_VAR 0 45
63114: PUSH
63115: LD_INT 2
63117: NEG
63118: PUSH
63119: LD_INT 0
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 2
63128: NEG
63129: PUSH
63130: LD_INT 1
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: PUSH
63137: LD_INT 3
63139: NEG
63140: PUSH
63141: LD_INT 1
63143: NEG
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: LIST
63153: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
63154: LD_ADDR_VAR 0 46
63158: PUSH
63159: LD_INT 2
63161: NEG
63162: PUSH
63163: LD_INT 2
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 2
63173: NEG
63174: PUSH
63175: LD_INT 3
63177: NEG
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 3
63185: NEG
63186: PUSH
63187: LD_INT 2
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: LIST
63199: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
63200: LD_ADDR_VAR 0 47
63204: PUSH
63205: LD_INT 2
63207: NEG
63208: PUSH
63209: LD_INT 3
63211: NEG
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 1
63219: NEG
63220: PUSH
63221: LD_INT 3
63223: NEG
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63233: LD_ADDR_VAR 0 48
63237: PUSH
63238: LD_INT 1
63240: PUSH
63241: LD_INT 2
63243: NEG
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 2
63251: PUSH
63252: LD_INT 1
63254: NEG
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
63264: LD_ADDR_VAR 0 49
63268: PUSH
63269: LD_INT 3
63271: PUSH
63272: LD_INT 1
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 3
63281: PUSH
63282: LD_INT 2
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63293: LD_ADDR_VAR 0 50
63297: PUSH
63298: LD_INT 2
63300: PUSH
63301: LD_INT 3
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 1
63310: PUSH
63311: LD_INT 3
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63322: LD_ADDR_VAR 0 51
63326: PUSH
63327: LD_INT 1
63329: NEG
63330: PUSH
63331: LD_INT 2
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 2
63340: NEG
63341: PUSH
63342: LD_INT 1
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63353: LD_ADDR_VAR 0 52
63357: PUSH
63358: LD_INT 3
63360: NEG
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 3
63372: NEG
63373: PUSH
63374: LD_INT 2
63376: NEG
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63386: LD_ADDR_VAR 0 53
63390: PUSH
63391: LD_INT 1
63393: NEG
63394: PUSH
63395: LD_INT 3
63397: NEG
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 0
63405: PUSH
63406: LD_INT 3
63408: NEG
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 1
63416: PUSH
63417: LD_INT 2
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: LIST
63429: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63430: LD_ADDR_VAR 0 54
63434: PUSH
63435: LD_INT 2
63437: PUSH
63438: LD_INT 1
63440: NEG
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 3
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 3
63458: PUSH
63459: LD_INT 1
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: LIST
63470: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63471: LD_ADDR_VAR 0 55
63475: PUSH
63476: LD_INT 3
63478: PUSH
63479: LD_INT 2
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 3
63488: PUSH
63489: LD_INT 3
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 2
63498: PUSH
63499: LD_INT 3
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: LIST
63510: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63511: LD_ADDR_VAR 0 56
63515: PUSH
63516: LD_INT 1
63518: PUSH
63519: LD_INT 3
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 0
63528: PUSH
63529: LD_INT 3
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 1
63538: NEG
63539: PUSH
63540: LD_INT 2
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: LIST
63551: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63552: LD_ADDR_VAR 0 57
63556: PUSH
63557: LD_INT 2
63559: NEG
63560: PUSH
63561: LD_INT 1
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 3
63570: NEG
63571: PUSH
63572: LD_INT 0
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 3
63581: NEG
63582: PUSH
63583: LD_INT 1
63585: NEG
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: LIST
63595: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63596: LD_ADDR_VAR 0 58
63600: PUSH
63601: LD_INT 2
63603: NEG
63604: PUSH
63605: LD_INT 3
63607: NEG
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 3
63615: NEG
63616: PUSH
63617: LD_INT 2
63619: NEG
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 3
63627: NEG
63628: PUSH
63629: LD_INT 3
63631: NEG
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: LIST
63641: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63642: LD_ADDR_VAR 0 59
63646: PUSH
63647: LD_INT 1
63649: NEG
63650: PUSH
63651: LD_INT 2
63653: NEG
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 0
63661: PUSH
63662: LD_INT 2
63664: NEG
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 1
63672: PUSH
63673: LD_INT 1
63675: NEG
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: LIST
63685: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63686: LD_ADDR_VAR 0 60
63690: PUSH
63691: LD_INT 1
63693: PUSH
63694: LD_INT 1
63696: NEG
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 2
63704: PUSH
63705: LD_INT 0
63707: PUSH
63708: EMPTY
63709: LIST
63710: LIST
63711: PUSH
63712: LD_INT 2
63714: PUSH
63715: LD_INT 1
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: LIST
63726: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63727: LD_ADDR_VAR 0 61
63731: PUSH
63732: LD_INT 2
63734: PUSH
63735: LD_INT 1
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: LD_INT 2
63744: PUSH
63745: LD_INT 2
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 1
63754: PUSH
63755: LD_INT 2
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: LIST
63766: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63767: LD_ADDR_VAR 0 62
63771: PUSH
63772: LD_INT 1
63774: PUSH
63775: LD_INT 2
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 0
63784: PUSH
63785: LD_INT 2
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 1
63794: NEG
63795: PUSH
63796: LD_INT 1
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: LIST
63807: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63808: LD_ADDR_VAR 0 63
63812: PUSH
63813: LD_INT 1
63815: NEG
63816: PUSH
63817: LD_INT 1
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 2
63826: NEG
63827: PUSH
63828: LD_INT 0
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 2
63837: NEG
63838: PUSH
63839: LD_INT 1
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: LIST
63851: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63852: LD_ADDR_VAR 0 64
63856: PUSH
63857: LD_INT 1
63859: NEG
63860: PUSH
63861: LD_INT 2
63863: NEG
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 2
63871: NEG
63872: PUSH
63873: LD_INT 1
63875: NEG
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 2
63883: NEG
63884: PUSH
63885: LD_INT 2
63887: NEG
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: LIST
63897: ST_TO_ADDR
// end ; 2 :
63898: GO 67164
63900: LD_INT 2
63902: DOUBLE
63903: EQUAL
63904: IFTRUE 63908
63906: GO 67163
63908: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63909: LD_ADDR_VAR 0 29
63913: PUSH
63914: LD_INT 4
63916: PUSH
63917: LD_INT 0
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 4
63926: PUSH
63927: LD_INT 1
63929: NEG
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 5
63937: PUSH
63938: LD_INT 0
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 5
63947: PUSH
63948: LD_INT 1
63950: PUSH
63951: EMPTY
63952: LIST
63953: LIST
63954: PUSH
63955: LD_INT 4
63957: PUSH
63958: LD_INT 1
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 3
63967: PUSH
63968: LD_INT 0
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 3
63977: PUSH
63978: LD_INT 1
63980: NEG
63981: PUSH
63982: EMPTY
63983: LIST
63984: LIST
63985: PUSH
63986: LD_INT 3
63988: PUSH
63989: LD_INT 2
63991: NEG
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 5
63999: PUSH
64000: LD_INT 2
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 3
64009: PUSH
64010: LD_INT 3
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 3
64019: PUSH
64020: LD_INT 2
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 4
64029: PUSH
64030: LD_INT 3
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 4
64039: PUSH
64040: LD_INT 4
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 3
64049: PUSH
64050: LD_INT 4
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 2
64059: PUSH
64060: LD_INT 3
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 2
64069: PUSH
64070: LD_INT 2
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 4
64079: PUSH
64080: LD_INT 2
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 2
64089: PUSH
64090: LD_INT 4
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: PUSH
64097: LD_INT 0
64099: PUSH
64100: LD_INT 4
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: PUSH
64107: LD_INT 0
64109: PUSH
64110: LD_INT 3
64112: PUSH
64113: EMPTY
64114: LIST
64115: LIST
64116: PUSH
64117: LD_INT 1
64119: PUSH
64120: LD_INT 4
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: LD_INT 1
64129: PUSH
64130: LD_INT 5
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 0
64139: PUSH
64140: LD_INT 5
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 1
64149: NEG
64150: PUSH
64151: LD_INT 4
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 1
64160: NEG
64161: PUSH
64162: LD_INT 3
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 2
64171: PUSH
64172: LD_INT 5
64174: PUSH
64175: EMPTY
64176: LIST
64177: LIST
64178: PUSH
64179: LD_INT 2
64181: NEG
64182: PUSH
64183: LD_INT 3
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 3
64192: NEG
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 3
64203: NEG
64204: PUSH
64205: LD_INT 1
64207: NEG
64208: PUSH
64209: EMPTY
64210: LIST
64211: LIST
64212: PUSH
64213: LD_INT 2
64215: NEG
64216: PUSH
64217: LD_INT 0
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: PUSH
64224: LD_INT 2
64226: NEG
64227: PUSH
64228: LD_INT 1
64230: PUSH
64231: EMPTY
64232: LIST
64233: LIST
64234: PUSH
64235: LD_INT 3
64237: NEG
64238: PUSH
64239: LD_INT 1
64241: PUSH
64242: EMPTY
64243: LIST
64244: LIST
64245: PUSH
64246: LD_INT 4
64248: NEG
64249: PUSH
64250: LD_INT 0
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 4
64259: NEG
64260: PUSH
64261: LD_INT 1
64263: NEG
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 4
64271: NEG
64272: PUSH
64273: LD_INT 2
64275: NEG
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 2
64283: NEG
64284: PUSH
64285: LD_INT 2
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 4
64294: NEG
64295: PUSH
64296: LD_INT 4
64298: NEG
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: PUSH
64304: LD_INT 4
64306: NEG
64307: PUSH
64308: LD_INT 5
64310: NEG
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 3
64318: NEG
64319: PUSH
64320: LD_INT 4
64322: NEG
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 3
64330: NEG
64331: PUSH
64332: LD_INT 3
64334: NEG
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 4
64342: NEG
64343: PUSH
64344: LD_INT 3
64346: NEG
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 5
64354: NEG
64355: PUSH
64356: LD_INT 4
64358: NEG
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 5
64366: NEG
64367: PUSH
64368: LD_INT 5
64370: NEG
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 3
64378: NEG
64379: PUSH
64380: LD_INT 5
64382: NEG
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 5
64390: NEG
64391: PUSH
64392: LD_INT 3
64394: NEG
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64447: LD_ADDR_VAR 0 30
64451: PUSH
64452: LD_INT 4
64454: PUSH
64455: LD_INT 4
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 4
64464: PUSH
64465: LD_INT 3
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 5
64474: PUSH
64475: LD_INT 4
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 5
64484: PUSH
64485: LD_INT 5
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 4
64494: PUSH
64495: LD_INT 5
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 3
64504: PUSH
64505: LD_INT 4
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 3
64514: PUSH
64515: LD_INT 3
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 5
64524: PUSH
64525: LD_INT 3
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 3
64534: PUSH
64535: LD_INT 5
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 0
64544: PUSH
64545: LD_INT 3
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 0
64554: PUSH
64555: LD_INT 2
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 1
64564: PUSH
64565: LD_INT 3
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 1
64574: PUSH
64575: LD_INT 4
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: LD_INT 4
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 1
64594: NEG
64595: PUSH
64596: LD_INT 3
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 1
64605: NEG
64606: PUSH
64607: LD_INT 2
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 2
64616: PUSH
64617: LD_INT 4
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 2
64626: NEG
64627: PUSH
64628: LD_INT 2
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 4
64637: NEG
64638: PUSH
64639: LD_INT 0
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 4
64648: NEG
64649: PUSH
64650: LD_INT 1
64652: NEG
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 3
64660: NEG
64661: PUSH
64662: LD_INT 0
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 3
64671: NEG
64672: PUSH
64673: LD_INT 1
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 4
64682: NEG
64683: PUSH
64684: LD_INT 1
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 5
64693: NEG
64694: PUSH
64695: LD_INT 0
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 5
64704: NEG
64705: PUSH
64706: LD_INT 1
64708: NEG
64709: PUSH
64710: EMPTY
64711: LIST
64712: LIST
64713: PUSH
64714: LD_INT 5
64716: NEG
64717: PUSH
64718: LD_INT 2
64720: NEG
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 3
64728: NEG
64729: PUSH
64730: LD_INT 2
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 3
64739: NEG
64740: PUSH
64741: LD_INT 3
64743: NEG
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 3
64751: NEG
64752: PUSH
64753: LD_INT 4
64755: NEG
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 2
64763: NEG
64764: PUSH
64765: LD_INT 3
64767: NEG
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 2
64775: NEG
64776: PUSH
64777: LD_INT 2
64779: NEG
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: PUSH
64785: LD_INT 3
64787: NEG
64788: PUSH
64789: LD_INT 2
64791: NEG
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 4
64799: NEG
64800: PUSH
64801: LD_INT 3
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 4
64811: NEG
64812: PUSH
64813: LD_INT 4
64815: NEG
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 2
64823: NEG
64824: PUSH
64825: LD_INT 4
64827: NEG
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 4
64835: NEG
64836: PUSH
64837: LD_INT 2
64839: NEG
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 0
64847: PUSH
64848: LD_INT 4
64850: NEG
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 0
64858: PUSH
64859: LD_INT 5
64861: NEG
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 1
64869: PUSH
64870: LD_INT 4
64872: NEG
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 1
64880: PUSH
64881: LD_INT 3
64883: NEG
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 0
64891: PUSH
64892: LD_INT 3
64894: NEG
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 1
64902: NEG
64903: PUSH
64904: LD_INT 4
64906: NEG
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 1
64914: NEG
64915: PUSH
64916: LD_INT 5
64918: NEG
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 2
64926: PUSH
64927: LD_INT 3
64929: NEG
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 2
64937: NEG
64938: PUSH
64939: LD_INT 5
64941: NEG
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64994: LD_ADDR_VAR 0 31
64998: PUSH
64999: LD_INT 0
65001: PUSH
65002: LD_INT 4
65004: PUSH
65005: EMPTY
65006: LIST
65007: LIST
65008: PUSH
65009: LD_INT 0
65011: PUSH
65012: LD_INT 3
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 1
65021: PUSH
65022: LD_INT 4
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 1
65031: PUSH
65032: LD_INT 5
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 0
65041: PUSH
65042: LD_INT 5
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 1
65051: NEG
65052: PUSH
65053: LD_INT 4
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 1
65062: NEG
65063: PUSH
65064: LD_INT 3
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 2
65073: PUSH
65074: LD_INT 5
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 2
65083: NEG
65084: PUSH
65085: LD_INT 3
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: LD_INT 3
65094: NEG
65095: PUSH
65096: LD_INT 0
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 3
65105: NEG
65106: PUSH
65107: LD_INT 1
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 2
65117: NEG
65118: PUSH
65119: LD_INT 0
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 2
65128: NEG
65129: PUSH
65130: LD_INT 1
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 3
65139: NEG
65140: PUSH
65141: LD_INT 1
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 4
65150: NEG
65151: PUSH
65152: LD_INT 0
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: LD_INT 4
65161: NEG
65162: PUSH
65163: LD_INT 1
65165: NEG
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 4
65173: NEG
65174: PUSH
65175: LD_INT 2
65177: NEG
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 2
65185: NEG
65186: PUSH
65187: LD_INT 2
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 4
65196: NEG
65197: PUSH
65198: LD_INT 4
65200: NEG
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 4
65208: NEG
65209: PUSH
65210: LD_INT 5
65212: NEG
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 3
65220: NEG
65221: PUSH
65222: LD_INT 4
65224: NEG
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 3
65232: NEG
65233: PUSH
65234: LD_INT 3
65236: NEG
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 4
65244: NEG
65245: PUSH
65246: LD_INT 3
65248: NEG
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 5
65256: NEG
65257: PUSH
65258: LD_INT 4
65260: NEG
65261: PUSH
65262: EMPTY
65263: LIST
65264: LIST
65265: PUSH
65266: LD_INT 5
65268: NEG
65269: PUSH
65270: LD_INT 5
65272: NEG
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 3
65280: NEG
65281: PUSH
65282: LD_INT 5
65284: NEG
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 5
65292: NEG
65293: PUSH
65294: LD_INT 3
65296: NEG
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 0
65304: PUSH
65305: LD_INT 3
65307: NEG
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 0
65315: PUSH
65316: LD_INT 4
65318: NEG
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 1
65326: PUSH
65327: LD_INT 3
65329: NEG
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 1
65337: PUSH
65338: LD_INT 2
65340: NEG
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 0
65348: PUSH
65349: LD_INT 2
65351: NEG
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 1
65359: NEG
65360: PUSH
65361: LD_INT 3
65363: NEG
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 1
65371: NEG
65372: PUSH
65373: LD_INT 4
65375: NEG
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 2
65383: PUSH
65384: LD_INT 2
65386: NEG
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 2
65394: NEG
65395: PUSH
65396: LD_INT 4
65398: NEG
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 4
65406: PUSH
65407: LD_INT 0
65409: PUSH
65410: EMPTY
65411: LIST
65412: LIST
65413: PUSH
65414: LD_INT 4
65416: PUSH
65417: LD_INT 1
65419: NEG
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 5
65427: PUSH
65428: LD_INT 0
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 5
65437: PUSH
65438: LD_INT 1
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 4
65447: PUSH
65448: LD_INT 1
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 3
65457: PUSH
65458: LD_INT 0
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 3
65467: PUSH
65468: LD_INT 1
65470: NEG
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 3
65478: PUSH
65479: LD_INT 2
65481: NEG
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 5
65489: PUSH
65490: LD_INT 2
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65544: LD_ADDR_VAR 0 32
65548: PUSH
65549: LD_INT 4
65551: NEG
65552: PUSH
65553: LD_INT 0
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 4
65562: NEG
65563: PUSH
65564: LD_INT 1
65566: NEG
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 3
65574: NEG
65575: PUSH
65576: LD_INT 0
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 3
65585: NEG
65586: PUSH
65587: LD_INT 1
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 4
65596: NEG
65597: PUSH
65598: LD_INT 1
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 5
65607: NEG
65608: PUSH
65609: LD_INT 0
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 5
65618: NEG
65619: PUSH
65620: LD_INT 1
65622: NEG
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 5
65630: NEG
65631: PUSH
65632: LD_INT 2
65634: NEG
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 3
65642: NEG
65643: PUSH
65644: LD_INT 2
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 3
65653: NEG
65654: PUSH
65655: LD_INT 3
65657: NEG
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 3
65665: NEG
65666: PUSH
65667: LD_INT 4
65669: NEG
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 2
65677: NEG
65678: PUSH
65679: LD_INT 3
65681: NEG
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 2
65689: NEG
65690: PUSH
65691: LD_INT 2
65693: NEG
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 3
65701: NEG
65702: PUSH
65703: LD_INT 2
65705: NEG
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 4
65713: NEG
65714: PUSH
65715: LD_INT 3
65717: NEG
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 4
65725: NEG
65726: PUSH
65727: LD_INT 4
65729: NEG
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 2
65737: NEG
65738: PUSH
65739: LD_INT 4
65741: NEG
65742: PUSH
65743: EMPTY
65744: LIST
65745: LIST
65746: PUSH
65747: LD_INT 4
65749: NEG
65750: PUSH
65751: LD_INT 2
65753: NEG
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PUSH
65759: LD_INT 0
65761: PUSH
65762: LD_INT 4
65764: NEG
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 0
65772: PUSH
65773: LD_INT 5
65775: NEG
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 1
65783: PUSH
65784: LD_INT 4
65786: NEG
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: PUSH
65792: LD_INT 1
65794: PUSH
65795: LD_INT 3
65797: NEG
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 0
65805: PUSH
65806: LD_INT 3
65808: NEG
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: PUSH
65814: LD_INT 1
65816: NEG
65817: PUSH
65818: LD_INT 4
65820: NEG
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 1
65828: NEG
65829: PUSH
65830: LD_INT 5
65832: NEG
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 2
65840: PUSH
65841: LD_INT 3
65843: NEG
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 2
65851: NEG
65852: PUSH
65853: LD_INT 5
65855: NEG
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 3
65863: PUSH
65864: LD_INT 0
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 3
65873: PUSH
65874: LD_INT 1
65876: NEG
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 4
65884: PUSH
65885: LD_INT 0
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 4
65894: PUSH
65895: LD_INT 1
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 3
65904: PUSH
65905: LD_INT 1
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 2
65914: PUSH
65915: LD_INT 0
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 2
65924: PUSH
65925: LD_INT 1
65927: NEG
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 2
65935: PUSH
65936: LD_INT 2
65938: NEG
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 4
65946: PUSH
65947: LD_INT 2
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 4
65956: PUSH
65957: LD_INT 4
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 4
65966: PUSH
65967: LD_INT 3
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 5
65976: PUSH
65977: LD_INT 4
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 5
65986: PUSH
65987: LD_INT 5
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 4
65996: PUSH
65997: LD_INT 5
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 3
66006: PUSH
66007: LD_INT 4
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 3
66016: PUSH
66017: LD_INT 3
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 5
66026: PUSH
66027: LD_INT 3
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 3
66036: PUSH
66037: LD_INT 5
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
66091: LD_ADDR_VAR 0 33
66095: PUSH
66096: LD_INT 4
66098: NEG
66099: PUSH
66100: LD_INT 4
66102: NEG
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 4
66110: NEG
66111: PUSH
66112: LD_INT 5
66114: NEG
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 3
66122: NEG
66123: PUSH
66124: LD_INT 4
66126: NEG
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: PUSH
66132: LD_INT 3
66134: NEG
66135: PUSH
66136: LD_INT 3
66138: NEG
66139: PUSH
66140: EMPTY
66141: LIST
66142: LIST
66143: PUSH
66144: LD_INT 4
66146: NEG
66147: PUSH
66148: LD_INT 3
66150: NEG
66151: PUSH
66152: EMPTY
66153: LIST
66154: LIST
66155: PUSH
66156: LD_INT 5
66158: NEG
66159: PUSH
66160: LD_INT 4
66162: NEG
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 5
66170: NEG
66171: PUSH
66172: LD_INT 5
66174: NEG
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 3
66182: NEG
66183: PUSH
66184: LD_INT 5
66186: NEG
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 5
66194: NEG
66195: PUSH
66196: LD_INT 3
66198: NEG
66199: PUSH
66200: EMPTY
66201: LIST
66202: LIST
66203: PUSH
66204: LD_INT 0
66206: PUSH
66207: LD_INT 3
66209: NEG
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 0
66217: PUSH
66218: LD_INT 4
66220: NEG
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 1
66228: PUSH
66229: LD_INT 3
66231: NEG
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 1
66239: PUSH
66240: LD_INT 2
66242: NEG
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 0
66250: PUSH
66251: LD_INT 2
66253: NEG
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 1
66261: NEG
66262: PUSH
66263: LD_INT 3
66265: NEG
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 1
66273: NEG
66274: PUSH
66275: LD_INT 4
66277: NEG
66278: PUSH
66279: EMPTY
66280: LIST
66281: LIST
66282: PUSH
66283: LD_INT 2
66285: PUSH
66286: LD_INT 2
66288: NEG
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 2
66296: NEG
66297: PUSH
66298: LD_INT 4
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 4
66308: PUSH
66309: LD_INT 0
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 4
66318: PUSH
66319: LD_INT 1
66321: NEG
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 5
66329: PUSH
66330: LD_INT 0
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 5
66339: PUSH
66340: LD_INT 1
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 4
66349: PUSH
66350: LD_INT 1
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 3
66359: PUSH
66360: LD_INT 0
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 3
66369: PUSH
66370: LD_INT 1
66372: NEG
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 3
66380: PUSH
66381: LD_INT 2
66383: NEG
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 5
66391: PUSH
66392: LD_INT 2
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 3
66401: PUSH
66402: LD_INT 3
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 3
66411: PUSH
66412: LD_INT 2
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 4
66421: PUSH
66422: LD_INT 3
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 4
66431: PUSH
66432: LD_INT 4
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 3
66441: PUSH
66442: LD_INT 4
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 2
66451: PUSH
66452: LD_INT 3
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 2
66461: PUSH
66462: LD_INT 2
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 4
66471: PUSH
66472: LD_INT 2
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 2
66481: PUSH
66482: LD_INT 4
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 0
66491: PUSH
66492: LD_INT 4
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 0
66501: PUSH
66502: LD_INT 3
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 1
66511: PUSH
66512: LD_INT 4
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 1
66521: PUSH
66522: LD_INT 5
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 0
66531: PUSH
66532: LD_INT 5
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 1
66541: NEG
66542: PUSH
66543: LD_INT 4
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 1
66552: NEG
66553: PUSH
66554: LD_INT 3
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: LD_INT 2
66563: PUSH
66564: LD_INT 5
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 2
66573: NEG
66574: PUSH
66575: LD_INT 3
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66629: LD_ADDR_VAR 0 34
66633: PUSH
66634: LD_INT 0
66636: PUSH
66637: LD_INT 4
66639: NEG
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 0
66647: PUSH
66648: LD_INT 5
66650: NEG
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 1
66658: PUSH
66659: LD_INT 4
66661: NEG
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 1
66669: PUSH
66670: LD_INT 3
66672: NEG
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PUSH
66678: LD_INT 0
66680: PUSH
66681: LD_INT 3
66683: NEG
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 1
66691: NEG
66692: PUSH
66693: LD_INT 4
66695: NEG
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 1
66703: NEG
66704: PUSH
66705: LD_INT 5
66707: NEG
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 2
66715: PUSH
66716: LD_INT 3
66718: NEG
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: LD_INT 2
66726: NEG
66727: PUSH
66728: LD_INT 5
66730: NEG
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: PUSH
66736: LD_INT 3
66738: PUSH
66739: LD_INT 0
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 3
66748: PUSH
66749: LD_INT 1
66751: NEG
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: PUSH
66757: LD_INT 4
66759: PUSH
66760: LD_INT 0
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 4
66769: PUSH
66770: LD_INT 1
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 3
66779: PUSH
66780: LD_INT 1
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 2
66789: PUSH
66790: LD_INT 0
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 2
66799: PUSH
66800: LD_INT 1
66802: NEG
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 2
66810: PUSH
66811: LD_INT 2
66813: NEG
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 4
66821: PUSH
66822: LD_INT 2
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 4
66831: PUSH
66832: LD_INT 4
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 4
66841: PUSH
66842: LD_INT 3
66844: PUSH
66845: EMPTY
66846: LIST
66847: LIST
66848: PUSH
66849: LD_INT 5
66851: PUSH
66852: LD_INT 4
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 5
66861: PUSH
66862: LD_INT 5
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 4
66871: PUSH
66872: LD_INT 5
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 3
66881: PUSH
66882: LD_INT 4
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: LD_INT 3
66891: PUSH
66892: LD_INT 3
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 5
66901: PUSH
66902: LD_INT 3
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 3
66911: PUSH
66912: LD_INT 5
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 0
66921: PUSH
66922: LD_INT 3
66924: PUSH
66925: EMPTY
66926: LIST
66927: LIST
66928: PUSH
66929: LD_INT 0
66931: PUSH
66932: LD_INT 2
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 1
66941: PUSH
66942: LD_INT 3
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: PUSH
66949: LD_INT 1
66951: PUSH
66952: LD_INT 4
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 0
66961: PUSH
66962: LD_INT 4
66964: PUSH
66965: EMPTY
66966: LIST
66967: LIST
66968: PUSH
66969: LD_INT 1
66971: NEG
66972: PUSH
66973: LD_INT 3
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 1
66982: NEG
66983: PUSH
66984: LD_INT 2
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 2
66993: PUSH
66994: LD_INT 4
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: LD_INT 2
67003: NEG
67004: PUSH
67005: LD_INT 2
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 4
67014: NEG
67015: PUSH
67016: LD_INT 0
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 4
67025: NEG
67026: PUSH
67027: LD_INT 1
67029: NEG
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 3
67037: NEG
67038: PUSH
67039: LD_INT 0
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 3
67048: NEG
67049: PUSH
67050: LD_INT 1
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 4
67059: NEG
67060: PUSH
67061: LD_INT 1
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 5
67070: NEG
67071: PUSH
67072: LD_INT 0
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 5
67081: NEG
67082: PUSH
67083: LD_INT 1
67085: NEG
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 5
67093: NEG
67094: PUSH
67095: LD_INT 2
67097: NEG
67098: PUSH
67099: EMPTY
67100: LIST
67101: LIST
67102: PUSH
67103: LD_INT 3
67105: NEG
67106: PUSH
67107: LD_INT 2
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: LIST
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: LIST
67123: LIST
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: LIST
67140: LIST
67141: LIST
67142: LIST
67143: LIST
67144: LIST
67145: LIST
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: ST_TO_ADDR
// end ; end ;
67161: GO 67164
67163: POP
// case btype of b_depot , b_warehouse :
67164: LD_VAR 0 1
67168: PUSH
67169: LD_INT 0
67171: DOUBLE
67172: EQUAL
67173: IFTRUE 67183
67175: LD_INT 1
67177: DOUBLE
67178: EQUAL
67179: IFTRUE 67183
67181: GO 67384
67183: POP
// case nation of nation_american :
67184: LD_VAR 0 5
67188: PUSH
67189: LD_INT 1
67191: DOUBLE
67192: EQUAL
67193: IFTRUE 67197
67195: GO 67253
67197: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
67198: LD_ADDR_VAR 0 9
67202: PUSH
67203: LD_VAR 0 11
67207: PUSH
67208: LD_VAR 0 12
67212: PUSH
67213: LD_VAR 0 13
67217: PUSH
67218: LD_VAR 0 14
67222: PUSH
67223: LD_VAR 0 15
67227: PUSH
67228: LD_VAR 0 16
67232: PUSH
67233: EMPTY
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: PUSH
67241: LD_VAR 0 4
67245: PUSH
67246: LD_INT 1
67248: PLUS
67249: ARRAY
67250: ST_TO_ADDR
67251: GO 67382
67253: LD_INT 2
67255: DOUBLE
67256: EQUAL
67257: IFTRUE 67261
67259: GO 67317
67261: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
67262: LD_ADDR_VAR 0 9
67266: PUSH
67267: LD_VAR 0 17
67271: PUSH
67272: LD_VAR 0 18
67276: PUSH
67277: LD_VAR 0 19
67281: PUSH
67282: LD_VAR 0 20
67286: PUSH
67287: LD_VAR 0 21
67291: PUSH
67292: LD_VAR 0 22
67296: PUSH
67297: EMPTY
67298: LIST
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: PUSH
67305: LD_VAR 0 4
67309: PUSH
67310: LD_INT 1
67312: PLUS
67313: ARRAY
67314: ST_TO_ADDR
67315: GO 67382
67317: LD_INT 3
67319: DOUBLE
67320: EQUAL
67321: IFTRUE 67325
67323: GO 67381
67325: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67326: LD_ADDR_VAR 0 9
67330: PUSH
67331: LD_VAR 0 23
67335: PUSH
67336: LD_VAR 0 24
67340: PUSH
67341: LD_VAR 0 25
67345: PUSH
67346: LD_VAR 0 26
67350: PUSH
67351: LD_VAR 0 27
67355: PUSH
67356: LD_VAR 0 28
67360: PUSH
67361: EMPTY
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: LIST
67367: LIST
67368: PUSH
67369: LD_VAR 0 4
67373: PUSH
67374: LD_INT 1
67376: PLUS
67377: ARRAY
67378: ST_TO_ADDR
67379: GO 67382
67381: POP
67382: GO 67937
67384: LD_INT 2
67386: DOUBLE
67387: EQUAL
67388: IFTRUE 67398
67390: LD_INT 3
67392: DOUBLE
67393: EQUAL
67394: IFTRUE 67398
67396: GO 67454
67398: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67399: LD_ADDR_VAR 0 9
67403: PUSH
67404: LD_VAR 0 29
67408: PUSH
67409: LD_VAR 0 30
67413: PUSH
67414: LD_VAR 0 31
67418: PUSH
67419: LD_VAR 0 32
67423: PUSH
67424: LD_VAR 0 33
67428: PUSH
67429: LD_VAR 0 34
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: LIST
67438: LIST
67439: LIST
67440: LIST
67441: PUSH
67442: LD_VAR 0 4
67446: PUSH
67447: LD_INT 1
67449: PLUS
67450: ARRAY
67451: ST_TO_ADDR
67452: GO 67937
67454: LD_INT 16
67456: DOUBLE
67457: EQUAL
67458: IFTRUE 67516
67460: LD_INT 17
67462: DOUBLE
67463: EQUAL
67464: IFTRUE 67516
67466: LD_INT 18
67468: DOUBLE
67469: EQUAL
67470: IFTRUE 67516
67472: LD_INT 19
67474: DOUBLE
67475: EQUAL
67476: IFTRUE 67516
67478: LD_INT 22
67480: DOUBLE
67481: EQUAL
67482: IFTRUE 67516
67484: LD_INT 20
67486: DOUBLE
67487: EQUAL
67488: IFTRUE 67516
67490: LD_INT 21
67492: DOUBLE
67493: EQUAL
67494: IFTRUE 67516
67496: LD_INT 23
67498: DOUBLE
67499: EQUAL
67500: IFTRUE 67516
67502: LD_INT 24
67504: DOUBLE
67505: EQUAL
67506: IFTRUE 67516
67508: LD_INT 25
67510: DOUBLE
67511: EQUAL
67512: IFTRUE 67516
67514: GO 67572
67516: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67517: LD_ADDR_VAR 0 9
67521: PUSH
67522: LD_VAR 0 35
67526: PUSH
67527: LD_VAR 0 36
67531: PUSH
67532: LD_VAR 0 37
67536: PUSH
67537: LD_VAR 0 38
67541: PUSH
67542: LD_VAR 0 39
67546: PUSH
67547: LD_VAR 0 40
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: LIST
67556: LIST
67557: LIST
67558: LIST
67559: PUSH
67560: LD_VAR 0 4
67564: PUSH
67565: LD_INT 1
67567: PLUS
67568: ARRAY
67569: ST_TO_ADDR
67570: GO 67937
67572: LD_INT 6
67574: DOUBLE
67575: EQUAL
67576: IFTRUE 67628
67578: LD_INT 7
67580: DOUBLE
67581: EQUAL
67582: IFTRUE 67628
67584: LD_INT 8
67586: DOUBLE
67587: EQUAL
67588: IFTRUE 67628
67590: LD_INT 13
67592: DOUBLE
67593: EQUAL
67594: IFTRUE 67628
67596: LD_INT 12
67598: DOUBLE
67599: EQUAL
67600: IFTRUE 67628
67602: LD_INT 15
67604: DOUBLE
67605: EQUAL
67606: IFTRUE 67628
67608: LD_INT 11
67610: DOUBLE
67611: EQUAL
67612: IFTRUE 67628
67614: LD_INT 14
67616: DOUBLE
67617: EQUAL
67618: IFTRUE 67628
67620: LD_INT 10
67622: DOUBLE
67623: EQUAL
67624: IFTRUE 67628
67626: GO 67684
67628: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67629: LD_ADDR_VAR 0 9
67633: PUSH
67634: LD_VAR 0 41
67638: PUSH
67639: LD_VAR 0 42
67643: PUSH
67644: LD_VAR 0 43
67648: PUSH
67649: LD_VAR 0 44
67653: PUSH
67654: LD_VAR 0 45
67658: PUSH
67659: LD_VAR 0 46
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: PUSH
67672: LD_VAR 0 4
67676: PUSH
67677: LD_INT 1
67679: PLUS
67680: ARRAY
67681: ST_TO_ADDR
67682: GO 67937
67684: LD_INT 36
67686: DOUBLE
67687: EQUAL
67688: IFTRUE 67692
67690: GO 67748
67692: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67693: LD_ADDR_VAR 0 9
67697: PUSH
67698: LD_VAR 0 47
67702: PUSH
67703: LD_VAR 0 48
67707: PUSH
67708: LD_VAR 0 49
67712: PUSH
67713: LD_VAR 0 50
67717: PUSH
67718: LD_VAR 0 51
67722: PUSH
67723: LD_VAR 0 52
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: PUSH
67736: LD_VAR 0 4
67740: PUSH
67741: LD_INT 1
67743: PLUS
67744: ARRAY
67745: ST_TO_ADDR
67746: GO 67937
67748: LD_INT 4
67750: DOUBLE
67751: EQUAL
67752: IFTRUE 67774
67754: LD_INT 5
67756: DOUBLE
67757: EQUAL
67758: IFTRUE 67774
67760: LD_INT 34
67762: DOUBLE
67763: EQUAL
67764: IFTRUE 67774
67766: LD_INT 37
67768: DOUBLE
67769: EQUAL
67770: IFTRUE 67774
67772: GO 67830
67774: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67775: LD_ADDR_VAR 0 9
67779: PUSH
67780: LD_VAR 0 53
67784: PUSH
67785: LD_VAR 0 54
67789: PUSH
67790: LD_VAR 0 55
67794: PUSH
67795: LD_VAR 0 56
67799: PUSH
67800: LD_VAR 0 57
67804: PUSH
67805: LD_VAR 0 58
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: PUSH
67818: LD_VAR 0 4
67822: PUSH
67823: LD_INT 1
67825: PLUS
67826: ARRAY
67827: ST_TO_ADDR
67828: GO 67937
67830: LD_INT 31
67832: DOUBLE
67833: EQUAL
67834: IFTRUE 67880
67836: LD_INT 32
67838: DOUBLE
67839: EQUAL
67840: IFTRUE 67880
67842: LD_INT 33
67844: DOUBLE
67845: EQUAL
67846: IFTRUE 67880
67848: LD_INT 27
67850: DOUBLE
67851: EQUAL
67852: IFTRUE 67880
67854: LD_INT 26
67856: DOUBLE
67857: EQUAL
67858: IFTRUE 67880
67860: LD_INT 28
67862: DOUBLE
67863: EQUAL
67864: IFTRUE 67880
67866: LD_INT 29
67868: DOUBLE
67869: EQUAL
67870: IFTRUE 67880
67872: LD_INT 30
67874: DOUBLE
67875: EQUAL
67876: IFTRUE 67880
67878: GO 67936
67880: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67881: LD_ADDR_VAR 0 9
67885: PUSH
67886: LD_VAR 0 59
67890: PUSH
67891: LD_VAR 0 60
67895: PUSH
67896: LD_VAR 0 61
67900: PUSH
67901: LD_VAR 0 62
67905: PUSH
67906: LD_VAR 0 63
67910: PUSH
67911: LD_VAR 0 64
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: PUSH
67924: LD_VAR 0 4
67928: PUSH
67929: LD_INT 1
67931: PLUS
67932: ARRAY
67933: ST_TO_ADDR
67934: GO 67937
67936: POP
// temp_list2 = [ ] ;
67937: LD_ADDR_VAR 0 10
67941: PUSH
67942: EMPTY
67943: ST_TO_ADDR
// for i in temp_list do
67944: LD_ADDR_VAR 0 8
67948: PUSH
67949: LD_VAR 0 9
67953: PUSH
67954: FOR_IN
67955: IFFALSE 68007
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67957: LD_ADDR_VAR 0 10
67961: PUSH
67962: LD_VAR 0 10
67966: PUSH
67967: LD_VAR 0 8
67971: PUSH
67972: LD_INT 1
67974: ARRAY
67975: PUSH
67976: LD_VAR 0 2
67980: PLUS
67981: PUSH
67982: LD_VAR 0 8
67986: PUSH
67987: LD_INT 2
67989: ARRAY
67990: PUSH
67991: LD_VAR 0 3
67995: PLUS
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: EMPTY
68002: LIST
68003: ADD
68004: ST_TO_ADDR
68005: GO 67954
68007: POP
68008: POP
// result = temp_list2 ;
68009: LD_ADDR_VAR 0 7
68013: PUSH
68014: LD_VAR 0 10
68018: ST_TO_ADDR
// end ;
68019: LD_VAR 0 7
68023: RET
// export function EnemyInRange ( unit , dist ) ; begin
68024: LD_INT 0
68026: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
68027: LD_ADDR_VAR 0 3
68031: PUSH
68032: LD_VAR 0 1
68036: PPUSH
68037: CALL_OW 255
68041: PPUSH
68042: LD_VAR 0 1
68046: PPUSH
68047: CALL_OW 250
68051: PPUSH
68052: LD_VAR 0 1
68056: PPUSH
68057: CALL_OW 251
68061: PPUSH
68062: LD_VAR 0 2
68066: PPUSH
68067: CALL 41426 0 4
68071: PUSH
68072: LD_INT 4
68074: ARRAY
68075: ST_TO_ADDR
// end ;
68076: LD_VAR 0 3
68080: RET
// export function PlayerSeeMe ( unit ) ; begin
68081: LD_INT 0
68083: PPUSH
// result := See ( your_side , unit ) ;
68084: LD_ADDR_VAR 0 2
68088: PUSH
68089: LD_OWVAR 2
68093: PPUSH
68094: LD_VAR 0 1
68098: PPUSH
68099: CALL_OW 292
68103: ST_TO_ADDR
// end ;
68104: LD_VAR 0 2
68108: RET
// export function ReverseDir ( unit ) ; begin
68109: LD_INT 0
68111: PPUSH
// if not unit then
68112: LD_VAR 0 1
68116: NOT
68117: IFFALSE 68121
// exit ;
68119: GO 68144
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
68121: LD_ADDR_VAR 0 2
68125: PUSH
68126: LD_VAR 0 1
68130: PPUSH
68131: CALL_OW 254
68135: PUSH
68136: LD_INT 3
68138: PLUS
68139: PUSH
68140: LD_INT 6
68142: MOD
68143: ST_TO_ADDR
// end ;
68144: LD_VAR 0 2
68148: RET
// export function ReverseArray ( array ) ; var i ; begin
68149: LD_INT 0
68151: PPUSH
68152: PPUSH
// if not array then
68153: LD_VAR 0 1
68157: NOT
68158: IFFALSE 68162
// exit ;
68160: GO 68217
// result := [ ] ;
68162: LD_ADDR_VAR 0 2
68166: PUSH
68167: EMPTY
68168: ST_TO_ADDR
// for i := array downto 1 do
68169: LD_ADDR_VAR 0 3
68173: PUSH
68174: DOUBLE
68175: LD_VAR 0 1
68179: INC
68180: ST_TO_ADDR
68181: LD_INT 1
68183: PUSH
68184: FOR_DOWNTO
68185: IFFALSE 68215
// result := Join ( result , array [ i ] ) ;
68187: LD_ADDR_VAR 0 2
68191: PUSH
68192: LD_VAR 0 2
68196: PPUSH
68197: LD_VAR 0 1
68201: PUSH
68202: LD_VAR 0 3
68206: ARRAY
68207: PPUSH
68208: CALL 72861 0 2
68212: ST_TO_ADDR
68213: GO 68184
68215: POP
68216: POP
// end ;
68217: LD_VAR 0 2
68221: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
68222: LD_INT 0
68224: PPUSH
68225: PPUSH
68226: PPUSH
68227: PPUSH
68228: PPUSH
68229: PPUSH
// if not unit or not hexes then
68230: LD_VAR 0 1
68234: NOT
68235: PUSH
68236: LD_VAR 0 2
68240: NOT
68241: OR
68242: IFFALSE 68246
// exit ;
68244: GO 68369
// dist := 9999 ;
68246: LD_ADDR_VAR 0 5
68250: PUSH
68251: LD_INT 9999
68253: ST_TO_ADDR
// for i = 1 to hexes do
68254: LD_ADDR_VAR 0 4
68258: PUSH
68259: DOUBLE
68260: LD_INT 1
68262: DEC
68263: ST_TO_ADDR
68264: LD_VAR 0 2
68268: PUSH
68269: FOR_TO
68270: IFFALSE 68357
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68272: LD_ADDR_VAR 0 6
68276: PUSH
68277: LD_VAR 0 1
68281: PPUSH
68282: LD_VAR 0 2
68286: PUSH
68287: LD_VAR 0 4
68291: ARRAY
68292: PUSH
68293: LD_INT 1
68295: ARRAY
68296: PPUSH
68297: LD_VAR 0 2
68301: PUSH
68302: LD_VAR 0 4
68306: ARRAY
68307: PUSH
68308: LD_INT 2
68310: ARRAY
68311: PPUSH
68312: CALL_OW 297
68316: ST_TO_ADDR
// if tdist < dist then
68317: LD_VAR 0 6
68321: PUSH
68322: LD_VAR 0 5
68326: LESS
68327: IFFALSE 68355
// begin hex := hexes [ i ] ;
68329: LD_ADDR_VAR 0 8
68333: PUSH
68334: LD_VAR 0 2
68338: PUSH
68339: LD_VAR 0 4
68343: ARRAY
68344: ST_TO_ADDR
// dist := tdist ;
68345: LD_ADDR_VAR 0 5
68349: PUSH
68350: LD_VAR 0 6
68354: ST_TO_ADDR
// end ; end ;
68355: GO 68269
68357: POP
68358: POP
// result := hex ;
68359: LD_ADDR_VAR 0 3
68363: PUSH
68364: LD_VAR 0 8
68368: ST_TO_ADDR
// end ;
68369: LD_VAR 0 3
68373: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68374: LD_INT 0
68376: PPUSH
68377: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68378: LD_VAR 0 1
68382: NOT
68383: PUSH
68384: LD_VAR 0 1
68388: PUSH
68389: LD_INT 21
68391: PUSH
68392: LD_INT 2
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 23
68401: PUSH
68402: LD_INT 2
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PPUSH
68413: CALL_OW 69
68417: IN
68418: NOT
68419: OR
68420: IFFALSE 68424
// exit ;
68422: GO 68471
// for i = 1 to 3 do
68424: LD_ADDR_VAR 0 3
68428: PUSH
68429: DOUBLE
68430: LD_INT 1
68432: DEC
68433: ST_TO_ADDR
68434: LD_INT 3
68436: PUSH
68437: FOR_TO
68438: IFFALSE 68469
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68440: LD_VAR 0 1
68444: PPUSH
68445: CALL_OW 250
68449: PPUSH
68450: LD_VAR 0 1
68454: PPUSH
68455: CALL_OW 251
68459: PPUSH
68460: LD_INT 1
68462: PPUSH
68463: CALL_OW 453
68467: GO 68437
68469: POP
68470: POP
// end ;
68471: LD_VAR 0 2
68475: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68476: LD_INT 0
68478: PPUSH
68479: PPUSH
68480: PPUSH
68481: PPUSH
68482: PPUSH
68483: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68484: LD_VAR 0 1
68488: NOT
68489: PUSH
68490: LD_VAR 0 2
68494: NOT
68495: OR
68496: PUSH
68497: LD_VAR 0 1
68501: PPUSH
68502: CALL_OW 314
68506: OR
68507: IFFALSE 68511
// exit ;
68509: GO 68978
// if GetLives ( i ) < 250 then
68511: LD_VAR 0 4
68515: PPUSH
68516: CALL_OW 256
68520: PUSH
68521: LD_INT 250
68523: LESS
68524: IFFALSE 68537
// begin ComAutodestruct ( i ) ;
68526: LD_VAR 0 4
68530: PPUSH
68531: CALL 68374 0 1
// exit ;
68535: GO 68978
// end ; x := GetX ( enemy_unit ) ;
68537: LD_ADDR_VAR 0 7
68541: PUSH
68542: LD_VAR 0 2
68546: PPUSH
68547: CALL_OW 250
68551: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68552: LD_ADDR_VAR 0 8
68556: PUSH
68557: LD_VAR 0 2
68561: PPUSH
68562: CALL_OW 251
68566: ST_TO_ADDR
// if not x or not y then
68567: LD_VAR 0 7
68571: NOT
68572: PUSH
68573: LD_VAR 0 8
68577: NOT
68578: OR
68579: IFFALSE 68583
// exit ;
68581: GO 68978
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68583: LD_ADDR_VAR 0 6
68587: PUSH
68588: LD_VAR 0 7
68592: PPUSH
68593: LD_INT 0
68595: PPUSH
68596: LD_INT 4
68598: PPUSH
68599: CALL_OW 272
68603: PUSH
68604: LD_VAR 0 8
68608: PPUSH
68609: LD_INT 0
68611: PPUSH
68612: LD_INT 4
68614: PPUSH
68615: CALL_OW 273
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_VAR 0 7
68628: PPUSH
68629: LD_INT 1
68631: PPUSH
68632: LD_INT 4
68634: PPUSH
68635: CALL_OW 272
68639: PUSH
68640: LD_VAR 0 8
68644: PPUSH
68645: LD_INT 1
68647: PPUSH
68648: LD_INT 4
68650: PPUSH
68651: CALL_OW 273
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_VAR 0 7
68664: PPUSH
68665: LD_INT 2
68667: PPUSH
68668: LD_INT 4
68670: PPUSH
68671: CALL_OW 272
68675: PUSH
68676: LD_VAR 0 8
68680: PPUSH
68681: LD_INT 2
68683: PPUSH
68684: LD_INT 4
68686: PPUSH
68687: CALL_OW 273
68691: PUSH
68692: EMPTY
68693: LIST
68694: LIST
68695: PUSH
68696: LD_VAR 0 7
68700: PPUSH
68701: LD_INT 3
68703: PPUSH
68704: LD_INT 4
68706: PPUSH
68707: CALL_OW 272
68711: PUSH
68712: LD_VAR 0 8
68716: PPUSH
68717: LD_INT 3
68719: PPUSH
68720: LD_INT 4
68722: PPUSH
68723: CALL_OW 273
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_VAR 0 7
68736: PPUSH
68737: LD_INT 4
68739: PPUSH
68740: LD_INT 4
68742: PPUSH
68743: CALL_OW 272
68747: PUSH
68748: LD_VAR 0 8
68752: PPUSH
68753: LD_INT 4
68755: PPUSH
68756: LD_INT 4
68758: PPUSH
68759: CALL_OW 273
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_VAR 0 7
68772: PPUSH
68773: LD_INT 5
68775: PPUSH
68776: LD_INT 4
68778: PPUSH
68779: CALL_OW 272
68783: PUSH
68784: LD_VAR 0 8
68788: PPUSH
68789: LD_INT 5
68791: PPUSH
68792: LD_INT 4
68794: PPUSH
68795: CALL_OW 273
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: ST_TO_ADDR
// for i = tmp downto 1 do
68812: LD_ADDR_VAR 0 4
68816: PUSH
68817: DOUBLE
68818: LD_VAR 0 6
68822: INC
68823: ST_TO_ADDR
68824: LD_INT 1
68826: PUSH
68827: FOR_DOWNTO
68828: IFFALSE 68929
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68830: LD_VAR 0 6
68834: PUSH
68835: LD_VAR 0 4
68839: ARRAY
68840: PUSH
68841: LD_INT 1
68843: ARRAY
68844: PPUSH
68845: LD_VAR 0 6
68849: PUSH
68850: LD_VAR 0 4
68854: ARRAY
68855: PUSH
68856: LD_INT 2
68858: ARRAY
68859: PPUSH
68860: CALL_OW 488
68864: NOT
68865: PUSH
68866: LD_VAR 0 6
68870: PUSH
68871: LD_VAR 0 4
68875: ARRAY
68876: PUSH
68877: LD_INT 1
68879: ARRAY
68880: PPUSH
68881: LD_VAR 0 6
68885: PUSH
68886: LD_VAR 0 4
68890: ARRAY
68891: PUSH
68892: LD_INT 2
68894: ARRAY
68895: PPUSH
68896: CALL_OW 428
68900: PUSH
68901: LD_INT 0
68903: NONEQUAL
68904: OR
68905: IFFALSE 68927
// tmp := Delete ( tmp , i ) ;
68907: LD_ADDR_VAR 0 6
68911: PUSH
68912: LD_VAR 0 6
68916: PPUSH
68917: LD_VAR 0 4
68921: PPUSH
68922: CALL_OW 3
68926: ST_TO_ADDR
68927: GO 68827
68929: POP
68930: POP
// j := GetClosestHex ( unit , tmp ) ;
68931: LD_ADDR_VAR 0 5
68935: PUSH
68936: LD_VAR 0 1
68940: PPUSH
68941: LD_VAR 0 6
68945: PPUSH
68946: CALL 68222 0 2
68950: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68951: LD_VAR 0 1
68955: PPUSH
68956: LD_VAR 0 5
68960: PUSH
68961: LD_INT 1
68963: ARRAY
68964: PPUSH
68965: LD_VAR 0 5
68969: PUSH
68970: LD_INT 2
68972: ARRAY
68973: PPUSH
68974: CALL_OW 111
// end ;
68978: LD_VAR 0 3
68982: RET
// export function PrepareApemanSoldier ( ) ; begin
68983: LD_INT 0
68985: PPUSH
// uc_nation := 0 ;
68986: LD_ADDR_OWVAR 21
68990: PUSH
68991: LD_INT 0
68993: ST_TO_ADDR
// hc_sex := sex_male ;
68994: LD_ADDR_OWVAR 27
68998: PUSH
68999: LD_INT 1
69001: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
69002: LD_ADDR_OWVAR 28
69006: PUSH
69007: LD_INT 15
69009: ST_TO_ADDR
// hc_gallery :=  ;
69010: LD_ADDR_OWVAR 33
69014: PUSH
69015: LD_STRING 
69017: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69018: LD_ADDR_OWVAR 31
69022: PUSH
69023: LD_INT 0
69025: PPUSH
69026: LD_INT 3
69028: PPUSH
69029: CALL_OW 12
69033: PUSH
69034: LD_INT 0
69036: PPUSH
69037: LD_INT 3
69039: PPUSH
69040: CALL_OW 12
69044: PUSH
69045: LD_INT 0
69047: PUSH
69048: LD_INT 0
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: LIST
69055: LIST
69056: ST_TO_ADDR
// end ;
69057: LD_VAR 0 1
69061: RET
// export function PrepareApemanEngineer ( ) ; begin
69062: LD_INT 0
69064: PPUSH
// uc_nation := 0 ;
69065: LD_ADDR_OWVAR 21
69069: PUSH
69070: LD_INT 0
69072: ST_TO_ADDR
// hc_sex := sex_male ;
69073: LD_ADDR_OWVAR 27
69077: PUSH
69078: LD_INT 1
69080: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
69081: LD_ADDR_OWVAR 28
69085: PUSH
69086: LD_INT 16
69088: ST_TO_ADDR
// hc_gallery :=  ;
69089: LD_ADDR_OWVAR 33
69093: PUSH
69094: LD_STRING 
69096: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69097: LD_ADDR_OWVAR 31
69101: PUSH
69102: LD_INT 0
69104: PPUSH
69105: LD_INT 3
69107: PPUSH
69108: CALL_OW 12
69112: PUSH
69113: LD_INT 0
69115: PPUSH
69116: LD_INT 3
69118: PPUSH
69119: CALL_OW 12
69123: PUSH
69124: LD_INT 0
69126: PUSH
69127: LD_INT 0
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: ST_TO_ADDR
// end ;
69136: LD_VAR 0 1
69140: RET
// export function PrepareApeman ( agressivity ) ; begin
69141: LD_INT 0
69143: PPUSH
// uc_side := 0 ;
69144: LD_ADDR_OWVAR 20
69148: PUSH
69149: LD_INT 0
69151: ST_TO_ADDR
// uc_nation := 0 ;
69152: LD_ADDR_OWVAR 21
69156: PUSH
69157: LD_INT 0
69159: ST_TO_ADDR
// hc_sex := sex_male ;
69160: LD_ADDR_OWVAR 27
69164: PUSH
69165: LD_INT 1
69167: ST_TO_ADDR
// hc_class := class_apeman ;
69168: LD_ADDR_OWVAR 28
69172: PUSH
69173: LD_INT 12
69175: ST_TO_ADDR
// hc_gallery :=  ;
69176: LD_ADDR_OWVAR 33
69180: PUSH
69181: LD_STRING 
69183: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69184: LD_ADDR_OWVAR 35
69188: PUSH
69189: LD_VAR 0 1
69193: NEG
69194: PPUSH
69195: LD_VAR 0 1
69199: PPUSH
69200: CALL_OW 12
69204: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
69205: LD_ADDR_OWVAR 31
69209: PUSH
69210: LD_INT 0
69212: PPUSH
69213: LD_INT 3
69215: PPUSH
69216: CALL_OW 12
69220: PUSH
69221: LD_INT 0
69223: PPUSH
69224: LD_INT 3
69226: PPUSH
69227: CALL_OW 12
69231: PUSH
69232: LD_INT 0
69234: PUSH
69235: LD_INT 0
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: ST_TO_ADDR
// end ;
69244: LD_VAR 0 2
69248: RET
// export function PrepareTiger ( agressivity ) ; begin
69249: LD_INT 0
69251: PPUSH
// uc_side := 0 ;
69252: LD_ADDR_OWVAR 20
69256: PUSH
69257: LD_INT 0
69259: ST_TO_ADDR
// uc_nation := 0 ;
69260: LD_ADDR_OWVAR 21
69264: PUSH
69265: LD_INT 0
69267: ST_TO_ADDR
// hc_class := class_tiger ;
69268: LD_ADDR_OWVAR 28
69272: PUSH
69273: LD_INT 14
69275: ST_TO_ADDR
// hc_gallery :=  ;
69276: LD_ADDR_OWVAR 33
69280: PUSH
69281: LD_STRING 
69283: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69284: LD_ADDR_OWVAR 35
69288: PUSH
69289: LD_VAR 0 1
69293: NEG
69294: PPUSH
69295: LD_VAR 0 1
69299: PPUSH
69300: CALL_OW 12
69304: ST_TO_ADDR
// end ;
69305: LD_VAR 0 2
69309: RET
// export function PrepareEnchidna ( ) ; begin
69310: LD_INT 0
69312: PPUSH
// uc_side := 0 ;
69313: LD_ADDR_OWVAR 20
69317: PUSH
69318: LD_INT 0
69320: ST_TO_ADDR
// uc_nation := 0 ;
69321: LD_ADDR_OWVAR 21
69325: PUSH
69326: LD_INT 0
69328: ST_TO_ADDR
// hc_class := class_baggie ;
69329: LD_ADDR_OWVAR 28
69333: PUSH
69334: LD_INT 13
69336: ST_TO_ADDR
// hc_gallery :=  ;
69337: LD_ADDR_OWVAR 33
69341: PUSH
69342: LD_STRING 
69344: ST_TO_ADDR
// end ;
69345: LD_VAR 0 1
69349: RET
// export function PrepareFrog ( ) ; begin
69350: LD_INT 0
69352: PPUSH
// uc_side := 0 ;
69353: LD_ADDR_OWVAR 20
69357: PUSH
69358: LD_INT 0
69360: ST_TO_ADDR
// uc_nation := 0 ;
69361: LD_ADDR_OWVAR 21
69365: PUSH
69366: LD_INT 0
69368: ST_TO_ADDR
// hc_class := class_frog ;
69369: LD_ADDR_OWVAR 28
69373: PUSH
69374: LD_INT 19
69376: ST_TO_ADDR
// hc_gallery :=  ;
69377: LD_ADDR_OWVAR 33
69381: PUSH
69382: LD_STRING 
69384: ST_TO_ADDR
// end ;
69385: LD_VAR 0 1
69389: RET
// export function PrepareFish ( ) ; begin
69390: LD_INT 0
69392: PPUSH
// uc_side := 0 ;
69393: LD_ADDR_OWVAR 20
69397: PUSH
69398: LD_INT 0
69400: ST_TO_ADDR
// uc_nation := 0 ;
69401: LD_ADDR_OWVAR 21
69405: PUSH
69406: LD_INT 0
69408: ST_TO_ADDR
// hc_class := class_fish ;
69409: LD_ADDR_OWVAR 28
69413: PUSH
69414: LD_INT 20
69416: ST_TO_ADDR
// hc_gallery :=  ;
69417: LD_ADDR_OWVAR 33
69421: PUSH
69422: LD_STRING 
69424: ST_TO_ADDR
// end ;
69425: LD_VAR 0 1
69429: RET
// export function PrepareBird ( ) ; begin
69430: LD_INT 0
69432: PPUSH
// uc_side := 0 ;
69433: LD_ADDR_OWVAR 20
69437: PUSH
69438: LD_INT 0
69440: ST_TO_ADDR
// uc_nation := 0 ;
69441: LD_ADDR_OWVAR 21
69445: PUSH
69446: LD_INT 0
69448: ST_TO_ADDR
// hc_class := class_phororhacos ;
69449: LD_ADDR_OWVAR 28
69453: PUSH
69454: LD_INT 18
69456: ST_TO_ADDR
// hc_gallery :=  ;
69457: LD_ADDR_OWVAR 33
69461: PUSH
69462: LD_STRING 
69464: ST_TO_ADDR
// end ;
69465: LD_VAR 0 1
69469: RET
// export function PrepareHorse ( ) ; begin
69470: LD_INT 0
69472: PPUSH
// uc_side := 0 ;
69473: LD_ADDR_OWVAR 20
69477: PUSH
69478: LD_INT 0
69480: ST_TO_ADDR
// uc_nation := 0 ;
69481: LD_ADDR_OWVAR 21
69485: PUSH
69486: LD_INT 0
69488: ST_TO_ADDR
// hc_class := class_horse ;
69489: LD_ADDR_OWVAR 28
69493: PUSH
69494: LD_INT 21
69496: ST_TO_ADDR
// hc_gallery :=  ;
69497: LD_ADDR_OWVAR 33
69501: PUSH
69502: LD_STRING 
69504: ST_TO_ADDR
// end ;
69505: LD_VAR 0 1
69509: RET
// export function PrepareMastodont ( ) ; begin
69510: LD_INT 0
69512: PPUSH
// uc_side := 0 ;
69513: LD_ADDR_OWVAR 20
69517: PUSH
69518: LD_INT 0
69520: ST_TO_ADDR
// uc_nation := 0 ;
69521: LD_ADDR_OWVAR 21
69525: PUSH
69526: LD_INT 0
69528: ST_TO_ADDR
// vc_chassis := class_mastodont ;
69529: LD_ADDR_OWVAR 37
69533: PUSH
69534: LD_INT 31
69536: ST_TO_ADDR
// vc_control := control_rider ;
69537: LD_ADDR_OWVAR 38
69541: PUSH
69542: LD_INT 4
69544: ST_TO_ADDR
// end ;
69545: LD_VAR 0 1
69549: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69550: LD_INT 0
69552: PPUSH
69553: PPUSH
69554: PPUSH
// uc_side = 0 ;
69555: LD_ADDR_OWVAR 20
69559: PUSH
69560: LD_INT 0
69562: ST_TO_ADDR
// uc_nation = 0 ;
69563: LD_ADDR_OWVAR 21
69567: PUSH
69568: LD_INT 0
69570: ST_TO_ADDR
// InitHc_All ( ) ;
69571: CALL_OW 584
// InitVc ;
69575: CALL_OW 20
// if mastodonts then
69579: LD_VAR 0 6
69583: IFFALSE 69650
// for i = 1 to mastodonts do
69585: LD_ADDR_VAR 0 11
69589: PUSH
69590: DOUBLE
69591: LD_INT 1
69593: DEC
69594: ST_TO_ADDR
69595: LD_VAR 0 6
69599: PUSH
69600: FOR_TO
69601: IFFALSE 69648
// begin vc_chassis := 31 ;
69603: LD_ADDR_OWVAR 37
69607: PUSH
69608: LD_INT 31
69610: ST_TO_ADDR
// vc_control := control_rider ;
69611: LD_ADDR_OWVAR 38
69615: PUSH
69616: LD_INT 4
69618: ST_TO_ADDR
// animal := CreateVehicle ;
69619: LD_ADDR_VAR 0 12
69623: PUSH
69624: CALL_OW 45
69628: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69629: LD_VAR 0 12
69633: PPUSH
69634: LD_VAR 0 8
69638: PPUSH
69639: LD_INT 0
69641: PPUSH
69642: CALL 71778 0 3
// end ;
69646: GO 69600
69648: POP
69649: POP
// if horses then
69650: LD_VAR 0 5
69654: IFFALSE 69721
// for i = 1 to horses do
69656: LD_ADDR_VAR 0 11
69660: PUSH
69661: DOUBLE
69662: LD_INT 1
69664: DEC
69665: ST_TO_ADDR
69666: LD_VAR 0 5
69670: PUSH
69671: FOR_TO
69672: IFFALSE 69719
// begin hc_class := 21 ;
69674: LD_ADDR_OWVAR 28
69678: PUSH
69679: LD_INT 21
69681: ST_TO_ADDR
// hc_gallery :=  ;
69682: LD_ADDR_OWVAR 33
69686: PUSH
69687: LD_STRING 
69689: ST_TO_ADDR
// animal := CreateHuman ;
69690: LD_ADDR_VAR 0 12
69694: PUSH
69695: CALL_OW 44
69699: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69700: LD_VAR 0 12
69704: PPUSH
69705: LD_VAR 0 8
69709: PPUSH
69710: LD_INT 0
69712: PPUSH
69713: CALL 71778 0 3
// end ;
69717: GO 69671
69719: POP
69720: POP
// if birds then
69721: LD_VAR 0 1
69725: IFFALSE 69792
// for i = 1 to birds do
69727: LD_ADDR_VAR 0 11
69731: PUSH
69732: DOUBLE
69733: LD_INT 1
69735: DEC
69736: ST_TO_ADDR
69737: LD_VAR 0 1
69741: PUSH
69742: FOR_TO
69743: IFFALSE 69790
// begin hc_class = 18 ;
69745: LD_ADDR_OWVAR 28
69749: PUSH
69750: LD_INT 18
69752: ST_TO_ADDR
// hc_gallery =  ;
69753: LD_ADDR_OWVAR 33
69757: PUSH
69758: LD_STRING 
69760: ST_TO_ADDR
// animal := CreateHuman ;
69761: LD_ADDR_VAR 0 12
69765: PUSH
69766: CALL_OW 44
69770: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69771: LD_VAR 0 12
69775: PPUSH
69776: LD_VAR 0 8
69780: PPUSH
69781: LD_INT 0
69783: PPUSH
69784: CALL 71778 0 3
// end ;
69788: GO 69742
69790: POP
69791: POP
// if tigers then
69792: LD_VAR 0 2
69796: IFFALSE 69880
// for i = 1 to tigers do
69798: LD_ADDR_VAR 0 11
69802: PUSH
69803: DOUBLE
69804: LD_INT 1
69806: DEC
69807: ST_TO_ADDR
69808: LD_VAR 0 2
69812: PUSH
69813: FOR_TO
69814: IFFALSE 69878
// begin hc_class = class_tiger ;
69816: LD_ADDR_OWVAR 28
69820: PUSH
69821: LD_INT 14
69823: ST_TO_ADDR
// hc_gallery =  ;
69824: LD_ADDR_OWVAR 33
69828: PUSH
69829: LD_STRING 
69831: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69832: LD_ADDR_OWVAR 35
69836: PUSH
69837: LD_INT 7
69839: NEG
69840: PPUSH
69841: LD_INT 7
69843: PPUSH
69844: CALL_OW 12
69848: ST_TO_ADDR
// animal := CreateHuman ;
69849: LD_ADDR_VAR 0 12
69853: PUSH
69854: CALL_OW 44
69858: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69859: LD_VAR 0 12
69863: PPUSH
69864: LD_VAR 0 8
69868: PPUSH
69869: LD_INT 0
69871: PPUSH
69872: CALL 71778 0 3
// end ;
69876: GO 69813
69878: POP
69879: POP
// if apemans then
69880: LD_VAR 0 3
69884: IFFALSE 70007
// for i = 1 to apemans do
69886: LD_ADDR_VAR 0 11
69890: PUSH
69891: DOUBLE
69892: LD_INT 1
69894: DEC
69895: ST_TO_ADDR
69896: LD_VAR 0 3
69900: PUSH
69901: FOR_TO
69902: IFFALSE 70005
// begin hc_class = class_apeman ;
69904: LD_ADDR_OWVAR 28
69908: PUSH
69909: LD_INT 12
69911: ST_TO_ADDR
// hc_gallery =  ;
69912: LD_ADDR_OWVAR 33
69916: PUSH
69917: LD_STRING 
69919: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69920: LD_ADDR_OWVAR 35
69924: PUSH
69925: LD_INT 2
69927: NEG
69928: PPUSH
69929: LD_INT 2
69931: PPUSH
69932: CALL_OW 12
69936: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69937: LD_ADDR_OWVAR 31
69941: PUSH
69942: LD_INT 1
69944: PPUSH
69945: LD_INT 3
69947: PPUSH
69948: CALL_OW 12
69952: PUSH
69953: LD_INT 1
69955: PPUSH
69956: LD_INT 3
69958: PPUSH
69959: CALL_OW 12
69963: PUSH
69964: LD_INT 0
69966: PUSH
69967: LD_INT 0
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: ST_TO_ADDR
// animal := CreateHuman ;
69976: LD_ADDR_VAR 0 12
69980: PUSH
69981: CALL_OW 44
69985: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69986: LD_VAR 0 12
69990: PPUSH
69991: LD_VAR 0 8
69995: PPUSH
69996: LD_INT 0
69998: PPUSH
69999: CALL 71778 0 3
// end ;
70003: GO 69901
70005: POP
70006: POP
// if enchidnas then
70007: LD_VAR 0 4
70011: IFFALSE 70078
// for i = 1 to enchidnas do
70013: LD_ADDR_VAR 0 11
70017: PUSH
70018: DOUBLE
70019: LD_INT 1
70021: DEC
70022: ST_TO_ADDR
70023: LD_VAR 0 4
70027: PUSH
70028: FOR_TO
70029: IFFALSE 70076
// begin hc_class = 13 ;
70031: LD_ADDR_OWVAR 28
70035: PUSH
70036: LD_INT 13
70038: ST_TO_ADDR
// hc_gallery =  ;
70039: LD_ADDR_OWVAR 33
70043: PUSH
70044: LD_STRING 
70046: ST_TO_ADDR
// animal := CreateHuman ;
70047: LD_ADDR_VAR 0 12
70051: PUSH
70052: CALL_OW 44
70056: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
70057: LD_VAR 0 12
70061: PPUSH
70062: LD_VAR 0 8
70066: PPUSH
70067: LD_INT 0
70069: PPUSH
70070: CALL 71778 0 3
// end ;
70074: GO 70028
70076: POP
70077: POP
// if fishes then
70078: LD_VAR 0 7
70082: IFFALSE 70149
// for i = 1 to fishes do
70084: LD_ADDR_VAR 0 11
70088: PUSH
70089: DOUBLE
70090: LD_INT 1
70092: DEC
70093: ST_TO_ADDR
70094: LD_VAR 0 7
70098: PUSH
70099: FOR_TO
70100: IFFALSE 70147
// begin hc_class = 20 ;
70102: LD_ADDR_OWVAR 28
70106: PUSH
70107: LD_INT 20
70109: ST_TO_ADDR
// hc_gallery =  ;
70110: LD_ADDR_OWVAR 33
70114: PUSH
70115: LD_STRING 
70117: ST_TO_ADDR
// animal := CreateHuman ;
70118: LD_ADDR_VAR 0 12
70122: PUSH
70123: CALL_OW 44
70127: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
70128: LD_VAR 0 12
70132: PPUSH
70133: LD_VAR 0 9
70137: PPUSH
70138: LD_INT 0
70140: PPUSH
70141: CALL 71778 0 3
// end ;
70145: GO 70099
70147: POP
70148: POP
// end ;
70149: LD_VAR 0 10
70153: RET
// export function WantHeal ( sci , unit ) ; begin
70154: LD_INT 0
70156: PPUSH
// if GetTaskList ( sci ) > 0 then
70157: LD_VAR 0 1
70161: PPUSH
70162: CALL_OW 437
70166: PUSH
70167: LD_INT 0
70169: GREATER
70170: IFFALSE 70240
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
70172: LD_VAR 0 1
70176: PPUSH
70177: CALL_OW 437
70181: PUSH
70182: LD_INT 1
70184: ARRAY
70185: PUSH
70186: LD_INT 1
70188: ARRAY
70189: PUSH
70190: LD_STRING l
70192: EQUAL
70193: PUSH
70194: LD_VAR 0 1
70198: PPUSH
70199: CALL_OW 437
70203: PUSH
70204: LD_INT 1
70206: ARRAY
70207: PUSH
70208: LD_INT 4
70210: ARRAY
70211: PUSH
70212: LD_VAR 0 2
70216: EQUAL
70217: AND
70218: IFFALSE 70230
// result := true else
70220: LD_ADDR_VAR 0 3
70224: PUSH
70225: LD_INT 1
70227: ST_TO_ADDR
70228: GO 70238
// result := false ;
70230: LD_ADDR_VAR 0 3
70234: PUSH
70235: LD_INT 0
70237: ST_TO_ADDR
// end else
70238: GO 70248
// result := false ;
70240: LD_ADDR_VAR 0 3
70244: PUSH
70245: LD_INT 0
70247: ST_TO_ADDR
// end ;
70248: LD_VAR 0 3
70252: RET
// export function HealTarget ( sci ) ; begin
70253: LD_INT 0
70255: PPUSH
// if not sci then
70256: LD_VAR 0 1
70260: NOT
70261: IFFALSE 70265
// exit ;
70263: GO 70330
// result := 0 ;
70265: LD_ADDR_VAR 0 2
70269: PUSH
70270: LD_INT 0
70272: ST_TO_ADDR
// if GetTaskList ( sci ) then
70273: LD_VAR 0 1
70277: PPUSH
70278: CALL_OW 437
70282: IFFALSE 70330
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70284: LD_VAR 0 1
70288: PPUSH
70289: CALL_OW 437
70293: PUSH
70294: LD_INT 1
70296: ARRAY
70297: PUSH
70298: LD_INT 1
70300: ARRAY
70301: PUSH
70302: LD_STRING l
70304: EQUAL
70305: IFFALSE 70330
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70307: LD_ADDR_VAR 0 2
70311: PUSH
70312: LD_VAR 0 1
70316: PPUSH
70317: CALL_OW 437
70321: PUSH
70322: LD_INT 1
70324: ARRAY
70325: PUSH
70326: LD_INT 4
70328: ARRAY
70329: ST_TO_ADDR
// end ;
70330: LD_VAR 0 2
70334: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70335: LD_INT 0
70337: PPUSH
70338: PPUSH
70339: PPUSH
70340: PPUSH
// if not base_units then
70341: LD_VAR 0 1
70345: NOT
70346: IFFALSE 70350
// exit ;
70348: GO 70437
// result := false ;
70350: LD_ADDR_VAR 0 2
70354: PUSH
70355: LD_INT 0
70357: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70358: LD_ADDR_VAR 0 5
70362: PUSH
70363: LD_VAR 0 1
70367: PPUSH
70368: LD_INT 21
70370: PUSH
70371: LD_INT 3
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PPUSH
70378: CALL_OW 72
70382: ST_TO_ADDR
// if not tmp then
70383: LD_VAR 0 5
70387: NOT
70388: IFFALSE 70392
// exit ;
70390: GO 70437
// for i in tmp do
70392: LD_ADDR_VAR 0 3
70396: PUSH
70397: LD_VAR 0 5
70401: PUSH
70402: FOR_IN
70403: IFFALSE 70435
// begin result := EnemyInRange ( i , 22 ) ;
70405: LD_ADDR_VAR 0 2
70409: PUSH
70410: LD_VAR 0 3
70414: PPUSH
70415: LD_INT 22
70417: PPUSH
70418: CALL 68024 0 2
70422: ST_TO_ADDR
// if result then
70423: LD_VAR 0 2
70427: IFFALSE 70433
// exit ;
70429: POP
70430: POP
70431: GO 70437
// end ;
70433: GO 70402
70435: POP
70436: POP
// end ;
70437: LD_VAR 0 2
70441: RET
// export function FilterByTag ( units , tag ) ; begin
70442: LD_INT 0
70444: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
70445: LD_ADDR_VAR 0 3
70449: PUSH
70450: LD_VAR 0 1
70454: PPUSH
70455: LD_INT 120
70457: PUSH
70458: LD_VAR 0 2
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PPUSH
70467: CALL_OW 72
70471: ST_TO_ADDR
// end ;
70472: LD_VAR 0 3
70476: RET
// export function IsDriver ( un ) ; begin
70477: LD_INT 0
70479: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70480: LD_ADDR_VAR 0 2
70484: PUSH
70485: LD_VAR 0 1
70489: PUSH
70490: LD_INT 55
70492: PUSH
70493: EMPTY
70494: LIST
70495: PPUSH
70496: CALL_OW 69
70500: IN
70501: ST_TO_ADDR
// end ;
70502: LD_VAR 0 2
70506: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70507: LD_INT 0
70509: PPUSH
70510: PPUSH
// list := [ ] ;
70511: LD_ADDR_VAR 0 5
70515: PUSH
70516: EMPTY
70517: ST_TO_ADDR
// case d of 0 :
70518: LD_VAR 0 3
70522: PUSH
70523: LD_INT 0
70525: DOUBLE
70526: EQUAL
70527: IFTRUE 70531
70529: GO 70664
70531: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70532: LD_ADDR_VAR 0 5
70536: PUSH
70537: LD_VAR 0 1
70541: PUSH
70542: LD_INT 4
70544: MINUS
70545: PUSH
70546: LD_VAR 0 2
70550: PUSH
70551: LD_INT 4
70553: MINUS
70554: PUSH
70555: LD_INT 2
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: LIST
70562: PUSH
70563: LD_VAR 0 1
70567: PUSH
70568: LD_INT 3
70570: MINUS
70571: PUSH
70572: LD_VAR 0 2
70576: PUSH
70577: LD_INT 1
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: LIST
70584: PUSH
70585: LD_VAR 0 1
70589: PUSH
70590: LD_INT 4
70592: PLUS
70593: PUSH
70594: LD_VAR 0 2
70598: PUSH
70599: LD_INT 4
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: LIST
70606: PUSH
70607: LD_VAR 0 1
70611: PUSH
70612: LD_INT 3
70614: PLUS
70615: PUSH
70616: LD_VAR 0 2
70620: PUSH
70621: LD_INT 3
70623: PLUS
70624: PUSH
70625: LD_INT 5
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: LIST
70632: PUSH
70633: LD_VAR 0 1
70637: PUSH
70638: LD_VAR 0 2
70642: PUSH
70643: LD_INT 4
70645: PLUS
70646: PUSH
70647: LD_INT 0
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: LIST
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: ST_TO_ADDR
// end ; 1 :
70662: GO 71362
70664: LD_INT 1
70666: DOUBLE
70667: EQUAL
70668: IFTRUE 70672
70670: GO 70805
70672: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70673: LD_ADDR_VAR 0 5
70677: PUSH
70678: LD_VAR 0 1
70682: PUSH
70683: LD_VAR 0 2
70687: PUSH
70688: LD_INT 4
70690: MINUS
70691: PUSH
70692: LD_INT 3
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: LIST
70699: PUSH
70700: LD_VAR 0 1
70704: PUSH
70705: LD_INT 3
70707: MINUS
70708: PUSH
70709: LD_VAR 0 2
70713: PUSH
70714: LD_INT 3
70716: MINUS
70717: PUSH
70718: LD_INT 2
70720: PUSH
70721: EMPTY
70722: LIST
70723: LIST
70724: LIST
70725: PUSH
70726: LD_VAR 0 1
70730: PUSH
70731: LD_INT 4
70733: MINUS
70734: PUSH
70735: LD_VAR 0 2
70739: PUSH
70740: LD_INT 1
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: LIST
70747: PUSH
70748: LD_VAR 0 1
70752: PUSH
70753: LD_VAR 0 2
70757: PUSH
70758: LD_INT 3
70760: PLUS
70761: PUSH
70762: LD_INT 0
70764: PUSH
70765: EMPTY
70766: LIST
70767: LIST
70768: LIST
70769: PUSH
70770: LD_VAR 0 1
70774: PUSH
70775: LD_INT 4
70777: PLUS
70778: PUSH
70779: LD_VAR 0 2
70783: PUSH
70784: LD_INT 4
70786: PLUS
70787: PUSH
70788: LD_INT 5
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: LIST
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: ST_TO_ADDR
// end ; 2 :
70803: GO 71362
70805: LD_INT 2
70807: DOUBLE
70808: EQUAL
70809: IFTRUE 70813
70811: GO 70942
70813: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70814: LD_ADDR_VAR 0 5
70818: PUSH
70819: LD_VAR 0 1
70823: PUSH
70824: LD_VAR 0 2
70828: PUSH
70829: LD_INT 3
70831: MINUS
70832: PUSH
70833: LD_INT 3
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: LIST
70840: PUSH
70841: LD_VAR 0 1
70845: PUSH
70846: LD_INT 4
70848: PLUS
70849: PUSH
70850: LD_VAR 0 2
70854: PUSH
70855: LD_INT 4
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: LIST
70862: PUSH
70863: LD_VAR 0 1
70867: PUSH
70868: LD_VAR 0 2
70872: PUSH
70873: LD_INT 4
70875: PLUS
70876: PUSH
70877: LD_INT 0
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: LIST
70884: PUSH
70885: LD_VAR 0 1
70889: PUSH
70890: LD_INT 3
70892: MINUS
70893: PUSH
70894: LD_VAR 0 2
70898: PUSH
70899: LD_INT 1
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: LIST
70906: PUSH
70907: LD_VAR 0 1
70911: PUSH
70912: LD_INT 4
70914: MINUS
70915: PUSH
70916: LD_VAR 0 2
70920: PUSH
70921: LD_INT 4
70923: MINUS
70924: PUSH
70925: LD_INT 2
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: LIST
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: LIST
70939: ST_TO_ADDR
// end ; 3 :
70940: GO 71362
70942: LD_INT 3
70944: DOUBLE
70945: EQUAL
70946: IFTRUE 70950
70948: GO 71083
70950: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70951: LD_ADDR_VAR 0 5
70955: PUSH
70956: LD_VAR 0 1
70960: PUSH
70961: LD_INT 3
70963: PLUS
70964: PUSH
70965: LD_VAR 0 2
70969: PUSH
70970: LD_INT 4
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: LIST
70977: PUSH
70978: LD_VAR 0 1
70982: PUSH
70983: LD_INT 4
70985: PLUS
70986: PUSH
70987: LD_VAR 0 2
70991: PUSH
70992: LD_INT 4
70994: PLUS
70995: PUSH
70996: LD_INT 5
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: LIST
71003: PUSH
71004: LD_VAR 0 1
71008: PUSH
71009: LD_INT 4
71011: MINUS
71012: PUSH
71013: LD_VAR 0 2
71017: PUSH
71018: LD_INT 1
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: LIST
71025: PUSH
71026: LD_VAR 0 1
71030: PUSH
71031: LD_VAR 0 2
71035: PUSH
71036: LD_INT 4
71038: MINUS
71039: PUSH
71040: LD_INT 3
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: LIST
71047: PUSH
71048: LD_VAR 0 1
71052: PUSH
71053: LD_INT 3
71055: MINUS
71056: PUSH
71057: LD_VAR 0 2
71061: PUSH
71062: LD_INT 3
71064: MINUS
71065: PUSH
71066: LD_INT 2
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: LIST
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: ST_TO_ADDR
// end ; 4 :
71081: GO 71362
71083: LD_INT 4
71085: DOUBLE
71086: EQUAL
71087: IFTRUE 71091
71089: GO 71224
71091: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
71092: LD_ADDR_VAR 0 5
71096: PUSH
71097: LD_VAR 0 1
71101: PUSH
71102: LD_VAR 0 2
71106: PUSH
71107: LD_INT 4
71109: PLUS
71110: PUSH
71111: LD_INT 0
71113: PUSH
71114: EMPTY
71115: LIST
71116: LIST
71117: LIST
71118: PUSH
71119: LD_VAR 0 1
71123: PUSH
71124: LD_INT 3
71126: PLUS
71127: PUSH
71128: LD_VAR 0 2
71132: PUSH
71133: LD_INT 3
71135: PLUS
71136: PUSH
71137: LD_INT 5
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: LIST
71144: PUSH
71145: LD_VAR 0 1
71149: PUSH
71150: LD_INT 4
71152: PLUS
71153: PUSH
71154: LD_VAR 0 2
71158: PUSH
71159: LD_INT 4
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: LIST
71166: PUSH
71167: LD_VAR 0 1
71171: PUSH
71172: LD_VAR 0 2
71176: PUSH
71177: LD_INT 3
71179: MINUS
71180: PUSH
71181: LD_INT 3
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: LIST
71188: PUSH
71189: LD_VAR 0 1
71193: PUSH
71194: LD_INT 4
71196: MINUS
71197: PUSH
71198: LD_VAR 0 2
71202: PUSH
71203: LD_INT 4
71205: MINUS
71206: PUSH
71207: LD_INT 2
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: LIST
71214: PUSH
71215: EMPTY
71216: LIST
71217: LIST
71218: LIST
71219: LIST
71220: LIST
71221: ST_TO_ADDR
// end ; 5 :
71222: GO 71362
71224: LD_INT 5
71226: DOUBLE
71227: EQUAL
71228: IFTRUE 71232
71230: GO 71361
71232: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
71233: LD_ADDR_VAR 0 5
71237: PUSH
71238: LD_VAR 0 1
71242: PUSH
71243: LD_INT 4
71245: MINUS
71246: PUSH
71247: LD_VAR 0 2
71251: PUSH
71252: LD_INT 1
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: LIST
71259: PUSH
71260: LD_VAR 0 1
71264: PUSH
71265: LD_VAR 0 2
71269: PUSH
71270: LD_INT 4
71272: MINUS
71273: PUSH
71274: LD_INT 3
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: LIST
71281: PUSH
71282: LD_VAR 0 1
71286: PUSH
71287: LD_INT 4
71289: PLUS
71290: PUSH
71291: LD_VAR 0 2
71295: PUSH
71296: LD_INT 4
71298: PLUS
71299: PUSH
71300: LD_INT 5
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: LIST
71307: PUSH
71308: LD_VAR 0 1
71312: PUSH
71313: LD_INT 3
71315: PLUS
71316: PUSH
71317: LD_VAR 0 2
71321: PUSH
71322: LD_INT 4
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: LIST
71329: PUSH
71330: LD_VAR 0 1
71334: PUSH
71335: LD_VAR 0 2
71339: PUSH
71340: LD_INT 3
71342: PLUS
71343: PUSH
71344: LD_INT 0
71346: PUSH
71347: EMPTY
71348: LIST
71349: LIST
71350: LIST
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: LIST
71356: LIST
71357: LIST
71358: ST_TO_ADDR
// end ; end ;
71359: GO 71362
71361: POP
// result := list ;
71362: LD_ADDR_VAR 0 4
71366: PUSH
71367: LD_VAR 0 5
71371: ST_TO_ADDR
// end ;
71372: LD_VAR 0 4
71376: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71377: LD_INT 0
71379: PPUSH
71380: PPUSH
71381: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71382: LD_VAR 0 1
71386: NOT
71387: PUSH
71388: LD_VAR 0 2
71392: PUSH
71393: LD_INT 1
71395: PUSH
71396: LD_INT 2
71398: PUSH
71399: LD_INT 3
71401: PUSH
71402: LD_INT 4
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: IN
71411: NOT
71412: OR
71413: IFFALSE 71417
// exit ;
71415: GO 71500
// tmp := [ ] ;
71417: LD_ADDR_VAR 0 5
71421: PUSH
71422: EMPTY
71423: ST_TO_ADDR
// for i in units do
71424: LD_ADDR_VAR 0 4
71428: PUSH
71429: LD_VAR 0 1
71433: PUSH
71434: FOR_IN
71435: IFFALSE 71469
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
71437: LD_ADDR_VAR 0 5
71441: PUSH
71442: LD_VAR 0 5
71446: PPUSH
71447: LD_VAR 0 4
71451: PPUSH
71452: LD_VAR 0 2
71456: PPUSH
71457: CALL_OW 259
71461: PPUSH
71462: CALL 72861 0 2
71466: ST_TO_ADDR
71467: GO 71434
71469: POP
71470: POP
// if not tmp then
71471: LD_VAR 0 5
71475: NOT
71476: IFFALSE 71480
// exit ;
71478: GO 71500
// result := SortListByListDesc ( units , tmp ) ;
71480: LD_ADDR_VAR 0 3
71484: PUSH
71485: LD_VAR 0 1
71489: PPUSH
71490: LD_VAR 0 5
71494: PPUSH
71495: CALL_OW 77
71499: ST_TO_ADDR
// end ;
71500: LD_VAR 0 3
71504: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71505: LD_INT 0
71507: PPUSH
71508: PPUSH
71509: PPUSH
// result := false ;
71510: LD_ADDR_VAR 0 3
71514: PUSH
71515: LD_INT 0
71517: ST_TO_ADDR
// if not building then
71518: LD_VAR 0 2
71522: NOT
71523: IFFALSE 71527
// exit ;
71525: GO 71665
// x := GetX ( building ) ;
71527: LD_ADDR_VAR 0 4
71531: PUSH
71532: LD_VAR 0 2
71536: PPUSH
71537: CALL_OW 250
71541: ST_TO_ADDR
// y := GetY ( building ) ;
71542: LD_ADDR_VAR 0 5
71546: PUSH
71547: LD_VAR 0 2
71551: PPUSH
71552: CALL_OW 251
71556: ST_TO_ADDR
// if not x or not y then
71557: LD_VAR 0 4
71561: NOT
71562: PUSH
71563: LD_VAR 0 5
71567: NOT
71568: OR
71569: IFFALSE 71573
// exit ;
71571: GO 71665
// if GetTaskList ( unit ) then
71573: LD_VAR 0 1
71577: PPUSH
71578: CALL_OW 437
71582: IFFALSE 71665
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71584: LD_STRING e
71586: PUSH
71587: LD_VAR 0 1
71591: PPUSH
71592: CALL_OW 437
71596: PUSH
71597: LD_INT 1
71599: ARRAY
71600: PUSH
71601: LD_INT 1
71603: ARRAY
71604: EQUAL
71605: PUSH
71606: LD_VAR 0 4
71610: PUSH
71611: LD_VAR 0 1
71615: PPUSH
71616: CALL_OW 437
71620: PUSH
71621: LD_INT 1
71623: ARRAY
71624: PUSH
71625: LD_INT 2
71627: ARRAY
71628: EQUAL
71629: AND
71630: PUSH
71631: LD_VAR 0 5
71635: PUSH
71636: LD_VAR 0 1
71640: PPUSH
71641: CALL_OW 437
71645: PUSH
71646: LD_INT 1
71648: ARRAY
71649: PUSH
71650: LD_INT 3
71652: ARRAY
71653: EQUAL
71654: AND
71655: IFFALSE 71665
// result := true end ;
71657: LD_ADDR_VAR 0 3
71661: PUSH
71662: LD_INT 1
71664: ST_TO_ADDR
// end ;
71665: LD_VAR 0 3
71669: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71670: LD_INT 0
71672: PPUSH
// result := false ;
71673: LD_ADDR_VAR 0 4
71677: PUSH
71678: LD_INT 0
71680: ST_TO_ADDR
// if GetTaskList ( unit ) then
71681: LD_VAR 0 1
71685: PPUSH
71686: CALL_OW 437
71690: IFFALSE 71773
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71692: LD_STRING M
71694: PUSH
71695: LD_VAR 0 1
71699: PPUSH
71700: CALL_OW 437
71704: PUSH
71705: LD_INT 1
71707: ARRAY
71708: PUSH
71709: LD_INT 1
71711: ARRAY
71712: EQUAL
71713: PUSH
71714: LD_VAR 0 2
71718: PUSH
71719: LD_VAR 0 1
71723: PPUSH
71724: CALL_OW 437
71728: PUSH
71729: LD_INT 1
71731: ARRAY
71732: PUSH
71733: LD_INT 2
71735: ARRAY
71736: EQUAL
71737: AND
71738: PUSH
71739: LD_VAR 0 3
71743: PUSH
71744: LD_VAR 0 1
71748: PPUSH
71749: CALL_OW 437
71753: PUSH
71754: LD_INT 1
71756: ARRAY
71757: PUSH
71758: LD_INT 3
71760: ARRAY
71761: EQUAL
71762: AND
71763: IFFALSE 71773
// result := true ;
71765: LD_ADDR_VAR 0 4
71769: PUSH
71770: LD_INT 1
71772: ST_TO_ADDR
// end ; end ;
71773: LD_VAR 0 4
71777: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71778: LD_INT 0
71780: PPUSH
71781: PPUSH
71782: PPUSH
71783: PPUSH
// if not unit or not area then
71784: LD_VAR 0 1
71788: NOT
71789: PUSH
71790: LD_VAR 0 2
71794: NOT
71795: OR
71796: IFFALSE 71800
// exit ;
71798: GO 71964
// tmp := AreaToList ( area , i ) ;
71800: LD_ADDR_VAR 0 6
71804: PUSH
71805: LD_VAR 0 2
71809: PPUSH
71810: LD_VAR 0 5
71814: PPUSH
71815: CALL_OW 517
71819: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71820: LD_ADDR_VAR 0 5
71824: PUSH
71825: DOUBLE
71826: LD_INT 1
71828: DEC
71829: ST_TO_ADDR
71830: LD_VAR 0 6
71834: PUSH
71835: LD_INT 1
71837: ARRAY
71838: PUSH
71839: FOR_TO
71840: IFFALSE 71962
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71842: LD_ADDR_VAR 0 7
71846: PUSH
71847: LD_VAR 0 6
71851: PUSH
71852: LD_INT 1
71854: ARRAY
71855: PUSH
71856: LD_VAR 0 5
71860: ARRAY
71861: PUSH
71862: LD_VAR 0 6
71866: PUSH
71867: LD_INT 2
71869: ARRAY
71870: PUSH
71871: LD_VAR 0 5
71875: ARRAY
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71881: LD_VAR 0 7
71885: PUSH
71886: LD_INT 1
71888: ARRAY
71889: PPUSH
71890: LD_VAR 0 7
71894: PUSH
71895: LD_INT 2
71897: ARRAY
71898: PPUSH
71899: CALL_OW 428
71903: PUSH
71904: LD_INT 0
71906: EQUAL
71907: IFFALSE 71960
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71909: LD_VAR 0 1
71913: PPUSH
71914: LD_VAR 0 7
71918: PUSH
71919: LD_INT 1
71921: ARRAY
71922: PPUSH
71923: LD_VAR 0 7
71927: PUSH
71928: LD_INT 2
71930: ARRAY
71931: PPUSH
71932: LD_VAR 0 3
71936: PPUSH
71937: CALL_OW 48
// result := IsPlaced ( unit ) ;
71941: LD_ADDR_VAR 0 4
71945: PUSH
71946: LD_VAR 0 1
71950: PPUSH
71951: CALL_OW 305
71955: ST_TO_ADDR
// exit ;
71956: POP
71957: POP
71958: GO 71964
// end ; end ;
71960: GO 71839
71962: POP
71963: POP
// end ;
71964: LD_VAR 0 4
71968: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71969: LD_INT 0
71971: PPUSH
71972: PPUSH
71973: PPUSH
// if not side or side > 8 then
71974: LD_VAR 0 1
71978: NOT
71979: PUSH
71980: LD_VAR 0 1
71984: PUSH
71985: LD_INT 8
71987: GREATER
71988: OR
71989: IFFALSE 71993
// exit ;
71991: GO 72180
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71993: LD_ADDR_VAR 0 4
71997: PUSH
71998: LD_INT 22
72000: PUSH
72001: LD_VAR 0 1
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: PUSH
72010: LD_INT 21
72012: PUSH
72013: LD_INT 3
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: EMPTY
72021: LIST
72022: LIST
72023: PPUSH
72024: CALL_OW 69
72028: ST_TO_ADDR
// if not tmp then
72029: LD_VAR 0 4
72033: NOT
72034: IFFALSE 72038
// exit ;
72036: GO 72180
// enable_addtolog := true ;
72038: LD_ADDR_OWVAR 81
72042: PUSH
72043: LD_INT 1
72045: ST_TO_ADDR
// AddToLog ( [ ) ;
72046: LD_STRING [
72048: PPUSH
72049: CALL_OW 561
// for i in tmp do
72053: LD_ADDR_VAR 0 3
72057: PUSH
72058: LD_VAR 0 4
72062: PUSH
72063: FOR_IN
72064: IFFALSE 72171
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
72066: LD_STRING [
72068: PUSH
72069: LD_VAR 0 3
72073: PPUSH
72074: CALL_OW 266
72078: STR
72079: PUSH
72080: LD_STRING , 
72082: STR
72083: PUSH
72084: LD_VAR 0 3
72088: PPUSH
72089: CALL_OW 250
72093: STR
72094: PUSH
72095: LD_STRING , 
72097: STR
72098: PUSH
72099: LD_VAR 0 3
72103: PPUSH
72104: CALL_OW 251
72108: STR
72109: PUSH
72110: LD_STRING , 
72112: STR
72113: PUSH
72114: LD_VAR 0 3
72118: PPUSH
72119: CALL_OW 254
72123: STR
72124: PUSH
72125: LD_STRING , 
72127: STR
72128: PUSH
72129: LD_VAR 0 3
72133: PPUSH
72134: LD_INT 1
72136: PPUSH
72137: CALL_OW 268
72141: STR
72142: PUSH
72143: LD_STRING , 
72145: STR
72146: PUSH
72147: LD_VAR 0 3
72151: PPUSH
72152: LD_INT 2
72154: PPUSH
72155: CALL_OW 268
72159: STR
72160: PUSH
72161: LD_STRING ],
72163: STR
72164: PPUSH
72165: CALL_OW 561
// end ;
72169: GO 72063
72171: POP
72172: POP
// AddToLog ( ]; ) ;
72173: LD_STRING ];
72175: PPUSH
72176: CALL_OW 561
// end ;
72180: LD_VAR 0 2
72184: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
72185: LD_INT 0
72187: PPUSH
72188: PPUSH
72189: PPUSH
72190: PPUSH
72191: PPUSH
// if not area or not rate or not max then
72192: LD_VAR 0 1
72196: NOT
72197: PUSH
72198: LD_VAR 0 2
72202: NOT
72203: OR
72204: PUSH
72205: LD_VAR 0 4
72209: NOT
72210: OR
72211: IFFALSE 72215
// exit ;
72213: GO 72404
// while 1 do
72215: LD_INT 1
72217: IFFALSE 72404
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
72219: LD_ADDR_VAR 0 9
72223: PUSH
72224: LD_VAR 0 1
72228: PPUSH
72229: LD_INT 1
72231: PPUSH
72232: CALL_OW 287
72236: PUSH
72237: LD_INT 10
72239: MUL
72240: ST_TO_ADDR
// r := rate / 10 ;
72241: LD_ADDR_VAR 0 7
72245: PUSH
72246: LD_VAR 0 2
72250: PUSH
72251: LD_INT 10
72253: DIVREAL
72254: ST_TO_ADDR
// time := 1 1$00 ;
72255: LD_ADDR_VAR 0 8
72259: PUSH
72260: LD_INT 2100
72262: ST_TO_ADDR
// if amount < min then
72263: LD_VAR 0 9
72267: PUSH
72268: LD_VAR 0 3
72272: LESS
72273: IFFALSE 72291
// r := r * 2 else
72275: LD_ADDR_VAR 0 7
72279: PUSH
72280: LD_VAR 0 7
72284: PUSH
72285: LD_INT 2
72287: MUL
72288: ST_TO_ADDR
72289: GO 72317
// if amount > max then
72291: LD_VAR 0 9
72295: PUSH
72296: LD_VAR 0 4
72300: GREATER
72301: IFFALSE 72317
// r := r / 2 ;
72303: LD_ADDR_VAR 0 7
72307: PUSH
72308: LD_VAR 0 7
72312: PUSH
72313: LD_INT 2
72315: DIVREAL
72316: ST_TO_ADDR
// time := time / r ;
72317: LD_ADDR_VAR 0 8
72321: PUSH
72322: LD_VAR 0 8
72326: PUSH
72327: LD_VAR 0 7
72331: DIVREAL
72332: ST_TO_ADDR
// if time < 0 then
72333: LD_VAR 0 8
72337: PUSH
72338: LD_INT 0
72340: LESS
72341: IFFALSE 72358
// time := time * - 1 ;
72343: LD_ADDR_VAR 0 8
72347: PUSH
72348: LD_VAR 0 8
72352: PUSH
72353: LD_INT 1
72355: NEG
72356: MUL
72357: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
72358: LD_VAR 0 8
72362: PUSH
72363: LD_INT 35
72365: PPUSH
72366: LD_INT 875
72368: PPUSH
72369: CALL_OW 12
72373: PLUS
72374: PPUSH
72375: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72379: LD_INT 1
72381: PPUSH
72382: LD_INT 5
72384: PPUSH
72385: CALL_OW 12
72389: PPUSH
72390: LD_VAR 0 1
72394: PPUSH
72395: LD_INT 1
72397: PPUSH
72398: CALL_OW 55
// end ;
72402: GO 72215
// end ;
72404: LD_VAR 0 5
72408: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72409: LD_INT 0
72411: PPUSH
72412: PPUSH
72413: PPUSH
72414: PPUSH
72415: PPUSH
72416: PPUSH
72417: PPUSH
72418: PPUSH
// if not turrets or not factories then
72419: LD_VAR 0 1
72423: NOT
72424: PUSH
72425: LD_VAR 0 2
72429: NOT
72430: OR
72431: IFFALSE 72435
// exit ;
72433: GO 72742
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72435: LD_ADDR_VAR 0 10
72439: PUSH
72440: LD_INT 5
72442: PUSH
72443: LD_INT 6
72445: PUSH
72446: EMPTY
72447: LIST
72448: LIST
72449: PUSH
72450: LD_INT 2
72452: PUSH
72453: LD_INT 4
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: PUSH
72460: LD_INT 3
72462: PUSH
72463: LD_INT 5
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: LIST
72474: PUSH
72475: LD_INT 24
72477: PUSH
72478: LD_INT 25
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: PUSH
72485: LD_INT 23
72487: PUSH
72488: LD_INT 27
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: PUSH
72495: EMPTY
72496: LIST
72497: LIST
72498: PUSH
72499: LD_INT 42
72501: PUSH
72502: LD_INT 43
72504: PUSH
72505: EMPTY
72506: LIST
72507: LIST
72508: PUSH
72509: LD_INT 44
72511: PUSH
72512: LD_INT 46
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: PUSH
72519: LD_INT 45
72521: PUSH
72522: LD_INT 47
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: PUSH
72529: EMPTY
72530: LIST
72531: LIST
72532: LIST
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: LIST
72538: ST_TO_ADDR
// result := [ ] ;
72539: LD_ADDR_VAR 0 3
72543: PUSH
72544: EMPTY
72545: ST_TO_ADDR
// for i in turrets do
72546: LD_ADDR_VAR 0 4
72550: PUSH
72551: LD_VAR 0 1
72555: PUSH
72556: FOR_IN
72557: IFFALSE 72740
// begin nat := GetNation ( i ) ;
72559: LD_ADDR_VAR 0 7
72563: PUSH
72564: LD_VAR 0 4
72568: PPUSH
72569: CALL_OW 248
72573: ST_TO_ADDR
// weapon := 0 ;
72574: LD_ADDR_VAR 0 8
72578: PUSH
72579: LD_INT 0
72581: ST_TO_ADDR
// if not nat then
72582: LD_VAR 0 7
72586: NOT
72587: IFFALSE 72591
// continue ;
72589: GO 72556
// for j in list [ nat ] do
72591: LD_ADDR_VAR 0 5
72595: PUSH
72596: LD_VAR 0 10
72600: PUSH
72601: LD_VAR 0 7
72605: ARRAY
72606: PUSH
72607: FOR_IN
72608: IFFALSE 72649
// if GetBWeapon ( i ) = j [ 1 ] then
72610: LD_VAR 0 4
72614: PPUSH
72615: CALL_OW 269
72619: PUSH
72620: LD_VAR 0 5
72624: PUSH
72625: LD_INT 1
72627: ARRAY
72628: EQUAL
72629: IFFALSE 72647
// begin weapon := j [ 2 ] ;
72631: LD_ADDR_VAR 0 8
72635: PUSH
72636: LD_VAR 0 5
72640: PUSH
72641: LD_INT 2
72643: ARRAY
72644: ST_TO_ADDR
// break ;
72645: GO 72649
// end ;
72647: GO 72607
72649: POP
72650: POP
// if not weapon then
72651: LD_VAR 0 8
72655: NOT
72656: IFFALSE 72660
// continue ;
72658: GO 72556
// for k in factories do
72660: LD_ADDR_VAR 0 6
72664: PUSH
72665: LD_VAR 0 2
72669: PUSH
72670: FOR_IN
72671: IFFALSE 72736
// begin weapons := AvailableWeaponList ( k ) ;
72673: LD_ADDR_VAR 0 9
72677: PUSH
72678: LD_VAR 0 6
72682: PPUSH
72683: CALL_OW 478
72687: ST_TO_ADDR
// if not weapons then
72688: LD_VAR 0 9
72692: NOT
72693: IFFALSE 72697
// continue ;
72695: GO 72670
// if weapon in weapons then
72697: LD_VAR 0 8
72701: PUSH
72702: LD_VAR 0 9
72706: IN
72707: IFFALSE 72734
// begin result := [ i , weapon ] ;
72709: LD_ADDR_VAR 0 3
72713: PUSH
72714: LD_VAR 0 4
72718: PUSH
72719: LD_VAR 0 8
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: ST_TO_ADDR
// exit ;
72728: POP
72729: POP
72730: POP
72731: POP
72732: GO 72742
// end ; end ;
72734: GO 72670
72736: POP
72737: POP
// end ;
72738: GO 72556
72740: POP
72741: POP
// end ;
72742: LD_VAR 0 3
72746: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72747: LD_INT 0
72749: PPUSH
// if not side or side > 8 then
72750: LD_VAR 0 3
72754: NOT
72755: PUSH
72756: LD_VAR 0 3
72760: PUSH
72761: LD_INT 8
72763: GREATER
72764: OR
72765: IFFALSE 72769
// exit ;
72767: GO 72828
// if not range then
72769: LD_VAR 0 4
72773: NOT
72774: IFFALSE 72785
// range := - 12 ;
72776: LD_ADDR_VAR 0 4
72780: PUSH
72781: LD_INT 12
72783: NEG
72784: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72785: LD_VAR 0 1
72789: PPUSH
72790: LD_VAR 0 2
72794: PPUSH
72795: LD_VAR 0 3
72799: PPUSH
72800: LD_VAR 0 4
72804: PPUSH
72805: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72809: LD_VAR 0 1
72813: PPUSH
72814: LD_VAR 0 2
72818: PPUSH
72819: LD_VAR 0 3
72823: PPUSH
72824: CALL_OW 331
// end ;
72828: LD_VAR 0 5
72832: RET
// export function Video ( mode ) ; begin
72833: LD_INT 0
72835: PPUSH
// ingame_video = mode ;
72836: LD_ADDR_OWVAR 52
72840: PUSH
72841: LD_VAR 0 1
72845: ST_TO_ADDR
// interface_hidden = mode ;
72846: LD_ADDR_OWVAR 54
72850: PUSH
72851: LD_VAR 0 1
72855: ST_TO_ADDR
// end ;
72856: LD_VAR 0 2
72860: RET
// export function Join ( array , element ) ; begin
72861: LD_INT 0
72863: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72864: LD_ADDR_VAR 0 3
72868: PUSH
72869: LD_VAR 0 1
72873: PPUSH
72874: LD_VAR 0 1
72878: PUSH
72879: LD_INT 1
72881: PLUS
72882: PPUSH
72883: LD_VAR 0 2
72887: PPUSH
72888: CALL_OW 1
72892: ST_TO_ADDR
// end ;
72893: LD_VAR 0 3
72897: RET
// export function JoinUnion ( array , element ) ; begin
72898: LD_INT 0
72900: PPUSH
// result := array union element ;
72901: LD_ADDR_VAR 0 3
72905: PUSH
72906: LD_VAR 0 1
72910: PUSH
72911: LD_VAR 0 2
72915: UNION
72916: ST_TO_ADDR
// end ;
72917: LD_VAR 0 3
72921: RET
// export function GetBehemoths ( side ) ; begin
72922: LD_INT 0
72924: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
72925: LD_ADDR_VAR 0 2
72929: PUSH
72930: LD_INT 22
72932: PUSH
72933: LD_VAR 0 1
72937: PUSH
72938: EMPTY
72939: LIST
72940: LIST
72941: PUSH
72942: LD_INT 31
72944: PUSH
72945: LD_INT 25
72947: PUSH
72948: EMPTY
72949: LIST
72950: LIST
72951: PUSH
72952: EMPTY
72953: LIST
72954: LIST
72955: PPUSH
72956: CALL_OW 69
72960: ST_TO_ADDR
// end ;
72961: LD_VAR 0 2
72965: RET
// export function Shuffle ( array ) ; var i , index ; begin
72966: LD_INT 0
72968: PPUSH
72969: PPUSH
72970: PPUSH
// result := [ ] ;
72971: LD_ADDR_VAR 0 2
72975: PUSH
72976: EMPTY
72977: ST_TO_ADDR
// if not array then
72978: LD_VAR 0 1
72982: NOT
72983: IFFALSE 72987
// exit ;
72985: GO 73086
// Randomize ;
72987: CALL_OW 10
// for i = array downto 1 do
72991: LD_ADDR_VAR 0 3
72995: PUSH
72996: DOUBLE
72997: LD_VAR 0 1
73001: INC
73002: ST_TO_ADDR
73003: LD_INT 1
73005: PUSH
73006: FOR_DOWNTO
73007: IFFALSE 73084
// begin index := rand ( 1 , array ) ;
73009: LD_ADDR_VAR 0 4
73013: PUSH
73014: LD_INT 1
73016: PPUSH
73017: LD_VAR 0 1
73021: PPUSH
73022: CALL_OW 12
73026: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
73027: LD_ADDR_VAR 0 2
73031: PUSH
73032: LD_VAR 0 2
73036: PPUSH
73037: LD_VAR 0 2
73041: PUSH
73042: LD_INT 1
73044: PLUS
73045: PPUSH
73046: LD_VAR 0 1
73050: PUSH
73051: LD_VAR 0 4
73055: ARRAY
73056: PPUSH
73057: CALL_OW 2
73061: ST_TO_ADDR
// array := Delete ( array , index ) ;
73062: LD_ADDR_VAR 0 1
73066: PUSH
73067: LD_VAR 0 1
73071: PPUSH
73072: LD_VAR 0 4
73076: PPUSH
73077: CALL_OW 3
73081: ST_TO_ADDR
// end ;
73082: GO 73006
73084: POP
73085: POP
// end ;
73086: LD_VAR 0 2
73090: RET
// export function GetBaseMaterials ( base ) ; begin
73091: LD_INT 0
73093: PPUSH
// result := [ 0 , 0 , 0 ] ;
73094: LD_ADDR_VAR 0 2
73098: PUSH
73099: LD_INT 0
73101: PUSH
73102: LD_INT 0
73104: PUSH
73105: LD_INT 0
73107: PUSH
73108: EMPTY
73109: LIST
73110: LIST
73111: LIST
73112: ST_TO_ADDR
// if not base then
73113: LD_VAR 0 1
73117: NOT
73118: IFFALSE 73122
// exit ;
73120: GO 73171
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
73122: LD_ADDR_VAR 0 2
73126: PUSH
73127: LD_VAR 0 1
73131: PPUSH
73132: LD_INT 1
73134: PPUSH
73135: CALL_OW 275
73139: PUSH
73140: LD_VAR 0 1
73144: PPUSH
73145: LD_INT 2
73147: PPUSH
73148: CALL_OW 275
73152: PUSH
73153: LD_VAR 0 1
73157: PPUSH
73158: LD_INT 3
73160: PPUSH
73161: CALL_OW 275
73165: PUSH
73166: EMPTY
73167: LIST
73168: LIST
73169: LIST
73170: ST_TO_ADDR
// end ;
73171: LD_VAR 0 2
73175: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
73176: LD_INT 0
73178: PPUSH
73179: PPUSH
// result := array ;
73180: LD_ADDR_VAR 0 3
73184: PUSH
73185: LD_VAR 0 1
73189: ST_TO_ADDR
// if size >= result then
73190: LD_VAR 0 2
73194: PUSH
73195: LD_VAR 0 3
73199: GREATEREQUAL
73200: IFFALSE 73204
// exit ;
73202: GO 73254
// if size then
73204: LD_VAR 0 2
73208: IFFALSE 73254
// for i := array downto size do
73210: LD_ADDR_VAR 0 4
73214: PUSH
73215: DOUBLE
73216: LD_VAR 0 1
73220: INC
73221: ST_TO_ADDR
73222: LD_VAR 0 2
73226: PUSH
73227: FOR_DOWNTO
73228: IFFALSE 73252
// result := Delete ( result , result ) ;
73230: LD_ADDR_VAR 0 3
73234: PUSH
73235: LD_VAR 0 3
73239: PPUSH
73240: LD_VAR 0 3
73244: PPUSH
73245: CALL_OW 3
73249: ST_TO_ADDR
73250: GO 73227
73252: POP
73253: POP
// end ;
73254: LD_VAR 0 3
73258: RET
// export function ComExit ( unit ) ; var tmp ; begin
73259: LD_INT 0
73261: PPUSH
73262: PPUSH
// if not IsInUnit ( unit ) then
73263: LD_VAR 0 1
73267: PPUSH
73268: CALL_OW 310
73272: NOT
73273: IFFALSE 73277
// exit ;
73275: GO 73337
// tmp := IsInUnit ( unit ) ;
73277: LD_ADDR_VAR 0 3
73281: PUSH
73282: LD_VAR 0 1
73286: PPUSH
73287: CALL_OW 310
73291: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73292: LD_VAR 0 3
73296: PPUSH
73297: CALL_OW 247
73301: PUSH
73302: LD_INT 2
73304: EQUAL
73305: IFFALSE 73318
// ComExitVehicle ( unit ) else
73307: LD_VAR 0 1
73311: PPUSH
73312: CALL_OW 121
73316: GO 73327
// ComExitBuilding ( unit ) ;
73318: LD_VAR 0 1
73322: PPUSH
73323: CALL_OW 122
// result := tmp ;
73327: LD_ADDR_VAR 0 2
73331: PUSH
73332: LD_VAR 0 3
73336: ST_TO_ADDR
// end ;
73337: LD_VAR 0 2
73341: RET
// export function ComExitAll ( units ) ; var i ; begin
73342: LD_INT 0
73344: PPUSH
73345: PPUSH
// if not units then
73346: LD_VAR 0 1
73350: NOT
73351: IFFALSE 73355
// exit ;
73353: GO 73381
// for i in units do
73355: LD_ADDR_VAR 0 3
73359: PUSH
73360: LD_VAR 0 1
73364: PUSH
73365: FOR_IN
73366: IFFALSE 73379
// ComExit ( i ) ;
73368: LD_VAR 0 3
73372: PPUSH
73373: CALL 73259 0 1
73377: GO 73365
73379: POP
73380: POP
// end ;
73381: LD_VAR 0 2
73385: RET
// export function ResetHc ; begin
73386: LD_INT 0
73388: PPUSH
// InitHc ;
73389: CALL_OW 19
// hc_importance := 0 ;
73393: LD_ADDR_OWVAR 32
73397: PUSH
73398: LD_INT 0
73400: ST_TO_ADDR
// end ;
73401: LD_VAR 0 1
73405: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73406: LD_INT 0
73408: PPUSH
73409: PPUSH
73410: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73411: LD_ADDR_VAR 0 6
73415: PUSH
73416: LD_VAR 0 1
73420: PUSH
73421: LD_VAR 0 3
73425: PLUS
73426: PUSH
73427: LD_INT 2
73429: DIV
73430: ST_TO_ADDR
// if _x < 0 then
73431: LD_VAR 0 6
73435: PUSH
73436: LD_INT 0
73438: LESS
73439: IFFALSE 73456
// _x := _x * - 1 ;
73441: LD_ADDR_VAR 0 6
73445: PUSH
73446: LD_VAR 0 6
73450: PUSH
73451: LD_INT 1
73453: NEG
73454: MUL
73455: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73456: LD_ADDR_VAR 0 7
73460: PUSH
73461: LD_VAR 0 2
73465: PUSH
73466: LD_VAR 0 4
73470: PLUS
73471: PUSH
73472: LD_INT 2
73474: DIV
73475: ST_TO_ADDR
// if _y < 0 then
73476: LD_VAR 0 7
73480: PUSH
73481: LD_INT 0
73483: LESS
73484: IFFALSE 73501
// _y := _y * - 1 ;
73486: LD_ADDR_VAR 0 7
73490: PUSH
73491: LD_VAR 0 7
73495: PUSH
73496: LD_INT 1
73498: NEG
73499: MUL
73500: ST_TO_ADDR
// result := [ _x , _y ] ;
73501: LD_ADDR_VAR 0 5
73505: PUSH
73506: LD_VAR 0 6
73510: PUSH
73511: LD_VAR 0 7
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: ST_TO_ADDR
// end ;
73520: LD_VAR 0 5
73524: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73525: LD_INT 0
73527: PPUSH
73528: PPUSH
73529: PPUSH
73530: PPUSH
// task := GetTaskList ( unit ) ;
73531: LD_ADDR_VAR 0 7
73535: PUSH
73536: LD_VAR 0 1
73540: PPUSH
73541: CALL_OW 437
73545: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73546: LD_VAR 0 7
73550: NOT
73551: PUSH
73552: LD_VAR 0 1
73556: PPUSH
73557: LD_VAR 0 2
73561: PPUSH
73562: CALL_OW 308
73566: NOT
73567: AND
73568: IFFALSE 73572
// exit ;
73570: GO 73690
// if IsInArea ( unit , area ) then
73572: LD_VAR 0 1
73576: PPUSH
73577: LD_VAR 0 2
73581: PPUSH
73582: CALL_OW 308
73586: IFFALSE 73604
// begin ComMoveToArea ( unit , goAway ) ;
73588: LD_VAR 0 1
73592: PPUSH
73593: LD_VAR 0 3
73597: PPUSH
73598: CALL_OW 113
// exit ;
73602: GO 73690
// end ; if task [ 1 ] [ 1 ] <> M then
73604: LD_VAR 0 7
73608: PUSH
73609: LD_INT 1
73611: ARRAY
73612: PUSH
73613: LD_INT 1
73615: ARRAY
73616: PUSH
73617: LD_STRING M
73619: NONEQUAL
73620: IFFALSE 73624
// exit ;
73622: GO 73690
// x := task [ 1 ] [ 2 ] ;
73624: LD_ADDR_VAR 0 5
73628: PUSH
73629: LD_VAR 0 7
73633: PUSH
73634: LD_INT 1
73636: ARRAY
73637: PUSH
73638: LD_INT 2
73640: ARRAY
73641: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73642: LD_ADDR_VAR 0 6
73646: PUSH
73647: LD_VAR 0 7
73651: PUSH
73652: LD_INT 1
73654: ARRAY
73655: PUSH
73656: LD_INT 3
73658: ARRAY
73659: ST_TO_ADDR
// if InArea ( x , y , area ) then
73660: LD_VAR 0 5
73664: PPUSH
73665: LD_VAR 0 6
73669: PPUSH
73670: LD_VAR 0 2
73674: PPUSH
73675: CALL_OW 309
73679: IFFALSE 73690
// ComStop ( unit ) ;
73681: LD_VAR 0 1
73685: PPUSH
73686: CALL_OW 141
// end ;
73690: LD_VAR 0 4
73694: RET
// export function Abs ( value ) ; begin
73695: LD_INT 0
73697: PPUSH
// result := value ;
73698: LD_ADDR_VAR 0 2
73702: PUSH
73703: LD_VAR 0 1
73707: ST_TO_ADDR
// if value < 0 then
73708: LD_VAR 0 1
73712: PUSH
73713: LD_INT 0
73715: LESS
73716: IFFALSE 73733
// result := value * - 1 ;
73718: LD_ADDR_VAR 0 2
73722: PUSH
73723: LD_VAR 0 1
73727: PUSH
73728: LD_INT 1
73730: NEG
73731: MUL
73732: ST_TO_ADDR
// end ;
73733: LD_VAR 0 2
73737: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73738: LD_INT 0
73740: PPUSH
73741: PPUSH
73742: PPUSH
73743: PPUSH
73744: PPUSH
73745: PPUSH
73746: PPUSH
73747: PPUSH
// if not unit or not building then
73748: LD_VAR 0 1
73752: NOT
73753: PUSH
73754: LD_VAR 0 2
73758: NOT
73759: OR
73760: IFFALSE 73764
// exit ;
73762: GO 73990
// x := GetX ( building ) ;
73764: LD_ADDR_VAR 0 4
73768: PUSH
73769: LD_VAR 0 2
73773: PPUSH
73774: CALL_OW 250
73778: ST_TO_ADDR
// y := GetY ( building ) ;
73779: LD_ADDR_VAR 0 6
73783: PUSH
73784: LD_VAR 0 2
73788: PPUSH
73789: CALL_OW 251
73793: ST_TO_ADDR
// d := GetDir ( building ) ;
73794: LD_ADDR_VAR 0 8
73798: PUSH
73799: LD_VAR 0 2
73803: PPUSH
73804: CALL_OW 254
73808: ST_TO_ADDR
// r := 4 ;
73809: LD_ADDR_VAR 0 9
73813: PUSH
73814: LD_INT 4
73816: ST_TO_ADDR
// for i := 1 to 5 do
73817: LD_ADDR_VAR 0 10
73821: PUSH
73822: DOUBLE
73823: LD_INT 1
73825: DEC
73826: ST_TO_ADDR
73827: LD_INT 5
73829: PUSH
73830: FOR_TO
73831: IFFALSE 73988
// begin _x := ShiftX ( x , d , r + i ) ;
73833: LD_ADDR_VAR 0 5
73837: PUSH
73838: LD_VAR 0 4
73842: PPUSH
73843: LD_VAR 0 8
73847: PPUSH
73848: LD_VAR 0 9
73852: PUSH
73853: LD_VAR 0 10
73857: PLUS
73858: PPUSH
73859: CALL_OW 272
73863: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73864: LD_ADDR_VAR 0 7
73868: PUSH
73869: LD_VAR 0 6
73873: PPUSH
73874: LD_VAR 0 8
73878: PPUSH
73879: LD_VAR 0 9
73883: PUSH
73884: LD_VAR 0 10
73888: PLUS
73889: PPUSH
73890: CALL_OW 273
73894: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73895: LD_VAR 0 5
73899: PPUSH
73900: LD_VAR 0 7
73904: PPUSH
73905: CALL_OW 488
73909: PUSH
73910: LD_VAR 0 5
73914: PPUSH
73915: LD_VAR 0 7
73919: PPUSH
73920: CALL_OW 428
73924: PPUSH
73925: CALL_OW 247
73929: PUSH
73930: LD_INT 3
73932: PUSH
73933: LD_INT 2
73935: PUSH
73936: EMPTY
73937: LIST
73938: LIST
73939: IN
73940: NOT
73941: AND
73942: IFFALSE 73986
// begin ComMoveXY ( unit , _x , _y ) ;
73944: LD_VAR 0 1
73948: PPUSH
73949: LD_VAR 0 5
73953: PPUSH
73954: LD_VAR 0 7
73958: PPUSH
73959: CALL_OW 111
// result := [ _x , _y ] ;
73963: LD_ADDR_VAR 0 3
73967: PUSH
73968: LD_VAR 0 5
73972: PUSH
73973: LD_VAR 0 7
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: ST_TO_ADDR
// exit ;
73982: POP
73983: POP
73984: GO 73990
// end ; end ;
73986: GO 73830
73988: POP
73989: POP
// end ;
73990: LD_VAR 0 3
73994: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73995: LD_INT 0
73997: PPUSH
73998: PPUSH
73999: PPUSH
// result := 0 ;
74000: LD_ADDR_VAR 0 3
74004: PUSH
74005: LD_INT 0
74007: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
74008: LD_VAR 0 1
74012: PUSH
74013: LD_INT 0
74015: LESS
74016: PUSH
74017: LD_VAR 0 1
74021: PUSH
74022: LD_INT 8
74024: GREATER
74025: OR
74026: PUSH
74027: LD_VAR 0 2
74031: PUSH
74032: LD_INT 0
74034: LESS
74035: OR
74036: PUSH
74037: LD_VAR 0 2
74041: PUSH
74042: LD_INT 8
74044: GREATER
74045: OR
74046: IFFALSE 74050
// exit ;
74048: GO 74125
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
74050: LD_ADDR_VAR 0 4
74054: PUSH
74055: LD_INT 22
74057: PUSH
74058: LD_VAR 0 2
74062: PUSH
74063: EMPTY
74064: LIST
74065: LIST
74066: PPUSH
74067: CALL_OW 69
74071: PUSH
74072: FOR_IN
74073: IFFALSE 74123
// begin un := UnitShoot ( i ) ;
74075: LD_ADDR_VAR 0 5
74079: PUSH
74080: LD_VAR 0 4
74084: PPUSH
74085: CALL_OW 504
74089: ST_TO_ADDR
// if GetSide ( un ) = side1 then
74090: LD_VAR 0 5
74094: PPUSH
74095: CALL_OW 255
74099: PUSH
74100: LD_VAR 0 1
74104: EQUAL
74105: IFFALSE 74121
// begin result := un ;
74107: LD_ADDR_VAR 0 3
74111: PUSH
74112: LD_VAR 0 5
74116: ST_TO_ADDR
// exit ;
74117: POP
74118: POP
74119: GO 74125
// end ; end ;
74121: GO 74072
74123: POP
74124: POP
// end ;
74125: LD_VAR 0 3
74129: RET
// export function GetCargoBay ( units ) ; begin
74130: LD_INT 0
74132: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
74133: LD_ADDR_VAR 0 2
74137: PUSH
74138: LD_VAR 0 1
74142: PPUSH
74143: LD_INT 2
74145: PUSH
74146: LD_INT 34
74148: PUSH
74149: LD_INT 12
74151: PUSH
74152: EMPTY
74153: LIST
74154: LIST
74155: PUSH
74156: LD_INT 34
74158: PUSH
74159: LD_INT 51
74161: PUSH
74162: EMPTY
74163: LIST
74164: LIST
74165: PUSH
74166: LD_INT 34
74168: PUSH
74169: LD_INT 32
74171: PUSH
74172: EMPTY
74173: LIST
74174: LIST
74175: PUSH
74176: LD_INT 34
74178: PUSH
74179: LD_INT 89
74181: PUSH
74182: EMPTY
74183: LIST
74184: LIST
74185: PUSH
74186: EMPTY
74187: LIST
74188: LIST
74189: LIST
74190: LIST
74191: LIST
74192: PPUSH
74193: CALL_OW 72
74197: ST_TO_ADDR
// end ;
74198: LD_VAR 0 2
74202: RET
// export function Negate ( value ) ; begin
74203: LD_INT 0
74205: PPUSH
// result := not value ;
74206: LD_ADDR_VAR 0 2
74210: PUSH
74211: LD_VAR 0 1
74215: NOT
74216: ST_TO_ADDR
// end ;
74217: LD_VAR 0 2
74221: RET
// export function Inc ( value ) ; begin
74222: LD_INT 0
74224: PPUSH
// result := value + 1 ;
74225: LD_ADDR_VAR 0 2
74229: PUSH
74230: LD_VAR 0 1
74234: PUSH
74235: LD_INT 1
74237: PLUS
74238: ST_TO_ADDR
// end ;
74239: LD_VAR 0 2
74243: RET
// export function Dec ( value ) ; begin
74244: LD_INT 0
74246: PPUSH
// result := value - 1 ;
74247: LD_ADDR_VAR 0 2
74251: PUSH
74252: LD_VAR 0 1
74256: PUSH
74257: LD_INT 1
74259: MINUS
74260: ST_TO_ADDR
// end ;
74261: LD_VAR 0 2
74265: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
74266: LD_INT 0
74268: PPUSH
74269: PPUSH
74270: PPUSH
74271: PPUSH
74272: PPUSH
74273: PPUSH
74274: PPUSH
74275: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
74276: LD_VAR 0 1
74280: PPUSH
74281: LD_VAR 0 2
74285: PPUSH
74286: CALL_OW 488
74290: NOT
74291: PUSH
74292: LD_VAR 0 3
74296: PPUSH
74297: LD_VAR 0 4
74301: PPUSH
74302: CALL_OW 488
74306: NOT
74307: OR
74308: IFFALSE 74321
// begin result := - 1 ;
74310: LD_ADDR_VAR 0 5
74314: PUSH
74315: LD_INT 1
74317: NEG
74318: ST_TO_ADDR
// exit ;
74319: GO 74556
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74321: LD_ADDR_VAR 0 12
74325: PUSH
74326: LD_VAR 0 1
74330: PPUSH
74331: LD_VAR 0 2
74335: PPUSH
74336: LD_VAR 0 3
74340: PPUSH
74341: LD_VAR 0 4
74345: PPUSH
74346: CALL 73406 0 4
74350: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74351: LD_ADDR_VAR 0 11
74355: PUSH
74356: LD_VAR 0 1
74360: PPUSH
74361: LD_VAR 0 2
74365: PPUSH
74366: LD_VAR 0 12
74370: PUSH
74371: LD_INT 1
74373: ARRAY
74374: PPUSH
74375: LD_VAR 0 12
74379: PUSH
74380: LD_INT 2
74382: ARRAY
74383: PPUSH
74384: CALL_OW 298
74388: ST_TO_ADDR
// distance := 9999 ;
74389: LD_ADDR_VAR 0 10
74393: PUSH
74394: LD_INT 9999
74396: ST_TO_ADDR
// for i := 0 to 5 do
74397: LD_ADDR_VAR 0 6
74401: PUSH
74402: DOUBLE
74403: LD_INT 0
74405: DEC
74406: ST_TO_ADDR
74407: LD_INT 5
74409: PUSH
74410: FOR_TO
74411: IFFALSE 74554
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74413: LD_ADDR_VAR 0 7
74417: PUSH
74418: LD_VAR 0 1
74422: PPUSH
74423: LD_VAR 0 6
74427: PPUSH
74428: LD_VAR 0 11
74432: PPUSH
74433: CALL_OW 272
74437: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74438: LD_ADDR_VAR 0 8
74442: PUSH
74443: LD_VAR 0 2
74447: PPUSH
74448: LD_VAR 0 6
74452: PPUSH
74453: LD_VAR 0 11
74457: PPUSH
74458: CALL_OW 273
74462: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74463: LD_VAR 0 7
74467: PPUSH
74468: LD_VAR 0 8
74472: PPUSH
74473: CALL_OW 488
74477: NOT
74478: IFFALSE 74482
// continue ;
74480: GO 74410
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74482: LD_ADDR_VAR 0 9
74486: PUSH
74487: LD_VAR 0 12
74491: PUSH
74492: LD_INT 1
74494: ARRAY
74495: PPUSH
74496: LD_VAR 0 12
74500: PUSH
74501: LD_INT 2
74503: ARRAY
74504: PPUSH
74505: LD_VAR 0 7
74509: PPUSH
74510: LD_VAR 0 8
74514: PPUSH
74515: CALL_OW 298
74519: ST_TO_ADDR
// if tmp < distance then
74520: LD_VAR 0 9
74524: PUSH
74525: LD_VAR 0 10
74529: LESS
74530: IFFALSE 74552
// begin result := i ;
74532: LD_ADDR_VAR 0 5
74536: PUSH
74537: LD_VAR 0 6
74541: ST_TO_ADDR
// distance := tmp ;
74542: LD_ADDR_VAR 0 10
74546: PUSH
74547: LD_VAR 0 9
74551: ST_TO_ADDR
// end ; end ;
74552: GO 74410
74554: POP
74555: POP
// end ;
74556: LD_VAR 0 5
74560: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74561: LD_INT 0
74563: PPUSH
74564: PPUSH
// if not driver or not IsInUnit ( driver ) then
74565: LD_VAR 0 1
74569: NOT
74570: PUSH
74571: LD_VAR 0 1
74575: PPUSH
74576: CALL_OW 310
74580: NOT
74581: OR
74582: IFFALSE 74586
// exit ;
74584: GO 74676
// vehicle := IsInUnit ( driver ) ;
74586: LD_ADDR_VAR 0 3
74590: PUSH
74591: LD_VAR 0 1
74595: PPUSH
74596: CALL_OW 310
74600: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74601: LD_VAR 0 1
74605: PPUSH
74606: LD_STRING \
74608: PUSH
74609: LD_INT 0
74611: PUSH
74612: LD_INT 0
74614: PUSH
74615: LD_INT 0
74617: PUSH
74618: LD_INT 0
74620: PUSH
74621: LD_INT 0
74623: PUSH
74624: LD_INT 0
74626: PUSH
74627: EMPTY
74628: LIST
74629: LIST
74630: LIST
74631: LIST
74632: LIST
74633: LIST
74634: LIST
74635: PUSH
74636: LD_STRING E
74638: PUSH
74639: LD_INT 0
74641: PUSH
74642: LD_INT 0
74644: PUSH
74645: LD_VAR 0 3
74649: PUSH
74650: LD_INT 0
74652: PUSH
74653: LD_INT 0
74655: PUSH
74656: LD_INT 0
74658: PUSH
74659: EMPTY
74660: LIST
74661: LIST
74662: LIST
74663: LIST
74664: LIST
74665: LIST
74666: LIST
74667: PUSH
74668: EMPTY
74669: LIST
74670: LIST
74671: PPUSH
74672: CALL_OW 446
// end ;
74676: LD_VAR 0 2
74680: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74681: LD_INT 0
74683: PPUSH
74684: PPUSH
// if not driver or not IsInUnit ( driver ) then
74685: LD_VAR 0 1
74689: NOT
74690: PUSH
74691: LD_VAR 0 1
74695: PPUSH
74696: CALL_OW 310
74700: NOT
74701: OR
74702: IFFALSE 74706
// exit ;
74704: GO 74796
// vehicle := IsInUnit ( driver ) ;
74706: LD_ADDR_VAR 0 3
74710: PUSH
74711: LD_VAR 0 1
74715: PPUSH
74716: CALL_OW 310
74720: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74721: LD_VAR 0 1
74725: PPUSH
74726: LD_STRING \
74728: PUSH
74729: LD_INT 0
74731: PUSH
74732: LD_INT 0
74734: PUSH
74735: LD_INT 0
74737: PUSH
74738: LD_INT 0
74740: PUSH
74741: LD_INT 0
74743: PUSH
74744: LD_INT 0
74746: PUSH
74747: EMPTY
74748: LIST
74749: LIST
74750: LIST
74751: LIST
74752: LIST
74753: LIST
74754: LIST
74755: PUSH
74756: LD_STRING E
74758: PUSH
74759: LD_INT 0
74761: PUSH
74762: LD_INT 0
74764: PUSH
74765: LD_VAR 0 3
74769: PUSH
74770: LD_INT 0
74772: PUSH
74773: LD_INT 0
74775: PUSH
74776: LD_INT 0
74778: PUSH
74779: EMPTY
74780: LIST
74781: LIST
74782: LIST
74783: LIST
74784: LIST
74785: LIST
74786: LIST
74787: PUSH
74788: EMPTY
74789: LIST
74790: LIST
74791: PPUSH
74792: CALL_OW 447
// end ;
74796: LD_VAR 0 2
74800: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74801: LD_INT 0
74803: PPUSH
74804: PPUSH
74805: PPUSH
// tmp := [ ] ;
74806: LD_ADDR_VAR 0 5
74810: PUSH
74811: EMPTY
74812: ST_TO_ADDR
// for i in units do
74813: LD_ADDR_VAR 0 4
74817: PUSH
74818: LD_VAR 0 1
74822: PUSH
74823: FOR_IN
74824: IFFALSE 74862
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74826: LD_ADDR_VAR 0 5
74830: PUSH
74831: LD_VAR 0 5
74835: PPUSH
74836: LD_VAR 0 5
74840: PUSH
74841: LD_INT 1
74843: PLUS
74844: PPUSH
74845: LD_VAR 0 4
74849: PPUSH
74850: CALL_OW 256
74854: PPUSH
74855: CALL_OW 2
74859: ST_TO_ADDR
74860: GO 74823
74862: POP
74863: POP
// if not tmp then
74864: LD_VAR 0 5
74868: NOT
74869: IFFALSE 74873
// exit ;
74871: GO 74921
// if asc then
74873: LD_VAR 0 2
74877: IFFALSE 74901
// result := SortListByListAsc ( units , tmp ) else
74879: LD_ADDR_VAR 0 3
74883: PUSH
74884: LD_VAR 0 1
74888: PPUSH
74889: LD_VAR 0 5
74893: PPUSH
74894: CALL_OW 76
74898: ST_TO_ADDR
74899: GO 74921
// result := SortListByListDesc ( units , tmp ) ;
74901: LD_ADDR_VAR 0 3
74905: PUSH
74906: LD_VAR 0 1
74910: PPUSH
74911: LD_VAR 0 5
74915: PPUSH
74916: CALL_OW 77
74920: ST_TO_ADDR
// end ;
74921: LD_VAR 0 3
74925: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74926: LD_INT 0
74928: PPUSH
74929: PPUSH
// task := GetTaskList ( mech ) ;
74930: LD_ADDR_VAR 0 4
74934: PUSH
74935: LD_VAR 0 1
74939: PPUSH
74940: CALL_OW 437
74944: ST_TO_ADDR
// if not task then
74945: LD_VAR 0 4
74949: NOT
74950: IFFALSE 74954
// exit ;
74952: GO 74996
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74954: LD_ADDR_VAR 0 3
74958: PUSH
74959: LD_VAR 0 4
74963: PUSH
74964: LD_INT 1
74966: ARRAY
74967: PUSH
74968: LD_INT 1
74970: ARRAY
74971: PUSH
74972: LD_STRING r
74974: EQUAL
74975: PUSH
74976: LD_VAR 0 4
74980: PUSH
74981: LD_INT 1
74983: ARRAY
74984: PUSH
74985: LD_INT 4
74987: ARRAY
74988: PUSH
74989: LD_VAR 0 2
74993: EQUAL
74994: AND
74995: ST_TO_ADDR
// end ;
74996: LD_VAR 0 3
75000: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
75001: LD_INT 0
75003: PPUSH
// SetDir ( unit , d ) ;
75004: LD_VAR 0 1
75008: PPUSH
75009: LD_VAR 0 4
75013: PPUSH
75014: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
75018: LD_VAR 0 1
75022: PPUSH
75023: LD_VAR 0 2
75027: PPUSH
75028: LD_VAR 0 3
75032: PPUSH
75033: LD_VAR 0 5
75037: PPUSH
75038: CALL_OW 48
// end ;
75042: LD_VAR 0 6
75046: RET
// export function ToNaturalNumber ( number ) ; begin
75047: LD_INT 0
75049: PPUSH
// result := number div 1 ;
75050: LD_ADDR_VAR 0 2
75054: PUSH
75055: LD_VAR 0 1
75059: PUSH
75060: LD_INT 1
75062: DIV
75063: ST_TO_ADDR
// if number < 0 then
75064: LD_VAR 0 1
75068: PUSH
75069: LD_INT 0
75071: LESS
75072: IFFALSE 75082
// result := 0 ;
75074: LD_ADDR_VAR 0 2
75078: PUSH
75079: LD_INT 0
75081: ST_TO_ADDR
// end ;
75082: LD_VAR 0 2
75086: RET
// export function SortByClass ( units , class ) ; var un ; begin
75087: LD_INT 0
75089: PPUSH
75090: PPUSH
// if not units or not class then
75091: LD_VAR 0 1
75095: NOT
75096: PUSH
75097: LD_VAR 0 2
75101: NOT
75102: OR
75103: IFFALSE 75107
// exit ;
75105: GO 75202
// result := [ ] ;
75107: LD_ADDR_VAR 0 3
75111: PUSH
75112: EMPTY
75113: ST_TO_ADDR
// for un in units do
75114: LD_ADDR_VAR 0 4
75118: PUSH
75119: LD_VAR 0 1
75123: PUSH
75124: FOR_IN
75125: IFFALSE 75200
// if GetClass ( un ) = class then
75127: LD_VAR 0 4
75131: PPUSH
75132: CALL_OW 257
75136: PUSH
75137: LD_VAR 0 2
75141: EQUAL
75142: IFFALSE 75169
// result := Insert ( result , 1 , un ) else
75144: LD_ADDR_VAR 0 3
75148: PUSH
75149: LD_VAR 0 3
75153: PPUSH
75154: LD_INT 1
75156: PPUSH
75157: LD_VAR 0 4
75161: PPUSH
75162: CALL_OW 2
75166: ST_TO_ADDR
75167: GO 75198
// result := Replace ( result , result + 1 , un ) ;
75169: LD_ADDR_VAR 0 3
75173: PUSH
75174: LD_VAR 0 3
75178: PPUSH
75179: LD_VAR 0 3
75183: PUSH
75184: LD_INT 1
75186: PLUS
75187: PPUSH
75188: LD_VAR 0 4
75192: PPUSH
75193: CALL_OW 1
75197: ST_TO_ADDR
75198: GO 75124
75200: POP
75201: POP
// end ;
75202: LD_VAR 0 3
75206: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
75207: LD_INT 0
75209: PPUSH
75210: PPUSH
75211: PPUSH
75212: PPUSH
75213: PPUSH
75214: PPUSH
75215: PPUSH
// result := [ ] ;
75216: LD_ADDR_VAR 0 4
75220: PUSH
75221: EMPTY
75222: ST_TO_ADDR
// if x - r < 0 then
75223: LD_VAR 0 1
75227: PUSH
75228: LD_VAR 0 3
75232: MINUS
75233: PUSH
75234: LD_INT 0
75236: LESS
75237: IFFALSE 75249
// min_x := 0 else
75239: LD_ADDR_VAR 0 8
75243: PUSH
75244: LD_INT 0
75246: ST_TO_ADDR
75247: GO 75265
// min_x := x - r ;
75249: LD_ADDR_VAR 0 8
75253: PUSH
75254: LD_VAR 0 1
75258: PUSH
75259: LD_VAR 0 3
75263: MINUS
75264: ST_TO_ADDR
// if y - r < 0 then
75265: LD_VAR 0 2
75269: PUSH
75270: LD_VAR 0 3
75274: MINUS
75275: PUSH
75276: LD_INT 0
75278: LESS
75279: IFFALSE 75291
// min_y := 0 else
75281: LD_ADDR_VAR 0 7
75285: PUSH
75286: LD_INT 0
75288: ST_TO_ADDR
75289: GO 75307
// min_y := y - r ;
75291: LD_ADDR_VAR 0 7
75295: PUSH
75296: LD_VAR 0 2
75300: PUSH
75301: LD_VAR 0 3
75305: MINUS
75306: ST_TO_ADDR
// max_x := x + r ;
75307: LD_ADDR_VAR 0 9
75311: PUSH
75312: LD_VAR 0 1
75316: PUSH
75317: LD_VAR 0 3
75321: PLUS
75322: ST_TO_ADDR
// max_y := y + r ;
75323: LD_ADDR_VAR 0 10
75327: PUSH
75328: LD_VAR 0 2
75332: PUSH
75333: LD_VAR 0 3
75337: PLUS
75338: ST_TO_ADDR
// for _x = min_x to max_x do
75339: LD_ADDR_VAR 0 5
75343: PUSH
75344: DOUBLE
75345: LD_VAR 0 8
75349: DEC
75350: ST_TO_ADDR
75351: LD_VAR 0 9
75355: PUSH
75356: FOR_TO
75357: IFFALSE 75458
// for _y = min_y to max_y do
75359: LD_ADDR_VAR 0 6
75363: PUSH
75364: DOUBLE
75365: LD_VAR 0 7
75369: DEC
75370: ST_TO_ADDR
75371: LD_VAR 0 10
75375: PUSH
75376: FOR_TO
75377: IFFALSE 75454
// begin if not ValidHex ( _x , _y ) then
75379: LD_VAR 0 5
75383: PPUSH
75384: LD_VAR 0 6
75388: PPUSH
75389: CALL_OW 488
75393: NOT
75394: IFFALSE 75398
// continue ;
75396: GO 75376
// if GetResourceTypeXY ( _x , _y ) then
75398: LD_VAR 0 5
75402: PPUSH
75403: LD_VAR 0 6
75407: PPUSH
75408: CALL_OW 283
75412: IFFALSE 75452
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75414: LD_ADDR_VAR 0 4
75418: PUSH
75419: LD_VAR 0 4
75423: PPUSH
75424: LD_VAR 0 4
75428: PUSH
75429: LD_INT 1
75431: PLUS
75432: PPUSH
75433: LD_VAR 0 5
75437: PUSH
75438: LD_VAR 0 6
75442: PUSH
75443: EMPTY
75444: LIST
75445: LIST
75446: PPUSH
75447: CALL_OW 1
75451: ST_TO_ADDR
// end ;
75452: GO 75376
75454: POP
75455: POP
75456: GO 75356
75458: POP
75459: POP
// end ;
75460: LD_VAR 0 4
75464: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75465: LD_INT 0
75467: PPUSH
75468: PPUSH
75469: PPUSH
75470: PPUSH
75471: PPUSH
75472: PPUSH
75473: PPUSH
75474: PPUSH
// if not units then
75475: LD_VAR 0 1
75479: NOT
75480: IFFALSE 75484
// exit ;
75482: GO 76008
// result := UnitFilter ( units , [ f_ok ] ) ;
75484: LD_ADDR_VAR 0 3
75488: PUSH
75489: LD_VAR 0 1
75493: PPUSH
75494: LD_INT 50
75496: PUSH
75497: EMPTY
75498: LIST
75499: PPUSH
75500: CALL_OW 72
75504: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75505: LD_ADDR_VAR 0 8
75509: PUSH
75510: LD_VAR 0 1
75514: PUSH
75515: LD_INT 1
75517: ARRAY
75518: PPUSH
75519: CALL_OW 255
75523: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
75524: LD_ADDR_VAR 0 10
75528: PUSH
75529: LD_INT 29
75531: PUSH
75532: LD_INT 91
75534: PUSH
75535: LD_INT 49
75537: PUSH
75538: EMPTY
75539: LIST
75540: LIST
75541: LIST
75542: ST_TO_ADDR
// if not result then
75543: LD_VAR 0 3
75547: NOT
75548: IFFALSE 75552
// exit ;
75550: GO 76008
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75552: LD_ADDR_VAR 0 5
75556: PUSH
75557: LD_INT 81
75559: PUSH
75560: LD_VAR 0 8
75564: PUSH
75565: EMPTY
75566: LIST
75567: LIST
75568: PPUSH
75569: CALL_OW 69
75573: ST_TO_ADDR
// for i in result do
75574: LD_ADDR_VAR 0 4
75578: PUSH
75579: LD_VAR 0 3
75583: PUSH
75584: FOR_IN
75585: IFFALSE 76006
// begin tag := GetTag ( i ) + 1 ;
75587: LD_ADDR_VAR 0 9
75591: PUSH
75592: LD_VAR 0 4
75596: PPUSH
75597: CALL_OW 110
75601: PUSH
75602: LD_INT 1
75604: PLUS
75605: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75606: LD_ADDR_VAR 0 7
75610: PUSH
75611: LD_VAR 0 4
75615: PPUSH
75616: CALL_OW 250
75620: PPUSH
75621: LD_VAR 0 4
75625: PPUSH
75626: CALL_OW 251
75630: PPUSH
75631: LD_INT 6
75633: PPUSH
75634: CALL 75207 0 3
75638: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
75639: LD_VAR 0 4
75643: PPUSH
75644: CALL_OW 247
75648: PUSH
75649: LD_INT 2
75651: EQUAL
75652: PUSH
75653: LD_VAR 0 7
75657: AND
75658: PUSH
75659: LD_VAR 0 4
75663: PPUSH
75664: CALL_OW 264
75668: PUSH
75669: LD_VAR 0 10
75673: IN
75674: NOT
75675: AND
75676: IFFALSE 75715
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75678: LD_VAR 0 4
75682: PPUSH
75683: LD_VAR 0 7
75687: PUSH
75688: LD_INT 1
75690: ARRAY
75691: PUSH
75692: LD_INT 1
75694: ARRAY
75695: PPUSH
75696: LD_VAR 0 7
75700: PUSH
75701: LD_INT 1
75703: ARRAY
75704: PUSH
75705: LD_INT 2
75707: ARRAY
75708: PPUSH
75709: CALL_OW 116
75713: GO 76004
// if path > tag then
75715: LD_VAR 0 2
75719: PUSH
75720: LD_VAR 0 9
75724: GREATER
75725: IFFALSE 75933
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
75727: LD_ADDR_VAR 0 6
75731: PUSH
75732: LD_VAR 0 5
75736: PPUSH
75737: LD_INT 91
75739: PUSH
75740: LD_VAR 0 4
75744: PUSH
75745: LD_INT 8
75747: PUSH
75748: EMPTY
75749: LIST
75750: LIST
75751: LIST
75752: PPUSH
75753: CALL_OW 72
75757: ST_TO_ADDR
// if nearEnemy then
75758: LD_VAR 0 6
75762: IFFALSE 75831
// begin if GetWeapon ( i ) = ru_time_lapser then
75764: LD_VAR 0 4
75768: PPUSH
75769: CALL_OW 264
75773: PUSH
75774: LD_INT 49
75776: EQUAL
75777: IFFALSE 75805
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75779: LD_VAR 0 4
75783: PPUSH
75784: LD_VAR 0 6
75788: PPUSH
75789: LD_VAR 0 4
75793: PPUSH
75794: CALL_OW 74
75798: PPUSH
75799: CALL_OW 112
75803: GO 75829
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75805: LD_VAR 0 4
75809: PPUSH
75810: LD_VAR 0 6
75814: PPUSH
75815: LD_VAR 0 4
75819: PPUSH
75820: CALL_OW 74
75824: PPUSH
75825: CALL_OW 115
// end else
75829: GO 75931
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75831: LD_VAR 0 4
75835: PPUSH
75836: LD_VAR 0 2
75840: PUSH
75841: LD_VAR 0 9
75845: ARRAY
75846: PUSH
75847: LD_INT 1
75849: ARRAY
75850: PPUSH
75851: LD_VAR 0 2
75855: PUSH
75856: LD_VAR 0 9
75860: ARRAY
75861: PUSH
75862: LD_INT 2
75864: ARRAY
75865: PPUSH
75866: CALL_OW 297
75870: PUSH
75871: LD_INT 6
75873: GREATER
75874: IFFALSE 75917
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75876: LD_VAR 0 4
75880: PPUSH
75881: LD_VAR 0 2
75885: PUSH
75886: LD_VAR 0 9
75890: ARRAY
75891: PUSH
75892: LD_INT 1
75894: ARRAY
75895: PPUSH
75896: LD_VAR 0 2
75900: PUSH
75901: LD_VAR 0 9
75905: ARRAY
75906: PUSH
75907: LD_INT 2
75909: ARRAY
75910: PPUSH
75911: CALL_OW 114
75915: GO 75931
// SetTag ( i , tag ) ;
75917: LD_VAR 0 4
75921: PPUSH
75922: LD_VAR 0 9
75926: PPUSH
75927: CALL_OW 109
// end else
75931: GO 76004
// if enemy then
75933: LD_VAR 0 5
75937: IFFALSE 76004
// begin if GetWeapon ( i ) = ru_time_lapser then
75939: LD_VAR 0 4
75943: PPUSH
75944: CALL_OW 264
75948: PUSH
75949: LD_INT 49
75951: EQUAL
75952: IFFALSE 75980
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75954: LD_VAR 0 4
75958: PPUSH
75959: LD_VAR 0 5
75963: PPUSH
75964: LD_VAR 0 4
75968: PPUSH
75969: CALL_OW 74
75973: PPUSH
75974: CALL_OW 112
75978: GO 76004
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75980: LD_VAR 0 4
75984: PPUSH
75985: LD_VAR 0 5
75989: PPUSH
75990: LD_VAR 0 4
75994: PPUSH
75995: CALL_OW 74
75999: PPUSH
76000: CALL_OW 115
// end ; end ;
76004: GO 75584
76006: POP
76007: POP
// end ;
76008: LD_VAR 0 3
76012: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
76013: LD_INT 0
76015: PPUSH
76016: PPUSH
76017: PPUSH
// if not unit or IsInUnit ( unit ) then
76018: LD_VAR 0 1
76022: NOT
76023: PUSH
76024: LD_VAR 0 1
76028: PPUSH
76029: CALL_OW 310
76033: OR
76034: IFFALSE 76038
// exit ;
76036: GO 76129
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
76038: LD_ADDR_VAR 0 4
76042: PUSH
76043: LD_VAR 0 1
76047: PPUSH
76048: CALL_OW 250
76052: PPUSH
76053: LD_VAR 0 2
76057: PPUSH
76058: LD_INT 1
76060: PPUSH
76061: CALL_OW 272
76065: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
76066: LD_ADDR_VAR 0 5
76070: PUSH
76071: LD_VAR 0 1
76075: PPUSH
76076: CALL_OW 251
76080: PPUSH
76081: LD_VAR 0 2
76085: PPUSH
76086: LD_INT 1
76088: PPUSH
76089: CALL_OW 273
76093: ST_TO_ADDR
// if ValidHex ( x , y ) then
76094: LD_VAR 0 4
76098: PPUSH
76099: LD_VAR 0 5
76103: PPUSH
76104: CALL_OW 488
76108: IFFALSE 76129
// ComTurnXY ( unit , x , y ) ;
76110: LD_VAR 0 1
76114: PPUSH
76115: LD_VAR 0 4
76119: PPUSH
76120: LD_VAR 0 5
76124: PPUSH
76125: CALL_OW 118
// end ;
76129: LD_VAR 0 3
76133: RET
// export function SeeUnits ( side , units ) ; var i ; begin
76134: LD_INT 0
76136: PPUSH
76137: PPUSH
// result := false ;
76138: LD_ADDR_VAR 0 3
76142: PUSH
76143: LD_INT 0
76145: ST_TO_ADDR
// if not units then
76146: LD_VAR 0 2
76150: NOT
76151: IFFALSE 76155
// exit ;
76153: GO 76200
// for i in units do
76155: LD_ADDR_VAR 0 4
76159: PUSH
76160: LD_VAR 0 2
76164: PUSH
76165: FOR_IN
76166: IFFALSE 76198
// if See ( side , i ) then
76168: LD_VAR 0 1
76172: PPUSH
76173: LD_VAR 0 4
76177: PPUSH
76178: CALL_OW 292
76182: IFFALSE 76196
// begin result := true ;
76184: LD_ADDR_VAR 0 3
76188: PUSH
76189: LD_INT 1
76191: ST_TO_ADDR
// exit ;
76192: POP
76193: POP
76194: GO 76200
// end ;
76196: GO 76165
76198: POP
76199: POP
// end ;
76200: LD_VAR 0 3
76204: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
76205: LD_INT 0
76207: PPUSH
76208: PPUSH
76209: PPUSH
76210: PPUSH
// if not unit or not points then
76211: LD_VAR 0 1
76215: NOT
76216: PUSH
76217: LD_VAR 0 2
76221: NOT
76222: OR
76223: IFFALSE 76227
// exit ;
76225: GO 76317
// dist := 99999 ;
76227: LD_ADDR_VAR 0 5
76231: PUSH
76232: LD_INT 99999
76234: ST_TO_ADDR
// for i in points do
76235: LD_ADDR_VAR 0 4
76239: PUSH
76240: LD_VAR 0 2
76244: PUSH
76245: FOR_IN
76246: IFFALSE 76315
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
76248: LD_ADDR_VAR 0 6
76252: PUSH
76253: LD_VAR 0 1
76257: PPUSH
76258: LD_VAR 0 4
76262: PUSH
76263: LD_INT 1
76265: ARRAY
76266: PPUSH
76267: LD_VAR 0 4
76271: PUSH
76272: LD_INT 2
76274: ARRAY
76275: PPUSH
76276: CALL_OW 297
76280: ST_TO_ADDR
// if tmpDist < dist then
76281: LD_VAR 0 6
76285: PUSH
76286: LD_VAR 0 5
76290: LESS
76291: IFFALSE 76313
// begin result := i ;
76293: LD_ADDR_VAR 0 3
76297: PUSH
76298: LD_VAR 0 4
76302: ST_TO_ADDR
// dist := tmpDist ;
76303: LD_ADDR_VAR 0 5
76307: PUSH
76308: LD_VAR 0 6
76312: ST_TO_ADDR
// end ; end ;
76313: GO 76245
76315: POP
76316: POP
// end ;
76317: LD_VAR 0 3
76321: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
76322: LD_INT 0
76324: PPUSH
// uc_side := side ;
76325: LD_ADDR_OWVAR 20
76329: PUSH
76330: LD_VAR 0 1
76334: ST_TO_ADDR
// uc_nation := 3 ;
76335: LD_ADDR_OWVAR 21
76339: PUSH
76340: LD_INT 3
76342: ST_TO_ADDR
// vc_chassis := 25 ;
76343: LD_ADDR_OWVAR 37
76347: PUSH
76348: LD_INT 25
76350: ST_TO_ADDR
// vc_engine := engine_siberite ;
76351: LD_ADDR_OWVAR 39
76355: PUSH
76356: LD_INT 3
76358: ST_TO_ADDR
// vc_control := control_computer ;
76359: LD_ADDR_OWVAR 38
76363: PUSH
76364: LD_INT 3
76366: ST_TO_ADDR
// vc_weapon := 59 ;
76367: LD_ADDR_OWVAR 40
76371: PUSH
76372: LD_INT 59
76374: ST_TO_ADDR
// result := CreateVehicle ;
76375: LD_ADDR_VAR 0 5
76379: PUSH
76380: CALL_OW 45
76384: ST_TO_ADDR
// SetDir ( result , d ) ;
76385: LD_VAR 0 5
76389: PPUSH
76390: LD_VAR 0 4
76394: PPUSH
76395: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
76399: LD_VAR 0 5
76403: PPUSH
76404: LD_VAR 0 2
76408: PPUSH
76409: LD_VAR 0 3
76413: PPUSH
76414: LD_INT 0
76416: PPUSH
76417: CALL_OW 48
// end ;
76421: LD_VAR 0 5
76425: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
76426: LD_INT 0
76428: PPUSH
76429: PPUSH
76430: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
76431: LD_ADDR_VAR 0 2
76435: PUSH
76436: LD_INT 0
76438: PUSH
76439: LD_INT 0
76441: PUSH
76442: LD_INT 0
76444: PUSH
76445: LD_INT 0
76447: PUSH
76448: EMPTY
76449: LIST
76450: LIST
76451: LIST
76452: LIST
76453: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
76454: LD_VAR 0 1
76458: NOT
76459: PUSH
76460: LD_VAR 0 1
76464: PPUSH
76465: CALL_OW 264
76469: PUSH
76470: LD_INT 12
76472: PUSH
76473: LD_INT 51
76475: PUSH
76476: LD_INT 32
76478: PUSH
76479: LD_INT 89
76481: PUSH
76482: EMPTY
76483: LIST
76484: LIST
76485: LIST
76486: LIST
76487: IN
76488: NOT
76489: OR
76490: IFFALSE 76494
// exit ;
76492: GO 76592
// for i := 1 to 3 do
76494: LD_ADDR_VAR 0 3
76498: PUSH
76499: DOUBLE
76500: LD_INT 1
76502: DEC
76503: ST_TO_ADDR
76504: LD_INT 3
76506: PUSH
76507: FOR_TO
76508: IFFALSE 76590
// begin tmp := GetCargo ( cargo , i ) ;
76510: LD_ADDR_VAR 0 4
76514: PUSH
76515: LD_VAR 0 1
76519: PPUSH
76520: LD_VAR 0 3
76524: PPUSH
76525: CALL_OW 289
76529: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
76530: LD_ADDR_VAR 0 2
76534: PUSH
76535: LD_VAR 0 2
76539: PPUSH
76540: LD_VAR 0 3
76544: PPUSH
76545: LD_VAR 0 4
76549: PPUSH
76550: CALL_OW 1
76554: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
76555: LD_ADDR_VAR 0 2
76559: PUSH
76560: LD_VAR 0 2
76564: PPUSH
76565: LD_INT 4
76567: PPUSH
76568: LD_VAR 0 2
76572: PUSH
76573: LD_INT 4
76575: ARRAY
76576: PUSH
76577: LD_VAR 0 4
76581: PLUS
76582: PPUSH
76583: CALL_OW 1
76587: ST_TO_ADDR
// end ;
76588: GO 76507
76590: POP
76591: POP
// end ;
76592: LD_VAR 0 2
76596: RET
// export function Length ( array ) ; begin
76597: LD_INT 0
76599: PPUSH
// result := array + 0 ;
76600: LD_ADDR_VAR 0 2
76604: PUSH
76605: LD_VAR 0 1
76609: PUSH
76610: LD_INT 0
76612: PLUS
76613: ST_TO_ADDR
// end ;
76614: LD_VAR 0 2
76618: RET
// export function PrepareArray ( array ) ; begin
76619: LD_INT 0
76621: PPUSH
// result := array diff 0 ;
76622: LD_ADDR_VAR 0 2
76626: PUSH
76627: LD_VAR 0 1
76631: PUSH
76632: LD_INT 0
76634: DIFF
76635: ST_TO_ADDR
// if not result [ 1 ] then
76636: LD_VAR 0 2
76640: PUSH
76641: LD_INT 1
76643: ARRAY
76644: NOT
76645: IFFALSE 76665
// result := Delete ( result , 1 ) ;
76647: LD_ADDR_VAR 0 2
76651: PUSH
76652: LD_VAR 0 2
76656: PPUSH
76657: LD_INT 1
76659: PPUSH
76660: CALL_OW 3
76664: ST_TO_ADDR
// end ;
76665: LD_VAR 0 2
76669: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
76670: LD_INT 0
76672: PPUSH
76673: PPUSH
76674: PPUSH
76675: PPUSH
// sibRocketRange := 25 ;
76676: LD_ADDR_VAR 0 6
76680: PUSH
76681: LD_INT 25
76683: ST_TO_ADDR
// result := false ;
76684: LD_ADDR_VAR 0 4
76688: PUSH
76689: LD_INT 0
76691: ST_TO_ADDR
// for i := 0 to 5 do
76692: LD_ADDR_VAR 0 5
76696: PUSH
76697: DOUBLE
76698: LD_INT 0
76700: DEC
76701: ST_TO_ADDR
76702: LD_INT 5
76704: PUSH
76705: FOR_TO
76706: IFFALSE 76773
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
76708: LD_VAR 0 1
76712: PPUSH
76713: LD_VAR 0 5
76717: PPUSH
76718: LD_VAR 0 6
76722: PPUSH
76723: CALL_OW 272
76727: PPUSH
76728: LD_VAR 0 2
76732: PPUSH
76733: LD_VAR 0 5
76737: PPUSH
76738: LD_VAR 0 6
76742: PPUSH
76743: CALL_OW 273
76747: PPUSH
76748: LD_VAR 0 3
76752: PPUSH
76753: CALL_OW 309
76757: IFFALSE 76771
// begin result := true ;
76759: LD_ADDR_VAR 0 4
76763: PUSH
76764: LD_INT 1
76766: ST_TO_ADDR
// exit ;
76767: POP
76768: POP
76769: GO 76775
// end ;
76771: GO 76705
76773: POP
76774: POP
// end ;
76775: LD_VAR 0 4
76779: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
76780: LD_INT 0
76782: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
76783: LD_VAR 0 1
76787: PPUSH
76788: LD_VAR 0 2
76792: PPUSH
76793: LD_INT 0
76795: PPUSH
76796: LD_INT 0
76798: PPUSH
76799: LD_INT 1
76801: PPUSH
76802: LD_INT 0
76804: PPUSH
76805: CALL_OW 587
// end ; end_of_file
76809: LD_VAR 0 3
76813: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76814: LD_VAR 0 1
76818: PUSH
76819: LD_INT 200
76821: DOUBLE
76822: GREATEREQUAL
76823: IFFALSE 76831
76825: LD_INT 299
76827: DOUBLE
76828: LESSEQUAL
76829: IFTRUE 76833
76831: GO 76865
76833: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76834: LD_VAR 0 1
76838: PPUSH
76839: LD_VAR 0 2
76843: PPUSH
76844: LD_VAR 0 3
76848: PPUSH
76849: LD_VAR 0 4
76853: PPUSH
76854: LD_VAR 0 5
76858: PPUSH
76859: CALL 31480 0 5
76863: GO 76942
76865: LD_INT 300
76867: DOUBLE
76868: GREATEREQUAL
76869: IFFALSE 76877
76871: LD_INT 399
76873: DOUBLE
76874: LESSEQUAL
76875: IFTRUE 76879
76877: GO 76941
76879: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76880: LD_VAR 0 1
76884: PPUSH
76885: LD_VAR 0 2
76889: PPUSH
76890: LD_VAR 0 3
76894: PPUSH
76895: LD_VAR 0 4
76899: PPUSH
76900: LD_VAR 0 5
76904: PPUSH
76905: LD_VAR 0 6
76909: PPUSH
76910: LD_VAR 0 7
76914: PPUSH
76915: LD_VAR 0 8
76919: PPUSH
76920: LD_VAR 0 9
76924: PPUSH
76925: LD_VAR 0 10
76929: PPUSH
76930: LD_VAR 0 11
76934: PPUSH
76935: CALL 27813 0 11
76939: GO 76942
76941: POP
// end ;
76942: PPOPN 11
76944: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76945: LD_VAR 0 1
76949: PPUSH
76950: LD_VAR 0 2
76954: PPUSH
76955: LD_VAR 0 3
76959: PPUSH
76960: LD_VAR 0 4
76964: PPUSH
76965: LD_VAR 0 5
76969: PPUSH
76970: CALL 31216 0 5
// end ; end_of_file
76974: PPOPN 5
76976: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76977: LD_VAR 0 1
76981: PPUSH
76982: LD_VAR 0 2
76986: PPUSH
76987: LD_VAR 0 3
76991: PPUSH
76992: LD_VAR 0 4
76996: PPUSH
76997: LD_VAR 0 5
77001: PPUSH
77002: LD_VAR 0 6
77006: PPUSH
77007: CALL 15465 0 6
// end ;
77011: PPOPN 6
77013: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77014: LD_INT 0
77016: PPUSH
// begin if not units then
77017: LD_VAR 0 1
77021: NOT
77022: IFFALSE 77026
// exit ;
77024: GO 77026
// end ;
77026: PPOPN 7
77028: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77029: CALL 15369 0 0
// end ;
77033: PPOPN 1
77035: END
