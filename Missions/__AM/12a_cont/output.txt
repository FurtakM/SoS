// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitVariables ;
  11: CALL 130 0 0
// CreateNature ;
  15: CALL 9187 0 0
// PrepareAlliance ;
  19: CALL 344 0 0
// PrepareFriends ;
  23: CALL 3654 0 0
// PrepareAmerican ;
  27: CALL 781 0 0
// PlaceSeeing ( 91 , 70 , 7 , - 32178 ) ;
  31: LD_INT 91
  33: PPUSH
  34: LD_INT 70
  36: PPUSH
  37: LD_INT 7
  39: PPUSH
  40: LD_INT 32178
  42: NEG
  43: PPUSH
  44: CALL_OW 330
// RemoveSeeing ( 91 , 70 , 7 ) ;
  48: LD_INT 91
  50: PPUSH
  51: LD_INT 70
  53: PPUSH
  54: LD_INT 7
  56: PPUSH
  57: CALL_OW 331
// if debug then
  61: LD_EXP 1
  65: IFFALSE 113
// begin SetAttitude ( 1 , 7 , att_enemy , true ) ;
  67: LD_INT 1
  69: PPUSH
  70: LD_INT 7
  72: PPUSH
  73: LD_INT 2
  75: PPUSH
  76: LD_INT 1
  78: PPUSH
  79: CALL_OW 80
// RemoveUnit ( Powell ) ;
  83: LD_EXP 16
  87: PPUSH
  88: CALL_OW 64
// DoNotAttack ( 1 , JMM ) ;
  92: LD_INT 1
  94: PPUSH
  95: LD_EXP 14
  99: PPUSH
 100: CALL_OW 471
// FogOff ( 1 ) ;
 104: LD_INT 1
 106: PPUSH
 107: CALL_OW 344
// end else
 111: GO 117
// Action ;
 113: CALL 9523 0 0
// PreparePatrol ;
 117: CALL 1246 0 0
// game := true ;
 121: LD_ADDR_EXP 2
 125: PUSH
 126: LD_INT 1
 128: ST_TO_ADDR
// end ;
 129: END
// export debug , game , selected , friends , reached_lab , can_escape , on_hill , friends_kill_counter , team_kill_counter , gamma_commander , extra_patrol , invis_used , alert ; export function InitVariables ; begin
 130: LD_INT 0
 132: PPUSH
// debug := false ;
 133: LD_ADDR_EXP 1
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// friends := [ ] ;
 141: LD_ADDR_EXP 4
 145: PUSH
 146: EMPTY
 147: ST_TO_ADDR
// selected := [ ] ;
 148: LD_ADDR_EXP 3
 152: PUSH
 153: EMPTY
 154: ST_TO_ADDR
// reached_lab := false ;
 155: LD_ADDR_EXP 5
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// can_escape := false ;
 163: LD_ADDR_EXP 6
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// game := false ;
 171: LD_ADDR_EXP 2
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 2 ) ;
 179: LD_ADDR_EXP 10
 183: PUSH
 184: LD_STRING GammaCommander
 186: PPUSH
 187: LD_INT 2
 189: PPUSH
 190: CALL_OW 30
 194: ST_TO_ADDR
// friends_kill_counter := 0 ;
 195: LD_ADDR_EXP 8
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// team_kill_counter := 0 ;
 203: LD_ADDR_EXP 9
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// extra_patrol := true ;
 211: LD_ADDR_EXP 11
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// on_hill := false ;
 219: LD_ADDR_EXP 7
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// invis_used := false ;
 227: LD_ADDR_EXP 12
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// alert := false ;
 235: LD_ADDR_EXP 13
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// end ;
 243: LD_VAR 0 1
 247: RET
// every 0 0$1 trigger on_hill do
 248: LD_EXP 7
 252: IFFALSE 264
 254: GO 256
 256: DISABLE
// SetAchievement ( ACH_EYE ) ;
 257: LD_STRING ACH_EYE
 259: PPUSH
 260: CALL_OW 543
 264: END
// every 0 0$1 trigger not invis_used do var i ;
 265: LD_EXP 12
 269: NOT
 270: IFFALSE 341
 272: GO 274
 274: DISABLE
 275: LD_INT 0
 277: PPUSH
// begin enable ;
 278: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) do
 279: LD_ADDR_VAR 0 1
 283: PUSH
 284: LD_INT 22
 286: PUSH
 287: LD_INT 7
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: PUSH
 294: LD_INT 21
 296: PUSH
 297: LD_INT 1
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: PPUSH
 308: CALL_OW 69
 312: PUSH
 313: FOR_IN
 314: IFFALSE 339
// if IsInvisible ( i ) then
 316: LD_VAR 0 1
 320: PPUSH
 321: CALL_OW 571
 325: IFFALSE 337
// begin invis_used := true ;
 327: LD_ADDR_EXP 12
 331: PUSH
 332: LD_INT 1
 334: ST_TO_ADDR
// break ;
 335: GO 339
// end ;
 337: GO 313
 339: POP
 340: POP
// end ; end_of_file
 341: PPOPN 1
 343: END
// export JMM , Roth ; export function PrepareAlliance ; var cargo ; begin
 344: LD_INT 0
 346: PPUSH
 347: PPUSH
// uc_side := 7 ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_INT 7
 355: ST_TO_ADDR
// uc_nation := 1 ;
 356: LD_ADDR_OWVAR 21
 360: PUSH
 361: LD_INT 1
 363: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 11_ ) ;
 364: LD_ADDR_EXP 14
 368: PUSH
 369: LD_STRING JMM
 371: PPUSH
 372: LD_EXP 1
 376: NOT
 377: PPUSH
 378: LD_STRING 11_
 380: PPUSH
 381: CALL 34159 0 3
 385: ST_TO_ADDR
// uc_side := 4 ;
 386: LD_ADDR_OWVAR 20
 390: PUSH
 391: LD_INT 4
 393: ST_TO_ADDR
// Roth := NewCharacter ( Roth ) ;
 394: LD_ADDR_EXP 15
 398: PUSH
 399: LD_STRING Roth
 401: PPUSH
 402: CALL_OW 25
 406: ST_TO_ADDR
// SetDir ( JMM , 1 ) ;
 407: LD_EXP 14
 411: PPUSH
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 233
// SetClass ( JMM , 1 ) ;
 419: LD_EXP 14
 423: PPUSH
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 336
// PlaceUnitXY ( JMM , 105 , 10 , false ) ;
 431: LD_EXP 14
 435: PPUSH
 436: LD_INT 105
 438: PPUSH
 439: LD_INT 10
 441: PPUSH
 442: LD_INT 0
 444: PPUSH
 445: CALL_OW 48
// SetDir ( Roth , 4 ) ;
 449: LD_EXP 15
 453: PPUSH
 454: LD_INT 4
 456: PPUSH
 457: CALL_OW 233
// PlaceUnitXY ( Roth , 109 , 10 , false ) ;
 461: LD_EXP 15
 465: PPUSH
 466: LD_INT 109
 468: PPUSH
 469: LD_INT 10
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 48
// ComTurnUnit ( JMM , Roth ) ;
 479: LD_EXP 14
 483: PPUSH
 484: LD_EXP 15
 488: PPUSH
 489: CALL_OW 119
// ComTurnUnit ( Roth , JMM ) ;
 493: LD_EXP 15
 497: PPUSH
 498: LD_EXP 14
 502: PPUSH
 503: CALL_OW 119
// PrepareVehicle ( us_medium_tracked , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
 507: LD_INT 3
 509: PPUSH
 510: LD_INT 3
 512: PPUSH
 513: LD_INT 3
 515: PPUSH
 516: LD_INT 12
 518: PPUSH
 519: LD_INT 100
 521: PPUSH
 522: CALL 39176 0 5
// cargo := CreateVehicle ;
 526: LD_ADDR_VAR 0 2
 530: PUSH
 531: CALL_OW 45
 535: ST_TO_ADDR
// SetDir ( cargo , 1 ) ;
 536: LD_VAR 0 2
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL_OW 233
// PlaceUnitXY ( cargo , 179 , 45 , false ) ;
 548: LD_VAR 0 2
 552: PPUSH
 553: LD_INT 179
 555: PPUSH
 556: LD_INT 45
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 30 ) ;
 566: LD_VAR 0 2
 570: PPUSH
 571: LD_INT 4
 573: PPUSH
 574: LD_INT 30
 576: PPUSH
 577: CALL_OW 290
// if LoadVariable ( 11_artifact_captured , 0 ) then
 581: LD_STRING 11_artifact_captured
 583: PPUSH
 584: LD_INT 0
 586: PPUSH
 587: CALL_OW 30
 591: IFFALSE 648
// begin cargo := CreateVehicle ;
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// SetDir ( cargo , 0 ) ;
 603: LD_VAR 0 2
 607: PPUSH
 608: LD_INT 0
 610: PPUSH
 611: CALL_OW 233
// PlaceUnitXY ( cargo , 171 , 85 , false ) ;
 615: LD_VAR 0 2
 619: PPUSH
 620: LD_INT 171
 622: PPUSH
 623: LD_INT 85
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 48
// SetCargo ( cargo , mat_artifact , 50 ) ;
 633: LD_VAR 0 2
 637: PPUSH
 638: LD_INT 4
 640: PPUSH
 641: LD_INT 50
 643: PPUSH
 644: CALL_OW 290
// end ; SetSide ( amlab , 7 ) ;
 648: LD_INT 47
 650: PPUSH
 651: LD_INT 7
 653: PPUSH
 654: CALL_OW 235
// DoNotAttack ( 1 , amlab ) ;
 658: LD_INT 1
 660: PPUSH
 661: LD_INT 47
 663: PPUSH
 664: CALL_OW 471
// end ;
 668: LD_VAR 0 1
 672: RET
// every 0 0$1 trigger FilterUnitsInArea ( hill , [ f_side , 7 ] ) and not on_hill do
 673: LD_INT 38
 675: PPUSH
 676: LD_INT 22
 678: PUSH
 679: LD_INT 7
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: PPUSH
 686: CALL_OW 70
 690: PUSH
 691: LD_EXP 7
 695: NOT
 696: AND
 697: IFFALSE 728
 699: GO 701
 701: DISABLE
// begin enable ;
 702: ENABLE
// on_hill := true ;
 703: LD_ADDR_EXP 7
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// PlaceSeeing ( 126 , 13 , 7 , - 90 ) ;
 711: LD_INT 126
 713: PPUSH
 714: LD_INT 13
 716: PPUSH
 717: LD_INT 7
 719: PPUSH
 720: LD_INT 90
 722: NEG
 723: PPUSH
 724: CALL_OW 330
// end ;
 728: END
// every 0 0$1 trigger not FilterUnitsInArea ( hill , [ f_side , 7 ] ) and on_hill do
 729: LD_INT 38
 731: PPUSH
 732: LD_INT 22
 734: PUSH
 735: LD_INT 7
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PPUSH
 742: CALL_OW 70
 746: NOT
 747: PUSH
 748: LD_EXP 7
 752: AND
 753: IFFALSE 780
 755: GO 757
 757: DISABLE
// begin enable ;
 758: ENABLE
// on_hill := false ;
 759: LD_ADDR_EXP 7
 763: PUSH
 764: LD_INT 0
 766: ST_TO_ADDR
// RemoveSeeing ( 126 , 13 , 7 ) ;
 767: LD_INT 126
 769: PPUSH
 770: LD_INT 13
 772: PPUSH
 773: LD_INT 7
 775: PPUSH
 776: CALL_OW 331
// end ; end_of_file
 780: END
// export Powell , mobile_patrol , mobile_points , powell_guards , defenders , defcon , defcon_wave ; export function PrepareAmerican ; var i , j , b , un , tmp ; begin
 781: LD_INT 0
 783: PPUSH
 784: PPUSH
 785: PPUSH
 786: PPUSH
 787: PPUSH
 788: PPUSH
// if Difficulty = 1 then
 789: LD_OWVAR 67
 793: PUSH
 794: LD_INT 1
 796: EQUAL
 797: IFFALSE 905
// begin tmp := [ [ 155 , 77 ] , [ 193 , 93 ] , [ 188 , 81 ] , [ 56 , 85 ] , [ 98 , 87 ] ] ;
 799: LD_ADDR_VAR 0 6
 803: PUSH
 804: LD_INT 155
 806: PUSH
 807: LD_INT 77
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 193
 816: PUSH
 817: LD_INT 93
 819: PUSH
 820: EMPTY
 821: LIST
 822: LIST
 823: PUSH
 824: LD_INT 188
 826: PUSH
 827: LD_INT 81
 829: PUSH
 830: EMPTY
 831: LIST
 832: LIST
 833: PUSH
 834: LD_INT 56
 836: PUSH
 837: LD_INT 85
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PUSH
 844: LD_INT 98
 846: PUSH
 847: LD_INT 87
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: LIST
 858: LIST
 859: LIST
 860: ST_TO_ADDR
// for i in tmp do
 861: LD_ADDR_VAR 0 2
 865: PUSH
 866: LD_VAR 0 6
 870: PUSH
 871: FOR_IN
 872: IFFALSE 903
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 874: LD_VAR 0 2
 878: PUSH
 879: LD_INT 1
 881: ARRAY
 882: PPUSH
 883: LD_VAR 0 2
 887: PUSH
 888: LD_INT 2
 890: ARRAY
 891: PPUSH
 892: CALL_OW 428
 896: PPUSH
 897: CALL_OW 64
 901: GO 871
 903: POP
 904: POP
// end ; defcon := 0 ;
 905: LD_ADDR_EXP 21
 909: PUSH
 910: LD_INT 0
 912: ST_TO_ADDR
// defcon_wave := 0 ;
 913: LD_ADDR_EXP 22
 917: PUSH
 918: LD_INT 0
 920: ST_TO_ADDR
// defenders := [ ] ;
 921: LD_ADDR_EXP 20
 925: PUSH
 926: EMPTY
 927: ST_TO_ADDR
// SetBName ( alfa , alpha ) ;
 928: LD_INT 5
 930: PPUSH
 931: LD_STRING alpha
 933: PPUSH
 934: CALL_OW 500
// uc_side := 1 ;
 938: LD_ADDR_OWVAR 20
 942: PUSH
 943: LD_INT 1
 945: ST_TO_ADDR
// uc_nation := 1 ;
 946: LD_ADDR_OWVAR 21
 950: PUSH
 951: LD_INT 1
 953: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
 954: LD_ADDR_EXP 16
 958: PUSH
 959: LD_STRING Powell
 961: PPUSH
 962: CALL_OW 25
 966: ST_TO_ADDR
// PlaceUnitXY ( Powell , 110 , 26 , false ) ;
 967: LD_EXP 16
 971: PPUSH
 972: LD_INT 110
 974: PPUSH
 975: LD_INT 26
 977: PPUSH
 978: LD_INT 0
 980: PPUSH
 981: CALL_OW 48
// ComHold ( Powell ) ;
 985: LD_EXP 16
 989: PPUSH
 990: CALL_OW 140
// for i = 1 to 5 do
 994: LD_ADDR_VAR 0 2
 998: PUSH
 999: DOUBLE
1000: LD_INT 1
1002: DEC
1003: ST_TO_ADDR
1004: LD_INT 5
1006: PUSH
1007: FOR_TO
1008: IFFALSE 1064
// begin PrepareHuman ( false , 1 , 10 ) ;
1010: LD_INT 0
1012: PPUSH
1013: LD_INT 1
1015: PPUSH
1016: LD_INT 10
1018: PPUSH
1019: CALL_OW 380
// powell_guards := Insert ( powell_guards , 1 , CreateHuman ) ;
1023: LD_ADDR_EXP 19
1027: PUSH
1028: LD_EXP 19
1032: PPUSH
1033: LD_INT 1
1035: PPUSH
1036: CALL_OW 44
1040: PPUSH
1041: CALL_OW 2
1045: ST_TO_ADDR
// PlaceHumanInUnit ( powell_guards [ 1 ] , ambar0 ) ;
1046: LD_EXP 19
1050: PUSH
1051: LD_INT 1
1053: ARRAY
1054: PPUSH
1055: LD_INT 18
1057: PPUSH
1058: CALL_OW 52
// end ;
1062: GO 1007
1064: POP
1065: POP
// if Difficulty > 2 then
1066: LD_OWVAR 67
1070: PUSH
1071: LD_INT 2
1073: GREATER
1074: IFFALSE 1123
// begin bc_type := b_turret ;
1076: LD_ADDR_OWVAR 42
1080: PUSH
1081: LD_INT 33
1083: ST_TO_ADDR
// bc_level := 7 ;
1084: LD_ADDR_OWVAR 43
1088: PUSH
1089: LD_INT 7
1091: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 107 , 55 , 5 ) ;
1092: LD_ADDR_VAR 0 4
1096: PUSH
1097: LD_INT 107
1099: PPUSH
1100: LD_INT 55
1102: PPUSH
1103: LD_INT 5
1105: PPUSH
1106: CALL_OW 47
1110: ST_TO_ADDR
// PlaceWeaponTurret ( b , us_rocket_launcher ) ;
1111: LD_VAR 0 4
1115: PPUSH
1116: LD_INT 7
1118: PPUSH
1119: CALL_OW 431
// end ; for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) ^ FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) do
1123: LD_ADDR_VAR 0 2
1127: PUSH
1128: LD_INT 22
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: LD_INT 30
1140: PUSH
1141: LD_INT 3
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 69
1156: PUSH
1157: LD_INT 22
1159: PUSH
1160: LD_INT 1
1162: PUSH
1163: EMPTY
1164: LIST
1165: LIST
1166: PUSH
1167: LD_INT 30
1169: PUSH
1170: LD_INT 36
1172: PUSH
1173: EMPTY
1174: LIST
1175: LIST
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PPUSH
1181: CALL_OW 69
1185: ADD
1186: PUSH
1187: FOR_IN
1188: IFFALSE 1239
// for j = 1 to 3 do
1190: LD_ADDR_VAR 0 3
1194: PUSH
1195: DOUBLE
1196: LD_INT 1
1198: DEC
1199: ST_TO_ADDR
1200: LD_INT 3
1202: PUSH
1203: FOR_TO
1204: IFFALSE 1235
// begin PrepareHuman ( false , 3 , 6 ) ;
1206: LD_INT 0
1208: PPUSH
1209: LD_INT 3
1211: PPUSH
1212: LD_INT 6
1214: PPUSH
1215: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , i ) ;
1219: CALL_OW 44
1223: PPUSH
1224: LD_VAR 0 2
1228: PPUSH
1229: CALL_OW 52
// end ;
1233: GO 1203
1235: POP
1236: POP
1237: GO 1187
1239: POP
1240: POP
// end ;
1241: LD_VAR 0 1
1245: RET
// export function PreparePatrol ; var i , un ; begin
1246: LD_INT 0
1248: PPUSH
1249: PPUSH
1250: PPUSH
// uc_side := 1 ;
1251: LD_ADDR_OWVAR 20
1255: PUSH
1256: LD_INT 1
1258: ST_TO_ADDR
// uc_nation := 1 ;
1259: LD_ADDR_OWVAR 21
1263: PUSH
1264: LD_INT 1
1266: ST_TO_ADDR
// mobile_points := [ [ [ 99 , 55 ] , [ 113 , 67 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 103 , 41 ] ] , [ [ 27 , 49 ] , [ 46 , 49 ] , [ 87 , 70 ] , [ 99 , 79 ] , [ 118 , 111 ] , [ 99 , 79 ] , [ 87 , 70 ] , [ 46 , 49 ] ] , [ [ 200 , 88 ] , [ 175 , 80 ] , [ 135 , 62 ] , [ 117 , 53 ] , [ 103 , 41 ] , [ 99 , 24 ] , [ 85 , 3 ] , [ 99 , 24 ] , [ 103 , 41 ] , [ 98 , 47 ] , [ 99 , 56 ] , [ 96 , 66 ] , [ 99 , 56 ] , [ 112 , 66 ] , [ 129 , 68 ] , [ 135 , 62 ] , [ 156 , 71 ] , [ 168 , 76 ] , [ 168 , 61 ] , [ 168 , 75 ] , [ 185 , 85 ] ] ] ;
1267: LD_ADDR_EXP 18
1271: PUSH
1272: LD_INT 99
1274: PUSH
1275: LD_INT 55
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: LD_INT 113
1284: PUSH
1285: LD_INT 67
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PUSH
1292: LD_INT 129
1294: PUSH
1295: LD_INT 68
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 135
1304: PUSH
1305: LD_INT 62
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: PUSH
1312: LD_INT 103
1314: PUSH
1315: LD_INT 41
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: LIST
1326: LIST
1327: LIST
1328: PUSH
1329: LD_INT 27
1331: PUSH
1332: LD_INT 49
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: PUSH
1339: LD_INT 46
1341: PUSH
1342: LD_INT 49
1344: PUSH
1345: EMPTY
1346: LIST
1347: LIST
1348: PUSH
1349: LD_INT 87
1351: PUSH
1352: LD_INT 70
1354: PUSH
1355: EMPTY
1356: LIST
1357: LIST
1358: PUSH
1359: LD_INT 99
1361: PUSH
1362: LD_INT 79
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 118
1371: PUSH
1372: LD_INT 111
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: LD_INT 99
1381: PUSH
1382: LD_INT 79
1384: PUSH
1385: EMPTY
1386: LIST
1387: LIST
1388: PUSH
1389: LD_INT 87
1391: PUSH
1392: LD_INT 70
1394: PUSH
1395: EMPTY
1396: LIST
1397: LIST
1398: PUSH
1399: LD_INT 46
1401: PUSH
1402: LD_INT 49
1404: PUSH
1405: EMPTY
1406: LIST
1407: LIST
1408: PUSH
1409: EMPTY
1410: LIST
1411: LIST
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: LIST
1417: LIST
1418: PUSH
1419: LD_INT 200
1421: PUSH
1422: LD_INT 88
1424: PUSH
1425: EMPTY
1426: LIST
1427: LIST
1428: PUSH
1429: LD_INT 175
1431: PUSH
1432: LD_INT 80
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: PUSH
1439: LD_INT 135
1441: PUSH
1442: LD_INT 62
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PUSH
1449: LD_INT 117
1451: PUSH
1452: LD_INT 53
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 103
1461: PUSH
1462: LD_INT 41
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PUSH
1469: LD_INT 99
1471: PUSH
1472: LD_INT 24
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: PUSH
1479: LD_INT 85
1481: PUSH
1482: LD_INT 3
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: LD_INT 99
1491: PUSH
1492: LD_INT 24
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PUSH
1499: LD_INT 103
1501: PUSH
1502: LD_INT 41
1504: PUSH
1505: EMPTY
1506: LIST
1507: LIST
1508: PUSH
1509: LD_INT 98
1511: PUSH
1512: LD_INT 47
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PUSH
1519: LD_INT 99
1521: PUSH
1522: LD_INT 56
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: LD_INT 96
1531: PUSH
1532: LD_INT 66
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 99
1541: PUSH
1542: LD_INT 56
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: LD_INT 112
1551: PUSH
1552: LD_INT 66
1554: PUSH
1555: EMPTY
1556: LIST
1557: LIST
1558: PUSH
1559: LD_INT 129
1561: PUSH
1562: LD_INT 68
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PUSH
1569: LD_INT 135
1571: PUSH
1572: LD_INT 62
1574: PUSH
1575: EMPTY
1576: LIST
1577: LIST
1578: PUSH
1579: LD_INT 156
1581: PUSH
1582: LD_INT 71
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: PUSH
1589: LD_INT 168
1591: PUSH
1592: LD_INT 76
1594: PUSH
1595: EMPTY
1596: LIST
1597: LIST
1598: PUSH
1599: LD_INT 168
1601: PUSH
1602: LD_INT 61
1604: PUSH
1605: EMPTY
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 168
1611: PUSH
1612: LD_INT 75
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: PUSH
1619: LD_INT 185
1621: PUSH
1622: LD_INT 85
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: LIST
1636: LIST
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: LIST
1648: LIST
1649: LIST
1650: LIST
1651: PUSH
1652: EMPTY
1653: LIST
1654: LIST
1655: LIST
1656: ST_TO_ADDR
// mobile_patrol := [ ] ;
1657: LD_ADDR_EXP 17
1661: PUSH
1662: EMPTY
1663: ST_TO_ADDR
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1664: LD_INT 3
1666: PPUSH
1667: LD_INT 1
1669: PPUSH
1670: LD_INT 3
1672: PPUSH
1673: LD_INT 4
1675: PPUSH
1676: LD_INT 100
1678: PPUSH
1679: CALL 39176 0 5
// mobile_patrol := Insert ( mobile_patrol , 1 , CreateVehicle ) ;
1683: LD_ADDR_EXP 17
1687: PUSH
1688: LD_EXP 17
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: CALL_OW 45
1700: PPUSH
1701: CALL_OW 2
1705: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 1 ] , 99 , 55 , false ) ;
1706: LD_EXP 17
1710: PUSH
1711: LD_INT 1
1713: ARRAY
1714: PPUSH
1715: LD_INT 99
1717: PPUSH
1718: LD_INT 55
1720: PPUSH
1721: LD_INT 0
1723: PPUSH
1724: CALL_OW 48
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
1728: LD_INT 2
1730: PPUSH
1731: LD_INT 1
1733: PPUSH
1734: LD_INT 3
1736: PPUSH
1737: LD_INT 4
1739: PPUSH
1740: LD_INT 100
1742: PPUSH
1743: CALL 39176 0 5
// mobile_patrol := Insert ( mobile_patrol , 2 , CreateVehicle ) ;
1747: LD_ADDR_EXP 17
1751: PUSH
1752: LD_EXP 17
1756: PPUSH
1757: LD_INT 2
1759: PPUSH
1760: CALL_OW 45
1764: PPUSH
1765: CALL_OW 2
1769: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 2 ] , 27 , 49 , false ) ;
1770: LD_EXP 17
1774: PUSH
1775: LD_INT 2
1777: ARRAY
1778: PPUSH
1779: LD_INT 27
1781: PPUSH
1782: LD_INT 49
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , [ us_laser , us_rocket_launcher , us_rocket_launcher , us_rocket_launcher ] [ Difficulty ] , 100 ) ;
1792: LD_INT 3
1794: PPUSH
1795: LD_INT 1
1797: PPUSH
1798: LD_INT 3
1800: PPUSH
1801: LD_INT 9
1803: PUSH
1804: LD_INT 7
1806: PUSH
1807: LD_INT 7
1809: PUSH
1810: LD_INT 7
1812: PUSH
1813: EMPTY
1814: LIST
1815: LIST
1816: LIST
1817: LIST
1818: PUSH
1819: LD_OWVAR 67
1823: ARRAY
1824: PPUSH
1825: LD_INT 100
1827: PPUSH
1828: CALL 39176 0 5
// mobile_patrol := Insert ( mobile_patrol , 3 , CreateVehicle ) ;
1832: LD_ADDR_EXP 17
1836: PUSH
1837: LD_EXP 17
1841: PPUSH
1842: LD_INT 3
1844: PPUSH
1845: CALL_OW 45
1849: PPUSH
1850: CALL_OW 2
1854: ST_TO_ADDR
// PlaceUnitXY ( mobile_patrol [ 3 ] , 200 , 88 , false ) ;
1855: LD_EXP 17
1859: PUSH
1860: LD_INT 3
1862: ARRAY
1863: PPUSH
1864: LD_INT 200
1866: PPUSH
1867: LD_INT 88
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 48
// for i = mobile_patrol downto 1 do
1877: LD_ADDR_VAR 0 2
1881: PUSH
1882: DOUBLE
1883: LD_EXP 17
1887: INC
1888: ST_TO_ADDR
1889: LD_INT 1
1891: PUSH
1892: FOR_DOWNTO
1893: IFFALSE 1904
// RaiseSailEvent ( 1 ) ;
1895: LD_INT 1
1897: PPUSH
1898: CALL_OW 427
1902: GO 1892
1904: POP
1905: POP
// end ;
1906: LD_VAR 0 1
1910: RET
// export function SpawnCargo ( ) ; var i , c , k , areas , road , tmp , veh ; begin
1911: LD_INT 0
1913: PPUSH
1914: PPUSH
1915: PPUSH
1916: PPUSH
1917: PPUSH
1918: PPUSH
1919: PPUSH
1920: PPUSH
// areas := [ [ road_east , 4 ] , [ road_south , 5 ] , [ road_west , 1 ] ] ;
1921: LD_ADDR_VAR 0 5
1925: PUSH
1926: LD_INT 20
1928: PUSH
1929: LD_INT 4
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 21
1938: PUSH
1939: LD_INT 5
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 22
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: LIST
1960: ST_TO_ADDR
// road := [ [ 176 , 81 , 135 , 62 , 114 , 67 , 93 , 71 , 76 , 67 ] , [ 107 , 92 , 92 , 72 , 77 , 68 ] , [ 45 , 49 , 67 , 59 , 77 , 68 ] ] ;
1961: LD_ADDR_VAR 0 6
1965: PUSH
1966: LD_INT 176
1968: PUSH
1969: LD_INT 81
1971: PUSH
1972: LD_INT 135
1974: PUSH
1975: LD_INT 62
1977: PUSH
1978: LD_INT 114
1980: PUSH
1981: LD_INT 67
1983: PUSH
1984: LD_INT 93
1986: PUSH
1987: LD_INT 71
1989: PUSH
1990: LD_INT 76
1992: PUSH
1993: LD_INT 67
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: LIST
2000: LIST
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 107
2010: PUSH
2011: LD_INT 92
2013: PUSH
2014: LD_INT 92
2016: PUSH
2017: LD_INT 72
2019: PUSH
2020: LD_INT 77
2022: PUSH
2023: LD_INT 68
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 45
2036: PUSH
2037: LD_INT 49
2039: PUSH
2040: LD_INT 67
2042: PUSH
2043: LD_INT 59
2045: PUSH
2046: LD_INT 77
2048: PUSH
2049: LD_INT 68
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: LIST
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: ST_TO_ADDR
// k := rand ( 1 , areas ) ;
2065: LD_ADDR_VAR 0 4
2069: PUSH
2070: LD_INT 1
2072: PPUSH
2073: LD_VAR 0 5
2077: PPUSH
2078: CALL_OW 12
2082: ST_TO_ADDR
// c := rand ( 1 , 2 ) ;
2083: LD_ADDR_VAR 0 3
2087: PUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_INT 2
2093: PPUSH
2094: CALL_OW 12
2098: ST_TO_ADDR
// uc_side := 1 ;
2099: LD_ADDR_OWVAR 20
2103: PUSH
2104: LD_INT 1
2106: ST_TO_ADDR
// uc_nation := 1 ;
2107: LD_ADDR_OWVAR 21
2111: PUSH
2112: LD_INT 1
2114: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 100 ) ;
2115: LD_INT 2
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: LD_INT 3
2123: PPUSH
2124: LD_INT 12
2126: PPUSH
2127: LD_INT 100
2129: PPUSH
2130: CALL 39176 0 5
// veh := CreateVehicle ;
2134: LD_ADDR_VAR 0 8
2138: PUSH
2139: CALL_OW 45
2143: ST_TO_ADDR
// SetDir ( veh , areas [ k ] [ 2 ] ) ;
2144: LD_VAR 0 8
2148: PPUSH
2149: LD_VAR 0 5
2153: PUSH
2154: LD_VAR 0 4
2158: ARRAY
2159: PUSH
2160: LD_INT 2
2162: ARRAY
2163: PPUSH
2164: CALL_OW 233
// PlaceUnitArea ( veh , areas [ k ] [ 1 ] , false ) ;
2168: LD_VAR 0 8
2172: PPUSH
2173: LD_VAR 0 5
2177: PUSH
2178: LD_VAR 0 4
2182: ARRAY
2183: PUSH
2184: LD_INT 1
2186: ARRAY
2187: PPUSH
2188: LD_INT 0
2190: PPUSH
2191: CALL_OW 49
// SetCargo ( veh , [ mat_cans , mat_siberit ] [ c ] , 100 ) ;
2195: LD_VAR 0 8
2199: PPUSH
2200: LD_INT 1
2202: PUSH
2203: LD_INT 3
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PUSH
2210: LD_VAR 0 3
2214: ARRAY
2215: PPUSH
2216: LD_INT 100
2218: PPUSH
2219: CALL_OW 290
// tmp := road [ k ] ;
2223: LD_ADDR_VAR 0 7
2227: PUSH
2228: LD_VAR 0 6
2232: PUSH
2233: LD_VAR 0 4
2237: ARRAY
2238: ST_TO_ADDR
// for i = 1 to tmp div 2 do
2239: LD_ADDR_VAR 0 2
2243: PUSH
2244: DOUBLE
2245: LD_INT 1
2247: DEC
2248: ST_TO_ADDR
2249: LD_VAR 0 7
2253: PUSH
2254: LD_INT 2
2256: DIV
2257: PUSH
2258: FOR_TO
2259: IFFALSE 2306
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2261: LD_VAR 0 8
2265: PPUSH
2266: LD_VAR 0 7
2270: PUSH
2271: LD_VAR 0 2
2275: PUSH
2276: LD_INT 2
2278: MUL
2279: PUSH
2280: LD_INT 1
2282: MINUS
2283: ARRAY
2284: PPUSH
2285: LD_VAR 0 7
2289: PUSH
2290: LD_VAR 0 2
2294: PUSH
2295: LD_INT 2
2297: MUL
2298: ARRAY
2299: PPUSH
2300: CALL_OW 171
2304: GO 2258
2306: POP
2307: POP
// AddComGive ( veh , alfa ) ;
2308: LD_VAR 0 8
2312: PPUSH
2313: LD_INT 5
2315: PPUSH
2316: CALL_OW 221
// AddComWait ( veh , 0 0$2 ) ;
2320: LD_VAR 0 8
2324: PPUSH
2325: LD_INT 70
2327: PPUSH
2328: CALL_OW 202
// for i = tmp div 2 downto 1 do
2332: LD_ADDR_VAR 0 2
2336: PUSH
2337: DOUBLE
2338: LD_VAR 0 7
2342: PUSH
2343: LD_INT 2
2345: DIV
2346: INC
2347: ST_TO_ADDR
2348: LD_INT 1
2350: PUSH
2351: FOR_DOWNTO
2352: IFFALSE 2399
// AddComMoveXY ( veh , tmp [ i * 2 - 1 ] , tmp [ i * 2 ] ) ;
2354: LD_VAR 0 8
2358: PPUSH
2359: LD_VAR 0 7
2363: PUSH
2364: LD_VAR 0 2
2368: PUSH
2369: LD_INT 2
2371: MUL
2372: PUSH
2373: LD_INT 1
2375: MINUS
2376: ARRAY
2377: PPUSH
2378: LD_VAR 0 7
2382: PUSH
2383: LD_VAR 0 2
2387: PUSH
2388: LD_INT 2
2390: MUL
2391: ARRAY
2392: PPUSH
2393: CALL_OW 171
2397: GO 2351
2399: POP
2400: POP
// AddComMoveToArea ( veh , areas [ k ] [ 1 ] ) ;
2401: LD_VAR 0 8
2405: PPUSH
2406: LD_VAR 0 5
2410: PUSH
2411: LD_VAR 0 4
2415: ARRAY
2416: PUSH
2417: LD_INT 1
2419: ARRAY
2420: PPUSH
2421: CALL_OW 173
// repeat wait ( 0 0$1 ) ;
2425: LD_INT 35
2427: PPUSH
2428: CALL_OW 67
// until IsInArea ( veh , areas [ k ] [ 1 ] ) and GetCargo ( veh , c ) = 0 ;
2432: LD_VAR 0 8
2436: PPUSH
2437: LD_VAR 0 5
2441: PUSH
2442: LD_VAR 0 4
2446: ARRAY
2447: PUSH
2448: LD_INT 1
2450: ARRAY
2451: PPUSH
2452: CALL_OW 308
2456: PUSH
2457: LD_VAR 0 8
2461: PPUSH
2462: LD_VAR 0 3
2466: PPUSH
2467: CALL_OW 289
2471: PUSH
2472: LD_INT 0
2474: EQUAL
2475: AND
2476: IFFALSE 2425
// RemoveUnit ( veh ) ;
2478: LD_VAR 0 8
2482: PPUSH
2483: CALL_OW 64
// end ;
2487: LD_VAR 0 1
2491: RET
// every 3 3$00 do
2492: GO 2494
2494: DISABLE
// begin enable ;
2495: ENABLE
// SpawnCargo ;
2496: CALL 1911 0 0
// end ;
2500: END
// export function PrepareDefenders ; var i , tmp ; begin
2501: LD_INT 0
2503: PPUSH
2504: PPUSH
2505: PPUSH
// if defenders then
2506: LD_EXP 20
2510: IFFALSE 2514
// exit ;
2512: GO 2786
// for i = 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
2514: LD_ADDR_VAR 0 2
2518: PUSH
2519: DOUBLE
2520: LD_INT 1
2522: DEC
2523: ST_TO_ADDR
2524: LD_INT 4
2526: PUSH
2527: LD_INT 5
2529: PUSH
2530: LD_INT 6
2532: PUSH
2533: LD_INT 7
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: LIST
2540: LIST
2541: PUSH
2542: LD_OWVAR 67
2546: ARRAY
2547: PUSH
2548: FOR_TO
2549: IFFALSE 2688
// begin tmp := Produce ( amfac2 , [ us_medium_wheeled , us_medium_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_remote , [ us_gatling_gun , us_double_gun , us_laser ] [ rand ( 1 , 3 ) ] ) ;
2551: LD_ADDR_VAR 0 3
2555: PUSH
2556: LD_INT 6
2558: PPUSH
2559: LD_INT 2
2561: PUSH
2562: LD_INT 3
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_INT 2
2574: PPUSH
2575: CALL_OW 12
2579: ARRAY
2580: PPUSH
2581: LD_INT 1
2583: PUSH
2584: LD_INT 3
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 1
2593: PPUSH
2594: LD_INT 2
2596: PPUSH
2597: CALL_OW 12
2601: ARRAY
2602: PPUSH
2603: LD_INT 2
2605: PPUSH
2606: LD_INT 4
2608: PUSH
2609: LD_INT 5
2611: PUSH
2612: LD_INT 9
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: LD_INT 1
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: CALL_OW 12
2630: ARRAY
2631: PPUSH
2632: CALL 36794 0 5
2636: ST_TO_ADDR
// if tmp then
2637: LD_VAR 0 3
2641: IFFALSE 2686
// AddComConstruct ( amfac2 , tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] ) ;
2643: LD_INT 6
2645: PPUSH
2646: LD_VAR 0 3
2650: PUSH
2651: LD_INT 1
2653: ARRAY
2654: PPUSH
2655: LD_VAR 0 3
2659: PUSH
2660: LD_INT 2
2662: ARRAY
2663: PPUSH
2664: LD_VAR 0 3
2668: PUSH
2669: LD_INT 3
2671: ARRAY
2672: PPUSH
2673: LD_VAR 0 3
2677: PUSH
2678: LD_INT 4
2680: ARRAY
2681: PPUSH
2682: CALL_OW 185
// end ;
2686: GO 2548
2688: POP
2689: POP
// repeat wait ( 0 0$1 ) ;
2690: LD_INT 35
2692: PPUSH
2693: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) >= [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
2697: LD_INT 22
2699: PUSH
2700: LD_INT 1
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 33
2709: PUSH
2710: LD_INT 2
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: PUSH
2717: EMPTY
2718: LIST
2719: LIST
2720: PPUSH
2721: CALL_OW 69
2725: PUSH
2726: LD_INT 4
2728: PUSH
2729: LD_INT 5
2731: PUSH
2732: LD_INT 6
2734: PUSH
2735: LD_INT 7
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: LIST
2742: LIST
2743: PUSH
2744: LD_OWVAR 67
2748: ARRAY
2749: GREATEREQUAL
2750: IFFALSE 2690
// defenders := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_remote ] ] ) ;
2752: LD_ADDR_EXP 20
2756: PUSH
2757: LD_INT 22
2759: PUSH
2760: LD_INT 1
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 33
2769: PUSH
2770: LD_INT 2
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 69
2785: ST_TO_ADDR
// end ;
2786: LD_VAR 0 1
2790: RET
// export function Defend ; var i , un , veh , tmp ; begin
2791: LD_INT 0
2793: PPUSH
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
// defcon_wave := defcon_wave + 1 ;
2798: LD_ADDR_EXP 22
2802: PUSH
2803: LD_EXP 22
2807: PUSH
2808: LD_INT 1
2810: PLUS
2811: ST_TO_ADDR
// if not defenders then
2812: LD_EXP 20
2816: NOT
2817: IFFALSE 2823
// PrepareDefenders ;
2819: CALL 2501 0 0
// if defcon_wave > 1 then
2823: LD_EXP 22
2827: PUSH
2828: LD_INT 1
2830: GREATER
2831: IFFALSE 3089
// begin for i = 1 to defcon_wave + 2 do
2833: LD_ADDR_VAR 0 2
2837: PUSH
2838: DOUBLE
2839: LD_INT 1
2841: DEC
2842: ST_TO_ADDR
2843: LD_EXP 22
2847: PUSH
2848: LD_INT 2
2850: PLUS
2851: PUSH
2852: FOR_TO
2853: IFFALSE 2995
// begin uc_side := 1 ;
2855: LD_ADDR_OWVAR 20
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
// uc_nation := 1 ;
2863: LD_ADDR_OWVAR 21
2867: PUSH
2868: LD_INT 1
2870: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_manual , [ us_gatling_gun , us_heavy_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
2871: LD_INT 4
2873: PPUSH
2874: LD_INT 3
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_INT 4
2882: PUSH
2883: LD_INT 6
2885: PUSH
2886: LD_INT 7
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: PUSH
2894: LD_INT 1
2896: PPUSH
2897: LD_INT 3
2899: PPUSH
2900: CALL_OW 12
2904: ARRAY
2905: PPUSH
2906: LD_INT 100
2908: PPUSH
2909: CALL 39176 0 5
// veh := CreateVehicle ;
2913: LD_ADDR_VAR 0 4
2917: PUSH
2918: CALL_OW 45
2922: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2923: LD_VAR 0 4
2927: PPUSH
2928: LD_INT 1
2930: PPUSH
2931: CALL_OW 233
// defenders := defenders ^ veh ;
2935: LD_ADDR_EXP 20
2939: PUSH
2940: LD_EXP 20
2944: PUSH
2945: LD_VAR 0 4
2949: ADD
2950: ST_TO_ADDR
// PrepareHuman ( false , 3 , 9 ) ;
2951: LD_INT 0
2953: PPUSH
2954: LD_INT 3
2956: PPUSH
2957: LD_INT 9
2959: PPUSH
2960: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2964: CALL_OW 44
2968: PPUSH
2969: LD_VAR 0 4
2973: PPUSH
2974: CALL_OW 52
// PlaceUnitArea ( veh , west_spawn , false ) ;
2978: LD_VAR 0 4
2982: PPUSH
2983: LD_INT 25
2985: PPUSH
2986: LD_INT 0
2988: PPUSH
2989: CALL_OW 49
// end ;
2993: GO 2852
2995: POP
2996: POP
// for i = 1 to defcon_wave do
2997: LD_ADDR_VAR 0 2
3001: PUSH
3002: DOUBLE
3003: LD_INT 1
3005: DEC
3006: ST_TO_ADDR
3007: LD_EXP 22
3011: PUSH
3012: FOR_TO
3013: IFFALSE 3087
// begin uc_side := 1 ;
3015: LD_ADDR_OWVAR 20
3019: PUSH
3020: LD_INT 1
3022: ST_TO_ADDR
// uc_nation := 1 ;
3023: LD_ADDR_OWVAR 21
3027: PUSH
3028: LD_INT 1
3030: ST_TO_ADDR
// PrepareHuman ( false , 5 , 9 ) ;
3031: LD_INT 0
3033: PPUSH
3034: LD_INT 5
3036: PPUSH
3037: LD_INT 9
3039: PPUSH
3040: CALL_OW 380
// un := CreateHuman ;
3044: LD_ADDR_VAR 0 3
3048: PUSH
3049: CALL_OW 44
3053: ST_TO_ADDR
// PlaceUnitArea ( un , west_spawn , false ) ;
3054: LD_VAR 0 3
3058: PPUSH
3059: LD_INT 25
3061: PPUSH
3062: LD_INT 0
3064: PPUSH
3065: CALL_OW 49
// defenders := defenders ^ un ;
3069: LD_ADDR_EXP 20
3073: PUSH
3074: LD_EXP 20
3078: PUSH
3079: LD_VAR 0 3
3083: ADD
3084: ST_TO_ADDR
// end ;
3085: GO 3012
3087: POP
3088: POP
// end ; repeat wait ( 0 0$1 ) ;
3089: LD_INT 35
3091: PPUSH
3092: CALL_OW 67
// for i in defenders do
3096: LD_ADDR_VAR 0 2
3100: PUSH
3101: LD_EXP 20
3105: PUSH
3106: FOR_IN
3107: IFFALSE 3189
// begin if defcon and GetDistUnitXY ( i , defcon [ 1 ] , defcon [ 2 ] ) > 10 and not HasTask ( i ) then
3109: LD_EXP 21
3113: PUSH
3114: LD_VAR 0 2
3118: PPUSH
3119: LD_EXP 21
3123: PUSH
3124: LD_INT 1
3126: ARRAY
3127: PPUSH
3128: LD_EXP 21
3132: PUSH
3133: LD_INT 2
3135: ARRAY
3136: PPUSH
3137: CALL_OW 297
3141: PUSH
3142: LD_INT 10
3144: GREATER
3145: AND
3146: PUSH
3147: LD_VAR 0 2
3151: PPUSH
3152: CALL_OW 314
3156: NOT
3157: AND
3158: IFFALSE 3187
// ComAgressiveMove ( i , defcon [ 1 ] , defcon [ 2 ] ) ;
3160: LD_VAR 0 2
3164: PPUSH
3165: LD_EXP 21
3169: PUSH
3170: LD_INT 1
3172: ARRAY
3173: PPUSH
3174: LD_EXP 21
3178: PUSH
3179: LD_INT 2
3181: ARRAY
3182: PPUSH
3183: CALL_OW 114
// end ;
3187: GO 3106
3189: POP
3190: POP
// until not defenders ;
3191: LD_EXP 20
3195: NOT
3196: IFFALSE 3089
// end ;
3198: LD_VAR 0 1
3202: RET
// every 0 0$1 do var radar , i ;
3203: GO 3205
3205: DISABLE
3206: LD_INT 0
3208: PPUSH
3209: PPUSH
// begin uc_side := 1 ;
3210: LD_ADDR_OWVAR 20
3214: PUSH
3215: LD_INT 1
3217: ST_TO_ADDR
// uc_nation := 1 ;
3218: LD_ADDR_OWVAR 21
3222: PUSH
3223: LD_INT 1
3225: ST_TO_ADDR
// PrepareVehicle ( us_light_wheeled , engine_solar , control_computer , us_radar , 100 ) ;
3226: LD_INT 1
3228: PPUSH
3229: LD_INT 2
3231: PPUSH
3232: LD_INT 3
3234: PPUSH
3235: LD_INT 11
3237: PPUSH
3238: LD_INT 100
3240: PPUSH
3241: CALL 39176 0 5
// radar := CreateVehicle ;
3245: LD_ADDR_VAR 0 1
3249: PUSH
3250: CALL_OW 45
3254: ST_TO_ADDR
// SetDir ( radar , 4 ) ;
3255: LD_VAR 0 1
3259: PPUSH
3260: LD_INT 4
3262: PPUSH
3263: CALL_OW 233
// PlaceUnitXY ( radar , 51 , 45 , false ) ;
3267: LD_VAR 0 1
3271: PPUSH
3272: LD_INT 51
3274: PPUSH
3275: LD_INT 45
3277: PPUSH
3278: LD_INT 0
3280: PPUSH
3281: CALL_OW 48
// repeat AddComWait ( radar , 0 0$20 ) ;
3285: LD_VAR 0 1
3289: PPUSH
3290: LD_INT 700
3292: PPUSH
3293: CALL_OW 202
// AddComMoveXY ( radar , 65 , 75 ) ;
3297: LD_VAR 0 1
3301: PPUSH
3302: LD_INT 65
3304: PPUSH
3305: LD_INT 75
3307: PPUSH
3308: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3312: LD_VAR 0 1
3316: PPUSH
3317: LD_INT 350
3319: PPUSH
3320: CALL_OW 202
// AddComMoveXY ( radar , 83 , 87 ) ;
3324: LD_VAR 0 1
3328: PPUSH
3329: LD_INT 83
3331: PPUSH
3332: LD_INT 87
3334: PPUSH
3335: CALL_OW 171
// AddComWait ( radar , 0 0$15 ) ;
3339: LD_VAR 0 1
3343: PPUSH
3344: LD_INT 525
3346: PPUSH
3347: CALL_OW 202
// AddComMoveXY ( radar , 94 , 81 ) ;
3351: LD_VAR 0 1
3355: PPUSH
3356: LD_INT 94
3358: PPUSH
3359: LD_INT 81
3361: PPUSH
3362: CALL_OW 171
// AddComWait ( radar , 0 0$10 ) ;
3366: LD_VAR 0 1
3370: PPUSH
3371: LD_INT 350
3373: PPUSH
3374: CALL_OW 202
// AddComMoveXY ( radar , 55 , 48 ) ;
3378: LD_VAR 0 1
3382: PPUSH
3383: LD_INT 55
3385: PPUSH
3386: LD_INT 48
3388: PPUSH
3389: CALL_OW 171
// wait ( 1 1$00 ) ;
3393: LD_INT 2100
3395: PPUSH
3396: CALL_OW 67
// until not IsOk ( radar ) ;
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 302
3409: NOT
3410: IFFALSE 3285
// end ;
3412: PPOPN 2
3414: END
// every 7 7$30 trigger Difficulty > 1 and extra_patrol do var un ;
3415: LD_OWVAR 67
3419: PUSH
3420: LD_INT 1
3422: GREATER
3423: PUSH
3424: LD_EXP 11
3428: AND
3429: IFFALSE 3651
3431: GO 3433
3433: DISABLE
3434: LD_INT 0
3436: PPUSH
// begin enable ;
3437: ENABLE
// uc_side := 1 ;
3438: LD_ADDR_OWVAR 20
3442: PUSH
3443: LD_INT 1
3445: ST_TO_ADDR
// uc_nation := 1 ;
3446: LD_ADDR_OWVAR 21
3450: PUSH
3451: LD_INT 1
3453: ST_TO_ADDR
// PrepareVehicle ( us_morphling , engine_siberite , control_computer , us_gatling_gun , 100 ) ;
3454: LD_INT 5
3456: PPUSH
3457: LD_INT 3
3459: PPUSH
3460: LD_INT 3
3462: PPUSH
3463: LD_INT 4
3465: PPUSH
3466: LD_INT 100
3468: PPUSH
3469: CALL 39176 0 5
// un := CreateVehicle ;
3473: LD_ADDR_VAR 0 1
3477: PUSH
3478: CALL_OW 45
3482: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3483: LD_VAR 0 1
3487: PPUSH
3488: LD_INT 3
3490: PPUSH
3491: CALL_OW 233
// PlaceUnitXY ( un , 155 , 2 , false ) ;
3495: LD_VAR 0 1
3499: PPUSH
3500: LD_INT 155
3502: PPUSH
3503: LD_INT 2
3505: PPUSH
3506: LD_INT 0
3508: PPUSH
3509: CALL_OW 48
// ComAgressiveMove ( un , 169 , 77 ) ;
3513: LD_VAR 0 1
3517: PPUSH
3518: LD_INT 169
3520: PPUSH
3521: LD_INT 77
3523: PPUSH
3524: CALL_OW 114
// AddComWait ( un , 0 0$2 ) ;
3528: LD_VAR 0 1
3532: PPUSH
3533: LD_INT 70
3535: PPUSH
3536: CALL_OW 202
// AddComAgressiveMove ( un , 134 , 62 ) ;
3540: LD_VAR 0 1
3544: PPUSH
3545: LD_INT 134
3547: PPUSH
3548: LD_INT 62
3550: PPUSH
3551: CALL_OW 174
// AddComAgressiveMove ( un , 103 , 42 ) ;
3555: LD_VAR 0 1
3559: PPUSH
3560: LD_INT 103
3562: PPUSH
3563: LD_INT 42
3565: PPUSH
3566: CALL_OW 174
// AddComWait ( un , 0 0$2 ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: LD_INT 70
3577: PPUSH
3578: CALL_OW 202
// AddComAgressiveMove ( un , 84 , 2 ) ;
3582: LD_VAR 0 1
3586: PPUSH
3587: LD_INT 84
3589: PPUSH
3590: LD_INT 2
3592: PPUSH
3593: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
3597: LD_INT 35
3599: PPUSH
3600: CALL_OW 67
// if IsDead ( un ) then
3604: LD_VAR 0 1
3608: PPUSH
3609: CALL_OW 301
3613: IFFALSE 3625
// begin extra_patrol := false ;
3615: LD_ADDR_EXP 11
3619: PUSH
3620: LD_INT 0
3622: ST_TO_ADDR
// exit ;
3623: GO 3651
// end ; until IsAt ( un , 84 , 2 ) ;
3625: LD_VAR 0 1
3629: PPUSH
3630: LD_INT 84
3632: PPUSH
3633: LD_INT 2
3635: PPUSH
3636: CALL_OW 307
3640: IFFALSE 3597
// RemoveUnit ( un ) ;
3642: LD_VAR 0 1
3646: PPUSH
3647: CALL_OW 64
// end ; end_of_file
3651: PPOPN 1
3653: END
// export Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ; export function PrepareFriends ; var i , tmp , buildings , areas , bunkers , cl ; begin
3654: LD_INT 0
3656: PPUSH
3657: PPUSH
3658: PPUSH
3659: PPUSH
3660: PPUSH
3661: PPUSH
3662: PPUSH
// uc_side := 4 ;
3663: LD_ADDR_OWVAR 20
3667: PUSH
3668: LD_INT 4
3670: ST_TO_ADDR
// uc_nation := 1 ;
3671: LD_ADDR_OWVAR 21
3675: PUSH
3676: LD_INT 1
3678: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 10c_ ) ;
3679: LD_ADDR_EXP 37
3683: PUSH
3684: LD_STRING DeltaDoctor
3686: PPUSH
3687: LD_EXP 1
3691: NOT
3692: PPUSH
3693: LD_STRING 10c_
3695: PPUSH
3696: CALL 34159 0 3
3700: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 10c_ ) ;
3701: LD_ADDR_EXP 36
3705: PUSH
3706: LD_STRING Joan
3708: PPUSH
3709: LD_EXP 1
3713: NOT
3714: PPUSH
3715: LD_STRING 10c_
3717: PPUSH
3718: CALL 34159 0 3
3722: ST_TO_ADDR
// if Joan then
3723: LD_EXP 36
3727: IFFALSE 3758
// friends := Insert ( friends , friends + 1 , Joan ) ;
3729: LD_ADDR_EXP 4
3733: PUSH
3734: LD_EXP 4
3738: PPUSH
3739: LD_EXP 4
3743: PUSH
3744: LD_INT 1
3746: PLUS
3747: PPUSH
3748: LD_EXP 36
3752: PPUSH
3753: CALL_OW 2
3757: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 10c_ ) ;
3758: LD_ADDR_EXP 35
3762: PUSH
3763: LD_STRING Simms
3765: PPUSH
3766: LD_EXP 1
3770: NOT
3771: PPUSH
3772: LD_STRING 10c_
3774: PPUSH
3775: CALL 34159 0 3
3779: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 11_ ) ;
3780: LD_ADDR_EXP 34
3784: PUSH
3785: LD_STRING Kikuchi
3787: PPUSH
3788: LD_EXP 1
3792: NOT
3793: PPUSH
3794: LD_STRING 11_
3796: PPUSH
3797: CALL 34159 0 3
3801: ST_TO_ADDR
// if Kikuchi then
3802: LD_EXP 34
3806: IFFALSE 3837
// friends := Insert ( friends , friends + 1 , Kikuchi ) ;
3808: LD_ADDR_EXP 4
3812: PUSH
3813: LD_EXP 4
3817: PPUSH
3818: LD_EXP 4
3822: PUSH
3823: LD_INT 1
3825: PLUS
3826: PPUSH
3827: LD_EXP 34
3831: PPUSH
3832: CALL_OW 2
3836: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 11_ ) ;
3837: LD_ADDR_EXP 33
3841: PUSH
3842: LD_STRING Frank
3844: PPUSH
3845: LD_EXP 1
3849: NOT
3850: PPUSH
3851: LD_STRING 11_
3853: PPUSH
3854: CALL 34159 0 3
3858: ST_TO_ADDR
// if Frank then
3859: LD_EXP 33
3863: IFFALSE 3894
// friends := Insert ( friends , friends + 1 , Frank ) ;
3865: LD_ADDR_EXP 4
3869: PUSH
3870: LD_EXP 4
3874: PPUSH
3875: LD_EXP 4
3879: PUSH
3880: LD_INT 1
3882: PLUS
3883: PPUSH
3884: LD_EXP 33
3888: PPUSH
3889: CALL_OW 2
3893: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 11_ ) ;
3894: LD_ADDR_EXP 32
3898: PUSH
3899: LD_STRING Gary
3901: PPUSH
3902: LD_EXP 1
3906: NOT
3907: PPUSH
3908: LD_STRING 11_
3910: PPUSH
3911: CALL 34159 0 3
3915: ST_TO_ADDR
// if Gary then
3916: LD_EXP 32
3920: IFFALSE 3951
// friends := Insert ( friends , friends + 1 , Gary ) ;
3922: LD_ADDR_EXP 4
3926: PUSH
3927: LD_EXP 4
3931: PPUSH
3932: LD_EXP 4
3936: PUSH
3937: LD_INT 1
3939: PLUS
3940: PPUSH
3941: LD_EXP 32
3945: PPUSH
3946: CALL_OW 2
3950: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , 11_ ) ;
3951: LD_ADDR_EXP 31
3955: PUSH
3956: LD_STRING Cornell
3958: PPUSH
3959: LD_EXP 1
3963: NOT
3964: PPUSH
3965: LD_STRING 11_
3967: PPUSH
3968: CALL 34159 0 3
3972: ST_TO_ADDR
// if Cornel then
3973: LD_EXP 31
3977: IFFALSE 4008
// friends := Insert ( friends , friends + 1 , Cornel ) ;
3979: LD_ADDR_EXP 4
3983: PUSH
3984: LD_EXP 4
3988: PPUSH
3989: LD_EXP 4
3993: PUSH
3994: LD_INT 1
3996: PLUS
3997: PPUSH
3998: LD_EXP 31
4002: PPUSH
4003: CALL_OW 2
4007: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 11_ ) ;
4008: LD_ADDR_EXP 30
4012: PUSH
4013: LD_STRING Houten
4015: PPUSH
4016: LD_EXP 1
4020: NOT
4021: PPUSH
4022: LD_STRING 11_
4024: PPUSH
4025: CALL 34159 0 3
4029: ST_TO_ADDR
// if Houten then
4030: LD_EXP 30
4034: IFFALSE 4065
// friends := Insert ( friends , friends + 1 , Houten ) ;
4036: LD_ADDR_EXP 4
4040: PUSH
4041: LD_EXP 4
4045: PPUSH
4046: LD_EXP 4
4050: PUSH
4051: LD_INT 1
4053: PLUS
4054: PPUSH
4055: LD_EXP 30
4059: PPUSH
4060: CALL_OW 2
4064: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 11_ ) ;
4065: LD_ADDR_EXP 29
4069: PUSH
4070: LD_STRING Gladstone
4072: PPUSH
4073: LD_EXP 1
4077: NOT
4078: PPUSH
4079: LD_STRING 11_
4081: PPUSH
4082: CALL 34159 0 3
4086: ST_TO_ADDR
// if Gladstone then
4087: LD_EXP 29
4091: IFFALSE 4122
// friends := Insert ( friends , friends + 1 , Gladstone ) ;
4093: LD_ADDR_EXP 4
4097: PUSH
4098: LD_EXP 4
4102: PPUSH
4103: LD_EXP 4
4107: PUSH
4108: LD_INT 1
4110: PLUS
4111: PPUSH
4112: LD_EXP 29
4116: PPUSH
4117: CALL_OW 2
4121: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 11_ ) ;
4122: LD_ADDR_EXP 23
4126: PUSH
4127: LD_STRING Lisa
4129: PPUSH
4130: LD_EXP 1
4134: NOT
4135: PPUSH
4136: LD_STRING 11_
4138: PPUSH
4139: CALL 34159 0 3
4143: ST_TO_ADDR
// if Lisa then
4144: LD_EXP 23
4148: IFFALSE 4173
// friends := Insert ( friends , 1 , Lisa ) ;
4150: LD_ADDR_EXP 4
4154: PUSH
4155: LD_EXP 4
4159: PPUSH
4160: LD_INT 1
4162: PPUSH
4163: LD_EXP 23
4167: PPUSH
4168: CALL_OW 2
4172: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 11_ ) ;
4173: LD_ADDR_EXP 24
4177: PUSH
4178: LD_STRING Donaldson
4180: PPUSH
4181: LD_EXP 1
4185: NOT
4186: PPUSH
4187: LD_STRING 11_
4189: PPUSH
4190: CALL 34159 0 3
4194: ST_TO_ADDR
// if Donaldson then
4195: LD_EXP 24
4199: IFFALSE 4230
// friends := Insert ( friends , friends + 1 , Donaldson ) ;
4201: LD_ADDR_EXP 4
4205: PUSH
4206: LD_EXP 4
4210: PPUSH
4211: LD_EXP 4
4215: PUSH
4216: LD_INT 1
4218: PLUS
4219: PPUSH
4220: LD_EXP 24
4224: PPUSH
4225: CALL_OW 2
4229: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 11_ ) ;
4230: LD_ADDR_EXP 25
4234: PUSH
4235: LD_STRING Bobby
4237: PPUSH
4238: LD_EXP 1
4242: NOT
4243: PPUSH
4244: LD_STRING 11_
4246: PPUSH
4247: CALL 34159 0 3
4251: ST_TO_ADDR
// if Bobby then
4252: LD_EXP 25
4256: IFFALSE 4287
// friends := Insert ( friends , friends + 1 , Bobby ) ;
4258: LD_ADDR_EXP 4
4262: PUSH
4263: LD_EXP 4
4267: PPUSH
4268: LD_EXP 4
4272: PUSH
4273: LD_INT 1
4275: PLUS
4276: PPUSH
4277: LD_EXP 25
4281: PPUSH
4282: CALL_OW 2
4286: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 11_ ) ;
4287: LD_ADDR_EXP 26
4291: PUSH
4292: LD_STRING Cyrus
4294: PPUSH
4295: LD_EXP 1
4299: NOT
4300: PPUSH
4301: LD_STRING 11_
4303: PPUSH
4304: CALL 34159 0 3
4308: ST_TO_ADDR
// if Cyrus then
4309: LD_EXP 26
4313: IFFALSE 4344
// friends := Insert ( friends , friends + 1 , Cyrus ) ;
4315: LD_ADDR_EXP 4
4319: PUSH
4320: LD_EXP 4
4324: PPUSH
4325: LD_EXP 4
4329: PUSH
4330: LD_INT 1
4332: PLUS
4333: PPUSH
4334: LD_EXP 26
4338: PPUSH
4339: CALL_OW 2
4343: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 11_ ) ;
4344: LD_ADDR_EXP 27
4348: PUSH
4349: LD_STRING Denis
4351: PPUSH
4352: LD_EXP 1
4356: NOT
4357: PPUSH
4358: LD_STRING 11_
4360: PPUSH
4361: CALL 34159 0 3
4365: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 11_ ) ;
4366: LD_ADDR_EXP 28
4370: PUSH
4371: LD_STRING Brown
4373: PPUSH
4374: LD_EXP 1
4378: NOT
4379: PPUSH
4380: LD_STRING 11_
4382: PPUSH
4383: CALL 34159 0 3
4387: ST_TO_ADDR
// if Brown then
4388: LD_EXP 28
4392: IFFALSE 4423
// friends := Insert ( friends , friends + 1 , Brown ) ;
4394: LD_ADDR_EXP 4
4398: PUSH
4399: LD_EXP 4
4403: PPUSH
4404: LD_EXP 4
4408: PUSH
4409: LD_INT 1
4411: PLUS
4412: PPUSH
4413: LD_EXP 28
4417: PPUSH
4418: CALL_OW 2
4422: ST_TO_ADDR
// friends := friends ^ CreateCharacterSet ( 11c_others ) ^ CreateCharacterSet ( 11_others ) ;
4423: LD_ADDR_EXP 4
4427: PUSH
4428: LD_EXP 4
4432: PUSH
4433: LD_STRING 11c_others
4435: PPUSH
4436: CALL_OW 31
4440: ADD
4441: PUSH
4442: LD_STRING 11_others
4444: PPUSH
4445: CALL_OW 31
4449: ADD
4450: ST_TO_ADDR
// if friends < 18 then
4451: LD_EXP 4
4455: PUSH
4456: LD_INT 18
4458: LESS
4459: IFFALSE 4531
// for i = 1 to 18 do
4461: LD_ADDR_VAR 0 2
4465: PUSH
4466: DOUBLE
4467: LD_INT 1
4469: DEC
4470: ST_TO_ADDR
4471: LD_INT 18
4473: PUSH
4474: FOR_TO
4475: IFFALSE 4529
// begin PrepareHuman ( false , rand ( 1 , 4 ) , 7 ) ;
4477: LD_INT 0
4479: PPUSH
4480: LD_INT 1
4482: PPUSH
4483: LD_INT 4
4485: PPUSH
4486: CALL_OW 12
4490: PPUSH
4491: LD_INT 7
4493: PPUSH
4494: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
4498: LD_ADDR_EXP 4
4502: PUSH
4503: LD_EXP 4
4507: PPUSH
4508: LD_EXP 4
4512: PUSH
4513: LD_INT 1
4515: PLUS
4516: PPUSH
4517: CALL_OW 44
4521: PPUSH
4522: CALL_OW 2
4526: ST_TO_ADDR
// end ;
4527: GO 4474
4529: POP
4530: POP
// for i in friends do
4531: LD_ADDR_VAR 0 2
4535: PUSH
4536: LD_EXP 4
4540: PUSH
4541: FOR_IN
4542: IFFALSE 4600
// if GetSkill ( i , 1 ) >= GetSkill ( i , 4 ) then
4544: LD_VAR 0 2
4548: PPUSH
4549: LD_INT 1
4551: PPUSH
4552: CALL_OW 259
4556: PUSH
4557: LD_VAR 0 2
4561: PPUSH
4562: LD_INT 4
4564: PPUSH
4565: CALL_OW 259
4569: GREATEREQUAL
4570: IFFALSE 4586
// SetClass ( i , class_soldier ) else
4572: LD_VAR 0 2
4576: PPUSH
4577: LD_INT 1
4579: PPUSH
4580: CALL_OW 336
4584: GO 4598
// SetClass ( i , class_scientistic ) ;
4586: LD_VAR 0 2
4590: PPUSH
4591: LD_INT 4
4593: PPUSH
4594: CALL_OW 336
4598: GO 4541
4600: POP
4601: POP
// if Frank then
4602: LD_EXP 33
4606: IFFALSE 4620
// SetClass ( Frank , class_sniper ) ;
4608: LD_EXP 33
4612: PPUSH
4613: LD_INT 5
4615: PPUSH
4616: CALL_OW 336
// SetClass ( [ Joan , Denis , DeltaDoctor , Simms ] , class_scientistic ) ;
4620: LD_EXP 36
4624: PUSH
4625: LD_EXP 27
4629: PUSH
4630: LD_EXP 37
4634: PUSH
4635: LD_EXP 35
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: PPUSH
4646: LD_INT 4
4648: PPUSH
4649: CALL_OW 336
// selected = CharacterSelection (  , 7 , 7 , [ sel_dont_change_class , JMM , Roth , Simms , Denis , DeltaDoctor , sel_not_hired , sel_changeable , sel_change_class ] ^ friends , [ class_soldier , [ class_scientistic , 2 ] , [ class_sniper , 0 , 3 ] ] ) ;
4653: LD_ADDR_EXP 3
4657: PUSH
4658: LD_STRING 
4660: PPUSH
4661: LD_INT 7
4663: PPUSH
4664: LD_INT 7
4666: PPUSH
4667: LD_INT -6
4669: PUSH
4670: LD_EXP 14
4674: PUSH
4675: LD_EXP 15
4679: PUSH
4680: LD_EXP 35
4684: PUSH
4685: LD_EXP 27
4689: PUSH
4690: LD_EXP 37
4694: PUSH
4695: LD_INT -2
4697: PUSH
4698: LD_INT -3
4700: PUSH
4701: LD_INT -5
4703: PUSH
4704: EMPTY
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: PUSH
4715: LD_EXP 4
4719: ADD
4720: PPUSH
4721: LD_INT 1
4723: PUSH
4724: LD_INT 4
4726: PUSH
4727: LD_INT 2
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: LD_INT 5
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: LD_INT 3
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: LIST
4747: PUSH
4748: EMPTY
4749: LIST
4750: LIST
4751: LIST
4752: PPUSH
4753: CALL_OW 42
4757: ST_TO_ADDR
// if Simms then
4758: LD_EXP 35
4762: IFFALSE 4780
// selected := selected ^ Simms ;
4764: LD_ADDR_EXP 3
4768: PUSH
4769: LD_EXP 3
4773: PUSH
4774: LD_EXP 35
4778: ADD
4779: ST_TO_ADDR
// if Denis then
4780: LD_EXP 27
4784: IFFALSE 4802
// selected := selected ^ Denis ;
4786: LD_ADDR_EXP 3
4790: PUSH
4791: LD_EXP 3
4795: PUSH
4796: LD_EXP 27
4800: ADD
4801: ST_TO_ADDR
// if DeltaDoctor then
4802: LD_EXP 37
4806: IFFALSE 4824
// selected := selected ^ DeltaDoctor ;
4808: LD_ADDR_EXP 3
4812: PUSH
4813: LD_EXP 3
4817: PUSH
4818: LD_EXP 37
4822: ADD
4823: ST_TO_ADDR
// friends := friends diff selected ;
4824: LD_ADDR_EXP 4
4828: PUSH
4829: LD_EXP 4
4833: PUSH
4834: LD_EXP 3
4838: DIFF
4839: ST_TO_ADDR
// buildings := [ [ ambar1 , ambar2 , ambar3 ] , [ amlab2 , amlab3 , amlab4 ] ] ;
4840: LD_ADDR_VAR 0 4
4844: PUSH
4845: LD_INT 111
4847: PUSH
4848: LD_INT 137
4850: PUSH
4851: LD_INT 51
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 147
4861: PUSH
4862: LD_INT 129
4864: PUSH
4865: LD_INT 25
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: ST_TO_ADDR
// areas := [ friends_spawn_1 , friends_spawn_2 , friends_spawn_3 , friends_spawn_4 , friends_spawn_5 , friends_spawn_6 ] ;
4877: LD_ADDR_VAR 0 5
4881: PUSH
4882: LD_INT 5
4884: PUSH
4885: LD_INT 6
4887: PUSH
4888: LD_INT 7
4890: PUSH
4891: LD_INT 8
4893: PUSH
4894: LD_INT 17
4896: PUSH
4897: LD_INT 18
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: ST_TO_ADDR
// for i in buildings do
4908: LD_ADDR_VAR 0 2
4912: PUSH
4913: LD_VAR 0 4
4917: PUSH
4918: FOR_IN
4919: IFFALSE 4935
// SetSide ( i , 4 ) ;
4921: LD_VAR 0 2
4925: PPUSH
4926: LD_INT 4
4928: PPUSH
4929: CALL_OW 235
4933: GO 4918
4935: POP
4936: POP
// for i in selected do
4937: LD_ADDR_VAR 0 2
4941: PUSH
4942: LD_EXP 3
4946: PUSH
4947: FOR_IN
4948: IFFALSE 5288
// begin if GetClass ( i ) in [ 1 , 5 ] then
4950: LD_VAR 0 2
4954: PPUSH
4955: CALL_OW 257
4959: PUSH
4960: LD_INT 1
4962: PUSH
4963: LD_INT 5
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: IN
4970: IFFALSE 5130
// begin if buildings [ 1 ] then
4972: LD_VAR 0 4
4976: PUSH
4977: LD_INT 1
4979: ARRAY
4980: IFFALSE 5041
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
4982: LD_VAR 0 2
4986: PPUSH
4987: LD_VAR 0 4
4991: PUSH
4992: LD_INT 1
4994: ARRAY
4995: PUSH
4996: LD_INT 1
4998: ARRAY
4999: PPUSH
5000: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5004: LD_ADDR_VAR 0 4
5008: PUSH
5009: LD_VAR 0 4
5013: PPUSH
5014: LD_INT 1
5016: PPUSH
5017: LD_VAR 0 4
5021: PUSH
5022: LD_INT 1
5024: ARRAY
5025: PPUSH
5026: LD_INT 1
5028: PPUSH
5029: CALL_OW 3
5033: PPUSH
5034: CALL_OW 1
5038: ST_TO_ADDR
// end else
5039: GO 5128
// begin if not areas then
5041: LD_VAR 0 5
5045: NOT
5046: IFFALSE 5080
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5048: LD_VAR 0 2
5052: PPUSH
5053: LD_INT 87
5055: PPUSH
5056: LD_INT 68
5058: PPUSH
5059: LD_INT 8
5061: PPUSH
5062: LD_INT 0
5064: PPUSH
5065: CALL_OW 50
// ComHold ( i ) ;
5069: LD_VAR 0 2
5073: PPUSH
5074: CALL_OW 140
// end else
5078: GO 5128
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5080: LD_VAR 0 2
5084: PPUSH
5085: LD_VAR 0 5
5089: PUSH
5090: LD_INT 1
5092: ARRAY
5093: PPUSH
5094: LD_INT 0
5096: PPUSH
5097: CALL_OW 49
// ComHold ( i ) ;
5101: LD_VAR 0 2
5105: PPUSH
5106: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5110: LD_ADDR_VAR 0 5
5114: PUSH
5115: LD_VAR 0 5
5119: PPUSH
5120: LD_INT 1
5122: PPUSH
5123: CALL_OW 3
5127: ST_TO_ADDR
// end ; end ; end else
5128: GO 5286
// begin if buildings [ 2 ] then
5130: LD_VAR 0 4
5134: PUSH
5135: LD_INT 2
5137: ARRAY
5138: IFFALSE 5199
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5140: LD_VAR 0 2
5144: PPUSH
5145: LD_VAR 0 4
5149: PUSH
5150: LD_INT 2
5152: ARRAY
5153: PUSH
5154: LD_INT 1
5156: ARRAY
5157: PPUSH
5158: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5162: LD_ADDR_VAR 0 4
5166: PUSH
5167: LD_VAR 0 4
5171: PPUSH
5172: LD_INT 2
5174: PPUSH
5175: LD_VAR 0 4
5179: PUSH
5180: LD_INT 2
5182: ARRAY
5183: PPUSH
5184: LD_INT 1
5186: PPUSH
5187: CALL_OW 3
5191: PPUSH
5192: CALL_OW 1
5196: ST_TO_ADDR
// end else
5197: GO 5286
// begin if not areas then
5199: LD_VAR 0 5
5203: NOT
5204: IFFALSE 5238
// begin PlaceUnitXYR ( i , 87 , 68 , 8 , false ) ;
5206: LD_VAR 0 2
5210: PPUSH
5211: LD_INT 87
5213: PPUSH
5214: LD_INT 68
5216: PPUSH
5217: LD_INT 8
5219: PPUSH
5220: LD_INT 0
5222: PPUSH
5223: CALL_OW 50
// ComHold ( i ) ;
5227: LD_VAR 0 2
5231: PPUSH
5232: CALL_OW 140
// end else
5236: GO 5286
// begin PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5238: LD_VAR 0 2
5242: PPUSH
5243: LD_VAR 0 5
5247: PUSH
5248: LD_INT 1
5250: ARRAY
5251: PPUSH
5252: LD_INT 0
5254: PPUSH
5255: CALL_OW 49
// ComHold ( i ) ;
5259: LD_VAR 0 2
5263: PPUSH
5264: CALL_OW 140
// areas := Delete ( areas , 1 ) ;
5268: LD_ADDR_VAR 0 5
5272: PUSH
5273: LD_VAR 0 5
5277: PPUSH
5278: LD_INT 1
5280: PPUSH
5281: CALL_OW 3
5285: ST_TO_ADDR
// end ; end ; end ; end ;
5286: GO 4947
5288: POP
5289: POP
// bunkers := FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) ;
5290: LD_ADDR_VAR 0 6
5294: PUSH
5295: LD_INT 22
5297: PUSH
5298: LD_INT 1
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: PUSH
5305: LD_INT 30
5307: PUSH
5308: LD_INT 32
5310: PUSH
5311: EMPTY
5312: LIST
5313: LIST
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PPUSH
5319: CALL_OW 69
5323: ST_TO_ADDR
// for i = bunkers - friends downto 1 do
5324: LD_ADDR_VAR 0 2
5328: PUSH
5329: DOUBLE
5330: LD_VAR 0 6
5334: PUSH
5335: LD_EXP 4
5339: MINUS
5340: INC
5341: ST_TO_ADDR
5342: LD_INT 1
5344: PUSH
5345: FOR_DOWNTO
5346: IFFALSE 5413
// begin PrepareHuman ( false , 1 , [ 7 , 8 , 9 , 10 ] [ Difficulty ] ) ;
5348: LD_INT 0
5350: PPUSH
5351: LD_INT 1
5353: PPUSH
5354: LD_INT 7
5356: PUSH
5357: LD_INT 8
5359: PUSH
5360: LD_INT 9
5362: PUSH
5363: LD_INT 10
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: PUSH
5372: LD_OWVAR 67
5376: ARRAY
5377: PPUSH
5378: CALL_OW 380
// friends := Insert ( friends , friends + 1 , CreateHuman ) ;
5382: LD_ADDR_EXP 4
5386: PUSH
5387: LD_EXP 4
5391: PPUSH
5392: LD_EXP 4
5396: PUSH
5397: LD_INT 1
5399: PLUS
5400: PPUSH
5401: CALL_OW 44
5405: PPUSH
5406: CALL_OW 2
5410: ST_TO_ADDR
// end ;
5411: GO 5345
5413: POP
5414: POP
// if friends then
5415: LD_EXP 4
5419: IFFALSE 5535
// begin tmp := friends ;
5421: LD_ADDR_VAR 0 3
5425: PUSH
5426: LD_EXP 4
5430: ST_TO_ADDR
// for i = 1 to bunkers do
5431: LD_ADDR_VAR 0 2
5435: PUSH
5436: DOUBLE
5437: LD_INT 1
5439: DEC
5440: ST_TO_ADDR
5441: LD_VAR 0 6
5445: PUSH
5446: FOR_TO
5447: IFFALSE 5533
// begin SetSide ( tmp [ tmp ] , 1 ) ;
5449: LD_VAR 0 3
5453: PUSH
5454: LD_VAR 0 3
5458: ARRAY
5459: PPUSH
5460: LD_INT 1
5462: PPUSH
5463: CALL_OW 235
// SetClass ( tmp [ tmp ] , 1 ) ;
5467: LD_VAR 0 3
5471: PUSH
5472: LD_VAR 0 3
5476: ARRAY
5477: PPUSH
5478: LD_INT 1
5480: PPUSH
5481: CALL_OW 336
// PlaceHumanInUnit ( tmp [ tmp ] , bunkers [ i ] ) ;
5485: LD_VAR 0 3
5489: PUSH
5490: LD_VAR 0 3
5494: ARRAY
5495: PPUSH
5496: LD_VAR 0 6
5500: PUSH
5501: LD_VAR 0 2
5505: ARRAY
5506: PPUSH
5507: CALL_OW 52
// tmp := Delete ( tmp , tmp ) ;
5511: LD_ADDR_VAR 0 3
5515: PUSH
5516: LD_VAR 0 3
5520: PPUSH
5521: LD_VAR 0 3
5525: PPUSH
5526: CALL_OW 3
5530: ST_TO_ADDR
// end ;
5531: GO 5446
5533: POP
5534: POP
// end ; areas := areas union [ guard_spawn_1 , guard_spawn_2 , guard_spawn_3 , guard_spawn_4 , guard_spawn_5 , guard_spawn_6 , guard_spawn_7 , guard_spawn_8 , guard_spawn_9 , guard_spawn_10 , guard_spawn_11 , guard_spawn_12 , guard_spawn_13 , guard_spawn_14 , guard_spawn_15 , guard_spawn_16 , guard_spawn_17 , guard_spawn_18 , guard_spawn_19 , guard_spawn_20 ] ;
5535: LD_ADDR_VAR 0 5
5539: PUSH
5540: LD_VAR 0 5
5544: PUSH
5545: LD_INT 9
5547: PUSH
5548: LD_INT 10
5550: PUSH
5551: LD_INT 11
5553: PUSH
5554: LD_INT 12
5556: PUSH
5557: LD_INT 13
5559: PUSH
5560: LD_INT 14
5562: PUSH
5563: LD_INT 15
5565: PUSH
5566: LD_INT 16
5568: PUSH
5569: LD_INT 26
5571: PUSH
5572: LD_INT 27
5574: PUSH
5575: LD_INT 28
5577: PUSH
5578: LD_INT 29
5580: PUSH
5581: LD_INT 30
5583: PUSH
5584: LD_INT 31
5586: PUSH
5587: LD_INT 32
5589: PUSH
5590: LD_INT 33
5592: PUSH
5593: LD_INT 34
5595: PUSH
5596: LD_INT 35
5598: PUSH
5599: LD_INT 36
5601: PUSH
5602: LD_INT 37
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: LIST
5612: LIST
5613: LIST
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: LIST
5622: LIST
5623: LIST
5624: LIST
5625: LIST
5626: UNION
5627: ST_TO_ADDR
// for i in friends do
5628: LD_ADDR_VAR 0 2
5632: PUSH
5633: LD_EXP 4
5637: PUSH
5638: FOR_IN
5639: IFFALSE 5926
// begin SetTag ( i , 2 ) ;
5641: LD_VAR 0 2
5645: PPUSH
5646: LD_INT 2
5648: PPUSH
5649: CALL_OW 109
// if not GetClass ( i ) in [ class_soldier , class_scientistic , class_sniper ] then
5653: LD_VAR 0 2
5657: PPUSH
5658: CALL_OW 257
5662: PUSH
5663: LD_INT 1
5665: PUSH
5666: LD_INT 4
5668: PUSH
5669: LD_INT 5
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: LIST
5676: IN
5677: NOT
5678: IFFALSE 5692
// SetClass ( i , 1 ) ;
5680: LD_VAR 0 2
5684: PPUSH
5685: LD_INT 1
5687: PPUSH
5688: CALL_OW 336
// if GetClass ( i ) in [ class_soldier , class_sniper ] and buildings [ 1 ] then
5692: LD_VAR 0 2
5696: PPUSH
5697: CALL_OW 257
5701: PUSH
5702: LD_INT 1
5704: PUSH
5705: LD_INT 5
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: IN
5712: PUSH
5713: LD_VAR 0 4
5717: PUSH
5718: LD_INT 1
5720: ARRAY
5721: AND
5722: IFFALSE 5783
// begin PlaceHumanInUnit ( i , buildings [ 1 ] [ 1 ] ) ;
5724: LD_VAR 0 2
5728: PPUSH
5729: LD_VAR 0 4
5733: PUSH
5734: LD_INT 1
5736: ARRAY
5737: PUSH
5738: LD_INT 1
5740: ARRAY
5741: PPUSH
5742: CALL_OW 52
// buildings := Replace ( buildings , 1 , Delete ( buildings [ 1 ] , 1 ) ) ;
5746: LD_ADDR_VAR 0 4
5750: PUSH
5751: LD_VAR 0 4
5755: PPUSH
5756: LD_INT 1
5758: PPUSH
5759: LD_VAR 0 4
5763: PUSH
5764: LD_INT 1
5766: ARRAY
5767: PPUSH
5768: LD_INT 1
5770: PPUSH
5771: CALL_OW 3
5775: PPUSH
5776: CALL_OW 1
5780: ST_TO_ADDR
// continue ;
5781: GO 5638
// end ; if GetClass ( i ) = class_scientistic and buildings [ 2 ] then
5783: LD_VAR 0 2
5787: PPUSH
5788: CALL_OW 257
5792: PUSH
5793: LD_INT 4
5795: EQUAL
5796: PUSH
5797: LD_VAR 0 4
5801: PUSH
5802: LD_INT 2
5804: ARRAY
5805: AND
5806: IFFALSE 5867
// begin PlaceHumanInUnit ( i , buildings [ 2 ] [ 1 ] ) ;
5808: LD_VAR 0 2
5812: PPUSH
5813: LD_VAR 0 4
5817: PUSH
5818: LD_INT 2
5820: ARRAY
5821: PUSH
5822: LD_INT 1
5824: ARRAY
5825: PPUSH
5826: CALL_OW 52
// buildings := Replace ( buildings , 2 , Delete ( buildings [ 2 ] , 1 ) ) ;
5830: LD_ADDR_VAR 0 4
5834: PUSH
5835: LD_VAR 0 4
5839: PPUSH
5840: LD_INT 2
5842: PPUSH
5843: LD_VAR 0 4
5847: PUSH
5848: LD_INT 2
5850: ARRAY
5851: PPUSH
5852: LD_INT 1
5854: PPUSH
5855: CALL_OW 3
5859: PPUSH
5860: CALL_OW 1
5864: ST_TO_ADDR
// continue ;
5865: GO 5638
// end ; PlaceUnitArea ( i , areas [ 1 ] , false ) ;
5867: LD_VAR 0 2
5871: PPUSH
5872: LD_VAR 0 5
5876: PUSH
5877: LD_INT 1
5879: ARRAY
5880: PPUSH
5881: LD_INT 0
5883: PPUSH
5884: CALL_OW 49
// areas := Delete ( areas , 1 ) ;
5888: LD_ADDR_VAR 0 5
5892: PUSH
5893: LD_VAR 0 5
5897: PPUSH
5898: LD_INT 1
5900: PPUSH
5901: CALL_OW 3
5905: ST_TO_ADDR
// ComHold ( i ) ;
5906: LD_VAR 0 2
5910: PPUSH
5911: CALL_OW 140
// if not areas then
5915: LD_VAR 0 5
5919: NOT
5920: IFFALSE 5924
// break ;
5922: GO 5926
// end ;
5924: GO 5638
5926: POP
5927: POP
// if UnitFilter ( friends , [ f_not , [ f_placed ] ] ) then
5928: LD_EXP 4
5932: PPUSH
5933: LD_INT 3
5935: PUSH
5936: LD_INT 52
5938: PUSH
5939: EMPTY
5940: LIST
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PPUSH
5946: CALL_OW 72
5950: IFFALSE 6017
// for i in UnitFilter ( friends , [ f_not , [ f_placed ] ] ) do
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_EXP 4
5961: PPUSH
5962: LD_INT 3
5964: PUSH
5965: LD_INT 52
5967: PUSH
5968: EMPTY
5969: LIST
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: PPUSH
5975: CALL_OW 72
5979: PUSH
5980: FOR_IN
5981: IFFALSE 6015
// begin PlaceUnitXYR ( i , 65 , 58 , 7 , false ) ;
5983: LD_VAR 0 2
5987: PPUSH
5988: LD_INT 65
5990: PPUSH
5991: LD_INT 58
5993: PPUSH
5994: LD_INT 7
5996: PPUSH
5997: LD_INT 0
5999: PPUSH
6000: CALL_OW 50
// ComHold ( i ) ;
6004: LD_VAR 0 2
6008: PPUSH
6009: CALL_OW 140
// end ;
6013: GO 5980
6015: POP
6016: POP
// if Frank then
6017: LD_EXP 33
6021: IFFALSE 6035
// SetClass ( Frank , class_sniper ) ;
6023: LD_EXP 33
6027: PPUSH
6028: LD_INT 5
6030: PPUSH
6031: CALL_OW 336
// end ; end_of_file
6035: LD_VAR 0 1
6039: RET
// export function CanSayRand ( side ) ; begin
6040: LD_INT 0
6042: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6043: LD_ADDR_VAR 0 2
6047: PUSH
6048: LD_INT 52
6050: PUSH
6051: EMPTY
6052: LIST
6053: PUSH
6054: LD_INT 22
6056: PUSH
6057: LD_VAR 0 1
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: PUSH
6066: LD_INT 2
6068: PUSH
6069: LD_INT 25
6071: PUSH
6072: LD_INT 1
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 25
6081: PUSH
6082: LD_INT 2
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: PUSH
6089: LD_INT 25
6091: PUSH
6092: LD_INT 3
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 25
6101: PUSH
6102: LD_INT 4
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: LIST
6113: LIST
6114: LIST
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: LIST
6120: PPUSH
6121: CALL_OW 69
6125: PUSH
6126: LD_EXP 14
6130: PUSH
6131: LD_EXP 33
6135: PUSH
6136: LD_EXP 23
6140: PUSH
6141: LD_EXP 24
6145: PUSH
6146: LD_EXP 25
6150: PUSH
6151: LD_EXP 26
6155: PUSH
6156: LD_EXP 27
6160: PUSH
6161: LD_EXP 28
6165: PUSH
6166: LD_EXP 29
6170: PUSH
6171: LD_EXP 30
6175: PUSH
6176: LD_EXP 16
6180: PUSH
6181: LD_EXP 31
6185: PUSH
6186: LD_EXP 32
6190: PUSH
6191: LD_EXP 34
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: LIST
6203: LIST
6204: LIST
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: DIFF
6212: ST_TO_ADDR
// end ;
6213: LD_VAR 0 2
6217: RET
// export function SayRand ( sex , dial ) ; begin
6218: LD_INT 0
6220: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
6221: LD_ADDR_VAR 0 3
6225: PUSH
6226: LD_INT 52
6228: PUSH
6229: EMPTY
6230: LIST
6231: PUSH
6232: LD_INT 22
6234: PUSH
6235: LD_INT 1
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: PUSH
6242: LD_INT 26
6244: PUSH
6245: LD_VAR 0 1
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: PUSH
6254: LD_INT 2
6256: PUSH
6257: LD_INT 25
6259: PUSH
6260: LD_INT 1
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PUSH
6267: LD_INT 25
6269: PUSH
6270: LD_INT 2
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: PUSH
6277: LD_INT 25
6279: PUSH
6280: LD_INT 3
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: PUSH
6287: LD_INT 25
6289: PUSH
6290: LD_INT 4
6292: PUSH
6293: EMPTY
6294: LIST
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: LIST
6308: LIST
6309: PPUSH
6310: CALL_OW 69
6314: PUSH
6315: LD_EXP 14
6319: PUSH
6320: LD_EXP 33
6324: PUSH
6325: LD_EXP 23
6329: PUSH
6330: LD_EXP 24
6334: PUSH
6335: LD_EXP 25
6339: PUSH
6340: LD_EXP 26
6344: PUSH
6345: LD_EXP 27
6349: PUSH
6350: LD_EXP 28
6354: PUSH
6355: LD_EXP 29
6359: PUSH
6360: LD_EXP 30
6364: PUSH
6365: LD_EXP 16
6369: PUSH
6370: LD_EXP 31
6374: PUSH
6375: LD_EXP 32
6379: PUSH
6380: LD_EXP 34
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: LIST
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: DIFF
6401: ST_TO_ADDR
// if not result then
6402: LD_VAR 0 3
6406: NOT
6407: IFFALSE 6411
// exit ;
6409: GO 6439
// result := result [ 1 ] ;
6411: LD_ADDR_VAR 0 3
6415: PUSH
6416: LD_VAR 0 3
6420: PUSH
6421: LD_INT 1
6423: ARRAY
6424: ST_TO_ADDR
// Say ( result , dial ) ;
6425: LD_VAR 0 3
6429: PPUSH
6430: LD_VAR 0 2
6434: PPUSH
6435: CALL_OW 88
// end ;
6439: LD_VAR 0 3
6443: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
6444: LD_INT 0
6446: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
6447: LD_ADDR_VAR 0 4
6451: PUSH
6452: LD_INT 22
6454: PUSH
6455: LD_INT 1
6457: PUSH
6458: EMPTY
6459: LIST
6460: LIST
6461: PUSH
6462: LD_INT 26
6464: PUSH
6465: LD_VAR 0 1
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: LD_INT 25
6479: PUSH
6480: LD_INT 1
6482: PUSH
6483: EMPTY
6484: LIST
6485: LIST
6486: PUSH
6487: LD_INT 25
6489: PUSH
6490: LD_INT 2
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: LD_INT 25
6499: PUSH
6500: LD_INT 3
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PUSH
6507: LD_INT 25
6509: PUSH
6510: LD_INT 4
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: LIST
6528: PPUSH
6529: CALL_OW 69
6533: PUSH
6534: LD_EXP 14
6538: PUSH
6539: LD_EXP 33
6543: PUSH
6544: LD_EXP 23
6548: PUSH
6549: LD_EXP 24
6553: PUSH
6554: LD_EXP 25
6558: PUSH
6559: LD_EXP 26
6563: PUSH
6564: LD_EXP 27
6568: PUSH
6569: LD_EXP 28
6573: PUSH
6574: LD_EXP 29
6578: PUSH
6579: LD_EXP 30
6583: PUSH
6584: LD_EXP 16
6588: PUSH
6589: LD_EXP 31
6593: PUSH
6594: LD_EXP 32
6598: PUSH
6599: LD_EXP 34
6603: PUSH
6604: EMPTY
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: PUSH
6620: LD_VAR 0 3
6624: ADD
6625: DIFF
6626: ST_TO_ADDR
// if not result then
6627: LD_VAR 0 4
6631: NOT
6632: IFFALSE 6636
// exit ;
6634: GO 6664
// result := result [ 1 ] ;
6636: LD_ADDR_VAR 0 4
6640: PUSH
6641: LD_VAR 0 4
6645: PUSH
6646: LD_INT 1
6648: ARRAY
6649: ST_TO_ADDR
// Say ( result , dial ) ;
6650: LD_VAR 0 4
6654: PPUSH
6655: LD_VAR 0 2
6659: PPUSH
6660: CALL_OW 88
// end ;
6664: LD_VAR 0 4
6668: RET
// export function Patrol ( unit , path , flags ) ; var i , x , y , c , p , station , tmp_path , status , enemy , e , spot_dist , safe_place , chase_range , need_refuel ; begin
6669: LD_INT 0
6671: PPUSH
6672: PPUSH
6673: PPUSH
6674: PPUSH
6675: PPUSH
6676: PPUSH
6677: PPUSH
6678: PPUSH
6679: PPUSH
6680: PPUSH
6681: PPUSH
6682: PPUSH
6683: PPUSH
6684: PPUSH
6685: PPUSH
// if not unit or not path or GetType ( unit ) = unit_building then
6686: LD_VAR 0 1
6690: NOT
6691: PUSH
6692: LD_VAR 0 2
6696: NOT
6697: OR
6698: PUSH
6699: LD_VAR 0 1
6703: PPUSH
6704: CALL_OW 247
6708: PUSH
6709: LD_INT 3
6711: EQUAL
6712: OR
6713: IFFALSE 6717
// exit ;
6715: GO 8256
// for i = path downto 1 do
6717: LD_ADDR_VAR 0 5
6721: PUSH
6722: DOUBLE
6723: LD_VAR 0 2
6727: INC
6728: ST_TO_ADDR
6729: LD_INT 1
6731: PUSH
6732: FOR_DOWNTO
6733: IFFALSE 6794
// begin if not ValidHex ( path [ i ] [ 1 ] , path [ i ] [ 2 ] ) then
6735: LD_VAR 0 2
6739: PUSH
6740: LD_VAR 0 5
6744: ARRAY
6745: PUSH
6746: LD_INT 1
6748: ARRAY
6749: PPUSH
6750: LD_VAR 0 2
6754: PUSH
6755: LD_VAR 0 5
6759: ARRAY
6760: PUSH
6761: LD_INT 2
6763: ARRAY
6764: PPUSH
6765: CALL_OW 488
6769: NOT
6770: IFFALSE 6792
// path = Delete ( path , i ) ;
6772: LD_ADDR_VAR 0 2
6776: PUSH
6777: LD_VAR 0 2
6781: PPUSH
6782: LD_VAR 0 5
6786: PPUSH
6787: CALL_OW 3
6791: ST_TO_ADDR
// end ;
6792: GO 6732
6794: POP
6795: POP
// if not path then
6796: LD_VAR 0 2
6800: NOT
6801: IFFALSE 6805
// exit ;
6803: GO 8256
// tmp_path := [ ] ;
6805: LD_ADDR_VAR 0 11
6809: PUSH
6810: EMPTY
6811: ST_TO_ADDR
// if flags then
6812: LD_VAR 0 3
6816: IFFALSE 6890
// begin if flags [ 1 ] then
6818: LD_VAR 0 3
6822: PUSH
6823: LD_INT 1
6825: ARRAY
6826: IFFALSE 6842
// safe_place = flags [ 1 ] ;
6828: LD_ADDR_VAR 0 16
6832: PUSH
6833: LD_VAR 0 3
6837: PUSH
6838: LD_INT 1
6840: ARRAY
6841: ST_TO_ADDR
// if flags [ 2 ] then
6842: LD_VAR 0 3
6846: PUSH
6847: LD_INT 2
6849: ARRAY
6850: IFFALSE 6866
// spot_dist = flags [ 2 ] ;
6852: LD_ADDR_VAR 0 15
6856: PUSH
6857: LD_VAR 0 3
6861: PUSH
6862: LD_INT 2
6864: ARRAY
6865: ST_TO_ADDR
// if flags [ 3 ] then
6866: LD_VAR 0 3
6870: PUSH
6871: LD_INT 3
6873: ARRAY
6874: IFFALSE 6890
// chase_range = flags [ 3 ] ;
6876: LD_ADDR_VAR 0 17
6880: PUSH
6881: LD_VAR 0 3
6885: PUSH
6886: LD_INT 3
6888: ARRAY
6889: ST_TO_ADDR
// end ; if not chase_range then
6890: LD_VAR 0 17
6894: NOT
6895: IFFALSE 6905
// chase_range = 8 ;
6897: LD_ADDR_VAR 0 17
6901: PUSH
6902: LD_INT 8
6904: ST_TO_ADDR
// if not spot_dist then
6905: LD_VAR 0 15
6909: NOT
6910: IFFALSE 6920
// spot_dist := 8 ;
6912: LD_ADDR_VAR 0 15
6916: PUSH
6917: LD_INT 8
6919: ST_TO_ADDR
// need_refuel = ( GetType ( unit ) = unit_vehicle and GetEngine ( unit ) <> engine_siberite ) ;
6920: LD_ADDR_VAR 0 18
6924: PUSH
6925: LD_VAR 0 1
6929: PPUSH
6930: CALL_OW 247
6934: PUSH
6935: LD_INT 2
6937: EQUAL
6938: PUSH
6939: LD_VAR 0 1
6943: PPUSH
6944: CALL_OW 262
6948: PUSH
6949: LD_INT 3
6951: NONEQUAL
6952: AND
6953: ST_TO_ADDR
// status = 1 ;
6954: LD_ADDR_VAR 0 12
6958: PUSH
6959: LD_INT 1
6961: ST_TO_ADDR
// tmp_path = [ 1 , path [ 1 ] ] ;
6962: LD_ADDR_VAR 0 11
6966: PUSH
6967: LD_INT 1
6969: PUSH
6970: LD_VAR 0 2
6974: PUSH
6975: LD_INT 1
6977: ARRAY
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6983: LD_INT 35
6985: PPUSH
6986: CALL_OW 67
// if need_refuel and GetFuel ( unit ) < 20 then
6990: LD_VAR 0 18
6994: PUSH
6995: LD_VAR 0 1
6999: PPUSH
7000: CALL_OW 261
7004: PUSH
7005: LD_INT 20
7007: LESS
7008: AND
7009: IFFALSE 7202
// begin station := FilterAllUnits ( [ [ f_side , GetSide ( unit ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_oil_mine ] , [ f_btype , b_factory ] ] ] ) ;
7011: LD_ADDR_VAR 0 10
7015: PUSH
7016: LD_INT 22
7018: PUSH
7019: LD_VAR 0 1
7023: PPUSH
7024: CALL_OW 255
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 2
7035: PUSH
7036: LD_INT 30
7038: PUSH
7039: LD_INT 0
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: LD_INT 30
7048: PUSH
7049: LD_INT 1
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 30
7058: PUSH
7059: LD_INT 29
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 30
7068: PUSH
7069: LD_INT 3
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: ST_TO_ADDR
// if not station then
7092: LD_VAR 0 10
7096: NOT
7097: IFFALSE 7113
// begin SetFuel ( unit , 40 ) ;
7099: LD_VAR 0 1
7103: PPUSH
7104: LD_INT 40
7106: PPUSH
7107: CALL_OW 240
// continue ;
7111: GO 6983
// end ; status := 6 ;
7113: LD_ADDR_VAR 0 12
7117: PUSH
7118: LD_INT 6
7120: ST_TO_ADDR
// station := NearestUnitToUnit ( station , unit ) ;
7121: LD_ADDR_VAR 0 10
7125: PUSH
7126: LD_VAR 0 10
7130: PPUSH
7131: LD_VAR 0 1
7135: PPUSH
7136: CALL_OW 74
7140: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7141: LD_INT 35
7143: PPUSH
7144: CALL_OW 67
// ComMoveUnit ( unit , station ) ;
7148: LD_VAR 0 1
7152: PPUSH
7153: LD_VAR 0 10
7157: PPUSH
7158: CALL_OW 112
// until GetDistUnits ( unit , station ) < 6 ;
7162: LD_VAR 0 1
7166: PPUSH
7167: LD_VAR 0 10
7171: PPUSH
7172: CALL_OW 296
7176: PUSH
7177: LD_INT 6
7179: LESS
7180: IFFALSE 7141
// SetFuel ( unit , 100 ) ;
7182: LD_VAR 0 1
7186: PPUSH
7187: LD_INT 100
7189: PPUSH
7190: CALL_OW 240
// status := 5 ;
7194: LD_ADDR_VAR 0 12
7198: PUSH
7199: LD_INT 5
7201: ST_TO_ADDR
// end ; if status = 1 then
7202: LD_VAR 0 12
7206: PUSH
7207: LD_INT 1
7209: EQUAL
7210: IFFALSE 7586
// begin enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] , [ f_dist , unit , spot_dist ] , [ f_see , 1 ] ] ) ;
7212: LD_ADDR_VAR 0 13
7216: PUSH
7217: LD_INT 81
7219: PUSH
7220: LD_VAR 0 1
7224: PPUSH
7225: CALL_OW 255
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 3
7236: PUSH
7237: LD_INT 21
7239: PUSH
7240: LD_INT 3
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 91
7253: PUSH
7254: LD_VAR 0 1
7258: PUSH
7259: LD_VAR 0 15
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: PUSH
7269: LD_INT 101
7271: PUSH
7272: LD_INT 1
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: LIST
7284: PPUSH
7285: CALL_OW 69
7289: ST_TO_ADDR
// for i in enemy do
7290: LD_ADDR_VAR 0 5
7294: PUSH
7295: LD_VAR 0 13
7299: PUSH
7300: FOR_IN
7301: IFFALSE 7332
// if IsInvisible ( i ) then
7303: LD_VAR 0 5
7307: PPUSH
7308: CALL_OW 571
7312: IFFALSE 7330
// enemy := enemy diff i ;
7314: LD_ADDR_VAR 0 13
7318: PUSH
7319: LD_VAR 0 13
7323: PUSH
7324: LD_VAR 0 5
7328: DIFF
7329: ST_TO_ADDR
7330: GO 7300
7332: POP
7333: POP
// if enemy then
7334: LD_VAR 0 13
7338: IFFALSE 7388
// begin SetRememberedX ( unit , GetX ( unit ) ) ;
7340: LD_VAR 0 1
7344: PPUSH
7345: LD_VAR 0 1
7349: PPUSH
7350: CALL_OW 250
7354: PPUSH
7355: CALL_OW 231
// SetRememberedY ( unit , GetY ( unit ) ) ;
7359: LD_VAR 0 1
7363: PPUSH
7364: LD_VAR 0 1
7368: PPUSH
7369: CALL_OW 251
7373: PPUSH
7374: CALL_OW 232
// status = 2 ;
7378: LD_ADDR_VAR 0 12
7382: PUSH
7383: LD_INT 2
7385: ST_TO_ADDR
// end else
7386: GO 7586
// begin if IsAt ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) or not HasTask ( unit ) then
7388: LD_VAR 0 1
7392: PPUSH
7393: LD_VAR 0 11
7397: PUSH
7398: LD_INT 2
7400: ARRAY
7401: PUSH
7402: LD_INT 1
7404: ARRAY
7405: PPUSH
7406: LD_VAR 0 11
7410: PUSH
7411: LD_INT 2
7413: ARRAY
7414: PUSH
7415: LD_INT 2
7417: ARRAY
7418: PPUSH
7419: CALL_OW 307
7423: PUSH
7424: LD_VAR 0 1
7428: PPUSH
7429: CALL_OW 314
7433: NOT
7434: OR
7435: IFFALSE 7586
// begin wait ( 0 0$2 ) ;
7437: LD_INT 70
7439: PPUSH
7440: CALL_OW 67
// if tmp_path [ 1 ] + 1 > path then
7444: LD_VAR 0 11
7448: PUSH
7449: LD_INT 1
7451: ARRAY
7452: PUSH
7453: LD_INT 1
7455: PLUS
7456: PUSH
7457: LD_VAR 0 2
7461: GREATER
7462: IFFALSE 7487
// tmp_path := Replace ( tmp_path , 1 , 1 ) else
7464: LD_ADDR_VAR 0 11
7468: PUSH
7469: LD_VAR 0 11
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_INT 1
7479: PPUSH
7480: CALL_OW 1
7484: ST_TO_ADDR
7485: GO 7518
// tmp_path := Replace ( tmp_path , 1 , tmp_path [ 1 ] + 1 ) ;
7487: LD_ADDR_VAR 0 11
7491: PUSH
7492: LD_VAR 0 11
7496: PPUSH
7497: LD_INT 1
7499: PPUSH
7500: LD_VAR 0 11
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PUSH
7509: LD_INT 1
7511: PLUS
7512: PPUSH
7513: CALL_OW 1
7517: ST_TO_ADDR
// tmp_path := Replace ( tmp_path , 2 , path [ tmp_path [ 1 ] ] ) ;
7518: LD_ADDR_VAR 0 11
7522: PUSH
7523: LD_VAR 0 11
7527: PPUSH
7528: LD_INT 2
7530: PPUSH
7531: LD_VAR 0 2
7535: PUSH
7536: LD_VAR 0 11
7540: PUSH
7541: LD_INT 1
7543: ARRAY
7544: ARRAY
7545: PPUSH
7546: CALL_OW 1
7550: ST_TO_ADDR
// ComAgressiveMove ( unit , tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ) ;
7551: LD_VAR 0 1
7555: PPUSH
7556: LD_VAR 0 11
7560: PUSH
7561: LD_INT 2
7563: ARRAY
7564: PUSH
7565: LD_INT 1
7567: ARRAY
7568: PPUSH
7569: LD_VAR 0 11
7573: PUSH
7574: LD_INT 2
7576: ARRAY
7577: PUSH
7578: LD_INT 2
7580: ARRAY
7581: PPUSH
7582: CALL_OW 114
// end ; end ; end ; if status = 2 then
7586: LD_VAR 0 12
7590: PUSH
7591: LD_INT 2
7593: EQUAL
7594: IFFALSE 7815
// begin if GetLives ( unit ) < 650 and safe_place then
7596: LD_VAR 0 1
7600: PPUSH
7601: CALL_OW 256
7605: PUSH
7606: LD_INT 650
7608: LESS
7609: PUSH
7610: LD_VAR 0 16
7614: AND
7615: IFFALSE 7627
// begin status = 3 ;
7617: LD_ADDR_VAR 0 12
7621: PUSH
7622: LD_INT 3
7624: ST_TO_ADDR
// continue ;
7625: GO 6983
// end ; x := GetRememberedX ( unit ) ;
7627: LD_ADDR_VAR 0 6
7631: PUSH
7632: LD_VAR 0 1
7636: PPUSH
7637: CALL_OW 252
7641: ST_TO_ADDR
// y := GetRememberedY ( unit ) ;
7642: LD_ADDR_VAR 0 7
7646: PUSH
7647: LD_VAR 0 1
7651: PPUSH
7652: CALL_OW 253
7656: ST_TO_ADDR
// enemy := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_distxy , x , y , spot_dist ] , [ f_see , 1 ] ] ) ;
7657: LD_ADDR_VAR 0 13
7661: PUSH
7662: LD_INT 81
7664: PUSH
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 255
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PUSH
7679: LD_INT 92
7681: PUSH
7682: LD_VAR 0 6
7686: PUSH
7687: LD_VAR 0 7
7691: PUSH
7692: LD_VAR 0 15
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_INT 101
7705: PUSH
7706: LD_INT 1
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: LIST
7717: PPUSH
7718: CALL_OW 69
7722: ST_TO_ADDR
// if enemy then
7723: LD_VAR 0 13
7727: IFFALSE 7798
// begin e := NearestUnitToUnit ( enemy , unit ) ;
7729: LD_ADDR_VAR 0 14
7733: PUSH
7734: LD_VAR 0 13
7738: PPUSH
7739: LD_VAR 0 1
7743: PPUSH
7744: CALL_OW 74
7748: ST_TO_ADDR
// if GetDistUnitXY ( e , x , y ) < spot_dist + chase_range then
7749: LD_VAR 0 14
7753: PPUSH
7754: LD_VAR 0 6
7758: PPUSH
7759: LD_VAR 0 7
7763: PPUSH
7764: CALL_OW 297
7768: PUSH
7769: LD_VAR 0 15
7773: PUSH
7774: LD_VAR 0 17
7778: PLUS
7779: LESS
7780: IFFALSE 7796
// ComAttackUnit ( unit , e ) ;
7782: LD_VAR 0 1
7786: PPUSH
7787: LD_VAR 0 14
7791: PPUSH
7792: CALL_OW 115
// end else
7796: GO 7815
// begin ComStop ( unit ) ;
7798: LD_VAR 0 1
7802: PPUSH
7803: CALL_OW 141
// status = 5 ;
7807: LD_ADDR_VAR 0 12
7811: PUSH
7812: LD_INT 5
7814: ST_TO_ADDR
// end ; end ; if status = 3 and safe_place then
7815: LD_VAR 0 12
7819: PUSH
7820: LD_INT 3
7822: EQUAL
7823: PUSH
7824: LD_VAR 0 16
7828: AND
7829: IFFALSE 7915
// begin repeat ComMoveXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) ;
7831: LD_VAR 0 1
7835: PPUSH
7836: LD_VAR 0 16
7840: PUSH
7841: LD_INT 1
7843: ARRAY
7844: PPUSH
7845: LD_VAR 0 16
7849: PUSH
7850: LD_INT 2
7852: ARRAY
7853: PPUSH
7854: CALL_OW 111
// wait ( 0 0$1 ) ;
7858: LD_INT 35
7860: PPUSH
7861: CALL_OW 67
// until GetDistUnitXY ( unit , safe_place [ 1 ] , safe_place [ 2 ] ) < 4 ;
7865: LD_VAR 0 1
7869: PPUSH
7870: LD_VAR 0 16
7874: PUSH
7875: LD_INT 1
7877: ARRAY
7878: PPUSH
7879: LD_VAR 0 16
7883: PUSH
7884: LD_INT 2
7886: ARRAY
7887: PPUSH
7888: CALL_OW 297
7892: PUSH
7893: LD_INT 4
7895: LESS
7896: IFFALSE 7831
// ComStop ( unit ) ;
7898: LD_VAR 0 1
7902: PPUSH
7903: CALL_OW 141
// status = 4 ;
7907: LD_ADDR_VAR 0 12
7911: PUSH
7912: LD_INT 4
7914: ST_TO_ADDR
// end ; if status = 4 then
7915: LD_VAR 0 12
7919: PUSH
7920: LD_INT 4
7922: EQUAL
7923: IFFALSE 7955
// begin repeat wait ( 0 0$1 ) ;
7925: LD_INT 35
7927: PPUSH
7928: CALL_OW 67
// until GetLives ( unit ) = 1000 ;
7932: LD_VAR 0 1
7936: PPUSH
7937: CALL_OW 256
7941: PUSH
7942: LD_INT 1000
7944: EQUAL
7945: IFFALSE 7925
// status = 5 ;
7947: LD_ADDR_VAR 0 12
7951: PUSH
7952: LD_INT 5
7954: ST_TO_ADDR
// end ; if status = 5 then
7955: LD_VAR 0 12
7959: PUSH
7960: LD_INT 5
7962: EQUAL
7963: IFFALSE 8245
// begin p := 999 ;
7965: LD_ADDR_VAR 0 9
7969: PUSH
7970: LD_INT 999
7972: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ 1 ] , tmp_path [ 2 ] [ 2 ] ] ;
7973: LD_ADDR_VAR 0 14
7977: PUSH
7978: LD_VAR 0 11
7982: PUSH
7983: LD_INT 2
7985: ARRAY
7986: PUSH
7987: LD_INT 1
7989: ARRAY
7990: PUSH
7991: LD_VAR 0 11
7995: PUSH
7996: LD_INT 2
7998: ARRAY
7999: PUSH
8000: LD_INT 2
8002: ARRAY
8003: PUSH
8004: EMPTY
8005: LIST
8006: LIST
8007: ST_TO_ADDR
// c := 1 ;
8008: LD_ADDR_VAR 0 8
8012: PUSH
8013: LD_INT 1
8015: ST_TO_ADDR
// for i = 1 to tmp_path [ 2 ] div 2 do
8016: LD_ADDR_VAR 0 5
8020: PUSH
8021: DOUBLE
8022: LD_INT 1
8024: DEC
8025: ST_TO_ADDR
8026: LD_VAR 0 11
8030: PUSH
8031: LD_INT 2
8033: ARRAY
8034: PUSH
8035: LD_INT 2
8037: DIV
8038: PUSH
8039: FOR_TO
8040: IFFALSE 8172
// begin x := GetDistUnitXY ( unit , tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ) ;
8042: LD_ADDR_VAR 0 6
8046: PUSH
8047: LD_VAR 0 1
8051: PPUSH
8052: LD_VAR 0 11
8056: PUSH
8057: LD_INT 2
8059: ARRAY
8060: PUSH
8061: LD_VAR 0 8
8065: ARRAY
8066: PPUSH
8067: LD_VAR 0 11
8071: PUSH
8072: LD_INT 2
8074: ARRAY
8075: PUSH
8076: LD_VAR 0 8
8080: PUSH
8081: LD_INT 1
8083: PLUS
8084: ARRAY
8085: PPUSH
8086: CALL_OW 297
8090: ST_TO_ADDR
// if x < p then
8091: LD_VAR 0 6
8095: PUSH
8096: LD_VAR 0 9
8100: LESS
8101: IFFALSE 8156
// begin p := x ;
8103: LD_ADDR_VAR 0 9
8107: PUSH
8108: LD_VAR 0 6
8112: ST_TO_ADDR
// e := [ tmp_path [ 2 ] [ c ] , tmp_path [ 2 ] [ c + 1 ] ] ;
8113: LD_ADDR_VAR 0 14
8117: PUSH
8118: LD_VAR 0 11
8122: PUSH
8123: LD_INT 2
8125: ARRAY
8126: PUSH
8127: LD_VAR 0 8
8131: ARRAY
8132: PUSH
8133: LD_VAR 0 11
8137: PUSH
8138: LD_INT 2
8140: ARRAY
8141: PUSH
8142: LD_VAR 0 8
8146: PUSH
8147: LD_INT 1
8149: PLUS
8150: ARRAY
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: ST_TO_ADDR
// end ; c = c + 2 ;
8156: LD_ADDR_VAR 0 8
8160: PUSH
8161: LD_VAR 0 8
8165: PUSH
8166: LD_INT 2
8168: PLUS
8169: ST_TO_ADDR
// end ;
8170: GO 8039
8172: POP
8173: POP
// repeat ComMoveXY ( unit , e [ 1 ] , e [ 2 ] ) ;
8174: LD_VAR 0 1
8178: PPUSH
8179: LD_VAR 0 14
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PPUSH
8188: LD_VAR 0 14
8192: PUSH
8193: LD_INT 2
8195: ARRAY
8196: PPUSH
8197: CALL_OW 111
// wait ( 0 0$1 ) ;
8201: LD_INT 35
8203: PPUSH
8204: CALL_OW 67
// until IsAt ( unit , e [ 1 ] , e [ 2 ] ) ;
8208: LD_VAR 0 1
8212: PPUSH
8213: LD_VAR 0 14
8217: PUSH
8218: LD_INT 1
8220: ARRAY
8221: PPUSH
8222: LD_VAR 0 14
8226: PUSH
8227: LD_INT 2
8229: ARRAY
8230: PPUSH
8231: CALL_OW 307
8235: IFFALSE 8174
// status = 1 ;
8237: LD_ADDR_VAR 0 12
8241: PUSH
8242: LD_INT 1
8244: ST_TO_ADDR
// end ; until IsDead ( unit ) ;
8245: LD_VAR 0 1
8249: PPUSH
8250: CALL_OW 301
8254: IFFALSE 6983
// end ;
8256: LD_VAR 0 4
8260: RET
// export function Talk ( units , type , sequence , sex , class , id , order_id ) ; var i , unit , tmp , unit_id , dialog_id , sex_id , class_id ; begin
8261: LD_INT 0
8263: PPUSH
8264: PPUSH
8265: PPUSH
8266: PPUSH
8267: PPUSH
8268: PPUSH
8269: PPUSH
8270: PPUSH
// if not units or not sequence or not sex in [ sex_male , sex_female , 0 ] or not id or not order_id then
8271: LD_VAR 0 1
8275: NOT
8276: PUSH
8277: LD_VAR 0 3
8281: NOT
8282: OR
8283: PUSH
8284: LD_VAR 0 4
8288: PUSH
8289: LD_INT 1
8291: PUSH
8292: LD_INT 2
8294: PUSH
8295: LD_INT 0
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: LIST
8302: IN
8303: NOT
8304: OR
8305: PUSH
8306: LD_VAR 0 6
8310: NOT
8311: OR
8312: PUSH
8313: LD_VAR 0 7
8317: NOT
8318: OR
8319: IFFALSE 8323
// exit ;
8321: GO 8714
// sex_id :=  ;
8323: LD_ADDR_VAR 0 14
8327: PUSH
8328: LD_STRING 
8330: ST_TO_ADDR
// case class of 1 :
8331: LD_VAR 0 5
8335: PUSH
8336: LD_INT 1
8338: DOUBLE
8339: EQUAL
8340: IFTRUE 8344
8342: GO 8355
8344: POP
// class_id := Sol ; 2 :
8345: LD_ADDR_VAR 0 15
8349: PUSH
8350: LD_STRING Sol
8352: ST_TO_ADDR
8353: GO 8413
8355: LD_INT 2
8357: DOUBLE
8358: EQUAL
8359: IFTRUE 8363
8361: GO 8374
8363: POP
// class_id := Eng ; 3 :
8364: LD_ADDR_VAR 0 15
8368: PUSH
8369: LD_STRING Eng
8371: ST_TO_ADDR
8372: GO 8413
8374: LD_INT 3
8376: DOUBLE
8377: EQUAL
8378: IFTRUE 8382
8380: GO 8393
8382: POP
// class_id := Mech ; 4 :
8383: LD_ADDR_VAR 0 15
8387: PUSH
8388: LD_STRING Mech
8390: ST_TO_ADDR
8391: GO 8413
8393: LD_INT 4
8395: DOUBLE
8396: EQUAL
8397: IFTRUE 8401
8399: GO 8412
8401: POP
// class_id := Sci ; end ;
8402: LD_ADDR_VAR 0 15
8406: PUSH
8407: LD_STRING Sci
8409: ST_TO_ADDR
8410: GO 8413
8412: POP
// tmp := UnitFilter ( units , [ f_class , class ] ) ;
8413: LD_ADDR_VAR 0 11
8417: PUSH
8418: LD_VAR 0 1
8422: PPUSH
8423: LD_INT 25
8425: PUSH
8426: LD_VAR 0 5
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PPUSH
8435: CALL_OW 72
8439: ST_TO_ADDR
// if tmp then
8440: LD_VAR 0 11
8444: IFFALSE 8456
// units := tmp ;
8446: LD_ADDR_VAR 0 1
8450: PUSH
8451: LD_VAR 0 11
8455: ST_TO_ADDR
// if sex then
8456: LD_VAR 0 4
8460: IFFALSE 8516
// begin if sex = sex_female then
8462: LD_VAR 0 4
8466: PUSH
8467: LD_INT 2
8469: EQUAL
8470: IFFALSE 8480
// sex_id := F ;
8472: LD_ADDR_VAR 0 14
8476: PUSH
8477: LD_STRING F
8479: ST_TO_ADDR
// units := UnitFilter ( units , [ f_sex , sex ] ) ;
8480: LD_ADDR_VAR 0 1
8484: PUSH
8485: LD_VAR 0 1
8489: PPUSH
8490: LD_INT 26
8492: PUSH
8493: LD_VAR 0 4
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PPUSH
8502: CALL_OW 72
8506: ST_TO_ADDR
// if not units then
8507: LD_VAR 0 1
8511: NOT
8512: IFFALSE 8516
// exit ;
8514: GO 8714
// end ; unit_id := id ;
8516: LD_ADDR_VAR 0 12
8520: PUSH
8521: LD_VAR 0 6
8525: ST_TO_ADDR
// if unit_id > units then
8526: LD_VAR 0 12
8530: PUSH
8531: LD_VAR 0 1
8535: GREATER
8536: IFFALSE 8546
// unit_id := 1 ;
8538: LD_ADDR_VAR 0 12
8542: PUSH
8543: LD_INT 1
8545: ST_TO_ADDR
// if not units [ unit_id ] then
8546: LD_VAR 0 1
8550: PUSH
8551: LD_VAR 0 12
8555: ARRAY
8556: NOT
8557: IFFALSE 8561
// exit ;
8559: GO 8714
// unit := units [ unit_id ] ;
8561: LD_ADDR_VAR 0 10
8565: PUSH
8566: LD_VAR 0 1
8570: PUSH
8571: LD_VAR 0 12
8575: ARRAY
8576: ST_TO_ADDR
// dialog_id := D & sequence & - & sex_id & class_id & id & - & order_id ;
8577: LD_ADDR_VAR 0 13
8581: PUSH
8582: LD_STRING D
8584: PUSH
8585: LD_VAR 0 3
8589: STR
8590: PUSH
8591: LD_STRING -
8593: STR
8594: PUSH
8595: LD_VAR 0 14
8599: STR
8600: PUSH
8601: LD_VAR 0 15
8605: STR
8606: PUSH
8607: LD_VAR 0 6
8611: STR
8612: PUSH
8613: LD_STRING -
8615: STR
8616: PUSH
8617: LD_VAR 0 7
8621: STR
8622: ST_TO_ADDR
// case type of 0 :
8623: LD_VAR 0 2
8627: PUSH
8628: LD_INT 0
8630: DOUBLE
8631: EQUAL
8632: IFTRUE 8636
8634: GO 8653
8636: POP
// Say ( unit , dialog_id ) ; 1 :
8637: LD_VAR 0 10
8641: PPUSH
8642: LD_VAR 0 13
8646: PPUSH
8647: CALL_OW 88
8651: GO 8704
8653: LD_INT 1
8655: DOUBLE
8656: EQUAL
8657: IFTRUE 8661
8659: GO 8678
8661: POP
// SayRadio ( unit , dialog_id ) ; 2 :
8662: LD_VAR 0 10
8666: PPUSH
8667: LD_VAR 0 13
8671: PPUSH
8672: CALL_OW 94
8676: GO 8704
8678: LD_INT 2
8680: DOUBLE
8681: EQUAL
8682: IFTRUE 8686
8684: GO 8703
8686: POP
// ForceSay ( unit , dialog_id ) ; end ;
8687: LD_VAR 0 10
8691: PPUSH
8692: LD_VAR 0 13
8696: PPUSH
8697: CALL_OW 91
8701: GO 8704
8703: POP
// result := unit ;
8704: LD_ADDR_VAR 0 8
8708: PUSH
8709: LD_VAR 0 10
8713: ST_TO_ADDR
// end ;
8714: LD_VAR 0 8
8718: RET
// export function IsNearbyEntrance ( unit , building , distance ) ; var i , entrance ; begin
8719: LD_INT 0
8721: PPUSH
8722: PPUSH
8723: PPUSH
// result := false ;
8724: LD_ADDR_VAR 0 4
8728: PUSH
8729: LD_INT 0
8731: ST_TO_ADDR
// if not unit or not building or IsInUnit ( unit ) then
8732: LD_VAR 0 1
8736: NOT
8737: PUSH
8738: LD_VAR 0 2
8742: NOT
8743: OR
8744: PUSH
8745: LD_VAR 0 1
8749: PPUSH
8750: CALL_OW 310
8754: OR
8755: IFFALSE 8759
// exit ;
8757: GO 8963
// if distance < 0 then
8759: LD_VAR 0 3
8763: PUSH
8764: LD_INT 0
8766: LESS
8767: IFFALSE 8777
// distance := 0 ;
8769: LD_ADDR_VAR 0 3
8773: PUSH
8774: LD_INT 0
8776: ST_TO_ADDR
// entrance := GetBuildingHexes ( GetBType ( building ) , GetX ( building ) , GetY ( building ) , GetDir ( building ) , GetNation ( building ) , 1 ) ;
8777: LD_ADDR_VAR 0 6
8781: PUSH
8782: LD_VAR 0 2
8786: PPUSH
8787: CALL_OW 266
8791: PPUSH
8792: LD_VAR 0 2
8796: PPUSH
8797: CALL_OW 250
8801: PPUSH
8802: LD_VAR 0 2
8806: PPUSH
8807: CALL_OW 251
8811: PPUSH
8812: LD_VAR 0 2
8816: PPUSH
8817: CALL_OW 254
8821: PPUSH
8822: LD_VAR 0 2
8826: PPUSH
8827: CALL_OW 248
8831: PPUSH
8832: LD_INT 1
8834: PPUSH
8835: CALL 48253 0 6
8839: ST_TO_ADDR
// if not entrance then
8840: LD_VAR 0 6
8844: NOT
8845: IFFALSE 8849
// exit ;
8847: GO 8963
// for i in entrance do
8849: LD_ADDR_VAR 0 5
8853: PUSH
8854: LD_VAR 0 6
8858: PUSH
8859: FOR_IN
8860: IFFALSE 8961
// begin if not distance then
8862: LD_VAR 0 3
8866: NOT
8867: IFFALSE 8912
// begin if IsAt ( unit , i [ 1 ] , i [ 2 ] ) then
8869: LD_VAR 0 1
8873: PPUSH
8874: LD_VAR 0 5
8878: PUSH
8879: LD_INT 1
8881: ARRAY
8882: PPUSH
8883: LD_VAR 0 5
8887: PUSH
8888: LD_INT 2
8890: ARRAY
8891: PPUSH
8892: CALL_OW 307
8896: IFFALSE 8910
// begin result := true ;
8898: LD_ADDR_VAR 0 4
8902: PUSH
8903: LD_INT 1
8905: ST_TO_ADDR
// exit ;
8906: POP
8907: POP
8908: GO 8963
// end ; end else
8910: GO 8959
// begin if GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) <= distance then
8912: LD_VAR 0 1
8916: PPUSH
8917: LD_VAR 0 5
8921: PUSH
8922: LD_INT 1
8924: ARRAY
8925: PPUSH
8926: LD_VAR 0 5
8930: PUSH
8931: LD_INT 2
8933: ARRAY
8934: PPUSH
8935: CALL_OW 297
8939: PUSH
8940: LD_VAR 0 3
8944: LESSEQUAL
8945: IFFALSE 8959
// begin result := true ;
8947: LD_ADDR_VAR 0 4
8951: PUSH
8952: LD_INT 1
8954: ST_TO_ADDR
// exit ;
8955: POP
8956: POP
8957: GO 8963
// end ; end ; end ;
8959: GO 8859
8961: POP
8962: POP
// end ;
8963: LD_VAR 0 4
8967: RET
// export function CanSpot ( unit , unit2 ) ; var i , building ; begin
8968: LD_INT 0
8970: PPUSH
8971: PPUSH
8972: PPUSH
// result := false ;
8973: LD_ADDR_VAR 0 3
8977: PUSH
8978: LD_INT 0
8980: ST_TO_ADDR
// if not unit or not unit2 or not IsOk ( unit ) or not IsOk ( unit2 ) then
8981: LD_VAR 0 1
8985: NOT
8986: PUSH
8987: LD_VAR 0 2
8991: NOT
8992: OR
8993: PUSH
8994: LD_VAR 0 1
8998: PPUSH
8999: CALL_OW 302
9003: NOT
9004: OR
9005: PUSH
9006: LD_VAR 0 2
9010: PPUSH
9011: CALL_OW 302
9015: NOT
9016: OR
9017: IFFALSE 9021
// exit ;
9019: GO 9182
// if GetDistUnits ( unit , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_not , [ f_type , unit_building ] ] ] ) , unit ) ) < 8 then
9021: LD_VAR 0 1
9025: PPUSH
9026: LD_INT 81
9028: PUSH
9029: LD_VAR 0 1
9033: PPUSH
9034: CALL_OW 255
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PUSH
9043: LD_INT 3
9045: PUSH
9046: LD_INT 21
9048: PUSH
9049: LD_INT 3
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PPUSH
9064: CALL_OW 69
9068: PPUSH
9069: LD_VAR 0 1
9073: PPUSH
9074: CALL_OW 74
9078: PPUSH
9079: CALL_OW 296
9083: PUSH
9084: LD_INT 8
9086: LESS
9087: IFFALSE 9091
// exit ;
9089: GO 9182
// building := IsInUnit ( unit2 ) ;
9091: LD_ADDR_VAR 0 5
9095: PUSH
9096: LD_VAR 0 2
9100: PPUSH
9101: CALL_OW 310
9105: ST_TO_ADDR
// if building then
9106: LD_VAR 0 5
9110: IFFALSE 9137
// result := IsNearbyEntrance ( unit , building , 2 ) else
9112: LD_ADDR_VAR 0 3
9116: PUSH
9117: LD_VAR 0 1
9121: PPUSH
9122: LD_VAR 0 5
9126: PPUSH
9127: LD_INT 2
9129: PPUSH
9130: CALL 8719 0 3
9134: ST_TO_ADDR
9135: GO 9182
// result := ( GetDistUnits ( unit , unit2 ) < 6 and See ( GetSide ( unit2 ) , unit ) ) ;
9137: LD_ADDR_VAR 0 3
9141: PUSH
9142: LD_VAR 0 1
9146: PPUSH
9147: LD_VAR 0 2
9151: PPUSH
9152: CALL_OW 296
9156: PUSH
9157: LD_INT 6
9159: LESS
9160: PUSH
9161: LD_VAR 0 2
9165: PPUSH
9166: CALL_OW 255
9170: PPUSH
9171: LD_VAR 0 1
9175: PPUSH
9176: CALL_OW 292
9180: AND
9181: ST_TO_ADDR
// end ;
9182: LD_VAR 0 3
9186: RET
// export function CreateNature ; var i , animal , nat_area ; begin
9187: LD_INT 0
9189: PPUSH
9190: PPUSH
9191: PPUSH
9192: PPUSH
// uc_side = 0 ;
9193: LD_ADDR_OWVAR 20
9197: PUSH
9198: LD_INT 0
9200: ST_TO_ADDR
// uc_nation = 0 ;
9201: LD_ADDR_OWVAR 21
9205: PUSH
9206: LD_INT 0
9208: ST_TO_ADDR
// nat_area := nature_area ;
9209: LD_ADDR_VAR 0 4
9213: PUSH
9214: LD_INT 24
9216: ST_TO_ADDR
// InitHc ;
9217: CALL_OW 19
// for i = 1 to 4 do
9221: LD_ADDR_VAR 0 2
9225: PUSH
9226: DOUBLE
9227: LD_INT 1
9229: DEC
9230: ST_TO_ADDR
9231: LD_INT 4
9233: PUSH
9234: FOR_TO
9235: IFFALSE 9282
// begin hc_class = 18 ;
9237: LD_ADDR_OWVAR 28
9241: PUSH
9242: LD_INT 18
9244: ST_TO_ADDR
// hc_gallery =  ;
9245: LD_ADDR_OWVAR 33
9249: PUSH
9250: LD_STRING 
9252: ST_TO_ADDR
// animal := CreateHuman ;
9253: LD_ADDR_VAR 0 3
9257: PUSH
9258: CALL_OW 44
9262: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9263: LD_VAR 0 3
9267: PPUSH
9268: LD_VAR 0 4
9272: PPUSH
9273: LD_INT 0
9275: PPUSH
9276: CALL_OW 49
// end ;
9280: GO 9234
9282: POP
9283: POP
// for i = 1 to 3 do
9284: LD_ADDR_VAR 0 2
9288: PUSH
9289: DOUBLE
9290: LD_INT 1
9292: DEC
9293: ST_TO_ADDR
9294: LD_INT 3
9296: PUSH
9297: FOR_TO
9298: IFFALSE 9392
// begin hc_class = class_apeman ;
9300: LD_ADDR_OWVAR 28
9304: PUSH
9305: LD_INT 12
9307: ST_TO_ADDR
// hc_gallery =  ;
9308: LD_ADDR_OWVAR 33
9312: PUSH
9313: LD_STRING 
9315: ST_TO_ADDR
// hc_agressivity = 0 ;
9316: LD_ADDR_OWVAR 35
9320: PUSH
9321: LD_INT 0
9323: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
9324: LD_ADDR_OWVAR 31
9328: PUSH
9329: LD_INT 1
9331: PPUSH
9332: LD_INT 3
9334: PPUSH
9335: CALL_OW 12
9339: PUSH
9340: LD_INT 1
9342: PPUSH
9343: LD_INT 3
9345: PPUSH
9346: CALL_OW 12
9350: PUSH
9351: LD_INT 0
9353: PUSH
9354: LD_INT 0
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: ST_TO_ADDR
// animal := CreateHuman ;
9363: LD_ADDR_VAR 0 3
9367: PUSH
9368: CALL_OW 44
9372: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9373: LD_VAR 0 3
9377: PPUSH
9378: LD_VAR 0 4
9382: PPUSH
9383: LD_INT 0
9385: PPUSH
9386: CALL_OW 49
// end ;
9390: GO 9297
9392: POP
9393: POP
// for i = 1 to 3 do
9394: LD_ADDR_VAR 0 2
9398: PUSH
9399: DOUBLE
9400: LD_INT 1
9402: DEC
9403: ST_TO_ADDR
9404: LD_INT 3
9406: PUSH
9407: FOR_TO
9408: IFFALSE 9455
// begin hc_class = 13 ;
9410: LD_ADDR_OWVAR 28
9414: PUSH
9415: LD_INT 13
9417: ST_TO_ADDR
// hc_gallery =  ;
9418: LD_ADDR_OWVAR 33
9422: PUSH
9423: LD_STRING 
9425: ST_TO_ADDR
// animal := CreateHuman ;
9426: LD_ADDR_VAR 0 3
9430: PUSH
9431: CALL_OW 44
9435: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
9436: LD_VAR 0 3
9440: PPUSH
9441: LD_VAR 0 4
9445: PPUSH
9446: LD_INT 0
9448: PPUSH
9449: CALL_OW 49
// end ;
9453: GO 9407
9455: POP
9456: POP
// for i = 1 to 3 do
9457: LD_ADDR_VAR 0 2
9461: PUSH
9462: DOUBLE
9463: LD_INT 1
9465: DEC
9466: ST_TO_ADDR
9467: LD_INT 3
9469: PUSH
9470: FOR_TO
9471: IFFALSE 9516
// begin hc_class = 20 ;
9473: LD_ADDR_OWVAR 28
9477: PUSH
9478: LD_INT 20
9480: ST_TO_ADDR
// hc_gallery =  ;
9481: LD_ADDR_OWVAR 33
9485: PUSH
9486: LD_STRING 
9488: ST_TO_ADDR
// animal := CreateHuman ;
9489: LD_ADDR_VAR 0 3
9493: PUSH
9494: CALL_OW 44
9498: ST_TO_ADDR
// PlaceUnitArea ( animal , lake_area , false ) ;
9499: LD_VAR 0 3
9503: PPUSH
9504: LD_INT 4
9506: PPUSH
9507: LD_INT 0
9509: PPUSH
9510: CALL_OW 49
// end ;
9514: GO 9470
9516: POP
9517: POP
// end ; end_of_file
9518: LD_VAR 0 1
9522: RET
// export function Action ; begin
9523: LD_INT 0
9525: PPUSH
// InGameOn ;
9526: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
9530: LD_EXP 14
9534: PPUSH
9535: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
9539: LD_EXP 14
9543: PPUSH
9544: LD_STRING D1-JMM-1
9546: PPUSH
9547: CALL_OW 88
// Say ( Roth , D1-Roth-1 ) ;
9551: LD_EXP 15
9555: PPUSH
9556: LD_STRING D1-Roth-1
9558: PPUSH
9559: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
9563: LD_EXP 14
9567: PPUSH
9568: LD_STRING D1-JMM-2
9570: PPUSH
9571: CALL_OW 88
// Say ( Roth , D1-Roth-2 ) ;
9575: LD_EXP 15
9579: PPUSH
9580: LD_STRING D1-Roth-2
9582: PPUSH
9583: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
9587: LD_EXP 14
9591: PPUSH
9592: LD_STRING D1-JMM-3
9594: PPUSH
9595: CALL_OW 88
// Say ( Roth , D1-Roth-3 ) ;
9599: LD_EXP 15
9603: PPUSH
9604: LD_STRING D1-Roth-3
9606: PPUSH
9607: CALL_OW 88
// ComInvisible ( Roth ) ;
9611: LD_EXP 15
9615: PPUSH
9616: CALL_OW 152
// wait ( 0 0$1.3 ) ;
9620: LD_INT 46
9622: PPUSH
9623: CALL_OW 67
// Say ( JMM , D1-JMM-4 ) ;
9627: LD_EXP 14
9631: PPUSH
9632: LD_STRING D1-JMM-4
9634: PPUSH
9635: CALL_OW 88
// wait ( 0 0$0.3 ) ;
9639: LD_INT 10
9641: PPUSH
9642: CALL_OW 67
// ComTurnUnit ( Roth , JMM ) ;
9646: LD_EXP 15
9650: PPUSH
9651: LD_EXP 14
9655: PPUSH
9656: CALL_OW 119
// Say ( JMM , D1-JMM-4a ) ;
9660: LD_EXP 14
9664: PPUSH
9665: LD_STRING D1-JMM-4a
9667: PPUSH
9668: CALL_OW 88
// Say ( Roth , D1-Roth-4 ) ;
9672: LD_EXP 15
9676: PPUSH
9677: LD_STRING D1-Roth-4
9679: PPUSH
9680: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
9684: LD_EXP 14
9688: PPUSH
9689: LD_STRING D1-JMM-5
9691: PPUSH
9692: CALL_OW 88
// Say ( Roth , D1-Roth-5 ) ;
9696: LD_EXP 15
9700: PPUSH
9701: LD_STRING D1-Roth-5
9703: PPUSH
9704: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
9708: LD_EXP 14
9712: PPUSH
9713: LD_STRING D1-JMM-6
9715: PPUSH
9716: CALL_OW 88
// Say ( Roth , D1-Roth-6 ) ;
9720: LD_EXP 15
9724: PPUSH
9725: LD_STRING D1-Roth-6
9727: PPUSH
9728: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
9732: LD_EXP 14
9736: PPUSH
9737: LD_STRING D1-JMM-7
9739: PPUSH
9740: CALL_OW 88
// ComMoveXY ( Powell , GetX ( JMM ) , GetY ( JMM ) ) ;
9744: LD_EXP 16
9748: PPUSH
9749: LD_EXP 14
9753: PPUSH
9754: CALL_OW 250
9758: PPUSH
9759: LD_EXP 14
9763: PPUSH
9764: CALL_OW 251
9768: PPUSH
9769: CALL_OW 111
// Say ( Roth , D1-Roth-7 ) ;
9773: LD_EXP 15
9777: PPUSH
9778: LD_STRING D1-Roth-7
9780: PPUSH
9781: CALL_OW 88
// repeat wait ( 0 0$0.3 ) ;
9785: LD_INT 10
9787: PPUSH
9788: CALL_OW 67
// until GetDistUnits ( Powell , JMM ) < 6 ;
9792: LD_EXP 16
9796: PPUSH
9797: LD_EXP 14
9801: PPUSH
9802: CALL_OW 296
9806: PUSH
9807: LD_INT 6
9809: LESS
9810: IFFALSE 9785
// ComTurnUnit ( Powell , JMM ) ;
9812: LD_EXP 16
9816: PPUSH
9817: LD_EXP 14
9821: PPUSH
9822: CALL_OW 119
// Say ( Powell , D1-Pow-7 ) ;
9826: LD_EXP 16
9830: PPUSH
9831: LD_STRING D1-Pow-7
9833: PPUSH
9834: CALL_OW 88
// ComTurnUnit ( JMM , Powell ) ;
9838: LD_EXP 14
9842: PPUSH
9843: LD_EXP 16
9847: PPUSH
9848: CALL_OW 119
// ComTurnUnit ( Roth , Powell ) ;
9852: LD_EXP 15
9856: PPUSH
9857: LD_EXP 16
9861: PPUSH
9862: CALL_OW 119
// Say ( JMM , D1-JMM-8 ) ;
9866: LD_EXP 14
9870: PPUSH
9871: LD_STRING D1-JMM-8
9873: PPUSH
9874: CALL_OW 88
// Say ( Powell , D1-Pow-8 ) ;
9878: LD_EXP 16
9882: PPUSH
9883: LD_STRING D1-Pow-8
9885: PPUSH
9886: CALL_OW 88
// Say ( JMM , D1-JMM-9 ) ;
9890: LD_EXP 14
9894: PPUSH
9895: LD_STRING D1-JMM-9
9897: PPUSH
9898: CALL_OW 88
// ComMoveXY ( Powell , 124 , 61 ) ;
9902: LD_EXP 16
9906: PPUSH
9907: LD_INT 124
9909: PPUSH
9910: LD_INT 61
9912: PPUSH
9913: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9917: LD_INT 35
9919: PPUSH
9920: CALL_OW 67
// until GetDistUnits ( JMM , Powell ) > 6 ;
9924: LD_EXP 14
9928: PPUSH
9929: LD_EXP 16
9933: PPUSH
9934: CALL_OW 296
9938: PUSH
9939: LD_INT 6
9941: GREATER
9942: IFFALSE 9917
// SayRadio ( Powell , D1-Pow-9 ) ;
9944: LD_EXP 16
9948: PPUSH
9949: LD_STRING D1-Pow-9
9951: PPUSH
9952: CALL_OW 94
// RemoveUnit ( Powell ) ;
9956: LD_EXP 16
9960: PPUSH
9961: CALL_OW 64
// PlaceHumanInUnit ( Powell , ambar0 ) ;
9965: LD_EXP 16
9969: PPUSH
9970: LD_INT 18
9972: PPUSH
9973: CALL_OW 52
// if Joan and not Joan in selected then
9977: LD_EXP 36
9981: PUSH
9982: LD_EXP 36
9986: PUSH
9987: LD_EXP 3
9991: IN
9992: NOT
9993: AND
9994: IFFALSE 10008
// SayRadio ( Joan , D1-Joan-9 ) ;
9996: LD_EXP 36
10000: PPUSH
10001: LD_STRING D1-Joan-9
10003: PPUSH
10004: CALL_OW 94
// ComTurnUnit ( Roth , JMM ) ;
10008: LD_EXP 15
10012: PPUSH
10013: LD_EXP 14
10017: PPUSH
10018: CALL_OW 119
// ComTurnUnit ( JMM , Roth ) ;
10022: LD_EXP 14
10026: PPUSH
10027: LD_EXP 15
10031: PPUSH
10032: CALL_OW 119
// Say ( Roth , D1-Roth-9 ) ;
10036: LD_EXP 15
10040: PPUSH
10041: LD_STRING D1-Roth-9
10043: PPUSH
10044: CALL_OW 88
// Say ( JMM , D1-JMM-10 ) ;
10048: LD_EXP 14
10052: PPUSH
10053: LD_STRING D1-JMM-10
10055: PPUSH
10056: CALL_OW 88
// InGameOff ;
10060: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
10064: LD_STRING M1
10066: PPUSH
10067: CALL_OW 337
// if Difficulty < 3 then
10071: LD_OWVAR 67
10075: PUSH
10076: LD_INT 3
10078: LESS
10079: IFFALSE 10091
// ChangeSideFog ( 4 , 7 ) ;
10081: LD_INT 4
10083: PPUSH
10084: LD_INT 7
10086: PPUSH
10087: CALL_OW 343
// SaveForQuickRestart ;
10091: CALL_OW 22
// SetAttitude ( 7 , 1 , att_enemy , true ) ;
10095: LD_INT 7
10097: PPUSH
10098: LD_INT 1
10100: PPUSH
10101: LD_INT 2
10103: PPUSH
10104: LD_INT 1
10106: PPUSH
10107: CALL_OW 80
// wait ( 0 0$3 ) ;
10111: LD_INT 105
10113: PPUSH
10114: CALL_OW 67
// ComMoveXY ( Roth , 124 , 18 ) ;
10118: LD_EXP 15
10122: PPUSH
10123: LD_INT 124
10125: PPUSH
10126: LD_INT 18
10128: PPUSH
10129: CALL_OW 111
// AddComInvisible ( Roth ) ;
10133: LD_EXP 15
10137: PPUSH
10138: CALL_OW 212
// wait ( 0 0$30 ) ;
10142: LD_INT 1050
10144: PPUSH
10145: CALL_OW 67
// AddComWait ( Roth , 1 1$00 ) ;
10149: LD_EXP 15
10153: PPUSH
10154: LD_INT 2100
10156: PPUSH
10157: CALL_OW 202
// AddComMoveXY ( Roth , 156 , 20 ) ;
10161: LD_EXP 15
10165: PPUSH
10166: LD_INT 156
10168: PPUSH
10169: LD_INT 20
10171: PPUSH
10172: CALL_OW 171
// AddComMoveXY ( Roth , 178 , 42 ) ;
10176: LD_EXP 15
10180: PPUSH
10181: LD_INT 178
10183: PPUSH
10184: LD_INT 42
10186: PPUSH
10187: CALL_OW 171
// AddComInvisible ( Roth ) ;
10191: LD_EXP 15
10195: PPUSH
10196: CALL_OW 212
// end ;
10200: LD_VAR 0 1
10204: RET
// every 0 0$1 do var i , tmp ;
10205: GO 10207
10207: DISABLE
10208: LD_INT 0
10210: PPUSH
10211: PPUSH
// begin tmp := selected union friends ;
10212: LD_ADDR_VAR 0 2
10216: PUSH
10217: LD_EXP 3
10221: PUSH
10222: LD_EXP 4
10226: UNION
10227: ST_TO_ADDR
// if not tmp then
10228: LD_VAR 0 2
10232: NOT
10233: IFFALSE 10237
// exit ;
10235: GO 10309
// repeat wait ( 0 0$1 ) ;
10237: LD_INT 35
10239: PPUSH
10240: CALL_OW 67
// for i in tmp do
10244: LD_ADDR_VAR 0 1
10248: PUSH
10249: LD_VAR 0 2
10253: PUSH
10254: FOR_IN
10255: IFFALSE 10300
// if CanSpot ( JMM , i ) then
10257: LD_EXP 14
10261: PPUSH
10262: LD_VAR 0 1
10266: PPUSH
10267: CALL 8968 0 2
10271: IFFALSE 10298
// begin tmp := tmp diff i ;
10273: LD_ADDR_VAR 0 2
10277: PUSH
10278: LD_VAR 0 2
10282: PUSH
10283: LD_VAR 0 1
10287: DIFF
10288: ST_TO_ADDR
// Spot ( i ) ;
10289: LD_VAR 0 1
10293: PPUSH
10294: CALL 10312 0 1
// end ;
10298: GO 10254
10300: POP
10301: POP
// until not tmp ;
10302: LD_VAR 0 2
10306: NOT
10307: IFFALSE 10237
// end ;
10309: PPOPN 2
10311: END
// export function Spot ( unit ) ; var building , side , joined ; begin
10312: LD_INT 0
10314: PPUSH
10315: PPUSH
10316: PPUSH
10317: PPUSH
// if not unit or GetSide ( unit ) <> 4 or IsSleeping ( unit ) or not IsOk ( unit ) then
10318: LD_VAR 0 1
10322: NOT
10323: PUSH
10324: LD_VAR 0 1
10328: PPUSH
10329: CALL_OW 255
10333: PUSH
10334: LD_INT 4
10336: NONEQUAL
10337: OR
10338: PUSH
10339: LD_VAR 0 1
10343: PPUSH
10344: CALL_OW 555
10348: OR
10349: PUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 302
10359: NOT
10360: OR
10361: IFFALSE 10365
// exit ;
10363: GO 12247
// InGameOn ;
10365: CALL_OW 8
// side := 7 ;
10369: LD_ADDR_VAR 0 4
10373: PUSH
10374: LD_INT 7
10376: ST_TO_ADDR
// joined := false ;
10377: LD_ADDR_VAR 0 5
10381: PUSH
10382: LD_INT 0
10384: ST_TO_ADDR
// building := IsInUnit ( unit ) ;
10385: LD_ADDR_VAR 0 3
10389: PUSH
10390: LD_VAR 0 1
10394: PPUSH
10395: CALL_OW 310
10399: ST_TO_ADDR
// if building then
10400: LD_VAR 0 3
10404: IFFALSE 10463
// begin SetSide ( JMM , GetSide ( unit ) ) ;
10406: LD_EXP 14
10410: PPUSH
10411: LD_VAR 0 1
10415: PPUSH
10416: CALL_OW 255
10420: PPUSH
10421: CALL_OW 235
// ComEnterUnit ( JMM , building ) ;
10425: LD_EXP 14
10429: PPUSH
10430: LD_VAR 0 3
10434: PPUSH
10435: CALL_OW 120
// repeat wait ( 3 ) ;
10439: LD_INT 3
10441: PPUSH
10442: CALL_OW 67
// until IsInUnit ( JMM ) ;
10446: LD_EXP 14
10450: PPUSH
10451: CALL_OW 310
10455: IFFALSE 10439
// DialogueOn ;
10457: CALL_OW 6
// end else
10461: GO 10495
// begin ComTurnUnit ( JMM , unit ) ;
10463: LD_EXP 14
10467: PPUSH
10468: LD_VAR 0 1
10472: PPUSH
10473: CALL_OW 119
// ComTurnUnit ( unit , JMM ) ;
10477: LD_VAR 0 1
10481: PPUSH
10482: LD_EXP 14
10486: PPUSH
10487: CALL_OW 119
// DialogueOn ;
10491: CALL_OW 6
// end ; if unit = Joan then
10495: LD_VAR 0 1
10499: PUSH
10500: LD_EXP 36
10504: EQUAL
10505: IFFALSE 10615
// begin joined := true ;
10507: LD_ADDR_VAR 0 5
10511: PUSH
10512: LD_INT 1
10514: ST_TO_ADDR
// if Joan in selected then
10515: LD_EXP 36
10519: PUSH
10520: LD_EXP 3
10524: IN
10525: IFFALSE 10553
// begin Say ( Joan , D3-Joan-Joan-1 ) ;
10527: LD_EXP 36
10531: PPUSH
10532: LD_STRING D3-Joan-Joan-1
10534: PPUSH
10535: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
10539: LD_EXP 14
10543: PPUSH
10544: LD_STRING D3-Joan-JMM-1
10546: PPUSH
10547: CALL_OW 88
// end else
10551: GO 10613
// begin Say ( Joan , D4-Joan-Joan-1 ) ;
10553: LD_EXP 36
10557: PPUSH
10558: LD_STRING D4-Joan-Joan-1
10560: PPUSH
10561: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-1 ) ;
10565: LD_EXP 14
10569: PPUSH
10570: LD_STRING D4-Joan-JMM-1
10572: PPUSH
10573: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-2 ) ;
10577: LD_EXP 36
10581: PPUSH
10582: LD_STRING D4-Joan-Joan-2
10584: PPUSH
10585: CALL_OW 88
// Say ( JMM , D4-Joan-JMM-2 ) ;
10589: LD_EXP 14
10593: PPUSH
10594: LD_STRING D4-Joan-JMM-2
10596: PPUSH
10597: CALL_OW 88
// Say ( Joan , D4-Joan-Joan-3 ) ;
10601: LD_EXP 36
10605: PPUSH
10606: LD_STRING D4-Joan-Joan-3
10608: PPUSH
10609: CALL_OW 88
// end ; end else
10613: GO 12055
// if unit = Lisa then
10615: LD_VAR 0 1
10619: PUSH
10620: LD_EXP 23
10624: EQUAL
10625: IFFALSE 10817
// begin if Lisa in selected then
10627: LD_EXP 23
10631: PUSH
10632: LD_EXP 3
10636: IN
10637: IFFALSE 10750
// begin if GetSide ( Joan ) = 7 then
10639: LD_EXP 36
10643: PPUSH
10644: CALL_OW 255
10648: PUSH
10649: LD_INT 7
10651: EQUAL
10652: IFFALSE 10716
// begin Say ( Lisa , D3-LisaJ-Lisa-1 ) ;
10654: LD_EXP 23
10658: PPUSH
10659: LD_STRING D3-LisaJ-Lisa-1
10661: PPUSH
10662: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-1 ) ;
10666: LD_EXP 14
10670: PPUSH
10671: LD_STRING D3-LisaJ-JMM-1
10673: PPUSH
10674: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-2 ) ;
10678: LD_EXP 23
10682: PPUSH
10683: LD_STRING D3-LisaJ-Lisa-2
10685: PPUSH
10686: CALL_OW 88
// Say ( JMM , D3-LisaJ-JMM-2 ) ;
10690: LD_EXP 14
10694: PPUSH
10695: LD_STRING D3-LisaJ-JMM-2
10697: PPUSH
10698: CALL_OW 88
// Say ( Lisa , D3-LisaJ-Lisa-3 ) ;
10702: LD_EXP 23
10706: PPUSH
10707: LD_STRING D3-LisaJ-Lisa-3
10709: PPUSH
10710: CALL_OW 88
// end else
10714: GO 10748
// begin Say ( Lisa , D3-LisaL-Lisa-1 ) ;
10716: LD_EXP 23
10720: PPUSH
10721: LD_STRING D3-LisaL-Lisa-1
10723: PPUSH
10724: CALL_OW 88
// Say ( JMM , D3-LisaL-JMM-1 ) ;
10728: LD_EXP 14
10732: PPUSH
10733: LD_STRING D3-LisaL-JMM-1
10735: PPUSH
10736: CALL_OW 88
// joined := true ;
10740: LD_ADDR_VAR 0 5
10744: PUSH
10745: LD_INT 1
10747: ST_TO_ADDR
// end ; end else
10748: GO 10815
// begin if GetSide ( Joan ) = 7 then
10750: LD_EXP 36
10754: PPUSH
10755: CALL_OW 255
10759: PUSH
10760: LD_INT 7
10762: EQUAL
10763: IFFALSE 10803
// begin Say ( Lisa , D4-LisaJ-Lisa-1 ) ;
10765: LD_EXP 23
10769: PPUSH
10770: LD_STRING D4-LisaJ-Lisa-1
10772: PPUSH
10773: CALL_OW 88
// Say ( JMM , D4-LisaJ-JMM-1 ) ;
10777: LD_EXP 14
10781: PPUSH
10782: LD_STRING D4-LisaJ-JMM-1
10784: PPUSH
10785: CALL_OW 88
// Say ( Lisa , D4-LisaJ-Lisa-2 ) ;
10789: LD_EXP 23
10793: PPUSH
10794: LD_STRING D4-LisaJ-Lisa-2
10796: PPUSH
10797: CALL_OW 88
// end else
10801: GO 10815
// begin Say ( Lisa , D4-LisaL-Lisa-1 ) ;
10803: LD_EXP 23
10807: PPUSH
10808: LD_STRING D4-LisaL-Lisa-1
10810: PPUSH
10811: CALL_OW 88
// end ; end ; end else
10815: GO 12055
// if unit = Frank then
10817: LD_VAR 0 1
10821: PUSH
10822: LD_EXP 33
10826: EQUAL
10827: IFFALSE 10967
// begin joined := true ;
10829: LD_ADDR_VAR 0 5
10833: PUSH
10834: LD_INT 1
10836: ST_TO_ADDR
// if Frank in selected then
10837: LD_EXP 33
10841: PUSH
10842: LD_EXP 3
10846: IN
10847: IFFALSE 10917
// begin Say ( Frank , D3-Frank-Frank-1 ) ;
10849: LD_EXP 33
10853: PPUSH
10854: LD_STRING D3-Frank-Frank-1
10856: PPUSH
10857: CALL_OW 88
// Say ( JMM , D3-Frank-JMM-1 ) ;
10861: LD_EXP 14
10865: PPUSH
10866: LD_STRING D3-Frank-JMM-1
10868: PPUSH
10869: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-2 ) ;
10873: LD_EXP 33
10877: PPUSH
10878: LD_STRING D3-Frank-Frank-2
10880: PPUSH
10881: CALL_OW 88
// if reached_lab then
10885: LD_EXP 5
10889: IFFALSE 10915
// begin Say ( JMM , D3-Frank-JMM-2 ) ;
10891: LD_EXP 14
10895: PPUSH
10896: LD_STRING D3-Frank-JMM-2
10898: PPUSH
10899: CALL_OW 88
// Say ( Frank , D3-Frank-Frank-3 ) ;
10903: LD_EXP 33
10907: PPUSH
10908: LD_STRING D3-Frank-Frank-3
10910: PPUSH
10911: CALL_OW 88
// end ; end else
10915: GO 10965
// begin Say ( Frank , D4-Frank-Frank-1 ) ;
10917: LD_EXP 33
10921: PPUSH
10922: LD_STRING D4-Frank-Frank-1
10924: PPUSH
10925: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-1 ) ;
10929: LD_EXP 14
10933: PPUSH
10934: LD_STRING D4-Frank-JMM-1
10936: PPUSH
10937: CALL_OW 88
// Say ( Frank , D4-Frank-Frank-2 ) ;
10941: LD_EXP 33
10945: PPUSH
10946: LD_STRING D4-Frank-Frank-2
10948: PPUSH
10949: CALL_OW 88
// Say ( JMM , D4-Frank-JMM-2 ) ;
10953: LD_EXP 14
10957: PPUSH
10958: LD_STRING D4-Frank-JMM-2
10960: PPUSH
10961: CALL_OW 88
// end ; end else
10965: GO 12055
// if unit = Brown then
10967: LD_VAR 0 1
10971: PUSH
10972: LD_EXP 28
10976: EQUAL
10977: IFFALSE 11073
// begin if Brown in selected or gamma_commander = 2 then
10979: LD_EXP 28
10983: PUSH
10984: LD_EXP 3
10988: IN
10989: PUSH
10990: LD_EXP 10
10994: PUSH
10995: LD_INT 2
10997: EQUAL
10998: OR
10999: IFFALSE 11035
// begin Say ( Brown , D3-Soldier1-Sol1-1 ) ;
11001: LD_EXP 28
11005: PPUSH
11006: LD_STRING D3-Soldier1-Sol1-1
11008: PPUSH
11009: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11013: LD_EXP 14
11017: PPUSH
11018: LD_STRING D3-Soldier1-JMM-1
11020: PPUSH
11021: CALL_OW 88
// joined := true ;
11025: LD_ADDR_VAR 0 5
11029: PUSH
11030: LD_INT 1
11032: ST_TO_ADDR
// end else
11033: GO 11071
// begin Say ( Brown , D4-Soldier2-Sol1-1 ) ;
11035: LD_EXP 28
11039: PPUSH
11040: LD_STRING D4-Soldier2-Sol1-1
11042: PPUSH
11043: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11047: LD_EXP 14
11051: PPUSH
11052: LD_STRING D4-Soldier1-JMM-1
11054: PPUSH
11055: CALL_OW 88
// Say ( Brown , D4-Soldier2-Sol1-2 ) ;
11059: LD_EXP 28
11063: PPUSH
11064: LD_STRING D4-Soldier2-Sol1-2
11066: PPUSH
11067: CALL_OW 88
// end ; end else
11071: GO 12055
// if unit = Donaldson then
11073: LD_VAR 0 1
11077: PUSH
11078: LD_EXP 24
11082: EQUAL
11083: IFFALSE 11179
// begin if Donaldson in selected or gamma_commander = 1 then
11085: LD_EXP 24
11089: PUSH
11090: LD_EXP 3
11094: IN
11095: PUSH
11096: LD_EXP 10
11100: PUSH
11101: LD_INT 1
11103: EQUAL
11104: OR
11105: IFFALSE 11141
// begin Say ( Donaldson , D3-Soldier2-FSol2-1 ) ;
11107: LD_EXP 24
11111: PPUSH
11112: LD_STRING D3-Soldier2-FSol2-1
11114: PPUSH
11115: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11119: LD_EXP 14
11123: PPUSH
11124: LD_STRING D3-Soldier2-JMM-1
11126: PPUSH
11127: CALL_OW 88
// joined := true ;
11131: LD_ADDR_VAR 0 5
11135: PUSH
11136: LD_INT 1
11138: ST_TO_ADDR
// end else
11139: GO 11177
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
11141: LD_VAR 0 1
11145: PPUSH
11146: LD_STRING D4-Soldier1-FSol1-1
11148: PPUSH
11149: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
11153: LD_EXP 14
11157: PPUSH
11158: LD_STRING D4-Soldier1-JMM-1
11160: PPUSH
11161: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
11165: LD_VAR 0 1
11169: PPUSH
11170: LD_STRING D4-Soldier1-FSol1-2
11172: PPUSH
11173: CALL_OW 88
// end ; end else
11177: GO 12055
// if unit = Cyrus then
11179: LD_VAR 0 1
11183: PUSH
11184: LD_EXP 26
11188: EQUAL
11189: IFFALSE 11263
// begin if Cyrus in selected then
11191: LD_EXP 26
11195: PUSH
11196: LD_EXP 3
11200: IN
11201: IFFALSE 11237
// begin Say ( Cyrus , D3-Cyrus-Cyrus-1 ) ;
11203: LD_EXP 26
11207: PPUSH
11208: LD_STRING D3-Cyrus-Cyrus-1
11210: PPUSH
11211: CALL_OW 88
// Say ( JMM , D3-Cyrus-JMM-1 ) ;
11215: LD_EXP 14
11219: PPUSH
11220: LD_STRING D3-Cyrus-JMM-1
11222: PPUSH
11223: CALL_OW 88
// joined := true ;
11227: LD_ADDR_VAR 0 5
11231: PUSH
11232: LD_INT 1
11234: ST_TO_ADDR
// end else
11235: GO 11261
// begin Say ( Cyrus , D4-Cyrus-Cyrus-1 ) ;
11237: LD_EXP 26
11241: PPUSH
11242: LD_STRING D4-Cyrus-Cyrus-1
11244: PPUSH
11245: CALL_OW 88
// Say ( JMM , D4-Cyrus-JMM-1 ) ;
11249: LD_EXP 14
11253: PPUSH
11254: LD_STRING D4-Cyrus-JMM-1
11256: PPUSH
11257: CALL_OW 88
// end ; end else
11261: GO 12055
// if unit = Bobby then
11263: LD_VAR 0 1
11267: PUSH
11268: LD_EXP 25
11272: EQUAL
11273: IFFALSE 11359
// begin if Bobby in selected then
11275: LD_EXP 25
11279: PUSH
11280: LD_EXP 3
11284: IN
11285: IFFALSE 11321
// begin Say ( Bobby , D3-Bobby-Bobby-1 ) ;
11287: LD_EXP 25
11291: PPUSH
11292: LD_STRING D3-Bobby-Bobby-1
11294: PPUSH
11295: CALL_OW 88
// Say ( JMM , D3-Bobby-JMM-1 ) ;
11299: LD_EXP 14
11303: PPUSH
11304: LD_STRING D3-Bobby-JMM-1
11306: PPUSH
11307: CALL_OW 88
// joined := true ;
11311: LD_ADDR_VAR 0 5
11315: PUSH
11316: LD_INT 1
11318: ST_TO_ADDR
// end else
11319: GO 11357
// begin Say ( Bobby , D4-Bobby-Bobby-1 ) ;
11321: LD_EXP 25
11325: PPUSH
11326: LD_STRING D4-Bobby-Bobby-1
11328: PPUSH
11329: CALL_OW 88
// Say ( JMM , D4-Bobby-JMM-1 ) ;
11333: LD_EXP 14
11337: PPUSH
11338: LD_STRING D4-Bobby-JMM-1
11340: PPUSH
11341: CALL_OW 88
// Say ( Bobby , D4-Bobby-Bobby-2 ) ;
11345: LD_EXP 25
11349: PPUSH
11350: LD_STRING D4-Bobby-Bobby-2
11352: PPUSH
11353: CALL_OW 88
// end ; end else
11357: GO 12055
// if unit = Cornel then
11359: LD_VAR 0 1
11363: PUSH
11364: LD_EXP 31
11368: EQUAL
11369: IFFALSE 11467
// begin if Cornel in selected then
11371: LD_EXP 31
11375: PUSH
11376: LD_EXP 3
11380: IN
11381: IFFALSE 11429
// begin Say ( Cornel , D3-Mark-Corn-1 ) ;
11383: LD_EXP 31
11387: PPUSH
11388: LD_STRING D3-Mark-Corn-1
11390: PPUSH
11391: CALL_OW 88
// Say ( JMM , D3-Mark-JMM-1 ) ;
11395: LD_EXP 14
11399: PPUSH
11400: LD_STRING D3-Mark-JMM-1
11402: PPUSH
11403: CALL_OW 88
// Say ( Cornel , D3-Mark-Corn-2 ) ;
11407: LD_EXP 31
11411: PPUSH
11412: LD_STRING D3-Mark-Corn-2
11414: PPUSH
11415: CALL_OW 88
// joined := true ;
11419: LD_ADDR_VAR 0 5
11423: PUSH
11424: LD_INT 1
11426: ST_TO_ADDR
// end else
11427: GO 11465
// begin Say ( Cornel , D4-Mark-Corn-1 ) ;
11429: LD_EXP 31
11433: PPUSH
11434: LD_STRING D4-Mark-Corn-1
11436: PPUSH
11437: CALL_OW 88
// Say ( JMM , D3-Joan-JMM-1 ) ;
11441: LD_EXP 14
11445: PPUSH
11446: LD_STRING D3-Joan-JMM-1
11448: PPUSH
11449: CALL_OW 88
// Say ( Cornel , D4-Mark-Corn-2 ) ;
11453: LD_EXP 31
11457: PPUSH
11458: LD_STRING D4-Mark-Corn-2
11460: PPUSH
11461: CALL_OW 88
// end ; end else
11465: GO 12055
// if unit = Gary then
11467: LD_VAR 0 1
11471: PUSH
11472: LD_EXP 32
11476: EQUAL
11477: IFFALSE 11561
// begin if Gary in selected then
11479: LD_EXP 32
11483: PUSH
11484: LD_EXP 3
11488: IN
11489: IFFALSE 11525
// begin Say ( Gary , D3-Gary-Gary-1 ) ;
11491: LD_EXP 32
11495: PPUSH
11496: LD_STRING D3-Gary-Gary-1
11498: PPUSH
11499: CALL_OW 88
// Say ( JMM , D3-Gary-JMM-1 ) ;
11503: LD_EXP 14
11507: PPUSH
11508: LD_STRING D3-Gary-JMM-1
11510: PPUSH
11511: CALL_OW 88
// joined := true ;
11515: LD_ADDR_VAR 0 5
11519: PUSH
11520: LD_INT 1
11522: ST_TO_ADDR
// end else
11523: GO 11559
// begin Say ( Gary , D4-Gary-Gary-1 ) ;
11525: LD_EXP 32
11529: PPUSH
11530: LD_STRING D4-Gary-Gary-1
11532: PPUSH
11533: CALL_OW 88
// SetSide ( Gary , 1 ) ;
11537: LD_EXP 32
11541: PPUSH
11542: LD_INT 1
11544: PPUSH
11545: CALL_OW 235
// DialogueOff ;
11549: CALL_OW 7
// InGameOff ;
11553: CALL_OW 9
// exit ;
11557: GO 12247
// end ; end else
11559: GO 12055
// if unit = Kikuchi then
11561: LD_VAR 0 1
11565: PUSH
11566: LD_EXP 34
11570: EQUAL
11571: IFFALSE 11655
// begin if Kikuchi in selected then
11573: LD_EXP 34
11577: PUSH
11578: LD_EXP 3
11582: IN
11583: IFFALSE 11619
// begin Say ( Kikuchi , D3-Yamako-Yam-1 ) ;
11585: LD_EXP 34
11589: PPUSH
11590: LD_STRING D3-Yamako-Yam-1
11592: PPUSH
11593: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11597: LD_EXP 14
11601: PPUSH
11602: LD_STRING D3-Soldier2-JMM-1
11604: PPUSH
11605: CALL_OW 88
// joined := true ;
11609: LD_ADDR_VAR 0 5
11613: PUSH
11614: LD_INT 1
11616: ST_TO_ADDR
// end else
11617: GO 11653
// begin Say ( Kikuchi , D4-Yamako-Yam-1 ) ;
11619: LD_EXP 34
11623: PPUSH
11624: LD_STRING D4-Yamako-Yam-1
11626: PPUSH
11627: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
11631: LD_EXP 34
11635: PPUSH
11636: LD_INT 1
11638: PPUSH
11639: CALL_OW 235
// DialogueOff ;
11643: CALL_OW 7
// InGameOff ;
11647: CALL_OW 9
// exit ;
11651: GO 12247
// end ; end else
11653: GO 12055
// if unit = Gladstone then
11655: LD_VAR 0 1
11659: PUSH
11660: LD_EXP 29
11664: EQUAL
11665: IFFALSE 11739
// begin if Gladstone in selected then
11667: LD_EXP 29
11671: PUSH
11672: LD_EXP 3
11676: IN
11677: IFFALSE 11713
// begin joined := true ;
11679: LD_ADDR_VAR 0 5
11683: PUSH
11684: LD_INT 1
11686: ST_TO_ADDR
// Say ( JMM , D3-Tim-JMM-1 ) ;
11687: LD_EXP 14
11691: PPUSH
11692: LD_STRING D3-Tim-JMM-1
11694: PPUSH
11695: CALL_OW 88
// Say ( Gladstone , D3-Tim-Glad-1 ) ;
11699: LD_EXP 29
11703: PPUSH
11704: LD_STRING D3-Tim-Glad-1
11706: PPUSH
11707: CALL_OW 88
// end else
11711: GO 11737
// begin Say ( JMM , D4-Tim-JMM-1 ) ;
11713: LD_EXP 14
11717: PPUSH
11718: LD_STRING D4-Tim-JMM-1
11720: PPUSH
11721: CALL_OW 88
// Say ( Gladstone , D4-Tim-Glad-1 ) ;
11725: LD_EXP 29
11729: PPUSH
11730: LD_STRING D4-Tim-Glad-1
11732: PPUSH
11733: CALL_OW 88
// end ; end else
11737: GO 12055
// if unit = Denis then
11739: LD_VAR 0 1
11743: PUSH
11744: LD_EXP 27
11748: EQUAL
11749: IFFALSE 11785
// begin joined := true ;
11751: LD_ADDR_VAR 0 5
11755: PUSH
11756: LD_INT 1
11758: ST_TO_ADDR
// Say ( Denis , D3-Denis-Den-1 ) ;
11759: LD_EXP 27
11763: PPUSH
11764: LD_STRING D3-Denis-Den-1
11766: PPUSH
11767: CALL_OW 88
// Say ( JMM , D3-Denis-JMM-1 ) ;
11771: LD_EXP 14
11775: PPUSH
11776: LD_STRING D3-Denis-JMM-1
11778: PPUSH
11779: CALL_OW 88
// end else
11783: GO 12055
// if unit = Simms then
11785: LD_VAR 0 1
11789: PUSH
11790: LD_EXP 35
11794: EQUAL
11795: IFFALSE 11831
// begin joined := true ;
11797: LD_ADDR_VAR 0 5
11801: PUSH
11802: LD_INT 1
11804: ST_TO_ADDR
// Say ( Simms , D3-Simms-Sim-1 ) ;
11805: LD_EXP 35
11809: PPUSH
11810: LD_STRING D3-Simms-Sim-1
11812: PPUSH
11813: CALL_OW 88
// Say ( JMM , D3-Simms-JMM-1 ) ;
11817: LD_EXP 14
11821: PPUSH
11822: LD_STRING D3-Simms-JMM-1
11824: PPUSH
11825: CALL_OW 88
// end else
11829: GO 12055
// if unit = DeltaDoctor then
11831: LD_VAR 0 1
11835: PUSH
11836: LD_EXP 37
11840: EQUAL
11841: IFFALSE 11877
// begin joined := true ;
11843: LD_ADDR_VAR 0 5
11847: PUSH
11848: LD_INT 1
11850: ST_TO_ADDR
// Say ( DeltaDoctor , D3-Soldier1-Sol1-1 ) ;
11851: LD_EXP 37
11855: PPUSH
11856: LD_STRING D3-Soldier1-Sol1-1
11858: PPUSH
11859: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11863: LD_EXP 14
11867: PPUSH
11868: LD_STRING D3-Soldier1-JMM-1
11870: PPUSH
11871: CALL_OW 88
// end else
11875: GO 12055
// begin joined := unit in selected ;
11877: LD_ADDR_VAR 0 5
11881: PUSH
11882: LD_VAR 0 1
11886: PUSH
11887: LD_EXP 3
11891: IN
11892: ST_TO_ADDR
// if joined then
11893: LD_VAR 0 5
11897: IFFALSE 11966
// begin if GetSex ( unit ) = sex_male then
11899: LD_VAR 0 1
11903: PPUSH
11904: CALL_OW 258
11908: PUSH
11909: LD_INT 1
11911: EQUAL
11912: IFFALSE 11940
// begin Say ( unit , D3-Soldier1-Sol1-1 ) ;
11914: LD_VAR 0 1
11918: PPUSH
11919: LD_STRING D3-Soldier1-Sol1-1
11921: PPUSH
11922: CALL_OW 88
// Say ( JMM , D3-Soldier1-JMM-1 ) ;
11926: LD_EXP 14
11930: PPUSH
11931: LD_STRING D3-Soldier1-JMM-1
11933: PPUSH
11934: CALL_OW 88
// end else
11938: GO 11964
// begin Say ( unit , D3-Soldier2-FSol2-1 ) ;
11940: LD_VAR 0 1
11944: PPUSH
11945: LD_STRING D3-Soldier2-FSol2-1
11947: PPUSH
11948: CALL_OW 88
// Say ( JMM , D3-Soldier2-JMM-1 ) ;
11952: LD_EXP 14
11956: PPUSH
11957: LD_STRING D3-Soldier2-JMM-1
11959: PPUSH
11960: CALL_OW 88
// end ; end else
11964: GO 12055
// begin if GetSex ( unit ) = sex_male then
11966: LD_VAR 0 1
11970: PPUSH
11971: CALL_OW 258
11975: PUSH
11976: LD_INT 1
11978: EQUAL
11979: IFFALSE 12019
// begin Say ( unit , D4-Soldier2-Sol1-1 ) ;
11981: LD_VAR 0 1
11985: PPUSH
11986: LD_STRING D4-Soldier2-Sol1-1
11988: PPUSH
11989: CALL_OW 88
// Say ( JMM , D4-Soldier2-JMM-1 ) ;
11993: LD_EXP 14
11997: PPUSH
11998: LD_STRING D4-Soldier2-JMM-1
12000: PPUSH
12001: CALL_OW 88
// Say ( unit , D4-Soldier2-Sol2-1 ) ;
12005: LD_VAR 0 1
12009: PPUSH
12010: LD_STRING D4-Soldier2-Sol2-1
12012: PPUSH
12013: CALL_OW 88
// end else
12017: GO 12055
// begin Say ( unit , D4-Soldier1-FSol1-1 ) ;
12019: LD_VAR 0 1
12023: PPUSH
12024: LD_STRING D4-Soldier1-FSol1-1
12026: PPUSH
12027: CALL_OW 88
// Say ( JMM , D4-Soldier1-JMM-1 ) ;
12031: LD_EXP 14
12035: PPUSH
12036: LD_STRING D4-Soldier1-JMM-1
12038: PPUSH
12039: CALL_OW 88
// Say ( unit , D4-Soldier1-FSol1-2 ) ;
12043: LD_VAR 0 1
12047: PPUSH
12048: LD_STRING D4-Soldier1-FSol1-2
12050: PPUSH
12051: CALL_OW 88
// end ; end ; end ; DialogueOff ;
12055: CALL_OW 7
// InGameOff ;
12059: CALL_OW 9
// if building then
12063: LD_VAR 0 3
12067: IFFALSE 12168
// begin SetSide ( JMM , side ) ;
12069: LD_EXP 14
12073: PPUSH
12074: LD_VAR 0 4
12078: PPUSH
12079: CALL_OW 235
// ComExitBuilding ( JMM ) ;
12083: LD_EXP 14
12087: PPUSH
12088: CALL_OW 122
// if joined then
12092: LD_VAR 0 5
12096: IFFALSE 12135
// begin SetSide ( unit , side ) ;
12098: LD_VAR 0 1
12102: PPUSH
12103: LD_VAR 0 4
12107: PPUSH
12108: CALL_OW 235
// SetSide ( building , 1 ) ;
12112: LD_VAR 0 3
12116: PPUSH
12117: LD_INT 1
12119: PPUSH
12120: CALL_OW 235
// ComExitBuilding ( unit ) ;
12124: LD_VAR 0 1
12128: PPUSH
12129: CALL_OW 122
// end else
12133: GO 12166
// begin wait ( 0 0$10 ) ;
12135: LD_INT 350
12137: PPUSH
12138: CALL_OW 67
// SetSide ( unit , 1 ) ;
12142: LD_VAR 0 1
12146: PPUSH
12147: LD_INT 1
12149: PPUSH
12150: CALL_OW 235
// SetSide ( building , 1 ) ;
12154: LD_VAR 0 3
12158: PPUSH
12159: LD_INT 1
12161: PPUSH
12162: CALL_OW 235
// end ; end else
12166: GO 12247
// begin ComStop ( [ JMM , unit ] ) ;
12168: LD_EXP 14
12172: PUSH
12173: LD_VAR 0 1
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: PPUSH
12182: CALL_OW 141
// if joined then
12186: LD_VAR 0 5
12190: IFFALSE 12208
// SetSide ( unit , side ) else
12192: LD_VAR 0 1
12196: PPUSH
12197: LD_VAR 0 4
12201: PPUSH
12202: CALL_OW 235
12206: GO 12247
// begin repeat wait ( 0 0$1 ) ;
12208: LD_INT 35
12210: PPUSH
12211: CALL_OW 67
// until GetDistUnits ( JMM , unit ) > 11 ;
12215: LD_EXP 14
12219: PPUSH
12220: LD_VAR 0 1
12224: PPUSH
12225: CALL_OW 296
12229: PUSH
12230: LD_INT 11
12232: GREATER
12233: IFFALSE 12208
// SetSide ( unit , 1 ) ;
12235: LD_VAR 0 1
12239: PPUSH
12240: LD_INT 1
12242: PPUSH
12243: CALL_OW 235
// end ; end ; end ;
12247: LD_VAR 0 2
12251: RET
// every 0 0$01 trigger IsInUnit ( JMM ) = amlab do
12252: LD_EXP 14
12256: PPUSH
12257: CALL_OW 310
12261: PUSH
12262: LD_INT 47
12264: EQUAL
12265: IFFALSE 12333
12267: GO 12269
12269: DISABLE
// begin ChangeMissionObjectives ( M1a ) ;
12270: LD_STRING M1a
12272: PPUSH
12273: CALL_OW 337
// SetTech ( tech_Soporific , 7 , state_researched ) ;
12277: LD_INT 13
12279: PPUSH
12280: LD_INT 7
12282: PPUSH
12283: LD_INT 2
12285: PPUSH
12286: CALL_OW 322
// SetTech ( tech_SpacAnom , 7 , state_researched ) ;
12290: LD_INT 29
12292: PPUSH
12293: LD_INT 7
12295: PPUSH
12296: LD_INT 2
12298: PPUSH
12299: CALL_OW 322
// SetClass ( JMM , class_bazooker ) ;
12303: LD_EXP 14
12307: PPUSH
12308: LD_INT 9
12310: PPUSH
12311: CALL_OW 336
// can_escape := true ;
12315: LD_ADDR_EXP 6
12319: PUSH
12320: LD_INT 1
12322: ST_TO_ADDR
// SetAreaMapShow ( escape_area , 1 ) ;
12323: LD_INT 19
12325: PPUSH
12326: LD_INT 1
12328: PPUSH
12329: CALL_OW 424
// end ;
12333: END
// every 0 0$1 trigger GetLives ( Powell ) < 999 do
12334: LD_EXP 16
12338: PPUSH
12339: CALL_OW 256
12343: PUSH
12344: LD_INT 999
12346: LESS
12347: IFFALSE 12398
12349: GO 12351
12351: DISABLE
// begin enable ;
12352: ENABLE
// if HexInfo ( 25 , 48 ) = Powell then
12353: LD_INT 25
12355: PPUSH
12356: LD_INT 48
12358: PPUSH
12359: CALL_OW 428
12363: PUSH
12364: LD_EXP 16
12368: EQUAL
12369: IFFALSE 12383
// begin RemoveUnit ( Powell ) ;
12371: LD_EXP 16
12375: PPUSH
12376: CALL_OW 64
// disable ;
12380: DISABLE
// end else
12381: GO 12398
// ComMoveXY ( Powell , 25 , 48 ) ;
12383: LD_EXP 16
12387: PPUSH
12388: LD_INT 25
12390: PPUSH
12391: LD_INT 48
12393: PPUSH
12394: CALL_OW 111
// end ;
12398: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do var i ;
12399: LD_INT 22
12401: PUSH
12402: LD_INT 4
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PUSH
12409: LD_INT 21
12411: PUSH
12412: LD_INT 1
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PUSH
12419: LD_INT 3
12421: PUSH
12422: LD_INT 24
12424: PUSH
12425: LD_INT 990
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: LIST
12440: PPUSH
12441: CALL_OW 69
12445: PUSH
12446: LD_EXP 15
12450: DIFF
12451: IFFALSE 12595
12453: GO 12455
12455: DISABLE
12456: LD_INT 0
12458: PPUSH
// begin enable ;
12459: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 990 ] ] ] ) diff Roth do
12460: LD_ADDR_VAR 0 1
12464: PUSH
12465: LD_INT 22
12467: PUSH
12468: LD_INT 4
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 21
12477: PUSH
12478: LD_INT 1
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PUSH
12485: LD_INT 3
12487: PUSH
12488: LD_INT 24
12490: PUSH
12491: LD_INT 990
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: LIST
12506: PPUSH
12507: CALL_OW 69
12511: PUSH
12512: LD_EXP 15
12516: DIFF
12517: PUSH
12518: FOR_IN
12519: IFFALSE 12593
// begin ComFree ( i ) ;
12521: LD_VAR 0 1
12525: PPUSH
12526: CALL_OW 139
// SetSide ( i , 1 ) ;
12530: LD_VAR 0 1
12534: PPUSH
12535: LD_INT 1
12537: PPUSH
12538: CALL_OW 235
// if GetDistUnits ( i , JMM ) < 14 then
12542: LD_VAR 0 1
12546: PPUSH
12547: LD_EXP 14
12551: PPUSH
12552: CALL_OW 296
12556: PUSH
12557: LD_INT 14
12559: LESS
12560: IFFALSE 12591
// ComAgressiveMove ( i , GetX ( JMM ) , GetY ( JMM ) ) ;
12562: LD_VAR 0 1
12566: PPUSH
12567: LD_EXP 14
12571: PPUSH
12572: CALL_OW 250
12576: PPUSH
12577: LD_EXP 14
12581: PPUSH
12582: CALL_OW 251
12586: PPUSH
12587: CALL_OW 114
// end ;
12591: GO 12518
12593: POP
12594: POP
// end ;
12595: PPOPN 1
12597: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do var i ;
12598: LD_INT 22
12600: PUSH
12601: LD_INT 4
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: PUSH
12608: LD_INT 34
12610: PUSH
12611: LD_INT 12
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PPUSH
12622: CALL_OW 69
12626: IFFALSE 12708
12628: GO 12630
12630: DISABLE
12631: LD_INT 0
12633: PPUSH
// begin enable ;
12634: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_weapon , us_cargo_bay ] ] ) do
12635: LD_ADDR_VAR 0 1
12639: PUSH
12640: LD_INT 22
12642: PUSH
12643: LD_INT 4
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 34
12652: PUSH
12653: LD_INT 12
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: PPUSH
12664: CALL_OW 69
12668: PUSH
12669: FOR_IN
12670: IFFALSE 12706
// if GetDistUnits ( i , JMM ) < 6 then
12672: LD_VAR 0 1
12676: PPUSH
12677: LD_EXP 14
12681: PPUSH
12682: CALL_OW 296
12686: PUSH
12687: LD_INT 6
12689: LESS
12690: IFFALSE 12704
// SetSide ( i , 7 ) ;
12692: LD_VAR 0 1
12696: PPUSH
12697: LD_INT 7
12699: PPUSH
12700: CALL_OW 235
12704: GO 12669
12706: POP
12707: POP
// end ;
12708: PPOPN 1
12710: END
// every 0 0$01 trigger can_escape and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) do var all_taken , tmp , m1 , m2 , m3 ;
12711: LD_EXP 6
12715: PUSH
12716: LD_INT 19
12718: PPUSH
12719: LD_INT 22
12721: PUSH
12722: LD_INT 7
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: LD_INT 21
12731: PUSH
12732: LD_INT 1
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PPUSH
12743: CALL_OW 71
12747: NOT
12748: AND
12749: PUSH
12750: LD_INT 3
12752: PPUSH
12753: CALL_OW 469
12757: NOT
12758: AND
12759: PUSH
12760: LD_INT 5
12762: PPUSH
12763: CALL_OW 469
12767: NOT
12768: AND
12769: IFFALSE 14399
12771: GO 12773
12773: DISABLE
12774: LD_INT 0
12776: PPUSH
12777: PPUSH
12778: PPUSH
12779: PPUSH
12780: PPUSH
// begin m1 := false ;
12781: LD_ADDR_VAR 0 3
12785: PUSH
12786: LD_INT 0
12788: ST_TO_ADDR
// m2 := false ;
12789: LD_ADDR_VAR 0 4
12793: PUSH
12794: LD_INT 0
12796: ST_TO_ADDR
// m3 := false ;
12797: LD_ADDR_VAR 0 5
12801: PUSH
12802: LD_INT 0
12804: ST_TO_ADDR
// all_taken := ( UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 ) ;
12805: LD_ADDR_VAR 0 1
12809: PUSH
12810: LD_EXP 3
12814: PPUSH
12815: LD_INT 22
12817: PUSH
12818: LD_INT 4
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: LD_INT 21
12827: PUSH
12828: LD_INT 1
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: PPUSH
12839: CALL_OW 72
12843: PUSH
12844: LD_INT 0
12846: EQUAL
12847: ST_TO_ADDR
// if not all_taken then
12848: LD_VAR 0 1
12852: NOT
12853: IFFALSE 12994
// case query ( Q1 ) of 1 :
12855: LD_STRING Q1
12857: PPUSH
12858: CALL_OW 97
12862: PUSH
12863: LD_INT 1
12865: DOUBLE
12866: EQUAL
12867: IFTRUE 12871
12869: GO 12982
12871: POP
// begin repeat wait ( 0 0$1 ) ;
12872: LD_INT 35
12874: PPUSH
12875: CALL_OW 67
// until UnitFilter ( selected , [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 and not FilterUnitsExceptArea ( escape_area , [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) and not FindArtifact ( 3 ) and not FindArtifact ( 5 ) ;
12879: LD_EXP 3
12883: PPUSH
12884: LD_INT 22
12886: PUSH
12887: LD_INT 4
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PUSH
12894: LD_INT 21
12896: PUSH
12897: LD_INT 1
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: PPUSH
12908: CALL_OW 72
12912: PUSH
12913: LD_INT 0
12915: EQUAL
12916: PUSH
12917: LD_INT 19
12919: PPUSH
12920: LD_INT 22
12922: PUSH
12923: LD_INT 7
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 21
12932: PUSH
12933: LD_INT 1
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PPUSH
12944: CALL_OW 71
12948: NOT
12949: AND
12950: PUSH
12951: LD_INT 3
12953: PPUSH
12954: CALL_OW 469
12958: NOT
12959: AND
12960: PUSH
12961: LD_INT 5
12963: PPUSH
12964: CALL_OW 469
12968: NOT
12969: AND
12970: IFFALSE 12872
// all_taken := true ;
12972: LD_ADDR_VAR 0 1
12976: PUSH
12977: LD_INT 1
12979: ST_TO_ADDR
// end ; 2 :
12980: GO 12994
12982: LD_INT 2
12984: DOUBLE
12985: EQUAL
12986: IFTRUE 12990
12988: GO 12993
12990: POP
// ; end ;
12991: GO 12994
12993: POP
// if team_kill_counter = 0 then
12994: LD_EXP 9
12998: PUSH
12999: LD_INT 0
13001: EQUAL
13002: IFFALSE 13018
// Say ( JMM , D5-JMM-1 ) else
13004: LD_EXP 14
13008: PPUSH
13009: LD_STRING D5-JMM-1
13011: PPUSH
13012: CALL_OW 88
13016: GO 13030
// Say ( JMM , D5-JMM-1a ) ;
13018: LD_EXP 14
13022: PPUSH
13023: LD_STRING D5-JMM-1a
13025: PPUSH
13026: CALL_OW 88
// if ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) diff [ JMM , Roth ] ) >= 10 then
13030: LD_INT 22
13032: PUSH
13033: LD_INT 7
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: PUSH
13040: LD_INT 21
13042: PUSH
13043: LD_INT 1
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PUSH
13050: LD_INT 23
13052: PUSH
13053: LD_INT 1
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: LIST
13064: PPUSH
13065: CALL_OW 69
13069: PUSH
13070: LD_EXP 14
13074: PUSH
13075: LD_EXP 15
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: DIFF
13084: PUSH
13085: LD_INT 10
13087: GREATEREQUAL
13088: IFFALSE 13097
// SetAchievement ( ACH_TEAM ) ;
13090: LD_STRING ACH_TEAM
13092: PPUSH
13093: CALL_OW 543
// if not invis_used then
13097: LD_EXP 12
13101: NOT
13102: IFFALSE 13118
// begin wait ( 3 ) ;
13104: LD_INT 3
13106: PPUSH
13107: CALL_OW 67
// SetAchievement ( ACH_NOINVIS ) ;
13111: LD_STRING ACH_NOINVIS
13113: PPUSH
13114: CALL_OW 543
// end ; if not alert then
13118: LD_EXP 13
13122: NOT
13123: IFFALSE 13139
// begin wait ( 3 ) ;
13125: LD_INT 3
13127: PPUSH
13128: CALL_OW 67
// SetAchievement ( ACH_ALARM ) ;
13132: LD_STRING ACH_ALARM
13134: PPUSH
13135: CALL_OW 543
// end ; if tick < 15 15$00 then
13139: LD_OWVAR 1
13143: PUSH
13144: LD_INT 31500
13146: LESS
13147: IFFALSE 13163
// begin wait ( 3 ) ;
13149: LD_INT 3
13151: PPUSH
13152: CALL_OW 67
// SetAchievement ( ACH_ASPEED_16 ) ;
13156: LD_STRING ACH_ASPEED_16
13158: PPUSH
13159: CALL_OW 543
// end ; if all_taken then
13163: LD_VAR 0 1
13167: IFFALSE 13189
// begin AddMedal ( All , 1 ) ;
13169: LD_STRING All
13171: PPUSH
13172: LD_INT 1
13174: PPUSH
13175: CALL_OW 101
// m1 := true ;
13179: LD_ADDR_VAR 0 3
13183: PUSH
13184: LD_INT 1
13186: ST_TO_ADDR
// end else
13187: GO 13200
// AddMedal ( All , - 1 ) ;
13189: LD_STRING All
13191: PPUSH
13192: LD_INT 1
13194: NEG
13195: PPUSH
13196: CALL_OW 101
// if team_kill_counter then
13200: LD_EXP 9
13204: IFFALSE 13219
// AddMedal ( Save , - 1 ) else
13206: LD_STRING Save
13208: PPUSH
13209: LD_INT 1
13211: NEG
13212: PPUSH
13213: CALL_OW 101
13217: GO 13237
// begin AddMedal ( Save , 1 ) ;
13219: LD_STRING Save
13221: PPUSH
13222: LD_INT 1
13224: PPUSH
13225: CALL_OW 101
// m2 := true ;
13229: LD_ADDR_VAR 0 4
13233: PUSH
13234: LD_INT 1
13236: ST_TO_ADDR
// end ; if friends_kill_counter >= [ 2 , 2 , 1 , 1 ] [ Difficulty ] then
13237: LD_EXP 8
13241: PUSH
13242: LD_INT 2
13244: PUSH
13245: LD_INT 2
13247: PUSH
13248: LD_INT 1
13250: PUSH
13251: LD_INT 1
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: PUSH
13260: LD_OWVAR 67
13264: ARRAY
13265: GREATEREQUAL
13266: IFFALSE 13281
// AddMedal ( Friendship , - 1 ) else
13268: LD_STRING Friendship
13270: PPUSH
13271: LD_INT 1
13273: NEG
13274: PPUSH
13275: CALL_OW 101
13279: GO 13299
// begin AddMedal ( Friendship , 1 ) ;
13281: LD_STRING Friendship
13283: PPUSH
13284: LD_INT 1
13286: PPUSH
13287: CALL_OW 101
// m3 := true ;
13291: LD_ADDR_VAR 0 5
13295: PUSH
13296: LD_INT 1
13298: ST_TO_ADDR
// end ; if m1 and m2 and m3 and Difficulty >= 3 then
13299: LD_VAR 0 3
13303: PUSH
13304: LD_VAR 0 4
13308: AND
13309: PUSH
13310: LD_VAR 0 5
13314: AND
13315: PUSH
13316: LD_OWVAR 67
13320: PUSH
13321: LD_INT 3
13323: GREATEREQUAL
13324: AND
13325: IFFALSE 13337
// SetAchievementEX ( ACH_AMER , 16 ) ;
13327: LD_STRING ACH_AMER
13329: PPUSH
13330: LD_INT 16
13332: PPUSH
13333: CALL_OW 564
// GiveMedals ( MAIN ) ;
13337: LD_STRING MAIN
13339: PPUSH
13340: CALL_OW 102
// tmp := FilterAllUnits ( [ [ [ f_side , 7 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ] ) ;
13344: LD_ADDR_VAR 0 2
13348: PUSH
13349: LD_INT 22
13351: PUSH
13352: LD_INT 7
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 2
13361: PUSH
13362: LD_INT 25
13364: PUSH
13365: LD_INT 1
13367: PUSH
13368: EMPTY
13369: LIST
13370: LIST
13371: PUSH
13372: LD_INT 25
13374: PUSH
13375: LD_INT 2
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PUSH
13382: LD_INT 25
13384: PUSH
13385: LD_INT 3
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 25
13394: PUSH
13395: LD_INT 4
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: LD_INT 25
13404: PUSH
13405: LD_INT 5
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 25
13414: PUSH
13415: LD_INT 8
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 25
13424: PUSH
13425: LD_INT 9
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: EMPTY
13447: LIST
13448: PPUSH
13449: CALL_OW 69
13453: ST_TO_ADDR
// RewardPeople ( tmp ^ Roth ) ;
13454: LD_VAR 0 2
13458: PUSH
13459: LD_EXP 15
13463: ADD
13464: PPUSH
13465: CALL_OW 43
// SaveCharacters ( JMM , 12a_JMM ) ;
13469: LD_EXP 14
13473: PPUSH
13474: LD_STRING 12a_JMM
13476: PPUSH
13477: CALL_OW 38
// if IsLive ( Roth ) then
13481: LD_EXP 15
13485: PPUSH
13486: CALL_OW 300
13490: IFFALSE 13504
// SaveCharacters ( Roth , 12a_Roth ) ;
13492: LD_EXP 15
13496: PPUSH
13497: LD_STRING 12a_Roth
13499: PPUSH
13500: CALL_OW 38
// if Lisa in tmp then
13504: LD_EXP 23
13508: PUSH
13509: LD_VAR 0 2
13513: IN
13514: IFFALSE 13530
// SaveCharacters ( Lisa , 12a_Lisa ) else
13516: LD_EXP 23
13520: PPUSH
13521: LD_STRING 12a_Lisa
13523: PPUSH
13524: CALL_OW 38
13528: GO 13548
// if Lisa then
13530: LD_EXP 23
13534: IFFALSE 13548
// SaveCharacters ( Lisa , 12p_Lisa ) ;
13536: LD_EXP 23
13540: PPUSH
13541: LD_STRING 12p_Lisa
13543: PPUSH
13544: CALL_OW 38
// if Donaldson in tmp then
13548: LD_EXP 24
13552: PUSH
13553: LD_VAR 0 2
13557: IN
13558: IFFALSE 13574
// SaveCharacters ( Donaldson , 12a_Donaldson ) else
13560: LD_EXP 24
13564: PPUSH
13565: LD_STRING 12a_Donaldson
13567: PPUSH
13568: CALL_OW 38
13572: GO 13592
// if Donaldson then
13574: LD_EXP 24
13578: IFFALSE 13592
// SaveCharacters ( Donaldson , 12p_Donaldson ) ;
13580: LD_EXP 24
13584: PPUSH
13585: LD_STRING 12p_Donaldson
13587: PPUSH
13588: CALL_OW 38
// if Bobby in tmp then
13592: LD_EXP 25
13596: PUSH
13597: LD_VAR 0 2
13601: IN
13602: IFFALSE 13618
// SaveCharacters ( Bobby , 12a_Bobby ) else
13604: LD_EXP 25
13608: PPUSH
13609: LD_STRING 12a_Bobby
13611: PPUSH
13612: CALL_OW 38
13616: GO 13636
// if Bobby then
13618: LD_EXP 25
13622: IFFALSE 13636
// SaveCharacters ( Bobby , 12p_Bobby ) ;
13624: LD_EXP 25
13628: PPUSH
13629: LD_STRING 12p_Bobby
13631: PPUSH
13632: CALL_OW 38
// if Cyrus in tmp then
13636: LD_EXP 26
13640: PUSH
13641: LD_VAR 0 2
13645: IN
13646: IFFALSE 13662
// SaveCharacters ( Cyrus , 12a_Cyrus ) else
13648: LD_EXP 26
13652: PPUSH
13653: LD_STRING 12a_Cyrus
13655: PPUSH
13656: CALL_OW 38
13660: GO 13680
// if Cyrus then
13662: LD_EXP 26
13666: IFFALSE 13680
// SaveCharacters ( Cyrus , 12p_Cyrus ) ;
13668: LD_EXP 26
13672: PPUSH
13673: LD_STRING 12p_Cyrus
13675: PPUSH
13676: CALL_OW 38
// if Denis in tmp then
13680: LD_EXP 27
13684: PUSH
13685: LD_VAR 0 2
13689: IN
13690: IFFALSE 13704
// SaveCharacters ( Denis , 12a_Denis ) ;
13692: LD_EXP 27
13696: PPUSH
13697: LD_STRING 12a_Denis
13699: PPUSH
13700: CALL_OW 38
// if Brown in tmp then
13704: LD_EXP 28
13708: PUSH
13709: LD_VAR 0 2
13713: IN
13714: IFFALSE 13730
// SaveCharacters ( Brown , 12a_Brown ) else
13716: LD_EXP 28
13720: PPUSH
13721: LD_STRING 12a_Brown
13723: PPUSH
13724: CALL_OW 38
13728: GO 13754
// if Brown in tmp then
13730: LD_EXP 28
13734: PUSH
13735: LD_VAR 0 2
13739: IN
13740: IFFALSE 13754
// SaveCharacters ( Brown , 12p_Brown ) ;
13742: LD_EXP 28
13746: PPUSH
13747: LD_STRING 12p_Brown
13749: PPUSH
13750: CALL_OW 38
// if Gladstone in tmp then
13754: LD_EXP 29
13758: PUSH
13759: LD_VAR 0 2
13763: IN
13764: IFFALSE 13780
// SaveCharacters ( Gladstone , 12a_Gladstone ) else
13766: LD_EXP 29
13770: PPUSH
13771: LD_STRING 12a_Gladstone
13773: PPUSH
13774: CALL_OW 38
13778: GO 13798
// if Gladstone then
13780: LD_EXP 29
13784: IFFALSE 13798
// SaveCharacters ( Gladstone , 12p_Gladstone ) ;
13786: LD_EXP 29
13790: PPUSH
13791: LD_STRING 12p_Gladstone
13793: PPUSH
13794: CALL_OW 38
// if Houten in tmp then
13798: LD_EXP 30
13802: PUSH
13803: LD_VAR 0 2
13807: IN
13808: IFFALSE 13824
// SaveCharacters ( Houten , 12a_Houten ) else
13810: LD_EXP 30
13814: PPUSH
13815: LD_STRING 12a_Houten
13817: PPUSH
13818: CALL_OW 38
13822: GO 13842
// if Houten then
13824: LD_EXP 30
13828: IFFALSE 13842
// SaveCharacters ( Houten , 12p_Houten ) ;
13830: LD_EXP 30
13834: PPUSH
13835: LD_STRING 12p_Houten
13837: PPUSH
13838: CALL_OW 38
// if Cornel in tmp then
13842: LD_EXP 31
13846: PUSH
13847: LD_VAR 0 2
13851: IN
13852: IFFALSE 13868
// SaveCharacters ( Cornel , 12a_Cornell ) else
13854: LD_EXP 31
13858: PPUSH
13859: LD_STRING 12a_Cornell
13861: PPUSH
13862: CALL_OW 38
13866: GO 13886
// if Cornel then
13868: LD_EXP 31
13872: IFFALSE 13886
// SaveCharacters ( Cornel , 12p_Cornell ) ;
13874: LD_EXP 31
13878: PPUSH
13879: LD_STRING 12p_Cornell
13881: PPUSH
13882: CALL_OW 38
// if Gary in tmp then
13886: LD_EXP 32
13890: PUSH
13891: LD_VAR 0 2
13895: IN
13896: IFFALSE 13912
// SaveCharacters ( Gary , 12a_Gary ) else
13898: LD_EXP 32
13902: PPUSH
13903: LD_STRING 12a_Gary
13905: PPUSH
13906: CALL_OW 38
13910: GO 13930
// if Gary then
13912: LD_EXP 32
13916: IFFALSE 13930
// SaveCharacters ( Gary , 12p_Gary ) ;
13918: LD_EXP 32
13922: PPUSH
13923: LD_STRING 12p_Gary
13925: PPUSH
13926: CALL_OW 38
// if Frank in tmp then
13930: LD_EXP 33
13934: PUSH
13935: LD_VAR 0 2
13939: IN
13940: IFFALSE 13954
// SaveCharacters ( Frank , 12a_Frank ) ;
13942: LD_EXP 33
13946: PPUSH
13947: LD_STRING 12a_Frank
13949: PPUSH
13950: CALL_OW 38
// if Kikuchi in tmp then
13954: LD_EXP 34
13958: PUSH
13959: LD_VAR 0 2
13963: IN
13964: IFFALSE 13980
// SaveCharacters ( Kikuchi , 12a_Kikuchi ) else
13966: LD_EXP 34
13970: PPUSH
13971: LD_STRING 12a_Kikuchi
13973: PPUSH
13974: CALL_OW 38
13978: GO 13998
// if Kikuchi then
13980: LD_EXP 34
13984: IFFALSE 13998
// SaveCharacters ( Kikuchi , 12p_Kikuchi ) ;
13986: LD_EXP 34
13990: PPUSH
13991: LD_STRING 12p_Kikuchi
13993: PPUSH
13994: CALL_OW 38
// if Simms in tmp then
13998: LD_EXP 35
14002: PUSH
14003: LD_VAR 0 2
14007: IN
14008: IFFALSE 14022
// SaveCharacters ( Simms , 12a_Simms ) ;
14010: LD_EXP 35
14014: PPUSH
14015: LD_STRING 12a_Simms
14017: PPUSH
14018: CALL_OW 38
// if Joan in tmp then
14022: LD_EXP 36
14026: PUSH
14027: LD_VAR 0 2
14031: IN
14032: IFFALSE 14046
// SaveCharacters ( Joan , 12a_Joan ) ;
14034: LD_EXP 36
14038: PPUSH
14039: LD_STRING 12a_Joan
14041: PPUSH
14042: CALL_OW 38
// if DeltaDoctor in tmp then
14046: LD_EXP 37
14050: PUSH
14051: LD_VAR 0 2
14055: IN
14056: IFFALSE 14070
// SaveCharacters ( DeltaDoctor , 12a_DeltaDoctor ) ;
14058: LD_EXP 37
14062: PPUSH
14063: LD_STRING 12a_DeltaDoctor
14065: PPUSH
14066: CALL_OW 38
// tmp := tmp diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor ] ;
14070: LD_ADDR_VAR 0 2
14074: PUSH
14075: LD_VAR 0 2
14079: PUSH
14080: LD_EXP 14
14084: PUSH
14085: LD_EXP 15
14089: PUSH
14090: LD_EXP 23
14094: PUSH
14095: LD_EXP 24
14099: PUSH
14100: LD_EXP 25
14104: PUSH
14105: LD_EXP 26
14109: PUSH
14110: LD_EXP 27
14114: PUSH
14115: LD_EXP 28
14119: PUSH
14120: LD_EXP 29
14124: PUSH
14125: LD_EXP 30
14129: PUSH
14130: LD_EXP 31
14134: PUSH
14135: LD_EXP 32
14139: PUSH
14140: LD_EXP 33
14144: PUSH
14145: LD_EXP 34
14149: PUSH
14150: LD_EXP 35
14154: PUSH
14155: LD_EXP 36
14159: PUSH
14160: LD_EXP 37
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: DIFF
14184: ST_TO_ADDR
// if tmp then
14185: LD_VAR 0 2
14189: IFFALSE 14203
// SaveCharacters ( tmp , 12a_others ) ;
14191: LD_VAR 0 2
14195: PPUSH
14196: LD_STRING 12a_others
14198: PPUSH
14199: CALL_OW 38
// tmp := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ] ) diff [ JMM , Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Powell ] ;
14203: LD_ADDR_VAR 0 2
14207: PUSH
14208: LD_INT 21
14210: PUSH
14211: LD_INT 1
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PUSH
14218: LD_INT 23
14220: PUSH
14221: LD_INT 1
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PUSH
14228: LD_INT 2
14230: PUSH
14231: LD_INT 22
14233: PUSH
14234: LD_INT 1
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PUSH
14241: LD_INT 22
14243: PUSH
14244: LD_INT 4
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: LIST
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: LIST
14260: PPUSH
14261: CALL_OW 69
14265: PUSH
14266: LD_EXP 14
14270: PUSH
14271: LD_EXP 15
14275: PUSH
14276: LD_EXP 23
14280: PUSH
14281: LD_EXP 24
14285: PUSH
14286: LD_EXP 25
14290: PUSH
14291: LD_EXP 26
14295: PUSH
14296: LD_EXP 27
14300: PUSH
14301: LD_EXP 28
14305: PUSH
14306: LD_EXP 29
14310: PUSH
14311: LD_EXP 30
14315: PUSH
14316: LD_EXP 31
14320: PUSH
14321: LD_EXP 32
14325: PUSH
14326: LD_EXP 33
14330: PUSH
14331: LD_EXP 34
14335: PUSH
14336: LD_EXP 35
14340: PUSH
14341: LD_EXP 36
14345: PUSH
14346: LD_EXP 37
14350: PUSH
14351: LD_EXP 16
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: DIFF
14376: ST_TO_ADDR
// if tmp then
14377: LD_VAR 0 2
14381: IFFALSE 14395
// SaveCharacters ( tmp , 12p_others ) ;
14383: LD_VAR 0 2
14387: PPUSH
14388: LD_STRING 12p_others
14390: PPUSH
14391: CALL_OW 38
// YouWin ;
14395: CALL_OW 103
// end ; end_of_file
14399: PPOPN 5
14401: END
// on SailEvent ( event ) do var tmp ;
14402: LD_INT 0
14404: PPUSH
// begin if event = 1 then
14405: LD_VAR 0 1
14409: PUSH
14410: LD_INT 1
14412: EQUAL
14413: IFFALSE 14486
// begin if not mobile_patrol then
14415: LD_EXP 17
14419: NOT
14420: IFFALSE 14424
// exit ;
14422: GO 14486
// tmp := mobile_patrol [ mobile_patrol ] ;
14424: LD_ADDR_VAR 0 2
14428: PUSH
14429: LD_EXP 17
14433: PUSH
14434: LD_EXP 17
14438: ARRAY
14439: ST_TO_ADDR
// mobile_patrol := Delete ( mobile_patrol , mobile_patrol ) ;
14440: LD_ADDR_EXP 17
14444: PUSH
14445: LD_EXP 17
14449: PPUSH
14450: LD_EXP 17
14454: PPUSH
14455: CALL_OW 3
14459: ST_TO_ADDR
// Patrol ( tmp , mobile_points [ mobile_patrol + 1 ] , [ ] ) ;
14460: LD_VAR 0 2
14464: PPUSH
14465: LD_EXP 18
14469: PUSH
14470: LD_EXP 17
14474: PUSH
14475: LD_INT 1
14477: PLUS
14478: ARRAY
14479: PPUSH
14480: EMPTY
14481: PPUSH
14482: CALL 6669 0 3
// end ; end ;
14486: PPOPN 2
14488: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
14489: LD_VAR 0 1
14493: PPUSH
14494: CALL 29519 0 1
// if un = JMM then
14498: LD_VAR 0 1
14502: PUSH
14503: LD_EXP 14
14507: EQUAL
14508: IFFALSE 14517
// YouLost ( JMM ) ;
14510: LD_STRING JMM
14512: PPUSH
14513: CALL_OW 104
// if GetSide ( un ) = 7 and GetWeapon ( un ) = us_cargo_bay then
14517: LD_VAR 0 1
14521: PPUSH
14522: CALL_OW 255
14526: PUSH
14527: LD_INT 7
14529: EQUAL
14530: PUSH
14531: LD_VAR 0 1
14535: PPUSH
14536: CALL_OW 264
14540: PUSH
14541: LD_INT 12
14543: EQUAL
14544: AND
14545: IFFALSE 14554
// YouLost ( Artifact ) ;
14547: LD_STRING Artifact
14549: PPUSH
14550: CALL_OW 104
// if ( GetSide ( un ) = 7 and GetType ( un ) = unit_human ) or un = Roth then
14554: LD_VAR 0 1
14558: PPUSH
14559: CALL_OW 255
14563: PUSH
14564: LD_INT 7
14566: EQUAL
14567: PUSH
14568: LD_VAR 0 1
14572: PPUSH
14573: CALL_OW 247
14577: PUSH
14578: LD_INT 1
14580: EQUAL
14581: AND
14582: PUSH
14583: LD_VAR 0 1
14587: PUSH
14588: LD_EXP 15
14592: EQUAL
14593: OR
14594: IFFALSE 14610
// team_kill_counter := team_kill_counter + 1 ;
14596: LD_ADDR_EXP 9
14600: PUSH
14601: LD_EXP 9
14605: PUSH
14606: LD_INT 1
14608: PLUS
14609: ST_TO_ADDR
// if GetSide ( un ) = 1 and GetType ( un ) = unit_human then
14610: LD_VAR 0 1
14614: PPUSH
14615: CALL_OW 255
14619: PUSH
14620: LD_INT 1
14622: EQUAL
14623: PUSH
14624: LD_VAR 0 1
14628: PPUSH
14629: CALL_OW 247
14633: PUSH
14634: LD_INT 1
14636: EQUAL
14637: AND
14638: IFFALSE 14654
// friends_kill_counter := friends_kill_counter + 1 ;
14640: LD_ADDR_EXP 8
14644: PUSH
14645: LD_EXP 8
14649: PUSH
14650: LD_INT 1
14652: PLUS
14653: ST_TO_ADDR
// if GetSide ( un ) <> 1 then
14654: LD_VAR 0 1
14658: PPUSH
14659: CALL_OW 255
14663: PUSH
14664: LD_INT 1
14666: NONEQUAL
14667: IFFALSE 14671
// exit ;
14669: GO 14748
// if GetControl ( un ) = control_remote then
14671: LD_VAR 0 1
14675: PPUSH
14676: CALL_OW 263
14680: PUSH
14681: LD_INT 2
14683: EQUAL
14684: IFFALSE 14702
// defenders := defenders diff un ;
14686: LD_ADDR_EXP 20
14690: PUSH
14691: LD_EXP 20
14695: PUSH
14696: LD_VAR 0 1
14700: DIFF
14701: ST_TO_ADDR
// if not un in defenders then
14702: LD_VAR 0 1
14706: PUSH
14707: LD_EXP 20
14711: IN
14712: NOT
14713: IFFALSE 14748
// begin defcon := [ GetX ( un ) , GetY ( un ) ] ;
14715: LD_ADDR_EXP 21
14719: PUSH
14720: LD_VAR 0 1
14724: PPUSH
14725: CALL_OW 250
14729: PUSH
14730: LD_VAR 0 1
14734: PPUSH
14735: CALL_OW 251
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: ST_TO_ADDR
// Defend ;
14744: CALL 2791 0 0
// end ; end ;
14748: PPOPN 1
14750: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
14751: LD_VAR 0 1
14755: PPUSH
14756: LD_VAR 0 2
14760: PPUSH
14761: CALL 29641 0 2
// if GetSide ( veh ) <> 1 then
14765: LD_VAR 0 1
14769: PPUSH
14770: CALL_OW 255
14774: PUSH
14775: LD_INT 1
14777: NONEQUAL
14778: IFFALSE 14782
// exit ;
14780: GO 14806
// if GetControl ( veh ) = control_remote then
14782: LD_VAR 0 1
14786: PPUSH
14787: CALL_OW 263
14791: PUSH
14792: LD_INT 2
14794: EQUAL
14795: IFFALSE 14806
// Connect ( veh ) ;
14797: LD_VAR 0 1
14801: PPUSH
14802: CALL 42269 0 1
// end ;
14806: PPOPN 2
14808: END
// on UnitGoesToRed ( un ) do var i , veh ;
14809: LD_INT 0
14811: PPUSH
14812: PPUSH
// begin if GetSide ( un ) = 1 and GetControl ( un ) = control_remote then
14813: LD_VAR 0 1
14817: PPUSH
14818: CALL_OW 255
14822: PUSH
14823: LD_INT 1
14825: EQUAL
14826: PUSH
14827: LD_VAR 0 1
14831: PPUSH
14832: CALL_OW 263
14836: PUSH
14837: LD_INT 2
14839: EQUAL
14840: AND
14841: IFFALSE 14852
// ComUnlink ( un ) ;
14843: LD_VAR 0 1
14847: PPUSH
14848: CALL_OW 136
// if un = ambar0 then
14852: LD_VAR 0 1
14856: PUSH
14857: LD_INT 18
14859: EQUAL
14860: IFFALSE 14970
// begin uc_side := 1 ;
14862: LD_ADDR_OWVAR 20
14866: PUSH
14867: LD_INT 1
14869: ST_TO_ADDR
// uc_nation := 1 ;
14870: LD_ADDR_OWVAR 21
14874: PUSH
14875: LD_INT 1
14877: ST_TO_ADDR
// for i = 1 to 6 do
14878: LD_ADDR_VAR 0 2
14882: PUSH
14883: DOUBLE
14884: LD_INT 1
14886: DEC
14887: ST_TO_ADDR
14888: LD_INT 6
14890: PUSH
14891: FOR_TO
14892: IFFALSE 14968
// begin PrepareVehicle ( us_medium_tracked , engine_combustion , control_computer , us_gatling_gun , 100 ) ;
14894: LD_INT 3
14896: PPUSH
14897: LD_INT 1
14899: PPUSH
14900: LD_INT 3
14902: PPUSH
14903: LD_INT 4
14905: PPUSH
14906: LD_INT 100
14908: PPUSH
14909: CALL 39176 0 5
// veh := CreateVehicle ;
14913: LD_ADDR_VAR 0 3
14917: PUSH
14918: CALL_OW 45
14922: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
14923: LD_VAR 0 3
14927: PPUSH
14928: LD_INT 1
14930: PPUSH
14931: CALL_OW 233
// PlaceUnitArea ( veh , west_spawn , false ) ;
14935: LD_VAR 0 3
14939: PPUSH
14940: LD_INT 25
14942: PPUSH
14943: LD_INT 0
14945: PPUSH
14946: CALL_OW 49
// defenders := defenders ^ veh ;
14950: LD_ADDR_EXP 20
14954: PUSH
14955: LD_EXP 20
14959: PUSH
14960: LD_VAR 0 3
14964: ADD
14965: ST_TO_ADDR
// end ;
14966: GO 14891
14968: POP
14969: POP
// end ; end ;
14970: PPOPN 3
14972: END
// on EnterBuilding ( building , unit ) do begin if unit = Powell then
14973: LD_VAR 0 2
14977: PUSH
14978: LD_EXP 16
14982: EQUAL
14983: IFFALSE 14994
// RemoveUnit ( Powell ) ;
14985: LD_EXP 16
14989: PPUSH
14990: CALL_OW 64
// end ;
14994: PPOPN 2
14996: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
14997: LD_VAR 0 1
15001: PPUSH
15002: CALL 29625 0 1
// end ; end_of_file
15006: PPOPN 1
15008: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
15009: LD_INT 0
15011: PPUSH
// ar_miner := 81 ;
15012: LD_ADDR_EXP 45
15016: PUSH
15017: LD_INT 81
15019: ST_TO_ADDR
// ar_crane := 88 ;
15020: LD_ADDR_EXP 44
15024: PUSH
15025: LD_INT 88
15027: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
15028: LD_ADDR_EXP 39
15032: PUSH
15033: LD_INT 89
15035: ST_TO_ADDR
// us_hack := 99 ;
15036: LD_ADDR_EXP 40
15040: PUSH
15041: LD_INT 99
15043: ST_TO_ADDR
// us_artillery := 97 ;
15044: LD_ADDR_EXP 41
15048: PUSH
15049: LD_INT 97
15051: ST_TO_ADDR
// ar_bio_bomb := 91 ;
15052: LD_ADDR_EXP 42
15056: PUSH
15057: LD_INT 91
15059: ST_TO_ADDR
// ar_mortar := 92 ;
15060: LD_ADDR_EXP 43
15064: PUSH
15065: LD_INT 92
15067: ST_TO_ADDR
// ru_flamethrower := 93 ;
15068: LD_ADDR_EXP 46
15072: PUSH
15073: LD_INT 93
15075: ST_TO_ADDR
// ru_radar := 98 ;
15076: LD_ADDR_EXP 38
15080: PUSH
15081: LD_INT 98
15083: ST_TO_ADDR
// tech_Artillery := 80 ;
15084: LD_ADDR_EXP 47
15088: PUSH
15089: LD_INT 80
15091: ST_TO_ADDR
// tech_RadMat := 81 ;
15092: LD_ADDR_EXP 48
15096: PUSH
15097: LD_INT 81
15099: ST_TO_ADDR
// tech_BasicTools := 82 ;
15100: LD_ADDR_EXP 49
15104: PUSH
15105: LD_INT 82
15107: ST_TO_ADDR
// tech_Cargo := 83 ;
15108: LD_ADDR_EXP 50
15112: PUSH
15113: LD_INT 83
15115: ST_TO_ADDR
// tech_Track := 84 ;
15116: LD_ADDR_EXP 51
15120: PUSH
15121: LD_INT 84
15123: ST_TO_ADDR
// tech_Crane := 85 ;
15124: LD_ADDR_EXP 52
15128: PUSH
15129: LD_INT 85
15131: ST_TO_ADDR
// tech_Bulldozer := 86 ;
15132: LD_ADDR_EXP 53
15136: PUSH
15137: LD_INT 86
15139: ST_TO_ADDR
// tech_Hovercraft := 87 ;
15140: LD_ADDR_EXP 54
15144: PUSH
15145: LD_INT 87
15147: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
15148: LD_ADDR_EXP 55
15152: PUSH
15153: LD_INT 88
15155: ST_TO_ADDR
// class_mastodont := 31 ;
15156: LD_ADDR_EXP 56
15160: PUSH
15161: LD_INT 31
15163: ST_TO_ADDR
// class_horse := 21 ;
15164: LD_ADDR_EXP 57
15168: PUSH
15169: LD_INT 21
15171: ST_TO_ADDR
// end ;
15172: LD_VAR 0 1
15176: RET
// every 1 do
15177: GO 15179
15179: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
15180: CALL 15009 0 0
15184: END
// every 0 0$1 do
15185: GO 15187
15187: DISABLE
// begin enable ;
15188: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
15189: LD_STRING updateTimer(
15191: PUSH
15192: LD_OWVAR 1
15196: STR
15197: PUSH
15198: LD_STRING );
15200: STR
15201: PPUSH
15202: CALL_OW 559
// end ;
15206: END
// export function SOS_MapStart ( ) ; begin
15207: LD_INT 0
15209: PPUSH
// if streamModeActive then
15210: LD_EXP 58
15214: IFFALSE 15223
// DefineStreamItems ( true ) ;
15216: LD_INT 1
15218: PPUSH
15219: CALL 16873 0 1
// UpdateFactoryWaypoints ( ) ;
15223: CALL 30457 0 0
// end ;
15227: LD_VAR 0 1
15231: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15232: LD_INT 0
15234: PPUSH
// if p2 = 100 then
15235: LD_VAR 0 2
15239: PUSH
15240: LD_INT 100
15242: EQUAL
15243: IFFALSE 16246
// begin if not StreamModeActive then
15245: LD_EXP 58
15249: NOT
15250: IFFALSE 15260
// StreamModeActive := true ;
15252: LD_ADDR_EXP 58
15256: PUSH
15257: LD_INT 1
15259: ST_TO_ADDR
// if p3 = 0 then
15260: LD_VAR 0 3
15264: PUSH
15265: LD_INT 0
15267: EQUAL
15268: IFFALSE 15274
// InitStreamMode ;
15270: CALL 16409 0 0
// if p3 = 1 then
15274: LD_VAR 0 3
15278: PUSH
15279: LD_INT 1
15281: EQUAL
15282: IFFALSE 15292
// sRocket := true ;
15284: LD_ADDR_EXP 63
15288: PUSH
15289: LD_INT 1
15291: ST_TO_ADDR
// if p3 = 2 then
15292: LD_VAR 0 3
15296: PUSH
15297: LD_INT 2
15299: EQUAL
15300: IFFALSE 15310
// sSpeed := true ;
15302: LD_ADDR_EXP 62
15306: PUSH
15307: LD_INT 1
15309: ST_TO_ADDR
// if p3 = 3 then
15310: LD_VAR 0 3
15314: PUSH
15315: LD_INT 3
15317: EQUAL
15318: IFFALSE 15328
// sEngine := true ;
15320: LD_ADDR_EXP 64
15324: PUSH
15325: LD_INT 1
15327: ST_TO_ADDR
// if p3 = 4 then
15328: LD_VAR 0 3
15332: PUSH
15333: LD_INT 4
15335: EQUAL
15336: IFFALSE 15346
// sSpec := true ;
15338: LD_ADDR_EXP 61
15342: PUSH
15343: LD_INT 1
15345: ST_TO_ADDR
// if p3 = 5 then
15346: LD_VAR 0 3
15350: PUSH
15351: LD_INT 5
15353: EQUAL
15354: IFFALSE 15364
// sLevel := true ;
15356: LD_ADDR_EXP 65
15360: PUSH
15361: LD_INT 1
15363: ST_TO_ADDR
// if p3 = 6 then
15364: LD_VAR 0 3
15368: PUSH
15369: LD_INT 6
15371: EQUAL
15372: IFFALSE 15382
// sArmoury := true ;
15374: LD_ADDR_EXP 66
15378: PUSH
15379: LD_INT 1
15381: ST_TO_ADDR
// if p3 = 7 then
15382: LD_VAR 0 3
15386: PUSH
15387: LD_INT 7
15389: EQUAL
15390: IFFALSE 15400
// sRadar := true ;
15392: LD_ADDR_EXP 67
15396: PUSH
15397: LD_INT 1
15399: ST_TO_ADDR
// if p3 = 8 then
15400: LD_VAR 0 3
15404: PUSH
15405: LD_INT 8
15407: EQUAL
15408: IFFALSE 15418
// sBunker := true ;
15410: LD_ADDR_EXP 68
15414: PUSH
15415: LD_INT 1
15417: ST_TO_ADDR
// if p3 = 9 then
15418: LD_VAR 0 3
15422: PUSH
15423: LD_INT 9
15425: EQUAL
15426: IFFALSE 15436
// sHack := true ;
15428: LD_ADDR_EXP 69
15432: PUSH
15433: LD_INT 1
15435: ST_TO_ADDR
// if p3 = 10 then
15436: LD_VAR 0 3
15440: PUSH
15441: LD_INT 10
15443: EQUAL
15444: IFFALSE 15454
// sFire := true ;
15446: LD_ADDR_EXP 70
15450: PUSH
15451: LD_INT 1
15453: ST_TO_ADDR
// if p3 = 11 then
15454: LD_VAR 0 3
15458: PUSH
15459: LD_INT 11
15461: EQUAL
15462: IFFALSE 15472
// sRefresh := true ;
15464: LD_ADDR_EXP 71
15468: PUSH
15469: LD_INT 1
15471: ST_TO_ADDR
// if p3 = 12 then
15472: LD_VAR 0 3
15476: PUSH
15477: LD_INT 12
15479: EQUAL
15480: IFFALSE 15490
// sExp := true ;
15482: LD_ADDR_EXP 72
15486: PUSH
15487: LD_INT 1
15489: ST_TO_ADDR
// if p3 = 13 then
15490: LD_VAR 0 3
15494: PUSH
15495: LD_INT 13
15497: EQUAL
15498: IFFALSE 15508
// sDepot := true ;
15500: LD_ADDR_EXP 73
15504: PUSH
15505: LD_INT 1
15507: ST_TO_ADDR
// if p3 = 14 then
15508: LD_VAR 0 3
15512: PUSH
15513: LD_INT 14
15515: EQUAL
15516: IFFALSE 15526
// sFlag := true ;
15518: LD_ADDR_EXP 74
15522: PUSH
15523: LD_INT 1
15525: ST_TO_ADDR
// if p3 = 15 then
15526: LD_VAR 0 3
15530: PUSH
15531: LD_INT 15
15533: EQUAL
15534: IFFALSE 15544
// sKamikadze := true ;
15536: LD_ADDR_EXP 82
15540: PUSH
15541: LD_INT 1
15543: ST_TO_ADDR
// if p3 = 16 then
15544: LD_VAR 0 3
15548: PUSH
15549: LD_INT 16
15551: EQUAL
15552: IFFALSE 15562
// sTroll := true ;
15554: LD_ADDR_EXP 83
15558: PUSH
15559: LD_INT 1
15561: ST_TO_ADDR
// if p3 = 17 then
15562: LD_VAR 0 3
15566: PUSH
15567: LD_INT 17
15569: EQUAL
15570: IFFALSE 15580
// sSlow := true ;
15572: LD_ADDR_EXP 84
15576: PUSH
15577: LD_INT 1
15579: ST_TO_ADDR
// if p3 = 18 then
15580: LD_VAR 0 3
15584: PUSH
15585: LD_INT 18
15587: EQUAL
15588: IFFALSE 15598
// sLack := true ;
15590: LD_ADDR_EXP 85
15594: PUSH
15595: LD_INT 1
15597: ST_TO_ADDR
// if p3 = 19 then
15598: LD_VAR 0 3
15602: PUSH
15603: LD_INT 19
15605: EQUAL
15606: IFFALSE 15616
// sTank := true ;
15608: LD_ADDR_EXP 87
15612: PUSH
15613: LD_INT 1
15615: ST_TO_ADDR
// if p3 = 20 then
15616: LD_VAR 0 3
15620: PUSH
15621: LD_INT 20
15623: EQUAL
15624: IFFALSE 15634
// sRemote := true ;
15626: LD_ADDR_EXP 88
15630: PUSH
15631: LD_INT 1
15633: ST_TO_ADDR
// if p3 = 21 then
15634: LD_VAR 0 3
15638: PUSH
15639: LD_INT 21
15641: EQUAL
15642: IFFALSE 15652
// sPowell := true ;
15644: LD_ADDR_EXP 89
15648: PUSH
15649: LD_INT 1
15651: ST_TO_ADDR
// if p3 = 22 then
15652: LD_VAR 0 3
15656: PUSH
15657: LD_INT 22
15659: EQUAL
15660: IFFALSE 15670
// sTeleport := true ;
15662: LD_ADDR_EXP 92
15666: PUSH
15667: LD_INT 1
15669: ST_TO_ADDR
// if p3 = 23 then
15670: LD_VAR 0 3
15674: PUSH
15675: LD_INT 23
15677: EQUAL
15678: IFFALSE 15688
// sOilTower := true ;
15680: LD_ADDR_EXP 94
15684: PUSH
15685: LD_INT 1
15687: ST_TO_ADDR
// if p3 = 24 then
15688: LD_VAR 0 3
15692: PUSH
15693: LD_INT 24
15695: EQUAL
15696: IFFALSE 15706
// sShovel := true ;
15698: LD_ADDR_EXP 95
15702: PUSH
15703: LD_INT 1
15705: ST_TO_ADDR
// if p3 = 25 then
15706: LD_VAR 0 3
15710: PUSH
15711: LD_INT 25
15713: EQUAL
15714: IFFALSE 15724
// sSheik := true ;
15716: LD_ADDR_EXP 96
15720: PUSH
15721: LD_INT 1
15723: ST_TO_ADDR
// if p3 = 26 then
15724: LD_VAR 0 3
15728: PUSH
15729: LD_INT 26
15731: EQUAL
15732: IFFALSE 15742
// sEarthquake := true ;
15734: LD_ADDR_EXP 98
15738: PUSH
15739: LD_INT 1
15741: ST_TO_ADDR
// if p3 = 27 then
15742: LD_VAR 0 3
15746: PUSH
15747: LD_INT 27
15749: EQUAL
15750: IFFALSE 15760
// sAI := true ;
15752: LD_ADDR_EXP 99
15756: PUSH
15757: LD_INT 1
15759: ST_TO_ADDR
// if p3 = 28 then
15760: LD_VAR 0 3
15764: PUSH
15765: LD_INT 28
15767: EQUAL
15768: IFFALSE 15778
// sCargo := true ;
15770: LD_ADDR_EXP 102
15774: PUSH
15775: LD_INT 1
15777: ST_TO_ADDR
// if p3 = 29 then
15778: LD_VAR 0 3
15782: PUSH
15783: LD_INT 29
15785: EQUAL
15786: IFFALSE 15796
// sDLaser := true ;
15788: LD_ADDR_EXP 103
15792: PUSH
15793: LD_INT 1
15795: ST_TO_ADDR
// if p3 = 30 then
15796: LD_VAR 0 3
15800: PUSH
15801: LD_INT 30
15803: EQUAL
15804: IFFALSE 15814
// sExchange := true ;
15806: LD_ADDR_EXP 104
15810: PUSH
15811: LD_INT 1
15813: ST_TO_ADDR
// if p3 = 31 then
15814: LD_VAR 0 3
15818: PUSH
15819: LD_INT 31
15821: EQUAL
15822: IFFALSE 15832
// sFac := true ;
15824: LD_ADDR_EXP 105
15828: PUSH
15829: LD_INT 1
15831: ST_TO_ADDR
// if p3 = 32 then
15832: LD_VAR 0 3
15836: PUSH
15837: LD_INT 32
15839: EQUAL
15840: IFFALSE 15850
// sPower := true ;
15842: LD_ADDR_EXP 106
15846: PUSH
15847: LD_INT 1
15849: ST_TO_ADDR
// if p3 = 33 then
15850: LD_VAR 0 3
15854: PUSH
15855: LD_INT 33
15857: EQUAL
15858: IFFALSE 15868
// sRandom := true ;
15860: LD_ADDR_EXP 107
15864: PUSH
15865: LD_INT 1
15867: ST_TO_ADDR
// if p3 = 34 then
15868: LD_VAR 0 3
15872: PUSH
15873: LD_INT 34
15875: EQUAL
15876: IFFALSE 15886
// sShield := true ;
15878: LD_ADDR_EXP 108
15882: PUSH
15883: LD_INT 1
15885: ST_TO_ADDR
// if p3 = 35 then
15886: LD_VAR 0 3
15890: PUSH
15891: LD_INT 35
15893: EQUAL
15894: IFFALSE 15904
// sTime := true ;
15896: LD_ADDR_EXP 109
15900: PUSH
15901: LD_INT 1
15903: ST_TO_ADDR
// if p3 = 36 then
15904: LD_VAR 0 3
15908: PUSH
15909: LD_INT 36
15911: EQUAL
15912: IFFALSE 15922
// sTools := true ;
15914: LD_ADDR_EXP 110
15918: PUSH
15919: LD_INT 1
15921: ST_TO_ADDR
// if p3 = 101 then
15922: LD_VAR 0 3
15926: PUSH
15927: LD_INT 101
15929: EQUAL
15930: IFFALSE 15940
// sSold := true ;
15932: LD_ADDR_EXP 75
15936: PUSH
15937: LD_INT 1
15939: ST_TO_ADDR
// if p3 = 102 then
15940: LD_VAR 0 3
15944: PUSH
15945: LD_INT 102
15947: EQUAL
15948: IFFALSE 15958
// sDiff := true ;
15950: LD_ADDR_EXP 76
15954: PUSH
15955: LD_INT 1
15957: ST_TO_ADDR
// if p3 = 103 then
15958: LD_VAR 0 3
15962: PUSH
15963: LD_INT 103
15965: EQUAL
15966: IFFALSE 15976
// sFog := true ;
15968: LD_ADDR_EXP 79
15972: PUSH
15973: LD_INT 1
15975: ST_TO_ADDR
// if p3 = 104 then
15976: LD_VAR 0 3
15980: PUSH
15981: LD_INT 104
15983: EQUAL
15984: IFFALSE 15994
// sReset := true ;
15986: LD_ADDR_EXP 80
15990: PUSH
15991: LD_INT 1
15993: ST_TO_ADDR
// if p3 = 105 then
15994: LD_VAR 0 3
15998: PUSH
15999: LD_INT 105
16001: EQUAL
16002: IFFALSE 16012
// sSun := true ;
16004: LD_ADDR_EXP 81
16008: PUSH
16009: LD_INT 1
16011: ST_TO_ADDR
// if p3 = 106 then
16012: LD_VAR 0 3
16016: PUSH
16017: LD_INT 106
16019: EQUAL
16020: IFFALSE 16030
// sTiger := true ;
16022: LD_ADDR_EXP 77
16026: PUSH
16027: LD_INT 1
16029: ST_TO_ADDR
// if p3 = 107 then
16030: LD_VAR 0 3
16034: PUSH
16035: LD_INT 107
16037: EQUAL
16038: IFFALSE 16048
// sBomb := true ;
16040: LD_ADDR_EXP 78
16044: PUSH
16045: LD_INT 1
16047: ST_TO_ADDR
// if p3 = 108 then
16048: LD_VAR 0 3
16052: PUSH
16053: LD_INT 108
16055: EQUAL
16056: IFFALSE 16066
// sWound := true ;
16058: LD_ADDR_EXP 86
16062: PUSH
16063: LD_INT 1
16065: ST_TO_ADDR
// if p3 = 109 then
16066: LD_VAR 0 3
16070: PUSH
16071: LD_INT 109
16073: EQUAL
16074: IFFALSE 16084
// sBetray := true ;
16076: LD_ADDR_EXP 90
16080: PUSH
16081: LD_INT 1
16083: ST_TO_ADDR
// if p3 = 110 then
16084: LD_VAR 0 3
16088: PUSH
16089: LD_INT 110
16091: EQUAL
16092: IFFALSE 16102
// sContamin := true ;
16094: LD_ADDR_EXP 91
16098: PUSH
16099: LD_INT 1
16101: ST_TO_ADDR
// if p3 = 111 then
16102: LD_VAR 0 3
16106: PUSH
16107: LD_INT 111
16109: EQUAL
16110: IFFALSE 16120
// sOil := true ;
16112: LD_ADDR_EXP 93
16116: PUSH
16117: LD_INT 1
16119: ST_TO_ADDR
// if p3 = 112 then
16120: LD_VAR 0 3
16124: PUSH
16125: LD_INT 112
16127: EQUAL
16128: IFFALSE 16138
// sStu := true ;
16130: LD_ADDR_EXP 97
16134: PUSH
16135: LD_INT 1
16137: ST_TO_ADDR
// if p3 = 113 then
16138: LD_VAR 0 3
16142: PUSH
16143: LD_INT 113
16145: EQUAL
16146: IFFALSE 16156
// sBazooka := true ;
16148: LD_ADDR_EXP 100
16152: PUSH
16153: LD_INT 1
16155: ST_TO_ADDR
// if p3 = 114 then
16156: LD_VAR 0 3
16160: PUSH
16161: LD_INT 114
16163: EQUAL
16164: IFFALSE 16174
// sMortar := true ;
16166: LD_ADDR_EXP 101
16170: PUSH
16171: LD_INT 1
16173: ST_TO_ADDR
// if p3 = 115 then
16174: LD_VAR 0 3
16178: PUSH
16179: LD_INT 115
16181: EQUAL
16182: IFFALSE 16192
// sRanger := true ;
16184: LD_ADDR_EXP 111
16188: PUSH
16189: LD_INT 1
16191: ST_TO_ADDR
// if p3 = 116 then
16192: LD_VAR 0 3
16196: PUSH
16197: LD_INT 116
16199: EQUAL
16200: IFFALSE 16210
// sComputer := true ;
16202: LD_ADDR_EXP 112
16206: PUSH
16207: LD_INT 1
16209: ST_TO_ADDR
// if p3 = 117 then
16210: LD_VAR 0 3
16214: PUSH
16215: LD_INT 117
16217: EQUAL
16218: IFFALSE 16228
// s30 := true ;
16220: LD_ADDR_EXP 113
16224: PUSH
16225: LD_INT 1
16227: ST_TO_ADDR
// if p3 = 118 then
16228: LD_VAR 0 3
16232: PUSH
16233: LD_INT 118
16235: EQUAL
16236: IFFALSE 16246
// s60 := true ;
16238: LD_ADDR_EXP 114
16242: PUSH
16243: LD_INT 1
16245: ST_TO_ADDR
// end ; if p2 = 101 then
16246: LD_VAR 0 2
16250: PUSH
16251: LD_INT 101
16253: EQUAL
16254: IFFALSE 16382
// begin case p3 of 1 :
16256: LD_VAR 0 3
16260: PUSH
16261: LD_INT 1
16263: DOUBLE
16264: EQUAL
16265: IFTRUE 16269
16267: GO 16276
16269: POP
// hHackUnlimitedResources ; 2 :
16270: CALL 28480 0 0
16274: GO 16382
16276: LD_INT 2
16278: DOUBLE
16279: EQUAL
16280: IFTRUE 16284
16282: GO 16291
16284: POP
// hHackSetLevel10 ; 3 :
16285: CALL 28613 0 0
16289: GO 16382
16291: LD_INT 3
16293: DOUBLE
16294: EQUAL
16295: IFTRUE 16299
16297: GO 16306
16299: POP
// hHackSetLevel10YourUnits ; 4 :
16300: CALL 28698 0 0
16304: GO 16382
16306: LD_INT 4
16308: DOUBLE
16309: EQUAL
16310: IFTRUE 16314
16312: GO 16321
16314: POP
// hHackInvincible ; 5 :
16315: CALL 29146 0 0
16319: GO 16382
16321: LD_INT 5
16323: DOUBLE
16324: EQUAL
16325: IFTRUE 16329
16327: GO 16336
16329: POP
// hHackInvisible ; 6 :
16330: CALL 29257 0 0
16334: GO 16382
16336: LD_INT 6
16338: DOUBLE
16339: EQUAL
16340: IFTRUE 16344
16342: GO 16351
16344: POP
// hHackChangeYourSide ; 7 :
16345: CALL 29314 0 0
16349: GO 16382
16351: LD_INT 7
16353: DOUBLE
16354: EQUAL
16355: IFTRUE 16359
16357: GO 16366
16359: POP
// hHackChangeUnitSide ; 8 :
16360: CALL 29356 0 0
16364: GO 16382
16366: LD_INT 8
16368: DOUBLE
16369: EQUAL
16370: IFTRUE 16374
16372: GO 16381
16374: POP
// hHackFog ; end ;
16375: CALL 29457 0 0
16379: GO 16382
16381: POP
// end ; end ;
16382: LD_VAR 0 7
16386: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16387: GO 16389
16389: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16390: LD_STRING initStreamRollete();
16392: PPUSH
16393: CALL_OW 559
// InitStreamMode ;
16397: CALL 16409 0 0
// DefineStreamItems ( false ) ;
16401: LD_INT 0
16403: PPUSH
16404: CALL 16873 0 1
// end ;
16408: END
// function InitStreamMode ; begin
16409: LD_INT 0
16411: PPUSH
// streamModeActive := false ;
16412: LD_ADDR_EXP 58
16416: PUSH
16417: LD_INT 0
16419: ST_TO_ADDR
// normalCounter := 36 ;
16420: LD_ADDR_EXP 59
16424: PUSH
16425: LD_INT 36
16427: ST_TO_ADDR
// hardcoreCounter := 18 ;
16428: LD_ADDR_EXP 60
16432: PUSH
16433: LD_INT 18
16435: ST_TO_ADDR
// sRocket := false ;
16436: LD_ADDR_EXP 63
16440: PUSH
16441: LD_INT 0
16443: ST_TO_ADDR
// sSpeed := false ;
16444: LD_ADDR_EXP 62
16448: PUSH
16449: LD_INT 0
16451: ST_TO_ADDR
// sEngine := false ;
16452: LD_ADDR_EXP 64
16456: PUSH
16457: LD_INT 0
16459: ST_TO_ADDR
// sSpec := false ;
16460: LD_ADDR_EXP 61
16464: PUSH
16465: LD_INT 0
16467: ST_TO_ADDR
// sLevel := false ;
16468: LD_ADDR_EXP 65
16472: PUSH
16473: LD_INT 0
16475: ST_TO_ADDR
// sArmoury := false ;
16476: LD_ADDR_EXP 66
16480: PUSH
16481: LD_INT 0
16483: ST_TO_ADDR
// sRadar := false ;
16484: LD_ADDR_EXP 67
16488: PUSH
16489: LD_INT 0
16491: ST_TO_ADDR
// sBunker := false ;
16492: LD_ADDR_EXP 68
16496: PUSH
16497: LD_INT 0
16499: ST_TO_ADDR
// sHack := false ;
16500: LD_ADDR_EXP 69
16504: PUSH
16505: LD_INT 0
16507: ST_TO_ADDR
// sFire := false ;
16508: LD_ADDR_EXP 70
16512: PUSH
16513: LD_INT 0
16515: ST_TO_ADDR
// sRefresh := false ;
16516: LD_ADDR_EXP 71
16520: PUSH
16521: LD_INT 0
16523: ST_TO_ADDR
// sExp := false ;
16524: LD_ADDR_EXP 72
16528: PUSH
16529: LD_INT 0
16531: ST_TO_ADDR
// sDepot := false ;
16532: LD_ADDR_EXP 73
16536: PUSH
16537: LD_INT 0
16539: ST_TO_ADDR
// sFlag := false ;
16540: LD_ADDR_EXP 74
16544: PUSH
16545: LD_INT 0
16547: ST_TO_ADDR
// sKamikadze := false ;
16548: LD_ADDR_EXP 82
16552: PUSH
16553: LD_INT 0
16555: ST_TO_ADDR
// sTroll := false ;
16556: LD_ADDR_EXP 83
16560: PUSH
16561: LD_INT 0
16563: ST_TO_ADDR
// sSlow := false ;
16564: LD_ADDR_EXP 84
16568: PUSH
16569: LD_INT 0
16571: ST_TO_ADDR
// sLack := false ;
16572: LD_ADDR_EXP 85
16576: PUSH
16577: LD_INT 0
16579: ST_TO_ADDR
// sTank := false ;
16580: LD_ADDR_EXP 87
16584: PUSH
16585: LD_INT 0
16587: ST_TO_ADDR
// sRemote := false ;
16588: LD_ADDR_EXP 88
16592: PUSH
16593: LD_INT 0
16595: ST_TO_ADDR
// sPowell := false ;
16596: LD_ADDR_EXP 89
16600: PUSH
16601: LD_INT 0
16603: ST_TO_ADDR
// sTeleport := false ;
16604: LD_ADDR_EXP 92
16608: PUSH
16609: LD_INT 0
16611: ST_TO_ADDR
// sOilTower := false ;
16612: LD_ADDR_EXP 94
16616: PUSH
16617: LD_INT 0
16619: ST_TO_ADDR
// sShovel := false ;
16620: LD_ADDR_EXP 95
16624: PUSH
16625: LD_INT 0
16627: ST_TO_ADDR
// sSheik := false ;
16628: LD_ADDR_EXP 96
16632: PUSH
16633: LD_INT 0
16635: ST_TO_ADDR
// sEarthquake := false ;
16636: LD_ADDR_EXP 98
16640: PUSH
16641: LD_INT 0
16643: ST_TO_ADDR
// sAI := false ;
16644: LD_ADDR_EXP 99
16648: PUSH
16649: LD_INT 0
16651: ST_TO_ADDR
// sCargo := false ;
16652: LD_ADDR_EXP 102
16656: PUSH
16657: LD_INT 0
16659: ST_TO_ADDR
// sDLaser := false ;
16660: LD_ADDR_EXP 103
16664: PUSH
16665: LD_INT 0
16667: ST_TO_ADDR
// sExchange := false ;
16668: LD_ADDR_EXP 104
16672: PUSH
16673: LD_INT 0
16675: ST_TO_ADDR
// sFac := false ;
16676: LD_ADDR_EXP 105
16680: PUSH
16681: LD_INT 0
16683: ST_TO_ADDR
// sPower := false ;
16684: LD_ADDR_EXP 106
16688: PUSH
16689: LD_INT 0
16691: ST_TO_ADDR
// sRandom := false ;
16692: LD_ADDR_EXP 107
16696: PUSH
16697: LD_INT 0
16699: ST_TO_ADDR
// sShield := false ;
16700: LD_ADDR_EXP 108
16704: PUSH
16705: LD_INT 0
16707: ST_TO_ADDR
// sTime := false ;
16708: LD_ADDR_EXP 109
16712: PUSH
16713: LD_INT 0
16715: ST_TO_ADDR
// sTools := false ;
16716: LD_ADDR_EXP 110
16720: PUSH
16721: LD_INT 0
16723: ST_TO_ADDR
// sSold := false ;
16724: LD_ADDR_EXP 75
16728: PUSH
16729: LD_INT 0
16731: ST_TO_ADDR
// sDiff := false ;
16732: LD_ADDR_EXP 76
16736: PUSH
16737: LD_INT 0
16739: ST_TO_ADDR
// sFog := false ;
16740: LD_ADDR_EXP 79
16744: PUSH
16745: LD_INT 0
16747: ST_TO_ADDR
// sReset := false ;
16748: LD_ADDR_EXP 80
16752: PUSH
16753: LD_INT 0
16755: ST_TO_ADDR
// sSun := false ;
16756: LD_ADDR_EXP 81
16760: PUSH
16761: LD_INT 0
16763: ST_TO_ADDR
// sTiger := false ;
16764: LD_ADDR_EXP 77
16768: PUSH
16769: LD_INT 0
16771: ST_TO_ADDR
// sBomb := false ;
16772: LD_ADDR_EXP 78
16776: PUSH
16777: LD_INT 0
16779: ST_TO_ADDR
// sWound := false ;
16780: LD_ADDR_EXP 86
16784: PUSH
16785: LD_INT 0
16787: ST_TO_ADDR
// sBetray := false ;
16788: LD_ADDR_EXP 90
16792: PUSH
16793: LD_INT 0
16795: ST_TO_ADDR
// sContamin := false ;
16796: LD_ADDR_EXP 91
16800: PUSH
16801: LD_INT 0
16803: ST_TO_ADDR
// sOil := false ;
16804: LD_ADDR_EXP 93
16808: PUSH
16809: LD_INT 0
16811: ST_TO_ADDR
// sStu := false ;
16812: LD_ADDR_EXP 97
16816: PUSH
16817: LD_INT 0
16819: ST_TO_ADDR
// sBazooka := false ;
16820: LD_ADDR_EXP 100
16824: PUSH
16825: LD_INT 0
16827: ST_TO_ADDR
// sMortar := false ;
16828: LD_ADDR_EXP 101
16832: PUSH
16833: LD_INT 0
16835: ST_TO_ADDR
// sRanger := false ;
16836: LD_ADDR_EXP 111
16840: PUSH
16841: LD_INT 0
16843: ST_TO_ADDR
// sComputer := false ;
16844: LD_ADDR_EXP 112
16848: PUSH
16849: LD_INT 0
16851: ST_TO_ADDR
// s30 := false ;
16852: LD_ADDR_EXP 113
16856: PUSH
16857: LD_INT 0
16859: ST_TO_ADDR
// s60 := false ;
16860: LD_ADDR_EXP 114
16864: PUSH
16865: LD_INT 0
16867: ST_TO_ADDR
// end ;
16868: LD_VAR 0 1
16872: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16873: LD_INT 0
16875: PPUSH
16876: PPUSH
16877: PPUSH
16878: PPUSH
16879: PPUSH
16880: PPUSH
16881: PPUSH
// result := [ ] ;
16882: LD_ADDR_VAR 0 2
16886: PUSH
16887: EMPTY
16888: ST_TO_ADDR
// if campaign_id = 1 then
16889: LD_OWVAR 69
16893: PUSH
16894: LD_INT 1
16896: EQUAL
16897: IFFALSE 20063
// begin case mission_number of 1 :
16899: LD_OWVAR 70
16903: PUSH
16904: LD_INT 1
16906: DOUBLE
16907: EQUAL
16908: IFTRUE 16912
16910: GO 16988
16912: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16913: LD_ADDR_VAR 0 2
16917: PUSH
16918: LD_INT 2
16920: PUSH
16921: LD_INT 4
16923: PUSH
16924: LD_INT 11
16926: PUSH
16927: LD_INT 12
16929: PUSH
16930: LD_INT 15
16932: PUSH
16933: LD_INT 16
16935: PUSH
16936: LD_INT 22
16938: PUSH
16939: LD_INT 23
16941: PUSH
16942: LD_INT 26
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: PUSH
16956: LD_INT 101
16958: PUSH
16959: LD_INT 102
16961: PUSH
16962: LD_INT 106
16964: PUSH
16965: LD_INT 116
16967: PUSH
16968: LD_INT 117
16970: PUSH
16971: LD_INT 118
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: ST_TO_ADDR
16986: GO 20061
16988: LD_INT 2
16990: DOUBLE
16991: EQUAL
16992: IFTRUE 16996
16994: GO 17080
16996: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16997: LD_ADDR_VAR 0 2
17001: PUSH
17002: LD_INT 2
17004: PUSH
17005: LD_INT 4
17007: PUSH
17008: LD_INT 11
17010: PUSH
17011: LD_INT 12
17013: PUSH
17014: LD_INT 15
17016: PUSH
17017: LD_INT 16
17019: PUSH
17020: LD_INT 22
17022: PUSH
17023: LD_INT 23
17025: PUSH
17026: LD_INT 26
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: PUSH
17040: LD_INT 101
17042: PUSH
17043: LD_INT 102
17045: PUSH
17046: LD_INT 105
17048: PUSH
17049: LD_INT 106
17051: PUSH
17052: LD_INT 108
17054: PUSH
17055: LD_INT 116
17057: PUSH
17058: LD_INT 117
17060: PUSH
17061: LD_INT 118
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: ST_TO_ADDR
17078: GO 20061
17080: LD_INT 3
17082: DOUBLE
17083: EQUAL
17084: IFTRUE 17088
17086: GO 17176
17088: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
17089: LD_ADDR_VAR 0 2
17093: PUSH
17094: LD_INT 2
17096: PUSH
17097: LD_INT 4
17099: PUSH
17100: LD_INT 5
17102: PUSH
17103: LD_INT 11
17105: PUSH
17106: LD_INT 12
17108: PUSH
17109: LD_INT 15
17111: PUSH
17112: LD_INT 16
17114: PUSH
17115: LD_INT 22
17117: PUSH
17118: LD_INT 26
17120: PUSH
17121: LD_INT 36
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: PUSH
17136: LD_INT 101
17138: PUSH
17139: LD_INT 102
17141: PUSH
17142: LD_INT 105
17144: PUSH
17145: LD_INT 106
17147: PUSH
17148: LD_INT 108
17150: PUSH
17151: LD_INT 116
17153: PUSH
17154: LD_INT 117
17156: PUSH
17157: LD_INT 118
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: ST_TO_ADDR
17174: GO 20061
17176: LD_INT 4
17178: DOUBLE
17179: EQUAL
17180: IFTRUE 17184
17182: GO 17280
17184: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17185: LD_ADDR_VAR 0 2
17189: PUSH
17190: LD_INT 2
17192: PUSH
17193: LD_INT 4
17195: PUSH
17196: LD_INT 5
17198: PUSH
17199: LD_INT 8
17201: PUSH
17202: LD_INT 11
17204: PUSH
17205: LD_INT 12
17207: PUSH
17208: LD_INT 15
17210: PUSH
17211: LD_INT 16
17213: PUSH
17214: LD_INT 22
17216: PUSH
17217: LD_INT 23
17219: PUSH
17220: LD_INT 26
17222: PUSH
17223: LD_INT 36
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: PUSH
17240: LD_INT 101
17242: PUSH
17243: LD_INT 102
17245: PUSH
17246: LD_INT 105
17248: PUSH
17249: LD_INT 106
17251: PUSH
17252: LD_INT 108
17254: PUSH
17255: LD_INT 116
17257: PUSH
17258: LD_INT 117
17260: PUSH
17261: LD_INT 118
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: ST_TO_ADDR
17278: GO 20061
17280: LD_INT 5
17282: DOUBLE
17283: EQUAL
17284: IFTRUE 17288
17286: GO 17400
17288: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17289: LD_ADDR_VAR 0 2
17293: PUSH
17294: LD_INT 2
17296: PUSH
17297: LD_INT 4
17299: PUSH
17300: LD_INT 5
17302: PUSH
17303: LD_INT 6
17305: PUSH
17306: LD_INT 8
17308: PUSH
17309: LD_INT 11
17311: PUSH
17312: LD_INT 12
17314: PUSH
17315: LD_INT 15
17317: PUSH
17318: LD_INT 16
17320: PUSH
17321: LD_INT 22
17323: PUSH
17324: LD_INT 23
17326: PUSH
17327: LD_INT 25
17329: PUSH
17330: LD_INT 26
17332: PUSH
17333: LD_INT 36
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 101
17354: PUSH
17355: LD_INT 102
17357: PUSH
17358: LD_INT 105
17360: PUSH
17361: LD_INT 106
17363: PUSH
17364: LD_INT 108
17366: PUSH
17367: LD_INT 109
17369: PUSH
17370: LD_INT 112
17372: PUSH
17373: LD_INT 116
17375: PUSH
17376: LD_INT 117
17378: PUSH
17379: LD_INT 118
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: ST_TO_ADDR
17398: GO 20061
17400: LD_INT 6
17402: DOUBLE
17403: EQUAL
17404: IFTRUE 17408
17406: GO 17540
17408: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17409: LD_ADDR_VAR 0 2
17413: PUSH
17414: LD_INT 2
17416: PUSH
17417: LD_INT 4
17419: PUSH
17420: LD_INT 5
17422: PUSH
17423: LD_INT 6
17425: PUSH
17426: LD_INT 8
17428: PUSH
17429: LD_INT 11
17431: PUSH
17432: LD_INT 12
17434: PUSH
17435: LD_INT 15
17437: PUSH
17438: LD_INT 16
17440: PUSH
17441: LD_INT 20
17443: PUSH
17444: LD_INT 21
17446: PUSH
17447: LD_INT 22
17449: PUSH
17450: LD_INT 23
17452: PUSH
17453: LD_INT 25
17455: PUSH
17456: LD_INT 26
17458: PUSH
17459: LD_INT 30
17461: PUSH
17462: LD_INT 31
17464: PUSH
17465: LD_INT 32
17467: PUSH
17468: LD_INT 36
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: PUSH
17492: LD_INT 101
17494: PUSH
17495: LD_INT 102
17497: PUSH
17498: LD_INT 105
17500: PUSH
17501: LD_INT 106
17503: PUSH
17504: LD_INT 108
17506: PUSH
17507: LD_INT 109
17509: PUSH
17510: LD_INT 112
17512: PUSH
17513: LD_INT 116
17515: PUSH
17516: LD_INT 117
17518: PUSH
17519: LD_INT 118
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: ST_TO_ADDR
17538: GO 20061
17540: LD_INT 7
17542: DOUBLE
17543: EQUAL
17544: IFTRUE 17548
17546: GO 17660
17548: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17549: LD_ADDR_VAR 0 2
17553: PUSH
17554: LD_INT 2
17556: PUSH
17557: LD_INT 4
17559: PUSH
17560: LD_INT 5
17562: PUSH
17563: LD_INT 7
17565: PUSH
17566: LD_INT 11
17568: PUSH
17569: LD_INT 12
17571: PUSH
17572: LD_INT 15
17574: PUSH
17575: LD_INT 16
17577: PUSH
17578: LD_INT 20
17580: PUSH
17581: LD_INT 21
17583: PUSH
17584: LD_INT 22
17586: PUSH
17587: LD_INT 23
17589: PUSH
17590: LD_INT 25
17592: PUSH
17593: LD_INT 26
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: PUSH
17612: LD_INT 101
17614: PUSH
17615: LD_INT 102
17617: PUSH
17618: LD_INT 103
17620: PUSH
17621: LD_INT 105
17623: PUSH
17624: LD_INT 106
17626: PUSH
17627: LD_INT 108
17629: PUSH
17630: LD_INT 112
17632: PUSH
17633: LD_INT 116
17635: PUSH
17636: LD_INT 117
17638: PUSH
17639: LD_INT 118
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: PUSH
17654: EMPTY
17655: LIST
17656: LIST
17657: ST_TO_ADDR
17658: GO 20061
17660: LD_INT 8
17662: DOUBLE
17663: EQUAL
17664: IFTRUE 17668
17666: GO 17808
17668: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17669: LD_ADDR_VAR 0 2
17673: PUSH
17674: LD_INT 2
17676: PUSH
17677: LD_INT 4
17679: PUSH
17680: LD_INT 5
17682: PUSH
17683: LD_INT 6
17685: PUSH
17686: LD_INT 7
17688: PUSH
17689: LD_INT 8
17691: PUSH
17692: LD_INT 11
17694: PUSH
17695: LD_INT 12
17697: PUSH
17698: LD_INT 15
17700: PUSH
17701: LD_INT 16
17703: PUSH
17704: LD_INT 20
17706: PUSH
17707: LD_INT 21
17709: PUSH
17710: LD_INT 22
17712: PUSH
17713: LD_INT 23
17715: PUSH
17716: LD_INT 25
17718: PUSH
17719: LD_INT 26
17721: PUSH
17722: LD_INT 30
17724: PUSH
17725: LD_INT 31
17727: PUSH
17728: LD_INT 32
17730: PUSH
17731: LD_INT 36
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: PUSH
17756: LD_INT 101
17758: PUSH
17759: LD_INT 102
17761: PUSH
17762: LD_INT 103
17764: PUSH
17765: LD_INT 105
17767: PUSH
17768: LD_INT 106
17770: PUSH
17771: LD_INT 108
17773: PUSH
17774: LD_INT 109
17776: PUSH
17777: LD_INT 112
17779: PUSH
17780: LD_INT 116
17782: PUSH
17783: LD_INT 117
17785: PUSH
17786: LD_INT 118
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: ST_TO_ADDR
17806: GO 20061
17808: LD_INT 9
17810: DOUBLE
17811: EQUAL
17812: IFTRUE 17816
17814: GO 17964
17816: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17817: LD_ADDR_VAR 0 2
17821: PUSH
17822: LD_INT 2
17824: PUSH
17825: LD_INT 4
17827: PUSH
17828: LD_INT 5
17830: PUSH
17831: LD_INT 6
17833: PUSH
17834: LD_INT 7
17836: PUSH
17837: LD_INT 8
17839: PUSH
17840: LD_INT 11
17842: PUSH
17843: LD_INT 12
17845: PUSH
17846: LD_INT 15
17848: PUSH
17849: LD_INT 16
17851: PUSH
17852: LD_INT 20
17854: PUSH
17855: LD_INT 21
17857: PUSH
17858: LD_INT 22
17860: PUSH
17861: LD_INT 23
17863: PUSH
17864: LD_INT 25
17866: PUSH
17867: LD_INT 26
17869: PUSH
17870: LD_INT 28
17872: PUSH
17873: LD_INT 30
17875: PUSH
17876: LD_INT 31
17878: PUSH
17879: LD_INT 32
17881: PUSH
17882: LD_INT 36
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 101
17910: PUSH
17911: LD_INT 102
17913: PUSH
17914: LD_INT 103
17916: PUSH
17917: LD_INT 105
17919: PUSH
17920: LD_INT 106
17922: PUSH
17923: LD_INT 108
17925: PUSH
17926: LD_INT 109
17928: PUSH
17929: LD_INT 112
17931: PUSH
17932: LD_INT 114
17934: PUSH
17935: LD_INT 116
17937: PUSH
17938: LD_INT 117
17940: PUSH
17941: LD_INT 118
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: ST_TO_ADDR
17962: GO 20061
17964: LD_INT 10
17966: DOUBLE
17967: EQUAL
17968: IFTRUE 17972
17970: GO 18168
17972: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17973: LD_ADDR_VAR 0 2
17977: PUSH
17978: LD_INT 2
17980: PUSH
17981: LD_INT 4
17983: PUSH
17984: LD_INT 5
17986: PUSH
17987: LD_INT 6
17989: PUSH
17990: LD_INT 7
17992: PUSH
17993: LD_INT 8
17995: PUSH
17996: LD_INT 9
17998: PUSH
17999: LD_INT 10
18001: PUSH
18002: LD_INT 11
18004: PUSH
18005: LD_INT 12
18007: PUSH
18008: LD_INT 13
18010: PUSH
18011: LD_INT 14
18013: PUSH
18014: LD_INT 15
18016: PUSH
18017: LD_INT 16
18019: PUSH
18020: LD_INT 17
18022: PUSH
18023: LD_INT 18
18025: PUSH
18026: LD_INT 19
18028: PUSH
18029: LD_INT 20
18031: PUSH
18032: LD_INT 21
18034: PUSH
18035: LD_INT 22
18037: PUSH
18038: LD_INT 23
18040: PUSH
18041: LD_INT 24
18043: PUSH
18044: LD_INT 25
18046: PUSH
18047: LD_INT 26
18049: PUSH
18050: LD_INT 28
18052: PUSH
18053: LD_INT 30
18055: PUSH
18056: LD_INT 31
18058: PUSH
18059: LD_INT 32
18061: PUSH
18062: LD_INT 36
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 101
18098: PUSH
18099: LD_INT 102
18101: PUSH
18102: LD_INT 103
18104: PUSH
18105: LD_INT 104
18107: PUSH
18108: LD_INT 105
18110: PUSH
18111: LD_INT 106
18113: PUSH
18114: LD_INT 107
18116: PUSH
18117: LD_INT 108
18119: PUSH
18120: LD_INT 109
18122: PUSH
18123: LD_INT 110
18125: PUSH
18126: LD_INT 111
18128: PUSH
18129: LD_INT 112
18131: PUSH
18132: LD_INT 114
18134: PUSH
18135: LD_INT 116
18137: PUSH
18138: LD_INT 117
18140: PUSH
18141: LD_INT 118
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: ST_TO_ADDR
18166: GO 20061
18168: LD_INT 11
18170: DOUBLE
18171: EQUAL
18172: IFTRUE 18176
18174: GO 18380
18176: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18177: LD_ADDR_VAR 0 2
18181: PUSH
18182: LD_INT 2
18184: PUSH
18185: LD_INT 3
18187: PUSH
18188: LD_INT 4
18190: PUSH
18191: LD_INT 5
18193: PUSH
18194: LD_INT 6
18196: PUSH
18197: LD_INT 7
18199: PUSH
18200: LD_INT 8
18202: PUSH
18203: LD_INT 9
18205: PUSH
18206: LD_INT 10
18208: PUSH
18209: LD_INT 11
18211: PUSH
18212: LD_INT 12
18214: PUSH
18215: LD_INT 13
18217: PUSH
18218: LD_INT 14
18220: PUSH
18221: LD_INT 15
18223: PUSH
18224: LD_INT 16
18226: PUSH
18227: LD_INT 17
18229: PUSH
18230: LD_INT 18
18232: PUSH
18233: LD_INT 19
18235: PUSH
18236: LD_INT 20
18238: PUSH
18239: LD_INT 21
18241: PUSH
18242: LD_INT 22
18244: PUSH
18245: LD_INT 23
18247: PUSH
18248: LD_INT 24
18250: PUSH
18251: LD_INT 25
18253: PUSH
18254: LD_INT 26
18256: PUSH
18257: LD_INT 28
18259: PUSH
18260: LD_INT 30
18262: PUSH
18263: LD_INT 31
18265: PUSH
18266: LD_INT 32
18268: PUSH
18269: LD_INT 34
18271: PUSH
18272: LD_INT 36
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: LIST
18300: LIST
18301: LIST
18302: LIST
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 101
18310: PUSH
18311: LD_INT 102
18313: PUSH
18314: LD_INT 103
18316: PUSH
18317: LD_INT 104
18319: PUSH
18320: LD_INT 105
18322: PUSH
18323: LD_INT 106
18325: PUSH
18326: LD_INT 107
18328: PUSH
18329: LD_INT 108
18331: PUSH
18332: LD_INT 109
18334: PUSH
18335: LD_INT 110
18337: PUSH
18338: LD_INT 111
18340: PUSH
18341: LD_INT 112
18343: PUSH
18344: LD_INT 114
18346: PUSH
18347: LD_INT 116
18349: PUSH
18350: LD_INT 117
18352: PUSH
18353: LD_INT 118
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: ST_TO_ADDR
18378: GO 20061
18380: LD_INT 12
18382: DOUBLE
18383: EQUAL
18384: IFTRUE 18388
18386: GO 18608
18388: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18389: LD_ADDR_VAR 0 2
18393: PUSH
18394: LD_INT 1
18396: PUSH
18397: LD_INT 2
18399: PUSH
18400: LD_INT 3
18402: PUSH
18403: LD_INT 4
18405: PUSH
18406: LD_INT 5
18408: PUSH
18409: LD_INT 6
18411: PUSH
18412: LD_INT 7
18414: PUSH
18415: LD_INT 8
18417: PUSH
18418: LD_INT 9
18420: PUSH
18421: LD_INT 10
18423: PUSH
18424: LD_INT 11
18426: PUSH
18427: LD_INT 12
18429: PUSH
18430: LD_INT 13
18432: PUSH
18433: LD_INT 14
18435: PUSH
18436: LD_INT 15
18438: PUSH
18439: LD_INT 16
18441: PUSH
18442: LD_INT 17
18444: PUSH
18445: LD_INT 18
18447: PUSH
18448: LD_INT 19
18450: PUSH
18451: LD_INT 20
18453: PUSH
18454: LD_INT 21
18456: PUSH
18457: LD_INT 22
18459: PUSH
18460: LD_INT 23
18462: PUSH
18463: LD_INT 24
18465: PUSH
18466: LD_INT 25
18468: PUSH
18469: LD_INT 26
18471: PUSH
18472: LD_INT 27
18474: PUSH
18475: LD_INT 28
18477: PUSH
18478: LD_INT 30
18480: PUSH
18481: LD_INT 31
18483: PUSH
18484: LD_INT 32
18486: PUSH
18487: LD_INT 33
18489: PUSH
18490: LD_INT 34
18492: PUSH
18493: LD_INT 36
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: LIST
18503: LIST
18504: LIST
18505: LIST
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: LIST
18520: LIST
18521: LIST
18522: LIST
18523: LIST
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 101
18534: PUSH
18535: LD_INT 102
18537: PUSH
18538: LD_INT 103
18540: PUSH
18541: LD_INT 104
18543: PUSH
18544: LD_INT 105
18546: PUSH
18547: LD_INT 106
18549: PUSH
18550: LD_INT 107
18552: PUSH
18553: LD_INT 108
18555: PUSH
18556: LD_INT 109
18558: PUSH
18559: LD_INT 110
18561: PUSH
18562: LD_INT 111
18564: PUSH
18565: LD_INT 112
18567: PUSH
18568: LD_INT 113
18570: PUSH
18571: LD_INT 114
18573: PUSH
18574: LD_INT 116
18576: PUSH
18577: LD_INT 117
18579: PUSH
18580: LD_INT 118
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: ST_TO_ADDR
18606: GO 20061
18608: LD_INT 13
18610: DOUBLE
18611: EQUAL
18612: IFTRUE 18616
18614: GO 18824
18616: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18617: LD_ADDR_VAR 0 2
18621: PUSH
18622: LD_INT 1
18624: PUSH
18625: LD_INT 2
18627: PUSH
18628: LD_INT 3
18630: PUSH
18631: LD_INT 4
18633: PUSH
18634: LD_INT 5
18636: PUSH
18637: LD_INT 8
18639: PUSH
18640: LD_INT 9
18642: PUSH
18643: LD_INT 10
18645: PUSH
18646: LD_INT 11
18648: PUSH
18649: LD_INT 12
18651: PUSH
18652: LD_INT 14
18654: PUSH
18655: LD_INT 15
18657: PUSH
18658: LD_INT 16
18660: PUSH
18661: LD_INT 17
18663: PUSH
18664: LD_INT 18
18666: PUSH
18667: LD_INT 19
18669: PUSH
18670: LD_INT 20
18672: PUSH
18673: LD_INT 21
18675: PUSH
18676: LD_INT 22
18678: PUSH
18679: LD_INT 23
18681: PUSH
18682: LD_INT 24
18684: PUSH
18685: LD_INT 25
18687: PUSH
18688: LD_INT 26
18690: PUSH
18691: LD_INT 27
18693: PUSH
18694: LD_INT 28
18696: PUSH
18697: LD_INT 30
18699: PUSH
18700: LD_INT 31
18702: PUSH
18703: LD_INT 32
18705: PUSH
18706: LD_INT 33
18708: PUSH
18709: LD_INT 34
18711: PUSH
18712: LD_INT 36
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: LIST
18734: LIST
18735: LIST
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: LIST
18747: PUSH
18748: LD_INT 101
18750: PUSH
18751: LD_INT 102
18753: PUSH
18754: LD_INT 103
18756: PUSH
18757: LD_INT 104
18759: PUSH
18760: LD_INT 105
18762: PUSH
18763: LD_INT 106
18765: PUSH
18766: LD_INT 107
18768: PUSH
18769: LD_INT 108
18771: PUSH
18772: LD_INT 109
18774: PUSH
18775: LD_INT 110
18777: PUSH
18778: LD_INT 111
18780: PUSH
18781: LD_INT 112
18783: PUSH
18784: LD_INT 113
18786: PUSH
18787: LD_INT 114
18789: PUSH
18790: LD_INT 116
18792: PUSH
18793: LD_INT 117
18795: PUSH
18796: LD_INT 118
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: ST_TO_ADDR
18822: GO 20061
18824: LD_INT 14
18826: DOUBLE
18827: EQUAL
18828: IFTRUE 18832
18830: GO 19056
18832: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18833: LD_ADDR_VAR 0 2
18837: PUSH
18838: LD_INT 1
18840: PUSH
18841: LD_INT 2
18843: PUSH
18844: LD_INT 3
18846: PUSH
18847: LD_INT 4
18849: PUSH
18850: LD_INT 5
18852: PUSH
18853: LD_INT 6
18855: PUSH
18856: LD_INT 7
18858: PUSH
18859: LD_INT 8
18861: PUSH
18862: LD_INT 9
18864: PUSH
18865: LD_INT 10
18867: PUSH
18868: LD_INT 11
18870: PUSH
18871: LD_INT 12
18873: PUSH
18874: LD_INT 13
18876: PUSH
18877: LD_INT 14
18879: PUSH
18880: LD_INT 15
18882: PUSH
18883: LD_INT 16
18885: PUSH
18886: LD_INT 17
18888: PUSH
18889: LD_INT 18
18891: PUSH
18892: LD_INT 19
18894: PUSH
18895: LD_INT 20
18897: PUSH
18898: LD_INT 21
18900: PUSH
18901: LD_INT 22
18903: PUSH
18904: LD_INT 23
18906: PUSH
18907: LD_INT 24
18909: PUSH
18910: LD_INT 25
18912: PUSH
18913: LD_INT 26
18915: PUSH
18916: LD_INT 27
18918: PUSH
18919: LD_INT 28
18921: PUSH
18922: LD_INT 29
18924: PUSH
18925: LD_INT 30
18927: PUSH
18928: LD_INT 31
18930: PUSH
18931: LD_INT 32
18933: PUSH
18934: LD_INT 33
18936: PUSH
18937: LD_INT 34
18939: PUSH
18940: LD_INT 36
18942: PUSH
18943: EMPTY
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: LIST
18965: LIST
18966: LIST
18967: LIST
18968: LIST
18969: LIST
18970: LIST
18971: LIST
18972: LIST
18973: LIST
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: PUSH
18980: LD_INT 101
18982: PUSH
18983: LD_INT 102
18985: PUSH
18986: LD_INT 103
18988: PUSH
18989: LD_INT 104
18991: PUSH
18992: LD_INT 105
18994: PUSH
18995: LD_INT 106
18997: PUSH
18998: LD_INT 107
19000: PUSH
19001: LD_INT 108
19003: PUSH
19004: LD_INT 109
19006: PUSH
19007: LD_INT 110
19009: PUSH
19010: LD_INT 111
19012: PUSH
19013: LD_INT 112
19015: PUSH
19016: LD_INT 113
19018: PUSH
19019: LD_INT 114
19021: PUSH
19022: LD_INT 116
19024: PUSH
19025: LD_INT 117
19027: PUSH
19028: LD_INT 118
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: ST_TO_ADDR
19054: GO 20061
19056: LD_INT 15
19058: DOUBLE
19059: EQUAL
19060: IFTRUE 19064
19062: GO 19288
19064: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
19065: LD_ADDR_VAR 0 2
19069: PUSH
19070: LD_INT 1
19072: PUSH
19073: LD_INT 2
19075: PUSH
19076: LD_INT 3
19078: PUSH
19079: LD_INT 4
19081: PUSH
19082: LD_INT 5
19084: PUSH
19085: LD_INT 6
19087: PUSH
19088: LD_INT 7
19090: PUSH
19091: LD_INT 8
19093: PUSH
19094: LD_INT 9
19096: PUSH
19097: LD_INT 10
19099: PUSH
19100: LD_INT 11
19102: PUSH
19103: LD_INT 12
19105: PUSH
19106: LD_INT 13
19108: PUSH
19109: LD_INT 14
19111: PUSH
19112: LD_INT 15
19114: PUSH
19115: LD_INT 16
19117: PUSH
19118: LD_INT 17
19120: PUSH
19121: LD_INT 18
19123: PUSH
19124: LD_INT 19
19126: PUSH
19127: LD_INT 20
19129: PUSH
19130: LD_INT 21
19132: PUSH
19133: LD_INT 22
19135: PUSH
19136: LD_INT 23
19138: PUSH
19139: LD_INT 24
19141: PUSH
19142: LD_INT 25
19144: PUSH
19145: LD_INT 26
19147: PUSH
19148: LD_INT 27
19150: PUSH
19151: LD_INT 28
19153: PUSH
19154: LD_INT 29
19156: PUSH
19157: LD_INT 30
19159: PUSH
19160: LD_INT 31
19162: PUSH
19163: LD_INT 32
19165: PUSH
19166: LD_INT 33
19168: PUSH
19169: LD_INT 34
19171: PUSH
19172: LD_INT 36
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 101
19214: PUSH
19215: LD_INT 102
19217: PUSH
19218: LD_INT 103
19220: PUSH
19221: LD_INT 104
19223: PUSH
19224: LD_INT 105
19226: PUSH
19227: LD_INT 106
19229: PUSH
19230: LD_INT 107
19232: PUSH
19233: LD_INT 108
19235: PUSH
19236: LD_INT 109
19238: PUSH
19239: LD_INT 110
19241: PUSH
19242: LD_INT 111
19244: PUSH
19245: LD_INT 112
19247: PUSH
19248: LD_INT 113
19250: PUSH
19251: LD_INT 114
19253: PUSH
19254: LD_INT 116
19256: PUSH
19257: LD_INT 117
19259: PUSH
19260: LD_INT 118
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: ST_TO_ADDR
19286: GO 20061
19288: LD_INT 16
19290: DOUBLE
19291: EQUAL
19292: IFTRUE 19296
19294: GO 19432
19296: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19297: LD_ADDR_VAR 0 2
19301: PUSH
19302: LD_INT 2
19304: PUSH
19305: LD_INT 4
19307: PUSH
19308: LD_INT 5
19310: PUSH
19311: LD_INT 7
19313: PUSH
19314: LD_INT 11
19316: PUSH
19317: LD_INT 12
19319: PUSH
19320: LD_INT 15
19322: PUSH
19323: LD_INT 16
19325: PUSH
19326: LD_INT 20
19328: PUSH
19329: LD_INT 21
19331: PUSH
19332: LD_INT 22
19334: PUSH
19335: LD_INT 23
19337: PUSH
19338: LD_INT 25
19340: PUSH
19341: LD_INT 26
19343: PUSH
19344: LD_INT 30
19346: PUSH
19347: LD_INT 31
19349: PUSH
19350: LD_INT 32
19352: PUSH
19353: LD_INT 33
19355: PUSH
19356: LD_INT 34
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 101
19382: PUSH
19383: LD_INT 102
19385: PUSH
19386: LD_INT 103
19388: PUSH
19389: LD_INT 106
19391: PUSH
19392: LD_INT 108
19394: PUSH
19395: LD_INT 112
19397: PUSH
19398: LD_INT 113
19400: PUSH
19401: LD_INT 114
19403: PUSH
19404: LD_INT 116
19406: PUSH
19407: LD_INT 117
19409: PUSH
19410: LD_INT 118
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: LIST
19417: LIST
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: ST_TO_ADDR
19430: GO 20061
19432: LD_INT 17
19434: DOUBLE
19435: EQUAL
19436: IFTRUE 19440
19438: GO 19664
19440: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19441: LD_ADDR_VAR 0 2
19445: PUSH
19446: LD_INT 1
19448: PUSH
19449: LD_INT 2
19451: PUSH
19452: LD_INT 3
19454: PUSH
19455: LD_INT 4
19457: PUSH
19458: LD_INT 5
19460: PUSH
19461: LD_INT 6
19463: PUSH
19464: LD_INT 7
19466: PUSH
19467: LD_INT 8
19469: PUSH
19470: LD_INT 9
19472: PUSH
19473: LD_INT 10
19475: PUSH
19476: LD_INT 11
19478: PUSH
19479: LD_INT 12
19481: PUSH
19482: LD_INT 13
19484: PUSH
19485: LD_INT 14
19487: PUSH
19488: LD_INT 15
19490: PUSH
19491: LD_INT 16
19493: PUSH
19494: LD_INT 17
19496: PUSH
19497: LD_INT 18
19499: PUSH
19500: LD_INT 19
19502: PUSH
19503: LD_INT 20
19505: PUSH
19506: LD_INT 21
19508: PUSH
19509: LD_INT 22
19511: PUSH
19512: LD_INT 23
19514: PUSH
19515: LD_INT 24
19517: PUSH
19518: LD_INT 25
19520: PUSH
19521: LD_INT 26
19523: PUSH
19524: LD_INT 27
19526: PUSH
19527: LD_INT 28
19529: PUSH
19530: LD_INT 29
19532: PUSH
19533: LD_INT 30
19535: PUSH
19536: LD_INT 31
19538: PUSH
19539: LD_INT 32
19541: PUSH
19542: LD_INT 33
19544: PUSH
19545: LD_INT 34
19547: PUSH
19548: LD_INT 36
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 101
19590: PUSH
19591: LD_INT 102
19593: PUSH
19594: LD_INT 103
19596: PUSH
19597: LD_INT 104
19599: PUSH
19600: LD_INT 105
19602: PUSH
19603: LD_INT 106
19605: PUSH
19606: LD_INT 107
19608: PUSH
19609: LD_INT 108
19611: PUSH
19612: LD_INT 109
19614: PUSH
19615: LD_INT 110
19617: PUSH
19618: LD_INT 111
19620: PUSH
19621: LD_INT 112
19623: PUSH
19624: LD_INT 113
19626: PUSH
19627: LD_INT 114
19629: PUSH
19630: LD_INT 116
19632: PUSH
19633: LD_INT 117
19635: PUSH
19636: LD_INT 118
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: LIST
19643: LIST
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: LIST
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: LIST
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: ST_TO_ADDR
19662: GO 20061
19664: LD_INT 18
19666: DOUBLE
19667: EQUAL
19668: IFTRUE 19672
19670: GO 19820
19672: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19673: LD_ADDR_VAR 0 2
19677: PUSH
19678: LD_INT 2
19680: PUSH
19681: LD_INT 4
19683: PUSH
19684: LD_INT 5
19686: PUSH
19687: LD_INT 7
19689: PUSH
19690: LD_INT 11
19692: PUSH
19693: LD_INT 12
19695: PUSH
19696: LD_INT 15
19698: PUSH
19699: LD_INT 16
19701: PUSH
19702: LD_INT 20
19704: PUSH
19705: LD_INT 21
19707: PUSH
19708: LD_INT 22
19710: PUSH
19711: LD_INT 23
19713: PUSH
19714: LD_INT 25
19716: PUSH
19717: LD_INT 26
19719: PUSH
19720: LD_INT 30
19722: PUSH
19723: LD_INT 31
19725: PUSH
19726: LD_INT 32
19728: PUSH
19729: LD_INT 33
19731: PUSH
19732: LD_INT 34
19734: PUSH
19735: LD_INT 35
19737: PUSH
19738: LD_INT 36
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: LIST
19745: LIST
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: LIST
19760: LIST
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 101
19766: PUSH
19767: LD_INT 102
19769: PUSH
19770: LD_INT 103
19772: PUSH
19773: LD_INT 106
19775: PUSH
19776: LD_INT 108
19778: PUSH
19779: LD_INT 112
19781: PUSH
19782: LD_INT 113
19784: PUSH
19785: LD_INT 114
19787: PUSH
19788: LD_INT 115
19790: PUSH
19791: LD_INT 116
19793: PUSH
19794: LD_INT 117
19796: PUSH
19797: LD_INT 118
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: ST_TO_ADDR
19818: GO 20061
19820: LD_INT 19
19822: DOUBLE
19823: EQUAL
19824: IFTRUE 19828
19826: GO 20060
19828: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19829: LD_ADDR_VAR 0 2
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: LD_INT 2
19839: PUSH
19840: LD_INT 3
19842: PUSH
19843: LD_INT 4
19845: PUSH
19846: LD_INT 5
19848: PUSH
19849: LD_INT 6
19851: PUSH
19852: LD_INT 7
19854: PUSH
19855: LD_INT 8
19857: PUSH
19858: LD_INT 9
19860: PUSH
19861: LD_INT 10
19863: PUSH
19864: LD_INT 11
19866: PUSH
19867: LD_INT 12
19869: PUSH
19870: LD_INT 13
19872: PUSH
19873: LD_INT 14
19875: PUSH
19876: LD_INT 15
19878: PUSH
19879: LD_INT 16
19881: PUSH
19882: LD_INT 17
19884: PUSH
19885: LD_INT 18
19887: PUSH
19888: LD_INT 19
19890: PUSH
19891: LD_INT 20
19893: PUSH
19894: LD_INT 21
19896: PUSH
19897: LD_INT 22
19899: PUSH
19900: LD_INT 23
19902: PUSH
19903: LD_INT 24
19905: PUSH
19906: LD_INT 25
19908: PUSH
19909: LD_INT 26
19911: PUSH
19912: LD_INT 27
19914: PUSH
19915: LD_INT 28
19917: PUSH
19918: LD_INT 29
19920: PUSH
19921: LD_INT 30
19923: PUSH
19924: LD_INT 31
19926: PUSH
19927: LD_INT 32
19929: PUSH
19930: LD_INT 33
19932: PUSH
19933: LD_INT 34
19935: PUSH
19936: LD_INT 35
19938: PUSH
19939: LD_INT 36
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: LIST
19946: LIST
19947: LIST
19948: LIST
19949: LIST
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: LIST
19979: PUSH
19980: LD_INT 101
19982: PUSH
19983: LD_INT 102
19985: PUSH
19986: LD_INT 103
19988: PUSH
19989: LD_INT 104
19991: PUSH
19992: LD_INT 105
19994: PUSH
19995: LD_INT 106
19997: PUSH
19998: LD_INT 107
20000: PUSH
20001: LD_INT 108
20003: PUSH
20004: LD_INT 109
20006: PUSH
20007: LD_INT 110
20009: PUSH
20010: LD_INT 111
20012: PUSH
20013: LD_INT 112
20015: PUSH
20016: LD_INT 113
20018: PUSH
20019: LD_INT 114
20021: PUSH
20022: LD_INT 115
20024: PUSH
20025: LD_INT 116
20027: PUSH
20028: LD_INT 117
20030: PUSH
20031: LD_INT 118
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: LIST
20052: LIST
20053: PUSH
20054: EMPTY
20055: LIST
20056: LIST
20057: ST_TO_ADDR
20058: GO 20061
20060: POP
// end else
20061: GO 20292
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
20063: LD_ADDR_VAR 0 2
20067: PUSH
20068: LD_INT 1
20070: PUSH
20071: LD_INT 2
20073: PUSH
20074: LD_INT 3
20076: PUSH
20077: LD_INT 4
20079: PUSH
20080: LD_INT 5
20082: PUSH
20083: LD_INT 6
20085: PUSH
20086: LD_INT 7
20088: PUSH
20089: LD_INT 8
20091: PUSH
20092: LD_INT 9
20094: PUSH
20095: LD_INT 10
20097: PUSH
20098: LD_INT 11
20100: PUSH
20101: LD_INT 12
20103: PUSH
20104: LD_INT 13
20106: PUSH
20107: LD_INT 14
20109: PUSH
20110: LD_INT 15
20112: PUSH
20113: LD_INT 16
20115: PUSH
20116: LD_INT 17
20118: PUSH
20119: LD_INT 18
20121: PUSH
20122: LD_INT 19
20124: PUSH
20125: LD_INT 20
20127: PUSH
20128: LD_INT 21
20130: PUSH
20131: LD_INT 22
20133: PUSH
20134: LD_INT 23
20136: PUSH
20137: LD_INT 24
20139: PUSH
20140: LD_INT 25
20142: PUSH
20143: LD_INT 26
20145: PUSH
20146: LD_INT 27
20148: PUSH
20149: LD_INT 28
20151: PUSH
20152: LD_INT 29
20154: PUSH
20155: LD_INT 30
20157: PUSH
20158: LD_INT 31
20160: PUSH
20161: LD_INT 32
20163: PUSH
20164: LD_INT 33
20166: PUSH
20167: LD_INT 34
20169: PUSH
20170: LD_INT 35
20172: PUSH
20173: LD_INT 36
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: LIST
20197: LIST
20198: LIST
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 101
20216: PUSH
20217: LD_INT 102
20219: PUSH
20220: LD_INT 103
20222: PUSH
20223: LD_INT 104
20225: PUSH
20226: LD_INT 105
20228: PUSH
20229: LD_INT 106
20231: PUSH
20232: LD_INT 107
20234: PUSH
20235: LD_INT 108
20237: PUSH
20238: LD_INT 109
20240: PUSH
20241: LD_INT 110
20243: PUSH
20244: LD_INT 111
20246: PUSH
20247: LD_INT 112
20249: PUSH
20250: LD_INT 113
20252: PUSH
20253: LD_INT 114
20255: PUSH
20256: LD_INT 115
20258: PUSH
20259: LD_INT 116
20261: PUSH
20262: LD_INT 117
20264: PUSH
20265: LD_INT 118
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: LIST
20286: LIST
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: ST_TO_ADDR
// if result then
20292: LD_VAR 0 2
20296: IFFALSE 21082
// begin normal :=  ;
20298: LD_ADDR_VAR 0 5
20302: PUSH
20303: LD_STRING 
20305: ST_TO_ADDR
// hardcore :=  ;
20306: LD_ADDR_VAR 0 6
20310: PUSH
20311: LD_STRING 
20313: ST_TO_ADDR
// active :=  ;
20314: LD_ADDR_VAR 0 7
20318: PUSH
20319: LD_STRING 
20321: ST_TO_ADDR
// for i = 1 to normalCounter do
20322: LD_ADDR_VAR 0 8
20326: PUSH
20327: DOUBLE
20328: LD_INT 1
20330: DEC
20331: ST_TO_ADDR
20332: LD_EXP 59
20336: PUSH
20337: FOR_TO
20338: IFFALSE 20439
// begin tmp := 0 ;
20340: LD_ADDR_VAR 0 3
20344: PUSH
20345: LD_STRING 0
20347: ST_TO_ADDR
// if result [ 1 ] then
20348: LD_VAR 0 2
20352: PUSH
20353: LD_INT 1
20355: ARRAY
20356: IFFALSE 20421
// if result [ 1 ] [ 1 ] = i then
20358: LD_VAR 0 2
20362: PUSH
20363: LD_INT 1
20365: ARRAY
20366: PUSH
20367: LD_INT 1
20369: ARRAY
20370: PUSH
20371: LD_VAR 0 8
20375: EQUAL
20376: IFFALSE 20421
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20378: LD_ADDR_VAR 0 2
20382: PUSH
20383: LD_VAR 0 2
20387: PPUSH
20388: LD_INT 1
20390: PPUSH
20391: LD_VAR 0 2
20395: PUSH
20396: LD_INT 1
20398: ARRAY
20399: PPUSH
20400: LD_INT 1
20402: PPUSH
20403: CALL_OW 3
20407: PPUSH
20408: CALL_OW 1
20412: ST_TO_ADDR
// tmp := 1 ;
20413: LD_ADDR_VAR 0 3
20417: PUSH
20418: LD_STRING 1
20420: ST_TO_ADDR
// end ; normal := normal & tmp ;
20421: LD_ADDR_VAR 0 5
20425: PUSH
20426: LD_VAR 0 5
20430: PUSH
20431: LD_VAR 0 3
20435: STR
20436: ST_TO_ADDR
// end ;
20437: GO 20337
20439: POP
20440: POP
// for i = 1 to hardcoreCounter do
20441: LD_ADDR_VAR 0 8
20445: PUSH
20446: DOUBLE
20447: LD_INT 1
20449: DEC
20450: ST_TO_ADDR
20451: LD_EXP 60
20455: PUSH
20456: FOR_TO
20457: IFFALSE 20562
// begin tmp := 0 ;
20459: LD_ADDR_VAR 0 3
20463: PUSH
20464: LD_STRING 0
20466: ST_TO_ADDR
// if result [ 2 ] then
20467: LD_VAR 0 2
20471: PUSH
20472: LD_INT 2
20474: ARRAY
20475: IFFALSE 20544
// if result [ 2 ] [ 1 ] = 100 + i then
20477: LD_VAR 0 2
20481: PUSH
20482: LD_INT 2
20484: ARRAY
20485: PUSH
20486: LD_INT 1
20488: ARRAY
20489: PUSH
20490: LD_INT 100
20492: PUSH
20493: LD_VAR 0 8
20497: PLUS
20498: EQUAL
20499: IFFALSE 20544
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20501: LD_ADDR_VAR 0 2
20505: PUSH
20506: LD_VAR 0 2
20510: PPUSH
20511: LD_INT 2
20513: PPUSH
20514: LD_VAR 0 2
20518: PUSH
20519: LD_INT 2
20521: ARRAY
20522: PPUSH
20523: LD_INT 1
20525: PPUSH
20526: CALL_OW 3
20530: PPUSH
20531: CALL_OW 1
20535: ST_TO_ADDR
// tmp := 1 ;
20536: LD_ADDR_VAR 0 3
20540: PUSH
20541: LD_STRING 1
20543: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20544: LD_ADDR_VAR 0 6
20548: PUSH
20549: LD_VAR 0 6
20553: PUSH
20554: LD_VAR 0 3
20558: STR
20559: ST_TO_ADDR
// end ;
20560: GO 20456
20562: POP
20563: POP
// if isGameLoad then
20564: LD_VAR 0 1
20568: IFFALSE 21043
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20570: LD_ADDR_VAR 0 4
20574: PUSH
20575: LD_EXP 63
20579: PUSH
20580: LD_EXP 62
20584: PUSH
20585: LD_EXP 64
20589: PUSH
20590: LD_EXP 61
20594: PUSH
20595: LD_EXP 65
20599: PUSH
20600: LD_EXP 66
20604: PUSH
20605: LD_EXP 67
20609: PUSH
20610: LD_EXP 68
20614: PUSH
20615: LD_EXP 69
20619: PUSH
20620: LD_EXP 70
20624: PUSH
20625: LD_EXP 71
20629: PUSH
20630: LD_EXP 72
20634: PUSH
20635: LD_EXP 73
20639: PUSH
20640: LD_EXP 74
20644: PUSH
20645: LD_EXP 82
20649: PUSH
20650: LD_EXP 83
20654: PUSH
20655: LD_EXP 84
20659: PUSH
20660: LD_EXP 85
20664: PUSH
20665: LD_EXP 87
20669: PUSH
20670: LD_EXP 88
20674: PUSH
20675: LD_EXP 89
20679: PUSH
20680: LD_EXP 92
20684: PUSH
20685: LD_EXP 94
20689: PUSH
20690: LD_EXP 95
20694: PUSH
20695: LD_EXP 96
20699: PUSH
20700: LD_EXP 98
20704: PUSH
20705: LD_EXP 99
20709: PUSH
20710: LD_EXP 102
20714: PUSH
20715: LD_EXP 103
20719: PUSH
20720: LD_EXP 104
20724: PUSH
20725: LD_EXP 105
20729: PUSH
20730: LD_EXP 106
20734: PUSH
20735: LD_EXP 107
20739: PUSH
20740: LD_EXP 108
20744: PUSH
20745: LD_EXP 109
20749: PUSH
20750: LD_EXP 110
20754: PUSH
20755: LD_EXP 75
20759: PUSH
20760: LD_EXP 76
20764: PUSH
20765: LD_EXP 79
20769: PUSH
20770: LD_EXP 80
20774: PUSH
20775: LD_EXP 81
20779: PUSH
20780: LD_EXP 77
20784: PUSH
20785: LD_EXP 78
20789: PUSH
20790: LD_EXP 86
20794: PUSH
20795: LD_EXP 90
20799: PUSH
20800: LD_EXP 91
20804: PUSH
20805: LD_EXP 93
20809: PUSH
20810: LD_EXP 97
20814: PUSH
20815: LD_EXP 100
20819: PUSH
20820: LD_EXP 101
20824: PUSH
20825: LD_EXP 111
20829: PUSH
20830: LD_EXP 112
20834: PUSH
20835: LD_EXP 113
20839: PUSH
20840: LD_EXP 114
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: LIST
20858: LIST
20859: LIST
20860: LIST
20861: LIST
20862: LIST
20863: LIST
20864: LIST
20865: LIST
20866: LIST
20867: LIST
20868: LIST
20869: LIST
20870: LIST
20871: LIST
20872: LIST
20873: LIST
20874: LIST
20875: LIST
20876: LIST
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: ST_TO_ADDR
// tmp :=  ;
20901: LD_ADDR_VAR 0 3
20905: PUSH
20906: LD_STRING 
20908: ST_TO_ADDR
// for i = 1 to normalCounter do
20909: LD_ADDR_VAR 0 8
20913: PUSH
20914: DOUBLE
20915: LD_INT 1
20917: DEC
20918: ST_TO_ADDR
20919: LD_EXP 59
20923: PUSH
20924: FOR_TO
20925: IFFALSE 20961
// begin if flags [ i ] then
20927: LD_VAR 0 4
20931: PUSH
20932: LD_VAR 0 8
20936: ARRAY
20937: IFFALSE 20959
// tmp := tmp & i & ; ;
20939: LD_ADDR_VAR 0 3
20943: PUSH
20944: LD_VAR 0 3
20948: PUSH
20949: LD_VAR 0 8
20953: STR
20954: PUSH
20955: LD_STRING ;
20957: STR
20958: ST_TO_ADDR
// end ;
20959: GO 20924
20961: POP
20962: POP
// for i = 1 to hardcoreCounter do
20963: LD_ADDR_VAR 0 8
20967: PUSH
20968: DOUBLE
20969: LD_INT 1
20971: DEC
20972: ST_TO_ADDR
20973: LD_EXP 60
20977: PUSH
20978: FOR_TO
20979: IFFALSE 21025
// begin if flags [ normalCounter + i ] then
20981: LD_VAR 0 4
20985: PUSH
20986: LD_EXP 59
20990: PUSH
20991: LD_VAR 0 8
20995: PLUS
20996: ARRAY
20997: IFFALSE 21023
// tmp := tmp & ( 100 + i ) & ; ;
20999: LD_ADDR_VAR 0 3
21003: PUSH
21004: LD_VAR 0 3
21008: PUSH
21009: LD_INT 100
21011: PUSH
21012: LD_VAR 0 8
21016: PLUS
21017: STR
21018: PUSH
21019: LD_STRING ;
21021: STR
21022: ST_TO_ADDR
// end ;
21023: GO 20978
21025: POP
21026: POP
// if tmp then
21027: LD_VAR 0 3
21031: IFFALSE 21043
// active := tmp ;
21033: LD_ADDR_VAR 0 7
21037: PUSH
21038: LD_VAR 0 3
21042: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
21043: LD_STRING getStreamItemsFromMission("
21045: PUSH
21046: LD_VAR 0 5
21050: STR
21051: PUSH
21052: LD_STRING ","
21054: STR
21055: PUSH
21056: LD_VAR 0 6
21060: STR
21061: PUSH
21062: LD_STRING ","
21064: STR
21065: PUSH
21066: LD_VAR 0 7
21070: STR
21071: PUSH
21072: LD_STRING ")
21074: STR
21075: PPUSH
21076: CALL_OW 559
// end else
21080: GO 21089
// ToLua ( getStreamItemsFromMission("","","") ) ;
21082: LD_STRING getStreamItemsFromMission("","","")
21084: PPUSH
21085: CALL_OW 559
// end ;
21089: LD_VAR 0 2
21093: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
21094: LD_EXP 58
21098: PUSH
21099: LD_EXP 63
21103: AND
21104: IFFALSE 21228
21106: GO 21108
21108: DISABLE
21109: LD_INT 0
21111: PPUSH
21112: PPUSH
// begin enable ;
21113: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
21114: LD_ADDR_VAR 0 2
21118: PUSH
21119: LD_INT 22
21121: PUSH
21122: LD_OWVAR 2
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 2
21133: PUSH
21134: LD_INT 34
21136: PUSH
21137: LD_INT 7
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: LD_INT 34
21146: PUSH
21147: LD_INT 45
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: LD_INT 34
21156: PUSH
21157: LD_INT 28
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PUSH
21164: LD_INT 34
21166: PUSH
21167: LD_INT 47
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PPUSH
21185: CALL_OW 69
21189: ST_TO_ADDR
// if not tmp then
21190: LD_VAR 0 2
21194: NOT
21195: IFFALSE 21199
// exit ;
21197: GO 21228
// for i in tmp do
21199: LD_ADDR_VAR 0 1
21203: PUSH
21204: LD_VAR 0 2
21208: PUSH
21209: FOR_IN
21210: IFFALSE 21226
// begin SetLives ( i , 0 ) ;
21212: LD_VAR 0 1
21216: PPUSH
21217: LD_INT 0
21219: PPUSH
21220: CALL_OW 234
// end ;
21224: GO 21209
21226: POP
21227: POP
// end ;
21228: PPOPN 2
21230: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21231: LD_EXP 58
21235: PUSH
21236: LD_EXP 64
21240: AND
21241: IFFALSE 21325
21243: GO 21245
21245: DISABLE
21246: LD_INT 0
21248: PPUSH
21249: PPUSH
// begin enable ;
21250: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21251: LD_ADDR_VAR 0 2
21255: PUSH
21256: LD_INT 22
21258: PUSH
21259: LD_OWVAR 2
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PUSH
21268: LD_INT 32
21270: PUSH
21271: LD_INT 3
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: PPUSH
21282: CALL_OW 69
21286: ST_TO_ADDR
// if not tmp then
21287: LD_VAR 0 2
21291: NOT
21292: IFFALSE 21296
// exit ;
21294: GO 21325
// for i in tmp do
21296: LD_ADDR_VAR 0 1
21300: PUSH
21301: LD_VAR 0 2
21305: PUSH
21306: FOR_IN
21307: IFFALSE 21323
// begin SetLives ( i , 0 ) ;
21309: LD_VAR 0 1
21313: PPUSH
21314: LD_INT 0
21316: PPUSH
21317: CALL_OW 234
// end ;
21321: GO 21306
21323: POP
21324: POP
// end ;
21325: PPOPN 2
21327: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21328: LD_EXP 58
21332: PUSH
21333: LD_EXP 61
21337: AND
21338: IFFALSE 21431
21340: GO 21342
21342: DISABLE
21343: LD_INT 0
21345: PPUSH
// begin enable ;
21346: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21347: LD_ADDR_VAR 0 1
21351: PUSH
21352: LD_INT 22
21354: PUSH
21355: LD_OWVAR 2
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PUSH
21364: LD_INT 2
21366: PUSH
21367: LD_INT 25
21369: PUSH
21370: LD_INT 5
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 25
21379: PUSH
21380: LD_INT 9
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 25
21389: PUSH
21390: LD_INT 8
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: PPUSH
21407: CALL_OW 69
21411: PUSH
21412: FOR_IN
21413: IFFALSE 21429
// begin SetClass ( i , 1 ) ;
21415: LD_VAR 0 1
21419: PPUSH
21420: LD_INT 1
21422: PPUSH
21423: CALL_OW 336
// end ;
21427: GO 21412
21429: POP
21430: POP
// end ;
21431: PPOPN 1
21433: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21434: LD_EXP 58
21438: PUSH
21439: LD_EXP 62
21443: AND
21444: PUSH
21445: LD_OWVAR 65
21449: PUSH
21450: LD_INT 7
21452: LESS
21453: AND
21454: IFFALSE 21468
21456: GO 21458
21458: DISABLE
// begin enable ;
21459: ENABLE
// game_speed := 7 ;
21460: LD_ADDR_OWVAR 65
21464: PUSH
21465: LD_INT 7
21467: ST_TO_ADDR
// end ;
21468: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21469: LD_EXP 58
21473: PUSH
21474: LD_EXP 65
21478: AND
21479: IFFALSE 21681
21481: GO 21483
21483: DISABLE
21484: LD_INT 0
21486: PPUSH
21487: PPUSH
21488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21489: LD_ADDR_VAR 0 3
21493: PUSH
21494: LD_INT 81
21496: PUSH
21497: LD_OWVAR 2
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: PUSH
21506: LD_INT 21
21508: PUSH
21509: LD_INT 1
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: PUSH
21516: EMPTY
21517: LIST
21518: LIST
21519: PPUSH
21520: CALL_OW 69
21524: ST_TO_ADDR
// if not tmp then
21525: LD_VAR 0 3
21529: NOT
21530: IFFALSE 21534
// exit ;
21532: GO 21681
// if tmp > 5 then
21534: LD_VAR 0 3
21538: PUSH
21539: LD_INT 5
21541: GREATER
21542: IFFALSE 21554
// k := 5 else
21544: LD_ADDR_VAR 0 2
21548: PUSH
21549: LD_INT 5
21551: ST_TO_ADDR
21552: GO 21564
// k := tmp ;
21554: LD_ADDR_VAR 0 2
21558: PUSH
21559: LD_VAR 0 3
21563: ST_TO_ADDR
// for i := 1 to k do
21564: LD_ADDR_VAR 0 1
21568: PUSH
21569: DOUBLE
21570: LD_INT 1
21572: DEC
21573: ST_TO_ADDR
21574: LD_VAR 0 2
21578: PUSH
21579: FOR_TO
21580: IFFALSE 21679
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21582: LD_VAR 0 3
21586: PUSH
21587: LD_VAR 0 1
21591: ARRAY
21592: PPUSH
21593: LD_VAR 0 1
21597: PUSH
21598: LD_INT 4
21600: MOD
21601: PUSH
21602: LD_INT 1
21604: PLUS
21605: PPUSH
21606: CALL_OW 259
21610: PUSH
21611: LD_INT 10
21613: LESS
21614: IFFALSE 21677
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21616: LD_VAR 0 3
21620: PUSH
21621: LD_VAR 0 1
21625: ARRAY
21626: PPUSH
21627: LD_VAR 0 1
21631: PUSH
21632: LD_INT 4
21634: MOD
21635: PUSH
21636: LD_INT 1
21638: PLUS
21639: PPUSH
21640: LD_VAR 0 3
21644: PUSH
21645: LD_VAR 0 1
21649: ARRAY
21650: PPUSH
21651: LD_VAR 0 1
21655: PUSH
21656: LD_INT 4
21658: MOD
21659: PUSH
21660: LD_INT 1
21662: PLUS
21663: PPUSH
21664: CALL_OW 259
21668: PUSH
21669: LD_INT 1
21671: PLUS
21672: PPUSH
21673: CALL_OW 237
21677: GO 21579
21679: POP
21680: POP
// end ;
21681: PPOPN 3
21683: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21684: LD_EXP 58
21688: PUSH
21689: LD_EXP 66
21693: AND
21694: IFFALSE 21714
21696: GO 21698
21698: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21699: LD_INT 4
21701: PPUSH
21702: LD_OWVAR 2
21706: PPUSH
21707: LD_INT 0
21709: PPUSH
21710: CALL_OW 324
21714: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21715: LD_EXP 58
21719: PUSH
21720: LD_EXP 95
21724: AND
21725: IFFALSE 21745
21727: GO 21729
21729: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21730: LD_INT 19
21732: PPUSH
21733: LD_OWVAR 2
21737: PPUSH
21738: LD_INT 0
21740: PPUSH
21741: CALL_OW 324
21745: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21746: LD_EXP 58
21750: PUSH
21751: LD_EXP 67
21755: AND
21756: IFFALSE 21858
21758: GO 21760
21760: DISABLE
21761: LD_INT 0
21763: PPUSH
21764: PPUSH
// begin enable ;
21765: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21766: LD_ADDR_VAR 0 2
21770: PUSH
21771: LD_INT 22
21773: PUSH
21774: LD_OWVAR 2
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PUSH
21783: LD_INT 2
21785: PUSH
21786: LD_INT 34
21788: PUSH
21789: LD_INT 11
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: LD_INT 34
21798: PUSH
21799: LD_INT 30
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: LIST
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PPUSH
21815: CALL_OW 69
21819: ST_TO_ADDR
// if not tmp then
21820: LD_VAR 0 2
21824: NOT
21825: IFFALSE 21829
// exit ;
21827: GO 21858
// for i in tmp do
21829: LD_ADDR_VAR 0 1
21833: PUSH
21834: LD_VAR 0 2
21838: PUSH
21839: FOR_IN
21840: IFFALSE 21856
// begin SetLives ( i , 0 ) ;
21842: LD_VAR 0 1
21846: PPUSH
21847: LD_INT 0
21849: PPUSH
21850: CALL_OW 234
// end ;
21854: GO 21839
21856: POP
21857: POP
// end ;
21858: PPOPN 2
21860: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21861: LD_EXP 58
21865: PUSH
21866: LD_EXP 68
21870: AND
21871: IFFALSE 21891
21873: GO 21875
21875: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21876: LD_INT 32
21878: PPUSH
21879: LD_OWVAR 2
21883: PPUSH
21884: LD_INT 0
21886: PPUSH
21887: CALL_OW 324
21891: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21892: LD_EXP 58
21896: PUSH
21897: LD_EXP 69
21901: AND
21902: IFFALSE 22083
21904: GO 21906
21906: DISABLE
21907: LD_INT 0
21909: PPUSH
21910: PPUSH
21911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21912: LD_ADDR_VAR 0 2
21916: PUSH
21917: LD_INT 22
21919: PUSH
21920: LD_OWVAR 2
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 33
21931: PUSH
21932: LD_INT 3
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: PPUSH
21943: CALL_OW 69
21947: ST_TO_ADDR
// if not tmp then
21948: LD_VAR 0 2
21952: NOT
21953: IFFALSE 21957
// exit ;
21955: GO 22083
// side := 0 ;
21957: LD_ADDR_VAR 0 3
21961: PUSH
21962: LD_INT 0
21964: ST_TO_ADDR
// for i := 1 to 8 do
21965: LD_ADDR_VAR 0 1
21969: PUSH
21970: DOUBLE
21971: LD_INT 1
21973: DEC
21974: ST_TO_ADDR
21975: LD_INT 8
21977: PUSH
21978: FOR_TO
21979: IFFALSE 22027
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21981: LD_OWVAR 2
21985: PUSH
21986: LD_VAR 0 1
21990: NONEQUAL
21991: PUSH
21992: LD_OWVAR 2
21996: PPUSH
21997: LD_VAR 0 1
22001: PPUSH
22002: CALL_OW 81
22006: PUSH
22007: LD_INT 2
22009: EQUAL
22010: AND
22011: IFFALSE 22025
// begin side := i ;
22013: LD_ADDR_VAR 0 3
22017: PUSH
22018: LD_VAR 0 1
22022: ST_TO_ADDR
// break ;
22023: GO 22027
// end ;
22025: GO 21978
22027: POP
22028: POP
// if not side then
22029: LD_VAR 0 3
22033: NOT
22034: IFFALSE 22038
// exit ;
22036: GO 22083
// for i := 1 to tmp do
22038: LD_ADDR_VAR 0 1
22042: PUSH
22043: DOUBLE
22044: LD_INT 1
22046: DEC
22047: ST_TO_ADDR
22048: LD_VAR 0 2
22052: PUSH
22053: FOR_TO
22054: IFFALSE 22081
// if Prob ( 60 ) then
22056: LD_INT 60
22058: PPUSH
22059: CALL_OW 13
22063: IFFALSE 22079
// SetSide ( i , side ) ;
22065: LD_VAR 0 1
22069: PPUSH
22070: LD_VAR 0 3
22074: PPUSH
22075: CALL_OW 235
22079: GO 22053
22081: POP
22082: POP
// end ;
22083: PPOPN 3
22085: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
22086: LD_EXP 58
22090: PUSH
22091: LD_EXP 71
22095: AND
22096: IFFALSE 22215
22098: GO 22100
22100: DISABLE
22101: LD_INT 0
22103: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
22104: LD_ADDR_VAR 0 1
22108: PUSH
22109: LD_INT 22
22111: PUSH
22112: LD_OWVAR 2
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 21
22123: PUSH
22124: LD_INT 1
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 3
22133: PUSH
22134: LD_INT 23
22136: PUSH
22137: LD_INT 0
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: LIST
22152: PPUSH
22153: CALL_OW 69
22157: PUSH
22158: FOR_IN
22159: IFFALSE 22213
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
22161: LD_VAR 0 1
22165: PPUSH
22166: CALL_OW 257
22170: PUSH
22171: LD_INT 1
22173: PUSH
22174: LD_INT 2
22176: PUSH
22177: LD_INT 3
22179: PUSH
22180: LD_INT 4
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: IN
22189: IFFALSE 22211
// SetClass ( un , rand ( 1 , 4 ) ) ;
22191: LD_VAR 0 1
22195: PPUSH
22196: LD_INT 1
22198: PPUSH
22199: LD_INT 4
22201: PPUSH
22202: CALL_OW 12
22206: PPUSH
22207: CALL_OW 336
22211: GO 22158
22213: POP
22214: POP
// end ;
22215: PPOPN 1
22217: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22218: LD_EXP 58
22222: PUSH
22223: LD_EXP 70
22227: AND
22228: IFFALSE 22307
22230: GO 22232
22232: DISABLE
22233: LD_INT 0
22235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22236: LD_ADDR_VAR 0 1
22240: PUSH
22241: LD_INT 22
22243: PUSH
22244: LD_OWVAR 2
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 21
22255: PUSH
22256: LD_INT 3
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PPUSH
22267: CALL_OW 69
22271: ST_TO_ADDR
// if not tmp then
22272: LD_VAR 0 1
22276: NOT
22277: IFFALSE 22281
// exit ;
22279: GO 22307
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22281: LD_VAR 0 1
22285: PUSH
22286: LD_INT 1
22288: PPUSH
22289: LD_VAR 0 1
22293: PPUSH
22294: CALL_OW 12
22298: ARRAY
22299: PPUSH
22300: LD_INT 100
22302: PPUSH
22303: CALL_OW 234
// end ;
22307: PPOPN 1
22309: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22310: LD_EXP 58
22314: PUSH
22315: LD_EXP 72
22319: AND
22320: IFFALSE 22418
22322: GO 22324
22324: DISABLE
22325: LD_INT 0
22327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22328: LD_ADDR_VAR 0 1
22332: PUSH
22333: LD_INT 22
22335: PUSH
22336: LD_OWVAR 2
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: PUSH
22345: LD_INT 21
22347: PUSH
22348: LD_INT 1
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PPUSH
22359: CALL_OW 69
22363: ST_TO_ADDR
// if not tmp then
22364: LD_VAR 0 1
22368: NOT
22369: IFFALSE 22373
// exit ;
22371: GO 22418
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22373: LD_VAR 0 1
22377: PUSH
22378: LD_INT 1
22380: PPUSH
22381: LD_VAR 0 1
22385: PPUSH
22386: CALL_OW 12
22390: ARRAY
22391: PPUSH
22392: LD_INT 1
22394: PPUSH
22395: LD_INT 4
22397: PPUSH
22398: CALL_OW 12
22402: PPUSH
22403: LD_INT 3000
22405: PPUSH
22406: LD_INT 9000
22408: PPUSH
22409: CALL_OW 12
22413: PPUSH
22414: CALL_OW 492
// end ;
22418: PPOPN 1
22420: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22421: LD_EXP 58
22425: PUSH
22426: LD_EXP 73
22430: AND
22431: IFFALSE 22451
22433: GO 22435
22435: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22436: LD_INT 1
22438: PPUSH
22439: LD_OWVAR 2
22443: PPUSH
22444: LD_INT 0
22446: PPUSH
22447: CALL_OW 324
22451: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22452: LD_EXP 58
22456: PUSH
22457: LD_EXP 74
22461: AND
22462: IFFALSE 22545
22464: GO 22466
22466: DISABLE
22467: LD_INT 0
22469: PPUSH
22470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22471: LD_ADDR_VAR 0 2
22475: PUSH
22476: LD_INT 22
22478: PUSH
22479: LD_OWVAR 2
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 21
22490: PUSH
22491: LD_INT 3
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: PPUSH
22502: CALL_OW 69
22506: ST_TO_ADDR
// if not tmp then
22507: LD_VAR 0 2
22511: NOT
22512: IFFALSE 22516
// exit ;
22514: GO 22545
// for i in tmp do
22516: LD_ADDR_VAR 0 1
22520: PUSH
22521: LD_VAR 0 2
22525: PUSH
22526: FOR_IN
22527: IFFALSE 22543
// SetBLevel ( i , 10 ) ;
22529: LD_VAR 0 1
22533: PPUSH
22534: LD_INT 10
22536: PPUSH
22537: CALL_OW 241
22541: GO 22526
22543: POP
22544: POP
// end ;
22545: PPOPN 2
22547: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22548: LD_EXP 58
22552: PUSH
22553: LD_EXP 75
22557: AND
22558: IFFALSE 22669
22560: GO 22562
22562: DISABLE
22563: LD_INT 0
22565: PPUSH
22566: PPUSH
22567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22568: LD_ADDR_VAR 0 3
22572: PUSH
22573: LD_INT 22
22575: PUSH
22576: LD_OWVAR 2
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 25
22587: PUSH
22588: LD_INT 1
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PPUSH
22599: CALL_OW 69
22603: ST_TO_ADDR
// if not tmp then
22604: LD_VAR 0 3
22608: NOT
22609: IFFALSE 22613
// exit ;
22611: GO 22669
// un := tmp [ rand ( 1 , tmp ) ] ;
22613: LD_ADDR_VAR 0 2
22617: PUSH
22618: LD_VAR 0 3
22622: PUSH
22623: LD_INT 1
22625: PPUSH
22626: LD_VAR 0 3
22630: PPUSH
22631: CALL_OW 12
22635: ARRAY
22636: ST_TO_ADDR
// if Crawls ( un ) then
22637: LD_VAR 0 2
22641: PPUSH
22642: CALL_OW 318
22646: IFFALSE 22657
// ComWalk ( un ) ;
22648: LD_VAR 0 2
22652: PPUSH
22653: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22657: LD_VAR 0 2
22661: PPUSH
22662: LD_INT 5
22664: PPUSH
22665: CALL_OW 336
// end ;
22669: PPOPN 3
22671: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22672: LD_EXP 58
22676: PUSH
22677: LD_EXP 76
22681: AND
22682: PUSH
22683: LD_OWVAR 67
22687: PUSH
22688: LD_INT 4
22690: LESS
22691: AND
22692: IFFALSE 22711
22694: GO 22696
22696: DISABLE
// begin Difficulty := Difficulty + 1 ;
22697: LD_ADDR_OWVAR 67
22701: PUSH
22702: LD_OWVAR 67
22706: PUSH
22707: LD_INT 1
22709: PLUS
22710: ST_TO_ADDR
// end ;
22711: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22712: LD_EXP 58
22716: PUSH
22717: LD_EXP 77
22721: AND
22722: IFFALSE 22825
22724: GO 22726
22726: DISABLE
22727: LD_INT 0
22729: PPUSH
// begin for i := 1 to 5 do
22730: LD_ADDR_VAR 0 1
22734: PUSH
22735: DOUBLE
22736: LD_INT 1
22738: DEC
22739: ST_TO_ADDR
22740: LD_INT 5
22742: PUSH
22743: FOR_TO
22744: IFFALSE 22823
// begin uc_nation := nation_nature ;
22746: LD_ADDR_OWVAR 21
22750: PUSH
22751: LD_INT 0
22753: ST_TO_ADDR
// uc_side := 0 ;
22754: LD_ADDR_OWVAR 20
22758: PUSH
22759: LD_INT 0
22761: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22762: LD_ADDR_OWVAR 29
22766: PUSH
22767: LD_INT 12
22769: PUSH
22770: LD_INT 12
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: ST_TO_ADDR
// hc_agressivity := 20 ;
22777: LD_ADDR_OWVAR 35
22781: PUSH
22782: LD_INT 20
22784: ST_TO_ADDR
// hc_class := class_tiger ;
22785: LD_ADDR_OWVAR 28
22789: PUSH
22790: LD_INT 14
22792: ST_TO_ADDR
// hc_gallery :=  ;
22793: LD_ADDR_OWVAR 33
22797: PUSH
22798: LD_STRING 
22800: ST_TO_ADDR
// hc_name :=  ;
22801: LD_ADDR_OWVAR 26
22805: PUSH
22806: LD_STRING 
22808: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22809: CALL_OW 44
22813: PPUSH
22814: LD_INT 0
22816: PPUSH
22817: CALL_OW 51
// end ;
22821: GO 22743
22823: POP
22824: POP
// end ;
22825: PPOPN 1
22827: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22828: LD_EXP 58
22832: PUSH
22833: LD_EXP 78
22837: AND
22838: IFFALSE 22847
22840: GO 22842
22842: DISABLE
// StreamSibBomb ;
22843: CALL 22848 0 0
22847: END
// export function StreamSibBomb ; var i , x , y ; begin
22848: LD_INT 0
22850: PPUSH
22851: PPUSH
22852: PPUSH
22853: PPUSH
// result := false ;
22854: LD_ADDR_VAR 0 1
22858: PUSH
22859: LD_INT 0
22861: ST_TO_ADDR
// for i := 1 to 16 do
22862: LD_ADDR_VAR 0 2
22866: PUSH
22867: DOUBLE
22868: LD_INT 1
22870: DEC
22871: ST_TO_ADDR
22872: LD_INT 16
22874: PUSH
22875: FOR_TO
22876: IFFALSE 23075
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22878: LD_ADDR_VAR 0 3
22882: PUSH
22883: LD_INT 10
22885: PUSH
22886: LD_INT 20
22888: PUSH
22889: LD_INT 30
22891: PUSH
22892: LD_INT 40
22894: PUSH
22895: LD_INT 50
22897: PUSH
22898: LD_INT 60
22900: PUSH
22901: LD_INT 70
22903: PUSH
22904: LD_INT 80
22906: PUSH
22907: LD_INT 90
22909: PUSH
22910: LD_INT 100
22912: PUSH
22913: LD_INT 110
22915: PUSH
22916: LD_INT 120
22918: PUSH
22919: LD_INT 130
22921: PUSH
22922: LD_INT 140
22924: PUSH
22925: LD_INT 150
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: PUSH
22945: LD_INT 1
22947: PPUSH
22948: LD_INT 15
22950: PPUSH
22951: CALL_OW 12
22955: ARRAY
22956: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22957: LD_ADDR_VAR 0 4
22961: PUSH
22962: LD_INT 10
22964: PUSH
22965: LD_INT 20
22967: PUSH
22968: LD_INT 30
22970: PUSH
22971: LD_INT 40
22973: PUSH
22974: LD_INT 50
22976: PUSH
22977: LD_INT 60
22979: PUSH
22980: LD_INT 70
22982: PUSH
22983: LD_INT 80
22985: PUSH
22986: LD_INT 90
22988: PUSH
22989: LD_INT 100
22991: PUSH
22992: LD_INT 110
22994: PUSH
22995: LD_INT 120
22997: PUSH
22998: LD_INT 130
23000: PUSH
23001: LD_INT 140
23003: PUSH
23004: LD_INT 150
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: PUSH
23024: LD_INT 1
23026: PPUSH
23027: LD_INT 15
23029: PPUSH
23030: CALL_OW 12
23034: ARRAY
23035: ST_TO_ADDR
// if ValidHex ( x , y ) then
23036: LD_VAR 0 3
23040: PPUSH
23041: LD_VAR 0 4
23045: PPUSH
23046: CALL_OW 488
23050: IFFALSE 23073
// begin result := [ x , y ] ;
23052: LD_ADDR_VAR 0 1
23056: PUSH
23057: LD_VAR 0 3
23061: PUSH
23062: LD_VAR 0 4
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: ST_TO_ADDR
// break ;
23071: GO 23075
// end ; end ;
23073: GO 22875
23075: POP
23076: POP
// if result then
23077: LD_VAR 0 1
23081: IFFALSE 23141
// begin ToLua ( playSibBomb() ) ;
23083: LD_STRING playSibBomb()
23085: PPUSH
23086: CALL_OW 559
// wait ( 0 0$14 ) ;
23090: LD_INT 490
23092: PPUSH
23093: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
23097: LD_VAR 0 1
23101: PUSH
23102: LD_INT 1
23104: ARRAY
23105: PPUSH
23106: LD_VAR 0 1
23110: PUSH
23111: LD_INT 2
23113: ARRAY
23114: PPUSH
23115: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
23119: LD_VAR 0 1
23123: PUSH
23124: LD_INT 1
23126: ARRAY
23127: PPUSH
23128: LD_VAR 0 1
23132: PUSH
23133: LD_INT 2
23135: ARRAY
23136: PPUSH
23137: CALL_OW 429
// end ; end ;
23141: LD_VAR 0 1
23145: RET
// every 0 0$1 trigger StreamModeActive and sReset do
23146: LD_EXP 58
23150: PUSH
23151: LD_EXP 80
23155: AND
23156: IFFALSE 23168
23158: GO 23160
23160: DISABLE
// YouLost (  ) ;
23161: LD_STRING 
23163: PPUSH
23164: CALL_OW 104
23168: END
// every 0 0$1 trigger StreamModeActive and sFog do
23169: LD_EXP 58
23173: PUSH
23174: LD_EXP 79
23178: AND
23179: IFFALSE 23193
23181: GO 23183
23183: DISABLE
// FogOff ( your_side ) ;
23184: LD_OWVAR 2
23188: PPUSH
23189: CALL_OW 344
23193: END
// every 0 0$1 trigger StreamModeActive and sSun do
23194: LD_EXP 58
23198: PUSH
23199: LD_EXP 81
23203: AND
23204: IFFALSE 23232
23206: GO 23208
23208: DISABLE
// begin solar_recharge_percent := 0 ;
23209: LD_ADDR_OWVAR 79
23213: PUSH
23214: LD_INT 0
23216: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23217: LD_INT 10500
23219: PPUSH
23220: CALL_OW 67
// solar_recharge_percent := 100 ;
23224: LD_ADDR_OWVAR 79
23228: PUSH
23229: LD_INT 100
23231: ST_TO_ADDR
// end ;
23232: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23233: LD_EXP 58
23237: PUSH
23238: LD_EXP 82
23242: AND
23243: IFFALSE 23482
23245: GO 23247
23247: DISABLE
23248: LD_INT 0
23250: PPUSH
23251: PPUSH
23252: PPUSH
// begin tmp := [ ] ;
23253: LD_ADDR_VAR 0 3
23257: PUSH
23258: EMPTY
23259: ST_TO_ADDR
// for i := 1 to 6 do
23260: LD_ADDR_VAR 0 1
23264: PUSH
23265: DOUBLE
23266: LD_INT 1
23268: DEC
23269: ST_TO_ADDR
23270: LD_INT 6
23272: PUSH
23273: FOR_TO
23274: IFFALSE 23379
// begin uc_nation := nation_nature ;
23276: LD_ADDR_OWVAR 21
23280: PUSH
23281: LD_INT 0
23283: ST_TO_ADDR
// uc_side := 0 ;
23284: LD_ADDR_OWVAR 20
23288: PUSH
23289: LD_INT 0
23291: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23292: LD_ADDR_OWVAR 29
23296: PUSH
23297: LD_INT 12
23299: PUSH
23300: LD_INT 12
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: ST_TO_ADDR
// hc_agressivity := 20 ;
23307: LD_ADDR_OWVAR 35
23311: PUSH
23312: LD_INT 20
23314: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23315: LD_ADDR_OWVAR 28
23319: PUSH
23320: LD_INT 17
23322: ST_TO_ADDR
// hc_gallery :=  ;
23323: LD_ADDR_OWVAR 33
23327: PUSH
23328: LD_STRING 
23330: ST_TO_ADDR
// hc_name :=  ;
23331: LD_ADDR_OWVAR 26
23335: PUSH
23336: LD_STRING 
23338: ST_TO_ADDR
// un := CreateHuman ;
23339: LD_ADDR_VAR 0 2
23343: PUSH
23344: CALL_OW 44
23348: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23349: LD_VAR 0 2
23353: PPUSH
23354: LD_INT 1
23356: PPUSH
23357: CALL_OW 51
// tmp := tmp ^ un ;
23361: LD_ADDR_VAR 0 3
23365: PUSH
23366: LD_VAR 0 3
23370: PUSH
23371: LD_VAR 0 2
23375: ADD
23376: ST_TO_ADDR
// end ;
23377: GO 23273
23379: POP
23380: POP
// repeat wait ( 0 0$1 ) ;
23381: LD_INT 35
23383: PPUSH
23384: CALL_OW 67
// for un in tmp do
23388: LD_ADDR_VAR 0 2
23392: PUSH
23393: LD_VAR 0 3
23397: PUSH
23398: FOR_IN
23399: IFFALSE 23473
// begin if IsDead ( un ) then
23401: LD_VAR 0 2
23405: PPUSH
23406: CALL_OW 301
23410: IFFALSE 23430
// begin tmp := tmp diff un ;
23412: LD_ADDR_VAR 0 3
23416: PUSH
23417: LD_VAR 0 3
23421: PUSH
23422: LD_VAR 0 2
23426: DIFF
23427: ST_TO_ADDR
// continue ;
23428: GO 23398
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23430: LD_VAR 0 2
23434: PPUSH
23435: LD_INT 3
23437: PUSH
23438: LD_INT 22
23440: PUSH
23441: LD_INT 0
23443: PUSH
23444: EMPTY
23445: LIST
23446: LIST
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PPUSH
23452: CALL_OW 69
23456: PPUSH
23457: LD_VAR 0 2
23461: PPUSH
23462: CALL_OW 74
23466: PPUSH
23467: CALL_OW 115
// end ;
23471: GO 23398
23473: POP
23474: POP
// until not tmp ;
23475: LD_VAR 0 3
23479: NOT
23480: IFFALSE 23381
// end ;
23482: PPOPN 3
23484: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23485: LD_EXP 58
23489: PUSH
23490: LD_EXP 83
23494: AND
23495: IFFALSE 23549
23497: GO 23499
23499: DISABLE
// begin ToLua ( displayTroll(); ) ;
23500: LD_STRING displayTroll();
23502: PPUSH
23503: CALL_OW 559
// wait ( 3 3$00 ) ;
23507: LD_INT 6300
23509: PPUSH
23510: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23514: LD_STRING hideTroll();
23516: PPUSH
23517: CALL_OW 559
// wait ( 1 1$00 ) ;
23521: LD_INT 2100
23523: PPUSH
23524: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23528: LD_STRING displayTroll();
23530: PPUSH
23531: CALL_OW 559
// wait ( 1 1$00 ) ;
23535: LD_INT 2100
23537: PPUSH
23538: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23542: LD_STRING hideTroll();
23544: PPUSH
23545: CALL_OW 559
// end ;
23549: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23550: LD_EXP 58
23554: PUSH
23555: LD_EXP 84
23559: AND
23560: IFFALSE 23623
23562: GO 23564
23564: DISABLE
23565: LD_INT 0
23567: PPUSH
// begin p := 0 ;
23568: LD_ADDR_VAR 0 1
23572: PUSH
23573: LD_INT 0
23575: ST_TO_ADDR
// repeat game_speed := 1 ;
23576: LD_ADDR_OWVAR 65
23580: PUSH
23581: LD_INT 1
23583: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23584: LD_INT 35
23586: PPUSH
23587: CALL_OW 67
// p := p + 1 ;
23591: LD_ADDR_VAR 0 1
23595: PUSH
23596: LD_VAR 0 1
23600: PUSH
23601: LD_INT 1
23603: PLUS
23604: ST_TO_ADDR
// until p >= 60 ;
23605: LD_VAR 0 1
23609: PUSH
23610: LD_INT 60
23612: GREATEREQUAL
23613: IFFALSE 23576
// game_speed := 4 ;
23615: LD_ADDR_OWVAR 65
23619: PUSH
23620: LD_INT 4
23622: ST_TO_ADDR
// end ;
23623: PPOPN 1
23625: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23626: LD_EXP 58
23630: PUSH
23631: LD_EXP 85
23635: AND
23636: IFFALSE 23782
23638: GO 23640
23640: DISABLE
23641: LD_INT 0
23643: PPUSH
23644: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23645: LD_ADDR_VAR 0 1
23649: PUSH
23650: LD_INT 22
23652: PUSH
23653: LD_OWVAR 2
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: PUSH
23662: LD_INT 2
23664: PUSH
23665: LD_INT 30
23667: PUSH
23668: LD_INT 0
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: LD_INT 30
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: LIST
23689: PUSH
23690: EMPTY
23691: LIST
23692: LIST
23693: PPUSH
23694: CALL_OW 69
23698: ST_TO_ADDR
// if not depot then
23699: LD_VAR 0 1
23703: NOT
23704: IFFALSE 23708
// exit ;
23706: GO 23782
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23708: LD_ADDR_VAR 0 2
23712: PUSH
23713: LD_VAR 0 1
23717: PUSH
23718: LD_INT 1
23720: PPUSH
23721: LD_VAR 0 1
23725: PPUSH
23726: CALL_OW 12
23730: ARRAY
23731: PPUSH
23732: CALL_OW 274
23736: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23737: LD_VAR 0 2
23741: PPUSH
23742: LD_INT 1
23744: PPUSH
23745: LD_INT 0
23747: PPUSH
23748: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23752: LD_VAR 0 2
23756: PPUSH
23757: LD_INT 2
23759: PPUSH
23760: LD_INT 0
23762: PPUSH
23763: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23767: LD_VAR 0 2
23771: PPUSH
23772: LD_INT 3
23774: PPUSH
23775: LD_INT 0
23777: PPUSH
23778: CALL_OW 277
// end ;
23782: PPOPN 2
23784: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23785: LD_EXP 58
23789: PUSH
23790: LD_EXP 86
23794: AND
23795: IFFALSE 23892
23797: GO 23799
23799: DISABLE
23800: LD_INT 0
23802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23803: LD_ADDR_VAR 0 1
23807: PUSH
23808: LD_INT 22
23810: PUSH
23811: LD_OWVAR 2
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 21
23822: PUSH
23823: LD_INT 1
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 3
23832: PUSH
23833: LD_INT 23
23835: PUSH
23836: LD_INT 0
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: LIST
23851: PPUSH
23852: CALL_OW 69
23856: ST_TO_ADDR
// if not tmp then
23857: LD_VAR 0 1
23861: NOT
23862: IFFALSE 23866
// exit ;
23864: GO 23892
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23866: LD_VAR 0 1
23870: PUSH
23871: LD_INT 1
23873: PPUSH
23874: LD_VAR 0 1
23878: PPUSH
23879: CALL_OW 12
23883: ARRAY
23884: PPUSH
23885: LD_INT 200
23887: PPUSH
23888: CALL_OW 234
// end ;
23892: PPOPN 1
23894: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23895: LD_EXP 58
23899: PUSH
23900: LD_EXP 87
23904: AND
23905: IFFALSE 23984
23907: GO 23909
23909: DISABLE
23910: LD_INT 0
23912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23913: LD_ADDR_VAR 0 1
23917: PUSH
23918: LD_INT 22
23920: PUSH
23921: LD_OWVAR 2
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 21
23932: PUSH
23933: LD_INT 2
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PPUSH
23944: CALL_OW 69
23948: ST_TO_ADDR
// if not tmp then
23949: LD_VAR 0 1
23953: NOT
23954: IFFALSE 23958
// exit ;
23956: GO 23984
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23958: LD_VAR 0 1
23962: PUSH
23963: LD_INT 1
23965: PPUSH
23966: LD_VAR 0 1
23970: PPUSH
23971: CALL_OW 12
23975: ARRAY
23976: PPUSH
23977: LD_INT 60
23979: PPUSH
23980: CALL_OW 234
// end ;
23984: PPOPN 1
23986: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23987: LD_EXP 58
23991: PUSH
23992: LD_EXP 88
23996: AND
23997: IFFALSE 24096
23999: GO 24001
24001: DISABLE
24002: LD_INT 0
24004: PPUSH
24005: PPUSH
// begin enable ;
24006: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
24007: LD_ADDR_VAR 0 1
24011: PUSH
24012: LD_INT 22
24014: PUSH
24015: LD_OWVAR 2
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 61
24026: PUSH
24027: EMPTY
24028: LIST
24029: PUSH
24030: LD_INT 33
24032: PUSH
24033: LD_INT 2
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: LIST
24044: PPUSH
24045: CALL_OW 69
24049: ST_TO_ADDR
// if not tmp then
24050: LD_VAR 0 1
24054: NOT
24055: IFFALSE 24059
// exit ;
24057: GO 24096
// for i in tmp do
24059: LD_ADDR_VAR 0 2
24063: PUSH
24064: LD_VAR 0 1
24068: PUSH
24069: FOR_IN
24070: IFFALSE 24094
// if IsControledBy ( i ) then
24072: LD_VAR 0 2
24076: PPUSH
24077: CALL_OW 312
24081: IFFALSE 24092
// ComUnlink ( i ) ;
24083: LD_VAR 0 2
24087: PPUSH
24088: CALL_OW 136
24092: GO 24069
24094: POP
24095: POP
// end ;
24096: PPOPN 2
24098: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
24099: LD_EXP 58
24103: PUSH
24104: LD_EXP 89
24108: AND
24109: IFFALSE 24249
24111: GO 24113
24113: DISABLE
24114: LD_INT 0
24116: PPUSH
24117: PPUSH
// begin ToLua ( displayPowell(); ) ;
24118: LD_STRING displayPowell();
24120: PPUSH
24121: CALL_OW 559
// uc_side := 0 ;
24125: LD_ADDR_OWVAR 20
24129: PUSH
24130: LD_INT 0
24132: ST_TO_ADDR
// uc_nation := 2 ;
24133: LD_ADDR_OWVAR 21
24137: PUSH
24138: LD_INT 2
24140: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
24141: LD_ADDR_OWVAR 37
24145: PUSH
24146: LD_INT 14
24148: ST_TO_ADDR
// vc_engine := engine_siberite ;
24149: LD_ADDR_OWVAR 39
24153: PUSH
24154: LD_INT 3
24156: ST_TO_ADDR
// vc_control := control_apeman ;
24157: LD_ADDR_OWVAR 38
24161: PUSH
24162: LD_INT 5
24164: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
24165: LD_ADDR_OWVAR 40
24169: PUSH
24170: LD_INT 29
24172: ST_TO_ADDR
// un := CreateVehicle ;
24173: LD_ADDR_VAR 0 2
24177: PUSH
24178: CALL_OW 45
24182: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24183: LD_VAR 0 2
24187: PPUSH
24188: LD_INT 1
24190: PPUSH
24191: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24195: LD_INT 35
24197: PPUSH
24198: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24202: LD_VAR 0 2
24206: PPUSH
24207: LD_INT 22
24209: PUSH
24210: LD_OWVAR 2
24214: PUSH
24215: EMPTY
24216: LIST
24217: LIST
24218: PPUSH
24219: CALL_OW 69
24223: PPUSH
24224: LD_VAR 0 2
24228: PPUSH
24229: CALL_OW 74
24233: PPUSH
24234: CALL_OW 115
// until IsDead ( un ) ;
24238: LD_VAR 0 2
24242: PPUSH
24243: CALL_OW 301
24247: IFFALSE 24195
// end ;
24249: PPOPN 2
24251: END
// every 0 0$1 trigger StreamModeActive and sStu do
24252: LD_EXP 58
24256: PUSH
24257: LD_EXP 97
24261: AND
24262: IFFALSE 24278
24264: GO 24266
24266: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24267: LD_STRING displayStucuk();
24269: PPUSH
24270: CALL_OW 559
// ResetFog ;
24274: CALL_OW 335
// end ;
24278: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24279: LD_EXP 58
24283: PUSH
24284: LD_EXP 90
24288: AND
24289: IFFALSE 24430
24291: GO 24293
24293: DISABLE
24294: LD_INT 0
24296: PPUSH
24297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24298: LD_ADDR_VAR 0 2
24302: PUSH
24303: LD_INT 22
24305: PUSH
24306: LD_OWVAR 2
24310: PUSH
24311: EMPTY
24312: LIST
24313: LIST
24314: PUSH
24315: LD_INT 21
24317: PUSH
24318: LD_INT 1
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PPUSH
24329: CALL_OW 69
24333: ST_TO_ADDR
// if not tmp then
24334: LD_VAR 0 2
24338: NOT
24339: IFFALSE 24343
// exit ;
24341: GO 24430
// un := tmp [ rand ( 1 , tmp ) ] ;
24343: LD_ADDR_VAR 0 1
24347: PUSH
24348: LD_VAR 0 2
24352: PUSH
24353: LD_INT 1
24355: PPUSH
24356: LD_VAR 0 2
24360: PPUSH
24361: CALL_OW 12
24365: ARRAY
24366: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24367: LD_VAR 0 1
24371: PPUSH
24372: LD_INT 0
24374: PPUSH
24375: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24379: LD_VAR 0 1
24383: PPUSH
24384: LD_OWVAR 3
24388: PUSH
24389: LD_VAR 0 1
24393: DIFF
24394: PPUSH
24395: LD_VAR 0 1
24399: PPUSH
24400: CALL_OW 74
24404: PPUSH
24405: CALL_OW 115
// wait ( 0 0$20 ) ;
24409: LD_INT 700
24411: PPUSH
24412: CALL_OW 67
// SetSide ( un , your_side ) ;
24416: LD_VAR 0 1
24420: PPUSH
24421: LD_OWVAR 2
24425: PPUSH
24426: CALL_OW 235
// end ;
24430: PPOPN 2
24432: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24433: LD_EXP 58
24437: PUSH
24438: LD_EXP 91
24442: AND
24443: IFFALSE 24549
24445: GO 24447
24447: DISABLE
24448: LD_INT 0
24450: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24451: LD_ADDR_VAR 0 1
24455: PUSH
24456: LD_INT 22
24458: PUSH
24459: LD_OWVAR 2
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 2
24470: PUSH
24471: LD_INT 30
24473: PUSH
24474: LD_INT 0
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 30
24483: PUSH
24484: LD_INT 1
24486: PUSH
24487: EMPTY
24488: LIST
24489: LIST
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: LIST
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PPUSH
24500: CALL_OW 69
24504: ST_TO_ADDR
// if not depot then
24505: LD_VAR 0 1
24509: NOT
24510: IFFALSE 24514
// exit ;
24512: GO 24549
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24514: LD_VAR 0 1
24518: PUSH
24519: LD_INT 1
24521: ARRAY
24522: PPUSH
24523: CALL_OW 250
24527: PPUSH
24528: LD_VAR 0 1
24532: PUSH
24533: LD_INT 1
24535: ARRAY
24536: PPUSH
24537: CALL_OW 251
24541: PPUSH
24542: LD_INT 70
24544: PPUSH
24545: CALL_OW 495
// end ;
24549: PPOPN 1
24551: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24552: LD_EXP 58
24556: PUSH
24557: LD_EXP 92
24561: AND
24562: IFFALSE 24773
24564: GO 24566
24566: DISABLE
24567: LD_INT 0
24569: PPUSH
24570: PPUSH
24571: PPUSH
24572: PPUSH
24573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24574: LD_ADDR_VAR 0 5
24578: PUSH
24579: LD_INT 22
24581: PUSH
24582: LD_OWVAR 2
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PUSH
24591: LD_INT 21
24593: PUSH
24594: LD_INT 1
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PPUSH
24605: CALL_OW 69
24609: ST_TO_ADDR
// if not tmp then
24610: LD_VAR 0 5
24614: NOT
24615: IFFALSE 24619
// exit ;
24617: GO 24773
// for i in tmp do
24619: LD_ADDR_VAR 0 1
24623: PUSH
24624: LD_VAR 0 5
24628: PUSH
24629: FOR_IN
24630: IFFALSE 24771
// begin d := rand ( 0 , 5 ) ;
24632: LD_ADDR_VAR 0 4
24636: PUSH
24637: LD_INT 0
24639: PPUSH
24640: LD_INT 5
24642: PPUSH
24643: CALL_OW 12
24647: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24648: LD_ADDR_VAR 0 2
24652: PUSH
24653: LD_VAR 0 1
24657: PPUSH
24658: CALL_OW 250
24662: PPUSH
24663: LD_VAR 0 4
24667: PPUSH
24668: LD_INT 3
24670: PPUSH
24671: LD_INT 12
24673: PPUSH
24674: CALL_OW 12
24678: PPUSH
24679: CALL_OW 272
24683: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24684: LD_ADDR_VAR 0 3
24688: PUSH
24689: LD_VAR 0 1
24693: PPUSH
24694: CALL_OW 251
24698: PPUSH
24699: LD_VAR 0 4
24703: PPUSH
24704: LD_INT 3
24706: PPUSH
24707: LD_INT 12
24709: PPUSH
24710: CALL_OW 12
24714: PPUSH
24715: CALL_OW 273
24719: ST_TO_ADDR
// if ValidHex ( x , y ) then
24720: LD_VAR 0 2
24724: PPUSH
24725: LD_VAR 0 3
24729: PPUSH
24730: CALL_OW 488
24734: IFFALSE 24769
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24736: LD_VAR 0 1
24740: PPUSH
24741: LD_VAR 0 2
24745: PPUSH
24746: LD_VAR 0 3
24750: PPUSH
24751: LD_INT 3
24753: PPUSH
24754: LD_INT 6
24756: PPUSH
24757: CALL_OW 12
24761: PPUSH
24762: LD_INT 1
24764: PPUSH
24765: CALL_OW 483
// end ;
24769: GO 24629
24771: POP
24772: POP
// end ;
24773: PPOPN 5
24775: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24776: LD_EXP 58
24780: PUSH
24781: LD_EXP 93
24785: AND
24786: IFFALSE 24880
24788: GO 24790
24790: DISABLE
24791: LD_INT 0
24793: PPUSH
24794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24795: LD_ADDR_VAR 0 2
24799: PUSH
24800: LD_INT 22
24802: PUSH
24803: LD_OWVAR 2
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 32
24814: PUSH
24815: LD_INT 1
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 21
24824: PUSH
24825: LD_INT 2
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: LIST
24836: PPUSH
24837: CALL_OW 69
24841: ST_TO_ADDR
// if not tmp then
24842: LD_VAR 0 2
24846: NOT
24847: IFFALSE 24851
// exit ;
24849: GO 24880
// for i in tmp do
24851: LD_ADDR_VAR 0 1
24855: PUSH
24856: LD_VAR 0 2
24860: PUSH
24861: FOR_IN
24862: IFFALSE 24878
// SetFuel ( i , 0 ) ;
24864: LD_VAR 0 1
24868: PPUSH
24869: LD_INT 0
24871: PPUSH
24872: CALL_OW 240
24876: GO 24861
24878: POP
24879: POP
// end ;
24880: PPOPN 2
24882: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24883: LD_EXP 58
24887: PUSH
24888: LD_EXP 94
24892: AND
24893: IFFALSE 24959
24895: GO 24897
24897: DISABLE
24898: LD_INT 0
24900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24901: LD_ADDR_VAR 0 1
24905: PUSH
24906: LD_INT 22
24908: PUSH
24909: LD_OWVAR 2
24913: PUSH
24914: EMPTY
24915: LIST
24916: LIST
24917: PUSH
24918: LD_INT 30
24920: PUSH
24921: LD_INT 29
24923: PUSH
24924: EMPTY
24925: LIST
24926: LIST
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PPUSH
24932: CALL_OW 69
24936: ST_TO_ADDR
// if not tmp then
24937: LD_VAR 0 1
24941: NOT
24942: IFFALSE 24946
// exit ;
24944: GO 24959
// DestroyUnit ( tmp [ 1 ] ) ;
24946: LD_VAR 0 1
24950: PUSH
24951: LD_INT 1
24953: ARRAY
24954: PPUSH
24955: CALL_OW 65
// end ;
24959: PPOPN 1
24961: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24962: LD_EXP 58
24966: PUSH
24967: LD_EXP 96
24971: AND
24972: IFFALSE 25101
24974: GO 24976
24976: DISABLE
24977: LD_INT 0
24979: PPUSH
// begin uc_side := 0 ;
24980: LD_ADDR_OWVAR 20
24984: PUSH
24985: LD_INT 0
24987: ST_TO_ADDR
// uc_nation := nation_arabian ;
24988: LD_ADDR_OWVAR 21
24992: PUSH
24993: LD_INT 2
24995: ST_TO_ADDR
// hc_gallery :=  ;
24996: LD_ADDR_OWVAR 33
25000: PUSH
25001: LD_STRING 
25003: ST_TO_ADDR
// hc_name :=  ;
25004: LD_ADDR_OWVAR 26
25008: PUSH
25009: LD_STRING 
25011: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
25012: LD_INT 1
25014: PPUSH
25015: LD_INT 11
25017: PPUSH
25018: LD_INT 10
25020: PPUSH
25021: CALL_OW 380
// un := CreateHuman ;
25025: LD_ADDR_VAR 0 1
25029: PUSH
25030: CALL_OW 44
25034: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25035: LD_VAR 0 1
25039: PPUSH
25040: LD_INT 1
25042: PPUSH
25043: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
25047: LD_INT 35
25049: PPUSH
25050: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
25054: LD_VAR 0 1
25058: PPUSH
25059: LD_INT 22
25061: PUSH
25062: LD_OWVAR 2
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PPUSH
25071: CALL_OW 69
25075: PPUSH
25076: LD_VAR 0 1
25080: PPUSH
25081: CALL_OW 74
25085: PPUSH
25086: CALL_OW 115
// until IsDead ( un ) ;
25090: LD_VAR 0 1
25094: PPUSH
25095: CALL_OW 301
25099: IFFALSE 25047
// end ;
25101: PPOPN 1
25103: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
25104: LD_EXP 58
25108: PUSH
25109: LD_EXP 98
25113: AND
25114: IFFALSE 25126
25116: GO 25118
25118: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
25119: LD_STRING earthquake(getX(game), 0, 32)
25121: PPUSH
25122: CALL_OW 559
25126: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
25127: LD_EXP 58
25131: PUSH
25132: LD_EXP 99
25136: AND
25137: IFFALSE 25228
25139: GO 25141
25141: DISABLE
25142: LD_INT 0
25144: PPUSH
// begin enable ;
25145: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
25146: LD_ADDR_VAR 0 1
25150: PUSH
25151: LD_INT 22
25153: PUSH
25154: LD_OWVAR 2
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 21
25165: PUSH
25166: LD_INT 2
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 33
25175: PUSH
25176: LD_INT 3
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: LIST
25187: PPUSH
25188: CALL_OW 69
25192: ST_TO_ADDR
// if not tmp then
25193: LD_VAR 0 1
25197: NOT
25198: IFFALSE 25202
// exit ;
25200: GO 25228
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25202: LD_VAR 0 1
25206: PUSH
25207: LD_INT 1
25209: PPUSH
25210: LD_VAR 0 1
25214: PPUSH
25215: CALL_OW 12
25219: ARRAY
25220: PPUSH
25221: LD_INT 1
25223: PPUSH
25224: CALL_OW 234
// end ;
25228: PPOPN 1
25230: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25231: LD_EXP 58
25235: PUSH
25236: LD_EXP 100
25240: AND
25241: IFFALSE 25382
25243: GO 25245
25245: DISABLE
25246: LD_INT 0
25248: PPUSH
25249: PPUSH
25250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25251: LD_ADDR_VAR 0 3
25255: PUSH
25256: LD_INT 22
25258: PUSH
25259: LD_OWVAR 2
25263: PUSH
25264: EMPTY
25265: LIST
25266: LIST
25267: PUSH
25268: LD_INT 25
25270: PUSH
25271: LD_INT 1
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PPUSH
25282: CALL_OW 69
25286: ST_TO_ADDR
// if not tmp then
25287: LD_VAR 0 3
25291: NOT
25292: IFFALSE 25296
// exit ;
25294: GO 25382
// un := tmp [ rand ( 1 , tmp ) ] ;
25296: LD_ADDR_VAR 0 2
25300: PUSH
25301: LD_VAR 0 3
25305: PUSH
25306: LD_INT 1
25308: PPUSH
25309: LD_VAR 0 3
25313: PPUSH
25314: CALL_OW 12
25318: ARRAY
25319: ST_TO_ADDR
// if Crawls ( un ) then
25320: LD_VAR 0 2
25324: PPUSH
25325: CALL_OW 318
25329: IFFALSE 25340
// ComWalk ( un ) ;
25331: LD_VAR 0 2
25335: PPUSH
25336: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25340: LD_VAR 0 2
25344: PPUSH
25345: LD_INT 9
25347: PPUSH
25348: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25352: LD_INT 28
25354: PPUSH
25355: LD_OWVAR 2
25359: PPUSH
25360: LD_INT 2
25362: PPUSH
25363: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25367: LD_INT 29
25369: PPUSH
25370: LD_OWVAR 2
25374: PPUSH
25375: LD_INT 2
25377: PPUSH
25378: CALL_OW 322
// end ;
25382: PPOPN 3
25384: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25385: LD_EXP 58
25389: PUSH
25390: LD_EXP 101
25394: AND
25395: IFFALSE 25506
25397: GO 25399
25399: DISABLE
25400: LD_INT 0
25402: PPUSH
25403: PPUSH
25404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25405: LD_ADDR_VAR 0 3
25409: PUSH
25410: LD_INT 22
25412: PUSH
25413: LD_OWVAR 2
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 25
25424: PUSH
25425: LD_INT 1
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PPUSH
25436: CALL_OW 69
25440: ST_TO_ADDR
// if not tmp then
25441: LD_VAR 0 3
25445: NOT
25446: IFFALSE 25450
// exit ;
25448: GO 25506
// un := tmp [ rand ( 1 , tmp ) ] ;
25450: LD_ADDR_VAR 0 2
25454: PUSH
25455: LD_VAR 0 3
25459: PUSH
25460: LD_INT 1
25462: PPUSH
25463: LD_VAR 0 3
25467: PPUSH
25468: CALL_OW 12
25472: ARRAY
25473: ST_TO_ADDR
// if Crawls ( un ) then
25474: LD_VAR 0 2
25478: PPUSH
25479: CALL_OW 318
25483: IFFALSE 25494
// ComWalk ( un ) ;
25485: LD_VAR 0 2
25489: PPUSH
25490: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25494: LD_VAR 0 2
25498: PPUSH
25499: LD_INT 8
25501: PPUSH
25502: CALL_OW 336
// end ;
25506: PPOPN 3
25508: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25509: LD_EXP 58
25513: PUSH
25514: LD_EXP 102
25518: AND
25519: IFFALSE 25663
25521: GO 25523
25523: DISABLE
25524: LD_INT 0
25526: PPUSH
25527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25528: LD_ADDR_VAR 0 2
25532: PUSH
25533: LD_INT 22
25535: PUSH
25536: LD_OWVAR 2
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 21
25547: PUSH
25548: LD_INT 2
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 2
25557: PUSH
25558: LD_INT 34
25560: PUSH
25561: LD_INT 12
25563: PUSH
25564: EMPTY
25565: LIST
25566: LIST
25567: PUSH
25568: LD_INT 34
25570: PUSH
25571: LD_INT 51
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: LD_INT 34
25580: PUSH
25581: LD_INT 32
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: LIST
25598: PPUSH
25599: CALL_OW 69
25603: ST_TO_ADDR
// if not tmp then
25604: LD_VAR 0 2
25608: NOT
25609: IFFALSE 25613
// exit ;
25611: GO 25663
// for i in tmp do
25613: LD_ADDR_VAR 0 1
25617: PUSH
25618: LD_VAR 0 2
25622: PUSH
25623: FOR_IN
25624: IFFALSE 25661
// if GetCargo ( i , mat_artifact ) = 0 then
25626: LD_VAR 0 1
25630: PPUSH
25631: LD_INT 4
25633: PPUSH
25634: CALL_OW 289
25638: PUSH
25639: LD_INT 0
25641: EQUAL
25642: IFFALSE 25659
// SetCargo ( i , mat_siberit , 100 ) ;
25644: LD_VAR 0 1
25648: PPUSH
25649: LD_INT 3
25651: PPUSH
25652: LD_INT 100
25654: PPUSH
25655: CALL_OW 290
25659: GO 25623
25661: POP
25662: POP
// end ;
25663: PPOPN 2
25665: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25666: LD_EXP 58
25670: PUSH
25671: LD_EXP 103
25675: AND
25676: IFFALSE 25859
25678: GO 25680
25680: DISABLE
25681: LD_INT 0
25683: PPUSH
25684: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25685: LD_ADDR_VAR 0 2
25689: PUSH
25690: LD_INT 22
25692: PUSH
25693: LD_OWVAR 2
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PPUSH
25702: CALL_OW 69
25706: ST_TO_ADDR
// if not tmp then
25707: LD_VAR 0 2
25711: NOT
25712: IFFALSE 25716
// exit ;
25714: GO 25859
// for i := 1 to 2 do
25716: LD_ADDR_VAR 0 1
25720: PUSH
25721: DOUBLE
25722: LD_INT 1
25724: DEC
25725: ST_TO_ADDR
25726: LD_INT 2
25728: PUSH
25729: FOR_TO
25730: IFFALSE 25857
// begin uc_side := your_side ;
25732: LD_ADDR_OWVAR 20
25736: PUSH
25737: LD_OWVAR 2
25741: ST_TO_ADDR
// uc_nation := nation_american ;
25742: LD_ADDR_OWVAR 21
25746: PUSH
25747: LD_INT 1
25749: ST_TO_ADDR
// vc_chassis := us_morphling ;
25750: LD_ADDR_OWVAR 37
25754: PUSH
25755: LD_INT 5
25757: ST_TO_ADDR
// vc_engine := engine_siberite ;
25758: LD_ADDR_OWVAR 39
25762: PUSH
25763: LD_INT 3
25765: ST_TO_ADDR
// vc_control := control_computer ;
25766: LD_ADDR_OWVAR 38
25770: PUSH
25771: LD_INT 3
25773: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25774: LD_ADDR_OWVAR 40
25778: PUSH
25779: LD_INT 10
25781: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25782: LD_VAR 0 2
25786: PUSH
25787: LD_INT 1
25789: ARRAY
25790: PPUSH
25791: CALL_OW 310
25795: NOT
25796: IFFALSE 25843
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25798: CALL_OW 45
25802: PPUSH
25803: LD_VAR 0 2
25807: PUSH
25808: LD_INT 1
25810: ARRAY
25811: PPUSH
25812: CALL_OW 250
25816: PPUSH
25817: LD_VAR 0 2
25821: PUSH
25822: LD_INT 1
25824: ARRAY
25825: PPUSH
25826: CALL_OW 251
25830: PPUSH
25831: LD_INT 12
25833: PPUSH
25834: LD_INT 1
25836: PPUSH
25837: CALL_OW 50
25841: GO 25855
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25843: CALL_OW 45
25847: PPUSH
25848: LD_INT 1
25850: PPUSH
25851: CALL_OW 51
// end ;
25855: GO 25729
25857: POP
25858: POP
// end ;
25859: PPOPN 2
25861: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25862: LD_EXP 58
25866: PUSH
25867: LD_EXP 104
25871: AND
25872: IFFALSE 26094
25874: GO 25876
25876: DISABLE
25877: LD_INT 0
25879: PPUSH
25880: PPUSH
25881: PPUSH
25882: PPUSH
25883: PPUSH
25884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25885: LD_ADDR_VAR 0 6
25889: PUSH
25890: LD_INT 22
25892: PUSH
25893: LD_OWVAR 2
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: LD_INT 21
25904: PUSH
25905: LD_INT 1
25907: PUSH
25908: EMPTY
25909: LIST
25910: LIST
25911: PUSH
25912: LD_INT 3
25914: PUSH
25915: LD_INT 23
25917: PUSH
25918: LD_INT 0
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: EMPTY
25926: LIST
25927: LIST
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: LIST
25933: PPUSH
25934: CALL_OW 69
25938: ST_TO_ADDR
// if not tmp then
25939: LD_VAR 0 6
25943: NOT
25944: IFFALSE 25948
// exit ;
25946: GO 26094
// s1 := rand ( 1 , 4 ) ;
25948: LD_ADDR_VAR 0 2
25952: PUSH
25953: LD_INT 1
25955: PPUSH
25956: LD_INT 4
25958: PPUSH
25959: CALL_OW 12
25963: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25964: LD_ADDR_VAR 0 4
25968: PUSH
25969: LD_VAR 0 6
25973: PUSH
25974: LD_INT 1
25976: ARRAY
25977: PPUSH
25978: LD_VAR 0 2
25982: PPUSH
25983: CALL_OW 259
25987: ST_TO_ADDR
// if s1 = 1 then
25988: LD_VAR 0 2
25992: PUSH
25993: LD_INT 1
25995: EQUAL
25996: IFFALSE 26016
// s2 := rand ( 2 , 4 ) else
25998: LD_ADDR_VAR 0 3
26002: PUSH
26003: LD_INT 2
26005: PPUSH
26006: LD_INT 4
26008: PPUSH
26009: CALL_OW 12
26013: ST_TO_ADDR
26014: GO 26024
// s2 := 1 ;
26016: LD_ADDR_VAR 0 3
26020: PUSH
26021: LD_INT 1
26023: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
26024: LD_ADDR_VAR 0 5
26028: PUSH
26029: LD_VAR 0 6
26033: PUSH
26034: LD_INT 1
26036: ARRAY
26037: PPUSH
26038: LD_VAR 0 3
26042: PPUSH
26043: CALL_OW 259
26047: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
26048: LD_VAR 0 6
26052: PUSH
26053: LD_INT 1
26055: ARRAY
26056: PPUSH
26057: LD_VAR 0 2
26061: PPUSH
26062: LD_VAR 0 5
26066: PPUSH
26067: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
26071: LD_VAR 0 6
26075: PUSH
26076: LD_INT 1
26078: ARRAY
26079: PPUSH
26080: LD_VAR 0 3
26084: PPUSH
26085: LD_VAR 0 4
26089: PPUSH
26090: CALL_OW 237
// end ;
26094: PPOPN 6
26096: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
26097: LD_EXP 58
26101: PUSH
26102: LD_EXP 105
26106: AND
26107: IFFALSE 26186
26109: GO 26111
26111: DISABLE
26112: LD_INT 0
26114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
26115: LD_ADDR_VAR 0 1
26119: PUSH
26120: LD_INT 22
26122: PUSH
26123: LD_OWVAR 2
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: LD_INT 30
26134: PUSH
26135: LD_INT 3
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PPUSH
26146: CALL_OW 69
26150: ST_TO_ADDR
// if not tmp then
26151: LD_VAR 0 1
26155: NOT
26156: IFFALSE 26160
// exit ;
26158: GO 26186
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
26160: LD_VAR 0 1
26164: PUSH
26165: LD_INT 1
26167: PPUSH
26168: LD_VAR 0 1
26172: PPUSH
26173: CALL_OW 12
26177: ARRAY
26178: PPUSH
26179: LD_INT 1
26181: PPUSH
26182: CALL_OW 234
// end ;
26186: PPOPN 1
26188: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26189: LD_EXP 58
26193: PUSH
26194: LD_EXP 106
26198: AND
26199: IFFALSE 26311
26201: GO 26203
26203: DISABLE
26204: LD_INT 0
26206: PPUSH
26207: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26208: LD_ADDR_VAR 0 2
26212: PUSH
26213: LD_INT 22
26215: PUSH
26216: LD_OWVAR 2
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 2
26227: PUSH
26228: LD_INT 30
26230: PUSH
26231: LD_INT 27
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 30
26240: PUSH
26241: LD_INT 26
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 30
26250: PUSH
26251: LD_INT 28
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: EMPTY
26259: LIST
26260: LIST
26261: LIST
26262: LIST
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PPUSH
26268: CALL_OW 69
26272: ST_TO_ADDR
// if not tmp then
26273: LD_VAR 0 2
26277: NOT
26278: IFFALSE 26282
// exit ;
26280: GO 26311
// for i in tmp do
26282: LD_ADDR_VAR 0 1
26286: PUSH
26287: LD_VAR 0 2
26291: PUSH
26292: FOR_IN
26293: IFFALSE 26309
// SetLives ( i , 1 ) ;
26295: LD_VAR 0 1
26299: PPUSH
26300: LD_INT 1
26302: PPUSH
26303: CALL_OW 234
26307: GO 26292
26309: POP
26310: POP
// end ;
26311: PPOPN 2
26313: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26314: LD_EXP 58
26318: PUSH
26319: LD_EXP 107
26323: AND
26324: IFFALSE 26611
26326: GO 26328
26328: DISABLE
26329: LD_INT 0
26331: PPUSH
26332: PPUSH
26333: PPUSH
// begin i := rand ( 1 , 7 ) ;
26334: LD_ADDR_VAR 0 1
26338: PUSH
26339: LD_INT 1
26341: PPUSH
26342: LD_INT 7
26344: PPUSH
26345: CALL_OW 12
26349: ST_TO_ADDR
// case i of 1 :
26350: LD_VAR 0 1
26354: PUSH
26355: LD_INT 1
26357: DOUBLE
26358: EQUAL
26359: IFTRUE 26363
26361: GO 26373
26363: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26364: LD_STRING earthquake(getX(game), 0, 32)
26366: PPUSH
26367: CALL_OW 559
26371: GO 26611
26373: LD_INT 2
26375: DOUBLE
26376: EQUAL
26377: IFTRUE 26381
26379: GO 26395
26381: POP
// begin ToLua ( displayStucuk(); ) ;
26382: LD_STRING displayStucuk();
26384: PPUSH
26385: CALL_OW 559
// ResetFog ;
26389: CALL_OW 335
// end ; 3 :
26393: GO 26611
26395: LD_INT 3
26397: DOUBLE
26398: EQUAL
26399: IFTRUE 26403
26401: GO 26507
26403: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26404: LD_ADDR_VAR 0 2
26408: PUSH
26409: LD_INT 22
26411: PUSH
26412: LD_OWVAR 2
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 25
26423: PUSH
26424: LD_INT 1
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PPUSH
26435: CALL_OW 69
26439: ST_TO_ADDR
// if not tmp then
26440: LD_VAR 0 2
26444: NOT
26445: IFFALSE 26449
// exit ;
26447: GO 26611
// un := tmp [ rand ( 1 , tmp ) ] ;
26449: LD_ADDR_VAR 0 3
26453: PUSH
26454: LD_VAR 0 2
26458: PUSH
26459: LD_INT 1
26461: PPUSH
26462: LD_VAR 0 2
26466: PPUSH
26467: CALL_OW 12
26471: ARRAY
26472: ST_TO_ADDR
// if Crawls ( un ) then
26473: LD_VAR 0 3
26477: PPUSH
26478: CALL_OW 318
26482: IFFALSE 26493
// ComWalk ( un ) ;
26484: LD_VAR 0 3
26488: PPUSH
26489: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26493: LD_VAR 0 3
26497: PPUSH
26498: LD_INT 8
26500: PPUSH
26501: CALL_OW 336
// end ; 4 :
26505: GO 26611
26507: LD_INT 4
26509: DOUBLE
26510: EQUAL
26511: IFTRUE 26515
26513: GO 26589
26515: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26516: LD_ADDR_VAR 0 2
26520: PUSH
26521: LD_INT 22
26523: PUSH
26524: LD_OWVAR 2
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 30
26535: PUSH
26536: LD_INT 29
26538: PUSH
26539: EMPTY
26540: LIST
26541: LIST
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PPUSH
26547: CALL_OW 69
26551: ST_TO_ADDR
// if not tmp then
26552: LD_VAR 0 2
26556: NOT
26557: IFFALSE 26561
// exit ;
26559: GO 26611
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26561: LD_VAR 0 2
26565: PUSH
26566: LD_INT 1
26568: ARRAY
26569: PPUSH
26570: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26574: LD_VAR 0 2
26578: PUSH
26579: LD_INT 1
26581: ARRAY
26582: PPUSH
26583: CALL_OW 65
// end ; 5 .. 7 :
26587: GO 26611
26589: LD_INT 5
26591: DOUBLE
26592: GREATEREQUAL
26593: IFFALSE 26601
26595: LD_INT 7
26597: DOUBLE
26598: LESSEQUAL
26599: IFTRUE 26603
26601: GO 26610
26603: POP
// StreamSibBomb ; end ;
26604: CALL 22848 0 0
26608: GO 26611
26610: POP
// end ;
26611: PPOPN 3
26613: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26614: LD_EXP 58
26618: PUSH
26619: LD_EXP 108
26623: AND
26624: IFFALSE 26780
26626: GO 26628
26628: DISABLE
26629: LD_INT 0
26631: PPUSH
26632: PPUSH
26633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26634: LD_ADDR_VAR 0 2
26638: PUSH
26639: LD_INT 81
26641: PUSH
26642: LD_OWVAR 2
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 2
26653: PUSH
26654: LD_INT 21
26656: PUSH
26657: LD_INT 1
26659: PUSH
26660: EMPTY
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 21
26666: PUSH
26667: LD_INT 2
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: LIST
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PPUSH
26683: CALL_OW 69
26687: ST_TO_ADDR
// if not tmp then
26688: LD_VAR 0 2
26692: NOT
26693: IFFALSE 26697
// exit ;
26695: GO 26780
// p := 0 ;
26697: LD_ADDR_VAR 0 3
26701: PUSH
26702: LD_INT 0
26704: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26705: LD_INT 35
26707: PPUSH
26708: CALL_OW 67
// p := p + 1 ;
26712: LD_ADDR_VAR 0 3
26716: PUSH
26717: LD_VAR 0 3
26721: PUSH
26722: LD_INT 1
26724: PLUS
26725: ST_TO_ADDR
// for i in tmp do
26726: LD_ADDR_VAR 0 1
26730: PUSH
26731: LD_VAR 0 2
26735: PUSH
26736: FOR_IN
26737: IFFALSE 26768
// if GetLives ( i ) < 1000 then
26739: LD_VAR 0 1
26743: PPUSH
26744: CALL_OW 256
26748: PUSH
26749: LD_INT 1000
26751: LESS
26752: IFFALSE 26766
// SetLives ( i , 1000 ) ;
26754: LD_VAR 0 1
26758: PPUSH
26759: LD_INT 1000
26761: PPUSH
26762: CALL_OW 234
26766: GO 26736
26768: POP
26769: POP
// until p > 20 ;
26770: LD_VAR 0 3
26774: PUSH
26775: LD_INT 20
26777: GREATER
26778: IFFALSE 26705
// end ;
26780: PPOPN 3
26782: END
// every 0 0$1 trigger StreamModeActive and sTime do
26783: LD_EXP 58
26787: PUSH
26788: LD_EXP 109
26792: AND
26793: IFFALSE 26828
26795: GO 26797
26797: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26798: LD_INT 28
26800: PPUSH
26801: LD_OWVAR 2
26805: PPUSH
26806: LD_INT 2
26808: PPUSH
26809: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26813: LD_INT 30
26815: PPUSH
26816: LD_OWVAR 2
26820: PPUSH
26821: LD_INT 2
26823: PPUSH
26824: CALL_OW 322
// end ;
26828: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26829: LD_EXP 58
26833: PUSH
26834: LD_EXP 110
26838: AND
26839: IFFALSE 26960
26841: GO 26843
26843: DISABLE
26844: LD_INT 0
26846: PPUSH
26847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26848: LD_ADDR_VAR 0 2
26852: PUSH
26853: LD_INT 22
26855: PUSH
26856: LD_OWVAR 2
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 21
26867: PUSH
26868: LD_INT 1
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 3
26877: PUSH
26878: LD_INT 23
26880: PUSH
26881: LD_INT 0
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: LIST
26896: PPUSH
26897: CALL_OW 69
26901: ST_TO_ADDR
// if not tmp then
26902: LD_VAR 0 2
26906: NOT
26907: IFFALSE 26911
// exit ;
26909: GO 26960
// for i in tmp do
26911: LD_ADDR_VAR 0 1
26915: PUSH
26916: LD_VAR 0 2
26920: PUSH
26921: FOR_IN
26922: IFFALSE 26958
// begin if Crawls ( i ) then
26924: LD_VAR 0 1
26928: PPUSH
26929: CALL_OW 318
26933: IFFALSE 26944
// ComWalk ( i ) ;
26935: LD_VAR 0 1
26939: PPUSH
26940: CALL_OW 138
// SetClass ( i , 2 ) ;
26944: LD_VAR 0 1
26948: PPUSH
26949: LD_INT 2
26951: PPUSH
26952: CALL_OW 336
// end ;
26956: GO 26921
26958: POP
26959: POP
// end ;
26960: PPOPN 2
26962: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26963: LD_EXP 58
26967: PUSH
26968: LD_EXP 111
26972: AND
26973: IFFALSE 27261
26975: GO 26977
26977: DISABLE
26978: LD_INT 0
26980: PPUSH
26981: PPUSH
26982: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26983: LD_OWVAR 2
26987: PPUSH
26988: LD_INT 9
26990: PPUSH
26991: LD_INT 1
26993: PPUSH
26994: LD_INT 1
26996: PPUSH
26997: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
27001: LD_INT 9
27003: PPUSH
27004: LD_OWVAR 2
27008: PPUSH
27009: CALL_OW 343
// uc_side := 9 ;
27013: LD_ADDR_OWVAR 20
27017: PUSH
27018: LD_INT 9
27020: ST_TO_ADDR
// uc_nation := 2 ;
27021: LD_ADDR_OWVAR 21
27025: PUSH
27026: LD_INT 2
27028: ST_TO_ADDR
// hc_name := Dark Warrior ;
27029: LD_ADDR_OWVAR 26
27033: PUSH
27034: LD_STRING Dark Warrior
27036: ST_TO_ADDR
// hc_gallery :=  ;
27037: LD_ADDR_OWVAR 33
27041: PUSH
27042: LD_STRING 
27044: ST_TO_ADDR
// hc_noskilllimit := true ;
27045: LD_ADDR_OWVAR 76
27049: PUSH
27050: LD_INT 1
27052: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
27053: LD_ADDR_OWVAR 31
27057: PUSH
27058: LD_INT 30
27060: PUSH
27061: LD_INT 30
27063: PUSH
27064: LD_INT 30
27066: PUSH
27067: LD_INT 30
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: ST_TO_ADDR
// un := CreateHuman ;
27076: LD_ADDR_VAR 0 3
27080: PUSH
27081: CALL_OW 44
27085: ST_TO_ADDR
// hc_noskilllimit := false ;
27086: LD_ADDR_OWVAR 76
27090: PUSH
27091: LD_INT 0
27093: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27094: LD_VAR 0 3
27098: PPUSH
27099: LD_INT 1
27101: PPUSH
27102: CALL_OW 51
// ToLua ( playRanger() ) ;
27106: LD_STRING playRanger()
27108: PPUSH
27109: CALL_OW 559
// p := 0 ;
27113: LD_ADDR_VAR 0 2
27117: PUSH
27118: LD_INT 0
27120: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
27121: LD_INT 35
27123: PPUSH
27124: CALL_OW 67
// p := p + 1 ;
27128: LD_ADDR_VAR 0 2
27132: PUSH
27133: LD_VAR 0 2
27137: PUSH
27138: LD_INT 1
27140: PLUS
27141: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
27142: LD_VAR 0 3
27146: PPUSH
27147: CALL_OW 256
27151: PUSH
27152: LD_INT 1000
27154: LESS
27155: IFFALSE 27169
// SetLives ( un , 1000 ) ;
27157: LD_VAR 0 3
27161: PPUSH
27162: LD_INT 1000
27164: PPUSH
27165: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
27169: LD_VAR 0 3
27173: PPUSH
27174: LD_INT 81
27176: PUSH
27177: LD_OWVAR 2
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PUSH
27186: LD_INT 91
27188: PUSH
27189: LD_VAR 0 3
27193: PUSH
27194: LD_INT 30
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: LIST
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: PPUSH
27206: CALL_OW 69
27210: PPUSH
27211: LD_VAR 0 3
27215: PPUSH
27216: CALL_OW 74
27220: PPUSH
27221: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27225: LD_VAR 0 2
27229: PUSH
27230: LD_INT 80
27232: GREATER
27233: PUSH
27234: LD_VAR 0 3
27238: PPUSH
27239: CALL_OW 301
27243: OR
27244: IFFALSE 27121
// if un then
27246: LD_VAR 0 3
27250: IFFALSE 27261
// RemoveUnit ( un ) ;
27252: LD_VAR 0 3
27256: PPUSH
27257: CALL_OW 64
// end ;
27261: PPOPN 3
27263: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27264: LD_EXP 112
27268: IFFALSE 27384
27270: GO 27272
27272: DISABLE
27273: LD_INT 0
27275: PPUSH
27276: PPUSH
27277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27278: LD_ADDR_VAR 0 2
27282: PUSH
27283: LD_INT 81
27285: PUSH
27286: LD_OWVAR 2
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: PUSH
27295: LD_INT 21
27297: PUSH
27298: LD_INT 1
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PPUSH
27309: CALL_OW 69
27313: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27314: LD_STRING playComputer()
27316: PPUSH
27317: CALL_OW 559
// if not tmp then
27321: LD_VAR 0 2
27325: NOT
27326: IFFALSE 27330
// exit ;
27328: GO 27384
// for i in tmp do
27330: LD_ADDR_VAR 0 1
27334: PUSH
27335: LD_VAR 0 2
27339: PUSH
27340: FOR_IN
27341: IFFALSE 27382
// for j := 1 to 4 do
27343: LD_ADDR_VAR 0 3
27347: PUSH
27348: DOUBLE
27349: LD_INT 1
27351: DEC
27352: ST_TO_ADDR
27353: LD_INT 4
27355: PUSH
27356: FOR_TO
27357: IFFALSE 27378
// SetSkill ( i , j , 10 ) ;
27359: LD_VAR 0 1
27363: PPUSH
27364: LD_VAR 0 3
27368: PPUSH
27369: LD_INT 10
27371: PPUSH
27372: CALL_OW 237
27376: GO 27356
27378: POP
27379: POP
27380: GO 27340
27382: POP
27383: POP
// end ;
27384: PPOPN 3
27386: END
// every 0 0$1 trigger s30 do var i , tmp ;
27387: LD_EXP 113
27391: IFFALSE 27460
27393: GO 27395
27395: DISABLE
27396: LD_INT 0
27398: PPUSH
27399: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27400: LD_ADDR_VAR 0 2
27404: PUSH
27405: LD_INT 22
27407: PUSH
27408: LD_OWVAR 2
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PPUSH
27417: CALL_OW 69
27421: ST_TO_ADDR
// if not tmp then
27422: LD_VAR 0 2
27426: NOT
27427: IFFALSE 27431
// exit ;
27429: GO 27460
// for i in tmp do
27431: LD_ADDR_VAR 0 1
27435: PUSH
27436: LD_VAR 0 2
27440: PUSH
27441: FOR_IN
27442: IFFALSE 27458
// SetLives ( i , 300 ) ;
27444: LD_VAR 0 1
27448: PPUSH
27449: LD_INT 300
27451: PPUSH
27452: CALL_OW 234
27456: GO 27441
27458: POP
27459: POP
// end ;
27460: PPOPN 2
27462: END
// every 0 0$1 trigger s60 do var i , tmp ;
27463: LD_EXP 114
27467: IFFALSE 27536
27469: GO 27471
27471: DISABLE
27472: LD_INT 0
27474: PPUSH
27475: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27476: LD_ADDR_VAR 0 2
27480: PUSH
27481: LD_INT 22
27483: PUSH
27484: LD_OWVAR 2
27488: PUSH
27489: EMPTY
27490: LIST
27491: LIST
27492: PPUSH
27493: CALL_OW 69
27497: ST_TO_ADDR
// if not tmp then
27498: LD_VAR 0 2
27502: NOT
27503: IFFALSE 27507
// exit ;
27505: GO 27536
// for i in tmp do
27507: LD_ADDR_VAR 0 1
27511: PUSH
27512: LD_VAR 0 2
27516: PUSH
27517: FOR_IN
27518: IFFALSE 27534
// SetLives ( i , 600 ) ;
27520: LD_VAR 0 1
27524: PPUSH
27525: LD_INT 600
27527: PPUSH
27528: CALL_OW 234
27532: GO 27517
27534: POP
27535: POP
// end ;
27536: PPOPN 2
27538: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27539: LD_INT 0
27541: PPUSH
// case cmd of 301 :
27542: LD_VAR 0 1
27546: PUSH
27547: LD_INT 301
27549: DOUBLE
27550: EQUAL
27551: IFTRUE 27555
27553: GO 27587
27555: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27556: LD_VAR 0 6
27560: PPUSH
27561: LD_VAR 0 7
27565: PPUSH
27566: LD_VAR 0 8
27570: PPUSH
27571: LD_VAR 0 4
27575: PPUSH
27576: LD_VAR 0 5
27580: PPUSH
27581: CALL 28788 0 5
27585: GO 27708
27587: LD_INT 302
27589: DOUBLE
27590: EQUAL
27591: IFTRUE 27595
27593: GO 27632
27595: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27596: LD_VAR 0 6
27600: PPUSH
27601: LD_VAR 0 7
27605: PPUSH
27606: LD_VAR 0 8
27610: PPUSH
27611: LD_VAR 0 9
27615: PPUSH
27616: LD_VAR 0 4
27620: PPUSH
27621: LD_VAR 0 5
27625: PPUSH
27626: CALL 28879 0 6
27630: GO 27708
27632: LD_INT 303
27634: DOUBLE
27635: EQUAL
27636: IFTRUE 27640
27638: GO 27677
27640: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27641: LD_VAR 0 6
27645: PPUSH
27646: LD_VAR 0 7
27650: PPUSH
27651: LD_VAR 0 8
27655: PPUSH
27656: LD_VAR 0 9
27660: PPUSH
27661: LD_VAR 0 4
27665: PPUSH
27666: LD_VAR 0 5
27670: PPUSH
27671: CALL 27713 0 6
27675: GO 27708
27677: LD_INT 304
27679: DOUBLE
27680: EQUAL
27681: IFTRUE 27685
27683: GO 27707
27685: POP
// hHackTeleport ( unit , x , y ) ; end ;
27686: LD_VAR 0 2
27690: PPUSH
27691: LD_VAR 0 4
27695: PPUSH
27696: LD_VAR 0 5
27700: PPUSH
27701: CALL 29472 0 3
27705: GO 27708
27707: POP
// end ;
27708: LD_VAR 0 12
27712: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27713: LD_INT 0
27715: PPUSH
27716: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27717: LD_VAR 0 1
27721: PUSH
27722: LD_INT 1
27724: LESS
27725: PUSH
27726: LD_VAR 0 1
27730: PUSH
27731: LD_INT 3
27733: GREATER
27734: OR
27735: PUSH
27736: LD_VAR 0 5
27740: PPUSH
27741: LD_VAR 0 6
27745: PPUSH
27746: CALL_OW 428
27750: OR
27751: IFFALSE 27755
// exit ;
27753: GO 28475
// uc_side := your_side ;
27755: LD_ADDR_OWVAR 20
27759: PUSH
27760: LD_OWVAR 2
27764: ST_TO_ADDR
// uc_nation := nation ;
27765: LD_ADDR_OWVAR 21
27769: PUSH
27770: LD_VAR 0 1
27774: ST_TO_ADDR
// bc_level = 1 ;
27775: LD_ADDR_OWVAR 43
27779: PUSH
27780: LD_INT 1
27782: ST_TO_ADDR
// case btype of 1 :
27783: LD_VAR 0 2
27787: PUSH
27788: LD_INT 1
27790: DOUBLE
27791: EQUAL
27792: IFTRUE 27796
27794: GO 27807
27796: POP
// bc_type := b_depot ; 2 :
27797: LD_ADDR_OWVAR 42
27801: PUSH
27802: LD_INT 0
27804: ST_TO_ADDR
27805: GO 28419
27807: LD_INT 2
27809: DOUBLE
27810: EQUAL
27811: IFTRUE 27815
27813: GO 27826
27815: POP
// bc_type := b_warehouse ; 3 :
27816: LD_ADDR_OWVAR 42
27820: PUSH
27821: LD_INT 1
27823: ST_TO_ADDR
27824: GO 28419
27826: LD_INT 3
27828: DOUBLE
27829: EQUAL
27830: IFTRUE 27834
27832: GO 27845
27834: POP
// bc_type := b_lab ; 4 .. 9 :
27835: LD_ADDR_OWVAR 42
27839: PUSH
27840: LD_INT 6
27842: ST_TO_ADDR
27843: GO 28419
27845: LD_INT 4
27847: DOUBLE
27848: GREATEREQUAL
27849: IFFALSE 27857
27851: LD_INT 9
27853: DOUBLE
27854: LESSEQUAL
27855: IFTRUE 27859
27857: GO 27911
27859: POP
// begin bc_type := b_lab_half ;
27860: LD_ADDR_OWVAR 42
27864: PUSH
27865: LD_INT 7
27867: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27868: LD_ADDR_OWVAR 44
27872: PUSH
27873: LD_INT 10
27875: PUSH
27876: LD_INT 11
27878: PUSH
27879: LD_INT 12
27881: PUSH
27882: LD_INT 15
27884: PUSH
27885: LD_INT 14
27887: PUSH
27888: LD_INT 13
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: PUSH
27899: LD_VAR 0 2
27903: PUSH
27904: LD_INT 3
27906: MINUS
27907: ARRAY
27908: ST_TO_ADDR
// end ; 10 .. 13 :
27909: GO 28419
27911: LD_INT 10
27913: DOUBLE
27914: GREATEREQUAL
27915: IFFALSE 27923
27917: LD_INT 13
27919: DOUBLE
27920: LESSEQUAL
27921: IFTRUE 27925
27923: GO 28002
27925: POP
// begin bc_type := b_lab_full ;
27926: LD_ADDR_OWVAR 42
27930: PUSH
27931: LD_INT 8
27933: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27934: LD_ADDR_OWVAR 44
27938: PUSH
27939: LD_INT 10
27941: PUSH
27942: LD_INT 12
27944: PUSH
27945: LD_INT 14
27947: PUSH
27948: LD_INT 13
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: PUSH
27957: LD_VAR 0 2
27961: PUSH
27962: LD_INT 9
27964: MINUS
27965: ARRAY
27966: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27967: LD_ADDR_OWVAR 45
27971: PUSH
27972: LD_INT 11
27974: PUSH
27975: LD_INT 15
27977: PUSH
27978: LD_INT 12
27980: PUSH
27981: LD_INT 15
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: LIST
27988: LIST
27989: PUSH
27990: LD_VAR 0 2
27994: PUSH
27995: LD_INT 9
27997: MINUS
27998: ARRAY
27999: ST_TO_ADDR
// end ; 14 :
28000: GO 28419
28002: LD_INT 14
28004: DOUBLE
28005: EQUAL
28006: IFTRUE 28010
28008: GO 28021
28010: POP
// bc_type := b_workshop ; 15 :
28011: LD_ADDR_OWVAR 42
28015: PUSH
28016: LD_INT 2
28018: ST_TO_ADDR
28019: GO 28419
28021: LD_INT 15
28023: DOUBLE
28024: EQUAL
28025: IFTRUE 28029
28027: GO 28040
28029: POP
// bc_type := b_factory ; 16 :
28030: LD_ADDR_OWVAR 42
28034: PUSH
28035: LD_INT 3
28037: ST_TO_ADDR
28038: GO 28419
28040: LD_INT 16
28042: DOUBLE
28043: EQUAL
28044: IFTRUE 28048
28046: GO 28059
28048: POP
// bc_type := b_ext_gun ; 17 :
28049: LD_ADDR_OWVAR 42
28053: PUSH
28054: LD_INT 17
28056: ST_TO_ADDR
28057: GO 28419
28059: LD_INT 17
28061: DOUBLE
28062: EQUAL
28063: IFTRUE 28067
28065: GO 28095
28067: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
28068: LD_ADDR_OWVAR 42
28072: PUSH
28073: LD_INT 19
28075: PUSH
28076: LD_INT 23
28078: PUSH
28079: LD_INT 19
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: LIST
28086: PUSH
28087: LD_VAR 0 1
28091: ARRAY
28092: ST_TO_ADDR
28093: GO 28419
28095: LD_INT 18
28097: DOUBLE
28098: EQUAL
28099: IFTRUE 28103
28101: GO 28114
28103: POP
// bc_type := b_ext_radar ; 19 :
28104: LD_ADDR_OWVAR 42
28108: PUSH
28109: LD_INT 20
28111: ST_TO_ADDR
28112: GO 28419
28114: LD_INT 19
28116: DOUBLE
28117: EQUAL
28118: IFTRUE 28122
28120: GO 28133
28122: POP
// bc_type := b_ext_radio ; 20 :
28123: LD_ADDR_OWVAR 42
28127: PUSH
28128: LD_INT 22
28130: ST_TO_ADDR
28131: GO 28419
28133: LD_INT 20
28135: DOUBLE
28136: EQUAL
28137: IFTRUE 28141
28139: GO 28152
28141: POP
// bc_type := b_ext_siberium ; 21 :
28142: LD_ADDR_OWVAR 42
28146: PUSH
28147: LD_INT 21
28149: ST_TO_ADDR
28150: GO 28419
28152: LD_INT 21
28154: DOUBLE
28155: EQUAL
28156: IFTRUE 28160
28158: GO 28171
28160: POP
// bc_type := b_ext_computer ; 22 :
28161: LD_ADDR_OWVAR 42
28165: PUSH
28166: LD_INT 24
28168: ST_TO_ADDR
28169: GO 28419
28171: LD_INT 22
28173: DOUBLE
28174: EQUAL
28175: IFTRUE 28179
28177: GO 28190
28179: POP
// bc_type := b_ext_track ; 23 :
28180: LD_ADDR_OWVAR 42
28184: PUSH
28185: LD_INT 16
28187: ST_TO_ADDR
28188: GO 28419
28190: LD_INT 23
28192: DOUBLE
28193: EQUAL
28194: IFTRUE 28198
28196: GO 28209
28198: POP
// bc_type := b_ext_laser ; 24 :
28199: LD_ADDR_OWVAR 42
28203: PUSH
28204: LD_INT 25
28206: ST_TO_ADDR
28207: GO 28419
28209: LD_INT 24
28211: DOUBLE
28212: EQUAL
28213: IFTRUE 28217
28215: GO 28228
28217: POP
// bc_type := b_control_tower ; 25 :
28218: LD_ADDR_OWVAR 42
28222: PUSH
28223: LD_INT 36
28225: ST_TO_ADDR
28226: GO 28419
28228: LD_INT 25
28230: DOUBLE
28231: EQUAL
28232: IFTRUE 28236
28234: GO 28247
28236: POP
// bc_type := b_breastwork ; 26 :
28237: LD_ADDR_OWVAR 42
28241: PUSH
28242: LD_INT 31
28244: ST_TO_ADDR
28245: GO 28419
28247: LD_INT 26
28249: DOUBLE
28250: EQUAL
28251: IFTRUE 28255
28253: GO 28266
28255: POP
// bc_type := b_bunker ; 27 :
28256: LD_ADDR_OWVAR 42
28260: PUSH
28261: LD_INT 32
28263: ST_TO_ADDR
28264: GO 28419
28266: LD_INT 27
28268: DOUBLE
28269: EQUAL
28270: IFTRUE 28274
28272: GO 28285
28274: POP
// bc_type := b_turret ; 28 :
28275: LD_ADDR_OWVAR 42
28279: PUSH
28280: LD_INT 33
28282: ST_TO_ADDR
28283: GO 28419
28285: LD_INT 28
28287: DOUBLE
28288: EQUAL
28289: IFTRUE 28293
28291: GO 28304
28293: POP
// bc_type := b_armoury ; 29 :
28294: LD_ADDR_OWVAR 42
28298: PUSH
28299: LD_INT 4
28301: ST_TO_ADDR
28302: GO 28419
28304: LD_INT 29
28306: DOUBLE
28307: EQUAL
28308: IFTRUE 28312
28310: GO 28323
28312: POP
// bc_type := b_barracks ; 30 :
28313: LD_ADDR_OWVAR 42
28317: PUSH
28318: LD_INT 5
28320: ST_TO_ADDR
28321: GO 28419
28323: LD_INT 30
28325: DOUBLE
28326: EQUAL
28327: IFTRUE 28331
28329: GO 28342
28331: POP
// bc_type := b_solar_power ; 31 :
28332: LD_ADDR_OWVAR 42
28336: PUSH
28337: LD_INT 27
28339: ST_TO_ADDR
28340: GO 28419
28342: LD_INT 31
28344: DOUBLE
28345: EQUAL
28346: IFTRUE 28350
28348: GO 28361
28350: POP
// bc_type := b_oil_power ; 32 :
28351: LD_ADDR_OWVAR 42
28355: PUSH
28356: LD_INT 26
28358: ST_TO_ADDR
28359: GO 28419
28361: LD_INT 32
28363: DOUBLE
28364: EQUAL
28365: IFTRUE 28369
28367: GO 28380
28369: POP
// bc_type := b_siberite_power ; 33 :
28370: LD_ADDR_OWVAR 42
28374: PUSH
28375: LD_INT 28
28377: ST_TO_ADDR
28378: GO 28419
28380: LD_INT 33
28382: DOUBLE
28383: EQUAL
28384: IFTRUE 28388
28386: GO 28399
28388: POP
// bc_type := b_oil_mine ; 34 :
28389: LD_ADDR_OWVAR 42
28393: PUSH
28394: LD_INT 29
28396: ST_TO_ADDR
28397: GO 28419
28399: LD_INT 34
28401: DOUBLE
28402: EQUAL
28403: IFTRUE 28407
28405: GO 28418
28407: POP
// bc_type := b_siberite_mine ; end ;
28408: LD_ADDR_OWVAR 42
28412: PUSH
28413: LD_INT 30
28415: ST_TO_ADDR
28416: GO 28419
28418: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28419: LD_ADDR_VAR 0 8
28423: PUSH
28424: LD_VAR 0 5
28428: PPUSH
28429: LD_VAR 0 6
28433: PPUSH
28434: LD_VAR 0 3
28438: PPUSH
28439: CALL_OW 47
28443: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28444: LD_OWVAR 42
28448: PUSH
28449: LD_INT 32
28451: PUSH
28452: LD_INT 33
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: IN
28459: IFFALSE 28475
// PlaceWeaponTurret ( b , weapon ) ;
28461: LD_VAR 0 8
28465: PPUSH
28466: LD_VAR 0 4
28470: PPUSH
28471: CALL_OW 431
// end ;
28475: LD_VAR 0 7
28479: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28480: LD_INT 0
28482: PPUSH
28483: PPUSH
28484: PPUSH
28485: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28486: LD_ADDR_VAR 0 4
28490: PUSH
28491: LD_INT 22
28493: PUSH
28494: LD_OWVAR 2
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 2
28505: PUSH
28506: LD_INT 30
28508: PUSH
28509: LD_INT 0
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: PUSH
28516: LD_INT 30
28518: PUSH
28519: LD_INT 1
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: LIST
28530: PUSH
28531: EMPTY
28532: LIST
28533: LIST
28534: PPUSH
28535: CALL_OW 69
28539: ST_TO_ADDR
// if not tmp then
28540: LD_VAR 0 4
28544: NOT
28545: IFFALSE 28549
// exit ;
28547: GO 28608
// for i in tmp do
28549: LD_ADDR_VAR 0 2
28553: PUSH
28554: LD_VAR 0 4
28558: PUSH
28559: FOR_IN
28560: IFFALSE 28606
// for j = 1 to 3 do
28562: LD_ADDR_VAR 0 3
28566: PUSH
28567: DOUBLE
28568: LD_INT 1
28570: DEC
28571: ST_TO_ADDR
28572: LD_INT 3
28574: PUSH
28575: FOR_TO
28576: IFFALSE 28602
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28578: LD_VAR 0 2
28582: PPUSH
28583: CALL_OW 274
28587: PPUSH
28588: LD_VAR 0 3
28592: PPUSH
28593: LD_INT 99999
28595: PPUSH
28596: CALL_OW 277
28600: GO 28575
28602: POP
28603: POP
28604: GO 28559
28606: POP
28607: POP
// end ;
28608: LD_VAR 0 1
28612: RET
// export function hHackSetLevel10 ; var i , j ; begin
28613: LD_INT 0
28615: PPUSH
28616: PPUSH
28617: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28618: LD_ADDR_VAR 0 2
28622: PUSH
28623: LD_INT 21
28625: PUSH
28626: LD_INT 1
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PPUSH
28633: CALL_OW 69
28637: PUSH
28638: FOR_IN
28639: IFFALSE 28691
// if IsSelected ( i ) then
28641: LD_VAR 0 2
28645: PPUSH
28646: CALL_OW 306
28650: IFFALSE 28689
// begin for j := 1 to 4 do
28652: LD_ADDR_VAR 0 3
28656: PUSH
28657: DOUBLE
28658: LD_INT 1
28660: DEC
28661: ST_TO_ADDR
28662: LD_INT 4
28664: PUSH
28665: FOR_TO
28666: IFFALSE 28687
// SetSkill ( i , j , 10 ) ;
28668: LD_VAR 0 2
28672: PPUSH
28673: LD_VAR 0 3
28677: PPUSH
28678: LD_INT 10
28680: PPUSH
28681: CALL_OW 237
28685: GO 28665
28687: POP
28688: POP
// end ;
28689: GO 28638
28691: POP
28692: POP
// end ;
28693: LD_VAR 0 1
28697: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28698: LD_INT 0
28700: PPUSH
28701: PPUSH
28702: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28703: LD_ADDR_VAR 0 2
28707: PUSH
28708: LD_INT 22
28710: PUSH
28711: LD_OWVAR 2
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 21
28722: PUSH
28723: LD_INT 1
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PPUSH
28734: CALL_OW 69
28738: PUSH
28739: FOR_IN
28740: IFFALSE 28781
// begin for j := 1 to 4 do
28742: LD_ADDR_VAR 0 3
28746: PUSH
28747: DOUBLE
28748: LD_INT 1
28750: DEC
28751: ST_TO_ADDR
28752: LD_INT 4
28754: PUSH
28755: FOR_TO
28756: IFFALSE 28777
// SetSkill ( i , j , 10 ) ;
28758: LD_VAR 0 2
28762: PPUSH
28763: LD_VAR 0 3
28767: PPUSH
28768: LD_INT 10
28770: PPUSH
28771: CALL_OW 237
28775: GO 28755
28777: POP
28778: POP
// end ;
28779: GO 28739
28781: POP
28782: POP
// end ;
28783: LD_VAR 0 1
28787: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28788: LD_INT 0
28790: PPUSH
// uc_side := your_side ;
28791: LD_ADDR_OWVAR 20
28795: PUSH
28796: LD_OWVAR 2
28800: ST_TO_ADDR
// uc_nation := nation ;
28801: LD_ADDR_OWVAR 21
28805: PUSH
28806: LD_VAR 0 1
28810: ST_TO_ADDR
// InitHc ;
28811: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28815: LD_INT 0
28817: PPUSH
28818: LD_VAR 0 2
28822: PPUSH
28823: LD_VAR 0 3
28827: PPUSH
28828: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28832: LD_VAR 0 4
28836: PPUSH
28837: LD_VAR 0 5
28841: PPUSH
28842: CALL_OW 428
28846: PUSH
28847: LD_INT 0
28849: EQUAL
28850: IFFALSE 28874
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28852: CALL_OW 44
28856: PPUSH
28857: LD_VAR 0 4
28861: PPUSH
28862: LD_VAR 0 5
28866: PPUSH
28867: LD_INT 1
28869: PPUSH
28870: CALL_OW 48
// end ;
28874: LD_VAR 0 6
28878: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28879: LD_INT 0
28881: PPUSH
28882: PPUSH
// uc_side := your_side ;
28883: LD_ADDR_OWVAR 20
28887: PUSH
28888: LD_OWVAR 2
28892: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28893: LD_VAR 0 1
28897: PUSH
28898: LD_INT 1
28900: PUSH
28901: LD_INT 2
28903: PUSH
28904: LD_INT 3
28906: PUSH
28907: LD_INT 4
28909: PUSH
28910: LD_INT 5
28912: PUSH
28913: EMPTY
28914: LIST
28915: LIST
28916: LIST
28917: LIST
28918: LIST
28919: IN
28920: IFFALSE 28932
// uc_nation := nation_american else
28922: LD_ADDR_OWVAR 21
28926: PUSH
28927: LD_INT 1
28929: ST_TO_ADDR
28930: GO 28975
// if chassis in [ 11 , 12 , 13 , 14 ] then
28932: LD_VAR 0 1
28936: PUSH
28937: LD_INT 11
28939: PUSH
28940: LD_INT 12
28942: PUSH
28943: LD_INT 13
28945: PUSH
28946: LD_INT 14
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: IN
28955: IFFALSE 28967
// uc_nation := nation_arabian else
28957: LD_ADDR_OWVAR 21
28961: PUSH
28962: LD_INT 2
28964: ST_TO_ADDR
28965: GO 28975
// uc_nation := nation_russian ;
28967: LD_ADDR_OWVAR 21
28971: PUSH
28972: LD_INT 3
28974: ST_TO_ADDR
// vc_chassis := chassis ;
28975: LD_ADDR_OWVAR 37
28979: PUSH
28980: LD_VAR 0 1
28984: ST_TO_ADDR
// vc_engine := engine ;
28985: LD_ADDR_OWVAR 39
28989: PUSH
28990: LD_VAR 0 2
28994: ST_TO_ADDR
// vc_control := control ;
28995: LD_ADDR_OWVAR 38
28999: PUSH
29000: LD_VAR 0 3
29004: ST_TO_ADDR
// vc_weapon := weapon ;
29005: LD_ADDR_OWVAR 40
29009: PUSH
29010: LD_VAR 0 4
29014: ST_TO_ADDR
// un := CreateVehicle ;
29015: LD_ADDR_VAR 0 8
29019: PUSH
29020: CALL_OW 45
29024: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
29025: LD_VAR 0 8
29029: PPUSH
29030: LD_INT 0
29032: PPUSH
29033: LD_INT 5
29035: PPUSH
29036: CALL_OW 12
29040: PPUSH
29041: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
29045: LD_VAR 0 8
29049: PPUSH
29050: LD_VAR 0 5
29054: PPUSH
29055: LD_VAR 0 6
29059: PPUSH
29060: LD_INT 1
29062: PPUSH
29063: CALL_OW 48
// end ;
29067: LD_VAR 0 7
29071: RET
// export hInvincible ; every 1 do
29072: GO 29074
29074: DISABLE
// hInvincible := [ ] ;
29075: LD_ADDR_EXP 115
29079: PUSH
29080: EMPTY
29081: ST_TO_ADDR
29082: END
// every 10 do var i ;
29083: GO 29085
29085: DISABLE
29086: LD_INT 0
29088: PPUSH
// begin enable ;
29089: ENABLE
// if not hInvincible then
29090: LD_EXP 115
29094: NOT
29095: IFFALSE 29099
// exit ;
29097: GO 29143
// for i in hInvincible do
29099: LD_ADDR_VAR 0 1
29103: PUSH
29104: LD_EXP 115
29108: PUSH
29109: FOR_IN
29110: IFFALSE 29141
// if GetLives ( i ) < 1000 then
29112: LD_VAR 0 1
29116: PPUSH
29117: CALL_OW 256
29121: PUSH
29122: LD_INT 1000
29124: LESS
29125: IFFALSE 29139
// SetLives ( i , 1000 ) ;
29127: LD_VAR 0 1
29131: PPUSH
29132: LD_INT 1000
29134: PPUSH
29135: CALL_OW 234
29139: GO 29109
29141: POP
29142: POP
// end ;
29143: PPOPN 1
29145: END
// export function hHackInvincible ; var i ; begin
29146: LD_INT 0
29148: PPUSH
29149: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
29150: LD_ADDR_VAR 0 2
29154: PUSH
29155: LD_INT 2
29157: PUSH
29158: LD_INT 21
29160: PUSH
29161: LD_INT 1
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: LD_INT 21
29170: PUSH
29171: LD_INT 2
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: EMPTY
29179: LIST
29180: LIST
29181: LIST
29182: PPUSH
29183: CALL_OW 69
29187: PUSH
29188: FOR_IN
29189: IFFALSE 29250
// if IsSelected ( i ) then
29191: LD_VAR 0 2
29195: PPUSH
29196: CALL_OW 306
29200: IFFALSE 29248
// begin if i in hInvincible then
29202: LD_VAR 0 2
29206: PUSH
29207: LD_EXP 115
29211: IN
29212: IFFALSE 29232
// hInvincible := hInvincible diff i else
29214: LD_ADDR_EXP 115
29218: PUSH
29219: LD_EXP 115
29223: PUSH
29224: LD_VAR 0 2
29228: DIFF
29229: ST_TO_ADDR
29230: GO 29248
// hInvincible := hInvincible union i ;
29232: LD_ADDR_EXP 115
29236: PUSH
29237: LD_EXP 115
29241: PUSH
29242: LD_VAR 0 2
29246: UNION
29247: ST_TO_ADDR
// end ;
29248: GO 29188
29250: POP
29251: POP
// end ;
29252: LD_VAR 0 1
29256: RET
// export function hHackInvisible ; var i , j ; begin
29257: LD_INT 0
29259: PPUSH
29260: PPUSH
29261: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29262: LD_ADDR_VAR 0 2
29266: PUSH
29267: LD_INT 21
29269: PUSH
29270: LD_INT 1
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PPUSH
29277: CALL_OW 69
29281: PUSH
29282: FOR_IN
29283: IFFALSE 29307
// if IsSelected ( i ) then
29285: LD_VAR 0 2
29289: PPUSH
29290: CALL_OW 306
29294: IFFALSE 29305
// ComForceInvisible ( i ) ;
29296: LD_VAR 0 2
29300: PPUSH
29301: CALL_OW 496
29305: GO 29282
29307: POP
29308: POP
// end ;
29309: LD_VAR 0 1
29313: RET
// export function hHackChangeYourSide ; begin
29314: LD_INT 0
29316: PPUSH
// if your_side = 8 then
29317: LD_OWVAR 2
29321: PUSH
29322: LD_INT 8
29324: EQUAL
29325: IFFALSE 29337
// your_side := 0 else
29327: LD_ADDR_OWVAR 2
29331: PUSH
29332: LD_INT 0
29334: ST_TO_ADDR
29335: GO 29351
// your_side := your_side + 1 ;
29337: LD_ADDR_OWVAR 2
29341: PUSH
29342: LD_OWVAR 2
29346: PUSH
29347: LD_INT 1
29349: PLUS
29350: ST_TO_ADDR
// end ;
29351: LD_VAR 0 1
29355: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29356: LD_INT 0
29358: PPUSH
29359: PPUSH
29360: PPUSH
// for i in all_units do
29361: LD_ADDR_VAR 0 2
29365: PUSH
29366: LD_OWVAR 3
29370: PUSH
29371: FOR_IN
29372: IFFALSE 29450
// if IsSelected ( i ) then
29374: LD_VAR 0 2
29378: PPUSH
29379: CALL_OW 306
29383: IFFALSE 29448
// begin j := GetSide ( i ) ;
29385: LD_ADDR_VAR 0 3
29389: PUSH
29390: LD_VAR 0 2
29394: PPUSH
29395: CALL_OW 255
29399: ST_TO_ADDR
// if j = 8 then
29400: LD_VAR 0 3
29404: PUSH
29405: LD_INT 8
29407: EQUAL
29408: IFFALSE 29420
// j := 0 else
29410: LD_ADDR_VAR 0 3
29414: PUSH
29415: LD_INT 0
29417: ST_TO_ADDR
29418: GO 29434
// j := j + 1 ;
29420: LD_ADDR_VAR 0 3
29424: PUSH
29425: LD_VAR 0 3
29429: PUSH
29430: LD_INT 1
29432: PLUS
29433: ST_TO_ADDR
// SetSide ( i , j ) ;
29434: LD_VAR 0 2
29438: PPUSH
29439: LD_VAR 0 3
29443: PPUSH
29444: CALL_OW 235
// end ;
29448: GO 29371
29450: POP
29451: POP
// end ;
29452: LD_VAR 0 1
29456: RET
// export function hHackFog ; begin
29457: LD_INT 0
29459: PPUSH
// FogOff ( true ) ;
29460: LD_INT 1
29462: PPUSH
29463: CALL_OW 344
// end ;
29467: LD_VAR 0 1
29471: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29472: LD_INT 0
29474: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29475: LD_VAR 0 1
29479: PPUSH
29480: LD_VAR 0 2
29484: PPUSH
29485: LD_VAR 0 3
29489: PPUSH
29490: LD_INT 1
29492: PPUSH
29493: LD_INT 1
29495: PPUSH
29496: CALL_OW 483
// CenterOnXY ( x , y ) ;
29500: LD_VAR 0 2
29504: PPUSH
29505: LD_VAR 0 3
29509: PPUSH
29510: CALL_OW 84
// end ; end_of_file
29514: LD_VAR 0 4
29518: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
29519: LD_INT 0
29521: PPUSH
29522: PPUSH
29523: PPUSH
29524: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
29525: LD_VAR 0 1
29529: PPUSH
29530: CALL_OW 264
29534: PUSH
29535: LD_EXP 42
29539: EQUAL
29540: IFFALSE 29612
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
29542: LD_INT 68
29544: PPUSH
29545: LD_VAR 0 1
29549: PPUSH
29550: CALL_OW 255
29554: PPUSH
29555: CALL_OW 321
29559: PUSH
29560: LD_INT 2
29562: EQUAL
29563: IFFALSE 29575
// eff := 70 else
29565: LD_ADDR_VAR 0 4
29569: PUSH
29570: LD_INT 70
29572: ST_TO_ADDR
29573: GO 29583
// eff := 30 ;
29575: LD_ADDR_VAR 0 4
29579: PUSH
29580: LD_INT 30
29582: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
29583: LD_VAR 0 1
29587: PPUSH
29588: CALL_OW 250
29592: PPUSH
29593: LD_VAR 0 1
29597: PPUSH
29598: CALL_OW 251
29602: PPUSH
29603: LD_VAR 0 4
29607: PPUSH
29608: CALL_OW 495
// end ; end ;
29612: LD_VAR 0 2
29616: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
29617: LD_INT 0
29619: PPUSH
// end ;
29620: LD_VAR 0 4
29624: RET
// export function SOS_Command ( cmd ) ; begin
29625: LD_INT 0
29627: PPUSH
// end ;
29628: LD_VAR 0 2
29632: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
29633: LD_INT 0
29635: PPUSH
// end ;
29636: LD_VAR 0 6
29640: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
29641: LD_INT 0
29643: PPUSH
29644: PPUSH
// if not vehicle or not factory then
29645: LD_VAR 0 1
29649: NOT
29650: PUSH
29651: LD_VAR 0 2
29655: NOT
29656: OR
29657: IFFALSE 29661
// exit ;
29659: GO 29892
// if factoryWaypoints >= factory then
29661: LD_EXP 116
29665: PUSH
29666: LD_VAR 0 2
29670: GREATEREQUAL
29671: IFFALSE 29892
// if factoryWaypoints [ factory ] then
29673: LD_EXP 116
29677: PUSH
29678: LD_VAR 0 2
29682: ARRAY
29683: IFFALSE 29892
// begin if GetControl ( vehicle ) = control_manual then
29685: LD_VAR 0 1
29689: PPUSH
29690: CALL_OW 263
29694: PUSH
29695: LD_INT 1
29697: EQUAL
29698: IFFALSE 29779
// begin driver := IsDrivenBy ( vehicle ) ;
29700: LD_ADDR_VAR 0 4
29704: PUSH
29705: LD_VAR 0 1
29709: PPUSH
29710: CALL_OW 311
29714: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
29715: LD_VAR 0 4
29719: PPUSH
29720: LD_EXP 116
29724: PUSH
29725: LD_VAR 0 2
29729: ARRAY
29730: PUSH
29731: LD_INT 3
29733: ARRAY
29734: PPUSH
29735: LD_EXP 116
29739: PUSH
29740: LD_VAR 0 2
29744: ARRAY
29745: PUSH
29746: LD_INT 4
29748: ARRAY
29749: PPUSH
29750: CALL_OW 171
// AddComExitVehicle ( driver ) ;
29754: LD_VAR 0 4
29758: PPUSH
29759: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
29763: LD_VAR 0 4
29767: PPUSH
29768: LD_VAR 0 2
29772: PPUSH
29773: CALL_OW 180
// end else
29777: GO 29892
// if GetControl ( vehicle ) = control_remote then
29779: LD_VAR 0 1
29783: PPUSH
29784: CALL_OW 263
29788: PUSH
29789: LD_INT 2
29791: EQUAL
29792: IFFALSE 29853
// begin wait ( 0 0$2 ) ;
29794: LD_INT 70
29796: PPUSH
29797: CALL_OW 67
// if Connect ( vehicle ) then
29801: LD_VAR 0 1
29805: PPUSH
29806: CALL 42269 0 1
29810: IFFALSE 29851
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
29812: LD_VAR 0 1
29816: PPUSH
29817: LD_EXP 116
29821: PUSH
29822: LD_VAR 0 2
29826: ARRAY
29827: PUSH
29828: LD_INT 3
29830: ARRAY
29831: PPUSH
29832: LD_EXP 116
29836: PUSH
29837: LD_VAR 0 2
29841: ARRAY
29842: PUSH
29843: LD_INT 4
29845: ARRAY
29846: PPUSH
29847: CALL_OW 171
// end else
29851: GO 29892
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
29853: LD_VAR 0 1
29857: PPUSH
29858: LD_EXP 116
29862: PUSH
29863: LD_VAR 0 2
29867: ARRAY
29868: PUSH
29869: LD_INT 3
29871: ARRAY
29872: PPUSH
29873: LD_EXP 116
29877: PUSH
29878: LD_VAR 0 2
29882: ARRAY
29883: PUSH
29884: LD_INT 4
29886: ARRAY
29887: PPUSH
29888: CALL_OW 171
// end ; end ;
29892: LD_VAR 0 3
29896: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
29897: LD_INT 0
29899: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
29900: LD_VAR 0 1
29904: PUSH
29905: LD_INT 250
29907: EQUAL
29908: PUSH
29909: LD_VAR 0 2
29913: PPUSH
29914: CALL_OW 264
29918: PUSH
29919: LD_EXP 45
29923: EQUAL
29924: AND
29925: IFFALSE 29946
// MinerPlaceMine ( unit , x , y ) ;
29927: LD_VAR 0 2
29931: PPUSH
29932: LD_VAR 0 4
29936: PPUSH
29937: LD_VAR 0 5
29941: PPUSH
29942: CALL 32674 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29946: LD_VAR 0 1
29950: PUSH
29951: LD_INT 251
29953: EQUAL
29954: PUSH
29955: LD_VAR 0 2
29959: PPUSH
29960: CALL_OW 264
29964: PUSH
29965: LD_EXP 45
29969: EQUAL
29970: AND
29971: IFFALSE 29992
// MinerDetonateMine ( unit , x , y ) ;
29973: LD_VAR 0 2
29977: PPUSH
29978: LD_VAR 0 4
29982: PPUSH
29983: LD_VAR 0 5
29987: PPUSH
29988: CALL 32951 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29992: LD_VAR 0 1
29996: PUSH
29997: LD_INT 252
29999: EQUAL
30000: PUSH
30001: LD_VAR 0 2
30005: PPUSH
30006: CALL_OW 264
30010: PUSH
30011: LD_EXP 45
30015: EQUAL
30016: AND
30017: IFFALSE 30038
// MinerCreateMinefield ( unit , x , y ) ;
30019: LD_VAR 0 2
30023: PPUSH
30024: LD_VAR 0 4
30028: PPUSH
30029: LD_VAR 0 5
30033: PPUSH
30034: CALL 33368 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
30038: LD_VAR 0 1
30042: PUSH
30043: LD_INT 253
30045: EQUAL
30046: PUSH
30047: LD_VAR 0 2
30051: PPUSH
30052: CALL_OW 257
30056: PUSH
30057: LD_INT 5
30059: EQUAL
30060: AND
30061: IFFALSE 30082
// ComBinocular ( unit , x , y ) ;
30063: LD_VAR 0 2
30067: PPUSH
30068: LD_VAR 0 4
30072: PPUSH
30073: LD_VAR 0 5
30077: PPUSH
30078: CALL 33739 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
30082: LD_VAR 0 1
30086: PUSH
30087: LD_INT 254
30089: EQUAL
30090: PUSH
30091: LD_VAR 0 2
30095: PPUSH
30096: CALL_OW 264
30100: PUSH
30101: LD_EXP 40
30105: EQUAL
30106: AND
30107: PUSH
30108: LD_VAR 0 3
30112: PPUSH
30113: CALL_OW 263
30117: PUSH
30118: LD_INT 3
30120: EQUAL
30121: AND
30122: IFFALSE 30138
// HackDestroyVehicle ( unit , selectedUnit ) ;
30124: LD_VAR 0 2
30128: PPUSH
30129: LD_VAR 0 3
30133: PPUSH
30134: CALL 32034 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
30138: LD_VAR 0 1
30142: PUSH
30143: LD_INT 255
30145: EQUAL
30146: PUSH
30147: LD_VAR 0 2
30151: PPUSH
30152: CALL_OW 264
30156: PUSH
30157: LD_INT 14
30159: PUSH
30160: LD_INT 53
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: IN
30167: AND
30168: PUSH
30169: LD_VAR 0 4
30173: PPUSH
30174: LD_VAR 0 5
30178: PPUSH
30179: CALL_OW 488
30183: AND
30184: IFFALSE 30208
// CutTreeXYR ( unit , x , y , 12 ) ;
30186: LD_VAR 0 2
30190: PPUSH
30191: LD_VAR 0 4
30195: PPUSH
30196: LD_VAR 0 5
30200: PPUSH
30201: LD_INT 12
30203: PPUSH
30204: CALL 30600 0 4
// if cmd = 256 then
30208: LD_VAR 0 1
30212: PUSH
30213: LD_INT 256
30215: EQUAL
30216: IFFALSE 30237
// SetFactoryWaypoint ( unit , x , y ) ;
30218: LD_VAR 0 2
30222: PPUSH
30223: LD_VAR 0 4
30227: PPUSH
30228: LD_VAR 0 5
30232: PPUSH
30233: CALL 30242 0 3
// end ;
30237: LD_VAR 0 6
30241: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
30242: LD_INT 0
30244: PPUSH
30245: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
30246: LD_VAR 0 1
30250: NOT
30251: PUSH
30252: LD_VAR 0 2
30256: PPUSH
30257: LD_VAR 0 3
30261: PPUSH
30262: CALL_OW 488
30266: NOT
30267: OR
30268: PUSH
30269: LD_VAR 0 1
30273: PPUSH
30274: CALL_OW 266
30278: PUSH
30279: LD_INT 3
30281: NONEQUAL
30282: PUSH
30283: LD_VAR 0 1
30287: PPUSH
30288: CALL_OW 247
30292: PUSH
30293: LD_INT 1
30295: EQUAL
30296: NOT
30297: AND
30298: OR
30299: IFFALSE 30303
// exit ;
30301: GO 30452
// if GetType ( factory ) = unit_human then
30303: LD_VAR 0 1
30307: PPUSH
30308: CALL_OW 247
30312: PUSH
30313: LD_INT 1
30315: EQUAL
30316: IFFALSE 30333
// factory := IsInUnit ( factory ) ;
30318: LD_ADDR_VAR 0 1
30322: PUSH
30323: LD_VAR 0 1
30327: PPUSH
30328: CALL_OW 310
30332: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
30333: LD_VAR 0 1
30337: PPUSH
30338: CALL_OW 266
30342: PUSH
30343: LD_INT 3
30345: NONEQUAL
30346: IFFALSE 30350
// exit ;
30348: GO 30452
// if HexInfo ( x , y ) = factory then
30350: LD_VAR 0 2
30354: PPUSH
30355: LD_VAR 0 3
30359: PPUSH
30360: CALL_OW 428
30364: PUSH
30365: LD_VAR 0 1
30369: EQUAL
30370: IFFALSE 30397
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
30372: LD_ADDR_EXP 116
30376: PUSH
30377: LD_EXP 116
30381: PPUSH
30382: LD_VAR 0 1
30386: PPUSH
30387: LD_INT 0
30389: PPUSH
30390: CALL_OW 1
30394: ST_TO_ADDR
30395: GO 30448
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
30397: LD_ADDR_EXP 116
30401: PUSH
30402: LD_EXP 116
30406: PPUSH
30407: LD_VAR 0 1
30411: PPUSH
30412: LD_VAR 0 1
30416: PPUSH
30417: CALL_OW 255
30421: PUSH
30422: LD_VAR 0 1
30426: PUSH
30427: LD_VAR 0 2
30431: PUSH
30432: LD_VAR 0 3
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: PPUSH
30443: CALL_OW 1
30447: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30448: CALL 30457 0 0
// end ;
30452: LD_VAR 0 4
30456: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
30457: LD_INT 0
30459: PPUSH
30460: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30461: LD_STRING resetFactoryWaypoint();
30463: PPUSH
30464: CALL_OW 559
// if factoryWaypoints then
30468: LD_EXP 116
30472: IFFALSE 30595
// begin for i := 1 to factoryWaypoints do
30474: LD_ADDR_VAR 0 2
30478: PUSH
30479: DOUBLE
30480: LD_INT 1
30482: DEC
30483: ST_TO_ADDR
30484: LD_EXP 116
30488: PUSH
30489: FOR_TO
30490: IFFALSE 30593
// if factoryWaypoints [ i ] then
30492: LD_EXP 116
30496: PUSH
30497: LD_VAR 0 2
30501: ARRAY
30502: IFFALSE 30591
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
30504: LD_STRING setFactoryWaypointXY(
30506: PUSH
30507: LD_EXP 116
30511: PUSH
30512: LD_VAR 0 2
30516: ARRAY
30517: PUSH
30518: LD_INT 1
30520: ARRAY
30521: STR
30522: PUSH
30523: LD_STRING ,
30525: STR
30526: PUSH
30527: LD_EXP 116
30531: PUSH
30532: LD_VAR 0 2
30536: ARRAY
30537: PUSH
30538: LD_INT 2
30540: ARRAY
30541: STR
30542: PUSH
30543: LD_STRING ,
30545: STR
30546: PUSH
30547: LD_EXP 116
30551: PUSH
30552: LD_VAR 0 2
30556: ARRAY
30557: PUSH
30558: LD_INT 3
30560: ARRAY
30561: STR
30562: PUSH
30563: LD_STRING ,
30565: STR
30566: PUSH
30567: LD_EXP 116
30571: PUSH
30572: LD_VAR 0 2
30576: ARRAY
30577: PUSH
30578: LD_INT 4
30580: ARRAY
30581: STR
30582: PUSH
30583: LD_STRING )
30585: STR
30586: PPUSH
30587: CALL_OW 559
30591: GO 30489
30593: POP
30594: POP
// end ; end ;
30595: LD_VAR 0 1
30599: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
30600: LD_INT 0
30602: PPUSH
30603: PPUSH
30604: PPUSH
30605: PPUSH
30606: PPUSH
30607: PPUSH
30608: PPUSH
30609: PPUSH
30610: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
30611: LD_VAR 0 1
30615: NOT
30616: PUSH
30617: LD_VAR 0 2
30621: PPUSH
30622: LD_VAR 0 3
30626: PPUSH
30627: CALL_OW 488
30631: NOT
30632: OR
30633: PUSH
30634: LD_VAR 0 4
30638: NOT
30639: OR
30640: IFFALSE 30644
// exit ;
30642: GO 30984
// list := [ ] ;
30644: LD_ADDR_VAR 0 13
30648: PUSH
30649: EMPTY
30650: ST_TO_ADDR
// if x - r < 0 then
30651: LD_VAR 0 2
30655: PUSH
30656: LD_VAR 0 4
30660: MINUS
30661: PUSH
30662: LD_INT 0
30664: LESS
30665: IFFALSE 30677
// min_x := 0 else
30667: LD_ADDR_VAR 0 7
30671: PUSH
30672: LD_INT 0
30674: ST_TO_ADDR
30675: GO 30693
// min_x := x - r ;
30677: LD_ADDR_VAR 0 7
30681: PUSH
30682: LD_VAR 0 2
30686: PUSH
30687: LD_VAR 0 4
30691: MINUS
30692: ST_TO_ADDR
// if y - r < 0 then
30693: LD_VAR 0 3
30697: PUSH
30698: LD_VAR 0 4
30702: MINUS
30703: PUSH
30704: LD_INT 0
30706: LESS
30707: IFFALSE 30719
// min_y := 0 else
30709: LD_ADDR_VAR 0 8
30713: PUSH
30714: LD_INT 0
30716: ST_TO_ADDR
30717: GO 30735
// min_y := y - r ;
30719: LD_ADDR_VAR 0 8
30723: PUSH
30724: LD_VAR 0 3
30728: PUSH
30729: LD_VAR 0 4
30733: MINUS
30734: ST_TO_ADDR
// max_x := x + r ;
30735: LD_ADDR_VAR 0 9
30739: PUSH
30740: LD_VAR 0 2
30744: PUSH
30745: LD_VAR 0 4
30749: PLUS
30750: ST_TO_ADDR
// max_y := y + r ;
30751: LD_ADDR_VAR 0 10
30755: PUSH
30756: LD_VAR 0 3
30760: PUSH
30761: LD_VAR 0 4
30765: PLUS
30766: ST_TO_ADDR
// for _x = min_x to max_x do
30767: LD_ADDR_VAR 0 11
30771: PUSH
30772: DOUBLE
30773: LD_VAR 0 7
30777: DEC
30778: ST_TO_ADDR
30779: LD_VAR 0 9
30783: PUSH
30784: FOR_TO
30785: IFFALSE 30902
// for _y = min_y to max_y do
30787: LD_ADDR_VAR 0 12
30791: PUSH
30792: DOUBLE
30793: LD_VAR 0 8
30797: DEC
30798: ST_TO_ADDR
30799: LD_VAR 0 10
30803: PUSH
30804: FOR_TO
30805: IFFALSE 30898
// begin if not ValidHex ( _x , _y ) then
30807: LD_VAR 0 11
30811: PPUSH
30812: LD_VAR 0 12
30816: PPUSH
30817: CALL_OW 488
30821: NOT
30822: IFFALSE 30826
// continue ;
30824: GO 30804
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30826: LD_VAR 0 11
30830: PPUSH
30831: LD_VAR 0 12
30835: PPUSH
30836: CALL_OW 351
30840: PUSH
30841: LD_VAR 0 11
30845: PPUSH
30846: LD_VAR 0 12
30850: PPUSH
30851: CALL_OW 554
30855: AND
30856: IFFALSE 30896
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30858: LD_ADDR_VAR 0 13
30862: PUSH
30863: LD_VAR 0 13
30867: PPUSH
30868: LD_VAR 0 13
30872: PUSH
30873: LD_INT 1
30875: PLUS
30876: PPUSH
30877: LD_VAR 0 11
30881: PUSH
30882: LD_VAR 0 12
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PPUSH
30891: CALL_OW 2
30895: ST_TO_ADDR
// end ;
30896: GO 30804
30898: POP
30899: POP
30900: GO 30784
30902: POP
30903: POP
// if not list then
30904: LD_VAR 0 13
30908: NOT
30909: IFFALSE 30913
// exit ;
30911: GO 30984
// for i in list do
30913: LD_ADDR_VAR 0 6
30917: PUSH
30918: LD_VAR 0 13
30922: PUSH
30923: FOR_IN
30924: IFFALSE 30982
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
30926: LD_VAR 0 1
30930: PPUSH
30931: LD_STRING M
30933: PUSH
30934: LD_VAR 0 6
30938: PUSH
30939: LD_INT 1
30941: ARRAY
30942: PUSH
30943: LD_VAR 0 6
30947: PUSH
30948: LD_INT 2
30950: ARRAY
30951: PUSH
30952: LD_INT 0
30954: PUSH
30955: LD_INT 0
30957: PUSH
30958: LD_INT 0
30960: PUSH
30961: LD_INT 0
30963: PUSH
30964: EMPTY
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: PUSH
30973: EMPTY
30974: LIST
30975: PPUSH
30976: CALL_OW 447
30980: GO 30923
30982: POP
30983: POP
// end ;
30984: LD_VAR 0 5
30988: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
30989: LD_EXP 117
30993: NOT
30994: IFFALSE 31044
30996: GO 30998
30998: DISABLE
// begin initHack := true ;
30999: LD_ADDR_EXP 117
31003: PUSH
31004: LD_INT 1
31006: ST_TO_ADDR
// hackTanks := [ ] ;
31007: LD_ADDR_EXP 118
31011: PUSH
31012: EMPTY
31013: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
31014: LD_ADDR_EXP 119
31018: PUSH
31019: EMPTY
31020: ST_TO_ADDR
// hackLimit := 3 ;
31021: LD_ADDR_EXP 120
31025: PUSH
31026: LD_INT 3
31028: ST_TO_ADDR
// hackDist := 12 ;
31029: LD_ADDR_EXP 121
31033: PUSH
31034: LD_INT 12
31036: ST_TO_ADDR
// hackCounter := [ ] ;
31037: LD_ADDR_EXP 122
31041: PUSH
31042: EMPTY
31043: ST_TO_ADDR
// end ;
31044: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
31045: LD_EXP 117
31049: PUSH
31050: LD_INT 34
31052: PUSH
31053: LD_EXP 40
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PPUSH
31062: CALL_OW 69
31066: AND
31067: IFFALSE 31322
31069: GO 31071
31071: DISABLE
31072: LD_INT 0
31074: PPUSH
31075: PPUSH
// begin enable ;
31076: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
31077: LD_ADDR_VAR 0 1
31081: PUSH
31082: LD_INT 34
31084: PUSH
31085: LD_EXP 40
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PPUSH
31094: CALL_OW 69
31098: PUSH
31099: FOR_IN
31100: IFFALSE 31320
// begin if not i in hackTanks then
31102: LD_VAR 0 1
31106: PUSH
31107: LD_EXP 118
31111: IN
31112: NOT
31113: IFFALSE 31196
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
31115: LD_ADDR_EXP 118
31119: PUSH
31120: LD_EXP 118
31124: PPUSH
31125: LD_EXP 118
31129: PUSH
31130: LD_INT 1
31132: PLUS
31133: PPUSH
31134: LD_VAR 0 1
31138: PPUSH
31139: CALL_OW 1
31143: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
31144: LD_ADDR_EXP 119
31148: PUSH
31149: LD_EXP 119
31153: PPUSH
31154: LD_EXP 119
31158: PUSH
31159: LD_INT 1
31161: PLUS
31162: PPUSH
31163: EMPTY
31164: PPUSH
31165: CALL_OW 1
31169: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
31170: LD_ADDR_EXP 122
31174: PUSH
31175: LD_EXP 122
31179: PPUSH
31180: LD_EXP 122
31184: PUSH
31185: LD_INT 1
31187: PLUS
31188: PPUSH
31189: EMPTY
31190: PPUSH
31191: CALL_OW 1
31195: ST_TO_ADDR
// end ; if not IsOk ( i ) then
31196: LD_VAR 0 1
31200: PPUSH
31201: CALL_OW 302
31205: NOT
31206: IFFALSE 31219
// begin HackUnlinkAll ( i ) ;
31208: LD_VAR 0 1
31212: PPUSH
31213: CALL 31325 0 1
// continue ;
31217: GO 31099
// end ; HackCheckCapturedStatus ( i ) ;
31219: LD_VAR 0 1
31223: PPUSH
31224: CALL 31768 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
31228: LD_ADDR_VAR 0 2
31232: PUSH
31233: LD_INT 81
31235: PUSH
31236: LD_VAR 0 1
31240: PPUSH
31241: CALL_OW 255
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 33
31252: PUSH
31253: LD_INT 3
31255: PUSH
31256: EMPTY
31257: LIST
31258: LIST
31259: PUSH
31260: LD_INT 91
31262: PUSH
31263: LD_VAR 0 1
31267: PUSH
31268: LD_EXP 121
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: LIST
31277: PUSH
31278: LD_INT 50
31280: PUSH
31281: EMPTY
31282: LIST
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: LIST
31288: LIST
31289: PPUSH
31290: CALL_OW 69
31294: ST_TO_ADDR
// if not tmp then
31295: LD_VAR 0 2
31299: NOT
31300: IFFALSE 31304
// continue ;
31302: GO 31099
// HackLink ( i , tmp ) ;
31304: LD_VAR 0 1
31308: PPUSH
31309: LD_VAR 0 2
31313: PPUSH
31314: CALL 31461 0 2
// end ;
31318: GO 31099
31320: POP
31321: POP
// end ;
31322: PPOPN 2
31324: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
31325: LD_INT 0
31327: PPUSH
31328: PPUSH
31329: PPUSH
// if not hack in hackTanks then
31330: LD_VAR 0 1
31334: PUSH
31335: LD_EXP 118
31339: IN
31340: NOT
31341: IFFALSE 31345
// exit ;
31343: GO 31456
// index := GetElementIndex ( hackTanks , hack ) ;
31345: LD_ADDR_VAR 0 4
31349: PUSH
31350: LD_EXP 118
31354: PPUSH
31355: LD_VAR 0 1
31359: PPUSH
31360: CALL 39083 0 2
31364: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
31365: LD_EXP 119
31369: PUSH
31370: LD_VAR 0 4
31374: ARRAY
31375: IFFALSE 31456
// begin for i in hackTanksCaptured [ index ] do
31377: LD_ADDR_VAR 0 3
31381: PUSH
31382: LD_EXP 119
31386: PUSH
31387: LD_VAR 0 4
31391: ARRAY
31392: PUSH
31393: FOR_IN
31394: IFFALSE 31420
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
31396: LD_VAR 0 3
31400: PUSH
31401: LD_INT 1
31403: ARRAY
31404: PPUSH
31405: LD_VAR 0 3
31409: PUSH
31410: LD_INT 2
31412: ARRAY
31413: PPUSH
31414: CALL_OW 235
31418: GO 31393
31420: POP
31421: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
31422: LD_ADDR_EXP 119
31426: PUSH
31427: LD_EXP 119
31431: PPUSH
31432: LD_VAR 0 4
31436: PPUSH
31437: EMPTY
31438: PPUSH
31439: CALL_OW 1
31443: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
31444: LD_VAR 0 1
31448: PPUSH
31449: LD_INT 0
31451: PPUSH
31452: CALL_OW 505
// end ; end ;
31456: LD_VAR 0 2
31460: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
31461: LD_INT 0
31463: PPUSH
31464: PPUSH
31465: PPUSH
// if not hack in hackTanks or not vehicles then
31466: LD_VAR 0 1
31470: PUSH
31471: LD_EXP 118
31475: IN
31476: NOT
31477: PUSH
31478: LD_VAR 0 2
31482: NOT
31483: OR
31484: IFFALSE 31488
// exit ;
31486: GO 31763
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
31488: LD_ADDR_VAR 0 2
31492: PUSH
31493: LD_VAR 0 1
31497: PPUSH
31498: LD_VAR 0 2
31502: PPUSH
31503: LD_INT 1
31505: PPUSH
31506: LD_INT 1
31508: PPUSH
31509: CALL 39733 0 4
31513: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
31514: LD_ADDR_VAR 0 5
31518: PUSH
31519: LD_EXP 118
31523: PPUSH
31524: LD_VAR 0 1
31528: PPUSH
31529: CALL 39083 0 2
31533: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
31534: LD_EXP 119
31538: PUSH
31539: LD_VAR 0 5
31543: ARRAY
31544: PUSH
31545: LD_EXP 120
31549: LESS
31550: IFFALSE 31739
// begin for i := 1 to vehicles do
31552: LD_ADDR_VAR 0 4
31556: PUSH
31557: DOUBLE
31558: LD_INT 1
31560: DEC
31561: ST_TO_ADDR
31562: LD_VAR 0 2
31566: PUSH
31567: FOR_TO
31568: IFFALSE 31737
// begin if hackTanksCaptured [ index ] = hackLimit then
31570: LD_EXP 119
31574: PUSH
31575: LD_VAR 0 5
31579: ARRAY
31580: PUSH
31581: LD_EXP 120
31585: EQUAL
31586: IFFALSE 31590
// break ;
31588: GO 31737
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
31590: LD_ADDR_EXP 122
31594: PUSH
31595: LD_EXP 122
31599: PPUSH
31600: LD_VAR 0 5
31604: PPUSH
31605: LD_EXP 122
31609: PUSH
31610: LD_VAR 0 5
31614: ARRAY
31615: PUSH
31616: LD_INT 1
31618: PLUS
31619: PPUSH
31620: CALL_OW 1
31624: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31625: LD_ADDR_EXP 119
31629: PUSH
31630: LD_EXP 119
31634: PPUSH
31635: LD_VAR 0 5
31639: PUSH
31640: LD_EXP 119
31644: PUSH
31645: LD_VAR 0 5
31649: ARRAY
31650: PUSH
31651: LD_INT 1
31653: PLUS
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PPUSH
31659: LD_VAR 0 2
31663: PUSH
31664: LD_VAR 0 4
31668: ARRAY
31669: PUSH
31670: LD_VAR 0 2
31674: PUSH
31675: LD_VAR 0 4
31679: ARRAY
31680: PPUSH
31681: CALL_OW 255
31685: PUSH
31686: EMPTY
31687: LIST
31688: LIST
31689: PPUSH
31690: CALL 39298 0 3
31694: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31695: LD_VAR 0 2
31699: PUSH
31700: LD_VAR 0 4
31704: ARRAY
31705: PPUSH
31706: LD_VAR 0 1
31710: PPUSH
31711: CALL_OW 255
31715: PPUSH
31716: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31720: LD_VAR 0 2
31724: PUSH
31725: LD_VAR 0 4
31729: ARRAY
31730: PPUSH
31731: CALL_OW 141
// end ;
31735: GO 31567
31737: POP
31738: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31739: LD_VAR 0 1
31743: PPUSH
31744: LD_EXP 119
31748: PUSH
31749: LD_VAR 0 5
31753: ARRAY
31754: PUSH
31755: LD_INT 0
31757: PLUS
31758: PPUSH
31759: CALL_OW 505
// end ;
31763: LD_VAR 0 3
31767: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31768: LD_INT 0
31770: PPUSH
31771: PPUSH
31772: PPUSH
31773: PPUSH
// if not hack in hackTanks then
31774: LD_VAR 0 1
31778: PUSH
31779: LD_EXP 118
31783: IN
31784: NOT
31785: IFFALSE 31789
// exit ;
31787: GO 32029
// index := GetElementIndex ( hackTanks , hack ) ;
31789: LD_ADDR_VAR 0 4
31793: PUSH
31794: LD_EXP 118
31798: PPUSH
31799: LD_VAR 0 1
31803: PPUSH
31804: CALL 39083 0 2
31808: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31809: LD_ADDR_VAR 0 3
31813: PUSH
31814: DOUBLE
31815: LD_EXP 119
31819: PUSH
31820: LD_VAR 0 4
31824: ARRAY
31825: INC
31826: ST_TO_ADDR
31827: LD_INT 1
31829: PUSH
31830: FOR_DOWNTO
31831: IFFALSE 32003
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31833: LD_ADDR_VAR 0 5
31837: PUSH
31838: LD_EXP 119
31842: PUSH
31843: LD_VAR 0 4
31847: ARRAY
31848: PUSH
31849: LD_VAR 0 3
31853: ARRAY
31854: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31855: LD_VAR 0 5
31859: PUSH
31860: LD_INT 1
31862: ARRAY
31863: PPUSH
31864: CALL_OW 302
31868: NOT
31869: PUSH
31870: LD_VAR 0 5
31874: PUSH
31875: LD_INT 1
31877: ARRAY
31878: PPUSH
31879: CALL_OW 255
31883: PUSH
31884: LD_VAR 0 1
31888: PPUSH
31889: CALL_OW 255
31893: NONEQUAL
31894: OR
31895: IFFALSE 32001
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31897: LD_VAR 0 5
31901: PUSH
31902: LD_INT 1
31904: ARRAY
31905: PPUSH
31906: CALL_OW 305
31910: PUSH
31911: LD_VAR 0 5
31915: PUSH
31916: LD_INT 1
31918: ARRAY
31919: PPUSH
31920: CALL_OW 255
31924: PUSH
31925: LD_VAR 0 1
31929: PPUSH
31930: CALL_OW 255
31934: EQUAL
31935: AND
31936: IFFALSE 31960
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
31938: LD_VAR 0 5
31942: PUSH
31943: LD_INT 1
31945: ARRAY
31946: PPUSH
31947: LD_VAR 0 5
31951: PUSH
31952: LD_INT 2
31954: ARRAY
31955: PPUSH
31956: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
31960: LD_ADDR_EXP 119
31964: PUSH
31965: LD_EXP 119
31969: PPUSH
31970: LD_VAR 0 4
31974: PPUSH
31975: LD_EXP 119
31979: PUSH
31980: LD_VAR 0 4
31984: ARRAY
31985: PPUSH
31986: LD_VAR 0 3
31990: PPUSH
31991: CALL_OW 3
31995: PPUSH
31996: CALL_OW 1
32000: ST_TO_ADDR
// end ; end ;
32001: GO 31830
32003: POP
32004: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32005: LD_VAR 0 1
32009: PPUSH
32010: LD_EXP 119
32014: PUSH
32015: LD_VAR 0 4
32019: ARRAY
32020: PUSH
32021: LD_INT 0
32023: PLUS
32024: PPUSH
32025: CALL_OW 505
// end ;
32029: LD_VAR 0 2
32033: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
32034: LD_INT 0
32036: PPUSH
32037: PPUSH
32038: PPUSH
32039: PPUSH
// if not hack in hackTanks then
32040: LD_VAR 0 1
32044: PUSH
32045: LD_EXP 118
32049: IN
32050: NOT
32051: IFFALSE 32055
// exit ;
32053: GO 32140
// index := GetElementIndex ( hackTanks , hack ) ;
32055: LD_ADDR_VAR 0 5
32059: PUSH
32060: LD_EXP 118
32064: PPUSH
32065: LD_VAR 0 1
32069: PPUSH
32070: CALL 39083 0 2
32074: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
32075: LD_ADDR_VAR 0 4
32079: PUSH
32080: DOUBLE
32081: LD_INT 1
32083: DEC
32084: ST_TO_ADDR
32085: LD_EXP 119
32089: PUSH
32090: LD_VAR 0 5
32094: ARRAY
32095: PUSH
32096: FOR_TO
32097: IFFALSE 32138
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
32099: LD_EXP 119
32103: PUSH
32104: LD_VAR 0 5
32108: ARRAY
32109: PUSH
32110: LD_VAR 0 4
32114: ARRAY
32115: PUSH
32116: LD_INT 1
32118: ARRAY
32119: PUSH
32120: LD_VAR 0 2
32124: EQUAL
32125: IFFALSE 32136
// KillUnit ( vehicle ) ;
32127: LD_VAR 0 2
32131: PPUSH
32132: CALL_OW 66
32136: GO 32096
32138: POP
32139: POP
// end ;
32140: LD_VAR 0 3
32144: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
32145: LD_EXP 123
32149: NOT
32150: IFFALSE 32185
32152: GO 32154
32154: DISABLE
// begin initMiner := true ;
32155: LD_ADDR_EXP 123
32159: PUSH
32160: LD_INT 1
32162: ST_TO_ADDR
// minersList := [ ] ;
32163: LD_ADDR_EXP 124
32167: PUSH
32168: EMPTY
32169: ST_TO_ADDR
// minerMinesList := [ ] ;
32170: LD_ADDR_EXP 125
32174: PUSH
32175: EMPTY
32176: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
32177: LD_ADDR_EXP 126
32181: PUSH
32182: LD_INT 5
32184: ST_TO_ADDR
// end ;
32185: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
32186: LD_EXP 123
32190: PUSH
32191: LD_INT 34
32193: PUSH
32194: LD_EXP 45
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PPUSH
32203: CALL_OW 69
32207: AND
32208: IFFALSE 32671
32210: GO 32212
32212: DISABLE
32213: LD_INT 0
32215: PPUSH
32216: PPUSH
32217: PPUSH
32218: PPUSH
// begin enable ;
32219: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
32220: LD_ADDR_VAR 0 1
32224: PUSH
32225: LD_INT 34
32227: PUSH
32228: LD_EXP 45
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: PPUSH
32237: CALL_OW 69
32241: PUSH
32242: FOR_IN
32243: IFFALSE 32315
// begin if not i in minersList then
32245: LD_VAR 0 1
32249: PUSH
32250: LD_EXP 124
32254: IN
32255: NOT
32256: IFFALSE 32313
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
32258: LD_ADDR_EXP 124
32262: PUSH
32263: LD_EXP 124
32267: PPUSH
32268: LD_EXP 124
32272: PUSH
32273: LD_INT 1
32275: PLUS
32276: PPUSH
32277: LD_VAR 0 1
32281: PPUSH
32282: CALL_OW 1
32286: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
32287: LD_ADDR_EXP 125
32291: PUSH
32292: LD_EXP 125
32296: PPUSH
32297: LD_EXP 125
32301: PUSH
32302: LD_INT 1
32304: PLUS
32305: PPUSH
32306: EMPTY
32307: PPUSH
32308: CALL_OW 1
32312: ST_TO_ADDR
// end end ;
32313: GO 32242
32315: POP
32316: POP
// for i := minerMinesList downto 1 do
32317: LD_ADDR_VAR 0 1
32321: PUSH
32322: DOUBLE
32323: LD_EXP 125
32327: INC
32328: ST_TO_ADDR
32329: LD_INT 1
32331: PUSH
32332: FOR_DOWNTO
32333: IFFALSE 32669
// begin if IsLive ( minersList [ i ] ) then
32335: LD_EXP 124
32339: PUSH
32340: LD_VAR 0 1
32344: ARRAY
32345: PPUSH
32346: CALL_OW 300
32350: IFFALSE 32378
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
32352: LD_EXP 124
32356: PUSH
32357: LD_VAR 0 1
32361: ARRAY
32362: PPUSH
32363: LD_EXP 125
32367: PUSH
32368: LD_VAR 0 1
32372: ARRAY
32373: PPUSH
32374: CALL_OW 505
// if not minerMinesList [ i ] then
32378: LD_EXP 125
32382: PUSH
32383: LD_VAR 0 1
32387: ARRAY
32388: NOT
32389: IFFALSE 32393
// continue ;
32391: GO 32332
// for j := minerMinesList [ i ] downto 1 do
32393: LD_ADDR_VAR 0 2
32397: PUSH
32398: DOUBLE
32399: LD_EXP 125
32403: PUSH
32404: LD_VAR 0 1
32408: ARRAY
32409: INC
32410: ST_TO_ADDR
32411: LD_INT 1
32413: PUSH
32414: FOR_DOWNTO
32415: IFFALSE 32665
// begin side := GetSide ( minersList [ i ] ) ;
32417: LD_ADDR_VAR 0 3
32421: PUSH
32422: LD_EXP 124
32426: PUSH
32427: LD_VAR 0 1
32431: ARRAY
32432: PPUSH
32433: CALL_OW 255
32437: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
32438: LD_ADDR_VAR 0 4
32442: PUSH
32443: LD_EXP 125
32447: PUSH
32448: LD_VAR 0 1
32452: ARRAY
32453: PUSH
32454: LD_VAR 0 2
32458: ARRAY
32459: PUSH
32460: LD_INT 1
32462: ARRAY
32463: PPUSH
32464: LD_EXP 125
32468: PUSH
32469: LD_VAR 0 1
32473: ARRAY
32474: PUSH
32475: LD_VAR 0 2
32479: ARRAY
32480: PUSH
32481: LD_INT 2
32483: ARRAY
32484: PPUSH
32485: CALL_OW 428
32489: ST_TO_ADDR
// if not tmp then
32490: LD_VAR 0 4
32494: NOT
32495: IFFALSE 32499
// continue ;
32497: GO 32414
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
32499: LD_VAR 0 4
32503: PUSH
32504: LD_INT 81
32506: PUSH
32507: LD_VAR 0 3
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PPUSH
32516: CALL_OW 69
32520: IN
32521: PUSH
32522: LD_EXP 125
32526: PUSH
32527: LD_VAR 0 1
32531: ARRAY
32532: PUSH
32533: LD_VAR 0 2
32537: ARRAY
32538: PUSH
32539: LD_INT 1
32541: ARRAY
32542: PPUSH
32543: LD_EXP 125
32547: PUSH
32548: LD_VAR 0 1
32552: ARRAY
32553: PUSH
32554: LD_VAR 0 2
32558: ARRAY
32559: PUSH
32560: LD_INT 2
32562: ARRAY
32563: PPUSH
32564: CALL_OW 458
32568: AND
32569: IFFALSE 32663
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
32571: LD_EXP 125
32575: PUSH
32576: LD_VAR 0 1
32580: ARRAY
32581: PUSH
32582: LD_VAR 0 2
32586: ARRAY
32587: PUSH
32588: LD_INT 1
32590: ARRAY
32591: PPUSH
32592: LD_EXP 125
32596: PUSH
32597: LD_VAR 0 1
32601: ARRAY
32602: PUSH
32603: LD_VAR 0 2
32607: ARRAY
32608: PUSH
32609: LD_INT 2
32611: ARRAY
32612: PPUSH
32613: LD_VAR 0 3
32617: PPUSH
32618: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32622: LD_ADDR_EXP 125
32626: PUSH
32627: LD_EXP 125
32631: PPUSH
32632: LD_VAR 0 1
32636: PPUSH
32637: LD_EXP 125
32641: PUSH
32642: LD_VAR 0 1
32646: ARRAY
32647: PPUSH
32648: LD_VAR 0 2
32652: PPUSH
32653: CALL_OW 3
32657: PPUSH
32658: CALL_OW 1
32662: ST_TO_ADDR
// end ; end ;
32663: GO 32414
32665: POP
32666: POP
// end ;
32667: GO 32332
32669: POP
32670: POP
// end ;
32671: PPOPN 4
32673: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
32674: LD_INT 0
32676: PPUSH
32677: PPUSH
// result := false ;
32678: LD_ADDR_VAR 0 4
32682: PUSH
32683: LD_INT 0
32685: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
32686: LD_VAR 0 1
32690: PPUSH
32691: CALL_OW 264
32695: PUSH
32696: LD_EXP 45
32700: EQUAL
32701: NOT
32702: IFFALSE 32706
// exit ;
32704: GO 32946
// index := GetElementIndex ( minersList , unit ) ;
32706: LD_ADDR_VAR 0 5
32710: PUSH
32711: LD_EXP 124
32715: PPUSH
32716: LD_VAR 0 1
32720: PPUSH
32721: CALL 39083 0 2
32725: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32726: LD_EXP 125
32730: PUSH
32731: LD_VAR 0 5
32735: ARRAY
32736: PUSH
32737: LD_EXP 126
32741: GREATEREQUAL
32742: IFFALSE 32746
// exit ;
32744: GO 32946
// ComMoveXY ( unit , x , y ) ;
32746: LD_VAR 0 1
32750: PPUSH
32751: LD_VAR 0 2
32755: PPUSH
32756: LD_VAR 0 3
32760: PPUSH
32761: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32765: LD_INT 35
32767: PPUSH
32768: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32772: LD_VAR 0 1
32776: PPUSH
32777: LD_VAR 0 2
32781: PPUSH
32782: LD_VAR 0 3
32786: PPUSH
32787: CALL 69802 0 3
32791: NOT
32792: PUSH
32793: LD_VAR 0 1
32797: PPUSH
32798: CALL_OW 314
32802: AND
32803: IFFALSE 32807
// exit ;
32805: GO 32946
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32807: LD_VAR 0 2
32811: PPUSH
32812: LD_VAR 0 3
32816: PPUSH
32817: CALL_OW 428
32821: PUSH
32822: LD_VAR 0 1
32826: EQUAL
32827: PUSH
32828: LD_VAR 0 1
32832: PPUSH
32833: CALL_OW 314
32837: NOT
32838: AND
32839: IFFALSE 32765
// PlaySoundXY ( x , y , PlantMine ) ;
32841: LD_VAR 0 2
32845: PPUSH
32846: LD_VAR 0 3
32850: PPUSH
32851: LD_STRING PlantMine
32853: PPUSH
32854: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
32858: LD_VAR 0 2
32862: PPUSH
32863: LD_VAR 0 3
32867: PPUSH
32868: LD_VAR 0 1
32872: PPUSH
32873: CALL_OW 255
32877: PPUSH
32878: LD_INT 0
32880: PPUSH
32881: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32885: LD_ADDR_EXP 125
32889: PUSH
32890: LD_EXP 125
32894: PPUSH
32895: LD_VAR 0 5
32899: PUSH
32900: LD_EXP 125
32904: PUSH
32905: LD_VAR 0 5
32909: ARRAY
32910: PUSH
32911: LD_INT 1
32913: PLUS
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PPUSH
32919: LD_VAR 0 2
32923: PUSH
32924: LD_VAR 0 3
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PPUSH
32933: CALL 39298 0 3
32937: ST_TO_ADDR
// result := true ;
32938: LD_ADDR_VAR 0 4
32942: PUSH
32943: LD_INT 1
32945: ST_TO_ADDR
// end ;
32946: LD_VAR 0 4
32950: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
32951: LD_INT 0
32953: PPUSH
32954: PPUSH
32955: PPUSH
// if not unit in minersList then
32956: LD_VAR 0 1
32960: PUSH
32961: LD_EXP 124
32965: IN
32966: NOT
32967: IFFALSE 32971
// exit ;
32969: GO 33363
// index := GetElementIndex ( minersList , unit ) ;
32971: LD_ADDR_VAR 0 6
32975: PUSH
32976: LD_EXP 124
32980: PPUSH
32981: LD_VAR 0 1
32985: PPUSH
32986: CALL 39083 0 2
32990: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
32991: LD_ADDR_VAR 0 5
32995: PUSH
32996: DOUBLE
32997: LD_EXP 125
33001: PUSH
33002: LD_VAR 0 6
33006: ARRAY
33007: INC
33008: ST_TO_ADDR
33009: LD_INT 1
33011: PUSH
33012: FOR_DOWNTO
33013: IFFALSE 33174
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
33015: LD_EXP 125
33019: PUSH
33020: LD_VAR 0 6
33024: ARRAY
33025: PUSH
33026: LD_VAR 0 5
33030: ARRAY
33031: PUSH
33032: LD_INT 1
33034: ARRAY
33035: PUSH
33036: LD_VAR 0 2
33040: EQUAL
33041: PUSH
33042: LD_EXP 125
33046: PUSH
33047: LD_VAR 0 6
33051: ARRAY
33052: PUSH
33053: LD_VAR 0 5
33057: ARRAY
33058: PUSH
33059: LD_INT 2
33061: ARRAY
33062: PUSH
33063: LD_VAR 0 3
33067: EQUAL
33068: AND
33069: IFFALSE 33172
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33071: LD_EXP 125
33075: PUSH
33076: LD_VAR 0 6
33080: ARRAY
33081: PUSH
33082: LD_VAR 0 5
33086: ARRAY
33087: PUSH
33088: LD_INT 1
33090: ARRAY
33091: PPUSH
33092: LD_EXP 125
33096: PUSH
33097: LD_VAR 0 6
33101: ARRAY
33102: PUSH
33103: LD_VAR 0 5
33107: ARRAY
33108: PUSH
33109: LD_INT 2
33111: ARRAY
33112: PPUSH
33113: LD_VAR 0 1
33117: PPUSH
33118: CALL_OW 255
33122: PPUSH
33123: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33127: LD_ADDR_EXP 125
33131: PUSH
33132: LD_EXP 125
33136: PPUSH
33137: LD_VAR 0 6
33141: PPUSH
33142: LD_EXP 125
33146: PUSH
33147: LD_VAR 0 6
33151: ARRAY
33152: PPUSH
33153: LD_VAR 0 5
33157: PPUSH
33158: CALL_OW 3
33162: PPUSH
33163: CALL_OW 1
33167: ST_TO_ADDR
// exit ;
33168: POP
33169: POP
33170: GO 33363
// end ; end ;
33172: GO 33012
33174: POP
33175: POP
// for i := minerMinesList [ index ] downto 1 do
33176: LD_ADDR_VAR 0 5
33180: PUSH
33181: DOUBLE
33182: LD_EXP 125
33186: PUSH
33187: LD_VAR 0 6
33191: ARRAY
33192: INC
33193: ST_TO_ADDR
33194: LD_INT 1
33196: PUSH
33197: FOR_DOWNTO
33198: IFFALSE 33361
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
33200: LD_EXP 125
33204: PUSH
33205: LD_VAR 0 6
33209: ARRAY
33210: PUSH
33211: LD_VAR 0 5
33215: ARRAY
33216: PUSH
33217: LD_INT 1
33219: ARRAY
33220: PPUSH
33221: LD_EXP 125
33225: PUSH
33226: LD_VAR 0 6
33230: ARRAY
33231: PUSH
33232: LD_VAR 0 5
33236: ARRAY
33237: PUSH
33238: LD_INT 2
33240: ARRAY
33241: PPUSH
33242: LD_VAR 0 2
33246: PPUSH
33247: LD_VAR 0 3
33251: PPUSH
33252: CALL_OW 298
33256: PUSH
33257: LD_INT 6
33259: LESS
33260: IFFALSE 33359
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33262: LD_EXP 125
33266: PUSH
33267: LD_VAR 0 6
33271: ARRAY
33272: PUSH
33273: LD_VAR 0 5
33277: ARRAY
33278: PUSH
33279: LD_INT 1
33281: ARRAY
33282: PPUSH
33283: LD_EXP 125
33287: PUSH
33288: LD_VAR 0 6
33292: ARRAY
33293: PUSH
33294: LD_VAR 0 5
33298: ARRAY
33299: PUSH
33300: LD_INT 2
33302: ARRAY
33303: PPUSH
33304: LD_VAR 0 1
33308: PPUSH
33309: CALL_OW 255
33313: PPUSH
33314: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33318: LD_ADDR_EXP 125
33322: PUSH
33323: LD_EXP 125
33327: PPUSH
33328: LD_VAR 0 6
33332: PPUSH
33333: LD_EXP 125
33337: PUSH
33338: LD_VAR 0 6
33342: ARRAY
33343: PPUSH
33344: LD_VAR 0 5
33348: PPUSH
33349: CALL_OW 3
33353: PPUSH
33354: CALL_OW 1
33358: ST_TO_ADDR
// end ; end ;
33359: GO 33197
33361: POP
33362: POP
// end ;
33363: LD_VAR 0 4
33367: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
33368: LD_INT 0
33370: PPUSH
33371: PPUSH
33372: PPUSH
33373: PPUSH
33374: PPUSH
33375: PPUSH
33376: PPUSH
33377: PPUSH
33378: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
33379: LD_VAR 0 1
33383: PPUSH
33384: CALL_OW 264
33388: PUSH
33389: LD_EXP 45
33393: EQUAL
33394: NOT
33395: PUSH
33396: LD_VAR 0 1
33400: PUSH
33401: LD_EXP 124
33405: IN
33406: NOT
33407: OR
33408: IFFALSE 33412
// exit ;
33410: GO 33734
// index := GetElementIndex ( minersList , unit ) ;
33412: LD_ADDR_VAR 0 6
33416: PUSH
33417: LD_EXP 124
33421: PPUSH
33422: LD_VAR 0 1
33426: PPUSH
33427: CALL 39083 0 2
33431: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
33432: LD_ADDR_VAR 0 8
33436: PUSH
33437: LD_EXP 126
33441: PUSH
33442: LD_EXP 125
33446: PUSH
33447: LD_VAR 0 6
33451: ARRAY
33452: MINUS
33453: ST_TO_ADDR
// if not minesFreeAmount then
33454: LD_VAR 0 8
33458: NOT
33459: IFFALSE 33463
// exit ;
33461: GO 33734
// tmp := [ ] ;
33463: LD_ADDR_VAR 0 7
33467: PUSH
33468: EMPTY
33469: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
33470: LD_ADDR_VAR 0 5
33474: PUSH
33475: DOUBLE
33476: LD_INT 1
33478: DEC
33479: ST_TO_ADDR
33480: LD_VAR 0 8
33484: PUSH
33485: FOR_TO
33486: IFFALSE 33681
// begin _d := rand ( 0 , 5 ) ;
33488: LD_ADDR_VAR 0 11
33492: PUSH
33493: LD_INT 0
33495: PPUSH
33496: LD_INT 5
33498: PPUSH
33499: CALL_OW 12
33503: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
33504: LD_ADDR_VAR 0 12
33508: PUSH
33509: LD_INT 2
33511: PPUSH
33512: LD_INT 6
33514: PPUSH
33515: CALL_OW 12
33519: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
33520: LD_ADDR_VAR 0 9
33524: PUSH
33525: LD_VAR 0 2
33529: PPUSH
33530: LD_VAR 0 11
33534: PPUSH
33535: LD_VAR 0 12
33539: PPUSH
33540: CALL_OW 272
33544: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
33545: LD_ADDR_VAR 0 10
33549: PUSH
33550: LD_VAR 0 3
33554: PPUSH
33555: LD_VAR 0 11
33559: PPUSH
33560: LD_VAR 0 12
33564: PPUSH
33565: CALL_OW 273
33569: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
33570: LD_VAR 0 9
33574: PPUSH
33575: LD_VAR 0 10
33579: PPUSH
33580: CALL_OW 488
33584: PUSH
33585: LD_VAR 0 9
33589: PUSH
33590: LD_VAR 0 10
33594: PUSH
33595: EMPTY
33596: LIST
33597: LIST
33598: PUSH
33599: LD_VAR 0 7
33603: IN
33604: NOT
33605: AND
33606: PUSH
33607: LD_VAR 0 9
33611: PPUSH
33612: LD_VAR 0 10
33616: PPUSH
33617: CALL_OW 458
33621: NOT
33622: AND
33623: IFFALSE 33665
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
33625: LD_ADDR_VAR 0 7
33629: PUSH
33630: LD_VAR 0 7
33634: PPUSH
33635: LD_VAR 0 7
33639: PUSH
33640: LD_INT 1
33642: PLUS
33643: PPUSH
33644: LD_VAR 0 9
33648: PUSH
33649: LD_VAR 0 10
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PPUSH
33658: CALL_OW 1
33662: ST_TO_ADDR
33663: GO 33679
// i := i - 1 ;
33665: LD_ADDR_VAR 0 5
33669: PUSH
33670: LD_VAR 0 5
33674: PUSH
33675: LD_INT 1
33677: MINUS
33678: ST_TO_ADDR
// end ;
33679: GO 33485
33681: POP
33682: POP
// for i in tmp do
33683: LD_ADDR_VAR 0 5
33687: PUSH
33688: LD_VAR 0 7
33692: PUSH
33693: FOR_IN
33694: IFFALSE 33732
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
33696: LD_VAR 0 1
33700: PPUSH
33701: LD_VAR 0 5
33705: PUSH
33706: LD_INT 1
33708: ARRAY
33709: PPUSH
33710: LD_VAR 0 5
33714: PUSH
33715: LD_INT 2
33717: ARRAY
33718: PPUSH
33719: CALL 32674 0 3
33723: NOT
33724: IFFALSE 33730
// exit ;
33726: POP
33727: POP
33728: GO 33734
33730: GO 33693
33732: POP
33733: POP
// end ;
33734: LD_VAR 0 4
33738: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
33739: LD_INT 0
33741: PPUSH
33742: PPUSH
33743: PPUSH
33744: PPUSH
33745: PPUSH
33746: PPUSH
33747: PPUSH
// if not GetClass ( unit ) = class_sniper then
33748: LD_VAR 0 1
33752: PPUSH
33753: CALL_OW 257
33757: PUSH
33758: LD_INT 5
33760: EQUAL
33761: NOT
33762: IFFALSE 33766
// exit ;
33764: GO 34154
// dist := 8 ;
33766: LD_ADDR_VAR 0 5
33770: PUSH
33771: LD_INT 8
33773: ST_TO_ADDR
// viewRange := 12 ;
33774: LD_ADDR_VAR 0 7
33778: PUSH
33779: LD_INT 12
33781: ST_TO_ADDR
// side := GetSide ( unit ) ;
33782: LD_ADDR_VAR 0 6
33786: PUSH
33787: LD_VAR 0 1
33791: PPUSH
33792: CALL_OW 255
33796: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33797: LD_INT 61
33799: PPUSH
33800: LD_VAR 0 6
33804: PPUSH
33805: CALL_OW 321
33809: PUSH
33810: LD_INT 2
33812: EQUAL
33813: IFFALSE 33823
// viewRange := 16 ;
33815: LD_ADDR_VAR 0 7
33819: PUSH
33820: LD_INT 16
33822: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33823: LD_VAR 0 1
33827: PPUSH
33828: LD_VAR 0 2
33832: PPUSH
33833: LD_VAR 0 3
33837: PPUSH
33838: CALL_OW 297
33842: PUSH
33843: LD_VAR 0 5
33847: GREATER
33848: IFFALSE 33927
// begin ComMoveXY ( unit , x , y ) ;
33850: LD_VAR 0 1
33854: PPUSH
33855: LD_VAR 0 2
33859: PPUSH
33860: LD_VAR 0 3
33864: PPUSH
33865: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33869: LD_INT 35
33871: PPUSH
33872: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33876: LD_VAR 0 1
33880: PPUSH
33881: LD_VAR 0 2
33885: PPUSH
33886: LD_VAR 0 3
33890: PPUSH
33891: CALL 69802 0 3
33895: NOT
33896: IFFALSE 33900
// exit ;
33898: GO 34154
// until GetDistUnitXY ( unit , x , y ) < dist ;
33900: LD_VAR 0 1
33904: PPUSH
33905: LD_VAR 0 2
33909: PPUSH
33910: LD_VAR 0 3
33914: PPUSH
33915: CALL_OW 297
33919: PUSH
33920: LD_VAR 0 5
33924: LESS
33925: IFFALSE 33869
// end ; ComTurnXY ( unit , x , y ) ;
33927: LD_VAR 0 1
33931: PPUSH
33932: LD_VAR 0 2
33936: PPUSH
33937: LD_VAR 0 3
33941: PPUSH
33942: CALL_OW 118
// wait ( 5 ) ;
33946: LD_INT 5
33948: PPUSH
33949: CALL_OW 67
// _d := GetDir ( unit ) ;
33953: LD_ADDR_VAR 0 10
33957: PUSH
33958: LD_VAR 0 1
33962: PPUSH
33963: CALL_OW 254
33967: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
33968: LD_ADDR_VAR 0 8
33972: PUSH
33973: LD_VAR 0 1
33977: PPUSH
33978: CALL_OW 250
33982: PPUSH
33983: LD_VAR 0 10
33987: PPUSH
33988: LD_VAR 0 5
33992: PPUSH
33993: CALL_OW 272
33997: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
33998: LD_ADDR_VAR 0 9
34002: PUSH
34003: LD_VAR 0 1
34007: PPUSH
34008: CALL_OW 251
34012: PPUSH
34013: LD_VAR 0 10
34017: PPUSH
34018: LD_VAR 0 5
34022: PPUSH
34023: CALL_OW 273
34027: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34028: LD_VAR 0 8
34032: PPUSH
34033: LD_VAR 0 9
34037: PPUSH
34038: CALL_OW 488
34042: NOT
34043: IFFALSE 34047
// exit ;
34045: GO 34154
// ComAnimCustom ( unit , 1 ) ;
34047: LD_VAR 0 1
34051: PPUSH
34052: LD_INT 1
34054: PPUSH
34055: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
34059: LD_VAR 0 8
34063: PPUSH
34064: LD_VAR 0 9
34068: PPUSH
34069: LD_VAR 0 6
34073: PPUSH
34074: LD_VAR 0 7
34078: PPUSH
34079: CALL_OW 330
// repeat wait ( 1 ) ;
34083: LD_INT 1
34085: PPUSH
34086: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
34090: LD_VAR 0 1
34094: PPUSH
34095: CALL_OW 316
34099: PUSH
34100: LD_VAR 0 1
34104: PPUSH
34105: CALL_OW 314
34109: OR
34110: PUSH
34111: LD_VAR 0 1
34115: PPUSH
34116: CALL_OW 302
34120: NOT
34121: OR
34122: PUSH
34123: LD_VAR 0 1
34127: PPUSH
34128: CALL_OW 301
34132: OR
34133: IFFALSE 34083
// RemoveSeeing ( _x , _y , side ) ;
34135: LD_VAR 0 8
34139: PPUSH
34140: LD_VAR 0 9
34144: PPUSH
34145: LD_VAR 0 6
34149: PPUSH
34150: CALL_OW 331
// end ; end_of_file
34154: LD_VAR 0 4
34158: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34159: LD_INT 0
34161: PPUSH
34162: PPUSH
// if exist_mode then
34163: LD_VAR 0 2
34167: IFFALSE 34192
// unit := CreateCharacter ( prefix & ident ) else
34169: LD_ADDR_VAR 0 5
34173: PUSH
34174: LD_VAR 0 3
34178: PUSH
34179: LD_VAR 0 1
34183: STR
34184: PPUSH
34185: CALL_OW 34
34189: ST_TO_ADDR
34190: GO 34207
// unit := NewCharacter ( ident ) ;
34192: LD_ADDR_VAR 0 5
34196: PUSH
34197: LD_VAR 0 1
34201: PPUSH
34202: CALL_OW 25
34206: ST_TO_ADDR
// result := unit ;
34207: LD_ADDR_VAR 0 4
34211: PUSH
34212: LD_VAR 0 5
34216: ST_TO_ADDR
// end ;
34217: LD_VAR 0 4
34221: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34222: LD_INT 0
34224: PPUSH
34225: PPUSH
// if not side or not nation then
34226: LD_VAR 0 1
34230: NOT
34231: PUSH
34232: LD_VAR 0 2
34236: NOT
34237: OR
34238: IFFALSE 34242
// exit ;
34240: GO 35010
// case nation of nation_american :
34242: LD_VAR 0 2
34246: PUSH
34247: LD_INT 1
34249: DOUBLE
34250: EQUAL
34251: IFTRUE 34255
34253: GO 34469
34255: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34256: LD_ADDR_VAR 0 4
34260: PUSH
34261: LD_INT 35
34263: PUSH
34264: LD_INT 45
34266: PUSH
34267: LD_INT 46
34269: PUSH
34270: LD_INT 47
34272: PUSH
34273: LD_INT 82
34275: PUSH
34276: LD_INT 83
34278: PUSH
34279: LD_INT 84
34281: PUSH
34282: LD_INT 85
34284: PUSH
34285: LD_INT 86
34287: PUSH
34288: LD_INT 1
34290: PUSH
34291: LD_INT 2
34293: PUSH
34294: LD_INT 6
34296: PUSH
34297: LD_INT 15
34299: PUSH
34300: LD_INT 16
34302: PUSH
34303: LD_INT 7
34305: PUSH
34306: LD_INT 12
34308: PUSH
34309: LD_INT 13
34311: PUSH
34312: LD_INT 10
34314: PUSH
34315: LD_INT 14
34317: PUSH
34318: LD_INT 20
34320: PUSH
34321: LD_INT 21
34323: PUSH
34324: LD_INT 22
34326: PUSH
34327: LD_INT 25
34329: PUSH
34330: LD_INT 32
34332: PUSH
34333: LD_INT 27
34335: PUSH
34336: LD_INT 36
34338: PUSH
34339: LD_INT 69
34341: PUSH
34342: LD_INT 39
34344: PUSH
34345: LD_INT 34
34347: PUSH
34348: LD_INT 40
34350: PUSH
34351: LD_INT 48
34353: PUSH
34354: LD_INT 49
34356: PUSH
34357: LD_INT 50
34359: PUSH
34360: LD_INT 51
34362: PUSH
34363: LD_INT 52
34365: PUSH
34366: LD_INT 53
34368: PUSH
34369: LD_INT 54
34371: PUSH
34372: LD_INT 55
34374: PUSH
34375: LD_INT 56
34377: PUSH
34378: LD_INT 57
34380: PUSH
34381: LD_INT 58
34383: PUSH
34384: LD_INT 59
34386: PUSH
34387: LD_INT 60
34389: PUSH
34390: LD_INT 61
34392: PUSH
34393: LD_INT 62
34395: PUSH
34396: LD_INT 80
34398: PUSH
34399: LD_INT 82
34401: PUSH
34402: LD_INT 83
34404: PUSH
34405: LD_INT 84
34407: PUSH
34408: LD_INT 85
34410: PUSH
34411: LD_INT 86
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: ST_TO_ADDR
34467: GO 34934
34469: LD_INT 2
34471: DOUBLE
34472: EQUAL
34473: IFTRUE 34477
34475: GO 34703
34477: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
34478: LD_ADDR_VAR 0 4
34482: PUSH
34483: LD_INT 35
34485: PUSH
34486: LD_INT 45
34488: PUSH
34489: LD_INT 46
34491: PUSH
34492: LD_INT 47
34494: PUSH
34495: LD_INT 82
34497: PUSH
34498: LD_INT 83
34500: PUSH
34501: LD_INT 84
34503: PUSH
34504: LD_INT 85
34506: PUSH
34507: LD_INT 87
34509: PUSH
34510: LD_INT 70
34512: PUSH
34513: LD_INT 1
34515: PUSH
34516: LD_INT 11
34518: PUSH
34519: LD_INT 3
34521: PUSH
34522: LD_INT 4
34524: PUSH
34525: LD_INT 5
34527: PUSH
34528: LD_INT 6
34530: PUSH
34531: LD_INT 15
34533: PUSH
34534: LD_INT 18
34536: PUSH
34537: LD_INT 7
34539: PUSH
34540: LD_INT 17
34542: PUSH
34543: LD_INT 8
34545: PUSH
34546: LD_INT 20
34548: PUSH
34549: LD_INT 21
34551: PUSH
34552: LD_INT 22
34554: PUSH
34555: LD_INT 72
34557: PUSH
34558: LD_INT 26
34560: PUSH
34561: LD_INT 69
34563: PUSH
34564: LD_INT 39
34566: PUSH
34567: LD_INT 40
34569: PUSH
34570: LD_INT 41
34572: PUSH
34573: LD_INT 42
34575: PUSH
34576: LD_INT 43
34578: PUSH
34579: LD_INT 48
34581: PUSH
34582: LD_INT 49
34584: PUSH
34585: LD_INT 50
34587: PUSH
34588: LD_INT 51
34590: PUSH
34591: LD_INT 52
34593: PUSH
34594: LD_INT 53
34596: PUSH
34597: LD_INT 54
34599: PUSH
34600: LD_INT 55
34602: PUSH
34603: LD_INT 56
34605: PUSH
34606: LD_INT 60
34608: PUSH
34609: LD_INT 61
34611: PUSH
34612: LD_INT 62
34614: PUSH
34615: LD_INT 66
34617: PUSH
34618: LD_INT 67
34620: PUSH
34621: LD_INT 68
34623: PUSH
34624: LD_INT 81
34626: PUSH
34627: LD_INT 82
34629: PUSH
34630: LD_INT 83
34632: PUSH
34633: LD_INT 84
34635: PUSH
34636: LD_INT 85
34638: PUSH
34639: LD_INT 87
34641: PUSH
34642: LD_INT 88
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: ST_TO_ADDR
34701: GO 34934
34703: LD_INT 3
34705: DOUBLE
34706: EQUAL
34707: IFTRUE 34711
34709: GO 34933
34711: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34712: LD_ADDR_VAR 0 4
34716: PUSH
34717: LD_INT 46
34719: PUSH
34720: LD_INT 47
34722: PUSH
34723: LD_INT 1
34725: PUSH
34726: LD_INT 2
34728: PUSH
34729: LD_INT 82
34731: PUSH
34732: LD_INT 83
34734: PUSH
34735: LD_INT 84
34737: PUSH
34738: LD_INT 85
34740: PUSH
34741: LD_INT 86
34743: PUSH
34744: LD_INT 11
34746: PUSH
34747: LD_INT 9
34749: PUSH
34750: LD_INT 20
34752: PUSH
34753: LD_INT 19
34755: PUSH
34756: LD_INT 21
34758: PUSH
34759: LD_INT 24
34761: PUSH
34762: LD_INT 22
34764: PUSH
34765: LD_INT 25
34767: PUSH
34768: LD_INT 28
34770: PUSH
34771: LD_INT 29
34773: PUSH
34774: LD_INT 30
34776: PUSH
34777: LD_INT 31
34779: PUSH
34780: LD_INT 37
34782: PUSH
34783: LD_INT 38
34785: PUSH
34786: LD_INT 32
34788: PUSH
34789: LD_INT 27
34791: PUSH
34792: LD_INT 33
34794: PUSH
34795: LD_INT 69
34797: PUSH
34798: LD_INT 39
34800: PUSH
34801: LD_INT 34
34803: PUSH
34804: LD_INT 40
34806: PUSH
34807: LD_INT 71
34809: PUSH
34810: LD_INT 23
34812: PUSH
34813: LD_INT 44
34815: PUSH
34816: LD_INT 48
34818: PUSH
34819: LD_INT 49
34821: PUSH
34822: LD_INT 50
34824: PUSH
34825: LD_INT 51
34827: PUSH
34828: LD_INT 52
34830: PUSH
34831: LD_INT 53
34833: PUSH
34834: LD_INT 54
34836: PUSH
34837: LD_INT 55
34839: PUSH
34840: LD_INT 56
34842: PUSH
34843: LD_INT 57
34845: PUSH
34846: LD_INT 58
34848: PUSH
34849: LD_INT 59
34851: PUSH
34852: LD_INT 63
34854: PUSH
34855: LD_INT 64
34857: PUSH
34858: LD_INT 65
34860: PUSH
34861: LD_INT 82
34863: PUSH
34864: LD_INT 83
34866: PUSH
34867: LD_INT 84
34869: PUSH
34870: LD_INT 85
34872: PUSH
34873: LD_INT 86
34875: PUSH
34876: EMPTY
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: ST_TO_ADDR
34931: GO 34934
34933: POP
// if state > - 1 and state < 3 then
34934: LD_VAR 0 3
34938: PUSH
34939: LD_INT 1
34941: NEG
34942: GREATER
34943: PUSH
34944: LD_VAR 0 3
34948: PUSH
34949: LD_INT 3
34951: LESS
34952: AND
34953: IFFALSE 35010
// for i in result do
34955: LD_ADDR_VAR 0 5
34959: PUSH
34960: LD_VAR 0 4
34964: PUSH
34965: FOR_IN
34966: IFFALSE 35008
// if GetTech ( i , side ) <> state then
34968: LD_VAR 0 5
34972: PPUSH
34973: LD_VAR 0 1
34977: PPUSH
34978: CALL_OW 321
34982: PUSH
34983: LD_VAR 0 3
34987: NONEQUAL
34988: IFFALSE 35006
// result := result diff i ;
34990: LD_ADDR_VAR 0 4
34994: PUSH
34995: LD_VAR 0 4
34999: PUSH
35000: LD_VAR 0 5
35004: DIFF
35005: ST_TO_ADDR
35006: GO 34965
35008: POP
35009: POP
// end ;
35010: LD_VAR 0 4
35014: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35015: LD_INT 0
35017: PPUSH
35018: PPUSH
35019: PPUSH
// result := true ;
35020: LD_ADDR_VAR 0 3
35024: PUSH
35025: LD_INT 1
35027: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35028: LD_ADDR_VAR 0 5
35032: PUSH
35033: LD_VAR 0 2
35037: PPUSH
35038: CALL_OW 480
35042: ST_TO_ADDR
// if not tmp then
35043: LD_VAR 0 5
35047: NOT
35048: IFFALSE 35052
// exit ;
35050: GO 35101
// for i in tmp do
35052: LD_ADDR_VAR 0 4
35056: PUSH
35057: LD_VAR 0 5
35061: PUSH
35062: FOR_IN
35063: IFFALSE 35099
// if GetTech ( i , side ) <> state_researched then
35065: LD_VAR 0 4
35069: PPUSH
35070: LD_VAR 0 1
35074: PPUSH
35075: CALL_OW 321
35079: PUSH
35080: LD_INT 2
35082: NONEQUAL
35083: IFFALSE 35097
// begin result := false ;
35085: LD_ADDR_VAR 0 3
35089: PUSH
35090: LD_INT 0
35092: ST_TO_ADDR
// exit ;
35093: POP
35094: POP
35095: GO 35101
// end ;
35097: GO 35062
35099: POP
35100: POP
// end ;
35101: LD_VAR 0 3
35105: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35106: LD_INT 0
35108: PPUSH
35109: PPUSH
35110: PPUSH
35111: PPUSH
35112: PPUSH
35113: PPUSH
35114: PPUSH
35115: PPUSH
35116: PPUSH
35117: PPUSH
35118: PPUSH
35119: PPUSH
35120: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35121: LD_VAR 0 1
35125: NOT
35126: PUSH
35127: LD_VAR 0 1
35131: PPUSH
35132: CALL_OW 257
35136: PUSH
35137: LD_INT 9
35139: NONEQUAL
35140: OR
35141: IFFALSE 35145
// exit ;
35143: GO 35718
// side := GetSide ( unit ) ;
35145: LD_ADDR_VAR 0 9
35149: PUSH
35150: LD_VAR 0 1
35154: PPUSH
35155: CALL_OW 255
35159: ST_TO_ADDR
// tech_space := tech_spacanom ;
35160: LD_ADDR_VAR 0 12
35164: PUSH
35165: LD_INT 29
35167: ST_TO_ADDR
// tech_time := tech_taurad ;
35168: LD_ADDR_VAR 0 13
35172: PUSH
35173: LD_INT 28
35175: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35176: LD_ADDR_VAR 0 11
35180: PUSH
35181: LD_VAR 0 1
35185: PPUSH
35186: CALL_OW 310
35190: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35191: LD_VAR 0 11
35195: PPUSH
35196: CALL_OW 247
35200: PUSH
35201: LD_INT 2
35203: EQUAL
35204: IFFALSE 35208
// exit ;
35206: GO 35718
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35208: LD_ADDR_VAR 0 8
35212: PUSH
35213: LD_INT 81
35215: PUSH
35216: LD_VAR 0 9
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 3
35227: PUSH
35228: LD_INT 21
35230: PUSH
35231: LD_INT 3
35233: PUSH
35234: EMPTY
35235: LIST
35236: LIST
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: PPUSH
35246: CALL_OW 69
35250: ST_TO_ADDR
// if not tmp then
35251: LD_VAR 0 8
35255: NOT
35256: IFFALSE 35260
// exit ;
35258: GO 35718
// if in_unit then
35260: LD_VAR 0 11
35264: IFFALSE 35288
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35266: LD_ADDR_VAR 0 10
35270: PUSH
35271: LD_VAR 0 8
35275: PPUSH
35276: LD_VAR 0 11
35280: PPUSH
35281: CALL_OW 74
35285: ST_TO_ADDR
35286: GO 35308
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35288: LD_ADDR_VAR 0 10
35292: PUSH
35293: LD_VAR 0 8
35297: PPUSH
35298: LD_VAR 0 1
35302: PPUSH
35303: CALL_OW 74
35307: ST_TO_ADDR
// if not enemy then
35308: LD_VAR 0 10
35312: NOT
35313: IFFALSE 35317
// exit ;
35315: GO 35718
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35317: LD_VAR 0 11
35321: PUSH
35322: LD_VAR 0 11
35326: PPUSH
35327: LD_VAR 0 10
35331: PPUSH
35332: CALL_OW 296
35336: PUSH
35337: LD_INT 13
35339: GREATER
35340: AND
35341: PUSH
35342: LD_VAR 0 1
35346: PPUSH
35347: LD_VAR 0 10
35351: PPUSH
35352: CALL_OW 296
35356: PUSH
35357: LD_INT 12
35359: GREATER
35360: OR
35361: IFFALSE 35365
// exit ;
35363: GO 35718
// missile := [ 1 ] ;
35365: LD_ADDR_VAR 0 14
35369: PUSH
35370: LD_INT 1
35372: PUSH
35373: EMPTY
35374: LIST
35375: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35376: LD_VAR 0 9
35380: PPUSH
35381: LD_VAR 0 12
35385: PPUSH
35386: CALL_OW 325
35390: IFFALSE 35419
// missile := Replace ( missile , missile + 1 , 2 ) ;
35392: LD_ADDR_VAR 0 14
35396: PUSH
35397: LD_VAR 0 14
35401: PPUSH
35402: LD_VAR 0 14
35406: PUSH
35407: LD_INT 1
35409: PLUS
35410: PPUSH
35411: LD_INT 2
35413: PPUSH
35414: CALL_OW 1
35418: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35419: LD_VAR 0 9
35423: PPUSH
35424: LD_VAR 0 13
35428: PPUSH
35429: CALL_OW 325
35433: PUSH
35434: LD_VAR 0 10
35438: PPUSH
35439: CALL_OW 255
35443: PPUSH
35444: LD_VAR 0 13
35448: PPUSH
35449: CALL_OW 325
35453: NOT
35454: AND
35455: IFFALSE 35484
// missile := Replace ( missile , missile + 1 , 3 ) ;
35457: LD_ADDR_VAR 0 14
35461: PUSH
35462: LD_VAR 0 14
35466: PPUSH
35467: LD_VAR 0 14
35471: PUSH
35472: LD_INT 1
35474: PLUS
35475: PPUSH
35476: LD_INT 3
35478: PPUSH
35479: CALL_OW 1
35483: ST_TO_ADDR
// if missile < 2 then
35484: LD_VAR 0 14
35488: PUSH
35489: LD_INT 2
35491: LESS
35492: IFFALSE 35496
// exit ;
35494: GO 35718
// x := GetX ( enemy ) ;
35496: LD_ADDR_VAR 0 4
35500: PUSH
35501: LD_VAR 0 10
35505: PPUSH
35506: CALL_OW 250
35510: ST_TO_ADDR
// y := GetY ( enemy ) ;
35511: LD_ADDR_VAR 0 5
35515: PUSH
35516: LD_VAR 0 10
35520: PPUSH
35521: CALL_OW 251
35525: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35526: LD_ADDR_VAR 0 6
35530: PUSH
35531: LD_VAR 0 4
35535: PUSH
35536: LD_INT 1
35538: NEG
35539: PPUSH
35540: LD_INT 1
35542: PPUSH
35543: CALL_OW 12
35547: PLUS
35548: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35549: LD_ADDR_VAR 0 7
35553: PUSH
35554: LD_VAR 0 5
35558: PUSH
35559: LD_INT 1
35561: NEG
35562: PPUSH
35563: LD_INT 1
35565: PPUSH
35566: CALL_OW 12
35570: PLUS
35571: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35572: LD_VAR 0 6
35576: PPUSH
35577: LD_VAR 0 7
35581: PPUSH
35582: CALL_OW 488
35586: NOT
35587: IFFALSE 35609
// begin _x := x ;
35589: LD_ADDR_VAR 0 6
35593: PUSH
35594: LD_VAR 0 4
35598: ST_TO_ADDR
// _y := y ;
35599: LD_ADDR_VAR 0 7
35603: PUSH
35604: LD_VAR 0 5
35608: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35609: LD_ADDR_VAR 0 3
35613: PUSH
35614: LD_INT 1
35616: PPUSH
35617: LD_VAR 0 14
35621: PPUSH
35622: CALL_OW 12
35626: ST_TO_ADDR
// case i of 1 :
35627: LD_VAR 0 3
35631: PUSH
35632: LD_INT 1
35634: DOUBLE
35635: EQUAL
35636: IFTRUE 35640
35638: GO 35657
35640: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35641: LD_VAR 0 1
35645: PPUSH
35646: LD_VAR 0 10
35650: PPUSH
35651: CALL_OW 115
35655: GO 35718
35657: LD_INT 2
35659: DOUBLE
35660: EQUAL
35661: IFTRUE 35665
35663: GO 35687
35665: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35666: LD_VAR 0 1
35670: PPUSH
35671: LD_VAR 0 6
35675: PPUSH
35676: LD_VAR 0 7
35680: PPUSH
35681: CALL_OW 153
35685: GO 35718
35687: LD_INT 3
35689: DOUBLE
35690: EQUAL
35691: IFTRUE 35695
35693: GO 35717
35695: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35696: LD_VAR 0 1
35700: PPUSH
35701: LD_VAR 0 6
35705: PPUSH
35706: LD_VAR 0 7
35710: PPUSH
35711: CALL_OW 154
35715: GO 35718
35717: POP
// end ;
35718: LD_VAR 0 2
35722: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35723: LD_INT 0
35725: PPUSH
35726: PPUSH
35727: PPUSH
35728: PPUSH
35729: PPUSH
35730: PPUSH
// if not unit or not building then
35731: LD_VAR 0 1
35735: NOT
35736: PUSH
35737: LD_VAR 0 2
35741: NOT
35742: OR
35743: IFFALSE 35747
// exit ;
35745: GO 35905
// x := GetX ( building ) ;
35747: LD_ADDR_VAR 0 5
35751: PUSH
35752: LD_VAR 0 2
35756: PPUSH
35757: CALL_OW 250
35761: ST_TO_ADDR
// y := GetY ( building ) ;
35762: LD_ADDR_VAR 0 6
35766: PUSH
35767: LD_VAR 0 2
35771: PPUSH
35772: CALL_OW 251
35776: ST_TO_ADDR
// for i = 0 to 5 do
35777: LD_ADDR_VAR 0 4
35781: PUSH
35782: DOUBLE
35783: LD_INT 0
35785: DEC
35786: ST_TO_ADDR
35787: LD_INT 5
35789: PUSH
35790: FOR_TO
35791: IFFALSE 35903
// begin _x := ShiftX ( x , i , 3 ) ;
35793: LD_ADDR_VAR 0 7
35797: PUSH
35798: LD_VAR 0 5
35802: PPUSH
35803: LD_VAR 0 4
35807: PPUSH
35808: LD_INT 3
35810: PPUSH
35811: CALL_OW 272
35815: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35816: LD_ADDR_VAR 0 8
35820: PUSH
35821: LD_VAR 0 6
35825: PPUSH
35826: LD_VAR 0 4
35830: PPUSH
35831: LD_INT 3
35833: PPUSH
35834: CALL_OW 273
35838: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35839: LD_VAR 0 7
35843: PPUSH
35844: LD_VAR 0 8
35848: PPUSH
35849: CALL_OW 488
35853: NOT
35854: IFFALSE 35858
// continue ;
35856: GO 35790
// if HexInfo ( _x , _y ) = 0 then
35858: LD_VAR 0 7
35862: PPUSH
35863: LD_VAR 0 8
35867: PPUSH
35868: CALL_OW 428
35872: PUSH
35873: LD_INT 0
35875: EQUAL
35876: IFFALSE 35901
// begin ComMoveXY ( unit , _x , _y ) ;
35878: LD_VAR 0 1
35882: PPUSH
35883: LD_VAR 0 7
35887: PPUSH
35888: LD_VAR 0 8
35892: PPUSH
35893: CALL_OW 111
// exit ;
35897: POP
35898: POP
35899: GO 35905
// end ; end ;
35901: GO 35790
35903: POP
35904: POP
// end ;
35905: LD_VAR 0 3
35909: RET
// export function ScanBase ( side , base_area ) ; begin
35910: LD_INT 0
35912: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35913: LD_ADDR_VAR 0 3
35917: PUSH
35918: LD_VAR 0 2
35922: PPUSH
35923: LD_INT 81
35925: PUSH
35926: LD_VAR 0 1
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PPUSH
35935: CALL_OW 70
35939: ST_TO_ADDR
// end ;
35940: LD_VAR 0 3
35944: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35945: LD_INT 0
35947: PPUSH
35948: PPUSH
35949: PPUSH
35950: PPUSH
// result := false ;
35951: LD_ADDR_VAR 0 2
35955: PUSH
35956: LD_INT 0
35958: ST_TO_ADDR
// side := GetSide ( unit ) ;
35959: LD_ADDR_VAR 0 3
35963: PUSH
35964: LD_VAR 0 1
35968: PPUSH
35969: CALL_OW 255
35973: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35974: LD_ADDR_VAR 0 4
35978: PUSH
35979: LD_VAR 0 1
35983: PPUSH
35984: CALL_OW 248
35988: ST_TO_ADDR
// case nat of 1 :
35989: LD_VAR 0 4
35993: PUSH
35994: LD_INT 1
35996: DOUBLE
35997: EQUAL
35998: IFTRUE 36002
36000: GO 36013
36002: POP
// tech := tech_lassight ; 2 :
36003: LD_ADDR_VAR 0 5
36007: PUSH
36008: LD_INT 12
36010: ST_TO_ADDR
36011: GO 36052
36013: LD_INT 2
36015: DOUBLE
36016: EQUAL
36017: IFTRUE 36021
36019: GO 36032
36021: POP
// tech := tech_mortar ; 3 :
36022: LD_ADDR_VAR 0 5
36026: PUSH
36027: LD_INT 41
36029: ST_TO_ADDR
36030: GO 36052
36032: LD_INT 3
36034: DOUBLE
36035: EQUAL
36036: IFTRUE 36040
36038: GO 36051
36040: POP
// tech := tech_bazooka ; end ;
36041: LD_ADDR_VAR 0 5
36045: PUSH
36046: LD_INT 44
36048: ST_TO_ADDR
36049: GO 36052
36051: POP
// if Researched ( side , tech ) then
36052: LD_VAR 0 3
36056: PPUSH
36057: LD_VAR 0 5
36061: PPUSH
36062: CALL_OW 325
36066: IFFALSE 36093
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36068: LD_ADDR_VAR 0 2
36072: PUSH
36073: LD_INT 5
36075: PUSH
36076: LD_INT 8
36078: PUSH
36079: LD_INT 9
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: LIST
36086: PUSH
36087: LD_VAR 0 4
36091: ARRAY
36092: ST_TO_ADDR
// end ;
36093: LD_VAR 0 2
36097: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36098: LD_INT 0
36100: PPUSH
36101: PPUSH
36102: PPUSH
// if not mines then
36103: LD_VAR 0 2
36107: NOT
36108: IFFALSE 36112
// exit ;
36110: GO 36256
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36112: LD_ADDR_VAR 0 5
36116: PUSH
36117: LD_INT 81
36119: PUSH
36120: LD_VAR 0 1
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 3
36131: PUSH
36132: LD_INT 21
36134: PUSH
36135: LD_INT 3
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PPUSH
36150: CALL_OW 69
36154: ST_TO_ADDR
// for i in mines do
36155: LD_ADDR_VAR 0 4
36159: PUSH
36160: LD_VAR 0 2
36164: PUSH
36165: FOR_IN
36166: IFFALSE 36254
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36168: LD_VAR 0 4
36172: PUSH
36173: LD_INT 1
36175: ARRAY
36176: PPUSH
36177: LD_VAR 0 4
36181: PUSH
36182: LD_INT 2
36184: ARRAY
36185: PPUSH
36186: CALL_OW 458
36190: NOT
36191: IFFALSE 36195
// continue ;
36193: GO 36165
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36195: LD_VAR 0 4
36199: PUSH
36200: LD_INT 1
36202: ARRAY
36203: PPUSH
36204: LD_VAR 0 4
36208: PUSH
36209: LD_INT 2
36211: ARRAY
36212: PPUSH
36213: CALL_OW 428
36217: PUSH
36218: LD_VAR 0 5
36222: IN
36223: IFFALSE 36252
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36225: LD_VAR 0 4
36229: PUSH
36230: LD_INT 1
36232: ARRAY
36233: PPUSH
36234: LD_VAR 0 4
36238: PUSH
36239: LD_INT 2
36241: ARRAY
36242: PPUSH
36243: LD_VAR 0 1
36247: PPUSH
36248: CALL_OW 456
// end ;
36252: GO 36165
36254: POP
36255: POP
// end ;
36256: LD_VAR 0 3
36260: RET
// export function Count ( array ) ; var i ; begin
36261: LD_INT 0
36263: PPUSH
36264: PPUSH
// result := 0 ;
36265: LD_ADDR_VAR 0 2
36269: PUSH
36270: LD_INT 0
36272: ST_TO_ADDR
// for i in array do
36273: LD_ADDR_VAR 0 3
36277: PUSH
36278: LD_VAR 0 1
36282: PUSH
36283: FOR_IN
36284: IFFALSE 36308
// if i then
36286: LD_VAR 0 3
36290: IFFALSE 36306
// result := result + 1 ;
36292: LD_ADDR_VAR 0 2
36296: PUSH
36297: LD_VAR 0 2
36301: PUSH
36302: LD_INT 1
36304: PLUS
36305: ST_TO_ADDR
36306: GO 36283
36308: POP
36309: POP
// end ;
36310: LD_VAR 0 2
36314: RET
// export function IsEmpty ( building ) ; begin
36315: LD_INT 0
36317: PPUSH
// if not building then
36318: LD_VAR 0 1
36322: NOT
36323: IFFALSE 36327
// exit ;
36325: GO 36370
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36327: LD_ADDR_VAR 0 2
36331: PUSH
36332: LD_VAR 0 1
36336: PUSH
36337: LD_INT 22
36339: PUSH
36340: LD_VAR 0 1
36344: PPUSH
36345: CALL_OW 255
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 58
36356: PUSH
36357: EMPTY
36358: LIST
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PPUSH
36364: CALL_OW 69
36368: IN
36369: ST_TO_ADDR
// end ;
36370: LD_VAR 0 2
36374: RET
// export function IsNotFull ( building ) ; var places ; begin
36375: LD_INT 0
36377: PPUSH
36378: PPUSH
// if not building then
36379: LD_VAR 0 1
36383: NOT
36384: IFFALSE 36388
// exit ;
36386: GO 36559
// result := false ;
36388: LD_ADDR_VAR 0 2
36392: PUSH
36393: LD_INT 0
36395: ST_TO_ADDR
// places := 0 ;
36396: LD_ADDR_VAR 0 3
36400: PUSH
36401: LD_INT 0
36403: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
36404: LD_VAR 0 1
36408: PPUSH
36409: CALL_OW 266
36413: PUSH
36414: LD_INT 0
36416: DOUBLE
36417: EQUAL
36418: IFTRUE 36476
36420: LD_INT 1
36422: DOUBLE
36423: EQUAL
36424: IFTRUE 36476
36426: LD_INT 6
36428: DOUBLE
36429: EQUAL
36430: IFTRUE 36476
36432: LD_INT 7
36434: DOUBLE
36435: EQUAL
36436: IFTRUE 36476
36438: LD_INT 8
36440: DOUBLE
36441: EQUAL
36442: IFTRUE 36476
36444: LD_INT 4
36446: DOUBLE
36447: EQUAL
36448: IFTRUE 36476
36450: LD_INT 5
36452: DOUBLE
36453: EQUAL
36454: IFTRUE 36476
36456: LD_INT 2
36458: DOUBLE
36459: EQUAL
36460: IFTRUE 36476
36462: LD_INT 3
36464: DOUBLE
36465: EQUAL
36466: IFTRUE 36476
36468: LD_INT 35
36470: DOUBLE
36471: EQUAL
36472: IFTRUE 36476
36474: GO 36487
36476: POP
// places := 6 ; b_bunker , b_breastwork :
36477: LD_ADDR_VAR 0 3
36481: PUSH
36482: LD_INT 6
36484: ST_TO_ADDR
36485: GO 36532
36487: LD_INT 32
36489: DOUBLE
36490: EQUAL
36491: IFTRUE 36501
36493: LD_INT 31
36495: DOUBLE
36496: EQUAL
36497: IFTRUE 36501
36499: GO 36512
36501: POP
// places := 1 ; b_control_tower :
36502: LD_ADDR_VAR 0 3
36506: PUSH
36507: LD_INT 1
36509: ST_TO_ADDR
36510: GO 36532
36512: LD_INT 36
36514: DOUBLE
36515: EQUAL
36516: IFTRUE 36520
36518: GO 36531
36520: POP
// places := 3 ; end ;
36521: LD_ADDR_VAR 0 3
36525: PUSH
36526: LD_INT 3
36528: ST_TO_ADDR
36529: GO 36532
36531: POP
// if places then
36532: LD_VAR 0 3
36536: IFFALSE 36559
// result := UnitsInside ( building ) < places ;
36538: LD_ADDR_VAR 0 2
36542: PUSH
36543: LD_VAR 0 1
36547: PPUSH
36548: CALL_OW 313
36552: PUSH
36553: LD_VAR 0 3
36557: LESS
36558: ST_TO_ADDR
// end ;
36559: LD_VAR 0 2
36563: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36564: LD_INT 0
36566: PPUSH
36567: PPUSH
36568: PPUSH
36569: PPUSH
// tmp := [ ] ;
36570: LD_ADDR_VAR 0 3
36574: PUSH
36575: EMPTY
36576: ST_TO_ADDR
// list := [ ] ;
36577: LD_ADDR_VAR 0 5
36581: PUSH
36582: EMPTY
36583: ST_TO_ADDR
// for i = 16 to 25 do
36584: LD_ADDR_VAR 0 4
36588: PUSH
36589: DOUBLE
36590: LD_INT 16
36592: DEC
36593: ST_TO_ADDR
36594: LD_INT 25
36596: PUSH
36597: FOR_TO
36598: IFFALSE 36671
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36600: LD_ADDR_VAR 0 3
36604: PUSH
36605: LD_VAR 0 3
36609: PUSH
36610: LD_INT 22
36612: PUSH
36613: LD_VAR 0 1
36617: PPUSH
36618: CALL_OW 255
36622: PUSH
36623: EMPTY
36624: LIST
36625: LIST
36626: PUSH
36627: LD_INT 91
36629: PUSH
36630: LD_VAR 0 1
36634: PUSH
36635: LD_INT 6
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 30
36645: PUSH
36646: LD_VAR 0 4
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: LIST
36659: PUSH
36660: EMPTY
36661: LIST
36662: PPUSH
36663: CALL_OW 69
36667: ADD
36668: ST_TO_ADDR
36669: GO 36597
36671: POP
36672: POP
// for i = 1 to tmp do
36673: LD_ADDR_VAR 0 4
36677: PUSH
36678: DOUBLE
36679: LD_INT 1
36681: DEC
36682: ST_TO_ADDR
36683: LD_VAR 0 3
36687: PUSH
36688: FOR_TO
36689: IFFALSE 36777
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36691: LD_ADDR_VAR 0 5
36695: PUSH
36696: LD_VAR 0 5
36700: PUSH
36701: LD_VAR 0 3
36705: PUSH
36706: LD_VAR 0 4
36710: ARRAY
36711: PPUSH
36712: CALL_OW 266
36716: PUSH
36717: LD_VAR 0 3
36721: PUSH
36722: LD_VAR 0 4
36726: ARRAY
36727: PPUSH
36728: CALL_OW 250
36732: PUSH
36733: LD_VAR 0 3
36737: PUSH
36738: LD_VAR 0 4
36742: ARRAY
36743: PPUSH
36744: CALL_OW 251
36748: PUSH
36749: LD_VAR 0 3
36753: PUSH
36754: LD_VAR 0 4
36758: ARRAY
36759: PPUSH
36760: CALL_OW 254
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: PUSH
36771: EMPTY
36772: LIST
36773: ADD
36774: ST_TO_ADDR
36775: GO 36688
36777: POP
36778: POP
// result := list ;
36779: LD_ADDR_VAR 0 2
36783: PUSH
36784: LD_VAR 0 5
36788: ST_TO_ADDR
// end ;
36789: LD_VAR 0 2
36793: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36794: LD_INT 0
36796: PPUSH
36797: PPUSH
36798: PPUSH
36799: PPUSH
36800: PPUSH
36801: PPUSH
36802: PPUSH
// if not factory then
36803: LD_VAR 0 1
36807: NOT
36808: IFFALSE 36812
// exit ;
36810: GO 37405
// if control = control_apeman then
36812: LD_VAR 0 4
36816: PUSH
36817: LD_INT 5
36819: EQUAL
36820: IFFALSE 36929
// begin tmp := UnitsInside ( factory ) ;
36822: LD_ADDR_VAR 0 8
36826: PUSH
36827: LD_VAR 0 1
36831: PPUSH
36832: CALL_OW 313
36836: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36837: LD_VAR 0 8
36841: PPUSH
36842: LD_INT 25
36844: PUSH
36845: LD_INT 12
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PPUSH
36852: CALL_OW 72
36856: NOT
36857: IFFALSE 36867
// control := control_manual ;
36859: LD_ADDR_VAR 0 4
36863: PUSH
36864: LD_INT 1
36866: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36867: LD_ADDR_VAR 0 8
36871: PUSH
36872: LD_VAR 0 1
36876: PPUSH
36877: CALL 36564 0 1
36881: ST_TO_ADDR
// if tmp then
36882: LD_VAR 0 8
36886: IFFALSE 36929
// begin for i in tmp do
36888: LD_ADDR_VAR 0 7
36892: PUSH
36893: LD_VAR 0 8
36897: PUSH
36898: FOR_IN
36899: IFFALSE 36927
// if i [ 1 ] = b_ext_radio then
36901: LD_VAR 0 7
36905: PUSH
36906: LD_INT 1
36908: ARRAY
36909: PUSH
36910: LD_INT 22
36912: EQUAL
36913: IFFALSE 36925
// begin control := control_remote ;
36915: LD_ADDR_VAR 0 4
36919: PUSH
36920: LD_INT 2
36922: ST_TO_ADDR
// break ;
36923: GO 36927
// end ;
36925: GO 36898
36927: POP
36928: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36929: LD_VAR 0 1
36933: PPUSH
36934: LD_VAR 0 2
36938: PPUSH
36939: LD_VAR 0 3
36943: PPUSH
36944: LD_VAR 0 4
36948: PPUSH
36949: LD_VAR 0 5
36953: PPUSH
36954: CALL_OW 448
36958: IFFALSE 36993
// begin result := [ chassis , engine , control , weapon ] ;
36960: LD_ADDR_VAR 0 6
36964: PUSH
36965: LD_VAR 0 2
36969: PUSH
36970: LD_VAR 0 3
36974: PUSH
36975: LD_VAR 0 4
36979: PUSH
36980: LD_VAR 0 5
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: ST_TO_ADDR
// exit ;
36991: GO 37405
// end ; _chassis := AvailableChassisList ( factory ) ;
36993: LD_ADDR_VAR 0 9
36997: PUSH
36998: LD_VAR 0 1
37002: PPUSH
37003: CALL_OW 475
37007: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37008: LD_ADDR_VAR 0 11
37012: PUSH
37013: LD_VAR 0 1
37017: PPUSH
37018: CALL_OW 476
37022: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37023: LD_ADDR_VAR 0 12
37027: PUSH
37028: LD_VAR 0 1
37032: PPUSH
37033: CALL_OW 477
37037: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37038: LD_ADDR_VAR 0 10
37042: PUSH
37043: LD_VAR 0 1
37047: PPUSH
37048: CALL_OW 478
37052: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37053: LD_VAR 0 9
37057: NOT
37058: PUSH
37059: LD_VAR 0 11
37063: NOT
37064: OR
37065: PUSH
37066: LD_VAR 0 12
37070: NOT
37071: OR
37072: PUSH
37073: LD_VAR 0 10
37077: NOT
37078: OR
37079: IFFALSE 37114
// begin result := [ chassis , engine , control , weapon ] ;
37081: LD_ADDR_VAR 0 6
37085: PUSH
37086: LD_VAR 0 2
37090: PUSH
37091: LD_VAR 0 3
37095: PUSH
37096: LD_VAR 0 4
37100: PUSH
37101: LD_VAR 0 5
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: ST_TO_ADDR
// exit ;
37112: GO 37405
// end ; if not chassis in _chassis then
37114: LD_VAR 0 2
37118: PUSH
37119: LD_VAR 0 9
37123: IN
37124: NOT
37125: IFFALSE 37151
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37127: LD_ADDR_VAR 0 2
37131: PUSH
37132: LD_VAR 0 9
37136: PUSH
37137: LD_INT 1
37139: PPUSH
37140: LD_VAR 0 9
37144: PPUSH
37145: CALL_OW 12
37149: ARRAY
37150: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37151: LD_VAR 0 2
37155: PPUSH
37156: LD_VAR 0 3
37160: PPUSH
37161: CALL 37410 0 2
37165: NOT
37166: IFFALSE 37225
// repeat engine := _engine [ 1 ] ;
37168: LD_ADDR_VAR 0 3
37172: PUSH
37173: LD_VAR 0 11
37177: PUSH
37178: LD_INT 1
37180: ARRAY
37181: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37182: LD_ADDR_VAR 0 11
37186: PUSH
37187: LD_VAR 0 11
37191: PPUSH
37192: LD_INT 1
37194: PPUSH
37195: CALL_OW 3
37199: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37200: LD_VAR 0 2
37204: PPUSH
37205: LD_VAR 0 3
37209: PPUSH
37210: CALL 37410 0 2
37214: PUSH
37215: LD_VAR 0 11
37219: PUSH
37220: EMPTY
37221: EQUAL
37222: OR
37223: IFFALSE 37168
// if not control in _control then
37225: LD_VAR 0 4
37229: PUSH
37230: LD_VAR 0 12
37234: IN
37235: NOT
37236: IFFALSE 37262
// control := _control [ rand ( 1 , _control ) ] ;
37238: LD_ADDR_VAR 0 4
37242: PUSH
37243: LD_VAR 0 12
37247: PUSH
37248: LD_INT 1
37250: PPUSH
37251: LD_VAR 0 12
37255: PPUSH
37256: CALL_OW 12
37260: ARRAY
37261: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37262: LD_VAR 0 2
37266: PPUSH
37267: LD_VAR 0 5
37271: PPUSH
37272: CALL 37630 0 2
37276: NOT
37277: IFFALSE 37336
// repeat weapon := _weapon [ 1 ] ;
37279: LD_ADDR_VAR 0 5
37283: PUSH
37284: LD_VAR 0 10
37288: PUSH
37289: LD_INT 1
37291: ARRAY
37292: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37293: LD_ADDR_VAR 0 10
37297: PUSH
37298: LD_VAR 0 10
37302: PPUSH
37303: LD_INT 1
37305: PPUSH
37306: CALL_OW 3
37310: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37311: LD_VAR 0 2
37315: PPUSH
37316: LD_VAR 0 5
37320: PPUSH
37321: CALL 37630 0 2
37325: PUSH
37326: LD_VAR 0 10
37330: PUSH
37331: EMPTY
37332: EQUAL
37333: OR
37334: IFFALSE 37279
// result := [ ] ;
37336: LD_ADDR_VAR 0 6
37340: PUSH
37341: EMPTY
37342: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37343: LD_VAR 0 1
37347: PPUSH
37348: LD_VAR 0 2
37352: PPUSH
37353: LD_VAR 0 3
37357: PPUSH
37358: LD_VAR 0 4
37362: PPUSH
37363: LD_VAR 0 5
37367: PPUSH
37368: CALL_OW 448
37372: IFFALSE 37405
// result := [ chassis , engine , control , weapon ] ;
37374: LD_ADDR_VAR 0 6
37378: PUSH
37379: LD_VAR 0 2
37383: PUSH
37384: LD_VAR 0 3
37388: PUSH
37389: LD_VAR 0 4
37393: PUSH
37394: LD_VAR 0 5
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: ST_TO_ADDR
// end ;
37405: LD_VAR 0 6
37409: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37410: LD_INT 0
37412: PPUSH
// if not chassis or not engine then
37413: LD_VAR 0 1
37417: NOT
37418: PUSH
37419: LD_VAR 0 2
37423: NOT
37424: OR
37425: IFFALSE 37429
// exit ;
37427: GO 37625
// case engine of engine_solar :
37429: LD_VAR 0 2
37433: PUSH
37434: LD_INT 2
37436: DOUBLE
37437: EQUAL
37438: IFTRUE 37442
37440: GO 37480
37442: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37443: LD_ADDR_VAR 0 3
37447: PUSH
37448: LD_INT 11
37450: PUSH
37451: LD_INT 12
37453: PUSH
37454: LD_INT 13
37456: PUSH
37457: LD_INT 14
37459: PUSH
37460: LD_INT 1
37462: PUSH
37463: LD_INT 2
37465: PUSH
37466: LD_INT 3
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: ST_TO_ADDR
37478: GO 37609
37480: LD_INT 1
37482: DOUBLE
37483: EQUAL
37484: IFTRUE 37488
37486: GO 37550
37488: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37489: LD_ADDR_VAR 0 3
37493: PUSH
37494: LD_INT 11
37496: PUSH
37497: LD_INT 12
37499: PUSH
37500: LD_INT 13
37502: PUSH
37503: LD_INT 14
37505: PUSH
37506: LD_INT 1
37508: PUSH
37509: LD_INT 2
37511: PUSH
37512: LD_INT 3
37514: PUSH
37515: LD_INT 4
37517: PUSH
37518: LD_INT 5
37520: PUSH
37521: LD_INT 21
37523: PUSH
37524: LD_INT 23
37526: PUSH
37527: LD_INT 22
37529: PUSH
37530: LD_INT 24
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: ST_TO_ADDR
37548: GO 37609
37550: LD_INT 3
37552: DOUBLE
37553: EQUAL
37554: IFTRUE 37558
37556: GO 37608
37558: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37559: LD_ADDR_VAR 0 3
37563: PUSH
37564: LD_INT 13
37566: PUSH
37567: LD_INT 14
37569: PUSH
37570: LD_INT 2
37572: PUSH
37573: LD_INT 3
37575: PUSH
37576: LD_INT 4
37578: PUSH
37579: LD_INT 5
37581: PUSH
37582: LD_INT 21
37584: PUSH
37585: LD_INT 22
37587: PUSH
37588: LD_INT 23
37590: PUSH
37591: LD_INT 24
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: ST_TO_ADDR
37606: GO 37609
37608: POP
// result := ( chassis in result ) ;
37609: LD_ADDR_VAR 0 3
37613: PUSH
37614: LD_VAR 0 1
37618: PUSH
37619: LD_VAR 0 3
37623: IN
37624: ST_TO_ADDR
// end ;
37625: LD_VAR 0 3
37629: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37630: LD_INT 0
37632: PPUSH
// if not chassis or not weapon then
37633: LD_VAR 0 1
37637: NOT
37638: PUSH
37639: LD_VAR 0 2
37643: NOT
37644: OR
37645: IFFALSE 37649
// exit ;
37647: GO 38711
// case weapon of us_machine_gun :
37649: LD_VAR 0 2
37653: PUSH
37654: LD_INT 2
37656: DOUBLE
37657: EQUAL
37658: IFTRUE 37662
37660: GO 37692
37662: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37663: LD_ADDR_VAR 0 3
37667: PUSH
37668: LD_INT 1
37670: PUSH
37671: LD_INT 2
37673: PUSH
37674: LD_INT 3
37676: PUSH
37677: LD_INT 4
37679: PUSH
37680: LD_INT 5
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: ST_TO_ADDR
37690: GO 38695
37692: LD_INT 3
37694: DOUBLE
37695: EQUAL
37696: IFTRUE 37700
37698: GO 37730
37700: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37701: LD_ADDR_VAR 0 3
37705: PUSH
37706: LD_INT 1
37708: PUSH
37709: LD_INT 2
37711: PUSH
37712: LD_INT 3
37714: PUSH
37715: LD_INT 4
37717: PUSH
37718: LD_INT 5
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: ST_TO_ADDR
37728: GO 38695
37730: LD_INT 11
37732: DOUBLE
37733: EQUAL
37734: IFTRUE 37738
37736: GO 37768
37738: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37739: LD_ADDR_VAR 0 3
37743: PUSH
37744: LD_INT 1
37746: PUSH
37747: LD_INT 2
37749: PUSH
37750: LD_INT 3
37752: PUSH
37753: LD_INT 4
37755: PUSH
37756: LD_INT 5
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: ST_TO_ADDR
37766: GO 38695
37768: LD_INT 4
37770: DOUBLE
37771: EQUAL
37772: IFTRUE 37776
37774: GO 37802
37776: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37777: LD_ADDR_VAR 0 3
37781: PUSH
37782: LD_INT 2
37784: PUSH
37785: LD_INT 3
37787: PUSH
37788: LD_INT 4
37790: PUSH
37791: LD_INT 5
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: LIST
37798: LIST
37799: ST_TO_ADDR
37800: GO 38695
37802: LD_INT 5
37804: DOUBLE
37805: EQUAL
37806: IFTRUE 37810
37808: GO 37836
37810: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37811: LD_ADDR_VAR 0 3
37815: PUSH
37816: LD_INT 2
37818: PUSH
37819: LD_INT 3
37821: PUSH
37822: LD_INT 4
37824: PUSH
37825: LD_INT 5
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: ST_TO_ADDR
37834: GO 38695
37836: LD_INT 9
37838: DOUBLE
37839: EQUAL
37840: IFTRUE 37844
37842: GO 37870
37844: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37845: LD_ADDR_VAR 0 3
37849: PUSH
37850: LD_INT 2
37852: PUSH
37853: LD_INT 3
37855: PUSH
37856: LD_INT 4
37858: PUSH
37859: LD_INT 5
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: ST_TO_ADDR
37868: GO 38695
37870: LD_INT 7
37872: DOUBLE
37873: EQUAL
37874: IFTRUE 37878
37876: GO 37904
37878: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37879: LD_ADDR_VAR 0 3
37883: PUSH
37884: LD_INT 2
37886: PUSH
37887: LD_INT 3
37889: PUSH
37890: LD_INT 4
37892: PUSH
37893: LD_INT 5
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: ST_TO_ADDR
37902: GO 38695
37904: LD_INT 12
37906: DOUBLE
37907: EQUAL
37908: IFTRUE 37912
37910: GO 37938
37912: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37913: LD_ADDR_VAR 0 3
37917: PUSH
37918: LD_INT 2
37920: PUSH
37921: LD_INT 3
37923: PUSH
37924: LD_INT 4
37926: PUSH
37927: LD_INT 5
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: ST_TO_ADDR
37936: GO 38695
37938: LD_INT 13
37940: DOUBLE
37941: EQUAL
37942: IFTRUE 37946
37944: GO 37972
37946: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37947: LD_ADDR_VAR 0 3
37951: PUSH
37952: LD_INT 2
37954: PUSH
37955: LD_INT 3
37957: PUSH
37958: LD_INT 4
37960: PUSH
37961: LD_INT 5
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: LIST
37968: LIST
37969: ST_TO_ADDR
37970: GO 38695
37972: LD_INT 14
37974: DOUBLE
37975: EQUAL
37976: IFTRUE 37980
37978: GO 37998
37980: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37981: LD_ADDR_VAR 0 3
37985: PUSH
37986: LD_INT 4
37988: PUSH
37989: LD_INT 5
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: ST_TO_ADDR
37996: GO 38695
37998: LD_INT 6
38000: DOUBLE
38001: EQUAL
38002: IFTRUE 38006
38004: GO 38024
38006: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38007: LD_ADDR_VAR 0 3
38011: PUSH
38012: LD_INT 4
38014: PUSH
38015: LD_INT 5
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: ST_TO_ADDR
38022: GO 38695
38024: LD_INT 10
38026: DOUBLE
38027: EQUAL
38028: IFTRUE 38032
38030: GO 38050
38032: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38033: LD_ADDR_VAR 0 3
38037: PUSH
38038: LD_INT 4
38040: PUSH
38041: LD_INT 5
38043: PUSH
38044: EMPTY
38045: LIST
38046: LIST
38047: ST_TO_ADDR
38048: GO 38695
38050: LD_INT 22
38052: DOUBLE
38053: EQUAL
38054: IFTRUE 38058
38056: GO 38084
38058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38059: LD_ADDR_VAR 0 3
38063: PUSH
38064: LD_INT 11
38066: PUSH
38067: LD_INT 12
38069: PUSH
38070: LD_INT 13
38072: PUSH
38073: LD_INT 14
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: ST_TO_ADDR
38082: GO 38695
38084: LD_INT 23
38086: DOUBLE
38087: EQUAL
38088: IFTRUE 38092
38090: GO 38118
38092: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38093: LD_ADDR_VAR 0 3
38097: PUSH
38098: LD_INT 11
38100: PUSH
38101: LD_INT 12
38103: PUSH
38104: LD_INT 13
38106: PUSH
38107: LD_INT 14
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: ST_TO_ADDR
38116: GO 38695
38118: LD_INT 24
38120: DOUBLE
38121: EQUAL
38122: IFTRUE 38126
38124: GO 38152
38126: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38127: LD_ADDR_VAR 0 3
38131: PUSH
38132: LD_INT 11
38134: PUSH
38135: LD_INT 12
38137: PUSH
38138: LD_INT 13
38140: PUSH
38141: LD_INT 14
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: ST_TO_ADDR
38150: GO 38695
38152: LD_INT 30
38154: DOUBLE
38155: EQUAL
38156: IFTRUE 38160
38158: GO 38186
38160: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38161: LD_ADDR_VAR 0 3
38165: PUSH
38166: LD_INT 11
38168: PUSH
38169: LD_INT 12
38171: PUSH
38172: LD_INT 13
38174: PUSH
38175: LD_INT 14
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: ST_TO_ADDR
38184: GO 38695
38186: LD_INT 25
38188: DOUBLE
38189: EQUAL
38190: IFTRUE 38194
38192: GO 38212
38194: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38195: LD_ADDR_VAR 0 3
38199: PUSH
38200: LD_INT 13
38202: PUSH
38203: LD_INT 14
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: ST_TO_ADDR
38210: GO 38695
38212: LD_INT 27
38214: DOUBLE
38215: EQUAL
38216: IFTRUE 38220
38218: GO 38238
38220: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38221: LD_ADDR_VAR 0 3
38225: PUSH
38226: LD_INT 13
38228: PUSH
38229: LD_INT 14
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: ST_TO_ADDR
38236: GO 38695
38238: LD_EXP 43
38242: DOUBLE
38243: EQUAL
38244: IFTRUE 38248
38246: GO 38274
38248: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38249: LD_ADDR_VAR 0 3
38253: PUSH
38254: LD_INT 11
38256: PUSH
38257: LD_INT 12
38259: PUSH
38260: LD_INT 13
38262: PUSH
38263: LD_INT 14
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: ST_TO_ADDR
38272: GO 38695
38274: LD_INT 28
38276: DOUBLE
38277: EQUAL
38278: IFTRUE 38282
38280: GO 38300
38282: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38283: LD_ADDR_VAR 0 3
38287: PUSH
38288: LD_INT 13
38290: PUSH
38291: LD_INT 14
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: ST_TO_ADDR
38298: GO 38695
38300: LD_INT 29
38302: DOUBLE
38303: EQUAL
38304: IFTRUE 38308
38306: GO 38326
38308: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38309: LD_ADDR_VAR 0 3
38313: PUSH
38314: LD_INT 13
38316: PUSH
38317: LD_INT 14
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: ST_TO_ADDR
38324: GO 38695
38326: LD_INT 31
38328: DOUBLE
38329: EQUAL
38330: IFTRUE 38334
38332: GO 38352
38334: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38335: LD_ADDR_VAR 0 3
38339: PUSH
38340: LD_INT 13
38342: PUSH
38343: LD_INT 14
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: ST_TO_ADDR
38350: GO 38695
38352: LD_INT 26
38354: DOUBLE
38355: EQUAL
38356: IFTRUE 38360
38358: GO 38378
38360: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38361: LD_ADDR_VAR 0 3
38365: PUSH
38366: LD_INT 13
38368: PUSH
38369: LD_INT 14
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: ST_TO_ADDR
38376: GO 38695
38378: LD_INT 42
38380: DOUBLE
38381: EQUAL
38382: IFTRUE 38386
38384: GO 38412
38386: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38387: LD_ADDR_VAR 0 3
38391: PUSH
38392: LD_INT 21
38394: PUSH
38395: LD_INT 22
38397: PUSH
38398: LD_INT 23
38400: PUSH
38401: LD_INT 24
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: ST_TO_ADDR
38410: GO 38695
38412: LD_INT 43
38414: DOUBLE
38415: EQUAL
38416: IFTRUE 38420
38418: GO 38446
38420: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38421: LD_ADDR_VAR 0 3
38425: PUSH
38426: LD_INT 21
38428: PUSH
38429: LD_INT 22
38431: PUSH
38432: LD_INT 23
38434: PUSH
38435: LD_INT 24
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: ST_TO_ADDR
38444: GO 38695
38446: LD_INT 44
38448: DOUBLE
38449: EQUAL
38450: IFTRUE 38454
38452: GO 38480
38454: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38455: LD_ADDR_VAR 0 3
38459: PUSH
38460: LD_INT 21
38462: PUSH
38463: LD_INT 22
38465: PUSH
38466: LD_INT 23
38468: PUSH
38469: LD_INT 24
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: ST_TO_ADDR
38478: GO 38695
38480: LD_INT 45
38482: DOUBLE
38483: EQUAL
38484: IFTRUE 38488
38486: GO 38514
38488: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38489: LD_ADDR_VAR 0 3
38493: PUSH
38494: LD_INT 21
38496: PUSH
38497: LD_INT 22
38499: PUSH
38500: LD_INT 23
38502: PUSH
38503: LD_INT 24
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: ST_TO_ADDR
38512: GO 38695
38514: LD_INT 49
38516: DOUBLE
38517: EQUAL
38518: IFTRUE 38522
38520: GO 38548
38522: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38523: LD_ADDR_VAR 0 3
38527: PUSH
38528: LD_INT 21
38530: PUSH
38531: LD_INT 22
38533: PUSH
38534: LD_INT 23
38536: PUSH
38537: LD_INT 24
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: ST_TO_ADDR
38546: GO 38695
38548: LD_INT 51
38550: DOUBLE
38551: EQUAL
38552: IFTRUE 38556
38554: GO 38582
38556: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38557: LD_ADDR_VAR 0 3
38561: PUSH
38562: LD_INT 21
38564: PUSH
38565: LD_INT 22
38567: PUSH
38568: LD_INT 23
38570: PUSH
38571: LD_INT 24
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: ST_TO_ADDR
38580: GO 38695
38582: LD_INT 52
38584: DOUBLE
38585: EQUAL
38586: IFTRUE 38590
38588: GO 38616
38590: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38591: LD_ADDR_VAR 0 3
38595: PUSH
38596: LD_INT 21
38598: PUSH
38599: LD_INT 22
38601: PUSH
38602: LD_INT 23
38604: PUSH
38605: LD_INT 24
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: ST_TO_ADDR
38614: GO 38695
38616: LD_INT 53
38618: DOUBLE
38619: EQUAL
38620: IFTRUE 38624
38622: GO 38642
38624: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38625: LD_ADDR_VAR 0 3
38629: PUSH
38630: LD_INT 23
38632: PUSH
38633: LD_INT 24
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: ST_TO_ADDR
38640: GO 38695
38642: LD_INT 46
38644: DOUBLE
38645: EQUAL
38646: IFTRUE 38650
38648: GO 38668
38650: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38651: LD_ADDR_VAR 0 3
38655: PUSH
38656: LD_INT 23
38658: PUSH
38659: LD_INT 24
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: ST_TO_ADDR
38666: GO 38695
38668: LD_INT 47
38670: DOUBLE
38671: EQUAL
38672: IFTRUE 38676
38674: GO 38694
38676: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38677: LD_ADDR_VAR 0 3
38681: PUSH
38682: LD_INT 23
38684: PUSH
38685: LD_INT 24
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: ST_TO_ADDR
38692: GO 38695
38694: POP
// result := ( chassis in result ) ;
38695: LD_ADDR_VAR 0 3
38699: PUSH
38700: LD_VAR 0 1
38704: PUSH
38705: LD_VAR 0 3
38709: IN
38710: ST_TO_ADDR
// end ;
38711: LD_VAR 0 3
38715: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38716: LD_INT 0
38718: PPUSH
38719: PPUSH
38720: PPUSH
38721: PPUSH
38722: PPUSH
38723: PPUSH
38724: PPUSH
// result := array ;
38725: LD_ADDR_VAR 0 5
38729: PUSH
38730: LD_VAR 0 1
38734: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38735: LD_VAR 0 1
38739: NOT
38740: PUSH
38741: LD_VAR 0 2
38745: NOT
38746: OR
38747: PUSH
38748: LD_VAR 0 3
38752: NOT
38753: OR
38754: PUSH
38755: LD_VAR 0 2
38759: PUSH
38760: LD_VAR 0 1
38764: GREATER
38765: OR
38766: PUSH
38767: LD_VAR 0 3
38771: PUSH
38772: LD_VAR 0 1
38776: GREATER
38777: OR
38778: IFFALSE 38782
// exit ;
38780: GO 39078
// if direction then
38782: LD_VAR 0 4
38786: IFFALSE 38850
// begin d := 1 ;
38788: LD_ADDR_VAR 0 9
38792: PUSH
38793: LD_INT 1
38795: ST_TO_ADDR
// if i_from > i_to then
38796: LD_VAR 0 2
38800: PUSH
38801: LD_VAR 0 3
38805: GREATER
38806: IFFALSE 38832
// length := ( array - i_from ) + i_to else
38808: LD_ADDR_VAR 0 11
38812: PUSH
38813: LD_VAR 0 1
38817: PUSH
38818: LD_VAR 0 2
38822: MINUS
38823: PUSH
38824: LD_VAR 0 3
38828: PLUS
38829: ST_TO_ADDR
38830: GO 38848
// length := i_to - i_from ;
38832: LD_ADDR_VAR 0 11
38836: PUSH
38837: LD_VAR 0 3
38841: PUSH
38842: LD_VAR 0 2
38846: MINUS
38847: ST_TO_ADDR
// end else
38848: GO 38911
// begin d := - 1 ;
38850: LD_ADDR_VAR 0 9
38854: PUSH
38855: LD_INT 1
38857: NEG
38858: ST_TO_ADDR
// if i_from > i_to then
38859: LD_VAR 0 2
38863: PUSH
38864: LD_VAR 0 3
38868: GREATER
38869: IFFALSE 38889
// length := i_from - i_to else
38871: LD_ADDR_VAR 0 11
38875: PUSH
38876: LD_VAR 0 2
38880: PUSH
38881: LD_VAR 0 3
38885: MINUS
38886: ST_TO_ADDR
38887: GO 38911
// length := ( array - i_to ) + i_from ;
38889: LD_ADDR_VAR 0 11
38893: PUSH
38894: LD_VAR 0 1
38898: PUSH
38899: LD_VAR 0 3
38903: MINUS
38904: PUSH
38905: LD_VAR 0 2
38909: PLUS
38910: ST_TO_ADDR
// end ; if not length then
38911: LD_VAR 0 11
38915: NOT
38916: IFFALSE 38920
// exit ;
38918: GO 39078
// tmp := array ;
38920: LD_ADDR_VAR 0 10
38924: PUSH
38925: LD_VAR 0 1
38929: ST_TO_ADDR
// for i = 1 to length do
38930: LD_ADDR_VAR 0 6
38934: PUSH
38935: DOUBLE
38936: LD_INT 1
38938: DEC
38939: ST_TO_ADDR
38940: LD_VAR 0 11
38944: PUSH
38945: FOR_TO
38946: IFFALSE 39066
// begin for j = 1 to array do
38948: LD_ADDR_VAR 0 7
38952: PUSH
38953: DOUBLE
38954: LD_INT 1
38956: DEC
38957: ST_TO_ADDR
38958: LD_VAR 0 1
38962: PUSH
38963: FOR_TO
38964: IFFALSE 39052
// begin k := j + d ;
38966: LD_ADDR_VAR 0 8
38970: PUSH
38971: LD_VAR 0 7
38975: PUSH
38976: LD_VAR 0 9
38980: PLUS
38981: ST_TO_ADDR
// if k > array then
38982: LD_VAR 0 8
38986: PUSH
38987: LD_VAR 0 1
38991: GREATER
38992: IFFALSE 39002
// k := 1 ;
38994: LD_ADDR_VAR 0 8
38998: PUSH
38999: LD_INT 1
39001: ST_TO_ADDR
// if not k then
39002: LD_VAR 0 8
39006: NOT
39007: IFFALSE 39019
// k := array ;
39009: LD_ADDR_VAR 0 8
39013: PUSH
39014: LD_VAR 0 1
39018: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39019: LD_ADDR_VAR 0 10
39023: PUSH
39024: LD_VAR 0 10
39028: PPUSH
39029: LD_VAR 0 8
39033: PPUSH
39034: LD_VAR 0 1
39038: PUSH
39039: LD_VAR 0 7
39043: ARRAY
39044: PPUSH
39045: CALL_OW 1
39049: ST_TO_ADDR
// end ;
39050: GO 38963
39052: POP
39053: POP
// array := tmp ;
39054: LD_ADDR_VAR 0 1
39058: PUSH
39059: LD_VAR 0 10
39063: ST_TO_ADDR
// end ;
39064: GO 38945
39066: POP
39067: POP
// result := array ;
39068: LD_ADDR_VAR 0 5
39072: PUSH
39073: LD_VAR 0 1
39077: ST_TO_ADDR
// end ;
39078: LD_VAR 0 5
39082: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39083: LD_INT 0
39085: PPUSH
39086: PPUSH
// result := 0 ;
39087: LD_ADDR_VAR 0 3
39091: PUSH
39092: LD_INT 0
39094: ST_TO_ADDR
// if not array or not value in array then
39095: LD_VAR 0 1
39099: NOT
39100: PUSH
39101: LD_VAR 0 2
39105: PUSH
39106: LD_VAR 0 1
39110: IN
39111: NOT
39112: OR
39113: IFFALSE 39117
// exit ;
39115: GO 39171
// for i = 1 to array do
39117: LD_ADDR_VAR 0 4
39121: PUSH
39122: DOUBLE
39123: LD_INT 1
39125: DEC
39126: ST_TO_ADDR
39127: LD_VAR 0 1
39131: PUSH
39132: FOR_TO
39133: IFFALSE 39169
// if value = array [ i ] then
39135: LD_VAR 0 2
39139: PUSH
39140: LD_VAR 0 1
39144: PUSH
39145: LD_VAR 0 4
39149: ARRAY
39150: EQUAL
39151: IFFALSE 39167
// begin result := i ;
39153: LD_ADDR_VAR 0 3
39157: PUSH
39158: LD_VAR 0 4
39162: ST_TO_ADDR
// exit ;
39163: POP
39164: POP
39165: GO 39171
// end ;
39167: GO 39132
39169: POP
39170: POP
// end ;
39171: LD_VAR 0 3
39175: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39176: LD_INT 0
39178: PPUSH
// vc_chassis := chassis ;
39179: LD_ADDR_OWVAR 37
39183: PUSH
39184: LD_VAR 0 1
39188: ST_TO_ADDR
// vc_engine := engine ;
39189: LD_ADDR_OWVAR 39
39193: PUSH
39194: LD_VAR 0 2
39198: ST_TO_ADDR
// vc_control := control ;
39199: LD_ADDR_OWVAR 38
39203: PUSH
39204: LD_VAR 0 3
39208: ST_TO_ADDR
// vc_weapon := weapon ;
39209: LD_ADDR_OWVAR 40
39213: PUSH
39214: LD_VAR 0 4
39218: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39219: LD_ADDR_OWVAR 41
39223: PUSH
39224: LD_VAR 0 5
39228: ST_TO_ADDR
// end ;
39229: LD_VAR 0 6
39233: RET
// export function WantPlant ( unit ) ; var task ; begin
39234: LD_INT 0
39236: PPUSH
39237: PPUSH
// result := false ;
39238: LD_ADDR_VAR 0 2
39242: PUSH
39243: LD_INT 0
39245: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39246: LD_ADDR_VAR 0 3
39250: PUSH
39251: LD_VAR 0 1
39255: PPUSH
39256: CALL_OW 437
39260: ST_TO_ADDR
// if task then
39261: LD_VAR 0 3
39265: IFFALSE 39293
// if task [ 1 ] [ 1 ] = p then
39267: LD_VAR 0 3
39271: PUSH
39272: LD_INT 1
39274: ARRAY
39275: PUSH
39276: LD_INT 1
39278: ARRAY
39279: PUSH
39280: LD_STRING p
39282: EQUAL
39283: IFFALSE 39293
// result := true ;
39285: LD_ADDR_VAR 0 2
39289: PUSH
39290: LD_INT 1
39292: ST_TO_ADDR
// end ;
39293: LD_VAR 0 2
39297: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39298: LD_INT 0
39300: PPUSH
39301: PPUSH
39302: PPUSH
39303: PPUSH
// if pos < 1 then
39304: LD_VAR 0 2
39308: PUSH
39309: LD_INT 1
39311: LESS
39312: IFFALSE 39316
// exit ;
39314: GO 39619
// if pos = 1 then
39316: LD_VAR 0 2
39320: PUSH
39321: LD_INT 1
39323: EQUAL
39324: IFFALSE 39357
// result := Replace ( arr , pos [ 1 ] , value ) else
39326: LD_ADDR_VAR 0 4
39330: PUSH
39331: LD_VAR 0 1
39335: PPUSH
39336: LD_VAR 0 2
39340: PUSH
39341: LD_INT 1
39343: ARRAY
39344: PPUSH
39345: LD_VAR 0 3
39349: PPUSH
39350: CALL_OW 1
39354: ST_TO_ADDR
39355: GO 39619
// begin tmp := arr ;
39357: LD_ADDR_VAR 0 6
39361: PUSH
39362: LD_VAR 0 1
39366: ST_TO_ADDR
// s_arr := [ tmp ] ;
39367: LD_ADDR_VAR 0 7
39371: PUSH
39372: LD_VAR 0 6
39376: PUSH
39377: EMPTY
39378: LIST
39379: ST_TO_ADDR
// for i = 1 to pos - 1 do
39380: LD_ADDR_VAR 0 5
39384: PUSH
39385: DOUBLE
39386: LD_INT 1
39388: DEC
39389: ST_TO_ADDR
39390: LD_VAR 0 2
39394: PUSH
39395: LD_INT 1
39397: MINUS
39398: PUSH
39399: FOR_TO
39400: IFFALSE 39445
// begin tmp := tmp [ pos [ i ] ] ;
39402: LD_ADDR_VAR 0 6
39406: PUSH
39407: LD_VAR 0 6
39411: PUSH
39412: LD_VAR 0 2
39416: PUSH
39417: LD_VAR 0 5
39421: ARRAY
39422: ARRAY
39423: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39424: LD_ADDR_VAR 0 7
39428: PUSH
39429: LD_VAR 0 7
39433: PUSH
39434: LD_VAR 0 6
39438: PUSH
39439: EMPTY
39440: LIST
39441: ADD
39442: ST_TO_ADDR
// end ;
39443: GO 39399
39445: POP
39446: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39447: LD_ADDR_VAR 0 6
39451: PUSH
39452: LD_VAR 0 6
39456: PPUSH
39457: LD_VAR 0 2
39461: PUSH
39462: LD_VAR 0 2
39466: ARRAY
39467: PPUSH
39468: LD_VAR 0 3
39472: PPUSH
39473: CALL_OW 1
39477: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39478: LD_ADDR_VAR 0 7
39482: PUSH
39483: LD_VAR 0 7
39487: PPUSH
39488: LD_VAR 0 7
39492: PPUSH
39493: LD_VAR 0 6
39497: PPUSH
39498: CALL_OW 1
39502: ST_TO_ADDR
// for i = s_arr downto 2 do
39503: LD_ADDR_VAR 0 5
39507: PUSH
39508: DOUBLE
39509: LD_VAR 0 7
39513: INC
39514: ST_TO_ADDR
39515: LD_INT 2
39517: PUSH
39518: FOR_DOWNTO
39519: IFFALSE 39603
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39521: LD_ADDR_VAR 0 6
39525: PUSH
39526: LD_VAR 0 7
39530: PUSH
39531: LD_VAR 0 5
39535: PUSH
39536: LD_INT 1
39538: MINUS
39539: ARRAY
39540: PPUSH
39541: LD_VAR 0 2
39545: PUSH
39546: LD_VAR 0 5
39550: PUSH
39551: LD_INT 1
39553: MINUS
39554: ARRAY
39555: PPUSH
39556: LD_VAR 0 7
39560: PUSH
39561: LD_VAR 0 5
39565: ARRAY
39566: PPUSH
39567: CALL_OW 1
39571: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39572: LD_ADDR_VAR 0 7
39576: PUSH
39577: LD_VAR 0 7
39581: PPUSH
39582: LD_VAR 0 5
39586: PUSH
39587: LD_INT 1
39589: MINUS
39590: PPUSH
39591: LD_VAR 0 6
39595: PPUSH
39596: CALL_OW 1
39600: ST_TO_ADDR
// end ;
39601: GO 39518
39603: POP
39604: POP
// result := s_arr [ 1 ] ;
39605: LD_ADDR_VAR 0 4
39609: PUSH
39610: LD_VAR 0 7
39614: PUSH
39615: LD_INT 1
39617: ARRAY
39618: ST_TO_ADDR
// end ; end ;
39619: LD_VAR 0 4
39623: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39624: LD_INT 0
39626: PPUSH
39627: PPUSH
// if not list then
39628: LD_VAR 0 1
39632: NOT
39633: IFFALSE 39637
// exit ;
39635: GO 39728
// i := list [ pos1 ] ;
39637: LD_ADDR_VAR 0 5
39641: PUSH
39642: LD_VAR 0 1
39646: PUSH
39647: LD_VAR 0 2
39651: ARRAY
39652: ST_TO_ADDR
// if not i then
39653: LD_VAR 0 5
39657: NOT
39658: IFFALSE 39662
// exit ;
39660: GO 39728
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39662: LD_ADDR_VAR 0 1
39666: PUSH
39667: LD_VAR 0 1
39671: PPUSH
39672: LD_VAR 0 2
39676: PPUSH
39677: LD_VAR 0 1
39681: PUSH
39682: LD_VAR 0 3
39686: ARRAY
39687: PPUSH
39688: CALL_OW 1
39692: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39693: LD_ADDR_VAR 0 1
39697: PUSH
39698: LD_VAR 0 1
39702: PPUSH
39703: LD_VAR 0 3
39707: PPUSH
39708: LD_VAR 0 5
39712: PPUSH
39713: CALL_OW 1
39717: ST_TO_ADDR
// result := list ;
39718: LD_ADDR_VAR 0 4
39722: PUSH
39723: LD_VAR 0 1
39727: ST_TO_ADDR
// end ;
39728: LD_VAR 0 4
39732: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39733: LD_INT 0
39735: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39736: LD_ADDR_VAR 0 5
39740: PUSH
39741: LD_VAR 0 1
39745: PPUSH
39746: CALL_OW 250
39750: PPUSH
39751: LD_VAR 0 1
39755: PPUSH
39756: CALL_OW 251
39760: PPUSH
39761: LD_VAR 0 2
39765: PPUSH
39766: LD_VAR 0 3
39770: PPUSH
39771: LD_VAR 0 4
39775: PPUSH
39776: CALL 39786 0 5
39780: ST_TO_ADDR
// end ;
39781: LD_VAR 0 5
39785: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39786: LD_INT 0
39788: PPUSH
39789: PPUSH
39790: PPUSH
39791: PPUSH
// if not list then
39792: LD_VAR 0 3
39796: NOT
39797: IFFALSE 39801
// exit ;
39799: GO 40189
// result := [ ] ;
39801: LD_ADDR_VAR 0 6
39805: PUSH
39806: EMPTY
39807: ST_TO_ADDR
// for i in list do
39808: LD_ADDR_VAR 0 7
39812: PUSH
39813: LD_VAR 0 3
39817: PUSH
39818: FOR_IN
39819: IFFALSE 40021
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39821: LD_ADDR_VAR 0 9
39825: PUSH
39826: LD_VAR 0 7
39830: PPUSH
39831: LD_VAR 0 1
39835: PPUSH
39836: LD_VAR 0 2
39840: PPUSH
39841: CALL_OW 297
39845: ST_TO_ADDR
// if not result then
39846: LD_VAR 0 6
39850: NOT
39851: IFFALSE 39877
// result := [ [ i , tmp ] ] else
39853: LD_ADDR_VAR 0 6
39857: PUSH
39858: LD_VAR 0 7
39862: PUSH
39863: LD_VAR 0 9
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: EMPTY
39873: LIST
39874: ST_TO_ADDR
39875: GO 40019
// begin if result [ result ] [ 2 ] < tmp then
39877: LD_VAR 0 6
39881: PUSH
39882: LD_VAR 0 6
39886: ARRAY
39887: PUSH
39888: LD_INT 2
39890: ARRAY
39891: PUSH
39892: LD_VAR 0 9
39896: LESS
39897: IFFALSE 39939
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39899: LD_ADDR_VAR 0 6
39903: PUSH
39904: LD_VAR 0 6
39908: PPUSH
39909: LD_VAR 0 6
39913: PUSH
39914: LD_INT 1
39916: PLUS
39917: PPUSH
39918: LD_VAR 0 7
39922: PUSH
39923: LD_VAR 0 9
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PPUSH
39932: CALL_OW 2
39936: ST_TO_ADDR
39937: GO 40019
// for j = 1 to result do
39939: LD_ADDR_VAR 0 8
39943: PUSH
39944: DOUBLE
39945: LD_INT 1
39947: DEC
39948: ST_TO_ADDR
39949: LD_VAR 0 6
39953: PUSH
39954: FOR_TO
39955: IFFALSE 40017
// begin if tmp < result [ j ] [ 2 ] then
39957: LD_VAR 0 9
39961: PUSH
39962: LD_VAR 0 6
39966: PUSH
39967: LD_VAR 0 8
39971: ARRAY
39972: PUSH
39973: LD_INT 2
39975: ARRAY
39976: LESS
39977: IFFALSE 40015
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39979: LD_ADDR_VAR 0 6
39983: PUSH
39984: LD_VAR 0 6
39988: PPUSH
39989: LD_VAR 0 8
39993: PPUSH
39994: LD_VAR 0 7
39998: PUSH
39999: LD_VAR 0 9
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PPUSH
40008: CALL_OW 2
40012: ST_TO_ADDR
// break ;
40013: GO 40017
// end ; end ;
40015: GO 39954
40017: POP
40018: POP
// end ; end ;
40019: GO 39818
40021: POP
40022: POP
// if result and not asc then
40023: LD_VAR 0 6
40027: PUSH
40028: LD_VAR 0 4
40032: NOT
40033: AND
40034: IFFALSE 40109
// begin tmp := result ;
40036: LD_ADDR_VAR 0 9
40040: PUSH
40041: LD_VAR 0 6
40045: ST_TO_ADDR
// for i = tmp downto 1 do
40046: LD_ADDR_VAR 0 7
40050: PUSH
40051: DOUBLE
40052: LD_VAR 0 9
40056: INC
40057: ST_TO_ADDR
40058: LD_INT 1
40060: PUSH
40061: FOR_DOWNTO
40062: IFFALSE 40107
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40064: LD_ADDR_VAR 0 6
40068: PUSH
40069: LD_VAR 0 6
40073: PPUSH
40074: LD_VAR 0 9
40078: PUSH
40079: LD_VAR 0 7
40083: MINUS
40084: PUSH
40085: LD_INT 1
40087: PLUS
40088: PPUSH
40089: LD_VAR 0 9
40093: PUSH
40094: LD_VAR 0 7
40098: ARRAY
40099: PPUSH
40100: CALL_OW 1
40104: ST_TO_ADDR
40105: GO 40061
40107: POP
40108: POP
// end ; tmp := [ ] ;
40109: LD_ADDR_VAR 0 9
40113: PUSH
40114: EMPTY
40115: ST_TO_ADDR
// if mode then
40116: LD_VAR 0 5
40120: IFFALSE 40189
// begin for i = 1 to result do
40122: LD_ADDR_VAR 0 7
40126: PUSH
40127: DOUBLE
40128: LD_INT 1
40130: DEC
40131: ST_TO_ADDR
40132: LD_VAR 0 6
40136: PUSH
40137: FOR_TO
40138: IFFALSE 40177
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40140: LD_ADDR_VAR 0 9
40144: PUSH
40145: LD_VAR 0 9
40149: PPUSH
40150: LD_VAR 0 7
40154: PPUSH
40155: LD_VAR 0 6
40159: PUSH
40160: LD_VAR 0 7
40164: ARRAY
40165: PUSH
40166: LD_INT 1
40168: ARRAY
40169: PPUSH
40170: CALL_OW 1
40174: ST_TO_ADDR
40175: GO 40137
40177: POP
40178: POP
// result := tmp ;
40179: LD_ADDR_VAR 0 6
40183: PUSH
40184: LD_VAR 0 9
40188: ST_TO_ADDR
// end ; end ;
40189: LD_VAR 0 6
40193: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40194: LD_INT 0
40196: PPUSH
40197: PPUSH
40198: PPUSH
40199: PPUSH
40200: PPUSH
40201: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40202: LD_ADDR_VAR 0 5
40206: PUSH
40207: LD_INT 0
40209: PUSH
40210: LD_INT 0
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: EMPTY
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: ST_TO_ADDR
// if not x or not y then
40224: LD_VAR 0 2
40228: NOT
40229: PUSH
40230: LD_VAR 0 3
40234: NOT
40235: OR
40236: IFFALSE 40240
// exit ;
40238: GO 41892
// if not range then
40240: LD_VAR 0 4
40244: NOT
40245: IFFALSE 40255
// range := 10 ;
40247: LD_ADDR_VAR 0 4
40251: PUSH
40252: LD_INT 10
40254: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40255: LD_ADDR_VAR 0 8
40259: PUSH
40260: LD_INT 81
40262: PUSH
40263: LD_VAR 0 1
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 92
40274: PUSH
40275: LD_VAR 0 2
40279: PUSH
40280: LD_VAR 0 3
40284: PUSH
40285: LD_VAR 0 4
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: PUSH
40296: LD_INT 3
40298: PUSH
40299: LD_INT 21
40301: PUSH
40302: LD_INT 3
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: LIST
40317: PPUSH
40318: CALL_OW 69
40322: ST_TO_ADDR
// if not tmp then
40323: LD_VAR 0 8
40327: NOT
40328: IFFALSE 40332
// exit ;
40330: GO 41892
// for i in tmp do
40332: LD_ADDR_VAR 0 6
40336: PUSH
40337: LD_VAR 0 8
40341: PUSH
40342: FOR_IN
40343: IFFALSE 41867
// begin points := [ 0 , 0 , 0 ] ;
40345: LD_ADDR_VAR 0 9
40349: PUSH
40350: LD_INT 0
40352: PUSH
40353: LD_INT 0
40355: PUSH
40356: LD_INT 0
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: LIST
40363: ST_TO_ADDR
// bpoints := 1 ;
40364: LD_ADDR_VAR 0 10
40368: PUSH
40369: LD_INT 1
40371: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40372: LD_VAR 0 6
40376: PPUSH
40377: CALL_OW 247
40381: PUSH
40382: LD_INT 1
40384: DOUBLE
40385: EQUAL
40386: IFTRUE 40390
40388: GO 40968
40390: POP
// begin if GetClass ( i ) = 1 then
40391: LD_VAR 0 6
40395: PPUSH
40396: CALL_OW 257
40400: PUSH
40401: LD_INT 1
40403: EQUAL
40404: IFFALSE 40425
// points := [ 10 , 5 , 3 ] ;
40406: LD_ADDR_VAR 0 9
40410: PUSH
40411: LD_INT 10
40413: PUSH
40414: LD_INT 5
40416: PUSH
40417: LD_INT 3
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: LIST
40424: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40425: LD_VAR 0 6
40429: PPUSH
40430: CALL_OW 257
40434: PUSH
40435: LD_INT 2
40437: PUSH
40438: LD_INT 3
40440: PUSH
40441: LD_INT 4
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: LIST
40448: IN
40449: IFFALSE 40470
// points := [ 3 , 2 , 1 ] ;
40451: LD_ADDR_VAR 0 9
40455: PUSH
40456: LD_INT 3
40458: PUSH
40459: LD_INT 2
40461: PUSH
40462: LD_INT 1
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: LIST
40469: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40470: LD_VAR 0 6
40474: PPUSH
40475: CALL_OW 257
40479: PUSH
40480: LD_INT 5
40482: EQUAL
40483: IFFALSE 40504
// points := [ 130 , 5 , 2 ] ;
40485: LD_ADDR_VAR 0 9
40489: PUSH
40490: LD_INT 130
40492: PUSH
40493: LD_INT 5
40495: PUSH
40496: LD_INT 2
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: LIST
40503: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40504: LD_VAR 0 6
40508: PPUSH
40509: CALL_OW 257
40513: PUSH
40514: LD_INT 8
40516: EQUAL
40517: IFFALSE 40538
// points := [ 35 , 35 , 30 ] ;
40519: LD_ADDR_VAR 0 9
40523: PUSH
40524: LD_INT 35
40526: PUSH
40527: LD_INT 35
40529: PUSH
40530: LD_INT 30
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: LIST
40537: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40538: LD_VAR 0 6
40542: PPUSH
40543: CALL_OW 257
40547: PUSH
40548: LD_INT 9
40550: EQUAL
40551: IFFALSE 40572
// points := [ 20 , 55 , 40 ] ;
40553: LD_ADDR_VAR 0 9
40557: PUSH
40558: LD_INT 20
40560: PUSH
40561: LD_INT 55
40563: PUSH
40564: LD_INT 40
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: LIST
40571: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40572: LD_VAR 0 6
40576: PPUSH
40577: CALL_OW 257
40581: PUSH
40582: LD_INT 12
40584: PUSH
40585: LD_INT 16
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: IN
40592: IFFALSE 40613
// points := [ 5 , 3 , 2 ] ;
40594: LD_ADDR_VAR 0 9
40598: PUSH
40599: LD_INT 5
40601: PUSH
40602: LD_INT 3
40604: PUSH
40605: LD_INT 2
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: LIST
40612: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40613: LD_VAR 0 6
40617: PPUSH
40618: CALL_OW 257
40622: PUSH
40623: LD_INT 17
40625: EQUAL
40626: IFFALSE 40647
// points := [ 100 , 50 , 75 ] ;
40628: LD_ADDR_VAR 0 9
40632: PUSH
40633: LD_INT 100
40635: PUSH
40636: LD_INT 50
40638: PUSH
40639: LD_INT 75
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: LIST
40646: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40647: LD_VAR 0 6
40651: PPUSH
40652: CALL_OW 257
40656: PUSH
40657: LD_INT 15
40659: EQUAL
40660: IFFALSE 40681
// points := [ 10 , 5 , 3 ] ;
40662: LD_ADDR_VAR 0 9
40666: PUSH
40667: LD_INT 10
40669: PUSH
40670: LD_INT 5
40672: PUSH
40673: LD_INT 3
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: LIST
40680: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40681: LD_VAR 0 6
40685: PPUSH
40686: CALL_OW 257
40690: PUSH
40691: LD_INT 14
40693: EQUAL
40694: IFFALSE 40715
// points := [ 10 , 0 , 0 ] ;
40696: LD_ADDR_VAR 0 9
40700: PUSH
40701: LD_INT 10
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: LIST
40714: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40715: LD_VAR 0 6
40719: PPUSH
40720: CALL_OW 257
40724: PUSH
40725: LD_INT 11
40727: EQUAL
40728: IFFALSE 40749
// points := [ 30 , 10 , 5 ] ;
40730: LD_ADDR_VAR 0 9
40734: PUSH
40735: LD_INT 30
40737: PUSH
40738: LD_INT 10
40740: PUSH
40741: LD_INT 5
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: LIST
40748: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40749: LD_VAR 0 1
40753: PPUSH
40754: LD_INT 5
40756: PPUSH
40757: CALL_OW 321
40761: PUSH
40762: LD_INT 2
40764: EQUAL
40765: IFFALSE 40782
// bpoints := bpoints * 1.8 ;
40767: LD_ADDR_VAR 0 10
40771: PUSH
40772: LD_VAR 0 10
40776: PUSH
40777: LD_REAL  1.80000000000000E+0000
40780: MUL
40781: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40782: LD_VAR 0 6
40786: PPUSH
40787: CALL_OW 257
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: LD_INT 2
40797: PUSH
40798: LD_INT 3
40800: PUSH
40801: LD_INT 4
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: IN
40810: PUSH
40811: LD_VAR 0 1
40815: PPUSH
40816: LD_INT 51
40818: PPUSH
40819: CALL_OW 321
40823: PUSH
40824: LD_INT 2
40826: EQUAL
40827: AND
40828: IFFALSE 40845
// bpoints := bpoints * 1.2 ;
40830: LD_ADDR_VAR 0 10
40834: PUSH
40835: LD_VAR 0 10
40839: PUSH
40840: LD_REAL  1.20000000000000E+0000
40843: MUL
40844: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40845: LD_VAR 0 6
40849: PPUSH
40850: CALL_OW 257
40854: PUSH
40855: LD_INT 5
40857: PUSH
40858: LD_INT 7
40860: PUSH
40861: LD_INT 9
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: LIST
40868: IN
40869: PUSH
40870: LD_VAR 0 1
40874: PPUSH
40875: LD_INT 52
40877: PPUSH
40878: CALL_OW 321
40882: PUSH
40883: LD_INT 2
40885: EQUAL
40886: AND
40887: IFFALSE 40904
// bpoints := bpoints * 1.5 ;
40889: LD_ADDR_VAR 0 10
40893: PUSH
40894: LD_VAR 0 10
40898: PUSH
40899: LD_REAL  1.50000000000000E+0000
40902: MUL
40903: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40904: LD_VAR 0 1
40908: PPUSH
40909: LD_INT 66
40911: PPUSH
40912: CALL_OW 321
40916: PUSH
40917: LD_INT 2
40919: EQUAL
40920: IFFALSE 40937
// bpoints := bpoints * 1.1 ;
40922: LD_ADDR_VAR 0 10
40926: PUSH
40927: LD_VAR 0 10
40931: PUSH
40932: LD_REAL  1.10000000000000E+0000
40935: MUL
40936: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40937: LD_ADDR_VAR 0 10
40941: PUSH
40942: LD_VAR 0 10
40946: PUSH
40947: LD_VAR 0 6
40951: PPUSH
40952: LD_INT 1
40954: PPUSH
40955: CALL_OW 259
40959: PUSH
40960: LD_REAL  1.15000000000000E+0000
40963: MUL
40964: MUL
40965: ST_TO_ADDR
// end ; unit_vehicle :
40966: GO 41796
40968: LD_INT 2
40970: DOUBLE
40971: EQUAL
40972: IFTRUE 40976
40974: GO 41784
40976: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40977: LD_VAR 0 6
40981: PPUSH
40982: CALL_OW 264
40986: PUSH
40987: LD_INT 2
40989: PUSH
40990: LD_INT 42
40992: PUSH
40993: LD_INT 24
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: LIST
41000: IN
41001: IFFALSE 41022
// points := [ 25 , 5 , 3 ] ;
41003: LD_ADDR_VAR 0 9
41007: PUSH
41008: LD_INT 25
41010: PUSH
41011: LD_INT 5
41013: PUSH
41014: LD_INT 3
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: LIST
41021: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41022: LD_VAR 0 6
41026: PPUSH
41027: CALL_OW 264
41031: PUSH
41032: LD_INT 4
41034: PUSH
41035: LD_INT 43
41037: PUSH
41038: LD_INT 25
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: LIST
41045: IN
41046: IFFALSE 41067
// points := [ 40 , 15 , 5 ] ;
41048: LD_ADDR_VAR 0 9
41052: PUSH
41053: LD_INT 40
41055: PUSH
41056: LD_INT 15
41058: PUSH
41059: LD_INT 5
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: LIST
41066: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41067: LD_VAR 0 6
41071: PPUSH
41072: CALL_OW 264
41076: PUSH
41077: LD_INT 3
41079: PUSH
41080: LD_INT 23
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: IN
41087: IFFALSE 41108
// points := [ 7 , 25 , 8 ] ;
41089: LD_ADDR_VAR 0 9
41093: PUSH
41094: LD_INT 7
41096: PUSH
41097: LD_INT 25
41099: PUSH
41100: LD_INT 8
41102: PUSH
41103: EMPTY
41104: LIST
41105: LIST
41106: LIST
41107: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41108: LD_VAR 0 6
41112: PPUSH
41113: CALL_OW 264
41117: PUSH
41118: LD_INT 5
41120: PUSH
41121: LD_INT 27
41123: PUSH
41124: LD_INT 44
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: LIST
41131: IN
41132: IFFALSE 41153
// points := [ 14 , 50 , 16 ] ;
41134: LD_ADDR_VAR 0 9
41138: PUSH
41139: LD_INT 14
41141: PUSH
41142: LD_INT 50
41144: PUSH
41145: LD_INT 16
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: LIST
41152: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41153: LD_VAR 0 6
41157: PPUSH
41158: CALL_OW 264
41162: PUSH
41163: LD_INT 6
41165: PUSH
41166: LD_INT 46
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: IN
41173: IFFALSE 41194
// points := [ 32 , 120 , 70 ] ;
41175: LD_ADDR_VAR 0 9
41179: PUSH
41180: LD_INT 32
41182: PUSH
41183: LD_INT 120
41185: PUSH
41186: LD_INT 70
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: LIST
41193: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41194: LD_VAR 0 6
41198: PPUSH
41199: CALL_OW 264
41203: PUSH
41204: LD_INT 7
41206: PUSH
41207: LD_INT 28
41209: PUSH
41210: LD_INT 45
41212: PUSH
41213: LD_EXP 43
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: IN
41224: IFFALSE 41245
// points := [ 35 , 20 , 45 ] ;
41226: LD_ADDR_VAR 0 9
41230: PUSH
41231: LD_INT 35
41233: PUSH
41234: LD_INT 20
41236: PUSH
41237: LD_INT 45
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: LIST
41244: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41245: LD_VAR 0 6
41249: PPUSH
41250: CALL_OW 264
41254: PUSH
41255: LD_INT 47
41257: PUSH
41258: EMPTY
41259: LIST
41260: IN
41261: IFFALSE 41282
// points := [ 67 , 45 , 75 ] ;
41263: LD_ADDR_VAR 0 9
41267: PUSH
41268: LD_INT 67
41270: PUSH
41271: LD_INT 45
41273: PUSH
41274: LD_INT 75
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: LIST
41281: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41282: LD_VAR 0 6
41286: PPUSH
41287: CALL_OW 264
41291: PUSH
41292: LD_INT 26
41294: PUSH
41295: EMPTY
41296: LIST
41297: IN
41298: IFFALSE 41319
// points := [ 120 , 30 , 80 ] ;
41300: LD_ADDR_VAR 0 9
41304: PUSH
41305: LD_INT 120
41307: PUSH
41308: LD_INT 30
41310: PUSH
41311: LD_INT 80
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: LIST
41318: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41319: LD_VAR 0 6
41323: PPUSH
41324: CALL_OW 264
41328: PUSH
41329: LD_INT 22
41331: PUSH
41332: EMPTY
41333: LIST
41334: IN
41335: IFFALSE 41356
// points := [ 40 , 1 , 1 ] ;
41337: LD_ADDR_VAR 0 9
41341: PUSH
41342: LD_INT 40
41344: PUSH
41345: LD_INT 1
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: LIST
41355: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41356: LD_VAR 0 6
41360: PPUSH
41361: CALL_OW 264
41365: PUSH
41366: LD_INT 29
41368: PUSH
41369: EMPTY
41370: LIST
41371: IN
41372: IFFALSE 41393
// points := [ 70 , 200 , 400 ] ;
41374: LD_ADDR_VAR 0 9
41378: PUSH
41379: LD_INT 70
41381: PUSH
41382: LD_INT 200
41384: PUSH
41385: LD_INT 400
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: LIST
41392: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41393: LD_VAR 0 6
41397: PPUSH
41398: CALL_OW 264
41402: PUSH
41403: LD_INT 14
41405: PUSH
41406: LD_INT 53
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: IN
41413: IFFALSE 41434
// points := [ 40 , 10 , 20 ] ;
41415: LD_ADDR_VAR 0 9
41419: PUSH
41420: LD_INT 40
41422: PUSH
41423: LD_INT 10
41425: PUSH
41426: LD_INT 20
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: LIST
41433: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41434: LD_VAR 0 6
41438: PPUSH
41439: CALL_OW 264
41443: PUSH
41444: LD_INT 9
41446: PUSH
41447: EMPTY
41448: LIST
41449: IN
41450: IFFALSE 41471
// points := [ 5 , 70 , 20 ] ;
41452: LD_ADDR_VAR 0 9
41456: PUSH
41457: LD_INT 5
41459: PUSH
41460: LD_INT 70
41462: PUSH
41463: LD_INT 20
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: LIST
41470: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41471: LD_VAR 0 6
41475: PPUSH
41476: CALL_OW 264
41480: PUSH
41481: LD_INT 10
41483: PUSH
41484: EMPTY
41485: LIST
41486: IN
41487: IFFALSE 41508
// points := [ 35 , 110 , 70 ] ;
41489: LD_ADDR_VAR 0 9
41493: PUSH
41494: LD_INT 35
41496: PUSH
41497: LD_INT 110
41499: PUSH
41500: LD_INT 70
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: LIST
41507: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41508: LD_VAR 0 6
41512: PPUSH
41513: CALL_OW 265
41517: PUSH
41518: LD_INT 25
41520: EQUAL
41521: IFFALSE 41542
// points := [ 80 , 65 , 100 ] ;
41523: LD_ADDR_VAR 0 9
41527: PUSH
41528: LD_INT 80
41530: PUSH
41531: LD_INT 65
41533: PUSH
41534: LD_INT 100
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: LIST
41541: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41542: LD_VAR 0 6
41546: PPUSH
41547: CALL_OW 263
41551: PUSH
41552: LD_INT 1
41554: EQUAL
41555: IFFALSE 41590
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41557: LD_ADDR_VAR 0 10
41561: PUSH
41562: LD_VAR 0 10
41566: PUSH
41567: LD_VAR 0 6
41571: PPUSH
41572: CALL_OW 311
41576: PPUSH
41577: LD_INT 3
41579: PPUSH
41580: CALL_OW 259
41584: PUSH
41585: LD_INT 4
41587: MUL
41588: MUL
41589: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41590: LD_VAR 0 6
41594: PPUSH
41595: CALL_OW 263
41599: PUSH
41600: LD_INT 2
41602: EQUAL
41603: IFFALSE 41654
// begin j := IsControledBy ( i ) ;
41605: LD_ADDR_VAR 0 7
41609: PUSH
41610: LD_VAR 0 6
41614: PPUSH
41615: CALL_OW 312
41619: ST_TO_ADDR
// if j then
41620: LD_VAR 0 7
41624: IFFALSE 41654
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41626: LD_ADDR_VAR 0 10
41630: PUSH
41631: LD_VAR 0 10
41635: PUSH
41636: LD_VAR 0 7
41640: PPUSH
41641: LD_INT 3
41643: PPUSH
41644: CALL_OW 259
41648: PUSH
41649: LD_INT 3
41651: MUL
41652: MUL
41653: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41654: LD_VAR 0 6
41658: PPUSH
41659: CALL_OW 264
41663: PUSH
41664: LD_INT 5
41666: PUSH
41667: LD_INT 6
41669: PUSH
41670: LD_INT 46
41672: PUSH
41673: LD_INT 44
41675: PUSH
41676: LD_INT 47
41678: PUSH
41679: LD_INT 45
41681: PUSH
41682: LD_INT 28
41684: PUSH
41685: LD_INT 7
41687: PUSH
41688: LD_INT 27
41690: PUSH
41691: LD_INT 29
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: LIST
41704: LIST
41705: IN
41706: PUSH
41707: LD_VAR 0 1
41711: PPUSH
41712: LD_INT 52
41714: PPUSH
41715: CALL_OW 321
41719: PUSH
41720: LD_INT 2
41722: EQUAL
41723: AND
41724: IFFALSE 41741
// bpoints := bpoints * 1.2 ;
41726: LD_ADDR_VAR 0 10
41730: PUSH
41731: LD_VAR 0 10
41735: PUSH
41736: LD_REAL  1.20000000000000E+0000
41739: MUL
41740: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41741: LD_VAR 0 6
41745: PPUSH
41746: CALL_OW 264
41750: PUSH
41751: LD_INT 6
41753: PUSH
41754: LD_INT 46
41756: PUSH
41757: LD_INT 47
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: LIST
41764: IN
41765: IFFALSE 41782
// bpoints := bpoints * 1.2 ;
41767: LD_ADDR_VAR 0 10
41771: PUSH
41772: LD_VAR 0 10
41776: PUSH
41777: LD_REAL  1.20000000000000E+0000
41780: MUL
41781: ST_TO_ADDR
// end ; unit_building :
41782: GO 41796
41784: LD_INT 3
41786: DOUBLE
41787: EQUAL
41788: IFTRUE 41792
41790: GO 41795
41792: POP
// ; end ;
41793: GO 41796
41795: POP
// for j = 1 to 3 do
41796: LD_ADDR_VAR 0 7
41800: PUSH
41801: DOUBLE
41802: LD_INT 1
41804: DEC
41805: ST_TO_ADDR
41806: LD_INT 3
41808: PUSH
41809: FOR_TO
41810: IFFALSE 41863
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41812: LD_ADDR_VAR 0 5
41816: PUSH
41817: LD_VAR 0 5
41821: PPUSH
41822: LD_VAR 0 7
41826: PPUSH
41827: LD_VAR 0 5
41831: PUSH
41832: LD_VAR 0 7
41836: ARRAY
41837: PUSH
41838: LD_VAR 0 9
41842: PUSH
41843: LD_VAR 0 7
41847: ARRAY
41848: PUSH
41849: LD_VAR 0 10
41853: MUL
41854: PLUS
41855: PPUSH
41856: CALL_OW 1
41860: ST_TO_ADDR
41861: GO 41809
41863: POP
41864: POP
// end ;
41865: GO 40342
41867: POP
41868: POP
// result := Replace ( result , 4 , tmp ) ;
41869: LD_ADDR_VAR 0 5
41873: PUSH
41874: LD_VAR 0 5
41878: PPUSH
41879: LD_INT 4
41881: PPUSH
41882: LD_VAR 0 8
41886: PPUSH
41887: CALL_OW 1
41891: ST_TO_ADDR
// end ;
41892: LD_VAR 0 5
41896: RET
// export function DangerAtRange ( unit , range ) ; begin
41897: LD_INT 0
41899: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41900: LD_ADDR_VAR 0 3
41904: PUSH
41905: LD_VAR 0 1
41909: PPUSH
41910: CALL_OW 255
41914: PPUSH
41915: LD_VAR 0 1
41919: PPUSH
41920: CALL_OW 250
41924: PPUSH
41925: LD_VAR 0 1
41929: PPUSH
41930: CALL_OW 251
41934: PPUSH
41935: LD_VAR 0 2
41939: PPUSH
41940: CALL 40194 0 4
41944: ST_TO_ADDR
// end ;
41945: LD_VAR 0 3
41949: RET
// export function DangerInArea ( side , area ) ; begin
41950: LD_INT 0
41952: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41953: LD_ADDR_VAR 0 3
41957: PUSH
41958: LD_VAR 0 2
41962: PPUSH
41963: LD_INT 81
41965: PUSH
41966: LD_VAR 0 1
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PPUSH
41975: CALL_OW 70
41979: ST_TO_ADDR
// end ;
41980: LD_VAR 0 3
41984: RET
// export function IsExtension ( b ) ; begin
41985: LD_INT 0
41987: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41988: LD_ADDR_VAR 0 2
41992: PUSH
41993: LD_VAR 0 1
41997: PUSH
41998: LD_INT 23
42000: PUSH
42001: LD_INT 20
42003: PUSH
42004: LD_INT 22
42006: PUSH
42007: LD_INT 17
42009: PUSH
42010: LD_INT 24
42012: PUSH
42013: LD_INT 21
42015: PUSH
42016: LD_INT 19
42018: PUSH
42019: LD_INT 16
42021: PUSH
42022: LD_INT 25
42024: PUSH
42025: LD_INT 18
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: IN
42040: ST_TO_ADDR
// end ;
42041: LD_VAR 0 2
42045: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42046: LD_INT 0
42048: PPUSH
42049: PPUSH
42050: PPUSH
// result := [ ] ;
42051: LD_ADDR_VAR 0 4
42055: PUSH
42056: EMPTY
42057: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42058: LD_ADDR_VAR 0 5
42062: PUSH
42063: LD_VAR 0 2
42067: PPUSH
42068: LD_INT 21
42070: PUSH
42071: LD_INT 3
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PPUSH
42078: CALL_OW 70
42082: ST_TO_ADDR
// if not tmp then
42083: LD_VAR 0 5
42087: NOT
42088: IFFALSE 42092
// exit ;
42090: GO 42156
// if checkLink then
42092: LD_VAR 0 3
42096: IFFALSE 42146
// begin for i in tmp do
42098: LD_ADDR_VAR 0 6
42102: PUSH
42103: LD_VAR 0 5
42107: PUSH
42108: FOR_IN
42109: IFFALSE 42144
// if GetBase ( i ) <> base then
42111: LD_VAR 0 6
42115: PPUSH
42116: CALL_OW 274
42120: PUSH
42121: LD_VAR 0 1
42125: NONEQUAL
42126: IFFALSE 42142
// ComLinkToBase ( base , i ) ;
42128: LD_VAR 0 1
42132: PPUSH
42133: LD_VAR 0 6
42137: PPUSH
42138: CALL_OW 169
42142: GO 42108
42144: POP
42145: POP
// end ; result := tmp ;
42146: LD_ADDR_VAR 0 4
42150: PUSH
42151: LD_VAR 0 5
42155: ST_TO_ADDR
// end ;
42156: LD_VAR 0 4
42160: RET
// export function ComComplete ( units , b ) ; var i ; begin
42161: LD_INT 0
42163: PPUSH
42164: PPUSH
// if not units then
42165: LD_VAR 0 1
42169: NOT
42170: IFFALSE 42174
// exit ;
42172: GO 42264
// for i in units do
42174: LD_ADDR_VAR 0 4
42178: PUSH
42179: LD_VAR 0 1
42183: PUSH
42184: FOR_IN
42185: IFFALSE 42262
// if BuildingStatus ( b ) = bs_build then
42187: LD_VAR 0 2
42191: PPUSH
42192: CALL_OW 461
42196: PUSH
42197: LD_INT 1
42199: EQUAL
42200: IFFALSE 42260
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42202: LD_VAR 0 4
42206: PPUSH
42207: LD_STRING h
42209: PUSH
42210: LD_VAR 0 2
42214: PPUSH
42215: CALL_OW 250
42219: PUSH
42220: LD_VAR 0 2
42224: PPUSH
42225: CALL_OW 251
42229: PUSH
42230: LD_VAR 0 2
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: PUSH
42253: EMPTY
42254: LIST
42255: PPUSH
42256: CALL_OW 446
42260: GO 42184
42262: POP
42263: POP
// end ;
42264: LD_VAR 0 3
42268: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42269: LD_INT 0
42271: PPUSH
42272: PPUSH
42273: PPUSH
42274: PPUSH
42275: PPUSH
42276: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42277: LD_VAR 0 1
42281: NOT
42282: PUSH
42283: LD_VAR 0 1
42287: PPUSH
42288: CALL_OW 263
42292: PUSH
42293: LD_INT 2
42295: NONEQUAL
42296: OR
42297: IFFALSE 42301
// exit ;
42299: GO 42617
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42301: LD_ADDR_VAR 0 6
42305: PUSH
42306: LD_INT 22
42308: PUSH
42309: LD_VAR 0 1
42313: PPUSH
42314: CALL_OW 255
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 2
42325: PUSH
42326: LD_INT 30
42328: PUSH
42329: LD_INT 36
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 34
42338: PUSH
42339: LD_INT 31
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: LIST
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PPUSH
42355: CALL_OW 69
42359: ST_TO_ADDR
// if not tmp then
42360: LD_VAR 0 6
42364: NOT
42365: IFFALSE 42369
// exit ;
42367: GO 42617
// result := [ ] ;
42369: LD_ADDR_VAR 0 2
42373: PUSH
42374: EMPTY
42375: ST_TO_ADDR
// for i in tmp do
42376: LD_ADDR_VAR 0 3
42380: PUSH
42381: LD_VAR 0 6
42385: PUSH
42386: FOR_IN
42387: IFFALSE 42458
// begin t := UnitsInside ( i ) ;
42389: LD_ADDR_VAR 0 4
42393: PUSH
42394: LD_VAR 0 3
42398: PPUSH
42399: CALL_OW 313
42403: ST_TO_ADDR
// if t then
42404: LD_VAR 0 4
42408: IFFALSE 42456
// for j in t do
42410: LD_ADDR_VAR 0 7
42414: PUSH
42415: LD_VAR 0 4
42419: PUSH
42420: FOR_IN
42421: IFFALSE 42454
// result := Replace ( result , result + 1 , j ) ;
42423: LD_ADDR_VAR 0 2
42427: PUSH
42428: LD_VAR 0 2
42432: PPUSH
42433: LD_VAR 0 2
42437: PUSH
42438: LD_INT 1
42440: PLUS
42441: PPUSH
42442: LD_VAR 0 7
42446: PPUSH
42447: CALL_OW 1
42451: ST_TO_ADDR
42452: GO 42420
42454: POP
42455: POP
// end ;
42456: GO 42386
42458: POP
42459: POP
// if not result then
42460: LD_VAR 0 2
42464: NOT
42465: IFFALSE 42469
// exit ;
42467: GO 42617
// mech := result [ 1 ] ;
42469: LD_ADDR_VAR 0 5
42473: PUSH
42474: LD_VAR 0 2
42478: PUSH
42479: LD_INT 1
42481: ARRAY
42482: ST_TO_ADDR
// if result > 1 then
42483: LD_VAR 0 2
42487: PUSH
42488: LD_INT 1
42490: GREATER
42491: IFFALSE 42603
// begin for i = 2 to result do
42493: LD_ADDR_VAR 0 3
42497: PUSH
42498: DOUBLE
42499: LD_INT 2
42501: DEC
42502: ST_TO_ADDR
42503: LD_VAR 0 2
42507: PUSH
42508: FOR_TO
42509: IFFALSE 42601
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42511: LD_ADDR_VAR 0 4
42515: PUSH
42516: LD_VAR 0 2
42520: PUSH
42521: LD_VAR 0 3
42525: ARRAY
42526: PPUSH
42527: LD_INT 3
42529: PPUSH
42530: CALL_OW 259
42534: PUSH
42535: LD_VAR 0 2
42539: PUSH
42540: LD_VAR 0 3
42544: ARRAY
42545: PPUSH
42546: CALL_OW 432
42550: MINUS
42551: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42552: LD_VAR 0 4
42556: PUSH
42557: LD_VAR 0 5
42561: PPUSH
42562: LD_INT 3
42564: PPUSH
42565: CALL_OW 259
42569: PUSH
42570: LD_VAR 0 5
42574: PPUSH
42575: CALL_OW 432
42579: MINUS
42580: GREATEREQUAL
42581: IFFALSE 42599
// mech := result [ i ] ;
42583: LD_ADDR_VAR 0 5
42587: PUSH
42588: LD_VAR 0 2
42592: PUSH
42593: LD_VAR 0 3
42597: ARRAY
42598: ST_TO_ADDR
// end ;
42599: GO 42508
42601: POP
42602: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42603: LD_VAR 0 1
42607: PPUSH
42608: LD_VAR 0 5
42612: PPUSH
42613: CALL_OW 135
// end ;
42617: LD_VAR 0 2
42621: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42622: LD_INT 0
42624: PPUSH
42625: PPUSH
42626: PPUSH
42627: PPUSH
42628: PPUSH
42629: PPUSH
42630: PPUSH
42631: PPUSH
42632: PPUSH
42633: PPUSH
42634: PPUSH
42635: PPUSH
42636: PPUSH
// result := [ ] ;
42637: LD_ADDR_VAR 0 7
42641: PUSH
42642: EMPTY
42643: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42644: LD_VAR 0 1
42648: PPUSH
42649: CALL_OW 266
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: IN
42664: NOT
42665: IFFALSE 42669
// exit ;
42667: GO 44303
// if name then
42669: LD_VAR 0 3
42673: IFFALSE 42689
// SetBName ( base_dep , name ) ;
42675: LD_VAR 0 1
42679: PPUSH
42680: LD_VAR 0 3
42684: PPUSH
42685: CALL_OW 500
// base := GetBase ( base_dep ) ;
42689: LD_ADDR_VAR 0 15
42693: PUSH
42694: LD_VAR 0 1
42698: PPUSH
42699: CALL_OW 274
42703: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42704: LD_ADDR_VAR 0 16
42708: PUSH
42709: LD_VAR 0 1
42713: PPUSH
42714: CALL_OW 255
42718: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42719: LD_ADDR_VAR 0 17
42723: PUSH
42724: LD_VAR 0 1
42728: PPUSH
42729: CALL_OW 248
42733: ST_TO_ADDR
// if sources then
42734: LD_VAR 0 5
42738: IFFALSE 42785
// for i = 1 to 3 do
42740: LD_ADDR_VAR 0 8
42744: PUSH
42745: DOUBLE
42746: LD_INT 1
42748: DEC
42749: ST_TO_ADDR
42750: LD_INT 3
42752: PUSH
42753: FOR_TO
42754: IFFALSE 42783
// AddResourceType ( base , i , sources [ i ] ) ;
42756: LD_VAR 0 15
42760: PPUSH
42761: LD_VAR 0 8
42765: PPUSH
42766: LD_VAR 0 5
42770: PUSH
42771: LD_VAR 0 8
42775: ARRAY
42776: PPUSH
42777: CALL_OW 276
42781: GO 42753
42783: POP
42784: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42785: LD_ADDR_VAR 0 18
42789: PUSH
42790: LD_VAR 0 15
42794: PPUSH
42795: LD_VAR 0 2
42799: PPUSH
42800: LD_INT 1
42802: PPUSH
42803: CALL 42046 0 3
42807: ST_TO_ADDR
// InitHc ;
42808: CALL_OW 19
// InitUc ;
42812: CALL_OW 18
// uc_side := side ;
42816: LD_ADDR_OWVAR 20
42820: PUSH
42821: LD_VAR 0 16
42825: ST_TO_ADDR
// uc_nation := nation ;
42826: LD_ADDR_OWVAR 21
42830: PUSH
42831: LD_VAR 0 17
42835: ST_TO_ADDR
// if buildings then
42836: LD_VAR 0 18
42840: IFFALSE 44162
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42842: LD_ADDR_VAR 0 19
42846: PUSH
42847: LD_VAR 0 18
42851: PPUSH
42852: LD_INT 2
42854: PUSH
42855: LD_INT 30
42857: PUSH
42858: LD_INT 29
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 30
42867: PUSH
42868: LD_INT 30
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: LIST
42879: PPUSH
42880: CALL_OW 72
42884: ST_TO_ADDR
// if tmp then
42885: LD_VAR 0 19
42889: IFFALSE 42937
// for i in tmp do
42891: LD_ADDR_VAR 0 8
42895: PUSH
42896: LD_VAR 0 19
42900: PUSH
42901: FOR_IN
42902: IFFALSE 42935
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42904: LD_VAR 0 8
42908: PPUSH
42909: CALL_OW 250
42913: PPUSH
42914: LD_VAR 0 8
42918: PPUSH
42919: CALL_OW 251
42923: PPUSH
42924: LD_VAR 0 16
42928: PPUSH
42929: CALL_OW 441
42933: GO 42901
42935: POP
42936: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42937: LD_VAR 0 18
42941: PPUSH
42942: LD_INT 2
42944: PUSH
42945: LD_INT 30
42947: PUSH
42948: LD_INT 32
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 30
42957: PUSH
42958: LD_INT 33
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: LIST
42969: PPUSH
42970: CALL_OW 72
42974: IFFALSE 43062
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42976: LD_ADDR_VAR 0 8
42980: PUSH
42981: LD_VAR 0 18
42985: PPUSH
42986: LD_INT 2
42988: PUSH
42989: LD_INT 30
42991: PUSH
42992: LD_INT 32
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 30
43001: PUSH
43002: LD_INT 33
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: LIST
43013: PPUSH
43014: CALL_OW 72
43018: PUSH
43019: FOR_IN
43020: IFFALSE 43060
// begin if not GetBWeapon ( i ) then
43022: LD_VAR 0 8
43026: PPUSH
43027: CALL_OW 269
43031: NOT
43032: IFFALSE 43058
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43034: LD_VAR 0 8
43038: PPUSH
43039: LD_VAR 0 8
43043: PPUSH
43044: LD_VAR 0 2
43048: PPUSH
43049: CALL 44308 0 2
43053: PPUSH
43054: CALL_OW 431
// end ;
43058: GO 43019
43060: POP
43061: POP
// end ; for i = 1 to personel do
43062: LD_ADDR_VAR 0 8
43066: PUSH
43067: DOUBLE
43068: LD_INT 1
43070: DEC
43071: ST_TO_ADDR
43072: LD_VAR 0 6
43076: PUSH
43077: FOR_TO
43078: IFFALSE 44142
// begin if i > 4 then
43080: LD_VAR 0 8
43084: PUSH
43085: LD_INT 4
43087: GREATER
43088: IFFALSE 43092
// break ;
43090: GO 44142
// case i of 1 :
43092: LD_VAR 0 8
43096: PUSH
43097: LD_INT 1
43099: DOUBLE
43100: EQUAL
43101: IFTRUE 43105
43103: GO 43185
43105: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43106: LD_ADDR_VAR 0 12
43110: PUSH
43111: LD_VAR 0 18
43115: PPUSH
43116: LD_INT 22
43118: PUSH
43119: LD_VAR 0 16
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 58
43130: PUSH
43131: EMPTY
43132: LIST
43133: PUSH
43134: LD_INT 2
43136: PUSH
43137: LD_INT 30
43139: PUSH
43140: LD_INT 32
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 30
43149: PUSH
43150: LD_INT 4
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 30
43159: PUSH
43160: LD_INT 5
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: LIST
43177: PPUSH
43178: CALL_OW 72
43182: ST_TO_ADDR
43183: GO 43407
43185: LD_INT 2
43187: DOUBLE
43188: EQUAL
43189: IFTRUE 43193
43191: GO 43255
43193: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43194: LD_ADDR_VAR 0 12
43198: PUSH
43199: LD_VAR 0 18
43203: PPUSH
43204: LD_INT 22
43206: PUSH
43207: LD_VAR 0 16
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 2
43218: PUSH
43219: LD_INT 30
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 30
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: LIST
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PPUSH
43248: CALL_OW 72
43252: ST_TO_ADDR
43253: GO 43407
43255: LD_INT 3
43257: DOUBLE
43258: EQUAL
43259: IFTRUE 43263
43261: GO 43325
43263: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43264: LD_ADDR_VAR 0 12
43268: PUSH
43269: LD_VAR 0 18
43273: PPUSH
43274: LD_INT 22
43276: PUSH
43277: LD_VAR 0 16
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 2
43288: PUSH
43289: LD_INT 30
43291: PUSH
43292: LD_INT 2
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 30
43301: PUSH
43302: LD_INT 3
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: LIST
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PPUSH
43318: CALL_OW 72
43322: ST_TO_ADDR
43323: GO 43407
43325: LD_INT 4
43327: DOUBLE
43328: EQUAL
43329: IFTRUE 43333
43331: GO 43406
43333: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43334: LD_ADDR_VAR 0 12
43338: PUSH
43339: LD_VAR 0 18
43343: PPUSH
43344: LD_INT 22
43346: PUSH
43347: LD_VAR 0 16
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 2
43358: PUSH
43359: LD_INT 30
43361: PUSH
43362: LD_INT 6
43364: PUSH
43365: EMPTY
43366: LIST
43367: LIST
43368: PUSH
43369: LD_INT 30
43371: PUSH
43372: LD_INT 7
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 30
43381: PUSH
43382: LD_INT 8
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PPUSH
43399: CALL_OW 72
43403: ST_TO_ADDR
43404: GO 43407
43406: POP
// if i = 1 then
43407: LD_VAR 0 8
43411: PUSH
43412: LD_INT 1
43414: EQUAL
43415: IFFALSE 43526
// begin tmp := [ ] ;
43417: LD_ADDR_VAR 0 19
43421: PUSH
43422: EMPTY
43423: ST_TO_ADDR
// for j in f do
43424: LD_ADDR_VAR 0 9
43428: PUSH
43429: LD_VAR 0 12
43433: PUSH
43434: FOR_IN
43435: IFFALSE 43508
// if GetBType ( j ) = b_bunker then
43437: LD_VAR 0 9
43441: PPUSH
43442: CALL_OW 266
43446: PUSH
43447: LD_INT 32
43449: EQUAL
43450: IFFALSE 43477
// tmp := Insert ( tmp , 1 , j ) else
43452: LD_ADDR_VAR 0 19
43456: PUSH
43457: LD_VAR 0 19
43461: PPUSH
43462: LD_INT 1
43464: PPUSH
43465: LD_VAR 0 9
43469: PPUSH
43470: CALL_OW 2
43474: ST_TO_ADDR
43475: GO 43506
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43477: LD_ADDR_VAR 0 19
43481: PUSH
43482: LD_VAR 0 19
43486: PPUSH
43487: LD_VAR 0 19
43491: PUSH
43492: LD_INT 1
43494: PLUS
43495: PPUSH
43496: LD_VAR 0 9
43500: PPUSH
43501: CALL_OW 2
43505: ST_TO_ADDR
43506: GO 43434
43508: POP
43509: POP
// if tmp then
43510: LD_VAR 0 19
43514: IFFALSE 43526
// f := tmp ;
43516: LD_ADDR_VAR 0 12
43520: PUSH
43521: LD_VAR 0 19
43525: ST_TO_ADDR
// end ; x := personel [ i ] ;
43526: LD_ADDR_VAR 0 13
43530: PUSH
43531: LD_VAR 0 6
43535: PUSH
43536: LD_VAR 0 8
43540: ARRAY
43541: ST_TO_ADDR
// if x = - 1 then
43542: LD_VAR 0 13
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: EQUAL
43551: IFFALSE 43760
// begin for j in f do
43553: LD_ADDR_VAR 0 9
43557: PUSH
43558: LD_VAR 0 12
43562: PUSH
43563: FOR_IN
43564: IFFALSE 43756
// repeat InitHc ;
43566: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43570: LD_VAR 0 9
43574: PPUSH
43575: CALL_OW 266
43579: PUSH
43580: LD_INT 5
43582: EQUAL
43583: IFFALSE 43653
// begin if UnitsInside ( j ) < 3 then
43585: LD_VAR 0 9
43589: PPUSH
43590: CALL_OW 313
43594: PUSH
43595: LD_INT 3
43597: LESS
43598: IFFALSE 43634
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43600: LD_INT 0
43602: PPUSH
43603: LD_INT 5
43605: PUSH
43606: LD_INT 8
43608: PUSH
43609: LD_INT 9
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: LIST
43616: PUSH
43617: LD_VAR 0 17
43621: ARRAY
43622: PPUSH
43623: LD_VAR 0 4
43627: PPUSH
43628: CALL_OW 380
43632: GO 43651
// PrepareHuman ( false , i , skill ) ;
43634: LD_INT 0
43636: PPUSH
43637: LD_VAR 0 8
43641: PPUSH
43642: LD_VAR 0 4
43646: PPUSH
43647: CALL_OW 380
// end else
43651: GO 43670
// PrepareHuman ( false , i , skill ) ;
43653: LD_INT 0
43655: PPUSH
43656: LD_VAR 0 8
43660: PPUSH
43661: LD_VAR 0 4
43665: PPUSH
43666: CALL_OW 380
// un := CreateHuman ;
43670: LD_ADDR_VAR 0 14
43674: PUSH
43675: CALL_OW 44
43679: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43680: LD_ADDR_VAR 0 7
43684: PUSH
43685: LD_VAR 0 7
43689: PPUSH
43690: LD_INT 1
43692: PPUSH
43693: LD_VAR 0 14
43697: PPUSH
43698: CALL_OW 2
43702: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43703: LD_VAR 0 14
43707: PPUSH
43708: LD_VAR 0 9
43712: PPUSH
43713: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43717: LD_VAR 0 9
43721: PPUSH
43722: CALL_OW 313
43726: PUSH
43727: LD_INT 6
43729: EQUAL
43730: PUSH
43731: LD_VAR 0 9
43735: PPUSH
43736: CALL_OW 266
43740: PUSH
43741: LD_INT 32
43743: PUSH
43744: LD_INT 31
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: IN
43751: OR
43752: IFFALSE 43566
43754: GO 43563
43756: POP
43757: POP
// end else
43758: GO 44140
// for j = 1 to x do
43760: LD_ADDR_VAR 0 9
43764: PUSH
43765: DOUBLE
43766: LD_INT 1
43768: DEC
43769: ST_TO_ADDR
43770: LD_VAR 0 13
43774: PUSH
43775: FOR_TO
43776: IFFALSE 44138
// begin InitHc ;
43778: CALL_OW 19
// if not f then
43782: LD_VAR 0 12
43786: NOT
43787: IFFALSE 43876
// begin PrepareHuman ( false , i , skill ) ;
43789: LD_INT 0
43791: PPUSH
43792: LD_VAR 0 8
43796: PPUSH
43797: LD_VAR 0 4
43801: PPUSH
43802: CALL_OW 380
// un := CreateHuman ;
43806: LD_ADDR_VAR 0 14
43810: PUSH
43811: CALL_OW 44
43815: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43816: LD_ADDR_VAR 0 7
43820: PUSH
43821: LD_VAR 0 7
43825: PPUSH
43826: LD_INT 1
43828: PPUSH
43829: LD_VAR 0 14
43833: PPUSH
43834: CALL_OW 2
43838: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43839: LD_VAR 0 14
43843: PPUSH
43844: LD_VAR 0 1
43848: PPUSH
43849: CALL_OW 250
43853: PPUSH
43854: LD_VAR 0 1
43858: PPUSH
43859: CALL_OW 251
43863: PPUSH
43864: LD_INT 10
43866: PPUSH
43867: LD_INT 0
43869: PPUSH
43870: CALL_OW 50
// continue ;
43874: GO 43775
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43876: LD_VAR 0 12
43880: PUSH
43881: LD_INT 1
43883: ARRAY
43884: PPUSH
43885: CALL_OW 313
43889: PUSH
43890: LD_VAR 0 12
43894: PUSH
43895: LD_INT 1
43897: ARRAY
43898: PPUSH
43899: CALL_OW 266
43903: PUSH
43904: LD_INT 32
43906: PUSH
43907: LD_INT 31
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: IN
43914: AND
43915: PUSH
43916: LD_VAR 0 12
43920: PUSH
43921: LD_INT 1
43923: ARRAY
43924: PPUSH
43925: CALL_OW 313
43929: PUSH
43930: LD_INT 6
43932: EQUAL
43933: OR
43934: IFFALSE 43954
// f := Delete ( f , 1 ) ;
43936: LD_ADDR_VAR 0 12
43940: PUSH
43941: LD_VAR 0 12
43945: PPUSH
43946: LD_INT 1
43948: PPUSH
43949: CALL_OW 3
43953: ST_TO_ADDR
// if not f then
43954: LD_VAR 0 12
43958: NOT
43959: IFFALSE 43977
// begin x := x + 2 ;
43961: LD_ADDR_VAR 0 13
43965: PUSH
43966: LD_VAR 0 13
43970: PUSH
43971: LD_INT 2
43973: PLUS
43974: ST_TO_ADDR
// continue ;
43975: GO 43775
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43977: LD_VAR 0 12
43981: PUSH
43982: LD_INT 1
43984: ARRAY
43985: PPUSH
43986: CALL_OW 266
43990: PUSH
43991: LD_INT 5
43993: EQUAL
43994: IFFALSE 44068
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43996: LD_VAR 0 12
44000: PUSH
44001: LD_INT 1
44003: ARRAY
44004: PPUSH
44005: CALL_OW 313
44009: PUSH
44010: LD_INT 3
44012: LESS
44013: IFFALSE 44049
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44015: LD_INT 0
44017: PPUSH
44018: LD_INT 5
44020: PUSH
44021: LD_INT 8
44023: PUSH
44024: LD_INT 9
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: LIST
44031: PUSH
44032: LD_VAR 0 17
44036: ARRAY
44037: PPUSH
44038: LD_VAR 0 4
44042: PPUSH
44043: CALL_OW 380
44047: GO 44066
// PrepareHuman ( false , i , skill ) ;
44049: LD_INT 0
44051: PPUSH
44052: LD_VAR 0 8
44056: PPUSH
44057: LD_VAR 0 4
44061: PPUSH
44062: CALL_OW 380
// end else
44066: GO 44085
// PrepareHuman ( false , i , skill ) ;
44068: LD_INT 0
44070: PPUSH
44071: LD_VAR 0 8
44075: PPUSH
44076: LD_VAR 0 4
44080: PPUSH
44081: CALL_OW 380
// un := CreateHuman ;
44085: LD_ADDR_VAR 0 14
44089: PUSH
44090: CALL_OW 44
44094: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44095: LD_ADDR_VAR 0 7
44099: PUSH
44100: LD_VAR 0 7
44104: PPUSH
44105: LD_INT 1
44107: PPUSH
44108: LD_VAR 0 14
44112: PPUSH
44113: CALL_OW 2
44117: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44118: LD_VAR 0 14
44122: PPUSH
44123: LD_VAR 0 12
44127: PUSH
44128: LD_INT 1
44130: ARRAY
44131: PPUSH
44132: CALL_OW 52
// end ;
44136: GO 43775
44138: POP
44139: POP
// end ;
44140: GO 43077
44142: POP
44143: POP
// result := result ^ buildings ;
44144: LD_ADDR_VAR 0 7
44148: PUSH
44149: LD_VAR 0 7
44153: PUSH
44154: LD_VAR 0 18
44158: ADD
44159: ST_TO_ADDR
// end else
44160: GO 44303
// begin for i = 1 to personel do
44162: LD_ADDR_VAR 0 8
44166: PUSH
44167: DOUBLE
44168: LD_INT 1
44170: DEC
44171: ST_TO_ADDR
44172: LD_VAR 0 6
44176: PUSH
44177: FOR_TO
44178: IFFALSE 44301
// begin if i > 4 then
44180: LD_VAR 0 8
44184: PUSH
44185: LD_INT 4
44187: GREATER
44188: IFFALSE 44192
// break ;
44190: GO 44301
// x := personel [ i ] ;
44192: LD_ADDR_VAR 0 13
44196: PUSH
44197: LD_VAR 0 6
44201: PUSH
44202: LD_VAR 0 8
44206: ARRAY
44207: ST_TO_ADDR
// if x = - 1 then
44208: LD_VAR 0 13
44212: PUSH
44213: LD_INT 1
44215: NEG
44216: EQUAL
44217: IFFALSE 44221
// continue ;
44219: GO 44177
// PrepareHuman ( false , i , skill ) ;
44221: LD_INT 0
44223: PPUSH
44224: LD_VAR 0 8
44228: PPUSH
44229: LD_VAR 0 4
44233: PPUSH
44234: CALL_OW 380
// un := CreateHuman ;
44238: LD_ADDR_VAR 0 14
44242: PUSH
44243: CALL_OW 44
44247: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44248: LD_VAR 0 14
44252: PPUSH
44253: LD_VAR 0 1
44257: PPUSH
44258: CALL_OW 250
44262: PPUSH
44263: LD_VAR 0 1
44267: PPUSH
44268: CALL_OW 251
44272: PPUSH
44273: LD_INT 10
44275: PPUSH
44276: LD_INT 0
44278: PPUSH
44279: CALL_OW 50
// result := result ^ un ;
44283: LD_ADDR_VAR 0 7
44287: PUSH
44288: LD_VAR 0 7
44292: PUSH
44293: LD_VAR 0 14
44297: ADD
44298: ST_TO_ADDR
// end ;
44299: GO 44177
44301: POP
44302: POP
// end ; end ;
44303: LD_VAR 0 7
44307: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44308: LD_INT 0
44310: PPUSH
44311: PPUSH
44312: PPUSH
44313: PPUSH
44314: PPUSH
44315: PPUSH
44316: PPUSH
44317: PPUSH
44318: PPUSH
44319: PPUSH
44320: PPUSH
44321: PPUSH
44322: PPUSH
44323: PPUSH
44324: PPUSH
44325: PPUSH
// result := false ;
44326: LD_ADDR_VAR 0 3
44330: PUSH
44331: LD_INT 0
44333: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44334: LD_VAR 0 1
44338: NOT
44339: PUSH
44340: LD_VAR 0 1
44344: PPUSH
44345: CALL_OW 266
44349: PUSH
44350: LD_INT 32
44352: PUSH
44353: LD_INT 33
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: IN
44360: NOT
44361: OR
44362: IFFALSE 44366
// exit ;
44364: GO 45475
// nat := GetNation ( tower ) ;
44366: LD_ADDR_VAR 0 12
44370: PUSH
44371: LD_VAR 0 1
44375: PPUSH
44376: CALL_OW 248
44380: ST_TO_ADDR
// side := GetSide ( tower ) ;
44381: LD_ADDR_VAR 0 16
44385: PUSH
44386: LD_VAR 0 1
44390: PPUSH
44391: CALL_OW 255
44395: ST_TO_ADDR
// x := GetX ( tower ) ;
44396: LD_ADDR_VAR 0 10
44400: PUSH
44401: LD_VAR 0 1
44405: PPUSH
44406: CALL_OW 250
44410: ST_TO_ADDR
// y := GetY ( tower ) ;
44411: LD_ADDR_VAR 0 11
44415: PUSH
44416: LD_VAR 0 1
44420: PPUSH
44421: CALL_OW 251
44425: ST_TO_ADDR
// if not x or not y then
44426: LD_VAR 0 10
44430: NOT
44431: PUSH
44432: LD_VAR 0 11
44436: NOT
44437: OR
44438: IFFALSE 44442
// exit ;
44440: GO 45475
// weapon := 0 ;
44442: LD_ADDR_VAR 0 18
44446: PUSH
44447: LD_INT 0
44449: ST_TO_ADDR
// fac_list := [ ] ;
44450: LD_ADDR_VAR 0 17
44454: PUSH
44455: EMPTY
44456: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44457: LD_ADDR_VAR 0 6
44461: PUSH
44462: LD_VAR 0 1
44466: PPUSH
44467: CALL_OW 274
44471: PPUSH
44472: LD_VAR 0 2
44476: PPUSH
44477: LD_INT 0
44479: PPUSH
44480: CALL 42046 0 3
44484: PPUSH
44485: LD_INT 30
44487: PUSH
44488: LD_INT 3
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PPUSH
44495: CALL_OW 72
44499: ST_TO_ADDR
// if not factories then
44500: LD_VAR 0 6
44504: NOT
44505: IFFALSE 44509
// exit ;
44507: GO 45475
// for i in factories do
44509: LD_ADDR_VAR 0 8
44513: PUSH
44514: LD_VAR 0 6
44518: PUSH
44519: FOR_IN
44520: IFFALSE 44545
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44522: LD_ADDR_VAR 0 17
44526: PUSH
44527: LD_VAR 0 17
44531: PUSH
44532: LD_VAR 0 8
44536: PPUSH
44537: CALL_OW 478
44541: UNION
44542: ST_TO_ADDR
44543: GO 44519
44545: POP
44546: POP
// if not fac_list then
44547: LD_VAR 0 17
44551: NOT
44552: IFFALSE 44556
// exit ;
44554: GO 45475
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44556: LD_ADDR_VAR 0 5
44560: PUSH
44561: LD_INT 4
44563: PUSH
44564: LD_INT 5
44566: PUSH
44567: LD_INT 9
44569: PUSH
44570: LD_INT 10
44572: PUSH
44573: LD_INT 6
44575: PUSH
44576: LD_INT 7
44578: PUSH
44579: LD_INT 11
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 27
44593: PUSH
44594: LD_INT 28
44596: PUSH
44597: LD_INT 26
44599: PUSH
44600: LD_INT 30
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: PUSH
44609: LD_INT 43
44611: PUSH
44612: LD_INT 44
44614: PUSH
44615: LD_INT 46
44617: PUSH
44618: LD_INT 45
44620: PUSH
44621: LD_INT 47
44623: PUSH
44624: LD_INT 49
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: LIST
44639: PUSH
44640: LD_VAR 0 12
44644: ARRAY
44645: ST_TO_ADDR
// list := list isect fac_list ;
44646: LD_ADDR_VAR 0 5
44650: PUSH
44651: LD_VAR 0 5
44655: PUSH
44656: LD_VAR 0 17
44660: ISECT
44661: ST_TO_ADDR
// if not list then
44662: LD_VAR 0 5
44666: NOT
44667: IFFALSE 44671
// exit ;
44669: GO 45475
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44671: LD_VAR 0 12
44675: PUSH
44676: LD_INT 3
44678: EQUAL
44679: PUSH
44680: LD_INT 49
44682: PUSH
44683: LD_VAR 0 5
44687: IN
44688: AND
44689: PUSH
44690: LD_INT 31
44692: PPUSH
44693: LD_VAR 0 16
44697: PPUSH
44698: CALL_OW 321
44702: PUSH
44703: LD_INT 2
44705: EQUAL
44706: AND
44707: IFFALSE 44767
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44709: LD_INT 22
44711: PUSH
44712: LD_VAR 0 16
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 35
44723: PUSH
44724: LD_INT 49
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 91
44733: PUSH
44734: LD_VAR 0 1
44738: PUSH
44739: LD_INT 10
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: LIST
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: LIST
44751: PPUSH
44752: CALL_OW 69
44756: NOT
44757: IFFALSE 44767
// weapon := ru_time_lapser ;
44759: LD_ADDR_VAR 0 18
44763: PUSH
44764: LD_INT 49
44766: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44767: LD_VAR 0 12
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: LD_INT 2
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: IN
44782: PUSH
44783: LD_INT 11
44785: PUSH
44786: LD_VAR 0 5
44790: IN
44791: PUSH
44792: LD_INT 30
44794: PUSH
44795: LD_VAR 0 5
44799: IN
44800: OR
44801: AND
44802: PUSH
44803: LD_INT 6
44805: PPUSH
44806: LD_VAR 0 16
44810: PPUSH
44811: CALL_OW 321
44815: PUSH
44816: LD_INT 2
44818: EQUAL
44819: AND
44820: IFFALSE 44985
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44822: LD_INT 22
44824: PUSH
44825: LD_VAR 0 16
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 2
44836: PUSH
44837: LD_INT 35
44839: PUSH
44840: LD_INT 11
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 35
44849: PUSH
44850: LD_INT 30
44852: PUSH
44853: EMPTY
44854: LIST
44855: LIST
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 91
44864: PUSH
44865: LD_VAR 0 1
44869: PUSH
44870: LD_INT 18
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: LIST
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: LIST
44882: PPUSH
44883: CALL_OW 69
44887: NOT
44888: PUSH
44889: LD_INT 22
44891: PUSH
44892: LD_VAR 0 16
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 2
44903: PUSH
44904: LD_INT 30
44906: PUSH
44907: LD_INT 32
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 30
44916: PUSH
44917: LD_INT 33
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 91
44931: PUSH
44932: LD_VAR 0 1
44936: PUSH
44937: LD_INT 12
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: LIST
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: LIST
44949: PUSH
44950: EMPTY
44951: LIST
44952: PPUSH
44953: CALL_OW 69
44957: PUSH
44958: LD_INT 2
44960: GREATER
44961: AND
44962: IFFALSE 44985
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44964: LD_ADDR_VAR 0 18
44968: PUSH
44969: LD_INT 11
44971: PUSH
44972: LD_INT 30
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_VAR 0 12
44983: ARRAY
44984: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44985: LD_VAR 0 18
44989: NOT
44990: PUSH
44991: LD_INT 40
44993: PPUSH
44994: LD_VAR 0 16
44998: PPUSH
44999: CALL_OW 321
45003: PUSH
45004: LD_INT 2
45006: EQUAL
45007: AND
45008: PUSH
45009: LD_INT 7
45011: PUSH
45012: LD_VAR 0 5
45016: IN
45017: PUSH
45018: LD_INT 28
45020: PUSH
45021: LD_VAR 0 5
45025: IN
45026: OR
45027: PUSH
45028: LD_INT 45
45030: PUSH
45031: LD_VAR 0 5
45035: IN
45036: OR
45037: AND
45038: IFFALSE 45292
// begin hex := GetHexInfo ( x , y ) ;
45040: LD_ADDR_VAR 0 4
45044: PUSH
45045: LD_VAR 0 10
45049: PPUSH
45050: LD_VAR 0 11
45054: PPUSH
45055: CALL_OW 546
45059: ST_TO_ADDR
// if hex [ 1 ] then
45060: LD_VAR 0 4
45064: PUSH
45065: LD_INT 1
45067: ARRAY
45068: IFFALSE 45072
// exit ;
45070: GO 45475
// height := hex [ 2 ] ;
45072: LD_ADDR_VAR 0 15
45076: PUSH
45077: LD_VAR 0 4
45081: PUSH
45082: LD_INT 2
45084: ARRAY
45085: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45086: LD_ADDR_VAR 0 14
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: LD_INT 2
45096: PUSH
45097: LD_INT 3
45099: PUSH
45100: LD_INT 5
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: ST_TO_ADDR
// for i in tmp do
45109: LD_ADDR_VAR 0 8
45113: PUSH
45114: LD_VAR 0 14
45118: PUSH
45119: FOR_IN
45120: IFFALSE 45290
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45122: LD_ADDR_VAR 0 9
45126: PUSH
45127: LD_VAR 0 10
45131: PPUSH
45132: LD_VAR 0 8
45136: PPUSH
45137: LD_INT 5
45139: PPUSH
45140: CALL_OW 272
45144: PUSH
45145: LD_VAR 0 11
45149: PPUSH
45150: LD_VAR 0 8
45154: PPUSH
45155: LD_INT 5
45157: PPUSH
45158: CALL_OW 273
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45167: LD_VAR 0 9
45171: PUSH
45172: LD_INT 1
45174: ARRAY
45175: PPUSH
45176: LD_VAR 0 9
45180: PUSH
45181: LD_INT 2
45183: ARRAY
45184: PPUSH
45185: CALL_OW 488
45189: IFFALSE 45288
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45191: LD_ADDR_VAR 0 4
45195: PUSH
45196: LD_VAR 0 9
45200: PUSH
45201: LD_INT 1
45203: ARRAY
45204: PPUSH
45205: LD_VAR 0 9
45209: PUSH
45210: LD_INT 2
45212: ARRAY
45213: PPUSH
45214: CALL_OW 546
45218: ST_TO_ADDR
// if hex [ 1 ] then
45219: LD_VAR 0 4
45223: PUSH
45224: LD_INT 1
45226: ARRAY
45227: IFFALSE 45231
// continue ;
45229: GO 45119
// h := hex [ 2 ] ;
45231: LD_ADDR_VAR 0 13
45235: PUSH
45236: LD_VAR 0 4
45240: PUSH
45241: LD_INT 2
45243: ARRAY
45244: ST_TO_ADDR
// if h + 7 < height then
45245: LD_VAR 0 13
45249: PUSH
45250: LD_INT 7
45252: PLUS
45253: PUSH
45254: LD_VAR 0 15
45258: LESS
45259: IFFALSE 45288
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45261: LD_ADDR_VAR 0 18
45265: PUSH
45266: LD_INT 7
45268: PUSH
45269: LD_INT 28
45271: PUSH
45272: LD_INT 45
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: LIST
45279: PUSH
45280: LD_VAR 0 12
45284: ARRAY
45285: ST_TO_ADDR
// break ;
45286: GO 45290
// end ; end ; end ;
45288: GO 45119
45290: POP
45291: POP
// end ; if not weapon then
45292: LD_VAR 0 18
45296: NOT
45297: IFFALSE 45357
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45299: LD_ADDR_VAR 0 5
45303: PUSH
45304: LD_VAR 0 5
45308: PUSH
45309: LD_INT 11
45311: PUSH
45312: LD_INT 30
45314: PUSH
45315: LD_INT 49
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: LIST
45322: DIFF
45323: ST_TO_ADDR
// if not list then
45324: LD_VAR 0 5
45328: NOT
45329: IFFALSE 45333
// exit ;
45331: GO 45475
// weapon := list [ rand ( 1 , list ) ] ;
45333: LD_ADDR_VAR 0 18
45337: PUSH
45338: LD_VAR 0 5
45342: PUSH
45343: LD_INT 1
45345: PPUSH
45346: LD_VAR 0 5
45350: PPUSH
45351: CALL_OW 12
45355: ARRAY
45356: ST_TO_ADDR
// end ; if weapon then
45357: LD_VAR 0 18
45361: IFFALSE 45475
// begin tmp := CostOfWeapon ( weapon ) ;
45363: LD_ADDR_VAR 0 14
45367: PUSH
45368: LD_VAR 0 18
45372: PPUSH
45373: CALL_OW 451
45377: ST_TO_ADDR
// j := GetBase ( tower ) ;
45378: LD_ADDR_VAR 0 9
45382: PUSH
45383: LD_VAR 0 1
45387: PPUSH
45388: CALL_OW 274
45392: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45393: LD_VAR 0 9
45397: PPUSH
45398: LD_INT 1
45400: PPUSH
45401: CALL_OW 275
45405: PUSH
45406: LD_VAR 0 14
45410: PUSH
45411: LD_INT 1
45413: ARRAY
45414: GREATEREQUAL
45415: PUSH
45416: LD_VAR 0 9
45420: PPUSH
45421: LD_INT 2
45423: PPUSH
45424: CALL_OW 275
45428: PUSH
45429: LD_VAR 0 14
45433: PUSH
45434: LD_INT 2
45436: ARRAY
45437: GREATEREQUAL
45438: AND
45439: PUSH
45440: LD_VAR 0 9
45444: PPUSH
45445: LD_INT 3
45447: PPUSH
45448: CALL_OW 275
45452: PUSH
45453: LD_VAR 0 14
45457: PUSH
45458: LD_INT 3
45460: ARRAY
45461: GREATEREQUAL
45462: AND
45463: IFFALSE 45475
// result := weapon ;
45465: LD_ADDR_VAR 0 3
45469: PUSH
45470: LD_VAR 0 18
45474: ST_TO_ADDR
// end ; end ;
45475: LD_VAR 0 3
45479: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45480: LD_INT 0
45482: PPUSH
45483: PPUSH
// result := true ;
45484: LD_ADDR_VAR 0 3
45488: PUSH
45489: LD_INT 1
45491: ST_TO_ADDR
// if array1 = array2 then
45492: LD_VAR 0 1
45496: PUSH
45497: LD_VAR 0 2
45501: EQUAL
45502: IFFALSE 45562
// begin for i = 1 to array1 do
45504: LD_ADDR_VAR 0 4
45508: PUSH
45509: DOUBLE
45510: LD_INT 1
45512: DEC
45513: ST_TO_ADDR
45514: LD_VAR 0 1
45518: PUSH
45519: FOR_TO
45520: IFFALSE 45558
// if array1 [ i ] <> array2 [ i ] then
45522: LD_VAR 0 1
45526: PUSH
45527: LD_VAR 0 4
45531: ARRAY
45532: PUSH
45533: LD_VAR 0 2
45537: PUSH
45538: LD_VAR 0 4
45542: ARRAY
45543: NONEQUAL
45544: IFFALSE 45556
// begin result := false ;
45546: LD_ADDR_VAR 0 3
45550: PUSH
45551: LD_INT 0
45553: ST_TO_ADDR
// break ;
45554: GO 45558
// end ;
45556: GO 45519
45558: POP
45559: POP
// end else
45560: GO 45570
// result := false ;
45562: LD_ADDR_VAR 0 3
45566: PUSH
45567: LD_INT 0
45569: ST_TO_ADDR
// end ;
45570: LD_VAR 0 3
45574: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45575: LD_INT 0
45577: PPUSH
45578: PPUSH
// if not array1 or not array2 then
45579: LD_VAR 0 1
45583: NOT
45584: PUSH
45585: LD_VAR 0 2
45589: NOT
45590: OR
45591: IFFALSE 45595
// exit ;
45593: GO 45659
// result := true ;
45595: LD_ADDR_VAR 0 3
45599: PUSH
45600: LD_INT 1
45602: ST_TO_ADDR
// for i = 1 to array1 do
45603: LD_ADDR_VAR 0 4
45607: PUSH
45608: DOUBLE
45609: LD_INT 1
45611: DEC
45612: ST_TO_ADDR
45613: LD_VAR 0 1
45617: PUSH
45618: FOR_TO
45619: IFFALSE 45657
// if array1 [ i ] <> array2 [ i ] then
45621: LD_VAR 0 1
45625: PUSH
45626: LD_VAR 0 4
45630: ARRAY
45631: PUSH
45632: LD_VAR 0 2
45636: PUSH
45637: LD_VAR 0 4
45641: ARRAY
45642: NONEQUAL
45643: IFFALSE 45655
// begin result := false ;
45645: LD_ADDR_VAR 0 3
45649: PUSH
45650: LD_INT 0
45652: ST_TO_ADDR
// break ;
45653: GO 45657
// end ;
45655: GO 45618
45657: POP
45658: POP
// end ;
45659: LD_VAR 0 3
45663: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45664: LD_INT 0
45666: PPUSH
45667: PPUSH
45668: PPUSH
// pom := GetBase ( fac ) ;
45669: LD_ADDR_VAR 0 5
45673: PUSH
45674: LD_VAR 0 1
45678: PPUSH
45679: CALL_OW 274
45683: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45684: LD_ADDR_VAR 0 4
45688: PUSH
45689: LD_VAR 0 2
45693: PUSH
45694: LD_INT 1
45696: ARRAY
45697: PPUSH
45698: LD_VAR 0 2
45702: PUSH
45703: LD_INT 2
45705: ARRAY
45706: PPUSH
45707: LD_VAR 0 2
45711: PUSH
45712: LD_INT 3
45714: ARRAY
45715: PPUSH
45716: LD_VAR 0 2
45720: PUSH
45721: LD_INT 4
45723: ARRAY
45724: PPUSH
45725: CALL_OW 449
45729: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45730: LD_ADDR_VAR 0 3
45734: PUSH
45735: LD_VAR 0 5
45739: PPUSH
45740: LD_INT 1
45742: PPUSH
45743: CALL_OW 275
45747: PUSH
45748: LD_VAR 0 4
45752: PUSH
45753: LD_INT 1
45755: ARRAY
45756: GREATEREQUAL
45757: PUSH
45758: LD_VAR 0 5
45762: PPUSH
45763: LD_INT 2
45765: PPUSH
45766: CALL_OW 275
45770: PUSH
45771: LD_VAR 0 4
45775: PUSH
45776: LD_INT 2
45778: ARRAY
45779: GREATEREQUAL
45780: AND
45781: PUSH
45782: LD_VAR 0 5
45786: PPUSH
45787: LD_INT 3
45789: PPUSH
45790: CALL_OW 275
45794: PUSH
45795: LD_VAR 0 4
45799: PUSH
45800: LD_INT 3
45802: ARRAY
45803: GREATEREQUAL
45804: AND
45805: ST_TO_ADDR
// end ;
45806: LD_VAR 0 3
45810: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45811: LD_INT 0
45813: PPUSH
45814: PPUSH
45815: PPUSH
45816: PPUSH
// pom := GetBase ( building ) ;
45817: LD_ADDR_VAR 0 3
45821: PUSH
45822: LD_VAR 0 1
45826: PPUSH
45827: CALL_OW 274
45831: ST_TO_ADDR
// if not pom then
45832: LD_VAR 0 3
45836: NOT
45837: IFFALSE 45841
// exit ;
45839: GO 46011
// btype := GetBType ( building ) ;
45841: LD_ADDR_VAR 0 5
45845: PUSH
45846: LD_VAR 0 1
45850: PPUSH
45851: CALL_OW 266
45855: ST_TO_ADDR
// if btype = b_armoury then
45856: LD_VAR 0 5
45860: PUSH
45861: LD_INT 4
45863: EQUAL
45864: IFFALSE 45874
// btype := b_barracks ;
45866: LD_ADDR_VAR 0 5
45870: PUSH
45871: LD_INT 5
45873: ST_TO_ADDR
// if btype = b_depot then
45874: LD_VAR 0 5
45878: PUSH
45879: LD_INT 0
45881: EQUAL
45882: IFFALSE 45892
// btype := b_warehouse ;
45884: LD_ADDR_VAR 0 5
45888: PUSH
45889: LD_INT 1
45891: ST_TO_ADDR
// if btype = b_workshop then
45892: LD_VAR 0 5
45896: PUSH
45897: LD_INT 2
45899: EQUAL
45900: IFFALSE 45910
// btype := b_factory ;
45902: LD_ADDR_VAR 0 5
45906: PUSH
45907: LD_INT 3
45909: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45910: LD_ADDR_VAR 0 4
45914: PUSH
45915: LD_VAR 0 5
45919: PPUSH
45920: LD_VAR 0 1
45924: PPUSH
45925: CALL_OW 248
45929: PPUSH
45930: CALL_OW 450
45934: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45935: LD_ADDR_VAR 0 2
45939: PUSH
45940: LD_VAR 0 3
45944: PPUSH
45945: LD_INT 1
45947: PPUSH
45948: CALL_OW 275
45952: PUSH
45953: LD_VAR 0 4
45957: PUSH
45958: LD_INT 1
45960: ARRAY
45961: GREATEREQUAL
45962: PUSH
45963: LD_VAR 0 3
45967: PPUSH
45968: LD_INT 2
45970: PPUSH
45971: CALL_OW 275
45975: PUSH
45976: LD_VAR 0 4
45980: PUSH
45981: LD_INT 2
45983: ARRAY
45984: GREATEREQUAL
45985: AND
45986: PUSH
45987: LD_VAR 0 3
45991: PPUSH
45992: LD_INT 3
45994: PPUSH
45995: CALL_OW 275
45999: PUSH
46000: LD_VAR 0 4
46004: PUSH
46005: LD_INT 3
46007: ARRAY
46008: GREATEREQUAL
46009: AND
46010: ST_TO_ADDR
// end ;
46011: LD_VAR 0 2
46015: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46016: LD_INT 0
46018: PPUSH
46019: PPUSH
46020: PPUSH
// pom := GetBase ( building ) ;
46021: LD_ADDR_VAR 0 4
46025: PUSH
46026: LD_VAR 0 1
46030: PPUSH
46031: CALL_OW 274
46035: ST_TO_ADDR
// if not pom then
46036: LD_VAR 0 4
46040: NOT
46041: IFFALSE 46045
// exit ;
46043: GO 46146
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46045: LD_ADDR_VAR 0 5
46049: PUSH
46050: LD_VAR 0 2
46054: PPUSH
46055: LD_VAR 0 1
46059: PPUSH
46060: CALL_OW 248
46064: PPUSH
46065: CALL_OW 450
46069: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46070: LD_ADDR_VAR 0 3
46074: PUSH
46075: LD_VAR 0 4
46079: PPUSH
46080: LD_INT 1
46082: PPUSH
46083: CALL_OW 275
46087: PUSH
46088: LD_VAR 0 5
46092: PUSH
46093: LD_INT 1
46095: ARRAY
46096: GREATEREQUAL
46097: PUSH
46098: LD_VAR 0 4
46102: PPUSH
46103: LD_INT 2
46105: PPUSH
46106: CALL_OW 275
46110: PUSH
46111: LD_VAR 0 5
46115: PUSH
46116: LD_INT 2
46118: ARRAY
46119: GREATEREQUAL
46120: AND
46121: PUSH
46122: LD_VAR 0 4
46126: PPUSH
46127: LD_INT 3
46129: PPUSH
46130: CALL_OW 275
46134: PUSH
46135: LD_VAR 0 5
46139: PUSH
46140: LD_INT 3
46142: ARRAY
46143: GREATEREQUAL
46144: AND
46145: ST_TO_ADDR
// end ;
46146: LD_VAR 0 3
46150: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46151: LD_INT 0
46153: PPUSH
46154: PPUSH
46155: PPUSH
46156: PPUSH
46157: PPUSH
46158: PPUSH
46159: PPUSH
46160: PPUSH
46161: PPUSH
46162: PPUSH
46163: PPUSH
// result := false ;
46164: LD_ADDR_VAR 0 8
46168: PUSH
46169: LD_INT 0
46171: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46172: LD_VAR 0 5
46176: NOT
46177: PUSH
46178: LD_VAR 0 1
46182: NOT
46183: OR
46184: PUSH
46185: LD_VAR 0 2
46189: NOT
46190: OR
46191: PUSH
46192: LD_VAR 0 3
46196: NOT
46197: OR
46198: IFFALSE 46202
// exit ;
46200: GO 47016
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46202: LD_ADDR_VAR 0 14
46206: PUSH
46207: LD_VAR 0 1
46211: PPUSH
46212: LD_VAR 0 2
46216: PPUSH
46217: LD_VAR 0 3
46221: PPUSH
46222: LD_VAR 0 4
46226: PPUSH
46227: LD_VAR 0 5
46231: PUSH
46232: LD_INT 1
46234: ARRAY
46235: PPUSH
46236: CALL_OW 248
46240: PPUSH
46241: LD_INT 0
46243: PPUSH
46244: CALL 48253 0 6
46248: ST_TO_ADDR
// if not hexes then
46249: LD_VAR 0 14
46253: NOT
46254: IFFALSE 46258
// exit ;
46256: GO 47016
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46258: LD_ADDR_VAR 0 17
46262: PUSH
46263: LD_VAR 0 5
46267: PPUSH
46268: LD_INT 22
46270: PUSH
46271: LD_VAR 0 13
46275: PPUSH
46276: CALL_OW 255
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 2
46287: PUSH
46288: LD_INT 30
46290: PUSH
46291: LD_INT 0
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 30
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: LIST
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PPUSH
46317: CALL_OW 72
46321: ST_TO_ADDR
// for i = 1 to hexes do
46322: LD_ADDR_VAR 0 9
46326: PUSH
46327: DOUBLE
46328: LD_INT 1
46330: DEC
46331: ST_TO_ADDR
46332: LD_VAR 0 14
46336: PUSH
46337: FOR_TO
46338: IFFALSE 47014
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46340: LD_ADDR_VAR 0 13
46344: PUSH
46345: LD_VAR 0 14
46349: PUSH
46350: LD_VAR 0 9
46354: ARRAY
46355: PUSH
46356: LD_INT 1
46358: ARRAY
46359: PPUSH
46360: LD_VAR 0 14
46364: PUSH
46365: LD_VAR 0 9
46369: ARRAY
46370: PUSH
46371: LD_INT 2
46373: ARRAY
46374: PPUSH
46375: CALL_OW 428
46379: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46380: LD_VAR 0 14
46384: PUSH
46385: LD_VAR 0 9
46389: ARRAY
46390: PUSH
46391: LD_INT 1
46393: ARRAY
46394: PPUSH
46395: LD_VAR 0 14
46399: PUSH
46400: LD_VAR 0 9
46404: ARRAY
46405: PUSH
46406: LD_INT 2
46408: ARRAY
46409: PPUSH
46410: CALL_OW 351
46414: PUSH
46415: LD_VAR 0 14
46419: PUSH
46420: LD_VAR 0 9
46424: ARRAY
46425: PUSH
46426: LD_INT 1
46428: ARRAY
46429: PPUSH
46430: LD_VAR 0 14
46434: PUSH
46435: LD_VAR 0 9
46439: ARRAY
46440: PUSH
46441: LD_INT 2
46443: ARRAY
46444: PPUSH
46445: CALL_OW 488
46449: NOT
46450: OR
46451: PUSH
46452: LD_VAR 0 13
46456: PPUSH
46457: CALL_OW 247
46461: PUSH
46462: LD_INT 3
46464: EQUAL
46465: OR
46466: IFFALSE 46472
// exit ;
46468: POP
46469: POP
46470: GO 47016
// if not tmp then
46472: LD_VAR 0 13
46476: NOT
46477: IFFALSE 46481
// continue ;
46479: GO 46337
// result := true ;
46481: LD_ADDR_VAR 0 8
46485: PUSH
46486: LD_INT 1
46488: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46489: LD_VAR 0 6
46493: PUSH
46494: LD_VAR 0 13
46498: PPUSH
46499: CALL_OW 247
46503: PUSH
46504: LD_INT 2
46506: EQUAL
46507: AND
46508: PUSH
46509: LD_VAR 0 13
46513: PPUSH
46514: CALL_OW 263
46518: PUSH
46519: LD_INT 1
46521: EQUAL
46522: AND
46523: IFFALSE 46687
// begin if IsDrivenBy ( tmp ) then
46525: LD_VAR 0 13
46529: PPUSH
46530: CALL_OW 311
46534: IFFALSE 46538
// continue ;
46536: GO 46337
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46538: LD_VAR 0 6
46542: PPUSH
46543: LD_INT 3
46545: PUSH
46546: LD_INT 60
46548: PUSH
46549: EMPTY
46550: LIST
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 3
46558: PUSH
46559: LD_INT 55
46561: PUSH
46562: EMPTY
46563: LIST
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PPUSH
46573: CALL_OW 72
46577: IFFALSE 46685
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46579: LD_ADDR_VAR 0 18
46583: PUSH
46584: LD_VAR 0 6
46588: PPUSH
46589: LD_INT 3
46591: PUSH
46592: LD_INT 60
46594: PUSH
46595: EMPTY
46596: LIST
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 3
46604: PUSH
46605: LD_INT 55
46607: PUSH
46608: EMPTY
46609: LIST
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PPUSH
46619: CALL_OW 72
46623: PUSH
46624: LD_INT 1
46626: ARRAY
46627: ST_TO_ADDR
// if IsInUnit ( driver ) then
46628: LD_VAR 0 18
46632: PPUSH
46633: CALL_OW 310
46637: IFFALSE 46648
// ComExit ( driver ) ;
46639: LD_VAR 0 18
46643: PPUSH
46644: CALL 71381 0 1
// AddComEnterUnit ( driver , tmp ) ;
46648: LD_VAR 0 18
46652: PPUSH
46653: LD_VAR 0 13
46657: PPUSH
46658: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46662: LD_VAR 0 18
46666: PPUSH
46667: LD_VAR 0 7
46671: PPUSH
46672: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46676: LD_VAR 0 18
46680: PPUSH
46681: CALL_OW 181
// end ; continue ;
46685: GO 46337
// end ; if not cleaners or not tmp in cleaners then
46687: LD_VAR 0 6
46691: NOT
46692: PUSH
46693: LD_VAR 0 13
46697: PUSH
46698: LD_VAR 0 6
46702: IN
46703: NOT
46704: OR
46705: IFFALSE 47012
// begin if dep then
46707: LD_VAR 0 17
46711: IFFALSE 46847
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46713: LD_ADDR_VAR 0 16
46717: PUSH
46718: LD_VAR 0 17
46722: PUSH
46723: LD_INT 1
46725: ARRAY
46726: PPUSH
46727: CALL_OW 250
46731: PPUSH
46732: LD_VAR 0 17
46736: PUSH
46737: LD_INT 1
46739: ARRAY
46740: PPUSH
46741: CALL_OW 254
46745: PPUSH
46746: LD_INT 5
46748: PPUSH
46749: CALL_OW 272
46753: PUSH
46754: LD_VAR 0 17
46758: PUSH
46759: LD_INT 1
46761: ARRAY
46762: PPUSH
46763: CALL_OW 251
46767: PPUSH
46768: LD_VAR 0 17
46772: PUSH
46773: LD_INT 1
46775: ARRAY
46776: PPUSH
46777: CALL_OW 254
46781: PPUSH
46782: LD_INT 5
46784: PPUSH
46785: CALL_OW 273
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46794: LD_VAR 0 16
46798: PUSH
46799: LD_INT 1
46801: ARRAY
46802: PPUSH
46803: LD_VAR 0 16
46807: PUSH
46808: LD_INT 2
46810: ARRAY
46811: PPUSH
46812: CALL_OW 488
46816: IFFALSE 46847
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46818: LD_VAR 0 13
46822: PPUSH
46823: LD_VAR 0 16
46827: PUSH
46828: LD_INT 1
46830: ARRAY
46831: PPUSH
46832: LD_VAR 0 16
46836: PUSH
46837: LD_INT 2
46839: ARRAY
46840: PPUSH
46841: CALL_OW 111
// continue ;
46845: GO 46337
// end ; end ; r := GetDir ( tmp ) ;
46847: LD_ADDR_VAR 0 15
46851: PUSH
46852: LD_VAR 0 13
46856: PPUSH
46857: CALL_OW 254
46861: ST_TO_ADDR
// if r = 5 then
46862: LD_VAR 0 15
46866: PUSH
46867: LD_INT 5
46869: EQUAL
46870: IFFALSE 46880
// r := 0 ;
46872: LD_ADDR_VAR 0 15
46876: PUSH
46877: LD_INT 0
46879: ST_TO_ADDR
// for j = r to 5 do
46880: LD_ADDR_VAR 0 10
46884: PUSH
46885: DOUBLE
46886: LD_VAR 0 15
46890: DEC
46891: ST_TO_ADDR
46892: LD_INT 5
46894: PUSH
46895: FOR_TO
46896: IFFALSE 47010
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46898: LD_ADDR_VAR 0 11
46902: PUSH
46903: LD_VAR 0 13
46907: PPUSH
46908: CALL_OW 250
46912: PPUSH
46913: LD_VAR 0 10
46917: PPUSH
46918: LD_INT 2
46920: PPUSH
46921: CALL_OW 272
46925: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46926: LD_ADDR_VAR 0 12
46930: PUSH
46931: LD_VAR 0 13
46935: PPUSH
46936: CALL_OW 251
46940: PPUSH
46941: LD_VAR 0 10
46945: PPUSH
46946: LD_INT 2
46948: PPUSH
46949: CALL_OW 273
46953: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46954: LD_VAR 0 11
46958: PPUSH
46959: LD_VAR 0 12
46963: PPUSH
46964: CALL_OW 488
46968: PUSH
46969: LD_VAR 0 11
46973: PPUSH
46974: LD_VAR 0 12
46978: PPUSH
46979: CALL_OW 428
46983: NOT
46984: AND
46985: IFFALSE 47008
// begin ComMoveXY ( tmp , _x , _y ) ;
46987: LD_VAR 0 13
46991: PPUSH
46992: LD_VAR 0 11
46996: PPUSH
46997: LD_VAR 0 12
47001: PPUSH
47002: CALL_OW 111
// break ;
47006: GO 47010
// end ; end ;
47008: GO 46895
47010: POP
47011: POP
// end ; end ;
47012: GO 46337
47014: POP
47015: POP
// end ;
47016: LD_VAR 0 8
47020: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47021: LD_INT 0
47023: PPUSH
// result := true ;
47024: LD_ADDR_VAR 0 3
47028: PUSH
47029: LD_INT 1
47031: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47032: LD_VAR 0 2
47036: PUSH
47037: LD_INT 24
47039: DOUBLE
47040: EQUAL
47041: IFTRUE 47051
47043: LD_INT 33
47045: DOUBLE
47046: EQUAL
47047: IFTRUE 47051
47049: GO 47076
47051: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47052: LD_ADDR_VAR 0 3
47056: PUSH
47057: LD_INT 32
47059: PPUSH
47060: LD_VAR 0 1
47064: PPUSH
47065: CALL_OW 321
47069: PUSH
47070: LD_INT 2
47072: EQUAL
47073: ST_TO_ADDR
47074: GO 47396
47076: LD_INT 20
47078: DOUBLE
47079: EQUAL
47080: IFTRUE 47084
47082: GO 47109
47084: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47085: LD_ADDR_VAR 0 3
47089: PUSH
47090: LD_INT 6
47092: PPUSH
47093: LD_VAR 0 1
47097: PPUSH
47098: CALL_OW 321
47102: PUSH
47103: LD_INT 2
47105: EQUAL
47106: ST_TO_ADDR
47107: GO 47396
47109: LD_INT 22
47111: DOUBLE
47112: EQUAL
47113: IFTRUE 47123
47115: LD_INT 36
47117: DOUBLE
47118: EQUAL
47119: IFTRUE 47123
47121: GO 47148
47123: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47124: LD_ADDR_VAR 0 3
47128: PUSH
47129: LD_INT 15
47131: PPUSH
47132: LD_VAR 0 1
47136: PPUSH
47137: CALL_OW 321
47141: PUSH
47142: LD_INT 2
47144: EQUAL
47145: ST_TO_ADDR
47146: GO 47396
47148: LD_INT 30
47150: DOUBLE
47151: EQUAL
47152: IFTRUE 47156
47154: GO 47181
47156: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47157: LD_ADDR_VAR 0 3
47161: PUSH
47162: LD_INT 20
47164: PPUSH
47165: LD_VAR 0 1
47169: PPUSH
47170: CALL_OW 321
47174: PUSH
47175: LD_INT 2
47177: EQUAL
47178: ST_TO_ADDR
47179: GO 47396
47181: LD_INT 28
47183: DOUBLE
47184: EQUAL
47185: IFTRUE 47195
47187: LD_INT 21
47189: DOUBLE
47190: EQUAL
47191: IFTRUE 47195
47193: GO 47220
47195: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47196: LD_ADDR_VAR 0 3
47200: PUSH
47201: LD_INT 21
47203: PPUSH
47204: LD_VAR 0 1
47208: PPUSH
47209: CALL_OW 321
47213: PUSH
47214: LD_INT 2
47216: EQUAL
47217: ST_TO_ADDR
47218: GO 47396
47220: LD_INT 16
47222: DOUBLE
47223: EQUAL
47224: IFTRUE 47228
47226: GO 47255
47228: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47229: LD_ADDR_VAR 0 3
47233: PUSH
47234: LD_EXP 51
47238: PPUSH
47239: LD_VAR 0 1
47243: PPUSH
47244: CALL_OW 321
47248: PUSH
47249: LD_INT 2
47251: EQUAL
47252: ST_TO_ADDR
47253: GO 47396
47255: LD_INT 19
47257: DOUBLE
47258: EQUAL
47259: IFTRUE 47269
47261: LD_INT 23
47263: DOUBLE
47264: EQUAL
47265: IFTRUE 47269
47267: GO 47296
47269: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47270: LD_ADDR_VAR 0 3
47274: PUSH
47275: LD_EXP 50
47279: PPUSH
47280: LD_VAR 0 1
47284: PPUSH
47285: CALL_OW 321
47289: PUSH
47290: LD_INT 2
47292: EQUAL
47293: ST_TO_ADDR
47294: GO 47396
47296: LD_INT 17
47298: DOUBLE
47299: EQUAL
47300: IFTRUE 47304
47302: GO 47329
47304: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47305: LD_ADDR_VAR 0 3
47309: PUSH
47310: LD_INT 39
47312: PPUSH
47313: LD_VAR 0 1
47317: PPUSH
47318: CALL_OW 321
47322: PUSH
47323: LD_INT 2
47325: EQUAL
47326: ST_TO_ADDR
47327: GO 47396
47329: LD_INT 18
47331: DOUBLE
47332: EQUAL
47333: IFTRUE 47337
47335: GO 47362
47337: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47338: LD_ADDR_VAR 0 3
47342: PUSH
47343: LD_INT 40
47345: PPUSH
47346: LD_VAR 0 1
47350: PPUSH
47351: CALL_OW 321
47355: PUSH
47356: LD_INT 2
47358: EQUAL
47359: ST_TO_ADDR
47360: GO 47396
47362: LD_INT 27
47364: DOUBLE
47365: EQUAL
47366: IFTRUE 47370
47368: GO 47395
47370: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47371: LD_ADDR_VAR 0 3
47375: PUSH
47376: LD_INT 35
47378: PPUSH
47379: LD_VAR 0 1
47383: PPUSH
47384: CALL_OW 321
47388: PUSH
47389: LD_INT 2
47391: EQUAL
47392: ST_TO_ADDR
47393: GO 47396
47395: POP
// end ;
47396: LD_VAR 0 3
47400: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47401: LD_INT 0
47403: PPUSH
47404: PPUSH
47405: PPUSH
47406: PPUSH
47407: PPUSH
47408: PPUSH
47409: PPUSH
47410: PPUSH
47411: PPUSH
47412: PPUSH
47413: PPUSH
// result := false ;
47414: LD_ADDR_VAR 0 6
47418: PUSH
47419: LD_INT 0
47421: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47422: LD_VAR 0 1
47426: NOT
47427: PUSH
47428: LD_VAR 0 1
47432: PPUSH
47433: CALL_OW 266
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: LD_INT 1
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: IN
47448: NOT
47449: OR
47450: PUSH
47451: LD_VAR 0 2
47455: NOT
47456: OR
47457: PUSH
47458: LD_VAR 0 5
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: LD_INT 2
47471: PUSH
47472: LD_INT 3
47474: PUSH
47475: LD_INT 4
47477: PUSH
47478: LD_INT 5
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: IN
47489: NOT
47490: OR
47491: PUSH
47492: LD_VAR 0 3
47496: PPUSH
47497: LD_VAR 0 4
47501: PPUSH
47502: CALL_OW 488
47506: NOT
47507: OR
47508: IFFALSE 47512
// exit ;
47510: GO 48248
// side := GetSide ( depot ) ;
47512: LD_ADDR_VAR 0 9
47516: PUSH
47517: LD_VAR 0 1
47521: PPUSH
47522: CALL_OW 255
47526: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47527: LD_VAR 0 9
47531: PPUSH
47532: LD_VAR 0 2
47536: PPUSH
47537: CALL 47021 0 2
47541: NOT
47542: IFFALSE 47546
// exit ;
47544: GO 48248
// pom := GetBase ( depot ) ;
47546: LD_ADDR_VAR 0 10
47550: PUSH
47551: LD_VAR 0 1
47555: PPUSH
47556: CALL_OW 274
47560: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47561: LD_ADDR_VAR 0 11
47565: PUSH
47566: LD_VAR 0 2
47570: PPUSH
47571: LD_VAR 0 1
47575: PPUSH
47576: CALL_OW 248
47580: PPUSH
47581: CALL_OW 450
47585: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47586: LD_VAR 0 10
47590: PPUSH
47591: LD_INT 1
47593: PPUSH
47594: CALL_OW 275
47598: PUSH
47599: LD_VAR 0 11
47603: PUSH
47604: LD_INT 1
47606: ARRAY
47607: GREATEREQUAL
47608: PUSH
47609: LD_VAR 0 10
47613: PPUSH
47614: LD_INT 2
47616: PPUSH
47617: CALL_OW 275
47621: PUSH
47622: LD_VAR 0 11
47626: PUSH
47627: LD_INT 2
47629: ARRAY
47630: GREATEREQUAL
47631: AND
47632: PUSH
47633: LD_VAR 0 10
47637: PPUSH
47638: LD_INT 3
47640: PPUSH
47641: CALL_OW 275
47645: PUSH
47646: LD_VAR 0 11
47650: PUSH
47651: LD_INT 3
47653: ARRAY
47654: GREATEREQUAL
47655: AND
47656: NOT
47657: IFFALSE 47661
// exit ;
47659: GO 48248
// if GetBType ( depot ) = b_depot then
47661: LD_VAR 0 1
47665: PPUSH
47666: CALL_OW 266
47670: PUSH
47671: LD_INT 0
47673: EQUAL
47674: IFFALSE 47686
// dist := 28 else
47676: LD_ADDR_VAR 0 14
47680: PUSH
47681: LD_INT 28
47683: ST_TO_ADDR
47684: GO 47694
// dist := 36 ;
47686: LD_ADDR_VAR 0 14
47690: PUSH
47691: LD_INT 36
47693: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47694: LD_VAR 0 1
47698: PPUSH
47699: LD_VAR 0 3
47703: PPUSH
47704: LD_VAR 0 4
47708: PPUSH
47709: CALL_OW 297
47713: PUSH
47714: LD_VAR 0 14
47718: GREATER
47719: IFFALSE 47723
// exit ;
47721: GO 48248
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47723: LD_ADDR_VAR 0 12
47727: PUSH
47728: LD_VAR 0 2
47732: PPUSH
47733: LD_VAR 0 3
47737: PPUSH
47738: LD_VAR 0 4
47742: PPUSH
47743: LD_VAR 0 5
47747: PPUSH
47748: LD_VAR 0 1
47752: PPUSH
47753: CALL_OW 248
47757: PPUSH
47758: LD_INT 0
47760: PPUSH
47761: CALL 48253 0 6
47765: ST_TO_ADDR
// if not hexes then
47766: LD_VAR 0 12
47770: NOT
47771: IFFALSE 47775
// exit ;
47773: GO 48248
// hex := GetHexInfo ( x , y ) ;
47775: LD_ADDR_VAR 0 15
47779: PUSH
47780: LD_VAR 0 3
47784: PPUSH
47785: LD_VAR 0 4
47789: PPUSH
47790: CALL_OW 546
47794: ST_TO_ADDR
// if hex [ 1 ] then
47795: LD_VAR 0 15
47799: PUSH
47800: LD_INT 1
47802: ARRAY
47803: IFFALSE 47807
// exit ;
47805: GO 48248
// height := hex [ 2 ] ;
47807: LD_ADDR_VAR 0 13
47811: PUSH
47812: LD_VAR 0 15
47816: PUSH
47817: LD_INT 2
47819: ARRAY
47820: ST_TO_ADDR
// for i = 1 to hexes do
47821: LD_ADDR_VAR 0 7
47825: PUSH
47826: DOUBLE
47827: LD_INT 1
47829: DEC
47830: ST_TO_ADDR
47831: LD_VAR 0 12
47835: PUSH
47836: FOR_TO
47837: IFFALSE 48167
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47839: LD_VAR 0 12
47843: PUSH
47844: LD_VAR 0 7
47848: ARRAY
47849: PUSH
47850: LD_INT 1
47852: ARRAY
47853: PPUSH
47854: LD_VAR 0 12
47858: PUSH
47859: LD_VAR 0 7
47863: ARRAY
47864: PUSH
47865: LD_INT 2
47867: ARRAY
47868: PPUSH
47869: CALL_OW 488
47873: NOT
47874: PUSH
47875: LD_VAR 0 12
47879: PUSH
47880: LD_VAR 0 7
47884: ARRAY
47885: PUSH
47886: LD_INT 1
47888: ARRAY
47889: PPUSH
47890: LD_VAR 0 12
47894: PUSH
47895: LD_VAR 0 7
47899: ARRAY
47900: PUSH
47901: LD_INT 2
47903: ARRAY
47904: PPUSH
47905: CALL_OW 428
47909: PUSH
47910: LD_INT 0
47912: GREATER
47913: OR
47914: PUSH
47915: LD_VAR 0 12
47919: PUSH
47920: LD_VAR 0 7
47924: ARRAY
47925: PUSH
47926: LD_INT 1
47928: ARRAY
47929: PPUSH
47930: LD_VAR 0 12
47934: PUSH
47935: LD_VAR 0 7
47939: ARRAY
47940: PUSH
47941: LD_INT 2
47943: ARRAY
47944: PPUSH
47945: CALL_OW 351
47949: OR
47950: IFFALSE 47956
// exit ;
47952: POP
47953: POP
47954: GO 48248
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47956: LD_ADDR_VAR 0 8
47960: PUSH
47961: LD_VAR 0 12
47965: PUSH
47966: LD_VAR 0 7
47970: ARRAY
47971: PUSH
47972: LD_INT 1
47974: ARRAY
47975: PPUSH
47976: LD_VAR 0 12
47980: PUSH
47981: LD_VAR 0 7
47985: ARRAY
47986: PUSH
47987: LD_INT 2
47989: ARRAY
47990: PPUSH
47991: CALL_OW 546
47995: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47996: LD_VAR 0 8
48000: PUSH
48001: LD_INT 1
48003: ARRAY
48004: PUSH
48005: LD_VAR 0 8
48009: PUSH
48010: LD_INT 2
48012: ARRAY
48013: PUSH
48014: LD_VAR 0 13
48018: PUSH
48019: LD_INT 2
48021: PLUS
48022: GREATER
48023: OR
48024: PUSH
48025: LD_VAR 0 8
48029: PUSH
48030: LD_INT 2
48032: ARRAY
48033: PUSH
48034: LD_VAR 0 13
48038: PUSH
48039: LD_INT 2
48041: MINUS
48042: LESS
48043: OR
48044: PUSH
48045: LD_VAR 0 8
48049: PUSH
48050: LD_INT 3
48052: ARRAY
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 8
48059: PUSH
48060: LD_INT 9
48062: PUSH
48063: LD_INT 10
48065: PUSH
48066: LD_INT 11
48068: PUSH
48069: LD_INT 12
48071: PUSH
48072: LD_INT 13
48074: PUSH
48075: LD_INT 16
48077: PUSH
48078: LD_INT 17
48080: PUSH
48081: LD_INT 18
48083: PUSH
48084: LD_INT 19
48086: PUSH
48087: LD_INT 20
48089: PUSH
48090: LD_INT 21
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: IN
48108: NOT
48109: OR
48110: PUSH
48111: LD_VAR 0 8
48115: PUSH
48116: LD_INT 5
48118: ARRAY
48119: NOT
48120: OR
48121: PUSH
48122: LD_VAR 0 8
48126: PUSH
48127: LD_INT 6
48129: ARRAY
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: LD_INT 2
48136: PUSH
48137: LD_INT 7
48139: PUSH
48140: LD_INT 9
48142: PUSH
48143: LD_INT 10
48145: PUSH
48146: LD_INT 11
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: IN
48157: NOT
48158: OR
48159: IFFALSE 48165
// exit ;
48161: POP
48162: POP
48163: GO 48248
// end ;
48165: GO 47836
48167: POP
48168: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48169: LD_VAR 0 9
48173: PPUSH
48174: LD_VAR 0 3
48178: PPUSH
48179: LD_VAR 0 4
48183: PPUSH
48184: LD_INT 20
48186: PPUSH
48187: CALL 40194 0 4
48191: PUSH
48192: LD_INT 4
48194: ARRAY
48195: IFFALSE 48199
// exit ;
48197: GO 48248
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48199: LD_VAR 0 2
48203: PUSH
48204: LD_INT 29
48206: PUSH
48207: LD_INT 30
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: IN
48214: PUSH
48215: LD_VAR 0 3
48219: PPUSH
48220: LD_VAR 0 4
48224: PPUSH
48225: LD_VAR 0 9
48229: PPUSH
48230: CALL_OW 440
48234: NOT
48235: AND
48236: IFFALSE 48240
// exit ;
48238: GO 48248
// result := true ;
48240: LD_ADDR_VAR 0 6
48244: PUSH
48245: LD_INT 1
48247: ST_TO_ADDR
// end ;
48248: LD_VAR 0 6
48252: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48253: LD_INT 0
48255: PPUSH
48256: PPUSH
48257: PPUSH
48258: PPUSH
48259: PPUSH
48260: PPUSH
48261: PPUSH
48262: PPUSH
48263: PPUSH
48264: PPUSH
48265: PPUSH
48266: PPUSH
48267: PPUSH
48268: PPUSH
48269: PPUSH
48270: PPUSH
48271: PPUSH
48272: PPUSH
48273: PPUSH
48274: PPUSH
48275: PPUSH
48276: PPUSH
48277: PPUSH
48278: PPUSH
48279: PPUSH
48280: PPUSH
48281: PPUSH
48282: PPUSH
48283: PPUSH
48284: PPUSH
48285: PPUSH
48286: PPUSH
48287: PPUSH
48288: PPUSH
48289: PPUSH
48290: PPUSH
48291: PPUSH
48292: PPUSH
48293: PPUSH
48294: PPUSH
48295: PPUSH
48296: PPUSH
48297: PPUSH
48298: PPUSH
48299: PPUSH
48300: PPUSH
48301: PPUSH
48302: PPUSH
48303: PPUSH
48304: PPUSH
48305: PPUSH
48306: PPUSH
48307: PPUSH
48308: PPUSH
48309: PPUSH
48310: PPUSH
48311: PPUSH
48312: PPUSH
// result = [ ] ;
48313: LD_ADDR_VAR 0 7
48317: PUSH
48318: EMPTY
48319: ST_TO_ADDR
// temp_list = [ ] ;
48320: LD_ADDR_VAR 0 9
48324: PUSH
48325: EMPTY
48326: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48327: LD_VAR 0 4
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: LD_INT 2
48340: PUSH
48341: LD_INT 3
48343: PUSH
48344: LD_INT 4
48346: PUSH
48347: LD_INT 5
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: IN
48358: NOT
48359: PUSH
48360: LD_VAR 0 1
48364: PUSH
48365: LD_INT 0
48367: PUSH
48368: LD_INT 1
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: IN
48375: PUSH
48376: LD_VAR 0 5
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: LD_INT 2
48386: PUSH
48387: LD_INT 3
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: LIST
48394: IN
48395: NOT
48396: AND
48397: OR
48398: IFFALSE 48402
// exit ;
48400: GO 66793
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48402: LD_VAR 0 1
48406: PUSH
48407: LD_INT 6
48409: PUSH
48410: LD_INT 7
48412: PUSH
48413: LD_INT 8
48415: PUSH
48416: LD_INT 13
48418: PUSH
48419: LD_INT 12
48421: PUSH
48422: LD_INT 15
48424: PUSH
48425: LD_INT 11
48427: PUSH
48428: LD_INT 14
48430: PUSH
48431: LD_INT 10
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: IN
48445: IFFALSE 48455
// btype = b_lab ;
48447: LD_ADDR_VAR 0 1
48451: PUSH
48452: LD_INT 6
48454: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48455: LD_VAR 0 6
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: LIST
48473: IN
48474: NOT
48475: PUSH
48476: LD_VAR 0 1
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: LD_INT 1
48486: PUSH
48487: LD_INT 2
48489: PUSH
48490: LD_INT 3
48492: PUSH
48493: LD_INT 6
48495: PUSH
48496: LD_INT 36
48498: PUSH
48499: LD_INT 4
48501: PUSH
48502: LD_INT 5
48504: PUSH
48505: LD_INT 31
48507: PUSH
48508: LD_INT 32
48510: PUSH
48511: LD_INT 33
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: IN
48527: NOT
48528: PUSH
48529: LD_VAR 0 6
48533: PUSH
48534: LD_INT 1
48536: EQUAL
48537: AND
48538: OR
48539: PUSH
48540: LD_VAR 0 1
48544: PUSH
48545: LD_INT 2
48547: PUSH
48548: LD_INT 3
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: IN
48555: NOT
48556: PUSH
48557: LD_VAR 0 6
48561: PUSH
48562: LD_INT 2
48564: EQUAL
48565: AND
48566: OR
48567: IFFALSE 48577
// mode = 0 ;
48569: LD_ADDR_VAR 0 6
48573: PUSH
48574: LD_INT 0
48576: ST_TO_ADDR
// case mode of 0 :
48577: LD_VAR 0 6
48581: PUSH
48582: LD_INT 0
48584: DOUBLE
48585: EQUAL
48586: IFTRUE 48590
48588: GO 60043
48590: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48591: LD_ADDR_VAR 0 11
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: LD_INT 2
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: LD_INT 2
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: LD_INT 2
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: LD_INT 2
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: NEG
48727: PUSH
48728: LD_INT 1
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: LD_INT 3
48740: PUSH
48741: EMPTY
48742: LIST
48743: LIST
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: LD_INT 3
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: LD_INT 2
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48784: LD_ADDR_VAR 0 12
48788: PUSH
48789: LD_INT 0
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: LD_INT 1
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 0
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 1
48853: NEG
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: PUSH
48866: LD_INT 1
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 2
48876: PUSH
48877: LD_INT 0
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 2
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: LD_INT 1
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 2
48907: NEG
48908: PUSH
48909: LD_INT 0
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 2
48918: NEG
48919: PUSH
48920: LD_INT 1
48922: NEG
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 2
48930: NEG
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 3
48941: NEG
48942: PUSH
48943: LD_INT 0
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 3
48952: NEG
48953: PUSH
48954: LD_INT 1
48956: NEG
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48980: LD_ADDR_VAR 0 13
48984: PUSH
48985: LD_INT 0
48987: PUSH
48988: LD_INT 0
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: LD_INT 1
49000: NEG
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 1
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: LD_INT 1
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: NEG
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 1
49061: NEG
49062: PUSH
49063: LD_INT 2
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 2
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 2
49083: PUSH
49084: LD_INT 2
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 1
49093: PUSH
49094: LD_INT 2
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 2
49103: NEG
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 2
49115: NEG
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 2
49127: NEG
49128: PUSH
49129: LD_INT 3
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 3
49139: NEG
49140: PUSH
49141: LD_INT 2
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 3
49151: NEG
49152: PUSH
49153: LD_INT 3
49155: NEG
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49179: LD_ADDR_VAR 0 14
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: LD_INT 1
49199: NEG
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 1
49207: PUSH
49208: LD_INT 0
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: LD_INT 1
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 1
49248: NEG
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: LD_INT 2
49264: NEG
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 2
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: NEG
49326: PUSH
49327: LD_INT 3
49329: NEG
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: LD_INT 3
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: PUSH
49349: LD_INT 2
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49375: LD_ADDR_VAR 0 15
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PUSH
49401: LD_INT 1
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 1
49413: PUSH
49414: LD_INT 1
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: NEG
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: LD_INT 1
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 2
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 2
49498: NEG
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 2
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 3
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 3
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49568: LD_ADDR_VAR 0 16
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: LD_INT 0
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: LD_INT 0
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 0
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: LD_INT 0
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 2
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 2
49671: PUSH
49672: LD_INT 2
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: LD_INT 2
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 2
49691: NEG
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 2
49703: NEG
49704: PUSH
49705: LD_INT 2
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 3
49715: PUSH
49716: LD_INT 2
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 3
49725: PUSH
49726: LD_INT 3
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 2
49735: PUSH
49736: LD_INT 3
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49761: LD_ADDR_VAR 0 17
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: PUSH
49790: LD_INT 0
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: LD_INT 1
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 0
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: NEG
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: NEG
49843: PUSH
49844: LD_INT 2
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: LD_INT 2
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: LD_INT 0
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 2
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: PUSH
49897: LD_INT 2
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: LD_INT 2
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: LD_INT 2
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 1
49926: NEG
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 2
49937: NEG
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 2
49948: NEG
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 2
49960: NEG
49961: PUSH
49962: LD_INT 2
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49991: LD_ADDR_VAR 0 18
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 1
50019: PUSH
50020: LD_INT 0
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: LD_INT 1
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: LD_INT 2
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 1
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 2
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 2
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: LD_INT 2
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 2
50167: NEG
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: LD_INT 1
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: LD_INT 2
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50221: LD_ADDR_VAR 0 19
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 0
50238: PUSH
50239: LD_INT 1
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: LD_INT 0
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: NEG
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: LD_INT 2
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: LD_INT 2
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 2
50336: PUSH
50337: LD_INT 0
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 2
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 2
50356: PUSH
50357: LD_INT 2
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 2
50397: NEG
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 2
50420: NEG
50421: PUSH
50422: LD_INT 2
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50451: LD_ADDR_VAR 0 20
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 0
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: LD_INT 0
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: LD_INT 1
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 0
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: LD_INT 2
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 0
50544: PUSH
50545: LD_INT 2
50547: NEG
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 2
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 2
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 2
50586: PUSH
50587: LD_INT 2
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: LD_INT 2
50599: PUSH
50600: EMPTY
50601: LIST
50602: LIST
50603: PUSH
50604: LD_INT 0
50606: PUSH
50607: LD_INT 2
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: NEG
50617: PUSH
50618: LD_INT 1
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 2
50627: NEG
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: LD_INT 1
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 2
50650: NEG
50651: PUSH
50652: LD_INT 2
50654: NEG
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50681: LD_ADDR_VAR 0 21
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 0
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 1
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: PUSH
50720: LD_INT 1
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 0
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 1
50739: NEG
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: LD_INT 2
50766: NEG
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 2
50777: NEG
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 2
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 2
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 2
50816: PUSH
50817: LD_INT 2
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: PUSH
50827: LD_INT 2
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PUSH
50834: LD_INT 0
50836: PUSH
50837: LD_INT 2
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 2
50857: NEG
50858: PUSH
50859: LD_INT 0
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: NEG
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 2
50880: NEG
50881: PUSH
50882: LD_INT 2
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50911: LD_ADDR_VAR 0 22
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: LD_INT 1
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 1
50969: NEG
50970: PUSH
50971: LD_INT 0
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: LD_INT 1
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: LD_INT 2
50996: NEG
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: PUSH
51016: LD_INT 1
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 2
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 2
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 2
51046: PUSH
51047: LD_INT 2
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: LD_INT 2
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 0
51066: PUSH
51067: LD_INT 2
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 2
51087: NEG
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 2
51098: NEG
51099: PUSH
51100: LD_INT 1
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 2
51110: NEG
51111: PUSH
51112: LD_INT 2
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: LIST
51126: LIST
51127: LIST
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51141: LD_ADDR_VAR 0 23
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: NEG
51223: PUSH
51224: LD_INT 2
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: LD_INT 2
51237: NEG
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 2
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 2
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 2
51276: PUSH
51277: LD_INT 2
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: LD_INT 2
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: LD_INT 2
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: LD_INT 1
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 2
51317: NEG
51318: PUSH
51319: LD_INT 0
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 2
51328: NEG
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 2
51340: NEG
51341: PUSH
51342: LD_INT 2
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 2
51352: NEG
51353: PUSH
51354: LD_INT 3
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: LD_INT 3
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: LD_INT 2
51379: NEG
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 2
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51421: LD_ADDR_VAR 0 24
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: LD_INT 1
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: LD_INT 2
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: LD_INT 2
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 2
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 2
51546: PUSH
51547: LD_INT 1
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 2
51556: PUSH
51557: LD_INT 2
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 1
51566: PUSH
51567: LD_INT 2
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 0
51576: PUSH
51577: LD_INT 2
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 2
51597: NEG
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 2
51608: NEG
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 2
51620: NEG
51621: PUSH
51622: LD_INT 2
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: LD_INT 2
51635: NEG
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 2
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 3
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: EMPTY
51659: LIST
51660: LIST
51661: PUSH
51662: LD_INT 3
51664: PUSH
51665: LD_INT 2
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: LIST
51680: LIST
51681: LIST
51682: LIST
51683: LIST
51684: LIST
51685: LIST
51686: LIST
51687: LIST
51688: LIST
51689: LIST
51690: LIST
51691: LIST
51692: LIST
51693: LIST
51694: LIST
51695: LIST
51696: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51697: LD_ADDR_VAR 0 25
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 0
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: EMPTY
51761: LIST
51762: LIST
51763: PUSH
51764: LD_INT 1
51766: NEG
51767: PUSH
51768: LD_INT 1
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: LD_INT 2
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 2
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 2
51822: PUSH
51823: LD_INT 1
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: LD_INT 2
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: LD_INT 1
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 2
51873: NEG
51874: PUSH
51875: LD_INT 0
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 2
51884: NEG
51885: PUSH
51886: LD_INT 1
51888: NEG
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 2
51896: NEG
51897: PUSH
51898: LD_INT 2
51900: NEG
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 3
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 3
51918: PUSH
51919: LD_INT 2
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: LD_INT 3
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: PUSH
51939: LD_INT 3
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51971: LD_ADDR_VAR 0 26
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: PUSH
52010: LD_INT 1
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: LD_INT 1
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 1
52052: NEG
52053: PUSH
52054: LD_INT 2
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: LD_INT 2
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 2
52096: PUSH
52097: LD_INT 1
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 2
52106: PUSH
52107: LD_INT 2
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: LD_INT 2
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: LD_INT 2
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 2
52147: NEG
52148: PUSH
52149: LD_INT 0
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: NEG
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 2
52170: NEG
52171: PUSH
52172: LD_INT 2
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 2
52182: PUSH
52183: LD_INT 3
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 1
52192: PUSH
52193: LD_INT 3
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: LD_INT 2
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 2
52213: NEG
52214: PUSH
52215: LD_INT 1
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: LIST
52233: LIST
52234: LIST
52235: LIST
52236: LIST
52237: LIST
52238: LIST
52239: LIST
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52247: LD_ADDR_VAR 0 27
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: LD_INT 0
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: LD_INT 1
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 1
52275: PUSH
52276: LD_INT 0
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: LD_INT 1
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: LD_INT 1
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: LD_INT 0
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: LD_INT 2
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: LD_INT 2
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 2
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 2
52372: PUSH
52373: LD_INT 1
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 2
52382: PUSH
52383: LD_INT 2
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: LD_INT 2
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: LD_INT 2
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 2
52423: NEG
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 2
52434: NEG
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 2
52446: NEG
52447: PUSH
52448: LD_INT 2
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: NEG
52459: PUSH
52460: LD_INT 2
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 2
52469: NEG
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 3
52480: NEG
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 3
52492: NEG
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52527: LD_ADDR_VAR 0 28
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: LD_INT 0
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: LD_INT 1
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: LD_INT 1
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 1
52585: NEG
52586: PUSH
52587: LD_INT 0
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 0
52620: PUSH
52621: LD_INT 2
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 2
52642: PUSH
52643: LD_INT 0
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 2
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 2
52662: PUSH
52663: LD_INT 2
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: LD_INT 2
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: LD_INT 2
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 2
52703: NEG
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 2
52714: NEG
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 2
52726: NEG
52727: PUSH
52728: LD_INT 2
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 2
52738: NEG
52739: PUSH
52740: LD_INT 3
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: LD_INT 3
52754: NEG
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 3
52762: NEG
52763: PUSH
52764: LD_INT 1
52766: NEG
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 3
52774: NEG
52775: PUSH
52776: LD_INT 2
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52809: LD_ADDR_VAR 0 29
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: LD_INT 0
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 1
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: LD_INT 1
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: LD_INT 2
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: LD_INT 2
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 1
52913: PUSH
52914: LD_INT 1
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 2
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 2
52934: PUSH
52935: LD_INT 1
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: LD_INT 2
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 0
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 2
52975: NEG
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: NEG
52988: PUSH
52989: LD_INT 2
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: LD_INT 3
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 2
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 3
53022: PUSH
53023: LD_INT 1
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: LD_INT 3
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: LD_INT 2
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 3
53053: NEG
53054: PUSH
53055: LD_INT 2
53057: NEG
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53088: LD_ADDR_VAR 0 30
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: LD_INT 2
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 0
53181: PUSH
53182: LD_INT 2
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 2
53203: PUSH
53204: LD_INT 0
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 2
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 2
53223: PUSH
53224: LD_INT 2
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: LD_INT 2
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 2
53254: NEG
53255: PUSH
53256: LD_INT 0
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: NEG
53266: PUSH
53267: LD_INT 1
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: LD_INT 3
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 1
53289: PUSH
53290: LD_INT 2
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 3
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 2
53310: PUSH
53311: LD_INT 3
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 2
53320: NEG
53321: PUSH
53322: LD_INT 1
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 3
53331: NEG
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53366: LD_ADDR_VAR 0 31
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 0
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: LD_INT 1
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 1
53424: NEG
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: LD_INT 1
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: LD_INT 2
53451: NEG
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 1
53459: PUSH
53460: LD_INT 1
53462: NEG
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 2
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 2
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 2
53490: PUSH
53491: LD_INT 2
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: LD_INT 2
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 0
53510: PUSH
53511: LD_INT 2
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 2
53531: NEG
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 2
53543: NEG
53544: PUSH
53545: LD_INT 2
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 2
53555: NEG
53556: PUSH
53557: LD_INT 3
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 2
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 3
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: LD_INT 3
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 1
53598: NEG
53599: PUSH
53600: LD_INT 2
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 3
53609: NEG
53610: PUSH
53611: LD_INT 2
53613: NEG
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: LIST
53623: LIST
53624: LIST
53625: LIST
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53644: LD_ADDR_VAR 0 32
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: LD_INT 0
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: LD_INT 1
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 0
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: NEG
53703: PUSH
53704: LD_INT 0
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: LD_INT 2
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: LD_INT 2
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 1
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 2
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 2
53769: PUSH
53770: LD_INT 2
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: PUSH
53780: LD_INT 2
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 0
53789: PUSH
53790: LD_INT 2
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: LD_INT 1
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 2
53810: NEG
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 2
53821: NEG
53822: PUSH
53823: LD_INT 1
53825: NEG
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: LD_INT 3
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 1
53845: PUSH
53846: LD_INT 2
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 3
53856: PUSH
53857: LD_INT 2
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 2
53866: PUSH
53867: LD_INT 3
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 2
53876: NEG
53877: PUSH
53878: LD_INT 1
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 3
53887: NEG
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53922: LD_ADDR_VAR 0 33
53926: PUSH
53927: LD_INT 0
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 0
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: LD_INT 0
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: LD_INT 1
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 1
53980: NEG
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: LD_INT 1
53995: NEG
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: LD_INT 2
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 2
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: LD_INT 2
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 0
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 2
54077: NEG
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 2
54088: NEG
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 2
54100: NEG
54101: PUSH
54102: LD_INT 2
54104: NEG
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 2
54112: NEG
54113: PUSH
54114: LD_INT 3
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 2
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 3
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 1
54145: PUSH
54146: LD_INT 3
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: NEG
54156: PUSH
54157: LD_INT 2
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 3
54166: NEG
54167: PUSH
54168: LD_INT 2
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54201: LD_ADDR_VAR 0 34
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: LD_INT 1
54221: NEG
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: LD_INT 0
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: LD_INT 0
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: NEG
54271: PUSH
54272: LD_INT 1
54274: NEG
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: LD_INT 2
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: LD_INT 2
54297: NEG
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 2
54316: PUSH
54317: LD_INT 1
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 2
54326: PUSH
54327: LD_INT 2
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: LD_INT 2
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 2
54357: NEG
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 2
54368: NEG
54369: PUSH
54370: LD_INT 1
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 2
54380: NEG
54381: PUSH
54382: LD_INT 2
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: LD_INT 3
54396: NEG
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: PUSH
54405: LD_INT 2
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 3
54415: PUSH
54416: LD_INT 2
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 2
54425: PUSH
54426: LD_INT 3
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 2
54435: NEG
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 3
54446: NEG
54447: PUSH
54448: LD_INT 1
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54481: LD_ADDR_VAR 0 35
54485: PUSH
54486: LD_INT 0
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 0
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: NEG
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 1
54550: NEG
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 2
54562: PUSH
54563: LD_INT 1
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 2
54572: NEG
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54593: LD_ADDR_VAR 0 36
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: PUSH
54622: LD_INT 0
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: LD_INT 0
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 1
54662: NEG
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: LD_INT 2
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: LD_INT 2
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54705: LD_ADDR_VAR 0 37
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: LD_INT 1
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: LD_INT 0
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: LD_INT 0
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: PUSH
54787: LD_INT 1
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: LD_INT 1
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54817: LD_ADDR_VAR 0 38
54821: PUSH
54822: LD_INT 0
54824: PUSH
54825: LD_INT 0
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 1
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 0
54865: PUSH
54866: LD_INT 1
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: EMPTY
54893: LIST
54894: LIST
54895: PUSH
54896: LD_INT 2
54898: PUSH
54899: LD_INT 1
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: NEG
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54929: LD_ADDR_VAR 0 39
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: LD_INT 1
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 1
54967: PUSH
54968: LD_INT 1
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 0
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: LD_INT 2
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55041: LD_ADDR_VAR 0 40
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 1
55069: PUSH
55070: LD_INT 0
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: LD_INT 1
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55153: LD_ADDR_VAR 0 41
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: LD_INT 0
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: PUSH
55192: LD_INT 1
55194: PUSH
55195: EMPTY
55196: LIST
55197: LIST
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: LD_INT 1
55204: PUSH
55205: EMPTY
55206: LIST
55207: LIST
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: LD_INT 2
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: PUSH
55255: LD_INT 2
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 2
55267: PUSH
55268: LD_INT 1
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: LD_INT 2
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: LD_INT 2
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: LD_INT 1
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 2
55308: NEG
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 2
55319: NEG
55320: PUSH
55321: LD_INT 1
55323: NEG
55324: PUSH
55325: EMPTY
55326: LIST
55327: LIST
55328: PUSH
55329: LD_INT 2
55331: NEG
55332: PUSH
55333: LD_INT 2
55335: NEG
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: LD_INT 3
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 3
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 3
55376: PUSH
55377: LD_INT 1
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 3
55386: PUSH
55387: LD_INT 2
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 3
55396: PUSH
55397: LD_INT 3
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 2
55406: PUSH
55407: LD_INT 3
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 2
55416: NEG
55417: PUSH
55418: LD_INT 1
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 3
55427: NEG
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 3
55438: NEG
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 3
55450: NEG
55451: PUSH
55452: LD_INT 2
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 3
55462: NEG
55463: PUSH
55464: LD_INT 3
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55503: LD_ADDR_VAR 0 42
55507: PUSH
55508: LD_INT 0
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 0
55520: PUSH
55521: LD_INT 1
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 1
55541: PUSH
55542: LD_INT 1
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 1
55561: NEG
55562: PUSH
55563: LD_INT 0
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 1
55572: NEG
55573: PUSH
55574: LD_INT 1
55576: NEG
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: LD_INT 2
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: LD_INT 2
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: LD_INT 1
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 2
55618: PUSH
55619: LD_INT 1
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 2
55628: PUSH
55629: LD_INT 2
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: PUSH
55639: LD_INT 2
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 0
55648: PUSH
55649: LD_INT 2
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: NEG
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 2
55669: NEG
55670: PUSH
55671: LD_INT 1
55673: NEG
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: NEG
55682: PUSH
55683: LD_INT 2
55685: NEG
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 2
55693: NEG
55694: PUSH
55695: LD_INT 3
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: NEG
55706: PUSH
55707: LD_INT 3
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 3
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: PUSH
55729: LD_INT 2
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 3
55739: PUSH
55740: LD_INT 2
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 3
55749: PUSH
55750: LD_INT 3
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 2
55759: PUSH
55760: LD_INT 3
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: PUSH
55770: LD_INT 3
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: LD_INT 3
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: LD_INT 2
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 3
55800: NEG
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 3
55812: NEG
55813: PUSH
55814: LD_INT 3
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55853: LD_ADDR_VAR 0 43
55857: PUSH
55858: LD_INT 0
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: LD_INT 1
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: PUSH
55889: LD_INT 1
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: LD_INT 1
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: NEG
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: LD_INT 2
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: LD_INT 2
55949: NEG
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 2
55968: PUSH
55969: LD_INT 0
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 2
55978: PUSH
55979: LD_INT 1
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: PUSH
55989: LD_INT 2
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 0
55998: PUSH
55999: LD_INT 2
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: NEG
56009: PUSH
56010: LD_INT 1
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 2
56019: NEG
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 2
56030: NEG
56031: PUSH
56032: LD_INT 1
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: NEG
56043: PUSH
56044: LD_INT 3
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: LD_INT 3
56057: NEG
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: LD_INT 2
56068: NEG
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 2
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 3
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 3
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: LD_INT 3
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: LD_INT 3
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: LD_INT 2
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 2
56138: NEG
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 3
56149: NEG
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 3
56160: NEG
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: LIST
56200: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56201: LD_ADDR_VAR 0 44
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 0
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: LD_INT 0
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: LD_INT 1
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: NEG
56271: PUSH
56272: LD_INT 1
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 1
56282: NEG
56283: PUSH
56284: LD_INT 2
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: EMPTY
56300: LIST
56301: LIST
56302: PUSH
56303: LD_INT 2
56305: PUSH
56306: LD_INT 0
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 2
56315: PUSH
56316: LD_INT 1
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 2
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 1
56335: PUSH
56336: LD_INT 2
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: NEG
56346: PUSH
56347: LD_INT 1
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 2
56356: NEG
56357: PUSH
56358: LD_INT 0
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 2
56367: NEG
56368: PUSH
56369: LD_INT 1
56371: NEG
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 2
56379: NEG
56380: PUSH
56381: LD_INT 2
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 2
56391: NEG
56392: PUSH
56393: LD_INT 3
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 2
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 3
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 3
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 3
56434: PUSH
56435: LD_INT 2
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 3
56444: PUSH
56445: LD_INT 3
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 2
56454: PUSH
56455: LD_INT 3
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 2
56464: NEG
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 3
56475: NEG
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 3
56486: NEG
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 3
56498: NEG
56499: PUSH
56500: LD_INT 2
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 3
56510: NEG
56511: PUSH
56512: LD_INT 3
56514: NEG
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56551: LD_ADDR_VAR 0 45
56555: PUSH
56556: LD_INT 0
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: LD_INT 1
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: LD_INT 0
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: LD_INT 1
56624: NEG
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: LD_INT 2
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: LD_INT 2
56647: NEG
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 1
56655: PUSH
56656: LD_INT 1
56658: NEG
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 2
56666: PUSH
56667: LD_INT 1
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 2
56676: PUSH
56677: LD_INT 2
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 1
56686: PUSH
56687: LD_INT 2
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 0
56696: PUSH
56697: LD_INT 2
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 2
56717: NEG
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 2
56729: NEG
56730: PUSH
56731: LD_INT 2
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 2
56741: NEG
56742: PUSH
56743: LD_INT 3
56745: NEG
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: LD_INT 3
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: LD_INT 3
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 1
56776: PUSH
56777: LD_INT 2
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 3
56787: PUSH
56788: LD_INT 2
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 3
56797: PUSH
56798: LD_INT 3
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 2
56807: PUSH
56808: LD_INT 3
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: PUSH
56818: LD_INT 3
56820: PUSH
56821: EMPTY
56822: LIST
56823: LIST
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: LD_INT 3
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: LD_INT 2
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 3
56848: NEG
56849: PUSH
56850: LD_INT 2
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 3
56860: NEG
56861: PUSH
56862: LD_INT 3
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56901: LD_ADDR_VAR 0 46
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 0
56918: PUSH
56919: LD_INT 1
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: LD_INT 0
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 1
56959: NEG
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: LD_INT 2
56986: NEG
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 0
56994: PUSH
56995: LD_INT 2
56997: NEG
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 2
57016: PUSH
57017: LD_INT 0
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 2
57026: PUSH
57027: LD_INT 1
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: LD_INT 2
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: LD_INT 1
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 2
57067: NEG
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 2
57078: NEG
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: NEG
57091: PUSH
57092: LD_INT 3
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: LD_INT 3
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: LD_INT 2
57116: NEG
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 2
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 3
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 3
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 1
57155: PUSH
57156: LD_INT 3
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 0
57165: PUSH
57166: LD_INT 3
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 1
57175: NEG
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 2
57186: NEG
57187: PUSH
57188: LD_INT 1
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 3
57197: NEG
57198: PUSH
57199: LD_INT 0
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 3
57208: NEG
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57249: LD_ADDR_VAR 0 47
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: LD_INT 0
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 0
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 1
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: LD_INT 1
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 1
57307: NEG
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: NEG
57319: PUSH
57320: LD_INT 1
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: NEG
57331: PUSH
57332: LD_INT 2
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: LD_INT 2
57345: NEG
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 2
57364: NEG
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 2
57376: NEG
57377: PUSH
57378: LD_INT 2
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57400: LD_ADDR_VAR 0 48
57404: PUSH
57405: LD_INT 0
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 0
57417: PUSH
57418: LD_INT 1
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 1
57438: PUSH
57439: LD_INT 1
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 0
57448: PUSH
57449: LD_INT 1
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 1
57458: NEG
57459: PUSH
57460: LD_INT 0
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: LD_INT 1
57473: NEG
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 0
57493: PUSH
57494: LD_INT 2
57496: NEG
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 1
57504: PUSH
57505: LD_INT 1
57507: NEG
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 2
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 2
57525: PUSH
57526: LD_INT 1
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57547: LD_ADDR_VAR 0 49
57551: PUSH
57552: LD_INT 0
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: LD_INT 1
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 0
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 1
57605: NEG
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: LD_INT 1
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 1
57628: PUSH
57629: LD_INT 1
57631: NEG
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 2
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: EMPTY
57644: LIST
57645: LIST
57646: PUSH
57647: LD_INT 2
57649: PUSH
57650: LD_INT 1
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: LD_INT 2
57659: PUSH
57660: LD_INT 2
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 1
57669: PUSH
57670: LD_INT 2
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57691: LD_ADDR_VAR 0 50
57695: PUSH
57696: LD_INT 0
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: LD_INT 1
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 1
57760: NEG
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 2
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 2
57782: PUSH
57783: LD_INT 2
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 1
57792: PUSH
57793: LD_INT 2
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: LD_INT 2
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 1
57812: NEG
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57835: LD_ADDR_VAR 0 51
57839: PUSH
57840: LD_INT 0
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: LD_INT 1
57855: NEG
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 1
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: LD_INT 1
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 1
57893: NEG
57894: PUSH
57895: LD_INT 0
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 1
57904: NEG
57905: PUSH
57906: LD_INT 1
57908: NEG
57909: PUSH
57910: EMPTY
57911: LIST
57912: LIST
57913: PUSH
57914: LD_INT 1
57916: PUSH
57917: LD_INT 2
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: LD_INT 2
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 1
57936: NEG
57937: PUSH
57938: LD_INT 1
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 2
57947: NEG
57948: PUSH
57949: LD_INT 0
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 2
57958: NEG
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57982: LD_ADDR_VAR 0 52
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: EMPTY
57994: LIST
57995: LIST
57996: PUSH
57997: LD_INT 0
57999: PUSH
58000: LD_INT 1
58002: NEG
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: LD_INT 1
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: PUSH
58038: LD_INT 1
58040: NEG
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 1
58051: NEG
58052: PUSH
58053: LD_INT 1
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: PUSH
58065: LD_INT 2
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 2
58086: NEG
58087: PUSH
58088: LD_INT 0
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 2
58097: NEG
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 2
58109: NEG
58110: PUSH
58111: LD_INT 2
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58133: LD_ADDR_VAR 0 53
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: LD_INT 0
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 1
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: LD_INT 0
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: LD_INT 1
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: LD_INT 1
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: NEG
58203: PUSH
58204: LD_INT 1
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: NEG
58215: PUSH
58216: LD_INT 2
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: LD_INT 2
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 1
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 2
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 2
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 2
58268: PUSH
58269: LD_INT 2
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: LD_INT 2
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: LD_INT 2
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: LD_INT 1
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 2
58309: NEG
58310: PUSH
58311: LD_INT 0
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: NEG
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 2
58332: NEG
58333: PUSH
58334: LD_INT 2
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58363: LD_ADDR_VAR 0 54
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 0
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: LD_INT 0
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 0
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 1
58444: NEG
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: LD_INT 2
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 1
58467: PUSH
58468: LD_INT 1
58470: NEG
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 2
58478: PUSH
58479: LD_INT 0
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 2
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 2
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: LD_INT 2
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 0
58518: PUSH
58519: LD_INT 2
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 1
58528: NEG
58529: PUSH
58530: LD_INT 1
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 2
58539: NEG
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 2
58550: NEG
58551: PUSH
58552: LD_INT 1
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 2
58562: NEG
58563: PUSH
58564: LD_INT 2
58566: NEG
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58593: LD_ADDR_VAR 0 55
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 1
58621: PUSH
58622: LD_INT 0
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 0
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: LD_INT 0
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: LD_INT 1
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: LD_INT 2
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: LD_INT 2
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 2
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 2
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 2
58728: PUSH
58729: LD_INT 2
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: LD_INT 2
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: LD_INT 2
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: LD_INT 1
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 2
58769: NEG
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: NEG
58781: PUSH
58782: LD_INT 1
58784: NEG
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: NEG
58793: PUSH
58794: LD_INT 2
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58823: LD_ADDR_VAR 0 56
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: LD_INT 1
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 1
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: LD_INT 1
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: LD_INT 0
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: LD_INT 1
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: LD_INT 2
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 0
58916: PUSH
58917: LD_INT 2
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 2
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 2
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 2
58958: PUSH
58959: LD_INT 2
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 1
58968: PUSH
58969: LD_INT 2
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 0
58978: PUSH
58979: LD_INT 2
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 1
58988: NEG
58989: PUSH
58990: LD_INT 1
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: LD_INT 2
58999: NEG
59000: PUSH
59001: LD_INT 0
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 2
59010: NEG
59011: PUSH
59012: LD_INT 1
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: LD_INT 2
59022: NEG
59023: PUSH
59024: LD_INT 2
59026: NEG
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59053: LD_ADDR_VAR 0 57
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: LD_INT 0
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 0
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 1
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 0
59101: PUSH
59102: LD_INT 1
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 1
59111: NEG
59112: PUSH
59113: LD_INT 0
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 1
59122: NEG
59123: PUSH
59124: LD_INT 1
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 1
59134: NEG
59135: PUSH
59136: LD_INT 2
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 0
59146: PUSH
59147: LD_INT 2
59149: NEG
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: LD_INT 1
59160: NEG
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 2
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 2
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 2
59188: PUSH
59189: LD_INT 2
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 1
59198: PUSH
59199: LD_INT 2
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 0
59208: PUSH
59209: LD_INT 2
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 1
59218: NEG
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 2
59229: NEG
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: LD_INT 1
59244: NEG
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 2
59252: NEG
59253: PUSH
59254: LD_INT 2
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59283: LD_ADDR_VAR 0 58
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: LD_INT 1
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 1
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: LD_INT 0
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: LD_INT 2
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: LD_INT 2
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: LD_INT 1
59390: NEG
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 2
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 2
59408: PUSH
59409: LD_INT 1
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 2
59418: PUSH
59419: LD_INT 2
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: LD_INT 2
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: LD_INT 2
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 2
59459: NEG
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 2
59470: NEG
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 2
59482: NEG
59483: PUSH
59484: LD_INT 2
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59513: LD_ADDR_VAR 0 59
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 1
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 1
59582: NEG
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: LIST
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59601: LD_ADDR_VAR 0 60
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: LD_INT 0
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: LD_INT 1
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 1
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 1
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: LD_INT 1
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 1
59659: NEG
59660: PUSH
59661: LD_INT 0
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 1
59670: NEG
59671: PUSH
59672: LD_INT 1
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59689: LD_ADDR_VAR 0 61
59693: PUSH
59694: LD_INT 0
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 0
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 1
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 1
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: LD_INT 1
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 1
59747: NEG
59748: PUSH
59749: LD_INT 0
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 1
59758: NEG
59759: PUSH
59760: LD_INT 1
59762: NEG
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59777: LD_ADDR_VAR 0 62
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 0
59794: PUSH
59795: LD_INT 1
59797: NEG
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: LD_INT 0
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 1
59815: PUSH
59816: LD_INT 1
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 0
59825: PUSH
59826: LD_INT 1
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 1
59835: NEG
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 1
59846: NEG
59847: PUSH
59848: LD_INT 1
59850: NEG
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59865: LD_ADDR_VAR 0 63
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 0
59882: PUSH
59883: LD_INT 1
59885: NEG
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 0
59913: PUSH
59914: LD_INT 1
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: PUSH
59921: LD_INT 1
59923: NEG
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 1
59934: NEG
59935: PUSH
59936: LD_INT 1
59938: NEG
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59953: LD_ADDR_VAR 0 64
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: LD_INT 0
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 0
59970: PUSH
59971: LD_INT 1
59973: NEG
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 1
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 1
59991: PUSH
59992: LD_INT 1
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 0
60001: PUSH
60002: LD_INT 1
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: PUSH
60009: LD_INT 1
60011: NEG
60012: PUSH
60013: LD_INT 0
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 1
60022: NEG
60023: PUSH
60024: LD_INT 1
60026: NEG
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: ST_TO_ADDR
// end ; 1 :
60041: GO 65938
60043: LD_INT 1
60045: DOUBLE
60046: EQUAL
60047: IFTRUE 60051
60049: GO 62674
60051: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60052: LD_ADDR_VAR 0 11
60056: PUSH
60057: LD_INT 1
60059: NEG
60060: PUSH
60061: LD_INT 3
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: LD_INT 3
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 1
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: LIST
60095: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60096: LD_ADDR_VAR 0 12
60100: PUSH
60101: LD_INT 2
60103: PUSH
60104: LD_INT 1
60106: NEG
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 3
60114: PUSH
60115: LD_INT 0
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 3
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: LIST
60136: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60137: LD_ADDR_VAR 0 13
60141: PUSH
60142: LD_INT 3
60144: PUSH
60145: LD_INT 2
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 3
60154: PUSH
60155: LD_INT 3
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 2
60164: PUSH
60165: LD_INT 3
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: LIST
60176: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60177: LD_ADDR_VAR 0 14
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: LD_INT 3
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 0
60194: PUSH
60195: LD_INT 3
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 1
60204: NEG
60205: PUSH
60206: LD_INT 2
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: LIST
60217: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60218: LD_ADDR_VAR 0 15
60222: PUSH
60223: LD_INT 2
60225: NEG
60226: PUSH
60227: LD_INT 1
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 3
60236: NEG
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 3
60247: NEG
60248: PUSH
60249: LD_INT 1
60251: NEG
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: LIST
60261: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60262: LD_ADDR_VAR 0 16
60266: PUSH
60267: LD_INT 2
60269: NEG
60270: PUSH
60271: LD_INT 3
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 3
60281: NEG
60282: PUSH
60283: LD_INT 2
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 3
60293: NEG
60294: PUSH
60295: LD_INT 3
60297: NEG
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: LIST
60307: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60308: LD_ADDR_VAR 0 17
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: LD_INT 3
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: LD_INT 3
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 1
60338: PUSH
60339: LD_INT 2
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: LIST
60351: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60352: LD_ADDR_VAR 0 18
60356: PUSH
60357: LD_INT 2
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 3
60370: PUSH
60371: LD_INT 0
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: PUSH
60378: LD_INT 3
60380: PUSH
60381: LD_INT 1
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: LIST
60392: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60393: LD_ADDR_VAR 0 19
60397: PUSH
60398: LD_INT 3
60400: PUSH
60401: LD_INT 2
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 3
60410: PUSH
60411: LD_INT 3
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 2
60420: PUSH
60421: LD_INT 3
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: LIST
60432: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60433: LD_ADDR_VAR 0 20
60437: PUSH
60438: LD_INT 1
60440: PUSH
60441: LD_INT 3
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: LD_INT 3
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 1
60460: NEG
60461: PUSH
60462: LD_INT 2
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: LIST
60473: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60474: LD_ADDR_VAR 0 21
60478: PUSH
60479: LD_INT 2
60481: NEG
60482: PUSH
60483: LD_INT 1
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 3
60492: NEG
60493: PUSH
60494: LD_INT 0
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 3
60503: NEG
60504: PUSH
60505: LD_INT 1
60507: NEG
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: LIST
60517: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60518: LD_ADDR_VAR 0 22
60522: PUSH
60523: LD_INT 2
60525: NEG
60526: PUSH
60527: LD_INT 3
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 3
60537: NEG
60538: PUSH
60539: LD_INT 2
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 3
60549: NEG
60550: PUSH
60551: LD_INT 3
60553: NEG
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: LIST
60563: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60564: LD_ADDR_VAR 0 23
60568: PUSH
60569: LD_INT 0
60571: PUSH
60572: LD_INT 3
60574: NEG
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 1
60582: NEG
60583: PUSH
60584: LD_INT 4
60586: NEG
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: LD_INT 3
60597: NEG
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: LIST
60607: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60608: LD_ADDR_VAR 0 24
60612: PUSH
60613: LD_INT 3
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 3
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 4
60636: PUSH
60637: LD_INT 1
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: LIST
60648: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60649: LD_ADDR_VAR 0 25
60653: PUSH
60654: LD_INT 3
60656: PUSH
60657: LD_INT 3
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 4
60666: PUSH
60667: LD_INT 3
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 3
60676: PUSH
60677: LD_INT 4
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: EMPTY
60685: LIST
60686: LIST
60687: LIST
60688: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60689: LD_ADDR_VAR 0 26
60693: PUSH
60694: LD_INT 0
60696: PUSH
60697: LD_INT 3
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 1
60706: PUSH
60707: LD_INT 4
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 1
60716: NEG
60717: PUSH
60718: LD_INT 3
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: LIST
60729: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60730: LD_ADDR_VAR 0 27
60734: PUSH
60735: LD_INT 3
60737: NEG
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 3
60748: NEG
60749: PUSH
60750: LD_INT 1
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 4
60759: NEG
60760: PUSH
60761: LD_INT 1
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: LIST
60773: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60774: LD_ADDR_VAR 0 28
60778: PUSH
60779: LD_INT 3
60781: NEG
60782: PUSH
60783: LD_INT 3
60785: NEG
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 3
60793: NEG
60794: PUSH
60795: LD_INT 4
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 4
60805: NEG
60806: PUSH
60807: LD_INT 3
60809: NEG
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: LIST
60819: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60820: LD_ADDR_VAR 0 29
60824: PUSH
60825: LD_INT 1
60827: NEG
60828: PUSH
60829: LD_INT 3
60831: NEG
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: LD_INT 3
60842: NEG
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 1
60850: PUSH
60851: LD_INT 2
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 1
60861: NEG
60862: PUSH
60863: LD_INT 4
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 0
60873: PUSH
60874: LD_INT 4
60876: NEG
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 1
60884: PUSH
60885: LD_INT 3
60887: NEG
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 1
60895: NEG
60896: PUSH
60897: LD_INT 5
60899: NEG
60900: PUSH
60901: EMPTY
60902: LIST
60903: LIST
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: LD_INT 5
60910: NEG
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 1
60918: PUSH
60919: LD_INT 4
60921: NEG
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: LD_INT 6
60933: NEG
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: PUSH
60939: LD_INT 0
60941: PUSH
60942: LD_INT 6
60944: NEG
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: LD_INT 1
60952: PUSH
60953: LD_INT 5
60955: NEG
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60975: LD_ADDR_VAR 0 30
60979: PUSH
60980: LD_INT 2
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 3
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 3
61003: PUSH
61004: LD_INT 1
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 3
61013: PUSH
61014: LD_INT 1
61016: NEG
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 4
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 4
61034: PUSH
61035: LD_INT 1
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 4
61044: PUSH
61045: LD_INT 1
61047: NEG
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 5
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 5
61065: PUSH
61066: LD_INT 1
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 5
61075: PUSH
61076: LD_INT 1
61078: NEG
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 6
61086: PUSH
61087: LD_INT 0
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: PUSH
61094: LD_INT 6
61096: PUSH
61097: LD_INT 1
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61118: LD_ADDR_VAR 0 31
61122: PUSH
61123: LD_INT 3
61125: PUSH
61126: LD_INT 2
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 3
61135: PUSH
61136: LD_INT 3
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 2
61145: PUSH
61146: LD_INT 3
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 4
61155: PUSH
61156: LD_INT 3
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 4
61165: PUSH
61166: LD_INT 4
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 3
61175: PUSH
61176: LD_INT 4
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 5
61185: PUSH
61186: LD_INT 4
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 5
61195: PUSH
61196: LD_INT 5
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 4
61205: PUSH
61206: LD_INT 5
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 6
61215: PUSH
61216: LD_INT 5
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 6
61225: PUSH
61226: LD_INT 6
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 5
61235: PUSH
61236: LD_INT 6
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61257: LD_ADDR_VAR 0 32
61261: PUSH
61262: LD_INT 1
61264: PUSH
61265: LD_INT 3
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 0
61274: PUSH
61275: LD_INT 3
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: NEG
61285: PUSH
61286: LD_INT 2
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 1
61295: PUSH
61296: LD_INT 4
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 0
61305: PUSH
61306: LD_INT 4
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 1
61315: NEG
61316: PUSH
61317: LD_INT 3
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: LD_INT 5
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: LD_INT 5
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: PUSH
61348: LD_INT 4
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 1
61357: PUSH
61358: LD_INT 6
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: LD_INT 6
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: LD_INT 1
61377: NEG
61378: PUSH
61379: LD_INT 5
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: LIST
61390: LIST
61391: LIST
61392: LIST
61393: LIST
61394: LIST
61395: LIST
61396: LIST
61397: LIST
61398: LIST
61399: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61400: LD_ADDR_VAR 0 33
61404: PUSH
61405: LD_INT 2
61407: NEG
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 3
61418: NEG
61419: PUSH
61420: LD_INT 0
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 3
61429: NEG
61430: PUSH
61431: LD_INT 1
61433: NEG
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 3
61441: NEG
61442: PUSH
61443: LD_INT 1
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 4
61452: NEG
61453: PUSH
61454: LD_INT 0
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 4
61463: NEG
61464: PUSH
61465: LD_INT 1
61467: NEG
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: LD_INT 4
61475: NEG
61476: PUSH
61477: LD_INT 1
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 5
61486: NEG
61487: PUSH
61488: LD_INT 0
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 5
61497: NEG
61498: PUSH
61499: LD_INT 1
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 5
61509: NEG
61510: PUSH
61511: LD_INT 1
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 6
61520: NEG
61521: PUSH
61522: LD_INT 0
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 6
61531: NEG
61532: PUSH
61533: LD_INT 1
61535: NEG
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61555: LD_ADDR_VAR 0 34
61559: PUSH
61560: LD_INT 2
61562: NEG
61563: PUSH
61564: LD_INT 3
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 3
61574: NEG
61575: PUSH
61576: LD_INT 2
61578: NEG
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 3
61586: NEG
61587: PUSH
61588: LD_INT 3
61590: NEG
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 3
61598: NEG
61599: PUSH
61600: LD_INT 4
61602: NEG
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 4
61610: NEG
61611: PUSH
61612: LD_INT 3
61614: NEG
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 4
61622: NEG
61623: PUSH
61624: LD_INT 4
61626: NEG
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: PUSH
61632: LD_INT 4
61634: NEG
61635: PUSH
61636: LD_INT 5
61638: NEG
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 5
61646: NEG
61647: PUSH
61648: LD_INT 4
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 5
61658: NEG
61659: PUSH
61660: LD_INT 5
61662: NEG
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 5
61670: NEG
61671: PUSH
61672: LD_INT 6
61674: NEG
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 6
61682: NEG
61683: PUSH
61684: LD_INT 5
61686: NEG
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 6
61694: NEG
61695: PUSH
61696: LD_INT 6
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61718: LD_ADDR_VAR 0 41
61722: PUSH
61723: LD_INT 0
61725: PUSH
61726: LD_INT 2
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 1
61736: NEG
61737: PUSH
61738: LD_INT 3
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 1
61748: PUSH
61749: LD_INT 2
61751: NEG
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: LIST
61761: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61762: LD_ADDR_VAR 0 42
61766: PUSH
61767: LD_INT 2
61769: PUSH
61770: LD_INT 0
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: PUSH
61777: LD_INT 2
61779: PUSH
61780: LD_INT 1
61782: NEG
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 3
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: LIST
61802: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61803: LD_ADDR_VAR 0 43
61807: PUSH
61808: LD_INT 2
61810: PUSH
61811: LD_INT 2
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 3
61820: PUSH
61821: LD_INT 2
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 2
61830: PUSH
61831: LD_INT 3
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: LIST
61842: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61843: LD_ADDR_VAR 0 44
61847: PUSH
61848: LD_INT 0
61850: PUSH
61851: LD_INT 2
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 1
61860: PUSH
61861: LD_INT 3
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 1
61870: NEG
61871: PUSH
61872: LD_INT 2
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: LIST
61883: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61884: LD_ADDR_VAR 0 45
61888: PUSH
61889: LD_INT 2
61891: NEG
61892: PUSH
61893: LD_INT 0
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 2
61902: NEG
61903: PUSH
61904: LD_INT 1
61906: PUSH
61907: EMPTY
61908: LIST
61909: LIST
61910: PUSH
61911: LD_INT 3
61913: NEG
61914: PUSH
61915: LD_INT 1
61917: NEG
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: LIST
61927: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61928: LD_ADDR_VAR 0 46
61932: PUSH
61933: LD_INT 2
61935: NEG
61936: PUSH
61937: LD_INT 2
61939: NEG
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 2
61947: NEG
61948: PUSH
61949: LD_INT 3
61951: NEG
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 3
61959: NEG
61960: PUSH
61961: LD_INT 2
61963: NEG
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: LIST
61973: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61974: LD_ADDR_VAR 0 47
61978: PUSH
61979: LD_INT 2
61981: NEG
61982: PUSH
61983: LD_INT 3
61985: NEG
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 1
61993: NEG
61994: PUSH
61995: LD_INT 3
61997: NEG
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62007: LD_ADDR_VAR 0 48
62011: PUSH
62012: LD_INT 1
62014: PUSH
62015: LD_INT 2
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 2
62025: PUSH
62026: LD_INT 1
62028: NEG
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62038: LD_ADDR_VAR 0 49
62042: PUSH
62043: LD_INT 3
62045: PUSH
62046: LD_INT 1
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 3
62055: PUSH
62056: LD_INT 2
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62067: LD_ADDR_VAR 0 50
62071: PUSH
62072: LD_INT 2
62074: PUSH
62075: LD_INT 3
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 1
62084: PUSH
62085: LD_INT 3
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62096: LD_ADDR_VAR 0 51
62100: PUSH
62101: LD_INT 1
62103: NEG
62104: PUSH
62105: LD_INT 2
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 2
62114: NEG
62115: PUSH
62116: LD_INT 1
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62127: LD_ADDR_VAR 0 52
62131: PUSH
62132: LD_INT 3
62134: NEG
62135: PUSH
62136: LD_INT 1
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 3
62146: NEG
62147: PUSH
62148: LD_INT 2
62150: NEG
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62160: LD_ADDR_VAR 0 53
62164: PUSH
62165: LD_INT 1
62167: NEG
62168: PUSH
62169: LD_INT 3
62171: NEG
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: LD_INT 3
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 1
62190: PUSH
62191: LD_INT 2
62193: NEG
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: LIST
62203: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62204: LD_ADDR_VAR 0 54
62208: PUSH
62209: LD_INT 2
62211: PUSH
62212: LD_INT 1
62214: NEG
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 3
62222: PUSH
62223: LD_INT 0
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 3
62232: PUSH
62233: LD_INT 1
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: LIST
62244: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62245: LD_ADDR_VAR 0 55
62249: PUSH
62250: LD_INT 3
62252: PUSH
62253: LD_INT 2
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 3
62262: PUSH
62263: LD_INT 3
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 2
62272: PUSH
62273: LD_INT 3
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: LIST
62284: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62285: LD_ADDR_VAR 0 56
62289: PUSH
62290: LD_INT 1
62292: PUSH
62293: LD_INT 3
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 0
62302: PUSH
62303: LD_INT 3
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 1
62312: NEG
62313: PUSH
62314: LD_INT 2
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: LIST
62325: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62326: LD_ADDR_VAR 0 57
62330: PUSH
62331: LD_INT 2
62333: NEG
62334: PUSH
62335: LD_INT 1
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: PUSH
62342: LD_INT 3
62344: NEG
62345: PUSH
62346: LD_INT 0
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 3
62355: NEG
62356: PUSH
62357: LD_INT 1
62359: NEG
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: LIST
62369: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62370: LD_ADDR_VAR 0 58
62374: PUSH
62375: LD_INT 2
62377: NEG
62378: PUSH
62379: LD_INT 3
62381: NEG
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 3
62389: NEG
62390: PUSH
62391: LD_INT 2
62393: NEG
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 3
62401: NEG
62402: PUSH
62403: LD_INT 3
62405: NEG
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: LIST
62415: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62416: LD_ADDR_VAR 0 59
62420: PUSH
62421: LD_INT 1
62423: NEG
62424: PUSH
62425: LD_INT 2
62427: NEG
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 0
62435: PUSH
62436: LD_INT 2
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 1
62446: PUSH
62447: LD_INT 1
62449: NEG
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: LIST
62459: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62460: LD_ADDR_VAR 0 60
62464: PUSH
62465: LD_INT 1
62467: PUSH
62468: LD_INT 1
62470: NEG
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 2
62478: PUSH
62479: LD_INT 0
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 2
62488: PUSH
62489: LD_INT 1
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: LIST
62500: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62501: LD_ADDR_VAR 0 61
62505: PUSH
62506: LD_INT 2
62508: PUSH
62509: LD_INT 1
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 2
62518: PUSH
62519: LD_INT 2
62521: PUSH
62522: EMPTY
62523: LIST
62524: LIST
62525: PUSH
62526: LD_INT 1
62528: PUSH
62529: LD_INT 2
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: LIST
62540: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62541: LD_ADDR_VAR 0 62
62545: PUSH
62546: LD_INT 1
62548: PUSH
62549: LD_INT 2
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 0
62558: PUSH
62559: LD_INT 2
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 1
62568: NEG
62569: PUSH
62570: LD_INT 1
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: LIST
62581: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62582: LD_ADDR_VAR 0 63
62586: PUSH
62587: LD_INT 1
62589: NEG
62590: PUSH
62591: LD_INT 1
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 2
62600: NEG
62601: PUSH
62602: LD_INT 0
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 2
62611: NEG
62612: PUSH
62613: LD_INT 1
62615: NEG
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: EMPTY
62622: LIST
62623: LIST
62624: LIST
62625: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62626: LD_ADDR_VAR 0 64
62630: PUSH
62631: LD_INT 1
62633: NEG
62634: PUSH
62635: LD_INT 2
62637: NEG
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 2
62645: NEG
62646: PUSH
62647: LD_INT 1
62649: NEG
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 2
62657: NEG
62658: PUSH
62659: LD_INT 2
62661: NEG
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: LIST
62671: ST_TO_ADDR
// end ; 2 :
62672: GO 65938
62674: LD_INT 2
62676: DOUBLE
62677: EQUAL
62678: IFTRUE 62682
62680: GO 65937
62682: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62683: LD_ADDR_VAR 0 29
62687: PUSH
62688: LD_INT 4
62690: PUSH
62691: LD_INT 0
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 4
62700: PUSH
62701: LD_INT 1
62703: NEG
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 5
62711: PUSH
62712: LD_INT 0
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 5
62721: PUSH
62722: LD_INT 1
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 4
62731: PUSH
62732: LD_INT 1
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 3
62741: PUSH
62742: LD_INT 0
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 3
62751: PUSH
62752: LD_INT 1
62754: NEG
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 3
62762: PUSH
62763: LD_INT 2
62765: NEG
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 5
62773: PUSH
62774: LD_INT 2
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 3
62783: PUSH
62784: LD_INT 3
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 3
62793: PUSH
62794: LD_INT 2
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 4
62803: PUSH
62804: LD_INT 3
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 4
62813: PUSH
62814: LD_INT 4
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 3
62823: PUSH
62824: LD_INT 4
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 2
62833: PUSH
62834: LD_INT 3
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 2
62843: PUSH
62844: LD_INT 2
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: PUSH
62851: LD_INT 4
62853: PUSH
62854: LD_INT 2
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PUSH
62861: LD_INT 2
62863: PUSH
62864: LD_INT 4
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: PUSH
62871: LD_INT 0
62873: PUSH
62874: LD_INT 4
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 0
62883: PUSH
62884: LD_INT 3
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 1
62893: PUSH
62894: LD_INT 4
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 1
62903: PUSH
62904: LD_INT 5
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 0
62913: PUSH
62914: LD_INT 5
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 1
62923: NEG
62924: PUSH
62925: LD_INT 4
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: LD_INT 1
62934: NEG
62935: PUSH
62936: LD_INT 3
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 2
62945: PUSH
62946: LD_INT 5
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 2
62955: NEG
62956: PUSH
62957: LD_INT 3
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 3
62966: NEG
62967: PUSH
62968: LD_INT 0
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 3
62977: NEG
62978: PUSH
62979: LD_INT 1
62981: NEG
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 2
62989: NEG
62990: PUSH
62991: LD_INT 0
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 2
63000: NEG
63001: PUSH
63002: LD_INT 1
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 3
63011: NEG
63012: PUSH
63013: LD_INT 1
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 4
63022: NEG
63023: PUSH
63024: LD_INT 0
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: PUSH
63031: LD_INT 4
63033: NEG
63034: PUSH
63035: LD_INT 1
63037: NEG
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 4
63045: NEG
63046: PUSH
63047: LD_INT 2
63049: NEG
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 2
63057: NEG
63058: PUSH
63059: LD_INT 2
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 4
63068: NEG
63069: PUSH
63070: LD_INT 4
63072: NEG
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 4
63080: NEG
63081: PUSH
63082: LD_INT 5
63084: NEG
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 3
63092: NEG
63093: PUSH
63094: LD_INT 4
63096: NEG
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 3
63104: NEG
63105: PUSH
63106: LD_INT 3
63108: NEG
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 4
63116: NEG
63117: PUSH
63118: LD_INT 3
63120: NEG
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 5
63128: NEG
63129: PUSH
63130: LD_INT 4
63132: NEG
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 5
63140: NEG
63141: PUSH
63142: LD_INT 5
63144: NEG
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: PUSH
63150: LD_INT 3
63152: NEG
63153: PUSH
63154: LD_INT 5
63156: NEG
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 5
63164: NEG
63165: PUSH
63166: LD_INT 3
63168: NEG
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: LIST
63205: LIST
63206: LIST
63207: LIST
63208: LIST
63209: LIST
63210: LIST
63211: LIST
63212: LIST
63213: LIST
63214: LIST
63215: LIST
63216: LIST
63217: LIST
63218: LIST
63219: LIST
63220: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63221: LD_ADDR_VAR 0 30
63225: PUSH
63226: LD_INT 4
63228: PUSH
63229: LD_INT 4
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 4
63238: PUSH
63239: LD_INT 3
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 5
63248: PUSH
63249: LD_INT 4
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 5
63258: PUSH
63259: LD_INT 5
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 4
63268: PUSH
63269: LD_INT 5
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 3
63278: PUSH
63279: LD_INT 4
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 3
63288: PUSH
63289: LD_INT 3
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: LD_INT 5
63298: PUSH
63299: LD_INT 3
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 3
63308: PUSH
63309: LD_INT 5
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 0
63318: PUSH
63319: LD_INT 3
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 0
63328: PUSH
63329: LD_INT 2
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 1
63338: PUSH
63339: LD_INT 3
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 1
63348: PUSH
63349: LD_INT 4
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 0
63358: PUSH
63359: LD_INT 4
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 1
63368: NEG
63369: PUSH
63370: LD_INT 3
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 1
63379: NEG
63380: PUSH
63381: LD_INT 2
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 2
63390: PUSH
63391: LD_INT 4
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 2
63400: NEG
63401: PUSH
63402: LD_INT 2
63404: PUSH
63405: EMPTY
63406: LIST
63407: LIST
63408: PUSH
63409: LD_INT 4
63411: NEG
63412: PUSH
63413: LD_INT 0
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 4
63422: NEG
63423: PUSH
63424: LD_INT 1
63426: NEG
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 3
63434: NEG
63435: PUSH
63436: LD_INT 0
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 3
63445: NEG
63446: PUSH
63447: LD_INT 1
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 4
63456: NEG
63457: PUSH
63458: LD_INT 1
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 5
63467: NEG
63468: PUSH
63469: LD_INT 0
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 5
63478: NEG
63479: PUSH
63480: LD_INT 1
63482: NEG
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 5
63490: NEG
63491: PUSH
63492: LD_INT 2
63494: NEG
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 3
63502: NEG
63503: PUSH
63504: LD_INT 2
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 3
63513: NEG
63514: PUSH
63515: LD_INT 3
63517: NEG
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: LD_INT 3
63525: NEG
63526: PUSH
63527: LD_INT 4
63529: NEG
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 2
63537: NEG
63538: PUSH
63539: LD_INT 3
63541: NEG
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 2
63549: NEG
63550: PUSH
63551: LD_INT 2
63553: NEG
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 3
63561: NEG
63562: PUSH
63563: LD_INT 2
63565: NEG
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 4
63573: NEG
63574: PUSH
63575: LD_INT 3
63577: NEG
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 4
63585: NEG
63586: PUSH
63587: LD_INT 4
63589: NEG
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 2
63597: NEG
63598: PUSH
63599: LD_INT 4
63601: NEG
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 4
63609: NEG
63610: PUSH
63611: LD_INT 2
63613: NEG
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 0
63621: PUSH
63622: LD_INT 4
63624: NEG
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: LD_INT 5
63635: NEG
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: LD_INT 4
63646: NEG
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 1
63654: PUSH
63655: LD_INT 3
63657: NEG
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 0
63665: PUSH
63666: LD_INT 3
63668: NEG
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 1
63676: NEG
63677: PUSH
63678: LD_INT 4
63680: NEG
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: LD_INT 5
63692: NEG
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 2
63700: PUSH
63701: LD_INT 3
63703: NEG
63704: PUSH
63705: EMPTY
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 2
63711: NEG
63712: PUSH
63713: LD_INT 5
63715: NEG
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: LIST
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63768: LD_ADDR_VAR 0 31
63772: PUSH
63773: LD_INT 0
63775: PUSH
63776: LD_INT 4
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 0
63785: PUSH
63786: LD_INT 3
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 1
63795: PUSH
63796: LD_INT 4
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 1
63805: PUSH
63806: LD_INT 5
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 0
63815: PUSH
63816: LD_INT 5
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 1
63825: NEG
63826: PUSH
63827: LD_INT 4
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 1
63836: NEG
63837: PUSH
63838: LD_INT 3
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 2
63847: PUSH
63848: LD_INT 5
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 2
63857: NEG
63858: PUSH
63859: LD_INT 3
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 3
63868: NEG
63869: PUSH
63870: LD_INT 0
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 3
63879: NEG
63880: PUSH
63881: LD_INT 1
63883: NEG
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 2
63891: NEG
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 2
63902: NEG
63903: PUSH
63904: LD_INT 1
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 3
63913: NEG
63914: PUSH
63915: LD_INT 1
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 4
63924: NEG
63925: PUSH
63926: LD_INT 0
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 4
63935: NEG
63936: PUSH
63937: LD_INT 1
63939: NEG
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 4
63947: NEG
63948: PUSH
63949: LD_INT 2
63951: NEG
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 2
63959: NEG
63960: PUSH
63961: LD_INT 2
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 4
63970: NEG
63971: PUSH
63972: LD_INT 4
63974: NEG
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 4
63982: NEG
63983: PUSH
63984: LD_INT 5
63986: NEG
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 3
63994: NEG
63995: PUSH
63996: LD_INT 4
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 3
64006: NEG
64007: PUSH
64008: LD_INT 3
64010: NEG
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 4
64018: NEG
64019: PUSH
64020: LD_INT 3
64022: NEG
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 5
64030: NEG
64031: PUSH
64032: LD_INT 4
64034: NEG
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 5
64042: NEG
64043: PUSH
64044: LD_INT 5
64046: NEG
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 3
64054: NEG
64055: PUSH
64056: LD_INT 5
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 5
64066: NEG
64067: PUSH
64068: LD_INT 3
64070: NEG
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 0
64078: PUSH
64079: LD_INT 3
64081: NEG
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 0
64089: PUSH
64090: LD_INT 4
64092: NEG
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 1
64100: PUSH
64101: LD_INT 3
64103: NEG
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 1
64111: PUSH
64112: LD_INT 2
64114: NEG
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 0
64122: PUSH
64123: LD_INT 2
64125: NEG
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 1
64133: NEG
64134: PUSH
64135: LD_INT 3
64137: NEG
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 1
64145: NEG
64146: PUSH
64147: LD_INT 4
64149: NEG
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 2
64157: PUSH
64158: LD_INT 2
64160: NEG
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 2
64168: NEG
64169: PUSH
64170: LD_INT 4
64172: NEG
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 4
64180: PUSH
64181: LD_INT 0
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 4
64190: PUSH
64191: LD_INT 1
64193: NEG
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: PUSH
64199: LD_INT 5
64201: PUSH
64202: LD_INT 0
64204: PUSH
64205: EMPTY
64206: LIST
64207: LIST
64208: PUSH
64209: LD_INT 5
64211: PUSH
64212: LD_INT 1
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 4
64221: PUSH
64222: LD_INT 1
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 3
64231: PUSH
64232: LD_INT 0
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 3
64241: PUSH
64242: LD_INT 1
64244: NEG
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 3
64252: PUSH
64253: LD_INT 2
64255: NEG
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 5
64263: PUSH
64264: LD_INT 2
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: LIST
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: LIST
64293: LIST
64294: LIST
64295: LIST
64296: LIST
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64318: LD_ADDR_VAR 0 32
64322: PUSH
64323: LD_INT 4
64325: NEG
64326: PUSH
64327: LD_INT 0
64329: PUSH
64330: EMPTY
64331: LIST
64332: LIST
64333: PUSH
64334: LD_INT 4
64336: NEG
64337: PUSH
64338: LD_INT 1
64340: NEG
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 3
64348: NEG
64349: PUSH
64350: LD_INT 0
64352: PUSH
64353: EMPTY
64354: LIST
64355: LIST
64356: PUSH
64357: LD_INT 3
64359: NEG
64360: PUSH
64361: LD_INT 1
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 4
64370: NEG
64371: PUSH
64372: LD_INT 1
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 5
64381: NEG
64382: PUSH
64383: LD_INT 0
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 5
64392: NEG
64393: PUSH
64394: LD_INT 1
64396: NEG
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 5
64404: NEG
64405: PUSH
64406: LD_INT 2
64408: NEG
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 3
64416: NEG
64417: PUSH
64418: LD_INT 2
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 3
64427: NEG
64428: PUSH
64429: LD_INT 3
64431: NEG
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 3
64439: NEG
64440: PUSH
64441: LD_INT 4
64443: NEG
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 2
64451: NEG
64452: PUSH
64453: LD_INT 3
64455: NEG
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 2
64463: NEG
64464: PUSH
64465: LD_INT 2
64467: NEG
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 3
64475: NEG
64476: PUSH
64477: LD_INT 2
64479: NEG
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 4
64487: NEG
64488: PUSH
64489: LD_INT 3
64491: NEG
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 4
64499: NEG
64500: PUSH
64501: LD_INT 4
64503: NEG
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 2
64511: NEG
64512: PUSH
64513: LD_INT 4
64515: NEG
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 4
64523: NEG
64524: PUSH
64525: LD_INT 2
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 0
64535: PUSH
64536: LD_INT 4
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 0
64546: PUSH
64547: LD_INT 5
64549: NEG
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 1
64557: PUSH
64558: LD_INT 4
64560: NEG
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 1
64568: PUSH
64569: LD_INT 3
64571: NEG
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 0
64579: PUSH
64580: LD_INT 3
64582: NEG
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 1
64590: NEG
64591: PUSH
64592: LD_INT 4
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 1
64602: NEG
64603: PUSH
64604: LD_INT 5
64606: NEG
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 2
64614: PUSH
64615: LD_INT 3
64617: NEG
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 2
64625: NEG
64626: PUSH
64627: LD_INT 5
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 3
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 3
64647: PUSH
64648: LD_INT 1
64650: NEG
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 4
64658: PUSH
64659: LD_INT 0
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 4
64668: PUSH
64669: LD_INT 1
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 3
64678: PUSH
64679: LD_INT 1
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 2
64688: PUSH
64689: LD_INT 0
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 2
64698: PUSH
64699: LD_INT 1
64701: NEG
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 2
64709: PUSH
64710: LD_INT 2
64712: NEG
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 4
64720: PUSH
64721: LD_INT 2
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 4
64730: PUSH
64731: LD_INT 4
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 4
64740: PUSH
64741: LD_INT 3
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 5
64750: PUSH
64751: LD_INT 4
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 5
64760: PUSH
64761: LD_INT 5
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 4
64770: PUSH
64771: LD_INT 5
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 3
64780: PUSH
64781: LD_INT 4
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 3
64790: PUSH
64791: LD_INT 3
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 5
64800: PUSH
64801: LD_INT 3
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 3
64810: PUSH
64811: LD_INT 5
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: LIST
64828: LIST
64829: LIST
64830: LIST
64831: LIST
64832: LIST
64833: LIST
64834: LIST
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: LIST
64864: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64865: LD_ADDR_VAR 0 33
64869: PUSH
64870: LD_INT 4
64872: NEG
64873: PUSH
64874: LD_INT 4
64876: NEG
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 4
64884: NEG
64885: PUSH
64886: LD_INT 5
64888: NEG
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 3
64896: NEG
64897: PUSH
64898: LD_INT 4
64900: NEG
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: PUSH
64906: LD_INT 3
64908: NEG
64909: PUSH
64910: LD_INT 3
64912: NEG
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 4
64920: NEG
64921: PUSH
64922: LD_INT 3
64924: NEG
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 5
64932: NEG
64933: PUSH
64934: LD_INT 4
64936: NEG
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 5
64944: NEG
64945: PUSH
64946: LD_INT 5
64948: NEG
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 3
64956: NEG
64957: PUSH
64958: LD_INT 5
64960: NEG
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 5
64968: NEG
64969: PUSH
64970: LD_INT 3
64972: NEG
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 0
64980: PUSH
64981: LD_INT 3
64983: NEG
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 0
64991: PUSH
64992: LD_INT 4
64994: NEG
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 1
65002: PUSH
65003: LD_INT 3
65005: NEG
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 1
65013: PUSH
65014: LD_INT 2
65016: NEG
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: PUSH
65022: LD_INT 0
65024: PUSH
65025: LD_INT 2
65027: NEG
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 1
65035: NEG
65036: PUSH
65037: LD_INT 3
65039: NEG
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 1
65047: NEG
65048: PUSH
65049: LD_INT 4
65051: NEG
65052: PUSH
65053: EMPTY
65054: LIST
65055: LIST
65056: PUSH
65057: LD_INT 2
65059: PUSH
65060: LD_INT 2
65062: NEG
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 2
65070: NEG
65071: PUSH
65072: LD_INT 4
65074: NEG
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 4
65082: PUSH
65083: LD_INT 0
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 4
65092: PUSH
65093: LD_INT 1
65095: NEG
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 5
65103: PUSH
65104: LD_INT 0
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 5
65113: PUSH
65114: LD_INT 1
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 4
65123: PUSH
65124: LD_INT 1
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 3
65133: PUSH
65134: LD_INT 0
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 3
65143: PUSH
65144: LD_INT 1
65146: NEG
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 3
65154: PUSH
65155: LD_INT 2
65157: NEG
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 5
65165: PUSH
65166: LD_INT 2
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 3
65175: PUSH
65176: LD_INT 3
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 3
65185: PUSH
65186: LD_INT 2
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 4
65195: PUSH
65196: LD_INT 3
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 4
65205: PUSH
65206: LD_INT 4
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 3
65215: PUSH
65216: LD_INT 4
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 2
65225: PUSH
65226: LD_INT 3
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 2
65235: PUSH
65236: LD_INT 2
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 4
65245: PUSH
65246: LD_INT 2
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 2
65255: PUSH
65256: LD_INT 4
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 0
65265: PUSH
65266: LD_INT 4
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 0
65275: PUSH
65276: LD_INT 3
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 1
65285: PUSH
65286: LD_INT 4
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 1
65295: PUSH
65296: LD_INT 5
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 0
65305: PUSH
65306: LD_INT 5
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 1
65315: NEG
65316: PUSH
65317: LD_INT 4
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 1
65326: NEG
65327: PUSH
65328: LD_INT 3
65330: PUSH
65331: EMPTY
65332: LIST
65333: LIST
65334: PUSH
65335: LD_INT 2
65337: PUSH
65338: LD_INT 5
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 2
65347: NEG
65348: PUSH
65349: LD_INT 3
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: LIST
65386: LIST
65387: LIST
65388: LIST
65389: LIST
65390: LIST
65391: LIST
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65403: LD_ADDR_VAR 0 34
65407: PUSH
65408: LD_INT 0
65410: PUSH
65411: LD_INT 4
65413: NEG
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 0
65421: PUSH
65422: LD_INT 5
65424: NEG
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 1
65432: PUSH
65433: LD_INT 4
65435: NEG
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 1
65443: PUSH
65444: LD_INT 3
65446: NEG
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 0
65454: PUSH
65455: LD_INT 3
65457: NEG
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 1
65465: NEG
65466: PUSH
65467: LD_INT 4
65469: NEG
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 1
65477: NEG
65478: PUSH
65479: LD_INT 5
65481: NEG
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 2
65489: PUSH
65490: LD_INT 3
65492: NEG
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 2
65500: NEG
65501: PUSH
65502: LD_INT 5
65504: NEG
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 3
65512: PUSH
65513: LD_INT 0
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 3
65522: PUSH
65523: LD_INT 1
65525: NEG
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 4
65533: PUSH
65534: LD_INT 0
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 4
65543: PUSH
65544: LD_INT 1
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PUSH
65551: LD_INT 3
65553: PUSH
65554: LD_INT 1
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 2
65563: PUSH
65564: LD_INT 0
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 2
65573: PUSH
65574: LD_INT 1
65576: NEG
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 2
65584: PUSH
65585: LD_INT 2
65587: NEG
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 4
65595: PUSH
65596: LD_INT 2
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 4
65605: PUSH
65606: LD_INT 4
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 4
65615: PUSH
65616: LD_INT 3
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 5
65625: PUSH
65626: LD_INT 4
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 5
65635: PUSH
65636: LD_INT 5
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 4
65645: PUSH
65646: LD_INT 5
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 3
65655: PUSH
65656: LD_INT 4
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: LD_INT 3
65665: PUSH
65666: LD_INT 3
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: PUSH
65673: LD_INT 5
65675: PUSH
65676: LD_INT 3
65678: PUSH
65679: EMPTY
65680: LIST
65681: LIST
65682: PUSH
65683: LD_INT 3
65685: PUSH
65686: LD_INT 5
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 0
65695: PUSH
65696: LD_INT 3
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 0
65705: PUSH
65706: LD_INT 2
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 1
65715: PUSH
65716: LD_INT 3
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 1
65725: PUSH
65726: LD_INT 4
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 0
65735: PUSH
65736: LD_INT 4
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 1
65745: NEG
65746: PUSH
65747: LD_INT 3
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: PUSH
65754: LD_INT 1
65756: NEG
65757: PUSH
65758: LD_INT 2
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 2
65767: PUSH
65768: LD_INT 4
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 2
65777: NEG
65778: PUSH
65779: LD_INT 2
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 4
65788: NEG
65789: PUSH
65790: LD_INT 0
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 4
65799: NEG
65800: PUSH
65801: LD_INT 1
65803: NEG
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 3
65811: NEG
65812: PUSH
65813: LD_INT 0
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 3
65822: NEG
65823: PUSH
65824: LD_INT 1
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 4
65833: NEG
65834: PUSH
65835: LD_INT 1
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 5
65844: NEG
65845: PUSH
65846: LD_INT 0
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 5
65855: NEG
65856: PUSH
65857: LD_INT 1
65859: NEG
65860: PUSH
65861: EMPTY
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 5
65867: NEG
65868: PUSH
65869: LD_INT 2
65871: NEG
65872: PUSH
65873: EMPTY
65874: LIST
65875: LIST
65876: PUSH
65877: LD_INT 3
65879: NEG
65880: PUSH
65881: LD_INT 2
65883: PUSH
65884: EMPTY
65885: LIST
65886: LIST
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: ST_TO_ADDR
// end ; end ;
65935: GO 65938
65937: POP
// case btype of b_depot , b_warehouse :
65938: LD_VAR 0 1
65942: PUSH
65943: LD_INT 0
65945: DOUBLE
65946: EQUAL
65947: IFTRUE 65957
65949: LD_INT 1
65951: DOUBLE
65952: EQUAL
65953: IFTRUE 65957
65955: GO 66158
65957: POP
// case nation of nation_american :
65958: LD_VAR 0 5
65962: PUSH
65963: LD_INT 1
65965: DOUBLE
65966: EQUAL
65967: IFTRUE 65971
65969: GO 66027
65971: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65972: LD_ADDR_VAR 0 9
65976: PUSH
65977: LD_VAR 0 11
65981: PUSH
65982: LD_VAR 0 12
65986: PUSH
65987: LD_VAR 0 13
65991: PUSH
65992: LD_VAR 0 14
65996: PUSH
65997: LD_VAR 0 15
66001: PUSH
66002: LD_VAR 0 16
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: LIST
66013: LIST
66014: PUSH
66015: LD_VAR 0 4
66019: PUSH
66020: LD_INT 1
66022: PLUS
66023: ARRAY
66024: ST_TO_ADDR
66025: GO 66156
66027: LD_INT 2
66029: DOUBLE
66030: EQUAL
66031: IFTRUE 66035
66033: GO 66091
66035: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66036: LD_ADDR_VAR 0 9
66040: PUSH
66041: LD_VAR 0 17
66045: PUSH
66046: LD_VAR 0 18
66050: PUSH
66051: LD_VAR 0 19
66055: PUSH
66056: LD_VAR 0 20
66060: PUSH
66061: LD_VAR 0 21
66065: PUSH
66066: LD_VAR 0 22
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: LIST
66078: PUSH
66079: LD_VAR 0 4
66083: PUSH
66084: LD_INT 1
66086: PLUS
66087: ARRAY
66088: ST_TO_ADDR
66089: GO 66156
66091: LD_INT 3
66093: DOUBLE
66094: EQUAL
66095: IFTRUE 66099
66097: GO 66155
66099: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66100: LD_ADDR_VAR 0 9
66104: PUSH
66105: LD_VAR 0 23
66109: PUSH
66110: LD_VAR 0 24
66114: PUSH
66115: LD_VAR 0 25
66119: PUSH
66120: LD_VAR 0 26
66124: PUSH
66125: LD_VAR 0 27
66129: PUSH
66130: LD_VAR 0 28
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: PUSH
66143: LD_VAR 0 4
66147: PUSH
66148: LD_INT 1
66150: PLUS
66151: ARRAY
66152: ST_TO_ADDR
66153: GO 66156
66155: POP
66156: GO 66711
66158: LD_INT 2
66160: DOUBLE
66161: EQUAL
66162: IFTRUE 66172
66164: LD_INT 3
66166: DOUBLE
66167: EQUAL
66168: IFTRUE 66172
66170: GO 66228
66172: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66173: LD_ADDR_VAR 0 9
66177: PUSH
66178: LD_VAR 0 29
66182: PUSH
66183: LD_VAR 0 30
66187: PUSH
66188: LD_VAR 0 31
66192: PUSH
66193: LD_VAR 0 32
66197: PUSH
66198: LD_VAR 0 33
66202: PUSH
66203: LD_VAR 0 34
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: PUSH
66216: LD_VAR 0 4
66220: PUSH
66221: LD_INT 1
66223: PLUS
66224: ARRAY
66225: ST_TO_ADDR
66226: GO 66711
66228: LD_INT 16
66230: DOUBLE
66231: EQUAL
66232: IFTRUE 66290
66234: LD_INT 17
66236: DOUBLE
66237: EQUAL
66238: IFTRUE 66290
66240: LD_INT 18
66242: DOUBLE
66243: EQUAL
66244: IFTRUE 66290
66246: LD_INT 19
66248: DOUBLE
66249: EQUAL
66250: IFTRUE 66290
66252: LD_INT 22
66254: DOUBLE
66255: EQUAL
66256: IFTRUE 66290
66258: LD_INT 20
66260: DOUBLE
66261: EQUAL
66262: IFTRUE 66290
66264: LD_INT 21
66266: DOUBLE
66267: EQUAL
66268: IFTRUE 66290
66270: LD_INT 23
66272: DOUBLE
66273: EQUAL
66274: IFTRUE 66290
66276: LD_INT 24
66278: DOUBLE
66279: EQUAL
66280: IFTRUE 66290
66282: LD_INT 25
66284: DOUBLE
66285: EQUAL
66286: IFTRUE 66290
66288: GO 66346
66290: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66291: LD_ADDR_VAR 0 9
66295: PUSH
66296: LD_VAR 0 35
66300: PUSH
66301: LD_VAR 0 36
66305: PUSH
66306: LD_VAR 0 37
66310: PUSH
66311: LD_VAR 0 38
66315: PUSH
66316: LD_VAR 0 39
66320: PUSH
66321: LD_VAR 0 40
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: PUSH
66334: LD_VAR 0 4
66338: PUSH
66339: LD_INT 1
66341: PLUS
66342: ARRAY
66343: ST_TO_ADDR
66344: GO 66711
66346: LD_INT 6
66348: DOUBLE
66349: EQUAL
66350: IFTRUE 66402
66352: LD_INT 7
66354: DOUBLE
66355: EQUAL
66356: IFTRUE 66402
66358: LD_INT 8
66360: DOUBLE
66361: EQUAL
66362: IFTRUE 66402
66364: LD_INT 13
66366: DOUBLE
66367: EQUAL
66368: IFTRUE 66402
66370: LD_INT 12
66372: DOUBLE
66373: EQUAL
66374: IFTRUE 66402
66376: LD_INT 15
66378: DOUBLE
66379: EQUAL
66380: IFTRUE 66402
66382: LD_INT 11
66384: DOUBLE
66385: EQUAL
66386: IFTRUE 66402
66388: LD_INT 14
66390: DOUBLE
66391: EQUAL
66392: IFTRUE 66402
66394: LD_INT 10
66396: DOUBLE
66397: EQUAL
66398: IFTRUE 66402
66400: GO 66458
66402: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66403: LD_ADDR_VAR 0 9
66407: PUSH
66408: LD_VAR 0 41
66412: PUSH
66413: LD_VAR 0 42
66417: PUSH
66418: LD_VAR 0 43
66422: PUSH
66423: LD_VAR 0 44
66427: PUSH
66428: LD_VAR 0 45
66432: PUSH
66433: LD_VAR 0 46
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: PUSH
66446: LD_VAR 0 4
66450: PUSH
66451: LD_INT 1
66453: PLUS
66454: ARRAY
66455: ST_TO_ADDR
66456: GO 66711
66458: LD_INT 36
66460: DOUBLE
66461: EQUAL
66462: IFTRUE 66466
66464: GO 66522
66466: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66467: LD_ADDR_VAR 0 9
66471: PUSH
66472: LD_VAR 0 47
66476: PUSH
66477: LD_VAR 0 48
66481: PUSH
66482: LD_VAR 0 49
66486: PUSH
66487: LD_VAR 0 50
66491: PUSH
66492: LD_VAR 0 51
66496: PUSH
66497: LD_VAR 0 52
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: LIST
66508: LIST
66509: PUSH
66510: LD_VAR 0 4
66514: PUSH
66515: LD_INT 1
66517: PLUS
66518: ARRAY
66519: ST_TO_ADDR
66520: GO 66711
66522: LD_INT 4
66524: DOUBLE
66525: EQUAL
66526: IFTRUE 66548
66528: LD_INT 5
66530: DOUBLE
66531: EQUAL
66532: IFTRUE 66548
66534: LD_INT 34
66536: DOUBLE
66537: EQUAL
66538: IFTRUE 66548
66540: LD_INT 37
66542: DOUBLE
66543: EQUAL
66544: IFTRUE 66548
66546: GO 66604
66548: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66549: LD_ADDR_VAR 0 9
66553: PUSH
66554: LD_VAR 0 53
66558: PUSH
66559: LD_VAR 0 54
66563: PUSH
66564: LD_VAR 0 55
66568: PUSH
66569: LD_VAR 0 56
66573: PUSH
66574: LD_VAR 0 57
66578: PUSH
66579: LD_VAR 0 58
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: PUSH
66592: LD_VAR 0 4
66596: PUSH
66597: LD_INT 1
66599: PLUS
66600: ARRAY
66601: ST_TO_ADDR
66602: GO 66711
66604: LD_INT 31
66606: DOUBLE
66607: EQUAL
66608: IFTRUE 66654
66610: LD_INT 32
66612: DOUBLE
66613: EQUAL
66614: IFTRUE 66654
66616: LD_INT 33
66618: DOUBLE
66619: EQUAL
66620: IFTRUE 66654
66622: LD_INT 27
66624: DOUBLE
66625: EQUAL
66626: IFTRUE 66654
66628: LD_INT 26
66630: DOUBLE
66631: EQUAL
66632: IFTRUE 66654
66634: LD_INT 28
66636: DOUBLE
66637: EQUAL
66638: IFTRUE 66654
66640: LD_INT 29
66642: DOUBLE
66643: EQUAL
66644: IFTRUE 66654
66646: LD_INT 30
66648: DOUBLE
66649: EQUAL
66650: IFTRUE 66654
66652: GO 66710
66654: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66655: LD_ADDR_VAR 0 9
66659: PUSH
66660: LD_VAR 0 59
66664: PUSH
66665: LD_VAR 0 60
66669: PUSH
66670: LD_VAR 0 61
66674: PUSH
66675: LD_VAR 0 62
66679: PUSH
66680: LD_VAR 0 63
66684: PUSH
66685: LD_VAR 0 64
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: LIST
66694: LIST
66695: LIST
66696: LIST
66697: PUSH
66698: LD_VAR 0 4
66702: PUSH
66703: LD_INT 1
66705: PLUS
66706: ARRAY
66707: ST_TO_ADDR
66708: GO 66711
66710: POP
// temp_list2 = [ ] ;
66711: LD_ADDR_VAR 0 10
66715: PUSH
66716: EMPTY
66717: ST_TO_ADDR
// for i in temp_list do
66718: LD_ADDR_VAR 0 8
66722: PUSH
66723: LD_VAR 0 9
66727: PUSH
66728: FOR_IN
66729: IFFALSE 66781
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66731: LD_ADDR_VAR 0 10
66735: PUSH
66736: LD_VAR 0 10
66740: PUSH
66741: LD_VAR 0 8
66745: PUSH
66746: LD_INT 1
66748: ARRAY
66749: PUSH
66750: LD_VAR 0 2
66754: PLUS
66755: PUSH
66756: LD_VAR 0 8
66760: PUSH
66761: LD_INT 2
66763: ARRAY
66764: PUSH
66765: LD_VAR 0 3
66769: PLUS
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: EMPTY
66776: LIST
66777: ADD
66778: ST_TO_ADDR
66779: GO 66728
66781: POP
66782: POP
// result = temp_list2 ;
66783: LD_ADDR_VAR 0 7
66787: PUSH
66788: LD_VAR 0 10
66792: ST_TO_ADDR
// end ;
66793: LD_VAR 0 7
66797: RET
// export function EnemyInRange ( unit , dist ) ; begin
66798: LD_INT 0
66800: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66801: LD_ADDR_VAR 0 3
66805: PUSH
66806: LD_VAR 0 1
66810: PPUSH
66811: CALL_OW 255
66815: PPUSH
66816: LD_VAR 0 1
66820: PPUSH
66821: CALL_OW 250
66825: PPUSH
66826: LD_VAR 0 1
66830: PPUSH
66831: CALL_OW 251
66835: PPUSH
66836: LD_VAR 0 2
66840: PPUSH
66841: CALL 40194 0 4
66845: PUSH
66846: LD_INT 4
66848: ARRAY
66849: ST_TO_ADDR
// end ;
66850: LD_VAR 0 3
66854: RET
// export function PlayerSeeMe ( unit ) ; begin
66855: LD_INT 0
66857: PPUSH
// result := See ( your_side , unit ) ;
66858: LD_ADDR_VAR 0 2
66862: PUSH
66863: LD_OWVAR 2
66867: PPUSH
66868: LD_VAR 0 1
66872: PPUSH
66873: CALL_OW 292
66877: ST_TO_ADDR
// end ;
66878: LD_VAR 0 2
66882: RET
// export function ReverseDir ( unit ) ; begin
66883: LD_INT 0
66885: PPUSH
// if not unit then
66886: LD_VAR 0 1
66890: NOT
66891: IFFALSE 66895
// exit ;
66893: GO 66918
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66895: LD_ADDR_VAR 0 2
66899: PUSH
66900: LD_VAR 0 1
66904: PPUSH
66905: CALL_OW 254
66909: PUSH
66910: LD_INT 3
66912: PLUS
66913: PUSH
66914: LD_INT 6
66916: MOD
66917: ST_TO_ADDR
// end ;
66918: LD_VAR 0 2
66922: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
66923: LD_INT 0
66925: PPUSH
66926: PPUSH
66927: PPUSH
66928: PPUSH
66929: PPUSH
// if not hexes then
66930: LD_VAR 0 2
66934: NOT
66935: IFFALSE 66939
// exit ;
66937: GO 67087
// dist := 9999 ;
66939: LD_ADDR_VAR 0 5
66943: PUSH
66944: LD_INT 9999
66946: ST_TO_ADDR
// for i = 1 to hexes do
66947: LD_ADDR_VAR 0 4
66951: PUSH
66952: DOUBLE
66953: LD_INT 1
66955: DEC
66956: ST_TO_ADDR
66957: LD_VAR 0 2
66961: PUSH
66962: FOR_TO
66963: IFFALSE 67075
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
66965: LD_VAR 0 1
66969: PPUSH
66970: LD_VAR 0 2
66974: PUSH
66975: LD_VAR 0 4
66979: ARRAY
66980: PUSH
66981: LD_INT 1
66983: ARRAY
66984: PPUSH
66985: LD_VAR 0 2
66989: PUSH
66990: LD_VAR 0 4
66994: ARRAY
66995: PUSH
66996: LD_INT 2
66998: ARRAY
66999: PPUSH
67000: CALL_OW 297
67004: PUSH
67005: LD_VAR 0 5
67009: LESS
67010: IFFALSE 67073
// begin hex := hexes [ i ] ;
67012: LD_ADDR_VAR 0 7
67016: PUSH
67017: LD_VAR 0 2
67021: PUSH
67022: LD_VAR 0 4
67026: ARRAY
67027: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67028: LD_ADDR_VAR 0 5
67032: PUSH
67033: LD_VAR 0 1
67037: PPUSH
67038: LD_VAR 0 2
67042: PUSH
67043: LD_VAR 0 4
67047: ARRAY
67048: PUSH
67049: LD_INT 1
67051: ARRAY
67052: PPUSH
67053: LD_VAR 0 2
67057: PUSH
67058: LD_VAR 0 4
67062: ARRAY
67063: PUSH
67064: LD_INT 2
67066: ARRAY
67067: PPUSH
67068: CALL_OW 297
67072: ST_TO_ADDR
// end ; end ;
67073: GO 66962
67075: POP
67076: POP
// result := hex ;
67077: LD_ADDR_VAR 0 3
67081: PUSH
67082: LD_VAR 0 7
67086: ST_TO_ADDR
// end ;
67087: LD_VAR 0 3
67091: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67092: LD_INT 0
67094: PPUSH
67095: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67096: LD_VAR 0 1
67100: NOT
67101: PUSH
67102: LD_VAR 0 1
67106: PUSH
67107: LD_INT 21
67109: PUSH
67110: LD_INT 2
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 23
67119: PUSH
67120: LD_INT 2
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PPUSH
67131: CALL_OW 69
67135: IN
67136: NOT
67137: OR
67138: IFFALSE 67142
// exit ;
67140: GO 67189
// for i = 1 to 3 do
67142: LD_ADDR_VAR 0 3
67146: PUSH
67147: DOUBLE
67148: LD_INT 1
67150: DEC
67151: ST_TO_ADDR
67152: LD_INT 3
67154: PUSH
67155: FOR_TO
67156: IFFALSE 67187
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67158: LD_VAR 0 1
67162: PPUSH
67163: CALL_OW 250
67167: PPUSH
67168: LD_VAR 0 1
67172: PPUSH
67173: CALL_OW 251
67177: PPUSH
67178: LD_INT 1
67180: PPUSH
67181: CALL_OW 453
67185: GO 67155
67187: POP
67188: POP
// end ;
67189: LD_VAR 0 2
67193: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67194: LD_INT 0
67196: PPUSH
67197: PPUSH
67198: PPUSH
67199: PPUSH
67200: PPUSH
67201: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67202: LD_VAR 0 1
67206: NOT
67207: PUSH
67208: LD_VAR 0 2
67212: NOT
67213: OR
67214: PUSH
67215: LD_VAR 0 1
67219: PPUSH
67220: CALL_OW 314
67224: OR
67225: IFFALSE 67229
// exit ;
67227: GO 67670
// x := GetX ( enemy_unit ) ;
67229: LD_ADDR_VAR 0 7
67233: PUSH
67234: LD_VAR 0 2
67238: PPUSH
67239: CALL_OW 250
67243: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67244: LD_ADDR_VAR 0 8
67248: PUSH
67249: LD_VAR 0 2
67253: PPUSH
67254: CALL_OW 251
67258: ST_TO_ADDR
// if not x or not y then
67259: LD_VAR 0 7
67263: NOT
67264: PUSH
67265: LD_VAR 0 8
67269: NOT
67270: OR
67271: IFFALSE 67275
// exit ;
67273: GO 67670
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67275: LD_ADDR_VAR 0 6
67279: PUSH
67280: LD_VAR 0 7
67284: PPUSH
67285: LD_INT 0
67287: PPUSH
67288: LD_INT 4
67290: PPUSH
67291: CALL_OW 272
67295: PUSH
67296: LD_VAR 0 8
67300: PPUSH
67301: LD_INT 0
67303: PPUSH
67304: LD_INT 4
67306: PPUSH
67307: CALL_OW 273
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: PUSH
67316: LD_VAR 0 7
67320: PPUSH
67321: LD_INT 1
67323: PPUSH
67324: LD_INT 4
67326: PPUSH
67327: CALL_OW 272
67331: PUSH
67332: LD_VAR 0 8
67336: PPUSH
67337: LD_INT 1
67339: PPUSH
67340: LD_INT 4
67342: PPUSH
67343: CALL_OW 273
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_VAR 0 7
67356: PPUSH
67357: LD_INT 2
67359: PPUSH
67360: LD_INT 4
67362: PPUSH
67363: CALL_OW 272
67367: PUSH
67368: LD_VAR 0 8
67372: PPUSH
67373: LD_INT 2
67375: PPUSH
67376: LD_INT 4
67378: PPUSH
67379: CALL_OW 273
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_VAR 0 7
67392: PPUSH
67393: LD_INT 3
67395: PPUSH
67396: LD_INT 4
67398: PPUSH
67399: CALL_OW 272
67403: PUSH
67404: LD_VAR 0 8
67408: PPUSH
67409: LD_INT 3
67411: PPUSH
67412: LD_INT 4
67414: PPUSH
67415: CALL_OW 273
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_VAR 0 7
67428: PPUSH
67429: LD_INT 4
67431: PPUSH
67432: LD_INT 4
67434: PPUSH
67435: CALL_OW 272
67439: PUSH
67440: LD_VAR 0 8
67444: PPUSH
67445: LD_INT 4
67447: PPUSH
67448: LD_INT 4
67450: PPUSH
67451: CALL_OW 273
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_VAR 0 7
67464: PPUSH
67465: LD_INT 5
67467: PPUSH
67468: LD_INT 4
67470: PPUSH
67471: CALL_OW 272
67475: PUSH
67476: LD_VAR 0 8
67480: PPUSH
67481: LD_INT 5
67483: PPUSH
67484: LD_INT 4
67486: PPUSH
67487: CALL_OW 273
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: ST_TO_ADDR
// for i = tmp downto 1 do
67504: LD_ADDR_VAR 0 4
67508: PUSH
67509: DOUBLE
67510: LD_VAR 0 6
67514: INC
67515: ST_TO_ADDR
67516: LD_INT 1
67518: PUSH
67519: FOR_DOWNTO
67520: IFFALSE 67621
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67522: LD_VAR 0 6
67526: PUSH
67527: LD_VAR 0 4
67531: ARRAY
67532: PUSH
67533: LD_INT 1
67535: ARRAY
67536: PPUSH
67537: LD_VAR 0 6
67541: PUSH
67542: LD_VAR 0 4
67546: ARRAY
67547: PUSH
67548: LD_INT 2
67550: ARRAY
67551: PPUSH
67552: CALL_OW 488
67556: NOT
67557: PUSH
67558: LD_VAR 0 6
67562: PUSH
67563: LD_VAR 0 4
67567: ARRAY
67568: PUSH
67569: LD_INT 1
67571: ARRAY
67572: PPUSH
67573: LD_VAR 0 6
67577: PUSH
67578: LD_VAR 0 4
67582: ARRAY
67583: PUSH
67584: LD_INT 2
67586: ARRAY
67587: PPUSH
67588: CALL_OW 428
67592: PUSH
67593: LD_INT 0
67595: NONEQUAL
67596: OR
67597: IFFALSE 67619
// tmp := Delete ( tmp , i ) ;
67599: LD_ADDR_VAR 0 6
67603: PUSH
67604: LD_VAR 0 6
67608: PPUSH
67609: LD_VAR 0 4
67613: PPUSH
67614: CALL_OW 3
67618: ST_TO_ADDR
67619: GO 67519
67621: POP
67622: POP
// j := GetClosestHex ( unit , tmp ) ;
67623: LD_ADDR_VAR 0 5
67627: PUSH
67628: LD_VAR 0 1
67632: PPUSH
67633: LD_VAR 0 6
67637: PPUSH
67638: CALL 66923 0 2
67642: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67643: LD_VAR 0 1
67647: PPUSH
67648: LD_VAR 0 5
67652: PUSH
67653: LD_INT 1
67655: ARRAY
67656: PPUSH
67657: LD_VAR 0 5
67661: PUSH
67662: LD_INT 2
67664: ARRAY
67665: PPUSH
67666: CALL_OW 111
// end ;
67670: LD_VAR 0 3
67674: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67675: LD_INT 0
67677: PPUSH
67678: PPUSH
67679: PPUSH
// uc_side = 0 ;
67680: LD_ADDR_OWVAR 20
67684: PUSH
67685: LD_INT 0
67687: ST_TO_ADDR
// uc_nation = 0 ;
67688: LD_ADDR_OWVAR 21
67692: PUSH
67693: LD_INT 0
67695: ST_TO_ADDR
// InitHc_All ( ) ;
67696: CALL_OW 584
// InitVc ;
67700: CALL_OW 20
// if mastodonts then
67704: LD_VAR 0 6
67708: IFFALSE 67775
// for i = 1 to mastodonts do
67710: LD_ADDR_VAR 0 11
67714: PUSH
67715: DOUBLE
67716: LD_INT 1
67718: DEC
67719: ST_TO_ADDR
67720: LD_VAR 0 6
67724: PUSH
67725: FOR_TO
67726: IFFALSE 67773
// begin vc_chassis := 31 ;
67728: LD_ADDR_OWVAR 37
67732: PUSH
67733: LD_INT 31
67735: ST_TO_ADDR
// vc_control := control_rider ;
67736: LD_ADDR_OWVAR 38
67740: PUSH
67741: LD_INT 4
67743: ST_TO_ADDR
// animal := CreateVehicle ;
67744: LD_ADDR_VAR 0 12
67748: PUSH
67749: CALL_OW 45
67753: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67754: LD_VAR 0 12
67758: PPUSH
67759: LD_VAR 0 8
67763: PPUSH
67764: LD_INT 0
67766: PPUSH
67767: CALL 69910 0 3
// end ;
67771: GO 67725
67773: POP
67774: POP
// if horses then
67775: LD_VAR 0 5
67779: IFFALSE 67846
// for i = 1 to horses do
67781: LD_ADDR_VAR 0 11
67785: PUSH
67786: DOUBLE
67787: LD_INT 1
67789: DEC
67790: ST_TO_ADDR
67791: LD_VAR 0 5
67795: PUSH
67796: FOR_TO
67797: IFFALSE 67844
// begin hc_class := 21 ;
67799: LD_ADDR_OWVAR 28
67803: PUSH
67804: LD_INT 21
67806: ST_TO_ADDR
// hc_gallery :=  ;
67807: LD_ADDR_OWVAR 33
67811: PUSH
67812: LD_STRING 
67814: ST_TO_ADDR
// animal := CreateHuman ;
67815: LD_ADDR_VAR 0 12
67819: PUSH
67820: CALL_OW 44
67824: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67825: LD_VAR 0 12
67829: PPUSH
67830: LD_VAR 0 8
67834: PPUSH
67835: LD_INT 0
67837: PPUSH
67838: CALL 69910 0 3
// end ;
67842: GO 67796
67844: POP
67845: POP
// if birds then
67846: LD_VAR 0 1
67850: IFFALSE 67917
// for i = 1 to birds do
67852: LD_ADDR_VAR 0 11
67856: PUSH
67857: DOUBLE
67858: LD_INT 1
67860: DEC
67861: ST_TO_ADDR
67862: LD_VAR 0 1
67866: PUSH
67867: FOR_TO
67868: IFFALSE 67915
// begin hc_class = 18 ;
67870: LD_ADDR_OWVAR 28
67874: PUSH
67875: LD_INT 18
67877: ST_TO_ADDR
// hc_gallery =  ;
67878: LD_ADDR_OWVAR 33
67882: PUSH
67883: LD_STRING 
67885: ST_TO_ADDR
// animal := CreateHuman ;
67886: LD_ADDR_VAR 0 12
67890: PUSH
67891: CALL_OW 44
67895: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67896: LD_VAR 0 12
67900: PPUSH
67901: LD_VAR 0 8
67905: PPUSH
67906: LD_INT 0
67908: PPUSH
67909: CALL 69910 0 3
// end ;
67913: GO 67867
67915: POP
67916: POP
// if tigers then
67917: LD_VAR 0 2
67921: IFFALSE 68005
// for i = 1 to tigers do
67923: LD_ADDR_VAR 0 11
67927: PUSH
67928: DOUBLE
67929: LD_INT 1
67931: DEC
67932: ST_TO_ADDR
67933: LD_VAR 0 2
67937: PUSH
67938: FOR_TO
67939: IFFALSE 68003
// begin hc_class = class_tiger ;
67941: LD_ADDR_OWVAR 28
67945: PUSH
67946: LD_INT 14
67948: ST_TO_ADDR
// hc_gallery =  ;
67949: LD_ADDR_OWVAR 33
67953: PUSH
67954: LD_STRING 
67956: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67957: LD_ADDR_OWVAR 35
67961: PUSH
67962: LD_INT 7
67964: NEG
67965: PPUSH
67966: LD_INT 7
67968: PPUSH
67969: CALL_OW 12
67973: ST_TO_ADDR
// animal := CreateHuman ;
67974: LD_ADDR_VAR 0 12
67978: PUSH
67979: CALL_OW 44
67983: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67984: LD_VAR 0 12
67988: PPUSH
67989: LD_VAR 0 8
67993: PPUSH
67994: LD_INT 0
67996: PPUSH
67997: CALL 69910 0 3
// end ;
68001: GO 67938
68003: POP
68004: POP
// if apemans then
68005: LD_VAR 0 3
68009: IFFALSE 68132
// for i = 1 to apemans do
68011: LD_ADDR_VAR 0 11
68015: PUSH
68016: DOUBLE
68017: LD_INT 1
68019: DEC
68020: ST_TO_ADDR
68021: LD_VAR 0 3
68025: PUSH
68026: FOR_TO
68027: IFFALSE 68130
// begin hc_class = class_apeman ;
68029: LD_ADDR_OWVAR 28
68033: PUSH
68034: LD_INT 12
68036: ST_TO_ADDR
// hc_gallery =  ;
68037: LD_ADDR_OWVAR 33
68041: PUSH
68042: LD_STRING 
68044: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68045: LD_ADDR_OWVAR 35
68049: PUSH
68050: LD_INT 2
68052: NEG
68053: PPUSH
68054: LD_INT 2
68056: PPUSH
68057: CALL_OW 12
68061: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68062: LD_ADDR_OWVAR 31
68066: PUSH
68067: LD_INT 1
68069: PPUSH
68070: LD_INT 3
68072: PPUSH
68073: CALL_OW 12
68077: PUSH
68078: LD_INT 1
68080: PPUSH
68081: LD_INT 3
68083: PPUSH
68084: CALL_OW 12
68088: PUSH
68089: LD_INT 0
68091: PUSH
68092: LD_INT 0
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: ST_TO_ADDR
// animal := CreateHuman ;
68101: LD_ADDR_VAR 0 12
68105: PUSH
68106: CALL_OW 44
68110: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68111: LD_VAR 0 12
68115: PPUSH
68116: LD_VAR 0 8
68120: PPUSH
68121: LD_INT 0
68123: PPUSH
68124: CALL 69910 0 3
// end ;
68128: GO 68026
68130: POP
68131: POP
// if enchidnas then
68132: LD_VAR 0 4
68136: IFFALSE 68203
// for i = 1 to enchidnas do
68138: LD_ADDR_VAR 0 11
68142: PUSH
68143: DOUBLE
68144: LD_INT 1
68146: DEC
68147: ST_TO_ADDR
68148: LD_VAR 0 4
68152: PUSH
68153: FOR_TO
68154: IFFALSE 68201
// begin hc_class = 13 ;
68156: LD_ADDR_OWVAR 28
68160: PUSH
68161: LD_INT 13
68163: ST_TO_ADDR
// hc_gallery =  ;
68164: LD_ADDR_OWVAR 33
68168: PUSH
68169: LD_STRING 
68171: ST_TO_ADDR
// animal := CreateHuman ;
68172: LD_ADDR_VAR 0 12
68176: PUSH
68177: CALL_OW 44
68181: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68182: LD_VAR 0 12
68186: PPUSH
68187: LD_VAR 0 8
68191: PPUSH
68192: LD_INT 0
68194: PPUSH
68195: CALL 69910 0 3
// end ;
68199: GO 68153
68201: POP
68202: POP
// if fishes then
68203: LD_VAR 0 7
68207: IFFALSE 68274
// for i = 1 to fishes do
68209: LD_ADDR_VAR 0 11
68213: PUSH
68214: DOUBLE
68215: LD_INT 1
68217: DEC
68218: ST_TO_ADDR
68219: LD_VAR 0 7
68223: PUSH
68224: FOR_TO
68225: IFFALSE 68272
// begin hc_class = 20 ;
68227: LD_ADDR_OWVAR 28
68231: PUSH
68232: LD_INT 20
68234: ST_TO_ADDR
// hc_gallery =  ;
68235: LD_ADDR_OWVAR 33
68239: PUSH
68240: LD_STRING 
68242: ST_TO_ADDR
// animal := CreateHuman ;
68243: LD_ADDR_VAR 0 12
68247: PUSH
68248: CALL_OW 44
68252: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68253: LD_VAR 0 12
68257: PPUSH
68258: LD_VAR 0 9
68262: PPUSH
68263: LD_INT 0
68265: PPUSH
68266: CALL 69910 0 3
// end ;
68270: GO 68224
68272: POP
68273: POP
// end ;
68274: LD_VAR 0 10
68278: RET
// export function WantHeal ( sci , unit ) ; begin
68279: LD_INT 0
68281: PPUSH
// if GetTaskList ( sci ) > 0 then
68282: LD_VAR 0 1
68286: PPUSH
68287: CALL_OW 437
68291: PUSH
68292: LD_INT 0
68294: GREATER
68295: IFFALSE 68365
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68297: LD_VAR 0 1
68301: PPUSH
68302: CALL_OW 437
68306: PUSH
68307: LD_INT 1
68309: ARRAY
68310: PUSH
68311: LD_INT 1
68313: ARRAY
68314: PUSH
68315: LD_STRING l
68317: EQUAL
68318: PUSH
68319: LD_VAR 0 1
68323: PPUSH
68324: CALL_OW 437
68328: PUSH
68329: LD_INT 1
68331: ARRAY
68332: PUSH
68333: LD_INT 4
68335: ARRAY
68336: PUSH
68337: LD_VAR 0 2
68341: EQUAL
68342: AND
68343: IFFALSE 68355
// result := true else
68345: LD_ADDR_VAR 0 3
68349: PUSH
68350: LD_INT 1
68352: ST_TO_ADDR
68353: GO 68363
// result := false ;
68355: LD_ADDR_VAR 0 3
68359: PUSH
68360: LD_INT 0
68362: ST_TO_ADDR
// end else
68363: GO 68373
// result := false ;
68365: LD_ADDR_VAR 0 3
68369: PUSH
68370: LD_INT 0
68372: ST_TO_ADDR
// end ;
68373: LD_VAR 0 3
68377: RET
// export function HealTarget ( sci ) ; begin
68378: LD_INT 0
68380: PPUSH
// if not sci then
68381: LD_VAR 0 1
68385: NOT
68386: IFFALSE 68390
// exit ;
68388: GO 68455
// result := 0 ;
68390: LD_ADDR_VAR 0 2
68394: PUSH
68395: LD_INT 0
68397: ST_TO_ADDR
// if GetTaskList ( sci ) then
68398: LD_VAR 0 1
68402: PPUSH
68403: CALL_OW 437
68407: IFFALSE 68455
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68409: LD_VAR 0 1
68413: PPUSH
68414: CALL_OW 437
68418: PUSH
68419: LD_INT 1
68421: ARRAY
68422: PUSH
68423: LD_INT 1
68425: ARRAY
68426: PUSH
68427: LD_STRING l
68429: EQUAL
68430: IFFALSE 68455
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68432: LD_ADDR_VAR 0 2
68436: PUSH
68437: LD_VAR 0 1
68441: PPUSH
68442: CALL_OW 437
68446: PUSH
68447: LD_INT 1
68449: ARRAY
68450: PUSH
68451: LD_INT 4
68453: ARRAY
68454: ST_TO_ADDR
// end ;
68455: LD_VAR 0 2
68459: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68460: LD_INT 0
68462: PPUSH
68463: PPUSH
68464: PPUSH
68465: PPUSH
// if not base_units then
68466: LD_VAR 0 1
68470: NOT
68471: IFFALSE 68475
// exit ;
68473: GO 68562
// result := false ;
68475: LD_ADDR_VAR 0 2
68479: PUSH
68480: LD_INT 0
68482: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68483: LD_ADDR_VAR 0 5
68487: PUSH
68488: LD_VAR 0 1
68492: PPUSH
68493: LD_INT 21
68495: PUSH
68496: LD_INT 3
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PPUSH
68503: CALL_OW 72
68507: ST_TO_ADDR
// if not tmp then
68508: LD_VAR 0 5
68512: NOT
68513: IFFALSE 68517
// exit ;
68515: GO 68562
// for i in tmp do
68517: LD_ADDR_VAR 0 3
68521: PUSH
68522: LD_VAR 0 5
68526: PUSH
68527: FOR_IN
68528: IFFALSE 68560
// begin result := EnemyInRange ( i , 22 ) ;
68530: LD_ADDR_VAR 0 2
68534: PUSH
68535: LD_VAR 0 3
68539: PPUSH
68540: LD_INT 22
68542: PPUSH
68543: CALL 66798 0 2
68547: ST_TO_ADDR
// if result then
68548: LD_VAR 0 2
68552: IFFALSE 68558
// exit ;
68554: POP
68555: POP
68556: GO 68562
// end ;
68558: GO 68527
68560: POP
68561: POP
// end ;
68562: LD_VAR 0 2
68566: RET
// export function FilterByTag ( units , tag ) ; begin
68567: LD_INT 0
68569: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
68570: LD_ADDR_VAR 0 3
68574: PUSH
68575: LD_VAR 0 1
68579: PPUSH
68580: LD_INT 120
68582: PUSH
68583: LD_VAR 0 2
68587: PUSH
68588: EMPTY
68589: LIST
68590: LIST
68591: PPUSH
68592: CALL_OW 72
68596: ST_TO_ADDR
// end ;
68597: LD_VAR 0 3
68601: RET
// export function IsDriver ( un ) ; begin
68602: LD_INT 0
68604: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68605: LD_ADDR_VAR 0 2
68609: PUSH
68610: LD_VAR 0 1
68614: PUSH
68615: LD_INT 55
68617: PUSH
68618: EMPTY
68619: LIST
68620: PPUSH
68621: CALL_OW 69
68625: IN
68626: ST_TO_ADDR
// end ;
68627: LD_VAR 0 2
68631: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68632: LD_INT 0
68634: PPUSH
68635: PPUSH
// list := [ ] ;
68636: LD_ADDR_VAR 0 5
68640: PUSH
68641: EMPTY
68642: ST_TO_ADDR
// case d of 0 :
68643: LD_VAR 0 3
68647: PUSH
68648: LD_INT 0
68650: DOUBLE
68651: EQUAL
68652: IFTRUE 68656
68654: GO 68789
68656: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68657: LD_ADDR_VAR 0 5
68661: PUSH
68662: LD_VAR 0 1
68666: PUSH
68667: LD_INT 4
68669: MINUS
68670: PUSH
68671: LD_VAR 0 2
68675: PUSH
68676: LD_INT 4
68678: MINUS
68679: PUSH
68680: LD_INT 2
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: LIST
68687: PUSH
68688: LD_VAR 0 1
68692: PUSH
68693: LD_INT 3
68695: MINUS
68696: PUSH
68697: LD_VAR 0 2
68701: PUSH
68702: LD_INT 1
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: LIST
68709: PUSH
68710: LD_VAR 0 1
68714: PUSH
68715: LD_INT 4
68717: PLUS
68718: PUSH
68719: LD_VAR 0 2
68723: PUSH
68724: LD_INT 4
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: LIST
68731: PUSH
68732: LD_VAR 0 1
68736: PUSH
68737: LD_INT 3
68739: PLUS
68740: PUSH
68741: LD_VAR 0 2
68745: PUSH
68746: LD_INT 3
68748: PLUS
68749: PUSH
68750: LD_INT 5
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: LIST
68757: PUSH
68758: LD_VAR 0 1
68762: PUSH
68763: LD_VAR 0 2
68767: PUSH
68768: LD_INT 4
68770: PLUS
68771: PUSH
68772: LD_INT 0
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: LIST
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: ST_TO_ADDR
// end ; 1 :
68787: GO 69487
68789: LD_INT 1
68791: DOUBLE
68792: EQUAL
68793: IFTRUE 68797
68795: GO 68930
68797: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68798: LD_ADDR_VAR 0 5
68802: PUSH
68803: LD_VAR 0 1
68807: PUSH
68808: LD_VAR 0 2
68812: PUSH
68813: LD_INT 4
68815: MINUS
68816: PUSH
68817: LD_INT 3
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: LIST
68824: PUSH
68825: LD_VAR 0 1
68829: PUSH
68830: LD_INT 3
68832: MINUS
68833: PUSH
68834: LD_VAR 0 2
68838: PUSH
68839: LD_INT 3
68841: MINUS
68842: PUSH
68843: LD_INT 2
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: LIST
68850: PUSH
68851: LD_VAR 0 1
68855: PUSH
68856: LD_INT 4
68858: MINUS
68859: PUSH
68860: LD_VAR 0 2
68864: PUSH
68865: LD_INT 1
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: LIST
68872: PUSH
68873: LD_VAR 0 1
68877: PUSH
68878: LD_VAR 0 2
68882: PUSH
68883: LD_INT 3
68885: PLUS
68886: PUSH
68887: LD_INT 0
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: LIST
68894: PUSH
68895: LD_VAR 0 1
68899: PUSH
68900: LD_INT 4
68902: PLUS
68903: PUSH
68904: LD_VAR 0 2
68908: PUSH
68909: LD_INT 4
68911: PLUS
68912: PUSH
68913: LD_INT 5
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: LIST
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: LIST
68925: LIST
68926: LIST
68927: ST_TO_ADDR
// end ; 2 :
68928: GO 69487
68930: LD_INT 2
68932: DOUBLE
68933: EQUAL
68934: IFTRUE 68938
68936: GO 69067
68938: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68939: LD_ADDR_VAR 0 5
68943: PUSH
68944: LD_VAR 0 1
68948: PUSH
68949: LD_VAR 0 2
68953: PUSH
68954: LD_INT 3
68956: MINUS
68957: PUSH
68958: LD_INT 3
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: LIST
68965: PUSH
68966: LD_VAR 0 1
68970: PUSH
68971: LD_INT 4
68973: PLUS
68974: PUSH
68975: LD_VAR 0 2
68979: PUSH
68980: LD_INT 4
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: LIST
68987: PUSH
68988: LD_VAR 0 1
68992: PUSH
68993: LD_VAR 0 2
68997: PUSH
68998: LD_INT 4
69000: PLUS
69001: PUSH
69002: LD_INT 0
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: LIST
69009: PUSH
69010: LD_VAR 0 1
69014: PUSH
69015: LD_INT 3
69017: MINUS
69018: PUSH
69019: LD_VAR 0 2
69023: PUSH
69024: LD_INT 1
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: LIST
69031: PUSH
69032: LD_VAR 0 1
69036: PUSH
69037: LD_INT 4
69039: MINUS
69040: PUSH
69041: LD_VAR 0 2
69045: PUSH
69046: LD_INT 4
69048: MINUS
69049: PUSH
69050: LD_INT 2
69052: PUSH
69053: EMPTY
69054: LIST
69055: LIST
69056: LIST
69057: PUSH
69058: EMPTY
69059: LIST
69060: LIST
69061: LIST
69062: LIST
69063: LIST
69064: ST_TO_ADDR
// end ; 3 :
69065: GO 69487
69067: LD_INT 3
69069: DOUBLE
69070: EQUAL
69071: IFTRUE 69075
69073: GO 69208
69075: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69076: LD_ADDR_VAR 0 5
69080: PUSH
69081: LD_VAR 0 1
69085: PUSH
69086: LD_INT 3
69088: PLUS
69089: PUSH
69090: LD_VAR 0 2
69094: PUSH
69095: LD_INT 4
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: LIST
69102: PUSH
69103: LD_VAR 0 1
69107: PUSH
69108: LD_INT 4
69110: PLUS
69111: PUSH
69112: LD_VAR 0 2
69116: PUSH
69117: LD_INT 4
69119: PLUS
69120: PUSH
69121: LD_INT 5
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: LIST
69128: PUSH
69129: LD_VAR 0 1
69133: PUSH
69134: LD_INT 4
69136: MINUS
69137: PUSH
69138: LD_VAR 0 2
69142: PUSH
69143: LD_INT 1
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: LIST
69150: PUSH
69151: LD_VAR 0 1
69155: PUSH
69156: LD_VAR 0 2
69160: PUSH
69161: LD_INT 4
69163: MINUS
69164: PUSH
69165: LD_INT 3
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: LIST
69172: PUSH
69173: LD_VAR 0 1
69177: PUSH
69178: LD_INT 3
69180: MINUS
69181: PUSH
69182: LD_VAR 0 2
69186: PUSH
69187: LD_INT 3
69189: MINUS
69190: PUSH
69191: LD_INT 2
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: LIST
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: ST_TO_ADDR
// end ; 4 :
69206: GO 69487
69208: LD_INT 4
69210: DOUBLE
69211: EQUAL
69212: IFTRUE 69216
69214: GO 69349
69216: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69217: LD_ADDR_VAR 0 5
69221: PUSH
69222: LD_VAR 0 1
69226: PUSH
69227: LD_VAR 0 2
69231: PUSH
69232: LD_INT 4
69234: PLUS
69235: PUSH
69236: LD_INT 0
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: LIST
69243: PUSH
69244: LD_VAR 0 1
69248: PUSH
69249: LD_INT 3
69251: PLUS
69252: PUSH
69253: LD_VAR 0 2
69257: PUSH
69258: LD_INT 3
69260: PLUS
69261: PUSH
69262: LD_INT 5
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: LIST
69269: PUSH
69270: LD_VAR 0 1
69274: PUSH
69275: LD_INT 4
69277: PLUS
69278: PUSH
69279: LD_VAR 0 2
69283: PUSH
69284: LD_INT 4
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: LIST
69291: PUSH
69292: LD_VAR 0 1
69296: PUSH
69297: LD_VAR 0 2
69301: PUSH
69302: LD_INT 3
69304: MINUS
69305: PUSH
69306: LD_INT 3
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: LIST
69313: PUSH
69314: LD_VAR 0 1
69318: PUSH
69319: LD_INT 4
69321: MINUS
69322: PUSH
69323: LD_VAR 0 2
69327: PUSH
69328: LD_INT 4
69330: MINUS
69331: PUSH
69332: LD_INT 2
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: LIST
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: LIST
69344: LIST
69345: LIST
69346: ST_TO_ADDR
// end ; 5 :
69347: GO 69487
69349: LD_INT 5
69351: DOUBLE
69352: EQUAL
69353: IFTRUE 69357
69355: GO 69486
69357: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69358: LD_ADDR_VAR 0 5
69362: PUSH
69363: LD_VAR 0 1
69367: PUSH
69368: LD_INT 4
69370: MINUS
69371: PUSH
69372: LD_VAR 0 2
69376: PUSH
69377: LD_INT 1
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: LIST
69384: PUSH
69385: LD_VAR 0 1
69389: PUSH
69390: LD_VAR 0 2
69394: PUSH
69395: LD_INT 4
69397: MINUS
69398: PUSH
69399: LD_INT 3
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: LIST
69406: PUSH
69407: LD_VAR 0 1
69411: PUSH
69412: LD_INT 4
69414: PLUS
69415: PUSH
69416: LD_VAR 0 2
69420: PUSH
69421: LD_INT 4
69423: PLUS
69424: PUSH
69425: LD_INT 5
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: LIST
69432: PUSH
69433: LD_VAR 0 1
69437: PUSH
69438: LD_INT 3
69440: PLUS
69441: PUSH
69442: LD_VAR 0 2
69446: PUSH
69447: LD_INT 4
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: LIST
69454: PUSH
69455: LD_VAR 0 1
69459: PUSH
69460: LD_VAR 0 2
69464: PUSH
69465: LD_INT 3
69467: PLUS
69468: PUSH
69469: LD_INT 0
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: LIST
69476: PUSH
69477: EMPTY
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: ST_TO_ADDR
// end ; end ;
69484: GO 69487
69486: POP
// result := list ;
69487: LD_ADDR_VAR 0 4
69491: PUSH
69492: LD_VAR 0 5
69496: ST_TO_ADDR
// end ;
69497: LD_VAR 0 4
69501: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69502: LD_INT 0
69504: PPUSH
69505: PPUSH
69506: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69507: LD_VAR 0 1
69511: NOT
69512: PUSH
69513: LD_VAR 0 2
69517: PUSH
69518: LD_INT 1
69520: PUSH
69521: LD_INT 2
69523: PUSH
69524: LD_INT 3
69526: PUSH
69527: LD_INT 4
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: IN
69536: NOT
69537: OR
69538: IFFALSE 69542
// exit ;
69540: GO 69634
// tmp := [ ] ;
69542: LD_ADDR_VAR 0 5
69546: PUSH
69547: EMPTY
69548: ST_TO_ADDR
// for i in units do
69549: LD_ADDR_VAR 0 4
69553: PUSH
69554: LD_VAR 0 1
69558: PUSH
69559: FOR_IN
69560: IFFALSE 69603
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
69562: LD_ADDR_VAR 0 5
69566: PUSH
69567: LD_VAR 0 5
69571: PPUSH
69572: LD_VAR 0 5
69576: PUSH
69577: LD_INT 1
69579: PLUS
69580: PPUSH
69581: LD_VAR 0 4
69585: PPUSH
69586: LD_VAR 0 2
69590: PPUSH
69591: CALL_OW 259
69595: PPUSH
69596: CALL_OW 2
69600: ST_TO_ADDR
69601: GO 69559
69603: POP
69604: POP
// if not tmp then
69605: LD_VAR 0 5
69609: NOT
69610: IFFALSE 69614
// exit ;
69612: GO 69634
// result := SortListByListDesc ( units , tmp ) ;
69614: LD_ADDR_VAR 0 3
69618: PUSH
69619: LD_VAR 0 1
69623: PPUSH
69624: LD_VAR 0 5
69628: PPUSH
69629: CALL_OW 77
69633: ST_TO_ADDR
// end ;
69634: LD_VAR 0 3
69638: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69639: LD_INT 0
69641: PPUSH
69642: PPUSH
69643: PPUSH
// result := false ;
69644: LD_ADDR_VAR 0 3
69648: PUSH
69649: LD_INT 0
69651: ST_TO_ADDR
// x := GetX ( building ) ;
69652: LD_ADDR_VAR 0 4
69656: PUSH
69657: LD_VAR 0 2
69661: PPUSH
69662: CALL_OW 250
69666: ST_TO_ADDR
// y := GetY ( building ) ;
69667: LD_ADDR_VAR 0 5
69671: PUSH
69672: LD_VAR 0 2
69676: PPUSH
69677: CALL_OW 251
69681: ST_TO_ADDR
// if not building or not x or not y then
69682: LD_VAR 0 2
69686: NOT
69687: PUSH
69688: LD_VAR 0 4
69692: NOT
69693: OR
69694: PUSH
69695: LD_VAR 0 5
69699: NOT
69700: OR
69701: IFFALSE 69705
// exit ;
69703: GO 69797
// if GetTaskList ( unit ) then
69705: LD_VAR 0 1
69709: PPUSH
69710: CALL_OW 437
69714: IFFALSE 69797
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69716: LD_STRING e
69718: PUSH
69719: LD_VAR 0 1
69723: PPUSH
69724: CALL_OW 437
69728: PUSH
69729: LD_INT 1
69731: ARRAY
69732: PUSH
69733: LD_INT 1
69735: ARRAY
69736: EQUAL
69737: PUSH
69738: LD_VAR 0 4
69742: PUSH
69743: LD_VAR 0 1
69747: PPUSH
69748: CALL_OW 437
69752: PUSH
69753: LD_INT 1
69755: ARRAY
69756: PUSH
69757: LD_INT 2
69759: ARRAY
69760: EQUAL
69761: AND
69762: PUSH
69763: LD_VAR 0 5
69767: PUSH
69768: LD_VAR 0 1
69772: PPUSH
69773: CALL_OW 437
69777: PUSH
69778: LD_INT 1
69780: ARRAY
69781: PUSH
69782: LD_INT 3
69784: ARRAY
69785: EQUAL
69786: AND
69787: IFFALSE 69797
// result := true end ;
69789: LD_ADDR_VAR 0 3
69793: PUSH
69794: LD_INT 1
69796: ST_TO_ADDR
// end ;
69797: LD_VAR 0 3
69801: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69802: LD_INT 0
69804: PPUSH
// result := false ;
69805: LD_ADDR_VAR 0 4
69809: PUSH
69810: LD_INT 0
69812: ST_TO_ADDR
// if GetTaskList ( unit ) then
69813: LD_VAR 0 1
69817: PPUSH
69818: CALL_OW 437
69822: IFFALSE 69905
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69824: LD_STRING M
69826: PUSH
69827: LD_VAR 0 1
69831: PPUSH
69832: CALL_OW 437
69836: PUSH
69837: LD_INT 1
69839: ARRAY
69840: PUSH
69841: LD_INT 1
69843: ARRAY
69844: EQUAL
69845: PUSH
69846: LD_VAR 0 2
69850: PUSH
69851: LD_VAR 0 1
69855: PPUSH
69856: CALL_OW 437
69860: PUSH
69861: LD_INT 1
69863: ARRAY
69864: PUSH
69865: LD_INT 2
69867: ARRAY
69868: EQUAL
69869: AND
69870: PUSH
69871: LD_VAR 0 3
69875: PUSH
69876: LD_VAR 0 1
69880: PPUSH
69881: CALL_OW 437
69885: PUSH
69886: LD_INT 1
69888: ARRAY
69889: PUSH
69890: LD_INT 3
69892: ARRAY
69893: EQUAL
69894: AND
69895: IFFALSE 69905
// result := true ;
69897: LD_ADDR_VAR 0 4
69901: PUSH
69902: LD_INT 1
69904: ST_TO_ADDR
// end ; end ;
69905: LD_VAR 0 4
69909: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69910: LD_INT 0
69912: PPUSH
69913: PPUSH
69914: PPUSH
69915: PPUSH
// if not unit or not area then
69916: LD_VAR 0 1
69920: NOT
69921: PUSH
69922: LD_VAR 0 2
69926: NOT
69927: OR
69928: IFFALSE 69932
// exit ;
69930: GO 70096
// tmp := AreaToList ( area , i ) ;
69932: LD_ADDR_VAR 0 6
69936: PUSH
69937: LD_VAR 0 2
69941: PPUSH
69942: LD_VAR 0 5
69946: PPUSH
69947: CALL_OW 517
69951: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69952: LD_ADDR_VAR 0 5
69956: PUSH
69957: DOUBLE
69958: LD_INT 1
69960: DEC
69961: ST_TO_ADDR
69962: LD_VAR 0 6
69966: PUSH
69967: LD_INT 1
69969: ARRAY
69970: PUSH
69971: FOR_TO
69972: IFFALSE 70094
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69974: LD_ADDR_VAR 0 7
69978: PUSH
69979: LD_VAR 0 6
69983: PUSH
69984: LD_INT 1
69986: ARRAY
69987: PUSH
69988: LD_VAR 0 5
69992: ARRAY
69993: PUSH
69994: LD_VAR 0 6
69998: PUSH
69999: LD_INT 2
70001: ARRAY
70002: PUSH
70003: LD_VAR 0 5
70007: ARRAY
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
70013: LD_VAR 0 7
70017: PUSH
70018: LD_INT 1
70020: ARRAY
70021: PPUSH
70022: LD_VAR 0 7
70026: PUSH
70027: LD_INT 2
70029: ARRAY
70030: PPUSH
70031: CALL_OW 428
70035: PUSH
70036: LD_INT 0
70038: EQUAL
70039: IFFALSE 70092
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70041: LD_VAR 0 1
70045: PPUSH
70046: LD_VAR 0 7
70050: PUSH
70051: LD_INT 1
70053: ARRAY
70054: PPUSH
70055: LD_VAR 0 7
70059: PUSH
70060: LD_INT 2
70062: ARRAY
70063: PPUSH
70064: LD_VAR 0 3
70068: PPUSH
70069: CALL_OW 48
// result := IsPlaced ( unit ) ;
70073: LD_ADDR_VAR 0 4
70077: PUSH
70078: LD_VAR 0 1
70082: PPUSH
70083: CALL_OW 305
70087: ST_TO_ADDR
// exit ;
70088: POP
70089: POP
70090: GO 70096
// end ; end ;
70092: GO 69971
70094: POP
70095: POP
// end ;
70096: LD_VAR 0 4
70100: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70101: LD_INT 0
70103: PPUSH
70104: PPUSH
70105: PPUSH
// if not side or side > 8 then
70106: LD_VAR 0 1
70110: NOT
70111: PUSH
70112: LD_VAR 0 1
70116: PUSH
70117: LD_INT 8
70119: GREATER
70120: OR
70121: IFFALSE 70125
// exit ;
70123: GO 70312
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70125: LD_ADDR_VAR 0 4
70129: PUSH
70130: LD_INT 22
70132: PUSH
70133: LD_VAR 0 1
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 21
70144: PUSH
70145: LD_INT 3
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PPUSH
70156: CALL_OW 69
70160: ST_TO_ADDR
// if not tmp then
70161: LD_VAR 0 4
70165: NOT
70166: IFFALSE 70170
// exit ;
70168: GO 70312
// enable_addtolog := true ;
70170: LD_ADDR_OWVAR 81
70174: PUSH
70175: LD_INT 1
70177: ST_TO_ADDR
// AddToLog ( [ ) ;
70178: LD_STRING [
70180: PPUSH
70181: CALL_OW 561
// for i in tmp do
70185: LD_ADDR_VAR 0 3
70189: PUSH
70190: LD_VAR 0 4
70194: PUSH
70195: FOR_IN
70196: IFFALSE 70303
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70198: LD_STRING [
70200: PUSH
70201: LD_VAR 0 3
70205: PPUSH
70206: CALL_OW 266
70210: STR
70211: PUSH
70212: LD_STRING , 
70214: STR
70215: PUSH
70216: LD_VAR 0 3
70220: PPUSH
70221: CALL_OW 250
70225: STR
70226: PUSH
70227: LD_STRING , 
70229: STR
70230: PUSH
70231: LD_VAR 0 3
70235: PPUSH
70236: CALL_OW 251
70240: STR
70241: PUSH
70242: LD_STRING , 
70244: STR
70245: PUSH
70246: LD_VAR 0 3
70250: PPUSH
70251: CALL_OW 254
70255: STR
70256: PUSH
70257: LD_STRING , 
70259: STR
70260: PUSH
70261: LD_VAR 0 3
70265: PPUSH
70266: LD_INT 1
70268: PPUSH
70269: CALL_OW 268
70273: STR
70274: PUSH
70275: LD_STRING , 
70277: STR
70278: PUSH
70279: LD_VAR 0 3
70283: PPUSH
70284: LD_INT 2
70286: PPUSH
70287: CALL_OW 268
70291: STR
70292: PUSH
70293: LD_STRING ],
70295: STR
70296: PPUSH
70297: CALL_OW 561
// end ;
70301: GO 70195
70303: POP
70304: POP
// AddToLog ( ]; ) ;
70305: LD_STRING ];
70307: PPUSH
70308: CALL_OW 561
// end ;
70312: LD_VAR 0 2
70316: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70317: LD_INT 0
70319: PPUSH
70320: PPUSH
70321: PPUSH
70322: PPUSH
70323: PPUSH
// if not area or not rate or not max then
70324: LD_VAR 0 1
70328: NOT
70329: PUSH
70330: LD_VAR 0 2
70334: NOT
70335: OR
70336: PUSH
70337: LD_VAR 0 4
70341: NOT
70342: OR
70343: IFFALSE 70347
// exit ;
70345: GO 70536
// while 1 do
70347: LD_INT 1
70349: IFFALSE 70536
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70351: LD_ADDR_VAR 0 9
70355: PUSH
70356: LD_VAR 0 1
70360: PPUSH
70361: LD_INT 1
70363: PPUSH
70364: CALL_OW 287
70368: PUSH
70369: LD_INT 10
70371: MUL
70372: ST_TO_ADDR
// r := rate / 10 ;
70373: LD_ADDR_VAR 0 7
70377: PUSH
70378: LD_VAR 0 2
70382: PUSH
70383: LD_INT 10
70385: DIVREAL
70386: ST_TO_ADDR
// time := 1 1$00 ;
70387: LD_ADDR_VAR 0 8
70391: PUSH
70392: LD_INT 2100
70394: ST_TO_ADDR
// if amount < min then
70395: LD_VAR 0 9
70399: PUSH
70400: LD_VAR 0 3
70404: LESS
70405: IFFALSE 70423
// r := r * 2 else
70407: LD_ADDR_VAR 0 7
70411: PUSH
70412: LD_VAR 0 7
70416: PUSH
70417: LD_INT 2
70419: MUL
70420: ST_TO_ADDR
70421: GO 70449
// if amount > max then
70423: LD_VAR 0 9
70427: PUSH
70428: LD_VAR 0 4
70432: GREATER
70433: IFFALSE 70449
// r := r / 2 ;
70435: LD_ADDR_VAR 0 7
70439: PUSH
70440: LD_VAR 0 7
70444: PUSH
70445: LD_INT 2
70447: DIVREAL
70448: ST_TO_ADDR
// time := time / r ;
70449: LD_ADDR_VAR 0 8
70453: PUSH
70454: LD_VAR 0 8
70458: PUSH
70459: LD_VAR 0 7
70463: DIVREAL
70464: ST_TO_ADDR
// if time < 0 then
70465: LD_VAR 0 8
70469: PUSH
70470: LD_INT 0
70472: LESS
70473: IFFALSE 70490
// time := time * - 1 ;
70475: LD_ADDR_VAR 0 8
70479: PUSH
70480: LD_VAR 0 8
70484: PUSH
70485: LD_INT 1
70487: NEG
70488: MUL
70489: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
70490: LD_VAR 0 8
70494: PUSH
70495: LD_INT 35
70497: PPUSH
70498: LD_INT 875
70500: PPUSH
70501: CALL_OW 12
70505: PLUS
70506: PPUSH
70507: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70511: LD_INT 1
70513: PPUSH
70514: LD_INT 5
70516: PPUSH
70517: CALL_OW 12
70521: PPUSH
70522: LD_VAR 0 1
70526: PPUSH
70527: LD_INT 1
70529: PPUSH
70530: CALL_OW 55
// end ;
70534: GO 70347
// end ;
70536: LD_VAR 0 5
70540: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70541: LD_INT 0
70543: PPUSH
70544: PPUSH
70545: PPUSH
70546: PPUSH
70547: PPUSH
70548: PPUSH
70549: PPUSH
70550: PPUSH
// if not turrets or not factories then
70551: LD_VAR 0 1
70555: NOT
70556: PUSH
70557: LD_VAR 0 2
70561: NOT
70562: OR
70563: IFFALSE 70567
// exit ;
70565: GO 70874
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70567: LD_ADDR_VAR 0 10
70571: PUSH
70572: LD_INT 5
70574: PUSH
70575: LD_INT 6
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: PUSH
70582: LD_INT 2
70584: PUSH
70585: LD_INT 4
70587: PUSH
70588: EMPTY
70589: LIST
70590: LIST
70591: PUSH
70592: LD_INT 3
70594: PUSH
70595: LD_INT 5
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 24
70609: PUSH
70610: LD_INT 25
70612: PUSH
70613: EMPTY
70614: LIST
70615: LIST
70616: PUSH
70617: LD_INT 23
70619: PUSH
70620: LD_INT 27
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 42
70633: PUSH
70634: LD_INT 43
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 44
70643: PUSH
70644: LD_INT 46
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 45
70653: PUSH
70654: LD_INT 47
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: LIST
70665: PUSH
70666: EMPTY
70667: LIST
70668: LIST
70669: LIST
70670: ST_TO_ADDR
// result := [ ] ;
70671: LD_ADDR_VAR 0 3
70675: PUSH
70676: EMPTY
70677: ST_TO_ADDR
// for i in turrets do
70678: LD_ADDR_VAR 0 4
70682: PUSH
70683: LD_VAR 0 1
70687: PUSH
70688: FOR_IN
70689: IFFALSE 70872
// begin nat := GetNation ( i ) ;
70691: LD_ADDR_VAR 0 7
70695: PUSH
70696: LD_VAR 0 4
70700: PPUSH
70701: CALL_OW 248
70705: ST_TO_ADDR
// weapon := 0 ;
70706: LD_ADDR_VAR 0 8
70710: PUSH
70711: LD_INT 0
70713: ST_TO_ADDR
// if not nat then
70714: LD_VAR 0 7
70718: NOT
70719: IFFALSE 70723
// continue ;
70721: GO 70688
// for j in list [ nat ] do
70723: LD_ADDR_VAR 0 5
70727: PUSH
70728: LD_VAR 0 10
70732: PUSH
70733: LD_VAR 0 7
70737: ARRAY
70738: PUSH
70739: FOR_IN
70740: IFFALSE 70781
// if GetBWeapon ( i ) = j [ 1 ] then
70742: LD_VAR 0 4
70746: PPUSH
70747: CALL_OW 269
70751: PUSH
70752: LD_VAR 0 5
70756: PUSH
70757: LD_INT 1
70759: ARRAY
70760: EQUAL
70761: IFFALSE 70779
// begin weapon := j [ 2 ] ;
70763: LD_ADDR_VAR 0 8
70767: PUSH
70768: LD_VAR 0 5
70772: PUSH
70773: LD_INT 2
70775: ARRAY
70776: ST_TO_ADDR
// break ;
70777: GO 70781
// end ;
70779: GO 70739
70781: POP
70782: POP
// if not weapon then
70783: LD_VAR 0 8
70787: NOT
70788: IFFALSE 70792
// continue ;
70790: GO 70688
// for k in factories do
70792: LD_ADDR_VAR 0 6
70796: PUSH
70797: LD_VAR 0 2
70801: PUSH
70802: FOR_IN
70803: IFFALSE 70868
// begin weapons := AvailableWeaponList ( k ) ;
70805: LD_ADDR_VAR 0 9
70809: PUSH
70810: LD_VAR 0 6
70814: PPUSH
70815: CALL_OW 478
70819: ST_TO_ADDR
// if not weapons then
70820: LD_VAR 0 9
70824: NOT
70825: IFFALSE 70829
// continue ;
70827: GO 70802
// if weapon in weapons then
70829: LD_VAR 0 8
70833: PUSH
70834: LD_VAR 0 9
70838: IN
70839: IFFALSE 70866
// begin result := [ i , weapon ] ;
70841: LD_ADDR_VAR 0 3
70845: PUSH
70846: LD_VAR 0 4
70850: PUSH
70851: LD_VAR 0 8
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: ST_TO_ADDR
// exit ;
70860: POP
70861: POP
70862: POP
70863: POP
70864: GO 70874
// end ; end ;
70866: GO 70802
70868: POP
70869: POP
// end ;
70870: GO 70688
70872: POP
70873: POP
// end ;
70874: LD_VAR 0 3
70878: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70879: LD_INT 0
70881: PPUSH
// if not side or side > 8 then
70882: LD_VAR 0 3
70886: NOT
70887: PUSH
70888: LD_VAR 0 3
70892: PUSH
70893: LD_INT 8
70895: GREATER
70896: OR
70897: IFFALSE 70901
// exit ;
70899: GO 70960
// if not range then
70901: LD_VAR 0 4
70905: NOT
70906: IFFALSE 70917
// range := - 12 ;
70908: LD_ADDR_VAR 0 4
70912: PUSH
70913: LD_INT 12
70915: NEG
70916: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70917: LD_VAR 0 1
70921: PPUSH
70922: LD_VAR 0 2
70926: PPUSH
70927: LD_VAR 0 3
70931: PPUSH
70932: LD_VAR 0 4
70936: PPUSH
70937: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70941: LD_VAR 0 1
70945: PPUSH
70946: LD_VAR 0 2
70950: PPUSH
70951: LD_VAR 0 3
70955: PPUSH
70956: CALL_OW 331
// end ;
70960: LD_VAR 0 5
70964: RET
// export function Video ( mode ) ; begin
70965: LD_INT 0
70967: PPUSH
// ingame_video = mode ;
70968: LD_ADDR_OWVAR 52
70972: PUSH
70973: LD_VAR 0 1
70977: ST_TO_ADDR
// interface_hidden = mode ;
70978: LD_ADDR_OWVAR 54
70982: PUSH
70983: LD_VAR 0 1
70987: ST_TO_ADDR
// end ;
70988: LD_VAR 0 2
70992: RET
// export function Join ( array , element ) ; begin
70993: LD_INT 0
70995: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70996: LD_ADDR_VAR 0 3
71000: PUSH
71001: LD_VAR 0 1
71005: PPUSH
71006: LD_VAR 0 1
71010: PUSH
71011: LD_INT 1
71013: PLUS
71014: PPUSH
71015: LD_VAR 0 2
71019: PPUSH
71020: CALL_OW 1
71024: ST_TO_ADDR
// end ;
71025: LD_VAR 0 3
71029: RET
// export function JoinUnion ( array , element ) ; begin
71030: LD_INT 0
71032: PPUSH
// result := array union element ;
71033: LD_ADDR_VAR 0 3
71037: PUSH
71038: LD_VAR 0 1
71042: PUSH
71043: LD_VAR 0 2
71047: UNION
71048: ST_TO_ADDR
// end ;
71049: LD_VAR 0 3
71053: RET
// export function GetBehemoths ( side ) ; begin
71054: LD_INT 0
71056: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
71057: LD_ADDR_VAR 0 2
71061: PUSH
71062: LD_INT 22
71064: PUSH
71065: LD_VAR 0 1
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: PUSH
71074: LD_INT 31
71076: PUSH
71077: LD_INT 25
71079: PUSH
71080: EMPTY
71081: LIST
71082: LIST
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: PPUSH
71088: CALL_OW 69
71092: ST_TO_ADDR
// end ;
71093: LD_VAR 0 2
71097: RET
// export function Shuffle ( array ) ; var i , index ; begin
71098: LD_INT 0
71100: PPUSH
71101: PPUSH
71102: PPUSH
// result := [ ] ;
71103: LD_ADDR_VAR 0 2
71107: PUSH
71108: EMPTY
71109: ST_TO_ADDR
// if not array then
71110: LD_VAR 0 1
71114: NOT
71115: IFFALSE 71119
// exit ;
71117: GO 71218
// Randomize ;
71119: CALL_OW 10
// for i = array downto 1 do
71123: LD_ADDR_VAR 0 3
71127: PUSH
71128: DOUBLE
71129: LD_VAR 0 1
71133: INC
71134: ST_TO_ADDR
71135: LD_INT 1
71137: PUSH
71138: FOR_DOWNTO
71139: IFFALSE 71216
// begin index := rand ( 1 , array ) ;
71141: LD_ADDR_VAR 0 4
71145: PUSH
71146: LD_INT 1
71148: PPUSH
71149: LD_VAR 0 1
71153: PPUSH
71154: CALL_OW 12
71158: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71159: LD_ADDR_VAR 0 2
71163: PUSH
71164: LD_VAR 0 2
71168: PPUSH
71169: LD_VAR 0 2
71173: PUSH
71174: LD_INT 1
71176: PLUS
71177: PPUSH
71178: LD_VAR 0 1
71182: PUSH
71183: LD_VAR 0 4
71187: ARRAY
71188: PPUSH
71189: CALL_OW 2
71193: ST_TO_ADDR
// array := Delete ( array , index ) ;
71194: LD_ADDR_VAR 0 1
71198: PUSH
71199: LD_VAR 0 1
71203: PPUSH
71204: LD_VAR 0 4
71208: PPUSH
71209: CALL_OW 3
71213: ST_TO_ADDR
// end ;
71214: GO 71138
71216: POP
71217: POP
// end ;
71218: LD_VAR 0 2
71222: RET
// export function GetBaseMaterials ( base ) ; begin
71223: LD_INT 0
71225: PPUSH
// result := [ 0 , 0 , 0 ] ;
71226: LD_ADDR_VAR 0 2
71230: PUSH
71231: LD_INT 0
71233: PUSH
71234: LD_INT 0
71236: PUSH
71237: LD_INT 0
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: LIST
71244: ST_TO_ADDR
// if not base then
71245: LD_VAR 0 1
71249: NOT
71250: IFFALSE 71254
// exit ;
71252: GO 71303
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71254: LD_ADDR_VAR 0 2
71258: PUSH
71259: LD_VAR 0 1
71263: PPUSH
71264: LD_INT 1
71266: PPUSH
71267: CALL_OW 275
71271: PUSH
71272: LD_VAR 0 1
71276: PPUSH
71277: LD_INT 2
71279: PPUSH
71280: CALL_OW 275
71284: PUSH
71285: LD_VAR 0 1
71289: PPUSH
71290: LD_INT 3
71292: PPUSH
71293: CALL_OW 275
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: LIST
71302: ST_TO_ADDR
// end ;
71303: LD_VAR 0 2
71307: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71308: LD_INT 0
71310: PPUSH
71311: PPUSH
// result := array ;
71312: LD_ADDR_VAR 0 3
71316: PUSH
71317: LD_VAR 0 1
71321: ST_TO_ADDR
// if size > 0 then
71322: LD_VAR 0 2
71326: PUSH
71327: LD_INT 0
71329: GREATER
71330: IFFALSE 71376
// for i := array downto size do
71332: LD_ADDR_VAR 0 4
71336: PUSH
71337: DOUBLE
71338: LD_VAR 0 1
71342: INC
71343: ST_TO_ADDR
71344: LD_VAR 0 2
71348: PUSH
71349: FOR_DOWNTO
71350: IFFALSE 71374
// result := Delete ( result , result ) ;
71352: LD_ADDR_VAR 0 3
71356: PUSH
71357: LD_VAR 0 3
71361: PPUSH
71362: LD_VAR 0 3
71366: PPUSH
71367: CALL_OW 3
71371: ST_TO_ADDR
71372: GO 71349
71374: POP
71375: POP
// end ;
71376: LD_VAR 0 3
71380: RET
// export function ComExit ( unit ) ; var tmp ; begin
71381: LD_INT 0
71383: PPUSH
71384: PPUSH
// if not IsInUnit ( unit ) then
71385: LD_VAR 0 1
71389: PPUSH
71390: CALL_OW 310
71394: NOT
71395: IFFALSE 71399
// exit ;
71397: GO 71459
// tmp := IsInUnit ( unit ) ;
71399: LD_ADDR_VAR 0 3
71403: PUSH
71404: LD_VAR 0 1
71408: PPUSH
71409: CALL_OW 310
71413: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71414: LD_VAR 0 3
71418: PPUSH
71419: CALL_OW 247
71423: PUSH
71424: LD_INT 2
71426: EQUAL
71427: IFFALSE 71440
// ComExitVehicle ( unit ) else
71429: LD_VAR 0 1
71433: PPUSH
71434: CALL_OW 121
71438: GO 71449
// ComExitBuilding ( unit ) ;
71440: LD_VAR 0 1
71444: PPUSH
71445: CALL_OW 122
// result := tmp ;
71449: LD_ADDR_VAR 0 2
71453: PUSH
71454: LD_VAR 0 3
71458: ST_TO_ADDR
// end ;
71459: LD_VAR 0 2
71463: RET
// export function ComExitAll ( units ) ; var i ; begin
71464: LD_INT 0
71466: PPUSH
71467: PPUSH
// if not units then
71468: LD_VAR 0 1
71472: NOT
71473: IFFALSE 71477
// exit ;
71475: GO 71503
// for i in units do
71477: LD_ADDR_VAR 0 3
71481: PUSH
71482: LD_VAR 0 1
71486: PUSH
71487: FOR_IN
71488: IFFALSE 71501
// ComExit ( i ) ;
71490: LD_VAR 0 3
71494: PPUSH
71495: CALL 71381 0 1
71499: GO 71487
71501: POP
71502: POP
// end ;
71503: LD_VAR 0 2
71507: RET
// export function ResetHc ; begin
71508: LD_INT 0
71510: PPUSH
// InitHc ;
71511: CALL_OW 19
// hc_importance := 0 ;
71515: LD_ADDR_OWVAR 32
71519: PUSH
71520: LD_INT 0
71522: ST_TO_ADDR
// end ;
71523: LD_VAR 0 1
71527: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71528: LD_INT 0
71530: PPUSH
71531: PPUSH
71532: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71533: LD_ADDR_VAR 0 6
71537: PUSH
71538: LD_VAR 0 1
71542: PUSH
71543: LD_VAR 0 3
71547: PLUS
71548: PUSH
71549: LD_INT 2
71551: DIV
71552: ST_TO_ADDR
// if _x < 0 then
71553: LD_VAR 0 6
71557: PUSH
71558: LD_INT 0
71560: LESS
71561: IFFALSE 71578
// _x := _x * - 1 ;
71563: LD_ADDR_VAR 0 6
71567: PUSH
71568: LD_VAR 0 6
71572: PUSH
71573: LD_INT 1
71575: NEG
71576: MUL
71577: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71578: LD_ADDR_VAR 0 7
71582: PUSH
71583: LD_VAR 0 2
71587: PUSH
71588: LD_VAR 0 4
71592: PLUS
71593: PUSH
71594: LD_INT 2
71596: DIV
71597: ST_TO_ADDR
// if _y < 0 then
71598: LD_VAR 0 7
71602: PUSH
71603: LD_INT 0
71605: LESS
71606: IFFALSE 71623
// _y := _y * - 1 ;
71608: LD_ADDR_VAR 0 7
71612: PUSH
71613: LD_VAR 0 7
71617: PUSH
71618: LD_INT 1
71620: NEG
71621: MUL
71622: ST_TO_ADDR
// result := [ _x , _y ] ;
71623: LD_ADDR_VAR 0 5
71627: PUSH
71628: LD_VAR 0 6
71632: PUSH
71633: LD_VAR 0 7
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: ST_TO_ADDR
// end ;
71642: LD_VAR 0 5
71646: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71647: LD_INT 0
71649: PPUSH
71650: PPUSH
71651: PPUSH
71652: PPUSH
// task := GetTaskList ( unit ) ;
71653: LD_ADDR_VAR 0 7
71657: PUSH
71658: LD_VAR 0 1
71662: PPUSH
71663: CALL_OW 437
71667: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71668: LD_VAR 0 7
71672: NOT
71673: PUSH
71674: LD_VAR 0 1
71678: PPUSH
71679: LD_VAR 0 2
71683: PPUSH
71684: CALL_OW 308
71688: NOT
71689: AND
71690: IFFALSE 71694
// exit ;
71692: GO 71812
// if IsInArea ( unit , area ) then
71694: LD_VAR 0 1
71698: PPUSH
71699: LD_VAR 0 2
71703: PPUSH
71704: CALL_OW 308
71708: IFFALSE 71726
// begin ComMoveToArea ( unit , goAway ) ;
71710: LD_VAR 0 1
71714: PPUSH
71715: LD_VAR 0 3
71719: PPUSH
71720: CALL_OW 113
// exit ;
71724: GO 71812
// end ; if task [ 1 ] [ 1 ] <> M then
71726: LD_VAR 0 7
71730: PUSH
71731: LD_INT 1
71733: ARRAY
71734: PUSH
71735: LD_INT 1
71737: ARRAY
71738: PUSH
71739: LD_STRING M
71741: NONEQUAL
71742: IFFALSE 71746
// exit ;
71744: GO 71812
// x := task [ 1 ] [ 2 ] ;
71746: LD_ADDR_VAR 0 5
71750: PUSH
71751: LD_VAR 0 7
71755: PUSH
71756: LD_INT 1
71758: ARRAY
71759: PUSH
71760: LD_INT 2
71762: ARRAY
71763: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71764: LD_ADDR_VAR 0 6
71768: PUSH
71769: LD_VAR 0 7
71773: PUSH
71774: LD_INT 1
71776: ARRAY
71777: PUSH
71778: LD_INT 3
71780: ARRAY
71781: ST_TO_ADDR
// if InArea ( x , y , area ) then
71782: LD_VAR 0 5
71786: PPUSH
71787: LD_VAR 0 6
71791: PPUSH
71792: LD_VAR 0 2
71796: PPUSH
71797: CALL_OW 309
71801: IFFALSE 71812
// ComStop ( unit ) ;
71803: LD_VAR 0 1
71807: PPUSH
71808: CALL_OW 141
// end ;
71812: LD_VAR 0 4
71816: RET
// export function Abs ( value ) ; begin
71817: LD_INT 0
71819: PPUSH
// result := value ;
71820: LD_ADDR_VAR 0 2
71824: PUSH
71825: LD_VAR 0 1
71829: ST_TO_ADDR
// if value < 0 then
71830: LD_VAR 0 1
71834: PUSH
71835: LD_INT 0
71837: LESS
71838: IFFALSE 71855
// result := value * - 1 ;
71840: LD_ADDR_VAR 0 2
71844: PUSH
71845: LD_VAR 0 1
71849: PUSH
71850: LD_INT 1
71852: NEG
71853: MUL
71854: ST_TO_ADDR
// end ;
71855: LD_VAR 0 2
71859: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71860: LD_INT 0
71862: PPUSH
71863: PPUSH
71864: PPUSH
71865: PPUSH
71866: PPUSH
71867: PPUSH
71868: PPUSH
71869: PPUSH
// if not unit or not building then
71870: LD_VAR 0 1
71874: NOT
71875: PUSH
71876: LD_VAR 0 2
71880: NOT
71881: OR
71882: IFFALSE 71886
// exit ;
71884: GO 72112
// x := GetX ( building ) ;
71886: LD_ADDR_VAR 0 4
71890: PUSH
71891: LD_VAR 0 2
71895: PPUSH
71896: CALL_OW 250
71900: ST_TO_ADDR
// y := GetY ( building ) ;
71901: LD_ADDR_VAR 0 6
71905: PUSH
71906: LD_VAR 0 2
71910: PPUSH
71911: CALL_OW 251
71915: ST_TO_ADDR
// d := GetDir ( building ) ;
71916: LD_ADDR_VAR 0 8
71920: PUSH
71921: LD_VAR 0 2
71925: PPUSH
71926: CALL_OW 254
71930: ST_TO_ADDR
// r := 4 ;
71931: LD_ADDR_VAR 0 9
71935: PUSH
71936: LD_INT 4
71938: ST_TO_ADDR
// for i := 1 to 5 do
71939: LD_ADDR_VAR 0 10
71943: PUSH
71944: DOUBLE
71945: LD_INT 1
71947: DEC
71948: ST_TO_ADDR
71949: LD_INT 5
71951: PUSH
71952: FOR_TO
71953: IFFALSE 72110
// begin _x := ShiftX ( x , d , r + i ) ;
71955: LD_ADDR_VAR 0 5
71959: PUSH
71960: LD_VAR 0 4
71964: PPUSH
71965: LD_VAR 0 8
71969: PPUSH
71970: LD_VAR 0 9
71974: PUSH
71975: LD_VAR 0 10
71979: PLUS
71980: PPUSH
71981: CALL_OW 272
71985: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71986: LD_ADDR_VAR 0 7
71990: PUSH
71991: LD_VAR 0 6
71995: PPUSH
71996: LD_VAR 0 8
72000: PPUSH
72001: LD_VAR 0 9
72005: PUSH
72006: LD_VAR 0 10
72010: PLUS
72011: PPUSH
72012: CALL_OW 273
72016: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72017: LD_VAR 0 5
72021: PPUSH
72022: LD_VAR 0 7
72026: PPUSH
72027: CALL_OW 488
72031: PUSH
72032: LD_VAR 0 5
72036: PPUSH
72037: LD_VAR 0 7
72041: PPUSH
72042: CALL_OW 428
72046: PPUSH
72047: CALL_OW 247
72051: PUSH
72052: LD_INT 3
72054: PUSH
72055: LD_INT 2
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: IN
72062: NOT
72063: AND
72064: IFFALSE 72108
// begin ComMoveXY ( unit , _x , _y ) ;
72066: LD_VAR 0 1
72070: PPUSH
72071: LD_VAR 0 5
72075: PPUSH
72076: LD_VAR 0 7
72080: PPUSH
72081: CALL_OW 111
// result := [ _x , _y ] ;
72085: LD_ADDR_VAR 0 3
72089: PUSH
72090: LD_VAR 0 5
72094: PUSH
72095: LD_VAR 0 7
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: ST_TO_ADDR
// exit ;
72104: POP
72105: POP
72106: GO 72112
// end ; end ;
72108: GO 71952
72110: POP
72111: POP
// end ;
72112: LD_VAR 0 3
72116: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72117: LD_INT 0
72119: PPUSH
72120: PPUSH
72121: PPUSH
// result := 0 ;
72122: LD_ADDR_VAR 0 3
72126: PUSH
72127: LD_INT 0
72129: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72130: LD_VAR 0 1
72134: PUSH
72135: LD_INT 0
72137: LESS
72138: PUSH
72139: LD_VAR 0 1
72143: PUSH
72144: LD_INT 8
72146: GREATER
72147: OR
72148: PUSH
72149: LD_VAR 0 2
72153: PUSH
72154: LD_INT 0
72156: LESS
72157: OR
72158: PUSH
72159: LD_VAR 0 2
72163: PUSH
72164: LD_INT 8
72166: GREATER
72167: OR
72168: IFFALSE 72172
// exit ;
72170: GO 72247
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72172: LD_ADDR_VAR 0 4
72176: PUSH
72177: LD_INT 22
72179: PUSH
72180: LD_VAR 0 2
72184: PUSH
72185: EMPTY
72186: LIST
72187: LIST
72188: PPUSH
72189: CALL_OW 69
72193: PUSH
72194: FOR_IN
72195: IFFALSE 72245
// begin un := UnitShoot ( i ) ;
72197: LD_ADDR_VAR 0 5
72201: PUSH
72202: LD_VAR 0 4
72206: PPUSH
72207: CALL_OW 504
72211: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72212: LD_VAR 0 5
72216: PPUSH
72217: CALL_OW 255
72221: PUSH
72222: LD_VAR 0 1
72226: EQUAL
72227: IFFALSE 72243
// begin result := un ;
72229: LD_ADDR_VAR 0 3
72233: PUSH
72234: LD_VAR 0 5
72238: ST_TO_ADDR
// exit ;
72239: POP
72240: POP
72241: GO 72247
// end ; end ;
72243: GO 72194
72245: POP
72246: POP
// end ;
72247: LD_VAR 0 3
72251: RET
// export function GetCargoBay ( units ) ; begin
72252: LD_INT 0
72254: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72255: LD_ADDR_VAR 0 2
72259: PUSH
72260: LD_VAR 0 1
72264: PPUSH
72265: LD_INT 2
72267: PUSH
72268: LD_INT 34
72270: PUSH
72271: LD_INT 12
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: PUSH
72278: LD_INT 34
72280: PUSH
72281: LD_INT 51
72283: PUSH
72284: EMPTY
72285: LIST
72286: LIST
72287: PUSH
72288: LD_INT 34
72290: PUSH
72291: LD_INT 32
72293: PUSH
72294: EMPTY
72295: LIST
72296: LIST
72297: PUSH
72298: LD_INT 34
72300: PUSH
72301: LD_EXP 39
72305: PUSH
72306: EMPTY
72307: LIST
72308: LIST
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: LIST
72314: LIST
72315: LIST
72316: PPUSH
72317: CALL_OW 72
72321: ST_TO_ADDR
// end ;
72322: LD_VAR 0 2
72326: RET
// export function Negate ( value ) ; begin
72327: LD_INT 0
72329: PPUSH
// result := not value ;
72330: LD_ADDR_VAR 0 2
72334: PUSH
72335: LD_VAR 0 1
72339: NOT
72340: ST_TO_ADDR
// end ;
72341: LD_VAR 0 2
72345: RET
// export function Inc ( value ) ; begin
72346: LD_INT 0
72348: PPUSH
// result := value + 1 ;
72349: LD_ADDR_VAR 0 2
72353: PUSH
72354: LD_VAR 0 1
72358: PUSH
72359: LD_INT 1
72361: PLUS
72362: ST_TO_ADDR
// end ;
72363: LD_VAR 0 2
72367: RET
// export function Dec ( value ) ; begin
72368: LD_INT 0
72370: PPUSH
// result := value - 1 ;
72371: LD_ADDR_VAR 0 2
72375: PUSH
72376: LD_VAR 0 1
72380: PUSH
72381: LD_INT 1
72383: MINUS
72384: ST_TO_ADDR
// end ;
72385: LD_VAR 0 2
72389: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72390: LD_INT 0
72392: PPUSH
72393: PPUSH
72394: PPUSH
72395: PPUSH
72396: PPUSH
72397: PPUSH
72398: PPUSH
72399: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72400: LD_VAR 0 1
72404: PPUSH
72405: LD_VAR 0 2
72409: PPUSH
72410: CALL_OW 488
72414: NOT
72415: PUSH
72416: LD_VAR 0 3
72420: PPUSH
72421: LD_VAR 0 4
72425: PPUSH
72426: CALL_OW 488
72430: NOT
72431: OR
72432: IFFALSE 72445
// begin result := - 1 ;
72434: LD_ADDR_VAR 0 5
72438: PUSH
72439: LD_INT 1
72441: NEG
72442: ST_TO_ADDR
// exit ;
72443: GO 72680
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72445: LD_ADDR_VAR 0 12
72449: PUSH
72450: LD_VAR 0 1
72454: PPUSH
72455: LD_VAR 0 2
72459: PPUSH
72460: LD_VAR 0 3
72464: PPUSH
72465: LD_VAR 0 4
72469: PPUSH
72470: CALL 71528 0 4
72474: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72475: LD_ADDR_VAR 0 11
72479: PUSH
72480: LD_VAR 0 1
72484: PPUSH
72485: LD_VAR 0 2
72489: PPUSH
72490: LD_VAR 0 12
72494: PUSH
72495: LD_INT 1
72497: ARRAY
72498: PPUSH
72499: LD_VAR 0 12
72503: PUSH
72504: LD_INT 2
72506: ARRAY
72507: PPUSH
72508: CALL_OW 298
72512: ST_TO_ADDR
// distance := 9999 ;
72513: LD_ADDR_VAR 0 10
72517: PUSH
72518: LD_INT 9999
72520: ST_TO_ADDR
// for i := 0 to 5 do
72521: LD_ADDR_VAR 0 6
72525: PUSH
72526: DOUBLE
72527: LD_INT 0
72529: DEC
72530: ST_TO_ADDR
72531: LD_INT 5
72533: PUSH
72534: FOR_TO
72535: IFFALSE 72678
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72537: LD_ADDR_VAR 0 7
72541: PUSH
72542: LD_VAR 0 1
72546: PPUSH
72547: LD_VAR 0 6
72551: PPUSH
72552: LD_VAR 0 11
72556: PPUSH
72557: CALL_OW 272
72561: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72562: LD_ADDR_VAR 0 8
72566: PUSH
72567: LD_VAR 0 2
72571: PPUSH
72572: LD_VAR 0 6
72576: PPUSH
72577: LD_VAR 0 11
72581: PPUSH
72582: CALL_OW 273
72586: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72587: LD_VAR 0 7
72591: PPUSH
72592: LD_VAR 0 8
72596: PPUSH
72597: CALL_OW 488
72601: NOT
72602: IFFALSE 72606
// continue ;
72604: GO 72534
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72606: LD_ADDR_VAR 0 9
72610: PUSH
72611: LD_VAR 0 12
72615: PUSH
72616: LD_INT 1
72618: ARRAY
72619: PPUSH
72620: LD_VAR 0 12
72624: PUSH
72625: LD_INT 2
72627: ARRAY
72628: PPUSH
72629: LD_VAR 0 7
72633: PPUSH
72634: LD_VAR 0 8
72638: PPUSH
72639: CALL_OW 298
72643: ST_TO_ADDR
// if tmp < distance then
72644: LD_VAR 0 9
72648: PUSH
72649: LD_VAR 0 10
72653: LESS
72654: IFFALSE 72676
// begin result := i ;
72656: LD_ADDR_VAR 0 5
72660: PUSH
72661: LD_VAR 0 6
72665: ST_TO_ADDR
// distance := tmp ;
72666: LD_ADDR_VAR 0 10
72670: PUSH
72671: LD_VAR 0 9
72675: ST_TO_ADDR
// end ; end ;
72676: GO 72534
72678: POP
72679: POP
// end ;
72680: LD_VAR 0 5
72684: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72685: LD_INT 0
72687: PPUSH
72688: PPUSH
// if not driver or not IsInUnit ( driver ) then
72689: LD_VAR 0 1
72693: NOT
72694: PUSH
72695: LD_VAR 0 1
72699: PPUSH
72700: CALL_OW 310
72704: NOT
72705: OR
72706: IFFALSE 72710
// exit ;
72708: GO 72800
// vehicle := IsInUnit ( driver ) ;
72710: LD_ADDR_VAR 0 3
72714: PUSH
72715: LD_VAR 0 1
72719: PPUSH
72720: CALL_OW 310
72724: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72725: LD_VAR 0 1
72729: PPUSH
72730: LD_STRING \
72732: PUSH
72733: LD_INT 0
72735: PUSH
72736: LD_INT 0
72738: PUSH
72739: LD_INT 0
72741: PUSH
72742: LD_INT 0
72744: PUSH
72745: LD_INT 0
72747: PUSH
72748: LD_INT 0
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: LIST
72755: LIST
72756: LIST
72757: LIST
72758: LIST
72759: PUSH
72760: LD_STRING E
72762: PUSH
72763: LD_INT 0
72765: PUSH
72766: LD_INT 0
72768: PUSH
72769: LD_VAR 0 3
72773: PUSH
72774: LD_INT 0
72776: PUSH
72777: LD_INT 0
72779: PUSH
72780: LD_INT 0
72782: PUSH
72783: EMPTY
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: LIST
72790: LIST
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: PPUSH
72796: CALL_OW 446
// end ;
72800: LD_VAR 0 2
72804: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72805: LD_INT 0
72807: PPUSH
72808: PPUSH
// if not driver or not IsInUnit ( driver ) then
72809: LD_VAR 0 1
72813: NOT
72814: PUSH
72815: LD_VAR 0 1
72819: PPUSH
72820: CALL_OW 310
72824: NOT
72825: OR
72826: IFFALSE 72830
// exit ;
72828: GO 72920
// vehicle := IsInUnit ( driver ) ;
72830: LD_ADDR_VAR 0 3
72834: PUSH
72835: LD_VAR 0 1
72839: PPUSH
72840: CALL_OW 310
72844: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72845: LD_VAR 0 1
72849: PPUSH
72850: LD_STRING \
72852: PUSH
72853: LD_INT 0
72855: PUSH
72856: LD_INT 0
72858: PUSH
72859: LD_INT 0
72861: PUSH
72862: LD_INT 0
72864: PUSH
72865: LD_INT 0
72867: PUSH
72868: LD_INT 0
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: LIST
72878: LIST
72879: PUSH
72880: LD_STRING E
72882: PUSH
72883: LD_INT 0
72885: PUSH
72886: LD_INT 0
72888: PUSH
72889: LD_VAR 0 3
72893: PUSH
72894: LD_INT 0
72896: PUSH
72897: LD_INT 0
72899: PUSH
72900: LD_INT 0
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: LIST
72907: LIST
72908: LIST
72909: LIST
72910: LIST
72911: PUSH
72912: EMPTY
72913: LIST
72914: LIST
72915: PPUSH
72916: CALL_OW 447
// end ;
72920: LD_VAR 0 2
72924: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72925: LD_INT 0
72927: PPUSH
72928: PPUSH
72929: PPUSH
// tmp := [ ] ;
72930: LD_ADDR_VAR 0 5
72934: PUSH
72935: EMPTY
72936: ST_TO_ADDR
// for i in units do
72937: LD_ADDR_VAR 0 4
72941: PUSH
72942: LD_VAR 0 1
72946: PUSH
72947: FOR_IN
72948: IFFALSE 72986
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72950: LD_ADDR_VAR 0 5
72954: PUSH
72955: LD_VAR 0 5
72959: PPUSH
72960: LD_VAR 0 5
72964: PUSH
72965: LD_INT 1
72967: PLUS
72968: PPUSH
72969: LD_VAR 0 4
72973: PPUSH
72974: CALL_OW 256
72978: PPUSH
72979: CALL_OW 2
72983: ST_TO_ADDR
72984: GO 72947
72986: POP
72987: POP
// if not tmp then
72988: LD_VAR 0 5
72992: NOT
72993: IFFALSE 72997
// exit ;
72995: GO 73045
// if asc then
72997: LD_VAR 0 2
73001: IFFALSE 73025
// result := SortListByListAsc ( units , tmp ) else
73003: LD_ADDR_VAR 0 3
73007: PUSH
73008: LD_VAR 0 1
73012: PPUSH
73013: LD_VAR 0 5
73017: PPUSH
73018: CALL_OW 76
73022: ST_TO_ADDR
73023: GO 73045
// result := SortListByListDesc ( units , tmp ) ;
73025: LD_ADDR_VAR 0 3
73029: PUSH
73030: LD_VAR 0 1
73034: PPUSH
73035: LD_VAR 0 5
73039: PPUSH
73040: CALL_OW 77
73044: ST_TO_ADDR
// end ;
73045: LD_VAR 0 3
73049: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73050: LD_INT 0
73052: PPUSH
73053: PPUSH
// task := GetTaskList ( mech ) ;
73054: LD_ADDR_VAR 0 4
73058: PUSH
73059: LD_VAR 0 1
73063: PPUSH
73064: CALL_OW 437
73068: ST_TO_ADDR
// if not task then
73069: LD_VAR 0 4
73073: NOT
73074: IFFALSE 73078
// exit ;
73076: GO 73120
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73078: LD_ADDR_VAR 0 3
73082: PUSH
73083: LD_VAR 0 4
73087: PUSH
73088: LD_INT 1
73090: ARRAY
73091: PUSH
73092: LD_INT 1
73094: ARRAY
73095: PUSH
73096: LD_STRING r
73098: EQUAL
73099: PUSH
73100: LD_VAR 0 4
73104: PUSH
73105: LD_INT 1
73107: ARRAY
73108: PUSH
73109: LD_INT 4
73111: ARRAY
73112: PUSH
73113: LD_VAR 0 2
73117: EQUAL
73118: AND
73119: ST_TO_ADDR
// end ;
73120: LD_VAR 0 3
73124: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73125: LD_INT 0
73127: PPUSH
// SetDir ( unit , d ) ;
73128: LD_VAR 0 1
73132: PPUSH
73133: LD_VAR 0 4
73137: PPUSH
73138: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
73142: LD_VAR 0 1
73146: PPUSH
73147: LD_VAR 0 2
73151: PPUSH
73152: LD_VAR 0 3
73156: PPUSH
73157: LD_VAR 0 5
73161: PPUSH
73162: CALL_OW 48
// end ;
73166: LD_VAR 0 6
73170: RET
// export function ToNaturalNumber ( number ) ; begin
73171: LD_INT 0
73173: PPUSH
// result := number div 1 ;
73174: LD_ADDR_VAR 0 2
73178: PUSH
73179: LD_VAR 0 1
73183: PUSH
73184: LD_INT 1
73186: DIV
73187: ST_TO_ADDR
// if number < 0 then
73188: LD_VAR 0 1
73192: PUSH
73193: LD_INT 0
73195: LESS
73196: IFFALSE 73206
// result := 0 ;
73198: LD_ADDR_VAR 0 2
73202: PUSH
73203: LD_INT 0
73205: ST_TO_ADDR
// end ;
73206: LD_VAR 0 2
73210: RET
// export function SortByClass ( units , class ) ; var un ; begin
73211: LD_INT 0
73213: PPUSH
73214: PPUSH
// if not units or not class then
73215: LD_VAR 0 1
73219: NOT
73220: PUSH
73221: LD_VAR 0 2
73225: NOT
73226: OR
73227: IFFALSE 73231
// exit ;
73229: GO 73326
// result := [ ] ;
73231: LD_ADDR_VAR 0 3
73235: PUSH
73236: EMPTY
73237: ST_TO_ADDR
// for un in units do
73238: LD_ADDR_VAR 0 4
73242: PUSH
73243: LD_VAR 0 1
73247: PUSH
73248: FOR_IN
73249: IFFALSE 73324
// if GetClass ( un ) = class then
73251: LD_VAR 0 4
73255: PPUSH
73256: CALL_OW 257
73260: PUSH
73261: LD_VAR 0 2
73265: EQUAL
73266: IFFALSE 73293
// result := Insert ( result , 1 , un ) else
73268: LD_ADDR_VAR 0 3
73272: PUSH
73273: LD_VAR 0 3
73277: PPUSH
73278: LD_INT 1
73280: PPUSH
73281: LD_VAR 0 4
73285: PPUSH
73286: CALL_OW 2
73290: ST_TO_ADDR
73291: GO 73322
// result := Replace ( result , result + 1 , un ) ;
73293: LD_ADDR_VAR 0 3
73297: PUSH
73298: LD_VAR 0 3
73302: PPUSH
73303: LD_VAR 0 3
73307: PUSH
73308: LD_INT 1
73310: PLUS
73311: PPUSH
73312: LD_VAR 0 4
73316: PPUSH
73317: CALL_OW 1
73321: ST_TO_ADDR
73322: GO 73248
73324: POP
73325: POP
// end ;
73326: LD_VAR 0 3
73330: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73331: LD_INT 0
73333: PPUSH
73334: PPUSH
73335: PPUSH
73336: PPUSH
73337: PPUSH
73338: PPUSH
73339: PPUSH
// result := [ ] ;
73340: LD_ADDR_VAR 0 4
73344: PUSH
73345: EMPTY
73346: ST_TO_ADDR
// if x - r < 0 then
73347: LD_VAR 0 1
73351: PUSH
73352: LD_VAR 0 3
73356: MINUS
73357: PUSH
73358: LD_INT 0
73360: LESS
73361: IFFALSE 73373
// min_x := 0 else
73363: LD_ADDR_VAR 0 8
73367: PUSH
73368: LD_INT 0
73370: ST_TO_ADDR
73371: GO 73389
// min_x := x - r ;
73373: LD_ADDR_VAR 0 8
73377: PUSH
73378: LD_VAR 0 1
73382: PUSH
73383: LD_VAR 0 3
73387: MINUS
73388: ST_TO_ADDR
// if y - r < 0 then
73389: LD_VAR 0 2
73393: PUSH
73394: LD_VAR 0 3
73398: MINUS
73399: PUSH
73400: LD_INT 0
73402: LESS
73403: IFFALSE 73415
// min_y := 0 else
73405: LD_ADDR_VAR 0 7
73409: PUSH
73410: LD_INT 0
73412: ST_TO_ADDR
73413: GO 73431
// min_y := y - r ;
73415: LD_ADDR_VAR 0 7
73419: PUSH
73420: LD_VAR 0 2
73424: PUSH
73425: LD_VAR 0 3
73429: MINUS
73430: ST_TO_ADDR
// max_x := x + r ;
73431: LD_ADDR_VAR 0 9
73435: PUSH
73436: LD_VAR 0 1
73440: PUSH
73441: LD_VAR 0 3
73445: PLUS
73446: ST_TO_ADDR
// max_y := y + r ;
73447: LD_ADDR_VAR 0 10
73451: PUSH
73452: LD_VAR 0 2
73456: PUSH
73457: LD_VAR 0 3
73461: PLUS
73462: ST_TO_ADDR
// for _x = min_x to max_x do
73463: LD_ADDR_VAR 0 5
73467: PUSH
73468: DOUBLE
73469: LD_VAR 0 8
73473: DEC
73474: ST_TO_ADDR
73475: LD_VAR 0 9
73479: PUSH
73480: FOR_TO
73481: IFFALSE 73582
// for _y = min_y to max_y do
73483: LD_ADDR_VAR 0 6
73487: PUSH
73488: DOUBLE
73489: LD_VAR 0 7
73493: DEC
73494: ST_TO_ADDR
73495: LD_VAR 0 10
73499: PUSH
73500: FOR_TO
73501: IFFALSE 73578
// begin if not ValidHex ( _x , _y ) then
73503: LD_VAR 0 5
73507: PPUSH
73508: LD_VAR 0 6
73512: PPUSH
73513: CALL_OW 488
73517: NOT
73518: IFFALSE 73522
// continue ;
73520: GO 73500
// if GetResourceTypeXY ( _x , _y ) then
73522: LD_VAR 0 5
73526: PPUSH
73527: LD_VAR 0 6
73531: PPUSH
73532: CALL_OW 283
73536: IFFALSE 73576
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73538: LD_ADDR_VAR 0 4
73542: PUSH
73543: LD_VAR 0 4
73547: PPUSH
73548: LD_VAR 0 4
73552: PUSH
73553: LD_INT 1
73555: PLUS
73556: PPUSH
73557: LD_VAR 0 5
73561: PUSH
73562: LD_VAR 0 6
73566: PUSH
73567: EMPTY
73568: LIST
73569: LIST
73570: PPUSH
73571: CALL_OW 1
73575: ST_TO_ADDR
// end ;
73576: GO 73500
73578: POP
73579: POP
73580: GO 73480
73582: POP
73583: POP
// end ;
73584: LD_VAR 0 4
73588: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73589: LD_INT 0
73591: PPUSH
73592: PPUSH
73593: PPUSH
73594: PPUSH
73595: PPUSH
73596: PPUSH
73597: PPUSH
73598: PPUSH
// if not units then
73599: LD_VAR 0 1
73603: NOT
73604: IFFALSE 73608
// exit ;
73606: GO 74134
// result := UnitFilter ( units , [ f_ok ] ) ;
73608: LD_ADDR_VAR 0 3
73612: PUSH
73613: LD_VAR 0 1
73617: PPUSH
73618: LD_INT 50
73620: PUSH
73621: EMPTY
73622: LIST
73623: PPUSH
73624: CALL_OW 72
73628: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73629: LD_ADDR_VAR 0 8
73633: PUSH
73634: LD_VAR 0 1
73638: PUSH
73639: LD_INT 1
73641: ARRAY
73642: PPUSH
73643: CALL_OW 255
73647: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
73648: LD_ADDR_VAR 0 10
73652: PUSH
73653: LD_INT 29
73655: PUSH
73656: LD_EXP 42
73660: PUSH
73661: LD_INT 49
73663: PUSH
73664: EMPTY
73665: LIST
73666: LIST
73667: LIST
73668: ST_TO_ADDR
// if not result then
73669: LD_VAR 0 3
73673: NOT
73674: IFFALSE 73678
// exit ;
73676: GO 74134
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73678: LD_ADDR_VAR 0 5
73682: PUSH
73683: LD_INT 81
73685: PUSH
73686: LD_VAR 0 8
73690: PUSH
73691: EMPTY
73692: LIST
73693: LIST
73694: PPUSH
73695: CALL_OW 69
73699: ST_TO_ADDR
// for i in result do
73700: LD_ADDR_VAR 0 4
73704: PUSH
73705: LD_VAR 0 3
73709: PUSH
73710: FOR_IN
73711: IFFALSE 74132
// begin tag := GetTag ( i ) + 1 ;
73713: LD_ADDR_VAR 0 9
73717: PUSH
73718: LD_VAR 0 4
73722: PPUSH
73723: CALL_OW 110
73727: PUSH
73728: LD_INT 1
73730: PLUS
73731: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
73732: LD_ADDR_VAR 0 7
73736: PUSH
73737: LD_VAR 0 4
73741: PPUSH
73742: CALL_OW 250
73746: PPUSH
73747: LD_VAR 0 4
73751: PPUSH
73752: CALL_OW 251
73756: PPUSH
73757: LD_INT 6
73759: PPUSH
73760: CALL 73331 0 3
73764: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
73765: LD_VAR 0 4
73769: PPUSH
73770: CALL_OW 247
73774: PUSH
73775: LD_INT 2
73777: EQUAL
73778: PUSH
73779: LD_VAR 0 7
73783: AND
73784: PUSH
73785: LD_VAR 0 4
73789: PPUSH
73790: CALL_OW 264
73794: PUSH
73795: LD_VAR 0 10
73799: IN
73800: NOT
73801: AND
73802: IFFALSE 73841
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73804: LD_VAR 0 4
73808: PPUSH
73809: LD_VAR 0 7
73813: PUSH
73814: LD_INT 1
73816: ARRAY
73817: PUSH
73818: LD_INT 1
73820: ARRAY
73821: PPUSH
73822: LD_VAR 0 7
73826: PUSH
73827: LD_INT 1
73829: ARRAY
73830: PUSH
73831: LD_INT 2
73833: ARRAY
73834: PPUSH
73835: CALL_OW 116
73839: GO 74130
// if path > tag then
73841: LD_VAR 0 2
73845: PUSH
73846: LD_VAR 0 9
73850: GREATER
73851: IFFALSE 74059
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73853: LD_ADDR_VAR 0 6
73857: PUSH
73858: LD_VAR 0 5
73862: PPUSH
73863: LD_INT 91
73865: PUSH
73866: LD_VAR 0 4
73870: PUSH
73871: LD_INT 8
73873: PUSH
73874: EMPTY
73875: LIST
73876: LIST
73877: LIST
73878: PPUSH
73879: CALL_OW 72
73883: ST_TO_ADDR
// if nearEnemy then
73884: LD_VAR 0 6
73888: IFFALSE 73957
// begin if GetWeapon ( i ) = ru_time_lapser then
73890: LD_VAR 0 4
73894: PPUSH
73895: CALL_OW 264
73899: PUSH
73900: LD_INT 49
73902: EQUAL
73903: IFFALSE 73931
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73905: LD_VAR 0 4
73909: PPUSH
73910: LD_VAR 0 6
73914: PPUSH
73915: LD_VAR 0 4
73919: PPUSH
73920: CALL_OW 74
73924: PPUSH
73925: CALL_OW 112
73929: GO 73955
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73931: LD_VAR 0 4
73935: PPUSH
73936: LD_VAR 0 6
73940: PPUSH
73941: LD_VAR 0 4
73945: PPUSH
73946: CALL_OW 74
73950: PPUSH
73951: CALL_OW 115
// end else
73955: GO 74057
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73957: LD_VAR 0 4
73961: PPUSH
73962: LD_VAR 0 2
73966: PUSH
73967: LD_VAR 0 9
73971: ARRAY
73972: PUSH
73973: LD_INT 1
73975: ARRAY
73976: PPUSH
73977: LD_VAR 0 2
73981: PUSH
73982: LD_VAR 0 9
73986: ARRAY
73987: PUSH
73988: LD_INT 2
73990: ARRAY
73991: PPUSH
73992: CALL_OW 297
73996: PUSH
73997: LD_INT 6
73999: GREATER
74000: IFFALSE 74043
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74002: LD_VAR 0 4
74006: PPUSH
74007: LD_VAR 0 2
74011: PUSH
74012: LD_VAR 0 9
74016: ARRAY
74017: PUSH
74018: LD_INT 1
74020: ARRAY
74021: PPUSH
74022: LD_VAR 0 2
74026: PUSH
74027: LD_VAR 0 9
74031: ARRAY
74032: PUSH
74033: LD_INT 2
74035: ARRAY
74036: PPUSH
74037: CALL_OW 114
74041: GO 74057
// SetTag ( i , tag ) ;
74043: LD_VAR 0 4
74047: PPUSH
74048: LD_VAR 0 9
74052: PPUSH
74053: CALL_OW 109
// end else
74057: GO 74130
// if enemy then
74059: LD_VAR 0 5
74063: IFFALSE 74130
// begin if GetWeapon ( i ) = ru_time_lapser then
74065: LD_VAR 0 4
74069: PPUSH
74070: CALL_OW 264
74074: PUSH
74075: LD_INT 49
74077: EQUAL
74078: IFFALSE 74106
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74080: LD_VAR 0 4
74084: PPUSH
74085: LD_VAR 0 5
74089: PPUSH
74090: LD_VAR 0 4
74094: PPUSH
74095: CALL_OW 74
74099: PPUSH
74100: CALL_OW 112
74104: GO 74130
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74106: LD_VAR 0 4
74110: PPUSH
74111: LD_VAR 0 5
74115: PPUSH
74116: LD_VAR 0 4
74120: PPUSH
74121: CALL_OW 74
74125: PPUSH
74126: CALL_OW 115
// end ; end ;
74130: GO 73710
74132: POP
74133: POP
// end ;
74134: LD_VAR 0 3
74138: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
74139: LD_INT 0
74141: PPUSH
74142: PPUSH
74143: PPUSH
// if not unit or IsInUnit ( unit ) then
74144: LD_VAR 0 1
74148: NOT
74149: PUSH
74150: LD_VAR 0 1
74154: PPUSH
74155: CALL_OW 310
74159: OR
74160: IFFALSE 74164
// exit ;
74162: GO 74255
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
74164: LD_ADDR_VAR 0 4
74168: PUSH
74169: LD_VAR 0 1
74173: PPUSH
74174: CALL_OW 250
74178: PPUSH
74179: LD_VAR 0 2
74183: PPUSH
74184: LD_INT 1
74186: PPUSH
74187: CALL_OW 272
74191: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
74192: LD_ADDR_VAR 0 5
74196: PUSH
74197: LD_VAR 0 1
74201: PPUSH
74202: CALL_OW 251
74206: PPUSH
74207: LD_VAR 0 2
74211: PPUSH
74212: LD_INT 1
74214: PPUSH
74215: CALL_OW 273
74219: ST_TO_ADDR
// if ValidHex ( x , y ) then
74220: LD_VAR 0 4
74224: PPUSH
74225: LD_VAR 0 5
74229: PPUSH
74230: CALL_OW 488
74234: IFFALSE 74255
// ComTurnXY ( unit , x , y ) ;
74236: LD_VAR 0 1
74240: PPUSH
74241: LD_VAR 0 4
74245: PPUSH
74246: LD_VAR 0 5
74250: PPUSH
74251: CALL_OW 118
// end ;
74255: LD_VAR 0 3
74259: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74260: LD_INT 0
74262: PPUSH
74263: PPUSH
// result := false ;
74264: LD_ADDR_VAR 0 3
74268: PUSH
74269: LD_INT 0
74271: ST_TO_ADDR
// if not units then
74272: LD_VAR 0 2
74276: NOT
74277: IFFALSE 74281
// exit ;
74279: GO 74326
// for i in units do
74281: LD_ADDR_VAR 0 4
74285: PUSH
74286: LD_VAR 0 2
74290: PUSH
74291: FOR_IN
74292: IFFALSE 74324
// if See ( side , i ) then
74294: LD_VAR 0 1
74298: PPUSH
74299: LD_VAR 0 4
74303: PPUSH
74304: CALL_OW 292
74308: IFFALSE 74322
// begin result := true ;
74310: LD_ADDR_VAR 0 3
74314: PUSH
74315: LD_INT 1
74317: ST_TO_ADDR
// exit ;
74318: POP
74319: POP
74320: GO 74326
// end ;
74322: GO 74291
74324: POP
74325: POP
// end ;
74326: LD_VAR 0 3
74330: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
74331: LD_INT 0
74333: PPUSH
74334: PPUSH
74335: PPUSH
74336: PPUSH
// if not unit or not points then
74337: LD_VAR 0 1
74341: NOT
74342: PUSH
74343: LD_VAR 0 2
74347: NOT
74348: OR
74349: IFFALSE 74353
// exit ;
74351: GO 74443
// dist := 99999 ;
74353: LD_ADDR_VAR 0 5
74357: PUSH
74358: LD_INT 99999
74360: ST_TO_ADDR
// for i in points do
74361: LD_ADDR_VAR 0 4
74365: PUSH
74366: LD_VAR 0 2
74370: PUSH
74371: FOR_IN
74372: IFFALSE 74441
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74374: LD_ADDR_VAR 0 6
74378: PUSH
74379: LD_VAR 0 1
74383: PPUSH
74384: LD_VAR 0 4
74388: PUSH
74389: LD_INT 1
74391: ARRAY
74392: PPUSH
74393: LD_VAR 0 4
74397: PUSH
74398: LD_INT 2
74400: ARRAY
74401: PPUSH
74402: CALL_OW 297
74406: ST_TO_ADDR
// if tmpDist < dist then
74407: LD_VAR 0 6
74411: PUSH
74412: LD_VAR 0 5
74416: LESS
74417: IFFALSE 74439
// begin result := i ;
74419: LD_ADDR_VAR 0 3
74423: PUSH
74424: LD_VAR 0 4
74428: ST_TO_ADDR
// dist := tmpDist ;
74429: LD_ADDR_VAR 0 5
74433: PUSH
74434: LD_VAR 0 6
74438: ST_TO_ADDR
// end ; end ;
74439: GO 74371
74441: POP
74442: POP
// end ;
74443: LD_VAR 0 3
74447: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
74448: LD_INT 0
74450: PPUSH
// uc_side := side ;
74451: LD_ADDR_OWVAR 20
74455: PUSH
74456: LD_VAR 0 1
74460: ST_TO_ADDR
// uc_nation := 3 ;
74461: LD_ADDR_OWVAR 21
74465: PUSH
74466: LD_INT 3
74468: ST_TO_ADDR
// vc_chassis := 25 ;
74469: LD_ADDR_OWVAR 37
74473: PUSH
74474: LD_INT 25
74476: ST_TO_ADDR
// vc_engine := engine_siberite ;
74477: LD_ADDR_OWVAR 39
74481: PUSH
74482: LD_INT 3
74484: ST_TO_ADDR
// vc_control := control_computer ;
74485: LD_ADDR_OWVAR 38
74489: PUSH
74490: LD_INT 3
74492: ST_TO_ADDR
// vc_weapon := 59 ;
74493: LD_ADDR_OWVAR 40
74497: PUSH
74498: LD_INT 59
74500: ST_TO_ADDR
// result := CreateVehicle ;
74501: LD_ADDR_VAR 0 5
74505: PUSH
74506: CALL_OW 45
74510: ST_TO_ADDR
// SetDir ( result , d ) ;
74511: LD_VAR 0 5
74515: PPUSH
74516: LD_VAR 0 4
74520: PPUSH
74521: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
74525: LD_VAR 0 5
74529: PPUSH
74530: LD_VAR 0 2
74534: PPUSH
74535: LD_VAR 0 3
74539: PPUSH
74540: LD_INT 0
74542: PPUSH
74543: CALL_OW 48
// end ;
74547: LD_VAR 0 5
74551: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
74552: LD_INT 0
74554: PPUSH
74555: PPUSH
74556: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
74557: LD_ADDR_VAR 0 2
74561: PUSH
74562: LD_INT 0
74564: PUSH
74565: LD_INT 0
74567: PUSH
74568: LD_INT 0
74570: PUSH
74571: LD_INT 0
74573: PUSH
74574: EMPTY
74575: LIST
74576: LIST
74577: LIST
74578: LIST
74579: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
74580: LD_VAR 0 1
74584: NOT
74585: PUSH
74586: LD_VAR 0 1
74590: PPUSH
74591: CALL_OW 264
74595: PUSH
74596: LD_INT 12
74598: PUSH
74599: LD_INT 51
74601: PUSH
74602: LD_INT 32
74604: PUSH
74605: LD_EXP 39
74609: PUSH
74610: EMPTY
74611: LIST
74612: LIST
74613: LIST
74614: LIST
74615: IN
74616: NOT
74617: OR
74618: IFFALSE 74622
// exit ;
74620: GO 74720
// for i := 1 to 3 do
74622: LD_ADDR_VAR 0 3
74626: PUSH
74627: DOUBLE
74628: LD_INT 1
74630: DEC
74631: ST_TO_ADDR
74632: LD_INT 3
74634: PUSH
74635: FOR_TO
74636: IFFALSE 74718
// begin tmp := GetCargo ( cargo , i ) ;
74638: LD_ADDR_VAR 0 4
74642: PUSH
74643: LD_VAR 0 1
74647: PPUSH
74648: LD_VAR 0 3
74652: PPUSH
74653: CALL_OW 289
74657: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
74658: LD_ADDR_VAR 0 2
74662: PUSH
74663: LD_VAR 0 2
74667: PPUSH
74668: LD_VAR 0 3
74672: PPUSH
74673: LD_VAR 0 4
74677: PPUSH
74678: CALL_OW 1
74682: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
74683: LD_ADDR_VAR 0 2
74687: PUSH
74688: LD_VAR 0 2
74692: PPUSH
74693: LD_INT 4
74695: PPUSH
74696: LD_VAR 0 2
74700: PUSH
74701: LD_INT 4
74703: ARRAY
74704: PUSH
74705: LD_VAR 0 4
74709: PLUS
74710: PPUSH
74711: CALL_OW 1
74715: ST_TO_ADDR
// end ;
74716: GO 74635
74718: POP
74719: POP
// end ;
74720: LD_VAR 0 2
74724: RET
// export function Length ( array ) ; begin
74725: LD_INT 0
74727: PPUSH
// result := array + 0 ;
74728: LD_ADDR_VAR 0 2
74732: PUSH
74733: LD_VAR 0 1
74737: PUSH
74738: LD_INT 0
74740: PLUS
74741: ST_TO_ADDR
// end ; end_of_file
74742: LD_VAR 0 2
74746: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74747: LD_VAR 0 1
74751: PUSH
74752: LD_INT 200
74754: DOUBLE
74755: GREATEREQUAL
74756: IFFALSE 74764
74758: LD_INT 299
74760: DOUBLE
74761: LESSEQUAL
74762: IFTRUE 74766
74764: GO 74798
74766: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74767: LD_VAR 0 1
74771: PPUSH
74772: LD_VAR 0 2
74776: PPUSH
74777: LD_VAR 0 3
74781: PPUSH
74782: LD_VAR 0 4
74786: PPUSH
74787: LD_VAR 0 5
74791: PPUSH
74792: CALL 29897 0 5
74796: GO 74875
74798: LD_INT 300
74800: DOUBLE
74801: GREATEREQUAL
74802: IFFALSE 74810
74804: LD_INT 399
74806: DOUBLE
74807: LESSEQUAL
74808: IFTRUE 74812
74810: GO 74874
74812: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74813: LD_VAR 0 1
74817: PPUSH
74818: LD_VAR 0 2
74822: PPUSH
74823: LD_VAR 0 3
74827: PPUSH
74828: LD_VAR 0 4
74832: PPUSH
74833: LD_VAR 0 5
74837: PPUSH
74838: LD_VAR 0 6
74842: PPUSH
74843: LD_VAR 0 7
74847: PPUSH
74848: LD_VAR 0 8
74852: PPUSH
74853: LD_VAR 0 9
74857: PPUSH
74858: LD_VAR 0 10
74862: PPUSH
74863: LD_VAR 0 11
74867: PPUSH
74868: CALL 27539 0 11
74872: GO 74875
74874: POP
// end ;
74875: PPOPN 11
74877: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74878: LD_VAR 0 1
74882: PPUSH
74883: LD_VAR 0 2
74887: PPUSH
74888: LD_VAR 0 3
74892: PPUSH
74893: LD_VAR 0 4
74897: PPUSH
74898: LD_VAR 0 5
74902: PPUSH
74903: CALL 29633 0 5
// end ; end_of_file
74907: PPOPN 5
74909: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74910: LD_VAR 0 1
74914: PPUSH
74915: LD_VAR 0 2
74919: PPUSH
74920: LD_VAR 0 3
74924: PPUSH
74925: LD_VAR 0 4
74929: PPUSH
74930: LD_VAR 0 5
74934: PPUSH
74935: LD_VAR 0 6
74939: PPUSH
74940: CALL 15232 0 6
// end ;
74944: PPOPN 6
74946: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74947: LD_INT 0
74949: PPUSH
// begin if not units then
74950: LD_VAR 0 1
74954: NOT
74955: IFFALSE 74959
// exit ;
74957: GO 75047
// if p1 = 1 then
74959: LD_VAR 0 2
74963: PUSH
74964: LD_INT 1
74966: EQUAL
74967: IFFALSE 75047
// begin if p2 = 1 then
74969: LD_VAR 0 3
74973: PUSH
74974: LD_INT 1
74976: EQUAL
74977: IFFALSE 75008
// begin for i in units do
74979: LD_ADDR_VAR 0 7
74983: PUSH
74984: LD_VAR 0 1
74988: PUSH
74989: FOR_IN
74990: IFFALSE 75006
// begin SetUnitAttackType ( i , 3 ) ;
74992: LD_VAR 0 7
74996: PPUSH
74997: LD_INT 3
74999: PPUSH
75000: CALL_OW 603
// end ;
75004: GO 74989
75006: POP
75007: POP
// end ; if p2 = 2 then
75008: LD_VAR 0 3
75012: PUSH
75013: LD_INT 2
75015: EQUAL
75016: IFFALSE 75047
// begin for i in units do
75018: LD_ADDR_VAR 0 7
75022: PUSH
75023: LD_VAR 0 1
75027: PUSH
75028: FOR_IN
75029: IFFALSE 75045
// begin SetUnitAttackType ( i , 1 ) ;
75031: LD_VAR 0 7
75035: PPUSH
75036: LD_INT 1
75038: PPUSH
75039: CALL_OW 603
// end ;
75043: GO 75028
75045: POP
75046: POP
// end ; end ; end ;
75047: PPOPN 7
75049: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75050: CALL 15207 0 0
// end ;
75054: PPOPN 1
75056: END
